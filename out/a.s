
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #106496,d0
       8:	       subi.l #106496,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1a000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #106496,d0
      40:	       subi.l #106496,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1a000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 74e2 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #106496,d0
      7e:	       subi.l #106496,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1a000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13afa <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1a7a4 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13b12 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1a000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13afa <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1a7a4 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1a000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13afa <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1a7a4 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17b0e <PutChar+0x4>
     35c:	|  |              |   jsr 17036 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1a7ac <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1a7ac <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1a7ac <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1a7ac <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1a7ac <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1a7ac <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1a7ac <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17b38 <PutChar+0x2e>
     834:	|   jsr 17036 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1a7ac <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17b54 <PutChar+0x4a>
     8a6:	|   jsr 17036 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1a7ac <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1a7ac <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1a7ac <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1a7ac <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1a7ac <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1a7ac <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1a7ac <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1a7ac <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1a7a4 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1a7ac <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13afa <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1a7ac <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1a6aa <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1a764 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1a760 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1a6aa <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 97e4 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1a6ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1a6b2 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2c68 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17b7c <PutChar+0x72>
     e1a:	          jsr 17036 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1a6c6 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17b95 <PutChar+0x8b>
     e30:	      |   jsr 17036 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1a6c0 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1a7b0 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1a6c6 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17bc3 <PutChar+0xb9>
     ef0:	|         jsr 17036 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1a7b0 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17be3 <PutChar+0xd9>
     f3c:	|         jsr 17036 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1a6f8 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1a6fc <winHeight>,d0
     f6e:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17c03 <PutChar+0xf9>
     fbe:	|         jsr 17036 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1a7a4 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17c18 <PutChar+0x10e>
    1010:	   |   jsr 17036 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1a7ac <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1a6f4 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #106498,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #106562,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #106610,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #106650,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1a6ec <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17c53 <PutChar+0x149>
    11c6:	                jsr 17036 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1a6d8 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1a7b0 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1a6f8 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1a6f8 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 179f4 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1a6c6 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 179f4 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 179f4 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 179f4 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1a6f0 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1a6ec <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1a6f4 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1a6f4 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1a6d2 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

 UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, UWORD x, UWORD y) {
    14e8:	                   lea -72(sp),sp
    14ec:	                   move.l a6,-(sp)
    14ee:	                   move.l d2,-(sp)
    14f0:	                   move.l 92(sp),d1
    14f4:	                   move.l 96(sp),d0
    14f8:	                   move.w d1,d1
    14fa:	                   move.w d1,12(sp)
    14fe:	                   move.w d0,d0
    1500:	                   move.w d0,10(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1504:	                   move.l #14675968,56(sp)
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP);
    150c:	                   movea.l 84(sp),a0
    1510:	                   move.l (a0),d0
    1512:	               /-- bpl.s 1516 <CstDrawZBuffer+0x2e>
    1514:	               |   addq.l #7,d0
    1516:	               \-> asr.l #3,d0
    1518:	                   movea.l 84(sp),a0
    151c:	                   move.l 4(a0),d1
    1520:	                   move.l d1,-(sp)
    1522:	                   move.l d0,-(sp)
    1524:	                   jsr 179f4 <__mulsi3>
    152a:	                   addq.l #8,sp
    152c:	                   move.l d0,52(sp)
    1530:	                   moveq #2,d0
    1532:	                   move.l d0,48(sp)
    1536:	                   move.l 1a7a4 <SysBase>,d0
    153c:	                   movea.l d0,a6
    153e:	                   move.l 52(sp),d0
    1542:	                   move.l 48(sp),d1
    1546:	                   jsr -684(a6)
    154a:	                   move.l d0,44(sp)
    154e:	                   move.l 44(sp),d0
    1552:	                   move.l d0,40(sp)

  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1556:	                   movea.l 84(sp),a0
    155a:	                   move.l 4(a0),d0
    155e:	                   move.l d0,d0
    1560:	                   movea.w d0,a1
    1562:	                   movea.l 84(sp),a0
    1566:	                   move.l (a0),d0
    1568:	                   move.l d0,d0
    156a:	                   movea.w d0,a0
    156c:	                   clr.l -(sp)
    156e:	                   pea 1 <_start+0x1>
    1572:	                   move.l a1,-(sp)
    1574:	                   move.l a0,-(sp)
    1576:	                   pea 17c6f <PutChar+0x165>
    157c:	                   move.l 60(sp),-(sp)
    1580:	                   jsr 1711e <debug_register_bitmap>
    1586:	                   lea 24(sp),sp
  #endif  

  WaitBlit();
    158a:	                   move.l 1a7b0 <GfxBase>,d0
    1590:	                   movea.l d0,a6
    1592:	                   jsr -228(a6)

  custom->bltafwm = 0xffff;
    1596:	                   movea.l 56(sp),a0
    159a:	                   move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    15a0:	                   movea.l 56(sp),a0
    15a4:	                   move.w #-1,70(a0)
  custom->bltamod = 0;
    15aa:	                   movea.l 56(sp),a0
    15ae:	                   move.w #0,100(a0)
  custom->bltbmod = 0;
    15b4:	                   movea.l 56(sp),a0
    15b8:	                   move.w #0,98(a0)
  custom->bltcmod = 0;
    15be:	                   movea.l 56(sp),a0
    15c2:	                   move.w #0,96(a0)
  custom->bltdmod = 0;
    15c8:	                   movea.l 56(sp),a0
    15cc:	                   move.w #0,102(a0)
  custom->bltcon0 = 0x9f0; //Copy A to D
    15d2:	                   movea.l 56(sp),a0
    15d6:	                   move.w #2544,64(a0)
  custom->bltcon1 = 0;        
    15dc:	                   movea.l 56(sp),a0
    15e0:	                   move.w #0,66(a0)

  custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    15e6:	                   movea.l 84(sp),a0
    15ea:	                   move.l 24(a0),d2
    15ee:	                   movea.l 84(sp),a0
    15f2:	                   move.l (a0),d0
    15f4:	               /-- bpl.s 15f8 <CstDrawZBuffer+0x110>
    15f6:	               |   addq.l #7,d0
    15f8:	               \-> asr.l #3,d0
    15fa:	                   movea.l 84(sp),a0
    15fe:	                   move.l 4(a0),d1
    1602:	                   move.l d1,-(sp)
    1604:	                   move.l d0,-(sp)
    1606:	                   jsr 179f4 <__mulsi3>
    160c:	                   addq.l #8,sp
    160e:	                   move.l d0,d1
    1610:	                   move.l d1,d0
    1612:	                   add.l d0,d0
    1614:	                   add.l d0,d0
    1616:	                   add.l d1,d0
    1618:	                   add.l d2,d0
    161a:	                   movea.l 56(sp),a0
    161e:	                   move.l d0,80(a0)
  custom->bltdpt = (APTR) returnvalue;
    1622:	                   movea.l 56(sp),a0
    1626:	                   move.l 40(sp),84(a0)
  custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    162c:	                   movea.l 84(sp),a0
    1630:	                   move.l 4(a0),d0
    1634:	                   move.l d0,d0
    1636:	                   move.w d0,d1
    1638:	                   lsl.w #6,d1
    163a:	                   movea.l 84(sp),a0
    163e:	                   move.l (a0),d0
    1640:	                   movea.l d0,a0
    1642:	                   cmpa.w #0,a0
    1646:	               /-- bge.s 164c <CstDrawZBuffer+0x164>
    1648:	               |   lea 15(a0),a0
    164c:	               \-> move.l a0,d0
    164e:	                   asr.l #4,d0
    1650:	                   move.l d0,d0
    1652:	                   add.w d1,d0
    1654:	                   movea.l 56(sp),a0
    1658:	                   move.w d0,88(a0)

  while(zbuffer) 
    165c:	   /-------------- bra.w 1b76 <CstDrawZBuffer+0x68e>
  {

    UWORD spritex1oncanvas = x+sprite->xhot;
    1660:	/--|-------------> movea.l 84(sp),a0
    1664:	|  |               move.l 8(a0),d0
    1668:	|  |               move.l d0,d0
    166a:	|  |               move.w 12(sp),d1
    166e:	|  |               add.w d0,d1
    1670:	|  |               move.w d1,38(sp)
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1674:	|  |               movea.l 84(sp),a0
    1678:	|  |               move.l (a0),d0
    167a:	|  |               move.l d0,d0
    167c:	|  |               move.w 38(sp),d1
    1680:	|  |               add.w d0,d1
    1682:	|  |               move.w d1,36(sp)
    UWORD spritey1oncanvas = y+sprite->yhot;
    1686:	|  |               movea.l 84(sp),a0
    168a:	|  |               move.l 12(a0),d0
    168e:	|  |               move.l d0,d0
    1690:	|  |               move.w 10(sp),d1
    1694:	|  |               add.w d0,d1
    1696:	|  |               move.w d1,34(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    169a:	|  |               movea.l 84(sp),a0
    169e:	|  |               move.l 4(a0),d0
    16a2:	|  |               move.l d0,d0
    16a4:	|  |               move.w 34(sp),d1
    16a8:	|  |               add.w d0,d1
    16aa:	|  |               move.w d1,32(sp)

    UWORD zbufferx1oncanvas = zbuffer->topx;
    16ae:	|  |               movea.l 88(sp),a0
    16b2:	|  |               move.l 8(a0),d0
    16b6:	|  |               move.w d0,30(sp)
    UWORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    16ba:	|  |               movea.l 88(sp),a0
    16be:	|  |               move.l (a0),d0
    16c0:	|  |               move.l d0,d0
    16c2:	|  |               move.w 30(sp),d1
    16c6:	|  |               add.w d0,d1
    16c8:	|  |               move.w d1,28(sp)

    UWORD zbuffery1oncanvas = zbuffer->topy;
    16cc:	|  |               movea.l 88(sp),a0
    16d0:	|  |               move.l 12(a0),d0
    16d4:	|  |               move.w d0,26(sp)
    UWORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    16d8:	|  |               movea.l 88(sp),a0
    16dc:	|  |               move.l 4(a0),d0
    16e0:	|  |               move.l d0,d0
    16e2:	|  |               move.w 26(sp),d1
    16e6:	|  |               add.w d0,d1
    16e8:	|  |               move.w d1,24(sp)
  
    BOOL zbufferfromright = FALSE;
    16ec:	|  |               clr.w 78(sp)
    BOOL zbufferfromleft = FALSE;
    16f0:	|  |               clr.w 76(sp)
    BOOL zbufferfrombottom = FALSE;
    16f4:	|  |               clr.w 74(sp)
    BOOL zbufferfromtop = FALSE;
    16f8:	|  |               clr.w 72(sp)

    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) {
    16fc:	|  |               moveq #0,d0
    16fe:	|  |               move.w 32(sp),d0
    1702:	|  |               movea.l 88(sp),a0
    1706:	|  |               move.l 16(a0),d1
    170a:	|  |               cmp.l d0,d1
    170c:	|  +-------------- ble.w 1b76 <CstDrawZBuffer+0x68e>
      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    1710:	|  |               move.w 30(sp),d0
    1714:	|  |               cmp.w 38(sp),d0
    1718:	|  |           /-- bcs.s 172c <CstDrawZBuffer+0x244>
    171a:	|  |           |   move.w 30(sp),d1
    171e:	|  |           |   cmp.w 36(sp),d1
    1722:	|  |           +-- bcc.s 172c <CstDrawZBuffer+0x244>
        zbufferfromright = TRUE;
    1724:	|  |           |   move.w #1,78(sp)
    172a:	|  |        /--|-- bra.s 1746 <CstDrawZBuffer+0x25e>
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    172c:	|  |        |  \-> move.w 30(sp),d0
    1730:	|  |        |      cmp.w 38(sp),d0
    1734:	|  |        +----- bcc.s 1746 <CstDrawZBuffer+0x25e>
    1736:	|  |        |      move.w 28(sp),d1
    173a:	|  |        |      cmp.w 38(sp),d1
    173e:	|  |        +----- bls.s 1746 <CstDrawZBuffer+0x25e>
        zbufferfromleft = TRUE;       
    1740:	|  |        |      move.w #1,76(sp)

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
    1746:	|  |        \----> tst.w 76(sp)
    174a:	|  |           /-- bne.s 1752 <CstDrawZBuffer+0x26a>
    174c:	|  |           |   tst.w 78(sp)
    1750:	|  |        /--|-- beq.s 1788 <CstDrawZBuffer+0x2a0>
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1752:	|  |        |  \-> move.w 26(sp),d0
    1756:	|  |        |      cmp.w 34(sp),d0
    175a:	|  |        |  /-- bcs.s 176e <CstDrawZBuffer+0x286>
    175c:	|  |        |  |   move.w 26(sp),d1
    1760:	|  |        |  |   cmp.w 32(sp),d1
    1764:	|  |        |  +-- bcc.s 176e <CstDrawZBuffer+0x286>
          zbufferfrombottom = TRUE;
    1766:	|  |        |  |   move.w #1,74(sp)
    176c:	|  |        +--|-- bra.s 1788 <CstDrawZBuffer+0x2a0>

        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
    176e:	|  |        |  \-> move.w 26(sp),d0
    1772:	|  |        |      cmp.w 34(sp),d0
    1776:	|  |        +----- bcc.s 1788 <CstDrawZBuffer+0x2a0>
    1778:	|  |        |      move.w 24(sp),d1
    177c:	|  |        |      cmp.w 34(sp),d1
    1780:	|  |        +----- bls.s 1788 <CstDrawZBuffer+0x2a0>
          zbufferfromtop = TRUE;       
    1782:	|  |        |      move.w #1,72(sp)
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1788:	|  |        \----> tst.w 78(sp)
    178c:	|  |           /-- bne.s 1796 <CstDrawZBuffer+0x2ae>
    178e:	|  |           |   tst.w 76(sp)
    1792:	|  |  /--------|-- beq.w 1b6c <CstDrawZBuffer+0x684>
    1796:	|  |  |        \-> tst.w 74(sp)
    179a:	|  |  |        /-- bne.s 17a4 <CstDrawZBuffer+0x2bc>
    179c:	|  |  |        |   tst.w 72(sp)
    17a0:	|  |  +--------|-- beq.w 1b6c <CstDrawZBuffer+0x684>

        UWORD xdiff;
        UWORD xdiffbyte;          
        UWORD xdiffrest;
        UWORD bytewidth, width, rest;
        if(zbufferfromright)
    17a4:	|  |  |        \-> tst.w 78(sp)
    17a8:	|  |  |     /----- beq.w 18c4 <CstDrawZBuffer+0x3dc>
        {        
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    17ac:	|  |  |     |      move.w 38(sp),d0
    17b0:	|  |  |     |      sub.w 30(sp),d0
    17b4:	|  |  |     |      move.w d0,22(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    17b8:	|  |  |     |      move.w 22(sp),d0
    17bc:	|  |  |     |      lsr.w #4,d0
    17be:	|  |  |     |      add.w d0,d0
    17c0:	|  |  |     |      move.w d0,66(sp)
          xdiffrest = xdiff - xdiffbyte * 8;
    17c4:	|  |  |     |      move.w 66(sp),d0
    17c8:	|  |  |     |      lsl.w #3,d0
    17ca:	|  |  |     |      move.w 22(sp),d1
    17ce:	|  |  |     |      sub.w d0,d1
    17d0:	|  |  |     |      move.w d1,20(sp)
          bytewidth, width, rest;


          if( zbufferx2oncanvas > spritex2oncanvas)    
    17d4:	|  |  |     |      move.w 36(sp),d0
    17d8:	|  |  |     |      cmp.w 28(sp),d0
    17dc:	|  |  |  /--|----- bcc.w 1a2c <CstDrawZBuffer+0x544>
            //Width       ----------------++++++++++++++++++++++++++++----
            //BWidth      ----------------++++++++++++++++++++++++++++++++
            //ShiftB      ------------------------------------------------

         
            width = spritex2oncanvas - zbufferx1oncanvas;
    17e0:	|  |  |  |  |      move.w 36(sp),d1
    17e4:	|  |  |  |  |      sub.w 30(sp),d1
    17e8:	|  |  |  |  |      move.w d1,18(sp)
            bytewidth = (width/16)*2;
    17ec:	|  |  |  |  |      move.w 18(sp),d0
    17f0:	|  |  |  |  |      lsr.w #4,d0
    17f2:	|  |  |  |  |      add.w d0,d0
    17f4:	|  |  |  |  |      move.w d0,64(sp)

            WaitBlit();
    17f8:	|  |  |  |  |      move.l 1a7b0 <GfxBase>,d0
    17fe:	|  |  |  |  |      movea.l d0,a6
    1800:	|  |  |  |  |      jsr -228(a6)

            bltapt = zbuffer->bitplane;
    1804:	|  |  |  |  |      movea.l 88(sp),a0
    1808:	|  |  |  |  |      move.l 20(a0),d0
    180c:	|  |  |  |  |      move.l d0,68(sp)
            if( xdiffrest) {
    1810:	|  |  |  |  |      tst.w 20(sp)
    1814:	|  |  |  |  |  /-- beq.s 181a <CstDrawZBuffer+0x332>
              bytewidth += 2;            
    1816:	|  |  |  |  |  |   addq.w #2,64(sp)
            } 

            custom->bltalwm = 0xffff << xdiffrest;
    181a:	|  |  |  |  |  \-> moveq #0,d0
    181c:	|  |  |  |  |      move.w 20(sp),d0
    1820:	|  |  |  |  |      moveq #0,d1
    1822:	|  |  |  |  |      not.w d1
    1824:	|  |  |  |  |      lsl.l d0,d1
    1826:	|  |  |  |  |      move.l d1,d0
    1828:	|  |  |  |  |      movea.l 56(sp),a0
    182c:	|  |  |  |  |      move.w d0,70(a0)
            custom->bltcon0 = xdiffrest * 4096 + 0xd0c;              
    1830:	|  |  |  |  |      move.w 20(sp),d0
    1834:	|  |  |  |  |      moveq #12,d1
    1836:	|  |  |  |  |      lsl.w d1,d0
    1838:	|  |  |  |  |      addi.w #3340,d0
    183c:	|  |  |  |  |      movea.l 56(sp),a0
    1840:	|  |  |  |  |      move.w d0,64(a0)
            custom->bltbpt = returnvalue + bytewidth;
    1844:	|  |  |  |  |      moveq #0,d0
    1846:	|  |  |  |  |      move.w 64(sp),d0
    184a:	|  |  |  |  |      add.l 40(sp),d0
    184e:	|  |  |  |  |      movea.l 56(sp),a0
    1852:	|  |  |  |  |      move.l d0,76(a0)
            custom->bltdpt = returnvalue + bytewidth;
    1856:	|  |  |  |  |      moveq #0,d0
    1858:	|  |  |  |  |      move.w 64(sp),d0
    185c:	|  |  |  |  |      add.l 40(sp),d0
    1860:	|  |  |  |  |      movea.l 56(sp),a0
    1864:	|  |  |  |  |      move.l d0,84(a0)
            custom->bltafwm = 0xffff;
    1868:	|  |  |  |  |      movea.l 56(sp),a0
    186c:	|  |  |  |  |      move.w #-1,68(a0)
            custom->bltbmod = sprite->width/8 - bytewidth;
    1872:	|  |  |  |  |      movea.l 84(sp),a0
    1876:	|  |  |  |  |      move.l (a0),d0
    1878:	|  |  |  |  |  /-- bpl.s 187c <CstDrawZBuffer+0x394>
    187a:	|  |  |  |  |  |   addq.l #7,d0
    187c:	|  |  |  |  |  \-> asr.l #3,d0
    187e:	|  |  |  |  |      move.l d0,d0
    1880:	|  |  |  |  |      sub.w 64(sp),d0
    1884:	|  |  |  |  |      movea.l 56(sp),a0
    1888:	|  |  |  |  |      move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    188c:	|  |  |  |  |      movea.l 88(sp),a0
    1890:	|  |  |  |  |      move.l (a0),d0
    1892:	|  |  |  |  |  /-- bpl.s 1896 <CstDrawZBuffer+0x3ae>
    1894:	|  |  |  |  |  |   addq.l #7,d0
    1896:	|  |  |  |  |  \-> asr.l #3,d0
    1898:	|  |  |  |  |      move.l d0,d0
    189a:	|  |  |  |  |      sub.w 64(sp),d0
    189e:	|  |  |  |  |      movea.l 56(sp),a0
    18a2:	|  |  |  |  |      move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                      
    18a6:	|  |  |  |  |      movea.l 84(sp),a0
    18aa:	|  |  |  |  |      move.l (a0),d0
    18ac:	|  |  |  |  |  /-- bpl.s 18b0 <CstDrawZBuffer+0x3c8>
    18ae:	|  |  |  |  |  |   addq.l #7,d0
    18b0:	|  |  |  |  |  \-> asr.l #3,d0
    18b2:	|  |  |  |  |      move.l d0,d0
    18b4:	|  |  |  |  |      sub.w 64(sp),d0
    18b8:	|  |  |  |  |      movea.l 56(sp),a0
    18bc:	|  |  |  |  |      move.w d0,102(a0)
    18c0:	|  |  |  +--|----- bra.w 1a2c <CstDrawZBuffer+0x544>
        {
          //Get Distance R
          /*sprite  ------------RRRRRRRRx1++++++++++?????????------------*/    
          //zbuffer ------------x1+++++++++++++++++++x2-----------------*/                    
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    18c4:	|  |  |  |  \----> move.w 38(sp),d0
    18c8:	|  |  |  |         sub.w 30(sp),d0
    18cc:	|  |  |  |         move.w d0,22(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    18d0:	|  |  |  |         move.w 22(sp),d0
    18d4:	|  |  |  |         lsr.w #4,d0
    18d6:	|  |  |  |         add.w d0,d0
    18d8:	|  |  |  |         move.w d0,66(sp)
          xdiffrest = xdiff - xdiffbyte * 8;
    18dc:	|  |  |  |         move.w 66(sp),d0
    18e0:	|  |  |  |         lsl.w #3,d0
    18e2:	|  |  |  |         move.w 22(sp),d1
    18e6:	|  |  |  |         sub.w d0,d1
    18e8:	|  |  |  |         move.w d1,20(sp)
          bytewidth, width, rest;


          if( zbufferx2oncanvas > spritex2oncanvas)    
    18ec:	|  |  |  |         move.w 36(sp),d0
    18f0:	|  |  |  |         cmp.w 28(sp),d0
    18f4:	|  |  |  +-------- bcc.w 1a2c <CstDrawZBuffer+0x544>
                            //Data        KKKKKKKKKKKKKKKKCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
                            //BltBpt      +---------------------------------------------------------------
                            //BlBmod      NNNNNNNNNNNNNNNN------------------------------------------------
                            //ShiftB      ----------------------------------------------------------------
         
            width = spritex2oncanvas - spritex1oncanvas; 
    18f8:	|  |  |  |         move.w 36(sp),d1
    18fc:	|  |  |  |         sub.w 38(sp),d1
    1900:	|  |  |  |         move.w d1,18(sp)
            bytewidth = (width/16)*2;
    1904:	|  |  |  |         move.w 18(sp),d0
    1908:	|  |  |  |         lsr.w #4,d0
    190a:	|  |  |  |         add.w d0,d0
    190c:	|  |  |  |         move.w d0,64(sp)

            WaitBlit();
    1910:	|  |  |  |         move.l 1a7b0 <GfxBase>,d0
    1916:	|  |  |  |         movea.l d0,a6
    1918:	|  |  |  |         jsr -228(a6)

            bltapt = zbuffer->bitplane + xdiffbyte;
    191c:	|  |  |  |         movea.l 88(sp),a0
    1920:	|  |  |  |         move.l 20(a0),d1
    1924:	|  |  |  |         moveq #0,d0
    1926:	|  |  |  |         move.w 66(sp),d0
    192a:	|  |  |  |         add.l d1,d0
    192c:	|  |  |  |         move.l d0,68(sp)
            if( xdiffrest) {
    1930:	|  |  |  |         tst.w 20(sp)
    1934:	|  |  |  |  /----- beq.s 19a8 <CstDrawZBuffer+0x4c0>
              bytewidth += 2;
    1936:	|  |  |  |  |      addq.w #2,64(sp)
              bltapt += -2;
    193a:	|  |  |  |  |      subq.l #2,68(sp)
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0xd0c;
    193e:	|  |  |  |  |      moveq #0,d0
    1940:	|  |  |  |  |      move.w 20(sp),d0
    1944:	|  |  |  |  |      moveq #16,d1
    1946:	|  |  |  |  |      sub.l d0,d1
    1948:	|  |  |  |  |      move.l d1,d0
    194a:	|  |  |  |  |      moveq #12,d1
    194c:	|  |  |  |  |      lsl.w d1,d0
    194e:	|  |  |  |  |      addi.w #3340,d0
    1952:	|  |  |  |  |      movea.l 56(sp),a0
    1956:	|  |  |  |  |      move.w d0,64(a0)
              custom->bltafwm = 0xffff >> (16 - xdiffrest);
    195a:	|  |  |  |  |      moveq #0,d0
    195c:	|  |  |  |  |      move.w 20(sp),d0
    1960:	|  |  |  |  |      moveq #16,d1
    1962:	|  |  |  |  |      sub.l d0,d1
    1964:	|  |  |  |  |      moveq #0,d0
    1966:	|  |  |  |  |      not.w d0
    1968:	|  |  |  |  |      asr.l d1,d0
    196a:	|  |  |  |  |      move.l d0,d0
    196c:	|  |  |  |  |      movea.l 56(sp),a0
    1970:	|  |  |  |  |      move.w d0,68(a0)
              custom->bltalwm = 0xffff << xdiffrest;
    1974:	|  |  |  |  |      moveq #0,d0
    1976:	|  |  |  |  |      move.w 20(sp),d0
    197a:	|  |  |  |  |      moveq #0,d1
    197c:	|  |  |  |  |      not.w d1
    197e:	|  |  |  |  |      lsl.l d0,d1
    1980:	|  |  |  |  |      move.l d1,d0
    1982:	|  |  |  |  |      movea.l 56(sp),a0
    1986:	|  |  |  |  |      move.w d0,70(a0)
              custom->bltbpt = returnvalue - 2;
    198a:	|  |  |  |  |      move.l 40(sp),d0
    198e:	|  |  |  |  |      subq.l #2,d0
    1990:	|  |  |  |  |      movea.l 56(sp),a0
    1994:	|  |  |  |  |      move.l d0,76(a0)
              custom->bltdpt = returnvalue - 2;
    1998:	|  |  |  |  |      move.l 40(sp),d0
    199c:	|  |  |  |  |      subq.l #2,d0
    199e:	|  |  |  |  |      movea.l 56(sp),a0
    19a2:	|  |  |  |  |      move.l d0,84(a0)
    19a6:	|  |  |  |  |  /-- bra.s 19de <CstDrawZBuffer+0x4f6>
            } else {
              bytewidth += 2;
    19a8:	|  |  |  |  \--|-> addq.w #2,64(sp)
              custom->bltcon0 = 0xd0c;
    19ac:	|  |  |  |     |   movea.l 56(sp),a0
    19b0:	|  |  |  |     |   move.w #3340,64(a0)
              custom->bltafwm = 0xffff;
    19b6:	|  |  |  |     |   movea.l 56(sp),a0
    19ba:	|  |  |  |     |   move.w #-1,68(a0)
              custom->bltalwm = 0xffff;
    19c0:	|  |  |  |     |   movea.l 56(sp),a0
    19c4:	|  |  |  |     |   move.w #-1,70(a0)
              custom->bltbpt = returnvalue;
    19ca:	|  |  |  |     |   movea.l 56(sp),a0
    19ce:	|  |  |  |     |   move.l 40(sp),76(a0)
              custom->bltdpt = returnvalue;
    19d4:	|  |  |  |     |   movea.l 56(sp),a0
    19d8:	|  |  |  |     |   move.l 40(sp),84(a0)
            }

            custom->bltbmod = sprite->width/8 - bytewidth;
    19de:	|  |  |  |     \-> movea.l 84(sp),a0
    19e2:	|  |  |  |         move.l (a0),d0
    19e4:	|  |  |  |     /-- bpl.s 19e8 <CstDrawZBuffer+0x500>
    19e6:	|  |  |  |     |   addq.l #7,d0
    19e8:	|  |  |  |     \-> asr.l #3,d0
    19ea:	|  |  |  |         move.l d0,d0
    19ec:	|  |  |  |         sub.w 64(sp),d0
    19f0:	|  |  |  |         movea.l 56(sp),a0
    19f4:	|  |  |  |         move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    19f8:	|  |  |  |         movea.l 88(sp),a0
    19fc:	|  |  |  |         move.l (a0),d0
    19fe:	|  |  |  |     /-- bpl.s 1a02 <CstDrawZBuffer+0x51a>
    1a00:	|  |  |  |     |   addq.l #7,d0
    1a02:	|  |  |  |     \-> asr.l #3,d0
    1a04:	|  |  |  |         move.l d0,d0
    1a06:	|  |  |  |         sub.w 64(sp),d0
    1a0a:	|  |  |  |         movea.l 56(sp),a0
    1a0e:	|  |  |  |         move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                      
    1a12:	|  |  |  |         movea.l 84(sp),a0
    1a16:	|  |  |  |         move.l (a0),d0
    1a18:	|  |  |  |     /-- bpl.s 1a1c <CstDrawZBuffer+0x534>
    1a1a:	|  |  |  |     |   addq.l #7,d0
    1a1c:	|  |  |  |     \-> asr.l #3,d0
    1a1e:	|  |  |  |         move.l d0,d0
    1a20:	|  |  |  |         sub.w 64(sp),d0
    1a24:	|  |  |  |         movea.l 56(sp),a0
    1a28:	|  |  |  |         move.w d0,102(a0)
          }                    
        }  
        if(zbufferfromtop)
    1a2c:	|  |  |  \-------> tst.w 72(sp)
    1a30:	|  |  |  /-------- beq.w 1ab8 <CstDrawZBuffer+0x5d0>
          {
            //Get Distance R
            //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
            /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1a34:	|  |  |  |         move.w 34(sp),d0
    1a38:	|  |  |  |         sub.w 26(sp),d0
    1a3c:	|  |  |  |         move.w d0,14(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1a40:	|  |  |  |         move.w 32(sp),d1
    1a44:	|  |  |  |         cmp.w 24(sp),d1
    1a48:	|  |  |  |  /----- bcc.s 1a58 <CstDrawZBuffer+0x570>
              height = sprite->height;
    1a4a:	|  |  |  |  |      movea.l 84(sp),a0
    1a4e:	|  |  |  |  |      move.l 4(a0),d0
    1a52:	|  |  |  |  |      move.w d0,62(sp)
    1a56:	|  |  |  |  |  /-- bra.s 1a64 <CstDrawZBuffer+0x57c>
            else
              height = zbuffery2oncanvas - spritey1oncanvas;
    1a58:	|  |  |  |  \--|-> move.w 24(sp),d0
    1a5c:	|  |  |  |     |   sub.w 34(sp),d0
    1a60:	|  |  |  |     |   move.w d0,62(sp)

            WaitBlit();
    1a64:	|  |  |  |     \-> move.l 1a7b0 <GfxBase>,d0
    1a6a:	|  |  |  |         movea.l d0,a6
    1a6c:	|  |  |  |         jsr -228(a6)

            custom->bltapt = bltapt + ydiff*zbuffer->width/8;            
    1a70:	|  |  |  |         moveq #0,d0
    1a72:	|  |  |  |         move.w 14(sp),d0
    1a76:	|  |  |  |         movea.l 88(sp),a0
    1a7a:	|  |  |  |         move.l (a0),d1
    1a7c:	|  |  |  |         move.l d1,-(sp)
    1a7e:	|  |  |  |         move.l d0,-(sp)
    1a80:	|  |  |  |         jsr 179f4 <__mulsi3>
    1a86:	|  |  |  |         addq.l #8,sp
    1a88:	|  |  |  |         tst.l d0
    1a8a:	|  |  |  |     /-- bge.s 1a8e <CstDrawZBuffer+0x5a6>
    1a8c:	|  |  |  |     |   addq.l #7,d0
    1a8e:	|  |  |  |     \-> asr.l #3,d0
    1a90:	|  |  |  |         add.l 68(sp),d0
    1a94:	|  |  |  |         movea.l 56(sp),a0
    1a98:	|  |  |  |         move.l d0,80(a0)
            custom->bltsize = height*64+bytewidth/2;
    1a9c:	|  |  |  |         move.w 62(sp),d0
    1aa0:	|  |  |  |         move.w d0,d1
    1aa2:	|  |  |  |         lsl.w #6,d1
    1aa4:	|  |  |  |         move.w 64(sp),d0
    1aa8:	|  |  |  |         lsr.w #1,d0
    1aaa:	|  |  |  |         add.w d1,d0
    1aac:	|  |  |  |         movea.l 56(sp),a0
    1ab0:	|  |  |  |         move.w d0,88(a0)
    1ab4:	|  |  +--|-------- bra.w 1b6c <CstDrawZBuffer+0x684>
          //Zbufferfrombottom
          {
           //Get Distance R
            //sprite ------------x1+++++++++++++++++++x2-----------------*/
            /*zbuffer------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = zbuffery1oncanvas - spritey1oncanvas; 
    1ab8:	|  |  |  \-------> move.w 26(sp),d1
    1abc:	|  |  |            sub.w 34(sp),d1
    1ac0:	|  |  |            move.w d1,16(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1ac4:	|  |  |            move.w 32(sp),d0
    1ac8:	|  |  |            cmp.w 24(sp),d0
    1acc:	|  |  |     /----- bcc.s 1adc <CstDrawZBuffer+0x5f4>
              height = spritey2oncanvas - zbuffery1oncanvas; 
    1ace:	|  |  |     |      move.w 32(sp),d1
    1ad2:	|  |  |     |      sub.w 26(sp),d1
    1ad6:	|  |  |     |      move.w d1,60(sp)
    1ada:	|  |  |     |  /-- bra.s 1ae8 <CstDrawZBuffer+0x600>
            else
              height = zbuffer->height;
    1adc:	|  |  |     \--|-> movea.l 88(sp),a0
    1ae0:	|  |  |        |   move.l 4(a0),d0
    1ae4:	|  |  |        |   move.w d0,60(sp)

            WaitBlit();
    1ae8:	|  |  |        \-> move.l 1a7b0 <GfxBase>,d0
    1aee:	|  |  |            movea.l d0,a6
    1af0:	|  |  |            jsr -228(a6)

            custom->bltbpt = returnvalue+xdiffbyte+ydiff*sprite->width/8;            
    1af4:	|  |  |            moveq #0,d2
    1af6:	|  |  |            move.w 66(sp),d2
    1afa:	|  |  |            moveq #0,d0
    1afc:	|  |  |            move.w 16(sp),d0
    1b00:	|  |  |            movea.l 84(sp),a0
    1b04:	|  |  |            move.l (a0),d1
    1b06:	|  |  |            move.l d1,-(sp)
    1b08:	|  |  |            move.l d0,-(sp)
    1b0a:	|  |  |            jsr 179f4 <__mulsi3>
    1b10:	|  |  |            addq.l #8,sp
    1b12:	|  |  |            tst.l d0
    1b14:	|  |  |        /-- bge.s 1b18 <CstDrawZBuffer+0x630>
    1b16:	|  |  |        |   addq.l #7,d0
    1b18:	|  |  |        \-> asr.l #3,d0
    1b1a:	|  |  |            add.l d2,d0
    1b1c:	|  |  |            add.l 40(sp),d0
    1b20:	|  |  |            movea.l 56(sp),a0
    1b24:	|  |  |            move.l d0,76(a0)
            custom->bltdpt = returnvalue+xdiffbyte+ydiff*sprite->width;          
    1b28:	|  |  |            moveq #0,d2
    1b2a:	|  |  |            move.w 66(sp),d2
    1b2e:	|  |  |            moveq #0,d0
    1b30:	|  |  |            move.w 16(sp),d0
    1b34:	|  |  |            movea.l 84(sp),a0
    1b38:	|  |  |            move.l (a0),d1
    1b3a:	|  |  |            move.l d1,-(sp)
    1b3c:	|  |  |            move.l d0,-(sp)
    1b3e:	|  |  |            jsr 179f4 <__mulsi3>
    1b44:	|  |  |            addq.l #8,sp
    1b46:	|  |  |            add.l d2,d0
    1b48:	|  |  |            add.l 40(sp),d0
    1b4c:	|  |  |            movea.l 56(sp),a0
    1b50:	|  |  |            move.l d0,84(a0)
            custom->bltsize = height*64+bytewidth/2;
    1b54:	|  |  |            move.w 60(sp),d0
    1b58:	|  |  |            move.w d0,d1
    1b5a:	|  |  |            lsl.w #6,d1
    1b5c:	|  |  |            move.w 64(sp),d0
    1b60:	|  |  |            lsr.w #1,d0
    1b62:	|  |  |            add.w d1,d0
    1b64:	|  |  |            movea.l 56(sp),a0
    1b68:	|  |  |            move.w d0,88(a0)
          }   
      }
      zbuffer = zbuffer->nextPanel;
    1b6c:	|  |  \----------> movea.l 88(sp),a0
    1b70:	|  |               move.l 24(a0),88(sp)
  while(zbuffer) 
    1b76:	|  \-------------> tst.l 88(sp)
    1b7a:	\----------------- bne.w 1660 <CstDrawZBuffer+0x178>
    }
  }

  return returnvalue;
    1b7e:	                   move.l 40(sp),d0

}
    1b82:	                   move.l (sp)+,d2
    1b84:	                   movea.l (sp)+,a6
    1b86:	                   lea 72(sp),sp
    1b8a:	                   rts

00001b8c <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b8c:	    lea -20(sp),sp
    1b90:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b92:	    move.l 1a6d8 <CstDrawBuffer>,d0
    1b98:	/-- beq.s 1bb2 <CstFreeBuffer+0x26>
    1b9a:	|   move.l 1a6d8 <CstDrawBuffer>,20(sp)
    1ba2:	|   move.l 1a7a4 <SysBase>,d0
    1ba8:	|   movea.l d0,a6
    1baa:	|   movea.l 20(sp),a1
    1bae:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1bb2:	\-> move.l 1a6d4 <CstViewBuffer>,d0
    1bb8:	/-- beq.s 1bd2 <CstFreeBuffer+0x46>
    1bba:	|   move.l 1a6d4 <CstViewBuffer>,16(sp)
    1bc2:	|   move.l 1a7a4 <SysBase>,d0
    1bc8:	|   movea.l d0,a6
    1bca:	|   movea.l 16(sp),a1
    1bce:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1bd2:	\-> move.l 1a6ce <CstCopperList>,d0
    1bd8:	/-- beq.s 1bf2 <CstFreeBuffer+0x66>
    1bda:	|   move.l 1a6ce <CstCopperList>,12(sp)
    1be2:	|   move.l 1a7a4 <SysBase>,d0
    1be8:	|   movea.l d0,a6
    1bea:	|   movea.l 12(sp),a1
    1bee:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1bf2:	\-> move.l 1a6c6 <CstBackDrop>,d0
    1bf8:	/-- beq.s 1c12 <CstFreeBuffer+0x86>
    1bfa:	|   move.l 1a6c6 <CstBackDrop>,8(sp)
    1c02:	|   move.l 1a7a4 <SysBase>,d0
    1c08:	|   movea.l d0,a6
    1c0a:	|   movea.l 8(sp),a1
    1c0e:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1c12:	\-> move.l 1a6ca <CstBackDropBackup>,d0
    1c18:	/-- beq.s 1c32 <CstFreeBuffer+0xa6>
    1c1a:	|   move.l 1a6ca <CstBackDropBackup>,4(sp)
    1c22:	|   move.l 1a7a4 <SysBase>,d0
    1c28:	|   movea.l d0,a6
    1c2a:	|   movea.l 4(sp),a1
    1c2e:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1c32:	\-> clr.l 1a6d8 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1c38:	    clr.l 1a6d4 <CstViewBuffer>
  CstCopperList = NULL;
    1c3e:	    clr.l 1a6ce <CstCopperList>
  CstBackDrop = NULL;
    1c44:	    clr.l 1a6c6 <CstBackDrop>

}
    1c4a:	    nop
    1c4c:	    movea.l (sp)+,a6
    1c4e:	    lea 20(sp),sp
    1c52:	    rts

00001c54 <CstFreeze>:



void CstFreeze( ) {
    1c54:	       lea -36(sp),sp
    1c58:	       move.l a6,-(sp)
    1c5a:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1c5c:	       pea 17c7a <PutChar+0x170>
    1c62:	       jsr 17036 <KPrintF>
    1c68:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1c6a:	       move.l 1a6f8 <winWidth>,d0
    1c70:	       lsr.l #3,d0
    1c72:	       move.l d0,d1
    1c74:	       move.l 1a6fc <winHeight>,d0
    1c7a:	       move.l d0,d0
    1c7c:	       muls.w d0,d1
    1c7e:	       move.w d1,d0
    1c80:	       add.w d0,d0
    1c82:	       add.w d0,d0
    1c84:	       move.w d0,d2
    1c86:	       add.w d1,d2
    1c88:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c8c:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c94:	       moveq #0,d0
    1c96:	       move.w 26(sp),d0
    1c9a:	       move.l d0,18(sp)
    1c9e:	       clr.l 14(sp)
    1ca2:	       move.l 1a7a4 <SysBase>,d0
    1ca8:	       movea.l d0,a6
    1caa:	       move.l 18(sp),d0
    1cae:	       move.l 14(sp),d1
    1cb2:	       jsr -684(a6)
    1cb6:	       move.l d0,10(sp)
    1cba:	       move.l 10(sp),d0
    1cbe:	       move.l d0,1a6ca <CstBackDropBackup>
  if( !CstBackDropBackup)
    1cc4:	       move.l 1a6ca <CstBackDropBackup>,d0
    1cca:	   /-- bne.s 1cda <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1ccc:	   |   pea 17ca1 <PutChar+0x197>
    1cd2:	   |   jsr 17036 <KPrintF>
    1cd8:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1cda:	   \-> move.l 1a6fc <winHeight>,d0
    1ce0:	       move.l d0,d0
    1ce2:	       movea.w d0,a1
    1ce4:	       move.l 1a6f8 <winWidth>,d0
    1cea:	       move.l d0,d0
    1cec:	       movea.w d0,a0
    1cee:	       move.l 1a6ca <CstBackDropBackup>,d0
    1cf4:	       clr.l -(sp)
    1cf6:	       pea 5 <_start+0x5>
    1cfa:	       move.l a1,-(sp)
    1cfc:	       move.l a0,-(sp)
    1cfe:	       pea 17cd9 <PutChar+0x1cf>
    1d04:	       move.l d0,-(sp)
    1d06:	       jsr 1711e <debug_register_bitmap>
    1d0c:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1d10:	       move.l 1a6c6 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1d18:	       move.l 1a6ca <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1d20:	       clr.l 32(sp)
    1d24:	   /-- bra.s 1d4a <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1d26:	/--|-> move.l 40(sp),d1
    1d2a:	|  |   move.l d1,d0
    1d2c:	|  |   addq.l #4,d0
    1d2e:	|  |   move.l d0,40(sp)
    1d32:	|  |   move.l 36(sp),d0
    1d36:	|  |   move.l d0,d2
    1d38:	|  |   addq.l #4,d2
    1d3a:	|  |   move.l d2,36(sp)
    1d3e:	|  |   movea.l d1,a0
    1d40:	|  |   move.l (a0),d1
    1d42:	|  |   movea.l d0,a0
    1d44:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d46:	|  |   addq.l #1,32(sp)
    1d4a:	|  \-> move.w 26(sp),d0
    1d4e:	|      lsr.w #2,d0
    1d50:	|      move.w d0,d0
    1d52:	|      andi.l #65535,d0
    1d58:	|      cmp.l 32(sp),d0
    1d5c:	\----- bgt.s 1d26 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1d5e:	       move.l 1a6d4 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1d66:	       move.l 1a6c6 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1d6e:	       clr.l 28(sp)
    1d72:	   /-- bra.s 1d98 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1d74:	/--|-> move.l 40(sp),d1
    1d78:	|  |   move.l d1,d0
    1d7a:	|  |   addq.l #4,d0
    1d7c:	|  |   move.l d0,40(sp)
    1d80:	|  |   move.l 36(sp),d0
    1d84:	|  |   move.l d0,d2
    1d86:	|  |   addq.l #4,d2
    1d88:	|  |   move.l d2,36(sp)
    1d8c:	|  |   movea.l d1,a0
    1d8e:	|  |   move.l (a0),d1
    1d90:	|  |   movea.l d0,a0
    1d92:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d94:	|  |   addq.l #1,28(sp)
    1d98:	|  \-> move.w 26(sp),d0
    1d9c:	|      lsr.w #2,d0
    1d9e:	|      move.w d0,d0
    1da0:	|      andi.l #65535,d0
    1da6:	|      cmp.l 28(sp),d0
    1daa:	\----- bgt.s 1d74 <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1dac:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1db4:	       move.l 1a6f8 <winWidth>,d0
    1dba:	       lsr.l #4,d0
    1dbc:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1dc2:	       move.l a0,d1
    1dc4:	       addq.l #2,d1
    1dc6:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1dcc:	       move.l d0,d0
    1dce:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1dd0:	       move.l 1a6fc <winHeight>,d0
    1dd6:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1ddc:	       move.l a0,d1
    1dde:	       addq.l #2,d1
    1de0:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1de6:	       move.l d0,d0
    1de8:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1dea:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1df0:	       move.l a0,d0
    1df2:	       addq.l #2,d0
    1df4:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1dfa:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1dfc:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1e02:	       move.l a0,d0
    1e04:	       addq.l #2,d0
    1e06:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1e0c:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1e0e:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1e14:	       move.l a0,d0
    1e16:	       addq.l #2,d0
    1e18:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1e1e:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1e20:	       pea 17ce8 <PutChar+0x1de>
    1e26:	       jsr 17036 <KPrintF>
    1e2c:	       addq.l #4,sp

}  
    1e2e:	       nop
    1e30:	       move.l (sp)+,d2
    1e32:	       movea.l (sp)+,a6
    1e34:	       lea 36(sp),sp
    1e38:	       rts

00001e3a <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1e3a:	             lea -144(sp),sp
    1e3e:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1e42:	             pea 17cfc <PutChar+0x1f2>
    1e48:	             jsr 17036 <KPrintF>
    1e4e:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1e50:	             move.l 164(sp),-(sp)
    1e54:	             jsr 6bc <get2bytes>
    1e5a:	             addq.l #4,sp
    1e5c:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1e60:	             move.l 164(sp),-(sp)
    1e64:	             jsr 6bc <get2bytes>
    1e6a:	             addq.l #4,sp
    1e6c:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1e70:	             move.w 134(sp),d0
    1e74:	             lsr.w #3,d0
    1e76:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1e7a:	             move.w 130(sp),d0
    1e7e:	             lsr.w #1,d0
    1e80:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1e84:	             move.l 1a6f8 <winWidth>,d0
    1e8a:	             lsr.l #3,d0
    1e8c:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1e90:	             move.w 130(sp),d0
    1e94:	             muls.w 132(sp),d0
    1e98:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1e9c:	             move.w 124(sp),d1
    1ea0:	             move.w d1,d0
    1ea2:	             add.w d0,d0
    1ea4:	             add.w d0,d0
    1ea6:	             move.w d0,d2
    1ea8:	             add.w d1,d2
    1eaa:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1eae:	             move.w 1a6c0 <CstPaletteLoaded>,d0
    1eb4:	/----------- bne.w 1f4e <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1eb8:	|            move.w #384,120(sp)

    if(CstPalette) {
    1ebe:	|            move.l 1a6f0 <CstPalette>,d0
    1ec4:	|        /-- beq.s 1ede <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1ec6:	|        |   move.l 1a6f0 <CstPalette>,116(sp)
    1ece:	|        |   move.l 1a7a4 <SysBase>,d0
    1ed4:	|        |   movea.l d0,a6
    1ed6:	|        |   movea.l 116(sp),a1
    1eda:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1ede:	|        \-> moveq #64,d0
    1ee0:	|            move.l d0,112(sp)
    1ee4:	|            clr.l 108(sp)
    1ee8:	|            move.l 1a7a4 <SysBase>,d0
    1eee:	|            movea.l d0,a6
    1ef0:	|            move.l 112(sp),d0
    1ef4:	|            move.l 108(sp),d1
    1ef8:	|            jsr -684(a6)
    1efc:	|            move.l d0,104(sp)
    1f00:	|            move.l 104(sp),d0
    1f04:	|            move.l d0,1a6f0 <CstPalette>
    CstPaletteLoaded = 1;
    1f0a:	|            move.w #1,1a6c0 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1f12:	|            move.l 1a6f0 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f1a:	|            clr.l 152(sp)
    1f1e:	|        /-- bra.s 1f44 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1f20:	|     /--|-> move.l 164(sp),-(sp)
    1f24:	|     |  |   jsr 6bc <get2bytes>
    1f2a:	|     |  |   addq.l #4,sp
    1f2c:	|     |  |   move.l d0,d1
    1f2e:	|     |  |   move.l 156(sp),d0
    1f32:	|     |  |   move.l d0,d2
    1f34:	|     |  |   addq.l #2,d2
    1f36:	|     |  |   move.l d2,156(sp)
    1f3a:	|     |  |   move.l d1,d1
    1f3c:	|     |  |   movea.l d0,a0
    1f3e:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f40:	|     |  |   addq.l #1,152(sp)
    1f44:	|     |  \-> moveq #31,d0
    1f46:	|     |      cmp.l 152(sp),d0
    1f4a:	|     \----- bge.s 1f20 <CstLoadBackdrop+0xe6>
    1f4c:	|  /-------- bra.s 1f6c <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f4e:	\--|-------> clr.l 148(sp)
    1f52:	   |     /-- bra.s 1f64 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1f54:	   |  /--|-> move.l 164(sp),-(sp)
    1f58:	   |  |  |   jsr 6bc <get2bytes>
    1f5e:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1f60:	   |  |  |   addq.l #1,148(sp)
    1f64:	   |  |  \-> moveq #31,d2
    1f66:	   |  |      cmp.l 148(sp),d2
    1f6a:	   |  \----- bge.s 1f54 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1f6c:	   \-------> moveq #0,d0
    1f6e:	             move.w 122(sp),d0
    1f72:	             move.l d0,100(sp)
    1f76:	             moveq #2,d0
    1f78:	             move.l d0,96(sp)
    1f7c:	             move.l 1a7a4 <SysBase>,d0
    1f82:	             movea.l d0,a6
    1f84:	             move.l 100(sp),d0
    1f88:	             move.l 96(sp),d1
    1f8c:	             jsr -684(a6)
    1f90:	             move.l d0,92(sp)
    1f94:	             move.l 92(sp),d0
    1f98:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1f9c:	         /-- bne.s 1fac <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1f9e:	         |   pea 17d2b <PutChar+0x221>
    1fa4:	         |   jsr 17036 <KPrintF>
    1faa:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1fac:	         \-> moveq #0,d0
    1fae:	             move.w 124(sp),d0
    1fb2:	             move.l d0,84(sp)
    1fb6:	             moveq #2,d2
    1fb8:	             move.l d2,80(sp)
    1fbc:	             move.l 1a7a4 <SysBase>,d0
    1fc2:	             movea.l d0,a6
    1fc4:	             move.l 84(sp),d0
    1fc8:	             move.l 80(sp),d1
    1fcc:	             jsr -684(a6)
    1fd0:	             move.l d0,76(sp)
    1fd4:	             move.l 76(sp),d0
    1fd8:	             move.l d0,72(sp)
  if( !tmpmask)
    1fdc:	         /-- bne.s 1fec <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1fde:	         |   pea 17d61 <PutChar+0x257>
    1fe4:	         |   jsr 17036 <KPrintF>
    1fea:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1fec:	         \-> move.w 132(sp),d0
    1ff0:	             movea.w d0,a1
    1ff2:	             move.w 134(sp),d0
    1ff6:	             movea.w d0,a0
    1ff8:	             clr.l -(sp)
    1ffa:	             pea 5 <_start+0x5>
    1ffe:	             move.l a1,-(sp)
    2000:	             move.l a0,-(sp)
    2002:	             pea 17d95 <PutChar+0x28b>
    2008:	             move.l 108(sp),-(sp)
    200c:	             jsr 1711e <debug_register_bitmap>
    2012:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    2016:	             move.w 132(sp),d0
    201a:	             movea.w d0,a1
    201c:	             move.w 134(sp),d0
    2020:	             movea.w d0,a0
    2022:	             clr.l -(sp)
    2024:	             pea 1 <_start+0x1>
    2028:	             move.l a1,-(sp)
    202a:	             move.l a0,-(sp)
    202c:	             pea 17da3 <PutChar+0x299>
    2032:	             move.l 108(sp),-(sp)
    2036:	             jsr 1711e <debug_register_bitmap>
    203c:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    2040:	             move.l 164(sp),68(sp)
    2046:	             move.l 88(sp),64(sp)
    204c:	             moveq #2,d0
    204e:	             move.l d0,60(sp)
    2052:	             move.w 122(sp),d0
    2056:	             lsr.w #1,d0
    2058:	             move.w d0,d0
    205a:	             andi.l #65535,d0
    2060:	             move.l d0,56(sp)
    2064:	             move.l 1a7ac <DOSBase>,d0
    206a:	             movea.l d0,a6
    206c:	             move.l 68(sp),d1
    2070:	             move.l 64(sp),d2
    2074:	             move.l 60(sp),d3
    2078:	             move.l 56(sp),d4
    207c:	             jsr -324(a6)
    2080:	             move.l d0,52(sp)
    2084:	             move.l 52(sp),d0
    2088:	             move.w d0,50(sp)
  if(!count) {
    208c:	         /-- bne.s 20a0 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    208e:	         |   pea 17daf <PutChar+0x2a5>
    2094:	         |   jsr 17036 <KPrintF>
    209a:	         |   addq.l #4,sp
    return;
    209c:	   /-----|-- bra.w 22ec <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    20a0:	   |     \-> move.l 164(sp),46(sp)
    20a6:	   |         move.l 72(sp),42(sp)
    20ac:	   |         moveq #2,d2
    20ae:	   |         move.l d2,38(sp)
    20b2:	   |         move.w 124(sp),d0
    20b6:	   |         lsr.w #1,d0
    20b8:	   |         move.w d0,d0
    20ba:	   |         andi.l #65535,d0
    20c0:	   |         move.l d0,34(sp)
    20c4:	   |         move.l 1a7ac <DOSBase>,d0
    20ca:	   |         movea.l d0,a6
    20cc:	   |         move.l 46(sp),d1
    20d0:	   |         move.l 42(sp),d2
    20d4:	   |         move.l 38(sp),d3
    20d8:	   |         move.l 34(sp),d4
    20dc:	   |         jsr -324(a6)
    20e0:	   |         move.l d0,30(sp)
    20e4:	   |         move.l 30(sp),d0
    20e8:	   |         move.w d0,50(sp)
   

  if(!count) {
    20ec:	   |     /-- bne.s 2100 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    20ee:	   |     |   pea 17daf <PutChar+0x2a5>
    20f4:	   |     |   jsr 17036 <KPrintF>
    20fa:	   |     |   addq.l #4,sp
    return;
    20fc:	   +-----|-- bra.w 22ec <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2100:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2108:	   |         move.l 1a6c6 <CstBackDrop>,d0
    210e:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    2112:	   |         move.l 172(sp),d0
    2116:	   |         move.w d0,d1
    2118:	   |         muls.w 126(sp),d1
    211c:	   |         move.l 168(sp),d0
    2120:	   |     /-- bpl.s 2124 <CstLoadBackdrop+0x2ea>
    2122:	   |     |   addq.l #7,d0
    2124:	   |     \-> asr.l #3,d0
    2126:	   |         move.l d0,d0
    2128:	   |         movea.w d1,a0
    212a:	   |         adda.w d0,a0
    212c:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    2130:	   |         moveq #0,d0
    2132:	   |         move.w 24(sp),d0
    2136:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    213a:	   |         pea 17dca <PutChar+0x2c0>
    2140:	   |         jsr 17036 <KPrintF>
    2146:	   |         addq.l #4,sp


  WaitBlit();
    2148:	   |         move.l 1a7b0 <GfxBase>,d0
    214e:	   |         movea.l d0,a6
    2150:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2154:	   |         movea.l 26(sp),a0
    2158:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    215e:	   |         movea.l 26(sp),a0
    2162:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2168:	   |         movea.l 26(sp),a0
    216c:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2172:	   |         movea.l 26(sp),a0
    2176:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    217c:	   |         move.w 126(sp),d0
    2180:	   |         sub.w 130(sp),d0
    2184:	   |         movea.l 26(sp),a0
    2188:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    218c:	   |         move.w 126(sp),d0
    2190:	   |         sub.w 130(sp),d0
    2194:	   |         movea.l 26(sp),a0
    2198:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    219c:	   |         movea.l 26(sp),a0
    21a0:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    21a6:	   |         movea.l 26(sp),a0
    21aa:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    21b0:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    21b6:	   |         clr.l 136(sp)
    21ba:	   |     /-- bra.s 221c <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    21bc:	   |  /--|-> movea.l 26(sp),a0
    21c0:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    21c6:	   |  |  |   move.l 140(sp),d0
    21ca:	   |  |  |   movea.l 26(sp),a0
    21ce:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    21d2:	   |  |  |   move.l 144(sp),d0
    21d6:	   |  |  |   movea.l 26(sp),a0
    21da:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    21de:	   |  |  |   move.l 144(sp),d0
    21e2:	   |  |  |   movea.l 26(sp),a0
    21e6:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    21ea:	   |  |  |   move.w 132(sp),d0
    21ee:	   |  |  |   lsl.w #6,d0
    21f0:	   |  |  |   add.w 128(sp),d0
    21f4:	   |  |  |   movea.l 26(sp),a0
    21f8:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    21fc:	   |  |  |   moveq #0,d0
    21fe:	   |  |  |   move.w 124(sp),d0
    2202:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    2206:	   |  |  |   move.w 1a6c4 <CstBackdropSizePlane>,d0
    220c:	   |  |  |   move.w d0,d0
    220e:	   |  |  |   andi.l #65535,d0
    2214:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2218:	   |  |  |   addq.l #1,136(sp)
    221c:	   |  |  \-> moveq #4,d0
    221e:	   |  |      cmp.l 136(sp),d0
    2222:	   |  \----- bge.s 21bc <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    2224:	   |         move.l 1a7b0 <GfxBase>,d0
    222a:	   |         movea.l d0,a6
    222c:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    2230:	   |         pea 17de9 <PutChar+0x2df>
    2236:	   |         jsr 17036 <KPrintF>
    223c:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    223e:	   |         move.l 88(sp),20(sp)
    2244:	   |         move.l 1a7a4 <SysBase>,d0
    224a:	   |         movea.l d0,a6
    224c:	   |         movea.l 20(sp),a1
    2250:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    2254:	   |         move.l 72(sp),16(sp)
    225a:	   |         move.l 1a7a4 <SysBase>,d0
    2260:	   |         movea.l d0,a6
    2262:	   |         movea.l 16(sp),a1
    2266:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    226a:	   |         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    2272:	   |         move.l 1a6f8 <winWidth>,d0
    2278:	   |         lsr.l #4,d0
    227a:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2280:	   |         move.l a0,d1
    2282:	   |         addq.l #2,d1
    2284:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    228a:	   |         move.l d0,d0
    228c:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    228e:	   |         move.l 1a6fc <winHeight>,d0
    2294:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    229a:	   |         move.l a0,d1
    229c:	   |         addq.l #2,d1
    229e:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    22a4:	   |         move.l d0,d0
    22a6:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    22a8:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    22ae:	   |         move.l a0,d0
    22b0:	   |         addq.l #2,d0
    22b2:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    22b8:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    22ba:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    22c0:	   |         move.l a0,d0
    22c2:	   |         addq.l #2,d0
    22c4:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    22ca:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    22cc:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    22d2:	   |         move.l a0,d0
    22d4:	   |         addq.l #2,d0
    22d6:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    22dc:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    22de:	   |         pea 17e09 <PutChar+0x2ff>
    22e4:	   |         jsr 17036 <KPrintF>
    22ea:	   |         addq.l #4,sp

}
    22ec:	   \-------> movem.l (sp)+,d2-d4/a6
    22f0:	             lea 144(sp),sp
    22f4:	             rts

000022f6 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    22f6:	                lea -72(sp),sp
    22fa:	                move.l a6,-(sp)
    22fc:	                move.l d2,-(sp)
    22fe:	                move.l 88(sp),d1
    2302:	                move.l 92(sp),d0
    2306:	                move.w d1,d1
    2308:	                move.w d1,10(sp)
    230c:	                move.w d0,d0
    230e:	                move.w d0,8(sp)
  UWORD *destination = 0;
    2312:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    2316:	                move.w #2,1a6d2 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    231e:	                move.l 1a6c6 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    2326:	                clr.l 56(sp)

  blitwidth = single->width/16;
    232a:	                movea.l 84(sp),a0
    232e:	                move.l (a0),d0
    2330:	                movea.l d0,a0
    2332:	                cmpa.w #0,a0
    2336:	            /-- bge.s 233c <CstPasteChar+0x46>
    2338:	            |   lea 15(a0),a0
    233c:	            \-> move.l a0,d0
    233e:	                asr.l #4,d0
    2340:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    2344:	            /-- bne.s 234c <CstPasteChar+0x56>
    2346:	            |   moveq #1,d0
    2348:	            |   move.l d0,40(sp)

  if( y < 0) {
    234c:	            \-> tst.w 8(sp)
    2350:	         /----- bge.s 2398 <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    2352:	         |      movea.w 8(sp),a1
    2356:	         |      movea.l 84(sp),a0
    235a:	         |      move.l 4(a0),d0
    235e:	         |      add.l a1,d0
    2360:	         |  /-- bpl.s 2374 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2362:	         |  |   pea 17e23 <PutChar+0x319>
    2368:	         |  |   jsr 17036 <KPrintF>
    236e:	         |  |   addq.l #4,sp
      return;
    2370:	/--------|--|-- bra.w 2a34 <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    2374:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    2378:	|        |      move.w 8(sp),d0
    237c:	|        |      ext.l d0
    237e:	|        |      neg.l d0
    2380:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    2384:	|        |      movea.l 84(sp),a0
    2388:	|        |      move.l 4(a0),d0
    238c:	|        |      movea.w 8(sp),a0
    2390:	|        |      add.l a0,d0
    2392:	|        |      move.l d0,44(sp)
    2396:	|     /--|----- bra.s 240a <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    2398:	|     |  \----> movea.w 8(sp),a1
    239c:	|     |         movea.l 84(sp),a0
    23a0:	|     |         move.l 4(a0),d0
    23a4:	|     |         move.l a1,d1
    23a6:	|     |         add.l d0,d1
    23a8:	|     |         move.l 1a6fc <winHeight>,d0
    23ae:	|     |         cmp.l d1,d0
    23b0:	|     |  /----- bge.s 23f2 <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    23b2:	|     |  |      movea.w 8(sp),a0
    23b6:	|     |  |      move.l 1a6fc <winHeight>,d0
    23bc:	|     |  |      cmp.l a0,d0
    23be:	|     |  |  /-- bge.s 23d2 <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    23c0:	|     |  |  |   pea 17e23 <PutChar+0x319>
    23c6:	|     |  |  |   jsr 17036 <KPrintF>
    23cc:	|     |  |  |   addq.l #4,sp
      return;
    23ce:	+-----|--|--|-- bra.w 2a34 <CstPasteChar+0x73e>
    }
    ystartdst = y;
    23d2:	|     |  |  \-> movea.w 8(sp),a0
    23d6:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    23da:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    23de:	|     |  |      move.l 1a6fc <winHeight>,d0
    23e4:	|     |  |      movea.w 8(sp),a0
    23e8:	|     |  |      move.l d0,d1
    23ea:	|     |  |      sub.l a0,d1
    23ec:	|     |  |      move.l d1,44(sp)
    23f0:	|     +--|----- bra.s 240a <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    23f2:	|     |  \----> movea.w 8(sp),a0
    23f6:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    23fa:	|     |         clr.l 48(sp)
    blitheight = single->height;
    23fe:	|     |         movea.l 84(sp),a0
    2402:	|     |         move.l 4(a0),d0
    2406:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    240a:	|     \-------> tst.w 10(sp)
    240e:	|        /----- bge.w 2580 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    2412:	|        |      movea.w 10(sp),a1
    2416:	|        |      movea.l 84(sp),a0
    241a:	|        |      move.l (a0),d0
    241c:	|        |      add.l a1,d0
    241e:	|        |  /-- bpl.s 2432 <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2420:	|        |  |   pea 17e23 <PutChar+0x319>
    2426:	|        |  |   jsr 17036 <KPrintF>
    242c:	|        |  |   addq.l #4,sp
      return;
    242e:	+--------|--|-- bra.w 2a34 <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    2432:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2438:	|        |      move.w 10(sp),d0
    243c:	|        |  /-- bpl.s 2442 <CstPasteChar+0x14c>
    243e:	|        |  |   addi.w #15,d0
    2442:	|        |  \-> asr.w #4,d0
    2444:	|        |      neg.w d0
    2446:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    244a:	|        |      move.w 10(sp),d0
    244e:	|        |      ext.l d0
    2450:	|        |      neg.l d0
    2452:	|        |      andi.l #-2147483633,d0
    2458:	|        |  /-- bpl.s 2462 <CstPasteChar+0x16c>
    245a:	|        |  |   subq.l #1,d0
    245c:	|        |  |   moveq #-16,d1
    245e:	|        |  |   or.l d1,d0
    2460:	|        |  |   addq.l #1,d0
    2462:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2466:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    246a:	|        |      movea.l 84(sp),a0
    246e:	|        |      move.l 24(a0),d0
    2472:	|        |      move.l d0,d1
    2474:	|        |      moveq #0,d0
    2476:	|        |      move.w 76(sp),d0
    247a:	|        |      add.l d0,d0
    247c:	|        |      move.l d1,d2
    247e:	|        |      add.l d0,d2
    2480:	|        |      movea.l 84(sp),a0
    2484:	|        |      move.l (a0),d0
    2486:	|        |      move.l 48(sp),-(sp)
    248a:	|        |      move.l d0,-(sp)
    248c:	|        |      jsr 179f4 <__mulsi3>
    2492:	|        |      addq.l #8,sp
    2494:	|        |      lsr.l #3,d0
    2496:	|        |      move.l d2,d1
    2498:	|        |      add.l d0,d1
    249a:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    249e:	|        |      move.l 1a6f8 <winWidth>,d0
    24a4:	|        |      move.l 52(sp),-(sp)
    24a8:	|        |      move.l d0,-(sp)
    24aa:	|        |      jsr 179f4 <__mulsi3>
    24b0:	|        |      addq.l #8,sp
    24b2:	|        |      lsr.l #3,d0
    24b4:	|        |      move.l 28(sp),d1
    24b8:	|        |      add.l d1,d0
    24ba:	|        |      move.l d0,d2
    24bc:	|        |      subq.l #2,d2
    24be:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    24c2:	|        |      move.l 1a6f8 <winWidth>,d0
    24c8:	|        |      move.l 52(sp),-(sp)
    24cc:	|        |      move.l d0,-(sp)
    24ce:	|        |      jsr 179f4 <__mulsi3>
    24d4:	|        |      addq.l #8,sp
    24d6:	|        |      lsr.l #3,d0
    24d8:	|        |      move.l 28(sp),d1
    24dc:	|        |      add.l d1,d0
    24de:	|        |      move.l d0,d1
    24e0:	|        |      subq.l #2,d1
    24e2:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    24e6:	|        |      moveq #0,d0
    24e8:	|        |      move.w 74(sp),d0
    24ec:	|        |      moveq #16,d1
    24ee:	|        |      sub.l d0,d1
    24f0:	|        |      move.l d1,d0
    24f2:	|        |      moveq #12,d2
    24f4:	|        |      lsl.l d2,d0
    24f6:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    24fa:	|        |      movea.l 84(sp),a0
    24fe:	|        |      move.l (a0),d0
    2500:	|        |      movea.l d0,a0
    2502:	|        |      cmpa.w #0,a0
    2506:	|        |  /-- bge.s 250c <CstPasteChar+0x216>
    2508:	|        |  |   lea 15(a0),a0
    250c:	|        |  \-> move.l a0,d0
    250e:	|        |      asr.l #4,d0
    2510:	|        |      move.l d0,d0
    2512:	|        |      add.w 76(sp),d0
    2516:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    251c:	|        |      move.l a0,d1
    251e:	|        |      addq.l #2,d1
    2520:	|        |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2526:	|        |      add.w 78(sp),d0
    252a:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    252c:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2532:	|        |      move.l a0,d0
    2534:	|        |      addq.l #2,d0
    2536:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    253c:	|        |      move.l 44(sp),d0
    2540:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2542:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2548:	|        |      move.l a0,d0
    254a:	|        |      addq.l #2,d0
    254c:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2552:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2554:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    255a:	|        |      move.l a0,d0
    255c:	|        |      addq.l #2,d0
    255e:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2564:	|        |      move.l 52(sp),d0
    2568:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    256a:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2570:	|        |      move.l a0,d0
    2572:	|        |      addq.l #2,d0
    2574:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    257a:	|        |      clr.w (a0)
    257c:	|     /--|----- bra.w 2894 <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2580:	|     |  \----> movea.w 10(sp),a1
    2584:	|     |         movea.l 84(sp),a0
    2588:	|     |         move.l (a0),d0
    258a:	|     |         move.l a1,d1
    258c:	|     |         add.l d0,d1
    258e:	|     |         move.l 1a6f8 <winWidth>,d0
    2594:	|     |         cmp.l d1,d0
    2596:	|     |  /----- bge.w 2732 <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    259a:	|     |  |      movea.w 10(sp),a1
    259e:	|     |  |      movea.l 84(sp),a0
    25a2:	|     |  |      move.l (a0),d0
    25a4:	|     |  |      move.l a1,d1
    25a6:	|     |  |      sub.l d0,d1
    25a8:	|     |  |      move.l 1a6f8 <winWidth>,d0
    25ae:	|     |  |      cmp.l d1,d0
    25b0:	|     |  |  /-- bge.s 25c4 <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    25b2:	|     |  |  |   pea 17e23 <PutChar+0x319>
    25b8:	|     |  |  |   jsr 17036 <KPrintF>
    25be:	|     |  |  |   addq.l #4,sp
      return;
    25c0:	+-----|--|--|-- bra.w 2a34 <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    25c4:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    25c8:	|     |  |      movea.w 10(sp),a1
    25cc:	|     |  |      movea.l 84(sp),a0
    25d0:	|     |  |      move.l (a0),d0
    25d2:	|     |  |      add.l a1,d0
    25d4:	|     |  |      move.l d0,d1
    25d6:	|     |  |      move.l 1a6f8 <winWidth>,d0
    25dc:	|     |  |      sub.l d0,d1
    25de:	|     |  |      move.l d1,d0
    25e0:	|     |  |      lsr.l #4,d0
    25e2:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    25e6:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    25ea:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    25f0:	|     |  |      movea.l 84(sp),a0
    25f4:	|     |  |      move.l 24(a0),d0
    25f8:	|     |  |      move.l d0,d2
    25fa:	|     |  |      movea.l 84(sp),a0
    25fe:	|     |  |      move.l (a0),d0
    2600:	|     |  |      move.l 48(sp),-(sp)
    2604:	|     |  |      move.l d0,-(sp)
    2606:	|     |  |      jsr 179f4 <__mulsi3>
    260c:	|     |  |      addq.l #8,sp
    260e:	|     |  |      lsr.l #3,d0
    2610:	|     |  |      move.l d2,d1
    2612:	|     |  |      add.l d0,d1
    2614:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2618:	|     |  |      move.l 1a6f8 <winWidth>,d0
    261e:	|     |  |      move.l 52(sp),-(sp)
    2622:	|     |  |      move.l d0,-(sp)
    2624:	|     |  |      jsr 179f4 <__mulsi3>
    262a:	|     |  |      addq.l #8,sp
    262c:	|     |  |      lsr.l #3,d0
    262e:	|     |  |      move.l 28(sp),d1
    2632:	|     |  |      add.l d0,d1
    2634:	|     |  |      move.w 10(sp),d0
    2638:	|     |  |  /-- bpl.s 263e <CstPasteChar+0x348>
    263a:	|     |  |  |   addi.w #15,d0
    263e:	|     |  |  \-> asr.w #4,d0
    2640:	|     |  |      movea.w d0,a0
    2642:	|     |  |      move.l a0,d0
    2644:	|     |  |      add.l a0,d0
    2646:	|     |  |      move.l d1,d2
    2648:	|     |  |      add.l d0,d2
    264a:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    264e:	|     |  |      move.l 1a6f8 <winWidth>,d0
    2654:	|     |  |      move.l 52(sp),-(sp)
    2658:	|     |  |      move.l d0,-(sp)
    265a:	|     |  |      jsr 179f4 <__mulsi3>
    2660:	|     |  |      addq.l #8,sp
    2662:	|     |  |      lsr.l #3,d0
    2664:	|     |  |      move.l 28(sp),d1
    2668:	|     |  |      add.l d0,d1
    266a:	|     |  |      move.w 10(sp),d0
    266e:	|     |  |  /-- bpl.s 2674 <CstPasteChar+0x37e>
    2670:	|     |  |  |   addi.w #15,d0
    2674:	|     |  |  \-> asr.w #4,d0
    2676:	|     |  |      movea.w d0,a0
    2678:	|     |  |      move.l a0,d0
    267a:	|     |  |      add.l a0,d0
    267c:	|     |  |      move.l d1,d2
    267e:	|     |  |      add.l d0,d2
    2680:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    2684:	|     |  |      movea.l 84(sp),a0
    2688:	|     |  |      move.l (a0),d0
    268a:	|     |  |      andi.l #-2147483633,d0
    2690:	|     |  |  /-- bpl.s 269a <CstPasteChar+0x3a4>
    2692:	|     |  |  |   subq.l #1,d0
    2694:	|     |  |  |   moveq #-16,d1
    2696:	|     |  |  |   or.l d1,d0
    2698:	|     |  |  |   addq.l #1,d0
    269a:	|     |  |  \-> moveq #12,d2
    269c:	|     |  |      lsl.l d2,d0
    269e:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    26a2:	|     |  |      movea.l 84(sp),a0
    26a6:	|     |  |      move.l (a0),d0
    26a8:	|     |  |      movea.l d0,a0
    26aa:	|     |  |      cmpa.w #0,a0
    26ae:	|     |  |  /-- bge.s 26b4 <CstPasteChar+0x3be>
    26b0:	|     |  |  |   lea 15(a0),a0
    26b4:	|     |  |  \-> move.l a0,d0
    26b6:	|     |  |      asr.l #4,d0
    26b8:	|     |  |      move.l d0,d0
    26ba:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    26c0:	|     |  |      move.l a0,d1
    26c2:	|     |  |      addq.l #2,d1
    26c4:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    26ca:	|     |  |      add.w 76(sp),d0
    26ce:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    26d0:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    26d6:	|     |  |      move.l a0,d0
    26d8:	|     |  |      addq.l #2,d0
    26da:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    26e0:	|     |  |      move.l 44(sp),d0
    26e4:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    26e6:	|     |  |      move.w 10(sp),d0
    26ea:	|     |  |  /-- bpl.s 26f0 <CstPasteChar+0x3fa>
    26ec:	|     |  |  |   addi.w #15,d0
    26f0:	|     |  |  \-> asr.w #4,d0
    26f2:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    26f8:	|     |  |      move.l a0,d1
    26fa:	|     |  |      addq.l #2,d1
    26fc:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2702:	|     |  |      add.w d0,d0
    2704:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2706:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    270c:	|     |  |      move.l a0,d0
    270e:	|     |  |      addq.l #2,d0
    2710:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2716:	|     |  |      move.l 52(sp),d0
    271a:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    271c:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2722:	|     |  |      move.l a0,d0
    2724:	|     |  |      addq.l #2,d0
    2726:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    272c:	|     |  |      clr.w (a0)
    272e:	|     +--|----- bra.w 2894 <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2732:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    2738:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    273c:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2740:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2744:	|     |         movea.l 84(sp),a0
    2748:	|     |         move.l 24(a0),d0
    274c:	|     |         move.l d0,d2
    274e:	|     |         movea.l 84(sp),a0
    2752:	|     |         move.l (a0),d0
    2754:	|     |         movea.l d0,a0
    2756:	|     |         cmpa.w #0,a0
    275a:	|     |     /-- bge.s 2760 <CstPasteChar+0x46a>
    275c:	|     |     |   lea 15(a0),a0
    2760:	|     |     \-> move.l a0,d0
    2762:	|     |         asr.l #4,d0
    2764:	|     |         move.l 48(sp),-(sp)
    2768:	|     |         move.l d0,-(sp)
    276a:	|     |         jsr 179f4 <__mulsi3>
    2770:	|     |         addq.l #8,sp
    2772:	|     |         add.l d0,d0
    2774:	|     |         move.l d2,d1
    2776:	|     |         add.l d0,d1
    2778:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    277c:	|     |         move.l 1a6f8 <winWidth>,d0
    2782:	|     |         move.l 52(sp),-(sp)
    2786:	|     |         move.l d0,-(sp)
    2788:	|     |         jsr 179f4 <__mulsi3>
    278e:	|     |         addq.l #8,sp
    2790:	|     |         lsr.l #3,d0
    2792:	|     |         move.l 28(sp),d1
    2796:	|     |         add.l d0,d1
    2798:	|     |         move.w 10(sp),d0
    279c:	|     |     /-- bpl.s 27a2 <CstPasteChar+0x4ac>
    279e:	|     |     |   addi.w #15,d0
    27a2:	|     |     \-> asr.w #4,d0
    27a4:	|     |         movea.w d0,a0
    27a6:	|     |         move.l a0,d0
    27a8:	|     |         add.l a0,d0
    27aa:	|     |         move.l d1,d2
    27ac:	|     |         add.l d0,d2
    27ae:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    27b2:	|     |         move.l 1a6f8 <winWidth>,d0
    27b8:	|     |         move.l 52(sp),-(sp)
    27bc:	|     |         move.l d0,-(sp)
    27be:	|     |         jsr 179f4 <__mulsi3>
    27c4:	|     |         addq.l #8,sp
    27c6:	|     |         lsr.l #3,d0
    27c8:	|     |         move.l 28(sp),d1
    27cc:	|     |         add.l d0,d1
    27ce:	|     |         move.w 10(sp),d0
    27d2:	|     |     /-- bpl.s 27d8 <CstPasteChar+0x4e2>
    27d4:	|     |     |   addi.w #15,d0
    27d8:	|     |     \-> asr.w #4,d0
    27da:	|     |         movea.w d0,a0
    27dc:	|     |         move.l a0,d0
    27de:	|     |         add.l a0,d0
    27e0:	|     |         move.l d1,d2
    27e2:	|     |         add.l d0,d2
    27e4:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    27e8:	|     |         move.w 10(sp),d0
    27ec:	|     |         andi.w #-32753,d0
    27f0:	|     |     /-- bpl.s 27fa <CstPasteChar+0x504>
    27f2:	|     |     |   subq.w #1,d0
    27f4:	|     |     |   ori.w #-16,d0
    27f8:	|     |     |   addq.w #1,d0
    27fa:	|     |     \-> ext.l d0
    27fc:	|     |         moveq #12,d1
    27fe:	|     |         lsl.l d1,d0
    2800:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2804:	|     |         movea.l 84(sp),a0
    2808:	|     |         move.l (a0),d0
    280a:	|     |         movea.l d0,a0
    280c:	|     |         cmpa.w #0,a0
    2810:	|     |     /-- bge.s 2816 <CstPasteChar+0x520>
    2812:	|     |     |   lea 15(a0),a0
    2816:	|     |     \-> move.l a0,d0
    2818:	|     |         asr.l #4,d0
    281a:	|     |         move.l d0,d0
    281c:	|     |         add.w 76(sp),d0
    2820:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2826:	|     |         move.l a0,d1
    2828:	|     |         addq.l #2,d1
    282a:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2830:	|     |         add.w 78(sp),d0
    2834:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2836:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    283c:	|     |         move.l a0,d0
    283e:	|     |         addq.l #2,d0
    2840:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2846:	|     |         move.l 44(sp),d0
    284a:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    284c:	|     |         move.w 10(sp),d0
    2850:	|     |     /-- bpl.s 2856 <CstPasteChar+0x560>
    2852:	|     |     |   addi.w #15,d0
    2856:	|     |     \-> asr.w #4,d0
    2858:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    285e:	|     |         move.l a0,d1
    2860:	|     |         addq.l #2,d1
    2862:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2868:	|     |         add.w d0,d0
    286a:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    286c:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2872:	|     |         move.l a0,d0
    2874:	|     |         addq.l #2,d0
    2876:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    287c:	|     |         move.l 52(sp),d0
    2880:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2882:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2888:	|     |         move.l a0,d0
    288a:	|     |         addq.l #2,d0
    288c:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2892:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2894:	|     \-------> moveq #0,d0
    2896:	|               move.w 74(sp),d0
    289a:	|               moveq #0,d1
    289c:	|               not.w d1
    289e:	|               asr.l d0,d1
    28a0:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    28a4:	|               moveq #0,d1
    28a6:	|               move.w 76(sp),d1
    28aa:	|               moveq #0,d0
    28ac:	|               move.w 78(sp),d0
    28b0:	|               sub.l d0,d1
    28b2:	|               move.l d1,d0
    28b4:	|               add.w d0,d0
    28b6:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    28ba:	|               move.l 1a6f8 <winWidth>,d0
    28c0:	|               lsr.l #3,d0
    28c2:	|               move.l d0,d2
    28c4:	|               move.w 76(sp),d1
    28c8:	|               sub.w 78(sp),d1
    28cc:	|               move.l 40(sp),d0
    28d0:	|               sub.w d0,d1
    28d2:	|               move.w d1,d0
    28d4:	|               add.w d1,d0
    28d6:	|               add.w d2,d0
    28d8:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    28dc:	|               move.l 1a6f8 <winWidth>,d0
    28e2:	|               lsr.l #3,d0
    28e4:	|               move.l d0,d2
    28e6:	|               move.w 76(sp),d1
    28ea:	|               sub.w 78(sp),d1
    28ee:	|               move.l 40(sp),d0
    28f2:	|               sub.w d0,d1
    28f4:	|               move.w d1,d0
    28f6:	|               add.w d1,d0
    28f8:	|               add.w d2,d0
    28fa:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    28fe:	|               move.l #14675968,16(sp)
  WaitBlit();
    2906:	|               move.l 1a7b0 <GfxBase>,d0
    290c:	|               movea.l d0,a6
    290e:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2912:	|               movea.l 16(sp),a0
    2916:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    291c:	|               movea.l 16(sp),a0
    2920:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2926:	|               move.w 24(sp),d0
    292a:	|               movea.l 16(sp),a0
    292e:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2932:	|               move.w 22(sp),d0
    2936:	|               movea.l 16(sp),a0
    293a:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    293e:	|               move.w 20(sp),d0
    2942:	|               movea.l 16(sp),a0
    2946:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    294a:	|               move.l 1a6f8 <winWidth>,d0
    2950:	|               lsr.l #3,d0
    2952:	|               move.l d0,d1
    2954:	|               move.l 1a6fc <winHeight>,d0
    295a:	|               move.l d0,d0
    295c:	|               move.w d1,d2
    295e:	|               muls.w d0,d2
    2960:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2964:	|               move.w 1a6be <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    296c:	|               move.w 38(sp),d0
    2970:	|               andi.w #1,d0
    2974:	|               move.w d0,12(sp)
  if(tmp2) {
    2978:	|        /----- beq.s 2982 <CstPasteChar+0x68c>
    minterm = 0xbfa;
    297a:	|        |      move.w #3066,36(sp)
    2980:	|        |  /-- bra.s 2988 <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    2982:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2988:	|           \-> clr.l 32(sp)
    298c:	|     /-------- bra.w 2a2a <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2990:	|  /--|-------> move.l 56(sp),d0
    2994:	|  |  |         add.w 36(sp),d0
    2998:	|  |  |         movea.l 16(sp),a0
    299c:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    29a0:	|  |  |         move.l 68(sp),d0
    29a4:	|  |  |         movea.l 16(sp),a0
    29a8:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    29ac:	|  |  |         move.l 64(sp),d0
    29b0:	|  |  |         movea.l 16(sp),a0
    29b4:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    29b8:	|  |  |         move.l 60(sp),d0
    29bc:	|  |  |         movea.l 16(sp),a0
    29c0:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    29c4:	|  |  |         move.l 44(sp),d0
    29c8:	|  |  |         lsl.w #6,d0
    29ca:	|  |  |         move.l 40(sp),d1
    29ce:	|  |  |         add.w d1,d0
    29d0:	|  |  |         sub.w 76(sp),d0
    29d4:	|  |  |         add.w 78(sp),d0
    29d8:	|  |  |         movea.l 16(sp),a0
    29dc:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    29e0:	|  |  |         moveq #0,d0
    29e2:	|  |  |         move.w 14(sp),d0
    29e6:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    29ea:	|  |  |         moveq #0,d0
    29ec:	|  |  |         move.w 14(sp),d0
    29f0:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    29f4:	|  |  |         move.w 38(sp),d0
    29f8:	|  |  |         lsr.w #1,d0
    29fa:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    29fe:	|  |  |         move.w 38(sp),d1
    2a02:	|  |  |         andi.w #1,d1
    2a06:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2a0a:	|  |  |  /----- beq.s 2a14 <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2a0c:	|  |  |  |      move.w #3066,36(sp)
    2a12:	|  |  |  |  /-- bra.s 2a1a <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2a14:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2a1a:	|  |  |     \-> move.l 1a7b0 <GfxBase>,d0
    2a20:	|  |  |         movea.l d0,a6
    2a22:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2a26:	|  |  |         addq.l #1,32(sp)
    2a2a:	|  |  \-------> moveq #4,d2
    2a2c:	|  |            cmp.l 32(sp),d2
    2a30:	|  \----------- bge.w 2990 <CstPasteChar+0x69a>
 
  }   
}
    2a34:	\-------------> move.l (sp)+,d2
    2a36:	                movea.l (sp)+,a6
    2a38:	                lea 72(sp),sp
    2a3c:	                rts

00002a3e <CstRestoreScreen>:


void CstRestoreScreen()
{
    2a3e:	                   lea -24(sp),sp
    2a42:	                   move.l a6,-(sp)
    2a44:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2a46:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2a4e:	                   move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    2a54:	/----------------- beq.w 2c5c <CstRestoreScreen+0x21e>
    2a58:	|                  move.l 1a6d8 <CstDrawBuffer>,d0
    2a5e:	+----------------- beq.w 2c5c <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2a62:	|                  move.l 1a7b0 <GfxBase>,d0
    2a68:	|                  movea.l d0,a6
    2a6a:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2a6e:	|                  movea.l 16(sp),a0
    2a72:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2a78:	|                  movea.l 16(sp),a0
    2a7c:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2a82:	|                  movea.l 16(sp),a0
    2a86:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2a8c:	|     /----------- bra.w 2c50 <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2a90:	|  /--|----------> movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2a96:	|  |  |            move.l 4(a0),d0
    2a9a:	|  |  |  /-------- beq.w 2c1e <CstRestoreScreen+0x1e0>
    2a9e:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2aa4:	|  |  |  |         movea.l 4(a0),a0
    2aa8:	|  |  |  |         move.l 16(a0),d0
    2aac:	|  |  |  |         moveq #2,d1
    2aae:	|  |  |  |         cmp.l d0,d1
    2ab0:	|  |  |  +-------- blt.w 2c1e <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2ab4:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2aba:	|  |  |  |         lsr.l #3,d0
    2abc:	|  |  |  |         move.l d0,d1
    2abe:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2ac4:	|  |  |  |         move.w 8(a0),d0
    2ac8:	|  |  |  |         add.w d0,d0
    2aca:	|  |  |  |         sub.w d0,d1
    2acc:	|  |  |  |         movea.l 16(sp),a0
    2ad0:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2ad4:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2ada:	|  |  |  |         lsr.l #3,d0
    2adc:	|  |  |  |         move.l d0,d1
    2ade:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2ae4:	|  |  |  |         move.w 8(a0),d0
    2ae8:	|  |  |  |         add.w d0,d0
    2aea:	|  |  |  |         sub.w d0,d1
    2aec:	|  |  |  |         movea.l 16(sp),a0
    2af0:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2af4:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2afa:	|  |  |  |         move.w 14(a0),d0
    2afe:	|  |  |  |         move.w d0,d0
    2b00:	|  |  |  |         andi.l #65535,d0
    2b06:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    2b0c:	|  |  |  |         move.l d1,-(sp)
    2b0e:	|  |  |  |         move.l d0,-(sp)
    2b10:	|  |  |  |         jsr 179f4 <__mulsi3>
    2b16:	|  |  |  |         addq.l #8,sp
    2b18:	|  |  |  |         move.l d0,d1
    2b1a:	|  |  |  |         lsr.l #3,d1
    2b1c:	|  |  |  |         move.l 1a6c6 <CstBackDrop>,d0
    2b22:	|  |  |  |         add.l d0,d1
    2b24:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b2a:	|  |  |  |         move.w 12(a0),d0
    2b2e:	|  |  |  |         move.w d0,d0
    2b30:	|  |  |  |         andi.l #65535,d0
    2b36:	|  |  |  |         move.l d1,d2
    2b38:	|  |  |  |         add.l d0,d2
    2b3a:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2b3e:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b44:	|  |  |  |         move.w 14(a0),d0
    2b48:	|  |  |  |         move.w d0,d0
    2b4a:	|  |  |  |         andi.l #65535,d0
    2b50:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    2b56:	|  |  |  |         move.l d1,-(sp)
    2b58:	|  |  |  |         move.l d0,-(sp)
    2b5a:	|  |  |  |         jsr 179f4 <__mulsi3>
    2b60:	|  |  |  |         addq.l #8,sp
    2b62:	|  |  |  |         move.l d0,d1
    2b64:	|  |  |  |         lsr.l #3,d1
    2b66:	|  |  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    2b6c:	|  |  |  |         add.l d0,d1
    2b6e:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b74:	|  |  |  |         move.w 12(a0),d0
    2b78:	|  |  |  |         move.w d0,d0
    2b7a:	|  |  |  |         andi.l #65535,d0
    2b80:	|  |  |  |         move.l d1,d2
    2b82:	|  |  |  |         add.l d0,d2
    2b84:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b88:	|  |  |  |         clr.l 20(sp)
    2b8c:	|  |  |  |     /-- bra.w 2c14 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2b90:	|  |  |  |  /--|-> move.l 28(sp),d0
    2b94:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b98:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2b9c:	|  |  |  |  |  |   move.l 24(sp),d0
    2ba0:	|  |  |  |  |  |   movea.l 16(sp),a0
    2ba4:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2ba8:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2bae:	|  |  |  |  |  |   move.w 10(a0),d0
    2bb2:	|  |  |  |  |  |   lsl.w #6,d0
    2bb4:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2bba:	|  |  |  |  |  |   move.w 8(a0),d1
    2bbe:	|  |  |  |  |  |   add.w d1,d0
    2bc0:	|  |  |  |  |  |   movea.l 16(sp),a0
    2bc4:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2bc8:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    2bce:	|  |  |  |  |  |   lsr.l #3,d0
    2bd0:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2bd6:	|  |  |  |  |  |   move.l d1,-(sp)
    2bd8:	|  |  |  |  |  |   move.l d0,-(sp)
    2bda:	|  |  |  |  |  |   jsr 179f4 <__mulsi3>
    2be0:	|  |  |  |  |  |   addq.l #8,sp
    2be2:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2be6:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    2bec:	|  |  |  |  |  |   lsr.l #3,d0
    2bee:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2bf4:	|  |  |  |  |  |   move.l d1,-(sp)
    2bf6:	|  |  |  |  |  |   move.l d0,-(sp)
    2bf8:	|  |  |  |  |  |   jsr 179f4 <__mulsi3>
    2bfe:	|  |  |  |  |  |   addq.l #8,sp
    2c00:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2c04:	|  |  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    2c0a:	|  |  |  |  |  |   movea.l d0,a6
    2c0c:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c10:	|  |  |  |  |  |   addq.l #1,20(sp)
    2c14:	|  |  |  |  |  \-> moveq #4,d0
    2c16:	|  |  |  |  |      cmp.l 20(sp),d0
    2c1a:	|  |  |  |  \----- bge.w 2b90 <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2c1e:	|  |  |  \-------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2c26:	|  |  |            movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2c2c:	|  |  |            move.l 16(a0),d0
    2c30:	|  |  |            move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2c36:	|  |  |            move.l 12(sp),8(sp)
    2c3c:	|  |  |            move.l 1a7a4 <SysBase>,d0
    2c42:	|  |  |            movea.l d0,a6
    2c44:	|  |  |            movea.l 8(sp),a1
    2c48:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2c4c:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2c50:	|  |  \----------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    2c56:	|  \-------------- bne.w 2a90 <CstRestoreScreen+0x52>
    2c5a:	|              /-- bra.s 2c5e <CstRestoreScreen+0x220>
    return;
    2c5c:	\--------------|-> nop
  }
  
}
    2c5e:	               \-> move.l (sp)+,d2
    2c60:	                   movea.l (sp)+,a6
    2c62:	                   lea 24(sp),sp
    2c66:	                   rts

00002c68 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2c68:	                lea -132(sp),sp
    2c6c:	                move.l a6,-(sp)
    2c6e:	                move.l d2,-(sp)
    2c70:	                movea.l 152(sp),a0
    2c74:	                move.l 156(sp),d1
    2c78:	                move.l 160(sp),d0
    2c7c:	                movea.w a0,a0
    2c7e:	                move.w a0,12(sp)
    2c82:	                move.w d1,d1
    2c84:	                move.w d1,10(sp)
    2c88:	                move.w d0,d0
    2c8a:	                move.w d0,8(sp)

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2c8e:	                move.w 10(sp),d0
    2c92:	                moveq #0,d1
    2c94:	                move.w d0,d1
    2c96:	                move.w 12(sp),d0
    2c9a:	                move.w d0,d0
    2c9c:	                andi.l #65535,d0
    2ca2:	                movea.l 1a804 <zBuffer>,a0
    2ca8:	                move.l d1,-(sp)
    2caa:	                move.l d0,-(sp)
    2cac:	                move.l a0,-(sp)
    2cae:	                move.l 156(sp),-(sp)
    2cb2:	                jsr 14e8 <CstDrawZBuffer>
    2cb8:	                lea 16(sp),sp
    2cbc:	                move.l d0,84(sp)

  UWORD *destination = 0;
    2cc0:	                clr.l 136(sp)
  switch(destinationtype)
    2cc4:	                moveq #0,d0
    2cc6:	                move.w 8(sp),d0
    2cca:	                moveq #1,d1
    2ccc:	                cmp.l d0,d1
    2cce:	            /-- beq.s 2cd8 <CstScaleSprite+0x70>
    2cd0:	            |   moveq #2,d2
    2cd2:	            |   cmp.l d0,d2
    2cd4:	         /--|-- beq.s 2ce2 <CstScaleSprite+0x7a>
    2cd6:	      /--|--|-- bra.s 2cf4 <CstScaleSprite+0x8c>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2cd8:	      |  |  \-> move.l 1a6d8 <CstDrawBuffer>,136(sp)
      break;
    2ce0:	      +--|----- bra.s 2cf4 <CstScaleSprite+0x8c>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    2ce2:	      |  \----> move.w #2,1a6d2 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2cea:	      |         move.l 1a6c6 <CstBackDrop>,136(sp)
      break;
    2cf2:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    2cf4:	      \-------> tst.w 10(sp)
    2cf8:	         /----- bge.s 2d40 <CstScaleSprite+0xd8>
    if(y + single->height < 0) {
    2cfa:	         |      movea.w 10(sp),a1
    2cfe:	         |      movea.l 144(sp),a0
    2d02:	         |      move.l 4(a0),d0
    2d06:	         |      add.l a1,d0
    2d08:	         |  /-- bpl.s 2d1c <CstScaleSprite+0xb4>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2d0a:	         |  |   pea 17e23 <PutChar+0x319>
    2d10:	         |  |   jsr 17036 <KPrintF>
    2d16:	         |  |   addq.l #4,sp
      return;
    2d18:	/--------|--|-- bra.w 3752 <CstScaleSprite+0xaea>
    }
    ystartdst = 0;
    2d1c:	|        |  \-> clr.l 100(sp)
    ystartsrc = y*-1;
    2d20:	|        |      move.w 10(sp),d0
    2d24:	|        |      ext.l d0
    2d26:	|        |      neg.l d0
    2d28:	|        |      move.l d0,96(sp)
    blitheight = single->height+y;
    2d2c:	|        |      movea.l 144(sp),a0
    2d30:	|        |      move.l 4(a0),d0
    2d34:	|        |      movea.w 10(sp),a0
    2d38:	|        |      add.l a0,d0
    2d3a:	|        |      move.l d0,92(sp)
    2d3e:	|     /--|----- bra.s 2db2 <CstScaleSprite+0x14a>
  } else if(y+single->height > (int) winHeight) {
    2d40:	|     |  \----> movea.w 10(sp),a1
    2d44:	|     |         movea.l 144(sp),a0
    2d48:	|     |         move.l 4(a0),d0
    2d4c:	|     |         move.l a1,d1
    2d4e:	|     |         add.l d0,d1
    2d50:	|     |         move.l 1a6fc <winHeight>,d0
    2d56:	|     |         cmp.l d1,d0
    2d58:	|     |  /----- bge.s 2d9a <CstScaleSprite+0x132>
    if(y  > (int) winHeight) {
    2d5a:	|     |  |      movea.w 10(sp),a0
    2d5e:	|     |  |      move.l 1a6fc <winHeight>,d0
    2d64:	|     |  |      cmp.l a0,d0
    2d66:	|     |  |  /-- bge.s 2d7a <CstScaleSprite+0x112>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2d68:	|     |  |  |   pea 17e23 <PutChar+0x319>
    2d6e:	|     |  |  |   jsr 17036 <KPrintF>
    2d74:	|     |  |  |   addq.l #4,sp
      return;
    2d76:	+-----|--|--|-- bra.w 3752 <CstScaleSprite+0xaea>
    }
    ystartdst = y;
    2d7a:	|     |  |  \-> movea.w 10(sp),a0
    2d7e:	|     |  |      move.l a0,100(sp)
    ystartsrc = 0;
    2d82:	|     |  |      clr.l 96(sp)
    blitheight = winHeight-y;
    2d86:	|     |  |      move.l 1a6fc <winHeight>,d0
    2d8c:	|     |  |      movea.w 10(sp),a0
    2d90:	|     |  |      move.l d0,d1
    2d92:	|     |  |      sub.l a0,d1
    2d94:	|     |  |      move.l d1,92(sp)
    2d98:	|     +--|----- bra.s 2db2 <CstScaleSprite+0x14a>
  } else {
    ystartdst = y;
    2d9a:	|     |  \----> movea.w 10(sp),a0
    2d9e:	|     |         move.l a0,100(sp)
    ystartsrc = 0;
    2da2:	|     |         clr.l 96(sp)
    blitheight = single->height;
    2da6:	|     |         movea.l 144(sp),a0
    2daa:	|     |         move.l 4(a0),d0
    2dae:	|     |         move.l d0,92(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2db2:	|     \-------> tst.w 12(sp)
    2db6:	|     /-------- bge.w 3036 <CstScaleSprite+0x3ce>
    if(x + single->width < 0) {
    2dba:	|     |         movea.w 12(sp),a1
    2dbe:	|     |         movea.l 144(sp),a0
    2dc2:	|     |         move.l (a0),d0
    2dc4:	|     |         add.l a1,d0
    2dc6:	|     |     /-- bpl.s 2dda <CstScaleSprite+0x172>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2dc8:	|     |     |   pea 17e23 <PutChar+0x319>
    2dce:	|     |     |   jsr 17036 <KPrintF>
    2dd4:	|     |     |   addq.l #4,sp
      return;
    2dd6:	+-----|-----|-- bra.w 3752 <CstScaleSprite+0xaea>

    }
    
    extrawords = 1;
    2dda:	|     |     \-> move.w #1,134(sp)
    cutwordssource = (x*-1)/16; 
    2de0:	|     |         move.w 12(sp),d0
    2de4:	|     |     /-- bpl.s 2dea <CstScaleSprite+0x182>
    2de6:	|     |     |   addi.w #15,d0
    2dea:	|     |     \-> asr.w #4,d0
    2dec:	|     |         neg.w d0
    2dee:	|     |         move.w d0,132(sp)
    cutmaskpixel = (x*-1)%16;     
    2df2:	|     |         move.w 12(sp),d0
    2df6:	|     |         ext.l d0
    2df8:	|     |         neg.l d0
    2dfa:	|     |         andi.l #-2147483633,d0
    2e00:	|     |     /-- bpl.s 2e0a <CstScaleSprite+0x1a2>
    2e02:	|     |     |   subq.l #1,d0
    2e04:	|     |     |   moveq #-16,d1
    2e06:	|     |     |   or.l d1,d0
    2e08:	|     |     |   addq.l #1,d0
    2e0a:	|     |     \-> move.w d0,130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2e0e:	|     |         clr.w 128(sp)
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2e12:	|     |         moveq #0,d0
    2e14:	|     |         move.w 132(sp),d0
    2e18:	|     |         add.l d0,d0
    2e1a:	|     |         move.l d0,d1
    2e1c:	|     |         move.l 84(sp),d0
    2e20:	|     |         move.l d1,d2
    2e22:	|     |         add.l d0,d2
    2e24:	|     |         movea.l 144(sp),a0
    2e28:	|     |         move.l (a0),d0
    2e2a:	|     |         move.l 96(sp),-(sp)
    2e2e:	|     |         move.l d0,-(sp)
    2e30:	|     |         jsr 179f4 <__mulsi3>
    2e36:	|     |         addq.l #8,sp
    2e38:	|     |         lsr.l #3,d0
    2e3a:	|     |         move.l d2,d1
    2e3c:	|     |         add.l d0,d1
    2e3e:	|     |         move.l d1,124(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2e42:	|     |         movea.l 144(sp),a0
    2e46:	|     |         move.l 24(a0),d0
    2e4a:	|     |         move.l d0,d1
    2e4c:	|     |         moveq #0,d0
    2e4e:	|     |         move.w 132(sp),d0
    2e52:	|     |         add.l d0,d0
    2e54:	|     |         move.l d1,d2
    2e56:	|     |         add.l d0,d2
    2e58:	|     |         movea.l 144(sp),a0
    2e5c:	|     |         move.l (a0),d0
    2e5e:	|     |         move.l 96(sp),-(sp)
    2e62:	|     |         move.l d0,-(sp)
    2e64:	|     |         jsr 179f4 <__mulsi3>
    2e6a:	|     |         addq.l #8,sp
    2e6c:	|     |         lsr.l #3,d0
    2e6e:	|     |         move.l d2,d1
    2e70:	|     |         add.l d0,d1
    2e72:	|     |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2e76:	|     |         move.l 1a6f8 <winWidth>,d0
    2e7c:	|     |         move.l 100(sp),-(sp)
    2e80:	|     |         move.l d0,-(sp)
    2e82:	|     |         jsr 179f4 <__mulsi3>
    2e88:	|     |         addq.l #8,sp
    2e8a:	|     |         lsr.l #3,d0
    2e8c:	|     |         move.l 136(sp),d1
    2e90:	|     |         add.l d1,d0
    2e92:	|     |         move.l d0,d2
    2e94:	|     |         subq.l #2,d2
    2e96:	|     |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2e9a:	|     |         move.l 1a6f8 <winWidth>,d0
    2ea0:	|     |         move.l 100(sp),-(sp)
    2ea4:	|     |         move.l d0,-(sp)
    2ea6:	|     |         jsr 179f4 <__mulsi3>
    2eac:	|     |         addq.l #8,sp
    2eae:	|     |         lsr.l #3,d0
    2eb0:	|     |         move.l 136(sp),d1
    2eb4:	|     |         add.l d1,d0
    2eb6:	|     |         move.l d0,d1
    2eb8:	|     |         subq.l #2,d1
    2eba:	|     |         move.l d1,112(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2ebe:	|     |         moveq #0,d0
    2ec0:	|     |         move.w 130(sp),d0
    2ec4:	|     |         moveq #16,d1
    2ec6:	|     |         sub.l d0,d1
    2ec8:	|     |         move.l d1,d0
    2eca:	|     |         moveq #12,d2
    2ecc:	|     |         lsl.l d2,d0
    2ece:	|     |         addi.l #4042,d0
    2ed4:	|     |         move.l d0,108(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    2ed8:	|     |         moveq #0,d0
    2eda:	|     |         move.w 130(sp),d0
    2ede:	|     |         moveq #16,d1
    2ee0:	|     |         sub.l d0,d1
    2ee2:	|     |         move.l d1,d0
    2ee4:	|     |         moveq #12,d1
    2ee6:	|     |         lsl.l d1,d0
    2ee8:	|     |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    2eec:	|     |         cmpi.w #1,8(sp)
    2ef2:	|     |  /----- bne.w 2fb0 <CstScaleSprite+0x348>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2ef6:	|     |  |      move.l 1a6e0 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2efe:	|     |  |      moveq #20,d2
    2f00:	|     |  |      move.l d2,44(sp)
    2f04:	|     |  |      clr.l 40(sp)
    2f08:	|     |  |      move.l 1a7a4 <SysBase>,d0
    2f0e:	|     |  |      movea.l d0,a6
    2f10:	|     |  |      move.l 44(sp),d0
    2f14:	|     |  |      move.l 40(sp),d1
    2f18:	|     |  |      jsr -684(a6)
    2f1c:	|     |  |      move.l d0,36(sp)
    2f20:	|     |  |      move.l 36(sp),d0
    2f24:	|     |  |      move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2f2a:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2f30:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2f36:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2f3c:	|     |  |      move.w 12(sp),d0
    2f40:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2f42:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2f48:	|     |  |      move.w 10(sp),d0
    2f4c:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    2f50:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2f56:	|     |  |      move.l 148(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    2f5c:	|     |  |      movea.l 144(sp),a0
    2f60:	|     |  |      move.l (a0),d0
    2f62:	|     |  |      movea.l d0,a0
    2f64:	|     |  |      cmpa.w #0,a0
    2f68:	|     |  |  /-- bge.s 2f6e <CstScaleSprite+0x306>
    2f6a:	|     |  |  |   lea 15(a0),a0
    2f6e:	|     |  |  \-> move.l a0,d0
    2f70:	|     |  |      asr.l #4,d0
    2f72:	|     |  |      move.l d0,d0
    2f74:	|     |  |      add.w 132(sp),d0
    2f78:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2f7e:	|     |  |      add.w 134(sp),d0
    2f82:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2f86:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2f8c:	|     |  |      move.l 92(sp),d0
    2f90:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2f94:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2f9a:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2f9e:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2fa4:	|     |  |      move.l 100(sp),d0
    2fa8:	|     |  |      move.w d0,14(a0)
    2fac:	|  /--|--|----- bra.w 3564 <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2fb0:	|  |  |  \----> movea.l 144(sp),a0
    2fb4:	|  |  |         move.l (a0),d0
    2fb6:	|  |  |         movea.l d0,a0
    2fb8:	|  |  |         cmpa.w #0,a0
    2fbc:	|  |  |     /-- bge.s 2fc2 <CstScaleSprite+0x35a>
    2fbe:	|  |  |     |   lea 15(a0),a0
    2fc2:	|  |  |     \-> move.l a0,d0
    2fc4:	|  |  |         asr.l #4,d0
    2fc6:	|  |  |         move.l d0,d0
    2fc8:	|  |  |         add.w 132(sp),d0
    2fcc:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2fd2:	|  |  |         move.l a0,d1
    2fd4:	|  |  |         addq.l #2,d1
    2fd6:	|  |  |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2fdc:	|  |  |         add.w 134(sp),d0
    2fe0:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2fe2:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2fe8:	|  |  |         move.l a0,d0
    2fea:	|  |  |         addq.l #2,d0
    2fec:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2ff2:	|  |  |         move.l 92(sp),d0
    2ff6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2ff8:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2ffe:	|  |  |         move.l a0,d0
    3000:	|  |  |         addq.l #2,d0
    3002:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3008:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    300a:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3010:	|  |  |         move.l a0,d0
    3012:	|  |  |         addq.l #2,d0
    3014:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    301a:	|  |  |         move.l 100(sp),d0
    301e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3020:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3026:	|  |  |         move.l a0,d0
    3028:	|  |  |         addq.l #2,d0
    302a:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3030:	|  |  |         clr.w (a0)
    3032:	|  +--|-------- bra.w 3564 <CstScaleSprite+0x8fc>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    3036:	|  |  \-------> movea.w 12(sp),a1
    303a:	|  |            movea.l 144(sp),a0
    303e:	|  |            move.l (a0),d0
    3040:	|  |            move.l a1,d1
    3042:	|  |            add.l d0,d1
    3044:	|  |            move.l 1a6f8 <winWidth>,d0
    304a:	|  |            cmp.l d1,d0
    304c:	|  |  /-------- bge.w 32fc <CstScaleSprite+0x694>

    if(x - single->width > (int) winWidth)
    3050:	|  |  |         movea.w 12(sp),a1
    3054:	|  |  |         movea.l 144(sp),a0
    3058:	|  |  |         move.l (a0),d0
    305a:	|  |  |         move.l a1,d1
    305c:	|  |  |         sub.l d0,d1
    305e:	|  |  |         move.l 1a6f8 <winWidth>,d0
    3064:	|  |  |         cmp.l d1,d0
    3066:	|  |  |     /-- bge.s 307a <CstScaleSprite+0x412>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    3068:	|  |  |     |   pea 17e23 <PutChar+0x319>
    306e:	|  |  |     |   jsr 17036 <KPrintF>
    3074:	|  |  |     |   addq.l #4,sp
      return;
    3076:	+--|--|-----|-- bra.w 3752 <CstScaleSprite+0xaea>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    307a:	|  |  |     \-> clr.w 134(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    307e:	|  |  |         movea.w 12(sp),a1
    3082:	|  |  |         movea.l 144(sp),a0
    3086:	|  |  |         move.l (a0),d0
    3088:	|  |  |         add.l a1,d0
    308a:	|  |  |         move.l d0,d1
    308c:	|  |  |         move.l 1a6f8 <winWidth>,d0
    3092:	|  |  |         sub.l d0,d1
    3094:	|  |  |         move.l d1,d0
    3096:	|  |  |         lsr.l #4,d0
    3098:	|  |  |         move.w d0,132(sp)
    cutmaskpixel = 0;
    309c:	|  |  |         clr.w 130(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    30a0:	|  |  |         move.w #-1,128(sp)
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    30a6:	|  |  |         movea.l 144(sp),a0
    30aa:	|  |  |         move.l (a0),d0
    30ac:	|  |  |         move.l 96(sp),-(sp)
    30b0:	|  |  |         move.l d0,-(sp)
    30b2:	|  |  |         jsr 179f4 <__mulsi3>
    30b8:	|  |  |         addq.l #8,sp
    30ba:	|  |  |         lsr.l #3,d0
    30bc:	|  |  |         move.l 84(sp),d1
    30c0:	|  |  |         move.l d0,d2
    30c2:	|  |  |         add.l d1,d2
    30c4:	|  |  |         move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    30c8:	|  |  |         movea.l 144(sp),a0
    30cc:	|  |  |         move.l 24(a0),d0
    30d0:	|  |  |         move.l d0,d2
    30d2:	|  |  |         movea.l 144(sp),a0
    30d6:	|  |  |         move.l (a0),d0
    30d8:	|  |  |         move.l 96(sp),-(sp)
    30dc:	|  |  |         move.l d0,-(sp)
    30de:	|  |  |         jsr 179f4 <__mulsi3>
    30e4:	|  |  |         addq.l #8,sp
    30e6:	|  |  |         lsr.l #3,d0
    30e8:	|  |  |         move.l d2,d1
    30ea:	|  |  |         add.l d0,d1
    30ec:	|  |  |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    30f0:	|  |  |         move.l 1a6f8 <winWidth>,d0
    30f6:	|  |  |         move.l 100(sp),-(sp)
    30fa:	|  |  |         move.l d0,-(sp)
    30fc:	|  |  |         jsr 179f4 <__mulsi3>
    3102:	|  |  |         addq.l #8,sp
    3104:	|  |  |         lsr.l #3,d0
    3106:	|  |  |         move.l 136(sp),d1
    310a:	|  |  |         add.l d0,d1
    310c:	|  |  |         move.w 12(sp),d0
    3110:	|  |  |     /-- bpl.s 3116 <CstScaleSprite+0x4ae>
    3112:	|  |  |     |   addi.w #15,d0
    3116:	|  |  |     \-> asr.w #4,d0
    3118:	|  |  |         movea.w d0,a0
    311a:	|  |  |         move.l a0,d0
    311c:	|  |  |         add.l a0,d0
    311e:	|  |  |         move.l d1,d2
    3120:	|  |  |         add.l d0,d2
    3122:	|  |  |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3126:	|  |  |         move.l 1a6f8 <winWidth>,d0
    312c:	|  |  |         move.l 100(sp),-(sp)
    3130:	|  |  |         move.l d0,-(sp)
    3132:	|  |  |         jsr 179f4 <__mulsi3>
    3138:	|  |  |         addq.l #8,sp
    313a:	|  |  |         lsr.l #3,d0
    313c:	|  |  |         move.l 136(sp),d1
    3140:	|  |  |         add.l d0,d1
    3142:	|  |  |         move.w 12(sp),d0
    3146:	|  |  |     /-- bpl.s 314c <CstScaleSprite+0x4e4>
    3148:	|  |  |     |   addi.w #15,d0
    314c:	|  |  |     \-> asr.w #4,d0
    314e:	|  |  |         movea.w d0,a0
    3150:	|  |  |         move.l a0,d0
    3152:	|  |  |         add.l a0,d0
    3154:	|  |  |         move.l d1,d2
    3156:	|  |  |         add.l d0,d2
    3158:	|  |  |         move.l d2,112(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    315c:	|  |  |         movea.l 144(sp),a0
    3160:	|  |  |         move.l (a0),d0
    3162:	|  |  |         andi.l #-2147483633,d0
    3168:	|  |  |     /-- bpl.s 3172 <CstScaleSprite+0x50a>
    316a:	|  |  |     |   subq.l #1,d0
    316c:	|  |  |     |   moveq #-16,d1
    316e:	|  |  |     |   or.l d1,d0
    3170:	|  |  |     |   addq.l #1,d0
    3172:	|  |  |     \-> moveq #12,d2
    3174:	|  |  |         lsl.l d2,d0
    3176:	|  |  |         addi.l #4042,d0
    317c:	|  |  |         move.l d0,108(sp)
    bltcon1 = ((single->width%16) << 12);
    3180:	|  |  |         movea.l 144(sp),a0
    3184:	|  |  |         move.l (a0),d0
    3186:	|  |  |         andi.l #-2147483633,d0
    318c:	|  |  |     /-- bpl.s 3196 <CstScaleSprite+0x52e>
    318e:	|  |  |     |   subq.l #1,d0
    3190:	|  |  |     |   moveq #-16,d1
    3192:	|  |  |     |   or.l d1,d0
    3194:	|  |  |     |   addq.l #1,d0
    3196:	|  |  |     \-> moveq #12,d2
    3198:	|  |  |         lsl.l d2,d0
    319a:	|  |  |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    319e:	|  |  |         cmpi.w #1,8(sp)
    31a4:	|  |  |  /----- bne.w 326c <CstScaleSprite+0x604>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    31a8:	|  |  |  |      move.l 1a6e0 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    31b0:	|  |  |  |      moveq #20,d0
    31b2:	|  |  |  |      move.l d0,60(sp)
    31b6:	|  |  |  |      clr.l 56(sp)
    31ba:	|  |  |  |      move.l 1a7a4 <SysBase>,d0
    31c0:	|  |  |  |      movea.l d0,a6
    31c2:	|  |  |  |      move.l 60(sp),d0
    31c6:	|  |  |  |      move.l 56(sp),d1
    31ca:	|  |  |  |      jsr -684(a6)
    31ce:	|  |  |  |      move.l d0,52(sp)
    31d2:	|  |  |  |      move.l 52(sp),d0
    31d6:	|  |  |  |      move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    31dc:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    31e2:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    31e8:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    31ee:	|  |  |  |      move.w 12(sp),d0
    31f2:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    31f4:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    31fa:	|  |  |  |      move.w 10(sp),d0
    31fe:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3202:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    3208:	|  |  |  |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    320e:	|  |  |  |      movea.l 144(sp),a0
    3212:	|  |  |  |      move.l (a0),d0
    3214:	|  |  |  |      movea.l d0,a0
    3216:	|  |  |  |      cmpa.w #0,a0
    321a:	|  |  |  |  /-- bge.s 3220 <CstScaleSprite+0x5b8>
    321c:	|  |  |  |  |   lea 15(a0),a0
    3220:	|  |  |  |  \-> move.l a0,d0
    3222:	|  |  |  |      asr.l #4,d0
    3224:	|  |  |  |      move.l d0,d0
    3226:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    322c:	|  |  |  |      add.w 132(sp),d0
    3230:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3234:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    323a:	|  |  |  |      move.l 92(sp),d0
    323e:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3242:	|  |  |  |      move.w 12(sp),d0
    3246:	|  |  |  |  /-- bpl.s 324c <CstScaleSprite+0x5e4>
    3248:	|  |  |  |  |   addi.w #15,d0
    324c:	|  |  |  |  \-> asr.w #4,d0
    324e:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    3254:	|  |  |  |      add.w d0,d0
    3256:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    325a:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    3260:	|  |  |  |      move.l 100(sp),d0
    3264:	|  |  |  |      move.w d0,14(a0)
    3268:	|  +--|--|----- bra.w 3564 <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    326c:	|  |  |  \----> movea.l 144(sp),a0
    3270:	|  |  |         move.l (a0),d0
    3272:	|  |  |         movea.l d0,a0
    3274:	|  |  |         cmpa.w #0,a0
    3278:	|  |  |     /-- bge.s 327e <CstScaleSprite+0x616>
    327a:	|  |  |     |   lea 15(a0),a0
    327e:	|  |  |     \-> move.l a0,d0
    3280:	|  |  |         asr.l #4,d0
    3282:	|  |  |         move.l d0,d0
    3284:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    328a:	|  |  |         move.l a0,d1
    328c:	|  |  |         addq.l #2,d1
    328e:	|  |  |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3294:	|  |  |         add.w 132(sp),d0
    3298:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    329a:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    32a0:	|  |  |         move.l a0,d0
    32a2:	|  |  |         addq.l #2,d0
    32a4:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    32aa:	|  |  |         move.l 92(sp),d0
    32ae:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    32b0:	|  |  |         move.w 12(sp),d0
    32b4:	|  |  |     /-- bpl.s 32ba <CstScaleSprite+0x652>
    32b6:	|  |  |     |   addi.w #15,d0
    32ba:	|  |  |     \-> asr.w #4,d0
    32bc:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    32c2:	|  |  |         move.l a0,d1
    32c4:	|  |  |         addq.l #2,d1
    32c6:	|  |  |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    32cc:	|  |  |         add.w d0,d0
    32ce:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    32d0:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    32d6:	|  |  |         move.l a0,d0
    32d8:	|  |  |         addq.l #2,d0
    32da:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    32e0:	|  |  |         move.l 100(sp),d0
    32e4:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    32e6:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    32ec:	|  |  |         move.l a0,d0
    32ee:	|  |  |         addq.l #2,d0
    32f0:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    32f6:	|  |  |         clr.w (a0)
    32f8:	|  +--|-------- bra.w 3564 <CstScaleSprite+0x8fc>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    32fc:	|  |  \-------> move.w #1,134(sp)
    cutwordssource = 0;
    3302:	|  |            clr.w 132(sp)
    cutmaskpixel = 0;
    3306:	|  |            clr.w 130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    330a:	|  |            clr.w 128(sp)
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    330e:	|  |            movea.l 144(sp),a0
    3312:	|  |            move.l (a0),d0
    3314:	|  |            move.l 96(sp),-(sp)
    3318:	|  |            move.l d0,-(sp)
    331a:	|  |            jsr 179f4 <__mulsi3>
    3320:	|  |            addq.l #8,sp
    3322:	|  |            lsr.l #3,d0
    3324:	|  |            move.l 84(sp),d1
    3328:	|  |            move.l d0,d2
    332a:	|  |            add.l d1,d2
    332c:	|  |            move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3330:	|  |            movea.l 144(sp),a0
    3334:	|  |            move.l 24(a0),d0
    3338:	|  |            move.l d0,d2
    333a:	|  |            movea.l 144(sp),a0
    333e:	|  |            move.l (a0),d0
    3340:	|  |            move.l 96(sp),-(sp)
    3344:	|  |            move.l d0,-(sp)
    3346:	|  |            jsr 179f4 <__mulsi3>
    334c:	|  |            addq.l #8,sp
    334e:	|  |            lsr.l #3,d0
    3350:	|  |            move.l d2,d1
    3352:	|  |            add.l d0,d1
    3354:	|  |            move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3358:	|  |            move.l 1a6f8 <winWidth>,d0
    335e:	|  |            move.l 100(sp),-(sp)
    3362:	|  |            move.l d0,-(sp)
    3364:	|  |            jsr 179f4 <__mulsi3>
    336a:	|  |            addq.l #8,sp
    336c:	|  |            lsr.l #3,d0
    336e:	|  |            move.l 136(sp),d1
    3372:	|  |            add.l d0,d1
    3374:	|  |            move.w 12(sp),d0
    3378:	|  |        /-- bpl.s 337e <CstScaleSprite+0x716>
    337a:	|  |        |   addi.w #15,d0
    337e:	|  |        \-> asr.w #4,d0
    3380:	|  |            movea.w d0,a0
    3382:	|  |            move.l a0,d0
    3384:	|  |            add.l a0,d0
    3386:	|  |            move.l d1,d2
    3388:	|  |            add.l d0,d2
    338a:	|  |            move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    338e:	|  |            move.l 1a6f8 <winWidth>,d0
    3394:	|  |            move.l 100(sp),-(sp)
    3398:	|  |            move.l d0,-(sp)
    339a:	|  |            jsr 179f4 <__mulsi3>
    33a0:	|  |            addq.l #8,sp
    33a2:	|  |            lsr.l #3,d0
    33a4:	|  |            move.l 136(sp),d1
    33a8:	|  |            add.l d0,d1
    33aa:	|  |            move.w 12(sp),d0
    33ae:	|  |        /-- bpl.s 33b4 <CstScaleSprite+0x74c>
    33b0:	|  |        |   addi.w #15,d0
    33b4:	|  |        \-> asr.w #4,d0
    33b6:	|  |            movea.w d0,a0
    33b8:	|  |            move.l a0,d0
    33ba:	|  |            add.l a0,d0
    33bc:	|  |            move.l d1,d2
    33be:	|  |            add.l d0,d2
    33c0:	|  |            move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    33c4:	|  |            move.w 12(sp),d0
    33c8:	|  |            andi.w #-32753,d0
    33cc:	|  |        /-- bpl.s 33d6 <CstScaleSprite+0x76e>
    33ce:	|  |        |   subq.w #1,d0
    33d0:	|  |        |   ori.w #-16,d0
    33d4:	|  |        |   addq.w #1,d0
    33d6:	|  |        \-> ext.l d0
    33d8:	|  |            moveq #12,d1
    33da:	|  |            lsl.l d1,d0
    33dc:	|  |            addi.l #4042,d0
    33e2:	|  |            move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    33e6:	|  |            move.w 12(sp),d0
    33ea:	|  |            andi.w #-32753,d0
    33ee:	|  |        /-- bpl.s 33f8 <CstScaleSprite+0x790>
    33f0:	|  |        |   subq.w #1,d0
    33f2:	|  |        |   ori.w #-16,d0
    33f6:	|  |        |   addq.w #1,d0
    33f8:	|  |        \-> ext.l d0
    33fa:	|  |            moveq #12,d2
    33fc:	|  |            lsl.l d2,d0
    33fe:	|  |            move.l d0,104(sp)
    if( destinationtype == SCREEN)
    3402:	|  |            cmpi.w #1,8(sp)
    3408:	|  |     /----- bne.w 34d4 <CstScaleSprite+0x86c>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    340c:	|  |     |      move.l 1a6e0 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3414:	|  |     |      moveq #20,d0
    3416:	|  |     |      move.l d0,76(sp)
    341a:	|  |     |      clr.l 72(sp)
    341e:	|  |     |      move.l 1a7a4 <SysBase>,d0
    3424:	|  |     |      movea.l d0,a6
    3426:	|  |     |      move.l 76(sp),d0
    342a:	|  |     |      move.l 72(sp),d1
    342e:	|  |     |      jsr -684(a6)
    3432:	|  |     |      move.l d0,68(sp)
    3436:	|  |     |      move.l 68(sp),d0
    343a:	|  |     |      move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3440:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    3446:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    344c:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    3452:	|  |     |      move.w 12(sp),d0
    3456:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3458:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    345e:	|  |     |      move.w 10(sp),d0
    3462:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3466:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    346c:	|  |     |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3472:	|  |     |      movea.l 144(sp),a0
    3476:	|  |     |      move.l (a0),d0
    3478:	|  |     |      movea.l d0,a0
    347a:	|  |     |      cmpa.w #0,a0
    347e:	|  |     |  /-- bge.s 3484 <CstScaleSprite+0x81c>
    3480:	|  |     |  |   lea 15(a0),a0
    3484:	|  |     |  \-> move.l a0,d0
    3486:	|  |     |      asr.l #4,d0
    3488:	|  |     |      move.l d0,d0
    348a:	|  |     |      add.w 132(sp),d0
    348e:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    3494:	|  |     |      add.w 134(sp),d0
    3498:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    349c:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    34a2:	|  |     |      move.l 92(sp),d0
    34a6:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    34aa:	|  |     |      move.w 12(sp),d0
    34ae:	|  |     |  /-- bpl.s 34b4 <CstScaleSprite+0x84c>
    34b0:	|  |     |  |   addi.w #15,d0
    34b4:	|  |     |  \-> asr.w #4,d0
    34b6:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    34bc:	|  |     |      add.w d0,d0
    34be:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    34c2:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    34c8:	|  |     |      move.l 100(sp),d0
    34cc:	|  |     |      move.w d0,14(a0)
    34d0:	|  +-----|----- bra.w 3564 <CstScaleSprite+0x8fc>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    34d4:	|  |     \----> movea.l 144(sp),a0
    34d8:	|  |            move.l (a0),d0
    34da:	|  |            movea.l d0,a0
    34dc:	|  |            cmpa.w #0,a0
    34e0:	|  |        /-- bge.s 34e6 <CstScaleSprite+0x87e>
    34e2:	|  |        |   lea 15(a0),a0
    34e6:	|  |        \-> move.l a0,d0
    34e8:	|  |            asr.l #4,d0
    34ea:	|  |            move.l d0,d0
    34ec:	|  |            add.w 132(sp),d0
    34f0:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    34f6:	|  |            move.l a0,d1
    34f8:	|  |            addq.l #2,d1
    34fa:	|  |            move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3500:	|  |            add.w 134(sp),d0
    3504:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3506:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    350c:	|  |            move.l a0,d0
    350e:	|  |            addq.l #2,d0
    3510:	|  |            move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3516:	|  |            move.l 92(sp),d0
    351a:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    351c:	|  |            move.w 12(sp),d0
    3520:	|  |        /-- bpl.s 3526 <CstScaleSprite+0x8be>
    3522:	|  |        |   addi.w #15,d0
    3526:	|  |        \-> asr.w #4,d0
    3528:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    352e:	|  |            move.l a0,d1
    3530:	|  |            addq.l #2,d1
    3532:	|  |            move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3538:	|  |            add.w d0,d0
    353a:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    353c:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3542:	|  |            move.l a0,d0
    3544:	|  |            addq.l #2,d0
    3546:	|  |            move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    354c:	|  |            move.l 100(sp),d0
    3550:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3552:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3558:	|  |            move.l a0,d0
    355a:	|  |            addq.l #2,d0
    355c:	|  |            move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3562:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3564:	|  \----------> moveq #0,d0
    3566:	|               move.w 130(sp),d0
    356a:	|               moveq #0,d1
    356c:	|               not.w d1
    356e:	|               asr.l d0,d1
    3570:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3574:	|               moveq #0,d1
    3576:	|               move.w 132(sp),d1
    357a:	|               moveq #0,d0
    357c:	|               move.w 134(sp),d0
    3580:	|               sub.l d0,d1
    3582:	|               move.l d1,d0
    3584:	|               add.w d0,d0
    3586:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    358a:	|               moveq #0,d1
    358c:	|               move.w 132(sp),d1
    3590:	|               moveq #0,d0
    3592:	|               move.w 134(sp),d0
    3596:	|               sub.l d0,d1
    3598:	|               move.l d1,d0
    359a:	|               add.w d0,d0
    359c:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35a0:	|               move.l 1a6f8 <winWidth>,d0
    35a6:	|               lsr.l #3,d0
    35a8:	|               move.l d0,d1
    35aa:	|               movea.l 144(sp),a0
    35ae:	|               move.l (a0),d0
    35b0:	|           /-- bpl.s 35b4 <CstScaleSprite+0x94c>
    35b2:	|           |   addq.l #7,d0
    35b4:	|           \-> asr.l #3,d0
    35b6:	|               move.l d0,d0
    35b8:	|               sub.w d0,d1
    35ba:	|               move.w 132(sp),d0
    35be:	|               sub.w 134(sp),d0
    35c2:	|               add.w d0,d0
    35c4:	|               add.w d1,d0
    35c6:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    35ca:	|               move.l 1a6f8 <winWidth>,d0
    35d0:	|               lsr.l #3,d0
    35d2:	|               move.l d0,d1
    35d4:	|               movea.l 144(sp),a0
    35d8:	|               move.l (a0),d0
    35da:	|           /-- bpl.s 35de <CstScaleSprite+0x976>
    35dc:	|           |   addq.l #7,d0
    35de:	|           \-> asr.l #3,d0
    35e0:	|               move.l d0,d0
    35e2:	|               sub.w d0,d1
    35e4:	|               move.w 132(sp),d0
    35e8:	|               sub.w 134(sp),d0
    35ec:	|               add.w d0,d0
    35ee:	|               add.w d1,d0
    35f0:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    35f4:	|               move.l #14675968,22(sp)
  WaitBlit();
    35fc:	|               move.l 1a7b0 <GfxBase>,d0
    3602:	|               movea.l d0,a6
    3604:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    3608:	|               movea.l 22(sp),a0
    360c:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    3612:	|               movea.l 22(sp),a0
    3616:	|               move.w 128(sp),70(a0)
  custom->bltamod = bltamod;
    361c:	|               move.w 32(sp),d0
    3620:	|               movea.l 22(sp),a0
    3624:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    3628:	|               move.w 30(sp),d0
    362c:	|               movea.l 22(sp),a0
    3630:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    3634:	|               move.w 28(sp),d0
    3638:	|               movea.l 22(sp),a0
    363c:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    3640:	|               move.w 26(sp),d0
    3644:	|               movea.l 22(sp),a0
    3648:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    364c:	|               move.l 108(sp),d0
    3650:	|               movea.l 22(sp),a0
    3654:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    3658:	|               move.l 104(sp),d0
    365c:	|               movea.l 22(sp),a0
    3660:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3664:	|               movea.l 144(sp),a0
    3668:	|               move.l (a0),d0
    366a:	|               asr.l #3,d0
    366c:	|               move.l d0,d1
    366e:	|               movea.l 144(sp),a0
    3672:	|               move.l 4(a0),d0
    3676:	|               move.l d0,d0
    3678:	|               move.w d1,d2
    367a:	|               muls.w d0,d2
    367c:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    3680:	|               move.l 1a6f8 <winWidth>,d0
    3686:	|               lsr.l #3,d0
    3688:	|               move.l d0,d1
    368a:	|               move.l 1a6fc <winHeight>,d0
    3690:	|               move.l d0,d0
    3692:	|               move.w d1,d2
    3694:	|               muls.w d0,d2
    3696:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    369a:	|               clr.l 88(sp)
    369e:	|        /----- bra.w 3732 <CstScaleSprite+0xaca>
  {
    custom->bltapt = (APTR) bltapt;
    36a2:	|     /--|----> move.l 124(sp),d0
    36a6:	|     |  |      movea.l 22(sp),a0
    36aa:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    36ae:	|     |  |      move.l 120(sp),d0
    36b2:	|     |  |      movea.l 22(sp),a0
    36b6:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    36ba:	|     |  |      move.l 116(sp),d0
    36be:	|     |  |      movea.l 22(sp),a0
    36c2:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    36c6:	|     |  |      move.l 112(sp),d0
    36ca:	|     |  |      movea.l 22(sp),a0
    36ce:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    36d2:	|     |  |      move.l 92(sp),d0
    36d6:	|     |  |      move.w d0,d1
    36d8:	|     |  |      lsl.w #6,d1
    36da:	|     |  |      movea.l 144(sp),a0
    36de:	|     |  |      move.l (a0),d0
    36e0:	|     |  |      movea.l d0,a0
    36e2:	|     |  |      cmpa.w #0,a0
    36e6:	|     |  |  /-- bge.s 36ec <CstScaleSprite+0xa84>
    36e8:	|     |  |  |   lea 15(a0),a0
    36ec:	|     |  |  \-> move.l a0,d0
    36ee:	|     |  |      asr.l #4,d0
    36f0:	|     |  |      move.l d0,d0
    36f2:	|     |  |      add.w d1,d0
    36f4:	|     |  |      sub.w 132(sp),d0
    36f8:	|     |  |      add.w 134(sp),d0
    36fc:	|     |  |      movea.l 22(sp),a0
    3700:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    3704:	|     |  |      moveq #0,d0
    3706:	|     |  |      move.w 20(sp),d0
    370a:	|     |  |      add.l d0,120(sp)
    bltcpt += bltcptplus;
    370e:	|     |  |      moveq #0,d0
    3710:	|     |  |      move.w 18(sp),d0
    3714:	|     |  |      add.l d0,116(sp)
    bltdpt += bltcptplus;
    3718:	|     |  |      moveq #0,d0
    371a:	|     |  |      move.w 18(sp),d0
    371e:	|     |  |      add.l d0,112(sp)
    WaitBlit();
    3722:	|     |  |      move.l 1a7b0 <GfxBase>,d0
    3728:	|     |  |      movea.l d0,a6
    372a:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    372e:	|     |  |      addq.l #1,88(sp)
    3732:	|     |  \----> moveq #4,d0
    3734:	|     |         cmp.l 88(sp),d0
    3738:	|     \-------- bge.w 36a2 <CstScaleSprite+0xa3a>
  }   

  FreeVec(mask);
    373c:	|               move.l 84(sp),14(sp)
    3742:	|               move.l 1a7a4 <SysBase>,d0
    3748:	|               movea.l d0,a6
    374a:	|               movea.l 14(sp),a1
    374e:	|               jsr -690(a6)
}
    3752:	\-------------> move.l (sp)+,d2
    3754:	                movea.l (sp)+,a6
    3756:	                lea 132(sp),sp
    375a:	                rts

0000375c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    375c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    375e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3764:	move.l 8(sp),d0
    3768:	movea.l (sp),a0
    376a:	move.l d0,128(a0)
}
    376e:	nop
    3770:	addq.l #4,sp
    3772:	rts

00003774 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3774:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3778:	move.l 1a6d4 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3780:	move.l 1a6d8 <CstDrawBuffer>,d0
    3786:	move.l d0,1a6d4 <CstViewBuffer>
  CstDrawBuffer = tmp;
    378c:	move.l 16(sp),1a6d8 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3794:	move.l 1a6dc <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    379c:	move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    37a2:	move.l d0,1a6dc <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    37a8:	move.l 12(sp),1a6e0 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    37b0:	move.l 1a6ce <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    37b8:	move.l 1a6d4 <CstViewBuffer>,d0
    37be:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    37c2:	move.l 4(sp),d0
    37c6:	clr.w d0
    37c8:	swap d0
    37ca:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    37ce:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    37d2:	movea.w #118,a0
    37d6:	adda.l 8(sp),a0
    37da:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    37dc:	movea.w #114,a0
    37e0:	adda.l 8(sp),a0
    37e4:	move.w 2(sp),(a0)

  ptr +=  40*256;
    37e8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    37f0:	move.l 4(sp),d0
    37f4:	clr.w d0
    37f6:	swap d0
    37f8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    37fc:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3800:	movea.w #126,a0
    3804:	adda.l 8(sp),a0
    3808:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    380a:	movea.w #122,a0
    380e:	adda.l 8(sp),a0
    3812:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3816:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    381e:	move.l 4(sp),d0
    3822:	clr.w d0
    3824:	swap d0
    3826:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    382a:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    382e:	movea.l 8(sp),a0
    3832:	lea 134(a0),a0
    3836:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3838:	movea.l 8(sp),a0
    383c:	lea 130(a0),a0
    3840:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3844:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    384c:	move.l 4(sp),d0
    3850:	clr.w d0
    3852:	swap d0
    3854:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3858:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    385c:	movea.l 8(sp),a0
    3860:	lea 142(a0),a0
    3864:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3866:	movea.l 8(sp),a0
    386a:	lea 138(a0),a0
    386e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3872:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    387a:	move.l 4(sp),d0
    387e:	clr.w d0
    3880:	swap d0
    3882:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3886:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    388a:	movea.l 8(sp),a0
    388e:	lea 150(a0),a0
    3892:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3894:	movea.l 8(sp),a0
    3898:	lea 146(a0),a0
    389c:	move.w 2(sp),(a0)

}
    38a0:	nop
    38a2:	lea 20(sp),sp
    38a6:	rts

000038a8 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    38a8:	          lea -56(sp),sp
    38ac:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    38ae:	          pea 17e56 <PutChar+0x34c>
    38b4:	          jsr 17036 <KPrintF>
    38ba:	          addq.l #4,sp

  width = width / 8;
    38bc:	          move.l 64(sp),d0
    38c0:	      /-- bpl.s 38c4 <CstReserveBackdrop+0x1c>
    38c2:	      |   addq.l #7,d0
    38c4:	      \-> asr.l #3,d0
    38c6:	          move.l d0,64(sp)

  if( width < 40) 
    38ca:	          moveq #39,d0
    38cc:	          cmp.l 64(sp),d0
    38d0:	      /-- blt.s 38e6 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    38d2:	      |   pea 17e70 <PutChar+0x366>
    38d8:	      |   jsr 17036 <KPrintF>
    38de:	      |   addq.l #4,sp
    return FALSE;
    38e0:	      |   clr.w d0
    38e2:	/-----|-- bra.w 3c28 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    38e6:	|     \-> pea 17eae <PutChar+0x3a4>
    38ec:	|         jsr 17036 <KPrintF>
    38f2:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    38f4:	|         move.l 64(sp),-(sp)
    38f8:	|         jsr fce <CstCreateCopperlist>
    38fe:	|         addq.l #4,sp
    3900:	|         move.l d0,1a6ce <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3906:	|         pea 17ece <PutChar+0x3c4>
    390c:	|         jsr 17036 <KPrintF>
    3912:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3914:	|         move.l 64(sp),d1
    3918:	|         move.l 68(sp),d0
    391c:	|         muls.w d1,d0
    391e:	|         move.w d0,1a6c4 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3924:	|         move.w 1a6c4 <CstBackdropSizePlane>,d1
    392a:	|         move.w d1,d0
    392c:	|         add.w d0,d0
    392e:	|         add.w d0,d0
    3930:	|         add.w d1,d0
    3932:	|         move.w d0,1a6c2 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3938:	|         move.w 1a6c2 <CstBackdropSize>,d0
    393e:	|         move.w d0,d0
    3940:	|         andi.l #65535,d0
    3946:	|         move.l d0,48(sp)
    394a:	|         moveq #2,d1
    394c:	|         move.l d1,44(sp)
    3950:	|         move.l 1a7a4 <SysBase>,d0
    3956:	|         movea.l d0,a6
    3958:	|         move.l 48(sp),d0
    395c:	|         move.l 44(sp),d1
    3960:	|         jsr -684(a6)
    3964:	|         move.l d0,40(sp)
    3968:	|         move.l 40(sp),d0
    396c:	|         move.l d0,1a6c6 <CstBackDrop>
  if( !CstBackDrop)
    3972:	|         move.l 1a6c6 <CstBackDrop>,d0
    3978:	|     /-- bne.s 398e <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    397a:	|     |   pea 17ef5 <PutChar+0x3eb>
    3980:	|     |   jsr 17036 <KPrintF>
    3986:	|     |   addq.l #4,sp
    return FALSE;  
    3988:	|     |   clr.w d0
    398a:	+-----|-- bra.w 3c28 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    398e:	|     \-> pea 17f2d <PutChar+0x423>
    3994:	|         jsr 17036 <KPrintF>
    399a:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    399c:	|         move.l 1a6c6 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    39a4:	|         clr.l 52(sp)
    39a8:	|     /-- bra.s 39be <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    39aa:	|  /--|-> move.l 56(sp),d0
    39ae:	|  |  |   move.l d0,d1
    39b0:	|  |  |   addq.l #4,d1
    39b2:	|  |  |   move.l d1,56(sp)
    39b6:	|  |  |   movea.l d0,a0
    39b8:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    39ba:	|  |  |   addq.l #1,52(sp)
    39be:	|  |  \-> move.w 1a6c2 <CstBackdropSize>,d0
    39c4:	|  |      lsr.w #2,d0
    39c6:	|  |      move.w d0,d0
    39c8:	|  |      andi.l #65535,d0
    39ce:	|  |      cmp.l 52(sp),d0
    39d2:	|  \----- bgt.s 39aa <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    39d4:	|         move.w 1a6c2 <CstBackdropSize>,d0
    39da:	|         move.w d0,d0
    39dc:	|         andi.l #65535,d0
    39e2:	|         move.l 64(sp),d1
    39e6:	|         add.l d1,d1
    39e8:	|         add.l d1,d0
    39ea:	|         move.l d0,36(sp)
    39ee:	|         moveq #2,d0
    39f0:	|         move.l d0,32(sp)
    39f4:	|         move.l 1a7a4 <SysBase>,d0
    39fa:	|         movea.l d0,a6
    39fc:	|         move.l 36(sp),d0
    3a00:	|         move.l 32(sp),d1
    3a04:	|         jsr -684(a6)
    3a08:	|         move.l d0,28(sp)
    3a0c:	|         move.l 28(sp),d0
    3a10:	|         move.l d0,1a6d8 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3a16:	|         move.l 1a6d8 <CstDrawBuffer>,d0
    3a1c:	|     /-- bne.s 3a32 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3a1e:	|     |   pea 17f53 <PutChar+0x449>
    3a24:	|     |   jsr 17036 <KPrintF>
    3a2a:	|     |   addq.l #4,sp
    return FALSE;  
    3a2c:	|     |   clr.w d0
    3a2e:	+-----|-- bra.w 3c28 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3a32:	|     \-> pea 17f8d <PutChar+0x483>
    3a38:	|         jsr 17036 <KPrintF>
    3a3e:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3a40:	|         move.l #10000,24(sp)
    3a48:	|         clr.l 20(sp)
    3a4c:	|         move.l 1a7a4 <SysBase>,d0
    3a52:	|         movea.l d0,a6
    3a54:	|         move.l 24(sp),d0
    3a58:	|         move.l 20(sp),d1
    3a5c:	|         jsr -684(a6)
    3a60:	|         move.l d0,16(sp)
    3a64:	|         move.l 16(sp),d0
    3a68:	|         move.l d0,1a6e4 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3a6e:	|         move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    3a74:	|     /-- bne.s 3a8a <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3a76:	|     |   pea 17fb5 <PutChar+0x4ab>
    3a7c:	|     |   jsr 17036 <KPrintF>
    3a82:	|     |   addq.l #4,sp
    return FALSE;  
    3a84:	|     |   clr.w d0
    3a86:	+-----|-- bra.w 3c28 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3a8a:	|     \-> move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    3a90:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3a96:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    3a9c:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3a9e:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    3aa4:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3aa6:	|         move.w 1a6c2 <CstBackdropSize>,d0
    3aac:	|         move.w d0,d0
    3aae:	|         andi.l #65535,d0
    3ab4:	|         move.l 64(sp),d1
    3ab8:	|         add.l d1,d1
    3aba:	|         add.l d1,d0
    3abc:	|         move.l d0,12(sp)
    3ac0:	|         moveq #2,d1
    3ac2:	|         move.l d1,8(sp)
    3ac6:	|         move.l 1a7a4 <SysBase>,d0
    3acc:	|         movea.l d0,a6
    3ace:	|         move.l 12(sp),d0
    3ad2:	|         move.l 8(sp),d1
    3ad6:	|         jsr -684(a6)
    3ada:	|         move.l d0,4(sp)
    3ade:	|         move.l 4(sp),d0
    3ae2:	|         move.l d0,1a6d4 <CstViewBuffer>
  if( !CstViewBuffer)
    3ae8:	|         move.l 1a6d4 <CstViewBuffer>,d0
    3aee:	|     /-- bne.s 3b04 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3af0:	|     |   pea 18000 <PutChar+0x4f6>
    3af6:	|     |   jsr 17036 <KPrintF>
    3afc:	|     |   addq.l #4,sp
    return FALSE;  
    3afe:	|     |   clr.w d0
    3b00:	+-----|-- bra.w 3c28 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3b04:	|     \-> pea 1803a <PutChar+0x530>
    3b0a:	|         jsr 17036 <KPrintF>
    3b10:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3b12:	|         move.l 1a6d8 <CstDrawBuffer>,d1
    3b18:	|         move.l 64(sp),d0
    3b1c:	|     /-- bpl.s 3b20 <CstReserveBackdrop+0x278>
    3b1e:	|     |   addq.l #3,d0
    3b20:	|     \-> asr.l #2,d0
    3b22:	|         add.l d0,d0
    3b24:	|         add.l d0,d0
    3b26:	|         add.l d1,d0
    3b28:	|         move.l d0,1a6d8 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3b2e:	|         move.l 1a6d4 <CstViewBuffer>,d1
    3b34:	|         move.l 64(sp),d0
    3b38:	|     /-- bpl.s 3b3c <CstReserveBackdrop+0x294>
    3b3a:	|     |   addq.l #3,d0
    3b3c:	|     \-> asr.l #2,d0
    3b3e:	|         add.l d0,d0
    3b40:	|         add.l d0,d0
    3b42:	|         add.l d1,d0
    3b44:	|         move.l d0,1a6d4 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3b4a:	|         move.l 1a6c6 <CstBackDrop>,d0
    3b50:	|         clr.l -(sp)
    3b52:	|         pea 5 <_start+0x5>
    3b56:	|         pea 100 <copyString+0x48>
    3b5a:	|         pea 140 <decodeFilename+0x28>
    3b5e:	|         pea 18062 <PutChar+0x558>
    3b64:	|         move.l d0,-(sp)
    3b66:	|         jsr 1711e <debug_register_bitmap>
    3b6c:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3b70:	|         move.l 68(sp),d0
    3b74:	|         movea.w d0,a1
    3b76:	|         move.l 64(sp),d0
    3b7a:	|         lsl.w #3,d0
    3b7c:	|         movea.w d0,a0
    3b7e:	|         move.l 1a6d8 <CstDrawBuffer>,d0
    3b84:	|         clr.l -(sp)
    3b86:	|         pea 5 <_start+0x5>
    3b8a:	|         move.l a1,-(sp)
    3b8c:	|         move.l a0,-(sp)
    3b8e:	|         pea 18072 <PutChar+0x568>
    3b94:	|         move.l d0,-(sp)
    3b96:	|         jsr 1711e <debug_register_bitmap>
    3b9c:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3ba0:	|         move.l 68(sp),d0
    3ba4:	|         movea.w d0,a1
    3ba6:	|         move.l 64(sp),d0
    3baa:	|         lsl.w #3,d0
    3bac:	|         movea.w d0,a0
    3bae:	|         move.l 1a6d4 <CstViewBuffer>,d0
    3bb4:	|         clr.l -(sp)
    3bb6:	|         pea 5 <_start+0x5>
    3bba:	|         move.l a1,-(sp)
    3bbc:	|         move.l a0,-(sp)
    3bbe:	|         pea 18081 <PutChar+0x577>
    3bc4:	|         move.l d0,-(sp)
    3bc6:	|         jsr 1711e <debug_register_bitmap>
    3bcc:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3bd0:	|         move.l 1a6ce <CstCopperList>,d0
    3bd6:	|     /-- beq.s 3be8 <CstReserveBackdrop+0x340>
    3bd8:	|     |   move.l 1a6d8 <CstDrawBuffer>,d0
    3bde:	|     +-- beq.s 3be8 <CstReserveBackdrop+0x340>
    3be0:	|     |   move.l 1a6d4 <CstViewBuffer>,d0
    3be6:	|  /--|-- bne.s 3bfa <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3be8:	|  |  \-> pea 18090 <PutChar+0x586>
    3bee:	|  |      jsr 17036 <KPrintF>
    3bf4:	|  |      addq.l #4,sp
    return FALSE;
    3bf6:	|  |      clr.w d0
    3bf8:	+--|----- bra.s 3c28 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3bfa:	|  \----> pea 180bd <PutChar+0x5b3>
    3c00:	|         jsr 17036 <KPrintF>
    3c06:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3c08:	|         move.l 1a6ce <CstCopperList>,d0
    3c0e:	|         move.l d0,-(sp)
    3c10:	|         jsr 375c <CstSetCl>
    3c16:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3c18:	|         pea 180e4 <PutChar+0x5da>
    3c1e:	|         jsr 17036 <KPrintF>
    3c24:	|         addq.l #4,sp
  return TRUE;
    3c26:	|         moveq #1,d0

}
    3c28:	\-------> movea.l (sp)+,a6
    3c2a:	          lea 56(sp),sp
    3c2e:	          rts

00003c30 <CstUnfreeze>:

void CstUnfreeze() {
    3c30:	       lea -24(sp),sp
    3c34:	       move.l a6,-(sp)
    3c36:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3c38:	       pea 18107 <PutChar+0x5fd>
    3c3e:	       jsr 17036 <KPrintF>
    3c44:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3c46:	       move.l 1a6f8 <winWidth>,d0
    3c4c:	       lsr.l #3,d0
    3c4e:	       move.l d0,d1
    3c50:	       move.l 1a6fc <winHeight>,d0
    3c56:	       move.l d0,d0
    3c58:	       muls.w d0,d1
    3c5a:	       move.w d1,d0
    3c5c:	       add.w d0,d0
    3c5e:	       add.w d0,d0
    3c60:	       move.w d0,d2
    3c62:	       add.w d1,d2
    3c64:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3c68:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3c70:	       move.l 1a6fc <winHeight>,d0
    3c76:	       move.l d0,d0
    3c78:	       movea.w d0,a1
    3c7a:	       move.l 1a6f8 <winWidth>,d0
    3c80:	       move.l d0,d0
    3c82:	       movea.w d0,a0
    3c84:	       move.l 1a6ca <CstBackDropBackup>,d0
    3c8a:	       clr.l -(sp)
    3c8c:	       pea 5 <_start+0x5>
    3c90:	       move.l a1,-(sp)
    3c92:	       move.l a0,-(sp)
    3c94:	       pea 17cd9 <PutChar+0x1cf>
    3c9a:	       move.l d0,-(sp)
    3c9c:	       jsr 1711e <debug_register_bitmap>
    3ca2:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3ca6:	       move.l 1a6ca <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3cae:	       move.l 1a6c6 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3cb6:	       clr.l 20(sp)
    3cba:	   /-- bra.s 3ce0 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3cbc:	/--|-> move.l 28(sp),d1
    3cc0:	|  |   move.l d1,d0
    3cc2:	|  |   addq.l #4,d0
    3cc4:	|  |   move.l d0,28(sp)
    3cc8:	|  |   move.l 24(sp),d0
    3ccc:	|  |   move.l d0,d2
    3cce:	|  |   addq.l #4,d2
    3cd0:	|  |   move.l d2,24(sp)
    3cd4:	|  |   movea.l d1,a0
    3cd6:	|  |   move.l (a0),d1
    3cd8:	|  |   movea.l d0,a0
    3cda:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3cdc:	|  |   addq.l #1,20(sp)
    3ce0:	|  \-> move.w 18(sp),d0
    3ce4:	|      lsr.w #2,d0
    3ce6:	|      move.w d0,d0
    3ce8:	|      andi.l #65535,d0
    3cee:	|      cmp.l 20(sp),d0
    3cf2:	\----- bgt.s 3cbc <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3cf4:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3cfc:	       move.l 1a6f8 <winWidth>,d0
    3d02:	       lsr.l #4,d0
    3d04:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3d0a:	       move.l a0,d1
    3d0c:	       addq.l #2,d1
    3d0e:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3d14:	       move.l d0,d0
    3d16:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3d18:	       move.l 1a6fc <winHeight>,d0
    3d1e:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3d24:	       move.l a0,d1
    3d26:	       addq.l #2,d1
    3d28:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    3d2e:	       move.l d0,d0
    3d30:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3d32:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3d38:	       move.l a0,d0
    3d3a:	       addq.l #2,d0
    3d3c:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3d42:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3d44:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3d4a:	       move.l a0,d0
    3d4c:	       addq.l #2,d0
    3d4e:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3d54:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3d56:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3d5c:	       move.l a0,d0
    3d5e:	       addq.l #2,d0
    3d60:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    3d66:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3d68:	       move.l 1a6ca <CstBackDropBackup>,d0
    3d6e:	   /-- bne.s 3d88 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3d70:	   |   move.l 1a6ca <CstBackDropBackup>,10(sp)
    3d78:	   |   move.l 1a7a4 <SysBase>,d0
    3d7e:	   |   movea.l d0,a6
    3d80:	   |   movea.l 10(sp),a1
    3d84:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3d88:	   \-> pea 17ce8 <PutChar+0x1de>
    3d8e:	       jsr 17036 <KPrintF>
    3d94:	       addq.l #4,sp

}
    3d96:	       nop
    3d98:	       move.l (sp)+,d2
    3d9a:	       movea.l (sp)+,a6
    3d9c:	       lea 24(sp),sp
    3da0:	       rts

00003da2 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3da2:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3da6:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3daa:	       tst.l 24(sp)
    3dae:	   /-- bge.s 3db4 <drawLine+0x12>
    3db0:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3db4:	   \-> tst.l 28(sp)
    3db8:	   /-- bge.s 3dbe <drawLine+0x1c>
    3dba:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3dbe:	   \-> tst.l 32(sp)
    3dc2:	   /-- bge.s 3dc8 <drawLine+0x26>
    3dc4:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3dc8:	   \-> tst.l 36(sp)
    3dcc:	   /-- bge.s 3dd2 <drawLine+0x30>
    3dce:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3dd2:	   \-> move.l 1a840 <sceneWidth>,d0
    3dd8:	       cmp.l 24(sp),d0
    3ddc:	   /-- bge.s 3dec <drawLine+0x4a>
    3dde:	   |   move.l 1a840 <sceneWidth>,d0
    3de4:	   |   move.l d0,d1
    3de6:	   |   subq.l #1,d1
    3de8:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3dec:	   \-> move.l 1a840 <sceneWidth>,d0
    3df2:	       cmp.l 32(sp),d0
    3df6:	   /-- bge.s 3e06 <drawLine+0x64>
    3df8:	   |   move.l 1a840 <sceneWidth>,d0
    3dfe:	   |   move.l d0,d1
    3e00:	   |   subq.l #1,d1
    3e02:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3e06:	   \-> move.l 1a844 <sceneHeight>,d0
    3e0c:	       cmp.l 28(sp),d0
    3e10:	   /-- bge.s 3e20 <drawLine+0x7e>
    3e12:	   |   move.l 1a844 <sceneHeight>,d0
    3e18:	   |   move.l d0,d1
    3e1a:	   |   subq.l #1,d1
    3e1c:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3e20:	   \-> move.l 1a844 <sceneHeight>,d0
    3e26:	       cmp.l 36(sp),d0
    3e2a:	   /-- bge.s 3e3a <drawLine+0x98>
    3e2c:	   |   move.l 1a844 <sceneHeight>,d0
    3e32:	   |   move.l d0,d1
    3e34:	   |   subq.l #1,d1
    3e36:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3e3a:	   \-> move.l 24(sp),d0
    3e3e:	       cmp.l 32(sp),d0
    3e42:	/----- ble.s 3e5e <drawLine+0xbc>
		x = x2; 
    3e44:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3e4a:	|      tst.w 10(sp)
    3e4e:	|      seq d0
    3e50:	|      neg.b d0
    3e52:	|      move.b d0,d0
    3e54:	|      andi.w #255,d0
    3e58:	|      move.w d0,10(sp)
    3e5c:	|  /-- bra.s 3e64 <drawLine+0xc2>
	} else x = x1;
    3e5e:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3e64:	   \-> move.l 28(sp),d1
    3e68:	       cmp.l 36(sp),d1
    3e6c:	/----- ble.s 3e88 <drawLine+0xe6>
		y = y2; 
    3e6e:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3e74:	|      tst.w 10(sp)
    3e78:	|      seq d0
    3e7a:	|      neg.b d0
    3e7c:	|      move.b d0,d0
    3e7e:	|      andi.w #255,d0
    3e82:	|      move.w d0,10(sp)
    3e86:	|  /-- bra.s 3e8e <drawLine+0xec>
	} else y = y1;	
    3e88:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3e8e:	   \-> move.l 32(sp),d0
    3e92:	       sub.l 24(sp),d0
    3e96:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3e9a:	       move.l 6(sp),d0
    3e9e:	   /-- bpl.s 3ea2 <drawLine+0x100>
    3ea0:	   |   neg.l d0
    3ea2:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    3ea6:	       move.l 36(sp),d1
    3eaa:	       sub.l 28(sp),d1
    3eae:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    3eb2:	       move.l 2(sp),d0
    3eb6:	   /-- bpl.s 3eba <drawLine+0x118>
    3eb8:	   |   neg.l d0
    3eba:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    3ebe:	       tst.l 6(sp)
    3ec2:	   /-- bne.s 3ee6 <drawLine+0x144>
		diffX = 1;
    3ec4:	   |   moveq #1,d0
    3ec6:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3eca:	   |   move.l 1a840 <sceneWidth>,d0
    3ed0:	   |   subq.l #1,d0
    3ed2:	   |   cmp.l 16(sp),d0
    3ed6:	   +-- bne.s 3ee6 <drawLine+0x144>
    3ed8:	   |   move.l 1a840 <sceneWidth>,d0
    3ede:	   |   move.l d0,d1
    3ee0:	   |   subq.l #2,d1
    3ee2:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3ee6:	   \-> tst.l 2(sp)
    3eea:	   /-- bne.s 3f0e <drawLine+0x16c>
		diffY = 1;
    3eec:	   |   moveq #1,d0
    3eee:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    3ef2:	   |   move.l 1a844 <sceneHeight>,d0
    3ef8:	   |   subq.l #1,d0
    3efa:	   |   cmp.l 12(sp),d0
    3efe:	   +-- bne.s 3f0e <drawLine+0x16c>
    3f00:	   |   move.l 1a844 <sceneHeight>,d0
    3f06:	   |   move.l d0,d1
    3f08:	   |   subq.l #2,d1
    3f0a:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3f0e:	   \-> pea 18132 <PutChar+0x628>
    3f14:	       jsr 17036 <KPrintF>
    3f1a:	       addq.l #4,sp
	
}
    3f1c:	       nop
    3f1e:	       lea 20(sp),sp
    3f22:	       rts

00003f24 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    3f24:	                      lea -24(sp),sp
    3f28:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    3f2a:	                      move.l 1a700 <firstTexture>,d0
    3f30:	/-------------------- beq.w 400e <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    3f34:	|                     clr.l 24(sp)
    3f38:	|     /-------------- bra.w 4002 <deleteTextures+0xde>
			BOOL found = FALSE;
    3f3c:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    3f40:	|  |  |               move.l 1a700 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    3f48:	|  |  |               movea.l 20(sp),a0
    3f4c:	|  |  |               move.l (a0),d1
    3f4e:	|  |  |               move.l 24(sp),d0
    3f52:	|  |  |               add.l d0,d0
    3f54:	|  |  |               add.l d0,d0
    3f56:	|  |  |               movea.l 36(sp),a0
    3f5a:	|  |  |               adda.l d0,a0
    3f5c:	|  |  |               move.l (a0),d0
    3f5e:	|  |  |               cmp.l d1,d0
    3f60:	|  |  |  /----------- bne.w 3ff4 <deleteTextures+0xd0>
				found = TRUE;
    3f64:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    3f6a:	|  |  |  |            movea.l 20(sp),a0
    3f6e:	|  |  |  |            move.l 12(a0),d0
    3f72:	|  |  |  |            move.l d0,1a700 <firstTexture>
				FreeVec(list);
    3f78:	|  |  |  |            move.l 20(sp),6(sp)
    3f7e:	|  |  |  |            move.l 1a7a4 <SysBase>,d0
    3f84:	|  |  |  |            movea.l d0,a6
    3f86:	|  |  |  |            movea.l 6(sp),a1
    3f8a:	|  |  |  |            jsr -690(a6)
				continue;
    3f8e:	|  |  |  |  /-------- bra.s 3ffe <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    3f90:	|  |  |  |  |  /----> movea.l 20(sp),a0
    3f94:	|  |  |  |  |  |      movea.l 12(a0),a0
    3f98:	|  |  |  |  |  |      move.l (a0),d1
    3f9a:	|  |  |  |  |  |      move.l 24(sp),d0
    3f9e:	|  |  |  |  |  |      add.l d0,d0
    3fa0:	|  |  |  |  |  |      add.l d0,d0
    3fa2:	|  |  |  |  |  |      movea.l 36(sp),a0
    3fa6:	|  |  |  |  |  |      adda.l d0,a0
    3fa8:	|  |  |  |  |  |      move.l (a0),d0
    3faa:	|  |  |  |  |  |      cmp.l d1,d0
    3fac:	|  |  |  |  |  |  /-- bne.s 3fea <deleteTextures+0xc6>
					found = TRUE;
    3fae:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    3fb4:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3fb8:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    3fbe:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3fc2:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    3fc6:	|  |  |  |  |  |  |   move.l 12(a0),d0
    3fca:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3fce:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    3fd2:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    3fd8:	|  |  |  |  |  |  |   move.l 1a7a4 <SysBase>,d0
    3fde:	|  |  |  |  |  |  |   movea.l d0,a6
    3fe0:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    3fe4:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    3fe8:	|  |  |  |  +--|--|-- bra.s 3ffe <deleteTextures+0xda>
				}
				list = list->next;
    3fea:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    3fee:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    3ff4:	|  |  |  \--|--|----> movea.l 20(sp),a0
    3ff8:	|  |  |     |  |      move.l 12(a0),d0
    3ffc:	|  |  |     |  \----- bne.s 3f90 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    3ffe:	|  |  |     \-------> addq.l #1,24(sp)
    4002:	|  |  \-------------> move.l 24(sp),d0
    4006:	|  |                  cmp.l 32(sp),d0
    400a:	|  \----------------- bcs.w 3f3c <deleteTextures+0x18>
			}
		}
	}
}
    400e:	\-------------------> nop
    4010:	                      movea.l (sp)+,a6
    4012:	                      lea 24(sp),sp
    4016:	                      rts

00004018 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4018:	subq.l #4,sp
    401a:	move.l 8(sp),d0
    401e:	move.w d0,d0
    4020:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4024:	pea 18155 <PutChar+0x64b>
    402a:	jsr 17036 <KPrintF>
    4030:	addq.l #4,sp
}
    4032:	nop
    4034:	addq.l #4,sp
    4036:	rts

00004038 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4038:	       moveq #-1,d0
    403a:	       cmp.l 4(sp),d0
    403e:	   /-- bne.s 4044 <resourceNameFromNum+0xc>
    4040:	   |   moveq #0,d0
    4042:	/--|-- bra.s 407c <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4044:	|  \-> move.l 1a780 <numResourceNames>,d0
    404a:	|  /-- bne.s 4054 <resourceNameFromNum+0x1c>
    404c:	|  |   move.l #98693,d0
    4052:	+--|-- bra.s 407c <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4054:	|  \-> move.l 1a780 <numResourceNames>,d0
    405a:	|      cmp.l 4(sp),d0
    405e:	|  /-- ble.s 4076 <resourceNameFromNum+0x3e>
    4060:	|  |   move.l 1a738 <allResourceNames>,d1
    4066:	|  |   move.l 4(sp),d0
    406a:	|  |   add.l d0,d0
    406c:	|  |   add.l d0,d0
    406e:	|  |   movea.l d1,a0
    4070:	|  |   adda.l d0,a0
    4072:	|  |   move.l (a0),d0
    4074:	+--|-- bra.s 407c <resourceNameFromNum+0x44>
	return "Unknown resource";
    4076:	|  \-> move.l #98702,d0
    407c:	\----> rts

0000407e <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    407e:	          lea -44(sp),sp
    4082:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4086:	          move.l #320,1a6f8 <winWidth>
    winHeight = 256;
    4090:	          move.l #256,1a6fc <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    409a:	          tst.l 60(sp)
    409e:	      /-- bne.s 40b6 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    40a0:	      |   pea 1819f <PutChar+0x695>
    40a6:	      |   jsr b8 <copyString>
    40ac:	      |   addq.l #4,sp
    40ae:	      |   move.l d0,1a710 <bundleFolder>
    40b4:	   /--|-- bra.s 40cc <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    40b6:	   |  \-> movea.l 64(sp),a0
    40ba:	   |      move.l (a0),d0
    40bc:	   |      move.l d0,-(sp)
    40be:	   |      jsr b8 <copyString>
    40c4:	   |      addq.l #4,sp
    40c6:	   |      move.l d0,1a710 <bundleFolder>
	}
    
	int lastSlash = -1;
    40cc:	   \----> moveq #-1,d0
    40ce:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    40d2:	          clr.l 44(sp)
    40d6:	   /----- bra.s 40f8 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    40d8:	/--|----> move.l 1a710 <bundleFolder>,d1
    40de:	|  |      move.l 44(sp),d0
    40e2:	|  |      movea.l d1,a0
    40e4:	|  |      adda.l d0,a0
    40e6:	|  |      move.b (a0),d0
    40e8:	|  |      cmpi.b #47,d0
    40ec:	|  |  /-- bne.s 40f4 <main_sludge+0x76>
    40ee:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    40f4:	|  |  \-> addq.l #1,44(sp)
    40f8:	|  \----> move.l 1a710 <bundleFolder>,d1
    40fe:	|         move.l 44(sp),d0
    4102:	|         movea.l d1,a0
    4104:	|         adda.l d0,a0
    4106:	|         move.b (a0),d0
    4108:	\-------- bne.s 40d8 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    410a:	          move.l 1a710 <bundleFolder>,d0
    4110:	          move.l 48(sp),d1
    4114:	          addq.l #1,d1
    4116:	          movea.l d0,a0
    4118:	          adda.l d1,a0
    411a:	          clr.b (a0)

	if (argc > 1) {
    411c:	          moveq #1,d0
    411e:	          cmp.l 60(sp),d0
    4122:	      /-- bge.s 413e <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4124:	      |   move.l 60(sp),d0
    4128:	      |   addi.l #1073741823,d0
    412e:	      |   add.l d0,d0
    4130:	      |   add.l d0,d0
    4132:	      |   movea.l 64(sp),a0
    4136:	      |   adda.l d0,a0
    4138:	      |   move.l (a0),52(sp)
    413c:	   /--|-- bra.s 4198 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    413e:	   |  \-> move.l 1a710 <bundleFolder>,d0
    4144:	   |      pea 181a5 <PutChar+0x69b>
    414a:	   |      move.l d0,-(sp)
    414c:	   |      jsr 13b3a <joinStrings>
    4152:	   |      addq.l #8,sp
    4154:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4158:	   |      move.l 52(sp),-(sp)
    415c:	   |      jsr 13a34 <fileExists>
    4162:	   |      addq.l #4,sp
    4164:	   |      tst.b d0
    4166:	   +----- bne.s 4198 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4168:	   |      move.l 52(sp),40(sp)
    416e:	   |      move.l 1a7a4 <SysBase>,d0
    4174:	   |      movea.l d0,a6
    4176:	   |      movea.l 40(sp),a1
    417a:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    417e:	   |      move.l 1a710 <bundleFolder>,d0
    4184:	   |      pea 181b2 <PutChar+0x6a8>
    418a:	   |      move.l d0,-(sp)
    418c:	   |      jsr 13b3a <joinStrings>
    4192:	   |      addq.l #8,sp
    4194:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4198:	   \----> pea 181bb <PutChar+0x6b1>
    419e:	          jsr 17036 <KPrintF>
    41a4:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    41a6:	          move.l 52(sp),-(sp)
    41aa:	          jsr 13a34 <fileExists>
    41b0:	          addq.l #4,sp
    41b2:	          tst.b d0
    41b4:	      /-- bne.s 420c <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    41b6:	      |   move.l 1a7ac <DOSBase>,d0
    41bc:	      |   movea.l d0,a6
    41be:	      |   jsr -60(a6)
    41c2:	      |   move.l d0,28(sp)
    41c6:	      |   move.l 28(sp),d0
    41ca:	      |   move.l d0,24(sp)
    41ce:	      |   move.l #98747,20(sp)
    41d6:	      |   moveq #21,d0
    41d8:	      |   move.l d0,16(sp)
    41dc:	      |   move.l 1a7ac <DOSBase>,d0
    41e2:	      |   movea.l d0,a6
    41e4:	      |   move.l 24(sp),d1
    41e8:	      |   move.l 20(sp),d2
    41ec:	      |   move.l 16(sp),d3
    41f0:	      |   jsr -48(a6)
    41f4:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    41f8:	      |   pea 181bb <PutChar+0x6b1>
    41fe:	      |   jsr 17036 <KPrintF>
    4204:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4206:	      |   moveq #0,d0
    4208:	/-----|-- bra.w 4404 <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    420c:	|     \-> pea 181d1 <PutChar+0x6c7>
    4212:	|         jsr 17036 <KPrintF>
    4218:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    421a:	|         move.l 52(sp),-(sp)
    421e:	|         jsr 440e <setGameFilePath>
    4224:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4226:	|         move.l 52(sp),-(sp)
    422a:	|         jsr 59bc <initSludge>
    4230:	|         addq.l #4,sp
    4232:	|         tst.w d0
    4234:	|     /-- bne.s 423c <main_sludge+0x1be>
    4236:	|     |   moveq #0,d0
    4238:	+-----|-- bra.w 4404 <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    423c:	|     \-> move.l 1a6f8 <winWidth>,d0
    4242:	|         cmpi.l #320,d0
    4248:	|     /-- bne.s 4258 <main_sludge+0x1da>
    424a:	|     |   move.l 1a6fc <winHeight>,d0
    4250:	|     |   cmpi.l #256,d0
    4256:	|  /--|-- beq.s 427a <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4258:	|  |  \-> pea 181e2 <PutChar+0x6d8>
    425e:	|  |      jsr 17036 <KPrintF>
    4264:	|  |      addq.l #4,sp
		winWidth = 320;
    4266:	|  |      move.l #320,1a6f8 <winWidth>
		winHeight = 256;
    4270:	|  |      move.l #256,1a6fc <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    427a:	|  \----> pea 1825f <PutChar+0x755>
    4280:	|         jsr 17036 <KPrintF>
    4286:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4288:	|         move.l 1a6fc <winHeight>,d0
    428e:	|         move.l d0,d1
    4290:	|         move.l 1a6f8 <winWidth>,d0
    4296:	|         move.l d1,-(sp)
    4298:	|         move.l d0,-(sp)
    429a:	|         jsr d256 <resizeBackdrop>
    42a0:	|         addq.l #8,sp
    42a2:	|         tst.w d0
    42a4:	|     /-- bne.s 42ba <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    42a6:	|     |   pea 18272 <PutChar+0x768>
    42ac:	|     |   jsr 17036 <KPrintF>
    42b2:	|     |   addq.l #4,sp
		return FALSE;
    42b4:	|     |   moveq #0,d0
    42b6:	+-----|-- bra.w 4404 <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    42ba:	|     \-> pea 18298 <PutChar+0x78e>
    42c0:	|         jsr 17036 <KPrintF>
    42c6:	|         addq.l #4,sp
	if (! initPeople ())
    42c8:	|         jsr a842 <initPeople>
    42ce:	|         tst.w d0
    42d0:	|     /-- bne.s 42e6 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    42d2:	|     |   pea 182a5 <PutChar+0x79b>
    42d8:	|     |   jsr 17036 <KPrintF>
    42de:	|     |   addq.l #4,sp
		return FALSE;
    42e0:	|     |   moveq #0,d0
    42e2:	+-----|-- bra.w 4404 <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    42e6:	|     \-> pea 182c6 <PutChar+0x7bc>
    42ec:	|         jsr 17036 <KPrintF>
    42f2:	|         addq.l #4,sp
	if (! initFloor ())
    42f4:	|         jsr 163ec <initFloor>
    42fa:	|         tst.w d0
    42fc:	|     /-- bne.s 4312 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    42fe:	|     |   pea 182d2 <PutChar+0x7c8>
    4304:	|     |   jsr 17036 <KPrintF>
    430a:	|     |   addq.l #4,sp
		
		return FALSE;
    430c:	|     |   moveq #0,d0
    430e:	+-----|-- bra.w 4404 <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    4312:	|     \-> pea 182f2 <PutChar+0x7e8>
    4318:	|         jsr 17036 <KPrintF>
    431e:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4320:	|         jsr d412 <initObjectTypes>
    4326:	|         tst.w d0
    4328:	|     /-- bne.s 433e <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    432a:	|     |   pea 18303 <PutChar+0x7f9>
    4330:	|     |   jsr 17036 <KPrintF>
    4336:	|     |   addq.l #4,sp
		return FALSE;
    4338:	|     |   moveq #0,d0
    433a:	+-----|-- bra.w 4404 <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    433e:	|     \-> pea 18329 <PutChar+0x81f>
    4344:	|         jsr 17036 <KPrintF>
    434a:	|         addq.l #4,sp
	initSpeech ();
    434c:	|         jsr 7dde <initSpeech>
	KPrintF("Init status bar\n");
    4352:	|         pea 18336 <PutChar+0x82c>
    4358:	|         jsr 17036 <KPrintF>
    435e:	|         addq.l #4,sp
	initStatusBar ();
    4360:	|         jsr 78a2 <initStatusBar>

	KPrintF("Get numbered string\n");
    4366:	|         pea 18347 <PutChar+0x83d>
    436c:	|         jsr 17036 <KPrintF>
    4372:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4374:	|         pea 1 <_start+0x1>
    4378:	|         jsr 6bb2 <getNumberedString>
    437e:	|         addq.l #4,sp
    4380:	|         move.l d0,1a708 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4386:	|         pea 1835c <PutChar+0x852>
    438c:	|         jsr 17036 <KPrintF>
    4392:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4394:	|         move.l 1a774 <noStack>,d0
    439a:	|         pea 1 <_start+0x1>
    439e:	|         move.l d0,-(sp)
    43a0:	|         clr.l -(sp)
    43a2:	|         clr.l -(sp)
    43a4:	|         clr.l -(sp)
    43a6:	|         jsr 6a08 <startNewFunctionNum>
    43ac:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    43b0:	|         pea 18374 <PutChar+0x86a>
    43b6:	|         jsr 17036 <KPrintF>
    43bc:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    43be:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    43c6:	|         clr.l 1a714 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    43cc:	|     /-- bra.s 43e6 <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    43ce:	|  /--|-> jsr 6998 <sludgeDisplay>
		CsiCheckInput();
    43d4:	|  |  |   jsr cd8a <CsiCheckInput>
		handleInput();
    43da:	|  |  |   jsr 5756 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    43e0:	|  |  |   jsr 16f6a <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    43e6:	|  |  \-> move.l 1a714 <weAreDoneSoQuit>,d0
    43ec:	|  \----- beq.s 43ce <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    43ee:	|         move.l 52(sp),32(sp)
    43f4:	|         move.l 1a7a4 <SysBase>,d0
    43fa:	|         movea.l d0,a6
    43fc:	|         movea.l 32(sp),a1
    4400:	|         jsr -690(a6)
}
    4404:	\-------> movem.l (sp)+,d2-d3/a6
    4408:	          lea 44(sp),sp
    440c:	          rts

0000440e <setGameFilePath>:

void setGameFilePath (char * f) {
    440e:	          lea -1104(sp),sp
    4412:	          move.l a6,-(sp)
    4414:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4416:	          move.l #1112,d0
    441c:	          add.l sp,d0
    441e:	          addi.l #-1102,d0
    4424:	          move.l d0,1100(sp)
    4428:	          move.l #998,1096(sp)
    4430:	          move.l 1a7ac <DOSBase>,d0
    4436:	          movea.l d0,a6
    4438:	          move.l 1100(sp),d1
    443c:	          move.l 1096(sp),d2
    4440:	          jsr -564(a6)
    4444:	          move.w d0,1094(sp)
    4448:	          move.w 1094(sp),d0
    444c:	      /-- bne.s 445c <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    444e:	      |   pea 18387 <PutChar+0x87d>
    4454:	      |   jsr 17036 <KPrintF>
    445a:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    445c:	      \-> moveq #-1,d0
    445e:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4462:	          clr.l 1104(sp)
    4466:	   /----- bra.s 4484 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4468:	/--|----> move.l 1104(sp),d0
    446c:	|  |      movea.l 1116(sp),a0
    4470:	|  |      adda.l d0,a0
    4472:	|  |      move.b (a0),d0
    4474:	|  |      cmpi.b #47,d0
    4478:	|  |  /-- bne.s 4480 <setGameFilePath+0x72>
    447a:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4480:	|  |  \-> addq.l #1,1104(sp)
    4484:	|  \----> move.l 1104(sp),d0
    4488:	|         movea.l 1116(sp),a0
    448c:	|         adda.l d0,a0
    448e:	|         move.b (a0),d0
    4490:	\-------- bne.s 4468 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4492:	          moveq #-1,d0
    4494:	          cmp.l 1108(sp),d0
    4498:	   /----- beq.s 4512 <setGameFilePath+0x104>
		f[got] = 0;	
    449a:	   |      move.l 1108(sp),d0
    449e:	   |      movea.l 1116(sp),a0
    44a2:	   |      adda.l d0,a0
    44a4:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    44a6:	   |      move.l 1116(sp),1090(sp)
    44ac:	   |      moveq #-2,d0
    44ae:	   |      move.l d0,1086(sp)
    44b2:	   |      move.l 1a7ac <DOSBase>,d0
    44b8:	   |      movea.l d0,a6
    44ba:	   |      move.l 1090(sp),d1
    44be:	   |      move.l 1086(sp),d2
    44c2:	   |      jsr -84(a6)
    44c6:	   |      move.l d0,1082(sp)
    44ca:	   |      move.l 1082(sp),d0
    44ce:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    44d2:	   |      move.l 1078(sp),1074(sp)
    44d8:	   |      move.l 1a7ac <DOSBase>,d0
    44de:	   |      movea.l d0,a6
    44e0:	   |      move.l 1074(sp),d1
    44e4:	   |      jsr -126(a6)
    44e8:	   |      move.l d0,1070(sp)
    44ec:	   |      move.l 1070(sp),d0
    44f0:	   |  /-- bne.s 4504 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    44f2:	   |  |   move.l 1116(sp),-(sp)
    44f6:	   |  |   pea 183ad <PutChar+0x8a3>
    44fc:	   |  |   jsr 17036 <KPrintF>
    4502:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4504:	   |  \-> move.l 1108(sp),d0
    4508:	   |      movea.l 1116(sp),a0
    450c:	   |      adda.l d0,a0
    450e:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4512:	   \----> move.l #400,1066(sp)
    451a:	          clr.l 1062(sp)
    451e:	          move.l 1a7a4 <SysBase>,d0
    4524:	          movea.l d0,a6
    4526:	          move.l 1066(sp),d0
    452a:	          move.l 1062(sp),d1
    452e:	          jsr -684(a6)
    4532:	          move.l d0,1058(sp)
    4536:	          move.l 1058(sp),d0
    453a:	          move.l d0,1a70c <gamePath>
	if (gamePath==0) {
    4540:	          move.l 1a70c <gamePath>,d0
    4546:	      /-- bne.s 455a <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4548:	      |   pea 183e0 <PutChar+0x8d6>
    454e:	      |   jsr 17036 <KPrintF>
    4554:	      |   addq.l #4,sp
    4556:	   /--|-- bra.w 4642 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    455a:	   |  \-> move.l 1a70c <gamePath>,1054(sp)
    4562:	   |      moveq #-2,d0
    4564:	   |      move.l d0,1050(sp)
    4568:	   |      move.l 1a7ac <DOSBase>,d0
    456e:	   |      movea.l d0,a6
    4570:	   |      move.l 1054(sp),d1
    4574:	   |      move.l 1050(sp),d2
    4578:	   |      jsr -84(a6)
    457c:	   |      move.l d0,1046(sp)
    4580:	   |      move.l 1046(sp),d0
    4584:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4588:	   |      move.l 1042(sp),1038(sp)
    458e:	   |      move.l 1a7ac <DOSBase>,d0
    4594:	   |      movea.l d0,a6
    4596:	   |      move.l 1038(sp),d1
    459a:	   |      jsr -126(a6)
    459e:	   |      move.l d0,1034(sp)
    45a2:	   |      move.l 1034(sp),d0
    45a6:	   |  /-- bne.s 45b6 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    45a8:	   |  |   pea 1841b <PutChar+0x911>
    45ae:	   |  |   jsr 17036 <KPrintF>
    45b4:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    45b6:	   |  \-> move.l #1112,d0
    45bc:	   |      add.l sp,d0
    45be:	   |      addi.l #-1102,d0
    45c4:	   |      move.l d0,1030(sp)
    45c8:	   |      moveq #-2,d0
    45ca:	   |      move.l d0,1026(sp)
    45ce:	   |      move.l 1a7ac <DOSBase>,d0
    45d4:	   |      movea.l d0,a6
    45d6:	   |      move.l 1030(sp),d1
    45da:	   |      move.l 1026(sp),d2
    45de:	   |      jsr -84(a6)
    45e2:	   |      move.l d0,1022(sp)
    45e6:	   |      move.l 1022(sp),d0
    45ea:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    45ee:	   |      move.l 1042(sp),1018(sp)
    45f4:	   |      move.l 1a7ac <DOSBase>,d0
    45fa:	   |      movea.l d0,a6
    45fc:	   |      move.l 1018(sp),d1
    4600:	   |      jsr -126(a6)
    4604:	   |      move.l d0,1014(sp)
    4608:	   |      move.l 1014(sp),d0
    460c:	   |  /-- bne.s 4622 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    460e:	   |  |   moveq #10,d0
    4610:	   |  |   add.l sp,d0
    4612:	   |  |   move.l d0,-(sp)
    4614:	   |  |   pea 18447 <PutChar+0x93d>
    461a:	   |  |   jsr 17036 <KPrintF>
    4620:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4622:	   |  \-> move.l 1a70c <gamePath>,d0
    4628:	   +----- beq.s 4642 <setGameFilePath+0x234>
    462a:	   |      move.l 1a70c <gamePath>,1010(sp)
    4632:	   |      move.l 1a7a4 <SysBase>,d0
    4638:	   |      movea.l d0,a6
    463a:	   |      movea.l 1010(sp),a1
    463e:	   |      jsr -690(a6)
}
    4642:	   \----> move.l (sp)+,d2
    4644:	          movea.l (sp)+,a6
    4646:	          lea 1104(sp),sp
    464a:	          rts

0000464c <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    464c:	/-------> lea -16(sp),sp
    4650:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4652:	|         move.l 24(sp),-(sp)
    4656:	|         jsr 677a <pauseFunction>
    465c:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    465e:	|     /-- bra.s 4670 <abortFunction+0x24>
    4660:	|  /--|-> moveq #24,d0
    4662:	|  |  |   add.l 24(sp),d0
    4666:	|  |  |   move.l d0,-(sp)
    4668:	|  |  |   jsr 14f92 <trimStack>
    466e:	|  |  |   addq.l #4,sp
    4670:	|  |  \-> movea.l 24(sp),a0
    4674:	|  |      move.l 24(a0),d0
    4678:	|  \----- bne.s 4660 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    467a:	|         movea.l 24(sp),a0
    467e:	|         move.l 4(a0),12(sp)
    4684:	|         move.l 1a7a4 <SysBase>,d0
    468a:	|         movea.l d0,a6
    468c:	|         movea.l 12(sp),a1
    4690:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4694:	|         clr.l 16(sp)
    4698:	|     /-- bra.s 46b8 <abortFunction+0x6c>
    469a:	|  /--|-> movea.l 24(sp),a0
    469e:	|  |  |   move.l 20(a0),d1
    46a2:	|  |  |   move.l 16(sp),d0
    46a6:	|  |  |   lsl.l #3,d0
    46a8:	|  |  |   add.l d1,d0
    46aa:	|  |  |   move.l d0,-(sp)
    46ac:	|  |  |   jsr 1485c <unlinkVar>
    46b2:	|  |  |   addq.l #4,sp
    46b4:	|  |  |   addq.l #1,16(sp)
    46b8:	|  |  \-> movea.l 24(sp),a0
    46bc:	|  |      move.l 8(a0),d0
    46c0:	|  |      cmp.l 16(sp),d0
    46c4:	|  \----- bgt.s 469a <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    46c6:	|         movea.l 24(sp),a0
    46ca:	|         move.l 20(a0),8(sp)
    46d0:	|         move.l 1a7a4 <SysBase>,d0
    46d6:	|         movea.l d0,a6
    46d8:	|         movea.l 8(sp),a1
    46dc:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    46e0:	|         moveq #28,d0
    46e2:	|         add.l 24(sp),d0
    46e6:	|         move.l d0,-(sp)
    46e8:	|         jsr 1485c <unlinkVar>
    46ee:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    46f0:	|         movea.l 24(sp),a0
    46f4:	|         move.l 40(a0),d0
    46f8:	|     /-- beq.s 470a <abortFunction+0xbe>
    46fa:	|     |   movea.l 24(sp),a0
    46fe:	|     |   move.l 40(a0),d0
    4702:	|     |   move.l d0,-(sp)
    4704:	\-----|-- jsr 464c <abortFunction>(pc)
    4708:	      |   addq.l #4,sp
	FreeVec(fun);
    470a:	      \-> move.l 24(sp),4(sp)
    4710:	          move.l 1a7a4 <SysBase>,d0
    4716:	          movea.l d0,a6
    4718:	          movea.l 4(sp),a1
    471c:	          jsr -690(a6)
	fun = NULL;
    4720:	          clr.l 24(sp)
}
    4724:	          nop
    4726:	          movea.l (sp)+,a6
    4728:	          lea 16(sp),sp
    472c:	          rts

0000472e <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    472e:	          subq.l #8,sp
	int n = 0;
    4730:	          clr.l 4(sp)
	*killedMyself = FALSE;
    4734:	          movea.l 20(sp),a0
    4738:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    473a:	          move.l 1a73c <allRunningFunctions>,(sp)
	while (fun) {
    4740:	   /----- bra.s 476e <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    4742:	/--|----> movea.l (sp),a0
    4744:	|  |      move.l (a0),d0
    4746:	|  |      cmp.l 12(sp),d0
    474a:	|  |  /-- bne.s 4768 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    474c:	|  |  |   movea.l (sp),a0
    474e:	|  |  |   move.w #1,54(a0)
			n++;
    4754:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    4758:	|  |  |   move.l (sp),d0
    475a:	|  |  |   cmp.l 16(sp),d0
    475e:	|  |  +-- bne.s 4768 <cancelAFunction+0x3a>
    4760:	|  |  |   movea.l 20(sp),a0
    4764:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    4768:	|  |  \-> movea.l (sp),a0
    476a:	|  |      move.l 44(a0),(sp)
	while (fun) {
    476e:	|  \----> tst.l (sp)
    4770:	\-------- bne.s 4742 <cancelAFunction+0x14>
	}
	return n;
    4772:	          move.l 4(sp),d0
}
    4776:	          addq.l #8,sp
    4778:	          rts

0000477a <completeTimers>:


void completeTimers () {
    477a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    477c:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    4782:	   /----- bra.s 4798 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    4784:	/--|----> movea.l (sp),a0
    4786:	|  |      move.b 56(a0),d0
    478a:	|  |  /-- bne.s 4792 <completeTimers+0x18>
    478c:	|  |  |   movea.l (sp),a0
    478e:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    4792:	|  |  \-> movea.l (sp),a0
    4794:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4798:	|  \----> tst.l (sp)
    479a:	\-------- bne.s 4784 <completeTimers+0xa>
	}
}
    479c:	          nop
    479e:	          nop
    47a0:	          addq.l #4,sp
    47a2:	          rts

000047a4 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    47a4:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    47a8:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    47ae:	                                                             movea.l 80(sp),a0
    47b2:	                                                             move.w 54(a0),d0
    47b6:	/----------------------------------------------------------- beq.w 5644 <continueFunction+0xea0>
		abortFunction (fun);
    47ba:	|                                                            move.l 80(sp),-(sp)
    47be:	|                                                            jsr 464c <abortFunction>
    47c4:	|                                                            addq.l #4,sp
		return TRUE;
    47c6:	|                                                            moveq #1,d0
    47c8:	|  /-------------------------------------------------------- bra.w 564e <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    47cc:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    47d2:	|  |  |                                                      movea.l 80(sp),a0
    47d6:	|  |  |                                                      move.l 4(a0),d1
    47da:	|  |  |                                                      movea.l 80(sp),a0
    47de:	|  |  |                                                      move.l 36(a0),d0
    47e2:	|  |  |                                                      lsl.l #3,d0
    47e4:	|  |  |                                                      movea.l d1,a0
    47e6:	|  |  |                                                      adda.l d0,a0
    47e8:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    47ee:	|  |  |                                                      movea.l 80(sp),a0
    47f2:	|  |  |                                                      move.l 4(a0),d1
    47f6:	|  |  |                                                      movea.l 80(sp),a0
    47fa:	|  |  |                                                      move.l 36(a0),d0
    47fe:	|  |  |                                                      lsl.l #3,d0
    4800:	|  |  |                                                      movea.l d1,a0
    4802:	|  |  |                                                      adda.l d0,a0
    4804:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    4808:	|  |  |                                                      moveq #41,d0
    480a:	|  |  |                                                      cmp.l 64(sp),d0
    480e:	|  |  |  /-------------------------------------------------- bcs.w 55f8 <continueFunction+0xe54>
    4812:	|  |  |  |                                                   move.l 64(sp),d0
    4816:	|  |  |  |                                                   add.l d0,d0
    4818:	|  |  |  |                                                   movea.l d0,a0
    481a:	|  |  |  |                                                   adda.l #18470,a0
    4820:	|  |  |  |                                                   move.w (a0),d0
    4822:	|  |  |  |                                                   jmp (4826 <continueFunction+0x82>,pc,d0.w)
    4826:	|  |  |  |                                                   bset d6,(a2)
    4828:	|  |  |  |                                                   ori.w #2670,(a4)
    482c:	|  |  |  |                                                   eori.w #2416,d6
    4830:	|  |  |  |                                                   bchg d4,d2
    4832:	|  |  |  |                                                   bclr d4,(a4)+
    4834:	|  |  |  |                                                   andi.l #181013194,d4
    483a:	|  |  |  |                                                   .short 0x0aca
    483c:	|  |  |  |                                                   .short 0x0aca
    483e:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    4846:	|  |  |  |                                                   .short 0x0aca
    4848:	|  |  |  |                                                   andi.w #906,-(a4)
    484c:	|  |  |  |                                                   bchg d1,196(a2)
    4850:	|  |  |  |                                                   bset d1,580(a4)
    4854:	|  |  |  |                                                   bclr d1,2576(a2)
    4858:	|  |  |  |                                                   andi.b #-56,2762(a2)
    485e:	|  |  |  |                                                   .short 0x0aca
    4860:	|  |  |  |                                                   eori.l #63572682,d0
    4866:	|  |  |  |                                                   .short 0x0aca
    4868:	|  |  |  |                                                   bchg d3,-(a2)
    486a:	|  |  |  |                                                   bchg #-36,(a2)
    486e:	|  |  |  |                                                   .short 0x08cc
    4870:	|  |  |  |                                                   addi.b #14,1038(a0)
    4876:	|  |  |  |                                                   .short 0x040e
    4878:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    487c:	|  |  |  |                                                   ori.w #8232,(a0)
    4880:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    4886:	|  |  |  |                                                   ori.w #12136,(a0)
    488a:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    4890:	|  |  |  |                                                   ori.w #12328,(a0)
    4894:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    489a:	|  |  |  |                                                   add.l 44(sp),d1
    489e:	|  |  |  |                                                   moveq #28,d0
    48a0:	|  |  |  |                                                   add.l 80(sp),d0
    48a4:	|  |  |  |                                                   move.l d1,-(sp)
    48a6:	|  |  |  |                                                   move.l d0,-(sp)
    48a8:	|  |  |  |                                                   jsr 14ac8 <copyVariable>
    48ae:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    48b0:	|  |  |  |                                                   move.l 80(sp),-(sp)
    48b4:	|  |  |  |                                                   jsr 5654 <finishFunction>
    48ba:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    48bc:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    48c2:	|  |  |  |                                                   move.l 80(sp),-(sp)
    48c6:	|  |  |  |                                                   jsr 67bc <restartFunction>
    48cc:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    48ce:	|  |  |  |  /----------------------------------------------- bra.w 562c <continueFunction+0xe88>
				finishFunction (fun);
    48d2:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    48d6:	|  |  |  |  |                                                jsr 5654 <finishFunction>
    48dc:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    48de:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    48e2:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    48e6:	|  |  |  |  +----------------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    48ea:	|  |  |  |  |                                                movea.l 80(sp),a0
    48ee:	|  |  |  |  |                                                move.l 28(a0),d0
    48f2:	|  |  |  |  |                                                moveq #2,d1
    48f4:	|  |  |  |  |                                                cmp.l d0,d1
    48f6:	|  |  |  |  |                                            /-- beq.s 4902 <continueFunction+0x15e>
    48f8:	|  |  |  |  |                                            |   moveq #4,d1
    48fa:	|  |  |  |  |                                            |   cmp.l d0,d1
    48fc:	|  |  |  |  |                                         /--|-- beq.s 4950 <continueFunction+0x1ac>
    48fe:	|  |  |  |  |                                /--------|--|-- bra.w 4a38 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    4902:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    4906:	|  |  |  |  |                                |        |      jsr 677a <pauseFunction>
    490c:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    490e:	|  |  |  |  |                                |        |      moveq #24,d0
    4910:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    4914:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    4918:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    491c:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    4920:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    4922:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    4926:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    492a:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    492c:	|  |  |  |  |                                |        |      jsr 6a08 <startNewFunctionNum>
    4932:	|  |  |  |  |                                |        |      lea 20(sp),sp
    4936:	|  |  |  |  |                                |        |      tst.l d0
    4938:	|  |  |  |  |                                |        |  /-- bne.s 4940 <continueFunction+0x19c>
    493a:	|  |  |  |  |                                |        |  |   clr.w d0
    493c:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 564e <continueFunction+0xeaa>
				fun = allRunningFunctions;
    4940:	|  |  |  |  |                                |        |  \-> move.l 1a73c <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4948:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    494c:	|  |  |  |  |                                |  /-----|----- bra.w 4a4c <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    4950:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    4954:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4958:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    495c:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4960:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    4962:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    4964:	|  |  |  |  |                                |  |            jsr 132f0 <callBuiltIn>
    496a:	|  |  |  |  |                                |  |            lea 12(sp),sp
    496e:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    4972:	|  |  |  |  |                                |  |            moveq #5,d0
    4974:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4978:	|  |  |  |  |                                |  |  /-------- bcs.w 4a34 <continueFunction+0x290>
    497c:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4980:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4982:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    4984:	|  |  |  |  |                                |  |  |         adda.l #18832,a0
    498a:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    498c:	|  |  |  |  |                                |  |  |         jmp (4990 <continueFunction+0x1ec>,pc,d0.w)
    4990:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4996:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    499a:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    49a0:	|  |  |  |  |                                |  |  |         .short 0x854f
    49a2:	|  |  |  |  |                                |  |  |         jsr 17036 <KPrintF>
    49a8:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    49aa:	|  |  |  |  |                                |  |  |         clr.w d0
    49ac:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 564e <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    49b0:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    49b4:	|  |  |  |  |                                |  |  |         jsr 677a <pauseFunction>
    49ba:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    49bc:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    49c0:	|  |  |  |  |                                |  |  |  /----- bra.s 4a36 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    49c2:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    49c6:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    49ca:	|  |  |  |  |                                |  |  |  +----- bra.s 4a36 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    49cc:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    49d0:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    49d6:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    49d8:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    49dc:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    49e0:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    49e4:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    49e6:	|  |  |  |  |                                |  |  |  |      jsr 14f00 <setVariable>
    49ec:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    49f0:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    49f4:	|  |  |  |  |                                |  |  |  |      jsr 677a <pauseFunction>
    49fa:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    49fc:	|  |  |  |  |                                |  |  |  |      move.l 1a774 <noStack>,d1
    4a02:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4a06:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4a08:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4a0a:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4a0e:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4a10:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4a12:	|  |  |  |  |                                |  |  |  |      jsr 6a08 <startNewFunctionNum>
    4a18:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    4a1c:	|  |  |  |  |                                |  |  |  |      tst.l d0
    4a1e:	|  |  |  |  |                                |  |  |  |  /-- bne.s 4a26 <continueFunction+0x282>
    4a20:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    4a22:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 564e <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4a26:	|  |  |  |  |                                |  |  |  |  \-> move.l 1a73c <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    4a2e:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    4a32:	|  |  |  |  |                                |  |  |  +----- bra.s 4a36 <continueFunction+0x292>

						default:
						break;
    4a34:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    4a36:	|  |  |  |  |                                |  +-----\----X bra.s 4a4c <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    4a38:	|  |  |  |  |                                \--|----------> pea 1859a <PutChar+0xa90>
    4a3e:	|  |  |  |  |                                   |            jsr 17036 <KPrintF>
    4a44:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    4a46:	|  |  |  |  |                                   |            clr.w d0
    4a48:	|  +--|--|--|-----------------------------------|----------- bra.w 564e <continueFunction+0xeaa>
			}
			break;
    4a4c:	|  |  |  |  +-----------------------------------\----------X bra.w 562c <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    4a50:	|  |  |  |  |                                                moveq #28,d0
    4a52:	|  |  |  |  |                                                add.l 80(sp),d0
    4a56:	|  |  |  |  |                                                clr.l -(sp)
    4a58:	|  |  |  |  |                                                clr.l -(sp)
    4a5a:	|  |  |  |  |                                                move.l d0,-(sp)
    4a5c:	|  |  |  |  |                                                jsr 14f00 <setVariable>
    4a62:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4a66:	|  |  |  |  +----------------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4a6a:	|  |  |  |  |                                                move.l 68(sp),d1
    4a6e:	|  |  |  |  |                                                moveq #28,d0
    4a70:	|  |  |  |  |                                                add.l 80(sp),d0
    4a74:	|  |  |  |  |                                                move.l d1,-(sp)
    4a76:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4a7a:	|  |  |  |  |                                                move.l d0,-(sp)
    4a7c:	|  |  |  |  |                                                jsr 14f00 <setVariable>
    4a82:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4a86:	|  |  |  |  +----------------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4a8a:	|  |  |  |  |                                                move.l 68(sp),d1
    4a8e:	|  |  |  |  |                                                moveq #28,d0
    4a90:	|  |  |  |  |                                                add.l 80(sp),d0
    4a94:	|  |  |  |  |                                                move.l d1,-(sp)
    4a96:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4a9a:	|  |  |  |  |                                                move.l d0,-(sp)
    4a9c:	|  |  |  |  |                                                jsr 14f00 <setVariable>
    4aa2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4aa6:	|  |  |  |  +----------------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4aaa:	|  |  |  |  |                                                moveq #28,d0
    4aac:	|  |  |  |  |                                                add.l 80(sp),d0
    4ab0:	|  |  |  |  |                                                movea.l 80(sp),a0
    4ab4:	|  |  |  |  |                                                movea.l 20(a0),a0
    4ab8:	|  |  |  |  |                                                move.l 68(sp),d1
    4abc:	|  |  |  |  |                                                lsl.l #3,d1
    4abe:	|  |  |  |  |                                                add.l a0,d1
    4ac0:	|  |  |  |  |                                                move.l d0,-(sp)
    4ac2:	|  |  |  |  |                                                move.l d1,-(sp)
    4ac4:	|  |  |  |  |                                                jsr 14ac8 <copyVariable>
    4aca:	|  |  |  |  |                                                addq.l #8,sp
    4acc:	|  |  |  |  |                                                tst.w d0
    4ace:	|  |  |  |  |  /-------------------------------------------- bne.w 560a <continueFunction+0xe66>
    4ad2:	|  |  |  |  |  |                                             clr.w d0
    4ad4:	|  +--|--|--|--|-------------------------------------------- bra.w 564e <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4ad8:	|  |  |  |  |  |                                             moveq #28,d0
    4ada:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4ade:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ae0:	|  |  |  |  |  |                                             jsr 14b4e <getBoolean>
    4ae6:	|  |  |  |  |  |                                             addq.l #4,sp
    4ae8:	|  |  |  |  |  |                                             tst.w d0
    4aea:	|  |  |  |  |  |                                      /----- beq.s 4b06 <continueFunction+0x362>
    4aec:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4af0:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4af4:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4af6:	|  |  |  |  |  |                                      |      jsr 14b4e <getBoolean>
    4afc:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4afe:	|  |  |  |  |  |                                      |      tst.w d0
    4b00:	|  |  |  |  |  |                                      +----- beq.s 4b06 <continueFunction+0x362>
    4b02:	|  |  |  |  |  |                                      |      moveq #1,d0
    4b04:	|  |  |  |  |  |                                      |  /-- bra.s 4b08 <continueFunction+0x364>
    4b06:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4b08:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4b0a:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4b0e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4b10:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4b14:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4b16:	|  |  |  |  |  |                                             jsr 14f00 <setVariable>
    4b1c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4b20:	|  |  |  |  |  |                                             moveq #24,d0
    4b22:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4b26:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4b28:	|  |  |  |  |  |                                             jsr 14f92 <trimStack>
    4b2e:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4b30:	|  |  |  |  +--|-------------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    4b34:	|  |  |  |  |  |                                             moveq #28,d0
    4b36:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4b3a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4b3c:	|  |  |  |  |  |                                             jsr 14b4e <getBoolean>
    4b42:	|  |  |  |  |  |                                             addq.l #4,sp
    4b44:	|  |  |  |  |  |                                             tst.w d0
    4b46:	|  |  |  |  |  |                                         /-- bne.s 4b5e <continueFunction+0x3ba>
    4b48:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    4b4c:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    4b50:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    4b52:	|  |  |  |  |  |                                         |   jsr 14b4e <getBoolean>
    4b58:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4b5a:	|  |  |  |  |  |                                         |   tst.w d0
    4b5c:	|  |  |  |  |  |                                      /--|-- beq.s 4b62 <continueFunction+0x3be>
    4b5e:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4b60:	|  |  |  |  |  |                                      |  /-- bra.s 4b64 <continueFunction+0x3c0>
    4b62:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4b64:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4b66:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4b6a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4b6c:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4b70:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4b72:	|  |  |  |  |  |                                             jsr 14f00 <setVariable>
    4b78:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4b7c:	|  |  |  |  |  |                                             moveq #24,d0
    4b7e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4b82:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4b84:	|  |  |  |  |  |                                             jsr 14f92 <trimStack>
    4b8a:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4b8c:	|  |  |  |  +--|-------------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4b90:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4b94:	|  |  |  |  |  |                                             moveq #28,d0
    4b96:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4b9a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4b9c:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4ba0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ba2:	|  |  |  |  |  |                                             jsr 14f00 <setVariable>
    4ba8:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4bac:	|  |  |  |  +--|-------------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4bb0:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4bb4:	|  |  |  |  |  |                                             moveq #28,d0
    4bb6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4bba:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4bbc:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4bc0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4bc2:	|  |  |  |  |  |                                             jsr 14f00 <setVariable>
    4bc8:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4bcc:	|  |  |  |  +--|-------------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4bd0:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4bd4:	|  |  |  |  |  |                                             moveq #28,d0
    4bd6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4bda:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4bdc:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4be0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4be2:	|  |  |  |  |  |                                             jsr 14f00 <setVariable>
    4be8:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4bec:	|  |  |  |  +--|-------------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4bf0:	|  |  |  |  |  |                                             move.l 1a704 <dialogValue>,d0
    4bf6:	|  |  |  |  |  |                                             moveq #1,d1
    4bf8:	|  |  |  |  |  |                                             cmp.l d0,d1
    4bfa:	|  |  |  |  |  |  /----------------------------------------- beq.w 560e <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4bfe:	|  |  |  |  |  |  |                                          pea 185af <PutChar+0xaa5>
    4c04:	|  |  |  |  |  |  |                                          jsr 17036 <KPrintF>
    4c0a:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4c0c:	|  |  |  |  |  |  |                                          clr.w d0
    4c0e:	|  +--|--|--|--|--|----------------------------------------- bra.w 564e <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4c12:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4c16:	|  |  |  |  |  |  |                                          moveq #28,d0
    4c18:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4c1c:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4c1e:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4c20:	|  |  |  |  |  |  |                                          jsr 14692 <loadStringToVar>
    4c26:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4c28:	|  |  |  |  |  |  |                                          tst.w d0
    4c2a:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 5612 <continueFunction+0xe6e>
					return FALSE;
    4c2e:	|  |  |  |  |  |  |  |                                       clr.w d0
    4c30:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 564e <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4c34:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4c38:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4c3c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4c3e:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4c40:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4c42:	|  |  |  |  |  |  |  |                                /----- beq.s 4ca0 <continueFunction+0x4fc>
    4c44:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4c46:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4c48:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 4e34 <continueFunction+0x690>
    4c4c:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4c4e:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4c5a <continueFunction+0x4b6>
    4c50:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4c52:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4c54:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4ca0 <continueFunction+0x4fc>
    4c56:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4e34 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4c5a:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4c5c:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4c60:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4c8c <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4c62:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4c64:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4c68:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4c6a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4c6c:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4c6e:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14f00 <setVariable>
    4c74:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4c78:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4c7a:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4c7e:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4c80:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14f92 <trimStack>
    4c86:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4c88:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 4e4a <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4c8c:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 185f0 <PutChar+0xae6>
    4c92:	|  |  |  |  |  |  |  |              |  |              |      jsr 17036 <KPrintF>
    4c98:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4c9a:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4c9c:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 564e <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4ca0:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4ca4:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4ca8:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4cac:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4cae:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4cc4 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4cb0:	|  |  |  |  |  |  |  |              |  |                 |   pea 1862c <PutChar+0xb22>
    4cb6:	|  |  |  |  |  |  |  |              |  |                 |   jsr 17036 <KPrintF>
    4cbc:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4cbe:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4cc0:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 564e <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4cc4:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4cc6:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4cca:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4ccc:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4cd0:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4cd4:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4cd6:	|  |  |  |  |  |  |  |              |  |                     jsr 1460e <getValueType>
    4cdc:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4ce0:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4ce2:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4cea <continueFunction+0x546>
    4ce4:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4ce6:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 564e <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4cea:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4cee:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4cf2:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4cf4:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4cf6:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4cf8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4d1a <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4cfa:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4cfe:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4d00:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4d04:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4d08:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4d0c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4d0e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4d10:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14298 <fastArrayGetByIndex>
    4d16:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4d18:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4d3a <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4d1a:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4d1e:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4d20:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4d24:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4d28:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4d2c:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4d2e:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4d30:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4d32:	|  |  |  |  |  |  |  |              |  |              |      jsr 14f22 <stackGetByIndex>
    4d38:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4d3a:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4d3e:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4d40:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4d44:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4d46:	|  |  |  |  |  |  |  |              |  |                     jsr 14f92 <trimStack>
    4d4c:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4d4e:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4d52:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4d6e <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4d54:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4d56:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4d5a:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4d5c:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4d5e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4d60:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14f00 <setVariable>
    4d66:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4d6a:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 4e48 <continueFunction+0x6a4>
    4d6e:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4d70:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4d74:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4d82 <continueFunction+0x5de>
    4d76:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4d78:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4d7c:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4dcc <continueFunction+0x628>
    4d7e:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 4e14 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4d82:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4d86:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4d8a:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4d8e:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4d90:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 1460e <getValueType>
    4d96:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4d9a:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4d9c:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4da4 <continueFunction+0x600>
    4d9e:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4da0:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 4e2e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4da4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4da6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4da8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4dac:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4dae:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4db2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4db4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14f00 <setVariable>
    4dba:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4dbe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4dc0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4dc2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4dc6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4dca:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 4e32 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4dcc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4dd0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4dd4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4dd8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4dda:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1460e <getValueType>
    4de0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4de4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4de6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4dec <continueFunction+0x648>
    4de8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4dea:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4e2e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4dec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4dee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4df0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4df4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4df6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4dfa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4dfc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14f00 <setVariable>
    4e02:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4e06:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4e08:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4e0a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4e0e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4e12:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4e32 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4e14:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    4e16:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4e1a:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4e1c:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4e20:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14ac8 <copyVariable>
    4e26:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4e28:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4e2a:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4e48 <continueFunction+0x6a4>
    4e2c:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4e2e:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 564e <continueFunction+0xeaa>
				break;
    4e32:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 4e48 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4e34:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 1864a <PutChar+0xb40>
    4e3a:	|  |  |  |  |  |  |  |                 |  |                  jsr 17036 <KPrintF>
    4e40:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4e42:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4e44:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 564e <continueFunction+0xeaa>
				break;
    4e48:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    4e4a:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 562c <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4e4e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4e52:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4e56:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4e58:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4e5a:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4e5c:	|  |  |  |  |  |  |  |                                   /-- beq.s 4e6a <continueFunction+0x6c6>
    4e5e:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4e60:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4e62:	|  |  |  |  |  |  |  |                                /--|-- beq.w 4f16 <continueFunction+0x772>
    4e66:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 4f74 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4e6a:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4e6e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4e72:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4e76:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4e78:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4e8e <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4e7a:	|  |  |  |  |  |  |  |                             |  |  |   pea 1862c <PutChar+0xb22>
    4e80:	|  |  |  |  |  |  |  |                             |  |  |   jsr 17036 <KPrintF>
    4e86:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4e88:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4e8a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 564e <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4e8e:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    4e90:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4e94:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4e96:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4e9a:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4e9e:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4ea0:	|  |  |  |  |  |  |  |                             |  |      jsr 1460e <getValueType>
    4ea6:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4eaa:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4eac:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4eb4 <continueFunction+0x710>
    4eae:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4eb0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 564e <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    4eb4:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4eb8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4ebc:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    4ec0:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    4ec2:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    4ec6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4ec8:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4ecc:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4ed0:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4ed4:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4ed6:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4ed8:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4eda:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4edc:	|  |  |  |  |  |  |  |                             |  |      jsr 69c4 <stackSetByIndex>
    4ee2:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4ee6:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4ee8:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4ef0 <continueFunction+0x74c>
						return FALSE;
    4eea:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4eec:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 564e <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    4ef0:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    4ef2:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4ef6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4ef8:	|  |  |  |  |  |  |  |                             |  |      jsr 14f92 <trimStack>
    4efe:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    4f00:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    4f02:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4f06:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4f08:	|  |  |  |  |  |  |  |                             |  |      jsr 14f92 <trimStack>
    4f0e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    4f10:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    4f12:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 562c <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    4f16:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    4f18:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    4f1c:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4f1e:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    4f22:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    4f26:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    4f28:	|  |  |  |  |  |  |  |                             |         jsr 1460e <getValueType>
    4f2e:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    4f32:	|  |  |  |  |  |  |  |                             |         tst.w d0
    4f34:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4f3c <continueFunction+0x798>
    4f36:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    4f38:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 564e <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    4f3c:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    4f40:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    4f42:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    4f46:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    4f4a:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    4f4e:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    4f50:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4f52:	|  |  |  |  |  |  |  |                             |         jsr 14298 <fastArrayGetByIndex>
    4f58:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    4f5a:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    4f5e:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4f6e <continueFunction+0x7ca>
    4f60:	|  |  |  |  |  |  |  |                             |     |   pea 1866e <PutChar+0xb64>
    4f66:	|  |  |  |  |  |  |  |                             |     |   jsr 17036 <KPrintF>
    4f6c:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    4f6e:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    4f70:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 564e <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    4f74:	|  |  |  |  |  |  |  |                             \-------> pea 1864a <PutChar+0xb40>
    4f7a:	|  |  |  |  |  |  |  |                                       jsr 17036 <KPrintF>
    4f80:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    4f82:	|  |  |  |  |  |  |  |                                       clr.w d0
    4f84:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 564e <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4f88:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4f8c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4f90:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4f94:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4f96:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4f98:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4f9a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4f9e:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    4fa2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4fa4:	|  |  |  |  |  |  |  |                                       jsr 1460e <getValueType>
    4faa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4fae:	|  |  |  |  |  |  |  |                                       tst.w d0
    4fb0:	|  |  |  |  |  |  |  |                                   /-- bne.s 4fb8 <continueFunction+0x814>
    4fb2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4fb4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 564e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4fb8:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    4fbc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4fbe:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4fc2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4fc4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4fc8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4fca:	|  |  |  |  |  |  |  |                                       jsr 14f00 <setVariable>
    4fd0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    4fd4:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    4fd8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4fda:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4fdc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4fe0:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4fe4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4fe8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4fea:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4fec:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4fee:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4ff2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4ff4:	|  |  |  |  |  |  |  |                                       jsr 14f00 <setVariable>
    4ffa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4ffe:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5002:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    5008:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    500c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    500e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5010:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5012:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5016:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    501a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    501c:	|  |  |  |  |  |  |  |                                       jsr 1460e <getValueType>
    5022:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5026:	|  |  |  |  |  |  |  |                                       tst.w d0
    5028:	|  |  |  |  |  |  |  |                                   /-- bne.s 5030 <continueFunction+0x88c>
    502a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    502c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 564e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5030:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    5034:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5036:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    503a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    503c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5040:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5042:	|  |  |  |  |  |  |  |                                       jsr 14f00 <setVariable>
    5048:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    504c:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5050:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5052:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5054:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    505a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    505e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5060:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5062:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5064:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5068:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    506a:	|  |  |  |  |  |  |  |                                       jsr 14f00 <setVariable>
    5070:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5074:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5078:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    507c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5080:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5084:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5086:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5088:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    508a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    508e:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5092:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5094:	|  |  |  |  |  |  |  |                                       jsr 1460e <getValueType>
    509a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    509e:	|  |  |  |  |  |  |  |                                       tst.w d0
    50a0:	|  |  |  |  |  |  |  |                                   /-- bne.s 50a8 <continueFunction+0x904>
    50a2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    50a4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 564e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    50a8:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    50ac:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    50ae:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    50b2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    50b4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50b8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50ba:	|  |  |  |  |  |  |  |                                       jsr 14f00 <setVariable>
    50c0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    50c4:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    50c8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    50ca:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    50cc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    50d0:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    50d4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50d8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50da:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    50dc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    50de:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50e2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50e4:	|  |  |  |  |  |  |  |                                       jsr 14f00 <setVariable>
    50ea:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    50ee:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    50f2:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    50f8:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50fc:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50fe:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5100:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5102:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5106:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    510a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    510c:	|  |  |  |  |  |  |  |                                       jsr 1460e <getValueType>
    5112:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5116:	|  |  |  |  |  |  |  |                                       tst.w d0
    5118:	|  |  |  |  |  |  |  |                                   /-- bne.s 5120 <continueFunction+0x97c>
    511a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    511c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 564e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5120:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    5124:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5126:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    512a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    512c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5130:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5132:	|  |  |  |  |  |  |  |                                       jsr 14f00 <setVariable>
    5138:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    513c:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5140:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5142:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5144:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    514a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    514e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5150:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5152:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5154:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5158:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    515a:	|  |  |  |  |  |  |  |                                       jsr 14f00 <setVariable>
    5160:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5164:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5168:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    516c:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5170:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5174:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5176:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5178:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    517a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    517e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5180:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5182:	|  |  |  |  |  |  |  |                                       jsr 14ac8 <copyVariable>
    5188:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    518a:	|  |  |  |  |  |  |  |                                       tst.w d0
    518c:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 5616 <continueFunction+0xe72>
    5190:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5192:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 564e <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5196:	|  |  |  |  |  |  |  |  |                                    move.l 1a752 <globalVars>,d1
    519c:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    51a0:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    51a2:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    51a4:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    51a6:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    51aa:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    51ac:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    51ae:	|  |  |  |  |  |  |  |  |                                    jsr 14ac8 <copyVariable>
    51b4:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    51b6:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    51b8:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 561a <continueFunction+0xe76>
    51bc:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    51be:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 564e <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    51c2:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    51c4:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    51c8:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1a752 <globalVars>,a0
    51ce:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    51d2:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    51d4:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    51d6:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    51d8:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    51da:	|  |  |  |  |  |  |  |  |  |                                 jsr 14ac8 <copyVariable>
    51e0:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    51e2:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    51e4:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 561e <continueFunction+0xe7a>
    51e8:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    51ea:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 564e <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    51ee:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    51f0:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    51f4:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    51f6:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    51fa:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    51fc:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    51fe:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13e4a <addVarToStack>
    5204:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5206:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5208:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 5622 <continueFunction+0xe7e>
    520c:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    520e:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 564e <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5212:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5214:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5218:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    521a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    521e:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5220:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5222:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13ed0 <addVarToStackQuick>
    5228:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    522a:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    522c:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 5626 <continueFunction+0xe82>
    5230:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5232:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 564e <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5236:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5238:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    523c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    523e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b4e <getBoolean>
    5244:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5246:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5248:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    524a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    524c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    524e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5250:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5252:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5256:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5258:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    525c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    525e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14f00 <setVariable>
    5264:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5268:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    526c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    526e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5272:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5274:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b4e <getBoolean>
    527a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    527c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    527e:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 562a <continueFunction+0xe86>
				advanceNow = FALSE;
    5282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    528a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5290:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 562a <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    529c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    52a2:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 562c <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    52a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    52a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    52ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    52ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    52b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    52b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    52b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1460e <getValueType>
    52be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    52c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    52c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 52cc <continueFunction+0xb28>
    52c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    52c8:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 564e <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    52cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    52d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    52d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    52d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    52d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    52da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    52dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    52e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    52e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14f00 <setVariable>
    52e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    52ec:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 562c <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    52f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    52f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    52f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 55e2 <continueFunction+0xe3e>
    52fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    52fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 537e <continueFunction+0xbda>
    5304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    530a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 53c8 <continueFunction+0xc24>
    530e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5310:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 5322 <continueFunction+0xb7e>
    5316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    531c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 5350 <continueFunction+0xbac>
    531e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 53c8 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    5324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    532c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13f44 <addVariablesInSecond>
    533a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    533c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    533e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14f92 <trimStack>
    534a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    534c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 55f6 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5350:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    5352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    535a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    535e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14002 <compareVariablesInSecond>
    5368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    536a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    536c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14f92 <trimStack>
    5378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    537a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 55f6 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    537e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    5380:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    538c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    538e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14002 <compareVariablesInSecond>
    5396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    539a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    539e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    53a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14f92 <trimStack>
    53a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    53a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    53ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    53b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    53b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    53b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    53b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    53bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    53c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    53c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 55f6 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    53c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    53cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    53d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    53d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    53d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    53da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    53dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1460e <getValueType>
    53e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    53e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    53e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 53f0 <continueFunction+0xc4c>
    53ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    53ec:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 564e <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    53f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    53f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    53f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    53f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    53fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1460e <getValueType>
    5408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    540c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    540e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 5416 <continueFunction+0xc72>
    5410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5412:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 564e <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    5418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    541c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    541e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14f92 <trimStack>
    5424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    5426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    542c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    542e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 55f4 <continueFunction+0xe50>
    5434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #21572,a0
    543e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5444 <continueFunction+0xca0>,pc,d0.w)
    5444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    544a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    545c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    546c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    547c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    547e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 179f4 <__mulsi3>
    5486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    548a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    548c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f00 <setVariable>
    549e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    54a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 55f6 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    54a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    54aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    54ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    54b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    54b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    54b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    54b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    54bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    54be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f00 <setVariable>
    54c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    54c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 55f6 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    54cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    54d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    54d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    54d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    54d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17aa0 <__modsi3>
    54de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    54e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    54e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    54e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    54e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    54ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    54ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    54f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f00 <setVariable>
    54f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    54fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 55f6 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    54fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    550a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17a72 <__divsi3>
    5510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    551a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    551c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f00 <setVariable>
    5528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    552c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 55f6 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    553a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    553c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    553e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    554a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    554e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f00 <setVariable>
    5556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    555a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 55f6 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    555e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    556a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    556c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    556e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    557c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    557e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f00 <setVariable>
    5584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 55f6 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    558a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    558e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    559a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    559c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    559e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    55a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f00 <setVariable>
    55b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    55b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 55f6 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    55b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    55ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    55be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    55c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    55c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    55c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    55c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    55c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    55ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    55d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f00 <setVariable>
    55dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    55e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 55f6 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    55e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 1868f <PutChar+0xb85>
    55e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 17036 <KPrintF>
    55ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    55f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    55f2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 564e <continueFunction+0xeaa>
						break;
    55f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    55f6:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 562c <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    55f8:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 186a7 <PutChar+0xb9d>
    55fe:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 17036 <KPrintF>
    5604:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5606:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5608:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 564e <continueFunction+0xeaa>
			break;
    560a:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    560c:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 562c <continueFunction+0xe88>
			break;
    560e:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    5610:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 562c <continueFunction+0xe88>
			break;
    5612:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    5614:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 562c <continueFunction+0xe88>
			break;
    5616:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    5618:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 562c <continueFunction+0xe88>
			break;
    561a:	|  |  |     |              \--|--|--|--|-------------------> nop
    561c:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 562c <continueFunction+0xe88>
			break;
    561e:	|  |  |     |                 \--|--|--|-------------------> nop
    5620:	|  |  |     +--------------------|--|--|-------------------- bra.s 562c <continueFunction+0xe88>
			break;
    5622:	|  |  |     |                    \--|--|-------------------> nop
    5624:	|  |  |     +-----------------------|--|-------------------- bra.s 562c <continueFunction+0xe88>
			break;
    5626:	|  |  |     |                       \--|-------------------> nop
    5628:	|  |  |     +--------------------------|-------------------- bra.s 562c <continueFunction+0xe88>
			break;
    562a:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    562c:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    5630:	+--|--|----------------------------------------------------- beq.s 5644 <continueFunction+0xea0>
    5632:	|  |  |                                                      movea.l 80(sp),a0
    5636:	|  |  |                                                      move.l 36(a0),d0
    563a:	|  |  |                                                      addq.l #1,d0
    563c:	|  |  |                                                      movea.l 80(sp),a0
    5640:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5644:	\--|--|----------------------------------------------------> tst.w 74(sp)
    5648:	   |  \----------------------------------------------------- bne.w 47cc <continueFunction+0x28>

	}
	return TRUE;
    564c:	   |                                                         moveq #1,d0
}
    564e:	   \-------------------------------------------------------> lea 76(sp),sp
    5652:	                                                             rts

00005654 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    5654:	          lea -16(sp),sp
    5658:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    565a:	          move.l 24(sp),-(sp)
    565e:	          jsr 677a <pauseFunction>
    5664:	          addq.l #4,sp
	if (fun -> stack) 
    5666:	          movea.l 24(sp),a0
    566a:	          move.l 24(a0),d0
    566e:	      /-- beq.s 5682 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    5670:	      |   pea 186d3 <PutChar+0xbc9>
    5676:	      |   jsr 17036 <KPrintF>
    567c:	      |   addq.l #4,sp
		return;
    567e:	/-----|-- bra.w 571c <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    5682:	|     \-> movea.l 24(sp),a0
    5686:	|         move.l 4(a0),12(sp)
    568c:	|         move.l 1a7a4 <SysBase>,d0
    5692:	|         movea.l d0,a6
    5694:	|         movea.l 12(sp),a1
    5698:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    569c:	|         clr.l 16(sp)
    56a0:	|     /-- bra.s 56c0 <finishFunction+0x6c>
    56a2:	|  /--|-> movea.l 24(sp),a0
    56a6:	|  |  |   move.l 20(a0),d1
    56aa:	|  |  |   move.l 16(sp),d0
    56ae:	|  |  |   lsl.l #3,d0
    56b0:	|  |  |   add.l d1,d0
    56b2:	|  |  |   move.l d0,-(sp)
    56b4:	|  |  |   jsr 1485c <unlinkVar>
    56ba:	|  |  |   addq.l #4,sp
    56bc:	|  |  |   addq.l #1,16(sp)
    56c0:	|  |  \-> movea.l 24(sp),a0
    56c4:	|  |      move.l 8(a0),d0
    56c8:	|  |      cmp.l 16(sp),d0
    56cc:	|  \----- bgt.s 56a2 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    56ce:	|         movea.l 24(sp),a0
    56d2:	|         move.l 8(a0),d0
    56d6:	|     /-- ble.s 56f2 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    56d8:	|     |   movea.l 24(sp),a0
    56dc:	|     |   move.l 20(a0),8(sp)
    56e2:	|     |   move.l 1a7a4 <SysBase>,d0
    56e8:	|     |   movea.l d0,a6
    56ea:	|     |   movea.l 8(sp),a1
    56ee:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    56f2:	|     \-> moveq #28,d0
    56f4:	|         add.l 24(sp),d0
    56f8:	|         move.l d0,-(sp)
    56fa:	|         jsr 1485c <unlinkVar>
    5700:	|         addq.l #4,sp
	FreeVec(fun);
    5702:	|         move.l 24(sp),4(sp)
    5708:	|         move.l 1a7a4 <SysBase>,d0
    570e:	|         movea.l d0,a6
    5710:	|         movea.l 4(sp),a1
    5714:	|         jsr -690(a6)
	fun = NULL;
    5718:	|         clr.l 24(sp)
}
    571c:	\-------> movea.l (sp)+,a6
    571e:	          lea 16(sp),sp
    5722:	          rts

00005724 <freezeSubs>:

void freezeSubs () {
    5724:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5726:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    572c:	   /----- bra.s 574a <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    572e:	/--|----> movea.l (sp),a0
    5730:	|  |      move.w 52(a0),d0
    5734:	|  |  /-- bne.s 5744 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5736:	|  |  |   movea.l (sp),a0
    5738:	|  |  |   move.b 56(a0),d0
    573c:	|  |  |   addq.b #1,d0
    573e:	|  |  |   movea.l (sp),a0
    5740:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    5744:	|  |  \-> movea.l (sp),a0
    5746:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    574a:	|  \----> tst.l (sp)
    574c:	\-------- bne.s 572e <freezeSubs+0xa>
	}
}
    574e:	          nop
    5750:	          nop
    5752:	          addq.l #4,sp
    5754:	          rts

00005756 <handleInput>:

BOOL handleInput () {
    5756:	             lea -16(sp),sp
    575a:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    575c:	             move.l 1a8b8 <overRegion>,d0
    5762:	         /-- bne.s 576a <handleInput+0x14>
    5764:	         |   jsr 157d2 <getOverRegion>

	if (input.justMoved) {
    576a:	         \-> move.w 1a75a <input+0x4>,d0
    5770:	         /-- beq.s 57ae <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    5772:	         |   movea.l 1a11c <currentEvents>,a0
    5778:	         |   move.l 16(a0),d0
    577c:	         +-- beq.s 57ae <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    577e:	         |   move.l 1a774 <noStack>,d1
    5784:	         |   movea.l 1a11c <currentEvents>,a0
    578a:	         |   move.l 16(a0),d0
    578e:	         |   pea 1 <_start+0x1>
    5792:	         |   move.l d1,-(sp)
    5794:	         |   clr.l -(sp)
    5796:	         |   clr.l -(sp)
    5798:	         |   move.l d0,-(sp)
    579a:	         |   jsr 6a08 <startNewFunctionNum>
    57a0:	         |   lea 20(sp),sp
    57a4:	         |   tst.l d0
    57a6:	         +-- bne.s 57ae <handleInput+0x58>
    57a8:	         |   clr.w d0
    57aa:	/--------|-- bra.w 59b4 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    57ae:	|        \-> clr.w 1a75a <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    57b4:	|            move.l 1a76c <lastRegion>,d1
    57ba:	|            move.l 1a8b8 <overRegion>,d0
    57c0:	|            cmp.l d1,d0
    57c2:	|  /-------- beq.w 589a <handleInput+0x144>
    57c6:	|  |         movea.l 1a11c <currentEvents>,a0
    57cc:	|  |         move.l 20(a0),d0
    57d0:	|  +-------- beq.w 589a <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    57d4:	|  |         moveq #12,d0
    57d6:	|  |         move.l d0,16(sp)
    57da:	|  |         clr.l 12(sp)
    57de:	|  |         move.l 1a7a4 <SysBase>,d0
    57e4:	|  |         movea.l d0,a6
    57e6:	|  |         move.l 16(sp),d0
    57ea:	|  |         move.l 12(sp),d1
    57ee:	|  |         jsr -684(a6)
    57f2:	|  |         move.l d0,8(sp)
    57f6:	|  |         move.l 8(sp),d0
    57fa:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    57fe:	|  |         move.l 4(sp),d0
    5802:	|  |     /-- bne.s 5818 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    5804:	|  |     |   pea 186f9 <PutChar+0xbef>
    580a:	|  |     |   jsr 17036 <KPrintF>
    5810:	|  |     |   addq.l #4,sp
			return FALSE;
    5812:	|  |     |   clr.w d0
    5814:	+--|-----|-- bra.w 59b4 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    5818:	|  |     \-> movea.l 4(sp),a0
    581c:	|  |         clr.l (a0)
		if (overRegion) {
    581e:	|  |         move.l 1a8b8 <overRegion>,d0
    5824:	|  |  /----- beq.s 584c <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    5826:	|  |  |      movea.l 1a8b8 <overRegion>,a0
    582c:	|  |  |      movea.l 28(a0),a0
    5830:	|  |  |      move.l 4(a0),d1
    5834:	|  |  |      move.l 4(sp),d0
    5838:	|  |  |      move.l d1,-(sp)
    583a:	|  |  |      pea 7 <_start+0x7>
    583e:	|  |  |      move.l d0,-(sp)
    5840:	|  |  |      jsr 14f00 <setVariable>
    5846:	|  |  |      lea 12(sp),sp
    584a:	|  |  |  /-- bra.s 5862 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    584c:	|  |  \--|-> move.l 4(sp),d0
    5850:	|  |     |   clr.l -(sp)
    5852:	|  |     |   pea 1 <_start+0x1>
    5856:	|  |     |   move.l d0,-(sp)
    5858:	|  |     |   jsr 14f00 <setVariable>
    585e:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    5862:	|  |     \-> movea.l 4(sp),a0
    5866:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    586a:	|  |         movea.l 1a11c <currentEvents>,a0
    5870:	|  |         move.l 20(a0),d0
    5874:	|  |         pea 1 <_start+0x1>
    5878:	|  |         lea 8(sp),a0
    587c:	|  |         move.l a0,-(sp)
    587e:	|  |         clr.l -(sp)
    5880:	|  |         pea 1 <_start+0x1>
    5884:	|  |         move.l d0,-(sp)
    5886:	|  |         jsr 6a08 <startNewFunctionNum>
    588c:	|  |         lea 20(sp),sp
    5890:	|  |         tst.l d0
    5892:	|  +-------- bne.s 589a <handleInput+0x144>
    5894:	|  |         clr.w d0
    5896:	+--|-------- bra.w 59b4 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    589a:	|  \-------> move.w 1a75c <input+0x6>,d0
    58a0:	|        /-- beq.s 58de <handleInput+0x188>
    58a2:	|        |   movea.l 1a11c <currentEvents>,a0
    58a8:	|        |   move.l 4(a0),d0
    58ac:	|        +-- beq.s 58de <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    58ae:	|        |   move.l 1a774 <noStack>,d1
    58b4:	|        |   movea.l 1a11c <currentEvents>,a0
    58ba:	|        |   move.l 4(a0),d0
    58be:	|        |   pea 1 <_start+0x1>
    58c2:	|        |   move.l d1,-(sp)
    58c4:	|        |   clr.l -(sp)
    58c6:	|        |   clr.l -(sp)
    58c8:	|        |   move.l d0,-(sp)
    58ca:	|        |   jsr 6a08 <startNewFunctionNum>
    58d0:	|        |   lea 20(sp),sp
    58d4:	|        |   tst.l d0
    58d6:	|        +-- bne.s 58de <handleInput+0x188>
    58d8:	|        |   clr.w d0
    58da:	+--------|-- bra.w 59b4 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    58de:	|        \-> move.w 1a75e <input+0x8>,d0
    58e4:	|        /-- beq.s 5922 <handleInput+0x1cc>
    58e6:	|        |   movea.l 1a11c <currentEvents>,a0
    58ec:	|        |   move.l 12(a0),d0
    58f0:	|        +-- beq.s 5922 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    58f2:	|        |   move.l 1a774 <noStack>,d1
    58f8:	|        |   movea.l 1a11c <currentEvents>,a0
    58fe:	|        |   move.l 12(a0),d0
    5902:	|        |   pea 1 <_start+0x1>
    5906:	|        |   move.l d1,-(sp)
    5908:	|        |   clr.l -(sp)
    590a:	|        |   clr.l -(sp)
    590c:	|        |   move.l d0,-(sp)
    590e:	|        |   jsr 6a08 <startNewFunctionNum>
    5914:	|        |   lea 20(sp),sp
    5918:	|        |   tst.l d0
    591a:	|        +-- bne.s 5922 <handleInput+0x1cc>
    591c:	|        |   clr.w d0
    591e:	+--------|-- bra.w 59b4 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    5922:	|        \-> move.w 1a756 <input>,d0
    5928:	|        /-- beq.s 5960 <handleInput+0x20a>
    592a:	|        |   movea.l 1a11c <currentEvents>,a0
    5930:	|        |   move.l (a0),d0
    5932:	|        +-- beq.s 5960 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5934:	|        |   move.l 1a774 <noStack>,d1
    593a:	|        |   movea.l 1a11c <currentEvents>,a0
    5940:	|        |   move.l (a0),d0
    5942:	|        |   pea 1 <_start+0x1>
    5946:	|        |   move.l d1,-(sp)
    5948:	|        |   clr.l -(sp)
    594a:	|        |   clr.l -(sp)
    594c:	|        |   move.l d0,-(sp)
    594e:	|        |   jsr 6a08 <startNewFunctionNum>
    5954:	|        |   lea 20(sp),sp
    5958:	|        |   tst.l d0
    595a:	|        +-- bne.s 5960 <handleInput+0x20a>
    595c:	|        |   clr.w d0
    595e:	+--------|-- bra.s 59b4 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5960:	|        \-> move.w 1a758 <input+0x2>,d0
    5966:	|        /-- beq.s 59a2 <handleInput+0x24c>
    5968:	|        |   movea.l 1a11c <currentEvents>,a0
    596e:	|        |   move.l 8(a0),d0
    5972:	|        +-- beq.s 59a2 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5974:	|        |   move.l 1a774 <noStack>,d1
    597a:	|        |   movea.l 1a11c <currentEvents>,a0
    5980:	|        |   move.l 8(a0),d0
    5984:	|        |   pea 1 <_start+0x1>
    5988:	|        |   move.l d1,-(sp)
    598a:	|        |   clr.l -(sp)
    598c:	|        |   clr.l -(sp)
    598e:	|        |   move.l d0,-(sp)
    5990:	|        |   jsr 6a08 <startNewFunctionNum>
    5996:	|        |   lea 20(sp),sp
    599a:	|        |   tst.l d0
    599c:	|        +-- bne.s 59a2 <handleInput+0x24c>
    599e:	|        |   clr.w d0
    59a0:	+--------|-- bra.s 59b4 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    59a2:	|        \-> move.l 1a8b8 <overRegion>,d0
    59a8:	|            move.l d0,1a76c <lastRegion>
	return runSludge ();
    59ae:	|            jsr 67d6 <runSludge>
}
    59b4:	\----------> movea.l (sp)+,a6
    59b6:	             lea 16(sp),sp
    59ba:	             rts

000059bc <initSludge>:

BOOL initSludge (char * filename) {
    59bc:	             lea -292(sp),sp
    59c0:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    59c4:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    59c8:	             jsr abe8 <makeNullAnim>
    59ce:	             move.l d0,1a6aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    59d4:	             pea 1a74e <gameVersion>
    59da:	             pea 1872f <PutChar+0xc25>
    59e0:	             pea 45 <_start+0x45>
    59e4:	             pea 47 <_start+0x47>
    59e8:	             move.l 332(sp),-(sp)
    59ec:	             jsr 640a <openAndVerify>
    59f2:	             lea 20(sp),sp
    59f6:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    59fa:	         /-- bne.s 5a02 <initSludge+0x46>
    59fc:	         |   clr.w d0
    59fe:	/--------|-- bra.w 612a <initSludge+0x76e>
	if (FGetC (fp)) {
    5a02:	|        \-> move.l 288(sp),284(sp)
    5a08:	|            move.l 1a7ac <DOSBase>,d0
    5a0e:	|            movea.l d0,a6
    5a10:	|            move.l 284(sp),d1
    5a14:	|            jsr -306(a6)
    5a18:	|            move.l d0,280(sp)
    5a1c:	|            move.l 280(sp),d0
    5a20:	|  /-------- beq.w 5bca <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    5a24:	|  |         move.l 288(sp),-(sp)
    5a28:	|  |         jsr 6bc <get2bytes>
    5a2e:	|  |         addq.l #4,sp
    5a30:	|  |         move.l d0,1a778 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    5a36:	|  |         move.l 1a778 <numBIFNames>,d0
    5a3c:	|  |         move.l d0,276(sp)
    5a40:	|  |         clr.l 272(sp)
    5a44:	|  |         move.l 1a7a4 <SysBase>,d0
    5a4a:	|  |         movea.l d0,a6
    5a4c:	|  |         move.l 276(sp),d0
    5a50:	|  |         move.l 272(sp),d1
    5a54:	|  |         jsr -684(a6)
    5a58:	|  |         move.l d0,268(sp)
    5a5c:	|  |         move.l 268(sp),d0
    5a60:	|  |         move.l d0,1a734 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    5a66:	|  |         move.l 1a734 <allBIFNames>,d0
    5a6c:	|  |     /-- bne.s 5a74 <initSludge+0xb8>
    5a6e:	|  |     |   clr.w d0
    5a70:	+--|-----|-- bra.w 612a <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5a74:	|  |     \-> clr.l 304(sp)
    5a78:	|  |     /-- bra.s 5a9e <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5a7a:	|  |  /--|-> move.l 1a734 <allBIFNames>,d1
    5a80:	|  |  |  |   move.l 304(sp),d0
    5a84:	|  |  |  |   add.l d0,d0
    5a86:	|  |  |  |   add.l d0,d0
    5a88:	|  |  |  |   movea.l d1,a2
    5a8a:	|  |  |  |   adda.l d0,a2
    5a8c:	|  |  |  |   move.l 288(sp),-(sp)
    5a90:	|  |  |  |   jsr b02 <readString>
    5a96:	|  |  |  |   addq.l #4,sp
    5a98:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5a9a:	|  |  |  |   addq.l #1,304(sp)
    5a9e:	|  |  |  \-> move.l 1a778 <numBIFNames>,d0
    5aa4:	|  |  |      cmp.l 304(sp),d0
    5aa8:	|  |  \----- bgt.s 5a7a <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5aaa:	|  |         move.l 288(sp),-(sp)
    5aae:	|  |         jsr 6bc <get2bytes>
    5ab4:	|  |         addq.l #4,sp
    5ab6:	|  |         move.l d0,1a784 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5abc:	|  |         move.l 1a784 <numUserFunc>,d0
    5ac2:	|  |         move.l d0,264(sp)
    5ac6:	|  |         clr.l 260(sp)
    5aca:	|  |         move.l 1a7a4 <SysBase>,d0
    5ad0:	|  |         movea.l d0,a6
    5ad2:	|  |         move.l 264(sp),d0
    5ad6:	|  |         move.l 260(sp),d1
    5ada:	|  |         jsr -684(a6)
    5ade:	|  |         move.l d0,256(sp)
    5ae2:	|  |         move.l 256(sp),d0
    5ae6:	|  |         move.l d0,1a740 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5aec:	|  |         move.l 1a740 <allUserFunc>,d0
    5af2:	|  |     /-- bne.s 5afa <initSludge+0x13e>
    5af4:	|  |     |   clr.w d0
    5af6:	+--|-----|-- bra.w 612a <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5afa:	|  |     \-> clr.l 300(sp)
    5afe:	|  |     /-- bra.s 5b24 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5b00:	|  |  /--|-> move.l 1a740 <allUserFunc>,d1
    5b06:	|  |  |  |   move.l 300(sp),d0
    5b0a:	|  |  |  |   add.l d0,d0
    5b0c:	|  |  |  |   add.l d0,d0
    5b0e:	|  |  |  |   movea.l d1,a2
    5b10:	|  |  |  |   adda.l d0,a2
    5b12:	|  |  |  |   move.l 288(sp),-(sp)
    5b16:	|  |  |  |   jsr b02 <readString>
    5b1c:	|  |  |  |   addq.l #4,sp
    5b1e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5b20:	|  |  |  |   addq.l #1,300(sp)
    5b24:	|  |  |  \-> move.l 1a784 <numUserFunc>,d0
    5b2a:	|  |  |      cmp.l 300(sp),d0
    5b2e:	|  |  \----- bgt.s 5b00 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    5b30:	|  |         move.l 1a74e <gameVersion>,d0
    5b36:	|  |         cmpi.l #258,d0
    5b3c:	|  +-------- ble.w 5bca <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    5b40:	|  |         move.l 288(sp),-(sp)
    5b44:	|  |         jsr 6bc <get2bytes>
    5b4a:	|  |         addq.l #4,sp
    5b4c:	|  |         move.l d0,1a780 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    5b52:	|  |         move.l 1a780 <numResourceNames>,d0
    5b58:	|  |         add.l d0,d0
    5b5a:	|  |         add.l d0,d0
    5b5c:	|  |         move.l d0,252(sp)
    5b60:	|  |         clr.l 248(sp)
    5b64:	|  |         move.l 1a7a4 <SysBase>,d0
    5b6a:	|  |         movea.l d0,a6
    5b6c:	|  |         move.l 252(sp),d0
    5b70:	|  |         move.l 248(sp),d1
    5b74:	|  |         jsr -684(a6)
    5b78:	|  |         move.l d0,244(sp)
    5b7c:	|  |         move.l 244(sp),d0
    5b80:	|  |         move.l d0,1a738 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5b86:	|  |         move.l 1a738 <allResourceNames>,d0
    5b8c:	|  |     /-- bne.s 5b94 <initSludge+0x1d8>
    5b8e:	|  |     |   clr.w d0
    5b90:	+--|-----|-- bra.w 612a <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5b94:	|  |     \-> clr.l 296(sp)
    5b98:	|  |     /-- bra.s 5bbe <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5b9a:	|  |  /--|-> move.l 1a738 <allResourceNames>,d1
    5ba0:	|  |  |  |   move.l 296(sp),d0
    5ba4:	|  |  |  |   add.l d0,d0
    5ba6:	|  |  |  |   add.l d0,d0
    5ba8:	|  |  |  |   movea.l d1,a2
    5baa:	|  |  |  |   adda.l d0,a2
    5bac:	|  |  |  |   move.l 288(sp),-(sp)
    5bb0:	|  |  |  |   jsr b02 <readString>
    5bb6:	|  |  |  |   addq.l #4,sp
    5bb8:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5bba:	|  |  |  |   addq.l #1,296(sp)
    5bbe:	|  |  |  \-> move.l 1a780 <numResourceNames>,d0
    5bc4:	|  |  |      cmp.l 296(sp),d0
    5bc8:	|  |  \----- bgt.s 5b9a <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5bca:	|  \-------> move.l #129,1a760 <input+0xa>
	input.mouseY = 100;
    5bd4:	|            moveq #100,d0
    5bd6:	|            move.l d0,1a764 <input+0xe>
	winWidth = get2bytes (fp);
    5bdc:	|            move.l 288(sp),-(sp)
    5be0:	|            jsr 6bc <get2bytes>
    5be6:	|            addq.l #4,sp
    5be8:	|            move.l d0,1a6f8 <winWidth>
	winHeight = get2bytes (fp);
    5bee:	|            move.l 288(sp),-(sp)
    5bf2:	|            jsr 6bc <get2bytes>
    5bf8:	|            addq.l #4,sp
    5bfa:	|            move.l d0,1a6fc <winHeight>
	specialSettings = FGetC (fp);
    5c00:	|            move.l 288(sp),240(sp)
    5c06:	|            move.l 1a7ac <DOSBase>,d0
    5c0c:	|            movea.l d0,a6
    5c0e:	|            move.l 240(sp),d1
    5c12:	|            jsr -306(a6)
    5c16:	|            move.l d0,236(sp)
    5c1a:	|            move.l 236(sp),d0
    5c1e:	|            move.l d0,1a788 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5c24:	|            move.l 288(sp),232(sp)
    5c2a:	|            move.l 1a7ac <DOSBase>,d0
    5c30:	|            movea.l d0,a6
    5c32:	|            move.l 232(sp),d1
    5c36:	|            jsr -306(a6)
    5c3a:	|            move.l d0,228(sp)
    5c3e:	|            move.l 228(sp),d0
    5c42:	|            move.l d0,-(sp)
    5c44:	|            pea 3e8 <encodeFilename+0xea>
    5c48:	|            jsr 17a72 <__divsi3>
    5c4e:	|            addq.l #8,sp
    5c50:	|            move.l d0,1a132 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5c56:	|            move.l 288(sp),-(sp)
    5c5a:	|            jsr b02 <readString>
    5c60:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5c62:	|            move.l 288(sp),224(sp)
    5c68:	|            move.l #108358,220(sp)
    5c70:	|            moveq #8,d1
    5c72:	|            move.l d1,216(sp)
    5c76:	|            moveq #1,d0
    5c78:	|            move.l d0,212(sp)
    5c7c:	|            move.l 1a7ac <DOSBase>,d0
    5c82:	|            movea.l d0,a6
    5c84:	|            move.l 224(sp),d1
    5c88:	|            move.l 220(sp),d2
    5c8c:	|            move.l 216(sp),d3
    5c90:	|            move.l 212(sp),d4
    5c94:	|            jsr -324(a6)
    5c98:	|            move.l d0,208(sp)
    5c9c:	|            move.l 208(sp),d0
    5ca0:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5ca4:	|            moveq #1,d1
    5ca6:	|            cmp.l 204(sp),d1
    5caa:	|        /-- beq.s 5cba <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5cac:	|        |   pea 18768 <PutChar+0xc5e>
    5cb2:	|        |   jsr 17036 <KPrintF>
    5cb8:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5cba:	|        \-> move.l 1a74e <gameVersion>,d0
    5cc0:	|            cmpi.l #258,d0
    5cc6:	|        /-- ble.s 5cd6 <initSludge+0x31a>
    5cc8:	|        |   move.l 288(sp),-(sp)
    5ccc:	|        |   jsr b02 <readString>
    5cd2:	|        |   addq.l #4,sp
    5cd4:	|     /--|-- bra.s 5cea <initSludge+0x32e>
    5cd6:	|     |  \-> pea 18786 <PutChar+0xc7c>
    5cdc:	|     |      pea 18786 <PutChar+0xc7c>
    5ce2:	|     |      jsr 13b3a <joinStrings>
    5ce8:	|     |      addq.l #8,sp
    5cea:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5cee:	|            move.l 1a74e <gameVersion>,d0
    5cf4:	|            cmpi.l #258,d0
    5cfa:	|     /----- ble.s 5d1c <initSludge+0x360>
    5cfc:	|     |      move.l 288(sp),196(sp)
    5d02:	|     |      move.l 1a7ac <DOSBase>,d0
    5d08:	|     |      movea.l d0,a6
    5d0a:	|     |      move.l 196(sp),d1
    5d0e:	|     |      jsr -306(a6)
    5d12:	|     |      move.l d0,192(sp)
    5d16:	|     |      move.l 192(sp),d0
    5d1a:	|     |  /-- bra.s 5d1e <initSludge+0x362>
    5d1c:	|     \--|-> moveq #0,d0
    5d1e:	|        \-> move.l d0,1a884 <gameSettings+0x4>
	makeLanguageTable (fp);
    5d24:	|            move.l 288(sp),-(sp)
    5d28:	|            jsr 134f0 <makeLanguageTable>
    5d2e:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5d30:	|            move.l 1a74e <gameVersion>,d0
    5d36:	|            cmpi.l #261,d0
    5d3c:	|        /-- ble.s 5d8a <initSludge+0x3ce>
	{
		FGetC(fp);
    5d3e:	|        |   move.l 288(sp),188(sp)
    5d44:	|        |   move.l 1a7ac <DOSBase>,d0
    5d4a:	|        |   movea.l d0,a6
    5d4c:	|        |   move.l 188(sp),d1
    5d50:	|        |   jsr -306(a6)
    5d54:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5d58:	|        |   move.l 288(sp),180(sp)
    5d5e:	|        |   move.l 1a7ac <DOSBase>,d0
    5d64:	|        |   movea.l d0,a6
    5d66:	|        |   move.l 180(sp),d1
    5d6a:	|        |   jsr -306(a6)
    5d6e:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5d72:	|        |   move.l 288(sp),-(sp)
    5d76:	|        |   jsr 7d8 <getFloat>
    5d7c:	|        |   addq.l #4,sp
		getFloat (fp);
    5d7e:	|        |   move.l 288(sp),-(sp)
    5d82:	|        |   jsr 7d8 <getFloat>
    5d88:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5d8a:	|        \-> move.l 288(sp),-(sp)
    5d8e:	|            jsr b02 <readString>
    5d94:	|            addq.l #4,sp
    5d96:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5d9a:	|            pea 18787 <PutChar+0xc7d>
    5da0:	|            move.l 176(sp),-(sp)
    5da4:	|            jsr 13aba <strcmp>
    5daa:	|            addq.l #8,sp
    5dac:	|            tst.l d0
    5dae:	|        /-- beq.s 5db6 <initSludge+0x3fa>
		return FALSE;
    5db0:	|        |   clr.w d0
    5db2:	+--------|-- bra.w 612a <initSludge+0x76e>
	}
	FreeVec( checker);
    5db6:	|        \-> move.l 172(sp),168(sp)
    5dbc:	|            move.l 1a7a4 <SysBase>,d0
    5dc2:	|            movea.l d0,a6
    5dc4:	|            movea.l 168(sp),a1
    5dc8:	|            jsr -690(a6)
	checker = NULL;
    5dcc:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5dd0:	|            move.l 288(sp),164(sp)
    5dd6:	|            move.l 1a7ac <DOSBase>,d0
    5ddc:	|            movea.l d0,a6
    5dde:	|            move.l 164(sp),d1
    5de2:	|            jsr -306(a6)
    5de6:	|            move.l d0,160(sp)
    5dea:	|            move.l 160(sp),d0
    5dee:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5df2:	|            moveq #0,d0
    5df4:	|            move.b 159(sp),d0
    5df8:	|            moveq #1,d1
    5dfa:	|            and.l d1,d0
    5dfc:	|        /-- beq.s 5e54 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5dfe:	|        |   move.l 1a7ac <DOSBase>,d0
    5e04:	|        |   movea.l d0,a6
    5e06:	|        |   jsr -60(a6)
    5e0a:	|        |   move.l d0,38(sp)
    5e0e:	|        |   move.l 38(sp),d0
    5e12:	|        |   move.l d0,34(sp)
    5e16:	|        |   move.l #100239,30(sp)
    5e1e:	|        |   moveq #54,d0
    5e20:	|        |   move.l d0,26(sp)
    5e24:	|        |   move.l 1a7ac <DOSBase>,d0
    5e2a:	|        |   movea.l d0,a6
    5e2c:	|        |   move.l 34(sp),d1
    5e30:	|        |   move.l 30(sp),d2
    5e34:	|        |   move.l 26(sp),d3
    5e38:	|        |   jsr -48(a6)
    5e3c:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5e40:	|        |   pea 187c6 <PutChar+0xcbc>
    5e46:	|        |   jsr 17036 <KPrintF>
    5e4c:	|        |   addq.l #4,sp
		return FALSE;
    5e4e:	|        |   clr.w d0
    5e50:	+--------|-- bra.w 612a <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5e54:	|        \-> move.l 288(sp),-(sp)
    5e58:	|            jsr 6bc <get2bytes>
    5e5e:	|            addq.l #4,sp
    5e60:	|            move.l d0,1a77c <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5e66:	|            move.l 1a77c <numGlobals>,d0
    5e6c:	|            lsl.l #3,d0
    5e6e:	|            move.l d0,154(sp)
    5e72:	|            clr.l 150(sp)
    5e76:	|            move.l 1a7a4 <SysBase>,d0
    5e7c:	|            movea.l d0,a6
    5e7e:	|            move.l 154(sp),d0
    5e82:	|            move.l 150(sp),d1
    5e86:	|            jsr -684(a6)
    5e8a:	|            move.l d0,146(sp)
    5e8e:	|            move.l 146(sp),d0
    5e92:	|            move.l d0,1a752 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5e98:	|            move.l 1a752 <globalVars>,d0
    5e9e:	|        /-- bne.s 5ebc <initSludge+0x500>
    5ea0:	|        |   move.l 1a77c <numGlobals>,d0
    5ea6:	|        +-- ble.s 5ebc <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5ea8:	|        |   pea 187fe <PutChar+0xcf4>
    5eae:	|        |   jsr 17036 <KPrintF>
    5eb4:	|        |   addq.l #4,sp
		return FALSE;
    5eb6:	|        |   clr.w d0
    5eb8:	+--------|-- bra.w 612a <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5ebc:	|        \-> clr.l 308(sp)
    5ec0:	|        /-- bra.s 5ed8 <initSludge+0x51c>
    5ec2:	|     /--|-> move.l 1a752 <globalVars>,d1
    5ec8:	|     |  |   move.l 308(sp),d0
    5ecc:	|     |  |   lsl.l #3,d0
    5ece:	|     |  |   movea.l d1,a0
    5ed0:	|     |  |   adda.l d0,a0
    5ed2:	|     |  |   clr.l (a0)
    5ed4:	|     |  |   addq.l #1,308(sp)
    5ed8:	|     |  \-> move.l 1a77c <numGlobals>,d0
    5ede:	|     |      cmp.l 308(sp),d0
    5ee2:	|     \----- bgt.s 5ec2 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    5ee4:	|            move.l 1a884 <gameSettings+0x4>,d0
    5eea:	|            clr.l -(sp)
    5eec:	|            move.l d0,-(sp)
    5eee:	|            move.l 296(sp),-(sp)
    5ef2:	|            jsr 6ef8 <setFileIndices>
    5ef8:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5efc:	|            pea 1 <_start+0x1>
    5f00:	|            jsr 6bb2 <getNumberedString>
    5f06:	|            addq.l #4,sp
    5f08:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5f0c:	|            move.l 142(sp),-(sp)
    5f10:	|            jsr 2fe <encodeFilename>
    5f16:	|            addq.l #4,sp
    5f18:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    5f1c:	|            move.l 142(sp),134(sp)
    5f22:	|            move.l 1a7a4 <SysBase>,d0
    5f28:	|            movea.l d0,a6
    5f2a:	|            movea.l 134(sp),a1
    5f2e:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    5f32:	|            move.l 138(sp),130(sp)
    5f38:	|            move.l 1a7ac <DOSBase>,d0
    5f3e:	|            movea.l d0,a6
    5f40:	|            move.l 130(sp),d1
    5f44:	|            jsr -120(a6)
    5f48:	|            move.l d0,126(sp)
    5f4c:	|            move.l 126(sp),d0
    5f50:	|            move.l d0,292(sp)
	if(lock == 0) {
    5f54:	|        /-- bne.s 5f82 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    5f56:	|        |   move.l 138(sp),122(sp)
    5f5c:	|        |   moveq #-2,d1
    5f5e:	|        |   move.l d1,118(sp)
    5f62:	|        |   move.l 1a7ac <DOSBase>,d0
    5f68:	|        |   movea.l d0,a6
    5f6a:	|        |   move.l 122(sp),d1
    5f6e:	|        |   move.l 118(sp),d2
    5f72:	|        |   jsr -84(a6)
    5f76:	|        |   move.l d0,114(sp)
    5f7a:	|        |   move.l 114(sp),d0
    5f7e:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    5f82:	|        \-> move.l 292(sp),110(sp)
    5f88:	|            move.l 1a7ac <DOSBase>,d0
    5f8e:	|            movea.l d0,a6
    5f90:	|            move.l 110(sp),d1
    5f94:	|            jsr -126(a6)
    5f98:	|            move.l d0,106(sp)
    5f9c:	|            move.l 106(sp),d0
    5fa0:	|        /-- bne.s 5ffc <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    5fa2:	|        |   move.l 138(sp),-(sp)
    5fa6:	|        |   pea 18831 <PutChar+0xd27>
    5fac:	|        |   jsr 17036 <KPrintF>
    5fb2:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    5fb4:	|        |   move.l 1a7ac <DOSBase>,d0
    5fba:	|        |   movea.l d0,a6
    5fbc:	|        |   jsr -60(a6)
    5fc0:	|        |   move.l d0,58(sp)
    5fc4:	|        |   move.l 58(sp),d0
    5fc8:	|        |   move.l d0,54(sp)
    5fcc:	|        |   move.l #100446,50(sp)
    5fd4:	|        |   moveq #40,d0
    5fd6:	|        |   move.l d0,46(sp)
    5fda:	|        |   move.l 1a7ac <DOSBase>,d0
    5fe0:	|        |   movea.l d0,a6
    5fe2:	|        |   move.l 54(sp),d1
    5fe6:	|        |   move.l 50(sp),d2
    5fea:	|        |   move.l 46(sp),d3
    5fee:	|        |   jsr -48(a6)
    5ff2:	|        |   move.l d0,42(sp)
		return FALSE;
    5ff6:	|        |   clr.w d0
    5ff8:	+--------|-- bra.w 612a <initSludge+0x76e>
	}

	FreeVec(gameName);
    5ffc:	|        \-> move.l 138(sp),102(sp)
    6002:	|            move.l 1a7a4 <SysBase>,d0
    6008:	|            movea.l d0,a6
    600a:	|            movea.l 102(sp),a1
    600e:	|            jsr -690(a6)

	readIniFile (filename);
    6012:	|            move.l 316(sp),-(sp)
    6016:	|            jsr 13624 <readIniFile>
    601c:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    601e:	|            jsr 133f6 <getLanguageForFileB>
    6024:	|            move.l d0,1a120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    602a:	|            move.l 1a120 <languageNum>,d0
    6030:	|        /-- bpl.s 6040 <initSludge+0x684>
    6032:	|        |   pea 18887 <PutChar+0xd7d>
    6038:	|        |   jsr 17036 <KPrintF>
    603e:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6040:	|        \-> move.l 1a120 <languageNum>,d0
    6046:	|            move.l d0,d1
    6048:	|            move.l 1a884 <gameSettings+0x4>,d0
    604e:	|            move.l d1,-(sp)
    6050:	|            move.l d0,-(sp)
    6052:	|            clr.l -(sp)
    6054:	|            jsr 6ef8 <setFileIndices>
    605a:	|            lea 12(sp),sp

	if (dataFol[0]) {
    605e:	|            movea.l 200(sp),a0
    6062:	|            move.b (a0),d0
    6064:	|     /----- beq.w 610e <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6068:	|     |      move.l 200(sp),-(sp)
    606c:	|     |      jsr 2fe <encodeFilename>
    6072:	|     |      addq.l #4,sp
    6074:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6078:	|     |      move.l 98(sp),94(sp)
    607e:	|     |      move.l 1a7ac <DOSBase>,d0
    6084:	|     |      movea.l d0,a6
    6086:	|     |      move.l 94(sp),d1
    608a:	|     |      jsr -120(a6)
    608e:	|     |      move.l d0,90(sp)
    6092:	|     |      move.l 90(sp),d0
    6096:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    609a:	|     |  /-- bne.s 60c8 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    609c:	|     |  |   move.l 98(sp),86(sp)
    60a2:	|     |  |   moveq #-2,d1
    60a4:	|     |  |   move.l d1,82(sp)
    60a8:	|     |  |   move.l 1a7ac <DOSBase>,d0
    60ae:	|     |  |   movea.l d0,a6
    60b0:	|     |  |   move.l 86(sp),d1
    60b4:	|     |  |   move.l 82(sp),d2
    60b8:	|     |  |   jsr -84(a6)
    60bc:	|     |  |   move.l d0,78(sp)
    60c0:	|     |  |   move.l 78(sp),d0
    60c4:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    60c8:	|     |  \-> move.l 292(sp),74(sp)
    60ce:	|     |      move.l 1a7ac <DOSBase>,d0
    60d4:	|     |      movea.l d0,a6
    60d6:	|     |      move.l 74(sp),d1
    60da:	|     |      jsr -126(a6)
    60de:	|     |      move.l d0,70(sp)
    60e2:	|     |      move.l 70(sp),d0
    60e6:	|     |  /-- bne.s 60f8 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    60e8:	|     |  |   move.l 1a7ac <DOSBase>,d0
    60ee:	|     |  |   movea.l d0,a6
    60f0:	|     |  |   jsr -60(a6)
    60f4:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    60f8:	|     |  \-> move.l 98(sp),62(sp)
    60fe:	|     |      move.l 1a7a4 <SysBase>,d0
    6104:	|     |      movea.l d0,a6
    6106:	|     |      movea.l 62(sp),a1
    610a:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    610e:	|     \----> movea.l 1a6fc <winHeight>,a0
    6114:	|            lea -15(a0),a0
    6118:	|            move.l a0,d0
    611a:	|            move.l d0,-(sp)
    611c:	|            pea a <_start+0xa>
    6120:	|            jsr 7938 <positionStatus>
    6126:	|            addq.l #8,sp

	return TRUE;
    6128:	|            moveq #1,d0
}
    612a:	\----------> movem.l (sp)+,d2-d4/a2/a6
    612e:	             lea 292(sp),sp
    6132:	             rts

00006134 <killSpeechTimers>:

void killSpeechTimers () {
    6134:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6136:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    613c:	   /----- bra.s 6168 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    613e:	/--|----> movea.l (sp),a0
    6140:	|  |      move.b 56(a0),d0
    6144:	|  |  /-- bne.s 6162 <killSpeechTimers+0x2e>
    6146:	|  |  |   movea.l (sp),a0
    6148:	|  |  |   move.w 50(a0),d0
    614c:	|  |  +-- beq.s 6162 <killSpeechTimers+0x2e>
    614e:	|  |  |   movea.l (sp),a0
    6150:	|  |  |   move.l 12(a0),d0
    6154:	|  |  +-- beq.s 6162 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6156:	|  |  |   movea.l (sp),a0
    6158:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    615c:	|  |  |   movea.l (sp),a0
    615e:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6162:	|  |  \-> movea.l (sp),a0
    6164:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6168:	|  \----> tst.l (sp)
    616a:	\-------- bne.s 613e <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    616c:	          jsr 7e76 <killAllSpeech>
}
    6172:	          nop
    6174:	          addq.l #4,sp
    6176:	          rts

00006178 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6178:	             lea -52(sp),sp
    617c:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    617e:	             movea.l 60(sp),a0
    6182:	             move.l (a0),d0
    6184:	             move.l d0,-(sp)
    6186:	             jsr 6e38 <openSubSlice>
    618c:	             addq.l #4,sp
    618e:	             tst.w d0
    6190:	         /-- bne.s 6198 <loadFunctionCode+0x20>
    6192:	         |   clr.w d0
    6194:	/--------|-- bra.w 6362 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6198:	|        \-> move.l 1a78c <bigDataFile>,44(sp)
    61a0:	|            move.l 1a7ac <DOSBase>,d0
    61a6:	|            movea.l d0,a6
    61a8:	|            move.l 44(sp),d1
    61ac:	|            jsr -306(a6)
    61b0:	|            move.l d0,40(sp)
    61b4:	|            move.l 40(sp),d0
    61b8:	|            move.l d0,d0
    61ba:	|            movea.l 60(sp),a0
    61be:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    61c2:	|            move.l 1a78c <bigDataFile>,d0
    61c8:	|            move.l d0,-(sp)
    61ca:	|            jsr 6bc <get2bytes>
    61d0:	|            addq.l #4,sp
    61d2:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    61d6:	|            move.l 1a78c <bigDataFile>,d0
    61dc:	|            move.l d0,-(sp)
    61de:	|            jsr 6bc <get2bytes>
    61e4:	|            addq.l #4,sp
    61e6:	|            movea.l 60(sp),a0
    61ea:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    61ee:	|            move.l 1a78c <bigDataFile>,d0
    61f4:	|            move.l d0,-(sp)
    61f6:	|            jsr 6bc <get2bytes>
    61fc:	|            addq.l #4,sp
    61fe:	|            movea.l 60(sp),a0
    6202:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6206:	|            move.l 36(sp),d0
    620a:	|            lsl.l #3,d0
    620c:	|            move.l d0,32(sp)
    6210:	|            clr.l 28(sp)
    6214:	|            move.l 1a7a4 <SysBase>,d0
    621a:	|            movea.l d0,a6
    621c:	|            move.l 32(sp),d0
    6220:	|            move.l 28(sp),d1
    6224:	|            jsr -684(a6)
    6228:	|            move.l d0,24(sp)
    622c:	|            move.l 24(sp),d0
    6230:	|            movea.l 60(sp),a0
    6234:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6238:	|            movea.l 60(sp),a0
    623c:	|            move.l 4(a0),d0
    6240:	|        /-- bne.s 6256 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6242:	|        |   pea 188b2 <PutChar+0xda8>
    6248:	|        |   jsr 17036 <KPrintF>
    624e:	|        |   addq.l #4,sp
		return FALSE;
    6250:	|        |   clr.w d0
    6252:	+--------|-- bra.w 6362 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6256:	|        \-> clr.l 52(sp)
    625a:	|        /-- bra.s 62bc <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    625c:	|     /--|-> move.l 1a78c <bigDataFile>,8(sp)
    6264:	|     |  |   move.l 1a7ac <DOSBase>,d0
    626a:	|     |  |   movea.l d0,a6
    626c:	|     |  |   move.l 8(sp),d1
    6270:	|     |  |   jsr -306(a6)
    6274:	|     |  |   move.l d0,4(sp)
    6278:	|     |  |   move.l 4(sp),d1
    627c:	|     |  |   movea.l 60(sp),a0
    6280:	|     |  |   movea.l 4(a0),a0
    6284:	|     |  |   move.l 52(sp),d0
    6288:	|     |  |   lsl.l #3,d0
    628a:	|     |  |   adda.l d0,a0
    628c:	|     |  |   move.l d1,d0
    628e:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6290:	|     |  |   move.l 1a78c <bigDataFile>,d0
    6296:	|     |  |   move.l d0,-(sp)
    6298:	|     |  |   jsr 6bc <get2bytes>
    629e:	|     |  |   addq.l #4,sp
    62a0:	|     |  |   move.l d0,d1
    62a2:	|     |  |   movea.l 60(sp),a0
    62a6:	|     |  |   movea.l 4(a0),a0
    62aa:	|     |  |   move.l 52(sp),d0
    62ae:	|     |  |   lsl.l #3,d0
    62b0:	|     |  |   adda.l d0,a0
    62b2:	|     |  |   move.l d1,d0
    62b4:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    62b8:	|     |  |   addq.l #1,52(sp)
    62bc:	|     |  \-> move.l 52(sp),d0
    62c0:	|     |      cmp.l 36(sp),d0
    62c4:	|     \----- bcs.s 625c <loadFunctionCode+0xe4>
	}

	finishAccess ();
    62c6:	|            jsr 6ba8 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    62cc:	|            movea.l 60(sp),a0
    62d0:	|            move.l 8(a0),d0
    62d4:	|  /-------- ble.w 6358 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    62d8:	|  |         movea.l 60(sp),a0
    62dc:	|  |         move.l 8(a0),d0
    62e0:	|  |         lsl.l #3,d0
    62e2:	|  |         move.l d0,20(sp)
    62e6:	|  |         clr.l 16(sp)
    62ea:	|  |         move.l 1a7a4 <SysBase>,d0
    62f0:	|  |         movea.l d0,a6
    62f2:	|  |         move.l 20(sp),d0
    62f6:	|  |         move.l 16(sp),d1
    62fa:	|  |         jsr -684(a6)
    62fe:	|  |         move.l d0,12(sp)
    6302:	|  |         move.l 12(sp),d0
    6306:	|  |         movea.l 60(sp),a0
    630a:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    630e:	|  |         movea.l 60(sp),a0
    6312:	|  |         move.l 20(a0),d0
    6316:	|  |     /-- bne.s 632a <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6318:	|  |     |   pea 188b2 <PutChar+0xda8>
    631e:	|  |     |   jsr 17036 <KPrintF>
    6324:	|  |     |   addq.l #4,sp
			return FALSE;
    6326:	|  |     |   clr.w d0
    6328:	+--|-----|-- bra.s 6362 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    632a:	|  |     \-> clr.l 48(sp)
    632e:	|  |     /-- bra.s 6348 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6330:	|  |  /--|-> movea.l 60(sp),a0
    6334:	|  |  |  |   move.l 20(a0),d1
    6338:	|  |  |  |   move.l 48(sp),d0
    633c:	|  |  |  |   lsl.l #3,d0
    633e:	|  |  |  |   movea.l d1,a0
    6340:	|  |  |  |   adda.l d0,a0
    6342:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6344:	|  |  |  |   addq.l #1,48(sp)
    6348:	|  |  |  \-> movea.l 60(sp),a0
    634c:	|  |  |      move.l 8(a0),d0
    6350:	|  |  |      cmp.l 48(sp),d0
    6354:	|  |  \----- bgt.s 6330 <loadFunctionCode+0x1b8>
    6356:	|  |     /-- bra.s 6360 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6358:	|  \-----|-> movea.l 60(sp),a0
    635c:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6360:	|        \-> moveq #1,d0
}
    6362:	\----------> movea.l (sp)+,a6
    6364:	             lea 52(sp),sp
    6368:	             rts

0000636a <loadHandlers>:

void loadHandlers (BPTR fp) {
    636a:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    636c:	movea.l 1a11c <currentEvents>,a2
    6372:	move.l 8(sp),-(sp)
    6376:	jsr 6bc <get2bytes>
    637c:	addq.l #4,sp
    637e:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6380:	movea.l 1a11c <currentEvents>,a2
    6386:	move.l 8(sp),-(sp)
    638a:	jsr 6bc <get2bytes>
    6390:	addq.l #4,sp
    6392:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6396:	movea.l 1a11c <currentEvents>,a2
    639c:	move.l 8(sp),-(sp)
    63a0:	jsr 6bc <get2bytes>
    63a6:	addq.l #4,sp
    63a8:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    63ac:	movea.l 1a11c <currentEvents>,a2
    63b2:	move.l 8(sp),-(sp)
    63b6:	jsr 6bc <get2bytes>
    63bc:	addq.l #4,sp
    63be:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    63c2:	movea.l 1a11c <currentEvents>,a2
    63c8:	move.l 8(sp),-(sp)
    63cc:	jsr 6bc <get2bytes>
    63d2:	addq.l #4,sp
    63d4:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    63d8:	movea.l 1a11c <currentEvents>,a2
    63de:	move.l 8(sp),-(sp)
    63e2:	jsr 6bc <get2bytes>
    63e8:	addq.l #4,sp
    63ea:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    63ee:	movea.l 1a11c <currentEvents>,a2
    63f4:	move.l 8(sp),-(sp)
    63f8:	jsr 6bc <get2bytes>
    63fe:	addq.l #4,sp
    6400:	move.l d0,24(a2)
}
    6404:	nop
    6406:	movea.l (sp)+,a2
    6408:	rts

0000640a <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    640a:	       lea -312(sp),sp
    640e:	       movem.l d2-d3/a6,-(sp)
    6412:	       move.l 332(sp),d1
    6416:	       move.l 336(sp),d0
    641a:	       move.b d1,d1
    641c:	       move.b d1,16(sp)
    6420:	       move.b d0,d0
    6422:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6426:	       move.l 328(sp),318(sp)
    642c:	       move.l #1005,314(sp)
    6434:	       move.l 1a7ac <DOSBase>,d0
    643a:	       movea.l d0,a6
    643c:	       move.l 318(sp),d1
    6440:	       move.l 314(sp),d2
    6444:	       jsr -30(a6)
    6448:	       move.l d0,310(sp)
    644c:	       move.l 310(sp),d0
    6450:	       move.l d0,306(sp)

	if (! fp) {
    6454:	   /-- bne.s 64b0 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6456:	   |   move.l 1a7ac <DOSBase>,d0
    645c:	   |   movea.l d0,a6
    645e:	   |   jsr -60(a6)
    6462:	   |   move.l d0,154(sp)
    6466:	   |   move.l 154(sp),d0
    646a:	   |   move.l d0,150(sp)
    646e:	   |   move.l #100571,146(sp)
    6476:	   |   moveq #31,d0
    6478:	   |   move.l d0,142(sp)
    647c:	   |   move.l 1a7ac <DOSBase>,d0
    6482:	   |   movea.l d0,a6
    6484:	   |   move.l 150(sp),d1
    6488:	   |   move.l 146(sp),d2
    648c:	   |   move.l 142(sp),d3
    6490:	   |   jsr -48(a6)
    6494:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6498:	   |   move.l 328(sp),-(sp)
    649c:	   |   pea 188fb <PutChar+0xdf1>
    64a2:	   |   jsr 17036 <KPrintF>
    64a8:	   |   addq.l #8,sp
		return NULL;
    64aa:	   |   moveq #0,d0
    64ac:	/--|-- bra.w 6770 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    64b0:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    64b4:	|      move.l 306(sp),302(sp)
    64ba:	|      move.l 1a7ac <DOSBase>,d0
    64c0:	|      movea.l d0,a6
    64c2:	|      move.l 302(sp),d1
    64c6:	|      jsr -306(a6)
    64ca:	|      move.l d0,298(sp)
    64ce:	|      move.l 298(sp),d0
    64d2:	|      moveq #83,d1
    64d4:	|      cmp.l d0,d1
    64d6:	|  /-- beq.s 64de <openAndVerify+0xd4>
    64d8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    64de:	|  \-> move.l 306(sp),294(sp)
    64e4:	|      move.l 1a7ac <DOSBase>,d0
    64ea:	|      movea.l d0,a6
    64ec:	|      move.l 294(sp),d1
    64f0:	|      jsr -306(a6)
    64f4:	|      move.l d0,290(sp)
    64f8:	|      move.l 290(sp),d0
    64fc:	|      moveq #76,d1
    64fe:	|      cmp.l d0,d1
    6500:	|  /-- beq.s 6508 <openAndVerify+0xfe>
    6502:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6508:	|  \-> move.l 306(sp),286(sp)
    650e:	|      move.l 1a7ac <DOSBase>,d0
    6514:	|      movea.l d0,a6
    6516:	|      move.l 286(sp),d1
    651a:	|      jsr -306(a6)
    651e:	|      move.l d0,282(sp)
    6522:	|      move.l 282(sp),d0
    6526:	|      moveq #85,d1
    6528:	|      cmp.l d0,d1
    652a:	|  /-- beq.s 6532 <openAndVerify+0x128>
    652c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6532:	|  \-> move.l 306(sp),278(sp)
    6538:	|      move.l 1a7ac <DOSBase>,d0
    653e:	|      movea.l d0,a6
    6540:	|      move.l 278(sp),d1
    6544:	|      jsr -306(a6)
    6548:	|      move.l d0,274(sp)
    654c:	|      move.l 274(sp),d0
    6550:	|      moveq #68,d1
    6552:	|      cmp.l d0,d1
    6554:	|  /-- beq.s 655c <openAndVerify+0x152>
    6556:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    655c:	|  \-> move.l 306(sp),270(sp)
    6562:	|      move.l 1a7ac <DOSBase>,d0
    6568:	|      movea.l d0,a6
    656a:	|      move.l 270(sp),d1
    656e:	|      jsr -306(a6)
    6572:	|      move.l d0,266(sp)
    6576:	|      move.l 266(sp),d1
    657a:	|      move.b 16(sp),d0
    657e:	|      ext.w d0
    6580:	|      movea.w d0,a0
    6582:	|      cmpa.l d1,a0
    6584:	|  /-- beq.s 658c <openAndVerify+0x182>
    6586:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    658c:	|  \-> move.l 306(sp),262(sp)
    6592:	|      move.l 1a7ac <DOSBase>,d0
    6598:	|      movea.l d0,a6
    659a:	|      move.l 262(sp),d1
    659e:	|      jsr -306(a6)
    65a2:	|      move.l d0,258(sp)
    65a6:	|      move.l 258(sp),d1
    65aa:	|      move.b 14(sp),d0
    65ae:	|      ext.w d0
    65b0:	|      movea.w d0,a0
    65b2:	|      cmpa.l d1,a0
    65b4:	|  /-- beq.s 65bc <openAndVerify+0x1b2>
    65b6:	|  |   move.w #1,322(sp)
	if (headerBad) {
    65bc:	|  \-> tst.w 322(sp)
    65c0:	|  /-- beq.s 6618 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    65c2:	|  |   move.l 1a7ac <DOSBase>,d0
    65c8:	|  |   movea.l d0,a6
    65ca:	|  |   jsr -60(a6)
    65ce:	|  |   move.l d0,174(sp)
    65d2:	|  |   move.l 174(sp),d0
    65d6:	|  |   move.l d0,170(sp)
    65da:	|  |   move.l #100634,166(sp)
    65e2:	|  |   moveq #31,d0
    65e4:	|  |   move.l d0,162(sp)
    65e8:	|  |   move.l 1a7ac <DOSBase>,d0
    65ee:	|  |   movea.l d0,a6
    65f0:	|  |   move.l 170(sp),d1
    65f4:	|  |   move.l 166(sp),d2
    65f8:	|  |   move.l 162(sp),d3
    65fc:	|  |   jsr -48(a6)
    6600:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6604:	|  |   pea 1891a <PutChar+0xe10>
    660a:	|  |   jsr 17036 <KPrintF>
    6610:	|  |   addq.l #4,sp
		return NULL;
    6612:	|  |   moveq #0,d0
    6614:	+--|-- bra.w 6770 <openAndVerify+0x366>
	}
	FGetC (fp);
    6618:	|  \-> move.l 306(sp),254(sp)
    661e:	|      move.l 1a7ac <DOSBase>,d0
    6624:	|      movea.l d0,a6
    6626:	|      move.l 254(sp),d1
    662a:	|      jsr -306(a6)
    662e:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6632:	|      nop
    6634:	|  /-> move.l 306(sp),246(sp)
    663a:	|  |   move.l 1a7ac <DOSBase>,d0
    6640:	|  |   movea.l d0,a6
    6642:	|  |   move.l 246(sp),d1
    6646:	|  |   jsr -306(a6)
    664a:	|  |   move.l d0,242(sp)
    664e:	|  |   move.l 242(sp),d0
    6652:	|  \-- bne.s 6634 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6654:	|      move.l 306(sp),238(sp)
    665a:	|      move.l 1a7ac <DOSBase>,d0
    6660:	|      movea.l d0,a6
    6662:	|      move.l 238(sp),d1
    6666:	|      jsr -306(a6)
    666a:	|      move.l d0,234(sp)
    666e:	|      move.l 234(sp),d0
    6672:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6676:	|      move.l 306(sp),226(sp)
    667c:	|      move.l 1a7ac <DOSBase>,d0
    6682:	|      movea.l d0,a6
    6684:	|      move.l 226(sp),d1
    6688:	|      jsr -306(a6)
    668c:	|      move.l d0,222(sp)
    6690:	|      move.l 222(sp),d0
    6694:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6698:	|      move.l 230(sp),d0
    669c:	|      lsl.l #8,d0
    669e:	|      add.l 218(sp),d0
    66a2:	|      movea.l 344(sp),a0
    66a6:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    66a8:	|      movea.l 344(sp),a0
    66ac:	|      move.l (a0),d0
    66ae:	|      cmpi.l #514,d0
    66b4:	|  /-- ble.s 670a <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    66b6:	|  |   move.l 1a7ac <DOSBase>,d0
    66bc:	|  |   movea.l d0,a6
    66be:	|  |   jsr -60(a6)
    66c2:	|  |   move.l d0,194(sp)
    66c6:	|  |   move.l 194(sp),d0
    66ca:	|  |   move.l d0,190(sp)
    66ce:	|  |   move.l #100661,186(sp)
    66d6:	|  |   moveq #100,d1
    66d8:	|  |   move.l d1,182(sp)
    66dc:	|  |   move.l 1a7ac <DOSBase>,d0
    66e2:	|  |   movea.l d0,a6
    66e4:	|  |   move.l 190(sp),d1
    66e8:	|  |   move.l 186(sp),d2
    66ec:	|  |   move.l 182(sp),d3
    66f0:	|  |   jsr -48(a6)
    66f4:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    66f8:	|  |   pea 18935 <PutChar+0xe2b>
    66fe:	|  |   jsr 17036 <KPrintF>
    6704:	|  |   addq.l #4,sp
		return NULL;
    6706:	|  |   moveq #0,d0
    6708:	+--|-- bra.s 6770 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    670a:	|  \-> movea.l 344(sp),a0
    670e:	|      move.l (a0),d0
    6710:	|      cmpi.l #257,d0
    6716:	|  /-- bgt.s 676c <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6718:	|  |   move.l 1a7ac <DOSBase>,d0
    671e:	|  |   movea.l d0,a6
    6720:	|  |   jsr -60(a6)
    6724:	|  |   move.l d0,214(sp)
    6728:	|  |   move.l 214(sp),d0
    672c:	|  |   move.l d0,210(sp)
    6730:	|  |   move.l #100730,206(sp)
    6738:	|  |   moveq #100,d0
    673a:	|  |   move.l d0,202(sp)
    673e:	|  |   move.l 1a7ac <DOSBase>,d0
    6744:	|  |   movea.l d0,a6
    6746:	|  |   move.l 210(sp),d1
    674a:	|  |   move.l 206(sp),d2
    674e:	|  |   move.l 202(sp),d3
    6752:	|  |   jsr -48(a6)
    6756:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    675a:	|  |   pea 1897a <PutChar+0xe70>
    6760:	|  |   jsr 17036 <KPrintF>
    6766:	|  |   addq.l #4,sp
		return NULL;
    6768:	|  |   moveq #0,d0
    676a:	+--|-- bra.s 6770 <openAndVerify+0x366>
	}
	return fp;
    676c:	|  \-> move.l 306(sp),d0
}
    6770:	\----> movem.l (sp)+,d2-d3/a6
    6774:	       lea 312(sp),sp
    6778:	       rts

0000677a <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    677a:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    677c:	          move.l #108348,(sp)
	while (* huntAndDestroy) {
    6782:	   /----- bra.s 67ae <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    6784:	/--|----> movea.l (sp),a0
    6786:	|  |      move.l (a0),d0
    6788:	|  |      cmp.l 8(sp),d0
    678c:	|  |  /-- bne.s 67a4 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    678e:	|  |  |   movea.l (sp),a0
    6790:	|  |  |   movea.l (a0),a0
    6792:	|  |  |   move.l 44(a0),d0
    6796:	|  |  |   movea.l (sp),a0
    6798:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    679a:	|  |  |   movea.l 8(sp),a0
    679e:	|  |  |   clr.l 44(a0)
    67a2:	|  +--|-- bra.s 67ae <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    67a4:	|  |  \-> movea.l (sp),a0
    67a6:	|  |      move.l (a0),d0
    67a8:	|  |      moveq #44,d1
    67aa:	|  |      add.l d0,d1
    67ac:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    67ae:	|  \----> movea.l (sp),a0
    67b0:	|         move.l (a0),d0
    67b2:	\-------- bne.s 6784 <pauseFunction+0xa>
		}
	}
}
    67b4:	          nop
    67b6:	          nop
    67b8:	          addq.l #4,sp
    67ba:	          rts

000067bc <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    67bc:	move.l 1a73c <allRunningFunctions>,d0
    67c2:	movea.l 4(sp),a0
    67c6:	move.l d0,44(a0)
	allRunningFunctions = fun;
    67ca:	move.l 4(sp),1a73c <allRunningFunctions>
}
    67d2:	nop
    67d4:	rts

000067d6 <runSludge>:

BOOL runSludge () {
    67d6:	                   lea -12(sp),sp
    67da:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    67dc:	                   move.l 1a73c <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    67e4:	      /----------- bra.s 6860 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    67e6:	   /--|----------> movea.l 12(sp),a0
    67ea:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    67f0:	   |  |            movea.l 12(sp),a0
    67f4:	   |  |            move.b 56(a0),d0
    67f8:	   |  |  /-------- bne.s 685a <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    67fa:	   |  |  |         movea.l 12(sp),a0
    67fe:	   |  |  |         move.l 12(a0),d0
    6802:	   |  |  |  /----- beq.s 682c <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    6804:	   |  |  |  |      movea.l 12(sp),a0
    6808:	   |  |  |  |      move.l 12(a0),d0
    680c:	   |  |  |  |  /-- bpl.s 6818 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    680e:	   |  |  |  |  |   movea.l 12(sp),a0
    6812:	   |  |  |  |  |   clr.l 12(a0)
    6816:	   |  |  +--|--|-- bra.s 685a <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    6818:	   |  |  |  |  \-> movea.l 12(sp),a0
    681c:	   |  |  |  |      move.l 12(a0),d0
    6820:	   |  |  |  |      subq.l #1,d0
    6822:	   |  |  |  |      movea.l 12(sp),a0
    6826:	   |  |  |  |      move.l d0,12(a0)
    682a:	   |  |  +--|----- bra.s 685a <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    682c:	   |  |  |  \----> movea.l 12(sp),a0
    6830:	   |  |  |         move.w 50(a0),d0
    6834:	   |  |  |     /-- beq.s 6844 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    6836:	   |  |  |     |   movea.l 12(sp),a0
    683a:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    683e:	   |  |  |     |   jsr 7e76 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    6844:	   |  |  |     \-> move.l 12(sp),-(sp)
    6848:	   |  |  |         jsr 47a4 <continueFunction>
    684e:	   |  |  |         addq.l #4,sp
    6850:	   |  |  |         tst.w d0
    6852:	   |  |  +-------- bne.s 685a <runSludge+0x84>
					return FALSE;
    6854:	   |  |  |         clr.w d0
    6856:	/--|--|--|-------- bra.w 68e6 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    685a:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    6860:	|  |  \----------> tst.l 12(sp)
    6864:	|  \-------------- bne.s 67e6 <runSludge+0x10>
	}

	if (loadNow) {
    6866:	|                  move.l 1a770 <loadNow>,d0
    686c:	|        /-------- beq.s 68e4 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    686e:	|        |         movea.l 1a770 <loadNow>,a0
    6874:	|        |         move.b (a0),d0
    6876:	|        |         cmpi.b #58,d0
    687a:	|        |  /----- bne.s 68ae <runSludge+0xd8>
			saveGame (loadNow + 1);
    687c:	|        |  |      move.l 1a770 <loadNow>,d0
    6882:	|        |  |      addq.l #1,d0
    6884:	|        |  |      move.l d0,-(sp)
    6886:	|        |  |      jsr c5ba <saveGame>
    688c:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    688e:	|        |  |      movea.l 1a86e <saverFunc>,a0
    6894:	|        |  |      lea 28(a0),a0
    6898:	|        |  |      pea 1 <_start+0x1>
    689c:	|        |  |      pea 1 <_start+0x1>
    68a0:	|        |  |      move.l a0,-(sp)
    68a2:	|        |  |      jsr 14f00 <setVariable>
    68a8:	|        |  |      lea 12(sp),sp
    68ac:	|        |  |  /-- bra.s 68c6 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    68ae:	|        |  \--|-> move.l 1a770 <loadNow>,d0
    68b4:	|        |     |   move.l d0,-(sp)
    68b6:	|        |     |   jsr c102 <loadGame>
    68bc:	|        |     |   addq.l #4,sp
    68be:	|        |     |   tst.w d0
    68c0:	|        |     +-- bne.s 68c6 <runSludge+0xf0>
    68c2:	|        |     |   clr.w d0
    68c4:	+--------|-----|-- bra.s 68e6 <runSludge+0x110>
		}
		FreeVec(loadNow);
    68c6:	|        |     \-> move.l 1a770 <loadNow>,8(sp)
    68ce:	|        |         move.l 1a7a4 <SysBase>,d0
    68d4:	|        |         movea.l d0,a6
    68d6:	|        |         movea.l 8(sp),a1
    68da:	|        |         jsr -690(a6)
		loadNow = NULL;
    68de:	|        |         clr.l 1a770 <loadNow>
	}

	return TRUE;
    68e4:	|        \-------> moveq #1,d0
}
    68e6:	\----------------> movea.l (sp)+,a6
    68e8:	                   lea 12(sp),sp
    68ec:	                   rts

000068ee <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    68ee:	movea.l 1a11c <currentEvents>,a0
    68f4:	move.l (a0),d0
    68f6:	move.l 4(sp),-(sp)
    68fa:	move.l d0,-(sp)
    68fc:	jsr 8d0 <put2bytes>
    6902:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    6904:	movea.l 1a11c <currentEvents>,a0
    690a:	move.l 4(a0),d0
    690e:	move.l 4(sp),-(sp)
    6912:	move.l d0,-(sp)
    6914:	jsr 8d0 <put2bytes>
    691a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    691c:	movea.l 1a11c <currentEvents>,a0
    6922:	move.l 8(a0),d0
    6926:	move.l 4(sp),-(sp)
    692a:	move.l d0,-(sp)
    692c:	jsr 8d0 <put2bytes>
    6932:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    6934:	movea.l 1a11c <currentEvents>,a0
    693a:	move.l 12(a0),d0
    693e:	move.l 4(sp),-(sp)
    6942:	move.l d0,-(sp)
    6944:	jsr 8d0 <put2bytes>
    694a:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    694c:	movea.l 1a11c <currentEvents>,a0
    6952:	move.l 16(a0),d0
    6956:	move.l 4(sp),-(sp)
    695a:	move.l d0,-(sp)
    695c:	jsr 8d0 <put2bytes>
    6962:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    6964:	movea.l 1a11c <currentEvents>,a0
    696a:	move.l 20(a0),d0
    696e:	move.l 4(sp),-(sp)
    6972:	move.l d0,-(sp)
    6974:	jsr 8d0 <put2bytes>
    697a:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    697c:	movea.l 1a11c <currentEvents>,a0
    6982:	move.l 24(a0),d0
    6986:	move.l 4(sp),-(sp)
    698a:	move.l d0,-(sp)
    698c:	jsr 8d0 <put2bytes>
    6992:	addq.l #8,sp
}
    6994:	nop
    6996:	rts

00006998 <sludgeDisplay>:

void sludgeDisplay () {					
    6998:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    699a:	move.l #14675968,(sp)
	displayCursor();
    69a0:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    69a6:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    69ac:	jsr 2a3e <CstRestoreScreen>
	drawPeople();
    69b2:	jsr 9f22 <drawPeople>
	CstSwapBuffer();
    69b8:	jsr 3774 <CstSwapBuffer>
}
    69be:	nop
    69c0:	addq.l #4,sp
    69c2:	rts

000069c4 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    69c4:	      /-- bra.s 69e4 <stackSetByIndex+0x20>
		vS = vS->next;
    69c6:	/-----|-> movea.l 4(sp),a0
    69ca:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    69d0:	|     +-- bne.s 69e4 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    69d2:	|     |   pea 189c1 <PutChar+0xeb7>
    69d8:	|     |   jsr 17036 <KPrintF>
    69de:	|     |   addq.l #4,sp
			return FALSE;
    69e0:	|     |   clr.w d0
    69e2:	|  /--|-- bra.s 6a06 <stackSetByIndex+0x42>
	while (theIndex--) {
    69e4:	|  |  \-> move.l 8(sp),d0
    69e8:	|  |      move.l d0,d1
    69ea:	|  |      subq.l #1,d1
    69ec:	|  |      move.l d1,8(sp)
    69f0:	|  |      tst.l d0
    69f2:	\--|----- bne.s 69c6 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    69f4:	   |      move.l 4(sp),d0
    69f8:	   |      move.l d0,-(sp)
    69fa:	   |      move.l 16(sp),-(sp)
    69fe:	   |      jsr 14ac8 <copyVariable>
    6a04:	   |      addq.l #8,sp
}
    6a06:	   \----> rts

00006a08 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6a08:	             lea -24(sp),sp
    6a0c:	             move.l a6,-(sp)
    6a0e:	             move.l 48(sp),d0
    6a12:	             move.w d0,d0
    6a14:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6a18:	             moveq #58,d0
    6a1a:	             move.l d0,24(sp)
    6a1e:	             clr.l 20(sp)
    6a22:	             move.l 1a7a4 <SysBase>,d0
    6a28:	             movea.l d0,a6
    6a2a:	             move.l 24(sp),d0
    6a2e:	             move.l 20(sp),d1
    6a32:	             jsr -684(a6)
    6a36:	             move.l d0,16(sp)
    6a3a:	             move.l 16(sp),d0
    6a3e:	             move.l d0,12(sp)
	if(!newFunc) {
    6a42:	         /-- bne.s 6a58 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    6a44:	         |   pea 189da <PutChar+0xed0>
    6a4a:	         |   jsr 17036 <KPrintF>
    6a50:	         |   addq.l #4,sp
		return 0;
    6a52:	         |   moveq #0,d0
    6a54:	/--------|-- bra.w 6b6e <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6a58:	|        \-> move.l 32(sp),d0
    6a5c:	|            movea.l 12(sp),a0
    6a60:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    6a62:	|            move.l 12(sp),-(sp)
    6a66:	|            jsr 6178 <loadFunctionCode>
    6a6c:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6a6e:	|            movea.l 12(sp),a0
    6a72:	|            move.l 16(a0),d1
    6a76:	|            move.l 36(sp),d0
    6a7a:	|            cmp.l d1,d0
    6a7c:	|        /-- beq.s 6a92 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6a7e:	|        |   pea 18a03 <PutChar+0xef9>
    6a84:	|        |   jsr 17036 <KPrintF>
    6a8a:	|        |   addq.l #4,sp
		return NULL; 
    6a8c:	|        |   moveq #0,d0
    6a8e:	+--------|-- bra.w 6b6e <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6a92:	|        \-> movea.l 12(sp),a0
    6a96:	|            move.l 16(a0),d1
    6a9a:	|            movea.l 12(sp),a0
    6a9e:	|            move.l 8(a0),d0
    6aa2:	|            cmp.l d1,d0
    6aa4:	|  /-------- bge.s 6b0e <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6aa6:	|  |         pea 18a1f <PutChar+0xf15>
    6aac:	|  |         jsr 17036 <KPrintF>
    6ab2:	|  |         addq.l #4,sp
		return NULL; 
    6ab4:	|  |         moveq #0,d0
    6ab6:	+--|-------- bra.w 6b6e <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6aba:	|  |  /----> movea.l 44(sp),a0
    6abe:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6ac2:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6ac6:	|  |  |      movea.l 44(sp),a0
    6aca:	|  |  |      move.l (a0),d0
    6acc:	|  |  |  /-- bne.s 6ae2 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6ace:	|  |  |  |   pea 18a49 <PutChar+0xf3f>
    6ad4:	|  |  |  |   jsr 17036 <KPrintF>
    6ada:	|  |  |  |   addq.l #4,sp
			return NULL;
    6adc:	|  |  |  |   moveq #0,d0
    6ade:	+--|--|--|-- bra.w 6b6e <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6ae2:	|  |  |  \-> movea.l 12(sp),a0
    6ae6:	|  |  |      move.l 20(a0),d1
    6aea:	|  |  |      move.l 36(sp),d0
    6aee:	|  |  |      lsl.l #3,d0
    6af0:	|  |  |      add.l d0,d1
    6af2:	|  |  |      move.l 8(sp),d0
    6af6:	|  |  |      move.l d1,-(sp)
    6af8:	|  |  |      move.l d0,-(sp)
    6afa:	|  |  |      jsr 14ac8 <copyVariable>
    6b00:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6b02:	|  |  |      move.l 44(sp),-(sp)
    6b06:	|  |  |      jsr 14f92 <trimStack>
    6b0c:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6b0e:	|  \--|----> tst.l 36(sp)
    6b12:	|     \----- bne.s 6aba <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6b14:	|            movea.l 12(sp),a0
    6b18:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6b1c:	|            movea.l 12(sp),a0
    6b20:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6b24:	|            movea.l 12(sp),a0
    6b28:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6b2e:	|            movea.l 12(sp),a0
    6b32:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6b38:	|            movea.l 12(sp),a0
    6b3c:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    6b40:	|            movea.l 12(sp),a0
    6b44:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    6b48:	|            movea.l 12(sp),a0
    6b4c:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    6b50:	|            movea.l 12(sp),a0
    6b54:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6b58:	|            movea.l 12(sp),a0
    6b5c:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6b60:	|            move.l 12(sp),-(sp)
    6b64:	|            jsr 67bc <restartFunction>
    6b6a:	|            addq.l #4,sp
	return 1;
    6b6c:	|            moveq #1,d0
}
    6b6e:	\----------> movea.l (sp)+,a6
    6b70:	             lea 24(sp),sp
    6b74:	             rts

00006b76 <unfreezeSubs>:

void unfreezeSubs () {
    6b76:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6b78:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    6b7e:	   /----- bra.s 6b9c <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6b80:	/--|----> movea.l (sp),a0
    6b82:	|  |      move.b 56(a0),d0
    6b86:	|  |  /-- beq.s 6b96 <unfreezeSubs+0x20>
    6b88:	|  |  |   movea.l (sp),a0
    6b8a:	|  |  |   move.b 56(a0),d0
    6b8e:	|  |  |   subq.b #1,d0
    6b90:	|  |  |   movea.l (sp),a0
    6b92:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6b96:	|  |  \-> movea.l (sp),a0
    6b98:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6b9c:	|  \----> tst.l (sp)
    6b9e:	\-------- bne.s 6b80 <unfreezeSubs+0xa>
	}
}
    6ba0:	          nop
    6ba2:	          nop
    6ba4:	          addq.l #4,sp
    6ba6:	          rts

00006ba8 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6ba8:	clr.w 1a128 <sliceBusy>
}
    6bae:	nop
    6bb0:	rts

00006bb2 <getNumberedString>:

char * getNumberedString (int value) {
    6bb2:	       lea -56(sp),sp
    6bb6:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6bba:	       move.w 1a128 <sliceBusy>,d0
    6bc0:	   /-- beq.s 6c0a <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6bc2:	   |   move.l 1a7ac <DOSBase>,d0
    6bc8:	   |   movea.l d0,a6
    6bca:	   |   jsr -60(a6)
    6bce:	   |   move.l d0,28(sp)
    6bd2:	   |   move.l 28(sp),d0
    6bd6:	   |   move.l d0,24(sp)
    6bda:	   |   move.l #101012,20(sp)
    6be2:	   |   moveq #76,d0
    6be4:	   |   move.l d0,16(sp)
    6be8:	   |   move.l 1a7ac <DOSBase>,d0
    6bee:	   |   movea.l d0,a6
    6bf0:	   |   move.l 24(sp),d1
    6bf4:	   |   move.l 20(sp),d2
    6bf8:	   |   move.l 16(sp),d3
    6bfc:	   |   jsr -48(a6)
    6c00:	   |   move.l d0,12(sp)
		return NULL;
    6c04:	   |   moveq #0,d0
    6c06:	/--|-- bra.w 6ca6 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6c0a:	|  \-> move.l 1a78c <bigDataFile>,64(sp)
    6c12:	|      move.l 72(sp),d0
    6c16:	|      add.l d0,d0
    6c18:	|      add.l d0,d0
    6c1a:	|      move.l d0,d1
    6c1c:	|      move.l 1a798 <startOfTextIndex>,d0
    6c22:	|      add.l d1,d0
    6c24:	|      move.l d0,60(sp)
    6c28:	|      moveq #-1,d0
    6c2a:	|      move.l d0,56(sp)
    6c2e:	|      move.l 1a7ac <DOSBase>,d0
    6c34:	|      movea.l d0,a6
    6c36:	|      move.l 64(sp),d1
    6c3a:	|      move.l 60(sp),d2
    6c3e:	|      move.l 56(sp),d3
    6c42:	|      jsr -66(a6)
    6c46:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6c4a:	|      move.l 1a78c <bigDataFile>,d0
    6c50:	|      move.l d0,-(sp)
    6c52:	|      jsr 718 <get4bytes>
    6c58:	|      addq.l #4,sp
    6c5a:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6c5e:	|      move.l 1a78c <bigDataFile>,48(sp)
    6c66:	|      move.l 72(sp),44(sp)
    6c6c:	|      moveq #-1,d0
    6c6e:	|      move.l d0,40(sp)
    6c72:	|      move.l 1a7ac <DOSBase>,d0
    6c78:	|      movea.l d0,a6
    6c7a:	|      move.l 48(sp),d1
    6c7e:	|      move.l 44(sp),d2
    6c82:	|      move.l 40(sp),d3
    6c86:	|      jsr -66(a6)
    6c8a:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6c8e:	|      move.l 1a78c <bigDataFile>,d0
    6c94:	|      move.l d0,-(sp)
    6c96:	|      jsr b02 <readString>
    6c9c:	|      addq.l #4,sp
    6c9e:	|      move.l d0,32(sp)
	
	return s;
    6ca2:	|      move.l 32(sp),d0
}
    6ca6:	\----> movem.l (sp)+,d2-d3/a6
    6caa:	       lea 56(sp),sp
    6cae:	       rts

00006cb0 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6cb0:	       lea -32(sp),sp
    6cb4:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6cb8:	       move.w 1a128 <sliceBusy>,d0
    6cbe:	   /-- beq.s 6cda <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6cc0:	   |   pea 18ae1 <PutChar+0xfd7>
    6cc6:	   |   pea 18aff <PutChar+0xff5>
    6ccc:	   |   jsr 17036 <KPrintF>
    6cd2:	   |   addq.l #8,sp
		return 0;
    6cd4:	   |   moveq #0,d0
    6cd6:	/--|-- bra.w 6d6e <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6cda:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    6ce2:	|      move.l 48(sp),d0
    6ce6:	|      add.l d0,d0
    6ce8:	|      add.l d0,d0
    6cea:	|      move.l d0,d1
    6cec:	|      move.l 1a794 <startOfDataIndex>,d0
    6cf2:	|      add.l d1,d0
    6cf4:	|      move.l d0,36(sp)
    6cf8:	|      moveq #-1,d0
    6cfa:	|      move.l d0,32(sp)
    6cfe:	|      move.l 1a7ac <DOSBase>,d0
    6d04:	|      movea.l d0,a6
    6d06:	|      move.l 40(sp),d1
    6d0a:	|      move.l 36(sp),d2
    6d0e:	|      move.l 32(sp),d3
    6d12:	|      jsr -66(a6)
    6d16:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6d1a:	|      move.l 1a78c <bigDataFile>,24(sp)
    6d22:	|      move.l 1a78c <bigDataFile>,d0
    6d28:	|      move.l d0,-(sp)
    6d2a:	|      jsr 718 <get4bytes>
    6d30:	|      addq.l #4,sp
    6d32:	|      move.l d0,20(sp)
    6d36:	|      clr.l 16(sp)
    6d3a:	|      move.l 1a7ac <DOSBase>,d0
    6d40:	|      movea.l d0,a6
    6d42:	|      move.l 24(sp),d1
    6d46:	|      move.l 20(sp),d2
    6d4a:	|      move.l 16(sp),d3
    6d4e:	|      jsr -66(a6)
    6d52:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6d56:	|      move.w #1,1a128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6d5e:	|      move.l 1a78c <bigDataFile>,d0
    6d64:	|      move.l d0,-(sp)
    6d66:	|      jsr 718 <get4bytes>
    6d6c:	|      addq.l #4,sp
}
    6d6e:	\----> movem.l (sp)+,d2-d3/a6
    6d72:	       lea 32(sp),sp
    6d76:	       rts

00006d78 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6d78:	       lea -32(sp),sp
    6d7c:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6d80:	       move.w 1a128 <sliceBusy>,d0
    6d86:	   /-- beq.s 6da2 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6d88:	   |   pea 18ae1 <PutChar+0xfd7>
    6d8e:	   |   pea 18aff <PutChar+0xff5>
    6d94:	   |   jsr 17036 <KPrintF>
    6d9a:	   |   addq.l #8,sp
        return FALSE;
    6d9c:	   |   clr.w d0
    6d9e:	/--|-- bra.w 6e2e <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6da2:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    6daa:	|      move.l 48(sp),d0
    6dae:	|      add.l d0,d0
    6db0:	|      add.l d0,d0
    6db2:	|      move.l d0,d1
    6db4:	|      move.l 1a7a0 <startOfObjectIndex>,d0
    6dba:	|      add.l d1,d0
    6dbc:	|      move.l d0,36(sp)
    6dc0:	|      moveq #-1,d0
    6dc2:	|      move.l d0,32(sp)
    6dc6:	|      move.l 1a7ac <DOSBase>,d0
    6dcc:	|      movea.l d0,a6
    6dce:	|      move.l 40(sp),d1
    6dd2:	|      move.l 36(sp),d2
    6dd6:	|      move.l 32(sp),d3
    6dda:	|      jsr -66(a6)
    6dde:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6de2:	|      move.l 1a78c <bigDataFile>,24(sp)
    6dea:	|      move.l 1a78c <bigDataFile>,d0
    6df0:	|      move.l d0,-(sp)
    6df2:	|      jsr 718 <get4bytes>
    6df8:	|      addq.l #4,sp
    6dfa:	|      move.l d0,20(sp)
    6dfe:	|      moveq #-1,d0
    6e00:	|      move.l d0,16(sp)
    6e04:	|      move.l 1a7ac <DOSBase>,d0
    6e0a:	|      movea.l d0,a6
    6e0c:	|      move.l 24(sp),d1
    6e10:	|      move.l 20(sp),d2
    6e14:	|      move.l 16(sp),d3
    6e18:	|      jsr -66(a6)
    6e1c:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6e20:	|      move.w #1,1a128 <sliceBusy>
    6e28:	|      move.w 1a128 <sliceBusy>,d0
}
    6e2e:	\----> movem.l (sp)+,d2-d3/a6
    6e32:	       lea 32(sp),sp
    6e36:	       rts

00006e38 <openSubSlice>:

BOOL openSubSlice (int num) {
    6e38:	       lea -32(sp),sp
    6e3c:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6e40:	       move.w 1a128 <sliceBusy>,d0
    6e46:	   /-- beq.s 6e62 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6e48:	   |   pea 18ae1 <PutChar+0xfd7>
    6e4e:	   |   pea 18aff <PutChar+0xff5>
    6e54:	   |   jsr 17036 <KPrintF>
    6e5a:	   |   addq.l #8,sp
		return FALSE;
    6e5c:	   |   clr.w d0
    6e5e:	/--|-- bra.w 6eee <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6e62:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    6e6a:	|      move.l 48(sp),d0
    6e6e:	|      add.l d0,d0
    6e70:	|      add.l d0,d0
    6e72:	|      move.l d0,d1
    6e74:	|      move.l 1a79c <startOfSubIndex>,d0
    6e7a:	|      add.l d1,d0
    6e7c:	|      move.l d0,36(sp)
    6e80:	|      moveq #-1,d0
    6e82:	|      move.l d0,32(sp)
    6e86:	|      move.l 1a7ac <DOSBase>,d0
    6e8c:	|      movea.l d0,a6
    6e8e:	|      move.l 40(sp),d1
    6e92:	|      move.l 36(sp),d2
    6e96:	|      move.l 32(sp),d3
    6e9a:	|      jsr -66(a6)
    6e9e:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    6ea2:	|      move.l 1a78c <bigDataFile>,24(sp)
    6eaa:	|      move.l 1a78c <bigDataFile>,d0
    6eb0:	|      move.l d0,-(sp)
    6eb2:	|      jsr 718 <get4bytes>
    6eb8:	|      addq.l #4,sp
    6eba:	|      move.l d0,20(sp)
    6ebe:	|      moveq #-1,d0
    6ec0:	|      move.l d0,16(sp)
    6ec4:	|      move.l 1a7ac <DOSBase>,d0
    6eca:	|      movea.l d0,a6
    6ecc:	|      move.l 24(sp),d1
    6ed0:	|      move.l 20(sp),d2
    6ed4:	|      move.l 16(sp),d3
    6ed8:	|      jsr -66(a6)
    6edc:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    6ee0:	|      move.w #1,1a128 <sliceBusy>
    6ee8:	|      move.w 1a128 <sliceBusy>,d0
}
    6eee:	\----> movem.l (sp)+,d2-d3/a6
    6ef2:	       lea 32(sp),sp
    6ef6:	       rts

00006ef8 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6ef8:	       lea -180(sp),sp
    6efc:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    6f00:	       tst.l 196(sp)
    6f04:	/----- beq.s 6f44 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6f06:	|      move.l 196(sp),1a78c <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6f0e:	|      move.l 196(sp),168(sp)
    6f14:	|      clr.l 164(sp)
    6f18:	|      clr.l 160(sp)
    6f1c:	|      move.l 1a7ac <DOSBase>,d0
    6f22:	|      movea.l d0,a6
    6f24:	|      move.l 168(sp),d1
    6f28:	|      move.l 164(sp),d2
    6f2c:	|      move.l 160(sp),d3
    6f30:	|      jsr -66(a6)
    6f34:	|      move.l d0,156(sp)
    6f38:	|      move.l 156(sp),d0
    6f3c:	|      move.l d0,1a790 <startIndex>
    6f42:	|  /-- bra.s 6f7e <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    6f44:	\--|-> move.l 1a78c <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    6f4c:	   |   move.l 196(sp),184(sp)
    6f52:	   |   move.l 1a790 <startIndex>,d0
    6f58:	   |   move.l d0,180(sp)
    6f5c:	   |   moveq #-1,d0
    6f5e:	   |   move.l d0,176(sp)
    6f62:	   |   move.l 1a7ac <DOSBase>,d0
    6f68:	   |   movea.l d0,a6
    6f6a:	   |   move.l 184(sp),d1
    6f6e:	   |   move.l 180(sp),d2
    6f72:	   |   move.l 176(sp),d3
    6f76:	   |   jsr -66(a6)
    6f7a:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    6f7e:	   \-> clr.w 1a128 <sliceBusy>

	if (skipBefore > numLanguages) {
    6f84:	       move.l 204(sp),d0
    6f88:	       cmp.l 200(sp),d0
    6f8c:	   /-- bls.s 6fa0 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    6f8e:	   |   pea 18b19 <PutChar+0x100f>
    6f94:	   |   jsr 17036 <KPrintF>
    6f9a:	   |   addq.l #4,sp
		skipBefore = 0;
    6f9c:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    6fa0:	   \-> move.l 200(sp),d0
    6fa4:	       sub.l 204(sp),d0
    6fa8:	       move.l d0,188(sp)
	while (skipBefore) {
    6fac:	   /-- bra.s 6fea <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    6fae:	/--|-> move.l 196(sp),24(sp)
    6fb4:	|  |   move.l 196(sp),-(sp)
    6fb8:	|  |   jsr 718 <get4bytes>
    6fbe:	|  |   addq.l #4,sp
    6fc0:	|  |   move.l d0,20(sp)
    6fc4:	|  |   moveq #-1,d0
    6fc6:	|  |   move.l d0,16(sp)
    6fca:	|  |   move.l 1a7ac <DOSBase>,d0
    6fd0:	|  |   movea.l d0,a6
    6fd2:	|  |   move.l 24(sp),d1
    6fd6:	|  |   move.l 20(sp),d2
    6fda:	|  |   move.l 16(sp),d3
    6fde:	|  |   jsr -66(a6)
    6fe2:	|  |   move.l d0,12(sp)
		skipBefore --;
    6fe6:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    6fea:	|  \-> tst.l 204(sp)
    6fee:	\----- bne.s 6fae <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6ff0:	       move.l 196(sp),152(sp)
    6ff6:	       clr.l 148(sp)
    6ffa:	       clr.l 144(sp)
    6ffe:	       move.l 1a7ac <DOSBase>,d0
    7004:	       movea.l d0,a6
    7006:	       move.l 152(sp),d1
    700a:	       move.l 148(sp),d2
    700e:	       move.l 144(sp),d3
    7012:	       jsr -66(a6)
    7016:	       move.l d0,140(sp)
    701a:	       move.l 140(sp),d0
    701e:	       addq.l #4,d0
    7020:	       move.l d0,1a798 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7026:	       move.l 196(sp),136(sp)
    702c:	       move.l 196(sp),-(sp)
    7030:	       jsr 718 <get4bytes>
    7036:	       addq.l #4,sp
    7038:	       move.l d0,132(sp)
    703c:	       moveq #-1,d0
    703e:	       move.l d0,128(sp)
    7042:	       move.l 1a7ac <DOSBase>,d0
    7048:	       movea.l d0,a6
    704a:	       move.l 136(sp),d1
    704e:	       move.l 132(sp),d2
    7052:	       move.l 128(sp),d3
    7056:	       jsr -66(a6)
    705a:	       move.l d0,124(sp)

	while (skipAfter) {
    705e:	   /-- bra.s 709c <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7060:	/--|-> move.l 196(sp),40(sp)
    7066:	|  |   move.l 196(sp),-(sp)
    706a:	|  |   jsr 718 <get4bytes>
    7070:	|  |   addq.l #4,sp
    7072:	|  |   move.l d0,36(sp)
    7076:	|  |   moveq #-1,d0
    7078:	|  |   move.l d0,32(sp)
    707c:	|  |   move.l 1a7ac <DOSBase>,d0
    7082:	|  |   movea.l d0,a6
    7084:	|  |   move.l 40(sp),d1
    7088:	|  |   move.l 36(sp),d2
    708c:	|  |   move.l 32(sp),d3
    7090:	|  |   jsr -66(a6)
    7094:	|  |   move.l d0,28(sp)
		skipAfter --;
    7098:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    709c:	|  \-> tst.l 188(sp)
    70a0:	\----- bne.s 7060 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    70a2:	       move.l 196(sp),120(sp)
    70a8:	       clr.l 116(sp)
    70ac:	       clr.l 112(sp)
    70b0:	       move.l 1a7ac <DOSBase>,d0
    70b6:	       movea.l d0,a6
    70b8:	       move.l 120(sp),d1
    70bc:	       move.l 116(sp),d2
    70c0:	       move.l 112(sp),d3
    70c4:	       jsr -66(a6)
    70c8:	       move.l d0,108(sp)
    70cc:	       move.l 108(sp),d0
    70d0:	       addq.l #4,d0
    70d2:	       move.l d0,1a79c <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    70d8:	       move.l 196(sp),104(sp)
    70de:	       move.l 196(sp),-(sp)
    70e2:	       jsr 718 <get4bytes>
    70e8:	       addq.l #4,sp
    70ea:	       move.l d0,100(sp)
    70ee:	       clr.l 96(sp)
    70f2:	       move.l 1a7ac <DOSBase>,d0
    70f8:	       movea.l d0,a6
    70fa:	       move.l 104(sp),d1
    70fe:	       move.l 100(sp),d2
    7102:	       move.l 96(sp),d3
    7106:	       jsr -66(a6)
    710a:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    710e:	       move.l 196(sp),88(sp)
    7114:	       clr.l 84(sp)
    7118:	       clr.l 80(sp)
    711c:	       move.l 1a7ac <DOSBase>,d0
    7122:	       movea.l d0,a6
    7124:	       move.l 88(sp),d1
    7128:	       move.l 84(sp),d2
    712c:	       move.l 80(sp),d3
    7130:	       jsr -66(a6)
    7134:	       move.l d0,76(sp)
    7138:	       move.l 76(sp),d0
    713c:	       addq.l #4,d0
    713e:	       move.l d0,1a7a0 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7144:	       move.l 196(sp),72(sp)
    714a:	       move.l 196(sp),-(sp)
    714e:	       jsr 718 <get4bytes>
    7154:	       addq.l #4,sp
    7156:	       move.l d0,68(sp)
    715a:	       clr.l 64(sp)
    715e:	       move.l 1a7ac <DOSBase>,d0
    7164:	       movea.l d0,a6
    7166:	       move.l 72(sp),d1
    716a:	       move.l 68(sp),d2
    716e:	       move.l 64(sp),d3
    7172:	       jsr -66(a6)
    7176:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    717a:	       move.l 196(sp),56(sp)
    7180:	       clr.l 52(sp)
    7184:	       clr.l 48(sp)
    7188:	       move.l 1a7ac <DOSBase>,d0
    718e:	       movea.l d0,a6
    7190:	       move.l 56(sp),d1
    7194:	       move.l 52(sp),d2
    7198:	       move.l 48(sp),d3
    719c:	       jsr -66(a6)
    71a0:	       move.l d0,44(sp)
    71a4:	       move.l 44(sp),d0
    71a8:	       move.l d0,1a794 <startOfDataIndex>
    71ae:	       nop
    71b0:	       movem.l (sp)+,d2-d3/a6
    71b4:	       lea 180(sp),sp
    71b8:	       rts

000071ba <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    71ba:	    lea -20(sp),sp
    71be:	    move.l a6,-(sp)
    71c0:	    move.l d7,-(sp)
	APTR vbr = 0;
    71c2:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    71c6:	    move.w #20090,10(sp)
    71cc:	    move.w #2049,12(sp)
    71d2:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    71d8:	    movea.l 1a7a4 <SysBase>,a0
    71de:	    move.w 296(a0),d0
    71e2:	    move.w d0,d0
    71e4:	    andi.l #65535,d0
    71ea:	    moveq #1,d1
    71ec:	    and.l d1,d0
    71ee:	/-- beq.s 721c <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    71f0:	|   lea 28(sp),a0
    71f4:	|   lea -18(a0),a0
    71f8:	|   move.l a0,20(sp)
    71fc:	|   move.l 1a7a4 <SysBase>,d0
    7202:	|   movea.l d0,a6
    7204:	|   move.l 20(sp),d7
    7208:	|   exg d7,a5
    720a:	|   jsr -30(a6)
    720e:	|   exg d7,a5
    7210:	|   move.l d0,16(sp)
    7214:	|   move.l 16(sp),d0
    7218:	|   move.l d0,24(sp)

	return vbr;
    721c:	\-> move.l 24(sp),d0
}
    7220:	    move.l (sp)+,d7
    7222:	    movea.l (sp)+,a6
    7224:	    lea 20(sp),sp
    7228:	    rts

0000722a <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    722a:	movea.l 1a7ca <VBR>,a0
    7230:	lea 108(a0),a0
    7234:	move.l 4(sp),(a0)
}
    7238:	nop
    723a:	rts

0000723c <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    723c:	movea.l 1a7ca <VBR>,a0
    7242:	move.l 108(a0),d0
}
    7246:	rts

00007248 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7248:	       subq.l #8,sp
    724a:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    724c:	       pea 18b62 <PutChar+0x1058>
    7252:	       jsr 17036 <KPrintF>
    7258:	       addq.l #4,sp
	Forbid();
    725a:	       move.l 1a7a4 <SysBase>,d0
    7260:	       movea.l d0,a6
    7262:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7266:	       pea 18b7a <PutChar+0x1070>
    726c:	       jsr 17036 <KPrintF>
    7272:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7274:	       movea.l 1a7a8 <custom>,a0
    727a:	       move.w 16(a0),d0
    727e:	       move.w d0,1a7c8 <SystemADKCON>
	SystemInts=custom->intenar;
    7284:	       movea.l 1a7a8 <custom>,a0
    728a:	       move.w 28(a0),d0
    728e:	       move.w d0,1a7c4 <SystemInts>
	SystemDMA=custom->dmaconr;
    7294:	       movea.l 1a7a8 <custom>,a0
    729a:	       move.w 2(a0),d0
    729e:	       move.w d0,1a7c6 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    72a4:	       movea.l 1a7b0 <GfxBase>,a0
    72aa:	       move.l 34(a0),d0
    72ae:	       move.l d0,1a7d2 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    72b4:	       pea 18b98 <PutChar+0x108e>
    72ba:	       jsr 17036 <KPrintF>
    72c0:	       addq.l #4,sp
	LoadView(0);
    72c2:	       clr.l 4(sp)
    72c6:	       move.l 1a7b0 <GfxBase>,d0
    72cc:	       movea.l d0,a6
    72ce:	       movea.l 4(sp),a1
    72d2:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    72d6:	       pea 18bae <PutChar+0x10a4>
    72dc:	       jsr 17036 <KPrintF>
    72e2:	       addq.l #4,sp
	WaitTOF();
    72e4:	       move.l 1a7b0 <GfxBase>,d0
    72ea:	       movea.l d0,a6
    72ec:	       jsr -270(a6)
	WaitTOF();
    72f0:	       move.l 1a7b0 <GfxBase>,d0
    72f6:	       movea.l d0,a6
    72f8:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    72fc:	       pea 18bc3 <PutChar+0x10b9>
    7302:	       jsr 17036 <KPrintF>
    7308:	       addq.l #4,sp
	WaitVbl();
    730a:	       jsr 16f6a <WaitVbl>
	WaitVbl();
    7310:	       jsr 16f6a <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7316:	       pea 18bd8 <PutChar+0x10ce>
    731c:	       jsr 17036 <KPrintF>
    7322:	       addq.l #4,sp
	OwnBlitter();
    7324:	       move.l 1a7b0 <GfxBase>,d0
    732a:	       movea.l d0,a6
    732c:	       jsr -456(a6)
	WaitBlit();	
    7330:	       move.l 1a7b0 <GfxBase>,d0
    7336:	       movea.l d0,a6
    7338:	       jsr -228(a6)
	Disable();
    733c:	       move.l 1a7a4 <SysBase>,d0
    7342:	       movea.l d0,a6
    7344:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7348:	       pea 18bf9 <PutChar+0x10ef>
    734e:	       jsr 17036 <KPrintF>
    7354:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7356:	       movea.l 1a7a8 <custom>,a0
    735c:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7362:	       pea 18c10 <PutChar+0x1106>
    7368:	       jsr 17036 <KPrintF>
    736e:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7370:	       clr.l 8(sp)
    7374:	   /-- bra.s 7392 <TakeSystem+0x14a>
		custom->color[a]=0;
    7376:	/--|-> movea.l 1a7a8 <custom>,a0
    737c:	|  |   move.l 8(sp),d0
    7380:	|  |   addi.l #192,d0
    7386:	|  |   add.l d0,d0
    7388:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    738e:	|  |   addq.l #1,8(sp)
    7392:	|  \-> moveq #31,d0
    7394:	|      cmp.l 8(sp),d0
    7398:	\----- bge.s 7376 <TakeSystem+0x12e>

	WaitVbl();
    739a:	       jsr 16f6a <WaitVbl>
	WaitVbl();
    73a0:	       jsr 16f6a <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    73a6:	       pea 18c35 <PutChar+0x112b>
    73ac:	       jsr 17036 <KPrintF>
    73b2:	       addq.l #4,sp
	VBR=GetVBR();
    73b4:	       jsr 71ba <GetVBR>
    73ba:	       move.l d0,1a7ca <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    73c0:	       jsr 723c <GetInterruptHandler>
    73c6:	       move.l d0,1a7ce <SystemIrq>
}
    73cc:	       nop
    73ce:	       movea.l (sp)+,a6
    73d0:	       addq.l #8,sp
    73d2:	       rts

000073d4 <FreeSystem>:

void FreeSystem() { 
    73d4:	subq.l #4,sp
    73d6:	move.l a6,-(sp)
	WaitVbl();
    73d8:	jsr 16f6a <WaitVbl>
	WaitBlit();
    73de:	move.l 1a7b0 <GfxBase>,d0
    73e4:	movea.l d0,a6
    73e6:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    73ea:	movea.l 1a7a8 <custom>,a0
    73f0:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    73f6:	movea.l 1a7a8 <custom>,a0
    73fc:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7402:	movea.l 1a7a8 <custom>,a0
    7408:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    740e:	move.l 1a7ce <SystemIrq>,d0
    7414:	move.l d0,-(sp)
    7416:	jsr 722a <SetInterruptHandler>
    741c:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    741e:	movea.l 1a7b0 <GfxBase>,a0
    7424:	move.l 38(a0),d0
    7428:	movea.l 1a7a8 <custom>,a0
    742e:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7432:	movea.l 1a7b0 <GfxBase>,a0
    7438:	move.l 50(a0),d0
    743c:	movea.l 1a7a8 <custom>,a0
    7442:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7446:	movea.l 1a7a8 <custom>,a0
    744c:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7452:	move.w 1a7c6 <SystemDMA>,d0
    7458:	movea.l 1a7a8 <custom>,a0
    745e:	ori.w #-32768,d0
    7462:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7466:	move.w 1a7c8 <SystemADKCON>,d0
    746c:	movea.l 1a7a8 <custom>,a0
    7472:	ori.w #-32768,d0
    7476:	move.w d0,158(a0)

	WaitBlit();	
    747a:	move.l 1a7b0 <GfxBase>,d0
    7480:	movea.l d0,a6
    7482:	jsr -228(a6)
	DisownBlitter();
    7486:	move.l 1a7b0 <GfxBase>,d0
    748c:	movea.l d0,a6
    748e:	jsr -462(a6)
	Enable();
    7492:	move.l 1a7a4 <SysBase>,d0
    7498:	movea.l d0,a6
    749a:	jsr -126(a6)

	LoadView(ActiView);
    749e:	move.l 1a7d2 <ActiView>,4(sp)
    74a6:	move.l 1a7b0 <GfxBase>,d0
    74ac:	movea.l d0,a6
    74ae:	movea.l 4(sp),a1
    74b2:	jsr -222(a6)
	WaitTOF();
    74b6:	move.l 1a7b0 <GfxBase>,d0
    74bc:	movea.l d0,a6
    74be:	jsr -270(a6)
	WaitTOF();
    74c2:	move.l 1a7b0 <GfxBase>,d0
    74c8:	movea.l d0,a6
    74ca:	jsr -270(a6)

	Permit();
    74ce:	move.l 1a7a4 <SysBase>,d0
    74d4:	movea.l d0,a6
    74d6:	jsr -138(a6)
}
    74da:	nop
    74dc:	movea.l (sp)+,a6
    74de:	addq.l #4,sp
    74e0:	rts

000074e2 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    74e2:	    lea -132(sp),sp
    74e6:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    74ea:	    move.l #512,140(sp)
  	*bp = 0;
    74f2:	    movea.l 140(sp),a0
    74f6:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    74f8:	    movea.w #4,a0
    74fc:	    move.l (a0),d0
    74fe:	    move.l d0,1a7a4 <SysBase>
	custom = (struct Custom*)0xdff000;	
    7504:	    move.l #14675968,1a7a8 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    750e:	    move.l #101465,136(sp)
    7516:	    clr.l 132(sp)
    751a:	    move.l 1a7a4 <SysBase>,d0
    7520:	    movea.l d0,a6
    7522:	    movea.l 136(sp),a1
    7526:	    move.l 132(sp),d0
    752a:	    jsr -552(a6)
    752e:	    move.l d0,128(sp)
    7532:	    move.l 128(sp),d0
    7536:	    move.l d0,1a7b0 <GfxBase>
	if (!GfxBase)
    753c:	    move.l 1a7b0 <GfxBase>,d0
    7542:	/-- bne.s 7558 <main+0x76>
		Exit(0);
    7544:	|   clr.l 124(sp)
    7548:	|   move.l 1a7ac <DOSBase>,d0
    754e:	|   movea.l d0,a6
    7550:	|   move.l 124(sp),d1
    7554:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    7558:	\-> move.l #101482,120(sp)
    7560:	    clr.l 116(sp)
    7564:	    move.l 1a7a4 <SysBase>,d0
    756a:	    movea.l d0,a6
    756c:	    movea.l 120(sp),a1
    7570:	    move.l 116(sp),d0
    7574:	    jsr -552(a6)
    7578:	    move.l d0,112(sp)
    757c:	    move.l 112(sp),d0
    7580:	    move.l d0,1a7ac <DOSBase>
	if (!DOSBase)
    7586:	    move.l 1a7ac <DOSBase>,d0
    758c:	/-- bne.s 75a2 <main+0xc0>
		Exit(0);
    758e:	|   clr.l 108(sp)
    7592:	|   move.l 1a7ac <DOSBase>,d0
    7598:	|   movea.l d0,a6
    759a:	|   move.l 108(sp),d1
    759e:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    75a2:	\-> move.l #101494,104(sp)
    75aa:	    clr.l 100(sp)
    75ae:	    move.l 1a7a4 <SysBase>,d0
    75b4:	    movea.l d0,a6
    75b6:	    movea.l 104(sp),a1
    75ba:	    move.l 100(sp),d0
    75be:	    jsr -552(a6)
    75c2:	    move.l d0,96(sp)
    75c6:	    move.l 96(sp),d0
    75ca:	    move.l d0,1a7b4 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    75d0:	    move.l 1a7b4 <MathIeeeSingBasBase>,d0
    75d6:	/-- bne.s 75ec <main+0x10a>
		Exit(0);	
    75d8:	|   clr.l 92(sp)
    75dc:	|   move.l 1a7ac <DOSBase>,d0
    75e2:	|   movea.l d0,a6
    75e4:	|   move.l 92(sp),d1
    75e8:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    75ec:	\-> move.l #101518,88(sp)
    75f4:	    clr.l 84(sp)
    75f8:	    move.l 1a7a4 <SysBase>,d0
    75fe:	    movea.l d0,a6
    7600:	    movea.l 88(sp),a1
    7604:	    move.l 84(sp),d0
    7608:	    jsr -552(a6)
    760c:	    move.l d0,80(sp)
    7610:	    move.l 80(sp),d0
    7614:	    move.l d0,1a7b8 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    761a:	    move.l 1a7b8 <MathIeeeSingTransBase>,d0
    7620:	/-- bne.s 7636 <main+0x154>
		Exit(0);
    7622:	|   clr.l 76(sp)
    7626:	|   move.l 1a7ac <DOSBase>,d0
    762c:	|   movea.l d0,a6
    762e:	|   move.l 76(sp),d1
    7632:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7636:	\-> move.l #101544,72(sp)
    763e:	    clr.l 68(sp)
    7642:	    move.l 1a7a4 <SysBase>,d0
    7648:	    movea.l d0,a6
    764a:	    movea.l 72(sp),a1
    764e:	    move.l 68(sp),d0
    7652:	    jsr -552(a6)
    7656:	    move.l d0,64(sp)
    765a:	    move.l 64(sp),d0
    765e:	    move.l d0,1a7c0 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    7664:	    move.l 1a7c0 <MathIeeeDoubTransBase>,d0
    766a:	/-- bne.s 7680 <main+0x19e>
		Exit(0);
    766c:	|   clr.l 60(sp)
    7670:	|   move.l 1a7ac <DOSBase>,d0
    7676:	|   movea.l d0,a6
    7678:	|   move.l 60(sp),d1
    767c:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    7680:	\-> move.l #101570,56(sp)
    7688:	    clr.l 52(sp)
    768c:	    move.l 1a7a4 <SysBase>,d0
    7692:	    movea.l d0,a6
    7694:	    movea.l 56(sp),a1
    7698:	    move.l 52(sp),d0
    769c:	    jsr -552(a6)
    76a0:	    move.l d0,48(sp)
    76a4:	    move.l 48(sp),d0
    76a8:	    move.l d0,1a7bc <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    76ae:	    move.l 1a7bc <MathIeeeDoubBasBase>,d0
    76b4:	/-- bne.s 76ca <main+0x1e8>
		Exit(0);
    76b6:	|   clr.l 44(sp)
    76ba:	|   move.l 1a7ac <DOSBase>,d0
    76c0:	|   movea.l d0,a6
    76c2:	|   move.l 44(sp),d1
    76c6:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 027!\n");
    76ca:	\-> pea 18cda <PutChar+0x11d0>
    76d0:	    jsr 17036 <KPrintF>
    76d6:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 027!\n", 25);
    76d8:	    move.l 1a7ac <DOSBase>,d0
    76de:	    movea.l d0,a6
    76e0:	    jsr -60(a6)
    76e4:	    move.l d0,40(sp)
    76e8:	    move.l 40(sp),d0
    76ec:	    move.l d0,36(sp)
    76f0:	    move.l #101626,32(sp)
    76f8:	    moveq #25,d0
    76fa:	    move.l d0,28(sp)
    76fe:	    move.l 1a7ac <DOSBase>,d0
    7704:	    movea.l d0,a6
    7706:	    move.l 36(sp),d1
    770a:	    move.l 32(sp),d2
    770e:	    move.l 28(sp),d3
    7712:	    jsr -48(a6)
    7716:	    move.l d0,24(sp)
	Delay(50);
    771a:	    moveq #50,d0
    771c:	    move.l d0,20(sp)
    7720:	    move.l 1a7ac <DOSBase>,d0
    7726:	    movea.l d0,a6
    7728:	    move.l 20(sp),d1
    772c:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    7730:	    pea 18d13 <PutChar+0x1209>
    7736:	    jsr 17036 <KPrintF>
    773c:	    addq.l #4,sp
	TakeSystem();
    773e:	    jsr 7248 <TakeSystem>
	KPrintF("System Taken\n");
    7744:	    pea 18d22 <PutChar+0x1218>
    774a:	    jsr 17036 <KPrintF>
    7750:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    7752:	    movea.l 1a7a8 <custom>,a0
    7758:	    move.w #-30721,150(a0)
	WaitVbl();
    775e:	    jsr 16f6a <WaitVbl>

	KPrintF("Starting main_sludge\n");
    7764:	    pea 18d30 <PutChar+0x1226>
    776a:	    jsr 17036 <KPrintF>
    7770:	    addq.l #4,sp
	main_sludge(argc, argv);	
    7772:	    move.l 152(sp),-(sp)
    7776:	    move.l 152(sp),-(sp)
    777a:	    jsr 407e <main_sludge>
    7780:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    7782:	    jsr 73d4 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    7788:	    move.l 1a7ac <DOSBase>,16(sp)
    7790:	    move.l 1a7a4 <SysBase>,d0
    7796:	    movea.l d0,a6
    7798:	    movea.l 16(sp),a1
    779c:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    77a0:	    move.l 1a7b0 <GfxBase>,12(sp)
    77a8:	    move.l 1a7a4 <SysBase>,d0
    77ae:	    movea.l d0,a6
    77b0:	    movea.l 12(sp),a1
    77b4:	    jsr -414(a6)
    77b8:	    moveq #0,d0
}
    77ba:	    movem.l (sp)+,d2-d3/a6
    77be:	    lea 132(sp),sp
    77c2:	    rts

000077c4 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    77c4:	    lea -16(sp),sp
    77c8:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    77ca:	    moveq #8,d0
    77cc:	    move.l d0,16(sp)
    77d0:	    clr.l 12(sp)
    77d4:	    move.l 1a7a4 <SysBase>,d0
    77da:	    movea.l d0,a6
    77dc:	    move.l 16(sp),d0
    77e0:	    move.l 12(sp),d1
    77e4:	    jsr -684(a6)
    77e8:	    move.l d0,8(sp)
    77ec:	    move.l 8(sp),d0
    77f0:	    move.l d0,4(sp)
	if (!newStat) {
    77f4:	/-- bne.s 7824 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    77f6:	|   movea.l 1a12a <nowStatus>,a0
    77fc:	|   move.l (a0),d0
    77fe:	|   movea.l 4(sp),a0
    7802:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    7806:	|   pea 18786 <PutChar+0xc7c>
    780c:	|   jsr b8 <copyString>
    7812:	|   addq.l #4,sp
    7814:	|   movea.l 4(sp),a0
    7818:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    781a:	|   movea.l 1a12a <nowStatus>,a0
    7820:	|   move.l 4(sp),(a0)
	}
}
    7824:	\-> nop
    7826:	    movea.l (sp)+,a6
    7828:	    lea 16(sp),sp
    782c:	    rts

0000782e <clearStatusBar>:

void clearStatusBar () {
    782e:	       lea -16(sp),sp
    7832:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    7834:	       movea.l 1a12a <nowStatus>,a0
    783a:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    783e:	       movea.l 1a12a <nowStatus>,a0
    7844:	       moveq #-1,d0
    7846:	       move.l d0,6(a0)
	while (stat) {
    784a:	   /-- bra.s 788a <clearStatusBar+0x5c>
		kill = stat;
    784c:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    7852:	|  |   movea.l 16(sp),a0
    7856:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    785c:	|  |   movea.l 12(sp),a0
    7860:	|  |   move.l (a0),8(sp)
    7864:	|  |   move.l 1a7a4 <SysBase>,d0
    786a:	|  |   movea.l d0,a6
    786c:	|  |   movea.l 8(sp),a1
    7870:	|  |   jsr -690(a6)
		FreeVec(kill);
    7874:	|  |   move.l 12(sp),4(sp)
    787a:	|  |   move.l 1a7a4 <SysBase>,d0
    7880:	|  |   movea.l d0,a6
    7882:	|  |   movea.l 4(sp),a1
    7886:	|  |   jsr -690(a6)
	while (stat) {
    788a:	|  \-> tst.l 16(sp)
    788e:	\----- bne.s 784c <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    7890:	       movea.l 1a12a <nowStatus>,a0
    7896:	       clr.l (a0)
}
    7898:	       nop
    789a:	       movea.l (sp)+,a6
    789c:	       lea 16(sp),sp
    78a0:	       rts

000078a2 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    78a2:	clr.l 1a7d6 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    78a8:	move.w #-1,1a7da <mainStatus+0x4>
	mainStatus.litStatus = -1;
    78b0:	moveq #-1,d0
    78b2:	move.l d0,1a7dc <mainStatus+0x6>
	mainStatus.statusX = 10;
    78b8:	moveq #10,d0
    78ba:	move.l d0,1a7e0 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    78c0:	movea.l 1a6fc <winHeight>,a0
    78c6:	lea -15(a0),a0
    78ca:	move.l a0,d0
    78cc:	move.l d0,1a7e4 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    78d2:	nop
    78d4:	rts

000078d6 <killLastStatus>:

void killLastStatus () {
    78d6:	    lea -12(sp),sp
    78da:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    78dc:	    movea.l 1a12a <nowStatus>,a0
    78e2:	    move.l (a0),d0
    78e4:	/-- beq.s 792e <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    78e6:	|   movea.l 1a12a <nowStatus>,a0
    78ec:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    78f0:	|   movea.l 1a12a <nowStatus>,a0
    78f6:	|   movea.l 12(sp),a1
    78fa:	|   move.l 4(a1),d0
    78fe:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    7900:	|   movea.l 12(sp),a0
    7904:	|   move.l (a0),8(sp)
    7908:	|   move.l 1a7a4 <SysBase>,d0
    790e:	|   movea.l d0,a6
    7910:	|   movea.l 8(sp),a1
    7914:	|   jsr -690(a6)
		FreeVec(kill);
    7918:	|   move.l 12(sp),4(sp)
    791e:	|   move.l 1a7a4 <SysBase>,d0
    7924:	|   movea.l d0,a6
    7926:	|   movea.l 4(sp),a1
    792a:	|   jsr -690(a6)
	}
}
    792e:	\-> nop
    7930:	    movea.l (sp)+,a6
    7932:	    lea 12(sp),sp
    7936:	    rts

00007938 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    7938:	movea.l 1a12a <nowStatus>,a0
    793e:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    7944:	movea.l 1a12a <nowStatus>,a0
    794a:	move.l 8(sp),14(a0)
}
    7950:	nop
    7952:	rts

00007954 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    7954:	       lea -100(sp),sp
    7958:	       move.l a6,-(sp)
    795a:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    795c:	       movea.l 1a12a <nowStatus>,a0
    7962:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7966:	       movea.l 1a12a <nowStatus>,a0
    796c:	       move.w 4(a0),d0
    7970:	       move.w d0,d0
    7972:	       andi.l #65535,d0
    7978:	       move.l 112(sp),-(sp)
    797c:	       move.l d0,-(sp)
    797e:	       jsr 8d0 <put2bytes>
    7984:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7986:	       movea.l 1a12a <nowStatus>,a0
    798c:	       move.l 6(a0),d0
    7990:	       move.l d0,d0
    7992:	       movea.w d0,a0
    7994:	       move.l 112(sp),-(sp)
    7998:	       move.l a0,-(sp)
    799a:	       jsr a9c <putSigned>
    79a0:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    79a2:	       movea.l 1a12a <nowStatus>,a0
    79a8:	       move.l 10(a0),d0
    79ac:	       move.l 112(sp),-(sp)
    79b0:	       move.l d0,-(sp)
    79b2:	       jsr 8d0 <put2bytes>
    79b8:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    79ba:	       movea.l 1a12a <nowStatus>,a0
    79c0:	       move.l 14(a0),d0
    79c4:	       move.l 112(sp),-(sp)
    79c8:	       move.l d0,-(sp)
    79ca:	       jsr 8d0 <put2bytes>
    79d0:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    79d2:	       move.l 112(sp),100(sp)
    79d8:	       movea.l 1a12a <nowStatus>,a0
    79de:	       move.l 18(a0),96(sp)
    79e4:	       move.l 1a7ac <DOSBase>,d0
    79ea:	       movea.l d0,a6
    79ec:	       move.l 100(sp),d1
    79f0:	       move.l 96(sp),d2
    79f4:	       jsr -312(a6)
    79f8:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    79fc:	       move.l 112(sp),88(sp)
    7a02:	       movea.l 1a12a <nowStatus>,a0
    7a08:	       move.l 22(a0),84(sp)
    7a0e:	       move.l 1a7ac <DOSBase>,d0
    7a14:	       movea.l d0,a6
    7a16:	       move.l 88(sp),d1
    7a1a:	       move.l 84(sp),d2
    7a1e:	       jsr -312(a6)
    7a22:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    7a26:	       move.l 112(sp),76(sp)
    7a2c:	       movea.l 1a12a <nowStatus>,a0
    7a32:	       move.l 26(a0),72(sp)
    7a38:	       move.l 1a7ac <DOSBase>,d0
    7a3e:	       movea.l d0,a6
    7a40:	       move.l 76(sp),d1
    7a44:	       move.l 72(sp),d2
    7a48:	       jsr -312(a6)
    7a4c:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    7a50:	       move.l 112(sp),64(sp)
    7a56:	       movea.l 1a12a <nowStatus>,a0
    7a5c:	       move.l 30(a0),60(sp)
    7a62:	       move.l 1a7ac <DOSBase>,d0
    7a68:	       movea.l d0,a6
    7a6a:	       move.l 64(sp),d1
    7a6e:	       move.l 60(sp),d2
    7a72:	       jsr -312(a6)
    7a76:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7a7a:	       move.l 112(sp),52(sp)
    7a80:	       movea.l 1a12a <nowStatus>,a0
    7a86:	       move.l 34(a0),48(sp)
    7a8c:	       move.l 1a7ac <DOSBase>,d0
    7a92:	       movea.l d0,a6
    7a94:	       move.l 52(sp),d1
    7a98:	       move.l 48(sp),d2
    7a9c:	       jsr -312(a6)
    7aa0:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7aa4:	       move.l 112(sp),40(sp)
    7aaa:	       movea.l 1a12a <nowStatus>,a0
    7ab0:	       move.l 38(a0),36(sp)
    7ab6:	       move.l 1a7ac <DOSBase>,d0
    7abc:	       movea.l d0,a6
    7abe:	       move.l 40(sp),d1
    7ac2:	       move.l 36(sp),d2
    7ac6:	       jsr -312(a6)
    7aca:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7ace:	   /-- bra.s 7b12 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7ad0:	/--|-> move.l 112(sp),16(sp)
    7ad6:	|  |   moveq #1,d0
    7ad8:	|  |   move.l d0,12(sp)
    7adc:	|  |   move.l 1a7ac <DOSBase>,d0
    7ae2:	|  |   movea.l d0,a6
    7ae4:	|  |   move.l 16(sp),d1
    7ae8:	|  |   move.l 12(sp),d2
    7aec:	|  |   jsr -312(a6)
    7af0:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7af4:	|  |   movea.l 104(sp),a0
    7af8:	|  |   move.l (a0),d0
    7afa:	|  |   move.l 112(sp),-(sp)
    7afe:	|  |   move.l d0,-(sp)
    7b00:	|  |   jsr bd8 <writeString>
    7b06:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7b08:	|  |   movea.l 104(sp),a0
    7b0c:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7b12:	|  \-> tst.l 104(sp)
    7b16:	\----- bne.s 7ad0 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7b18:	       move.l 112(sp),28(sp)
    7b1e:	       clr.l 24(sp)
    7b22:	       move.l 1a7ac <DOSBase>,d0
    7b28:	       movea.l d0,a6
    7b2a:	       move.l 28(sp),d1
    7b2e:	       move.l 24(sp),d2
    7b32:	       jsr -312(a6)
    7b36:	       move.l d0,20(sp)
}
    7b3a:	       nop
    7b3c:	       move.l (sp)+,d2
    7b3e:	       movea.l (sp)+,a6
    7b40:	       lea 100(sp),sp
    7b44:	       rts

00007b46 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7b46:	movea.l 1a12a <nowStatus>,a0
    7b4c:	move.l 4(sp),6(a0)
}
    7b52:	nop
    7b54:	rts

00007b56 <setStatusBar>:

void setStatusBar (char * txt) {
    7b56:	    subq.l #4,sp
    7b58:	    move.l a6,-(sp)
    7b5a:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    7b5c:	    movea.l 1a12a <nowStatus>,a0
    7b62:	    move.l (a0),d0
    7b64:	/-- beq.s 7b98 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7b66:	|   movea.l 1a12a <nowStatus>,a0
    7b6c:	|   movea.l (a0),a0
    7b6e:	|   move.l (a0),8(sp)
    7b72:	|   move.l 1a7a4 <SysBase>,d0
    7b78:	|   movea.l d0,a6
    7b7a:	|   movea.l 8(sp),a1
    7b7e:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7b82:	|   movea.l 1a12a <nowStatus>,a0
    7b88:	|   movea.l (a0),a2
    7b8a:	|   move.l 16(sp),-(sp)
    7b8e:	|   jsr b8 <copyString>
    7b94:	|   addq.l #4,sp
    7b96:	|   move.l d0,(a2)
	}
}
    7b98:	\-> nop
    7b9a:	    movea.l (sp)+,a2
    7b9c:	    movea.l (sp)+,a6
    7b9e:	    addq.l #4,sp
    7ba0:	    rts

00007ba2 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7ba2:	       movea.l 1a12a <nowStatus>,a0
    7ba8:	       move.l (a0),d0
    7baa:	/----- beq.s 7bb8 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7bac:	|      movea.l 1a12a <nowStatus>,a0
    7bb2:	|      movea.l (a0),a0
    7bb4:	|      move.l (a0),d0
    7bb6:	|  /-- bra.s 7bbe <statusBarText+0x1c>
	} else {
		return "";
    7bb8:	\--|-> move.l #100230,d0
	}
    7bbe:	   \-> rts

00007bc0 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7bc0:	       lea -28(sp),sp
    7bc4:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7bc8:	       move.l 52(sp),-(sp)
    7bcc:	       jsr 156f8 <stringWidth>
    7bd2:	       addq.l #4,sp
    7bd4:	       asr.l #1,d0
    7bd6:	       move.l d0,-(sp)
    7bd8:	       jsr 17472 <__floatsisf>
    7bde:	       addq.l #4,sp
    7be0:	       move.l d0,d1
    7be2:	       move.l 1a142 <cameraZoom>,d0
    7be8:	       move.l d0,-(sp)
    7bea:	       move.l d1,-(sp)
    7bec:	       jsr 1731e <__divsf3>
    7bf2:	       addq.l #8,sp
    7bf4:	       move.l d0,-(sp)
    7bf6:	       jsr 1740a <__fixsfsi>
    7bfc:	       addq.l #4,sp
    7bfe:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7c02:	       move.l 56(sp),d0
    7c06:	       sub.l 44(sp),d0
    7c0a:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7c0e:	       move.l 56(sp),d0
    7c12:	       add.l 44(sp),d0
    7c16:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7c1a:	       moveq #12,d0
    7c1c:	       move.l d0,32(sp)
    7c20:	       clr.l 28(sp)
    7c24:	       move.l 1a7a4 <SysBase>,d0
    7c2a:	       movea.l d0,a6
    7c2c:	       move.l 32(sp),d0
    7c30:	       move.l 28(sp),d1
    7c34:	       jsr -684(a6)
    7c38:	       move.l d0,24(sp)
    7c3c:	       move.l 24(sp),d0
    7c40:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7c44:	       movea.l 1a800 <speech>,a0
    7c4a:	       move.l 4(a0),d0
    7c4e:	       movea.l 20(sp),a0
    7c52:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7c56:	       move.l 52(sp),-(sp)
    7c5a:	       jsr b8 <copyString>
    7c60:	       addq.l #4,sp
    7c62:	       movea.l 20(sp),a0
    7c66:	       move.l d0,(a0)
	newLine -> x = xx1;
    7c68:	       movea.l 20(sp),a0
    7c6c:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7c72:	       movea.l 1a800 <speech>,a0
    7c78:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7c7e:	       moveq #4,d0
    7c80:	       cmp.l 40(sp),d0
    7c84:	   /-- blt.s 7ca6 <addSpeechLine+0xe6>
    7c86:	   |   movea.l 60(sp),a0
    7c8a:	   |   move.l (a0),d1
    7c8c:	   |   moveq #5,d0
    7c8e:	   |   sub.l 40(sp),d0
    7c92:	   |   cmp.l d1,d0
    7c94:	   +-- ble.s 7ca6 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7c96:	   |   moveq #5,d0
    7c98:	   |   sub.l 40(sp),d0
    7c9c:	   |   movea.l 60(sp),a0
    7ca0:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7ca2:	/--|-- bra.w 7dd2 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7ca6:	|  \-> move.l 36(sp),-(sp)
    7caa:	|      jsr 17472 <__floatsisf>
    7cb0:	|      addq.l #4,sp
    7cb2:	|      move.l d0,d2
    7cb4:	|      move.l 1a6f8 <winWidth>,d0
    7cba:	|      move.l d0,-(sp)
    7cbc:	|      jsr 1749a <__floatunsisf>
    7cc2:	|      addq.l #4,sp
    7cc4:	|      move.l d0,d1
    7cc6:	|      move.l 1a142 <cameraZoom>,d0
    7ccc:	|      move.l d0,-(sp)
    7cce:	|      move.l d1,-(sp)
    7cd0:	|      jsr 1731e <__divsf3>
    7cd6:	|      addq.l #8,sp
    7cd8:	|      move.l #1084227584,-(sp)
    7cde:	|      move.l d0,-(sp)
    7ce0:	|      jsr 17766 <__subsf3>
    7ce6:	|      addq.l #8,sp
    7ce8:	|      move.l d0,-(sp)
    7cea:	|      move.l d2,-(sp)
    7cec:	|      jsr 1755a <__gesf2>
    7cf2:	|      addq.l #8,sp
    7cf4:	|      tst.l d0
    7cf6:	|  /-- bge.s 7cfc <addSpeechLine+0x13c>
}
    7cf8:	+--|-- bra.w 7dd2 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7cfc:	|  \-> movea.l 60(sp),a0
    7d00:	|      move.l (a0),d0
    7d02:	|      move.l d0,-(sp)
    7d04:	|      jsr 17472 <__floatsisf>
    7d0a:	|      addq.l #4,sp
    7d0c:	|      move.l d0,-(sp)
    7d0e:	|      jsr 1738a <__extendsfdf2>
    7d14:	|      addq.l #4,sp
    7d16:	|      move.l d0,d4
    7d18:	|      move.l d1,d5
    7d1a:	|      move.l 1a6f8 <winWidth>,d0
    7d20:	|      move.l d0,-(sp)
    7d22:	|      jsr 1749a <__floatunsisf>
    7d28:	|      addq.l #4,sp
    7d2a:	|      move.l d0,d1
    7d2c:	|      move.l 1a142 <cameraZoom>,d0
    7d32:	|      move.l d0,-(sp)
    7d34:	|      move.l d1,-(sp)
    7d36:	|      jsr 1731e <__divsf3>
    7d3c:	|      addq.l #8,sp
    7d3e:	|      move.l d0,-(sp)
    7d40:	|      jsr 1738a <__extendsfdf2>
    7d46:	|      addq.l #4,sp
    7d48:	|      clr.l -(sp)
    7d4a:	|      move.l #1075052544,-(sp)
    7d50:	|      move.l d1,-(sp)
    7d52:	|      move.l d0,-(sp)
    7d54:	|      jsr 17704 <__subdf3>
    7d5a:	|      lea 16(sp),sp
    7d5e:	|      move.l d0,d2
    7d60:	|      move.l d1,d3
    7d62:	|      move.l 36(sp),-(sp)
    7d66:	|      jsr 17432 <__floatsidf>
    7d6c:	|      addq.l #4,sp
    7d6e:	|      move.l d1,-(sp)
    7d70:	|      move.l d0,-(sp)
    7d72:	|      move.l d3,-(sp)
    7d74:	|      move.l d2,-(sp)
    7d76:	|      jsr 17704 <__subdf3>
    7d7c:	|      lea 16(sp),sp
    7d80:	|      move.l d1,-(sp)
    7d82:	|      move.l d0,-(sp)
    7d84:	|      move.l d5,-(sp)
    7d86:	|      move.l d4,-(sp)
    7d88:	|      jsr 17590 <__gtdf2>
    7d8e:	|      lea 16(sp),sp
    7d92:	|      tst.l d0
    7d94:	|  /-- bgt.s 7d98 <addSpeechLine+0x1d8>
}
    7d96:	+--|-- bra.s 7dd2 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7d98:	|  \-> move.l 1a6f8 <winWidth>,d0
    7d9e:	|      move.l d0,-(sp)
    7da0:	|      jsr 1749a <__floatunsisf>
    7da6:	|      addq.l #4,sp
    7da8:	|      move.l d0,d1
    7daa:	|      move.l 1a142 <cameraZoom>,d0
    7db0:	|      move.l d0,-(sp)
    7db2:	|      move.l d1,-(sp)
    7db4:	|      jsr 1731e <__divsf3>
    7dba:	|      addq.l #8,sp
    7dbc:	|      move.l d0,-(sp)
    7dbe:	|      jsr 1740a <__fixsfsi>
    7dc4:	|      addq.l #4,sp
    7dc6:	|      subq.l #5,d0
    7dc8:	|      sub.l 36(sp),d0
    7dcc:	|      movea.l 60(sp),a0
    7dd0:	|      move.l d0,(a0)
}
    7dd2:	\----> nop
    7dd4:	       movem.l (sp)+,d2-d5/a6
    7dd8:	       lea 28(sp),sp
    7ddc:	       rts

00007dde <initSpeech>:


void initSpeech () {
    7dde:	       lea -12(sp),sp
    7de2:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7de4:	       moveq #20,d0
    7de6:	       move.l d0,12(sp)
    7dea:	       clr.l 8(sp)
    7dee:	       move.l 1a7a4 <SysBase>,d0
    7df4:	       movea.l d0,a6
    7df6:	       move.l 12(sp),d0
    7dfa:	       move.l 8(sp),d1
    7dfe:	       jsr -684(a6)
    7e02:	       move.l d0,4(sp)
    7e06:	       move.l 4(sp),d0
    7e0a:	       move.l d0,1a800 <speech>
	if (speech) {
    7e10:	       move.l 1a800 <speech>,d0
    7e16:	/----- beq.s 7e42 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7e18:	|      movea.l 1a800 <speech>,a0
    7e1e:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7e20:	|      movea.l 1a800 <speech>,a0
    7e26:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7e2a:	|      movea.l 1a800 <speech>,a0
    7e30:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7e34:	|      movea.l 1a800 <speech>,a0
    7e3a:	|      moveq #-1,d0
    7e3c:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7e40:	|  /-- bra.s 7e50 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7e42:	\--|-> pea 18d6d <PutChar+0x1263>
    7e48:	   |   jsr 17036 <KPrintF>
    7e4e:	   |   addq.l #4,sp
}
    7e50:	   \-> nop
    7e52:	       movea.l (sp)+,a6
    7e54:	       lea 12(sp),sp
    7e58:	       rts

00007e5a <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7e5a:	       movea.l 1a800 <speech>,a0
    7e60:	       move.l 4(a0),d0
    7e64:	/----- beq.s 7e72 <isThereAnySpeechGoingOn+0x18>
    7e66:	|      movea.l 1a800 <speech>,a0
    7e6c:	|      move.l 16(a0),d0
    7e70:	|  /-- bra.s 7e74 <isThereAnySpeechGoingOn+0x1a>
    7e72:	\--|-> moveq #-1,d0
}
    7e74:	   \-> rts

00007e76 <killAllSpeech>:

void killAllSpeech () {
    7e76:	       lea -12(sp),sp
    7e7a:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7e7c:	       movea.l 1a800 <speech>,a0
    7e82:	       move.l 12(a0),d0
    7e86:	       moveq #-1,d1
    7e88:	       cmp.l d0,d1
    7e8a:	   /-- beq.s 7e98 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7e8c:	   |   movea.l 1a800 <speech>,a0
    7e92:	   |   moveq #-1,d0
    7e94:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7e98:	   \-> movea.l 1a800 <speech>,a0
    7e9e:	       move.l (a0),d0
    7ea0:	/----- beq.w 7f2c <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    7ea4:	|      movea.l 1a800 <speech>,a0
    7eaa:	|      move.l (a0),d1
    7eac:	|      lea -132(sp),sp
    7eb0:	|      move.l sp,d0
    7eb2:	|      movea.w #132,a0
    7eb6:	|      move.l a0,-(sp)
    7eb8:	|      move.l d1,-(sp)
    7eba:	|      move.l d0,-(sp)
    7ebc:	|      jsr 16fea <memcpy>
    7ec2:	|      lea 12(sp),sp
    7ec6:	|      jsr aa1c <makeSilent>
    7ecc:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    7ed0:	|      movea.l 1a800 <speech>,a0
    7ed6:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7ed8:	+----- bra.s 7f2c <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7eda:	|  /-> movea.l 1a800 <speech>,a0
    7ee0:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7ee6:	|  |   movea.l 1a800 <speech>,a0
    7eec:	|  |   movea.l 4(a0),a1
    7ef0:	|  |   movea.l 1a800 <speech>,a0
    7ef6:	|  |   move.l 4(a1),d0
    7efa:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    7efe:	|  |   movea.l 12(sp),a0
    7f02:	|  |   move.l (a0),8(sp)
    7f06:	|  |   move.l 1a7a4 <SysBase>,d0
    7f0c:	|  |   movea.l d0,a6
    7f0e:	|  |   movea.l 8(sp),a1
    7f12:	|  |   jsr -690(a6)
		FreeVec(killMe);
    7f16:	|  |   move.l 12(sp),4(sp)
    7f1c:	|  |   move.l 1a7a4 <SysBase>,d0
    7f22:	|  |   movea.l d0,a6
    7f24:	|  |   movea.l 4(sp),a1
    7f28:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    7f2c:	\--|-> movea.l 1a800 <speech>,a0
    7f32:	   |   move.l 4(a0),d0
    7f36:	   \-- bne.s 7eda <killAllSpeech+0x64>
	}
}
    7f38:	       nop
    7f3a:	       nop
    7f3c:	       movea.l (sp)+,a6
    7f3e:	       lea 12(sp),sp
    7f42:	       rts

00007f44 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    7f44:	pea 2 <_start+0x2>
    7f48:	move.l 8(sp),-(sp)
    7f4c:	jsr 80a4 <setFrames>
    7f52:	addq.l #8,sp
}
    7f54:	nop
    7f56:	rts

00007f58 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    7f58:	       lea -52(sp),sp
    7f5c:	       move.l a6,-(sp)
    7f5e:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    7f60:	       movea.l 64(sp),a0
    7f64:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    7f6a:	       move.l 1a12e <speechSpeed>,d0
    7f70:	       move.l 68(sp),-(sp)
    7f74:	       move.l d0,-(sp)
    7f76:	       jsr a46 <putFloat>
    7f7c:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    7f7e:	       movea.l 64(sp),a0
    7f82:	       move.l 8(a0),d0
    7f86:	       move.l 68(sp),-(sp)
    7f8a:	       move.l d0,-(sp)
    7f8c:	       jsr 8d0 <put2bytes>
    7f92:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    7f94:	       movea.l 64(sp),a0
    7f98:	       move.l 16(a0),d0
    7f9c:	       move.l 68(sp),-(sp)
    7fa0:	       move.l d0,-(sp)
    7fa2:	       jsr 8d0 <put2bytes>
    7fa8:	       addq.l #8,sp
		if (sS -> currentTalker) {
    7faa:	       movea.l 64(sp),a0
    7fae:	       move.l (a0),d0
    7fb0:	   /-- beq.s 7ff4 <saveSpeech+0x9c>
			FPutC (fp, 1);
    7fb2:	   |   move.l 68(sp),40(sp)
    7fb8:	   |   moveq #1,d0
    7fba:	   |   move.l d0,36(sp)
    7fbe:	   |   move.l 1a7ac <DOSBase>,d0
    7fc4:	   |   movea.l d0,a6
    7fc6:	   |   move.l 40(sp),d1
    7fca:	   |   move.l 36(sp),d2
    7fce:	   |   jsr -312(a6)
    7fd2:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    7fd6:	   |   movea.l 64(sp),a0
    7fda:	   |   movea.l (a0),a0
    7fdc:	   |   movea.l 114(a0),a0
    7fe0:	   |   move.l 4(a0),d0
    7fe4:	   |   move.l 68(sp),-(sp)
    7fe8:	   |   move.l d0,-(sp)
    7fea:	   |   jsr 8d0 <put2bytes>
    7ff0:	   |   addq.l #8,sp
    7ff2:	/--|-- bra.s 8070 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    7ff4:	|  \-> move.l 68(sp),52(sp)
    7ffa:	|      clr.l 48(sp)
    7ffe:	|      move.l 1a7ac <DOSBase>,d0
    8004:	|      movea.l d0,a6
    8006:	|      move.l 52(sp),d1
    800a:	|      move.l 48(sp),d2
    800e:	|      jsr -312(a6)
    8012:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    8016:	+----- bra.s 8070 <saveSpeech+0x118>
			FPutC (fp, 1);
    8018:	|  /-> move.l 68(sp),16(sp)
    801e:	|  |   moveq #1,d0
    8020:	|  |   move.l d0,12(sp)
    8024:	|  |   move.l 1a7ac <DOSBase>,d0
    802a:	|  |   movea.l d0,a6
    802c:	|  |   move.l 16(sp),d1
    8030:	|  |   move.l 12(sp),d2
    8034:	|  |   jsr -312(a6)
    8038:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    803c:	|  |   movea.l 56(sp),a0
    8040:	|  |   move.l (a0),d0
    8042:	|  |   move.l 68(sp),-(sp)
    8046:	|  |   move.l d0,-(sp)
    8048:	|  |   jsr bd8 <writeString>
    804e:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    8050:	|  |   movea.l 56(sp),a0
    8054:	|  |   move.l 8(a0),d0
    8058:	|  |   move.l 68(sp),-(sp)
    805c:	|  |   move.l d0,-(sp)
    805e:	|  |   jsr 8d0 <put2bytes>
    8064:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    8066:	|  |   movea.l 56(sp),a0
    806a:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    8070:	\--|-> tst.l 56(sp)
    8074:	   \-- bne.s 8018 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    8076:	       move.l 68(sp),28(sp)
    807c:	       clr.l 24(sp)
    8080:	       move.l 1a7ac <DOSBase>,d0
    8086:	       movea.l d0,a6
    8088:	       move.l 28(sp),d1
    808c:	       move.l 24(sp),d2
    8090:	       jsr -312(a6)
    8094:	       move.l d0,20(sp)
}
    8098:	       nop
    809a:	       move.l (sp)+,d2
    809c:	       movea.l (sp)+,a6
    809e:	       lea 52(sp),sp
    80a2:	       rts

000080a4 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    80a4:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    80a6:	movea.l 8(sp),a0
    80aa:	movea.l 80(a0),a0
    80ae:	move.l (a0),d2
    80b0:	movea.l 8(sp),a0
    80b4:	movea.l 80(a0),a0
    80b8:	move.l 4(a0),d0
    80bc:	move.l 12(sp),-(sp)
    80c0:	move.l d0,-(sp)
    80c2:	jsr 179f4 <__mulsi3>
    80c8:	addq.l #8,sp
    80ca:	move.l d0,d1
    80cc:	movea.l 8(sp),a0
    80d0:	move.l 106(a0),d0
    80d4:	add.l d1,d0
    80d6:	add.l d0,d0
    80d8:	add.l d0,d0
    80da:	movea.l d2,a0
    80dc:	adda.l d0,a0
    80de:	move.l (a0),d0
    80e0:	movea.l 8(sp),a0
    80e4:	move.l d0,72(a0)
}
    80e8:	nop
    80ea:	move.l (sp)+,d2
    80ec:	rts

000080ee <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    80ee:	       lea -20(sp),sp
    80f2:	       move.l d2,-(sp)
    80f4:	       move.l 40(sp),d0
    80f8:	       move.w d0,d0
    80fa:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    80fe:	       movea.l 1a800 <speech>,a0
    8104:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    810a:	       move.l 32(sp),-(sp)
    810e:	       jsr a506 <findPerson>
    8114:	       addq.l #4,sp
    8116:	       move.l d0,16(sp)
    if (thisPerson) {
    811a:	   /-- beq.s 8140 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    811c:	   |   movea.w 6(sp),a0
    8120:	   |   move.l a0,-(sp)
    8122:	   |   move.l 40(sp),-(sp)
    8126:	   |   move.l 24(sp),-(sp)
    812a:	   |   move.l 40(sp),-(sp)
    812e:	   |   jsr 8206 <wrapSpeechPerson>
    8134:	   |   lea 16(sp),sp
    8138:	   |   move.l d0,20(sp)
    813c:	/--|-- bra.w 81fa <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    8140:	|  \-> move.l 32(sp),-(sp)
    8144:	|      jsr 15858 <getRegionForObject>
    814a:	|      addq.l #4,sp
    814c:	|      move.l d0,12(sp)
        if (thisRegion) {
    8150:	|  /-- beq.s 81bc <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    8152:	|  |   movea.l 12(sp),a0
    8156:	|  |   movea.l 28(a0),a0
    815a:	|  |   move.l 28(a0),d0
    815e:	|  |   movea.l 12(sp),a0
    8162:	|  |   movea.l 4(a0),a1
    8166:	|  |   movea.l 12(sp),a0
    816a:	|  |   movea.l 28(a0),a0
    816e:	|  |   move.l 20(a0),d1
    8172:	|  |   movea.l a1,a0
    8174:	|  |   suba.l d1,a0
    8176:	|  |   move.l 1a862 <cameraY>,d1
    817c:	|  |   movea.l a0,a1
    817e:	|  |   suba.l d1,a1
    8180:	|  |   movea.l 12(sp),a0
    8184:	|  |   move.l (a0),d2
    8186:	|  |   movea.l 12(sp),a0
    818a:	|  |   move.l 8(a0),d1
    818e:	|  |   add.l d2,d1
    8190:	|  |   move.l d1,d2
    8192:	|  |   asr.l #1,d2
    8194:	|  |   move.l 1a85e <cameraX>,d1
    819a:	|  |   movea.l d2,a0
    819c:	|  |   suba.l d1,a0
    819e:	|  |   move.l 36(sp),-(sp)
    81a2:	|  |   move.l d0,-(sp)
    81a4:	|  |   move.l a1,-(sp)
    81a6:	|  |   move.l a0,-(sp)
    81a8:	|  |   move.l 44(sp),-(sp)
    81ac:	|  |   jsr 8324 <wrapSpeechXY>
    81b2:	|  |   lea 20(sp),sp
    81b6:	|  |   move.l d0,20(sp)
    81ba:	+--|-- bra.s 81fa <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    81bc:	|  \-> move.l 32(sp),-(sp)
    81c0:	|      jsr d378 <findObjectType>
    81c6:	|      addq.l #4,sp
    81c8:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    81cc:	|      movea.l 8(sp),a0
    81d0:	|      move.l 28(a0),d1
    81d4:	|      move.l 1a6f8 <winWidth>,d0
    81da:	|      lsr.l #1,d0
    81dc:	|      move.l 36(sp),-(sp)
    81e0:	|      move.l d1,-(sp)
    81e2:	|      pea a <_start+0xa>
    81e6:	|      move.l d0,-(sp)
    81e8:	|      move.l 44(sp),-(sp)
    81ec:	|      jsr 8324 <wrapSpeechXY>
    81f2:	|      lea 20(sp),sp
    81f6:	|      move.l d0,20(sp)
        }
    }
    return i;
    81fa:	\----> move.l 20(sp),d0
}
    81fe:	       move.l (sp)+,d2
    8200:	       lea 20(sp),sp
    8204:	       rts

00008206 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    8206:	    subq.l #8,sp
    8208:	    movem.l d2-d4,-(sp)
    820c:	    move.l 36(sp),d0
    8210:	    move.w d0,d0
    8212:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    8216:	    movea.l 28(sp),a0
    821a:	    movea.l 114(a0),a0
    821e:	    move.l 28(a0),d2
    8222:	    movea.l 28(sp),a0
    8226:	    move.l 4(a0),d3
    822a:	    move.l 1a862 <cameraY>,d0
    8230:	    move.l d0,-(sp)
    8232:	    jsr 17472 <__floatsisf>
    8238:	    addq.l #4,sp
    823a:	    move.l d0,-(sp)
    823c:	    move.l d3,-(sp)
    823e:	    jsr 17766 <__subsf3>
    8244:	    addq.l #8,sp
    8246:	    move.l d0,d3
    8248:	    movea.l 28(sp),a0
    824c:	    move.l 32(a0),d4
    8250:	    movea.l 28(sp),a0
    8254:	    move.l 20(a0),d1
    8258:	    movea.l 28(sp),a0
    825c:	    move.l 24(a0),d0
    8260:	    sub.l d0,d1
    8262:	    move.l d1,-(sp)
    8264:	    jsr 17472 <__floatsisf>
    826a:	    addq.l #4,sp
    826c:	    move.l d0,-(sp)
    826e:	    move.l d4,-(sp)
    8270:	    jsr 17524 <__mulsf3>
    8276:	    addq.l #8,sp
    8278:	    move.l d0,-(sp)
    827a:	    move.l d3,-(sp)
    827c:	    jsr 17766 <__subsf3>
    8282:	    addq.l #8,sp
    8284:	    move.l d0,d3
    8286:	    movea.l 28(sp),a0
    828a:	    movea.l 114(a0),a0
    828e:	    move.l 20(a0),d0
    8292:	    move.l d0,-(sp)
    8294:	    jsr 17472 <__floatsisf>
    829a:	    addq.l #4,sp
    829c:	    move.l d0,-(sp)
    829e:	    move.l d3,-(sp)
    82a0:	    jsr 17766 <__subsf3>
    82a6:	    addq.l #8,sp
    82a8:	    move.l d0,-(sp)
    82aa:	    jsr 1740a <__fixsfsi>
    82b0:	    addq.l #4,sp
    82b2:	    move.l d0,d4
    82b4:	    movea.l 28(sp),a0
    82b8:	    move.l (a0),d3
    82ba:	    move.l 1a85e <cameraX>,d0
    82c0:	    move.l d0,-(sp)
    82c2:	    jsr 17472 <__floatsisf>
    82c8:	    addq.l #4,sp
    82ca:	    move.l d0,-(sp)
    82cc:	    move.l d3,-(sp)
    82ce:	    jsr 17766 <__subsf3>
    82d4:	    addq.l #8,sp
    82d6:	    move.l d0,-(sp)
    82d8:	    jsr 1740a <__fixsfsi>
    82de:	    addq.l #4,sp
    82e0:	    move.l 32(sp),-(sp)
    82e4:	    move.l d2,-(sp)
    82e6:	    move.l d4,-(sp)
    82e8:	    move.l d0,-(sp)
    82ea:	    move.l 40(sp),-(sp)
    82ee:	    jsr 8324 <wrapSpeechXY>
    82f4:	    lea 20(sp),sp
    82f8:	    move.l d0,16(sp)
	if (animPerson) {
    82fc:	    tst.w 14(sp)
    8300:	/-- beq.s 8318 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    8302:	|   move.l 28(sp),-(sp)
    8306:	|   jsr 7f44 <makeTalker>
    830c:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    830e:	|   movea.l 1a800 <speech>,a0
    8314:	|   move.l 28(sp),(a0)
	}
	return i;
    8318:	\-> move.l 16(sp),d0
}
    831c:	    movem.l (sp)+,d2-d4
    8320:	    addq.l #8,sp
    8322:	    rts

00008324 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    8324:	                   lea -16(sp),sp
    8328:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    832c:	                   clr.l 16(sp)
    killAllSpeech();
    8330:	                   jsr 7e76 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    8336:	                   move.l 36(sp),-(sp)
    833a:	                   jsr 13afa <strlen>
    8340:	                   addq.l #4,sp
    8342:	                   movea.l d0,a0
    8344:	                   lea 20(a0),a0
    8348:	                   move.l a0,-(sp)
    834a:	                   jsr 1749a <__floatunsisf>
    8350:	                   addq.l #4,sp
    8352:	                   move.l d0,d1
    8354:	                   move.l 1a12e <speechSpeed>,d0
    835a:	                   move.l d0,-(sp)
    835c:	                   move.l d1,-(sp)
    835e:	                   jsr 17524 <__mulsf3>
    8364:	                   addq.l #8,sp
    8366:	                   move.l d0,-(sp)
    8368:	                   jsr 1740a <__fixsfsi>
    836e:	                   addq.l #4,sp
    8370:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    8374:	               /-- bgt.s 837c <wrapSpeechXY+0x58>
    8376:	               |   moveq #1,d0
    8378:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    837c:	               \-> moveq #-1,d1
    837e:	                   cmp.l 52(sp),d1
    8382:	               /-- beq.s 83c2 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    8384:	               |   move.l 1a872 <speechMode>,d0
    838a:	               +-- ble.s 83c2 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    838c:	               |   clr.l -(sp)
    838e:	               |   move.l 56(sp),-(sp)
    8392:	               |   jsr d042 <startSound>
    8398:	               |   addq.l #8,sp
    839a:	               |   tst.w d0
    839c:	               +-- beq.s 83c2 <wrapSpeechXY+0x9e>
                speechTime = -10;
    839e:	               |   moveq #-10,d0
    83a0:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    83a4:	               |   movea.l 1a800 <speech>,a0
    83aa:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    83b0:	               |   move.l 1a872 <speechMode>,d0
    83b6:	               |   moveq #2,d1
    83b8:	               |   cmp.l d0,d1
    83ba:	               +-- bne.s 83c2 <wrapSpeechXY+0x9e>
    83bc:	               |   moveq #-10,d0
    83be:	/--------------|-- bra.w 8648 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    83c2:	|              \-> movea.l 1a800 <speech>,a0
    83c8:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    83ce:	|     /----------- bra.w 8482 <wrapSpeechXY+0x15e>
        a = wrap;
    83d2:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    83d8:	|  |  |        /-- bra.s 83e8 <wrapSpeechXY+0xc4>
            a--;
    83da:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    83de:	|  |  |  |     +-- bne.s 83e8 <wrapSpeechXY+0xc4>
                a = wrap;
    83e0:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    83e6:	|  |  |  |  /--|-- bra.s 83fa <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    83e8:	|  |  |  |  |  \-> move.l 28(sp),d0
    83ec:	|  |  |  |  |      movea.l 36(sp),a0
    83f0:	|  |  |  |  |      adda.l d0,a0
    83f2:	|  |  |  |  |      move.b (a0),d0
    83f4:	|  |  |  |  |      cmpi.b #32,d0
    83f8:	|  |  |  \--|----- bne.s 83da <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    83fa:	|  |  |     \----> move.l 28(sp),d0
    83fe:	|  |  |            movea.l 36(sp),a0
    8402:	|  |  |            adda.l d0,a0
    8404:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    8406:	|  |  |            lea 16(sp),a0
    840a:	|  |  |            move.l a0,-(sp)
    840c:	|  |  |            move.l 44(sp),-(sp)
    8410:	|  |  |            move.l 44(sp),-(sp)
    8414:	|  |  |            jsr 7bc0 <addSpeechLine>
    841a:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    841e:	|  |  |            move.l 28(sp),d0
    8422:	|  |  |            movea.l 36(sp),a0
    8426:	|  |  |            adda.l d0,a0
    8428:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    842c:	|  |  |            move.l 28(sp),d0
    8430:	|  |  |            addq.l #1,d0
    8432:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    8436:	|  |  |            move.l 44(sp),-(sp)
    843a:	|  |  |            jsr 17472 <__floatsisf>
    8440:	|  |  |            addq.l #4,sp
    8442:	|  |  |            move.l d0,d2
    8444:	|  |  |            move.l 1a89c <fontHeight>,d0
    844a:	|  |  |            move.l d0,-(sp)
    844c:	|  |  |            jsr 17472 <__floatsisf>
    8452:	|  |  |            addq.l #4,sp
    8454:	|  |  |            move.l d0,d1
    8456:	|  |  |            move.l 1a142 <cameraZoom>,d0
    845c:	|  |  |            move.l d0,-(sp)
    845e:	|  |  |            move.l d1,-(sp)
    8460:	|  |  |            jsr 1731e <__divsf3>
    8466:	|  |  |            addq.l #8,sp
    8468:	|  |  |            move.l d0,-(sp)
    846a:	|  |  |            move.l d2,-(sp)
    846c:	|  |  |            jsr 17766 <__subsf3>
    8472:	|  |  |            addq.l #8,sp
    8474:	|  |  |            move.l d0,-(sp)
    8476:	|  |  |            jsr 1740a <__fixsfsi>
    847c:	|  |  |            addq.l #4,sp
    847e:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    8482:	|  |  \----------> move.l 36(sp),-(sp)
    8486:	|  |               jsr 13afa <strlen>
    848c:	|  |               addq.l #4,sp
    848e:	|  |               move.l d0,d1
    8490:	|  |               move.l 48(sp),d0
    8494:	|  |               cmp.l d1,d0
    8496:	|  \-------------- bcs.w 83d2 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    849a:	|                  lea 16(sp),a0
    849e:	|                  move.l a0,-(sp)
    84a0:	|                  move.l 44(sp),-(sp)
    84a4:	|                  move.l 44(sp),-(sp)
    84a8:	|                  jsr 7bc0 <addSpeechLine>
    84ae:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    84b2:	|                  move.l 44(sp),-(sp)
    84b6:	|                  jsr 17472 <__floatsisf>
    84bc:	|                  addq.l #4,sp
    84be:	|                  move.l d0,d2
    84c0:	|                  move.l 1a89c <fontHeight>,d0
    84c6:	|                  move.l d0,-(sp)
    84c8:	|                  jsr 17472 <__floatsisf>
    84ce:	|                  addq.l #4,sp
    84d0:	|                  move.l d0,d1
    84d2:	|                  move.l 1a142 <cameraZoom>,d0
    84d8:	|                  move.l d0,-(sp)
    84da:	|                  move.l d1,-(sp)
    84dc:	|                  jsr 1731e <__divsf3>
    84e2:	|                  addq.l #8,sp
    84e4:	|                  move.l d0,-(sp)
    84e6:	|                  move.l d2,-(sp)
    84e8:	|                  jsr 17766 <__subsf3>
    84ee:	|                  addq.l #8,sp
    84f0:	|                  move.l d0,-(sp)
    84f2:	|                  jsr 1740a <__fixsfsi>
    84f8:	|                  addq.l #4,sp
    84fa:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    84fe:	|              /-- bpl.s 851c <wrapSpeechXY+0x1f8>
    8500:	|              |   movea.l 1a800 <speech>,a0
    8506:	|              |   move.l 8(a0),d0
    850a:	|              |   movea.l 1a800 <speech>,a0
    8510:	|              |   sub.l 44(sp),d0
    8514:	|              |   move.l d0,8(a0)
    8518:	|           /--|-- bra.w 860a <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    851c:	|           |  \-> movea.l 1a800 <speech>,a0
    8522:	|           |      move.l 8(a0),d0
    8526:	|           |      move.l d0,-(sp)
    8528:	|           |      jsr 17472 <__floatsisf>
    852e:	|           |      addq.l #4,sp
    8530:	|           |      move.l d0,d2
    8532:	|           |      move.l 1a862 <cameraY>,d0
    8538:	|           |      move.l d0,-(sp)
    853a:	|           |      jsr 17472 <__floatsisf>
    8540:	|           |      addq.l #4,sp
    8542:	|           |      move.l d0,d3
    8544:	|           |      move.l 1a6fc <winHeight>,d4
    854a:	|           |      move.l 1a89c <fontHeight>,d0
    8550:	|           |      pea 3 <_start+0x3>
    8554:	|           |      move.l d0,-(sp)
    8556:	|           |      jsr 17a72 <__divsi3>
    855c:	|           |      addq.l #8,sp
    855e:	|           |      move.l d4,d1
    8560:	|           |      sub.l d0,d1
    8562:	|           |      move.l d1,-(sp)
    8564:	|           |      jsr 1749a <__floatunsisf>
    856a:	|           |      addq.l #4,sp
    856c:	|           |      move.l d0,d1
    856e:	|           |      move.l 1a142 <cameraZoom>,d0
    8574:	|           |      move.l d0,-(sp)
    8576:	|           |      move.l d1,-(sp)
    8578:	|           |      jsr 1731e <__divsf3>
    857e:	|           |      addq.l #8,sp
    8580:	|           |      move.l d0,-(sp)
    8582:	|           |      move.l d3,-(sp)
    8584:	|           |      jsr 17224 <__addsf3>
    858a:	|           |      addq.l #8,sp
    858c:	|           |      move.l d0,-(sp)
    858e:	|           |      move.l d2,-(sp)
    8590:	|           |      jsr 175de <__gtsf2>
    8596:	|           |      addq.l #8,sp
    8598:	|           |      tst.l d0
    859a:	|           +----- ble.s 860a <wrapSpeechXY+0x2e6>
    859c:	|           |      move.l 1a862 <cameraY>,d0
    85a2:	|           |      move.l d0,-(sp)
    85a4:	|           |      jsr 17472 <__floatsisf>
    85aa:	|           |      addq.l #4,sp
    85ac:	|           |      move.l d0,d2
    85ae:	|           |      move.l 1a6fc <winHeight>,d3
    85b4:	|           |      move.l 1a89c <fontHeight>,d0
    85ba:	|           |      pea 3 <_start+0x3>
    85be:	|           |      move.l d0,-(sp)
    85c0:	|           |      jsr 17a72 <__divsi3>
    85c6:	|           |      addq.l #8,sp
    85c8:	|           |      move.l d3,d1
    85ca:	|           |      sub.l d0,d1
    85cc:	|           |      move.l d1,-(sp)
    85ce:	|           |      jsr 1749a <__floatunsisf>
    85d4:	|           |      addq.l #4,sp
    85d6:	|           |      move.l d0,d1
    85d8:	|           |      move.l 1a142 <cameraZoom>,d0
    85de:	|           |      move.l d0,-(sp)
    85e0:	|           |      move.l d1,-(sp)
    85e2:	|           |      jsr 1731e <__divsf3>
    85e8:	|           |      addq.l #8,sp
    85ea:	|           |      move.l d0,-(sp)
    85ec:	|           |      move.l d2,-(sp)
    85ee:	|           |      jsr 17224 <__addsf3>
    85f4:	|           |      addq.l #8,sp
    85f6:	|           |      movea.l 1a800 <speech>,a2
    85fc:	|           |      move.l d0,-(sp)
    85fe:	|           |      jsr 1740a <__fixsfsi>
    8604:	|           |      addq.l #4,sp
    8606:	|           |      move.l d0,8(a2)

    if (offset) {
    860a:	|           \----> move.l 16(sp),d0
    860e:	|        /-------- beq.s 8644 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    8610:	|        |         movea.l 1a800 <speech>,a0
    8616:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    861c:	|        |     /-- bra.s 863e <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    861e:	|        |  /--|-> movea.l 20(sp),a0
    8622:	|        |  |  |   move.l 8(a0),d1
    8626:	|        |  |  |   move.l 16(sp),d0
    862a:	|        |  |  |   add.l d1,d0
    862c:	|        |  |  |   movea.l 20(sp),a0
    8630:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    8634:	|        |  |  |   movea.l 20(sp),a0
    8638:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    863e:	|        |  |  \-> tst.l 20(sp)
    8642:	|        |  \----- bne.s 861e <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    8644:	|        \-------> move.l 24(sp),d0
}
    8648:	\----------------> movem.l (sp)+,d2-d4/a2
    864c:	                   lea 16(sp),sp
    8650:	                   rts

00008652 <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData *zBuffer;

void killZBuffer () {
    8652:	       lea -12(sp),sp
    8656:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8658:	       move.l 1a804 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8660:	   /-- bra.s 8688 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8662:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8668:	|  |   movea.l 12(sp),a0
    866c:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8672:	|  |   move.l 8(sp),4(sp)
    8678:	|  |   move.l 1a7a4 <SysBase>,d0
    867e:	|  |   movea.l d0,a6
    8680:	|  |   movea.l 4(sp),a1
    8684:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8688:	|  \-> tst.l 12(sp)
    868c:	\----- bne.s 8662 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    868e:	       clr.l 1a804 <zBuffer>
}
    8694:	       nop
    8696:	       movea.l (sp)+,a6
    8698:	       lea 12(sp),sp
    869c:	       rts

0000869e <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    869e:	             lea -304(sp),sp
    86a2:	             movem.l d2-d4/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    86a6:	             clr.l 310(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    86aa:	             jsr 8652 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    86b0:	             move.l 324(sp),d0
    86b4:	             move.l d0,-(sp)
    86b6:	             jsr 6cb0 <openFileFromNum>
    86bc:	             addq.l #4,sp
    86be:	             tst.l d0
    86c0:	         /-- bne.s 86c8 <setZBuffer+0x2a>
    86c2:	         |   clr.w d0
    86c4:	/--------|-- bra.w 894c <setZBuffer+0x2ae>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    86c8:	|        \-> move.l 1a78c <bigDataFile>,306(sp)
    86d0:	|            move.l 1a7ac <DOSBase>,d0
    86d6:	|            movea.l d0,a6
    86d8:	|            move.l 306(sp),d1
    86dc:	|            jsr -306(a6)
    86e0:	|            move.l d0,302(sp)
    86e4:	|            move.l 302(sp),d0
    86e8:	|            moveq #97,d1
    86ea:	|            cmp.l d0,d1
    86ec:	|     /----- bne.s 8760 <setZBuffer+0xc2>
    86ee:	|     |      move.l 1a78c <bigDataFile>,298(sp)
    86f6:	|     |      move.l 1a7ac <DOSBase>,d0
    86fc:	|     |      movea.l d0,a6
    86fe:	|     |      move.l 298(sp),d1
    8702:	|     |      jsr -306(a6)
    8706:	|     |      move.l d0,294(sp)
    870a:	|     |      move.l 294(sp),d0
    870e:	|     |      moveq #115,d1
    8710:	|     |      cmp.l d0,d1
    8712:	|     +----- bne.s 8760 <setZBuffer+0xc2>
    8714:	|     |      move.l 1a78c <bigDataFile>,290(sp)
    871c:	|     |      move.l 1a7ac <DOSBase>,d0
    8722:	|     |      movea.l d0,a6
    8724:	|     |      move.l 290(sp),d1
    8728:	|     |      jsr -306(a6)
    872c:	|     |      move.l d0,286(sp)
    8730:	|     |      move.l 286(sp),d0
    8734:	|     |      moveq #122,d1
    8736:	|     |      cmp.l d0,d1
    8738:	|     +----- bne.s 8760 <setZBuffer+0xc2>
    873a:	|     |      move.l 1a78c <bigDataFile>,282(sp)
    8742:	|     |      move.l 1a7ac <DOSBase>,d0
    8748:	|     |      movea.l d0,a6
    874a:	|     |      move.l 282(sp),d1
    874e:	|     |      jsr -306(a6)
    8752:	|     |      move.l d0,278(sp)
    8756:	|     |      move.l 278(sp),d0
    875a:	|     |      moveq #98,d1
    875c:	|     |      cmp.l d0,d1
    875e:	|     |  /-- beq.s 8774 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8760:	|     \--|-> pea 18daa <PutChar+0x12a0>
    8766:	|        |   jsr 17036 <KPrintF>
    876c:	|        |   addq.l #4,sp
		 return FALSE;
    876e:	|        |   clr.w d0
    8770:	+--------|-- bra.w 894c <setZBuffer+0x2ae>
	}

	UWORD numelements = FGetC(bigDataFile);
    8774:	|        \-> move.l 1a78c <bigDataFile>,274(sp)
    877c:	|            move.l 1a7ac <DOSBase>,d0
    8782:	|            movea.l d0,a6
    8784:	|            move.l 274(sp),d1
    8788:	|            jsr -306(a6)
    878c:	|            move.l d0,270(sp)
    8790:	|            move.l 270(sp),d0
    8794:	|            move.w d0,318(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8798:	|            moveq #28,d0
    879a:	|            move.l d0,266(sp)
    879e:	|            clr.l 262(sp)
    87a2:	|            move.l 1a7a4 <SysBase>,d0
    87a8:	|            movea.l d0,a6
    87aa:	|            move.l 266(sp),d0
    87ae:	|            move.l 262(sp),d1
    87b2:	|            jsr -684(a6)
    87b6:	|            move.l d0,258(sp)
    87ba:	|            move.l 258(sp),d0
    87be:	|            move.l d0,1a804 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    87c4:	|            move.l 1a804 <zBuffer>,314(sp)

	while(numelements--)
    87cc:	|     /----- bra.w 8932 <setZBuffer+0x294>
	{		
		currentitem->width = get2bytes (bigDataFile);
    87d0:	|  /--|----> move.l 1a78c <bigDataFile>,d0
    87d6:	|  |  |      move.l d0,-(sp)
    87d8:	|  |  |      jsr 6bc <get2bytes>
    87de:	|  |  |      addq.l #4,sp
    87e0:	|  |  |      movea.l 314(sp),a0
    87e4:	|  |  |      move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    87e6:	|  |  |      move.l 1a78c <bigDataFile>,d0
    87ec:	|  |  |      move.l d0,-(sp)
    87ee:	|  |  |      jsr 6bc <get2bytes>
    87f4:	|  |  |      addq.l #4,sp
    87f6:	|  |  |      movea.l 314(sp),a0
    87fa:	|  |  |      move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    87fe:	|  |  |      move.l 1a78c <bigDataFile>,d0
    8804:	|  |  |      move.l d0,-(sp)
    8806:	|  |  |      jsr 6bc <get2bytes>
    880c:	|  |  |      addq.l #4,sp
    880e:	|  |  |      movea.l 314(sp),a0
    8812:	|  |  |      move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8816:	|  |  |      move.l 1a78c <bigDataFile>,d0
    881c:	|  |  |      move.l d0,-(sp)
    881e:	|  |  |      jsr 6bc <get2bytes>
    8824:	|  |  |      addq.l #4,sp
    8826:	|  |  |      movea.l 314(sp),a0
    882a:	|  |  |      move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    882e:	|  |  |      move.l 1a78c <bigDataFile>,d0
    8834:	|  |  |      move.l d0,-(sp)
    8836:	|  |  |      jsr 6bc <get2bytes>
    883c:	|  |  |      addq.l #4,sp
    883e:	|  |  |      movea.l 314(sp),a0
    8842:	|  |  |      move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8846:	|  |  |      movea.l 314(sp),a0
    884a:	|  |  |      move.l (a0),d0
    884c:	|  |  |      movea.l 314(sp),a0
    8850:	|  |  |      move.l 4(a0),d1
    8854:	|  |  |      move.l d1,-(sp)
    8856:	|  |  |      move.l d0,-(sp)
    8858:	|  |  |      jsr 179f4 <__mulsi3>
    885e:	|  |  |      addq.l #8,sp
    8860:	|  |  |      tst.l d0
    8862:	|  |  |  /-- bge.s 8866 <setZBuffer+0x1c8>
    8864:	|  |  |  |   addq.l #7,d0
    8866:	|  |  |  \-> asr.l #3,d0
    8868:	|  |  |      move.w d0,256(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    886c:	|  |  |      moveq #0,d0
    886e:	|  |  |      move.w 256(sp),d0
    8872:	|  |  |      move.l d0,252(sp)
    8876:	|  |  |      moveq #2,d1
    8878:	|  |  |      move.l d1,248(sp)
    887c:	|  |  |      move.l 1a7a4 <SysBase>,d0
    8882:	|  |  |      movea.l d0,a6
    8884:	|  |  |      move.l 252(sp),d0
    8888:	|  |  |      move.l 248(sp),d1
    888c:	|  |  |      jsr -684(a6)
    8890:	|  |  |      move.l d0,244(sp)
    8894:	|  |  |      move.l 244(sp),d0
    8898:	|  |  |      movea.l 314(sp),a0
    889c:	|  |  |      move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    88a0:	|  |  |      move.l 1a78c <bigDataFile>,240(sp)
    88a8:	|  |  |      movea.l 314(sp),a0
    88ac:	|  |  |      move.l 20(a0),236(sp)
    88b2:	|  |  |      moveq #1,d0
    88b4:	|  |  |      move.l d0,232(sp)
    88b8:	|  |  |      moveq #0,d0
    88ba:	|  |  |      move.w 256(sp),d0
    88be:	|  |  |      move.l d0,228(sp)
    88c2:	|  |  |      move.l 1a7ac <DOSBase>,d0
    88c8:	|  |  |      movea.l d0,a6
    88ca:	|  |  |      move.l 240(sp),d1
    88ce:	|  |  |      move.l 236(sp),d2
    88d2:	|  |  |      move.l 232(sp),d3
    88d6:	|  |  |      move.l 228(sp),d4
    88da:	|  |  |      jsr -324(a6)
    88de:	|  |  |      move.l d0,224(sp)
    88e2:	|  |  |      move.l 224(sp),d0
    88e6:	|  |  |      move.w d0,222(sp)

		if(numelements > 0) {
    88ea:	|  |  |      tst.w 318(sp)
    88ee:	|  |  |  /-- beq.s 892a <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    88f0:	|  |  |  |   moveq #28,d1
    88f2:	|  |  |  |   move.l d1,218(sp)
    88f6:	|  |  |  |   clr.l 214(sp)
    88fa:	|  |  |  |   move.l 1a7a4 <SysBase>,d0
    8900:	|  |  |  |   movea.l d0,a6
    8902:	|  |  |  |   move.l 218(sp),d0
    8906:	|  |  |  |   move.l 214(sp),d1
    890a:	|  |  |  |   jsr -684(a6)
    890e:	|  |  |  |   move.l d0,210(sp)
    8912:	|  |  |  |   move.l 210(sp),d0
    8916:	|  |  |  |   movea.l 314(sp),a0
    891a:	|  |  |  |   move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    891e:	|  |  |  |   movea.l 314(sp),a0
    8922:	|  |  |  |   move.l 24(a0),314(sp)
    8928:	|  |  +--|-- bra.s 8932 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    892a:	|  |  |  \-> movea.l 314(sp),a0
    892e:	|  |  |      clr.l 24(a0)
	while(numelements--)
    8932:	|  |  \----> move.w 318(sp),d0
    8936:	|  |         move.w d0,d1
    8938:	|  |         subq.w #1,d1
    893a:	|  |         move.w d1,318(sp)
    893e:	|  |         tst.w d0
    8940:	|  \-------- bne.w 87d0 <setZBuffer+0x132>
		}

	}
	
	finishAccess ();
    8944:	|            jsr 6ba8 <finishAccess>
	
	return TRUE;
    894a:	|            moveq #1,d0
}
    894c:	\----------> movem.l (sp)+,d2-d4/a6
    8950:	             lea 304(sp),sp
    8954:	             rts

00008956 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8956:	          lea -36(sp),sp
    895a:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    895c:	          move.l 44(sp),d0
    8960:	          addq.l #8,d0
    8962:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8966:	          clr.l 36(sp)
    896a:	   /----- bra.s 89b0 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    896c:	/--|----> movea.l 28(sp),a0
    8970:	|  |      movea.l 8(a0),a0
    8974:	|  |      move.l 36(sp),d1
    8978:	|  |      move.l d1,d0
    897a:	|  |      lsl.l #3,d0
    897c:	|  |      sub.l d1,d0
    897e:	|  |      add.l d0,d0
    8980:	|  |      add.l d0,d0
    8982:	|  |      adda.l d0,a0
    8984:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8988:	|  |      movea.l 8(sp),a0
    898c:	|  |      move.l 24(a0),d0
    8990:	|  |  /-- beq.s 89ac <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8992:	|  |  |   movea.l 8(sp),a0
    8996:	|  |  |   move.l 24(a0),4(sp)
    899c:	|  |  |   move.l 1a7a4 <SysBase>,d0
    89a2:	|  |  |   movea.l d0,a6
    89a4:	|  |  |   movea.l 4(sp),a1
    89a8:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    89ac:	|  |  \-> addq.l #1,36(sp)
    89b0:	|  \----> movea.l 28(sp),a0
    89b4:	|         move.l (a0),d0
    89b6:	|         cmp.l 36(sp),d0
    89ba:	\-------- bgt.s 896c <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    89bc:	          movea.l 28(sp),a0
    89c0:	          move.l 8(a0),24(sp)
    89c6:	          move.l 1a7a4 <SysBase>,d0
    89cc:	          movea.l d0,a6
    89ce:	          movea.l 24(sp),a1
    89d2:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    89d6:	          move.l 28(sp),20(sp)
    89dc:	          move.l 1a7a4 <SysBase>,d0
    89e2:	          movea.l d0,a6
    89e4:	          movea.l 20(sp),a1
    89e8:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    89ec:	          move.l 1a8bc <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    89f4:	      /-- bra.s 8a00 <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    89f6:	   /--|-> movea.l 32(sp),a0
    89fa:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8a00:	   |  \-> movea.l 32(sp),a0
    8a04:	   |      movea.l 22(a0),a0
    8a08:	   |      move.l (a0),d1
    8a0a:	   |      movea.l 44(sp),a0
    8a0e:	   |      move.l (a0),d0
    8a10:	   |      cmp.l d1,d0
    8a12:	   |  /-- beq.s 8a1a <forgetSpriteBank+0xc4>
    8a14:	   |  |   tst.l 32(sp)
    8a18:	   \--|-- bne.s 89f6 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    8a1a:	      \-> tst.l 32(sp)
    8a1e:	   /----- beq.s 8a48 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8a20:	   |      movea.l 44(sp),a0
    8a24:	   |      move.l 22(a0),d0
    8a28:	   |      movea.l 32(sp),a0
    8a2c:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8a30:	   |      move.l 44(sp),12(sp)
    8a36:	   |      move.l 1a7a4 <SysBase>,d0
    8a3c:	   |      movea.l d0,a6
    8a3e:	   |      movea.l 12(sp),a1
    8a42:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8a46:	   |  /-- bra.s 8a6e <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    8a48:	   \--|-> movea.l 1a8bc <allLoadedBanks>,a0
    8a4e:	      |   move.l 22(a0),d0
    8a52:	      |   move.l d0,1a8bc <allLoadedBanks>
		FreeVec( forgetme);
    8a58:	      |   move.l 44(sp),16(sp)
    8a5e:	      |   move.l 1a7a4 <SysBase>,d0
    8a64:	      |   movea.l d0,a6
    8a66:	      |   movea.l 16(sp),a1
    8a6a:	      |   jsr -690(a6)
}
    8a6e:	      \-> nop
    8a70:	          movea.l (sp)+,a6
    8a72:	          lea 36(sp),sp
    8a76:	          rts

00008a78 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    8a78:	                      lea -84(sp),sp
    8a7c:	                      movem.l d2-d4/a2/a6,-(sp)
    8a80:	                      move.l 116(sp),d0
    8a84:	                      move.w d0,d0
    8a86:	                      move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8a8a:	                      clr.l 94(sp)
    8a8e:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8a92:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8a96:	                      move.l 108(sp),-(sp)
    8a9a:	                      jsr 6cb0 <openFileFromNum>
    8aa0:	                      addq.l #4,sp
    8aa2:	                      tst.l d0
    8aa4:	                  /-- bne.s 8aba <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8aa6:	                  |   pea 18dbe <PutChar+0x12b4>
    8aac:	                  |   jsr 17036 <KPrintF>
    8ab2:	                  |   addq.l #4,sp
		return FALSE;
    8ab4:	                  |   clr.w d0
    8ab6:	/-----------------|-- bra.w 8e82 <loadSpriteBank+0x40a>
	}

	loadhere->isFont = isFont;
    8aba:	|                 \-> movea.l 112(sp),a0
    8abe:	|                     move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8ac4:	|                     move.l 1a78c <bigDataFile>,d0
    8aca:	|                     move.l d0,-(sp)
    8acc:	|                     jsr 6bc <get2bytes>
    8ad2:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8ad4:	|                     move.l 1a78c <bigDataFile>,82(sp)
    8adc:	|                     move.l 1a7ac <DOSBase>,d0
    8ae2:	|                     movea.l d0,a6
    8ae4:	|                     move.l 82(sp),d1
    8ae8:	|                     jsr -306(a6)
    8aec:	|                     move.l d0,78(sp)
    8af0:	|                     move.l 78(sp),d0
    8af4:	|                     movea.l 112(sp),a0
    8af8:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8afc:	|                     move.l 1a78c <bigDataFile>,d0
    8b02:	|                     move.l d0,-(sp)
    8b04:	|                     jsr 6bc <get2bytes>
    8b0a:	|                     addq.l #4,sp
    8b0c:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8b10:	|                 /-- bgt.s 8b26 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8b12:	|                 |   pea 18dec <PutChar+0x12e2>
    8b18:	|                 |   jsr 17036 <KPrintF>
    8b1e:	|                 |   addq.l #4,sp
		return FALSE;
    8b20:	|                 |   clr.w d0
    8b22:	+-----------------|-- bra.w 8e82 <loadSpriteBank+0x40a>
	}
	if (loadhere->type > 3) {
    8b26:	|                 \-> movea.l 112(sp),a0
    8b2a:	|                     move.l 4(a0),d0
    8b2e:	|                     moveq #3,d1
    8b30:	|                     cmp.l d0,d1
    8b32:	|                 /-- bge.s 8b48 <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8b34:	|                 |   pea 18e2c <PutChar+0x1322>
    8b3a:	|                 |   jsr 17036 <KPrintF>
    8b40:	|                 |   addq.l #4,sp
		return FALSE;
    8b42:	|                 |   clr.w d0
    8b44:	+-----------------|-- bra.w 8e82 <loadSpriteBank+0x40a>
	}

	loadhere->total = total;
    8b48:	|                 \-> movea.l 112(sp),a0
    8b4c:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8b50:	|                     move.l 74(sp),d1
    8b54:	|                     move.l d1,d0
    8b56:	|                     lsl.l #3,d0
    8b58:	|                     sub.l d1,d0
    8b5a:	|                     add.l d0,d0
    8b5c:	|                     add.l d0,d0
    8b5e:	|                     move.l d0,70(sp)
    8b62:	|                     clr.l 66(sp)
    8b66:	|                     move.l 1a7a4 <SysBase>,d0
    8b6c:	|                     movea.l d0,a6
    8b6e:	|                     move.l 70(sp),d0
    8b72:	|                     move.l 66(sp),d1
    8b76:	|                     jsr -684(a6)
    8b7a:	|                     move.l d0,62(sp)
    8b7e:	|                     move.l 62(sp),d0
    8b82:	|                     movea.l 112(sp),a0
    8b86:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8b8a:	|                     movea.l 112(sp),a0
    8b8e:	|                     move.l 8(a0),d0
    8b92:	|                 /-- bne.s 8b9a <loadSpriteBank+0x122>
    8b94:	|                 |   clr.w d0
    8b96:	+-----------------|-- bra.w 8e82 <loadSpriteBank+0x40a>
	
	startIndex = 1;
    8b9a:	|                 \-> moveq #1,d0
    8b9c:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8ba0:	|                     clr.l 100(sp)
    8ba4:	|     /-------------- bra.w 8e6e <loadSpriteBank+0x3f6>
		UWORD width = get2bytes(bigDataFile);
    8ba8:	|  /--|-------------> move.l 1a78c <bigDataFile>,d0
    8bae:	|  |  |               move.l d0,-(sp)
    8bb0:	|  |  |               jsr 6bc <get2bytes>
    8bb6:	|  |  |               addq.l #4,sp
    8bb8:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8bbc:	|  |  |               movea.l 112(sp),a0
    8bc0:	|  |  |               movea.l 8(a0),a0
    8bc4:	|  |  |               move.l 100(sp),d1
    8bc8:	|  |  |               move.l d1,d0
    8bca:	|  |  |               lsl.l #3,d0
    8bcc:	|  |  |               sub.l d1,d0
    8bce:	|  |  |               add.l d0,d0
    8bd0:	|  |  |               add.l d0,d0
    8bd2:	|  |  |               adda.l d0,a0
    8bd4:	|  |  |               moveq #0,d0
    8bd6:	|  |  |               move.w 60(sp),d0
    8bda:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8bdc:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    8be2:	|  |  |               movea.l 112(sp),a0
    8be6:	|  |  |               movea.l 8(a0),a0
    8bea:	|  |  |               move.l 100(sp),d1
    8bee:	|  |  |               move.l d1,d0
    8bf0:	|  |  |               lsl.l #3,d0
    8bf2:	|  |  |               sub.l d1,d0
    8bf4:	|  |  |               add.l d0,d0
    8bf6:	|  |  |               add.l d0,d0
    8bf8:	|  |  |               lea (0,a0,d0.l),a2
    8bfc:	|  |  |               move.l a1,-(sp)
    8bfe:	|  |  |               jsr 6bc <get2bytes>
    8c04:	|  |  |               addq.l #4,sp
    8c06:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8c0a:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    8c10:	|  |  |               movea.l 112(sp),a0
    8c14:	|  |  |               movea.l 8(a0),a0
    8c18:	|  |  |               move.l 100(sp),d1
    8c1c:	|  |  |               move.l d1,d0
    8c1e:	|  |  |               lsl.l #3,d0
    8c20:	|  |  |               sub.l d1,d0
    8c22:	|  |  |               add.l d0,d0
    8c24:	|  |  |               add.l d0,d0
    8c26:	|  |  |               lea (0,a0,d0.l),a2
    8c2a:	|  |  |               move.l a1,-(sp)
    8c2c:	|  |  |               jsr 6bc <get2bytes>
    8c32:	|  |  |               addq.l #4,sp
    8c34:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8c38:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    8c3e:	|  |  |               movea.l 112(sp),a0
    8c42:	|  |  |               movea.l 8(a0),a0
    8c46:	|  |  |               move.l 100(sp),d1
    8c4a:	|  |  |               move.l d1,d0
    8c4c:	|  |  |               lsl.l #3,d0
    8c4e:	|  |  |               sub.l d1,d0
    8c50:	|  |  |               add.l d0,d0
    8c52:	|  |  |               add.l d0,d0
    8c54:	|  |  |               lea (0,a0,d0.l),a2
    8c58:	|  |  |               move.l a1,-(sp)
    8c5a:	|  |  |               jsr 6bc <get2bytes>
    8c60:	|  |  |               addq.l #4,sp
    8c62:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8c66:	|  |  |               movea.l 112(sp),a0
    8c6a:	|  |  |               move.l 4(a0),d0
    8c6e:	|  |  |               moveq #3,d1
    8c70:	|  |  |               cmp.l d0,d1
    8c72:	|  |  |     /-------- beq.w 8d0e <loadSpriteBank+0x296>
    8c76:	|  |  |     |         moveq #3,d1
    8c78:	|  |  |     |         cmp.l d0,d1
    8c7a:	|  |  |  /--|-------- blt.w 8da6 <loadSpriteBank+0x32e>
    8c7e:	|  |  |  |  |         moveq #1,d1
    8c80:	|  |  |  |  |         cmp.l d0,d1
    8c82:	|  |  |  |  |     /-- beq.s 8c8e <loadSpriteBank+0x216>
    8c84:	|  |  |  |  |     |   moveq #2,d1
    8c86:	|  |  |  |  |     |   cmp.l d0,d1
    8c88:	|  |  |  |  |  /--|-- beq.s 8cba <loadSpriteBank+0x242>
    8c8a:	|  |  |  +--|--|--|-- bra.w 8da6 <loadSpriteBank+0x32e>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8c8e:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8c92:	|  |  |  |  |  |      movea.l 8(a0),a0
    8c96:	|  |  |  |  |  |      move.l 100(sp),d1
    8c9a:	|  |  |  |  |  |      move.l d1,d0
    8c9c:	|  |  |  |  |  |      lsl.l #3,d0
    8c9e:	|  |  |  |  |  |      sub.l d1,d0
    8ca0:	|  |  |  |  |  |      add.l d0,d0
    8ca2:	|  |  |  |  |  |      add.l d0,d0
    8ca4:	|  |  |  |  |  |      adda.l d0,a0
    8ca6:	|  |  |  |  |  |      move.l 4(a0),d0
    8caa:	|  |  |  |  |  |      addq.l #2,d0
    8cac:	|  |  |  |  |  |      move.l d0,d0
    8cae:	|  |  |  |  |  |      add.w d0,d0
    8cb0:	|  |  |  |  |  |      add.w d0,d0
    8cb2:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8cb6:	|  |  |  +--|--|----- bra.w 8da6 <loadSpriteBank+0x32e>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8cba:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8cbe:	|  |  |  |  |         movea.l 8(a0),a0
    8cc2:	|  |  |  |  |         move.l 100(sp),d1
    8cc6:	|  |  |  |  |         move.l d1,d0
    8cc8:	|  |  |  |  |         lsl.l #3,d0
    8cca:	|  |  |  |  |         sub.l d1,d0
    8ccc:	|  |  |  |  |         add.l d0,d0
    8cce:	|  |  |  |  |         add.l d0,d0
    8cd0:	|  |  |  |  |         adda.l d0,a0
    8cd2:	|  |  |  |  |         move.l (a0),d0
    8cd4:	|  |  |  |  |     /-- bpl.s 8cd8 <loadSpriteBank+0x260>
    8cd6:	|  |  |  |  |     |   addq.l #7,d0
    8cd8:	|  |  |  |  |     \-> asr.l #3,d0
    8cda:	|  |  |  |  |         move.l d0,d2
    8cdc:	|  |  |  |  |         movea.l 112(sp),a0
    8ce0:	|  |  |  |  |         movea.l 8(a0),a0
    8ce4:	|  |  |  |  |         move.l 100(sp),d1
    8ce8:	|  |  |  |  |         move.l d1,d0
    8cea:	|  |  |  |  |         lsl.l #3,d0
    8cec:	|  |  |  |  |         sub.l d1,d0
    8cee:	|  |  |  |  |         add.l d0,d0
    8cf0:	|  |  |  |  |         add.l d0,d0
    8cf2:	|  |  |  |  |         adda.l d0,a0
    8cf4:	|  |  |  |  |         move.l 4(a0),d0
    8cf8:	|  |  |  |  |         move.l d0,d0
    8cfa:	|  |  |  |  |         move.w d2,d1
    8cfc:	|  |  |  |  |         muls.w d0,d1
    8cfe:	|  |  |  |  |         move.w d1,d0
    8d00:	|  |  |  |  |         add.w d0,d0
    8d02:	|  |  |  |  |         add.w d1,d0
    8d04:	|  |  |  |  |         add.w d0,d0
    8d06:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8d0a:	|  |  |  +--|-------- bra.w 8da6 <loadSpriteBank+0x32e>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8d0e:	|  |  |  |  \-------> movea.l 112(sp),a0
    8d12:	|  |  |  |            movea.l 8(a0),a0
    8d16:	|  |  |  |            move.l 100(sp),d1
    8d1a:	|  |  |  |            move.l d1,d0
    8d1c:	|  |  |  |            lsl.l #3,d0
    8d1e:	|  |  |  |            sub.l d1,d0
    8d20:	|  |  |  |            add.l d0,d0
    8d22:	|  |  |  |            add.l d0,d0
    8d24:	|  |  |  |            adda.l d0,a0
    8d26:	|  |  |  |            move.l (a0),d0
    8d28:	|  |  |  |            andi.l #-2147483633,d0
    8d2e:	|  |  |  |        /-- bpl.s 8d38 <loadSpriteBank+0x2c0>
    8d30:	|  |  |  |        |   subq.l #1,d0
    8d32:	|  |  |  |        |   moveq #-16,d1
    8d34:	|  |  |  |        |   or.l d1,d0
    8d36:	|  |  |  |        |   addq.l #1,d0
    8d38:	|  |  |  |        \-> tst.l d0
    8d3a:	|  |  |  |     /----- ble.s 8d40 <loadSpriteBank+0x2c8>
    8d3c:	|  |  |  |     |      moveq #2,d0
    8d3e:	|  |  |  |     |  /-- bra.s 8d42 <loadSpriteBank+0x2ca>
    8d40:	|  |  |  |     \--|-> clr.w d0
    8d42:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8d46:	|  |  |  |            movea.l 112(sp),a0
    8d4a:	|  |  |  |            movea.l 8(a0),a0
    8d4e:	|  |  |  |            move.l 100(sp),d1
    8d52:	|  |  |  |            move.l d1,d0
    8d54:	|  |  |  |            lsl.l #3,d0
    8d56:	|  |  |  |            sub.l d1,d0
    8d58:	|  |  |  |            add.l d0,d0
    8d5a:	|  |  |  |            add.l d0,d0
    8d5c:	|  |  |  |            adda.l d0,a0
    8d5e:	|  |  |  |            move.l (a0),d0
    8d60:	|  |  |  |            movea.l d0,a0
    8d62:	|  |  |  |            cmpa.w #0,a0
    8d66:	|  |  |  |        /-- bge.s 8d6c <loadSpriteBank+0x2f4>
    8d68:	|  |  |  |        |   lea 15(a0),a0
    8d6c:	|  |  |  |        \-> move.l a0,d0
    8d6e:	|  |  |  |            asr.l #4,d0
    8d70:	|  |  |  |            add.l d0,d0
    8d72:	|  |  |  |            move.l d0,d1
    8d74:	|  |  |  |            moveq #0,d0
    8d76:	|  |  |  |            move.w 58(sp),d0
    8d7a:	|  |  |  |            add.l d1,d0
    8d7c:	|  |  |  |            move.l d0,d2
    8d7e:	|  |  |  |            movea.l 112(sp),a0
    8d82:	|  |  |  |            movea.l 8(a0),a0
    8d86:	|  |  |  |            move.l 100(sp),d1
    8d8a:	|  |  |  |            move.l d1,d0
    8d8c:	|  |  |  |            lsl.l #3,d0
    8d8e:	|  |  |  |            sub.l d1,d0
    8d90:	|  |  |  |            add.l d0,d0
    8d92:	|  |  |  |            add.l d0,d0
    8d94:	|  |  |  |            adda.l d0,a0
    8d96:	|  |  |  |            move.l 4(a0),d0
    8d9a:	|  |  |  |            move.l d0,d0
    8d9c:	|  |  |  |            move.w d2,d1
    8d9e:	|  |  |  |            muls.w d0,d1
    8da0:	|  |  |  |            move.w d1,98(sp)
				break;
    8da4:	|  |  |  |            nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8da6:	|  |  |  \----------> moveq #0,d0
    8da8:	|  |  |               move.w 98(sp),d0
    8dac:	|  |  |               add.l d0,d0
    8dae:	|  |  |               move.l d0,54(sp)
    8db2:	|  |  |               moveq #2,d0
    8db4:	|  |  |               move.l d0,50(sp)
    8db8:	|  |  |               move.l 1a7a4 <SysBase>,d0
    8dbe:	|  |  |               movea.l d0,a6
    8dc0:	|  |  |               move.l 54(sp),d0
    8dc4:	|  |  |               move.l 50(sp),d1
    8dc8:	|  |  |               jsr -684(a6)
    8dcc:	|  |  |               move.l d0,46(sp)
    8dd0:	|  |  |               movea.l 46(sp),a1
    8dd4:	|  |  |               movea.l 112(sp),a0
    8dd8:	|  |  |               movea.l 8(a0),a0
    8ddc:	|  |  |               move.l 100(sp),d1
    8de0:	|  |  |               move.l d1,d0
    8de2:	|  |  |               lsl.l #3,d0
    8de4:	|  |  |               sub.l d1,d0
    8de6:	|  |  |               add.l d0,d0
    8de8:	|  |  |               add.l d0,d0
    8dea:	|  |  |               adda.l d0,a0
    8dec:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8df0:	|  |  |               move.l 1a78c <bigDataFile>,42(sp)
    8df8:	|  |  |               movea.l 112(sp),a0
    8dfc:	|  |  |               movea.l 8(a0),a0
    8e00:	|  |  |               move.l 100(sp),d1
    8e04:	|  |  |               move.l d1,d0
    8e06:	|  |  |               lsl.l #3,d0
    8e08:	|  |  |               sub.l d1,d0
    8e0a:	|  |  |               add.l d0,d0
    8e0c:	|  |  |               add.l d0,d0
    8e0e:	|  |  |               adda.l d0,a0
    8e10:	|  |  |               move.l 24(a0),38(sp)
    8e16:	|  |  |               moveq #2,d1
    8e18:	|  |  |               move.l d1,34(sp)
    8e1c:	|  |  |               move.w 98(sp),d0
    8e20:	|  |  |               lsr.w #1,d0
    8e22:	|  |  |               move.w d0,d0
    8e24:	|  |  |               andi.l #65535,d0
    8e2a:	|  |  |               move.l d0,30(sp)
    8e2e:	|  |  |               move.l 1a7ac <DOSBase>,d0
    8e34:	|  |  |               movea.l d0,a6
    8e36:	|  |  |               move.l 42(sp),d1
    8e3a:	|  |  |               move.l 38(sp),d2
    8e3e:	|  |  |               move.l 34(sp),d3
    8e42:	|  |  |               move.l 30(sp),d4
    8e46:	|  |  |               jsr -324(a6)
    8e4a:	|  |  |               move.l d0,26(sp)
    8e4e:	|  |  |               move.l 26(sp),d0
    8e52:	|  |  |               move.w d0,24(sp)
		if (!count) {
    8e56:	|  |  |           /-- bne.s 8e6a <loadSpriteBank+0x3f2>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8e58:	|  |  |           |   pea 18e61 <PutChar+0x1357>
    8e5e:	|  |  |           |   jsr 17036 <KPrintF>
    8e64:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8e66:	|  |  |           |   clr.w d0
    8e68:	+--|--|-----------|-- bra.s 8e82 <loadSpriteBank+0x40a>
	for (i = 0; i < total; i++) {
    8e6a:	|  |  |           \-> addq.l #1,100(sp)
    8e6e:	|  |  \-------------> move.l 100(sp),d0
    8e72:	|  |                  cmp.l 74(sp),d0
    8e76:	|  \----------------- blt.w 8ba8 <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    8e7a:	|                     jsr 6ba8 <finishAccess>

	return TRUE;
    8e80:	|                     moveq #1,d0
}
    8e82:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    8e86:	                      lea 84(sp),sp
    8e8a:	                      rts

00008e8c <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8e8c:	                   lea -16(sp),sp
    8e90:	                   move.l 28(sp),d0
    8e94:	                   move.w d0,d0
    8e96:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    8e9a:	                   movea.l 24(sp),a0
    8e9e:	                   move.l (a0),d0
    8ea0:	                   move.l d0,-(sp)
    8ea2:	                   jsr 177d2 <__fixunssfsi>
    8ea8:	                   addq.l #4,sp
    8eaa:	                   move.l d0,d0
    8eac:	                   movea.l 20(sp),a0
    8eb0:	                   move.l 8(a0),d1
    8eb4:	                   move.l d1,d1
    8eb6:	                   movea.w d0,a0
    8eb8:	                   suba.w d1,a0
    8eba:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    8ebe:	                   movea.l 24(sp),a0
    8ec2:	                   move.l 4(a0),d0
    8ec6:	                   move.l d0,-(sp)
    8ec8:	                   jsr 177d2 <__fixunssfsi>
    8ece:	                   addq.l #4,sp
    8ed0:	                   move.l d0,d0
    8ed2:	                   movea.l 20(sp),a0
    8ed6:	                   move.l 12(a0),d1
    8eda:	                   move.l d1,d1
    8edc:	                   movea.w d0,a0
    8ede:	                   suba.w d1,a0
    8ee0:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    8ee4:	                   move.w 4(sp),d0
    8ee8:	                   movea.w d0,a1
    8eea:	                   move.w 6(sp),d0
    8eee:	                   movea.w d0,a0
    8ef0:	                   pea 1 <_start+0x1>
    8ef4:	                   move.l a1,-(sp)
    8ef6:	                   move.l a0,-(sp)
    8ef8:	                   move.l 36(sp),-(sp)
    8efc:	                   move.l 36(sp),-(sp)
    8f00:	                   jsr 2c68 <CstScaleSprite>
    8f06:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8f0a:	                   movea.l 24(sp),a0
    8f0e:	                   move.l 118(a0),d0
    8f12:	                   moveq #8,d1
    8f14:	                   and.l d1,d0
    8f16:	   /-------------- beq.w 8fd8 <scaleSprite+0x14c>
		if (single->xhot < 0)
    8f1a:	   |               movea.l 20(sp),a0
    8f1e:	   |               move.l 8(a0),d0
    8f22:	   |  /----------- bpl.s 8f5a <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8f24:	   |  |            tst.w 2(sp)
    8f28:	   |  |     /----- beq.s 8f40 <scaleSprite+0xb4>
    8f2a:	   |  |     |      movea.l 20(sp),a0
    8f2e:	   |  |     |      move.l (a0),d0
    8f30:	   |  |     |      move.l d0,d1
    8f32:	   |  |     |      movea.l 20(sp),a0
    8f36:	   |  |     |      move.l 8(a0),d0
    8f3a:	   |  |     |      move.l d0,d0
    8f3c:	   |  |     |      sub.w d0,d1
    8f3e:	   |  |     |  /-- bra.s 8f4e <scaleSprite+0xc2>
    8f40:	   |  |     \--|-> movea.l 20(sp),a0
    8f44:	   |  |        |   move.l 8(a0),d0
    8f48:	   |  |        |   move.l d0,d0
    8f4a:	   |  |        |   move.w d0,d1
    8f4c:	   |  |        |   addq.w #1,d1
    8f4e:	   |  |        \-> movea.w 6(sp),a0
    8f52:	   |  |            suba.w d1,a0
    8f54:	   |  |            move.w a0,14(sp)
    8f58:	   |  |  /-------- bra.s 8f8e <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8f5a:	   |  \--|-------> tst.w 2(sp)
    8f5e:	   |     |  /----- beq.s 8f7a <scaleSprite+0xee>
    8f60:	   |     |  |      movea.l 20(sp),a0
    8f64:	   |     |  |      move.l (a0),d0
    8f66:	   |     |  |      move.l d0,d1
    8f68:	   |     |  |      movea.l 20(sp),a0
    8f6c:	   |     |  |      move.l 8(a0),d0
    8f70:	   |     |  |      move.l d0,d0
    8f72:	   |     |  |      sub.w d0,d1
    8f74:	   |     |  |      move.w d1,d0
    8f76:	   |     |  |      subq.w #1,d0
    8f78:	   |     |  |  /-- bra.s 8f84 <scaleSprite+0xf8>
    8f7a:	   |     |  \--|-> movea.l 20(sp),a0
    8f7e:	   |     |     |   move.l 8(a0),d0
    8f82:	   |     |     |   move.l d0,d0
    8f84:	   |     |     \-> move.w 6(sp),d1
    8f88:	   |     |         sub.w d0,d1
    8f8a:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8f8e:	   |     \-------> movea.l 24(sp),a0
    8f92:	   |               move.l 24(a0),d0
    8f96:	   |               move.l d0,d1
    8f98:	   |               movea.l 20(sp),a0
    8f9c:	   |               move.l 12(a0),d0
    8fa0:	   |               move.l d0,d0
    8fa2:	   |               sub.w d0,d1
    8fa4:	   |               movea.w 4(sp),a0
    8fa8:	   |               adda.w d1,a0
    8faa:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    8fae:	   |               movea.l 20(sp),a0
    8fb2:	   |               move.l (a0),d0
    8fb4:	   |               move.l d0,d0
    8fb6:	   |               move.w 14(sp),d1
    8fba:	   |               add.w d0,d1
    8fbc:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    8fc0:	   |               movea.l 20(sp),a0
    8fc4:	   |               move.l 4(a0),d0
    8fc8:	   |               move.l d0,d0
    8fca:	   |               movea.w 12(sp),a0
    8fce:	   |               adda.w d0,a0
    8fd0:	   |               move.w a0,8(sp)
    8fd4:	/--|-------------- bra.w 90aa <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    8fd8:	|  \-------------> move.l 1a85e <cameraX>,d0
    8fde:	|                  move.l d0,d0
    8fe0:	|                  sub.w d0,6(sp)
		y -= cameraY;
    8fe4:	|                  move.l 1a862 <cameraY>,d0
    8fea:	|                  move.l d0,d0
    8fec:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    8ff0:	|                  movea.l 20(sp),a0
    8ff4:	|                  move.l 8(a0),d0
    8ff8:	|     /----------- bpl.s 9030 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8ffa:	|     |            tst.w 2(sp)
    8ffe:	|     |     /----- beq.s 9016 <scaleSprite+0x18a>
    9000:	|     |     |      movea.l 20(sp),a0
    9004:	|     |     |      move.l (a0),d0
    9006:	|     |     |      move.l d0,d1
    9008:	|     |     |      movea.l 20(sp),a0
    900c:	|     |     |      move.l 8(a0),d0
    9010:	|     |     |      move.l d0,d0
    9012:	|     |     |      sub.w d0,d1
    9014:	|     |     |  /-- bra.s 9024 <scaleSprite+0x198>
    9016:	|     |     \--|-> movea.l 20(sp),a0
    901a:	|     |        |   move.l 8(a0),d0
    901e:	|     |        |   move.l d0,d0
    9020:	|     |        |   move.w d0,d1
    9022:	|     |        |   addq.w #1,d1
    9024:	|     |        \-> move.w 6(sp),d0
    9028:	|     |            sub.w d1,d0
    902a:	|     |            move.w d0,14(sp)
    902e:	|     |  /-------- bra.s 9064 <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9030:	|     \--|-------> tst.w 2(sp)
    9034:	|        |  /----- beq.s 9050 <scaleSprite+0x1c4>
    9036:	|        |  |      movea.l 20(sp),a0
    903a:	|        |  |      move.l (a0),d0
    903c:	|        |  |      move.l d0,d1
    903e:	|        |  |      movea.l 20(sp),a0
    9042:	|        |  |      move.l 8(a0),d0
    9046:	|        |  |      move.l d0,d0
    9048:	|        |  |      sub.w d0,d1
    904a:	|        |  |      move.w d1,d0
    904c:	|        |  |      subq.w #1,d0
    904e:	|        |  |  /-- bra.s 905a <scaleSprite+0x1ce>
    9050:	|        |  \--|-> movea.l 20(sp),a0
    9054:	|        |     |   move.l 8(a0),d0
    9058:	|        |     |   move.l d0,d0
    905a:	|        |     \-> move.w 6(sp),d1
    905e:	|        |         sub.w d0,d1
    9060:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9064:	|        \-------> movea.l 24(sp),a0
    9068:	|                  move.l 24(a0),d0
    906c:	|                  move.l d0,d1
    906e:	|                  movea.l 20(sp),a0
    9072:	|                  move.l 12(a0),d0
    9076:	|                  move.l d0,d0
    9078:	|                  sub.w d0,d1
    907a:	|                  movea.w 4(sp),a0
    907e:	|                  adda.w d1,a0
    9080:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    9084:	|                  movea.l 20(sp),a0
    9088:	|                  move.l (a0),d0
    908a:	|                  move.l d0,d0
    908c:	|                  move.w 14(sp),d1
    9090:	|                  add.w d0,d1
    9092:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    9096:	|                  movea.l 20(sp),a0
    909a:	|                  move.l 4(a0),d0
    909e:	|                  move.l d0,d0
    90a0:	|                  movea.w 12(sp),a0
    90a4:	|                  adda.w d0,a0
    90a6:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    90aa:	\----------------> move.l 1a760 <input+0xa>,d1
    90b0:	                   moveq #0,d0
    90b2:	                   move.w 14(sp),d0
    90b6:	                   cmp.l d1,d0
    90b8:	            /----- bgt.s 90ee <scaleSprite+0x262>
    90ba:	            |      move.l 1a760 <input+0xa>,d1
    90c0:	            |      moveq #0,d0
    90c2:	            |      move.w 10(sp),d0
    90c6:	            |      cmp.l d1,d0
    90c8:	            +----- blt.s 90ee <scaleSprite+0x262>
    90ca:	            |      move.l 1a764 <input+0xe>,d1
    90d0:	            |      moveq #0,d0
    90d2:	            |      move.w 12(sp),d0
    90d6:	            |      cmp.l d1,d0
    90d8:	            +----- bgt.s 90ee <scaleSprite+0x262>
    90da:	            |      move.l 1a764 <input+0xe>,d1
    90e0:	            |      moveq #0,d0
    90e2:	            |      move.w 8(sp),d0
    90e6:	            |      cmp.l d1,d0
    90e8:	            +----- blt.s 90ee <scaleSprite+0x262>
		return TRUE;
    90ea:	            |      moveq #1,d0
    90ec:	            |  /-- bra.s 90f0 <scaleSprite+0x264>
	}
	return FALSE;
    90ee:	            \--|-> clr.w d0
    90f0:	               \-> lea 16(sp),sp
    90f4:	                   rts

000090f6 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    90f6:	    move.l 4(sp),d0
    90fa:	/-- bpl.s 90fe <TF_abs+0x8>
    90fc:	|   neg.l d0
}
    90fe:	\-> rts

00009100 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9100:	             lea -28(sp),sp
    9104:	             move.l a6,-(sp)
    9106:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9108:	             move.l #132,28(sp)
    9110:	             clr.l 24(sp)
    9114:	             move.l 1a7a4 <SysBase>,d0
    911a:	             movea.l d0,a6
    911c:	             move.l 28(sp),d0
    9120:	             move.l 24(sp),d1
    9124:	             jsr -684(a6)
    9128:	             move.l d0,20(sp)
    912c:	             move.l 20(sp),d0
    9130:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9134:	         /-- bne.s 913c <addPerson+0x3c>
    9136:	         |   clr.w d0
    9138:	/--------|-- bra.w 936c <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    913c:	|        \-> move.l 48(sp),-(sp)
    9140:	|            jsr d468 <loadObjectType>
    9146:	|            addq.l #4,sp
    9148:	|            movea.l 16(sp),a0
    914c:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9150:	|            movea.l 16(sp),a0
    9154:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    915c:	|            movea.l 16(sp),a0
    9160:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    9164:	|            movea.l 16(sp),a0
    9168:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    916c:	|            move.l 44(sp),-(sp)
    9170:	|            jsr 17472 <__floatsisf>
    9176:	|            addq.l #4,sp
    9178:	|            move.l d0,d2
    917a:	|            move.l 40(sp),-(sp)
    917e:	|            jsr 17472 <__floatsisf>
    9184:	|            addq.l #4,sp
    9186:	|            move.l d2,-(sp)
    9188:	|            move.l d0,-(sp)
    918a:	|            move.l 24(sp),-(sp)
    918e:	|            jsr ac4e <moveAndScale>
    9194:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9198:	|            movea.l 16(sp),a0
    919c:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    91a0:	|            movea.l 16(sp),a0
    91a4:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    91aa:	|            movea.l 16(sp),a0
    91ae:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    91b4:	|            movea.l 16(sp),a0
    91b8:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    91bc:	|            movea.l 16(sp),a0
    91c0:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    91c4:	|            movea.l 16(sp),a0
    91c8:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    91ce:	|            movea.l 16(sp),a0
    91d2:	|            clr.l 106(a0)
    newPerson->angle = 180;
    91d6:	|            movea.l 16(sp),a0
    91da:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    91e2:	|            movea.l 16(sp),a0
    91e6:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    91ee:	|            movea.l 16(sp),a0
    91f2:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    91f6:	|            movea.l 16(sp),a0
    91fa:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    91fe:	|            movea.l 16(sp),a0
    9202:	|            movea.l 114(a0),a0
    9206:	|            move.l 24(a0),d0
    920a:	|            movea.l 16(sp),a0
    920e:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9212:	|            movea.l 16(sp),a0
    9216:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    921a:	|            movea.l 16(sp),a0
    921e:	|            movea.l 114(a0),a0
    9222:	|            move.l 32(a0),d0
    9226:	|            movea.l 16(sp),a0
    922a:	|            move.l d0,122(a0)
    newPerson->r = 0;
    922e:	|            movea.l 16(sp),a0
    9232:	|            clr.b 126(a0)
    newPerson->g = 0;
    9236:	|            movea.l 16(sp),a0
    923a:	|            clr.b 127(a0)
    newPerson->b = 0;
    923e:	|            movea.l 16(sp),a0
    9242:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9246:	|            movea.l 16(sp),a0
    924a:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    924e:	|            movea.l 16(sp),a0
    9252:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9256:	|            movea.l 16(sp),a0
    925a:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9260:	|            clr.l -(sp)
    9262:	|            move.l 20(sp),-(sp)
    9266:	|            jsr 80a4 <setFrames>
    926c:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    926e:	|            movea.l 52(sp),a0
    9272:	|            movea.l (a0),a0
    9274:	|            movea.l (a0),a0
    9276:	|            movea.l 4(a0),a0
    927a:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    927e:	|     /----- bpl.s 9288 <addPerson+0x188>
    9280:	|     |      move.l 12(sp),d0
    9284:	|     |      neg.l d0
    9286:	|     |  /-- bra.s 928a <addPerson+0x18a>
    9288:	|     \--|-> moveq #1,d0
    928a:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    928e:	|            movea.l 52(sp),a0
    9292:	|            movea.l (a0),a0
    9294:	|            movea.l (a0),a0
    9296:	|            movea.l (a0),a0
    9298:	|            move.l 8(a0),d0
    929c:	|            cmp.l 8(sp),d0
    92a0:	|     /----- bgt.s 92d2 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    92a2:	|     |      tst.l 12(sp)
    92a6:	|     |  /-- bge.s 92b4 <addPerson+0x1b4>
            newPerson->height = 5;
    92a8:	|     |  |   movea.l 16(sp),a0
    92ac:	|     |  |   moveq #5,d0
    92ae:	|     |  |   move.l d0,20(a0)
    92b2:	|  /--|--|-- bra.s 92fe <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    92b4:	|  |  |  \-> movea.l 52(sp),a0
    92b8:	|  |  |      movea.l (a0),a0
    92ba:	|  |  |      movea.l (a0),a0
    92bc:	|  |  |      movea.l (a0),a0
    92be:	|  |  |      movea.l 16(a0),a0
    92c2:	|  |  |      move.l 12(a0),d0
    92c6:	|  |  |      addq.l #5,d0
    92c8:	|  |  |      movea.l 16(sp),a0
    92cc:	|  |  |      move.l d0,20(a0)
    92d0:	|  +--|----- bra.s 92fe <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    92d2:	|  |  \----> movea.l 52(sp),a0
    92d6:	|  |         movea.l (a0),a0
    92d8:	|  |         movea.l (a0),a0
    92da:	|  |         movea.l (a0),a0
    92dc:	|  |         movea.l 16(a0),a0
    92e0:	|  |         move.l 8(sp),d1
    92e4:	|  |         move.l d1,d0
    92e6:	|  |         lsl.l #3,d0
    92e8:	|  |         sub.l d1,d0
    92ea:	|  |         add.l d0,d0
    92ec:	|  |         add.l d0,d0
    92ee:	|  |         adda.l d0,a0
    92f0:	|  |         move.l 12(a0),d0
    92f4:	|  |         addq.l #5,d0
    92f6:	|  |         movea.l 16(sp),a0
    92fa:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    92fe:	|  \-------> move.l #108552,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9306:	|        /-- bra.s 9316 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9308:	|     /--|-> movea.l 32(sp),a0
    930c:	|     |  |   move.l (a0),d0
    930e:	|     |  |   moveq #36,d1
    9310:	|     |  |   add.l d0,d1
    9312:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9316:	|     |  \-> movea.l 32(sp),a0
    931a:	|     |      move.l (a0),d0
    931c:	|     |  /-- beq.s 9344 <addPerson+0x244>
    931e:	|     |  |   movea.l 32(sp),a0
    9322:	|     |  |   movea.l (a0),a0
    9324:	|     |  |   move.l 4(a0),d2
    9328:	|     |  |   move.l 44(sp),-(sp)
    932c:	|     |  |   jsr 17472 <__floatsisf>
    9332:	|     |  |   addq.l #4,sp
    9334:	|     |  |   move.l d0,-(sp)
    9336:	|     |  |   move.l d2,-(sp)
    9338:	|     |  |   jsr 17698 <__ltsf2>
    933e:	|     |  |   addq.l #8,sp
    9340:	|     |  |   tst.l d0
    9342:	|     \--|-- blt.s 9308 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9344:	|        \-> movea.l 32(sp),a0
    9348:	|            move.l (a0),d0
    934a:	|            movea.l 16(sp),a0
    934e:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9352:	|            movea.l 32(sp),a0
    9356:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    935a:	|            movea.l 16(sp),a0
    935e:	|            move.l 114(a0),d0
    9362:	|            sne d0
    9364:	|            neg.b d0
    9366:	|            move.b d0,d0
    9368:	|            andi.w #255,d0
}
    936c:	\----------> move.l (sp)+,d2
    936e:	             movea.l (sp)+,a6
    9370:	             lea 28(sp),sp
    9374:	             rts

00009376 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9376:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9378:	       move.l 8(sp),-(sp)
    937c:	       jsr a506 <findPerson>
    9382:	       addq.l #4,sp
    9384:	       move.l d0,(sp)
    if (moveMe) {
    9386:	/----- beq.s 93ba <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9388:	|      movea.l (sp),a0
    938a:	|      move.l 68(a0),d0
    938e:	|  /-- beq.s 93a0 <animatePerson+0x2a>
    9390:	|  |   movea.l (sp),a0
    9392:	|  |   move.l 68(a0),d0
    9396:	|  |   move.l d0,-(sp)
    9398:	|  |   jsr 464c <abortFunction>
    939e:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    93a0:	|  \-> movea.l (sp),a0
    93a2:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    93a6:	|      movea.l (sp),a0
    93a8:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    93ac:	|      movea.l (sp),a0
    93ae:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    93b2:	|      movea.l (sp),a0
    93b4:	|      move.l 12(sp),72(a0)
    }
}
    93ba:	\----> nop
    93bc:	       addq.l #4,sp
    93be:	       rts

000093c0 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    93c0:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    93c2:	       move.l 8(sp),-(sp)
    93c6:	       jsr a506 <findPerson>
    93cc:	       addq.l #4,sp
    93ce:	       move.l d0,(sp)
    if (moveMe) {
    93d0:	/----- beq.s 9412 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    93d2:	|      movea.l (sp),a0
    93d4:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    93d8:	|      movea.l (sp),a0
    93da:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    93e0:	|      move.l (sp),-(sp)
    93e2:	|      jsr addc <rethinkAngle>
    93e8:	|      addq.l #4,sp
        if (moveMe->walking) {
    93ea:	|      movea.l (sp),a0
    93ec:	|      move.w 64(a0),d0
    93f0:	|  /-- beq.s 9404 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    93f2:	|  |   pea 1 <_start+0x1>
    93f6:	|  |   move.l 4(sp),-(sp)
    93fa:	|  |   jsr 80a4 <setFrames>
    9400:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9402:	+--|-- bra.s 9412 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9404:	|  \-> clr.l -(sp)
    9406:	|      move.l 4(sp),-(sp)
    940a:	|      jsr 80a4 <setFrames>
    9410:	|      addq.l #8,sp
}
    9412:	\----> nop
    9414:	       addq.l #4,sp
    9416:	       rts

00009418 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9418:	             lea -36(sp),sp
    941c:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    941e:	             movea.l 44(sp),a0
    9422:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9428:	             moveq #12,d0
    942a:	             move.l d0,28(sp)
    942e:	             clr.l 24(sp)
    9432:	             move.l 1a7a4 <SysBase>,d0
    9438:	             movea.l d0,a6
    943a:	             move.l 28(sp),d0
    943e:	             move.l 24(sp),d1
    9442:	             jsr -684(a6)
    9446:	             move.l d0,20(sp)
    944a:	             move.l 20(sp),d0
    944e:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9452:	         /-- bne.s 9468 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9454:	         |   pea 18e94 <PutChar+0x138a>
    945a:	         |   jsr 17036 <KPrintF>
    9460:	         |   addq.l #4,sp
		return NULL;
    9462:	         |   moveq #0,d0
    9464:	/--------|-- bra.w 95ba <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9468:	|        \-> movea.l 44(sp),a0
    946c:	|            move.l (a0),d0
    946e:	|            movea.l 16(sp),a0
    9472:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9474:	|            movea.l 16(sp),a0
    9478:	|            movea.l (a0),a0
    947a:	|            move.l 4(a0),d0
    947e:	|            addq.l #1,d0
    9480:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9484:	|            movea.l 16(sp),a0
    9488:	|            move.l 32(sp),8(a0)

	if (num) {
    948e:	|  /-------- beq.w 95ae <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9492:	|  |         move.l 32(sp),d1
    9496:	|  |         move.l d1,d0
    9498:	|  |         add.l d0,d0
    949a:	|  |         add.l d1,d0
    949c:	|  |         add.l d0,d0
    949e:	|  |         add.l d0,d0
    94a0:	|  |         move.l d0,12(sp)
    94a4:	|  |         clr.l 8(sp)
    94a8:	|  |         move.l 1a7a4 <SysBase>,d0
    94ae:	|  |         movea.l d0,a6
    94b0:	|  |         move.l 12(sp),d0
    94b4:	|  |         move.l 8(sp),d1
    94b8:	|  |         jsr -684(a6)
    94bc:	|  |         move.l d0,4(sp)
    94c0:	|  |         move.l 4(sp),d0
    94c4:	|  |         movea.l 16(sp),a0
    94c8:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    94cc:	|  |         movea.l 16(sp),a0
    94d0:	|  |         move.l 4(a0),d0
    94d4:	|  |     /-- bne.s 94ea <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    94d6:	|  |     |   pea 18e94 <PutChar+0x138a>
    94dc:	|  |     |   jsr 17036 <KPrintF>
    94e2:	|  |     |   addq.l #4,sp
			return NULL;
    94e4:	|  |     |   moveq #0,d0
    94e6:	+--|-----|-- bra.w 95ba <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    94ea:	|  |     \-> clr.l 36(sp)
    94ee:	|  |     /-- bra.w 95a0 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    94f2:	|  |  /--|-> movea.l 44(sp),a0
    94f6:	|  |  |  |   movea.l 4(a0),a0
    94fa:	|  |  |  |   move.l 36(sp),d1
    94fe:	|  |  |  |   move.l d1,d0
    9500:	|  |  |  |   add.l d0,d0
    9502:	|  |  |  |   add.l d1,d0
    9504:	|  |  |  |   add.l d0,d0
    9506:	|  |  |  |   add.l d0,d0
    9508:	|  |  |  |   lea (0,a0,d0.l),a1
    950c:	|  |  |  |   movea.l 16(sp),a0
    9510:	|  |  |  |   movea.l 4(a0),a0
    9514:	|  |  |  |   move.l 36(sp),d1
    9518:	|  |  |  |   move.l d1,d0
    951a:	|  |  |  |   add.l d0,d0
    951c:	|  |  |  |   add.l d1,d0
    951e:	|  |  |  |   add.l d0,d0
    9520:	|  |  |  |   add.l d0,d0
    9522:	|  |  |  |   adda.l d0,a0
    9524:	|  |  |  |   move.l (a1),d0
    9526:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9528:	|  |  |  |   movea.l 44(sp),a0
    952c:	|  |  |  |   movea.l 4(a0),a0
    9530:	|  |  |  |   move.l 36(sp),d1
    9534:	|  |  |  |   move.l d1,d0
    9536:	|  |  |  |   add.l d0,d0
    9538:	|  |  |  |   add.l d1,d0
    953a:	|  |  |  |   add.l d0,d0
    953c:	|  |  |  |   add.l d0,d0
    953e:	|  |  |  |   lea (0,a0,d0.l),a1
    9542:	|  |  |  |   movea.l 16(sp),a0
    9546:	|  |  |  |   movea.l 4(a0),a0
    954a:	|  |  |  |   move.l 36(sp),d1
    954e:	|  |  |  |   move.l d1,d0
    9550:	|  |  |  |   add.l d0,d0
    9552:	|  |  |  |   add.l d1,d0
    9554:	|  |  |  |   add.l d0,d0
    9556:	|  |  |  |   add.l d0,d0
    9558:	|  |  |  |   adda.l d0,a0
    955a:	|  |  |  |   move.l 4(a1),d0
    955e:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9562:	|  |  |  |   movea.l 44(sp),a0
    9566:	|  |  |  |   movea.l 4(a0),a0
    956a:	|  |  |  |   move.l 36(sp),d1
    956e:	|  |  |  |   move.l d1,d0
    9570:	|  |  |  |   add.l d0,d0
    9572:	|  |  |  |   add.l d1,d0
    9574:	|  |  |  |   add.l d0,d0
    9576:	|  |  |  |   add.l d0,d0
    9578:	|  |  |  |   lea (0,a0,d0.l),a1
    957c:	|  |  |  |   movea.l 16(sp),a0
    9580:	|  |  |  |   movea.l 4(a0),a0
    9584:	|  |  |  |   move.l 36(sp),d1
    9588:	|  |  |  |   move.l d1,d0
    958a:	|  |  |  |   add.l d0,d0
    958c:	|  |  |  |   add.l d1,d0
    958e:	|  |  |  |   add.l d0,d0
    9590:	|  |  |  |   add.l d0,d0
    9592:	|  |  |  |   adda.l d0,a0
    9594:	|  |  |  |   move.l 8(a1),d0
    9598:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    959c:	|  |  |  |   addq.l #1,36(sp)
    95a0:	|  |  |  \-> move.l 36(sp),d0
    95a4:	|  |  |      cmp.l 32(sp),d0
    95a8:	|  |  \----- blt.w 94f2 <copyAnim+0xda>
    95ac:	|  |     /-- bra.s 95b6 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    95ae:	|  \-----|-> movea.l 16(sp),a0
    95b2:	|        |   clr.l 4(a0)
	}

	return newAnim;
    95b6:	|        \-> move.l 16(sp),d0
}
    95ba:	\----------> movea.l (sp)+,a6
    95bc:	             lea 36(sp),sp
    95c0:	             rts

000095c2 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    95c2:	                lea -44(sp),sp
    95c6:	                move.l a6,-(sp)
    95c8:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    95ca:	                moveq #12,d0
    95cc:	                move.l d0,40(sp)
    95d0:	                clr.l 36(sp)
    95d4:	                move.l 1a7a4 <SysBase>,d0
    95da:	                movea.l d0,a6
    95dc:	                move.l 40(sp),d0
    95e0:	                move.l 36(sp),d1
    95e4:	                jsr -684(a6)
    95e8:	                move.l d0,32(sp)
    95ec:	                move.l 32(sp),d0
    95f0:	                move.l d0,28(sp)
	if( !newP) {
    95f4:	            /-- bne.s 960a <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    95f6:	            |   pea 18eb5 <PutChar+0x13ab>
    95fc:	            |   jsr 17036 <KPrintF>
    9602:	            |   addq.l #4,sp
		return NULL;
    9604:	            |   moveq #0,d0
    9606:	/-----------|-- bra.w 97da <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    960a:	|           \-> movea.l 28(sp),a0
    960e:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9614:	|               move.l 56(sp),d1
    9618:	|               move.l d1,d0
    961a:	|               add.l d0,d0
    961c:	|               add.l d1,d0
    961e:	|               add.l d0,d0
    9620:	|               add.l d0,d0
    9622:	|               move.l d0,24(sp)
    9626:	|               clr.l 20(sp)
    962a:	|               move.l 1a7a4 <SysBase>,d0
    9630:	|               movea.l d0,a6
    9632:	|               move.l 24(sp),d0
    9636:	|               move.l 20(sp),d1
    963a:	|               jsr -684(a6)
    963e:	|               move.l d0,16(sp)
    9642:	|               move.l 16(sp),d0
    9646:	|               movea.l 28(sp),a0
    964a:	|               move.l d0,4(a0)
	if( !newP->frames) {
    964e:	|               movea.l 28(sp),a0
    9652:	|               move.l 4(a0),d0
    9656:	|           /-- bne.s 966c <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9658:	|           |   pea 18eb5 <PutChar+0x13ab>
    965e:	|           |   jsr 17036 <KPrintF>
    9664:	|           |   addq.l #4,sp
		return NULL;
    9666:	|           |   moveq #0,d0
    9668:	+-----------|-- bra.w 97da <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    966c:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9672:	|               movea.l 60(sp),a0
    9676:	|               move.l (a0),44(sp)
	while (a) {
    967a:	|     /-------- bra.w 97ce <createPersonaAnim+0x20c>
		a --;
    967e:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    9682:	|  |  |         movea.l 28(sp),a0
    9686:	|  |  |         movea.l 4(a0),a0
    968a:	|  |  |         move.l 48(sp),d1
    968e:	|  |  |         move.l d1,d0
    9690:	|  |  |         add.l d0,d0
    9692:	|  |  |         add.l d1,d0
    9694:	|  |  |         add.l d0,d0
    9696:	|  |  |         add.l d0,d0
    9698:	|  |  |         adda.l d0,a0
    969a:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    969e:	|  |  |         movea.l 44(sp),a0
    96a2:	|  |  |         move.l (a0),d0
    96a4:	|  |  |         moveq #5,d1
    96a6:	|  |  |         cmp.l d0,d1
    96a8:	|  |  |     /-- bne.s 96d4 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    96aa:	|  |  |     |   movea.l 28(sp),a0
    96ae:	|  |  |     |   movea.l 4(a0),a0
    96b2:	|  |  |     |   move.l 48(sp),d1
    96b6:	|  |  |     |   move.l d1,d0
    96b8:	|  |  |     |   add.l d0,d0
    96ba:	|  |  |     |   add.l d1,d0
    96bc:	|  |  |     |   add.l d0,d0
    96be:	|  |  |     |   add.l d0,d0
    96c0:	|  |  |     |   lea (0,a0,d0.l),a1
    96c4:	|  |  |     |   movea.l 44(sp),a0
    96c8:	|  |  |     |   move.l 4(a0),d0
    96cc:	|  |  |     |   move.l d0,8(a1)
    96d0:	|  |  |  /--|-- bra.w 977c <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    96d4:	|  |  |  |  \-> movea.l 44(sp),a0
    96d8:	|  |  |  |      move.l (a0),d0
    96da:	|  |  |  |      moveq #2,d1
    96dc:	|  |  |  |      cmp.l d0,d1
    96de:	|  |  |  |  /-- bne.s 970a <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    96e0:	|  |  |  |  |   movea.l 44(sp),a0
    96e4:	|  |  |  |  |   move.l 4(a0),d2
    96e8:	|  |  |  |  |   movea.l 28(sp),a0
    96ec:	|  |  |  |  |   movea.l 4(a0),a0
    96f0:	|  |  |  |  |   move.l 48(sp),d1
    96f4:	|  |  |  |  |   move.l d1,d0
    96f6:	|  |  |  |  |   add.l d0,d0
    96f8:	|  |  |  |  |   add.l d1,d0
    96fa:	|  |  |  |  |   add.l d0,d0
    96fc:	|  |  |  |  |   add.l d0,d0
    96fe:	|  |  |  |  |   adda.l d0,a0
    9700:	|  |  |  |  |   move.l d2,d0
    9702:	|  |  |  |  |   neg.l d0
    9704:	|  |  |  |  |   move.l d0,8(a0)
    9708:	|  |  |  +--|-- bra.s 977c <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    970a:	|  |  |  |  \-> movea.l 44(sp),a0
    970e:	|  |  |  |      move.l (a0),d0
    9710:	|  |  |  |      moveq #6,d1
    9712:	|  |  |  |      cmp.l d0,d1
    9714:	|  |  |  |  /-- bne.s 975c <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9716:	|  |  |  |  |   movea.l 44(sp),a0
    971a:	|  |  |  |  |   movea.l 4(a0),a0
    971e:	|  |  |  |  |   move.l (a0),d0
    9720:	|  |  |  |  |   move.l d0,-(sp)
    9722:	|  |  |  |  |   pea 1 <_start+0x1>
    9726:	|  |  |  |  |   lea 20(sp),a0
    972a:	|  |  |  |  |   move.l a0,-(sp)
    972c:	|  |  |  |  |   jsr 1460e <getValueType>
    9732:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9736:	|  |  |  |  |   movea.l 44(sp),a0
    973a:	|  |  |  |  |   movea.l 4(a0),a0
    973e:	|  |  |  |  |   movea.l (a0),a0
    9740:	|  |  |  |  |   move.l 8(a0),d0
    9744:	|  |  |  |  |   move.l d0,-(sp)
    9746:	|  |  |  |  |   pea 1 <_start+0x1>
    974a:	|  |  |  |  |   lea 16(sp),a0
    974e:	|  |  |  |  |   move.l a0,-(sp)
    9750:	|  |  |  |  |   jsr 1460e <getValueType>
    9756:	|  |  |  |  |   lea 12(sp),sp
    975a:	|  |  |  +--|-- bra.s 977c <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    975c:	|  |  |  |  \-> move.l 44(sp),d0
    9760:	|  |  |  |      move.l d0,-(sp)
    9762:	|  |  |  |      pea 1 <_start+0x1>
    9766:	|  |  |  |      lea 20(sp),a0
    976a:	|  |  |  |      move.l a0,-(sp)
    976c:	|  |  |  |      jsr 1460e <getValueType>
    9772:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9776:	|  |  |  |      moveq #1,d0
    9778:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    977c:	|  |  |  \----> move.l 60(sp),-(sp)
    9780:	|  |  |         jsr 14f92 <trimStack>
    9786:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9788:	|  |  |         movea.l 28(sp),a0
    978c:	|  |  |         movea.l 4(a0),a0
    9790:	|  |  |         move.l 48(sp),d1
    9794:	|  |  |         move.l d1,d0
    9796:	|  |  |         add.l d0,d0
    9798:	|  |  |         add.l d1,d0
    979a:	|  |  |         add.l d0,d0
    979c:	|  |  |         add.l d0,d0
    979e:	|  |  |         adda.l d0,a0
    97a0:	|  |  |         move.l 12(sp),d0
    97a4:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    97a6:	|  |  |         movea.l 28(sp),a0
    97aa:	|  |  |         movea.l 4(a0),a0
    97ae:	|  |  |         move.l 48(sp),d1
    97b2:	|  |  |         move.l d1,d0
    97b4:	|  |  |         add.l d0,d0
    97b6:	|  |  |         add.l d1,d0
    97b8:	|  |  |         add.l d0,d0
    97ba:	|  |  |         add.l d0,d0
    97bc:	|  |  |         adda.l d0,a0
    97be:	|  |  |         move.l 8(sp),d0
    97c2:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    97c6:	|  |  |         movea.l 60(sp),a0
    97ca:	|  |  |         move.l (a0),44(sp)
	while (a) {
    97ce:	|  |  \-------> tst.l 48(sp)
    97d2:	|  \----------- bne.w 967e <createPersonaAnim+0xbc>
	}

	return newP;
    97d6:	|               move.l 28(sp),d0
}
    97da:	\-------------> move.l (sp)+,d2
    97dc:	                movea.l (sp)+,a6
    97de:	                lea 44(sp),sp
    97e2:	                rts

000097e4 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    97e4:	       lea -12(sp),sp
    97e8:	       move.l a6,-(sp)

	if(orig->theSprites)
    97ea:	       movea.l 20(sp),a0
    97ee:	       move.l (a0),d0
    97f0:	   /-- beq.s 981a <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    97f2:	   |   movea.l 20(sp),a0
    97f6:	   |   movea.l (a0),a0
    97f8:	   |   move.l 4(a0),d0
    97fc:	   |   subq.l #1,d0
    97fe:	   |   move.l d0,4(a0)
    9802:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9808:	   +-- bne.s 981a <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    980a:	   |   movea.l 20(sp),a0
    980e:	   |   move.l (a0),d0
    9810:	   |   move.l d0,-(sp)
    9812:	   |   jsr 8956 <forgetSpriteBank>
    9818:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    981a:	   \-> tst.l 20(sp)
    981e:	/----- beq.s 985e <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9820:	|      movea.l 20(sp),a0
    9824:	|      move.l 8(a0),d0
    9828:	|  /-- beq.s 9844 <deleteAnim+0x60>
			FreeVec( orig->frames);
    982a:	|  |   movea.l 20(sp),a0
    982e:	|  |   move.l 4(a0),8(sp)
    9834:	|  |   move.l 1a7a4 <SysBase>,d0
    983a:	|  |   movea.l d0,a6
    983c:	|  |   movea.l 8(sp),a1
    9840:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9844:	|  \-> move.l 20(sp),4(sp)
    984a:	|      move.l 1a7a4 <SysBase>,d0
    9850:	|      movea.l d0,a6
    9852:	|      movea.l 4(sp),a1
    9856:	|      jsr -690(a6)
		orig = NULL;
    985a:	|      clr.l 20(sp)
	}	
	
}
    985e:	\----> nop
    9860:	       movea.l (sp)+,a6
    9862:	       lea 12(sp),sp
    9866:	       rts

00009868 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9868:	          lea -124(sp),sp
    986c:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9870:	          movea.l 152(sp),a0
    9874:	          move.l 56(a0),d1
    9878:	          movea.l 152(sp),a0
    987c:	          move.l 60(a0),d0
    9880:	          cmp.l d1,d0
    9882:	      /-- bne.s 98b2 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9884:	      |   movea.l 152(sp),a0
    9888:	      |   moveq #-1,d0
    988a:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    988e:	      |   movea.l 152(sp),a0
    9892:	      |   move.l 40(a0),d0
    9896:	      |   movea.l 152(sp),a0
    989a:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    989e:	      |   movea.l 152(sp),a0
    98a2:	      |   move.l 44(a0),d0
    98a6:	      |   movea.l 152(sp),a0
    98aa:	      |   move.l d0,52(a0)
    98ae:	   /--|-- bra.w 9e18 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    98b2:	   |  \-> movea.l 1a8c0 <currentFloor>,a0
    98b8:	   |      move.l 16(a0),d1
    98bc:	   |      movea.l 152(sp),a0
    98c0:	   |      move.l 56(a0),d0
    98c4:	   |      add.l d0,d0
    98c6:	   |      add.l d0,d0
    98c8:	   |      movea.l d1,a0
    98ca:	   |      adda.l d0,a0
    98cc:	   |      move.l (a0),d1
    98ce:	   |      movea.l 152(sp),a0
    98d2:	   |      move.l 60(a0),d0
    98d6:	   |      add.l d0,d0
    98d8:	   |      add.l d0,d0
    98da:	   |      movea.l d1,a0
    98dc:	   |      adda.l d0,a0
    98de:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    98e2:	   |      moveq #-1,d0
    98e4:	   |      cmp.l 144(sp),d0
    98e8:	   |  /-- bne.s 98f0 <doBorderStuff+0x88>
    98ea:	   |  |   clr.w d0
    98ec:	/--|--|-- bra.w 9f18 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    98f0:	|  |  \-> movea.l 1a8c0 <currentFloor>,a0
    98f6:	|  |      move.l 12(a0),d1
    98fa:	|  |      move.l 144(sp),d0
    98fe:	|  |      lsl.l #3,d0
    9900:	|  |      add.l d0,d1
    9902:	|  |      movea.l 1a8c0 <currentFloor>,a0
    9908:	|  |      movea.l 12(a0),a1
    990c:	|  |      movea.l 152(sp),a0
    9910:	|  |      move.l 56(a0),d0
    9914:	|  |      lsl.l #3,d0
    9916:	|  |      add.l a1,d0
    9918:	|  |      lea 40(sp),a0
    991c:	|  |      move.l a0,-(sp)
    991e:	|  |      lea 48(sp),a0
    9922:	|  |      move.l a0,-(sp)
    9924:	|  |      move.l d1,-(sp)
    9926:	|  |      move.l d0,-(sp)
    9928:	|  |      jsr 162b8 <getMatchingCorners>
    992e:	|  |      lea 16(sp),sp
    9932:	|  |      tst.w d0
    9934:	|  |  /-- bne.s 994a <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9936:	|  |  |   pea 18edf <PutChar+0x13d5>
    993c:	|  |  |   jsr 17036 <KPrintF>
    9942:	|  |  |   addq.l #4,sp
            return FALSE;
    9944:	|  |  |   clr.w d0
    9946:	+--|--|-- bra.w 9f18 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    994a:	|  |  \-> movea.l 152(sp),a0
    994e:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9954:	|  |      movea.l 152(sp),a0
    9958:	|  |      move.l (a0),d0
    995a:	|  |      move.l d0,-(sp)
    995c:	|  |      jsr 1740a <__fixsfsi>
    9962:	|  |      addq.l #4,sp
    9964:	|  |      move.l d0,140(sp)
    9968:	|  |      movea.l 152(sp),a0
    996c:	|  |      move.l 4(a0),d0
    9970:	|  |      move.l d0,-(sp)
    9972:	|  |      jsr 1740a <__fixsfsi>
    9978:	|  |      addq.l #4,sp
    997a:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    997e:	|  |      movea.l 152(sp),a0
    9982:	|  |      move.l 40(a0),132(sp)
    9988:	|  |      movea.l 152(sp),a0
    998c:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9992:	|  |      movea.l 1a8c0 <currentFloor>,a0
    9998:	|  |      move.l 4(a0),d1
    999c:	|  |      move.l 44(sp),d0
    99a0:	|  |      lsl.l #3,d0
    99a2:	|  |      movea.l d1,a0
    99a4:	|  |      adda.l d0,a0
    99a6:	|  |      move.l (a0),124(sp)
    99aa:	|  |      movea.l 1a8c0 <currentFloor>,a0
    99b0:	|  |      move.l 4(a0),d1
    99b4:	|  |      move.l 44(sp),d0
    99b8:	|  |      lsl.l #3,d0
    99ba:	|  |      movea.l d1,a0
    99bc:	|  |      adda.l d0,a0
    99be:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    99c4:	|  |      movea.l 1a8c0 <currentFloor>,a0
    99ca:	|  |      move.l 4(a0),d1
    99ce:	|  |      move.l 40(sp),d0
    99d2:	|  |      lsl.l #3,d0
    99d4:	|  |      movea.l d1,a0
    99d6:	|  |      adda.l d0,a0
    99d8:	|  |      move.l (a0),116(sp)
    99dc:	|  |      movea.l 1a8c0 <currentFloor>,a0
    99e2:	|  |      move.l 4(a0),d1
    99e6:	|  |      move.l 40(sp),d0
    99ea:	|  |      lsl.l #3,d0
    99ec:	|  |      movea.l d1,a0
    99ee:	|  |      adda.l d0,a0
    99f0:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    99f6:	|  |      move.l 140(sp),d0
    99fa:	|  |      sub.l 132(sp),d0
    99fe:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9a02:	|  |      move.l 136(sp),d0
    9a06:	|  |      sub.l 128(sp),d0
    9a0a:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9a0e:	|  |      move.l 116(sp),d0
    9a12:	|  |      sub.l 124(sp),d0
    9a16:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9a1a:	|  |      move.l 112(sp),d0
    9a1e:	|  |      sub.l 120(sp),d0
    9a22:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9a26:	|  |      move.l 124(sp),d0
    9a2a:	|  |      sub.l 140(sp),d0
    9a2e:	|  |      move.l 104(sp),-(sp)
    9a32:	|  |      move.l d0,-(sp)
    9a34:	|  |      jsr 179f4 <__mulsi3>
    9a3a:	|  |      addq.l #8,sp
    9a3c:	|  |      move.l d0,d2
    9a3e:	|  |      move.l 120(sp),d0
    9a42:	|  |      sub.l 136(sp),d0
    9a46:	|  |      move.l 108(sp),-(sp)
    9a4a:	|  |      move.l d0,-(sp)
    9a4c:	|  |      jsr 179f4 <__mulsi3>
    9a52:	|  |      addq.l #8,sp
    9a54:	|  |      move.l d2,d1
    9a56:	|  |      sub.l d0,d1
    9a58:	|  |      move.l d1,-(sp)
    9a5a:	|  |      jsr 17432 <__floatsidf>
    9a60:	|  |      addq.l #4,sp
    9a62:	|  |      move.l d0,32(sp)
    9a66:	|  |      move.l d1,36(sp)
    9a6a:	|  |      move.l 32(sp),88(sp)
    9a70:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9a76:	|  |      move.l 96(sp),-(sp)
    9a7a:	|  |      move.l 112(sp),-(sp)
    9a7e:	|  |      jsr 179f4 <__mulsi3>
    9a84:	|  |      addq.l #8,sp
    9a86:	|  |      move.l d0,d2
    9a88:	|  |      move.l 100(sp),-(sp)
    9a8c:	|  |      move.l 108(sp),-(sp)
    9a90:	|  |      jsr 179f4 <__mulsi3>
    9a96:	|  |      addq.l #8,sp
    9a98:	|  |      move.l d2,d1
    9a9a:	|  |      sub.l d0,d1
    9a9c:	|  |      move.l d1,-(sp)
    9a9e:	|  |      jsr 17432 <__floatsidf>
    9aa4:	|  |      addq.l #4,sp
    9aa6:	|  |      move.l d1,-(sp)
    9aa8:	|  |      move.l d0,-(sp)
    9aaa:	|  |      move.l 100(sp),-(sp)
    9aae:	|  |      move.l 100(sp),-(sp)
    9ab2:	|  |      jsr 172bc <__divdf3>
    9ab8:	|  |      lea 16(sp),sp
    9abc:	|  |      move.l d0,24(sp)
    9ac0:	|  |      move.l d1,28(sp)
    9ac4:	|  |      move.l 24(sp),88(sp)
    9aca:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9ad0:	|  |      clr.l -(sp)
    9ad2:	|  |      clr.l -(sp)
    9ad4:	|  |      move.l 100(sp),-(sp)
    9ad8:	|  |      move.l 100(sp),-(sp)
    9adc:	|  |      jsr 17590 <__gtdf2>
    9ae2:	|  |      lea 16(sp),sp
    9ae6:	|  |      tst.l d0
    9ae8:	|  |  /-- ble.w 9bc0 <doBorderStuff+0x358>
    9aec:	|  |  |   clr.l -(sp)
    9aee:	|  |  |   move.l #1072693248,-(sp)
    9af4:	|  |  |   move.l 100(sp),-(sp)
    9af8:	|  |  |   move.l 100(sp),-(sp)
    9afc:	|  |  |   jsr 1764a <__ltdf2>
    9b02:	|  |  |   lea 16(sp),sp
    9b06:	|  |  |   tst.l d0
    9b08:	|  |  +-- bge.w 9bc0 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9b0c:	|  |  |   move.l 124(sp),-(sp)
    9b10:	|  |  |   jsr 17432 <__floatsidf>
    9b16:	|  |  |   addq.l #4,sp
    9b18:	|  |  |   move.l d0,d2
    9b1a:	|  |  |   move.l d1,d3
    9b1c:	|  |  |   move.l 100(sp),-(sp)
    9b20:	|  |  |   jsr 17432 <__floatsidf>
    9b26:	|  |  |   addq.l #4,sp
    9b28:	|  |  |   move.l 92(sp),-(sp)
    9b2c:	|  |  |   move.l 92(sp),-(sp)
    9b30:	|  |  |   move.l d1,-(sp)
    9b32:	|  |  |   move.l d0,-(sp)
    9b34:	|  |  |   jsr 174c2 <__muldf3>
    9b3a:	|  |  |   lea 16(sp),sp
    9b3e:	|  |  |   move.l d1,-(sp)
    9b40:	|  |  |   move.l d0,-(sp)
    9b42:	|  |  |   move.l d3,-(sp)
    9b44:	|  |  |   move.l d2,-(sp)
    9b46:	|  |  |   jsr 1725a <__adddf3>
    9b4c:	|  |  |   lea 16(sp),sp
    9b50:	|  |  |   move.l d1,-(sp)
    9b52:	|  |  |   move.l d0,-(sp)
    9b54:	|  |  |   jsr 173ca <__fixdfsi>
    9b5a:	|  |  |   addq.l #8,sp
    9b5c:	|  |  |   movea.l 152(sp),a0
    9b60:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9b64:	|  |  |   move.l 120(sp),-(sp)
    9b68:	|  |  |   jsr 17432 <__floatsidf>
    9b6e:	|  |  |   addq.l #4,sp
    9b70:	|  |  |   move.l d0,d2
    9b72:	|  |  |   move.l d1,d3
    9b74:	|  |  |   move.l 96(sp),-(sp)
    9b78:	|  |  |   jsr 17432 <__floatsidf>
    9b7e:	|  |  |   addq.l #4,sp
    9b80:	|  |  |   move.l 92(sp),-(sp)
    9b84:	|  |  |   move.l 92(sp),-(sp)
    9b88:	|  |  |   move.l d1,-(sp)
    9b8a:	|  |  |   move.l d0,-(sp)
    9b8c:	|  |  |   jsr 174c2 <__muldf3>
    9b92:	|  |  |   lea 16(sp),sp
    9b96:	|  |  |   move.l d1,-(sp)
    9b98:	|  |  |   move.l d0,-(sp)
    9b9a:	|  |  |   move.l d3,-(sp)
    9b9c:	|  |  |   move.l d2,-(sp)
    9b9e:	|  |  |   jsr 1725a <__adddf3>
    9ba4:	|  |  |   lea 16(sp),sp
    9ba8:	|  |  |   move.l d1,-(sp)
    9baa:	|  |  |   move.l d0,-(sp)
    9bac:	|  |  |   jsr 173ca <__fixdfsi>
    9bb2:	|  |  |   addq.l #8,sp
    9bb4:	|  |  |   movea.l 152(sp),a0
    9bb8:	|  |  |   move.l d0,52(a0)
    9bbc:	|  +--|-- bra.w 9e18 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9bc0:	|  |  \-> move.l 140(sp),d0
    9bc4:	|  |      sub.l 124(sp),d0
    9bc8:	|  |      move.l d0,84(sp)
    9bcc:	|  |      move.l 140(sp),d0
    9bd0:	|  |      sub.l 116(sp),d0
    9bd4:	|  |      move.l d0,80(sp)
    9bd8:	|  |      move.l 132(sp),d0
    9bdc:	|  |      sub.l 124(sp),d0
    9be0:	|  |      move.l d0,76(sp)
    9be4:	|  |      move.l 132(sp),d0
    9be8:	|  |      sub.l 116(sp),d0
    9bec:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9bf0:	|  |      move.l 136(sp),d0
    9bf4:	|  |      sub.l 120(sp),d0
    9bf8:	|  |      move.l d0,68(sp)
    9bfc:	|  |      move.l 136(sp),d0
    9c00:	|  |      sub.l 112(sp),d0
    9c04:	|  |      move.l d0,64(sp)
    9c08:	|  |      move.l 128(sp),d0
    9c0c:	|  |      sub.l 120(sp),d0
    9c10:	|  |      move.l d0,60(sp)
    9c14:	|  |      move.l 128(sp),d0
    9c18:	|  |      sub.l 112(sp),d0
    9c1c:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9c20:	|  |      move.l 84(sp),-(sp)
    9c24:	|  |      move.l 88(sp),-(sp)
    9c28:	|  |      jsr 179f4 <__mulsi3>
    9c2e:	|  |      addq.l #8,sp
    9c30:	|  |      move.l d0,84(sp)
    9c34:	|  |      move.l 80(sp),-(sp)
    9c38:	|  |      move.l 84(sp),-(sp)
    9c3c:	|  |      jsr 179f4 <__mulsi3>
    9c42:	|  |      addq.l #8,sp
    9c44:	|  |      move.l d0,80(sp)
    9c48:	|  |      move.l 76(sp),-(sp)
    9c4c:	|  |      move.l 80(sp),-(sp)
    9c50:	|  |      jsr 179f4 <__mulsi3>
    9c56:	|  |      addq.l #8,sp
    9c58:	|  |      move.l d0,76(sp)
    9c5c:	|  |      move.l 72(sp),-(sp)
    9c60:	|  |      move.l 76(sp),-(sp)
    9c64:	|  |      jsr 179f4 <__mulsi3>
    9c6a:	|  |      addq.l #8,sp
    9c6c:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9c70:	|  |      move.l 68(sp),-(sp)
    9c74:	|  |      move.l 72(sp),-(sp)
    9c78:	|  |      jsr 179f4 <__mulsi3>
    9c7e:	|  |      addq.l #8,sp
    9c80:	|  |      move.l d0,68(sp)
    9c84:	|  |      move.l 64(sp),-(sp)
    9c88:	|  |      move.l 68(sp),-(sp)
    9c8c:	|  |      jsr 179f4 <__mulsi3>
    9c92:	|  |      addq.l #8,sp
    9c94:	|  |      move.l d0,64(sp)
    9c98:	|  |      move.l 60(sp),-(sp)
    9c9c:	|  |      move.l 64(sp),-(sp)
    9ca0:	|  |      jsr 179f4 <__mulsi3>
    9ca6:	|  |      addq.l #8,sp
    9ca8:	|  |      move.l d0,60(sp)
    9cac:	|  |      move.l 56(sp),-(sp)
    9cb0:	|  |      move.l 60(sp),-(sp)
    9cb4:	|  |      jsr 179f4 <__mulsi3>
    9cba:	|  |      addq.l #8,sp
    9cbc:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9cc0:	|  |      move.l 84(sp),-(sp)
    9cc4:	|  |      jsr 17432 <__floatsidf>
    9cca:	|  |      addq.l #4,sp
    9ccc:	|  |      move.l d0,d2
    9cce:	|  |      move.l d1,d3
    9cd0:	|  |      move.l 68(sp),-(sp)
    9cd4:	|  |      jsr 17432 <__floatsidf>
    9cda:	|  |      addq.l #4,sp
    9cdc:	|  |      move.l d1,-(sp)
    9cde:	|  |      move.l d0,-(sp)
    9ce0:	|  |      move.l d3,-(sp)
    9ce2:	|  |      move.l d2,-(sp)
    9ce4:	|  |      jsr 1725a <__adddf3>
    9cea:	|  |      lea 16(sp),sp
    9cee:	|  |      move.l d1,-(sp)
    9cf0:	|  |      move.l d0,-(sp)
    9cf2:	|  |      jsr 179aa <sqrt>
    9cf8:	|  |      addq.l #8,sp
    9cfa:	|  |      move.l d0,d2
    9cfc:	|  |      move.l d1,d3
    9cfe:	|  |      move.l 76(sp),-(sp)
    9d02:	|  |      jsr 17432 <__floatsidf>
    9d08:	|  |      addq.l #4,sp
    9d0a:	|  |      move.l d0,d4
    9d0c:	|  |      move.l d1,d5
    9d0e:	|  |      move.l 60(sp),-(sp)
    9d12:	|  |      jsr 17432 <__floatsidf>
    9d18:	|  |      addq.l #4,sp
    9d1a:	|  |      move.l d1,-(sp)
    9d1c:	|  |      move.l d0,-(sp)
    9d1e:	|  |      move.l d5,-(sp)
    9d20:	|  |      move.l d4,-(sp)
    9d22:	|  |      jsr 1725a <__adddf3>
    9d28:	|  |      lea 16(sp),sp
    9d2c:	|  |      move.l d1,-(sp)
    9d2e:	|  |      move.l d0,-(sp)
    9d30:	|  |      jsr 179aa <sqrt>
    9d36:	|  |      addq.l #8,sp
    9d38:	|  |      move.l d1,-(sp)
    9d3a:	|  |      move.l d0,-(sp)
    9d3c:	|  |      move.l d3,-(sp)
    9d3e:	|  |      move.l d2,-(sp)
    9d40:	|  |      jsr 1725a <__adddf3>
    9d46:	|  |      lea 16(sp),sp
    9d4a:	|  |      move.l d0,d2
    9d4c:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9d4e:	|  |      move.l 80(sp),-(sp)
    9d52:	|  |      jsr 17432 <__floatsidf>
    9d58:	|  |      addq.l #4,sp
    9d5a:	|  |      move.l d0,d4
    9d5c:	|  |      move.l d1,d5
    9d5e:	|  |      move.l 64(sp),-(sp)
    9d62:	|  |      jsr 17432 <__floatsidf>
    9d68:	|  |      addq.l #4,sp
    9d6a:	|  |      move.l d1,-(sp)
    9d6c:	|  |      move.l d0,-(sp)
    9d6e:	|  |      move.l d5,-(sp)
    9d70:	|  |      move.l d4,-(sp)
    9d72:	|  |      jsr 1725a <__adddf3>
    9d78:	|  |      lea 16(sp),sp
    9d7c:	|  |      move.l d1,-(sp)
    9d7e:	|  |      move.l d0,-(sp)
    9d80:	|  |      jsr 179aa <sqrt>
    9d86:	|  |      addq.l #8,sp
    9d88:	|  |      move.l d0,d4
    9d8a:	|  |      move.l d1,d5
    9d8c:	|  |      move.l 72(sp),-(sp)
    9d90:	|  |      jsr 17432 <__floatsidf>
    9d96:	|  |      addq.l #4,sp
    9d98:	|  |      move.l d0,d6
    9d9a:	|  |      move.l d1,d7
    9d9c:	|  |      move.l 56(sp),-(sp)
    9da0:	|  |      jsr 17432 <__floatsidf>
    9da6:	|  |      addq.l #4,sp
    9da8:	|  |      move.l d1,-(sp)
    9daa:	|  |      move.l d0,-(sp)
    9dac:	|  |      move.l d7,-(sp)
    9dae:	|  |      move.l d6,-(sp)
    9db0:	|  |      jsr 1725a <__adddf3>
    9db6:	|  |      lea 16(sp),sp
    9dba:	|  |      move.l d1,-(sp)
    9dbc:	|  |      move.l d0,-(sp)
    9dbe:	|  |      jsr 179aa <sqrt>
    9dc4:	|  |      addq.l #8,sp
    9dc6:	|  |      move.l d1,-(sp)
    9dc8:	|  |      move.l d0,-(sp)
    9dca:	|  |      move.l d5,-(sp)
    9dcc:	|  |      move.l d4,-(sp)
    9dce:	|  |      jsr 1725a <__adddf3>
    9dd4:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9dd8:	|  |      move.l d1,-(sp)
    9dda:	|  |      move.l d0,-(sp)
    9ddc:	|  |      move.l d3,-(sp)
    9dde:	|  |      move.l d2,-(sp)
    9de0:	|  |      jsr 1764a <__ltdf2>
    9de6:	|  |      lea 16(sp),sp
    9dea:	|  |      tst.l d0
    9dec:	|  |  /-- bge.s 9e04 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9dee:	|  |  |   movea.l 152(sp),a0
    9df2:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9df8:	|  |  |   movea.l 152(sp),a0
    9dfc:	|  |  |   move.l 120(sp),52(a0)
    9e02:	|  +--|-- bra.s 9e18 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9e04:	|  |  \-> movea.l 152(sp),a0
    9e08:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9e0e:	|  |      movea.l 152(sp),a0
    9e12:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9e18:	|  \----> movea.l 152(sp),a0
    9e1c:	|         move.l 52(a0),d0
    9e20:	|         move.l d0,-(sp)
    9e22:	|         jsr 17472 <__floatsisf>
    9e28:	|         addq.l #4,sp
    9e2a:	|         move.l d0,d1
    9e2c:	|         movea.l 152(sp),a0
    9e30:	|         move.l 4(a0),d0
    9e34:	|         move.l d0,-(sp)
    9e36:	|         move.l d1,-(sp)
    9e38:	|         jsr 17766 <__subsf3>
    9e3e:	|         addq.l #8,sp
    9e40:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9e44:	|         movea.l 152(sp),a0
    9e48:	|         move.l (a0),d2
    9e4a:	|         movea.l 152(sp),a0
    9e4e:	|         move.l 48(a0),d0
    9e52:	|         move.l d0,-(sp)
    9e54:	|         jsr 17472 <__floatsisf>
    9e5a:	|         addq.l #4,sp
    9e5c:	|         move.l d0,-(sp)
    9e5e:	|         move.l d2,-(sp)
    9e60:	|         jsr 17766 <__subsf3>
    9e66:	|         addq.l #8,sp
    9e68:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9e6c:	|         clr.l -(sp)
    9e6e:	|         move.l 52(sp),-(sp)
    9e72:	|         jsr 176ce <__nesf2>
    9e78:	|         addq.l #8,sp
    9e7a:	|         tst.l d0
    9e7c:	|     /-- bne.s 9e90 <doBorderStuff+0x628>
    9e7e:	|     |   clr.l -(sp)
    9e80:	|     |   move.l 56(sp),-(sp)
    9e84:	|     |   jsr 176ce <__nesf2>
    9e8a:	|     |   addq.l #8,sp
    9e8c:	|     |   tst.l d0
    9e8e:	|  /--|-- beq.s 9f06 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9e90:	|  |  \-> move.l 52(sp),d0
    9e94:	|  |      move.l d0,-(sp)
    9e96:	|  |      move.l d0,-(sp)
    9e98:	|  |      jsr 17224 <__addsf3>
    9e9e:	|  |      addq.l #8,sp
    9ea0:	|  |      move.l d0,-(sp)
    9ea2:	|  |      move.l 52(sp),-(sp)
    9ea6:	|  |      jsr 177fa <atan2f>
    9eac:	|  |      addq.l #8,sp
    9eae:	|  |      move.l d0,-(sp)
    9eb0:	|  |      jsr 1738a <__extendsfdf2>
    9eb6:	|  |      addq.l #4,sp
    9eb8:	|  |      move.l #-1540411785,-(sp)
    9ebe:	|  |      move.l #1078765033,-(sp)
    9ec4:	|  |      move.l d1,-(sp)
    9ec6:	|  |      move.l d0,-(sp)
    9ec8:	|  |      jsr 174c2 <__muldf3>
    9ece:	|  |      lea 16(sp),sp
    9ed2:	|  |      clr.l -(sp)
    9ed4:	|  |      move.l #1080459264,-(sp)
    9eda:	|  |      move.l d1,-(sp)
    9edc:	|  |      move.l d0,-(sp)
    9ede:	|  |      jsr 1725a <__adddf3>
    9ee4:	|  |      lea 16(sp),sp
    9ee8:	|  |      move.l d1,-(sp)
    9eea:	|  |      move.l d0,-(sp)
    9eec:	|  |      jsr 173ca <__fixdfsi>
    9ef2:	|  |      addq.l #8,sp
    9ef4:	|  |      movea.l 152(sp),a0
    9ef8:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9efc:	|  |      movea.l 152(sp),a0
    9f00:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9f06:	|  \----> pea 1 <_start+0x1>
    9f0a:	|         move.l 156(sp),-(sp)
    9f0e:	|         jsr 80a4 <setFrames>
    9f14:	|         addq.l #8,sp
    return TRUE;
    9f16:	|         moveq #1,d0
}
    9f18:	\-------> movem.l (sp)+,d2-d7
    9f1c:	          lea 124(sp),sp
    9f20:	          rts

00009f22 <drawPeople>:

void drawPeople () {
    9f22:	                   lea -24(sp),sp
    9f26:	                   move.l d2,-(sp)

	shufflePeople ();
    9f28:	                   jsr b9be <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9f2e:	                   move.l 1a808 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9f36:	                   clr.l 20(sp)
	overRegion = NULL;
    9f3a:	                   clr.l 1a8b8 <overRegion>

	while (thisPerson) {
    9f40:	   /-------------- bra.w a4f2 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9f44:	/--|-------------> movea.l 24(sp),a0
    9f48:	|  |               move.w 104(a0),d0
    9f4c:	|  |  /----------- beq.w a2a6 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9f50:	|  |  |            movea.l 24(sp),a0
    9f54:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9f5a:	|  |  |            movea.l 24(sp),a0
    9f5e:	|  |  |            move.l 76(a0),d0
    9f62:	|  |  |            cmp.l 20(sp),d0
    9f66:	|  |  |  /-------- beq.w a134 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9f6a:	|  |  |  |         movea.l 24(sp),a0
    9f6e:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9f72:	|  |  |  |         movea.l 24(sp),a0
    9f76:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9f7c:	|  |  |  |         movea.l 24(sp),a0
    9f80:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9f84:	|  |  |  |         movea.l 20(sp),a0
    9f88:	|  |  |  |         movea.l 4(a0),a0
    9f8c:	|  |  |  |         move.l 4(a0),d0
    9f90:	|  |  |  |         movea.l 24(sp),a0
    9f94:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9f98:	|  |  |  |         movea.l 20(sp),a0
    9f9c:	|  |  |  |         movea.l 4(a0),a1
    9fa0:	|  |  |  |         movea.l 24(sp),a0
    9fa4:	|  |  |  |         move.l 84(a0),d0
    9fa8:	|  |  |  |         move.l d0,d1
    9faa:	|  |  |  |         move.l d1,d0
    9fac:	|  |  |  |         add.l d0,d0
    9fae:	|  |  |  |         add.l d1,d0
    9fb0:	|  |  |  |         add.l d0,d0
    9fb2:	|  |  |  |         add.l d0,d0
    9fb4:	|  |  |  |         lea (0,a1,d0.l),a0
    9fb8:	|  |  |  |         move.l 8(a0),d0
    9fbc:	|  |  |  |     /-- ble.w a05e <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9fc0:	|  |  |  |     |   movea.l 20(sp),a0
    9fc4:	|  |  |  |     |   movea.l 4(a0),a1
    9fc8:	|  |  |  |     |   movea.l 24(sp),a0
    9fcc:	|  |  |  |     |   move.l 84(a0),d0
    9fd0:	|  |  |  |     |   move.l d0,d1
    9fd2:	|  |  |  |     |   move.l d1,d0
    9fd4:	|  |  |  |     |   add.l d0,d0
    9fd6:	|  |  |  |     |   add.l d1,d0
    9fd8:	|  |  |  |     |   add.l d0,d0
    9fda:	|  |  |  |     |   add.l d0,d0
    9fdc:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9fe0:	|  |  |  |     |   move.l 8(a0),d0
    9fe4:	|  |  |  |     |   clr.l -(sp)
    9fe6:	|  |  |  |     |   move.l d0,-(sp)
    9fe8:	|  |  |  |     |   jsr d042 <startSound>
    9fee:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9ff0:	|  |  |  |     |   movea.l 24(sp),a0
    9ff4:	|  |  |  |     |   move.l 84(a0),d0
    9ff8:	|  |  |  |     |   addq.l #1,d0
    9ffa:	|  |  |  |     |   movea.l 24(sp),a0
    9ffe:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a002:	|  |  |  |     |   movea.l 24(sp),a0
    a006:	|  |  |  |     |   move.l 84(a0),d0
    a00a:	|  |  |  |     |   movea.l 24(sp),a0
    a00e:	|  |  |  |     |   movea.l 72(a0),a0
    a012:	|  |  |  |     |   move.l 8(a0),d1
    a016:	|  |  |  |     |   move.l d1,-(sp)
    a018:	|  |  |  |     |   move.l d0,-(sp)
    a01a:	|  |  |  |     |   jsr 17aa0 <__modsi3>
    a020:	|  |  |  |     |   addq.l #8,sp
    a022:	|  |  |  |     |   movea.l 24(sp),a0
    a026:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a02a:	|  |  |  |     |   movea.l 24(sp),a0
    a02e:	|  |  |  |     |   movea.l 72(a0),a0
    a032:	|  |  |  |     |   movea.l 4(a0),a1
    a036:	|  |  |  |     |   movea.l 24(sp),a0
    a03a:	|  |  |  |     |   move.l 84(a0),d0
    a03e:	|  |  |  |     |   move.l d0,d1
    a040:	|  |  |  |     |   move.l d1,d0
    a042:	|  |  |  |     |   add.l d0,d0
    a044:	|  |  |  |     |   add.l d1,d0
    a046:	|  |  |  |     |   add.l d0,d0
    a048:	|  |  |  |     |   add.l d0,d0
    a04a:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a04e:	|  |  |  |     |   move.l 4(a0),d0
    a052:	|  |  |  |     |   movea.l 24(sp),a0
    a056:	|  |  |  |     |   move.l d0,88(a0)
    a05a:	|  |  |  |  /--|-- bra.w a19c <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a05e:	|  |  |  |  |  \-> movea.l 20(sp),a0
    a062:	|  |  |  |  |      movea.l 4(a0),a1
    a066:	|  |  |  |  |      movea.l 24(sp),a0
    a06a:	|  |  |  |  |      move.l 84(a0),d0
    a06e:	|  |  |  |  |      move.l d0,d1
    a070:	|  |  |  |  |      move.l d1,d0
    a072:	|  |  |  |  |      add.l d0,d0
    a074:	|  |  |  |  |      add.l d1,d0
    a076:	|  |  |  |  |      add.l d0,d0
    a078:	|  |  |  |  |      add.l d0,d0
    a07a:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a07e:	|  |  |  |  |      move.l 8(a0),d0
    a082:	|  |  |  |  +----- beq.w a19c <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a086:	|  |  |  |  |      movea.l 1a774 <noStack>,a1
    a08c:	|  |  |  |  |      movea.l 20(sp),a0
    a090:	|  |  |  |  |      move.l 4(a0),d2
    a094:	|  |  |  |  |      movea.l 24(sp),a0
    a098:	|  |  |  |  |      move.l 84(a0),d0
    a09c:	|  |  |  |  |      move.l d0,d1
    a09e:	|  |  |  |  |      move.l d1,d0
    a0a0:	|  |  |  |  |      add.l d0,d0
    a0a2:	|  |  |  |  |      add.l d1,d0
    a0a4:	|  |  |  |  |      add.l d0,d0
    a0a6:	|  |  |  |  |      add.l d0,d0
    a0a8:	|  |  |  |  |      movea.l d2,a0
    a0aa:	|  |  |  |  |      adda.l d0,a0
    a0ac:	|  |  |  |  |      move.l 8(a0),d0
    a0b0:	|  |  |  |  |      neg.l d0
    a0b2:	|  |  |  |  |      pea 1 <_start+0x1>
    a0b6:	|  |  |  |  |      move.l a1,-(sp)
    a0b8:	|  |  |  |  |      clr.l -(sp)
    a0ba:	|  |  |  |  |      clr.l -(sp)
    a0bc:	|  |  |  |  |      move.l d0,-(sp)
    a0be:	|  |  |  |  |      jsr 6a08 <startNewFunctionNum>
    a0c4:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a0c8:	|  |  |  |  |      movea.l 24(sp),a0
    a0cc:	|  |  |  |  |      move.l 84(a0),d0
    a0d0:	|  |  |  |  |      addq.l #1,d0
    a0d2:	|  |  |  |  |      movea.l 24(sp),a0
    a0d6:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a0da:	|  |  |  |  |      movea.l 24(sp),a0
    a0de:	|  |  |  |  |      move.l 84(a0),d0
    a0e2:	|  |  |  |  |      movea.l 24(sp),a0
    a0e6:	|  |  |  |  |      movea.l 72(a0),a0
    a0ea:	|  |  |  |  |      move.l 8(a0),d1
    a0ee:	|  |  |  |  |      move.l d1,-(sp)
    a0f0:	|  |  |  |  |      move.l d0,-(sp)
    a0f2:	|  |  |  |  |      jsr 17aa0 <__modsi3>
    a0f8:	|  |  |  |  |      addq.l #8,sp
    a0fa:	|  |  |  |  |      movea.l 24(sp),a0
    a0fe:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a102:	|  |  |  |  |      movea.l 24(sp),a0
    a106:	|  |  |  |  |      movea.l 72(a0),a0
    a10a:	|  |  |  |  |      movea.l 4(a0),a1
    a10e:	|  |  |  |  |      movea.l 24(sp),a0
    a112:	|  |  |  |  |      move.l 84(a0),d0
    a116:	|  |  |  |  |      move.l d0,d1
    a118:	|  |  |  |  |      move.l d1,d0
    a11a:	|  |  |  |  |      add.l d0,d0
    a11c:	|  |  |  |  |      add.l d1,d0
    a11e:	|  |  |  |  |      add.l d0,d0
    a120:	|  |  |  |  |      add.l d0,d0
    a122:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a126:	|  |  |  |  |      move.l 4(a0),d0
    a12a:	|  |  |  |  |      movea.l 24(sp),a0
    a12e:	|  |  |  |  |      move.l d0,88(a0)
    a132:	|  |  |  |  +----- bra.s a19c <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a134:	|  |  |  \--|----> movea.l 24(sp),a0
    a138:	|  |  |     |      move.l (a0),d0
    a13a:	|  |  |     |      movea.l 24(sp),a0
    a13e:	|  |  |     |      move.l 8(a0),d1
    a142:	|  |  |     |      move.l d1,-(sp)
    a144:	|  |  |     |      move.l d0,-(sp)
    a146:	|  |  |     |      jsr 17354 <__eqsf2>
    a14c:	|  |  |     |      addq.l #8,sp
    a14e:	|  |  |     |      tst.l d0
    a150:	|  |  |     |  /-- bne.s a194 <drawPeople+0x272>
    a152:	|  |  |     |  |   movea.l 24(sp),a0
    a156:	|  |  |     |  |   move.l 4(a0),d0
    a15a:	|  |  |     |  |   movea.l 24(sp),a0
    a15e:	|  |  |     |  |   move.l 12(a0),d1
    a162:	|  |  |     |  |   move.l d1,-(sp)
    a164:	|  |  |     |  |   move.l d0,-(sp)
    a166:	|  |  |     |  |   jsr 17354 <__eqsf2>
    a16c:	|  |  |     |  |   addq.l #8,sp
    a16e:	|  |  |     |  |   tst.l d0
    a170:	|  |  |     |  +-- bne.s a194 <drawPeople+0x272>
    a172:	|  |  |     |  |   movea.l 20(sp),a0
    a176:	|  |  |     |  |   move.l 8(a0),d0
    a17a:	|  |  |     |  |   moveq #1,d1
    a17c:	|  |  |     |  |   cmp.l d0,d1
    a17e:	|  |  |     |  +-- bne.s a194 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a180:	|  |  |     |  |   movea.l 24(sp),a0
    a184:	|  |  |     |  |   move.l 16(a0),d0
    a188:	|  |  |     |  |   addq.l #1,d0
    a18a:	|  |  |     |  |   movea.l 24(sp),a0
    a18e:	|  |  |     |  |   move.l d0,16(a0)
    a192:	|  |  |     +--|-- bra.s a19c <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a194:	|  |  |     |  \-> movea.l 24(sp),a0
    a198:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a19c:	|  |  |     \----> movea.l 24(sp),a0
    a1a0:	|  |  |            move.l (a0),d0
    a1a2:	|  |  |            movea.l 24(sp),a0
    a1a6:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a1aa:	|  |  |            movea.l 24(sp),a0
    a1ae:	|  |  |            move.l 4(a0),d0
    a1b2:	|  |  |            movea.l 24(sp),a0
    a1b6:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a1ba:	|  |  |            movea.l 20(sp),a0
    a1be:	|  |  |            movea.l 4(a0),a1
    a1c2:	|  |  |            movea.l 24(sp),a0
    a1c6:	|  |  |            move.l 84(a0),d0
    a1ca:	|  |  |            move.l d0,d1
    a1cc:	|  |  |            move.l d1,d0
    a1ce:	|  |  |            add.l d0,d0
    a1d0:	|  |  |            add.l d1,d0
    a1d2:	|  |  |            add.l d0,d0
    a1d4:	|  |  |            add.l d0,d0
    a1d6:	|  |  |            lea (0,a1,d0.l),a0
    a1da:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a1de:	|  |  |            move.l 8(sp),d0
    a1e2:	|  |  |            add.l d0,d0
    a1e4:	|  |  |            subx.l d0,d0
    a1e6:	|  |  |            neg.l d0
    a1e8:	|  |  |            move.b d0,d0
    a1ea:	|  |  |            move.b d0,d0
    a1ec:	|  |  |            andi.l #255,d0
    a1f2:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a1f6:	|  |  |            move.l 8(sp),-(sp)
    a1fa:	|  |  |            jsr 90f6 <TF_abs>
    a200:	|  |  |            addq.l #4,sp
    a202:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a206:	|  |  |            movea.l 20(sp),a0
    a20a:	|  |  |            movea.l (a0),a0
    a20c:	|  |  |            move.l 8(a0),d0
    a210:	|  |  |            cmp.l 12(sp),d0
    a214:	|  |  |        /-- bgt.s a224 <drawPeople+0x302>
				fNum = 0;
    a216:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a21a:	|  |  |        |   moveq #2,d0
    a21c:	|  |  |        |   sub.l 16(sp),d0
    a220:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a224:	|  |  |        \-> moveq #2,d1
    a226:	|  |  |            cmp.l 16(sp),d1
    a22a:	|  |  +----------- beq.s a2a6 <drawPeople+0x384>
				BOOL r = FALSE;
    a22c:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a230:	|  |  |            move.l 16(sp),d0
    a234:	|  |  |            movea.w d0,a0
    a236:	|  |  |            movea.l 20(sp),a1
    a23a:	|  |  |            movea.l (a1),a1
    a23c:	|  |  |            movea.l 16(a1),a1
    a240:	|  |  |            move.l 12(sp),d1
    a244:	|  |  |            move.l d1,d0
    a246:	|  |  |            lsl.l #3,d0
    a248:	|  |  |            sub.l d1,d0
    a24a:	|  |  |            add.l d0,d0
    a24c:	|  |  |            add.l d0,d0
    a24e:	|  |  |            add.l a1,d0
    a250:	|  |  |            move.l a0,-(sp)
    a252:	|  |  |            move.l 28(sp),-(sp)
    a256:	|  |  |            move.l d0,-(sp)
    a258:	|  |  |            jsr 8e8c <scaleSprite>
    a25e:	|  |  |            lea 12(sp),sp
    a262:	|  |  |            move.w d0,6(sp)
				if (r) {
    a266:	|  |  +----------- beq.s a2a6 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a268:	|  |  |            movea.l 24(sp),a0
    a26c:	|  |  |            movea.l 114(a0),a0
    a270:	|  |  |            movea.l (a0),a0
    a272:	|  |  |            move.b (a0),d0
    a274:	|  |  +----------- beq.s a2a6 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a276:	|  |  |            move.l 1a828 <personRegion+0x1c>,d1
    a27c:	|  |  |            movea.l 24(sp),a0
    a280:	|  |  |            move.l 114(a0),d0
    a284:	|  |  |            cmp.l d1,d0
    a286:	|  |  |        /-- beq.s a28e <drawPeople+0x36c>
    a288:	|  |  |        |   clr.l 1a76c <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a28e:	|  |  |        \-> movea.l 24(sp),a0
    a292:	|  |  |            move.l 114(a0),d0
    a296:	|  |  |            move.l d0,1a828 <personRegion+0x1c>
						overRegion = & personRegion;
    a29c:	|  |  |            move.l #108556,1a8b8 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a2a6:	|  |  \----------> movea.l 24(sp),a0
    a2aa:	|  |               move.l 88(a0),d0
    a2ae:	|  |               subq.l #1,d0
    a2b0:	|  |               movea.l 24(sp),a0
    a2b4:	|  |               move.l d0,88(a0)
    a2b8:	|  |               movea.l 24(sp),a0
    a2bc:	|  |               move.l 88(a0),d0
    a2c0:	|  |        /----- bne.w a4e8 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a2c4:	|  |        |      movea.l 24(sp),a0
    a2c8:	|  |        |      move.l 84(a0),d0
    a2cc:	|  |        |      addq.l #1,d0
    a2ce:	|  |        |      movea.l 24(sp),a0
    a2d2:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a2d6:	|  |        |      movea.l 24(sp),a0
    a2da:	|  |        |      move.l 84(a0),d0
    a2de:	|  |        |      movea.l 24(sp),a0
    a2e2:	|  |        |      movea.l 72(a0),a0
    a2e6:	|  |        |      move.l 8(a0),d1
    a2ea:	|  |        |      move.l d1,-(sp)
    a2ec:	|  |        |      move.l d0,-(sp)
    a2ee:	|  |        |      jsr 17aa0 <__modsi3>
    a2f4:	|  |        |      addq.l #8,sp
    a2f6:	|  |        |      movea.l 24(sp),a0
    a2fa:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a2fe:	|  |        |      movea.l 24(sp),a0
    a302:	|  |        |      movea.l 72(a0),a0
    a306:	|  |        |      movea.l 4(a0),a1
    a30a:	|  |        |      movea.l 24(sp),a0
    a30e:	|  |        |      move.l 84(a0),d0
    a312:	|  |        |      move.l d0,d1
    a314:	|  |        |      move.l d1,d0
    a316:	|  |        |      add.l d0,d0
    a318:	|  |        |      add.l d1,d0
    a31a:	|  |        |      add.l d0,d0
    a31c:	|  |        |      add.l d0,d0
    a31e:	|  |        |      lea (0,a1,d0.l),a0
    a322:	|  |        |      move.l 4(a0),d0
    a326:	|  |        |      movea.l 24(sp),a0
    a32a:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a32e:	|  |        |      movea.l 24(sp),a0
    a332:	|  |        |      move.w 104(a0),d0
    a336:	|  |        +----- beq.w a4e8 <drawPeople+0x5c6>
    a33a:	|  |        |      tst.l 20(sp)
    a33e:	|  |        +----- beq.w a4e8 <drawPeople+0x5c6>
    a342:	|  |        |      movea.l 20(sp),a0
    a346:	|  |        |      move.l 4(a0),d0
    a34a:	|  |        +----- beq.w a4e8 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a34e:	|  |        |      movea.l 20(sp),a0
    a352:	|  |        |      movea.l 4(a0),a1
    a356:	|  |        |      movea.l 24(sp),a0
    a35a:	|  |        |      move.l 84(a0),d0
    a35e:	|  |        |      move.l d0,d1
    a360:	|  |        |      move.l d1,d0
    a362:	|  |        |      add.l d0,d0
    a364:	|  |        |      add.l d1,d0
    a366:	|  |        |      add.l d0,d0
    a368:	|  |        |      add.l d0,d0
    a36a:	|  |        |      lea (0,a1,d0.l),a0
    a36e:	|  |        |      move.l 8(a0),d0
    a372:	|  |        |  /-- ble.w a414 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a376:	|  |        |  |   movea.l 20(sp),a0
    a37a:	|  |        |  |   movea.l 4(a0),a1
    a37e:	|  |        |  |   movea.l 24(sp),a0
    a382:	|  |        |  |   move.l 84(a0),d0
    a386:	|  |        |  |   move.l d0,d1
    a388:	|  |        |  |   move.l d1,d0
    a38a:	|  |        |  |   add.l d0,d0
    a38c:	|  |        |  |   add.l d1,d0
    a38e:	|  |        |  |   add.l d0,d0
    a390:	|  |        |  |   add.l d0,d0
    a392:	|  |        |  |   lea (0,a1,d0.l),a0
    a396:	|  |        |  |   move.l 8(a0),d0
    a39a:	|  |        |  |   clr.l -(sp)
    a39c:	|  |        |  |   move.l d0,-(sp)
    a39e:	|  |        |  |   jsr d042 <startSound>
    a3a4:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a3a6:	|  |        |  |   movea.l 24(sp),a0
    a3aa:	|  |        |  |   move.l 84(a0),d0
    a3ae:	|  |        |  |   addq.l #1,d0
    a3b0:	|  |        |  |   movea.l 24(sp),a0
    a3b4:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a3b8:	|  |        |  |   movea.l 24(sp),a0
    a3bc:	|  |        |  |   move.l 84(a0),d0
    a3c0:	|  |        |  |   movea.l 24(sp),a0
    a3c4:	|  |        |  |   movea.l 72(a0),a0
    a3c8:	|  |        |  |   move.l 8(a0),d1
    a3cc:	|  |        |  |   move.l d1,-(sp)
    a3ce:	|  |        |  |   move.l d0,-(sp)
    a3d0:	|  |        |  |   jsr 17aa0 <__modsi3>
    a3d6:	|  |        |  |   addq.l #8,sp
    a3d8:	|  |        |  |   movea.l 24(sp),a0
    a3dc:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a3e0:	|  |        |  |   movea.l 24(sp),a0
    a3e4:	|  |        |  |   movea.l 72(a0),a0
    a3e8:	|  |        |  |   movea.l 4(a0),a1
    a3ec:	|  |        |  |   movea.l 24(sp),a0
    a3f0:	|  |        |  |   move.l 84(a0),d0
    a3f4:	|  |        |  |   move.l d0,d1
    a3f6:	|  |        |  |   move.l d1,d0
    a3f8:	|  |        |  |   add.l d0,d0
    a3fa:	|  |        |  |   add.l d1,d0
    a3fc:	|  |        |  |   add.l d0,d0
    a3fe:	|  |        |  |   add.l d0,d0
    a400:	|  |        |  |   lea (0,a1,d0.l),a0
    a404:	|  |        |  |   move.l 4(a0),d0
    a408:	|  |        |  |   movea.l 24(sp),a0
    a40c:	|  |        |  |   move.l d0,88(a0)
    a410:	|  |        +--|-- bra.w a4e8 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a414:	|  |        |  \-> movea.l 20(sp),a0
    a418:	|  |        |      movea.l 4(a0),a1
    a41c:	|  |        |      movea.l 24(sp),a0
    a420:	|  |        |      move.l 84(a0),d0
    a424:	|  |        |      move.l d0,d1
    a426:	|  |        |      move.l d1,d0
    a428:	|  |        |      add.l d0,d0
    a42a:	|  |        |      add.l d1,d0
    a42c:	|  |        |      add.l d0,d0
    a42e:	|  |        |      add.l d0,d0
    a430:	|  |        |      lea (0,a1,d0.l),a0
    a434:	|  |        |      move.l 8(a0),d0
    a438:	|  |        +----- beq.w a4e8 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a43c:	|  |        |      movea.l 1a774 <noStack>,a1
    a442:	|  |        |      movea.l 20(sp),a0
    a446:	|  |        |      move.l 4(a0),d2
    a44a:	|  |        |      movea.l 24(sp),a0
    a44e:	|  |        |      move.l 84(a0),d0
    a452:	|  |        |      move.l d0,d1
    a454:	|  |        |      move.l d1,d0
    a456:	|  |        |      add.l d0,d0
    a458:	|  |        |      add.l d1,d0
    a45a:	|  |        |      add.l d0,d0
    a45c:	|  |        |      add.l d0,d0
    a45e:	|  |        |      movea.l d2,a0
    a460:	|  |        |      adda.l d0,a0
    a462:	|  |        |      move.l 8(a0),d0
    a466:	|  |        |      neg.l d0
    a468:	|  |        |      pea 1 <_start+0x1>
    a46c:	|  |        |      move.l a1,-(sp)
    a46e:	|  |        |      clr.l -(sp)
    a470:	|  |        |      clr.l -(sp)
    a472:	|  |        |      move.l d0,-(sp)
    a474:	|  |        |      jsr 6a08 <startNewFunctionNum>
    a47a:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a47e:	|  |        |      movea.l 24(sp),a0
    a482:	|  |        |      move.l 84(a0),d0
    a486:	|  |        |      addq.l #1,d0
    a488:	|  |        |      movea.l 24(sp),a0
    a48c:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a490:	|  |        |      movea.l 24(sp),a0
    a494:	|  |        |      move.l 84(a0),d0
    a498:	|  |        |      movea.l 24(sp),a0
    a49c:	|  |        |      movea.l 72(a0),a0
    a4a0:	|  |        |      move.l 8(a0),d1
    a4a4:	|  |        |      move.l d1,-(sp)
    a4a6:	|  |        |      move.l d0,-(sp)
    a4a8:	|  |        |      jsr 17aa0 <__modsi3>
    a4ae:	|  |        |      addq.l #8,sp
    a4b0:	|  |        |      movea.l 24(sp),a0
    a4b4:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a4b8:	|  |        |      movea.l 24(sp),a0
    a4bc:	|  |        |      movea.l 72(a0),a0
    a4c0:	|  |        |      movea.l 4(a0),a1
    a4c4:	|  |        |      movea.l 24(sp),a0
    a4c8:	|  |        |      move.l 84(a0),d0
    a4cc:	|  |        |      move.l d0,d1
    a4ce:	|  |        |      move.l d1,d0
    a4d0:	|  |        |      add.l d0,d0
    a4d2:	|  |        |      add.l d1,d0
    a4d4:	|  |        |      add.l d0,d0
    a4d6:	|  |        |      add.l d0,d0
    a4d8:	|  |        |      lea (0,a1,d0.l),a0
    a4dc:	|  |        |      move.l 4(a0),d0
    a4e0:	|  |        |      movea.l 24(sp),a0
    a4e4:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a4e8:	|  |        \----> movea.l 24(sp),a0
    a4ec:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a4f2:	|  \-------------> tst.l 24(sp)
    a4f6:	\----------------- bne.w 9f44 <drawPeople+0x22>
	}
}
    a4fa:	                   nop
    a4fc:	                   nop
    a4fe:	                   move.l (sp)+,d2
    a500:	                   lea 24(sp),sp
    a504:	                   rts

0000a506 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a506:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a508:	          move.l 1a808 <allPeople>,(sp)
	while (thisPerson) {
    a50e:	      /-- bra.s a526 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a510:	/-----|-> movea.l (sp),a0
    a512:	|     |   movea.l 114(a0),a0
    a516:	|     |   move.l 4(a0),d0
    a51a:	|     |   cmp.l 8(sp),d0
    a51e:	|  /--|-- beq.s a52c <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a520:	|  |  |   movea.l (sp),a0
    a522:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a526:	|  |  \-> tst.l (sp)
    a528:	\--|----- bne.s a510 <findPerson+0xa>
    a52a:	   |  /-- bra.s a52e <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a52c:	   \--|-> nop
	}
	return thisPerson;
    a52e:	      \-> move.l (sp),d0
}
    a530:	          addq.l #4,sp
    a532:	          rts

0000a534 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a534:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a536:	       move.l 12(sp),-(sp)
    a53a:	       jsr a506 <findPerson>
    a540:	       addq.l #4,sp
    a542:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a544:	   /-- bne.s a54a <floatCharacter+0x16>
    a546:	   |   clr.w d0
    a548:	/--|-- bra.s a554 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a54a:	|  \-> movea.l (sp),a0
    a54c:	|      move.l 8(sp),24(a0)
	return TRUE;
    a552:	|      moveq #1,d0
}
    a554:	\----> addq.l #4,sp
    a556:	       rts

0000a558 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a558:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a55a:	          tst.l 8(sp)
    a55e:	      /-- bne.s a56c <forceWalkingPerson+0x14>
    a560:	      |   tst.l 12(sp)
    a564:	      +-- bne.s a56c <forceWalkingPerson+0x14>
    a566:	      |   clr.w d0
    a568:	/-----|-- bra.w a5fe <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a56c:	|     \-> move.l 16(sp),-(sp)
    a570:	|         jsr a506 <findPerson>
    a576:	|         addq.l #4,sp
    a578:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a57a:	|     /-- bne.s a580 <forceWalkingPerson+0x28>
    a57c:	|     |   clr.w d0
    a57e:	+-----|-- bra.s a5fe <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a580:	|     \-> movea.l (sp),a0
    a582:	|         move.l 68(a0),d0
    a586:	|     /-- beq.s a598 <forceWalkingPerson+0x40>
    a588:	|     |   movea.l (sp),a0
    a58a:	|     |   move.l 68(a0),d0
    a58e:	|     |   move.l d0,-(sp)
    a590:	|     |   jsr 464c <abortFunction>
    a596:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a598:	|     \-> movea.l (sp),a0
    a59a:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a5a0:	|         movea.l (sp),a0
    a5a2:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a5a6:	|         movea.l (sp),a0
    a5a8:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a5ae:	|         movea.l (sp),a0
    a5b0:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a5b6:	|         movea.l (sp),a0
    a5b8:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a5be:	|         movea.l (sp),a0
    a5c0:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a5c4:	|         movea.l (sp),a0
    a5c6:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a5ca:	|         move.l (sp),-(sp)
    a5cc:	|         jsr 9868 <doBorderStuff>
    a5d2:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a5d4:	|         pea 1 <_start+0x1>
    a5d8:	|         move.l 4(sp),-(sp)
    a5dc:	|         jsr bdc8 <walkMe>
    a5e2:	|         addq.l #8,sp
    a5e4:	|         tst.w d0
    a5e6:	|     /-- bne.s a5f0 <forceWalkingPerson+0x98>
    a5e8:	|     |   movea.l (sp),a0
    a5ea:	|     |   move.w 66(a0),d0
    a5ee:	|  /--|-- beq.s a5fc <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a5f0:	|  |  \-> movea.l (sp),a0
    a5f2:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a5f8:	|  |      moveq #1,d0
    a5fa:	+--|----- bra.s a5fe <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a5fc:	|  \----> clr.w d0
    }
}
    a5fe:	\-------> addq.l #4,sp
    a600:	          rts

0000a602 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a602:	                lea -56(sp),sp
    a606:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a608:	                move.l #320,56(sp)
    a610:	                move.l #200,52(sp)
    a618:	                moveq #-1,d0
    a61a:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a61e:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a626:	                clr.l 44(sp)
    a62a:	   /----------- bra.w a802 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a62e:	/--|----------> movea.l 1a8c0 <currentFloor>,a0
    a634:	|  |            move.l 12(a0),d1
    a638:	|  |            move.l 44(sp),d0
    a63c:	|  |            lsl.l #3,d0
    a63e:	|  |            movea.l d1,a0
    a640:	|  |            adda.l d0,a0
    a642:	|  |            move.l (a0),d0
    a644:	|  |            move.l d0,d1
    a646:	|  |            subq.l #1,d1
    a648:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a64c:	|  |            clr.l 40(sp)
    a650:	|  |     /----- bra.w a7e0 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a654:	|  |  /--|----> movea.l 1a8c0 <currentFloor>,a0
    a65a:	|  |  |  |      move.l 4(a0),d1
    a65e:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a664:	|  |  |  |      movea.l 12(a0),a0
    a668:	|  |  |  |      move.l 44(sp),d0
    a66c:	|  |  |  |      lsl.l #3,d0
    a66e:	|  |  |  |      adda.l d0,a0
    a670:	|  |  |  |      movea.l 4(a0),a0
    a674:	|  |  |  |      move.l 40(sp),d0
    a678:	|  |  |  |      add.l d0,d0
    a67a:	|  |  |  |      add.l d0,d0
    a67c:	|  |  |  |      adda.l d0,a0
    a67e:	|  |  |  |      move.l (a0),d0
    a680:	|  |  |  |      lsl.l #3,d0
    a682:	|  |  |  |      movea.l d1,a0
    a684:	|  |  |  |      adda.l d0,a0
    a686:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a68a:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a690:	|  |  |  |      move.l 4(a0),d1
    a694:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a69a:	|  |  |  |      movea.l 12(a0),a0
    a69e:	|  |  |  |      move.l 44(sp),d0
    a6a2:	|  |  |  |      lsl.l #3,d0
    a6a4:	|  |  |  |      adda.l d0,a0
    a6a6:	|  |  |  |      movea.l 4(a0),a0
    a6aa:	|  |  |  |      move.l 40(sp),d0
    a6ae:	|  |  |  |      add.l d0,d0
    a6b0:	|  |  |  |      add.l d0,d0
    a6b2:	|  |  |  |      adda.l d0,a0
    a6b4:	|  |  |  |      move.l (a0),d0
    a6b6:	|  |  |  |      lsl.l #3,d0
    a6b8:	|  |  |  |      movea.l d1,a0
    a6ba:	|  |  |  |      adda.l d0,a0
    a6bc:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a6c2:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a6c8:	|  |  |  |      move.l 4(a0),d1
    a6cc:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a6d2:	|  |  |  |      movea.l 12(a0),a0
    a6d6:	|  |  |  |      move.l 44(sp),d0
    a6da:	|  |  |  |      lsl.l #3,d0
    a6dc:	|  |  |  |      adda.l d0,a0
    a6de:	|  |  |  |      movea.l 4(a0),a0
    a6e2:	|  |  |  |      move.l 36(sp),d0
    a6e6:	|  |  |  |      add.l d0,d0
    a6e8:	|  |  |  |      add.l d0,d0
    a6ea:	|  |  |  |      adda.l d0,a0
    a6ec:	|  |  |  |      move.l (a0),d0
    a6ee:	|  |  |  |      lsl.l #3,d0
    a6f0:	|  |  |  |      movea.l d1,a0
    a6f2:	|  |  |  |      adda.l d0,a0
    a6f4:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a6f8:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a6fe:	|  |  |  |      move.l 4(a0),d1
    a702:	|  |  |  |      movea.l 1a8c0 <currentFloor>,a0
    a708:	|  |  |  |      movea.l 12(a0),a0
    a70c:	|  |  |  |      move.l 44(sp),d0
    a710:	|  |  |  |      lsl.l #3,d0
    a712:	|  |  |  |      adda.l d0,a0
    a714:	|  |  |  |      movea.l 4(a0),a0
    a718:	|  |  |  |      move.l 36(sp),d0
    a71c:	|  |  |  |      add.l d0,d0
    a71e:	|  |  |  |      add.l d0,d0
    a720:	|  |  |  |      adda.l d0,a0
    a722:	|  |  |  |      move.l (a0),d0
    a724:	|  |  |  |      lsl.l #3,d0
    a726:	|  |  |  |      movea.l d1,a0
    a728:	|  |  |  |      adda.l d0,a0
    a72a:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a730:	|  |  |  |      movea.l 68(sp),a0
    a734:	|  |  |  |      move.l (a0),d1
    a736:	|  |  |  |      movea.l 64(sp),a0
    a73a:	|  |  |  |      move.l (a0),d0
    a73c:	|  |  |  |      move.l d1,-(sp)
    a73e:	|  |  |  |      move.l d0,-(sp)
    a740:	|  |  |  |      move.l 24(sp),-(sp)
    a744:	|  |  |  |      move.l 32(sp),-(sp)
    a748:	|  |  |  |      move.l 40(sp),-(sp)
    a74c:	|  |  |  |      move.l 48(sp),-(sp)
    a750:	|  |  |  |      lea 28(sp),a0
    a754:	|  |  |  |      move.l a0,-(sp)
    a756:	|  |  |  |      lea 36(sp),a0
    a75a:	|  |  |  |      move.l a0,-(sp)
    a75c:	|  |  |  |      jsr 15e96 <closestPointOnLine>
    a762:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a766:	|  |  |  |      movea.l 64(sp),a0
    a76a:	|  |  |  |      move.l (a0),d0
    a76c:	|  |  |  |      move.l 8(sp),d1
    a770:	|  |  |  |      move.l d0,d2
    a772:	|  |  |  |      sub.l d1,d2
    a774:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a778:	|  |  |  |      movea.l 68(sp),a0
    a77c:	|  |  |  |      move.l (a0),d0
    a77e:	|  |  |  |      move.l 4(sp),d1
    a782:	|  |  |  |      move.l d0,d2
    a784:	|  |  |  |      sub.l d1,d2
    a786:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a78a:	|  |  |  |      move.l 28(sp),-(sp)
    a78e:	|  |  |  |      move.l 32(sp),-(sp)
    a792:	|  |  |  |      jsr 179f4 <__mulsi3>
    a798:	|  |  |  |      addq.l #8,sp
    a79a:	|  |  |  |      move.l d0,d2
    a79c:	|  |  |  |      move.l 24(sp),-(sp)
    a7a0:	|  |  |  |      move.l 28(sp),-(sp)
    a7a4:	|  |  |  |      jsr 179f4 <__mulsi3>
    a7aa:	|  |  |  |      addq.l #8,sp
    a7ac:	|  |  |  |      move.l d2,d1
    a7ae:	|  |  |  |      add.l d0,d1
    a7b0:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a7b4:	|  |  |  |      move.l 12(sp),d2
    a7b8:	|  |  |  |      cmp.l 32(sp),d2
    a7bc:	|  |  |  |  /-- bge.s a7d6 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a7be:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a7c4:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a7ca:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a7d0:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a7d6:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a7dc:	|  |  |  |      addq.l #1,40(sp)
    a7e0:	|  |  |  \----> movea.l 1a8c0 <currentFloor>,a0
    a7e6:	|  |  |         move.l 12(a0),d1
    a7ea:	|  |  |         move.l 44(sp),d0
    a7ee:	|  |  |         lsl.l #3,d0
    a7f0:	|  |  |         movea.l d1,a0
    a7f2:	|  |  |         adda.l d0,a0
    a7f4:	|  |  |         move.l (a0),d0
    a7f6:	|  |  |         cmp.l 40(sp),d0
    a7fa:	|  |  \-------- bgt.w a654 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a7fe:	|  |            addq.l #1,44(sp)
    a802:	|  \----------> movea.l 1a8c0 <currentFloor>,a0
    a808:	|               move.l 8(a0),d0
    a80c:	|               cmp.l 44(sp),d0
    a810:	\-------------- bgt.w a62e <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a814:	                moveq #-1,d0
    a816:	                cmp.l 48(sp),d0
    a81a:	            /-- bne.s a820 <handleClosestPoint+0x21e>
    a81c:	            |   clr.w d0
    a81e:	         /--|-- bra.s a83a <handleClosestPoint+0x238>
	*setX = gotX;
    a820:	         |  \-> movea.l 64(sp),a0
    a824:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a828:	         |      movea.l 68(sp),a0
    a82c:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a830:	         |      movea.l 72(sp),a0
    a834:	         |      move.l 48(sp),(a0)

	return TRUE;
    a838:	         |      moveq #1,d0
}
    a83a:	         \----> move.l (sp)+,d2
    a83c:	                lea 56(sp),sp
    a840:	                rts

0000a842 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a842:	clr.l 1a81c <personRegion+0x10>
	personRegion.sY = 0;
    a848:	clr.l 1a820 <personRegion+0x14>
	personRegion.di = -1;
    a84e:	moveq #-1,d0
    a850:	move.l d0,1a824 <personRegion+0x18>
	allScreenRegions = NULL;
    a856:	clr.l 1a8b4 <allScreenRegions>

	return TRUE;
    a85c:	moveq #1,d0
}
    a85e:	rts

0000a860 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a860:	          subq.l #4,sp
    a862:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a864:	          tst.l 12(sp)
    a868:	      /-- bne.s a870 <jumpPerson+0x10>
    a86a:	      |   tst.l 16(sp)
    a86e:	/-----|-- beq.s a8e4 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a870:	|     \-> move.l 20(sp),-(sp)
    a874:	|         jsr a506 <findPerson>
    a87a:	|         addq.l #4,sp
    a87c:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a880:	|  /----- beq.s a8e8 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a882:	|  |      movea.l 4(sp),a0
    a886:	|  |      move.l 68(a0),d0
    a88a:	|  |  /-- beq.s a89e <jumpPerson+0x3e>
    a88c:	|  |  |   movea.l 4(sp),a0
    a890:	|  |  |   move.l 68(a0),d0
    a894:	|  |  |   move.l d0,-(sp)
    a896:	|  |  |   jsr 464c <abortFunction>
    a89c:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a89e:	|  |  \-> movea.l 4(sp),a0
    a8a2:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a8a6:	|  |      movea.l 4(sp),a0
    a8aa:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a8ae:	|  |      movea.l 4(sp),a0
    a8b2:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a8b6:	|  |      move.l 16(sp),-(sp)
    a8ba:	|  |      jsr 17472 <__floatsisf>
    a8c0:	|  |      addq.l #4,sp
    a8c2:	|  |      move.l d0,d2
    a8c4:	|  |      move.l 12(sp),-(sp)
    a8c8:	|  |      jsr 17472 <__floatsisf>
    a8ce:	|  |      addq.l #4,sp
    a8d0:	|  |      move.l d2,-(sp)
    a8d2:	|  |      move.l d0,-(sp)
    a8d4:	|  |      move.l 12(sp),-(sp)
    a8d8:	|  |      jsr ac4e <moveAndScale>
    a8de:	|  |      lea 12(sp),sp
    a8e2:	|  |  /-- bra.s a8ea <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a8e4:	\--|--|-> nop
    a8e6:	   |  +-- bra.s a8ea <jumpPerson+0x8a>
    if (!moveMe) return;
    a8e8:	   \--|-> nop
}
    a8ea:	      \-> move.l (sp)+,d2
    a8ec:	          addq.l #4,sp
    a8ee:	          rts

0000a8f0 <killAllPeople>:


void killAllPeople () {
    a8f0:	          subq.l #8,sp
    a8f2:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a8f4:	   /----- bra.s a960 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a8f6:	/--|----> movea.l 1a808 <allPeople>,a0
    a8fc:	|  |      move.l 68(a0),d0
    a900:	|  |  /-- beq.s a916 <killAllPeople+0x26>
    a902:	|  |  |   movea.l 1a808 <allPeople>,a0
    a908:	|  |  |   move.l 68(a0),d0
    a90c:	|  |  |   move.l d0,-(sp)
    a90e:	|  |  |   jsr 464c <abortFunction>
    a914:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a916:	|  |  \-> movea.l 1a808 <allPeople>,a0
    a91c:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a920:	|  |      move.l 1a808 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a928:	|  |      movea.l 1a808 <allPeople>,a0
    a92e:	|  |      move.l 36(a0),d0
    a932:	|  |      move.l d0,1a808 <allPeople>
		removeObjectType (killPeople -> thisType);
    a938:	|  |      movea.l 8(sp),a0
    a93c:	|  |      move.l 114(a0),d0
    a940:	|  |      move.l d0,-(sp)
    a942:	|  |      jsr d720 <removeObjectType>
    a948:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a94a:	|  |      move.l 8(sp),4(sp)
    a950:	|  |      move.l 1a7a4 <SysBase>,d0
    a956:	|  |      movea.l d0,a6
    a958:	|  |      movea.l 4(sp),a1
    a95c:	|  |      jsr -690(a6)
	while (allPeople) {
    a960:	|  \----> move.l 1a808 <allPeople>,d0
    a966:	\-------- bne.s a8f6 <killAllPeople+0x6>
	}
}
    a968:	          nop
    a96a:	          nop
    a96c:	          movea.l (sp)+,a6
    a96e:	          addq.l #8,sp
    a970:	          rts

0000a972 <killMostPeople>:

void killMostPeople() {
    a972:	          lea -12(sp),sp
    a976:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    a978:	          move.l #108552,12(sp)

    while (*lookyHere) {
    a980:	   /----- bra.w aa06 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    a984:	/--|----> movea.l 12(sp),a0
    a988:	|  |      movea.l (a0),a0
    a98a:	|  |      move.l 118(a0),d0
    a98e:	|  |      moveq #32,d1
    a990:	|  |      and.l d1,d0
    a992:	|  |  /-- beq.s a9a4 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    a994:	|  |  |   movea.l 12(sp),a0
    a998:	|  |  |   move.l (a0),d0
    a99a:	|  |  |   moveq #36,d1
    a99c:	|  |  |   add.l d0,d1
    a99e:	|  |  |   move.l d1,12(sp)
    a9a2:	|  +--|-- bra.s aa06 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    a9a4:	|  |  \-> movea.l 12(sp),a0
    a9a8:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    a9ac:	|  |      movea.l 8(sp),a0
    a9b0:	|  |      move.l 36(a0),d0
    a9b4:	|  |      movea.l 12(sp),a0
    a9b8:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    a9ba:	|  |      movea.l 8(sp),a0
    a9be:	|  |      move.l 68(a0),d0
    a9c2:	|  |  /-- beq.s a9d6 <killMostPeople+0x64>
    a9c4:	|  |  |   movea.l 8(sp),a0
    a9c8:	|  |  |   move.l 68(a0),d0
    a9cc:	|  |  |   move.l d0,-(sp)
    a9ce:	|  |  |   jsr 464c <abortFunction>
    a9d4:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    a9d6:	|  |  \-> movea.l 8(sp),a0
    a9da:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    a9de:	|  |      movea.l 8(sp),a0
    a9e2:	|  |      move.l 114(a0),d0
    a9e6:	|  |      move.l d0,-(sp)
    a9e8:	|  |      jsr d720 <removeObjectType>
    a9ee:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    a9f0:	|  |      move.l 8(sp),4(sp)
    a9f6:	|  |      move.l 1a7a4 <SysBase>,d0
    a9fc:	|  |      movea.l d0,a6
    a9fe:	|  |      movea.l 4(sp),a1
    aa02:	|  |      jsr -690(a6)
    while (*lookyHere) {
    aa06:	|  \----> movea.l 12(sp),a0
    aa0a:	|         move.l (a0),d0
    aa0c:	\-------- bne.w a984 <killMostPeople+0x12>
        }
    }
}
    aa10:	          nop
    aa12:	          nop
    aa14:	          movea.l (sp)+,a6
    aa16:	          lea 12(sp),sp
    aa1a:	          rts

0000aa1c <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    aa1c:	clr.l -(sp)
    aa1e:	move.l sp,d0
    aa20:	addq.l #8,d0
    aa22:	move.l d0,-(sp)
    aa24:	jsr 80a4 <setFrames>
    aa2a:	addq.l #8,sp
}
    aa2c:	nop
    aa2e:	rts

0000aa30 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    aa30:	          lea -12(sp),sp
    aa34:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    aa36:	          tst.l 20(sp)
    aa3a:	      /-- bne.s aa48 <makeWalkingPerson+0x18>
    aa3c:	      |   tst.l 24(sp)
    aa40:	      +-- bne.s aa48 <makeWalkingPerson+0x18>
    aa42:	      |   clr.w d0
    aa44:	/-----|-- bra.w abe0 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    aa48:	|     \-> movea.l 1a8c0 <currentFloor>,a0
    aa4e:	|         move.l 8(a0),d0
    aa52:	|     /-- bne.s aa5a <makeWalkingPerson+0x2a>
    aa54:	|     |   clr.w d0
    aa56:	+-----|-- bra.w abe0 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    aa5a:	|     \-> move.l 28(sp),-(sp)
    aa5e:	|         jsr a506 <findPerson>
    aa64:	|         addq.l #4,sp
    aa66:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    aa6a:	|     /-- bne.s aa72 <makeWalkingPerson+0x42>
    aa6c:	|     |   clr.w d0
    aa6e:	+-----|-- bra.w abe0 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    aa72:	|     \-> movea.l 12(sp),a0
    aa76:	|         move.l 68(a0),d0
    aa7a:	|     /-- beq.s aa8e <makeWalkingPerson+0x5e>
    aa7c:	|     |   movea.l 12(sp),a0
    aa80:	|     |   move.l 68(a0),d0
    aa84:	|     |   move.l d0,-(sp)
    aa86:	|     |   jsr 464c <abortFunction>
    aa8c:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    aa8e:	|     \-> movea.l 12(sp),a0
    aa92:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    aa96:	|         movea.l 12(sp),a0
    aa9a:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    aaa0:	|         movea.l 12(sp),a0
    aaa4:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    aaaa:	|         movea.l 12(sp),a0
    aaae:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    aab4:	|         movea.l 12(sp),a0
    aab8:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    aabe:	|         move.l 24(sp),-(sp)
    aac2:	|         move.l 24(sp),-(sp)
    aac6:	|         jsr 16398 <inFloor>
    aacc:	|         addq.l #8,sp
    aace:	|         movea.l 12(sp),a0
    aad2:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    aad6:	|         movea.l 12(sp),a0
    aada:	|         move.l 60(a0),d0
    aade:	|         moveq #-1,d1
    aae0:	|         cmp.l d0,d1
    aae2:	|     /-- bne.s ab12 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    aae4:	|     |   movea.w #60,a0
    aae8:	|     |   adda.l 12(sp),a0
    aaec:	|     |   moveq #44,d1
    aaee:	|     |   add.l 12(sp),d1
    aaf2:	|     |   moveq #40,d0
    aaf4:	|     |   add.l 12(sp),d0
    aaf8:	|     |   move.l a0,-(sp)
    aafa:	|     |   move.l d1,-(sp)
    aafc:	|     |   move.l d0,-(sp)
    aafe:	|     |   jsr a602 <handleClosestPoint>
    ab04:	|     |   lea 12(sp),sp
    ab08:	|     |   tst.w d0
    ab0a:	|     +-- bne.s ab12 <makeWalkingPerson+0xe2>
    ab0c:	|     |   clr.w d0
    ab0e:	+-----|-- bra.w abe0 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ab12:	|     \-> movea.l 12(sp),a0
    ab16:	|         move.l 4(a0),d0
    ab1a:	|         move.l d0,-(sp)
    ab1c:	|         jsr 1740a <__fixsfsi>
    ab22:	|         addq.l #4,sp
    ab24:	|         move.l d0,d2
    ab26:	|         movea.l 12(sp),a0
    ab2a:	|         move.l (a0),d0
    ab2c:	|         move.l d0,-(sp)
    ab2e:	|         jsr 1740a <__fixsfsi>
    ab34:	|         addq.l #4,sp
    ab36:	|         move.l d2,-(sp)
    ab38:	|         move.l d0,-(sp)
    ab3a:	|         jsr 16398 <inFloor>
    ab40:	|         addq.l #8,sp
    ab42:	|         movea.l 12(sp),a0
    ab46:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    ab4a:	|         movea.l 12(sp),a0
    ab4e:	|         move.l 56(a0),d0
    ab52:	|         moveq #-1,d1
    ab54:	|         cmp.l d0,d1
    ab56:	|     /-- bne.s aba8 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    ab58:	|     |   movea.l 12(sp),a0
    ab5c:	|     |   move.l (a0),d0
    ab5e:	|     |   move.l d0,-(sp)
    ab60:	|     |   jsr 1740a <__fixsfsi>
    ab66:	|     |   addq.l #4,sp
    ab68:	|     |   move.l d0,8(sp)
    ab6c:	|     |   movea.l 12(sp),a0
    ab70:	|     |   move.l 4(a0),d0
    ab74:	|     |   move.l d0,-(sp)
    ab76:	|     |   jsr 1740a <__fixsfsi>
    ab7c:	|     |   addq.l #4,sp
    ab7e:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    ab82:	|     |   moveq #56,d0
    ab84:	|     |   add.l 12(sp),d0
    ab88:	|     |   move.l d0,-(sp)
    ab8a:	|     |   lea 8(sp),a0
    ab8e:	|     |   move.l a0,-(sp)
    ab90:	|     |   moveq #16,d0
    ab92:	|     |   add.l sp,d0
    ab94:	|     |   move.l d0,-(sp)
    ab96:	|     |   jsr a602 <handleClosestPoint>
    ab9c:	|     |   lea 12(sp),sp
    aba0:	|     |   tst.w d0
    aba2:	|     +-- bne.s aba8 <makeWalkingPerson+0x178>
    aba4:	|     |   clr.w d0
    aba6:	+-----|-- bra.s abe0 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    aba8:	|     \-> move.l 12(sp),-(sp)
    abac:	|         jsr 9868 <doBorderStuff>
    abb2:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    abb4:	|         clr.l -(sp)
    abb6:	|         move.l 16(sp),-(sp)
    abba:	|         jsr bdc8 <walkMe>
    abc0:	|         addq.l #8,sp
    abc2:	|         tst.w d0
    abc4:	|     /-- bne.s abd0 <makeWalkingPerson+0x1a0>
    abc6:	|     |   movea.l 12(sp),a0
    abca:	|     |   move.w 66(a0),d0
    abce:	|  /--|-- beq.s abde <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    abd0:	|  |  \-> movea.l 12(sp),a0
    abd4:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    abda:	|  |      moveq #1,d0
    abdc:	+--|----- bra.s abe0 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    abde:	|  \----> clr.w d0
	}
}
    abe0:	\-------> move.l (sp)+,d2
    abe2:	          lea 12(sp),sp
    abe6:	          rts

0000abe8 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    abe8:	       lea -16(sp),sp
    abec:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    abee:	       moveq #12,d0
    abf0:	       move.l d0,16(sp)
    abf4:	       clr.l 12(sp)
    abf8:	       move.l 1a7a4 <SysBase>,d0
    abfe:	       movea.l d0,a6
    ac00:	       move.l 16(sp),d0
    ac04:	       move.l 12(sp),d1
    ac08:	       jsr -684(a6)
    ac0c:	       move.l d0,8(sp)
    ac10:	       move.l 8(sp),d0
    ac14:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ac18:	   /-- bne.s ac2c <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ac1a:	   |   pea 18f5f <PutChar+0x1455>
    ac20:	   |   jsr 17036 <KPrintF>
    ac26:	   |   addq.l #4,sp
        return NULL;    
    ac28:	   |   moveq #0,d0
    ac2a:	/--|-- bra.s ac46 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ac2c:	|  \-> movea.l 4(sp),a0
    ac30:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    ac32:	|      movea.l 4(sp),a0
    ac36:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ac3a:	|      movea.l 4(sp),a0
    ac3e:	|      clr.l 4(a0)
	return newAnim;
    ac42:	|      move.l 4(sp),d0
}
    ac46:	\----> movea.l (sp)+,a6
    ac48:	       lea 16(sp),sp
    ac4c:	       rts

0000ac4e <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    ac4e:	    move.l d2,-(sp)
	me->x = x;
    ac50:	    movea.l 8(sp),a0
    ac54:	    move.l 12(sp),(a0)
	me->y = y;
    ac58:	    movea.l 8(sp),a0
    ac5c:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    ac62:	    movea.l 8(sp),a0
    ac66:	    clr.l 8(a0)
	me->oldy = 0;
    ac6a:	    movea.l 8(sp),a0
    ac6e:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    ac72:	    movea.l 8(sp),a0
    ac76:	    move.l 118(a0),d0
    ac7a:	    moveq #2,d1
    ac7c:	    and.l d1,d0
    ac7e:	/-- bne.s acd6 <moveAndScale+0x88>
    ac80:	|   move.w 1a138 <scaleDivide>,d0
    ac86:	+-- beq.s acd6 <moveAndScale+0x88>
    ac88:	|   movea.l 8(sp),a0
    ac8c:	|   move.l 4(a0),d2
    ac90:	|   move.w 1a136 <scaleHorizon>,d0
    ac96:	|   movea.w d0,a0
    ac98:	|   move.l a0,-(sp)
    ac9a:	|   jsr 17472 <__floatsisf>
    aca0:	|   addq.l #4,sp
    aca2:	|   move.l d0,-(sp)
    aca4:	|   move.l d2,-(sp)
    aca6:	|   jsr 17766 <__subsf3>
    acac:	|   addq.l #8,sp
    acae:	|   move.l d0,d2
    acb0:	|   move.w 1a138 <scaleDivide>,d0
    acb6:	|   movea.w d0,a0
    acb8:	|   move.l a0,-(sp)
    acba:	|   jsr 17472 <__floatsisf>
    acc0:	|   addq.l #4,sp
    acc2:	|   move.l d0,-(sp)
    acc4:	|   move.l d2,-(sp)
    acc6:	|   jsr 1731e <__divsf3>
    accc:	|   addq.l #8,sp
    acce:	|   movea.l 8(sp),a0
    acd2:	|   move.l d0,32(a0)
}
    acd6:	\-> nop
    acd8:	    move.l (sp)+,d2
    acda:	    rts

0000acdc <removeOneCharacter>:

void removeOneCharacter (int i) {
    acdc:	          lea -16(sp),sp
    ace0:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ace2:	          move.l 24(sp),-(sp)
    ace6:	          jsr a506 <findPerson>
    acec:	          addq.l #4,sp
    acee:	          move.l d0,8(sp)

    if (p) {
    acf2:	/-------- beq.w add2 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    acf6:	|         move.l 1a8b8 <overRegion>,d0
    acfc:	|         cmpi.l #108556,d0
    ad02:	|     /-- bne.s ad20 <removeOneCharacter+0x44>
    ad04:	|     |   movea.l 1a8b8 <overRegion>,a0
    ad0a:	|     |   move.l 28(a0),d1
    ad0e:	|     |   movea.l 8(sp),a0
    ad12:	|     |   move.l 114(a0),d0
    ad16:	|     |   cmp.l d1,d0
    ad18:	|     +-- bne.s ad20 <removeOneCharacter+0x44>
            overRegion = NULL;
    ad1a:	|     |   clr.l 1a8b8 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ad20:	|     \-> movea.l 8(sp),a0
    ad24:	|         move.l 68(a0),d0
    ad28:	|     /-- beq.s ad3c <removeOneCharacter+0x60>
    ad2a:	|     |   movea.l 8(sp),a0
    ad2e:	|     |   move.l 68(a0),d0
    ad32:	|     |   move.l d0,-(sp)
    ad34:	|     |   jsr 464c <abortFunction>
    ad3a:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    ad3c:	|     \-> movea.l 8(sp),a0
    ad40:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    ad44:	|         clr.l 12(sp)
    ad48:	|     /-- bra.s ad70 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    ad4a:	|  /--|-> movea.l 8(sp),a0
    ad4e:	|  |  |   movea.l 80(a0),a0
    ad52:	|  |  |   move.l (a0),d1
    ad54:	|  |  |   move.l 12(sp),d0
    ad58:	|  |  |   add.l d0,d0
    ad5a:	|  |  |   add.l d0,d0
    ad5c:	|  |  |   movea.l d1,a0
    ad5e:	|  |  |   adda.l d0,a0
    ad60:	|  |  |   move.l (a0),d0
    ad62:	|  |  |   move.l d0,-(sp)
    ad64:	|  |  |   jsr 97e4 <deleteAnim>
    ad6a:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    ad6c:	|  |  |   addq.l #1,12(sp)
    ad70:	|  |  \-> moveq #2,d0
    ad72:	|  |      cmp.l 12(sp),d0
    ad76:	|  \----- bge.s ad4a <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    ad78:	|         move.l #108552,16(sp)
    ad80:	|     /-- bra.s ad90 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    ad82:	|  /--|-> movea.l 16(sp),a0
    ad86:	|  |  |   move.l (a0),d0
    ad88:	|  |  |   moveq #36,d1
    ad8a:	|  |  |   add.l d0,d1
    ad8c:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    ad90:	|  |  \-> movea.l 16(sp),a0
    ad94:	|  |      move.l (a0),d0
    ad96:	|  |      cmp.l 8(sp),d0
    ad9a:	|  \----- bne.s ad82 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    ad9c:	|         movea.l 8(sp),a0
    ada0:	|         move.l 36(a0),d0
    ada4:	|         movea.l 16(sp),a0
    ada8:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    adaa:	|         movea.l 8(sp),a0
    adae:	|         move.l 114(a0),d0
    adb2:	|         move.l d0,-(sp)
    adb4:	|         jsr d720 <removeObjectType>
    adba:	|         addq.l #4,sp
        FreeVec(p);
    adbc:	|         move.l 8(sp),4(sp)
    adc2:	|         move.l 1a7a4 <SysBase>,d0
    adc8:	|         movea.l d0,a6
    adca:	|         movea.l 4(sp),a1
    adce:	|         jsr -690(a6)
    }
}
    add2:	\-------> nop
    add4:	          movea.l (sp)+,a6
    add6:	          lea 16(sp),sp
    adda:	          rts

0000addc <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    addc:	       subq.l #8,sp
    adde:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    ade0:	       movea.l 16(sp),a0
    ade4:	       movea.l 80(a0),a0
    ade8:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    adee:	       movea.l 16(sp),a0
    adf2:	       move.l 92(a0),d2
    adf6:	       move.l 4(sp),-(sp)
    adfa:	       pea b4 <_start+0xb4>
    adfe:	       jsr 17a72 <__divsi3>
    ae04:	       addq.l #8,sp
    ae06:	       add.l d2,d0
    ae08:	       move.l d0,d1
    ae0a:	       addi.l #180,d1
    ae10:	       movea.l 16(sp),a0
    ae14:	       move.l 100(a0),d0
    ae18:	       move.l d1,d2
    ae1a:	       add.l d0,d2
    ae1c:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    ae20:	   /-- bra.s ae2a <rethinkAngle+0x4e>
    ae22:	/--|-> addi.l #-360,8(sp)
    ae2a:	|  \-> cmpi.l #359,8(sp)
    ae32:	\----- bgt.s ae22 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    ae34:	       move.l 4(sp),-(sp)
    ae38:	       move.l 12(sp),-(sp)
    ae3c:	       jsr 179f4 <__mulsi3>
    ae42:	       addq.l #8,sp
    ae44:	       pea 168 <decodeFilename+0x50>
    ae48:	       move.l d0,-(sp)
    ae4a:	       jsr 17a72 <__divsi3>
    ae50:	       addq.l #8,sp
    ae52:	       movea.l 16(sp),a0
    ae56:	       move.l d0,106(a0)
}
    ae5a:	       nop
    ae5c:	       move.l (sp)+,d2
    ae5e:	       addq.l #8,sp
    ae60:	       rts

0000ae62 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    ae62:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    ae64:	          movea.l 8(sp),a0
    ae68:	          move.l 8(a0),d0
    ae6c:	          move.l 12(sp),-(sp)
    ae70:	          move.l d0,-(sp)
    ae72:	          jsr 8d0 <put2bytes>
    ae78:	          addq.l #8,sp
	if (p -> numFrames) {
    ae7a:	          movea.l 8(sp),a0
    ae7e:	          move.l 8(a0),d0
    ae82:	/-------- beq.w af26 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    ae86:	|         movea.l 8(sp),a0
    ae8a:	|         movea.l (a0),a0
    ae8c:	|         move.l (a0),d0
    ae8e:	|         move.l 12(sp),-(sp)
    ae92:	|         move.l d0,-(sp)
    ae94:	|         jsr 958 <put4bytes>
    ae9a:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    ae9c:	|         clr.l (sp)
    ae9e:	|     /-- bra.s af18 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    aea0:	|  /--|-> movea.l 8(sp),a0
    aea4:	|  |  |   movea.l 4(a0),a0
    aea8:	|  |  |   move.l (sp),d1
    aeaa:	|  |  |   move.l d1,d0
    aeac:	|  |  |   add.l d0,d0
    aeae:	|  |  |   add.l d1,d0
    aeb0:	|  |  |   add.l d0,d0
    aeb2:	|  |  |   add.l d0,d0
    aeb4:	|  |  |   adda.l d0,a0
    aeb6:	|  |  |   move.l (a0),d0
    aeb8:	|  |  |   move.l 12(sp),-(sp)
    aebc:	|  |  |   move.l d0,-(sp)
    aebe:	|  |  |   jsr 958 <put4bytes>
    aec4:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    aec6:	|  |  |   movea.l 8(sp),a0
    aeca:	|  |  |   movea.l 4(a0),a0
    aece:	|  |  |   move.l (sp),d1
    aed0:	|  |  |   move.l d1,d0
    aed2:	|  |  |   add.l d0,d0
    aed4:	|  |  |   add.l d1,d0
    aed6:	|  |  |   add.l d0,d0
    aed8:	|  |  |   add.l d0,d0
    aeda:	|  |  |   adda.l d0,a0
    aedc:	|  |  |   move.l 4(a0),d0
    aee0:	|  |  |   move.l 12(sp),-(sp)
    aee4:	|  |  |   move.l d0,-(sp)
    aee6:	|  |  |   jsr 958 <put4bytes>
    aeec:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    aeee:	|  |  |   movea.l 8(sp),a0
    aef2:	|  |  |   movea.l 4(a0),a0
    aef6:	|  |  |   move.l (sp),d1
    aef8:	|  |  |   move.l d1,d0
    aefa:	|  |  |   add.l d0,d0
    aefc:	|  |  |   add.l d1,d0
    aefe:	|  |  |   add.l d0,d0
    af00:	|  |  |   add.l d0,d0
    af02:	|  |  |   adda.l d0,a0
    af04:	|  |  |   move.l 8(a0),d0
    af08:	|  |  |   move.l 12(sp),-(sp)
    af0c:	|  |  |   move.l d0,-(sp)
    af0e:	|  |  |   jsr 958 <put4bytes>
    af14:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    af16:	|  |  |   addq.l #1,(sp)
    af18:	|  |  \-> movea.l 8(sp),a0
    af1c:	|  |      move.l 8(a0),d0
    af20:	|  |      cmp.l (sp),d0
    af22:	|  \----- bgt.w aea0 <saveAnim+0x3e>
		}
	}
	return TRUE;
    af26:	\-------> moveq #1,d0
}
    af28:	          addq.l #4,sp
    af2a:	          rts

0000af2c <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    af2c:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    af2e:	             movea.l 8(sp),a0
    af32:	             move.l 4(a0),d0
    af36:	             move.l 12(sp),-(sp)
    af3a:	             move.l d0,-(sp)
    af3c:	             jsr 8d0 <put2bytes>
    af42:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    af44:	             clr.l (sp)
    af46:	   /-------- bra.s af72 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    af48:	/--|-------> movea.l 8(sp),a0
    af4c:	|  |         move.l (a0),d1
    af4e:	|  |         move.l (sp),d0
    af50:	|  |         add.l d0,d0
    af52:	|  |         add.l d0,d0
    af54:	|  |         movea.l d1,a0
    af56:	|  |         adda.l d0,a0
    af58:	|  |         move.l (a0),d0
    af5a:	|  |         move.l 12(sp),-(sp)
    af5e:	|  |         move.l d0,-(sp)
    af60:	|  |         jsr ae62 <saveAnim>
    af66:	|  |         addq.l #8,sp
    af68:	|  |         tst.w d0
    af6a:	|  |     /-- bne.s af70 <saveCostume+0x44>
    af6c:	|  |     |   clr.w d0
    af6e:	|  |  /--|-- bra.s af86 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    af70:	|  |  |  \-> addq.l #1,(sp)
    af72:	|  \--|----> movea.l 8(sp),a0
    af76:	|     |      move.l 4(a0),d1
    af7a:	|     |      move.l d1,d0
    af7c:	|     |      add.l d0,d0
    af7e:	|     |      add.l d1,d0
    af80:	|     |      cmp.l (sp),d0
    af82:	\-----|----- bgt.s af48 <saveCostume+0x1c>
	}

	return TRUE;
    af84:	      |      moveq #1,d0
}
    af86:	      \----> addq.l #4,sp
    af88:	             rts

0000af8a <savePeople>:

BOOL savePeople (BPTR fp) {
    af8a:	             lea -144(sp),sp
    af8e:	             move.l a6,-(sp)
    af90:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    af92:	             move.l 1a808 <allPeople>,148(sp)
	int countPeople = 0, a;
    af9a:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    af9e:	             move.w 1a136 <scaleHorizon>,d0
    afa4:	             movea.w d0,a0
    afa6:	             move.l 156(sp),-(sp)
    afaa:	             move.l a0,-(sp)
    afac:	             jsr a9c <putSigned>
    afb2:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    afb4:	             move.w 1a138 <scaleDivide>,d0
    afba:	             movea.w d0,a0
    afbc:	             move.l 156(sp),-(sp)
    afc0:	             move.l a0,-(sp)
    afc2:	             jsr a9c <putSigned>
    afc8:	             addq.l #8,sp

	while (me) {
    afca:	         /-- bra.s afda <savePeople+0x50>
		countPeople ++;
    afcc:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    afd0:	      |  |   movea.l 148(sp),a0
    afd4:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    afda:	      |  \-> tst.l 148(sp)
    afde:	      \----- bne.s afcc <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    afe0:	             move.l 156(sp),-(sp)
    afe4:	             move.l 148(sp),-(sp)
    afe8:	             jsr 8d0 <put2bytes>
    afee:	             addq.l #8,sp

	me = allPeople;
    aff0:	             move.l 1a808 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    aff8:	             clr.l 140(sp)
    affc:	   /-------- bra.w b454 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b000:	/--|-------> movea.l 148(sp),a0
    b004:	|  |         move.l (a0),d0
    b006:	|  |         move.l 156(sp),-(sp)
    b00a:	|  |         move.l d0,-(sp)
    b00c:	|  |         jsr a46 <putFloat>
    b012:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b014:	|  |         movea.l 148(sp),a0
    b018:	|  |         move.l 4(a0),d0
    b01c:	|  |         move.l 156(sp),-(sp)
    b020:	|  |         move.l d0,-(sp)
    b022:	|  |         jsr a46 <putFloat>
    b028:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b02a:	|  |         movea.l 148(sp),a0
    b02e:	|  |         move.l 80(a0),d0
    b032:	|  |         move.l 156(sp),-(sp)
    b036:	|  |         move.l d0,-(sp)
    b038:	|  |         jsr af2c <saveCostume>
    b03e:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b040:	|  |         movea.l 148(sp),a0
    b044:	|  |         move.l 72(a0),d0
    b048:	|  |         move.l 156(sp),-(sp)
    b04c:	|  |         move.l d0,-(sp)
    b04e:	|  |         jsr ae62 <saveAnim>
    b054:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b056:	|  |         move.l 156(sp),136(sp)
    b05c:	|  |         movea.l 148(sp),a0
    b060:	|  |         move.l 72(a0),d1
    b064:	|  |         movea.l 148(sp),a0
    b068:	|  |         move.l 76(a0),d0
    b06c:	|  |         cmp.l d1,d0
    b06e:	|  |         seq d0
    b070:	|  |         neg.b d0
    b072:	|  |         move.b d0,d0
    b074:	|  |         andi.l #255,d0
    b07a:	|  |         move.l d0,132(sp)
    b07e:	|  |         move.l 1a7ac <DOSBase>,d0
    b084:	|  |         movea.l d0,a6
    b086:	|  |         move.l 136(sp),d1
    b08a:	|  |         move.l 132(sp),d2
    b08e:	|  |         jsr -312(a6)
    b092:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b096:	|  |         movea.l 148(sp),a0
    b09a:	|  |         move.l 32(a0),d0
    b09e:	|  |         move.l 156(sp),-(sp)
    b0a2:	|  |         move.l d0,-(sp)
    b0a4:	|  |         jsr a46 <putFloat>
    b0aa:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b0ac:	|  |         movea.l 148(sp),a0
    b0b0:	|  |         move.l 118(a0),d0
    b0b4:	|  |         move.l 156(sp),-(sp)
    b0b8:	|  |         move.l d0,-(sp)
    b0ba:	|  |         jsr 8d0 <put2bytes>
    b0c0:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b0c2:	|  |         movea.l 148(sp),a0
    b0c6:	|  |         move.l 20(a0),d0
    b0ca:	|  |         move.l 156(sp),-(sp)
    b0ce:	|  |         move.l d0,-(sp)
    b0d0:	|  |         jsr 8d0 <put2bytes>
    b0d6:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b0d8:	|  |         movea.l 148(sp),a0
    b0dc:	|  |         move.l 40(a0),d0
    b0e0:	|  |         move.l 156(sp),-(sp)
    b0e4:	|  |         move.l d0,-(sp)
    b0e6:	|  |         jsr 8d0 <put2bytes>
    b0ec:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b0ee:	|  |         movea.l 148(sp),a0
    b0f2:	|  |         move.l 44(a0),d0
    b0f6:	|  |         move.l 156(sp),-(sp)
    b0fa:	|  |         move.l d0,-(sp)
    b0fc:	|  |         jsr 8d0 <put2bytes>
    b102:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b104:	|  |         movea.l 148(sp),a0
    b108:	|  |         move.l 48(a0),d0
    b10c:	|  |         move.l 156(sp),-(sp)
    b110:	|  |         move.l d0,-(sp)
    b112:	|  |         jsr 8d0 <put2bytes>
    b118:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b11a:	|  |         movea.l 148(sp),a0
    b11e:	|  |         move.l 52(a0),d0
    b122:	|  |         move.l 156(sp),-(sp)
    b126:	|  |         move.l d0,-(sp)
    b128:	|  |         jsr 8d0 <put2bytes>
    b12e:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b130:	|  |         movea.l 148(sp),a0
    b134:	|  |         move.l 84(a0),d0
    b138:	|  |         move.l 156(sp),-(sp)
    b13c:	|  |         move.l d0,-(sp)
    b13e:	|  |         jsr 8d0 <put2bytes>
    b144:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b146:	|  |         movea.l 148(sp),a0
    b14a:	|  |         move.l 88(a0),d0
    b14e:	|  |         move.l 156(sp),-(sp)
    b152:	|  |         move.l d0,-(sp)
    b154:	|  |         jsr 8d0 <put2bytes>
    b15a:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b15c:	|  |         movea.l 148(sp),a0
    b160:	|  |         move.l 28(a0),d0
    b164:	|  |         move.l 156(sp),-(sp)
    b168:	|  |         move.l d0,-(sp)
    b16a:	|  |         jsr 8d0 <put2bytes>
    b170:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b172:	|  |         movea.l 148(sp),a0
    b176:	|  |         move.l 122(a0),d0
    b17a:	|  |         move.l 156(sp),-(sp)
    b17e:	|  |         move.l d0,-(sp)
    b180:	|  |         jsr 8d0 <put2bytes>
    b186:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b188:	|  |         movea.l 148(sp),a0
    b18c:	|  |         move.l 24(a0),d0
    b190:	|  |         move.l d0,d0
    b192:	|  |         movea.w d0,a0
    b194:	|  |         move.l 156(sp),-(sp)
    b198:	|  |         move.l a0,-(sp)
    b19a:	|  |         jsr a9c <putSigned>
    b1a0:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b1a2:	|  |         move.l 156(sp),124(sp)
    b1a8:	|  |         movea.l 148(sp),a0
    b1ac:	|  |         move.w 104(a0),d0
    b1b0:	|  |         movea.w d0,a0
    b1b2:	|  |         move.l a0,120(sp)
    b1b6:	|  |         move.l 1a7ac <DOSBase>,d0
    b1bc:	|  |         movea.l d0,a6
    b1be:	|  |         move.l 124(sp),d1
    b1c2:	|  |         move.l 120(sp),d2
    b1c6:	|  |         jsr -312(a6)
    b1ca:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b1ce:	|  |         move.l 156(sp),112(sp)
    b1d4:	|  |         movea.l 148(sp),a0
    b1d8:	|  |         move.w 64(a0),d0
    b1dc:	|  |         movea.w d0,a0
    b1de:	|  |         move.l a0,108(sp)
    b1e2:	|  |         move.l 1a7ac <DOSBase>,d0
    b1e8:	|  |         movea.l d0,a6
    b1ea:	|  |         move.l 112(sp),d1
    b1ee:	|  |         move.l 108(sp),d2
    b1f2:	|  |         jsr -312(a6)
    b1f6:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b1fa:	|  |         move.l 156(sp),100(sp)
    b200:	|  |         movea.l 148(sp),a0
    b204:	|  |         move.w 66(a0),d0
    b208:	|  |         movea.w d0,a0
    b20a:	|  |         move.l a0,96(sp)
    b20e:	|  |         move.l 1a7ac <DOSBase>,d0
    b214:	|  |         movea.l d0,a6
    b216:	|  |         move.l 100(sp),d1
    b21a:	|  |         move.l 96(sp),d2
    b21e:	|  |         jsr -312(a6)
    b222:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b226:	|  |         movea.l 148(sp),a0
    b22a:	|  |         move.l 68(a0),d0
    b22e:	|  |  /----- beq.s b26c <savePeople+0x2e2>
			FPutC (fp, 1);
    b230:	|  |  |      move.l 156(sp),76(sp)
    b236:	|  |  |      moveq #1,d0
    b238:	|  |  |      move.l d0,72(sp)
    b23c:	|  |  |      move.l 1a7ac <DOSBase>,d0
    b242:	|  |  |      movea.l d0,a6
    b244:	|  |  |      move.l 76(sp),d1
    b248:	|  |  |      move.l 72(sp),d2
    b24c:	|  |  |      jsr -312(a6)
    b250:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b254:	|  |  |      movea.l 148(sp),a0
    b258:	|  |  |      move.l 68(a0),d0
    b25c:	|  |  |      move.l 156(sp),-(sp)
    b260:	|  |  |      move.l d0,-(sp)
    b262:	|  |  |      jsr c402 <saveFunction>
    b268:	|  |  |      addq.l #8,sp
    b26a:	|  |  |  /-- bra.s b290 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b26c:	|  |  \--|-> move.l 156(sp),88(sp)
    b272:	|  |     |   moveq #1,d0
    b274:	|  |     |   move.l d0,84(sp)
    b278:	|  |     |   move.l 1a7ac <DOSBase>,d0
    b27e:	|  |     |   movea.l d0,a6
    b280:	|  |     |   move.l 88(sp),d1
    b284:	|  |     |   move.l 84(sp),d2
    b288:	|  |     |   jsr -312(a6)
    b28c:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b290:	|  |     \-> movea.l 148(sp),a0
    b294:	|  |         move.l 106(a0),d0
    b298:	|  |         move.l 156(sp),-(sp)
    b29c:	|  |         move.l d0,-(sp)
    b29e:	|  |         jsr 8d0 <put2bytes>
    b2a4:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b2a6:	|  |         movea.l 148(sp),a0
    b2aa:	|  |         move.l 92(a0),d0
    b2ae:	|  |         move.l 156(sp),-(sp)
    b2b2:	|  |         move.l d0,-(sp)
    b2b4:	|  |         jsr 8d0 <put2bytes>
    b2ba:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b2bc:	|  |         movea.l 148(sp),a0
    b2c0:	|  |         move.l 100(a0),d0
    b2c4:	|  |         move.l 156(sp),-(sp)
    b2c8:	|  |         move.l d0,-(sp)
    b2ca:	|  |         jsr 8d0 <put2bytes>
    b2d0:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b2d2:	|  |         movea.l 148(sp),a0
    b2d6:	|  |         move.l 96(a0),d0
    b2da:	|  |         move.l 156(sp),-(sp)
    b2de:	|  |         move.l d0,-(sp)
    b2e0:	|  |         jsr 8d0 <put2bytes>
    b2e6:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b2e8:	|  |         movea.l 148(sp),a0
    b2ec:	|  |         move.l 110(a0),d0
    b2f0:	|  |         move.l d0,d0
    b2f2:	|  |         movea.w d0,a0
    b2f4:	|  |         move.l 156(sp),-(sp)
    b2f8:	|  |         move.l a0,-(sp)
    b2fa:	|  |         jsr a9c <putSigned>
    b300:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b302:	|  |         movea.l 148(sp),a0
    b306:	|  |         move.l 56(a0),d0
    b30a:	|  |         move.l d0,d0
    b30c:	|  |         movea.w d0,a0
    b30e:	|  |         move.l 156(sp),-(sp)
    b312:	|  |         move.l a0,-(sp)
    b314:	|  |         jsr a9c <putSigned>
    b31a:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b31c:	|  |         movea.l 148(sp),a0
    b320:	|  |         move.l 60(a0),d0
    b324:	|  |         move.l d0,d0
    b326:	|  |         movea.w d0,a0
    b328:	|  |         move.l 156(sp),-(sp)
    b32c:	|  |         move.l a0,-(sp)
    b32e:	|  |         jsr a9c <putSigned>
    b334:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b336:	|  |         move.l 156(sp),64(sp)
    b33c:	|  |         movea.l 148(sp),a0
    b340:	|  |         move.b 126(a0),d0
    b344:	|  |         move.b d0,d0
    b346:	|  |         andi.l #255,d0
    b34c:	|  |         move.l d0,60(sp)
    b350:	|  |         move.l 1a7ac <DOSBase>,d0
    b356:	|  |         movea.l d0,a6
    b358:	|  |         move.l 64(sp),d1
    b35c:	|  |         move.l 60(sp),d2
    b360:	|  |         jsr -312(a6)
    b364:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b368:	|  |         move.l 156(sp),52(sp)
    b36e:	|  |         movea.l 148(sp),a0
    b372:	|  |         move.b 127(a0),d0
    b376:	|  |         move.b d0,d0
    b378:	|  |         andi.l #255,d0
    b37e:	|  |         move.l d0,48(sp)
    b382:	|  |         move.l 1a7ac <DOSBase>,d0
    b388:	|  |         movea.l d0,a6
    b38a:	|  |         move.l 52(sp),d1
    b38e:	|  |         move.l 48(sp),d2
    b392:	|  |         jsr -312(a6)
    b396:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b39a:	|  |         move.l 156(sp),40(sp)
    b3a0:	|  |         movea.l 148(sp),a0
    b3a4:	|  |         move.b 128(a0),d0
    b3a8:	|  |         move.b d0,d0
    b3aa:	|  |         andi.l #255,d0
    b3b0:	|  |         move.l d0,36(sp)
    b3b4:	|  |         move.l 1a7ac <DOSBase>,d0
    b3ba:	|  |         movea.l d0,a6
    b3bc:	|  |         move.l 40(sp),d1
    b3c0:	|  |         move.l 36(sp),d2
    b3c4:	|  |         jsr -312(a6)
    b3c8:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b3cc:	|  |         move.l 156(sp),28(sp)
    b3d2:	|  |         movea.l 148(sp),a0
    b3d6:	|  |         move.b 129(a0),d0
    b3da:	|  |         move.b d0,d0
    b3dc:	|  |         andi.l #255,d0
    b3e2:	|  |         move.l d0,24(sp)
    b3e6:	|  |         move.l 1a7ac <DOSBase>,d0
    b3ec:	|  |         movea.l d0,a6
    b3ee:	|  |         move.l 28(sp),d1
    b3f2:	|  |         move.l 24(sp),d2
    b3f6:	|  |         jsr -312(a6)
    b3fa:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b3fe:	|  |         move.l 156(sp),16(sp)
    b404:	|  |         movea.l 148(sp),a0
    b408:	|  |         move.b 130(a0),d0
    b40c:	|  |         move.b d0,d0
    b40e:	|  |         andi.l #255,d0
    b414:	|  |         move.l d0,12(sp)
    b418:	|  |         move.l 1a7ac <DOSBase>,d0
    b41e:	|  |         movea.l d0,a6
    b420:	|  |         move.l 16(sp),d1
    b424:	|  |         move.l 12(sp),d2
    b428:	|  |         jsr -312(a6)
    b42c:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b430:	|  |         movea.l 148(sp),a0
    b434:	|  |         move.l 114(a0),d0
    b438:	|  |         move.l 156(sp),-(sp)
    b43c:	|  |         move.l d0,-(sp)
    b43e:	|  |         jsr d7c0 <saveObjectRef>
    b444:	|  |         addq.l #8,sp

		me = me -> next;
    b446:	|  |         movea.l 148(sp),a0
    b44a:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b450:	|  |         addq.l #1,140(sp)
    b454:	|  \-------> movea.l 140(sp),a0
    b458:	|            cmpa.l 144(sp),a0
    b45c:	\----------- blt.w b000 <savePeople+0x76>
	}
	return TRUE;
    b460:	             moveq #1,d0
}
    b462:	             move.l (sp)+,d2
    b464:	             movea.l (sp)+,a6
    b466:	             lea 144(sp),sp
    b46a:	             rts

0000b46c <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b46c:	movea.l 4(sp),a0
    b470:	move.l 8(sp),(a0)
}
    b474:	nop
    b476:	rts

0000b478 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b478:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b47a:	       move.l 12(sp),-(sp)
    b47e:	       jsr a506 <findPerson>
    b484:	       addq.l #4,sp
    b486:	       move.l d0,(sp)
	if (! moveMe) return;
    b488:	/----- beq.s b49c <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b48a:	|      move.l 8(sp),-(sp)
    b48e:	|      move.l 4(sp),-(sp)
    b492:	|      jsr b4a2 <setMyDrawMode>
    b498:	|      addq.l #8,sp
    b49a:	|  /-- bra.s b49e <setDrawMode+0x26>
	if (! moveMe) return;
    b49c:	\--|-> nop
}
    b49e:	   \-> addq.l #4,sp
    b4a0:	       rts

0000b4a2 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b4a2:	       moveq #19,d0
    b4a4:	       cmp.l 8(sp),d0
    b4a8:	/----- bcs.w b980 <setMyDrawMode+0x4de>
    b4ac:	|      move.l 8(sp),d0
    b4b0:	|      add.l d0,d0
    b4b2:	|      movea.l d0,a0
    b4b4:	|      adda.l #46272,a0
    b4ba:	|      move.w (a0),d0
    b4bc:	|      jmp (b4c0 <setMyDrawMode+0x1e>,pc,d0.w)
    b4c0:	|      .short 0x04c0
    b4c2:	|      ori.l #6684712,-(a4)
    b4c8:	|      btst d0,-(a0)
    b4ca:	|      bchg d0,(a6)+
    b4cc:	|      bclr d0,(a4)+
    b4ce:	|      bset d0,(a2)+
    b4d0:	|      andi.b #84,(a6)
    b4d4:	|      andi.l #55575312,(a2)
    b4da:	|      .short 0x02d0
    b4dc:	|      bclr d1,(a0)
    b4de:	|      .short 0x044a
    b4e0:	|      .short 0x040c
    b4e2:	|      movep.l d1,1158(a6)
    b4e6:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b4e8:	|      movea.l 4(sp),a0
    b4ec:	|      clr.b 128(a0)
    b4f0:	|      movea.l 4(sp),a0
    b4f4:	|      move.b 128(a0),d0
    b4f8:	|      movea.l 4(sp),a0
    b4fc:	|      move.b d0,127(a0)
    b500:	|      movea.l 4(sp),a0
    b504:	|      move.b 127(a0),d0
    b508:	|      movea.l 4(sp),a0
    b50c:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b510:	|      movea.l 4(sp),a0
    b514:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b518:	|      movea.l 4(sp),a0
    b51c:	|      move.b #64,130(a0)
			break;
    b522:	|  /-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b526:	|  |   movea.l 4(sp),a0
    b52a:	|  |   clr.b 128(a0)
    b52e:	|  |   movea.l 4(sp),a0
    b532:	|  |   move.b 128(a0),d0
    b536:	|  |   movea.l 4(sp),a0
    b53a:	|  |   move.b d0,127(a0)
    b53e:	|  |   movea.l 4(sp),a0
    b542:	|  |   move.b 127(a0),d0
    b546:	|  |   movea.l 4(sp),a0
    b54a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b54e:	|  |   movea.l 4(sp),a0
    b552:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b556:	|  |   movea.l 4(sp),a0
    b55a:	|  |   move.b #-128,130(a0)
			break;
    b560:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b564:	|  |   movea.l 4(sp),a0
    b568:	|  |   clr.b 128(a0)
    b56c:	|  |   movea.l 4(sp),a0
    b570:	|  |   move.b 128(a0),d0
    b574:	|  |   movea.l 4(sp),a0
    b578:	|  |   move.b d0,127(a0)
    b57c:	|  |   movea.l 4(sp),a0
    b580:	|  |   move.b 127(a0),d0
    b584:	|  |   movea.l 4(sp),a0
    b588:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b58c:	|  |   movea.l 4(sp),a0
    b590:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b594:	|  |   movea.l 4(sp),a0
    b598:	|  |   move.b #-64,130(a0)
			break;
    b59e:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5a2:	|  |   movea.l 4(sp),a0
    b5a6:	|  |   clr.b 128(a0)
    b5aa:	|  |   movea.l 4(sp),a0
    b5ae:	|  |   move.b 128(a0),d0
    b5b2:	|  |   movea.l 4(sp),a0
    b5b6:	|  |   move.b d0,127(a0)
    b5ba:	|  |   movea.l 4(sp),a0
    b5be:	|  |   move.b 127(a0),d0
    b5c2:	|  |   movea.l 4(sp),a0
    b5c6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b5ca:	|  |   movea.l 4(sp),a0
    b5ce:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b5d2:	|  |   movea.l 4(sp),a0
    b5d6:	|  |   move.b #-2,130(a0)
			break;
    b5dc:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5e0:	|  |   movea.l 4(sp),a0
    b5e4:	|  |   clr.b 128(a0)
    b5e8:	|  |   movea.l 4(sp),a0
    b5ec:	|  |   move.b 128(a0),d0
    b5f0:	|  |   movea.l 4(sp),a0
    b5f4:	|  |   move.b d0,127(a0)
    b5f8:	|  |   movea.l 4(sp),a0
    b5fc:	|  |   move.b 127(a0),d0
    b600:	|  |   movea.l 4(sp),a0
    b604:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b608:	|  |   movea.l 4(sp),a0
    b60c:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b612:	|  |   movea.l 4(sp),a0
    b616:	|  |   clr.b 130(a0)
			break;
    b61a:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b61e:	|  |   movea.l 4(sp),a0
    b622:	|  |   clr.b 128(a0)
    b626:	|  |   movea.l 4(sp),a0
    b62a:	|  |   move.b 128(a0),d0
    b62e:	|  |   movea.l 4(sp),a0
    b632:	|  |   move.b d0,127(a0)
    b636:	|  |   movea.l 4(sp),a0
    b63a:	|  |   move.b 127(a0),d0
    b63e:	|  |   movea.l 4(sp),a0
    b642:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b646:	|  |   movea.l 4(sp),a0
    b64a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b650:	|  |   movea.l 4(sp),a0
    b654:	|  |   clr.b 130(a0)
			break;
    b658:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b65c:	|  |   movea.l 4(sp),a0
    b660:	|  |   clr.b 128(a0)
    b664:	|  |   movea.l 4(sp),a0
    b668:	|  |   move.b 128(a0),d0
    b66c:	|  |   movea.l 4(sp),a0
    b670:	|  |   move.b d0,127(a0)
    b674:	|  |   movea.l 4(sp),a0
    b678:	|  |   move.b 127(a0),d0
    b67c:	|  |   movea.l 4(sp),a0
    b680:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b684:	|  |   movea.l 4(sp),a0
    b688:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b68e:	|  |   movea.l 4(sp),a0
    b692:	|  |   clr.b 130(a0)
			break;
    b696:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b69a:	|  |   movea.l 4(sp),a0
    b69e:	|  |   clr.b 128(a0)
    b6a2:	|  |   movea.l 4(sp),a0
    b6a6:	|  |   move.b 128(a0),d0
    b6aa:	|  |   movea.l 4(sp),a0
    b6ae:	|  |   move.b d0,127(a0)
    b6b2:	|  |   movea.l 4(sp),a0
    b6b6:	|  |   move.b 127(a0),d0
    b6ba:	|  |   movea.l 4(sp),a0
    b6be:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b6c2:	|  |   movea.l 4(sp),a0
    b6c6:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b6ca:	|  |   movea.l 4(sp),a0
    b6ce:	|  |   clr.b 130(a0)
			break;
    b6d2:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6d6:	|  |   movea.l 4(sp),a0
    b6da:	|  |   clr.b 128(a0)
    b6de:	|  |   movea.l 4(sp),a0
    b6e2:	|  |   move.b 128(a0),d0
    b6e6:	|  |   movea.l 4(sp),a0
    b6ea:	|  |   move.b d0,127(a0)
    b6ee:	|  |   movea.l 4(sp),a0
    b6f2:	|  |   move.b 127(a0),d0
    b6f6:	|  |   movea.l 4(sp),a0
    b6fa:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b6fe:	|  |   movea.l 4(sp),a0
    b702:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b706:	|  |   movea.l 4(sp),a0
    b70a:	|  |   move.b #64,130(a0)
			break;
    b710:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b714:	|  |   movea.l 4(sp),a0
    b718:	|  |   clr.b 128(a0)
    b71c:	|  |   movea.l 4(sp),a0
    b720:	|  |   move.b 128(a0),d0
    b724:	|  |   movea.l 4(sp),a0
    b728:	|  |   move.b d0,127(a0)
    b72c:	|  |   movea.l 4(sp),a0
    b730:	|  |   move.b 127(a0),d0
    b734:	|  |   movea.l 4(sp),a0
    b738:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b73c:	|  |   movea.l 4(sp),a0
    b740:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b744:	|  |   movea.l 4(sp),a0
    b748:	|  |   move.b #-128,130(a0)
			break;
    b74e:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b752:	|  |   movea.l 4(sp),a0
    b756:	|  |   clr.b 128(a0)
    b75a:	|  |   movea.l 4(sp),a0
    b75e:	|  |   move.b 128(a0),d0
    b762:	|  |   movea.l 4(sp),a0
    b766:	|  |   move.b d0,127(a0)
    b76a:	|  |   movea.l 4(sp),a0
    b76e:	|  |   move.b 127(a0),d0
    b772:	|  |   movea.l 4(sp),a0
    b776:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b77a:	|  |   movea.l 4(sp),a0
    b77e:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b782:	|  |   movea.l 4(sp),a0
    b786:	|  |   move.b #-64,130(a0)
			break;
    b78c:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b790:	|  |   movea.l 4(sp),a0
    b794:	|  |   move.b #-128,128(a0)
    b79a:	|  |   movea.l 4(sp),a0
    b79e:	|  |   move.b 128(a0),d0
    b7a2:	|  |   movea.l 4(sp),a0
    b7a6:	|  |   move.b d0,127(a0)
    b7aa:	|  |   movea.l 4(sp),a0
    b7ae:	|  |   move.b 127(a0),d0
    b7b2:	|  |   movea.l 4(sp),a0
    b7b6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b7ba:	|  |   movea.l 4(sp),a0
    b7be:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b7c4:	|  |   movea.l 4(sp),a0
    b7c8:	|  |   clr.b 130(a0)
			break;
    b7cc:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b7d0:	|  |   movea.l 4(sp),a0
    b7d4:	|  |   move.b #-128,128(a0)
    b7da:	|  |   movea.l 4(sp),a0
    b7de:	|  |   move.b 128(a0),d0
    b7e2:	|  |   movea.l 4(sp),a0
    b7e6:	|  |   move.b d0,127(a0)
    b7ea:	|  |   movea.l 4(sp),a0
    b7ee:	|  |   move.b 127(a0),d0
    b7f2:	|  |   movea.l 4(sp),a0
    b7f6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b7fa:	|  |   movea.l 4(sp),a0
    b7fe:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b804:	|  |   movea.l 4(sp),a0
    b808:	|  |   clr.b 130(a0)
			break;
    b80c:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b810:	|  |   movea.l 4(sp),a0
    b814:	|  |   move.b #-128,128(a0)
    b81a:	|  |   movea.l 4(sp),a0
    b81e:	|  |   move.b 128(a0),d0
    b822:	|  |   movea.l 4(sp),a0
    b826:	|  |   move.b d0,127(a0)
    b82a:	|  |   movea.l 4(sp),a0
    b82e:	|  |   move.b 127(a0),d0
    b832:	|  |   movea.l 4(sp),a0
    b836:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b83a:	|  |   movea.l 4(sp),a0
    b83e:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b844:	|  |   movea.l 4(sp),a0
    b848:	|  |   clr.b 130(a0)
			break;
    b84c:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b850:	|  |   movea.l 4(sp),a0
    b854:	|  |   move.b #-128,128(a0)
    b85a:	|  |   movea.l 4(sp),a0
    b85e:	|  |   move.b 128(a0),d0
    b862:	|  |   movea.l 4(sp),a0
    b866:	|  |   move.b d0,127(a0)
    b86a:	|  |   movea.l 4(sp),a0
    b86e:	|  |   move.b 127(a0),d0
    b872:	|  |   movea.l 4(sp),a0
    b876:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b87a:	|  |   movea.l 4(sp),a0
    b87e:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b882:	|  |   movea.l 4(sp),a0
    b886:	|  |   clr.b 130(a0)
			break;
    b88a:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b88e:	|  |   movea.l 4(sp),a0
    b892:	|  |   st 128(a0)
    b896:	|  |   movea.l 4(sp),a0
    b89a:	|  |   move.b 128(a0),d0
    b89e:	|  |   movea.l 4(sp),a0
    b8a2:	|  |   move.b d0,127(a0)
    b8a6:	|  |   movea.l 4(sp),a0
    b8aa:	|  |   move.b 127(a0),d0
    b8ae:	|  |   movea.l 4(sp),a0
    b8b2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b8b6:	|  |   movea.l 4(sp),a0
    b8ba:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b8c0:	|  |   movea.l 4(sp),a0
    b8c4:	|  |   clr.b 130(a0)
			break;
    b8c8:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b8cc:	|  |   movea.l 4(sp),a0
    b8d0:	|  |   st 128(a0)
    b8d4:	|  |   movea.l 4(sp),a0
    b8d8:	|  |   move.b 128(a0),d0
    b8dc:	|  |   movea.l 4(sp),a0
    b8e0:	|  |   move.b d0,127(a0)
    b8e4:	|  |   movea.l 4(sp),a0
    b8e8:	|  |   move.b 127(a0),d0
    b8ec:	|  |   movea.l 4(sp),a0
    b8f0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b8f4:	|  |   movea.l 4(sp),a0
    b8f8:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b8fe:	|  |   movea.l 4(sp),a0
    b902:	|  |   clr.b 130(a0)
			break;
    b906:	|  +-- bra.w b9ba <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b90a:	|  |   movea.l 4(sp),a0
    b90e:	|  |   st 128(a0)
    b912:	|  |   movea.l 4(sp),a0
    b916:	|  |   move.b 128(a0),d0
    b91a:	|  |   movea.l 4(sp),a0
    b91e:	|  |   move.b d0,127(a0)
    b922:	|  |   movea.l 4(sp),a0
    b926:	|  |   move.b 127(a0),d0
    b92a:	|  |   movea.l 4(sp),a0
    b92e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b932:	|  |   movea.l 4(sp),a0
    b936:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b93c:	|  |   movea.l 4(sp),a0
    b940:	|  |   clr.b 130(a0)
			break;
    b944:	|  +-- bra.s b9ba <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b946:	|  |   movea.l 4(sp),a0
    b94a:	|  |   st 128(a0)
    b94e:	|  |   movea.l 4(sp),a0
    b952:	|  |   move.b 128(a0),d0
    b956:	|  |   movea.l 4(sp),a0
    b95a:	|  |   move.b d0,127(a0)
    b95e:	|  |   movea.l 4(sp),a0
    b962:	|  |   move.b 127(a0),d0
    b966:	|  |   movea.l 4(sp),a0
    b96a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b96e:	|  |   movea.l 4(sp),a0
    b972:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b976:	|  |   movea.l 4(sp),a0
    b97a:	|  |   clr.b 130(a0)
			break;
    b97e:	|  +-- bra.s b9ba <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b980:	\--|-> movea.l 4(sp),a0
    b984:	   |   clr.b 128(a0)
    b988:	   |   movea.l 4(sp),a0
    b98c:	   |   move.b 128(a0),d0
    b990:	   |   movea.l 4(sp),a0
    b994:	   |   move.b d0,127(a0)
    b998:	   |   movea.l 4(sp),a0
    b99c:	   |   move.b 127(a0),d0
    b9a0:	   |   movea.l 4(sp),a0
    b9a4:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b9a8:	   |   movea.l 4(sp),a0
    b9ac:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    b9b0:	   |   movea.l 4(sp),a0
    b9b4:	   |   clr.b 130(a0)
			break;
    b9b8:	   |   nop
	}
}
    b9ba:	   \-> nop
    b9bc:	       rts

0000b9be <shufflePeople>:

void shufflePeople () {
    b9be:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    b9c2:	             move.l #108552,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    b9ca:	             move.l 1a808 <allPeople>,d0
    b9d0:	/----------- beq.w baa6 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    b9d4:	|     /----- bra.w ba96 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    b9d8:	|  /--|----> movea.l 16(sp),a0
    b9dc:	|  |  |      movea.l (a0),a0
    b9de:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    b9e4:	|  |  |      movea.l 16(sp),a0
    b9e8:	|  |  |      movea.l (a0),a0
    b9ea:	|  |  |      move.l 118(a0),d0
    b9ee:	|  |  |      moveq #1,d1
    b9f0:	|  |  |      and.l d1,d0
    b9f2:	|  |  |  /-- beq.s ba0a <shufflePeople+0x4c>
    b9f4:	|  |  |  |   move.l #1148846080,-(sp)
    b9fa:	|  |  |  |   move.l 16(sp),-(sp)
    b9fe:	|  |  |  |   jsr 17224 <__addsf3>
    ba04:	|  |  |  |   addq.l #8,sp
    ba06:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    ba0a:	|  |  |  \-> movea.l 16(sp),a0
    ba0e:	|  |  |      movea.l (a0),a0
    ba10:	|  |  |      movea.l 36(a0),a0
    ba14:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    ba1a:	|  |  |      movea.l 16(sp),a0
    ba1e:	|  |  |      movea.l (a0),a0
    ba20:	|  |  |      movea.l 36(a0),a0
    ba24:	|  |  |      move.l 118(a0),d0
    ba28:	|  |  |      moveq #1,d1
    ba2a:	|  |  |      and.l d1,d0
    ba2c:	|  |  |  /-- beq.s ba44 <shufflePeople+0x86>
    ba2e:	|  |  |  |   move.l #1148846080,-(sp)
    ba34:	|  |  |  |   move.l 12(sp),-(sp)
    ba38:	|  |  |  |   jsr 17224 <__addsf3>
    ba3e:	|  |  |  |   addq.l #8,sp
    ba40:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    ba44:	|  |  |  \-> move.l 8(sp),-(sp)
    ba48:	|  |  |      move.l 16(sp),-(sp)
    ba4c:	|  |  |      jsr 175de <__gtsf2>
    ba52:	|  |  |      addq.l #8,sp
    ba54:	|  |  |      tst.l d0
    ba56:	|  |  |  /-- ble.s ba88 <shufflePeople+0xca>
			A = (*thisReference);
    ba58:	|  |  |  |   movea.l 16(sp),a0
    ba5c:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    ba60:	|  |  |  |   movea.l 16(sp),a0
    ba64:	|  |  |  |   movea.l (a0),a0
    ba66:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    ba6a:	|  |  |  |   movea.l (sp),a0
    ba6c:	|  |  |  |   move.l 36(a0),d0
    ba70:	|  |  |  |   movea.l 4(sp),a0
    ba74:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    ba78:	|  |  |  |   movea.l (sp),a0
    ba7a:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    ba80:	|  |  |  |   movea.l 16(sp),a0
    ba84:	|  |  |  |   move.l (sp),(a0)
    ba86:	|  |  +--|-- bra.s ba96 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    ba88:	|  |  |  \-> movea.l 16(sp),a0
    ba8c:	|  |  |      move.l (a0),d0
    ba8e:	|  |  |      moveq #36,d1
    ba90:	|  |  |      add.l d0,d1
    ba92:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    ba96:	|  |  \----> movea.l 16(sp),a0
    ba9a:	|  |         movea.l (a0),a0
    ba9c:	|  |         move.l 36(a0),d0
    baa0:	|  \-------- bne.w b9d8 <shufflePeople+0x1a>
    baa4:	|        /-- bra.s baa8 <shufflePeople+0xea>
	if (!allPeople) return;
    baa6:	\--------|-> nop
		}
	}
}
    baa8:	         \-> lea 20(sp),sp
    baac:	             rts

0000baae <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    baae:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bab0:	       tst.l 8(sp)
    bab4:	   /-- bgt.s baba <setCharacterWalkSpeed+0xc>
    bab6:	   |   clr.w d0
    bab8:	/--|-- bra.s bad8 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    baba:	|  \-> move.l 12(sp),-(sp)
    babe:	|      jsr a506 <findPerson>
    bac4:	|      addq.l #4,sp
    bac6:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bac8:	|  /-- bne.s bace <setCharacterWalkSpeed+0x20>
    baca:	|  |   clr.w d0
    bacc:	+--|-- bra.s bad8 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bace:	|  \-> movea.l (sp),a0
    bad0:	|      move.l 8(sp),28(a0)
	return TRUE;
    bad6:	|      moveq #1,d0
}
    bad8:	\----> addq.l #4,sp
    bada:	       rts

0000badc <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    badc:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bade:	       move.l 8(sp),-(sp)
    bae2:	       jsr a506 <findPerson>
    bae8:	       addq.l #4,sp
    baea:	       move.l d0,(sp)
    if (thisPerson) {
    baec:	/----- beq.s bb0c <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    baee:	|      movea.l (sp),a0
    baf0:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    baf6:	|      moveq #2,d0
    baf8:	|      and.l 12(sp),d0
    bafc:	|  /-- beq.s bb08 <setPersonExtra+0x2c>
    bafe:	|  |   movea.l (sp),a0
    bb00:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bb08:	|  \-> moveq #1,d0
    bb0a:	|  /-- bra.s bb0e <setPersonExtra+0x32>
    }
    return FALSE;
    bb0c:	\--|-> clr.w d0
}
    bb0e:	   \-> addq.l #4,sp
    bb10:	       rts

0000bb12 <setScale>:


void setScale (short int h, short int d) {
    bb12:	subq.l #4,sp
    bb14:	move.l 8(sp),d1
    bb18:	move.l 12(sp),d0
    bb1c:	move.w d1,d1
    bb1e:	move.w d1,2(sp)
    bb22:	move.w d0,d0
    bb24:	move.w d0,(sp)
	scaleHorizon = h;
    bb26:	move.w 2(sp),1a136 <scaleHorizon>
	scaleDivide = d;
    bb2e:	move.w (sp),1a138 <scaleDivide>
}
    bb34:	nop
    bb36:	addq.l #4,sp
    bb38:	rts

0000bb3a <setShown>:

void setShown (BOOL h, int ob) {
    bb3a:	    subq.l #8,sp
    bb3c:	    move.l 12(sp),d0
    bb40:	    move.w d0,d0
    bb42:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bb46:	    move.l 16(sp),-(sp)
    bb4a:	    jsr a506 <findPerson>
    bb50:	    addq.l #4,sp
    bb52:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bb56:	/-- beq.s bb62 <setShown+0x28>
    bb58:	|   movea.l 4(sp),a0
    bb5c:	|   move.w 2(sp),104(a0)
}
    bb62:	\-> nop
    bb64:	    addq.l #8,sp
    bb66:	    rts

0000bb68 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bb68:	       subq.l #8,sp
    bb6a:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bb6c:	       movea.l 16(sp),a0
    bb70:	       move.l 92(a0),d0
    bb74:	       move.l d0,d1
    bb76:	       addi.l #360,d1
    bb7c:	       movea.l 16(sp),a0
    bb80:	       move.l 96(a0),d0
    bb84:	       move.l d1,d2
    bb86:	       sub.l d0,d2
    bb88:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bb8c:	       movea.l 16(sp),a0
    bb90:	       move.l 122(a0),d0
    bb94:	   /-- beq.s bba0 <spinStep+0x38>
    bb96:	   |   movea.l 16(sp),a0
    bb9a:	   |   move.l 122(a0),d0
    bb9e:	/--|-- bra.s bbba <spinStep+0x52>
    bba0:	|  \-> movea.l 16(sp),a0
    bba4:	|      movea.l 80(a0),a0
    bba8:	|      move.l 4(a0),d0
    bbac:	|      move.l d0,-(sp)
    bbae:	|      pea 168 <decodeFilename+0x50>
    bbb2:	|      jsr 17a72 <__divsi3>
    bbb8:	|      addq.l #8,sp
    bbba:	\----> move.l d0,4(sp)
	while (diff > 180) {
    bbbe:	   /-- bra.s bbc8 <spinStep+0x60>
		diff -= 360;
    bbc0:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bbc8:	|  \-> cmpi.l #180,8(sp)
    bbd0:	\----- bgt.s bbc0 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bbd2:	       move.l 8(sp),d0
    bbd6:	       cmp.l 4(sp),d0
    bbda:	   /-- blt.s bbf8 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bbdc:	   |   movea.l 16(sp),a0
    bbe0:	   |   move.l 92(a0),d0
    bbe4:	   |   sub.l 4(sp),d0
    bbe8:	   |   move.l d0,-(sp)
    bbea:	   |   move.l 20(sp),-(sp)
    bbee:	   |   jsr bcd8 <turnMeAngle>
    bbf4:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bbf6:	/--|-- bra.s bc3e <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bbf8:	|  \-> move.l 4(sp),d0
    bbfc:	|      neg.l d0
    bbfe:	|      cmp.l 8(sp),d0
    bc02:	|  /-- blt.s bc20 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bc04:	|  |   movea.l 16(sp),a0
    bc08:	|  |   move.l 92(a0),d0
    bc0c:	|  |   add.l 4(sp),d0
    bc10:	|  |   move.l d0,-(sp)
    bc12:	|  |   move.l 20(sp),-(sp)
    bc16:	|  |   jsr bcd8 <turnMeAngle>
    bc1c:	|  |   addq.l #8,sp
}
    bc1e:	+--|-- bra.s bc3e <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bc20:	|  \-> movea.l 16(sp),a0
    bc24:	|      move.l 96(a0),d0
    bc28:	|      move.l d0,-(sp)
    bc2a:	|      move.l 20(sp),-(sp)
    bc2e:	|      jsr bcd8 <turnMeAngle>
    bc34:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bc36:	|      movea.l 16(sp),a0
    bc3a:	|      clr.w 66(a0)
}
    bc3e:	\----> nop
    bc40:	       move.l (sp)+,d2
    bc42:	       addq.l #8,sp
    bc44:	       rts

0000bc46 <stopPerson>:


BOOL stopPerson (int o) {
    bc46:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bc48:	       move.l 8(sp),-(sp)
    bc4c:	       jsr a506 <findPerson>
    bc52:	       addq.l #4,sp
    bc54:	       move.l d0,(sp)
    if (moveMe)
    bc56:	/----- beq.s bc94 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bc58:	|      movea.l (sp),a0
    bc5a:	|      move.l 68(a0),d0
    bc5e:	+----- beq.s bc94 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bc60:	|      movea.l (sp),a0
    bc62:	|      move.l 68(a0),d0
    bc66:	|      move.l d0,-(sp)
    bc68:	|      jsr 464c <abortFunction>
    bc6e:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bc70:	|      movea.l (sp),a0
    bc72:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bc76:	|      movea.l (sp),a0
    bc78:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bc7c:	|      movea.l (sp),a0
    bc7e:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bc82:	|      clr.l -(sp)
    bc84:	|      move.l 4(sp),-(sp)
    bc88:	|      jsr 80a4 <setFrames>
    bc8e:	|      addq.l #8,sp
            return TRUE;
    bc90:	|      moveq #1,d0
    bc92:	|  /-- bra.s bc96 <stopPerson+0x50>
        }
    return FALSE;
    bc94:	\--|-> clr.w d0
}
    bc96:	   \-> addq.l #4,sp
    bc98:	       rts

0000bc9a <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bc9a:	       subq.l #8,sp
	int total = 0;
    bc9c:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bca0:	       clr.l (sp)
    bca2:	   /-- bra.s bcc4 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bca4:	/--|-> movea.l 12(sp),a0
    bca8:	|  |   movea.l 4(a0),a0
    bcac:	|  |   move.l (sp),d1
    bcae:	|  |   move.l d1,d0
    bcb0:	|  |   add.l d0,d0
    bcb2:	|  |   add.l d1,d0
    bcb4:	|  |   add.l d0,d0
    bcb6:	|  |   add.l d0,d0
    bcb8:	|  |   adda.l d0,a0
    bcba:	|  |   move.l 4(a0),d0
    bcbe:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bcc2:	|  |   addq.l #1,(sp)
    bcc4:	|  \-> movea.l 12(sp),a0
    bcc8:	|      move.l 8(a0),d0
    bccc:	|      cmp.l (sp),d0
    bcce:	\----- bgt.s bca4 <timeForAnim+0xa>
	}
	return total;
    bcd0:	       move.l 4(sp),d0
}
    bcd4:	       addq.l #8,sp
    bcd6:	       rts

0000bcd8 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bcd8:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bcda:	       movea.l 8(sp),a0
    bcde:	       movea.l 80(a0),a0
    bce2:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bce6:	       movea.l 8(sp),a0
    bcea:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bcf0:	       move.l (sp),-(sp)
    bcf2:	       pea b4 <_start+0xb4>
    bcf6:	       jsr 17a72 <__divsi3>
    bcfc:	       addq.l #8,sp
    bcfe:	       move.l d0,d1
    bd00:	       addi.l #180,d1
    bd06:	       movea.l 8(sp),a0
    bd0a:	       move.l 100(a0),d0
    bd0e:	       add.l d1,d0
    bd10:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bd14:	   /-- bra.s bd1e <turnMeAngle+0x46>
    bd16:	/--|-> addi.l #-360,12(sp)
    bd1e:	|  \-> cmpi.l #359,12(sp)
    bd26:	\----- bgt.s bd16 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bd28:	       move.l (sp),-(sp)
    bd2a:	       move.l 16(sp),-(sp)
    bd2e:	       jsr 179f4 <__mulsi3>
    bd34:	       addq.l #8,sp
    bd36:	       pea 168 <decodeFilename+0x50>
    bd3a:	       move.l d0,-(sp)
    bd3c:	       jsr 17a72 <__divsi3>
    bd42:	       addq.l #8,sp
    bd44:	       movea.l 8(sp),a0
    bd48:	       move.l d0,106(a0)
}
    bd4c:	       nop
    bd4e:	       addq.l #4,sp
    bd50:	       rts

0000bd52 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bd52:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bd54:	          move.l 8(sp),-(sp)
    bd58:	          jsr a506 <findPerson>
    bd5e:	          addq.l #4,sp
    bd60:	          move.l d0,(sp)
    if (thisPerson) {
    bd62:	/-------- beq.s bdc2 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bd64:	|         movea.l (sp),a0
    bd66:	|         move.l 68(a0),d0
    bd6a:	|     /-- beq.s bd7c <turnPersonToFace+0x2a>
    bd6c:	|     |   movea.l (sp),a0
    bd6e:	|     |   move.l 68(a0),d0
    bd72:	|     |   move.l d0,-(sp)
    bd74:	|     |   jsr 464c <abortFunction>
    bd7a:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bd7c:	|     \-> movea.l (sp),a0
    bd7e:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bd82:	|         movea.l (sp),a0
    bd84:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bd88:	|         movea.l (sp),a0
    bd8a:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bd8e:	|         move.l 12(sp),-(sp)
    bd92:	|         move.l 4(sp),-(sp)
    bd96:	|         jsr bcd8 <turnMeAngle>
    bd9c:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bd9e:	|         movea.l 1a800 <speech>,a0
    bda4:	|         move.l (a0),d0
    bda6:	|         cmp.l (sp),d0
    bda8:	|  /----- bne.s bdae <turnPersonToFace+0x5c>
    bdaa:	|  |      moveq #2,d0
    bdac:	|  |  /-- bra.s bdb0 <turnPersonToFace+0x5e>
    bdae:	|  \--|-> moveq #0,d0
    bdb0:	|     \-> move.l d0,-(sp)
    bdb2:	|         move.l 4(sp),-(sp)
    bdb6:	|         jsr 80a4 <setFrames>
    bdbc:	|         addq.l #8,sp
        return TRUE;
    bdbe:	|         moveq #1,d0
    bdc0:	|     /-- bra.s bdc4 <turnPersonToFace+0x72>
    }
    return FALSE;
    bdc2:	\-----|-> clr.w d0
}
    bdc4:	      \-> addq.l #4,sp
    bdc6:	          rts

0000bdc8 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bdc8:	                lea -20(sp),sp
    bdcc:	                move.l d3,-(sp)
    bdce:	                move.l d2,-(sp)
    bdd0:	                move.l 36(sp),d0
    bdd4:	                move.w d0,d0
    bdd6:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bdda:	                cmpi.w #-1,10(sp)
    bde0:	/-------------- bne.s bde8 <walkMe+0x20>
    bde2:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bde8:	>-------------> movea.l 32(sp),a0
    bdec:	|               move.l 48(a0),d0
    bdf0:	|               move.l d0,-(sp)
    bdf2:	|               jsr 17472 <__floatsisf>
    bdf8:	|               addq.l #4,sp
    bdfa:	|               move.l d0,d1
    bdfc:	|               movea.l 32(sp),a0
    be00:	|               move.l (a0),d0
    be02:	|               move.l d0,-(sp)
    be04:	|               move.l d1,-(sp)
    be06:	|               jsr 17766 <__subsf3>
    be0c:	|               addq.l #8,sp
    be0e:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    be12:	|               movea.l 32(sp),a0
    be16:	|               move.l 52(a0),d0
    be1a:	|               move.l d0,-(sp)
    be1c:	|               jsr 17472 <__floatsisf>
    be22:	|               addq.l #4,sp
    be24:	|               move.l d0,d1
    be26:	|               movea.l 32(sp),a0
    be2a:	|               move.l 4(a0),d0
    be2e:	|               move.l d0,-(sp)
    be30:	|               move.l d1,-(sp)
    be32:	|               jsr 17766 <__subsf3>
    be38:	|               addq.l #8,sp
    be3a:	|               move.l d0,-(sp)
    be3c:	|               move.l d0,-(sp)
    be3e:	|               jsr 17224 <__addsf3>
    be44:	|               addq.l #8,sp
    be46:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    be4a:	|               movea.l 32(sp),a0
    be4e:	|               move.l 32(a0),d2
    be52:	|               movea.l 32(sp),a0
    be56:	|               move.l 28(a0),d0
    be5a:	|               move.l d0,-(sp)
    be5c:	|               jsr 17472 <__floatsisf>
    be62:	|               addq.l #4,sp
    be64:	|               move.l d0,-(sp)
    be66:	|               move.l d2,-(sp)
    be68:	|               jsr 17524 <__mulsf3>
    be6e:	|               addq.l #8,sp
    be70:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    be74:	|               move.l 24(sp),-(sp)
    be78:	|               jsr 1738a <__extendsfdf2>
    be7e:	|               addq.l #4,sp
    be80:	|               move.l #-1717986918,-(sp)
    be86:	|               move.l #1070176665,-(sp)
    be8c:	|               move.l d1,-(sp)
    be8e:	|               move.l d0,-(sp)
    be90:	|               jsr 1764a <__ltdf2>
    be96:	|               lea 16(sp),sp
    be9a:	|               tst.l d0
    be9c:	|           /-- bge.s bea6 <walkMe+0xde>
    be9e:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    bea6:	|           \-> move.l 20(sp),-(sp)
    beaa:	|               jsr 1740a <__fixsfsi>
    beb0:	|               addq.l #4,sp
    beb2:	|               move.l d0,-(sp)
    beb4:	|               jsr 90f6 <TF_abs>
    beba:	|               addq.l #4,sp
    bebc:	|               move.l d0,d2
    bebe:	|               move.l 16(sp),-(sp)
    bec2:	|               jsr 1740a <__fixsfsi>
    bec8:	|               addq.l #4,sp
    beca:	|               move.l d0,-(sp)
    becc:	|               jsr 90f6 <TF_abs>
    bed2:	|               addq.l #4,sp
    bed4:	|               cmp.l d2,d0
    bed6:	|        /----- bgt.s befa <walkMe+0x132>
    bed8:	|        |      move.l 20(sp),-(sp)
    bedc:	|        |      jsr 1740a <__fixsfsi>
    bee2:	|        |      addq.l #4,sp
    bee4:	|        |      move.l d0,-(sp)
    bee6:	|        |      jsr 90f6 <TF_abs>
    beec:	|        |      addq.l #4,sp
    beee:	|        |      move.l d0,-(sp)
    bef0:	|        |      jsr 17472 <__floatsisf>
    bef6:	|        |      addq.l #4,sp
    bef8:	|        |  /-- bra.s bf1a <walkMe+0x152>
    befa:	|        \--|-> move.l 16(sp),-(sp)
    befe:	|           |   jsr 1740a <__fixsfsi>
    bf04:	|           |   addq.l #4,sp
    bf06:	|           |   move.l d0,-(sp)
    bf08:	|           |   jsr 90f6 <TF_abs>
    bf0e:	|           |   addq.l #4,sp
    bf10:	|           |   move.l d0,-(sp)
    bf12:	|           |   jsr 17472 <__floatsisf>
    bf18:	|           |   addq.l #4,sp
    bf1a:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    bf1e:	|               move.l 12(sp),-(sp)
    bf22:	|               jsr 1740a <__fixsfsi>
    bf28:	|               addq.l #4,sp
    bf2a:	|               move.l d0,-(sp)
    bf2c:	|               jsr 90f6 <TF_abs>
    bf32:	|               addq.l #4,sp
    bf34:	|               move.l d0,-(sp)
    bf36:	|               jsr 17472 <__floatsisf>
    bf3c:	|               addq.l #4,sp
    bf3e:	|               move.l d0,-(sp)
    bf40:	|               move.l 28(sp),-(sp)
    bf44:	|               jsr 17698 <__ltsf2>
    bf4a:	|               addq.l #8,sp
    bf4c:	|               tst.l d0
    bf4e:	|        /----- bge.w c000 <walkMe+0x238>
			if (thisPerson->spinning) {
    bf52:	|        |      movea.l 32(sp),a0
    bf56:	|        |      move.w 66(a0),d0
    bf5a:	|        |  /-- beq.s bf78 <walkMe+0x1b0>
				spinStep(thisPerson);
    bf5c:	|        |  |   move.l 32(sp),-(sp)
    bf60:	|        |  |   jsr bb68 <spinStep>
    bf66:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    bf68:	|        |  |   pea 1 <_start+0x1>
    bf6c:	|        |  |   move.l 36(sp),-(sp)
    bf70:	|        |  |   jsr 80a4 <setFrames>
    bf76:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    bf78:	|        |  \-> move.l 24(sp),-(sp)
    bf7c:	|        |      move.l 16(sp),-(sp)
    bf80:	|        |      jsr 1731e <__divsf3>
    bf86:	|        |      addq.l #8,sp
    bf88:	|        |      move.l d0,24(sp)
			if (move)
    bf8c:	|        |      tst.w 10(sp)
    bf90:	|        |  /-- beq.s bffa <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    bf92:	|        |  |   movea.l 32(sp),a0
    bf96:	|        |  |   move.l 4(a0),d2
    bf9a:	|        |  |   move.l 24(sp),d0
    bf9e:	|        |  |   move.l d0,-(sp)
    bfa0:	|        |  |   move.l d0,-(sp)
    bfa2:	|        |  |   jsr 17224 <__addsf3>
    bfa8:	|        |  |   addq.l #8,sp
    bfaa:	|        |  |   move.l d0,-(sp)
    bfac:	|        |  |   move.l 20(sp),-(sp)
    bfb0:	|        |  |   jsr 1731e <__divsf3>
    bfb6:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bfb8:	|        |  |   move.l d0,-(sp)
    bfba:	|        |  |   move.l d2,-(sp)
    bfbc:	|        |  |   jsr 17224 <__addsf3>
    bfc2:	|        |  |   addq.l #8,sp
    bfc4:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    bfc6:	|        |  |   movea.l 32(sp),a0
    bfca:	|        |  |   move.l (a0),d3
    bfcc:	|        |  |   move.l 24(sp),-(sp)
    bfd0:	|        |  |   move.l 24(sp),-(sp)
    bfd4:	|        |  |   jsr 1731e <__divsf3>
    bfda:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bfdc:	|        |  |   move.l d0,-(sp)
    bfde:	|        |  |   move.l d3,-(sp)
    bfe0:	|        |  |   jsr 17224 <__addsf3>
    bfe6:	|        |  |   addq.l #8,sp
    bfe8:	|        |  |   move.l d2,-(sp)
    bfea:	|        |  |   move.l d0,-(sp)
    bfec:	|        |  |   move.l 40(sp),-(sp)
    bff0:	|        |  |   jsr ac4e <moveAndScale>
    bff6:	|        |  |   lea 12(sp),sp
			return TRUE;
    bffa:	|        |  \-> moveq #1,d0
    bffc:	|  /-----|----- bra.w c0ae <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c000:	|  |     \----> movea.l 32(sp),a0
    c004:	|  |            move.l 56(a0),d0
    c008:	|  |            moveq #-1,d1
    c00a:	|  |            cmp.l d0,d1
    c00c:	|  |        /-- bne.s c044 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c00e:	|  |        |   movea.l 32(sp),a0
    c012:	|  |        |   move.l 110(a0),d0
    c016:	|  |        |   moveq #-1,d1
    c018:	|  |        |   cmp.l d0,d1
    c01a:	|  |  /-----|-- beq.s c058 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c01c:	|  |  |     |   movea.l 32(sp),a0
    c020:	|  |  |     |   move.l 110(a0),d0
    c024:	|  |  |     |   movea.l 32(sp),a0
    c028:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c02c:	|  |  |     |   movea.l 32(sp),a0
    c030:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c036:	|  |  |     |   move.l 32(sp),-(sp)
    c03a:	|  |  |     |   jsr bb68 <spinStep>
    c040:	|  |  |     |   addq.l #4,sp
			}
			break;
    c042:	|  |  +-----|-- bra.s c058 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c044:	|  |  |     \-> move.l 32(sp),-(sp)
    c048:	|  |  |         jsr 9868 <doBorderStuff>
    c04e:	|  |  |         addq.l #4,sp
    c050:	|  |  |         tst.w d0
    c052:	|  |  |  /----- beq.s c05c <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c054:	\--|--|--|----- bra.w bde8 <walkMe+0x20>
			break;
    c058:	   |  \--|----> nop
    c05a:	   |     |  /-- bra.s c05e <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c05c:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c05e:	   |        \-> movea.l 32(sp),a0
    c062:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c066:	   |            clr.l -(sp)
    c068:	   |            move.l 36(sp),-(sp)
    c06c:	   |            jsr 80a4 <setFrames>
    c072:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c074:	   |            movea.l 32(sp),a0
    c078:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c07c:	   |            move.l d0,-(sp)
    c07e:	   |            jsr 17472 <__floatsisf>
    c084:	   |            addq.l #4,sp
    c086:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c088:	   |            movea.l 32(sp),a0
    c08c:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c090:	   |            move.l d0,-(sp)
    c092:	   |            jsr 17472 <__floatsisf>
    c098:	   |            addq.l #4,sp
    c09a:	   |            move.l d2,-(sp)
    c09c:	   |            move.l d0,-(sp)
    c09e:	   |            move.l 40(sp),-(sp)
    c0a2:	   |            jsr ac4e <moveAndScale>
    c0a8:	   |            lea 12(sp),sp
	return FALSE;
    c0ac:	   |            clr.w d0
}
    c0ae:	   \----------> move.l (sp)+,d2
    c0b0:	                move.l (sp)+,d3
    c0b2:	                lea 20(sp),sp
    c0b6:	                rts

0000c0b8 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c0b8:	       subq.l #8,sp
    c0ba:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c0bc:	   /-- bra.s c0ec <clearStackLib+0x34>
		k = stackLib;
    c0be:	/--|-> move.l 1a834 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c0c6:	|  |   movea.l 1a834 <stackLib>,a0
    c0cc:	|  |   move.l 4(a0),d0
    c0d0:	|  |   move.l d0,1a834 <stackLib>
		FreeVec(k);
    c0d6:	|  |   move.l 8(sp),4(sp)
    c0dc:	|  |   move.l 1a7a4 <SysBase>,d0
    c0e2:	|  |   movea.l d0,a6
    c0e4:	|  |   movea.l 4(sp),a1
    c0e8:	|  |   jsr -690(a6)
	while (stackLib) {
    c0ec:	|  \-> move.l 1a834 <stackLib>,d0
    c0f2:	\----- bne.s c0be <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c0f4:	       clr.l 1a830 <stackLibTotal>
}
    c0fa:	       nop
    c0fc:	       movea.l (sp)+,a6
    c0fe:	       addq.l #8,sp
    c100:	       rts

0000c102 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c102:	          lea -128(sp),sp
    c106:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c10a:	      /-- bra.s c11c <loadGame+0x1a>
    c10c:	   /--|-> move.l 1a73c <allRunningFunctions>,d0
    c112:	   |  |   move.l d0,-(sp)
    c114:	   |  |   jsr 5654 <finishFunction>
    c11a:	   |  |   addq.l #4,sp
    c11c:	   |  \-> move.l 1a73c <allRunningFunctions>,d0
    c122:	   \----- bne.s c10c <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c124:	          pea 1a838 <ssgVersion>
    c12a:	          pea 18fa8 <PutChar+0x149e>
    c130:	          pea 41 <_start+0x41>
    c134:	          pea 53 <_start+0x53>
    c138:	          move.l 160(sp),-(sp)
    c13c:	          jsr 640a <openAndVerify>
    c142:	          lea 20(sp),sp
    c146:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c14a:	      /-- bne.s c152 <loadGame+0x50>
    c14c:	      |   clr.w d0
    c14e:	/-----|-- bra.w c3f8 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c152:	|     \-> move.l 112(sp),108(sp)
    c158:	|         lea 140(sp),a0
    c15c:	|         lea -126(a0),a0
    c160:	|         move.l a0,120(sp)
    c164:	|         moveq #8,d0
    c166:	|         move.l d0,116(sp)
    c16a:	|         move.l 1a7ac <DOSBase>,d0
    c170:	|         movea.l d0,a6
    c172:	|         move.l 108(sp),d1
    c176:	|         move.l 120(sp),d2
    c17a:	|         move.l 116(sp),d3
    c17e:	|         jsr -42(a6)
    c182:	|         move.l d0,132(sp)
    c186:	|         move.l 132(sp),d0
    c18a:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c18e:	|         moveq #8,d0
    c190:	|         cmp.l 128(sp),d0
    c194:	|     /-- beq.s c1a4 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c196:	|     |   pea 18fc9 <PutChar+0x14bf>
    c19c:	|     |   jsr 17036 <KPrintF>
    c1a2:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c1a4:	|     \-> move.l 14(sp),d1
    c1a8:	|         move.l 1a746 <fileTime>,d0
    c1ae:	|         cmp.l d1,d0
    c1b0:	|     /-- bne.s c1c0 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c1b2:	|     |   move.l 18(sp),d1
    c1b6:	|     |   move.l 1a74a <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c1bc:	|     |   cmp.l d1,d0
    c1be:	|  /--|-- beq.s c1e0 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c1c0:	|  |  \-> move.l 144(sp),-(sp)
    c1c4:	|  |      pea 18fe5 <PutChar+0x14db>
    c1ca:	|  |      pea 190ac <PutChar+0x15a2>
    c1d0:	|  |      jsr 17036 <KPrintF>
    c1d6:	|  |      lea 12(sp),sp
		return FALSE; 
    c1da:	|  |      clr.w d0
    c1dc:	+--|----- bra.w c3f8 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c1e0:	|  \----> move.l 112(sp),124(sp)
    c1e6:	|         move.l 1a7ac <DOSBase>,d0
    c1ec:	|         movea.l d0,a6
    c1ee:	|         move.l 124(sp),d1
    c1f2:	|         jsr -306(a6)
    c1f6:	|         move.l d0,136(sp)
    c1fa:	|         move.l 136(sp),d0
    c1fe:	|         move.l d0,d0
    c200:	|         move.w d0,1a000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c206:	|         move.l 112(sp),100(sp)
    c20c:	|         move.l 1a7ac <DOSBase>,d0
    c212:	|         movea.l d0,a6
    c214:	|         move.l 100(sp),d1
    c218:	|         jsr -306(a6)
    c21c:	|         move.l d0,96(sp)
    c220:	|         move.l 96(sp),d0
    c224:	|         move.l d0,d0
    c226:	|         move.w d0,1a744 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c22c:	|         move.l 112(sp),92(sp)
    c232:	|         move.l 1a7ac <DOSBase>,d0
    c238:	|         movea.l d0,a6
    c23a:	|         move.l 92(sp),d1
    c23e:	|         jsr -306(a6)
    c242:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c246:	|         move.l 112(sp),84(sp)
    c24c:	|         move.l 1a7ac <DOSBase>,d0
    c252:	|         movea.l d0,a6
    c254:	|         move.l 84(sp),d1
    c258:	|         jsr -306(a6)
    c25c:	|         move.l d0,80(sp)
    c260:	|         move.l 80(sp),d0
    c264:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c268:	|     /-- beq.s c29c <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c26a:	|     |   move.l 112(sp),-(sp)
    c26e:	|     |   jsr 6bc <get2bytes>
    c274:	|     |   addq.l #4,sp
    c276:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c27a:	|     |   move.l 112(sp),-(sp)
    c27e:	|     |   jsr 6bc <get2bytes>
    c284:	|     |   addq.l #4,sp
    c286:	|     |   move.l d0,1a89c <fontHeight>
		charOrder = readString(fp);		
    c28c:	|     |   move.l 112(sp),-(sp)
    c290:	|     |   jsr b02 <readString>
    c296:	|     |   addq.l #4,sp
    c298:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c29c:	|     \-> move.l 104(sp),70(sp)
    c2a2:	|         move.l 1a7a4 <SysBase>,d0
    c2a8:	|         movea.l d0,a6
    c2aa:	|         movea.l 70(sp),a1
    c2ae:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c2b2:	|         move.l 112(sp),-(sp)
    c2b6:	|         jsr 854 <getSigned>
    c2bc:	|         addq.l #4,sp
    c2be:	|         move.w d0,1a6a8 <fontSpace>

	killAllPeople ();
    c2c4:	|         jsr a8f0 <killAllPeople>
	killAllRegions ();
    c2ca:	|         jsr 15886 <killAllRegions>

	int camerX = get2bytes (fp);
    c2d0:	|         move.l 112(sp),-(sp)
    c2d4:	|         jsr 6bc <get2bytes>
    c2da:	|         addq.l #4,sp
    c2dc:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c2e0:	|         move.l 112(sp),-(sp)
    c2e4:	|         jsr 6bc <get2bytes>
    c2ea:	|         addq.l #4,sp
    c2ec:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c2f0:	|         move.l 112(sp),-(sp)
    c2f4:	|         jsr 7d8 <getFloat>
    c2fa:	|         addq.l #4,sp
    c2fc:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c300:	|         move.l 112(sp),54(sp)
    c306:	|         move.l 1a7ac <DOSBase>,d0
    c30c:	|         movea.l d0,a6
    c30e:	|         move.l 54(sp),d1
    c312:	|         jsr -306(a6)
    c316:	|         move.l d0,50(sp)
    c31a:	|         move.l 50(sp),d0
    c31e:	|         move.l d0,d0
    c320:	|         move.b d0,1a11a <brightnessLevel>

	loadHandlers (fp);
    c326:	|         move.l 112(sp),-(sp)
    c32a:	|         jsr 636a <loadHandlers>
    c330:	|         addq.l #4,sp
	loadRegions (fp);
    c332:	|         move.l 112(sp),-(sp)
    c336:	|         jsr 158e2 <loadRegions>
    c33c:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c33e:	|         moveq #12,d0
    c340:	|         move.l d0,46(sp)
    c344:	|         clr.l 42(sp)
    c348:	|         move.l 1a7a4 <SysBase>,d0
    c34e:	|         movea.l d0,a6
    c350:	|         move.l 46(sp),d0
    c354:	|         move.l 42(sp),d1
    c358:	|         jsr -684(a6)
    c35c:	|         move.l d0,38(sp)
    c360:	|         move.l 38(sp),d0
    c364:	|         move.l d0,1a6aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c36a:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c370:	|     /-- bne.s c384 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c372:	|     |   pea 190b6 <PutChar+0x15ac>
    c378:	|     |   jsr 17036 <KPrintF>
    c37e:	|     |   addq.l #4,sp
		return FALSE;
    c380:	|     |   clr.w d0
    c382:	+-----|-- bra.s c3f8 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c384:	|     \-> jsr d212 <nosnapshot>
	if (FGetC (fp)) {
    c38a:	|         move.l 112(sp),34(sp)
    c390:	|         move.l 1a7ac <DOSBase>,d0
    c396:	|         movea.l d0,a6
    c398:	|         move.l 34(sp),d1
    c39c:	|         jsr -306(a6)
    c3a0:	|         move.l d0,30(sp)
    c3a4:	|         move.l 30(sp),d0
    c3a8:	|     /-- beq.s c3be <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c3aa:	|     |   move.l 112(sp),-(sp)
    c3ae:	|     |   jsr d292 <restoreSnapshot>
    c3b4:	|     |   addq.l #4,sp
    c3b6:	|     |   tst.w d0
    c3b8:	|     +-- bne.s c3be <loadGame+0x2bc>
    c3ba:	|     |   clr.w d0
    c3bc:	+-----|-- bra.s c3f8 <loadGame+0x2f6>
	}

	Close (fp);
    c3be:	|     \-> move.l 112(sp),26(sp)
    c3c4:	|         move.l 1a7ac <DOSBase>,d0
    c3ca:	|         movea.l d0,a6
    c3cc:	|         move.l 26(sp),d1
    c3d0:	|         jsr -36(a6)
    c3d4:	|         move.l d0,22(sp)
	clearStackLib ();
    c3d8:	|         jsr c0b8 <clearStackLib>

	cameraX = camerX;
    c3de:	|         move.l 66(sp),1a85e <cameraX>
	cameraY = camerY;
    c3e6:	|         move.l 62(sp),1a862 <cameraY>
	cameraZoom = camerZ;
    c3ee:	|         move.l 58(sp),1a142 <cameraZoom>

	return TRUE;
    c3f6:	|         moveq #1,d0
}
    c3f8:	\-------> movem.l (sp)+,d2-d3/a6
    c3fc:	          lea 128(sp),sp
    c400:	          rts

0000c402 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c402:	   /-> lea -64(sp),sp
    c406:	   |   move.l a6,-(sp)
    c408:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c40a:	   |   movea.l 76(sp),a0
    c40e:	   |   move.l (a0),d0
    c410:	   |   move.l 80(sp),-(sp)
    c414:	   |   move.l d0,-(sp)
    c416:	   |   jsr 8d0 <put2bytes>
    c41c:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c41e:	   |   movea.l 76(sp),a0
    c422:	   |   move.l 40(a0),d0
    c426:	/--|-- beq.s c462 <saveFunction+0x60>
		FPutC (fp, 1);
    c428:	|  |   move.l 80(sp),52(sp)
    c42e:	|  |   moveq #1,d0
    c430:	|  |   move.l d0,48(sp)
    c434:	|  |   move.l 1a7ac <DOSBase>,d0
    c43a:	|  |   movea.l d0,a6
    c43c:	|  |   move.l 52(sp),d1
    c440:	|  |   move.l 48(sp),d2
    c444:	|  |   jsr -312(a6)
    c448:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c44c:	|  |   movea.l 76(sp),a0
    c450:	|  |   move.l 40(a0),d0
    c454:	|  |   move.l 80(sp),-(sp)
    c458:	|  |   move.l d0,-(sp)
    c45a:	|  \-- jsr c402 <saveFunction>(pc)
    c45e:	|      addq.l #8,sp
    c460:	|  /-- bra.s c484 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c462:	\--|-> move.l 80(sp),64(sp)
    c468:	   |   clr.l 60(sp)
    c46c:	   |   move.l 1a7ac <DOSBase>,d0
    c472:	   |   movea.l d0,a6
    c474:	   |   move.l 64(sp),d1
    c478:	   |   move.l 60(sp),d2
    c47c:	   |   jsr -312(a6)
    c480:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c484:	   \-> movea.l 76(sp),a0
    c488:	       move.l 12(a0),d0
    c48c:	       move.l 80(sp),-(sp)
    c490:	       move.l d0,-(sp)
    c492:	       jsr 958 <put4bytes>
    c498:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c49a:	       movea.l 76(sp),a0
    c49e:	       move.l 36(a0),d0
    c4a2:	       move.l 80(sp),-(sp)
    c4a6:	       move.l d0,-(sp)
    c4a8:	       jsr 8d0 <put2bytes>
    c4ae:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c4b0:	       move.l 80(sp),40(sp)
    c4b6:	       movea.l 76(sp),a0
    c4ba:	       move.w 54(a0),d0
    c4be:	       movea.w d0,a0
    c4c0:	       move.l a0,36(sp)
    c4c4:	       move.l 1a7ac <DOSBase>,d0
    c4ca:	       movea.l d0,a6
    c4cc:	       move.l 40(sp),d1
    c4d0:	       move.l 36(sp),d2
    c4d4:	       jsr -312(a6)
    c4d8:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c4dc:	       move.l 80(sp),28(sp)
    c4e2:	       movea.l 76(sp),a0
    c4e6:	       move.w 48(a0),d0
    c4ea:	       movea.w d0,a0
    c4ec:	       move.l a0,24(sp)
    c4f0:	       move.l 1a7ac <DOSBase>,d0
    c4f6:	       movea.l d0,a6
    c4f8:	       move.l 28(sp),d1
    c4fc:	       move.l 24(sp),d2
    c500:	       jsr -312(a6)
    c504:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c508:	       move.l 80(sp),16(sp)
    c50e:	       movea.l 76(sp),a0
    c512:	       move.w 50(a0),d0
    c516:	       movea.w d0,a0
    c518:	       move.l a0,12(sp)
    c51c:	       move.l 1a7ac <DOSBase>,d0
    c522:	       movea.l d0,a6
    c524:	       move.l 16(sp),d1
    c528:	       move.l 12(sp),d2
    c52c:	       jsr -312(a6)
    c530:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c534:	       moveq #28,d0
    c536:	       add.l 76(sp),d0
    c53a:	       move.l 80(sp),-(sp)
    c53e:	       move.l d0,-(sp)
    c540:	       jsr cc5a <saveVariable>
    c546:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c548:	       movea.l 76(sp),a0
    c54c:	       move.b 56(a0),d0
    c550:	   /-- beq.s c560 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c552:	   |   pea 190d7 <PutChar+0x15cd>
    c558:	   |   jsr 17036 <KPrintF>
    c55e:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c560:	   \-> movea.l 76(sp),a0
    c564:	       move.l 24(a0),d0
    c568:	       move.l 80(sp),-(sp)
    c56c:	       move.l d0,-(sp)
    c56e:	       jsr cace <saveStack>
    c574:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c576:	       clr.l 68(sp)
    c57a:	   /-- bra.s c59e <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c57c:	/--|-> movea.l 76(sp),a0
    c580:	|  |   move.l 20(a0),d1
    c584:	|  |   move.l 68(sp),d0
    c588:	|  |   lsl.l #3,d0
    c58a:	|  |   add.l d1,d0
    c58c:	|  |   move.l 80(sp),-(sp)
    c590:	|  |   move.l d0,-(sp)
    c592:	|  |   jsr cc5a <saveVariable>
    c598:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c59a:	|  |   addq.l #1,68(sp)
    c59e:	|  \-> movea.l 76(sp),a0
    c5a2:	|      move.l 8(a0),d0
    c5a6:	|      cmp.l 68(sp),d0
    c5aa:	\----- bgt.s c57c <saveFunction+0x17a>
	}
}
    c5ac:	       nop
    c5ae:	       nop
    c5b0:	       move.l (sp)+,d2
    c5b2:	       movea.l (sp)+,a6
    c5b4:	       lea 64(sp),sp
    c5b8:	       rts

0000c5ba <saveGame>:

BOOL saveGame (char * fname) {
    c5ba:	          lea -248(sp),sp
    c5be:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c5c2:	          move.l 264(sp),244(sp)
    c5c8:	          move.l #1006,240(sp)
    c5d0:	          move.l 1a7ac <DOSBase>,d0
    c5d6:	          movea.l d0,a6
    c5d8:	          move.l 244(sp),d1
    c5dc:	          move.l 240(sp),d2
    c5e0:	          jsr -30(a6)
    c5e4:	          move.l d0,236(sp)
    c5e8:	          move.l 236(sp),d0
    c5ec:	          move.l d0,232(sp)
	if (fp == NULL) {
    c5f0:	      /-- bne.s c606 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c5f2:	      |   pea 190f9 <PutChar+0x15ef>
    c5f8:	      |   jsr 17036 <KPrintF>
    c5fe:	      |   addq.l #4,sp
		return FALSE;
    c600:	      |   clr.w d0
    c602:	/-----|-- bra.w cac4 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c606:	|     \-> move.l 232(sp),228(sp)
    c60c:	|         move.l #102678,224(sp)
    c614:	|         moveq #6,d0
    c616:	|         move.l d0,220(sp)
    c61a:	|         move.l 1a7ac <DOSBase>,d0
    c620:	|         movea.l d0,a6
    c622:	|         move.l 228(sp),d1
    c626:	|         move.l 224(sp),d2
    c62a:	|         move.l 220(sp),d3
    c62e:	|         jsr -48(a6)
    c632:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c636:	|         move.l 232(sp),212(sp)
    c63c:	|         clr.l 208(sp)
    c640:	|         move.l 1a7ac <DOSBase>,d0
    c646:	|         movea.l d0,a6
    c648:	|         move.l 212(sp),d1
    c64c:	|         move.l 208(sp),d2
    c650:	|         jsr -312(a6)
    c654:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c658:	|         move.l 232(sp),200(sp)
    c65e:	|         clr.l 196(sp)
    c662:	|         move.l 1a7ac <DOSBase>,d0
    c668:	|         movea.l d0,a6
    c66a:	|         move.l 200(sp),d1
    c66e:	|         move.l 196(sp),d2
    c672:	|         jsr -312(a6)
    c676:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c67a:	|         move.l 232(sp),188(sp)
    c680:	|         moveq #2,d0
    c682:	|         move.l d0,184(sp)
    c686:	|         move.l 1a7ac <DOSBase>,d0
    c68c:	|         movea.l d0,a6
    c68e:	|         move.l 188(sp),d1
    c692:	|         move.l 184(sp),d2
    c696:	|         jsr -312(a6)
    c69a:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c69e:	|         move.l 232(sp),176(sp)
    c6a4:	|         moveq #2,d0
    c6a6:	|         move.l d0,172(sp)
    c6aa:	|         move.l 1a7ac <DOSBase>,d0
    c6b0:	|         movea.l d0,a6
    c6b2:	|         move.l 176(sp),d1
    c6b6:	|         move.l 172(sp),d2
    c6ba:	|         jsr -312(a6)
    c6be:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c6c2:	|         move.l 232(sp),164(sp)
    c6c8:	|         move.l #108358,160(sp)
    c6d0:	|         moveq #8,d0
    c6d2:	|         move.l d0,156(sp)
    c6d6:	|         move.l 1a7ac <DOSBase>,d0
    c6dc:	|         movea.l d0,a6
    c6de:	|         move.l 164(sp),d1
    c6e2:	|         move.l 160(sp),d2
    c6e6:	|         move.l 156(sp),d3
    c6ea:	|         jsr -48(a6)
    c6ee:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c6f2:	|         move.l 232(sp),148(sp)
    c6f8:	|         move.w 1a000 <allowAnyFilename>,d0
    c6fe:	|         movea.w d0,a0
    c700:	|         move.l a0,144(sp)
    c704:	|         move.l 1a7ac <DOSBase>,d0
    c70a:	|         movea.l d0,a6
    c70c:	|         move.l 148(sp),d1
    c710:	|         move.l 144(sp),d2
    c714:	|         jsr -312(a6)
    c718:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c71c:	|         move.l 232(sp),136(sp)
    c722:	|         move.w 1a744 <captureAllKeys>,d0
    c728:	|         movea.w d0,a0
    c72a:	|         move.l a0,132(sp)
    c72e:	|         move.l 1a7ac <DOSBase>,d0
    c734:	|         movea.l d0,a6
    c736:	|         move.l 136(sp),d1
    c73a:	|         move.l 132(sp),d2
    c73e:	|         jsr -312(a6)
    c742:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c746:	|         move.l 232(sp),124(sp)
    c74c:	|         moveq #1,d0
    c74e:	|         move.l d0,120(sp)
    c752:	|         move.l 1a7ac <DOSBase>,d0
    c758:	|         movea.l d0,a6
    c75a:	|         move.l 124(sp),d1
    c75e:	|         move.l 120(sp),d2
    c762:	|         jsr -312(a6)
    c766:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c76a:	|         move.l 232(sp),112(sp)
    c770:	|         move.l 1a8ac <fontTableSize>,d0
    c776:	|         sgt d0
    c778:	|         neg.b d0
    c77a:	|         move.b d0,d0
    c77c:	|         andi.l #255,d0
    c782:	|         move.l d0,108(sp)
    c786:	|         move.l 1a7ac <DOSBase>,d0
    c78c:	|         movea.l d0,a6
    c78e:	|         move.l 112(sp),d1
    c792:	|         move.l 108(sp),d2
    c796:	|         jsr -312(a6)
    c79a:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c79e:	|         move.l 1a8ac <fontTableSize>,d0
    c7a4:	|     /-- ble.s c7e2 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c7a6:	|     |   move.l 1a8a0 <loadedFontNum>,d0
    c7ac:	|     |   move.l 232(sp),-(sp)
    c7b0:	|     |   move.l d0,-(sp)
    c7b2:	|     |   jsr 8d0 <put2bytes>
    c7b8:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c7ba:	|     |   move.l 1a89c <fontHeight>,d0
    c7c0:	|     |   move.l 232(sp),-(sp)
    c7c4:	|     |   move.l d0,-(sp)
    c7c6:	|     |   jsr 8d0 <put2bytes>
    c7cc:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c7ce:	|     |   move.l 1a8a4 <fontOrderString>,d0
    c7d4:	|     |   move.l 232(sp),-(sp)
    c7d8:	|     |   move.l d0,-(sp)
    c7da:	|     |   jsr bd8 <writeString>
    c7e0:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c7e2:	|     \-> move.w 1a6a8 <fontSpace>,d0
    c7e8:	|         movea.w d0,a0
    c7ea:	|         move.l 232(sp),-(sp)
    c7ee:	|         move.l a0,-(sp)
    c7f0:	|         jsr a9c <putSigned>
    c7f6:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c7f8:	|         move.l 1a85e <cameraX>,d0
    c7fe:	|         move.l 232(sp),-(sp)
    c802:	|         move.l d0,-(sp)
    c804:	|         jsr 8d0 <put2bytes>
    c80a:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c80c:	|         move.l 1a862 <cameraY>,d0
    c812:	|         move.l 232(sp),-(sp)
    c816:	|         move.l d0,-(sp)
    c818:	|         jsr 8d0 <put2bytes>
    c81e:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c820:	|         move.l 1a142 <cameraZoom>,d0
    c826:	|         move.l 232(sp),-(sp)
    c82a:	|         move.l d0,-(sp)
    c82c:	|         jsr a46 <putFloat>
    c832:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c834:	|         move.l 232(sp),100(sp)
    c83a:	|         move.b 1a11a <brightnessLevel>,d0
    c840:	|         move.b d0,d0
    c842:	|         andi.l #255,d0
    c848:	|         move.l d0,96(sp)
    c84c:	|         move.l 1a7ac <DOSBase>,d0
    c852:	|         movea.l d0,a6
    c854:	|         move.l 100(sp),d1
    c858:	|         move.l 96(sp),d2
    c85c:	|         jsr -312(a6)
    c860:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c864:	|         move.l 232(sp),-(sp)
    c868:	|         jsr 68ee <saveHandlers>
    c86e:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c870:	|         move.l 232(sp),-(sp)
    c874:	|         jsr 15a9c <saveRegions>
    c87a:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c87c:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c882:	|         move.l 232(sp),-(sp)
    c886:	|         move.l d0,-(sp)
    c888:	|         jsr ae62 <saveAnim>
    c88e:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c890:	|         move.l 1a6ae <mouseCursorFrameNum>,d0
    c896:	|         move.l 232(sp),-(sp)
    c89a:	|         move.l d0,-(sp)
    c89c:	|         jsr 8d0 <put2bytes>
    c8a2:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c8a4:	|         move.l 1a73c <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c8ac:	|         clr.l 248(sp)
	while (thisFunction) {
    c8b0:	|     /-- bra.s c8c0 <saveGame+0x306>
		countFunctions ++;
    c8b2:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    c8b6:	|  |  |   movea.l 252(sp),a0
    c8ba:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c8c0:	|  |  \-> tst.l 252(sp)
    c8c4:	|  \----- bne.s c8b2 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c8c6:	|         move.l 232(sp),-(sp)
    c8ca:	|         move.l 252(sp),-(sp)
    c8ce:	|         jsr 8d0 <put2bytes>
    c8d4:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c8d6:	|         move.l 1a73c <allRunningFunctions>,252(sp)
	while (thisFunction) {
    c8de:	|     /-- bra.s c8fa <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c8e0:	|  /--|-> move.l 232(sp),-(sp)
    c8e4:	|  |  |   move.l 256(sp),-(sp)
    c8e8:	|  |  |   jsr c402 <saveFunction>
    c8ee:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    c8f0:	|  |  |   movea.l 252(sp),a0
    c8f4:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c8fa:	|  |  \-> tst.l 252(sp)
    c8fe:	|  \----- bne.s c8e0 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    c900:	|         clr.l 256(sp)
    c904:	|     /-- bra.s c926 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    c906:	|  /--|-> move.l 1a752 <globalVars>,d1
    c90c:	|  |  |   move.l 256(sp),d0
    c910:	|  |  |   lsl.l #3,d0
    c912:	|  |  |   add.l d1,d0
    c914:	|  |  |   move.l 232(sp),-(sp)
    c918:	|  |  |   move.l d0,-(sp)
    c91a:	|  |  |   jsr cc5a <saveVariable>
    c920:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    c922:	|  |  |   addq.l #1,256(sp)
    c926:	|  |  \-> move.l 1a77c <numGlobals>,d0
    c92c:	|  |      cmp.l 256(sp),d0
    c930:	|  \----- bgt.s c906 <saveGame+0x34c>
	}

	savePeople (fp);
    c932:	|         move.l 232(sp),-(sp)
    c936:	|         jsr af8a <savePeople>
    c93c:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    c93e:	|         movea.l 1a8c0 <currentFloor>,a0
    c944:	|         move.l 8(a0),d0
    c948:	|  /----- beq.s c986 <saveGame+0x3cc>
		FPutC (fp, 1);
    c94a:	|  |      move.l 232(sp),76(sp)
    c950:	|  |      moveq #1,d0
    c952:	|  |      move.l d0,72(sp)
    c956:	|  |      move.l 1a7ac <DOSBase>,d0
    c95c:	|  |      movea.l d0,a6
    c95e:	|  |      move.l 76(sp),d1
    c962:	|  |      move.l 72(sp),d2
    c966:	|  |      jsr -312(a6)
    c96a:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    c96e:	|  |      movea.l 1a8c0 <currentFloor>,a0
    c974:	|  |      move.l (a0),d0
    c976:	|  |      move.l 232(sp),-(sp)
    c97a:	|  |      move.l d0,-(sp)
    c97c:	|  |      jsr 8d0 <put2bytes>
    c982:	|  |      addq.l #8,sp
    c984:	|  |  /-- bra.s c9a8 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    c986:	|  \--|-> move.l 232(sp),88(sp)
    c98c:	|     |   clr.l 84(sp)
    c990:	|     |   move.l 1a7ac <DOSBase>,d0
    c996:	|     |   movea.l d0,a6
    c998:	|     |   move.l 88(sp),d1
    c99c:	|     |   move.l 84(sp),d2
    c9a0:	|     |   jsr -312(a6)
    c9a4:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    c9a8:	|     \-> move.l 232(sp),64(sp)
    c9ae:	|         move.l 1a872 <speechMode>,60(sp)
    c9b6:	|         move.l 1a7ac <DOSBase>,d0
    c9bc:	|         movea.l d0,a6
    c9be:	|         move.l 64(sp),d1
    c9c2:	|         move.l 60(sp),d2
    c9c6:	|         jsr -312(a6)
    c9ca:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    c9ce:	|         move.b 1a67e <fadeMode>,d0
    c9d4:	|         move.b d0,d0
    c9d6:	|         andi.l #255,d0
    c9dc:	|         move.l d0,52(sp)
    c9e0:	|         move.l 232(sp),48(sp)
    c9e6:	|         move.l 1a7ac <DOSBase>,d0
    c9ec:	|         movea.l d0,a6
    c9ee:	|         move.l 52(sp),d1
    c9f2:	|         move.l 48(sp),d2
    c9f6:	|         jsr -312(a6)
    c9fa:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    c9fe:	|         move.l 1a800 <speech>,d0
    ca04:	|         move.l 232(sp),-(sp)
    ca08:	|         move.l d0,-(sp)
    ca0a:	|         jsr 7f58 <saveSpeech>
    ca10:	|         addq.l #8,sp
	saveStatusBars (fp);
    ca12:	|         move.l 232(sp),-(sp)
    ca16:	|         jsr 7954 <saveStatusBars>
    ca1c:	|         addq.l #4,sp
	saveSounds (fp);
    ca1e:	|         move.l 232(sp),-(sp)
    ca22:	|         jsr cfc0 <saveSounds>
    ca28:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    ca2a:	|         move.w 1a85c <saveEncoding>,d0
    ca30:	|         move.w d0,d0
    ca32:	|         andi.l #65535,d0
    ca38:	|         move.l 232(sp),-(sp)
    ca3c:	|         move.l d0,-(sp)
    ca3e:	|         jsr 8d0 <put2bytes>
    ca44:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    ca46:	|         move.l 1a84e <parallaxStuff>,d0
    ca4c:	|         move.l 232(sp),-(sp)
    ca50:	|         move.l d0,-(sp)
    ca52:	|         jsr d2b8 <saveParallaxRecursive>
    ca58:	|         addq.l #8,sp
	FPutC (fp, 0);
    ca5a:	|         move.l 232(sp),40(sp)
    ca60:	|         clr.l 36(sp)
    ca64:	|         move.l 1a7ac <DOSBase>,d0
    ca6a:	|         movea.l d0,a6
    ca6c:	|         move.l 40(sp),d1
    ca70:	|         move.l 36(sp),d2
    ca74:	|         jsr -312(a6)
    ca78:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    ca7c:	|         move.l 232(sp),28(sp)
    ca82:	|         move.l 1a120 <languageNum>,24(sp)
    ca8a:	|         move.l 1a7ac <DOSBase>,d0
    ca90:	|         movea.l d0,a6
    ca92:	|         move.l 28(sp),d1
    ca96:	|         move.l 24(sp),d2
    ca9a:	|         jsr -312(a6)
    ca9e:	|         move.l d0,20(sp)

	Close(fp);
    caa2:	|         move.l 232(sp),16(sp)
    caa8:	|         move.l 1a7ac <DOSBase>,d0
    caae:	|         movea.l d0,a6
    cab0:	|         move.l 16(sp),d1
    cab4:	|         jsr -36(a6)
    cab8:	|         move.l d0,12(sp)
	clearStackLib ();
    cabc:	|         jsr c0b8 <clearStackLib>
	return TRUE;
    cac2:	|         moveq #1,d0
}
    cac4:	\-------> movem.l (sp)+,d2-d3/a6
    cac8:	          lea 248(sp),sp
    cacc:	          rts

0000cace <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cace:	       lea -12(sp),sp
	int elements = 0;
    cad2:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cad6:	       move.l 16(sp),(sp)
	while (search) {
    cada:	   /-- bra.s cae6 <saveStack+0x18>
		elements ++;
    cadc:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cae0:	|  |   movea.l (sp),a0
    cae2:	|  |   move.l 8(a0),(sp)
	while (search) {
    cae6:	|  \-> tst.l (sp)
    cae8:	\----- bne.s cadc <saveStack+0xe>
	}

	put2bytes (elements, fp);
    caea:	       move.l 20(sp),-(sp)
    caee:	       move.l 12(sp),-(sp)
    caf2:	       jsr 8d0 <put2bytes>
    caf8:	       addq.l #8,sp
	search = vs;
    cafa:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cafe:	       clr.l 4(sp)
    cb02:	   /-- bra.s cb1e <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cb04:	/--|-> move.l (sp),d0
    cb06:	|  |   move.l 20(sp),-(sp)
    cb0a:	|  |   move.l d0,-(sp)
    cb0c:	|  |   jsr cc5a <saveVariable>
    cb12:	|  |   addq.l #8,sp
		search = search -> next;
    cb14:	|  |   movea.l (sp),a0
    cb16:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cb1a:	|  |   addq.l #1,4(sp)
    cb1e:	|  \-> move.l 4(sp),d0
    cb22:	|      cmp.l 8(sp),d0
    cb26:	\----- blt.s cb04 <saveStack+0x36>
	}
}
    cb28:	       nop
    cb2a:	       nop
    cb2c:	       lea 12(sp),sp
    cb30:	       rts

0000cb32 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cb32:	             lea -44(sp),sp
    cb36:	             move.l a6,-(sp)
    cb38:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cb3a:	             move.l 1a834 <stackLib>,48(sp)
	int a = 0;
    cb42:	             clr.l 44(sp)
	while (s) {
    cb46:	      /----- bra.s cba4 <saveStackRef+0x72>
		if (s -> stack == vs) {
    cb48:	   /--|----> movea.l 48(sp),a0
    cb4c:	   |  |      move.l (a0),d0
    cb4e:	   |  |      cmp.l 56(sp),d0
    cb52:	   |  |  /-- bne.s cb96 <saveStackRef+0x64>
			FPutC (fp, 1);
    cb54:	   |  |  |   move.l 60(sp),16(sp)
    cb5a:	   |  |  |   moveq #1,d0
    cb5c:	   |  |  |   move.l d0,12(sp)
    cb60:	   |  |  |   move.l 1a7ac <DOSBase>,d0
    cb66:	   |  |  |   movea.l d0,a6
    cb68:	   |  |  |   move.l 16(sp),d1
    cb6c:	   |  |  |   move.l 12(sp),d2
    cb70:	   |  |  |   jsr -312(a6)
    cb74:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cb78:	   |  |  |   move.l 1a830 <stackLibTotal>,d0
    cb7e:	   |  |  |   sub.l 44(sp),d0
    cb82:	   |  |  |   move.l 60(sp),-(sp)
    cb86:	   |  |  |   move.l d0,-(sp)
    cb88:	   |  |  |   jsr 8d0 <put2bytes>
    cb8e:	   |  |  |   addq.l #8,sp
			return TRUE;
    cb90:	   |  |  |   moveq #1,d0
    cb92:	/--|--|--|-- bra.w cc50 <saveStackRef+0x11e>
		}
		s = s -> next;
    cb96:	|  |  |  \-> movea.l 48(sp),a0
    cb9a:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cba0:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cba4:	|  |  \----> tst.l 48(sp)
    cba8:	|  \-------- bne.s cb48 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cbaa:	|            move.l 60(sp),40(sp)
    cbb0:	|            clr.l 36(sp)
    cbb4:	|            move.l 1a7ac <DOSBase>,d0
    cbba:	|            movea.l d0,a6
    cbbc:	|            move.l 40(sp),d1
    cbc0:	|            move.l 36(sp),d2
    cbc4:	|            jsr -312(a6)
    cbc8:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cbcc:	|            movea.l 56(sp),a0
    cbd0:	|            move.l (a0),d0
    cbd2:	|            move.l 60(sp),-(sp)
    cbd6:	|            move.l d0,-(sp)
    cbd8:	|            jsr cace <saveStack>
    cbde:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cbe0:	|            moveq #8,d0
    cbe2:	|            move.l d0,28(sp)
    cbe6:	|            clr.l 24(sp)
    cbea:	|            move.l 1a7a4 <SysBase>,d0
    cbf0:	|            movea.l d0,a6
    cbf2:	|            move.l 28(sp),d0
    cbf6:	|            move.l 24(sp),d1
    cbfa:	|            jsr -684(a6)
    cbfe:	|            move.l d0,20(sp)
    cc02:	|            move.l 20(sp),d0
    cc06:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cc0a:	|            move.l 1a830 <stackLibTotal>,d0
    cc10:	|            addq.l #1,d0
    cc12:	|            move.l d0,1a830 <stackLibTotal>
	if (! s) {
    cc18:	|            tst.l 48(sp)
    cc1c:	|        /-- bne.s cc30 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cc1e:	|        |   pea 19145 <PutChar+0x163b>
    cc24:	|        |   jsr 17036 <KPrintF>
    cc2a:	|        |   addq.l #4,sp
		return FALSE;
    cc2c:	|        |   clr.w d0
    cc2e:	+--------|-- bra.s cc50 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cc30:	|        \-> move.l 1a834 <stackLib>,d0
    cc36:	|            movea.l 48(sp),a0
    cc3a:	|            move.l d0,4(a0)
	s -> stack = vs;
    cc3e:	|            movea.l 48(sp),a0
    cc42:	|            move.l 56(sp),(a0)
	stackLib = s;
    cc46:	|            move.l 48(sp),1a834 <stackLib>
	return TRUE;
    cc4e:	|            moveq #1,d0
}
    cc50:	\----------> move.l (sp)+,d2
    cc52:	             movea.l (sp)+,a6
    cc54:	             lea 44(sp),sp
    cc58:	             rts

0000cc5a <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cc5a:	          lea -12(sp),sp
    cc5e:	          move.l a6,-(sp)
    cc60:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cc62:	          move.l 28(sp),16(sp)
    cc68:	          movea.l 24(sp),a0
    cc6c:	          move.l (a0),d0
    cc6e:	          move.l d0,12(sp)
    cc72:	          move.l 1a7ac <DOSBase>,d0
    cc78:	          movea.l d0,a6
    cc7a:	          move.l 16(sp),d1
    cc7e:	          move.l 12(sp),d2
    cc82:	          jsr -312(a6)
    cc86:	          move.l d0,8(sp)
	switch (from -> varType) {
    cc8a:	          movea.l 24(sp),a0
    cc8e:	          move.l (a0),d0
    cc90:	          moveq #9,d1
    cc92:	          cmp.l d0,d1
    cc94:	      /-- bcs.w cd44 <saveVariable+0xea>
    cc98:	      |   add.l d0,d0
    cc9a:	      |   movea.l d0,a0
    cc9c:	      |   adda.l #52392,a0
    cca2:	      |   move.w (a0),d0
    cca4:	      |   jmp (cca8 <saveVariable+0x4e>,pc,d0.w)
    cca8:	      |   ori.l #1310740,(a0)+
    ccae:	      |   ori.b #20,(20,a0,d0.w)
    ccb4:	      |   .short 0x004c
    ccb6:	      |   ori.b #126,(a4)
    ccba:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    ccbe:	      |   ori.b #40,(a0)+
    ccc2:	      |   ori.b #47,d4
    ccc6:	      |   ori.b #0,(a4)+
    ccca:	      |   jsr 958 <put4bytes>
    ccd0:	      |   addq.l #8,sp
		return TRUE;
    ccd2:	      |   moveq #1,d0
    ccd4:	/-----|-- bra.w cd80 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ccd8:	|     |   movea.l 24(sp),a0
    ccdc:	|     |   move.l 4(a0),d0
    cce0:	|     |   move.l 28(sp),-(sp)
    cce4:	|     |   move.l d0,-(sp)
    cce6:	|     |   jsr bd8 <writeString>
    ccec:	|     |   addq.l #8,sp
		return TRUE;
    ccee:	|     |   moveq #1,d0
    ccf0:	+-----|-- bra.w cd80 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ccf4:	|     |   movea.l 24(sp),a0
    ccf8:	|     |   move.l 4(a0),d0
    ccfc:	|     |   move.l 28(sp),-(sp)
    cd00:	|     |   move.l d0,-(sp)
    cd02:	|     |   jsr cb32 <saveStackRef>
    cd08:	|     |   addq.l #8,sp
    cd0a:	+-----|-- bra.s cd80 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    cd0c:	|     |   movea.l 24(sp),a0
    cd10:	|     |   move.l 4(a0),d0
    cd14:	|     |   move.l 28(sp),-(sp)
    cd18:	|     |   move.l d0,-(sp)
    cd1a:	|     |   jsr af2c <saveCostume>
    cd20:	|     |   addq.l #8,sp
		return FALSE;
    cd22:	|     |   clr.w d0
    cd24:	+-----|-- bra.s cd80 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cd26:	|     |   movea.l 24(sp),a0
    cd2a:	|     |   move.l 4(a0),d0
    cd2e:	|     |   move.l 28(sp),-(sp)
    cd32:	|     |   move.l d0,-(sp)
    cd34:	|     |   jsr ae62 <saveAnim>
    cd3a:	|     |   addq.l #8,sp
		return FALSE;
    cd3c:	|     |   clr.w d0
    cd3e:	+-----|-- bra.s cd80 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cd40:	|     |   clr.w d0
    cd42:	+-----|-- bra.s cd80 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cd44:	|     \-> movea.l 24(sp),a0
    cd48:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cd4a:	|         moveq #10,d1
    cd4c:	|         cmp.l d0,d1
    cd4e:	|  /----- bcs.s cd68 <saveVariable+0x10e>
						typeName[from->varType] :
    cd50:	|  |      movea.l 24(sp),a0
    cd54:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cd56:	|  |      add.l d0,d0
    cd58:	|  |      movea.l d0,a1
    cd5a:	|  |      adda.l d0,a1
    cd5c:	|  |      lea 1a680 <typeName>,a0
    cd62:	|  |      move.l (0,a1,a0.l),d0
    cd66:	|  |  /-- bra.s cd6e <saveVariable+0x114>
    cd68:	|  \--|-> move.l #102762,d0
    cd6e:	|     \-> move.l d0,-(sp)
    cd70:	|         pea 19171 <PutChar+0x1667>
    cd76:	|         jsr 17036 <KPrintF>
    cd7c:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cd7e:	|         moveq #1,d0
    cd80:	\-------> move.l (sp)+,d2
    cd82:	          movea.l (sp)+,a6
    cd84:	          lea 12(sp),sp
    cd88:	          rts

0000cd8a <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cd8a:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cd8e:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cd96:	          movea.l 4(sp),a0
    cd9a:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cda0:	          movea.l 4(sp),a0
    cda4:	          move.w 10(a0),d0
    cda8:	          lsr.w #8,d0
    cdaa:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cdae:	          movea.l 4(sp),a0
    cdb2:	          move.w 10(a0),d0
    cdb6:	          move.b d0,(sp)

    if(counterx_new)
    cdb8:	/-------- beq.w ce5e <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cdbc:	|         clr.w d1
    cdbe:	|         move.b (sp),d1
    cdc0:	|         move.w 1a83c <counterx_old>,d0
    cdc6:	|         sub.w d0,d1
    cdc8:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cdcc:	|         cmpi.w #128,10(sp)
    cdd2:	|     /-- blt.s cdea <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cdd4:	|     |   move.w #1,1a75a <input+0x4>
            counterx_diff -= 256;    
    cddc:	|     |   move.w 10(sp),d0
    cde0:	|     |   addi.w #-256,d0
    cde4:	|     |   move.w d0,10(sp)
    cde8:	|  /--|-- bra.s ce16 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cdea:	|  |  \-> cmpi.w #-129,10(sp)
    cdf0:	|  |  /-- bgt.s ce08 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cdf2:	|  |  |   move.w 10(sp),d0
    cdf6:	|  |  |   addi.w #256,d0
    cdfa:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cdfe:	|  |  |   move.w #1,1a75a <input+0x4>
    ce06:	|  +--|-- bra.s ce16 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    ce08:	|  |  \-> tst.w 10(sp)
    ce0c:	|  +----- beq.s ce16 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    ce0e:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseX += counterx_diff;
    ce16:	|  \----> move.l 1a760 <input+0xa>,d0
    ce1c:	|         movea.w 10(sp),a0
    ce20:	|         add.l a0,d0
    ce22:	|         move.l d0,1a760 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    ce28:	|         move.l 1a760 <input+0xa>,d1
    ce2e:	|         move.l 1a6f8 <winWidth>,d0
    ce34:	|         cmp.l d1,d0
    ce36:	|     /-- bge.s ce46 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    ce38:	|     |   move.l 1a6f8 <winWidth>,d0
    ce3e:	|     |   move.l d0,1a760 <input+0xa>
    ce44:	|  /--|-- bra.s ce54 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    ce46:	|  |  \-> move.l 1a760 <input+0xa>,d0
    ce4c:	|  +----- bpl.s ce54 <CsiCheckInput+0xca>
            input.mouseX = 0;
    ce4e:	|  |      clr.l 1a760 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    ce54:	|  \----> clr.w d0
    ce56:	|         move.b (sp),d0
    ce58:	|         move.w d0,1a83c <counterx_old>
    }    

    if(countery_new)
    ce5e:	\-------> tst.b 1(sp)
    ce62:	/-------- beq.w cf0c <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    ce66:	|         clr.w d1
    ce68:	|         move.b 1(sp),d1
    ce6c:	|         move.w 1a83e <countery_old>,d0
    ce72:	|         sub.w d0,d1
    ce74:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    ce78:	|         cmpi.w #128,8(sp)
    ce7e:	|     /-- blt.s ce96 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    ce80:	|     |   move.w #1,1a75a <input+0x4>
            countery_diff -= 256;    
    ce88:	|     |   move.w 8(sp),d0
    ce8c:	|     |   addi.w #-256,d0
    ce90:	|     |   move.w d0,8(sp)
    ce94:	|  /--|-- bra.s cec2 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    ce96:	|  |  \-> cmpi.w #-129,8(sp)
    ce9c:	|  |  /-- bgt.s ceb4 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    ce9e:	|  |  |   move.w #1,1a75a <input+0x4>
            countery_diff += 256;
    cea6:	|  |  |   move.w 8(sp),d0
    ceaa:	|  |  |   addi.w #256,d0
    ceae:	|  |  |   move.w d0,8(sp)
    ceb2:	|  +--|-- bra.s cec2 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    ceb4:	|  |  \-> tst.w 8(sp)
    ceb8:	|  +----- beq.s cec2 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    ceba:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseY += countery_diff;
    cec2:	|  \----> move.l 1a764 <input+0xe>,d0
    cec8:	|         movea.w 8(sp),a0
    cecc:	|         add.l a0,d0
    cece:	|         move.l d0,1a764 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    ced4:	|         move.l 1a764 <input+0xe>,d1
    ceda:	|         move.l 1a6fc <winHeight>,d0
    cee0:	|         cmp.l d1,d0
    cee2:	|     /-- bge.s cef2 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    cee4:	|     |   move.l 1a6fc <winHeight>,d0
    ceea:	|     |   move.l d0,1a764 <input+0xe>
    cef0:	|  /--|-- bra.s cf00 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    cef2:	|  |  \-> move.l 1a764 <input+0xe>,d0
    cef8:	|  +----- bpl.s cf00 <CsiCheckInput+0x176>
            input.mouseY = 0;
    cefa:	|  |      clr.l 1a764 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    cf00:	|  \----> clr.w d0
    cf02:	|         move.b 1(sp),d0
    cf06:	|         move.w d0,1a83e <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    cf0c:	\-------> move.w 1a756 <input>,d0
    cf12:	      /-- beq.s cf38 <CsiCheckInput+0x1ae>
    cf14:	      |   movea.l #12574721,a0
    cf1a:	      |   move.b (a0),d0
    cf1c:	      |   move.b d0,d0
    cf1e:	      |   andi.l #255,d0
    cf24:	      |   moveq #64,d1
    cf26:	      |   and.l d1,d0
    cf28:	      +-- beq.s cf38 <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    cf2a:	      |   clr.w 1a756 <input>
        input.leftRelease = TRUE;
    cf30:	      |   move.w #1,1a75c <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    cf38:	      \-> move.w 1a758 <input+0x2>,d0
    cf3e:	      /-- beq.s cf66 <CsiCheckInput+0x1dc>
    cf40:	      |   movea.l #14675990,a0
    cf46:	      |   move.w (a0),d0
    cf48:	      |   move.w d0,d0
    cf4a:	      |   andi.l #65535,d0
    cf50:	      |   andi.l #1024,d0
    cf56:	      +-- beq.s cf66 <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    cf58:	      |   clr.w 1a758 <input+0x2>
        input.rightRelease = TRUE;
    cf5e:	      |   move.w #1,1a75e <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    cf66:	      \-> movea.l #12574721,a0
    cf6c:	          move.b (a0),d0
    cf6e:	          move.b d0,d0
    cf70:	          andi.l #255,d0
    cf76:	          moveq #64,d1
    cf78:	          and.l d1,d0
    cf7a:	      /-- bne.s cf84 <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    cf7c:	      |   move.w #1,1a756 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    cf84:	      \-> movea.l #14675990,a0
    cf8a:	          move.w (a0),d0
    cf8c:	          move.w d0,d0
    cf8e:	          andi.l #65535,d0
    cf94:	          andi.l #1024,d0
    cf9a:	      /-- bne.s cfa4 <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    cf9c:	      |   move.w #1,1a758 <input+0x2>
    }

    cfa4:	      \-> nop
    cfa6:	          lea 12(sp),sp
    cfaa:	          rts

0000cfac <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    cfac:	moveq #0,d0
}
    cfae:	rts

0000cfb0 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    cfb0:	nop
    cfb2:	rts

0000cfb4 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    cfb4:	nop
    cfb6:	rts

0000cfb8 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    cfb8:	moveq #1,d0
}
    cfba:	rts

0000cfbc <playSoundList>:

void playSoundList(struct soundList *s) {
}
    cfbc:	nop
    cfbe:	rts

0000cfc0 <saveSounds>:

void saveSounds (BPTR fp) {
    cfc0:	lea -12(sp),sp
    cfc4:	move.l a6,-(sp)
    cfc6:	move.l d2,-(sp)
	FPutC (fp,0);
    cfc8:	move.l 24(sp),16(sp)
    cfce:	clr.l 12(sp)
    cfd2:	move.l 1a7ac <DOSBase>,d0
    cfd8:	movea.l d0,a6
    cfda:	move.l 16(sp),d1
    cfde:	move.l 12(sp),d2
    cfe2:	jsr -312(a6)
    cfe6:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    cfea:	move.l 1a13e <defSoundVol>,d0
    cff0:	move.l 24(sp),-(sp)
    cff4:	move.l d0,-(sp)
    cff6:	jsr 8d0 <put2bytes>
    cffc:	addq.l #8,sp
	put2bytes (defVol, fp);
    cffe:	move.l 1a13a <defVol>,d0
    d004:	move.l 24(sp),-(sp)
    d008:	move.l d0,-(sp)
    d00a:	jsr 8d0 <put2bytes>
    d010:	addq.l #8,sp
}
    d012:	nop
    d014:	move.l (sp)+,d2
    d016:	movea.l (sp)+,a6
    d018:	lea 12(sp),sp
    d01c:	rts

0000d01e <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d01e:	move.l 4(sp),1a13a <defVol>
}
    d026:	nop
    d028:	rts

0000d02a <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d02a:	move.l 4(sp),1a13e <defSoundVol>
}
    d032:	nop
    d034:	rts

0000d036 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d036:	nop
    d038:	rts

0000d03a <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d03a:	nop
    d03c:	rts

0000d03e <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d03e:	nop
    d040:	rts

0000d042 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d042:	subq.l #4,sp
    d044:	move.l 12(sp),d0
    d048:	move.w d0,d0
    d04a:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d04e:	moveq #1,d0
}
    d050:	addq.l #4,sp
    d052:	rts

0000d054 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d054:	nop
    d056:	rts

0000d058 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d058:	move.l 16(sp),-(sp)
    d05c:	move.l 16(sp),-(sp)
    d060:	jsr e0e <CstBlankScreen>
    d066:	addq.l #8,sp
}
    d068:	nop
    d06a:	rts

0000d06c <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d06c:	pea 19194 <PutChar+0x168a>
    d072:	jsr 17036 <KPrintF>
    d078:	addq.l #4,sp
}
    d07a:	nop
    d07c:	rts

0000d07e <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d07e:	movea.l 8(sp),a1
    d082:	movea.l 12(sp),a0
    d086:	move.l 8(sp),d1
    d08a:	move.l 4(sp),d0
    d08e:	move.l a1,-(sp)
    d090:	move.l a0,-(sp)
    d092:	move.l d1,-(sp)
    d094:	move.l d0,-(sp)
    d096:	jsr 3da2 <drawLine>
    d09c:	lea 16(sp),sp
}
    d0a0:	nop
    d0a2:	rts

0000d0a4 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d0a4:	movea.l 12(sp),a1
    d0a8:	movea.l 4(sp),a0
    d0ac:	move.l 8(sp),d1
    d0b0:	move.l 4(sp),d0
    d0b4:	move.l a1,-(sp)
    d0b6:	move.l a0,-(sp)
    d0b8:	move.l d1,-(sp)
    d0ba:	move.l d0,-(sp)
    d0bc:	jsr 3da2 <drawLine>
    d0c2:	lea 16(sp),sp
}
    d0c6:	nop
    d0c8:	rts

0000d0ca <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d0ca:	pea 191cd <PutChar+0x16c3>
    d0d0:	jsr 17036 <KPrintF>
    d0d6:	addq.l #4,sp
}
    d0d8:	nop
    d0da:	rts

0000d0dc <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d0dc:	jsr 1b8c <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d0e2:	pea 1a848 <backdropTextureName>
    d0e8:	pea 1 <_start+0x1>
    d0ec:	jsr 3f24 <deleteTextures>
    d0f2:	addq.l #8,sp
	backdropTextureName = 0;
    d0f4:	clr.l 1a848 <backdropTextureName>
	backdropExists = FALSE;
    d0fa:	clr.w 1a84c <backdropExists>
}
    d100:	nop
    d102:	rts

0000d104 <killParallax>:

void killParallax () {
    d104:	          lea -12(sp),sp
    d108:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d10a:	   /----- bra.s d176 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d10c:	/--|----> move.l 1a84e <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d114:	|  |      movea.l 12(sp),a0
    d118:	|  |      move.l 42(a0),d0
    d11c:	|  |      move.l d0,1a84e <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d122:	|  |      move.l 12(sp),d0
    d126:	|  |      addq.l #4,d0
    d128:	|  |      move.l d0,-(sp)
    d12a:	|  |      pea 1 <_start+0x1>
    d12e:	|  |      jsr 3f24 <deleteTextures>
    d134:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d136:	|  |      movea.l 12(sp),a0
    d13a:	|  |      move.l (a0),d0
    d13c:	|  |  /-- beq.s d156 <killParallax+0x52>
    d13e:	|  |  |   movea.l 12(sp),a0
    d142:	|  |  |   move.l (a0),8(sp)
    d146:	|  |  |   move.l 1a7a4 <SysBase>,d0
    d14c:	|  |  |   movea.l d0,a6
    d14e:	|  |  |   movea.l 8(sp),a1
    d152:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d156:	|  |  \-> tst.l 12(sp)
    d15a:	|  |  /-- beq.s d172 <killParallax+0x6e>
    d15c:	|  |  |   move.l 12(sp),4(sp)
    d162:	|  |  |   move.l 1a7a4 <SysBase>,d0
    d168:	|  |  |   movea.l d0,a6
    d16a:	|  |  |   movea.l 4(sp),a1
    d16e:	|  |  |   jsr -690(a6)
		k = NULL;
    d172:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d176:	|  \----> move.l 1a84e <parallaxStuff>,d0
    d17c:	\-------- bne.s d10c <killParallax+0x8>
	}
}
    d17e:	          nop
    d180:	          nop
    d182:	          movea.l (sp)+,a6
    d184:	          lea 12(sp),sp
    d188:	          rts

0000d18a <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d18a:	       move.l 4(sp),-(sp)
    d18e:	       jsr 6cb0 <openFileFromNum>
    d194:	       addq.l #4,sp
    d196:	       tst.l d0
    d198:	   /-- bne.s d1aa <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d19a:	   |   pea 191ee <PutChar+0x16e4>
    d1a0:	   |   jsr 17036 <KPrintF>
    d1a6:	   |   addq.l #4,sp
		return;
    d1a8:	/--|-- bra.s d1ca <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d1aa:	|  \-> move.l 1a78c <bigDataFile>,d0
    d1b0:	|      move.l 12(sp),-(sp)
    d1b4:	|      move.l 12(sp),-(sp)
    d1b8:	|      move.l d0,-(sp)
    d1ba:	|      jsr 1e3a <CstLoadBackdrop>
    d1c0:	|      lea 12(sp),sp
	finishAccess ();
    d1c4:	|      jsr 6ba8 <finishAccess>
	
}
    d1ca:	\----> rts

0000d1cc <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d1cc:	subq.l #8,sp
    d1ce:	movea.l 12(sp),a0
    d1d2:	move.l 16(sp),d1
    d1d6:	move.l 20(sp),d0
    d1da:	movea.w a0,a0
    d1dc:	move.w a0,6(sp)
    d1e0:	move.w d1,d1
    d1e2:	move.w d1,4(sp)
    d1e6:	move.w d0,d0
    d1e8:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d1ec:	pea 1923d <PutChar+0x1733>
    d1f2:	jsr 17036 <KPrintF>
    d1f8:	addq.l #4,sp

}
    d1fa:	nop
    d1fc:	addq.l #8,sp
    d1fe:	rts

0000d200 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d200:	pea 19260 <PutChar+0x1756>
    d206:	jsr 17036 <KPrintF>
    d20c:	addq.l #4,sp
}
    d20e:	nop
    d210:	rts

0000d212 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d212:	pea 1a852 <snapshotTextureName>
    d218:	pea 1 <_start+0x1>
    d21c:	jsr 3f24 <deleteTextures>
    d222:	addq.l #8,sp
	snapshotTextureName = 0;
    d224:	clr.l 1a852 <snapshotTextureName>
}
    d22a:	nop
    d22c:	rts

0000d22e <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d22e:	clr.l 1a85e <cameraX>
	cameraY = 0;
    d234:	clr.l 1a862 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d23a:	move.l 1a844 <sceneHeight>,d0
    d240:	move.l d0,d1
    d242:	move.l 1a840 <sceneWidth>,d0
    d248:	move.l d1,-(sp)
    d24a:	move.l d0,-(sp)
    d24c:	jsr 38a8 <CstReserveBackdrop>
    d252:	addq.l #8,sp
}
    d254:	rts

0000d256 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d256:	jsr d0dc <killBackDrop>
	killParallax ();
    d25c:	jsr d104 <killParallax>
	killZBuffer ();
    d262:	jsr 8652 <killZBuffer>
	sceneWidth = x;
    d268:	move.l 4(sp),d0
    d26c:	move.l d0,1a840 <sceneWidth>
	sceneHeight = y;
    d272:	move.l 8(sp),d0
    d276:	move.l d0,1a844 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d27c:	pea 19299 <PutChar+0x178f>
    d282:	jsr 17036 <KPrintF>
    d288:	addq.l #4,sp
	return reserveBackdrop();
    d28a:	jsr d22e <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d290:	rts

0000d292 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d292:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d294:	move.l 12(sp),-(sp)
    d298:	jsr 6bc <get2bytes>
    d29e:	addq.l #4,sp
    d2a0:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d2a4:	move.l 12(sp),-(sp)
    d2a8:	jsr 6bc <get2bytes>
    d2ae:	addq.l #4,sp
    d2b0:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d2b2:	moveq #1,d0
}
    d2b4:	addq.l #8,sp
    d2b6:	rts

0000d2b8 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d2b8:	   /-> lea -12(sp),sp
    d2bc:	   |   move.l a6,-(sp)
    d2be:	   |   move.l d2,-(sp)
	if (me) {
    d2c0:	   |   tst.l 24(sp)
    d2c4:	/--|-- beq.w d35a <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d2c8:	|  |   movea.l 24(sp),a0
    d2cc:	|  |   move.l 42(a0),d0
    d2d0:	|  |   move.l 28(sp),-(sp)
    d2d4:	|  |   move.l d0,-(sp)
    d2d6:	|  \-- jsr d2b8 <saveParallaxRecursive>(pc)
    d2da:	|      addq.l #8,sp
		FPutC (fp, 1);
    d2dc:	|      move.l 28(sp),16(sp)
    d2e2:	|      moveq #1,d0
    d2e4:	|      move.l d0,12(sp)
    d2e8:	|      move.l 1a7ac <DOSBase>,d0
    d2ee:	|      movea.l d0,a6
    d2f0:	|      move.l 16(sp),d1
    d2f4:	|      move.l 12(sp),d2
    d2f8:	|      jsr -312(a6)
    d2fc:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d300:	|      movea.l 24(sp),a0
    d304:	|      move.w 28(a0),d0
    d308:	|      move.w d0,d0
    d30a:	|      andi.l #65535,d0
    d310:	|      move.l 28(sp),-(sp)
    d314:	|      move.l d0,-(sp)
    d316:	|      jsr 8d0 <put2bytes>
    d31c:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d31e:	|      movea.l 24(sp),a0
    d322:	|      move.w 30(a0),d0
    d326:	|      move.w d0,d0
    d328:	|      andi.l #65535,d0
    d32e:	|      move.l 28(sp),-(sp)
    d332:	|      move.l d0,-(sp)
    d334:	|      jsr 8d0 <put2bytes>
    d33a:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d33c:	|      movea.l 24(sp),a0
    d340:	|      move.w 32(a0),d0
    d344:	|      move.w d0,d0
    d346:	|      andi.l #65535,d0
    d34c:	|      move.l 28(sp),-(sp)
    d350:	|      move.l d0,-(sp)
    d352:	|      jsr 8d0 <put2bytes>
    d358:	|      addq.l #8,sp
	}
}
    d35a:	\----> nop
    d35c:	       move.l (sp)+,d2
    d35e:	       movea.l (sp)+,a6
    d360:	       lea 12(sp),sp
    d364:	       rts

0000d366 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d366:	pea 192c0 <PutChar+0x17b6>
    d36c:	jsr 17036 <KPrintF>
    d372:	addq.l #4,sp
	return TRUE;
    d374:	moveq #1,d0
    d376:	rts

0000d378 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d378:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d37a:	             move.l 1a856 <allObjectTypes>,(sp)

	while (huntType) {
    d380:	      /----- bra.s d398 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d382:	   /--|----> movea.l (sp),a0
    d384:	   |  |      move.l 4(a0),d0
    d388:	   |  |      cmp.l 8(sp),d0
    d38c:	   |  |  /-- bne.s d392 <findObjectType+0x1a>
    d38e:	   |  |  |   move.l (sp),d0
    d390:	/--|--|--|-- bra.s d3a8 <findObjectType+0x30>
		huntType = huntType -> next;
    d392:	|  |  |  \-> movea.l (sp),a0
    d394:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d398:	|  |  \----> tst.l (sp)
    d39a:	|  \-------- bne.s d382 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d39c:	|            move.l 8(sp),-(sp)
    d3a0:	|            jsr d468 <loadObjectType>
    d3a6:	|            addq.l #4,sp
}
    d3a8:	\----------> addq.l #4,sp
    d3aa:	             rts

0000d3ac <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d3ac:	             lea -12(sp),sp
	int i, num = 0;
    d3b0:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d3b4:	             move.l 20(sp),-(sp)
    d3b8:	             jsr d378 <findObjectType>
    d3be:	             addq.l #4,sp
    d3c0:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d3c2:	             clr.l 8(sp)
    d3c6:	   /-------- bra.s d3fc <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d3c8:	/--|-------> movea.l (sp),a0
    d3ca:	|  |         move.l 38(a0),d1
    d3ce:	|  |         move.l 8(sp),d0
    d3d2:	|  |         lsl.l #3,d0
    d3d4:	|  |         movea.l d1,a0
    d3d6:	|  |         adda.l d0,a0
    d3d8:	|  |         move.l (a0),d0
    d3da:	|  |         cmp.l 16(sp),d0
    d3de:	|  |  /----- bne.s d3f8 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d3e0:	|  |  |      movea.l (sp),a0
    d3e2:	|  |  |      move.l 38(a0),d1
    d3e6:	|  |  |      move.l 8(sp),d0
    d3ea:	|  |  |      lsl.l #3,d0
    d3ec:	|  |  |      movea.l d1,a0
    d3ee:	|  |  |      adda.l d0,a0
    d3f0:	|  |  |      move.l 4(a0),4(sp)
			break;
    d3f6:	|  |  |  /-- bra.s d408 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d3f8:	|  |  \--|-> addq.l #1,8(sp)
    d3fc:	|  \-----|-> movea.l (sp),a0
    d3fe:	|        |   move.l 16(a0),d0
    d402:	|        |   cmp.l 8(sp),d0
    d406:	\--------|-- bgt.s d3c8 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d408:	         \-> move.l 4(sp),d0
}
    d40c:	             lea 12(sp),sp
    d410:	             rts

0000d412 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d412:	moveq #1,d0
}
    d414:	rts

0000d416 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d416:	subq.l #8,sp
    d418:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d41a:	move.l 16(sp),-(sp)
    d41e:	jsr 6bc <get2bytes>
    d424:	addq.l #4,sp
    d426:	move.l d0,-(sp)
    d428:	jsr d468 <loadObjectType>
    d42e:	addq.l #4,sp
    d430:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d434:	movea.l 8(sp),a0
    d438:	move.l (a0),4(sp)
    d43c:	move.l 1a7a4 <SysBase>,d0
    d442:	movea.l d0,a6
    d444:	movea.l 4(sp),a1
    d448:	jsr -690(a6)
	r -> screenName = readString (fp);
    d44c:	move.l 16(sp),-(sp)
    d450:	jsr b02 <readString>
    d456:	addq.l #4,sp
    d458:	movea.l 8(sp),a0
    d45c:	move.l d0,(a0)
	return r;
    d45e:	move.l 8(sp),d0
}
    d462:	movea.l (sp)+,a6
    d464:	addq.l #8,sp
    d466:	rts

0000d468 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d468:	          lea -84(sp),sp
    d46c:	          move.l a6,-(sp)
    d46e:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d470:	          moveq #42,d0
    d472:	          move.l d0,84(sp)
    d476:	          clr.l 80(sp)
    d47a:	          move.l 1a7a4 <SysBase>,d0
    d480:	          movea.l d0,a6
    d482:	          move.l 84(sp),d0
    d486:	          move.l 80(sp),d1
    d48a:	          jsr -684(a6)
    d48e:	          move.l d0,76(sp)
    d492:	          move.l 76(sp),d0
    d496:	          move.l d0,72(sp)

    if (newType) {
    d49a:	/-------- beq.w d714 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d49e:	|         move.l 96(sp),-(sp)
    d4a2:	|         jsr 6d78 <openObjectSlice>
    d4a8:	|         addq.l #4,sp
    d4aa:	|         tst.w d0
    d4ac:	+-------- beq.w d714 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d4b0:	|         move.l 1a78c <bigDataFile>,d0
    d4b6:	|         move.l d0,-(sp)
    d4b8:	|         jsr 6bc <get2bytes>
    d4be:	|         addq.l #4,sp
    d4c0:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d4c4:	|         move.l 1a78c <bigDataFile>,64(sp)
    d4cc:	|         move.l 1a7ac <DOSBase>,d0
    d4d2:	|         movea.l d0,a6
    d4d4:	|         move.l 64(sp),d1
    d4d8:	|         jsr -306(a6)
    d4dc:	|         move.l d0,60(sp)
    d4e0:	|         move.l 60(sp),d0
    d4e4:	|         move.l d0,d0
    d4e6:	|         movea.l 72(sp),a0
    d4ea:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d4ee:	|         move.l 1a78c <bigDataFile>,56(sp)
    d4f6:	|         move.l 1a7ac <DOSBase>,d0
    d4fc:	|         movea.l d0,a6
    d4fe:	|         move.l 56(sp),d1
    d502:	|         jsr -306(a6)
    d506:	|         move.l d0,52(sp)
    d50a:	|         move.l 52(sp),d0
    d50e:	|         move.l d0,d0
    d510:	|         movea.l 72(sp),a0
    d514:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d518:	|         move.l 1a78c <bigDataFile>,48(sp)
    d520:	|         move.l 1a7ac <DOSBase>,d0
    d526:	|         movea.l d0,a6
    d528:	|         move.l 48(sp),d1
    d52c:	|         jsr -306(a6)
    d530:	|         move.l d0,44(sp)
    d534:	|         move.l 44(sp),d0
    d538:	|         move.l d0,d0
    d53a:	|         movea.l 72(sp),a0
    d53e:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d542:	|         move.l 1a78c <bigDataFile>,40(sp)
    d54a:	|         move.l 1a7ac <DOSBase>,d0
    d550:	|         movea.l d0,a6
    d552:	|         move.l 40(sp),d1
    d556:	|         jsr -306(a6)
    d55a:	|         move.l d0,36(sp)
    d55e:	|         move.l 36(sp),d0
    d562:	|         movea.l 72(sp),a0
    d566:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d56a:	|         move.l 1a78c <bigDataFile>,32(sp)
    d572:	|         move.l 1a7ac <DOSBase>,d0
    d578:	|         movea.l d0,a6
    d57a:	|         move.l 32(sp),d1
    d57e:	|         jsr -306(a6)
    d582:	|         move.l d0,28(sp)
    d586:	|         move.l 28(sp),d0
    d58a:	|         movea.l 72(sp),a0
    d58e:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d592:	|         move.l 1a78c <bigDataFile>,d0
    d598:	|         move.l d0,-(sp)
    d59a:	|         jsr 718 <get4bytes>
    d5a0:	|         addq.l #4,sp
    d5a2:	|         movea.l 72(sp),a0
    d5a6:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d5aa:	|         move.l 1a78c <bigDataFile>,d0
    d5b0:	|         move.l d0,-(sp)
    d5b2:	|         jsr 6bc <get2bytes>
    d5b8:	|         addq.l #4,sp
    d5ba:	|         movea.l 72(sp),a0
    d5be:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d5c2:	|         move.l 1a78c <bigDataFile>,24(sp)
    d5ca:	|         move.l 1a7ac <DOSBase>,d0
    d5d0:	|         movea.l d0,a6
    d5d2:	|         move.l 24(sp),d1
    d5d6:	|         jsr -306(a6)
    d5da:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d5de:	|         move.l 1a78c <bigDataFile>,d0
    d5e4:	|         move.l d0,-(sp)
    d5e6:	|         jsr 7d8 <getFloat>
    d5ec:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d5ee:	|         move.l 1a78c <bigDataFile>,d0
    d5f4:	|         move.l d0,-(sp)
    d5f6:	|         jsr 7d8 <getFloat>
    d5fc:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d5fe:	|         move.l 1a78c <bigDataFile>,d0
    d604:	|         move.l d0,-(sp)
    d606:	|         jsr 6bc <get2bytes>
    d60c:	|         addq.l #4,sp
    d60e:	|         move.l d0,d0
    d610:	|         movea.l 72(sp),a0
    d614:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d618:	|         move.l 1a78c <bigDataFile>,d0
    d61e:	|         move.l d0,-(sp)
    d620:	|         jsr 6bc <get2bytes>
    d626:	|         addq.l #4,sp
    d628:	|         movea.l 72(sp),a0
    d62c:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d630:	|         movea.l 72(sp),a0
    d634:	|         move.l 16(a0),d0
    d638:	|  /----- beq.s d66a <loadObjectType+0x202>
    d63a:	|  |      movea.l 72(sp),a0
    d63e:	|  |      move.l 16(a0),d0
    d642:	|  |      lsl.l #3,d0
    d644:	|  |      move.l d0,16(sp)
    d648:	|  |      clr.l 12(sp)
    d64c:	|  |      move.l 1a7a4 <SysBase>,d0
    d652:	|  |      movea.l d0,a6
    d654:	|  |      move.l 16(sp),d0
    d658:	|  |      move.l 12(sp),d1
    d65c:	|  |      jsr -684(a6)
    d660:	|  |      move.l d0,8(sp)
    d664:	|  |      move.l 8(sp),d0
    d668:	|  |  /-- bra.s d66c <loadObjectType+0x204>
    d66a:	|  \--|-> moveq #0,d0
    d66c:	|     \-> movea.l 72(sp),a0
    d670:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d674:	|         clr.l 88(sp)
    d678:	|     /-- bra.s d6c8 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d67a:	|  /--|-> move.l 1a78c <bigDataFile>,d1
    d680:	|  |  |   movea.l 72(sp),a0
    d684:	|  |  |   movea.l 38(a0),a0
    d688:	|  |  |   move.l 88(sp),d0
    d68c:	|  |  |   lsl.l #3,d0
    d68e:	|  |  |   lea (0,a0,d0.l),a2
    d692:	|  |  |   move.l d1,-(sp)
    d694:	|  |  |   jsr 6bc <get2bytes>
    d69a:	|  |  |   addq.l #4,sp
    d69c:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d69e:	|  |  |   move.l 1a78c <bigDataFile>,d1
    d6a4:	|  |  |   movea.l 72(sp),a0
    d6a8:	|  |  |   movea.l 38(a0),a0
    d6ac:	|  |  |   move.l 88(sp),d0
    d6b0:	|  |  |   lsl.l #3,d0
    d6b2:	|  |  |   lea (0,a0,d0.l),a2
    d6b6:	|  |  |   move.l d1,-(sp)
    d6b8:	|  |  |   jsr 6bc <get2bytes>
    d6be:	|  |  |   addq.l #4,sp
    d6c0:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d6c4:	|  |  |   addq.l #1,88(sp)
    d6c8:	|  |  \-> movea.l 72(sp),a0
    d6cc:	|  |      move.l 16(a0),d0
    d6d0:	|  |      cmp.l 88(sp),d0
    d6d4:	|  \----- bgt.s d67a <loadObjectType+0x212>
            }
            finishAccess();
    d6d6:	|         jsr 6ba8 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d6dc:	|         move.l 68(sp),-(sp)
    d6e0:	|         jsr 6bb2 <getNumberedString>
    d6e6:	|         addq.l #4,sp
    d6e8:	|         movea.l 72(sp),a0
    d6ec:	|         move.l d0,(a0)
            newType->objectNum = i;
    d6ee:	|         movea.l 72(sp),a0
    d6f2:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d6f8:	|         move.l 1a856 <allObjectTypes>,d0
    d6fe:	|         movea.l 72(sp),a0
    d702:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d706:	|         move.l 72(sp),1a856 <allObjectTypes>
            return newType;
    d70e:	|         move.l 72(sp),d0
    d712:	|     /-- bra.s d716 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d714:	\-----|-> moveq #0,d0
}
    d716:	      \-> movea.l (sp)+,a2
    d718:	          movea.l (sp)+,a6
    d71a:	          lea 84(sp),sp
    d71e:	          rts

0000d720 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d720:	             lea -16(sp),sp
    d724:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d726:	             move.l #108630,16(sp)

	while (* huntRegion) {
    d72e:	   /-------- bra.s d7a2 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d730:	/--|-------> movea.l 16(sp),a0
    d734:	|  |         move.l (a0),d0
    d736:	|  |         cmp.l 24(sp),d0
    d73a:	|  |  /----- bne.s d794 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d73c:	|  |  |      movea.l 24(sp),a0
    d740:	|  |  |      move.l 8(a0),d0
    d744:	|  |  |      movea.l 16(sp),a0
    d748:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d74a:	|  |  |      movea.l 24(sp),a0
    d74e:	|  |  |      move.l 38(a0),12(sp)
    d754:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d75a:	|  |  |      movea.l d0,a6
    d75c:	|  |  |      movea.l 12(sp),a1
    d760:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d764:	|  |  |      movea.l 24(sp),a0
    d768:	|  |  |      move.l (a0),8(sp)
    d76c:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d772:	|  |  |      movea.l d0,a6
    d774:	|  |  |      movea.l 8(sp),a1
    d778:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d77c:	|  |  |      move.l 24(sp),4(sp)
    d782:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d788:	|  |  |      movea.l d0,a6
    d78a:	|  |  |      movea.l 4(sp),a1
    d78e:	|  |  |      jsr -690(a6)
			return;
    d792:	|  |  |  /-- bra.s d7b8 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d794:	|  |  \--|-> movea.l 16(sp),a0
    d798:	|  |     |   move.l (a0),d0
    d79a:	|  |     |   move.l d0,d1
    d79c:	|  |     |   addq.l #8,d1
    d79e:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d7a2:	|  \-----|-> movea.l 16(sp),a0
    d7a6:	|        |   move.l (a0),d0
    d7a8:	\--------|-- bne.s d730 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d7aa:	         |   pea 192e7 <PutChar+0x17dd>
    d7b0:	         |   jsr 17036 <KPrintF>
    d7b6:	         |   addq.l #4,sp
}
    d7b8:	         \-> movea.l (sp)+,a6
    d7ba:	             lea 16(sp),sp
    d7be:	             rts

0000d7c0 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d7c0:	movea.l 4(sp),a0
    d7c4:	move.l 4(a0),d0
    d7c8:	move.l 8(sp),-(sp)
    d7cc:	move.l d0,-(sp)
    d7ce:	jsr 8d0 <put2bytes>
    d7d4:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d7d6:	movea.l 4(sp),a0
    d7da:	move.l (a0),d0
    d7dc:	move.l 8(sp),-(sp)
    d7e0:	move.l d0,-(sp)
    d7e2:	jsr bd8 <writeString>
    d7e8:	addq.l #8,sp
    d7ea:	nop
    d7ec:	rts

0000d7ee <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d7ee:	                         lea -112(sp),sp
    d7f2:	                         move.l a6,-(sp)
    d7f4:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d7f6:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d7fa:	                         move.w 1a85c <saveEncoding>,d0
    d800:	                  /----- beq.s d80a <fileToStack+0x1c>
    d802:	                  |      move.l #103181,d0
    d808:	                  |  /-- bra.s d810 <fileToStack+0x22>
    d80a:	                  \--|-> move.l #103207,d0
    d810:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d814:	                         move.l 124(sp),112(sp)
    d81a:	                         move.l #1005,108(sp)
    d822:	                         move.l 1a7ac <DOSBase>,d0
    d828:	                         movea.l d0,a6
    d82a:	                         move.l 112(sp),d1
    d82e:	                         move.l 108(sp),d2
    d832:	                         jsr -30(a6)
    d836:	                         move.l d0,104(sp)
    d83a:	                         move.l 104(sp),d0
    d83e:	                         move.l d0,100(sp)
    if (!fp) {
    d842:	                     /-- bne.s d85c <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d844:	                     |   move.l 124(sp),-(sp)
    d848:	                     |   pea 1933e <PutChar+0x1834>
    d84e:	                     |   jsr 17036 <KPrintF>
    d854:	                     |   addq.l #8,sp
        return FALSE;
    d856:	                     |   clr.w d0
    d858:	/--------------------|-- bra.w db52 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d85c:	|                    \-> move.w 1a85c <saveEncoding>,d0
    d862:	|                        move.l d0,d0
    d864:	|                        move.b d0,1a85a <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d86a:	|                        move.w 1a85c <saveEncoding>,d0
    d870:	|                        lsr.w #8,d0
    d872:	|                        move.l d0,d0
    d874:	|                        move.b d0,1a85b <encode2>

    while (*checker) {
    d87a:	|                 /----- bra.s d8de <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d87c:	|              /--|----> move.l 100(sp),30(sp)
    d882:	|              |  |      move.l 1a7ac <DOSBase>,d0
    d888:	|              |  |      movea.l d0,a6
    d88a:	|              |  |      move.l 30(sp),d1
    d88e:	|              |  |      jsr -306(a6)
    d892:	|              |  |      move.l d0,26(sp)
    d896:	|              |  |      move.l 26(sp),d1
    d89a:	|              |  |      movea.l 116(sp),a0
    d89e:	|              |  |      move.b (a0),d0
    d8a0:	|              |  |      ext.w d0
    d8a2:	|              |  |      movea.w d0,a0
    d8a4:	|              |  |      cmpa.l d1,a0
    d8a6:	|              |  |  /-- beq.s d8da <fileToStack+0xec>
            Close(fp);
    d8a8:	|              |  |  |   move.l 100(sp),22(sp)
    d8ae:	|              |  |  |   move.l 1a7ac <DOSBase>,d0
    d8b4:	|              |  |  |   movea.l d0,a6
    d8b6:	|              |  |  |   move.l 22(sp),d1
    d8ba:	|              |  |  |   jsr -36(a6)
    d8be:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d8c2:	|              |  |  |   move.l 124(sp),-(sp)
    d8c6:	|              |  |  |   pea 1934b <PutChar+0x1841>
    d8cc:	|              |  |  |   jsr 17036 <KPrintF>
    d8d2:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d8d4:	|              |  |  |   clr.w d0
    d8d6:	+--------------|--|--|-- bra.w db52 <fileToStack+0x364>
        }
        checker++;
    d8da:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    d8de:	|              |  \----> movea.l 116(sp),a0
    d8e2:	|              |         move.b (a0),d0
    d8e4:	|              \-------- bne.s d87c <fileToStack+0x8e>
    }

    if (saveEncoding) {
    d8e6:	|                        move.w 1a85c <saveEncoding>,d0
    d8ec:	|  /-------------------- beq.s d960 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    d8ee:	|  |                     move.l 100(sp),-(sp)
    d8f2:	|  |                     jsr db5c <readStringEncoded>
    d8f8:	|  |                     addq.l #4,sp
    d8fa:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    d8fe:	|  |                     pea 1938c <PutChar+0x1882>
    d904:	|  |                     move.l 100(sp),-(sp)
    d908:	|  |                     jsr 13aba <strcmp>
    d90e:	|  |                     addq.l #8,sp
    d910:	|  |                     tst.l d0
    d912:	|  |                 /-- beq.s d946 <fileToStack+0x158>
            Close(fp);
    d914:	|  |                 |   move.l 100(sp),88(sp)
    d91a:	|  |                 |   move.l 1a7ac <DOSBase>,d0
    d920:	|  |                 |   movea.l d0,a6
    d922:	|  |                 |   move.l 88(sp),d1
    d926:	|  |                 |   jsr -36(a6)
    d92a:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    d92e:	|  |                 |   move.l 124(sp),-(sp)
    d932:	|  |                 |   pea 1939b <PutChar+0x1891>
    d938:	|  |                 |   jsr 17036 <KPrintF>
    d93e:	|  |                 |   addq.l #8,sp
            return FALSE;
    d940:	|  |                 |   clr.w d0
    d942:	+--|-----------------|-- bra.w db52 <fileToStack+0x364>
        }
        FreeVec(checker);
    d946:	|  |                 \-> move.l 96(sp),92(sp)
    d94c:	|  |                     move.l 1a7a4 <SysBase>,d0
    d952:	|  |                     movea.l d0,a6
    d954:	|  |                     movea.l 92(sp),a1
    d958:	|  |                     jsr -690(a6)
        checker = NULL;
    d95c:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    d960:	|  >-------------------> move.w 1a85c <saveEncoding>,d0
    d966:	|  |     /-------------- beq.w da9a <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    d96a:	|  |     |               move.l 100(sp),76(sp)
    d970:	|  |     |               move.l 1a7ac <DOSBase>,d0
    d976:	|  |     |               movea.l d0,a6
    d978:	|  |     |               move.l 76(sp),d1
    d97c:	|  |     |               jsr -306(a6)
    d980:	|  |     |               move.l d0,72(sp)
    d984:	|  |     |               move.l 72(sp),d0
    d988:	|  |     |               move.b 1a85a <encode1>,d1
    d98e:	|  |     |               ext.w d1
    d990:	|  |     |               ext.l d1
    d992:	|  |     |               move.l d0,d2
    d994:	|  |     |               eor.l d1,d2
    d996:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    d99a:	|  |     |               moveq #-1,d0
    d99c:	|  |     |               cmp.l 68(sp),d0
    d9a0:	|  |  /--|-------------- beq.w db30 <fileToStack+0x342>

            char i = (char) tmp;
    d9a4:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    d9aa:	|  |  |  |               move.b 67(sp),d0
    d9ae:	|  |  |  |               ext.w d0
    d9b0:	|  |  |  |               movea.w d0,a0
    d9b2:	|  |  |  |               moveq #2,d2
    d9b4:	|  |  |  |               cmp.l a0,d2
    d9b6:	|  |  |  |     /-------- beq.s da32 <fileToStack+0x244>
    d9b8:	|  |  |  |     |         moveq #2,d0
    d9ba:	|  |  |  |     |         cmp.l a0,d0
    d9bc:	|  |  |  |  /--|-------- blt.w da68 <fileToStack+0x27a>
    d9c0:	|  |  |  |  |  |         cmpa.w #0,a0
    d9c4:	|  |  |  |  |  |     /-- beq.s d9d0 <fileToStack+0x1e2>
    d9c6:	|  |  |  |  |  |     |   moveq #1,d2
    d9c8:	|  |  |  |  |  |     |   cmp.l a0,d2
    d9ca:	|  |  |  |  |  |  /--|-- beq.s da0c <fileToStack+0x21e>
    d9cc:	|  |  |  |  +--|--|--|-- bra.w da68 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    d9d0:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    d9d4:	|  |  |  |  |  |  |      jsr db5c <readStringEncoded>
    d9da:	|  |  |  |  |  |  |      addq.l #4,sp
    d9dc:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    d9e0:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    d9e4:	|  |  |  |  |  |  |      lea 14(sp),a0
    d9e8:	|  |  |  |  |  |  |      move.l a0,-(sp)
    d9ea:	|  |  |  |  |  |  |      jsr 14830 <makeTextVar>
    d9f0:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    d9f2:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    d9f8:	|  |  |  |  |  |  |      move.l 1a7a4 <SysBase>,d0
    d9fe:	|  |  |  |  |  |  |      movea.l d0,a6
    da00:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    da04:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    da08:	|  |  |  |  |  |  |  /-- bra.w dac0 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    da0c:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    da10:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    da16:	|  |  |  |  |  |     |   addq.l #4,sp
    da18:	|  |  |  |  |  |     |   move.l d0,-(sp)
    da1a:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    da1e:	|  |  |  |  |  |     |   lea 18(sp),a0
    da22:	|  |  |  |  |  |     |   move.l a0,-(sp)
    da24:	|  |  |  |  |  |     |   jsr 14f00 <setVariable>
    da2a:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    da2e:	|  |  |  |  |  |     +-- bra.w dac0 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    da32:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    da38:	|  |  |  |  |        |   move.l 1a7ac <DOSBase>,d0
    da3e:	|  |  |  |  |        |   movea.l d0,a6
    da40:	|  |  |  |  |        |   move.l 62(sp),d1
    da44:	|  |  |  |  |        |   jsr -306(a6)
    da48:	|  |  |  |  |        |   move.l d0,58(sp)
    da4c:	|  |  |  |  |        |   move.l 58(sp),d0
    da50:	|  |  |  |  |        |   move.l d0,-(sp)
    da52:	|  |  |  |  |        |   pea 1 <_start+0x1>
    da56:	|  |  |  |  |        |   lea 18(sp),a0
    da5a:	|  |  |  |  |        |   move.l a0,-(sp)
    da5c:	|  |  |  |  |        |   jsr 14f00 <setVariable>
    da62:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    da66:	|  |  |  |  |        +-- bra.s dac0 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    da68:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    da6c:	|  |  |  |           |   pea 1941d <PutChar+0x1913>
    da72:	|  |  |  |           |   jsr 17036 <KPrintF>
    da78:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    da7a:	|  |  |  |           |   move.l 100(sp),46(sp)
    da80:	|  |  |  |           |   move.l 1a7ac <DOSBase>,d0
    da86:	|  |  |  |           |   movea.l d0,a6
    da88:	|  |  |  |           |   move.l 46(sp),d1
    da8c:	|  |  |  |           |   jsr -36(a6)
    da90:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    da94:	|  |  |  |           |   clr.w d0
    da96:	+--|--|--|-----------|-- bra.w db52 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    da9a:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    da9e:	|  |  |              |   jsr dc22 <readTextPlain>
    daa4:	|  |  |              |   addq.l #4,sp
    daa6:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    daaa:	|  |  |        /-----|-- beq.w db34 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    daae:	|  |  |        |     |   move.l 80(sp),-(sp)
    dab2:	|  |  |        |     |   lea 14(sp),a0
    dab6:	|  |  |        |     |   move.l a0,-(sp)
    dab8:	|  |  |        |     |   jsr 14830 <makeTextVar>
    dabe:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dac0:	|  |  |        |     \-> movea.l 128(sp),a0
    dac4:	|  |  |        |         move.l (a0),d0
    dac6:	|  |  |        |  /----- bne.s daf6 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dac8:	|  |  |        |  |      move.l 128(sp),d0
    dacc:	|  |  |        |  |      move.l d0,-(sp)
    dace:	|  |  |        |  |      lea 14(sp),a0
    dad2:	|  |  |        |  |      move.l a0,-(sp)
    dad4:	|  |  |        |  |      jsr 13ed0 <addVarToStackQuick>
    dada:	|  |  |        |  |      addq.l #8,sp
    dadc:	|  |  |        |  |      tst.w d0
    dade:	|  |  |        |  |  /-- bne.s dae4 <fileToStack+0x2f6>
    dae0:	|  |  |        |  |  |   clr.w d0
    dae2:	+--|--|--------|--|--|-- bra.s db52 <fileToStack+0x364>
            sH->last = sH->first;
    dae4:	|  |  |        |  |  \-> movea.l 128(sp),a0
    dae8:	|  |  |        |  |      move.l (a0),d0
    daea:	|  |  |        |  |      movea.l 128(sp),a0
    daee:	|  |  |        |  |      move.l d0,4(a0)
    daf2:	|  +--|--------|--|----- bra.w d960 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    daf6:	|  |  |        |  \----> movea.l 128(sp),a0
    dafa:	|  |  |        |         move.l 4(a0),d0
    dafe:	|  |  |        |         addq.l #8,d0
    db00:	|  |  |        |         move.l d0,-(sp)
    db02:	|  |  |        |         lea 14(sp),a0
    db06:	|  |  |        |         move.l a0,-(sp)
    db08:	|  |  |        |         jsr 13ed0 <addVarToStackQuick>
    db0e:	|  |  |        |         addq.l #8,sp
    db10:	|  |  |        |         tst.w d0
    db12:	|  |  |        |     /-- bne.s db18 <fileToStack+0x32a>
    db14:	|  |  |        |     |   clr.w d0
    db16:	+--|--|--------|-----|-- bra.s db52 <fileToStack+0x364>
            sH->last = sH->last->next;
    db18:	|  |  |        |     \-> movea.l 128(sp),a0
    db1c:	|  |  |        |         movea.l 4(a0),a0
    db20:	|  |  |        |         move.l 8(a0),d0
    db24:	|  |  |        |         movea.l 128(sp),a0
    db28:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    db2c:	|  \--|--------|-------- bra.w d960 <fileToStack+0x172>
            if (tmp == -1) break;
    db30:	|     \--------|-------> nop
    db32:	|              |     /-- bra.s db36 <fileToStack+0x348>
            if (!line) break;
    db34:	|              \-----|-> nop
        }
    }
    Close(fp);
    db36:	|                    \-> move.l 100(sp),38(sp)
    db3c:	|                        move.l 1a7ac <DOSBase>,d0
    db42:	|                        movea.l d0,a6
    db44:	|                        move.l 38(sp),d1
    db48:	|                        jsr -36(a6)
    db4c:	|                        move.l d0,34(sp)
    return TRUE;
    db50:	|                        moveq #1,d0
}
    db52:	\----------------------> move.l (sp)+,d2
    db54:	                         movea.l (sp)+,a6
    db56:	                         lea 112(sp),sp
    db5a:	                         rts

0000db5c <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    db5c:	          lea -32(sp),sp
    db60:	          move.l a6,-(sp)
    db62:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    db64:	          move.l 44(sp),-(sp)
    db68:	          jsr 6bc <get2bytes>
    db6e:	          addq.l #4,sp
    db70:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    db74:	          move.l 32(sp),d0
    db78:	          addq.l #1,d0
    db7a:	          move.l d0,28(sp)
    db7e:	          clr.l 24(sp)
    db82:	          move.l 1a7a4 <SysBase>,d0
    db88:	          movea.l d0,a6
    db8a:	          move.l 28(sp),d0
    db8e:	          move.l 24(sp),d1
    db92:	          jsr -684(a6)
    db96:	          move.l d0,20(sp)
    db9a:	          move.l 20(sp),d0
    db9e:	          move.l d0,16(sp)
    if (!s) return NULL;
    dba2:	      /-- bne.s dba8 <readStringEncoded+0x4c>
    dba4:	      |   moveq #0,d0
    dba6:	/-----|-- bra.s dc18 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dba8:	|     \-> clr.l 36(sp)
    dbac:	|     /-- bra.s dbfe <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dbae:	|  /--|-> move.l 44(sp),12(sp)
    dbb4:	|  |  |   move.l 1a7ac <DOSBase>,d0
    dbba:	|  |  |   movea.l d0,a6
    dbbc:	|  |  |   move.l 12(sp),d1
    dbc0:	|  |  |   jsr -306(a6)
    dbc4:	|  |  |   move.l d0,8(sp)
    dbc8:	|  |  |   move.l 8(sp),d0
    dbcc:	|  |  |   move.l d0,d1
    dbce:	|  |  |   move.b 1a85a <encode1>,d2
    dbd4:	|  |  |   move.l 36(sp),d0
    dbd8:	|  |  |   movea.l 16(sp),a0
    dbdc:	|  |  |   adda.l d0,a0
    dbde:	|  |  |   move.b d1,d0
    dbe0:	|  |  |   eor.b d2,d0
    dbe2:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dbe4:	|  |  |   move.b 1a85a <encode1>,d0
    dbea:	|  |  |   move.b d0,d1
    dbec:	|  |  |   move.b 1a85b <encode2>,d0
    dbf2:	|  |  |   add.b d1,d0
    dbf4:	|  |  |   move.b d0,1a85a <encode1>
    for (a = 0; a < len; a++) {
    dbfa:	|  |  |   addq.l #1,36(sp)
    dbfe:	|  |  \-> move.l 36(sp),d0
    dc02:	|  |      cmp.l 32(sp),d0
    dc06:	|  \----- blt.s dbae <readStringEncoded+0x52>
    }
    s[len] = 0;
    dc08:	|         move.l 32(sp),d0
    dc0c:	|         movea.l 16(sp),a0
    dc10:	|         adda.l d0,a0
    dc12:	|         clr.b (a0)
    return s;
    dc14:	|         move.l 16(sp),d0
}
    dc18:	\-------> move.l (sp)+,d2
    dc1a:	          movea.l (sp)+,a6
    dc1c:	          lea 32(sp),sp
    dc20:	          rts

0000dc22 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dc22:	             lea -104(sp),sp
    dc26:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    dc2a:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    dc2e:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    dc34:	             move.l 124(sp),106(sp)
    dc3a:	             clr.l 102(sp)
    dc3e:	             clr.l 98(sp)
    dc42:	             move.l 1a7ac <DOSBase>,d0
    dc48:	             movea.l d0,a6
    dc4a:	             move.l 106(sp),d1
    dc4e:	             move.l 102(sp),d2
    dc52:	             move.l 98(sp),d3
    dc56:	             jsr -66(a6)
    dc5a:	             move.l d0,94(sp)
    dc5e:	             move.l 94(sp),d0
    dc62:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    dc66:	   /-------- bra.s dcaa <readTextPlain+0x88>
        tmp = FGetC(fp);
    dc68:	/--|-------> move.l 124(sp),22(sp)
    dc6e:	|  |         move.l 1a7ac <DOSBase>,d0
    dc74:	|  |         movea.l d0,a6
    dc76:	|  |         move.l 22(sp),d1
    dc7a:	|  |         jsr -306(a6)
    dc7e:	|  |         move.l d0,18(sp)
    dc82:	|  |         move.l 18(sp),d0
    dc86:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    dc8a:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    dc90:	|  |         cmpi.b #10,17(sp)
    dc96:	|  |  /----- beq.s dca0 <readTextPlain+0x7e>
    dc98:	|  |  |      moveq #-1,d0
    dc9a:	|  |  |      cmp.l 110(sp),d0
    dc9e:	|  |  |  /-- bne.s dca6 <readTextPlain+0x84>
            keepGoing = FALSE;
    dca0:	|  |  \--|-> clr.w 114(sp)
    dca4:	|  +-----|-- bra.s dcaa <readTextPlain+0x88>
        } else {
            stringSize++;
    dca6:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    dcaa:	|  \-------> tst.w 114(sp)
    dcae:	\----------- bne.s dc68 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    dcb0:	             tst.l 116(sp)
    dcb4:	         /-- bne.s dcc4 <readTextPlain+0xa2>
    dcb6:	         |   moveq #-1,d0
    dcb8:	         |   cmp.l 110(sp),d0
    dcbc:	         +-- bne.s dcc4 <readTextPlain+0xa2>
        return NULL;
    dcbe:	         |   moveq #0,d0
    dcc0:	      /--|-- bra.w ddaa <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    dcc4:	      |  \-> move.l 124(sp),86(sp)
    dcca:	      |      move.l 90(sp),82(sp)
    dcd0:	      |      moveq #-1,d0
    dcd2:	      |      move.l d0,78(sp)
    dcd6:	      |      move.l 1a7ac <DOSBase>,d0
    dcdc:	      |      movea.l d0,a6
    dcde:	      |      move.l 86(sp),d1
    dce2:	      |      move.l 82(sp),d2
    dce6:	      |      move.l 78(sp),d3
    dcea:	      |      jsr -66(a6)
    dcee:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    dcf2:	      |      move.l 116(sp),d0
    dcf6:	      |      addq.l #1,d0
    dcf8:	      |      move.l d0,70(sp)
    dcfc:	      |      clr.l 66(sp)
    dd00:	      |      move.l 1a7a4 <SysBase>,d0
    dd06:	      |      movea.l d0,a6
    dd08:	      |      move.l 70(sp),d0
    dd0c:	      |      move.l 66(sp),d1
    dd10:	      |      jsr -684(a6)
    dd14:	      |      move.l d0,62(sp)
    dd18:	      |      move.l 62(sp),d0
    dd1c:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dd20:	      |  /-- bne.s dd28 <readTextPlain+0x106>
    dd22:	      |  |   moveq #0,d0
    dd24:	      +--|-- bra.w ddaa <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dd28:	      |  \-> move.l 124(sp),54(sp)
    dd2e:	      |      move.l 58(sp),50(sp)
    dd34:	      |      moveq #1,d0
    dd36:	      |      move.l d0,46(sp)
    dd3a:	      |      move.l 116(sp),42(sp)
    dd40:	      |      move.l 1a7ac <DOSBase>,d0
    dd46:	      |      movea.l d0,a6
    dd48:	      |      move.l 54(sp),d1
    dd4c:	      |      move.l 50(sp),d2
    dd50:	      |      move.l 46(sp),d3
    dd54:	      |      move.l 42(sp),d4
    dd58:	      |      jsr -324(a6)
    dd5c:	      |      move.l d0,38(sp)
    dd60:	      |      move.l 38(sp),d0
    dd64:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dd68:	      |      move.l 34(sp),d0
    dd6c:	      |      cmp.l 116(sp),d0
    dd70:	      |  /-- beq.s dd80 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    dd72:	      |  |   pea 19452 <PutChar+0x1948>
    dd78:	      |  |   jsr 17036 <KPrintF>
    dd7e:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    dd80:	      |  \-> move.l 124(sp),30(sp)
    dd86:	      |      move.l 1a7ac <DOSBase>,d0
    dd8c:	      |      movea.l d0,a6
    dd8e:	      |      move.l 30(sp),d1
    dd92:	      |      jsr -306(a6)
    dd96:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    dd9a:	      |      move.l 116(sp),d0
    dd9e:	      |      movea.l 58(sp),a0
    dda2:	      |      adda.l d0,a0
    dda4:	      |      clr.b (a0)
    }

    return reply;
    dda6:	      |      move.l 58(sp),d0
}
    ddaa:	      \----> movem.l (sp)+,d2-d4/a6
    ddae:	             lea 104(sp),sp
    ddb2:	             rts

0000ddb4 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    ddb4:	                      lea -144(sp),sp
    ddb8:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    ddbc:	                      move.l 160(sp),148(sp)
    ddc2:	                      move.l #1006,144(sp)
    ddca:	                      move.l 1a7ac <DOSBase>,d0
    ddd0:	                      movea.l d0,a6
    ddd2:	                      move.l 148(sp),d1
    ddd6:	                      move.l 144(sp),d2
    ddda:	                      jsr -30(a6)
    ddde:	                      move.l d0,140(sp)
    dde2:	                      move.l 140(sp),d0
    dde6:	                      move.l d0,136(sp)

    if (!fp) {
    ddea:	                  /-- bne.s de04 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    ddec:	                  |   move.l 160(sp),-(sp)
    ddf0:	                  |   pea 19473 <PutChar+0x1969>
    ddf6:	                  |   jsr 17036 <KPrintF>
    ddfc:	                  |   addq.l #8,sp
        return FALSE;
    ddfe:	                  |   clr.w d0
    de00:	/-----------------|-- bra.w e0c0 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    de04:	|                 \-> movea.l 164(sp),a0
    de08:	|                     movea.l 4(a0),a0
    de0c:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    de10:	|                     move.w 1a85c <saveEncoding>,d0
    de16:	|                     move.l d0,d0
    de18:	|                     move.b d0,1a85a <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    de1e:	|                     move.w 1a85c <saveEncoding>,d0
    de24:	|                     lsr.w #8,d0
    de26:	|                     move.l d0,d0
    de28:	|                     move.b d0,1a85b <encode2>

    if (saveEncoding) {
    de2e:	|                     move.w 1a85c <saveEncoding>,d0
    de34:	|                 /-- beq.s de86 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    de36:	|                 |   move.l 136(sp),116(sp)
    de3c:	|                 |   move.l #103181,112(sp)
    de44:	|                 |   moveq #99,d0
    de46:	|                 |   not.b d0
    de48:	|                 |   add.l sp,d0
    de4a:	|                 |   addi.l #-144,d0
    de50:	|                 |   move.l d0,108(sp)
    de54:	|                 |   move.l 1a7ac <DOSBase>,d0
    de5a:	|                 |   movea.l d0,a6
    de5c:	|                 |   move.l 116(sp),d1
    de60:	|                 |   move.l 112(sp),d2
    de64:	|                 |   move.l 108(sp),d3
    de68:	|                 |   jsr -354(a6)
    de6c:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    de70:	|                 |   move.l 136(sp),-(sp)
    de74:	|                 |   pea 1938c <PutChar+0x1882>
    de7a:	|                 |   jsr e0ca <writeStringEncoded>
    de80:	|                 |   addq.l #8,sp
    de82:	|  /--------------|-- bra.w e098 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    de86:	|  |              \-> move.l 136(sp),132(sp)
    de8c:	|  |                  move.l #103207,128(sp)
    de94:	|  |                  moveq #99,d1
    de96:	|  |                  not.b d1
    de98:	|  |                  add.l sp,d1
    de9a:	|  |                  addi.l #-144,d1
    dea0:	|  |                  move.l d1,124(sp)
    dea4:	|  |                  move.l 1a7ac <DOSBase>,d0
    deaa:	|  |                  movea.l d0,a6
    deac:	|  |                  move.l 132(sp),d1
    deb0:	|  |                  move.l 128(sp),d2
    deb4:	|  |                  move.l 124(sp),d3
    deb8:	|  |                  jsr -354(a6)
    debc:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    dec0:	|  +----------------- bra.w e098 <stackToFile+0x2e4>
        if (saveEncoding) {
    dec4:	|  |  /-------------> move.w 1a85c <saveEncoding>,d0
    deca:	|  |  |     /-------- beq.w e01c <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    dece:	|  |  |     |         movea.l 152(sp),a0
    ded2:	|  |  |     |         move.l (a0),d0
    ded4:	|  |  |     |         moveq #1,d1
    ded6:	|  |  |     |         cmp.l d0,d1
    ded8:	|  |  |     |     /-- beq.s df28 <stackToFile+0x174>
    deda:	|  |  |     |     |   moveq #3,d1
    dedc:	|  |  |     |     |   cmp.l d0,d1
    dede:	|  |  |     |  /--|-- bne.w dfea <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    dee2:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    dee8:	|  |  |     |  |  |   move.b 1a85a <encode1>,d0
    deee:	|  |  |     |  |  |   ext.w d0
    def0:	|  |  |     |  |  |   movea.w d0,a0
    def2:	|  |  |     |  |  |   move.l a0,72(sp)
    def6:	|  |  |     |  |  |   move.l 1a7ac <DOSBase>,d0
    defc:	|  |  |     |  |  |   movea.l d0,a6
    defe:	|  |  |     |  |  |   move.l 76(sp),d1
    df02:	|  |  |     |  |  |   move.l 72(sp),d2
    df06:	|  |  |     |  |  |   jsr -312(a6)
    df0a:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    df0e:	|  |  |     |  |  |   movea.l 152(sp),a0
    df12:	|  |  |     |  |  |   move.l 4(a0),d0
    df16:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    df1a:	|  |  |     |  |  |   move.l d0,-(sp)
    df1c:	|  |  |     |  |  |   jsr e0ca <writeStringEncoded>
    df22:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    df24:	|  |  |  /--|--|--|-- bra.w e08e <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    df28:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    df2c:	|  |  |  |  |  |      move.l 4(a0),d0
    df30:	|  |  |  |  |  |  /-- bmi.s dfa0 <stackToFile+0x1ec>
    df32:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    df36:	|  |  |  |  |  |  |   move.l 4(a0),d0
    df3a:	|  |  |  |  |  |  |   cmpi.l #255,d0
    df40:	|  |  |  |  |  |  +-- bgt.s dfa0 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    df42:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    df48:	|  |  |  |  |  |  |   move.b 1a85a <encode1>,d0
    df4e:	|  |  |  |  |  |  |   eori.b #2,d0
    df52:	|  |  |  |  |  |  |   ext.w d0
    df54:	|  |  |  |  |  |  |   movea.w d0,a0
    df56:	|  |  |  |  |  |  |   move.l a0,60(sp)
    df5a:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    df60:	|  |  |  |  |  |  |   movea.l d0,a6
    df62:	|  |  |  |  |  |  |   move.l 64(sp),d1
    df66:	|  |  |  |  |  |  |   move.l 60(sp),d2
    df6a:	|  |  |  |  |  |  |   jsr -312(a6)
    df6e:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    df72:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    df78:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    df7c:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    df82:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    df88:	|  |  |  |  |  |  |   movea.l d0,a6
    df8a:	|  |  |  |  |  |  |   move.l 52(sp),d1
    df8e:	|  |  |  |  |  |  |   move.l 48(sp),d2
    df92:	|  |  |  |  |  |  |   jsr -312(a6)
    df96:	|  |  |  |  |  |  |   move.l d0,44(sp)
    df9a:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    df9c:	|  |  |  +--|--|--|-- bra.w e08e <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    dfa0:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    dfa6:	|  |  |  |  |  |      move.b 1a85a <encode1>,d0
    dfac:	|  |  |  |  |  |      eori.b #1,d0
    dfb0:	|  |  |  |  |  |      ext.w d0
    dfb2:	|  |  |  |  |  |      movea.w d0,a0
    dfb4:	|  |  |  |  |  |      move.l a0,36(sp)
    dfb8:	|  |  |  |  |  |      move.l 1a7ac <DOSBase>,d0
    dfbe:	|  |  |  |  |  |      movea.l d0,a6
    dfc0:	|  |  |  |  |  |      move.l 40(sp),d1
    dfc4:	|  |  |  |  |  |      move.l 36(sp),d2
    dfc8:	|  |  |  |  |  |      jsr -312(a6)
    dfcc:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    dfd0:	|  |  |  |  |  |      movea.l 152(sp),a0
    dfd4:	|  |  |  |  |  |      move.l 4(a0),d0
    dfd8:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    dfdc:	|  |  |  |  |  |      move.l d0,-(sp)
    dfde:	|  |  |  |  |  |      jsr 958 <put4bytes>
    dfe4:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    dfe6:	|  |  |  +--|--|----- bra.w e08e <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    dfea:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    dfee:	|  |  |  |  |         pea 19485 <PutChar+0x197b>
    dff4:	|  |  |  |  |         jsr 17036 <KPrintF>
    dffa:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    dffc:	|  |  |  |  |         move.l 136(sp),28(sp)
    e002:	|  |  |  |  |         move.l 1a7ac <DOSBase>,d0
    e008:	|  |  |  |  |         movea.l d0,a6
    e00a:	|  |  |  |  |         move.l 28(sp),d1
    e00e:	|  |  |  |  |         jsr -36(a6)
    e012:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e016:	|  |  |  |  |         clr.w d0
    e018:	+--|--|--|--|-------- bra.w e0c0 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e01c:	|  |  |  |  \-------> move.l 152(sp),d0
    e020:	|  |  |  |            move.l d0,-(sp)
    e022:	|  |  |  |            jsr 14be4 <getTextFromAnyVar>
    e028:	|  |  |  |            addq.l #4,sp
    e02a:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e02e:	|  |  |  |     /----- beq.s e0a2 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e030:	|  |  |  |     |      movea.l 100(sp),a0
    e034:	|  |  |  |     |      move.b (a0),d0
    e036:	|  |  |  |     |      ext.w d0
    e038:	|  |  |  |     |      movea.w d0,a0
    e03a:	|  |  |  |     |      move.l a0,12(sp)
    e03e:	|  |  |  |     |      move.l 136(sp),96(sp)
    e044:	|  |  |  |     |      move.l #103649,92(sp)
    e04c:	|  |  |  |     |      moveq #99,d0
    e04e:	|  |  |  |     |      not.b d0
    e050:	|  |  |  |     |      add.l sp,d0
    e052:	|  |  |  |     |      addi.l #-144,d0
    e058:	|  |  |  |     |      move.l d0,88(sp)
    e05c:	|  |  |  |     |      move.l 1a7ac <DOSBase>,d0
    e062:	|  |  |  |     |      movea.l d0,a6
    e064:	|  |  |  |     |      move.l 96(sp),d1
    e068:	|  |  |  |     |      move.l 92(sp),d2
    e06c:	|  |  |  |     |      move.l 88(sp),d3
    e070:	|  |  |  |     |      jsr -354(a6)
    e074:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e078:	|  |  |  |     |      move.l 100(sp),80(sp)
    e07e:	|  |  |  |     |      move.l 1a7a4 <SysBase>,d0
    e084:	|  |  |  |     |      movea.l d0,a6
    e086:	|  |  |  |     |      movea.l 80(sp),a1
    e08a:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e08e:	|  |  |  \-----|----> movea.l 152(sp),a0
    e092:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e098:	|  \--|--------|----> tst.l 152(sp)
    e09c:	|     \--------|----- bne.w dec4 <stackToFile+0x110>
    e0a0:	|              |  /-- bra.s e0a4 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e0a2:	|              \--|-> nop
    }
    Close(fp);
    e0a4:	|                 \-> move.l 136(sp),20(sp)
    e0aa:	|                     move.l 1a7ac <DOSBase>,d0
    e0b0:	|                     movea.l d0,a6
    e0b2:	|                     move.l 20(sp),d1
    e0b6:	|                     jsr -36(a6)
    e0ba:	|                     move.l d0,16(sp)
    return TRUE;
    e0be:	|                     moveq #1,d0
}
    e0c0:	\-------------------> movem.l (sp)+,d2-d3/a6
    e0c4:	                      lea 144(sp),sp
    e0c8:	                      rts

0000e0ca <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e0ca:	       lea -20(sp),sp
    e0ce:	       move.l a6,-(sp)
    e0d0:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e0d2:	       move.l 32(sp),-(sp)
    e0d6:	       jsr 13afa <strlen>
    e0dc:	       addq.l #4,sp
    e0de:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e0e2:	       move.l 36(sp),-(sp)
    e0e6:	       move.l 24(sp),-(sp)
    e0ea:	       jsr 8d0 <put2bytes>
    e0f0:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e0f2:	       clr.l 24(sp)
    e0f6:	   /-- bra.s e14c <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e0f8:	/--|-> move.l 36(sp),16(sp)
    e0fe:	|  |   move.l 24(sp),d0
    e102:	|  |   movea.l 32(sp),a0
    e106:	|  |   adda.l d0,a0
    e108:	|  |   move.b (a0),d1
    e10a:	|  |   move.b 1a85a <encode1>,d0
    e110:	|  |   eor.b d1,d0
    e112:	|  |   ext.w d0
    e114:	|  |   movea.w d0,a0
    e116:	|  |   move.l a0,12(sp)
    e11a:	|  |   move.l 1a7ac <DOSBase>,d0
    e120:	|  |   movea.l d0,a6
    e122:	|  |   move.l 16(sp),d1
    e126:	|  |   move.l 12(sp),d2
    e12a:	|  |   jsr -312(a6)
    e12e:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e132:	|  |   move.b 1a85a <encode1>,d0
    e138:	|  |   move.b d0,d1
    e13a:	|  |   move.b 1a85b <encode2>,d0
    e140:	|  |   add.b d1,d0
    e142:	|  |   move.b d0,1a85a <encode1>
	for (a = 0; a < len; a ++) {
    e148:	|  |   addq.l #1,24(sp)
    e14c:	|  \-> move.l 24(sp),d0
    e150:	|      cmp.l 20(sp),d0
    e154:	\----- blt.s e0f8 <writeStringEncoded+0x2e>
	}
}
    e156:	       nop
    e158:	       nop
    e15a:	       move.l (sp)+,d2
    e15c:	       movea.l (sp)+,a6
    e15e:	       lea 20(sp),sp
    e162:	       rts

0000e164 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e164:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e166:	                   tst.l 8(sp)
    e16a:	               /-- bne.s e170 <failSecurityCheck+0xc>
    e16c:	               |   moveq #1,d0
    e16e:	/--------------|-- bra.s e1ee <failSecurityCheck+0x8a>

	int a = 0;
    e170:	|              \-> clr.l (sp)

	while (fn[a]) {
    e172:	|     /----------- bra.s e1e0 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e174:	|  /--|----------> move.l (sp),d0
    e176:	|  |  |            movea.l 8(sp),a0
    e17a:	|  |  |            adda.l d0,a0
    e17c:	|  |  |            move.b (a0),d0
    e17e:	|  |  |            ext.w d0
    e180:	|  |  |            movea.w d0,a0
    e182:	|  |  |            moveq #124,d0
    e184:	|  |  |            cmp.l a0,d0
    e186:	|  |  |     /----- beq.s e1c8 <failSecurityCheck+0x64>
    e188:	|  |  |     |      moveq #124,d1
    e18a:	|  |  |     |      cmp.l a0,d1
    e18c:	|  |  |  /--|----- blt.s e1de <failSecurityCheck+0x7a>
    e18e:	|  |  |  |  |      moveq #92,d0
    e190:	|  |  |  |  |      cmp.l a0,d0
    e192:	|  |  |  |  +----- beq.s e1c8 <failSecurityCheck+0x64>
    e194:	|  |  |  |  |      moveq #92,d1
    e196:	|  |  |  |  |      cmp.l a0,d1
    e198:	|  |  |  +--|----- blt.s e1de <failSecurityCheck+0x7a>
    e19a:	|  |  |  |  |      moveq #60,d0
    e19c:	|  |  |  |  |      cmp.l a0,d0
    e19e:	|  |  |  |  |  /-- blt.s e1be <failSecurityCheck+0x5a>
    e1a0:	|  |  |  |  |  |   moveq #34,d1
    e1a2:	|  |  |  |  |  |   cmp.l a0,d1
    e1a4:	|  |  |  +--|--|-- bgt.s e1de <failSecurityCheck+0x7a>
    e1a6:	|  |  |  |  |  |   moveq #-34,d1
    e1a8:	|  |  |  |  |  |   add.l a0,d1
    e1aa:	|  |  |  |  |  |   move.l #83894529,d0
    e1b0:	|  |  |  |  |  |   lsr.l d1,d0
    e1b2:	|  |  |  |  |  |   moveq #1,d1
    e1b4:	|  |  |  |  |  |   and.l d1,d0
    e1b6:	|  |  |  |  |  |   sne d0
    e1b8:	|  |  |  |  |  |   neg.b d0
    e1ba:	|  |  |  |  +--|-- bne.s e1c8 <failSecurityCheck+0x64>
    e1bc:	|  |  |  +--|--|-- bra.s e1de <failSecurityCheck+0x7a>
    e1be:	|  |  |  |  |  \-> lea -62(a0),a0
    e1c2:	|  |  |  |  |      moveq #1,d0
    e1c4:	|  |  |  |  |      cmp.l a0,d0
    e1c6:	|  |  |  +--|----- bcs.s e1de <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e1c8:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e1cc:	|  |  |  |         pea 194e5 <PutChar+0x19db>
    e1d2:	|  |  |  |         jsr 17036 <KPrintF>
    e1d8:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e1da:	|  |  |  |         moveq #1,d0
    e1dc:	+--|--|--|-------- bra.s e1ee <failSecurityCheck+0x8a>
		}
		a++;
    e1de:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e1e0:	|  |  \----------> move.l (sp),d0
    e1e2:	|  |               movea.l 8(sp),a0
    e1e6:	|  |               adda.l d0,a0
    e1e8:	|  |               move.b (a0),d0
    e1ea:	|  \-------------- bne.s e174 <failSecurityCheck+0x10>
	}
	return FALSE;
    e1ec:	|                  clr.w d0
}
    e1ee:	\----------------> addq.l #4,sp
    e1f0:	                   rts

0000e1f2 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e1f2:	             lea -24(sp),sp
    e1f6:	             move.l a6,-(sp)
    e1f8:	             move.l 40(sp),d0
    e1fc:	             move.w d0,d0
    e1fe:	             move.w d0,6(sp)
	int fileNum = -1;
    e202:	             moveq #-1,d0
    e204:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e208:	             jsr 6134 <killSpeechTimers>

	switch (numParams) {
    e20e:	             moveq #2,d0
    e210:	             cmp.l 32(sp),d0
    e214:	      /----- beq.s e258 <sayCore+0x66>
    e216:	      |      moveq #3,d0
    e218:	      |      cmp.l 32(sp),d0
    e21c:	/-----|----- bne.w e33a <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e220:	|     |      movea.l 36(sp),a0
    e224:	|     |      move.l 24(a0),d0
    e228:	|     |      move.l d0,-(sp)
    e22a:	|     |      pea 5 <_start+0x5>
    e22e:	|     |      lea 20(sp),a0
    e232:	|     |      move.l a0,-(sp)
    e234:	|     |      jsr 1460e <getValueType>
    e23a:	|     |      lea 12(sp),sp
    e23e:	|     |      tst.w d0
    e240:	|     |  /-- bne.s e248 <sayCore+0x56>
    e242:	|     |  |   moveq #1,d0
    e244:	|  /--|--|-- bra.w e34a <sayCore+0x158>
			trimStack (&fun -> stack);
    e248:	|  |  |  \-> moveq #24,d0
    e24a:	|  |  |      add.l 36(sp),d0
    e24e:	|  |  |      move.l d0,-(sp)
    e250:	|  |  |      jsr 14f92 <trimStack>
    e256:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e258:	|  |  \----> movea.l 36(sp),a0
    e25c:	|  |         move.l 24(a0),d0
    e260:	|  |         move.l d0,-(sp)
    e262:	|  |         jsr 14be4 <getTextFromAnyVar>
    e268:	|  |         addq.l #4,sp
    e26a:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e26e:	|  |     /-- bne.s e276 <sayCore+0x84>
    e270:	|  |     |   moveq #1,d0
    e272:	|  +-----|-- bra.w e34a <sayCore+0x158>
			trimStack (&fun -> stack);
    e276:	|  |     \-> moveq #24,d0
    e278:	|  |         add.l 36(sp),d0
    e27c:	|  |         move.l d0,-(sp)
    e27e:	|  |         jsr 14f92 <trimStack>
    e284:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e286:	|  |         movea.l 36(sp),a0
    e28a:	|  |         move.l 24(a0),d0
    e28e:	|  |         move.l d0,-(sp)
    e290:	|  |         pea 7 <_start+0x7>
    e294:	|  |         lea 16(sp),a0
    e298:	|  |         move.l a0,-(sp)
    e29a:	|  |         jsr 1460e <getValueType>
    e2a0:	|  |         lea 12(sp),sp
    e2a4:	|  |         tst.w d0
    e2a6:	|  |     /-- bne.s e2ae <sayCore+0xbc>
    e2a8:	|  |     |   moveq #1,d0
    e2aa:	|  +-----|-- bra.w e34a <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e2ae:	|  |     \-> movea.l 36(sp),a0
    e2b2:	|  |         move.l 24(a0),d0
    e2b6:	|  |         move.l d0,-(sp)
    e2b8:	|  |         pea 7 <_start+0x7>
    e2bc:	|  |         lea 16(sp),a0
    e2c0:	|  |         move.l a0,-(sp)
    e2c2:	|  |         jsr 1460e <getValueType>
    e2c8:	|  |         lea 12(sp),sp
    e2cc:	|  |         tst.w d0
    e2ce:	|  |     /-- bne.s e2d4 <sayCore+0xe2>
    e2d0:	|  |     |   moveq #1,d0
    e2d2:	|  +-----|-- bra.s e34a <sayCore+0x158>
			trimStack (&fun -> stack);
    e2d4:	|  |     \-> moveq #24,d0
    e2d6:	|  |         add.l 36(sp),d0
    e2da:	|  |         move.l d0,-(sp)
    e2dc:	|  |         jsr 14f92 <trimStack>
    e2e2:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e2e4:	|  |         movea.w 6(sp),a0
    e2e8:	|  |         move.l 12(sp),d1
    e2ec:	|  |         move.l 8(sp),d0
    e2f0:	|  |         move.l a0,-(sp)
    e2f2:	|  |         move.l d1,-(sp)
    e2f4:	|  |         move.l d0,-(sp)
    e2f6:	|  |         move.l 36(sp),-(sp)
    e2fa:	|  |         jsr 80ee <wrapSpeech>
    e300:	|  |         lea 16(sp),sp
    e304:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e308:	|  |         movea.l 36(sp),a0
    e30c:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e312:	|  |         movea.l 36(sp),a0
    e316:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e31c:	|  |         move.l 24(sp),16(sp)
    e322:	|  |         move.l 1a7a4 <SysBase>,d0
    e328:	|  |         movea.l d0,a6
    e32a:	|  |         movea.l 16(sp),a1
    e32e:	|  |         jsr -690(a6)
			newText = NULL;
    e332:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e336:	|  |         moveq #0,d0
    e338:	|  +-------- bra.s e34a <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e33a:	\--|-------> pea 1956b <PutChar+0x1a61>
    e340:	   |         jsr 17036 <KPrintF>
    e346:	   |         addq.l #4,sp
	return BR_ERROR;
    e348:	   |         moveq #1,d0
}
    e34a:	   \-------> movea.l (sp)+,a6
    e34c:	             lea 24(sp),sp
    e350:	             rts

0000e352 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e352:	pea 1 <_start+0x1>
    e356:	move.l 12(sp),-(sp)
    e35a:	move.l 12(sp),-(sp)
    e35e:	jsr e1f2 <sayCore>
    e364:	lea 12(sp),sp
}
    e368:	rts

0000e36a <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e36a:	clr.l -(sp)
    e36c:	move.l 12(sp),-(sp)
    e370:	move.l 12(sp),-(sp)
    e374:	jsr e1f2 <sayCore>
    e37a:	lea 12(sp),sp
}
    e37e:	rts

0000e380 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e380:	jsr 14fda <freeze>
	freezeSubs (); 
    e386:	jsr 5724 <freezeSubs>
	fun -> freezerLevel = 0;
    e38c:	movea.l 8(sp),a0
    e390:	clr.b 56(a0)
	return BR_CONTINUE;
    e394:	moveq #2,d0
}
    e396:	rts

0000e398 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e398:	jsr 151b2 <unfreeze>
	unfreezeSubs (); 
    e39e:	jsr 6b76 <unfreezeSubs>
	return BR_CONTINUE;
    e3a4:	moveq #2,d0
}
    e3a6:	rts

0000e3a8 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    e3a8:	nop
    e3aa:	rts

0000e3ac <builtIn_setCursor>:

builtIn(setCursor)
{
    e3ac:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e3ae:	movea.l 12(sp),a0
    e3b2:	move.l 24(a0),d0
    e3b6:	move.l d0,-(sp)
    e3b8:	jsr 14ae6 <getAnimationFromVar>
    e3be:	addq.l #4,sp
    e3c0:	move.l d0,(sp)
	pickAnimCursor (aa);
    e3c2:	move.l (sp),-(sp)
    e3c4:	jsr d6c <pickAnimCursor>
    e3ca:	addq.l #4,sp
	trimStack (&fun -> stack);
    e3cc:	moveq #24,d0
    e3ce:	add.l 12(sp),d0
    e3d2:	move.l d0,-(sp)
    e3d4:	jsr 14f92 <trimStack>
    e3da:	addq.l #4,sp
	return BR_CONTINUE;
    e3dc:	moveq #2,d0
}
    e3de:	addq.l #4,sp
    e3e0:	rts

0000e3e2 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e3e2:	move.l 1a760 <input+0xa>,d1
    e3e8:	move.l 1a85e <cameraX>,d0
    e3ee:	add.l d0,d1
    e3f0:	moveq #28,d0
    e3f2:	add.l 8(sp),d0
    e3f6:	move.l d1,-(sp)
    e3f8:	pea 1 <_start+0x1>
    e3fc:	move.l d0,-(sp)
    e3fe:	jsr 14f00 <setVariable>
    e404:	lea 12(sp),sp
	return BR_CONTINUE;
    e408:	moveq #2,d0
}
    e40a:	rts

0000e40c <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e40c:	move.l 1a764 <input+0xe>,d1
    e412:	move.l 1a862 <cameraY>,d0
    e418:	add.l d0,d1
    e41a:	moveq #28,d0
    e41c:	add.l 8(sp),d0
    e420:	move.l d1,-(sp)
    e422:	pea 1 <_start+0x1>
    e426:	move.l d0,-(sp)
    e428:	jsr 14f00 <setVariable>
    e42e:	lea 12(sp),sp
	return BR_CONTINUE;
    e432:	moveq #2,d0
}
    e434:	rts

0000e436 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e436:	move.l 1a760 <input+0xa>,d0
    e43c:	move.l d0,-(sp)
    e43e:	jsr 17472 <__floatsisf>
    e444:	addq.l #4,sp
    e446:	move.l d0,d1
    e448:	move.l 1a142 <cameraZoom>,d0
    e44e:	move.l d0,-(sp)
    e450:	move.l d1,-(sp)
    e452:	jsr 17524 <__mulsf3>
    e458:	addq.l #8,sp
    e45a:	move.l d0,-(sp)
    e45c:	jsr 1740a <__fixsfsi>
    e462:	addq.l #4,sp
    e464:	move.l d0,d1
    e466:	moveq #28,d0
    e468:	add.l 8(sp),d0
    e46c:	move.l d1,-(sp)
    e46e:	pea 1 <_start+0x1>
    e472:	move.l d0,-(sp)
    e474:	jsr 14f00 <setVariable>
    e47a:	lea 12(sp),sp
	return BR_CONTINUE;
    e47e:	moveq #2,d0
}
    e480:	rts

0000e482 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e482:	move.l 1a764 <input+0xe>,d0
    e488:	move.l d0,-(sp)
    e48a:	jsr 17472 <__floatsisf>
    e490:	addq.l #4,sp
    e492:	move.l d0,d1
    e494:	move.l 1a142 <cameraZoom>,d0
    e49a:	move.l d0,-(sp)
    e49c:	move.l d1,-(sp)
    e49e:	jsr 17524 <__mulsf3>
    e4a4:	addq.l #8,sp
    e4a6:	move.l d0,-(sp)
    e4a8:	jsr 1740a <__fixsfsi>
    e4ae:	addq.l #4,sp
    e4b0:	move.l d0,d1
    e4b2:	moveq #28,d0
    e4b4:	add.l 8(sp),d0
    e4b8:	move.l d1,-(sp)
    e4ba:	pea 1 <_start+0x1>
    e4be:	move.l d0,-(sp)
    e4c0:	jsr 14f00 <setVariable>
    e4c6:	lea 12(sp),sp
	return BR_CONTINUE;
    e4ca:	moveq #2,d0
}
    e4cc:	rts

0000e4ce <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e4ce:	jsr 7ba2 <statusBarText>
    e4d4:	move.l d0,d1
    e4d6:	moveq #28,d0
    e4d8:	add.l 8(sp),d0
    e4dc:	move.l d1,-(sp)
    e4de:	move.l d0,-(sp)
    e4e0:	jsr 14830 <makeTextVar>
    e4e6:	addq.l #8,sp
	return BR_CONTINUE;
    e4e8:	moveq #2,d0
}
    e4ea:	rts

0000e4ec <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e4ec:	       lea -20(sp),sp
    e4f0:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e4f2:	       movea.l 32(sp),a0
    e4f6:	       move.l 24(a0),d0
    e4fa:	       move.l d0,-(sp)
    e4fc:	       jsr 14be4 <getTextFromAnyVar>
    e502:	       addq.l #4,sp
    e504:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e508:	   /-- bne.s e510 <builtIn_getMatchingFiles+0x24>
    e50a:	   |   moveq #1,d0
    e50c:	/--|-- bra.w e5d2 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e510:	|  \-> moveq #24,d0
    e512:	|      add.l 32(sp),d0
    e516:	|      move.l d0,-(sp)
    e518:	|      jsr 14f92 <trimStack>
    e51e:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e520:	|      moveq #28,d0
    e522:	|      add.l 32(sp),d0
    e526:	|      move.l d0,-(sp)
    e528:	|      jsr 1485c <unlinkVar>
    e52e:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e530:	|      movea.l 32(sp),a0
    e534:	|      moveq #6,d0
    e536:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e53a:	|      moveq #12,d0
    e53c:	|      move.l d0,16(sp)
    e540:	|      clr.l 12(sp)
    e544:	|      move.l 1a7a4 <SysBase>,d0
    e54a:	|      movea.l d0,a6
    e54c:	|      move.l 16(sp),d0
    e550:	|      move.l 12(sp),d1
    e554:	|      jsr -684(a6)
    e558:	|      move.l d0,8(sp)
    e55c:	|      move.l 8(sp),d0
    e560:	|      movea.l 32(sp),a0
    e564:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e568:	|      moveq #32,d0
    e56a:	|      add.l 32(sp),d0
    e56e:	|  /-- bne.s e574 <builtIn_getMatchingFiles+0x88>
    e570:	|  |   moveq #1,d0
    e572:	+--|-- bra.s e5d2 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e574:	|  \-> movea.l 32(sp),a0
    e578:	|      movea.l 32(a0),a0
    e57c:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e57e:	|      movea.l 32(sp),a0
    e582:	|      movea.l 32(a0),a0
    e586:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e58a:	|      movea.l 32(sp),a0
    e58e:	|      movea.l 32(a0),a0
    e592:	|      moveq #1,d0
    e594:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e598:	|      movea.l 32(sp),a0
    e59c:	|      move.l 32(a0),d0
    e5a0:	|      move.l 20(sp),-(sp)
    e5a4:	|      move.l d0,-(sp)
    e5a6:	|      jsr 143ca <getSavedGamesStack>
    e5ac:	|      addq.l #8,sp
    e5ae:	|      tst.w d0
    e5b0:	|  /-- bne.s e5b6 <builtIn_getMatchingFiles+0xca>
    e5b2:	|  |   moveq #1,d0
    e5b4:	+--|-- bra.s e5d2 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e5b6:	|  \-> move.l 20(sp),4(sp)
    e5bc:	|      move.l 1a7a4 <SysBase>,d0
    e5c2:	|      movea.l d0,a6
    e5c4:	|      movea.l 4(sp),a1
    e5c8:	|      jsr -690(a6)
	newText = NULL;
    e5cc:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e5d0:	|      moveq #2,d0
}
    e5d2:	\----> movea.l (sp)+,a6
    e5d4:	       lea 20(sp),sp
    e5d8:	       rts

0000e5da <builtIn_saveGame>:

builtIn(saveGame)
{
    e5da:	       lea -12(sp),sp
    e5de:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e5e0:	       movea.l 24(sp),a0
    e5e4:	       move.l 24(a0),d0
    e5e8:	       move.l d0,-(sp)
    e5ea:	       jsr 14be4 <getTextFromAnyVar>
    e5f0:	       addq.l #4,sp
    e5f2:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    e5f8:	       moveq #24,d0
    e5fa:	       add.l 24(sp),d0
    e5fe:	       move.l d0,-(sp)
    e600:	       jsr 14f92 <trimStack>
    e606:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e608:	       move.l 1a770 <loadNow>,d0
    e60e:	       move.l d0,-(sp)
    e610:	       jsr 2fe <encodeFilename>
    e616:	       addq.l #4,sp
    e618:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e61c:	       move.l 1a770 <loadNow>,8(sp)
    e624:	       move.l 1a7a4 <SysBase>,d0
    e62a:	       movea.l d0,a6
    e62c:	       movea.l 8(sp),a1
    e630:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e634:	       move.l 12(sp),-(sp)
    e638:	       jsr e164 <failSecurityCheck>
    e63e:	       addq.l #4,sp
    e640:	       tst.w d0
    e642:	   /-- beq.s e648 <builtIn_saveGame+0x6e>
    e644:	   |   moveq #1,d0
    e646:	/--|-- bra.s e698 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e648:	|  \-> move.l 12(sp),-(sp)
    e64c:	|      pea 19599 <PutChar+0x1a8f>
    e652:	|      jsr 13b3a <joinStrings>
    e658:	|      addq.l #8,sp
    e65a:	|      move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e660:	|      move.l 12(sp),4(sp)
    e666:	|      move.l 1a7a4 <SysBase>,d0
    e66c:	|      movea.l d0,a6
    e66e:	|      movea.l 4(sp),a1
    e672:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e676:	|      moveq #28,d0
    e678:	|      add.l 24(sp),d0
    e67c:	|      clr.l -(sp)
    e67e:	|      pea 1 <_start+0x1>
    e682:	|      move.l d0,-(sp)
    e684:	|      jsr 14f00 <setVariable>
    e68a:	|      lea 12(sp),sp
    saverFunc = fun;
    e68e:	|      move.l 24(sp),1a86e <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e696:	|      moveq #0,d0
}
    e698:	\----> movea.l (sp)+,a6
    e69a:	       lea 12(sp),sp
    e69e:	       rts

0000e6a0 <builtIn_fileExists>:

builtIn(fileExists)
{
    e6a0:	       lea -36(sp),sp
    e6a4:	       move.l a6,-(sp)
    e6a6:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e6a8:	       movea.l 52(sp),a0
    e6ac:	       move.l 24(a0),d0
    e6b0:	       move.l d0,-(sp)
    e6b2:	       jsr 14be4 <getTextFromAnyVar>
    e6b8:	       addq.l #4,sp
    e6ba:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    e6c0:	       moveq #24,d0
    e6c2:	       add.l 52(sp),d0
    e6c6:	       move.l d0,-(sp)
    e6c8:	       jsr 14f92 <trimStack>
    e6ce:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e6d0:	       move.l 1a770 <loadNow>,d0
    e6d6:	       move.l d0,-(sp)
    e6d8:	       jsr 2fe <encodeFilename>
    e6de:	       addq.l #4,sp
    e6e0:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e6e4:	       move.l 1a770 <loadNow>,36(sp)
    e6ec:	       move.l 1a7a4 <SysBase>,d0
    e6f2:	       movea.l d0,a6
    e6f4:	       movea.l 36(sp),a1
    e6f8:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e6fc:	       move.l 40(sp),-(sp)
    e700:	       jsr e164 <failSecurityCheck>
    e706:	       addq.l #4,sp
    e708:	       tst.w d0
    e70a:	   /-- beq.s e712 <builtIn_fileExists+0x72>
    e70c:	   |   moveq #1,d0
    e70e:	/--|-- bra.w e7b2 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e712:	|  \-> move.l 40(sp),32(sp)
    e718:	|      move.l #1005,28(sp)
    e720:	|      move.l 1a7ac <DOSBase>,d0
    e726:	|      movea.l d0,a6
    e728:	|      move.l 32(sp),d1
    e72c:	|      move.l 28(sp),d2
    e730:	|      jsr -30(a6)
    e734:	|      move.l d0,24(sp)
    e738:	|      move.l 24(sp),d0
    e73c:	|      move.l d0,20(sp)
    if (!fp) {        
    e740:	|  /-- bne.s e750 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e742:	|  |   pea 1959b <PutChar+0x1a91>
    e748:	|  |   jsr 17036 <KPrintF>
    e74e:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e750:	|  \-> tst.l 20(sp)
    e754:	|      sne d0
    e756:	|      neg.b d0
    e758:	|      moveq #0,d1
    e75a:	|      move.b d0,d1
    e75c:	|      moveq #28,d0
    e75e:	|      add.l 52(sp),d0
    e762:	|      move.l d1,-(sp)
    e764:	|      pea 1 <_start+0x1>
    e768:	|      move.l d0,-(sp)
    e76a:	|      jsr 14f00 <setVariable>
    e770:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e774:	|      tst.l 20(sp)
    e778:	|  /-- beq.s e794 <builtIn_fileExists+0xf4>
    e77a:	|  |   move.l 20(sp),16(sp)
    e780:	|  |   move.l 1a7ac <DOSBase>,d0
    e786:	|  |   movea.l d0,a6
    e788:	|  |   move.l 16(sp),d1
    e78c:	|  |   jsr -36(a6)
    e790:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e794:	|  \-> move.l 40(sp),8(sp)
    e79a:	|      move.l 1a7a4 <SysBase>,d0
    e7a0:	|      movea.l d0,a6
    e7a2:	|      movea.l 8(sp),a1
    e7a6:	|      jsr -690(a6)
    loadNow = NULL;
    e7aa:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e7b0:	|      moveq #2,d0
}
    e7b2:	\----> move.l (sp)+,d2
    e7b4:	       movea.l (sp)+,a6
    e7b6:	       lea 36(sp),sp
    e7ba:	       rts

0000e7bc <builtIn_loadGame>:

builtIn(loadGame)
{
    e7bc:	       lea -36(sp),sp
    e7c0:	       move.l a6,-(sp)
    e7c2:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e7c4:	       movea.l 52(sp),a0
    e7c8:	       move.l 24(a0),d0
    e7cc:	       move.l d0,-(sp)
    e7ce:	       jsr 14be4 <getTextFromAnyVar>
    e7d4:	       addq.l #4,sp
    e7d6:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e7da:	       moveq #24,d0
    e7dc:	       add.l 52(sp),d0
    e7e0:	       move.l d0,-(sp)
    e7e2:	       jsr 14f92 <trimStack>
    e7e8:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e7ea:	       move.l 40(sp),-(sp)
    e7ee:	       jsr 2fe <encodeFilename>
    e7f4:	       addq.l #4,sp
    e7f6:	       move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e7fc:	       move.l 40(sp),36(sp)
    e802:	       move.l 1a7a4 <SysBase>,d0
    e808:	       movea.l d0,a6
    e80a:	       movea.l 36(sp),a1
    e80e:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e812:	       move.l 1a770 <loadNow>,d0
    e818:	       move.l d0,-(sp)
    e81a:	       jsr e164 <failSecurityCheck>
    e820:	       addq.l #4,sp
    e822:	       tst.w d0
    e824:	   /-- beq.s e82a <builtIn_loadGame+0x6e>
    e826:	   |   moveq #1,d0
    e828:	/--|-- bra.s e89a <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e82a:	|  \-> move.l 1a770 <loadNow>,32(sp)
    e832:	|      move.l #1005,28(sp)
    e83a:	|      move.l 1a7ac <DOSBase>,d0
    e840:	|      movea.l d0,a6
    e842:	|      move.l 32(sp),d1
    e846:	|      move.l 28(sp),d2
    e84a:	|      jsr -30(a6)
    e84e:	|      move.l d0,24(sp)
    e852:	|      move.l 24(sp),d0
    e856:	|      move.l d0,20(sp)
    if (fp) {
    e85a:	|  /-- beq.s e87a <builtIn_loadGame+0xbe>
        Close(fp);
    e85c:	|  |   move.l 20(sp),12(sp)
    e862:	|  |   move.l 1a7ac <DOSBase>,d0
    e868:	|  |   movea.l d0,a6
    e86a:	|  |   move.l 12(sp),d1
    e86e:	|  |   jsr -36(a6)
    e872:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e876:	|  |   moveq #0,d0
    e878:	+--|-- bra.s e89a <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e87a:	|  \-> move.l 1a770 <loadNow>,16(sp)
    e882:	|      move.l 1a7a4 <SysBase>,d0
    e888:	|      movea.l d0,a6
    e88a:	|      movea.l 16(sp),a1
    e88e:	|      jsr -690(a6)
    loadNow = NULL;
    e892:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e898:	|      moveq #2,d0
}
    e89a:	\----> move.l (sp)+,d2
    e89c:	       movea.l (sp)+,a6
    e89e:	       lea 36(sp),sp
    e8a2:	       rts

0000e8a4 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e8a4:	move.l 1a844 <sceneHeight>,d0
    e8aa:	move.l d0,d1
    e8ac:	move.l 1a840 <sceneWidth>,d0
    e8b2:	move.l d1,-(sp)
    e8b4:	move.l d0,-(sp)
    e8b6:	clr.l -(sp)
    e8b8:	clr.l -(sp)
    e8ba:	jsr d058 <blankScreen>
    e8c0:	lea 16(sp),sp
	return BR_CONTINUE;
    e8c4:	moveq #2,d0
}
    e8c6:	rts

0000e8c8 <builtIn_blankArea>:

builtIn(blankArea)
{
    e8c8:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e8cc:	       movea.l 24(sp),a0
    e8d0:	       move.l 24(a0),d0
    e8d4:	       move.l d0,-(sp)
    e8d6:	       pea 1 <_start+0x1>
    e8da:	       lea 8(sp),a0
    e8de:	       move.l a0,-(sp)
    e8e0:	       jsr 1460e <getValueType>
    e8e6:	       lea 12(sp),sp
    e8ea:	       tst.w d0
    e8ec:	   /-- bne.s e8f4 <builtIn_blankArea+0x2c>
    e8ee:	   |   moveq #1,d0
    e8f0:	/--|-- bra.w e9ca <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e8f4:	|  \-> moveq #24,d0
    e8f6:	|      add.l 24(sp),d0
    e8fa:	|      move.l d0,-(sp)
    e8fc:	|      jsr 14f92 <trimStack>
    e902:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e904:	|      movea.l 24(sp),a0
    e908:	|      move.l 24(a0),d0
    e90c:	|      move.l d0,-(sp)
    e90e:	|      pea 1 <_start+0x1>
    e912:	|      lea 12(sp),a0
    e916:	|      move.l a0,-(sp)
    e918:	|      jsr 1460e <getValueType>
    e91e:	|      lea 12(sp),sp
    e922:	|      tst.w d0
    e924:	|  /-- bne.s e92c <builtIn_blankArea+0x64>
    e926:	|  |   moveq #1,d0
    e928:	+--|-- bra.w e9ca <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e92c:	|  \-> moveq #24,d0
    e92e:	|      add.l 24(sp),d0
    e932:	|      move.l d0,-(sp)
    e934:	|      jsr 14f92 <trimStack>
    e93a:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e93c:	|      movea.l 24(sp),a0
    e940:	|      move.l 24(a0),d0
    e944:	|      move.l d0,-(sp)
    e946:	|      pea 1 <_start+0x1>
    e94a:	|      moveq #16,d0
    e94c:	|      add.l sp,d0
    e94e:	|      move.l d0,-(sp)
    e950:	|      jsr 1460e <getValueType>
    e956:	|      lea 12(sp),sp
    e95a:	|      tst.w d0
    e95c:	|  /-- bne.s e962 <builtIn_blankArea+0x9a>
    e95e:	|  |   moveq #1,d0
    e960:	+--|-- bra.s e9ca <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e962:	|  \-> moveq #24,d0
    e964:	|      add.l 24(sp),d0
    e968:	|      move.l d0,-(sp)
    e96a:	|      jsr 14f92 <trimStack>
    e970:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e972:	|      movea.l 24(sp),a0
    e976:	|      move.l 24(a0),d0
    e97a:	|      move.l d0,-(sp)
    e97c:	|      pea 1 <_start+0x1>
    e980:	|      moveq #20,d0
    e982:	|      add.l sp,d0
    e984:	|      move.l d0,-(sp)
    e986:	|      jsr 1460e <getValueType>
    e98c:	|      lea 12(sp),sp
    e990:	|      tst.w d0
    e992:	|  /-- bne.s e998 <builtIn_blankArea+0xd0>
    e994:	|  |   moveq #1,d0
    e996:	+--|-- bra.s e9ca <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e998:	|  \-> moveq #24,d0
    e99a:	|      add.l 24(sp),d0
    e99e:	|      move.l d0,-(sp)
    e9a0:	|      jsr 14f92 <trimStack>
    e9a6:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    e9a8:	|      movea.l (sp),a1
    e9aa:	|      movea.l 4(sp),a0
    e9ae:	|      move.l 8(sp),d1
    e9b2:	|      move.l 12(sp),d0
    e9b6:	|      move.l a1,-(sp)
    e9b8:	|      move.l a0,-(sp)
    e9ba:	|      move.l d1,-(sp)
    e9bc:	|      move.l d0,-(sp)
    e9be:	|      jsr d058 <blankScreen>
    e9c4:	|      lea 16(sp),sp
	return BR_CONTINUE;
    e9c8:	|      moveq #2,d0
}
    e9ca:	\----> lea 16(sp),sp
    e9ce:	       rts

0000e9d0 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    e9d0:	jsr d06c <darkScreen>
	return BR_CONTINUE;
    e9d6:	moveq #2,d0
}
    e9d8:	rts

0000e9da <builtIn_addOverlay>:

builtIn(addOverlay)
{
    e9da:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9de:	       movea.l 20(sp),a0
    e9e2:	       move.l 24(a0),d0
    e9e6:	       move.l d0,-(sp)
    e9e8:	       pea 1 <_start+0x1>
    e9ec:	       lea 8(sp),a0
    e9f0:	       move.l a0,-(sp)
    e9f2:	       jsr 1460e <getValueType>
    e9f8:	       lea 12(sp),sp
    e9fc:	       tst.w d0
    e9fe:	   /-- bne.s ea06 <builtIn_addOverlay+0x2c>
    ea00:	   |   moveq #1,d0
    ea02:	/--|-- bra.w ea9e <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea06:	|  \-> moveq #24,d0
    ea08:	|      add.l 20(sp),d0
    ea0c:	|      move.l d0,-(sp)
    ea0e:	|      jsr 14f92 <trimStack>
    ea14:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea16:	|      movea.l 20(sp),a0
    ea1a:	|      move.l 24(a0),d0
    ea1e:	|      move.l d0,-(sp)
    ea20:	|      pea 1 <_start+0x1>
    ea24:	|      moveq #12,d0
    ea26:	|      add.l sp,d0
    ea28:	|      move.l d0,-(sp)
    ea2a:	|      jsr 1460e <getValueType>
    ea30:	|      lea 12(sp),sp
    ea34:	|      tst.w d0
    ea36:	|  /-- bne.s ea3c <builtIn_addOverlay+0x62>
    ea38:	|  |   moveq #1,d0
    ea3a:	+--|-- bra.s ea9e <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea3c:	|  \-> moveq #24,d0
    ea3e:	|      add.l 20(sp),d0
    ea42:	|      move.l d0,-(sp)
    ea44:	|      jsr 14f92 <trimStack>
    ea4a:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea4c:	|      movea.l 20(sp),a0
    ea50:	|      move.l 24(a0),d0
    ea54:	|      move.l d0,-(sp)
    ea56:	|      pea 5 <_start+0x5>
    ea5a:	|      moveq #16,d0
    ea5c:	|      add.l sp,d0
    ea5e:	|      move.l d0,-(sp)
    ea60:	|      jsr 1460e <getValueType>
    ea66:	|      lea 12(sp),sp
    ea6a:	|      tst.w d0
    ea6c:	|  /-- bne.s ea72 <builtIn_addOverlay+0x98>
    ea6e:	|  |   moveq #1,d0
    ea70:	+--|-- bra.s ea9e <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea72:	|  \-> moveq #24,d0
    ea74:	|      add.l 20(sp),d0
    ea78:	|      move.l d0,-(sp)
    ea7a:	|      jsr 14f92 <trimStack>
    ea80:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ea82:	|      movea.l (sp),a0
    ea84:	|      move.l 4(sp),d1
    ea88:	|      move.l 8(sp),d0
    ea8c:	|      move.l a0,-(sp)
    ea8e:	|      move.l d1,-(sp)
    ea90:	|      move.l d0,-(sp)
    ea92:	|      jsr d18a <loadBackDrop>
    ea98:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ea9c:	|      moveq #2,d0
}
    ea9e:	\----> lea 12(sp),sp
    eaa2:	       rts

0000eaa4 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    eaa4:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eaa8:	       movea.l 20(sp),a0
    eaac:	       move.l 24(a0),d0
    eab0:	       move.l d0,-(sp)
    eab2:	       pea 1 <_start+0x1>
    eab6:	       lea 8(sp),a0
    eaba:	       move.l a0,-(sp)
    eabc:	       jsr 1460e <getValueType>
    eac2:	       lea 12(sp),sp
    eac6:	       tst.w d0
    eac8:	   /-- bne.s ead0 <builtIn_mixOverlay+0x2c>
    eaca:	   |   moveq #1,d0
    eacc:	/--|-- bra.w eb68 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ead0:	|  \-> moveq #24,d0
    ead2:	|      add.l 20(sp),d0
    ead6:	|      move.l d0,-(sp)
    ead8:	|      jsr 14f92 <trimStack>
    eade:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eae0:	|      movea.l 20(sp),a0
    eae4:	|      move.l 24(a0),d0
    eae8:	|      move.l d0,-(sp)
    eaea:	|      pea 1 <_start+0x1>
    eaee:	|      moveq #12,d0
    eaf0:	|      add.l sp,d0
    eaf2:	|      move.l d0,-(sp)
    eaf4:	|      jsr 1460e <getValueType>
    eafa:	|      lea 12(sp),sp
    eafe:	|      tst.w d0
    eb00:	|  /-- bne.s eb06 <builtIn_mixOverlay+0x62>
    eb02:	|  |   moveq #1,d0
    eb04:	+--|-- bra.s eb68 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eb06:	|  \-> moveq #24,d0
    eb08:	|      add.l 20(sp),d0
    eb0c:	|      move.l d0,-(sp)
    eb0e:	|      jsr 14f92 <trimStack>
    eb14:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb16:	|      movea.l 20(sp),a0
    eb1a:	|      move.l 24(a0),d0
    eb1e:	|      move.l d0,-(sp)
    eb20:	|      pea 5 <_start+0x5>
    eb24:	|      moveq #16,d0
    eb26:	|      add.l sp,d0
    eb28:	|      move.l d0,-(sp)
    eb2a:	|      jsr 1460e <getValueType>
    eb30:	|      lea 12(sp),sp
    eb34:	|      tst.w d0
    eb36:	|  /-- bne.s eb3c <builtIn_mixOverlay+0x98>
    eb38:	|  |   moveq #1,d0
    eb3a:	+--|-- bra.s eb68 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eb3c:	|  \-> moveq #24,d0
    eb3e:	|      add.l 20(sp),d0
    eb42:	|      move.l d0,-(sp)
    eb44:	|      jsr 14f92 <trimStack>
    eb4a:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    eb4c:	|      movea.l (sp),a0
    eb4e:	|      move.l 4(sp),d1
    eb52:	|      move.l 8(sp),d0
    eb56:	|      move.l a0,-(sp)
    eb58:	|      move.l d1,-(sp)
    eb5a:	|      move.l d0,-(sp)
    eb5c:	|      jsr d200 <mixBackDrop>
    eb62:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eb66:	|      moveq #2,d0
}
    eb68:	\----> lea 12(sp),sp
    eb6c:	       rts

0000eb6e <builtIn_pasteImage>:

builtIn(pasteImage)
{
    eb6e:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    eb72:	       pea 195b9 <PutChar+0x1aaf>
    eb78:	       jsr 17036 <KPrintF>
    eb7e:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb80:	       movea.l 20(sp),a0
    eb84:	       move.l 24(a0),d0
    eb88:	       move.l d0,-(sp)
    eb8a:	       pea 1 <_start+0x1>
    eb8e:	       lea 8(sp),a0
    eb92:	       move.l a0,-(sp)
    eb94:	       jsr 1460e <getValueType>
    eb9a:	       lea 12(sp),sp
    eb9e:	       tst.w d0
    eba0:	   /-- bne.s eba8 <builtIn_pasteImage+0x3a>
    eba2:	   |   moveq #1,d0
    eba4:	/--|-- bra.w ec46 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    eba8:	|  \-> moveq #24,d0
    ebaa:	|      add.l 20(sp),d0
    ebae:	|      move.l d0,-(sp)
    ebb0:	|      jsr 14f92 <trimStack>
    ebb6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebb8:	|      movea.l 20(sp),a0
    ebbc:	|      move.l 24(a0),d0
    ebc0:	|      move.l d0,-(sp)
    ebc2:	|      pea 1 <_start+0x1>
    ebc6:	|      moveq #12,d0
    ebc8:	|      add.l sp,d0
    ebca:	|      move.l d0,-(sp)
    ebcc:	|      jsr 1460e <getValueType>
    ebd2:	|      lea 12(sp),sp
    ebd6:	|      tst.w d0
    ebd8:	|  /-- bne.s ebde <builtIn_pasteImage+0x70>
    ebda:	|  |   moveq #1,d0
    ebdc:	+--|-- bra.s ec46 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ebde:	|  \-> moveq #24,d0
    ebe0:	|      add.l 20(sp),d0
    ebe4:	|      move.l d0,-(sp)
    ebe6:	|      jsr 14f92 <trimStack>
    ebec:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ebee:	|      movea.l 20(sp),a0
    ebf2:	|      move.l 24(a0),d0
    ebf6:	|      move.l d0,-(sp)
    ebf8:	|      jsr 14ae6 <getAnimationFromVar>
    ebfe:	|      addq.l #4,sp
    ec00:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ec04:	|      moveq #24,d0
    ec06:	|      add.l 20(sp),d0
    ec0a:	|      move.l d0,-(sp)
    ec0c:	|      jsr 14f92 <trimStack>
    ec12:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ec14:	|      tst.l 8(sp)
    ec18:	|  /-- bne.s ec1e <builtIn_pasteImage+0xb0>
    ec1a:	|  |   moveq #2,d0
    ec1c:	+--|-- bra.s ec46 <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    ec1e:	|  \-> move.l (sp),d1
    ec20:	|      move.l 4(sp),d0
    ec24:	|      move.l 8(sp),-(sp)
    ec28:	|      move.l d1,-(sp)
    ec2a:	|      move.l d0,-(sp)
    ec2c:	|      jsr d94 <pasteCursor>
    ec32:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    ec36:	|      pea 195ce <PutChar+0x1ac4>
    ec3c:	|      jsr 17036 <KPrintF>
    ec42:	|      addq.l #4,sp
	return BR_CONTINUE;	
    ec44:	|      moveq #2,d0
}
    ec46:	\----> lea 12(sp),sp
    ec4a:	       rts

0000ec4c <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ec4c:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec4e:	       movea.l 16(sp),a0
    ec52:	       move.l 24(a0),d0
    ec56:	       move.l d0,-(sp)
    ec58:	       pea 1 <_start+0x1>
    ec5c:	       move.l sp,d0
    ec5e:	       addq.l #8,d0
    ec60:	       move.l d0,-(sp)
    ec62:	       jsr 1460e <getValueType>
    ec68:	       lea 12(sp),sp
    ec6c:	       tst.w d0
    ec6e:	   /-- bne.s ec76 <builtIn_setSceneDimensions+0x2a>
    ec70:	   |   moveq #1,d0
    ec72:	/--|-- bra.w ecfe <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ec76:	|  \-> moveq #24,d0
    ec78:	|      add.l 16(sp),d0
    ec7c:	|      move.l d0,-(sp)
    ec7e:	|      jsr 14f92 <trimStack>
    ec84:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec86:	|      movea.l 16(sp),a0
    ec8a:	|      move.l 24(a0),d0
    ec8e:	|      move.l d0,-(sp)
    ec90:	|      pea 1 <_start+0x1>
    ec94:	|      moveq #12,d0
    ec96:	|      add.l sp,d0
    ec98:	|      move.l d0,-(sp)
    ec9a:	|      jsr 1460e <getValueType>
    eca0:	|      lea 12(sp),sp
    eca4:	|      tst.w d0
    eca6:	|  /-- bne.s ecac <builtIn_setSceneDimensions+0x60>
    eca8:	|  |   moveq #1,d0
    ecaa:	+--|-- bra.s ecfe <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ecac:	|  \-> moveq #24,d0
    ecae:	|      add.l 16(sp),d0
    ecb2:	|      move.l d0,-(sp)
    ecb4:	|      jsr 14f92 <trimStack>
    ecba:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ecbc:	|      move.l (sp),d1
    ecbe:	|      move.l 4(sp),d0
    ecc2:	|      move.l d1,-(sp)
    ecc4:	|      move.l d0,-(sp)
    ecc6:	|      jsr d256 <resizeBackdrop>
    eccc:	|      addq.l #8,sp
    ecce:	|      tst.w d0
    ecd0:	|  /-- beq.s ecee <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ecd2:	|  |   move.l (sp),d1
    ecd4:	|  |   move.l 4(sp),d0
    ecd8:	|  |   move.l d1,-(sp)
    ecda:	|  |   move.l d0,-(sp)
    ecdc:	|  |   clr.l -(sp)
    ecde:	|  |   clr.l -(sp)
    ece0:	|  |   jsr d058 <blankScreen>
    ece6:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ecea:	|  |   moveq #2,d0
    ecec:	+--|-- bra.s ecfe <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ecee:	|  \-> pea 195e4 <PutChar+0x1ada>
    ecf4:	|      jsr 17036 <KPrintF>
    ecfa:	|      addq.l #4,sp
	return BR_ERROR;
    ecfc:	|      moveq #1,d0
}
    ecfe:	\----> addq.l #8,sp
    ed00:	       rts

0000ed02 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ed02:	          move.l d3,-(sp)
    ed04:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed06:	          movea.l 16(sp),a0
    ed0a:	          move.l 24(a0),d0
    ed0e:	          move.l d0,-(sp)
    ed10:	          pea 1 <_start+0x1>
    ed14:	          pea 1a862 <cameraY>
    ed1a:	          jsr 1460e <getValueType>
    ed20:	          lea 12(sp),sp
    ed24:	          tst.w d0
    ed26:	      /-- bne.s ed2e <builtIn_aimCamera+0x2c>
    ed28:	      |   moveq #1,d0
    ed2a:	/-----|-- bra.w efb0 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ed2e:	|     \-> moveq #24,d0
    ed30:	|         add.l 16(sp),d0
    ed34:	|         move.l d0,-(sp)
    ed36:	|         jsr 14f92 <trimStack>
    ed3c:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed3e:	|         movea.l 16(sp),a0
    ed42:	|         move.l 24(a0),d0
    ed46:	|         move.l d0,-(sp)
    ed48:	|         pea 1 <_start+0x1>
    ed4c:	|         pea 1a85e <cameraX>
    ed52:	|         jsr 1460e <getValueType>
    ed58:	|         lea 12(sp),sp
    ed5c:	|         tst.w d0
    ed5e:	|     /-- bne.s ed66 <builtIn_aimCamera+0x64>
    ed60:	|     |   moveq #1,d0
    ed62:	+-----|-- bra.w efb0 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ed66:	|     \-> moveq #24,d0
    ed68:	|         add.l 16(sp),d0
    ed6c:	|         move.l d0,-(sp)
    ed6e:	|         jsr 14f92 <trimStack>
    ed74:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ed76:	|         move.l 1a85e <cameraX>,d0
    ed7c:	|         move.l d0,-(sp)
    ed7e:	|         jsr 17472 <__floatsisf>
    ed84:	|         addq.l #4,sp
    ed86:	|         move.l d0,d2
    ed88:	|         move.l 1a6f8 <winWidth>,d0
    ed8e:	|         lsr.l #1,d0
    ed90:	|         move.l d0,-(sp)
    ed92:	|         jsr 1749a <__floatunsisf>
    ed98:	|         addq.l #4,sp
    ed9a:	|         move.l d0,d1
    ed9c:	|         move.l 1a142 <cameraZoom>,d0
    eda2:	|         move.l d0,-(sp)
    eda4:	|         move.l d1,-(sp)
    eda6:	|         jsr 1731e <__divsf3>
    edac:	|         addq.l #8,sp
    edae:	|         move.l d0,-(sp)
    edb0:	|         move.l d2,-(sp)
    edb2:	|         jsr 17766 <__subsf3>
    edb8:	|         addq.l #8,sp
    edba:	|         move.l d0,-(sp)
    edbc:	|         jsr 1740a <__fixsfsi>
    edc2:	|         addq.l #4,sp
    edc4:	|         move.l d0,1a85e <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    edca:	|         move.l 1a862 <cameraY>,d0
    edd0:	|         move.l d0,-(sp)
    edd2:	|         jsr 17472 <__floatsisf>
    edd8:	|         addq.l #4,sp
    edda:	|         move.l d0,d2
    eddc:	|         move.l 1a6fc <winHeight>,d0
    ede2:	|         lsr.l #1,d0
    ede4:	|         move.l d0,-(sp)
    ede6:	|         jsr 1749a <__floatunsisf>
    edec:	|         addq.l #4,sp
    edee:	|         move.l d0,d1
    edf0:	|         move.l 1a142 <cameraZoom>,d0
    edf6:	|         move.l d0,-(sp)
    edf8:	|         move.l d1,-(sp)
    edfa:	|         jsr 1731e <__divsf3>
    ee00:	|         addq.l #8,sp
    ee02:	|         move.l d0,-(sp)
    ee04:	|         move.l d2,-(sp)
    ee06:	|         jsr 17766 <__subsf3>
    ee0c:	|         addq.l #8,sp
    ee0e:	|         move.l d0,-(sp)
    ee10:	|         jsr 1740a <__fixsfsi>
    ee16:	|         addq.l #4,sp
    ee18:	|         move.l d0,1a862 <cameraY>

	if (cameraX < 0) cameraX = 0;
    ee1e:	|         move.l 1a85e <cameraX>,d0
    ee24:	|     /-- bpl.s ee30 <builtIn_aimCamera+0x12e>
    ee26:	|     |   clr.l 1a85e <cameraX>
    ee2c:	|  /--|-- bra.w eee6 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ee30:	|  |  \-> move.l 1a85e <cameraX>,d0
    ee36:	|  |      move.l d0,-(sp)
    ee38:	|  |      jsr 17472 <__floatsisf>
    ee3e:	|  |      addq.l #4,sp
    ee40:	|  |      move.l d0,d2
    ee42:	|  |      move.l 1a840 <sceneWidth>,d0
    ee48:	|  |      move.l d0,-(sp)
    ee4a:	|  |      jsr 1749a <__floatunsisf>
    ee50:	|  |      addq.l #4,sp
    ee52:	|  |      move.l d0,d3
    ee54:	|  |      move.l 1a6f8 <winWidth>,d0
    ee5a:	|  |      move.l d0,-(sp)
    ee5c:	|  |      jsr 1749a <__floatunsisf>
    ee62:	|  |      addq.l #4,sp
    ee64:	|  |      move.l d0,d1
    ee66:	|  |      move.l 1a142 <cameraZoom>,d0
    ee6c:	|  |      move.l d0,-(sp)
    ee6e:	|  |      move.l d1,-(sp)
    ee70:	|  |      jsr 1731e <__divsf3>
    ee76:	|  |      addq.l #8,sp
    ee78:	|  |      move.l d0,-(sp)
    ee7a:	|  |      move.l d3,-(sp)
    ee7c:	|  |      jsr 17766 <__subsf3>
    ee82:	|  |      addq.l #8,sp
    ee84:	|  |      move.l d0,-(sp)
    ee86:	|  |      move.l d2,-(sp)
    ee88:	|  |      jsr 175de <__gtsf2>
    ee8e:	|  |      addq.l #8,sp
    ee90:	|  |      tst.l d0
    ee92:	|  +----- ble.s eee6 <builtIn_aimCamera+0x1e4>
    ee94:	|  |      move.l 1a840 <sceneWidth>,d0
    ee9a:	|  |      move.l d0,-(sp)
    ee9c:	|  |      jsr 1749a <__floatunsisf>
    eea2:	|  |      addq.l #4,sp
    eea4:	|  |      move.l d0,d2
    eea6:	|  |      move.l 1a6f8 <winWidth>,d0
    eeac:	|  |      move.l d0,-(sp)
    eeae:	|  |      jsr 1749a <__floatunsisf>
    eeb4:	|  |      addq.l #4,sp
    eeb6:	|  |      move.l d0,d1
    eeb8:	|  |      move.l 1a142 <cameraZoom>,d0
    eebe:	|  |      move.l d0,-(sp)
    eec0:	|  |      move.l d1,-(sp)
    eec2:	|  |      jsr 1731e <__divsf3>
    eec8:	|  |      addq.l #8,sp
    eeca:	|  |      move.l d0,-(sp)
    eecc:	|  |      move.l d2,-(sp)
    eece:	|  |      jsr 17766 <__subsf3>
    eed4:	|  |      addq.l #8,sp
    eed6:	|  |      move.l d0,-(sp)
    eed8:	|  |      jsr 1740a <__fixsfsi>
    eede:	|  |      addq.l #4,sp
    eee0:	|  |      move.l d0,1a85e <cameraX>
	if (cameraY < 0) cameraY = 0;
    eee6:	|  \----> move.l 1a862 <cameraY>,d0
    eeec:	|     /-- bpl.s eef8 <builtIn_aimCamera+0x1f6>
    eeee:	|     |   clr.l 1a862 <cameraY>
    eef4:	|  /--|-- bra.w efae <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    eef8:	|  |  \-> move.l 1a862 <cameraY>,d0
    eefe:	|  |      move.l d0,-(sp)
    ef00:	|  |      jsr 17472 <__floatsisf>
    ef06:	|  |      addq.l #4,sp
    ef08:	|  |      move.l d0,d2
    ef0a:	|  |      move.l 1a844 <sceneHeight>,d0
    ef10:	|  |      move.l d0,-(sp)
    ef12:	|  |      jsr 1749a <__floatunsisf>
    ef18:	|  |      addq.l #4,sp
    ef1a:	|  |      move.l d0,d3
    ef1c:	|  |      move.l 1a6fc <winHeight>,d0
    ef22:	|  |      move.l d0,-(sp)
    ef24:	|  |      jsr 1749a <__floatunsisf>
    ef2a:	|  |      addq.l #4,sp
    ef2c:	|  |      move.l d0,d1
    ef2e:	|  |      move.l 1a142 <cameraZoom>,d0
    ef34:	|  |      move.l d0,-(sp)
    ef36:	|  |      move.l d1,-(sp)
    ef38:	|  |      jsr 1731e <__divsf3>
    ef3e:	|  |      addq.l #8,sp
    ef40:	|  |      move.l d0,-(sp)
    ef42:	|  |      move.l d3,-(sp)
    ef44:	|  |      jsr 17766 <__subsf3>
    ef4a:	|  |      addq.l #8,sp
    ef4c:	|  |      move.l d0,-(sp)
    ef4e:	|  |      move.l d2,-(sp)
    ef50:	|  |      jsr 175de <__gtsf2>
    ef56:	|  |      addq.l #8,sp
    ef58:	|  |      tst.l d0
    ef5a:	|  +----- ble.s efae <builtIn_aimCamera+0x2ac>
    ef5c:	|  |      move.l 1a844 <sceneHeight>,d0
    ef62:	|  |      move.l d0,-(sp)
    ef64:	|  |      jsr 1749a <__floatunsisf>
    ef6a:	|  |      addq.l #4,sp
    ef6c:	|  |      move.l d0,d2
    ef6e:	|  |      move.l 1a6fc <winHeight>,d0
    ef74:	|  |      move.l d0,-(sp)
    ef76:	|  |      jsr 1749a <__floatunsisf>
    ef7c:	|  |      addq.l #4,sp
    ef7e:	|  |      move.l d0,d1
    ef80:	|  |      move.l 1a142 <cameraZoom>,d0
    ef86:	|  |      move.l d0,-(sp)
    ef88:	|  |      move.l d1,-(sp)
    ef8a:	|  |      jsr 1731e <__divsf3>
    ef90:	|  |      addq.l #8,sp
    ef92:	|  |      move.l d0,-(sp)
    ef94:	|  |      move.l d2,-(sp)
    ef96:	|  |      jsr 17766 <__subsf3>
    ef9c:	|  |      addq.l #8,sp
    ef9e:	|  |      move.l d0,-(sp)
    efa0:	|  |      jsr 1740a <__fixsfsi>
    efa6:	|  |      addq.l #4,sp
    efa8:	|  |      move.l d0,1a862 <cameraY>
	return BR_CONTINUE;
    efae:	|  \----> moveq #2,d0
}
    efb0:	\-------> move.l (sp)+,d2
    efb2:	          move.l (sp)+,d3
    efb4:	          rts

0000efb6 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    efb6:	       subq.l #4,sp
    efb8:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    efba:	       movea.l 16(sp),a0
    efbe:	       move.l 24(a0),d0
    efc2:	       move.l d0,-(sp)
    efc4:	       pea 1 <_start+0x1>
    efc8:	       moveq #12,d0
    efca:	       add.l sp,d0
    efcc:	       move.l d0,-(sp)
    efce:	       jsr 1460e <getValueType>
    efd4:	       lea 12(sp),sp
    efd8:	       tst.w d0
    efda:	   /-- bne.s efe2 <builtIn_zoomCamera+0x2c>
    efdc:	   |   moveq #1,d0
    efde:	/--|-- bra.w f1dc <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    efe2:	|  \-> moveq #24,d0
    efe4:	|      add.l 16(sp),d0
    efe8:	|      move.l d0,-(sp)
    efea:	|      jsr 14f92 <trimStack>
    eff0:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    eff2:	|      move.l 1a760 <input+0xa>,d0
    eff8:	|      move.l d0,-(sp)
    effa:	|      jsr 17472 <__floatsisf>
    f000:	|      addq.l #4,sp
    f002:	|      move.l d0,d1
    f004:	|      move.l 1a142 <cameraZoom>,d0
    f00a:	|      move.l d0,-(sp)
    f00c:	|      move.l d1,-(sp)
    f00e:	|      jsr 17524 <__mulsf3>
    f014:	|      addq.l #8,sp
    f016:	|      move.l d0,-(sp)
    f018:	|      jsr 1740a <__fixsfsi>
    f01e:	|      addq.l #4,sp
    f020:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f026:	|      move.l 1a764 <input+0xe>,d0
    f02c:	|      move.l d0,-(sp)
    f02e:	|      jsr 17472 <__floatsisf>
    f034:	|      addq.l #4,sp
    f036:	|      move.l d0,d1
    f038:	|      move.l 1a142 <cameraZoom>,d0
    f03e:	|      move.l d0,-(sp)
    f040:	|      move.l d1,-(sp)
    f042:	|      jsr 17524 <__mulsf3>
    f048:	|      addq.l #8,sp
    f04a:	|      move.l d0,-(sp)
    f04c:	|      jsr 1740a <__fixsfsi>
    f052:	|      addq.l #4,sp
    f054:	|      move.l d0,1a764 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f05a:	|      move.l 4(sp),d0
    f05e:	|      move.l d0,-(sp)
    f060:	|      jsr 17472 <__floatsisf>
    f066:	|      addq.l #4,sp
    f068:	|      move.l #1008981770,-(sp)
    f06e:	|      move.l d0,-(sp)
    f070:	|      jsr 17524 <__mulsf3>
    f076:	|      addq.l #8,sp
    f078:	|      move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f07e:	|      move.l 1a6f8 <winWidth>,d0
    f084:	|      move.l d0,-(sp)
    f086:	|      jsr 1749a <__floatunsisf>
    f08c:	|      addq.l #4,sp
    f08e:	|      move.l d0,d1
    f090:	|      move.l 1a142 <cameraZoom>,d0
    f096:	|      move.l d0,-(sp)
    f098:	|      move.l d1,-(sp)
    f09a:	|      jsr 1731e <__divsf3>
    f0a0:	|      addq.l #8,sp
    f0a2:	|      move.l d0,d2
    f0a4:	|      move.l 1a840 <sceneWidth>,d0
    f0aa:	|      move.l d0,-(sp)
    f0ac:	|      jsr 1749a <__floatunsisf>
    f0b2:	|      addq.l #4,sp
    f0b4:	|      move.l d0,-(sp)
    f0b6:	|      move.l d2,-(sp)
    f0b8:	|      jsr 175de <__gtsf2>
    f0be:	|      addq.l #8,sp
    f0c0:	|      tst.l d0
    f0c2:	|  /-- ble.s f0f8 <builtIn_zoomCamera+0x142>
    f0c4:	|  |   move.l 1a6f8 <winWidth>,d0
    f0ca:	|  |   move.l d0,-(sp)
    f0cc:	|  |   jsr 1749a <__floatunsisf>
    f0d2:	|  |   addq.l #4,sp
    f0d4:	|  |   move.l d0,d2
    f0d6:	|  |   move.l 1a840 <sceneWidth>,d0
    f0dc:	|  |   move.l d0,-(sp)
    f0de:	|  |   jsr 1749a <__floatunsisf>
    f0e4:	|  |   addq.l #4,sp
    f0e6:	|  |   move.l d0,-(sp)
    f0e8:	|  |   move.l d2,-(sp)
    f0ea:	|  |   jsr 1731e <__divsf3>
    f0f0:	|  |   addq.l #8,sp
    f0f2:	|  |   move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f0f8:	|  \-> move.l 1a6fc <winHeight>,d0
    f0fe:	|      move.l d0,-(sp)
    f100:	|      jsr 1749a <__floatunsisf>
    f106:	|      addq.l #4,sp
    f108:	|      move.l d0,d1
    f10a:	|      move.l 1a142 <cameraZoom>,d0
    f110:	|      move.l d0,-(sp)
    f112:	|      move.l d1,-(sp)
    f114:	|      jsr 1731e <__divsf3>
    f11a:	|      addq.l #8,sp
    f11c:	|      move.l d0,d2
    f11e:	|      move.l 1a844 <sceneHeight>,d0
    f124:	|      move.l d0,-(sp)
    f126:	|      jsr 1749a <__floatunsisf>
    f12c:	|      addq.l #4,sp
    f12e:	|      move.l d0,-(sp)
    f130:	|      move.l d2,-(sp)
    f132:	|      jsr 175de <__gtsf2>
    f138:	|      addq.l #8,sp
    f13a:	|      tst.l d0
    f13c:	|  /-- ble.s f172 <builtIn_zoomCamera+0x1bc>
    f13e:	|  |   move.l 1a6fc <winHeight>,d0
    f144:	|  |   move.l d0,-(sp)
    f146:	|  |   jsr 1749a <__floatunsisf>
    f14c:	|  |   addq.l #4,sp
    f14e:	|  |   move.l d0,d2
    f150:	|  |   move.l 1a844 <sceneHeight>,d0
    f156:	|  |   move.l d0,-(sp)
    f158:	|  |   jsr 1749a <__floatunsisf>
    f15e:	|  |   addq.l #4,sp
    f160:	|  |   move.l d0,-(sp)
    f162:	|  |   move.l d2,-(sp)
    f164:	|  |   jsr 1731e <__divsf3>
    f16a:	|  |   addq.l #8,sp
    f16c:	|  |   move.l d0,1a142 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f172:	|  \-> move.l 1a760 <input+0xa>,d0
    f178:	|      move.l d0,-(sp)
    f17a:	|      jsr 17472 <__floatsisf>
    f180:	|      addq.l #4,sp
    f182:	|      move.l d0,d1
    f184:	|      move.l 1a142 <cameraZoom>,d0
    f18a:	|      move.l d0,-(sp)
    f18c:	|      move.l d1,-(sp)
    f18e:	|      jsr 1731e <__divsf3>
    f194:	|      addq.l #8,sp
    f196:	|      move.l d0,-(sp)
    f198:	|      jsr 1740a <__fixsfsi>
    f19e:	|      addq.l #4,sp
    f1a0:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f1a6:	|      move.l 1a764 <input+0xe>,d0
    f1ac:	|      move.l d0,-(sp)
    f1ae:	|      jsr 17472 <__floatsisf>
    f1b4:	|      addq.l #4,sp
    f1b6:	|      move.l d0,d1
    f1b8:	|      move.l 1a142 <cameraZoom>,d0
    f1be:	|      move.l d0,-(sp)
    f1c0:	|      move.l d1,-(sp)
    f1c2:	|      jsr 1731e <__divsf3>
    f1c8:	|      addq.l #8,sp
    f1ca:	|      move.l d0,-(sp)
    f1cc:	|      jsr 1740a <__fixsfsi>
    f1d2:	|      addq.l #4,sp
    f1d4:	|      move.l d0,1a764 <input+0xe>

	return BR_CONTINUE;
    f1da:	|      moveq #2,d0
}
    f1dc:	\----> move.l (sp)+,d2
    f1de:	       addq.l #4,sp
    f1e0:	       rts

0000f1e2 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f1e2:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f1e4:	             tst.l 8(sp)
    f1e8:	         /-- bne.s f1fc <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f1ea:	         |   pea 19609 <PutChar+0x1aff>
    f1f0:	         |   jsr 17036 <KPrintF>
    f1f6:	         |   addq.l #4,sp
		return BR_ERROR;
    f1f8:	         |   moveq #1,d0
    f1fa:	/--------|-- bra.s f25c <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f1fc:	|        \-> jsr 15c36 <rand>
    f202:	|            move.l d0,d1
    f204:	|            move.l 8(sp),d0
    f208:	|            move.l d0,-(sp)
    f20a:	|            move.l d1,-(sp)
    f20c:	|            jsr 17ace <__umodsi3>
    f212:	|            addq.l #8,sp
    f214:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f216:	|     /----- bra.s f24a <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f218:	|  /--|----> move.l (sp),d0
    f21a:	|  |  |      cmp.l 8(sp),d0
    f21e:	|  |  |  /-- bne.s f23a <builtIn_pickOne+0x58>
    f220:	|  |  |  |   moveq #28,d0
    f222:	|  |  |  |   add.l 12(sp),d0
    f226:	|  |  |  |   movea.l 12(sp),a0
    f22a:	|  |  |  |   move.l 24(a0),d1
    f22e:	|  |  |  |   move.l d0,-(sp)
    f230:	|  |  |  |   move.l d1,-(sp)
    f232:	|  |  |  |   jsr 14ac8 <copyVariable>
    f238:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f23a:	|  |  |  \-> moveq #24,d0
    f23c:	|  |  |      add.l 12(sp),d0
    f240:	|  |  |      move.l d0,-(sp)
    f242:	|  |  |      jsr 14f92 <trimStack>
    f248:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f24a:	|  |  \----> move.l 8(sp),d0
    f24e:	|  |         move.l d0,d1
    f250:	|  |         subq.l #1,d1
    f252:	|  |         move.l d1,8(sp)
    f256:	|  |         tst.l d0
    f258:	|  \-------- bne.s f218 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f25a:	|            moveq #2,d0
}
    f25c:	\----------> addq.l #4,sp
    f25e:	             rts

0000f260 <builtIn_substring>:

builtIn(substring)
{
    f260:	       lea -40(sp),sp
    f264:	       move.l a6,-(sp)
    f266:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f268:	       movea.l 56(sp),a0
    f26c:	       move.l 24(a0),d0
    f270:	       move.l d0,-(sp)
    f272:	       pea 1 <_start+0x1>
    f276:	       lea 16(sp),a0
    f27a:	       move.l a0,-(sp)
    f27c:	       jsr 1460e <getValueType>
    f282:	       lea 12(sp),sp
    f286:	       tst.w d0
    f288:	   /-- bne.s f290 <builtIn_substring+0x30>
    f28a:	   |   moveq #1,d0
    f28c:	/--|-- bra.w f408 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f290:	|  \-> moveq #24,d0
    f292:	|      add.l 56(sp),d0
    f296:	|      move.l d0,-(sp)
    f298:	|      jsr 14f92 <trimStack>
    f29e:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f2a0:	|      movea.l 56(sp),a0
    f2a4:	|      move.l 24(a0),d0
    f2a8:	|      move.l d0,-(sp)
    f2aa:	|      pea 1 <_start+0x1>
    f2ae:	|      lea 20(sp),a0
    f2b2:	|      move.l a0,-(sp)
    f2b4:	|      jsr 1460e <getValueType>
    f2ba:	|      lea 12(sp),sp
    f2be:	|      tst.w d0
    f2c0:	|  /-- bne.s f2c8 <builtIn_substring+0x68>
    f2c2:	|  |   moveq #1,d0
    f2c4:	+--|-- bra.w f408 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f2c8:	|  \-> moveq #24,d0
    f2ca:	|      add.l 56(sp),d0
    f2ce:	|      move.l d0,-(sp)
    f2d0:	|      jsr 14f92 <trimStack>
    f2d6:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f2d8:	|      movea.l 56(sp),a0
    f2dc:	|      move.l 24(a0),d0
    f2e0:	|      move.l d0,-(sp)
    f2e2:	|      jsr 14be4 <getTextFromAnyVar>
    f2e8:	|      addq.l #4,sp
    f2ea:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f2ee:	|      moveq #24,d0
    f2f0:	|      add.l 56(sp),d0
    f2f4:	|      move.l d0,-(sp)
    f2f6:	|      jsr 14f92 <trimStack>
    f2fc:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f2fe:	|      move.l 44(sp),-(sp)
    f302:	|      jsr 13afa <strlen>
    f308:	|      addq.l #4,sp
    f30a:	|      move.l d0,d1
    f30c:	|      move.l 12(sp),d0
    f310:	|      movea.l d0,a0
    f312:	|      move.l 8(sp),d0
    f316:	|      add.l a0,d0
    f318:	|      cmp.l d1,d0
    f31a:	|  /-- bls.s f350 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f31c:	|  |   move.l 44(sp),-(sp)
    f320:	|  |   jsr 13afa <strlen>
    f326:	|  |   addq.l #4,sp
    f328:	|  |   move.l d0,d1
    f32a:	|  |   move.l 12(sp),d0
    f32e:	|  |   sub.l d0,d1
    f330:	|  |   move.l d1,d0
    f332:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f336:	|  |   move.l 44(sp),-(sp)
    f33a:	|  |   jsr 13afa <strlen>
    f340:	|  |   addq.l #4,sp
    f342:	|  |   move.l d0,d1
    f344:	|  |   move.l 12(sp),d0
    f348:	|  |   cmp.l d1,d0
    f34a:	|  +-- bls.s f350 <builtIn_substring+0xf0>
            start = 0;
    f34c:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f350:	|  \-> move.l 8(sp),d0
    f354:	|  /-- bpl.s f35a <builtIn_substring+0xfa>
        length = 0;
    f356:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f35a:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f360:	|      move.l 12(sp),d1
    f364:	|      move.l 8(sp),d0
    f368:	|      move.l d1,d2
    f36a:	|      add.l d0,d2
    f36c:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f370:	|      move.l 36(sp),d0
    f374:	|      sub.l 40(sp),d0
    f378:	|      addq.l #1,d0
    f37a:	|      move.l d0,32(sp)
    f37e:	|      clr.l 28(sp)
    f382:	|      move.l 1a7a4 <SysBase>,d0
    f388:	|      movea.l d0,a6
    f38a:	|      move.l 32(sp),d0
    f38e:	|      move.l 28(sp),d1
    f392:	|      jsr -684(a6)
    f396:	|      move.l d0,24(sp)
    f39a:	|      move.l 24(sp),d0
    f39e:	|      move.l d0,20(sp)
    if (!newString) {
    f3a2:	|  /-- bne.s f3a8 <builtIn_substring+0x148>
        return BR_ERROR;
    f3a4:	|  |   moveq #1,d0
    f3a6:	+--|-- bra.s f408 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f3a8:	|  \-> move.l 36(sp),d0
    f3ac:	|      sub.l 40(sp),d0
    f3b0:	|      move.l d0,d1
    f3b2:	|      move.l 40(sp),d0
    f3b6:	|      add.l 44(sp),d0
    f3ba:	|      move.l d1,-(sp)
    f3bc:	|      move.l d0,-(sp)
    f3be:	|      move.l 28(sp),-(sp)
    f3c2:	|      jsr 16fea <memcpy>
    f3c8:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f3cc:	|      move.l 36(sp),d0
    f3d0:	|      sub.l 40(sp),d0
    f3d4:	|      movea.l 20(sp),a0
    f3d8:	|      adda.l d0,a0
    f3da:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f3dc:	|      moveq #28,d0
    f3de:	|      add.l 56(sp),d0
    f3e2:	|      move.l 20(sp),-(sp)
    f3e6:	|      move.l d0,-(sp)
    f3e8:	|      jsr 14830 <makeTextVar>
    f3ee:	|      addq.l #8,sp
    FreeVec(newString);
    f3f0:	|      move.l 20(sp),16(sp)
    f3f6:	|      move.l 1a7a4 <SysBase>,d0
    f3fc:	|      movea.l d0,a6
    f3fe:	|      movea.l 16(sp),a1
    f402:	|      jsr -690(a6)
    return BR_CONTINUE;
    f406:	|      moveq #2,d0
}
    f408:	\----> move.l (sp)+,d2
    f40a:	       movea.l (sp)+,a6
    f40c:	       lea 40(sp),sp
    f410:	       rts

0000f412 <builtIn_stringLength>:

builtIn(stringLength)
{
    f412:	subq.l #8,sp
    f414:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f416:	movea.l 20(sp),a0
    f41a:	move.l 24(a0),d0
    f41e:	move.l d0,-(sp)
    f420:	jsr 14be4 <getTextFromAnyVar>
    f426:	addq.l #4,sp
    f428:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f42c:	moveq #24,d0
    f42e:	add.l 20(sp),d0
    f432:	move.l d0,-(sp)
    f434:	jsr 14f92 <trimStack>
    f43a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f43c:	move.l 8(sp),-(sp)
    f440:	jsr 13afa <strlen>
    f446:	addq.l #4,sp
    f448:	move.l d0,d1
    f44a:	moveq #28,d0
    f44c:	add.l 20(sp),d0
    f450:	move.l d1,-(sp)
    f452:	pea 1 <_start+0x1>
    f456:	move.l d0,-(sp)
    f458:	jsr 14f00 <setVariable>
    f45e:	lea 12(sp),sp
	FreeVec(newText);
    f462:	move.l 8(sp),4(sp)
    f468:	move.l 1a7a4 <SysBase>,d0
    f46e:	movea.l d0,a6
    f470:	movea.l 4(sp),a1
    f474:	jsr -690(a6)
	return BR_CONTINUE;
    f478:	moveq #2,d0
}
    f47a:	movea.l (sp)+,a6
    f47c:	addq.l #8,sp
    f47e:	rts

0000f480 <builtIn_newStack>:

builtIn(newStack)
{
    f480:	             lea -12(sp),sp
    f484:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f486:	             moveq #28,d0
    f488:	             add.l 24(sp),d0
    f48c:	             move.l d0,-(sp)
    f48e:	             jsr 1485c <unlinkVar>
    f494:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f496:	             movea.l 24(sp),a0
    f49a:	             moveq #6,d0
    f49c:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f4a0:	             moveq #12,d1
    f4a2:	             move.l d1,12(sp)
    f4a6:	             clr.l 8(sp)
    f4aa:	             move.l 1a7a4 <SysBase>,d0
    f4b0:	             movea.l d0,a6
    f4b2:	             move.l 12(sp),d0
    f4b6:	             move.l 8(sp),d1
    f4ba:	             jsr -684(a6)
    f4be:	             move.l d0,4(sp)
    f4c2:	             move.l 4(sp),d0
    f4c6:	             movea.l 24(sp),a0
    f4ca:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f4ce:	             movea.l 24(sp),a0
    f4d2:	             move.l 32(a0),d0
    f4d6:	         /-- bne.s f4de <builtIn_newStack+0x5e>
    f4d8:	         |   moveq #1,d0
    f4da:	/--------|-- bra.w f570 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f4de:	|        \-> movea.l 24(sp),a0
    f4e2:	|            movea.l 32(a0),a0
    f4e6:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f4e8:	|            movea.l 24(sp),a0
    f4ec:	|            movea.l 32(a0),a0
    f4f0:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f4f4:	|            movea.l 24(sp),a0
    f4f8:	|            movea.l 32(a0),a0
    f4fc:	|            moveq #1,d0
    f4fe:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f502:	|     /----- bra.s f55e <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f504:	|  /--|----> movea.l 24(sp),a0
    f508:	|  |  |      move.l 32(a0),d0
    f50c:	|  |  |      move.l d0,d1
    f50e:	|  |  |      movea.l 24(sp),a0
    f512:	|  |  |      move.l 24(a0),d0
    f516:	|  |  |      move.l d1,-(sp)
    f518:	|  |  |      move.l d0,-(sp)
    f51a:	|  |  |      jsr 13e4a <addVarToStack>
    f520:	|  |  |      addq.l #8,sp
    f522:	|  |  |      tst.w d0
    f524:	|  |  |  /-- bne.s f52a <builtIn_newStack+0xaa>
    f526:	|  |  |  |   moveq #1,d0
    f528:	+--|--|--|-- bra.s f570 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f52a:	|  |  |  \-> movea.l 24(sp),a0
    f52e:	|  |  |      movea.l 32(a0),a0
    f532:	|  |  |      move.l 4(a0),d0
    f536:	|  |  |  /-- bne.s f54e <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f538:	|  |  |  |   movea.l 24(sp),a0
    f53c:	|  |  |  |   movea.l 32(a0),a1
    f540:	|  |  |  |   movea.l 24(sp),a0
    f544:	|  |  |  |   movea.l 32(a0),a0
    f548:	|  |  |  |   move.l (a1),d0
    f54a:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f54e:	|  |  |  \-> moveq #24,d0
    f550:	|  |  |      add.l 24(sp),d0
    f554:	|  |  |      move.l d0,-(sp)
    f556:	|  |  |      jsr 14f92 <trimStack>
    f55c:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f55e:	|  |  \----> move.l 20(sp),d0
    f562:	|  |         move.l d0,d1
    f564:	|  |         subq.l #1,d1
    f566:	|  |         move.l d1,20(sp)
    f56a:	|  |         tst.l d0
    f56c:	|  \-------- bne.s f504 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f56e:	|            moveq #2,d0
}
    f570:	\----------> movea.l (sp)+,a6
    f572:	             lea 12(sp),sp
    f576:	             rts

0000f578 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f578:	          movea.l 8(sp),a0
    f57c:	          movea.l 24(a0),a0
    f580:	          move.l (a0),d0
    f582:	          moveq #6,d1
    f584:	          cmp.l d0,d1
    f586:	      /-- beq.s f5a2 <builtIn_stackSize+0x2a>
    f588:	      |   moveq #10,d1
    f58a:	      |   cmp.l d0,d1
    f58c:	   /--|-- beq.s f5e6 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f58e:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f590:	   |  |   pea 1963c <PutChar+0x1b32>
    f596:	   |  |   jsr 17036 <KPrintF>
    f59c:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f59e:	   |  |   moveq #1,d0
    f5a0:	/--|--|-- bra.s f620 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f5a2:	|  |  \-> movea.l 8(sp),a0
    f5a6:	|  |      movea.l 24(a0),a0
    f5aa:	|  |      move.l 4(a0),d0
    f5ae:	|  |      move.l d0,-(sp)
    f5b0:	|  |      jsr 14f6e <stackSize>
    f5b6:	|  |      addq.l #4,sp
    f5b8:	|  |      move.l d0,d1
    f5ba:	|  |      moveq #28,d0
    f5bc:	|  |      add.l 8(sp),d0
    f5c0:	|  |      move.l d1,-(sp)
    f5c2:	|  |      pea 1 <_start+0x1>
    f5c6:	|  |      move.l d0,-(sp)
    f5c8:	|  |      jsr 14f00 <setVariable>
    f5ce:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f5d2:	|  |      moveq #24,d0
    f5d4:	|  |      add.l 8(sp),d0
    f5d8:	|  |      move.l d0,-(sp)
    f5da:	|  |      jsr 14f92 <trimStack>
    f5e0:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f5e2:	|  |      moveq #2,d0
    f5e4:	+--|----- bra.s f620 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f5e6:	|  \----> movea.l 8(sp),a0
    f5ea:	|         movea.l 24(a0),a0
    f5ee:	|         movea.l 4(a0),a0
    f5f2:	|         move.l 4(a0),d1
    f5f6:	|         moveq #28,d0
    f5f8:	|         add.l 8(sp),d0
    f5fc:	|         move.l d1,-(sp)
    f5fe:	|         pea 1 <_start+0x1>
    f602:	|         move.l d0,-(sp)
    f604:	|         jsr 14f00 <setVariable>
    f60a:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f60e:	|         moveq #24,d0
    f610:	|         add.l 8(sp),d0
    f614:	|         move.l d0,-(sp)
    f616:	|         jsr 14f92 <trimStack>
    f61c:	|         addq.l #4,sp
			return BR_CONTINUE;
    f61e:	|         moveq #2,d0
}
    f620:	\-------> rts

0000f622 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f622:	       movea.l 8(sp),a0
    f626:	       movea.l 24(a0),a0
    f62a:	       move.l (a0),d0
    f62c:	       moveq #6,d1
    f62e:	       cmp.l d0,d1
    f630:	   /-- beq.s f644 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f632:	   |   pea 19665 <PutChar+0x1b5b>
    f638:	   |   jsr 17036 <KPrintF>
    f63e:	   |   addq.l #4,sp
		return BR_ERROR;
    f640:	   |   moveq #1,d0
    f642:	/--|-- bra.s f678 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f644:	|  \-> moveq #28,d0
    f646:	|      add.l 8(sp),d0
    f64a:	|      movea.l 8(sp),a0
    f64e:	|      move.l 24(a0),d1
    f652:	|      move.l d0,-(sp)
    f654:	|      move.l d1,-(sp)
    f656:	|      jsr 14114 <copyStack>
    f65c:	|      addq.l #8,sp
    f65e:	|      tst.w d0
    f660:	|  /-- bne.s f666 <builtIn_copyStack+0x44>
    f662:	|  |   moveq #1,d0
    f664:	+--|-- bra.s f678 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f666:	|  \-> moveq #24,d0
    f668:	|      add.l 8(sp),d0
    f66c:	|      move.l d0,-(sp)
    f66e:	|      jsr 14f92 <trimStack>
    f674:	|      addq.l #4,sp
	return BR_CONTINUE;
    f676:	|      moveq #2,d0
}
    f678:	\----> rts

0000f67a <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f67a:	       movea.l 8(sp),a0
    f67e:	       movea.l 24(a0),a0
    f682:	       movea.l 8(a0),a0
    f686:	       move.l (a0),d0
    f688:	       moveq #6,d1
    f68a:	       cmp.l d0,d1
    f68c:	   /-- beq.s f6a2 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f68e:	   |   pea 1967e <PutChar+0x1b74>
    f694:	   |   jsr 17036 <KPrintF>
    f69a:	   |   addq.l #4,sp
		return BR_ERROR;
    f69c:	   |   moveq #1,d0
    f69e:	/--|-- bra.w f730 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f6a2:	|  \-> movea.l 8(sp),a0
    f6a6:	|      movea.l 24(a0),a0
    f6aa:	|      movea.l 8(a0),a0
    f6ae:	|      move.l 4(a0),d0
    f6b2:	|      move.l d0,d1
    f6b4:	|      movea.l 8(sp),a0
    f6b8:	|      move.l 24(a0),d0
    f6bc:	|      move.l d1,-(sp)
    f6be:	|      move.l d0,-(sp)
    f6c0:	|      jsr 13e4a <addVarToStack>
    f6c6:	|      addq.l #8,sp
    f6c8:	|      tst.w d0
    f6ca:	|  /-- bne.s f6d0 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f6cc:	|  |   moveq #1,d0
    f6ce:	+--|-- bra.s f730 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f6d0:	|  \-> movea.l 8(sp),a0
    f6d4:	|      movea.l 24(a0),a0
    f6d8:	|      movea.l 8(a0),a0
    f6dc:	|      movea.l 4(a0),a0
    f6e0:	|      movea.l (a0),a0
    f6e2:	|      move.l 8(a0),d0
    f6e6:	|  /-- bne.s f70e <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f6e8:	|  |   movea.l 8(sp),a0
    f6ec:	|  |   movea.l 24(a0),a0
    f6f0:	|  |   movea.l 8(a0),a0
    f6f4:	|  |   movea.l 4(a0),a1
    f6f8:	|  |   movea.l 8(sp),a0
    f6fc:	|  |   movea.l 24(a0),a0
    f700:	|  |   movea.l 8(a0),a0
    f704:	|  |   movea.l 4(a0),a0
    f708:	|  |   move.l (a1),d0
    f70a:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f70e:	|  \-> moveq #24,d0
    f710:	|      add.l 8(sp),d0
    f714:	|      move.l d0,-(sp)
    f716:	|      jsr 14f92 <trimStack>
    f71c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f71e:	|      moveq #24,d0
    f720:	|      add.l 8(sp),d0
    f724:	|      move.l d0,-(sp)
    f726:	|      jsr 14f92 <trimStack>
    f72c:	|      addq.l #4,sp
	return BR_CONTINUE;
    f72e:	|      moveq #2,d0
}
    f730:	\----> rts

0000f732 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f732:	             movea.l 8(sp),a0
    f736:	             movea.l 24(a0),a0
    f73a:	             movea.l 8(a0),a0
    f73e:	             move.l (a0),d0
    f740:	             moveq #6,d1
    f742:	             cmp.l d0,d1
    f744:	         /-- beq.s f75a <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f746:	         |   pea 1967e <PutChar+0x1b74>
    f74c:	         |   jsr 17036 <KPrintF>
    f752:	         |   addq.l #4,sp
		return BR_ERROR;
    f754:	         |   moveq #1,d0
    f756:	/--------|-- bra.w f848 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f75a:	|        \-> movea.l 8(sp),a0
    f75e:	|            movea.l 24(a0),a0
    f762:	|            movea.l 8(a0),a0
    f766:	|            movea.l 4(a0),a0
    f76a:	|            move.l (a0),d0
    f76c:	|     /----- bne.s f7c6 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f76e:	|     |      movea.l 8(sp),a0
    f772:	|     |      movea.l 24(a0),a0
    f776:	|     |      movea.l 8(a0),a0
    f77a:	|     |      move.l 4(a0),d0
    f77e:	|     |      move.l d0,d1
    f780:	|     |      movea.l 8(sp),a0
    f784:	|     |      move.l 24(a0),d0
    f788:	|     |      move.l d1,-(sp)
    f78a:	|     |      move.l d0,-(sp)
    f78c:	|     |      jsr 13e4a <addVarToStack>
    f792:	|     |      addq.l #8,sp
    f794:	|     |      tst.w d0
    f796:	|     |  /-- bne.s f79e <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f798:	|     |  |   moveq #1,d0
    f79a:	+-----|--|-- bra.w f848 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f79e:	|     |  \-> movea.l 8(sp),a0
    f7a2:	|     |      movea.l 24(a0),a0
    f7a6:	|     |      movea.l 8(a0),a0
    f7aa:	|     |      movea.l 4(a0),a1
    f7ae:	|     |      movea.l 8(sp),a0
    f7b2:	|     |      movea.l 24(a0),a0
    f7b6:	|     |      movea.l 8(a0),a0
    f7ba:	|     |      movea.l 4(a0),a0
    f7be:	|     |      move.l (a1),d0
    f7c0:	|     |      move.l d0,4(a0)
    f7c4:	|  /--|----- bra.s f826 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f7c6:	|  |  \----> movea.l 8(sp),a0
    f7ca:	|  |         movea.l 24(a0),a0
    f7ce:	|  |         movea.l 8(a0),a0
    f7d2:	|  |         movea.l 4(a0),a0
    f7d6:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f7da:	|  |         move.l d0,d1
    f7dc:	|  |         addq.l #8,d1
    f7de:	|  |         movea.l 8(sp),a0
    f7e2:	|  |         move.l 24(a0),d0
    f7e6:	|  |         move.l d1,-(sp)
    f7e8:	|  |         move.l d0,-(sp)
    f7ea:	|  |         jsr 13e4a <addVarToStack>
    f7f0:	|  |         addq.l #8,sp
    f7f2:	|  |         tst.w d0
    f7f4:	|  |     /-- bne.s f7fa <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f7f6:	|  |     |   moveq #1,d0
    f7f8:	+--|-----|-- bra.s f848 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f7fa:	|  |     \-> movea.l 8(sp),a0
    f7fe:	|  |         movea.l 24(a0),a0
    f802:	|  |         movea.l 8(a0),a0
    f806:	|  |         movea.l 4(a0),a0
    f80a:	|  |         movea.l 4(a0),a1
    f80e:	|  |         movea.l 8(sp),a0
    f812:	|  |         movea.l 24(a0),a0
    f816:	|  |         movea.l 8(a0),a0
    f81a:	|  |         movea.l 4(a0),a0
    f81e:	|  |         move.l 8(a1),d0
    f822:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f826:	|  \-------> moveq #24,d0
    f828:	|            add.l 8(sp),d0
    f82c:	|            move.l d0,-(sp)
    f82e:	|            jsr 14f92 <trimStack>
    f834:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f836:	|            moveq #24,d0
    f838:	|            add.l 8(sp),d0
    f83c:	|            move.l d0,-(sp)
    f83e:	|            jsr 14f92 <trimStack>
    f844:	|            addq.l #4,sp
	return BR_CONTINUE;
    f846:	|            moveq #2,d0
}
    f848:	\----------> rts

0000f84a <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f84a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f84c:	       movea.l 12(sp),a0
    f850:	       movea.l 24(a0),a0
    f854:	       movea.l 8(a0),a0
    f858:	       move.l (a0),d0
    f85a:	       moveq #6,d1
    f85c:	       cmp.l d0,d1
    f85e:	   /-- beq.s f874 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f860:	   |   pea 19665 <PutChar+0x1b5b>
    f866:	   |   jsr 17036 <KPrintF>
    f86c:	   |   addq.l #4,sp
		return BR_ERROR;
    f86e:	   |   moveq #1,d0
    f870:	/--|-- bra.w f90a <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f874:	|  \-> movea.l 12(sp),a0
    f878:	|      movea.l 24(a0),a0
    f87c:	|      movea.l 8(a0),a0
    f880:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f884:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f886:	|      movea.l 12(sp),a0
    f88a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f88e:	|      clr.l -(sp)
    f890:	|      move.l d1,-(sp)
    f892:	|      move.l d0,-(sp)
    f894:	|      jsr 141ea <deleteVarFromStack>
    f89a:	|      lea 12(sp),sp
    f89e:	|      move.l d0,d1
    f8a0:	|      moveq #28,d0
    f8a2:	|      add.l 12(sp),d0
    f8a6:	|      move.l d1,-(sp)
    f8a8:	|      pea 1 <_start+0x1>
    f8ac:	|      move.l d0,-(sp)
    f8ae:	|      jsr 14f00 <setVariable>
    f8b4:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f8b8:	|      movea.l 12(sp),a0
    f8bc:	|      movea.l 24(a0),a0
    f8c0:	|      movea.l 8(a0),a0
    f8c4:	|      movea.l 4(a0),a0
    f8c8:	|      move.l (a0),d0
    f8ca:	|      movea.l 12(sp),a0
    f8ce:	|      movea.l 24(a0),a0
    f8d2:	|      movea.l 8(a0),a0
    f8d6:	|      movea.l 4(a0),a2
    f8da:	|      move.l d0,-(sp)
    f8dc:	|      jsr 14f4a <stackFindLast>
    f8e2:	|      addq.l #4,sp
    f8e4:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f8e8:	|      moveq #24,d0
    f8ea:	|      add.l 12(sp),d0
    f8ee:	|      move.l d0,-(sp)
    f8f0:	|      jsr 14f92 <trimStack>
    f8f6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f8f8:	|      moveq #24,d0
    f8fa:	|      add.l 12(sp),d0
    f8fe:	|      move.l d0,-(sp)
    f900:	|      jsr 14f92 <trimStack>
    f906:	|      addq.l #4,sp
	return BR_CONTINUE;
    f908:	|      moveq #2,d0
}
    f90a:	\----> movea.l (sp)+,a2
    f90c:	       rts

0000f90e <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    f90e:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f910:	       movea.l 12(sp),a0
    f914:	       movea.l 24(a0),a0
    f918:	       movea.l 8(a0),a0
    f91c:	       move.l (a0),d0
    f91e:	       moveq #6,d1
    f920:	       cmp.l d0,d1
    f922:	   /-- beq.s f938 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f924:	   |   pea 19665 <PutChar+0x1b5b>
    f92a:	   |   jsr 17036 <KPrintF>
    f930:	   |   addq.l #4,sp
		return BR_ERROR;
    f932:	   |   moveq #1,d0
    f934:	/--|-- bra.w f9d0 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    f938:	|  \-> movea.l 12(sp),a0
    f93c:	|      movea.l 24(a0),a0
    f940:	|      movea.l 8(a0),a0
    f944:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f948:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f94a:	|      movea.l 12(sp),a0
    f94e:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f952:	|      pea 1 <_start+0x1>
    f956:	|      move.l d1,-(sp)
    f958:	|      move.l d0,-(sp)
    f95a:	|      jsr 141ea <deleteVarFromStack>
    f960:	|      lea 12(sp),sp
    f964:	|      move.l d0,d1
    f966:	|      moveq #28,d0
    f968:	|      add.l 12(sp),d0
    f96c:	|      move.l d1,-(sp)
    f96e:	|      pea 1 <_start+0x1>
    f972:	|      move.l d0,-(sp)
    f974:	|      jsr 14f00 <setVariable>
    f97a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f97e:	|      movea.l 12(sp),a0
    f982:	|      movea.l 24(a0),a0
    f986:	|      movea.l 8(a0),a0
    f98a:	|      movea.l 4(a0),a0
    f98e:	|      move.l (a0),d0
    f990:	|      movea.l 12(sp),a0
    f994:	|      movea.l 24(a0),a0
    f998:	|      movea.l 8(a0),a0
    f99c:	|      movea.l 4(a0),a2
    f9a0:	|      move.l d0,-(sp)
    f9a2:	|      jsr 14f4a <stackFindLast>
    f9a8:	|      addq.l #4,sp
    f9aa:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f9ae:	|      moveq #24,d0
    f9b0:	|      add.l 12(sp),d0
    f9b4:	|      move.l d0,-(sp)
    f9b6:	|      jsr 14f92 <trimStack>
    f9bc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f9be:	|      moveq #24,d0
    f9c0:	|      add.l 12(sp),d0
    f9c4:	|      move.l d0,-(sp)
    f9c6:	|      jsr 14f92 <trimStack>
    f9cc:	|      addq.l #4,sp
	return BR_CONTINUE;
    f9ce:	|      moveq #2,d0
}
    f9d0:	\----> movea.l (sp)+,a2
    f9d2:	       rts

0000f9d4 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f9d4:	       movea.l 8(sp),a0
    f9d8:	       movea.l 24(a0),a0
    f9dc:	       move.l (a0),d0
    f9de:	       moveq #6,d1
    f9e0:	       cmp.l d0,d1
    f9e2:	   /-- beq.s f9f6 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f9e4:	   |   pea 19665 <PutChar+0x1b5b>
    f9ea:	   |   jsr 17036 <KPrintF>
    f9f0:	   |   addq.l #4,sp
		return BR_ERROR;
    f9f2:	   |   moveq #1,d0
    f9f4:	/--|-- bra.s fa60 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f9f6:	|  \-> movea.l 8(sp),a0
    f9fa:	|      movea.l 24(a0),a0
    f9fe:	|      movea.l 4(a0),a0
    fa02:	|      move.l (a0),d0
    fa04:	|  /-- bne.s fa18 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fa06:	|  |   pea 19696 <PutChar+0x1b8c>
    fa0c:	|  |   jsr 17036 <KPrintF>
    fa12:	|  |   addq.l #4,sp
		return BR_ERROR;
    fa14:	|  |   moveq #1,d0
    fa16:	+--|-- bra.s fa60 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fa18:	|  \-> moveq #28,d0
    fa1a:	|      add.l 8(sp),d0
    fa1e:	|      movea.l 8(sp),a0
    fa22:	|      movea.l 24(a0),a0
    fa26:	|      movea.l 4(a0),a0
    fa2a:	|      move.l (a0),d1
    fa2c:	|      move.l d0,-(sp)
    fa2e:	|      move.l d1,-(sp)
    fa30:	|      jsr 14ac8 <copyVariable>
    fa36:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fa38:	|      movea.l 8(sp),a0
    fa3c:	|      movea.l 24(a0),a0
    fa40:	|      move.l 4(a0),d0
    fa44:	|      move.l d0,-(sp)
    fa46:	|      jsr 14f92 <trimStack>
    fa4c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fa4e:	|      moveq #24,d0
    fa50:	|      add.l 8(sp),d0
    fa54:	|      move.l d0,-(sp)
    fa56:	|      jsr 14f92 <trimStack>
    fa5c:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa5e:	|      moveq #2,d0
}
    fa60:	\----> rts

0000fa62 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fa62:	       movea.l 8(sp),a0
    fa66:	       movea.l 24(a0),a0
    fa6a:	       move.l (a0),d0
    fa6c:	       moveq #6,d1
    fa6e:	       cmp.l d0,d1
    fa70:	   /-- beq.s fa84 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fa72:	   |   pea 19665 <PutChar+0x1b5b>
    fa78:	   |   jsr 17036 <KPrintF>
    fa7e:	   |   addq.l #4,sp
		return BR_ERROR;
    fa80:	   |   moveq #1,d0
    fa82:	/--|-- bra.s fad8 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fa84:	|  \-> movea.l 8(sp),a0
    fa88:	|      movea.l 24(a0),a0
    fa8c:	|      movea.l 4(a0),a0
    fa90:	|      move.l (a0),d0
    fa92:	|  /-- bne.s faa6 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fa94:	|  |   pea 19696 <PutChar+0x1b8c>
    fa9a:	|  |   jsr 17036 <KPrintF>
    faa0:	|  |   addq.l #4,sp
		return BR_ERROR;
    faa2:	|  |   moveq #1,d0
    faa4:	+--|-- bra.s fad8 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    faa6:	|  \-> moveq #28,d0
    faa8:	|      add.l 8(sp),d0
    faac:	|      movea.l 8(sp),a0
    fab0:	|      movea.l 24(a0),a0
    fab4:	|      movea.l 4(a0),a0
    fab8:	|      move.l (a0),d1
    faba:	|      move.l d0,-(sp)
    fabc:	|      move.l d1,-(sp)
    fabe:	|      jsr 14ac8 <copyVariable>
    fac4:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fac6:	|      moveq #24,d0
    fac8:	|      add.l 8(sp),d0
    facc:	|      move.l d0,-(sp)
    face:	|      jsr 14f92 <trimStack>
    fad4:	|      addq.l #4,sp
	return BR_CONTINUE;
    fad6:	|      moveq #2,d0
}
    fad8:	\----> rts

0000fada <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fada:	       movea.l 8(sp),a0
    fade:	       movea.l 24(a0),a0
    fae2:	       move.l (a0),d0
    fae4:	       moveq #6,d1
    fae6:	       cmp.l d0,d1
    fae8:	   /-- beq.s fafc <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    faea:	   |   pea 19665 <PutChar+0x1b5b>
    faf0:	   |   jsr 17036 <KPrintF>
    faf6:	   |   addq.l #4,sp
		return BR_ERROR;
    faf8:	   |   moveq #1,d0
    fafa:	/--|-- bra.s fb52 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fafc:	|  \-> movea.l 8(sp),a0
    fb00:	|      movea.l 24(a0),a0
    fb04:	|      movea.l 4(a0),a0
    fb08:	|      move.l (a0),d0
    fb0a:	|  /-- bne.s fb1e <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fb0c:	|  |   pea 19696 <PutChar+0x1b8c>
    fb12:	|  |   jsr 17036 <KPrintF>
    fb18:	|  |   addq.l #4,sp
		return BR_ERROR;
    fb1a:	|  |   moveq #1,d0
    fb1c:	+--|-- bra.s fb52 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fb1e:	|  \-> moveq #28,d0
    fb20:	|      add.l 8(sp),d0
    fb24:	|      movea.l 8(sp),a0
    fb28:	|      movea.l 24(a0),a0
    fb2c:	|      movea.l 4(a0),a0
    fb30:	|      move.l 4(a0),d1
    fb34:	|      move.l d0,-(sp)
    fb36:	|      move.l d1,-(sp)
    fb38:	|      jsr 14ac8 <copyVariable>
    fb3e:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fb40:	|      moveq #24,d0
    fb42:	|      add.l 8(sp),d0
    fb46:	|      move.l d0,-(sp)
    fb48:	|      jsr 14f92 <trimStack>
    fb4e:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb50:	|      moveq #2,d0
}
    fb52:	\----> rts

0000fb54 <builtIn_random>:

builtIn(random)
{
    fb54:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fb56:	       movea.l 12(sp),a0
    fb5a:	       move.l 24(a0),d0
    fb5e:	       move.l d0,-(sp)
    fb60:	       pea 1 <_start+0x1>
    fb64:	       move.l sp,d0
    fb66:	       addq.l #8,d0
    fb68:	       move.l d0,-(sp)
    fb6a:	       jsr 1460e <getValueType>
    fb70:	       lea 12(sp),sp
    fb74:	       tst.w d0
    fb76:	   /-- bne.s fb7c <builtIn_random+0x28>
		return BR_ERROR;
    fb78:	   |   moveq #1,d0
    fb7a:	/--|-- bra.s fbc6 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fb7c:	|  \-> moveq #24,d0
    fb7e:	|      add.l 12(sp),d0
    fb82:	|      move.l d0,-(sp)
    fb84:	|      jsr 14f92 <trimStack>
    fb8a:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fb8c:	|      move.l (sp),d0
    fb8e:	|  /-- bgt.s fb94 <builtIn_random+0x40>
    fb90:	|  |   moveq #1,d0
    fb92:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fb94:	|  \-> jsr 15c36 <rand>
    fb9a:	|      move.l d0,d1
    fb9c:	|      move.l (sp),d0
    fb9e:	|      move.l d0,-(sp)
    fba0:	|      move.l d1,-(sp)
    fba2:	|      jsr 17ace <__umodsi3>
    fba8:	|      addq.l #8,sp
    fbaa:	|      move.l d0,d1
    fbac:	|      moveq #28,d0
    fbae:	|      add.l 12(sp),d0
    fbb2:	|      move.l d1,-(sp)
    fbb4:	|      pea 1 <_start+0x1>
    fbb8:	|      move.l d0,-(sp)
    fbba:	|      jsr 14f00 <setVariable>
    fbc0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fbc4:	|      moveq #2,d0
}
    fbc6:	\----> addq.l #4,sp
    fbc8:	       rts

0000fbca <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fbca:	nop
    fbcc:	rts

0000fbce <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fbce:	moveq #2,d0
}
    fbd0:	rts

0000fbd2 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fbd2:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fbd4:	       movea.l 12(sp),a0
    fbd8:	       move.l 24(a0),d0
    fbdc:	       move.l d0,-(sp)
    fbde:	       pea 1 <_start+0x1>
    fbe2:	       move.l sp,d0
    fbe4:	       addq.l #8,d0
    fbe6:	       move.l d0,-(sp)
    fbe8:	       jsr 1460e <getValueType>
    fbee:	       lea 12(sp),sp
    fbf2:	       tst.w d0
    fbf4:	   /-- bne.s fc08 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fbf6:	   |   pea 196a9 <PutChar+0x1b9f>
    fbfc:	   |   jsr 17036 <KPrintF>
    fc02:	   |   addq.l #4,sp
		return BR_ERROR;
    fc04:	   |   moveq #1,d0
    fc06:	/--|-- bra.s fc48 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fc08:	|  \-> moveq #24,d0
    fc0a:	|      add.l 12(sp),d0
    fc0e:	|      move.l d0,-(sp)
    fc10:	|      jsr 14f92 <trimStack>
    fc16:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fc18:	|      move.l (sp),d0
    fc1a:	|      move.l d0,d0
    fc1c:	|      move.w d0,1a6be <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fc22:	|      move.w 1a6be <textPaletteIndex>,d0
    fc28:	|      cmpi.w #31,d0
    fc2c:	|  /-- bls.s fc46 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fc2e:	|  |   pea 196d0 <PutChar+0x1bc6>
    fc34:	|  |   jsr 17036 <KPrintF>
    fc3a:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fc3c:	|  |   clr.w 1a6be <textPaletteIndex>
		return BR_ERROR;
    fc42:	|  |   moveq #1,d0
    fc44:	+--|-- bra.s fc48 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fc46:	|  \-> moveq #2,d0
}
    fc48:	\----> addq.l #4,sp
    fc4a:	       rts

0000fc4c <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fc4c:	moveq #2,d0
}
    fc4e:	rts

0000fc50 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fc50:	moveq #2,d0
}
    fc52:	rts

0000fc54 <builtIn_setFont>:


builtIn(setFont)
{
    fc54:	       lea -16(sp),sp
    fc58:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fc5a:	       movea.l 28(sp),a0
    fc5e:	       move.l 24(a0),d0
    fc62:	       move.l d0,-(sp)
    fc64:	       pea 1 <_start+0x1>
    fc68:	       lea 12(sp),a0
    fc6c:	       move.l a0,-(sp)
    fc6e:	       jsr 1460e <getValueType>
    fc74:	       lea 12(sp),sp
    fc78:	       tst.w d0
    fc7a:	   /-- bne.s fc82 <builtIn_setFont+0x2e>
    fc7c:	   |   moveq #1,d0
    fc7e:	/--|-- bra.w fd30 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fc82:	|  \-> moveq #24,d0
    fc84:	|      add.l 28(sp),d0
    fc88:	|      move.l d0,-(sp)
    fc8a:	|      jsr 14f92 <trimStack>
    fc90:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fc92:	|      movea.l 28(sp),a0
    fc96:	|      move.l 24(a0),d0
    fc9a:	|      move.l d0,-(sp)
    fc9c:	|      jsr 14be4 <getTextFromAnyVar>
    fca2:	|      addq.l #4,sp
    fca4:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fca8:	|  /-- bne.s fcb0 <builtIn_setFont+0x5c>
    fcaa:	|  |   moveq #1,d0
    fcac:	+--|-- bra.w fd30 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fcb0:	|  \-> moveq #24,d0
    fcb2:	|      add.l 28(sp),d0
    fcb6:	|      move.l d0,-(sp)
    fcb8:	|      jsr 14f92 <trimStack>
    fcbe:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fcc0:	|      movea.l 28(sp),a0
    fcc4:	|      move.l 24(a0),d0
    fcc8:	|      move.l d0,-(sp)
    fcca:	|      pea 5 <_start+0x5>
    fcce:	|      lea 16(sp),a0
    fcd2:	|      move.l a0,-(sp)
    fcd4:	|      jsr 1460e <getValueType>
    fcda:	|      lea 12(sp),sp
    fcde:	|      tst.w d0
    fce0:	|  /-- bne.s fce6 <builtIn_setFont+0x92>
    fce2:	|  |   moveq #1,d0
    fce4:	+--|-- bra.s fd30 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fce6:	|  \-> moveq #24,d0
    fce8:	|      add.l 28(sp),d0
    fcec:	|      move.l d0,-(sp)
    fcee:	|      jsr 14f92 <trimStack>
    fcf4:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fcf6:	|      move.l 4(sp),d1
    fcfa:	|      move.l 8(sp),d0
    fcfe:	|      move.l d1,-(sp)
    fd00:	|      move.l 20(sp),-(sp)
    fd04:	|      move.l d0,-(sp)
    fd06:	|      jsr 1541a <loadFont>
    fd0c:	|      lea 12(sp),sp
    fd10:	|      tst.w d0
    fd12:	|  /-- bne.s fd18 <builtIn_setFont+0xc4>
    fd14:	|  |   moveq #1,d0
    fd16:	+--|-- bra.s fd30 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fd18:	|  \-> move.l 16(sp),12(sp)
    fd1e:	|      move.l 1a7a4 <SysBase>,d0
    fd24:	|      movea.l d0,a6
    fd26:	|      movea.l 12(sp),a1
    fd2a:	|      jsr -690(a6)

    return BR_CONTINUE;
    fd2e:	|      moveq #2,d0
}
    fd30:	\----> movea.l (sp)+,a6
    fd32:	       lea 16(sp),sp
    fd36:	       rts

0000fd38 <builtIn_inFont>:

builtIn(inFont)
{
    fd38:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fd3a:	       movea.l 12(sp),a0
    fd3e:	       move.l 24(a0),d0
    fd42:	       move.l d0,-(sp)
    fd44:	       jsr 14be4 <getTextFromAnyVar>
    fd4a:	       addq.l #4,sp
    fd4c:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fd4e:	   /-- bne.s fd54 <builtIn_inFont+0x1c>
    fd50:	   |   moveq #1,d0
    fd52:	/--|-- bra.s fd8a <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fd54:	|  \-> moveq #24,d0
    fd56:	|      add.l 12(sp),d0
    fd5a:	|      move.l d0,-(sp)
    fd5c:	|      jsr 14f92 <trimStack>
    fd62:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fd64:	|      move.l (sp),-(sp)
    fd66:	|      jsr 15408 <isInFont>
    fd6c:	|      addq.l #4,sp
    fd6e:	|      movea.w d0,a0
    fd70:	|      moveq #28,d0
    fd72:	|      add.l 12(sp),d0
    fd76:	|      move.l a0,-(sp)
    fd78:	|      pea 1 <_start+0x1>
    fd7c:	|      move.l d0,-(sp)
    fd7e:	|      jsr 14f00 <setVariable>
    fd84:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd88:	|      moveq #2,d0
}
    fd8a:	\----> addq.l #4,sp
    fd8c:	       rts

0000fd8e <builtIn_pasteString>:

builtIn(pasteString)
{
    fd8e:	       lea -16(sp),sp
    fd92:	       move.l a6,-(sp)
    fd94:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fd96:	       movea.l 32(sp),a0
    fd9a:	       move.l 24(a0),d0
    fd9e:	       move.l d0,-(sp)
    fda0:	       jsr 14be4 <getTextFromAnyVar>
    fda6:	       addq.l #4,sp
    fda8:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    fdac:	       moveq #24,d0
    fdae:	       add.l 32(sp),d0
    fdb2:	       move.l d0,-(sp)
    fdb4:	       jsr 14f92 <trimStack>
    fdba:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fdbc:	       movea.l 32(sp),a0
    fdc0:	       move.l 24(a0),d0
    fdc4:	       move.l d0,-(sp)
    fdc6:	       pea 1 <_start+0x1>
    fdca:	       lea 20(sp),a0
    fdce:	       move.l a0,-(sp)
    fdd0:	       jsr 1460e <getValueType>
    fdd6:	       lea 12(sp),sp
    fdda:	       tst.w d0
    fddc:	   /-- bne.s fde4 <builtIn_pasteString+0x56>
    fdde:	   |   moveq #1,d0
    fde0:	/--|-- bra.w fe86 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fde4:	|  \-> moveq #24,d0
    fde6:	|      add.l 32(sp),d0
    fdea:	|      move.l d0,-(sp)
    fdec:	|      jsr 14f92 <trimStack>
    fdf2:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fdf4:	|      movea.l 32(sp),a0
    fdf8:	|      move.l 24(a0),d0
    fdfc:	|      move.l d0,-(sp)
    fdfe:	|      pea 1 <_start+0x1>
    fe02:	|      lea 16(sp),a0
    fe06:	|      move.l a0,-(sp)
    fe08:	|      jsr 1460e <getValueType>
    fe0e:	|      lea 12(sp),sp
    fe12:	|      tst.w d0
    fe14:	|  /-- bne.s fe1a <builtIn_pasteString+0x8c>
    fe16:	|  |   moveq #1,d0
    fe18:	+--|-- bra.s fe86 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fe1a:	|  \-> moveq #24,d0
    fe1c:	|      add.l 32(sp),d0
    fe20:	|      move.l d0,-(sp)
    fe22:	|      jsr 14f92 <trimStack>
    fe28:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    fe2a:	|      move.l 8(sp),d0
    fe2e:	|      cmpi.l #65535,d0
    fe34:	|  /-- bne.s fe54 <builtIn_pasteString+0xc6>
    fe36:	|  |   move.l 1a6f8 <winWidth>,d2
    fe3c:	|  |   move.l 20(sp),-(sp)
    fe40:	|  |   jsr 156f8 <stringWidth>
    fe46:	|  |   addq.l #4,sp
    fe48:	|  |   move.l d2,d1
    fe4a:	|  |   sub.l d0,d1
    fe4c:	|  |   move.l d1,d0
    fe4e:	|  |   lsr.l #1,d0
    fe50:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    fe54:	|  \-> move.l 12(sp),d1
    fe58:	|      move.l 8(sp),d0
    fe5c:	|      move.l d1,-(sp)
    fe5e:	|      move.l d0,-(sp)
    fe60:	|      move.l 28(sp),-(sp)
    fe64:	|      jsr 1561a <pasteStringToBackdrop>
    fe6a:	|      lea 12(sp),sp
    FreeVec(newText); 
    fe6e:	|      move.l 20(sp),16(sp)
    fe74:	|      move.l 1a7a4 <SysBase>,d0
    fe7a:	|      movea.l d0,a6
    fe7c:	|      movea.l 16(sp),a1
    fe80:	|      jsr -690(a6)
    return BR_CONTINUE;
    fe84:	|      moveq #2,d0
}
    fe86:	\----> move.l (sp)+,d2
    fe88:	       movea.l (sp)+,a6
    fe8a:	       lea 16(sp),sp
    fe8e:	       rts

0000fe90 <builtIn_anim>:

builtIn(anim)
{
    fe90:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    fe94:	       moveq #1,d0
    fe96:	       cmp.l 16(sp),d0
    fe9a:	   /-- blt.s feb0 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    fe9c:	   |   pea 196fa <PutChar+0x1bf0>
    fea2:	   |   jsr 17036 <KPrintF>
    fea8:	   |   addq.l #4,sp
		return BR_ERROR;
    feaa:	   |   moveq #1,d0
    feac:	/--|-- bra.w ff3e <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    feb0:	|  \-> moveq #24,d1
    feb2:	|      add.l 20(sp),d1
    feb6:	|      move.l 16(sp),d0
    feba:	|      subq.l #1,d0
    febc:	|      move.l d1,-(sp)
    febe:	|      move.l d0,-(sp)
    fec0:	|      jsr 95c2 <createPersonaAnim>
    fec6:	|      addq.l #8,sp
    fec8:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fecc:	|      movea.l 20(sp),a0
    fed0:	|      move.l 24(a0),d0
    fed4:	|      move.l d0,-(sp)
    fed6:	|      pea 5 <_start+0x5>
    feda:	|      lea 8(sp),a0
    fede:	|      move.l a0,-(sp)
    fee0:	|      jsr 1460e <getValueType>
    fee6:	|      lea 12(sp),sp
    feea:	|      tst.w d0
    feec:	|  /-- bne.s fef2 <builtIn_anim+0x62>
    feee:	|  |   moveq #1,d0
    fef0:	+--|-- bra.s ff3e <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    fef2:	|  \-> moveq #24,d0
    fef4:	|      add.l 20(sp),d0
    fef8:	|      move.l d0,-(sp)
    fefa:	|      jsr 14f92 <trimStack>
    ff00:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    ff02:	|      move.l (sp),d0
    ff04:	|      move.l d0,-(sp)
    ff06:	|      jsr 15d98 <loadBankForAnim>
    ff0c:	|      addq.l #4,sp
    ff0e:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    ff12:	|  /-- bne.s ff18 <builtIn_anim+0x88>
    ff14:	|  |   moveq #1,d0
    ff16:	+--|-- bra.s ff3e <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    ff18:	|  \-> move.l 4(sp),-(sp)
    ff1c:	|      move.l 12(sp),-(sp)
    ff20:	|      jsr b46c <setBankFile>
    ff26:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    ff28:	|      moveq #28,d0
    ff2a:	|      add.l 20(sp),d0
    ff2e:	|      move.l 8(sp),-(sp)
    ff32:	|      move.l d0,-(sp)
    ff34:	|      jsr 14ebc <newAnimationVariable>
    ff3a:	|      addq.l #8,sp
	return BR_CONTINUE;
    ff3c:	|      moveq #2,d0
}
    ff3e:	\----> lea 12(sp),sp
    ff42:	       rts

0000ff44 <builtIn_costume>:

builtIn(costume)
{
    ff44:	          lea -32(sp),sp
    ff48:	          move.l a6,-(sp)
    ff4a:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    ff4c:	          moveq #8,d0
    ff4e:	          move.l d0,32(sp)
    ff52:	          clr.l 28(sp)
    ff56:	          move.l 1a7a4 <SysBase>,d0
    ff5c:	          movea.l d0,a6
    ff5e:	          move.l 32(sp),d0
    ff62:	          move.l 28(sp),d1
    ff66:	          jsr -684(a6)
    ff6a:	          move.l d0,24(sp)
    ff6e:	          move.l 24(sp),d0
    ff72:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    ff76:	      /-- bne.s ff7e <builtIn_costume+0x3a>
    ff78:	      |   moveq #1,d0
    ff7a:	/-----|-- bra.w 10066 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    ff7e:	|     \-> move.l 44(sp),d0
    ff82:	|         pea 3 <_start+0x3>
    ff86:	|         move.l d0,-(sp)
    ff88:	|         jsr 17a72 <__divsi3>
    ff8e:	|         addq.l #8,sp
    ff90:	|         movea.l 20(sp),a0
    ff94:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    ff98:	|         tst.l 44(sp)
    ff9c:	|     /-- beq.s ffb2 <builtIn_costume+0x6e>
    ff9e:	|     |   movea.l 20(sp),a0
    ffa2:	|     |   move.l 4(a0),d1
    ffa6:	|     |   move.l d1,d0
    ffa8:	|     |   add.l d0,d0
    ffaa:	|     |   add.l d1,d0
    ffac:	|     |   cmp.l 44(sp),d0
    ffb0:	|  /--|-- beq.s ffc6 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    ffb2:	|  |  \-> pea 19734 <PutChar+0x1c2a>
    ffb8:	|  |      jsr 17036 <KPrintF>
    ffbe:	|  |      addq.l #4,sp
        return BR_ERROR;
    ffc0:	|  |      moveq #1,d0
    ffc2:	+--|----- bra.w 10066 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    ffc6:	|  \----> move.l 44(sp),d0
    ffca:	|         add.l d0,d0
    ffcc:	|         add.l d0,d0
    ffce:	|         move.l d0,16(sp)
    ffd2:	|         clr.l 12(sp)
    ffd6:	|         move.l 1a7a4 <SysBase>,d0
    ffdc:	|         movea.l d0,a6
    ffde:	|         move.l 16(sp),d0
    ffe2:	|         move.l 12(sp),d1
    ffe6:	|         jsr -684(a6)
    ffea:	|         move.l d0,8(sp)
    ffee:	|         move.l 8(sp),d0
    fff2:	|         movea.l 20(sp),a0
    fff6:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    fff8:	|         movea.l 20(sp),a0
    fffc:	|         move.l (a0),d0
    fffe:	|     /-- bne.s 10004 <builtIn_costume+0xc0>
   10000:	|     |   moveq #1,d0
   10002:	+-----|-- bra.s 10066 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10004:	|     \-> move.l 44(sp),d0
   10008:	|         subq.l #1,d0
   1000a:	|         move.l d0,36(sp)
   1000e:	|     /-- bra.s 1004a <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10010:	|  /--|-> movea.l 48(sp),a0
   10014:	|  |  |   move.l 24(a0),d0
   10018:	|  |  |   movea.l 20(sp),a0
   1001c:	|  |  |   movea.l (a0),a0
   1001e:	|  |  |   move.l 36(sp),d1
   10022:	|  |  |   add.l d1,d1
   10024:	|  |  |   add.l d1,d1
   10026:	|  |  |   lea (0,a0,d1.l),a2
   1002a:	|  |  |   move.l d0,-(sp)
   1002c:	|  |  |   jsr 14ae6 <getAnimationFromVar>
   10032:	|  |  |   addq.l #4,sp
   10034:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10036:	|  |  |   moveq #24,d0
   10038:	|  |  |   add.l 48(sp),d0
   1003c:	|  |  |   move.l d0,-(sp)
   1003e:	|  |  |   jsr 14f92 <trimStack>
   10044:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10046:	|  |  |   subq.l #1,36(sp)
   1004a:	|  |  \-> tst.l 36(sp)
   1004e:	|  \----- bge.s 10010 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10050:	|         moveq #28,d0
   10052:	|         add.l 48(sp),d0
   10056:	|         move.l 20(sp),-(sp)
   1005a:	|         move.l d0,-(sp)
   1005c:	|         jsr 14ede <newCostumeVariable>
   10062:	|         addq.l #8,sp
    return BR_CONTINUE;
   10064:	|         moveq #2,d0
}
   10066:	\-------> movea.l (sp)+,a2
   10068:	          movea.l (sp)+,a6
   1006a:	          lea 32(sp),sp
   1006e:	          rts

00010070 <builtIn_launch>:

builtIn(launch)
{
   10070:	          lea -20(sp),sp
   10074:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10076:	          movea.l 32(sp),a0
   1007a:	          move.l 24(a0),d0
   1007e:	          move.l d0,-(sp)
   10080:	          jsr 14be4 <getTextFromAnyVar>
   10086:	          addq.l #4,sp
   10088:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   1008c:	      /-- bne.s 10094 <builtIn_launch+0x24>
   1008e:	      |   moveq #1,d0
   10090:	/-----|-- bra.w 101c2 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   10094:	|     \-> move.l 20(sp),-(sp)
   10098:	|         jsr 2fe <encodeFilename>
   1009e:	|         addq.l #4,sp
   100a0:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   100a4:	|         moveq #24,d0
   100a6:	|         add.l 32(sp),d0
   100aa:	|         move.l d0,-(sp)
   100ac:	|         jsr 14f92 <trimStack>
   100b2:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   100b4:	|         movea.l 20(sp),a0
   100b8:	|         move.b (a0),d0
   100ba:	|         cmpi.b #104,d0
   100be:	|  /----- bne.s 10128 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   100c0:	|  |      movea.l 20(sp),a0
   100c4:	|  |      addq.l #1,a0
   100c6:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   100c8:	|  |      cmpi.b #116,d0
   100cc:	|  +----- bne.s 10128 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   100ce:	|  |      movea.l 20(sp),a0
   100d2:	|  |      addq.l #2,a0
   100d4:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   100d6:	|  |      cmpi.b #116,d0
   100da:	|  +----- bne.s 10128 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   100dc:	|  |      movea.l 20(sp),a0
   100e0:	|  |      addq.l #3,a0
   100e2:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   100e4:	|  |      cmpi.b #112,d0
   100e8:	|  +----- bne.s 10128 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   100ea:	|  |      movea.l 20(sp),a0
   100ee:	|  |      addq.l #4,a0
   100f0:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   100f2:	|  |      cmpi.b #58,d0
   100f6:	|  |  /-- beq.s 10114 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   100f8:	|  |  |   movea.l 20(sp),a0
   100fc:	|  |  |   addq.l #4,a0
   100fe:	|  |  |   move.b (a0),d0
   10100:	|  |  |   cmpi.b #115,d0
   10104:	|  +--|-- bne.s 10128 <builtIn_launch+0xb8>
   10106:	|  |  |   movea.l 20(sp),a0
   1010a:	|  |  |   addq.l #5,a0
   1010c:	|  |  |   move.b (a0),d0
   1010e:	|  |  |   cmpi.b #58,d0
   10112:	|  +--|-- bne.s 10128 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   10114:	|  |  \-> move.l 20(sp),-(sp)
   10118:	|  |      jsr b8 <copyString>
   1011e:	|  |      addq.l #4,sp
   10120:	|  |      move.l d0,1a866 <launchMe>
   10126:	|  |  /-- bra.s 1017a <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10128:	|  \--|-> move.l 1a70c <gamePath>,d0
   1012e:	|     |   pea 1977f <PutChar+0x1c75>
   10134:	|     |   move.l d0,-(sp)
   10136:	|     |   jsr 13b3a <joinStrings>
   1013c:	|     |   addq.l #8,sp
   1013e:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10142:	|     |   move.l 16(sp),-(sp)
   10146:	|     |   move.l 16(sp),-(sp)
   1014a:	|     |   jsr 13b3a <joinStrings>
   10150:	|     |   addq.l #8,sp
   10152:	|     |   move.l d0,1a866 <launchMe>
        FreeVec(newText);
   10158:	|     |   move.l 16(sp),8(sp)
   1015e:	|     |   move.l 1a7a4 <SysBase>,d0
   10164:	|     |   movea.l d0,a6
   10166:	|     |   movea.l 8(sp),a1
   1016a:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   1016e:	|     |   move.l 1a866 <launchMe>,d0
   10174:	|     +-- bne.s 1017a <builtIn_launch+0x10a>
   10176:	|     |   moveq #1,d0
   10178:	+-----|-- bra.s 101c2 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   1017a:	|     \-> move.l 20(sp),4(sp)
   10180:	|         move.l 1a7a4 <SysBase>,d0
   10186:	|         movea.l d0,a6
   10188:	|         movea.l 4(sp),a1
   1018c:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10190:	|         clr.l -(sp)
   10192:	|         jsr 4018 <setGraphicsWindow>
   10198:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   1019a:	|         moveq #28,d0
   1019c:	|         add.l 32(sp),d0
   101a0:	|         pea 1 <_start+0x1>
   101a4:	|         pea 1 <_start+0x1>
   101a8:	|         move.l d0,-(sp)
   101aa:	|         jsr 14f00 <setVariable>
   101b0:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   101b4:	|         moveq #28,d0
   101b6:	|         add.l 32(sp),d0
   101ba:	|         move.l d0,1a86a <launchResult>

    return BR_KEEP_AND_PAUSE;
   101c0:	|         moveq #0,d0
}
   101c2:	\-------> movea.l (sp)+,a6
   101c4:	          lea 20(sp),sp
   101c8:	          rts

000101ca <builtIn_pause>:

builtIn(pause)
{
   101ca:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   101cc:	       movea.l 12(sp),a0
   101d0:	       move.l 24(a0),d0
   101d4:	       move.l d0,-(sp)
   101d6:	       pea 1 <_start+0x1>
   101da:	       move.l sp,d0
   101dc:	       addq.l #8,d0
   101de:	       move.l d0,-(sp)
   101e0:	       jsr 1460e <getValueType>
   101e6:	       lea 12(sp),sp
   101ea:	       tst.w d0
   101ec:	   /-- bne.s 101f2 <builtIn_pause+0x28>
   101ee:	   |   moveq #1,d0
   101f0:	/--|-- bra.s 10220 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   101f2:	|  \-> moveq #24,d0
   101f4:	|      add.l 12(sp),d0
   101f8:	|      move.l d0,-(sp)
   101fa:	|      jsr 14f92 <trimStack>
   10200:	|      addq.l #4,sp
	if (theTime > 0) {
   10202:	|      move.l (sp),d0
   10204:	|  /-- ble.s 1021e <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   10206:	|  |   move.l (sp),d0
   10208:	|  |   subq.l #1,d0
   1020a:	|  |   movea.l 12(sp),a0
   1020e:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   10212:	|  |   movea.l 12(sp),a0
   10216:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   1021a:	|  |   moveq #0,d0
   1021c:	+--|-- bra.s 10220 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   1021e:	|  \-> moveq #2,d0
}
   10220:	\----> addq.l #4,sp
   10222:	       rts

00010224 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10224:	jsr 477a <completeTimers>
	return BR_CONTINUE;
   1022a:	moveq #2,d0
}
   1022c:	rts

0001022e <builtIn_callEvent>:

builtIn(callEvent)
{
   1022e:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10232:	       movea.l 20(sp),a0
   10236:	       move.l 24(a0),d0
   1023a:	       move.l d0,-(sp)
   1023c:	       pea 7 <_start+0x7>
   10240:	       lea 8(sp),a0
   10244:	       move.l a0,-(sp)
   10246:	       jsr 1460e <getValueType>
   1024c:	       lea 12(sp),sp
   10250:	       tst.w d0
   10252:	   /-- bne.s 1025a <builtIn_callEvent+0x2c>
   10254:	   |   moveq #1,d0
   10256:	/--|-- bra.w 102f0 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1025a:	|  \-> moveq #24,d0
   1025c:	|      add.l 20(sp),d0
   10260:	|      move.l d0,-(sp)
   10262:	|      jsr 14f92 <trimStack>
   10268:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1026a:	|      movea.l 20(sp),a0
   1026e:	|      move.l 24(a0),d0
   10272:	|      move.l d0,-(sp)
   10274:	|      pea 7 <_start+0x7>
   10278:	|      moveq #12,d0
   1027a:	|      add.l sp,d0
   1027c:	|      move.l d0,-(sp)
   1027e:	|      jsr 1460e <getValueType>
   10284:	|      lea 12(sp),sp
   10288:	|      tst.w d0
   1028a:	|  /-- bne.s 10290 <builtIn_callEvent+0x62>
   1028c:	|  |   moveq #1,d0
   1028e:	+--|-- bra.s 102f0 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10290:	|  \-> moveq #24,d0
   10292:	|      add.l 20(sp),d0
   10296:	|      move.l d0,-(sp)
   10298:	|      jsr 14f92 <trimStack>
   1029e:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   102a0:	|      move.l (sp),d1
   102a2:	|      move.l 4(sp),d0
   102a6:	|      move.l d1,-(sp)
   102a8:	|      move.l d0,-(sp)
   102aa:	|      jsr d3ac <getCombinationFunction>
   102b0:	|      addq.l #8,sp
   102b2:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   102b6:	|  /-- beq.s 102d6 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   102b8:	|  |   moveq #28,d0
   102ba:	|  |   add.l 20(sp),d0
   102be:	|  |   move.l 8(sp),-(sp)
   102c2:	|  |   pea 2 <_start+0x2>
   102c6:	|  |   move.l d0,-(sp)
   102c8:	|  |   jsr 14f00 <setVariable>
   102ce:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   102d2:	|  |   moveq #4,d0
   102d4:	+--|-- bra.s 102f0 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   102d6:	|  \-> moveq #28,d0
   102d8:	|      add.l 20(sp),d0
   102dc:	|      clr.l -(sp)
   102de:	|      pea 1 <_start+0x1>
   102e2:	|      move.l d0,-(sp)
   102e4:	|      jsr 14f00 <setVariable>
   102ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
   102ee:	|      moveq #2,d0
}
   102f0:	\----> lea 12(sp),sp
   102f4:	       rts

000102f6 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   102f6:	move.w #1,1a876 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   102fe:	moveq #2,d0
}
   10300:	rts

00010302 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10302:	moveq #24,d0
   10304:	add.l 8(sp),d0
   10308:	move.l d0,-(sp)
   1030a:	jsr 14f92 <trimStack>
   10310:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10312:	pea 19781 <PutChar+0x1c77>
   10318:	jsr 17036 <KPrintF>
   1031e:	addq.l #4,sp
	return BR_CONTINUE;
   10320:	moveq #2,d0
}
   10322:	rts

00010324 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10324:	pea 19781 <PutChar+0x1c77>
   1032a:	jsr 17036 <KPrintF>
   10330:	addq.l #4,sp
	return BR_CONTINUE;
   10332:	moveq #2,d0
}
   10334:	rts

00010336 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10336:	pea 19781 <PutChar+0x1c77>
   1033c:	jsr 17036 <KPrintF>
   10342:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10344:	moveq #2,d0
}
   10346:	rts

00010348 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10348:	pea 19781 <PutChar+0x1c77>
   1034e:	jsr 17036 <KPrintF>
   10354:	addq.l #4,sp
	return BR_CONTINUE;
   10356:	moveq #2,d0
}
   10358:	rts

0001035a <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1035a:	pea 19781 <PutChar+0x1c77>
   10360:	jsr 17036 <KPrintF>
   10366:	addq.l #4,sp
	return BR_CONTINUE;
   10368:	moveq #2,d0
}
   1036a:	rts

0001036c <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1036c:	pea 19781 <PutChar+0x1c77>
   10372:	jsr 17036 <KPrintF>
   10378:	addq.l #4,sp
	return BR_CONTINUE;
   1037a:	moveq #2,d0
}
   1037c:	rts

0001037e <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   1037e:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10382:	       movea.l 20(sp),a0
   10386:	       move.l 24(a0),d0
   1038a:	       move.l d0,-(sp)
   1038c:	       pea 1 <_start+0x1>
   10390:	       moveq #16,d0
   10392:	       add.l sp,d0
   10394:	       move.l d0,-(sp)
   10396:	       jsr 1460e <getValueType>
   1039c:	       lea 12(sp),sp
   103a0:	       tst.w d0
   103a2:	   /-- bne.s 103aa <builtIn_startMusic+0x2c>
   103a4:	   |   moveq #1,d0
   103a6:	/--|-- bra.w 1044a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   103aa:	|  \-> moveq #24,d0
   103ac:	|      add.l 20(sp),d0
   103b0:	|      move.l d0,-(sp)
   103b2:	|      jsr 14f92 <trimStack>
   103b8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103ba:	|      movea.l 20(sp),a0
   103be:	|      move.l 24(a0),d0
   103c2:	|      move.l d0,-(sp)
   103c4:	|      pea 1 <_start+0x1>
   103c8:	|      moveq #12,d0
   103ca:	|      add.l sp,d0
   103cc:	|      move.l d0,-(sp)
   103ce:	|      jsr 1460e <getValueType>
   103d4:	|      lea 12(sp),sp
   103d8:	|      tst.w d0
   103da:	|  /-- bne.s 103e0 <builtIn_startMusic+0x62>
   103dc:	|  |   moveq #1,d0
   103de:	+--|-- bra.s 1044a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   103e0:	|  \-> moveq #24,d0
   103e2:	|      add.l 20(sp),d0
   103e6:	|      move.l d0,-(sp)
   103e8:	|      jsr 14f92 <trimStack>
   103ee:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   103f0:	|      movea.l 20(sp),a0
   103f4:	|      move.l 24(a0),d0
   103f8:	|      move.l d0,-(sp)
   103fa:	|      pea 5 <_start+0x5>
   103fe:	|      lea 8(sp),a0
   10402:	|      move.l a0,-(sp)
   10404:	|      jsr 1460e <getValueType>
   1040a:	|      lea 12(sp),sp
   1040e:	|      tst.w d0
   10410:	|  /-- bne.s 10416 <builtIn_startMusic+0x98>
   10412:	|  |   moveq #1,d0
   10414:	+--|-- bra.s 1044a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10416:	|  \-> moveq #24,d0
   10418:	|      add.l 20(sp),d0
   1041c:	|      move.l d0,-(sp)
   1041e:	|      jsr 14f92 <trimStack>
   10424:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10426:	|      movea.l 8(sp),a0
   1042a:	|      move.l 4(sp),d1
   1042e:	|      move.l (sp),d0
   10430:	|      move.l a0,-(sp)
   10432:	|      move.l d1,-(sp)
   10434:	|      move.l d0,-(sp)
   10436:	|      jsr cfb8 <playMOD>
   1043c:	|      lea 12(sp),sp
   10440:	|      tst.w d0
   10442:	|  /-- bne.s 10448 <builtIn_startMusic+0xca>
   10444:	|  |   moveq #2,d0
   10446:	+--|-- bra.s 1044a <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10448:	|  \-> moveq #2,d0
}
   1044a:	\----> lea 12(sp),sp
   1044e:	       rts

00010450 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10450:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10452:	       movea.l 12(sp),a0
   10456:	       move.l 24(a0),d0
   1045a:	       move.l d0,-(sp)
   1045c:	       pea 1 <_start+0x1>
   10460:	       move.l sp,d0
   10462:	       addq.l #8,d0
   10464:	       move.l d0,-(sp)
   10466:	       jsr 1460e <getValueType>
   1046c:	       lea 12(sp),sp
   10470:	       tst.w d0
   10472:	   /-- bne.s 10478 <builtIn_stopMusic+0x28>
   10474:	   |   moveq #1,d0
   10476:	/--|-- bra.s 10496 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10478:	|  \-> moveq #24,d0
   1047a:	|      add.l 12(sp),d0
   1047e:	|      move.l d0,-(sp)
   10480:	|      jsr 14f92 <trimStack>
   10486:	|      addq.l #4,sp
	stopMOD (v);
   10488:	|      move.l (sp),d0
   1048a:	|      move.l d0,-(sp)
   1048c:	|      jsr d054 <stopMOD>
   10492:	|      addq.l #4,sp
	return BR_CONTINUE;
   10494:	|      moveq #2,d0
}
   10496:	\----> addq.l #4,sp
   10498:	       rts

0001049a <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   1049a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1049c:	       movea.l 16(sp),a0
   104a0:	       move.l 24(a0),d0
   104a4:	       move.l d0,-(sp)
   104a6:	       pea 1 <_start+0x1>
   104aa:	       move.l sp,d0
   104ac:	       addq.l #8,d0
   104ae:	       move.l d0,-(sp)
   104b0:	       jsr 1460e <getValueType>
   104b6:	       lea 12(sp),sp
   104ba:	       tst.w d0
   104bc:	   /-- bne.s 104c2 <builtIn_setMusicVolume+0x28>
   104be:	   |   moveq #1,d0
   104c0:	/--|-- bra.s 1051c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   104c2:	|  \-> moveq #24,d0
   104c4:	|      add.l 16(sp),d0
   104c8:	|      move.l d0,-(sp)
   104ca:	|      jsr 14f92 <trimStack>
   104d0:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104d2:	|      movea.l 16(sp),a0
   104d6:	|      move.l 24(a0),d0
   104da:	|      move.l d0,-(sp)
   104dc:	|      pea 1 <_start+0x1>
   104e0:	|      moveq #12,d0
   104e2:	|      add.l sp,d0
   104e4:	|      move.l d0,-(sp)
   104e6:	|      jsr 1460e <getValueType>
   104ec:	|      lea 12(sp),sp
   104f0:	|      tst.w d0
   104f2:	|  /-- bne.s 104f8 <builtIn_setMusicVolume+0x5e>
   104f4:	|  |   moveq #1,d0
   104f6:	+--|-- bra.s 1051c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   104f8:	|  \-> moveq #24,d0
   104fa:	|      add.l 16(sp),d0
   104fe:	|      move.l d0,-(sp)
   10500:	|      jsr 14f92 <trimStack>
   10506:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10508:	|      move.l (sp),d1
   1050a:	|      move.l 4(sp),d0
   1050e:	|      move.l d1,-(sp)
   10510:	|      move.l d0,-(sp)
   10512:	|      jsr d03a <setMusicVolume>
   10518:	|      addq.l #8,sp
	return BR_CONTINUE;
   1051a:	|      moveq #2,d0
}
   1051c:	\----> addq.l #8,sp
   1051e:	       rts

00010520 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10520:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10522:	       movea.l 12(sp),a0
   10526:	       move.l 24(a0),d0
   1052a:	       move.l d0,-(sp)
   1052c:	       pea 1 <_start+0x1>
   10530:	       move.l sp,d0
   10532:	       addq.l #8,d0
   10534:	       move.l d0,-(sp)
   10536:	       jsr 1460e <getValueType>
   1053c:	       lea 12(sp),sp
   10540:	       tst.w d0
   10542:	   /-- bne.s 10548 <builtIn_setDefaultMusicVolume+0x28>
   10544:	   |   moveq #1,d0
   10546:	/--|-- bra.s 10566 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10548:	|  \-> moveq #24,d0
   1054a:	|      add.l 12(sp),d0
   1054e:	|      move.l d0,-(sp)
   10550:	|      jsr 14f92 <trimStack>
   10556:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10558:	|      move.l (sp),d0
   1055a:	|      move.l d0,-(sp)
   1055c:	|      jsr d01e <setDefaultMusicVolume>
   10562:	|      addq.l #4,sp
	return BR_CONTINUE;
   10564:	|      moveq #2,d0
}
   10566:	\----> addq.l #4,sp
   10568:	       rts

0001056a <builtIn_playSound>:

builtIn(playSound)
{
   1056a:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1056c:	       movea.l 12(sp),a0
   10570:	       move.l 24(a0),d0
   10574:	       move.l d0,-(sp)
   10576:	       pea 5 <_start+0x5>
   1057a:	       move.l sp,d0
   1057c:	       addq.l #8,d0
   1057e:	       move.l d0,-(sp)
   10580:	       jsr 1460e <getValueType>
   10586:	       lea 12(sp),sp
   1058a:	       tst.w d0
   1058c:	   /-- bne.s 10592 <builtIn_playSound+0x28>
   1058e:	   |   moveq #1,d0
   10590:	/--|-- bra.s 105ba <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10592:	|  \-> moveq #24,d0
   10594:	|      add.l 12(sp),d0
   10598:	|      move.l d0,-(sp)
   1059a:	|      jsr 14f92 <trimStack>
   105a0:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   105a2:	|      move.l (sp),d0
   105a4:	|      clr.l -(sp)
   105a6:	|      move.l d0,-(sp)
   105a8:	|      jsr d042 <startSound>
   105ae:	|      addq.l #8,sp
   105b0:	|      tst.w d0
   105b2:	|  /-- bne.s 105b8 <builtIn_playSound+0x4e>
   105b4:	|  |   moveq #2,d0
   105b6:	+--|-- bra.s 105ba <builtIn_playSound+0x50>
	return BR_CONTINUE;
   105b8:	|  \-> moveq #2,d0
}
   105ba:	\----> addq.l #4,sp
   105bc:	       rts

000105be <builtIn_loopSound>:

builtIn(loopSound)
{
   105be:	             lea -28(sp),sp
   105c2:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   105c4:	             tst.l 36(sp)
   105c8:	         /-- bgt.s 105de <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   105ca:	         |   pea 197a4 <PutChar+0x1c9a>
   105d0:	         |   jsr 17036 <KPrintF>
   105d6:	         |   addq.l #4,sp
		return BR_ERROR;
   105d8:	         |   moveq #1,d0
   105da:	/--------|-- bra.w 1079a <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   105de:	|        \-> moveq #1,d0
   105e0:	|            cmp.l 36(sp),d0
   105e4:	|     /----- blt.s 10640 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   105e6:	|     |      movea.l 40(sp),a0
   105ea:	|     |      move.l 24(a0),d0
   105ee:	|     |      move.l d0,-(sp)
   105f0:	|     |      pea 5 <_start+0x5>
   105f4:	|     |      lea 16(sp),a0
   105f8:	|     |      move.l a0,-(sp)
   105fa:	|     |      jsr 1460e <getValueType>
   10600:	|     |      lea 12(sp),sp
   10604:	|     |      tst.w d0
   10606:	|     |  /-- bne.s 1060e <builtIn_loopSound+0x50>
   10608:	|     |  |   moveq #1,d0
   1060a:	+-----|--|-- bra.w 1079a <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   1060e:	|     |  \-> moveq #24,d0
   10610:	|     |      add.l 40(sp),d0
   10614:	|     |      move.l d0,-(sp)
   10616:	|     |      jsr 14f92 <trimStack>
   1061c:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   1061e:	|     |      move.l 8(sp),d0
   10622:	|     |      pea 1 <_start+0x1>
   10626:	|     |      move.l d0,-(sp)
   10628:	|     |      jsr d042 <startSound>
   1062e:	|     |      addq.l #8,sp
   10630:	|     |      tst.w d0
   10632:	|     |  /-- bne.s 1063a <builtIn_loopSound+0x7c>
   10634:	|     |  |   moveq #2,d0
   10636:	+-----|--|-- bra.w 1079a <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   1063a:	|     |  \-> moveq #2,d0
   1063c:	+-----|----- bra.w 1079a <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10640:	|     \----> moveq #2,d1
   10642:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10646:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   1064a:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   1064e:	|            movea.l 40(sp),a0
   10652:	|            movea.l 24(a0),a0
   10656:	|            move.l (a0),d0
   10658:	|            moveq #5,d1
   1065a:	|            cmp.l d0,d1
   1065c:	|  /-------- beq.w 10734 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10660:	|  |         movea.l 40(sp),a0
   10664:	|  |         move.l 24(a0),d0
   10668:	|  |         move.l d0,-(sp)
   1066a:	|  |         pea 1 <_start+0x1>
   1066e:	|  |         lea 12(sp),a0
   10672:	|  |         move.l a0,-(sp)
   10674:	|  |         jsr 1460e <getValueType>
   1067a:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   1067e:	|  |         moveq #24,d0
   10680:	|  |         add.l 40(sp),d0
   10684:	|  |         move.l d0,-(sp)
   10686:	|  |         jsr 14f92 <trimStack>
   1068c:	|  |         addq.l #4,sp
			numParams--;
   1068e:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10692:	|  +-------- bra.w 10734 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10696:	|  |  /----> movea.l 40(sp),a0
   1069a:	|  |  |      move.l 24(a0),d0
   1069e:	|  |  |      move.l d0,-(sp)
   106a0:	|  |  |      pea 5 <_start+0x5>
   106a4:	|  |  |      lea 16(sp),a0
   106a8:	|  |  |      move.l a0,-(sp)
   106aa:	|  |  |      jsr 1460e <getValueType>
   106b0:	|  |  |      lea 12(sp),sp
   106b4:	|  |  |      tst.w d0
   106b6:	|  |  |  /-- bne.s 106cc <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   106b8:	|  |  |  |   pea 197e2 <PutChar+0x1cd8>
   106be:	|  |  |  |   jsr 17036 <KPrintF>
   106c4:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   106c6:	|  |  |  |   moveq #1,d0
   106c8:	+--|--|--|-- bra.w 1079a <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   106cc:	|  |  |  \-> moveq #20,d0
   106ce:	|  |  |      move.l d0,20(sp)
   106d2:	|  |  |      clr.l 16(sp)
   106d6:	|  |  |      move.l 1a7a4 <SysBase>,d0
   106dc:	|  |  |      movea.l d0,a6
   106de:	|  |  |      move.l 20(sp),d0
   106e2:	|  |  |      move.l 16(sp),d1
   106e6:	|  |  |      jsr -684(a6)
   106ea:	|  |  |      move.l d0,12(sp)
   106ee:	|  |  |      move.l 12(sp),d0
   106f2:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   106f6:	|  |  |  /-- bne.s 106fe <builtIn_loopSound+0x140>
   106f8:	|  |  |  |   moveq #1,d0
   106fa:	+--|--|--|-- bra.w 1079a <builtIn_loopSound+0x1dc>

			s->next = old;
   106fe:	|  |  |  \-> movea.l 28(sp),a0
   10702:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10708:	|  |  |      movea.l 28(sp),a0
   1070c:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10710:	|  |  |      move.l 8(sp),d0
   10714:	|  |  |      movea.l 28(sp),a0
   10718:	|  |  |      move.l d0,(a0)
			old = s;
   1071a:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10720:	|  |  |      moveq #24,d0
   10722:	|  |  |      add.l 40(sp),d0
   10726:	|  |  |      move.l d0,-(sp)
   10728:	|  |  |      jsr 14f92 <trimStack>
   1072e:	|  |  |      addq.l #4,sp
			numParams--;
   10730:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10734:	|  \--|----> tst.l 36(sp)
   10738:	|     \----- bne.w 10696 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   1073c:	|        /-- bra.s 10748 <builtIn_loopSound+0x18a>
   1073e:	|     /--|-> movea.l 28(sp),a0
   10742:	|     |  |   move.l 4(a0),28(sp)
   10748:	|     |  \-> movea.l 28(sp),a0
   1074c:	|     |      move.l 4(a0),d0
   10750:	|     \----- bne.s 1073e <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10752:	|            move.l 4(sp),d0
   10756:	|            moveq #1,d1
   10758:	|            cmp.l d0,d1
   1075a:	|     /----- bge.s 10772 <builtIn_loopSound+0x1b4>
			s->next = old;
   1075c:	|     |      movea.l 28(sp),a0
   10760:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10766:	|     |      movea.l 24(sp),a0
   1076a:	|     |      move.l 28(sp),8(a0)
   10770:	|     |  /-- bra.s 10782 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10772:	|     \--|-> move.l 4(sp),d0
   10776:	|        +-- beq.s 10782 <builtIn_loopSound+0x1c4>
			s->next = s;
   10778:	|        |   movea.l 28(sp),a0
   1077c:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10782:	|        \-> movea.l 24(sp),a0
   10786:	|            moveq #-1,d0
   10788:	|            move.l d0,16(a0)
		playSoundList(old);
   1078c:	|            move.l 24(sp),-(sp)
   10790:	|            jsr cfbc <playSoundList>
   10796:	|            addq.l #4,sp
		return BR_CONTINUE;
   10798:	|            moveq #2,d0
	}
}
   1079a:	\----------> movea.l (sp)+,a6
   1079c:	             lea 28(sp),sp
   107a0:	             rts

000107a2 <builtIn_stopSound>:

builtIn(stopSound)
{
   107a2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   107a4:	       movea.l 12(sp),a0
   107a8:	       move.l 24(a0),d0
   107ac:	       move.l d0,-(sp)
   107ae:	       pea 5 <_start+0x5>
   107b2:	       move.l sp,d0
   107b4:	       addq.l #8,d0
   107b6:	       move.l d0,-(sp)
   107b8:	       jsr 1460e <getValueType>
   107be:	       lea 12(sp),sp
   107c2:	       tst.w d0
   107c4:	   /-- bne.s 107ca <builtIn_stopSound+0x28>
   107c6:	   |   moveq #1,d0
   107c8:	/--|-- bra.s 107e8 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   107ca:	|  \-> moveq #24,d0
   107cc:	|      add.l 12(sp),d0
   107d0:	|      move.l d0,-(sp)
   107d2:	|      jsr 14f92 <trimStack>
   107d8:	|      addq.l #4,sp
	huntKillSound (v);
   107da:	|      move.l (sp),d0
   107dc:	|      move.l d0,-(sp)
   107de:	|      jsr cfb4 <huntKillSound>
   107e4:	|      addq.l #4,sp
	return BR_CONTINUE;
   107e6:	|      moveq #2,d0
}
   107e8:	\----> addq.l #4,sp
   107ea:	       rts

000107ec <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   107ec:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107ee:	       movea.l 12(sp),a0
   107f2:	       move.l 24(a0),d0
   107f6:	       move.l d0,-(sp)
   107f8:	       pea 1 <_start+0x1>
   107fc:	       move.l sp,d0
   107fe:	       addq.l #8,d0
   10800:	       move.l d0,-(sp)
   10802:	       jsr 1460e <getValueType>
   10808:	       lea 12(sp),sp
   1080c:	       tst.w d0
   1080e:	   /-- bne.s 10814 <builtIn_setDefaultSoundVolume+0x28>
   10810:	   |   moveq #1,d0
   10812:	/--|-- bra.s 10832 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10814:	|  \-> moveq #24,d0
   10816:	|      add.l 12(sp),d0
   1081a:	|      move.l d0,-(sp)
   1081c:	|      jsr 14f92 <trimStack>
   10822:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10824:	|      move.l (sp),d0
   10826:	|      move.l d0,-(sp)
   10828:	|      jsr d02a <setDefaultSoundVolume>
   1082e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10830:	|      moveq #2,d0
}
   10832:	\----> addq.l #4,sp
   10834:	       rts

00010836 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10836:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10838:	       movea.l 16(sp),a0
   1083c:	       move.l 24(a0),d0
   10840:	       move.l d0,-(sp)
   10842:	       pea 1 <_start+0x1>
   10846:	       move.l sp,d0
   10848:	       addq.l #8,d0
   1084a:	       move.l d0,-(sp)
   1084c:	       jsr 1460e <getValueType>
   10852:	       lea 12(sp),sp
   10856:	       tst.w d0
   10858:	   /-- bne.s 1085e <builtIn_setSoundVolume+0x28>
   1085a:	   |   moveq #1,d0
   1085c:	/--|-- bra.s 108b8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   1085e:	|  \-> moveq #24,d0
   10860:	|      add.l 16(sp),d0
   10864:	|      move.l d0,-(sp)
   10866:	|      jsr 14f92 <trimStack>
   1086c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1086e:	|      movea.l 16(sp),a0
   10872:	|      move.l 24(a0),d0
   10876:	|      move.l d0,-(sp)
   10878:	|      pea 5 <_start+0x5>
   1087c:	|      moveq #12,d0
   1087e:	|      add.l sp,d0
   10880:	|      move.l d0,-(sp)
   10882:	|      jsr 1460e <getValueType>
   10888:	|      lea 12(sp),sp
   1088c:	|      tst.w d0
   1088e:	|  /-- bne.s 10894 <builtIn_setSoundVolume+0x5e>
   10890:	|  |   moveq #1,d0
   10892:	+--|-- bra.s 108b8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10894:	|  \-> moveq #24,d0
   10896:	|      add.l 16(sp),d0
   1089a:	|      move.l d0,-(sp)
   1089c:	|      jsr 14f92 <trimStack>
   108a2:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   108a4:	|      move.l (sp),d1
   108a6:	|      move.l 4(sp),d0
   108aa:	|      move.l d1,-(sp)
   108ac:	|      move.l d0,-(sp)
   108ae:	|      jsr d03e <setSoundVolume>
   108b4:	|      addq.l #8,sp
	return BR_CONTINUE;
   108b6:	|      moveq #2,d0
}
   108b8:	\----> addq.l #8,sp
   108ba:	       rts

000108bc <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   108bc:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108c0:	       movea.l 20(sp),a0
   108c4:	       move.l 24(a0),d0
   108c8:	       move.l d0,-(sp)
   108ca:	       pea 1 <_start+0x1>
   108ce:	       moveq #12,d0
   108d0:	       add.l sp,d0
   108d2:	       move.l d0,-(sp)
   108d4:	       jsr 1460e <getValueType>
   108da:	       lea 12(sp),sp
   108de:	       tst.w d0
   108e0:	   /-- bne.s 108e8 <builtIn_setSoundLoopPoints+0x2c>
   108e2:	   |   moveq #1,d0
   108e4:	/--|-- bra.w 10980 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   108e8:	|  \-> moveq #24,d0
   108ea:	|      add.l 20(sp),d0
   108ee:	|      move.l d0,-(sp)
   108f0:	|      jsr 14f92 <trimStack>
   108f6:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108f8:	|      movea.l 20(sp),a0
   108fc:	|      move.l 24(a0),d0
   10900:	|      move.l d0,-(sp)
   10902:	|      pea 1 <_start+0x1>
   10906:	|      lea 8(sp),a0
   1090a:	|      move.l a0,-(sp)
   1090c:	|      jsr 1460e <getValueType>
   10912:	|      lea 12(sp),sp
   10916:	|      tst.w d0
   10918:	|  /-- bne.s 1091e <builtIn_setSoundLoopPoints+0x62>
   1091a:	|  |   moveq #1,d0
   1091c:	+--|-- bra.s 10980 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   1091e:	|  \-> moveq #24,d0
   10920:	|      add.l 20(sp),d0
   10924:	|      move.l d0,-(sp)
   10926:	|      jsr 14f92 <trimStack>
   1092c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1092e:	|      movea.l 20(sp),a0
   10932:	|      move.l 24(a0),d0
   10936:	|      move.l d0,-(sp)
   10938:	|      pea 5 <_start+0x5>
   1093c:	|      moveq #16,d0
   1093e:	|      add.l sp,d0
   10940:	|      move.l d0,-(sp)
   10942:	|      jsr 1460e <getValueType>
   10948:	|      lea 12(sp),sp
   1094c:	|      tst.w d0
   1094e:	|  /-- bne.s 10954 <builtIn_setSoundLoopPoints+0x98>
   10950:	|  |   moveq #1,d0
   10952:	+--|-- bra.s 10980 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10954:	|  \-> moveq #24,d0
   10956:	|      add.l 20(sp),d0
   1095a:	|      move.l d0,-(sp)
   1095c:	|      jsr 14f92 <trimStack>
   10962:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10964:	|      movea.l 4(sp),a0
   10968:	|      move.l (sp),d1
   1096a:	|      move.l 8(sp),d0
   1096e:	|      move.l a0,-(sp)
   10970:	|      move.l d1,-(sp)
   10972:	|      move.l d0,-(sp)
   10974:	|      jsr d036 <setSoundLoop>
   1097a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1097e:	|      moveq #2,d0
}
   10980:	\----> lea 12(sp),sp
   10984:	       rts

00010986 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10986:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10988:	          movea.l 12(sp),a0
   1098c:	          movea.l 24(a0),a0
   10990:	          move.l (a0),d0
   10992:	          moveq #5,d1
   10994:	          cmp.l d0,d1
   10996:	/-------- bne.s 109da <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10998:	|         movea.l 12(sp),a0
   1099c:	|         move.l 24(a0),d0
   109a0:	|         move.l d0,-(sp)
   109a2:	|         pea 5 <_start+0x5>
   109a6:	|         move.l sp,d0
   109a8:	|         addq.l #8,d0
   109aa:	|         move.l d0,-(sp)
   109ac:	|         jsr 1460e <getValueType>
   109b2:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   109b6:	|         moveq #24,d0
   109b8:	|         add.l 12(sp),d0
   109bc:	|         move.l d0,-(sp)
   109be:	|         jsr 14f92 <trimStack>
   109c4:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   109c6:	|         move.l (sp),d0
   109c8:	|         move.l d0,-(sp)
   109ca:	|         jsr 167e0 <setFloor>
   109d0:	|         addq.l #4,sp
   109d2:	|         tst.w d0
   109d4:	|  /----- bne.s 109f0 <builtIn_setFloor+0x6a>
   109d6:	|  |      moveq #1,d0
   109d8:	|  |  /-- bra.s 109f2 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   109da:	\--|--|-> moveq #24,d0
   109dc:	   |  |   add.l 12(sp),d0
   109e0:	   |  |   move.l d0,-(sp)
   109e2:	   |  |   jsr 14f92 <trimStack>
   109e8:	   |  |   addq.l #4,sp
		setFloorNull ();
   109ea:	   |  |   jsr 16f5a <setFloorNull>
	}
	return BR_CONTINUE;
   109f0:	   \--|-> moveq #2,d0
}
   109f2:	      \-> addq.l #4,sp
   109f4:	          rts

000109f6 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   109f6:	jsr 16078 <drawFloor>
	return BR_CONTINUE;
   109fc:	moveq #2,d0
}
   109fe:	rts

00010a00 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10a00:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10a02:	          movea.l 12(sp),a0
   10a06:	          movea.l 24(a0),a0
   10a0a:	          move.l (a0),d0
   10a0c:	          moveq #5,d1
   10a0e:	          cmp.l d0,d1
   10a10:	/-------- bne.s 10a54 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10a12:	|         movea.l 12(sp),a0
   10a16:	|         move.l 24(a0),d0
   10a1a:	|         move.l d0,-(sp)
   10a1c:	|         pea 5 <_start+0x5>
   10a20:	|         move.l sp,d0
   10a22:	|         addq.l #8,d0
   10a24:	|         move.l d0,-(sp)
   10a26:	|         jsr 1460e <getValueType>
   10a2c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10a30:	|         moveq #24,d0
   10a32:	|         add.l 12(sp),d0
   10a36:	|         move.l d0,-(sp)
   10a38:	|         jsr 14f92 <trimStack>
   10a3e:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10a40:	|         move.l (sp),d0
   10a42:	|         move.l d0,-(sp)
   10a44:	|         jsr 869e <setZBuffer>
   10a4a:	|         addq.l #4,sp
   10a4c:	|         tst.w d0
   10a4e:	|  /----- bne.s 10a6a <builtIn_setZBuffer+0x6a>
   10a50:	|  |      moveq #1,d0
   10a52:	|  |  /-- bra.s 10a6c <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10a54:	\--|--|-> moveq #24,d0
   10a56:	   |  |   add.l 12(sp),d0
   10a5a:	   |  |   move.l d0,-(sp)
   10a5c:	   |  |   jsr 14f92 <trimStack>
   10a62:	   |  |   addq.l #4,sp
		killZBuffer ();
   10a64:	   |  |   jsr 8652 <killZBuffer>
	}
	return BR_CONTINUE;
   10a6a:	   \--|-> moveq #2,d0
}
   10a6c:	      \-> addq.l #4,sp
   10a6e:	          rts

00010a70 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10a70:	pea 19819 <PutChar+0x1d0f>
   10a76:	jsr 17036 <KPrintF>
   10a7c:	addq.l #4,sp
	return BR_CONTINUE;
   10a7e:	moveq #2,d0
}
   10a80:	rts

00010a82 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a82:	          movea.l 8(sp),a0
   10a86:	          move.l 24(a0),d0
   10a8a:	          move.l d0,-(sp)
   10a8c:	          pea 1 <_start+0x1>
   10a90:	          pea 1a872 <speechMode>
   10a96:	          jsr 1460e <getValueType>
   10a9c:	          lea 12(sp),sp
   10aa0:	          tst.w d0
   10aa2:	      /-- bne.s 10aa8 <builtIn_setSpeechMode+0x26>
   10aa4:	      |   moveq #1,d0
   10aa6:	/-----|-- bra.s 10ae0 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10aa8:	|     \-> moveq #24,d0
   10aaa:	|         add.l 8(sp),d0
   10aae:	|         move.l d0,-(sp)
   10ab0:	|         jsr 14f92 <trimStack>
   10ab6:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10ab8:	|         move.l 1a872 <speechMode>,d0
   10abe:	|     /-- bmi.s 10acc <builtIn_setSpeechMode+0x4a>
   10ac0:	|     |   move.l 1a872 <speechMode>,d0
   10ac6:	|     |   moveq #2,d1
   10ac8:	|     |   cmp.l d0,d1
   10aca:	|  /--|-- bge.s 10ade <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10acc:	|  |  \-> pea 19832 <PutChar+0x1d28>
   10ad2:	|  |      jsr 17036 <KPrintF>
   10ad8:	|  |      addq.l #4,sp
		return BR_ERROR;
   10ada:	|  |      moveq #1,d0
   10adc:	+--|----- bra.s 10ae0 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10ade:	|  \----> moveq #2,d0
}
   10ae0:	\-------> rts

00010ae2 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10ae2:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10ae4:	       jsr 7e5a <isThereAnySpeechGoingOn>
   10aea:	       move.l d0,(sp)
	if (i == -1) {
   10aec:	       moveq #-1,d0
   10aee:	       cmp.l (sp),d0
   10af0:	/----- bne.s 10b0c <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10af2:	|      moveq #28,d0
   10af4:	|      add.l 12(sp),d0
   10af8:	|      clr.l -(sp)
   10afa:	|      pea 1 <_start+0x1>
   10afe:	|      move.l d0,-(sp)
   10b00:	|      jsr 14f00 <setVariable>
   10b06:	|      lea 12(sp),sp
   10b0a:	|  /-- bra.s 10b24 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10b0c:	\--|-> moveq #28,d0
   10b0e:	   |   add.l 12(sp),d0
   10b12:	   |   move.l (sp),-(sp)
   10b14:	   |   pea 7 <_start+0x7>
   10b18:	   |   move.l d0,-(sp)
   10b1a:	   |   jsr 14f00 <setVariable>
   10b20:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10b24:	   \-> moveq #2,d0
}
   10b26:	       addq.l #4,sp
   10b28:	       rts

00010b2a <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10b2a:	jsr 6134 <killSpeechTimers>
	return BR_CONTINUE;
   10b30:	moveq #2,d0
}
   10b32:	rts

00010b34 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10b34:	       move.l 1a8b8 <overRegion>,d0
   10b3a:	/----- beq.s 10b64 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10b3c:	|      movea.l 1a8b8 <overRegion>,a0
   10b42:	|      movea.l 28(a0),a0
   10b46:	|      move.l 4(a0),d1
   10b4a:	|      moveq #28,d0
   10b4c:	|      add.l 8(sp),d0
   10b50:	|      move.l d1,-(sp)
   10b52:	|      pea 7 <_start+0x7>
   10b56:	|      move.l d0,-(sp)
   10b58:	|      jsr 14f00 <setVariable>
   10b5e:	|      lea 12(sp),sp
   10b62:	|  /-- bra.s 10b7c <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10b64:	\--|-> moveq #28,d0
   10b66:	   |   add.l 8(sp),d0
   10b6a:	   |   clr.l -(sp)
   10b6c:	   |   pea 1 <_start+0x1>
   10b70:	   |   move.l d0,-(sp)
   10b72:	   |   jsr 14f00 <setVariable>
   10b78:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10b7c:	   \-> moveq #2,d0
}
   10b7e:	       rts

00010b80 <builtIn_rename>:

builtIn(rename)
{
   10b80:	       lea -16(sp),sp
   10b84:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10b86:	       movea.l 28(sp),a0
   10b8a:	       move.l 24(a0),d0
   10b8e:	       move.l d0,-(sp)
   10b90:	       jsr 14be4 <getTextFromAnyVar>
   10b96:	       addq.l #4,sp
   10b98:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10b9c:	   /-- bne.s 10ba2 <builtIn_rename+0x22>
   10b9e:	   |   moveq #1,d0
   10ba0:	/--|-- bra.s 10c1c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10ba2:	|  \-> moveq #24,d0
   10ba4:	|      add.l 28(sp),d0
   10ba8:	|      move.l d0,-(sp)
   10baa:	|      jsr 14f92 <trimStack>
   10bb0:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10bb2:	|      movea.l 28(sp),a0
   10bb6:	|      move.l 24(a0),d0
   10bba:	|      move.l d0,-(sp)
   10bbc:	|      pea 7 <_start+0x7>
   10bc0:	|      lea 12(sp),a0
   10bc4:	|      move.l a0,-(sp)
   10bc6:	|      jsr 1460e <getValueType>
   10bcc:	|      lea 12(sp),sp
   10bd0:	|      tst.w d0
   10bd2:	|  /-- bne.s 10bd8 <builtIn_rename+0x58>
   10bd4:	|  |   moveq #1,d0
   10bd6:	+--|-- bra.s 10c1c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10bd8:	|  \-> moveq #24,d0
   10bda:	|      add.l 28(sp),d0
   10bde:	|      move.l d0,-(sp)
   10be0:	|      jsr 14f92 <trimStack>
   10be6:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10be8:	|      move.l 4(sp),d0
   10bec:	|      move.l d0,-(sp)
   10bee:	|      jsr d378 <findObjectType>
   10bf4:	|      addq.l #4,sp
   10bf6:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10bfa:	|      movea.l 12(sp),a0
   10bfe:	|      move.l (a0),8(sp)
   10c02:	|      move.l 1a7a4 <SysBase>,d0
   10c08:	|      movea.l d0,a6
   10c0a:	|      movea.l 8(sp),a1
   10c0e:	|      jsr -690(a6)
	o->screenName = newText;
   10c12:	|      movea.l 12(sp),a0
   10c16:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10c1a:	|      moveq #2,d0
}
   10c1c:	\----> movea.l (sp)+,a6
   10c1e:	       lea 16(sp),sp
   10c22:	       rts

00010c24 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10c24:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c28:	          movea.l 20(sp),a0
   10c2c:	          move.l 24(a0),d0
   10c30:	          move.l d0,-(sp)
   10c32:	          pea 7 <_start+0x7>
   10c36:	          lea 8(sp),a0
   10c3a:	          move.l a0,-(sp)
   10c3c:	          jsr 1460e <getValueType>
   10c42:	          lea 12(sp),sp
   10c46:	          tst.w d0
   10c48:	      /-- bne.s 10c50 <builtIn_getObjectX+0x2c>
   10c4a:	      |   moveq #1,d0
   10c4c:	/-----|-- bra.w 10cec <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10c50:	|     \-> moveq #24,d0
   10c52:	|         add.l 20(sp),d0
   10c56:	|         move.l d0,-(sp)
   10c58:	|         jsr 14f92 <trimStack>
   10c5e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10c60:	|         move.l (sp),d0
   10c62:	|         move.l d0,-(sp)
   10c64:	|         jsr a506 <findPerson>
   10c6a:	|         addq.l #4,sp
   10c6c:	|         move.l d0,8(sp)
	if (pers) {
   10c70:	|     /-- beq.s 10c9e <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10c72:	|     |   movea.l 8(sp),a0
   10c76:	|     |   move.l (a0),d0
   10c78:	|     |   move.l d0,-(sp)
   10c7a:	|     |   jsr 1740a <__fixsfsi>
   10c80:	|     |   addq.l #4,sp
   10c82:	|     |   move.l d0,d1
   10c84:	|     |   moveq #28,d0
   10c86:	|     |   add.l 20(sp),d0
   10c8a:	|     |   move.l d1,-(sp)
   10c8c:	|     |   pea 1 <_start+0x1>
   10c90:	|     |   move.l d0,-(sp)
   10c92:	|     |   jsr 14f00 <setVariable>
   10c98:	|     |   lea 12(sp),sp
   10c9c:	|  /--|-- bra.s 10cea <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10c9e:	|  |  \-> move.l (sp),d0
   10ca0:	|  |      move.l d0,-(sp)
   10ca2:	|  |      jsr 15858 <getRegionForObject>
   10ca8:	|  |      addq.l #4,sp
   10caa:	|  |      move.l d0,4(sp)
		if (la) {
   10cae:	|  |  /-- beq.s 10cd2 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10cb0:	|  |  |   movea.l 4(sp),a0
   10cb4:	|  |  |   move.l 16(a0),d1
   10cb8:	|  |  |   moveq #28,d0
   10cba:	|  |  |   add.l 20(sp),d0
   10cbe:	|  |  |   move.l d1,-(sp)
   10cc0:	|  |  |   pea 1 <_start+0x1>
   10cc4:	|  |  |   move.l d0,-(sp)
   10cc6:	|  |  |   jsr 14f00 <setVariable>
   10ccc:	|  |  |   lea 12(sp),sp
   10cd0:	|  +--|-- bra.s 10cea <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10cd2:	|  |  \-> moveq #28,d0
   10cd4:	|  |      add.l 20(sp),d0
   10cd8:	|  |      clr.l -(sp)
   10cda:	|  |      pea 1 <_start+0x1>
   10cde:	|  |      move.l d0,-(sp)
   10ce0:	|  |      jsr 14f00 <setVariable>
   10ce6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10cea:	|  \----> moveq #2,d0
}
   10cec:	\-------> lea 12(sp),sp
   10cf0:	          rts

00010cf2 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10cf2:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10cf6:	          movea.l 20(sp),a0
   10cfa:	          move.l 24(a0),d0
   10cfe:	          move.l d0,-(sp)
   10d00:	          pea 7 <_start+0x7>
   10d04:	          lea 8(sp),a0
   10d08:	          move.l a0,-(sp)
   10d0a:	          jsr 1460e <getValueType>
   10d10:	          lea 12(sp),sp
   10d14:	          tst.w d0
   10d16:	      /-- bne.s 10d1e <builtIn_getObjectY+0x2c>
   10d18:	      |   moveq #1,d0
   10d1a:	/-----|-- bra.w 10dbc <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10d1e:	|     \-> moveq #24,d0
   10d20:	|         add.l 20(sp),d0
   10d24:	|         move.l d0,-(sp)
   10d26:	|         jsr 14f92 <trimStack>
   10d2c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10d2e:	|         move.l (sp),d0
   10d30:	|         move.l d0,-(sp)
   10d32:	|         jsr a506 <findPerson>
   10d38:	|         addq.l #4,sp
   10d3a:	|         move.l d0,8(sp)
	if (pers) {
   10d3e:	|     /-- beq.s 10d6e <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10d40:	|     |   movea.l 8(sp),a0
   10d44:	|     |   move.l 4(a0),d0
   10d48:	|     |   move.l d0,-(sp)
   10d4a:	|     |   jsr 1740a <__fixsfsi>
   10d50:	|     |   addq.l #4,sp
   10d52:	|     |   move.l d0,d1
   10d54:	|     |   moveq #28,d0
   10d56:	|     |   add.l 20(sp),d0
   10d5a:	|     |   move.l d1,-(sp)
   10d5c:	|     |   pea 1 <_start+0x1>
   10d60:	|     |   move.l d0,-(sp)
   10d62:	|     |   jsr 14f00 <setVariable>
   10d68:	|     |   lea 12(sp),sp
   10d6c:	|  /--|-- bra.s 10dba <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10d6e:	|  |  \-> move.l (sp),d0
   10d70:	|  |      move.l d0,-(sp)
   10d72:	|  |      jsr 15858 <getRegionForObject>
   10d78:	|  |      addq.l #4,sp
   10d7a:	|  |      move.l d0,4(sp)
		if (la) {
   10d7e:	|  |  /-- beq.s 10da2 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10d80:	|  |  |   movea.l 4(sp),a0
   10d84:	|  |  |   move.l 20(a0),d1
   10d88:	|  |  |   moveq #28,d0
   10d8a:	|  |  |   add.l 20(sp),d0
   10d8e:	|  |  |   move.l d1,-(sp)
   10d90:	|  |  |   pea 1 <_start+0x1>
   10d94:	|  |  |   move.l d0,-(sp)
   10d96:	|  |  |   jsr 14f00 <setVariable>
   10d9c:	|  |  |   lea 12(sp),sp
   10da0:	|  +--|-- bra.s 10dba <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10da2:	|  |  \-> moveq #28,d0
   10da4:	|  |      add.l 20(sp),d0
   10da8:	|  |      clr.l -(sp)
   10daa:	|  |      pea 1 <_start+0x1>
   10dae:	|  |      move.l d0,-(sp)
   10db0:	|  |      jsr 14f00 <setVariable>
   10db6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10dba:	|  \----> moveq #2,d0
}
   10dbc:	\-------> lea 12(sp),sp
   10dc0:	          rts

00010dc2 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10dc2:	       lea -32(sp),sp
   10dc6:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10dca:	       movea.l 56(sp),a0
   10dce:	       move.l 24(a0),d0
   10dd2:	       move.l d0,-(sp)
   10dd4:	       pea 1 <_start+0x1>
   10dd8:	       lea 28(sp),a0
   10ddc:	       move.l a0,-(sp)
   10dde:	       jsr 1460e <getValueType>
   10de4:	       lea 12(sp),sp
   10de8:	       tst.w d0
   10dea:	   /-- bne.s 10df2 <builtIn_addScreenRegion+0x30>
   10dec:	   |   moveq #1,d0
   10dee:	/--|-- bra.w 10fcc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10df2:	|  \-> moveq #24,d0
   10df4:	|      add.l 56(sp),d0
   10df8:	|      move.l d0,-(sp)
   10dfa:	|      jsr 14f92 <trimStack>
   10e00:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e02:	|      movea.l 56(sp),a0
   10e06:	|      move.l 24(a0),d0
   10e0a:	|      move.l d0,-(sp)
   10e0c:	|      pea 1 <_start+0x1>
   10e10:	|      moveq #48,d0
   10e12:	|      add.l sp,d0
   10e14:	|      move.l d0,-(sp)
   10e16:	|      jsr 1460e <getValueType>
   10e1c:	|      lea 12(sp),sp
   10e20:	|      tst.w d0
   10e22:	|  /-- bne.s 10e2a <builtIn_addScreenRegion+0x68>
   10e24:	|  |   moveq #1,d0
   10e26:	+--|-- bra.w 10fcc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e2a:	|  \-> moveq #24,d0
   10e2c:	|      add.l 56(sp),d0
   10e30:	|      move.l d0,-(sp)
   10e32:	|      jsr 14f92 <trimStack>
   10e38:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e3a:	|      movea.l 56(sp),a0
   10e3e:	|      move.l 24(a0),d0
   10e42:	|      move.l d0,-(sp)
   10e44:	|      pea 1 <_start+0x1>
   10e48:	|      moveq #52,d0
   10e4a:	|      add.l sp,d0
   10e4c:	|      move.l d0,-(sp)
   10e4e:	|      jsr 1460e <getValueType>
   10e54:	|      lea 12(sp),sp
   10e58:	|      tst.w d0
   10e5a:	|  /-- bne.s 10e62 <builtIn_addScreenRegion+0xa0>
   10e5c:	|  |   moveq #1,d0
   10e5e:	+--|-- bra.w 10fcc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e62:	|  \-> moveq #24,d0
   10e64:	|      add.l 56(sp),d0
   10e68:	|      move.l d0,-(sp)
   10e6a:	|      jsr 14f92 <trimStack>
   10e70:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e72:	|      movea.l 56(sp),a0
   10e76:	|      move.l 24(a0),d0
   10e7a:	|      move.l d0,-(sp)
   10e7c:	|      pea 1 <_start+0x1>
   10e80:	|      lea 32(sp),a0
   10e84:	|      move.l a0,-(sp)
   10e86:	|      jsr 1460e <getValueType>
   10e8c:	|      lea 12(sp),sp
   10e90:	|      tst.w d0
   10e92:	|  /-- bne.s 10e9a <builtIn_addScreenRegion+0xd8>
   10e94:	|  |   moveq #1,d0
   10e96:	+--|-- bra.w 10fcc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e9a:	|  \-> moveq #24,d0
   10e9c:	|      add.l 56(sp),d0
   10ea0:	|      move.l d0,-(sp)
   10ea2:	|      jsr 14f92 <trimStack>
   10ea8:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10eaa:	|      movea.l 56(sp),a0
   10eae:	|      move.l 24(a0),d0
   10eb2:	|      move.l d0,-(sp)
   10eb4:	|      pea 1 <_start+0x1>
   10eb8:	|      lea 36(sp),a0
   10ebc:	|      move.l a0,-(sp)
   10ebe:	|      jsr 1460e <getValueType>
   10ec4:	|      lea 12(sp),sp
   10ec8:	|      tst.w d0
   10eca:	|  /-- bne.s 10ed2 <builtIn_addScreenRegion+0x110>
   10ecc:	|  |   moveq #1,d0
   10ece:	+--|-- bra.w 10fcc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10ed2:	|  \-> moveq #24,d0
   10ed4:	|      add.l 56(sp),d0
   10ed8:	|      move.l d0,-(sp)
   10eda:	|      jsr 14f92 <trimStack>
   10ee0:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ee2:	|      movea.l 56(sp),a0
   10ee6:	|      move.l 24(a0),d0
   10eea:	|      move.l d0,-(sp)
   10eec:	|      pea 1 <_start+0x1>
   10ef0:	|      lea 40(sp),a0
   10ef4:	|      move.l a0,-(sp)
   10ef6:	|      jsr 1460e <getValueType>
   10efc:	|      lea 12(sp),sp
   10f00:	|      tst.w d0
   10f02:	|  /-- bne.s 10f0a <builtIn_addScreenRegion+0x148>
   10f04:	|  |   moveq #1,d0
   10f06:	+--|-- bra.w 10fcc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f0a:	|  \-> moveq #24,d0
   10f0c:	|      add.l 56(sp),d0
   10f10:	|      move.l d0,-(sp)
   10f12:	|      jsr 14f92 <trimStack>
   10f18:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f1a:	|      movea.l 56(sp),a0
   10f1e:	|      move.l 24(a0),d0
   10f22:	|      move.l d0,-(sp)
   10f24:	|      pea 1 <_start+0x1>
   10f28:	|      lea 44(sp),a0
   10f2c:	|      move.l a0,-(sp)
   10f2e:	|      jsr 1460e <getValueType>
   10f34:	|      lea 12(sp),sp
   10f38:	|      tst.w d0
   10f3a:	|  /-- bne.s 10f42 <builtIn_addScreenRegion+0x180>
   10f3c:	|  |   moveq #1,d0
   10f3e:	+--|-- bra.w 10fcc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f42:	|  \-> moveq #24,d0
   10f44:	|      add.l 56(sp),d0
   10f48:	|      move.l d0,-(sp)
   10f4a:	|      jsr 14f92 <trimStack>
   10f50:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f52:	|      movea.l 56(sp),a0
   10f56:	|      move.l 24(a0),d0
   10f5a:	|      move.l d0,-(sp)
   10f5c:	|      pea 7 <_start+0x7>
   10f60:	|      lea 24(sp),a0
   10f64:	|      move.l a0,-(sp)
   10f66:	|      jsr 1460e <getValueType>
   10f6c:	|      lea 12(sp),sp
   10f70:	|      tst.w d0
   10f72:	|  /-- bne.s 10f78 <builtIn_addScreenRegion+0x1b6>
   10f74:	|  |   moveq #1,d0
   10f76:	+--|-- bra.s 10fcc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f78:	|  \-> moveq #24,d0
   10f7a:	|      add.l 56(sp),d0
   10f7e:	|      move.l d0,-(sp)
   10f80:	|      jsr 14f92 <trimStack>
   10f86:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10f88:	|      move.l 16(sp),d5
   10f8c:	|      move.l 20(sp),d4
   10f90:	|      move.l 40(sp),d3
   10f94:	|      move.l 44(sp),d2
   10f98:	|      movea.l 24(sp),a1
   10f9c:	|      movea.l 28(sp),a0
   10fa0:	|      move.l 32(sp),d1
   10fa4:	|      move.l 36(sp),d0
   10fa8:	|      move.l d5,-(sp)
   10faa:	|      move.l d4,-(sp)
   10fac:	|      move.l d3,-(sp)
   10fae:	|      move.l d2,-(sp)
   10fb0:	|      move.l a1,-(sp)
   10fb2:	|      move.l a0,-(sp)
   10fb4:	|      move.l d1,-(sp)
   10fb6:	|      move.l d0,-(sp)
   10fb8:	|      jsr 15712 <addScreenRegion>
   10fbe:	|      lea 32(sp),sp
   10fc2:	|      tst.w d0
   10fc4:	|  /-- beq.s 10fca <builtIn_addScreenRegion+0x208>
   10fc6:	|  |   moveq #2,d0
   10fc8:	+--|-- bra.s 10fcc <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10fca:	|  \-> moveq #1,d0

}
   10fcc:	\----> movem.l (sp)+,d2-d5
   10fd0:	       lea 32(sp),sp
   10fd4:	       rts

00010fd6 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   10fd6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10fd8:	       movea.l 12(sp),a0
   10fdc:	       move.l 24(a0),d0
   10fe0:	       move.l d0,-(sp)
   10fe2:	       pea 7 <_start+0x7>
   10fe6:	       move.l sp,d0
   10fe8:	       addq.l #8,d0
   10fea:	       move.l d0,-(sp)
   10fec:	       jsr 1460e <getValueType>
   10ff2:	       lea 12(sp),sp
   10ff6:	       tst.w d0
   10ff8:	   /-- bne.s 10ffe <builtIn_removeScreenRegion+0x28>
   10ffa:	   |   moveq #1,d0
   10ffc:	/--|-- bra.s 1101c <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10ffe:	|  \-> moveq #24,d0
   11000:	|      add.l 12(sp),d0
   11004:	|      move.l d0,-(sp)
   11006:	|      jsr 14f92 <trimStack>
   1100c:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   1100e:	|      move.l (sp),d0
   11010:	|      move.l d0,-(sp)
   11012:	|      jsr 15a00 <removeScreenRegion>
   11018:	|      addq.l #4,sp
	return BR_CONTINUE;
   1101a:	|      moveq #2,d0
}
   1101c:	\----> addq.l #4,sp
   1101e:	       rts

00011020 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11020:	jsr 15b84 <showBoxes>
	return BR_CONTINUE;
   11026:	moveq #2,d0
}
   11028:	rts

0001102a <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   1102a:	jsr 15886 <killAllRegions>
	return BR_CONTINUE;
   11030:	moveq #2,d0
}
   11032:	rts

00011034 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   11034:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11038:	       movea.l 24(sp),a0
   1103c:	       move.l 24(a0),d0
   11040:	       move.l d0,-(sp)
   11042:	       jsr 142ba <getCostumeFromVar>
   11048:	       addq.l #4,sp
   1104a:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   1104e:	   /-- bne.s 11056 <builtIn_addCharacter+0x22>
   11050:	   |   moveq #1,d0
   11052:	/--|-- bra.w 11132 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11056:	|  \-> moveq #24,d0
   11058:	|      add.l 24(sp),d0
   1105c:	|      move.l d0,-(sp)
   1105e:	|      jsr 14f92 <trimStack>
   11064:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11066:	|      movea.l 24(sp),a0
   1106a:	|      move.l 24(a0),d0
   1106e:	|      move.l d0,-(sp)
   11070:	|      pea 1 <_start+0x1>
   11074:	|      lea 12(sp),a0
   11078:	|      move.l a0,-(sp)
   1107a:	|      jsr 1460e <getValueType>
   11080:	|      lea 12(sp),sp
   11084:	|      tst.w d0
   11086:	|  /-- bne.s 1108e <builtIn_addCharacter+0x5a>
   11088:	|  |   moveq #1,d0
   1108a:	+--|-- bra.w 11132 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1108e:	|  \-> moveq #24,d0
   11090:	|      add.l 24(sp),d0
   11094:	|      move.l d0,-(sp)
   11096:	|      jsr 14f92 <trimStack>
   1109c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1109e:	|      movea.l 24(sp),a0
   110a2:	|      move.l 24(a0),d0
   110a6:	|      move.l d0,-(sp)
   110a8:	|      pea 1 <_start+0x1>
   110ac:	|      moveq #16,d0
   110ae:	|      add.l sp,d0
   110b0:	|      move.l d0,-(sp)
   110b2:	|      jsr 1460e <getValueType>
   110b8:	|      lea 12(sp),sp
   110bc:	|      tst.w d0
   110be:	|  /-- bne.s 110c4 <builtIn_addCharacter+0x90>
   110c0:	|  |   moveq #1,d0
   110c2:	+--|-- bra.s 11132 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   110c4:	|  \-> moveq #24,d0
   110c6:	|      add.l 24(sp),d0
   110ca:	|      move.l d0,-(sp)
   110cc:	|      jsr 14f92 <trimStack>
   110d2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110d4:	|      movea.l 24(sp),a0
   110d8:	|      move.l 24(a0),d0
   110dc:	|      move.l d0,-(sp)
   110de:	|      pea 7 <_start+0x7>
   110e2:	|      lea 8(sp),a0
   110e6:	|      move.l a0,-(sp)
   110e8:	|      jsr 1460e <getValueType>
   110ee:	|      lea 12(sp),sp
   110f2:	|      tst.w d0
   110f4:	|  /-- bne.s 110fa <builtIn_addCharacter+0xc6>
   110f6:	|  |   moveq #1,d0
   110f8:	+--|-- bra.s 11132 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   110fa:	|  \-> moveq #24,d0
   110fc:	|      add.l 24(sp),d0
   11100:	|      move.l d0,-(sp)
   11102:	|      jsr 14f92 <trimStack>
   11108:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   1110a:	|      movea.l (sp),a0
   1110c:	|      move.l 4(sp),d1
   11110:	|      move.l 8(sp),d0
   11114:	|      move.l 12(sp),-(sp)
   11118:	|      move.l a0,-(sp)
   1111a:	|      move.l d1,-(sp)
   1111c:	|      move.l d0,-(sp)
   1111e:	|      jsr 9100 <addPerson>
   11124:	|      lea 16(sp),sp
   11128:	|      tst.w d0
   1112a:	|  /-- beq.s 11130 <builtIn_addCharacter+0xfc>
   1112c:	|  |   moveq #2,d0
   1112e:	+--|-- bra.s 11132 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11130:	|  \-> moveq #1,d0
}
   11132:	\----> lea 16(sp),sp
   11136:	       rts

00011138 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11138:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1113a:	       movea.l 12(sp),a0
   1113e:	       move.l 24(a0),d0
   11142:	       move.l d0,-(sp)
   11144:	       pea 7 <_start+0x7>
   11148:	       move.l sp,d0
   1114a:	       addq.l #8,d0
   1114c:	       move.l d0,-(sp)
   1114e:	       jsr 1460e <getValueType>
   11154:	       lea 12(sp),sp
   11158:	       tst.w d0
   1115a:	   /-- bne.s 11160 <builtIn_hideCharacter+0x28>
   1115c:	   |   moveq #1,d0
   1115e:	/--|-- bra.s 11180 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11160:	|  \-> moveq #24,d0
   11162:	|      add.l 12(sp),d0
   11166:	|      move.l d0,-(sp)
   11168:	|      jsr 14f92 <trimStack>
   1116e:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11170:	|      move.l (sp),d0
   11172:	|      move.l d0,-(sp)
   11174:	|      clr.l -(sp)
   11176:	|      jsr bb3a <setShown>
   1117c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1117e:	|      moveq #2,d0
}
   11180:	\----> addq.l #4,sp
   11182:	       rts

00011184 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   11184:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11186:	       movea.l 12(sp),a0
   1118a:	       move.l 24(a0),d0
   1118e:	       move.l d0,-(sp)
   11190:	       pea 7 <_start+0x7>
   11194:	       move.l sp,d0
   11196:	       addq.l #8,d0
   11198:	       move.l d0,-(sp)
   1119a:	       jsr 1460e <getValueType>
   111a0:	       lea 12(sp),sp
   111a4:	       tst.w d0
   111a6:	   /-- bne.s 111ac <builtIn_showCharacter+0x28>
   111a8:	   |   moveq #1,d0
   111aa:	/--|-- bra.s 111ce <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   111ac:	|  \-> moveq #24,d0
   111ae:	|      add.l 12(sp),d0
   111b2:	|      move.l d0,-(sp)
   111b4:	|      jsr 14f92 <trimStack>
   111ba:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   111bc:	|      move.l (sp),d0
   111be:	|      move.l d0,-(sp)
   111c0:	|      pea 1 <_start+0x1>
   111c4:	|      jsr bb3a <setShown>
   111ca:	|      addq.l #8,sp
	return BR_CONTINUE;
   111cc:	|      moveq #2,d0
}
   111ce:	\----> addq.l #4,sp
   111d0:	       rts

000111d2 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   111d2:	jsr 6134 <killSpeechTimers>
	killMostPeople ();
   111d8:	jsr a972 <killMostPeople>
	return BR_CONTINUE;
   111de:	moveq #2,d0
}
   111e0:	rts

000111e2 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   111e2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111e4:	       movea.l 16(sp),a0
   111e8:	       move.l 24(a0),d0
   111ec:	       move.l d0,-(sp)
   111ee:	       pea 1 <_start+0x1>
   111f2:	       move.l sp,d0
   111f4:	       addq.l #8,d0
   111f6:	       move.l d0,-(sp)
   111f8:	       jsr 1460e <getValueType>
   111fe:	       lea 12(sp),sp
   11202:	       tst.w d0
   11204:	   /-- bne.s 1120a <builtIn_setCharacterDrawMode+0x28>
   11206:	   |   moveq #1,d0
   11208:	/--|-- bra.s 11264 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1120a:	|  \-> moveq #24,d0
   1120c:	|      add.l 16(sp),d0
   11210:	|      move.l d0,-(sp)
   11212:	|      jsr 14f92 <trimStack>
   11218:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1121a:	|      movea.l 16(sp),a0
   1121e:	|      move.l 24(a0),d0
   11222:	|      move.l d0,-(sp)
   11224:	|      pea 7 <_start+0x7>
   11228:	|      moveq #12,d0
   1122a:	|      add.l sp,d0
   1122c:	|      move.l d0,-(sp)
   1122e:	|      jsr 1460e <getValueType>
   11234:	|      lea 12(sp),sp
   11238:	|      tst.w d0
   1123a:	|  /-- bne.s 11240 <builtIn_setCharacterDrawMode+0x5e>
   1123c:	|  |   moveq #1,d0
   1123e:	+--|-- bra.s 11264 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11240:	|  \-> moveq #24,d0
   11242:	|      add.l 16(sp),d0
   11246:	|      move.l d0,-(sp)
   11248:	|      jsr 14f92 <trimStack>
   1124e:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11250:	|      move.l 4(sp),d1
   11254:	|      move.l (sp),d0
   11256:	|      move.l d1,-(sp)
   11258:	|      move.l d0,-(sp)
   1125a:	|      jsr b478 <setDrawMode>
   11260:	|      addq.l #8,sp
	return BR_CONTINUE;
   11262:	|      moveq #2,d0
}
   11264:	\----> addq.l #8,sp
   11266:	       rts

00011268 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   11268:	pea 19870 <line.c.05397aaf+0x1c>
   1126e:	jsr 17036 <KPrintF>
   11274:	addq.l #4,sp
	return BR_CONTINUE;
   11276:	moveq #2,d0
}
   11278:	rts

0001127a <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1127a:	pea 198a3 <line.c.05397aaf+0x4f>
   11280:	jsr 17036 <KPrintF>
   11286:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   11288:	moveq #2,d0
}
   1128a:	rts

0001128c <builtIn_setScale>:

builtIn(setScale)
{
   1128c:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1128e:	       movea.l 16(sp),a0
   11292:	       move.l 24(a0),d0
   11296:	       move.l d0,-(sp)
   11298:	       pea 1 <_start+0x1>
   1129c:	       move.l sp,d0
   1129e:	       addq.l #8,d0
   112a0:	       move.l d0,-(sp)
   112a2:	       jsr 1460e <getValueType>
   112a8:	       lea 12(sp),sp
   112ac:	       tst.w d0
   112ae:	   /-- bne.s 112b4 <builtIn_setScale+0x28>
   112b0:	   |   moveq #1,d0
   112b2:	/--|-- bra.s 11316 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   112b4:	|  \-> moveq #24,d0
   112b6:	|      add.l 16(sp),d0
   112ba:	|      move.l d0,-(sp)
   112bc:	|      jsr 14f92 <trimStack>
   112c2:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112c4:	|      movea.l 16(sp),a0
   112c8:	|      move.l 24(a0),d0
   112cc:	|      move.l d0,-(sp)
   112ce:	|      pea 1 <_start+0x1>
   112d2:	|      moveq #12,d0
   112d4:	|      add.l sp,d0
   112d6:	|      move.l d0,-(sp)
   112d8:	|      jsr 1460e <getValueType>
   112de:	|      lea 12(sp),sp
   112e2:	|      tst.w d0
   112e4:	|  /-- bne.s 112ea <builtIn_setScale+0x5e>
   112e6:	|  |   moveq #1,d0
   112e8:	+--|-- bra.s 11316 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   112ea:	|  \-> moveq #24,d0
   112ec:	|      add.l 16(sp),d0
   112f0:	|      move.l d0,-(sp)
   112f2:	|      jsr 14f92 <trimStack>
   112f8:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   112fa:	|      move.l (sp),d0
   112fc:	|      move.l d0,d0
   112fe:	|      movea.w d0,a1
   11300:	|      move.l 4(sp),d0
   11304:	|      move.l d0,d0
   11306:	|      movea.w d0,a0
   11308:	|      move.l a1,-(sp)
   1130a:	|      move.l a0,-(sp)
   1130c:	|      jsr bb12 <setScale>
   11312:	|      addq.l #8,sp
	return BR_CONTINUE;
   11314:	|      moveq #2,d0
}
   11316:	\----> addq.l #8,sp
   11318:	       rts

0001131a <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   1131a:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1131c:	       movea.l 12(sp),a0
   11320:	       move.l 24(a0),d0
   11324:	       move.l d0,-(sp)
   11326:	       pea 7 <_start+0x7>
   1132a:	       move.l sp,d0
   1132c:	       addq.l #8,d0
   1132e:	       move.l d0,-(sp)
   11330:	       jsr 1460e <getValueType>
   11336:	       lea 12(sp),sp
   1133a:	       tst.w d0
   1133c:	   /-- bne.s 11342 <builtIn_stopCharacter+0x28>
   1133e:	   |   moveq #1,d0
   11340:	/--|-- bra.s 1137a <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11342:	|  \-> moveq #24,d0
   11344:	|      add.l 12(sp),d0
   11348:	|      move.l d0,-(sp)
   1134a:	|      jsr 14f92 <trimStack>
   11350:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11352:	|      move.l (sp),d0
   11354:	|      move.l d0,-(sp)
   11356:	|      jsr bc46 <stopPerson>
   1135c:	|      addq.l #4,sp
   1135e:	|      movea.w d0,a0
   11360:	|      moveq #28,d0
   11362:	|      add.l 12(sp),d0
   11366:	|      move.l a0,-(sp)
   11368:	|      pea 1 <_start+0x1>
   1136c:	|      move.l d0,-(sp)
   1136e:	|      jsr 14f00 <setVariable>
   11374:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11378:	|      moveq #2,d0
}
   1137a:	\----> addq.l #4,sp
   1137c:	       rts

0001137e <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   1137e:	pea 198dd <line.c.05397aaf+0x89>
   11384:	jsr 17036 <KPrintF>
   1138a:	addq.l #4,sp
	return BR_CONTINUE;
   1138c:	moveq #2,d0
}
   1138e:	rts

00011390 <builtIn_animate>:

builtIn(animate)
{
   11390:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11392:	       movea.l 16(sp),a0
   11396:	       move.l 24(a0),d0
   1139a:	       move.l d0,-(sp)
   1139c:	       jsr 14ae6 <getAnimationFromVar>
   113a2:	       addq.l #4,sp
   113a4:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   113a8:	   /-- bne.s 113ae <builtIn_animate+0x1e>
   113aa:	   |   moveq #1,d0
   113ac:	/--|-- bra.s 1142c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   113ae:	|  \-> moveq #24,d0
   113b0:	|      add.l 16(sp),d0
   113b4:	|      move.l d0,-(sp)
   113b6:	|      jsr 14f92 <trimStack>
   113bc:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113be:	|      movea.l 16(sp),a0
   113c2:	|      move.l 24(a0),d0
   113c6:	|      move.l d0,-(sp)
   113c8:	|      pea 7 <_start+0x7>
   113cc:	|      move.l sp,d0
   113ce:	|      addq.l #8,d0
   113d0:	|      move.l d0,-(sp)
   113d2:	|      jsr 1460e <getValueType>
   113d8:	|      lea 12(sp),sp
   113dc:	|      tst.w d0
   113de:	|  /-- bne.s 113e4 <builtIn_animate+0x54>
   113e0:	|  |   moveq #1,d0
   113e2:	+--|-- bra.s 1142c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   113e4:	|  \-> moveq #24,d0
   113e6:	|      add.l 16(sp),d0
   113ea:	|      move.l d0,-(sp)
   113ec:	|      jsr 14f92 <trimStack>
   113f2:	|      addq.l #4,sp
	animatePerson (obj, pp);
   113f4:	|      move.l (sp),d0
   113f6:	|      move.l 4(sp),-(sp)
   113fa:	|      move.l d0,-(sp)
   113fc:	|      jsr 9376 <animatePerson>
   11402:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11404:	|      move.l 4(sp),-(sp)
   11408:	|      jsr bc9a <timeForAnim>
   1140e:	|      addq.l #4,sp
   11410:	|      move.l d0,d1
   11412:	|      moveq #28,d0
   11414:	|      add.l 16(sp),d0
   11418:	|      move.l d1,-(sp)
   1141a:	|      pea 1 <_start+0x1>
   1141e:	|      move.l d0,-(sp)
   11420:	|      jsr 14f00 <setVariable>
   11426:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1142a:	|      moveq #2,d0
}
   1142c:	\----> addq.l #8,sp
   1142e:	       rts

00011430 <builtIn_setCostume>:

builtIn(setCostume)
{
   11430:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11432:	       movea.l 16(sp),a0
   11436:	       move.l 24(a0),d0
   1143a:	       move.l d0,-(sp)
   1143c:	       jsr 142ba <getCostumeFromVar>
   11442:	       addq.l #4,sp
   11444:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11448:	   /-- bne.s 1144e <builtIn_setCostume+0x1e>
   1144a:	   |   moveq #1,d0
   1144c:	/--|-- bra.s 114a6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1144e:	|  \-> moveq #24,d0
   11450:	|      add.l 16(sp),d0
   11454:	|      move.l d0,-(sp)
   11456:	|      jsr 14f92 <trimStack>
   1145c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1145e:	|      movea.l 16(sp),a0
   11462:	|      move.l 24(a0),d0
   11466:	|      move.l d0,-(sp)
   11468:	|      pea 7 <_start+0x7>
   1146c:	|      move.l sp,d0
   1146e:	|      addq.l #8,d0
   11470:	|      move.l d0,-(sp)
   11472:	|      jsr 1460e <getValueType>
   11478:	|      lea 12(sp),sp
   1147c:	|      tst.w d0
   1147e:	|  /-- bne.s 11484 <builtIn_setCostume+0x54>
   11480:	|  |   moveq #1,d0
   11482:	+--|-- bra.s 114a6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11484:	|  \-> moveq #24,d0
   11486:	|      add.l 16(sp),d0
   1148a:	|      move.l d0,-(sp)
   1148c:	|      jsr 14f92 <trimStack>
   11492:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11494:	|      move.l (sp),d0
   11496:	|      move.l 4(sp),-(sp)
   1149a:	|      move.l d0,-(sp)
   1149c:	|      jsr 93c0 <animatePersonUsingPersona>
   114a2:	|      addq.l #8,sp
	return BR_CONTINUE;
   114a4:	|      moveq #2,d0
}
   114a6:	\----> addq.l #8,sp
   114a8:	       rts

000114aa <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   114aa:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114ac:	       movea.l 16(sp),a0
   114b0:	       move.l 24(a0),d0
   114b4:	       move.l d0,-(sp)
   114b6:	       pea 1 <_start+0x1>
   114ba:	       move.l sp,d0
   114bc:	       addq.l #8,d0
   114be:	       move.l d0,-(sp)
   114c0:	       jsr 1460e <getValueType>
   114c6:	       lea 12(sp),sp
   114ca:	       tst.w d0
   114cc:	   /-- bne.s 114d2 <builtIn_floatCharacter+0x28>
   114ce:	   |   moveq #1,d0
   114d0:	/--|-- bra.s 11546 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   114d2:	|  \-> moveq #24,d0
   114d4:	|      add.l 16(sp),d0
   114d8:	|      move.l d0,-(sp)
   114da:	|      jsr 14f92 <trimStack>
   114e0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114e2:	|      movea.l 16(sp),a0
   114e6:	|      move.l 24(a0),d0
   114ea:	|      move.l d0,-(sp)
   114ec:	|      pea 7 <_start+0x7>
   114f0:	|      moveq #12,d0
   114f2:	|      add.l sp,d0
   114f4:	|      move.l d0,-(sp)
   114f6:	|      jsr 1460e <getValueType>
   114fc:	|      lea 12(sp),sp
   11500:	|      tst.w d0
   11502:	|  /-- bne.s 11508 <builtIn_floatCharacter+0x5e>
   11504:	|  |   moveq #1,d0
   11506:	+--|-- bra.s 11546 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11508:	|  \-> moveq #24,d0
   1150a:	|      add.l 16(sp),d0
   1150e:	|      move.l d0,-(sp)
   11510:	|      jsr 14f92 <trimStack>
   11516:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11518:	|      move.l 4(sp),d1
   1151c:	|      move.l (sp),d0
   1151e:	|      move.l d1,-(sp)
   11520:	|      move.l d0,-(sp)
   11522:	|      jsr a534 <floatCharacter>
   11528:	|      addq.l #8,sp
   1152a:	|      movea.w d0,a0
   1152c:	|      moveq #28,d0
   1152e:	|      add.l 16(sp),d0
   11532:	|      move.l a0,-(sp)
   11534:	|      pea 1 <_start+0x1>
   11538:	|      move.l d0,-(sp)
   1153a:	|      jsr 14f00 <setVariable>
   11540:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11544:	|      moveq #2,d0
}
   11546:	\----> addq.l #8,sp
   11548:	       rts

0001154a <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   1154a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1154c:	       movea.l 16(sp),a0
   11550:	       move.l 24(a0),d0
   11554:	       move.l d0,-(sp)
   11556:	       pea 1 <_start+0x1>
   1155a:	       move.l sp,d0
   1155c:	       addq.l #8,d0
   1155e:	       move.l d0,-(sp)
   11560:	       jsr 1460e <getValueType>
   11566:	       lea 12(sp),sp
   1156a:	       tst.w d0
   1156c:	   /-- bne.s 11572 <builtIn_setCharacterWalkSpeed+0x28>
   1156e:	   |   moveq #1,d0
   11570:	/--|-- bra.s 115e6 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11572:	|  \-> moveq #24,d0
   11574:	|      add.l 16(sp),d0
   11578:	|      move.l d0,-(sp)
   1157a:	|      jsr 14f92 <trimStack>
   11580:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11582:	|      movea.l 16(sp),a0
   11586:	|      move.l 24(a0),d0
   1158a:	|      move.l d0,-(sp)
   1158c:	|      pea 7 <_start+0x7>
   11590:	|      moveq #12,d0
   11592:	|      add.l sp,d0
   11594:	|      move.l d0,-(sp)
   11596:	|      jsr 1460e <getValueType>
   1159c:	|      lea 12(sp),sp
   115a0:	|      tst.w d0
   115a2:	|  /-- bne.s 115a8 <builtIn_setCharacterWalkSpeed+0x5e>
   115a4:	|  |   moveq #1,d0
   115a6:	+--|-- bra.s 115e6 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   115a8:	|  \-> moveq #24,d0
   115aa:	|      add.l 16(sp),d0
   115ae:	|      move.l d0,-(sp)
   115b0:	|      jsr 14f92 <trimStack>
   115b6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   115b8:	|      move.l 4(sp),d1
   115bc:	|      move.l (sp),d0
   115be:	|      move.l d1,-(sp)
   115c0:	|      move.l d0,-(sp)
   115c2:	|      jsr baae <setCharacterWalkSpeed>
   115c8:	|      addq.l #8,sp
   115ca:	|      movea.w d0,a0
   115cc:	|      moveq #28,d0
   115ce:	|      add.l 16(sp),d0
   115d2:	|      move.l a0,-(sp)
   115d4:	|      pea 1 <_start+0x1>
   115d8:	|      move.l d0,-(sp)
   115da:	|      jsr 14f00 <setVariable>
   115e0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115e4:	|      moveq #2,d0
}
   115e6:	\----> addq.l #8,sp
   115e8:	       rts

000115ea <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   115ea:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115ec:	       movea.l 16(sp),a0
   115f0:	       move.l 24(a0),d0
   115f4:	       move.l d0,-(sp)
   115f6:	       pea 1 <_start+0x1>
   115fa:	       move.l sp,d0
   115fc:	       addq.l #8,d0
   115fe:	       move.l d0,-(sp)
   11600:	       jsr 1460e <getValueType>
   11606:	       lea 12(sp),sp
   1160a:	       tst.w d0
   1160c:	   /-- bne.s 11612 <builtIn_turnCharacter+0x28>
   1160e:	   |   moveq #1,d0
   11610:	/--|-- bra.s 11686 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11612:	|  \-> moveq #24,d0
   11614:	|      add.l 16(sp),d0
   11618:	|      move.l d0,-(sp)
   1161a:	|      jsr 14f92 <trimStack>
   11620:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11622:	|      movea.l 16(sp),a0
   11626:	|      move.l 24(a0),d0
   1162a:	|      move.l d0,-(sp)
   1162c:	|      pea 7 <_start+0x7>
   11630:	|      moveq #12,d0
   11632:	|      add.l sp,d0
   11634:	|      move.l d0,-(sp)
   11636:	|      jsr 1460e <getValueType>
   1163c:	|      lea 12(sp),sp
   11640:	|      tst.w d0
   11642:	|  /-- bne.s 11648 <builtIn_turnCharacter+0x5e>
   11644:	|  |   moveq #1,d0
   11646:	+--|-- bra.s 11686 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11648:	|  \-> moveq #24,d0
   1164a:	|      add.l 16(sp),d0
   1164e:	|      move.l d0,-(sp)
   11650:	|      jsr 14f92 <trimStack>
   11656:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11658:	|      move.l (sp),d1
   1165a:	|      move.l 4(sp),d0
   1165e:	|      move.l d1,-(sp)
   11660:	|      move.l d0,-(sp)
   11662:	|      jsr bd52 <turnPersonToFace>
   11668:	|      addq.l #8,sp
   1166a:	|      movea.w d0,a0
   1166c:	|      moveq #28,d0
   1166e:	|      add.l 16(sp),d0
   11672:	|      move.l a0,-(sp)
   11674:	|      pea 1 <_start+0x1>
   11678:	|      move.l d0,-(sp)
   1167a:	|      jsr 14f00 <setVariable>
   11680:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11684:	|      moveq #2,d0
}
   11686:	\----> addq.l #8,sp
   11688:	       rts

0001168a <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   1168a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1168c:	       movea.l 16(sp),a0
   11690:	       move.l 24(a0),d0
   11694:	       move.l d0,-(sp)
   11696:	       pea 1 <_start+0x1>
   1169a:	       move.l sp,d0
   1169c:	       addq.l #8,d0
   1169e:	       move.l d0,-(sp)
   116a0:	       jsr 1460e <getValueType>
   116a6:	       lea 12(sp),sp
   116aa:	       tst.w d0
   116ac:	   /-- bne.s 116b2 <builtIn_setCharacterExtra+0x28>
   116ae:	   |   moveq #1,d0
   116b0:	/--|-- bra.s 11726 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   116b2:	|  \-> moveq #24,d0
   116b4:	|      add.l 16(sp),d0
   116b8:	|      move.l d0,-(sp)
   116ba:	|      jsr 14f92 <trimStack>
   116c0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116c2:	|      movea.l 16(sp),a0
   116c6:	|      move.l 24(a0),d0
   116ca:	|      move.l d0,-(sp)
   116cc:	|      pea 7 <_start+0x7>
   116d0:	|      moveq #12,d0
   116d2:	|      add.l sp,d0
   116d4:	|      move.l d0,-(sp)
   116d6:	|      jsr 1460e <getValueType>
   116dc:	|      lea 12(sp),sp
   116e0:	|      tst.w d0
   116e2:	|  /-- bne.s 116e8 <builtIn_setCharacterExtra+0x5e>
   116e4:	|  |   moveq #1,d0
   116e6:	+--|-- bra.s 11726 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   116e8:	|  \-> moveq #24,d0
   116ea:	|      add.l 16(sp),d0
   116ee:	|      move.l d0,-(sp)
   116f0:	|      jsr 14f92 <trimStack>
   116f6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   116f8:	|      move.l (sp),d1
   116fa:	|      move.l 4(sp),d0
   116fe:	|      move.l d1,-(sp)
   11700:	|      move.l d0,-(sp)
   11702:	|      jsr badc <setPersonExtra>
   11708:	|      addq.l #8,sp
   1170a:	|      movea.w d0,a0
   1170c:	|      moveq #28,d0
   1170e:	|      add.l 16(sp),d0
   11712:	|      move.l a0,-(sp)
   11714:	|      pea 1 <_start+0x1>
   11718:	|      move.l d0,-(sp)
   1171a:	|      jsr 14f00 <setVariable>
   11720:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11724:	|      moveq #2,d0
}
   11726:	\----> addq.l #8,sp
   11728:	       rts

0001172a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1172a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1172c:	       movea.l 12(sp),a0
   11730:	       move.l 24(a0),d0
   11734:	       move.l d0,-(sp)
   11736:	       pea 7 <_start+0x7>
   1173a:	       move.l sp,d0
   1173c:	       addq.l #8,d0
   1173e:	       move.l d0,-(sp)
   11740:	       jsr 1460e <getValueType>
   11746:	       lea 12(sp),sp
   1174a:	       tst.w d0
   1174c:	   /-- bne.s 11752 <builtIn_removeCharacter+0x28>
   1174e:	   |   moveq #1,d0
   11750:	/--|-- bra.s 11770 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11752:	|  \-> moveq #24,d0
   11754:	|      add.l 12(sp),d0
   11758:	|      move.l d0,-(sp)
   1175a:	|      jsr 14f92 <trimStack>
   11760:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11762:	|      move.l (sp),d0
   11764:	|      move.l d0,-(sp)
   11766:	|      jsr acdc <removeOneCharacter>
   1176c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1176e:	|      moveq #2,d0
}
   11770:	\----> addq.l #4,sp
   11772:	       rts

00011774 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11774:	                lea -28(sp),sp
   11778:	                move.l d2,-(sp)
   1177a:	                move.l 44(sp),d1
   1177e:	                move.l 48(sp),d0
   11782:	                move.w d1,d1
   11784:	                move.w d1,6(sp)
   11788:	                move.w d0,d0
   1178a:	                move.w d0,4(sp)
	switch (numParams) {
   1178e:	                moveq #2,d0
   11790:	                cmp.l 36(sp),d0
   11794:	      /-------- beq.w 118d6 <moveChr+0x162>
   11798:	      |         moveq #3,d0
   1179a:	      |         cmp.l 36(sp),d0
   1179e:	/-----|-------- bne.w 11a0a <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117a2:	|     |         movea.l 40(sp),a0
   117a6:	|     |         move.l 24(a0),d0
   117aa:	|     |         move.l d0,-(sp)
   117ac:	|     |         pea 1 <_start+0x1>
   117b0:	|     |         lea 20(sp),a0
   117b4:	|     |         move.l a0,-(sp)
   117b6:	|     |         jsr 1460e <getValueType>
   117bc:	|     |         lea 12(sp),sp
   117c0:	|     |         tst.w d0
   117c2:	|     |     /-- bne.s 117ca <moveChr+0x56>
   117c4:	|     |     |   moveq #1,d0
   117c6:	|  /--|-----|-- bra.w 11a1a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   117ca:	|  |  |     \-> moveq #24,d0
   117cc:	|  |  |         add.l 40(sp),d0
   117d0:	|  |  |         move.l d0,-(sp)
   117d2:	|  |  |         jsr 14f92 <trimStack>
   117d8:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117da:	|  |  |         movea.l 40(sp),a0
   117de:	|  |  |         move.l 24(a0),d0
   117e2:	|  |  |         move.l d0,-(sp)
   117e4:	|  |  |         pea 1 <_start+0x1>
   117e8:	|  |  |         lea 24(sp),a0
   117ec:	|  |  |         move.l a0,-(sp)
   117ee:	|  |  |         jsr 1460e <getValueType>
   117f4:	|  |  |         lea 12(sp),sp
   117f8:	|  |  |         tst.w d0
   117fa:	|  |  |     /-- bne.s 11802 <moveChr+0x8e>
   117fc:	|  |  |     |   moveq #1,d0
   117fe:	|  +--|-----|-- bra.w 11a1a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11802:	|  |  |     \-> moveq #24,d0
   11804:	|  |  |         add.l 40(sp),d0
   11808:	|  |  |         move.l d0,-(sp)
   1180a:	|  |  |         jsr 14f92 <trimStack>
   11810:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11812:	|  |  |         movea.l 40(sp),a0
   11816:	|  |  |         move.l 24(a0),d0
   1181a:	|  |  |         move.l d0,-(sp)
   1181c:	|  |  |         pea 7 <_start+0x7>
   11820:	|  |  |         lea 16(sp),a0
   11824:	|  |  |         move.l a0,-(sp)
   11826:	|  |  |         jsr 1460e <getValueType>
   1182c:	|  |  |         lea 12(sp),sp
   11830:	|  |  |         tst.w d0
   11832:	|  |  |     /-- bne.s 1183a <moveChr+0xc6>
   11834:	|  |  |     |   moveq #1,d0
   11836:	|  +--|-----|-- bra.w 11a1a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1183a:	|  |  |     \-> moveq #24,d0
   1183c:	|  |  |         add.l 40(sp),d0
   11840:	|  |  |         move.l d0,-(sp)
   11842:	|  |  |         jsr 14f92 <trimStack>
   11848:	|  |  |         addq.l #4,sp

			if (force) {
   1184a:	|  |  |         tst.w 6(sp)
   1184e:	|  |  |     /-- beq.s 1187e <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11850:	|  |  |     |   movea.l 8(sp),a0
   11854:	|  |  |     |   move.l 12(sp),d1
   11858:	|  |  |     |   move.l 16(sp),d0
   1185c:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb4f07>
   11860:	|  |  |     |   move.l 44(sp),-(sp)
   11864:	|  |  |     |   move.l a0,-(sp)
   11866:	|  |  |     |   move.l d1,-(sp)
   11868:	|  |  |     |   move.l d0,-(sp)
   1186a:	|  |  |     |   jsr a558 <forceWalkingPerson>
   11870:	|  |  |     |   lea 20(sp),sp
   11874:	|  |  |     |   tst.w d0
   11876:	|  |  |  /--|-- beq.s 118d0 <moveChr+0x15c>
   11878:	|  |  |  |  |   moveq #3,d0
   1187a:	|  +--|--|--|-- bra.w 11a1a <moveChr+0x2a6>
			} else if (immediate) {
   1187e:	|  |  |  |  \-> tst.w 4(sp)
   11882:	|  |  |  |  /-- beq.s 118a2 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11884:	|  |  |  |  |   movea.l 8(sp),a0
   11888:	|  |  |  |  |   move.l 12(sp),d1
   1188c:	|  |  |  |  |   move.l 16(sp),d0
   11890:	|  |  |  |  |   move.l a0,-(sp)
   11892:	|  |  |  |  |   move.l d1,-(sp)
   11894:	|  |  |  |  |   move.l d0,-(sp)
   11896:	|  |  |  |  |   jsr a860 <jumpPerson>
   1189c:	|  |  |  |  |   lea 12(sp),sp
   118a0:	|  |  |  +--|-- bra.s 118d0 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   118a2:	|  |  |  |  \-> movea.l 8(sp),a0
   118a6:	|  |  |  |      move.l 12(sp),d1
   118aa:	|  |  |  |      move.l 16(sp),d0
   118ae:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb4f07>
   118b2:	|  |  |  |      move.l 44(sp),-(sp)
   118b6:	|  |  |  |      move.l a0,-(sp)
   118b8:	|  |  |  |      move.l d1,-(sp)
   118ba:	|  |  |  |      move.l d0,-(sp)
   118bc:	|  |  |  |      jsr aa30 <makeWalkingPerson>
   118c2:	|  |  |  |      lea 20(sp),sp
   118c6:	|  |  |  |      tst.w d0
   118c8:	|  |  |  +----- beq.s 118d0 <moveChr+0x15c>
   118ca:	|  |  |  |      moveq #3,d0
   118cc:	|  +--|--|----- bra.w 11a1a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   118d0:	|  |  |  \----> moveq #2,d0
   118d2:	|  +--|-------- bra.w 11a1a <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118d6:	|  |  \-------> movea.l 40(sp),a0
   118da:	|  |            move.l 24(a0),d0
   118de:	|  |            move.l d0,-(sp)
   118e0:	|  |            pea 7 <_start+0x7>
   118e4:	|  |            moveq #32,d0
   118e6:	|  |            add.l sp,d0
   118e8:	|  |            move.l d0,-(sp)
   118ea:	|  |            jsr 1460e <getValueType>
   118f0:	|  |            lea 12(sp),sp
   118f4:	|  |            tst.w d0
   118f6:	|  |        /-- bne.s 118fe <moveChr+0x18a>
   118f8:	|  |        |   moveq #1,d0
   118fa:	|  +--------|-- bra.w 11a1a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   118fe:	|  |        \-> moveq #24,d0
   11900:	|  |            add.l 40(sp),d0
   11904:	|  |            move.l d0,-(sp)
   11906:	|  |            jsr 14f92 <trimStack>
   1190c:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1190e:	|  |            movea.l 40(sp),a0
   11912:	|  |            move.l 24(a0),d0
   11916:	|  |            move.l d0,-(sp)
   11918:	|  |            pea 7 <_start+0x7>
   1191c:	|  |            lea 28(sp),a0
   11920:	|  |            move.l a0,-(sp)
   11922:	|  |            jsr 1460e <getValueType>
   11928:	|  |            lea 12(sp),sp
   1192c:	|  |            tst.w d0
   1192e:	|  |        /-- bne.s 11936 <moveChr+0x1c2>
   11930:	|  |        |   moveq #1,d0
   11932:	|  +--------|-- bra.w 11a1a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11936:	|  |        \-> moveq #24,d0
   11938:	|  |            add.l 40(sp),d0
   1193c:	|  |            move.l d0,-(sp)
   1193e:	|  |            jsr 14f92 <trimStack>
   11944:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11946:	|  |            move.l 24(sp),d0
   1194a:	|  |            move.l d0,-(sp)
   1194c:	|  |            jsr 15858 <getRegionForObject>
   11952:	|  |            addq.l #4,sp
   11954:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11958:	|  |        /-- bne.s 11960 <moveChr+0x1ec>
   1195a:	|  |        |   moveq #2,d0
   1195c:	|  +--------|-- bra.w 11a1a <moveChr+0x2a6>

			if (force)
   11960:	|  |        \-> tst.w 6(sp)
   11964:	|  |        /-- beq.s 119a0 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11966:	|  |        |   movea.l 28(sp),a0
   1196a:	|  |        |   move.l 24(a0),d2
   1196e:	|  |        |   movea.l 20(sp),a1
   11972:	|  |        |   movea.l 28(sp),a0
   11976:	|  |        |   move.l 20(a0),d1
   1197a:	|  |        |   movea.l 28(sp),a0
   1197e:	|  |        |   move.l 16(a0),d0
   11982:	|  |        |   move.l d2,-(sp)
   11984:	|  |        |   move.l 44(sp),-(sp)
   11988:	|  |        |   move.l a1,-(sp)
   1198a:	|  |        |   move.l d1,-(sp)
   1198c:	|  |        |   move.l d0,-(sp)
   1198e:	|  |        |   jsr a558 <forceWalkingPerson>
   11994:	|  |        |   lea 20(sp),sp
   11998:	|  |        |   tst.w d0
   1199a:	|  |     /--|-- beq.s 11a06 <moveChr+0x292>
   1199c:	|  |     |  |   moveq #3,d0
   1199e:	|  +-----|--|-- bra.s 11a1a <moveChr+0x2a6>
			}
			else if (immediate)
   119a0:	|  |     |  \-> tst.w 4(sp)
   119a4:	|  |     |  /-- beq.s 119cc <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   119a6:	|  |     |  |   movea.l 20(sp),a1
   119aa:	|  |     |  |   movea.l 28(sp),a0
   119ae:	|  |     |  |   move.l 20(a0),d1
   119b2:	|  |     |  |   movea.l 28(sp),a0
   119b6:	|  |     |  |   move.l 16(a0),d0
   119ba:	|  |     |  |   move.l a1,-(sp)
   119bc:	|  |     |  |   move.l d1,-(sp)
   119be:	|  |     |  |   move.l d0,-(sp)
   119c0:	|  |     |  |   jsr a860 <jumpPerson>
   119c6:	|  |     |  |   lea 12(sp),sp
   119ca:	|  |     +--|-- bra.s 11a06 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   119cc:	|  |     |  \-> movea.l 28(sp),a0
   119d0:	|  |     |      move.l 24(a0),d2
   119d4:	|  |     |      movea.l 20(sp),a1
   119d8:	|  |     |      movea.l 28(sp),a0
   119dc:	|  |     |      move.l 20(a0),d1
   119e0:	|  |     |      movea.l 28(sp),a0
   119e4:	|  |     |      move.l 16(a0),d0
   119e8:	|  |     |      move.l d2,-(sp)
   119ea:	|  |     |      move.l 44(sp),-(sp)
   119ee:	|  |     |      move.l a1,-(sp)
   119f0:	|  |     |      move.l d1,-(sp)
   119f2:	|  |     |      move.l d0,-(sp)
   119f4:	|  |     |      jsr aa30 <makeWalkingPerson>
   119fa:	|  |     |      lea 20(sp),sp
   119fe:	|  |     |      tst.w d0
   11a00:	|  |     +----- beq.s 11a06 <moveChr+0x292>
   11a02:	|  |     |      moveq #3,d0
   11a04:	|  +-----|----- bra.s 11a1a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11a06:	|  |     \----> moveq #2,d0
   11a08:	|  +----------- bra.s 11a1a <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11a0a:	\--|----------> pea 198fb <line.c.05397aaf+0xa7>
   11a10:	   |            jsr 17036 <KPrintF>
   11a16:	   |            addq.l #4,sp
			return BR_ERROR;
   11a18:	   |            moveq #1,d0
	}
}
   11a1a:	   \----------> move.l (sp)+,d2
   11a1c:	                lea 28(sp),sp
   11a20:	                rts

00011a22 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11a22:	clr.l -(sp)
   11a24:	clr.l -(sp)
   11a26:	move.l 16(sp),-(sp)
   11a2a:	move.l 16(sp),-(sp)
   11a2e:	jsr 11774 <moveChr>
   11a34:	lea 16(sp),sp
}
   11a38:	rts

00011a3a <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11a3a:	clr.l -(sp)
   11a3c:	pea 1 <_start+0x1>
   11a40:	move.l 16(sp),-(sp)
   11a44:	move.l 16(sp),-(sp)
   11a48:	jsr 11774 <moveChr>
   11a4e:	lea 16(sp),sp
}
   11a52:	rts

00011a54 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11a54:	pea 1 <_start+0x1>
   11a58:	clr.l -(sp)
   11a5a:	move.l 16(sp),-(sp)
   11a5e:	move.l 16(sp),-(sp)
   11a62:	jsr 11774 <moveChr>
   11a68:	lea 16(sp),sp
}
   11a6c:	rts

00011a6e <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11a6e:	jsr 782e <clearStatusBar>
	return BR_CONTINUE;
   11a74:	moveq #2,d0
}
   11a76:	rts

00011a78 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11a78:	jsr 78d6 <killLastStatus>
	return BR_CONTINUE;
   11a7e:	moveq #2,d0
}
   11a80:	rts

00011a82 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11a82:	jsr 77c4 <addStatusBar>
	return BR_CONTINUE;
   11a88:	moveq #2,d0
}
   11a8a:	rts

00011a8c <builtIn_statusText>:

builtIn(statusText)
{
   11a8c:	       subq.l #8,sp
   11a8e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11a90:	       movea.l 20(sp),a0
   11a94:	       move.l 24(a0),d0
   11a98:	       move.l d0,-(sp)
   11a9a:	       jsr 14be4 <getTextFromAnyVar>
   11aa0:	       addq.l #4,sp
   11aa2:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11aa6:	   /-- bne.s 11aac <builtIn_statusText+0x20>
   11aa8:	   |   moveq #1,d0
   11aaa:	/--|-- bra.s 11ae0 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11aac:	|  \-> moveq #24,d0
   11aae:	|      add.l 20(sp),d0
   11ab2:	|      move.l d0,-(sp)
   11ab4:	|      jsr 14f92 <trimStack>
   11aba:	|      addq.l #4,sp
	setStatusBar(newText);
   11abc:	|      move.l 8(sp),-(sp)
   11ac0:	|      jsr 7b56 <setStatusBar>
   11ac6:	|      addq.l #4,sp
	FreeVec(newText);
   11ac8:	|      move.l 8(sp),4(sp)
   11ace:	|      move.l 1a7a4 <SysBase>,d0
   11ad4:	|      movea.l d0,a6
   11ad6:	|      movea.l 4(sp),a1
   11ada:	|      jsr -690(a6)
	return BR_CONTINUE;
   11ade:	|      moveq #2,d0
}
   11ae0:	\----> movea.l (sp)+,a6
   11ae2:	       addq.l #8,sp
   11ae4:	       rts

00011ae6 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11ae6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ae8:	       movea.l 12(sp),a0
   11aec:	       move.l 24(a0),d0
   11af0:	       move.l d0,-(sp)
   11af2:	       pea 1 <_start+0x1>
   11af6:	       move.l sp,d0
   11af8:	       addq.l #8,d0
   11afa:	       move.l d0,-(sp)
   11afc:	       jsr 1460e <getValueType>
   11b02:	       lea 12(sp),sp
   11b06:	       tst.w d0
   11b08:	   /-- bne.s 11b0e <builtIn_lightStatus+0x28>
   11b0a:	   |   moveq #1,d0
   11b0c:	/--|-- bra.s 11b2c <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11b0e:	|  \-> moveq #24,d0
   11b10:	|      add.l 12(sp),d0
   11b14:	|      move.l d0,-(sp)
   11b16:	|      jsr 14f92 <trimStack>
   11b1c:	|      addq.l #4,sp
	setLitStatus (val);
   11b1e:	|      move.l (sp),d0
   11b20:	|      move.l d0,-(sp)
   11b22:	|      jsr 7b46 <setLitStatus>
   11b28:	|      addq.l #4,sp
	return BR_CONTINUE;
   11b2a:	|      moveq #2,d0
}
   11b2c:	\----> addq.l #4,sp
   11b2e:	       rts

00011b30 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11b30:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b32:	       movea.l 16(sp),a0
   11b36:	       move.l 24(a0),d0
   11b3a:	       move.l d0,-(sp)
   11b3c:	       pea 1 <_start+0x1>
   11b40:	       move.l sp,d0
   11b42:	       addq.l #8,d0
   11b44:	       move.l d0,-(sp)
   11b46:	       jsr 1460e <getValueType>
   11b4c:	       lea 12(sp),sp
   11b50:	       tst.w d0
   11b52:	   /-- bne.s 11b58 <builtIn_positionStatus+0x28>
   11b54:	   |   moveq #1,d0
   11b56:	/--|-- bra.s 11bb2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11b58:	|  \-> moveq #24,d0
   11b5a:	|      add.l 16(sp),d0
   11b5e:	|      move.l d0,-(sp)
   11b60:	|      jsr 14f92 <trimStack>
   11b66:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b68:	|      movea.l 16(sp),a0
   11b6c:	|      move.l 24(a0),d0
   11b70:	|      move.l d0,-(sp)
   11b72:	|      pea 1 <_start+0x1>
   11b76:	|      moveq #12,d0
   11b78:	|      add.l sp,d0
   11b7a:	|      move.l d0,-(sp)
   11b7c:	|      jsr 1460e <getValueType>
   11b82:	|      lea 12(sp),sp
   11b86:	|      tst.w d0
   11b88:	|  /-- bne.s 11b8e <builtIn_positionStatus+0x5e>
   11b8a:	|  |   moveq #1,d0
   11b8c:	+--|-- bra.s 11bb2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11b8e:	|  \-> moveq #24,d0
   11b90:	|      add.l 16(sp),d0
   11b94:	|      move.l d0,-(sp)
   11b96:	|      jsr 14f92 <trimStack>
   11b9c:	|      addq.l #4,sp
	positionStatus (x, y);
   11b9e:	|      move.l (sp),d1
   11ba0:	|      move.l 4(sp),d0
   11ba4:	|      move.l d1,-(sp)
   11ba6:	|      move.l d0,-(sp)
   11ba8:	|      jsr 7938 <positionStatus>
   11bae:	|      addq.l #8,sp
	return BR_CONTINUE;
   11bb0:	|      moveq #2,d0
}
   11bb2:	\----> addq.l #8,sp
   11bb4:	       rts

00011bb6 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11bb6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11bb8:	       movea.l 12(sp),a0
   11bbc:	       move.l 24(a0),d0
   11bc0:	       move.l d0,-(sp)
   11bc2:	       pea 1 <_start+0x1>
   11bc6:	       move.l sp,d0
   11bc8:	       addq.l #8,d0
   11bca:	       move.l d0,-(sp)
   11bcc:	       jsr 1460e <getValueType>
   11bd2:	       lea 12(sp),sp
   11bd6:	       tst.w d0
   11bd8:	   /-- bne.s 11bde <builtIn_alignStatus+0x28>
   11bda:	   |   moveq #1,d0
   11bdc:	/--|-- bra.s 11bfe <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11bde:	|  \-> moveq #24,d0
   11be0:	|      add.l 12(sp),d0
   11be4:	|      move.l d0,-(sp)
   11be6:	|      jsr 14f92 <trimStack>
   11bec:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11bee:	|      move.l (sp),d0
   11bf0:	|      movea.l 1a12a <nowStatus>,a0
   11bf6:	|      move.l d0,d0
   11bf8:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11bfc:	|      moveq #2,d0
}
   11bfe:	\----> addq.l #4,sp
   11c00:	       rts

00011c02 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11c02:	             tst.l 4(sp)
   11c06:	      /----- beq.s 11c12 <getFuncNumForCallback+0x10>
   11c08:	      |      moveq #1,d0
   11c0a:	      |      cmp.l 4(sp),d0
   11c0e:	      |  /-- beq.s 11c18 <getFuncNumForCallback+0x16>
   11c10:	   /--|--|-- bra.s 11c4e <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11c12:	   |  \--|-> clr.l 12(sp)
			break;
   11c16:	/--|-----|-- bra.s 11c60 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11c18:	|  |     \-> movea.l 8(sp),a0
   11c1c:	|  |         move.l 24(a0),d0
   11c20:	|  |         move.l d0,-(sp)
   11c22:	|  |         pea 2 <_start+0x2>
   11c26:	|  |         move.l 20(sp),-(sp)
   11c2a:	|  |         jsr 1460e <getValueType>
   11c30:	|  |         lea 12(sp),sp
   11c34:	|  |         tst.w d0
   11c36:	|  |     /-- bne.s 11c3c <getFuncNumForCallback+0x3a>
   11c38:	|  |     |   clr.w d0
   11c3a:	|  |  /--|-- bra.s 11c62 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11c3c:	|  |  |  \-> moveq #24,d0
   11c3e:	|  |  |      add.l 8(sp),d0
   11c42:	|  |  |      move.l d0,-(sp)
   11c44:	|  |  |      jsr 14f92 <trimStack>
   11c4a:	|  |  |      addq.l #4,sp
			break;
   11c4c:	+--|--|----- bra.s 11c60 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11c4e:	|  \--|----> pea 19931 <line.c.05397aaf+0xdd>
   11c54:	|     |      jsr 17036 <KPrintF>
   11c5a:	|     |      addq.l #4,sp
			return FALSE;
   11c5c:	|     |      clr.w d0
   11c5e:	|     +----- bra.s 11c62 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11c60:	\-----|----> moveq #1,d0
}
   11c62:	      \----> rts

00011c64 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11c64:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c66:	       move.l sp,d0
   11c68:	       move.l d0,-(sp)
   11c6a:	       move.l 16(sp),-(sp)
   11c6e:	       move.l 16(sp),-(sp)
   11c72:	       jsr 11c02 <getFuncNumForCallback>
   11c78:	       lea 12(sp),sp
   11c7c:	       tst.w d0
   11c7e:	/----- beq.s 11c8e <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11c80:	|      movea.l 1a11c <currentEvents>,a0
   11c86:	|      move.l (sp),d0
   11c88:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11c8a:	|      moveq #2,d0
   11c8c:	|  /-- bra.s 11c90 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11c8e:	\--|-> moveq #1,d0
}
   11c90:	   \-> addq.l #4,sp
   11c92:	       rts

00011c94 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11c94:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c96:	       move.l sp,d0
   11c98:	       move.l d0,-(sp)
   11c9a:	       move.l 16(sp),-(sp)
   11c9e:	       move.l 16(sp),-(sp)
   11ca2:	       jsr 11c02 <getFuncNumForCallback>
   11ca8:	       lea 12(sp),sp
   11cac:	       tst.w d0
   11cae:	/----- beq.s 11cc0 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11cb0:	|      movea.l 1a11c <currentEvents>,a0
   11cb6:	|      move.l (sp),d0
   11cb8:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11cbc:	|      moveq #2,d0
   11cbe:	|  /-- bra.s 11cc2 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11cc0:	\--|-> moveq #1,d0
}
   11cc2:	   \-> addq.l #4,sp
   11cc4:	       rts

00011cc6 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11cc6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11cc8:	       move.l sp,d0
   11cca:	       move.l d0,-(sp)
   11ccc:	       move.l 16(sp),-(sp)
   11cd0:	       move.l 16(sp),-(sp)
   11cd4:	       jsr 11c02 <getFuncNumForCallback>
   11cda:	       lea 12(sp),sp
   11cde:	       tst.w d0
   11ce0:	/----- beq.s 11cf2 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11ce2:	|      movea.l 1a11c <currentEvents>,a0
   11ce8:	|      move.l (sp),d0
   11cea:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11cee:	|      moveq #2,d0
   11cf0:	|  /-- bra.s 11cf4 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11cf2:	\--|-> moveq #1,d0
}
   11cf4:	   \-> addq.l #4,sp
   11cf6:	       rts

00011cf8 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11cf8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11cfa:	       move.l sp,d0
   11cfc:	       move.l d0,-(sp)
   11cfe:	       move.l 16(sp),-(sp)
   11d02:	       move.l 16(sp),-(sp)
   11d06:	       jsr 11c02 <getFuncNumForCallback>
   11d0c:	       lea 12(sp),sp
   11d10:	       tst.w d0
   11d12:	/----- beq.s 11d24 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11d14:	|      movea.l 1a11c <currentEvents>,a0
   11d1a:	|      move.l (sp),d0
   11d1c:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11d20:	|      moveq #2,d0
   11d22:	|  /-- bra.s 11d26 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11d24:	\--|-> moveq #1,d0
}
   11d26:	   \-> addq.l #4,sp
   11d28:	       rts

00011d2a <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11d2a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d2c:	       move.l sp,d0
   11d2e:	       move.l d0,-(sp)
   11d30:	       move.l 16(sp),-(sp)
   11d34:	       move.l 16(sp),-(sp)
   11d38:	       jsr 11c02 <getFuncNumForCallback>
   11d3e:	       lea 12(sp),sp
   11d42:	       tst.w d0
   11d44:	/----- beq.s 11d56 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11d46:	|      movea.l 1a11c <currentEvents>,a0
   11d4c:	|      move.l (sp),d0
   11d4e:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11d52:	|      moveq #2,d0
   11d54:	|  /-- bra.s 11d58 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11d56:	\--|-> moveq #1,d0
}
   11d58:	   \-> addq.l #4,sp
   11d5a:	       rts

00011d5c <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11d5c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d5e:	       move.l sp,d0
   11d60:	       move.l d0,-(sp)
   11d62:	       move.l 16(sp),-(sp)
   11d66:	       move.l 16(sp),-(sp)
   11d6a:	       jsr 11c02 <getFuncNumForCallback>
   11d70:	       lea 12(sp),sp
   11d74:	       tst.w d0
   11d76:	/----- beq.s 11d88 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11d78:	|      movea.l 1a11c <currentEvents>,a0
   11d7e:	|      move.l (sp),d0
   11d80:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11d84:	|      moveq #2,d0
   11d86:	|  /-- bra.s 11d8a <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11d88:	\--|-> moveq #1,d0
}
   11d8a:	   \-> addq.l #4,sp
   11d8c:	       rts

00011d8e <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11d8e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d90:	       move.l sp,d0
   11d92:	       move.l d0,-(sp)
   11d94:	       move.l 16(sp),-(sp)
   11d98:	       move.l 16(sp),-(sp)
   11d9c:	       jsr 11c02 <getFuncNumForCallback>
   11da2:	       lea 12(sp),sp
   11da6:	       tst.w d0
   11da8:	/----- beq.s 11dba <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11daa:	|      movea.l 1a11c <currentEvents>,a0
   11db0:	|      move.l (sp),d0
   11db2:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11db6:	|      moveq #2,d0
   11db8:	|  /-- bra.s 11dbc <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11dba:	\--|-> moveq #1,d0
}
   11dbc:	   \-> addq.l #4,sp
   11dbe:	       rts

00011dc0 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11dc0:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11dc2:	          move.l sp,d0
   11dc4:	          move.l d0,-(sp)
   11dc6:	          move.l 16(sp),-(sp)
   11dca:	          move.l 16(sp),-(sp)
   11dce:	          jsr 11c02 <getFuncNumForCallback>
   11dd4:	          lea 12(sp),sp
   11dd8:	          tst.w d0
   11dda:	/-------- beq.s 11e06 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11ddc:	|         move.l 1a774 <noStack>,d1
   11de2:	|         move.l (sp),d0
   11de4:	|         pea 1 <_start+0x1>
   11de8:	|         move.l d1,-(sp)
   11dea:	|         clr.l -(sp)
   11dec:	|         clr.l -(sp)
   11dee:	|         move.l d0,-(sp)
   11df0:	|         jsr 6a08 <startNewFunctionNum>
   11df6:	|         lea 20(sp),sp
   11dfa:	|         tst.l d0
   11dfc:	|     /-- bne.s 11e02 <builtIn_spawnSub+0x42>
   11dfe:	|     |   moveq #1,d0
   11e00:	|  /--|-- bra.s 11e08 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11e02:	|  |  \-> moveq #2,d0
   11e04:	|  +----- bra.s 11e08 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11e06:	\--|----> moveq #1,d0
}
   11e08:	   \----> addq.l #4,sp
   11e0a:	          rts

00011e0c <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11e0c:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e0e:	          move.l sp,d0
   11e10:	          addq.l #4,d0
   11e12:	          move.l d0,-(sp)
   11e14:	          move.l 20(sp),-(sp)
   11e18:	          move.l 20(sp),-(sp)
   11e1c:	          jsr 11c02 <getFuncNumForCallback>
   11e22:	          lea 12(sp),sp
   11e26:	          tst.w d0
   11e28:	/-------- beq.s 11e5e <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11e2a:	|         move.l 4(sp),d1
   11e2e:	|         move.l sp,d0
   11e30:	|         addq.l #2,d0
   11e32:	|         move.l d0,-(sp)
   11e34:	|         move.l 20(sp),-(sp)
   11e38:	|         move.l d1,-(sp)
   11e3a:	|         jsr 472e <cancelAFunction>
   11e40:	|         lea 12(sp),sp
		if (killedMyself) {
   11e44:	|         move.w 2(sp),d0
   11e48:	|  /----- beq.s 11e5a <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11e4a:	|  |      move.l 16(sp),-(sp)
   11e4e:	|  |      jsr 464c <abortFunction>
   11e54:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11e56:	|  |      moveq #5,d0
   11e58:	|  |  /-- bra.s 11e60 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11e5a:	|  \--|-> moveq #2,d0
   11e5c:	|     +-- bra.s 11e60 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11e5e:	\-----|-> moveq #1,d0
}
   11e60:	      \-> addq.l #8,sp
   11e62:	          rts

00011e64 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11e64:	       subq.l #8,sp
   11e66:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11e68:	       movea.l 20(sp),a0
   11e6c:	       move.l 24(a0),d0
   11e70:	       move.l d0,-(sp)
   11e72:	       jsr 14be4 <getTextFromAnyVar>
   11e78:	       addq.l #4,sp
   11e7a:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11e7e:	   /-- bne.s 11e84 <builtIn_stringWidth+0x20>
   11e80:	   |   moveq #1,d0
   11e82:	/--|-- bra.s 11ed2 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11e84:	|  \-> moveq #24,d0
   11e86:	|      add.l 20(sp),d0
   11e8a:	|      move.l d0,-(sp)
   11e8c:	|      jsr 14f92 <trimStack>
   11e92:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11e94:	|      move.l 8(sp),-(sp)
   11e98:	|      jsr 156f8 <stringWidth>
   11e9e:	|      addq.l #4,sp
   11ea0:	|      move.l d0,d1
   11ea2:	|      moveq #28,d0
   11ea4:	|      add.l 20(sp),d0
   11ea8:	|      move.l d1,-(sp)
   11eaa:	|      pea 1 <_start+0x1>
   11eae:	|      move.l d0,-(sp)
   11eb0:	|      jsr 14f00 <setVariable>
   11eb6:	|      lea 12(sp),sp
	FreeVec(theText);
   11eba:	|      move.l 8(sp),4(sp)
   11ec0:	|      move.l 1a7a4 <SysBase>,d0
   11ec6:	|      movea.l d0,a6
   11ec8:	|      movea.l 4(sp),a1
   11ecc:	|      jsr -690(a6)
	return BR_CONTINUE;
   11ed0:	|      moveq #2,d0
}
   11ed2:	\----> movea.l (sp)+,a6
   11ed4:	       addq.l #8,sp
   11ed6:	       rts

00011ed8 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   11ed8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11eda:	       movea.l 12(sp),a0
   11ede:	       move.l 24(a0),d0
   11ee2:	       move.l d0,-(sp)
   11ee4:	       pea 1 <_start+0x1>
   11ee8:	       move.l sp,d0
   11eea:	       addq.l #8,d0
   11eec:	       move.l d0,-(sp)
   11eee:	       jsr 1460e <getValueType>
   11ef4:	       lea 12(sp),sp
   11ef8:	       tst.w d0
   11efa:	   /-- bne.s 11f00 <builtIn_hardScroll+0x28>
   11efc:	   |   moveq #1,d0
   11efe:	/--|-- bra.s 11f1e <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11f00:	|  \-> moveq #24,d0
   11f02:	|      add.l 12(sp),d0
   11f06:	|      move.l d0,-(sp)
   11f08:	|      jsr 14f92 <trimStack>
   11f0e:	|      addq.l #4,sp
	hardScroll (v);
   11f10:	|      move.l (sp),d0
   11f12:	|      move.l d0,-(sp)
   11f14:	|      jsr d0ca <hardScroll>
   11f1a:	|      addq.l #4,sp
	return BR_CONTINUE;
   11f1c:	|      moveq #2,d0
}
   11f1e:	\----> addq.l #4,sp
   11f20:	       rts

00011f22 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11f22:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f24:	       movea.l 12(sp),a0
   11f28:	       move.l 24(a0),d0
   11f2c:	       move.l d0,-(sp)
   11f2e:	       pea 7 <_start+0x7>
   11f32:	       move.l sp,d0
   11f34:	       addq.l #8,d0
   11f36:	       move.l d0,-(sp)
   11f38:	       jsr 1460e <getValueType>
   11f3e:	       lea 12(sp),sp
   11f42:	       tst.w d0
   11f44:	   /-- bne.s 11f4a <builtIn_isScreenRegion+0x28>
   11f46:	   |   moveq #1,d0
   11f48:	/--|-- bra.s 11f8a <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11f4a:	|  \-> moveq #24,d0
   11f4c:	|      add.l 12(sp),d0
   11f50:	|      move.l d0,-(sp)
   11f52:	|      jsr 14f92 <trimStack>
   11f58:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   11f5a:	|      move.l (sp),d0
   11f5c:	|      move.l d0,-(sp)
   11f5e:	|      jsr 15858 <getRegionForObject>
   11f64:	|      addq.l #4,sp
   11f66:	|      tst.l d0
   11f68:	|      sne d0
   11f6a:	|      neg.b d0
   11f6c:	|      moveq #0,d1
   11f6e:	|      move.b d0,d1
   11f70:	|      moveq #28,d0
   11f72:	|      add.l 12(sp),d0
   11f76:	|      move.l d1,-(sp)
   11f78:	|      pea 1 <_start+0x1>
   11f7c:	|      move.l d0,-(sp)
   11f7e:	|      jsr 14f00 <setVariable>
   11f84:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11f88:	|      moveq #2,d0
}
   11f8a:	\----> addq.l #4,sp
   11f8c:	       rts

00011f8e <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11f8e:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f90:	       movea.l 12(sp),a0
   11f94:	       move.l 24(a0),d0
   11f98:	       move.l d0,-(sp)
   11f9a:	       pea 1 <_start+0x1>
   11f9e:	       move.l sp,d0
   11fa0:	       addq.l #8,d0
   11fa2:	       move.l d0,-(sp)
   11fa4:	       jsr 1460e <getValueType>
   11faa:	       lea 12(sp),sp
   11fae:	       tst.w d0
   11fb0:	   /-- bne.s 11fb6 <builtIn_setSpeechSpeed+0x28>
   11fb2:	   |   moveq #1,d0
   11fb4:	/--|-- bra.s 12004 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   11fb6:	|  \-> moveq #24,d0
   11fb8:	|      add.l 12(sp),d0
   11fbc:	|      move.l d0,-(sp)
   11fbe:	|      jsr 14f92 <trimStack>
   11fc4:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   11fc6:	|      move.l (sp),d0
   11fc8:	|      move.l d0,-(sp)
   11fca:	|      jsr 17472 <__floatsisf>
   11fd0:	|      addq.l #4,sp
   11fd2:	|      move.l #1008981770,-(sp)
   11fd8:	|      move.l d0,-(sp)
   11fda:	|      jsr 17524 <__mulsf3>
   11fe0:	|      addq.l #8,sp
   11fe2:	|      move.l d0,1a12e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   11fe8:	|      moveq #28,d0
   11fea:	|      add.l 12(sp),d0
   11fee:	|      pea 1 <_start+0x1>
   11ff2:	|      pea 1 <_start+0x1>
   11ff6:	|      move.l d0,-(sp)
   11ff8:	|      jsr 14f00 <setVariable>
   11ffe:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12002:	|      moveq #2,d0
}
   12004:	\----> addq.l #4,sp
   12006:	       rts

00012008 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12008:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1200a:	       movea.l 12(sp),a0
   1200e:	       move.l 24(a0),d0
   12012:	       move.l d0,-(sp)
   12014:	       pea 1 <_start+0x1>
   12018:	       move.l sp,d0
   1201a:	       addq.l #8,d0
   1201c:	       move.l d0,-(sp)
   1201e:	       jsr 1460e <getValueType>
   12024:	       lea 12(sp),sp
   12028:	       tst.w d0
   1202a:	   /-- bne.s 12030 <builtIn_setFontSpacing+0x28>
   1202c:	   |   moveq #1,d0
   1202e:	/--|-- bra.s 12066 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   12030:	|  \-> move.l (sp),d0
   12032:	|      move.l d0,d0
   12034:	|      move.w d0,1a6a8 <fontSpace>
	trimStack (&fun -> stack);
   1203a:	|      moveq #24,d0
   1203c:	|      add.l 12(sp),d0
   12040:	|      move.l d0,-(sp)
   12042:	|      jsr 14f92 <trimStack>
   12048:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1204a:	|      moveq #28,d0
   1204c:	|      add.l 12(sp),d0
   12050:	|      pea 1 <_start+0x1>
   12054:	|      pea 1 <_start+0x1>
   12058:	|      move.l d0,-(sp)
   1205a:	|      jsr 14f00 <setVariable>
   12060:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12064:	|      moveq #2,d0
}
   12066:	\----> addq.l #4,sp
   12068:	       rts

0001206a <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   1206a:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1206c:	          movea.l 12(sp),a0
   12070:	          move.l 24(a0),d0
   12074:	          move.l d0,-(sp)
   12076:	          pea 1 <_start+0x1>
   1207a:	          move.l sp,d0
   1207c:	          addq.l #8,d0
   1207e:	          move.l d0,-(sp)
   12080:	          jsr 1460e <getValueType>
   12086:	          lea 12(sp),sp
   1208a:	          tst.w d0
   1208c:	      /-- bne.s 12092 <builtIn_transitionLevel+0x28>
   1208e:	      |   moveq #1,d0
   12090:	/-----|-- bra.s 120e6 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   12092:	|     \-> moveq #24,d0
   12094:	|         add.l 12(sp),d0
   12098:	|         move.l d0,-(sp)
   1209a:	|         jsr 14f92 <trimStack>
   120a0:	|         addq.l #4,sp

	if (number < 0)
   120a2:	|         move.l (sp),d0
   120a4:	|     /-- bpl.s 120ae <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   120a6:	|     |   clr.b 1a11a <brightnessLevel>
   120ac:	|  /--|-- bra.s 120ca <builtIn_transitionLevel+0x60>
	else if (number > 255)
   120ae:	|  |  \-> move.l (sp),d0
   120b0:	|  |      cmpi.l #255,d0
   120b6:	|  |  /-- ble.s 120c0 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   120b8:	|  |  |   st 1a11a <brightnessLevel>
   120be:	|  +--|-- bra.s 120ca <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   120c0:	|  |  \-> move.l (sp),d0
   120c2:	|  |      move.l d0,d0
   120c4:	|  |      move.b d0,1a11a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   120ca:	|  \----> moveq #28,d0
   120cc:	|         add.l 12(sp),d0
   120d0:	|         pea 1 <_start+0x1>
   120d4:	|         pea 1 <_start+0x1>
   120d8:	|         move.l d0,-(sp)
   120da:	|         jsr 14f00 <setVariable>
   120e0:	|         lea 12(sp),sp
	return BR_CONTINUE;
   120e4:	|         moveq #2,d0
}
   120e6:	\-------> addq.l #4,sp
   120e8:	          rts

000120ea <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   120ea:	movea.l 8(sp),a0
   120ee:	move.l 24(a0),d0
   120f2:	move.l d0,-(sp)
   120f4:	jsr 14b4e <getBoolean>
   120fa:	addq.l #4,sp
   120fc:	move.w d0,1a744 <captureAllKeys>
	trimStack (&fun -> stack);
   12102:	moveq #24,d0
   12104:	add.l 8(sp),d0
   12108:	move.l d0,-(sp)
   1210a:	jsr 14f92 <trimStack>
   12110:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   12112:	move.w 1a744 <captureAllKeys>,d0
   12118:	movea.w d0,a0
   1211a:	moveq #28,d0
   1211c:	add.l 8(sp),d0
   12120:	move.l a0,-(sp)
   12122:	pea 1 <_start+0x1>
   12126:	move.l d0,-(sp)
   12128:	jsr 14f00 <setVariable>
   1212e:	lea 12(sp),sp
	return BR_CONTINUE;
   12132:	moveq #2,d0
}
   12134:	rts

00012136 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12136:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1213a:	       movea.l 20(sp),a0
   1213e:	       move.l 24(a0),d0
   12142:	       move.l d0,-(sp)
   12144:	       pea 1 <_start+0x1>
   12148:	       moveq #12,d0
   1214a:	       add.l sp,d0
   1214c:	       move.l d0,-(sp)
   1214e:	       jsr 1460e <getValueType>
   12154:	       lea 12(sp),sp
   12158:	       tst.w d0
   1215a:	   /-- bne.s 12162 <builtIn_spinCharacter+0x2c>
   1215c:	   |   moveq #1,d0
   1215e:	/--|-- bra.w 12212 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12162:	|  \-> moveq #24,d0
   12164:	|      add.l 20(sp),d0
   12168:	|      move.l d0,-(sp)
   1216a:	|      jsr 14f92 <trimStack>
   12170:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12172:	|      movea.l 20(sp),a0
   12176:	|      move.l 24(a0),d0
   1217a:	|      move.l d0,-(sp)
   1217c:	|      pea 7 <_start+0x7>
   12180:	|      lea 8(sp),a0
   12184:	|      move.l a0,-(sp)
   12186:	|      jsr 1460e <getValueType>
   1218c:	|      lea 12(sp),sp
   12190:	|      tst.w d0
   12192:	|  /-- bne.s 12198 <builtIn_spinCharacter+0x62>
   12194:	|  |   moveq #1,d0
   12196:	+--|-- bra.s 12212 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12198:	|  \-> moveq #24,d0
   1219a:	|      add.l 20(sp),d0
   1219e:	|      move.l d0,-(sp)
   121a0:	|      jsr 14f92 <trimStack>
   121a6:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   121a8:	|      move.l (sp),d0
   121aa:	|      move.l d0,-(sp)
   121ac:	|      jsr a506 <findPerson>
   121b2:	|      addq.l #4,sp
   121b4:	|      move.l d0,8(sp)
	if (thisPerson) {
   121b8:	|  /-- beq.s 121f8 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   121ba:	|  |   move.l 4(sp),d0
   121be:	|  |   movea.l 8(sp),a0
   121c2:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   121c6:	|  |   movea.l 8(sp),a0
   121ca:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   121d0:	|  |   movea.l 8(sp),a0
   121d4:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   121da:	|  |   moveq #28,d0
   121dc:	|  |   add.l 20(sp),d0
   121e0:	|  |   pea 1 <_start+0x1>
   121e4:	|  |   pea 1 <_start+0x1>
   121e8:	|  |   move.l d0,-(sp)
   121ea:	|  |   jsr 14f00 <setVariable>
   121f0:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   121f4:	|  |   moveq #3,d0
   121f6:	+--|-- bra.s 12212 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   121f8:	|  \-> moveq #28,d0
   121fa:	|      add.l 20(sp),d0
   121fe:	|      clr.l -(sp)
   12200:	|      pea 1 <_start+0x1>
   12204:	|      move.l d0,-(sp)
   12206:	|      jsr 14f00 <setVariable>
   1220c:	|      lea 12(sp),sp
		return BR_CONTINUE;
   12210:	|      moveq #2,d0
	}
}
   12212:	\----> lea 12(sp),sp
   12216:	       rts

00012218 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   12218:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1221a:	          movea.l 16(sp),a0
   1221e:	          move.l 24(a0),d0
   12222:	          move.l d0,-(sp)
   12224:	          pea 7 <_start+0x7>
   12228:	          move.l sp,d0
   1222a:	          addq.l #8,d0
   1222c:	          move.l d0,-(sp)
   1222e:	          jsr 1460e <getValueType>
   12234:	          lea 12(sp),sp
   12238:	          tst.w d0
   1223a:	      /-- bne.s 12240 <builtIn_getCharacterDirection+0x28>
   1223c:	      |   moveq #1,d0
   1223e:	/-----|-- bra.s 1229e <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12240:	|     \-> moveq #24,d0
   12242:	|         add.l 16(sp),d0
   12246:	|         move.l d0,-(sp)
   12248:	|         jsr 14f92 <trimStack>
   1224e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12250:	|         move.l (sp),d0
   12252:	|         move.l d0,-(sp)
   12254:	|         jsr a506 <findPerson>
   1225a:	|         addq.l #4,sp
   1225c:	|         move.l d0,4(sp)
	if (thisPerson) {
   12260:	|  /----- beq.s 12284 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   12262:	|  |      movea.l 4(sp),a0
   12266:	|  |      move.l 106(a0),d1
   1226a:	|  |      moveq #28,d0
   1226c:	|  |      add.l 16(sp),d0
   12270:	|  |      move.l d1,-(sp)
   12272:	|  |      pea 1 <_start+0x1>
   12276:	|  |      move.l d0,-(sp)
   12278:	|  |      jsr 14f00 <setVariable>
   1227e:	|  |      lea 12(sp),sp
   12282:	|  |  /-- bra.s 1229c <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12284:	|  \--|-> moveq #28,d0
   12286:	|     |   add.l 16(sp),d0
   1228a:	|     |   clr.l -(sp)
   1228c:	|     |   pea 1 <_start+0x1>
   12290:	|     |   move.l d0,-(sp)
   12292:	|     |   jsr 14f00 <setVariable>
   12298:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1229c:	|     \-> moveq #2,d0
}
   1229e:	\-------> addq.l #8,sp
   122a0:	          rts

000122a2 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   122a2:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   122a4:	       movea.l 16(sp),a0
   122a8:	       move.l 24(a0),d0
   122ac:	       move.l d0,-(sp)
   122ae:	       pea 7 <_start+0x7>
   122b2:	       move.l sp,d0
   122b4:	       addq.l #8,d0
   122b6:	       move.l d0,-(sp)
   122b8:	       jsr 1460e <getValueType>
   122be:	       lea 12(sp),sp
   122c2:	       tst.w d0
   122c4:	   /-- bne.s 122ca <builtIn_isCharacter+0x28>
   122c6:	   |   moveq #1,d0
   122c8:	/--|-- bra.s 1230c <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   122ca:	|  \-> moveq #24,d0
   122cc:	|      add.l 16(sp),d0
   122d0:	|      move.l d0,-(sp)
   122d2:	|      jsr 14f92 <trimStack>
   122d8:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   122da:	|      move.l (sp),d0
   122dc:	|      move.l d0,-(sp)
   122de:	|      jsr a506 <findPerson>
   122e4:	|      addq.l #4,sp
   122e6:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   122ea:	|      sne d0
   122ec:	|      neg.b d0
   122ee:	|      moveq #0,d1
   122f0:	|      move.b d0,d1
   122f2:	|      moveq #28,d0
   122f4:	|      add.l 16(sp),d0
   122f8:	|      move.l d1,-(sp)
   122fa:	|      pea 1 <_start+0x1>
   122fe:	|      move.l d0,-(sp)
   12300:	|      jsr 14f00 <setVariable>
   12306:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1230a:	|      moveq #2,d0
}
   1230c:	\----> addq.l #8,sp
   1230e:	       rts

00012310 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   12310:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12312:	          movea.l 16(sp),a0
   12316:	          move.l 24(a0),d0
   1231a:	          move.l d0,-(sp)
   1231c:	          pea 7 <_start+0x7>
   12320:	          move.l sp,d0
   12322:	          addq.l #8,d0
   12324:	          move.l d0,-(sp)
   12326:	          jsr 1460e <getValueType>
   1232c:	          lea 12(sp),sp
   12330:	          tst.w d0
   12332:	      /-- bne.s 12338 <builtIn_normalCharacter+0x28>
   12334:	      |   moveq #1,d0
   12336:	/-----|-- bra.s 123b4 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12338:	|     \-> moveq #24,d0
   1233a:	|         add.l 16(sp),d0
   1233e:	|         move.l d0,-(sp)
   12340:	|         jsr 14f92 <trimStack>
   12346:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12348:	|         move.l (sp),d0
   1234a:	|         move.l d0,-(sp)
   1234c:	|         jsr a506 <findPerson>
   12352:	|         addq.l #4,sp
   12354:	|         move.l d0,4(sp)
	if (thisPerson)
   12358:	|  /----- beq.s 1239a <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1235a:	|  |      movea.l 4(sp),a0
   1235e:	|  |      movea.l 80(a0),a0
   12362:	|  |      move.l (a0),d1
   12364:	|  |      movea.l 4(sp),a0
   12368:	|  |      move.l 106(a0),d0
   1236c:	|  |      add.l d0,d0
   1236e:	|  |      add.l d0,d0
   12370:	|  |      movea.l d1,a0
   12372:	|  |      adda.l d0,a0
   12374:	|  |      move.l (a0),d0
   12376:	|  |      movea.l 4(sp),a0
   1237a:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1237e:	|  |      moveq #28,d0
   12380:	|  |      add.l 16(sp),d0
   12384:	|  |      pea 1 <_start+0x1>
   12388:	|  |      pea 1 <_start+0x1>
   1238c:	|  |      move.l d0,-(sp)
   1238e:	|  |      jsr 14f00 <setVariable>
   12394:	|  |      lea 12(sp),sp
   12398:	|  |  /-- bra.s 123b2 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1239a:	|  \--|-> moveq #28,d0
   1239c:	|     |   add.l 16(sp),d0
   123a0:	|     |   clr.l -(sp)
   123a2:	|     |   pea 1 <_start+0x1>
   123a6:	|     |   move.l d0,-(sp)
   123a8:	|     |   jsr 14f00 <setVariable>
   123ae:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   123b2:	|     \-> moveq #2,d0
}
   123b4:	\-------> addq.l #8,sp
   123b6:	          rts

000123b8 <builtIn_isMoving>:

builtIn(isMoving)
{
   123b8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123ba:	          movea.l 16(sp),a0
   123be:	          move.l 24(a0),d0
   123c2:	          move.l d0,-(sp)
   123c4:	          pea 7 <_start+0x7>
   123c8:	          move.l sp,d0
   123ca:	          addq.l #8,d0
   123cc:	          move.l d0,-(sp)
   123ce:	          jsr 1460e <getValueType>
   123d4:	          lea 12(sp),sp
   123d8:	          tst.w d0
   123da:	      /-- bne.s 123e0 <builtIn_isMoving+0x28>
   123dc:	      |   moveq #1,d0
   123de:	/-----|-- bra.s 12440 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   123e0:	|     \-> moveq #24,d0
   123e2:	|         add.l 16(sp),d0
   123e6:	|         move.l d0,-(sp)
   123e8:	|         jsr 14f92 <trimStack>
   123ee:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   123f0:	|         move.l (sp),d0
   123f2:	|         move.l d0,-(sp)
   123f4:	|         jsr a506 <findPerson>
   123fa:	|         addq.l #4,sp
   123fc:	|         move.l d0,4(sp)
	if (thisPerson)
   12400:	|  /----- beq.s 12426 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12402:	|  |      movea.l 4(sp),a0
   12406:	|  |      move.w 64(a0),d0
   1240a:	|  |      movea.w d0,a0
   1240c:	|  |      moveq #28,d0
   1240e:	|  |      add.l 16(sp),d0
   12412:	|  |      move.l a0,-(sp)
   12414:	|  |      pea 1 <_start+0x1>
   12418:	|  |      move.l d0,-(sp)
   1241a:	|  |      jsr 14f00 <setVariable>
   12420:	|  |      lea 12(sp),sp
   12424:	|  |  /-- bra.s 1243e <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12426:	|  \--|-> moveq #28,d0
   12428:	|     |   add.l 16(sp),d0
   1242c:	|     |   clr.l -(sp)
   1242e:	|     |   pea 1 <_start+0x1>
   12432:	|     |   move.l d0,-(sp)
   12434:	|     |   jsr 14f00 <setVariable>
   1243a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1243e:	|     \-> moveq #2,d0
}
   12440:	\-------> addq.l #8,sp
   12442:	          rts

00012444 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12444:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12448:	          movea.l 20(sp),a0
   1244c:	          move.l 24(a0),d0
   12450:	          move.l d0,-(sp)
   12452:	          pea 7 <_start+0x7>
   12456:	          lea 8(sp),a0
   1245a:	          move.l a0,-(sp)
   1245c:	          jsr 1460e <getValueType>
   12462:	          lea 12(sp),sp
   12466:	          tst.w d0
   12468:	      /-- bne.s 12470 <builtIn_fetchEvent+0x2c>
   1246a:	      |   moveq #1,d0
   1246c:	/-----|-- bra.w 12504 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12470:	|     \-> moveq #24,d0
   12472:	|         add.l 20(sp),d0
   12476:	|         move.l d0,-(sp)
   12478:	|         jsr 14f92 <trimStack>
   1247e:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12480:	|         movea.l 20(sp),a0
   12484:	|         move.l 24(a0),d0
   12488:	|         move.l d0,-(sp)
   1248a:	|         pea 7 <_start+0x7>
   1248e:	|         moveq #12,d0
   12490:	|         add.l sp,d0
   12492:	|         move.l d0,-(sp)
   12494:	|         jsr 1460e <getValueType>
   1249a:	|         lea 12(sp),sp
   1249e:	|         tst.w d0
   124a0:	|     /-- bne.s 124a6 <builtIn_fetchEvent+0x62>
   124a2:	|     |   moveq #1,d0
   124a4:	+-----|-- bra.s 12504 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   124a6:	|     \-> moveq #24,d0
   124a8:	|         add.l 20(sp),d0
   124ac:	|         move.l d0,-(sp)
   124ae:	|         jsr 14f92 <trimStack>
   124b4:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   124b6:	|         move.l (sp),d1
   124b8:	|         move.l 4(sp),d0
   124bc:	|         move.l d1,-(sp)
   124be:	|         move.l d0,-(sp)
   124c0:	|         jsr d3ac <getCombinationFunction>
   124c6:	|         addq.l #8,sp
   124c8:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   124cc:	|  /----- beq.s 124ea <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   124ce:	|  |      moveq #28,d0
   124d0:	|  |      add.l 20(sp),d0
   124d4:	|  |      move.l 8(sp),-(sp)
   124d8:	|  |      pea 2 <_start+0x2>
   124dc:	|  |      move.l d0,-(sp)
   124de:	|  |      jsr 14f00 <setVariable>
   124e4:	|  |      lea 12(sp),sp
   124e8:	|  |  /-- bra.s 12502 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   124ea:	|  \--|-> moveq #28,d0
   124ec:	|     |   add.l 20(sp),d0
   124f0:	|     |   clr.l -(sp)
   124f2:	|     |   pea 1 <_start+0x1>
   124f6:	|     |   move.l d0,-(sp)
   124f8:	|     |   jsr 14f00 <setVariable>
   124fe:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12502:	|     \-> moveq #2,d0
}
   12504:	\-------> lea 12(sp),sp
   12508:	          rts

0001250a <builtIn_deleteFile>:

builtIn(deleteFile)
{
   1250a:	       lea -24(sp),sp
   1250e:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12510:	       movea.l 36(sp),a0
   12514:	       move.l 24(a0),d0
   12518:	       move.l d0,-(sp)
   1251a:	       jsr 14be4 <getTextFromAnyVar>
   12520:	       addq.l #4,sp
   12522:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12526:	       moveq #24,d0
   12528:	       add.l 36(sp),d0
   1252c:	       move.l d0,-(sp)
   1252e:	       jsr 14f92 <trimStack>
   12534:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12536:	       move.l 24(sp),-(sp)
   1253a:	       jsr 2fe <encodeFilename>
   12540:	       addq.l #4,sp
   12542:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12546:	       move.l 24(sp),16(sp)
   1254c:	       move.l 1a7a4 <SysBase>,d0
   12552:	       movea.l d0,a6
   12554:	       movea.l 16(sp),a1
   12558:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   1255c:	       move.l 20(sp),-(sp)
   12560:	       jsr e164 <failSecurityCheck>
   12566:	       addq.l #4,sp
   12568:	       tst.w d0
   1256a:	   /-- beq.s 12570 <builtIn_deleteFile+0x66>
   1256c:	   |   moveq #1,d0
   1256e:	/--|-- bra.s 125be <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12570:	|  \-> move.l 20(sp),12(sp)
   12576:	|      move.l 1a7ac <DOSBase>,d0
   1257c:	|      movea.l d0,a6
   1257e:	|      move.l 12(sp),d1
   12582:	|      jsr -72(a6)
   12586:	|      move.l d0,8(sp)
   1258a:	|      move.l 8(sp),d1
   1258e:	|      moveq #28,d0
   12590:	|      add.l 36(sp),d0
   12594:	|      move.l d1,-(sp)
   12596:	|      pea 1 <_start+0x1>
   1259a:	|      move.l d0,-(sp)
   1259c:	|      jsr 14f00 <setVariable>
   125a2:	|      lea 12(sp),sp
    FreeVec(nam);
   125a6:	|      move.l 20(sp),4(sp)
   125ac:	|      move.l 1a7a4 <SysBase>,d0
   125b2:	|      movea.l d0,a6
   125b4:	|      movea.l 4(sp),a1
   125b8:	|      jsr -690(a6)

    return BR_CONTINUE;
   125bc:	|      moveq #2,d0
}
   125be:	\----> movea.l (sp)+,a6
   125c0:	       lea 24(sp),sp
   125c4:	       rts

000125c6 <builtIn_renameFile>:

builtIn(renameFile)
{
   125c6:	       lea -40(sp),sp
   125ca:	       move.l a6,-(sp)
   125cc:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   125ce:	       movea.l 56(sp),a0
   125d2:	       move.l 24(a0),d0
   125d6:	       move.l d0,-(sp)
   125d8:	       jsr 14be4 <getTextFromAnyVar>
   125de:	       addq.l #4,sp
   125e0:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   125e4:	       move.l 44(sp),-(sp)
   125e8:	       jsr 2fe <encodeFilename>
   125ee:	       addq.l #4,sp
   125f0:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   125f4:	       moveq #24,d0
   125f6:	       add.l 56(sp),d0
   125fa:	       move.l d0,-(sp)
   125fc:	       jsr 14f92 <trimStack>
   12602:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12604:	       move.l 40(sp),-(sp)
   12608:	       jsr e164 <failSecurityCheck>
   1260e:	       addq.l #4,sp
   12610:	       tst.w d0
   12612:	   /-- beq.s 1261a <builtIn_renameFile+0x54>
   12614:	   |   moveq #1,d0
   12616:	/--|-- bra.w 12700 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1261a:	|  \-> move.l 44(sp),36(sp)
   12620:	|      move.l 1a7a4 <SysBase>,d0
   12626:	|      movea.l d0,a6
   12628:	|      movea.l 36(sp),a1
   1262c:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12630:	|      movea.l 56(sp),a0
   12634:	|      move.l 24(a0),d0
   12638:	|      move.l d0,-(sp)
   1263a:	|      jsr 14be4 <getTextFromAnyVar>
   12640:	|      addq.l #4,sp
   12642:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12646:	|      move.l 44(sp),-(sp)
   1264a:	|      jsr 2fe <encodeFilename>
   12650:	|      addq.l #4,sp
   12652:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12656:	|      moveq #24,d0
   12658:	|      add.l 56(sp),d0
   1265c:	|      move.l d0,-(sp)
   1265e:	|      jsr 14f92 <trimStack>
   12664:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12666:	|      move.l 32(sp),-(sp)
   1266a:	|      jsr e164 <failSecurityCheck>
   12670:	|      addq.l #4,sp
   12672:	|      tst.w d0
   12674:	|  /-- beq.s 1267c <builtIn_renameFile+0xb6>
   12676:	|  |   moveq #1,d0
   12678:	+--|-- bra.w 12700 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1267c:	|  \-> move.l 44(sp),28(sp)
   12682:	|      move.l 1a7a4 <SysBase>,d0
   12688:	|      movea.l d0,a6
   1268a:	|      movea.l 28(sp),a1
   1268e:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12692:	|      move.l 32(sp),24(sp)
   12698:	|      move.l 40(sp),20(sp)
   1269e:	|      move.l 1a7ac <DOSBase>,d0
   126a4:	|      movea.l d0,a6
   126a6:	|      move.l 24(sp),d1
   126aa:	|      move.l 20(sp),d2
   126ae:	|      jsr -78(a6)
   126b2:	|      move.l d0,16(sp)
   126b6:	|      move.l 16(sp),d1
   126ba:	|      moveq #28,d0
   126bc:	|      add.l 56(sp),d0
   126c0:	|      move.l d1,-(sp)
   126c2:	|      pea 1 <_start+0x1>
   126c6:	|      move.l d0,-(sp)
   126c8:	|      jsr 14f00 <setVariable>
   126ce:	|      lea 12(sp),sp
	FreeVec(nam);
   126d2:	|      move.l 32(sp),12(sp)
   126d8:	|      move.l 1a7a4 <SysBase>,d0
   126de:	|      movea.l d0,a6
   126e0:	|      movea.l 12(sp),a1
   126e4:	|      jsr -690(a6)
	FreeVec(newnam);
   126e8:	|      move.l 40(sp),8(sp)
   126ee:	|      move.l 1a7a4 <SysBase>,d0
   126f4:	|      movea.l d0,a6
   126f6:	|      movea.l 8(sp),a1
   126fa:	|      jsr -690(a6)

	return BR_CONTINUE;
   126fe:	|      moveq #2,d0
}
   12700:	\----> move.l (sp)+,d2
   12702:	       movea.l (sp)+,a6
   12704:	       lea 40(sp),sp
   12708:	       rts

0001270a <builtIn_cacheSound>:

builtIn(cacheSound)
{
   1270a:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1270c:	       movea.l 12(sp),a0
   12710:	       move.l 24(a0),d0
   12714:	       move.l d0,-(sp)
   12716:	       pea 5 <_start+0x5>
   1271a:	       move.l sp,d0
   1271c:	       addq.l #8,d0
   1271e:	       move.l d0,-(sp)
   12720:	       jsr 1460e <getValueType>
   12726:	       lea 12(sp),sp
   1272a:	       tst.w d0
   1272c:	   /-- bne.s 12732 <builtIn_cacheSound+0x28>
   1272e:	   |   moveq #1,d0
   12730:	/--|-- bra.s 1275a <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12732:	|  \-> moveq #24,d0
   12734:	|      add.l 12(sp),d0
   12738:	|      move.l d0,-(sp)
   1273a:	|      jsr 14f92 <trimStack>
   12740:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12742:	|      move.l (sp),d0
   12744:	|      move.l d0,-(sp)
   12746:	|      jsr cfac <cacheSound>
   1274c:	|      addq.l #4,sp
   1274e:	|      moveq #-1,d1
   12750:	|      cmp.l d0,d1
   12752:	|  /-- bne.s 12758 <builtIn_cacheSound+0x4e>
   12754:	|  |   moveq #1,d0
   12756:	+--|-- bra.s 1275a <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12758:	|  \-> moveq #2,d0
}
   1275a:	\----> addq.l #4,sp
   1275c:	       rts

0001275e <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   1275e:	pea 19946 <line.c.05397aaf+0xf2>
   12764:	jsr 17036 <KPrintF>
   1276a:	addq.l #4,sp
	return BR_CONTINUE;
   1276c:	moveq #2,d0
}
   1276e:	rts

00012770 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12770:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12774:	          movea.l 20(sp),a0
   12778:	          move.l 24(a0),d0
   1277c:	          move.l d0,-(sp)
   1277e:	          pea 1 <_start+0x1>
   12782:	          moveq #12,d0
   12784:	          add.l sp,d0
   12786:	          move.l d0,-(sp)
   12788:	          jsr 1460e <getValueType>
   1278e:	          lea 12(sp),sp
   12792:	          tst.w d0
   12794:	      /-- bne.s 1279c <builtIn_setCharacterSpinSpeed+0x2c>
   12796:	      |   moveq #1,d0
   12798:	/-----|-- bra.w 12836 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1279c:	|     \-> moveq #24,d0
   1279e:	|         add.l 20(sp),d0
   127a2:	|         move.l d0,-(sp)
   127a4:	|         jsr 14f92 <trimStack>
   127aa:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   127ac:	|         movea.l 20(sp),a0
   127b0:	|         move.l 24(a0),d0
   127b4:	|         move.l d0,-(sp)
   127b6:	|         pea 7 <_start+0x7>
   127ba:	|         lea 8(sp),a0
   127be:	|         move.l a0,-(sp)
   127c0:	|         jsr 1460e <getValueType>
   127c6:	|         lea 12(sp),sp
   127ca:	|         tst.w d0
   127cc:	|     /-- bne.s 127d2 <builtIn_setCharacterSpinSpeed+0x62>
   127ce:	|     |   moveq #1,d0
   127d0:	+-----|-- bra.s 12836 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   127d2:	|     \-> moveq #24,d0
   127d4:	|         add.l 20(sp),d0
   127d8:	|         move.l d0,-(sp)
   127da:	|         jsr 14f92 <trimStack>
   127e0:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   127e2:	|         move.l (sp),d0
   127e4:	|         move.l d0,-(sp)
   127e6:	|         jsr a506 <findPerson>
   127ec:	|         addq.l #4,sp
   127ee:	|         move.l d0,8(sp)

	if (thisPerson) {
   127f2:	|  /----- beq.s 1281c <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   127f4:	|  |      move.l 4(sp),d0
   127f8:	|  |      movea.l 8(sp),a0
   127fc:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12800:	|  |      moveq #28,d0
   12802:	|  |      add.l 20(sp),d0
   12806:	|  |      pea 1 <_start+0x1>
   1280a:	|  |      pea 1 <_start+0x1>
   1280e:	|  |      move.l d0,-(sp)
   12810:	|  |      jsr 14f00 <setVariable>
   12816:	|  |      lea 12(sp),sp
   1281a:	|  |  /-- bra.s 12834 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1281c:	|  \--|-> moveq #28,d0
   1281e:	|     |   add.l 20(sp),d0
   12822:	|     |   clr.l -(sp)
   12824:	|     |   pea 1 <_start+0x1>
   12828:	|     |   move.l d0,-(sp)
   1282a:	|     |   jsr 14f00 <setVariable>
   12830:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12834:	|     \-> moveq #2,d0
}
   12836:	\-------> lea 12(sp),sp
   1283a:	          rts

0001283c <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   1283c:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12840:	          movea.l 20(sp),a0
   12844:	          move.l 24(a0),d0
   12848:	          move.l d0,-(sp)
   1284a:	          pea 1 <_start+0x1>
   1284e:	          moveq #12,d0
   12850:	          add.l sp,d0
   12852:	          move.l d0,-(sp)
   12854:	          jsr 1460e <getValueType>
   1285a:	          lea 12(sp),sp
   1285e:	          tst.w d0
   12860:	      /-- bne.s 12868 <builtIn_setCharacterAngleOffset+0x2c>
   12862:	      |   moveq #1,d0
   12864:	/-----|-- bra.w 12902 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12868:	|     \-> moveq #24,d0
   1286a:	|         add.l 20(sp),d0
   1286e:	|         move.l d0,-(sp)
   12870:	|         jsr 14f92 <trimStack>
   12876:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12878:	|         movea.l 20(sp),a0
   1287c:	|         move.l 24(a0),d0
   12880:	|         move.l d0,-(sp)
   12882:	|         pea 7 <_start+0x7>
   12886:	|         lea 8(sp),a0
   1288a:	|         move.l a0,-(sp)
   1288c:	|         jsr 1460e <getValueType>
   12892:	|         lea 12(sp),sp
   12896:	|         tst.w d0
   12898:	|     /-- bne.s 1289e <builtIn_setCharacterAngleOffset+0x62>
   1289a:	|     |   moveq #1,d0
   1289c:	+-----|-- bra.s 12902 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   1289e:	|     \-> moveq #24,d0
   128a0:	|         add.l 20(sp),d0
   128a4:	|         move.l d0,-(sp)
   128a6:	|         jsr 14f92 <trimStack>
   128ac:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   128ae:	|         move.l (sp),d0
   128b0:	|         move.l d0,-(sp)
   128b2:	|         jsr a506 <findPerson>
   128b8:	|         addq.l #4,sp
   128ba:	|         move.l d0,8(sp)

	if (thisPerson) {
   128be:	|  /----- beq.s 128e8 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   128c0:	|  |      move.l 4(sp),d0
   128c4:	|  |      movea.l 8(sp),a0
   128c8:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   128cc:	|  |      moveq #28,d0
   128ce:	|  |      add.l 20(sp),d0
   128d2:	|  |      pea 1 <_start+0x1>
   128d6:	|  |      pea 1 <_start+0x1>
   128da:	|  |      move.l d0,-(sp)
   128dc:	|  |      jsr 14f00 <setVariable>
   128e2:	|  |      lea 12(sp),sp
   128e6:	|  |  /-- bra.s 12900 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   128e8:	|  \--|-> moveq #28,d0
   128ea:	|     |   add.l 20(sp),d0
   128ee:	|     |   clr.l -(sp)
   128f0:	|     |   pea 1 <_start+0x1>
   128f4:	|     |   move.l d0,-(sp)
   128f6:	|     |   jsr 14f00 <setVariable>
   128fc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12900:	|     \-> moveq #2,d0
}
   12902:	\-------> lea 12(sp),sp
   12906:	          rts

00012908 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12908:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1290a:	       movea.l 12(sp),a0
   1290e:	       move.l 24(a0),d0
   12912:	       move.l d0,-(sp)
   12914:	       pea 1 <_start+0x1>
   12918:	       move.l sp,d0
   1291a:	       addq.l #8,d0
   1291c:	       move.l d0,-(sp)
   1291e:	       jsr 1460e <getValueType>
   12924:	       lea 12(sp),sp
   12928:	       tst.w d0
   1292a:	   /-- bne.s 12930 <builtIn_transitionMode+0x28>
   1292c:	   |   moveq #1,d0
   1292e:	/--|-- bra.s 12966 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12930:	|  \-> move.l (sp),d0
   12932:	|      move.l d0,d0
   12934:	|      move.b d0,1a67e <fadeMode>
	trimStack (&fun -> stack);
   1293a:	|      moveq #24,d0
   1293c:	|      add.l 12(sp),d0
   12940:	|      move.l d0,-(sp)
   12942:	|      jsr 14f92 <trimStack>
   12948:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1294a:	|      moveq #28,d0
   1294c:	|      add.l 12(sp),d0
   12950:	|      pea 1 <_start+0x1>
   12954:	|      pea 1 <_start+0x1>
   12958:	|      move.l d0,-(sp)
   1295a:	|      jsr 14f00 <setVariable>
   12960:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12964:	|      moveq #2,d0
}
   12966:	\----> addq.l #4,sp
   12968:	       rts

0001296a <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1296a:	moveq #24,d0
   1296c:	add.l 8(sp),d0
   12970:	move.l d0,-(sp)
   12972:	jsr 14f92 <trimStack>
   12978:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   1297a:	moveq #28,d0
   1297c:	add.l 8(sp),d0
   12980:	pea 1 <_start+0x1>
   12984:	pea 1 <_start+0x1>
   12988:	move.l d0,-(sp)
   1298a:	jsr 14f00 <setVariable>
   12990:	lea 12(sp),sp
	return BR_CONTINUE;
   12994:	moveq #2,d0
}
   12996:	rts

00012998 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12998:	pea 19970 <line.c.05397aaf+0x11c>
   1299e:	jsr 17036 <KPrintF>
   129a4:	addq.l #4,sp
	return BR_CONTINUE;
   129a6:	moveq #2,d0
}
   129a8:	rts

000129aa <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   129aa:	       lea -16(sp),sp
   129ae:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   129b0:	       movea.l 28(sp),a0
   129b4:	       move.l 24(a0),d0
   129b8:	       move.l d0,-(sp)
   129ba:	       jsr 14be4 <getTextFromAnyVar>
   129c0:	       addq.l #4,sp
   129c2:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   129c6:	   /-- bne.s 129ce <builtIn_saveCustomData+0x24>
   129c8:	   |   moveq #1,d0
   129ca:	/--|-- bra.w 12a80 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   129ce:	|  \-> move.l 16(sp),-(sp)
   129d2:	|      jsr 2fe <encodeFilename>
   129d8:	|      addq.l #4,sp
   129da:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   129de:	|      move.l 16(sp),8(sp)
   129e4:	|      move.l 1a7a4 <SysBase>,d0
   129ea:	|      movea.l d0,a6
   129ec:	|      movea.l 8(sp),a1
   129f0:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   129f4:	|      move.l 12(sp),-(sp)
   129f8:	|      jsr e164 <failSecurityCheck>
   129fe:	|      addq.l #4,sp
   12a00:	|      tst.w d0
   12a02:	|  /-- beq.s 12a08 <builtIn_saveCustomData+0x5e>
   12a04:	|  |   moveq #1,d0
   12a06:	+--|-- bra.s 12a80 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12a08:	|  \-> moveq #24,d0
   12a0a:	|      add.l 28(sp),d0
   12a0e:	|      move.l d0,-(sp)
   12a10:	|      jsr 14f92 <trimStack>
   12a16:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12a18:	|      movea.l 28(sp),a0
   12a1c:	|      movea.l 24(a0),a0
   12a20:	|      move.l (a0),d0
   12a22:	|      moveq #6,d1
   12a24:	|      cmp.l d0,d1
   12a26:	|  /-- beq.s 12a3a <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12a28:	|  |   pea 1999d <line.c.05397aaf+0x149>
   12a2e:	|  |   jsr 17036 <KPrintF>
   12a34:	|  |   addq.l #4,sp
		return BR_ERROR;
   12a36:	|  |   moveq #1,d0
   12a38:	+--|-- bra.s 12a80 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12a3a:	|  \-> movea.l 28(sp),a0
   12a3e:	|      move.l 24(a0),d0
   12a42:	|      move.l d0,-(sp)
   12a44:	|      move.l 16(sp),-(sp)
   12a48:	|      jsr ddb4 <stackToFile>
   12a4e:	|      addq.l #8,sp
   12a50:	|      tst.w d0
   12a52:	|  /-- bne.s 12a58 <builtIn_saveCustomData+0xae>
   12a54:	|  |   moveq #1,d0
   12a56:	+--|-- bra.s 12a80 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12a58:	|  \-> moveq #24,d0
   12a5a:	|      add.l 28(sp),d0
   12a5e:	|      move.l d0,-(sp)
   12a60:	|      jsr 14f92 <trimStack>
   12a66:	|      addq.l #4,sp
	FreeVec(fileName);
   12a68:	|      move.l 12(sp),4(sp)
   12a6e:	|      move.l 1a7a4 <SysBase>,d0
   12a74:	|      movea.l d0,a6
   12a76:	|      movea.l 4(sp),a1
   12a7a:	|      jsr -690(a6)
	return BR_CONTINUE;
   12a7e:	|      moveq #2,d0
}
   12a80:	\----> movea.l (sp)+,a6
   12a82:	       lea 16(sp),sp
   12a86:	       rts

00012a88 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12a88:	       lea -28(sp),sp
   12a8c:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12a8e:	       movea.l 40(sp),a0
   12a92:	       move.l 24(a0),d0
   12a96:	       move.l d0,-(sp)
   12a98:	       jsr 14be4 <getTextFromAnyVar>
   12a9e:	       addq.l #4,sp
   12aa0:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12aa4:	   /-- bne.s 12aac <builtIn_loadCustomData+0x24>
   12aa6:	   |   moveq #1,d0
   12aa8:	/--|-- bra.w 12ba8 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12aac:	|  \-> move.l 28(sp),-(sp)
   12ab0:	|      jsr 2fe <encodeFilename>
   12ab6:	|      addq.l #4,sp
   12ab8:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12abc:	|      move.l 28(sp),20(sp)
   12ac2:	|      move.l 1a7a4 <SysBase>,d0
   12ac8:	|      movea.l d0,a6
   12aca:	|      movea.l 20(sp),a1
   12ace:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12ad2:	|      move.l 24(sp),-(sp)
   12ad6:	|      jsr e164 <failSecurityCheck>
   12adc:	|      addq.l #4,sp
   12ade:	|      tst.w d0
   12ae0:	|  /-- beq.s 12ae8 <builtIn_loadCustomData+0x60>
   12ae2:	|  |   moveq #1,d0
   12ae4:	+--|-- bra.w 12ba8 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12ae8:	|  \-> moveq #24,d0
   12aea:	|      add.l 40(sp),d0
   12aee:	|      move.l d0,-(sp)
   12af0:	|      jsr 14f92 <trimStack>
   12af6:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12af8:	|      moveq #28,d0
   12afa:	|      add.l 40(sp),d0
   12afe:	|      move.l d0,-(sp)
   12b00:	|      jsr 1485c <unlinkVar>
   12b06:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12b08:	|      movea.l 40(sp),a0
   12b0c:	|      moveq #6,d0
   12b0e:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12b12:	|      moveq #12,d0
   12b14:	|      move.l d0,16(sp)
   12b18:	|      clr.l 12(sp)
   12b1c:	|      move.l 1a7a4 <SysBase>,d0
   12b22:	|      movea.l d0,a6
   12b24:	|      move.l 16(sp),d0
   12b28:	|      move.l 12(sp),d1
   12b2c:	|      jsr -684(a6)
   12b30:	|      move.l d0,8(sp)
   12b34:	|      move.l 8(sp),d0
   12b38:	|      movea.l 40(sp),a0
   12b3c:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12b40:	|      movea.l 40(sp),a0
   12b44:	|      move.l 32(a0),d0
   12b48:	|  /-- bne.s 12b4e <builtIn_loadCustomData+0xc6>
   12b4a:	|  |   moveq #1,d0
   12b4c:	+--|-- bra.s 12ba8 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12b4e:	|  \-> movea.l 40(sp),a0
   12b52:	|      movea.l 32(a0),a0
   12b56:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12b58:	|      movea.l 40(sp),a0
   12b5c:	|      movea.l 32(a0),a0
   12b60:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12b64:	|      movea.l 40(sp),a0
   12b68:	|      movea.l 32(a0),a0
   12b6c:	|      moveq #1,d0
   12b6e:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12b72:	|      movea.l 40(sp),a0
   12b76:	|      move.l 32(a0),d0
   12b7a:	|      move.l d0,-(sp)
   12b7c:	|      move.l 28(sp),-(sp)
   12b80:	|      jsr d7ee <fileToStack>
   12b86:	|      addq.l #8,sp
   12b88:	|      tst.w d0
   12b8a:	|  /-- bne.s 12b90 <builtIn_loadCustomData+0x108>
   12b8c:	|  |   moveq #1,d0
   12b8e:	+--|-- bra.s 12ba8 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12b90:	|  \-> move.l 24(sp),4(sp)
   12b96:	|      move.l 1a7a4 <SysBase>,d0
   12b9c:	|      movea.l d0,a6
   12b9e:	|      movea.l 4(sp),a1
   12ba2:	|      jsr -690(a6)
	return BR_CONTINUE;
   12ba6:	|      moveq #2,d0
}
   12ba8:	\----> movea.l (sp)+,a6
   12baa:	       lea 28(sp),sp
   12bae:	       rts

00012bb0 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12bb0:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12bb2:	       movea.l 12(sp),a0
   12bb6:	       move.l 24(a0),d0
   12bba:	       move.l d0,-(sp)
   12bbc:	       pea 1 <_start+0x1>
   12bc0:	       move.l sp,d0
   12bc2:	       addq.l #8,d0
   12bc4:	       move.l d0,-(sp)
   12bc6:	       jsr 1460e <getValueType>
   12bcc:	       lea 12(sp),sp
   12bd0:	       tst.w d0
   12bd2:	   /-- bne.s 12bd8 <builtIn_setCustomEncoding+0x28>
   12bd4:	   |   moveq #1,d0
   12bd6:	/--|-- bra.s 12c0e <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12bd8:	|  \-> move.l (sp),d0
   12bda:	|      move.l d0,d0
   12bdc:	|      move.w d0,1a85c <saveEncoding>
	trimStack (&fun -> stack);
   12be2:	|      moveq #24,d0
   12be4:	|      add.l 12(sp),d0
   12be8:	|      move.l d0,-(sp)
   12bea:	|      jsr 14f92 <trimStack>
   12bf0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12bf2:	|      moveq #28,d0
   12bf4:	|      add.l 12(sp),d0
   12bf8:	|      pea 1 <_start+0x1>
   12bfc:	|      pea 1 <_start+0x1>
   12c00:	|      move.l d0,-(sp)
   12c02:	|      jsr 14f00 <setVariable>
   12c08:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12c0c:	|      moveq #2,d0
}
   12c0e:	\----> addq.l #4,sp
   12c10:	       rts

00012c12 <builtIn_freeSound>:

builtIn(freeSound)
{
   12c12:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12c14:	       movea.l 12(sp),a0
   12c18:	       move.l 24(a0),d0
   12c1c:	       move.l d0,-(sp)
   12c1e:	       pea 5 <_start+0x5>
   12c22:	       move.l sp,d0
   12c24:	       addq.l #8,d0
   12c26:	       move.l d0,-(sp)
   12c28:	       jsr 1460e <getValueType>
   12c2e:	       lea 12(sp),sp
   12c32:	       tst.w d0
   12c34:	   /-- bne.s 12c3a <builtIn_freeSound+0x28>
   12c36:	   |   moveq #1,d0
   12c38:	/--|-- bra.s 12c58 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12c3a:	|  \-> moveq #24,d0
   12c3c:	|      add.l 12(sp),d0
   12c40:	|      move.l d0,-(sp)
   12c42:	|      jsr 14f92 <trimStack>
   12c48:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12c4a:	|      move.l (sp),d0
   12c4c:	|      move.l d0,-(sp)
   12c4e:	|      jsr cfb0 <huntKillFreeSound>
   12c54:	|      addq.l #4,sp
	return BR_CONTINUE;
   12c56:	|      moveq #2,d0
}
   12c58:	\----> addq.l #4,sp
   12c5a:	       rts

00012c5c <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12c5c:	       lea -12(sp),sp
   12c60:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c62:	       movea.l 24(sp),a0
   12c66:	       move.l 24(a0),d0
   12c6a:	       move.l d0,-(sp)
   12c6c:	       pea 1 <_start+0x1>
   12c70:	       moveq #16,d0
   12c72:	       add.l sp,d0
   12c74:	       move.l d0,-(sp)
   12c76:	       jsr 1460e <getValueType>
   12c7c:	       lea 12(sp),sp
   12c80:	       tst.w d0
   12c82:	   /-- bne.s 12c8a <builtIn_parallaxAdd+0x2e>
   12c84:	   |   moveq #1,d0
   12c86:	/--|-- bra.w 12d5e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12c8a:	|  \-> moveq #24,d0
   12c8c:	|      add.l 24(sp),d0
   12c90:	|      move.l d0,-(sp)
   12c92:	|      jsr 14f92 <trimStack>
   12c98:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c9a:	|      movea.l 24(sp),a0
   12c9e:	|      move.l 24(a0),d0
   12ca2:	|      move.l d0,-(sp)
   12ca4:	|      pea 1 <_start+0x1>
   12ca8:	|      moveq #20,d0
   12caa:	|      add.l sp,d0
   12cac:	|      move.l d0,-(sp)
   12cae:	|      jsr 1460e <getValueType>
   12cb4:	|      lea 12(sp),sp
   12cb8:	|      tst.w d0
   12cba:	|  /-- bne.s 12cc2 <builtIn_parallaxAdd+0x66>
   12cbc:	|  |   moveq #1,d0
   12cbe:	+--|-- bra.w 12d5e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12cc2:	|  \-> moveq #24,d0
   12cc4:	|      add.l 24(sp),d0
   12cc8:	|      move.l d0,-(sp)
   12cca:	|      jsr 14f92 <trimStack>
   12cd0:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12cd2:	|      movea.l 24(sp),a0
   12cd6:	|      move.l 24(a0),d0
   12cda:	|      move.l d0,-(sp)
   12cdc:	|      pea 5 <_start+0x5>
   12ce0:	|      lea 12(sp),a0
   12ce4:	|      move.l a0,-(sp)
   12ce6:	|      jsr 1460e <getValueType>
   12cec:	|      lea 12(sp),sp
   12cf0:	|      tst.w d0
   12cf2:	|  /-- bne.s 12cf8 <builtIn_parallaxAdd+0x9c>
   12cf4:	|  |   moveq #1,d0
   12cf6:	+--|-- bra.s 12d5e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12cf8:	|  \-> moveq #24,d0
   12cfa:	|      add.l 24(sp),d0
   12cfe:	|      move.l d0,-(sp)
   12d00:	|      jsr 14f92 <trimStack>
   12d06:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12d08:	|      move.l 8(sp),d0
   12d0c:	|      move.l d0,d0
   12d0e:	|      moveq #0,d2
   12d10:	|      move.w d0,d2
   12d12:	|      move.l 12(sp),d0
   12d16:	|      move.l d0,d0
   12d18:	|      moveq #0,d1
   12d1a:	|      move.w d0,d1
   12d1c:	|      move.l 4(sp),d0
   12d20:	|      move.l d0,d0
   12d22:	|      move.w d0,d0
   12d24:	|      andi.l #65535,d0
   12d2a:	|      move.l d2,-(sp)
   12d2c:	|      move.l d1,-(sp)
   12d2e:	|      move.l d0,-(sp)
   12d30:	|      jsr d1cc <loadParallax>
   12d36:	|      lea 12(sp),sp
   12d3a:	|      tst.w d0
   12d3c:	|  /-- bne.s 12d42 <builtIn_parallaxAdd+0xe6>
   12d3e:	|  |   moveq #1,d0
   12d40:	+--|-- bra.s 12d5e <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12d42:	|  \-> moveq #28,d0
   12d44:	|      add.l 24(sp),d0
   12d48:	|      pea 1 <_start+0x1>
   12d4c:	|      pea 1 <_start+0x1>
   12d50:	|      move.l d0,-(sp)
   12d52:	|      jsr 14f00 <setVariable>
   12d58:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12d5c:	|      moveq #2,d0
}
   12d5e:	\----> move.l (sp)+,d2
   12d60:	       lea 12(sp),sp
   12d64:	       rts

00012d66 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12d66:	jsr d104 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12d6c:	moveq #28,d0
   12d6e:	add.l 8(sp),d0
   12d72:	pea 1 <_start+0x1>
   12d76:	pea 1 <_start+0x1>
   12d7a:	move.l d0,-(sp)
   12d7c:	jsr 14f00 <setVariable>
   12d82:	lea 12(sp),sp
	return BR_CONTINUE;
   12d86:	moveq #2,d0
}
   12d88:	rts

00012d8a <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12d8a:	pea 199bb <line.c.05397aaf+0x167>
   12d90:	jsr 17036 <KPrintF>
   12d96:	addq.l #4,sp

	return BR_CONTINUE;
   12d98:	moveq #2,d0
}
   12d9a:	rts

00012d9c <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12d9c:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12d9e:	             movea.l 16(sp),a0
   12da2:	             movea.l 24(a0),a0
   12da6:	             move.l (a0),d0
   12da8:	             moveq #1,d1
   12daa:	             cmp.l d0,d1
   12dac:	      /----- beq.s 12df4 <builtIn_makeFastArray+0x58>
   12dae:	      |      moveq #6,d1
   12db0:	      |      cmp.l d0,d1
   12db2:	/-----|----- bne.s 12e32 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12db4:	|     |      movea.l 16(sp),a0
   12db8:	|     |      movea.l 24(a0),a0
   12dbc:	|     |      move.l 4(a0),d1
   12dc0:	|     |      moveq #28,d0
   12dc2:	|     |      add.l 16(sp),d0
   12dc6:	|     |      move.l d1,-(sp)
   12dc8:	|     |      move.l d0,-(sp)
   12dca:	|     |      jsr 146c0 <makeFastArrayFromStack>
   12dd0:	|     |      addq.l #8,sp
   12dd2:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12dd6:	|     |      moveq #24,d0
   12dd8:	|     |      add.l 16(sp),d0
   12ddc:	|     |      move.l d0,-(sp)
   12dde:	|     |      jsr 14f92 <trimStack>
   12de4:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12de6:	|     |      tst.w 6(sp)
   12dea:	|     |  /-- beq.s 12df0 <builtIn_makeFastArray+0x54>
   12dec:	|     |  |   moveq #2,d0
   12dee:	|  /--|--|-- bra.s 12e44 <builtIn_makeFastArray+0xa8>
   12df0:	|  |  |  \-> moveq #1,d0
   12df2:	|  +--|----- bra.s 12e44 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12df4:	|  |  \----> movea.l 16(sp),a0
   12df8:	|  |         movea.l 24(a0),a0
   12dfc:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12e02:	|  |         moveq #24,d0
   12e04:	|  |         add.l 16(sp),d0
   12e08:	|  |         move.l d0,-(sp)
   12e0a:	|  |         jsr 14f92 <trimStack>
   12e10:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12e12:	|  |         moveq #28,d0
   12e14:	|  |         add.l 16(sp),d0
   12e18:	|  |         move.l 2(sp),-(sp)
   12e1c:	|  |         move.l d0,-(sp)
   12e1e:	|  |         jsr 1472a <makeFastArraySize>
   12e24:	|  |         addq.l #8,sp
   12e26:	|  |         tst.w d0
   12e28:	|  |     /-- beq.s 12e2e <builtIn_makeFastArray+0x92>
   12e2a:	|  |     |   moveq #2,d0
   12e2c:	|  +-----|-- bra.s 12e44 <builtIn_makeFastArray+0xa8>
   12e2e:	|  |     \-> moveq #1,d0
   12e30:	|  +-------- bra.s 12e44 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12e32:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12e34:	   |         pea 199e4 <line.c.05397aaf+0x190>
   12e3a:	   |         jsr 17036 <KPrintF>
   12e40:	   |         addq.l #4,sp
	return BR_ERROR;
   12e42:	   |         moveq #1,d0
}
   12e44:	   \-------> addq.l #8,sp
   12e46:	             rts

00012e48 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12e48:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e4a:	          movea.l 16(sp),a0
   12e4e:	          move.l 24(a0),d0
   12e52:	          move.l d0,-(sp)
   12e54:	          pea 7 <_start+0x7>
   12e58:	          move.l sp,d0
   12e5a:	          addq.l #8,d0
   12e5c:	          move.l d0,-(sp)
   12e5e:	          jsr 1460e <getValueType>
   12e64:	          lea 12(sp),sp
   12e68:	          tst.w d0
   12e6a:	      /-- bne.s 12e70 <builtIn_getCharacterScale+0x28>
   12e6c:	      |   moveq #1,d0
   12e6e:	/-----|-- bra.s 12eea <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12e70:	|     \-> moveq #24,d0
   12e72:	|         add.l 16(sp),d0
   12e76:	|         move.l d0,-(sp)
   12e78:	|         jsr 14f92 <trimStack>
   12e7e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12e80:	|         move.l (sp),d0
   12e82:	|         move.l d0,-(sp)
   12e84:	|         jsr a506 <findPerson>
   12e8a:	|         addq.l #4,sp
   12e8c:	|         move.l d0,4(sp)
	if (pers) {
   12e90:	|  /----- beq.s 12ed0 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12e92:	|  |      movea.l 4(sp),a0
   12e96:	|  |      move.l 32(a0),d0
   12e9a:	|  |      move.l #1120403456,-(sp)
   12ea0:	|  |      move.l d0,-(sp)
   12ea2:	|  |      jsr 17524 <__mulsf3>
   12ea8:	|  |      addq.l #8,sp
   12eaa:	|  |      move.l d0,-(sp)
   12eac:	|  |      jsr 1740a <__fixsfsi>
   12eb2:	|  |      addq.l #4,sp
   12eb4:	|  |      move.l d0,d1
   12eb6:	|  |      moveq #28,d0
   12eb8:	|  |      add.l 16(sp),d0
   12ebc:	|  |      move.l d1,-(sp)
   12ebe:	|  |      pea 1 <_start+0x1>
   12ec2:	|  |      move.l d0,-(sp)
   12ec4:	|  |      jsr 14f00 <setVariable>
   12eca:	|  |      lea 12(sp),sp
   12ece:	|  |  /-- bra.s 12ee8 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ed0:	|  \--|-> moveq #28,d0
   12ed2:	|     |   add.l 16(sp),d0
   12ed6:	|     |   clr.l -(sp)
   12ed8:	|     |   pea 1 <_start+0x1>
   12edc:	|     |   move.l d0,-(sp)
   12ede:	|     |   jsr 14f00 <setVariable>
   12ee4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12ee8:	|     \-> moveq #2,d0
}
   12eea:	\-------> addq.l #8,sp
   12eec:	          rts

00012eee <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12eee:	move.l 1a880 <gameSettings>,d0
   12ef4:	move.l d0,d1
   12ef6:	moveq #28,d0
   12ef8:	add.l 8(sp),d0
   12efc:	move.l d1,-(sp)
   12efe:	pea 1 <_start+0x1>
   12f02:	move.l d0,-(sp)
   12f04:	jsr 14f00 <setVariable>
   12f0a:	lea 12(sp),sp
	return BR_CONTINUE;
   12f0e:	moveq #2,d0
}
   12f10:	rts

00012f12 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12f12:	moveq #24,d0
   12f14:	add.l 8(sp),d0
   12f18:	move.l d0,-(sp)
   12f1a:	jsr 14f92 <trimStack>
   12f20:	addq.l #4,sp
	trimStack (&fun -> stack);
   12f22:	moveq #24,d0
   12f24:	add.l 8(sp),d0
   12f28:	move.l d0,-(sp)
   12f2a:	jsr 14f92 <trimStack>
   12f30:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12f32:	moveq #28,d0
   12f34:	add.l 8(sp),d0
   12f38:	clr.l -(sp)
   12f3a:	pea 1 <_start+0x1>
   12f3e:	move.l d0,-(sp)
   12f40:	jsr 14f00 <setVariable>
   12f46:	lea 12(sp),sp

	return BR_CONTINUE;
   12f4a:	moveq #2,d0

}
   12f4c:	rts

00012f4e <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12f4e:	move.l 1a124 <lastFramesPerSecond>,d1
   12f54:	moveq #28,d0
   12f56:	add.l 8(sp),d0
   12f5a:	move.l d1,-(sp)
   12f5c:	pea 1 <_start+0x1>
   12f60:	move.l d0,-(sp)
   12f62:	jsr 14f00 <setVariable>
   12f68:	lea 12(sp),sp
	return BR_CONTINUE;
   12f6c:	moveq #2,d0
}
   12f6e:	rts

00012f70 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12f70:	moveq #2,d0
}
   12f72:	rts

00012f74 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   12f74:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f78:	          movea.l 60(sp),a0
   12f7c:	          move.l 24(a0),d0
   12f80:	          move.l d0,-(sp)
   12f82:	          pea 1 <_start+0x1>
   12f86:	          pea 1a6ba <thumbHeight>
   12f8c:	          jsr 1460e <getValueType>
   12f92:	          lea 12(sp),sp
   12f96:	          tst.w d0
   12f98:	      /-- bne.s 12fa0 <builtIn_setThumbnailSize+0x2c>
   12f9a:	      |   moveq #1,d0
   12f9c:	/-----|-- bra.w 1305c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12fa0:	|     \-> moveq #24,d0
   12fa2:	|         add.l 60(sp),d0
   12fa6:	|         move.l d0,-(sp)
   12fa8:	|         jsr 14f92 <trimStack>
   12fae:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12fb0:	|         movea.l 60(sp),a0
   12fb4:	|         move.l 24(a0),d0
   12fb8:	|         move.l d0,-(sp)
   12fba:	|         pea 1 <_start+0x1>
   12fbe:	|         pea 1a6b6 <thumbWidth>
   12fc4:	|         jsr 1460e <getValueType>
   12fca:	|         lea 12(sp),sp
   12fce:	|         tst.w d0
   12fd0:	|     /-- bne.s 12fd8 <builtIn_setThumbnailSize+0x64>
   12fd2:	|     |   moveq #1,d0
   12fd4:	+-----|-- bra.w 1305c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12fd8:	|     \-> moveq #24,d0
   12fda:	|         add.l 60(sp),d0
   12fde:	|         move.l d0,-(sp)
   12fe0:	|         jsr 14f92 <trimStack>
   12fe6:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   12fe8:	|         move.l 1a6b6 <thumbWidth>,d0
   12fee:	|     /-- bmi.s 1301c <builtIn_setThumbnailSize+0xa8>
   12ff0:	|     |   move.l 1a6ba <thumbHeight>,d0
   12ff6:	|     +-- bmi.s 1301c <builtIn_setThumbnailSize+0xa8>
   12ff8:	|     |   move.l 1a6b6 <thumbWidth>,d0
   12ffe:	|     |   move.l d0,d1
   13000:	|     |   move.l 1a6f8 <winWidth>,d0
   13006:	|     |   cmp.l d1,d0
   13008:	|     +-- bcs.s 1301c <builtIn_setThumbnailSize+0xa8>
   1300a:	|     |   move.l 1a6ba <thumbHeight>,d0
   13010:	|     |   move.l d0,d1
   13012:	|     |   move.l 1a6fc <winHeight>,d0
   13018:	|     |   cmp.l d1,d0
   1301a:	|  /--|-- bcc.s 1305a <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1301c:	|  |  \-> move.l 1a6ba <thumbHeight>,d1
   13022:	|  |      move.l 1a6b6 <thumbWidth>,d0
   13028:	|  |      move.l d1,-(sp)
   1302a:	|  |      move.l d0,-(sp)
   1302c:	|  |      pea 19a0b <line.c.05397aaf+0x1b7>
   13032:	|  |      lea 14(sp),a0
   13036:	|  |      move.l a0,-(sp)
   13038:	|  |      jsr 13e18 <sprintf>
   1303e:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   13042:	|  |      lea 2(sp),a0
   13046:	|  |      move.l a0,-(sp)
   13048:	|  |      pea 19a13 <line.c.05397aaf+0x1bf>
   1304e:	|  |      jsr 17036 <KPrintF>
   13054:	|  |      addq.l #8,sp
		return BR_ERROR;
   13056:	|  |      moveq #1,d0
   13058:	+--|----- bra.s 1305c <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   1305a:	|  \----> moveq #2,d0
}
   1305c:	\-------> lea 52(sp),sp
   13060:	          rts

00013062 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   13062:	       lea -12(sp),sp
   13066:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13068:	       movea.l 24(sp),a0
   1306c:	       move.l 24(a0),d0
   13070:	       move.l d0,-(sp)
   13072:	       pea 1 <_start+0x1>
   13076:	       lea 12(sp),a0
   1307a:	       move.l a0,-(sp)
   1307c:	       jsr 1460e <getValueType>
   13082:	       lea 12(sp),sp
   13086:	       tst.w d0
   13088:	   /-- bne.s 13090 <builtIn_hasFlag+0x2e>
   1308a:	   |   moveq #1,d0
   1308c:	/--|-- bra.w 13120 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13090:	|  \-> moveq #24,d0
   13092:	|      add.l 24(sp),d0
   13096:	|      move.l d0,-(sp)
   13098:	|      jsr 14f92 <trimStack>
   1309e:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   130a0:	|      movea.l 24(sp),a0
   130a4:	|      move.l 24(a0),d0
   130a8:	|      move.l d0,-(sp)
   130aa:	|      pea 7 <_start+0x7>
   130ae:	|      moveq #16,d0
   130b0:	|      add.l sp,d0
   130b2:	|      move.l d0,-(sp)
   130b4:	|      jsr 1460e <getValueType>
   130ba:	|      lea 12(sp),sp
   130be:	|      tst.w d0
   130c0:	|  /-- bne.s 130c6 <builtIn_hasFlag+0x64>
   130c2:	|  |   moveq #1,d0
   130c4:	+--|-- bra.s 13120 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   130c6:	|  \-> moveq #24,d0
   130c8:	|      add.l 24(sp),d0
   130cc:	|      move.l d0,-(sp)
   130ce:	|      jsr 14f92 <trimStack>
   130d4:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   130d6:	|      move.l 8(sp),d0
   130da:	|      move.l d0,-(sp)
   130dc:	|      jsr d378 <findObjectType>
   130e2:	|      addq.l #4,sp
   130e4:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   130e8:	|  /-- bne.s 130ee <builtIn_hasFlag+0x8c>
   130ea:	|  |   moveq #1,d0
   130ec:	+--|-- bra.s 13120 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   130ee:	|  \-> movea.l 12(sp),a0
   130f2:	|      move.w 36(a0),d0
   130f6:	|      moveq #0,d2
   130f8:	|      move.w d0,d2
   130fa:	|      move.l 4(sp),d1
   130fe:	|      moveq #1,d0
   13100:	|      lsl.l d1,d0
   13102:	|      move.l d2,d1
   13104:	|      and.l d0,d1
   13106:	|      moveq #28,d0
   13108:	|      add.l 24(sp),d0
   1310c:	|      move.l d1,-(sp)
   1310e:	|      pea 1 <_start+0x1>
   13112:	|      move.l d0,-(sp)
   13114:	|      jsr 14f00 <setVariable>
   1311a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1311e:	|      moveq #2,d0
}
   13120:	\----> move.l (sp)+,d2
   13122:	       lea 12(sp),sp
   13126:	       rts

00013128 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13128:	       jsr d366 <snapshot>
   1312e:	       tst.w d0
   13130:	/----- beq.s 13136 <builtIn_snapshotGrab+0xe>
   13132:	|      moveq #2,d0
   13134:	|  /-- bra.s 13138 <builtIn_snapshotGrab+0x10>
   13136:	\--|-> moveq #1,d0
}
   13138:	   \-> rts

0001313a <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1313a:	jsr d212 <nosnapshot>
	return BR_CONTINUE;
   13140:	moveq #2,d0
}
   13142:	rts

00013144 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13144:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13146:	move.w 1a000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1314e:	movea.l 12(sp),a0
   13152:	move.l 24(a0),d0
   13156:	move.l d0,-(sp)
   13158:	jsr 14b4e <getBoolean>
   1315e:	addq.l #4,sp
   13160:	move.w d0,1a000 <allowAnyFilename>
	trimStack (&fun -> stack);
   13166:	moveq #24,d0
   13168:	add.l 12(sp),d0
   1316c:	move.l d0,-(sp)
   1316e:	jsr 14f92 <trimStack>
   13174:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13176:	movea.w 2(sp),a0
   1317a:	moveq #28,d0
   1317c:	add.l 12(sp),d0
   13180:	move.l a0,-(sp)
   13182:	pea 1 <_start+0x1>
   13186:	move.l d0,-(sp)
   13188:	jsr 14f00 <setVariable>
   1318e:	lea 12(sp),sp
	return BR_CONTINUE;
   13192:	moveq #2,d0
}
   13194:	addq.l #4,sp
   13196:	rts

00013198 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13198:	moveq #24,d0
   1319a:	add.l 8(sp),d0
   1319e:	move.l d0,-(sp)
   131a0:	jsr 14f92 <trimStack>
   131a6:	addq.l #4,sp
	trimStack (&fun -> stack);
   131a8:	moveq #24,d0
   131aa:	add.l 8(sp),d0
   131ae:	move.l d0,-(sp)
   131b0:	jsr 14f92 <trimStack>
   131b6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   131b8:	moveq #28,d0
   131ba:	add.l 8(sp),d0
   131be:	clr.l -(sp)
   131c0:	pea 1 <_start+0x1>
   131c4:	move.l d0,-(sp)
   131c6:	jsr 14f00 <setVariable>
   131cc:	lea 12(sp),sp

	return BR_CONTINUE;
   131d0:	moveq #2,d0
}
   131d2:	rts

000131d4 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   131d4:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   131d6:	movea.l 12(sp),a0
   131da:	move.l 24(a0),d0
   131de:	move.l d0,-(sp)
   131e0:	jsr 14be4 <getTextFromAnyVar>
   131e6:	addq.l #4,sp
   131e8:	move.l d0,(sp)
	trimStack (&fun -> stack);
   131ea:	moveq #24,d0
   131ec:	add.l 12(sp),d0
   131f0:	move.l d0,-(sp)
   131f2:	jsr 14f92 <trimStack>
   131f8:	addq.l #4,sp
	KPrintF (mess);
   131fa:	move.l (sp),-(sp)
   131fc:	jsr 17036 <KPrintF>
   13202:	addq.l #4,sp
	return BR_ERROR;
   13204:	moveq #1,d0
}
   13206:	addq.l #4,sp
   13208:	rts

0001320a <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1320a:	moveq #24,d0
   1320c:	add.l 8(sp),d0
   13210:	move.l d0,-(sp)
   13212:	jsr 14f92 <trimStack>
   13218:	addq.l #4,sp
	trimStack (&fun -> stack);
   1321a:	moveq #24,d0
   1321c:	add.l 8(sp),d0
   13220:	move.l d0,-(sp)
   13222:	jsr 14f92 <trimStack>
   13228:	addq.l #4,sp
	trimStack (&fun -> stack);
   1322a:	moveq #24,d0
   1322c:	add.l 8(sp),d0
   13230:	move.l d0,-(sp)
   13232:	jsr 14f92 <trimStack>
   13238:	addq.l #4,sp
	trimStack (&fun -> stack);
   1323a:	moveq #24,d0
   1323c:	add.l 8(sp),d0
   13240:	move.l d0,-(sp)
   13242:	jsr 14f92 <trimStack>
   13248:	addq.l #4,sp

	return BR_CONTINUE;
   1324a:	moveq #2,d0
}
   1324c:	rts

0001324e <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1324e:	moveq #24,d0
   13250:	add.l 8(sp),d0
   13254:	move.l d0,-(sp)
   13256:	jsr 14f92 <trimStack>
   1325c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1325e:	moveq #24,d0
   13260:	add.l 8(sp),d0
   13264:	move.l d0,-(sp)
   13266:	jsr 14f92 <trimStack>
   1326c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1326e:	moveq #24,d0
   13270:	add.l 8(sp),d0
   13274:	move.l d0,-(sp)
   13276:	jsr 14f92 <trimStack>
   1327c:	addq.l #4,sp

	return BR_CONTINUE;
   1327e:	moveq #2,d0

}
   13280:	rts

00013282 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13282:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13284:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1328a:	sne d0
   1328c:	neg.b d0
   1328e:	moveq #0,d1
   13290:	move.b d0,d1
   13292:	moveq #28,d0
   13294:	add.l 12(sp),d0
   13298:	move.l d1,-(sp)
   1329a:	pea 1 <_start+0x1>
   1329e:	move.l d0,-(sp)
   132a0:	jsr 14f00 <setVariable>
   132a6:	lea 12(sp),sp
	return BR_CONTINUE;
   132aa:	moveq #2,d0
}
   132ac:	addq.l #4,sp
   132ae:	rts

000132b0 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   132b0:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   132b2:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   132b8:	pea 19a2a <line.c.05397aaf+0x1d6>
   132be:	jsr 17036 <KPrintF>
   132c4:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   132c6:	tst.w 2(sp)
   132ca:	sne d0
   132cc:	neg.b d0
   132ce:	moveq #0,d1
   132d0:	move.b d0,d1
   132d2:	moveq #28,d0
   132d4:	add.l 12(sp),d0
   132d8:	move.l d1,-(sp)
   132da:	pea 1 <_start+0x1>
   132de:	move.l d0,-(sp)
   132e0:	jsr 14f00 <setVariable>
   132e6:	lea 12(sp),sp
	return BR_CONTINUE;
   132ea:	moveq #2,d0
}
   132ec:	addq.l #4,sp
   132ee:	rts

000132f0 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   132f0:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   132f4:	             move.l 104(sp),d0
   132f8:	             cmpi.l #166,d0
   132fe:	/----------- bhi.w 133e0 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   13302:	|            move.l 104(sp),d0
   13306:	|            add.l d0,d0
   13308:	|            movea.l d0,a1
   1330a:	|            adda.l d0,a1
   1330c:	|            lea 1a146 <paramNum>,a0
   13312:	|            move.l (0,a1,a0.l),d0
   13316:	|            moveq #-1,d1
   13318:	|            cmp.l d0,d1
   1331a:	|  /-------- beq.w 133a8 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   1331e:	|  |         move.l 104(sp),d0
   13322:	|  |         add.l d0,d0
   13324:	|  |         movea.l d0,a1
   13326:	|  |         adda.l d0,a1
   13328:	|  |         lea 1a146 <paramNum>,a0
   1332e:	|  |         move.l (0,a1,a0.l),d0
   13332:	|  |         cmp.l 108(sp),d0
   13336:	|  +-------- beq.s 133a8 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13338:	|  |         move.l 104(sp),d0
   1333c:	|  |         add.l d0,d0
   1333e:	|  |         movea.l d0,a1
   13340:	|  |         adda.l d0,a1
   13342:	|  |         lea 1a146 <paramNum>,a0
   13348:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1334c:	|  |         moveq #1,d1
   1334e:	|  |         cmp.l d0,d1
   13350:	|  |  /----- bne.s 1335a <callBuiltIn+0x6a>
   13352:	|  |  |      move.l #100230,d0
   13358:	|  |  |  /-- bra.s 13360 <callBuiltIn+0x70>
   1335a:	|  |  \--|-> move.l #105056,d0
   13360:	|  |     \-> move.l 104(sp),d1
   13364:	|  |         add.l d1,d1
   13366:	|  |         movea.l d1,a1
   13368:	|  |         adda.l d1,a1
   1336a:	|  |         lea 1a146 <paramNum>,a0
   13370:	|  |         move.l (0,a1,a0.l),d1
   13374:	|  |         move.l d0,-(sp)
   13376:	|  |         move.l d1,-(sp)
   13378:	|  |         pea 19a62 <line.c.05397aaf+0x20e>
   1337e:	|  |         lea 12(sp),a0
   13382:	|  |         move.l a0,-(sp)
   13384:	|  |         jsr 13e18 <sprintf>
   1338a:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1338e:	|  |         movea.l sp,a0
   13390:	|  |         move.l a0,-(sp)
   13392:	|  |         jsr b8 <copyString>
   13398:	|  |         addq.l #4,sp
   1339a:	|  |         move.l d0,-(sp)
   1339c:	|  |         jsr 17036 <KPrintF>
   133a2:	|  |         addq.l #4,sp
				return BR_ERROR;
   133a4:	|  |         moveq #1,d0
   133a6:	|  |     /-- bra.s 133f0 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   133a8:	|  \-----|-> move.l 104(sp),d0
   133ac:	|        |   add.l d0,d0
   133ae:	|        |   movea.l d0,a1
   133b0:	|        |   adda.l d0,a1
   133b2:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   133b8:	|        |   move.l (0,a1,a0.l),d0
   133bc:	+--------|-- beq.s 133e0 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   133be:	|        |   move.l 104(sp),d0
   133c2:	|        |   add.l d0,d0
   133c4:	|        |   movea.l d0,a1
   133c6:	|        |   adda.l d0,a1
   133c8:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   133ce:	|        |   movea.l (0,a1,a0.l),a0
   133d2:	|        |   move.l 112(sp),-(sp)
   133d6:	|        |   move.l 112(sp),-(sp)
   133da:	|        |   jsr (a0)
   133dc:	|        |   addq.l #8,sp
   133de:	|        +-- bra.s 133f0 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   133e0:	\--------|-> pea 19a8d <line.c.05397aaf+0x239>
   133e6:	         |   jsr 17036 <KPrintF>
   133ec:	         |   addq.l #4,sp
	return BR_ERROR;
   133ee:	         |   moveq #1,d0
}
   133f0:	         \-> lea 100(sp),sp
   133f4:	             rts

000133f6 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   133f6:	          subq.l #8,sp
	int indexNum = -1;
   133f8:	          moveq #-1,d0
   133fa:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   133fe:	          clr.l (sp)
   13400:	   /----- bra.s 13426 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13402:	/--|----> move.l 1a878 <languageTable>,d1
   13408:	|  |      move.l (sp),d0
   1340a:	|  |      add.l d0,d0
   1340c:	|  |      add.l d0,d0
   1340e:	|  |      movea.l d1,a0
   13410:	|  |      adda.l d0,a0
   13412:	|  |      move.l (a0),d0
   13414:	|  |      move.l d0,d1
   13416:	|  |      move.l 1a880 <gameSettings>,d0
   1341c:	|  |      cmp.l d1,d0
   1341e:	|  |  /-- bne.s 13424 <getLanguageForFileB+0x2e>
   13420:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13424:	|  |  \-> addq.l #1,(sp)
   13426:	|  \----> move.l 1a884 <gameSettings+0x4>,d0
   1342c:	|         cmp.l (sp),d0
   1342e:	\-------- bcc.s 13402 <getLanguageForFileB+0xc>
	}

	return indexNum;
   13430:	          move.l 4(sp),d0
}
   13434:	          addq.l #8,sp
   13436:	          rts

00013438 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13438:	          lea -20(sp),sp
   1343c:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1343e:	          move.l 28(sp),-(sp)
   13442:	          jsr 13afa <strlen>
   13448:	          addq.l #4,sp
   1344a:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1344e:	          moveq #4,d0
   13450:	          cmp.l 12(sp),d0
   13454:	      /-- bge.s 13478 <getPrefsFilename+0x40>
   13456:	      |   move.l 12(sp),d0
   1345a:	      |   subq.l #4,d0
   1345c:	      |   movea.l 28(sp),a0
   13460:	      |   adda.l d0,a0
   13462:	      |   move.b (a0),d0
   13464:	      |   cmpi.b #46,d0
   13468:	      +-- bne.s 13478 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1346a:	      |   move.l 12(sp),d0
   1346e:	      |   subq.l #4,d0
   13470:	      |   movea.l 28(sp),a0
   13474:	      |   adda.l d0,a0
   13476:	      |   clr.b (a0)
	}

	char * f = filename;
   13478:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1347e:	          clr.l 20(sp)
   13482:	   /----- bra.s 134aa <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13484:	/--|----> move.l 20(sp),d0
   13488:	|  |      movea.l 28(sp),a0
   1348c:	|  |      adda.l d0,a0
   1348e:	|  |      move.b (a0),d0
   13490:	|  |      cmpi.b #47,d0
   13494:	|  |  /-- bne.s 134a6 <getPrefsFilename+0x6e>
   13496:	|  |  |   move.l 20(sp),d0
   1349a:	|  |  |   addq.l #1,d0
   1349c:	|  |  |   move.l 28(sp),d1
   134a0:	|  |  |   add.l d0,d1
   134a2:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   134a6:	|  |  \-> addq.l #1,20(sp)
   134aa:	|  \----> move.l 20(sp),d0
   134ae:	|         cmp.l 12(sp),d0
   134b2:	\-------- blt.s 13484 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   134b4:	          pea 19ab8 <graphics.c.1c13408a+0x8>
   134ba:	          move.l 20(sp),-(sp)
   134be:	          jsr 13b3a <joinStrings>
   134c4:	          addq.l #8,sp
   134c6:	          move.l d0,8(sp)

	FreeVec(filename);
   134ca:	          move.l 28(sp),4(sp)
   134d0:	          move.l 1a7a4 <SysBase>,d0
   134d6:	          movea.l d0,a6
   134d8:	          movea.l 4(sp),a1
   134dc:	          jsr -690(a6)
	filename = NULL;
   134e0:	          clr.l 28(sp)
	return joined;
   134e4:	          move.l 8(sp),d0
}
   134e8:	          movea.l (sp)+,a6
   134ea:	          lea 20(sp),sp
   134ee:	          rts

000134f0 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   134f0:	             lea -28(sp),sp
   134f4:	             move.l a6,-(sp)
   134f6:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   134f8:	             move.l 1a884 <gameSettings+0x4>,d0
   134fe:	             move.l d0,d1
   13500:	             addq.l #1,d1
   13502:	             move.l d1,28(sp)
   13506:	             clr.l 24(sp)
   1350a:	             move.l 1a7a4 <SysBase>,d0
   13510:	             movea.l d0,a6
   13512:	             move.l 28(sp),d0
   13516:	             move.l 24(sp),d1
   1351a:	             jsr -684(a6)
   1351e:	             move.l d0,20(sp)
   13522:	             move.l 20(sp),d0
   13526:	             move.l d0,1a878 <languageTable>
    if( languageTable == 0) {
   1352c:	             move.l 1a878 <languageTable>,d0
   13532:	         /-- bne.s 13542 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13534:	         |   pea 19abd <graphics.c.1c13408a+0xd>
   1353a:	         |   jsr 17036 <KPrintF>
   13540:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13542:	         \-> move.l 1a884 <gameSettings+0x4>,d0
   13548:	             move.l d0,d1
   1354a:	             addq.l #1,d1
   1354c:	             move.l d1,16(sp)
   13550:	             clr.l 12(sp)
   13554:	             move.l 1a7a4 <SysBase>,d0
   1355a:	             movea.l d0,a6
   1355c:	             move.l 16(sp),d0
   13560:	             move.l 12(sp),d1
   13564:	             jsr -684(a6)
   13568:	             move.l d0,8(sp)
   1356c:	             move.l 8(sp),d0
   13570:	             move.l d0,1a87c <languageName>
	if( languageName == 0) {
   13576:	             move.l 1a87c <languageName>,d0
   1357c:	         /-- bne.s 1358c <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1357e:	         |   pea 19af3 <graphics.c.1c13408a+0x43>
   13584:	         |   jsr 17036 <KPrintF>
   1358a:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1358c:	         \-> clr.l 32(sp)
   13590:	   /-------- bra.s 13608 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13592:	/--|-------> tst.l 32(sp)
   13596:	|  |  /----- beq.s 135a6 <makeLanguageTable+0xb6>
   13598:	|  |  |      move.l 40(sp),-(sp)
   1359c:	|  |  |      jsr 6bc <get2bytes>
   135a2:	|  |  |      addq.l #4,sp
   135a4:	|  |  |  /-- bra.s 135a8 <makeLanguageTable+0xb8>
   135a6:	|  |  \--|-> moveq #0,d0
   135a8:	|  |     \-> movea.l 1a878 <languageTable>,a0
   135ae:	|  |         move.l 32(sp),d1
   135b2:	|  |         add.l d1,d1
   135b4:	|  |         add.l d1,d1
   135b6:	|  |         adda.l d1,a0
   135b8:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   135ba:	|  |         move.l 1a87c <languageName>,d1
   135c0:	|  |         move.l 32(sp),d0
   135c4:	|  |         add.l d0,d0
   135c6:	|  |         add.l d0,d0
   135c8:	|  |         movea.l d1,a0
   135ca:	|  |         adda.l d0,a0
   135cc:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   135ce:	|  |         move.l 1a74e <gameVersion>,d0
   135d4:	|  |         cmpi.l #511,d0
   135da:	|  |     /-- ble.s 13604 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   135dc:	|  |     |   move.l 1a884 <gameSettings+0x4>,d0
   135e2:	|  |     +-- beq.s 13604 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   135e4:	|  |     |   move.l 1a87c <languageName>,d1
   135ea:	|  |     |   move.l 32(sp),d0
   135ee:	|  |     |   add.l d0,d0
   135f0:	|  |     |   add.l d0,d0
   135f2:	|  |     |   movea.l d1,a2
   135f4:	|  |     |   adda.l d0,a2
   135f6:	|  |     |   move.l 40(sp),-(sp)
   135fa:	|  |     |   jsr b02 <readString>
   13600:	|  |     |   addq.l #4,sp
   13602:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13604:	|  |     \-> addq.l #1,32(sp)
   13608:	|  \-------> move.l 1a884 <gameSettings+0x4>,d0
   1360e:	|            cmp.l 32(sp),d0
   13612:	\----------- bcc.w 13592 <makeLanguageTable+0xa2>
		}
	}
}
   13616:	             nop
   13618:	             nop
   1361a:	             movea.l (sp)+,a2
   1361c:	             movea.l (sp)+,a6
   1361e:	             lea 28(sp),sp
   13622:	             rts

00013624 <readIniFile>:

void readIniFile (char * filename) {
   13624:	                      lea -564(sp),sp
   13628:	                      move.l a6,-(sp)
   1362a:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1362c:	                      move.l 576(sp),-(sp)
   13630:	                      jsr b8 <copyString>
   13636:	                      addq.l #4,sp
   13638:	                      move.l d0,-(sp)
   1363a:	                      jsr 13438 <getPrefsFilename>
   13640:	                      addq.l #4,sp
   13642:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13646:	                      move.l 562(sp),558(sp)
   1364c:	                      move.l #1005,554(sp)
   13654:	                      move.l 1a7ac <DOSBase>,d0
   1365a:	                      movea.l d0,a6
   1365c:	                      move.l 558(sp),d1
   13660:	                      move.l 554(sp),d2
   13664:	                      jsr -30(a6)
   13668:	                      move.l d0,550(sp)
   1366c:	                      move.l 550(sp),d0
   13670:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13674:	                      clr.l 1a880 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   1367a:	                      move.w #1,1a888 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13682:	                      clr.l 1a88a <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13688:	                      moveq #1,d0
   1368a:	                      move.l d0,1a88e <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13690:	                      clr.w 1a892 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13696:	                      clr.w 1a894 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   1369c:	                      clr.w 1a896 <gameSettings+0x16>

	FreeVec(langName);
   136a2:	                      move.l 562(sp),542(sp)
   136a8:	                      move.l 1a7a4 <SysBase>,d0
   136ae:	                      movea.l d0,a6
   136b0:	                      movea.l 542(sp),a1
   136b4:	                      jsr -690(a6)
	langName = NULL;
   136b8:	                      clr.l 562(sp)

	if (fp) {
   136bc:	                      tst.l 546(sp)
   136c0:	/-------------------- beq.w 1399e <readIniFile+0x37a>
		char lineSoFar[257] = "";
   136c4:	|                     move.l sp,d0
   136c6:	|                     addi.l #265,d0
   136cc:	|                     move.l #257,d1
   136d2:	|                     move.l d1,-(sp)
   136d4:	|                     clr.l -(sp)
   136d6:	|                     move.l d0,-(sp)
   136d8:	|                     jsr 16fba <memset>
   136de:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   136e2:	|                     move.l sp,d0
   136e4:	|                     addq.l #8,d0
   136e6:	|                     move.l #257,d1
   136ec:	|                     move.l d1,-(sp)
   136ee:	|                     clr.l -(sp)
   136f0:	|                     move.l d0,-(sp)
   136f2:	|                     jsr 16fba <memset>
   136f8:	|                     lea 12(sp),sp
		unsigned char here = 0;
   136fc:	|                     clr.b 571(sp)
		char readChar = ' ';
   13700:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13706:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   1370c:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13710:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13714:	|  /----------------> move.l 546(sp),534(sp)
   1371a:	|  |                  move.l 1a7ac <DOSBase>,d0
   13720:	|  |                  movea.l d0,a6
   13722:	|  |                  move.l 534(sp),d1
   13726:	|  |                  jsr -306(a6)
   1372a:	|  |                  move.l d0,530(sp)
   1372e:	|  |                  move.l 530(sp),d0
   13732:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13736:	|  |                  moveq #-1,d1
   13738:	|  |                  cmp.l 538(sp),d1
   1373c:	|  |           /----- bne.s 1374a <readIniFile+0x126>
				readChar = '\n';
   1373e:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13744:	|  |           |      clr.w 568(sp)
   13748:	|  |           |  /-- bra.s 13750 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1374a:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13750:	|  |              \-> move.b 570(sp),d0
   13754:	|  |                  ext.w d0
   13756:	|  |                  movea.w d0,a0
   13758:	|  |                  moveq #61,d0
   1375a:	|  |                  cmp.l a0,d0
   1375c:	|  |     /----------- beq.w 13906 <readIniFile+0x2e2>
   13760:	|  |     |            moveq #61,d1
   13762:	|  |     |            cmp.l a0,d1
   13764:	|  |  /--|----------- blt.w 13912 <readIniFile+0x2ee>
   13768:	|  |  |  |            moveq #10,d0
   1376a:	|  |  |  |            cmp.l a0,d0
   1376c:	|  |  |  |        /-- beq.s 13776 <readIniFile+0x152>
   1376e:	|  |  |  |        |   moveq #13,d1
   13770:	|  |  |  |        |   cmp.l a0,d1
   13772:	|  |  +--|--------|-- bne.w 13912 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13776:	|  |  |  |        \-> tst.w 566(sp)
   1377a:	|  |  |  |     /----- beq.w 138f4 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1377e:	|  |  |  |     |      pea 19b27 <graphics.c.1c13408a+0x77>
   13784:	|  |  |  |     |      move.l sp,d0
   13786:	|  |  |  |     |      addi.l #269,d0
   1378c:	|  |  |  |     |      move.l d0,-(sp)
   1378e:	|  |  |  |     |      jsr 13aba <strcmp>
   13794:	|  |  |  |     |      addq.l #8,sp
   13796:	|  |  |  |     |      tst.l d0
   13798:	|  |  |  |     |  /-- bne.s 137b2 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   1379a:	|  |  |  |     |  |   move.l sp,d0
   1379c:	|  |  |  |     |  |   addq.l #8,d0
   1379e:	|  |  |  |     |  |   move.l d0,-(sp)
   137a0:	|  |  |  |     |  |   jsr 139aa <stringToInt>
   137a6:	|  |  |  |     |  |   addq.l #4,sp
   137a8:	|  |  |  |     |  |   move.l d0,1a880 <gameSettings>
   137ae:	|  |  |  |     +--|-- bra.w 138f4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   137b2:	|  |  |  |     |  \-> pea 19b30 <graphics.c.1c13408a+0x80>
   137b8:	|  |  |  |     |      move.l sp,d0
   137ba:	|  |  |  |     |      addi.l #269,d0
   137c0:	|  |  |  |     |      move.l d0,-(sp)
   137c2:	|  |  |  |     |      jsr 13aba <strcmp>
   137c8:	|  |  |  |     |      addq.l #8,sp
   137ca:	|  |  |  |     |      tst.l d0
   137cc:	|  |  |  |     |  /-- bne.s 137f2 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   137ce:	|  |  |  |     |  |   move.l sp,d0
   137d0:	|  |  |  |     |  |   addq.l #8,d0
   137d2:	|  |  |  |     |  |   move.l d0,-(sp)
   137d4:	|  |  |  |     |  |   jsr 139aa <stringToInt>
   137da:	|  |  |  |     |  |   addq.l #4,sp
   137dc:	|  |  |  |     |  |   tst.l d0
   137de:	|  |  |  |     |  |   seq d0
   137e0:	|  |  |  |     |  |   neg.b d0
   137e2:	|  |  |  |     |  |   move.b d0,d0
   137e4:	|  |  |  |     |  |   andi.w #255,d0
   137e8:	|  |  |  |     |  |   move.w d0,1a888 <gameSettings+0x8>
   137ee:	|  |  |  |     +--|-- bra.w 138f4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   137f2:	|  |  |  |     |  \-> pea 19b37 <graphics.c.1c13408a+0x87>
   137f8:	|  |  |  |     |      move.l sp,d0
   137fa:	|  |  |  |     |      addi.l #269,d0
   13800:	|  |  |  |     |      move.l d0,-(sp)
   13802:	|  |  |  |     |      jsr 13aba <strcmp>
   13808:	|  |  |  |     |      addq.l #8,sp
   1380a:	|  |  |  |     |      tst.l d0
   1380c:	|  |  |  |     |  /-- bne.s 13826 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   1380e:	|  |  |  |     |  |   move.l sp,d0
   13810:	|  |  |  |     |  |   addq.l #8,d0
   13812:	|  |  |  |     |  |   move.l d0,-(sp)
   13814:	|  |  |  |     |  |   jsr 139aa <stringToInt>
   1381a:	|  |  |  |     |  |   addq.l #4,sp
   1381c:	|  |  |  |     |  |   move.l d0,1a88a <gameSettings+0xa>
   13822:	|  |  |  |     +--|-- bra.w 138f4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13826:	|  |  |  |     |  \-> pea 19b3f <graphics.c.1c13408a+0x8f>
   1382c:	|  |  |  |     |      move.l sp,d0
   1382e:	|  |  |  |     |      addi.l #269,d0
   13834:	|  |  |  |     |      move.l d0,-(sp)
   13836:	|  |  |  |     |      jsr 13aba <strcmp>
   1383c:	|  |  |  |     |      addq.l #8,sp
   1383e:	|  |  |  |     |      tst.l d0
   13840:	|  |  |  |     |  /-- bne.s 1385a <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13842:	|  |  |  |     |  |   move.l sp,d0
   13844:	|  |  |  |     |  |   addq.l #8,d0
   13846:	|  |  |  |     |  |   move.l d0,-(sp)
   13848:	|  |  |  |     |  |   jsr 139aa <stringToInt>
   1384e:	|  |  |  |     |  |   addq.l #4,sp
   13850:	|  |  |  |     |  |   move.l d0,1a88e <gameSettings+0xe>
   13856:	|  |  |  |     +--|-- bra.w 138f4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   1385a:	|  |  |  |     |  \-> pea 19b49 <graphics.c.1c13408a+0x99>
   13860:	|  |  |  |     |      move.l sp,d0
   13862:	|  |  |  |     |      addi.l #269,d0
   13868:	|  |  |  |     |      move.l d0,-(sp)
   1386a:	|  |  |  |     |      jsr 13aba <strcmp>
   13870:	|  |  |  |     |      addq.l #8,sp
   13872:	|  |  |  |     |      tst.l d0
   13874:	|  |  |  |     |  /-- bne.s 1388e <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13876:	|  |  |  |     |  |   move.l sp,d0
   13878:	|  |  |  |     |  |   addq.l #8,d0
   1387a:	|  |  |  |     |  |   move.l d0,-(sp)
   1387c:	|  |  |  |     |  |   jsr 139aa <stringToInt>
   13882:	|  |  |  |     |  |   addq.l #4,sp
   13884:	|  |  |  |     |  |   move.l d0,d0
   13886:	|  |  |  |     |  |   move.w d0,1a892 <gameSettings+0x12>
   1388c:	|  |  |  |     +--|-- bra.s 138f4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   1388e:	|  |  |  |     |  \-> pea 19b55 <graphics.c.1c13408a+0xa5>
   13894:	|  |  |  |     |      move.l sp,d0
   13896:	|  |  |  |     |      addi.l #269,d0
   1389c:	|  |  |  |     |      move.l d0,-(sp)
   1389e:	|  |  |  |     |      jsr 13aba <strcmp>
   138a4:	|  |  |  |     |      addq.l #8,sp
   138a6:	|  |  |  |     |      tst.l d0
   138a8:	|  |  |  |     |  /-- bne.s 138c2 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   138aa:	|  |  |  |     |  |   move.l sp,d0
   138ac:	|  |  |  |     |  |   addq.l #8,d0
   138ae:	|  |  |  |     |  |   move.l d0,-(sp)
   138b0:	|  |  |  |     |  |   jsr 139aa <stringToInt>
   138b6:	|  |  |  |     |  |   addq.l #4,sp
   138b8:	|  |  |  |     |  |   move.l d0,d0
   138ba:	|  |  |  |     |  |   move.w d0,1a894 <gameSettings+0x14>
   138c0:	|  |  |  |     +--|-- bra.s 138f4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   138c2:	|  |  |  |     |  \-> pea 19b63 <graphics.c.1c13408a+0xb3>
   138c8:	|  |  |  |     |      move.l sp,d0
   138ca:	|  |  |  |     |      addi.l #269,d0
   138d0:	|  |  |  |     |      move.l d0,-(sp)
   138d2:	|  |  |  |     |      jsr 13aba <strcmp>
   138d8:	|  |  |  |     |      addq.l #8,sp
   138da:	|  |  |  |     |      tst.l d0
   138dc:	|  |  |  |     +----- bne.s 138f4 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   138de:	|  |  |  |     |      move.l sp,d0
   138e0:	|  |  |  |     |      addq.l #8,d0
   138e2:	|  |  |  |     |      move.l d0,-(sp)
   138e4:	|  |  |  |     |      jsr 139aa <stringToInt>
   138ea:	|  |  |  |     |      addq.l #4,sp
   138ec:	|  |  |  |     |      move.l d0,d0
   138ee:	|  |  |  |     |      move.w d0,1a896 <gameSettings+0x16>
					}
				}
				here = 0;
   138f4:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   138f8:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   138fc:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13900:	|  |  |  |            clr.b 8(sp)
				break;
   13904:	|  |  |  |  /-------- bra.s 1397c <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13906:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   1390c:	|  |  |     |         clr.b 571(sp)
				break;
   13910:	|  |  |     +-------- bra.s 1397c <readIniFile+0x358>

				default:
				if (doingSecond) {
   13912:	|  |  \-----|-------> tst.w 566(sp)
   13916:	|  |        |  /----- beq.s 1394a <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13918:	|  |        |  |      move.b 571(sp),d0
   1391c:	|  |        |  |      move.b d0,d1
   1391e:	|  |        |  |      addq.b #1,d1
   13920:	|  |        |  |      move.b d1,571(sp)
   13924:	|  |        |  |      move.b d0,d0
   13926:	|  |        |  |      andi.l #255,d0
   1392c:	|  |        |  |      lea 572(sp),a0
   13930:	|  |        |  |      adda.l d0,a0
   13932:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13938:	|  |        |  |      moveq #0,d0
   1393a:	|  |        |  |      move.b 571(sp),d0
   1393e:	|  |        |  |      lea 572(sp),a0
   13942:	|  |        |  |      adda.l d0,a0
   13944:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13948:	|  |        |  |  /-- bra.s 1397a <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   1394a:	|  |        |  \--|-> move.b 571(sp),d0
   1394e:	|  |        |     |   move.b d0,d1
   13950:	|  |        |     |   addq.b #1,d1
   13952:	|  |        |     |   move.b d1,571(sp)
   13956:	|  |        |     |   move.b d0,d0
   13958:	|  |        |     |   andi.l #255,d0
   1395e:	|  |        |     |   lea 572(sp),a0
   13962:	|  |        |     |   adda.l d0,a0
   13964:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   1396a:	|  |        |     |   moveq #0,d0
   1396c:	|  |        |     |   move.b 571(sp),d0
   13970:	|  |        |     |   lea 572(sp),a0
   13974:	|  |        |     |   adda.l d0,a0
   13976:	|  |        |     |   clr.b -307(a0)
				break;
   1397a:	|  |        |     \-> nop
			}
		} while (keepGoing);
   1397c:	|  |        \-------> tst.w 568(sp)
   13980:	|  \----------------- bne.w 13714 <readIniFile+0xf0>

		Close(fp);
   13984:	|                     move.l 546(sp),526(sp)
   1398a:	|                     move.l 1a7ac <DOSBase>,d0
   13990:	|                     movea.l d0,a6
   13992:	|                     move.l 526(sp),d1
   13996:	|                     jsr -36(a6)
   1399a:	|                     move.l d0,522(sp)
	}
}
   1399e:	\-------------------> nop
   139a0:	                      move.l (sp)+,d2
   139a2:	                      movea.l (sp)+,a6
   139a4:	                      lea 564(sp),sp
   139a8:	                      rts

000139aa <stringToInt>:

unsigned int stringToInt (char * s) {
   139aa:	             subq.l #8,sp
	int i = 0;
   139ac:	             clr.l 4(sp)
	BOOL negative = FALSE;
   139b0:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   139b4:	/----------> movea.l 12(sp),a0
   139b8:	|            move.b (a0),d0
   139ba:	|            cmpi.b #47,d0
   139be:	|        /-- ble.s 139f6 <stringToInt+0x4c>
   139c0:	|        |   movea.l 12(sp),a0
   139c4:	|        |   move.b (a0),d0
   139c6:	|        |   cmpi.b #57,d0
   139ca:	|        +-- bgt.s 139f6 <stringToInt+0x4c>
			i *= 10;
   139cc:	|        |   move.l 4(sp),d1
   139d0:	|        |   move.l d1,d0
   139d2:	|        |   add.l d0,d0
   139d4:	|        |   add.l d0,d0
   139d6:	|        |   add.l d1,d0
   139d8:	|        |   add.l d0,d0
   139da:	|        |   move.l d0,4(sp)
			i += *s - '0';
   139de:	|        |   movea.l 12(sp),a0
   139e2:	|        |   move.b (a0),d0
   139e4:	|        |   ext.w d0
   139e6:	|        |   movea.w d0,a0
   139e8:	|        |   moveq #-48,d0
   139ea:	|        |   add.l a0,d0
   139ec:	|        |   add.l d0,4(sp)
			s ++;
   139f0:	|        |   addq.l #1,12(sp)
   139f4:	|  /-----|-- bra.s 13a2e <stringToInt+0x84>
		} else if (*s == '-') {
   139f6:	|  |     \-> movea.l 12(sp),a0
   139fa:	|  |         move.b (a0),d0
   139fc:	|  |         cmpi.b #45,d0
   13a00:	|  |     /-- bne.s 13a1a <stringToInt+0x70>
			negative = ! negative;
   13a02:	|  |     |   tst.w 2(sp)
   13a06:	|  |     |   seq d0
   13a08:	|  |     |   neg.b d0
   13a0a:	|  |     |   move.b d0,d0
   13a0c:	|  |     |   andi.w #255,d0
   13a10:	|  |     |   move.w d0,2(sp)
			s++;
   13a14:	|  |     |   addq.l #1,12(sp)
   13a18:	+--|-----|-- bra.s 139b4 <stringToInt+0xa>
		} else {
			if (negative)
   13a1a:	|  |     \-> tst.w 2(sp)
   13a1e:	|  |     /-- beq.s 13a28 <stringToInt+0x7e>
				return -i;
   13a20:	|  |     |   move.l 4(sp),d0
   13a24:	|  |     |   neg.l d0
   13a26:	|  |  /--|-- bra.s 13a30 <stringToInt+0x86>
			return i;
   13a28:	|  |  |  \-> move.l 4(sp),d0
   13a2c:	|  |  +----- bra.s 13a30 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13a2e:	\--\--|----X bra.s 139b4 <stringToInt+0xa>
		}
	}
   13a30:	      \----> addq.l #8,sp
   13a32:	             rts

00013a34 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13a34:	    lea -28(sp),sp
   13a38:	    move.l a6,-(sp)
   13a3a:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13a3c:	    pea 19b6d <graphics.c.1c13408a+0xbd>
   13a42:	    jsr 17036 <KPrintF>
   13a48:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13a4a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13a4e:	    move.l 40(sp),30(sp)
   13a54:	    move.l #1005,26(sp)
   13a5c:	    move.l 1a7ac <DOSBase>,d0
   13a62:	    movea.l d0,a6
   13a64:	    move.l 30(sp),d1
   13a68:	    move.l 26(sp),d2
   13a6c:	    jsr -30(a6)
   13a70:	    move.l d0,22(sp)
   13a74:	    move.l 22(sp),d0
   13a78:	    move.l d0,18(sp)
	if (tester) {
   13a7c:	/-- beq.s 13aac <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13a7e:	|   pea 19b87 <graphics.c.1c13408a+0xd7>
   13a84:	|   jsr 17036 <KPrintF>
   13a8a:	|   addq.l #4,sp
		retval = 1;
   13a8c:	|   move.b #1,35(sp)
		Close(tester);
   13a92:	|   move.l 18(sp),14(sp)
   13a98:	|   move.l 1a7ac <DOSBase>,d0
   13a9e:	|   movea.l d0,a6
   13aa0:	|   move.l 14(sp),d1
   13aa4:	|   jsr -36(a6)
   13aa8:	|   move.l d0,10(sp)
	}
	return retval;
   13aac:	\-> move.b 35(sp),d0
   13ab0:	    move.l (sp)+,d2
   13ab2:	    movea.l (sp)+,a6
   13ab4:	    lea 28(sp),sp
   13ab8:	    rts

00013aba <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13aba:	   /-- bra.s 13ac4 <strcmp+0xa>
    {
        s1++;
   13abc:	/--|-> addq.l #1,4(sp)
        s2++;
   13ac0:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13ac4:	|  \-> movea.l 4(sp),a0
   13ac8:	|      move.b (a0),d0
   13aca:	|  /-- beq.s 13adc <strcmp+0x22>
   13acc:	|  |   movea.l 4(sp),a0
   13ad0:	|  |   move.b (a0),d1
   13ad2:	|  |   movea.l 8(sp),a0
   13ad6:	|  |   move.b (a0),d0
   13ad8:	|  |   cmp.b d1,d0
   13ada:	\--|-- beq.s 13abc <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13adc:	   \-> movea.l 4(sp),a0
   13ae0:	       move.b (a0),d0
   13ae2:	       moveq #0,d1
   13ae4:	       move.b d0,d1
   13ae6:	       movea.l 8(sp),a0
   13aea:	       move.b (a0),d0
   13aec:	       move.b d0,d0
   13aee:	       andi.l #255,d0
   13af4:	       sub.l d0,d1
   13af6:	       move.l d1,d0
}
   13af8:	       rts

00013afa <strlen>:

long unsigned int strlen (const char *s) 
{  
   13afa:	       subq.l #4,sp
	long unsigned int i = 0;
   13afc:	       clr.l (sp)
	while(s[i]) i++; 
   13afe:	   /-- bra.s 13b02 <strlen+0x8>
   13b00:	/--|-> addq.l #1,(sp)
   13b02:	|  \-> movea.l 8(sp),a0
   13b06:	|      adda.l (sp),a0
   13b08:	|      move.b (a0),d0
   13b0a:	\----- bne.s 13b00 <strlen+0x6>
	return(i);
   13b0c:	       move.l (sp),d0
}
   13b0e:	       addq.l #4,sp
   13b10:	       rts

00013b12 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13b12:	    nop
   13b14:	/-> move.l 8(sp),d0
   13b18:	|   move.l d0,d1
   13b1a:	|   addq.l #1,d1
   13b1c:	|   move.l d1,8(sp)
   13b20:	|   movea.l 4(sp),a0
   13b24:	|   lea 1(a0),a1
   13b28:	|   move.l a1,4(sp)
   13b2c:	|   movea.l d0,a1
   13b2e:	|   move.b (a1),d0
   13b30:	|   move.b d0,(a0)
   13b32:	|   move.b (a0),d0
   13b34:	\-- bne.s 13b14 <strcpy+0x2>
}
   13b36:	    nop
   13b38:	    rts

00013b3a <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13b3a:	    lea -20(sp),sp
   13b3e:	    move.l a6,-(sp)
   13b40:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13b42:	    move.l 32(sp),-(sp)
   13b46:	    jsr 13afa <strlen>
   13b4c:	    addq.l #4,sp
   13b4e:	    move.l d0,d2
   13b50:	    move.l 36(sp),-(sp)
   13b54:	    jsr 13afa <strlen>
   13b5a:	    addq.l #4,sp
   13b5c:	    add.l d2,d0
   13b5e:	    move.l d0,d1
   13b60:	    addq.l #1,d1
   13b62:	    move.l d1,20(sp)
   13b66:	    clr.l 16(sp)
   13b6a:	    move.l 1a7a4 <SysBase>,d0
   13b70:	    movea.l d0,a6
   13b72:	    move.l 20(sp),d0
   13b76:	    move.l 16(sp),d1
   13b7a:	    jsr -684(a6)
   13b7e:	    move.l d0,12(sp)
   13b82:	    move.l 12(sp),d0
   13b86:	    move.l d0,8(sp)
	char * t = newString;
   13b8a:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13b90:	    nop
   13b92:	/-> move.l 32(sp),d0
   13b96:	|   move.l d0,d1
   13b98:	|   addq.l #1,d1
   13b9a:	|   move.l d1,32(sp)
   13b9e:	|   movea.l 24(sp),a0
   13ba2:	|   lea 1(a0),a1
   13ba6:	|   move.l a1,24(sp)
   13baa:	|   movea.l d0,a1
   13bac:	|   move.b (a1),d0
   13bae:	|   move.b d0,(a0)
   13bb0:	|   move.b (a0),d0
   13bb2:	\-- bne.s 13b92 <joinStrings+0x58>
	t--;
   13bb4:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13bb8:	    nop
   13bba:	/-> move.l 36(sp),d0
   13bbe:	|   move.l d0,d1
   13bc0:	|   addq.l #1,d1
   13bc2:	|   move.l d1,36(sp)
   13bc6:	|   movea.l 24(sp),a0
   13bca:	|   lea 1(a0),a1
   13bce:	|   move.l a1,24(sp)
   13bd2:	|   movea.l d0,a1
   13bd4:	|   move.b (a1),d0
   13bd6:	|   move.b d0,(a0)
   13bd8:	|   move.b (a0),d0
   13bda:	\-- bne.s 13bba <joinStrings+0x80>

	return newString;
   13bdc:	    move.l 8(sp),d0
}
   13be0:	    move.l (sp)+,d2
   13be2:	    movea.l (sp)+,a6
   13be4:	    lea 20(sp),sp
   13be8:	    rts

00013bea <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13bea:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13bee:	       moveq #10,d0
   13bf0:	       cmp.l 28(sp),d0
   13bf4:	   /-- bne.s 13c12 <itoa+0x28>
   13bf6:	   |   tst.l 20(sp)
   13bfa:	   +-- bge.s 13c12 <itoa+0x28>
        *str++ = '-';
   13bfc:	   |   move.l 24(sp),d0
   13c00:	   |   move.l d0,d1
   13c02:	   |   addq.l #1,d1
   13c04:	   |   move.l d1,24(sp)
   13c08:	   |   movea.l d0,a0
   13c0a:	   |   move.b #45,(a0)
        value *= -1;
   13c0e:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13c12:	   \-> move.l 24(sp),12(sp)
   13c18:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13c1e:	   /-> move.l 20(sp),d0
   13c22:	   |   move.l 28(sp),-(sp)
   13c26:	   |   move.l d0,-(sp)
   13c28:	   |   jsr 17aa0 <__modsi3>
   13c2e:	   |   addq.l #8,sp
   13c30:	   |   movea.l d0,a1
   13c32:	   |   move.l 12(sp),d0
   13c36:	   |   move.l d0,d1
   13c38:	   |   addq.l #1,d1
   13c3a:	   |   move.l d1,12(sp)
   13c3e:	   |   lea 19b9f <graphics.c.1c13408a+0xef>,a0
   13c44:	   |   move.b (0,a1,a0.l),d1
   13c48:	   |   movea.l d0,a0
   13c4a:	   |   move.b d1,(a0)
        value /= base;
   13c4c:	   |   move.l 28(sp),-(sp)
   13c50:	   |   move.l 24(sp),-(sp)
   13c54:	   |   jsr 17a72 <__divsi3>
   13c5a:	   |   addq.l #8,sp
   13c5c:	   |   move.l d0,20(sp)
    } while (value);
   13c60:	   \-- bne.s 13c1e <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13c62:	       move.l 12(sp),d0
   13c66:	       move.l d0,d1
   13c68:	       subq.l #1,d1
   13c6a:	       move.l d1,12(sp)
   13c6e:	       movea.l d0,a0
   13c70:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13c72:	       move.l 4(sp),8(sp)
   13c78:	   /-- bra.s 13c9e <itoa+0xb4>
        char temp = *low;
   13c7a:	/--|-> movea.l 8(sp),a0
   13c7e:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13c82:	|  |   movea.l 12(sp),a0
   13c86:	|  |   move.b (a0),d0
   13c88:	|  |   movea.l 8(sp),a0
   13c8c:	|  |   move.b d0,(a0)
        *ptr = temp;
   13c8e:	|  |   movea.l 12(sp),a0
   13c92:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13c96:	|  |   addq.l #1,8(sp)
   13c9a:	|  |   subq.l #1,12(sp)
   13c9e:	|  \-> move.l 8(sp),d0
   13ca2:	|      cmp.l 12(sp),d0
   13ca6:	\----- bcs.s 13c7a <itoa+0x90>
    }
    return rc;
   13ca8:	       move.l 4(sp),d0
}
   13cac:	       lea 16(sp),sp
   13cb0:	       rts

00013cb2 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13cb2:	                            lea -40(sp),sp
   13cb6:	                            move.l d2,-(sp)
    char* s = str;
   13cb8:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13cbe:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13cc4:	   /----------------------- bra.w 13df8 <vsprintf2+0x146>
        if (*p == '%') {
   13cc8:	/--|----------------------> movea.l 36(sp),a0
   13ccc:	|  |                        move.b (a0),d0
   13cce:	|  |                        cmpi.b #37,d0
   13cd2:	|  |  /-------------------- bne.w 13dde <vsprintf2+0x12c>
            switch (*++p) {
   13cd6:	|  |  |                     addq.l #1,36(sp)
   13cda:	|  |  |                     movea.l 36(sp),a0
   13cde:	|  |  |                     move.b (a0),d0
   13ce0:	|  |  |                     ext.w d0
   13ce2:	|  |  |                     movea.w d0,a0
   13ce4:	|  |  |                     moveq #115,d0
   13ce6:	|  |  |                     cmp.l a0,d0
   13ce8:	|  |  |           /-------- beq.s 13d60 <vsprintf2+0xae>
   13cea:	|  |  |           |         moveq #115,d1
   13cec:	|  |  |           |         cmp.l a0,d1
   13cee:	|  |  |  /--------|-------- blt.w 13dc6 <vsprintf2+0x114>
   13cf2:	|  |  |  |        |         moveq #99,d2
   13cf4:	|  |  |  |        |         cmp.l a0,d2
   13cf6:	|  |  |  |  /-----|-------- beq.w 13d9e <vsprintf2+0xec>
   13cfa:	|  |  |  |  |     |         moveq #100,d0
   13cfc:	|  |  |  |  |     |         cmp.l a0,d0
   13cfe:	|  |  |  +--|-----|-------- bne.w 13dc6 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13d02:	|  |  |  |  |     |         addq.l #4,56(sp)
   13d06:	|  |  |  |  |     |         movea.l 56(sp),a0
   13d0a:	|  |  |  |  |     |         move.l (a0),d0
   13d0c:	|  |  |  |  |     |         move.l d0,d1
   13d0e:	|  |  |  |  |     |         subq.l #1,d1
   13d10:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13d14:	|  |  |  |  |     |         pea a <_start+0xa>
   13d18:	|  |  |  |  |     |         lea 8(sp),a0
   13d1c:	|  |  |  |  |     |         move.l a0,-(sp)
   13d1e:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13d22:	|  |  |  |  |     |         jsr 13bea <itoa>
   13d28:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13d2c:	|  |  |  |  |     |         lea 44(sp),a0
   13d30:	|  |  |  |  |     |         lea -40(a0),a0
   13d34:	|  |  |  |  |     |         move.l a0,28(sp)
   13d38:	|  |  |  |  |     |     /-- bra.s 13d54 <vsprintf2+0xa2>
                        *s++ = *b;
   13d3a:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13d3e:	|  |  |  |  |     |  |  |   move.l d0,d1
   13d40:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13d42:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13d46:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13d4a:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13d4c:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13d4e:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13d50:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13d54:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   13d58:	|  |  |  |  |     |  |      move.b (a0),d0
   13d5a:	|  |  |  |  |     |  \----- bne.s 13d3a <vsprintf2+0x88>
                    }
                    break;
   13d5c:	|  |  |  |  |  /--|-------- bra.w 13df4 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13d60:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   13d64:	|  |  |  |  |  |            movea.l 56(sp),a0
   13d68:	|  |  |  |  |  |            move.l (a0),d0
   13d6a:	|  |  |  |  |  |            move.l d0,d1
   13d6c:	|  |  |  |  |  |            subq.l #1,d1
   13d6e:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13d72:	|  |  |  |  |  |        /-- bra.s 13d94 <vsprintf2+0xe2>
                        *s++ = *sval++;
   13d74:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13d78:	|  |  |  |  |  |     |  |   move.l d1,d2
   13d7a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13d7c:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13d80:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13d84:	|  |  |  |  |  |     |  |   move.l d0,d2
   13d86:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13d88:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13d8c:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13d8e:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13d90:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13d92:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13d94:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   13d98:	|  |  |  |  |  |     |      move.b (a0),d0
   13d9a:	|  |  |  |  |  |     \----- bne.s 13d74 <vsprintf2+0xc2>
                    }
                    break;
   13d9c:	|  |  |  |  |  +----------- bra.s 13df4 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13d9e:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   13da2:	|  |  |  |     |            movea.l 56(sp),a0
   13da6:	|  |  |  |     |            move.l (a0),d0
   13da8:	|  |  |  |     |            move.l d0,d1
   13daa:	|  |  |  |     |            subq.l #1,d1
   13dac:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13db0:	|  |  |  |     |            move.l 40(sp),d0
   13db4:	|  |  |  |     |            move.l d0,d2
   13db6:	|  |  |  |     |            addq.l #1,d2
   13db8:	|  |  |  |     |            move.l d2,40(sp)
   13dbc:	|  |  |  |     |            move.l 24(sp),d1
   13dc0:	|  |  |  |     |            movea.l d0,a0
   13dc2:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13dc4:	|  |  |  |     +----------- bra.s 13df4 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13dc6:	|  |  |  \-----|----------> move.l 40(sp),d0
   13dca:	|  |  |        |            move.l d0,d1
   13dcc:	|  |  |        |            addq.l #1,d1
   13dce:	|  |  |        |            move.l d1,40(sp)
   13dd2:	|  |  |        |            movea.l 36(sp),a0
   13dd6:	|  |  |        |            move.b (a0),d1
   13dd8:	|  |  |        |            movea.l d0,a0
   13dda:	|  |  |        |            move.b d1,(a0)
                    break;
   13ddc:	|  |  |        +----------- bra.s 13df4 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13dde:	|  |  \--------|----------> move.l 40(sp),d0
   13de2:	|  |           |            move.l d0,d1
   13de4:	|  |           |            addq.l #1,d1
   13de6:	|  |           |            move.l d1,40(sp)
   13dea:	|  |           |            movea.l 36(sp),a0
   13dee:	|  |           |            move.b (a0),d1
   13df0:	|  |           |            movea.l d0,a0
   13df2:	|  |           |            move.b d1,(a0)
        }
        p++;
   13df4:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13df8:	|  \----------------------> movea.l 36(sp),a0
   13dfc:	|                           move.b (a0),d0
   13dfe:	\-------------------------- bne.w 13cc8 <vsprintf2+0x16>
    }
    *s = '\0';
   13e02:	                            movea.l 40(sp),a0
   13e06:	                            clr.b (a0)
    return s - str;
   13e08:	                            move.l 40(sp),d0
   13e0c:	                            sub.l 48(sp),d0
}
   13e10:	                            move.l (sp)+,d2
   13e12:	                            lea 40(sp),sp
   13e16:	                            rts

00013e18 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13e18:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13e1a:	moveq #16,d0
   13e1c:	add.l sp,d0
   13e1e:	move.l d0,d1
   13e20:	addq.l #4,d1
   13e22:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13e26:	move.l 16(sp),d0
   13e2a:	move.l 4(sp),-(sp)
   13e2e:	move.l d0,-(sp)
   13e30:	move.l 20(sp),-(sp)
   13e34:	jsr 13cb2 <vsprintf2>
   13e3a:	lea 12(sp),sp
   13e3e:	move.l d0,(sp)
    va_end(args);
   13e40:	clr.l 4(sp)

    return done;
   13e44:	move.l (sp),d0
}
   13e46:	addq.l #8,sp
   13e48:	rts

00013e4a <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13e4a:	       lea -20(sp),sp
   13e4e:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13e50:	       moveq #12,d0
   13e52:	       move.l d0,20(sp)
   13e56:	       clr.l 16(sp)
   13e5a:	       move.l 1a7a4 <SysBase>,d0
   13e60:	       movea.l d0,a6
   13e62:	       move.l 20(sp),d0
   13e66:	       move.l 16(sp),d1
   13e6a:	       jsr -684(a6)
   13e6e:	       move.l d0,12(sp)
   13e72:	       move.l 12(sp),d0
   13e76:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13e7a:	   /-- bne.s 13e80 <addVarToStack+0x36>
   13e7c:	   |   clr.w d0
   13e7e:	/--|-- bra.s 13ec8 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13e80:	|  \-> move.l 8(sp),d0
   13e84:	|      move.l d0,-(sp)
   13e86:	|      move.l 32(sp),-(sp)
   13e8a:	|      jsr 149ac <copyMain>
   13e90:	|      addq.l #8,sp
   13e92:	|      tst.w d0
   13e94:	|  /-- bne.s 13eb0 <addVarToStack+0x66>
        FreeVec(newStack);
   13e96:	|  |   move.l 8(sp),4(sp)
   13e9c:	|  |   move.l 1a7a4 <SysBase>,d0
   13ea2:	|  |   movea.l d0,a6
   13ea4:	|  |   movea.l 4(sp),a1
   13ea8:	|  |   jsr -690(a6)
        return FALSE;
   13eac:	|  |   clr.w d0
   13eae:	+--|-- bra.s 13ec8 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13eb0:	|  \-> movea.l 32(sp),a0
   13eb4:	|      move.l (a0),d0
   13eb6:	|      movea.l 8(sp),a0
   13eba:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13ebe:	|      movea.l 32(sp),a0
   13ec2:	|      move.l 8(sp),(a0)
    return TRUE;
   13ec6:	|      moveq #1,d0
}
   13ec8:	\----> movea.l (sp)+,a6
   13eca:	       lea 20(sp),sp
   13ece:	       rts

00013ed0 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13ed0:	       lea -16(sp),sp
   13ed4:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13ed6:	       moveq #12,d0
   13ed8:	       move.l d0,16(sp)
   13edc:	       clr.l 12(sp)
   13ee0:	       move.l 1a7a4 <SysBase>,d0
   13ee6:	       movea.l d0,a6
   13ee8:	       move.l 16(sp),d0
   13eec:	       move.l 12(sp),d1
   13ef0:	       jsr -684(a6)
   13ef4:	       move.l d0,8(sp)
   13ef8:	       move.l 8(sp),d0
   13efc:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13f00:	   /-- bne.s 13f06 <addVarToStackQuick+0x36>
   13f02:	   |   clr.w d0
   13f04:	/--|-- bra.s 13f3c <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   13f06:	|  \-> move.l 4(sp),d0
   13f0a:	|      pea 8 <_start+0x8>
   13f0e:	|      move.l 28(sp),-(sp)
   13f12:	|      move.l d0,-(sp)
   13f14:	|      jsr 16fea <memcpy>
   13f1a:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13f1e:	|      movea.l 24(sp),a0
   13f22:	|      clr.l (a0)

    newStack->next = *thisStack;
   13f24:	|      movea.l 28(sp),a0
   13f28:	|      move.l (a0),d0
   13f2a:	|      movea.l 4(sp),a0
   13f2e:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13f32:	|      movea.l 28(sp),a0
   13f36:	|      move.l 4(sp),(a0)
    return TRUE;
   13f3a:	|      moveq #1,d0
}
   13f3c:	\----> movea.l (sp)+,a6
   13f3e:	       lea 16(sp),sp
   13f42:	       rts

00013f44 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   13f44:	       lea -16(sp),sp
   13f48:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13f4a:	       movea.l 24(sp),a0
   13f4e:	       move.l (a0),d0
   13f50:	       moveq #1,d1
   13f52:	       cmp.l d0,d1
   13f54:	   /-- bne.s 13f7e <addVariablesInSecond+0x3a>
   13f56:	   |   movea.l 28(sp),a0
   13f5a:	   |   move.l (a0),d0
   13f5c:	   |   moveq #1,d1
   13f5e:	   |   cmp.l d0,d1
   13f60:	   +-- bne.s 13f7e <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13f62:	   |   movea.l 28(sp),a0
   13f66:	   |   move.l 4(a0),d1
   13f6a:	   |   movea.l 24(sp),a0
   13f6e:	   |   move.l 4(a0),d0
   13f72:	   |   add.l d1,d0
   13f74:	   |   movea.l 28(sp),a0
   13f78:	   |   move.l d0,4(a0)
   13f7c:	/--|-- bra.s 13ff8 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13f7e:	|  \-> move.l 24(sp),-(sp)
   13f82:	|      jsr 14be4 <getTextFromAnyVar>
   13f88:	|      addq.l #4,sp
   13f8a:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13f8e:	|      move.l 28(sp),-(sp)
   13f92:	|      jsr 14be4 <getTextFromAnyVar>
   13f98:	|      addq.l #4,sp
   13f9a:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13f9e:	|      move.l 28(sp),-(sp)
   13fa2:	|      jsr 1485c <unlinkVar>
   13fa8:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13faa:	|      move.l 12(sp),-(sp)
   13fae:	|      move.l 20(sp),-(sp)
   13fb2:	|      jsr 13b3a <joinStrings>
   13fb8:	|      addq.l #8,sp
   13fba:	|      movea.l 28(sp),a0
   13fbe:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13fc2:	|      movea.l 28(sp),a0
   13fc6:	|      moveq #3,d0
   13fc8:	|      move.l d0,(a0)
		FreeVec(string1);
   13fca:	|      move.l 16(sp),8(sp)
   13fd0:	|      move.l 1a7a4 <SysBase>,d0
   13fd6:	|      movea.l d0,a6
   13fd8:	|      movea.l 8(sp),a1
   13fdc:	|      jsr -690(a6)
		FreeVec(string2);
   13fe0:	|      move.l 12(sp),4(sp)
   13fe6:	|      move.l 1a7a4 <SysBase>,d0
   13fec:	|      movea.l d0,a6
   13fee:	|      movea.l 4(sp),a1
   13ff2:	|      jsr -690(a6)
	}
}
   13ff6:	|      nop
   13ff8:	\----> nop
   13ffa:	       movea.l (sp)+,a6
   13ffc:	       lea 16(sp),sp
   14000:	       rts

00014002 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   14002:	movea.l 8(sp),a0
   14006:	move.l 4(a0),-(sp)
   1400a:	move.l (a0),-(sp)
   1400c:	movea.l 12(sp),a0
   14010:	move.l 4(a0),-(sp)
   14014:	move.l (a0),-(sp)
   14016:	jsr 14038 <compareVars>
   1401c:	lea 16(sp),sp
   14020:	move.l d0,-(sp)
   14022:	pea 1 <_start+0x1>
   14026:	move.l 16(sp),-(sp)
   1402a:	jsr 14f00 <setVariable>
   14030:	lea 12(sp),sp
}
   14034:	nop
   14036:	rts

00014038 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14038:	       subq.l #4,sp
	int re = 0;
   1403a:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1403c:	       move.l 8(sp),d1
   14040:	       move.l 16(sp),d0
   14044:	       cmp.l d1,d0
   14046:	/----- bne.w 1410e <compareVars+0xd6>
		switch (var1.varType) {
   1404a:	|      move.l 8(sp),d0
   1404e:	|      moveq #9,d1
   14050:	|      cmp.l d0,d1
   14052:	|  /-- bcs.w 140f6 <compareVars+0xbe>
   14056:	|  |   add.l d0,d0
   14058:	|  |   movea.l d0,a0
   1405a:	|  |   adda.l #82022,a0
   14060:	|  |   move.w (a0),d0
   14062:	|  |   jmp (14066 <compareVars+0x2e>,pc,d0.w)
   14066:	|  |   ori.b #-112,(a4)
   1406a:	|  |   ori.l #5243024,(a0)
   14070:	|  |   ori.l #7733392,(a0)
   14076:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1407c:	|  |   move.l d0,(sp)
			break;
   1407e:	+--|-- bra.w 1410e <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   14082:	|  |   move.l 12(sp),d1
   14086:	|  |   move.l 20(sp),d0
   1408a:	|  |   cmp.l d1,d0
   1408c:	|  |   seq d0
   1408e:	|  |   neg.b d0
   14090:	|  |   move.b d0,d0
   14092:	|  |   andi.l #255,d0
   14098:	|  |   move.l d0,(sp)
			break;
   1409a:	+--|-- bra.s 1410e <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   1409c:	|  |   move.l 12(sp),d1
   140a0:	|  |   move.l 20(sp),d0
   140a4:	|  |   cmp.l d1,d0
   140a6:	|  |   seq d0
   140a8:	|  |   neg.b d0
   140aa:	|  |   move.b d0,d0
   140ac:	|  |   andi.l #255,d0
   140b2:	|  |   move.l d0,(sp)
			break;
   140b4:	+--|-- bra.s 1410e <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   140b6:	|  |   move.l 20(sp),d1
   140ba:	|  |   move.l 12(sp),d0
   140be:	|  |   move.l d1,-(sp)
   140c0:	|  |   move.l d0,-(sp)
   140c2:	|  |   jsr 13aba <strcmp>
   140c8:	|  |   addq.l #8,sp
   140ca:	|  |   tst.l d0
   140cc:	|  |   seq d0
   140ce:	|  |   neg.b d0
   140d0:	|  |   move.b d0,d0
   140d2:	|  |   andi.l #255,d0
   140d8:	|  |   move.l d0,(sp)
			break;
   140da:	+--|-- bra.s 1410e <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   140dc:	|  |   move.l 12(sp),d1
   140e0:	|  |   move.l 20(sp),d0
   140e4:	|  |   cmp.l d1,d0
   140e6:	|  |   seq d0
   140e8:	|  |   neg.b d0
   140ea:	|  |   move.b d0,d0
   140ec:	|  |   andi.l #255,d0
   140f2:	|  |   move.l d0,(sp)
			break;
   140f4:	+--|-- bra.s 1410e <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   140f6:	|  \-> move.l 12(sp),d1
   140fa:	|      move.l 20(sp),d0
   140fe:	|      cmp.l d1,d0
   14100:	|      seq d0
   14102:	|      neg.b d0
   14104:	|      move.b d0,d0
   14106:	|      andi.l #255,d0
   1410c:	|      move.l d0,(sp)
		}
	}
	return re;
   1410e:	\----> move.l (sp),d0
}
   14110:	       addq.l #4,sp
   14112:	       rts

00014114 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   14114:	             lea -16(sp),sp
   14118:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1411a:	             movea.l 28(sp),a0
   1411e:	             moveq #6,d0
   14120:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   14122:	             moveq #12,d0
   14124:	             move.l d0,12(sp)
   14128:	             clr.l 8(sp)
   1412c:	             move.l 1a7a4 <SysBase>,d0
   14132:	             movea.l d0,a6
   14134:	             move.l 12(sp),d0
   14138:	             move.l 8(sp),d1
   1413c:	             jsr -684(a6)
   14140:	             move.l d0,4(sp)
   14144:	             move.l 4(sp),d0
   14148:	             movea.l 28(sp),a0
   1414c:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14150:	             movea.l 28(sp),a0
   14154:	             move.l 4(a0),d0
   14158:	         /-- bne.s 14160 <copyStack+0x4c>
   1415a:	         |   clr.w d0
   1415c:	/--------|-- bra.w 141e2 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   14160:	|        \-> movea.l 28(sp),a0
   14164:	|            movea.l 4(a0),a0
   14168:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1416a:	|            movea.l 28(sp),a0
   1416e:	|            movea.l 4(a0),a0
   14172:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14176:	|            movea.l 28(sp),a0
   1417a:	|            movea.l 4(a0),a0
   1417e:	|            moveq #1,d0
   14180:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   14184:	|            movea.l 24(sp),a0
   14188:	|            movea.l 4(a0),a0
   1418c:	|            move.l (a0),16(sp)

	while (a) {
   14190:	|     /----- bra.s 141da <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14192:	|  /--|----> movea.l 28(sp),a0
   14196:	|  |  |      move.l 4(a0),d0
   1419a:	|  |  |      move.l d0,d1
   1419c:	|  |  |      move.l 16(sp),d0
   141a0:	|  |  |      move.l d1,-(sp)
   141a2:	|  |  |      move.l d0,-(sp)
   141a4:	|  |  |      jsr 13e4a <addVarToStack>
   141aa:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   141ac:	|  |  |      movea.l 28(sp),a0
   141b0:	|  |  |      movea.l 4(a0),a0
   141b4:	|  |  |      move.l 4(a0),d0
   141b8:	|  |  |  /-- bne.s 141d0 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   141ba:	|  |  |  |   movea.l 28(sp),a0
   141be:	|  |  |  |   movea.l 4(a0),a1
   141c2:	|  |  |  |   movea.l 28(sp),a0
   141c6:	|  |  |  |   movea.l 4(a0),a0
   141ca:	|  |  |  |   move.l (a1),d0
   141cc:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   141d0:	|  |  |  \-> movea.l 16(sp),a0
   141d4:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   141da:	|  |  \----> tst.l 16(sp)
   141de:	|  \-------- bne.s 14192 <copyStack+0x7e>
	}

	return TRUE;
   141e0:	|            moveq #1,d0
}
   141e2:	\----------> movea.l (sp)+,a6
   141e4:	             lea 16(sp),sp
   141e8:	             rts

000141ea <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   141ea:	                lea -20(sp),sp
   141ee:	                move.l a6,-(sp)
   141f0:	                move.l 36(sp),d0
   141f4:	                move.w d0,d0
   141f6:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   141fa:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   14200:	                clr.l 16(sp)

    while (*huntVar) {
   14204:	   /----------- bra.s 14282 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14206:	/--|----------> movea.l 20(sp),a0
   1420a:	|  |            movea.l (a0),a0
   1420c:	|  |            movea.l 28(sp),a1
   14210:	|  |            move.l 4(a1),-(sp)
   14214:	|  |            move.l (a1),-(sp)
   14216:	|  |            move.l 4(a0),-(sp)
   1421a:	|  |            move.l (a0),-(sp)
   1421c:	|  |            jsr 14038 <compareVars>
   14222:	|  |            lea 16(sp),sp
   14226:	|  |            tst.l d0
   14228:	|  |  /-------- beq.s 14274 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1422a:	|  |  |         movea.l 20(sp),a0
   1422e:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   14232:	|  |  |         movea.l 12(sp),a0
   14236:	|  |  |         move.l 8(a0),d0
   1423a:	|  |  |         movea.l 20(sp),a0
   1423e:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14240:	|  |  |         move.l 12(sp),d0
   14244:	|  |  |         move.l d0,-(sp)
   14246:	|  |  |         jsr 1485c <unlinkVar>
   1424c:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1424e:	|  |  |         move.l 12(sp),8(sp)
   14254:	|  |  |         move.l 1a7a4 <SysBase>,d0
   1425a:	|  |  |         movea.l d0,a6
   1425c:	|  |  |         movea.l 8(sp),a1
   14260:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   14264:	|  |  |         tst.w 6(sp)
   14268:	|  |  |     /-- bne.s 1426e <deleteVarFromStack+0x84>
   1426a:	|  |  |     |   moveq #1,d0
   1426c:	|  |  |  /--|-- bra.s 14290 <deleteVarFromStack+0xa6>
            reply++;
   1426e:	|  |  |  |  \-> addq.l #1,16(sp)
   14272:	|  +--|--|----- bra.s 14282 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14274:	|  |  \--|----> movea.l 20(sp),a0
   14278:	|  |     |      move.l (a0),d0
   1427a:	|  |     |      move.l d0,d1
   1427c:	|  |     |      addq.l #8,d1
   1427e:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14282:	|  \-----|----> movea.l 20(sp),a0
   14286:	|        |      move.l (a0),d0
   14288:	\--------|----- bne.w 14206 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1428c:	         |      move.l 16(sp),d0
}
   14290:	         \----> movea.l (sp)+,a6
   14292:	                lea 20(sp),sp
   14296:	                rts

00014298 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14298:	       movea.l 4(sp),a0
   1429c:	       move.l 4(a0),d0
   142a0:	       cmp.l 8(sp),d0
   142a4:	   /-- bhi.s 142aa <fastArrayGetByIndex+0x12>
   142a6:	   |   moveq #0,d0
   142a8:	/--|-- bra.s 142b8 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   142aa:	|  \-> movea.l 4(sp),a0
   142ae:	|      move.l (a0),d1
   142b0:	|      move.l 8(sp),d0
   142b4:	|      lsl.l #3,d0
   142b6:	|      add.l d1,d0
}
   142b8:	\----> rts

000142ba <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   142ba:	                lea -32(sp),sp
   142be:	                move.l a6,-(sp)
   142c0:	                move.l a2,-(sp)
    struct persona *p = NULL;
   142c2:	                clr.l 36(sp)

    switch (thisVar->varType) {
   142c6:	                movea.l 44(sp),a0
   142ca:	                move.l (a0),d0
   142cc:	                moveq #8,d1
   142ce:	                cmp.l d0,d1
   142d0:	            /-- beq.s 142de <getCostumeFromVar+0x24>
   142d2:	            |   moveq #9,d1
   142d4:	            |   cmp.l d0,d1
   142d6:	   /--------|-- beq.w 1438c <getCostumeFromVar+0xd2>
   142da:	/--|--------|-- bra.w 14396 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   142de:	|  |        \-> moveq #8,d0
   142e0:	|  |            move.l d0,28(sp)
   142e4:	|  |            clr.l 24(sp)
   142e8:	|  |            move.l 1a7a4 <SysBase>,d0
   142ee:	|  |            movea.l d0,a6
   142f0:	|  |            move.l 28(sp),d0
   142f4:	|  |            move.l 24(sp),d1
   142f8:	|  |            jsr -684(a6)
   142fc:	|  |            move.l d0,20(sp)
   14300:	|  |            move.l 20(sp),d0
   14304:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14308:	|  |        /-- bne.s 14310 <getCostumeFromVar+0x56>
   1430a:	|  |        |   moveq #0,d0
   1430c:	|  |  /-----|-- bra.w 143c0 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   14310:	|  |  |     \-> movea.l 36(sp),a0
   14314:	|  |  |         moveq #1,d1
   14316:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   1431a:	|  |  |         moveq #12,d0
   1431c:	|  |  |         move.l d0,16(sp)
   14320:	|  |  |         clr.l 12(sp)
   14324:	|  |  |         move.l 1a7a4 <SysBase>,d0
   1432a:	|  |  |         movea.l d0,a6
   1432c:	|  |  |         move.l 16(sp),d0
   14330:	|  |  |         move.l 12(sp),d1
   14334:	|  |  |         jsr -684(a6)
   14338:	|  |  |         move.l d0,8(sp)
   1433c:	|  |  |         move.l 8(sp),d0
   14340:	|  |  |         movea.l 36(sp),a0
   14344:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14346:	|  |  |         movea.l 36(sp),a0
   1434a:	|  |  |         move.l (a0),d0
   1434c:	|  |  |     /-- bne.s 14352 <getCostumeFromVar+0x98>
   1434e:	|  |  |     |   moveq #0,d0
   14350:	|  |  +-----|-- bra.s 143c0 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14352:	|  |  |     \-> clr.l 32(sp)
   14356:	|  |  |     /-- bra.s 14382 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14358:	|  |  |  /--|-> movea.l 44(sp),a0
   1435c:	|  |  |  |  |   move.l 4(a0),d0
   14360:	|  |  |  |  |   movea.l 36(sp),a0
   14364:	|  |  |  |  |   movea.l (a0),a0
   14366:	|  |  |  |  |   move.l 32(sp),d1
   1436a:	|  |  |  |  |   add.l d1,d1
   1436c:	|  |  |  |  |   add.l d1,d1
   1436e:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14372:	|  |  |  |  |   move.l d0,-(sp)
   14374:	|  |  |  |  |   jsr 9418 <copyAnim>
   1437a:	|  |  |  |  |   addq.l #4,sp
   1437c:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1437e:	|  |  |  |  |   addq.l #1,32(sp)
   14382:	|  |  |  |  \-> moveq #2,d1
   14384:	|  |  |  |      cmp.l 32(sp),d1
   14388:	|  |  |  \----- bge.s 14358 <getCostumeFromVar+0x9e>
            }
            break;
   1438a:	|  |  |     /-- bra.s 143bc <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1438c:	|  \--|-----|-> movea.l 44(sp),a0
   14390:	|     |     |   move.l 4(a0),d0
   14394:	|     +-----|-- bra.s 143c0 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14396:	\-----|-----|-> movea.l 44(sp),a0
   1439a:	      |     |   move.l (a0),d0
   1439c:	      |     |   add.l d0,d0
   1439e:	      |     |   movea.l d0,a1
   143a0:	      |     |   adda.l d0,a1
   143a2:	      |     |   lea 1a680 <typeName>,a0
   143a8:	      |     |   move.l (0,a1,a0.l),d0
   143ac:	      |     |   move.l d0,-(sp)
   143ae:	      |     |   pea 19c11 <graphics.c.1c13408a+0x161>
   143b4:	      |     |   jsr 17036 <KPrintF>
   143ba:	      |     |   addq.l #8,sp
    }

    return p;
   143bc:	      |     \-> move.l 36(sp),d0
}
   143c0:	      \-------> movea.l (sp)+,a2
   143c2:	                movea.l (sp)+,a6
   143c4:	                lea 32(sp),sp
   143c8:	                rts

000143ca <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   143ca:	                lea -96(sp),sp
   143ce:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   143d2:	                move.l 116(sp),-(sp)
   143d6:	                pea 19c49 <graphics.c.1c13408a+0x199>
   143dc:	                jsr 13b3a <joinStrings>
   143e2:	                addq.l #8,sp
   143e4:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   143e8:	            /-- bne.s 143f0 <getSavedGamesStack+0x26>
   143ea:	            |   clr.w d0
   143ec:	/-----------|-- bra.w 14604 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   143f0:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   143f4:	|               move.l #105547,98(sp)
   143fc:	|               moveq #-2,d0
   143fe:	|               move.l d0,94(sp)
   14402:	|               move.l 1a7ac <DOSBase>,d0
   14408:	|               movea.l d0,a6
   1440a:	|               move.l 98(sp),d1
   1440e:	|               move.l 94(sp),d2
   14412:	|               jsr -84(a6)
   14416:	|               move.l d0,90(sp)
   1441a:	|               move.l 90(sp),d0
   1441e:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14422:	|           /-- bne.s 1442a <getSavedGamesStack+0x60>
   14424:	|           |   clr.w d0
   14426:	+-----------|-- bra.w 14604 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1442a:	|           \-> move.l #260,82(sp)
   14432:	|               move.l #65536,78(sp)
   1443a:	|               move.l 1a7a4 <SysBase>,d0
   14440:	|               movea.l d0,a6
   14442:	|               move.l 82(sp),d0
   14446:	|               move.l 78(sp),d1
   1444a:	|               jsr -684(a6)
   1444e:	|               move.l d0,74(sp)
   14452:	|               move.l 74(sp),d0
   14456:	|               move.l d0,70(sp)
	if (!fib) {
   1445a:	|           /-- bne.s 14478 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1445c:	|           |   move.l 86(sp),22(sp)
   14462:	|           |   move.l 1a7ac <DOSBase>,d0
   14468:	|           |   movea.l d0,a6
   1446a:	|           |   move.l 22(sp),d1
   1446e:	|           |   jsr -90(a6)
		return FALSE;
   14472:	|           |   clr.w d0
   14474:	+-----------|-- bra.w 14604 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14478:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1447c:	|               move.l 86(sp),66(sp)
   14482:	|               move.l 70(sp),62(sp)
   14488:	|               move.l 1a7ac <DOSBase>,d0
   1448e:	|               movea.l d0,a6
   14490:	|               move.l 66(sp),d1
   14494:	|               move.l 62(sp),d2
   14498:	|               jsr -102(a6)
   1449c:	|               move.l d0,58(sp)
   144a0:	|               move.l 58(sp),d0
   144a4:	|  /----------- beq.w 145b8 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   144a8:	|  |        /-- bra.w 14584 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   144ac:	|  |  /-----|-> move.l 70(sp),d2
   144b0:	|  |  |     |   addq.l #8,d2
   144b2:	|  |  |     |   move.l 70(sp),d0
   144b6:	|  |  |     |   addq.l #8,d0
   144b8:	|  |  |     |   move.l d0,-(sp)
   144ba:	|  |  |     |   jsr 13afa <strlen>
   144c0:	|  |  |     |   addq.l #4,sp
   144c2:	|  |  |     |   move.l d0,d3
   144c4:	|  |  |     |   move.l 116(sp),-(sp)
   144c8:	|  |  |     |   jsr 13afa <strlen>
   144ce:	|  |  |     |   addq.l #4,sp
   144d0:	|  |  |     |   move.l d3,d1
   144d2:	|  |  |     |   sub.l d0,d1
   144d4:	|  |  |     |   move.l d2,d0
   144d6:	|  |  |     |   add.l d1,d0
   144d8:	|  |  |     |   move.l 116(sp),-(sp)
   144dc:	|  |  |     |   move.l d0,-(sp)
   144de:	|  |  |     |   jsr 13aba <strcmp>
   144e4:	|  |  |     |   addq.l #8,sp
   144e6:	|  |  |     |   tst.l d0
   144e8:	|  |  |     +-- bne.w 14584 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   144ec:	|  |  |     |   move.l 70(sp),d0
   144f0:	|  |  |     |   addq.l #8,d0
   144f2:	|  |  |     |   move.l d0,-(sp)
   144f4:	|  |  |     |   jsr 13afa <strlen>
   144fa:	|  |  |     |   addq.l #4,sp
   144fc:	|  |  |     |   move.l d0,d2
   144fe:	|  |  |     |   move.l 116(sp),-(sp)
   14502:	|  |  |     |   jsr 13afa <strlen>
   14508:	|  |  |     |   addq.l #4,sp
   1450a:	|  |  |     |   move.l d0,d1
   1450c:	|  |  |     |   move.l d2,d0
   1450e:	|  |  |     |   sub.l d1,d0
   14510:	|  |  |     |   movea.l 70(sp),a0
   14514:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14518:	|  |  |     |   move.l 70(sp),d0
   1451c:	|  |  |     |   addq.l #8,d0
   1451e:	|  |  |     |   move.l d0,-(sp)
   14520:	|  |  |     |   jsr 118 <decodeFilename>
   14526:	|  |  |     |   addq.l #4,sp
   14528:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1452c:	|  |  |     |   move.l 42(sp),-(sp)
   14530:	|  |  |     |   lea 18(sp),a0
   14534:	|  |  |     |   move.l a0,-(sp)
   14536:	|  |  |     |   jsr 14830 <makeTextVar>
   1453c:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1453e:	|  |  |     |   move.l 42(sp),38(sp)
   14544:	|  |  |     |   move.l 1a7a4 <SysBase>,d0
   1454a:	|  |  |     |   movea.l d0,a6
   1454c:	|  |  |     |   movea.l 38(sp),a1
   14550:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14554:	|  |  |     |   move.l 112(sp),d0
   14558:	|  |  |     |   move.l d0,-(sp)
   1455a:	|  |  |     |   lea 18(sp),a0
   1455e:	|  |  |     |   move.l a0,-(sp)
   14560:	|  |  |     |   jsr 13e4a <addVarToStack>
   14566:	|  |  |     |   addq.l #8,sp
   14568:	|  |  |     |   tst.w d0
   1456a:	|  |  |  /--|-- beq.s 145bc <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1456c:	|  |  |  |  |   movea.l 112(sp),a0
   14570:	|  |  |  |  |   move.l 4(a0),d0
   14574:	|  |  |  |  +-- bne.s 14584 <getSavedGamesStack+0x1ba>
   14576:	|  |  |  |  |   movea.l 112(sp),a0
   1457a:	|  |  |  |  |   move.l (a0),d0
   1457c:	|  |  |  |  |   movea.l 112(sp),a0
   14580:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14584:	|  |  |  |  \-> move.l 86(sp),54(sp)
   1458a:	|  |  |  |      move.l 70(sp),50(sp)
   14590:	|  |  |  |      move.l 1a7ac <DOSBase>,d0
   14596:	|  |  |  |      movea.l d0,a6
   14598:	|  |  |  |      move.l 54(sp),d1
   1459c:	|  |  |  |      move.l 50(sp),d2
   145a0:	|  |  |  |      jsr -108(a6)
   145a4:	|  |  |  |      move.l d0,46(sp)
   145a8:	|  |  |  |      move.l 46(sp),d0
   145ac:	|  |  \--|----- bne.w 144ac <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   145b0:	|  |     |      move.w #1,106(sp)
   145b6:	|  |     |  /-- bra.s 145be <getSavedGamesStack+0x1f4>
	}

cleanup:
   145b8:	|  \-----|--|-> nop
   145ba:	|        |  +-- bra.s 145be <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   145bc:	|        \--|-> nop
	FreeVec(fib);
   145be:	|           \-> move.l 70(sp),34(sp)
   145c4:	|               move.l 1a7a4 <SysBase>,d0
   145ca:	|               movea.l d0,a6
   145cc:	|               movea.l 34(sp),a1
   145d0:	|               jsr -690(a6)
	UnLock(dirLock);
   145d4:	|               move.l 86(sp),30(sp)
   145da:	|               move.l 1a7ac <DOSBase>,d0
   145e0:	|               movea.l d0,a6
   145e2:	|               move.l 30(sp),d1
   145e6:	|               jsr -90(a6)
	FreeVec(pattern);
   145ea:	|               move.l 102(sp),26(sp)
   145f0:	|               move.l 1a7a4 <SysBase>,d0
   145f6:	|               movea.l d0,a6
   145f8:	|               movea.l 26(sp),a1
   145fc:	|               jsr -690(a6)
	return result;
   14600:	|               move.w 106(sp),d0
}
   14604:	\-------------> movem.l (sp)+,d2-d3/a6
   14608:	                lea 96(sp),sp
   1460c:	                rts

0001460e <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   1460e:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14610:	       movea.l 20(sp),a0
   14614:	       move.l (a0),d0
   14616:	       cmp.l 16(sp),d0
   1461a:	/----- beq.s 1467e <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   1461c:	|      move.l 16(sp),d0
   14620:	|      add.l d0,d0
   14622:	|      movea.l d0,a1
   14624:	|      adda.l d0,a1
   14626:	|      lea 1a680 <typeName>,a0
   1462c:	|      move.l (0,a1,a0.l),d0
   14630:	|      move.l d0,-(sp)
   14632:	|      pea 19c4d <graphics.c.1c13408a+0x19d>
   14638:	|      jsr 13b3a <joinStrings>
   1463e:	|      addq.l #8,sp
   14640:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14644:	|      movea.l 20(sp),a0
   14648:	|      move.l (a0),d0
   1464a:	|      add.l d0,d0
   1464c:	|      movea.l d0,a1
   1464e:	|      adda.l d0,a1
   14650:	|      lea 1a680 <typeName>,a0
   14656:	|      move.l (0,a1,a0.l),d0
   1465a:	|      move.l d0,-(sp)
   1465c:	|      pea 19c8f <graphics.c.1c13408a+0x1df>
   14662:	|      jsr 13b3a <joinStrings>
   14668:	|      addq.l #8,sp
   1466a:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1466c:	|      move.l (sp),-(sp)
   1466e:	|      move.l 8(sp),-(sp)
   14672:	|      jsr 17036 <KPrintF>
   14678:	|      addq.l #8,sp

		return FALSE;
   1467a:	|      clr.w d0
   1467c:	|  /-- bra.s 1468e <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1467e:	\--|-> movea.l 20(sp),a0
   14682:	   |   move.l 4(a0),d0
   14686:	   |   movea.l 12(sp),a0
   1468a:	   |   move.l d0,(a0)
	return TRUE;
   1468c:	   |   moveq #1,d0
}
   1468e:	   \-> addq.l #8,sp
   14690:	       rts

00014692 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14692:	move.l 8(sp),-(sp)
   14696:	jsr 6bb2 <getNumberedString>
   1469c:	addq.l #4,sp
   1469e:	move.l d0,-(sp)
   146a0:	move.l 8(sp),-(sp)
   146a4:	jsr 14830 <makeTextVar>
   146aa:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   146ac:	movea.l 4(sp),a0
   146b0:	move.l 4(a0),d0
   146b4:	sne d0
   146b6:	neg.b d0
   146b8:	move.b d0,d0
   146ba:	andi.w #255,d0
}
   146be:	rts

000146c0 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   146c0:	          subq.l #8,sp
    int size = stackSize(stacky);
   146c2:	          move.l 16(sp),-(sp)
   146c6:	          jsr 14f6e <stackSize>
   146cc:	          addq.l #4,sp
   146ce:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   146d2:	          move.l 4(sp),-(sp)
   146d6:	          move.l 16(sp),-(sp)
   146da:	          jsr 1472a <makeFastArraySize>
   146e0:	          addq.l #8,sp
   146e2:	          tst.w d0
   146e4:	      /-- bne.s 146ea <makeFastArrayFromStack+0x2a>
   146e6:	      |   clr.w d0
   146e8:	/-----|-- bra.s 14726 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   146ea:	|     \-> movea.l 16(sp),a0
   146ee:	|         move.l (a0),(sp)
    size = 0;
   146f0:	|         clr.l 4(sp)
    while (allV) {
   146f4:	|     /-- bra.s 14720 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   146f6:	|  /--|-> movea.l 12(sp),a0
   146fa:	|  |  |   movea.l 4(a0),a0
   146fe:	|  |  |   move.l (a0),d1
   14700:	|  |  |   move.l 4(sp),d0
   14704:	|  |  |   lsl.l #3,d0
   14706:	|  |  |   add.l d0,d1
   14708:	|  |  |   move.l (sp),d0
   1470a:	|  |  |   move.l d1,-(sp)
   1470c:	|  |  |   move.l d0,-(sp)
   1470e:	|  |  |   jsr 149ac <copyMain>
   14714:	|  |  |   addq.l #8,sp
        size++;
   14716:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   1471a:	|  |  |   movea.l (sp),a0
   1471c:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14720:	|  |  \-> tst.l (sp)
   14722:	|  \----- bne.s 146f6 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14724:	|         moveq #1,d0
}
   14726:	\-------> addq.l #8,sp
   14728:	          rts

0001472a <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   1472a:	          lea -28(sp),sp
   1472e:	          move.l a6,-(sp)
    if (size < 0) {
   14730:	          tst.l 40(sp)
   14734:	      /-- bge.s 1474a <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14736:	      |   pea 19cd4 <graphics.c.1c13408a+0x224>
   1473c:	      |   jsr 17036 <KPrintF>
   14742:	      |   addq.l #4,sp
		return FALSE;
   14744:	      |   clr.w d0
   14746:	/-----|-- bra.w 14828 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1474a:	|     \-> move.l 36(sp),-(sp)
   1474e:	|         jsr 1485c <unlinkVar>
   14754:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14756:	|         movea.l 36(sp),a0
   1475a:	|         moveq #10,d0
   1475c:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   1475e:	|         moveq #12,d0
   14760:	|         move.l d0,24(sp)
   14764:	|         clr.l 20(sp)
   14768:	|         move.l 1a7a4 <SysBase>,d0
   1476e:	|         movea.l d0,a6
   14770:	|         move.l 24(sp),d0
   14774:	|         move.l 20(sp),d1
   14778:	|         jsr -684(a6)
   1477c:	|         move.l d0,16(sp)
   14780:	|         move.l 16(sp),d0
   14784:	|         movea.l 36(sp),a0
   14788:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   1478c:	|         movea.l 36(sp),a0
   14790:	|         move.l 4(a0),d0
   14794:	|     /-- bne.s 1479c <makeFastArraySize+0x72>
   14796:	|     |   clr.w d0
   14798:	+-----|-- bra.w 14828 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   1479c:	|     \-> move.l 40(sp),d0
   147a0:	|         lsl.l #3,d0
   147a2:	|         move.l d0,12(sp)
   147a6:	|         clr.l 8(sp)
   147aa:	|         move.l 1a7a4 <SysBase>,d0
   147b0:	|         movea.l d0,a6
   147b2:	|         move.l 12(sp),d0
   147b6:	|         move.l 8(sp),d1
   147ba:	|         jsr -684(a6)
   147be:	|         move.l d0,4(sp)
   147c2:	|         move.l 4(sp),d0
   147c6:	|         movea.l 36(sp),a0
   147ca:	|         movea.l 4(a0),a0
   147ce:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   147d0:	|         movea.l 36(sp),a0
   147d4:	|         movea.l 4(a0),a0
   147d8:	|         move.l (a0),d0
   147da:	|     /-- bne.s 147e0 <makeFastArraySize+0xb6>
   147dc:	|     |   clr.w d0
   147de:	+-----|-- bra.s 14828 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   147e0:	|     \-> clr.l 28(sp)
   147e4:	|     /-- bra.s 14800 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   147e6:	|  /--|-> movea.l 36(sp),a0
   147ea:	|  |  |   movea.l 4(a0),a0
   147ee:	|  |  |   move.l (a0),d1
   147f0:	|  |  |   move.l 28(sp),d0
   147f4:	|  |  |   lsl.l #3,d0
   147f6:	|  |  |   movea.l d1,a0
   147f8:	|  |  |   adda.l d0,a0
   147fa:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   147fc:	|  |  |   addq.l #1,28(sp)
   14800:	|  |  \-> move.l 28(sp),d0
   14804:	|  |      cmp.l 40(sp),d0
   14808:	|  \----- blt.s 147e6 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   1480a:	|         movea.l 36(sp),a0
   1480e:	|         movea.l 4(a0),a0
   14812:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14818:	|         movea.l 36(sp),a0
   1481c:	|         movea.l 4(a0),a0
   14820:	|         moveq #1,d0
   14822:	|         move.l d0,8(a0)
    return TRUE;
   14826:	|         moveq #1,d0
}
   14828:	\-------> movea.l (sp)+,a6
   1482a:	          lea 28(sp),sp
   1482e:	          rts

00014830 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14830:	move.l 4(sp),-(sp)
   14834:	jsr 1485c <unlinkVar>
   1483a:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1483c:	movea.l 4(sp),a0
   14840:	moveq #3,d0
   14842:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14844:	move.l 8(sp),-(sp)
   14848:	jsr b8 <copyString>
   1484e:	addq.l #4,sp
   14850:	movea.l 4(sp),a0
   14854:	move.l d0,4(a0)
}
   14858:	nop
   1485a:	rts

0001485c <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1485c:	                      lea -16(sp),sp
   14860:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14862:	                      movea.l 24(sp),a0
   14866:	                      move.l (a0),d0
   14868:	                      moveq #10,d1
   1486a:	                      cmp.l d0,d1
   1486c:	            /-------- beq.w 14924 <unlinkVar+0xc8>
   14870:	            |         moveq #10,d1
   14872:	            |         cmp.l d0,d1
   14874:	/-----------|-------- bcs.w 14998 <unlinkVar+0x13c>
   14878:	|           |         moveq #8,d1
   1487a:	|           |         cmp.l d0,d1
   1487c:	|  /--------|-------- beq.w 14984 <unlinkVar+0x128>
   14880:	|  |        |         moveq #8,d1
   14882:	|  |        |         cmp.l d0,d1
   14884:	+--|--------|-------- bcs.w 14998 <unlinkVar+0x13c>
   14888:	|  |        |         moveq #3,d1
   1488a:	|  |        |         cmp.l d0,d1
   1488c:	|  |        |     /-- beq.s 14898 <unlinkVar+0x3c>
   1488e:	|  |        |     |   moveq #6,d1
   14890:	|  |        |     |   cmp.l d0,d1
   14892:	|  |        |  /--|-- beq.s 148be <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14894:	+--|--------|--|--|-- bra.w 14998 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14898:	|  |        |  |  \-> movea.l 24(sp),a0
   1489c:	|  |        |  |      move.l 4(a0),4(sp)
   148a2:	|  |        |  |      move.l 1a7a4 <SysBase>,d0
   148a8:	|  |        |  |      movea.l d0,a6
   148aa:	|  |        |  |      movea.l 4(sp),a1
   148ae:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   148b2:	|  |        |  |      movea.l 24(sp),a0
   148b6:	|  |        |  |      clr.l 4(a0)
		break;
   148ba:	|  |  /-----|--|----- bra.w 149a2 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   148be:	|  |  |     |  \----> movea.l 24(sp),a0
   148c2:	|  |  |     |         movea.l 4(a0),a0
   148c6:	|  |  |     |         move.l 8(a0),d0
   148ca:	|  |  |     |         subq.l #1,d0
   148cc:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   148d0:	|  |  |     |         movea.l 24(sp),a0
   148d4:	|  |  |     |         movea.l 4(a0),a0
   148d8:	|  |  |     |         move.l 8(a0),d0
   148dc:	|  |  |  /--|-------- bgt.w 1499c <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   148e0:	|  |  |  |  |     /-- bra.s 148f4 <unlinkVar+0x98>
   148e2:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   148e6:	|  |  |  |  |  |  |   move.l 4(a0),d0
   148ea:	|  |  |  |  |  |  |   move.l d0,-(sp)
   148ec:	|  |  |  |  |  |  |   jsr 14f92 <trimStack>
   148f2:	|  |  |  |  |  |  |   addq.l #4,sp
   148f4:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   148f8:	|  |  |  |  |  |      movea.l 4(a0),a0
   148fc:	|  |  |  |  |  |      move.l (a0),d0
   148fe:	|  |  |  |  |  \----- bne.s 148e2 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14900:	|  |  |  |  |         movea.l 24(sp),a0
   14904:	|  |  |  |  |         move.l 4(a0),8(sp)
   1490a:	|  |  |  |  |         move.l 1a7a4 <SysBase>,d0
   14910:	|  |  |  |  |         movea.l d0,a6
   14912:	|  |  |  |  |         movea.l 8(sp),a1
   14916:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   1491a:	|  |  |  |  |         movea.l 24(sp),a0
   1491e:	|  |  |  |  |         clr.l 4(a0)
		break;
   14922:	|  |  |  +--|-------- bra.s 1499c <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14924:	|  |  |  |  \-------> movea.l 24(sp),a0
   14928:	|  |  |  |            movea.l 4(a0),a0
   1492c:	|  |  |  |            move.l 8(a0),d0
   14930:	|  |  |  |            subq.l #1,d0
   14932:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14936:	|  |  |  |            movea.l 24(sp),a0
   1493a:	|  |  |  |            movea.l 4(a0),a0
   1493e:	|  |  |  |            move.l 8(a0),d0
   14942:	|  |  |  |        /-- bgt.s 149a0 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14944:	|  |  |  |        |   movea.l 24(sp),a0
   14948:	|  |  |  |        |   movea.l 4(a0),a0
   1494c:	|  |  |  |        |   move.l (a0),16(sp)
   14950:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   14956:	|  |  |  |        |   movea.l d0,a6
   14958:	|  |  |  |        |   movea.l 16(sp),a1
   1495c:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14960:	|  |  |  |        |   movea.l 24(sp),a0
   14964:	|  |  |  |        |   move.l 4(a0),12(sp)
   1496a:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   14970:	|  |  |  |        |   movea.l d0,a6
   14972:	|  |  |  |        |   movea.l 12(sp),a1
   14976:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   1497a:	|  |  |  |        |   movea.l 24(sp),a0
   1497e:	|  |  |  |        |   clr.l 4(a0)
		break;
   14982:	|  |  |  |        +-- bra.s 149a0 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14984:	|  \--|--|--------|-> movea.l 24(sp),a0
   14988:	|     |  |        |   move.l 4(a0),d0
   1498c:	|     |  |        |   move.l d0,-(sp)
   1498e:	|     |  |        |   jsr 97e4 <deleteAnim>
   14994:	|     |  |        |   addq.l #4,sp
		break;
   14996:	|     +--|--------|-- bra.s 149a2 <unlinkVar+0x146>
		break;
   14998:	\-----|--|--------|-> nop
   1499a:	      +--|--------|-- bra.s 149a2 <unlinkVar+0x146>
		break;
   1499c:	      |  \--------|-> nop
   1499e:	      +-----------|-- bra.s 149a2 <unlinkVar+0x146>
		break;
   149a0:	      |           \-> nop
	}
}
   149a2:	      \-------------> nop
   149a4:	                      movea.l (sp)+,a6
   149a6:	                      lea 16(sp),sp
   149aa:	                      rts

000149ac <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   149ac:	       movea.l 4(sp),a0
   149b0:	       move.l (a0),d0
   149b2:	       movea.l 8(sp),a0
   149b6:	       move.l d0,(a0)
	switch (to->varType) {
   149b8:	       movea.l 8(sp),a0
   149bc:	       move.l (a0),d0
   149be:	       moveq #10,d1
   149c0:	       cmp.l d0,d1
   149c2:	/----- bcs.w 14ab4 <copyMain+0x108>
   149c6:	|      add.l d0,d0
   149c8:	|      movea.l d0,a0
   149ca:	|      adda.l #84438,a0
   149d0:	|      move.w (a0),d0
   149d2:	|      jmp (149d6 <copyMain+0x2a>,pc,d0.w)
   149d6:	|      .short 0x00da
   149d8:	|      ori.b #22,(a6)
   149dc:	|      ori.w #22,(a4)
   149e0:	|      ori.b #-126,(a6)
   149e4:	|      ori.b #-68,(a6)
   149e8:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   149f0:	|      move.l 4(a0),d0
   149f4:	|      movea.l 8(sp),a0
   149f8:	|      move.l d0,4(a0)
		return TRUE;
   149fc:	|      moveq #1,d0
   149fe:	|  /-- bra.w 14ac6 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14a02:	|  |   movea.l 4(sp),a0
   14a06:	|  |   move.l 4(a0),d0
   14a0a:	|  |   movea.l 8(sp),a0
   14a0e:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14a12:	|  |   movea.l 8(sp),a0
   14a16:	|  |   movea.l 4(a0),a0
   14a1a:	|  |   move.l 8(a0),d0
   14a1e:	|  |   addq.l #1,d0
   14a20:	|  |   move.l d0,8(a0)
		return TRUE;
   14a24:	|  |   moveq #1,d0
   14a26:	|  +-- bra.w 14ac6 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14a2a:	|  |   movea.l 4(sp),a0
   14a2e:	|  |   move.l 4(a0),d0
   14a32:	|  |   move.l d0,-(sp)
   14a34:	|  |   jsr b8 <copyString>
   14a3a:	|  |   addq.l #4,sp
   14a3c:	|  |   movea.l 8(sp),a0
   14a40:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14a44:	|  |   movea.l 8(sp),a0
   14a48:	|  |   move.l 4(a0),d0
   14a4c:	|  |   sne d0
   14a4e:	|  |   neg.b d0
   14a50:	|  |   move.b d0,d0
   14a52:	|  |   andi.w #255,d0
   14a56:	|  +-- bra.s 14ac6 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14a58:	|  |   movea.l 4(sp),a0
   14a5c:	|  |   move.l 4(a0),d0
   14a60:	|  |   movea.l 8(sp),a0
   14a64:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14a68:	|  |   movea.l 8(sp),a0
   14a6c:	|  |   movea.l 4(a0),a0
   14a70:	|  |   move.l 8(a0),d0
   14a74:	|  |   addq.l #1,d0
   14a76:	|  |   move.l d0,8(a0)
		return TRUE;
   14a7a:	|  |   moveq #1,d0
   14a7c:	|  +-- bra.s 14ac6 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14a7e:	|  |   movea.l 4(sp),a0
   14a82:	|  |   move.l 4(a0),d0
   14a86:	|  |   movea.l 8(sp),a0
   14a8a:	|  |   move.l d0,4(a0)
		return TRUE;
   14a8e:	|  |   moveq #1,d0
   14a90:	|  +-- bra.s 14ac6 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14a92:	|  |   movea.l 4(sp),a0
   14a96:	|  |   move.l 4(a0),d0
   14a9a:	|  |   move.l d0,-(sp)
   14a9c:	|  |   jsr 9418 <copyAnim>
   14aa2:	|  |   addq.l #4,sp
   14aa4:	|  |   movea.l 8(sp),a0
   14aa8:	|  |   move.l d0,4(a0)
		return TRUE;
   14aac:	|  |   moveq #1,d0
   14aae:	|  +-- bra.s 14ac6 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14ab0:	|  |   moveq #1,d0
   14ab2:	|  +-- bra.s 14ac6 <copyMain+0x11a>

		default:
		break;
   14ab4:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14ab6:	   |   pea 19d25 <graphics.c.1c13408a+0x275>
   14abc:	   |   jsr 17036 <KPrintF>
   14ac2:	   |   addq.l #4,sp
	return FALSE;
   14ac4:	   |   clr.w d0
}
   14ac6:	   \-> rts

00014ac8 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14ac8:	move.l 8(sp),-(sp)
   14acc:	jsr 1485c <unlinkVar>
   14ad2:	addq.l #4,sp
	return copyMain(from, to);
   14ad4:	move.l 8(sp),-(sp)
   14ad8:	move.l 8(sp),-(sp)
   14adc:	jsr 149ac <copyMain>
   14ae2:	addq.l #8,sp
}
   14ae4:	rts

00014ae6 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14ae6:	       movea.l 4(sp),a0
   14aea:	       move.l (a0),d0
   14aec:	       moveq #8,d1
   14aee:	       cmp.l d0,d1
   14af0:	   /-- bne.s 14b06 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14af2:	   |   movea.l 4(sp),a0
   14af6:	   |   move.l 4(a0),d0
   14afa:	   |   move.l d0,-(sp)
   14afc:	   |   jsr 9418 <copyAnim>
   14b02:	   |   addq.l #4,sp
   14b04:	/--|-- bra.s 14b4c <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14b06:	|  \-> movea.l 4(sp),a0
   14b0a:	|      move.l (a0),d0
   14b0c:	|      moveq #1,d1
   14b0e:	|      cmp.l d0,d1
   14b10:	|  /-- bne.s 14b24 <getAnimationFromVar+0x3e>
   14b12:	|  |   movea.l 4(sp),a0
   14b16:	|  |   move.l 4(a0),d0
   14b1a:	|  +-- bne.s 14b24 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14b1c:	|  |   jsr abe8 <makeNullAnim>
   14b22:	+--|-- bra.s 14b4c <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14b24:	|  \-> movea.l 4(sp),a0
   14b28:	|      move.l (a0),d0
   14b2a:	|      add.l d0,d0
   14b2c:	|      movea.l d0,a1
   14b2e:	|      adda.l d0,a1
   14b30:	|      lea 1a680 <typeName>,a0
   14b36:	|      move.l (0,a1,a0.l),d0
   14b3a:	|      move.l d0,-(sp)
   14b3c:	|      pea 19c11 <graphics.c.1c13408a+0x161>
   14b42:	|      jsr 17036 <KPrintF>
   14b48:	|      addq.l #8,sp
	return NULL;
   14b4a:	|      moveq #0,d0
}
   14b4c:	\----> rts

00014b4e <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14b4e:	       movea.l 4(sp),a0
   14b52:	       move.l (a0),d0
   14b54:	       moveq #10,d1
   14b56:	       cmp.l d0,d1
   14b58:	/----- bcs.w 14bde <getBoolean+0x90>
   14b5c:	|      add.l d0,d0
   14b5e:	|      movea.l d0,a0
   14b60:	|      adda.l #84844,a0
   14b66:	|      move.w (a0),d0
   14b68:	|      jmp (14b6c <getBoolean+0x1e>,pc,d0.w)
   14b6c:	|      ori.b #26,(a6)
   14b70:	|      ori.w #68,(114,a2,d0.w)
   14b76:	|      ori.w #46,(114,a2,d0.w)
   14b7c:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14b82:	|      clr.w d0
   14b84:	|  /-- bra.s 14be2 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14b86:	|  |   movea.l 4(sp),a0
   14b8a:	|  |   move.l 4(a0),d0
   14b8e:	|  |   sne d0
   14b90:	|  |   neg.b d0
   14b92:	|  |   move.b d0,d0
   14b94:	|  |   andi.w #255,d0
   14b98:	|  +-- bra.s 14be2 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14b9a:	|  |   movea.l 4(sp),a0
   14b9e:	|  |   movea.l 4(a0),a0
   14ba2:	|  |   move.l (a0),d0
   14ba4:	|  |   sne d0
   14ba6:	|  |   neg.b d0
   14ba8:	|  |   move.b d0,d0
   14baa:	|  |   andi.w #255,d0
   14bae:	|  +-- bra.s 14be2 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14bb0:	|  |   movea.l 4(sp),a0
   14bb4:	|  |   movea.l 4(a0),a0
   14bb8:	|  |   move.b (a0),d0
   14bba:	|  |   sne d0
   14bbc:	|  |   neg.b d0
   14bbe:	|  |   move.b d0,d0
   14bc0:	|  |   andi.w #255,d0
   14bc4:	|  +-- bra.s 14be2 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14bc6:	|  |   movea.l 4(sp),a0
   14bca:	|  |   movea.l 4(a0),a0
   14bce:	|  |   move.l 4(a0),d0
   14bd2:	|  |   sne d0
   14bd4:	|  |   neg.b d0
   14bd6:	|  |   move.b d0,d0
   14bd8:	|  |   andi.w #255,d0
   14bdc:	|  +-- bra.s 14be2 <getBoolean+0x94>

		default:
		break;
   14bde:	\--|-> nop
	}
	return TRUE;
   14be0:	   |   moveq #1,d0
}
   14be2:	   \-> rts

00014be4 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14be4:	      /----------> lea -76(sp),sp
   14be8:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14bea:	      |            movea.l 84(sp),a0
   14bee:	      |            move.l (a0),d0
   14bf0:	      |            moveq #10,d1
   14bf2:	      |            cmp.l d0,d1
   14bf4:	/-----|----------- bcs.w 14e92 <getTextFromAnyVar+0x2ae>
   14bf8:	|     |            add.l d0,d0
   14bfa:	|     |            movea.l d0,a0
   14bfc:	|     |            adda.l #85000,a0
   14c02:	|     |            move.w (a0),d0
   14c04:	|     |            jmp (14c08 <getTextFromAnyVar+0x24>,pc,d0.w)
   14c08:	|     |            .short 0x028a
   14c0a:	|     |            bset d0,(a0)+
   14c0c:	|     |            .short 0x028a
   14c0e:	|     |            ori.b #-118,(a6)
   14c12:	|     |            andi.b #8,ccr
   14c16:	|     |            andi.w #650,-(a0)
   14c1a:	|     |            .short 0x028a
   14c1c:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14c22:	|     |            move.l 4(a0),d0
   14c26:	|     |            move.l d0,-(sp)
   14c28:	|     |            jsr b8 <copyString>
   14c2e:	|     |            addq.l #4,sp
   14c30:	|  /--|----------- bra.w 14eb4 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14c34:	|  |  |            pea 19d38 <graphics.c.1c13408a+0x288>
   14c3a:	|  |  |            jsr b8 <copyString>
   14c40:	|  |  |            addq.l #4,sp
   14c42:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14c46:	|  |  |            clr.l 72(sp)
   14c4a:	|  |  |     /----- bra.w 14cf4 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14c4e:	|  |  |  /--|----> pea 19d3e <graphics.c.1c13408a+0x28e>
   14c54:	|  |  |  |  |      move.l 80(sp),-(sp)
   14c58:	|  |  |  |  |      jsr 13b3a <joinStrings>
   14c5e:	|  |  |  |  |      addq.l #8,sp
   14c60:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14c64:	|  |  |  |  |  /-- bne.s 14c6c <getTextFromAnyVar+0x88>
   14c66:	|  |  |  |  |  |   moveq #0,d0
   14c68:	|  +--|--|--|--|-- bra.w 14eb4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14c6c:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14c72:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14c78:	|  |  |  |  |      movea.l d0,a6
   14c7a:	|  |  |  |  |      movea.l 56(sp),a1
   14c7e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14c82:	|  |  |  |  |      movea.l 84(sp),a0
   14c86:	|  |  |  |  |      movea.l 4(a0),a0
   14c8a:	|  |  |  |  |      move.l (a0),d1
   14c8c:	|  |  |  |  |      move.l 72(sp),d0
   14c90:	|  |  |  |  |      lsl.l #3,d0
   14c92:	|  |  |  |  |      add.l d1,d0
   14c94:	|  |  |  |  |      move.l d0,-(sp)
   14c96:	|  |  +--|--|----- jsr 14be4 <getTextFromAnyVar>(pc)
   14c9a:	|  |  |  |  |      addq.l #4,sp
   14c9c:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14ca0:	|  |  |  |  |      move.l 52(sp),-(sp)
   14ca4:	|  |  |  |  |      move.l 64(sp),-(sp)
   14ca8:	|  |  |  |  |      jsr 13b3a <joinStrings>
   14cae:	|  |  |  |  |      addq.l #8,sp
   14cb0:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14cb4:	|  |  |  |  |  /-- bne.s 14cbc <getTextFromAnyVar+0xd8>
   14cb6:	|  |  |  |  |  |   moveq #0,d0
   14cb8:	|  +--|--|--|--|-- bra.w 14eb4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14cbc:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14cc2:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14cc8:	|  |  |  |  |      movea.l d0,a6
   14cca:	|  |  |  |  |      movea.l 48(sp),a1
   14cce:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14cd2:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14cd6:	|  |  |  |  |      move.l 60(sp),44(sp)
   14cdc:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14ce2:	|  |  |  |  |      movea.l d0,a6
   14ce4:	|  |  |  |  |      movea.l 44(sp),a1
   14ce8:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14cec:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14cf0:	|  |  |  |  |      addq.l #1,72(sp)
   14cf4:	|  |  |  |  \----> movea.l 84(sp),a0
   14cf8:	|  |  |  |         movea.l 4(a0),a0
   14cfc:	|  |  |  |         move.l 4(a0),d0
   14d00:	|  |  |  |         cmp.l 72(sp),d0
   14d04:	|  |  |  \-------- bgt.w 14c4e <getTextFromAnyVar+0x6a>
			}
			return builder;
   14d08:	|  |  |            move.l 76(sp),d0
   14d0c:	|  +--|----------- bra.w 14eb4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14d10:	|  |  |            pea 19d40 <graphics.c.1c13408a+0x290>
   14d16:	|  |  |            jsr b8 <copyString>
   14d1c:	|  |  |            addq.l #4,sp
   14d1e:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14d22:	|  |  |            movea.l 84(sp),a0
   14d26:	|  |  |            movea.l 4(a0),a0
   14d2a:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14d2e:	|  |  |     /----- bra.w 14dd0 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14d32:	|  |  |  /--|----> pea 19d3e <graphics.c.1c13408a+0x28e>
   14d38:	|  |  |  |  |      move.l 72(sp),-(sp)
   14d3c:	|  |  |  |  |      jsr 13b3a <joinStrings>
   14d42:	|  |  |  |  |      addq.l #8,sp
   14d44:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14d48:	|  |  |  |  |  /-- bne.s 14d50 <getTextFromAnyVar+0x16c>
   14d4a:	|  |  |  |  |  |   moveq #0,d0
   14d4c:	|  +--|--|--|--|-- bra.w 14eb4 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14d50:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   14d56:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14d5c:	|  |  |  |  |      movea.l d0,a6
   14d5e:	|  |  |  |  |      movea.l 32(sp),a1
   14d62:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14d66:	|  |  |  |  |      move.l 64(sp),d0
   14d6a:	|  |  |  |  |      move.l d0,-(sp)
   14d6c:	|  |  \--|--|----- jsr 14be4 <getTextFromAnyVar>(pc)
   14d70:	|  |     |  |      addq.l #4,sp
   14d72:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14d76:	|  |     |  |      move.l 28(sp),-(sp)
   14d7a:	|  |     |  |      move.l 40(sp),-(sp)
   14d7e:	|  |     |  |      jsr 13b3a <joinStrings>
   14d84:	|  |     |  |      addq.l #8,sp
   14d86:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14d8a:	|  |     |  |  /-- bne.s 14d92 <getTextFromAnyVar+0x1ae>
   14d8c:	|  |     |  |  |   moveq #0,d0
   14d8e:	|  +-----|--|--|-- bra.w 14eb4 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14d92:	|  |     |  |  \-> move.l 28(sp),24(sp)
   14d98:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14d9e:	|  |     |  |      movea.l d0,a6
   14da0:	|  |     |  |      movea.l 24(sp),a1
   14da4:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14da8:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14dac:	|  |     |  |      move.l 36(sp),20(sp)
   14db2:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14db8:	|  |     |  |      movea.l d0,a6
   14dba:	|  |     |  |      movea.l 20(sp),a1
   14dbe:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14dc2:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14dc6:	|  |     |  |      movea.l 64(sp),a0
   14dca:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14dd0:	|  |     |  \----> tst.l 64(sp)
   14dd4:	|  |     \-------- bne.w 14d32 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14dd8:	|  |               move.l 68(sp),d0
   14ddc:	|  +-------------- bra.w 14eb4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14de0:	|  |               moveq #10,d0
   14de2:	|  |               move.l d0,16(sp)
   14de6:	|  |               clr.l 12(sp)
   14dea:	|  |               move.l 1a7a4 <SysBase>,d0
   14df0:	|  |               movea.l d0,a6
   14df2:	|  |               move.l 16(sp),d0
   14df6:	|  |               move.l 12(sp),d1
   14dfa:	|  |               jsr -684(a6)
   14dfe:	|  |               move.l d0,8(sp)
   14e02:	|  |               move.l 8(sp),d0
   14e06:	|  |               move.l d0,4(sp)
			if (! buff) {
   14e0a:	|  |           /-- bne.s 14e20 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14e0c:	|  |           |   pea 19d47 <graphics.c.1c13408a+0x297>
   14e12:	|  |           |   jsr 17036 <KPrintF>
   14e18:	|  |           |   addq.l #4,sp
				return NULL;
   14e1a:	|  |           |   moveq #0,d0
   14e1c:	|  +-----------|-- bra.w 14eb4 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14e20:	|  |           \-> movea.l 84(sp),a0
   14e24:	|  |               move.l 4(a0),d0
   14e28:	|  |               move.l d0,-(sp)
   14e2a:	|  |               pea 19d71 <graphics.c.1c13408a+0x2c1>
   14e30:	|  |               move.l 12(sp),-(sp)
   14e34:	|  |               jsr 13e18 <sprintf>
   14e3a:	|  |               lea 12(sp),sp
			return buff;
   14e3e:	|  |               move.l 4(sp),d0
   14e42:	|  +-------------- bra.s 14eb4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14e44:	|  |               movea.l 84(sp),a0
   14e48:	|  |               move.l 4(a0),d0
   14e4c:	|  |               move.l d0,-(sp)
   14e4e:	|  |               jsr 4038 <resourceNameFromNum>
   14e54:	|  |               addq.l #4,sp
   14e56:	|  |               move.l d0,-(sp)
   14e58:	|  |               pea 18786 <PutChar+0xc7c>
   14e5e:	|  |               jsr 13b3a <joinStrings>
   14e64:	|  |               addq.l #8,sp
   14e66:	|  +-------------- bra.s 14eb4 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14e68:	|  |               movea.l 84(sp),a0
   14e6c:	|  |               move.l 4(a0),d0
   14e70:	|  |               move.l d0,-(sp)
   14e72:	|  |               jsr d378 <findObjectType>
   14e78:	|  |               addq.l #4,sp
   14e7a:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14e7e:	+--|-------------- beq.s 14e92 <getTextFromAnyVar+0x2ae>
   14e80:	|  |               movea.l 40(sp),a0
   14e84:	|  |               move.l (a0),d0
   14e86:	|  |               move.l d0,-(sp)
   14e88:	|  |               jsr b8 <copyString>
   14e8e:	|  |               addq.l #4,sp
   14e90:	|  +-------------- bra.s 14eb4 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14e92:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14e94:	   |               movea.l 84(sp),a0
   14e98:	   |               move.l (a0),d0
   14e9a:	   |               add.l d0,d0
   14e9c:	   |               movea.l d0,a1
   14e9e:	   |               adda.l d0,a1
   14ea0:	   |               lea 1a680 <typeName>,a0
   14ea6:	   |               move.l (0,a1,a0.l),d0
   14eaa:	   |               move.l d0,-(sp)
   14eac:	   |               jsr b8 <copyString>
   14eb2:	   |               addq.l #4,sp
}
   14eb4:	   \-------------> movea.l (sp)+,a6
   14eb6:	                   lea 76(sp),sp
   14eba:	                   rts

00014ebc <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14ebc:	move.l 4(sp),-(sp)
   14ec0:	jsr 1485c <unlinkVar>
   14ec6:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   14ec8:	movea.l 4(sp),a0
   14ecc:	moveq #8,d0
   14ece:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14ed0:	movea.l 4(sp),a0
   14ed4:	move.l 8(sp),4(a0)
}
   14eda:	nop
   14edc:	rts

00014ede <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14ede:	move.l 4(sp),-(sp)
   14ee2:	jsr 1485c <unlinkVar>
   14ee8:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14eea:	movea.l 4(sp),a0
   14eee:	moveq #9,d0
   14ef0:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14ef2:	movea.l 4(sp),a0
   14ef6:	move.l 8(sp),4(a0)
}
   14efc:	nop
   14efe:	rts

00014f00 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   14f00:	move.l 4(sp),-(sp)
   14f04:	jsr 1485c <unlinkVar>
   14f0a:	addq.l #4,sp
	thisVar->varType = vT;
   14f0c:	movea.l 4(sp),a0
   14f10:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   14f14:	movea.l 4(sp),a0
   14f18:	move.l 12(sp),4(a0)
}
   14f1e:	nop
   14f20:	rts

00014f22 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14f22:	      /-- bra.s 14f34 <stackGetByIndex+0x12>
        vS = vS->next;
   14f24:	/-----|-> movea.l 4(sp),a0
   14f28:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14f2e:	|     +-- bne.s 14f34 <stackGetByIndex+0x12>
            return NULL;
   14f30:	|     |   moveq #0,d0
   14f32:	|  /--|-- bra.s 14f48 <stackGetByIndex+0x26>
    while (theIndex--) {
   14f34:	|  |  \-> move.l 8(sp),d0
   14f38:	|  |      move.l d0,d1
   14f3a:	|  |      subq.l #1,d1
   14f3c:	|  |      move.l d1,8(sp)
   14f40:	|  |      tst.l d0
   14f42:	\--|----- bne.s 14f24 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   14f44:	   |      move.l 4(sp),d0
}
   14f48:	   \----> rts

00014f4a <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14f4a:	          tst.l 4(sp)
   14f4e:	      /-- bne.s 14f5e <stackFindLast+0x14>
		return NULL;
   14f50:	      |   moveq #0,d0
   14f52:	/-----|-- bra.s 14f6c <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   14f54:	|  /--|-> movea.l 4(sp),a0
   14f58:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   14f5e:	|  |  \-> movea.l 4(sp),a0
   14f62:	|  |      move.l 8(a0),d0
   14f66:	|  \----- bne.s 14f54 <stackFindLast+0xa>

	return hunt;
   14f68:	|         move.l 4(sp),d0
}
   14f6c:	\-------> rts

00014f6e <stackSize>:

int stackSize (const struct stackHandler * me) {
   14f6e:	       subq.l #8,sp
	int r = 0;
   14f70:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   14f74:	       movea.l 12(sp),a0
   14f78:	       move.l (a0),(sp)
	while (a) {
   14f7a:	   /-- bra.s 14f86 <stackSize+0x18>
		r ++;
   14f7c:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   14f80:	|  |   movea.l (sp),a0
   14f82:	|  |   move.l 8(a0),(sp)
	while (a) {
   14f86:	|  \-> tst.l (sp)
   14f88:	\----- bne.s 14f7c <stackSize+0xe>
	}
	return r;
   14f8a:	       move.l 4(sp),d0
}
   14f8e:	       addq.l #8,sp
   14f90:	       rts

00014f92 <trimStack>:

void trimStack (struct variableStack ** stack) {
   14f92:	subq.l #8,sp
   14f94:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   14f96:	movea.l 16(sp),a0
   14f9a:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14f9e:	movea.l 16(sp),a0
   14fa2:	movea.l (a0),a0
   14fa4:	move.l 8(a0),d0
   14fa8:	movea.l 16(sp),a0
   14fac:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14fae:	move.l 8(sp),d0
   14fb2:	move.l d0,-(sp)
   14fb4:	jsr 1485c <unlinkVar>
   14fba:	addq.l #4,sp
	FreeVec(killMe);
   14fbc:	move.l 8(sp),4(sp)
   14fc2:	move.l 1a7a4 <SysBase>,d0
   14fc8:	movea.l d0,a6
   14fca:	movea.l 4(sp),a1
   14fce:	jsr -690(a6)
   14fd2:	nop
   14fd4:	movea.l (sp)+,a6
   14fd6:	addq.l #8,sp
   14fd8:	rts

00014fda <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14fda:	       lea -52(sp),sp
   14fde:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14fe0:	       pea 19d74 <graphics.c.1c13408a+0x2c4>
   14fe6:	       jsr 17036 <KPrintF>
   14fec:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14fee:	       moveq #68,d0
   14ff0:	       move.l d0,52(sp)
   14ff4:	       clr.l 48(sp)
   14ff8:	       move.l 1a7a4 <SysBase>,d0
   14ffe:	       movea.l d0,a6
   15000:	       move.l 52(sp),d0
   15004:	       move.l 48(sp),d1
   15008:	       jsr -684(a6)
   1500c:	       move.l d0,44(sp)
   15010:	       move.l 44(sp),d0
   15014:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   15018:	   /-- bne.s 15020 <freeze+0x46>
   1501a:	   |   clr.w d0
   1501c:	/--|-- bra.w 151aa <freeze+0x1d0>

	CstFreeze();
   15020:	|  \-> jsr 1c54 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15026:	|      move.l 1a840 <sceneWidth>,d0
   1502c:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   15030:	|      move.l 1a844 <sceneHeight>,d0
   15036:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   1503a:	|      move.l 1a840 <sceneWidth>,d0
   15040:	|      movea.l 40(sp),a0
   15044:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15048:	|      move.l 1a844 <sceneHeight>,d0
   1504e:	|      movea.l 40(sp),a0
   15052:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15056:	|      move.l 1a85e <cameraX>,d0
   1505c:	|      movea.l 40(sp),a0
   15060:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   15064:	|      move.l 1a862 <cameraY>,d0
   1506a:	|      movea.l 40(sp),a0
   1506e:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   15072:	|      move.l 1a142 <cameraZoom>,d0
   15078:	|      movea.l 40(sp),a0
   1507c:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   15080:	|      move.w #1,1a84c <backdropExists>

	newFreezer -> allPeople = allPeople;
   15088:	|      move.l 1a808 <allPeople>,d0
   1508e:	|      movea.l 40(sp),a0
   15092:	|      move.l d0,(a0)
	allPeople = NULL;
   15094:	|      clr.l 1a808 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   1509a:	|      moveq #42,d0
   1509c:	|      move.l d0,28(sp)
   150a0:	|      clr.l 24(sp)
   150a4:	|      move.l 1a7a4 <SysBase>,d0
   150aa:	|      movea.l d0,a6
   150ac:	|      move.l 28(sp),d0
   150b0:	|      move.l 24(sp),d1
   150b4:	|      jsr -684(a6)
   150b8:	|      move.l d0,20(sp)
   150bc:	|      move.l 20(sp),d0
   150c0:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   150c4:	|  /-- bne.s 150cc <freeze+0xf2>
   150c6:	|  |   clr.w d0
   150c8:	+--|-- bra.w 151aa <freeze+0x1d0>

	newFreezer -> allScreenRegions = allScreenRegions;
   150cc:	|  \-> move.l 1a8b4 <allScreenRegions>,d0
   150d2:	|      movea.l 40(sp),a0
   150d6:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   150da:	|      clr.l 1a8b4 <allScreenRegions>
	overRegion = NULL;
   150e0:	|      clr.l 1a8b8 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   150e6:	|      move.l 1a6aa <mouseCursorAnim>,d0
   150ec:	|      movea.l 40(sp),a0
   150f0:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   150f4:	|      move.l 1a6ae <mouseCursorFrameNum>,d0
   150fa:	|      movea.l 40(sp),a0
   150fe:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   15102:	|      jsr abe8 <makeNullAnim>
   15108:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   1510e:	|      clr.l 1a6ae <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   15114:	|      move.l 1a804 <zBuffer>,d0
   1511a:	|      movea.l 40(sp),a0
   1511e:	|      move.l d0,60(a0)
	zBuffer = NULL;
   15122:	|      clr.l 1a804 <zBuffer>

	newFreezer -> speech = speech;
   15128:	|      move.l 1a800 <speech>,d0
   1512e:	|      movea.l 40(sp),a0
   15132:	|      move.l d0,20(a0)
	initSpeech ();
   15136:	|      jsr 7dde <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1513c:	|      moveq #28,d0
   1513e:	|      move.l d0,12(sp)
   15142:	|      clr.l 8(sp)
   15146:	|      move.l 1a7a4 <SysBase>,d0
   1514c:	|      movea.l d0,a6
   1514e:	|      move.l 12(sp),d0
   15152:	|      move.l 8(sp),d1
   15156:	|      jsr -684(a6)
   1515a:	|      move.l d0,4(sp)
   1515e:	|      move.l 4(sp),d0
   15162:	|      movea.l 40(sp),a0
   15166:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   1516a:	|      movea.l 40(sp),a0
   1516e:	|      move.l 28(a0),d0
   15172:	|  /-- bne.s 15178 <freeze+0x19e>
   15174:	|  |   clr.w d0
   15176:	+--|-- bra.s 151aa <freeze+0x1d0>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   15178:	|  \-> movea.l 40(sp),a0
   1517c:	|      move.l 28(a0),d0
   15180:	|      pea 1c <_start+0x1c>
   15184:	|      clr.l -(sp)
   15186:	|      move.l d0,-(sp)
   15188:	|      jsr 16fba <memset>
   1518e:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   15192:	|      move.l 1a898 <frozenStuff>,d0
   15198:	|      movea.l 40(sp),a0
   1519c:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   151a0:	|      move.l 40(sp),1a898 <frozenStuff>

	return TRUE;
   151a8:	|      moveq #1,d0
}
   151aa:	\----> movea.l (sp)+,a6
   151ac:	       lea 52(sp),sp
   151b0:	       rts

000151b2 <unfreeze>:

void unfreeze () {
   151b2:	       lea -16(sp),sp
   151b6:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   151b8:	       move.l 1a898 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   151c0:	       move.l 1a898 <frozenStuff>,d0
   151c6:	/----- beq.w 153fe <unfreeze+0x24c>

	CstUnfreeze();
   151ca:	|      jsr 3c30 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   151d0:	|      movea.l 1a898 <frozenStuff>,a0
   151d6:	|      move.l 48(a0),d0
   151da:	|      move.l d0,1a840 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   151e0:	|      movea.l 1a898 <frozenStuff>,a0
   151e6:	|      move.l 52(a0),d0
   151ea:	|      move.l d0,1a844 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   151f0:	|      movea.l 1a898 <frozenStuff>,a0
   151f6:	|      move.l 40(a0),d0
   151fa:	|      move.l d0,1a85e <cameraX>
	cameraY = frozenStuff -> cameraY;
   15200:	|      movea.l 1a898 <frozenStuff>,a0
   15206:	|      move.l 44(a0),d0
   1520a:	|      move.l d0,1a862 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   15210:	|      move.l 1a760 <input+0xa>,d0
   15216:	|      move.l d0,-(sp)
   15218:	|      jsr 17472 <__floatsisf>
   1521e:	|      addq.l #4,sp
   15220:	|      move.l d0,d1
   15222:	|      move.l 1a142 <cameraZoom>,d0
   15228:	|      move.l d0,-(sp)
   1522a:	|      move.l d1,-(sp)
   1522c:	|      jsr 17524 <__mulsf3>
   15232:	|      addq.l #8,sp
   15234:	|      move.l d0,-(sp)
   15236:	|      jsr 1740a <__fixsfsi>
   1523c:	|      addq.l #4,sp
   1523e:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15244:	|      move.l 1a764 <input+0xe>,d0
   1524a:	|      move.l d0,-(sp)
   1524c:	|      jsr 17472 <__floatsisf>
   15252:	|      addq.l #4,sp
   15254:	|      move.l d0,d1
   15256:	|      move.l 1a142 <cameraZoom>,d0
   1525c:	|      move.l d0,-(sp)
   1525e:	|      move.l d1,-(sp)
   15260:	|      jsr 17524 <__mulsf3>
   15266:	|      addq.l #8,sp
   15268:	|      move.l d0,-(sp)
   1526a:	|      jsr 1740a <__fixsfsi>
   15270:	|      addq.l #4,sp
   15272:	|      move.l d0,1a764 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15278:	|      movea.l 1a898 <frozenStuff>,a0
   1527e:	|      move.l 56(a0),d0
   15282:	|      move.l d0,1a142 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15288:	|      move.l 1a760 <input+0xa>,d0
   1528e:	|      move.l d0,-(sp)
   15290:	|      jsr 17472 <__floatsisf>
   15296:	|      addq.l #4,sp
   15298:	|      move.l d0,d1
   1529a:	|      move.l 1a142 <cameraZoom>,d0
   152a0:	|      move.l d0,-(sp)
   152a2:	|      move.l d1,-(sp)
   152a4:	|      jsr 1731e <__divsf3>
   152aa:	|      addq.l #8,sp
   152ac:	|      move.l d0,-(sp)
   152ae:	|      jsr 1740a <__fixsfsi>
   152b4:	|      addq.l #4,sp
   152b6:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   152bc:	|      move.l 1a764 <input+0xe>,d0
   152c2:	|      move.l d0,-(sp)
   152c4:	|      jsr 17472 <__floatsisf>
   152ca:	|      addq.l #4,sp
   152cc:	|      move.l d0,d1
   152ce:	|      move.l 1a142 <cameraZoom>,d0
   152d4:	|      move.l d0,-(sp)
   152d6:	|      move.l d1,-(sp)
   152d8:	|      jsr 1731e <__divsf3>
   152de:	|      addq.l #8,sp
   152e0:	|      move.l d0,-(sp)
   152e2:	|      jsr 1740a <__fixsfsi>
   152e8:	|      addq.l #4,sp
   152ea:	|      move.l d0,1a764 <input+0xe>

	killAllPeople ();
   152f0:	|      jsr a8f0 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   152f6:	|      movea.l 1a898 <frozenStuff>,a0
   152fc:	|      move.l (a0),d0
   152fe:	|      move.l d0,1a808 <allPeople>

	killAllRegions ();
   15304:	|      jsr 15886 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   1530a:	|      movea.l 1a898 <frozenStuff>,a0
   15310:	|      move.l 4(a0),d0
   15314:	|      move.l d0,1a8b4 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   1531a:	|      move.l 1a6aa <mouseCursorAnim>,d0
   15320:	|      move.l d0,-(sp)
   15322:	|      jsr 97e4 <deleteAnim>
   15328:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   1532a:	|      movea.l 1a898 <frozenStuff>,a0
   15330:	|      move.l 32(a0),d0
   15334:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   1533a:	|      movea.l 1a898 <frozenStuff>,a0
   15340:	|      move.l 36(a0),d0
   15344:	|      move.l d0,1a6ae <mouseCursorFrameNum>

	killZBuffer ();
   1534a:	|      jsr 8652 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   15350:	|      movea.l 1a898 <frozenStuff>,a0
   15356:	|      move.l 60(a0),d0
   1535a:	|      move.l d0,1a804 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   15360:	|      move.l 1a11c <currentEvents>,d0
   15366:	|  /-- beq.s 15380 <unfreeze+0x1ce>
   15368:	|  |   move.l 1a11c <currentEvents>,12(sp)
   15370:	|  |   move.l 1a7a4 <SysBase>,d0
   15376:	|  |   movea.l d0,a6
   15378:	|  |   movea.l 12(sp),a1
   1537c:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   15380:	|  \-> movea.l 1a898 <frozenStuff>,a0
   15386:	|      move.l 28(a0),d0
   1538a:	|      move.l d0,1a11c <currentEvents>

	killAllSpeech ();
   15390:	|      jsr 7e76 <killAllSpeech>
	if (speech) FreeVec(speech);
   15396:	|      move.l 1a800 <speech>,d0
   1539c:	|  /-- beq.s 153b6 <unfreeze+0x204>
   1539e:	|  |   move.l 1a800 <speech>,8(sp)
   153a6:	|  |   move.l 1a7a4 <SysBase>,d0
   153ac:	|  |   movea.l d0,a6
   153ae:	|  |   movea.l 8(sp),a1
   153b2:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   153b6:	|  \-> movea.l 1a898 <frozenStuff>,a0
   153bc:	|      move.l 20(a0),d0
   153c0:	|      move.l d0,1a800 <speech>

	frozenStuff = frozenStuff -> next;
   153c6:	|      movea.l 1a898 <frozenStuff>,a0
   153cc:	|      move.l 64(a0),d0
   153d0:	|      move.l d0,1a898 <frozenStuff>

	overRegion = NULL;
   153d6:	|      clr.l 1a8b8 <overRegion>
	if (killMe) FreeVec(killMe);
   153dc:	|      tst.l 16(sp)
   153e0:	|  /-- beq.s 153f8 <unfreeze+0x246>
   153e2:	|  |   move.l 16(sp),4(sp)
   153e8:	|  |   move.l 1a7a4 <SysBase>,d0
   153ee:	|  |   movea.l d0,a6
   153f0:	|  |   movea.l 4(sp),a1
   153f4:	|  |   jsr -690(a6)
	killMe = NULL;
   153f8:	|  \-> clr.l 16(sp)
   153fc:	|  /-- bra.s 15400 <unfreeze+0x24e>
	if (! frozenStuff) return;
   153fe:	\--|-> nop
}
   15400:	   \-> movea.l (sp)+,a6
   15402:	       lea 16(sp),sp
   15406:	       rts

00015408 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15408:	pea 19d86 <graphics.c.1c13408a+0x2d6>
   1540e:	jsr 17036 <KPrintF>
   15414:	addq.l #4,sp
	return FALSE;
   15416:	clr.w d0
}
   15418:	rts

0001541a <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   1541a:	          lea -44(sp),sp
   1541e:	          move.l a6,-(sp)
   15420:	          move.l d2,-(sp)
	unsigned int a = 0;
   15422:	          clr.l 48(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15426:	          move.l 1a8a4 <fontOrderString>,d0
   1542c:	      /-- beq.s 15446 <loadFont+0x2c>
   1542e:	      |   move.l 1a8a4 <fontOrderString>,36(sp)
   15436:	      |   move.l 1a7a4 <SysBase>,d0
   1543c:	      |   movea.l d0,a6
   1543e:	      |   movea.l 36(sp),a1
   15442:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15446:	      \-> move.l 60(sp),-(sp)
   1544a:	          jsr b8 <copyString>
   15450:	          addq.l #4,sp
   15452:	          move.l d0,1a8a4 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);
   15458:	          move.l 1a8b0 <theFont>,d0
   1545e:	      /-- beq.s 15470 <loadFont+0x56>
   15460:	      |   move.l 1a8b0 <theFont>,d0
   15466:	      |   move.l d0,-(sp)
   15468:	      |   jsr 8956 <forgetSpriteBank>
   1546e:	      |   addq.l #4,sp
	theFont = AllocVec( sizeof(struct loadedSpriteBank), MEMF_ANY );
   15470:	      \-> moveq #26,d0
   15472:	          move.l d0,32(sp)
   15476:	          clr.l 28(sp)
   1547a:	          move.l 1a7a4 <SysBase>,d0
   15480:	          movea.l d0,a6
   15482:	          move.l 32(sp),d0
   15486:	          move.l 28(sp),d1
   1548a:	          jsr -684(a6)
   1548e:	          move.l d0,24(sp)
   15492:	          move.l 24(sp),d0
   15496:	          move.l d0,1a8b0 <theFont>

	loadedFontNum = filenum;
   1549c:	          move.l 56(sp),1a8a0 <loadedFontNum>

	fontTableSize = 0;
   154a4:	          clr.l 1a8ac <fontTableSize>
	char *tmp = charOrder;
   154aa:	          move.l 60(sp),44(sp)
	while (*tmp) {        
   154b0:	   /----- bra.s 154ec <loadFont+0xd2>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   154b2:	/--|----> movea.l 44(sp),a0
   154b6:	|  |      move.b (a0),d0
   154b8:	|  |      ext.w d0
   154ba:	|  |      movea.w d0,a0
   154bc:	|  |      move.l 1a8ac <fontTableSize>,d0
   154c2:	|  |      move.l d0,d0
   154c4:	|  |      move.b d0,d0
   154c6:	|  |      andi.l #255,d0
   154cc:	|  |      cmp.l a0,d0
   154ce:	|  |  /-- bge.s 154e0 <loadFont+0xc6>
   154d0:	|  |  |   movea.l 44(sp),a0
   154d4:	|  |  |   move.b (a0),d0
   154d6:	|  |  |   ext.w d0
   154d8:	|  |  |   movea.w d0,a0
   154da:	|  |  |   move.l a0,1a8ac <fontTableSize>
		*tmp++;
   154e0:	|  |  \-> move.l 44(sp),d0
   154e4:	|  |      move.l d0,d1
   154e6:	|  |      addq.l #1,d1
   154e8:	|  |      move.l d1,44(sp)
	while (*tmp) {        
   154ec:	|  \----> movea.l 44(sp),a0
   154f0:	|         move.b (a0),d0
   154f2:	\-------- bne.s 154b2 <loadFont+0x98>
	}
	fontTableSize++;
   154f4:	          move.l 1a8ac <fontTableSize>,d0
   154fa:	          addq.l #1,d0
   154fc:	          move.l d0,1a8ac <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15502:	          move.l 1a8a8 <fontTable>,d0
   15508:	      /-- beq.s 15522 <loadFont+0x108>
   1550a:	      |   move.l 1a8a8 <fontTable>,20(sp)
   15512:	      |   move.l 1a7a4 <SysBase>,d0
   15518:	      |   movea.l d0,a6
   1551a:	      |   movea.l 20(sp),a1
   1551e:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15522:	      \-> move.l 1a8ac <fontTableSize>,d0
   15528:	          add.l d0,d0
   1552a:	          add.l d0,d0
   1552c:	          move.l d0,16(sp)
   15530:	          clr.l 12(sp)
   15534:	          move.l 1a7a4 <SysBase>,d0
   1553a:	          movea.l d0,a6
   1553c:	          move.l 16(sp),d0
   15540:	          move.l 12(sp),d1
   15544:	          jsr -684(a6)
   15548:	          move.l d0,8(sp)
   1554c:	          move.l 8(sp),d0
   15550:	          move.l d0,1a8a8 <fontTable>
	if (!fontTable) return FALSE;
   15556:	          move.l 1a8a8 <fontTable>,d0
   1555c:	      /-- bne.s 15564 <loadFont+0x14a>
   1555e:	      |   clr.w d0
   15560:	/-----|-- bra.w 15610 <loadFont+0x1f6>

	for (a = 0;  a < fontTableSize; a++) {
   15564:	|     \-> clr.l 48(sp)
   15568:	|     /-- bra.s 15582 <loadFont+0x168>
		fontTable[a] = 0;
   1556a:	|  /--|-> move.l 1a8a8 <fontTable>,d1
   15570:	|  |  |   move.l 48(sp),d0
   15574:	|  |  |   add.l d0,d0
   15576:	|  |  |   add.l d0,d0
   15578:	|  |  |   movea.l d1,a0
   1557a:	|  |  |   adda.l d0,a0
   1557c:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   1557e:	|  |  |   addq.l #1,48(sp)
   15582:	|  |  \-> move.l 1a8ac <fontTableSize>,d0
   15588:	|  |      cmp.l 48(sp),d0
   1558c:	|  \----- bhi.s 1556a <loadFont+0x150>
	}
	a = 0;
   1558e:	|         clr.l 48(sp)
	int i = 0;
   15592:	|         clr.l 40(sp)
	tmp = charOrder;
   15596:	|         move.l 60(sp),44(sp)
	while (*tmp) {
   1559c:	|     /-- bra.s 155cc <loadFont+0x1b2>
		fontTable[*tmp++] = i;
   1559e:	|  /--|-> move.l 1a8a8 <fontTable>,d1
   155a4:	|  |  |   move.l 44(sp),d0
   155a8:	|  |  |   move.l d0,d2
   155aa:	|  |  |   addq.l #1,d2
   155ac:	|  |  |   move.l d2,44(sp)
   155b0:	|  |  |   movea.l d0,a0
   155b2:	|  |  |   move.b (a0),d0
   155b4:	|  |  |   ext.w d0
   155b6:	|  |  |   movea.w d0,a0
   155b8:	|  |  |   move.l a0,d0
   155ba:	|  |  |   add.l a0,d0
   155bc:	|  |  |   add.l d0,d0
   155be:	|  |  |   movea.l d1,a0
   155c0:	|  |  |   adda.l d0,a0
   155c2:	|  |  |   move.l 40(sp),d0
   155c6:	|  |  |   move.l d0,(a0)
		i++;
   155c8:	|  |  |   addq.l #1,40(sp)
	while (*tmp) {
   155cc:	|  |  \-> movea.l 44(sp),a0
   155d0:	|  |      move.b (a0),d0
   155d2:	|  \----- bne.s 1559e <loadFont+0x184>
	}

	if (!loadSpriteBank(filenum, &theFont->bank, TRUE)) {
   155d4:	|         move.l 1a8b0 <theFont>,d0
   155da:	|         addq.l #8,d0
   155dc:	|         pea 1 <_start+0x1>
   155e0:	|         move.l d0,-(sp)
   155e2:	|         move.l 64(sp),-(sp)
   155e6:	|         jsr 8a78 <loadSpriteBank>
   155ec:	|         lea 12(sp),sp
   155f0:	|         tst.w d0
   155f2:	|     /-- bne.s 15606 <loadFont+0x1ec>
		KPrintF("loadFont: Can't load font");
   155f4:	|     |   pea 19dad <graphics.c.1c13408a+0x2fd>
   155fa:	|     |   jsr 17036 <KPrintF>
   15600:	|     |   addq.l #4,sp
		return FALSE;
   15602:	|     |   clr.w d0
   15604:	+-----|-- bra.s 15610 <loadFont+0x1f6>
	}
	fontHeight = h;
   15606:	|     \-> move.l 64(sp),1a89c <fontHeight>
	return TRUE;
   1560e:	|         moveq #1,d0
}
   15610:	\-------> move.l (sp)+,d2
   15612:	          movea.l (sp)+,a6
   15614:	          lea 44(sp),sp
   15618:	          rts

0001561a <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   1561a:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   1561e:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15622:	                move.l 1a8ac <fontTableSize>,d0
   15628:	/-------------- beq.w 156f0 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   1562c:	|               move.w 1a6a8 <fontSpace>,d0
   15632:	|               asr.w #1,d0
   15634:	|               ext.l d0
   15636:	|               add.l d0,20(sp)
	char *tmp = theText;
   1563a:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15640:	|     /-------- bra.w 156e4 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15644:	|  /--|-------> movea.l 1a8b0 <theFont>,a0
   1564a:	|  |  |         movea.l 16(a0),a0
   1564e:	|  |  |         movea.l 8(sp),a1
   15652:	|  |  |         move.b (a1),d0
   15654:	|  |  |         move.b d0,d0
   15656:	|  |  |         andi.l #255,d0
   1565c:	|  |  |         move.l 1a8ac <fontTableSize>,d1
   15662:	|  |  |         cmp.l d0,d1
   15664:	|  |  |  /----- bls.s 15690 <pasteStringToBackdrop+0x76>
   15666:	|  |  |  |      move.l 1a8a8 <fontTable>,d1
   1566c:	|  |  |  |      movea.l 8(sp),a1
   15670:	|  |  |  |      move.b (a1),d0
   15672:	|  |  |  |      move.b d0,d0
   15674:	|  |  |  |      andi.l #255,d0
   1567a:	|  |  |  |      add.l d0,d0
   1567c:	|  |  |  |      add.l d0,d0
   1567e:	|  |  |  |      movea.l d1,a1
   15680:	|  |  |  |      adda.l d0,a1
   15682:	|  |  |  |      move.l (a1),d1
   15684:	|  |  |  |      move.l d1,d0
   15686:	|  |  |  |      lsl.l #3,d0
   15688:	|  |  |  |      sub.l d1,d0
   1568a:	|  |  |  |      add.l d0,d0
   1568c:	|  |  |  |      add.l d0,d0
   1568e:	|  |  |  |  /-- bra.s 15692 <pasteStringToBackdrop+0x78>
   15690:	|  |  |  \--|-> moveq #0,d0
   15692:	|  |  |     \-> adda.l d0,a0
   15694:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15696:	|  |  |         move.l 24(sp),d1
   1569a:	|  |  |         movea.l (sp),a0
   1569c:	|  |  |         move.l 12(a0),d0
   156a0:	|  |  |         move.l d0,d0
   156a2:	|  |  |         sub.w d0,d1
   156a4:	|  |  |         move.w d1,d0
   156a6:	|  |  |         movea.w d0,a1
   156a8:	|  |  |         move.l 20(sp),d1
   156ac:	|  |  |         movea.l (sp),a0
   156ae:	|  |  |         move.l 8(a0),d0
   156b2:	|  |  |         move.l d0,d0
   156b4:	|  |  |         sub.w d0,d1
   156b6:	|  |  |         move.w d1,d0
   156b8:	|  |  |         movea.w d0,a0
   156ba:	|  |  |         move.l a1,-(sp)
   156bc:	|  |  |         move.l a0,-(sp)
   156be:	|  |  |         move.l 8(sp),-(sp)
   156c2:	|  |  |         jsr 22f6 <CstPasteChar>
   156c8:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   156cc:	|  |  |         movea.l (sp),a0
   156ce:	|  |  |         move.l (a0),d1
   156d0:	|  |  |         move.w 1a6a8 <fontSpace>,d0
   156d6:	|  |  |         movea.w d0,a0
   156d8:	|  |  |         move.l d1,d0
   156da:	|  |  |         add.l a0,d0
   156dc:	|  |  |         add.l d0,20(sp)
		tmp++;
   156e0:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   156e4:	|  |  \-------> movea.l 8(sp),a0
   156e8:	|  |            move.b (a0),d0
   156ea:	|  \----------- bne.w 15644 <pasteStringToBackdrop+0x2a>
   156ee:	|           /-- bra.s 156f2 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   156f0:	\-----------|-> nop
    }
}
   156f2:	            \-> lea 12(sp),sp
   156f6:	                rts

000156f8 <stringWidth>:


int stringWidth (char * theText) {
   156f8:	       subq.l #8,sp
	int a = 0;
   156fa:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   156fe:	       clr.l (sp)

	if (! fontTableSize) return 0;
   15700:	       move.l 1a8ac <fontTableSize>,d0
   15706:	/----- bne.s 1570c <stringWidth+0x14>
   15708:	|      moveq #0,d0
   1570a:	|  /-- bra.s 1570e <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   1570c:	\--|-> move.l (sp),d0
}
   1570e:	   \-> addq.l #8,sp
   15710:	       rts

00015712 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15712:	       lea -16(sp),sp
   15716:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15718:	       moveq #36,d0
   1571a:	       move.l d0,16(sp)
   1571e:	       clr.l 12(sp)
   15722:	       move.l 1a7a4 <SysBase>,d0
   15728:	       movea.l d0,a6
   1572a:	       move.l 16(sp),d0
   1572e:	       move.l 12(sp),d1
   15732:	       jsr -684(a6)
   15736:	       move.l d0,8(sp)
   1573a:	       move.l 8(sp),d0
   1573e:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15742:	   /-- bne.s 1574a <addScreenRegion+0x38>
   15744:	   |   clr.w d0
   15746:	/--|-- bra.w 157ca <addScreenRegion+0xb8>
    newRegion->di = di;
   1574a:	|  \-> movea.l 4(sp),a0
   1574e:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15754:	|      movea.l 4(sp),a0
   15758:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1575c:	|      movea.l 4(sp),a0
   15760:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15766:	|      movea.l 4(sp),a0
   1576a:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15770:	|      movea.l 4(sp),a0
   15774:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1577a:	|      movea.l 4(sp),a0
   1577e:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15784:	|      movea.l 4(sp),a0
   15788:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   1578e:	|      move.l 52(sp),-(sp)
   15792:	|      jsr d468 <loadObjectType>
   15798:	|      addq.l #4,sp
   1579a:	|      movea.l 4(sp),a0
   1579e:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   157a2:	|      move.l 1a8b4 <allScreenRegions>,d0
   157a8:	|      movea.l 4(sp),a0
   157ac:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   157b0:	|      move.l 4(sp),1a8b4 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   157b8:	|      movea.l 4(sp),a0
   157bc:	|      move.l 28(a0),d0
   157c0:	|      sne d0
   157c2:	|      neg.b d0
   157c4:	|      move.b d0,d0
   157c6:	|      andi.w #255,d0
}
   157ca:	\----> movea.l (sp)+,a6
   157cc:	       lea 16(sp),sp
   157d0:	       rts

000157d2 <getOverRegion>:

void getOverRegion () {
   157d2:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   157d4:	             move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   157da:	   /-------- bra.s 15848 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   157dc:	/--|-------> move.l 1a760 <input+0xa>,d0
   157e2:	|  |         movea.l (sp),a0
   157e4:	|  |         movea.l (a0),a0
   157e6:	|  |         move.l 1a85e <cameraX>,d1
   157ec:	|  |         suba.l d1,a0
   157ee:	|  |         cmpa.l d0,a0
   157f0:	|  |  /----- bgt.s 15842 <getOverRegion+0x70>
   157f2:	|  |  |      move.l 1a764 <input+0xe>,d0
   157f8:	|  |  |      movea.l (sp),a0
   157fa:	|  |  |      movea.l 4(a0),a0
   157fe:	|  |  |      move.l 1a862 <cameraY>,d1
   15804:	|  |  |      suba.l d1,a0
   15806:	|  |  |      cmpa.l d0,a0
   15808:	|  |  +----- bgt.s 15842 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   1580a:	|  |  |      move.l 1a760 <input+0xa>,d0
   15810:	|  |  |      movea.l (sp),a0
   15812:	|  |  |      movea.l 8(a0),a0
   15816:	|  |  |      move.l 1a85e <cameraX>,d1
   1581c:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1581e:	|  |  |      cmpa.l d0,a0
   15820:	|  |  +----- blt.s 15842 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15822:	|  |  |      move.l 1a764 <input+0xe>,d0
   15828:	|  |  |      movea.l (sp),a0
   1582a:	|  |  |      movea.l 12(a0),a0
   1582e:	|  |  |      move.l 1a862 <cameraY>,d1
   15834:	|  |  |      suba.l d1,a0
   15836:	|  |  |      cmpa.l d0,a0
   15838:	|  |  +----- blt.s 15842 <getOverRegion+0x70>
			overRegion = thisRegion;
   1583a:	|  |  |      move.l (sp),1a8b8 <overRegion>
			return;
   15840:	|  |  |  /-- bra.s 15854 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15842:	|  |  \--|-> movea.l (sp),a0
   15844:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15848:	|  \-----|-> tst.l (sp)
   1584a:	\--------|-- bne.s 157dc <getOverRegion+0xa>
	}
	overRegion = NULL;
   1584c:	         |   clr.l 1a8b8 <overRegion>
	return;
   15852:	         |   nop
}
   15854:	         \-> addq.l #4,sp
   15856:	             rts

00015858 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15858:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1585a:	             move.l 1a8b4 <allScreenRegions>,(sp)

	while (thisRegion) {
   15860:	   /-------- bra.s 1587c <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15862:	/--|-------> movea.l (sp),a0
   15864:	|  |         movea.l 28(a0),a0
   15868:	|  |         move.l 4(a0),d0
   1586c:	|  |         cmp.l 8(sp),d0
   15870:	|  |     /-- bne.s 15876 <getRegionForObject+0x1e>
			return thisRegion;
   15872:	|  |     |   move.l (sp),d0
   15874:	|  |  /--|-- bra.s 15882 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15876:	|  |  |  \-> movea.l (sp),a0
   15878:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1587c:	|  \--|----> tst.l (sp)
   1587e:	\-----|----- bne.s 15862 <getRegionForObject+0xa>
	}

	return NULL;
   15880:	      |      moveq #0,d0
}
   15882:	      \----> addq.l #4,sp
   15884:	             rts

00015886 <killAllRegions>:

void killAllRegions () {
   15886:	       subq.l #8,sp
   15888:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1588a:	   /-- bra.s 158cc <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1588c:	/--|-> move.l 1a8b4 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15894:	|  |   movea.l 1a8b4 <allScreenRegions>,a0
   1589a:	|  |   move.l 32(a0),d0
   1589e:	|  |   move.l d0,1a8b4 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   158a4:	|  |   movea.l 8(sp),a0
   158a8:	|  |   move.l 28(a0),d0
   158ac:	|  |   move.l d0,-(sp)
   158ae:	|  |   jsr d720 <removeObjectType>
   158b4:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   158b6:	|  |   move.l 8(sp),4(sp)
   158bc:	|  |   move.l 1a7a4 <SysBase>,d0
   158c2:	|  |   movea.l d0,a6
   158c4:	|  |   movea.l 4(sp),a1
   158c8:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   158cc:	|  \-> move.l 1a8b4 <allScreenRegions>,d0
   158d2:	\----- bne.s 1588c <killAllRegions+0x6>
	}
	overRegion = NULL;
   158d4:	       clr.l 1a8b8 <overRegion>
}
   158da:	       nop
   158dc:	       movea.l (sp)+,a6
   158de:	       addq.l #8,sp
   158e0:	       rts

000158e2 <loadRegions>:

void loadRegions (BPTR fp) {
   158e2:	       lea -24(sp),sp
   158e6:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   158e8:	       move.l 32(sp),-(sp)
   158ec:	       jsr 6bc <get2bytes>
   158f2:	       addq.l #4,sp
   158f4:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   158f8:	       move.l #108724,20(sp)

	while (numRegions --) {
   15900:	   /-- bra.w 159de <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15904:	/--|-> moveq #36,d0
   15906:	|  |   move.l d0,16(sp)
   1590a:	|  |   clr.l 12(sp)
   1590e:	|  |   move.l 1a7a4 <SysBase>,d0
   15914:	|  |   movea.l d0,a6
   15916:	|  |   move.l 16(sp),d0
   1591a:	|  |   move.l 12(sp),d1
   1591e:	|  |   jsr -684(a6)
   15922:	|  |   move.l d0,8(sp)
   15926:	|  |   move.l 8(sp),d0
   1592a:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   1592e:	|  |   movea.l 20(sp),a0
   15932:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15936:	|  |   moveq #32,d1
   15938:	|  |   add.l 4(sp),d1
   1593c:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15940:	|  |   move.l 32(sp),-(sp)
   15944:	|  |   jsr 6bc <get2bytes>
   1594a:	|  |   addq.l #4,sp
   1594c:	|  |   movea.l 4(sp),a0
   15950:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15952:	|  |   move.l 32(sp),-(sp)
   15956:	|  |   jsr 6bc <get2bytes>
   1595c:	|  |   addq.l #4,sp
   1595e:	|  |   movea.l 4(sp),a0
   15962:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15966:	|  |   move.l 32(sp),-(sp)
   1596a:	|  |   jsr 6bc <get2bytes>
   15970:	|  |   addq.l #4,sp
   15972:	|  |   movea.l 4(sp),a0
   15976:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1597a:	|  |   move.l 32(sp),-(sp)
   1597e:	|  |   jsr 6bc <get2bytes>
   15984:	|  |   addq.l #4,sp
   15986:	|  |   movea.l 4(sp),a0
   1598a:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   1598e:	|  |   move.l 32(sp),-(sp)
   15992:	|  |   jsr 6bc <get2bytes>
   15998:	|  |   addq.l #4,sp
   1599a:	|  |   movea.l 4(sp),a0
   1599e:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   159a2:	|  |   move.l 32(sp),-(sp)
   159a6:	|  |   jsr 6bc <get2bytes>
   159ac:	|  |   addq.l #4,sp
   159ae:	|  |   movea.l 4(sp),a0
   159b2:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   159b6:	|  |   move.l 32(sp),-(sp)
   159ba:	|  |   jsr 6bc <get2bytes>
   159c0:	|  |   addq.l #4,sp
   159c2:	|  |   movea.l 4(sp),a0
   159c6:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   159ca:	|  |   move.l 32(sp),-(sp)
   159ce:	|  |   jsr d416 <loadObjectRef>
   159d4:	|  |   addq.l #4,sp
   159d6:	|  |   movea.l 4(sp),a0
   159da:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   159de:	|  \-> move.l 24(sp),d0
   159e2:	|      move.l d0,d1
   159e4:	|      subq.l #1,d1
   159e6:	|      move.l d1,24(sp)
   159ea:	|      tst.l d0
   159ec:	\----- bne.w 15904 <loadRegions+0x22>
	}
	* pointy = NULL;
   159f0:	       movea.l 20(sp),a0
   159f4:	       clr.l (a0)
}
   159f6:	       nop
   159f8:	       movea.l (sp)+,a6
   159fa:	       lea 24(sp),sp
   159fe:	       rts

00015a00 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15a00:	             lea -12(sp),sp
   15a04:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15a06:	             move.l #108724,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15a0e:	   /-------- bra.s 15a88 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15a10:	/--|-------> movea.l 12(sp),a0
   15a14:	|  |         movea.l (a0),a0
   15a16:	|  |         movea.l 28(a0),a0
   15a1a:	|  |         move.l 4(a0),d0
   15a1e:	|  |         cmp.l 20(sp),d0
   15a22:	|  |  /----- bne.s 15a7a <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15a24:	|  |  |      movea.l 12(sp),a0
   15a28:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15a2c:	|  |  |      movea.l 8(sp),a0
   15a30:	|  |  |      move.l 32(a0),d0
   15a34:	|  |  |      movea.l 12(sp),a0
   15a38:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15a3a:	|  |  |      movea.l 8(sp),a0
   15a3e:	|  |  |      move.l 28(a0),d0
   15a42:	|  |  |      move.l d0,-(sp)
   15a44:	|  |  |      jsr d720 <removeObjectType>
   15a4a:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15a4c:	|  |  |      move.l 1a8b8 <overRegion>,d0
   15a52:	|  |  |      cmp.l 8(sp),d0
   15a56:	|  |  |  /-- bne.s 15a5e <removeScreenRegion+0x5e>
   15a58:	|  |  |  |   clr.l 1a8b8 <overRegion>
            FreeVec(killMe);
   15a5e:	|  |  |  \-> move.l 8(sp),4(sp)
   15a64:	|  |  |      move.l 1a7a4 <SysBase>,d0
   15a6a:	|  |  |      movea.l d0,a6
   15a6c:	|  |  |      movea.l 4(sp),a1
   15a70:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15a74:	|  |  |      clr.l 8(sp)
   15a78:	|  +--|----- bra.s 15a88 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15a7a:	|  |  \----> movea.l 12(sp),a0
   15a7e:	|  |         move.l (a0),d0
   15a80:	|  |         moveq #32,d1
   15a82:	|  |         add.l d0,d1
   15a84:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15a88:	|  \-------> movea.l 12(sp),a0
   15a8c:	|            move.l (a0),d0
   15a8e:	\----------- bne.s 15a10 <removeScreenRegion+0x10>
        }
    }
}
   15a90:	             nop
   15a92:	             nop
   15a94:	             movea.l (sp)+,a6
   15a96:	             lea 12(sp),sp
   15a9a:	             rts

00015a9c <saveRegions>:

void saveRegions (BPTR fp) {
   15a9c:	       subq.l #8,sp
	int numRegions = 0;
   15a9e:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15aa2:	       move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15aa8:	   /-- bra.s 15ab4 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15aaa:	/--|-> movea.l (sp),a0
   15aac:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15ab0:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15ab4:	|  \-> tst.l (sp)
   15ab6:	\----- bne.s 15aaa <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15ab8:	       move.l 12(sp),-(sp)
   15abc:	       move.l 8(sp),-(sp)
   15ac0:	       jsr 8d0 <put2bytes>
   15ac6:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15ac8:	       move.l 1a8b4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15ace:	/----- bra.w 15b76 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15ad2:	|  /-> movea.l (sp),a0
   15ad4:	|  |   move.l (a0),d0
   15ad6:	|  |   move.l 12(sp),-(sp)
   15ada:	|  |   move.l d0,-(sp)
   15adc:	|  |   jsr 8d0 <put2bytes>
   15ae2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15ae4:	|  |   movea.l (sp),a0
   15ae6:	|  |   move.l 4(a0),d0
   15aea:	|  |   move.l 12(sp),-(sp)
   15aee:	|  |   move.l d0,-(sp)
   15af0:	|  |   jsr 8d0 <put2bytes>
   15af6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15af8:	|  |   movea.l (sp),a0
   15afa:	|  |   move.l 8(a0),d0
   15afe:	|  |   move.l 12(sp),-(sp)
   15b02:	|  |   move.l d0,-(sp)
   15b04:	|  |   jsr 8d0 <put2bytes>
   15b0a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15b0c:	|  |   movea.l (sp),a0
   15b0e:	|  |   move.l 12(a0),d0
   15b12:	|  |   move.l 12(sp),-(sp)
   15b16:	|  |   move.l d0,-(sp)
   15b18:	|  |   jsr 8d0 <put2bytes>
   15b1e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15b20:	|  |   movea.l (sp),a0
   15b22:	|  |   move.l 16(a0),d0
   15b26:	|  |   move.l 12(sp),-(sp)
   15b2a:	|  |   move.l d0,-(sp)
   15b2c:	|  |   jsr 8d0 <put2bytes>
   15b32:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15b34:	|  |   movea.l (sp),a0
   15b36:	|  |   move.l 20(a0),d0
   15b3a:	|  |   move.l 12(sp),-(sp)
   15b3e:	|  |   move.l d0,-(sp)
   15b40:	|  |   jsr 8d0 <put2bytes>
   15b46:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15b48:	|  |   movea.l (sp),a0
   15b4a:	|  |   move.l 24(a0),d0
   15b4e:	|  |   move.l 12(sp),-(sp)
   15b52:	|  |   move.l d0,-(sp)
   15b54:	|  |   jsr 8d0 <put2bytes>
   15b5a:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15b5c:	|  |   movea.l (sp),a0
   15b5e:	|  |   move.l 28(a0),d0
   15b62:	|  |   move.l 12(sp),-(sp)
   15b66:	|  |   move.l d0,-(sp)
   15b68:	|  |   jsr d7c0 <saveObjectRef>
   15b6e:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15b70:	|  |   movea.l (sp),a0
   15b72:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15b76:	\--|-> tst.l (sp)
   15b78:	   \-- bne.w 15ad2 <saveRegions+0x36>
	}
}
   15b7c:	       nop
   15b7e:	       nop
   15b80:	       addq.l #8,sp
   15b82:	       rts

00015b84 <showBoxes>:

void showBoxes () {
   15b84:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15b86:	       move.l 1a8b4 <allScreenRegions>,(sp)

	while (huntRegion) {
   15b8c:	/----- bra.w 15c28 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15b90:	|  /-> movea.l (sp),a0
   15b92:	|  |   move.l 12(a0),d0
   15b96:	|  |   movea.l d0,a1
   15b98:	|  |   movea.l (sp),a0
   15b9a:	|  |   move.l 4(a0),d0
   15b9e:	|  |   move.l d0,d1
   15ba0:	|  |   movea.l (sp),a0
   15ba2:	|  |   move.l (a0),d0
   15ba4:	|  |   move.l a1,-(sp)
   15ba6:	|  |   move.l d1,-(sp)
   15ba8:	|  |   move.l d0,-(sp)
   15baa:	|  |   jsr d0a4 <drawVerticalLine>
   15bb0:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15bb4:	|  |   movea.l (sp),a0
   15bb6:	|  |   move.l 12(a0),d0
   15bba:	|  |   movea.l d0,a1
   15bbc:	|  |   movea.l (sp),a0
   15bbe:	|  |   move.l 4(a0),d0
   15bc2:	|  |   move.l d0,d1
   15bc4:	|  |   movea.l (sp),a0
   15bc6:	|  |   move.l 8(a0),d0
   15bca:	|  |   move.l a1,-(sp)
   15bcc:	|  |   move.l d1,-(sp)
   15bce:	|  |   move.l d0,-(sp)
   15bd0:	|  |   jsr d0a4 <drawVerticalLine>
   15bd6:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15bda:	|  |   movea.l (sp),a0
   15bdc:	|  |   move.l 8(a0),d0
   15be0:	|  |   movea.l d0,a1
   15be2:	|  |   movea.l (sp),a0
   15be4:	|  |   move.l 4(a0),d0
   15be8:	|  |   move.l d0,d1
   15bea:	|  |   movea.l (sp),a0
   15bec:	|  |   move.l (a0),d0
   15bee:	|  |   move.l a1,-(sp)
   15bf0:	|  |   move.l d1,-(sp)
   15bf2:	|  |   move.l d0,-(sp)
   15bf4:	|  |   jsr d07e <drawHorizontalLine>
   15bfa:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15bfe:	|  |   movea.l (sp),a0
   15c00:	|  |   move.l 8(a0),d0
   15c04:	|  |   movea.l d0,a1
   15c06:	|  |   movea.l (sp),a0
   15c08:	|  |   move.l 12(a0),d0
   15c0c:	|  |   move.l d0,d1
   15c0e:	|  |   movea.l (sp),a0
   15c10:	|  |   move.l (a0),d0
   15c12:	|  |   move.l a1,-(sp)
   15c14:	|  |   move.l d1,-(sp)
   15c16:	|  |   move.l d0,-(sp)
   15c18:	|  |   jsr d07e <drawHorizontalLine>
   15c1e:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15c22:	|  |   movea.l (sp),a0
   15c24:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15c28:	\--|-> tst.l (sp)
   15c2a:	   \-- bne.w 15b90 <showBoxes+0xc>
	}
   15c2e:	       nop
   15c30:	       nop
   15c32:	       addq.l #4,sp
   15c34:	       rts

00015c36 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15c36:	       lea -88(sp),sp
   15c3a:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15c3c:	       move.l 1a7a4 <SysBase>,d0
   15c42:	       movea.l d0,a6
   15c44:	       jsr -666(a6)
   15c48:	       move.l d0,88(sp)
   15c4c:	       move.l 88(sp),d0
   15c50:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15c54:	       move.l 84(sp),80(sp)
   15c5a:	       moveq #40,d0
   15c5c:	       move.l d0,76(sp)
   15c60:	       move.l 1a7a4 <SysBase>,d0
   15c66:	       movea.l d0,a6
   15c68:	       movea.l 80(sp),a0
   15c6c:	       move.l 76(sp),d0
   15c70:	       jsr -654(a6)
   15c74:	       move.l d0,72(sp)
   15c78:	       move.l 72(sp),d0
   15c7c:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15c80:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15c86:	       move.l #105927,60(sp)
   15c8e:	       clr.l 56(sp)
   15c92:	       move.l 64(sp),52(sp)
   15c98:	       clr.l 48(sp)
   15c9c:	       move.l 1a7a4 <SysBase>,d0
   15ca2:	       movea.l d0,a6
   15ca4:	       movea.l 60(sp),a0
   15ca8:	       move.l 56(sp),d0
   15cac:	       movea.l 52(sp),a1
   15cb0:	       move.l 48(sp),d1
   15cb4:	       jsr -444(a6)
   15cb8:	       move.b d0,47(sp)
   15cbc:	       move.b 47(sp),d0
   15cc0:	   /-- beq.s 15cd6 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15cc2:	   |   pea 19dd4 <graphics.c.1c13408a+0x324>
   15cc8:	   |   jsr 17036 <KPrintF>
   15cce:	   |   addq.l #4,sp
        return 0;
   15cd0:	   |   moveq #0,d0
   15cd2:	/--|-- bra.w 15d90 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15cd6:	|  \-> movea.l 64(sp),a0
   15cda:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15ce0:	|      lea 92(sp),a0
   15ce4:	|      lea -86(a0),a0
   15ce8:	|      move.l a0,38(sp)
   15cec:	|      movea.l 42(sp),a6
   15cf0:	|      movea.l 38(sp),a0
   15cf4:	|      jsr -60(a6)
   15cf8:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15cfc:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15d02:	|      move.l #1103515245,-(sp)
   15d08:	|      move.l 34(sp),-(sp)
   15d0c:	|      jsr 179f4 <__mulsi3>
   15d12:	|      addq.l #8,sp
   15d14:	|      addi.l #12345,d0
   15d1a:	|      move.l d0,d1
   15d1c:	|      bclr #31,d1
   15d20:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15d24:	|      move.l 30(sp),d0
   15d28:	|      pea 64 <_start+0x64>
   15d2c:	|      move.l d0,-(sp)
   15d2e:	|      jsr 17ace <__umodsi3>
   15d34:	|      addq.l #8,sp
   15d36:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15d3a:	|      move.l 26(sp),-(sp)
   15d3e:	|      pea 19df1 <graphics.c.1c13408a+0x341>
   15d44:	|      jsr 17036 <KPrintF>
   15d4a:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15d4c:	|      move.l 64(sp),22(sp)
   15d52:	|      move.l 1a7a4 <SysBase>,d0
   15d58:	|      movea.l d0,a6
   15d5a:	|      movea.l 22(sp),a1
   15d5e:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15d62:	|      move.l 64(sp),18(sp)
   15d68:	|      move.l 1a7a4 <SysBase>,d0
   15d6e:	|      movea.l d0,a6
   15d70:	|      movea.l 18(sp),a0
   15d74:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15d78:	|      move.l 84(sp),14(sp)
   15d7e:	|      move.l 1a7a4 <SysBase>,d0
   15d84:	|      movea.l d0,a6
   15d86:	|      movea.l 14(sp),a0
   15d8a:	|      jsr -672(a6)
    return 0;
   15d8e:	|      moveq #0,d0
   15d90:	\----> movea.l (sp)+,a6
   15d92:	       lea 88(sp),sp
   15d96:	       rts

00015d98 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15d98:	             lea -20(sp),sp
   15d9c:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15d9e:	             move.l 1a8bc <allLoadedBanks>,20(sp)
	while (returnMe) {
   15da6:	      /----- bra.s 15dd8 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15da8:	   /--|----> movea.l 20(sp),a0
   15dac:	   |  |      move.l (a0),d0
   15dae:	   |  |      cmp.l 28(sp),d0
   15db2:	   |  |  /-- bne.s 15dce <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15db4:	   |  |  |   movea.l 20(sp),a0
   15db8:	   |  |  |   move.l 4(a0),d0
   15dbc:	   |  |  |   addq.l #1,d0
   15dbe:	   |  |  |   movea.l 20(sp),a0
   15dc2:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15dc6:	   |  |  |   move.l 20(sp),d0
   15dca:	/--|--|--|-- bra.w 15e8e <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   15dce:	|  |  |  \-> movea.l 20(sp),a0
   15dd2:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15dd8:	|  |  \----> tst.l 20(sp)
   15ddc:	|  \-------- bne.s 15da8 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15dde:	|            moveq #26,d0
   15de0:	|            move.l d0,16(sp)
   15de4:	|            clr.l 12(sp)
   15de8:	|            move.l 1a7a4 <SysBase>,d0
   15dee:	|            movea.l d0,a6
   15df0:	|            move.l 16(sp),d0
   15df4:	|            move.l 12(sp),d1
   15df8:	|            jsr -684(a6)
   15dfc:	|            move.l d0,8(sp)
   15e00:	|            move.l 8(sp),d0
   15e04:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15e08:	|     /----- beq.w 15e8c <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   15e0c:	|     |      movea.l 20(sp),a0
   15e10:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   15e14:	|     |      move.l 20(sp),d0
   15e18:	|     |      addq.l #8,d0
   15e1a:	|     |      clr.l -(sp)
   15e1c:	|     |      move.l d0,-(sp)
   15e1e:	|     |      move.l 36(sp),-(sp)
   15e22:	|     |      jsr 8a78 <loadSpriteBank>
   15e28:	|     |      lea 12(sp),sp
   15e2c:	|     |      tst.w d0
   15e2e:	|     |  /-- beq.s 15e64 <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   15e30:	|     |  |   movea.l 20(sp),a0
   15e34:	|     |  |   moveq #1,d0
   15e36:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15e3a:	|     |  |   move.l 1a8bc <allLoadedBanks>,d0
   15e40:	|     |  |   movea.l 20(sp),a0
   15e44:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15e48:	|     |  |   move.l 20(sp),1a8bc <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   15e50:	|     |  |   pea 19e04 <graphics.c.1c13408a+0x354>
   15e56:	|     |  |   jsr 17036 <KPrintF>
   15e5c:	|     |  |   addq.l #4,sp
			return returnMe;
   15e5e:	|     |  |   move.l 20(sp),d0
   15e62:	+-----|--|-- bra.s 15e8e <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   15e64:	|     |  \-> pea 19e31 <graphics.c.1c13408a+0x381>
   15e6a:	|     |      jsr 17036 <KPrintF>
   15e70:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   15e72:	|     |      move.l 20(sp),4(sp)
   15e78:	|     |      move.l 1a7a4 <SysBase>,d0
   15e7e:	|     |      movea.l d0,a6
   15e80:	|     |      movea.l 4(sp),a1
   15e84:	|     |      jsr -690(a6)
			return NULL;
   15e88:	|     |      moveq #0,d0
   15e8a:	+-----|----- bra.s 15e8e <loadBankForAnim+0xf6>
		}
	} else return NULL;
   15e8c:	|     \----> moveq #0,d0
}
   15e8e:	\----------> movea.l (sp)+,a6
   15e90:	             lea 20(sp),sp
   15e94:	             rts

00015e96 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15e96:	       lea -32(sp),sp
   15e9a:	       move.l d3,-(sp)
   15e9c:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   15e9e:	       move.l 60(sp),d0
   15ea2:	       sub.l 52(sp),d0
   15ea6:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   15eaa:	       move.l 64(sp),d0
   15eae:	       sub.l 56(sp),d0
   15eb2:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15eb6:	       move.l 68(sp),d0
   15eba:	       sub.l 52(sp),d0
   15ebe:	       move.l 36(sp),-(sp)
   15ec2:	       move.l d0,-(sp)
   15ec4:	       jsr 179f4 <__mulsi3>
   15eca:	       addq.l #8,sp
   15ecc:	       move.l d0,d2
   15ece:	       move.l 72(sp),d0
   15ed2:	       sub.l 56(sp),d0
   15ed6:	       move.l 32(sp),-(sp)
   15eda:	       move.l d0,-(sp)
   15edc:	       jsr 179f4 <__mulsi3>
   15ee2:	       addq.l #8,sp
   15ee4:	       add.l d2,d0
   15ee6:	       move.l d0,-(sp)
   15ee8:	       jsr 17432 <__floatsidf>
   15eee:	       addq.l #4,sp
   15ef0:	       move.l d0,16(sp)
   15ef4:	       move.l d1,20(sp)
   15ef8:	       move.l 16(sp),24(sp)
   15efe:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15f04:	       move.l 36(sp),-(sp)
   15f08:	       move.l 40(sp),-(sp)
   15f0c:	       jsr 179f4 <__mulsi3>
   15f12:	       addq.l #8,sp
   15f14:	       move.l d0,d2
   15f16:	       move.l 32(sp),-(sp)
   15f1a:	       move.l 36(sp),-(sp)
   15f1e:	       jsr 179f4 <__mulsi3>
   15f24:	       addq.l #8,sp
   15f26:	       add.l d2,d0
   15f28:	       move.l d0,-(sp)
   15f2a:	       jsr 17432 <__floatsidf>
   15f30:	       addq.l #4,sp
   15f32:	       move.l d1,-(sp)
   15f34:	       move.l d0,-(sp)
   15f36:	       move.l 36(sp),-(sp)
   15f3a:	       move.l 36(sp),-(sp)
   15f3e:	       jsr 172bc <__divdf3>
   15f44:	       lea 16(sp),sp
   15f48:	       move.l d0,8(sp)
   15f4c:	       move.l d1,12(sp)
   15f50:	       move.l 8(sp),24(sp)
   15f56:	       move.l 12(sp),28(sp)

	if (m < 0) {
   15f5c:	       clr.l -(sp)
   15f5e:	       clr.l -(sp)
   15f60:	       move.l 36(sp),-(sp)
   15f64:	       move.l 36(sp),-(sp)
   15f68:	       jsr 1764a <__ltdf2>
   15f6e:	       lea 16(sp),sp
   15f72:	       tst.l d0
   15f74:	   /-- bge.s 15f8a <closestPointOnLine+0xf4>
		*closestX = x1;
   15f76:	   |   movea.l 44(sp),a0
   15f7a:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   15f7e:	   |   movea.l 48(sp),a0
   15f82:	   |   move.l 56(sp),(a0)
   15f86:	/--|-- bra.w 1606c <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   15f8a:	|  \-> clr.l -(sp)
   15f8c:	|      move.l #1072693248,-(sp)
   15f92:	|      move.l 36(sp),-(sp)
   15f96:	|      move.l 36(sp),-(sp)
   15f9a:	|      jsr 17590 <__gtdf2>
   15fa0:	|      lea 16(sp),sp
   15fa4:	|      tst.l d0
   15fa6:	|  /-- ble.s 15fbc <closestPointOnLine+0x126>
		*closestX = x2;
   15fa8:	|  |   movea.l 44(sp),a0
   15fac:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   15fb0:	|  |   movea.l 48(sp),a0
   15fb4:	|  |   move.l 64(sp),(a0)
   15fb8:	+--|-- bra.w 1606c <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   15fbc:	|  \-> move.l 52(sp),-(sp)
   15fc0:	|      jsr 17432 <__floatsidf>
   15fc6:	|      addq.l #4,sp
   15fc8:	|      move.l d0,d2
   15fca:	|      move.l d1,d3
   15fcc:	|      move.l 36(sp),-(sp)
   15fd0:	|      jsr 17432 <__floatsidf>
   15fd6:	|      addq.l #4,sp
   15fd8:	|      move.l 28(sp),-(sp)
   15fdc:	|      move.l 28(sp),-(sp)
   15fe0:	|      move.l d1,-(sp)
   15fe2:	|      move.l d0,-(sp)
   15fe4:	|      jsr 174c2 <__muldf3>
   15fea:	|      lea 16(sp),sp
   15fee:	|      move.l d1,-(sp)
   15ff0:	|      move.l d0,-(sp)
   15ff2:	|      move.l d3,-(sp)
   15ff4:	|      move.l d2,-(sp)
   15ff6:	|      jsr 1725a <__adddf3>
   15ffc:	|      lea 16(sp),sp
   16000:	|      move.l d1,-(sp)
   16002:	|      move.l d0,-(sp)
   16004:	|      jsr 173ca <__fixdfsi>
   1600a:	|      addq.l #8,sp
   1600c:	|      movea.l 44(sp),a0
   16010:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   16012:	|      move.l 56(sp),-(sp)
   16016:	|      jsr 17432 <__floatsidf>
   1601c:	|      addq.l #4,sp
   1601e:	|      move.l d0,d2
   16020:	|      move.l d1,d3
   16022:	|      move.l 32(sp),-(sp)
   16026:	|      jsr 17432 <__floatsidf>
   1602c:	|      addq.l #4,sp
   1602e:	|      move.l 28(sp),-(sp)
   16032:	|      move.l 28(sp),-(sp)
   16036:	|      move.l d1,-(sp)
   16038:	|      move.l d0,-(sp)
   1603a:	|      jsr 174c2 <__muldf3>
   16040:	|      lea 16(sp),sp
   16044:	|      move.l d1,-(sp)
   16046:	|      move.l d0,-(sp)
   16048:	|      move.l d3,-(sp)
   1604a:	|      move.l d2,-(sp)
   1604c:	|      jsr 1725a <__adddf3>
   16052:	|      lea 16(sp),sp
   16056:	|      move.l d1,-(sp)
   16058:	|      move.l d0,-(sp)
   1605a:	|      jsr 173ca <__fixdfsi>
   16060:	|      addq.l #8,sp
   16062:	|      movea.l 48(sp),a0
   16066:	|      move.l d0,(a0)
		return TRUE;
   16068:	|      moveq #1,d0
   1606a:	|  /-- bra.s 1606e <closestPointOnLine+0x1d8>
	}
	return FALSE;
   1606c:	\--|-> clr.w d0
}
   1606e:	   \-> move.l (sp)+,d2
   16070:	       move.l (sp)+,d3
   16072:	       lea 32(sp),sp
   16076:	       rts

00016078 <drawFloor>:

void drawFloor() {
   16078:	                lea -12(sp),sp
   1607c:	                move.l d3,-(sp)
   1607e:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16080:	                clr.l 16(sp)
   16084:	   /----------- bra.w 16298 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   16088:	/--|----------> movea.l 1a8c0 <currentFloor>,a0
   1608e:	|  |            move.l 12(a0),d1
   16092:	|  |            move.l 16(sp),d0
   16096:	|  |            lsl.l #3,d0
   16098:	|  |            movea.l d1,a0
   1609a:	|  |            adda.l d0,a0
   1609c:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   160a0:	|  |            moveq #1,d0
   160a2:	|  |            cmp.l 8(sp),d0
   160a6:	|  |  /-------- bge.w 16294 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   160aa:	|  |  |         moveq #1,d0
   160ac:	|  |  |         move.l d0,12(sp)
   160b0:	|  |  |     /-- bra.w 161aa <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   160b4:	|  |  |  /--|-> movea.l 1a8c0 <currentFloor>,a0
   160ba:	|  |  |  |  |   move.l 4(a0),d1
   160be:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   160c4:	|  |  |  |  |   movea.l 12(a0),a0
   160c8:	|  |  |  |  |   move.l 16(sp),d0
   160cc:	|  |  |  |  |   lsl.l #3,d0
   160ce:	|  |  |  |  |   adda.l d0,a0
   160d0:	|  |  |  |  |   movea.l 4(a0),a0
   160d4:	|  |  |  |  |   move.l 12(sp),d0
   160d8:	|  |  |  |  |   add.l d0,d0
   160da:	|  |  |  |  |   add.l d0,d0
   160dc:	|  |  |  |  |   adda.l d0,a0
   160de:	|  |  |  |  |   move.l (a0),d0
   160e0:	|  |  |  |  |   lsl.l #3,d0
   160e2:	|  |  |  |  |   movea.l d1,a0
   160e4:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   160e6:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   160ea:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   160f0:	|  |  |  |  |   move.l 4(a0),d1
   160f4:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   160fa:	|  |  |  |  |   movea.l 12(a0),a0
   160fe:	|  |  |  |  |   move.l 16(sp),d0
   16102:	|  |  |  |  |   lsl.l #3,d0
   16104:	|  |  |  |  |   adda.l d0,a0
   16106:	|  |  |  |  |   movea.l 4(a0),a0
   1610a:	|  |  |  |  |   move.l 12(sp),d0
   1610e:	|  |  |  |  |   add.l d0,d0
   16110:	|  |  |  |  |   add.l d0,d0
   16112:	|  |  |  |  |   adda.l d0,a0
   16114:	|  |  |  |  |   move.l (a0),d0
   16116:	|  |  |  |  |   lsl.l #3,d0
   16118:	|  |  |  |  |   movea.l d1,a0
   1611a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1611c:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1611e:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16124:	|  |  |  |  |   move.l 4(a0),d1
   16128:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   1612e:	|  |  |  |  |   movea.l 12(a0),a0
   16132:	|  |  |  |  |   move.l 16(sp),d0
   16136:	|  |  |  |  |   lsl.l #3,d0
   16138:	|  |  |  |  |   adda.l d0,a0
   1613a:	|  |  |  |  |   movea.l 4(a0),a0
   1613e:	|  |  |  |  |   move.l 12(sp),d0
   16142:	|  |  |  |  |   addi.l #1073741823,d0
   16148:	|  |  |  |  |   add.l d0,d0
   1614a:	|  |  |  |  |   add.l d0,d0
   1614c:	|  |  |  |  |   adda.l d0,a0
   1614e:	|  |  |  |  |   move.l (a0),d0
   16150:	|  |  |  |  |   lsl.l #3,d0
   16152:	|  |  |  |  |   movea.l d1,a0
   16154:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16156:	|  |  |  |  |   move.l 4(a0),d1
   1615a:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16160:	|  |  |  |  |   move.l 4(a0),d3
   16164:	|  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   1616a:	|  |  |  |  |   movea.l 12(a0),a0
   1616e:	|  |  |  |  |   move.l 16(sp),d0
   16172:	|  |  |  |  |   lsl.l #3,d0
   16174:	|  |  |  |  |   adda.l d0,a0
   16176:	|  |  |  |  |   movea.l 4(a0),a0
   1617a:	|  |  |  |  |   move.l 12(sp),d0
   1617e:	|  |  |  |  |   addi.l #1073741823,d0
   16184:	|  |  |  |  |   add.l d0,d0
   16186:	|  |  |  |  |   add.l d0,d0
   16188:	|  |  |  |  |   adda.l d0,a0
   1618a:	|  |  |  |  |   move.l (a0),d0
   1618c:	|  |  |  |  |   lsl.l #3,d0
   1618e:	|  |  |  |  |   movea.l d3,a0
   16190:	|  |  |  |  |   adda.l d0,a0
   16192:	|  |  |  |  |   move.l (a0),d0
   16194:	|  |  |  |  |   move.l d2,-(sp)
   16196:	|  |  |  |  |   move.l a1,-(sp)
   16198:	|  |  |  |  |   move.l d1,-(sp)
   1619a:	|  |  |  |  |   move.l d0,-(sp)
   1619c:	|  |  |  |  |   jsr 3da2 <drawLine>
   161a2:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   161a6:	|  |  |  |  |   addq.l #1,12(sp)
   161aa:	|  |  |  |  \-> move.l 12(sp),d0
   161ae:	|  |  |  |      cmp.l 8(sp),d0
   161b2:	|  |  |  \----- blt.w 160b4 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   161b6:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   161bc:	|  |  |         move.l 4(a0),d1
   161c0:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   161c6:	|  |  |         movea.l 12(a0),a0
   161ca:	|  |  |         move.l 16(sp),d0
   161ce:	|  |  |         lsl.l #3,d0
   161d0:	|  |  |         adda.l d0,a0
   161d2:	|  |  |         movea.l 4(a0),a0
   161d6:	|  |  |         move.l 8(sp),d0
   161da:	|  |  |         addi.l #1073741823,d0
   161e0:	|  |  |         add.l d0,d0
   161e2:	|  |  |         add.l d0,d0
   161e4:	|  |  |         adda.l d0,a0
   161e6:	|  |  |         move.l (a0),d0
   161e8:	|  |  |         lsl.l #3,d0
   161ea:	|  |  |         movea.l d1,a0
   161ec:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   161ee:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   161f2:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   161f8:	|  |  |         move.l 4(a0),d1
   161fc:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16202:	|  |  |         movea.l 12(a0),a0
   16206:	|  |  |         move.l 16(sp),d0
   1620a:	|  |  |         lsl.l #3,d0
   1620c:	|  |  |         adda.l d0,a0
   1620e:	|  |  |         movea.l 4(a0),a0
   16212:	|  |  |         move.l 8(sp),d0
   16216:	|  |  |         addi.l #1073741823,d0
   1621c:	|  |  |         add.l d0,d0
   1621e:	|  |  |         add.l d0,d0
   16220:	|  |  |         adda.l d0,a0
   16222:	|  |  |         move.l (a0),d0
   16224:	|  |  |         lsl.l #3,d0
   16226:	|  |  |         movea.l d1,a0
   16228:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1622a:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1622c:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16232:	|  |  |         move.l 4(a0),d1
   16236:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   1623c:	|  |  |         movea.l 12(a0),a0
   16240:	|  |  |         move.l 16(sp),d0
   16244:	|  |  |         lsl.l #3,d0
   16246:	|  |  |         adda.l d0,a0
   16248:	|  |  |         movea.l 4(a0),a0
   1624c:	|  |  |         move.l (a0),d0
   1624e:	|  |  |         lsl.l #3,d0
   16250:	|  |  |         movea.l d1,a0
   16252:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16254:	|  |  |         move.l 4(a0),d1
   16258:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   1625e:	|  |  |         move.l 4(a0),d3
   16262:	|  |  |         movea.l 1a8c0 <currentFloor>,a0
   16268:	|  |  |         movea.l 12(a0),a0
   1626c:	|  |  |         move.l 16(sp),d0
   16270:	|  |  |         lsl.l #3,d0
   16272:	|  |  |         adda.l d0,a0
   16274:	|  |  |         movea.l 4(a0),a0
   16278:	|  |  |         move.l (a0),d0
   1627a:	|  |  |         lsl.l #3,d0
   1627c:	|  |  |         movea.l d3,a0
   1627e:	|  |  |         adda.l d0,a0
   16280:	|  |  |         move.l (a0),d0
   16282:	|  |  |         move.l d2,-(sp)
   16284:	|  |  |         move.l a1,-(sp)
   16286:	|  |  |         move.l d1,-(sp)
   16288:	|  |  |         move.l d0,-(sp)
   1628a:	|  |  |         jsr 3da2 <drawLine>
   16290:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16294:	|  |  \-------> addq.l #1,16(sp)
   16298:	|  \----------> movea.l 1a8c0 <currentFloor>,a0
   1629e:	|               move.l 8(a0),d0
   162a2:	|               cmp.l 16(sp),d0
   162a6:	\-------------- bgt.w 16088 <drawFloor+0x10>
        }
    }
}
   162aa:	                nop
   162ac:	                nop
   162ae:	                move.l (sp)+,d2
   162b0:	                move.l (sp)+,d3
   162b2:	                lea 12(sp),sp
   162b6:	                rts

000162b8 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   162b8:	                      lea -12(sp),sp
    int sharedVertices = 0;
   162bc:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   162c0:	                      clr.l 4(sp)
   162c4:	   /----------------- bra.w 16356 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   162c8:	/--|----------------> clr.l (sp)
   162ca:	|  |     /----------- bra.s 16346 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   162cc:	|  |  /--|----------> movea.l 16(sp),a0
   162d0:	|  |  |  |            move.l 4(a0),d1
   162d4:	|  |  |  |            move.l 4(sp),d0
   162d8:	|  |  |  |            add.l d0,d0
   162da:	|  |  |  |            add.l d0,d0
   162dc:	|  |  |  |            movea.l d1,a0
   162de:	|  |  |  |            adda.l d0,a0
   162e0:	|  |  |  |            move.l (a0),d1
   162e2:	|  |  |  |            movea.l 20(sp),a0
   162e6:	|  |  |  |            movea.l 4(a0),a0
   162ea:	|  |  |  |            move.l (sp),d0
   162ec:	|  |  |  |            add.l d0,d0
   162ee:	|  |  |  |            add.l d0,d0
   162f0:	|  |  |  |            adda.l d0,a0
   162f2:	|  |  |  |            move.l (a0),d0
   162f4:	|  |  |  |            cmp.l d1,d0
   162f6:	|  |  |  |  /-------- bne.s 16344 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   162f8:	|  |  |  |  |         move.l 8(sp),d0
   162fc:	|  |  |  |  |         move.l d0,d1
   162fe:	|  |  |  |  |         addq.l #1,d1
   16300:	|  |  |  |  |         move.l d1,8(sp)
   16304:	|  |  |  |  |         tst.l d0
   16306:	|  |  |  |  |     /-- beq.s 16328 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16308:	|  |  |  |  |     |   movea.l 16(sp),a0
   1630c:	|  |  |  |  |     |   move.l 4(a0),d1
   16310:	|  |  |  |  |     |   move.l 4(sp),d0
   16314:	|  |  |  |  |     |   add.l d0,d0
   16316:	|  |  |  |  |     |   add.l d0,d0
   16318:	|  |  |  |  |     |   movea.l d1,a0
   1631a:	|  |  |  |  |     |   adda.l d0,a0
   1631c:	|  |  |  |  |     |   move.l (a0),d0
   1631e:	|  |  |  |  |     |   movea.l 28(sp),a0
   16322:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16324:	|  |  |  |  |     |   moveq #1,d0
   16326:	|  |  |  |  |  /--|-- bra.s 16366 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16328:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1632c:	|  |  |  |  |  |      move.l 4(a0),d1
   16330:	|  |  |  |  |  |      move.l 4(sp),d0
   16334:	|  |  |  |  |  |      add.l d0,d0
   16336:	|  |  |  |  |  |      add.l d0,d0
   16338:	|  |  |  |  |  |      movea.l d1,a0
   1633a:	|  |  |  |  |  |      adda.l d0,a0
   1633c:	|  |  |  |  |  |      move.l (a0),d0
   1633e:	|  |  |  |  |  |      movea.l 24(sp),a0
   16342:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16344:	|  |  |  |  \--|----> addq.l #1,(sp)
   16346:	|  |  |  \-----|----> movea.l 20(sp),a0
   1634a:	|  |  |        |      move.l (a0),d0
   1634c:	|  |  |        |      cmp.l (sp),d0
   1634e:	|  |  \--------|----- bgt.w 162cc <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16352:	|  |           |      addq.l #1,4(sp)
   16356:	|  \-----------|----> movea.l 16(sp),a0
   1635a:	|              |      move.l (a0),d0
   1635c:	|              |      cmp.l 4(sp),d0
   16360:	\--------------|----- bgt.w 162c8 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16364:	               |      clr.w d0
}
   16366:	               \----> lea 12(sp),sp
   1636a:	                      rts

0001636c <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1636c:	movea.l 1a8c0 <currentFloor>,a0
   16372:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   16376:	movea.l 1a8c0 <currentFloor>,a0
   1637c:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16380:	movea.l 1a8c0 <currentFloor>,a0
   16386:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1638a:	movea.l 1a8c0 <currentFloor>,a0
   16390:	clr.l 16(a0)
}
   16394:	nop
   16396:	rts

00016398 <inFloor>:

int inFloor (int x, int y) {
   16398:	          subq.l #8,sp
	int i, r = -1;
   1639a:	          moveq #-1,d0
   1639c:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1639e:	          clr.l 4(sp)
   163a2:	   /----- bra.s 163d6 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   163a4:	/--|----> movea.l 1a8c0 <currentFloor>,a0
   163aa:	|  |      move.l 12(a0),d1
   163ae:	|  |      move.l 4(sp),d0
   163b2:	|  |      lsl.l #3,d0
   163b4:	|  |      add.l d1,d0
   163b6:	|  |      move.l 16(sp),-(sp)
   163ba:	|  |      move.l 16(sp),-(sp)
   163be:	|  |      move.l d0,-(sp)
   163c0:	|  |      jsr 165a2 <pointInFloorPolygon>
   163c6:	|  |      lea 12(sp),sp
   163ca:	|  |      tst.w d0
   163cc:	|  |  /-- beq.s 163d2 <inFloor+0x3a>
			r = i;
   163ce:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   163d2:	|  |  \-> addq.l #1,4(sp)
   163d6:	|  \----> movea.l 1a8c0 <currentFloor>,a0
   163dc:	|         move.l 8(a0),d0
   163e0:	|         cmp.l 4(sp),d0
   163e4:	\-------- bgt.s 163a4 <inFloor+0xc>

	return r;
   163e6:	          move.l (sp),d0
}
   163e8:	          addq.l #8,sp
   163ea:	          rts

000163ec <initFloor>:

BOOL initFloor () {
   163ec:	       lea -12(sp),sp
   163f0:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   163f2:	       moveq #20,d0
   163f4:	       move.l d0,12(sp)
   163f8:	       clr.l 8(sp)
   163fc:	       move.l 1a7a4 <SysBase>,d0
   16402:	       movea.l d0,a6
   16404:	       move.l 12(sp),d0
   16408:	       move.l 8(sp),d1
   1640c:	       jsr -684(a6)
   16410:	       move.l d0,4(sp)
   16414:	       move.l 4(sp),d0
   16418:	       move.l d0,1a8c0 <currentFloor>

    if(currentFloor == 0) {
   1641e:	       move.l 1a8c0 <currentFloor>,d0
   16424:	/----- bne.s 16438 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16426:	|      pea 19e6a <graphics.c.1c13408a+0x3ba>
   1642c:	|      jsr 17036 <KPrintF>
   16432:	|      addq.l #4,sp
        return FALSE;
   16434:	|      clr.w d0
   16436:	|  /-- bra.s 16440 <initFloor+0x54>
    }

	noFloor ();
   16438:	\--|-> jsr 1636c <noFloor>
	return TRUE;
   1643e:	   |   moveq #1,d0
}
   16440:	   \-> movea.l (sp)+,a6
   16442:	       lea 12(sp),sp
   16446:	       rts

00016448 <killFloor>:

void killFloor () {
   16448:	       lea -24(sp),sp
   1644c:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1644e:	       clr.l 24(sp)
   16452:	   /-- bra.s 164ac <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16454:	/--|-> movea.l 1a8c0 <currentFloor>,a0
   1645a:	|  |   move.l 12(a0),d1
   1645e:	|  |   move.l 24(sp),d0
   16462:	|  |   lsl.l #3,d0
   16464:	|  |   movea.l d1,a0
   16466:	|  |   adda.l d0,a0
   16468:	|  |   move.l 4(a0),8(sp)
   1646e:	|  |   move.l 1a7a4 <SysBase>,d0
   16474:	|  |   movea.l d0,a6
   16476:	|  |   movea.l 8(sp),a1
   1647a:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1647e:	|  |   movea.l 1a8c0 <currentFloor>,a0
   16484:	|  |   move.l 16(a0),d1
   16488:	|  |   move.l 24(sp),d0
   1648c:	|  |   add.l d0,d0
   1648e:	|  |   add.l d0,d0
   16490:	|  |   movea.l d1,a0
   16492:	|  |   adda.l d0,a0
   16494:	|  |   move.l (a0),4(sp)
   16498:	|  |   move.l 1a7a4 <SysBase>,d0
   1649e:	|  |   movea.l d0,a6
   164a0:	|  |   movea.l 4(sp),a1
   164a4:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   164a8:	|  |   addq.l #1,24(sp)
   164ac:	|  \-> movea.l 1a8c0 <currentFloor>,a0
   164b2:	|      move.l 8(a0),d0
   164b6:	|      cmp.l 24(sp),d0
   164ba:	\----- bgt.s 16454 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   164bc:	       movea.l 1a8c0 <currentFloor>,a0
   164c2:	       move.l 12(a0),20(sp)
   164c8:	       move.l 1a7a4 <SysBase>,d0
   164ce:	       movea.l d0,a6
   164d0:	       movea.l 20(sp),a1
   164d4:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   164d8:	       movea.l 1a8c0 <currentFloor>,a0
   164de:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   164e2:	       movea.l 1a8c0 <currentFloor>,a0
   164e8:	       move.l 4(a0),16(sp)
   164ee:	       move.l 1a7a4 <SysBase>,d0
   164f4:	       movea.l d0,a6
   164f6:	       movea.l 16(sp),a1
   164fa:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   164fe:	       movea.l 1a8c0 <currentFloor>,a0
   16504:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16508:	       movea.l 1a8c0 <currentFloor>,a0
   1650e:	       move.l 16(a0),12(sp)
   16514:	       move.l 1a7a4 <SysBase>,d0
   1651a:	       movea.l d0,a6
   1651c:	       movea.l 12(sp),a1
   16520:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16524:	       movea.l 1a8c0 <currentFloor>,a0
   1652a:	       clr.l 16(a0)
}
   1652e:	       nop
   16530:	       movea.l (sp)+,a6
   16532:	       lea 24(sp),sp
   16536:	       rts

00016538 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16538:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1653c:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16540:	                   clr.l 4(sp)
   16544:	   /-------------- bra.s 16590 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16546:	/--|-------------> clr.l (sp)
   16548:	|  |     /-------- bra.s 16584 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1654a:	|  |  /--|-------> move.l 20(sp),d1
   1654e:	|  |  |  |         move.l 4(sp),d0
   16552:	|  |  |  |         add.l d0,d0
   16554:	|  |  |  |         add.l d0,d0
   16556:	|  |  |  |         movea.l d1,a0
   16558:	|  |  |  |         adda.l d0,a0
   1655a:	|  |  |  |         move.l (a0),d1
   1655c:	|  |  |  |         movea.l 28(sp),a0
   16560:	|  |  |  |         move.l (sp),d0
   16562:	|  |  |  |         add.l d0,d0
   16564:	|  |  |  |         add.l d0,d0
   16566:	|  |  |  |         adda.l d0,a0
   16568:	|  |  |  |         move.l (a0),d0
   1656a:	|  |  |  |         cmp.l d1,d0
   1656c:	|  |  |  |     /-- bne.s 16582 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1656e:	|  |  |  |     |   move.l 8(sp),d0
   16572:	|  |  |  |     |   move.l d0,d1
   16574:	|  |  |  |     |   addq.l #1,d1
   16576:	|  |  |  |     |   move.l d1,8(sp)
   1657a:	|  |  |  |     |   tst.l d0
   1657c:	|  |  |  |     +-- beq.s 16582 <polysShareSide+0x4a>
   1657e:	|  |  |  |     |   moveq #1,d0
   16580:	|  |  |  |  /--|-- bra.s 1659c <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16582:	|  |  |  |  |  \-> addq.l #1,(sp)
   16584:	|  |  |  \--|----> move.l 24(sp),d0
   16588:	|  |  |     |      cmp.l (sp),d0
   1658a:	|  |  \-----|----- bgt.s 1654a <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1658c:	|  |        |      addq.l #1,4(sp)
   16590:	|  \--------|----> move.l 16(sp),d0
   16594:	|           |      cmp.l 4(sp),d0
   16598:	\-----------|----- bgt.s 16546 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1659a:	            |      clr.w d0
}
   1659c:	            \----> lea 12(sp),sp
   165a0:	                   rts

000165a2 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   165a2:	             lea -28(sp),sp
   165a6:	             move.l d3,-(sp)
   165a8:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   165aa:	             clr.l 32(sp)
   165ae:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   165b2:	             movea.l 40(sp),a0
   165b6:	             move.l (a0),d0
   165b8:	             move.l d0,d1
   165ba:	             subq.l #1,d1
   165bc:	             move.l d1,28(sp)
   165c0:	   /-------- bra.w 167ba <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   165c4:	/--|-------> movea.l 1a8c0 <currentFloor>,a0
   165ca:	|  |         move.l 4(a0),d1
   165ce:	|  |         movea.l 40(sp),a0
   165d2:	|  |         movea.l 4(a0),a0
   165d6:	|  |         move.l 32(sp),d0
   165da:	|  |         add.l d0,d0
   165dc:	|  |         add.l d0,d0
   165de:	|  |         adda.l d0,a0
   165e0:	|  |         move.l (a0),d0
   165e2:	|  |         lsl.l #3,d0
   165e4:	|  |         movea.l d1,a0
   165e6:	|  |         adda.l d0,a0
   165e8:	|  |         move.l (a0),d0
   165ea:	|  |         move.l d0,-(sp)
   165ec:	|  |         jsr 17472 <__floatsisf>
   165f2:	|  |         addq.l #4,sp
   165f4:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   165f8:	|  |         movea.l 1a8c0 <currentFloor>,a0
   165fe:	|  |         move.l 4(a0),d1
   16602:	|  |         movea.l 40(sp),a0
   16606:	|  |         movea.l 4(a0),a0
   1660a:	|  |         move.l 32(sp),d0
   1660e:	|  |         add.l d0,d0
   16610:	|  |         add.l d0,d0
   16612:	|  |         adda.l d0,a0
   16614:	|  |         move.l (a0),d0
   16616:	|  |         lsl.l #3,d0
   16618:	|  |         movea.l d1,a0
   1661a:	|  |         adda.l d0,a0
   1661c:	|  |         move.l 4(a0),d0
   16620:	|  |         move.l d0,-(sp)
   16622:	|  |         jsr 17472 <__floatsisf>
   16628:	|  |         addq.l #4,sp
   1662a:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1662e:	|  |         movea.l 1a8c0 <currentFloor>,a0
   16634:	|  |         move.l 4(a0),d1
   16638:	|  |         movea.l 40(sp),a0
   1663c:	|  |         movea.l 4(a0),a0
   16640:	|  |         move.l 28(sp),d0
   16644:	|  |         add.l d0,d0
   16646:	|  |         add.l d0,d0
   16648:	|  |         adda.l d0,a0
   1664a:	|  |         move.l (a0),d0
   1664c:	|  |         lsl.l #3,d0
   1664e:	|  |         movea.l d1,a0
   16650:	|  |         adda.l d0,a0
   16652:	|  |         move.l (a0),d0
   16654:	|  |         move.l d0,-(sp)
   16656:	|  |         jsr 17472 <__floatsisf>
   1665c:	|  |         addq.l #4,sp
   1665e:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16662:	|  |         movea.l 1a8c0 <currentFloor>,a0
   16668:	|  |         move.l 4(a0),d1
   1666c:	|  |         movea.l 40(sp),a0
   16670:	|  |         movea.l 4(a0),a0
   16674:	|  |         move.l 28(sp),d0
   16678:	|  |         add.l d0,d0
   1667a:	|  |         add.l d0,d0
   1667c:	|  |         adda.l d0,a0
   1667e:	|  |         move.l (a0),d0
   16680:	|  |         lsl.l #3,d0
   16682:	|  |         movea.l d1,a0
   16684:	|  |         adda.l d0,a0
   16686:	|  |         move.l 4(a0),d0
   1668a:	|  |         move.l d0,-(sp)
   1668c:	|  |         jsr 17472 <__floatsisf>
   16692:	|  |         addq.l #4,sp
   16694:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16698:	|  |         move.l 48(sp),-(sp)
   1669c:	|  |         jsr 17472 <__floatsisf>
   166a2:	|  |         addq.l #4,sp
   166a4:	|  |         move.l d0,-(sp)
   166a6:	|  |         move.l 20(sp),-(sp)
   166aa:	|  |         jsr 17614 <__lesf2>
   166b0:	|  |         addq.l #8,sp
   166b2:	|  |         tst.l d0
   166b4:	|  |     /-- bgt.s 166d4 <pointInFloorPolygon+0x132>
   166b6:	|  |     |   move.l 48(sp),-(sp)
   166ba:	|  |     |   jsr 17472 <__floatsisf>
   166c0:	|  |     |   addq.l #4,sp
   166c2:	|  |     |   move.l d0,-(sp)
   166c4:	|  |     |   move.l 12(sp),-(sp)
   166c8:	|  |     |   jsr 175de <__gtsf2>
   166ce:	|  |     |   addq.l #8,sp
   166d0:	|  |     |   tst.l d0
   166d2:	|  |  /--|-- bgt.s 16714 <pointInFloorPolygon+0x172>
   166d4:	|  |  |  \-> move.l 48(sp),-(sp)
   166d8:	|  |  |      jsr 17472 <__floatsisf>
   166de:	|  |  |      addq.l #4,sp
   166e0:	|  |  |      move.l d0,-(sp)
   166e2:	|  |  |      move.l 12(sp),-(sp)
   166e6:	|  |  |      jsr 17614 <__lesf2>
   166ec:	|  |  |      addq.l #8,sp
   166ee:	|  |  |      tst.l d0
   166f0:	|  |  |  /-- bgt.w 167aa <pointInFloorPolygon+0x208>
   166f4:	|  |  |  |   move.l 48(sp),-(sp)
   166f8:	|  |  |  |   jsr 17472 <__floatsisf>
   166fe:	|  |  |  |   addq.l #4,sp
   16700:	|  |  |  |   move.l d0,-(sp)
   16702:	|  |  |  |   move.l 20(sp),-(sp)
   16706:	|  |  |  |   jsr 175de <__gtsf2>
   1670c:	|  |  |  |   addq.l #8,sp
   1670e:	|  |  |  |   tst.l d0
   16710:	|  |  |  +-- ble.w 167aa <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16714:	|  |  \--|-> move.l 44(sp),-(sp)
   16718:	|  |     |   jsr 17472 <__floatsisf>
   1671e:	|  |     |   addq.l #4,sp
   16720:	|  |     |   move.l d0,d3
   16722:	|  |     |   move.l 20(sp),-(sp)
   16726:	|  |     |   move.l 16(sp),-(sp)
   1672a:	|  |     |   jsr 17766 <__subsf3>
   16730:	|  |     |   addq.l #8,sp
   16732:	|  |     |   move.l d0,d2
   16734:	|  |     |   move.l 48(sp),-(sp)
   16738:	|  |     |   jsr 17472 <__floatsisf>
   1673e:	|  |     |   addq.l #4,sp
   16740:	|  |     |   move.l 16(sp),-(sp)
   16744:	|  |     |   move.l d0,-(sp)
   16746:	|  |     |   jsr 17766 <__subsf3>
   1674c:	|  |     |   addq.l #8,sp
   1674e:	|  |     |   move.l d0,-(sp)
   16750:	|  |     |   move.l d2,-(sp)
   16752:	|  |     |   jsr 17524 <__mulsf3>
   16758:	|  |     |   addq.l #8,sp
   1675a:	|  |     |   move.l d0,d2
   1675c:	|  |     |   move.l 16(sp),-(sp)
   16760:	|  |     |   move.l 12(sp),-(sp)
   16764:	|  |     |   jsr 17766 <__subsf3>
   1676a:	|  |     |   addq.l #8,sp
   1676c:	|  |     |   move.l d0,-(sp)
   1676e:	|  |     |   move.l d2,-(sp)
   16770:	|  |     |   jsr 1731e <__divsf3>
   16776:	|  |     |   addq.l #8,sp
   16778:	|  |     |   move.l 20(sp),-(sp)
   1677c:	|  |     |   move.l d0,-(sp)
   1677e:	|  |     |   jsr 17224 <__addsf3>
   16784:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16786:	|  |     |   move.l d0,-(sp)
   16788:	|  |     |   move.l d3,-(sp)
   1678a:	|  |     |   jsr 17698 <__ltsf2>
   16790:	|  |     |   addq.l #8,sp
   16792:	|  |     |   tst.l d0
   16794:	|  |     +-- bge.s 167aa <pointInFloorPolygon+0x208>

			c = !c;
   16796:	|  |     |   tst.l 24(sp)
   1679a:	|  |     |   seq d0
   1679c:	|  |     |   neg.b d0
   1679e:	|  |     |   move.b d0,d0
   167a0:	|  |     |   andi.l #255,d0
   167a6:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   167aa:	|  |     \-> move.l 32(sp),d0
   167ae:	|  |         move.l d0,d1
   167b0:	|  |         addq.l #1,d1
   167b2:	|  |         move.l d1,32(sp)
   167b6:	|  |         move.l d0,28(sp)
   167ba:	|  \-------> movea.l 40(sp),a0
   167be:	|            move.l (a0),d0
   167c0:	|            cmp.l 32(sp),d0
   167c4:	\----------- bgt.w 165c4 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   167c8:	             tst.l 24(sp)
   167cc:	             sne d0
   167ce:	             neg.b d0
   167d0:	             move.b d0,d0
   167d2:	             andi.w #255,d0
}
   167d6:	             move.l (sp)+,d2
   167d8:	             move.l (sp)+,d3
   167da:	             lea 28(sp),sp
   167de:	             rts

000167e0 <setFloor>:

BOOL setFloor (int fileNum) {
   167e0:	                               lea -132(sp),sp
   167e4:	                               move.l a6,-(sp)
   167e6:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   167e8:	                               jsr 16448 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   167ee:	                               move.l 144(sp),-(sp)
   167f2:	                               jsr 6cb0 <openFileFromNum>
   167f8:	                               addq.l #4,sp
   167fa:	                               tst.l d0
   167fc:	                           /-- bne.s 16804 <setFloor+0x24>
   167fe:	                           |   clr.w d0
   16800:	/--------------------------|-- bra.w 16f50 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16804:	|                          \-> movea.l 1a8c0 <currentFloor>,a0
   1680a:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   1680e:	|                              move.l 1a78c <bigDataFile>,118(sp)
   16816:	|                              move.l 1a7ac <DOSBase>,d0
   1681c:	|                              movea.l d0,a6
   1681e:	|                              move.l 118(sp),d1
   16822:	|                              jsr -306(a6)
   16826:	|                              move.l d0,114(sp)
   1682a:	|                              move.l 114(sp),d0
   1682e:	|                              movea.l 1a8c0 <currentFloor>,a0
   16834:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16838:	|                              movea.l 1a8c0 <currentFloor>,a0
   1683e:	|                              move.l 8(a0),d0
   16842:	|                              lsl.l #3,d0
   16844:	|                              move.l d0,110(sp)
   16848:	|                              clr.l 106(sp)
   1684c:	|                              move.l 1a7a4 <SysBase>,d0
   16852:	|                              movea.l d0,a6
   16854:	|                              move.l 110(sp),d0
   16858:	|                              move.l 106(sp),d1
   1685c:	|                              jsr -684(a6)
   16860:	|                              move.l d0,102(sp)
   16864:	|                              move.l 102(sp),d0
   16868:	|                              movea.l 1a8c0 <currentFloor>,a0
   1686e:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16872:	|                              movea.l 1a8c0 <currentFloor>,a0
   16878:	|                              move.l 12(a0),d0
   1687c:	|                          /-- bne.s 16892 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   1687e:	|                          |   pea 19e8e <graphics.c.1c13408a+0x3de>
   16884:	|                          |   jsr 17036 <KPrintF>
   1688a:	|                          |   addq.l #4,sp
		return FALSE;
   1688c:	|                          |   clr.w d0
   1688e:	+--------------------------|-- bra.w 16f50 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16892:	|                          \-> clr.l 136(sp)
   16896:	|                    /-------- bra.w 169ae <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1689a:	|                 /--|-------> move.l 1a78c <bigDataFile>,26(sp)
   168a2:	|                 |  |         move.l 1a7ac <DOSBase>,d0
   168a8:	|                 |  |         movea.l d0,a6
   168aa:	|                 |  |         move.l 26(sp),d1
   168ae:	|                 |  |         jsr -306(a6)
   168b2:	|                 |  |         move.l d0,22(sp)
   168b6:	|                 |  |         move.l 22(sp),d1
   168ba:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   168c0:	|                 |  |         movea.l 12(a0),a0
   168c4:	|                 |  |         move.l 136(sp),d0
   168c8:	|                 |  |         lsl.l #3,d0
   168ca:	|                 |  |         adda.l d0,a0
   168cc:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   168ce:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   168d4:	|                 |  |         move.l 12(a0),d1
   168d8:	|                 |  |         move.l 136(sp),d0
   168dc:	|                 |  |         lsl.l #3,d0
   168de:	|                 |  |         movea.l d1,a0
   168e0:	|                 |  |         adda.l d0,a0
   168e2:	|                 |  |         move.l (a0),d0
   168e4:	|                 |  |         add.l d0,d0
   168e6:	|                 |  |         add.l d0,d0
   168e8:	|                 |  |         move.l d0,18(sp)
   168ec:	|                 |  |         clr.l 14(sp)
   168f0:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   168f6:	|                 |  |         movea.l d0,a6
   168f8:	|                 |  |         move.l 18(sp),d0
   168fc:	|                 |  |         move.l 14(sp),d1
   16900:	|                 |  |         jsr -684(a6)
   16904:	|                 |  |         move.l d0,10(sp)
   16908:	|                 |  |         move.l 10(sp),d1
   1690c:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16912:	|                 |  |         movea.l 12(a0),a0
   16916:	|                 |  |         move.l 136(sp),d0
   1691a:	|                 |  |         lsl.l #3,d0
   1691c:	|                 |  |         adda.l d0,a0
   1691e:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16922:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16928:	|                 |  |         move.l 12(a0),d1
   1692c:	|                 |  |         move.l 136(sp),d0
   16930:	|                 |  |         lsl.l #3,d0
   16932:	|                 |  |         movea.l d1,a0
   16934:	|                 |  |         adda.l d0,a0
   16936:	|                 |  |         move.l 4(a0),d0
   1693a:	|                 |  |     /-- bne.s 16950 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   1693c:	|                 |  |     |   pea 19e8e <graphics.c.1c13408a+0x3de>
   16942:	|                 |  |     |   jsr 17036 <KPrintF>
   16948:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1694a:	|                 |  |     |   clr.w d0
   1694c:	+-----------------|--|-----|-- bra.w 16f50 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16950:	|                 |  |     \-> clr.l 132(sp)
   16954:	|                 |  |     /-- bra.s 1698e <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16956:	|                 |  |  /--|-> move.l 1a78c <bigDataFile>,d1
   1695c:	|                 |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16962:	|                 |  |  |  |   movea.l 12(a0),a0
   16966:	|                 |  |  |  |   move.l 136(sp),d0
   1696a:	|                 |  |  |  |   lsl.l #3,d0
   1696c:	|                 |  |  |  |   adda.l d0,a0
   1696e:	|                 |  |  |  |   movea.l 4(a0),a0
   16972:	|                 |  |  |  |   move.l 132(sp),d0
   16976:	|                 |  |  |  |   add.l d0,d0
   16978:	|                 |  |  |  |   add.l d0,d0
   1697a:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   1697e:	|                 |  |  |  |   move.l d1,-(sp)
   16980:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16986:	|                 |  |  |  |   addq.l #4,sp
   16988:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1698a:	|                 |  |  |  |   addq.l #1,132(sp)
   1698e:	|                 |  |  |  \-> movea.l 1a8c0 <currentFloor>,a0
   16994:	|                 |  |  |      move.l 12(a0),d1
   16998:	|                 |  |  |      move.l 136(sp),d0
   1699c:	|                 |  |  |      lsl.l #3,d0
   1699e:	|                 |  |  |      movea.l d1,a0
   169a0:	|                 |  |  |      adda.l d0,a0
   169a2:	|                 |  |  |      move.l (a0),d0
   169a4:	|                 |  |  |      cmp.l 132(sp),d0
   169a8:	|                 |  |  \----- bgt.s 16956 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   169aa:	|                 |  |         addq.l #1,136(sp)
   169ae:	|                 |  \-------> movea.l 1a8c0 <currentFloor>,a0
   169b4:	|                 |            move.l 8(a0),d0
   169b8:	|                 |            cmp.l 136(sp),d0
   169bc:	|                 \----------- bgt.w 1689a <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   169c0:	|                              move.l 1a78c <bigDataFile>,d0
   169c6:	|                              move.l d0,-(sp)
   169c8:	|                              jsr 6bc <get2bytes>
   169ce:	|                              addq.l #4,sp
   169d0:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   169d4:	|                              move.l 136(sp),d0
   169d8:	|                              lsl.l #3,d0
   169da:	|                              move.l d0,98(sp)
   169de:	|                              clr.l 94(sp)
   169e2:	|                              move.l 1a7a4 <SysBase>,d0
   169e8:	|                              movea.l d0,a6
   169ea:	|                              move.l 98(sp),d0
   169ee:	|                              move.l 94(sp),d1
   169f2:	|                              jsr -684(a6)
   169f6:	|                              move.l d0,90(sp)
   169fa:	|                              move.l 90(sp),d0
   169fe:	|                              movea.l 1a8c0 <currentFloor>,a0
   16a04:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16a08:	|                              movea.l 1a8c0 <currentFloor>,a0
   16a0e:	|                              move.l 4(a0),d0
   16a12:	|                          /-- bne.s 16a28 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16a14:	|                          |   pea 19e8e <graphics.c.1c13408a+0x3de>
   16a1a:	|                          |   jsr 17036 <KPrintF>
   16a20:	|                          |   addq.l #4,sp
		return FALSE;
   16a22:	|                          |   clr.w d0
   16a24:	+--------------------------|-- bra.w 16f50 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16a28:	|                          \-> clr.l 132(sp)
   16a2c:	|                          /-- bra.s 16a80 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16a2e:	|                       /--|-> move.l 1a78c <bigDataFile>,d1
   16a34:	|                       |  |   movea.l 1a8c0 <currentFloor>,a0
   16a3a:	|                       |  |   movea.l 4(a0),a0
   16a3e:	|                       |  |   move.l 132(sp),d0
   16a42:	|                       |  |   lsl.l #3,d0
   16a44:	|                       |  |   lea (0,a0,d0.l),a2
   16a48:	|                       |  |   move.l d1,-(sp)
   16a4a:	|                       |  |   jsr 6bc <get2bytes>
   16a50:	|                       |  |   addq.l #4,sp
   16a52:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16a54:	|                       |  |   move.l 1a78c <bigDataFile>,d1
   16a5a:	|                       |  |   movea.l 1a8c0 <currentFloor>,a0
   16a60:	|                       |  |   movea.l 4(a0),a0
   16a64:	|                       |  |   move.l 132(sp),d0
   16a68:	|                       |  |   lsl.l #3,d0
   16a6a:	|                       |  |   lea (0,a0,d0.l),a2
   16a6e:	|                       |  |   move.l d1,-(sp)
   16a70:	|                       |  |   jsr 6bc <get2bytes>
   16a76:	|                       |  |   addq.l #4,sp
   16a78:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16a7c:	|                       |  |   addq.l #1,132(sp)
   16a80:	|                       |  \-> move.l 132(sp),d0
   16a84:	|                       |      cmp.l 136(sp),d0
   16a88:	|                       \----- blt.s 16a2e <setFloor+0x24e>
	}

	finishAccess ();
   16a8a:	|                              jsr 6ba8 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16a90:	|                              movea.l 1a8c0 <currentFloor>,a0
   16a96:	|                              move.l 8(a0),d0
   16a9a:	|                              add.l d0,d0
   16a9c:	|                              add.l d0,d0
   16a9e:	|                              move.l d0,86(sp)
   16aa2:	|                              clr.l 82(sp)
   16aa6:	|                              move.l 1a7a4 <SysBase>,d0
   16aac:	|                              movea.l d0,a6
   16aae:	|                              move.l 86(sp),d0
   16ab2:	|                              move.l 82(sp),d1
   16ab6:	|                              jsr -684(a6)
   16aba:	|                              move.l d0,78(sp)
   16abe:	|                              move.l 78(sp),d0
   16ac2:	|                              movea.l 1a8c0 <currentFloor>,a0
   16ac8:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16acc:	|                              movea.l 1a8c0 <currentFloor>,a0
   16ad2:	|                              move.l 8(a0),d0
   16ad6:	|                              add.l d0,d0
   16ad8:	|                              add.l d0,d0
   16ada:	|                              move.l d0,74(sp)
   16ade:	|                              clr.l 70(sp)
   16ae2:	|                              move.l 1a7a4 <SysBase>,d0
   16ae8:	|                              movea.l d0,a6
   16aea:	|                              move.l 74(sp),d0
   16aee:	|                              move.l 70(sp),d1
   16af2:	|                              jsr -684(a6)
   16af6:	|                              move.l d0,66(sp)
   16afa:	|                              move.l 66(sp),d0
   16afe:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16b02:	|                              movea.l 1a8c0 <currentFloor>,a0
   16b08:	|                              move.l 16(a0),d0
   16b0c:	|                          /-- bne.s 16b22 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16b0e:	|                          |   pea 19e8e <graphics.c.1c13408a+0x3de>
   16b14:	|                          |   jsr 17036 <KPrintF>
   16b1a:	|                          |   addq.l #4,sp
		return FALSE;
   16b1c:	|                          |   clr.w d0
   16b1e:	+--------------------------|-- bra.w 16f50 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b22:	|                          \-> clr.l 136(sp)
   16b26:	|                    /-------- bra.w 16c4a <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16b2a:	|                 /--|-------> movea.l 1a8c0 <currentFloor>,a0
   16b30:	|                 |  |         move.l 8(a0),d0
   16b34:	|                 |  |         add.l d0,d0
   16b36:	|                 |  |         add.l d0,d0
   16b38:	|                 |  |         move.l d0,50(sp)
   16b3c:	|                 |  |         clr.l 46(sp)
   16b40:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   16b46:	|                 |  |         movea.l d0,a6
   16b48:	|                 |  |         move.l 50(sp),d0
   16b4c:	|                 |  |         move.l 46(sp),d1
   16b50:	|                 |  |         jsr -684(a6)
   16b54:	|                 |  |         move.l d0,42(sp)
   16b58:	|                 |  |         move.l 42(sp),d0
   16b5c:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16b62:	|                 |  |         movea.l 16(a0),a0
   16b66:	|                 |  |         move.l 136(sp),d1
   16b6a:	|                 |  |         add.l d1,d1
   16b6c:	|                 |  |         add.l d1,d1
   16b6e:	|                 |  |         adda.l d1,a0
   16b70:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16b72:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16b78:	|                 |  |         move.l 8(a0),d0
   16b7c:	|                 |  |         add.l d0,d0
   16b7e:	|                 |  |         add.l d0,d0
   16b80:	|                 |  |         move.l d0,38(sp)
   16b84:	|                 |  |         clr.l 34(sp)
   16b88:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   16b8e:	|                 |  |         movea.l d0,a6
   16b90:	|                 |  |         move.l 38(sp),d0
   16b94:	|                 |  |         move.l 34(sp),d1
   16b98:	|                 |  |         jsr -684(a6)
   16b9c:	|                 |  |         move.l d0,30(sp)
   16ba0:	|                 |  |         move.l 30(sp),d1
   16ba4:	|                 |  |         move.l 136(sp),d0
   16ba8:	|                 |  |         add.l d0,d0
   16baa:	|                 |  |         add.l d0,d0
   16bac:	|                 |  |         movea.l 62(sp),a0
   16bb0:	|                 |  |         adda.l d0,a0
   16bb2:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16bb4:	|                 |  |         movea.l 1a8c0 <currentFloor>,a0
   16bba:	|                 |  |         move.l 16(a0),d1
   16bbe:	|                 |  |         move.l 136(sp),d0
   16bc2:	|                 |  |         add.l d0,d0
   16bc4:	|                 |  |         add.l d0,d0
   16bc6:	|                 |  |         movea.l d1,a0
   16bc8:	|                 |  |         adda.l d0,a0
   16bca:	|                 |  |         move.l (a0),d0
   16bcc:	|                 |  |     /-- bne.s 16be2 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16bce:	|                 |  |     |   pea 19e8e <graphics.c.1c13408a+0x3de>
   16bd4:	|                 |  |     |   jsr 17036 <KPrintF>
   16bda:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16bdc:	|                 |  |     |   clr.w d0
   16bde:	+-----------------|--|-----|-- bra.w 16f50 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16be2:	|                 |  |     \-> clr.l 132(sp)
   16be6:	|                 |  |     /-- bra.s 16c36 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16be8:	|                 |  |  /--|-> movea.l 1a8c0 <currentFloor>,a0
   16bee:	|                 |  |  |  |   move.l 16(a0),d1
   16bf2:	|                 |  |  |  |   move.l 136(sp),d0
   16bf6:	|                 |  |  |  |   add.l d0,d0
   16bf8:	|                 |  |  |  |   add.l d0,d0
   16bfa:	|                 |  |  |  |   movea.l d1,a0
   16bfc:	|                 |  |  |  |   adda.l d0,a0
   16bfe:	|                 |  |  |  |   move.l (a0),d1
   16c00:	|                 |  |  |  |   move.l 132(sp),d0
   16c04:	|                 |  |  |  |   add.l d0,d0
   16c06:	|                 |  |  |  |   add.l d0,d0
   16c08:	|                 |  |  |  |   movea.l d1,a0
   16c0a:	|                 |  |  |  |   adda.l d0,a0
   16c0c:	|                 |  |  |  |   moveq #-1,d1
   16c0e:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16c10:	|                 |  |  |  |   move.l 136(sp),d0
   16c14:	|                 |  |  |  |   add.l d0,d0
   16c16:	|                 |  |  |  |   add.l d0,d0
   16c18:	|                 |  |  |  |   movea.l 62(sp),a0
   16c1c:	|                 |  |  |  |   adda.l d0,a0
   16c1e:	|                 |  |  |  |   move.l (a0),d1
   16c20:	|                 |  |  |  |   move.l 132(sp),d0
   16c24:	|                 |  |  |  |   add.l d0,d0
   16c26:	|                 |  |  |  |   add.l d0,d0
   16c28:	|                 |  |  |  |   movea.l d1,a0
   16c2a:	|                 |  |  |  |   adda.l d0,a0
   16c2c:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16c32:	|                 |  |  |  |   addq.l #1,132(sp)
   16c36:	|                 |  |  |  \-> movea.l 1a8c0 <currentFloor>,a0
   16c3c:	|                 |  |  |      move.l 8(a0),d0
   16c40:	|                 |  |  |      cmp.l 132(sp),d0
   16c44:	|                 |  |  \----- bgt.s 16be8 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c46:	|                 |  |         addq.l #1,136(sp)
   16c4a:	|                 |  \-------> movea.l 1a8c0 <currentFloor>,a0
   16c50:	|                 |            move.l 8(a0),d0
   16c54:	|                 |            cmp.l 136(sp),d0
   16c58:	|                 \----------- bgt.w 16b2a <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c5c:	|                              clr.l 136(sp)
   16c60:	|              /-------------- bra.w 16d66 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16c64:	|           /--|-------------> clr.l 132(sp)
   16c68:	|           |  |     /-------- bra.w 16d50 <setFloor+0x570>
			if (i != j) {
   16c6c:	|           |  |  /--|-------> move.l 136(sp),d0
   16c70:	|           |  |  |  |         cmp.l 132(sp),d0
   16c74:	|           |  |  |  |     /-- beq.w 16d06 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16c78:	|           |  |  |  |     |   movea.l 1a8c0 <currentFloor>,a0
   16c7e:	|           |  |  |  |     |   move.l 12(a0),d1
   16c82:	|           |  |  |  |     |   move.l 132(sp),d0
   16c86:	|           |  |  |  |     |   lsl.l #3,d0
   16c88:	|           |  |  |  |     |   movea.l d1,a1
   16c8a:	|           |  |  |  |     |   adda.l d0,a1
   16c8c:	|           |  |  |  |     |   movea.l 1a8c0 <currentFloor>,a0
   16c92:	|           |  |  |  |     |   move.l 12(a0),d1
   16c96:	|           |  |  |  |     |   move.l 136(sp),d0
   16c9a:	|           |  |  |  |     |   lsl.l #3,d0
   16c9c:	|           |  |  |  |     |   movea.l d1,a0
   16c9e:	|           |  |  |  |     |   adda.l d0,a0
   16ca0:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16ca4:	|           |  |  |  |     |   move.l (a1),-(sp)
   16ca6:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16caa:	|           |  |  |  |     |   move.l (a0),-(sp)
   16cac:	|           |  |  |  |     |   jsr 16538 <polysShareSide>
   16cb2:	|           |  |  |  |     |   lea 16(sp),sp
   16cb6:	|           |  |  |  |     |   tst.w d0
   16cb8:	|           |  |  |  |  /--|-- beq.w 16d4c <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16cbc:	|           |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16cc2:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16cc6:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16cca:	|           |  |  |  |  |  |   add.l d0,d0
   16ccc:	|           |  |  |  |  |  |   add.l d0,d0
   16cce:	|           |  |  |  |  |  |   movea.l d1,a0
   16cd0:	|           |  |  |  |  |  |   adda.l d0,a0
   16cd2:	|           |  |  |  |  |  |   move.l (a0),d1
   16cd4:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16cd8:	|           |  |  |  |  |  |   add.l d0,d0
   16cda:	|           |  |  |  |  |  |   add.l d0,d0
   16cdc:	|           |  |  |  |  |  |   movea.l d1,a0
   16cde:	|           |  |  |  |  |  |   adda.l d0,a0
   16ce0:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16ce4:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16ce8:	|           |  |  |  |  |  |   add.l d0,d0
   16cea:	|           |  |  |  |  |  |   add.l d0,d0
   16cec:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16cf0:	|           |  |  |  |  |  |   adda.l d0,a0
   16cf2:	|           |  |  |  |  |  |   move.l (a0),d1
   16cf4:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16cf8:	|           |  |  |  |  |  |   add.l d0,d0
   16cfa:	|           |  |  |  |  |  |   add.l d0,d0
   16cfc:	|           |  |  |  |  |  |   movea.l d1,a0
   16cfe:	|           |  |  |  |  |  |   adda.l d0,a0
   16d00:	|           |  |  |  |  |  |   moveq #1,d1
   16d02:	|           |  |  |  |  |  |   move.l d1,(a0)
   16d04:	|           |  |  |  |  +--|-- bra.s 16d4c <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16d06:	|           |  |  |  |  |  \-> movea.l 1a8c0 <currentFloor>,a0
   16d0c:	|           |  |  |  |  |      move.l 16(a0),d1
   16d10:	|           |  |  |  |  |      move.l 136(sp),d0
   16d14:	|           |  |  |  |  |      add.l d0,d0
   16d16:	|           |  |  |  |  |      add.l d0,d0
   16d18:	|           |  |  |  |  |      movea.l d1,a0
   16d1a:	|           |  |  |  |  |      adda.l d0,a0
   16d1c:	|           |  |  |  |  |      move.l (a0),d1
   16d1e:	|           |  |  |  |  |      move.l 132(sp),d0
   16d22:	|           |  |  |  |  |      add.l d0,d0
   16d24:	|           |  |  |  |  |      add.l d0,d0
   16d26:	|           |  |  |  |  |      movea.l d1,a0
   16d28:	|           |  |  |  |  |      adda.l d0,a0
   16d2a:	|           |  |  |  |  |      moveq #-2,d0
   16d2c:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16d2e:	|           |  |  |  |  |      move.l 136(sp),d0
   16d32:	|           |  |  |  |  |      add.l d0,d0
   16d34:	|           |  |  |  |  |      add.l d0,d0
   16d36:	|           |  |  |  |  |      movea.l 62(sp),a0
   16d3a:	|           |  |  |  |  |      adda.l d0,a0
   16d3c:	|           |  |  |  |  |      move.l (a0),d1
   16d3e:	|           |  |  |  |  |      move.l 132(sp),d0
   16d42:	|           |  |  |  |  |      add.l d0,d0
   16d44:	|           |  |  |  |  |      add.l d0,d0
   16d46:	|           |  |  |  |  |      movea.l d1,a0
   16d48:	|           |  |  |  |  |      adda.l d0,a0
   16d4a:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d4c:	|           |  |  |  |  \----> addq.l #1,132(sp)
   16d50:	|           |  |  |  \-------> movea.l 1a8c0 <currentFloor>,a0
   16d56:	|           |  |  |            move.l 8(a0),d0
   16d5a:	|           |  |  |            cmp.l 132(sp),d0
   16d5e:	|           |  |  \----------- bgt.w 16c6c <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d62:	|           |  |               addq.l #1,136(sp)
   16d66:	|           |  \-------------> movea.l 1a8c0 <currentFloor>,a0
   16d6c:	|           |                  move.l 8(a0),d0
   16d70:	|           |                  cmp.l 136(sp),d0
   16d74:	|           \----------------- bgt.w 16c64 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16d78:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16d7c:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16d80:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d84:	|  |                           clr.l 136(sp)
   16d88:	|  |     /-------------------- bra.w 16ede <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d8c:	|  |  /--|-------------------> clr.l 132(sp)
   16d90:	|  |  |  |     /-------------- bra.w 16ec8 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16d94:	|  |  |  |  /--|-------------> movea.l 1a8c0 <currentFloor>,a0
   16d9a:	|  |  |  |  |  |               move.l 16(a0),d1
   16d9e:	|  |  |  |  |  |               move.l 136(sp),d0
   16da2:	|  |  |  |  |  |               add.l d0,d0
   16da4:	|  |  |  |  |  |               add.l d0,d0
   16da6:	|  |  |  |  |  |               movea.l d1,a0
   16da8:	|  |  |  |  |  |               adda.l d0,a0
   16daa:	|  |  |  |  |  |               move.l (a0),d1
   16dac:	|  |  |  |  |  |               move.l 132(sp),d0
   16db0:	|  |  |  |  |  |               add.l d0,d0
   16db2:	|  |  |  |  |  |               add.l d0,d0
   16db4:	|  |  |  |  |  |               movea.l d1,a0
   16db6:	|  |  |  |  |  |               adda.l d0,a0
   16db8:	|  |  |  |  |  |               move.l (a0),d0
   16dba:	|  |  |  |  |  |               moveq #-1,d1
   16dbc:	|  |  |  |  |  |               cmp.l d0,d1
   16dbe:	|  |  |  |  |  |  /----------- bne.w 16ec4 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16dc2:	|  |  |  |  |  |  |            clr.l 122(sp)
   16dc6:	|  |  |  |  |  |  |     /----- bra.w 16eb2 <setFloor+0x6d2>
						if (d != i && d != j) {
   16dca:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   16dce:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16dd2:	|  |  |  |  |  |  |  |  |  /-- beq.w 16eae <setFloor+0x6ce>
   16dd6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16dda:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16dde:	|  |  |  |  |  |  |  |  |  +-- beq.w 16eae <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16de2:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16de8:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16dec:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16df0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16df2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16df4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16df6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16df8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16dfa:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16dfe:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e00:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e02:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e04:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e06:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16e08:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16e0c:	|  |  |  |  |  |  |  |  |  +-- bne.w 16eae <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16e10:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16e16:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16e1a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16e1e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e20:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e22:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e24:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e26:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e28:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16e2c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e2e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e30:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e32:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e34:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16e36:	|  |  |  |  |  |  |  |  |  +-- bmi.s 16eae <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16e38:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16e3c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e3e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e40:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16e44:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e46:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e48:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16e4c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e4e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e50:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e52:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e54:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16e56:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16e5a:	|  |  |  |  |  |  |  |  |  +-- bgt.s 16eae <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16e5c:	|  |  |  |  |  |  |  |  |  |   movea.l 1a8c0 <currentFloor>,a0
   16e62:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16e66:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16e6a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e6c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e6e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e70:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e72:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e74:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16e78:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e7a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e7c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e7e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e80:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   16e84:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16e88:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e8a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e8c:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16e90:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e92:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e94:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16e98:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e9a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e9c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e9e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ea0:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16ea4:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16ea6:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16ea8:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16eae:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   16eb2:	|  |  |  |  |  |  |  |  \----> movea.l 1a8c0 <currentFloor>,a0
   16eb8:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   16ebc:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   16ec0:	|  |  |  |  |  |  |  \-------- bgt.w 16dca <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ec4:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   16ec8:	|  |  |  |  |  \-------------> movea.l 1a8c0 <currentFloor>,a0
   16ece:	|  |  |  |  |                  move.l 8(a0),d0
   16ed2:	|  |  |  |  |                  cmp.l 132(sp),d0
   16ed6:	|  |  |  |  \----------------- bgt.w 16d94 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16eda:	|  |  |  |                     addq.l #1,136(sp)
   16ede:	|  |  |  \-------------------> movea.l 1a8c0 <currentFloor>,a0
   16ee4:	|  |  |                        move.l 8(a0),d0
   16ee8:	|  |  |                        cmp.l 136(sp),d0
   16eec:	|  |  \----------------------- bgt.w 16d8c <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   16ef0:	|  |                           tst.w 130(sp)
   16ef4:	|  \-------------------------- bne.w 16d7c <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ef8:	|                              clr.l 136(sp)
   16efc:	|                          /-- bra.s 16f24 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   16efe:	|                       /--|-> move.l 136(sp),d0
   16f02:	|                       |  |   add.l d0,d0
   16f04:	|                       |  |   add.l d0,d0
   16f06:	|                       |  |   movea.l 62(sp),a0
   16f0a:	|                       |  |   adda.l d0,a0
   16f0c:	|                       |  |   move.l (a0),54(sp)
   16f10:	|                       |  |   move.l 1a7a4 <SysBase>,d0
   16f16:	|                       |  |   movea.l d0,a6
   16f18:	|                       |  |   movea.l 54(sp),a1
   16f1c:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f20:	|                       |  |   addq.l #1,136(sp)
   16f24:	|                       |  \-> movea.l 1a8c0 <currentFloor>,a0
   16f2a:	|                       |      move.l 8(a0),d0
   16f2e:	|                       |      cmp.l 136(sp),d0
   16f32:	|                       \----- bgt.s 16efe <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   16f34:	|                              move.l 62(sp),58(sp)
   16f3a:	|                              move.l 1a7a4 <SysBase>,d0
   16f40:	|                              movea.l d0,a6
   16f42:	|                              movea.l 58(sp),a1
   16f46:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   16f4a:	|                              clr.l 62(sp)

	return TRUE;
   16f4e:	|                              moveq #1,d0
}
   16f50:	\----------------------------> movea.l (sp)+,a2
   16f52:	                               movea.l (sp)+,a6
   16f54:	                               lea 132(sp),sp
   16f58:	                               rts

00016f5a <setFloorNull>:

void setFloorNull () {
	killFloor ();
   16f5a:	jsr 16448 <killFloor>
	noFloor ();
   16f60:	jsr 1636c <noFloor>
   16f66:	nop
   16f68:	rts

00016f6a <WaitVbl>:
void WaitVbl() {
   16f6a:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16f6c:	   /-> movea.l #14675972,a0
   16f72:	   |   move.l (a0),d0
   16f74:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   16f76:	   |   move.l (sp),d0
   16f78:	   |   andi.l #130816,d0
   16f7e:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   16f80:	   |   move.l (sp),d0
   16f82:	   |   cmpi.l #76800,d0
   16f88:	   \-- beq.s 16f6c <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16f8a:	/----> movea.l #14675972,a0
   16f90:	|      move.l (a0),d0
   16f92:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   16f96:	|      move.l 4(sp),d0
   16f9a:	|      andi.l #130816,d0
   16fa0:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   16fa4:	|      move.l 4(sp),d0
   16fa8:	|      cmpi.l #76800,d0
   16fae:	|  /-- beq.s 16fb2 <WaitVbl+0x48>
	while (1) {
   16fb0:	\--|-- bra.s 16f8a <WaitVbl+0x20>
			break;
   16fb2:	   \-> nop
}
   16fb4:	       nop
   16fb6:	       addq.l #8,sp
   16fb8:	       rts

00016fba <memset>:
void* memset(void *dest, int val, unsigned long len) {
   16fba:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   16fbc:	       move.l 8(sp),(sp)
	while(len-- > 0)
   16fc0:	   /-- bra.s 16fd2 <memset+0x18>
		*ptr++ = val;
   16fc2:	/--|-> move.l (sp),d0
   16fc4:	|  |   move.l d0,d1
   16fc6:	|  |   addq.l #1,d1
   16fc8:	|  |   move.l d1,(sp)
   16fca:	|  |   move.l 12(sp),d1
   16fce:	|  |   movea.l d0,a0
   16fd0:	|  |   move.b d1,(a0)
	while(len-- > 0)
   16fd2:	|  \-> move.l 16(sp),d0
   16fd6:	|      move.l d0,d1
   16fd8:	|      subq.l #1,d1
   16fda:	|      move.l d1,16(sp)
   16fde:	|      tst.l d0
   16fe0:	\----- bne.s 16fc2 <memset+0x8>
	return dest;
   16fe2:	       move.l 8(sp),d0
}
   16fe6:	       addq.l #4,sp
   16fe8:	       rts

00016fea <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   16fea:	       subq.l #8,sp
   16fec:	       move.l d2,-(sp)
	char *d = (char *)dest;
   16fee:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   16ff4:	       move.l 20(sp),4(sp)
	while(len--)
   16ffa:	   /-- bra.s 1701c <memcpy+0x32>
		*d++ = *s++;
   16ffc:	/--|-> move.l 4(sp),d1
   17000:	|  |   move.l d1,d0
   17002:	|  |   addq.l #1,d0
   17004:	|  |   move.l d0,4(sp)
   17008:	|  |   move.l 8(sp),d0
   1700c:	|  |   move.l d0,d2
   1700e:	|  |   addq.l #1,d2
   17010:	|  |   move.l d2,8(sp)
   17014:	|  |   movea.l d1,a0
   17016:	|  |   move.b (a0),d1
   17018:	|  |   movea.l d0,a0
   1701a:	|  |   move.b d1,(a0)
	while(len--)
   1701c:	|  \-> move.l 24(sp),d0
   17020:	|      move.l d0,d1
   17022:	|      subq.l #1,d1
   17024:	|      move.l d1,24(sp)
   17028:	|      tst.l d0
   1702a:	\----- bne.s 16ffc <memcpy+0x12>
	return dest;
   1702c:	       move.l 16(sp),d0
}
   17030:	       move.l (sp)+,d2
   17032:	       addq.l #8,sp
   17034:	       rts

00017036 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   17036:	       lea -128(sp),sp
   1703a:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1703e:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec4e68>,d0
   17044:	       cmpi.w #20153,d0
   17048:	   /-- beq.s 1706c <KPrintF+0x36>
   1704a:	   |   cmpi.w #-24562,d0
   1704e:	   +-- beq.s 1706c <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17050:	   |   movea.l 1a7a4 <SysBase>,a6
   17056:	   |   movea.l 144(sp),a0
   1705a:	   |   lea 148(sp),a1
   1705e:	   |   lea 17afc <KPutCharX>,a2
   17064:	   |   suba.l a3,a3
   17066:	   |   jsr -522(a6)
}
   1706a:	/--|-- bra.s 17096 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1706c:	|  \-> movea.l 1a7a4 <SysBase>,a6
   17072:	|      movea.l 144(sp),a0
   17076:	|      lea 148(sp),a1
   1707a:	|      lea 17b0a <PutChar>,a2
   17080:	|      lea 12(sp),a3
   17084:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   17088:	|      move.l a3,-(sp)
   1708a:	|      pea 56 <_start+0x56>
   1708e:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec4e68>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17094:	|      addq.l #8,sp
}
   17096:	\----> movem.l (sp)+,a2-a3/a6
   1709a:	       lea 128(sp),sp
   1709e:	       rts

000170a0 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   170a0:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   170a2:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   170a8:	       movea.l (sp),a0
   170aa:	       move.w (a0),d0
   170ac:	       cmpi.w #20153,d0
   170b0:	   /-- beq.s 170bc <debug_cmd+0x1c>
   170b2:	   |   movea.l (sp),a0
   170b4:	   |   move.w (a0),d0
   170b6:	   |   cmpi.w #-24562,d0
   170ba:	/--|-- bne.s 170da <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   170bc:	|  \-> move.l 20(sp),-(sp)
   170c0:	|      move.l 20(sp),-(sp)
   170c4:	|      move.l 20(sp),-(sp)
   170c8:	|      move.l 20(sp),-(sp)
   170cc:	|      pea 58 <_start+0x58>
   170d0:	|      movea.l 20(sp),a0
   170d4:	|      jsr (a0)
   170d6:	|      lea 20(sp),sp
	}
}
   170da:	\----> nop
   170dc:	       addq.l #4,sp
   170de:	       rts

000170e0 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   170e0:	       move.l d2,-(sp)
	while(*source && --num > 0)
   170e2:	   /-- bra.s 17104 <my_strncpy+0x24>
		*destination++ = *source++;
   170e4:	/--|-> move.l 12(sp),d1
   170e8:	|  |   move.l d1,d0
   170ea:	|  |   addq.l #1,d0
   170ec:	|  |   move.l d0,12(sp)
   170f0:	|  |   move.l 8(sp),d0
   170f4:	|  |   move.l d0,d2
   170f6:	|  |   addq.l #1,d2
   170f8:	|  |   move.l d2,8(sp)
   170fc:	|  |   movea.l d1,a0
   170fe:	|  |   move.b (a0),d1
   17100:	|  |   movea.l d0,a0
   17102:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17104:	|  \-> movea.l 12(sp),a0
   17108:	|      move.b (a0),d0
   1710a:	|  /-- beq.s 17112 <my_strncpy+0x32>
   1710c:	|  |   subq.l #1,16(sp)
   17110:	\--|-- bne.s 170e4 <my_strncpy+0x4>
	*destination = '\0';
   17112:	   \-> movea.l 8(sp),a0
   17116:	       clr.b (a0)
}
   17118:	       nop
   1711a:	       move.l (sp)+,d2
   1711c:	       rts

0001711e <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   1711e:	    lea -60(sp),sp
   17122:	    movea.l 72(sp),a1
   17126:	    movea.l 76(sp),a0
   1712a:	    move.l 80(sp),d1
   1712e:	    move.l 84(sp),d0
   17132:	    movea.w a1,a1
   17134:	    move.w a1,8(sp)
   17138:	    movea.w a0,a0
   1713a:	    move.w a0,6(sp)
   1713e:	    move.w d1,d1
   17140:	    move.w d1,4(sp)
   17144:	    move.w d0,d0
   17146:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1714a:	    lea 10(sp),a0
   1714e:	    clr.l (a0)
   17150:	    addq.l #4,a0
   17152:	    clr.l (a0)
   17154:	    addq.l #4,a0
   17156:	    clr.l (a0)
   17158:	    addq.l #4,a0
   1715a:	    clr.l (a0)
   1715c:	    addq.l #4,a0
   1715e:	    clr.l (a0)
   17160:	    addq.l #4,a0
   17162:	    clr.l (a0)
   17164:	    addq.l #4,a0
   17166:	    clr.l (a0)
   17168:	    addq.l #4,a0
   1716a:	    clr.l (a0)
   1716c:	    addq.l #4,a0
   1716e:	    clr.l (a0)
   17170:	    addq.l #4,a0
   17172:	    clr.l (a0)
   17174:	    addq.l #4,a0
   17176:	    clr.l (a0)
   17178:	    addq.l #4,a0
   1717a:	    clr.l (a0)
   1717c:	    addq.l #4,a0
   1717e:	    clr.w (a0)
   17180:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17182:	    move.l 64(sp),d0
	struct debug_resource resource = {
   17186:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   1718a:	    move.w 8(sp),d0
   1718e:	/-- bpl.s 17192 <debug_register_bitmap+0x74>
   17190:	|   addq.w #7,d0
   17192:	\-> asr.w #3,d0
   17194:	    movea.w d0,a0
   17196:	    movea.w 6(sp),a1
   1719a:	    move.l a1,-(sp)
   1719c:	    move.l a0,-(sp)
   1719e:	    jsr 179f4 <__mulsi3>
   171a4:	    addq.l #8,sp
   171a6:	    movea.w 4(sp),a0
   171aa:	    move.l a0,-(sp)
   171ac:	    move.l d0,-(sp)
   171ae:	    jsr 179f4 <__mulsi3>
   171b4:	    addq.l #8,sp
	struct debug_resource resource = {
   171b6:	    move.l d0,14(sp)
   171ba:	    move.w 2(sp),52(sp)
   171c0:	    move.w 8(sp),54(sp)
   171c6:	    move.w 6(sp),56(sp)
   171cc:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   171d2:	    moveq #0,d0
   171d4:	    move.w 2(sp),d0
   171d8:	    moveq #2,d1
   171da:	    and.l d1,d0
   171dc:	/-- beq.s 171e8 <debug_register_bitmap+0xca>
		resource.size *= 2;
   171de:	|   move.l 14(sp),d0
   171e2:	|   add.l d0,d0
   171e4:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   171e8:	\-> pea 20 <_start+0x20>
   171ec:	    move.l 72(sp),-(sp)
   171f0:	    lea 18(sp),a0
   171f4:	    move.l a0,d0
   171f6:	    addq.l #8,d0
   171f8:	    move.l d0,-(sp)
   171fa:	    jsr 170e0 <my_strncpy>
   17200:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17204:	    lea 10(sp),a0
   17208:	    clr.l -(sp)
   1720a:	    clr.l -(sp)
   1720c:	    move.l a0,-(sp)
   1720e:	    pea 4 <_start+0x4>
   17212:	    jsr 170a0 <debug_cmd>
   17218:	    lea 16(sp),sp
}
   1721c:	    nop
   1721e:	    lea 60(sp),sp
   17222:	    rts

00017224 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17224:	lea -12(sp),sp
   17228:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   1722a:	move.l 20(sp),12(sp)
   17230:	move.l 24(sp),8(sp)
   17236:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1723c:	movea.l d0,a6
   1723e:	move.l 12(sp),d0
   17242:	move.l 8(sp),d1
   17246:	jsr -66(a6)
   1724a:	move.l d0,4(sp)
   1724e:	move.l 4(sp),d0
}
   17252:	movea.l (sp)+,a6
   17254:	lea 12(sp),sp
   17258:	rts

0001725a <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   1725a:	lea -32(sp),sp
   1725e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17262:	move.l 48(sp),36(sp)
   17268:	move.l 52(sp),40(sp)
   1726e:	move.l 56(sp),28(sp)
   17274:	move.l 60(sp),32(sp)
   1727a:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17280:	movea.l d0,a6
   17282:	move.l 36(sp),d0
   17286:	move.l 40(sp),d1
   1728a:	move.l 28(sp),d2
   1728e:	move.l 32(sp),d3
   17292:	jsr -66(a6)
   17296:	move.l d0,12(sp)
   1729a:	move.l d1,16(sp)
   1729e:	move.l 12(sp),20(sp)
   172a4:	move.l 16(sp),24(sp)
   172aa:	move.l 20(sp),d0
   172ae:	move.l 24(sp),d1
}
   172b2:	movem.l (sp)+,d2-d3/a6
   172b6:	lea 32(sp),sp
   172ba:	rts

000172bc <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   172bc:	lea -32(sp),sp
   172c0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   172c4:	move.l 48(sp),36(sp)
   172ca:	move.l 52(sp),40(sp)
   172d0:	move.l 56(sp),28(sp)
   172d6:	move.l 60(sp),32(sp)
   172dc:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   172e2:	movea.l d0,a6
   172e4:	move.l 36(sp),d0
   172e8:	move.l 40(sp),d1
   172ec:	move.l 28(sp),d2
   172f0:	move.l 32(sp),d3
   172f4:	jsr -84(a6)
   172f8:	move.l d0,12(sp)
   172fc:	move.l d1,16(sp)
   17300:	move.l 12(sp),20(sp)
   17306:	move.l 16(sp),24(sp)
   1730c:	move.l 20(sp),d0
   17310:	move.l 24(sp),d1
}
   17314:	movem.l (sp)+,d2-d3/a6
   17318:	lea 32(sp),sp
   1731c:	rts

0001731e <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1731e:	lea -12(sp),sp
   17322:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17324:	move.l 20(sp),12(sp)
   1732a:	move.l 24(sp),8(sp)
   17330:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17336:	movea.l d0,a6
   17338:	move.l 12(sp),d0
   1733c:	move.l 8(sp),d1
   17340:	jsr -84(a6)
   17344:	move.l d0,4(sp)
   17348:	move.l 4(sp),d0
}
   1734c:	movea.l (sp)+,a6
   1734e:	lea 12(sp),sp
   17352:	rts

00017354 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17354:	lea -12(sp),sp
   17358:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1735a:	move.l 20(sp),12(sp)
   17360:	move.l 24(sp),8(sp)
   17366:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1736c:	movea.l d0,a6
   1736e:	move.l 12(sp),d0
   17372:	move.l 8(sp),d1
   17376:	jsr -42(a6)
   1737a:	move.l d0,4(sp)
   1737e:	move.l 4(sp),d0
}
   17382:	movea.l (sp)+,a6
   17384:	lea 12(sp),sp
   17388:	rts

0001738a <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   1738a:	lea -20(sp),sp
   1738e:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17390:	move.l 28(sp),20(sp)
   17396:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   1739c:	movea.l d0,a6
   1739e:	move.l 20(sp),d0
   173a2:	jsr -108(a6)
   173a6:	move.l d0,4(sp)
   173aa:	move.l d1,8(sp)
   173ae:	move.l 4(sp),12(sp)
   173b4:	move.l 8(sp),16(sp)
   173ba:	move.l 12(sp),d0
   173be:	move.l 16(sp),d1
}
   173c2:	movea.l (sp)+,a6
   173c4:	lea 20(sp),sp
   173c8:	rts

000173ca <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   173ca:	lea -12(sp),sp
   173ce:	move.l a6,-(sp)
	return IEEEDPFix(value);
   173d0:	move.l 20(sp),8(sp)
   173d6:	move.l 24(sp),12(sp)
   173dc:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   173e2:	movea.l d0,a6
   173e4:	move.l 8(sp),d0
   173e8:	move.l 12(sp),d1
   173ec:	jsr -30(a6)
   173f0:	move.l d0,4(sp)
   173f4:	move.l 4(sp),d0
   173f8:	move.l d0,-(sp)
   173fa:	jsr 17432 <__floatsidf>
   17400:	addq.l #4,sp
}
   17402:	movea.l (sp)+,a6
   17404:	lea 12(sp),sp
   17408:	rts

0001740a <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   1740a:	subq.l #8,sp
   1740c:	move.l a6,-(sp)
	return IEEESPFix(value);
   1740e:	move.l 16(sp),8(sp)
   17414:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1741a:	movea.l d0,a6
   1741c:	move.l 8(sp),d0
   17420:	jsr -30(a6)
   17424:	move.l d0,4(sp)
   17428:	move.l 4(sp),d0
}
   1742c:	movea.l (sp)+,a6
   1742e:	addq.l #8,sp
   17430:	rts

00017432 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17432:	lea -20(sp),sp
   17436:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17438:	move.l 28(sp),20(sp)
   1743e:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17444:	movea.l d0,a6
   17446:	move.l 20(sp),d0
   1744a:	jsr -36(a6)
   1744e:	move.l d0,4(sp)
   17452:	move.l d1,8(sp)
   17456:	move.l 4(sp),12(sp)
   1745c:	move.l 8(sp),16(sp)
   17462:	move.l 12(sp),d0
   17466:	move.l 16(sp),d1
}
   1746a:	movea.l (sp)+,a6
   1746c:	lea 20(sp),sp
   17470:	rts

00017472 <__floatsisf>:

FLOAT __floatsisf(int i) {
   17472:	subq.l #8,sp
   17474:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17476:	move.l 16(sp),8(sp)
   1747c:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17482:	movea.l d0,a6
   17484:	move.l 8(sp),d0
   17488:	jsr -36(a6)
   1748c:	move.l d0,4(sp)
   17490:	move.l 4(sp),d0
}
   17494:	movea.l (sp)+,a6
   17496:	addq.l #8,sp
   17498:	rts

0001749a <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   1749a:	subq.l #8,sp
   1749c:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1749e:	move.l 16(sp),8(sp)
   174a4:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   174aa:	movea.l d0,a6
   174ac:	move.l 8(sp),d0
   174b0:	jsr -36(a6)
   174b4:	move.l d0,4(sp)
   174b8:	move.l 4(sp),d0
}
   174bc:	movea.l (sp)+,a6
   174be:	addq.l #8,sp
   174c0:	rts

000174c2 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   174c2:	lea -32(sp),sp
   174c6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   174ca:	move.l 48(sp),36(sp)
   174d0:	move.l 52(sp),40(sp)
   174d6:	move.l 56(sp),28(sp)
   174dc:	move.l 60(sp),32(sp)
   174e2:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   174e8:	movea.l d0,a6
   174ea:	move.l 36(sp),d0
   174ee:	move.l 40(sp),d1
   174f2:	move.l 28(sp),d2
   174f6:	move.l 32(sp),d3
   174fa:	jsr -78(a6)
   174fe:	move.l d0,12(sp)
   17502:	move.l d1,16(sp)
   17506:	move.l 12(sp),20(sp)
   1750c:	move.l 16(sp),24(sp)
   17512:	move.l 20(sp),d0
   17516:	move.l 24(sp),d1
}
   1751a:	movem.l (sp)+,d2-d3/a6
   1751e:	lea 32(sp),sp
   17522:	rts

00017524 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17524:	lea -12(sp),sp
   17528:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   1752a:	move.l 20(sp),12(sp)
   17530:	move.l 24(sp),8(sp)
   17536:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1753c:	movea.l d0,a6
   1753e:	move.l 12(sp),d0
   17542:	move.l 8(sp),d1
   17546:	jsr -78(a6)
   1754a:	move.l d0,4(sp)
   1754e:	move.l 4(sp),d0
}
   17552:	movea.l (sp)+,a6
   17554:	lea 12(sp),sp
   17558:	rts

0001755a <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   1755a:	lea -12(sp),sp
   1755e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17560:	move.l 20(sp),12(sp)
   17566:	move.l 24(sp),8(sp)
   1756c:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17572:	movea.l d0,a6
   17574:	move.l 12(sp),d0
   17578:	move.l 8(sp),d1
   1757c:	jsr -42(a6)
   17580:	move.l d0,4(sp)
   17584:	move.l 4(sp),d0
}
   17588:	movea.l (sp)+,a6
   1758a:	lea 12(sp),sp
   1758e:	rts

00017590 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17590:	lea -20(sp),sp
   17594:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17598:	move.l 36(sp),24(sp)
   1759e:	move.l 40(sp),28(sp)
   175a4:	move.l 44(sp),16(sp)
   175aa:	move.l 48(sp),20(sp)
   175b0:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   175b6:	movea.l d0,a6
   175b8:	move.l 24(sp),d0
   175bc:	move.l 28(sp),d1
   175c0:	move.l 16(sp),d2
   175c4:	move.l 20(sp),d3
   175c8:	jsr -42(a6)
   175cc:	move.l d0,12(sp)
   175d0:	move.l 12(sp),d0
}
   175d4:	movem.l (sp)+,d2-d3/a6
   175d8:	lea 20(sp),sp
   175dc:	rts

000175de <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   175de:	lea -12(sp),sp
   175e2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   175e4:	move.l 20(sp),12(sp)
   175ea:	move.l 24(sp),8(sp)
   175f0:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   175f6:	movea.l d0,a6
   175f8:	move.l 12(sp),d0
   175fc:	move.l 8(sp),d1
   17600:	jsr -42(a6)
   17604:	move.l d0,4(sp)
   17608:	move.l 4(sp),d0
}
   1760c:	movea.l (sp)+,a6
   1760e:	lea 12(sp),sp
   17612:	rts

00017614 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17614:	lea -12(sp),sp
   17618:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1761a:	move.l 20(sp),12(sp)
   17620:	move.l 24(sp),8(sp)
   17626:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1762c:	movea.l d0,a6
   1762e:	move.l 12(sp),d0
   17632:	move.l 8(sp),d1
   17636:	jsr -42(a6)
   1763a:	move.l d0,4(sp)
   1763e:	move.l 4(sp),d0
}
   17642:	movea.l (sp)+,a6
   17644:	lea 12(sp),sp
   17648:	rts

0001764a <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   1764a:	lea -20(sp),sp
   1764e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17652:	move.l 36(sp),24(sp)
   17658:	move.l 40(sp),28(sp)
   1765e:	move.l 44(sp),16(sp)
   17664:	move.l 48(sp),20(sp)
   1766a:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17670:	movea.l d0,a6
   17672:	move.l 24(sp),d0
   17676:	move.l 28(sp),d1
   1767a:	move.l 16(sp),d2
   1767e:	move.l 20(sp),d3
   17682:	jsr -42(a6)
   17686:	move.l d0,12(sp)
   1768a:	move.l 12(sp),d0
}
   1768e:	movem.l (sp)+,d2-d3/a6
   17692:	lea 20(sp),sp
   17696:	rts

00017698 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17698:	lea -12(sp),sp
   1769c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1769e:	move.l 20(sp),12(sp)
   176a4:	move.l 24(sp),8(sp)
   176aa:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   176b0:	movea.l d0,a6
   176b2:	move.l 12(sp),d0
   176b6:	move.l 8(sp),d1
   176ba:	jsr -42(a6)
   176be:	move.l d0,4(sp)
   176c2:	move.l 4(sp),d0
}
   176c6:	movea.l (sp)+,a6
   176c8:	lea 12(sp),sp
   176cc:	rts

000176ce <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   176ce:	lea -12(sp),sp
   176d2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   176d4:	move.l 20(sp),12(sp)
   176da:	move.l 24(sp),8(sp)
   176e0:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   176e6:	movea.l d0,a6
   176e8:	move.l 12(sp),d0
   176ec:	move.l 8(sp),d1
   176f0:	jsr -42(a6)
   176f4:	move.l d0,4(sp)
   176f8:	move.l 4(sp),d0
}
   176fc:	movea.l (sp)+,a6
   176fe:	lea 12(sp),sp
   17702:	rts

00017704 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17704:	lea -32(sp),sp
   17708:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   1770c:	move.l 48(sp),36(sp)
   17712:	move.l 52(sp),40(sp)
   17718:	move.l 56(sp),28(sp)
   1771e:	move.l 60(sp),32(sp)
   17724:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   1772a:	movea.l d0,a6
   1772c:	move.l 36(sp),d0
   17730:	move.l 40(sp),d1
   17734:	move.l 28(sp),d2
   17738:	move.l 32(sp),d3
   1773c:	jsr -72(a6)
   17740:	move.l d0,12(sp)
   17744:	move.l d1,16(sp)
   17748:	move.l 12(sp),20(sp)
   1774e:	move.l 16(sp),24(sp)
   17754:	move.l 20(sp),d0
   17758:	move.l 24(sp),d1
}
   1775c:	movem.l (sp)+,d2-d3/a6
   17760:	lea 32(sp),sp
   17764:	rts

00017766 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17766:	lea -12(sp),sp
   1776a:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   1776c:	move.l 20(sp),12(sp)
   17772:	move.l 24(sp),8(sp)
   17778:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1777e:	movea.l d0,a6
   17780:	move.l 12(sp),d0
   17784:	move.l 8(sp),d1
   17788:	jsr -72(a6)
   1778c:	move.l d0,4(sp)
   17790:	move.l 4(sp),d0
}
   17794:	movea.l (sp)+,a6
   17796:	lea 12(sp),sp
   1779a:	rts

0001779c <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   1779c:	lea -12(sp),sp
   177a0:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   177a2:	move.l 20(sp),8(sp)
   177a8:	move.l 24(sp),12(sp)
   177ae:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   177b4:	movea.l d0,a6
   177b6:	move.l 8(sp),d0
   177ba:	move.l 12(sp),d1
   177be:	jsr -102(a6)
   177c2:	move.l d0,4(sp)
   177c6:	move.l 4(sp),d0
}
   177ca:	movea.l (sp)+,a6
   177cc:	lea 12(sp),sp
   177d0:	rts

000177d2 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   177d2:	subq.l #8,sp
   177d4:	move.l a6,-(sp)
	return IEEESPFix(a);
   177d6:	move.l 16(sp),8(sp)
   177dc:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   177e2:	movea.l d0,a6
   177e4:	move.l 8(sp),d0
   177e8:	jsr -30(a6)
   177ec:	move.l d0,4(sp)
   177f0:	move.l 4(sp),d0
}
   177f4:	movea.l (sp)+,a6
   177f6:	addq.l #8,sp
   177f8:	rts

000177fa <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   177fa:	       lea -24(sp),sp
   177fe:	       move.l a6,-(sp)
    if (x > 0) {
   17800:	       clr.l -(sp)
   17802:	       move.l 40(sp),-(sp)
   17806:	       jsr 175de <__gtsf2>
   1780c:	       addq.l #8,sp
   1780e:	       tst.l d0
   17810:	   /-- ble.s 17842 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17812:	   |   move.l 36(sp),-(sp)
   17816:	   |   move.l 36(sp),-(sp)
   1781a:	   |   jsr 1731e <__divsf3>
   17820:	   |   addq.l #8,sp
   17822:	   |   move.l d0,8(sp)
   17826:	   |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   1782c:	   |   movea.l d0,a6
   1782e:	   |   move.l 8(sp),d0
   17832:	   |   jsr -30(a6)
   17836:	   |   move.l d0,4(sp)
   1783a:	   |   move.l 4(sp),d0
   1783e:	/--|-- bra.w 179a2 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17842:	|  \-> clr.l -(sp)
   17844:	|      move.l 40(sp),-(sp)
   17848:	|      jsr 17698 <__ltsf2>
   1784e:	|      addq.l #8,sp
   17850:	|      tst.l d0
   17852:	|  /-- bge.s 178c6 <atan2f+0xcc>
   17854:	|  |   clr.l -(sp)
   17856:	|  |   move.l 36(sp),-(sp)
   1785a:	|  |   jsr 1755a <__gesf2>
   17860:	|  |   addq.l #8,sp
   17862:	|  |   tst.l d0
   17864:	|  +-- blt.s 178c6 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17866:	|  |   move.l 36(sp),-(sp)
   1786a:	|  |   move.l 36(sp),-(sp)
   1786e:	|  |   jsr 1731e <__divsf3>
   17874:	|  |   addq.l #8,sp
   17876:	|  |   move.l d0,24(sp)
   1787a:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   17880:	|  |   movea.l d0,a6
   17882:	|  |   move.l 24(sp),d0
   17886:	|  |   jsr -30(a6)
   1788a:	|  |   move.l d0,20(sp)
   1788e:	|  |   move.l 20(sp),d0
   17892:	|  |   move.l d0,-(sp)
   17894:	|  |   jsr 1738a <__extendsfdf2>
   1789a:	|  |   addq.l #4,sp
   1789c:	|  |   move.l #1413754136,-(sp)
   178a2:	|  |   move.l #1074340347,-(sp)
   178a8:	|  |   move.l d1,-(sp)
   178aa:	|  |   move.l d0,-(sp)
   178ac:	|  |   jsr 1725a <__adddf3>
   178b2:	|  |   lea 16(sp),sp
   178b6:	|  |   move.l d1,-(sp)
   178b8:	|  |   move.l d0,-(sp)
   178ba:	|  |   jsr 1779c <__truncdfsf2>
   178c0:	|  |   addq.l #8,sp
   178c2:	+--|-- bra.w 179a2 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   178c6:	|  \-> clr.l -(sp)
   178c8:	|      move.l 40(sp),-(sp)
   178cc:	|      jsr 17698 <__ltsf2>
   178d2:	|      addq.l #8,sp
   178d4:	|      tst.l d0
   178d6:	|  /-- bge.s 17948 <atan2f+0x14e>
   178d8:	|  |   clr.l -(sp)
   178da:	|  |   move.l 36(sp),-(sp)
   178de:	|  |   jsr 17698 <__ltsf2>
   178e4:	|  |   addq.l #8,sp
   178e6:	|  |   tst.l d0
   178e8:	|  +-- bge.s 17948 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   178ea:	|  |   move.l 36(sp),-(sp)
   178ee:	|  |   move.l 36(sp),-(sp)
   178f2:	|  |   jsr 1731e <__divsf3>
   178f8:	|  |   addq.l #8,sp
   178fa:	|  |   move.l d0,16(sp)
   178fe:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   17904:	|  |   movea.l d0,a6
   17906:	|  |   move.l 16(sp),d0
   1790a:	|  |   jsr -30(a6)
   1790e:	|  |   move.l d0,12(sp)
   17912:	|  |   move.l 12(sp),d0
   17916:	|  |   move.l d0,-(sp)
   17918:	|  |   jsr 1738a <__extendsfdf2>
   1791e:	|  |   addq.l #4,sp
   17920:	|  |   move.l #1413754136,-(sp)
   17926:	|  |   move.l #1074340347,-(sp)
   1792c:	|  |   move.l d1,-(sp)
   1792e:	|  |   move.l d0,-(sp)
   17930:	|  |   jsr 17704 <__subdf3>
   17936:	|  |   lea 16(sp),sp
   1793a:	|  |   move.l d1,-(sp)
   1793c:	|  |   move.l d0,-(sp)
   1793e:	|  |   jsr 1779c <__truncdfsf2>
   17944:	|  |   addq.l #8,sp
   17946:	+--|-- bra.s 179a2 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17948:	|  \-> clr.l -(sp)
   1794a:	|      move.l 40(sp),-(sp)
   1794e:	|      jsr 17354 <__eqsf2>
   17954:	|      addq.l #8,sp
   17956:	|      tst.l d0
   17958:	|  /-- bne.s 17974 <atan2f+0x17a>
   1795a:	|  |   clr.l -(sp)
   1795c:	|  |   move.l 36(sp),-(sp)
   17960:	|  |   jsr 175de <__gtsf2>
   17966:	|  |   addq.l #8,sp
   17968:	|  |   tst.l d0
   1796a:	|  +-- ble.s 17974 <atan2f+0x17a>
        return PI / 2;
   1796c:	|  |   move.l #1070141403,d0
   17972:	+--|-- bra.s 179a2 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17974:	|  \-> clr.l -(sp)
   17976:	|      move.l 40(sp),-(sp)
   1797a:	|      jsr 17354 <__eqsf2>
   17980:	|      addq.l #8,sp
   17982:	|      tst.l d0
   17984:	|  /-- bne.s 179a0 <atan2f+0x1a6>
   17986:	|  |   clr.l -(sp)
   17988:	|  |   move.l 36(sp),-(sp)
   1798c:	|  |   jsr 17698 <__ltsf2>
   17992:	|  |   addq.l #8,sp
   17994:	|  |   tst.l d0
   17996:	|  +-- bge.s 179a0 <atan2f+0x1a6>
        return -PI / 2;
   17998:	|  |   move.l #-1077342245,d0
   1799e:	+--|-- bra.s 179a2 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   179a0:	|  \-> moveq #0,d0
    }
}
   179a2:	\----> movea.l (sp)+,a6
   179a4:	       lea 24(sp),sp
   179a8:	       rts

000179aa <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   179aa:	lea -24(sp),sp
   179ae:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   179b0:	move.l 32(sp),20(sp)
   179b6:	move.l 36(sp),24(sp)
   179bc:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   179c2:	movea.l d0,a6
   179c4:	move.l 20(sp),d0
   179c8:	move.l 24(sp),d1
   179cc:	jsr -96(a6)
   179d0:	move.l d0,4(sp)
   179d4:	move.l d1,8(sp)
   179d8:	move.l 4(sp),12(sp)
   179de:	move.l 8(sp),16(sp)
   179e4:	move.l 12(sp),d0
   179e8:	move.l 16(sp),d1
}
   179ec:	movea.l (sp)+,a6
   179ee:	lea 24(sp),sp
   179f2:	rts

000179f4 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   179f4:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   179f8:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   179fc:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17a00:	mulu.w 8(sp),d1
	addw	d1, d0
   17a04:	add.w d1,d0
	swap	d0
   17a06:	swap d0
	clrw	d0
   17a08:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17a0a:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17a0e:	mulu.w 10(sp),d1
	addl	d1, d0
   17a12:	add.l d1,d0
	rts
   17a14:	rts

00017a16 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17a16:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17a18:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17a1c:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17a20:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17a26:	   /-- bcc.s 17a3e <__udivsi3+0x28>
	movel	d0, d2
   17a28:	   |   move.l d0,d2
	clrw	d2
   17a2a:	   |   clr.w d2
	swap	d2
   17a2c:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17a2e:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17a30:	   |   move.w d2,d0
	swap	d0
   17a32:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17a34:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17a38:	   |   divu.w d1,d2
	movew	d2, d0
   17a3a:	   |   move.w d2,d0
	jra	6f
   17a3c:	/--|-- bra.s 17a6e <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17a3e:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17a40:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17a42:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17a44:	|  |   cmpi.l #65536,d1
	jcc	4b
   17a4a:	|  \-- bcc.s 17a40 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17a4c:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17a4e:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17a54:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17a56:	|      mulu.w d0,d1
	swap	d2
   17a58:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17a5a:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17a5c:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17a5e:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17a60:	|  /-- bne.s 17a6c <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17a62:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17a64:	|  +-- bcs.s 17a6c <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17a66:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17a6a:	+--|-- bls.s 17a6e <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17a6c:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17a6e:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17a70:	       rts

00017a72 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17a72:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17a74:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17a76:	    move.l 12(sp),d1
	jpl	1f
   17a7a:	/-- bpl.s 17a80 <__divsi3+0xe>
	negl	d1
   17a7c:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17a7e:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17a80:	\-> move.l 8(sp),d0
	jpl	2f
   17a84:	/-- bpl.s 17a8a <__divsi3+0x18>
	negl	d0
   17a86:	|   neg.l d0
	negb	d2
   17a88:	|   neg.b d2

2:	movel	d1, sp@-
   17a8a:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17a8c:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17a8e:	    jsr 17a16 <__udivsi3>
	addql	#8, sp
   17a94:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17a96:	    tst.b d2
	jpl	3f
   17a98:	/-- bpl.s 17a9c <__divsi3+0x2a>
	negl	d0
   17a9a:	|   neg.l d0

3:	movel	sp@+, d2
   17a9c:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17a9e:	    rts

00017aa0 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17aa0:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17aa4:	move.l 4(sp),d0
	movel	d1, sp@-
   17aa8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17aaa:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17aac:	jsr 17a72 <__divsi3>
	addql	#8, sp
   17ab2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17ab4:	move.l 8(sp),d1
	movel	d1, sp@-
   17ab8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17aba:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17abc:	jsr 179f4 <__mulsi3>
	addql	#8, sp
   17ac2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17ac4:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17ac8:	sub.l d0,d1
	movel	d1, d0
   17aca:	move.l d1,d0
	rts
   17acc:	rts

00017ace <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17ace:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17ad2:	move.l 4(sp),d0
	movel	d1, sp@-
   17ad6:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17ad8:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17ada:	jsr 17a16 <__udivsi3>
	addql	#8, sp
   17ae0:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17ae2:	move.l 8(sp),d1
	movel	d1, sp@-
   17ae6:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17ae8:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17aea:	jsr 179f4 <__mulsi3>
	addql	#8, sp
   17af0:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17af2:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17af6:	sub.l d0,d1
	movel	d1, d0
   17af8:	move.l d1,d0
	rts
   17afa:	rts

00017afc <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17afc:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17afe:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17b02:	jsr -516(a6)
    move.l (sp)+, a6
   17b06:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17b08:	rts

00017b0a <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17b0a:	move.b d0,(a3)+
	rts
   17b0c:	rts
