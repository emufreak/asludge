
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #106496,d0
       8:	       subi.l #106496,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1a000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #106496,d0
      40:	       subi.l #106496,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1a000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 6e3c <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #106496,d0
      7e:	       subi.l #106496,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1a000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 1369a <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1a7a2 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 136b2 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1a000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 1369a <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1a7a2 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1a000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 1369a <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1a7a2 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17684 <PutChar+0x4>
     35c:	|  |              |   jsr 16bac <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1a7aa <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1a7aa <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1a7aa <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1a7aa <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1a7aa <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1a7aa <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1a7aa <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 176ae <PutChar+0x2e>
     834:	|   jsr 16bac <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1a7aa <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 176ca <PutChar+0x4a>
     8a6:	|   jsr 16bac <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1a7aa <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1a7aa <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1a7aa <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1a7aa <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1a7aa <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1a7aa <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1a7aa <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1a7aa <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1a7a2 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1a7aa <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 1369a <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1a7aa <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1a6aa <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1a762 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1a75e <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1a6aa <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9384 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1a6ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1a6b2 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2576 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 176f2 <PutChar+0x72>
     e1a:	          jsr 16bac <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1a6c4 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 1770b <PutChar+0x8b>
     e30:	      |   jsr 16bac <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1a6be <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1a7ae <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1a6c4 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17739 <PutChar+0xb9>
     ef0:	|         jsr 16bac <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1a7ae <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17759 <PutChar+0xd9>
     f3c:	|         jsr 16bac <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1a6d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1a6f6 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1a6fa <winHeight>,d0
     f6e:	|         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17779 <PutChar+0xf9>
     fbe:	|         jsr 16bac <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1a7a2 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 1778e <PutChar+0x10e>
    1010:	   |   jsr 16bac <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1a7aa <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1a6f2 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #106498,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #106562,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #106610,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #106650,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1a6ea <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 177c9 <PutChar+0x149>
    11c6:	                jsr 16bac <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1a6e2 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1a6e2 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1a6d6 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1a7ae <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1a6f6 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1a6f6 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1a6f6 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 1756a <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1a6c4 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1a6f6 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 1756a <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1a6d6 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1a6f6 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1a6fa <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 1756a <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1a6f6 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1a6fa <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 1756a <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1a7ae <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1a6ee <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1a6ea <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1a6f2 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1a6f2 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1a6d0 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1a6d0 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1a6d0 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    14e8:	    lea -20(sp),sp
    14ec:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    14ee:	    move.l 1a6d6 <CstDrawBuffer>,d0
    14f4:	/-- beq.s 150e <CstFreeBuffer+0x26>
    14f6:	|   move.l 1a6d6 <CstDrawBuffer>,20(sp)
    14fe:	|   move.l 1a7a2 <SysBase>,d0
    1504:	|   movea.l d0,a6
    1506:	|   movea.l 20(sp),a1
    150a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    150e:	\-> move.l 1a6d2 <CstViewBuffer>,d0
    1514:	/-- beq.s 152e <CstFreeBuffer+0x46>
    1516:	|   move.l 1a6d2 <CstViewBuffer>,16(sp)
    151e:	|   move.l 1a7a2 <SysBase>,d0
    1524:	|   movea.l d0,a6
    1526:	|   movea.l 16(sp),a1
    152a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    152e:	\-> move.l 1a6cc <CstCopperList>,d0
    1534:	/-- beq.s 154e <CstFreeBuffer+0x66>
    1536:	|   move.l 1a6cc <CstCopperList>,12(sp)
    153e:	|   move.l 1a7a2 <SysBase>,d0
    1544:	|   movea.l d0,a6
    1546:	|   movea.l 12(sp),a1
    154a:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    154e:	\-> move.l 1a6c4 <CstBackDrop>,d0
    1554:	/-- beq.s 156e <CstFreeBuffer+0x86>
    1556:	|   move.l 1a6c4 <CstBackDrop>,8(sp)
    155e:	|   move.l 1a7a2 <SysBase>,d0
    1564:	|   movea.l d0,a6
    1566:	|   movea.l 8(sp),a1
    156a:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    156e:	\-> move.l 1a6c8 <CstBackDropBackup>,d0
    1574:	/-- beq.s 158e <CstFreeBuffer+0xa6>
    1576:	|   move.l 1a6c8 <CstBackDropBackup>,4(sp)
    157e:	|   move.l 1a7a2 <SysBase>,d0
    1584:	|   movea.l d0,a6
    1586:	|   movea.l 4(sp),a1
    158a:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    158e:	\-> clr.l 1a6d6 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1594:	    clr.l 1a6d2 <CstViewBuffer>
  CstCopperList = NULL;
    159a:	    clr.l 1a6cc <CstCopperList>
  CstBackDrop = NULL;
    15a0:	    clr.l 1a6c4 <CstBackDrop>

}
    15a6:	    nop
    15a8:	    movea.l (sp)+,a6
    15aa:	    lea 20(sp),sp
    15ae:	    rts

000015b0 <CstFreeze>:



void CstFreeze( ) {
    15b0:	       lea -36(sp),sp
    15b4:	       move.l a6,-(sp)
    15b6:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    15b8:	       pea 177e5 <PutChar+0x165>
    15be:	       jsr 16bac <KPrintF>
    15c4:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    15c6:	       move.l 1a6f6 <winWidth>,d0
    15cc:	       lsr.l #3,d0
    15ce:	       move.l d0,d1
    15d0:	       move.l 1a6fa <winHeight>,d0
    15d6:	       move.l d0,d0
    15d8:	       muls.w d0,d1
    15da:	       move.w d1,d0
    15dc:	       add.w d0,d0
    15de:	       add.w d0,d0
    15e0:	       move.w d0,d2
    15e2:	       add.w d1,d2
    15e4:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    15e8:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    15f0:	       moveq #0,d0
    15f2:	       move.w 26(sp),d0
    15f6:	       move.l d0,18(sp)
    15fa:	       clr.l 14(sp)
    15fe:	       move.l 1a7a2 <SysBase>,d0
    1604:	       movea.l d0,a6
    1606:	       move.l 18(sp),d0
    160a:	       move.l 14(sp),d1
    160e:	       jsr -684(a6)
    1612:	       move.l d0,10(sp)
    1616:	       move.l 10(sp),d0
    161a:	       move.l d0,1a6c8 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1620:	       move.l 1a6c8 <CstBackDropBackup>,d0
    1626:	   /-- bne.s 1636 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1628:	   |   pea 1780c <PutChar+0x18c>
    162e:	   |   jsr 16bac <KPrintF>
    1634:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1636:	   \-> move.l 1a6fa <winHeight>,d0
    163c:	       move.l d0,d0
    163e:	       movea.w d0,a1
    1640:	       move.l 1a6f6 <winWidth>,d0
    1646:	       move.l d0,d0
    1648:	       movea.w d0,a0
    164a:	       move.l 1a6c8 <CstBackDropBackup>,d0
    1650:	       clr.l -(sp)
    1652:	       pea 5 <_start+0x5>
    1656:	       move.l a1,-(sp)
    1658:	       move.l a0,-(sp)
    165a:	       pea 17844 <PutChar+0x1c4>
    1660:	       move.l d0,-(sp)
    1662:	       jsr 16c94 <debug_register_bitmap>
    1668:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    166c:	       move.l 1a6c4 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1674:	       move.l 1a6c8 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    167c:	       clr.l 32(sp)
    1680:	   /-- bra.s 16a6 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1682:	/--|-> move.l 40(sp),d1
    1686:	|  |   move.l d1,d0
    1688:	|  |   addq.l #4,d0
    168a:	|  |   move.l d0,40(sp)
    168e:	|  |   move.l 36(sp),d0
    1692:	|  |   move.l d0,d2
    1694:	|  |   addq.l #4,d2
    1696:	|  |   move.l d2,36(sp)
    169a:	|  |   movea.l d1,a0
    169c:	|  |   move.l (a0),d1
    169e:	|  |   movea.l d0,a0
    16a0:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    16a2:	|  |   addq.l #1,32(sp)
    16a6:	|  \-> move.w 26(sp),d0
    16aa:	|      lsr.w #2,d0
    16ac:	|      move.w d0,d0
    16ae:	|      andi.l #65535,d0
    16b4:	|      cmp.l 32(sp),d0
    16b8:	\----- bgt.s 1682 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    16ba:	       move.l 1a6d2 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    16c2:	       move.l 1a6c4 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    16ca:	       clr.l 28(sp)
    16ce:	   /-- bra.s 16f4 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    16d0:	/--|-> move.l 40(sp),d1
    16d4:	|  |   move.l d1,d0
    16d6:	|  |   addq.l #4,d0
    16d8:	|  |   move.l d0,40(sp)
    16dc:	|  |   move.l 36(sp),d0
    16e0:	|  |   move.l d0,d2
    16e2:	|  |   addq.l #4,d2
    16e4:	|  |   move.l d2,36(sp)
    16e8:	|  |   movea.l d1,a0
    16ea:	|  |   move.l (a0),d1
    16ec:	|  |   movea.l d0,a0
    16ee:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    16f0:	|  |   addq.l #1,28(sp)
    16f4:	|  \-> move.w 26(sp),d0
    16f8:	|      lsr.w #2,d0
    16fa:	|      move.w d0,d0
    16fc:	|      andi.l #65535,d0
    1702:	|      cmp.l 28(sp),d0
    1706:	\----- bgt.s 16d0 <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1708:	       move.w #2,1a6d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1710:	       move.l 1a6f6 <winWidth>,d0
    1716:	       lsr.l #4,d0
    1718:	       movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    171e:	       move.l a0,d1
    1720:	       addq.l #2,d1
    1722:	       move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    1728:	       move.l d0,d0
    172a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    172c:	       move.l 1a6fa <winHeight>,d0
    1732:	       movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1738:	       move.l a0,d1
    173a:	       addq.l #2,d1
    173c:	       move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    1742:	       move.l d0,d0
    1744:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1746:	       movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    174c:	       move.l a0,d0
    174e:	       addq.l #2,d0
    1750:	       move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    1756:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1758:	       movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    175e:	       move.l a0,d0
    1760:	       addq.l #2,d0
    1762:	       move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    1768:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    176a:	       movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1770:	       move.l a0,d0
    1772:	       addq.l #2,d0
    1774:	       move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    177a:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    177c:	       pea 17853 <PutChar+0x1d3>
    1782:	       jsr 16bac <KPrintF>
    1788:	       addq.l #4,sp

}  
    178a:	       nop
    178c:	       move.l (sp)+,d2
    178e:	       movea.l (sp)+,a6
    1790:	       lea 36(sp),sp
    1794:	       rts

00001796 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1796:	             lea -144(sp),sp
    179a:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    179e:	             pea 17867 <PutChar+0x1e7>
    17a4:	             jsr 16bac <KPrintF>
    17aa:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    17ac:	             move.l 164(sp),-(sp)
    17b0:	             jsr 6bc <get2bytes>
    17b6:	             addq.l #4,sp
    17b8:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    17bc:	             move.l 164(sp),-(sp)
    17c0:	             jsr 6bc <get2bytes>
    17c6:	             addq.l #4,sp
    17c8:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    17cc:	             move.w 134(sp),d0
    17d0:	             lsr.w #3,d0
    17d2:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    17d6:	             move.w 130(sp),d0
    17da:	             lsr.w #1,d0
    17dc:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    17e0:	             move.l 1a6f6 <winWidth>,d0
    17e6:	             lsr.l #3,d0
    17e8:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    17ec:	             move.w 130(sp),d0
    17f0:	             muls.w 132(sp),d0
    17f4:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    17f8:	             move.w 124(sp),d1
    17fc:	             move.w d1,d0
    17fe:	             add.w d0,d0
    1800:	             add.w d0,d0
    1802:	             move.w d0,d2
    1804:	             add.w d1,d2
    1806:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    180a:	             move.w 1a6be <CstPaletteLoaded>,d0
    1810:	/----------- bne.w 18aa <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1814:	|            move.w #384,120(sp)

    if(CstPalette) {
    181a:	|            move.l 1a6ee <CstPalette>,d0
    1820:	|        /-- beq.s 183a <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1822:	|        |   move.l 1a6ee <CstPalette>,116(sp)
    182a:	|        |   move.l 1a7a2 <SysBase>,d0
    1830:	|        |   movea.l d0,a6
    1832:	|        |   movea.l 116(sp),a1
    1836:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    183a:	|        \-> moveq #64,d0
    183c:	|            move.l d0,112(sp)
    1840:	|            clr.l 108(sp)
    1844:	|            move.l 1a7a2 <SysBase>,d0
    184a:	|            movea.l d0,a6
    184c:	|            move.l 112(sp),d0
    1850:	|            move.l 108(sp),d1
    1854:	|            jsr -684(a6)
    1858:	|            move.l d0,104(sp)
    185c:	|            move.l 104(sp),d0
    1860:	|            move.l d0,1a6ee <CstPalette>
    CstPaletteLoaded = 1;
    1866:	|            move.w #1,1a6be <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    186e:	|            move.l 1a6ee <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1876:	|            clr.l 152(sp)
    187a:	|        /-- bra.s 18a0 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    187c:	|     /--|-> move.l 164(sp),-(sp)
    1880:	|     |  |   jsr 6bc <get2bytes>
    1886:	|     |  |   addq.l #4,sp
    1888:	|     |  |   move.l d0,d1
    188a:	|     |  |   move.l 156(sp),d0
    188e:	|     |  |   move.l d0,d2
    1890:	|     |  |   addq.l #2,d2
    1892:	|     |  |   move.l d2,156(sp)
    1896:	|     |  |   move.l d1,d1
    1898:	|     |  |   movea.l d0,a0
    189a:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    189c:	|     |  |   addq.l #1,152(sp)
    18a0:	|     |  \-> moveq #31,d0
    18a2:	|     |      cmp.l 152(sp),d0
    18a6:	|     \----- bge.s 187c <CstLoadBackdrop+0xe6>
    18a8:	|  /-------- bra.s 18c8 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    18aa:	\--|-------> clr.l 148(sp)
    18ae:	   |     /-- bra.s 18c0 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    18b0:	   |  /--|-> move.l 164(sp),-(sp)
    18b4:	   |  |  |   jsr 6bc <get2bytes>
    18ba:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    18bc:	   |  |  |   addq.l #1,148(sp)
    18c0:	   |  |  \-> moveq #31,d2
    18c2:	   |  |      cmp.l 148(sp),d2
    18c6:	   |  \----- bge.s 18b0 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    18c8:	   \-------> moveq #0,d0
    18ca:	             move.w 122(sp),d0
    18ce:	             move.l d0,100(sp)
    18d2:	             moveq #2,d0
    18d4:	             move.l d0,96(sp)
    18d8:	             move.l 1a7a2 <SysBase>,d0
    18de:	             movea.l d0,a6
    18e0:	             move.l 100(sp),d0
    18e4:	             move.l 96(sp),d1
    18e8:	             jsr -684(a6)
    18ec:	             move.l d0,92(sp)
    18f0:	             move.l 92(sp),d0
    18f4:	             move.l d0,88(sp)
  if( !tmpbuffer)
    18f8:	         /-- bne.s 1908 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    18fa:	         |   pea 17896 <PutChar+0x216>
    1900:	         |   jsr 16bac <KPrintF>
    1906:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1908:	         \-> moveq #0,d0
    190a:	             move.w 124(sp),d0
    190e:	             move.l d0,84(sp)
    1912:	             moveq #2,d2
    1914:	             move.l d2,80(sp)
    1918:	             move.l 1a7a2 <SysBase>,d0
    191e:	             movea.l d0,a6
    1920:	             move.l 84(sp),d0
    1924:	             move.l 80(sp),d1
    1928:	             jsr -684(a6)
    192c:	             move.l d0,76(sp)
    1930:	             move.l 76(sp),d0
    1934:	             move.l d0,72(sp)
  if( !tmpmask)
    1938:	         /-- bne.s 1948 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    193a:	         |   pea 178cc <PutChar+0x24c>
    1940:	         |   jsr 16bac <KPrintF>
    1946:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1948:	         \-> move.w 132(sp),d0
    194c:	             movea.w d0,a1
    194e:	             move.w 134(sp),d0
    1952:	             movea.w d0,a0
    1954:	             clr.l -(sp)
    1956:	             pea 5 <_start+0x5>
    195a:	             move.l a1,-(sp)
    195c:	             move.l a0,-(sp)
    195e:	             pea 17900 <PutChar+0x280>
    1964:	             move.l 108(sp),-(sp)
    1968:	             jsr 16c94 <debug_register_bitmap>
    196e:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1972:	             move.w 132(sp),d0
    1976:	             movea.w d0,a1
    1978:	             move.w 134(sp),d0
    197c:	             movea.w d0,a0
    197e:	             clr.l -(sp)
    1980:	             pea 1 <_start+0x1>
    1984:	             move.l a1,-(sp)
    1986:	             move.l a0,-(sp)
    1988:	             pea 1790e <PutChar+0x28e>
    198e:	             move.l 108(sp),-(sp)
    1992:	             jsr 16c94 <debug_register_bitmap>
    1998:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    199c:	             move.l 164(sp),68(sp)
    19a2:	             move.l 88(sp),64(sp)
    19a8:	             moveq #2,d0
    19aa:	             move.l d0,60(sp)
    19ae:	             move.w 122(sp),d0
    19b2:	             lsr.w #1,d0
    19b4:	             move.w d0,d0
    19b6:	             andi.l #65535,d0
    19bc:	             move.l d0,56(sp)
    19c0:	             move.l 1a7aa <DOSBase>,d0
    19c6:	             movea.l d0,a6
    19c8:	             move.l 68(sp),d1
    19cc:	             move.l 64(sp),d2
    19d0:	             move.l 60(sp),d3
    19d4:	             move.l 56(sp),d4
    19d8:	             jsr -324(a6)
    19dc:	             move.l d0,52(sp)
    19e0:	             move.l 52(sp),d0
    19e4:	             move.w d0,50(sp)
  if(!count) {
    19e8:	         /-- bne.s 19fc <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    19ea:	         |   pea 1791a <PutChar+0x29a>
    19f0:	         |   jsr 16bac <KPrintF>
    19f6:	         |   addq.l #4,sp
    return;
    19f8:	   /-----|-- bra.w 1c48 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    19fc:	   |     \-> move.l 164(sp),46(sp)
    1a02:	   |         move.l 72(sp),42(sp)
    1a08:	   |         moveq #2,d2
    1a0a:	   |         move.l d2,38(sp)
    1a0e:	   |         move.w 124(sp),d0
    1a12:	   |         lsr.w #1,d0
    1a14:	   |         move.w d0,d0
    1a16:	   |         andi.l #65535,d0
    1a1c:	   |         move.l d0,34(sp)
    1a20:	   |         move.l 1a7aa <DOSBase>,d0
    1a26:	   |         movea.l d0,a6
    1a28:	   |         move.l 46(sp),d1
    1a2c:	   |         move.l 42(sp),d2
    1a30:	   |         move.l 38(sp),d3
    1a34:	   |         move.l 34(sp),d4
    1a38:	   |         jsr -324(a6)
    1a3c:	   |         move.l d0,30(sp)
    1a40:	   |         move.l 30(sp),d0
    1a44:	   |         move.w d0,50(sp)
   

  if(!count) {
    1a48:	   |     /-- bne.s 1a5c <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    1a4a:	   |     |   pea 1791a <PutChar+0x29a>
    1a50:	   |     |   jsr 16bac <KPrintF>
    1a56:	   |     |   addq.l #4,sp
    return;
    1a58:	   +-----|-- bra.w 1c48 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1a5c:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1a64:	   |         move.l 1a6c4 <CstBackDrop>,d0
    1a6a:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1a6e:	   |         move.l 172(sp),d0
    1a72:	   |         move.w d0,d1
    1a74:	   |         muls.w 126(sp),d1
    1a78:	   |         move.l 168(sp),d0
    1a7c:	   |     /-- bpl.s 1a80 <CstLoadBackdrop+0x2ea>
    1a7e:	   |     |   addq.l #7,d0
    1a80:	   |     \-> asr.l #3,d0
    1a82:	   |         move.l d0,d0
    1a84:	   |         movea.w d1,a0
    1a86:	   |         adda.w d0,a0
    1a88:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1a8c:	   |         moveq #0,d0
    1a8e:	   |         move.w 24(sp),d0
    1a92:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    1a96:	   |         pea 17935 <PutChar+0x2b5>
    1a9c:	   |         jsr 16bac <KPrintF>
    1aa2:	   |         addq.l #4,sp


  WaitBlit();
    1aa4:	   |         move.l 1a7ae <GfxBase>,d0
    1aaa:	   |         movea.l d0,a6
    1aac:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1ab0:	   |         movea.l 26(sp),a0
    1ab4:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1aba:	   |         movea.l 26(sp),a0
    1abe:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    1ac4:	   |         movea.l 26(sp),a0
    1ac8:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    1ace:	   |         movea.l 26(sp),a0
    1ad2:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    1ad8:	   |         move.w 126(sp),d0
    1adc:	   |         sub.w 130(sp),d0
    1ae0:	   |         movea.l 26(sp),a0
    1ae4:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    1ae8:	   |         move.w 126(sp),d0
    1aec:	   |         sub.w 130(sp),d0
    1af0:	   |         movea.l 26(sp),a0
    1af4:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1af8:	   |         movea.l 26(sp),a0
    1afc:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    1b02:	   |         movea.l 26(sp),a0
    1b06:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    1b0c:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1b12:	   |         clr.l 136(sp)
    1b16:	   |     /-- bra.s 1b78 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    1b18:	   |  /--|-> movea.l 26(sp),a0
    1b1c:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    1b22:	   |  |  |   move.l 140(sp),d0
    1b26:	   |  |  |   movea.l 26(sp),a0
    1b2a:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    1b2e:	   |  |  |   move.l 144(sp),d0
    1b32:	   |  |  |   movea.l 26(sp),a0
    1b36:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    1b3a:	   |  |  |   move.l 144(sp),d0
    1b3e:	   |  |  |   movea.l 26(sp),a0
    1b42:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1b46:	   |  |  |   move.w 132(sp),d0
    1b4a:	   |  |  |   lsl.w #6,d0
    1b4c:	   |  |  |   add.w 128(sp),d0
    1b50:	   |  |  |   movea.l 26(sp),a0
    1b54:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    1b58:	   |  |  |   moveq #0,d0
    1b5a:	   |  |  |   move.w 124(sp),d0
    1b5e:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    1b62:	   |  |  |   move.w 1a6c2 <CstBackdropSizePlane>,d0
    1b68:	   |  |  |   move.w d0,d0
    1b6a:	   |  |  |   andi.l #65535,d0
    1b70:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1b74:	   |  |  |   addq.l #1,136(sp)
    1b78:	   |  |  \-> moveq #4,d0
    1b7a:	   |  |      cmp.l 136(sp),d0
    1b7e:	   |  \----- bge.s 1b18 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    1b80:	   |         move.l 1a7ae <GfxBase>,d0
    1b86:	   |         movea.l d0,a6
    1b88:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1b8c:	   |         pea 17954 <PutChar+0x2d4>
    1b92:	   |         jsr 16bac <KPrintF>
    1b98:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1b9a:	   |         move.l 88(sp),20(sp)
    1ba0:	   |         move.l 1a7a2 <SysBase>,d0
    1ba6:	   |         movea.l d0,a6
    1ba8:	   |         movea.l 20(sp),a1
    1bac:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    1bb0:	   |         move.l 72(sp),16(sp)
    1bb6:	   |         move.l 1a7a2 <SysBase>,d0
    1bbc:	   |         movea.l d0,a6
    1bbe:	   |         movea.l 16(sp),a1
    1bc2:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1bc6:	   |         move.w #2,1a6d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1bce:	   |         move.l 1a6f6 <winWidth>,d0
    1bd4:	   |         lsr.l #4,d0
    1bd6:	   |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1bdc:	   |         move.l a0,d1
    1bde:	   |         addq.l #2,d1
    1be0:	   |         move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    1be6:	   |         move.l d0,d0
    1be8:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1bea:	   |         move.l 1a6fa <winHeight>,d0
    1bf0:	   |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1bf6:	   |         move.l a0,d1
    1bf8:	   |         addq.l #2,d1
    1bfa:	   |         move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    1c00:	   |         move.l d0,d0
    1c02:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1c04:	   |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1c0a:	   |         move.l a0,d0
    1c0c:	   |         addq.l #2,d0
    1c0e:	   |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    1c14:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1c16:	   |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1c1c:	   |         move.l a0,d0
    1c1e:	   |         addq.l #2,d0
    1c20:	   |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    1c26:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1c28:	   |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1c2e:	   |         move.l a0,d0
    1c30:	   |         addq.l #2,d0
    1c32:	   |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    1c38:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    1c3a:	   |         pea 17974 <PutChar+0x2f4>
    1c40:	   |         jsr 16bac <KPrintF>
    1c46:	   |         addq.l #4,sp

}
    1c48:	   \-------> movem.l (sp)+,d2-d4/a6
    1c4c:	             lea 144(sp),sp
    1c50:	             rts

00001c52 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    1c52:	             lea -68(sp),sp
    1c56:	             move.l a6,-(sp)
    1c58:	             move.l d2,-(sp)
    1c5a:	             move.l 84(sp),d1
    1c5e:	             move.l 88(sp),d0
    1c62:	             move.w d1,d1
    1c64:	             move.w d1,12(sp)
    1c68:	             move.w d0,d0
    1c6a:	             move.w d0,10(sp)
  UWORD *destination = 0;
    1c6e:	             clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    1c72:	             move.w #2,1a6d0 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    1c7a:	             move.l 1a6c4 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    1c82:	             clr.l 52(sp)

  blitwidth = single->width/16;
    1c86:	             movea.l 80(sp),a0
    1c8a:	             move.l (a0),d0
    1c8c:	             movea.l d0,a0
    1c8e:	             cmpa.w #0,a0
    1c92:	         /-- bge.s 1c98 <CstPasteChar+0x46>
    1c94:	         |   lea 15(a0),a0
    1c98:	         \-> move.l a0,d0
    1c9a:	             asr.l #4,d0
    1c9c:	             move.l d0,36(sp)
  if(blitwidth == 0) blitwidth = 1;
    1ca0:	         /-- bne.s 1ca8 <CstPasteChar+0x56>
    1ca2:	         |   moveq #1,d0
    1ca4:	         |   move.l d0,36(sp)

  if( y < 0) {
    1ca8:	         \-> tst.w 10(sp)
    1cac:	      /----- bge.s 1cf4 <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    1cae:	      |      movea.w 10(sp),a1
    1cb2:	      |      movea.l 80(sp),a0
    1cb6:	      |      move.l 4(a0),d0
    1cba:	      |      add.l a1,d0
    1cbc:	      |  /-- bpl.s 1cd0 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1cbe:	      |  |   pea 1798e <PutChar+0x30e>
    1cc4:	      |  |   jsr 16bac <KPrintF>
    1cca:	      |  |   addq.l #4,sp
      return;
    1ccc:	/-----|--|-- bra.w 2342 <CstPasteChar+0x6f0>
    }
    ystartdst = 0;
    1cd0:	|     |  \-> clr.l 48(sp)
    ystartsrc = y*-1;
    1cd4:	|     |      move.w 10(sp),d0
    1cd8:	|     |      ext.l d0
    1cda:	|     |      neg.l d0
    1cdc:	|     |      move.l d0,44(sp)
    blitheight = single->height+y;
    1ce0:	|     |      movea.l 80(sp),a0
    1ce4:	|     |      move.l 4(a0),d0
    1ce8:	|     |      movea.w 10(sp),a0
    1cec:	|     |      add.l a0,d0
    1cee:	|     |      move.l d0,40(sp)
    1cf2:	|  /--|----- bra.s 1d66 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    1cf4:	|  |  \----> movea.w 10(sp),a1
    1cf8:	|  |         movea.l 80(sp),a0
    1cfc:	|  |         move.l 4(a0),d0
    1d00:	|  |         move.l a1,d1
    1d02:	|  |         add.l d0,d1
    1d04:	|  |         move.l 1a6fa <winHeight>,d0
    1d0a:	|  |         cmp.l d1,d0
    1d0c:	|  |  /----- bge.s 1d4e <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    1d0e:	|  |  |      movea.w 10(sp),a0
    1d12:	|  |  |      move.l 1a6fa <winHeight>,d0
    1d18:	|  |  |      cmp.l a0,d0
    1d1a:	|  |  |  /-- bge.s 1d2e <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1d1c:	|  |  |  |   pea 1798e <PutChar+0x30e>
    1d22:	|  |  |  |   jsr 16bac <KPrintF>
    1d28:	|  |  |  |   addq.l #4,sp
      return;
    1d2a:	+--|--|--|-- bra.w 2342 <CstPasteChar+0x6f0>
    }
    ystartdst = y;
    1d2e:	|  |  |  \-> movea.w 10(sp),a0
    1d32:	|  |  |      move.l a0,48(sp)
    ystartsrc = 0;
    1d36:	|  |  |      clr.l 44(sp)
    blitheight = winHeight-y;
    1d3a:	|  |  |      move.l 1a6fa <winHeight>,d0
    1d40:	|  |  |      movea.w 10(sp),a0
    1d44:	|  |  |      move.l d0,d1
    1d46:	|  |  |      sub.l a0,d1
    1d48:	|  |  |      move.l d1,40(sp)
    1d4c:	|  +--|----- bra.s 1d66 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    1d4e:	|  |  \----> movea.w 10(sp),a0
    1d52:	|  |         move.l a0,48(sp)
    ystartsrc = 0;
    1d56:	|  |         clr.l 44(sp)
    blitheight = single->height;
    1d5a:	|  |         movea.l 80(sp),a0
    1d5e:	|  |         move.l 4(a0),d0
    1d62:	|  |         move.l d0,40(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    1d66:	|  \-------> tst.w 12(sp)
    1d6a:	|     /----- bge.w 1edc <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    1d6e:	|     |      movea.w 12(sp),a1
    1d72:	|     |      movea.l 80(sp),a0
    1d76:	|     |      move.l (a0),d0
    1d78:	|     |      add.l a1,d0
    1d7a:	|     |  /-- bpl.s 1d8e <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1d7c:	|     |  |   pea 1798e <PutChar+0x30e>
    1d82:	|     |  |   jsr 16bac <KPrintF>
    1d88:	|     |  |   addq.l #4,sp
      return;
    1d8a:	+-----|--|-- bra.w 2342 <CstPasteChar+0x6f0>

    }
    
    extrawords = 1;
    1d8e:	|     |  \-> move.w #1,74(sp)

    cutwordssource = (x*-1)/16; 
    1d94:	|     |      move.w 12(sp),d0
    1d98:	|     |  /-- bpl.s 1d9e <CstPasteChar+0x14c>
    1d9a:	|     |  |   addi.w #15,d0
    1d9e:	|     |  \-> asr.w #4,d0
    1da0:	|     |      neg.w d0
    1da2:	|     |      move.w d0,72(sp)
    cutmaskpixel = (x*-1)%16;     
    1da6:	|     |      move.w 12(sp),d0
    1daa:	|     |      ext.l d0
    1dac:	|     |      neg.l d0
    1dae:	|     |      andi.l #-2147483633,d0
    1db4:	|     |  /-- bpl.s 1dbe <CstPasteChar+0x16c>
    1db6:	|     |  |   subq.l #1,d0
    1db8:	|     |  |   moveq #-16,d1
    1dba:	|     |  |   or.l d1,d0
    1dbc:	|     |  |   addq.l #1,d0
    1dbe:	|     |  \-> move.w d0,70(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1dc2:	|     |      clr.w 68(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1dc6:	|     |      movea.l 80(sp),a0
    1dca:	|     |      move.l 24(a0),d0
    1dce:	|     |      move.l d0,d1
    1dd0:	|     |      moveq #0,d0
    1dd2:	|     |      move.w 72(sp),d0
    1dd6:	|     |      add.l d0,d0
    1dd8:	|     |      move.l d1,d2
    1dda:	|     |      add.l d0,d2
    1ddc:	|     |      movea.l 80(sp),a0
    1de0:	|     |      move.l (a0),d0
    1de2:	|     |      move.l 44(sp),-(sp)
    1de6:	|     |      move.l d0,-(sp)
    1de8:	|     |      jsr 1756a <__mulsi3>
    1dee:	|     |      addq.l #8,sp
    1df0:	|     |      lsr.l #3,d0
    1df2:	|     |      move.l d2,d1
    1df4:	|     |      add.l d0,d1
    1df6:	|     |      move.l d1,64(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1dfa:	|     |      move.l 1a6f6 <winWidth>,d0
    1e00:	|     |      move.l 48(sp),-(sp)
    1e04:	|     |      move.l d0,-(sp)
    1e06:	|     |      jsr 1756a <__mulsi3>
    1e0c:	|     |      addq.l #8,sp
    1e0e:	|     |      lsr.l #3,d0
    1e10:	|     |      move.l 28(sp),d1
    1e14:	|     |      add.l d1,d0
    1e16:	|     |      move.l d0,d2
    1e18:	|     |      subq.l #2,d2
    1e1a:	|     |      move.l d2,60(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1e1e:	|     |      move.l 1a6f6 <winWidth>,d0
    1e24:	|     |      move.l 48(sp),-(sp)
    1e28:	|     |      move.l d0,-(sp)
    1e2a:	|     |      jsr 1756a <__mulsi3>
    1e30:	|     |      addq.l #8,sp
    1e32:	|     |      lsr.l #3,d0
    1e34:	|     |      move.l 28(sp),d1
    1e38:	|     |      add.l d1,d0
    1e3a:	|     |      move.l d0,d1
    1e3c:	|     |      subq.l #2,d1
    1e3e:	|     |      move.l d1,56(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    1e42:	|     |      moveq #0,d0
    1e44:	|     |      move.w 70(sp),d0
    1e48:	|     |      moveq #16,d1
    1e4a:	|     |      sub.l d0,d1
    1e4c:	|     |      move.l d1,d0
    1e4e:	|     |      moveq #12,d2
    1e50:	|     |      lsl.l d2,d0
    1e52:	|     |      move.l d0,52(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    1e56:	|     |      movea.l 80(sp),a0
    1e5a:	|     |      move.l (a0),d0
    1e5c:	|     |      movea.l d0,a0
    1e5e:	|     |      cmpa.w #0,a0
    1e62:	|     |  /-- bge.s 1e68 <CstPasteChar+0x216>
    1e64:	|     |  |   lea 15(a0),a0
    1e68:	|     |  \-> move.l a0,d0
    1e6a:	|     |      asr.l #4,d0
    1e6c:	|     |      move.l d0,d0
    1e6e:	|     |      add.w 72(sp),d0
    1e72:	|     |      movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1e78:	|     |      move.l a0,d1
    1e7a:	|     |      addq.l #2,d1
    1e7c:	|     |      move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    1e82:	|     |      add.w 74(sp),d0
    1e86:	|     |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    1e88:	|     |      movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1e8e:	|     |      move.l a0,d0
    1e90:	|     |      addq.l #2,d0
    1e92:	|     |      move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    1e98:	|     |      move.l 40(sp),d0
    1e9c:	|     |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    1e9e:	|     |      movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1ea4:	|     |      move.l a0,d0
    1ea6:	|     |      addq.l #2,d0
    1ea8:	|     |      move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    1eae:	|     |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    1eb0:	|     |      movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1eb6:	|     |      move.l a0,d0
    1eb8:	|     |      addq.l #2,d0
    1eba:	|     |      move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    1ec0:	|     |      move.l 48(sp),d0
    1ec4:	|     |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    1ec6:	|     |      movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    1ecc:	|     |      move.l a0,d0
    1ece:	|     |      addq.l #2,d0
    1ed0:	|     |      move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    1ed6:	|     |      clr.w (a0)
    1ed8:	|  /--|----- bra.w 21f0 <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    1edc:	|  |  \----> movea.w 12(sp),a1
    1ee0:	|  |         movea.l 80(sp),a0
    1ee4:	|  |         move.l (a0),d0
    1ee6:	|  |         move.l a1,d1
    1ee8:	|  |         add.l d0,d1
    1eea:	|  |         move.l 1a6f6 <winWidth>,d0
    1ef0:	|  |         cmp.l d1,d0
    1ef2:	|  |  /----- bge.w 208e <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    1ef6:	|  |  |      movea.w 12(sp),a1
    1efa:	|  |  |      movea.l 80(sp),a0
    1efe:	|  |  |      move.l (a0),d0
    1f00:	|  |  |      move.l a1,d1
    1f02:	|  |  |      sub.l d0,d1
    1f04:	|  |  |      move.l 1a6f6 <winWidth>,d0
    1f0a:	|  |  |      cmp.l d1,d0
    1f0c:	|  |  |  /-- bge.s 1f20 <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1f0e:	|  |  |  |   pea 1798e <PutChar+0x30e>
    1f14:	|  |  |  |   jsr 16bac <KPrintF>
    1f1a:	|  |  |  |   addq.l #4,sp
      return;
    1f1c:	+--|--|--|-- bra.w 2342 <CstPasteChar+0x6f0>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    1f20:	|  |  |  \-> clr.w 74(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    1f24:	|  |  |      movea.w 12(sp),a1
    1f28:	|  |  |      movea.l 80(sp),a0
    1f2c:	|  |  |      move.l (a0),d0
    1f2e:	|  |  |      add.l a1,d0
    1f30:	|  |  |      move.l d0,d1
    1f32:	|  |  |      move.l 1a6f6 <winWidth>,d0
    1f38:	|  |  |      sub.l d0,d1
    1f3a:	|  |  |      move.l d1,d0
    1f3c:	|  |  |      lsr.l #4,d0
    1f3e:	|  |  |      move.w d0,72(sp)
    cutmaskpixel = 0;
    1f42:	|  |  |      clr.w 70(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    1f46:	|  |  |      move.w #-1,68(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    1f4c:	|  |  |      movea.l 80(sp),a0
    1f50:	|  |  |      move.l 24(a0),d0
    1f54:	|  |  |      move.l d0,d2
    1f56:	|  |  |      movea.l 80(sp),a0
    1f5a:	|  |  |      move.l (a0),d0
    1f5c:	|  |  |      move.l 44(sp),-(sp)
    1f60:	|  |  |      move.l d0,-(sp)
    1f62:	|  |  |      jsr 1756a <__mulsi3>
    1f68:	|  |  |      addq.l #8,sp
    1f6a:	|  |  |      lsr.l #3,d0
    1f6c:	|  |  |      move.l d2,d1
    1f6e:	|  |  |      add.l d0,d1
    1f70:	|  |  |      move.l d1,64(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    1f74:	|  |  |      move.l 1a6f6 <winWidth>,d0
    1f7a:	|  |  |      move.l 48(sp),-(sp)
    1f7e:	|  |  |      move.l d0,-(sp)
    1f80:	|  |  |      jsr 1756a <__mulsi3>
    1f86:	|  |  |      addq.l #8,sp
    1f88:	|  |  |      lsr.l #3,d0
    1f8a:	|  |  |      move.l 28(sp),d1
    1f8e:	|  |  |      add.l d0,d1
    1f90:	|  |  |      move.w 12(sp),d0
    1f94:	|  |  |  /-- bpl.s 1f9a <CstPasteChar+0x348>
    1f96:	|  |  |  |   addi.w #15,d0
    1f9a:	|  |  |  \-> asr.w #4,d0
    1f9c:	|  |  |      movea.w d0,a0
    1f9e:	|  |  |      move.l a0,d0
    1fa0:	|  |  |      add.l a0,d0
    1fa2:	|  |  |      move.l d1,d2
    1fa4:	|  |  |      add.l d0,d2
    1fa6:	|  |  |      move.l d2,60(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    1faa:	|  |  |      move.l 1a6f6 <winWidth>,d0
    1fb0:	|  |  |      move.l 48(sp),-(sp)
    1fb4:	|  |  |      move.l d0,-(sp)
    1fb6:	|  |  |      jsr 1756a <__mulsi3>
    1fbc:	|  |  |      addq.l #8,sp
    1fbe:	|  |  |      lsr.l #3,d0
    1fc0:	|  |  |      move.l 28(sp),d1
    1fc4:	|  |  |      add.l d0,d1
    1fc6:	|  |  |      move.w 12(sp),d0
    1fca:	|  |  |  /-- bpl.s 1fd0 <CstPasteChar+0x37e>
    1fcc:	|  |  |  |   addi.w #15,d0
    1fd0:	|  |  |  \-> asr.w #4,d0
    1fd2:	|  |  |      movea.w d0,a0
    1fd4:	|  |  |      move.l a0,d0
    1fd6:	|  |  |      add.l a0,d0
    1fd8:	|  |  |      move.l d1,d2
    1fda:	|  |  |      add.l d0,d2
    1fdc:	|  |  |      move.l d2,56(sp)
    bltcon0 = ((single->width%16) << 12);    
    1fe0:	|  |  |      movea.l 80(sp),a0
    1fe4:	|  |  |      move.l (a0),d0
    1fe6:	|  |  |      andi.l #-2147483633,d0
    1fec:	|  |  |  /-- bpl.s 1ff6 <CstPasteChar+0x3a4>
    1fee:	|  |  |  |   subq.l #1,d0
    1ff0:	|  |  |  |   moveq #-16,d1
    1ff2:	|  |  |  |   or.l d1,d0
    1ff4:	|  |  |  |   addq.l #1,d0
    1ff6:	|  |  |  \-> moveq #12,d2
    1ff8:	|  |  |      lsl.l d2,d0
    1ffa:	|  |  |      move.l d0,52(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    1ffe:	|  |  |      movea.l 80(sp),a0
    2002:	|  |  |      move.l (a0),d0
    2004:	|  |  |      movea.l d0,a0
    2006:	|  |  |      cmpa.w #0,a0
    200a:	|  |  |  /-- bge.s 2010 <CstPasteChar+0x3be>
    200c:	|  |  |  |   lea 15(a0),a0
    2010:	|  |  |  \-> move.l a0,d0
    2012:	|  |  |      asr.l #4,d0
    2014:	|  |  |      move.l d0,d0
    2016:	|  |  |      movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    201c:	|  |  |      move.l a0,d1
    201e:	|  |  |      addq.l #2,d1
    2020:	|  |  |      move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    2026:	|  |  |      add.w 72(sp),d0
    202a:	|  |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    202c:	|  |  |      movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2032:	|  |  |      move.l a0,d0
    2034:	|  |  |      addq.l #2,d0
    2036:	|  |  |      move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    203c:	|  |  |      move.l 40(sp),d0
    2040:	|  |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2042:	|  |  |      move.w 12(sp),d0
    2046:	|  |  |  /-- bpl.s 204c <CstPasteChar+0x3fa>
    2048:	|  |  |  |   addi.w #15,d0
    204c:	|  |  |  \-> asr.w #4,d0
    204e:	|  |  |      movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2054:	|  |  |      move.l a0,d1
    2056:	|  |  |      addq.l #2,d1
    2058:	|  |  |      move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    205e:	|  |  |      add.w d0,d0
    2060:	|  |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2062:	|  |  |      movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2068:	|  |  |      move.l a0,d0
    206a:	|  |  |      addq.l #2,d0
    206c:	|  |  |      move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    2072:	|  |  |      move.l 48(sp),d0
    2076:	|  |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2078:	|  |  |      movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    207e:	|  |  |      move.l a0,d0
    2080:	|  |  |      addq.l #2,d0
    2082:	|  |  |      move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    2088:	|  |  |      clr.w (a0)
    208a:	|  +--|----- bra.w 21f0 <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    208e:	|  |  \----> move.w #1,74(sp)
    cutwordssource = 0;
    2094:	|  |         clr.w 72(sp)
    cutmaskpixel = 0;
    2098:	|  |         clr.w 70(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    209c:	|  |         clr.w 68(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    20a0:	|  |         movea.l 80(sp),a0
    20a4:	|  |         move.l 24(a0),d0
    20a8:	|  |         move.l d0,d2
    20aa:	|  |         movea.l 80(sp),a0
    20ae:	|  |         move.l (a0),d0
    20b0:	|  |         movea.l d0,a0
    20b2:	|  |         cmpa.w #0,a0
    20b6:	|  |     /-- bge.s 20bc <CstPasteChar+0x46a>
    20b8:	|  |     |   lea 15(a0),a0
    20bc:	|  |     \-> move.l a0,d0
    20be:	|  |         asr.l #4,d0
    20c0:	|  |         move.l 44(sp),-(sp)
    20c4:	|  |         move.l d0,-(sp)
    20c6:	|  |         jsr 1756a <__mulsi3>
    20cc:	|  |         addq.l #8,sp
    20ce:	|  |         add.l d0,d0
    20d0:	|  |         move.l d2,d1
    20d2:	|  |         add.l d0,d1
    20d4:	|  |         move.l d1,64(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    20d8:	|  |         move.l 1a6f6 <winWidth>,d0
    20de:	|  |         move.l 48(sp),-(sp)
    20e2:	|  |         move.l d0,-(sp)
    20e4:	|  |         jsr 1756a <__mulsi3>
    20ea:	|  |         addq.l #8,sp
    20ec:	|  |         lsr.l #3,d0
    20ee:	|  |         move.l 28(sp),d1
    20f2:	|  |         add.l d0,d1
    20f4:	|  |         move.w 12(sp),d0
    20f8:	|  |     /-- bpl.s 20fe <CstPasteChar+0x4ac>
    20fa:	|  |     |   addi.w #15,d0
    20fe:	|  |     \-> asr.w #4,d0
    2100:	|  |         movea.w d0,a0
    2102:	|  |         move.l a0,d0
    2104:	|  |         add.l a0,d0
    2106:	|  |         move.l d1,d2
    2108:	|  |         add.l d0,d2
    210a:	|  |         move.l d2,60(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    210e:	|  |         move.l 1a6f6 <winWidth>,d0
    2114:	|  |         move.l 48(sp),-(sp)
    2118:	|  |         move.l d0,-(sp)
    211a:	|  |         jsr 1756a <__mulsi3>
    2120:	|  |         addq.l #8,sp
    2122:	|  |         lsr.l #3,d0
    2124:	|  |         move.l 28(sp),d1
    2128:	|  |         add.l d0,d1
    212a:	|  |         move.w 12(sp),d0
    212e:	|  |     /-- bpl.s 2134 <CstPasteChar+0x4e2>
    2130:	|  |     |   addi.w #15,d0
    2134:	|  |     \-> asr.w #4,d0
    2136:	|  |         movea.w d0,a0
    2138:	|  |         move.l a0,d0
    213a:	|  |         add.l a0,d0
    213c:	|  |         move.l d1,d2
    213e:	|  |         add.l d0,d2
    2140:	|  |         move.l d2,56(sp)
    bltcon0 = ((x%16) << 12);
    2144:	|  |         move.w 12(sp),d0
    2148:	|  |         andi.w #-32753,d0
    214c:	|  |     /-- bpl.s 2156 <CstPasteChar+0x504>
    214e:	|  |     |   subq.w #1,d0
    2150:	|  |     |   ori.w #-16,d0
    2154:	|  |     |   addq.w #1,d0
    2156:	|  |     \-> ext.l d0
    2158:	|  |         moveq #12,d1
    215a:	|  |         lsl.l d1,d0
    215c:	|  |         move.l d0,52(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2160:	|  |         movea.l 80(sp),a0
    2164:	|  |         move.l (a0),d0
    2166:	|  |         movea.l d0,a0
    2168:	|  |         cmpa.w #0,a0
    216c:	|  |     /-- bge.s 2172 <CstPasteChar+0x520>
    216e:	|  |     |   lea 15(a0),a0
    2172:	|  |     \-> move.l a0,d0
    2174:	|  |         asr.l #4,d0
    2176:	|  |         move.l d0,d0
    2178:	|  |         add.w 72(sp),d0
    217c:	|  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2182:	|  |         move.l a0,d1
    2184:	|  |         addq.l #2,d1
    2186:	|  |         move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    218c:	|  |         add.w 74(sp),d0
    2190:	|  |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2192:	|  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2198:	|  |         move.l a0,d0
    219a:	|  |         addq.l #2,d0
    219c:	|  |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    21a2:	|  |         move.l 40(sp),d0
    21a6:	|  |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    21a8:	|  |         move.w 12(sp),d0
    21ac:	|  |     /-- bpl.s 21b2 <CstPasteChar+0x560>
    21ae:	|  |     |   addi.w #15,d0
    21b2:	|  |     \-> asr.w #4,d0
    21b4:	|  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    21ba:	|  |         move.l a0,d1
    21bc:	|  |         addq.l #2,d1
    21be:	|  |         move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    21c4:	|  |         add.w d0,d0
    21c6:	|  |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    21c8:	|  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    21ce:	|  |         move.l a0,d0
    21d0:	|  |         addq.l #2,d0
    21d2:	|  |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    21d8:	|  |         move.l 48(sp),d0
    21dc:	|  |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    21de:	|  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    21e4:	|  |         move.l a0,d0
    21e6:	|  |         addq.l #2,d0
    21e8:	|  |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    21ee:	|  |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    21f0:	|  \-------> moveq #0,d0
    21f2:	|            move.w 70(sp),d0
    21f6:	|            moveq #0,d1
    21f8:	|            not.w d1
    21fa:	|            asr.l d0,d1
    21fc:	|            move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2200:	|            moveq #0,d1
    2202:	|            move.w 72(sp),d1
    2206:	|            moveq #0,d0
    2208:	|            move.w 74(sp),d0
    220c:	|            sub.l d0,d1
    220e:	|            move.l d1,d0
    2210:	|            add.w d0,d0
    2212:	|            move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2216:	|            move.l 1a6f6 <winWidth>,d0
    221c:	|            lsr.l #3,d0
    221e:	|            move.l d0,d2
    2220:	|            move.w 72(sp),d1
    2224:	|            sub.w 74(sp),d1
    2228:	|            move.l 36(sp),d0
    222c:	|            sub.w d0,d1
    222e:	|            move.w d1,d0
    2230:	|            add.w d1,d0
    2232:	|            add.w d2,d0
    2234:	|            move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2238:	|            move.l 1a6f6 <winWidth>,d0
    223e:	|            lsr.l #3,d0
    2240:	|            move.l d0,d2
    2242:	|            move.w 72(sp),d1
    2246:	|            sub.w 74(sp),d1
    224a:	|            move.l 36(sp),d0
    224e:	|            sub.w d0,d1
    2250:	|            move.w d1,d0
    2252:	|            add.w d1,d0
    2254:	|            add.w d2,d0
    2256:	|            move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    225a:	|            move.l #14675968,16(sp)
  WaitBlit();
    2262:	|            move.l 1a7ae <GfxBase>,d0
    2268:	|            movea.l d0,a6
    226a:	|            jsr -228(a6)

  custom->bltafwm = bltafwm;
    226e:	|            movea.l 16(sp),a0
    2272:	|            move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2278:	|            movea.l 16(sp),a0
    227c:	|            move.w 68(sp),70(a0)
  custom->bltamod = bltamod;
    2282:	|            move.w 24(sp),d0
    2286:	|            movea.l 16(sp),a0
    228a:	|            move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    228e:	|            move.w 22(sp),d0
    2292:	|            movea.l 16(sp),a0
    2296:	|            move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    229a:	|            move.w 20(sp),d0
    229e:	|            movea.l 16(sp),a0
    22a2:	|            move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    22a6:	|            move.l 1a6f6 <winWidth>,d0
    22ac:	|            lsr.l #3,d0
    22ae:	|            move.l d0,d1
    22b0:	|            move.l 1a6fa <winHeight>,d0
    22b6:	|            move.l d0,d0
    22b8:	|            move.w d1,d2
    22ba:	|            muls.w d0,d2
    22bc:	|            move.w d2,14(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    22c0:	|            clr.l 32(sp)
    22c4:	|        /-- bra.s 233a <CstPasteChar+0x6e8>
  {
    custom->bltcon0 = bltcon0 + 0xbfa;
    22c6:	|     /--|-> move.l 52(sp),d0
    22ca:	|     |  |   addi.w #3066,d0
    22ce:	|     |  |   movea.l 16(sp),a0
    22d2:	|     |  |   move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    22d6:	|     |  |   move.l 64(sp),d0
    22da:	|     |  |   movea.l 16(sp),a0
    22de:	|     |  |   move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    22e2:	|     |  |   move.l 60(sp),d0
    22e6:	|     |  |   movea.l 16(sp),a0
    22ea:	|     |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    22ee:	|     |  |   move.l 56(sp),d0
    22f2:	|     |  |   movea.l 16(sp),a0
    22f6:	|     |  |   move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    22fa:	|     |  |   move.l 40(sp),d0
    22fe:	|     |  |   lsl.w #6,d0
    2300:	|     |  |   move.l 36(sp),d1
    2304:	|     |  |   add.w d1,d0
    2306:	|     |  |   sub.w 72(sp),d0
    230a:	|     |  |   add.w 74(sp),d0
    230e:	|     |  |   movea.l 16(sp),a0
    2312:	|     |  |   move.w d0,88(a0)
    bltcpt += bltcptplus;
    2316:	|     |  |   moveq #0,d0
    2318:	|     |  |   move.w 14(sp),d0
    231c:	|     |  |   add.l d0,60(sp)
    bltdpt += bltcptplus;
    2320:	|     |  |   moveq #0,d0
    2322:	|     |  |   move.w 14(sp),d0
    2326:	|     |  |   add.l d0,56(sp)

    WaitBlit();
    232a:	|     |  |   move.l 1a7ae <GfxBase>,d0
    2330:	|     |  |   movea.l d0,a6
    2332:	|     |  |   jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2336:	|     |  |   addq.l #1,32(sp)
    233a:	|     |  \-> moveq #4,d0
    233c:	|     |      cmp.l 32(sp),d0
    2340:	|     \----- bge.s 22c6 <CstPasteChar+0x674>
  }   
}
    2342:	\----------> move.l (sp)+,d2
    2344:	             movea.l (sp)+,a6
    2346:	             lea 68(sp),sp
    234a:	             rts

0000234c <CstRestoreScreen>:


void CstRestoreScreen()
{
    234c:	                   lea -24(sp),sp
    2350:	                   move.l a6,-(sp)
    2352:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2354:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    235c:	                   move.l 1a6de <CstCleanupQueueDrawBuffer>,d0
    2362:	/----------------- beq.w 256a <CstRestoreScreen+0x21e>
    2366:	|                  move.l 1a6d6 <CstDrawBuffer>,d0
    236c:	+----------------- beq.w 256a <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2370:	|                  move.l 1a7ae <GfxBase>,d0
    2376:	|                  movea.l d0,a6
    2378:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    237c:	|                  movea.l 16(sp),a0
    2380:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2386:	|                  movea.l 16(sp),a0
    238a:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2390:	|                  movea.l 16(sp),a0
    2394:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    239a:	|     /----------- bra.w 255e <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    239e:	|  /--|----------> movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    23a4:	|  |  |            move.l 4(a0),d0
    23a8:	|  |  |  /-------- beq.w 252c <CstRestoreScreen+0x1e0>
    23ac:	|  |  |  |         movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    23b2:	|  |  |  |         movea.l 4(a0),a0
    23b6:	|  |  |  |         move.l 16(a0),d0
    23ba:	|  |  |  |         moveq #2,d1
    23bc:	|  |  |  |         cmp.l d0,d1
    23be:	|  |  |  +-------- blt.w 252c <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    23c2:	|  |  |  |         move.l 1a6f6 <winWidth>,d0
    23c8:	|  |  |  |         lsr.l #3,d0
    23ca:	|  |  |  |         move.l d0,d1
    23cc:	|  |  |  |         movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    23d2:	|  |  |  |         move.w 8(a0),d0
    23d6:	|  |  |  |         add.w d0,d0
    23d8:	|  |  |  |         sub.w d0,d1
    23da:	|  |  |  |         movea.l 16(sp),a0
    23de:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    23e2:	|  |  |  |         move.l 1a6f6 <winWidth>,d0
    23e8:	|  |  |  |         lsr.l #3,d0
    23ea:	|  |  |  |         move.l d0,d1
    23ec:	|  |  |  |         movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    23f2:	|  |  |  |         move.w 8(a0),d0
    23f6:	|  |  |  |         add.w d0,d0
    23f8:	|  |  |  |         sub.w d0,d1
    23fa:	|  |  |  |         movea.l 16(sp),a0
    23fe:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2402:	|  |  |  |         movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2408:	|  |  |  |         move.w 14(a0),d0
    240c:	|  |  |  |         move.w d0,d0
    240e:	|  |  |  |         andi.l #65535,d0
    2414:	|  |  |  |         move.l 1a6f6 <winWidth>,d1
    241a:	|  |  |  |         move.l d1,-(sp)
    241c:	|  |  |  |         move.l d0,-(sp)
    241e:	|  |  |  |         jsr 1756a <__mulsi3>
    2424:	|  |  |  |         addq.l #8,sp
    2426:	|  |  |  |         move.l d0,d1
    2428:	|  |  |  |         lsr.l #3,d1
    242a:	|  |  |  |         move.l 1a6c4 <CstBackDrop>,d0
    2430:	|  |  |  |         add.l d0,d1
    2432:	|  |  |  |         movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2438:	|  |  |  |         move.w 12(a0),d0
    243c:	|  |  |  |         move.w d0,d0
    243e:	|  |  |  |         andi.l #65535,d0
    2444:	|  |  |  |         move.l d1,d2
    2446:	|  |  |  |         add.l d0,d2
    2448:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    244c:	|  |  |  |         movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2452:	|  |  |  |         move.w 14(a0),d0
    2456:	|  |  |  |         move.w d0,d0
    2458:	|  |  |  |         andi.l #65535,d0
    245e:	|  |  |  |         move.l 1a6f6 <winWidth>,d1
    2464:	|  |  |  |         move.l d1,-(sp)
    2466:	|  |  |  |         move.l d0,-(sp)
    2468:	|  |  |  |         jsr 1756a <__mulsi3>
    246e:	|  |  |  |         addq.l #8,sp
    2470:	|  |  |  |         move.l d0,d1
    2472:	|  |  |  |         lsr.l #3,d1
    2474:	|  |  |  |         move.l 1a6d6 <CstDrawBuffer>,d0
    247a:	|  |  |  |         add.l d0,d1
    247c:	|  |  |  |         movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2482:	|  |  |  |         move.w 12(a0),d0
    2486:	|  |  |  |         move.w d0,d0
    2488:	|  |  |  |         andi.l #65535,d0
    248e:	|  |  |  |         move.l d1,d2
    2490:	|  |  |  |         add.l d0,d2
    2492:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2496:	|  |  |  |         clr.l 20(sp)
    249a:	|  |  |  |     /-- bra.w 2522 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    249e:	|  |  |  |  /--|-> move.l 28(sp),d0
    24a2:	|  |  |  |  |  |   movea.l 16(sp),a0
    24a6:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    24aa:	|  |  |  |  |  |   move.l 24(sp),d0
    24ae:	|  |  |  |  |  |   movea.l 16(sp),a0
    24b2:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    24b6:	|  |  |  |  |  |   movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    24bc:	|  |  |  |  |  |   move.w 10(a0),d0
    24c0:	|  |  |  |  |  |   lsl.w #6,d0
    24c2:	|  |  |  |  |  |   movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    24c8:	|  |  |  |  |  |   move.w 8(a0),d1
    24cc:	|  |  |  |  |  |   add.w d1,d0
    24ce:	|  |  |  |  |  |   movea.l 16(sp),a0
    24d2:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    24d6:	|  |  |  |  |  |   move.l 1a6f6 <winWidth>,d0
    24dc:	|  |  |  |  |  |   lsr.l #3,d0
    24de:	|  |  |  |  |  |   move.l 1a6fa <winHeight>,d1
    24e4:	|  |  |  |  |  |   move.l d1,-(sp)
    24e6:	|  |  |  |  |  |   move.l d0,-(sp)
    24e8:	|  |  |  |  |  |   jsr 1756a <__mulsi3>
    24ee:	|  |  |  |  |  |   addq.l #8,sp
    24f0:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    24f4:	|  |  |  |  |  |   move.l 1a6f6 <winWidth>,d0
    24fa:	|  |  |  |  |  |   lsr.l #3,d0
    24fc:	|  |  |  |  |  |   move.l 1a6fa <winHeight>,d1
    2502:	|  |  |  |  |  |   move.l d1,-(sp)
    2504:	|  |  |  |  |  |   move.l d0,-(sp)
    2506:	|  |  |  |  |  |   jsr 1756a <__mulsi3>
    250c:	|  |  |  |  |  |   addq.l #8,sp
    250e:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2512:	|  |  |  |  |  |   move.l 1a7ae <GfxBase>,d0
    2518:	|  |  |  |  |  |   movea.l d0,a6
    251a:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    251e:	|  |  |  |  |  |   addq.l #1,20(sp)
    2522:	|  |  |  |  |  \-> moveq #4,d0
    2524:	|  |  |  |  |      cmp.l 20(sp),d0
    2528:	|  |  |  |  \----- bge.w 249e <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    252c:	|  |  |  \-------> move.l 1a6de <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2534:	|  |  |            movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    253a:	|  |  |            move.l 16(a0),d0
    253e:	|  |  |            move.l d0,1a6de <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2544:	|  |  |            move.l 12(sp),8(sp)
    254a:	|  |  |            move.l 1a7a2 <SysBase>,d0
    2550:	|  |  |            movea.l d0,a6
    2552:	|  |  |            movea.l 8(sp),a1
    2556:	|  |  |            jsr -690(a6)
    todelete = NULL;
    255a:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    255e:	|  |  \----------> move.l 1a6de <CstCleanupQueueDrawBuffer>,d0
    2564:	|  \-------------- bne.w 239e <CstRestoreScreen+0x52>
    2568:	|              /-- bra.s 256c <CstRestoreScreen+0x220>
    return;
    256a:	\--------------|-> nop
  }
  
}
    256c:	               \-> move.l (sp)+,d2
    256e:	                   movea.l (sp)+,a6
    2570:	                   lea 24(sp),sp
    2574:	                   rts

00002576 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2576:	                lea -124(sp),sp
    257a:	                movem.l d2-d3/a6,-(sp)
    257e:	                movea.l 148(sp),a0
    2582:	                move.l 152(sp),d1
    2586:	                move.l 156(sp),d0
    258a:	                movea.w a0,a0
    258c:	                move.w a0,16(sp)
    2590:	                move.w d1,d1
    2592:	                move.w d1,14(sp)
    2596:	                move.w d0,d0
    2598:	                move.w d0,12(sp)
  UWORD *destination = 0;
    259c:	                clr.l 132(sp)
  switch(destinationtype)
    25a0:	                moveq #0,d0
    25a2:	                move.w 12(sp),d0
    25a6:	                moveq #1,d1
    25a8:	                cmp.l d0,d1
    25aa:	            /-- beq.s 25b4 <CstScaleSprite+0x3e>
    25ac:	            |   moveq #2,d2
    25ae:	            |   cmp.l d0,d2
    25b0:	         /--|-- beq.s 25be <CstScaleSprite+0x48>
    25b2:	      /--|--|-- bra.s 25d0 <CstScaleSprite+0x5a>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    25b4:	      |  |  \-> move.l 1a6d6 <CstDrawBuffer>,132(sp)
      break;
    25bc:	      +--|----- bra.s 25d0 <CstScaleSprite+0x5a>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    25be:	      |  \----> move.w #2,1a6d0 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    25c6:	      |         move.l 1a6c4 <CstBackDrop>,132(sp)
      break;
    25ce:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    25d0:	      \-------> tst.w 14(sp)
    25d4:	         /----- bge.s 261c <CstScaleSprite+0xa6>
    if(y + single->height < 0) {
    25d6:	         |      movea.w 14(sp),a1
    25da:	         |      movea.l 140(sp),a0
    25de:	         |      move.l 4(a0),d0
    25e2:	         |      add.l a1,d0
    25e4:	         |  /-- bpl.s 25f8 <CstScaleSprite+0x82>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    25e6:	         |  |   pea 1798e <PutChar+0x30e>
    25ec:	         |  |   jsr 16bac <KPrintF>
    25f2:	         |  |   addq.l #4,sp
      return;
    25f4:	/--------|--|-- bra.w 30ac <CstScaleSprite+0xb36>
    }
    ystartdst = 0;
    25f8:	|        |  \-> clr.l 96(sp)
    ystartsrc = y*-1;
    25fc:	|        |      move.w 14(sp),d0
    2600:	|        |      ext.l d0
    2602:	|        |      neg.l d0
    2604:	|        |      move.l d0,92(sp)
    blitheight = single->height+y;
    2608:	|        |      movea.l 140(sp),a0
    260c:	|        |      move.l 4(a0),d0
    2610:	|        |      movea.w 14(sp),a0
    2614:	|        |      add.l a0,d0
    2616:	|        |      move.l d0,88(sp)
    261a:	|     /--|----- bra.s 268e <CstScaleSprite+0x118>
  } else if(y+single->height > (int) winHeight) {
    261c:	|     |  \----> movea.w 14(sp),a1
    2620:	|     |         movea.l 140(sp),a0
    2624:	|     |         move.l 4(a0),d0
    2628:	|     |         move.l a1,d1
    262a:	|     |         add.l d0,d1
    262c:	|     |         move.l 1a6fa <winHeight>,d0
    2632:	|     |         cmp.l d1,d0
    2634:	|     |  /----- bge.s 2676 <CstScaleSprite+0x100>
    if(y  > (int) winHeight) {
    2636:	|     |  |      movea.w 14(sp),a0
    263a:	|     |  |      move.l 1a6fa <winHeight>,d0
    2640:	|     |  |      cmp.l a0,d0
    2642:	|     |  |  /-- bge.s 2656 <CstScaleSprite+0xe0>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2644:	|     |  |  |   pea 1798e <PutChar+0x30e>
    264a:	|     |  |  |   jsr 16bac <KPrintF>
    2650:	|     |  |  |   addq.l #4,sp
      return;
    2652:	+-----|--|--|-- bra.w 30ac <CstScaleSprite+0xb36>
    }
    ystartdst = y;
    2656:	|     |  |  \-> movea.w 14(sp),a0
    265a:	|     |  |      move.l a0,96(sp)
    ystartsrc = 0;
    265e:	|     |  |      clr.l 92(sp)
    blitheight = winHeight-y;
    2662:	|     |  |      move.l 1a6fa <winHeight>,d0
    2668:	|     |  |      movea.w 14(sp),a0
    266c:	|     |  |      move.l d0,d1
    266e:	|     |  |      sub.l a0,d1
    2670:	|     |  |      move.l d1,88(sp)
    2674:	|     +--|----- bra.s 268e <CstScaleSprite+0x118>
  } else {
    ystartdst = y;
    2676:	|     |  \----> movea.w 14(sp),a0
    267a:	|     |         move.l a0,96(sp)
    ystartsrc = 0;
    267e:	|     |         clr.l 92(sp)
    blitheight = single->height;
    2682:	|     |         movea.l 140(sp),a0
    2686:	|     |         move.l 4(a0),d0
    268a:	|     |         move.l d0,88(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    268e:	|     \-------> tst.w 16(sp)
    2692:	|     /-------- bge.w 2942 <CstScaleSprite+0x3cc>
    if(x + single->width < 0) {
    2696:	|     |         movea.w 16(sp),a1
    269a:	|     |         movea.l 140(sp),a0
    269e:	|     |         move.l (a0),d0
    26a0:	|     |         add.l a1,d0
    26a2:	|     |     /-- bpl.s 26b6 <CstScaleSprite+0x140>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    26a4:	|     |     |   pea 1798e <PutChar+0x30e>
    26aa:	|     |     |   jsr 16bac <KPrintF>
    26b0:	|     |     |   addq.l #4,sp
      return;
    26b2:	+-----|-----|-- bra.w 30ac <CstScaleSprite+0xb36>

    }
    
    extrawords = 1;
    26b6:	|     |     \-> move.w #1,130(sp)
    cutwordssource = (x*-1)/16; 
    26bc:	|     |         move.w 16(sp),d0
    26c0:	|     |     /-- bpl.s 26c6 <CstScaleSprite+0x150>
    26c2:	|     |     |   addi.w #15,d0
    26c6:	|     |     \-> asr.w #4,d0
    26c8:	|     |         neg.w d0
    26ca:	|     |         move.w d0,128(sp)
    cutmaskpixel = (x*-1)%16;     
    26ce:	|     |         move.w 16(sp),d0
    26d2:	|     |         ext.l d0
    26d4:	|     |         neg.l d0
    26d6:	|     |         andi.l #-2147483633,d0
    26dc:	|     |     /-- bpl.s 26e6 <CstScaleSprite+0x170>
    26de:	|     |     |   subq.l #1,d0
    26e0:	|     |     |   moveq #-16,d1
    26e2:	|     |     |   or.l d1,d0
    26e4:	|     |     |   addq.l #1,d0
    26e6:	|     |     \-> move.w d0,126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    26ea:	|     |         clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    26ee:	|     |         movea.l 140(sp),a0
    26f2:	|     |         move.l 24(a0),d0
    26f6:	|     |         move.l d0,d2
    26f8:	|     |         moveq #0,d0
    26fa:	|     |         move.w 128(sp),d0
    26fe:	|     |         add.l d0,d0
    2700:	|     |         move.l d0,d3
    2702:	|     |         movea.l 140(sp),a0
    2706:	|     |         move.l (a0),d0
    2708:	|     |     /-- bpl.s 270c <CstScaleSprite+0x196>
    270a:	|     |     |   addq.l #7,d0
    270c:	|     |     \-> asr.l #3,d0
    270e:	|     |         movea.l 140(sp),a0
    2712:	|     |         move.l 4(a0),d1
    2716:	|     |         move.l d1,-(sp)
    2718:	|     |         move.l d0,-(sp)
    271a:	|     |         jsr 1756a <__mulsi3>
    2720:	|     |         addq.l #8,sp
    2722:	|     |         move.l d0,d1
    2724:	|     |         move.l d1,d0
    2726:	|     |         add.l d0,d0
    2728:	|     |         add.l d0,d0
    272a:	|     |         add.l d1,d0
    272c:	|     |         add.l d3,d0
    272e:	|     |         add.l d0,d2
    2730:	|     |         movea.l 140(sp),a0
    2734:	|     |         move.l (a0),d0
    2736:	|     |         move.l 92(sp),-(sp)
    273a:	|     |         move.l d0,-(sp)
    273c:	|     |         jsr 1756a <__mulsi3>
    2742:	|     |         addq.l #8,sp
    2744:	|     |         lsr.l #3,d0
    2746:	|     |         move.l d2,d1
    2748:	|     |         add.l d0,d1
    274a:	|     |         move.l d1,120(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    274e:	|     |         movea.l 140(sp),a0
    2752:	|     |         move.l 24(a0),d0
    2756:	|     |         move.l d0,d1
    2758:	|     |         moveq #0,d0
    275a:	|     |         move.w 128(sp),d0
    275e:	|     |         add.l d0,d0
    2760:	|     |         move.l d1,d2
    2762:	|     |         add.l d0,d2
    2764:	|     |         movea.l 140(sp),a0
    2768:	|     |         move.l (a0),d0
    276a:	|     |         move.l 92(sp),-(sp)
    276e:	|     |         move.l d0,-(sp)
    2770:	|     |         jsr 1756a <__mulsi3>
    2776:	|     |         addq.l #8,sp
    2778:	|     |         lsr.l #3,d0
    277a:	|     |         move.l d2,d1
    277c:	|     |         add.l d0,d1
    277e:	|     |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2782:	|     |         move.l 1a6f6 <winWidth>,d0
    2788:	|     |         move.l 96(sp),-(sp)
    278c:	|     |         move.l d0,-(sp)
    278e:	|     |         jsr 1756a <__mulsi3>
    2794:	|     |         addq.l #8,sp
    2796:	|     |         lsr.l #3,d0
    2798:	|     |         move.l 132(sp),d1
    279c:	|     |         add.l d1,d0
    279e:	|     |         move.l d0,d2
    27a0:	|     |         subq.l #2,d2
    27a2:	|     |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    27a6:	|     |         move.l 1a6f6 <winWidth>,d0
    27ac:	|     |         move.l 96(sp),-(sp)
    27b0:	|     |         move.l d0,-(sp)
    27b2:	|     |         jsr 1756a <__mulsi3>
    27b8:	|     |         addq.l #8,sp
    27ba:	|     |         lsr.l #3,d0
    27bc:	|     |         move.l 132(sp),d1
    27c0:	|     |         add.l d1,d0
    27c2:	|     |         move.l d0,d1
    27c4:	|     |         subq.l #2,d1
    27c6:	|     |         move.l d1,108(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    27ca:	|     |         moveq #0,d0
    27cc:	|     |         move.w 126(sp),d0
    27d0:	|     |         moveq #16,d1
    27d2:	|     |         sub.l d0,d1
    27d4:	|     |         move.l d1,d0
    27d6:	|     |         moveq #12,d2
    27d8:	|     |         lsl.l d2,d0
    27da:	|     |         addi.l #4042,d0
    27e0:	|     |         move.l d0,104(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    27e4:	|     |         moveq #0,d0
    27e6:	|     |         move.w 126(sp),d0
    27ea:	|     |         moveq #16,d1
    27ec:	|     |         sub.l d0,d1
    27ee:	|     |         move.l d1,d0
    27f0:	|     |         moveq #12,d1
    27f2:	|     |         lsl.l d1,d0
    27f4:	|     |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    27f8:	|     |         cmpi.w #1,12(sp)
    27fe:	|     |  /----- bne.w 28bc <CstScaleSprite+0x346>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2802:	|     |  |      move.l 1a6de <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    280a:	|     |  |      moveq #20,d2
    280c:	|     |  |      move.l d2,44(sp)
    2810:	|     |  |      clr.l 40(sp)
    2814:	|     |  |      move.l 1a7a2 <SysBase>,d0
    281a:	|     |  |      movea.l d0,a6
    281c:	|     |  |      move.l 44(sp),d0
    2820:	|     |  |      move.l 40(sp),d1
    2824:	|     |  |      jsr -684(a6)
    2828:	|     |  |      move.l d0,36(sp)
    282c:	|     |  |      move.l 36(sp),d0
    2830:	|     |  |      move.l d0,1a6de <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2836:	|     |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    283c:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2842:	|     |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2848:	|     |  |      move.w 16(sp),d0
    284c:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    284e:	|     |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2854:	|     |  |      move.w 14(sp),d0
    2858:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    285c:	|     |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2862:	|     |  |      move.l 144(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    2868:	|     |  |      movea.l 140(sp),a0
    286c:	|     |  |      move.l (a0),d0
    286e:	|     |  |      movea.l d0,a0
    2870:	|     |  |      cmpa.w #0,a0
    2874:	|     |  |  /-- bge.s 287a <CstScaleSprite+0x304>
    2876:	|     |  |  |   lea 15(a0),a0
    287a:	|     |  |  \-> move.l a0,d0
    287c:	|     |  |      asr.l #4,d0
    287e:	|     |  |      move.l d0,d0
    2880:	|     |  |      add.w 128(sp),d0
    2884:	|     |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    288a:	|     |  |      add.w 130(sp),d0
    288e:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2892:	|     |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2898:	|     |  |      move.l 88(sp),d0
    289c:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    28a0:	|     |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    28a6:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    28aa:	|     |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    28b0:	|     |  |      move.l 96(sp),d0
    28b4:	|     |  |      move.w d0,14(a0)
    28b8:	|  /--|--|----- bra.w 2ed4 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    28bc:	|  |  |  \----> movea.l 140(sp),a0
    28c0:	|  |  |         move.l (a0),d0
    28c2:	|  |  |         movea.l d0,a0
    28c4:	|  |  |         cmpa.w #0,a0
    28c8:	|  |  |     /-- bge.s 28ce <CstScaleSprite+0x358>
    28ca:	|  |  |     |   lea 15(a0),a0
    28ce:	|  |  |     \-> move.l a0,d0
    28d0:	|  |  |         asr.l #4,d0
    28d2:	|  |  |         move.l d0,d0
    28d4:	|  |  |         add.w 128(sp),d0
    28d8:	|  |  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    28de:	|  |  |         move.l a0,d1
    28e0:	|  |  |         addq.l #2,d1
    28e2:	|  |  |         move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    28e8:	|  |  |         add.w 130(sp),d0
    28ec:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    28ee:	|  |  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    28f4:	|  |  |         move.l a0,d0
    28f6:	|  |  |         addq.l #2,d0
    28f8:	|  |  |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    28fe:	|  |  |         move.l 88(sp),d0
    2902:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2904:	|  |  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    290a:	|  |  |         move.l a0,d0
    290c:	|  |  |         addq.l #2,d0
    290e:	|  |  |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    2914:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2916:	|  |  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    291c:	|  |  |         move.l a0,d0
    291e:	|  |  |         addq.l #2,d0
    2920:	|  |  |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    2926:	|  |  |         move.l 96(sp),d0
    292a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    292c:	|  |  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2932:	|  |  |         move.l a0,d0
    2934:	|  |  |         addq.l #2,d0
    2936:	|  |  |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    293c:	|  |  |         clr.w (a0)
    293e:	|  +--|-------- bra.w 2ed4 <CstScaleSprite+0x95e>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2942:	|  |  \-------> movea.w 16(sp),a1
    2946:	|  |            movea.l 140(sp),a0
    294a:	|  |            move.l (a0),d0
    294c:	|  |            move.l a1,d1
    294e:	|  |            add.l d0,d1
    2950:	|  |            move.l 1a6f6 <winWidth>,d0
    2956:	|  |            cmp.l d1,d0
    2958:	|  |  /-------- bge.w 2c3a <CstScaleSprite+0x6c4>

    if(x - single->width > (int) winWidth)
    295c:	|  |  |         movea.w 16(sp),a1
    2960:	|  |  |         movea.l 140(sp),a0
    2964:	|  |  |         move.l (a0),d0
    2966:	|  |  |         move.l a1,d1
    2968:	|  |  |         sub.l d0,d1
    296a:	|  |  |         move.l 1a6f6 <winWidth>,d0
    2970:	|  |  |         cmp.l d1,d0
    2972:	|  |  |     /-- bge.s 2986 <CstScaleSprite+0x410>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2974:	|  |  |     |   pea 1798e <PutChar+0x30e>
    297a:	|  |  |     |   jsr 16bac <KPrintF>
    2980:	|  |  |     |   addq.l #4,sp
      return;
    2982:	+--|--|-----|-- bra.w 30ac <CstScaleSprite+0xb36>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2986:	|  |  |     \-> clr.w 130(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    298a:	|  |  |         movea.w 16(sp),a1
    298e:	|  |  |         movea.l 140(sp),a0
    2992:	|  |  |         move.l (a0),d0
    2994:	|  |  |         add.l a1,d0
    2996:	|  |  |         move.l d0,d1
    2998:	|  |  |         move.l 1a6f6 <winWidth>,d0
    299e:	|  |  |         sub.l d0,d1
    29a0:	|  |  |         move.l d1,d0
    29a2:	|  |  |         lsr.l #4,d0
    29a4:	|  |  |         move.w d0,128(sp)
    cutmaskpixel = 0;
    29a8:	|  |  |         clr.w 126(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    29ac:	|  |  |         move.w #-1,124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    29b2:	|  |  |         movea.l 140(sp),a0
    29b6:	|  |  |         move.l 24(a0),d0
    29ba:	|  |  |         move.l d0,d2
    29bc:	|  |  |         movea.l 140(sp),a0
    29c0:	|  |  |         move.l (a0),d0
    29c2:	|  |  |     /-- bpl.s 29c6 <CstScaleSprite+0x450>
    29c4:	|  |  |     |   addq.l #7,d0
    29c6:	|  |  |     \-> asr.l #3,d0
    29c8:	|  |  |         movea.l 140(sp),a0
    29cc:	|  |  |         move.l 4(a0),d1
    29d0:	|  |  |         move.l d1,-(sp)
    29d2:	|  |  |         move.l d0,-(sp)
    29d4:	|  |  |         jsr 1756a <__mulsi3>
    29da:	|  |  |         addq.l #8,sp
    29dc:	|  |  |         move.l d0,d1
    29de:	|  |  |         move.l d1,d0
    29e0:	|  |  |         add.l d0,d0
    29e2:	|  |  |         add.l d0,d0
    29e4:	|  |  |         add.l d1,d0
    29e6:	|  |  |         add.l d0,d2
    29e8:	|  |  |         movea.l 140(sp),a0
    29ec:	|  |  |         move.l (a0),d0
    29ee:	|  |  |         move.l 92(sp),-(sp)
    29f2:	|  |  |         move.l d0,-(sp)
    29f4:	|  |  |         jsr 1756a <__mulsi3>
    29fa:	|  |  |         addq.l #8,sp
    29fc:	|  |  |         lsr.l #3,d0
    29fe:	|  |  |         move.l d2,d1
    2a00:	|  |  |         add.l d0,d1
    2a02:	|  |  |         move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2a06:	|  |  |         movea.l 140(sp),a0
    2a0a:	|  |  |         move.l 24(a0),d0
    2a0e:	|  |  |         move.l d0,d2
    2a10:	|  |  |         movea.l 140(sp),a0
    2a14:	|  |  |         move.l (a0),d0
    2a16:	|  |  |         move.l 92(sp),-(sp)
    2a1a:	|  |  |         move.l d0,-(sp)
    2a1c:	|  |  |         jsr 1756a <__mulsi3>
    2a22:	|  |  |         addq.l #8,sp
    2a24:	|  |  |         lsr.l #3,d0
    2a26:	|  |  |         move.l d2,d1
    2a28:	|  |  |         add.l d0,d1
    2a2a:	|  |  |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2a2e:	|  |  |         move.l 1a6f6 <winWidth>,d0
    2a34:	|  |  |         move.l 96(sp),-(sp)
    2a38:	|  |  |         move.l d0,-(sp)
    2a3a:	|  |  |         jsr 1756a <__mulsi3>
    2a40:	|  |  |         addq.l #8,sp
    2a42:	|  |  |         lsr.l #3,d0
    2a44:	|  |  |         move.l 132(sp),d1
    2a48:	|  |  |         add.l d0,d1
    2a4a:	|  |  |         move.w 16(sp),d0
    2a4e:	|  |  |     /-- bpl.s 2a54 <CstScaleSprite+0x4de>
    2a50:	|  |  |     |   addi.w #15,d0
    2a54:	|  |  |     \-> asr.w #4,d0
    2a56:	|  |  |         movea.w d0,a0
    2a58:	|  |  |         move.l a0,d0
    2a5a:	|  |  |         add.l a0,d0
    2a5c:	|  |  |         move.l d1,d2
    2a5e:	|  |  |         add.l d0,d2
    2a60:	|  |  |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2a64:	|  |  |         move.l 1a6f6 <winWidth>,d0
    2a6a:	|  |  |         move.l 96(sp),-(sp)
    2a6e:	|  |  |         move.l d0,-(sp)
    2a70:	|  |  |         jsr 1756a <__mulsi3>
    2a76:	|  |  |         addq.l #8,sp
    2a78:	|  |  |         lsr.l #3,d0
    2a7a:	|  |  |         move.l 132(sp),d1
    2a7e:	|  |  |         add.l d0,d1
    2a80:	|  |  |         move.w 16(sp),d0
    2a84:	|  |  |     /-- bpl.s 2a8a <CstScaleSprite+0x514>
    2a86:	|  |  |     |   addi.w #15,d0
    2a8a:	|  |  |     \-> asr.w #4,d0
    2a8c:	|  |  |         movea.w d0,a0
    2a8e:	|  |  |         move.l a0,d0
    2a90:	|  |  |         add.l a0,d0
    2a92:	|  |  |         move.l d1,d2
    2a94:	|  |  |         add.l d0,d2
    2a96:	|  |  |         move.l d2,108(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    2a9a:	|  |  |         movea.l 140(sp),a0
    2a9e:	|  |  |         move.l (a0),d0
    2aa0:	|  |  |         andi.l #-2147483633,d0
    2aa6:	|  |  |     /-- bpl.s 2ab0 <CstScaleSprite+0x53a>
    2aa8:	|  |  |     |   subq.l #1,d0
    2aaa:	|  |  |     |   moveq #-16,d1
    2aac:	|  |  |     |   or.l d1,d0
    2aae:	|  |  |     |   addq.l #1,d0
    2ab0:	|  |  |     \-> moveq #12,d2
    2ab2:	|  |  |         lsl.l d2,d0
    2ab4:	|  |  |         addi.l #4042,d0
    2aba:	|  |  |         move.l d0,104(sp)
    bltcon1 = ((single->width%16) << 12);
    2abe:	|  |  |         movea.l 140(sp),a0
    2ac2:	|  |  |         move.l (a0),d0
    2ac4:	|  |  |         andi.l #-2147483633,d0
    2aca:	|  |  |     /-- bpl.s 2ad4 <CstScaleSprite+0x55e>
    2acc:	|  |  |     |   subq.l #1,d0
    2ace:	|  |  |     |   moveq #-16,d1
    2ad0:	|  |  |     |   or.l d1,d0
    2ad2:	|  |  |     |   addq.l #1,d0
    2ad4:	|  |  |     \-> moveq #12,d2
    2ad6:	|  |  |         lsl.l d2,d0
    2ad8:	|  |  |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2adc:	|  |  |         cmpi.w #1,12(sp)
    2ae2:	|  |  |  /----- bne.w 2baa <CstScaleSprite+0x634>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2ae6:	|  |  |  |      move.l 1a6de <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2aee:	|  |  |  |      moveq #20,d0
    2af0:	|  |  |  |      move.l d0,60(sp)
    2af4:	|  |  |  |      clr.l 56(sp)
    2af8:	|  |  |  |      move.l 1a7a2 <SysBase>,d0
    2afe:	|  |  |  |      movea.l d0,a6
    2b00:	|  |  |  |      move.l 60(sp),d0
    2b04:	|  |  |  |      move.l 56(sp),d1
    2b08:	|  |  |  |      jsr -684(a6)
    2b0c:	|  |  |  |      move.l d0,52(sp)
    2b10:	|  |  |  |      move.l 52(sp),d0
    2b14:	|  |  |  |      move.l d0,1a6de <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2b1a:	|  |  |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2b20:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2b26:	|  |  |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2b2c:	|  |  |  |      move.w 16(sp),d0
    2b30:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2b32:	|  |  |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2b38:	|  |  |  |      move.w 14(sp),d0
    2b3c:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    2b40:	|  |  |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2b46:	|  |  |  |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    2b4c:	|  |  |  |      movea.l 140(sp),a0
    2b50:	|  |  |  |      move.l (a0),d0
    2b52:	|  |  |  |      movea.l d0,a0
    2b54:	|  |  |  |      cmpa.w #0,a0
    2b58:	|  |  |  |  /-- bge.s 2b5e <CstScaleSprite+0x5e8>
    2b5a:	|  |  |  |  |   lea 15(a0),a0
    2b5e:	|  |  |  |  \-> move.l a0,d0
    2b60:	|  |  |  |      asr.l #4,d0
    2b62:	|  |  |  |      move.l d0,d0
    2b64:	|  |  |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2b6a:	|  |  |  |      add.w 128(sp),d0
    2b6e:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    2b72:	|  |  |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2b78:	|  |  |  |      move.l 88(sp),d0
    2b7c:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2b80:	|  |  |  |      move.w 16(sp),d0
    2b84:	|  |  |  |  /-- bpl.s 2b8a <CstScaleSprite+0x614>
    2b86:	|  |  |  |  |   addi.w #15,d0
    2b8a:	|  |  |  |  \-> asr.w #4,d0
    2b8c:	|  |  |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2b92:	|  |  |  |      add.w d0,d0
    2b94:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2b98:	|  |  |  |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2b9e:	|  |  |  |      move.l 96(sp),d0
    2ba2:	|  |  |  |      move.w d0,14(a0)
    2ba6:	|  +--|--|----- bra.w 2ed4 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2baa:	|  |  |  \----> movea.l 140(sp),a0
    2bae:	|  |  |         move.l (a0),d0
    2bb0:	|  |  |         movea.l d0,a0
    2bb2:	|  |  |         cmpa.w #0,a0
    2bb6:	|  |  |     /-- bge.s 2bbc <CstScaleSprite+0x646>
    2bb8:	|  |  |     |   lea 15(a0),a0
    2bbc:	|  |  |     \-> move.l a0,d0
    2bbe:	|  |  |         asr.l #4,d0
    2bc0:	|  |  |         move.l d0,d0
    2bc2:	|  |  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2bc8:	|  |  |         move.l a0,d1
    2bca:	|  |  |         addq.l #2,d1
    2bcc:	|  |  |         move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    2bd2:	|  |  |         add.w 128(sp),d0
    2bd6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2bd8:	|  |  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2bde:	|  |  |         move.l a0,d0
    2be0:	|  |  |         addq.l #2,d0
    2be2:	|  |  |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    2be8:	|  |  |         move.l 88(sp),d0
    2bec:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2bee:	|  |  |         move.w 16(sp),d0
    2bf2:	|  |  |     /-- bpl.s 2bf8 <CstScaleSprite+0x682>
    2bf4:	|  |  |     |   addi.w #15,d0
    2bf8:	|  |  |     \-> asr.w #4,d0
    2bfa:	|  |  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2c00:	|  |  |         move.l a0,d1
    2c02:	|  |  |         addq.l #2,d1
    2c04:	|  |  |         move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    2c0a:	|  |  |         add.w d0,d0
    2c0c:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2c0e:	|  |  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2c14:	|  |  |         move.l a0,d0
    2c16:	|  |  |         addq.l #2,d0
    2c18:	|  |  |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    2c1e:	|  |  |         move.l 96(sp),d0
    2c22:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2c24:	|  |  |         movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2c2a:	|  |  |         move.l a0,d0
    2c2c:	|  |  |         addq.l #2,d0
    2c2e:	|  |  |         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    2c34:	|  |  |         clr.w (a0)
    2c36:	|  +--|-------- bra.w 2ed4 <CstScaleSprite+0x95e>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2c3a:	|  |  \-------> move.w #1,130(sp)
    cutwordssource = 0;
    2c40:	|  |            clr.w 128(sp)
    cutmaskpixel = 0;
    2c44:	|  |            clr.w 126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2c48:	|  |            clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    2c4c:	|  |            movea.l 140(sp),a0
    2c50:	|  |            move.l 24(a0),d0
    2c54:	|  |            move.l d0,d2
    2c56:	|  |            movea.l 140(sp),a0
    2c5a:	|  |            move.l (a0),d0
    2c5c:	|  |        /-- bpl.s 2c60 <CstScaleSprite+0x6ea>
    2c5e:	|  |        |   addq.l #7,d0
    2c60:	|  |        \-> asr.l #3,d0
    2c62:	|  |            movea.l 140(sp),a0
    2c66:	|  |            move.l 4(a0),d1
    2c6a:	|  |            move.l d1,-(sp)
    2c6c:	|  |            move.l d0,-(sp)
    2c6e:	|  |            jsr 1756a <__mulsi3>
    2c74:	|  |            addq.l #8,sp
    2c76:	|  |            move.l d0,d1
    2c78:	|  |            move.l d1,d0
    2c7a:	|  |            add.l d0,d0
    2c7c:	|  |            add.l d0,d0
    2c7e:	|  |            add.l d1,d0
    2c80:	|  |            add.l d0,d2
    2c82:	|  |            movea.l 140(sp),a0
    2c86:	|  |            move.l (a0),d0
    2c88:	|  |            move.l 92(sp),-(sp)
    2c8c:	|  |            move.l d0,-(sp)
    2c8e:	|  |            jsr 1756a <__mulsi3>
    2c94:	|  |            addq.l #8,sp
    2c96:	|  |            lsr.l #3,d0
    2c98:	|  |            move.l d2,d1
    2c9a:	|  |            add.l d0,d1
    2c9c:	|  |            move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2ca0:	|  |            movea.l 140(sp),a0
    2ca4:	|  |            move.l 24(a0),d0
    2ca8:	|  |            move.l d0,d2
    2caa:	|  |            movea.l 140(sp),a0
    2cae:	|  |            move.l (a0),d0
    2cb0:	|  |            move.l 92(sp),-(sp)
    2cb4:	|  |            move.l d0,-(sp)
    2cb6:	|  |            jsr 1756a <__mulsi3>
    2cbc:	|  |            addq.l #8,sp
    2cbe:	|  |            lsr.l #3,d0
    2cc0:	|  |            move.l d2,d1
    2cc2:	|  |            add.l d0,d1
    2cc4:	|  |            move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2cc8:	|  |            move.l 1a6f6 <winWidth>,d0
    2cce:	|  |            move.l 96(sp),-(sp)
    2cd2:	|  |            move.l d0,-(sp)
    2cd4:	|  |            jsr 1756a <__mulsi3>
    2cda:	|  |            addq.l #8,sp
    2cdc:	|  |            lsr.l #3,d0
    2cde:	|  |            move.l 132(sp),d1
    2ce2:	|  |            add.l d0,d1
    2ce4:	|  |            move.w 16(sp),d0
    2ce8:	|  |        /-- bpl.s 2cee <CstScaleSprite+0x778>
    2cea:	|  |        |   addi.w #15,d0
    2cee:	|  |        \-> asr.w #4,d0
    2cf0:	|  |            movea.w d0,a0
    2cf2:	|  |            move.l a0,d0
    2cf4:	|  |            add.l a0,d0
    2cf6:	|  |            move.l d1,d2
    2cf8:	|  |            add.l d0,d2
    2cfa:	|  |            move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2cfe:	|  |            move.l 1a6f6 <winWidth>,d0
    2d04:	|  |            move.l 96(sp),-(sp)
    2d08:	|  |            move.l d0,-(sp)
    2d0a:	|  |            jsr 1756a <__mulsi3>
    2d10:	|  |            addq.l #8,sp
    2d12:	|  |            lsr.l #3,d0
    2d14:	|  |            move.l 132(sp),d1
    2d18:	|  |            add.l d0,d1
    2d1a:	|  |            move.w 16(sp),d0
    2d1e:	|  |        /-- bpl.s 2d24 <CstScaleSprite+0x7ae>
    2d20:	|  |        |   addi.w #15,d0
    2d24:	|  |        \-> asr.w #4,d0
    2d26:	|  |            movea.w d0,a0
    2d28:	|  |            move.l a0,d0
    2d2a:	|  |            add.l a0,d0
    2d2c:	|  |            move.l d1,d2
    2d2e:	|  |            add.l d0,d2
    2d30:	|  |            move.l d2,108(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    2d34:	|  |            move.w 16(sp),d0
    2d38:	|  |            andi.w #-32753,d0
    2d3c:	|  |        /-- bpl.s 2d46 <CstScaleSprite+0x7d0>
    2d3e:	|  |        |   subq.w #1,d0
    2d40:	|  |        |   ori.w #-16,d0
    2d44:	|  |        |   addq.w #1,d0
    2d46:	|  |        \-> ext.l d0
    2d48:	|  |            moveq #12,d1
    2d4a:	|  |            lsl.l d1,d0
    2d4c:	|  |            addi.l #4042,d0
    2d52:	|  |            move.l d0,104(sp)
    bltcon1 = ((x%16) << 12);
    2d56:	|  |            move.w 16(sp),d0
    2d5a:	|  |            andi.w #-32753,d0
    2d5e:	|  |        /-- bpl.s 2d68 <CstScaleSprite+0x7f2>
    2d60:	|  |        |   subq.w #1,d0
    2d62:	|  |        |   ori.w #-16,d0
    2d66:	|  |        |   addq.w #1,d0
    2d68:	|  |        \-> ext.l d0
    2d6a:	|  |            moveq #12,d2
    2d6c:	|  |            lsl.l d2,d0
    2d6e:	|  |            move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2d72:	|  |            cmpi.w #1,12(sp)
    2d78:	|  |     /----- bne.w 2e44 <CstScaleSprite+0x8ce>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2d7c:	|  |     |      move.l 1a6de <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2d84:	|  |     |      moveq #20,d0
    2d86:	|  |     |      move.l d0,76(sp)
    2d8a:	|  |     |      clr.l 72(sp)
    2d8e:	|  |     |      move.l 1a7a2 <SysBase>,d0
    2d94:	|  |     |      movea.l d0,a6
    2d96:	|  |     |      move.l 76(sp),d0
    2d9a:	|  |     |      move.l 72(sp),d1
    2d9e:	|  |     |      jsr -684(a6)
    2da2:	|  |     |      move.l d0,68(sp)
    2da6:	|  |     |      move.l 68(sp),d0
    2daa:	|  |     |      move.l d0,1a6de <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2db0:	|  |     |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2db6:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2dbc:	|  |     |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2dc2:	|  |     |      move.w 16(sp),d0
    2dc6:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2dc8:	|  |     |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2dce:	|  |     |      move.w 14(sp),d0
    2dd2:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    2dd6:	|  |     |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2ddc:	|  |     |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    2de2:	|  |     |      movea.l 140(sp),a0
    2de6:	|  |     |      move.l (a0),d0
    2de8:	|  |     |      movea.l d0,a0
    2dea:	|  |     |      cmpa.w #0,a0
    2dee:	|  |     |  /-- bge.s 2df4 <CstScaleSprite+0x87e>
    2df0:	|  |     |  |   lea 15(a0),a0
    2df4:	|  |     |  \-> move.l a0,d0
    2df6:	|  |     |      asr.l #4,d0
    2df8:	|  |     |      move.l d0,d0
    2dfa:	|  |     |      add.w 128(sp),d0
    2dfe:	|  |     |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2e04:	|  |     |      add.w 130(sp),d0
    2e08:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    2e0c:	|  |     |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2e12:	|  |     |      move.l 88(sp),d0
    2e16:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    2e1a:	|  |     |      move.w 16(sp),d0
    2e1e:	|  |     |  /-- bpl.s 2e24 <CstScaleSprite+0x8ae>
    2e20:	|  |     |  |   addi.w #15,d0
    2e24:	|  |     |  \-> asr.w #4,d0
    2e26:	|  |     |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2e2c:	|  |     |      add.w d0,d0
    2e2e:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2e32:	|  |     |      movea.l 1a6de <CstCleanupQueueDrawBuffer>,a0
    2e38:	|  |     |      move.l 96(sp),d0
    2e3c:	|  |     |      move.w d0,14(a0)
    2e40:	|  +-----|----- bra.w 2ed4 <CstScaleSprite+0x95e>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2e44:	|  |     \----> movea.l 140(sp),a0
    2e48:	|  |            move.l (a0),d0
    2e4a:	|  |            movea.l d0,a0
    2e4c:	|  |            cmpa.w #0,a0
    2e50:	|  |        /-- bge.s 2e56 <CstScaleSprite+0x8e0>
    2e52:	|  |        |   lea 15(a0),a0
    2e56:	|  |        \-> move.l a0,d0
    2e58:	|  |            asr.l #4,d0
    2e5a:	|  |            move.l d0,d0
    2e5c:	|  |            add.w 128(sp),d0
    2e60:	|  |            movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2e66:	|  |            move.l a0,d1
    2e68:	|  |            addq.l #2,d1
    2e6a:	|  |            move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    2e70:	|  |            add.w 130(sp),d0
    2e74:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2e76:	|  |            movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2e7c:	|  |            move.l a0,d0
    2e7e:	|  |            addq.l #2,d0
    2e80:	|  |            move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    2e86:	|  |            move.l 88(sp),d0
    2e8a:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2e8c:	|  |            move.w 16(sp),d0
    2e90:	|  |        /-- bpl.s 2e96 <CstScaleSprite+0x920>
    2e92:	|  |        |   addi.w #15,d0
    2e96:	|  |        \-> asr.w #4,d0
    2e98:	|  |            movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2e9e:	|  |            move.l a0,d1
    2ea0:	|  |            addq.l #2,d1
    2ea2:	|  |            move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    2ea8:	|  |            add.w d0,d0
    2eaa:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2eac:	|  |            movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2eb2:	|  |            move.l a0,d0
    2eb4:	|  |            addq.l #2,d0
    2eb6:	|  |            move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    2ebc:	|  |            move.l 96(sp),d0
    2ec0:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2ec2:	|  |            movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    2ec8:	|  |            move.l a0,d0
    2eca:	|  |            addq.l #2,d0
    2ecc:	|  |            move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    2ed2:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2ed4:	|  \----------> moveq #0,d0
    2ed6:	|               move.w 126(sp),d0
    2eda:	|               moveq #0,d1
    2edc:	|               not.w d1
    2ede:	|               asr.l d0,d1
    2ee0:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2ee4:	|               moveq #0,d1
    2ee6:	|               move.w 128(sp),d1
    2eea:	|               moveq #0,d0
    2eec:	|               move.w 130(sp),d0
    2ef0:	|               sub.l d0,d1
    2ef2:	|               move.l d1,d0
    2ef4:	|               add.w d0,d0
    2ef6:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    2efa:	|               moveq #0,d1
    2efc:	|               move.w 128(sp),d1
    2f00:	|               moveq #0,d0
    2f02:	|               move.w 130(sp),d0
    2f06:	|               sub.l d0,d1
    2f08:	|               move.l d1,d0
    2f0a:	|               add.w d0,d0
    2f0c:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2f10:	|               move.l 1a6f6 <winWidth>,d0
    2f16:	|               lsr.l #3,d0
    2f18:	|               move.l d0,d1
    2f1a:	|               movea.l 140(sp),a0
    2f1e:	|               move.l (a0),d0
    2f20:	|           /-- bpl.s 2f24 <CstScaleSprite+0x9ae>
    2f22:	|           |   addq.l #7,d0
    2f24:	|           \-> asr.l #3,d0
    2f26:	|               move.l d0,d0
    2f28:	|               sub.w d0,d1
    2f2a:	|               move.w 128(sp),d0
    2f2e:	|               sub.w 130(sp),d0
    2f32:	|               add.w d0,d0
    2f34:	|               add.w d1,d0
    2f36:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2f3a:	|               move.l 1a6f6 <winWidth>,d0
    2f40:	|               lsr.l #3,d0
    2f42:	|               move.l d0,d1
    2f44:	|               movea.l 140(sp),a0
    2f48:	|               move.l (a0),d0
    2f4a:	|           /-- bpl.s 2f4e <CstScaleSprite+0x9d8>
    2f4c:	|           |   addq.l #7,d0
    2f4e:	|           \-> asr.l #3,d0
    2f50:	|               move.l d0,d0
    2f52:	|               sub.w d0,d1
    2f54:	|               move.w 128(sp),d0
    2f58:	|               sub.w 130(sp),d0
    2f5c:	|               add.w d0,d0
    2f5e:	|               add.w d1,d0
    2f60:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2f64:	|               move.l #14675968,22(sp)
  WaitBlit();
    2f6c:	|               move.l 1a7ae <GfxBase>,d0
    2f72:	|               movea.l d0,a6
    2f74:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2f78:	|               movea.l 22(sp),a0
    2f7c:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    2f82:	|               movea.l 22(sp),a0
    2f86:	|               move.w 124(sp),70(a0)
  custom->bltamod = bltamod;
    2f8c:	|               move.w 32(sp),d0
    2f90:	|               movea.l 22(sp),a0
    2f94:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    2f98:	|               move.w 30(sp),d0
    2f9c:	|               movea.l 22(sp),a0
    2fa0:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    2fa4:	|               move.w 28(sp),d0
    2fa8:	|               movea.l 22(sp),a0
    2fac:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2fb0:	|               move.w 26(sp),d0
    2fb4:	|               movea.l 22(sp),a0
    2fb8:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    2fbc:	|               move.l 104(sp),d0
    2fc0:	|               movea.l 22(sp),a0
    2fc4:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    2fc8:	|               move.l 100(sp),d0
    2fcc:	|               movea.l 22(sp),a0
    2fd0:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2fd4:	|               movea.l 140(sp),a0
    2fd8:	|               move.l (a0),d0
    2fda:	|               asr.l #3,d0
    2fdc:	|               move.l d0,d1
    2fde:	|               movea.l 140(sp),a0
    2fe2:	|               move.l 4(a0),d0
    2fe6:	|               move.l d0,d0
    2fe8:	|               move.w d1,d2
    2fea:	|               muls.w d0,d2
    2fec:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    2ff0:	|               move.l 1a6f6 <winWidth>,d0
    2ff6:	|               lsr.l #3,d0
    2ff8:	|               move.l d0,d1
    2ffa:	|               move.l 1a6fa <winHeight>,d0
    3000:	|               move.l d0,d0
    3002:	|               move.w d1,d2
    3004:	|               muls.w d0,d2
    3006:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    300a:	|               clr.l 84(sp)
    300e:	|        /----- bra.w 30a2 <CstScaleSprite+0xb2c>
  {
    custom->bltapt = (APTR) bltapt;
    3012:	|     /--|----> move.l 120(sp),d0
    3016:	|     |  |      movea.l 22(sp),a0
    301a:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    301e:	|     |  |      move.l 116(sp),d0
    3022:	|     |  |      movea.l 22(sp),a0
    3026:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    302a:	|     |  |      move.l 112(sp),d0
    302e:	|     |  |      movea.l 22(sp),a0
    3032:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    3036:	|     |  |      move.l 108(sp),d0
    303a:	|     |  |      movea.l 22(sp),a0
    303e:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3042:	|     |  |      move.l 88(sp),d0
    3046:	|     |  |      move.w d0,d1
    3048:	|     |  |      lsl.w #6,d1
    304a:	|     |  |      movea.l 140(sp),a0
    304e:	|     |  |      move.l (a0),d0
    3050:	|     |  |      movea.l d0,a0
    3052:	|     |  |      cmpa.w #0,a0
    3056:	|     |  |  /-- bge.s 305c <CstScaleSprite+0xae6>
    3058:	|     |  |  |   lea 15(a0),a0
    305c:	|     |  |  \-> move.l a0,d0
    305e:	|     |  |      asr.l #4,d0
    3060:	|     |  |      move.l d0,d0
    3062:	|     |  |      add.w d1,d0
    3064:	|     |  |      sub.w 128(sp),d0
    3068:	|     |  |      add.w 130(sp),d0
    306c:	|     |  |      movea.l 22(sp),a0
    3070:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    3074:	|     |  |      moveq #0,d0
    3076:	|     |  |      move.w 20(sp),d0
    307a:	|     |  |      add.l d0,116(sp)
    bltcpt += bltcptplus;
    307e:	|     |  |      moveq #0,d0
    3080:	|     |  |      move.w 18(sp),d0
    3084:	|     |  |      add.l d0,112(sp)
    bltdpt += bltcptplus;
    3088:	|     |  |      moveq #0,d0
    308a:	|     |  |      move.w 18(sp),d0
    308e:	|     |  |      add.l d0,108(sp)
    WaitBlit();
    3092:	|     |  |      move.l 1a7ae <GfxBase>,d0
    3098:	|     |  |      movea.l d0,a6
    309a:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    309e:	|     |  |      addq.l #1,84(sp)
    30a2:	|     |  \----> moveq #4,d0
    30a4:	|     |         cmp.l 84(sp),d0
    30a8:	|     \-------- bge.w 3012 <CstScaleSprite+0xa9c>
  }   
}
    30ac:	\-------------> movem.l (sp)+,d2-d3/a6
    30b0:	                lea 124(sp),sp
    30b4:	                rts

000030b6 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    30b6:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    30b8:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    30be:	move.l 8(sp),d0
    30c2:	movea.l (sp),a0
    30c4:	move.l d0,128(a0)
}
    30c8:	nop
    30ca:	addq.l #4,sp
    30cc:	rts

000030ce <CstSwapBuffer>:

void CstSwapBuffer( ) {
    30ce:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    30d2:	move.l 1a6d2 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    30da:	move.l 1a6d6 <CstDrawBuffer>,d0
    30e0:	move.l d0,1a6d2 <CstViewBuffer>
  CstDrawBuffer = tmp;
    30e6:	move.l 16(sp),1a6d6 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    30ee:	move.l 1a6da <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    30f6:	move.l 1a6de <CstCleanupQueueDrawBuffer>,d0
    30fc:	move.l d0,1a6da <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3102:	move.l 12(sp),1a6de <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    310a:	move.l 1a6cc <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3112:	move.l 1a6d2 <CstViewBuffer>,d0
    3118:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    311c:	move.l 4(sp),d0
    3120:	clr.w d0
    3122:	swap d0
    3124:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3128:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    312c:	movea.w #118,a0
    3130:	adda.l 8(sp),a0
    3134:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3136:	movea.w #114,a0
    313a:	adda.l 8(sp),a0
    313e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3142:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    314a:	move.l 4(sp),d0
    314e:	clr.w d0
    3150:	swap d0
    3152:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3156:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    315a:	movea.w #126,a0
    315e:	adda.l 8(sp),a0
    3162:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3164:	movea.w #122,a0
    3168:	adda.l 8(sp),a0
    316c:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3170:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3178:	move.l 4(sp),d0
    317c:	clr.w d0
    317e:	swap d0
    3180:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3184:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3188:	movea.l 8(sp),a0
    318c:	lea 134(a0),a0
    3190:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3192:	movea.l 8(sp),a0
    3196:	lea 130(a0),a0
    319a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    319e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    31a6:	move.l 4(sp),d0
    31aa:	clr.w d0
    31ac:	swap d0
    31ae:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    31b2:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    31b6:	movea.l 8(sp),a0
    31ba:	lea 142(a0),a0
    31be:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    31c0:	movea.l 8(sp),a0
    31c4:	lea 138(a0),a0
    31c8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    31cc:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    31d4:	move.l 4(sp),d0
    31d8:	clr.w d0
    31da:	swap d0
    31dc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    31e0:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    31e4:	movea.l 8(sp),a0
    31e8:	lea 150(a0),a0
    31ec:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    31ee:	movea.l 8(sp),a0
    31f2:	lea 146(a0),a0
    31f6:	move.w 2(sp),(a0)

}
    31fa:	nop
    31fc:	lea 20(sp),sp
    3200:	rts

00003202 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3202:	          lea -56(sp),sp
    3206:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3208:	          pea 179c1 <PutChar+0x341>
    320e:	          jsr 16bac <KPrintF>
    3214:	          addq.l #4,sp

  width = width / 8;
    3216:	          move.l 64(sp),d0
    321a:	      /-- bpl.s 321e <CstReserveBackdrop+0x1c>
    321c:	      |   addq.l #7,d0
    321e:	      \-> asr.l #3,d0
    3220:	          move.l d0,64(sp)

  if( width < 40) 
    3224:	          moveq #39,d0
    3226:	          cmp.l 64(sp),d0
    322a:	      /-- blt.s 3240 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    322c:	      |   pea 179db <PutChar+0x35b>
    3232:	      |   jsr 16bac <KPrintF>
    3238:	      |   addq.l #4,sp
    return FALSE;
    323a:	      |   clr.w d0
    323c:	/-----|-- bra.w 3582 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3240:	|     \-> pea 17a19 <PutChar+0x399>
    3246:	|         jsr 16bac <KPrintF>
    324c:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    324e:	|         move.l 64(sp),-(sp)
    3252:	|         jsr fce <CstCreateCopperlist>
    3258:	|         addq.l #4,sp
    325a:	|         move.l d0,1a6cc <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3260:	|         pea 17a39 <PutChar+0x3b9>
    3266:	|         jsr 16bac <KPrintF>
    326c:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    326e:	|         move.l 64(sp),d1
    3272:	|         move.l 68(sp),d0
    3276:	|         muls.w d1,d0
    3278:	|         move.w d0,1a6c2 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    327e:	|         move.w 1a6c2 <CstBackdropSizePlane>,d1
    3284:	|         move.w d1,d0
    3286:	|         add.w d0,d0
    3288:	|         add.w d0,d0
    328a:	|         add.w d1,d0
    328c:	|         move.w d0,1a6c0 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3292:	|         move.w 1a6c0 <CstBackdropSize>,d0
    3298:	|         move.w d0,d0
    329a:	|         andi.l #65535,d0
    32a0:	|         move.l d0,48(sp)
    32a4:	|         moveq #2,d1
    32a6:	|         move.l d1,44(sp)
    32aa:	|         move.l 1a7a2 <SysBase>,d0
    32b0:	|         movea.l d0,a6
    32b2:	|         move.l 48(sp),d0
    32b6:	|         move.l 44(sp),d1
    32ba:	|         jsr -684(a6)
    32be:	|         move.l d0,40(sp)
    32c2:	|         move.l 40(sp),d0
    32c6:	|         move.l d0,1a6c4 <CstBackDrop>
  if( !CstBackDrop)
    32cc:	|         move.l 1a6c4 <CstBackDrop>,d0
    32d2:	|     /-- bne.s 32e8 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    32d4:	|     |   pea 17a60 <PutChar+0x3e0>
    32da:	|     |   jsr 16bac <KPrintF>
    32e0:	|     |   addq.l #4,sp
    return FALSE;  
    32e2:	|     |   clr.w d0
    32e4:	+-----|-- bra.w 3582 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    32e8:	|     \-> pea 17a98 <PutChar+0x418>
    32ee:	|         jsr 16bac <KPrintF>
    32f4:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    32f6:	|         move.l 1a6c4 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    32fe:	|         clr.l 52(sp)
    3302:	|     /-- bra.s 3318 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3304:	|  /--|-> move.l 56(sp),d0
    3308:	|  |  |   move.l d0,d1
    330a:	|  |  |   addq.l #4,d1
    330c:	|  |  |   move.l d1,56(sp)
    3310:	|  |  |   movea.l d0,a0
    3312:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3314:	|  |  |   addq.l #1,52(sp)
    3318:	|  |  \-> move.w 1a6c0 <CstBackdropSize>,d0
    331e:	|  |      lsr.w #2,d0
    3320:	|  |      move.w d0,d0
    3322:	|  |      andi.l #65535,d0
    3328:	|  |      cmp.l 52(sp),d0
    332c:	|  \----- bgt.s 3304 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    332e:	|         move.w 1a6c0 <CstBackdropSize>,d0
    3334:	|         move.w d0,d0
    3336:	|         andi.l #65535,d0
    333c:	|         move.l 64(sp),d1
    3340:	|         add.l d1,d1
    3342:	|         add.l d1,d0
    3344:	|         move.l d0,36(sp)
    3348:	|         moveq #2,d0
    334a:	|         move.l d0,32(sp)
    334e:	|         move.l 1a7a2 <SysBase>,d0
    3354:	|         movea.l d0,a6
    3356:	|         move.l 36(sp),d0
    335a:	|         move.l 32(sp),d1
    335e:	|         jsr -684(a6)
    3362:	|         move.l d0,28(sp)
    3366:	|         move.l 28(sp),d0
    336a:	|         move.l d0,1a6d6 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3370:	|         move.l 1a6d6 <CstDrawBuffer>,d0
    3376:	|     /-- bne.s 338c <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3378:	|     |   pea 17abe <PutChar+0x43e>
    337e:	|     |   jsr 16bac <KPrintF>
    3384:	|     |   addq.l #4,sp
    return FALSE;  
    3386:	|     |   clr.w d0
    3388:	+-----|-- bra.w 3582 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    338c:	|     \-> pea 17af8 <PutChar+0x478>
    3392:	|         jsr 16bac <KPrintF>
    3398:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    339a:	|         move.l #10000,24(sp)
    33a2:	|         clr.l 20(sp)
    33a6:	|         move.l 1a7a2 <SysBase>,d0
    33ac:	|         movea.l d0,a6
    33ae:	|         move.l 24(sp),d0
    33b2:	|         move.l 20(sp),d1
    33b6:	|         jsr -684(a6)
    33ba:	|         move.l d0,16(sp)
    33be:	|         move.l 16(sp),d0
    33c2:	|         move.l d0,1a6e2 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    33c8:	|         move.l 1a6e2 <CstBackDropBufferApplyStart>,d0
    33ce:	|     /-- bne.s 33e4 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    33d0:	|     |   pea 17b20 <PutChar+0x4a0>
    33d6:	|     |   jsr 16bac <KPrintF>
    33dc:	|     |   addq.l #4,sp
    return FALSE;  
    33de:	|     |   clr.w d0
    33e0:	+-----|-- bra.w 3582 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    33e4:	|     \-> move.l 1a6e2 <CstBackDropBufferApplyStart>,d0
    33ea:	|         move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    33f0:	|         movea.l 1a6e2 <CstBackDropBufferApplyStart>,a0
    33f6:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    33f8:	|         movea.l 1a6e2 <CstBackDropBufferApplyStart>,a0
    33fe:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3400:	|         move.w 1a6c0 <CstBackdropSize>,d0
    3406:	|         move.w d0,d0
    3408:	|         andi.l #65535,d0
    340e:	|         move.l 64(sp),d1
    3412:	|         add.l d1,d1
    3414:	|         add.l d1,d0
    3416:	|         move.l d0,12(sp)
    341a:	|         moveq #2,d1
    341c:	|         move.l d1,8(sp)
    3420:	|         move.l 1a7a2 <SysBase>,d0
    3426:	|         movea.l d0,a6
    3428:	|         move.l 12(sp),d0
    342c:	|         move.l 8(sp),d1
    3430:	|         jsr -684(a6)
    3434:	|         move.l d0,4(sp)
    3438:	|         move.l 4(sp),d0
    343c:	|         move.l d0,1a6d2 <CstViewBuffer>
  if( !CstViewBuffer)
    3442:	|         move.l 1a6d2 <CstViewBuffer>,d0
    3448:	|     /-- bne.s 345e <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    344a:	|     |   pea 17b6b <PutChar+0x4eb>
    3450:	|     |   jsr 16bac <KPrintF>
    3456:	|     |   addq.l #4,sp
    return FALSE;  
    3458:	|     |   clr.w d0
    345a:	+-----|-- bra.w 3582 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    345e:	|     \-> pea 17ba5 <PutChar+0x525>
    3464:	|         jsr 16bac <KPrintF>
    346a:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    346c:	|         move.l 1a6d6 <CstDrawBuffer>,d1
    3472:	|         move.l 64(sp),d0
    3476:	|     /-- bpl.s 347a <CstReserveBackdrop+0x278>
    3478:	|     |   addq.l #3,d0
    347a:	|     \-> asr.l #2,d0
    347c:	|         add.l d0,d0
    347e:	|         add.l d0,d0
    3480:	|         add.l d1,d0
    3482:	|         move.l d0,1a6d6 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3488:	|         move.l 1a6d2 <CstViewBuffer>,d1
    348e:	|         move.l 64(sp),d0
    3492:	|     /-- bpl.s 3496 <CstReserveBackdrop+0x294>
    3494:	|     |   addq.l #3,d0
    3496:	|     \-> asr.l #2,d0
    3498:	|         add.l d0,d0
    349a:	|         add.l d0,d0
    349c:	|         add.l d1,d0
    349e:	|         move.l d0,1a6d2 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    34a4:	|         move.l 1a6c4 <CstBackDrop>,d0
    34aa:	|         clr.l -(sp)
    34ac:	|         pea 5 <_start+0x5>
    34b0:	|         pea 100 <copyString+0x48>
    34b4:	|         pea 140 <decodeFilename+0x28>
    34b8:	|         pea 17bcd <PutChar+0x54d>
    34be:	|         move.l d0,-(sp)
    34c0:	|         jsr 16c94 <debug_register_bitmap>
    34c6:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    34ca:	|         move.l 68(sp),d0
    34ce:	|         movea.w d0,a1
    34d0:	|         move.l 64(sp),d0
    34d4:	|         lsl.w #3,d0
    34d6:	|         movea.w d0,a0
    34d8:	|         move.l 1a6d6 <CstDrawBuffer>,d0
    34de:	|         clr.l -(sp)
    34e0:	|         pea 5 <_start+0x5>
    34e4:	|         move.l a1,-(sp)
    34e6:	|         move.l a0,-(sp)
    34e8:	|         pea 17bdd <PutChar+0x55d>
    34ee:	|         move.l d0,-(sp)
    34f0:	|         jsr 16c94 <debug_register_bitmap>
    34f6:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    34fa:	|         move.l 68(sp),d0
    34fe:	|         movea.w d0,a1
    3500:	|         move.l 64(sp),d0
    3504:	|         lsl.w #3,d0
    3506:	|         movea.w d0,a0
    3508:	|         move.l 1a6d2 <CstViewBuffer>,d0
    350e:	|         clr.l -(sp)
    3510:	|         pea 5 <_start+0x5>
    3514:	|         move.l a1,-(sp)
    3516:	|         move.l a0,-(sp)
    3518:	|         pea 17bec <PutChar+0x56c>
    351e:	|         move.l d0,-(sp)
    3520:	|         jsr 16c94 <debug_register_bitmap>
    3526:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    352a:	|         move.l 1a6cc <CstCopperList>,d0
    3530:	|     /-- beq.s 3542 <CstReserveBackdrop+0x340>
    3532:	|     |   move.l 1a6d6 <CstDrawBuffer>,d0
    3538:	|     +-- beq.s 3542 <CstReserveBackdrop+0x340>
    353a:	|     |   move.l 1a6d2 <CstViewBuffer>,d0
    3540:	|  /--|-- bne.s 3554 <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3542:	|  |  \-> pea 17bfb <PutChar+0x57b>
    3548:	|  |      jsr 16bac <KPrintF>
    354e:	|  |      addq.l #4,sp
    return FALSE;
    3550:	|  |      clr.w d0
    3552:	+--|----- bra.s 3582 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3554:	|  \----> pea 17c28 <PutChar+0x5a8>
    355a:	|         jsr 16bac <KPrintF>
    3560:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3562:	|         move.l 1a6cc <CstCopperList>,d0
    3568:	|         move.l d0,-(sp)
    356a:	|         jsr 30b6 <CstSetCl>
    3570:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3572:	|         pea 17c4f <PutChar+0x5cf>
    3578:	|         jsr 16bac <KPrintF>
    357e:	|         addq.l #4,sp
  return TRUE;
    3580:	|         moveq #1,d0

}
    3582:	\-------> movea.l (sp)+,a6
    3584:	          lea 56(sp),sp
    3588:	          rts

0000358a <CstUnfreeze>:

void CstUnfreeze() {
    358a:	       lea -24(sp),sp
    358e:	       move.l a6,-(sp)
    3590:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3592:	       pea 17c72 <PutChar+0x5f2>
    3598:	       jsr 16bac <KPrintF>
    359e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    35a0:	       move.l 1a6f6 <winWidth>,d0
    35a6:	       lsr.l #3,d0
    35a8:	       move.l d0,d1
    35aa:	       move.l 1a6fa <winHeight>,d0
    35b0:	       move.l d0,d0
    35b2:	       muls.w d0,d1
    35b4:	       move.w d1,d0
    35b6:	       add.w d0,d0
    35b8:	       add.w d0,d0
    35ba:	       move.w d0,d2
    35bc:	       add.w d1,d2
    35be:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    35c2:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    35ca:	       move.l 1a6fa <winHeight>,d0
    35d0:	       move.l d0,d0
    35d2:	       movea.w d0,a1
    35d4:	       move.l 1a6f6 <winWidth>,d0
    35da:	       move.l d0,d0
    35dc:	       movea.w d0,a0
    35de:	       move.l 1a6c8 <CstBackDropBackup>,d0
    35e4:	       clr.l -(sp)
    35e6:	       pea 5 <_start+0x5>
    35ea:	       move.l a1,-(sp)
    35ec:	       move.l a0,-(sp)
    35ee:	       pea 17844 <PutChar+0x1c4>
    35f4:	       move.l d0,-(sp)
    35f6:	       jsr 16c94 <debug_register_bitmap>
    35fc:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3600:	       move.l 1a6c8 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3608:	       move.l 1a6c4 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3610:	       clr.l 20(sp)
    3614:	   /-- bra.s 363a <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3616:	/--|-> move.l 28(sp),d1
    361a:	|  |   move.l d1,d0
    361c:	|  |   addq.l #4,d0
    361e:	|  |   move.l d0,28(sp)
    3622:	|  |   move.l 24(sp),d0
    3626:	|  |   move.l d0,d2
    3628:	|  |   addq.l #4,d2
    362a:	|  |   move.l d2,24(sp)
    362e:	|  |   movea.l d1,a0
    3630:	|  |   move.l (a0),d1
    3632:	|  |   movea.l d0,a0
    3634:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3636:	|  |   addq.l #1,20(sp)
    363a:	|  \-> move.w 18(sp),d0
    363e:	|      lsr.w #2,d0
    3640:	|      move.w d0,d0
    3642:	|      andi.l #65535,d0
    3648:	|      cmp.l 20(sp),d0
    364c:	\----- bgt.s 3616 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    364e:	       move.w #2,1a6d0 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3656:	       move.l 1a6f6 <winWidth>,d0
    365c:	       lsr.l #4,d0
    365e:	       movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    3664:	       move.l a0,d1
    3666:	       addq.l #2,d1
    3668:	       move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    366e:	       move.l d0,d0
    3670:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3672:	       move.l 1a6fa <winHeight>,d0
    3678:	       movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    367e:	       move.l a0,d1
    3680:	       addq.l #2,d1
    3682:	       move.l d1,1a6e6 <CstBackDropBufferApplyCursor>
    3688:	       move.l d0,d0
    368a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    368c:	       movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    3692:	       move.l a0,d0
    3694:	       addq.l #2,d0
    3696:	       move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    369c:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    369e:	       movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    36a4:	       move.l a0,d0
    36a6:	       addq.l #2,d0
    36a8:	       move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    36ae:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    36b0:	       movea.l 1a6e6 <CstBackDropBufferApplyCursor>,a0
    36b6:	       move.l a0,d0
    36b8:	       addq.l #2,d0
    36ba:	       move.l d0,1a6e6 <CstBackDropBufferApplyCursor>
    36c0:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    36c2:	       move.l 1a6c8 <CstBackDropBackup>,d0
    36c8:	   /-- bne.s 36e2 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    36ca:	   |   move.l 1a6c8 <CstBackDropBackup>,10(sp)
    36d2:	   |   move.l 1a7a2 <SysBase>,d0
    36d8:	   |   movea.l d0,a6
    36da:	   |   movea.l 10(sp),a1
    36de:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    36e2:	   \-> pea 17853 <PutChar+0x1d3>
    36e8:	       jsr 16bac <KPrintF>
    36ee:	       addq.l #4,sp

}
    36f0:	       nop
    36f2:	       move.l (sp)+,d2
    36f4:	       movea.l (sp)+,a6
    36f6:	       lea 24(sp),sp
    36fa:	       rts

000036fc <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    36fc:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3700:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3704:	       tst.l 24(sp)
    3708:	   /-- bge.s 370e <drawLine+0x12>
    370a:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    370e:	   \-> tst.l 28(sp)
    3712:	   /-- bge.s 3718 <drawLine+0x1c>
    3714:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3718:	   \-> tst.l 32(sp)
    371c:	   /-- bge.s 3722 <drawLine+0x26>
    371e:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3722:	   \-> tst.l 36(sp)
    3726:	   /-- bge.s 372c <drawLine+0x30>
    3728:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    372c:	   \-> move.l 1a896 <sceneWidth>,d0
    3732:	       cmp.l 24(sp),d0
    3736:	   /-- bge.s 3746 <drawLine+0x4a>
    3738:	   |   move.l 1a896 <sceneWidth>,d0
    373e:	   |   move.l d0,d1
    3740:	   |   subq.l #1,d1
    3742:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3746:	   \-> move.l 1a896 <sceneWidth>,d0
    374c:	       cmp.l 32(sp),d0
    3750:	   /-- bge.s 3760 <drawLine+0x64>
    3752:	   |   move.l 1a896 <sceneWidth>,d0
    3758:	   |   move.l d0,d1
    375a:	   |   subq.l #1,d1
    375c:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3760:	   \-> move.l 1a89a <sceneHeight>,d0
    3766:	       cmp.l 28(sp),d0
    376a:	   /-- bge.s 377a <drawLine+0x7e>
    376c:	   |   move.l 1a89a <sceneHeight>,d0
    3772:	   |   move.l d0,d1
    3774:	   |   subq.l #1,d1
    3776:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    377a:	   \-> move.l 1a89a <sceneHeight>,d0
    3780:	       cmp.l 36(sp),d0
    3784:	   /-- bge.s 3794 <drawLine+0x98>
    3786:	   |   move.l 1a89a <sceneHeight>,d0
    378c:	   |   move.l d0,d1
    378e:	   |   subq.l #1,d1
    3790:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3794:	   \-> move.l 24(sp),d0
    3798:	       cmp.l 32(sp),d0
    379c:	/----- ble.s 37b8 <drawLine+0xbc>
		x = x2; 
    379e:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    37a4:	|      tst.w 10(sp)
    37a8:	|      seq d0
    37aa:	|      neg.b d0
    37ac:	|      move.b d0,d0
    37ae:	|      andi.w #255,d0
    37b2:	|      move.w d0,10(sp)
    37b6:	|  /-- bra.s 37be <drawLine+0xc2>
	} else x = x1;
    37b8:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    37be:	   \-> move.l 28(sp),d1
    37c2:	       cmp.l 36(sp),d1
    37c6:	/----- ble.s 37e2 <drawLine+0xe6>
		y = y2; 
    37c8:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    37ce:	|      tst.w 10(sp)
    37d2:	|      seq d0
    37d4:	|      neg.b d0
    37d6:	|      move.b d0,d0
    37d8:	|      andi.w #255,d0
    37dc:	|      move.w d0,10(sp)
    37e0:	|  /-- bra.s 37e8 <drawLine+0xec>
	} else y = y1;	
    37e2:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    37e8:	   \-> move.l 32(sp),d0
    37ec:	       sub.l 24(sp),d0
    37f0:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    37f4:	       move.l 6(sp),d0
    37f8:	   /-- bpl.s 37fc <drawLine+0x100>
    37fa:	   |   neg.l d0
    37fc:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    3800:	       move.l 36(sp),d1
    3804:	       sub.l 28(sp),d1
    3808:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    380c:	       move.l 2(sp),d0
    3810:	   /-- bpl.s 3814 <drawLine+0x118>
    3812:	   |   neg.l d0
    3814:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    3818:	       tst.l 6(sp)
    381c:	   /-- bne.s 3840 <drawLine+0x144>
		diffX = 1;
    381e:	   |   moveq #1,d0
    3820:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3824:	   |   move.l 1a896 <sceneWidth>,d0
    382a:	   |   subq.l #1,d0
    382c:	   |   cmp.l 16(sp),d0
    3830:	   +-- bne.s 3840 <drawLine+0x144>
    3832:	   |   move.l 1a896 <sceneWidth>,d0
    3838:	   |   move.l d0,d1
    383a:	   |   subq.l #2,d1
    383c:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    3840:	   \-> tst.l 2(sp)
    3844:	   /-- bne.s 3868 <drawLine+0x16c>
		diffY = 1;
    3846:	   |   moveq #1,d0
    3848:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    384c:	   |   move.l 1a89a <sceneHeight>,d0
    3852:	   |   subq.l #1,d0
    3854:	   |   cmp.l 12(sp),d0
    3858:	   +-- bne.s 3868 <drawLine+0x16c>
    385a:	   |   move.l 1a89a <sceneHeight>,d0
    3860:	   |   move.l d0,d1
    3862:	   |   subq.l #2,d1
    3864:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    3868:	   \-> pea 17c9d <PutChar+0x61d>
    386e:	       jsr 16bac <KPrintF>
    3874:	       addq.l #4,sp
	
}
    3876:	       nop
    3878:	       lea 20(sp),sp
    387c:	       rts

0000387e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    387e:	                      lea -24(sp),sp
    3882:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    3884:	                      move.l 1a6fe <firstTexture>,d0
    388a:	/-------------------- beq.w 3968 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    388e:	|                     clr.l 24(sp)
    3892:	|     /-------------- bra.w 395c <deleteTextures+0xde>
			BOOL found = FALSE;
    3896:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    389a:	|  |  |               move.l 1a6fe <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    38a2:	|  |  |               movea.l 20(sp),a0
    38a6:	|  |  |               move.l (a0),d1
    38a8:	|  |  |               move.l 24(sp),d0
    38ac:	|  |  |               add.l d0,d0
    38ae:	|  |  |               add.l d0,d0
    38b0:	|  |  |               movea.l 36(sp),a0
    38b4:	|  |  |               adda.l d0,a0
    38b6:	|  |  |               move.l (a0),d0
    38b8:	|  |  |               cmp.l d1,d0
    38ba:	|  |  |  /----------- bne.w 394e <deleteTextures+0xd0>
				found = TRUE;
    38be:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    38c4:	|  |  |  |            movea.l 20(sp),a0
    38c8:	|  |  |  |            move.l 12(a0),d0
    38cc:	|  |  |  |            move.l d0,1a6fe <firstTexture>
				FreeVec(list);
    38d2:	|  |  |  |            move.l 20(sp),6(sp)
    38d8:	|  |  |  |            move.l 1a7a2 <SysBase>,d0
    38de:	|  |  |  |            movea.l d0,a6
    38e0:	|  |  |  |            movea.l 6(sp),a1
    38e4:	|  |  |  |            jsr -690(a6)
				continue;
    38e8:	|  |  |  |  /-------- bra.s 3958 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    38ea:	|  |  |  |  |  /----> movea.l 20(sp),a0
    38ee:	|  |  |  |  |  |      movea.l 12(a0),a0
    38f2:	|  |  |  |  |  |      move.l (a0),d1
    38f4:	|  |  |  |  |  |      move.l 24(sp),d0
    38f8:	|  |  |  |  |  |      add.l d0,d0
    38fa:	|  |  |  |  |  |      add.l d0,d0
    38fc:	|  |  |  |  |  |      movea.l 36(sp),a0
    3900:	|  |  |  |  |  |      adda.l d0,a0
    3902:	|  |  |  |  |  |      move.l (a0),d0
    3904:	|  |  |  |  |  |      cmp.l d1,d0
    3906:	|  |  |  |  |  |  /-- bne.s 3944 <deleteTextures+0xc6>
					found = TRUE;
    3908:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    390e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3912:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    3918:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    391c:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    3920:	|  |  |  |  |  |  |   move.l 12(a0),d0
    3924:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3928:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    392c:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    3932:	|  |  |  |  |  |  |   move.l 1a7a2 <SysBase>,d0
    3938:	|  |  |  |  |  |  |   movea.l d0,a6
    393a:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    393e:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    3942:	|  |  |  |  +--|--|-- bra.s 3958 <deleteTextures+0xda>
				}
				list = list->next;
    3944:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    3948:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    394e:	|  |  |  \--|--|----> movea.l 20(sp),a0
    3952:	|  |  |     |  |      move.l 12(a0),d0
    3956:	|  |  |     |  \----- bne.s 38ea <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    3958:	|  |  |     \-------> addq.l #1,24(sp)
    395c:	|  |  \-------------> move.l 24(sp),d0
    3960:	|  |                  cmp.l 32(sp),d0
    3964:	|  \----------------- bcs.w 3896 <deleteTextures+0x18>
			}
		}
	}
}
    3968:	\-------------------> nop
    396a:	                      movea.l (sp)+,a6
    396c:	                      lea 24(sp),sp
    3970:	                      rts

00003972 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    3972:	subq.l #4,sp
    3974:	move.l 8(sp),d0
    3978:	move.w d0,d0
    397a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    397e:	pea 17cc0 <PutChar+0x640>
    3984:	jsr 16bac <KPrintF>
    398a:	addq.l #4,sp
}
    398c:	nop
    398e:	addq.l #4,sp
    3990:	rts

00003992 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    3992:	       moveq #-1,d0
    3994:	       cmp.l 4(sp),d0
    3998:	   /-- bne.s 399e <resourceNameFromNum+0xc>
    399a:	   |   moveq #0,d0
    399c:	/--|-- bra.s 39d6 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    399e:	|  \-> move.l 1a77e <numResourceNames>,d0
    39a4:	|  /-- bne.s 39ae <resourceNameFromNum+0x1c>
    39a6:	|  |   move.l #97520,d0
    39ac:	+--|-- bra.s 39d6 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    39ae:	|  \-> move.l 1a77e <numResourceNames>,d0
    39b4:	|      cmp.l 4(sp),d0
    39b8:	|  /-- ble.s 39d0 <resourceNameFromNum+0x3e>
    39ba:	|  |   move.l 1a736 <allResourceNames>,d1
    39c0:	|  |   move.l 4(sp),d0
    39c4:	|  |   add.l d0,d0
    39c6:	|  |   add.l d0,d0
    39c8:	|  |   movea.l d1,a0
    39ca:	|  |   adda.l d0,a0
    39cc:	|  |   move.l (a0),d0
    39ce:	+--|-- bra.s 39d6 <resourceNameFromNum+0x44>
	return "Unknown resource";
    39d0:	|  \-> move.l #97529,d0
    39d6:	\----> rts

000039d8 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    39d8:	          lea -44(sp),sp
    39dc:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    39e0:	          move.l #320,1a6f6 <winWidth>
    winHeight = 256;
    39ea:	          move.l #256,1a6fa <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    39f4:	          tst.l 60(sp)
    39f8:	      /-- bne.s 3a10 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    39fa:	      |   pea 17d0a <PutChar+0x68a>
    3a00:	      |   jsr b8 <copyString>
    3a06:	      |   addq.l #4,sp
    3a08:	      |   move.l d0,1a70e <bundleFolder>
    3a0e:	   /--|-- bra.s 3a26 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    3a10:	   |  \-> movea.l 64(sp),a0
    3a14:	   |      move.l (a0),d0
    3a16:	   |      move.l d0,-(sp)
    3a18:	   |      jsr b8 <copyString>
    3a1e:	   |      addq.l #4,sp
    3a20:	   |      move.l d0,1a70e <bundleFolder>
	}
    
	int lastSlash = -1;
    3a26:	   \----> moveq #-1,d0
    3a28:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3a2c:	          clr.l 44(sp)
    3a30:	   /----- bra.s 3a52 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    3a32:	/--|----> move.l 1a70e <bundleFolder>,d1
    3a38:	|  |      move.l 44(sp),d0
    3a3c:	|  |      movea.l d1,a0
    3a3e:	|  |      adda.l d0,a0
    3a40:	|  |      move.b (a0),d0
    3a42:	|  |      cmpi.b #47,d0
    3a46:	|  |  /-- bne.s 3a4e <main_sludge+0x76>
    3a48:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3a4e:	|  |  \-> addq.l #1,44(sp)
    3a52:	|  \----> move.l 1a70e <bundleFolder>,d1
    3a58:	|         move.l 44(sp),d0
    3a5c:	|         movea.l d1,a0
    3a5e:	|         adda.l d0,a0
    3a60:	|         move.b (a0),d0
    3a62:	\-------- bne.s 3a32 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    3a64:	          move.l 1a70e <bundleFolder>,d0
    3a6a:	          move.l 48(sp),d1
    3a6e:	          addq.l #1,d1
    3a70:	          movea.l d0,a0
    3a72:	          adda.l d1,a0
    3a74:	          clr.b (a0)

	if (argc > 1) {
    3a76:	          moveq #1,d0
    3a78:	          cmp.l 60(sp),d0
    3a7c:	      /-- bge.s 3a98 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    3a7e:	      |   move.l 60(sp),d0
    3a82:	      |   addi.l #1073741823,d0
    3a88:	      |   add.l d0,d0
    3a8a:	      |   add.l d0,d0
    3a8c:	      |   movea.l 64(sp),a0
    3a90:	      |   adda.l d0,a0
    3a92:	      |   move.l (a0),52(sp)
    3a96:	   /--|-- bra.s 3af2 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3a98:	   |  \-> move.l 1a70e <bundleFolder>,d0
    3a9e:	   |      pea 17d10 <PutChar+0x690>
    3aa4:	   |      move.l d0,-(sp)
    3aa6:	   |      jsr 136da <joinStrings>
    3aac:	   |      addq.l #8,sp
    3aae:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    3ab2:	   |      move.l 52(sp),-(sp)
    3ab6:	   |      jsr 135d4 <fileExists>
    3abc:	   |      addq.l #4,sp
    3abe:	   |      tst.b d0
    3ac0:	   +----- bne.s 3af2 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    3ac2:	   |      move.l 52(sp),40(sp)
    3ac8:	   |      move.l 1a7a2 <SysBase>,d0
    3ace:	   |      movea.l d0,a6
    3ad0:	   |      movea.l 40(sp),a1
    3ad4:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3ad8:	   |      move.l 1a70e <bundleFolder>,d0
    3ade:	   |      pea 17d1d <PutChar+0x69d>
    3ae4:	   |      move.l d0,-(sp)
    3ae6:	   |      jsr 136da <joinStrings>
    3aec:	   |      addq.l #8,sp
    3aee:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    3af2:	   \----> pea 17d26 <PutChar+0x6a6>
    3af8:	          jsr 16bac <KPrintF>
    3afe:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    3b00:	          move.l 52(sp),-(sp)
    3b04:	          jsr 135d4 <fileExists>
    3b0a:	          addq.l #4,sp
    3b0c:	          tst.b d0
    3b0e:	      /-- bne.s 3b66 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    3b10:	      |   move.l 1a7aa <DOSBase>,d0
    3b16:	      |   movea.l d0,a6
    3b18:	      |   jsr -60(a6)
    3b1c:	      |   move.l d0,28(sp)
    3b20:	      |   move.l 28(sp),d0
    3b24:	      |   move.l d0,24(sp)
    3b28:	      |   move.l #97574,20(sp)
    3b30:	      |   moveq #21,d0
    3b32:	      |   move.l d0,16(sp)
    3b36:	      |   move.l 1a7aa <DOSBase>,d0
    3b3c:	      |   movea.l d0,a6
    3b3e:	      |   move.l 24(sp),d1
    3b42:	      |   move.l 20(sp),d2
    3b46:	      |   move.l 16(sp),d3
    3b4a:	      |   jsr -48(a6)
    3b4e:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    3b52:	      |   pea 17d26 <PutChar+0x6a6>
    3b58:	      |   jsr 16bac <KPrintF>
    3b5e:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    3b60:	      |   moveq #0,d0
    3b62:	/-----|-- bra.w 3d5e <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    3b66:	|     \-> pea 17d3c <PutChar+0x6bc>
    3b6c:	|         jsr 16bac <KPrintF>
    3b72:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    3b74:	|         move.l 52(sp),-(sp)
    3b78:	|         jsr 3d68 <setGameFilePath>
    3b7e:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    3b80:	|         move.l 52(sp),-(sp)
    3b84:	|         jsr 5316 <initSludge>
    3b8a:	|         addq.l #4,sp
    3b8c:	|         tst.w d0
    3b8e:	|     /-- bne.s 3b96 <main_sludge+0x1be>
    3b90:	|     |   moveq #0,d0
    3b92:	+-----|-- bra.w 3d5e <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    3b96:	|     \-> move.l 1a6f6 <winWidth>,d0
    3b9c:	|         cmpi.l #320,d0
    3ba2:	|     /-- bne.s 3bb2 <main_sludge+0x1da>
    3ba4:	|     |   move.l 1a6fa <winHeight>,d0
    3baa:	|     |   cmpi.l #256,d0
    3bb0:	|  /--|-- beq.s 3bd4 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    3bb2:	|  |  \-> pea 17d4d <PutChar+0x6cd>
    3bb8:	|  |      jsr 16bac <KPrintF>
    3bbe:	|  |      addq.l #4,sp
		winWidth = 320;
    3bc0:	|  |      move.l #320,1a6f6 <winWidth>
		winHeight = 256;
    3bca:	|  |      move.l #256,1a6fa <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    3bd4:	|  \----> pea 17dca <PutChar+0x74a>
    3bda:	|         jsr 16bac <KPrintF>
    3be0:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    3be2:	|         move.l 1a6fa <winHeight>,d0
    3be8:	|         move.l d0,d1
    3bea:	|         move.l 1a6f6 <winWidth>,d0
    3bf0:	|         move.l d1,-(sp)
    3bf2:	|         move.l d0,-(sp)
    3bf4:	|         jsr ce5e <resizeBackdrop>
    3bfa:	|         addq.l #8,sp
    3bfc:	|         tst.w d0
    3bfe:	|     /-- bne.s 3c14 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    3c00:	|     |   pea 17ddd <PutChar+0x75d>
    3c06:	|     |   jsr 16bac <KPrintF>
    3c0c:	|     |   addq.l #4,sp
		return FALSE;
    3c0e:	|     |   moveq #0,d0
    3c10:	+-----|-- bra.w 3d5e <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    3c14:	|     \-> pea 17e03 <PutChar+0x783>
    3c1a:	|         jsr 16bac <KPrintF>
    3c20:	|         addq.l #4,sp
	if (! initPeople ())
    3c22:	|         jsr a3e2 <initPeople>
    3c28:	|         tst.w d0
    3c2a:	|     /-- bne.s 3c40 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    3c2c:	|     |   pea 17e10 <PutChar+0x790>
    3c32:	|     |   jsr 16bac <KPrintF>
    3c38:	|     |   addq.l #4,sp
		return FALSE;
    3c3a:	|     |   moveq #0,d0
    3c3c:	+-----|-- bra.w 3d5e <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    3c40:	|     \-> pea 17e31 <PutChar+0x7b1>
    3c46:	|         jsr 16bac <KPrintF>
    3c4c:	|         addq.l #4,sp
	if (! initFloor ())
    3c4e:	|         jsr 15f62 <initFloor>
    3c54:	|         tst.w d0
    3c56:	|     /-- bne.s 3c6c <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    3c58:	|     |   pea 17e3d <PutChar+0x7bd>
    3c5e:	|     |   jsr 16bac <KPrintF>
    3c64:	|     |   addq.l #4,sp
		
		return FALSE;
    3c66:	|     |   moveq #0,d0
    3c68:	+-----|-- bra.w 3d5e <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    3c6c:	|     \-> pea 17e5d <PutChar+0x7dd>
    3c72:	|         jsr 16bac <KPrintF>
    3c78:	|         addq.l #4,sp
	if (! initObjectTypes ())
    3c7a:	|         jsr d01a <initObjectTypes>
    3c80:	|         tst.w d0
    3c82:	|     /-- bne.s 3c98 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    3c84:	|     |   pea 17e6e <PutChar+0x7ee>
    3c8a:	|     |   jsr 16bac <KPrintF>
    3c90:	|     |   addq.l #4,sp
		return FALSE;
    3c92:	|     |   moveq #0,d0
    3c94:	+-----|-- bra.w 3d5e <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    3c98:	|     \-> pea 17e94 <PutChar+0x814>
    3c9e:	|         jsr 16bac <KPrintF>
    3ca4:	|         addq.l #4,sp
	initSpeech ();
    3ca6:	|         jsr 772a <initSpeech>
	KPrintF("Init status bar\n");
    3cac:	|         pea 17ea1 <PutChar+0x821>
    3cb2:	|         jsr 16bac <KPrintF>
    3cb8:	|         addq.l #4,sp
	initStatusBar ();
    3cba:	|         jsr 71ee <initStatusBar>

	KPrintF("Get numbered string\n");
    3cc0:	|         pea 17eb2 <PutChar+0x832>
    3cc6:	|         jsr 16bac <KPrintF>
    3ccc:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    3cce:	|         pea 1 <_start+0x1>
    3cd2:	|         jsr 650c <getNumberedString>
    3cd8:	|         addq.l #4,sp
    3cda:	|         move.l d0,1a706 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    3ce0:	|         pea 17ec7 <PutChar+0x847>
    3ce6:	|         jsr 16bac <KPrintF>
    3cec:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    3cee:	|         move.l 1a772 <noStack>,d0
    3cf4:	|         pea 1 <_start+0x1>
    3cf8:	|         move.l d0,-(sp)
    3cfa:	|         clr.l -(sp)
    3cfc:	|         clr.l -(sp)
    3cfe:	|         clr.l -(sp)
    3d00:	|         jsr 6362 <startNewFunctionNum>
    3d06:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    3d0a:	|         pea 17edf <PutChar+0x85f>
    3d10:	|         jsr 16bac <KPrintF>
    3d16:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    3d18:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    3d20:	|         clr.l 1a712 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    3d26:	|     /-- bra.s 3d40 <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    3d28:	|  /--|-> jsr 62f2 <sludgeDisplay>
		CsiCheckInput();
    3d2e:	|  |  |   jsr c98e <CsiCheckInput>
		handleInput();
    3d34:	|  |  |   jsr 50b0 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    3d3a:	|  |  |   jsr 16ae0 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    3d40:	|  |  \-> move.l 1a712 <weAreDoneSoQuit>,d0
    3d46:	|  \----- beq.s 3d28 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    3d48:	|         move.l 52(sp),32(sp)
    3d4e:	|         move.l 1a7a2 <SysBase>,d0
    3d54:	|         movea.l d0,a6
    3d56:	|         movea.l 32(sp),a1
    3d5a:	|         jsr -690(a6)
}
    3d5e:	\-------> movem.l (sp)+,d2-d3/a6
    3d62:	          lea 44(sp),sp
    3d66:	          rts

00003d68 <setGameFilePath>:

void setGameFilePath (char * f) {
    3d68:	          lea -1104(sp),sp
    3d6c:	          move.l a6,-(sp)
    3d6e:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    3d70:	          move.l #1112,d0
    3d76:	          add.l sp,d0
    3d78:	          addi.l #-1102,d0
    3d7e:	          move.l d0,1100(sp)
    3d82:	          move.l #998,1096(sp)
    3d8a:	          move.l 1a7aa <DOSBase>,d0
    3d90:	          movea.l d0,a6
    3d92:	          move.l 1100(sp),d1
    3d96:	          move.l 1096(sp),d2
    3d9a:	          jsr -564(a6)
    3d9e:	          move.w d0,1094(sp)
    3da2:	          move.w 1094(sp),d0
    3da6:	      /-- bne.s 3db6 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    3da8:	      |   pea 17ef2 <PutChar+0x872>
    3dae:	      |   jsr 16bac <KPrintF>
    3db4:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    3db6:	      \-> moveq #-1,d0
    3db8:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    3dbc:	          clr.l 1104(sp)
    3dc0:	   /----- bra.s 3dde <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    3dc2:	/--|----> move.l 1104(sp),d0
    3dc6:	|  |      movea.l 1116(sp),a0
    3dca:	|  |      adda.l d0,a0
    3dcc:	|  |      move.b (a0),d0
    3dce:	|  |      cmpi.b #47,d0
    3dd2:	|  |  /-- bne.s 3dda <setGameFilePath+0x72>
    3dd4:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    3dda:	|  |  \-> addq.l #1,1104(sp)
    3dde:	|  \----> move.l 1104(sp),d0
    3de2:	|         movea.l 1116(sp),a0
    3de6:	|         adda.l d0,a0
    3de8:	|         move.b (a0),d0
    3dea:	\-------- bne.s 3dc2 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    3dec:	          moveq #-1,d0
    3dee:	          cmp.l 1108(sp),d0
    3df2:	   /----- beq.s 3e6c <setGameFilePath+0x104>
		f[got] = 0;	
    3df4:	   |      move.l 1108(sp),d0
    3df8:	   |      movea.l 1116(sp),a0
    3dfc:	   |      adda.l d0,a0
    3dfe:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    3e00:	   |      move.l 1116(sp),1090(sp)
    3e06:	   |      moveq #-2,d0
    3e08:	   |      move.l d0,1086(sp)
    3e0c:	   |      move.l 1a7aa <DOSBase>,d0
    3e12:	   |      movea.l d0,a6
    3e14:	   |      move.l 1090(sp),d1
    3e18:	   |      move.l 1086(sp),d2
    3e1c:	   |      jsr -84(a6)
    3e20:	   |      move.l d0,1082(sp)
    3e24:	   |      move.l 1082(sp),d0
    3e28:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    3e2c:	   |      move.l 1078(sp),1074(sp)
    3e32:	   |      move.l 1a7aa <DOSBase>,d0
    3e38:	   |      movea.l d0,a6
    3e3a:	   |      move.l 1074(sp),d1
    3e3e:	   |      jsr -126(a6)
    3e42:	   |      move.l d0,1070(sp)
    3e46:	   |      move.l 1070(sp),d0
    3e4a:	   |  /-- bne.s 3e5e <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    3e4c:	   |  |   move.l 1116(sp),-(sp)
    3e50:	   |  |   pea 17f18 <PutChar+0x898>
    3e56:	   |  |   jsr 16bac <KPrintF>
    3e5c:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    3e5e:	   |  \-> move.l 1108(sp),d0
    3e62:	   |      movea.l 1116(sp),a0
    3e66:	   |      adda.l d0,a0
    3e68:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    3e6c:	   \----> move.l #400,1066(sp)
    3e74:	          clr.l 1062(sp)
    3e78:	          move.l 1a7a2 <SysBase>,d0
    3e7e:	          movea.l d0,a6
    3e80:	          move.l 1066(sp),d0
    3e84:	          move.l 1062(sp),d1
    3e88:	          jsr -684(a6)
    3e8c:	          move.l d0,1058(sp)
    3e90:	          move.l 1058(sp),d0
    3e94:	          move.l d0,1a70a <gamePath>
	if (gamePath==0) {
    3e9a:	          move.l 1a70a <gamePath>,d0
    3ea0:	      /-- bne.s 3eb4 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    3ea2:	      |   pea 17f4b <PutChar+0x8cb>
    3ea8:	      |   jsr 16bac <KPrintF>
    3eae:	      |   addq.l #4,sp
    3eb0:	   /--|-- bra.w 3f9c <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    3eb4:	   |  \-> move.l 1a70a <gamePath>,1054(sp)
    3ebc:	   |      moveq #-2,d0
    3ebe:	   |      move.l d0,1050(sp)
    3ec2:	   |      move.l 1a7aa <DOSBase>,d0
    3ec8:	   |      movea.l d0,a6
    3eca:	   |      move.l 1054(sp),d1
    3ece:	   |      move.l 1050(sp),d2
    3ed2:	   |      jsr -84(a6)
    3ed6:	   |      move.l d0,1046(sp)
    3eda:	   |      move.l 1046(sp),d0
    3ede:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    3ee2:	   |      move.l 1042(sp),1038(sp)
    3ee8:	   |      move.l 1a7aa <DOSBase>,d0
    3eee:	   |      movea.l d0,a6
    3ef0:	   |      move.l 1038(sp),d1
    3ef4:	   |      jsr -126(a6)
    3ef8:	   |      move.l d0,1034(sp)
    3efc:	   |      move.l 1034(sp),d0
    3f00:	   |  /-- bne.s 3f10 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    3f02:	   |  |   pea 17f86 <PutChar+0x906>
    3f08:	   |  |   jsr 16bac <KPrintF>
    3f0e:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    3f10:	   |  \-> move.l #1112,d0
    3f16:	   |      add.l sp,d0
    3f18:	   |      addi.l #-1102,d0
    3f1e:	   |      move.l d0,1030(sp)
    3f22:	   |      moveq #-2,d0
    3f24:	   |      move.l d0,1026(sp)
    3f28:	   |      move.l 1a7aa <DOSBase>,d0
    3f2e:	   |      movea.l d0,a6
    3f30:	   |      move.l 1030(sp),d1
    3f34:	   |      move.l 1026(sp),d2
    3f38:	   |      jsr -84(a6)
    3f3c:	   |      move.l d0,1022(sp)
    3f40:	   |      move.l 1022(sp),d0
    3f44:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    3f48:	   |      move.l 1042(sp),1018(sp)
    3f4e:	   |      move.l 1a7aa <DOSBase>,d0
    3f54:	   |      movea.l d0,a6
    3f56:	   |      move.l 1018(sp),d1
    3f5a:	   |      jsr -126(a6)
    3f5e:	   |      move.l d0,1014(sp)
    3f62:	   |      move.l 1014(sp),d0
    3f66:	   |  /-- bne.s 3f7c <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    3f68:	   |  |   moveq #10,d0
    3f6a:	   |  |   add.l sp,d0
    3f6c:	   |  |   move.l d0,-(sp)
    3f6e:	   |  |   pea 17fb2 <PutChar+0x932>
    3f74:	   |  |   jsr 16bac <KPrintF>
    3f7a:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    3f7c:	   |  \-> move.l 1a70a <gamePath>,d0
    3f82:	   +----- beq.s 3f9c <setGameFilePath+0x234>
    3f84:	   |      move.l 1a70a <gamePath>,1010(sp)
    3f8c:	   |      move.l 1a7a2 <SysBase>,d0
    3f92:	   |      movea.l d0,a6
    3f94:	   |      movea.l 1010(sp),a1
    3f98:	   |      jsr -690(a6)
}
    3f9c:	   \----> move.l (sp)+,d2
    3f9e:	          movea.l (sp)+,a6
    3fa0:	          lea 1104(sp),sp
    3fa4:	          rts

00003fa6 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    3fa6:	/-------> lea -16(sp),sp
    3faa:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    3fac:	|         move.l 24(sp),-(sp)
    3fb0:	|         jsr 60d4 <pauseFunction>
    3fb6:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    3fb8:	|     /-- bra.s 3fca <abortFunction+0x24>
    3fba:	|  /--|-> moveq #24,d0
    3fbc:	|  |  |   add.l 24(sp),d0
    3fc0:	|  |  |   move.l d0,-(sp)
    3fc2:	|  |  |   jsr 14b32 <trimStack>
    3fc8:	|  |  |   addq.l #4,sp
    3fca:	|  |  \-> movea.l 24(sp),a0
    3fce:	|  |      move.l 24(a0),d0
    3fd2:	|  \----- bne.s 3fba <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    3fd4:	|         movea.l 24(sp),a0
    3fd8:	|         move.l 4(a0),12(sp)
    3fde:	|         move.l 1a7a2 <SysBase>,d0
    3fe4:	|         movea.l d0,a6
    3fe6:	|         movea.l 12(sp),a1
    3fea:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    3fee:	|         clr.l 16(sp)
    3ff2:	|     /-- bra.s 4012 <abortFunction+0x6c>
    3ff4:	|  /--|-> movea.l 24(sp),a0
    3ff8:	|  |  |   move.l 20(a0),d1
    3ffc:	|  |  |   move.l 16(sp),d0
    4000:	|  |  |   lsl.l #3,d0
    4002:	|  |  |   add.l d1,d0
    4004:	|  |  |   move.l d0,-(sp)
    4006:	|  |  |   jsr 143fc <unlinkVar>
    400c:	|  |  |   addq.l #4,sp
    400e:	|  |  |   addq.l #1,16(sp)
    4012:	|  |  \-> movea.l 24(sp),a0
    4016:	|  |      move.l 8(a0),d0
    401a:	|  |      cmp.l 16(sp),d0
    401e:	|  \----- bgt.s 3ff4 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    4020:	|         movea.l 24(sp),a0
    4024:	|         move.l 20(a0),8(sp)
    402a:	|         move.l 1a7a2 <SysBase>,d0
    4030:	|         movea.l d0,a6
    4032:	|         movea.l 8(sp),a1
    4036:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    403a:	|         moveq #28,d0
    403c:	|         add.l 24(sp),d0
    4040:	|         move.l d0,-(sp)
    4042:	|         jsr 143fc <unlinkVar>
    4048:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    404a:	|         movea.l 24(sp),a0
    404e:	|         move.l 40(a0),d0
    4052:	|     /-- beq.s 4064 <abortFunction+0xbe>
    4054:	|     |   movea.l 24(sp),a0
    4058:	|     |   move.l 40(a0),d0
    405c:	|     |   move.l d0,-(sp)
    405e:	\-----|-- jsr 3fa6 <abortFunction>(pc)
    4062:	      |   addq.l #4,sp
	FreeVec(fun);
    4064:	      \-> move.l 24(sp),4(sp)
    406a:	          move.l 1a7a2 <SysBase>,d0
    4070:	          movea.l d0,a6
    4072:	          movea.l 4(sp),a1
    4076:	          jsr -690(a6)
	fun = NULL;
    407a:	          clr.l 24(sp)
}
    407e:	          nop
    4080:	          movea.l (sp)+,a6
    4082:	          lea 16(sp),sp
    4086:	          rts

00004088 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    4088:	          subq.l #8,sp
	int n = 0;
    408a:	          clr.l 4(sp)
	*killedMyself = FALSE;
    408e:	          movea.l 20(sp),a0
    4092:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    4094:	          move.l 1a73a <allRunningFunctions>,(sp)
	while (fun) {
    409a:	   /----- bra.s 40c8 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    409c:	/--|----> movea.l (sp),a0
    409e:	|  |      move.l (a0),d0
    40a0:	|  |      cmp.l 12(sp),d0
    40a4:	|  |  /-- bne.s 40c2 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    40a6:	|  |  |   movea.l (sp),a0
    40a8:	|  |  |   move.w #1,54(a0)
			n++;
    40ae:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    40b2:	|  |  |   move.l (sp),d0
    40b4:	|  |  |   cmp.l 16(sp),d0
    40b8:	|  |  +-- bne.s 40c2 <cancelAFunction+0x3a>
    40ba:	|  |  |   movea.l 20(sp),a0
    40be:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    40c2:	|  |  \-> movea.l (sp),a0
    40c4:	|  |      move.l 44(a0),(sp)
	while (fun) {
    40c8:	|  \----> tst.l (sp)
    40ca:	\-------- bne.s 409c <cancelAFunction+0x14>
	}
	return n;
    40cc:	          move.l 4(sp),d0
}
    40d0:	          addq.l #8,sp
    40d2:	          rts

000040d4 <completeTimers>:


void completeTimers () {
    40d4:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    40d6:	          move.l 1a73a <allRunningFunctions>,(sp)

	while (thisFunction) {
    40dc:	   /----- bra.s 40f2 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    40de:	/--|----> movea.l (sp),a0
    40e0:	|  |      move.b 56(a0),d0
    40e4:	|  |  /-- bne.s 40ec <completeTimers+0x18>
    40e6:	|  |  |   movea.l (sp),a0
    40e8:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    40ec:	|  |  \-> movea.l (sp),a0
    40ee:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    40f2:	|  \----> tst.l (sp)
    40f4:	\-------- bne.s 40de <completeTimers+0xa>
	}
}
    40f6:	          nop
    40f8:	          nop
    40fa:	          addq.l #4,sp
    40fc:	          rts

000040fe <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    40fe:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    4102:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    4108:	                                                             movea.l 80(sp),a0
    410c:	                                                             move.w 54(a0),d0
    4110:	/----------------------------------------------------------- beq.w 4f9e <continueFunction+0xea0>
		abortFunction (fun);
    4114:	|                                                            move.l 80(sp),-(sp)
    4118:	|                                                            jsr 3fa6 <abortFunction>
    411e:	|                                                            addq.l #4,sp
		return TRUE;
    4120:	|                                                            moveq #1,d0
    4122:	|  /-------------------------------------------------------- bra.w 4fa8 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    4126:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    412c:	|  |  |                                                      movea.l 80(sp),a0
    4130:	|  |  |                                                      move.l 4(a0),d1
    4134:	|  |  |                                                      movea.l 80(sp),a0
    4138:	|  |  |                                                      move.l 36(a0),d0
    413c:	|  |  |                                                      lsl.l #3,d0
    413e:	|  |  |                                                      movea.l d1,a0
    4140:	|  |  |                                                      adda.l d0,a0
    4142:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    4148:	|  |  |                                                      movea.l 80(sp),a0
    414c:	|  |  |                                                      move.l 4(a0),d1
    4150:	|  |  |                                                      movea.l 80(sp),a0
    4154:	|  |  |                                                      move.l 36(a0),d0
    4158:	|  |  |                                                      lsl.l #3,d0
    415a:	|  |  |                                                      movea.l d1,a0
    415c:	|  |  |                                                      adda.l d0,a0
    415e:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    4162:	|  |  |                                                      moveq #41,d0
    4164:	|  |  |                                                      cmp.l 64(sp),d0
    4168:	|  |  |  /-------------------------------------------------- bcs.w 4f52 <continueFunction+0xe54>
    416c:	|  |  |  |                                                   move.l 64(sp),d0
    4170:	|  |  |  |                                                   add.l d0,d0
    4172:	|  |  |  |                                                   movea.l d0,a0
    4174:	|  |  |  |                                                   adda.l #16768,a0
    417a:	|  |  |  |                                                   move.w (a0),d0
    417c:	|  |  |  |                                                   jmp (4180 <continueFunction+0x82>,pc,d0.w)
    4180:	|  |  |  |                                                   bset d6,(a2)
    4182:	|  |  |  |                                                   ori.w #2670,(a4)
    4186:	|  |  |  |                                                   eori.w #2416,d6
    418a:	|  |  |  |                                                   bchg d4,d2
    418c:	|  |  |  |                                                   bclr d4,(a4)+
    418e:	|  |  |  |                                                   andi.l #181013194,d4
    4194:	|  |  |  |                                                   .short 0x0aca
    4196:	|  |  |  |                                                   .short 0x0aca
    4198:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    41a0:	|  |  |  |                                                   .short 0x0aca
    41a2:	|  |  |  |                                                   andi.w #906,-(a4)
    41a6:	|  |  |  |                                                   bchg d1,196(a2)
    41aa:	|  |  |  |                                                   bset d1,580(a4)
    41ae:	|  |  |  |                                                   bclr d1,2576(a2)
    41b2:	|  |  |  |                                                   andi.b #-56,2762(a2)
    41b8:	|  |  |  |                                                   .short 0x0aca
    41ba:	|  |  |  |                                                   eori.l #63572682,d0
    41c0:	|  |  |  |                                                   .short 0x0aca
    41c2:	|  |  |  |                                                   bchg d3,-(a2)
    41c4:	|  |  |  |                                                   bchg #-36,(a2)
    41c8:	|  |  |  |                                                   .short 0x08cc
    41ca:	|  |  |  |                                                   addi.b #14,1038(a0)
    41d0:	|  |  |  |                                                   .short 0x040e
    41d2:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    41d6:	|  |  |  |                                                   ori.w #8232,(a0)
    41da:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    41e0:	|  |  |  |                                                   ori.w #12136,(a0)
    41e4:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    41ea:	|  |  |  |                                                   ori.w #12328,(a0)
    41ee:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    41f4:	|  |  |  |                                                   add.l 44(sp),d1
    41f8:	|  |  |  |                                                   moveq #28,d0
    41fa:	|  |  |  |                                                   add.l 80(sp),d0
    41fe:	|  |  |  |                                                   move.l d1,-(sp)
    4200:	|  |  |  |                                                   move.l d0,-(sp)
    4202:	|  |  |  |                                                   jsr 14668 <copyVariable>
    4208:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    420a:	|  |  |  |                                                   move.l 80(sp),-(sp)
    420e:	|  |  |  |                                                   jsr 4fae <finishFunction>
    4214:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    4216:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    421c:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4220:	|  |  |  |                                                   jsr 6116 <restartFunction>
    4226:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    4228:	|  |  |  |  /----------------------------------------------- bra.w 4f86 <continueFunction+0xe88>
				finishFunction (fun);
    422c:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    4230:	|  |  |  |  |                                                jsr 4fae <finishFunction>
    4236:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4238:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    423c:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    4240:	|  |  |  |  +----------------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    4244:	|  |  |  |  |                                                movea.l 80(sp),a0
    4248:	|  |  |  |  |                                                move.l 28(a0),d0
    424c:	|  |  |  |  |                                                moveq #2,d1
    424e:	|  |  |  |  |                                                cmp.l d0,d1
    4250:	|  |  |  |  |                                            /-- beq.s 425c <continueFunction+0x15e>
    4252:	|  |  |  |  |                                            |   moveq #4,d1
    4254:	|  |  |  |  |                                            |   cmp.l d0,d1
    4256:	|  |  |  |  |                                         /--|-- beq.s 42aa <continueFunction+0x1ac>
    4258:	|  |  |  |  |                                /--------|--|-- bra.w 4392 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    425c:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    4260:	|  |  |  |  |                                |        |      jsr 60d4 <pauseFunction>
    4266:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    4268:	|  |  |  |  |                                |        |      moveq #24,d0
    426a:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    426e:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    4272:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    4276:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    427a:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    427c:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    4280:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    4284:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    4286:	|  |  |  |  |                                |        |      jsr 6362 <startNewFunctionNum>
    428c:	|  |  |  |  |                                |        |      lea 20(sp),sp
    4290:	|  |  |  |  |                                |        |      tst.l d0
    4292:	|  |  |  |  |                                |        |  /-- bne.s 429a <continueFunction+0x19c>
    4294:	|  |  |  |  |                                |        |  |   clr.w d0
    4296:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 4fa8 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    429a:	|  |  |  |  |                                |        |  \-> move.l 1a73a <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    42a2:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    42a6:	|  |  |  |  |                                |  /-----|----- bra.w 43a6 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    42aa:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    42ae:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    42b2:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    42b6:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    42ba:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    42bc:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    42be:	|  |  |  |  |                                |  |            jsr 12e90 <callBuiltIn>
    42c4:	|  |  |  |  |                                |  |            lea 12(sp),sp
    42c8:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    42cc:	|  |  |  |  |                                |  |            moveq #5,d0
    42ce:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    42d2:	|  |  |  |  |                                |  |  /-------- bcs.w 438e <continueFunction+0x290>
    42d6:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    42da:	|  |  |  |  |                                |  |  |         add.l d0,d0
    42dc:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    42de:	|  |  |  |  |                                |  |  |         adda.l #17130,a0
    42e4:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    42e6:	|  |  |  |  |                                |  |  |         jmp (42ea <continueFunction+0x1ec>,pc,d0.w)
    42ea:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    42f0:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    42f4:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    42fa:	|  |  |  |  |                                |  |  |         or.l 91b5 <createPersonaAnim+0x53>(pc),d0
    42fe:	|  |  |  |  |                                |  |  |         ori.b #-84,d1
    4302:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4304:	|  |  |  |  |                                |  |  |         clr.w d0
    4306:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 4fa8 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    430a:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    430e:	|  |  |  |  |                                |  |  |         jsr 60d4 <pauseFunction>
    4314:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4316:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    431a:	|  |  |  |  |                                |  |  |  /----- bra.s 4390 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    431c:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4320:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4324:	|  |  |  |  |                                |  |  |  +----- bra.s 4390 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4326:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    432a:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4330:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4332:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4336:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    433a:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    433e:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4340:	|  |  |  |  |                                |  |  |  |      jsr 14aa0 <setVariable>
    4346:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    434a:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    434e:	|  |  |  |  |                                |  |  |  |      jsr 60d4 <pauseFunction>
    4354:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    4356:	|  |  |  |  |                                |  |  |  |      move.l 1a772 <noStack>,d1
    435c:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4360:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4362:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4364:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4368:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    436a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    436c:	|  |  |  |  |                                |  |  |  |      jsr 6362 <startNewFunctionNum>
    4372:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    4376:	|  |  |  |  |                                |  |  |  |      tst.l d0
    4378:	|  |  |  |  |                                |  |  |  |  /-- bne.s 4380 <continueFunction+0x282>
    437a:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    437c:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 4fa8 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4380:	|  |  |  |  |                                |  |  |  |  \-> move.l 1a73a <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    4388:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    438c:	|  |  |  |  |                                |  |  |  +----- bra.s 4390 <continueFunction+0x292>

						default:
						break;
    438e:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    4390:	|  |  |  |  |                                |  +-----\----X bra.s 43a6 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    4392:	|  |  |  |  |                                \--|----------> pea 18105 <PutChar+0xa85>
    4398:	|  |  |  |  |                                   |            jsr 16bac <KPrintF>
    439e:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    43a0:	|  |  |  |  |                                   |            clr.w d0
    43a2:	|  +--|--|--|-----------------------------------|----------- bra.w 4fa8 <continueFunction+0xeaa>
			}
			break;
    43a6:	|  |  |  |  +-----------------------------------\----------X bra.w 4f86 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    43aa:	|  |  |  |  |                                                moveq #28,d0
    43ac:	|  |  |  |  |                                                add.l 80(sp),d0
    43b0:	|  |  |  |  |                                                clr.l -(sp)
    43b2:	|  |  |  |  |                                                clr.l -(sp)
    43b4:	|  |  |  |  |                                                move.l d0,-(sp)
    43b6:	|  |  |  |  |                                                jsr 14aa0 <setVariable>
    43bc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    43c0:	|  |  |  |  +----------------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    43c4:	|  |  |  |  |                                                move.l 68(sp),d1
    43c8:	|  |  |  |  |                                                moveq #28,d0
    43ca:	|  |  |  |  |                                                add.l 80(sp),d0
    43ce:	|  |  |  |  |                                                move.l d1,-(sp)
    43d0:	|  |  |  |  |                                                pea 5 <_start+0x5>
    43d4:	|  |  |  |  |                                                move.l d0,-(sp)
    43d6:	|  |  |  |  |                                                jsr 14aa0 <setVariable>
    43dc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    43e0:	|  |  |  |  +----------------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    43e4:	|  |  |  |  |                                                move.l 68(sp),d1
    43e8:	|  |  |  |  |                                                moveq #28,d0
    43ea:	|  |  |  |  |                                                add.l 80(sp),d0
    43ee:	|  |  |  |  |                                                move.l d1,-(sp)
    43f0:	|  |  |  |  |                                                pea 1 <_start+0x1>
    43f4:	|  |  |  |  |                                                move.l d0,-(sp)
    43f6:	|  |  |  |  |                                                jsr 14aa0 <setVariable>
    43fc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4400:	|  |  |  |  +----------------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4404:	|  |  |  |  |                                                moveq #28,d0
    4406:	|  |  |  |  |                                                add.l 80(sp),d0
    440a:	|  |  |  |  |                                                movea.l 80(sp),a0
    440e:	|  |  |  |  |                                                movea.l 20(a0),a0
    4412:	|  |  |  |  |                                                move.l 68(sp),d1
    4416:	|  |  |  |  |                                                lsl.l #3,d1
    4418:	|  |  |  |  |                                                add.l a0,d1
    441a:	|  |  |  |  |                                                move.l d0,-(sp)
    441c:	|  |  |  |  |                                                move.l d1,-(sp)
    441e:	|  |  |  |  |                                                jsr 14668 <copyVariable>
    4424:	|  |  |  |  |                                                addq.l #8,sp
    4426:	|  |  |  |  |                                                tst.w d0
    4428:	|  |  |  |  |  /-------------------------------------------- bne.w 4f64 <continueFunction+0xe66>
    442c:	|  |  |  |  |  |                                             clr.w d0
    442e:	|  +--|--|--|--|-------------------------------------------- bra.w 4fa8 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4432:	|  |  |  |  |  |                                             moveq #28,d0
    4434:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4438:	|  |  |  |  |  |                                             move.l d0,-(sp)
    443a:	|  |  |  |  |  |                                             jsr 146ee <getBoolean>
    4440:	|  |  |  |  |  |                                             addq.l #4,sp
    4442:	|  |  |  |  |  |                                             tst.w d0
    4444:	|  |  |  |  |  |                                      /----- beq.s 4460 <continueFunction+0x362>
    4446:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    444a:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    444e:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4450:	|  |  |  |  |  |                                      |      jsr 146ee <getBoolean>
    4456:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4458:	|  |  |  |  |  |                                      |      tst.w d0
    445a:	|  |  |  |  |  |                                      +----- beq.s 4460 <continueFunction+0x362>
    445c:	|  |  |  |  |  |                                      |      moveq #1,d0
    445e:	|  |  |  |  |  |                                      |  /-- bra.s 4462 <continueFunction+0x364>
    4460:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4462:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4464:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4468:	|  |  |  |  |  |                                             move.l d0,-(sp)
    446a:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    446e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4470:	|  |  |  |  |  |                                             jsr 14aa0 <setVariable>
    4476:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    447a:	|  |  |  |  |  |                                             moveq #24,d0
    447c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4480:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4482:	|  |  |  |  |  |                                             jsr 14b32 <trimStack>
    4488:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    448a:	|  |  |  |  +--|-------------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    448e:	|  |  |  |  |  |                                             moveq #28,d0
    4490:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4494:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4496:	|  |  |  |  |  |                                             jsr 146ee <getBoolean>
    449c:	|  |  |  |  |  |                                             addq.l #4,sp
    449e:	|  |  |  |  |  |                                             tst.w d0
    44a0:	|  |  |  |  |  |                                         /-- bne.s 44b8 <continueFunction+0x3ba>
    44a2:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    44a6:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    44aa:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    44ac:	|  |  |  |  |  |                                         |   jsr 146ee <getBoolean>
    44b2:	|  |  |  |  |  |                                         |   addq.l #4,sp
    44b4:	|  |  |  |  |  |                                         |   tst.w d0
    44b6:	|  |  |  |  |  |                                      /--|-- beq.s 44bc <continueFunction+0x3be>
    44b8:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    44ba:	|  |  |  |  |  |                                      |  /-- bra.s 44be <continueFunction+0x3c0>
    44bc:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    44be:	|  |  |  |  |  |                                         \-> moveq #28,d1
    44c0:	|  |  |  |  |  |                                             add.l 80(sp),d1
    44c4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    44c6:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    44ca:	|  |  |  |  |  |                                             move.l d1,-(sp)
    44cc:	|  |  |  |  |  |                                             jsr 14aa0 <setVariable>
    44d2:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    44d6:	|  |  |  |  |  |                                             moveq #24,d0
    44d8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    44dc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    44de:	|  |  |  |  |  |                                             jsr 14b32 <trimStack>
    44e4:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    44e6:	|  |  |  |  +--|-------------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    44ea:	|  |  |  |  |  |                                             move.l 68(sp),d1
    44ee:	|  |  |  |  |  |                                             moveq #28,d0
    44f0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    44f4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    44f6:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    44fa:	|  |  |  |  |  |                                             move.l d0,-(sp)
    44fc:	|  |  |  |  |  |                                             jsr 14aa0 <setVariable>
    4502:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4506:	|  |  |  |  +--|-------------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    450a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    450e:	|  |  |  |  |  |                                             moveq #28,d0
    4510:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4514:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4516:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    451a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    451c:	|  |  |  |  |  |                                             jsr 14aa0 <setVariable>
    4522:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4526:	|  |  |  |  +--|-------------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    452a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    452e:	|  |  |  |  |  |                                             moveq #28,d0
    4530:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4534:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4536:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    453a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    453c:	|  |  |  |  |  |                                             jsr 14aa0 <setVariable>
    4542:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4546:	|  |  |  |  +--|-------------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    454a:	|  |  |  |  |  |                                             move.l 1a702 <dialogValue>,d0
    4550:	|  |  |  |  |  |                                             moveq #1,d1
    4552:	|  |  |  |  |  |                                             cmp.l d0,d1
    4554:	|  |  |  |  |  |  /----------------------------------------- beq.w 4f68 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4558:	|  |  |  |  |  |  |                                          pea 1811a <PutChar+0xa9a>
    455e:	|  |  |  |  |  |  |                                          jsr 16bac <KPrintF>
    4564:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4566:	|  |  |  |  |  |  |                                          clr.w d0
    4568:	|  +--|--|--|--|--|----------------------------------------- bra.w 4fa8 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    456c:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4570:	|  |  |  |  |  |  |                                          moveq #28,d0
    4572:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4576:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4578:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    457a:	|  |  |  |  |  |  |                                          jsr 14232 <loadStringToVar>
    4580:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4582:	|  |  |  |  |  |  |                                          tst.w d0
    4584:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 4f6c <continueFunction+0xe6e>
					return FALSE;
    4588:	|  |  |  |  |  |  |  |                                       clr.w d0
    458a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4fa8 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    458e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4592:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4596:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4598:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    459a:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    459c:	|  |  |  |  |  |  |  |                                /----- beq.s 45fa <continueFunction+0x4fc>
    459e:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    45a0:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    45a2:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 478e <continueFunction+0x690>
    45a6:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    45a8:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 45b4 <continueFunction+0x4b6>
    45aa:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    45ac:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    45ae:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 45fa <continueFunction+0x4fc>
    45b0:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 478e <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    45b4:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    45b6:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    45ba:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 45e6 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    45bc:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    45be:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    45c2:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    45c4:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    45c6:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    45c8:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14aa0 <setVariable>
    45ce:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    45d2:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    45d4:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    45d8:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    45da:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14b32 <trimStack>
    45e0:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    45e2:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 47a4 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    45e6:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1815b <PutChar+0xadb>
    45ec:	|  |  |  |  |  |  |  |              |  |              |      jsr 16bac <KPrintF>
    45f2:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    45f4:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    45f6:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 4fa8 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    45fa:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    45fe:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4602:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4606:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4608:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 461e <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    460a:	|  |  |  |  |  |  |  |              |  |                 |   pea 18197 <PutChar+0xb17>
    4610:	|  |  |  |  |  |  |  |              |  |                 |   jsr 16bac <KPrintF>
    4616:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4618:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    461a:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4fa8 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    461e:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4620:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4624:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4626:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    462a:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    462e:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4630:	|  |  |  |  |  |  |  |              |  |                     jsr 141ae <getValueType>
    4636:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    463a:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    463c:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4644 <continueFunction+0x546>
    463e:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4640:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4fa8 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4644:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4648:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    464c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    464e:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4650:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4652:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4674 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4654:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4658:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    465a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    465e:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4662:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4666:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4668:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    466a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13e38 <fastArrayGetByIndex>
    4670:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4672:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4694 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4674:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4678:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    467a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    467e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4682:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4686:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4688:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    468a:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    468c:	|  |  |  |  |  |  |  |              |  |              |      jsr 14ac2 <stackGetByIndex>
    4692:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4694:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4698:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    469a:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    469e:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    46a0:	|  |  |  |  |  |  |  |              |  |                     jsr 14b32 <trimStack>
    46a6:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    46a8:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    46ac:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 46c8 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    46ae:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    46b0:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    46b4:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    46b6:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    46b8:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    46ba:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14aa0 <setVariable>
    46c0:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    46c4:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 47a2 <continueFunction+0x6a4>
    46c8:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    46ca:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    46ce:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 46dc <continueFunction+0x5de>
    46d0:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    46d2:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    46d6:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4726 <continueFunction+0x628>
    46d8:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 476e <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    46dc:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    46e0:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    46e4:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    46e8:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    46ea:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 141ae <getValueType>
    46f0:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    46f4:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    46f6:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 46fe <continueFunction+0x600>
    46f8:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    46fa:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 4788 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    46fe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4700:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4702:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4706:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4708:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    470c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    470e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14aa0 <setVariable>
    4714:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4718:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    471a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    471c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4720:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4724:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 478c <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4726:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    472a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    472e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4732:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4734:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 141ae <getValueType>
    473a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    473e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4740:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4746 <continueFunction+0x648>
    4742:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4744:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4788 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4746:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4748:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    474a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    474e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4750:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4754:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4756:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14aa0 <setVariable>
    475c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4760:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4762:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4764:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4768:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    476c:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 478c <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    476e:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    4770:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4774:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4776:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    477a:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14668 <copyVariable>
    4780:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4782:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4784:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 47a2 <continueFunction+0x6a4>
    4786:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4788:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 4fa8 <continueFunction+0xeaa>
				break;
    478c:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 47a2 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    478e:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 181b5 <PutChar+0xb35>
    4794:	|  |  |  |  |  |  |  |                 |  |                  jsr 16bac <KPrintF>
    479a:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    479c:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    479e:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 4fa8 <continueFunction+0xeaa>
				break;
    47a2:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    47a4:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 4f86 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    47a8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    47ac:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    47b0:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    47b2:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    47b4:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    47b6:	|  |  |  |  |  |  |  |                                   /-- beq.s 47c4 <continueFunction+0x6c6>
    47b8:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    47ba:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    47bc:	|  |  |  |  |  |  |  |                                /--|-- beq.w 4870 <continueFunction+0x772>
    47c0:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 48ce <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    47c4:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    47c8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    47cc:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    47d0:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    47d2:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 47e8 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    47d4:	|  |  |  |  |  |  |  |                             |  |  |   pea 18197 <PutChar+0xb17>
    47da:	|  |  |  |  |  |  |  |                             |  |  |   jsr 16bac <KPrintF>
    47e0:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    47e2:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    47e4:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4fa8 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    47e8:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    47ea:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    47ee:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    47f0:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    47f4:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    47f8:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    47fa:	|  |  |  |  |  |  |  |                             |  |      jsr 141ae <getValueType>
    4800:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4804:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4806:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 480e <continueFunction+0x710>
    4808:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    480a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4fa8 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    480e:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4812:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4816:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    481a:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    481c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    4820:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4822:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4826:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    482a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    482e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4830:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4832:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4834:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4836:	|  |  |  |  |  |  |  |                             |  |      jsr 631e <stackSetByIndex>
    483c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4840:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4842:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 484a <continueFunction+0x74c>
						return FALSE;
    4844:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4846:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4fa8 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    484a:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    484c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4850:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4852:	|  |  |  |  |  |  |  |                             |  |      jsr 14b32 <trimStack>
    4858:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    485a:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    485c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4860:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4862:	|  |  |  |  |  |  |  |                             |  |      jsr 14b32 <trimStack>
    4868:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    486a:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    486c:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 4f86 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    4870:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    4872:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    4876:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    4878:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    487c:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    4880:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    4882:	|  |  |  |  |  |  |  |                             |         jsr 141ae <getValueType>
    4888:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    488c:	|  |  |  |  |  |  |  |                             |         tst.w d0
    488e:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4896 <continueFunction+0x798>
    4890:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    4892:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 4fa8 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    4896:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    489a:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    489c:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    48a0:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    48a4:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    48a8:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    48aa:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    48ac:	|  |  |  |  |  |  |  |                             |         jsr 13e38 <fastArrayGetByIndex>
    48b2:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    48b4:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    48b8:	|  |  |  |  |  |  |  |                             |     /-- bne.s 48c8 <continueFunction+0x7ca>
    48ba:	|  |  |  |  |  |  |  |                             |     |   pea 181d9 <PutChar+0xb59>
    48c0:	|  |  |  |  |  |  |  |                             |     |   jsr 16bac <KPrintF>
    48c6:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    48c8:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    48ca:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 4fa8 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    48ce:	|  |  |  |  |  |  |  |                             \-------> pea 181b5 <PutChar+0xb35>
    48d4:	|  |  |  |  |  |  |  |                                       jsr 16bac <KPrintF>
    48da:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    48dc:	|  |  |  |  |  |  |  |                                       clr.w d0
    48de:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4fa8 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    48e2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    48e6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    48ea:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    48ee:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    48f0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    48f2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    48f4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    48f8:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    48fc:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    48fe:	|  |  |  |  |  |  |  |                                       jsr 141ae <getValueType>
    4904:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4908:	|  |  |  |  |  |  |  |                                       tst.w d0
    490a:	|  |  |  |  |  |  |  |                                   /-- bne.s 4912 <continueFunction+0x814>
    490c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    490e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4fa8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4912:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    4916:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4918:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    491c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    491e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4922:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4924:	|  |  |  |  |  |  |  |                                       jsr 14aa0 <setVariable>
    492a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    492e:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    4932:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4934:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4936:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    493a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    493e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4942:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4944:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4946:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4948:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    494c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    494e:	|  |  |  |  |  |  |  |                                       jsr 14aa0 <setVariable>
    4954:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4958:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    495c:	|  |  |  |  |  |  |  |                                       move.l 1a750 <globalVars>,d1
    4962:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4966:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4968:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    496a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    496c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4970:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    4974:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4976:	|  |  |  |  |  |  |  |                                       jsr 141ae <getValueType>
    497c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4980:	|  |  |  |  |  |  |  |                                       tst.w d0
    4982:	|  |  |  |  |  |  |  |                                   /-- bne.s 498a <continueFunction+0x88c>
    4984:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4986:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4fa8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    498a:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    498e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4990:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4994:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4996:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    499a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    499c:	|  |  |  |  |  |  |  |                                       jsr 14aa0 <setVariable>
    49a2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    49a6:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    49aa:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    49ac:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    49ae:	|  |  |  |  |  |  |  |                                       movea.l 1a750 <globalVars>,a0
    49b4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    49b8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    49ba:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    49bc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    49be:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    49c2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    49c4:	|  |  |  |  |  |  |  |                                       jsr 14aa0 <setVariable>
    49ca:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    49ce:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    49d2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    49d6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    49da:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    49de:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    49e0:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    49e2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    49e4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    49e8:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    49ec:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    49ee:	|  |  |  |  |  |  |  |                                       jsr 141ae <getValueType>
    49f4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    49f8:	|  |  |  |  |  |  |  |                                       tst.w d0
    49fa:	|  |  |  |  |  |  |  |                                   /-- bne.s 4a02 <continueFunction+0x904>
    49fc:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    49fe:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4fa8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4a02:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    4a06:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4a08:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4a0c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4a0e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a12:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a14:	|  |  |  |  |  |  |  |                                       jsr 14aa0 <setVariable>
    4a1a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    4a1e:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    4a22:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4a24:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4a26:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4a2a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4a2e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4a32:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4a34:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4a36:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4a38:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a3c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a3e:	|  |  |  |  |  |  |  |                                       jsr 14aa0 <setVariable>
    4a44:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4a48:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4a4c:	|  |  |  |  |  |  |  |                                       move.l 1a750 <globalVars>,d1
    4a52:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4a56:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4a58:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4a5a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a5c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a60:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    4a64:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4a66:	|  |  |  |  |  |  |  |                                       jsr 141ae <getValueType>
    4a6c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4a70:	|  |  |  |  |  |  |  |                                       tst.w d0
    4a72:	|  |  |  |  |  |  |  |                                   /-- bne.s 4a7a <continueFunction+0x97c>
    4a74:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4a76:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4fa8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4a7a:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    4a7e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4a80:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4a84:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4a86:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a8a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a8c:	|  |  |  |  |  |  |  |                                       jsr 14aa0 <setVariable>
    4a92:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    4a96:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    4a9a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4a9c:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4a9e:	|  |  |  |  |  |  |  |                                       movea.l 1a750 <globalVars>,a0
    4aa4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4aa8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4aaa:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4aac:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4aae:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4ab2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4ab4:	|  |  |  |  |  |  |  |                                       jsr 14aa0 <setVariable>
    4aba:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4abe:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    4ac2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4ac6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4aca:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4ace:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4ad0:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    4ad2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4ad4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4ad8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4ada:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4adc:	|  |  |  |  |  |  |  |                                       jsr 14668 <copyVariable>
    4ae2:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    4ae4:	|  |  |  |  |  |  |  |                                       tst.w d0
    4ae6:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 4f70 <continueFunction+0xe72>
    4aea:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    4aec:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 4fa8 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    4af0:	|  |  |  |  |  |  |  |  |                                    move.l 1a750 <globalVars>,d1
    4af6:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    4afa:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    4afc:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    4afe:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    4b00:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    4b04:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    4b06:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    4b08:	|  |  |  |  |  |  |  |  |                                    jsr 14668 <copyVariable>
    4b0e:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    4b10:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    4b12:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 4f74 <continueFunction+0xe76>
    4b16:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    4b18:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 4fa8 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    4b1c:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    4b1e:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    4b22:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1a750 <globalVars>,a0
    4b28:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    4b2c:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    4b2e:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    4b30:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    4b32:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    4b34:	|  |  |  |  |  |  |  |  |  |                                 jsr 14668 <copyVariable>
    4b3a:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    4b3c:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    4b3e:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 4f78 <continueFunction+0xe7a>
    4b42:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    4b44:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 4fa8 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    4b48:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    4b4a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    4b4e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    4b50:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    4b54:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    4b56:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    4b58:	|  |  |  |  |  |  |  |  |  |  |                              jsr 139ea <addVarToStack>
    4b5e:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    4b60:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    4b62:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 4f7c <continueFunction+0xe7e>
    4b66:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    4b68:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 4fa8 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    4b6c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    4b6e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    4b72:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    4b74:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    4b78:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    4b7a:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    4b7c:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13a70 <addVarToStackQuick>
    4b82:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    4b84:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    4b86:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 4f80 <continueFunction+0xe82>
    4b8a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    4b8c:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 4fa8 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    4b90:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4b92:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4b96:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4b98:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 146ee <getBoolean>
    4b9e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4ba0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4ba2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    4ba4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    4ba6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    4ba8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    4baa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4bac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4bb0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    4bb2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    4bb6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4bb8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14aa0 <setVariable>
    4bbe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    4bc2:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    4bc6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4bc8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4bcc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4bce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 146ee <getBoolean>
    4bd4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4bd6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4bd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 4f84 <continueFunction+0xe86>
				advanceNow = FALSE;
    4bdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    4be0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4be4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    4bea:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 4f84 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    4bee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    4bf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4bf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    4bfc:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4f86 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    4c00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    4c02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    4c06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    4c08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    4c0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    4c10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    4c12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 141ae <getValueType>
    4c18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    4c1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    4c1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 4c26 <continueFunction+0xb28>
    4c20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    4c22:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 4fa8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    4c26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    4c2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    4c2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    4c2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    4c30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    4c34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    4c36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    4c3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    4c3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14aa0 <setVariable>
    4c42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    4c46:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4f86 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    4c4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4c4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    4c52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 4f3c <continueFunction+0xe3e>
    4c56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    4c58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    4c5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 4cd8 <continueFunction+0xbda>
    4c5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    4c60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    4c64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 4d22 <continueFunction+0xc24>
    4c68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    4c6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    4c6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 4c7c <continueFunction+0xb7e>
    4c70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    4c72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    4c76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 4caa <continueFunction+0xbac>
    4c78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 4d22 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    4c7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    4c7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4c82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    4c86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    4c8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    4c8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    4c8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13ae4 <addVariablesInSecond>
    4c94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    4c96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    4c98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4c9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    4c9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14b32 <trimStack>
    4ca4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    4ca6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 4f50 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4caa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    4cac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4cb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    4cb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    4cb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4cba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    4cbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13ba2 <compareVariablesInSecond>
    4cc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    4cc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    4cc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4cca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4ccc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14b32 <trimStack>
    4cd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    4cd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 4f50 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4cd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    4cda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4cde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4ce2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    4ce6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4ce8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    4cea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13ba2 <compareVariablesInSecond>
    4cf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    4cf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    4cf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4cf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4cfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14b32 <trimStack>
    4d00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    4d02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4d06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    4d0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    4d0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    4d0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    4d10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    4d16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    4d1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 4f50 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    4d22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    4d26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    4d2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4d30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    4d34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    4d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 141ae <getValueType>
    4d3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4d40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4d42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 4d4a <continueFunction+0xc4c>
    4d44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    4d46:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4fa8 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    4d4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    4d4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4d50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4d52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4d56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    4d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    4d5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 141ae <getValueType>
    4d62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4d66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4d68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 4d70 <continueFunction+0xc72>
    4d6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    4d6c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4fa8 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    4d70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    4d72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4d76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4d78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14b32 <trimStack>
    4d7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    4d80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    4d82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    4d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    4d88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    4d8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 4f4e <continueFunction+0xe50>
    4d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    4d90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    4d92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #19870,a0
    4d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    4d9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (4d9e <continueFunction+0xca0>,pc,d0.w)
    4d9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    4da2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    4da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4dac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    4dae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4db6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4dbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    4dc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    4dce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4dd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4dd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4dda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1756a <__mulsi3>
    4de0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4de2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4de4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4de6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4dea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4dec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4df0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4df2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14aa0 <setVariable>
    4df8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4dfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f50 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    4e00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4e04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4e08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    4e0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4e0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4e10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4e16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14aa0 <setVariable>
    4e1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4e22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f50 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    4e26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4e2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4e2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17616 <__modsi3>
    4e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4e3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4e42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4e48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14aa0 <setVariable>
    4e50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4e54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f50 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    4e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4e5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4e60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 175e8 <__divsi3>
    4e6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4e6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14aa0 <setVariable>
    4e82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4e86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f50 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    4e8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4e8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4e92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    4e96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4e9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4ea4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14aa0 <setVariable>
    4eb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4eb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f50 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    4eb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4ebc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4ec0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    4ec4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4ed2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4ed8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14aa0 <setVariable>
    4ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4ee2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4f50 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    4ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    4ef0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4efe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14aa0 <setVariable>
    4f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4f50 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    4f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    4f1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4f28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4f2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14aa0 <setVariable>
    4f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4f50 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    4f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 181fa <PutChar+0xb7a>
    4f42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 16bac <KPrintF>
    4f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    4f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    4f4c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 4fa8 <continueFunction+0xeaa>
						break;
    4f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    4f50:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 4f86 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    4f52:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 18212 <PutChar+0xb92>
    4f58:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 16bac <KPrintF>
    4f5e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    4f60:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    4f62:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 4fa8 <continueFunction+0xeaa>
			break;
    4f64:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    4f66:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 4f86 <continueFunction+0xe88>
			break;
    4f68:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    4f6a:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 4f86 <continueFunction+0xe88>
			break;
    4f6c:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    4f6e:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 4f86 <continueFunction+0xe88>
			break;
    4f70:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    4f72:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 4f86 <continueFunction+0xe88>
			break;
    4f74:	|  |  |     |              \--|--|--|--|-------------------> nop
    4f76:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 4f86 <continueFunction+0xe88>
			break;
    4f78:	|  |  |     |                 \--|--|--|-------------------> nop
    4f7a:	|  |  |     +--------------------|--|--|-------------------- bra.s 4f86 <continueFunction+0xe88>
			break;
    4f7c:	|  |  |     |                    \--|--|-------------------> nop
    4f7e:	|  |  |     +-----------------------|--|-------------------- bra.s 4f86 <continueFunction+0xe88>
			break;
    4f80:	|  |  |     |                       \--|-------------------> nop
    4f82:	|  |  |     +--------------------------|-------------------- bra.s 4f86 <continueFunction+0xe88>
			break;
    4f84:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    4f86:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    4f8a:	+--|--|----------------------------------------------------- beq.s 4f9e <continueFunction+0xea0>
    4f8c:	|  |  |                                                      movea.l 80(sp),a0
    4f90:	|  |  |                                                      move.l 36(a0),d0
    4f94:	|  |  |                                                      addq.l #1,d0
    4f96:	|  |  |                                                      movea.l 80(sp),a0
    4f9a:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    4f9e:	\--|--|----------------------------------------------------> tst.w 74(sp)
    4fa2:	   |  \----------------------------------------------------- bne.w 4126 <continueFunction+0x28>

	}
	return TRUE;
    4fa6:	   |                                                         moveq #1,d0
}
    4fa8:	   \-------------------------------------------------------> lea 76(sp),sp
    4fac:	                                                             rts

00004fae <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    4fae:	          lea -16(sp),sp
    4fb2:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4fb4:	          move.l 24(sp),-(sp)
    4fb8:	          jsr 60d4 <pauseFunction>
    4fbe:	          addq.l #4,sp
	if (fun -> stack) 
    4fc0:	          movea.l 24(sp),a0
    4fc4:	          move.l 24(a0),d0
    4fc8:	      /-- beq.s 4fdc <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    4fca:	      |   pea 1823e <PutChar+0xbbe>
    4fd0:	      |   jsr 16bac <KPrintF>
    4fd6:	      |   addq.l #4,sp
		return;
    4fd8:	/-----|-- bra.w 5076 <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    4fdc:	|     \-> movea.l 24(sp),a0
    4fe0:	|         move.l 4(a0),12(sp)
    4fe6:	|         move.l 1a7a2 <SysBase>,d0
    4fec:	|         movea.l d0,a6
    4fee:	|         movea.l 12(sp),a1
    4ff2:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4ff6:	|         clr.l 16(sp)
    4ffa:	|     /-- bra.s 501a <finishFunction+0x6c>
    4ffc:	|  /--|-> movea.l 24(sp),a0
    5000:	|  |  |   move.l 20(a0),d1
    5004:	|  |  |   move.l 16(sp),d0
    5008:	|  |  |   lsl.l #3,d0
    500a:	|  |  |   add.l d1,d0
    500c:	|  |  |   move.l d0,-(sp)
    500e:	|  |  |   jsr 143fc <unlinkVar>
    5014:	|  |  |   addq.l #4,sp
    5016:	|  |  |   addq.l #1,16(sp)
    501a:	|  |  \-> movea.l 24(sp),a0
    501e:	|  |      move.l 8(a0),d0
    5022:	|  |      cmp.l 16(sp),d0
    5026:	|  \----- bgt.s 4ffc <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    5028:	|         movea.l 24(sp),a0
    502c:	|         move.l 8(a0),d0
    5030:	|     /-- ble.s 504c <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    5032:	|     |   movea.l 24(sp),a0
    5036:	|     |   move.l 20(a0),8(sp)
    503c:	|     |   move.l 1a7a2 <SysBase>,d0
    5042:	|     |   movea.l d0,a6
    5044:	|     |   movea.l 8(sp),a1
    5048:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    504c:	|     \-> moveq #28,d0
    504e:	|         add.l 24(sp),d0
    5052:	|         move.l d0,-(sp)
    5054:	|         jsr 143fc <unlinkVar>
    505a:	|         addq.l #4,sp
	FreeVec(fun);
    505c:	|         move.l 24(sp),4(sp)
    5062:	|         move.l 1a7a2 <SysBase>,d0
    5068:	|         movea.l d0,a6
    506a:	|         movea.l 4(sp),a1
    506e:	|         jsr -690(a6)
	fun = NULL;
    5072:	|         clr.l 24(sp)
}
    5076:	\-------> movea.l (sp)+,a6
    5078:	          lea 16(sp),sp
    507c:	          rts

0000507e <freezeSubs>:

void freezeSubs () {
    507e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5080:	          move.l 1a73a <allRunningFunctions>,(sp)

	while (thisFunction) {
    5086:	   /----- bra.s 50a4 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    5088:	/--|----> movea.l (sp),a0
    508a:	|  |      move.w 52(a0),d0
    508e:	|  |  /-- bne.s 509e <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5090:	|  |  |   movea.l (sp),a0
    5092:	|  |  |   move.b 56(a0),d0
    5096:	|  |  |   addq.b #1,d0
    5098:	|  |  |   movea.l (sp),a0
    509a:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    509e:	|  |  \-> movea.l (sp),a0
    50a0:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    50a4:	|  \----> tst.l (sp)
    50a6:	\-------- bne.s 5088 <freezeSubs+0xa>
	}
}
    50a8:	          nop
    50aa:	          nop
    50ac:	          addq.l #4,sp
    50ae:	          rts

000050b0 <handleInput>:

BOOL handleInput () {
    50b0:	             lea -16(sp),sp
    50b4:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    50b6:	             move.l 1a90e <overRegion>,d0
    50bc:	         /-- bne.s 50c4 <handleInput+0x14>
    50be:	         |   jsr 15348 <getOverRegion>

	if (input.justMoved) {
    50c4:	         \-> move.w 1a758 <input+0x4>,d0
    50ca:	         /-- beq.s 5108 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    50cc:	         |   movea.l 1a11c <currentEvents>,a0
    50d2:	         |   move.l 16(a0),d0
    50d6:	         +-- beq.s 5108 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    50d8:	         |   move.l 1a772 <noStack>,d1
    50de:	         |   movea.l 1a11c <currentEvents>,a0
    50e4:	         |   move.l 16(a0),d0
    50e8:	         |   pea 1 <_start+0x1>
    50ec:	         |   move.l d1,-(sp)
    50ee:	         |   clr.l -(sp)
    50f0:	         |   clr.l -(sp)
    50f2:	         |   move.l d0,-(sp)
    50f4:	         |   jsr 6362 <startNewFunctionNum>
    50fa:	         |   lea 20(sp),sp
    50fe:	         |   tst.l d0
    5100:	         +-- bne.s 5108 <handleInput+0x58>
    5102:	         |   clr.w d0
    5104:	/--------|-- bra.w 530e <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    5108:	|        \-> clr.w 1a758 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    510e:	|            move.l 1a76a <lastRegion>,d1
    5114:	|            move.l 1a90e <overRegion>,d0
    511a:	|            cmp.l d1,d0
    511c:	|  /-------- beq.w 51f4 <handleInput+0x144>
    5120:	|  |         movea.l 1a11c <currentEvents>,a0
    5126:	|  |         move.l 20(a0),d0
    512a:	|  +-------- beq.w 51f4 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    512e:	|  |         moveq #12,d0
    5130:	|  |         move.l d0,16(sp)
    5134:	|  |         clr.l 12(sp)
    5138:	|  |         move.l 1a7a2 <SysBase>,d0
    513e:	|  |         movea.l d0,a6
    5140:	|  |         move.l 16(sp),d0
    5144:	|  |         move.l 12(sp),d1
    5148:	|  |         jsr -684(a6)
    514c:	|  |         move.l d0,8(sp)
    5150:	|  |         move.l 8(sp),d0
    5154:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    5158:	|  |         move.l 4(sp),d0
    515c:	|  |     /-- bne.s 5172 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    515e:	|  |     |   pea 18264 <PutChar+0xbe4>
    5164:	|  |     |   jsr 16bac <KPrintF>
    516a:	|  |     |   addq.l #4,sp
			return FALSE;
    516c:	|  |     |   clr.w d0
    516e:	+--|-----|-- bra.w 530e <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    5172:	|  |     \-> movea.l 4(sp),a0
    5176:	|  |         clr.l (a0)
		if (overRegion) {
    5178:	|  |         move.l 1a90e <overRegion>,d0
    517e:	|  |  /----- beq.s 51a6 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    5180:	|  |  |      movea.l 1a90e <overRegion>,a0
    5186:	|  |  |      movea.l 28(a0),a0
    518a:	|  |  |      move.l 4(a0),d1
    518e:	|  |  |      move.l 4(sp),d0
    5192:	|  |  |      move.l d1,-(sp)
    5194:	|  |  |      pea 7 <_start+0x7>
    5198:	|  |  |      move.l d0,-(sp)
    519a:	|  |  |      jsr 14aa0 <setVariable>
    51a0:	|  |  |      lea 12(sp),sp
    51a4:	|  |  |  /-- bra.s 51bc <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    51a6:	|  |  \--|-> move.l 4(sp),d0
    51aa:	|  |     |   clr.l -(sp)
    51ac:	|  |     |   pea 1 <_start+0x1>
    51b0:	|  |     |   move.l d0,-(sp)
    51b2:	|  |     |   jsr 14aa0 <setVariable>
    51b8:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    51bc:	|  |     \-> movea.l 4(sp),a0
    51c0:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    51c4:	|  |         movea.l 1a11c <currentEvents>,a0
    51ca:	|  |         move.l 20(a0),d0
    51ce:	|  |         pea 1 <_start+0x1>
    51d2:	|  |         lea 8(sp),a0
    51d6:	|  |         move.l a0,-(sp)
    51d8:	|  |         clr.l -(sp)
    51da:	|  |         pea 1 <_start+0x1>
    51de:	|  |         move.l d0,-(sp)
    51e0:	|  |         jsr 6362 <startNewFunctionNum>
    51e6:	|  |         lea 20(sp),sp
    51ea:	|  |         tst.l d0
    51ec:	|  +-------- bne.s 51f4 <handleInput+0x144>
    51ee:	|  |         clr.w d0
    51f0:	+--|-------- bra.w 530e <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    51f4:	|  \-------> move.w 1a75a <input+0x6>,d0
    51fa:	|        /-- beq.s 5238 <handleInput+0x188>
    51fc:	|        |   movea.l 1a11c <currentEvents>,a0
    5202:	|        |   move.l 4(a0),d0
    5206:	|        +-- beq.s 5238 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5208:	|        |   move.l 1a772 <noStack>,d1
    520e:	|        |   movea.l 1a11c <currentEvents>,a0
    5214:	|        |   move.l 4(a0),d0
    5218:	|        |   pea 1 <_start+0x1>
    521c:	|        |   move.l d1,-(sp)
    521e:	|        |   clr.l -(sp)
    5220:	|        |   clr.l -(sp)
    5222:	|        |   move.l d0,-(sp)
    5224:	|        |   jsr 6362 <startNewFunctionNum>
    522a:	|        |   lea 20(sp),sp
    522e:	|        |   tst.l d0
    5230:	|        +-- bne.s 5238 <handleInput+0x188>
    5232:	|        |   clr.w d0
    5234:	+--------|-- bra.w 530e <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    5238:	|        \-> move.w 1a75c <input+0x8>,d0
    523e:	|        /-- beq.s 527c <handleInput+0x1cc>
    5240:	|        |   movea.l 1a11c <currentEvents>,a0
    5246:	|        |   move.l 12(a0),d0
    524a:	|        +-- beq.s 527c <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    524c:	|        |   move.l 1a772 <noStack>,d1
    5252:	|        |   movea.l 1a11c <currentEvents>,a0
    5258:	|        |   move.l 12(a0),d0
    525c:	|        |   pea 1 <_start+0x1>
    5260:	|        |   move.l d1,-(sp)
    5262:	|        |   clr.l -(sp)
    5264:	|        |   clr.l -(sp)
    5266:	|        |   move.l d0,-(sp)
    5268:	|        |   jsr 6362 <startNewFunctionNum>
    526e:	|        |   lea 20(sp),sp
    5272:	|        |   tst.l d0
    5274:	|        +-- bne.s 527c <handleInput+0x1cc>
    5276:	|        |   clr.w d0
    5278:	+--------|-- bra.w 530e <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    527c:	|        \-> move.w 1a754 <input>,d0
    5282:	|        /-- beq.s 52ba <handleInput+0x20a>
    5284:	|        |   movea.l 1a11c <currentEvents>,a0
    528a:	|        |   move.l (a0),d0
    528c:	|        +-- beq.s 52ba <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    528e:	|        |   move.l 1a772 <noStack>,d1
    5294:	|        |   movea.l 1a11c <currentEvents>,a0
    529a:	|        |   move.l (a0),d0
    529c:	|        |   pea 1 <_start+0x1>
    52a0:	|        |   move.l d1,-(sp)
    52a2:	|        |   clr.l -(sp)
    52a4:	|        |   clr.l -(sp)
    52a6:	|        |   move.l d0,-(sp)
    52a8:	|        |   jsr 6362 <startNewFunctionNum>
    52ae:	|        |   lea 20(sp),sp
    52b2:	|        |   tst.l d0
    52b4:	|        +-- bne.s 52ba <handleInput+0x20a>
    52b6:	|        |   clr.w d0
    52b8:	+--------|-- bra.s 530e <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    52ba:	|        \-> move.w 1a756 <input+0x2>,d0
    52c0:	|        /-- beq.s 52fc <handleInput+0x24c>
    52c2:	|        |   movea.l 1a11c <currentEvents>,a0
    52c8:	|        |   move.l 8(a0),d0
    52cc:	|        +-- beq.s 52fc <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    52ce:	|        |   move.l 1a772 <noStack>,d1
    52d4:	|        |   movea.l 1a11c <currentEvents>,a0
    52da:	|        |   move.l 8(a0),d0
    52de:	|        |   pea 1 <_start+0x1>
    52e2:	|        |   move.l d1,-(sp)
    52e4:	|        |   clr.l -(sp)
    52e6:	|        |   clr.l -(sp)
    52e8:	|        |   move.l d0,-(sp)
    52ea:	|        |   jsr 6362 <startNewFunctionNum>
    52f0:	|        |   lea 20(sp),sp
    52f4:	|        |   tst.l d0
    52f6:	|        +-- bne.s 52fc <handleInput+0x24c>
    52f8:	|        |   clr.w d0
    52fa:	+--------|-- bra.s 530e <handleInput+0x25e>
	}

	lastRegion = overRegion;
    52fc:	|        \-> move.l 1a90e <overRegion>,d0
    5302:	|            move.l d0,1a76a <lastRegion>
	return runSludge ();
    5308:	|            jsr 6130 <runSludge>
}
    530e:	\----------> movea.l (sp)+,a6
    5310:	             lea 16(sp),sp
    5314:	             rts

00005316 <initSludge>:

BOOL initSludge (char * filename) {
    5316:	             lea -292(sp),sp
    531a:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    531e:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5322:	             jsr a788 <makeNullAnim>
    5328:	             move.l d0,1a6aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    532e:	             pea 1a74c <gameVersion>
    5334:	             pea 1829a <PutChar+0xc1a>
    533a:	             pea 45 <_start+0x45>
    533e:	             pea 47 <_start+0x47>
    5342:	             move.l 332(sp),-(sp)
    5346:	             jsr 5d64 <openAndVerify>
    534c:	             lea 20(sp),sp
    5350:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5354:	         /-- bne.s 535c <initSludge+0x46>
    5356:	         |   clr.w d0
    5358:	/--------|-- bra.w 5a84 <initSludge+0x76e>
	if (FGetC (fp)) {
    535c:	|        \-> move.l 288(sp),284(sp)
    5362:	|            move.l 1a7aa <DOSBase>,d0
    5368:	|            movea.l d0,a6
    536a:	|            move.l 284(sp),d1
    536e:	|            jsr -306(a6)
    5372:	|            move.l d0,280(sp)
    5376:	|            move.l 280(sp),d0
    537a:	|  /-------- beq.w 5524 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    537e:	|  |         move.l 288(sp),-(sp)
    5382:	|  |         jsr 6bc <get2bytes>
    5388:	|  |         addq.l #4,sp
    538a:	|  |         move.l d0,1a776 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    5390:	|  |         move.l 1a776 <numBIFNames>,d0
    5396:	|  |         move.l d0,276(sp)
    539a:	|  |         clr.l 272(sp)
    539e:	|  |         move.l 1a7a2 <SysBase>,d0
    53a4:	|  |         movea.l d0,a6
    53a6:	|  |         move.l 276(sp),d0
    53aa:	|  |         move.l 272(sp),d1
    53ae:	|  |         jsr -684(a6)
    53b2:	|  |         move.l d0,268(sp)
    53b6:	|  |         move.l 268(sp),d0
    53ba:	|  |         move.l d0,1a732 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    53c0:	|  |         move.l 1a732 <allBIFNames>,d0
    53c6:	|  |     /-- bne.s 53ce <initSludge+0xb8>
    53c8:	|  |     |   clr.w d0
    53ca:	+--|-----|-- bra.w 5a84 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    53ce:	|  |     \-> clr.l 304(sp)
    53d2:	|  |     /-- bra.s 53f8 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    53d4:	|  |  /--|-> move.l 1a732 <allBIFNames>,d1
    53da:	|  |  |  |   move.l 304(sp),d0
    53de:	|  |  |  |   add.l d0,d0
    53e0:	|  |  |  |   add.l d0,d0
    53e2:	|  |  |  |   movea.l d1,a2
    53e4:	|  |  |  |   adda.l d0,a2
    53e6:	|  |  |  |   move.l 288(sp),-(sp)
    53ea:	|  |  |  |   jsr b02 <readString>
    53f0:	|  |  |  |   addq.l #4,sp
    53f2:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    53f4:	|  |  |  |   addq.l #1,304(sp)
    53f8:	|  |  |  \-> move.l 1a776 <numBIFNames>,d0
    53fe:	|  |  |      cmp.l 304(sp),d0
    5402:	|  |  \----- bgt.s 53d4 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5404:	|  |         move.l 288(sp),-(sp)
    5408:	|  |         jsr 6bc <get2bytes>
    540e:	|  |         addq.l #4,sp
    5410:	|  |         move.l d0,1a782 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5416:	|  |         move.l 1a782 <numUserFunc>,d0
    541c:	|  |         move.l d0,264(sp)
    5420:	|  |         clr.l 260(sp)
    5424:	|  |         move.l 1a7a2 <SysBase>,d0
    542a:	|  |         movea.l d0,a6
    542c:	|  |         move.l 264(sp),d0
    5430:	|  |         move.l 260(sp),d1
    5434:	|  |         jsr -684(a6)
    5438:	|  |         move.l d0,256(sp)
    543c:	|  |         move.l 256(sp),d0
    5440:	|  |         move.l d0,1a73e <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5446:	|  |         move.l 1a73e <allUserFunc>,d0
    544c:	|  |     /-- bne.s 5454 <initSludge+0x13e>
    544e:	|  |     |   clr.w d0
    5450:	+--|-----|-- bra.w 5a84 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5454:	|  |     \-> clr.l 300(sp)
    5458:	|  |     /-- bra.s 547e <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    545a:	|  |  /--|-> move.l 1a73e <allUserFunc>,d1
    5460:	|  |  |  |   move.l 300(sp),d0
    5464:	|  |  |  |   add.l d0,d0
    5466:	|  |  |  |   add.l d0,d0
    5468:	|  |  |  |   movea.l d1,a2
    546a:	|  |  |  |   adda.l d0,a2
    546c:	|  |  |  |   move.l 288(sp),-(sp)
    5470:	|  |  |  |   jsr b02 <readString>
    5476:	|  |  |  |   addq.l #4,sp
    5478:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    547a:	|  |  |  |   addq.l #1,300(sp)
    547e:	|  |  |  \-> move.l 1a782 <numUserFunc>,d0
    5484:	|  |  |      cmp.l 300(sp),d0
    5488:	|  |  \----- bgt.s 545a <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    548a:	|  |         move.l 1a74c <gameVersion>,d0
    5490:	|  |         cmpi.l #258,d0
    5496:	|  +-------- ble.w 5524 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    549a:	|  |         move.l 288(sp),-(sp)
    549e:	|  |         jsr 6bc <get2bytes>
    54a4:	|  |         addq.l #4,sp
    54a6:	|  |         move.l d0,1a77e <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    54ac:	|  |         move.l 1a77e <numResourceNames>,d0
    54b2:	|  |         add.l d0,d0
    54b4:	|  |         add.l d0,d0
    54b6:	|  |         move.l d0,252(sp)
    54ba:	|  |         clr.l 248(sp)
    54be:	|  |         move.l 1a7a2 <SysBase>,d0
    54c4:	|  |         movea.l d0,a6
    54c6:	|  |         move.l 252(sp),d0
    54ca:	|  |         move.l 248(sp),d1
    54ce:	|  |         jsr -684(a6)
    54d2:	|  |         move.l d0,244(sp)
    54d6:	|  |         move.l 244(sp),d0
    54da:	|  |         move.l d0,1a736 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    54e0:	|  |         move.l 1a736 <allResourceNames>,d0
    54e6:	|  |     /-- bne.s 54ee <initSludge+0x1d8>
    54e8:	|  |     |   clr.w d0
    54ea:	+--|-----|-- bra.w 5a84 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    54ee:	|  |     \-> clr.l 296(sp)
    54f2:	|  |     /-- bra.s 5518 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    54f4:	|  |  /--|-> move.l 1a736 <allResourceNames>,d1
    54fa:	|  |  |  |   move.l 296(sp),d0
    54fe:	|  |  |  |   add.l d0,d0
    5500:	|  |  |  |   add.l d0,d0
    5502:	|  |  |  |   movea.l d1,a2
    5504:	|  |  |  |   adda.l d0,a2
    5506:	|  |  |  |   move.l 288(sp),-(sp)
    550a:	|  |  |  |   jsr b02 <readString>
    5510:	|  |  |  |   addq.l #4,sp
    5512:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5514:	|  |  |  |   addq.l #1,296(sp)
    5518:	|  |  |  \-> move.l 1a77e <numResourceNames>,d0
    551e:	|  |  |      cmp.l 296(sp),d0
    5522:	|  |  \----- bgt.s 54f4 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5524:	|  \-------> move.l #129,1a75e <input+0xa>
	input.mouseY = 100;
    552e:	|            moveq #100,d0
    5530:	|            move.l d0,1a762 <input+0xe>
	winWidth = get2bytes (fp);
    5536:	|            move.l 288(sp),-(sp)
    553a:	|            jsr 6bc <get2bytes>
    5540:	|            addq.l #4,sp
    5542:	|            move.l d0,1a6f6 <winWidth>
	winHeight = get2bytes (fp);
    5548:	|            move.l 288(sp),-(sp)
    554c:	|            jsr 6bc <get2bytes>
    5552:	|            addq.l #4,sp
    5554:	|            move.l d0,1a6fa <winHeight>
	specialSettings = FGetC (fp);
    555a:	|            move.l 288(sp),240(sp)
    5560:	|            move.l 1a7aa <DOSBase>,d0
    5566:	|            movea.l d0,a6
    5568:	|            move.l 240(sp),d1
    556c:	|            jsr -306(a6)
    5570:	|            move.l d0,236(sp)
    5574:	|            move.l 236(sp),d0
    5578:	|            move.l d0,1a786 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    557e:	|            move.l 288(sp),232(sp)
    5584:	|            move.l 1a7aa <DOSBase>,d0
    558a:	|            movea.l d0,a6
    558c:	|            move.l 232(sp),d1
    5590:	|            jsr -306(a6)
    5594:	|            move.l d0,228(sp)
    5598:	|            move.l 228(sp),d0
    559c:	|            move.l d0,-(sp)
    559e:	|            pea 3e8 <encodeFilename+0xea>
    55a2:	|            jsr 175e8 <__divsi3>
    55a8:	|            addq.l #8,sp
    55aa:	|            move.l d0,1a132 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    55b0:	|            move.l 288(sp),-(sp)
    55b4:	|            jsr b02 <readString>
    55ba:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    55bc:	|            move.l 288(sp),224(sp)
    55c2:	|            move.l #108356,220(sp)
    55ca:	|            moveq #8,d1
    55cc:	|            move.l d1,216(sp)
    55d0:	|            moveq #1,d0
    55d2:	|            move.l d0,212(sp)
    55d6:	|            move.l 1a7aa <DOSBase>,d0
    55dc:	|            movea.l d0,a6
    55de:	|            move.l 224(sp),d1
    55e2:	|            move.l 220(sp),d2
    55e6:	|            move.l 216(sp),d3
    55ea:	|            move.l 212(sp),d4
    55ee:	|            jsr -324(a6)
    55f2:	|            move.l d0,208(sp)
    55f6:	|            move.l 208(sp),d0
    55fa:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    55fe:	|            moveq #1,d1
    5600:	|            cmp.l 204(sp),d1
    5604:	|        /-- beq.s 5614 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5606:	|        |   pea 182d3 <PutChar+0xc53>
    560c:	|        |   jsr 16bac <KPrintF>
    5612:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5614:	|        \-> move.l 1a74c <gameVersion>,d0
    561a:	|            cmpi.l #258,d0
    5620:	|        /-- ble.s 5630 <initSludge+0x31a>
    5622:	|        |   move.l 288(sp),-(sp)
    5626:	|        |   jsr b02 <readString>
    562c:	|        |   addq.l #4,sp
    562e:	|     /--|-- bra.s 5644 <initSludge+0x32e>
    5630:	|     |  \-> pea 182f1 <PutChar+0xc71>
    5636:	|     |      pea 182f1 <PutChar+0xc71>
    563c:	|     |      jsr 136da <joinStrings>
    5642:	|     |      addq.l #8,sp
    5644:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5648:	|            move.l 1a74c <gameVersion>,d0
    564e:	|            cmpi.l #258,d0
    5654:	|     /----- ble.s 5676 <initSludge+0x360>
    5656:	|     |      move.l 288(sp),196(sp)
    565c:	|     |      move.l 1a7aa <DOSBase>,d0
    5662:	|     |      movea.l d0,a6
    5664:	|     |      move.l 196(sp),d1
    5668:	|     |      jsr -306(a6)
    566c:	|     |      move.l d0,192(sp)
    5670:	|     |      move.l 192(sp),d0
    5674:	|     |  /-- bra.s 5678 <initSludge+0x362>
    5676:	|     \--|-> moveq #0,d0
    5678:	|        \-> move.l d0,1a8da <gameSettings+0x4>
	makeLanguageTable (fp);
    567e:	|            move.l 288(sp),-(sp)
    5682:	|            jsr 13090 <makeLanguageTable>
    5688:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    568a:	|            move.l 1a74c <gameVersion>,d0
    5690:	|            cmpi.l #261,d0
    5696:	|        /-- ble.s 56e4 <initSludge+0x3ce>
	{
		FGetC(fp);
    5698:	|        |   move.l 288(sp),188(sp)
    569e:	|        |   move.l 1a7aa <DOSBase>,d0
    56a4:	|        |   movea.l d0,a6
    56a6:	|        |   move.l 188(sp),d1
    56aa:	|        |   jsr -306(a6)
    56ae:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    56b2:	|        |   move.l 288(sp),180(sp)
    56b8:	|        |   move.l 1a7aa <DOSBase>,d0
    56be:	|        |   movea.l d0,a6
    56c0:	|        |   move.l 180(sp),d1
    56c4:	|        |   jsr -306(a6)
    56c8:	|        |   move.l d0,176(sp)
		getFloat (fp);
    56cc:	|        |   move.l 288(sp),-(sp)
    56d0:	|        |   jsr 7d8 <getFloat>
    56d6:	|        |   addq.l #4,sp
		getFloat (fp);
    56d8:	|        |   move.l 288(sp),-(sp)
    56dc:	|        |   jsr 7d8 <getFloat>
    56e2:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    56e4:	|        \-> move.l 288(sp),-(sp)
    56e8:	|            jsr b02 <readString>
    56ee:	|            addq.l #4,sp
    56f0:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    56f4:	|            pea 182f2 <PutChar+0xc72>
    56fa:	|            move.l 176(sp),-(sp)
    56fe:	|            jsr 1365a <strcmp>
    5704:	|            addq.l #8,sp
    5706:	|            tst.l d0
    5708:	|        /-- beq.s 5710 <initSludge+0x3fa>
		return FALSE;
    570a:	|        |   clr.w d0
    570c:	+--------|-- bra.w 5a84 <initSludge+0x76e>
	}
	FreeVec( checker);
    5710:	|        \-> move.l 172(sp),168(sp)
    5716:	|            move.l 1a7a2 <SysBase>,d0
    571c:	|            movea.l d0,a6
    571e:	|            movea.l 168(sp),a1
    5722:	|            jsr -690(a6)
	checker = NULL;
    5726:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    572a:	|            move.l 288(sp),164(sp)
    5730:	|            move.l 1a7aa <DOSBase>,d0
    5736:	|            movea.l d0,a6
    5738:	|            move.l 164(sp),d1
    573c:	|            jsr -306(a6)
    5740:	|            move.l d0,160(sp)
    5744:	|            move.l 160(sp),d0
    5748:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    574c:	|            moveq #0,d0
    574e:	|            move.b 159(sp),d0
    5752:	|            moveq #1,d1
    5754:	|            and.l d1,d0
    5756:	|        /-- beq.s 57ae <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5758:	|        |   move.l 1a7aa <DOSBase>,d0
    575e:	|        |   movea.l d0,a6
    5760:	|        |   jsr -60(a6)
    5764:	|        |   move.l d0,38(sp)
    5768:	|        |   move.l 38(sp),d0
    576c:	|        |   move.l d0,34(sp)
    5770:	|        |   move.l #99066,30(sp)
    5778:	|        |   moveq #54,d0
    577a:	|        |   move.l d0,26(sp)
    577e:	|        |   move.l 1a7aa <DOSBase>,d0
    5784:	|        |   movea.l d0,a6
    5786:	|        |   move.l 34(sp),d1
    578a:	|        |   move.l 30(sp),d2
    578e:	|        |   move.l 26(sp),d3
    5792:	|        |   jsr -48(a6)
    5796:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    579a:	|        |   pea 18331 <PutChar+0xcb1>
    57a0:	|        |   jsr 16bac <KPrintF>
    57a6:	|        |   addq.l #4,sp
		return FALSE;
    57a8:	|        |   clr.w d0
    57aa:	+--------|-- bra.w 5a84 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    57ae:	|        \-> move.l 288(sp),-(sp)
    57b2:	|            jsr 6bc <get2bytes>
    57b8:	|            addq.l #4,sp
    57ba:	|            move.l d0,1a77a <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    57c0:	|            move.l 1a77a <numGlobals>,d0
    57c6:	|            lsl.l #3,d0
    57c8:	|            move.l d0,154(sp)
    57cc:	|            clr.l 150(sp)
    57d0:	|            move.l 1a7a2 <SysBase>,d0
    57d6:	|            movea.l d0,a6
    57d8:	|            move.l 154(sp),d0
    57dc:	|            move.l 150(sp),d1
    57e0:	|            jsr -684(a6)
    57e4:	|            move.l d0,146(sp)
    57e8:	|            move.l 146(sp),d0
    57ec:	|            move.l d0,1a750 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    57f2:	|            move.l 1a750 <globalVars>,d0
    57f8:	|        /-- bne.s 5816 <initSludge+0x500>
    57fa:	|        |   move.l 1a77a <numGlobals>,d0
    5800:	|        +-- ble.s 5816 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5802:	|        |   pea 18369 <PutChar+0xce9>
    5808:	|        |   jsr 16bac <KPrintF>
    580e:	|        |   addq.l #4,sp
		return FALSE;
    5810:	|        |   clr.w d0
    5812:	+--------|-- bra.w 5a84 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5816:	|        \-> clr.l 308(sp)
    581a:	|        /-- bra.s 5832 <initSludge+0x51c>
    581c:	|     /--|-> move.l 1a750 <globalVars>,d1
    5822:	|     |  |   move.l 308(sp),d0
    5826:	|     |  |   lsl.l #3,d0
    5828:	|     |  |   movea.l d1,a0
    582a:	|     |  |   adda.l d0,a0
    582c:	|     |  |   clr.l (a0)
    582e:	|     |  |   addq.l #1,308(sp)
    5832:	|     |  \-> move.l 1a77a <numGlobals>,d0
    5838:	|     |      cmp.l 308(sp),d0
    583c:	|     \----- bgt.s 581c <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    583e:	|            move.l 1a8da <gameSettings+0x4>,d0
    5844:	|            clr.l -(sp)
    5846:	|            move.l d0,-(sp)
    5848:	|            move.l 296(sp),-(sp)
    584c:	|            jsr 6852 <setFileIndices>
    5852:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    5856:	|            pea 1 <_start+0x1>
    585a:	|            jsr 650c <getNumberedString>
    5860:	|            addq.l #4,sp
    5862:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    5866:	|            move.l 142(sp),-(sp)
    586a:	|            jsr 2fe <encodeFilename>
    5870:	|            addq.l #4,sp
    5872:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    5876:	|            move.l 142(sp),134(sp)
    587c:	|            move.l 1a7a2 <SysBase>,d0
    5882:	|            movea.l d0,a6
    5884:	|            movea.l 134(sp),a1
    5888:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    588c:	|            move.l 138(sp),130(sp)
    5892:	|            move.l 1a7aa <DOSBase>,d0
    5898:	|            movea.l d0,a6
    589a:	|            move.l 130(sp),d1
    589e:	|            jsr -120(a6)
    58a2:	|            move.l d0,126(sp)
    58a6:	|            move.l 126(sp),d0
    58aa:	|            move.l d0,292(sp)
	if(lock == 0) {
    58ae:	|        /-- bne.s 58dc <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    58b0:	|        |   move.l 138(sp),122(sp)
    58b6:	|        |   moveq #-2,d1
    58b8:	|        |   move.l d1,118(sp)
    58bc:	|        |   move.l 1a7aa <DOSBase>,d0
    58c2:	|        |   movea.l d0,a6
    58c4:	|        |   move.l 122(sp),d1
    58c8:	|        |   move.l 118(sp),d2
    58cc:	|        |   jsr -84(a6)
    58d0:	|        |   move.l d0,114(sp)
    58d4:	|        |   move.l 114(sp),d0
    58d8:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    58dc:	|        \-> move.l 292(sp),110(sp)
    58e2:	|            move.l 1a7aa <DOSBase>,d0
    58e8:	|            movea.l d0,a6
    58ea:	|            move.l 110(sp),d1
    58ee:	|            jsr -126(a6)
    58f2:	|            move.l d0,106(sp)
    58f6:	|            move.l 106(sp),d0
    58fa:	|        /-- bne.s 5956 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    58fc:	|        |   move.l 138(sp),-(sp)
    5900:	|        |   pea 1839c <PutChar+0xd1c>
    5906:	|        |   jsr 16bac <KPrintF>
    590c:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    590e:	|        |   move.l 1a7aa <DOSBase>,d0
    5914:	|        |   movea.l d0,a6
    5916:	|        |   jsr -60(a6)
    591a:	|        |   move.l d0,58(sp)
    591e:	|        |   move.l 58(sp),d0
    5922:	|        |   move.l d0,54(sp)
    5926:	|        |   move.l #99273,50(sp)
    592e:	|        |   moveq #40,d0
    5930:	|        |   move.l d0,46(sp)
    5934:	|        |   move.l 1a7aa <DOSBase>,d0
    593a:	|        |   movea.l d0,a6
    593c:	|        |   move.l 54(sp),d1
    5940:	|        |   move.l 50(sp),d2
    5944:	|        |   move.l 46(sp),d3
    5948:	|        |   jsr -48(a6)
    594c:	|        |   move.l d0,42(sp)
		return FALSE;
    5950:	|        |   clr.w d0
    5952:	+--------|-- bra.w 5a84 <initSludge+0x76e>
	}

	FreeVec(gameName);
    5956:	|        \-> move.l 138(sp),102(sp)
    595c:	|            move.l 1a7a2 <SysBase>,d0
    5962:	|            movea.l d0,a6
    5964:	|            movea.l 102(sp),a1
    5968:	|            jsr -690(a6)

	readIniFile (filename);
    596c:	|            move.l 316(sp),-(sp)
    5970:	|            jsr 131c4 <readIniFile>
    5976:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    5978:	|            jsr 12f96 <getLanguageForFileB>
    597e:	|            move.l d0,1a120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    5984:	|            move.l 1a120 <languageNum>,d0
    598a:	|        /-- bpl.s 599a <initSludge+0x684>
    598c:	|        |   pea 183f2 <PutChar+0xd72>
    5992:	|        |   jsr 16bac <KPrintF>
    5998:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    599a:	|        \-> move.l 1a120 <languageNum>,d0
    59a0:	|            move.l d0,d1
    59a2:	|            move.l 1a8da <gameSettings+0x4>,d0
    59a8:	|            move.l d1,-(sp)
    59aa:	|            move.l d0,-(sp)
    59ac:	|            clr.l -(sp)
    59ae:	|            jsr 6852 <setFileIndices>
    59b4:	|            lea 12(sp),sp

	if (dataFol[0]) {
    59b8:	|            movea.l 200(sp),a0
    59bc:	|            move.b (a0),d0
    59be:	|     /----- beq.w 5a68 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    59c2:	|     |      move.l 200(sp),-(sp)
    59c6:	|     |      jsr 2fe <encodeFilename>
    59cc:	|     |      addq.l #4,sp
    59ce:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    59d2:	|     |      move.l 98(sp),94(sp)
    59d8:	|     |      move.l 1a7aa <DOSBase>,d0
    59de:	|     |      movea.l d0,a6
    59e0:	|     |      move.l 94(sp),d1
    59e4:	|     |      jsr -120(a6)
    59e8:	|     |      move.l d0,90(sp)
    59ec:	|     |      move.l 90(sp),d0
    59f0:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    59f4:	|     |  /-- bne.s 5a22 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    59f6:	|     |  |   move.l 98(sp),86(sp)
    59fc:	|     |  |   moveq #-2,d1
    59fe:	|     |  |   move.l d1,82(sp)
    5a02:	|     |  |   move.l 1a7aa <DOSBase>,d0
    5a08:	|     |  |   movea.l d0,a6
    5a0a:	|     |  |   move.l 86(sp),d1
    5a0e:	|     |  |   move.l 82(sp),d2
    5a12:	|     |  |   jsr -84(a6)
    5a16:	|     |  |   move.l d0,78(sp)
    5a1a:	|     |  |   move.l 78(sp),d0
    5a1e:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    5a22:	|     |  \-> move.l 292(sp),74(sp)
    5a28:	|     |      move.l 1a7aa <DOSBase>,d0
    5a2e:	|     |      movea.l d0,a6
    5a30:	|     |      move.l 74(sp),d1
    5a34:	|     |      jsr -126(a6)
    5a38:	|     |      move.l d0,70(sp)
    5a3c:	|     |      move.l 70(sp),d0
    5a40:	|     |  /-- bne.s 5a52 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    5a42:	|     |  |   move.l 1a7aa <DOSBase>,d0
    5a48:	|     |  |   movea.l d0,a6
    5a4a:	|     |  |   jsr -60(a6)
    5a4e:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    5a52:	|     |  \-> move.l 98(sp),62(sp)
    5a58:	|     |      move.l 1a7a2 <SysBase>,d0
    5a5e:	|     |      movea.l d0,a6
    5a60:	|     |      movea.l 62(sp),a1
    5a64:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    5a68:	|     \----> movea.l 1a6fa <winHeight>,a0
    5a6e:	|            lea -15(a0),a0
    5a72:	|            move.l a0,d0
    5a74:	|            move.l d0,-(sp)
    5a76:	|            pea a <_start+0xa>
    5a7a:	|            jsr 7284 <positionStatus>
    5a80:	|            addq.l #8,sp

	return TRUE;
    5a82:	|            moveq #1,d0
}
    5a84:	\----------> movem.l (sp)+,d2-d4/a2/a6
    5a88:	             lea 292(sp),sp
    5a8c:	             rts

00005a8e <killSpeechTimers>:

void killSpeechTimers () {
    5a8e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5a90:	          move.l 1a73a <allRunningFunctions>,(sp)

	while (thisFunction) {
    5a96:	   /----- bra.s 5ac2 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5a98:	/--|----> movea.l (sp),a0
    5a9a:	|  |      move.b 56(a0),d0
    5a9e:	|  |  /-- bne.s 5abc <killSpeechTimers+0x2e>
    5aa0:	|  |  |   movea.l (sp),a0
    5aa2:	|  |  |   move.w 50(a0),d0
    5aa6:	|  |  +-- beq.s 5abc <killSpeechTimers+0x2e>
    5aa8:	|  |  |   movea.l (sp),a0
    5aaa:	|  |  |   move.l 12(a0),d0
    5aae:	|  |  +-- beq.s 5abc <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    5ab0:	|  |  |   movea.l (sp),a0
    5ab2:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    5ab6:	|  |  |   movea.l (sp),a0
    5ab8:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    5abc:	|  |  \-> movea.l (sp),a0
    5abe:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5ac2:	|  \----> tst.l (sp)
    5ac4:	\-------- bne.s 5a98 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    5ac6:	          jsr 77c2 <killAllSpeech>
}
    5acc:	          nop
    5ace:	          addq.l #4,sp
    5ad0:	          rts

00005ad2 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    5ad2:	             lea -52(sp),sp
    5ad6:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    5ad8:	             movea.l 60(sp),a0
    5adc:	             move.l (a0),d0
    5ade:	             move.l d0,-(sp)
    5ae0:	             jsr 6792 <openSubSlice>
    5ae6:	             addq.l #4,sp
    5ae8:	             tst.w d0
    5aea:	         /-- bne.s 5af2 <loadFunctionCode+0x20>
    5aec:	         |   clr.w d0
    5aee:	/--------|-- bra.w 5cbc <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    5af2:	|        \-> move.l 1a78a <bigDataFile>,44(sp)
    5afa:	|            move.l 1a7aa <DOSBase>,d0
    5b00:	|            movea.l d0,a6
    5b02:	|            move.l 44(sp),d1
    5b06:	|            jsr -306(a6)
    5b0a:	|            move.l d0,40(sp)
    5b0e:	|            move.l 40(sp),d0
    5b12:	|            move.l d0,d0
    5b14:	|            movea.l 60(sp),a0
    5b18:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    5b1c:	|            move.l 1a78a <bigDataFile>,d0
    5b22:	|            move.l d0,-(sp)
    5b24:	|            jsr 6bc <get2bytes>
    5b2a:	|            addq.l #4,sp
    5b2c:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    5b30:	|            move.l 1a78a <bigDataFile>,d0
    5b36:	|            move.l d0,-(sp)
    5b38:	|            jsr 6bc <get2bytes>
    5b3e:	|            addq.l #4,sp
    5b40:	|            movea.l 60(sp),a0
    5b44:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    5b48:	|            move.l 1a78a <bigDataFile>,d0
    5b4e:	|            move.l d0,-(sp)
    5b50:	|            jsr 6bc <get2bytes>
    5b56:	|            addq.l #4,sp
    5b58:	|            movea.l 60(sp),a0
    5b5c:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    5b60:	|            move.l 36(sp),d0
    5b64:	|            lsl.l #3,d0
    5b66:	|            move.l d0,32(sp)
    5b6a:	|            clr.l 28(sp)
    5b6e:	|            move.l 1a7a2 <SysBase>,d0
    5b74:	|            movea.l d0,a6
    5b76:	|            move.l 32(sp),d0
    5b7a:	|            move.l 28(sp),d1
    5b7e:	|            jsr -684(a6)
    5b82:	|            move.l d0,24(sp)
    5b86:	|            move.l 24(sp),d0
    5b8a:	|            movea.l 60(sp),a0
    5b8e:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    5b92:	|            movea.l 60(sp),a0
    5b96:	|            move.l 4(a0),d0
    5b9a:	|        /-- bne.s 5bb0 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    5b9c:	|        |   pea 1841d <PutChar+0xd9d>
    5ba2:	|        |   jsr 16bac <KPrintF>
    5ba8:	|        |   addq.l #4,sp
		return FALSE;
    5baa:	|        |   clr.w d0
    5bac:	+--------|-- bra.w 5cbc <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5bb0:	|        \-> clr.l 52(sp)
    5bb4:	|        /-- bra.s 5c16 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    5bb6:	|     /--|-> move.l 1a78a <bigDataFile>,8(sp)
    5bbe:	|     |  |   move.l 1a7aa <DOSBase>,d0
    5bc4:	|     |  |   movea.l d0,a6
    5bc6:	|     |  |   move.l 8(sp),d1
    5bca:	|     |  |   jsr -306(a6)
    5bce:	|     |  |   move.l d0,4(sp)
    5bd2:	|     |  |   move.l 4(sp),d1
    5bd6:	|     |  |   movea.l 60(sp),a0
    5bda:	|     |  |   movea.l 4(a0),a0
    5bde:	|     |  |   move.l 52(sp),d0
    5be2:	|     |  |   lsl.l #3,d0
    5be4:	|     |  |   adda.l d0,a0
    5be6:	|     |  |   move.l d1,d0
    5be8:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    5bea:	|     |  |   move.l 1a78a <bigDataFile>,d0
    5bf0:	|     |  |   move.l d0,-(sp)
    5bf2:	|     |  |   jsr 6bc <get2bytes>
    5bf8:	|     |  |   addq.l #4,sp
    5bfa:	|     |  |   move.l d0,d1
    5bfc:	|     |  |   movea.l 60(sp),a0
    5c00:	|     |  |   movea.l 4(a0),a0
    5c04:	|     |  |   move.l 52(sp),d0
    5c08:	|     |  |   lsl.l #3,d0
    5c0a:	|     |  |   adda.l d0,a0
    5c0c:	|     |  |   move.l d1,d0
    5c0e:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5c12:	|     |  |   addq.l #1,52(sp)
    5c16:	|     |  \-> move.l 52(sp),d0
    5c1a:	|     |      cmp.l 36(sp),d0
    5c1e:	|     \----- bcs.s 5bb6 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    5c20:	|            jsr 6502 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    5c26:	|            movea.l 60(sp),a0
    5c2a:	|            move.l 8(a0),d0
    5c2e:	|  /-------- ble.w 5cb2 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    5c32:	|  |         movea.l 60(sp),a0
    5c36:	|  |         move.l 8(a0),d0
    5c3a:	|  |         lsl.l #3,d0
    5c3c:	|  |         move.l d0,20(sp)
    5c40:	|  |         clr.l 16(sp)
    5c44:	|  |         move.l 1a7a2 <SysBase>,d0
    5c4a:	|  |         movea.l d0,a6
    5c4c:	|  |         move.l 20(sp),d0
    5c50:	|  |         move.l 16(sp),d1
    5c54:	|  |         jsr -684(a6)
    5c58:	|  |         move.l d0,12(sp)
    5c5c:	|  |         move.l 12(sp),d0
    5c60:	|  |         movea.l 60(sp),a0
    5c64:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    5c68:	|  |         movea.l 60(sp),a0
    5c6c:	|  |         move.l 20(a0),d0
    5c70:	|  |     /-- bne.s 5c84 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    5c72:	|  |     |   pea 1841d <PutChar+0xd9d>
    5c78:	|  |     |   jsr 16bac <KPrintF>
    5c7e:	|  |     |   addq.l #4,sp
			return FALSE;
    5c80:	|  |     |   clr.w d0
    5c82:	+--|-----|-- bra.s 5cbc <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    5c84:	|  |     \-> clr.l 48(sp)
    5c88:	|  |     /-- bra.s 5ca2 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    5c8a:	|  |  /--|-> movea.l 60(sp),a0
    5c8e:	|  |  |  |   move.l 20(a0),d1
    5c92:	|  |  |  |   move.l 48(sp),d0
    5c96:	|  |  |  |   lsl.l #3,d0
    5c98:	|  |  |  |   movea.l d1,a0
    5c9a:	|  |  |  |   adda.l d0,a0
    5c9c:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    5c9e:	|  |  |  |   addq.l #1,48(sp)
    5ca2:	|  |  |  \-> movea.l 60(sp),a0
    5ca6:	|  |  |      move.l 8(a0),d0
    5caa:	|  |  |      cmp.l 48(sp),d0
    5cae:	|  |  \----- bgt.s 5c8a <loadFunctionCode+0x1b8>
    5cb0:	|  |     /-- bra.s 5cba <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    5cb2:	|  \-----|-> movea.l 60(sp),a0
    5cb6:	|        |   clr.l 8(a0)
	}
	return TRUE;
    5cba:	|        \-> moveq #1,d0
}
    5cbc:	\----------> movea.l (sp)+,a6
    5cbe:	             lea 52(sp),sp
    5cc2:	             rts

00005cc4 <loadHandlers>:

void loadHandlers (BPTR fp) {
    5cc4:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    5cc6:	movea.l 1a11c <currentEvents>,a2
    5ccc:	move.l 8(sp),-(sp)
    5cd0:	jsr 6bc <get2bytes>
    5cd6:	addq.l #4,sp
    5cd8:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    5cda:	movea.l 1a11c <currentEvents>,a2
    5ce0:	move.l 8(sp),-(sp)
    5ce4:	jsr 6bc <get2bytes>
    5cea:	addq.l #4,sp
    5cec:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    5cf0:	movea.l 1a11c <currentEvents>,a2
    5cf6:	move.l 8(sp),-(sp)
    5cfa:	jsr 6bc <get2bytes>
    5d00:	addq.l #4,sp
    5d02:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    5d06:	movea.l 1a11c <currentEvents>,a2
    5d0c:	move.l 8(sp),-(sp)
    5d10:	jsr 6bc <get2bytes>
    5d16:	addq.l #4,sp
    5d18:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    5d1c:	movea.l 1a11c <currentEvents>,a2
    5d22:	move.l 8(sp),-(sp)
    5d26:	jsr 6bc <get2bytes>
    5d2c:	addq.l #4,sp
    5d2e:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    5d32:	movea.l 1a11c <currentEvents>,a2
    5d38:	move.l 8(sp),-(sp)
    5d3c:	jsr 6bc <get2bytes>
    5d42:	addq.l #4,sp
    5d44:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    5d48:	movea.l 1a11c <currentEvents>,a2
    5d4e:	move.l 8(sp),-(sp)
    5d52:	jsr 6bc <get2bytes>
    5d58:	addq.l #4,sp
    5d5a:	move.l d0,24(a2)
}
    5d5e:	nop
    5d60:	movea.l (sp)+,a2
    5d62:	rts

00005d64 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    5d64:	       lea -312(sp),sp
    5d68:	       movem.l d2-d3/a6,-(sp)
    5d6c:	       move.l 332(sp),d1
    5d70:	       move.l 336(sp),d0
    5d74:	       move.b d1,d1
    5d76:	       move.b d1,16(sp)
    5d7a:	       move.b d0,d0
    5d7c:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    5d80:	       move.l 328(sp),318(sp)
    5d86:	       move.l #1005,314(sp)
    5d8e:	       move.l 1a7aa <DOSBase>,d0
    5d94:	       movea.l d0,a6
    5d96:	       move.l 318(sp),d1
    5d9a:	       move.l 314(sp),d2
    5d9e:	       jsr -30(a6)
    5da2:	       move.l d0,310(sp)
    5da6:	       move.l 310(sp),d0
    5daa:	       move.l d0,306(sp)

	if (! fp) {
    5dae:	   /-- bne.s 5e0a <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    5db0:	   |   move.l 1a7aa <DOSBase>,d0
    5db6:	   |   movea.l d0,a6
    5db8:	   |   jsr -60(a6)
    5dbc:	   |   move.l d0,154(sp)
    5dc0:	   |   move.l 154(sp),d0
    5dc4:	   |   move.l d0,150(sp)
    5dc8:	   |   move.l #99398,146(sp)
    5dd0:	   |   moveq #31,d0
    5dd2:	   |   move.l d0,142(sp)
    5dd6:	   |   move.l 1a7aa <DOSBase>,d0
    5ddc:	   |   movea.l d0,a6
    5dde:	   |   move.l 150(sp),d1
    5de2:	   |   move.l 146(sp),d2
    5de6:	   |   move.l 142(sp),d3
    5dea:	   |   jsr -48(a6)
    5dee:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    5df2:	   |   move.l 328(sp),-(sp)
    5df6:	   |   pea 18466 <PutChar+0xde6>
    5dfc:	   |   jsr 16bac <KPrintF>
    5e02:	   |   addq.l #8,sp
		return NULL;
    5e04:	   |   moveq #0,d0
    5e06:	/--|-- bra.w 60ca <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    5e0a:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    5e0e:	|      move.l 306(sp),302(sp)
    5e14:	|      move.l 1a7aa <DOSBase>,d0
    5e1a:	|      movea.l d0,a6
    5e1c:	|      move.l 302(sp),d1
    5e20:	|      jsr -306(a6)
    5e24:	|      move.l d0,298(sp)
    5e28:	|      move.l 298(sp),d0
    5e2c:	|      moveq #83,d1
    5e2e:	|      cmp.l d0,d1
    5e30:	|  /-- beq.s 5e38 <openAndVerify+0xd4>
    5e32:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    5e38:	|  \-> move.l 306(sp),294(sp)
    5e3e:	|      move.l 1a7aa <DOSBase>,d0
    5e44:	|      movea.l d0,a6
    5e46:	|      move.l 294(sp),d1
    5e4a:	|      jsr -306(a6)
    5e4e:	|      move.l d0,290(sp)
    5e52:	|      move.l 290(sp),d0
    5e56:	|      moveq #76,d1
    5e58:	|      cmp.l d0,d1
    5e5a:	|  /-- beq.s 5e62 <openAndVerify+0xfe>
    5e5c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    5e62:	|  \-> move.l 306(sp),286(sp)
    5e68:	|      move.l 1a7aa <DOSBase>,d0
    5e6e:	|      movea.l d0,a6
    5e70:	|      move.l 286(sp),d1
    5e74:	|      jsr -306(a6)
    5e78:	|      move.l d0,282(sp)
    5e7c:	|      move.l 282(sp),d0
    5e80:	|      moveq #85,d1
    5e82:	|      cmp.l d0,d1
    5e84:	|  /-- beq.s 5e8c <openAndVerify+0x128>
    5e86:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    5e8c:	|  \-> move.l 306(sp),278(sp)
    5e92:	|      move.l 1a7aa <DOSBase>,d0
    5e98:	|      movea.l d0,a6
    5e9a:	|      move.l 278(sp),d1
    5e9e:	|      jsr -306(a6)
    5ea2:	|      move.l d0,274(sp)
    5ea6:	|      move.l 274(sp),d0
    5eaa:	|      moveq #68,d1
    5eac:	|      cmp.l d0,d1
    5eae:	|  /-- beq.s 5eb6 <openAndVerify+0x152>
    5eb0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    5eb6:	|  \-> move.l 306(sp),270(sp)
    5ebc:	|      move.l 1a7aa <DOSBase>,d0
    5ec2:	|      movea.l d0,a6
    5ec4:	|      move.l 270(sp),d1
    5ec8:	|      jsr -306(a6)
    5ecc:	|      move.l d0,266(sp)
    5ed0:	|      move.l 266(sp),d1
    5ed4:	|      move.b 16(sp),d0
    5ed8:	|      ext.w d0
    5eda:	|      movea.w d0,a0
    5edc:	|      cmpa.l d1,a0
    5ede:	|  /-- beq.s 5ee6 <openAndVerify+0x182>
    5ee0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    5ee6:	|  \-> move.l 306(sp),262(sp)
    5eec:	|      move.l 1a7aa <DOSBase>,d0
    5ef2:	|      movea.l d0,a6
    5ef4:	|      move.l 262(sp),d1
    5ef8:	|      jsr -306(a6)
    5efc:	|      move.l d0,258(sp)
    5f00:	|      move.l 258(sp),d1
    5f04:	|      move.b 14(sp),d0
    5f08:	|      ext.w d0
    5f0a:	|      movea.w d0,a0
    5f0c:	|      cmpa.l d1,a0
    5f0e:	|  /-- beq.s 5f16 <openAndVerify+0x1b2>
    5f10:	|  |   move.w #1,322(sp)
	if (headerBad) {
    5f16:	|  \-> tst.w 322(sp)
    5f1a:	|  /-- beq.s 5f72 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    5f1c:	|  |   move.l 1a7aa <DOSBase>,d0
    5f22:	|  |   movea.l d0,a6
    5f24:	|  |   jsr -60(a6)
    5f28:	|  |   move.l d0,174(sp)
    5f2c:	|  |   move.l 174(sp),d0
    5f30:	|  |   move.l d0,170(sp)
    5f34:	|  |   move.l #99461,166(sp)
    5f3c:	|  |   moveq #31,d0
    5f3e:	|  |   move.l d0,162(sp)
    5f42:	|  |   move.l 1a7aa <DOSBase>,d0
    5f48:	|  |   movea.l d0,a6
    5f4a:	|  |   move.l 170(sp),d1
    5f4e:	|  |   move.l 166(sp),d2
    5f52:	|  |   move.l 162(sp),d3
    5f56:	|  |   jsr -48(a6)
    5f5a:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    5f5e:	|  |   pea 18485 <PutChar+0xe05>
    5f64:	|  |   jsr 16bac <KPrintF>
    5f6a:	|  |   addq.l #4,sp
		return NULL;
    5f6c:	|  |   moveq #0,d0
    5f6e:	+--|-- bra.w 60ca <openAndVerify+0x366>
	}
	FGetC (fp);
    5f72:	|  \-> move.l 306(sp),254(sp)
    5f78:	|      move.l 1a7aa <DOSBase>,d0
    5f7e:	|      movea.l d0,a6
    5f80:	|      move.l 254(sp),d1
    5f84:	|      jsr -306(a6)
    5f88:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    5f8c:	|      nop
    5f8e:	|  /-> move.l 306(sp),246(sp)
    5f94:	|  |   move.l 1a7aa <DOSBase>,d0
    5f9a:	|  |   movea.l d0,a6
    5f9c:	|  |   move.l 246(sp),d1
    5fa0:	|  |   jsr -306(a6)
    5fa4:	|  |   move.l d0,242(sp)
    5fa8:	|  |   move.l 242(sp),d0
    5fac:	|  \-- bne.s 5f8e <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    5fae:	|      move.l 306(sp),238(sp)
    5fb4:	|      move.l 1a7aa <DOSBase>,d0
    5fba:	|      movea.l d0,a6
    5fbc:	|      move.l 238(sp),d1
    5fc0:	|      jsr -306(a6)
    5fc4:	|      move.l d0,234(sp)
    5fc8:	|      move.l 234(sp),d0
    5fcc:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    5fd0:	|      move.l 306(sp),226(sp)
    5fd6:	|      move.l 1a7aa <DOSBase>,d0
    5fdc:	|      movea.l d0,a6
    5fde:	|      move.l 226(sp),d1
    5fe2:	|      jsr -306(a6)
    5fe6:	|      move.l d0,222(sp)
    5fea:	|      move.l 222(sp),d0
    5fee:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    5ff2:	|      move.l 230(sp),d0
    5ff6:	|      lsl.l #8,d0
    5ff8:	|      add.l 218(sp),d0
    5ffc:	|      movea.l 344(sp),a0
    6000:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6002:	|      movea.l 344(sp),a0
    6006:	|      move.l (a0),d0
    6008:	|      cmpi.l #514,d0
    600e:	|  /-- ble.s 6064 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6010:	|  |   move.l 1a7aa <DOSBase>,d0
    6016:	|  |   movea.l d0,a6
    6018:	|  |   jsr -60(a6)
    601c:	|  |   move.l d0,194(sp)
    6020:	|  |   move.l 194(sp),d0
    6024:	|  |   move.l d0,190(sp)
    6028:	|  |   move.l #99488,186(sp)
    6030:	|  |   moveq #100,d1
    6032:	|  |   move.l d1,182(sp)
    6036:	|  |   move.l 1a7aa <DOSBase>,d0
    603c:	|  |   movea.l d0,a6
    603e:	|  |   move.l 190(sp),d1
    6042:	|  |   move.l 186(sp),d2
    6046:	|  |   move.l 182(sp),d3
    604a:	|  |   jsr -48(a6)
    604e:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    6052:	|  |   pea 184a0 <PutChar+0xe20>
    6058:	|  |   jsr 16bac <KPrintF>
    605e:	|  |   addq.l #4,sp
		return NULL;
    6060:	|  |   moveq #0,d0
    6062:	+--|-- bra.s 60ca <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    6064:	|  \-> movea.l 344(sp),a0
    6068:	|      move.l (a0),d0
    606a:	|      cmpi.l #257,d0
    6070:	|  /-- bgt.s 60c6 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6072:	|  |   move.l 1a7aa <DOSBase>,d0
    6078:	|  |   movea.l d0,a6
    607a:	|  |   jsr -60(a6)
    607e:	|  |   move.l d0,214(sp)
    6082:	|  |   move.l 214(sp),d0
    6086:	|  |   move.l d0,210(sp)
    608a:	|  |   move.l #99557,206(sp)
    6092:	|  |   moveq #100,d0
    6094:	|  |   move.l d0,202(sp)
    6098:	|  |   move.l 1a7aa <DOSBase>,d0
    609e:	|  |   movea.l d0,a6
    60a0:	|  |   move.l 210(sp),d1
    60a4:	|  |   move.l 206(sp),d2
    60a8:	|  |   move.l 202(sp),d3
    60ac:	|  |   jsr -48(a6)
    60b0:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    60b4:	|  |   pea 184e5 <PutChar+0xe65>
    60ba:	|  |   jsr 16bac <KPrintF>
    60c0:	|  |   addq.l #4,sp
		return NULL;
    60c2:	|  |   moveq #0,d0
    60c4:	+--|-- bra.s 60ca <openAndVerify+0x366>
	}
	return fp;
    60c6:	|  \-> move.l 306(sp),d0
}
    60ca:	\----> movem.l (sp)+,d2-d3/a6
    60ce:	       lea 312(sp),sp
    60d2:	       rts

000060d4 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    60d4:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    60d6:	          move.l #108346,(sp)
	while (* huntAndDestroy) {
    60dc:	   /----- bra.s 6108 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    60de:	/--|----> movea.l (sp),a0
    60e0:	|  |      move.l (a0),d0
    60e2:	|  |      cmp.l 8(sp),d0
    60e6:	|  |  /-- bne.s 60fe <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    60e8:	|  |  |   movea.l (sp),a0
    60ea:	|  |  |   movea.l (a0),a0
    60ec:	|  |  |   move.l 44(a0),d0
    60f0:	|  |  |   movea.l (sp),a0
    60f2:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    60f4:	|  |  |   movea.l 8(sp),a0
    60f8:	|  |  |   clr.l 44(a0)
    60fc:	|  +--|-- bra.s 6108 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    60fe:	|  |  \-> movea.l (sp),a0
    6100:	|  |      move.l (a0),d0
    6102:	|  |      moveq #44,d1
    6104:	|  |      add.l d0,d1
    6106:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    6108:	|  \----> movea.l (sp),a0
    610a:	|         move.l (a0),d0
    610c:	\-------- bne.s 60de <pauseFunction+0xa>
		}
	}
}
    610e:	          nop
    6110:	          nop
    6112:	          addq.l #4,sp
    6114:	          rts

00006116 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    6116:	move.l 1a73a <allRunningFunctions>,d0
    611c:	movea.l 4(sp),a0
    6120:	move.l d0,44(a0)
	allRunningFunctions = fun;
    6124:	move.l 4(sp),1a73a <allRunningFunctions>
}
    612c:	nop
    612e:	rts

00006130 <runSludge>:

BOOL runSludge () {
    6130:	                   lea -12(sp),sp
    6134:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    6136:	                   move.l 1a73a <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    613e:	      /----------- bra.s 61ba <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    6140:	   /--|----------> movea.l 12(sp),a0
    6144:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    614a:	   |  |            movea.l 12(sp),a0
    614e:	   |  |            move.b 56(a0),d0
    6152:	   |  |  /-------- bne.s 61b4 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    6154:	   |  |  |         movea.l 12(sp),a0
    6158:	   |  |  |         move.l 12(a0),d0
    615c:	   |  |  |  /----- beq.s 6186 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    615e:	   |  |  |  |      movea.l 12(sp),a0
    6162:	   |  |  |  |      move.l 12(a0),d0
    6166:	   |  |  |  |  /-- bpl.s 6172 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    6168:	   |  |  |  |  |   movea.l 12(sp),a0
    616c:	   |  |  |  |  |   clr.l 12(a0)
    6170:	   |  |  +--|--|-- bra.s 61b4 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    6172:	   |  |  |  |  \-> movea.l 12(sp),a0
    6176:	   |  |  |  |      move.l 12(a0),d0
    617a:	   |  |  |  |      subq.l #1,d0
    617c:	   |  |  |  |      movea.l 12(sp),a0
    6180:	   |  |  |  |      move.l d0,12(a0)
    6184:	   |  |  +--|----- bra.s 61b4 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    6186:	   |  |  |  \----> movea.l 12(sp),a0
    618a:	   |  |  |         move.w 50(a0),d0
    618e:	   |  |  |     /-- beq.s 619e <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    6190:	   |  |  |     |   movea.l 12(sp),a0
    6194:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    6198:	   |  |  |     |   jsr 77c2 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    619e:	   |  |  |     \-> move.l 12(sp),-(sp)
    61a2:	   |  |  |         jsr 40fe <continueFunction>
    61a8:	   |  |  |         addq.l #4,sp
    61aa:	   |  |  |         tst.w d0
    61ac:	   |  |  +-------- bne.s 61b4 <runSludge+0x84>
					return FALSE;
    61ae:	   |  |  |         clr.w d0
    61b0:	/--|--|--|-------- bra.w 6240 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    61b4:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    61ba:	|  |  \----------> tst.l 12(sp)
    61be:	|  \-------------- bne.s 6140 <runSludge+0x10>
	}

	if (loadNow) {
    61c0:	|                  move.l 1a76e <loadNow>,d0
    61c6:	|        /-------- beq.s 623e <runSludge+0x10e>
		if (loadNow[0] == ':') {
    61c8:	|        |         movea.l 1a76e <loadNow>,a0
    61ce:	|        |         move.b (a0),d0
    61d0:	|        |         cmpi.b #58,d0
    61d4:	|        |  /----- bne.s 6208 <runSludge+0xd8>
			saveGame (loadNow + 1);
    61d6:	|        |  |      move.l 1a76e <loadNow>,d0
    61dc:	|        |  |      addq.l #1,d0
    61de:	|        |  |      move.l d0,-(sp)
    61e0:	|        |  |      jsr c15a <saveGame>
    61e6:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    61e8:	|        |  |      movea.l 1a8c4 <saverFunc>,a0
    61ee:	|        |  |      lea 28(a0),a0
    61f2:	|        |  |      pea 1 <_start+0x1>
    61f6:	|        |  |      pea 1 <_start+0x1>
    61fa:	|        |  |      move.l a0,-(sp)
    61fc:	|        |  |      jsr 14aa0 <setVariable>
    6202:	|        |  |      lea 12(sp),sp
    6206:	|        |  |  /-- bra.s 6220 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    6208:	|        |  \--|-> move.l 1a76e <loadNow>,d0
    620e:	|        |     |   move.l d0,-(sp)
    6210:	|        |     |   jsr bca2 <loadGame>
    6216:	|        |     |   addq.l #4,sp
    6218:	|        |     |   tst.w d0
    621a:	|        |     +-- bne.s 6220 <runSludge+0xf0>
    621c:	|        |     |   clr.w d0
    621e:	+--------|-----|-- bra.s 6240 <runSludge+0x110>
		}
		FreeVec(loadNow);
    6220:	|        |     \-> move.l 1a76e <loadNow>,8(sp)
    6228:	|        |         move.l 1a7a2 <SysBase>,d0
    622e:	|        |         movea.l d0,a6
    6230:	|        |         movea.l 8(sp),a1
    6234:	|        |         jsr -690(a6)
		loadNow = NULL;
    6238:	|        |         clr.l 1a76e <loadNow>
	}

	return TRUE;
    623e:	|        \-------> moveq #1,d0
}
    6240:	\----------------> movea.l (sp)+,a6
    6242:	                   lea 12(sp),sp
    6246:	                   rts

00006248 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    6248:	movea.l 1a11c <currentEvents>,a0
    624e:	move.l (a0),d0
    6250:	move.l 4(sp),-(sp)
    6254:	move.l d0,-(sp)
    6256:	jsr 8d0 <put2bytes>
    625c:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    625e:	movea.l 1a11c <currentEvents>,a0
    6264:	move.l 4(a0),d0
    6268:	move.l 4(sp),-(sp)
    626c:	move.l d0,-(sp)
    626e:	jsr 8d0 <put2bytes>
    6274:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    6276:	movea.l 1a11c <currentEvents>,a0
    627c:	move.l 8(a0),d0
    6280:	move.l 4(sp),-(sp)
    6284:	move.l d0,-(sp)
    6286:	jsr 8d0 <put2bytes>
    628c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    628e:	movea.l 1a11c <currentEvents>,a0
    6294:	move.l 12(a0),d0
    6298:	move.l 4(sp),-(sp)
    629c:	move.l d0,-(sp)
    629e:	jsr 8d0 <put2bytes>
    62a4:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    62a6:	movea.l 1a11c <currentEvents>,a0
    62ac:	move.l 16(a0),d0
    62b0:	move.l 4(sp),-(sp)
    62b4:	move.l d0,-(sp)
    62b6:	jsr 8d0 <put2bytes>
    62bc:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    62be:	movea.l 1a11c <currentEvents>,a0
    62c4:	move.l 20(a0),d0
    62c8:	move.l 4(sp),-(sp)
    62cc:	move.l d0,-(sp)
    62ce:	jsr 8d0 <put2bytes>
    62d4:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    62d6:	movea.l 1a11c <currentEvents>,a0
    62dc:	move.l 24(a0),d0
    62e0:	move.l 4(sp),-(sp)
    62e4:	move.l d0,-(sp)
    62e6:	jsr 8d0 <put2bytes>
    62ec:	addq.l #8,sp
}
    62ee:	nop
    62f0:	rts

000062f2 <sludgeDisplay>:

void sludgeDisplay () {					
    62f2:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    62f4:	move.l #14675968,(sp)
	displayCursor();
    62fa:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6300:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6306:	jsr 234c <CstRestoreScreen>
	drawPeople();
    630c:	jsr 9ac2 <drawPeople>
	CstSwapBuffer();
    6312:	jsr 30ce <CstSwapBuffer>
}
    6318:	nop
    631a:	addq.l #4,sp
    631c:	rts

0000631e <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    631e:	      /-- bra.s 633e <stackSetByIndex+0x20>
		vS = vS->next;
    6320:	/-----|-> movea.l 4(sp),a0
    6324:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    632a:	|     +-- bne.s 633e <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    632c:	|     |   pea 1852c <PutChar+0xeac>
    6332:	|     |   jsr 16bac <KPrintF>
    6338:	|     |   addq.l #4,sp
			return FALSE;
    633a:	|     |   clr.w d0
    633c:	|  /--|-- bra.s 6360 <stackSetByIndex+0x42>
	while (theIndex--) {
    633e:	|  |  \-> move.l 8(sp),d0
    6342:	|  |      move.l d0,d1
    6344:	|  |      subq.l #1,d1
    6346:	|  |      move.l d1,8(sp)
    634a:	|  |      tst.l d0
    634c:	\--|----- bne.s 6320 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    634e:	   |      move.l 4(sp),d0
    6352:	   |      move.l d0,-(sp)
    6354:	   |      move.l 16(sp),-(sp)
    6358:	   |      jsr 14668 <copyVariable>
    635e:	   |      addq.l #8,sp
}
    6360:	   \----> rts

00006362 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6362:	             lea -24(sp),sp
    6366:	             move.l a6,-(sp)
    6368:	             move.l 48(sp),d0
    636c:	             move.w d0,d0
    636e:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6372:	             moveq #58,d0
    6374:	             move.l d0,24(sp)
    6378:	             clr.l 20(sp)
    637c:	             move.l 1a7a2 <SysBase>,d0
    6382:	             movea.l d0,a6
    6384:	             move.l 24(sp),d0
    6388:	             move.l 20(sp),d1
    638c:	             jsr -684(a6)
    6390:	             move.l d0,16(sp)
    6394:	             move.l 16(sp),d0
    6398:	             move.l d0,12(sp)
	if(!newFunc) {
    639c:	         /-- bne.s 63b2 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    639e:	         |   pea 18545 <PutChar+0xec5>
    63a4:	         |   jsr 16bac <KPrintF>
    63aa:	         |   addq.l #4,sp
		return 0;
    63ac:	         |   moveq #0,d0
    63ae:	/--------|-- bra.w 64c8 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    63b2:	|        \-> move.l 32(sp),d0
    63b6:	|            movea.l 12(sp),a0
    63ba:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    63bc:	|            move.l 12(sp),-(sp)
    63c0:	|            jsr 5ad2 <loadFunctionCode>
    63c6:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    63c8:	|            movea.l 12(sp),a0
    63cc:	|            move.l 16(a0),d1
    63d0:	|            move.l 36(sp),d0
    63d4:	|            cmp.l d1,d0
    63d6:	|        /-- beq.s 63ec <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    63d8:	|        |   pea 1856e <PutChar+0xeee>
    63de:	|        |   jsr 16bac <KPrintF>
    63e4:	|        |   addq.l #4,sp
		return NULL; 
    63e6:	|        |   moveq #0,d0
    63e8:	+--------|-- bra.w 64c8 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    63ec:	|        \-> movea.l 12(sp),a0
    63f0:	|            move.l 16(a0),d1
    63f4:	|            movea.l 12(sp),a0
    63f8:	|            move.l 8(a0),d0
    63fc:	|            cmp.l d1,d0
    63fe:	|  /-------- bge.s 6468 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6400:	|  |         pea 1858a <PutChar+0xf0a>
    6406:	|  |         jsr 16bac <KPrintF>
    640c:	|  |         addq.l #4,sp
		return NULL; 
    640e:	|  |         moveq #0,d0
    6410:	+--|-------- bra.w 64c8 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6414:	|  |  /----> movea.l 44(sp),a0
    6418:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    641c:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6420:	|  |  |      movea.l 44(sp),a0
    6424:	|  |  |      move.l (a0),d0
    6426:	|  |  |  /-- bne.s 643c <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6428:	|  |  |  |   pea 185b4 <PutChar+0xf34>
    642e:	|  |  |  |   jsr 16bac <KPrintF>
    6434:	|  |  |  |   addq.l #4,sp
			return NULL;
    6436:	|  |  |  |   moveq #0,d0
    6438:	+--|--|--|-- bra.w 64c8 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    643c:	|  |  |  \-> movea.l 12(sp),a0
    6440:	|  |  |      move.l 20(a0),d1
    6444:	|  |  |      move.l 36(sp),d0
    6448:	|  |  |      lsl.l #3,d0
    644a:	|  |  |      add.l d0,d1
    644c:	|  |  |      move.l 8(sp),d0
    6450:	|  |  |      move.l d1,-(sp)
    6452:	|  |  |      move.l d0,-(sp)
    6454:	|  |  |      jsr 14668 <copyVariable>
    645a:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    645c:	|  |  |      move.l 44(sp),-(sp)
    6460:	|  |  |      jsr 14b32 <trimStack>
    6466:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6468:	|  \--|----> tst.l 36(sp)
    646c:	|     \----- bne.s 6414 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    646e:	|            movea.l 12(sp),a0
    6472:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6476:	|            movea.l 12(sp),a0
    647a:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    647e:	|            movea.l 12(sp),a0
    6482:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6488:	|            movea.l 12(sp),a0
    648c:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6492:	|            movea.l 12(sp),a0
    6496:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    649a:	|            movea.l 12(sp),a0
    649e:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    64a2:	|            movea.l 12(sp),a0
    64a6:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    64aa:	|            movea.l 12(sp),a0
    64ae:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    64b2:	|            movea.l 12(sp),a0
    64b6:	|            clr.l 28(a0)

	restartFunction (newFunc);
    64ba:	|            move.l 12(sp),-(sp)
    64be:	|            jsr 6116 <restartFunction>
    64c4:	|            addq.l #4,sp
	return 1;
    64c6:	|            moveq #1,d0
}
    64c8:	\----------> movea.l (sp)+,a6
    64ca:	             lea 24(sp),sp
    64ce:	             rts

000064d0 <unfreezeSubs>:

void unfreezeSubs () {
    64d0:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    64d2:	          move.l 1a73a <allRunningFunctions>,(sp)

	while (thisFunction) {
    64d8:	   /----- bra.s 64f6 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    64da:	/--|----> movea.l (sp),a0
    64dc:	|  |      move.b 56(a0),d0
    64e0:	|  |  /-- beq.s 64f0 <unfreezeSubs+0x20>
    64e2:	|  |  |   movea.l (sp),a0
    64e4:	|  |  |   move.b 56(a0),d0
    64e8:	|  |  |   subq.b #1,d0
    64ea:	|  |  |   movea.l (sp),a0
    64ec:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    64f0:	|  |  \-> movea.l (sp),a0
    64f2:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    64f6:	|  \----> tst.l (sp)
    64f8:	\-------- bne.s 64da <unfreezeSubs+0xa>
	}
}
    64fa:	          nop
    64fc:	          nop
    64fe:	          addq.l #4,sp
    6500:	          rts

00006502 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6502:	clr.w 1a128 <sliceBusy>
}
    6508:	nop
    650a:	rts

0000650c <getNumberedString>:

char * getNumberedString (int value) {
    650c:	       lea -56(sp),sp
    6510:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6514:	       move.w 1a128 <sliceBusy>,d0
    651a:	   /-- beq.s 6564 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    651c:	   |   move.l 1a7aa <DOSBase>,d0
    6522:	   |   movea.l d0,a6
    6524:	   |   jsr -60(a6)
    6528:	   |   move.l d0,28(sp)
    652c:	   |   move.l 28(sp),d0
    6530:	   |   move.l d0,24(sp)
    6534:	   |   move.l #99839,20(sp)
    653c:	   |   moveq #76,d0
    653e:	   |   move.l d0,16(sp)
    6542:	   |   move.l 1a7aa <DOSBase>,d0
    6548:	   |   movea.l d0,a6
    654a:	   |   move.l 24(sp),d1
    654e:	   |   move.l 20(sp),d2
    6552:	   |   move.l 16(sp),d3
    6556:	   |   jsr -48(a6)
    655a:	   |   move.l d0,12(sp)
		return NULL;
    655e:	   |   moveq #0,d0
    6560:	/--|-- bra.w 6600 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6564:	|  \-> move.l 1a78a <bigDataFile>,64(sp)
    656c:	|      move.l 72(sp),d0
    6570:	|      add.l d0,d0
    6572:	|      add.l d0,d0
    6574:	|      move.l d0,d1
    6576:	|      move.l 1a796 <startOfTextIndex>,d0
    657c:	|      add.l d1,d0
    657e:	|      move.l d0,60(sp)
    6582:	|      moveq #-1,d0
    6584:	|      move.l d0,56(sp)
    6588:	|      move.l 1a7aa <DOSBase>,d0
    658e:	|      movea.l d0,a6
    6590:	|      move.l 64(sp),d1
    6594:	|      move.l 60(sp),d2
    6598:	|      move.l 56(sp),d3
    659c:	|      jsr -66(a6)
    65a0:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    65a4:	|      move.l 1a78a <bigDataFile>,d0
    65aa:	|      move.l d0,-(sp)
    65ac:	|      jsr 718 <get4bytes>
    65b2:	|      addq.l #4,sp
    65b4:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    65b8:	|      move.l 1a78a <bigDataFile>,48(sp)
    65c0:	|      move.l 72(sp),44(sp)
    65c6:	|      moveq #-1,d0
    65c8:	|      move.l d0,40(sp)
    65cc:	|      move.l 1a7aa <DOSBase>,d0
    65d2:	|      movea.l d0,a6
    65d4:	|      move.l 48(sp),d1
    65d8:	|      move.l 44(sp),d2
    65dc:	|      move.l 40(sp),d3
    65e0:	|      jsr -66(a6)
    65e4:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    65e8:	|      move.l 1a78a <bigDataFile>,d0
    65ee:	|      move.l d0,-(sp)
    65f0:	|      jsr b02 <readString>
    65f6:	|      addq.l #4,sp
    65f8:	|      move.l d0,32(sp)
	
	return s;
    65fc:	|      move.l 32(sp),d0
}
    6600:	\----> movem.l (sp)+,d2-d3/a6
    6604:	       lea 56(sp),sp
    6608:	       rts

0000660a <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    660a:	       lea -32(sp),sp
    660e:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6612:	       move.w 1a128 <sliceBusy>,d0
    6618:	   /-- beq.s 6634 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    661a:	   |   pea 1864c <PutChar+0xfcc>
    6620:	   |   pea 1866a <PutChar+0xfea>
    6626:	   |   jsr 16bac <KPrintF>
    662c:	   |   addq.l #8,sp
		return 0;
    662e:	   |   moveq #0,d0
    6630:	/--|-- bra.w 66c8 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6634:	|  \-> move.l 1a78a <bigDataFile>,40(sp)
    663c:	|      move.l 48(sp),d0
    6640:	|      add.l d0,d0
    6642:	|      add.l d0,d0
    6644:	|      move.l d0,d1
    6646:	|      move.l 1a792 <startOfDataIndex>,d0
    664c:	|      add.l d1,d0
    664e:	|      move.l d0,36(sp)
    6652:	|      moveq #-1,d0
    6654:	|      move.l d0,32(sp)
    6658:	|      move.l 1a7aa <DOSBase>,d0
    665e:	|      movea.l d0,a6
    6660:	|      move.l 40(sp),d1
    6664:	|      move.l 36(sp),d2
    6668:	|      move.l 32(sp),d3
    666c:	|      jsr -66(a6)
    6670:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6674:	|      move.l 1a78a <bigDataFile>,24(sp)
    667c:	|      move.l 1a78a <bigDataFile>,d0
    6682:	|      move.l d0,-(sp)
    6684:	|      jsr 718 <get4bytes>
    668a:	|      addq.l #4,sp
    668c:	|      move.l d0,20(sp)
    6690:	|      clr.l 16(sp)
    6694:	|      move.l 1a7aa <DOSBase>,d0
    669a:	|      movea.l d0,a6
    669c:	|      move.l 24(sp),d1
    66a0:	|      move.l 20(sp),d2
    66a4:	|      move.l 16(sp),d3
    66a8:	|      jsr -66(a6)
    66ac:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    66b0:	|      move.w #1,1a128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    66b8:	|      move.l 1a78a <bigDataFile>,d0
    66be:	|      move.l d0,-(sp)
    66c0:	|      jsr 718 <get4bytes>
    66c6:	|      addq.l #4,sp
}
    66c8:	\----> movem.l (sp)+,d2-d3/a6
    66cc:	       lea 32(sp),sp
    66d0:	       rts

000066d2 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    66d2:	       lea -32(sp),sp
    66d6:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    66da:	       move.w 1a128 <sliceBusy>,d0
    66e0:	   /-- beq.s 66fc <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    66e2:	   |   pea 1864c <PutChar+0xfcc>
    66e8:	   |   pea 1866a <PutChar+0xfea>
    66ee:	   |   jsr 16bac <KPrintF>
    66f4:	   |   addq.l #8,sp
        return FALSE;
    66f6:	   |   clr.w d0
    66f8:	/--|-- bra.w 6788 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    66fc:	|  \-> move.l 1a78a <bigDataFile>,40(sp)
    6704:	|      move.l 48(sp),d0
    6708:	|      add.l d0,d0
    670a:	|      add.l d0,d0
    670c:	|      move.l d0,d1
    670e:	|      move.l 1a79e <startOfObjectIndex>,d0
    6714:	|      add.l d1,d0
    6716:	|      move.l d0,36(sp)
    671a:	|      moveq #-1,d0
    671c:	|      move.l d0,32(sp)
    6720:	|      move.l 1a7aa <DOSBase>,d0
    6726:	|      movea.l d0,a6
    6728:	|      move.l 40(sp),d1
    672c:	|      move.l 36(sp),d2
    6730:	|      move.l 32(sp),d3
    6734:	|      jsr -66(a6)
    6738:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    673c:	|      move.l 1a78a <bigDataFile>,24(sp)
    6744:	|      move.l 1a78a <bigDataFile>,d0
    674a:	|      move.l d0,-(sp)
    674c:	|      jsr 718 <get4bytes>
    6752:	|      addq.l #4,sp
    6754:	|      move.l d0,20(sp)
    6758:	|      moveq #-1,d0
    675a:	|      move.l d0,16(sp)
    675e:	|      move.l 1a7aa <DOSBase>,d0
    6764:	|      movea.l d0,a6
    6766:	|      move.l 24(sp),d1
    676a:	|      move.l 20(sp),d2
    676e:	|      move.l 16(sp),d3
    6772:	|      jsr -66(a6)
    6776:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    677a:	|      move.w #1,1a128 <sliceBusy>
    6782:	|      move.w 1a128 <sliceBusy>,d0
}
    6788:	\----> movem.l (sp)+,d2-d3/a6
    678c:	       lea 32(sp),sp
    6790:	       rts

00006792 <openSubSlice>:

BOOL openSubSlice (int num) {
    6792:	       lea -32(sp),sp
    6796:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    679a:	       move.w 1a128 <sliceBusy>,d0
    67a0:	   /-- beq.s 67bc <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    67a2:	   |   pea 1864c <PutChar+0xfcc>
    67a8:	   |   pea 1866a <PutChar+0xfea>
    67ae:	   |   jsr 16bac <KPrintF>
    67b4:	   |   addq.l #8,sp
		return FALSE;
    67b6:	   |   clr.w d0
    67b8:	/--|-- bra.w 6848 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    67bc:	|  \-> move.l 1a78a <bigDataFile>,40(sp)
    67c4:	|      move.l 48(sp),d0
    67c8:	|      add.l d0,d0
    67ca:	|      add.l d0,d0
    67cc:	|      move.l d0,d1
    67ce:	|      move.l 1a79a <startOfSubIndex>,d0
    67d4:	|      add.l d1,d0
    67d6:	|      move.l d0,36(sp)
    67da:	|      moveq #-1,d0
    67dc:	|      move.l d0,32(sp)
    67e0:	|      move.l 1a7aa <DOSBase>,d0
    67e6:	|      movea.l d0,a6
    67e8:	|      move.l 40(sp),d1
    67ec:	|      move.l 36(sp),d2
    67f0:	|      move.l 32(sp),d3
    67f4:	|      jsr -66(a6)
    67f8:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    67fc:	|      move.l 1a78a <bigDataFile>,24(sp)
    6804:	|      move.l 1a78a <bigDataFile>,d0
    680a:	|      move.l d0,-(sp)
    680c:	|      jsr 718 <get4bytes>
    6812:	|      addq.l #4,sp
    6814:	|      move.l d0,20(sp)
    6818:	|      moveq #-1,d0
    681a:	|      move.l d0,16(sp)
    681e:	|      move.l 1a7aa <DOSBase>,d0
    6824:	|      movea.l d0,a6
    6826:	|      move.l 24(sp),d1
    682a:	|      move.l 20(sp),d2
    682e:	|      move.l 16(sp),d3
    6832:	|      jsr -66(a6)
    6836:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    683a:	|      move.w #1,1a128 <sliceBusy>
    6842:	|      move.w 1a128 <sliceBusy>,d0
}
    6848:	\----> movem.l (sp)+,d2-d3/a6
    684c:	       lea 32(sp),sp
    6850:	       rts

00006852 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    6852:	       lea -180(sp),sp
    6856:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    685a:	       tst.l 196(sp)
    685e:	/----- beq.s 689e <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    6860:	|      move.l 196(sp),1a78a <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    6868:	|      move.l 196(sp),168(sp)
    686e:	|      clr.l 164(sp)
    6872:	|      clr.l 160(sp)
    6876:	|      move.l 1a7aa <DOSBase>,d0
    687c:	|      movea.l d0,a6
    687e:	|      move.l 168(sp),d1
    6882:	|      move.l 164(sp),d2
    6886:	|      move.l 160(sp),d3
    688a:	|      jsr -66(a6)
    688e:	|      move.l d0,156(sp)
    6892:	|      move.l 156(sp),d0
    6896:	|      move.l d0,1a78e <startIndex>
    689c:	|  /-- bra.s 68d8 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    689e:	\--|-> move.l 1a78a <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    68a6:	   |   move.l 196(sp),184(sp)
    68ac:	   |   move.l 1a78e <startIndex>,d0
    68b2:	   |   move.l d0,180(sp)
    68b6:	   |   moveq #-1,d0
    68b8:	   |   move.l d0,176(sp)
    68bc:	   |   move.l 1a7aa <DOSBase>,d0
    68c2:	   |   movea.l d0,a6
    68c4:	   |   move.l 184(sp),d1
    68c8:	   |   move.l 180(sp),d2
    68cc:	   |   move.l 176(sp),d3
    68d0:	   |   jsr -66(a6)
    68d4:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    68d8:	   \-> clr.w 1a128 <sliceBusy>

	if (skipBefore > numLanguages) {
    68de:	       move.l 204(sp),d0
    68e2:	       cmp.l 200(sp),d0
    68e6:	   /-- bls.s 68fa <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    68e8:	   |   pea 18684 <PutChar+0x1004>
    68ee:	   |   jsr 16bac <KPrintF>
    68f4:	   |   addq.l #4,sp
		skipBefore = 0;
    68f6:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    68fa:	   \-> move.l 200(sp),d0
    68fe:	       sub.l 204(sp),d0
    6902:	       move.l d0,188(sp)
	while (skipBefore) {
    6906:	   /-- bra.s 6944 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    6908:	/--|-> move.l 196(sp),24(sp)
    690e:	|  |   move.l 196(sp),-(sp)
    6912:	|  |   jsr 718 <get4bytes>
    6918:	|  |   addq.l #4,sp
    691a:	|  |   move.l d0,20(sp)
    691e:	|  |   moveq #-1,d0
    6920:	|  |   move.l d0,16(sp)
    6924:	|  |   move.l 1a7aa <DOSBase>,d0
    692a:	|  |   movea.l d0,a6
    692c:	|  |   move.l 24(sp),d1
    6930:	|  |   move.l 20(sp),d2
    6934:	|  |   move.l 16(sp),d3
    6938:	|  |   jsr -66(a6)
    693c:	|  |   move.l d0,12(sp)
		skipBefore --;
    6940:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    6944:	|  \-> tst.l 204(sp)
    6948:	\----- bne.s 6908 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    694a:	       move.l 196(sp),152(sp)
    6950:	       clr.l 148(sp)
    6954:	       clr.l 144(sp)
    6958:	       move.l 1a7aa <DOSBase>,d0
    695e:	       movea.l d0,a6
    6960:	       move.l 152(sp),d1
    6964:	       move.l 148(sp),d2
    6968:	       move.l 144(sp),d3
    696c:	       jsr -66(a6)
    6970:	       move.l d0,140(sp)
    6974:	       move.l 140(sp),d0
    6978:	       addq.l #4,d0
    697a:	       move.l d0,1a796 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    6980:	       move.l 196(sp),136(sp)
    6986:	       move.l 196(sp),-(sp)
    698a:	       jsr 718 <get4bytes>
    6990:	       addq.l #4,sp
    6992:	       move.l d0,132(sp)
    6996:	       moveq #-1,d0
    6998:	       move.l d0,128(sp)
    699c:	       move.l 1a7aa <DOSBase>,d0
    69a2:	       movea.l d0,a6
    69a4:	       move.l 136(sp),d1
    69a8:	       move.l 132(sp),d2
    69ac:	       move.l 128(sp),d3
    69b0:	       jsr -66(a6)
    69b4:	       move.l d0,124(sp)

	while (skipAfter) {
    69b8:	   /-- bra.s 69f6 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    69ba:	/--|-> move.l 196(sp),40(sp)
    69c0:	|  |   move.l 196(sp),-(sp)
    69c4:	|  |   jsr 718 <get4bytes>
    69ca:	|  |   addq.l #4,sp
    69cc:	|  |   move.l d0,36(sp)
    69d0:	|  |   moveq #-1,d0
    69d2:	|  |   move.l d0,32(sp)
    69d6:	|  |   move.l 1a7aa <DOSBase>,d0
    69dc:	|  |   movea.l d0,a6
    69de:	|  |   move.l 40(sp),d1
    69e2:	|  |   move.l 36(sp),d2
    69e6:	|  |   move.l 32(sp),d3
    69ea:	|  |   jsr -66(a6)
    69ee:	|  |   move.l d0,28(sp)
		skipAfter --;
    69f2:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    69f6:	|  \-> tst.l 188(sp)
    69fa:	\----- bne.s 69ba <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    69fc:	       move.l 196(sp),120(sp)
    6a02:	       clr.l 116(sp)
    6a06:	       clr.l 112(sp)
    6a0a:	       move.l 1a7aa <DOSBase>,d0
    6a10:	       movea.l d0,a6
    6a12:	       move.l 120(sp),d1
    6a16:	       move.l 116(sp),d2
    6a1a:	       move.l 112(sp),d3
    6a1e:	       jsr -66(a6)
    6a22:	       move.l d0,108(sp)
    6a26:	       move.l 108(sp),d0
    6a2a:	       addq.l #4,d0
    6a2c:	       move.l d0,1a79a <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    6a32:	       move.l 196(sp),104(sp)
    6a38:	       move.l 196(sp),-(sp)
    6a3c:	       jsr 718 <get4bytes>
    6a42:	       addq.l #4,sp
    6a44:	       move.l d0,100(sp)
    6a48:	       clr.l 96(sp)
    6a4c:	       move.l 1a7aa <DOSBase>,d0
    6a52:	       movea.l d0,a6
    6a54:	       move.l 104(sp),d1
    6a58:	       move.l 100(sp),d2
    6a5c:	       move.l 96(sp),d3
    6a60:	       jsr -66(a6)
    6a64:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6a68:	       move.l 196(sp),88(sp)
    6a6e:	       clr.l 84(sp)
    6a72:	       clr.l 80(sp)
    6a76:	       move.l 1a7aa <DOSBase>,d0
    6a7c:	       movea.l d0,a6
    6a7e:	       move.l 88(sp),d1
    6a82:	       move.l 84(sp),d2
    6a86:	       move.l 80(sp),d3
    6a8a:	       jsr -66(a6)
    6a8e:	       move.l d0,76(sp)
    6a92:	       move.l 76(sp),d0
    6a96:	       addq.l #4,d0
    6a98:	       move.l d0,1a79e <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    6a9e:	       move.l 196(sp),72(sp)
    6aa4:	       move.l 196(sp),-(sp)
    6aa8:	       jsr 718 <get4bytes>
    6aae:	       addq.l #4,sp
    6ab0:	       move.l d0,68(sp)
    6ab4:	       clr.l 64(sp)
    6ab8:	       move.l 1a7aa <DOSBase>,d0
    6abe:	       movea.l d0,a6
    6ac0:	       move.l 72(sp),d1
    6ac4:	       move.l 68(sp),d2
    6ac8:	       move.l 64(sp),d3
    6acc:	       jsr -66(a6)
    6ad0:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    6ad4:	       move.l 196(sp),56(sp)
    6ada:	       clr.l 52(sp)
    6ade:	       clr.l 48(sp)
    6ae2:	       move.l 1a7aa <DOSBase>,d0
    6ae8:	       movea.l d0,a6
    6aea:	       move.l 56(sp),d1
    6aee:	       move.l 52(sp),d2
    6af2:	       move.l 48(sp),d3
    6af6:	       jsr -66(a6)
    6afa:	       move.l d0,44(sp)
    6afe:	       move.l 44(sp),d0
    6b02:	       move.l d0,1a792 <startOfDataIndex>
    6b08:	       nop
    6b0a:	       movem.l (sp)+,d2-d3/a6
    6b0e:	       lea 180(sp),sp
    6b12:	       rts

00006b14 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    6b14:	    lea -20(sp),sp
    6b18:	    move.l a6,-(sp)
    6b1a:	    move.l d7,-(sp)
	APTR vbr = 0;
    6b1c:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    6b20:	    move.w #20090,10(sp)
    6b26:	    move.w #2049,12(sp)
    6b2c:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    6b32:	    movea.l 1a7a2 <SysBase>,a0
    6b38:	    move.w 296(a0),d0
    6b3c:	    move.w d0,d0
    6b3e:	    andi.l #65535,d0
    6b44:	    moveq #1,d1
    6b46:	    and.l d1,d0
    6b48:	/-- beq.s 6b76 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    6b4a:	|   lea 28(sp),a0
    6b4e:	|   lea -18(a0),a0
    6b52:	|   move.l a0,20(sp)
    6b56:	|   move.l 1a7a2 <SysBase>,d0
    6b5c:	|   movea.l d0,a6
    6b5e:	|   move.l 20(sp),d7
    6b62:	|   exg d7,a5
    6b64:	|   jsr -30(a6)
    6b68:	|   exg d7,a5
    6b6a:	|   move.l d0,16(sp)
    6b6e:	|   move.l 16(sp),d0
    6b72:	|   move.l d0,24(sp)

	return vbr;
    6b76:	\-> move.l 24(sp),d0
}
    6b7a:	    move.l (sp)+,d7
    6b7c:	    movea.l (sp)+,a6
    6b7e:	    lea 20(sp),sp
    6b82:	    rts

00006b84 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    6b84:	movea.l 1a7c8 <VBR>,a0
    6b8a:	lea 108(a0),a0
    6b8e:	move.l 4(sp),(a0)
}
    6b92:	nop
    6b94:	rts

00006b96 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    6b96:	movea.l 1a7c8 <VBR>,a0
    6b9c:	move.l 108(a0),d0
}
    6ba0:	rts

00006ba2 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    6ba2:	       subq.l #8,sp
    6ba4:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    6ba6:	       pea 186cd <PutChar+0x104d>
    6bac:	       jsr 16bac <KPrintF>
    6bb2:	       addq.l #4,sp
	Forbid();
    6bb4:	       move.l 1a7a2 <SysBase>,d0
    6bba:	       movea.l d0,a6
    6bbc:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    6bc0:	       pea 186e5 <PutChar+0x1065>
    6bc6:	       jsr 16bac <KPrintF>
    6bcc:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    6bce:	       movea.l 1a7a6 <custom>,a0
    6bd4:	       move.w 16(a0),d0
    6bd8:	       move.w d0,1a7c6 <SystemADKCON>
	SystemInts=custom->intenar;
    6bde:	       movea.l 1a7a6 <custom>,a0
    6be4:	       move.w 28(a0),d0
    6be8:	       move.w d0,1a7c2 <SystemInts>
	SystemDMA=custom->dmaconr;
    6bee:	       movea.l 1a7a6 <custom>,a0
    6bf4:	       move.w 2(a0),d0
    6bf8:	       move.w d0,1a7c4 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    6bfe:	       movea.l 1a7ae <GfxBase>,a0
    6c04:	       move.l 34(a0),d0
    6c08:	       move.l d0,1a7d0 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    6c0e:	       pea 18703 <PutChar+0x1083>
    6c14:	       jsr 16bac <KPrintF>
    6c1a:	       addq.l #4,sp
	LoadView(0);
    6c1c:	       clr.l 4(sp)
    6c20:	       move.l 1a7ae <GfxBase>,d0
    6c26:	       movea.l d0,a6
    6c28:	       movea.l 4(sp),a1
    6c2c:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    6c30:	       pea 18719 <PutChar+0x1099>
    6c36:	       jsr 16bac <KPrintF>
    6c3c:	       addq.l #4,sp
	WaitTOF();
    6c3e:	       move.l 1a7ae <GfxBase>,d0
    6c44:	       movea.l d0,a6
    6c46:	       jsr -270(a6)
	WaitTOF();
    6c4a:	       move.l 1a7ae <GfxBase>,d0
    6c50:	       movea.l d0,a6
    6c52:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    6c56:	       pea 1872e <PutChar+0x10ae>
    6c5c:	       jsr 16bac <KPrintF>
    6c62:	       addq.l #4,sp
	WaitVbl();
    6c64:	       jsr 16ae0 <WaitVbl>
	WaitVbl();
    6c6a:	       jsr 16ae0 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    6c70:	       pea 18743 <PutChar+0x10c3>
    6c76:	       jsr 16bac <KPrintF>
    6c7c:	       addq.l #4,sp
	OwnBlitter();
    6c7e:	       move.l 1a7ae <GfxBase>,d0
    6c84:	       movea.l d0,a6
    6c86:	       jsr -456(a6)
	WaitBlit();	
    6c8a:	       move.l 1a7ae <GfxBase>,d0
    6c90:	       movea.l d0,a6
    6c92:	       jsr -228(a6)
	Disable();
    6c96:	       move.l 1a7a2 <SysBase>,d0
    6c9c:	       movea.l d0,a6
    6c9e:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    6ca2:	       pea 18764 <PutChar+0x10e4>
    6ca8:	       jsr 16bac <KPrintF>
    6cae:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    6cb0:	       movea.l 1a7a6 <custom>,a0
    6cb6:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    6cbc:	       pea 1877b <PutChar+0x10fb>
    6cc2:	       jsr 16bac <KPrintF>
    6cc8:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    6cca:	       clr.l 8(sp)
    6cce:	   /-- bra.s 6cec <TakeSystem+0x14a>
		custom->color[a]=0;
    6cd0:	/--|-> movea.l 1a7a6 <custom>,a0
    6cd6:	|  |   move.l 8(sp),d0
    6cda:	|  |   addi.l #192,d0
    6ce0:	|  |   add.l d0,d0
    6ce2:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    6ce8:	|  |   addq.l #1,8(sp)
    6cec:	|  \-> moveq #31,d0
    6cee:	|      cmp.l 8(sp),d0
    6cf2:	\----- bge.s 6cd0 <TakeSystem+0x12e>

	WaitVbl();
    6cf4:	       jsr 16ae0 <WaitVbl>
	WaitVbl();
    6cfa:	       jsr 16ae0 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    6d00:	       pea 187a0 <PutChar+0x1120>
    6d06:	       jsr 16bac <KPrintF>
    6d0c:	       addq.l #4,sp
	VBR=GetVBR();
    6d0e:	       jsr 6b14 <GetVBR>
    6d14:	       move.l d0,1a7c8 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    6d1a:	       jsr 6b96 <GetInterruptHandler>
    6d20:	       move.l d0,1a7cc <SystemIrq>
}
    6d26:	       nop
    6d28:	       movea.l (sp)+,a6
    6d2a:	       addq.l #8,sp
    6d2c:	       rts

00006d2e <FreeSystem>:

void FreeSystem() { 
    6d2e:	subq.l #4,sp
    6d30:	move.l a6,-(sp)
	WaitVbl();
    6d32:	jsr 16ae0 <WaitVbl>
	WaitBlit();
    6d38:	move.l 1a7ae <GfxBase>,d0
    6d3e:	movea.l d0,a6
    6d40:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    6d44:	movea.l 1a7a6 <custom>,a0
    6d4a:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    6d50:	movea.l 1a7a6 <custom>,a0
    6d56:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    6d5c:	movea.l 1a7a6 <custom>,a0
    6d62:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    6d68:	move.l 1a7cc <SystemIrq>,d0
    6d6e:	move.l d0,-(sp)
    6d70:	jsr 6b84 <SetInterruptHandler>
    6d76:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    6d78:	movea.l 1a7ae <GfxBase>,a0
    6d7e:	move.l 38(a0),d0
    6d82:	movea.l 1a7a6 <custom>,a0
    6d88:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    6d8c:	movea.l 1a7ae <GfxBase>,a0
    6d92:	move.l 50(a0),d0
    6d96:	movea.l 1a7a6 <custom>,a0
    6d9c:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    6da0:	movea.l 1a7a6 <custom>,a0
    6da6:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    6dac:	move.w 1a7c4 <SystemDMA>,d0
    6db2:	movea.l 1a7a6 <custom>,a0
    6db8:	ori.w #-32768,d0
    6dbc:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    6dc0:	move.w 1a7c6 <SystemADKCON>,d0
    6dc6:	movea.l 1a7a6 <custom>,a0
    6dcc:	ori.w #-32768,d0
    6dd0:	move.w d0,158(a0)

	WaitBlit();	
    6dd4:	move.l 1a7ae <GfxBase>,d0
    6dda:	movea.l d0,a6
    6ddc:	jsr -228(a6)
	DisownBlitter();
    6de0:	move.l 1a7ae <GfxBase>,d0
    6de6:	movea.l d0,a6
    6de8:	jsr -462(a6)
	Enable();
    6dec:	move.l 1a7a2 <SysBase>,d0
    6df2:	movea.l d0,a6
    6df4:	jsr -126(a6)

	LoadView(ActiView);
    6df8:	move.l 1a7d0 <ActiView>,4(sp)
    6e00:	move.l 1a7ae <GfxBase>,d0
    6e06:	movea.l d0,a6
    6e08:	movea.l 4(sp),a1
    6e0c:	jsr -222(a6)
	WaitTOF();
    6e10:	move.l 1a7ae <GfxBase>,d0
    6e16:	movea.l d0,a6
    6e18:	jsr -270(a6)
	WaitTOF();
    6e1c:	move.l 1a7ae <GfxBase>,d0
    6e22:	movea.l d0,a6
    6e24:	jsr -270(a6)

	Permit();
    6e28:	move.l 1a7a2 <SysBase>,d0
    6e2e:	movea.l d0,a6
    6e30:	jsr -138(a6)
}
    6e34:	nop
    6e36:	movea.l (sp)+,a6
    6e38:	addq.l #4,sp
    6e3a:	rts

00006e3c <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    6e3c:	    lea -128(sp),sp
    6e40:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    6e44:	    movea.w #4,a0
    6e48:	    move.l (a0),d0
    6e4a:	    move.l d0,1a7a2 <SysBase>
	custom = (struct Custom*)0xdff000;	
    6e50:	    move.l #14675968,1a7a6 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    6e5a:	    move.l #100292,136(sp)
    6e62:	    clr.l 132(sp)
    6e66:	    move.l 1a7a2 <SysBase>,d0
    6e6c:	    movea.l d0,a6
    6e6e:	    movea.l 136(sp),a1
    6e72:	    move.l 132(sp),d0
    6e76:	    jsr -552(a6)
    6e7a:	    move.l d0,128(sp)
    6e7e:	    move.l 128(sp),d0
    6e82:	    move.l d0,1a7ae <GfxBase>
	if (!GfxBase)
    6e88:	    move.l 1a7ae <GfxBase>,d0
    6e8e:	/-- bne.s 6ea4 <main+0x68>
		Exit(0);
    6e90:	|   clr.l 124(sp)
    6e94:	|   move.l 1a7aa <DOSBase>,d0
    6e9a:	|   movea.l d0,a6
    6e9c:	|   move.l 124(sp),d1
    6ea0:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    6ea4:	\-> move.l #100309,120(sp)
    6eac:	    clr.l 116(sp)
    6eb0:	    move.l 1a7a2 <SysBase>,d0
    6eb6:	    movea.l d0,a6
    6eb8:	    movea.l 120(sp),a1
    6ebc:	    move.l 116(sp),d0
    6ec0:	    jsr -552(a6)
    6ec4:	    move.l d0,112(sp)
    6ec8:	    move.l 112(sp),d0
    6ecc:	    move.l d0,1a7aa <DOSBase>
	if (!DOSBase)
    6ed2:	    move.l 1a7aa <DOSBase>,d0
    6ed8:	/-- bne.s 6eee <main+0xb2>
		Exit(0);
    6eda:	|   clr.l 108(sp)
    6ede:	|   move.l 1a7aa <DOSBase>,d0
    6ee4:	|   movea.l d0,a6
    6ee6:	|   move.l 108(sp),d1
    6eea:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    6eee:	\-> move.l #100321,104(sp)
    6ef6:	    clr.l 100(sp)
    6efa:	    move.l 1a7a2 <SysBase>,d0
    6f00:	    movea.l d0,a6
    6f02:	    movea.l 104(sp),a1
    6f06:	    move.l 100(sp),d0
    6f0a:	    jsr -552(a6)
    6f0e:	    move.l d0,96(sp)
    6f12:	    move.l 96(sp),d0
    6f16:	    move.l d0,1a7b2 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    6f1c:	    move.l 1a7b2 <MathIeeeSingBasBase>,d0
    6f22:	/-- bne.s 6f38 <main+0xfc>
		Exit(0);	
    6f24:	|   clr.l 92(sp)
    6f28:	|   move.l 1a7aa <DOSBase>,d0
    6f2e:	|   movea.l d0,a6
    6f30:	|   move.l 92(sp),d1
    6f34:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    6f38:	\-> move.l #100345,88(sp)
    6f40:	    clr.l 84(sp)
    6f44:	    move.l 1a7a2 <SysBase>,d0
    6f4a:	    movea.l d0,a6
    6f4c:	    movea.l 88(sp),a1
    6f50:	    move.l 84(sp),d0
    6f54:	    jsr -552(a6)
    6f58:	    move.l d0,80(sp)
    6f5c:	    move.l 80(sp),d0
    6f60:	    move.l d0,1a7b6 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    6f66:	    move.l 1a7b6 <MathIeeeSingTransBase>,d0
    6f6c:	/-- bne.s 6f82 <main+0x146>
		Exit(0);
    6f6e:	|   clr.l 76(sp)
    6f72:	|   move.l 1a7aa <DOSBase>,d0
    6f78:	|   movea.l d0,a6
    6f7a:	|   move.l 76(sp),d1
    6f7e:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    6f82:	\-> move.l #100371,72(sp)
    6f8a:	    clr.l 68(sp)
    6f8e:	    move.l 1a7a2 <SysBase>,d0
    6f94:	    movea.l d0,a6
    6f96:	    movea.l 72(sp),a1
    6f9a:	    move.l 68(sp),d0
    6f9e:	    jsr -552(a6)
    6fa2:	    move.l d0,64(sp)
    6fa6:	    move.l 64(sp),d0
    6faa:	    move.l d0,1a7be <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    6fb0:	    move.l 1a7be <MathIeeeDoubTransBase>,d0
    6fb6:	/-- bne.s 6fcc <main+0x190>
		Exit(0);
    6fb8:	|   clr.l 60(sp)
    6fbc:	|   move.l 1a7aa <DOSBase>,d0
    6fc2:	|   movea.l d0,a6
    6fc4:	|   move.l 60(sp),d1
    6fc8:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    6fcc:	\-> move.l #100397,56(sp)
    6fd4:	    clr.l 52(sp)
    6fd8:	    move.l 1a7a2 <SysBase>,d0
    6fde:	    movea.l d0,a6
    6fe0:	    movea.l 56(sp),a1
    6fe4:	    move.l 52(sp),d0
    6fe8:	    jsr -552(a6)
    6fec:	    move.l d0,48(sp)
    6ff0:	    move.l 48(sp),d0
    6ff4:	    move.l d0,1a7ba <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    6ffa:	    move.l 1a7ba <MathIeeeDoubBasBase>,d0
    7000:	/-- bne.s 7016 <main+0x1da>
		Exit(0);
    7002:	|   clr.l 44(sp)
    7006:	|   move.l 1a7aa <DOSBase>,d0
    700c:	|   movea.l d0,a6
    700e:	|   move.l 44(sp),d1
    7012:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 026!\n");
    7016:	\-> pea 18845 <PutChar+0x11c5>
    701c:	    jsr 16bac <KPrintF>
    7022:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 026!\n", 25);
    7024:	    move.l 1a7aa <DOSBase>,d0
    702a:	    movea.l d0,a6
    702c:	    jsr -60(a6)
    7030:	    move.l d0,40(sp)
    7034:	    move.l 40(sp),d0
    7038:	    move.l d0,36(sp)
    703c:	    move.l #100453,32(sp)
    7044:	    moveq #25,d0
    7046:	    move.l d0,28(sp)
    704a:	    move.l 1a7aa <DOSBase>,d0
    7050:	    movea.l d0,a6
    7052:	    move.l 36(sp),d1
    7056:	    move.l 32(sp),d2
    705a:	    move.l 28(sp),d3
    705e:	    jsr -48(a6)
    7062:	    move.l d0,24(sp)
	Delay(50);
    7066:	    moveq #50,d0
    7068:	    move.l d0,20(sp)
    706c:	    move.l 1a7aa <DOSBase>,d0
    7072:	    movea.l d0,a6
    7074:	    move.l 20(sp),d1
    7078:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    707c:	    pea 1887e <PutChar+0x11fe>
    7082:	    jsr 16bac <KPrintF>
    7088:	    addq.l #4,sp
	TakeSystem();
    708a:	    jsr 6ba2 <TakeSystem>
	KPrintF("System Taken\n");
    7090:	    pea 1888d <PutChar+0x120d>
    7096:	    jsr 16bac <KPrintF>
    709c:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    709e:	    movea.l 1a7a6 <custom>,a0
    70a4:	    move.w #-30721,150(a0)
	WaitVbl();
    70aa:	    jsr 16ae0 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    70b0:	    pea 1889b <PutChar+0x121b>
    70b6:	    jsr 16bac <KPrintF>
    70bc:	    addq.l #4,sp
	main_sludge(argc, argv);	
    70be:	    move.l 148(sp),-(sp)
    70c2:	    move.l 148(sp),-(sp)
    70c6:	    jsr 39d8 <main_sludge>
    70cc:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    70ce:	    jsr 6d2e <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    70d4:	    move.l 1a7aa <DOSBase>,16(sp)
    70dc:	    move.l 1a7a2 <SysBase>,d0
    70e2:	    movea.l d0,a6
    70e4:	    movea.l 16(sp),a1
    70e8:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    70ec:	    move.l 1a7ae <GfxBase>,12(sp)
    70f4:	    move.l 1a7a2 <SysBase>,d0
    70fa:	    movea.l d0,a6
    70fc:	    movea.l 12(sp),a1
    7100:	    jsr -414(a6)
    7104:	    moveq #0,d0
}
    7106:	    movem.l (sp)+,d2-d3/a6
    710a:	    lea 128(sp),sp
    710e:	    rts

00007110 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    7110:	    lea -16(sp),sp
    7114:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    7116:	    moveq #8,d0
    7118:	    move.l d0,16(sp)
    711c:	    clr.l 12(sp)
    7120:	    move.l 1a7a2 <SysBase>,d0
    7126:	    movea.l d0,a6
    7128:	    move.l 16(sp),d0
    712c:	    move.l 12(sp),d1
    7130:	    jsr -684(a6)
    7134:	    move.l d0,8(sp)
    7138:	    move.l 8(sp),d0
    713c:	    move.l d0,4(sp)
	if (!newStat) {
    7140:	/-- bne.s 7170 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    7142:	|   movea.l 1a12a <nowStatus>,a0
    7148:	|   move.l (a0),d0
    714a:	|   movea.l 4(sp),a0
    714e:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    7152:	|   pea 182f1 <PutChar+0xc71>
    7158:	|   jsr b8 <copyString>
    715e:	|   addq.l #4,sp
    7160:	|   movea.l 4(sp),a0
    7164:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    7166:	|   movea.l 1a12a <nowStatus>,a0
    716c:	|   move.l 4(sp),(a0)
	}
}
    7170:	\-> nop
    7172:	    movea.l (sp)+,a6
    7174:	    lea 16(sp),sp
    7178:	    rts

0000717a <clearStatusBar>:

void clearStatusBar () {
    717a:	       lea -16(sp),sp
    717e:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    7180:	       movea.l 1a12a <nowStatus>,a0
    7186:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    718a:	       movea.l 1a12a <nowStatus>,a0
    7190:	       moveq #-1,d0
    7192:	       move.l d0,6(a0)
	while (stat) {
    7196:	   /-- bra.s 71d6 <clearStatusBar+0x5c>
		kill = stat;
    7198:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    719e:	|  |   movea.l 16(sp),a0
    71a2:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    71a8:	|  |   movea.l 12(sp),a0
    71ac:	|  |   move.l (a0),8(sp)
    71b0:	|  |   move.l 1a7a2 <SysBase>,d0
    71b6:	|  |   movea.l d0,a6
    71b8:	|  |   movea.l 8(sp),a1
    71bc:	|  |   jsr -690(a6)
		FreeVec(kill);
    71c0:	|  |   move.l 12(sp),4(sp)
    71c6:	|  |   move.l 1a7a2 <SysBase>,d0
    71cc:	|  |   movea.l d0,a6
    71ce:	|  |   movea.l 4(sp),a1
    71d2:	|  |   jsr -690(a6)
	while (stat) {
    71d6:	|  \-> tst.l 16(sp)
    71da:	\----- bne.s 7198 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    71dc:	       movea.l 1a12a <nowStatus>,a0
    71e2:	       clr.l (a0)
}
    71e4:	       nop
    71e6:	       movea.l (sp)+,a6
    71e8:	       lea 16(sp),sp
    71ec:	       rts

000071ee <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    71ee:	clr.l 1a7d4 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    71f4:	move.w #-1,1a7d8 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    71fc:	moveq #-1,d0
    71fe:	move.l d0,1a7da <mainStatus+0x6>
	mainStatus.statusX = 10;
    7204:	moveq #10,d0
    7206:	move.l d0,1a7de <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    720c:	movea.l 1a6fa <winHeight>,a0
    7212:	lea -15(a0),a0
    7216:	move.l a0,d0
    7218:	move.l d0,1a7e2 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    721e:	nop
    7220:	rts

00007222 <killLastStatus>:

void killLastStatus () {
    7222:	    lea -12(sp),sp
    7226:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7228:	    movea.l 1a12a <nowStatus>,a0
    722e:	    move.l (a0),d0
    7230:	/-- beq.s 727a <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    7232:	|   movea.l 1a12a <nowStatus>,a0
    7238:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    723c:	|   movea.l 1a12a <nowStatus>,a0
    7242:	|   movea.l 12(sp),a1
    7246:	|   move.l 4(a1),d0
    724a:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    724c:	|   movea.l 12(sp),a0
    7250:	|   move.l (a0),8(sp)
    7254:	|   move.l 1a7a2 <SysBase>,d0
    725a:	|   movea.l d0,a6
    725c:	|   movea.l 8(sp),a1
    7260:	|   jsr -690(a6)
		FreeVec(kill);
    7264:	|   move.l 12(sp),4(sp)
    726a:	|   move.l 1a7a2 <SysBase>,d0
    7270:	|   movea.l d0,a6
    7272:	|   movea.l 4(sp),a1
    7276:	|   jsr -690(a6)
	}
}
    727a:	\-> nop
    727c:	    movea.l (sp)+,a6
    727e:	    lea 12(sp),sp
    7282:	    rts

00007284 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    7284:	movea.l 1a12a <nowStatus>,a0
    728a:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    7290:	movea.l 1a12a <nowStatus>,a0
    7296:	move.l 8(sp),14(a0)
}
    729c:	nop
    729e:	rts

000072a0 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    72a0:	       lea -100(sp),sp
    72a4:	       move.l a6,-(sp)
    72a6:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    72a8:	       movea.l 1a12a <nowStatus>,a0
    72ae:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    72b2:	       movea.l 1a12a <nowStatus>,a0
    72b8:	       move.w 4(a0),d0
    72bc:	       move.w d0,d0
    72be:	       andi.l #65535,d0
    72c4:	       move.l 112(sp),-(sp)
    72c8:	       move.l d0,-(sp)
    72ca:	       jsr 8d0 <put2bytes>
    72d0:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    72d2:	       movea.l 1a12a <nowStatus>,a0
    72d8:	       move.l 6(a0),d0
    72dc:	       move.l d0,d0
    72de:	       movea.w d0,a0
    72e0:	       move.l 112(sp),-(sp)
    72e4:	       move.l a0,-(sp)
    72e6:	       jsr a9c <putSigned>
    72ec:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    72ee:	       movea.l 1a12a <nowStatus>,a0
    72f4:	       move.l 10(a0),d0
    72f8:	       move.l 112(sp),-(sp)
    72fc:	       move.l d0,-(sp)
    72fe:	       jsr 8d0 <put2bytes>
    7304:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7306:	       movea.l 1a12a <nowStatus>,a0
    730c:	       move.l 14(a0),d0
    7310:	       move.l 112(sp),-(sp)
    7314:	       move.l d0,-(sp)
    7316:	       jsr 8d0 <put2bytes>
    731c:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    731e:	       move.l 112(sp),100(sp)
    7324:	       movea.l 1a12a <nowStatus>,a0
    732a:	       move.l 18(a0),96(sp)
    7330:	       move.l 1a7aa <DOSBase>,d0
    7336:	       movea.l d0,a6
    7338:	       move.l 100(sp),d1
    733c:	       move.l 96(sp),d2
    7340:	       jsr -312(a6)
    7344:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7348:	       move.l 112(sp),88(sp)
    734e:	       movea.l 1a12a <nowStatus>,a0
    7354:	       move.l 22(a0),84(sp)
    735a:	       move.l 1a7aa <DOSBase>,d0
    7360:	       movea.l d0,a6
    7362:	       move.l 88(sp),d1
    7366:	       move.l 84(sp),d2
    736a:	       jsr -312(a6)
    736e:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    7372:	       move.l 112(sp),76(sp)
    7378:	       movea.l 1a12a <nowStatus>,a0
    737e:	       move.l 26(a0),72(sp)
    7384:	       move.l 1a7aa <DOSBase>,d0
    738a:	       movea.l d0,a6
    738c:	       move.l 76(sp),d1
    7390:	       move.l 72(sp),d2
    7394:	       jsr -312(a6)
    7398:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    739c:	       move.l 112(sp),64(sp)
    73a2:	       movea.l 1a12a <nowStatus>,a0
    73a8:	       move.l 30(a0),60(sp)
    73ae:	       move.l 1a7aa <DOSBase>,d0
    73b4:	       movea.l d0,a6
    73b6:	       move.l 64(sp),d1
    73ba:	       move.l 60(sp),d2
    73be:	       jsr -312(a6)
    73c2:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    73c6:	       move.l 112(sp),52(sp)
    73cc:	       movea.l 1a12a <nowStatus>,a0
    73d2:	       move.l 34(a0),48(sp)
    73d8:	       move.l 1a7aa <DOSBase>,d0
    73de:	       movea.l d0,a6
    73e0:	       move.l 52(sp),d1
    73e4:	       move.l 48(sp),d2
    73e8:	       jsr -312(a6)
    73ec:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    73f0:	       move.l 112(sp),40(sp)
    73f6:	       movea.l 1a12a <nowStatus>,a0
    73fc:	       move.l 38(a0),36(sp)
    7402:	       move.l 1a7aa <DOSBase>,d0
    7408:	       movea.l d0,a6
    740a:	       move.l 40(sp),d1
    740e:	       move.l 36(sp),d2
    7412:	       jsr -312(a6)
    7416:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    741a:	   /-- bra.s 745e <saveStatusBars+0x1be>
		FPutC (fp,1);
    741c:	/--|-> move.l 112(sp),16(sp)
    7422:	|  |   moveq #1,d0
    7424:	|  |   move.l d0,12(sp)
    7428:	|  |   move.l 1a7aa <DOSBase>,d0
    742e:	|  |   movea.l d0,a6
    7430:	|  |   move.l 16(sp),d1
    7434:	|  |   move.l 12(sp),d2
    7438:	|  |   jsr -312(a6)
    743c:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7440:	|  |   movea.l 104(sp),a0
    7444:	|  |   move.l (a0),d0
    7446:	|  |   move.l 112(sp),-(sp)
    744a:	|  |   move.l d0,-(sp)
    744c:	|  |   jsr bd8 <writeString>
    7452:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7454:	|  |   movea.l 104(sp),a0
    7458:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    745e:	|  \-> tst.l 104(sp)
    7462:	\----- bne.s 741c <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7464:	       move.l 112(sp),28(sp)
    746a:	       clr.l 24(sp)
    746e:	       move.l 1a7aa <DOSBase>,d0
    7474:	       movea.l d0,a6
    7476:	       move.l 28(sp),d1
    747a:	       move.l 24(sp),d2
    747e:	       jsr -312(a6)
    7482:	       move.l d0,20(sp)
}
    7486:	       nop
    7488:	       move.l (sp)+,d2
    748a:	       movea.l (sp)+,a6
    748c:	       lea 100(sp),sp
    7490:	       rts

00007492 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7492:	movea.l 1a12a <nowStatus>,a0
    7498:	move.l 4(sp),6(a0)
}
    749e:	nop
    74a0:	rts

000074a2 <setStatusBar>:

void setStatusBar (char * txt) {
    74a2:	    subq.l #4,sp
    74a4:	    move.l a6,-(sp)
    74a6:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    74a8:	    movea.l 1a12a <nowStatus>,a0
    74ae:	    move.l (a0),d0
    74b0:	/-- beq.s 74e4 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    74b2:	|   movea.l 1a12a <nowStatus>,a0
    74b8:	|   movea.l (a0),a0
    74ba:	|   move.l (a0),8(sp)
    74be:	|   move.l 1a7a2 <SysBase>,d0
    74c4:	|   movea.l d0,a6
    74c6:	|   movea.l 8(sp),a1
    74ca:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    74ce:	|   movea.l 1a12a <nowStatus>,a0
    74d4:	|   movea.l (a0),a2
    74d6:	|   move.l 16(sp),-(sp)
    74da:	|   jsr b8 <copyString>
    74e0:	|   addq.l #4,sp
    74e2:	|   move.l d0,(a2)
	}
}
    74e4:	\-> nop
    74e6:	    movea.l (sp)+,a2
    74e8:	    movea.l (sp)+,a6
    74ea:	    addq.l #4,sp
    74ec:	    rts

000074ee <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    74ee:	       movea.l 1a12a <nowStatus>,a0
    74f4:	       move.l (a0),d0
    74f6:	/----- beq.s 7504 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    74f8:	|      movea.l 1a12a <nowStatus>,a0
    74fe:	|      movea.l (a0),a0
    7500:	|      move.l (a0),d0
    7502:	|  /-- bra.s 750a <statusBarText+0x1c>
	} else {
		return "";
    7504:	\--|-> move.l #99057,d0
	}
    750a:	   \-> rts

0000750c <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    750c:	       lea -28(sp),sp
    7510:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7514:	       move.l 52(sp),-(sp)
    7518:	       jsr 1526e <stringWidth>
    751e:	       addq.l #4,sp
    7520:	       asr.l #1,d0
    7522:	       move.l d0,-(sp)
    7524:	       jsr 16fe8 <__floatsisf>
    752a:	       addq.l #4,sp
    752c:	       move.l d0,d1
    752e:	       move.l 1a142 <cameraZoom>,d0
    7534:	       move.l d0,-(sp)
    7536:	       move.l d1,-(sp)
    7538:	       jsr 16e94 <__divsf3>
    753e:	       addq.l #8,sp
    7540:	       move.l d0,-(sp)
    7542:	       jsr 16f80 <__fixsfsi>
    7548:	       addq.l #4,sp
    754a:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    754e:	       move.l 56(sp),d0
    7552:	       sub.l 44(sp),d0
    7556:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    755a:	       move.l 56(sp),d0
    755e:	       add.l 44(sp),d0
    7562:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7566:	       moveq #12,d0
    7568:	       move.l d0,32(sp)
    756c:	       clr.l 28(sp)
    7570:	       move.l 1a7a2 <SysBase>,d0
    7576:	       movea.l d0,a6
    7578:	       move.l 32(sp),d0
    757c:	       move.l 28(sp),d1
    7580:	       jsr -684(a6)
    7584:	       move.l d0,24(sp)
    7588:	       move.l 24(sp),d0
    758c:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7590:	       movea.l 1a7fe <speech>,a0
    7596:	       move.l 4(a0),d0
    759a:	       movea.l 20(sp),a0
    759e:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    75a2:	       move.l 52(sp),-(sp)
    75a6:	       jsr b8 <copyString>
    75ac:	       addq.l #4,sp
    75ae:	       movea.l 20(sp),a0
    75b2:	       move.l d0,(a0)
	newLine -> x = xx1;
    75b4:	       movea.l 20(sp),a0
    75b8:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    75be:	       movea.l 1a7fe <speech>,a0
    75c4:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    75ca:	       moveq #4,d0
    75cc:	       cmp.l 40(sp),d0
    75d0:	   /-- blt.s 75f2 <addSpeechLine+0xe6>
    75d2:	   |   movea.l 60(sp),a0
    75d6:	   |   move.l (a0),d1
    75d8:	   |   moveq #5,d0
    75da:	   |   sub.l 40(sp),d0
    75de:	   |   cmp.l d1,d0
    75e0:	   +-- ble.s 75f2 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    75e2:	   |   moveq #5,d0
    75e4:	   |   sub.l 40(sp),d0
    75e8:	   |   movea.l 60(sp),a0
    75ec:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    75ee:	/--|-- bra.w 771e <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    75f2:	|  \-> move.l 36(sp),-(sp)
    75f6:	|      jsr 16fe8 <__floatsisf>
    75fc:	|      addq.l #4,sp
    75fe:	|      move.l d0,d2
    7600:	|      move.l 1a6f6 <winWidth>,d0
    7606:	|      move.l d0,-(sp)
    7608:	|      jsr 17010 <__floatunsisf>
    760e:	|      addq.l #4,sp
    7610:	|      move.l d0,d1
    7612:	|      move.l 1a142 <cameraZoom>,d0
    7618:	|      move.l d0,-(sp)
    761a:	|      move.l d1,-(sp)
    761c:	|      jsr 16e94 <__divsf3>
    7622:	|      addq.l #8,sp
    7624:	|      move.l #1084227584,-(sp)
    762a:	|      move.l d0,-(sp)
    762c:	|      jsr 172dc <__subsf3>
    7632:	|      addq.l #8,sp
    7634:	|      move.l d0,-(sp)
    7636:	|      move.l d2,-(sp)
    7638:	|      jsr 170d0 <__gesf2>
    763e:	|      addq.l #8,sp
    7640:	|      tst.l d0
    7642:	|  /-- bge.s 7648 <addSpeechLine+0x13c>
}
    7644:	+--|-- bra.w 771e <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7648:	|  \-> movea.l 60(sp),a0
    764c:	|      move.l (a0),d0
    764e:	|      move.l d0,-(sp)
    7650:	|      jsr 16fe8 <__floatsisf>
    7656:	|      addq.l #4,sp
    7658:	|      move.l d0,-(sp)
    765a:	|      jsr 16f00 <__extendsfdf2>
    7660:	|      addq.l #4,sp
    7662:	|      move.l d0,d4
    7664:	|      move.l d1,d5
    7666:	|      move.l 1a6f6 <winWidth>,d0
    766c:	|      move.l d0,-(sp)
    766e:	|      jsr 17010 <__floatunsisf>
    7674:	|      addq.l #4,sp
    7676:	|      move.l d0,d1
    7678:	|      move.l 1a142 <cameraZoom>,d0
    767e:	|      move.l d0,-(sp)
    7680:	|      move.l d1,-(sp)
    7682:	|      jsr 16e94 <__divsf3>
    7688:	|      addq.l #8,sp
    768a:	|      move.l d0,-(sp)
    768c:	|      jsr 16f00 <__extendsfdf2>
    7692:	|      addq.l #4,sp
    7694:	|      clr.l -(sp)
    7696:	|      move.l #1075052544,-(sp)
    769c:	|      move.l d1,-(sp)
    769e:	|      move.l d0,-(sp)
    76a0:	|      jsr 1727a <__subdf3>
    76a6:	|      lea 16(sp),sp
    76aa:	|      move.l d0,d2
    76ac:	|      move.l d1,d3
    76ae:	|      move.l 36(sp),-(sp)
    76b2:	|      jsr 16fa8 <__floatsidf>
    76b8:	|      addq.l #4,sp
    76ba:	|      move.l d1,-(sp)
    76bc:	|      move.l d0,-(sp)
    76be:	|      move.l d3,-(sp)
    76c0:	|      move.l d2,-(sp)
    76c2:	|      jsr 1727a <__subdf3>
    76c8:	|      lea 16(sp),sp
    76cc:	|      move.l d1,-(sp)
    76ce:	|      move.l d0,-(sp)
    76d0:	|      move.l d5,-(sp)
    76d2:	|      move.l d4,-(sp)
    76d4:	|      jsr 17106 <__gtdf2>
    76da:	|      lea 16(sp),sp
    76de:	|      tst.l d0
    76e0:	|  /-- bgt.s 76e4 <addSpeechLine+0x1d8>
}
    76e2:	+--|-- bra.s 771e <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    76e4:	|  \-> move.l 1a6f6 <winWidth>,d0
    76ea:	|      move.l d0,-(sp)
    76ec:	|      jsr 17010 <__floatunsisf>
    76f2:	|      addq.l #4,sp
    76f4:	|      move.l d0,d1
    76f6:	|      move.l 1a142 <cameraZoom>,d0
    76fc:	|      move.l d0,-(sp)
    76fe:	|      move.l d1,-(sp)
    7700:	|      jsr 16e94 <__divsf3>
    7706:	|      addq.l #8,sp
    7708:	|      move.l d0,-(sp)
    770a:	|      jsr 16f80 <__fixsfsi>
    7710:	|      addq.l #4,sp
    7712:	|      subq.l #5,d0
    7714:	|      sub.l 36(sp),d0
    7718:	|      movea.l 60(sp),a0
    771c:	|      move.l d0,(a0)
}
    771e:	\----> nop
    7720:	       movem.l (sp)+,d2-d5/a6
    7724:	       lea 28(sp),sp
    7728:	       rts

0000772a <initSpeech>:


void initSpeech () {
    772a:	       lea -12(sp),sp
    772e:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7730:	       moveq #20,d0
    7732:	       move.l d0,12(sp)
    7736:	       clr.l 8(sp)
    773a:	       move.l 1a7a2 <SysBase>,d0
    7740:	       movea.l d0,a6
    7742:	       move.l 12(sp),d0
    7746:	       move.l 8(sp),d1
    774a:	       jsr -684(a6)
    774e:	       move.l d0,4(sp)
    7752:	       move.l 4(sp),d0
    7756:	       move.l d0,1a7fe <speech>
	if (speech) {
    775c:	       move.l 1a7fe <speech>,d0
    7762:	/----- beq.s 778e <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7764:	|      movea.l 1a7fe <speech>,a0
    776a:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    776c:	|      movea.l 1a7fe <speech>,a0
    7772:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7776:	|      movea.l 1a7fe <speech>,a0
    777c:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7780:	|      movea.l 1a7fe <speech>,a0
    7786:	|      moveq #-1,d0
    7788:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    778c:	|  /-- bra.s 779c <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    778e:	\--|-> pea 188d8 <PutChar+0x1258>
    7794:	   |   jsr 16bac <KPrintF>
    779a:	   |   addq.l #4,sp
}
    779c:	   \-> nop
    779e:	       movea.l (sp)+,a6
    77a0:	       lea 12(sp),sp
    77a4:	       rts

000077a6 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    77a6:	       movea.l 1a7fe <speech>,a0
    77ac:	       move.l 4(a0),d0
    77b0:	/----- beq.s 77be <isThereAnySpeechGoingOn+0x18>
    77b2:	|      movea.l 1a7fe <speech>,a0
    77b8:	|      move.l 16(a0),d0
    77bc:	|  /-- bra.s 77c0 <isThereAnySpeechGoingOn+0x1a>
    77be:	\--|-> moveq #-1,d0
}
    77c0:	   \-> rts

000077c2 <killAllSpeech>:

void killAllSpeech () {
    77c2:	       lea -12(sp),sp
    77c6:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    77c8:	       movea.l 1a7fe <speech>,a0
    77ce:	       move.l 12(a0),d0
    77d2:	       moveq #-1,d1
    77d4:	       cmp.l d0,d1
    77d6:	   /-- beq.s 77e4 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    77d8:	   |   movea.l 1a7fe <speech>,a0
    77de:	   |   moveq #-1,d0
    77e0:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    77e4:	   \-> movea.l 1a7fe <speech>,a0
    77ea:	       move.l (a0),d0
    77ec:	/----- beq.w 7878 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    77f0:	|      movea.l 1a7fe <speech>,a0
    77f6:	|      move.l (a0),d1
    77f8:	|      lea -132(sp),sp
    77fc:	|      move.l sp,d0
    77fe:	|      movea.w #132,a0
    7802:	|      move.l a0,-(sp)
    7804:	|      move.l d1,-(sp)
    7806:	|      move.l d0,-(sp)
    7808:	|      jsr 16b60 <memcpy>
    780e:	|      lea 12(sp),sp
    7812:	|      jsr a5bc <makeSilent>
    7818:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    781c:	|      movea.l 1a7fe <speech>,a0
    7822:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7824:	+----- bra.s 7878 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7826:	|  /-> movea.l 1a7fe <speech>,a0
    782c:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7832:	|  |   movea.l 1a7fe <speech>,a0
    7838:	|  |   movea.l 4(a0),a1
    783c:	|  |   movea.l 1a7fe <speech>,a0
    7842:	|  |   move.l 4(a1),d0
    7846:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    784a:	|  |   movea.l 12(sp),a0
    784e:	|  |   move.l (a0),8(sp)
    7852:	|  |   move.l 1a7a2 <SysBase>,d0
    7858:	|  |   movea.l d0,a6
    785a:	|  |   movea.l 8(sp),a1
    785e:	|  |   jsr -690(a6)
		FreeVec(killMe);
    7862:	|  |   move.l 12(sp),4(sp)
    7868:	|  |   move.l 1a7a2 <SysBase>,d0
    786e:	|  |   movea.l d0,a6
    7870:	|  |   movea.l 4(sp),a1
    7874:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    7878:	\--|-> movea.l 1a7fe <speech>,a0
    787e:	   |   move.l 4(a0),d0
    7882:	   \-- bne.s 7826 <killAllSpeech+0x64>
	}
}
    7884:	       nop
    7886:	       nop
    7888:	       movea.l (sp)+,a6
    788a:	       lea 12(sp),sp
    788e:	       rts

00007890 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    7890:	pea 2 <_start+0x2>
    7894:	move.l 8(sp),-(sp)
    7898:	jsr 79f0 <setFrames>
    789e:	addq.l #8,sp
}
    78a0:	nop
    78a2:	rts

000078a4 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    78a4:	       lea -52(sp),sp
    78a8:	       move.l a6,-(sp)
    78aa:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    78ac:	       movea.l 64(sp),a0
    78b0:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    78b6:	       move.l 1a12e <speechSpeed>,d0
    78bc:	       move.l 68(sp),-(sp)
    78c0:	       move.l d0,-(sp)
    78c2:	       jsr a46 <putFloat>
    78c8:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    78ca:	       movea.l 64(sp),a0
    78ce:	       move.l 8(a0),d0
    78d2:	       move.l 68(sp),-(sp)
    78d6:	       move.l d0,-(sp)
    78d8:	       jsr 8d0 <put2bytes>
    78de:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    78e0:	       movea.l 64(sp),a0
    78e4:	       move.l 16(a0),d0
    78e8:	       move.l 68(sp),-(sp)
    78ec:	       move.l d0,-(sp)
    78ee:	       jsr 8d0 <put2bytes>
    78f4:	       addq.l #8,sp
		if (sS -> currentTalker) {
    78f6:	       movea.l 64(sp),a0
    78fa:	       move.l (a0),d0
    78fc:	   /-- beq.s 7940 <saveSpeech+0x9c>
			FPutC (fp, 1);
    78fe:	   |   move.l 68(sp),40(sp)
    7904:	   |   moveq #1,d0
    7906:	   |   move.l d0,36(sp)
    790a:	   |   move.l 1a7aa <DOSBase>,d0
    7910:	   |   movea.l d0,a6
    7912:	   |   move.l 40(sp),d1
    7916:	   |   move.l 36(sp),d2
    791a:	   |   jsr -312(a6)
    791e:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    7922:	   |   movea.l 64(sp),a0
    7926:	   |   movea.l (a0),a0
    7928:	   |   movea.l 114(a0),a0
    792c:	   |   move.l 4(a0),d0
    7930:	   |   move.l 68(sp),-(sp)
    7934:	   |   move.l d0,-(sp)
    7936:	   |   jsr 8d0 <put2bytes>
    793c:	   |   addq.l #8,sp
    793e:	/--|-- bra.s 79bc <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    7940:	|  \-> move.l 68(sp),52(sp)
    7946:	|      clr.l 48(sp)
    794a:	|      move.l 1a7aa <DOSBase>,d0
    7950:	|      movea.l d0,a6
    7952:	|      move.l 52(sp),d1
    7956:	|      move.l 48(sp),d2
    795a:	|      jsr -312(a6)
    795e:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    7962:	+----- bra.s 79bc <saveSpeech+0x118>
			FPutC (fp, 1);
    7964:	|  /-> move.l 68(sp),16(sp)
    796a:	|  |   moveq #1,d0
    796c:	|  |   move.l d0,12(sp)
    7970:	|  |   move.l 1a7aa <DOSBase>,d0
    7976:	|  |   movea.l d0,a6
    7978:	|  |   move.l 16(sp),d1
    797c:	|  |   move.l 12(sp),d2
    7980:	|  |   jsr -312(a6)
    7984:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    7988:	|  |   movea.l 56(sp),a0
    798c:	|  |   move.l (a0),d0
    798e:	|  |   move.l 68(sp),-(sp)
    7992:	|  |   move.l d0,-(sp)
    7994:	|  |   jsr bd8 <writeString>
    799a:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    799c:	|  |   movea.l 56(sp),a0
    79a0:	|  |   move.l 8(a0),d0
    79a4:	|  |   move.l 68(sp),-(sp)
    79a8:	|  |   move.l d0,-(sp)
    79aa:	|  |   jsr 8d0 <put2bytes>
    79b0:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    79b2:	|  |   movea.l 56(sp),a0
    79b6:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    79bc:	\--|-> tst.l 56(sp)
    79c0:	   \-- bne.s 7964 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    79c2:	       move.l 68(sp),28(sp)
    79c8:	       clr.l 24(sp)
    79cc:	       move.l 1a7aa <DOSBase>,d0
    79d2:	       movea.l d0,a6
    79d4:	       move.l 28(sp),d1
    79d8:	       move.l 24(sp),d2
    79dc:	       jsr -312(a6)
    79e0:	       move.l d0,20(sp)
}
    79e4:	       nop
    79e6:	       move.l (sp)+,d2
    79e8:	       movea.l (sp)+,a6
    79ea:	       lea 52(sp),sp
    79ee:	       rts

000079f0 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    79f0:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    79f2:	movea.l 8(sp),a0
    79f6:	movea.l 80(a0),a0
    79fa:	move.l (a0),d2
    79fc:	movea.l 8(sp),a0
    7a00:	movea.l 80(a0),a0
    7a04:	move.l 4(a0),d0
    7a08:	move.l 12(sp),-(sp)
    7a0c:	move.l d0,-(sp)
    7a0e:	jsr 1756a <__mulsi3>
    7a14:	addq.l #8,sp
    7a16:	move.l d0,d1
    7a18:	movea.l 8(sp),a0
    7a1c:	move.l 106(a0),d0
    7a20:	add.l d1,d0
    7a22:	add.l d0,d0
    7a24:	add.l d0,d0
    7a26:	movea.l d2,a0
    7a28:	adda.l d0,a0
    7a2a:	move.l (a0),d0
    7a2c:	movea.l 8(sp),a0
    7a30:	move.l d0,72(a0)
}
    7a34:	nop
    7a36:	move.l (sp)+,d2
    7a38:	rts

00007a3a <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    7a3a:	       lea -20(sp),sp
    7a3e:	       move.l d2,-(sp)
    7a40:	       move.l 40(sp),d0
    7a44:	       move.w d0,d0
    7a46:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    7a4a:	       movea.l 1a7fe <speech>,a0
    7a50:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    7a56:	       move.l 32(sp),-(sp)
    7a5a:	       jsr a0a6 <findPerson>
    7a60:	       addq.l #4,sp
    7a62:	       move.l d0,16(sp)
    if (thisPerson) {
    7a66:	   /-- beq.s 7a8c <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    7a68:	   |   movea.w 6(sp),a0
    7a6c:	   |   move.l a0,-(sp)
    7a6e:	   |   move.l 40(sp),-(sp)
    7a72:	   |   move.l 24(sp),-(sp)
    7a76:	   |   move.l 40(sp),-(sp)
    7a7a:	   |   jsr 7b52 <wrapSpeechPerson>
    7a80:	   |   lea 16(sp),sp
    7a84:	   |   move.l d0,20(sp)
    7a88:	/--|-- bra.w 7b46 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    7a8c:	|  \-> move.l 32(sp),-(sp)
    7a90:	|      jsr 153ce <getRegionForObject>
    7a96:	|      addq.l #4,sp
    7a98:	|      move.l d0,12(sp)
        if (thisRegion) {
    7a9c:	|  /-- beq.s 7b08 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    7a9e:	|  |   movea.l 12(sp),a0
    7aa2:	|  |   movea.l 28(a0),a0
    7aa6:	|  |   move.l 28(a0),d0
    7aaa:	|  |   movea.l 12(sp),a0
    7aae:	|  |   movea.l 4(a0),a1
    7ab2:	|  |   movea.l 12(sp),a0
    7ab6:	|  |   movea.l 28(a0),a0
    7aba:	|  |   move.l 20(a0),d1
    7abe:	|  |   movea.l a1,a0
    7ac0:	|  |   suba.l d1,a0
    7ac2:	|  |   move.l 1a8b8 <cameraY>,d1
    7ac8:	|  |   movea.l a0,a1
    7aca:	|  |   suba.l d1,a1
    7acc:	|  |   movea.l 12(sp),a0
    7ad0:	|  |   move.l (a0),d2
    7ad2:	|  |   movea.l 12(sp),a0
    7ad6:	|  |   move.l 8(a0),d1
    7ada:	|  |   add.l d2,d1
    7adc:	|  |   move.l d1,d2
    7ade:	|  |   asr.l #1,d2
    7ae0:	|  |   move.l 1a8b4 <cameraX>,d1
    7ae6:	|  |   movea.l d2,a0
    7ae8:	|  |   suba.l d1,a0
    7aea:	|  |   move.l 36(sp),-(sp)
    7aee:	|  |   move.l d0,-(sp)
    7af0:	|  |   move.l a1,-(sp)
    7af2:	|  |   move.l a0,-(sp)
    7af4:	|  |   move.l 44(sp),-(sp)
    7af8:	|  |   jsr 7c70 <wrapSpeechXY>
    7afe:	|  |   lea 20(sp),sp
    7b02:	|  |   move.l d0,20(sp)
    7b06:	+--|-- bra.s 7b46 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    7b08:	|  \-> move.l 32(sp),-(sp)
    7b0c:	|      jsr cf80 <findObjectType>
    7b12:	|      addq.l #4,sp
    7b14:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    7b18:	|      movea.l 8(sp),a0
    7b1c:	|      move.l 28(a0),d1
    7b20:	|      move.l 1a6f6 <winWidth>,d0
    7b26:	|      lsr.l #1,d0
    7b28:	|      move.l 36(sp),-(sp)
    7b2c:	|      move.l d1,-(sp)
    7b2e:	|      pea a <_start+0xa>
    7b32:	|      move.l d0,-(sp)
    7b34:	|      move.l 44(sp),-(sp)
    7b38:	|      jsr 7c70 <wrapSpeechXY>
    7b3e:	|      lea 20(sp),sp
    7b42:	|      move.l d0,20(sp)
        }
    }
    return i;
    7b46:	\----> move.l 20(sp),d0
}
    7b4a:	       move.l (sp)+,d2
    7b4c:	       lea 20(sp),sp
    7b50:	       rts

00007b52 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    7b52:	    subq.l #8,sp
    7b54:	    movem.l d2-d4,-(sp)
    7b58:	    move.l 36(sp),d0
    7b5c:	    move.w d0,d0
    7b5e:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    7b62:	    movea.l 28(sp),a0
    7b66:	    movea.l 114(a0),a0
    7b6a:	    move.l 28(a0),d2
    7b6e:	    movea.l 28(sp),a0
    7b72:	    move.l 4(a0),d3
    7b76:	    move.l 1a8b8 <cameraY>,d0
    7b7c:	    move.l d0,-(sp)
    7b7e:	    jsr 16fe8 <__floatsisf>
    7b84:	    addq.l #4,sp
    7b86:	    move.l d0,-(sp)
    7b88:	    move.l d3,-(sp)
    7b8a:	    jsr 172dc <__subsf3>
    7b90:	    addq.l #8,sp
    7b92:	    move.l d0,d3
    7b94:	    movea.l 28(sp),a0
    7b98:	    move.l 32(a0),d4
    7b9c:	    movea.l 28(sp),a0
    7ba0:	    move.l 20(a0),d1
    7ba4:	    movea.l 28(sp),a0
    7ba8:	    move.l 24(a0),d0
    7bac:	    sub.l d0,d1
    7bae:	    move.l d1,-(sp)
    7bb0:	    jsr 16fe8 <__floatsisf>
    7bb6:	    addq.l #4,sp
    7bb8:	    move.l d0,-(sp)
    7bba:	    move.l d4,-(sp)
    7bbc:	    jsr 1709a <__mulsf3>
    7bc2:	    addq.l #8,sp
    7bc4:	    move.l d0,-(sp)
    7bc6:	    move.l d3,-(sp)
    7bc8:	    jsr 172dc <__subsf3>
    7bce:	    addq.l #8,sp
    7bd0:	    move.l d0,d3
    7bd2:	    movea.l 28(sp),a0
    7bd6:	    movea.l 114(a0),a0
    7bda:	    move.l 20(a0),d0
    7bde:	    move.l d0,-(sp)
    7be0:	    jsr 16fe8 <__floatsisf>
    7be6:	    addq.l #4,sp
    7be8:	    move.l d0,-(sp)
    7bea:	    move.l d3,-(sp)
    7bec:	    jsr 172dc <__subsf3>
    7bf2:	    addq.l #8,sp
    7bf4:	    move.l d0,-(sp)
    7bf6:	    jsr 16f80 <__fixsfsi>
    7bfc:	    addq.l #4,sp
    7bfe:	    move.l d0,d4
    7c00:	    movea.l 28(sp),a0
    7c04:	    move.l (a0),d3
    7c06:	    move.l 1a8b4 <cameraX>,d0
    7c0c:	    move.l d0,-(sp)
    7c0e:	    jsr 16fe8 <__floatsisf>
    7c14:	    addq.l #4,sp
    7c16:	    move.l d0,-(sp)
    7c18:	    move.l d3,-(sp)
    7c1a:	    jsr 172dc <__subsf3>
    7c20:	    addq.l #8,sp
    7c22:	    move.l d0,-(sp)
    7c24:	    jsr 16f80 <__fixsfsi>
    7c2a:	    addq.l #4,sp
    7c2c:	    move.l 32(sp),-(sp)
    7c30:	    move.l d2,-(sp)
    7c32:	    move.l d4,-(sp)
    7c34:	    move.l d0,-(sp)
    7c36:	    move.l 40(sp),-(sp)
    7c3a:	    jsr 7c70 <wrapSpeechXY>
    7c40:	    lea 20(sp),sp
    7c44:	    move.l d0,16(sp)
	if (animPerson) {
    7c48:	    tst.w 14(sp)
    7c4c:	/-- beq.s 7c64 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    7c4e:	|   move.l 28(sp),-(sp)
    7c52:	|   jsr 7890 <makeTalker>
    7c58:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    7c5a:	|   movea.l 1a7fe <speech>,a0
    7c60:	|   move.l 28(sp),(a0)
	}
	return i;
    7c64:	\-> move.l 16(sp),d0
}
    7c68:	    movem.l (sp)+,d2-d4
    7c6c:	    addq.l #8,sp
    7c6e:	    rts

00007c70 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    7c70:	                   lea -16(sp),sp
    7c74:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    7c78:	                   clr.l 16(sp)
    killAllSpeech();
    7c7c:	                   jsr 77c2 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    7c82:	                   move.l 36(sp),-(sp)
    7c86:	                   jsr 1369a <strlen>
    7c8c:	                   addq.l #4,sp
    7c8e:	                   movea.l d0,a0
    7c90:	                   lea 20(a0),a0
    7c94:	                   move.l a0,-(sp)
    7c96:	                   jsr 17010 <__floatunsisf>
    7c9c:	                   addq.l #4,sp
    7c9e:	                   move.l d0,d1
    7ca0:	                   move.l 1a12e <speechSpeed>,d0
    7ca6:	                   move.l d0,-(sp)
    7ca8:	                   move.l d1,-(sp)
    7caa:	                   jsr 1709a <__mulsf3>
    7cb0:	                   addq.l #8,sp
    7cb2:	                   move.l d0,-(sp)
    7cb4:	                   jsr 16f80 <__fixsfsi>
    7cba:	                   addq.l #4,sp
    7cbc:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    7cc0:	               /-- bgt.s 7cc8 <wrapSpeechXY+0x58>
    7cc2:	               |   moveq #1,d0
    7cc4:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    7cc8:	               \-> moveq #-1,d1
    7cca:	                   cmp.l 52(sp),d1
    7cce:	               /-- beq.s 7d0e <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    7cd0:	               |   move.l 1a8c8 <speechMode>,d0
    7cd6:	               +-- ble.s 7d0e <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    7cd8:	               |   clr.l -(sp)
    7cda:	               |   move.l 56(sp),-(sp)
    7cde:	               |   jsr cc4a <startSound>
    7ce4:	               |   addq.l #8,sp
    7ce6:	               |   tst.w d0
    7ce8:	               +-- beq.s 7d0e <wrapSpeechXY+0x9e>
                speechTime = -10;
    7cea:	               |   moveq #-10,d0
    7cec:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    7cf0:	               |   movea.l 1a7fe <speech>,a0
    7cf6:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    7cfc:	               |   move.l 1a8c8 <speechMode>,d0
    7d02:	               |   moveq #2,d1
    7d04:	               |   cmp.l d0,d1
    7d06:	               +-- bne.s 7d0e <wrapSpeechXY+0x9e>
    7d08:	               |   moveq #-10,d0
    7d0a:	/--------------|-- bra.w 7f94 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    7d0e:	|              \-> movea.l 1a7fe <speech>,a0
    7d14:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    7d1a:	|     /----------- bra.w 7dce <wrapSpeechXY+0x15e>
        a = wrap;
    7d1e:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    7d24:	|  |  |        /-- bra.s 7d34 <wrapSpeechXY+0xc4>
            a--;
    7d26:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    7d2a:	|  |  |  |     +-- bne.s 7d34 <wrapSpeechXY+0xc4>
                a = wrap;
    7d2c:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    7d32:	|  |  |  |  /--|-- bra.s 7d46 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    7d34:	|  |  |  |  |  \-> move.l 28(sp),d0
    7d38:	|  |  |  |  |      movea.l 36(sp),a0
    7d3c:	|  |  |  |  |      adda.l d0,a0
    7d3e:	|  |  |  |  |      move.b (a0),d0
    7d40:	|  |  |  |  |      cmpi.b #32,d0
    7d44:	|  |  |  \--|----- bne.s 7d26 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    7d46:	|  |  |     \----> move.l 28(sp),d0
    7d4a:	|  |  |            movea.l 36(sp),a0
    7d4e:	|  |  |            adda.l d0,a0
    7d50:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    7d52:	|  |  |            lea 16(sp),a0
    7d56:	|  |  |            move.l a0,-(sp)
    7d58:	|  |  |            move.l 44(sp),-(sp)
    7d5c:	|  |  |            move.l 44(sp),-(sp)
    7d60:	|  |  |            jsr 750c <addSpeechLine>
    7d66:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    7d6a:	|  |  |            move.l 28(sp),d0
    7d6e:	|  |  |            movea.l 36(sp),a0
    7d72:	|  |  |            adda.l d0,a0
    7d74:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    7d78:	|  |  |            move.l 28(sp),d0
    7d7c:	|  |  |            addq.l #1,d0
    7d7e:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    7d82:	|  |  |            move.l 44(sp),-(sp)
    7d86:	|  |  |            jsr 16fe8 <__floatsisf>
    7d8c:	|  |  |            addq.l #4,sp
    7d8e:	|  |  |            move.l d0,d2
    7d90:	|  |  |            move.l 1a8f2 <fontHeight>,d0
    7d96:	|  |  |            move.l d0,-(sp)
    7d98:	|  |  |            jsr 16fe8 <__floatsisf>
    7d9e:	|  |  |            addq.l #4,sp
    7da0:	|  |  |            move.l d0,d1
    7da2:	|  |  |            move.l 1a142 <cameraZoom>,d0
    7da8:	|  |  |            move.l d0,-(sp)
    7daa:	|  |  |            move.l d1,-(sp)
    7dac:	|  |  |            jsr 16e94 <__divsf3>
    7db2:	|  |  |            addq.l #8,sp
    7db4:	|  |  |            move.l d0,-(sp)
    7db6:	|  |  |            move.l d2,-(sp)
    7db8:	|  |  |            jsr 172dc <__subsf3>
    7dbe:	|  |  |            addq.l #8,sp
    7dc0:	|  |  |            move.l d0,-(sp)
    7dc2:	|  |  |            jsr 16f80 <__fixsfsi>
    7dc8:	|  |  |            addq.l #4,sp
    7dca:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    7dce:	|  |  \----------> move.l 36(sp),-(sp)
    7dd2:	|  |               jsr 1369a <strlen>
    7dd8:	|  |               addq.l #4,sp
    7dda:	|  |               move.l d0,d1
    7ddc:	|  |               move.l 48(sp),d0
    7de0:	|  |               cmp.l d1,d0
    7de2:	|  \-------------- bcs.w 7d1e <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    7de6:	|                  lea 16(sp),a0
    7dea:	|                  move.l a0,-(sp)
    7dec:	|                  move.l 44(sp),-(sp)
    7df0:	|                  move.l 44(sp),-(sp)
    7df4:	|                  jsr 750c <addSpeechLine>
    7dfa:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    7dfe:	|                  move.l 44(sp),-(sp)
    7e02:	|                  jsr 16fe8 <__floatsisf>
    7e08:	|                  addq.l #4,sp
    7e0a:	|                  move.l d0,d2
    7e0c:	|                  move.l 1a8f2 <fontHeight>,d0
    7e12:	|                  move.l d0,-(sp)
    7e14:	|                  jsr 16fe8 <__floatsisf>
    7e1a:	|                  addq.l #4,sp
    7e1c:	|                  move.l d0,d1
    7e1e:	|                  move.l 1a142 <cameraZoom>,d0
    7e24:	|                  move.l d0,-(sp)
    7e26:	|                  move.l d1,-(sp)
    7e28:	|                  jsr 16e94 <__divsf3>
    7e2e:	|                  addq.l #8,sp
    7e30:	|                  move.l d0,-(sp)
    7e32:	|                  move.l d2,-(sp)
    7e34:	|                  jsr 172dc <__subsf3>
    7e3a:	|                  addq.l #8,sp
    7e3c:	|                  move.l d0,-(sp)
    7e3e:	|                  jsr 16f80 <__fixsfsi>
    7e44:	|                  addq.l #4,sp
    7e46:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    7e4a:	|              /-- bpl.s 7e68 <wrapSpeechXY+0x1f8>
    7e4c:	|              |   movea.l 1a7fe <speech>,a0
    7e52:	|              |   move.l 8(a0),d0
    7e56:	|              |   movea.l 1a7fe <speech>,a0
    7e5c:	|              |   sub.l 44(sp),d0
    7e60:	|              |   move.l d0,8(a0)
    7e64:	|           /--|-- bra.w 7f56 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    7e68:	|           |  \-> movea.l 1a7fe <speech>,a0
    7e6e:	|           |      move.l 8(a0),d0
    7e72:	|           |      move.l d0,-(sp)
    7e74:	|           |      jsr 16fe8 <__floatsisf>
    7e7a:	|           |      addq.l #4,sp
    7e7c:	|           |      move.l d0,d2
    7e7e:	|           |      move.l 1a8b8 <cameraY>,d0
    7e84:	|           |      move.l d0,-(sp)
    7e86:	|           |      jsr 16fe8 <__floatsisf>
    7e8c:	|           |      addq.l #4,sp
    7e8e:	|           |      move.l d0,d3
    7e90:	|           |      move.l 1a6fa <winHeight>,d4
    7e96:	|           |      move.l 1a8f2 <fontHeight>,d0
    7e9c:	|           |      pea 3 <_start+0x3>
    7ea0:	|           |      move.l d0,-(sp)
    7ea2:	|           |      jsr 175e8 <__divsi3>
    7ea8:	|           |      addq.l #8,sp
    7eaa:	|           |      move.l d4,d1
    7eac:	|           |      sub.l d0,d1
    7eae:	|           |      move.l d1,-(sp)
    7eb0:	|           |      jsr 17010 <__floatunsisf>
    7eb6:	|           |      addq.l #4,sp
    7eb8:	|           |      move.l d0,d1
    7eba:	|           |      move.l 1a142 <cameraZoom>,d0
    7ec0:	|           |      move.l d0,-(sp)
    7ec2:	|           |      move.l d1,-(sp)
    7ec4:	|           |      jsr 16e94 <__divsf3>
    7eca:	|           |      addq.l #8,sp
    7ecc:	|           |      move.l d0,-(sp)
    7ece:	|           |      move.l d3,-(sp)
    7ed0:	|           |      jsr 16d9a <__addsf3>
    7ed6:	|           |      addq.l #8,sp
    7ed8:	|           |      move.l d0,-(sp)
    7eda:	|           |      move.l d2,-(sp)
    7edc:	|           |      jsr 17154 <__gtsf2>
    7ee2:	|           |      addq.l #8,sp
    7ee4:	|           |      tst.l d0
    7ee6:	|           +----- ble.s 7f56 <wrapSpeechXY+0x2e6>
    7ee8:	|           |      move.l 1a8b8 <cameraY>,d0
    7eee:	|           |      move.l d0,-(sp)
    7ef0:	|           |      jsr 16fe8 <__floatsisf>
    7ef6:	|           |      addq.l #4,sp
    7ef8:	|           |      move.l d0,d2
    7efa:	|           |      move.l 1a6fa <winHeight>,d3
    7f00:	|           |      move.l 1a8f2 <fontHeight>,d0
    7f06:	|           |      pea 3 <_start+0x3>
    7f0a:	|           |      move.l d0,-(sp)
    7f0c:	|           |      jsr 175e8 <__divsi3>
    7f12:	|           |      addq.l #8,sp
    7f14:	|           |      move.l d3,d1
    7f16:	|           |      sub.l d0,d1
    7f18:	|           |      move.l d1,-(sp)
    7f1a:	|           |      jsr 17010 <__floatunsisf>
    7f20:	|           |      addq.l #4,sp
    7f22:	|           |      move.l d0,d1
    7f24:	|           |      move.l 1a142 <cameraZoom>,d0
    7f2a:	|           |      move.l d0,-(sp)
    7f2c:	|           |      move.l d1,-(sp)
    7f2e:	|           |      jsr 16e94 <__divsf3>
    7f34:	|           |      addq.l #8,sp
    7f36:	|           |      move.l d0,-(sp)
    7f38:	|           |      move.l d2,-(sp)
    7f3a:	|           |      jsr 16d9a <__addsf3>
    7f40:	|           |      addq.l #8,sp
    7f42:	|           |      movea.l 1a7fe <speech>,a2
    7f48:	|           |      move.l d0,-(sp)
    7f4a:	|           |      jsr 16f80 <__fixsfsi>
    7f50:	|           |      addq.l #4,sp
    7f52:	|           |      move.l d0,8(a2)

    if (offset) {
    7f56:	|           \----> move.l 16(sp),d0
    7f5a:	|        /-------- beq.s 7f90 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    7f5c:	|        |         movea.l 1a7fe <speech>,a0
    7f62:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    7f68:	|        |     /-- bra.s 7f8a <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    7f6a:	|        |  /--|-> movea.l 20(sp),a0
    7f6e:	|        |  |  |   move.l 8(a0),d1
    7f72:	|        |  |  |   move.l 16(sp),d0
    7f76:	|        |  |  |   add.l d1,d0
    7f78:	|        |  |  |   movea.l 20(sp),a0
    7f7c:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    7f80:	|        |  |  |   movea.l 20(sp),a0
    7f84:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    7f8a:	|        |  |  \-> tst.l 20(sp)
    7f8e:	|        |  \----- bne.s 7f6a <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    7f90:	|        \-------> move.l 24(sp),d0
}
    7f94:	\----------------> movem.l (sp)+,d2-d4/a2
    7f98:	                   lea 16(sp),sp
    7f9c:	                   rts

00007f9e <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    7f9e:	    subq.l #4,sp
    7fa0:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    7fa2:	    move.l 1a852 <zBuffer+0x50>,d0
    7fa8:	/-- beq.s 7fe0 <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    7faa:	|   pea 1a856 <zBuffer+0x54>
    7fb0:	|   pea 1 <_start+0x1>
    7fb4:	|   jsr 387e <deleteTextures>
    7fba:	|   addq.l #8,sp
		zBuffer.texName = 0;
    7fbc:	|   clr.l 1a856 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    7fc2:	|   move.l 1a852 <zBuffer+0x50>,4(sp)
    7fca:	|   move.l 1a7a2 <SysBase>,d0
    7fd0:	|   movea.l d0,a6
    7fd2:	|   movea.l 4(sp),a1
    7fd6:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    7fda:	|   clr.l 1a852 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    7fe0:	\-> clr.l 1a80a <zBuffer+0x8>
	zBuffer.originalNum =0;
    7fe6:	    clr.l 1a84e <zBuffer+0x4c>
}
    7fec:	    nop
    7fee:	    movea.l (sp)+,a6
    7ff0:	    addq.l #4,sp
    7ff2:	    rts

00007ff4 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    7ff4:	                         lea -528(sp),sp
    7ff8:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    7ffc:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    8000:	                         jsr 7f9e <killZBuffer>

	zBuffer.originalNum = y;
    8006:	                         move.l 544(sp),d0
    800a:	                         move.l d0,1a84e <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    8010:	                         move.l 544(sp),d0
    8014:	                         move.l d0,-(sp)
    8016:	                         jsr 660a <openFileFromNum>
    801c:	                         addq.l #4,sp
    801e:	                         tst.l d0
    8020:	                     /-- bne.s 8028 <setZBuffer+0x34>
    8022:	                     |   clr.w d0
    8024:	/--------------------|-- bra.w 8406 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    8028:	|                    \-> move.l 1a78a <bigDataFile>,524(sp)
    8030:	|                        move.l 1a7aa <DOSBase>,d0
    8036:	|                        movea.l d0,a6
    8038:	|                        move.l 524(sp),d1
    803c:	|                        jsr -306(a6)
    8040:	|                        move.l d0,520(sp)
    8044:	|                        move.l 520(sp),d0
    8048:	|                        moveq #83,d1
    804a:	|                        cmp.l d0,d1
    804c:	|                    /-- beq.s 80ae <setZBuffer+0xba>
    804e:	|                    |   move.l 1a78a <bigDataFile>,516(sp)
    8056:	|                    |   move.l 1a7aa <DOSBase>,d0
    805c:	|                    |   movea.l d0,a6
    805e:	|                    |   move.l 516(sp),d1
    8062:	|                    |   jsr -306(a6)
    8066:	|                    |   move.l d0,512(sp)
    806a:	|                    |   move.l 512(sp),d0
    806e:	|                    |   moveq #122,d1
    8070:	|                    |   cmp.l d0,d1
    8072:	|                    +-- beq.s 80ae <setZBuffer+0xba>
    8074:	|                    |   move.l 1a78a <bigDataFile>,508(sp)
    807c:	|                    |   move.l 1a7aa <DOSBase>,d0
    8082:	|                    |   movea.l d0,a6
    8084:	|                    |   move.l 508(sp),d1
    8088:	|                    |   jsr -306(a6)
    808c:	|                    |   move.l d0,504(sp)
    8090:	|                    |   move.l 504(sp),d0
    8094:	|                    |   moveq #98,d1
    8096:	|                    |   cmp.l d0,d1
    8098:	|                    +-- beq.s 80ae <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    809a:	|                    |   pea 18915 <PutChar+0x1295>
    80a0:	|                    |   jsr 16bac <KPrintF>
    80a6:	|                    |   addq.l #4,sp
		 return FALSE;
    80a8:	|                    |   clr.w d0
    80aa:	+--------------------|-- bra.w 8406 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    80ae:	|                    \-> move.l 1a78a <bigDataFile>,500(sp)
    80b6:	|                        move.l 1a7aa <DOSBase>,d0
    80bc:	|                        movea.l d0,a6
    80be:	|                        move.l 500(sp),d1
    80c2:	|                        jsr -306(a6)
    80c6:	|                        move.l d0,496(sp)
    80ca:	|                        move.l 496(sp),d0
    80ce:	|                    /-- beq.s 80d8 <setZBuffer+0xe4>
    80d0:	|                    |   moveq #1,d1
    80d2:	|                    |   cmp.l d0,d1
    80d4:	|                 /--|-- beq.s 80ee <setZBuffer+0xfa>
    80d6:	|              /--|--|-- bra.s 811c <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    80d8:	|              |  |  \-> move.l #640,1a802 <zBuffer>
		zBuffer.height = 480;
    80e2:	|              |  |      move.l #480,1a806 <zBuffer+0x4>
		break;
    80ec:	|              |  |  /-- bra.s 8130 <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    80ee:	|              |  \--|-> move.l 1a78a <bigDataFile>,d0
    80f4:	|              |     |   move.l d0,-(sp)
    80f6:	|              |     |   jsr 6bc <get2bytes>
    80fc:	|              |     |   addq.l #4,sp
    80fe:	|              |     |   move.l d0,1a802 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    8104:	|              |     |   move.l 1a78a <bigDataFile>,d0
    810a:	|              |     |   move.l d0,-(sp)
    810c:	|              |     |   jsr 6bc <get2bytes>
    8112:	|              |     |   addq.l #4,sp
    8114:	|              |     |   move.l d0,1a806 <zBuffer+0x4>
		break;
    811a:	|              |     +-- bra.s 8130 <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    811c:	|              \-----|-> pea 18929 <PutChar+0x12a9>
    8122:	|                    |   jsr 16bac <KPrintF>
    8128:	|                    |   addq.l #4,sp
		return FALSE;
    812a:	|                    |   clr.w d0
    812c:	+--------------------|-- bra.w 8406 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    8130:	|                    \-> move.l 1a802 <zBuffer>,d0
    8136:	|                        move.l d0,d1
    8138:	|                        move.l 1a896 <sceneWidth>,d0
    813e:	|                        cmp.l d1,d0
    8140:	|                    /-- bne.s 8154 <setZBuffer+0x160>
    8142:	|                    |   move.l 1a806 <zBuffer+0x4>,d0
    8148:	|                    |   move.l d0,d1
    814a:	|                    |   move.l 1a89a <sceneHeight>,d0
    8150:	|                    |   cmp.l d1,d0
    8152:	|                 /--|-- beq.s 81a4 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    8154:	|                 |  \-> movea.l 1a89a <sceneHeight>,a1
    815a:	|                 |      movea.l 1a896 <sceneWidth>,a0
    8160:	|                 |      move.l 1a806 <zBuffer+0x4>,d1
    8166:	|                 |      move.l 1a802 <zBuffer>,d0
    816c:	|                 |      move.l a1,-(sp)
    816e:	|                 |      move.l a0,-(sp)
    8170:	|                 |      move.l d1,-(sp)
    8172:	|                 |      move.l d0,-(sp)
    8174:	|                 |      pea 18975 <PutChar+0x12f5>
    817a:	|                 |      moveq #32,d0
    817c:	|                 |      add.l sp,d0
    817e:	|                 |      move.l d0,-(sp)
    8180:	|                 |      jsr 139b8 <sprintf>
    8186:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    818a:	|                 |      moveq #12,d0
    818c:	|                 |      add.l sp,d0
    818e:	|                 |      move.l d0,-(sp)
    8190:	|                 |      pea 18990 <PutChar+0x1310>
    8196:	|                 |      jsr 16bac <KPrintF>
    819c:	|                 |      addq.l #8,sp
		return FALSE;
    819e:	|                 |      clr.w d0
    81a0:	+-----------------|----- bra.w 8406 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    81a4:	|                 \----> move.l 1a78a <bigDataFile>,492(sp)
    81ac:	|                        move.l 1a7aa <DOSBase>,d0
    81b2:	|                        movea.l d0,a6
    81b4:	|                        move.l 492(sp),d1
    81b8:	|                        jsr -306(a6)
    81bc:	|                        move.l d0,488(sp)
    81c0:	|                        move.l 488(sp),d0
    81c4:	|                        move.l d0,1a80a <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    81ca:	|                        clr.l 544(sp)
    81ce:	|                    /-- bra.s 81fa <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    81d0:	|                 /--|-> move.l 1a78a <bigDataFile>,d0
    81d6:	|                 |  |   move.l d0,-(sp)
    81d8:	|                 |  |   jsr 6bc <get2bytes>
    81de:	|                 |  |   addq.l #4,sp
    81e0:	|                 |  |   move.l 544(sp),d1
    81e4:	|                 |  |   add.l d1,d1
    81e6:	|                 |  |   add.l d1,d1
    81e8:	|                 |  |   lea 540(sp),a0
    81ec:	|                 |  |   add.l a0,d1
    81ee:	|                 |  |   movea.l d1,a0
    81f0:	|                 |  |   lea -144(a0),a0
    81f4:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    81f6:	|                 |  |   addq.l #1,544(sp)
    81fa:	|                 |  \-> move.l 1a80a <zBuffer+0x8>,d0
    8200:	|                 |      cmp.l 544(sp),d0
    8204:	|                 \----- bhi.s 81d0 <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    8206:	|                        move.l 1a80a <zBuffer+0x8>,d0
    820c:	|                        move.l d0,-(sp)
    820e:	|                        move.l sp,d0
    8210:	|                        addi.l #336,d0
    8216:	|                        move.l d0,-(sp)
    8218:	|                        move.l sp,d0
    821a:	|                        addi.l #404,d0
    8220:	|                        move.l d0,-(sp)
    8222:	|                        jsr 8410 <sortZPal>
    8228:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    822c:	|                        clr.l 544(sp)
    8230:	|                    /-- bra.s 82a8 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    8232:	|                 /--|-> move.l 544(sp),d0
    8236:	|                 |  |   add.l d0,d0
    8238:	|                 |  |   add.l d0,d0
    823a:	|                 |  |   move.l #540,d1
    8240:	|                 |  |   add.l sp,d1
    8242:	|                 |  |   add.l d1,d0
    8244:	|                 |  |   movea.l d0,a0
    8246:	|                 |  |   lea -208(a0),a0
    824a:	|                 |  |   move.l (a0),d0
    824c:	|                 |  |   add.l d0,d0
    824e:	|                 |  |   add.l d0,d0
    8250:	|                 |  |   lea 540(sp),a0
    8254:	|                 |  |   add.l a0,d0
    8256:	|                 |  |   movea.l d0,a0
    8258:	|                 |  |   lea -144(a0),a0
    825c:	|                 |  |   move.l (a0),d0
    825e:	|                 |  |   move.l 544(sp),d1
    8262:	|                 |  |   addq.l #3,d1
    8264:	|                 |  |   add.l d1,d1
    8266:	|                 |  |   movea.l d1,a1
    8268:	|                 |  |   adda.l d1,a1
    826a:	|                 |  |   lea 1a802 <zBuffer>,a0
    8270:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    8274:	|                 |  |   move.l 544(sp),d0
    8278:	|                 |  |   add.l d0,d0
    827a:	|                 |  |   add.l d0,d0
    827c:	|                 |  |   move.l #540,d1
    8282:	|                 |  |   add.l sp,d1
    8284:	|                 |  |   add.l d1,d0
    8286:	|                 |  |   movea.l d0,a0
    8288:	|                 |  |   lea -208(a0),a0
    828c:	|                 |  |   move.l (a0),d1
    828e:	|                 |  |   move.l 544(sp),d0
    8292:	|                 |  |   add.l d1,d1
    8294:	|                 |  |   add.l d1,d1
    8296:	|                 |  |   lea 540(sp),a0
    829a:	|                 |  |   add.l a0,d1
    829c:	|                 |  |   movea.l d1,a0
    829e:	|                 |  |   lea -272(a0),a0
    82a2:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    82a4:	|                 |  |   addq.l #1,544(sp)
    82a8:	|                 |  \-> move.l 1a80a <zBuffer+0x8>,d0
    82ae:	|                 |      cmp.l 544(sp),d0
    82b2:	|                 \----- bhi.w 8232 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    82b6:	|                        move.l 1a896 <sceneWidth>,d0
    82bc:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    82c0:	|                        move.l 1a89a <sceneHeight>,d0
    82c6:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    82ca:	|                        move.l 484(sp),-(sp)
    82ce:	|                        move.l 484(sp),-(sp)
    82d2:	|                        jsr 1756a <__mulsi3>
    82d8:	|                        addq.l #8,sp
    82da:	|                        move.l d0,476(sp)
    82de:	|                        clr.l 472(sp)
    82e2:	|                        move.l 1a7a2 <SysBase>,d0
    82e8:	|                        movea.l d0,a6
    82ea:	|                        move.l 476(sp),d0
    82ee:	|                        move.l 472(sp),d1
    82f2:	|                        jsr -684(a6)
    82f6:	|                        move.l d0,468(sp)
    82fa:	|                        move.l 468(sp),d0
    82fe:	|                        move.l d0,1a852 <zBuffer+0x50>
	if (!zBuffer.tex) {
    8304:	|                        move.l 1a852 <zBuffer+0x50>,d0
    830a:	|                    /-- bne.s 8320 <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    830c:	|                    |   pea 189cd <PutChar+0x134d>
    8312:	|                    |   jsr 16bac <KPrintF>
    8318:	|                    |   addq.l #4,sp
		return FALSE;
    831a:	|                    |   clr.w d0
    831c:	+--------------------|-- bra.w 8406 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    8320:	|                    \-> clr.l 544(sp)
    8324:	|     /----------------- bra.w 83f0 <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    8328:	|  /--|----------------> clr.l 536(sp)
    832c:	|  |  |     /----------- bra.w 83dc <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    8330:	|  |  |  /--|----------> tst.l 528(sp)
    8334:	|  |  |  |  |  /-------- bne.s 8392 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    8336:	|  |  |  |  |  |         move.l 1a78a <bigDataFile>,464(sp)
    833e:	|  |  |  |  |  |         move.l 1a7aa <DOSBase>,d0
    8344:	|  |  |  |  |  |         movea.l d0,a6
    8346:	|  |  |  |  |  |         move.l 464(sp),d1
    834a:	|  |  |  |  |  |         jsr -306(a6)
    834e:	|  |  |  |  |  |         move.l d0,460(sp)
    8352:	|  |  |  |  |  |         move.l 460(sp),d0
    8356:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    835a:	|  |  |  |  |  |         move.l 532(sp),d0
    835e:	|  |  |  |  |  |         asr.l #4,d0
    8360:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    8364:	|  |  |  |  |  |         moveq #15,d0
    8366:	|  |  |  |  |  |         cmp.l 528(sp),d0
    836a:	|  |  |  |  |  |  /----- bne.s 8388 <setZBuffer+0x394>
    836c:	|  |  |  |  |  |  |      move.l 1a78a <bigDataFile>,d0
    8372:	|  |  |  |  |  |  |      move.l d0,-(sp)
    8374:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    837a:	|  |  |  |  |  |  |      addq.l #4,sp
    837c:	|  |  |  |  |  |  |      movea.l d0,a0
    837e:	|  |  |  |  |  |  |      lea 16(a0),a0
    8382:	|  |  |  |  |  |  |      move.l a0,528(sp)
    8386:	|  |  |  |  |  |  |  /-- bra.s 838c <setZBuffer+0x398>
				else stillToGo ++;
    8388:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    838c:	|  |  |  |  |  |     \-> moveq #15,d1
    838e:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    8392:	|  |  |  |  |  \-------> move.l 532(sp),d0
    8396:	|  |  |  |  |            add.l d0,d0
    8398:	|  |  |  |  |            add.l d0,d0
    839a:	|  |  |  |  |            lea 540(sp),a0
    839e:	|  |  |  |  |            add.l a0,d0
    83a0:	|  |  |  |  |            movea.l d0,a0
    83a2:	|  |  |  |  |            lea -272(a0),a0
    83a6:	|  |  |  |  |            move.l (a0),d0
    83a8:	|  |  |  |  |            move.l d0,d2
    83aa:	|  |  |  |  |            move.l 1a852 <zBuffer+0x50>,d3
    83b0:	|  |  |  |  |            move.l 484(sp),d0
    83b4:	|  |  |  |  |            move.l 544(sp),-(sp)
    83b8:	|  |  |  |  |            move.l d0,-(sp)
    83ba:	|  |  |  |  |            jsr 1756a <__mulsi3>
    83c0:	|  |  |  |  |            addq.l #8,sp
    83c2:	|  |  |  |  |            move.l d0,d1
    83c4:	|  |  |  |  |            move.l 536(sp),d0
    83c8:	|  |  |  |  |            add.l d1,d0
    83ca:	|  |  |  |  |            movea.l d3,a0
    83cc:	|  |  |  |  |            adda.l d0,a0
    83ce:	|  |  |  |  |            move.b d2,d0
    83d0:	|  |  |  |  |            lsl.b #4,d0
    83d2:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    83d4:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    83d8:	|  |  |  |  |            addq.l #1,536(sp)
    83dc:	|  |  |  |  \----------> move.l 536(sp),d1
    83e0:	|  |  |  |               move.l 1a896 <sceneWidth>,d0
    83e6:	|  |  |  |               cmp.l d1,d0
    83e8:	|  |  |  \-------------- bhi.w 8330 <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    83ec:	|  |  |                  addq.l #1,544(sp)
    83f0:	|  |  \----------------> move.l 1a89a <sceneHeight>,d0
    83f6:	|  |                     cmp.l 544(sp),d0
    83fa:	|  \-------------------- bhi.w 8328 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    83fe:	|                        jsr 6502 <finishAccess>
	
	return TRUE;
    8404:	|                        moveq #1,d0
}
    8406:	\----------------------> movem.l (sp)+,d2-d3/a6
    840a:	                         lea 528(sp),sp
    840e:	                         rts

00008410 <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    8410:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    8412:	             clr.l 4(sp)
    8416:	         /-- bra.s 842e <sortZPal+0x1e>
		newpal[i] = i;
    8418:	      /--|-> move.l 4(sp),d0
    841c:	      |  |   add.l d0,d0
    841e:	      |  |   add.l d0,d0
    8420:	      |  |   movea.l 16(sp),a0
    8424:	      |  |   adda.l d0,a0
    8426:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    842a:	      |  |   addq.l #1,4(sp)
    842e:	      |  \-> move.l 4(sp),d0
    8432:	      |      cmp.l 20(sp),d0
    8436:	      \----- blt.s 8418 <sortZPal+0x8>
	}

	if (size < 2) return;		
    8438:	             moveq #1,d0
    843a:	             cmp.l 20(sp),d0
    843e:	/----------- bge.w 84f0 <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    8442:	|            moveq #1,d0
    8444:	|            move.l d0,4(sp)
    8448:	|     /----- bra.w 84e2 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    844c:	|  /--|----> move.l 4(sp),d0
    8450:	|  |  |      add.l d0,d0
    8452:	|  |  |      add.l d0,d0
    8454:	|  |  |      movea.l 16(sp),a0
    8458:	|  |  |      adda.l d0,a0
    845a:	|  |  |      move.l (a0),d0
    845c:	|  |  |      add.l d0,d0
    845e:	|  |  |      add.l d0,d0
    8460:	|  |  |      movea.l 12(sp),a0
    8464:	|  |  |      adda.l d0,a0
    8466:	|  |  |      move.l (a0),d1
    8468:	|  |  |      move.l 4(sp),d0
    846c:	|  |  |      addi.l #1073741823,d0
    8472:	|  |  |      add.l d0,d0
    8474:	|  |  |      add.l d0,d0
    8476:	|  |  |      movea.l 16(sp),a0
    847a:	|  |  |      adda.l d0,a0
    847c:	|  |  |      move.l (a0),d0
    847e:	|  |  |      add.l d0,d0
    8480:	|  |  |      add.l d0,d0
    8482:	|  |  |      movea.l 12(sp),a0
    8486:	|  |  |      adda.l d0,a0
    8488:	|  |  |      move.l (a0),d0
    848a:	|  |  |      cmp.l d1,d0
    848c:	|  |  |  /-- ble.s 84de <sortZPal+0xce>
			tmp = newpal[i];
    848e:	|  |  |  |   move.l 4(sp),d0
    8492:	|  |  |  |   add.l d0,d0
    8494:	|  |  |  |   add.l d0,d0
    8496:	|  |  |  |   movea.l 16(sp),a0
    849a:	|  |  |  |   adda.l d0,a0
    849c:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    849e:	|  |  |  |   move.l 4(sp),d0
    84a2:	|  |  |  |   addi.l #1073741823,d0
    84a8:	|  |  |  |   add.l d0,d0
    84aa:	|  |  |  |   add.l d0,d0
    84ac:	|  |  |  |   movea.l 16(sp),a1
    84b0:	|  |  |  |   adda.l d0,a1
    84b2:	|  |  |  |   move.l 4(sp),d0
    84b6:	|  |  |  |   add.l d0,d0
    84b8:	|  |  |  |   add.l d0,d0
    84ba:	|  |  |  |   movea.l 16(sp),a0
    84be:	|  |  |  |   adda.l d0,a0
    84c0:	|  |  |  |   move.l (a1),d0
    84c2:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    84c4:	|  |  |  |   move.l 4(sp),d0
    84c8:	|  |  |  |   addi.l #1073741823,d0
    84ce:	|  |  |  |   add.l d0,d0
    84d0:	|  |  |  |   add.l d0,d0
    84d2:	|  |  |  |   movea.l 16(sp),a0
    84d6:	|  |  |  |   adda.l d0,a0
    84d8:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    84da:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    84de:	|  |  |  \-> addq.l #1,4(sp)
    84e2:	|  |  \----> move.l 4(sp),d0
    84e6:	|  |         cmp.l 20(sp),d0
    84ea:	|  \-------- blt.w 844c <sortZPal+0x3c>
    84ee:	|        /-- bra.s 84f2 <sortZPal+0xe2>
	if (size < 2) return;		
    84f0:	\--------|-> nop
		}
	}
    84f2:	         \-> addq.l #8,sp
    84f4:	             rts

000084f6 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    84f6:	          lea -36(sp),sp
    84fa:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    84fc:	          move.l 44(sp),d0
    8500:	          addq.l #8,d0
    8502:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8506:	          clr.l 36(sp)
    850a:	   /----- bra.s 8550 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    850c:	/--|----> movea.l 28(sp),a0
    8510:	|  |      movea.l 8(a0),a0
    8514:	|  |      move.l 36(sp),d1
    8518:	|  |      move.l d1,d0
    851a:	|  |      lsl.l #3,d0
    851c:	|  |      sub.l d1,d0
    851e:	|  |      add.l d0,d0
    8520:	|  |      add.l d0,d0
    8522:	|  |      adda.l d0,a0
    8524:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8528:	|  |      movea.l 8(sp),a0
    852c:	|  |      move.l 24(a0),d0
    8530:	|  |  /-- beq.s 854c <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8532:	|  |  |   movea.l 8(sp),a0
    8536:	|  |  |   move.l 24(a0),4(sp)
    853c:	|  |  |   move.l 1a7a2 <SysBase>,d0
    8542:	|  |  |   movea.l d0,a6
    8544:	|  |  |   movea.l 4(sp),a1
    8548:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    854c:	|  |  \-> addq.l #1,36(sp)
    8550:	|  \----> movea.l 28(sp),a0
    8554:	|         move.l (a0),d0
    8556:	|         cmp.l 36(sp),d0
    855a:	\-------- bgt.s 850c <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    855c:	          movea.l 28(sp),a0
    8560:	          move.l 8(a0),24(sp)
    8566:	          move.l 1a7a2 <SysBase>,d0
    856c:	          movea.l d0,a6
    856e:	          movea.l 24(sp),a1
    8572:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    8576:	          move.l 28(sp),20(sp)
    857c:	          move.l 1a7a2 <SysBase>,d0
    8582:	          movea.l d0,a6
    8584:	          movea.l 20(sp),a1
    8588:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    858c:	          move.l 1a912 <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8594:	      /-- bra.s 85a0 <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    8596:	   /--|-> movea.l 32(sp),a0
    859a:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    85a0:	   |  \-> movea.l 32(sp),a0
    85a4:	   |      movea.l 22(a0),a0
    85a8:	   |      move.l (a0),d1
    85aa:	   |      movea.l 44(sp),a0
    85ae:	   |      move.l (a0),d0
    85b0:	   |      cmp.l d1,d0
    85b2:	   |  /-- beq.s 85ba <forgetSpriteBank+0xc4>
    85b4:	   |  |   tst.l 32(sp)
    85b8:	   \--|-- bne.s 8596 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    85ba:	      \-> tst.l 32(sp)
    85be:	   /----- beq.s 85e8 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    85c0:	   |      movea.l 44(sp),a0
    85c4:	   |      move.l 22(a0),d0
    85c8:	   |      movea.l 32(sp),a0
    85cc:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    85d0:	   |      move.l 44(sp),12(sp)
    85d6:	   |      move.l 1a7a2 <SysBase>,d0
    85dc:	   |      movea.l d0,a6
    85de:	   |      movea.l 12(sp),a1
    85e2:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    85e6:	   |  /-- bra.s 860e <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    85e8:	   \--|-> movea.l 1a912 <allLoadedBanks>,a0
    85ee:	      |   move.l 22(a0),d0
    85f2:	      |   move.l d0,1a912 <allLoadedBanks>
		FreeVec( forgetme);
    85f8:	      |   move.l 44(sp),16(sp)
    85fe:	      |   move.l 1a7a2 <SysBase>,d0
    8604:	      |   movea.l d0,a6
    8606:	      |   movea.l 16(sp),a1
    860a:	      |   jsr -690(a6)
}
    860e:	      \-> nop
    8610:	          movea.l (sp)+,a6
    8612:	          lea 36(sp),sp
    8616:	          rts

00008618 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    8618:	                      lea -84(sp),sp
    861c:	                      movem.l d2-d4/a2/a6,-(sp)
    8620:	                      move.l 116(sp),d0
    8624:	                      move.w d0,d0
    8626:	                      move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    862a:	                      clr.l 94(sp)
    862e:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8632:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8636:	                      move.l 108(sp),-(sp)
    863a:	                      jsr 660a <openFileFromNum>
    8640:	                      addq.l #4,sp
    8642:	                      tst.l d0
    8644:	                  /-- bne.s 865a <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8646:	                  |   pea 189f0 <PutChar+0x1370>
    864c:	                  |   jsr 16bac <KPrintF>
    8652:	                  |   addq.l #4,sp
		return FALSE;
    8654:	                  |   clr.w d0
    8656:	/-----------------|-- bra.w 8a22 <loadSpriteBank+0x40a>
	}

	loadhere->isFont = isFont;
    865a:	|                 \-> movea.l 112(sp),a0
    865e:	|                     move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8664:	|                     move.l 1a78a <bigDataFile>,d0
    866a:	|                     move.l d0,-(sp)
    866c:	|                     jsr 6bc <get2bytes>
    8672:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8674:	|                     move.l 1a78a <bigDataFile>,82(sp)
    867c:	|                     move.l 1a7aa <DOSBase>,d0
    8682:	|                     movea.l d0,a6
    8684:	|                     move.l 82(sp),d1
    8688:	|                     jsr -306(a6)
    868c:	|                     move.l d0,78(sp)
    8690:	|                     move.l 78(sp),d0
    8694:	|                     movea.l 112(sp),a0
    8698:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    869c:	|                     move.l 1a78a <bigDataFile>,d0
    86a2:	|                     move.l d0,-(sp)
    86a4:	|                     jsr 6bc <get2bytes>
    86aa:	|                     addq.l #4,sp
    86ac:	|                     move.l d0,74(sp)

	if (total <= 0) {
    86b0:	|                 /-- bgt.s 86c6 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    86b2:	|                 |   pea 18a1e <PutChar+0x139e>
    86b8:	|                 |   jsr 16bac <KPrintF>
    86be:	|                 |   addq.l #4,sp
		return FALSE;
    86c0:	|                 |   clr.w d0
    86c2:	+-----------------|-- bra.w 8a22 <loadSpriteBank+0x40a>
	}
	if (loadhere->type > 3) {
    86c6:	|                 \-> movea.l 112(sp),a0
    86ca:	|                     move.l 4(a0),d0
    86ce:	|                     moveq #3,d1
    86d0:	|                     cmp.l d0,d1
    86d2:	|                 /-- bge.s 86e8 <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    86d4:	|                 |   pea 18a5e <PutChar+0x13de>
    86da:	|                 |   jsr 16bac <KPrintF>
    86e0:	|                 |   addq.l #4,sp
		return FALSE;
    86e2:	|                 |   clr.w d0
    86e4:	+-----------------|-- bra.w 8a22 <loadSpriteBank+0x40a>
	}

	loadhere->total = total;
    86e8:	|                 \-> movea.l 112(sp),a0
    86ec:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    86f0:	|                     move.l 74(sp),d1
    86f4:	|                     move.l d1,d0
    86f6:	|                     lsl.l #3,d0
    86f8:	|                     sub.l d1,d0
    86fa:	|                     add.l d0,d0
    86fc:	|                     add.l d0,d0
    86fe:	|                     move.l d0,70(sp)
    8702:	|                     clr.l 66(sp)
    8706:	|                     move.l 1a7a2 <SysBase>,d0
    870c:	|                     movea.l d0,a6
    870e:	|                     move.l 70(sp),d0
    8712:	|                     move.l 66(sp),d1
    8716:	|                     jsr -684(a6)
    871a:	|                     move.l d0,62(sp)
    871e:	|                     move.l 62(sp),d0
    8722:	|                     movea.l 112(sp),a0
    8726:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    872a:	|                     movea.l 112(sp),a0
    872e:	|                     move.l 8(a0),d0
    8732:	|                 /-- bne.s 873a <loadSpriteBank+0x122>
    8734:	|                 |   clr.w d0
    8736:	+-----------------|-- bra.w 8a22 <loadSpriteBank+0x40a>
	
	startIndex = 1;
    873a:	|                 \-> moveq #1,d0
    873c:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8740:	|                     clr.l 100(sp)
    8744:	|     /-------------- bra.w 8a0e <loadSpriteBank+0x3f6>
		UWORD width = get2bytes(bigDataFile);
    8748:	|  /--|-------------> move.l 1a78a <bigDataFile>,d0
    874e:	|  |  |               move.l d0,-(sp)
    8750:	|  |  |               jsr 6bc <get2bytes>
    8756:	|  |  |               addq.l #4,sp
    8758:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    875c:	|  |  |               movea.l 112(sp),a0
    8760:	|  |  |               movea.l 8(a0),a0
    8764:	|  |  |               move.l 100(sp),d1
    8768:	|  |  |               move.l d1,d0
    876a:	|  |  |               lsl.l #3,d0
    876c:	|  |  |               sub.l d1,d0
    876e:	|  |  |               add.l d0,d0
    8770:	|  |  |               add.l d0,d0
    8772:	|  |  |               adda.l d0,a0
    8774:	|  |  |               moveq #0,d0
    8776:	|  |  |               move.w 60(sp),d0
    877a:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    877c:	|  |  |               movea.l 1a78a <bigDataFile>,a1
    8782:	|  |  |               movea.l 112(sp),a0
    8786:	|  |  |               movea.l 8(a0),a0
    878a:	|  |  |               move.l 100(sp),d1
    878e:	|  |  |               move.l d1,d0
    8790:	|  |  |               lsl.l #3,d0
    8792:	|  |  |               sub.l d1,d0
    8794:	|  |  |               add.l d0,d0
    8796:	|  |  |               add.l d0,d0
    8798:	|  |  |               lea (0,a0,d0.l),a2
    879c:	|  |  |               move.l a1,-(sp)
    879e:	|  |  |               jsr 6bc <get2bytes>
    87a4:	|  |  |               addq.l #4,sp
    87a6:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    87aa:	|  |  |               movea.l 1a78a <bigDataFile>,a1
    87b0:	|  |  |               movea.l 112(sp),a0
    87b4:	|  |  |               movea.l 8(a0),a0
    87b8:	|  |  |               move.l 100(sp),d1
    87bc:	|  |  |               move.l d1,d0
    87be:	|  |  |               lsl.l #3,d0
    87c0:	|  |  |               sub.l d1,d0
    87c2:	|  |  |               add.l d0,d0
    87c4:	|  |  |               add.l d0,d0
    87c6:	|  |  |               lea (0,a0,d0.l),a2
    87ca:	|  |  |               move.l a1,-(sp)
    87cc:	|  |  |               jsr 6bc <get2bytes>
    87d2:	|  |  |               addq.l #4,sp
    87d4:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    87d8:	|  |  |               movea.l 1a78a <bigDataFile>,a1
    87de:	|  |  |               movea.l 112(sp),a0
    87e2:	|  |  |               movea.l 8(a0),a0
    87e6:	|  |  |               move.l 100(sp),d1
    87ea:	|  |  |               move.l d1,d0
    87ec:	|  |  |               lsl.l #3,d0
    87ee:	|  |  |               sub.l d1,d0
    87f0:	|  |  |               add.l d0,d0
    87f2:	|  |  |               add.l d0,d0
    87f4:	|  |  |               lea (0,a0,d0.l),a2
    87f8:	|  |  |               move.l a1,-(sp)
    87fa:	|  |  |               jsr 6bc <get2bytes>
    8800:	|  |  |               addq.l #4,sp
    8802:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8806:	|  |  |               movea.l 112(sp),a0
    880a:	|  |  |               move.l 4(a0),d0
    880e:	|  |  |               moveq #3,d1
    8810:	|  |  |               cmp.l d0,d1
    8812:	|  |  |     /-------- beq.w 88ae <loadSpriteBank+0x296>
    8816:	|  |  |     |         moveq #3,d1
    8818:	|  |  |     |         cmp.l d0,d1
    881a:	|  |  |  /--|-------- blt.w 8946 <loadSpriteBank+0x32e>
    881e:	|  |  |  |  |         moveq #1,d1
    8820:	|  |  |  |  |         cmp.l d0,d1
    8822:	|  |  |  |  |     /-- beq.s 882e <loadSpriteBank+0x216>
    8824:	|  |  |  |  |     |   moveq #2,d1
    8826:	|  |  |  |  |     |   cmp.l d0,d1
    8828:	|  |  |  |  |  /--|-- beq.s 885a <loadSpriteBank+0x242>
    882a:	|  |  |  +--|--|--|-- bra.w 8946 <loadSpriteBank+0x32e>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    882e:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8832:	|  |  |  |  |  |      movea.l 8(a0),a0
    8836:	|  |  |  |  |  |      move.l 100(sp),d1
    883a:	|  |  |  |  |  |      move.l d1,d0
    883c:	|  |  |  |  |  |      lsl.l #3,d0
    883e:	|  |  |  |  |  |      sub.l d1,d0
    8840:	|  |  |  |  |  |      add.l d0,d0
    8842:	|  |  |  |  |  |      add.l d0,d0
    8844:	|  |  |  |  |  |      adda.l d0,a0
    8846:	|  |  |  |  |  |      move.l 4(a0),d0
    884a:	|  |  |  |  |  |      addq.l #2,d0
    884c:	|  |  |  |  |  |      move.l d0,d0
    884e:	|  |  |  |  |  |      add.w d0,d0
    8850:	|  |  |  |  |  |      add.w d0,d0
    8852:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8856:	|  |  |  +--|--|----- bra.w 8946 <loadSpriteBank+0x32e>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    885a:	|  |  |  |  |  \----> movea.l 112(sp),a0
    885e:	|  |  |  |  |         movea.l 8(a0),a0
    8862:	|  |  |  |  |         move.l 100(sp),d1
    8866:	|  |  |  |  |         move.l d1,d0
    8868:	|  |  |  |  |         lsl.l #3,d0
    886a:	|  |  |  |  |         sub.l d1,d0
    886c:	|  |  |  |  |         add.l d0,d0
    886e:	|  |  |  |  |         add.l d0,d0
    8870:	|  |  |  |  |         adda.l d0,a0
    8872:	|  |  |  |  |         move.l (a0),d0
    8874:	|  |  |  |  |     /-- bpl.s 8878 <loadSpriteBank+0x260>
    8876:	|  |  |  |  |     |   addq.l #7,d0
    8878:	|  |  |  |  |     \-> asr.l #3,d0
    887a:	|  |  |  |  |         move.l d0,d2
    887c:	|  |  |  |  |         movea.l 112(sp),a0
    8880:	|  |  |  |  |         movea.l 8(a0),a0
    8884:	|  |  |  |  |         move.l 100(sp),d1
    8888:	|  |  |  |  |         move.l d1,d0
    888a:	|  |  |  |  |         lsl.l #3,d0
    888c:	|  |  |  |  |         sub.l d1,d0
    888e:	|  |  |  |  |         add.l d0,d0
    8890:	|  |  |  |  |         add.l d0,d0
    8892:	|  |  |  |  |         adda.l d0,a0
    8894:	|  |  |  |  |         move.l 4(a0),d0
    8898:	|  |  |  |  |         move.l d0,d0
    889a:	|  |  |  |  |         move.w d2,d1
    889c:	|  |  |  |  |         muls.w d0,d1
    889e:	|  |  |  |  |         move.w d1,d0
    88a0:	|  |  |  |  |         add.w d0,d0
    88a2:	|  |  |  |  |         add.w d1,d0
    88a4:	|  |  |  |  |         add.w d0,d0
    88a6:	|  |  |  |  |         move.w d0,98(sp)
				break;
    88aa:	|  |  |  +--|-------- bra.w 8946 <loadSpriteBank+0x32e>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    88ae:	|  |  |  |  \-------> movea.l 112(sp),a0
    88b2:	|  |  |  |            movea.l 8(a0),a0
    88b6:	|  |  |  |            move.l 100(sp),d1
    88ba:	|  |  |  |            move.l d1,d0
    88bc:	|  |  |  |            lsl.l #3,d0
    88be:	|  |  |  |            sub.l d1,d0
    88c0:	|  |  |  |            add.l d0,d0
    88c2:	|  |  |  |            add.l d0,d0
    88c4:	|  |  |  |            adda.l d0,a0
    88c6:	|  |  |  |            move.l (a0),d0
    88c8:	|  |  |  |            andi.l #-2147483633,d0
    88ce:	|  |  |  |        /-- bpl.s 88d8 <loadSpriteBank+0x2c0>
    88d0:	|  |  |  |        |   subq.l #1,d0
    88d2:	|  |  |  |        |   moveq #-16,d1
    88d4:	|  |  |  |        |   or.l d1,d0
    88d6:	|  |  |  |        |   addq.l #1,d0
    88d8:	|  |  |  |        \-> tst.l d0
    88da:	|  |  |  |     /----- ble.s 88e0 <loadSpriteBank+0x2c8>
    88dc:	|  |  |  |     |      moveq #2,d0
    88de:	|  |  |  |     |  /-- bra.s 88e2 <loadSpriteBank+0x2ca>
    88e0:	|  |  |  |     \--|-> clr.w d0
    88e2:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    88e6:	|  |  |  |            movea.l 112(sp),a0
    88ea:	|  |  |  |            movea.l 8(a0),a0
    88ee:	|  |  |  |            move.l 100(sp),d1
    88f2:	|  |  |  |            move.l d1,d0
    88f4:	|  |  |  |            lsl.l #3,d0
    88f6:	|  |  |  |            sub.l d1,d0
    88f8:	|  |  |  |            add.l d0,d0
    88fa:	|  |  |  |            add.l d0,d0
    88fc:	|  |  |  |            adda.l d0,a0
    88fe:	|  |  |  |            move.l (a0),d0
    8900:	|  |  |  |            movea.l d0,a0
    8902:	|  |  |  |            cmpa.w #0,a0
    8906:	|  |  |  |        /-- bge.s 890c <loadSpriteBank+0x2f4>
    8908:	|  |  |  |        |   lea 15(a0),a0
    890c:	|  |  |  |        \-> move.l a0,d0
    890e:	|  |  |  |            asr.l #4,d0
    8910:	|  |  |  |            add.l d0,d0
    8912:	|  |  |  |            move.l d0,d1
    8914:	|  |  |  |            moveq #0,d0
    8916:	|  |  |  |            move.w 58(sp),d0
    891a:	|  |  |  |            add.l d1,d0
    891c:	|  |  |  |            move.l d0,d2
    891e:	|  |  |  |            movea.l 112(sp),a0
    8922:	|  |  |  |            movea.l 8(a0),a0
    8926:	|  |  |  |            move.l 100(sp),d1
    892a:	|  |  |  |            move.l d1,d0
    892c:	|  |  |  |            lsl.l #3,d0
    892e:	|  |  |  |            sub.l d1,d0
    8930:	|  |  |  |            add.l d0,d0
    8932:	|  |  |  |            add.l d0,d0
    8934:	|  |  |  |            adda.l d0,a0
    8936:	|  |  |  |            move.l 4(a0),d0
    893a:	|  |  |  |            move.l d0,d0
    893c:	|  |  |  |            move.w d2,d1
    893e:	|  |  |  |            muls.w d0,d1
    8940:	|  |  |  |            move.w d1,98(sp)
				break;
    8944:	|  |  |  |            nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8946:	|  |  |  \----------> moveq #0,d0
    8948:	|  |  |               move.w 98(sp),d0
    894c:	|  |  |               add.l d0,d0
    894e:	|  |  |               move.l d0,54(sp)
    8952:	|  |  |               moveq #2,d0
    8954:	|  |  |               move.l d0,50(sp)
    8958:	|  |  |               move.l 1a7a2 <SysBase>,d0
    895e:	|  |  |               movea.l d0,a6
    8960:	|  |  |               move.l 54(sp),d0
    8964:	|  |  |               move.l 50(sp),d1
    8968:	|  |  |               jsr -684(a6)
    896c:	|  |  |               move.l d0,46(sp)
    8970:	|  |  |               movea.l 46(sp),a1
    8974:	|  |  |               movea.l 112(sp),a0
    8978:	|  |  |               movea.l 8(a0),a0
    897c:	|  |  |               move.l 100(sp),d1
    8980:	|  |  |               move.l d1,d0
    8982:	|  |  |               lsl.l #3,d0
    8984:	|  |  |               sub.l d1,d0
    8986:	|  |  |               add.l d0,d0
    8988:	|  |  |               add.l d0,d0
    898a:	|  |  |               adda.l d0,a0
    898c:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8990:	|  |  |               move.l 1a78a <bigDataFile>,42(sp)
    8998:	|  |  |               movea.l 112(sp),a0
    899c:	|  |  |               movea.l 8(a0),a0
    89a0:	|  |  |               move.l 100(sp),d1
    89a4:	|  |  |               move.l d1,d0
    89a6:	|  |  |               lsl.l #3,d0
    89a8:	|  |  |               sub.l d1,d0
    89aa:	|  |  |               add.l d0,d0
    89ac:	|  |  |               add.l d0,d0
    89ae:	|  |  |               adda.l d0,a0
    89b0:	|  |  |               move.l 24(a0),38(sp)
    89b6:	|  |  |               moveq #2,d1
    89b8:	|  |  |               move.l d1,34(sp)
    89bc:	|  |  |               move.w 98(sp),d0
    89c0:	|  |  |               lsr.w #1,d0
    89c2:	|  |  |               move.w d0,d0
    89c4:	|  |  |               andi.l #65535,d0
    89ca:	|  |  |               move.l d0,30(sp)
    89ce:	|  |  |               move.l 1a7aa <DOSBase>,d0
    89d4:	|  |  |               movea.l d0,a6
    89d6:	|  |  |               move.l 42(sp),d1
    89da:	|  |  |               move.l 38(sp),d2
    89de:	|  |  |               move.l 34(sp),d3
    89e2:	|  |  |               move.l 30(sp),d4
    89e6:	|  |  |               jsr -324(a6)
    89ea:	|  |  |               move.l d0,26(sp)
    89ee:	|  |  |               move.l 26(sp),d0
    89f2:	|  |  |               move.w d0,24(sp)
		if (!count) {
    89f6:	|  |  |           /-- bne.s 8a0a <loadSpriteBank+0x3f2>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    89f8:	|  |  |           |   pea 18a93 <PutChar+0x1413>
    89fe:	|  |  |           |   jsr 16bac <KPrintF>
    8a04:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8a06:	|  |  |           |   clr.w d0
    8a08:	+--|--|-----------|-- bra.s 8a22 <loadSpriteBank+0x40a>
	for (i = 0; i < total; i++) {
    8a0a:	|  |  |           \-> addq.l #1,100(sp)
    8a0e:	|  |  \-------------> move.l 100(sp),d0
    8a12:	|  |                  cmp.l 74(sp),d0
    8a16:	|  \----------------- blt.w 8748 <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    8a1a:	|                     jsr 6502 <finishAccess>

	return TRUE;
    8a20:	|                     moveq #1,d0
}
    8a22:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    8a26:	                      lea 84(sp),sp
    8a2a:	                      rts

00008a2c <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8a2c:	                   lea -16(sp),sp
    8a30:	                   move.l 28(sp),d0
    8a34:	                   move.w d0,d0
    8a36:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    8a3a:	                   movea.l 24(sp),a0
    8a3e:	                   move.l (a0),d0
    8a40:	                   move.l d0,-(sp)
    8a42:	                   jsr 17348 <__fixunssfsi>
    8a48:	                   addq.l #4,sp
    8a4a:	                   move.l d0,d0
    8a4c:	                   movea.l 20(sp),a0
    8a50:	                   move.l 8(a0),d1
    8a54:	                   move.l d1,d1
    8a56:	                   movea.w d0,a0
    8a58:	                   suba.w d1,a0
    8a5a:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    8a5e:	                   movea.l 24(sp),a0
    8a62:	                   move.l 4(a0),d0
    8a66:	                   move.l d0,-(sp)
    8a68:	                   jsr 17348 <__fixunssfsi>
    8a6e:	                   addq.l #4,sp
    8a70:	                   move.l d0,d0
    8a72:	                   movea.l 20(sp),a0
    8a76:	                   move.l 12(a0),d1
    8a7a:	                   move.l d1,d1
    8a7c:	                   movea.w d0,a0
    8a7e:	                   suba.w d1,a0
    8a80:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    8a84:	                   move.w 4(sp),d0
    8a88:	                   movea.w d0,a1
    8a8a:	                   move.w 6(sp),d0
    8a8e:	                   movea.w d0,a0
    8a90:	                   pea 1 <_start+0x1>
    8a94:	                   move.l a1,-(sp)
    8a96:	                   move.l a0,-(sp)
    8a98:	                   move.l 36(sp),-(sp)
    8a9c:	                   move.l 36(sp),-(sp)
    8aa0:	                   jsr 2576 <CstScaleSprite>
    8aa6:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8aaa:	                   movea.l 24(sp),a0
    8aae:	                   move.l 118(a0),d0
    8ab2:	                   moveq #8,d1
    8ab4:	                   and.l d1,d0
    8ab6:	   /-------------- beq.w 8b78 <scaleSprite+0x14c>
		if (single->xhot < 0)
    8aba:	   |               movea.l 20(sp),a0
    8abe:	   |               move.l 8(a0),d0
    8ac2:	   |  /----------- bpl.s 8afa <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8ac4:	   |  |            tst.w 2(sp)
    8ac8:	   |  |     /----- beq.s 8ae0 <scaleSprite+0xb4>
    8aca:	   |  |     |      movea.l 20(sp),a0
    8ace:	   |  |     |      move.l (a0),d0
    8ad0:	   |  |     |      move.l d0,d1
    8ad2:	   |  |     |      movea.l 20(sp),a0
    8ad6:	   |  |     |      move.l 8(a0),d0
    8ada:	   |  |     |      move.l d0,d0
    8adc:	   |  |     |      sub.w d0,d1
    8ade:	   |  |     |  /-- bra.s 8aee <scaleSprite+0xc2>
    8ae0:	   |  |     \--|-> movea.l 20(sp),a0
    8ae4:	   |  |        |   move.l 8(a0),d0
    8ae8:	   |  |        |   move.l d0,d0
    8aea:	   |  |        |   move.w d0,d1
    8aec:	   |  |        |   addq.w #1,d1
    8aee:	   |  |        \-> movea.w 6(sp),a0
    8af2:	   |  |            suba.w d1,a0
    8af4:	   |  |            move.w a0,14(sp)
    8af8:	   |  |  /-------- bra.s 8b2e <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8afa:	   |  \--|-------> tst.w 2(sp)
    8afe:	   |     |  /----- beq.s 8b1a <scaleSprite+0xee>
    8b00:	   |     |  |      movea.l 20(sp),a0
    8b04:	   |     |  |      move.l (a0),d0
    8b06:	   |     |  |      move.l d0,d1
    8b08:	   |     |  |      movea.l 20(sp),a0
    8b0c:	   |     |  |      move.l 8(a0),d0
    8b10:	   |     |  |      move.l d0,d0
    8b12:	   |     |  |      sub.w d0,d1
    8b14:	   |     |  |      move.w d1,d0
    8b16:	   |     |  |      subq.w #1,d0
    8b18:	   |     |  |  /-- bra.s 8b24 <scaleSprite+0xf8>
    8b1a:	   |     |  \--|-> movea.l 20(sp),a0
    8b1e:	   |     |     |   move.l 8(a0),d0
    8b22:	   |     |     |   move.l d0,d0
    8b24:	   |     |     \-> move.w 6(sp),d1
    8b28:	   |     |         sub.w d0,d1
    8b2a:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8b2e:	   |     \-------> movea.l 24(sp),a0
    8b32:	   |               move.l 24(a0),d0
    8b36:	   |               move.l d0,d1
    8b38:	   |               movea.l 20(sp),a0
    8b3c:	   |               move.l 12(a0),d0
    8b40:	   |               move.l d0,d0
    8b42:	   |               sub.w d0,d1
    8b44:	   |               movea.w 4(sp),a0
    8b48:	   |               adda.w d1,a0
    8b4a:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    8b4e:	   |               movea.l 20(sp),a0
    8b52:	   |               move.l (a0),d0
    8b54:	   |               move.l d0,d0
    8b56:	   |               move.w 14(sp),d1
    8b5a:	   |               add.w d0,d1
    8b5c:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    8b60:	   |               movea.l 20(sp),a0
    8b64:	   |               move.l 4(a0),d0
    8b68:	   |               move.l d0,d0
    8b6a:	   |               movea.w 12(sp),a0
    8b6e:	   |               adda.w d0,a0
    8b70:	   |               move.w a0,8(sp)
    8b74:	/--|-------------- bra.w 8c4a <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    8b78:	|  \-------------> move.l 1a8b4 <cameraX>,d0
    8b7e:	|                  move.l d0,d0
    8b80:	|                  sub.w d0,6(sp)
		y -= cameraY;
    8b84:	|                  move.l 1a8b8 <cameraY>,d0
    8b8a:	|                  move.l d0,d0
    8b8c:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    8b90:	|                  movea.l 20(sp),a0
    8b94:	|                  move.l 8(a0),d0
    8b98:	|     /----------- bpl.s 8bd0 <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8b9a:	|     |            tst.w 2(sp)
    8b9e:	|     |     /----- beq.s 8bb6 <scaleSprite+0x18a>
    8ba0:	|     |     |      movea.l 20(sp),a0
    8ba4:	|     |     |      move.l (a0),d0
    8ba6:	|     |     |      move.l d0,d1
    8ba8:	|     |     |      movea.l 20(sp),a0
    8bac:	|     |     |      move.l 8(a0),d0
    8bb0:	|     |     |      move.l d0,d0
    8bb2:	|     |     |      sub.w d0,d1
    8bb4:	|     |     |  /-- bra.s 8bc4 <scaleSprite+0x198>
    8bb6:	|     |     \--|-> movea.l 20(sp),a0
    8bba:	|     |        |   move.l 8(a0),d0
    8bbe:	|     |        |   move.l d0,d0
    8bc0:	|     |        |   move.w d0,d1
    8bc2:	|     |        |   addq.w #1,d1
    8bc4:	|     |        \-> move.w 6(sp),d0
    8bc8:	|     |            sub.w d1,d0
    8bca:	|     |            move.w d0,14(sp)
    8bce:	|     |  /-------- bra.s 8c04 <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8bd0:	|     \--|-------> tst.w 2(sp)
    8bd4:	|        |  /----- beq.s 8bf0 <scaleSprite+0x1c4>
    8bd6:	|        |  |      movea.l 20(sp),a0
    8bda:	|        |  |      move.l (a0),d0
    8bdc:	|        |  |      move.l d0,d1
    8bde:	|        |  |      movea.l 20(sp),a0
    8be2:	|        |  |      move.l 8(a0),d0
    8be6:	|        |  |      move.l d0,d0
    8be8:	|        |  |      sub.w d0,d1
    8bea:	|        |  |      move.w d1,d0
    8bec:	|        |  |      subq.w #1,d0
    8bee:	|        |  |  /-- bra.s 8bfa <scaleSprite+0x1ce>
    8bf0:	|        |  \--|-> movea.l 20(sp),a0
    8bf4:	|        |     |   move.l 8(a0),d0
    8bf8:	|        |     |   move.l d0,d0
    8bfa:	|        |     \-> move.w 6(sp),d1
    8bfe:	|        |         sub.w d0,d1
    8c00:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8c04:	|        \-------> movea.l 24(sp),a0
    8c08:	|                  move.l 24(a0),d0
    8c0c:	|                  move.l d0,d1
    8c0e:	|                  movea.l 20(sp),a0
    8c12:	|                  move.l 12(a0),d0
    8c16:	|                  move.l d0,d0
    8c18:	|                  sub.w d0,d1
    8c1a:	|                  movea.w 4(sp),a0
    8c1e:	|                  adda.w d1,a0
    8c20:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    8c24:	|                  movea.l 20(sp),a0
    8c28:	|                  move.l (a0),d0
    8c2a:	|                  move.l d0,d0
    8c2c:	|                  move.w 14(sp),d1
    8c30:	|                  add.w d0,d1
    8c32:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    8c36:	|                  movea.l 20(sp),a0
    8c3a:	|                  move.l 4(a0),d0
    8c3e:	|                  move.l d0,d0
    8c40:	|                  movea.w 12(sp),a0
    8c44:	|                  adda.w d0,a0
    8c46:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    8c4a:	\----------------> move.l 1a75e <input+0xa>,d1
    8c50:	                   moveq #0,d0
    8c52:	                   move.w 14(sp),d0
    8c56:	                   cmp.l d1,d0
    8c58:	            /----- bgt.s 8c8e <scaleSprite+0x262>
    8c5a:	            |      move.l 1a75e <input+0xa>,d1
    8c60:	            |      moveq #0,d0
    8c62:	            |      move.w 10(sp),d0
    8c66:	            |      cmp.l d1,d0
    8c68:	            +----- blt.s 8c8e <scaleSprite+0x262>
    8c6a:	            |      move.l 1a762 <input+0xe>,d1
    8c70:	            |      moveq #0,d0
    8c72:	            |      move.w 12(sp),d0
    8c76:	            |      cmp.l d1,d0
    8c78:	            +----- bgt.s 8c8e <scaleSprite+0x262>
    8c7a:	            |      move.l 1a762 <input+0xe>,d1
    8c80:	            |      moveq #0,d0
    8c82:	            |      move.w 8(sp),d0
    8c86:	            |      cmp.l d1,d0
    8c88:	            +----- blt.s 8c8e <scaleSprite+0x262>
		return TRUE;
    8c8a:	            |      moveq #1,d0
    8c8c:	            |  /-- bra.s 8c90 <scaleSprite+0x264>
	}
	return FALSE;
    8c8e:	            \--|-> clr.w d0
    8c90:	               \-> lea 16(sp),sp
    8c94:	                   rts

00008c96 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    8c96:	    move.l 4(sp),d0
    8c9a:	/-- bpl.s 8c9e <TF_abs+0x8>
    8c9c:	|   neg.l d0
}
    8c9e:	\-> rts

00008ca0 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    8ca0:	             lea -28(sp),sp
    8ca4:	             move.l a6,-(sp)
    8ca6:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    8ca8:	             move.l #132,28(sp)
    8cb0:	             clr.l 24(sp)
    8cb4:	             move.l 1a7a2 <SysBase>,d0
    8cba:	             movea.l d0,a6
    8cbc:	             move.l 28(sp),d0
    8cc0:	             move.l 24(sp),d1
    8cc4:	             jsr -684(a6)
    8cc8:	             move.l d0,20(sp)
    8ccc:	             move.l 20(sp),d0
    8cd0:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    8cd4:	         /-- bne.s 8cdc <addPerson+0x3c>
    8cd6:	         |   clr.w d0
    8cd8:	/--------|-- bra.w 8f0c <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    8cdc:	|        \-> move.l 48(sp),-(sp)
    8ce0:	|            jsr d070 <loadObjectType>
    8ce6:	|            addq.l #4,sp
    8ce8:	|            movea.l 16(sp),a0
    8cec:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    8cf0:	|            movea.l 16(sp),a0
    8cf4:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    8cfc:	|            movea.l 16(sp),a0
    8d00:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    8d04:	|            movea.l 16(sp),a0
    8d08:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    8d0c:	|            move.l 44(sp),-(sp)
    8d10:	|            jsr 16fe8 <__floatsisf>
    8d16:	|            addq.l #4,sp
    8d18:	|            move.l d0,d2
    8d1a:	|            move.l 40(sp),-(sp)
    8d1e:	|            jsr 16fe8 <__floatsisf>
    8d24:	|            addq.l #4,sp
    8d26:	|            move.l d2,-(sp)
    8d28:	|            move.l d0,-(sp)
    8d2a:	|            move.l 24(sp),-(sp)
    8d2e:	|            jsr a7ee <moveAndScale>
    8d34:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    8d38:	|            movea.l 16(sp),a0
    8d3c:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    8d40:	|            movea.l 16(sp),a0
    8d44:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    8d4a:	|            movea.l 16(sp),a0
    8d4e:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    8d54:	|            movea.l 16(sp),a0
    8d58:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    8d5c:	|            movea.l 16(sp),a0
    8d60:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    8d64:	|            movea.l 16(sp),a0
    8d68:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    8d6e:	|            movea.l 16(sp),a0
    8d72:	|            clr.l 106(a0)
    newPerson->angle = 180;
    8d76:	|            movea.l 16(sp),a0
    8d7a:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    8d82:	|            movea.l 16(sp),a0
    8d86:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    8d8e:	|            movea.l 16(sp),a0
    8d92:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    8d96:	|            movea.l 16(sp),a0
    8d9a:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    8d9e:	|            movea.l 16(sp),a0
    8da2:	|            movea.l 114(a0),a0
    8da6:	|            move.l 24(a0),d0
    8daa:	|            movea.l 16(sp),a0
    8dae:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    8db2:	|            movea.l 16(sp),a0
    8db6:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    8dba:	|            movea.l 16(sp),a0
    8dbe:	|            movea.l 114(a0),a0
    8dc2:	|            move.l 32(a0),d0
    8dc6:	|            movea.l 16(sp),a0
    8dca:	|            move.l d0,122(a0)
    newPerson->r = 0;
    8dce:	|            movea.l 16(sp),a0
    8dd2:	|            clr.b 126(a0)
    newPerson->g = 0;
    8dd6:	|            movea.l 16(sp),a0
    8dda:	|            clr.b 127(a0)
    newPerson->b = 0;
    8dde:	|            movea.l 16(sp),a0
    8de2:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    8de6:	|            movea.l 16(sp),a0
    8dea:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    8dee:	|            movea.l 16(sp),a0
    8df2:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    8df6:	|            movea.l 16(sp),a0
    8dfa:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    8e00:	|            clr.l -(sp)
    8e02:	|            move.l 20(sp),-(sp)
    8e06:	|            jsr 79f0 <setFrames>
    8e0c:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    8e0e:	|            movea.l 52(sp),a0
    8e12:	|            movea.l (a0),a0
    8e14:	|            movea.l (a0),a0
    8e16:	|            movea.l 4(a0),a0
    8e1a:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    8e1e:	|     /----- bpl.s 8e28 <addPerson+0x188>
    8e20:	|     |      move.l 12(sp),d0
    8e24:	|     |      neg.l d0
    8e26:	|     |  /-- bra.s 8e2a <addPerson+0x18a>
    8e28:	|     \--|-> moveq #1,d0
    8e2a:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    8e2e:	|            movea.l 52(sp),a0
    8e32:	|            movea.l (a0),a0
    8e34:	|            movea.l (a0),a0
    8e36:	|            movea.l (a0),a0
    8e38:	|            move.l 8(a0),d0
    8e3c:	|            cmp.l 8(sp),d0
    8e40:	|     /----- bgt.s 8e72 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    8e42:	|     |      tst.l 12(sp)
    8e46:	|     |  /-- bge.s 8e54 <addPerson+0x1b4>
            newPerson->height = 5;
    8e48:	|     |  |   movea.l 16(sp),a0
    8e4c:	|     |  |   moveq #5,d0
    8e4e:	|     |  |   move.l d0,20(a0)
    8e52:	|  /--|--|-- bra.s 8e9e <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    8e54:	|  |  |  \-> movea.l 52(sp),a0
    8e58:	|  |  |      movea.l (a0),a0
    8e5a:	|  |  |      movea.l (a0),a0
    8e5c:	|  |  |      movea.l (a0),a0
    8e5e:	|  |  |      movea.l 16(a0),a0
    8e62:	|  |  |      move.l 12(a0),d0
    8e66:	|  |  |      addq.l #5,d0
    8e68:	|  |  |      movea.l 16(sp),a0
    8e6c:	|  |  |      move.l d0,20(a0)
    8e70:	|  +--|----- bra.s 8e9e <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    8e72:	|  |  \----> movea.l 52(sp),a0
    8e76:	|  |         movea.l (a0),a0
    8e78:	|  |         movea.l (a0),a0
    8e7a:	|  |         movea.l (a0),a0
    8e7c:	|  |         movea.l 16(a0),a0
    8e80:	|  |         move.l 8(sp),d1
    8e84:	|  |         move.l d1,d0
    8e86:	|  |         lsl.l #3,d0
    8e88:	|  |         sub.l d1,d0
    8e8a:	|  |         add.l d0,d0
    8e8c:	|  |         add.l d0,d0
    8e8e:	|  |         adda.l d0,a0
    8e90:	|  |         move.l 12(a0),d0
    8e94:	|  |         addq.l #5,d0
    8e96:	|  |         movea.l 16(sp),a0
    8e9a:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    8e9e:	|  \-------> move.l #108634,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    8ea6:	|        /-- bra.s 8eb6 <addPerson+0x216>
        changethat = &((*changethat)->next);
    8ea8:	|     /--|-> movea.l 32(sp),a0
    8eac:	|     |  |   move.l (a0),d0
    8eae:	|     |  |   moveq #36,d1
    8eb0:	|     |  |   add.l d0,d1
    8eb2:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    8eb6:	|     |  \-> movea.l 32(sp),a0
    8eba:	|     |      move.l (a0),d0
    8ebc:	|     |  /-- beq.s 8ee4 <addPerson+0x244>
    8ebe:	|     |  |   movea.l 32(sp),a0
    8ec2:	|     |  |   movea.l (a0),a0
    8ec4:	|     |  |   move.l 4(a0),d2
    8ec8:	|     |  |   move.l 44(sp),-(sp)
    8ecc:	|     |  |   jsr 16fe8 <__floatsisf>
    8ed2:	|     |  |   addq.l #4,sp
    8ed4:	|     |  |   move.l d0,-(sp)
    8ed6:	|     |  |   move.l d2,-(sp)
    8ed8:	|     |  |   jsr 1720e <__ltsf2>
    8ede:	|     |  |   addq.l #8,sp
    8ee0:	|     |  |   tst.l d0
    8ee2:	|     \--|-- blt.s 8ea8 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    8ee4:	|        \-> movea.l 32(sp),a0
    8ee8:	|            move.l (a0),d0
    8eea:	|            movea.l 16(sp),a0
    8eee:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    8ef2:	|            movea.l 32(sp),a0
    8ef6:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    8efa:	|            movea.l 16(sp),a0
    8efe:	|            move.l 114(a0),d0
    8f02:	|            sne d0
    8f04:	|            neg.b d0
    8f06:	|            move.b d0,d0
    8f08:	|            andi.w #255,d0
}
    8f0c:	\----------> move.l (sp)+,d2
    8f0e:	             movea.l (sp)+,a6
    8f10:	             lea 28(sp),sp
    8f14:	             rts

00008f16 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    8f16:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8f18:	       move.l 8(sp),-(sp)
    8f1c:	       jsr a0a6 <findPerson>
    8f22:	       addq.l #4,sp
    8f24:	       move.l d0,(sp)
    if (moveMe) {
    8f26:	/----- beq.s 8f5a <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    8f28:	|      movea.l (sp),a0
    8f2a:	|      move.l 68(a0),d0
    8f2e:	|  /-- beq.s 8f40 <animatePerson+0x2a>
    8f30:	|  |   movea.l (sp),a0
    8f32:	|  |   move.l 68(a0),d0
    8f36:	|  |   move.l d0,-(sp)
    8f38:	|  |   jsr 3fa6 <abortFunction>
    8f3e:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    8f40:	|  \-> movea.l (sp),a0
    8f42:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    8f46:	|      movea.l (sp),a0
    8f48:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    8f4c:	|      movea.l (sp),a0
    8f4e:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    8f52:	|      movea.l (sp),a0
    8f54:	|      move.l 12(sp),72(a0)
    }
}
    8f5a:	\----> nop
    8f5c:	       addq.l #4,sp
    8f5e:	       rts

00008f60 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    8f60:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8f62:	       move.l 8(sp),-(sp)
    8f66:	       jsr a0a6 <findPerson>
    8f6c:	       addq.l #4,sp
    8f6e:	       move.l d0,(sp)
    if (moveMe) {
    8f70:	/----- beq.s 8fb2 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    8f72:	|      movea.l (sp),a0
    8f74:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    8f78:	|      movea.l (sp),a0
    8f7a:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    8f80:	|      move.l (sp),-(sp)
    8f82:	|      jsr a97c <rethinkAngle>
    8f88:	|      addq.l #4,sp
        if (moveMe->walking) {
    8f8a:	|      movea.l (sp),a0
    8f8c:	|      move.w 64(a0),d0
    8f90:	|  /-- beq.s 8fa4 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    8f92:	|  |   pea 1 <_start+0x1>
    8f96:	|  |   move.l 4(sp),-(sp)
    8f9a:	|  |   jsr 79f0 <setFrames>
    8fa0:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    8fa2:	+--|-- bra.s 8fb2 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    8fa4:	|  \-> clr.l -(sp)
    8fa6:	|      move.l 4(sp),-(sp)
    8faa:	|      jsr 79f0 <setFrames>
    8fb0:	|      addq.l #8,sp
}
    8fb2:	\----> nop
    8fb4:	       addq.l #4,sp
    8fb6:	       rts

00008fb8 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    8fb8:	             lea -36(sp),sp
    8fbc:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    8fbe:	             movea.l 44(sp),a0
    8fc2:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    8fc8:	             moveq #12,d0
    8fca:	             move.l d0,28(sp)
    8fce:	             clr.l 24(sp)
    8fd2:	             move.l 1a7a2 <SysBase>,d0
    8fd8:	             movea.l d0,a6
    8fda:	             move.l 28(sp),d0
    8fde:	             move.l 24(sp),d1
    8fe2:	             jsr -684(a6)
    8fe6:	             move.l d0,20(sp)
    8fea:	             move.l 20(sp),d0
    8fee:	             move.l d0,16(sp)
	if (!(newAnim)) {
    8ff2:	         /-- bne.s 9008 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    8ff4:	         |   pea 18ac6 <PutChar+0x1446>
    8ffa:	         |   jsr 16bac <KPrintF>
    9000:	         |   addq.l #4,sp
		return NULL;
    9002:	         |   moveq #0,d0
    9004:	/--------|-- bra.w 915a <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9008:	|        \-> movea.l 44(sp),a0
    900c:	|            move.l (a0),d0
    900e:	|            movea.l 16(sp),a0
    9012:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9014:	|            movea.l 16(sp),a0
    9018:	|            movea.l (a0),a0
    901a:	|            move.l 4(a0),d0
    901e:	|            addq.l #1,d0
    9020:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9024:	|            movea.l 16(sp),a0
    9028:	|            move.l 32(sp),8(a0)

	if (num) {
    902e:	|  /-------- beq.w 914e <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9032:	|  |         move.l 32(sp),d1
    9036:	|  |         move.l d1,d0
    9038:	|  |         add.l d0,d0
    903a:	|  |         add.l d1,d0
    903c:	|  |         add.l d0,d0
    903e:	|  |         add.l d0,d0
    9040:	|  |         move.l d0,12(sp)
    9044:	|  |         clr.l 8(sp)
    9048:	|  |         move.l 1a7a2 <SysBase>,d0
    904e:	|  |         movea.l d0,a6
    9050:	|  |         move.l 12(sp),d0
    9054:	|  |         move.l 8(sp),d1
    9058:	|  |         jsr -684(a6)
    905c:	|  |         move.l d0,4(sp)
    9060:	|  |         move.l 4(sp),d0
    9064:	|  |         movea.l 16(sp),a0
    9068:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    906c:	|  |         movea.l 16(sp),a0
    9070:	|  |         move.l 4(a0),d0
    9074:	|  |     /-- bne.s 908a <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9076:	|  |     |   pea 18ac6 <PutChar+0x1446>
    907c:	|  |     |   jsr 16bac <KPrintF>
    9082:	|  |     |   addq.l #4,sp
			return NULL;
    9084:	|  |     |   moveq #0,d0
    9086:	+--|-----|-- bra.w 915a <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    908a:	|  |     \-> clr.l 36(sp)
    908e:	|  |     /-- bra.w 9140 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9092:	|  |  /--|-> movea.l 44(sp),a0
    9096:	|  |  |  |   movea.l 4(a0),a0
    909a:	|  |  |  |   move.l 36(sp),d1
    909e:	|  |  |  |   move.l d1,d0
    90a0:	|  |  |  |   add.l d0,d0
    90a2:	|  |  |  |   add.l d1,d0
    90a4:	|  |  |  |   add.l d0,d0
    90a6:	|  |  |  |   add.l d0,d0
    90a8:	|  |  |  |   lea (0,a0,d0.l),a1
    90ac:	|  |  |  |   movea.l 16(sp),a0
    90b0:	|  |  |  |   movea.l 4(a0),a0
    90b4:	|  |  |  |   move.l 36(sp),d1
    90b8:	|  |  |  |   move.l d1,d0
    90ba:	|  |  |  |   add.l d0,d0
    90bc:	|  |  |  |   add.l d1,d0
    90be:	|  |  |  |   add.l d0,d0
    90c0:	|  |  |  |   add.l d0,d0
    90c2:	|  |  |  |   adda.l d0,a0
    90c4:	|  |  |  |   move.l (a1),d0
    90c6:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    90c8:	|  |  |  |   movea.l 44(sp),a0
    90cc:	|  |  |  |   movea.l 4(a0),a0
    90d0:	|  |  |  |   move.l 36(sp),d1
    90d4:	|  |  |  |   move.l d1,d0
    90d6:	|  |  |  |   add.l d0,d0
    90d8:	|  |  |  |   add.l d1,d0
    90da:	|  |  |  |   add.l d0,d0
    90dc:	|  |  |  |   add.l d0,d0
    90de:	|  |  |  |   lea (0,a0,d0.l),a1
    90e2:	|  |  |  |   movea.l 16(sp),a0
    90e6:	|  |  |  |   movea.l 4(a0),a0
    90ea:	|  |  |  |   move.l 36(sp),d1
    90ee:	|  |  |  |   move.l d1,d0
    90f0:	|  |  |  |   add.l d0,d0
    90f2:	|  |  |  |   add.l d1,d0
    90f4:	|  |  |  |   add.l d0,d0
    90f6:	|  |  |  |   add.l d0,d0
    90f8:	|  |  |  |   adda.l d0,a0
    90fa:	|  |  |  |   move.l 4(a1),d0
    90fe:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9102:	|  |  |  |   movea.l 44(sp),a0
    9106:	|  |  |  |   movea.l 4(a0),a0
    910a:	|  |  |  |   move.l 36(sp),d1
    910e:	|  |  |  |   move.l d1,d0
    9110:	|  |  |  |   add.l d0,d0
    9112:	|  |  |  |   add.l d1,d0
    9114:	|  |  |  |   add.l d0,d0
    9116:	|  |  |  |   add.l d0,d0
    9118:	|  |  |  |   lea (0,a0,d0.l),a1
    911c:	|  |  |  |   movea.l 16(sp),a0
    9120:	|  |  |  |   movea.l 4(a0),a0
    9124:	|  |  |  |   move.l 36(sp),d1
    9128:	|  |  |  |   move.l d1,d0
    912a:	|  |  |  |   add.l d0,d0
    912c:	|  |  |  |   add.l d1,d0
    912e:	|  |  |  |   add.l d0,d0
    9130:	|  |  |  |   add.l d0,d0
    9132:	|  |  |  |   adda.l d0,a0
    9134:	|  |  |  |   move.l 8(a1),d0
    9138:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    913c:	|  |  |  |   addq.l #1,36(sp)
    9140:	|  |  |  \-> move.l 36(sp),d0
    9144:	|  |  |      cmp.l 32(sp),d0
    9148:	|  |  \----- blt.w 9092 <copyAnim+0xda>
    914c:	|  |     /-- bra.s 9156 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    914e:	|  \-----|-> movea.l 16(sp),a0
    9152:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9156:	|        \-> move.l 16(sp),d0
}
    915a:	\----------> movea.l (sp)+,a6
    915c:	             lea 36(sp),sp
    9160:	             rts

00009162 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9162:	                lea -44(sp),sp
    9166:	                move.l a6,-(sp)
    9168:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    916a:	                moveq #12,d0
    916c:	                move.l d0,40(sp)
    9170:	                clr.l 36(sp)
    9174:	                move.l 1a7a2 <SysBase>,d0
    917a:	                movea.l d0,a6
    917c:	                move.l 40(sp),d0
    9180:	                move.l 36(sp),d1
    9184:	                jsr -684(a6)
    9188:	                move.l d0,32(sp)
    918c:	                move.l 32(sp),d0
    9190:	                move.l d0,28(sp)
	if( !newP) {
    9194:	            /-- bne.s 91aa <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9196:	            |   pea 18ae7 <PutChar+0x1467>
    919c:	            |   jsr 16bac <KPrintF>
    91a2:	            |   addq.l #4,sp
		return NULL;
    91a4:	            |   moveq #0,d0
    91a6:	/-----------|-- bra.w 937a <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    91aa:	|           \-> movea.l 28(sp),a0
    91ae:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    91b4:	|               move.l 56(sp),d1
    91b8:	|               move.l d1,d0
    91ba:	|               add.l d0,d0
    91bc:	|               add.l d1,d0
    91be:	|               add.l d0,d0
    91c0:	|               add.l d0,d0
    91c2:	|               move.l d0,24(sp)
    91c6:	|               clr.l 20(sp)
    91ca:	|               move.l 1a7a2 <SysBase>,d0
    91d0:	|               movea.l d0,a6
    91d2:	|               move.l 24(sp),d0
    91d6:	|               move.l 20(sp),d1
    91da:	|               jsr -684(a6)
    91de:	|               move.l d0,16(sp)
    91e2:	|               move.l 16(sp),d0
    91e6:	|               movea.l 28(sp),a0
    91ea:	|               move.l d0,4(a0)
	if( !newP->frames) {
    91ee:	|               movea.l 28(sp),a0
    91f2:	|               move.l 4(a0),d0
    91f6:	|           /-- bne.s 920c <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    91f8:	|           |   pea 18ae7 <PutChar+0x1467>
    91fe:	|           |   jsr 16bac <KPrintF>
    9204:	|           |   addq.l #4,sp
		return NULL;
    9206:	|           |   moveq #0,d0
    9208:	+-----------|-- bra.w 937a <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    920c:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9212:	|               movea.l 60(sp),a0
    9216:	|               move.l (a0),44(sp)
	while (a) {
    921a:	|     /-------- bra.w 936e <createPersonaAnim+0x20c>
		a --;
    921e:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    9222:	|  |  |         movea.l 28(sp),a0
    9226:	|  |  |         movea.l 4(a0),a0
    922a:	|  |  |         move.l 48(sp),d1
    922e:	|  |  |         move.l d1,d0
    9230:	|  |  |         add.l d0,d0
    9232:	|  |  |         add.l d1,d0
    9234:	|  |  |         add.l d0,d0
    9236:	|  |  |         add.l d0,d0
    9238:	|  |  |         adda.l d0,a0
    923a:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    923e:	|  |  |         movea.l 44(sp),a0
    9242:	|  |  |         move.l (a0),d0
    9244:	|  |  |         moveq #5,d1
    9246:	|  |  |         cmp.l d0,d1
    9248:	|  |  |     /-- bne.s 9274 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    924a:	|  |  |     |   movea.l 28(sp),a0
    924e:	|  |  |     |   movea.l 4(a0),a0
    9252:	|  |  |     |   move.l 48(sp),d1
    9256:	|  |  |     |   move.l d1,d0
    9258:	|  |  |     |   add.l d0,d0
    925a:	|  |  |     |   add.l d1,d0
    925c:	|  |  |     |   add.l d0,d0
    925e:	|  |  |     |   add.l d0,d0
    9260:	|  |  |     |   lea (0,a0,d0.l),a1
    9264:	|  |  |     |   movea.l 44(sp),a0
    9268:	|  |  |     |   move.l 4(a0),d0
    926c:	|  |  |     |   move.l d0,8(a1)
    9270:	|  |  |  /--|-- bra.w 931c <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9274:	|  |  |  |  \-> movea.l 44(sp),a0
    9278:	|  |  |  |      move.l (a0),d0
    927a:	|  |  |  |      moveq #2,d1
    927c:	|  |  |  |      cmp.l d0,d1
    927e:	|  |  |  |  /-- bne.s 92aa <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9280:	|  |  |  |  |   movea.l 44(sp),a0
    9284:	|  |  |  |  |   move.l 4(a0),d2
    9288:	|  |  |  |  |   movea.l 28(sp),a0
    928c:	|  |  |  |  |   movea.l 4(a0),a0
    9290:	|  |  |  |  |   move.l 48(sp),d1
    9294:	|  |  |  |  |   move.l d1,d0
    9296:	|  |  |  |  |   add.l d0,d0
    9298:	|  |  |  |  |   add.l d1,d0
    929a:	|  |  |  |  |   add.l d0,d0
    929c:	|  |  |  |  |   add.l d0,d0
    929e:	|  |  |  |  |   adda.l d0,a0
    92a0:	|  |  |  |  |   move.l d2,d0
    92a2:	|  |  |  |  |   neg.l d0
    92a4:	|  |  |  |  |   move.l d0,8(a0)
    92a8:	|  |  |  +--|-- bra.s 931c <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    92aa:	|  |  |  |  \-> movea.l 44(sp),a0
    92ae:	|  |  |  |      move.l (a0),d0
    92b0:	|  |  |  |      moveq #6,d1
    92b2:	|  |  |  |      cmp.l d0,d1
    92b4:	|  |  |  |  /-- bne.s 92fc <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    92b6:	|  |  |  |  |   movea.l 44(sp),a0
    92ba:	|  |  |  |  |   movea.l 4(a0),a0
    92be:	|  |  |  |  |   move.l (a0),d0
    92c0:	|  |  |  |  |   move.l d0,-(sp)
    92c2:	|  |  |  |  |   pea 1 <_start+0x1>
    92c6:	|  |  |  |  |   lea 20(sp),a0
    92ca:	|  |  |  |  |   move.l a0,-(sp)
    92cc:	|  |  |  |  |   jsr 141ae <getValueType>
    92d2:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    92d6:	|  |  |  |  |   movea.l 44(sp),a0
    92da:	|  |  |  |  |   movea.l 4(a0),a0
    92de:	|  |  |  |  |   movea.l (a0),a0
    92e0:	|  |  |  |  |   move.l 8(a0),d0
    92e4:	|  |  |  |  |   move.l d0,-(sp)
    92e6:	|  |  |  |  |   pea 1 <_start+0x1>
    92ea:	|  |  |  |  |   lea 16(sp),a0
    92ee:	|  |  |  |  |   move.l a0,-(sp)
    92f0:	|  |  |  |  |   jsr 141ae <getValueType>
    92f6:	|  |  |  |  |   lea 12(sp),sp
    92fa:	|  |  |  +--|-- bra.s 931c <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    92fc:	|  |  |  |  \-> move.l 44(sp),d0
    9300:	|  |  |  |      move.l d0,-(sp)
    9302:	|  |  |  |      pea 1 <_start+0x1>
    9306:	|  |  |  |      lea 20(sp),a0
    930a:	|  |  |  |      move.l a0,-(sp)
    930c:	|  |  |  |      jsr 141ae <getValueType>
    9312:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9316:	|  |  |  |      moveq #1,d0
    9318:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    931c:	|  |  |  \----> move.l 60(sp),-(sp)
    9320:	|  |  |         jsr 14b32 <trimStack>
    9326:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9328:	|  |  |         movea.l 28(sp),a0
    932c:	|  |  |         movea.l 4(a0),a0
    9330:	|  |  |         move.l 48(sp),d1
    9334:	|  |  |         move.l d1,d0
    9336:	|  |  |         add.l d0,d0
    9338:	|  |  |         add.l d1,d0
    933a:	|  |  |         add.l d0,d0
    933c:	|  |  |         add.l d0,d0
    933e:	|  |  |         adda.l d0,a0
    9340:	|  |  |         move.l 12(sp),d0
    9344:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9346:	|  |  |         movea.l 28(sp),a0
    934a:	|  |  |         movea.l 4(a0),a0
    934e:	|  |  |         move.l 48(sp),d1
    9352:	|  |  |         move.l d1,d0
    9354:	|  |  |         add.l d0,d0
    9356:	|  |  |         add.l d1,d0
    9358:	|  |  |         add.l d0,d0
    935a:	|  |  |         add.l d0,d0
    935c:	|  |  |         adda.l d0,a0
    935e:	|  |  |         move.l 8(sp),d0
    9362:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9366:	|  |  |         movea.l 60(sp),a0
    936a:	|  |  |         move.l (a0),44(sp)
	while (a) {
    936e:	|  |  \-------> tst.l 48(sp)
    9372:	|  \----------- bne.w 921e <createPersonaAnim+0xbc>
	}

	return newP;
    9376:	|               move.l 28(sp),d0
}
    937a:	\-------------> move.l (sp)+,d2
    937c:	                movea.l (sp)+,a6
    937e:	                lea 44(sp),sp
    9382:	                rts

00009384 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9384:	       lea -12(sp),sp
    9388:	       move.l a6,-(sp)

	if(orig->theSprites)
    938a:	       movea.l 20(sp),a0
    938e:	       move.l (a0),d0
    9390:	   /-- beq.s 93ba <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9392:	   |   movea.l 20(sp),a0
    9396:	   |   movea.l (a0),a0
    9398:	   |   move.l 4(a0),d0
    939c:	   |   subq.l #1,d0
    939e:	   |   move.l d0,4(a0)
    93a2:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    93a8:	   +-- bne.s 93ba <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    93aa:	   |   movea.l 20(sp),a0
    93ae:	   |   move.l (a0),d0
    93b0:	   |   move.l d0,-(sp)
    93b2:	   |   jsr 84f6 <forgetSpriteBank>
    93b8:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    93ba:	   \-> tst.l 20(sp)
    93be:	/----- beq.s 93fe <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    93c0:	|      movea.l 20(sp),a0
    93c4:	|      move.l 8(a0),d0
    93c8:	|  /-- beq.s 93e4 <deleteAnim+0x60>
			FreeVec( orig->frames);
    93ca:	|  |   movea.l 20(sp),a0
    93ce:	|  |   move.l 4(a0),8(sp)
    93d4:	|  |   move.l 1a7a2 <SysBase>,d0
    93da:	|  |   movea.l d0,a6
    93dc:	|  |   movea.l 8(sp),a1
    93e0:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    93e4:	|  \-> move.l 20(sp),4(sp)
    93ea:	|      move.l 1a7a2 <SysBase>,d0
    93f0:	|      movea.l d0,a6
    93f2:	|      movea.l 4(sp),a1
    93f6:	|      jsr -690(a6)
		orig = NULL;
    93fa:	|      clr.l 20(sp)
	}	
	
}
    93fe:	\----> nop
    9400:	       movea.l (sp)+,a6
    9402:	       lea 12(sp),sp
    9406:	       rts

00009408 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9408:	          lea -124(sp),sp
    940c:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9410:	          movea.l 152(sp),a0
    9414:	          move.l 56(a0),d1
    9418:	          movea.l 152(sp),a0
    941c:	          move.l 60(a0),d0
    9420:	          cmp.l d1,d0
    9422:	      /-- bne.s 9452 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9424:	      |   movea.l 152(sp),a0
    9428:	      |   moveq #-1,d0
    942a:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    942e:	      |   movea.l 152(sp),a0
    9432:	      |   move.l 40(a0),d0
    9436:	      |   movea.l 152(sp),a0
    943a:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    943e:	      |   movea.l 152(sp),a0
    9442:	      |   move.l 44(a0),d0
    9446:	      |   movea.l 152(sp),a0
    944a:	      |   move.l d0,52(a0)
    944e:	   /--|-- bra.w 99b8 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9452:	   |  \-> movea.l 1a916 <currentFloor>,a0
    9458:	   |      move.l 16(a0),d1
    945c:	   |      movea.l 152(sp),a0
    9460:	   |      move.l 56(a0),d0
    9464:	   |      add.l d0,d0
    9466:	   |      add.l d0,d0
    9468:	   |      movea.l d1,a0
    946a:	   |      adda.l d0,a0
    946c:	   |      move.l (a0),d1
    946e:	   |      movea.l 152(sp),a0
    9472:	   |      move.l 60(a0),d0
    9476:	   |      add.l d0,d0
    9478:	   |      add.l d0,d0
    947a:	   |      movea.l d1,a0
    947c:	   |      adda.l d0,a0
    947e:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9482:	   |      moveq #-1,d0
    9484:	   |      cmp.l 144(sp),d0
    9488:	   |  /-- bne.s 9490 <doBorderStuff+0x88>
    948a:	   |  |   clr.w d0
    948c:	/--|--|-- bra.w 9ab8 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9490:	|  |  \-> movea.l 1a916 <currentFloor>,a0
    9496:	|  |      move.l 12(a0),d1
    949a:	|  |      move.l 144(sp),d0
    949e:	|  |      lsl.l #3,d0
    94a0:	|  |      add.l d0,d1
    94a2:	|  |      movea.l 1a916 <currentFloor>,a0
    94a8:	|  |      movea.l 12(a0),a1
    94ac:	|  |      movea.l 152(sp),a0
    94b0:	|  |      move.l 56(a0),d0
    94b4:	|  |      lsl.l #3,d0
    94b6:	|  |      add.l a1,d0
    94b8:	|  |      lea 40(sp),a0
    94bc:	|  |      move.l a0,-(sp)
    94be:	|  |      lea 48(sp),a0
    94c2:	|  |      move.l a0,-(sp)
    94c4:	|  |      move.l d1,-(sp)
    94c6:	|  |      move.l d0,-(sp)
    94c8:	|  |      jsr 15e2e <getMatchingCorners>
    94ce:	|  |      lea 16(sp),sp
    94d2:	|  |      tst.w d0
    94d4:	|  |  /-- bne.s 94ea <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    94d6:	|  |  |   pea 18b11 <PutChar+0x1491>
    94dc:	|  |  |   jsr 16bac <KPrintF>
    94e2:	|  |  |   addq.l #4,sp
            return FALSE;
    94e4:	|  |  |   clr.w d0
    94e6:	+--|--|-- bra.w 9ab8 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    94ea:	|  |  \-> movea.l 152(sp),a0
    94ee:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    94f4:	|  |      movea.l 152(sp),a0
    94f8:	|  |      move.l (a0),d0
    94fa:	|  |      move.l d0,-(sp)
    94fc:	|  |      jsr 16f80 <__fixsfsi>
    9502:	|  |      addq.l #4,sp
    9504:	|  |      move.l d0,140(sp)
    9508:	|  |      movea.l 152(sp),a0
    950c:	|  |      move.l 4(a0),d0
    9510:	|  |      move.l d0,-(sp)
    9512:	|  |      jsr 16f80 <__fixsfsi>
    9518:	|  |      addq.l #4,sp
    951a:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    951e:	|  |      movea.l 152(sp),a0
    9522:	|  |      move.l 40(a0),132(sp)
    9528:	|  |      movea.l 152(sp),a0
    952c:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9532:	|  |      movea.l 1a916 <currentFloor>,a0
    9538:	|  |      move.l 4(a0),d1
    953c:	|  |      move.l 44(sp),d0
    9540:	|  |      lsl.l #3,d0
    9542:	|  |      movea.l d1,a0
    9544:	|  |      adda.l d0,a0
    9546:	|  |      move.l (a0),124(sp)
    954a:	|  |      movea.l 1a916 <currentFloor>,a0
    9550:	|  |      move.l 4(a0),d1
    9554:	|  |      move.l 44(sp),d0
    9558:	|  |      lsl.l #3,d0
    955a:	|  |      movea.l d1,a0
    955c:	|  |      adda.l d0,a0
    955e:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9564:	|  |      movea.l 1a916 <currentFloor>,a0
    956a:	|  |      move.l 4(a0),d1
    956e:	|  |      move.l 40(sp),d0
    9572:	|  |      lsl.l #3,d0
    9574:	|  |      movea.l d1,a0
    9576:	|  |      adda.l d0,a0
    9578:	|  |      move.l (a0),116(sp)
    957c:	|  |      movea.l 1a916 <currentFloor>,a0
    9582:	|  |      move.l 4(a0),d1
    9586:	|  |      move.l 40(sp),d0
    958a:	|  |      lsl.l #3,d0
    958c:	|  |      movea.l d1,a0
    958e:	|  |      adda.l d0,a0
    9590:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9596:	|  |      move.l 140(sp),d0
    959a:	|  |      sub.l 132(sp),d0
    959e:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    95a2:	|  |      move.l 136(sp),d0
    95a6:	|  |      sub.l 128(sp),d0
    95aa:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    95ae:	|  |      move.l 116(sp),d0
    95b2:	|  |      sub.l 124(sp),d0
    95b6:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    95ba:	|  |      move.l 112(sp),d0
    95be:	|  |      sub.l 120(sp),d0
    95c2:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    95c6:	|  |      move.l 124(sp),d0
    95ca:	|  |      sub.l 140(sp),d0
    95ce:	|  |      move.l 104(sp),-(sp)
    95d2:	|  |      move.l d0,-(sp)
    95d4:	|  |      jsr 1756a <__mulsi3>
    95da:	|  |      addq.l #8,sp
    95dc:	|  |      move.l d0,d2
    95de:	|  |      move.l 120(sp),d0
    95e2:	|  |      sub.l 136(sp),d0
    95e6:	|  |      move.l 108(sp),-(sp)
    95ea:	|  |      move.l d0,-(sp)
    95ec:	|  |      jsr 1756a <__mulsi3>
    95f2:	|  |      addq.l #8,sp
    95f4:	|  |      move.l d2,d1
    95f6:	|  |      sub.l d0,d1
    95f8:	|  |      move.l d1,-(sp)
    95fa:	|  |      jsr 16fa8 <__floatsidf>
    9600:	|  |      addq.l #4,sp
    9602:	|  |      move.l d0,32(sp)
    9606:	|  |      move.l d1,36(sp)
    960a:	|  |      move.l 32(sp),88(sp)
    9610:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9616:	|  |      move.l 96(sp),-(sp)
    961a:	|  |      move.l 112(sp),-(sp)
    961e:	|  |      jsr 1756a <__mulsi3>
    9624:	|  |      addq.l #8,sp
    9626:	|  |      move.l d0,d2
    9628:	|  |      move.l 100(sp),-(sp)
    962c:	|  |      move.l 108(sp),-(sp)
    9630:	|  |      jsr 1756a <__mulsi3>
    9636:	|  |      addq.l #8,sp
    9638:	|  |      move.l d2,d1
    963a:	|  |      sub.l d0,d1
    963c:	|  |      move.l d1,-(sp)
    963e:	|  |      jsr 16fa8 <__floatsidf>
    9644:	|  |      addq.l #4,sp
    9646:	|  |      move.l d1,-(sp)
    9648:	|  |      move.l d0,-(sp)
    964a:	|  |      move.l 100(sp),-(sp)
    964e:	|  |      move.l 100(sp),-(sp)
    9652:	|  |      jsr 16e32 <__divdf3>
    9658:	|  |      lea 16(sp),sp
    965c:	|  |      move.l d0,24(sp)
    9660:	|  |      move.l d1,28(sp)
    9664:	|  |      move.l 24(sp),88(sp)
    966a:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9670:	|  |      clr.l -(sp)
    9672:	|  |      clr.l -(sp)
    9674:	|  |      move.l 100(sp),-(sp)
    9678:	|  |      move.l 100(sp),-(sp)
    967c:	|  |      jsr 17106 <__gtdf2>
    9682:	|  |      lea 16(sp),sp
    9686:	|  |      tst.l d0
    9688:	|  |  /-- ble.w 9760 <doBorderStuff+0x358>
    968c:	|  |  |   clr.l -(sp)
    968e:	|  |  |   move.l #1072693248,-(sp)
    9694:	|  |  |   move.l 100(sp),-(sp)
    9698:	|  |  |   move.l 100(sp),-(sp)
    969c:	|  |  |   jsr 171c0 <__ltdf2>
    96a2:	|  |  |   lea 16(sp),sp
    96a6:	|  |  |   tst.l d0
    96a8:	|  |  +-- bge.w 9760 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    96ac:	|  |  |   move.l 124(sp),-(sp)
    96b0:	|  |  |   jsr 16fa8 <__floatsidf>
    96b6:	|  |  |   addq.l #4,sp
    96b8:	|  |  |   move.l d0,d2
    96ba:	|  |  |   move.l d1,d3
    96bc:	|  |  |   move.l 100(sp),-(sp)
    96c0:	|  |  |   jsr 16fa8 <__floatsidf>
    96c6:	|  |  |   addq.l #4,sp
    96c8:	|  |  |   move.l 92(sp),-(sp)
    96cc:	|  |  |   move.l 92(sp),-(sp)
    96d0:	|  |  |   move.l d1,-(sp)
    96d2:	|  |  |   move.l d0,-(sp)
    96d4:	|  |  |   jsr 17038 <__muldf3>
    96da:	|  |  |   lea 16(sp),sp
    96de:	|  |  |   move.l d1,-(sp)
    96e0:	|  |  |   move.l d0,-(sp)
    96e2:	|  |  |   move.l d3,-(sp)
    96e4:	|  |  |   move.l d2,-(sp)
    96e6:	|  |  |   jsr 16dd0 <__adddf3>
    96ec:	|  |  |   lea 16(sp),sp
    96f0:	|  |  |   move.l d1,-(sp)
    96f2:	|  |  |   move.l d0,-(sp)
    96f4:	|  |  |   jsr 16f40 <__fixdfsi>
    96fa:	|  |  |   addq.l #8,sp
    96fc:	|  |  |   movea.l 152(sp),a0
    9700:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9704:	|  |  |   move.l 120(sp),-(sp)
    9708:	|  |  |   jsr 16fa8 <__floatsidf>
    970e:	|  |  |   addq.l #4,sp
    9710:	|  |  |   move.l d0,d2
    9712:	|  |  |   move.l d1,d3
    9714:	|  |  |   move.l 96(sp),-(sp)
    9718:	|  |  |   jsr 16fa8 <__floatsidf>
    971e:	|  |  |   addq.l #4,sp
    9720:	|  |  |   move.l 92(sp),-(sp)
    9724:	|  |  |   move.l 92(sp),-(sp)
    9728:	|  |  |   move.l d1,-(sp)
    972a:	|  |  |   move.l d0,-(sp)
    972c:	|  |  |   jsr 17038 <__muldf3>
    9732:	|  |  |   lea 16(sp),sp
    9736:	|  |  |   move.l d1,-(sp)
    9738:	|  |  |   move.l d0,-(sp)
    973a:	|  |  |   move.l d3,-(sp)
    973c:	|  |  |   move.l d2,-(sp)
    973e:	|  |  |   jsr 16dd0 <__adddf3>
    9744:	|  |  |   lea 16(sp),sp
    9748:	|  |  |   move.l d1,-(sp)
    974a:	|  |  |   move.l d0,-(sp)
    974c:	|  |  |   jsr 16f40 <__fixdfsi>
    9752:	|  |  |   addq.l #8,sp
    9754:	|  |  |   movea.l 152(sp),a0
    9758:	|  |  |   move.l d0,52(a0)
    975c:	|  +--|-- bra.w 99b8 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9760:	|  |  \-> move.l 140(sp),d0
    9764:	|  |      sub.l 124(sp),d0
    9768:	|  |      move.l d0,84(sp)
    976c:	|  |      move.l 140(sp),d0
    9770:	|  |      sub.l 116(sp),d0
    9774:	|  |      move.l d0,80(sp)
    9778:	|  |      move.l 132(sp),d0
    977c:	|  |      sub.l 124(sp),d0
    9780:	|  |      move.l d0,76(sp)
    9784:	|  |      move.l 132(sp),d0
    9788:	|  |      sub.l 116(sp),d0
    978c:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9790:	|  |      move.l 136(sp),d0
    9794:	|  |      sub.l 120(sp),d0
    9798:	|  |      move.l d0,68(sp)
    979c:	|  |      move.l 136(sp),d0
    97a0:	|  |      sub.l 112(sp),d0
    97a4:	|  |      move.l d0,64(sp)
    97a8:	|  |      move.l 128(sp),d0
    97ac:	|  |      sub.l 120(sp),d0
    97b0:	|  |      move.l d0,60(sp)
    97b4:	|  |      move.l 128(sp),d0
    97b8:	|  |      sub.l 112(sp),d0
    97bc:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    97c0:	|  |      move.l 84(sp),-(sp)
    97c4:	|  |      move.l 88(sp),-(sp)
    97c8:	|  |      jsr 1756a <__mulsi3>
    97ce:	|  |      addq.l #8,sp
    97d0:	|  |      move.l d0,84(sp)
    97d4:	|  |      move.l 80(sp),-(sp)
    97d8:	|  |      move.l 84(sp),-(sp)
    97dc:	|  |      jsr 1756a <__mulsi3>
    97e2:	|  |      addq.l #8,sp
    97e4:	|  |      move.l d0,80(sp)
    97e8:	|  |      move.l 76(sp),-(sp)
    97ec:	|  |      move.l 80(sp),-(sp)
    97f0:	|  |      jsr 1756a <__mulsi3>
    97f6:	|  |      addq.l #8,sp
    97f8:	|  |      move.l d0,76(sp)
    97fc:	|  |      move.l 72(sp),-(sp)
    9800:	|  |      move.l 76(sp),-(sp)
    9804:	|  |      jsr 1756a <__mulsi3>
    980a:	|  |      addq.l #8,sp
    980c:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9810:	|  |      move.l 68(sp),-(sp)
    9814:	|  |      move.l 72(sp),-(sp)
    9818:	|  |      jsr 1756a <__mulsi3>
    981e:	|  |      addq.l #8,sp
    9820:	|  |      move.l d0,68(sp)
    9824:	|  |      move.l 64(sp),-(sp)
    9828:	|  |      move.l 68(sp),-(sp)
    982c:	|  |      jsr 1756a <__mulsi3>
    9832:	|  |      addq.l #8,sp
    9834:	|  |      move.l d0,64(sp)
    9838:	|  |      move.l 60(sp),-(sp)
    983c:	|  |      move.l 64(sp),-(sp)
    9840:	|  |      jsr 1756a <__mulsi3>
    9846:	|  |      addq.l #8,sp
    9848:	|  |      move.l d0,60(sp)
    984c:	|  |      move.l 56(sp),-(sp)
    9850:	|  |      move.l 60(sp),-(sp)
    9854:	|  |      jsr 1756a <__mulsi3>
    985a:	|  |      addq.l #8,sp
    985c:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9860:	|  |      move.l 84(sp),-(sp)
    9864:	|  |      jsr 16fa8 <__floatsidf>
    986a:	|  |      addq.l #4,sp
    986c:	|  |      move.l d0,d2
    986e:	|  |      move.l d1,d3
    9870:	|  |      move.l 68(sp),-(sp)
    9874:	|  |      jsr 16fa8 <__floatsidf>
    987a:	|  |      addq.l #4,sp
    987c:	|  |      move.l d1,-(sp)
    987e:	|  |      move.l d0,-(sp)
    9880:	|  |      move.l d3,-(sp)
    9882:	|  |      move.l d2,-(sp)
    9884:	|  |      jsr 16dd0 <__adddf3>
    988a:	|  |      lea 16(sp),sp
    988e:	|  |      move.l d1,-(sp)
    9890:	|  |      move.l d0,-(sp)
    9892:	|  |      jsr 17520 <sqrt>
    9898:	|  |      addq.l #8,sp
    989a:	|  |      move.l d0,d2
    989c:	|  |      move.l d1,d3
    989e:	|  |      move.l 76(sp),-(sp)
    98a2:	|  |      jsr 16fa8 <__floatsidf>
    98a8:	|  |      addq.l #4,sp
    98aa:	|  |      move.l d0,d4
    98ac:	|  |      move.l d1,d5
    98ae:	|  |      move.l 60(sp),-(sp)
    98b2:	|  |      jsr 16fa8 <__floatsidf>
    98b8:	|  |      addq.l #4,sp
    98ba:	|  |      move.l d1,-(sp)
    98bc:	|  |      move.l d0,-(sp)
    98be:	|  |      move.l d5,-(sp)
    98c0:	|  |      move.l d4,-(sp)
    98c2:	|  |      jsr 16dd0 <__adddf3>
    98c8:	|  |      lea 16(sp),sp
    98cc:	|  |      move.l d1,-(sp)
    98ce:	|  |      move.l d0,-(sp)
    98d0:	|  |      jsr 17520 <sqrt>
    98d6:	|  |      addq.l #8,sp
    98d8:	|  |      move.l d1,-(sp)
    98da:	|  |      move.l d0,-(sp)
    98dc:	|  |      move.l d3,-(sp)
    98de:	|  |      move.l d2,-(sp)
    98e0:	|  |      jsr 16dd0 <__adddf3>
    98e6:	|  |      lea 16(sp),sp
    98ea:	|  |      move.l d0,d2
    98ec:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    98ee:	|  |      move.l 80(sp),-(sp)
    98f2:	|  |      jsr 16fa8 <__floatsidf>
    98f8:	|  |      addq.l #4,sp
    98fa:	|  |      move.l d0,d4
    98fc:	|  |      move.l d1,d5
    98fe:	|  |      move.l 64(sp),-(sp)
    9902:	|  |      jsr 16fa8 <__floatsidf>
    9908:	|  |      addq.l #4,sp
    990a:	|  |      move.l d1,-(sp)
    990c:	|  |      move.l d0,-(sp)
    990e:	|  |      move.l d5,-(sp)
    9910:	|  |      move.l d4,-(sp)
    9912:	|  |      jsr 16dd0 <__adddf3>
    9918:	|  |      lea 16(sp),sp
    991c:	|  |      move.l d1,-(sp)
    991e:	|  |      move.l d0,-(sp)
    9920:	|  |      jsr 17520 <sqrt>
    9926:	|  |      addq.l #8,sp
    9928:	|  |      move.l d0,d4
    992a:	|  |      move.l d1,d5
    992c:	|  |      move.l 72(sp),-(sp)
    9930:	|  |      jsr 16fa8 <__floatsidf>
    9936:	|  |      addq.l #4,sp
    9938:	|  |      move.l d0,d6
    993a:	|  |      move.l d1,d7
    993c:	|  |      move.l 56(sp),-(sp)
    9940:	|  |      jsr 16fa8 <__floatsidf>
    9946:	|  |      addq.l #4,sp
    9948:	|  |      move.l d1,-(sp)
    994a:	|  |      move.l d0,-(sp)
    994c:	|  |      move.l d7,-(sp)
    994e:	|  |      move.l d6,-(sp)
    9950:	|  |      jsr 16dd0 <__adddf3>
    9956:	|  |      lea 16(sp),sp
    995a:	|  |      move.l d1,-(sp)
    995c:	|  |      move.l d0,-(sp)
    995e:	|  |      jsr 17520 <sqrt>
    9964:	|  |      addq.l #8,sp
    9966:	|  |      move.l d1,-(sp)
    9968:	|  |      move.l d0,-(sp)
    996a:	|  |      move.l d5,-(sp)
    996c:	|  |      move.l d4,-(sp)
    996e:	|  |      jsr 16dd0 <__adddf3>
    9974:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9978:	|  |      move.l d1,-(sp)
    997a:	|  |      move.l d0,-(sp)
    997c:	|  |      move.l d3,-(sp)
    997e:	|  |      move.l d2,-(sp)
    9980:	|  |      jsr 171c0 <__ltdf2>
    9986:	|  |      lea 16(sp),sp
    998a:	|  |      tst.l d0
    998c:	|  |  /-- bge.s 99a4 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    998e:	|  |  |   movea.l 152(sp),a0
    9992:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9998:	|  |  |   movea.l 152(sp),a0
    999c:	|  |  |   move.l 120(sp),52(a0)
    99a2:	|  +--|-- bra.s 99b8 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    99a4:	|  |  \-> movea.l 152(sp),a0
    99a8:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    99ae:	|  |      movea.l 152(sp),a0
    99b2:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    99b8:	|  \----> movea.l 152(sp),a0
    99bc:	|         move.l 52(a0),d0
    99c0:	|         move.l d0,-(sp)
    99c2:	|         jsr 16fe8 <__floatsisf>
    99c8:	|         addq.l #4,sp
    99ca:	|         move.l d0,d1
    99cc:	|         movea.l 152(sp),a0
    99d0:	|         move.l 4(a0),d0
    99d4:	|         move.l d0,-(sp)
    99d6:	|         move.l d1,-(sp)
    99d8:	|         jsr 172dc <__subsf3>
    99de:	|         addq.l #8,sp
    99e0:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    99e4:	|         movea.l 152(sp),a0
    99e8:	|         move.l (a0),d2
    99ea:	|         movea.l 152(sp),a0
    99ee:	|         move.l 48(a0),d0
    99f2:	|         move.l d0,-(sp)
    99f4:	|         jsr 16fe8 <__floatsisf>
    99fa:	|         addq.l #4,sp
    99fc:	|         move.l d0,-(sp)
    99fe:	|         move.l d2,-(sp)
    9a00:	|         jsr 172dc <__subsf3>
    9a06:	|         addq.l #8,sp
    9a08:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9a0c:	|         clr.l -(sp)
    9a0e:	|         move.l 52(sp),-(sp)
    9a12:	|         jsr 17244 <__nesf2>
    9a18:	|         addq.l #8,sp
    9a1a:	|         tst.l d0
    9a1c:	|     /-- bne.s 9a30 <doBorderStuff+0x628>
    9a1e:	|     |   clr.l -(sp)
    9a20:	|     |   move.l 56(sp),-(sp)
    9a24:	|     |   jsr 17244 <__nesf2>
    9a2a:	|     |   addq.l #8,sp
    9a2c:	|     |   tst.l d0
    9a2e:	|  /--|-- beq.s 9aa6 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9a30:	|  |  \-> move.l 52(sp),d0
    9a34:	|  |      move.l d0,-(sp)
    9a36:	|  |      move.l d0,-(sp)
    9a38:	|  |      jsr 16d9a <__addsf3>
    9a3e:	|  |      addq.l #8,sp
    9a40:	|  |      move.l d0,-(sp)
    9a42:	|  |      move.l 52(sp),-(sp)
    9a46:	|  |      jsr 17370 <atan2f>
    9a4c:	|  |      addq.l #8,sp
    9a4e:	|  |      move.l d0,-(sp)
    9a50:	|  |      jsr 16f00 <__extendsfdf2>
    9a56:	|  |      addq.l #4,sp
    9a58:	|  |      move.l #-1540411785,-(sp)
    9a5e:	|  |      move.l #1078765033,-(sp)
    9a64:	|  |      move.l d1,-(sp)
    9a66:	|  |      move.l d0,-(sp)
    9a68:	|  |      jsr 17038 <__muldf3>
    9a6e:	|  |      lea 16(sp),sp
    9a72:	|  |      clr.l -(sp)
    9a74:	|  |      move.l #1080459264,-(sp)
    9a7a:	|  |      move.l d1,-(sp)
    9a7c:	|  |      move.l d0,-(sp)
    9a7e:	|  |      jsr 16dd0 <__adddf3>
    9a84:	|  |      lea 16(sp),sp
    9a88:	|  |      move.l d1,-(sp)
    9a8a:	|  |      move.l d0,-(sp)
    9a8c:	|  |      jsr 16f40 <__fixdfsi>
    9a92:	|  |      addq.l #8,sp
    9a94:	|  |      movea.l 152(sp),a0
    9a98:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9a9c:	|  |      movea.l 152(sp),a0
    9aa0:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9aa6:	|  \----> pea 1 <_start+0x1>
    9aaa:	|         move.l 156(sp),-(sp)
    9aae:	|         jsr 79f0 <setFrames>
    9ab4:	|         addq.l #8,sp
    return TRUE;
    9ab6:	|         moveq #1,d0
}
    9ab8:	\-------> movem.l (sp)+,d2-d7
    9abc:	          lea 124(sp),sp
    9ac0:	          rts

00009ac2 <drawPeople>:

void drawPeople () {
    9ac2:	                   lea -24(sp),sp
    9ac6:	                   move.l d2,-(sp)

	shufflePeople ();
    9ac8:	                   jsr b55e <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9ace:	                   move.l 1a85a <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9ad6:	                   clr.l 20(sp)
	overRegion = NULL;
    9ada:	                   clr.l 1a90e <overRegion>

	while (thisPerson) {
    9ae0:	   /-------------- bra.w a092 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9ae4:	/--|-------------> movea.l 24(sp),a0
    9ae8:	|  |               move.w 104(a0),d0
    9aec:	|  |  /----------- beq.w 9e46 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9af0:	|  |  |            movea.l 24(sp),a0
    9af4:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9afa:	|  |  |            movea.l 24(sp),a0
    9afe:	|  |  |            move.l 76(a0),d0
    9b02:	|  |  |            cmp.l 20(sp),d0
    9b06:	|  |  |  /-------- beq.w 9cd4 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9b0a:	|  |  |  |         movea.l 24(sp),a0
    9b0e:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9b12:	|  |  |  |         movea.l 24(sp),a0
    9b16:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9b1c:	|  |  |  |         movea.l 24(sp),a0
    9b20:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9b24:	|  |  |  |         movea.l 20(sp),a0
    9b28:	|  |  |  |         movea.l 4(a0),a0
    9b2c:	|  |  |  |         move.l 4(a0),d0
    9b30:	|  |  |  |         movea.l 24(sp),a0
    9b34:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9b38:	|  |  |  |         movea.l 20(sp),a0
    9b3c:	|  |  |  |         movea.l 4(a0),a1
    9b40:	|  |  |  |         movea.l 24(sp),a0
    9b44:	|  |  |  |         move.l 84(a0),d0
    9b48:	|  |  |  |         move.l d0,d1
    9b4a:	|  |  |  |         move.l d1,d0
    9b4c:	|  |  |  |         add.l d0,d0
    9b4e:	|  |  |  |         add.l d1,d0
    9b50:	|  |  |  |         add.l d0,d0
    9b52:	|  |  |  |         add.l d0,d0
    9b54:	|  |  |  |         lea (0,a1,d0.l),a0
    9b58:	|  |  |  |         move.l 8(a0),d0
    9b5c:	|  |  |  |     /-- ble.w 9bfe <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9b60:	|  |  |  |     |   movea.l 20(sp),a0
    9b64:	|  |  |  |     |   movea.l 4(a0),a1
    9b68:	|  |  |  |     |   movea.l 24(sp),a0
    9b6c:	|  |  |  |     |   move.l 84(a0),d0
    9b70:	|  |  |  |     |   move.l d0,d1
    9b72:	|  |  |  |     |   move.l d1,d0
    9b74:	|  |  |  |     |   add.l d0,d0
    9b76:	|  |  |  |     |   add.l d1,d0
    9b78:	|  |  |  |     |   add.l d0,d0
    9b7a:	|  |  |  |     |   add.l d0,d0
    9b7c:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9b80:	|  |  |  |     |   move.l 8(a0),d0
    9b84:	|  |  |  |     |   clr.l -(sp)
    9b86:	|  |  |  |     |   move.l d0,-(sp)
    9b88:	|  |  |  |     |   jsr cc4a <startSound>
    9b8e:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9b90:	|  |  |  |     |   movea.l 24(sp),a0
    9b94:	|  |  |  |     |   move.l 84(a0),d0
    9b98:	|  |  |  |     |   addq.l #1,d0
    9b9a:	|  |  |  |     |   movea.l 24(sp),a0
    9b9e:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9ba2:	|  |  |  |     |   movea.l 24(sp),a0
    9ba6:	|  |  |  |     |   move.l 84(a0),d0
    9baa:	|  |  |  |     |   movea.l 24(sp),a0
    9bae:	|  |  |  |     |   movea.l 72(a0),a0
    9bb2:	|  |  |  |     |   move.l 8(a0),d1
    9bb6:	|  |  |  |     |   move.l d1,-(sp)
    9bb8:	|  |  |  |     |   move.l d0,-(sp)
    9bba:	|  |  |  |     |   jsr 17616 <__modsi3>
    9bc0:	|  |  |  |     |   addq.l #8,sp
    9bc2:	|  |  |  |     |   movea.l 24(sp),a0
    9bc6:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9bca:	|  |  |  |     |   movea.l 24(sp),a0
    9bce:	|  |  |  |     |   movea.l 72(a0),a0
    9bd2:	|  |  |  |     |   movea.l 4(a0),a1
    9bd6:	|  |  |  |     |   movea.l 24(sp),a0
    9bda:	|  |  |  |     |   move.l 84(a0),d0
    9bde:	|  |  |  |     |   move.l d0,d1
    9be0:	|  |  |  |     |   move.l d1,d0
    9be2:	|  |  |  |     |   add.l d0,d0
    9be4:	|  |  |  |     |   add.l d1,d0
    9be6:	|  |  |  |     |   add.l d0,d0
    9be8:	|  |  |  |     |   add.l d0,d0
    9bea:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9bee:	|  |  |  |     |   move.l 4(a0),d0
    9bf2:	|  |  |  |     |   movea.l 24(sp),a0
    9bf6:	|  |  |  |     |   move.l d0,88(a0)
    9bfa:	|  |  |  |  /--|-- bra.w 9d3c <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9bfe:	|  |  |  |  |  \-> movea.l 20(sp),a0
    9c02:	|  |  |  |  |      movea.l 4(a0),a1
    9c06:	|  |  |  |  |      movea.l 24(sp),a0
    9c0a:	|  |  |  |  |      move.l 84(a0),d0
    9c0e:	|  |  |  |  |      move.l d0,d1
    9c10:	|  |  |  |  |      move.l d1,d0
    9c12:	|  |  |  |  |      add.l d0,d0
    9c14:	|  |  |  |  |      add.l d1,d0
    9c16:	|  |  |  |  |      add.l d0,d0
    9c18:	|  |  |  |  |      add.l d0,d0
    9c1a:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9c1e:	|  |  |  |  |      move.l 8(a0),d0
    9c22:	|  |  |  |  +----- beq.w 9d3c <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9c26:	|  |  |  |  |      movea.l 1a772 <noStack>,a1
    9c2c:	|  |  |  |  |      movea.l 20(sp),a0
    9c30:	|  |  |  |  |      move.l 4(a0),d2
    9c34:	|  |  |  |  |      movea.l 24(sp),a0
    9c38:	|  |  |  |  |      move.l 84(a0),d0
    9c3c:	|  |  |  |  |      move.l d0,d1
    9c3e:	|  |  |  |  |      move.l d1,d0
    9c40:	|  |  |  |  |      add.l d0,d0
    9c42:	|  |  |  |  |      add.l d1,d0
    9c44:	|  |  |  |  |      add.l d0,d0
    9c46:	|  |  |  |  |      add.l d0,d0
    9c48:	|  |  |  |  |      movea.l d2,a0
    9c4a:	|  |  |  |  |      adda.l d0,a0
    9c4c:	|  |  |  |  |      move.l 8(a0),d0
    9c50:	|  |  |  |  |      neg.l d0
    9c52:	|  |  |  |  |      pea 1 <_start+0x1>
    9c56:	|  |  |  |  |      move.l a1,-(sp)
    9c58:	|  |  |  |  |      clr.l -(sp)
    9c5a:	|  |  |  |  |      clr.l -(sp)
    9c5c:	|  |  |  |  |      move.l d0,-(sp)
    9c5e:	|  |  |  |  |      jsr 6362 <startNewFunctionNum>
    9c64:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9c68:	|  |  |  |  |      movea.l 24(sp),a0
    9c6c:	|  |  |  |  |      move.l 84(a0),d0
    9c70:	|  |  |  |  |      addq.l #1,d0
    9c72:	|  |  |  |  |      movea.l 24(sp),a0
    9c76:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9c7a:	|  |  |  |  |      movea.l 24(sp),a0
    9c7e:	|  |  |  |  |      move.l 84(a0),d0
    9c82:	|  |  |  |  |      movea.l 24(sp),a0
    9c86:	|  |  |  |  |      movea.l 72(a0),a0
    9c8a:	|  |  |  |  |      move.l 8(a0),d1
    9c8e:	|  |  |  |  |      move.l d1,-(sp)
    9c90:	|  |  |  |  |      move.l d0,-(sp)
    9c92:	|  |  |  |  |      jsr 17616 <__modsi3>
    9c98:	|  |  |  |  |      addq.l #8,sp
    9c9a:	|  |  |  |  |      movea.l 24(sp),a0
    9c9e:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9ca2:	|  |  |  |  |      movea.l 24(sp),a0
    9ca6:	|  |  |  |  |      movea.l 72(a0),a0
    9caa:	|  |  |  |  |      movea.l 4(a0),a1
    9cae:	|  |  |  |  |      movea.l 24(sp),a0
    9cb2:	|  |  |  |  |      move.l 84(a0),d0
    9cb6:	|  |  |  |  |      move.l d0,d1
    9cb8:	|  |  |  |  |      move.l d1,d0
    9cba:	|  |  |  |  |      add.l d0,d0
    9cbc:	|  |  |  |  |      add.l d1,d0
    9cbe:	|  |  |  |  |      add.l d0,d0
    9cc0:	|  |  |  |  |      add.l d0,d0
    9cc2:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9cc6:	|  |  |  |  |      move.l 4(a0),d0
    9cca:	|  |  |  |  |      movea.l 24(sp),a0
    9cce:	|  |  |  |  |      move.l d0,88(a0)
    9cd2:	|  |  |  |  +----- bra.s 9d3c <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    9cd4:	|  |  |  \--|----> movea.l 24(sp),a0
    9cd8:	|  |  |     |      move.l (a0),d0
    9cda:	|  |  |     |      movea.l 24(sp),a0
    9cde:	|  |  |     |      move.l 8(a0),d1
    9ce2:	|  |  |     |      move.l d1,-(sp)
    9ce4:	|  |  |     |      move.l d0,-(sp)
    9ce6:	|  |  |     |      jsr 16eca <__eqsf2>
    9cec:	|  |  |     |      addq.l #8,sp
    9cee:	|  |  |     |      tst.l d0
    9cf0:	|  |  |     |  /-- bne.s 9d34 <drawPeople+0x272>
    9cf2:	|  |  |     |  |   movea.l 24(sp),a0
    9cf6:	|  |  |     |  |   move.l 4(a0),d0
    9cfa:	|  |  |     |  |   movea.l 24(sp),a0
    9cfe:	|  |  |     |  |   move.l 12(a0),d1
    9d02:	|  |  |     |  |   move.l d1,-(sp)
    9d04:	|  |  |     |  |   move.l d0,-(sp)
    9d06:	|  |  |     |  |   jsr 16eca <__eqsf2>
    9d0c:	|  |  |     |  |   addq.l #8,sp
    9d0e:	|  |  |     |  |   tst.l d0
    9d10:	|  |  |     |  +-- bne.s 9d34 <drawPeople+0x272>
    9d12:	|  |  |     |  |   movea.l 20(sp),a0
    9d16:	|  |  |     |  |   move.l 8(a0),d0
    9d1a:	|  |  |     |  |   moveq #1,d1
    9d1c:	|  |  |     |  |   cmp.l d0,d1
    9d1e:	|  |  |     |  +-- bne.s 9d34 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    9d20:	|  |  |     |  |   movea.l 24(sp),a0
    9d24:	|  |  |     |  |   move.l 16(a0),d0
    9d28:	|  |  |     |  |   addq.l #1,d0
    9d2a:	|  |  |     |  |   movea.l 24(sp),a0
    9d2e:	|  |  |     |  |   move.l d0,16(a0)
    9d32:	|  |  |     +--|-- bra.s 9d3c <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    9d34:	|  |  |     |  \-> movea.l 24(sp),a0
    9d38:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    9d3c:	|  |  |     \----> movea.l 24(sp),a0
    9d40:	|  |  |            move.l (a0),d0
    9d42:	|  |  |            movea.l 24(sp),a0
    9d46:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    9d4a:	|  |  |            movea.l 24(sp),a0
    9d4e:	|  |  |            move.l 4(a0),d0
    9d52:	|  |  |            movea.l 24(sp),a0
    9d56:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    9d5a:	|  |  |            movea.l 20(sp),a0
    9d5e:	|  |  |            movea.l 4(a0),a1
    9d62:	|  |  |            movea.l 24(sp),a0
    9d66:	|  |  |            move.l 84(a0),d0
    9d6a:	|  |  |            move.l d0,d1
    9d6c:	|  |  |            move.l d1,d0
    9d6e:	|  |  |            add.l d0,d0
    9d70:	|  |  |            add.l d1,d0
    9d72:	|  |  |            add.l d0,d0
    9d74:	|  |  |            add.l d0,d0
    9d76:	|  |  |            lea (0,a1,d0.l),a0
    9d7a:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    9d7e:	|  |  |            move.l 8(sp),d0
    9d82:	|  |  |            add.l d0,d0
    9d84:	|  |  |            subx.l d0,d0
    9d86:	|  |  |            neg.l d0
    9d88:	|  |  |            move.b d0,d0
    9d8a:	|  |  |            move.b d0,d0
    9d8c:	|  |  |            andi.l #255,d0
    9d92:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    9d96:	|  |  |            move.l 8(sp),-(sp)
    9d9a:	|  |  |            jsr 8c96 <TF_abs>
    9da0:	|  |  |            addq.l #4,sp
    9da2:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    9da6:	|  |  |            movea.l 20(sp),a0
    9daa:	|  |  |            movea.l (a0),a0
    9dac:	|  |  |            move.l 8(a0),d0
    9db0:	|  |  |            cmp.l 12(sp),d0
    9db4:	|  |  |        /-- bgt.s 9dc4 <drawPeople+0x302>
				fNum = 0;
    9db6:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    9dba:	|  |  |        |   moveq #2,d0
    9dbc:	|  |  |        |   sub.l 16(sp),d0
    9dc0:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    9dc4:	|  |  |        \-> moveq #2,d1
    9dc6:	|  |  |            cmp.l 16(sp),d1
    9dca:	|  |  +----------- beq.s 9e46 <drawPeople+0x384>
				BOOL r = FALSE;
    9dcc:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    9dd0:	|  |  |            move.l 16(sp),d0
    9dd4:	|  |  |            movea.w d0,a0
    9dd6:	|  |  |            movea.l 20(sp),a1
    9dda:	|  |  |            movea.l (a1),a1
    9ddc:	|  |  |            movea.l 16(a1),a1
    9de0:	|  |  |            move.l 12(sp),d1
    9de4:	|  |  |            move.l d1,d0
    9de6:	|  |  |            lsl.l #3,d0
    9de8:	|  |  |            sub.l d1,d0
    9dea:	|  |  |            add.l d0,d0
    9dec:	|  |  |            add.l d0,d0
    9dee:	|  |  |            add.l a1,d0
    9df0:	|  |  |            move.l a0,-(sp)
    9df2:	|  |  |            move.l 28(sp),-(sp)
    9df6:	|  |  |            move.l d0,-(sp)
    9df8:	|  |  |            jsr 8a2c <scaleSprite>
    9dfe:	|  |  |            lea 12(sp),sp
    9e02:	|  |  |            move.w d0,6(sp)
				if (r) {
    9e06:	|  |  +----------- beq.s 9e46 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    9e08:	|  |  |            movea.l 24(sp),a0
    9e0c:	|  |  |            movea.l 114(a0),a0
    9e10:	|  |  |            movea.l (a0),a0
    9e12:	|  |  |            move.b (a0),d0
    9e14:	|  |  +----------- beq.s 9e46 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    9e16:	|  |  |            move.l 1a87a <personRegion+0x1c>,d1
    9e1c:	|  |  |            movea.l 24(sp),a0
    9e20:	|  |  |            move.l 114(a0),d0
    9e24:	|  |  |            cmp.l d1,d0
    9e26:	|  |  |        /-- beq.s 9e2e <drawPeople+0x36c>
    9e28:	|  |  |        |   clr.l 1a76a <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    9e2e:	|  |  |        \-> movea.l 24(sp),a0
    9e32:	|  |  |            move.l 114(a0),d0
    9e36:	|  |  |            move.l d0,1a87a <personRegion+0x1c>
						overRegion = & personRegion;
    9e3c:	|  |  |            move.l #108638,1a90e <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    9e46:	|  |  \----------> movea.l 24(sp),a0
    9e4a:	|  |               move.l 88(a0),d0
    9e4e:	|  |               subq.l #1,d0
    9e50:	|  |               movea.l 24(sp),a0
    9e54:	|  |               move.l d0,88(a0)
    9e58:	|  |               movea.l 24(sp),a0
    9e5c:	|  |               move.l 88(a0),d0
    9e60:	|  |        /----- bne.w a088 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    9e64:	|  |        |      movea.l 24(sp),a0
    9e68:	|  |        |      move.l 84(a0),d0
    9e6c:	|  |        |      addq.l #1,d0
    9e6e:	|  |        |      movea.l 24(sp),a0
    9e72:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9e76:	|  |        |      movea.l 24(sp),a0
    9e7a:	|  |        |      move.l 84(a0),d0
    9e7e:	|  |        |      movea.l 24(sp),a0
    9e82:	|  |        |      movea.l 72(a0),a0
    9e86:	|  |        |      move.l 8(a0),d1
    9e8a:	|  |        |      move.l d1,-(sp)
    9e8c:	|  |        |      move.l d0,-(sp)
    9e8e:	|  |        |      jsr 17616 <__modsi3>
    9e94:	|  |        |      addq.l #8,sp
    9e96:	|  |        |      movea.l 24(sp),a0
    9e9a:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9e9e:	|  |        |      movea.l 24(sp),a0
    9ea2:	|  |        |      movea.l 72(a0),a0
    9ea6:	|  |        |      movea.l 4(a0),a1
    9eaa:	|  |        |      movea.l 24(sp),a0
    9eae:	|  |        |      move.l 84(a0),d0
    9eb2:	|  |        |      move.l d0,d1
    9eb4:	|  |        |      move.l d1,d0
    9eb6:	|  |        |      add.l d0,d0
    9eb8:	|  |        |      add.l d1,d0
    9eba:	|  |        |      add.l d0,d0
    9ebc:	|  |        |      add.l d0,d0
    9ebe:	|  |        |      lea (0,a1,d0.l),a0
    9ec2:	|  |        |      move.l 4(a0),d0
    9ec6:	|  |        |      movea.l 24(sp),a0
    9eca:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    9ece:	|  |        |      movea.l 24(sp),a0
    9ed2:	|  |        |      move.w 104(a0),d0
    9ed6:	|  |        +----- beq.w a088 <drawPeople+0x5c6>
    9eda:	|  |        |      tst.l 20(sp)
    9ede:	|  |        +----- beq.w a088 <drawPeople+0x5c6>
    9ee2:	|  |        |      movea.l 20(sp),a0
    9ee6:	|  |        |      move.l 4(a0),d0
    9eea:	|  |        +----- beq.w a088 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9eee:	|  |        |      movea.l 20(sp),a0
    9ef2:	|  |        |      movea.l 4(a0),a1
    9ef6:	|  |        |      movea.l 24(sp),a0
    9efa:	|  |        |      move.l 84(a0),d0
    9efe:	|  |        |      move.l d0,d1
    9f00:	|  |        |      move.l d1,d0
    9f02:	|  |        |      add.l d0,d0
    9f04:	|  |        |      add.l d1,d0
    9f06:	|  |        |      add.l d0,d0
    9f08:	|  |        |      add.l d0,d0
    9f0a:	|  |        |      lea (0,a1,d0.l),a0
    9f0e:	|  |        |      move.l 8(a0),d0
    9f12:	|  |        |  /-- ble.w 9fb4 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9f16:	|  |        |  |   movea.l 20(sp),a0
    9f1a:	|  |        |  |   movea.l 4(a0),a1
    9f1e:	|  |        |  |   movea.l 24(sp),a0
    9f22:	|  |        |  |   move.l 84(a0),d0
    9f26:	|  |        |  |   move.l d0,d1
    9f28:	|  |        |  |   move.l d1,d0
    9f2a:	|  |        |  |   add.l d0,d0
    9f2c:	|  |        |  |   add.l d1,d0
    9f2e:	|  |        |  |   add.l d0,d0
    9f30:	|  |        |  |   add.l d0,d0
    9f32:	|  |        |  |   lea (0,a1,d0.l),a0
    9f36:	|  |        |  |   move.l 8(a0),d0
    9f3a:	|  |        |  |   clr.l -(sp)
    9f3c:	|  |        |  |   move.l d0,-(sp)
    9f3e:	|  |        |  |   jsr cc4a <startSound>
    9f44:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9f46:	|  |        |  |   movea.l 24(sp),a0
    9f4a:	|  |        |  |   move.l 84(a0),d0
    9f4e:	|  |        |  |   addq.l #1,d0
    9f50:	|  |        |  |   movea.l 24(sp),a0
    9f54:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9f58:	|  |        |  |   movea.l 24(sp),a0
    9f5c:	|  |        |  |   move.l 84(a0),d0
    9f60:	|  |        |  |   movea.l 24(sp),a0
    9f64:	|  |        |  |   movea.l 72(a0),a0
    9f68:	|  |        |  |   move.l 8(a0),d1
    9f6c:	|  |        |  |   move.l d1,-(sp)
    9f6e:	|  |        |  |   move.l d0,-(sp)
    9f70:	|  |        |  |   jsr 17616 <__modsi3>
    9f76:	|  |        |  |   addq.l #8,sp
    9f78:	|  |        |  |   movea.l 24(sp),a0
    9f7c:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9f80:	|  |        |  |   movea.l 24(sp),a0
    9f84:	|  |        |  |   movea.l 72(a0),a0
    9f88:	|  |        |  |   movea.l 4(a0),a1
    9f8c:	|  |        |  |   movea.l 24(sp),a0
    9f90:	|  |        |  |   move.l 84(a0),d0
    9f94:	|  |        |  |   move.l d0,d1
    9f96:	|  |        |  |   move.l d1,d0
    9f98:	|  |        |  |   add.l d0,d0
    9f9a:	|  |        |  |   add.l d1,d0
    9f9c:	|  |        |  |   add.l d0,d0
    9f9e:	|  |        |  |   add.l d0,d0
    9fa0:	|  |        |  |   lea (0,a1,d0.l),a0
    9fa4:	|  |        |  |   move.l 4(a0),d0
    9fa8:	|  |        |  |   movea.l 24(sp),a0
    9fac:	|  |        |  |   move.l d0,88(a0)
    9fb0:	|  |        +--|-- bra.w a088 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9fb4:	|  |        |  \-> movea.l 20(sp),a0
    9fb8:	|  |        |      movea.l 4(a0),a1
    9fbc:	|  |        |      movea.l 24(sp),a0
    9fc0:	|  |        |      move.l 84(a0),d0
    9fc4:	|  |        |      move.l d0,d1
    9fc6:	|  |        |      move.l d1,d0
    9fc8:	|  |        |      add.l d0,d0
    9fca:	|  |        |      add.l d1,d0
    9fcc:	|  |        |      add.l d0,d0
    9fce:	|  |        |      add.l d0,d0
    9fd0:	|  |        |      lea (0,a1,d0.l),a0
    9fd4:	|  |        |      move.l 8(a0),d0
    9fd8:	|  |        +----- beq.w a088 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9fdc:	|  |        |      movea.l 1a772 <noStack>,a1
    9fe2:	|  |        |      movea.l 20(sp),a0
    9fe6:	|  |        |      move.l 4(a0),d2
    9fea:	|  |        |      movea.l 24(sp),a0
    9fee:	|  |        |      move.l 84(a0),d0
    9ff2:	|  |        |      move.l d0,d1
    9ff4:	|  |        |      move.l d1,d0
    9ff6:	|  |        |      add.l d0,d0
    9ff8:	|  |        |      add.l d1,d0
    9ffa:	|  |        |      add.l d0,d0
    9ffc:	|  |        |      add.l d0,d0
    9ffe:	|  |        |      movea.l d2,a0
    a000:	|  |        |      adda.l d0,a0
    a002:	|  |        |      move.l 8(a0),d0
    a006:	|  |        |      neg.l d0
    a008:	|  |        |      pea 1 <_start+0x1>
    a00c:	|  |        |      move.l a1,-(sp)
    a00e:	|  |        |      clr.l -(sp)
    a010:	|  |        |      clr.l -(sp)
    a012:	|  |        |      move.l d0,-(sp)
    a014:	|  |        |      jsr 6362 <startNewFunctionNum>
    a01a:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a01e:	|  |        |      movea.l 24(sp),a0
    a022:	|  |        |      move.l 84(a0),d0
    a026:	|  |        |      addq.l #1,d0
    a028:	|  |        |      movea.l 24(sp),a0
    a02c:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a030:	|  |        |      movea.l 24(sp),a0
    a034:	|  |        |      move.l 84(a0),d0
    a038:	|  |        |      movea.l 24(sp),a0
    a03c:	|  |        |      movea.l 72(a0),a0
    a040:	|  |        |      move.l 8(a0),d1
    a044:	|  |        |      move.l d1,-(sp)
    a046:	|  |        |      move.l d0,-(sp)
    a048:	|  |        |      jsr 17616 <__modsi3>
    a04e:	|  |        |      addq.l #8,sp
    a050:	|  |        |      movea.l 24(sp),a0
    a054:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a058:	|  |        |      movea.l 24(sp),a0
    a05c:	|  |        |      movea.l 72(a0),a0
    a060:	|  |        |      movea.l 4(a0),a1
    a064:	|  |        |      movea.l 24(sp),a0
    a068:	|  |        |      move.l 84(a0),d0
    a06c:	|  |        |      move.l d0,d1
    a06e:	|  |        |      move.l d1,d0
    a070:	|  |        |      add.l d0,d0
    a072:	|  |        |      add.l d1,d0
    a074:	|  |        |      add.l d0,d0
    a076:	|  |        |      add.l d0,d0
    a078:	|  |        |      lea (0,a1,d0.l),a0
    a07c:	|  |        |      move.l 4(a0),d0
    a080:	|  |        |      movea.l 24(sp),a0
    a084:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a088:	|  |        \----> movea.l 24(sp),a0
    a08c:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a092:	|  \-------------> tst.l 24(sp)
    a096:	\----------------- bne.w 9ae4 <drawPeople+0x22>
	}
}
    a09a:	                   nop
    a09c:	                   nop
    a09e:	                   move.l (sp)+,d2
    a0a0:	                   lea 24(sp),sp
    a0a4:	                   rts

0000a0a6 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a0a6:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a0a8:	          move.l 1a85a <allPeople>,(sp)
	while (thisPerson) {
    a0ae:	      /-- bra.s a0c6 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a0b0:	/-----|-> movea.l (sp),a0
    a0b2:	|     |   movea.l 114(a0),a0
    a0b6:	|     |   move.l 4(a0),d0
    a0ba:	|     |   cmp.l 8(sp),d0
    a0be:	|  /--|-- beq.s a0cc <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a0c0:	|  |  |   movea.l (sp),a0
    a0c2:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a0c6:	|  |  \-> tst.l (sp)
    a0c8:	\--|----- bne.s a0b0 <findPerson+0xa>
    a0ca:	   |  /-- bra.s a0ce <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a0cc:	   \--|-> nop
	}
	return thisPerson;
    a0ce:	      \-> move.l (sp),d0
}
    a0d0:	          addq.l #4,sp
    a0d2:	          rts

0000a0d4 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a0d4:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a0d6:	       move.l 12(sp),-(sp)
    a0da:	       jsr a0a6 <findPerson>
    a0e0:	       addq.l #4,sp
    a0e2:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a0e4:	   /-- bne.s a0ea <floatCharacter+0x16>
    a0e6:	   |   clr.w d0
    a0e8:	/--|-- bra.s a0f4 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a0ea:	|  \-> movea.l (sp),a0
    a0ec:	|      move.l 8(sp),24(a0)
	return TRUE;
    a0f2:	|      moveq #1,d0
}
    a0f4:	\----> addq.l #4,sp
    a0f6:	       rts

0000a0f8 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a0f8:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a0fa:	          tst.l 8(sp)
    a0fe:	      /-- bne.s a10c <forceWalkingPerson+0x14>
    a100:	      |   tst.l 12(sp)
    a104:	      +-- bne.s a10c <forceWalkingPerson+0x14>
    a106:	      |   clr.w d0
    a108:	/-----|-- bra.w a19e <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a10c:	|     \-> move.l 16(sp),-(sp)
    a110:	|         jsr a0a6 <findPerson>
    a116:	|         addq.l #4,sp
    a118:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a11a:	|     /-- bne.s a120 <forceWalkingPerson+0x28>
    a11c:	|     |   clr.w d0
    a11e:	+-----|-- bra.s a19e <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a120:	|     \-> movea.l (sp),a0
    a122:	|         move.l 68(a0),d0
    a126:	|     /-- beq.s a138 <forceWalkingPerson+0x40>
    a128:	|     |   movea.l (sp),a0
    a12a:	|     |   move.l 68(a0),d0
    a12e:	|     |   move.l d0,-(sp)
    a130:	|     |   jsr 3fa6 <abortFunction>
    a136:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a138:	|     \-> movea.l (sp),a0
    a13a:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a140:	|         movea.l (sp),a0
    a142:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a146:	|         movea.l (sp),a0
    a148:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a14e:	|         movea.l (sp),a0
    a150:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a156:	|         movea.l (sp),a0
    a158:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a15e:	|         movea.l (sp),a0
    a160:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a164:	|         movea.l (sp),a0
    a166:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a16a:	|         move.l (sp),-(sp)
    a16c:	|         jsr 9408 <doBorderStuff>
    a172:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a174:	|         pea 1 <_start+0x1>
    a178:	|         move.l 4(sp),-(sp)
    a17c:	|         jsr b968 <walkMe>
    a182:	|         addq.l #8,sp
    a184:	|         tst.w d0
    a186:	|     /-- bne.s a190 <forceWalkingPerson+0x98>
    a188:	|     |   movea.l (sp),a0
    a18a:	|     |   move.w 66(a0),d0
    a18e:	|  /--|-- beq.s a19c <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a190:	|  |  \-> movea.l (sp),a0
    a192:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a198:	|  |      moveq #1,d0
    a19a:	+--|----- bra.s a19e <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a19c:	|  \----> clr.w d0
    }
}
    a19e:	\-------> addq.l #4,sp
    a1a0:	          rts

0000a1a2 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a1a2:	                lea -56(sp),sp
    a1a6:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a1a8:	                move.l #320,56(sp)
    a1b0:	                move.l #200,52(sp)
    a1b8:	                moveq #-1,d0
    a1ba:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a1be:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a1c6:	                clr.l 44(sp)
    a1ca:	   /----------- bra.w a3a2 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a1ce:	/--|----------> movea.l 1a916 <currentFloor>,a0
    a1d4:	|  |            move.l 12(a0),d1
    a1d8:	|  |            move.l 44(sp),d0
    a1dc:	|  |            lsl.l #3,d0
    a1de:	|  |            movea.l d1,a0
    a1e0:	|  |            adda.l d0,a0
    a1e2:	|  |            move.l (a0),d0
    a1e4:	|  |            move.l d0,d1
    a1e6:	|  |            subq.l #1,d1
    a1e8:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a1ec:	|  |            clr.l 40(sp)
    a1f0:	|  |     /----- bra.w a380 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a1f4:	|  |  /--|----> movea.l 1a916 <currentFloor>,a0
    a1fa:	|  |  |  |      move.l 4(a0),d1
    a1fe:	|  |  |  |      movea.l 1a916 <currentFloor>,a0
    a204:	|  |  |  |      movea.l 12(a0),a0
    a208:	|  |  |  |      move.l 44(sp),d0
    a20c:	|  |  |  |      lsl.l #3,d0
    a20e:	|  |  |  |      adda.l d0,a0
    a210:	|  |  |  |      movea.l 4(a0),a0
    a214:	|  |  |  |      move.l 40(sp),d0
    a218:	|  |  |  |      add.l d0,d0
    a21a:	|  |  |  |      add.l d0,d0
    a21c:	|  |  |  |      adda.l d0,a0
    a21e:	|  |  |  |      move.l (a0),d0
    a220:	|  |  |  |      lsl.l #3,d0
    a222:	|  |  |  |      movea.l d1,a0
    a224:	|  |  |  |      adda.l d0,a0
    a226:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a22a:	|  |  |  |      movea.l 1a916 <currentFloor>,a0
    a230:	|  |  |  |      move.l 4(a0),d1
    a234:	|  |  |  |      movea.l 1a916 <currentFloor>,a0
    a23a:	|  |  |  |      movea.l 12(a0),a0
    a23e:	|  |  |  |      move.l 44(sp),d0
    a242:	|  |  |  |      lsl.l #3,d0
    a244:	|  |  |  |      adda.l d0,a0
    a246:	|  |  |  |      movea.l 4(a0),a0
    a24a:	|  |  |  |      move.l 40(sp),d0
    a24e:	|  |  |  |      add.l d0,d0
    a250:	|  |  |  |      add.l d0,d0
    a252:	|  |  |  |      adda.l d0,a0
    a254:	|  |  |  |      move.l (a0),d0
    a256:	|  |  |  |      lsl.l #3,d0
    a258:	|  |  |  |      movea.l d1,a0
    a25a:	|  |  |  |      adda.l d0,a0
    a25c:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a262:	|  |  |  |      movea.l 1a916 <currentFloor>,a0
    a268:	|  |  |  |      move.l 4(a0),d1
    a26c:	|  |  |  |      movea.l 1a916 <currentFloor>,a0
    a272:	|  |  |  |      movea.l 12(a0),a0
    a276:	|  |  |  |      move.l 44(sp),d0
    a27a:	|  |  |  |      lsl.l #3,d0
    a27c:	|  |  |  |      adda.l d0,a0
    a27e:	|  |  |  |      movea.l 4(a0),a0
    a282:	|  |  |  |      move.l 36(sp),d0
    a286:	|  |  |  |      add.l d0,d0
    a288:	|  |  |  |      add.l d0,d0
    a28a:	|  |  |  |      adda.l d0,a0
    a28c:	|  |  |  |      move.l (a0),d0
    a28e:	|  |  |  |      lsl.l #3,d0
    a290:	|  |  |  |      movea.l d1,a0
    a292:	|  |  |  |      adda.l d0,a0
    a294:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a298:	|  |  |  |      movea.l 1a916 <currentFloor>,a0
    a29e:	|  |  |  |      move.l 4(a0),d1
    a2a2:	|  |  |  |      movea.l 1a916 <currentFloor>,a0
    a2a8:	|  |  |  |      movea.l 12(a0),a0
    a2ac:	|  |  |  |      move.l 44(sp),d0
    a2b0:	|  |  |  |      lsl.l #3,d0
    a2b2:	|  |  |  |      adda.l d0,a0
    a2b4:	|  |  |  |      movea.l 4(a0),a0
    a2b8:	|  |  |  |      move.l 36(sp),d0
    a2bc:	|  |  |  |      add.l d0,d0
    a2be:	|  |  |  |      add.l d0,d0
    a2c0:	|  |  |  |      adda.l d0,a0
    a2c2:	|  |  |  |      move.l (a0),d0
    a2c4:	|  |  |  |      lsl.l #3,d0
    a2c6:	|  |  |  |      movea.l d1,a0
    a2c8:	|  |  |  |      adda.l d0,a0
    a2ca:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a2d0:	|  |  |  |      movea.l 68(sp),a0
    a2d4:	|  |  |  |      move.l (a0),d1
    a2d6:	|  |  |  |      movea.l 64(sp),a0
    a2da:	|  |  |  |      move.l (a0),d0
    a2dc:	|  |  |  |      move.l d1,-(sp)
    a2de:	|  |  |  |      move.l d0,-(sp)
    a2e0:	|  |  |  |      move.l 24(sp),-(sp)
    a2e4:	|  |  |  |      move.l 32(sp),-(sp)
    a2e8:	|  |  |  |      move.l 40(sp),-(sp)
    a2ec:	|  |  |  |      move.l 48(sp),-(sp)
    a2f0:	|  |  |  |      lea 28(sp),a0
    a2f4:	|  |  |  |      move.l a0,-(sp)
    a2f6:	|  |  |  |      lea 36(sp),a0
    a2fa:	|  |  |  |      move.l a0,-(sp)
    a2fc:	|  |  |  |      jsr 15a0c <closestPointOnLine>
    a302:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a306:	|  |  |  |      movea.l 64(sp),a0
    a30a:	|  |  |  |      move.l (a0),d0
    a30c:	|  |  |  |      move.l 8(sp),d1
    a310:	|  |  |  |      move.l d0,d2
    a312:	|  |  |  |      sub.l d1,d2
    a314:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a318:	|  |  |  |      movea.l 68(sp),a0
    a31c:	|  |  |  |      move.l (a0),d0
    a31e:	|  |  |  |      move.l 4(sp),d1
    a322:	|  |  |  |      move.l d0,d2
    a324:	|  |  |  |      sub.l d1,d2
    a326:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a32a:	|  |  |  |      move.l 28(sp),-(sp)
    a32e:	|  |  |  |      move.l 32(sp),-(sp)
    a332:	|  |  |  |      jsr 1756a <__mulsi3>
    a338:	|  |  |  |      addq.l #8,sp
    a33a:	|  |  |  |      move.l d0,d2
    a33c:	|  |  |  |      move.l 24(sp),-(sp)
    a340:	|  |  |  |      move.l 28(sp),-(sp)
    a344:	|  |  |  |      jsr 1756a <__mulsi3>
    a34a:	|  |  |  |      addq.l #8,sp
    a34c:	|  |  |  |      move.l d2,d1
    a34e:	|  |  |  |      add.l d0,d1
    a350:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a354:	|  |  |  |      move.l 12(sp),d2
    a358:	|  |  |  |      cmp.l 32(sp),d2
    a35c:	|  |  |  |  /-- bge.s a376 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a35e:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a364:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a36a:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a370:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a376:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a37c:	|  |  |  |      addq.l #1,40(sp)
    a380:	|  |  |  \----> movea.l 1a916 <currentFloor>,a0
    a386:	|  |  |         move.l 12(a0),d1
    a38a:	|  |  |         move.l 44(sp),d0
    a38e:	|  |  |         lsl.l #3,d0
    a390:	|  |  |         movea.l d1,a0
    a392:	|  |  |         adda.l d0,a0
    a394:	|  |  |         move.l (a0),d0
    a396:	|  |  |         cmp.l 40(sp),d0
    a39a:	|  |  \-------- bgt.w a1f4 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a39e:	|  |            addq.l #1,44(sp)
    a3a2:	|  \----------> movea.l 1a916 <currentFloor>,a0
    a3a8:	|               move.l 8(a0),d0
    a3ac:	|               cmp.l 44(sp),d0
    a3b0:	\-------------- bgt.w a1ce <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a3b4:	                moveq #-1,d0
    a3b6:	                cmp.l 48(sp),d0
    a3ba:	            /-- bne.s a3c0 <handleClosestPoint+0x21e>
    a3bc:	            |   clr.w d0
    a3be:	         /--|-- bra.s a3da <handleClosestPoint+0x238>
	*setX = gotX;
    a3c0:	         |  \-> movea.l 64(sp),a0
    a3c4:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a3c8:	         |      movea.l 68(sp),a0
    a3cc:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a3d0:	         |      movea.l 72(sp),a0
    a3d4:	         |      move.l 48(sp),(a0)

	return TRUE;
    a3d8:	         |      moveq #1,d0
}
    a3da:	         \----> move.l (sp)+,d2
    a3dc:	                lea 56(sp),sp
    a3e0:	                rts

0000a3e2 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a3e2:	clr.l 1a86e <personRegion+0x10>
	personRegion.sY = 0;
    a3e8:	clr.l 1a872 <personRegion+0x14>
	personRegion.di = -1;
    a3ee:	moveq #-1,d0
    a3f0:	move.l d0,1a876 <personRegion+0x18>
	allScreenRegions = NULL;
    a3f6:	clr.l 1a90a <allScreenRegions>

	return TRUE;
    a3fc:	moveq #1,d0
}
    a3fe:	rts

0000a400 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a400:	          subq.l #4,sp
    a402:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a404:	          tst.l 12(sp)
    a408:	      /-- bne.s a410 <jumpPerson+0x10>
    a40a:	      |   tst.l 16(sp)
    a40e:	/-----|-- beq.s a484 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a410:	|     \-> move.l 20(sp),-(sp)
    a414:	|         jsr a0a6 <findPerson>
    a41a:	|         addq.l #4,sp
    a41c:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a420:	|  /----- beq.s a488 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a422:	|  |      movea.l 4(sp),a0
    a426:	|  |      move.l 68(a0),d0
    a42a:	|  |  /-- beq.s a43e <jumpPerson+0x3e>
    a42c:	|  |  |   movea.l 4(sp),a0
    a430:	|  |  |   move.l 68(a0),d0
    a434:	|  |  |   move.l d0,-(sp)
    a436:	|  |  |   jsr 3fa6 <abortFunction>
    a43c:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a43e:	|  |  \-> movea.l 4(sp),a0
    a442:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a446:	|  |      movea.l 4(sp),a0
    a44a:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a44e:	|  |      movea.l 4(sp),a0
    a452:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a456:	|  |      move.l 16(sp),-(sp)
    a45a:	|  |      jsr 16fe8 <__floatsisf>
    a460:	|  |      addq.l #4,sp
    a462:	|  |      move.l d0,d2
    a464:	|  |      move.l 12(sp),-(sp)
    a468:	|  |      jsr 16fe8 <__floatsisf>
    a46e:	|  |      addq.l #4,sp
    a470:	|  |      move.l d2,-(sp)
    a472:	|  |      move.l d0,-(sp)
    a474:	|  |      move.l 12(sp),-(sp)
    a478:	|  |      jsr a7ee <moveAndScale>
    a47e:	|  |      lea 12(sp),sp
    a482:	|  |  /-- bra.s a48a <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a484:	\--|--|-> nop
    a486:	   |  +-- bra.s a48a <jumpPerson+0x8a>
    if (!moveMe) return;
    a488:	   \--|-> nop
}
    a48a:	      \-> move.l (sp)+,d2
    a48c:	          addq.l #4,sp
    a48e:	          rts

0000a490 <killAllPeople>:


void killAllPeople () {
    a490:	          subq.l #8,sp
    a492:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a494:	   /----- bra.s a500 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a496:	/--|----> movea.l 1a85a <allPeople>,a0
    a49c:	|  |      move.l 68(a0),d0
    a4a0:	|  |  /-- beq.s a4b6 <killAllPeople+0x26>
    a4a2:	|  |  |   movea.l 1a85a <allPeople>,a0
    a4a8:	|  |  |   move.l 68(a0),d0
    a4ac:	|  |  |   move.l d0,-(sp)
    a4ae:	|  |  |   jsr 3fa6 <abortFunction>
    a4b4:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a4b6:	|  |  \-> movea.l 1a85a <allPeople>,a0
    a4bc:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a4c0:	|  |      move.l 1a85a <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a4c8:	|  |      movea.l 1a85a <allPeople>,a0
    a4ce:	|  |      move.l 36(a0),d0
    a4d2:	|  |      move.l d0,1a85a <allPeople>
		removeObjectType (killPeople -> thisType);
    a4d8:	|  |      movea.l 8(sp),a0
    a4dc:	|  |      move.l 114(a0),d0
    a4e0:	|  |      move.l d0,-(sp)
    a4e2:	|  |      jsr d328 <removeObjectType>
    a4e8:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a4ea:	|  |      move.l 8(sp),4(sp)
    a4f0:	|  |      move.l 1a7a2 <SysBase>,d0
    a4f6:	|  |      movea.l d0,a6
    a4f8:	|  |      movea.l 4(sp),a1
    a4fc:	|  |      jsr -690(a6)
	while (allPeople) {
    a500:	|  \----> move.l 1a85a <allPeople>,d0
    a506:	\-------- bne.s a496 <killAllPeople+0x6>
	}
}
    a508:	          nop
    a50a:	          nop
    a50c:	          movea.l (sp)+,a6
    a50e:	          addq.l #8,sp
    a510:	          rts

0000a512 <killMostPeople>:

void killMostPeople() {
    a512:	          lea -12(sp),sp
    a516:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    a518:	          move.l #108634,12(sp)

    while (*lookyHere) {
    a520:	   /----- bra.w a5a6 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    a524:	/--|----> movea.l 12(sp),a0
    a528:	|  |      movea.l (a0),a0
    a52a:	|  |      move.l 118(a0),d0
    a52e:	|  |      moveq #32,d1
    a530:	|  |      and.l d1,d0
    a532:	|  |  /-- beq.s a544 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    a534:	|  |  |   movea.l 12(sp),a0
    a538:	|  |  |   move.l (a0),d0
    a53a:	|  |  |   moveq #36,d1
    a53c:	|  |  |   add.l d0,d1
    a53e:	|  |  |   move.l d1,12(sp)
    a542:	|  +--|-- bra.s a5a6 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    a544:	|  |  \-> movea.l 12(sp),a0
    a548:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    a54c:	|  |      movea.l 8(sp),a0
    a550:	|  |      move.l 36(a0),d0
    a554:	|  |      movea.l 12(sp),a0
    a558:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    a55a:	|  |      movea.l 8(sp),a0
    a55e:	|  |      move.l 68(a0),d0
    a562:	|  |  /-- beq.s a576 <killMostPeople+0x64>
    a564:	|  |  |   movea.l 8(sp),a0
    a568:	|  |  |   move.l 68(a0),d0
    a56c:	|  |  |   move.l d0,-(sp)
    a56e:	|  |  |   jsr 3fa6 <abortFunction>
    a574:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    a576:	|  |  \-> movea.l 8(sp),a0
    a57a:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    a57e:	|  |      movea.l 8(sp),a0
    a582:	|  |      move.l 114(a0),d0
    a586:	|  |      move.l d0,-(sp)
    a588:	|  |      jsr d328 <removeObjectType>
    a58e:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    a590:	|  |      move.l 8(sp),4(sp)
    a596:	|  |      move.l 1a7a2 <SysBase>,d0
    a59c:	|  |      movea.l d0,a6
    a59e:	|  |      movea.l 4(sp),a1
    a5a2:	|  |      jsr -690(a6)
    while (*lookyHere) {
    a5a6:	|  \----> movea.l 12(sp),a0
    a5aa:	|         move.l (a0),d0
    a5ac:	\-------- bne.w a524 <killMostPeople+0x12>
        }
    }
}
    a5b0:	          nop
    a5b2:	          nop
    a5b4:	          movea.l (sp)+,a6
    a5b6:	          lea 12(sp),sp
    a5ba:	          rts

0000a5bc <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    a5bc:	clr.l -(sp)
    a5be:	move.l sp,d0
    a5c0:	addq.l #8,d0
    a5c2:	move.l d0,-(sp)
    a5c4:	jsr 79f0 <setFrames>
    a5ca:	addq.l #8,sp
}
    a5cc:	nop
    a5ce:	rts

0000a5d0 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a5d0:	          lea -12(sp),sp
    a5d4:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    a5d6:	          tst.l 20(sp)
    a5da:	      /-- bne.s a5e8 <makeWalkingPerson+0x18>
    a5dc:	      |   tst.l 24(sp)
    a5e0:	      +-- bne.s a5e8 <makeWalkingPerson+0x18>
    a5e2:	      |   clr.w d0
    a5e4:	/-----|-- bra.w a780 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    a5e8:	|     \-> movea.l 1a916 <currentFloor>,a0
    a5ee:	|         move.l 8(a0),d0
    a5f2:	|     /-- bne.s a5fa <makeWalkingPerson+0x2a>
    a5f4:	|     |   clr.w d0
    a5f6:	+-----|-- bra.w a780 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    a5fa:	|     \-> move.l 28(sp),-(sp)
    a5fe:	|         jsr a0a6 <findPerson>
    a604:	|         addq.l #4,sp
    a606:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    a60a:	|     /-- bne.s a612 <makeWalkingPerson+0x42>
    a60c:	|     |   clr.w d0
    a60e:	+-----|-- bra.w a780 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    a612:	|     \-> movea.l 12(sp),a0
    a616:	|         move.l 68(a0),d0
    a61a:	|     /-- beq.s a62e <makeWalkingPerson+0x5e>
    a61c:	|     |   movea.l 12(sp),a0
    a620:	|     |   move.l 68(a0),d0
    a624:	|     |   move.l d0,-(sp)
    a626:	|     |   jsr 3fa6 <abortFunction>
    a62c:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    a62e:	|     \-> movea.l 12(sp),a0
    a632:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    a636:	|         movea.l 12(sp),a0
    a63a:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    a640:	|         movea.l 12(sp),a0
    a644:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    a64a:	|         movea.l 12(sp),a0
    a64e:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    a654:	|         movea.l 12(sp),a0
    a658:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    a65e:	|         move.l 24(sp),-(sp)
    a662:	|         move.l 24(sp),-(sp)
    a666:	|         jsr 15f0e <inFloor>
    a66c:	|         addq.l #8,sp
    a66e:	|         movea.l 12(sp),a0
    a672:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    a676:	|         movea.l 12(sp),a0
    a67a:	|         move.l 60(a0),d0
    a67e:	|         moveq #-1,d1
    a680:	|         cmp.l d0,d1
    a682:	|     /-- bne.s a6b2 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    a684:	|     |   movea.w #60,a0
    a688:	|     |   adda.l 12(sp),a0
    a68c:	|     |   moveq #44,d1
    a68e:	|     |   add.l 12(sp),d1
    a692:	|     |   moveq #40,d0
    a694:	|     |   add.l 12(sp),d0
    a698:	|     |   move.l a0,-(sp)
    a69a:	|     |   move.l d1,-(sp)
    a69c:	|     |   move.l d0,-(sp)
    a69e:	|     |   jsr a1a2 <handleClosestPoint>
    a6a4:	|     |   lea 12(sp),sp
    a6a8:	|     |   tst.w d0
    a6aa:	|     +-- bne.s a6b2 <makeWalkingPerson+0xe2>
    a6ac:	|     |   clr.w d0
    a6ae:	+-----|-- bra.w a780 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    a6b2:	|     \-> movea.l 12(sp),a0
    a6b6:	|         move.l 4(a0),d0
    a6ba:	|         move.l d0,-(sp)
    a6bc:	|         jsr 16f80 <__fixsfsi>
    a6c2:	|         addq.l #4,sp
    a6c4:	|         move.l d0,d2
    a6c6:	|         movea.l 12(sp),a0
    a6ca:	|         move.l (a0),d0
    a6cc:	|         move.l d0,-(sp)
    a6ce:	|         jsr 16f80 <__fixsfsi>
    a6d4:	|         addq.l #4,sp
    a6d6:	|         move.l d2,-(sp)
    a6d8:	|         move.l d0,-(sp)
    a6da:	|         jsr 15f0e <inFloor>
    a6e0:	|         addq.l #8,sp
    a6e2:	|         movea.l 12(sp),a0
    a6e6:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    a6ea:	|         movea.l 12(sp),a0
    a6ee:	|         move.l 56(a0),d0
    a6f2:	|         moveq #-1,d1
    a6f4:	|         cmp.l d0,d1
    a6f6:	|     /-- bne.s a748 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    a6f8:	|     |   movea.l 12(sp),a0
    a6fc:	|     |   move.l (a0),d0
    a6fe:	|     |   move.l d0,-(sp)
    a700:	|     |   jsr 16f80 <__fixsfsi>
    a706:	|     |   addq.l #4,sp
    a708:	|     |   move.l d0,8(sp)
    a70c:	|     |   movea.l 12(sp),a0
    a710:	|     |   move.l 4(a0),d0
    a714:	|     |   move.l d0,-(sp)
    a716:	|     |   jsr 16f80 <__fixsfsi>
    a71c:	|     |   addq.l #4,sp
    a71e:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    a722:	|     |   moveq #56,d0
    a724:	|     |   add.l 12(sp),d0
    a728:	|     |   move.l d0,-(sp)
    a72a:	|     |   lea 8(sp),a0
    a72e:	|     |   move.l a0,-(sp)
    a730:	|     |   moveq #16,d0
    a732:	|     |   add.l sp,d0
    a734:	|     |   move.l d0,-(sp)
    a736:	|     |   jsr a1a2 <handleClosestPoint>
    a73c:	|     |   lea 12(sp),sp
    a740:	|     |   tst.w d0
    a742:	|     +-- bne.s a748 <makeWalkingPerson+0x178>
    a744:	|     |   clr.w d0
    a746:	+-----|-- bra.s a780 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    a748:	|     \-> move.l 12(sp),-(sp)
    a74c:	|         jsr 9408 <doBorderStuff>
    a752:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    a754:	|         clr.l -(sp)
    a756:	|         move.l 16(sp),-(sp)
    a75a:	|         jsr b968 <walkMe>
    a760:	|         addq.l #8,sp
    a762:	|         tst.w d0
    a764:	|     /-- bne.s a770 <makeWalkingPerson+0x1a0>
    a766:	|     |   movea.l 12(sp),a0
    a76a:	|     |   move.w 66(a0),d0
    a76e:	|  /--|-- beq.s a77e <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    a770:	|  |  \-> movea.l 12(sp),a0
    a774:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    a77a:	|  |      moveq #1,d0
    a77c:	+--|----- bra.s a780 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    a77e:	|  \----> clr.w d0
	}
}
    a780:	\-------> move.l (sp)+,d2
    a782:	          lea 12(sp),sp
    a786:	          rts

0000a788 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    a788:	       lea -16(sp),sp
    a78c:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    a78e:	       moveq #12,d0
    a790:	       move.l d0,16(sp)
    a794:	       clr.l 12(sp)
    a798:	       move.l 1a7a2 <SysBase>,d0
    a79e:	       movea.l d0,a6
    a7a0:	       move.l 16(sp),d0
    a7a4:	       move.l 12(sp),d1
    a7a8:	       jsr -684(a6)
    a7ac:	       move.l d0,8(sp)
    a7b0:	       move.l 8(sp),d0
    a7b4:	       move.l d0,4(sp)
    if(newAnim == 0) {
    a7b8:	   /-- bne.s a7cc <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    a7ba:	   |   pea 18b91 <PutChar+0x1511>
    a7c0:	   |   jsr 16bac <KPrintF>
    a7c6:	   |   addq.l #4,sp
        return NULL;    
    a7c8:	   |   moveq #0,d0
    a7ca:	/--|-- bra.s a7e6 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    a7cc:	|  \-> movea.l 4(sp),a0
    a7d0:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    a7d2:	|      movea.l 4(sp),a0
    a7d6:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    a7da:	|      movea.l 4(sp),a0
    a7de:	|      clr.l 4(a0)
	return newAnim;
    a7e2:	|      move.l 4(sp),d0
}
    a7e6:	\----> movea.l (sp)+,a6
    a7e8:	       lea 16(sp),sp
    a7ec:	       rts

0000a7ee <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    a7ee:	    move.l d2,-(sp)
	me->x = x;
    a7f0:	    movea.l 8(sp),a0
    a7f4:	    move.l 12(sp),(a0)
	me->y = y;
    a7f8:	    movea.l 8(sp),a0
    a7fc:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    a802:	    movea.l 8(sp),a0
    a806:	    clr.l 8(a0)
	me->oldy = 0;
    a80a:	    movea.l 8(sp),a0
    a80e:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    a812:	    movea.l 8(sp),a0
    a816:	    move.l 118(a0),d0
    a81a:	    moveq #2,d1
    a81c:	    and.l d1,d0
    a81e:	/-- bne.s a876 <moveAndScale+0x88>
    a820:	|   move.w 1a138 <scaleDivide>,d0
    a826:	+-- beq.s a876 <moveAndScale+0x88>
    a828:	|   movea.l 8(sp),a0
    a82c:	|   move.l 4(a0),d2
    a830:	|   move.w 1a136 <scaleHorizon>,d0
    a836:	|   movea.w d0,a0
    a838:	|   move.l a0,-(sp)
    a83a:	|   jsr 16fe8 <__floatsisf>
    a840:	|   addq.l #4,sp
    a842:	|   move.l d0,-(sp)
    a844:	|   move.l d2,-(sp)
    a846:	|   jsr 172dc <__subsf3>
    a84c:	|   addq.l #8,sp
    a84e:	|   move.l d0,d2
    a850:	|   move.w 1a138 <scaleDivide>,d0
    a856:	|   movea.w d0,a0
    a858:	|   move.l a0,-(sp)
    a85a:	|   jsr 16fe8 <__floatsisf>
    a860:	|   addq.l #4,sp
    a862:	|   move.l d0,-(sp)
    a864:	|   move.l d2,-(sp)
    a866:	|   jsr 16e94 <__divsf3>
    a86c:	|   addq.l #8,sp
    a86e:	|   movea.l 8(sp),a0
    a872:	|   move.l d0,32(a0)
}
    a876:	\-> nop
    a878:	    move.l (sp)+,d2
    a87a:	    rts

0000a87c <removeOneCharacter>:

void removeOneCharacter (int i) {
    a87c:	          lea -16(sp),sp
    a880:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    a882:	          move.l 24(sp),-(sp)
    a886:	          jsr a0a6 <findPerson>
    a88c:	          addq.l #4,sp
    a88e:	          move.l d0,8(sp)

    if (p) {
    a892:	/-------- beq.w a972 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    a896:	|         move.l 1a90e <overRegion>,d0
    a89c:	|         cmpi.l #108638,d0
    a8a2:	|     /-- bne.s a8c0 <removeOneCharacter+0x44>
    a8a4:	|     |   movea.l 1a90e <overRegion>,a0
    a8aa:	|     |   move.l 28(a0),d1
    a8ae:	|     |   movea.l 8(sp),a0
    a8b2:	|     |   move.l 114(a0),d0
    a8b6:	|     |   cmp.l d1,d0
    a8b8:	|     +-- bne.s a8c0 <removeOneCharacter+0x44>
            overRegion = NULL;
    a8ba:	|     |   clr.l 1a90e <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    a8c0:	|     \-> movea.l 8(sp),a0
    a8c4:	|         move.l 68(a0),d0
    a8c8:	|     /-- beq.s a8dc <removeOneCharacter+0x60>
    a8ca:	|     |   movea.l 8(sp),a0
    a8ce:	|     |   move.l 68(a0),d0
    a8d2:	|     |   move.l d0,-(sp)
    a8d4:	|     |   jsr 3fa6 <abortFunction>
    a8da:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    a8dc:	|     \-> movea.l 8(sp),a0
    a8e0:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    a8e4:	|         clr.l 12(sp)
    a8e8:	|     /-- bra.s a910 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    a8ea:	|  /--|-> movea.l 8(sp),a0
    a8ee:	|  |  |   movea.l 80(a0),a0
    a8f2:	|  |  |   move.l (a0),d1
    a8f4:	|  |  |   move.l 12(sp),d0
    a8f8:	|  |  |   add.l d0,d0
    a8fa:	|  |  |   add.l d0,d0
    a8fc:	|  |  |   movea.l d1,a0
    a8fe:	|  |  |   adda.l d0,a0
    a900:	|  |  |   move.l (a0),d0
    a902:	|  |  |   move.l d0,-(sp)
    a904:	|  |  |   jsr 9384 <deleteAnim>
    a90a:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    a90c:	|  |  |   addq.l #1,12(sp)
    a910:	|  |  \-> moveq #2,d0
    a912:	|  |      cmp.l 12(sp),d0
    a916:	|  \----- bge.s a8ea <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    a918:	|         move.l #108634,16(sp)
    a920:	|     /-- bra.s a930 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    a922:	|  /--|-> movea.l 16(sp),a0
    a926:	|  |  |   move.l (a0),d0
    a928:	|  |  |   moveq #36,d1
    a92a:	|  |  |   add.l d0,d1
    a92c:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    a930:	|  |  \-> movea.l 16(sp),a0
    a934:	|  |      move.l (a0),d0
    a936:	|  |      cmp.l 8(sp),d0
    a93a:	|  \----- bne.s a922 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    a93c:	|         movea.l 8(sp),a0
    a940:	|         move.l 36(a0),d0
    a944:	|         movea.l 16(sp),a0
    a948:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    a94a:	|         movea.l 8(sp),a0
    a94e:	|         move.l 114(a0),d0
    a952:	|         move.l d0,-(sp)
    a954:	|         jsr d328 <removeObjectType>
    a95a:	|         addq.l #4,sp
        FreeVec(p);
    a95c:	|         move.l 8(sp),4(sp)
    a962:	|         move.l 1a7a2 <SysBase>,d0
    a968:	|         movea.l d0,a6
    a96a:	|         movea.l 4(sp),a1
    a96e:	|         jsr -690(a6)
    }
}
    a972:	\-------> nop
    a974:	          movea.l (sp)+,a6
    a976:	          lea 16(sp),sp
    a97a:	          rts

0000a97c <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    a97c:	       subq.l #8,sp
    a97e:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    a980:	       movea.l 16(sp),a0
    a984:	       movea.l 80(a0),a0
    a988:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    a98e:	       movea.l 16(sp),a0
    a992:	       move.l 92(a0),d2
    a996:	       move.l 4(sp),-(sp)
    a99a:	       pea b4 <_start+0xb4>
    a99e:	       jsr 175e8 <__divsi3>
    a9a4:	       addq.l #8,sp
    a9a6:	       add.l d2,d0
    a9a8:	       move.l d0,d1
    a9aa:	       addi.l #180,d1
    a9b0:	       movea.l 16(sp),a0
    a9b4:	       move.l 100(a0),d0
    a9b8:	       move.l d1,d2
    a9ba:	       add.l d0,d2
    a9bc:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    a9c0:	   /-- bra.s a9ca <rethinkAngle+0x4e>
    a9c2:	/--|-> addi.l #-360,8(sp)
    a9ca:	|  \-> cmpi.l #359,8(sp)
    a9d2:	\----- bgt.s a9c2 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    a9d4:	       move.l 4(sp),-(sp)
    a9d8:	       move.l 12(sp),-(sp)
    a9dc:	       jsr 1756a <__mulsi3>
    a9e2:	       addq.l #8,sp
    a9e4:	       pea 168 <decodeFilename+0x50>
    a9e8:	       move.l d0,-(sp)
    a9ea:	       jsr 175e8 <__divsi3>
    a9f0:	       addq.l #8,sp
    a9f2:	       movea.l 16(sp),a0
    a9f6:	       move.l d0,106(a0)
}
    a9fa:	       nop
    a9fc:	       move.l (sp)+,d2
    a9fe:	       addq.l #8,sp
    aa00:	       rts

0000aa02 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    aa02:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    aa04:	          movea.l 8(sp),a0
    aa08:	          move.l 8(a0),d0
    aa0c:	          move.l 12(sp),-(sp)
    aa10:	          move.l d0,-(sp)
    aa12:	          jsr 8d0 <put2bytes>
    aa18:	          addq.l #8,sp
	if (p -> numFrames) {
    aa1a:	          movea.l 8(sp),a0
    aa1e:	          move.l 8(a0),d0
    aa22:	/-------- beq.w aac6 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    aa26:	|         movea.l 8(sp),a0
    aa2a:	|         movea.l (a0),a0
    aa2c:	|         move.l (a0),d0
    aa2e:	|         move.l 12(sp),-(sp)
    aa32:	|         move.l d0,-(sp)
    aa34:	|         jsr 958 <put4bytes>
    aa3a:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    aa3c:	|         clr.l (sp)
    aa3e:	|     /-- bra.s aab8 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    aa40:	|  /--|-> movea.l 8(sp),a0
    aa44:	|  |  |   movea.l 4(a0),a0
    aa48:	|  |  |   move.l (sp),d1
    aa4a:	|  |  |   move.l d1,d0
    aa4c:	|  |  |   add.l d0,d0
    aa4e:	|  |  |   add.l d1,d0
    aa50:	|  |  |   add.l d0,d0
    aa52:	|  |  |   add.l d0,d0
    aa54:	|  |  |   adda.l d0,a0
    aa56:	|  |  |   move.l (a0),d0
    aa58:	|  |  |   move.l 12(sp),-(sp)
    aa5c:	|  |  |   move.l d0,-(sp)
    aa5e:	|  |  |   jsr 958 <put4bytes>
    aa64:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    aa66:	|  |  |   movea.l 8(sp),a0
    aa6a:	|  |  |   movea.l 4(a0),a0
    aa6e:	|  |  |   move.l (sp),d1
    aa70:	|  |  |   move.l d1,d0
    aa72:	|  |  |   add.l d0,d0
    aa74:	|  |  |   add.l d1,d0
    aa76:	|  |  |   add.l d0,d0
    aa78:	|  |  |   add.l d0,d0
    aa7a:	|  |  |   adda.l d0,a0
    aa7c:	|  |  |   move.l 4(a0),d0
    aa80:	|  |  |   move.l 12(sp),-(sp)
    aa84:	|  |  |   move.l d0,-(sp)
    aa86:	|  |  |   jsr 958 <put4bytes>
    aa8c:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    aa8e:	|  |  |   movea.l 8(sp),a0
    aa92:	|  |  |   movea.l 4(a0),a0
    aa96:	|  |  |   move.l (sp),d1
    aa98:	|  |  |   move.l d1,d0
    aa9a:	|  |  |   add.l d0,d0
    aa9c:	|  |  |   add.l d1,d0
    aa9e:	|  |  |   add.l d0,d0
    aaa0:	|  |  |   add.l d0,d0
    aaa2:	|  |  |   adda.l d0,a0
    aaa4:	|  |  |   move.l 8(a0),d0
    aaa8:	|  |  |   move.l 12(sp),-(sp)
    aaac:	|  |  |   move.l d0,-(sp)
    aaae:	|  |  |   jsr 958 <put4bytes>
    aab4:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    aab6:	|  |  |   addq.l #1,(sp)
    aab8:	|  |  \-> movea.l 8(sp),a0
    aabc:	|  |      move.l 8(a0),d0
    aac0:	|  |      cmp.l (sp),d0
    aac2:	|  \----- bgt.w aa40 <saveAnim+0x3e>
		}
	}
	return TRUE;
    aac6:	\-------> moveq #1,d0
}
    aac8:	          addq.l #4,sp
    aaca:	          rts

0000aacc <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    aacc:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    aace:	             movea.l 8(sp),a0
    aad2:	             move.l 4(a0),d0
    aad6:	             move.l 12(sp),-(sp)
    aada:	             move.l d0,-(sp)
    aadc:	             jsr 8d0 <put2bytes>
    aae2:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    aae4:	             clr.l (sp)
    aae6:	   /-------- bra.s ab12 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    aae8:	/--|-------> movea.l 8(sp),a0
    aaec:	|  |         move.l (a0),d1
    aaee:	|  |         move.l (sp),d0
    aaf0:	|  |         add.l d0,d0
    aaf2:	|  |         add.l d0,d0
    aaf4:	|  |         movea.l d1,a0
    aaf6:	|  |         adda.l d0,a0
    aaf8:	|  |         move.l (a0),d0
    aafa:	|  |         move.l 12(sp),-(sp)
    aafe:	|  |         move.l d0,-(sp)
    ab00:	|  |         jsr aa02 <saveAnim>
    ab06:	|  |         addq.l #8,sp
    ab08:	|  |         tst.w d0
    ab0a:	|  |     /-- bne.s ab10 <saveCostume+0x44>
    ab0c:	|  |     |   clr.w d0
    ab0e:	|  |  /--|-- bra.s ab26 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ab10:	|  |  |  \-> addq.l #1,(sp)
    ab12:	|  \--|----> movea.l 8(sp),a0
    ab16:	|     |      move.l 4(a0),d1
    ab1a:	|     |      move.l d1,d0
    ab1c:	|     |      add.l d0,d0
    ab1e:	|     |      add.l d1,d0
    ab20:	|     |      cmp.l (sp),d0
    ab22:	\-----|----- bgt.s aae8 <saveCostume+0x1c>
	}

	return TRUE;
    ab24:	      |      moveq #1,d0
}
    ab26:	      \----> addq.l #4,sp
    ab28:	             rts

0000ab2a <savePeople>:

BOOL savePeople (BPTR fp) {
    ab2a:	             lea -144(sp),sp
    ab2e:	             move.l a6,-(sp)
    ab30:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    ab32:	             move.l 1a85a <allPeople>,148(sp)
	int countPeople = 0, a;
    ab3a:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    ab3e:	             move.w 1a136 <scaleHorizon>,d0
    ab44:	             movea.w d0,a0
    ab46:	             move.l 156(sp),-(sp)
    ab4a:	             move.l a0,-(sp)
    ab4c:	             jsr a9c <putSigned>
    ab52:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    ab54:	             move.w 1a138 <scaleDivide>,d0
    ab5a:	             movea.w d0,a0
    ab5c:	             move.l 156(sp),-(sp)
    ab60:	             move.l a0,-(sp)
    ab62:	             jsr a9c <putSigned>
    ab68:	             addq.l #8,sp

	while (me) {
    ab6a:	         /-- bra.s ab7a <savePeople+0x50>
		countPeople ++;
    ab6c:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    ab70:	      |  |   movea.l 148(sp),a0
    ab74:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    ab7a:	      |  \-> tst.l 148(sp)
    ab7e:	      \----- bne.s ab6c <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    ab80:	             move.l 156(sp),-(sp)
    ab84:	             move.l 148(sp),-(sp)
    ab88:	             jsr 8d0 <put2bytes>
    ab8e:	             addq.l #8,sp

	me = allPeople;
    ab90:	             move.l 1a85a <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    ab98:	             clr.l 140(sp)
    ab9c:	   /-------- bra.w aff4 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    aba0:	/--|-------> movea.l 148(sp),a0
    aba4:	|  |         move.l (a0),d0
    aba6:	|  |         move.l 156(sp),-(sp)
    abaa:	|  |         move.l d0,-(sp)
    abac:	|  |         jsr a46 <putFloat>
    abb2:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    abb4:	|  |         movea.l 148(sp),a0
    abb8:	|  |         move.l 4(a0),d0
    abbc:	|  |         move.l 156(sp),-(sp)
    abc0:	|  |         move.l d0,-(sp)
    abc2:	|  |         jsr a46 <putFloat>
    abc8:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    abca:	|  |         movea.l 148(sp),a0
    abce:	|  |         move.l 80(a0),d0
    abd2:	|  |         move.l 156(sp),-(sp)
    abd6:	|  |         move.l d0,-(sp)
    abd8:	|  |         jsr aacc <saveCostume>
    abde:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    abe0:	|  |         movea.l 148(sp),a0
    abe4:	|  |         move.l 72(a0),d0
    abe8:	|  |         move.l 156(sp),-(sp)
    abec:	|  |         move.l d0,-(sp)
    abee:	|  |         jsr aa02 <saveAnim>
    abf4:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    abf6:	|  |         move.l 156(sp),136(sp)
    abfc:	|  |         movea.l 148(sp),a0
    ac00:	|  |         move.l 72(a0),d1
    ac04:	|  |         movea.l 148(sp),a0
    ac08:	|  |         move.l 76(a0),d0
    ac0c:	|  |         cmp.l d1,d0
    ac0e:	|  |         seq d0
    ac10:	|  |         neg.b d0
    ac12:	|  |         move.b d0,d0
    ac14:	|  |         andi.l #255,d0
    ac1a:	|  |         move.l d0,132(sp)
    ac1e:	|  |         move.l 1a7aa <DOSBase>,d0
    ac24:	|  |         movea.l d0,a6
    ac26:	|  |         move.l 136(sp),d1
    ac2a:	|  |         move.l 132(sp),d2
    ac2e:	|  |         jsr -312(a6)
    ac32:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    ac36:	|  |         movea.l 148(sp),a0
    ac3a:	|  |         move.l 32(a0),d0
    ac3e:	|  |         move.l 156(sp),-(sp)
    ac42:	|  |         move.l d0,-(sp)
    ac44:	|  |         jsr a46 <putFloat>
    ac4a:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    ac4c:	|  |         movea.l 148(sp),a0
    ac50:	|  |         move.l 118(a0),d0
    ac54:	|  |         move.l 156(sp),-(sp)
    ac58:	|  |         move.l d0,-(sp)
    ac5a:	|  |         jsr 8d0 <put2bytes>
    ac60:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    ac62:	|  |         movea.l 148(sp),a0
    ac66:	|  |         move.l 20(a0),d0
    ac6a:	|  |         move.l 156(sp),-(sp)
    ac6e:	|  |         move.l d0,-(sp)
    ac70:	|  |         jsr 8d0 <put2bytes>
    ac76:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    ac78:	|  |         movea.l 148(sp),a0
    ac7c:	|  |         move.l 40(a0),d0
    ac80:	|  |         move.l 156(sp),-(sp)
    ac84:	|  |         move.l d0,-(sp)
    ac86:	|  |         jsr 8d0 <put2bytes>
    ac8c:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    ac8e:	|  |         movea.l 148(sp),a0
    ac92:	|  |         move.l 44(a0),d0
    ac96:	|  |         move.l 156(sp),-(sp)
    ac9a:	|  |         move.l d0,-(sp)
    ac9c:	|  |         jsr 8d0 <put2bytes>
    aca2:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    aca4:	|  |         movea.l 148(sp),a0
    aca8:	|  |         move.l 48(a0),d0
    acac:	|  |         move.l 156(sp),-(sp)
    acb0:	|  |         move.l d0,-(sp)
    acb2:	|  |         jsr 8d0 <put2bytes>
    acb8:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    acba:	|  |         movea.l 148(sp),a0
    acbe:	|  |         move.l 52(a0),d0
    acc2:	|  |         move.l 156(sp),-(sp)
    acc6:	|  |         move.l d0,-(sp)
    acc8:	|  |         jsr 8d0 <put2bytes>
    acce:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    acd0:	|  |         movea.l 148(sp),a0
    acd4:	|  |         move.l 84(a0),d0
    acd8:	|  |         move.l 156(sp),-(sp)
    acdc:	|  |         move.l d0,-(sp)
    acde:	|  |         jsr 8d0 <put2bytes>
    ace4:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    ace6:	|  |         movea.l 148(sp),a0
    acea:	|  |         move.l 88(a0),d0
    acee:	|  |         move.l 156(sp),-(sp)
    acf2:	|  |         move.l d0,-(sp)
    acf4:	|  |         jsr 8d0 <put2bytes>
    acfa:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    acfc:	|  |         movea.l 148(sp),a0
    ad00:	|  |         move.l 28(a0),d0
    ad04:	|  |         move.l 156(sp),-(sp)
    ad08:	|  |         move.l d0,-(sp)
    ad0a:	|  |         jsr 8d0 <put2bytes>
    ad10:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    ad12:	|  |         movea.l 148(sp),a0
    ad16:	|  |         move.l 122(a0),d0
    ad1a:	|  |         move.l 156(sp),-(sp)
    ad1e:	|  |         move.l d0,-(sp)
    ad20:	|  |         jsr 8d0 <put2bytes>
    ad26:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    ad28:	|  |         movea.l 148(sp),a0
    ad2c:	|  |         move.l 24(a0),d0
    ad30:	|  |         move.l d0,d0
    ad32:	|  |         movea.w d0,a0
    ad34:	|  |         move.l 156(sp),-(sp)
    ad38:	|  |         move.l a0,-(sp)
    ad3a:	|  |         jsr a9c <putSigned>
    ad40:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    ad42:	|  |         move.l 156(sp),124(sp)
    ad48:	|  |         movea.l 148(sp),a0
    ad4c:	|  |         move.w 104(a0),d0
    ad50:	|  |         movea.w d0,a0
    ad52:	|  |         move.l a0,120(sp)
    ad56:	|  |         move.l 1a7aa <DOSBase>,d0
    ad5c:	|  |         movea.l d0,a6
    ad5e:	|  |         move.l 124(sp),d1
    ad62:	|  |         move.l 120(sp),d2
    ad66:	|  |         jsr -312(a6)
    ad6a:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    ad6e:	|  |         move.l 156(sp),112(sp)
    ad74:	|  |         movea.l 148(sp),a0
    ad78:	|  |         move.w 64(a0),d0
    ad7c:	|  |         movea.w d0,a0
    ad7e:	|  |         move.l a0,108(sp)
    ad82:	|  |         move.l 1a7aa <DOSBase>,d0
    ad88:	|  |         movea.l d0,a6
    ad8a:	|  |         move.l 112(sp),d1
    ad8e:	|  |         move.l 108(sp),d2
    ad92:	|  |         jsr -312(a6)
    ad96:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    ad9a:	|  |         move.l 156(sp),100(sp)
    ada0:	|  |         movea.l 148(sp),a0
    ada4:	|  |         move.w 66(a0),d0
    ada8:	|  |         movea.w d0,a0
    adaa:	|  |         move.l a0,96(sp)
    adae:	|  |         move.l 1a7aa <DOSBase>,d0
    adb4:	|  |         movea.l d0,a6
    adb6:	|  |         move.l 100(sp),d1
    adba:	|  |         move.l 96(sp),d2
    adbe:	|  |         jsr -312(a6)
    adc2:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    adc6:	|  |         movea.l 148(sp),a0
    adca:	|  |         move.l 68(a0),d0
    adce:	|  |  /----- beq.s ae0c <savePeople+0x2e2>
			FPutC (fp, 1);
    add0:	|  |  |      move.l 156(sp),76(sp)
    add6:	|  |  |      moveq #1,d0
    add8:	|  |  |      move.l d0,72(sp)
    addc:	|  |  |      move.l 1a7aa <DOSBase>,d0
    ade2:	|  |  |      movea.l d0,a6
    ade4:	|  |  |      move.l 76(sp),d1
    ade8:	|  |  |      move.l 72(sp),d2
    adec:	|  |  |      jsr -312(a6)
    adf0:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    adf4:	|  |  |      movea.l 148(sp),a0
    adf8:	|  |  |      move.l 68(a0),d0
    adfc:	|  |  |      move.l 156(sp),-(sp)
    ae00:	|  |  |      move.l d0,-(sp)
    ae02:	|  |  |      jsr bfa2 <saveFunction>
    ae08:	|  |  |      addq.l #8,sp
    ae0a:	|  |  |  /-- bra.s ae30 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    ae0c:	|  |  \--|-> move.l 156(sp),88(sp)
    ae12:	|  |     |   moveq #1,d0
    ae14:	|  |     |   move.l d0,84(sp)
    ae18:	|  |     |   move.l 1a7aa <DOSBase>,d0
    ae1e:	|  |     |   movea.l d0,a6
    ae20:	|  |     |   move.l 88(sp),d1
    ae24:	|  |     |   move.l 84(sp),d2
    ae28:	|  |     |   jsr -312(a6)
    ae2c:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    ae30:	|  |     \-> movea.l 148(sp),a0
    ae34:	|  |         move.l 106(a0),d0
    ae38:	|  |         move.l 156(sp),-(sp)
    ae3c:	|  |         move.l d0,-(sp)
    ae3e:	|  |         jsr 8d0 <put2bytes>
    ae44:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    ae46:	|  |         movea.l 148(sp),a0
    ae4a:	|  |         move.l 92(a0),d0
    ae4e:	|  |         move.l 156(sp),-(sp)
    ae52:	|  |         move.l d0,-(sp)
    ae54:	|  |         jsr 8d0 <put2bytes>
    ae5a:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    ae5c:	|  |         movea.l 148(sp),a0
    ae60:	|  |         move.l 100(a0),d0
    ae64:	|  |         move.l 156(sp),-(sp)
    ae68:	|  |         move.l d0,-(sp)
    ae6a:	|  |         jsr 8d0 <put2bytes>
    ae70:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    ae72:	|  |         movea.l 148(sp),a0
    ae76:	|  |         move.l 96(a0),d0
    ae7a:	|  |         move.l 156(sp),-(sp)
    ae7e:	|  |         move.l d0,-(sp)
    ae80:	|  |         jsr 8d0 <put2bytes>
    ae86:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    ae88:	|  |         movea.l 148(sp),a0
    ae8c:	|  |         move.l 110(a0),d0
    ae90:	|  |         move.l d0,d0
    ae92:	|  |         movea.w d0,a0
    ae94:	|  |         move.l 156(sp),-(sp)
    ae98:	|  |         move.l a0,-(sp)
    ae9a:	|  |         jsr a9c <putSigned>
    aea0:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    aea2:	|  |         movea.l 148(sp),a0
    aea6:	|  |         move.l 56(a0),d0
    aeaa:	|  |         move.l d0,d0
    aeac:	|  |         movea.w d0,a0
    aeae:	|  |         move.l 156(sp),-(sp)
    aeb2:	|  |         move.l a0,-(sp)
    aeb4:	|  |         jsr a9c <putSigned>
    aeba:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    aebc:	|  |         movea.l 148(sp),a0
    aec0:	|  |         move.l 60(a0),d0
    aec4:	|  |         move.l d0,d0
    aec6:	|  |         movea.w d0,a0
    aec8:	|  |         move.l 156(sp),-(sp)
    aecc:	|  |         move.l a0,-(sp)
    aece:	|  |         jsr a9c <putSigned>
    aed4:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    aed6:	|  |         move.l 156(sp),64(sp)
    aedc:	|  |         movea.l 148(sp),a0
    aee0:	|  |         move.b 126(a0),d0
    aee4:	|  |         move.b d0,d0
    aee6:	|  |         andi.l #255,d0
    aeec:	|  |         move.l d0,60(sp)
    aef0:	|  |         move.l 1a7aa <DOSBase>,d0
    aef6:	|  |         movea.l d0,a6
    aef8:	|  |         move.l 64(sp),d1
    aefc:	|  |         move.l 60(sp),d2
    af00:	|  |         jsr -312(a6)
    af04:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    af08:	|  |         move.l 156(sp),52(sp)
    af0e:	|  |         movea.l 148(sp),a0
    af12:	|  |         move.b 127(a0),d0
    af16:	|  |         move.b d0,d0
    af18:	|  |         andi.l #255,d0
    af1e:	|  |         move.l d0,48(sp)
    af22:	|  |         move.l 1a7aa <DOSBase>,d0
    af28:	|  |         movea.l d0,a6
    af2a:	|  |         move.l 52(sp),d1
    af2e:	|  |         move.l 48(sp),d2
    af32:	|  |         jsr -312(a6)
    af36:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    af3a:	|  |         move.l 156(sp),40(sp)
    af40:	|  |         movea.l 148(sp),a0
    af44:	|  |         move.b 128(a0),d0
    af48:	|  |         move.b d0,d0
    af4a:	|  |         andi.l #255,d0
    af50:	|  |         move.l d0,36(sp)
    af54:	|  |         move.l 1a7aa <DOSBase>,d0
    af5a:	|  |         movea.l d0,a6
    af5c:	|  |         move.l 40(sp),d1
    af60:	|  |         move.l 36(sp),d2
    af64:	|  |         jsr -312(a6)
    af68:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    af6c:	|  |         move.l 156(sp),28(sp)
    af72:	|  |         movea.l 148(sp),a0
    af76:	|  |         move.b 129(a0),d0
    af7a:	|  |         move.b d0,d0
    af7c:	|  |         andi.l #255,d0
    af82:	|  |         move.l d0,24(sp)
    af86:	|  |         move.l 1a7aa <DOSBase>,d0
    af8c:	|  |         movea.l d0,a6
    af8e:	|  |         move.l 28(sp),d1
    af92:	|  |         move.l 24(sp),d2
    af96:	|  |         jsr -312(a6)
    af9a:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    af9e:	|  |         move.l 156(sp),16(sp)
    afa4:	|  |         movea.l 148(sp),a0
    afa8:	|  |         move.b 130(a0),d0
    afac:	|  |         move.b d0,d0
    afae:	|  |         andi.l #255,d0
    afb4:	|  |         move.l d0,12(sp)
    afb8:	|  |         move.l 1a7aa <DOSBase>,d0
    afbe:	|  |         movea.l d0,a6
    afc0:	|  |         move.l 16(sp),d1
    afc4:	|  |         move.l 12(sp),d2
    afc8:	|  |         jsr -312(a6)
    afcc:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    afd0:	|  |         movea.l 148(sp),a0
    afd4:	|  |         move.l 114(a0),d0
    afd8:	|  |         move.l 156(sp),-(sp)
    afdc:	|  |         move.l d0,-(sp)
    afde:	|  |         jsr d3c8 <saveObjectRef>
    afe4:	|  |         addq.l #8,sp

		me = me -> next;
    afe6:	|  |         movea.l 148(sp),a0
    afea:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    aff0:	|  |         addq.l #1,140(sp)
    aff4:	|  \-------> movea.l 140(sp),a0
    aff8:	|            cmpa.l 144(sp),a0
    affc:	\----------- blt.w aba0 <savePeople+0x76>
	}
	return TRUE;
    b000:	             moveq #1,d0
}
    b002:	             move.l (sp)+,d2
    b004:	             movea.l (sp)+,a6
    b006:	             lea 144(sp),sp
    b00a:	             rts

0000b00c <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b00c:	movea.l 4(sp),a0
    b010:	move.l 8(sp),(a0)
}
    b014:	nop
    b016:	rts

0000b018 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b018:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b01a:	       move.l 12(sp),-(sp)
    b01e:	       jsr a0a6 <findPerson>
    b024:	       addq.l #4,sp
    b026:	       move.l d0,(sp)
	if (! moveMe) return;
    b028:	/----- beq.s b03c <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b02a:	|      move.l 8(sp),-(sp)
    b02e:	|      move.l 4(sp),-(sp)
    b032:	|      jsr b042 <setMyDrawMode>
    b038:	|      addq.l #8,sp
    b03a:	|  /-- bra.s b03e <setDrawMode+0x26>
	if (! moveMe) return;
    b03c:	\--|-> nop
}
    b03e:	   \-> addq.l #4,sp
    b040:	       rts

0000b042 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b042:	       moveq #19,d0
    b044:	       cmp.l 8(sp),d0
    b048:	/----- bcs.w b520 <setMyDrawMode+0x4de>
    b04c:	|      move.l 8(sp),d0
    b050:	|      add.l d0,d0
    b052:	|      movea.l d0,a0
    b054:	|      adda.l #45152,a0
    b05a:	|      move.w (a0),d0
    b05c:	|      jmp (b060 <setMyDrawMode+0x1e>,pc,d0.w)
    b060:	|      .short 0x04c0
    b062:	|      ori.l #6684712,-(a4)
    b068:	|      btst d0,-(a0)
    b06a:	|      bchg d0,(a6)+
    b06c:	|      bclr d0,(a4)+
    b06e:	|      bset d0,(a2)+
    b070:	|      andi.b #84,(a6)
    b074:	|      andi.l #55575312,(a2)
    b07a:	|      .short 0x02d0
    b07c:	|      bclr d1,(a0)
    b07e:	|      .short 0x044a
    b080:	|      .short 0x040c
    b082:	|      movep.l d1,1158(a6)
    b086:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b088:	|      movea.l 4(sp),a0
    b08c:	|      clr.b 128(a0)
    b090:	|      movea.l 4(sp),a0
    b094:	|      move.b 128(a0),d0
    b098:	|      movea.l 4(sp),a0
    b09c:	|      move.b d0,127(a0)
    b0a0:	|      movea.l 4(sp),a0
    b0a4:	|      move.b 127(a0),d0
    b0a8:	|      movea.l 4(sp),a0
    b0ac:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b0b0:	|      movea.l 4(sp),a0
    b0b4:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b0b8:	|      movea.l 4(sp),a0
    b0bc:	|      move.b #64,130(a0)
			break;
    b0c2:	|  /-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b0c6:	|  |   movea.l 4(sp),a0
    b0ca:	|  |   clr.b 128(a0)
    b0ce:	|  |   movea.l 4(sp),a0
    b0d2:	|  |   move.b 128(a0),d0
    b0d6:	|  |   movea.l 4(sp),a0
    b0da:	|  |   move.b d0,127(a0)
    b0de:	|  |   movea.l 4(sp),a0
    b0e2:	|  |   move.b 127(a0),d0
    b0e6:	|  |   movea.l 4(sp),a0
    b0ea:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b0ee:	|  |   movea.l 4(sp),a0
    b0f2:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b0f6:	|  |   movea.l 4(sp),a0
    b0fa:	|  |   move.b #-128,130(a0)
			break;
    b100:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b104:	|  |   movea.l 4(sp),a0
    b108:	|  |   clr.b 128(a0)
    b10c:	|  |   movea.l 4(sp),a0
    b110:	|  |   move.b 128(a0),d0
    b114:	|  |   movea.l 4(sp),a0
    b118:	|  |   move.b d0,127(a0)
    b11c:	|  |   movea.l 4(sp),a0
    b120:	|  |   move.b 127(a0),d0
    b124:	|  |   movea.l 4(sp),a0
    b128:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b12c:	|  |   movea.l 4(sp),a0
    b130:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b134:	|  |   movea.l 4(sp),a0
    b138:	|  |   move.b #-64,130(a0)
			break;
    b13e:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b142:	|  |   movea.l 4(sp),a0
    b146:	|  |   clr.b 128(a0)
    b14a:	|  |   movea.l 4(sp),a0
    b14e:	|  |   move.b 128(a0),d0
    b152:	|  |   movea.l 4(sp),a0
    b156:	|  |   move.b d0,127(a0)
    b15a:	|  |   movea.l 4(sp),a0
    b15e:	|  |   move.b 127(a0),d0
    b162:	|  |   movea.l 4(sp),a0
    b166:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b16a:	|  |   movea.l 4(sp),a0
    b16e:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b172:	|  |   movea.l 4(sp),a0
    b176:	|  |   move.b #-2,130(a0)
			break;
    b17c:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b180:	|  |   movea.l 4(sp),a0
    b184:	|  |   clr.b 128(a0)
    b188:	|  |   movea.l 4(sp),a0
    b18c:	|  |   move.b 128(a0),d0
    b190:	|  |   movea.l 4(sp),a0
    b194:	|  |   move.b d0,127(a0)
    b198:	|  |   movea.l 4(sp),a0
    b19c:	|  |   move.b 127(a0),d0
    b1a0:	|  |   movea.l 4(sp),a0
    b1a4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b1a8:	|  |   movea.l 4(sp),a0
    b1ac:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b1b2:	|  |   movea.l 4(sp),a0
    b1b6:	|  |   clr.b 130(a0)
			break;
    b1ba:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b1be:	|  |   movea.l 4(sp),a0
    b1c2:	|  |   clr.b 128(a0)
    b1c6:	|  |   movea.l 4(sp),a0
    b1ca:	|  |   move.b 128(a0),d0
    b1ce:	|  |   movea.l 4(sp),a0
    b1d2:	|  |   move.b d0,127(a0)
    b1d6:	|  |   movea.l 4(sp),a0
    b1da:	|  |   move.b 127(a0),d0
    b1de:	|  |   movea.l 4(sp),a0
    b1e2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b1e6:	|  |   movea.l 4(sp),a0
    b1ea:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b1f0:	|  |   movea.l 4(sp),a0
    b1f4:	|  |   clr.b 130(a0)
			break;
    b1f8:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b1fc:	|  |   movea.l 4(sp),a0
    b200:	|  |   clr.b 128(a0)
    b204:	|  |   movea.l 4(sp),a0
    b208:	|  |   move.b 128(a0),d0
    b20c:	|  |   movea.l 4(sp),a0
    b210:	|  |   move.b d0,127(a0)
    b214:	|  |   movea.l 4(sp),a0
    b218:	|  |   move.b 127(a0),d0
    b21c:	|  |   movea.l 4(sp),a0
    b220:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b224:	|  |   movea.l 4(sp),a0
    b228:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b22e:	|  |   movea.l 4(sp),a0
    b232:	|  |   clr.b 130(a0)
			break;
    b236:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b23a:	|  |   movea.l 4(sp),a0
    b23e:	|  |   clr.b 128(a0)
    b242:	|  |   movea.l 4(sp),a0
    b246:	|  |   move.b 128(a0),d0
    b24a:	|  |   movea.l 4(sp),a0
    b24e:	|  |   move.b d0,127(a0)
    b252:	|  |   movea.l 4(sp),a0
    b256:	|  |   move.b 127(a0),d0
    b25a:	|  |   movea.l 4(sp),a0
    b25e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b262:	|  |   movea.l 4(sp),a0
    b266:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b26a:	|  |   movea.l 4(sp),a0
    b26e:	|  |   clr.b 130(a0)
			break;
    b272:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b276:	|  |   movea.l 4(sp),a0
    b27a:	|  |   clr.b 128(a0)
    b27e:	|  |   movea.l 4(sp),a0
    b282:	|  |   move.b 128(a0),d0
    b286:	|  |   movea.l 4(sp),a0
    b28a:	|  |   move.b d0,127(a0)
    b28e:	|  |   movea.l 4(sp),a0
    b292:	|  |   move.b 127(a0),d0
    b296:	|  |   movea.l 4(sp),a0
    b29a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b29e:	|  |   movea.l 4(sp),a0
    b2a2:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b2a6:	|  |   movea.l 4(sp),a0
    b2aa:	|  |   move.b #64,130(a0)
			break;
    b2b0:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b2b4:	|  |   movea.l 4(sp),a0
    b2b8:	|  |   clr.b 128(a0)
    b2bc:	|  |   movea.l 4(sp),a0
    b2c0:	|  |   move.b 128(a0),d0
    b2c4:	|  |   movea.l 4(sp),a0
    b2c8:	|  |   move.b d0,127(a0)
    b2cc:	|  |   movea.l 4(sp),a0
    b2d0:	|  |   move.b 127(a0),d0
    b2d4:	|  |   movea.l 4(sp),a0
    b2d8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b2dc:	|  |   movea.l 4(sp),a0
    b2e0:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b2e4:	|  |   movea.l 4(sp),a0
    b2e8:	|  |   move.b #-128,130(a0)
			break;
    b2ee:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b2f2:	|  |   movea.l 4(sp),a0
    b2f6:	|  |   clr.b 128(a0)
    b2fa:	|  |   movea.l 4(sp),a0
    b2fe:	|  |   move.b 128(a0),d0
    b302:	|  |   movea.l 4(sp),a0
    b306:	|  |   move.b d0,127(a0)
    b30a:	|  |   movea.l 4(sp),a0
    b30e:	|  |   move.b 127(a0),d0
    b312:	|  |   movea.l 4(sp),a0
    b316:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b31a:	|  |   movea.l 4(sp),a0
    b31e:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b322:	|  |   movea.l 4(sp),a0
    b326:	|  |   move.b #-64,130(a0)
			break;
    b32c:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b330:	|  |   movea.l 4(sp),a0
    b334:	|  |   move.b #-128,128(a0)
    b33a:	|  |   movea.l 4(sp),a0
    b33e:	|  |   move.b 128(a0),d0
    b342:	|  |   movea.l 4(sp),a0
    b346:	|  |   move.b d0,127(a0)
    b34a:	|  |   movea.l 4(sp),a0
    b34e:	|  |   move.b 127(a0),d0
    b352:	|  |   movea.l 4(sp),a0
    b356:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b35a:	|  |   movea.l 4(sp),a0
    b35e:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b364:	|  |   movea.l 4(sp),a0
    b368:	|  |   clr.b 130(a0)
			break;
    b36c:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b370:	|  |   movea.l 4(sp),a0
    b374:	|  |   move.b #-128,128(a0)
    b37a:	|  |   movea.l 4(sp),a0
    b37e:	|  |   move.b 128(a0),d0
    b382:	|  |   movea.l 4(sp),a0
    b386:	|  |   move.b d0,127(a0)
    b38a:	|  |   movea.l 4(sp),a0
    b38e:	|  |   move.b 127(a0),d0
    b392:	|  |   movea.l 4(sp),a0
    b396:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b39a:	|  |   movea.l 4(sp),a0
    b39e:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b3a4:	|  |   movea.l 4(sp),a0
    b3a8:	|  |   clr.b 130(a0)
			break;
    b3ac:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b3b0:	|  |   movea.l 4(sp),a0
    b3b4:	|  |   move.b #-128,128(a0)
    b3ba:	|  |   movea.l 4(sp),a0
    b3be:	|  |   move.b 128(a0),d0
    b3c2:	|  |   movea.l 4(sp),a0
    b3c6:	|  |   move.b d0,127(a0)
    b3ca:	|  |   movea.l 4(sp),a0
    b3ce:	|  |   move.b 127(a0),d0
    b3d2:	|  |   movea.l 4(sp),a0
    b3d6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b3da:	|  |   movea.l 4(sp),a0
    b3de:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b3e4:	|  |   movea.l 4(sp),a0
    b3e8:	|  |   clr.b 130(a0)
			break;
    b3ec:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b3f0:	|  |   movea.l 4(sp),a0
    b3f4:	|  |   move.b #-128,128(a0)
    b3fa:	|  |   movea.l 4(sp),a0
    b3fe:	|  |   move.b 128(a0),d0
    b402:	|  |   movea.l 4(sp),a0
    b406:	|  |   move.b d0,127(a0)
    b40a:	|  |   movea.l 4(sp),a0
    b40e:	|  |   move.b 127(a0),d0
    b412:	|  |   movea.l 4(sp),a0
    b416:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b41a:	|  |   movea.l 4(sp),a0
    b41e:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b422:	|  |   movea.l 4(sp),a0
    b426:	|  |   clr.b 130(a0)
			break;
    b42a:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b42e:	|  |   movea.l 4(sp),a0
    b432:	|  |   st 128(a0)
    b436:	|  |   movea.l 4(sp),a0
    b43a:	|  |   move.b 128(a0),d0
    b43e:	|  |   movea.l 4(sp),a0
    b442:	|  |   move.b d0,127(a0)
    b446:	|  |   movea.l 4(sp),a0
    b44a:	|  |   move.b 127(a0),d0
    b44e:	|  |   movea.l 4(sp),a0
    b452:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b456:	|  |   movea.l 4(sp),a0
    b45a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b460:	|  |   movea.l 4(sp),a0
    b464:	|  |   clr.b 130(a0)
			break;
    b468:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b46c:	|  |   movea.l 4(sp),a0
    b470:	|  |   st 128(a0)
    b474:	|  |   movea.l 4(sp),a0
    b478:	|  |   move.b 128(a0),d0
    b47c:	|  |   movea.l 4(sp),a0
    b480:	|  |   move.b d0,127(a0)
    b484:	|  |   movea.l 4(sp),a0
    b488:	|  |   move.b 127(a0),d0
    b48c:	|  |   movea.l 4(sp),a0
    b490:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b494:	|  |   movea.l 4(sp),a0
    b498:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b49e:	|  |   movea.l 4(sp),a0
    b4a2:	|  |   clr.b 130(a0)
			break;
    b4a6:	|  +-- bra.w b55a <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b4aa:	|  |   movea.l 4(sp),a0
    b4ae:	|  |   st 128(a0)
    b4b2:	|  |   movea.l 4(sp),a0
    b4b6:	|  |   move.b 128(a0),d0
    b4ba:	|  |   movea.l 4(sp),a0
    b4be:	|  |   move.b d0,127(a0)
    b4c2:	|  |   movea.l 4(sp),a0
    b4c6:	|  |   move.b 127(a0),d0
    b4ca:	|  |   movea.l 4(sp),a0
    b4ce:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b4d2:	|  |   movea.l 4(sp),a0
    b4d6:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b4dc:	|  |   movea.l 4(sp),a0
    b4e0:	|  |   clr.b 130(a0)
			break;
    b4e4:	|  +-- bra.s b55a <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b4e6:	|  |   movea.l 4(sp),a0
    b4ea:	|  |   st 128(a0)
    b4ee:	|  |   movea.l 4(sp),a0
    b4f2:	|  |   move.b 128(a0),d0
    b4f6:	|  |   movea.l 4(sp),a0
    b4fa:	|  |   move.b d0,127(a0)
    b4fe:	|  |   movea.l 4(sp),a0
    b502:	|  |   move.b 127(a0),d0
    b506:	|  |   movea.l 4(sp),a0
    b50a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b50e:	|  |   movea.l 4(sp),a0
    b512:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b516:	|  |   movea.l 4(sp),a0
    b51a:	|  |   clr.b 130(a0)
			break;
    b51e:	|  +-- bra.s b55a <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b520:	\--|-> movea.l 4(sp),a0
    b524:	   |   clr.b 128(a0)
    b528:	   |   movea.l 4(sp),a0
    b52c:	   |   move.b 128(a0),d0
    b530:	   |   movea.l 4(sp),a0
    b534:	   |   move.b d0,127(a0)
    b538:	   |   movea.l 4(sp),a0
    b53c:	   |   move.b 127(a0),d0
    b540:	   |   movea.l 4(sp),a0
    b544:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b548:	   |   movea.l 4(sp),a0
    b54c:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    b550:	   |   movea.l 4(sp),a0
    b554:	   |   clr.b 130(a0)
			break;
    b558:	   |   nop
	}
}
    b55a:	   \-> nop
    b55c:	       rts

0000b55e <shufflePeople>:

void shufflePeople () {
    b55e:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    b562:	             move.l #108634,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    b56a:	             move.l 1a85a <allPeople>,d0
    b570:	/----------- beq.w b646 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    b574:	|     /----- bra.w b636 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    b578:	|  /--|----> movea.l 16(sp),a0
    b57c:	|  |  |      movea.l (a0),a0
    b57e:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    b584:	|  |  |      movea.l 16(sp),a0
    b588:	|  |  |      movea.l (a0),a0
    b58a:	|  |  |      move.l 118(a0),d0
    b58e:	|  |  |      moveq #1,d1
    b590:	|  |  |      and.l d1,d0
    b592:	|  |  |  /-- beq.s b5aa <shufflePeople+0x4c>
    b594:	|  |  |  |   move.l #1148846080,-(sp)
    b59a:	|  |  |  |   move.l 16(sp),-(sp)
    b59e:	|  |  |  |   jsr 16d9a <__addsf3>
    b5a4:	|  |  |  |   addq.l #8,sp
    b5a6:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    b5aa:	|  |  |  \-> movea.l 16(sp),a0
    b5ae:	|  |  |      movea.l (a0),a0
    b5b0:	|  |  |      movea.l 36(a0),a0
    b5b4:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    b5ba:	|  |  |      movea.l 16(sp),a0
    b5be:	|  |  |      movea.l (a0),a0
    b5c0:	|  |  |      movea.l 36(a0),a0
    b5c4:	|  |  |      move.l 118(a0),d0
    b5c8:	|  |  |      moveq #1,d1
    b5ca:	|  |  |      and.l d1,d0
    b5cc:	|  |  |  /-- beq.s b5e4 <shufflePeople+0x86>
    b5ce:	|  |  |  |   move.l #1148846080,-(sp)
    b5d4:	|  |  |  |   move.l 12(sp),-(sp)
    b5d8:	|  |  |  |   jsr 16d9a <__addsf3>
    b5de:	|  |  |  |   addq.l #8,sp
    b5e0:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    b5e4:	|  |  |  \-> move.l 8(sp),-(sp)
    b5e8:	|  |  |      move.l 16(sp),-(sp)
    b5ec:	|  |  |      jsr 17154 <__gtsf2>
    b5f2:	|  |  |      addq.l #8,sp
    b5f4:	|  |  |      tst.l d0
    b5f6:	|  |  |  /-- ble.s b628 <shufflePeople+0xca>
			A = (*thisReference);
    b5f8:	|  |  |  |   movea.l 16(sp),a0
    b5fc:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    b600:	|  |  |  |   movea.l 16(sp),a0
    b604:	|  |  |  |   movea.l (a0),a0
    b606:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    b60a:	|  |  |  |   movea.l (sp),a0
    b60c:	|  |  |  |   move.l 36(a0),d0
    b610:	|  |  |  |   movea.l 4(sp),a0
    b614:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    b618:	|  |  |  |   movea.l (sp),a0
    b61a:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    b620:	|  |  |  |   movea.l 16(sp),a0
    b624:	|  |  |  |   move.l (sp),(a0)
    b626:	|  |  +--|-- bra.s b636 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    b628:	|  |  |  \-> movea.l 16(sp),a0
    b62c:	|  |  |      move.l (a0),d0
    b62e:	|  |  |      moveq #36,d1
    b630:	|  |  |      add.l d0,d1
    b632:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    b636:	|  |  \----> movea.l 16(sp),a0
    b63a:	|  |         movea.l (a0),a0
    b63c:	|  |         move.l 36(a0),d0
    b640:	|  \-------- bne.w b578 <shufflePeople+0x1a>
    b644:	|        /-- bra.s b648 <shufflePeople+0xea>
	if (!allPeople) return;
    b646:	\--------|-> nop
		}
	}
}
    b648:	         \-> lea 20(sp),sp
    b64c:	             rts

0000b64e <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    b64e:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    b650:	       tst.l 8(sp)
    b654:	   /-- bgt.s b65a <setCharacterWalkSpeed+0xc>
    b656:	   |   clr.w d0
    b658:	/--|-- bra.s b678 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b65a:	|  \-> move.l 12(sp),-(sp)
    b65e:	|      jsr a0a6 <findPerson>
    b664:	|      addq.l #4,sp
    b666:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    b668:	|  /-- bne.s b66e <setCharacterWalkSpeed+0x20>
    b66a:	|  |   clr.w d0
    b66c:	+--|-- bra.s b678 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    b66e:	|  \-> movea.l (sp),a0
    b670:	|      move.l 8(sp),28(a0)
	return TRUE;
    b676:	|      moveq #1,d0
}
    b678:	\----> addq.l #4,sp
    b67a:	       rts

0000b67c <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    b67c:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    b67e:	       move.l 8(sp),-(sp)
    b682:	       jsr a0a6 <findPerson>
    b688:	       addq.l #4,sp
    b68a:	       move.l d0,(sp)
    if (thisPerson) {
    b68c:	/----- beq.s b6ac <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    b68e:	|      movea.l (sp),a0
    b690:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    b696:	|      moveq #2,d0
    b698:	|      and.l 12(sp),d0
    b69c:	|  /-- beq.s b6a8 <setPersonExtra+0x2c>
    b69e:	|  |   movea.l (sp),a0
    b6a0:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    b6a8:	|  \-> moveq #1,d0
    b6aa:	|  /-- bra.s b6ae <setPersonExtra+0x32>
    }
    return FALSE;
    b6ac:	\--|-> clr.w d0
}
    b6ae:	   \-> addq.l #4,sp
    b6b0:	       rts

0000b6b2 <setScale>:


void setScale (short int h, short int d) {
    b6b2:	subq.l #4,sp
    b6b4:	move.l 8(sp),d1
    b6b8:	move.l 12(sp),d0
    b6bc:	move.w d1,d1
    b6be:	move.w d1,2(sp)
    b6c2:	move.w d0,d0
    b6c4:	move.w d0,(sp)
	scaleHorizon = h;
    b6c6:	move.w 2(sp),1a136 <scaleHorizon>
	scaleDivide = d;
    b6ce:	move.w (sp),1a138 <scaleDivide>
}
    b6d4:	nop
    b6d6:	addq.l #4,sp
    b6d8:	rts

0000b6da <setShown>:

void setShown (BOOL h, int ob) {
    b6da:	    subq.l #8,sp
    b6dc:	    move.l 12(sp),d0
    b6e0:	    move.w d0,d0
    b6e2:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    b6e6:	    move.l 16(sp),-(sp)
    b6ea:	    jsr a0a6 <findPerson>
    b6f0:	    addq.l #4,sp
    b6f2:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    b6f6:	/-- beq.s b702 <setShown+0x28>
    b6f8:	|   movea.l 4(sp),a0
    b6fc:	|   move.w 2(sp),104(a0)
}
    b702:	\-> nop
    b704:	    addq.l #8,sp
    b706:	    rts

0000b708 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    b708:	       subq.l #8,sp
    b70a:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    b70c:	       movea.l 16(sp),a0
    b710:	       move.l 92(a0),d0
    b714:	       move.l d0,d1
    b716:	       addi.l #360,d1
    b71c:	       movea.l 16(sp),a0
    b720:	       move.l 96(a0),d0
    b724:	       move.l d1,d2
    b726:	       sub.l d0,d2
    b728:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    b72c:	       movea.l 16(sp),a0
    b730:	       move.l 122(a0),d0
    b734:	   /-- beq.s b740 <spinStep+0x38>
    b736:	   |   movea.l 16(sp),a0
    b73a:	   |   move.l 122(a0),d0
    b73e:	/--|-- bra.s b75a <spinStep+0x52>
    b740:	|  \-> movea.l 16(sp),a0
    b744:	|      movea.l 80(a0),a0
    b748:	|      move.l 4(a0),d0
    b74c:	|      move.l d0,-(sp)
    b74e:	|      pea 168 <decodeFilename+0x50>
    b752:	|      jsr 175e8 <__divsi3>
    b758:	|      addq.l #8,sp
    b75a:	\----> move.l d0,4(sp)
	while (diff > 180) {
    b75e:	   /-- bra.s b768 <spinStep+0x60>
		diff -= 360;
    b760:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    b768:	|  \-> cmpi.l #180,8(sp)
    b770:	\----- bgt.s b760 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    b772:	       move.l 8(sp),d0
    b776:	       cmp.l 4(sp),d0
    b77a:	   /-- blt.s b798 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    b77c:	   |   movea.l 16(sp),a0
    b780:	   |   move.l 92(a0),d0
    b784:	   |   sub.l 4(sp),d0
    b788:	   |   move.l d0,-(sp)
    b78a:	   |   move.l 20(sp),-(sp)
    b78e:	   |   jsr b878 <turnMeAngle>
    b794:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    b796:	/--|-- bra.s b7de <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    b798:	|  \-> move.l 4(sp),d0
    b79c:	|      neg.l d0
    b79e:	|      cmp.l 8(sp),d0
    b7a2:	|  /-- blt.s b7c0 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    b7a4:	|  |   movea.l 16(sp),a0
    b7a8:	|  |   move.l 92(a0),d0
    b7ac:	|  |   add.l 4(sp),d0
    b7b0:	|  |   move.l d0,-(sp)
    b7b2:	|  |   move.l 20(sp),-(sp)
    b7b6:	|  |   jsr b878 <turnMeAngle>
    b7bc:	|  |   addq.l #8,sp
}
    b7be:	+--|-- bra.s b7de <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    b7c0:	|  \-> movea.l 16(sp),a0
    b7c4:	|      move.l 96(a0),d0
    b7c8:	|      move.l d0,-(sp)
    b7ca:	|      move.l 20(sp),-(sp)
    b7ce:	|      jsr b878 <turnMeAngle>
    b7d4:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    b7d6:	|      movea.l 16(sp),a0
    b7da:	|      clr.w 66(a0)
}
    b7de:	\----> nop
    b7e0:	       move.l (sp)+,d2
    b7e2:	       addq.l #8,sp
    b7e4:	       rts

0000b7e6 <stopPerson>:


BOOL stopPerson (int o) {
    b7e6:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    b7e8:	       move.l 8(sp),-(sp)
    b7ec:	       jsr a0a6 <findPerson>
    b7f2:	       addq.l #4,sp
    b7f4:	       move.l d0,(sp)
    if (moveMe)
    b7f6:	/----- beq.s b834 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    b7f8:	|      movea.l (sp),a0
    b7fa:	|      move.l 68(a0),d0
    b7fe:	+----- beq.s b834 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    b800:	|      movea.l (sp),a0
    b802:	|      move.l 68(a0),d0
    b806:	|      move.l d0,-(sp)
    b808:	|      jsr 3fa6 <abortFunction>
    b80e:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    b810:	|      movea.l (sp),a0
    b812:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    b816:	|      movea.l (sp),a0
    b818:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    b81c:	|      movea.l (sp),a0
    b81e:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    b822:	|      clr.l -(sp)
    b824:	|      move.l 4(sp),-(sp)
    b828:	|      jsr 79f0 <setFrames>
    b82e:	|      addq.l #8,sp
            return TRUE;
    b830:	|      moveq #1,d0
    b832:	|  /-- bra.s b836 <stopPerson+0x50>
        }
    return FALSE;
    b834:	\--|-> clr.w d0
}
    b836:	   \-> addq.l #4,sp
    b838:	       rts

0000b83a <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    b83a:	       subq.l #8,sp
	int total = 0;
    b83c:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    b840:	       clr.l (sp)
    b842:	   /-- bra.s b864 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    b844:	/--|-> movea.l 12(sp),a0
    b848:	|  |   movea.l 4(a0),a0
    b84c:	|  |   move.l (sp),d1
    b84e:	|  |   move.l d1,d0
    b850:	|  |   add.l d0,d0
    b852:	|  |   add.l d1,d0
    b854:	|  |   add.l d0,d0
    b856:	|  |   add.l d0,d0
    b858:	|  |   adda.l d0,a0
    b85a:	|  |   move.l 4(a0),d0
    b85e:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    b862:	|  |   addq.l #1,(sp)
    b864:	|  \-> movea.l 12(sp),a0
    b868:	|      move.l 8(a0),d0
    b86c:	|      cmp.l (sp),d0
    b86e:	\----- bgt.s b844 <timeForAnim+0xa>
	}
	return total;
    b870:	       move.l 4(sp),d0
}
    b874:	       addq.l #8,sp
    b876:	       rts

0000b878 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    b878:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    b87a:	       movea.l 8(sp),a0
    b87e:	       movea.l 80(a0),a0
    b882:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    b886:	       movea.l 8(sp),a0
    b88a:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    b890:	       move.l (sp),-(sp)
    b892:	       pea b4 <_start+0xb4>
    b896:	       jsr 175e8 <__divsi3>
    b89c:	       addq.l #8,sp
    b89e:	       move.l d0,d1
    b8a0:	       addi.l #180,d1
    b8a6:	       movea.l 8(sp),a0
    b8aa:	       move.l 100(a0),d0
    b8ae:	       add.l d1,d0
    b8b0:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    b8b4:	   /-- bra.s b8be <turnMeAngle+0x46>
    b8b6:	/--|-> addi.l #-360,12(sp)
    b8be:	|  \-> cmpi.l #359,12(sp)
    b8c6:	\----- bgt.s b8b6 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    b8c8:	       move.l (sp),-(sp)
    b8ca:	       move.l 16(sp),-(sp)
    b8ce:	       jsr 1756a <__mulsi3>
    b8d4:	       addq.l #8,sp
    b8d6:	       pea 168 <decodeFilename+0x50>
    b8da:	       move.l d0,-(sp)
    b8dc:	       jsr 175e8 <__divsi3>
    b8e2:	       addq.l #8,sp
    b8e4:	       movea.l 8(sp),a0
    b8e8:	       move.l d0,106(a0)
}
    b8ec:	       nop
    b8ee:	       addq.l #4,sp
    b8f0:	       rts

0000b8f2 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    b8f2:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    b8f4:	          move.l 8(sp),-(sp)
    b8f8:	          jsr a0a6 <findPerson>
    b8fe:	          addq.l #4,sp
    b900:	          move.l d0,(sp)
    if (thisPerson) {
    b902:	/-------- beq.s b962 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    b904:	|         movea.l (sp),a0
    b906:	|         move.l 68(a0),d0
    b90a:	|     /-- beq.s b91c <turnPersonToFace+0x2a>
    b90c:	|     |   movea.l (sp),a0
    b90e:	|     |   move.l 68(a0),d0
    b912:	|     |   move.l d0,-(sp)
    b914:	|     |   jsr 3fa6 <abortFunction>
    b91a:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    b91c:	|     \-> movea.l (sp),a0
    b91e:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    b922:	|         movea.l (sp),a0
    b924:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    b928:	|         movea.l (sp),a0
    b92a:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    b92e:	|         move.l 12(sp),-(sp)
    b932:	|         move.l 4(sp),-(sp)
    b936:	|         jsr b878 <turnMeAngle>
    b93c:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    b93e:	|         movea.l 1a7fe <speech>,a0
    b944:	|         move.l (a0),d0
    b946:	|         cmp.l (sp),d0
    b948:	|  /----- bne.s b94e <turnPersonToFace+0x5c>
    b94a:	|  |      moveq #2,d0
    b94c:	|  |  /-- bra.s b950 <turnPersonToFace+0x5e>
    b94e:	|  \--|-> moveq #0,d0
    b950:	|     \-> move.l d0,-(sp)
    b952:	|         move.l 4(sp),-(sp)
    b956:	|         jsr 79f0 <setFrames>
    b95c:	|         addq.l #8,sp
        return TRUE;
    b95e:	|         moveq #1,d0
    b960:	|     /-- bra.s b964 <turnPersonToFace+0x72>
    }
    return FALSE;
    b962:	\-----|-> clr.w d0
}
    b964:	      \-> addq.l #4,sp
    b966:	          rts

0000b968 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    b968:	                lea -20(sp),sp
    b96c:	                move.l d3,-(sp)
    b96e:	                move.l d2,-(sp)
    b970:	                move.l 36(sp),d0
    b974:	                move.w d0,d0
    b976:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    b97a:	                cmpi.w #-1,10(sp)
    b980:	/-------------- bne.s b988 <walkMe+0x20>
    b982:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b988:	>-------------> movea.l 32(sp),a0
    b98c:	|               move.l 48(a0),d0
    b990:	|               move.l d0,-(sp)
    b992:	|               jsr 16fe8 <__floatsisf>
    b998:	|               addq.l #4,sp
    b99a:	|               move.l d0,d1
    b99c:	|               movea.l 32(sp),a0
    b9a0:	|               move.l (a0),d0
    b9a2:	|               move.l d0,-(sp)
    b9a4:	|               move.l d1,-(sp)
    b9a6:	|               jsr 172dc <__subsf3>
    b9ac:	|               addq.l #8,sp
    b9ae:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    b9b2:	|               movea.l 32(sp),a0
    b9b6:	|               move.l 52(a0),d0
    b9ba:	|               move.l d0,-(sp)
    b9bc:	|               jsr 16fe8 <__floatsisf>
    b9c2:	|               addq.l #4,sp
    b9c4:	|               move.l d0,d1
    b9c6:	|               movea.l 32(sp),a0
    b9ca:	|               move.l 4(a0),d0
    b9ce:	|               move.l d0,-(sp)
    b9d0:	|               move.l d1,-(sp)
    b9d2:	|               jsr 172dc <__subsf3>
    b9d8:	|               addq.l #8,sp
    b9da:	|               move.l d0,-(sp)
    b9dc:	|               move.l d0,-(sp)
    b9de:	|               jsr 16d9a <__addsf3>
    b9e4:	|               addq.l #8,sp
    b9e6:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    b9ea:	|               movea.l 32(sp),a0
    b9ee:	|               move.l 32(a0),d2
    b9f2:	|               movea.l 32(sp),a0
    b9f6:	|               move.l 28(a0),d0
    b9fa:	|               move.l d0,-(sp)
    b9fc:	|               jsr 16fe8 <__floatsisf>
    ba02:	|               addq.l #4,sp
    ba04:	|               move.l d0,-(sp)
    ba06:	|               move.l d2,-(sp)
    ba08:	|               jsr 1709a <__mulsf3>
    ba0e:	|               addq.l #8,sp
    ba10:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    ba14:	|               move.l 24(sp),-(sp)
    ba18:	|               jsr 16f00 <__extendsfdf2>
    ba1e:	|               addq.l #4,sp
    ba20:	|               move.l #-1717986918,-(sp)
    ba26:	|               move.l #1070176665,-(sp)
    ba2c:	|               move.l d1,-(sp)
    ba2e:	|               move.l d0,-(sp)
    ba30:	|               jsr 171c0 <__ltdf2>
    ba36:	|               lea 16(sp),sp
    ba3a:	|               tst.l d0
    ba3c:	|           /-- bge.s ba46 <walkMe+0xde>
    ba3e:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    ba46:	|           \-> move.l 20(sp),-(sp)
    ba4a:	|               jsr 16f80 <__fixsfsi>
    ba50:	|               addq.l #4,sp
    ba52:	|               move.l d0,-(sp)
    ba54:	|               jsr 8c96 <TF_abs>
    ba5a:	|               addq.l #4,sp
    ba5c:	|               move.l d0,d2
    ba5e:	|               move.l 16(sp),-(sp)
    ba62:	|               jsr 16f80 <__fixsfsi>
    ba68:	|               addq.l #4,sp
    ba6a:	|               move.l d0,-(sp)
    ba6c:	|               jsr 8c96 <TF_abs>
    ba72:	|               addq.l #4,sp
    ba74:	|               cmp.l d2,d0
    ba76:	|        /----- bgt.s ba9a <walkMe+0x132>
    ba78:	|        |      move.l 20(sp),-(sp)
    ba7c:	|        |      jsr 16f80 <__fixsfsi>
    ba82:	|        |      addq.l #4,sp
    ba84:	|        |      move.l d0,-(sp)
    ba86:	|        |      jsr 8c96 <TF_abs>
    ba8c:	|        |      addq.l #4,sp
    ba8e:	|        |      move.l d0,-(sp)
    ba90:	|        |      jsr 16fe8 <__floatsisf>
    ba96:	|        |      addq.l #4,sp
    ba98:	|        |  /-- bra.s baba <walkMe+0x152>
    ba9a:	|        \--|-> move.l 16(sp),-(sp)
    ba9e:	|           |   jsr 16f80 <__fixsfsi>
    baa4:	|           |   addq.l #4,sp
    baa6:	|           |   move.l d0,-(sp)
    baa8:	|           |   jsr 8c96 <TF_abs>
    baae:	|           |   addq.l #4,sp
    bab0:	|           |   move.l d0,-(sp)
    bab2:	|           |   jsr 16fe8 <__floatsisf>
    bab8:	|           |   addq.l #4,sp
    baba:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    babe:	|               move.l 12(sp),-(sp)
    bac2:	|               jsr 16f80 <__fixsfsi>
    bac8:	|               addq.l #4,sp
    baca:	|               move.l d0,-(sp)
    bacc:	|               jsr 8c96 <TF_abs>
    bad2:	|               addq.l #4,sp
    bad4:	|               move.l d0,-(sp)
    bad6:	|               jsr 16fe8 <__floatsisf>
    badc:	|               addq.l #4,sp
    bade:	|               move.l d0,-(sp)
    bae0:	|               move.l 28(sp),-(sp)
    bae4:	|               jsr 1720e <__ltsf2>
    baea:	|               addq.l #8,sp
    baec:	|               tst.l d0
    baee:	|        /----- bge.w bba0 <walkMe+0x238>
			if (thisPerson->spinning) {
    baf2:	|        |      movea.l 32(sp),a0
    baf6:	|        |      move.w 66(a0),d0
    bafa:	|        |  /-- beq.s bb18 <walkMe+0x1b0>
				spinStep(thisPerson);
    bafc:	|        |  |   move.l 32(sp),-(sp)
    bb00:	|        |  |   jsr b708 <spinStep>
    bb06:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    bb08:	|        |  |   pea 1 <_start+0x1>
    bb0c:	|        |  |   move.l 36(sp),-(sp)
    bb10:	|        |  |   jsr 79f0 <setFrames>
    bb16:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    bb18:	|        |  \-> move.l 24(sp),-(sp)
    bb1c:	|        |      move.l 16(sp),-(sp)
    bb20:	|        |      jsr 16e94 <__divsf3>
    bb26:	|        |      addq.l #8,sp
    bb28:	|        |      move.l d0,24(sp)
			if (move)
    bb2c:	|        |      tst.w 10(sp)
    bb30:	|        |  /-- beq.s bb9a <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    bb32:	|        |  |   movea.l 32(sp),a0
    bb36:	|        |  |   move.l 4(a0),d2
    bb3a:	|        |  |   move.l 24(sp),d0
    bb3e:	|        |  |   move.l d0,-(sp)
    bb40:	|        |  |   move.l d0,-(sp)
    bb42:	|        |  |   jsr 16d9a <__addsf3>
    bb48:	|        |  |   addq.l #8,sp
    bb4a:	|        |  |   move.l d0,-(sp)
    bb4c:	|        |  |   move.l 20(sp),-(sp)
    bb50:	|        |  |   jsr 16e94 <__divsf3>
    bb56:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bb58:	|        |  |   move.l d0,-(sp)
    bb5a:	|        |  |   move.l d2,-(sp)
    bb5c:	|        |  |   jsr 16d9a <__addsf3>
    bb62:	|        |  |   addq.l #8,sp
    bb64:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    bb66:	|        |  |   movea.l 32(sp),a0
    bb6a:	|        |  |   move.l (a0),d3
    bb6c:	|        |  |   move.l 24(sp),-(sp)
    bb70:	|        |  |   move.l 24(sp),-(sp)
    bb74:	|        |  |   jsr 16e94 <__divsf3>
    bb7a:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bb7c:	|        |  |   move.l d0,-(sp)
    bb7e:	|        |  |   move.l d3,-(sp)
    bb80:	|        |  |   jsr 16d9a <__addsf3>
    bb86:	|        |  |   addq.l #8,sp
    bb88:	|        |  |   move.l d2,-(sp)
    bb8a:	|        |  |   move.l d0,-(sp)
    bb8c:	|        |  |   move.l 40(sp),-(sp)
    bb90:	|        |  |   jsr a7ee <moveAndScale>
    bb96:	|        |  |   lea 12(sp),sp
			return TRUE;
    bb9a:	|        |  \-> moveq #1,d0
    bb9c:	|  /-----|----- bra.w bc4e <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    bba0:	|  |     \----> movea.l 32(sp),a0
    bba4:	|  |            move.l 56(a0),d0
    bba8:	|  |            moveq #-1,d1
    bbaa:	|  |            cmp.l d0,d1
    bbac:	|  |        /-- bne.s bbe4 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    bbae:	|  |        |   movea.l 32(sp),a0
    bbb2:	|  |        |   move.l 110(a0),d0
    bbb6:	|  |        |   moveq #-1,d1
    bbb8:	|  |        |   cmp.l d0,d1
    bbba:	|  |  /-----|-- beq.s bbf8 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    bbbc:	|  |  |     |   movea.l 32(sp),a0
    bbc0:	|  |  |     |   move.l 110(a0),d0
    bbc4:	|  |  |     |   movea.l 32(sp),a0
    bbc8:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    bbcc:	|  |  |     |   movea.l 32(sp),a0
    bbd0:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    bbd6:	|  |  |     |   move.l 32(sp),-(sp)
    bbda:	|  |  |     |   jsr b708 <spinStep>
    bbe0:	|  |  |     |   addq.l #4,sp
			}
			break;
    bbe2:	|  |  +-----|-- bra.s bbf8 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    bbe4:	|  |  |     \-> move.l 32(sp),-(sp)
    bbe8:	|  |  |         jsr 9408 <doBorderStuff>
    bbee:	|  |  |         addq.l #4,sp
    bbf0:	|  |  |         tst.w d0
    bbf2:	|  |  |  /----- beq.s bbfc <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bbf4:	\--|--|--|----- bra.w b988 <walkMe+0x20>
			break;
    bbf8:	   |  \--|----> nop
    bbfa:	   |     |  /-- bra.s bbfe <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    bbfc:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    bbfe:	   |        \-> movea.l 32(sp),a0
    bc02:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    bc06:	   |            clr.l -(sp)
    bc08:	   |            move.l 36(sp),-(sp)
    bc0c:	   |            jsr 79f0 <setFrames>
    bc12:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    bc14:	   |            movea.l 32(sp),a0
    bc18:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    bc1c:	   |            move.l d0,-(sp)
    bc1e:	   |            jsr 16fe8 <__floatsisf>
    bc24:	   |            addq.l #4,sp
    bc26:	   |            move.l d0,d2
				 thisPerson->walkToX,
    bc28:	   |            movea.l 32(sp),a0
    bc2c:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    bc30:	   |            move.l d0,-(sp)
    bc32:	   |            jsr 16fe8 <__floatsisf>
    bc38:	   |            addq.l #4,sp
    bc3a:	   |            move.l d2,-(sp)
    bc3c:	   |            move.l d0,-(sp)
    bc3e:	   |            move.l 40(sp),-(sp)
    bc42:	   |            jsr a7ee <moveAndScale>
    bc48:	   |            lea 12(sp),sp
	return FALSE;
    bc4c:	   |            clr.w d0
}
    bc4e:	   \----------> move.l (sp)+,d2
    bc50:	                move.l (sp)+,d3
    bc52:	                lea 20(sp),sp
    bc56:	                rts

0000bc58 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    bc58:	       subq.l #8,sp
    bc5a:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    bc5c:	   /-- bra.s bc8c <clearStackLib+0x34>
		k = stackLib;
    bc5e:	/--|-> move.l 1a886 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    bc66:	|  |   movea.l 1a886 <stackLib>,a0
    bc6c:	|  |   move.l 4(a0),d0
    bc70:	|  |   move.l d0,1a886 <stackLib>
		FreeVec(k);
    bc76:	|  |   move.l 8(sp),4(sp)
    bc7c:	|  |   move.l 1a7a2 <SysBase>,d0
    bc82:	|  |   movea.l d0,a6
    bc84:	|  |   movea.l 4(sp),a1
    bc88:	|  |   jsr -690(a6)
	while (stackLib) {
    bc8c:	|  \-> move.l 1a886 <stackLib>,d0
    bc92:	\----- bne.s bc5e <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    bc94:	       clr.l 1a882 <stackLibTotal>
}
    bc9a:	       nop
    bc9c:	       movea.l (sp)+,a6
    bc9e:	       addq.l #8,sp
    bca0:	       rts

0000bca2 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    bca2:	          lea -128(sp),sp
    bca6:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    bcaa:	      /-- bra.s bcbc <loadGame+0x1a>
    bcac:	   /--|-> move.l 1a73a <allRunningFunctions>,d0
    bcb2:	   |  |   move.l d0,-(sp)
    bcb4:	   |  |   jsr 4fae <finishFunction>
    bcba:	   |  |   addq.l #4,sp
    bcbc:	   |  \-> move.l 1a73a <allRunningFunctions>,d0
    bcc2:	   \----- bne.s bcac <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    bcc4:	          pea 1a88a <ssgVersion>
    bcca:	          pea 18bda <PutChar+0x155a>
    bcd0:	          pea 41 <_start+0x41>
    bcd4:	          pea 53 <_start+0x53>
    bcd8:	          move.l 160(sp),-(sp)
    bcdc:	          jsr 5d64 <openAndVerify>
    bce2:	          lea 20(sp),sp
    bce6:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    bcea:	      /-- bne.s bcf2 <loadGame+0x50>
    bcec:	      |   clr.w d0
    bcee:	/-----|-- bra.w bf98 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    bcf2:	|     \-> move.l 112(sp),108(sp)
    bcf8:	|         lea 140(sp),a0
    bcfc:	|         lea -126(a0),a0
    bd00:	|         move.l a0,120(sp)
    bd04:	|         moveq #8,d0
    bd06:	|         move.l d0,116(sp)
    bd0a:	|         move.l 1a7aa <DOSBase>,d0
    bd10:	|         movea.l d0,a6
    bd12:	|         move.l 108(sp),d1
    bd16:	|         move.l 120(sp),d2
    bd1a:	|         move.l 116(sp),d3
    bd1e:	|         jsr -42(a6)
    bd22:	|         move.l d0,132(sp)
    bd26:	|         move.l 132(sp),d0
    bd2a:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    bd2e:	|         moveq #8,d0
    bd30:	|         cmp.l 128(sp),d0
    bd34:	|     /-- beq.s bd44 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    bd36:	|     |   pea 18bfb <PutChar+0x157b>
    bd3c:	|     |   jsr 16bac <KPrintF>
    bd42:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    bd44:	|     \-> move.l 14(sp),d1
    bd48:	|         move.l 1a744 <fileTime>,d0
    bd4e:	|         cmp.l d1,d0
    bd50:	|     /-- bne.s bd60 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    bd52:	|     |   move.l 18(sp),d1
    bd56:	|     |   move.l 1a748 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    bd5c:	|     |   cmp.l d1,d0
    bd5e:	|  /--|-- beq.s bd80 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    bd60:	|  |  \-> move.l 144(sp),-(sp)
    bd64:	|  |      pea 18c17 <PutChar+0x1597>
    bd6a:	|  |      pea 18cde <PutChar+0x165e>
    bd70:	|  |      jsr 16bac <KPrintF>
    bd76:	|  |      lea 12(sp),sp
		return FALSE; 
    bd7a:	|  |      clr.w d0
    bd7c:	+--|----- bra.w bf98 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    bd80:	|  \----> move.l 112(sp),124(sp)
    bd86:	|         move.l 1a7aa <DOSBase>,d0
    bd8c:	|         movea.l d0,a6
    bd8e:	|         move.l 124(sp),d1
    bd92:	|         jsr -306(a6)
    bd96:	|         move.l d0,136(sp)
    bd9a:	|         move.l 136(sp),d0
    bd9e:	|         move.l d0,d0
    bda0:	|         move.w d0,1a000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    bda6:	|         move.l 112(sp),100(sp)
    bdac:	|         move.l 1a7aa <DOSBase>,d0
    bdb2:	|         movea.l d0,a6
    bdb4:	|         move.l 100(sp),d1
    bdb8:	|         jsr -306(a6)
    bdbc:	|         move.l d0,96(sp)
    bdc0:	|         move.l 96(sp),d0
    bdc4:	|         move.l d0,d0
    bdc6:	|         move.w d0,1a742 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    bdcc:	|         move.l 112(sp),92(sp)
    bdd2:	|         move.l 1a7aa <DOSBase>,d0
    bdd8:	|         movea.l d0,a6
    bdda:	|         move.l 92(sp),d1
    bdde:	|         jsr -306(a6)
    bde2:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    bde6:	|         move.l 112(sp),84(sp)
    bdec:	|         move.l 1a7aa <DOSBase>,d0
    bdf2:	|         movea.l d0,a6
    bdf4:	|         move.l 84(sp),d1
    bdf8:	|         jsr -306(a6)
    bdfc:	|         move.l d0,80(sp)
    be00:	|         move.l 80(sp),d0
    be04:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    be08:	|     /-- beq.s be3c <loadGame+0x19a>
		fontNum = get2bytes (fp);
    be0a:	|     |   move.l 112(sp),-(sp)
    be0e:	|     |   jsr 6bc <get2bytes>
    be14:	|     |   addq.l #4,sp
    be16:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    be1a:	|     |   move.l 112(sp),-(sp)
    be1e:	|     |   jsr 6bc <get2bytes>
    be24:	|     |   addq.l #4,sp
    be26:	|     |   move.l d0,1a8f2 <fontHeight>
		charOrder = readString(fp);		
    be2c:	|     |   move.l 112(sp),-(sp)
    be30:	|     |   jsr b02 <readString>
    be36:	|     |   addq.l #4,sp
    be38:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    be3c:	|     \-> move.l 104(sp),70(sp)
    be42:	|         move.l 1a7a2 <SysBase>,d0
    be48:	|         movea.l d0,a6
    be4a:	|         movea.l 70(sp),a1
    be4e:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    be52:	|         move.l 112(sp),-(sp)
    be56:	|         jsr 854 <getSigned>
    be5c:	|         addq.l #4,sp
    be5e:	|         move.w d0,1a6a8 <fontSpace>

	killAllPeople ();
    be64:	|         jsr a490 <killAllPeople>
	killAllRegions ();
    be6a:	|         jsr 153fc <killAllRegions>

	int camerX = get2bytes (fp);
    be70:	|         move.l 112(sp),-(sp)
    be74:	|         jsr 6bc <get2bytes>
    be7a:	|         addq.l #4,sp
    be7c:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    be80:	|         move.l 112(sp),-(sp)
    be84:	|         jsr 6bc <get2bytes>
    be8a:	|         addq.l #4,sp
    be8c:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    be90:	|         move.l 112(sp),-(sp)
    be94:	|         jsr 7d8 <getFloat>
    be9a:	|         addq.l #4,sp
    be9c:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    bea0:	|         move.l 112(sp),54(sp)
    bea6:	|         move.l 1a7aa <DOSBase>,d0
    beac:	|         movea.l d0,a6
    beae:	|         move.l 54(sp),d1
    beb2:	|         jsr -306(a6)
    beb6:	|         move.l d0,50(sp)
    beba:	|         move.l 50(sp),d0
    bebe:	|         move.l d0,d0
    bec0:	|         move.b d0,1a11a <brightnessLevel>

	loadHandlers (fp);
    bec6:	|         move.l 112(sp),-(sp)
    beca:	|         jsr 5cc4 <loadHandlers>
    bed0:	|         addq.l #4,sp
	loadRegions (fp);
    bed2:	|         move.l 112(sp),-(sp)
    bed6:	|         jsr 15458 <loadRegions>
    bedc:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    bede:	|         moveq #12,d0
    bee0:	|         move.l d0,46(sp)
    bee4:	|         clr.l 42(sp)
    bee8:	|         move.l 1a7a2 <SysBase>,d0
    beee:	|         movea.l d0,a6
    bef0:	|         move.l 46(sp),d0
    bef4:	|         move.l 42(sp),d1
    bef8:	|         jsr -684(a6)
    befc:	|         move.l d0,38(sp)
    bf00:	|         move.l 38(sp),d0
    bf04:	|         move.l d0,1a6aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    bf0a:	|         move.l 1a6aa <mouseCursorAnim>,d0
    bf10:	|     /-- bne.s bf24 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    bf12:	|     |   pea 18ce8 <PutChar+0x1668>
    bf18:	|     |   jsr 16bac <KPrintF>
    bf1e:	|     |   addq.l #4,sp
		return FALSE;
    bf20:	|     |   clr.w d0
    bf22:	+-----|-- bra.s bf98 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    bf24:	|     \-> jsr ce1a <nosnapshot>
	if (FGetC (fp)) {
    bf2a:	|         move.l 112(sp),34(sp)
    bf30:	|         move.l 1a7aa <DOSBase>,d0
    bf36:	|         movea.l d0,a6
    bf38:	|         move.l 34(sp),d1
    bf3c:	|         jsr -306(a6)
    bf40:	|         move.l d0,30(sp)
    bf44:	|         move.l 30(sp),d0
    bf48:	|     /-- beq.s bf5e <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    bf4a:	|     |   move.l 112(sp),-(sp)
    bf4e:	|     |   jsr ce9a <restoreSnapshot>
    bf54:	|     |   addq.l #4,sp
    bf56:	|     |   tst.w d0
    bf58:	|     +-- bne.s bf5e <loadGame+0x2bc>
    bf5a:	|     |   clr.w d0
    bf5c:	+-----|-- bra.s bf98 <loadGame+0x2f6>
	}

	Close (fp);
    bf5e:	|     \-> move.l 112(sp),26(sp)
    bf64:	|         move.l 1a7aa <DOSBase>,d0
    bf6a:	|         movea.l d0,a6
    bf6c:	|         move.l 26(sp),d1
    bf70:	|         jsr -36(a6)
    bf74:	|         move.l d0,22(sp)
	clearStackLib ();
    bf78:	|         jsr bc58 <clearStackLib>

	cameraX = camerX;
    bf7e:	|         move.l 66(sp),1a8b4 <cameraX>
	cameraY = camerY;
    bf86:	|         move.l 62(sp),1a8b8 <cameraY>
	cameraZoom = camerZ;
    bf8e:	|         move.l 58(sp),1a142 <cameraZoom>

	return TRUE;
    bf96:	|         moveq #1,d0
}
    bf98:	\-------> movem.l (sp)+,d2-d3/a6
    bf9c:	          lea 128(sp),sp
    bfa0:	          rts

0000bfa2 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    bfa2:	   /-> lea -64(sp),sp
    bfa6:	   |   move.l a6,-(sp)
    bfa8:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    bfaa:	   |   movea.l 76(sp),a0
    bfae:	   |   move.l (a0),d0
    bfb0:	   |   move.l 80(sp),-(sp)
    bfb4:	   |   move.l d0,-(sp)
    bfb6:	   |   jsr 8d0 <put2bytes>
    bfbc:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    bfbe:	   |   movea.l 76(sp),a0
    bfc2:	   |   move.l 40(a0),d0
    bfc6:	/--|-- beq.s c002 <saveFunction+0x60>
		FPutC (fp, 1);
    bfc8:	|  |   move.l 80(sp),52(sp)
    bfce:	|  |   moveq #1,d0
    bfd0:	|  |   move.l d0,48(sp)
    bfd4:	|  |   move.l 1a7aa <DOSBase>,d0
    bfda:	|  |   movea.l d0,a6
    bfdc:	|  |   move.l 52(sp),d1
    bfe0:	|  |   move.l 48(sp),d2
    bfe4:	|  |   jsr -312(a6)
    bfe8:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    bfec:	|  |   movea.l 76(sp),a0
    bff0:	|  |   move.l 40(a0),d0
    bff4:	|  |   move.l 80(sp),-(sp)
    bff8:	|  |   move.l d0,-(sp)
    bffa:	|  \-- jsr bfa2 <saveFunction>(pc)
    bffe:	|      addq.l #8,sp
    c000:	|  /-- bra.s c024 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c002:	\--|-> move.l 80(sp),64(sp)
    c008:	   |   clr.l 60(sp)
    c00c:	   |   move.l 1a7aa <DOSBase>,d0
    c012:	   |   movea.l d0,a6
    c014:	   |   move.l 64(sp),d1
    c018:	   |   move.l 60(sp),d2
    c01c:	   |   jsr -312(a6)
    c020:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c024:	   \-> movea.l 76(sp),a0
    c028:	       move.l 12(a0),d0
    c02c:	       move.l 80(sp),-(sp)
    c030:	       move.l d0,-(sp)
    c032:	       jsr 958 <put4bytes>
    c038:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c03a:	       movea.l 76(sp),a0
    c03e:	       move.l 36(a0),d0
    c042:	       move.l 80(sp),-(sp)
    c046:	       move.l d0,-(sp)
    c048:	       jsr 8d0 <put2bytes>
    c04e:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c050:	       move.l 80(sp),40(sp)
    c056:	       movea.l 76(sp),a0
    c05a:	       move.w 54(a0),d0
    c05e:	       movea.w d0,a0
    c060:	       move.l a0,36(sp)
    c064:	       move.l 1a7aa <DOSBase>,d0
    c06a:	       movea.l d0,a6
    c06c:	       move.l 40(sp),d1
    c070:	       move.l 36(sp),d2
    c074:	       jsr -312(a6)
    c078:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c07c:	       move.l 80(sp),28(sp)
    c082:	       movea.l 76(sp),a0
    c086:	       move.w 48(a0),d0
    c08a:	       movea.w d0,a0
    c08c:	       move.l a0,24(sp)
    c090:	       move.l 1a7aa <DOSBase>,d0
    c096:	       movea.l d0,a6
    c098:	       move.l 28(sp),d1
    c09c:	       move.l 24(sp),d2
    c0a0:	       jsr -312(a6)
    c0a4:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c0a8:	       move.l 80(sp),16(sp)
    c0ae:	       movea.l 76(sp),a0
    c0b2:	       move.w 50(a0),d0
    c0b6:	       movea.w d0,a0
    c0b8:	       move.l a0,12(sp)
    c0bc:	       move.l 1a7aa <DOSBase>,d0
    c0c2:	       movea.l d0,a6
    c0c4:	       move.l 16(sp),d1
    c0c8:	       move.l 12(sp),d2
    c0cc:	       jsr -312(a6)
    c0d0:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c0d4:	       moveq #28,d0
    c0d6:	       add.l 76(sp),d0
    c0da:	       move.l 80(sp),-(sp)
    c0de:	       move.l d0,-(sp)
    c0e0:	       jsr c85e <saveVariable>
    c0e6:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c0e8:	       movea.l 76(sp),a0
    c0ec:	       move.b 56(a0),d0
    c0f0:	   /-- beq.s c100 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c0f2:	   |   pea 18d09 <PutChar+0x1689>
    c0f8:	   |   jsr 16bac <KPrintF>
    c0fe:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c100:	   \-> movea.l 76(sp),a0
    c104:	       move.l 24(a0),d0
    c108:	       move.l 80(sp),-(sp)
    c10c:	       move.l d0,-(sp)
    c10e:	       jsr c6d2 <saveStack>
    c114:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c116:	       clr.l 68(sp)
    c11a:	   /-- bra.s c13e <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c11c:	/--|-> movea.l 76(sp),a0
    c120:	|  |   move.l 20(a0),d1
    c124:	|  |   move.l 68(sp),d0
    c128:	|  |   lsl.l #3,d0
    c12a:	|  |   add.l d1,d0
    c12c:	|  |   move.l 80(sp),-(sp)
    c130:	|  |   move.l d0,-(sp)
    c132:	|  |   jsr c85e <saveVariable>
    c138:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c13a:	|  |   addq.l #1,68(sp)
    c13e:	|  \-> movea.l 76(sp),a0
    c142:	|      move.l 8(a0),d0
    c146:	|      cmp.l 68(sp),d0
    c14a:	\----- bgt.s c11c <saveFunction+0x17a>
	}
}
    c14c:	       nop
    c14e:	       nop
    c150:	       move.l (sp)+,d2
    c152:	       movea.l (sp)+,a6
    c154:	       lea 64(sp),sp
    c158:	       rts

0000c15a <saveGame>:

BOOL saveGame (char * fname) {
    c15a:	          lea -272(sp),sp
    c15e:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c162:	          move.l 288(sp),268(sp)
    c168:	          move.l #1006,264(sp)
    c170:	          move.l 1a7aa <DOSBase>,d0
    c176:	          movea.l d0,a6
    c178:	          move.l 268(sp),d1
    c17c:	          move.l 264(sp),d2
    c180:	          jsr -30(a6)
    c184:	          move.l d0,260(sp)
    c188:	          move.l 260(sp),d0
    c18c:	          move.l d0,256(sp)
	if (fp == NULL) {
    c190:	      /-- bne.s c1a6 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c192:	      |   pea 18d2b <PutChar+0x16ab>
    c198:	      |   jsr 16bac <KPrintF>
    c19e:	      |   addq.l #4,sp
		return FALSE;
    c1a0:	      |   clr.w d0
    c1a2:	/-----|-- bra.w c6c8 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    c1a6:	|     \-> move.l 256(sp),252(sp)
    c1ac:	|         move.l #101704,248(sp)
    c1b4:	|         moveq #6,d0
    c1b6:	|         move.l d0,244(sp)
    c1ba:	|         move.l 1a7aa <DOSBase>,d0
    c1c0:	|         movea.l d0,a6
    c1c2:	|         move.l 252(sp),d1
    c1c6:	|         move.l 248(sp),d2
    c1ca:	|         move.l 244(sp),d3
    c1ce:	|         jsr -48(a6)
    c1d2:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    c1d6:	|         move.l 256(sp),236(sp)
    c1dc:	|         clr.l 232(sp)
    c1e0:	|         move.l 1a7aa <DOSBase>,d0
    c1e6:	|         movea.l d0,a6
    c1e8:	|         move.l 236(sp),d1
    c1ec:	|         move.l 232(sp),d2
    c1f0:	|         jsr -312(a6)
    c1f4:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    c1f8:	|         move.l 256(sp),224(sp)
    c1fe:	|         clr.l 220(sp)
    c202:	|         move.l 1a7aa <DOSBase>,d0
    c208:	|         movea.l d0,a6
    c20a:	|         move.l 224(sp),d1
    c20e:	|         move.l 220(sp),d2
    c212:	|         jsr -312(a6)
    c216:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    c21a:	|         move.l 256(sp),212(sp)
    c220:	|         moveq #2,d0
    c222:	|         move.l d0,208(sp)
    c226:	|         move.l 1a7aa <DOSBase>,d0
    c22c:	|         movea.l d0,a6
    c22e:	|         move.l 212(sp),d1
    c232:	|         move.l 208(sp),d2
    c236:	|         jsr -312(a6)
    c23a:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    c23e:	|         move.l 256(sp),200(sp)
    c244:	|         moveq #2,d0
    c246:	|         move.l d0,196(sp)
    c24a:	|         move.l 1a7aa <DOSBase>,d0
    c250:	|         movea.l d0,a6
    c252:	|         move.l 200(sp),d1
    c256:	|         move.l 196(sp),d2
    c25a:	|         jsr -312(a6)
    c25e:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c262:	|         move.l 256(sp),188(sp)
    c268:	|         move.l #108356,184(sp)
    c270:	|         moveq #8,d0
    c272:	|         move.l d0,180(sp)
    c276:	|         move.l 1a7aa <DOSBase>,d0
    c27c:	|         movea.l d0,a6
    c27e:	|         move.l 188(sp),d1
    c282:	|         move.l 184(sp),d2
    c286:	|         move.l 180(sp),d3
    c28a:	|         jsr -48(a6)
    c28e:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c292:	|         move.l 256(sp),172(sp)
    c298:	|         move.w 1a000 <allowAnyFilename>,d0
    c29e:	|         movea.w d0,a0
    c2a0:	|         move.l a0,168(sp)
    c2a4:	|         move.l 1a7aa <DOSBase>,d0
    c2aa:	|         movea.l d0,a6
    c2ac:	|         move.l 172(sp),d1
    c2b0:	|         move.l 168(sp),d2
    c2b4:	|         jsr -312(a6)
    c2b8:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    c2bc:	|         move.l 256(sp),160(sp)
    c2c2:	|         move.w 1a742 <captureAllKeys>,d0
    c2c8:	|         movea.w d0,a0
    c2ca:	|         move.l a0,156(sp)
    c2ce:	|         move.l 1a7aa <DOSBase>,d0
    c2d4:	|         movea.l d0,a6
    c2d6:	|         move.l 160(sp),d1
    c2da:	|         move.l 156(sp),d2
    c2de:	|         jsr -312(a6)
    c2e2:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    c2e6:	|         move.l 256(sp),148(sp)
    c2ec:	|         moveq #1,d0
    c2ee:	|         move.l d0,144(sp)
    c2f2:	|         move.l 1a7aa <DOSBase>,d0
    c2f8:	|         movea.l d0,a6
    c2fa:	|         move.l 148(sp),d1
    c2fe:	|         move.l 144(sp),d2
    c302:	|         jsr -312(a6)
    c306:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    c30a:	|         move.l 256(sp),136(sp)
    c310:	|         move.l 1a902 <fontTableSize>,d0
    c316:	|         sgt d0
    c318:	|         neg.b d0
    c31a:	|         move.b d0,d0
    c31c:	|         andi.l #255,d0
    c322:	|         move.l d0,132(sp)
    c326:	|         move.l 1a7aa <DOSBase>,d0
    c32c:	|         movea.l d0,a6
    c32e:	|         move.l 136(sp),d1
    c332:	|         move.l 132(sp),d2
    c336:	|         jsr -312(a6)
    c33a:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    c33e:	|         move.l 1a902 <fontTableSize>,d0
    c344:	|     /-- ble.s c382 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c346:	|     |   move.l 1a8f6 <loadedFontNum>,d0
    c34c:	|     |   move.l 256(sp),-(sp)
    c350:	|     |   move.l d0,-(sp)
    c352:	|     |   jsr 8d0 <put2bytes>
    c358:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c35a:	|     |   move.l 1a8f2 <fontHeight>,d0
    c360:	|     |   move.l 256(sp),-(sp)
    c364:	|     |   move.l d0,-(sp)
    c366:	|     |   jsr 8d0 <put2bytes>
    c36c:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c36e:	|     |   move.l 1a8fa <fontOrderString>,d0
    c374:	|     |   move.l 256(sp),-(sp)
    c378:	|     |   move.l d0,-(sp)
    c37a:	|     |   jsr bd8 <writeString>
    c380:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c382:	|     \-> move.w 1a6a8 <fontSpace>,d0
    c388:	|         movea.w d0,a0
    c38a:	|         move.l 256(sp),-(sp)
    c38e:	|         move.l a0,-(sp)
    c390:	|         jsr a9c <putSigned>
    c396:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c398:	|         move.l 1a8b4 <cameraX>,d0
    c39e:	|         move.l 256(sp),-(sp)
    c3a2:	|         move.l d0,-(sp)
    c3a4:	|         jsr 8d0 <put2bytes>
    c3aa:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c3ac:	|         move.l 1a8b8 <cameraY>,d0
    c3b2:	|         move.l 256(sp),-(sp)
    c3b6:	|         move.l d0,-(sp)
    c3b8:	|         jsr 8d0 <put2bytes>
    c3be:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c3c0:	|         move.l 1a142 <cameraZoom>,d0
    c3c6:	|         move.l 256(sp),-(sp)
    c3ca:	|         move.l d0,-(sp)
    c3cc:	|         jsr a46 <putFloat>
    c3d2:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c3d4:	|         move.l 256(sp),124(sp)
    c3da:	|         move.b 1a11a <brightnessLevel>,d0
    c3e0:	|         move.b d0,d0
    c3e2:	|         andi.l #255,d0
    c3e8:	|         move.l d0,120(sp)
    c3ec:	|         move.l 1a7aa <DOSBase>,d0
    c3f2:	|         movea.l d0,a6
    c3f4:	|         move.l 124(sp),d1
    c3f8:	|         move.l 120(sp),d2
    c3fc:	|         jsr -312(a6)
    c400:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    c404:	|         move.l 256(sp),-(sp)
    c408:	|         jsr 6248 <saveHandlers>
    c40e:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c410:	|         move.l 256(sp),-(sp)
    c414:	|         jsr 15612 <saveRegions>
    c41a:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c41c:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c422:	|         move.l 256(sp),-(sp)
    c426:	|         move.l d0,-(sp)
    c428:	|         jsr aa02 <saveAnim>
    c42e:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c430:	|         move.l 1a6ae <mouseCursorFrameNum>,d0
    c436:	|         move.l 256(sp),-(sp)
    c43a:	|         move.l d0,-(sp)
    c43c:	|         jsr 8d0 <put2bytes>
    c442:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c444:	|         move.l 1a73a <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    c44c:	|         clr.l 272(sp)
	while (thisFunction) {
    c450:	|     /-- bra.s c460 <saveGame+0x306>
		countFunctions ++;
    c452:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    c456:	|  |  |   movea.l 276(sp),a0
    c45a:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    c460:	|  |  \-> tst.l 276(sp)
    c464:	|  \----- bne.s c452 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c466:	|         move.l 256(sp),-(sp)
    c46a:	|         move.l 276(sp),-(sp)
    c46e:	|         jsr 8d0 <put2bytes>
    c474:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c476:	|         move.l 1a73a <allRunningFunctions>,276(sp)
	while (thisFunction) {
    c47e:	|     /-- bra.s c49a <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c480:	|  /--|-> move.l 256(sp),-(sp)
    c484:	|  |  |   move.l 280(sp),-(sp)
    c488:	|  |  |   jsr bfa2 <saveFunction>
    c48e:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    c490:	|  |  |   movea.l 276(sp),a0
    c494:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    c49a:	|  |  \-> tst.l 276(sp)
    c49e:	|  \----- bne.s c480 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    c4a0:	|         clr.l 280(sp)
    c4a4:	|     /-- bra.s c4c6 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    c4a6:	|  /--|-> move.l 1a750 <globalVars>,d1
    c4ac:	|  |  |   move.l 280(sp),d0
    c4b0:	|  |  |   lsl.l #3,d0
    c4b2:	|  |  |   add.l d1,d0
    c4b4:	|  |  |   move.l 256(sp),-(sp)
    c4b8:	|  |  |   move.l d0,-(sp)
    c4ba:	|  |  |   jsr c85e <saveVariable>
    c4c0:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    c4c2:	|  |  |   addq.l #1,280(sp)
    c4c6:	|  |  \-> move.l 1a77a <numGlobals>,d0
    c4cc:	|  |      cmp.l 280(sp),d0
    c4d0:	|  \----- bgt.s c4a6 <saveGame+0x34c>
	}

	savePeople (fp);
    c4d2:	|         move.l 256(sp),-(sp)
    c4d6:	|         jsr ab2a <savePeople>
    c4dc:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    c4de:	|         movea.l 1a916 <currentFloor>,a0
    c4e4:	|         move.l 8(a0),d0
    c4e8:	|  /----- beq.s c526 <saveGame+0x3cc>
		FPutC (fp, 1);
    c4ea:	|  |      move.l 256(sp),100(sp)
    c4f0:	|  |      moveq #1,d0
    c4f2:	|  |      move.l d0,96(sp)
    c4f6:	|  |      move.l 1a7aa <DOSBase>,d0
    c4fc:	|  |      movea.l d0,a6
    c4fe:	|  |      move.l 100(sp),d1
    c502:	|  |      move.l 96(sp),d2
    c506:	|  |      jsr -312(a6)
    c50a:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    c50e:	|  |      movea.l 1a916 <currentFloor>,a0
    c514:	|  |      move.l (a0),d0
    c516:	|  |      move.l 256(sp),-(sp)
    c51a:	|  |      move.l d0,-(sp)
    c51c:	|  |      jsr 8d0 <put2bytes>
    c522:	|  |      addq.l #8,sp
    c524:	|  |  /-- bra.s c548 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    c526:	|  \--|-> move.l 256(sp),112(sp)
    c52c:	|     |   clr.l 108(sp)
    c530:	|     |   move.l 1a7aa <DOSBase>,d0
    c536:	|     |   movea.l d0,a6
    c538:	|     |   move.l 112(sp),d1
    c53c:	|     |   move.l 108(sp),d2
    c540:	|     |   jsr -312(a6)
    c544:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    c548:	|     \-> move.l 1a852 <zBuffer+0x50>,d0
    c54e:	|  /----- beq.s c58a <saveGame+0x430>
		FPutC (fp, 1);
    c550:	|  |      move.l 256(sp),76(sp)
    c556:	|  |      moveq #1,d0
    c558:	|  |      move.l d0,72(sp)
    c55c:	|  |      move.l 1a7aa <DOSBase>,d0
    c562:	|  |      movea.l d0,a6
    c564:	|  |      move.l 76(sp),d1
    c568:	|  |      move.l 72(sp),d2
    c56c:	|  |      jsr -312(a6)
    c570:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    c574:	|  |      move.l 1a84e <zBuffer+0x4c>,d0
    c57a:	|  |      move.l 256(sp),-(sp)
    c57e:	|  |      move.l d0,-(sp)
    c580:	|  |      jsr 8d0 <put2bytes>
    c586:	|  |      addq.l #8,sp
    c588:	|  |  /-- bra.s c5ac <saveGame+0x452>
	} else FPutC (fp,0);
    c58a:	|  \--|-> move.l 256(sp),88(sp)
    c590:	|     |   clr.l 84(sp)
    c594:	|     |   move.l 1a7aa <DOSBase>,d0
    c59a:	|     |   movea.l d0,a6
    c59c:	|     |   move.l 88(sp),d1
    c5a0:	|     |   move.l 84(sp),d2
    c5a4:	|     |   jsr -312(a6)
    c5a8:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    c5ac:	|     \-> move.l 256(sp),64(sp)
    c5b2:	|         move.l 1a8c8 <speechMode>,60(sp)
    c5ba:	|         move.l 1a7aa <DOSBase>,d0
    c5c0:	|         movea.l d0,a6
    c5c2:	|         move.l 64(sp),d1
    c5c6:	|         move.l 60(sp),d2
    c5ca:	|         jsr -312(a6)
    c5ce:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    c5d2:	|         move.b 1a67e <fadeMode>,d0
    c5d8:	|         move.b d0,d0
    c5da:	|         andi.l #255,d0
    c5e0:	|         move.l d0,52(sp)
    c5e4:	|         move.l 256(sp),48(sp)
    c5ea:	|         move.l 1a7aa <DOSBase>,d0
    c5f0:	|         movea.l d0,a6
    c5f2:	|         move.l 52(sp),d1
    c5f6:	|         move.l 48(sp),d2
    c5fa:	|         jsr -312(a6)
    c5fe:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    c602:	|         move.l 1a7fe <speech>,d0
    c608:	|         move.l 256(sp),-(sp)
    c60c:	|         move.l d0,-(sp)
    c60e:	|         jsr 78a4 <saveSpeech>
    c614:	|         addq.l #8,sp
	saveStatusBars (fp);
    c616:	|         move.l 256(sp),-(sp)
    c61a:	|         jsr 72a0 <saveStatusBars>
    c620:	|         addq.l #4,sp
	saveSounds (fp);
    c622:	|         move.l 256(sp),-(sp)
    c626:	|         jsr cbc8 <saveSounds>
    c62c:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    c62e:	|         move.w 1a8b2 <saveEncoding>,d0
    c634:	|         move.w d0,d0
    c636:	|         andi.l #65535,d0
    c63c:	|         move.l 256(sp),-(sp)
    c640:	|         move.l d0,-(sp)
    c642:	|         jsr 8d0 <put2bytes>
    c648:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    c64a:	|         move.l 1a8a4 <parallaxStuff>,d0
    c650:	|         move.l 256(sp),-(sp)
    c654:	|         move.l d0,-(sp)
    c656:	|         jsr cec0 <saveParallaxRecursive>
    c65c:	|         addq.l #8,sp
	FPutC (fp, 0);
    c65e:	|         move.l 256(sp),40(sp)
    c664:	|         clr.l 36(sp)
    c668:	|         move.l 1a7aa <DOSBase>,d0
    c66e:	|         movea.l d0,a6
    c670:	|         move.l 40(sp),d1
    c674:	|         move.l 36(sp),d2
    c678:	|         jsr -312(a6)
    c67c:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    c680:	|         move.l 256(sp),28(sp)
    c686:	|         move.l 1a120 <languageNum>,24(sp)
    c68e:	|         move.l 1a7aa <DOSBase>,d0
    c694:	|         movea.l d0,a6
    c696:	|         move.l 28(sp),d1
    c69a:	|         move.l 24(sp),d2
    c69e:	|         jsr -312(a6)
    c6a2:	|         move.l d0,20(sp)

	Close(fp);
    c6a6:	|         move.l 256(sp),16(sp)
    c6ac:	|         move.l 1a7aa <DOSBase>,d0
    c6b2:	|         movea.l d0,a6
    c6b4:	|         move.l 16(sp),d1
    c6b8:	|         jsr -36(a6)
    c6bc:	|         move.l d0,12(sp)
	clearStackLib ();
    c6c0:	|         jsr bc58 <clearStackLib>
	return TRUE;
    c6c6:	|         moveq #1,d0
}
    c6c8:	\-------> movem.l (sp)+,d2-d3/a6
    c6cc:	          lea 272(sp),sp
    c6d0:	          rts

0000c6d2 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    c6d2:	       lea -12(sp),sp
	int elements = 0;
    c6d6:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    c6da:	       move.l 16(sp),(sp)
	while (search) {
    c6de:	   /-- bra.s c6ea <saveStack+0x18>
		elements ++;
    c6e0:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    c6e4:	|  |   movea.l (sp),a0
    c6e6:	|  |   move.l 8(a0),(sp)
	while (search) {
    c6ea:	|  \-> tst.l (sp)
    c6ec:	\----- bne.s c6e0 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    c6ee:	       move.l 20(sp),-(sp)
    c6f2:	       move.l 12(sp),-(sp)
    c6f6:	       jsr 8d0 <put2bytes>
    c6fc:	       addq.l #8,sp
	search = vs;
    c6fe:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    c702:	       clr.l 4(sp)
    c706:	   /-- bra.s c722 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    c708:	/--|-> move.l (sp),d0
    c70a:	|  |   move.l 20(sp),-(sp)
    c70e:	|  |   move.l d0,-(sp)
    c710:	|  |   jsr c85e <saveVariable>
    c716:	|  |   addq.l #8,sp
		search = search -> next;
    c718:	|  |   movea.l (sp),a0
    c71a:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    c71e:	|  |   addq.l #1,4(sp)
    c722:	|  \-> move.l 4(sp),d0
    c726:	|      cmp.l 8(sp),d0
    c72a:	\----- blt.s c708 <saveStack+0x36>
	}
}
    c72c:	       nop
    c72e:	       nop
    c730:	       lea 12(sp),sp
    c734:	       rts

0000c736 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    c736:	             lea -44(sp),sp
    c73a:	             move.l a6,-(sp)
    c73c:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    c73e:	             move.l 1a886 <stackLib>,48(sp)
	int a = 0;
    c746:	             clr.l 44(sp)
	while (s) {
    c74a:	      /----- bra.s c7a8 <saveStackRef+0x72>
		if (s -> stack == vs) {
    c74c:	   /--|----> movea.l 48(sp),a0
    c750:	   |  |      move.l (a0),d0
    c752:	   |  |      cmp.l 56(sp),d0
    c756:	   |  |  /-- bne.s c79a <saveStackRef+0x64>
			FPutC (fp, 1);
    c758:	   |  |  |   move.l 60(sp),16(sp)
    c75e:	   |  |  |   moveq #1,d0
    c760:	   |  |  |   move.l d0,12(sp)
    c764:	   |  |  |   move.l 1a7aa <DOSBase>,d0
    c76a:	   |  |  |   movea.l d0,a6
    c76c:	   |  |  |   move.l 16(sp),d1
    c770:	   |  |  |   move.l 12(sp),d2
    c774:	   |  |  |   jsr -312(a6)
    c778:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    c77c:	   |  |  |   move.l 1a882 <stackLibTotal>,d0
    c782:	   |  |  |   sub.l 44(sp),d0
    c786:	   |  |  |   move.l 60(sp),-(sp)
    c78a:	   |  |  |   move.l d0,-(sp)
    c78c:	   |  |  |   jsr 8d0 <put2bytes>
    c792:	   |  |  |   addq.l #8,sp
			return TRUE;
    c794:	   |  |  |   moveq #1,d0
    c796:	/--|--|--|-- bra.w c854 <saveStackRef+0x11e>
		}
		s = s -> next;
    c79a:	|  |  |  \-> movea.l 48(sp),a0
    c79e:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    c7a4:	|  |  |      addq.l #1,44(sp)
	while (s) {
    c7a8:	|  |  \----> tst.l 48(sp)
    c7ac:	|  \-------- bne.s c74c <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    c7ae:	|            move.l 60(sp),40(sp)
    c7b4:	|            clr.l 36(sp)
    c7b8:	|            move.l 1a7aa <DOSBase>,d0
    c7be:	|            movea.l d0,a6
    c7c0:	|            move.l 40(sp),d1
    c7c4:	|            move.l 36(sp),d2
    c7c8:	|            jsr -312(a6)
    c7cc:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    c7d0:	|            movea.l 56(sp),a0
    c7d4:	|            move.l (a0),d0
    c7d6:	|            move.l 60(sp),-(sp)
    c7da:	|            move.l d0,-(sp)
    c7dc:	|            jsr c6d2 <saveStack>
    c7e2:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    c7e4:	|            moveq #8,d0
    c7e6:	|            move.l d0,28(sp)
    c7ea:	|            clr.l 24(sp)
    c7ee:	|            move.l 1a7a2 <SysBase>,d0
    c7f4:	|            movea.l d0,a6
    c7f6:	|            move.l 28(sp),d0
    c7fa:	|            move.l 24(sp),d1
    c7fe:	|            jsr -684(a6)
    c802:	|            move.l d0,20(sp)
    c806:	|            move.l 20(sp),d0
    c80a:	|            move.l d0,48(sp)
	stackLibTotal ++;
    c80e:	|            move.l 1a882 <stackLibTotal>,d0
    c814:	|            addq.l #1,d0
    c816:	|            move.l d0,1a882 <stackLibTotal>
	if (! s) {
    c81c:	|            tst.l 48(sp)
    c820:	|        /-- bne.s c834 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    c822:	|        |   pea 18d77 <PutChar+0x16f7>
    c828:	|        |   jsr 16bac <KPrintF>
    c82e:	|        |   addq.l #4,sp
		return FALSE;
    c830:	|        |   clr.w d0
    c832:	+--------|-- bra.s c854 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    c834:	|        \-> move.l 1a886 <stackLib>,d0
    c83a:	|            movea.l 48(sp),a0
    c83e:	|            move.l d0,4(a0)
	s -> stack = vs;
    c842:	|            movea.l 48(sp),a0
    c846:	|            move.l 56(sp),(a0)
	stackLib = s;
    c84a:	|            move.l 48(sp),1a886 <stackLib>
	return TRUE;
    c852:	|            moveq #1,d0
}
    c854:	\----------> move.l (sp)+,d2
    c856:	             movea.l (sp)+,a6
    c858:	             lea 44(sp),sp
    c85c:	             rts

0000c85e <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    c85e:	          lea -12(sp),sp
    c862:	          move.l a6,-(sp)
    c864:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    c866:	          move.l 28(sp),16(sp)
    c86c:	          movea.l 24(sp),a0
    c870:	          move.l (a0),d0
    c872:	          move.l d0,12(sp)
    c876:	          move.l 1a7aa <DOSBase>,d0
    c87c:	          movea.l d0,a6
    c87e:	          move.l 16(sp),d1
    c882:	          move.l 12(sp),d2
    c886:	          jsr -312(a6)
    c88a:	          move.l d0,8(sp)
	switch (from -> varType) {
    c88e:	          movea.l 24(sp),a0
    c892:	          move.l (a0),d0
    c894:	          moveq #9,d1
    c896:	          cmp.l d0,d1
    c898:	      /-- bcs.w c948 <saveVariable+0xea>
    c89c:	      |   add.l d0,d0
    c89e:	      |   movea.l d0,a0
    c8a0:	      |   adda.l #51372,a0
    c8a6:	      |   move.w (a0),d0
    c8a8:	      |   jmp (c8ac <saveVariable+0x4e>,pc,d0.w)
    c8ac:	      |   ori.l #1310740,(a0)+
    c8b2:	      |   ori.b #20,(20,a0,d0.w)
    c8b8:	      |   .short 0x004c
    c8ba:	      |   ori.b #126,(a4)
    c8be:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    c8c2:	      |   ori.b #40,(a0)+
    c8c6:	      |   ori.b #47,d4
    c8ca:	      |   ori.b #0,(a4)+
    c8ce:	      |   jsr 958 <put4bytes>
    c8d4:	      |   addq.l #8,sp
		return TRUE;
    c8d6:	      |   moveq #1,d0
    c8d8:	/-----|-- bra.w c984 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    c8dc:	|     |   movea.l 24(sp),a0
    c8e0:	|     |   move.l 4(a0),d0
    c8e4:	|     |   move.l 28(sp),-(sp)
    c8e8:	|     |   move.l d0,-(sp)
    c8ea:	|     |   jsr bd8 <writeString>
    c8f0:	|     |   addq.l #8,sp
		return TRUE;
    c8f2:	|     |   moveq #1,d0
    c8f4:	+-----|-- bra.w c984 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    c8f8:	|     |   movea.l 24(sp),a0
    c8fc:	|     |   move.l 4(a0),d0
    c900:	|     |   move.l 28(sp),-(sp)
    c904:	|     |   move.l d0,-(sp)
    c906:	|     |   jsr c736 <saveStackRef>
    c90c:	|     |   addq.l #8,sp
    c90e:	+-----|-- bra.s c984 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    c910:	|     |   movea.l 24(sp),a0
    c914:	|     |   move.l 4(a0),d0
    c918:	|     |   move.l 28(sp),-(sp)
    c91c:	|     |   move.l d0,-(sp)
    c91e:	|     |   jsr aacc <saveCostume>
    c924:	|     |   addq.l #8,sp
		return FALSE;
    c926:	|     |   clr.w d0
    c928:	+-----|-- bra.s c984 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    c92a:	|     |   movea.l 24(sp),a0
    c92e:	|     |   move.l 4(a0),d0
    c932:	|     |   move.l 28(sp),-(sp)
    c936:	|     |   move.l d0,-(sp)
    c938:	|     |   jsr aa02 <saveAnim>
    c93e:	|     |   addq.l #8,sp
		return FALSE;
    c940:	|     |   clr.w d0
    c942:	+-----|-- bra.s c984 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    c944:	|     |   clr.w d0
    c946:	+-----|-- bra.s c984 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    c948:	|     \-> movea.l 24(sp),a0
    c94c:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    c94e:	|         moveq #10,d1
    c950:	|         cmp.l d0,d1
    c952:	|  /----- bcs.s c96c <saveVariable+0x10e>
						typeName[from->varType] :
    c954:	|  |      movea.l 24(sp),a0
    c958:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    c95a:	|  |      add.l d0,d0
    c95c:	|  |      movea.l d0,a1
    c95e:	|  |      adda.l d0,a1
    c960:	|  |      lea 1a680 <typeName>,a0
    c966:	|  |      move.l (0,a1,a0.l),d0
    c96a:	|  |  /-- bra.s c972 <saveVariable+0x114>
    c96c:	|  \--|-> move.l #101788,d0
    c972:	|     \-> move.l d0,-(sp)
    c974:	|         pea 18da3 <PutChar+0x1723>
    c97a:	|         jsr 16bac <KPrintF>
    c980:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    c982:	|         moveq #1,d0
    c984:	\-------> move.l (sp)+,d2
    c986:	          movea.l (sp)+,a6
    c988:	          lea 12(sp),sp
    c98c:	          rts

0000c98e <CsiCheckInput>:
extern struct inputType input;

counterx_old = 0;
countery_old = 0;

void CsiCheckInput() {
    c98e:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    c992:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    c99a:	          movea.l 4(sp),a0
    c99e:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    c9a4:	          movea.l 4(sp),a0
    c9a8:	          move.w 10(a0),d0
    c9ac:	          lsr.w #8,d0
    c9ae:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    c9b2:	          movea.l 4(sp),a0
    c9b6:	          move.w 10(a0),d0
    c9ba:	          move.b d0,(sp)

    if(counterx_new)
    c9bc:	/-------- beq.w ca64 <CsiCheckInput+0xd6>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    c9c0:	|         clr.w d1
    c9c2:	|         move.b (sp),d1
    c9c4:	|         move.l 1a88e <counterx_old>,d0
    c9ca:	|         move.l d0,d0
    c9cc:	|         sub.w d0,d1
    c9ce:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    c9d2:	|         cmpi.w #128,10(sp)
    c9d8:	|     /-- blt.s c9f0 <CsiCheckInput+0x62>
            input.justMoved = TRUE;                
    c9da:	|     |   move.w #1,1a758 <input+0x4>
            counterx_diff -= 256;    
    c9e2:	|     |   move.w 10(sp),d0
    c9e6:	|     |   addi.w #-256,d0
    c9ea:	|     |   move.w d0,10(sp)
    c9ee:	|  /--|-- bra.s ca1c <CsiCheckInput+0x8e>
        } else if (counterx_diff < -128) {
    c9f0:	|  |  \-> cmpi.w #-129,10(sp)
    c9f6:	|  |  /-- bgt.s ca0e <CsiCheckInput+0x80>
            counterx_diff += 256;
    c9f8:	|  |  |   move.w 10(sp),d0
    c9fc:	|  |  |   addi.w #256,d0
    ca00:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    ca04:	|  |  |   move.w #1,1a758 <input+0x4>
    ca0c:	|  +--|-- bra.s ca1c <CsiCheckInput+0x8e>
        } else if (counterx_diff) {
    ca0e:	|  |  \-> tst.w 10(sp)
    ca12:	|  +----- beq.s ca1c <CsiCheckInput+0x8e>
            input.justMoved = TRUE;
    ca14:	|  |      move.w #1,1a758 <input+0x4>
        }

        input.mouseX += counterx_diff;
    ca1c:	|  \----> move.l 1a75e <input+0xa>,d0
    ca22:	|         movea.w 10(sp),a0
    ca26:	|         add.l a0,d0
    ca28:	|         move.l d0,1a75e <input+0xa>

        if( input.mouseX > (int) winWidth) {
    ca2e:	|         move.l 1a75e <input+0xa>,d1
    ca34:	|         move.l 1a6f6 <winWidth>,d0
    ca3a:	|         cmp.l d1,d0
    ca3c:	|     /-- bge.s ca4c <CsiCheckInput+0xbe>
            input.mouseX = winWidth;            
    ca3e:	|     |   move.l 1a6f6 <winWidth>,d0
    ca44:	|     |   move.l d0,1a75e <input+0xa>
    ca4a:	|  /--|-- bra.s ca5a <CsiCheckInput+0xcc>
        }
        else if(input.mouseX < 0) {
    ca4c:	|  |  \-> move.l 1a75e <input+0xa>,d0
    ca52:	|  +----- bpl.s ca5a <CsiCheckInput+0xcc>
            input.mouseX = 0;
    ca54:	|  |      clr.l 1a75e <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    ca5a:	|  \----> moveq #0,d0
    ca5c:	|         move.b (sp),d0
    ca5e:	|         move.l d0,1a88e <counterx_old>
    }    

    if(countery_new)
    ca64:	\-------> tst.b 1(sp)
    ca68:	/-------- beq.w cb14 <CsiCheckInput+0x186>
    {
        WORD countery_diff = countery_new - countery_old;
    ca6c:	|         clr.w d1
    ca6e:	|         move.b 1(sp),d1
    ca72:	|         move.l 1a892 <countery_old>,d0
    ca78:	|         move.l d0,d0
    ca7a:	|         sub.w d0,d1
    ca7c:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    ca80:	|         cmpi.w #128,8(sp)
    ca86:	|     /-- blt.s ca9e <CsiCheckInput+0x110>
            input.justMoved = TRUE;                
    ca88:	|     |   move.w #1,1a758 <input+0x4>
            countery_diff -= 256;    
    ca90:	|     |   move.w 8(sp),d0
    ca94:	|     |   addi.w #-256,d0
    ca98:	|     |   move.w d0,8(sp)
    ca9c:	|  /--|-- bra.s caca <CsiCheckInput+0x13c>
        } else if (countery_diff < -128) {
    ca9e:	|  |  \-> cmpi.w #-129,8(sp)
    caa4:	|  |  /-- bgt.s cabc <CsiCheckInput+0x12e>
            input.justMoved = TRUE;                
    caa6:	|  |  |   move.w #1,1a758 <input+0x4>
            countery_diff += 256;
    caae:	|  |  |   move.w 8(sp),d0
    cab2:	|  |  |   addi.w #256,d0
    cab6:	|  |  |   move.w d0,8(sp)
    caba:	|  +--|-- bra.s caca <CsiCheckInput+0x13c>
        } else if (countery_diff) {
    cabc:	|  |  \-> tst.w 8(sp)
    cac0:	|  +----- beq.s caca <CsiCheckInput+0x13c>
            input.justMoved = TRUE;
    cac2:	|  |      move.w #1,1a758 <input+0x4>
        }

        input.mouseY += countery_diff;
    caca:	|  \----> move.l 1a762 <input+0xe>,d0
    cad0:	|         movea.w 8(sp),a0
    cad4:	|         add.l a0,d0
    cad6:	|         move.l d0,1a762 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    cadc:	|         move.l 1a762 <input+0xe>,d1
    cae2:	|         move.l 1a6fa <winHeight>,d0
    cae8:	|         cmp.l d1,d0
    caea:	|     /-- bge.s cafa <CsiCheckInput+0x16c>
            input.mouseY = winHeight;            
    caec:	|     |   move.l 1a6fa <winHeight>,d0
    caf2:	|     |   move.l d0,1a762 <input+0xe>
    caf8:	|  /--|-- bra.s cb08 <CsiCheckInput+0x17a>
        }
        else if(input.mouseY < 0) {
    cafa:	|  |  \-> move.l 1a762 <input+0xe>,d0
    cb00:	|  +----- bpl.s cb08 <CsiCheckInput+0x17a>
            input.mouseY = 0;
    cb02:	|  |      clr.l 1a762 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    cb08:	|  \----> moveq #0,d0
    cb0a:	|         move.b 1(sp),d0
    cb0e:	|         move.l d0,1a892 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    cb14:	\-------> move.w 1a754 <input>,d0
    cb1a:	      /-- beq.s cb40 <CsiCheckInput+0x1b2>
    cb1c:	      |   movea.l #12574721,a0
    cb22:	      |   move.b (a0),d0
    cb24:	      |   move.b d0,d0
    cb26:	      |   andi.l #255,d0
    cb2c:	      |   moveq #64,d1
    cb2e:	      |   and.l d1,d0
    cb30:	      +-- beq.s cb40 <CsiCheckInput+0x1b2>
    {
        input.leftClick = FALSE;
    cb32:	      |   clr.w 1a754 <input>
        input.leftRelease = TRUE;
    cb38:	      |   move.w #1,1a75a <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    cb40:	      \-> move.w 1a756 <input+0x2>,d0
    cb46:	      /-- beq.s cb6e <CsiCheckInput+0x1e0>
    cb48:	      |   movea.l #14675990,a0
    cb4e:	      |   move.w (a0),d0
    cb50:	      |   move.w d0,d0
    cb52:	      |   andi.l #65535,d0
    cb58:	      |   andi.l #1024,d0
    cb5e:	      +-- beq.s cb6e <CsiCheckInput+0x1e0>
    {
        input.rightClick = FALSE;
    cb60:	      |   clr.w 1a756 <input+0x2>
        input.rightRelease = TRUE;
    cb66:	      |   move.w #1,1a75c <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    cb6e:	      \-> movea.l #12574721,a0
    cb74:	          move.b (a0),d0
    cb76:	          move.b d0,d0
    cb78:	          andi.l #255,d0
    cb7e:	          moveq #64,d1
    cb80:	          and.l d1,d0
    cb82:	      /-- bne.s cb8c <CsiCheckInput+0x1fe>
        input.leftClick = TRUE;        
    cb84:	      |   move.w #1,1a754 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    cb8c:	      \-> movea.l #14675990,a0
    cb92:	          move.w (a0),d0
    cb94:	          move.w d0,d0
    cb96:	          andi.l #65535,d0
    cb9c:	          andi.l #1024,d0
    cba2:	      /-- bne.s cbac <CsiCheckInput+0x21e>
        input.rightClick = TRUE;
    cba4:	      |   move.w #1,1a756 <input+0x2>
    }

    cbac:	      \-> nop
    cbae:	          lea 12(sp),sp
    cbb2:	          rts

0000cbb4 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    cbb4:	moveq #0,d0
}
    cbb6:	rts

0000cbb8 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    cbb8:	nop
    cbba:	rts

0000cbbc <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    cbbc:	nop
    cbbe:	rts

0000cbc0 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    cbc0:	moveq #1,d0
}
    cbc2:	rts

0000cbc4 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    cbc4:	nop
    cbc6:	rts

0000cbc8 <saveSounds>:

void saveSounds (BPTR fp) {
    cbc8:	lea -12(sp),sp
    cbcc:	move.l a6,-(sp)
    cbce:	move.l d2,-(sp)
	FPutC (fp,0);
    cbd0:	move.l 24(sp),16(sp)
    cbd6:	clr.l 12(sp)
    cbda:	move.l 1a7aa <DOSBase>,d0
    cbe0:	movea.l d0,a6
    cbe2:	move.l 16(sp),d1
    cbe6:	move.l 12(sp),d2
    cbea:	jsr -312(a6)
    cbee:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    cbf2:	move.l 1a13e <defSoundVol>,d0
    cbf8:	move.l 24(sp),-(sp)
    cbfc:	move.l d0,-(sp)
    cbfe:	jsr 8d0 <put2bytes>
    cc04:	addq.l #8,sp
	put2bytes (defVol, fp);
    cc06:	move.l 1a13a <defVol>,d0
    cc0c:	move.l 24(sp),-(sp)
    cc10:	move.l d0,-(sp)
    cc12:	jsr 8d0 <put2bytes>
    cc18:	addq.l #8,sp
}
    cc1a:	nop
    cc1c:	move.l (sp)+,d2
    cc1e:	movea.l (sp)+,a6
    cc20:	lea 12(sp),sp
    cc24:	rts

0000cc26 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    cc26:	move.l 4(sp),1a13a <defVol>
}
    cc2e:	nop
    cc30:	rts

0000cc32 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    cc32:	move.l 4(sp),1a13e <defSoundVol>
}
    cc3a:	nop
    cc3c:	rts

0000cc3e <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    cc3e:	nop
    cc40:	rts

0000cc42 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    cc42:	nop
    cc44:	rts

0000cc46 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    cc46:	nop
    cc48:	rts

0000cc4a <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    cc4a:	subq.l #4,sp
    cc4c:	move.l 12(sp),d0
    cc50:	move.w d0,d0
    cc52:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    cc56:	moveq #1,d0
}
    cc58:	addq.l #4,sp
    cc5a:	rts

0000cc5c <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    cc5c:	nop
    cc5e:	rts

0000cc60 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    cc60:	move.l 16(sp),-(sp)
    cc64:	move.l 16(sp),-(sp)
    cc68:	jsr e0e <CstBlankScreen>
    cc6e:	addq.l #8,sp
}
    cc70:	nop
    cc72:	rts

0000cc74 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    cc74:	pea 18dc6 <PutChar+0x1746>
    cc7a:	jsr 16bac <KPrintF>
    cc80:	addq.l #4,sp
}
    cc82:	nop
    cc84:	rts

0000cc86 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    cc86:	movea.l 8(sp),a1
    cc8a:	movea.l 12(sp),a0
    cc8e:	move.l 8(sp),d1
    cc92:	move.l 4(sp),d0
    cc96:	move.l a1,-(sp)
    cc98:	move.l a0,-(sp)
    cc9a:	move.l d1,-(sp)
    cc9c:	move.l d0,-(sp)
    cc9e:	jsr 36fc <drawLine>
    cca4:	lea 16(sp),sp
}
    cca8:	nop
    ccaa:	rts

0000ccac <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    ccac:	movea.l 12(sp),a1
    ccb0:	movea.l 4(sp),a0
    ccb4:	move.l 8(sp),d1
    ccb8:	move.l 4(sp),d0
    ccbc:	move.l a1,-(sp)
    ccbe:	move.l a0,-(sp)
    ccc0:	move.l d1,-(sp)
    ccc2:	move.l d0,-(sp)
    ccc4:	jsr 36fc <drawLine>
    ccca:	lea 16(sp),sp
}
    ccce:	nop
    ccd0:	rts

0000ccd2 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    ccd2:	pea 18dff <PutChar+0x177f>
    ccd8:	jsr 16bac <KPrintF>
    ccde:	addq.l #4,sp
}
    cce0:	nop
    cce2:	rts

0000cce4 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    cce4:	jsr 14e8 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    ccea:	pea 1a89e <backdropTextureName>
    ccf0:	pea 1 <_start+0x1>
    ccf4:	jsr 387e <deleteTextures>
    ccfa:	addq.l #8,sp
	backdropTextureName = 0;
    ccfc:	clr.l 1a89e <backdropTextureName>
	backdropExists = FALSE;
    cd02:	clr.w 1a8a2 <backdropExists>
}
    cd08:	nop
    cd0a:	rts

0000cd0c <killParallax>:

void killParallax () {
    cd0c:	          lea -12(sp),sp
    cd10:	          move.l a6,-(sp)
	while (parallaxStuff) {
    cd12:	   /----- bra.s cd7e <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    cd14:	/--|----> move.l 1a8a4 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    cd1c:	|  |      movea.l 12(sp),a0
    cd20:	|  |      move.l 42(a0),d0
    cd24:	|  |      move.l d0,1a8a4 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    cd2a:	|  |      move.l 12(sp),d0
    cd2e:	|  |      addq.l #4,d0
    cd30:	|  |      move.l d0,-(sp)
    cd32:	|  |      pea 1 <_start+0x1>
    cd36:	|  |      jsr 387e <deleteTextures>
    cd3c:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    cd3e:	|  |      movea.l 12(sp),a0
    cd42:	|  |      move.l (a0),d0
    cd44:	|  |  /-- beq.s cd5e <killParallax+0x52>
    cd46:	|  |  |   movea.l 12(sp),a0
    cd4a:	|  |  |   move.l (a0),8(sp)
    cd4e:	|  |  |   move.l 1a7a2 <SysBase>,d0
    cd54:	|  |  |   movea.l d0,a6
    cd56:	|  |  |   movea.l 8(sp),a1
    cd5a:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    cd5e:	|  |  \-> tst.l 12(sp)
    cd62:	|  |  /-- beq.s cd7a <killParallax+0x6e>
    cd64:	|  |  |   move.l 12(sp),4(sp)
    cd6a:	|  |  |   move.l 1a7a2 <SysBase>,d0
    cd70:	|  |  |   movea.l d0,a6
    cd72:	|  |  |   movea.l 4(sp),a1
    cd76:	|  |  |   jsr -690(a6)
		k = NULL;
    cd7a:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    cd7e:	|  \----> move.l 1a8a4 <parallaxStuff>,d0
    cd84:	\-------- bne.s cd14 <killParallax+0x8>
	}
}
    cd86:	          nop
    cd88:	          nop
    cd8a:	          movea.l (sp)+,a6
    cd8c:	          lea 12(sp),sp
    cd90:	          rts

0000cd92 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    cd92:	       move.l 4(sp),-(sp)
    cd96:	       jsr 660a <openFileFromNum>
    cd9c:	       addq.l #4,sp
    cd9e:	       tst.l d0
    cda0:	   /-- bne.s cdb2 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    cda2:	   |   pea 18e20 <PutChar+0x17a0>
    cda8:	   |   jsr 16bac <KPrintF>
    cdae:	   |   addq.l #4,sp
		return;
    cdb0:	/--|-- bra.s cdd2 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    cdb2:	|  \-> move.l 1a78a <bigDataFile>,d0
    cdb8:	|      move.l 12(sp),-(sp)
    cdbc:	|      move.l 12(sp),-(sp)
    cdc0:	|      move.l d0,-(sp)
    cdc2:	|      jsr 1796 <CstLoadBackdrop>
    cdc8:	|      lea 12(sp),sp
	finishAccess ();
    cdcc:	|      jsr 6502 <finishAccess>
	
}
    cdd2:	\----> rts

0000cdd4 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    cdd4:	subq.l #8,sp
    cdd6:	movea.l 12(sp),a0
    cdda:	move.l 16(sp),d1
    cdde:	move.l 20(sp),d0
    cde2:	movea.w a0,a0
    cde4:	move.w a0,6(sp)
    cde8:	move.w d1,d1
    cdea:	move.w d1,4(sp)
    cdee:	move.w d0,d0
    cdf0:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    cdf4:	pea 18e6f <PutChar+0x17ef>
    cdfa:	jsr 16bac <KPrintF>
    ce00:	addq.l #4,sp

}
    ce02:	nop
    ce04:	addq.l #8,sp
    ce06:	rts

0000ce08 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    ce08:	pea 18e92 <PutChar+0x1812>
    ce0e:	jsr 16bac <KPrintF>
    ce14:	addq.l #4,sp
}
    ce16:	nop
    ce18:	rts

0000ce1a <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    ce1a:	pea 1a8a8 <snapshotTextureName>
    ce20:	pea 1 <_start+0x1>
    ce24:	jsr 387e <deleteTextures>
    ce2a:	addq.l #8,sp
	snapshotTextureName = 0;
    ce2c:	clr.l 1a8a8 <snapshotTextureName>
}
    ce32:	nop
    ce34:	rts

0000ce36 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    ce36:	clr.l 1a8b4 <cameraX>
	cameraY = 0;
    ce3c:	clr.l 1a8b8 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    ce42:	move.l 1a89a <sceneHeight>,d0
    ce48:	move.l d0,d1
    ce4a:	move.l 1a896 <sceneWidth>,d0
    ce50:	move.l d1,-(sp)
    ce52:	move.l d0,-(sp)
    ce54:	jsr 3202 <CstReserveBackdrop>
    ce5a:	addq.l #8,sp
}
    ce5c:	rts

0000ce5e <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    ce5e:	jsr cce4 <killBackDrop>
	killParallax ();
    ce64:	jsr cd0c <killParallax>
	killZBuffer ();
    ce6a:	jsr 7f9e <killZBuffer>
	sceneWidth = x;
    ce70:	move.l 4(sp),d0
    ce74:	move.l d0,1a896 <sceneWidth>
	sceneHeight = y;
    ce7a:	move.l 8(sp),d0
    ce7e:	move.l d0,1a89a <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    ce84:	pea 18ecb <PutChar+0x184b>
    ce8a:	jsr 16bac <KPrintF>
    ce90:	addq.l #4,sp
	return reserveBackdrop();
    ce92:	jsr ce36 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    ce98:	rts

0000ce9a <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    ce9a:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    ce9c:	move.l 12(sp),-(sp)
    cea0:	jsr 6bc <get2bytes>
    cea6:	addq.l #4,sp
    cea8:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    ceac:	move.l 12(sp),-(sp)
    ceb0:	jsr 6bc <get2bytes>
    ceb6:	addq.l #4,sp
    ceb8:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    ceba:	moveq #1,d0
}
    cebc:	addq.l #8,sp
    cebe:	rts

0000cec0 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    cec0:	   /-> lea -12(sp),sp
    cec4:	   |   move.l a6,-(sp)
    cec6:	   |   move.l d2,-(sp)
	if (me) {
    cec8:	   |   tst.l 24(sp)
    cecc:	/--|-- beq.w cf62 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    ced0:	|  |   movea.l 24(sp),a0
    ced4:	|  |   move.l 42(a0),d0
    ced8:	|  |   move.l 28(sp),-(sp)
    cedc:	|  |   move.l d0,-(sp)
    cede:	|  \-- jsr cec0 <saveParallaxRecursive>(pc)
    cee2:	|      addq.l #8,sp
		FPutC (fp, 1);
    cee4:	|      move.l 28(sp),16(sp)
    ceea:	|      moveq #1,d0
    ceec:	|      move.l d0,12(sp)
    cef0:	|      move.l 1a7aa <DOSBase>,d0
    cef6:	|      movea.l d0,a6
    cef8:	|      move.l 16(sp),d1
    cefc:	|      move.l 12(sp),d2
    cf00:	|      jsr -312(a6)
    cf04:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    cf08:	|      movea.l 24(sp),a0
    cf0c:	|      move.w 28(a0),d0
    cf10:	|      move.w d0,d0
    cf12:	|      andi.l #65535,d0
    cf18:	|      move.l 28(sp),-(sp)
    cf1c:	|      move.l d0,-(sp)
    cf1e:	|      jsr 8d0 <put2bytes>
    cf24:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    cf26:	|      movea.l 24(sp),a0
    cf2a:	|      move.w 30(a0),d0
    cf2e:	|      move.w d0,d0
    cf30:	|      andi.l #65535,d0
    cf36:	|      move.l 28(sp),-(sp)
    cf3a:	|      move.l d0,-(sp)
    cf3c:	|      jsr 8d0 <put2bytes>
    cf42:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    cf44:	|      movea.l 24(sp),a0
    cf48:	|      move.w 32(a0),d0
    cf4c:	|      move.w d0,d0
    cf4e:	|      andi.l #65535,d0
    cf54:	|      move.l 28(sp),-(sp)
    cf58:	|      move.l d0,-(sp)
    cf5a:	|      jsr 8d0 <put2bytes>
    cf60:	|      addq.l #8,sp
	}
}
    cf62:	\----> nop
    cf64:	       move.l (sp)+,d2
    cf66:	       movea.l (sp)+,a6
    cf68:	       lea 12(sp),sp
    cf6c:	       rts

0000cf6e <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    cf6e:	pea 18ef2 <PutChar+0x1872>
    cf74:	jsr 16bac <KPrintF>
    cf7a:	addq.l #4,sp
	return TRUE;
    cf7c:	moveq #1,d0
    cf7e:	rts

0000cf80 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    cf80:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    cf82:	             move.l 1a8ac <allObjectTypes>,(sp)

	while (huntType) {
    cf88:	      /----- bra.s cfa0 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    cf8a:	   /--|----> movea.l (sp),a0
    cf8c:	   |  |      move.l 4(a0),d0
    cf90:	   |  |      cmp.l 8(sp),d0
    cf94:	   |  |  /-- bne.s cf9a <findObjectType+0x1a>
    cf96:	   |  |  |   move.l (sp),d0
    cf98:	/--|--|--|-- bra.s cfb0 <findObjectType+0x30>
		huntType = huntType -> next;
    cf9a:	|  |  |  \-> movea.l (sp),a0
    cf9c:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    cfa0:	|  |  \----> tst.l (sp)
    cfa2:	|  \-------- bne.s cf8a <findObjectType+0xa>
	}

	return loadObjectType (i);
    cfa4:	|            move.l 8(sp),-(sp)
    cfa8:	|            jsr d070 <loadObjectType>
    cfae:	|            addq.l #4,sp
}
    cfb0:	\----------> addq.l #4,sp
    cfb2:	             rts

0000cfb4 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    cfb4:	             lea -12(sp),sp
	int i, num = 0;
    cfb8:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    cfbc:	             move.l 20(sp),-(sp)
    cfc0:	             jsr cf80 <findObjectType>
    cfc6:	             addq.l #4,sp
    cfc8:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    cfca:	             clr.l 8(sp)
    cfce:	   /-------- bra.s d004 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    cfd0:	/--|-------> movea.l (sp),a0
    cfd2:	|  |         move.l 38(a0),d1
    cfd6:	|  |         move.l 8(sp),d0
    cfda:	|  |         lsl.l #3,d0
    cfdc:	|  |         movea.l d1,a0
    cfde:	|  |         adda.l d0,a0
    cfe0:	|  |         move.l (a0),d0
    cfe2:	|  |         cmp.l 16(sp),d0
    cfe6:	|  |  /----- bne.s d000 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    cfe8:	|  |  |      movea.l (sp),a0
    cfea:	|  |  |      move.l 38(a0),d1
    cfee:	|  |  |      move.l 8(sp),d0
    cff2:	|  |  |      lsl.l #3,d0
    cff4:	|  |  |      movea.l d1,a0
    cff6:	|  |  |      adda.l d0,a0
    cff8:	|  |  |      move.l 4(a0),4(sp)
			break;
    cffe:	|  |  |  /-- bra.s d010 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d000:	|  |  \--|-> addq.l #1,8(sp)
    d004:	|  \-----|-> movea.l (sp),a0
    d006:	|        |   move.l 16(a0),d0
    d00a:	|        |   cmp.l 8(sp),d0
    d00e:	\--------|-- bgt.s cfd0 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d010:	         \-> move.l 4(sp),d0
}
    d014:	             lea 12(sp),sp
    d018:	             rts

0000d01a <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d01a:	moveq #1,d0
}
    d01c:	rts

0000d01e <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d01e:	subq.l #8,sp
    d020:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d022:	move.l 16(sp),-(sp)
    d026:	jsr 6bc <get2bytes>
    d02c:	addq.l #4,sp
    d02e:	move.l d0,-(sp)
    d030:	jsr d070 <loadObjectType>
    d036:	addq.l #4,sp
    d038:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d03c:	movea.l 8(sp),a0
    d040:	move.l (a0),4(sp)
    d044:	move.l 1a7a2 <SysBase>,d0
    d04a:	movea.l d0,a6
    d04c:	movea.l 4(sp),a1
    d050:	jsr -690(a6)
	r -> screenName = readString (fp);
    d054:	move.l 16(sp),-(sp)
    d058:	jsr b02 <readString>
    d05e:	addq.l #4,sp
    d060:	movea.l 8(sp),a0
    d064:	move.l d0,(a0)
	return r;
    d066:	move.l 8(sp),d0
}
    d06a:	movea.l (sp)+,a6
    d06c:	addq.l #8,sp
    d06e:	rts

0000d070 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d070:	          lea -84(sp),sp
    d074:	          move.l a6,-(sp)
    d076:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d078:	          moveq #42,d0
    d07a:	          move.l d0,84(sp)
    d07e:	          clr.l 80(sp)
    d082:	          move.l 1a7a2 <SysBase>,d0
    d088:	          movea.l d0,a6
    d08a:	          move.l 84(sp),d0
    d08e:	          move.l 80(sp),d1
    d092:	          jsr -684(a6)
    d096:	          move.l d0,76(sp)
    d09a:	          move.l 76(sp),d0
    d09e:	          move.l d0,72(sp)

    if (newType) {
    d0a2:	/-------- beq.w d31c <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d0a6:	|         move.l 96(sp),-(sp)
    d0aa:	|         jsr 66d2 <openObjectSlice>
    d0b0:	|         addq.l #4,sp
    d0b2:	|         tst.w d0
    d0b4:	+-------- beq.w d31c <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d0b8:	|         move.l 1a78a <bigDataFile>,d0
    d0be:	|         move.l d0,-(sp)
    d0c0:	|         jsr 6bc <get2bytes>
    d0c6:	|         addq.l #4,sp
    d0c8:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d0cc:	|         move.l 1a78a <bigDataFile>,64(sp)
    d0d4:	|         move.l 1a7aa <DOSBase>,d0
    d0da:	|         movea.l d0,a6
    d0dc:	|         move.l 64(sp),d1
    d0e0:	|         jsr -306(a6)
    d0e4:	|         move.l d0,60(sp)
    d0e8:	|         move.l 60(sp),d0
    d0ec:	|         move.l d0,d0
    d0ee:	|         movea.l 72(sp),a0
    d0f2:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d0f6:	|         move.l 1a78a <bigDataFile>,56(sp)
    d0fe:	|         move.l 1a7aa <DOSBase>,d0
    d104:	|         movea.l d0,a6
    d106:	|         move.l 56(sp),d1
    d10a:	|         jsr -306(a6)
    d10e:	|         move.l d0,52(sp)
    d112:	|         move.l 52(sp),d0
    d116:	|         move.l d0,d0
    d118:	|         movea.l 72(sp),a0
    d11c:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d120:	|         move.l 1a78a <bigDataFile>,48(sp)
    d128:	|         move.l 1a7aa <DOSBase>,d0
    d12e:	|         movea.l d0,a6
    d130:	|         move.l 48(sp),d1
    d134:	|         jsr -306(a6)
    d138:	|         move.l d0,44(sp)
    d13c:	|         move.l 44(sp),d0
    d140:	|         move.l d0,d0
    d142:	|         movea.l 72(sp),a0
    d146:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d14a:	|         move.l 1a78a <bigDataFile>,40(sp)
    d152:	|         move.l 1a7aa <DOSBase>,d0
    d158:	|         movea.l d0,a6
    d15a:	|         move.l 40(sp),d1
    d15e:	|         jsr -306(a6)
    d162:	|         move.l d0,36(sp)
    d166:	|         move.l 36(sp),d0
    d16a:	|         movea.l 72(sp),a0
    d16e:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d172:	|         move.l 1a78a <bigDataFile>,32(sp)
    d17a:	|         move.l 1a7aa <DOSBase>,d0
    d180:	|         movea.l d0,a6
    d182:	|         move.l 32(sp),d1
    d186:	|         jsr -306(a6)
    d18a:	|         move.l d0,28(sp)
    d18e:	|         move.l 28(sp),d0
    d192:	|         movea.l 72(sp),a0
    d196:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d19a:	|         move.l 1a78a <bigDataFile>,d0
    d1a0:	|         move.l d0,-(sp)
    d1a2:	|         jsr 718 <get4bytes>
    d1a8:	|         addq.l #4,sp
    d1aa:	|         movea.l 72(sp),a0
    d1ae:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d1b2:	|         move.l 1a78a <bigDataFile>,d0
    d1b8:	|         move.l d0,-(sp)
    d1ba:	|         jsr 6bc <get2bytes>
    d1c0:	|         addq.l #4,sp
    d1c2:	|         movea.l 72(sp),a0
    d1c6:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d1ca:	|         move.l 1a78a <bigDataFile>,24(sp)
    d1d2:	|         move.l 1a7aa <DOSBase>,d0
    d1d8:	|         movea.l d0,a6
    d1da:	|         move.l 24(sp),d1
    d1de:	|         jsr -306(a6)
    d1e2:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d1e6:	|         move.l 1a78a <bigDataFile>,d0
    d1ec:	|         move.l d0,-(sp)
    d1ee:	|         jsr 7d8 <getFloat>
    d1f4:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d1f6:	|         move.l 1a78a <bigDataFile>,d0
    d1fc:	|         move.l d0,-(sp)
    d1fe:	|         jsr 7d8 <getFloat>
    d204:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d206:	|         move.l 1a78a <bigDataFile>,d0
    d20c:	|         move.l d0,-(sp)
    d20e:	|         jsr 6bc <get2bytes>
    d214:	|         addq.l #4,sp
    d216:	|         move.l d0,d0
    d218:	|         movea.l 72(sp),a0
    d21c:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d220:	|         move.l 1a78a <bigDataFile>,d0
    d226:	|         move.l d0,-(sp)
    d228:	|         jsr 6bc <get2bytes>
    d22e:	|         addq.l #4,sp
    d230:	|         movea.l 72(sp),a0
    d234:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d238:	|         movea.l 72(sp),a0
    d23c:	|         move.l 16(a0),d0
    d240:	|  /----- beq.s d272 <loadObjectType+0x202>
    d242:	|  |      movea.l 72(sp),a0
    d246:	|  |      move.l 16(a0),d0
    d24a:	|  |      lsl.l #3,d0
    d24c:	|  |      move.l d0,16(sp)
    d250:	|  |      clr.l 12(sp)
    d254:	|  |      move.l 1a7a2 <SysBase>,d0
    d25a:	|  |      movea.l d0,a6
    d25c:	|  |      move.l 16(sp),d0
    d260:	|  |      move.l 12(sp),d1
    d264:	|  |      jsr -684(a6)
    d268:	|  |      move.l d0,8(sp)
    d26c:	|  |      move.l 8(sp),d0
    d270:	|  |  /-- bra.s d274 <loadObjectType+0x204>
    d272:	|  \--|-> moveq #0,d0
    d274:	|     \-> movea.l 72(sp),a0
    d278:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d27c:	|         clr.l 88(sp)
    d280:	|     /-- bra.s d2d0 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d282:	|  /--|-> move.l 1a78a <bigDataFile>,d1
    d288:	|  |  |   movea.l 72(sp),a0
    d28c:	|  |  |   movea.l 38(a0),a0
    d290:	|  |  |   move.l 88(sp),d0
    d294:	|  |  |   lsl.l #3,d0
    d296:	|  |  |   lea (0,a0,d0.l),a2
    d29a:	|  |  |   move.l d1,-(sp)
    d29c:	|  |  |   jsr 6bc <get2bytes>
    d2a2:	|  |  |   addq.l #4,sp
    d2a4:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d2a6:	|  |  |   move.l 1a78a <bigDataFile>,d1
    d2ac:	|  |  |   movea.l 72(sp),a0
    d2b0:	|  |  |   movea.l 38(a0),a0
    d2b4:	|  |  |   move.l 88(sp),d0
    d2b8:	|  |  |   lsl.l #3,d0
    d2ba:	|  |  |   lea (0,a0,d0.l),a2
    d2be:	|  |  |   move.l d1,-(sp)
    d2c0:	|  |  |   jsr 6bc <get2bytes>
    d2c6:	|  |  |   addq.l #4,sp
    d2c8:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d2cc:	|  |  |   addq.l #1,88(sp)
    d2d0:	|  |  \-> movea.l 72(sp),a0
    d2d4:	|  |      move.l 16(a0),d0
    d2d8:	|  |      cmp.l 88(sp),d0
    d2dc:	|  \----- bgt.s d282 <loadObjectType+0x212>
            }
            finishAccess();
    d2de:	|         jsr 6502 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d2e4:	|         move.l 68(sp),-(sp)
    d2e8:	|         jsr 650c <getNumberedString>
    d2ee:	|         addq.l #4,sp
    d2f0:	|         movea.l 72(sp),a0
    d2f4:	|         move.l d0,(a0)
            newType->objectNum = i;
    d2f6:	|         movea.l 72(sp),a0
    d2fa:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d300:	|         move.l 1a8ac <allObjectTypes>,d0
    d306:	|         movea.l 72(sp),a0
    d30a:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d30e:	|         move.l 72(sp),1a8ac <allObjectTypes>
            return newType;
    d316:	|         move.l 72(sp),d0
    d31a:	|     /-- bra.s d31e <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d31c:	\-----|-> moveq #0,d0
}
    d31e:	      \-> movea.l (sp)+,a2
    d320:	          movea.l (sp)+,a6
    d322:	          lea 84(sp),sp
    d326:	          rts

0000d328 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d328:	             lea -16(sp),sp
    d32c:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d32e:	             move.l #108716,16(sp)

	while (* huntRegion) {
    d336:	   /-------- bra.s d3aa <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d338:	/--|-------> movea.l 16(sp),a0
    d33c:	|  |         move.l (a0),d0
    d33e:	|  |         cmp.l 24(sp),d0
    d342:	|  |  /----- bne.s d39c <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d344:	|  |  |      movea.l 24(sp),a0
    d348:	|  |  |      move.l 8(a0),d0
    d34c:	|  |  |      movea.l 16(sp),a0
    d350:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d352:	|  |  |      movea.l 24(sp),a0
    d356:	|  |  |      move.l 38(a0),12(sp)
    d35c:	|  |  |      move.l 1a7a2 <SysBase>,d0
    d362:	|  |  |      movea.l d0,a6
    d364:	|  |  |      movea.l 12(sp),a1
    d368:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d36c:	|  |  |      movea.l 24(sp),a0
    d370:	|  |  |      move.l (a0),8(sp)
    d374:	|  |  |      move.l 1a7a2 <SysBase>,d0
    d37a:	|  |  |      movea.l d0,a6
    d37c:	|  |  |      movea.l 8(sp),a1
    d380:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d384:	|  |  |      move.l 24(sp),4(sp)
    d38a:	|  |  |      move.l 1a7a2 <SysBase>,d0
    d390:	|  |  |      movea.l d0,a6
    d392:	|  |  |      movea.l 4(sp),a1
    d396:	|  |  |      jsr -690(a6)
			return;
    d39a:	|  |  |  /-- bra.s d3c0 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d39c:	|  |  \--|-> movea.l 16(sp),a0
    d3a0:	|  |     |   move.l (a0),d0
    d3a2:	|  |     |   move.l d0,d1
    d3a4:	|  |     |   addq.l #8,d1
    d3a6:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d3aa:	|  \-----|-> movea.l 16(sp),a0
    d3ae:	|        |   move.l (a0),d0
    d3b0:	\--------|-- bne.s d338 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d3b2:	         |   pea 18f19 <PutChar+0x1899>
    d3b8:	         |   jsr 16bac <KPrintF>
    d3be:	         |   addq.l #4,sp
}
    d3c0:	         \-> movea.l (sp)+,a6
    d3c2:	             lea 16(sp),sp
    d3c6:	             rts

0000d3c8 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d3c8:	movea.l 4(sp),a0
    d3cc:	move.l 4(a0),d0
    d3d0:	move.l 8(sp),-(sp)
    d3d4:	move.l d0,-(sp)
    d3d6:	jsr 8d0 <put2bytes>
    d3dc:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d3de:	movea.l 4(sp),a0
    d3e2:	move.l (a0),d0
    d3e4:	move.l 8(sp),-(sp)
    d3e8:	move.l d0,-(sp)
    d3ea:	jsr bd8 <writeString>
    d3f0:	addq.l #8,sp
    d3f2:	nop
    d3f4:	rts

0000d3f6 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d3f6:	                         lea -112(sp),sp
    d3fa:	                         move.l a6,-(sp)
    d3fc:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d3fe:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d402:	                         move.w 1a8b2 <saveEncoding>,d0
    d408:	                  /----- beq.s d412 <fileToStack+0x1c>
    d40a:	                  |      move.l #102207,d0
    d410:	                  |  /-- bra.s d418 <fileToStack+0x22>
    d412:	                  \--|-> move.l #102233,d0
    d418:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d41c:	                         move.l 124(sp),112(sp)
    d422:	                         move.l #1005,108(sp)
    d42a:	                         move.l 1a7aa <DOSBase>,d0
    d430:	                         movea.l d0,a6
    d432:	                         move.l 112(sp),d1
    d436:	                         move.l 108(sp),d2
    d43a:	                         jsr -30(a6)
    d43e:	                         move.l d0,104(sp)
    d442:	                         move.l 104(sp),d0
    d446:	                         move.l d0,100(sp)
    if (!fp) {
    d44a:	                     /-- bne.s d464 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d44c:	                     |   move.l 124(sp),-(sp)
    d450:	                     |   pea 18f70 <PutChar+0x18f0>
    d456:	                     |   jsr 16bac <KPrintF>
    d45c:	                     |   addq.l #8,sp
        return FALSE;
    d45e:	                     |   clr.w d0
    d460:	/--------------------|-- bra.w d75a <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d464:	|                    \-> move.w 1a8b2 <saveEncoding>,d0
    d46a:	|                        move.l d0,d0
    d46c:	|                        move.b d0,1a8b0 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d472:	|                        move.w 1a8b2 <saveEncoding>,d0
    d478:	|                        lsr.w #8,d0
    d47a:	|                        move.l d0,d0
    d47c:	|                        move.b d0,1a8b1 <encode2>

    while (*checker) {
    d482:	|                 /----- bra.s d4e6 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d484:	|              /--|----> move.l 100(sp),30(sp)
    d48a:	|              |  |      move.l 1a7aa <DOSBase>,d0
    d490:	|              |  |      movea.l d0,a6
    d492:	|              |  |      move.l 30(sp),d1
    d496:	|              |  |      jsr -306(a6)
    d49a:	|              |  |      move.l d0,26(sp)
    d49e:	|              |  |      move.l 26(sp),d1
    d4a2:	|              |  |      movea.l 116(sp),a0
    d4a6:	|              |  |      move.b (a0),d0
    d4a8:	|              |  |      ext.w d0
    d4aa:	|              |  |      movea.w d0,a0
    d4ac:	|              |  |      cmpa.l d1,a0
    d4ae:	|              |  |  /-- beq.s d4e2 <fileToStack+0xec>
            Close(fp);
    d4b0:	|              |  |  |   move.l 100(sp),22(sp)
    d4b6:	|              |  |  |   move.l 1a7aa <DOSBase>,d0
    d4bc:	|              |  |  |   movea.l d0,a6
    d4be:	|              |  |  |   move.l 22(sp),d1
    d4c2:	|              |  |  |   jsr -36(a6)
    d4c6:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d4ca:	|              |  |  |   move.l 124(sp),-(sp)
    d4ce:	|              |  |  |   pea 18f7d <PutChar+0x18fd>
    d4d4:	|              |  |  |   jsr 16bac <KPrintF>
    d4da:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d4dc:	|              |  |  |   clr.w d0
    d4de:	+--------------|--|--|-- bra.w d75a <fileToStack+0x364>
        }
        checker++;
    d4e2:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    d4e6:	|              |  \----> movea.l 116(sp),a0
    d4ea:	|              |         move.b (a0),d0
    d4ec:	|              \-------- bne.s d484 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    d4ee:	|                        move.w 1a8b2 <saveEncoding>,d0
    d4f4:	|  /-------------------- beq.s d568 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    d4f6:	|  |                     move.l 100(sp),-(sp)
    d4fa:	|  |                     jsr d764 <readStringEncoded>
    d500:	|  |                     addq.l #4,sp
    d502:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    d506:	|  |                     pea 18fbe <line.c.05397aaf+0x3b>
    d50c:	|  |                     move.l 100(sp),-(sp)
    d510:	|  |                     jsr 1365a <strcmp>
    d516:	|  |                     addq.l #8,sp
    d518:	|  |                     tst.l d0
    d51a:	|  |                 /-- beq.s d54e <fileToStack+0x158>
            Close(fp);
    d51c:	|  |                 |   move.l 100(sp),88(sp)
    d522:	|  |                 |   move.l 1a7aa <DOSBase>,d0
    d528:	|  |                 |   movea.l d0,a6
    d52a:	|  |                 |   move.l 88(sp),d1
    d52e:	|  |                 |   jsr -36(a6)
    d532:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    d536:	|  |                 |   move.l 124(sp),-(sp)
    d53a:	|  |                 |   pea 18fcd <line.c.05397aaf+0x4a>
    d540:	|  |                 |   jsr 16bac <KPrintF>
    d546:	|  |                 |   addq.l #8,sp
            return FALSE;
    d548:	|  |                 |   clr.w d0
    d54a:	+--|-----------------|-- bra.w d75a <fileToStack+0x364>
        }
        FreeVec(checker);
    d54e:	|  |                 \-> move.l 96(sp),92(sp)
    d554:	|  |                     move.l 1a7a2 <SysBase>,d0
    d55a:	|  |                     movea.l d0,a6
    d55c:	|  |                     movea.l 92(sp),a1
    d560:	|  |                     jsr -690(a6)
        checker = NULL;
    d564:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    d568:	|  >-------------------> move.w 1a8b2 <saveEncoding>,d0
    d56e:	|  |     /-------------- beq.w d6a2 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    d572:	|  |     |               move.l 100(sp),76(sp)
    d578:	|  |     |               move.l 1a7aa <DOSBase>,d0
    d57e:	|  |     |               movea.l d0,a6
    d580:	|  |     |               move.l 76(sp),d1
    d584:	|  |     |               jsr -306(a6)
    d588:	|  |     |               move.l d0,72(sp)
    d58c:	|  |     |               move.l 72(sp),d0
    d590:	|  |     |               move.b 1a8b0 <encode1>,d1
    d596:	|  |     |               ext.w d1
    d598:	|  |     |               ext.l d1
    d59a:	|  |     |               move.l d0,d2
    d59c:	|  |     |               eor.l d1,d2
    d59e:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    d5a2:	|  |     |               moveq #-1,d0
    d5a4:	|  |     |               cmp.l 68(sp),d0
    d5a8:	|  |  /--|-------------- beq.w d738 <fileToStack+0x342>

            char i = (char) tmp;
    d5ac:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    d5b2:	|  |  |  |               move.b 67(sp),d0
    d5b6:	|  |  |  |               ext.w d0
    d5b8:	|  |  |  |               movea.w d0,a0
    d5ba:	|  |  |  |               moveq #2,d2
    d5bc:	|  |  |  |               cmp.l a0,d2
    d5be:	|  |  |  |     /-------- beq.s d63a <fileToStack+0x244>
    d5c0:	|  |  |  |     |         moveq #2,d0
    d5c2:	|  |  |  |     |         cmp.l a0,d0
    d5c4:	|  |  |  |  /--|-------- blt.w d670 <fileToStack+0x27a>
    d5c8:	|  |  |  |  |  |         cmpa.w #0,a0
    d5cc:	|  |  |  |  |  |     /-- beq.s d5d8 <fileToStack+0x1e2>
    d5ce:	|  |  |  |  |  |     |   moveq #1,d2
    d5d0:	|  |  |  |  |  |     |   cmp.l a0,d2
    d5d2:	|  |  |  |  |  |  /--|-- beq.s d614 <fileToStack+0x21e>
    d5d4:	|  |  |  |  +--|--|--|-- bra.w d670 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    d5d8:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    d5dc:	|  |  |  |  |  |  |      jsr d764 <readStringEncoded>
    d5e2:	|  |  |  |  |  |  |      addq.l #4,sp
    d5e4:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    d5e8:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    d5ec:	|  |  |  |  |  |  |      lea 14(sp),a0
    d5f0:	|  |  |  |  |  |  |      move.l a0,-(sp)
    d5f2:	|  |  |  |  |  |  |      jsr 143d0 <makeTextVar>
    d5f8:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    d5fa:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    d600:	|  |  |  |  |  |  |      move.l 1a7a2 <SysBase>,d0
    d606:	|  |  |  |  |  |  |      movea.l d0,a6
    d608:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    d60c:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    d610:	|  |  |  |  |  |  |  /-- bra.w d6c8 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    d614:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    d618:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    d61e:	|  |  |  |  |  |     |   addq.l #4,sp
    d620:	|  |  |  |  |  |     |   move.l d0,-(sp)
    d622:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    d626:	|  |  |  |  |  |     |   lea 18(sp),a0
    d62a:	|  |  |  |  |  |     |   move.l a0,-(sp)
    d62c:	|  |  |  |  |  |     |   jsr 14aa0 <setVariable>
    d632:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    d636:	|  |  |  |  |  |     +-- bra.w d6c8 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    d63a:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    d640:	|  |  |  |  |        |   move.l 1a7aa <DOSBase>,d0
    d646:	|  |  |  |  |        |   movea.l d0,a6
    d648:	|  |  |  |  |        |   move.l 62(sp),d1
    d64c:	|  |  |  |  |        |   jsr -306(a6)
    d650:	|  |  |  |  |        |   move.l d0,58(sp)
    d654:	|  |  |  |  |        |   move.l 58(sp),d0
    d658:	|  |  |  |  |        |   move.l d0,-(sp)
    d65a:	|  |  |  |  |        |   pea 1 <_start+0x1>
    d65e:	|  |  |  |  |        |   lea 18(sp),a0
    d662:	|  |  |  |  |        |   move.l a0,-(sp)
    d664:	|  |  |  |  |        |   jsr 14aa0 <setVariable>
    d66a:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    d66e:	|  |  |  |  |        +-- bra.s d6c8 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    d670:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    d674:	|  |  |  |           |   pea 1904f <line.c.05397aaf+0xcc>
    d67a:	|  |  |  |           |   jsr 16bac <KPrintF>
    d680:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    d682:	|  |  |  |           |   move.l 100(sp),46(sp)
    d688:	|  |  |  |           |   move.l 1a7aa <DOSBase>,d0
    d68e:	|  |  |  |           |   movea.l d0,a6
    d690:	|  |  |  |           |   move.l 46(sp),d1
    d694:	|  |  |  |           |   jsr -36(a6)
    d698:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    d69c:	|  |  |  |           |   clr.w d0
    d69e:	+--|--|--|-----------|-- bra.w d75a <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    d6a2:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    d6a6:	|  |  |              |   jsr d82a <readTextPlain>
    d6ac:	|  |  |              |   addq.l #4,sp
    d6ae:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    d6b2:	|  |  |        /-----|-- beq.w d73c <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    d6b6:	|  |  |        |     |   move.l 80(sp),-(sp)
    d6ba:	|  |  |        |     |   lea 14(sp),a0
    d6be:	|  |  |        |     |   move.l a0,-(sp)
    d6c0:	|  |  |        |     |   jsr 143d0 <makeTextVar>
    d6c6:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    d6c8:	|  |  |        |     \-> movea.l 128(sp),a0
    d6cc:	|  |  |        |         move.l (a0),d0
    d6ce:	|  |  |        |  /----- bne.s d6fe <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    d6d0:	|  |  |        |  |      move.l 128(sp),d0
    d6d4:	|  |  |        |  |      move.l d0,-(sp)
    d6d6:	|  |  |        |  |      lea 14(sp),a0
    d6da:	|  |  |        |  |      move.l a0,-(sp)
    d6dc:	|  |  |        |  |      jsr 13a70 <addVarToStackQuick>
    d6e2:	|  |  |        |  |      addq.l #8,sp
    d6e4:	|  |  |        |  |      tst.w d0
    d6e6:	|  |  |        |  |  /-- bne.s d6ec <fileToStack+0x2f6>
    d6e8:	|  |  |        |  |  |   clr.w d0
    d6ea:	+--|--|--------|--|--|-- bra.s d75a <fileToStack+0x364>
            sH->last = sH->first;
    d6ec:	|  |  |        |  |  \-> movea.l 128(sp),a0
    d6f0:	|  |  |        |  |      move.l (a0),d0
    d6f2:	|  |  |        |  |      movea.l 128(sp),a0
    d6f6:	|  |  |        |  |      move.l d0,4(a0)
    d6fa:	|  +--|--------|--|----- bra.w d568 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    d6fe:	|  |  |        |  \----> movea.l 128(sp),a0
    d702:	|  |  |        |         move.l 4(a0),d0
    d706:	|  |  |        |         addq.l #8,d0
    d708:	|  |  |        |         move.l d0,-(sp)
    d70a:	|  |  |        |         lea 14(sp),a0
    d70e:	|  |  |        |         move.l a0,-(sp)
    d710:	|  |  |        |         jsr 13a70 <addVarToStackQuick>
    d716:	|  |  |        |         addq.l #8,sp
    d718:	|  |  |        |         tst.w d0
    d71a:	|  |  |        |     /-- bne.s d720 <fileToStack+0x32a>
    d71c:	|  |  |        |     |   clr.w d0
    d71e:	+--|--|--------|-----|-- bra.s d75a <fileToStack+0x364>
            sH->last = sH->last->next;
    d720:	|  |  |        |     \-> movea.l 128(sp),a0
    d724:	|  |  |        |         movea.l 4(a0),a0
    d728:	|  |  |        |         move.l 8(a0),d0
    d72c:	|  |  |        |         movea.l 128(sp),a0
    d730:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    d734:	|  \--|--------|-------- bra.w d568 <fileToStack+0x172>
            if (tmp == -1) break;
    d738:	|     \--------|-------> nop
    d73a:	|              |     /-- bra.s d73e <fileToStack+0x348>
            if (!line) break;
    d73c:	|              \-----|-> nop
        }
    }
    Close(fp);
    d73e:	|                    \-> move.l 100(sp),38(sp)
    d744:	|                        move.l 1a7aa <DOSBase>,d0
    d74a:	|                        movea.l d0,a6
    d74c:	|                        move.l 38(sp),d1
    d750:	|                        jsr -36(a6)
    d754:	|                        move.l d0,34(sp)
    return TRUE;
    d758:	|                        moveq #1,d0
}
    d75a:	\----------------------> move.l (sp)+,d2
    d75c:	                         movea.l (sp)+,a6
    d75e:	                         lea 112(sp),sp
    d762:	                         rts

0000d764 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    d764:	          lea -32(sp),sp
    d768:	          move.l a6,-(sp)
    d76a:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    d76c:	          move.l 44(sp),-(sp)
    d770:	          jsr 6bc <get2bytes>
    d776:	          addq.l #4,sp
    d778:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    d77c:	          move.l 32(sp),d0
    d780:	          addq.l #1,d0
    d782:	          move.l d0,28(sp)
    d786:	          clr.l 24(sp)
    d78a:	          move.l 1a7a2 <SysBase>,d0
    d790:	          movea.l d0,a6
    d792:	          move.l 28(sp),d0
    d796:	          move.l 24(sp),d1
    d79a:	          jsr -684(a6)
    d79e:	          move.l d0,20(sp)
    d7a2:	          move.l 20(sp),d0
    d7a6:	          move.l d0,16(sp)
    if (!s) return NULL;
    d7aa:	      /-- bne.s d7b0 <readStringEncoded+0x4c>
    d7ac:	      |   moveq #0,d0
    d7ae:	/-----|-- bra.s d820 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    d7b0:	|     \-> clr.l 36(sp)
    d7b4:	|     /-- bra.s d806 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    d7b6:	|  /--|-> move.l 44(sp),12(sp)
    d7bc:	|  |  |   move.l 1a7aa <DOSBase>,d0
    d7c2:	|  |  |   movea.l d0,a6
    d7c4:	|  |  |   move.l 12(sp),d1
    d7c8:	|  |  |   jsr -306(a6)
    d7cc:	|  |  |   move.l d0,8(sp)
    d7d0:	|  |  |   move.l 8(sp),d0
    d7d4:	|  |  |   move.l d0,d1
    d7d6:	|  |  |   move.b 1a8b0 <encode1>,d2
    d7dc:	|  |  |   move.l 36(sp),d0
    d7e0:	|  |  |   movea.l 16(sp),a0
    d7e4:	|  |  |   adda.l d0,a0
    d7e6:	|  |  |   move.b d1,d0
    d7e8:	|  |  |   eor.b d2,d0
    d7ea:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    d7ec:	|  |  |   move.b 1a8b0 <encode1>,d0
    d7f2:	|  |  |   move.b d0,d1
    d7f4:	|  |  |   move.b 1a8b1 <encode2>,d0
    d7fa:	|  |  |   add.b d1,d0
    d7fc:	|  |  |   move.b d0,1a8b0 <encode1>
    for (a = 0; a < len; a++) {
    d802:	|  |  |   addq.l #1,36(sp)
    d806:	|  |  \-> move.l 36(sp),d0
    d80a:	|  |      cmp.l 32(sp),d0
    d80e:	|  \----- blt.s d7b6 <readStringEncoded+0x52>
    }
    s[len] = 0;
    d810:	|         move.l 32(sp),d0
    d814:	|         movea.l 16(sp),a0
    d818:	|         adda.l d0,a0
    d81a:	|         clr.b (a0)
    return s;
    d81c:	|         move.l 16(sp),d0
}
    d820:	\-------> move.l (sp)+,d2
    d822:	          movea.l (sp)+,a6
    d824:	          lea 32(sp),sp
    d828:	          rts

0000d82a <readTextPlain>:

char *readTextPlain(BPTR fp) {
    d82a:	             lea -104(sp),sp
    d82e:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    d832:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    d836:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    d83c:	             move.l 124(sp),106(sp)
    d842:	             clr.l 102(sp)
    d846:	             clr.l 98(sp)
    d84a:	             move.l 1a7aa <DOSBase>,d0
    d850:	             movea.l d0,a6
    d852:	             move.l 106(sp),d1
    d856:	             move.l 102(sp),d2
    d85a:	             move.l 98(sp),d3
    d85e:	             jsr -66(a6)
    d862:	             move.l d0,94(sp)
    d866:	             move.l 94(sp),d0
    d86a:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    d86e:	   /-------- bra.s d8b2 <readTextPlain+0x88>
        tmp = FGetC(fp);
    d870:	/--|-------> move.l 124(sp),22(sp)
    d876:	|  |         move.l 1a7aa <DOSBase>,d0
    d87c:	|  |         movea.l d0,a6
    d87e:	|  |         move.l 22(sp),d1
    d882:	|  |         jsr -306(a6)
    d886:	|  |         move.l d0,18(sp)
    d88a:	|  |         move.l 18(sp),d0
    d88e:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    d892:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    d898:	|  |         cmpi.b #10,17(sp)
    d89e:	|  |  /----- beq.s d8a8 <readTextPlain+0x7e>
    d8a0:	|  |  |      moveq #-1,d0
    d8a2:	|  |  |      cmp.l 110(sp),d0
    d8a6:	|  |  |  /-- bne.s d8ae <readTextPlain+0x84>
            keepGoing = FALSE;
    d8a8:	|  |  \--|-> clr.w 114(sp)
    d8ac:	|  +-----|-- bra.s d8b2 <readTextPlain+0x88>
        } else {
            stringSize++;
    d8ae:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    d8b2:	|  \-------> tst.w 114(sp)
    d8b6:	\----------- bne.s d870 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    d8b8:	             tst.l 116(sp)
    d8bc:	         /-- bne.s d8cc <readTextPlain+0xa2>
    d8be:	         |   moveq #-1,d0
    d8c0:	         |   cmp.l 110(sp),d0
    d8c4:	         +-- bne.s d8cc <readTextPlain+0xa2>
        return NULL;
    d8c6:	         |   moveq #0,d0
    d8c8:	      /--|-- bra.w d9b2 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    d8cc:	      |  \-> move.l 124(sp),86(sp)
    d8d2:	      |      move.l 90(sp),82(sp)
    d8d8:	      |      moveq #-1,d0
    d8da:	      |      move.l d0,78(sp)
    d8de:	      |      move.l 1a7aa <DOSBase>,d0
    d8e4:	      |      movea.l d0,a6
    d8e6:	      |      move.l 86(sp),d1
    d8ea:	      |      move.l 82(sp),d2
    d8ee:	      |      move.l 78(sp),d3
    d8f2:	      |      jsr -66(a6)
    d8f6:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    d8fa:	      |      move.l 116(sp),d0
    d8fe:	      |      addq.l #1,d0
    d900:	      |      move.l d0,70(sp)
    d904:	      |      clr.l 66(sp)
    d908:	      |      move.l 1a7a2 <SysBase>,d0
    d90e:	      |      movea.l d0,a6
    d910:	      |      move.l 70(sp),d0
    d914:	      |      move.l 66(sp),d1
    d918:	      |      jsr -684(a6)
    d91c:	      |      move.l d0,62(sp)
    d920:	      |      move.l 62(sp),d0
    d924:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    d928:	      |  /-- bne.s d930 <readTextPlain+0x106>
    d92a:	      |  |   moveq #0,d0
    d92c:	      +--|-- bra.w d9b2 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    d930:	      |  \-> move.l 124(sp),54(sp)
    d936:	      |      move.l 58(sp),50(sp)
    d93c:	      |      moveq #1,d0
    d93e:	      |      move.l d0,46(sp)
    d942:	      |      move.l 116(sp),42(sp)
    d948:	      |      move.l 1a7aa <DOSBase>,d0
    d94e:	      |      movea.l d0,a6
    d950:	      |      move.l 54(sp),d1
    d954:	      |      move.l 50(sp),d2
    d958:	      |      move.l 46(sp),d3
    d95c:	      |      move.l 42(sp),d4
    d960:	      |      jsr -324(a6)
    d964:	      |      move.l d0,38(sp)
    d968:	      |      move.l 38(sp),d0
    d96c:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    d970:	      |      move.l 34(sp),d0
    d974:	      |      cmp.l 116(sp),d0
    d978:	      |  /-- beq.s d988 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    d97a:	      |  |   pea 19084 <line.c.05397aaf+0x101>
    d980:	      |  |   jsr 16bac <KPrintF>
    d986:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    d988:	      |  \-> move.l 124(sp),30(sp)
    d98e:	      |      move.l 1a7aa <DOSBase>,d0
    d994:	      |      movea.l d0,a6
    d996:	      |      move.l 30(sp),d1
    d99a:	      |      jsr -306(a6)
    d99e:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    d9a2:	      |      move.l 116(sp),d0
    d9a6:	      |      movea.l 58(sp),a0
    d9aa:	      |      adda.l d0,a0
    d9ac:	      |      clr.b (a0)
    }

    return reply;
    d9ae:	      |      move.l 58(sp),d0
}
    d9b2:	      \----> movem.l (sp)+,d2-d4/a6
    d9b6:	             lea 104(sp),sp
    d9ba:	             rts

0000d9bc <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    d9bc:	                      lea -144(sp),sp
    d9c0:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    d9c4:	                      move.l 160(sp),148(sp)
    d9ca:	                      move.l #1006,144(sp)
    d9d2:	                      move.l 1a7aa <DOSBase>,d0
    d9d8:	                      movea.l d0,a6
    d9da:	                      move.l 148(sp),d1
    d9de:	                      move.l 144(sp),d2
    d9e2:	                      jsr -30(a6)
    d9e6:	                      move.l d0,140(sp)
    d9ea:	                      move.l 140(sp),d0
    d9ee:	                      move.l d0,136(sp)

    if (!fp) {
    d9f2:	                  /-- bne.s da0c <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    d9f4:	                  |   move.l 160(sp),-(sp)
    d9f8:	                  |   pea 190a5 <line.c.05397aaf+0x122>
    d9fe:	                  |   jsr 16bac <KPrintF>
    da04:	                  |   addq.l #8,sp
        return FALSE;
    da06:	                  |   clr.w d0
    da08:	/-----------------|-- bra.w dcc8 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    da0c:	|                 \-> movea.l 164(sp),a0
    da10:	|                     movea.l 4(a0),a0
    da14:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    da18:	|                     move.w 1a8b2 <saveEncoding>,d0
    da1e:	|                     move.l d0,d0
    da20:	|                     move.b d0,1a8b0 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    da26:	|                     move.w 1a8b2 <saveEncoding>,d0
    da2c:	|                     lsr.w #8,d0
    da2e:	|                     move.l d0,d0
    da30:	|                     move.b d0,1a8b1 <encode2>

    if (saveEncoding) {
    da36:	|                     move.w 1a8b2 <saveEncoding>,d0
    da3c:	|                 /-- beq.s da8e <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    da3e:	|                 |   move.l 136(sp),116(sp)
    da44:	|                 |   move.l #102207,112(sp)
    da4c:	|                 |   moveq #99,d0
    da4e:	|                 |   not.b d0
    da50:	|                 |   add.l sp,d0
    da52:	|                 |   addi.l #-144,d0
    da58:	|                 |   move.l d0,108(sp)
    da5c:	|                 |   move.l 1a7aa <DOSBase>,d0
    da62:	|                 |   movea.l d0,a6
    da64:	|                 |   move.l 116(sp),d1
    da68:	|                 |   move.l 112(sp),d2
    da6c:	|                 |   move.l 108(sp),d3
    da70:	|                 |   jsr -354(a6)
    da74:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    da78:	|                 |   move.l 136(sp),-(sp)
    da7c:	|                 |   pea 18fbe <line.c.05397aaf+0x3b>
    da82:	|                 |   jsr dcd2 <writeStringEncoded>
    da88:	|                 |   addq.l #8,sp
    da8a:	|  /--------------|-- bra.w dca0 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    da8e:	|  |              \-> move.l 136(sp),132(sp)
    da94:	|  |                  move.l #102233,128(sp)
    da9c:	|  |                  moveq #99,d1
    da9e:	|  |                  not.b d1
    daa0:	|  |                  add.l sp,d1
    daa2:	|  |                  addi.l #-144,d1
    daa8:	|  |                  move.l d1,124(sp)
    daac:	|  |                  move.l 1a7aa <DOSBase>,d0
    dab2:	|  |                  movea.l d0,a6
    dab4:	|  |                  move.l 132(sp),d1
    dab8:	|  |                  move.l 128(sp),d2
    dabc:	|  |                  move.l 124(sp),d3
    dac0:	|  |                  jsr -354(a6)
    dac4:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    dac8:	|  +----------------- bra.w dca0 <stackToFile+0x2e4>
        if (saveEncoding) {
    dacc:	|  |  /-------------> move.w 1a8b2 <saveEncoding>,d0
    dad2:	|  |  |     /-------- beq.w dc24 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    dad6:	|  |  |     |         movea.l 152(sp),a0
    dada:	|  |  |     |         move.l (a0),d0
    dadc:	|  |  |     |         moveq #1,d1
    dade:	|  |  |     |         cmp.l d0,d1
    dae0:	|  |  |     |     /-- beq.s db30 <stackToFile+0x174>
    dae2:	|  |  |     |     |   moveq #3,d1
    dae4:	|  |  |     |     |   cmp.l d0,d1
    dae6:	|  |  |     |  /--|-- bne.w dbf2 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    daea:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    daf0:	|  |  |     |  |  |   move.b 1a8b0 <encode1>,d0
    daf6:	|  |  |     |  |  |   ext.w d0
    daf8:	|  |  |     |  |  |   movea.w d0,a0
    dafa:	|  |  |     |  |  |   move.l a0,72(sp)
    dafe:	|  |  |     |  |  |   move.l 1a7aa <DOSBase>,d0
    db04:	|  |  |     |  |  |   movea.l d0,a6
    db06:	|  |  |     |  |  |   move.l 76(sp),d1
    db0a:	|  |  |     |  |  |   move.l 72(sp),d2
    db0e:	|  |  |     |  |  |   jsr -312(a6)
    db12:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    db16:	|  |  |     |  |  |   movea.l 152(sp),a0
    db1a:	|  |  |     |  |  |   move.l 4(a0),d0
    db1e:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    db22:	|  |  |     |  |  |   move.l d0,-(sp)
    db24:	|  |  |     |  |  |   jsr dcd2 <writeStringEncoded>
    db2a:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    db2c:	|  |  |  /--|--|--|-- bra.w dc96 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    db30:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    db34:	|  |  |  |  |  |      move.l 4(a0),d0
    db38:	|  |  |  |  |  |  /-- bmi.s dba8 <stackToFile+0x1ec>
    db3a:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    db3e:	|  |  |  |  |  |  |   move.l 4(a0),d0
    db42:	|  |  |  |  |  |  |   cmpi.l #255,d0
    db48:	|  |  |  |  |  |  +-- bgt.s dba8 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    db4a:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    db50:	|  |  |  |  |  |  |   move.b 1a8b0 <encode1>,d0
    db56:	|  |  |  |  |  |  |   eori.b #2,d0
    db5a:	|  |  |  |  |  |  |   ext.w d0
    db5c:	|  |  |  |  |  |  |   movea.w d0,a0
    db5e:	|  |  |  |  |  |  |   move.l a0,60(sp)
    db62:	|  |  |  |  |  |  |   move.l 1a7aa <DOSBase>,d0
    db68:	|  |  |  |  |  |  |   movea.l d0,a6
    db6a:	|  |  |  |  |  |  |   move.l 64(sp),d1
    db6e:	|  |  |  |  |  |  |   move.l 60(sp),d2
    db72:	|  |  |  |  |  |  |   jsr -312(a6)
    db76:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    db7a:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    db80:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    db84:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    db8a:	|  |  |  |  |  |  |   move.l 1a7aa <DOSBase>,d0
    db90:	|  |  |  |  |  |  |   movea.l d0,a6
    db92:	|  |  |  |  |  |  |   move.l 52(sp),d1
    db96:	|  |  |  |  |  |  |   move.l 48(sp),d2
    db9a:	|  |  |  |  |  |  |   jsr -312(a6)
    db9e:	|  |  |  |  |  |  |   move.l d0,44(sp)
    dba2:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    dba4:	|  |  |  +--|--|--|-- bra.w dc96 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    dba8:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    dbae:	|  |  |  |  |  |      move.b 1a8b0 <encode1>,d0
    dbb4:	|  |  |  |  |  |      eori.b #1,d0
    dbb8:	|  |  |  |  |  |      ext.w d0
    dbba:	|  |  |  |  |  |      movea.w d0,a0
    dbbc:	|  |  |  |  |  |      move.l a0,36(sp)
    dbc0:	|  |  |  |  |  |      move.l 1a7aa <DOSBase>,d0
    dbc6:	|  |  |  |  |  |      movea.l d0,a6
    dbc8:	|  |  |  |  |  |      move.l 40(sp),d1
    dbcc:	|  |  |  |  |  |      move.l 36(sp),d2
    dbd0:	|  |  |  |  |  |      jsr -312(a6)
    dbd4:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    dbd8:	|  |  |  |  |  |      movea.l 152(sp),a0
    dbdc:	|  |  |  |  |  |      move.l 4(a0),d0
    dbe0:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    dbe4:	|  |  |  |  |  |      move.l d0,-(sp)
    dbe6:	|  |  |  |  |  |      jsr 958 <put4bytes>
    dbec:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    dbee:	|  |  |  +--|--|----- bra.w dc96 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    dbf2:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    dbf6:	|  |  |  |  |         pea 190b7 <line.c.05397aaf+0x134>
    dbfc:	|  |  |  |  |         jsr 16bac <KPrintF>
    dc02:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    dc04:	|  |  |  |  |         move.l 136(sp),28(sp)
    dc0a:	|  |  |  |  |         move.l 1a7aa <DOSBase>,d0
    dc10:	|  |  |  |  |         movea.l d0,a6
    dc12:	|  |  |  |  |         move.l 28(sp),d1
    dc16:	|  |  |  |  |         jsr -36(a6)
    dc1a:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    dc1e:	|  |  |  |  |         clr.w d0
    dc20:	+--|--|--|--|-------- bra.w dcc8 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    dc24:	|  |  |  |  \-------> move.l 152(sp),d0
    dc28:	|  |  |  |            move.l d0,-(sp)
    dc2a:	|  |  |  |            jsr 14784 <getTextFromAnyVar>
    dc30:	|  |  |  |            addq.l #4,sp
    dc32:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    dc36:	|  |  |  |     /----- beq.s dcaa <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    dc38:	|  |  |  |     |      movea.l 100(sp),a0
    dc3c:	|  |  |  |     |      move.b (a0),d0
    dc3e:	|  |  |  |     |      ext.w d0
    dc40:	|  |  |  |     |      movea.w d0,a0
    dc42:	|  |  |  |     |      move.l a0,12(sp)
    dc46:	|  |  |  |     |      move.l 136(sp),96(sp)
    dc4c:	|  |  |  |     |      move.l #102675,92(sp)
    dc54:	|  |  |  |     |      moveq #99,d0
    dc56:	|  |  |  |     |      not.b d0
    dc58:	|  |  |  |     |      add.l sp,d0
    dc5a:	|  |  |  |     |      addi.l #-144,d0
    dc60:	|  |  |  |     |      move.l d0,88(sp)
    dc64:	|  |  |  |     |      move.l 1a7aa <DOSBase>,d0
    dc6a:	|  |  |  |     |      movea.l d0,a6
    dc6c:	|  |  |  |     |      move.l 96(sp),d1
    dc70:	|  |  |  |     |      move.l 92(sp),d2
    dc74:	|  |  |  |     |      move.l 88(sp),d3
    dc78:	|  |  |  |     |      jsr -354(a6)
    dc7c:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    dc80:	|  |  |  |     |      move.l 100(sp),80(sp)
    dc86:	|  |  |  |     |      move.l 1a7a2 <SysBase>,d0
    dc8c:	|  |  |  |     |      movea.l d0,a6
    dc8e:	|  |  |  |     |      movea.l 80(sp),a1
    dc92:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    dc96:	|  |  |  \-----|----> movea.l 152(sp),a0
    dc9a:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    dca0:	|  \--|--------|----> tst.l 152(sp)
    dca4:	|     \--------|----- bne.w dacc <stackToFile+0x110>
    dca8:	|              |  /-- bra.s dcac <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    dcaa:	|              \--|-> nop
    }
    Close(fp);
    dcac:	|                 \-> move.l 136(sp),20(sp)
    dcb2:	|                     move.l 1a7aa <DOSBase>,d0
    dcb8:	|                     movea.l d0,a6
    dcba:	|                     move.l 20(sp),d1
    dcbe:	|                     jsr -36(a6)
    dcc2:	|                     move.l d0,16(sp)
    return TRUE;
    dcc6:	|                     moveq #1,d0
}
    dcc8:	\-------------------> movem.l (sp)+,d2-d3/a6
    dccc:	                      lea 144(sp),sp
    dcd0:	                      rts

0000dcd2 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    dcd2:	       lea -20(sp),sp
    dcd6:	       move.l a6,-(sp)
    dcd8:	       move.l d2,-(sp)
	int a, len = strlen (s);
    dcda:	       move.l 32(sp),-(sp)
    dcde:	       jsr 1369a <strlen>
    dce4:	       addq.l #4,sp
    dce6:	       move.l d0,20(sp)

	put2bytes (len, fp);
    dcea:	       move.l 36(sp),-(sp)
    dcee:	       move.l 24(sp),-(sp)
    dcf2:	       jsr 8d0 <put2bytes>
    dcf8:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    dcfa:	       clr.l 24(sp)
    dcfe:	   /-- bra.s dd54 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    dd00:	/--|-> move.l 36(sp),16(sp)
    dd06:	|  |   move.l 24(sp),d0
    dd0a:	|  |   movea.l 32(sp),a0
    dd0e:	|  |   adda.l d0,a0
    dd10:	|  |   move.b (a0),d1
    dd12:	|  |   move.b 1a8b0 <encode1>,d0
    dd18:	|  |   eor.b d1,d0
    dd1a:	|  |   ext.w d0
    dd1c:	|  |   movea.w d0,a0
    dd1e:	|  |   move.l a0,12(sp)
    dd22:	|  |   move.l 1a7aa <DOSBase>,d0
    dd28:	|  |   movea.l d0,a6
    dd2a:	|  |   move.l 16(sp),d1
    dd2e:	|  |   move.l 12(sp),d2
    dd32:	|  |   jsr -312(a6)
    dd36:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    dd3a:	|  |   move.b 1a8b0 <encode1>,d0
    dd40:	|  |   move.b d0,d1
    dd42:	|  |   move.b 1a8b1 <encode2>,d0
    dd48:	|  |   add.b d1,d0
    dd4a:	|  |   move.b d0,1a8b0 <encode1>
	for (a = 0; a < len; a ++) {
    dd50:	|  |   addq.l #1,24(sp)
    dd54:	|  \-> move.l 24(sp),d0
    dd58:	|      cmp.l 20(sp),d0
    dd5c:	\----- blt.s dd00 <writeStringEncoded+0x2e>
	}
}
    dd5e:	       nop
    dd60:	       nop
    dd62:	       move.l (sp)+,d2
    dd64:	       movea.l (sp)+,a6
    dd66:	       lea 20(sp),sp
    dd6a:	       rts

0000dd6c <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    dd6c:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    dd6e:	                   tst.l 8(sp)
    dd72:	               /-- bne.s dd78 <failSecurityCheck+0xc>
    dd74:	               |   moveq #1,d0
    dd76:	/--------------|-- bra.s ddf6 <failSecurityCheck+0x8a>

	int a = 0;
    dd78:	|              \-> clr.l (sp)

	while (fn[a]) {
    dd7a:	|     /----------- bra.s dde8 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    dd7c:	|  /--|----------> move.l (sp),d0
    dd7e:	|  |  |            movea.l 8(sp),a0
    dd82:	|  |  |            adda.l d0,a0
    dd84:	|  |  |            move.b (a0),d0
    dd86:	|  |  |            ext.w d0
    dd88:	|  |  |            movea.w d0,a0
    dd8a:	|  |  |            moveq #124,d0
    dd8c:	|  |  |            cmp.l a0,d0
    dd8e:	|  |  |     /----- beq.s ddd0 <failSecurityCheck+0x64>
    dd90:	|  |  |     |      moveq #124,d1
    dd92:	|  |  |     |      cmp.l a0,d1
    dd94:	|  |  |  /--|----- blt.s dde6 <failSecurityCheck+0x7a>
    dd96:	|  |  |  |  |      moveq #92,d0
    dd98:	|  |  |  |  |      cmp.l a0,d0
    dd9a:	|  |  |  |  +----- beq.s ddd0 <failSecurityCheck+0x64>
    dd9c:	|  |  |  |  |      moveq #92,d1
    dd9e:	|  |  |  |  |      cmp.l a0,d1
    dda0:	|  |  |  +--|----- blt.s dde6 <failSecurityCheck+0x7a>
    dda2:	|  |  |  |  |      moveq #60,d0
    dda4:	|  |  |  |  |      cmp.l a0,d0
    dda6:	|  |  |  |  |  /-- blt.s ddc6 <failSecurityCheck+0x5a>
    dda8:	|  |  |  |  |  |   moveq #34,d1
    ddaa:	|  |  |  |  |  |   cmp.l a0,d1
    ddac:	|  |  |  +--|--|-- bgt.s dde6 <failSecurityCheck+0x7a>
    ddae:	|  |  |  |  |  |   moveq #-34,d1
    ddb0:	|  |  |  |  |  |   add.l a0,d1
    ddb2:	|  |  |  |  |  |   move.l #83894529,d0
    ddb8:	|  |  |  |  |  |   lsr.l d1,d0
    ddba:	|  |  |  |  |  |   moveq #1,d1
    ddbc:	|  |  |  |  |  |   and.l d1,d0
    ddbe:	|  |  |  |  |  |   sne d0
    ddc0:	|  |  |  |  |  |   neg.b d0
    ddc2:	|  |  |  |  +--|-- bne.s ddd0 <failSecurityCheck+0x64>
    ddc4:	|  |  |  +--|--|-- bra.s dde6 <failSecurityCheck+0x7a>
    ddc6:	|  |  |  |  |  \-> lea -62(a0),a0
    ddca:	|  |  |  |  |      moveq #1,d0
    ddcc:	|  |  |  |  |      cmp.l a0,d0
    ddce:	|  |  |  +--|----- bcs.s dde6 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    ddd0:	|  |  |  |  \----> move.l 8(sp),-(sp)
    ddd4:	|  |  |  |         pea 19117 <line.c.05397aaf+0x194>
    ddda:	|  |  |  |         jsr 16bac <KPrintF>
    dde0:	|  |  |  |         addq.l #8,sp
				return TRUE;
    dde2:	|  |  |  |         moveq #1,d0
    dde4:	+--|--|--|-------- bra.s ddf6 <failSecurityCheck+0x8a>
		}
		a++;
    dde6:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    dde8:	|  |  \----------> move.l (sp),d0
    ddea:	|  |               movea.l 8(sp),a0
    ddee:	|  |               adda.l d0,a0
    ddf0:	|  |               move.b (a0),d0
    ddf2:	|  \-------------- bne.s dd7c <failSecurityCheck+0x10>
	}
	return FALSE;
    ddf4:	|                  clr.w d0
}
    ddf6:	\----------------> addq.l #4,sp
    ddf8:	                   rts

0000ddfa <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    ddfa:	             lea -24(sp),sp
    ddfe:	             move.l a6,-(sp)
    de00:	             move.l 40(sp),d0
    de04:	             move.w d0,d0
    de06:	             move.w d0,6(sp)
	int fileNum = -1;
    de0a:	             moveq #-1,d0
    de0c:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    de10:	             jsr 5a8e <killSpeechTimers>

	switch (numParams) {
    de16:	             moveq #2,d0
    de18:	             cmp.l 32(sp),d0
    de1c:	      /----- beq.s de60 <sayCore+0x66>
    de1e:	      |      moveq #3,d0
    de20:	      |      cmp.l 32(sp),d0
    de24:	/-----|----- bne.w df42 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    de28:	|     |      movea.l 36(sp),a0
    de2c:	|     |      move.l 24(a0),d0
    de30:	|     |      move.l d0,-(sp)
    de32:	|     |      pea 5 <_start+0x5>
    de36:	|     |      lea 20(sp),a0
    de3a:	|     |      move.l a0,-(sp)
    de3c:	|     |      jsr 141ae <getValueType>
    de42:	|     |      lea 12(sp),sp
    de46:	|     |      tst.w d0
    de48:	|     |  /-- bne.s de50 <sayCore+0x56>
    de4a:	|     |  |   moveq #1,d0
    de4c:	|  /--|--|-- bra.w df52 <sayCore+0x158>
			trimStack (&fun -> stack);
    de50:	|  |  |  \-> moveq #24,d0
    de52:	|  |  |      add.l 36(sp),d0
    de56:	|  |  |      move.l d0,-(sp)
    de58:	|  |  |      jsr 14b32 <trimStack>
    de5e:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    de60:	|  |  \----> movea.l 36(sp),a0
    de64:	|  |         move.l 24(a0),d0
    de68:	|  |         move.l d0,-(sp)
    de6a:	|  |         jsr 14784 <getTextFromAnyVar>
    de70:	|  |         addq.l #4,sp
    de72:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    de76:	|  |     /-- bne.s de7e <sayCore+0x84>
    de78:	|  |     |   moveq #1,d0
    de7a:	|  +-----|-- bra.w df52 <sayCore+0x158>
			trimStack (&fun -> stack);
    de7e:	|  |     \-> moveq #24,d0
    de80:	|  |         add.l 36(sp),d0
    de84:	|  |         move.l d0,-(sp)
    de86:	|  |         jsr 14b32 <trimStack>
    de8c:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    de8e:	|  |         movea.l 36(sp),a0
    de92:	|  |         move.l 24(a0),d0
    de96:	|  |         move.l d0,-(sp)
    de98:	|  |         pea 7 <_start+0x7>
    de9c:	|  |         lea 16(sp),a0
    dea0:	|  |         move.l a0,-(sp)
    dea2:	|  |         jsr 141ae <getValueType>
    dea8:	|  |         lea 12(sp),sp
    deac:	|  |         tst.w d0
    deae:	|  |     /-- bne.s deb6 <sayCore+0xbc>
    deb0:	|  |     |   moveq #1,d0
    deb2:	|  +-----|-- bra.w df52 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    deb6:	|  |     \-> movea.l 36(sp),a0
    deba:	|  |         move.l 24(a0),d0
    debe:	|  |         move.l d0,-(sp)
    dec0:	|  |         pea 7 <_start+0x7>
    dec4:	|  |         lea 16(sp),a0
    dec8:	|  |         move.l a0,-(sp)
    deca:	|  |         jsr 141ae <getValueType>
    ded0:	|  |         lea 12(sp),sp
    ded4:	|  |         tst.w d0
    ded6:	|  |     /-- bne.s dedc <sayCore+0xe2>
    ded8:	|  |     |   moveq #1,d0
    deda:	|  +-----|-- bra.s df52 <sayCore+0x158>
			trimStack (&fun -> stack);
    dedc:	|  |     \-> moveq #24,d0
    dede:	|  |         add.l 36(sp),d0
    dee2:	|  |         move.l d0,-(sp)
    dee4:	|  |         jsr 14b32 <trimStack>
    deea:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    deec:	|  |         movea.w 6(sp),a0
    def0:	|  |         move.l 12(sp),d1
    def4:	|  |         move.l 8(sp),d0
    def8:	|  |         move.l a0,-(sp)
    defa:	|  |         move.l d1,-(sp)
    defc:	|  |         move.l d0,-(sp)
    defe:	|  |         move.l 36(sp),-(sp)
    df02:	|  |         jsr 7a3a <wrapSpeech>
    df08:	|  |         lea 16(sp),sp
    df0c:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    df10:	|  |         movea.l 36(sp),a0
    df14:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    df1a:	|  |         movea.l 36(sp),a0
    df1e:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    df24:	|  |         move.l 24(sp),16(sp)
    df2a:	|  |         move.l 1a7a2 <SysBase>,d0
    df30:	|  |         movea.l d0,a6
    df32:	|  |         movea.l 16(sp),a1
    df36:	|  |         jsr -690(a6)
			newText = NULL;
    df3a:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    df3e:	|  |         moveq #0,d0
    df40:	|  +-------- bra.s df52 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    df42:	\--|-------> pea 1919d <line.c.05397aaf+0x21a>
    df48:	   |         jsr 16bac <KPrintF>
    df4e:	   |         addq.l #4,sp
	return BR_ERROR;
    df50:	   |         moveq #1,d0
}
    df52:	   \-------> movea.l (sp)+,a6
    df54:	             lea 24(sp),sp
    df58:	             rts

0000df5a <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    df5a:	pea 1 <_start+0x1>
    df5e:	move.l 12(sp),-(sp)
    df62:	move.l 12(sp),-(sp)
    df66:	jsr ddfa <sayCore>
    df6c:	lea 12(sp),sp
}
    df70:	rts

0000df72 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    df72:	clr.l -(sp)
    df74:	move.l 12(sp),-(sp)
    df78:	move.l 12(sp),-(sp)
    df7c:	jsr ddfa <sayCore>
    df82:	lea 12(sp),sp
}
    df86:	rts

0000df88 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    df88:	jsr 14b7a <freeze>
	freezeSubs (); 
    df8e:	jsr 507e <freezeSubs>
	fun -> freezerLevel = 0;
    df94:	movea.l 8(sp),a0
    df98:	clr.b 56(a0)
	return BR_CONTINUE;
    df9c:	moveq #2,d0
}
    df9e:	rts

0000dfa0 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    dfa0:	jsr 14d3e <unfreeze>
	unfreezeSubs (); 
    dfa6:	jsr 64d0 <unfreezeSubs>
	return BR_CONTINUE;
    dfac:	moveq #2,d0
}
    dfae:	rts

0000dfb0 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    dfb0:	nop
    dfb2:	rts

0000dfb4 <builtIn_setCursor>:

builtIn(setCursor)
{
    dfb4:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    dfb6:	movea.l 12(sp),a0
    dfba:	move.l 24(a0),d0
    dfbe:	move.l d0,-(sp)
    dfc0:	jsr 14686 <getAnimationFromVar>
    dfc6:	addq.l #4,sp
    dfc8:	move.l d0,(sp)
	pickAnimCursor (aa);
    dfca:	move.l (sp),-(sp)
    dfcc:	jsr d6c <pickAnimCursor>
    dfd2:	addq.l #4,sp
	trimStack (&fun -> stack);
    dfd4:	moveq #24,d0
    dfd6:	add.l 12(sp),d0
    dfda:	move.l d0,-(sp)
    dfdc:	jsr 14b32 <trimStack>
    dfe2:	addq.l #4,sp
	return BR_CONTINUE;
    dfe4:	moveq #2,d0
}
    dfe6:	addq.l #4,sp
    dfe8:	rts

0000dfea <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    dfea:	move.l 1a75e <input+0xa>,d1
    dff0:	move.l 1a8b4 <cameraX>,d0
    dff6:	add.l d0,d1
    dff8:	moveq #28,d0
    dffa:	add.l 8(sp),d0
    dffe:	move.l d1,-(sp)
    e000:	pea 1 <_start+0x1>
    e004:	move.l d0,-(sp)
    e006:	jsr 14aa0 <setVariable>
    e00c:	lea 12(sp),sp
	return BR_CONTINUE;
    e010:	moveq #2,d0
}
    e012:	rts

0000e014 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e014:	move.l 1a762 <input+0xe>,d1
    e01a:	move.l 1a8b8 <cameraY>,d0
    e020:	add.l d0,d1
    e022:	moveq #28,d0
    e024:	add.l 8(sp),d0
    e028:	move.l d1,-(sp)
    e02a:	pea 1 <_start+0x1>
    e02e:	move.l d0,-(sp)
    e030:	jsr 14aa0 <setVariable>
    e036:	lea 12(sp),sp
	return BR_CONTINUE;
    e03a:	moveq #2,d0
}
    e03c:	rts

0000e03e <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e03e:	move.l 1a75e <input+0xa>,d0
    e044:	move.l d0,-(sp)
    e046:	jsr 16fe8 <__floatsisf>
    e04c:	addq.l #4,sp
    e04e:	move.l d0,d1
    e050:	move.l 1a142 <cameraZoom>,d0
    e056:	move.l d0,-(sp)
    e058:	move.l d1,-(sp)
    e05a:	jsr 1709a <__mulsf3>
    e060:	addq.l #8,sp
    e062:	move.l d0,-(sp)
    e064:	jsr 16f80 <__fixsfsi>
    e06a:	addq.l #4,sp
    e06c:	move.l d0,d1
    e06e:	moveq #28,d0
    e070:	add.l 8(sp),d0
    e074:	move.l d1,-(sp)
    e076:	pea 1 <_start+0x1>
    e07a:	move.l d0,-(sp)
    e07c:	jsr 14aa0 <setVariable>
    e082:	lea 12(sp),sp
	return BR_CONTINUE;
    e086:	moveq #2,d0
}
    e088:	rts

0000e08a <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e08a:	move.l 1a762 <input+0xe>,d0
    e090:	move.l d0,-(sp)
    e092:	jsr 16fe8 <__floatsisf>
    e098:	addq.l #4,sp
    e09a:	move.l d0,d1
    e09c:	move.l 1a142 <cameraZoom>,d0
    e0a2:	move.l d0,-(sp)
    e0a4:	move.l d1,-(sp)
    e0a6:	jsr 1709a <__mulsf3>
    e0ac:	addq.l #8,sp
    e0ae:	move.l d0,-(sp)
    e0b0:	jsr 16f80 <__fixsfsi>
    e0b6:	addq.l #4,sp
    e0b8:	move.l d0,d1
    e0ba:	moveq #28,d0
    e0bc:	add.l 8(sp),d0
    e0c0:	move.l d1,-(sp)
    e0c2:	pea 1 <_start+0x1>
    e0c6:	move.l d0,-(sp)
    e0c8:	jsr 14aa0 <setVariable>
    e0ce:	lea 12(sp),sp
	return BR_CONTINUE;
    e0d2:	moveq #2,d0
}
    e0d4:	rts

0000e0d6 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e0d6:	jsr 74ee <statusBarText>
    e0dc:	move.l d0,d1
    e0de:	moveq #28,d0
    e0e0:	add.l 8(sp),d0
    e0e4:	move.l d1,-(sp)
    e0e6:	move.l d0,-(sp)
    e0e8:	jsr 143d0 <makeTextVar>
    e0ee:	addq.l #8,sp
	return BR_CONTINUE;
    e0f0:	moveq #2,d0
}
    e0f2:	rts

0000e0f4 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e0f4:	       lea -20(sp),sp
    e0f8:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e0fa:	       movea.l 32(sp),a0
    e0fe:	       move.l 24(a0),d0
    e102:	       move.l d0,-(sp)
    e104:	       jsr 14784 <getTextFromAnyVar>
    e10a:	       addq.l #4,sp
    e10c:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e110:	   /-- bne.s e118 <builtIn_getMatchingFiles+0x24>
    e112:	   |   moveq #1,d0
    e114:	/--|-- bra.w e1da <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e118:	|  \-> moveq #24,d0
    e11a:	|      add.l 32(sp),d0
    e11e:	|      move.l d0,-(sp)
    e120:	|      jsr 14b32 <trimStack>
    e126:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e128:	|      moveq #28,d0
    e12a:	|      add.l 32(sp),d0
    e12e:	|      move.l d0,-(sp)
    e130:	|      jsr 143fc <unlinkVar>
    e136:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e138:	|      movea.l 32(sp),a0
    e13c:	|      moveq #6,d0
    e13e:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e142:	|      moveq #12,d0
    e144:	|      move.l d0,16(sp)
    e148:	|      clr.l 12(sp)
    e14c:	|      move.l 1a7a2 <SysBase>,d0
    e152:	|      movea.l d0,a6
    e154:	|      move.l 16(sp),d0
    e158:	|      move.l 12(sp),d1
    e15c:	|      jsr -684(a6)
    e160:	|      move.l d0,8(sp)
    e164:	|      move.l 8(sp),d0
    e168:	|      movea.l 32(sp),a0
    e16c:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e170:	|      moveq #32,d0
    e172:	|      add.l 32(sp),d0
    e176:	|  /-- bne.s e17c <builtIn_getMatchingFiles+0x88>
    e178:	|  |   moveq #1,d0
    e17a:	+--|-- bra.s e1da <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e17c:	|  \-> movea.l 32(sp),a0
    e180:	|      movea.l 32(a0),a0
    e184:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e186:	|      movea.l 32(sp),a0
    e18a:	|      movea.l 32(a0),a0
    e18e:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e192:	|      movea.l 32(sp),a0
    e196:	|      movea.l 32(a0),a0
    e19a:	|      moveq #1,d0
    e19c:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e1a0:	|      movea.l 32(sp),a0
    e1a4:	|      move.l 32(a0),d0
    e1a8:	|      move.l 20(sp),-(sp)
    e1ac:	|      move.l d0,-(sp)
    e1ae:	|      jsr 13f6a <getSavedGamesStack>
    e1b4:	|      addq.l #8,sp
    e1b6:	|      tst.w d0
    e1b8:	|  /-- bne.s e1be <builtIn_getMatchingFiles+0xca>
    e1ba:	|  |   moveq #1,d0
    e1bc:	+--|-- bra.s e1da <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e1be:	|  \-> move.l 20(sp),4(sp)
    e1c4:	|      move.l 1a7a2 <SysBase>,d0
    e1ca:	|      movea.l d0,a6
    e1cc:	|      movea.l 4(sp),a1
    e1d0:	|      jsr -690(a6)
	newText = NULL;
    e1d4:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e1d8:	|      moveq #2,d0
}
    e1da:	\----> movea.l (sp)+,a6
    e1dc:	       lea 20(sp),sp
    e1e0:	       rts

0000e1e2 <builtIn_saveGame>:

builtIn(saveGame)
{
    e1e2:	       lea -12(sp),sp
    e1e6:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e1e8:	       movea.l 24(sp),a0
    e1ec:	       move.l 24(a0),d0
    e1f0:	       move.l d0,-(sp)
    e1f2:	       jsr 14784 <getTextFromAnyVar>
    e1f8:	       addq.l #4,sp
    e1fa:	       move.l d0,1a76e <loadNow>
    trimStack(&fun->stack);
    e200:	       moveq #24,d0
    e202:	       add.l 24(sp),d0
    e206:	       move.l d0,-(sp)
    e208:	       jsr 14b32 <trimStack>
    e20e:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e210:	       move.l 1a76e <loadNow>,d0
    e216:	       move.l d0,-(sp)
    e218:	       jsr 2fe <encodeFilename>
    e21e:	       addq.l #4,sp
    e220:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e224:	       move.l 1a76e <loadNow>,8(sp)
    e22c:	       move.l 1a7a2 <SysBase>,d0
    e232:	       movea.l d0,a6
    e234:	       movea.l 8(sp),a1
    e238:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e23c:	       move.l 12(sp),-(sp)
    e240:	       jsr dd6c <failSecurityCheck>
    e246:	       addq.l #4,sp
    e248:	       tst.w d0
    e24a:	   /-- beq.s e250 <builtIn_saveGame+0x6e>
    e24c:	   |   moveq #1,d0
    e24e:	/--|-- bra.s e2a0 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e250:	|  \-> move.l 12(sp),-(sp)
    e254:	|      pea 191cb <line.c.05397aaf+0x248>
    e25a:	|      jsr 136da <joinStrings>
    e260:	|      addq.l #8,sp
    e262:	|      move.l d0,1a76e <loadNow>
    FreeVec(aaaaa);
    e268:	|      move.l 12(sp),4(sp)
    e26e:	|      move.l 1a7a2 <SysBase>,d0
    e274:	|      movea.l d0,a6
    e276:	|      movea.l 4(sp),a1
    e27a:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e27e:	|      moveq #28,d0
    e280:	|      add.l 24(sp),d0
    e284:	|      clr.l -(sp)
    e286:	|      pea 1 <_start+0x1>
    e28a:	|      move.l d0,-(sp)
    e28c:	|      jsr 14aa0 <setVariable>
    e292:	|      lea 12(sp),sp
    saverFunc = fun;
    e296:	|      move.l 24(sp),1a8c4 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e29e:	|      moveq #0,d0
}
    e2a0:	\----> movea.l (sp)+,a6
    e2a2:	       lea 12(sp),sp
    e2a6:	       rts

0000e2a8 <builtIn_fileExists>:

builtIn(fileExists)
{
    e2a8:	       lea -36(sp),sp
    e2ac:	       move.l a6,-(sp)
    e2ae:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e2b0:	       movea.l 52(sp),a0
    e2b4:	       move.l 24(a0),d0
    e2b8:	       move.l d0,-(sp)
    e2ba:	       jsr 14784 <getTextFromAnyVar>
    e2c0:	       addq.l #4,sp
    e2c2:	       move.l d0,1a76e <loadNow>
    trimStack(&fun->stack);
    e2c8:	       moveq #24,d0
    e2ca:	       add.l 52(sp),d0
    e2ce:	       move.l d0,-(sp)
    e2d0:	       jsr 14b32 <trimStack>
    e2d6:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e2d8:	       move.l 1a76e <loadNow>,d0
    e2de:	       move.l d0,-(sp)
    e2e0:	       jsr 2fe <encodeFilename>
    e2e6:	       addq.l #4,sp
    e2e8:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e2ec:	       move.l 1a76e <loadNow>,36(sp)
    e2f4:	       move.l 1a7a2 <SysBase>,d0
    e2fa:	       movea.l d0,a6
    e2fc:	       movea.l 36(sp),a1
    e300:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e304:	       move.l 40(sp),-(sp)
    e308:	       jsr dd6c <failSecurityCheck>
    e30e:	       addq.l #4,sp
    e310:	       tst.w d0
    e312:	   /-- beq.s e31a <builtIn_fileExists+0x72>
    e314:	   |   moveq #1,d0
    e316:	/--|-- bra.w e3ba <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e31a:	|  \-> move.l 40(sp),32(sp)
    e320:	|      move.l #1005,28(sp)
    e328:	|      move.l 1a7aa <DOSBase>,d0
    e32e:	|      movea.l d0,a6
    e330:	|      move.l 32(sp),d1
    e334:	|      move.l 28(sp),d2
    e338:	|      jsr -30(a6)
    e33c:	|      move.l d0,24(sp)
    e340:	|      move.l 24(sp),d0
    e344:	|      move.l d0,20(sp)
    if (!fp) {        
    e348:	|  /-- bne.s e358 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e34a:	|  |   pea 191cd <line.c.05397aaf+0x24a>
    e350:	|  |   jsr 16bac <KPrintF>
    e356:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e358:	|  \-> tst.l 20(sp)
    e35c:	|      sne d0
    e35e:	|      neg.b d0
    e360:	|      moveq #0,d1
    e362:	|      move.b d0,d1
    e364:	|      moveq #28,d0
    e366:	|      add.l 52(sp),d0
    e36a:	|      move.l d1,-(sp)
    e36c:	|      pea 1 <_start+0x1>
    e370:	|      move.l d0,-(sp)
    e372:	|      jsr 14aa0 <setVariable>
    e378:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e37c:	|      tst.l 20(sp)
    e380:	|  /-- beq.s e39c <builtIn_fileExists+0xf4>
    e382:	|  |   move.l 20(sp),16(sp)
    e388:	|  |   move.l 1a7aa <DOSBase>,d0
    e38e:	|  |   movea.l d0,a6
    e390:	|  |   move.l 16(sp),d1
    e394:	|  |   jsr -36(a6)
    e398:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e39c:	|  \-> move.l 40(sp),8(sp)
    e3a2:	|      move.l 1a7a2 <SysBase>,d0
    e3a8:	|      movea.l d0,a6
    e3aa:	|      movea.l 8(sp),a1
    e3ae:	|      jsr -690(a6)
    loadNow = NULL;
    e3b2:	|      clr.l 1a76e <loadNow>
    return BR_CONTINUE;
    e3b8:	|      moveq #2,d0
}
    e3ba:	\----> move.l (sp)+,d2
    e3bc:	       movea.l (sp)+,a6
    e3be:	       lea 36(sp),sp
    e3c2:	       rts

0000e3c4 <builtIn_loadGame>:

builtIn(loadGame)
{
    e3c4:	       lea -36(sp),sp
    e3c8:	       move.l a6,-(sp)
    e3ca:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e3cc:	       movea.l 52(sp),a0
    e3d0:	       move.l 24(a0),d0
    e3d4:	       move.l d0,-(sp)
    e3d6:	       jsr 14784 <getTextFromAnyVar>
    e3dc:	       addq.l #4,sp
    e3de:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e3e2:	       moveq #24,d0
    e3e4:	       add.l 52(sp),d0
    e3e8:	       move.l d0,-(sp)
    e3ea:	       jsr 14b32 <trimStack>
    e3f0:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e3f2:	       move.l 40(sp),-(sp)
    e3f6:	       jsr 2fe <encodeFilename>
    e3fc:	       addq.l #4,sp
    e3fe:	       move.l d0,1a76e <loadNow>
    FreeVec(aaaaa);
    e404:	       move.l 40(sp),36(sp)
    e40a:	       move.l 1a7a2 <SysBase>,d0
    e410:	       movea.l d0,a6
    e412:	       movea.l 36(sp),a1
    e416:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e41a:	       move.l 1a76e <loadNow>,d0
    e420:	       move.l d0,-(sp)
    e422:	       jsr dd6c <failSecurityCheck>
    e428:	       addq.l #4,sp
    e42a:	       tst.w d0
    e42c:	   /-- beq.s e432 <builtIn_loadGame+0x6e>
    e42e:	   |   moveq #1,d0
    e430:	/--|-- bra.s e4a2 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e432:	|  \-> move.l 1a76e <loadNow>,32(sp)
    e43a:	|      move.l #1005,28(sp)
    e442:	|      move.l 1a7aa <DOSBase>,d0
    e448:	|      movea.l d0,a6
    e44a:	|      move.l 32(sp),d1
    e44e:	|      move.l 28(sp),d2
    e452:	|      jsr -30(a6)
    e456:	|      move.l d0,24(sp)
    e45a:	|      move.l 24(sp),d0
    e45e:	|      move.l d0,20(sp)
    if (fp) {
    e462:	|  /-- beq.s e482 <builtIn_loadGame+0xbe>
        Close(fp);
    e464:	|  |   move.l 20(sp),12(sp)
    e46a:	|  |   move.l 1a7aa <DOSBase>,d0
    e470:	|  |   movea.l d0,a6
    e472:	|  |   move.l 12(sp),d1
    e476:	|  |   jsr -36(a6)
    e47a:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e47e:	|  |   moveq #0,d0
    e480:	+--|-- bra.s e4a2 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e482:	|  \-> move.l 1a76e <loadNow>,16(sp)
    e48a:	|      move.l 1a7a2 <SysBase>,d0
    e490:	|      movea.l d0,a6
    e492:	|      movea.l 16(sp),a1
    e496:	|      jsr -690(a6)
    loadNow = NULL;
    e49a:	|      clr.l 1a76e <loadNow>
    return BR_CONTINUE;
    e4a0:	|      moveq #2,d0
}
    e4a2:	\----> move.l (sp)+,d2
    e4a4:	       movea.l (sp)+,a6
    e4a6:	       lea 36(sp),sp
    e4aa:	       rts

0000e4ac <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e4ac:	move.l 1a89a <sceneHeight>,d0
    e4b2:	move.l d0,d1
    e4b4:	move.l 1a896 <sceneWidth>,d0
    e4ba:	move.l d1,-(sp)
    e4bc:	move.l d0,-(sp)
    e4be:	clr.l -(sp)
    e4c0:	clr.l -(sp)
    e4c2:	jsr cc60 <blankScreen>
    e4c8:	lea 16(sp),sp
	return BR_CONTINUE;
    e4cc:	moveq #2,d0
}
    e4ce:	rts

0000e4d0 <builtIn_blankArea>:

builtIn(blankArea)
{
    e4d0:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e4d4:	       movea.l 24(sp),a0
    e4d8:	       move.l 24(a0),d0
    e4dc:	       move.l d0,-(sp)
    e4de:	       pea 1 <_start+0x1>
    e4e2:	       lea 8(sp),a0
    e4e6:	       move.l a0,-(sp)
    e4e8:	       jsr 141ae <getValueType>
    e4ee:	       lea 12(sp),sp
    e4f2:	       tst.w d0
    e4f4:	   /-- bne.s e4fc <builtIn_blankArea+0x2c>
    e4f6:	   |   moveq #1,d0
    e4f8:	/--|-- bra.w e5d2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e4fc:	|  \-> moveq #24,d0
    e4fe:	|      add.l 24(sp),d0
    e502:	|      move.l d0,-(sp)
    e504:	|      jsr 14b32 <trimStack>
    e50a:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e50c:	|      movea.l 24(sp),a0
    e510:	|      move.l 24(a0),d0
    e514:	|      move.l d0,-(sp)
    e516:	|      pea 1 <_start+0x1>
    e51a:	|      lea 12(sp),a0
    e51e:	|      move.l a0,-(sp)
    e520:	|      jsr 141ae <getValueType>
    e526:	|      lea 12(sp),sp
    e52a:	|      tst.w d0
    e52c:	|  /-- bne.s e534 <builtIn_blankArea+0x64>
    e52e:	|  |   moveq #1,d0
    e530:	+--|-- bra.w e5d2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e534:	|  \-> moveq #24,d0
    e536:	|      add.l 24(sp),d0
    e53a:	|      move.l d0,-(sp)
    e53c:	|      jsr 14b32 <trimStack>
    e542:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e544:	|      movea.l 24(sp),a0
    e548:	|      move.l 24(a0),d0
    e54c:	|      move.l d0,-(sp)
    e54e:	|      pea 1 <_start+0x1>
    e552:	|      moveq #16,d0
    e554:	|      add.l sp,d0
    e556:	|      move.l d0,-(sp)
    e558:	|      jsr 141ae <getValueType>
    e55e:	|      lea 12(sp),sp
    e562:	|      tst.w d0
    e564:	|  /-- bne.s e56a <builtIn_blankArea+0x9a>
    e566:	|  |   moveq #1,d0
    e568:	+--|-- bra.s e5d2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e56a:	|  \-> moveq #24,d0
    e56c:	|      add.l 24(sp),d0
    e570:	|      move.l d0,-(sp)
    e572:	|      jsr 14b32 <trimStack>
    e578:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e57a:	|      movea.l 24(sp),a0
    e57e:	|      move.l 24(a0),d0
    e582:	|      move.l d0,-(sp)
    e584:	|      pea 1 <_start+0x1>
    e588:	|      moveq #20,d0
    e58a:	|      add.l sp,d0
    e58c:	|      move.l d0,-(sp)
    e58e:	|      jsr 141ae <getValueType>
    e594:	|      lea 12(sp),sp
    e598:	|      tst.w d0
    e59a:	|  /-- bne.s e5a0 <builtIn_blankArea+0xd0>
    e59c:	|  |   moveq #1,d0
    e59e:	+--|-- bra.s e5d2 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e5a0:	|  \-> moveq #24,d0
    e5a2:	|      add.l 24(sp),d0
    e5a6:	|      move.l d0,-(sp)
    e5a8:	|      jsr 14b32 <trimStack>
    e5ae:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    e5b0:	|      movea.l (sp),a1
    e5b2:	|      movea.l 4(sp),a0
    e5b6:	|      move.l 8(sp),d1
    e5ba:	|      move.l 12(sp),d0
    e5be:	|      move.l a1,-(sp)
    e5c0:	|      move.l a0,-(sp)
    e5c2:	|      move.l d1,-(sp)
    e5c4:	|      move.l d0,-(sp)
    e5c6:	|      jsr cc60 <blankScreen>
    e5cc:	|      lea 16(sp),sp
	return BR_CONTINUE;
    e5d0:	|      moveq #2,d0
}
    e5d2:	\----> lea 16(sp),sp
    e5d6:	       rts

0000e5d8 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    e5d8:	jsr cc74 <darkScreen>
	return BR_CONTINUE;
    e5de:	moveq #2,d0
}
    e5e0:	rts

0000e5e2 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    e5e2:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e5e6:	       movea.l 20(sp),a0
    e5ea:	       move.l 24(a0),d0
    e5ee:	       move.l d0,-(sp)
    e5f0:	       pea 1 <_start+0x1>
    e5f4:	       lea 8(sp),a0
    e5f8:	       move.l a0,-(sp)
    e5fa:	       jsr 141ae <getValueType>
    e600:	       lea 12(sp),sp
    e604:	       tst.w d0
    e606:	   /-- bne.s e60e <builtIn_addOverlay+0x2c>
    e608:	   |   moveq #1,d0
    e60a:	/--|-- bra.w e6a6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e60e:	|  \-> moveq #24,d0
    e610:	|      add.l 20(sp),d0
    e614:	|      move.l d0,-(sp)
    e616:	|      jsr 14b32 <trimStack>
    e61c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e61e:	|      movea.l 20(sp),a0
    e622:	|      move.l 24(a0),d0
    e626:	|      move.l d0,-(sp)
    e628:	|      pea 1 <_start+0x1>
    e62c:	|      moveq #12,d0
    e62e:	|      add.l sp,d0
    e630:	|      move.l d0,-(sp)
    e632:	|      jsr 141ae <getValueType>
    e638:	|      lea 12(sp),sp
    e63c:	|      tst.w d0
    e63e:	|  /-- bne.s e644 <builtIn_addOverlay+0x62>
    e640:	|  |   moveq #1,d0
    e642:	+--|-- bra.s e6a6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e644:	|  \-> moveq #24,d0
    e646:	|      add.l 20(sp),d0
    e64a:	|      move.l d0,-(sp)
    e64c:	|      jsr 14b32 <trimStack>
    e652:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e654:	|      movea.l 20(sp),a0
    e658:	|      move.l 24(a0),d0
    e65c:	|      move.l d0,-(sp)
    e65e:	|      pea 5 <_start+0x5>
    e662:	|      moveq #16,d0
    e664:	|      add.l sp,d0
    e666:	|      move.l d0,-(sp)
    e668:	|      jsr 141ae <getValueType>
    e66e:	|      lea 12(sp),sp
    e672:	|      tst.w d0
    e674:	|  /-- bne.s e67a <builtIn_addOverlay+0x98>
    e676:	|  |   moveq #1,d0
    e678:	+--|-- bra.s e6a6 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e67a:	|  \-> moveq #24,d0
    e67c:	|      add.l 20(sp),d0
    e680:	|      move.l d0,-(sp)
    e682:	|      jsr 14b32 <trimStack>
    e688:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    e68a:	|      movea.l (sp),a0
    e68c:	|      move.l 4(sp),d1
    e690:	|      move.l 8(sp),d0
    e694:	|      move.l a0,-(sp)
    e696:	|      move.l d1,-(sp)
    e698:	|      move.l d0,-(sp)
    e69a:	|      jsr cd92 <loadBackDrop>
    e6a0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e6a4:	|      moveq #2,d0
}
    e6a6:	\----> lea 12(sp),sp
    e6aa:	       rts

0000e6ac <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    e6ac:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e6b0:	       movea.l 20(sp),a0
    e6b4:	       move.l 24(a0),d0
    e6b8:	       move.l d0,-(sp)
    e6ba:	       pea 1 <_start+0x1>
    e6be:	       lea 8(sp),a0
    e6c2:	       move.l a0,-(sp)
    e6c4:	       jsr 141ae <getValueType>
    e6ca:	       lea 12(sp),sp
    e6ce:	       tst.w d0
    e6d0:	   /-- bne.s e6d8 <builtIn_mixOverlay+0x2c>
    e6d2:	   |   moveq #1,d0
    e6d4:	/--|-- bra.w e770 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e6d8:	|  \-> moveq #24,d0
    e6da:	|      add.l 20(sp),d0
    e6de:	|      move.l d0,-(sp)
    e6e0:	|      jsr 14b32 <trimStack>
    e6e6:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e6e8:	|      movea.l 20(sp),a0
    e6ec:	|      move.l 24(a0),d0
    e6f0:	|      move.l d0,-(sp)
    e6f2:	|      pea 1 <_start+0x1>
    e6f6:	|      moveq #12,d0
    e6f8:	|      add.l sp,d0
    e6fa:	|      move.l d0,-(sp)
    e6fc:	|      jsr 141ae <getValueType>
    e702:	|      lea 12(sp),sp
    e706:	|      tst.w d0
    e708:	|  /-- bne.s e70e <builtIn_mixOverlay+0x62>
    e70a:	|  |   moveq #1,d0
    e70c:	+--|-- bra.s e770 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e70e:	|  \-> moveq #24,d0
    e710:	|      add.l 20(sp),d0
    e714:	|      move.l d0,-(sp)
    e716:	|      jsr 14b32 <trimStack>
    e71c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e71e:	|      movea.l 20(sp),a0
    e722:	|      move.l 24(a0),d0
    e726:	|      move.l d0,-(sp)
    e728:	|      pea 5 <_start+0x5>
    e72c:	|      moveq #16,d0
    e72e:	|      add.l sp,d0
    e730:	|      move.l d0,-(sp)
    e732:	|      jsr 141ae <getValueType>
    e738:	|      lea 12(sp),sp
    e73c:	|      tst.w d0
    e73e:	|  /-- bne.s e744 <builtIn_mixOverlay+0x98>
    e740:	|  |   moveq #1,d0
    e742:	+--|-- bra.s e770 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e744:	|  \-> moveq #24,d0
    e746:	|      add.l 20(sp),d0
    e74a:	|      move.l d0,-(sp)
    e74c:	|      jsr 14b32 <trimStack>
    e752:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    e754:	|      movea.l (sp),a0
    e756:	|      move.l 4(sp),d1
    e75a:	|      move.l 8(sp),d0
    e75e:	|      move.l a0,-(sp)
    e760:	|      move.l d1,-(sp)
    e762:	|      move.l d0,-(sp)
    e764:	|      jsr ce08 <mixBackDrop>
    e76a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e76e:	|      moveq #2,d0
}
    e770:	\----> lea 12(sp),sp
    e774:	       rts

0000e776 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    e776:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    e77a:	       pea 191eb <graphics.c.1c13408a+0xc>
    e780:	       jsr 16bac <KPrintF>
    e786:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e788:	       movea.l 20(sp),a0
    e78c:	       move.l 24(a0),d0
    e790:	       move.l d0,-(sp)
    e792:	       pea 1 <_start+0x1>
    e796:	       lea 8(sp),a0
    e79a:	       move.l a0,-(sp)
    e79c:	       jsr 141ae <getValueType>
    e7a2:	       lea 12(sp),sp
    e7a6:	       tst.w d0
    e7a8:	   /-- bne.s e7b0 <builtIn_pasteImage+0x3a>
    e7aa:	   |   moveq #1,d0
    e7ac:	/--|-- bra.w e84e <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    e7b0:	|  \-> moveq #24,d0
    e7b2:	|      add.l 20(sp),d0
    e7b6:	|      move.l d0,-(sp)
    e7b8:	|      jsr 14b32 <trimStack>
    e7be:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e7c0:	|      movea.l 20(sp),a0
    e7c4:	|      move.l 24(a0),d0
    e7c8:	|      move.l d0,-(sp)
    e7ca:	|      pea 1 <_start+0x1>
    e7ce:	|      moveq #12,d0
    e7d0:	|      add.l sp,d0
    e7d2:	|      move.l d0,-(sp)
    e7d4:	|      jsr 141ae <getValueType>
    e7da:	|      lea 12(sp),sp
    e7de:	|      tst.w d0
    e7e0:	|  /-- bne.s e7e6 <builtIn_pasteImage+0x70>
    e7e2:	|  |   moveq #1,d0
    e7e4:	+--|-- bra.s e84e <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    e7e6:	|  \-> moveq #24,d0
    e7e8:	|      add.l 20(sp),d0
    e7ec:	|      move.l d0,-(sp)
    e7ee:	|      jsr 14b32 <trimStack>
    e7f4:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    e7f6:	|      movea.l 20(sp),a0
    e7fa:	|      move.l 24(a0),d0
    e7fe:	|      move.l d0,-(sp)
    e800:	|      jsr 14686 <getAnimationFromVar>
    e806:	|      addq.l #4,sp
    e808:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    e80c:	|      moveq #24,d0
    e80e:	|      add.l 20(sp),d0
    e812:	|      move.l d0,-(sp)
    e814:	|      jsr 14b32 <trimStack>
    e81a:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    e81c:	|      tst.l 8(sp)
    e820:	|  /-- bne.s e826 <builtIn_pasteImage+0xb0>
    e822:	|  |   moveq #2,d0
    e824:	+--|-- bra.s e84e <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    e826:	|  \-> move.l (sp),d1
    e828:	|      move.l 4(sp),d0
    e82c:	|      move.l 8(sp),-(sp)
    e830:	|      move.l d1,-(sp)
    e832:	|      move.l d0,-(sp)
    e834:	|      jsr d94 <pasteCursor>
    e83a:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    e83e:	|      pea 19200 <graphics.c.1c13408a+0x21>
    e844:	|      jsr 16bac <KPrintF>
    e84a:	|      addq.l #4,sp
	return BR_CONTINUE;	
    e84c:	|      moveq #2,d0
}
    e84e:	\----> lea 12(sp),sp
    e852:	       rts

0000e854 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    e854:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e856:	       movea.l 16(sp),a0
    e85a:	       move.l 24(a0),d0
    e85e:	       move.l d0,-(sp)
    e860:	       pea 1 <_start+0x1>
    e864:	       move.l sp,d0
    e866:	       addq.l #8,d0
    e868:	       move.l d0,-(sp)
    e86a:	       jsr 141ae <getValueType>
    e870:	       lea 12(sp),sp
    e874:	       tst.w d0
    e876:	   /-- bne.s e87e <builtIn_setSceneDimensions+0x2a>
    e878:	   |   moveq #1,d0
    e87a:	/--|-- bra.w e906 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    e87e:	|  \-> moveq #24,d0
    e880:	|      add.l 16(sp),d0
    e884:	|      move.l d0,-(sp)
    e886:	|      jsr 14b32 <trimStack>
    e88c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e88e:	|      movea.l 16(sp),a0
    e892:	|      move.l 24(a0),d0
    e896:	|      move.l d0,-(sp)
    e898:	|      pea 1 <_start+0x1>
    e89c:	|      moveq #12,d0
    e89e:	|      add.l sp,d0
    e8a0:	|      move.l d0,-(sp)
    e8a2:	|      jsr 141ae <getValueType>
    e8a8:	|      lea 12(sp),sp
    e8ac:	|      tst.w d0
    e8ae:	|  /-- bne.s e8b4 <builtIn_setSceneDimensions+0x60>
    e8b0:	|  |   moveq #1,d0
    e8b2:	+--|-- bra.s e906 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    e8b4:	|  \-> moveq #24,d0
    e8b6:	|      add.l 16(sp),d0
    e8ba:	|      move.l d0,-(sp)
    e8bc:	|      jsr 14b32 <trimStack>
    e8c2:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    e8c4:	|      move.l (sp),d1
    e8c6:	|      move.l 4(sp),d0
    e8ca:	|      move.l d1,-(sp)
    e8cc:	|      move.l d0,-(sp)
    e8ce:	|      jsr ce5e <resizeBackdrop>
    e8d4:	|      addq.l #8,sp
    e8d6:	|      tst.w d0
    e8d8:	|  /-- beq.s e8f6 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    e8da:	|  |   move.l (sp),d1
    e8dc:	|  |   move.l 4(sp),d0
    e8e0:	|  |   move.l d1,-(sp)
    e8e2:	|  |   move.l d0,-(sp)
    e8e4:	|  |   clr.l -(sp)
    e8e6:	|  |   clr.l -(sp)
    e8e8:	|  |   jsr cc60 <blankScreen>
    e8ee:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    e8f2:	|  |   moveq #2,d0
    e8f4:	+--|-- bra.s e906 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    e8f6:	|  \-> pea 19216 <graphics.c.1c13408a+0x37>
    e8fc:	|      jsr 16bac <KPrintF>
    e902:	|      addq.l #4,sp
	return BR_ERROR;
    e904:	|      moveq #1,d0
}
    e906:	\----> addq.l #8,sp
    e908:	       rts

0000e90a <builtIn_aimCamera>:

builtIn(aimCamera)
{
    e90a:	          move.l d3,-(sp)
    e90c:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e90e:	          movea.l 16(sp),a0
    e912:	          move.l 24(a0),d0
    e916:	          move.l d0,-(sp)
    e918:	          pea 1 <_start+0x1>
    e91c:	          pea 1a8b8 <cameraY>
    e922:	          jsr 141ae <getValueType>
    e928:	          lea 12(sp),sp
    e92c:	          tst.w d0
    e92e:	      /-- bne.s e936 <builtIn_aimCamera+0x2c>
    e930:	      |   moveq #1,d0
    e932:	/-----|-- bra.w ebb8 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    e936:	|     \-> moveq #24,d0
    e938:	|         add.l 16(sp),d0
    e93c:	|         move.l d0,-(sp)
    e93e:	|         jsr 14b32 <trimStack>
    e944:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e946:	|         movea.l 16(sp),a0
    e94a:	|         move.l 24(a0),d0
    e94e:	|         move.l d0,-(sp)
    e950:	|         pea 1 <_start+0x1>
    e954:	|         pea 1a8b4 <cameraX>
    e95a:	|         jsr 141ae <getValueType>
    e960:	|         lea 12(sp),sp
    e964:	|         tst.w d0
    e966:	|     /-- bne.s e96e <builtIn_aimCamera+0x64>
    e968:	|     |   moveq #1,d0
    e96a:	+-----|-- bra.w ebb8 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    e96e:	|     \-> moveq #24,d0
    e970:	|         add.l 16(sp),d0
    e974:	|         move.l d0,-(sp)
    e976:	|         jsr 14b32 <trimStack>
    e97c:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    e97e:	|         move.l 1a8b4 <cameraX>,d0
    e984:	|         move.l d0,-(sp)
    e986:	|         jsr 16fe8 <__floatsisf>
    e98c:	|         addq.l #4,sp
    e98e:	|         move.l d0,d2
    e990:	|         move.l 1a6f6 <winWidth>,d0
    e996:	|         lsr.l #1,d0
    e998:	|         move.l d0,-(sp)
    e99a:	|         jsr 17010 <__floatunsisf>
    e9a0:	|         addq.l #4,sp
    e9a2:	|         move.l d0,d1
    e9a4:	|         move.l 1a142 <cameraZoom>,d0
    e9aa:	|         move.l d0,-(sp)
    e9ac:	|         move.l d1,-(sp)
    e9ae:	|         jsr 16e94 <__divsf3>
    e9b4:	|         addq.l #8,sp
    e9b6:	|         move.l d0,-(sp)
    e9b8:	|         move.l d2,-(sp)
    e9ba:	|         jsr 172dc <__subsf3>
    e9c0:	|         addq.l #8,sp
    e9c2:	|         move.l d0,-(sp)
    e9c4:	|         jsr 16f80 <__fixsfsi>
    e9ca:	|         addq.l #4,sp
    e9cc:	|         move.l d0,1a8b4 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    e9d2:	|         move.l 1a8b8 <cameraY>,d0
    e9d8:	|         move.l d0,-(sp)
    e9da:	|         jsr 16fe8 <__floatsisf>
    e9e0:	|         addq.l #4,sp
    e9e2:	|         move.l d0,d2
    e9e4:	|         move.l 1a6fa <winHeight>,d0
    e9ea:	|         lsr.l #1,d0
    e9ec:	|         move.l d0,-(sp)
    e9ee:	|         jsr 17010 <__floatunsisf>
    e9f4:	|         addq.l #4,sp
    e9f6:	|         move.l d0,d1
    e9f8:	|         move.l 1a142 <cameraZoom>,d0
    e9fe:	|         move.l d0,-(sp)
    ea00:	|         move.l d1,-(sp)
    ea02:	|         jsr 16e94 <__divsf3>
    ea08:	|         addq.l #8,sp
    ea0a:	|         move.l d0,-(sp)
    ea0c:	|         move.l d2,-(sp)
    ea0e:	|         jsr 172dc <__subsf3>
    ea14:	|         addq.l #8,sp
    ea16:	|         move.l d0,-(sp)
    ea18:	|         jsr 16f80 <__fixsfsi>
    ea1e:	|         addq.l #4,sp
    ea20:	|         move.l d0,1a8b8 <cameraY>

	if (cameraX < 0) cameraX = 0;
    ea26:	|         move.l 1a8b4 <cameraX>,d0
    ea2c:	|     /-- bpl.s ea38 <builtIn_aimCamera+0x12e>
    ea2e:	|     |   clr.l 1a8b4 <cameraX>
    ea34:	|  /--|-- bra.w eaee <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ea38:	|  |  \-> move.l 1a8b4 <cameraX>,d0
    ea3e:	|  |      move.l d0,-(sp)
    ea40:	|  |      jsr 16fe8 <__floatsisf>
    ea46:	|  |      addq.l #4,sp
    ea48:	|  |      move.l d0,d2
    ea4a:	|  |      move.l 1a896 <sceneWidth>,d0
    ea50:	|  |      move.l d0,-(sp)
    ea52:	|  |      jsr 17010 <__floatunsisf>
    ea58:	|  |      addq.l #4,sp
    ea5a:	|  |      move.l d0,d3
    ea5c:	|  |      move.l 1a6f6 <winWidth>,d0
    ea62:	|  |      move.l d0,-(sp)
    ea64:	|  |      jsr 17010 <__floatunsisf>
    ea6a:	|  |      addq.l #4,sp
    ea6c:	|  |      move.l d0,d1
    ea6e:	|  |      move.l 1a142 <cameraZoom>,d0
    ea74:	|  |      move.l d0,-(sp)
    ea76:	|  |      move.l d1,-(sp)
    ea78:	|  |      jsr 16e94 <__divsf3>
    ea7e:	|  |      addq.l #8,sp
    ea80:	|  |      move.l d0,-(sp)
    ea82:	|  |      move.l d3,-(sp)
    ea84:	|  |      jsr 172dc <__subsf3>
    ea8a:	|  |      addq.l #8,sp
    ea8c:	|  |      move.l d0,-(sp)
    ea8e:	|  |      move.l d2,-(sp)
    ea90:	|  |      jsr 17154 <__gtsf2>
    ea96:	|  |      addq.l #8,sp
    ea98:	|  |      tst.l d0
    ea9a:	|  +----- ble.s eaee <builtIn_aimCamera+0x1e4>
    ea9c:	|  |      move.l 1a896 <sceneWidth>,d0
    eaa2:	|  |      move.l d0,-(sp)
    eaa4:	|  |      jsr 17010 <__floatunsisf>
    eaaa:	|  |      addq.l #4,sp
    eaac:	|  |      move.l d0,d2
    eaae:	|  |      move.l 1a6f6 <winWidth>,d0
    eab4:	|  |      move.l d0,-(sp)
    eab6:	|  |      jsr 17010 <__floatunsisf>
    eabc:	|  |      addq.l #4,sp
    eabe:	|  |      move.l d0,d1
    eac0:	|  |      move.l 1a142 <cameraZoom>,d0
    eac6:	|  |      move.l d0,-(sp)
    eac8:	|  |      move.l d1,-(sp)
    eaca:	|  |      jsr 16e94 <__divsf3>
    ead0:	|  |      addq.l #8,sp
    ead2:	|  |      move.l d0,-(sp)
    ead4:	|  |      move.l d2,-(sp)
    ead6:	|  |      jsr 172dc <__subsf3>
    eadc:	|  |      addq.l #8,sp
    eade:	|  |      move.l d0,-(sp)
    eae0:	|  |      jsr 16f80 <__fixsfsi>
    eae6:	|  |      addq.l #4,sp
    eae8:	|  |      move.l d0,1a8b4 <cameraX>
	if (cameraY < 0) cameraY = 0;
    eaee:	|  \----> move.l 1a8b8 <cameraY>,d0
    eaf4:	|     /-- bpl.s eb00 <builtIn_aimCamera+0x1f6>
    eaf6:	|     |   clr.l 1a8b8 <cameraY>
    eafc:	|  /--|-- bra.w ebb6 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    eb00:	|  |  \-> move.l 1a8b8 <cameraY>,d0
    eb06:	|  |      move.l d0,-(sp)
    eb08:	|  |      jsr 16fe8 <__floatsisf>
    eb0e:	|  |      addq.l #4,sp
    eb10:	|  |      move.l d0,d2
    eb12:	|  |      move.l 1a89a <sceneHeight>,d0
    eb18:	|  |      move.l d0,-(sp)
    eb1a:	|  |      jsr 17010 <__floatunsisf>
    eb20:	|  |      addq.l #4,sp
    eb22:	|  |      move.l d0,d3
    eb24:	|  |      move.l 1a6fa <winHeight>,d0
    eb2a:	|  |      move.l d0,-(sp)
    eb2c:	|  |      jsr 17010 <__floatunsisf>
    eb32:	|  |      addq.l #4,sp
    eb34:	|  |      move.l d0,d1
    eb36:	|  |      move.l 1a142 <cameraZoom>,d0
    eb3c:	|  |      move.l d0,-(sp)
    eb3e:	|  |      move.l d1,-(sp)
    eb40:	|  |      jsr 16e94 <__divsf3>
    eb46:	|  |      addq.l #8,sp
    eb48:	|  |      move.l d0,-(sp)
    eb4a:	|  |      move.l d3,-(sp)
    eb4c:	|  |      jsr 172dc <__subsf3>
    eb52:	|  |      addq.l #8,sp
    eb54:	|  |      move.l d0,-(sp)
    eb56:	|  |      move.l d2,-(sp)
    eb58:	|  |      jsr 17154 <__gtsf2>
    eb5e:	|  |      addq.l #8,sp
    eb60:	|  |      tst.l d0
    eb62:	|  +----- ble.s ebb6 <builtIn_aimCamera+0x2ac>
    eb64:	|  |      move.l 1a89a <sceneHeight>,d0
    eb6a:	|  |      move.l d0,-(sp)
    eb6c:	|  |      jsr 17010 <__floatunsisf>
    eb72:	|  |      addq.l #4,sp
    eb74:	|  |      move.l d0,d2
    eb76:	|  |      move.l 1a6fa <winHeight>,d0
    eb7c:	|  |      move.l d0,-(sp)
    eb7e:	|  |      jsr 17010 <__floatunsisf>
    eb84:	|  |      addq.l #4,sp
    eb86:	|  |      move.l d0,d1
    eb88:	|  |      move.l 1a142 <cameraZoom>,d0
    eb8e:	|  |      move.l d0,-(sp)
    eb90:	|  |      move.l d1,-(sp)
    eb92:	|  |      jsr 16e94 <__divsf3>
    eb98:	|  |      addq.l #8,sp
    eb9a:	|  |      move.l d0,-(sp)
    eb9c:	|  |      move.l d2,-(sp)
    eb9e:	|  |      jsr 172dc <__subsf3>
    eba4:	|  |      addq.l #8,sp
    eba6:	|  |      move.l d0,-(sp)
    eba8:	|  |      jsr 16f80 <__fixsfsi>
    ebae:	|  |      addq.l #4,sp
    ebb0:	|  |      move.l d0,1a8b8 <cameraY>
	return BR_CONTINUE;
    ebb6:	|  \----> moveq #2,d0
}
    ebb8:	\-------> move.l (sp)+,d2
    ebba:	          move.l (sp)+,d3
    ebbc:	          rts

0000ebbe <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    ebbe:	       subq.l #4,sp
    ebc0:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebc2:	       movea.l 16(sp),a0
    ebc6:	       move.l 24(a0),d0
    ebca:	       move.l d0,-(sp)
    ebcc:	       pea 1 <_start+0x1>
    ebd0:	       moveq #12,d0
    ebd2:	       add.l sp,d0
    ebd4:	       move.l d0,-(sp)
    ebd6:	       jsr 141ae <getValueType>
    ebdc:	       lea 12(sp),sp
    ebe0:	       tst.w d0
    ebe2:	   /-- bne.s ebea <builtIn_zoomCamera+0x2c>
    ebe4:	   |   moveq #1,d0
    ebe6:	/--|-- bra.w ede4 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    ebea:	|  \-> moveq #24,d0
    ebec:	|      add.l 16(sp),d0
    ebf0:	|      move.l d0,-(sp)
    ebf2:	|      jsr 14b32 <trimStack>
    ebf8:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    ebfa:	|      move.l 1a75e <input+0xa>,d0
    ec00:	|      move.l d0,-(sp)
    ec02:	|      jsr 16fe8 <__floatsisf>
    ec08:	|      addq.l #4,sp
    ec0a:	|      move.l d0,d1
    ec0c:	|      move.l 1a142 <cameraZoom>,d0
    ec12:	|      move.l d0,-(sp)
    ec14:	|      move.l d1,-(sp)
    ec16:	|      jsr 1709a <__mulsf3>
    ec1c:	|      addq.l #8,sp
    ec1e:	|      move.l d0,-(sp)
    ec20:	|      jsr 16f80 <__fixsfsi>
    ec26:	|      addq.l #4,sp
    ec28:	|      move.l d0,1a75e <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    ec2e:	|      move.l 1a762 <input+0xe>,d0
    ec34:	|      move.l d0,-(sp)
    ec36:	|      jsr 16fe8 <__floatsisf>
    ec3c:	|      addq.l #4,sp
    ec3e:	|      move.l d0,d1
    ec40:	|      move.l 1a142 <cameraZoom>,d0
    ec46:	|      move.l d0,-(sp)
    ec48:	|      move.l d1,-(sp)
    ec4a:	|      jsr 1709a <__mulsf3>
    ec50:	|      addq.l #8,sp
    ec52:	|      move.l d0,-(sp)
    ec54:	|      jsr 16f80 <__fixsfsi>
    ec5a:	|      addq.l #4,sp
    ec5c:	|      move.l d0,1a762 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    ec62:	|      move.l 4(sp),d0
    ec66:	|      move.l d0,-(sp)
    ec68:	|      jsr 16fe8 <__floatsisf>
    ec6e:	|      addq.l #4,sp
    ec70:	|      move.l #1008981770,-(sp)
    ec76:	|      move.l d0,-(sp)
    ec78:	|      jsr 1709a <__mulsf3>
    ec7e:	|      addq.l #8,sp
    ec80:	|      move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    ec86:	|      move.l 1a6f6 <winWidth>,d0
    ec8c:	|      move.l d0,-(sp)
    ec8e:	|      jsr 17010 <__floatunsisf>
    ec94:	|      addq.l #4,sp
    ec96:	|      move.l d0,d1
    ec98:	|      move.l 1a142 <cameraZoom>,d0
    ec9e:	|      move.l d0,-(sp)
    eca0:	|      move.l d1,-(sp)
    eca2:	|      jsr 16e94 <__divsf3>
    eca8:	|      addq.l #8,sp
    ecaa:	|      move.l d0,d2
    ecac:	|      move.l 1a896 <sceneWidth>,d0
    ecb2:	|      move.l d0,-(sp)
    ecb4:	|      jsr 17010 <__floatunsisf>
    ecba:	|      addq.l #4,sp
    ecbc:	|      move.l d0,-(sp)
    ecbe:	|      move.l d2,-(sp)
    ecc0:	|      jsr 17154 <__gtsf2>
    ecc6:	|      addq.l #8,sp
    ecc8:	|      tst.l d0
    ecca:	|  /-- ble.s ed00 <builtIn_zoomCamera+0x142>
    eccc:	|  |   move.l 1a6f6 <winWidth>,d0
    ecd2:	|  |   move.l d0,-(sp)
    ecd4:	|  |   jsr 17010 <__floatunsisf>
    ecda:	|  |   addq.l #4,sp
    ecdc:	|  |   move.l d0,d2
    ecde:	|  |   move.l 1a896 <sceneWidth>,d0
    ece4:	|  |   move.l d0,-(sp)
    ece6:	|  |   jsr 17010 <__floatunsisf>
    ecec:	|  |   addq.l #4,sp
    ecee:	|  |   move.l d0,-(sp)
    ecf0:	|  |   move.l d2,-(sp)
    ecf2:	|  |   jsr 16e94 <__divsf3>
    ecf8:	|  |   addq.l #8,sp
    ecfa:	|  |   move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    ed00:	|  \-> move.l 1a6fa <winHeight>,d0
    ed06:	|      move.l d0,-(sp)
    ed08:	|      jsr 17010 <__floatunsisf>
    ed0e:	|      addq.l #4,sp
    ed10:	|      move.l d0,d1
    ed12:	|      move.l 1a142 <cameraZoom>,d0
    ed18:	|      move.l d0,-(sp)
    ed1a:	|      move.l d1,-(sp)
    ed1c:	|      jsr 16e94 <__divsf3>
    ed22:	|      addq.l #8,sp
    ed24:	|      move.l d0,d2
    ed26:	|      move.l 1a89a <sceneHeight>,d0
    ed2c:	|      move.l d0,-(sp)
    ed2e:	|      jsr 17010 <__floatunsisf>
    ed34:	|      addq.l #4,sp
    ed36:	|      move.l d0,-(sp)
    ed38:	|      move.l d2,-(sp)
    ed3a:	|      jsr 17154 <__gtsf2>
    ed40:	|      addq.l #8,sp
    ed42:	|      tst.l d0
    ed44:	|  /-- ble.s ed7a <builtIn_zoomCamera+0x1bc>
    ed46:	|  |   move.l 1a6fa <winHeight>,d0
    ed4c:	|  |   move.l d0,-(sp)
    ed4e:	|  |   jsr 17010 <__floatunsisf>
    ed54:	|  |   addq.l #4,sp
    ed56:	|  |   move.l d0,d2
    ed58:	|  |   move.l 1a89a <sceneHeight>,d0
    ed5e:	|  |   move.l d0,-(sp)
    ed60:	|  |   jsr 17010 <__floatunsisf>
    ed66:	|  |   addq.l #4,sp
    ed68:	|  |   move.l d0,-(sp)
    ed6a:	|  |   move.l d2,-(sp)
    ed6c:	|  |   jsr 16e94 <__divsf3>
    ed72:	|  |   addq.l #8,sp
    ed74:	|  |   move.l d0,1a142 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    ed7a:	|  \-> move.l 1a75e <input+0xa>,d0
    ed80:	|      move.l d0,-(sp)
    ed82:	|      jsr 16fe8 <__floatsisf>
    ed88:	|      addq.l #4,sp
    ed8a:	|      move.l d0,d1
    ed8c:	|      move.l 1a142 <cameraZoom>,d0
    ed92:	|      move.l d0,-(sp)
    ed94:	|      move.l d1,-(sp)
    ed96:	|      jsr 16e94 <__divsf3>
    ed9c:	|      addq.l #8,sp
    ed9e:	|      move.l d0,-(sp)
    eda0:	|      jsr 16f80 <__fixsfsi>
    eda6:	|      addq.l #4,sp
    eda8:	|      move.l d0,1a75e <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    edae:	|      move.l 1a762 <input+0xe>,d0
    edb4:	|      move.l d0,-(sp)
    edb6:	|      jsr 16fe8 <__floatsisf>
    edbc:	|      addq.l #4,sp
    edbe:	|      move.l d0,d1
    edc0:	|      move.l 1a142 <cameraZoom>,d0
    edc6:	|      move.l d0,-(sp)
    edc8:	|      move.l d1,-(sp)
    edca:	|      jsr 16e94 <__divsf3>
    edd0:	|      addq.l #8,sp
    edd2:	|      move.l d0,-(sp)
    edd4:	|      jsr 16f80 <__fixsfsi>
    edda:	|      addq.l #4,sp
    eddc:	|      move.l d0,1a762 <input+0xe>

	return BR_CONTINUE;
    ede2:	|      moveq #2,d0
}
    ede4:	\----> move.l (sp)+,d2
    ede6:	       addq.l #4,sp
    ede8:	       rts

0000edea <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    edea:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    edec:	             tst.l 8(sp)
    edf0:	         /-- bne.s ee04 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    edf2:	         |   pea 1923b <graphics.c.1c13408a+0x5c>
    edf8:	         |   jsr 16bac <KPrintF>
    edfe:	         |   addq.l #4,sp
		return BR_ERROR;
    ee00:	         |   moveq #1,d0
    ee02:	/--------|-- bra.s ee64 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    ee04:	|        \-> jsr 157ac <rand>
    ee0a:	|            move.l d0,d1
    ee0c:	|            move.l 8(sp),d0
    ee10:	|            move.l d0,-(sp)
    ee12:	|            move.l d1,-(sp)
    ee14:	|            jsr 17644 <__umodsi3>
    ee1a:	|            addq.l #8,sp
    ee1c:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ee1e:	|     /----- bra.s ee52 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    ee20:	|  /--|----> move.l (sp),d0
    ee22:	|  |  |      cmp.l 8(sp),d0
    ee26:	|  |  |  /-- bne.s ee42 <builtIn_pickOne+0x58>
    ee28:	|  |  |  |   moveq #28,d0
    ee2a:	|  |  |  |   add.l 12(sp),d0
    ee2e:	|  |  |  |   movea.l 12(sp),a0
    ee32:	|  |  |  |   move.l 24(a0),d1
    ee36:	|  |  |  |   move.l d0,-(sp)
    ee38:	|  |  |  |   move.l d1,-(sp)
    ee3a:	|  |  |  |   jsr 14668 <copyVariable>
    ee40:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    ee42:	|  |  |  \-> moveq #24,d0
    ee44:	|  |  |      add.l 12(sp),d0
    ee48:	|  |  |      move.l d0,-(sp)
    ee4a:	|  |  |      jsr 14b32 <trimStack>
    ee50:	|  |  |      addq.l #4,sp
	while (numParams --) {
    ee52:	|  |  \----> move.l 8(sp),d0
    ee56:	|  |         move.l d0,d1
    ee58:	|  |         subq.l #1,d1
    ee5a:	|  |         move.l d1,8(sp)
    ee5e:	|  |         tst.l d0
    ee60:	|  \-------- bne.s ee20 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    ee62:	|            moveq #2,d0
}
    ee64:	\----------> addq.l #4,sp
    ee66:	             rts

0000ee68 <builtIn_substring>:

builtIn(substring)
{
    ee68:	       lea -40(sp),sp
    ee6c:	       move.l a6,-(sp)
    ee6e:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ee70:	       movea.l 56(sp),a0
    ee74:	       move.l 24(a0),d0
    ee78:	       move.l d0,-(sp)
    ee7a:	       pea 1 <_start+0x1>
    ee7e:	       lea 16(sp),a0
    ee82:	       move.l a0,-(sp)
    ee84:	       jsr 141ae <getValueType>
    ee8a:	       lea 12(sp),sp
    ee8e:	       tst.w d0
    ee90:	   /-- bne.s ee98 <builtIn_substring+0x30>
    ee92:	   |   moveq #1,d0
    ee94:	/--|-- bra.w f010 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    ee98:	|  \-> moveq #24,d0
    ee9a:	|      add.l 56(sp),d0
    ee9e:	|      move.l d0,-(sp)
    eea0:	|      jsr 14b32 <trimStack>
    eea6:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    eea8:	|      movea.l 56(sp),a0
    eeac:	|      move.l 24(a0),d0
    eeb0:	|      move.l d0,-(sp)
    eeb2:	|      pea 1 <_start+0x1>
    eeb6:	|      lea 20(sp),a0
    eeba:	|      move.l a0,-(sp)
    eebc:	|      jsr 141ae <getValueType>
    eec2:	|      lea 12(sp),sp
    eec6:	|      tst.w d0
    eec8:	|  /-- bne.s eed0 <builtIn_substring+0x68>
    eeca:	|  |   moveq #1,d0
    eecc:	+--|-- bra.w f010 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    eed0:	|  \-> moveq #24,d0
    eed2:	|      add.l 56(sp),d0
    eed6:	|      move.l d0,-(sp)
    eed8:	|      jsr 14b32 <trimStack>
    eede:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    eee0:	|      movea.l 56(sp),a0
    eee4:	|      move.l 24(a0),d0
    eee8:	|      move.l d0,-(sp)
    eeea:	|      jsr 14784 <getTextFromAnyVar>
    eef0:	|      addq.l #4,sp
    eef2:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    eef6:	|      moveq #24,d0
    eef8:	|      add.l 56(sp),d0
    eefc:	|      move.l d0,-(sp)
    eefe:	|      jsr 14b32 <trimStack>
    ef04:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    ef06:	|      move.l 44(sp),-(sp)
    ef0a:	|      jsr 1369a <strlen>
    ef10:	|      addq.l #4,sp
    ef12:	|      move.l d0,d1
    ef14:	|      move.l 12(sp),d0
    ef18:	|      movea.l d0,a0
    ef1a:	|      move.l 8(sp),d0
    ef1e:	|      add.l a0,d0
    ef20:	|      cmp.l d1,d0
    ef22:	|  /-- bls.s ef58 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    ef24:	|  |   move.l 44(sp),-(sp)
    ef28:	|  |   jsr 1369a <strlen>
    ef2e:	|  |   addq.l #4,sp
    ef30:	|  |   move.l d0,d1
    ef32:	|  |   move.l 12(sp),d0
    ef36:	|  |   sub.l d0,d1
    ef38:	|  |   move.l d1,d0
    ef3a:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    ef3e:	|  |   move.l 44(sp),-(sp)
    ef42:	|  |   jsr 1369a <strlen>
    ef48:	|  |   addq.l #4,sp
    ef4a:	|  |   move.l d0,d1
    ef4c:	|  |   move.l 12(sp),d0
    ef50:	|  |   cmp.l d1,d0
    ef52:	|  +-- bls.s ef58 <builtIn_substring+0xf0>
            start = 0;
    ef54:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    ef58:	|  \-> move.l 8(sp),d0
    ef5c:	|  /-- bpl.s ef62 <builtIn_substring+0xfa>
        length = 0;
    ef5e:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    ef62:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    ef68:	|      move.l 12(sp),d1
    ef6c:	|      move.l 8(sp),d0
    ef70:	|      move.l d1,d2
    ef72:	|      add.l d0,d2
    ef74:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    ef78:	|      move.l 36(sp),d0
    ef7c:	|      sub.l 40(sp),d0
    ef80:	|      addq.l #1,d0
    ef82:	|      move.l d0,32(sp)
    ef86:	|      clr.l 28(sp)
    ef8a:	|      move.l 1a7a2 <SysBase>,d0
    ef90:	|      movea.l d0,a6
    ef92:	|      move.l 32(sp),d0
    ef96:	|      move.l 28(sp),d1
    ef9a:	|      jsr -684(a6)
    ef9e:	|      move.l d0,24(sp)
    efa2:	|      move.l 24(sp),d0
    efa6:	|      move.l d0,20(sp)
    if (!newString) {
    efaa:	|  /-- bne.s efb0 <builtIn_substring+0x148>
        return BR_ERROR;
    efac:	|  |   moveq #1,d0
    efae:	+--|-- bra.s f010 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    efb0:	|  \-> move.l 36(sp),d0
    efb4:	|      sub.l 40(sp),d0
    efb8:	|      move.l d0,d1
    efba:	|      move.l 40(sp),d0
    efbe:	|      add.l 44(sp),d0
    efc2:	|      move.l d1,-(sp)
    efc4:	|      move.l d0,-(sp)
    efc6:	|      move.l 28(sp),-(sp)
    efca:	|      jsr 16b60 <memcpy>
    efd0:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    efd4:	|      move.l 36(sp),d0
    efd8:	|      sub.l 40(sp),d0
    efdc:	|      movea.l 20(sp),a0
    efe0:	|      adda.l d0,a0
    efe2:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    efe4:	|      moveq #28,d0
    efe6:	|      add.l 56(sp),d0
    efea:	|      move.l 20(sp),-(sp)
    efee:	|      move.l d0,-(sp)
    eff0:	|      jsr 143d0 <makeTextVar>
    eff6:	|      addq.l #8,sp
    FreeVec(newString);
    eff8:	|      move.l 20(sp),16(sp)
    effe:	|      move.l 1a7a2 <SysBase>,d0
    f004:	|      movea.l d0,a6
    f006:	|      movea.l 16(sp),a1
    f00a:	|      jsr -690(a6)
    return BR_CONTINUE;
    f00e:	|      moveq #2,d0
}
    f010:	\----> move.l (sp)+,d2
    f012:	       movea.l (sp)+,a6
    f014:	       lea 40(sp),sp
    f018:	       rts

0000f01a <builtIn_stringLength>:

builtIn(stringLength)
{
    f01a:	subq.l #8,sp
    f01c:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f01e:	movea.l 20(sp),a0
    f022:	move.l 24(a0),d0
    f026:	move.l d0,-(sp)
    f028:	jsr 14784 <getTextFromAnyVar>
    f02e:	addq.l #4,sp
    f030:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f034:	moveq #24,d0
    f036:	add.l 20(sp),d0
    f03a:	move.l d0,-(sp)
    f03c:	jsr 14b32 <trimStack>
    f042:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f044:	move.l 8(sp),-(sp)
    f048:	jsr 1369a <strlen>
    f04e:	addq.l #4,sp
    f050:	move.l d0,d1
    f052:	moveq #28,d0
    f054:	add.l 20(sp),d0
    f058:	move.l d1,-(sp)
    f05a:	pea 1 <_start+0x1>
    f05e:	move.l d0,-(sp)
    f060:	jsr 14aa0 <setVariable>
    f066:	lea 12(sp),sp
	FreeVec(newText);
    f06a:	move.l 8(sp),4(sp)
    f070:	move.l 1a7a2 <SysBase>,d0
    f076:	movea.l d0,a6
    f078:	movea.l 4(sp),a1
    f07c:	jsr -690(a6)
	return BR_CONTINUE;
    f080:	moveq #2,d0
}
    f082:	movea.l (sp)+,a6
    f084:	addq.l #8,sp
    f086:	rts

0000f088 <builtIn_newStack>:

builtIn(newStack)
{
    f088:	             lea -12(sp),sp
    f08c:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f08e:	             moveq #28,d0
    f090:	             add.l 24(sp),d0
    f094:	             move.l d0,-(sp)
    f096:	             jsr 143fc <unlinkVar>
    f09c:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f09e:	             movea.l 24(sp),a0
    f0a2:	             moveq #6,d0
    f0a4:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f0a8:	             moveq #12,d1
    f0aa:	             move.l d1,12(sp)
    f0ae:	             clr.l 8(sp)
    f0b2:	             move.l 1a7a2 <SysBase>,d0
    f0b8:	             movea.l d0,a6
    f0ba:	             move.l 12(sp),d0
    f0be:	             move.l 8(sp),d1
    f0c2:	             jsr -684(a6)
    f0c6:	             move.l d0,4(sp)
    f0ca:	             move.l 4(sp),d0
    f0ce:	             movea.l 24(sp),a0
    f0d2:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f0d6:	             movea.l 24(sp),a0
    f0da:	             move.l 32(a0),d0
    f0de:	         /-- bne.s f0e6 <builtIn_newStack+0x5e>
    f0e0:	         |   moveq #1,d0
    f0e2:	/--------|-- bra.w f178 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f0e6:	|        \-> movea.l 24(sp),a0
    f0ea:	|            movea.l 32(a0),a0
    f0ee:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f0f0:	|            movea.l 24(sp),a0
    f0f4:	|            movea.l 32(a0),a0
    f0f8:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f0fc:	|            movea.l 24(sp),a0
    f100:	|            movea.l 32(a0),a0
    f104:	|            moveq #1,d0
    f106:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f10a:	|     /----- bra.s f166 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f10c:	|  /--|----> movea.l 24(sp),a0
    f110:	|  |  |      move.l 32(a0),d0
    f114:	|  |  |      move.l d0,d1
    f116:	|  |  |      movea.l 24(sp),a0
    f11a:	|  |  |      move.l 24(a0),d0
    f11e:	|  |  |      move.l d1,-(sp)
    f120:	|  |  |      move.l d0,-(sp)
    f122:	|  |  |      jsr 139ea <addVarToStack>
    f128:	|  |  |      addq.l #8,sp
    f12a:	|  |  |      tst.w d0
    f12c:	|  |  |  /-- bne.s f132 <builtIn_newStack+0xaa>
    f12e:	|  |  |  |   moveq #1,d0
    f130:	+--|--|--|-- bra.s f178 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f132:	|  |  |  \-> movea.l 24(sp),a0
    f136:	|  |  |      movea.l 32(a0),a0
    f13a:	|  |  |      move.l 4(a0),d0
    f13e:	|  |  |  /-- bne.s f156 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f140:	|  |  |  |   movea.l 24(sp),a0
    f144:	|  |  |  |   movea.l 32(a0),a1
    f148:	|  |  |  |   movea.l 24(sp),a0
    f14c:	|  |  |  |   movea.l 32(a0),a0
    f150:	|  |  |  |   move.l (a1),d0
    f152:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f156:	|  |  |  \-> moveq #24,d0
    f158:	|  |  |      add.l 24(sp),d0
    f15c:	|  |  |      move.l d0,-(sp)
    f15e:	|  |  |      jsr 14b32 <trimStack>
    f164:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f166:	|  |  \----> move.l 20(sp),d0
    f16a:	|  |         move.l d0,d1
    f16c:	|  |         subq.l #1,d1
    f16e:	|  |         move.l d1,20(sp)
    f172:	|  |         tst.l d0
    f174:	|  \-------- bne.s f10c <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f176:	|            moveq #2,d0
}
    f178:	\----------> movea.l (sp)+,a6
    f17a:	             lea 12(sp),sp
    f17e:	             rts

0000f180 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f180:	          movea.l 8(sp),a0
    f184:	          movea.l 24(a0),a0
    f188:	          move.l (a0),d0
    f18a:	          moveq #6,d1
    f18c:	          cmp.l d0,d1
    f18e:	      /-- beq.s f1aa <builtIn_stackSize+0x2a>
    f190:	      |   moveq #10,d1
    f192:	      |   cmp.l d0,d1
    f194:	   /--|-- beq.s f1ee <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f196:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f198:	   |  |   pea 1926e <graphics.c.1c13408a+0x8f>
    f19e:	   |  |   jsr 16bac <KPrintF>
    f1a4:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f1a6:	   |  |   moveq #1,d0
    f1a8:	/--|--|-- bra.s f228 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f1aa:	|  |  \-> movea.l 8(sp),a0
    f1ae:	|  |      movea.l 24(a0),a0
    f1b2:	|  |      move.l 4(a0),d0
    f1b6:	|  |      move.l d0,-(sp)
    f1b8:	|  |      jsr 14b0e <stackSize>
    f1be:	|  |      addq.l #4,sp
    f1c0:	|  |      move.l d0,d1
    f1c2:	|  |      moveq #28,d0
    f1c4:	|  |      add.l 8(sp),d0
    f1c8:	|  |      move.l d1,-(sp)
    f1ca:	|  |      pea 1 <_start+0x1>
    f1ce:	|  |      move.l d0,-(sp)
    f1d0:	|  |      jsr 14aa0 <setVariable>
    f1d6:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f1da:	|  |      moveq #24,d0
    f1dc:	|  |      add.l 8(sp),d0
    f1e0:	|  |      move.l d0,-(sp)
    f1e2:	|  |      jsr 14b32 <trimStack>
    f1e8:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f1ea:	|  |      moveq #2,d0
    f1ec:	+--|----- bra.s f228 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f1ee:	|  \----> movea.l 8(sp),a0
    f1f2:	|         movea.l 24(a0),a0
    f1f6:	|         movea.l 4(a0),a0
    f1fa:	|         move.l 4(a0),d1
    f1fe:	|         moveq #28,d0
    f200:	|         add.l 8(sp),d0
    f204:	|         move.l d1,-(sp)
    f206:	|         pea 1 <_start+0x1>
    f20a:	|         move.l d0,-(sp)
    f20c:	|         jsr 14aa0 <setVariable>
    f212:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f216:	|         moveq #24,d0
    f218:	|         add.l 8(sp),d0
    f21c:	|         move.l d0,-(sp)
    f21e:	|         jsr 14b32 <trimStack>
    f224:	|         addq.l #4,sp
			return BR_CONTINUE;
    f226:	|         moveq #2,d0
}
    f228:	\-------> rts

0000f22a <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f22a:	       movea.l 8(sp),a0
    f22e:	       movea.l 24(a0),a0
    f232:	       move.l (a0),d0
    f234:	       moveq #6,d1
    f236:	       cmp.l d0,d1
    f238:	   /-- beq.s f24c <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f23a:	   |   pea 19297 <graphics.c.1c13408a+0xb8>
    f240:	   |   jsr 16bac <KPrintF>
    f246:	   |   addq.l #4,sp
		return BR_ERROR;
    f248:	   |   moveq #1,d0
    f24a:	/--|-- bra.s f280 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f24c:	|  \-> moveq #28,d0
    f24e:	|      add.l 8(sp),d0
    f252:	|      movea.l 8(sp),a0
    f256:	|      move.l 24(a0),d1
    f25a:	|      move.l d0,-(sp)
    f25c:	|      move.l d1,-(sp)
    f25e:	|      jsr 13cb4 <copyStack>
    f264:	|      addq.l #8,sp
    f266:	|      tst.w d0
    f268:	|  /-- bne.s f26e <builtIn_copyStack+0x44>
    f26a:	|  |   moveq #1,d0
    f26c:	+--|-- bra.s f280 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f26e:	|  \-> moveq #24,d0
    f270:	|      add.l 8(sp),d0
    f274:	|      move.l d0,-(sp)
    f276:	|      jsr 14b32 <trimStack>
    f27c:	|      addq.l #4,sp
	return BR_CONTINUE;
    f27e:	|      moveq #2,d0
}
    f280:	\----> rts

0000f282 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f282:	       movea.l 8(sp),a0
    f286:	       movea.l 24(a0),a0
    f28a:	       movea.l 8(a0),a0
    f28e:	       move.l (a0),d0
    f290:	       moveq #6,d1
    f292:	       cmp.l d0,d1
    f294:	   /-- beq.s f2aa <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f296:	   |   pea 192b0 <graphics.c.1c13408a+0xd1>
    f29c:	   |   jsr 16bac <KPrintF>
    f2a2:	   |   addq.l #4,sp
		return BR_ERROR;
    f2a4:	   |   moveq #1,d0
    f2a6:	/--|-- bra.w f338 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f2aa:	|  \-> movea.l 8(sp),a0
    f2ae:	|      movea.l 24(a0),a0
    f2b2:	|      movea.l 8(a0),a0
    f2b6:	|      move.l 4(a0),d0
    f2ba:	|      move.l d0,d1
    f2bc:	|      movea.l 8(sp),a0
    f2c0:	|      move.l 24(a0),d0
    f2c4:	|      move.l d1,-(sp)
    f2c6:	|      move.l d0,-(sp)
    f2c8:	|      jsr 139ea <addVarToStack>
    f2ce:	|      addq.l #8,sp
    f2d0:	|      tst.w d0
    f2d2:	|  /-- bne.s f2d8 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f2d4:	|  |   moveq #1,d0
    f2d6:	+--|-- bra.s f338 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f2d8:	|  \-> movea.l 8(sp),a0
    f2dc:	|      movea.l 24(a0),a0
    f2e0:	|      movea.l 8(a0),a0
    f2e4:	|      movea.l 4(a0),a0
    f2e8:	|      movea.l (a0),a0
    f2ea:	|      move.l 8(a0),d0
    f2ee:	|  /-- bne.s f316 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f2f0:	|  |   movea.l 8(sp),a0
    f2f4:	|  |   movea.l 24(a0),a0
    f2f8:	|  |   movea.l 8(a0),a0
    f2fc:	|  |   movea.l 4(a0),a1
    f300:	|  |   movea.l 8(sp),a0
    f304:	|  |   movea.l 24(a0),a0
    f308:	|  |   movea.l 8(a0),a0
    f30c:	|  |   movea.l 4(a0),a0
    f310:	|  |   move.l (a1),d0
    f312:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f316:	|  \-> moveq #24,d0
    f318:	|      add.l 8(sp),d0
    f31c:	|      move.l d0,-(sp)
    f31e:	|      jsr 14b32 <trimStack>
    f324:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f326:	|      moveq #24,d0
    f328:	|      add.l 8(sp),d0
    f32c:	|      move.l d0,-(sp)
    f32e:	|      jsr 14b32 <trimStack>
    f334:	|      addq.l #4,sp
	return BR_CONTINUE;
    f336:	|      moveq #2,d0
}
    f338:	\----> rts

0000f33a <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f33a:	             movea.l 8(sp),a0
    f33e:	             movea.l 24(a0),a0
    f342:	             movea.l 8(a0),a0
    f346:	             move.l (a0),d0
    f348:	             moveq #6,d1
    f34a:	             cmp.l d0,d1
    f34c:	         /-- beq.s f362 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f34e:	         |   pea 192b0 <graphics.c.1c13408a+0xd1>
    f354:	         |   jsr 16bac <KPrintF>
    f35a:	         |   addq.l #4,sp
		return BR_ERROR;
    f35c:	         |   moveq #1,d0
    f35e:	/--------|-- bra.w f450 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f362:	|        \-> movea.l 8(sp),a0
    f366:	|            movea.l 24(a0),a0
    f36a:	|            movea.l 8(a0),a0
    f36e:	|            movea.l 4(a0),a0
    f372:	|            move.l (a0),d0
    f374:	|     /----- bne.s f3ce <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f376:	|     |      movea.l 8(sp),a0
    f37a:	|     |      movea.l 24(a0),a0
    f37e:	|     |      movea.l 8(a0),a0
    f382:	|     |      move.l 4(a0),d0
    f386:	|     |      move.l d0,d1
    f388:	|     |      movea.l 8(sp),a0
    f38c:	|     |      move.l 24(a0),d0
    f390:	|     |      move.l d1,-(sp)
    f392:	|     |      move.l d0,-(sp)
    f394:	|     |      jsr 139ea <addVarToStack>
    f39a:	|     |      addq.l #8,sp
    f39c:	|     |      tst.w d0
    f39e:	|     |  /-- bne.s f3a6 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f3a0:	|     |  |   moveq #1,d0
    f3a2:	+-----|--|-- bra.w f450 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f3a6:	|     |  \-> movea.l 8(sp),a0
    f3aa:	|     |      movea.l 24(a0),a0
    f3ae:	|     |      movea.l 8(a0),a0
    f3b2:	|     |      movea.l 4(a0),a1
    f3b6:	|     |      movea.l 8(sp),a0
    f3ba:	|     |      movea.l 24(a0),a0
    f3be:	|     |      movea.l 8(a0),a0
    f3c2:	|     |      movea.l 4(a0),a0
    f3c6:	|     |      move.l (a1),d0
    f3c8:	|     |      move.l d0,4(a0)
    f3cc:	|  /--|----- bra.s f42e <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f3ce:	|  |  \----> movea.l 8(sp),a0
    f3d2:	|  |         movea.l 24(a0),a0
    f3d6:	|  |         movea.l 8(a0),a0
    f3da:	|  |         movea.l 4(a0),a0
    f3de:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f3e2:	|  |         move.l d0,d1
    f3e4:	|  |         addq.l #8,d1
    f3e6:	|  |         movea.l 8(sp),a0
    f3ea:	|  |         move.l 24(a0),d0
    f3ee:	|  |         move.l d1,-(sp)
    f3f0:	|  |         move.l d0,-(sp)
    f3f2:	|  |         jsr 139ea <addVarToStack>
    f3f8:	|  |         addq.l #8,sp
    f3fa:	|  |         tst.w d0
    f3fc:	|  |     /-- bne.s f402 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f3fe:	|  |     |   moveq #1,d0
    f400:	+--|-----|-- bra.s f450 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f402:	|  |     \-> movea.l 8(sp),a0
    f406:	|  |         movea.l 24(a0),a0
    f40a:	|  |         movea.l 8(a0),a0
    f40e:	|  |         movea.l 4(a0),a0
    f412:	|  |         movea.l 4(a0),a1
    f416:	|  |         movea.l 8(sp),a0
    f41a:	|  |         movea.l 24(a0),a0
    f41e:	|  |         movea.l 8(a0),a0
    f422:	|  |         movea.l 4(a0),a0
    f426:	|  |         move.l 8(a1),d0
    f42a:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f42e:	|  \-------> moveq #24,d0
    f430:	|            add.l 8(sp),d0
    f434:	|            move.l d0,-(sp)
    f436:	|            jsr 14b32 <trimStack>
    f43c:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f43e:	|            moveq #24,d0
    f440:	|            add.l 8(sp),d0
    f444:	|            move.l d0,-(sp)
    f446:	|            jsr 14b32 <trimStack>
    f44c:	|            addq.l #4,sp
	return BR_CONTINUE;
    f44e:	|            moveq #2,d0
}
    f450:	\----------> rts

0000f452 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f452:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f454:	       movea.l 12(sp),a0
    f458:	       movea.l 24(a0),a0
    f45c:	       movea.l 8(a0),a0
    f460:	       move.l (a0),d0
    f462:	       moveq #6,d1
    f464:	       cmp.l d0,d1
    f466:	   /-- beq.s f47c <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f468:	   |   pea 19297 <graphics.c.1c13408a+0xb8>
    f46e:	   |   jsr 16bac <KPrintF>
    f474:	   |   addq.l #4,sp
		return BR_ERROR;
    f476:	   |   moveq #1,d0
    f478:	/--|-- bra.w f512 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f47c:	|  \-> movea.l 12(sp),a0
    f480:	|      movea.l 24(a0),a0
    f484:	|      movea.l 8(a0),a0
    f488:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f48c:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f48e:	|      movea.l 12(sp),a0
    f492:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f496:	|      clr.l -(sp)
    f498:	|      move.l d1,-(sp)
    f49a:	|      move.l d0,-(sp)
    f49c:	|      jsr 13d8a <deleteVarFromStack>
    f4a2:	|      lea 12(sp),sp
    f4a6:	|      move.l d0,d1
    f4a8:	|      moveq #28,d0
    f4aa:	|      add.l 12(sp),d0
    f4ae:	|      move.l d1,-(sp)
    f4b0:	|      pea 1 <_start+0x1>
    f4b4:	|      move.l d0,-(sp)
    f4b6:	|      jsr 14aa0 <setVariable>
    f4bc:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f4c0:	|      movea.l 12(sp),a0
    f4c4:	|      movea.l 24(a0),a0
    f4c8:	|      movea.l 8(a0),a0
    f4cc:	|      movea.l 4(a0),a0
    f4d0:	|      move.l (a0),d0
    f4d2:	|      movea.l 12(sp),a0
    f4d6:	|      movea.l 24(a0),a0
    f4da:	|      movea.l 8(a0),a0
    f4de:	|      movea.l 4(a0),a2
    f4e2:	|      move.l d0,-(sp)
    f4e4:	|      jsr 14aea <stackFindLast>
    f4ea:	|      addq.l #4,sp
    f4ec:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f4f0:	|      moveq #24,d0
    f4f2:	|      add.l 12(sp),d0
    f4f6:	|      move.l d0,-(sp)
    f4f8:	|      jsr 14b32 <trimStack>
    f4fe:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f500:	|      moveq #24,d0
    f502:	|      add.l 12(sp),d0
    f506:	|      move.l d0,-(sp)
    f508:	|      jsr 14b32 <trimStack>
    f50e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f510:	|      moveq #2,d0
}
    f512:	\----> movea.l (sp)+,a2
    f514:	       rts

0000f516 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    f516:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f518:	       movea.l 12(sp),a0
    f51c:	       movea.l 24(a0),a0
    f520:	       movea.l 8(a0),a0
    f524:	       move.l (a0),d0
    f526:	       moveq #6,d1
    f528:	       cmp.l d0,d1
    f52a:	   /-- beq.s f540 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f52c:	   |   pea 19297 <graphics.c.1c13408a+0xb8>
    f532:	   |   jsr 16bac <KPrintF>
    f538:	   |   addq.l #4,sp
		return BR_ERROR;
    f53a:	   |   moveq #1,d0
    f53c:	/--|-- bra.w f5d8 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    f540:	|  \-> movea.l 12(sp),a0
    f544:	|      movea.l 24(a0),a0
    f548:	|      movea.l 8(a0),a0
    f54c:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f550:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f552:	|      movea.l 12(sp),a0
    f556:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f55a:	|      pea 1 <_start+0x1>
    f55e:	|      move.l d1,-(sp)
    f560:	|      move.l d0,-(sp)
    f562:	|      jsr 13d8a <deleteVarFromStack>
    f568:	|      lea 12(sp),sp
    f56c:	|      move.l d0,d1
    f56e:	|      moveq #28,d0
    f570:	|      add.l 12(sp),d0
    f574:	|      move.l d1,-(sp)
    f576:	|      pea 1 <_start+0x1>
    f57a:	|      move.l d0,-(sp)
    f57c:	|      jsr 14aa0 <setVariable>
    f582:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f586:	|      movea.l 12(sp),a0
    f58a:	|      movea.l 24(a0),a0
    f58e:	|      movea.l 8(a0),a0
    f592:	|      movea.l 4(a0),a0
    f596:	|      move.l (a0),d0
    f598:	|      movea.l 12(sp),a0
    f59c:	|      movea.l 24(a0),a0
    f5a0:	|      movea.l 8(a0),a0
    f5a4:	|      movea.l 4(a0),a2
    f5a8:	|      move.l d0,-(sp)
    f5aa:	|      jsr 14aea <stackFindLast>
    f5b0:	|      addq.l #4,sp
    f5b2:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f5b6:	|      moveq #24,d0
    f5b8:	|      add.l 12(sp),d0
    f5bc:	|      move.l d0,-(sp)
    f5be:	|      jsr 14b32 <trimStack>
    f5c4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f5c6:	|      moveq #24,d0
    f5c8:	|      add.l 12(sp),d0
    f5cc:	|      move.l d0,-(sp)
    f5ce:	|      jsr 14b32 <trimStack>
    f5d4:	|      addq.l #4,sp
	return BR_CONTINUE;
    f5d6:	|      moveq #2,d0
}
    f5d8:	\----> movea.l (sp)+,a2
    f5da:	       rts

0000f5dc <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f5dc:	       movea.l 8(sp),a0
    f5e0:	       movea.l 24(a0),a0
    f5e4:	       move.l (a0),d0
    f5e6:	       moveq #6,d1
    f5e8:	       cmp.l d0,d1
    f5ea:	   /-- beq.s f5fe <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f5ec:	   |   pea 19297 <graphics.c.1c13408a+0xb8>
    f5f2:	   |   jsr 16bac <KPrintF>
    f5f8:	   |   addq.l #4,sp
		return BR_ERROR;
    f5fa:	   |   moveq #1,d0
    f5fc:	/--|-- bra.s f668 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f5fe:	|  \-> movea.l 8(sp),a0
    f602:	|      movea.l 24(a0),a0
    f606:	|      movea.l 4(a0),a0
    f60a:	|      move.l (a0),d0
    f60c:	|  /-- bne.s f620 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    f60e:	|  |   pea 192c8 <graphics.c.1c13408a+0xe9>
    f614:	|  |   jsr 16bac <KPrintF>
    f61a:	|  |   addq.l #4,sp
		return BR_ERROR;
    f61c:	|  |   moveq #1,d0
    f61e:	+--|-- bra.s f668 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f620:	|  \-> moveq #28,d0
    f622:	|      add.l 8(sp),d0
    f626:	|      movea.l 8(sp),a0
    f62a:	|      movea.l 24(a0),a0
    f62e:	|      movea.l 4(a0),a0
    f632:	|      move.l (a0),d1
    f634:	|      move.l d0,-(sp)
    f636:	|      move.l d1,-(sp)
    f638:	|      jsr 14668 <copyVariable>
    f63e:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    f640:	|      movea.l 8(sp),a0
    f644:	|      movea.l 24(a0),a0
    f648:	|      move.l 4(a0),d0
    f64c:	|      move.l d0,-(sp)
    f64e:	|      jsr 14b32 <trimStack>
    f654:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f656:	|      moveq #24,d0
    f658:	|      add.l 8(sp),d0
    f65c:	|      move.l d0,-(sp)
    f65e:	|      jsr 14b32 <trimStack>
    f664:	|      addq.l #4,sp
	return BR_CONTINUE;
    f666:	|      moveq #2,d0
}
    f668:	\----> rts

0000f66a <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f66a:	       movea.l 8(sp),a0
    f66e:	       movea.l 24(a0),a0
    f672:	       move.l (a0),d0
    f674:	       moveq #6,d1
    f676:	       cmp.l d0,d1
    f678:	   /-- beq.s f68c <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    f67a:	   |   pea 19297 <graphics.c.1c13408a+0xb8>
    f680:	   |   jsr 16bac <KPrintF>
    f686:	   |   addq.l #4,sp
		return BR_ERROR;
    f688:	   |   moveq #1,d0
    f68a:	/--|-- bra.s f6e0 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f68c:	|  \-> movea.l 8(sp),a0
    f690:	|      movea.l 24(a0),a0
    f694:	|      movea.l 4(a0),a0
    f698:	|      move.l (a0),d0
    f69a:	|  /-- bne.s f6ae <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    f69c:	|  |   pea 192c8 <graphics.c.1c13408a+0xe9>
    f6a2:	|  |   jsr 16bac <KPrintF>
    f6a8:	|  |   addq.l #4,sp
		return BR_ERROR;
    f6aa:	|  |   moveq #1,d0
    f6ac:	+--|-- bra.s f6e0 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f6ae:	|  \-> moveq #28,d0
    f6b0:	|      add.l 8(sp),d0
    f6b4:	|      movea.l 8(sp),a0
    f6b8:	|      movea.l 24(a0),a0
    f6bc:	|      movea.l 4(a0),a0
    f6c0:	|      move.l (a0),d1
    f6c2:	|      move.l d0,-(sp)
    f6c4:	|      move.l d1,-(sp)
    f6c6:	|      jsr 14668 <copyVariable>
    f6cc:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    f6ce:	|      moveq #24,d0
    f6d0:	|      add.l 8(sp),d0
    f6d4:	|      move.l d0,-(sp)
    f6d6:	|      jsr 14b32 <trimStack>
    f6dc:	|      addq.l #4,sp
	return BR_CONTINUE;
    f6de:	|      moveq #2,d0
}
    f6e0:	\----> rts

0000f6e2 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f6e2:	       movea.l 8(sp),a0
    f6e6:	       movea.l 24(a0),a0
    f6ea:	       move.l (a0),d0
    f6ec:	       moveq #6,d1
    f6ee:	       cmp.l d0,d1
    f6f0:	   /-- beq.s f704 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    f6f2:	   |   pea 19297 <graphics.c.1c13408a+0xb8>
    f6f8:	   |   jsr 16bac <KPrintF>
    f6fe:	   |   addq.l #4,sp
		return BR_ERROR;
    f700:	   |   moveq #1,d0
    f702:	/--|-- bra.s f75a <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f704:	|  \-> movea.l 8(sp),a0
    f708:	|      movea.l 24(a0),a0
    f70c:	|      movea.l 4(a0),a0
    f710:	|      move.l (a0),d0
    f712:	|  /-- bne.s f726 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    f714:	|  |   pea 192c8 <graphics.c.1c13408a+0xe9>
    f71a:	|  |   jsr 16bac <KPrintF>
    f720:	|  |   addq.l #4,sp
		return BR_ERROR;
    f722:	|  |   moveq #1,d0
    f724:	+--|-- bra.s f75a <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    f726:	|  \-> moveq #28,d0
    f728:	|      add.l 8(sp),d0
    f72c:	|      movea.l 8(sp),a0
    f730:	|      movea.l 24(a0),a0
    f734:	|      movea.l 4(a0),a0
    f738:	|      move.l 4(a0),d1
    f73c:	|      move.l d0,-(sp)
    f73e:	|      move.l d1,-(sp)
    f740:	|      jsr 14668 <copyVariable>
    f746:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    f748:	|      moveq #24,d0
    f74a:	|      add.l 8(sp),d0
    f74e:	|      move.l d0,-(sp)
    f750:	|      jsr 14b32 <trimStack>
    f756:	|      addq.l #4,sp
	return BR_CONTINUE;
    f758:	|      moveq #2,d0
}
    f75a:	\----> rts

0000f75c <builtIn_random>:

builtIn(random)
{
    f75c:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    f75e:	       movea.l 12(sp),a0
    f762:	       move.l 24(a0),d0
    f766:	       move.l d0,-(sp)
    f768:	       pea 1 <_start+0x1>
    f76c:	       move.l sp,d0
    f76e:	       addq.l #8,d0
    f770:	       move.l d0,-(sp)
    f772:	       jsr 141ae <getValueType>
    f778:	       lea 12(sp),sp
    f77c:	       tst.w d0
    f77e:	   /-- bne.s f784 <builtIn_random+0x28>
		return BR_ERROR;
    f780:	   |   moveq #1,d0
    f782:	/--|-- bra.s f7ce <builtIn_random+0x72>

	trimStack (&fun -> stack);
    f784:	|  \-> moveq #24,d0
    f786:	|      add.l 12(sp),d0
    f78a:	|      move.l d0,-(sp)
    f78c:	|      jsr 14b32 <trimStack>
    f792:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    f794:	|      move.l (sp),d0
    f796:	|  /-- bgt.s f79c <builtIn_random+0x40>
    f798:	|  |   moveq #1,d0
    f79a:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    f79c:	|  \-> jsr 157ac <rand>
    f7a2:	|      move.l d0,d1
    f7a4:	|      move.l (sp),d0
    f7a6:	|      move.l d0,-(sp)
    f7a8:	|      move.l d1,-(sp)
    f7aa:	|      jsr 17644 <__umodsi3>
    f7b0:	|      addq.l #8,sp
    f7b2:	|      move.l d0,d1
    f7b4:	|      moveq #28,d0
    f7b6:	|      add.l 12(sp),d0
    f7ba:	|      move.l d1,-(sp)
    f7bc:	|      pea 1 <_start+0x1>
    f7c0:	|      move.l d0,-(sp)
    f7c2:	|      jsr 14aa0 <setVariable>
    f7c8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f7cc:	|      moveq #2,d0
}
    f7ce:	\----> addq.l #4,sp
    f7d0:	       rts

0000f7d2 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    f7d2:	nop
    f7d4:	rts

0000f7d6 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    f7d6:	moveq #2,d0
}
    f7d8:	rts

0000f7da <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
	UNUSEDALL
	int red, green, blue;
	KPrintF("setPasteColour: Function not implemented on Amiga. Attention using this might cause problems!\n");
    f7da:	pea 192db <graphics.c.1c13408a+0xfc>
    f7e0:	jsr 16bac <KPrintF>
    f7e6:	addq.l #4,sp
	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    f7e8:	moveq #2,d0
}
    f7ea:	rts

0000f7ec <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    f7ec:	moveq #2,d0
}
    f7ee:	rts

0000f7f0 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    f7f0:	moveq #2,d0
}
    f7f2:	rts

0000f7f4 <builtIn_setFont>:


builtIn(setFont)
{
    f7f4:	       lea -16(sp),sp
    f7f8:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f7fa:	       movea.l 28(sp),a0
    f7fe:	       move.l 24(a0),d0
    f802:	       move.l d0,-(sp)
    f804:	       pea 1 <_start+0x1>
    f808:	       lea 12(sp),a0
    f80c:	       move.l a0,-(sp)
    f80e:	       jsr 141ae <getValueType>
    f814:	       lea 12(sp),sp
    f818:	       tst.w d0
    f81a:	   /-- bne.s f822 <builtIn_setFont+0x2e>
    f81c:	   |   moveq #1,d0
    f81e:	/--|-- bra.w f8d0 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    f822:	|  \-> moveq #24,d0
    f824:	|      add.l 28(sp),d0
    f828:	|      move.l d0,-(sp)
    f82a:	|      jsr 14b32 <trimStack>
    f830:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f832:	|      movea.l 28(sp),a0
    f836:	|      move.l 24(a0),d0
    f83a:	|      move.l d0,-(sp)
    f83c:	|      jsr 14784 <getTextFromAnyVar>
    f842:	|      addq.l #4,sp
    f844:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    f848:	|  /-- bne.s f850 <builtIn_setFont+0x5c>
    f84a:	|  |   moveq #1,d0
    f84c:	+--|-- bra.w f8d0 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    f850:	|  \-> moveq #24,d0
    f852:	|      add.l 28(sp),d0
    f856:	|      move.l d0,-(sp)
    f858:	|      jsr 14b32 <trimStack>
    f85e:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    f860:	|      movea.l 28(sp),a0
    f864:	|      move.l 24(a0),d0
    f868:	|      move.l d0,-(sp)
    f86a:	|      pea 5 <_start+0x5>
    f86e:	|      lea 16(sp),a0
    f872:	|      move.l a0,-(sp)
    f874:	|      jsr 141ae <getValueType>
    f87a:	|      lea 12(sp),sp
    f87e:	|      tst.w d0
    f880:	|  /-- bne.s f886 <builtIn_setFont+0x92>
    f882:	|  |   moveq #1,d0
    f884:	+--|-- bra.s f8d0 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    f886:	|  \-> moveq #24,d0
    f888:	|      add.l 28(sp),d0
    f88c:	|      move.l d0,-(sp)
    f88e:	|      jsr 14b32 <trimStack>
    f894:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    f896:	|      move.l 4(sp),d1
    f89a:	|      move.l 8(sp),d0
    f89e:	|      move.l d1,-(sp)
    f8a0:	|      move.l 20(sp),-(sp)
    f8a4:	|      move.l d0,-(sp)
    f8a6:	|      jsr 14f90 <loadFont>
    f8ac:	|      lea 12(sp),sp
    f8b0:	|      tst.w d0
    f8b2:	|  /-- bne.s f8b8 <builtIn_setFont+0xc4>
    f8b4:	|  |   moveq #1,d0
    f8b6:	+--|-- bra.s f8d0 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    f8b8:	|  \-> move.l 16(sp),12(sp)
    f8be:	|      move.l 1a7a2 <SysBase>,d0
    f8c4:	|      movea.l d0,a6
    f8c6:	|      movea.l 12(sp),a1
    f8ca:	|      jsr -690(a6)

    return BR_CONTINUE;
    f8ce:	|      moveq #2,d0
}
    f8d0:	\----> movea.l (sp)+,a6
    f8d2:	       lea 16(sp),sp
    f8d6:	       rts

0000f8d8 <builtIn_inFont>:

builtIn(inFont)
{
    f8d8:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f8da:	       movea.l 12(sp),a0
    f8de:	       move.l 24(a0),d0
    f8e2:	       move.l d0,-(sp)
    f8e4:	       jsr 14784 <getTextFromAnyVar>
    f8ea:	       addq.l #4,sp
    f8ec:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    f8ee:	   /-- bne.s f8f4 <builtIn_inFont+0x1c>
    f8f0:	   |   moveq #1,d0
    f8f2:	/--|-- bra.s f92a <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    f8f4:	|  \-> moveq #24,d0
    f8f6:	|      add.l 12(sp),d0
    f8fa:	|      move.l d0,-(sp)
    f8fc:	|      jsr 14b32 <trimStack>
    f902:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    f904:	|      move.l (sp),-(sp)
    f906:	|      jsr 14f7e <isInFont>
    f90c:	|      addq.l #4,sp
    f90e:	|      movea.w d0,a0
    f910:	|      moveq #28,d0
    f912:	|      add.l 12(sp),d0
    f916:	|      move.l a0,-(sp)
    f918:	|      pea 1 <_start+0x1>
    f91c:	|      move.l d0,-(sp)
    f91e:	|      jsr 14aa0 <setVariable>
    f924:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f928:	|      moveq #2,d0
}
    f92a:	\----> addq.l #4,sp
    f92c:	       rts

0000f92e <builtIn_pasteString>:

builtIn(pasteString)
{
    f92e:	       lea -16(sp),sp
    f932:	       move.l a6,-(sp)
    f934:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f936:	       movea.l 32(sp),a0
    f93a:	       move.l 24(a0),d0
    f93e:	       move.l d0,-(sp)
    f940:	       jsr 14784 <getTextFromAnyVar>
    f946:	       addq.l #4,sp
    f948:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    f94c:	       moveq #24,d0
    f94e:	       add.l 32(sp),d0
    f952:	       move.l d0,-(sp)
    f954:	       jsr 14b32 <trimStack>
    f95a:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f95c:	       movea.l 32(sp),a0
    f960:	       move.l 24(a0),d0
    f964:	       move.l d0,-(sp)
    f966:	       pea 1 <_start+0x1>
    f96a:	       lea 20(sp),a0
    f96e:	       move.l a0,-(sp)
    f970:	       jsr 141ae <getValueType>
    f976:	       lea 12(sp),sp
    f97a:	       tst.w d0
    f97c:	   /-- bne.s f984 <builtIn_pasteString+0x56>
    f97e:	   |   moveq #1,d0
    f980:	/--|-- bra.w fa26 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    f984:	|  \-> moveq #24,d0
    f986:	|      add.l 32(sp),d0
    f98a:	|      move.l d0,-(sp)
    f98c:	|      jsr 14b32 <trimStack>
    f992:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f994:	|      movea.l 32(sp),a0
    f998:	|      move.l 24(a0),d0
    f99c:	|      move.l d0,-(sp)
    f99e:	|      pea 1 <_start+0x1>
    f9a2:	|      lea 16(sp),a0
    f9a6:	|      move.l a0,-(sp)
    f9a8:	|      jsr 141ae <getValueType>
    f9ae:	|      lea 12(sp),sp
    f9b2:	|      tst.w d0
    f9b4:	|  /-- bne.s f9ba <builtIn_pasteString+0x8c>
    f9b6:	|  |   moveq #1,d0
    f9b8:	+--|-- bra.s fa26 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    f9ba:	|  \-> moveq #24,d0
    f9bc:	|      add.l 32(sp),d0
    f9c0:	|      move.l d0,-(sp)
    f9c2:	|      jsr 14b32 <trimStack>
    f9c8:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    f9ca:	|      move.l 8(sp),d0
    f9ce:	|      cmpi.l #65535,d0
    f9d4:	|  /-- bne.s f9f4 <builtIn_pasteString+0xc6>
    f9d6:	|  |   move.l 1a6f6 <winWidth>,d2
    f9dc:	|  |   move.l 20(sp),-(sp)
    f9e0:	|  |   jsr 1526e <stringWidth>
    f9e6:	|  |   addq.l #4,sp
    f9e8:	|  |   move.l d2,d1
    f9ea:	|  |   sub.l d0,d1
    f9ec:	|  |   move.l d1,d0
    f9ee:	|  |   lsr.l #1,d0
    f9f0:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    f9f4:	|  \-> move.l 12(sp),d1
    f9f8:	|      move.l 8(sp),d0
    f9fc:	|      move.l d1,-(sp)
    f9fe:	|      move.l d0,-(sp)
    fa00:	|      move.l 28(sp),-(sp)
    fa04:	|      jsr 15190 <pasteStringToBackdrop>
    fa0a:	|      lea 12(sp),sp
    FreeVec(newText); 
    fa0e:	|      move.l 20(sp),16(sp)
    fa14:	|      move.l 1a7a2 <SysBase>,d0
    fa1a:	|      movea.l d0,a6
    fa1c:	|      movea.l 16(sp),a1
    fa20:	|      jsr -690(a6)
    return BR_CONTINUE;
    fa24:	|      moveq #2,d0
}
    fa26:	\----> move.l (sp)+,d2
    fa28:	       movea.l (sp)+,a6
    fa2a:	       lea 16(sp),sp
    fa2e:	       rts

0000fa30 <builtIn_anim>:

builtIn(anim)
{
    fa30:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    fa34:	       moveq #1,d0
    fa36:	       cmp.l 16(sp),d0
    fa3a:	   /-- blt.s fa50 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    fa3c:	   |   pea 1933a <graphics.c.1c13408a+0x15b>
    fa42:	   |   jsr 16bac <KPrintF>
    fa48:	   |   addq.l #4,sp
		return BR_ERROR;
    fa4a:	   |   moveq #1,d0
    fa4c:	/--|-- bra.w fade <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    fa50:	|  \-> moveq #24,d1
    fa52:	|      add.l 20(sp),d1
    fa56:	|      move.l 16(sp),d0
    fa5a:	|      subq.l #1,d0
    fa5c:	|      move.l d1,-(sp)
    fa5e:	|      move.l d0,-(sp)
    fa60:	|      jsr 9162 <createPersonaAnim>
    fa66:	|      addq.l #8,sp
    fa68:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fa6c:	|      movea.l 20(sp),a0
    fa70:	|      move.l 24(a0),d0
    fa74:	|      move.l d0,-(sp)
    fa76:	|      pea 5 <_start+0x5>
    fa7a:	|      lea 8(sp),a0
    fa7e:	|      move.l a0,-(sp)
    fa80:	|      jsr 141ae <getValueType>
    fa86:	|      lea 12(sp),sp
    fa8a:	|      tst.w d0
    fa8c:	|  /-- bne.s fa92 <builtIn_anim+0x62>
    fa8e:	|  |   moveq #1,d0
    fa90:	+--|-- bra.s fade <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    fa92:	|  \-> moveq #24,d0
    fa94:	|      add.l 20(sp),d0
    fa98:	|      move.l d0,-(sp)
    fa9a:	|      jsr 14b32 <trimStack>
    faa0:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    faa2:	|      move.l (sp),d0
    faa4:	|      move.l d0,-(sp)
    faa6:	|      jsr 1590e <loadBankForAnim>
    faac:	|      addq.l #4,sp
    faae:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    fab2:	|  /-- bne.s fab8 <builtIn_anim+0x88>
    fab4:	|  |   moveq #1,d0
    fab6:	+--|-- bra.s fade <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    fab8:	|  \-> move.l 4(sp),-(sp)
    fabc:	|      move.l 12(sp),-(sp)
    fac0:	|      jsr b00c <setBankFile>
    fac6:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    fac8:	|      moveq #28,d0
    faca:	|      add.l 20(sp),d0
    face:	|      move.l 8(sp),-(sp)
    fad2:	|      move.l d0,-(sp)
    fad4:	|      jsr 14a5c <newAnimationVariable>
    fada:	|      addq.l #8,sp
	return BR_CONTINUE;
    fadc:	|      moveq #2,d0
}
    fade:	\----> lea 12(sp),sp
    fae2:	       rts

0000fae4 <builtIn_costume>:

builtIn(costume)
{
    fae4:	          lea -32(sp),sp
    fae8:	          move.l a6,-(sp)
    faea:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    faec:	          moveq #8,d0
    faee:	          move.l d0,32(sp)
    faf2:	          clr.l 28(sp)
    faf6:	          move.l 1a7a2 <SysBase>,d0
    fafc:	          movea.l d0,a6
    fafe:	          move.l 32(sp),d0
    fb02:	          move.l 28(sp),d1
    fb06:	          jsr -684(a6)
    fb0a:	          move.l d0,24(sp)
    fb0e:	          move.l 24(sp),d0
    fb12:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    fb16:	      /-- bne.s fb1e <builtIn_costume+0x3a>
    fb18:	      |   moveq #1,d0
    fb1a:	/-----|-- bra.w fc06 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    fb1e:	|     \-> move.l 44(sp),d0
    fb22:	|         pea 3 <_start+0x3>
    fb26:	|         move.l d0,-(sp)
    fb28:	|         jsr 175e8 <__divsi3>
    fb2e:	|         addq.l #8,sp
    fb30:	|         movea.l 20(sp),a0
    fb34:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    fb38:	|         tst.l 44(sp)
    fb3c:	|     /-- beq.s fb52 <builtIn_costume+0x6e>
    fb3e:	|     |   movea.l 20(sp),a0
    fb42:	|     |   move.l 4(a0),d1
    fb46:	|     |   move.l d1,d0
    fb48:	|     |   add.l d0,d0
    fb4a:	|     |   add.l d1,d0
    fb4c:	|     |   cmp.l 44(sp),d0
    fb50:	|  /--|-- beq.s fb66 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    fb52:	|  |  \-> pea 19374 <graphics.c.1c13408a+0x195>
    fb58:	|  |      jsr 16bac <KPrintF>
    fb5e:	|  |      addq.l #4,sp
        return BR_ERROR;
    fb60:	|  |      moveq #1,d0
    fb62:	+--|----- bra.w fc06 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    fb66:	|  \----> move.l 44(sp),d0
    fb6a:	|         add.l d0,d0
    fb6c:	|         add.l d0,d0
    fb6e:	|         move.l d0,16(sp)
    fb72:	|         clr.l 12(sp)
    fb76:	|         move.l 1a7a2 <SysBase>,d0
    fb7c:	|         movea.l d0,a6
    fb7e:	|         move.l 16(sp),d0
    fb82:	|         move.l 12(sp),d1
    fb86:	|         jsr -684(a6)
    fb8a:	|         move.l d0,8(sp)
    fb8e:	|         move.l 8(sp),d0
    fb92:	|         movea.l 20(sp),a0
    fb96:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    fb98:	|         movea.l 20(sp),a0
    fb9c:	|         move.l (a0),d0
    fb9e:	|     /-- bne.s fba4 <builtIn_costume+0xc0>
    fba0:	|     |   moveq #1,d0
    fba2:	+-----|-- bra.s fc06 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    fba4:	|     \-> move.l 44(sp),d0
    fba8:	|         subq.l #1,d0
    fbaa:	|         move.l d0,36(sp)
    fbae:	|     /-- bra.s fbea <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    fbb0:	|  /--|-> movea.l 48(sp),a0
    fbb4:	|  |  |   move.l 24(a0),d0
    fbb8:	|  |  |   movea.l 20(sp),a0
    fbbc:	|  |  |   movea.l (a0),a0
    fbbe:	|  |  |   move.l 36(sp),d1
    fbc2:	|  |  |   add.l d1,d1
    fbc4:	|  |  |   add.l d1,d1
    fbc6:	|  |  |   lea (0,a0,d1.l),a2
    fbca:	|  |  |   move.l d0,-(sp)
    fbcc:	|  |  |   jsr 14686 <getAnimationFromVar>
    fbd2:	|  |  |   addq.l #4,sp
    fbd4:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    fbd6:	|  |  |   moveq #24,d0
    fbd8:	|  |  |   add.l 48(sp),d0
    fbdc:	|  |  |   move.l d0,-(sp)
    fbde:	|  |  |   jsr 14b32 <trimStack>
    fbe4:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    fbe6:	|  |  |   subq.l #1,36(sp)
    fbea:	|  |  \-> tst.l 36(sp)
    fbee:	|  \----- bge.s fbb0 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    fbf0:	|         moveq #28,d0
    fbf2:	|         add.l 48(sp),d0
    fbf6:	|         move.l 20(sp),-(sp)
    fbfa:	|         move.l d0,-(sp)
    fbfc:	|         jsr 14a7e <newCostumeVariable>
    fc02:	|         addq.l #8,sp
    return BR_CONTINUE;
    fc04:	|         moveq #2,d0
}
    fc06:	\-------> movea.l (sp)+,a2
    fc08:	          movea.l (sp)+,a6
    fc0a:	          lea 32(sp),sp
    fc0e:	          rts

0000fc10 <builtIn_launch>:

builtIn(launch)
{
    fc10:	          lea -20(sp),sp
    fc14:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    fc16:	          movea.l 32(sp),a0
    fc1a:	          move.l 24(a0),d0
    fc1e:	          move.l d0,-(sp)
    fc20:	          jsr 14784 <getTextFromAnyVar>
    fc26:	          addq.l #4,sp
    fc28:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    fc2c:	      /-- bne.s fc34 <builtIn_launch+0x24>
    fc2e:	      |   moveq #1,d0
    fc30:	/-----|-- bra.w fd62 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    fc34:	|     \-> move.l 20(sp),-(sp)
    fc38:	|         jsr 2fe <encodeFilename>
    fc3e:	|         addq.l #4,sp
    fc40:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    fc44:	|         moveq #24,d0
    fc46:	|         add.l 32(sp),d0
    fc4a:	|         move.l d0,-(sp)
    fc4c:	|         jsr 14b32 <trimStack>
    fc52:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    fc54:	|         movea.l 20(sp),a0
    fc58:	|         move.b (a0),d0
    fc5a:	|         cmpi.b #104,d0
    fc5e:	|  /----- bne.s fcc8 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    fc60:	|  |      movea.l 20(sp),a0
    fc64:	|  |      addq.l #1,a0
    fc66:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    fc68:	|  |      cmpi.b #116,d0
    fc6c:	|  +----- bne.s fcc8 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    fc6e:	|  |      movea.l 20(sp),a0
    fc72:	|  |      addq.l #2,a0
    fc74:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    fc76:	|  |      cmpi.b #116,d0
    fc7a:	|  +----- bne.s fcc8 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    fc7c:	|  |      movea.l 20(sp),a0
    fc80:	|  |      addq.l #3,a0
    fc82:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    fc84:	|  |      cmpi.b #112,d0
    fc88:	|  +----- bne.s fcc8 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    fc8a:	|  |      movea.l 20(sp),a0
    fc8e:	|  |      addq.l #4,a0
    fc90:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    fc92:	|  |      cmpi.b #58,d0
    fc96:	|  |  /-- beq.s fcb4 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    fc98:	|  |  |   movea.l 20(sp),a0
    fc9c:	|  |  |   addq.l #4,a0
    fc9e:	|  |  |   move.b (a0),d0
    fca0:	|  |  |   cmpi.b #115,d0
    fca4:	|  +--|-- bne.s fcc8 <builtIn_launch+0xb8>
    fca6:	|  |  |   movea.l 20(sp),a0
    fcaa:	|  |  |   addq.l #5,a0
    fcac:	|  |  |   move.b (a0),d0
    fcae:	|  |  |   cmpi.b #58,d0
    fcb2:	|  +--|-- bne.s fcc8 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    fcb4:	|  |  \-> move.l 20(sp),-(sp)
    fcb8:	|  |      jsr b8 <copyString>
    fcbe:	|  |      addq.l #4,sp
    fcc0:	|  |      move.l d0,1a8bc <launchMe>
    fcc6:	|  |  /-- bra.s fd1a <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    fcc8:	|  \--|-> move.l 1a70a <gamePath>,d0
    fcce:	|     |   pea 193bf <graphics.c.1c13408a+0x1e0>
    fcd4:	|     |   move.l d0,-(sp)
    fcd6:	|     |   jsr 136da <joinStrings>
    fcdc:	|     |   addq.l #8,sp
    fcde:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    fce2:	|     |   move.l 16(sp),-(sp)
    fce6:	|     |   move.l 16(sp),-(sp)
    fcea:	|     |   jsr 136da <joinStrings>
    fcf0:	|     |   addq.l #8,sp
    fcf2:	|     |   move.l d0,1a8bc <launchMe>
        FreeVec(newText);
    fcf8:	|     |   move.l 16(sp),8(sp)
    fcfe:	|     |   move.l 1a7a2 <SysBase>,d0
    fd04:	|     |   movea.l d0,a6
    fd06:	|     |   movea.l 8(sp),a1
    fd0a:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    fd0e:	|     |   move.l 1a8bc <launchMe>,d0
    fd14:	|     +-- bne.s fd1a <builtIn_launch+0x10a>
    fd16:	|     |   moveq #1,d0
    fd18:	+-----|-- bra.s fd62 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    fd1a:	|     \-> move.l 20(sp),4(sp)
    fd20:	|         move.l 1a7a2 <SysBase>,d0
    fd26:	|         movea.l d0,a6
    fd28:	|         movea.l 4(sp),a1
    fd2c:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    fd30:	|         clr.l -(sp)
    fd32:	|         jsr 3972 <setGraphicsWindow>
    fd38:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    fd3a:	|         moveq #28,d0
    fd3c:	|         add.l 32(sp),d0
    fd40:	|         pea 1 <_start+0x1>
    fd44:	|         pea 1 <_start+0x1>
    fd48:	|         move.l d0,-(sp)
    fd4a:	|         jsr 14aa0 <setVariable>
    fd50:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    fd54:	|         moveq #28,d0
    fd56:	|         add.l 32(sp),d0
    fd5a:	|         move.l d0,1a8c0 <launchResult>

    return BR_KEEP_AND_PAUSE;
    fd60:	|         moveq #0,d0
}
    fd62:	\-------> movea.l (sp)+,a6
    fd64:	          lea 20(sp),sp
    fd68:	          rts

0000fd6a <builtIn_pause>:

builtIn(pause)
{
    fd6a:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fd6c:	       movea.l 12(sp),a0
    fd70:	       move.l 24(a0),d0
    fd74:	       move.l d0,-(sp)
    fd76:	       pea 1 <_start+0x1>
    fd7a:	       move.l sp,d0
    fd7c:	       addq.l #8,d0
    fd7e:	       move.l d0,-(sp)
    fd80:	       jsr 141ae <getValueType>
    fd86:	       lea 12(sp),sp
    fd8a:	       tst.w d0
    fd8c:	   /-- bne.s fd92 <builtIn_pause+0x28>
    fd8e:	   |   moveq #1,d0
    fd90:	/--|-- bra.s fdc0 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    fd92:	|  \-> moveq #24,d0
    fd94:	|      add.l 12(sp),d0
    fd98:	|      move.l d0,-(sp)
    fd9a:	|      jsr 14b32 <trimStack>
    fda0:	|      addq.l #4,sp
	if (theTime > 0) {
    fda2:	|      move.l (sp),d0
    fda4:	|  /-- ble.s fdbe <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    fda6:	|  |   move.l (sp),d0
    fda8:	|  |   subq.l #1,d0
    fdaa:	|  |   movea.l 12(sp),a0
    fdae:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    fdb2:	|  |   movea.l 12(sp),a0
    fdb6:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    fdba:	|  |   moveq #0,d0
    fdbc:	+--|-- bra.s fdc0 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    fdbe:	|  \-> moveq #2,d0
}
    fdc0:	\----> addq.l #4,sp
    fdc2:	       rts

0000fdc4 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    fdc4:	jsr 40d4 <completeTimers>
	return BR_CONTINUE;
    fdca:	moveq #2,d0
}
    fdcc:	rts

0000fdce <builtIn_callEvent>:

builtIn(callEvent)
{
    fdce:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fdd2:	       movea.l 20(sp),a0
    fdd6:	       move.l 24(a0),d0
    fdda:	       move.l d0,-(sp)
    fddc:	       pea 7 <_start+0x7>
    fde0:	       lea 8(sp),a0
    fde4:	       move.l a0,-(sp)
    fde6:	       jsr 141ae <getValueType>
    fdec:	       lea 12(sp),sp
    fdf0:	       tst.w d0
    fdf2:	   /-- bne.s fdfa <builtIn_callEvent+0x2c>
    fdf4:	   |   moveq #1,d0
    fdf6:	/--|-- bra.w fe90 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    fdfa:	|  \-> moveq #24,d0
    fdfc:	|      add.l 20(sp),d0
    fe00:	|      move.l d0,-(sp)
    fe02:	|      jsr 14b32 <trimStack>
    fe08:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fe0a:	|      movea.l 20(sp),a0
    fe0e:	|      move.l 24(a0),d0
    fe12:	|      move.l d0,-(sp)
    fe14:	|      pea 7 <_start+0x7>
    fe18:	|      moveq #12,d0
    fe1a:	|      add.l sp,d0
    fe1c:	|      move.l d0,-(sp)
    fe1e:	|      jsr 141ae <getValueType>
    fe24:	|      lea 12(sp),sp
    fe28:	|      tst.w d0
    fe2a:	|  /-- bne.s fe30 <builtIn_callEvent+0x62>
    fe2c:	|  |   moveq #1,d0
    fe2e:	+--|-- bra.s fe90 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    fe30:	|  \-> moveq #24,d0
    fe32:	|      add.l 20(sp),d0
    fe36:	|      move.l d0,-(sp)
    fe38:	|      jsr 14b32 <trimStack>
    fe3e:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    fe40:	|      move.l (sp),d1
    fe42:	|      move.l 4(sp),d0
    fe46:	|      move.l d1,-(sp)
    fe48:	|      move.l d0,-(sp)
    fe4a:	|      jsr cfb4 <getCombinationFunction>
    fe50:	|      addq.l #8,sp
    fe52:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    fe56:	|  /-- beq.s fe76 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    fe58:	|  |   moveq #28,d0
    fe5a:	|  |   add.l 20(sp),d0
    fe5e:	|  |   move.l 8(sp),-(sp)
    fe62:	|  |   pea 2 <_start+0x2>
    fe66:	|  |   move.l d0,-(sp)
    fe68:	|  |   jsr 14aa0 <setVariable>
    fe6e:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    fe72:	|  |   moveq #4,d0
    fe74:	+--|-- bra.s fe90 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    fe76:	|  \-> moveq #28,d0
    fe78:	|      add.l 20(sp),d0
    fe7c:	|      clr.l -(sp)
    fe7e:	|      pea 1 <_start+0x1>
    fe82:	|      move.l d0,-(sp)
    fe84:	|      jsr 14aa0 <setVariable>
    fe8a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fe8e:	|      moveq #2,d0
}
    fe90:	\----> lea 12(sp),sp
    fe94:	       rts

0000fe96 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    fe96:	move.w #1,1a8cc <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    fe9e:	moveq #2,d0
}
    fea0:	rts

0000fea2 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    fea2:	moveq #24,d0
    fea4:	add.l 8(sp),d0
    fea8:	move.l d0,-(sp)
    feaa:	jsr 14b32 <trimStack>
    feb0:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    feb2:	pea 193c1 <graphics.c.1c13408a+0x1e2>
    feb8:	jsr 16bac <KPrintF>
    febe:	addq.l #4,sp
	return BR_CONTINUE;
    fec0:	moveq #2,d0
}
    fec2:	rts

0000fec4 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    fec4:	pea 193c1 <graphics.c.1c13408a+0x1e2>
    feca:	jsr 16bac <KPrintF>
    fed0:	addq.l #4,sp
	return BR_CONTINUE;
    fed2:	moveq #2,d0
}
    fed4:	rts

0000fed6 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    fed6:	pea 193c1 <graphics.c.1c13408a+0x1e2>
    fedc:	jsr 16bac <KPrintF>
    fee2:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    fee4:	moveq #2,d0
}
    fee6:	rts

0000fee8 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    fee8:	pea 193c1 <graphics.c.1c13408a+0x1e2>
    feee:	jsr 16bac <KPrintF>
    fef4:	addq.l #4,sp
	return BR_CONTINUE;
    fef6:	moveq #2,d0
}
    fef8:	rts

0000fefa <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    fefa:	pea 193c1 <graphics.c.1c13408a+0x1e2>
    ff00:	jsr 16bac <KPrintF>
    ff06:	addq.l #4,sp
	return BR_CONTINUE;
    ff08:	moveq #2,d0
}
    ff0a:	rts

0000ff0c <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    ff0c:	pea 193c1 <graphics.c.1c13408a+0x1e2>
    ff12:	jsr 16bac <KPrintF>
    ff18:	addq.l #4,sp
	return BR_CONTINUE;
    ff1a:	moveq #2,d0
}
    ff1c:	rts

0000ff1e <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    ff1e:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff22:	       movea.l 20(sp),a0
    ff26:	       move.l 24(a0),d0
    ff2a:	       move.l d0,-(sp)
    ff2c:	       pea 1 <_start+0x1>
    ff30:	       moveq #16,d0
    ff32:	       add.l sp,d0
    ff34:	       move.l d0,-(sp)
    ff36:	       jsr 141ae <getValueType>
    ff3c:	       lea 12(sp),sp
    ff40:	       tst.w d0
    ff42:	   /-- bne.s ff4a <builtIn_startMusic+0x2c>
    ff44:	   |   moveq #1,d0
    ff46:	/--|-- bra.w ffea <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    ff4a:	|  \-> moveq #24,d0
    ff4c:	|      add.l 20(sp),d0
    ff50:	|      move.l d0,-(sp)
    ff52:	|      jsr 14b32 <trimStack>
    ff58:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff5a:	|      movea.l 20(sp),a0
    ff5e:	|      move.l 24(a0),d0
    ff62:	|      move.l d0,-(sp)
    ff64:	|      pea 1 <_start+0x1>
    ff68:	|      moveq #12,d0
    ff6a:	|      add.l sp,d0
    ff6c:	|      move.l d0,-(sp)
    ff6e:	|      jsr 141ae <getValueType>
    ff74:	|      lea 12(sp),sp
    ff78:	|      tst.w d0
    ff7a:	|  /-- bne.s ff80 <builtIn_startMusic+0x62>
    ff7c:	|  |   moveq #1,d0
    ff7e:	+--|-- bra.s ffea <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    ff80:	|  \-> moveq #24,d0
    ff82:	|      add.l 20(sp),d0
    ff86:	|      move.l d0,-(sp)
    ff88:	|      jsr 14b32 <trimStack>
    ff8e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ff90:	|      movea.l 20(sp),a0
    ff94:	|      move.l 24(a0),d0
    ff98:	|      move.l d0,-(sp)
    ff9a:	|      pea 5 <_start+0x5>
    ff9e:	|      lea 8(sp),a0
    ffa2:	|      move.l a0,-(sp)
    ffa4:	|      jsr 141ae <getValueType>
    ffaa:	|      lea 12(sp),sp
    ffae:	|      tst.w d0
    ffb0:	|  /-- bne.s ffb6 <builtIn_startMusic+0x98>
    ffb2:	|  |   moveq #1,d0
    ffb4:	+--|-- bra.s ffea <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    ffb6:	|  \-> moveq #24,d0
    ffb8:	|      add.l 20(sp),d0
    ffbc:	|      move.l d0,-(sp)
    ffbe:	|      jsr 14b32 <trimStack>
    ffc4:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    ffc6:	|      movea.l 8(sp),a0
    ffca:	|      move.l 4(sp),d1
    ffce:	|      move.l (sp),d0
    ffd0:	|      move.l a0,-(sp)
    ffd2:	|      move.l d1,-(sp)
    ffd4:	|      move.l d0,-(sp)
    ffd6:	|      jsr cbc0 <playMOD>
    ffdc:	|      lea 12(sp),sp
    ffe0:	|      tst.w d0
    ffe2:	|  /-- bne.s ffe8 <builtIn_startMusic+0xca>
    ffe4:	|  |   moveq #2,d0
    ffe6:	+--|-- bra.s ffea <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    ffe8:	|  \-> moveq #2,d0
}
    ffea:	\----> lea 12(sp),sp
    ffee:	       rts

0000fff0 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    fff0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fff2:	       movea.l 12(sp),a0
    fff6:	       move.l 24(a0),d0
    fffa:	       move.l d0,-(sp)
    fffc:	       pea 1 <_start+0x1>
   10000:	       move.l sp,d0
   10002:	       addq.l #8,d0
   10004:	       move.l d0,-(sp)
   10006:	       jsr 141ae <getValueType>
   1000c:	       lea 12(sp),sp
   10010:	       tst.w d0
   10012:	   /-- bne.s 10018 <builtIn_stopMusic+0x28>
   10014:	   |   moveq #1,d0
   10016:	/--|-- bra.s 10036 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10018:	|  \-> moveq #24,d0
   1001a:	|      add.l 12(sp),d0
   1001e:	|      move.l d0,-(sp)
   10020:	|      jsr 14b32 <trimStack>
   10026:	|      addq.l #4,sp
	stopMOD (v);
   10028:	|      move.l (sp),d0
   1002a:	|      move.l d0,-(sp)
   1002c:	|      jsr cc5c <stopMOD>
   10032:	|      addq.l #4,sp
	return BR_CONTINUE;
   10034:	|      moveq #2,d0
}
   10036:	\----> addq.l #4,sp
   10038:	       rts

0001003a <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   1003a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1003c:	       movea.l 16(sp),a0
   10040:	       move.l 24(a0),d0
   10044:	       move.l d0,-(sp)
   10046:	       pea 1 <_start+0x1>
   1004a:	       move.l sp,d0
   1004c:	       addq.l #8,d0
   1004e:	       move.l d0,-(sp)
   10050:	       jsr 141ae <getValueType>
   10056:	       lea 12(sp),sp
   1005a:	       tst.w d0
   1005c:	   /-- bne.s 10062 <builtIn_setMusicVolume+0x28>
   1005e:	   |   moveq #1,d0
   10060:	/--|-- bra.s 100bc <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10062:	|  \-> moveq #24,d0
   10064:	|      add.l 16(sp),d0
   10068:	|      move.l d0,-(sp)
   1006a:	|      jsr 14b32 <trimStack>
   10070:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10072:	|      movea.l 16(sp),a0
   10076:	|      move.l 24(a0),d0
   1007a:	|      move.l d0,-(sp)
   1007c:	|      pea 1 <_start+0x1>
   10080:	|      moveq #12,d0
   10082:	|      add.l sp,d0
   10084:	|      move.l d0,-(sp)
   10086:	|      jsr 141ae <getValueType>
   1008c:	|      lea 12(sp),sp
   10090:	|      tst.w d0
   10092:	|  /-- bne.s 10098 <builtIn_setMusicVolume+0x5e>
   10094:	|  |   moveq #1,d0
   10096:	+--|-- bra.s 100bc <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10098:	|  \-> moveq #24,d0
   1009a:	|      add.l 16(sp),d0
   1009e:	|      move.l d0,-(sp)
   100a0:	|      jsr 14b32 <trimStack>
   100a6:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   100a8:	|      move.l (sp),d1
   100aa:	|      move.l 4(sp),d0
   100ae:	|      move.l d1,-(sp)
   100b0:	|      move.l d0,-(sp)
   100b2:	|      jsr cc42 <setMusicVolume>
   100b8:	|      addq.l #8,sp
	return BR_CONTINUE;
   100ba:	|      moveq #2,d0
}
   100bc:	\----> addq.l #8,sp
   100be:	       rts

000100c0 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   100c0:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   100c2:	       movea.l 12(sp),a0
   100c6:	       move.l 24(a0),d0
   100ca:	       move.l d0,-(sp)
   100cc:	       pea 1 <_start+0x1>
   100d0:	       move.l sp,d0
   100d2:	       addq.l #8,d0
   100d4:	       move.l d0,-(sp)
   100d6:	       jsr 141ae <getValueType>
   100dc:	       lea 12(sp),sp
   100e0:	       tst.w d0
   100e2:	   /-- bne.s 100e8 <builtIn_setDefaultMusicVolume+0x28>
   100e4:	   |   moveq #1,d0
   100e6:	/--|-- bra.s 10106 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   100e8:	|  \-> moveq #24,d0
   100ea:	|      add.l 12(sp),d0
   100ee:	|      move.l d0,-(sp)
   100f0:	|      jsr 14b32 <trimStack>
   100f6:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   100f8:	|      move.l (sp),d0
   100fa:	|      move.l d0,-(sp)
   100fc:	|      jsr cc26 <setDefaultMusicVolume>
   10102:	|      addq.l #4,sp
	return BR_CONTINUE;
   10104:	|      moveq #2,d0
}
   10106:	\----> addq.l #4,sp
   10108:	       rts

0001010a <builtIn_playSound>:

builtIn(playSound)
{
   1010a:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1010c:	       movea.l 12(sp),a0
   10110:	       move.l 24(a0),d0
   10114:	       move.l d0,-(sp)
   10116:	       pea 5 <_start+0x5>
   1011a:	       move.l sp,d0
   1011c:	       addq.l #8,d0
   1011e:	       move.l d0,-(sp)
   10120:	       jsr 141ae <getValueType>
   10126:	       lea 12(sp),sp
   1012a:	       tst.w d0
   1012c:	   /-- bne.s 10132 <builtIn_playSound+0x28>
   1012e:	   |   moveq #1,d0
   10130:	/--|-- bra.s 1015a <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10132:	|  \-> moveq #24,d0
   10134:	|      add.l 12(sp),d0
   10138:	|      move.l d0,-(sp)
   1013a:	|      jsr 14b32 <trimStack>
   10140:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10142:	|      move.l (sp),d0
   10144:	|      clr.l -(sp)
   10146:	|      move.l d0,-(sp)
   10148:	|      jsr cc4a <startSound>
   1014e:	|      addq.l #8,sp
   10150:	|      tst.w d0
   10152:	|  /-- bne.s 10158 <builtIn_playSound+0x4e>
   10154:	|  |   moveq #2,d0
   10156:	+--|-- bra.s 1015a <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10158:	|  \-> moveq #2,d0
}
   1015a:	\----> addq.l #4,sp
   1015c:	       rts

0001015e <builtIn_loopSound>:

builtIn(loopSound)
{
   1015e:	             lea -28(sp),sp
   10162:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10164:	             tst.l 36(sp)
   10168:	         /-- bgt.s 1017e <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   1016a:	         |   pea 193e4 <graphics.c.1c13408a+0x205>
   10170:	         |   jsr 16bac <KPrintF>
   10176:	         |   addq.l #4,sp
		return BR_ERROR;
   10178:	         |   moveq #1,d0
   1017a:	/--------|-- bra.w 1033a <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   1017e:	|        \-> moveq #1,d0
   10180:	|            cmp.l 36(sp),d0
   10184:	|     /----- blt.s 101e0 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10186:	|     |      movea.l 40(sp),a0
   1018a:	|     |      move.l 24(a0),d0
   1018e:	|     |      move.l d0,-(sp)
   10190:	|     |      pea 5 <_start+0x5>
   10194:	|     |      lea 16(sp),a0
   10198:	|     |      move.l a0,-(sp)
   1019a:	|     |      jsr 141ae <getValueType>
   101a0:	|     |      lea 12(sp),sp
   101a4:	|     |      tst.w d0
   101a6:	|     |  /-- bne.s 101ae <builtIn_loopSound+0x50>
   101a8:	|     |  |   moveq #1,d0
   101aa:	+-----|--|-- bra.w 1033a <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   101ae:	|     |  \-> moveq #24,d0
   101b0:	|     |      add.l 40(sp),d0
   101b4:	|     |      move.l d0,-(sp)
   101b6:	|     |      jsr 14b32 <trimStack>
   101bc:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   101be:	|     |      move.l 8(sp),d0
   101c2:	|     |      pea 1 <_start+0x1>
   101c6:	|     |      move.l d0,-(sp)
   101c8:	|     |      jsr cc4a <startSound>
   101ce:	|     |      addq.l #8,sp
   101d0:	|     |      tst.w d0
   101d2:	|     |  /-- bne.s 101da <builtIn_loopSound+0x7c>
   101d4:	|     |  |   moveq #2,d0
   101d6:	+-----|--|-- bra.w 1033a <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   101da:	|     |  \-> moveq #2,d0
   101dc:	+-----|----- bra.w 1033a <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   101e0:	|     \----> moveq #2,d1
   101e2:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   101e6:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   101ea:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   101ee:	|            movea.l 40(sp),a0
   101f2:	|            movea.l 24(a0),a0
   101f6:	|            move.l (a0),d0
   101f8:	|            moveq #5,d1
   101fa:	|            cmp.l d0,d1
   101fc:	|  /-------- beq.w 102d4 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10200:	|  |         movea.l 40(sp),a0
   10204:	|  |         move.l 24(a0),d0
   10208:	|  |         move.l d0,-(sp)
   1020a:	|  |         pea 1 <_start+0x1>
   1020e:	|  |         lea 12(sp),a0
   10212:	|  |         move.l a0,-(sp)
   10214:	|  |         jsr 141ae <getValueType>
   1021a:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   1021e:	|  |         moveq #24,d0
   10220:	|  |         add.l 40(sp),d0
   10224:	|  |         move.l d0,-(sp)
   10226:	|  |         jsr 14b32 <trimStack>
   1022c:	|  |         addq.l #4,sp
			numParams--;
   1022e:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10232:	|  +-------- bra.w 102d4 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10236:	|  |  /----> movea.l 40(sp),a0
   1023a:	|  |  |      move.l 24(a0),d0
   1023e:	|  |  |      move.l d0,-(sp)
   10240:	|  |  |      pea 5 <_start+0x5>
   10244:	|  |  |      lea 16(sp),a0
   10248:	|  |  |      move.l a0,-(sp)
   1024a:	|  |  |      jsr 141ae <getValueType>
   10250:	|  |  |      lea 12(sp),sp
   10254:	|  |  |      tst.w d0
   10256:	|  |  |  /-- bne.s 1026c <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10258:	|  |  |  |   pea 19422 <graphics.c.1c13408a+0x243>
   1025e:	|  |  |  |   jsr 16bac <KPrintF>
   10264:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10266:	|  |  |  |   moveq #1,d0
   10268:	+--|--|--|-- bra.w 1033a <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   1026c:	|  |  |  \-> moveq #20,d0
   1026e:	|  |  |      move.l d0,20(sp)
   10272:	|  |  |      clr.l 16(sp)
   10276:	|  |  |      move.l 1a7a2 <SysBase>,d0
   1027c:	|  |  |      movea.l d0,a6
   1027e:	|  |  |      move.l 20(sp),d0
   10282:	|  |  |      move.l 16(sp),d1
   10286:	|  |  |      jsr -684(a6)
   1028a:	|  |  |      move.l d0,12(sp)
   1028e:	|  |  |      move.l 12(sp),d0
   10292:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10296:	|  |  |  /-- bne.s 1029e <builtIn_loopSound+0x140>
   10298:	|  |  |  |   moveq #1,d0
   1029a:	+--|--|--|-- bra.w 1033a <builtIn_loopSound+0x1dc>

			s->next = old;
   1029e:	|  |  |  \-> movea.l 28(sp),a0
   102a2:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   102a8:	|  |  |      movea.l 28(sp),a0
   102ac:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   102b0:	|  |  |      move.l 8(sp),d0
   102b4:	|  |  |      movea.l 28(sp),a0
   102b8:	|  |  |      move.l d0,(a0)
			old = s;
   102ba:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   102c0:	|  |  |      moveq #24,d0
   102c2:	|  |  |      add.l 40(sp),d0
   102c6:	|  |  |      move.l d0,-(sp)
   102c8:	|  |  |      jsr 14b32 <trimStack>
   102ce:	|  |  |      addq.l #4,sp
			numParams--;
   102d0:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   102d4:	|  \--|----> tst.l 36(sp)
   102d8:	|     \----- bne.w 10236 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   102dc:	|        /-- bra.s 102e8 <builtIn_loopSound+0x18a>
   102de:	|     /--|-> movea.l 28(sp),a0
   102e2:	|     |  |   move.l 4(a0),28(sp)
   102e8:	|     |  \-> movea.l 28(sp),a0
   102ec:	|     |      move.l 4(a0),d0
   102f0:	|     \----- bne.s 102de <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   102f2:	|            move.l 4(sp),d0
   102f6:	|            moveq #1,d1
   102f8:	|            cmp.l d0,d1
   102fa:	|     /----- bge.s 10312 <builtIn_loopSound+0x1b4>
			s->next = old;
   102fc:	|     |      movea.l 28(sp),a0
   10300:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10306:	|     |      movea.l 24(sp),a0
   1030a:	|     |      move.l 28(sp),8(a0)
   10310:	|     |  /-- bra.s 10322 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10312:	|     \--|-> move.l 4(sp),d0
   10316:	|        +-- beq.s 10322 <builtIn_loopSound+0x1c4>
			s->next = s;
   10318:	|        |   movea.l 28(sp),a0
   1031c:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10322:	|        \-> movea.l 24(sp),a0
   10326:	|            moveq #-1,d0
   10328:	|            move.l d0,16(a0)
		playSoundList(old);
   1032c:	|            move.l 24(sp),-(sp)
   10330:	|            jsr cbc4 <playSoundList>
   10336:	|            addq.l #4,sp
		return BR_CONTINUE;
   10338:	|            moveq #2,d0
	}
}
   1033a:	\----------> movea.l (sp)+,a6
   1033c:	             lea 28(sp),sp
   10340:	             rts

00010342 <builtIn_stopSound>:

builtIn(stopSound)
{
   10342:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10344:	       movea.l 12(sp),a0
   10348:	       move.l 24(a0),d0
   1034c:	       move.l d0,-(sp)
   1034e:	       pea 5 <_start+0x5>
   10352:	       move.l sp,d0
   10354:	       addq.l #8,d0
   10356:	       move.l d0,-(sp)
   10358:	       jsr 141ae <getValueType>
   1035e:	       lea 12(sp),sp
   10362:	       tst.w d0
   10364:	   /-- bne.s 1036a <builtIn_stopSound+0x28>
   10366:	   |   moveq #1,d0
   10368:	/--|-- bra.s 10388 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   1036a:	|  \-> moveq #24,d0
   1036c:	|      add.l 12(sp),d0
   10370:	|      move.l d0,-(sp)
   10372:	|      jsr 14b32 <trimStack>
   10378:	|      addq.l #4,sp
	huntKillSound (v);
   1037a:	|      move.l (sp),d0
   1037c:	|      move.l d0,-(sp)
   1037e:	|      jsr cbbc <huntKillSound>
   10384:	|      addq.l #4,sp
	return BR_CONTINUE;
   10386:	|      moveq #2,d0
}
   10388:	\----> addq.l #4,sp
   1038a:	       rts

0001038c <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   1038c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1038e:	       movea.l 12(sp),a0
   10392:	       move.l 24(a0),d0
   10396:	       move.l d0,-(sp)
   10398:	       pea 1 <_start+0x1>
   1039c:	       move.l sp,d0
   1039e:	       addq.l #8,d0
   103a0:	       move.l d0,-(sp)
   103a2:	       jsr 141ae <getValueType>
   103a8:	       lea 12(sp),sp
   103ac:	       tst.w d0
   103ae:	   /-- bne.s 103b4 <builtIn_setDefaultSoundVolume+0x28>
   103b0:	   |   moveq #1,d0
   103b2:	/--|-- bra.s 103d2 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   103b4:	|  \-> moveq #24,d0
   103b6:	|      add.l 12(sp),d0
   103ba:	|      move.l d0,-(sp)
   103bc:	|      jsr 14b32 <trimStack>
   103c2:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   103c4:	|      move.l (sp),d0
   103c6:	|      move.l d0,-(sp)
   103c8:	|      jsr cc32 <setDefaultSoundVolume>
   103ce:	|      addq.l #4,sp
	return BR_CONTINUE;
   103d0:	|      moveq #2,d0
}
   103d2:	\----> addq.l #4,sp
   103d4:	       rts

000103d6 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   103d6:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103d8:	       movea.l 16(sp),a0
   103dc:	       move.l 24(a0),d0
   103e0:	       move.l d0,-(sp)
   103e2:	       pea 1 <_start+0x1>
   103e6:	       move.l sp,d0
   103e8:	       addq.l #8,d0
   103ea:	       move.l d0,-(sp)
   103ec:	       jsr 141ae <getValueType>
   103f2:	       lea 12(sp),sp
   103f6:	       tst.w d0
   103f8:	   /-- bne.s 103fe <builtIn_setSoundVolume+0x28>
   103fa:	   |   moveq #1,d0
   103fc:	/--|-- bra.s 10458 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   103fe:	|  \-> moveq #24,d0
   10400:	|      add.l 16(sp),d0
   10404:	|      move.l d0,-(sp)
   10406:	|      jsr 14b32 <trimStack>
   1040c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1040e:	|      movea.l 16(sp),a0
   10412:	|      move.l 24(a0),d0
   10416:	|      move.l d0,-(sp)
   10418:	|      pea 5 <_start+0x5>
   1041c:	|      moveq #12,d0
   1041e:	|      add.l sp,d0
   10420:	|      move.l d0,-(sp)
   10422:	|      jsr 141ae <getValueType>
   10428:	|      lea 12(sp),sp
   1042c:	|      tst.w d0
   1042e:	|  /-- bne.s 10434 <builtIn_setSoundVolume+0x5e>
   10430:	|  |   moveq #1,d0
   10432:	+--|-- bra.s 10458 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10434:	|  \-> moveq #24,d0
   10436:	|      add.l 16(sp),d0
   1043a:	|      move.l d0,-(sp)
   1043c:	|      jsr 14b32 <trimStack>
   10442:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10444:	|      move.l (sp),d1
   10446:	|      move.l 4(sp),d0
   1044a:	|      move.l d1,-(sp)
   1044c:	|      move.l d0,-(sp)
   1044e:	|      jsr cc46 <setSoundVolume>
   10454:	|      addq.l #8,sp
	return BR_CONTINUE;
   10456:	|      moveq #2,d0
}
   10458:	\----> addq.l #8,sp
   1045a:	       rts

0001045c <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   1045c:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10460:	       movea.l 20(sp),a0
   10464:	       move.l 24(a0),d0
   10468:	       move.l d0,-(sp)
   1046a:	       pea 1 <_start+0x1>
   1046e:	       moveq #12,d0
   10470:	       add.l sp,d0
   10472:	       move.l d0,-(sp)
   10474:	       jsr 141ae <getValueType>
   1047a:	       lea 12(sp),sp
   1047e:	       tst.w d0
   10480:	   /-- bne.s 10488 <builtIn_setSoundLoopPoints+0x2c>
   10482:	   |   moveq #1,d0
   10484:	/--|-- bra.w 10520 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10488:	|  \-> moveq #24,d0
   1048a:	|      add.l 20(sp),d0
   1048e:	|      move.l d0,-(sp)
   10490:	|      jsr 14b32 <trimStack>
   10496:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10498:	|      movea.l 20(sp),a0
   1049c:	|      move.l 24(a0),d0
   104a0:	|      move.l d0,-(sp)
   104a2:	|      pea 1 <_start+0x1>
   104a6:	|      lea 8(sp),a0
   104aa:	|      move.l a0,-(sp)
   104ac:	|      jsr 141ae <getValueType>
   104b2:	|      lea 12(sp),sp
   104b6:	|      tst.w d0
   104b8:	|  /-- bne.s 104be <builtIn_setSoundLoopPoints+0x62>
   104ba:	|  |   moveq #1,d0
   104bc:	+--|-- bra.s 10520 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   104be:	|  \-> moveq #24,d0
   104c0:	|      add.l 20(sp),d0
   104c4:	|      move.l d0,-(sp)
   104c6:	|      jsr 14b32 <trimStack>
   104cc:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   104ce:	|      movea.l 20(sp),a0
   104d2:	|      move.l 24(a0),d0
   104d6:	|      move.l d0,-(sp)
   104d8:	|      pea 5 <_start+0x5>
   104dc:	|      moveq #16,d0
   104de:	|      add.l sp,d0
   104e0:	|      move.l d0,-(sp)
   104e2:	|      jsr 141ae <getValueType>
   104e8:	|      lea 12(sp),sp
   104ec:	|      tst.w d0
   104ee:	|  /-- bne.s 104f4 <builtIn_setSoundLoopPoints+0x98>
   104f0:	|  |   moveq #1,d0
   104f2:	+--|-- bra.s 10520 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   104f4:	|  \-> moveq #24,d0
   104f6:	|      add.l 20(sp),d0
   104fa:	|      move.l d0,-(sp)
   104fc:	|      jsr 14b32 <trimStack>
   10502:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10504:	|      movea.l 4(sp),a0
   10508:	|      move.l (sp),d1
   1050a:	|      move.l 8(sp),d0
   1050e:	|      move.l a0,-(sp)
   10510:	|      move.l d1,-(sp)
   10512:	|      move.l d0,-(sp)
   10514:	|      jsr cc3e <setSoundLoop>
   1051a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1051e:	|      moveq #2,d0
}
   10520:	\----> lea 12(sp),sp
   10524:	       rts

00010526 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10526:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10528:	          movea.l 12(sp),a0
   1052c:	          movea.l 24(a0),a0
   10530:	          move.l (a0),d0
   10532:	          moveq #5,d1
   10534:	          cmp.l d0,d1
   10536:	/-------- bne.s 1057a <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10538:	|         movea.l 12(sp),a0
   1053c:	|         move.l 24(a0),d0
   10540:	|         move.l d0,-(sp)
   10542:	|         pea 5 <_start+0x5>
   10546:	|         move.l sp,d0
   10548:	|         addq.l #8,d0
   1054a:	|         move.l d0,-(sp)
   1054c:	|         jsr 141ae <getValueType>
   10552:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10556:	|         moveq #24,d0
   10558:	|         add.l 12(sp),d0
   1055c:	|         move.l d0,-(sp)
   1055e:	|         jsr 14b32 <trimStack>
   10564:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10566:	|         move.l (sp),d0
   10568:	|         move.l d0,-(sp)
   1056a:	|         jsr 16356 <setFloor>
   10570:	|         addq.l #4,sp
   10572:	|         tst.w d0
   10574:	|  /----- bne.s 10590 <builtIn_setFloor+0x6a>
   10576:	|  |      moveq #1,d0
   10578:	|  |  /-- bra.s 10592 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   1057a:	\--|--|-> moveq #24,d0
   1057c:	   |  |   add.l 12(sp),d0
   10580:	   |  |   move.l d0,-(sp)
   10582:	   |  |   jsr 14b32 <trimStack>
   10588:	   |  |   addq.l #4,sp
		setFloorNull ();
   1058a:	   |  |   jsr 16ad0 <setFloorNull>
	}
	return BR_CONTINUE;
   10590:	   \--|-> moveq #2,d0
}
   10592:	      \-> addq.l #4,sp
   10594:	          rts

00010596 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10596:	jsr 15bee <drawFloor>
	return BR_CONTINUE;
   1059c:	moveq #2,d0
}
   1059e:	rts

000105a0 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   105a0:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   105a2:	          movea.l 12(sp),a0
   105a6:	          movea.l 24(a0),a0
   105aa:	          move.l (a0),d0
   105ac:	          moveq #5,d1
   105ae:	          cmp.l d0,d1
   105b0:	/-------- bne.s 105f4 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   105b2:	|         movea.l 12(sp),a0
   105b6:	|         move.l 24(a0),d0
   105ba:	|         move.l d0,-(sp)
   105bc:	|         pea 5 <_start+0x5>
   105c0:	|         move.l sp,d0
   105c2:	|         addq.l #8,d0
   105c4:	|         move.l d0,-(sp)
   105c6:	|         jsr 141ae <getValueType>
   105cc:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   105d0:	|         moveq #24,d0
   105d2:	|         add.l 12(sp),d0
   105d6:	|         move.l d0,-(sp)
   105d8:	|         jsr 14b32 <trimStack>
   105de:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   105e0:	|         move.l (sp),d0
   105e2:	|         move.l d0,-(sp)
   105e4:	|         jsr 7ff4 <setZBuffer>
   105ea:	|         addq.l #4,sp
   105ec:	|         tst.w d0
   105ee:	|  /----- bne.s 1060a <builtIn_setZBuffer+0x6a>
   105f0:	|  |      moveq #1,d0
   105f2:	|  |  /-- bra.s 1060c <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   105f4:	\--|--|-> moveq #24,d0
   105f6:	   |  |   add.l 12(sp),d0
   105fa:	   |  |   move.l d0,-(sp)
   105fc:	   |  |   jsr 14b32 <trimStack>
   10602:	   |  |   addq.l #4,sp
		killZBuffer ();
   10604:	   |  |   jsr 7f9e <killZBuffer>
	}
	return BR_CONTINUE;
   1060a:	   \--|-> moveq #2,d0
}
   1060c:	      \-> addq.l #4,sp
   1060e:	          rts

00010610 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10610:	pea 19459 <graphics.c.1c13408a+0x27a>
   10616:	jsr 16bac <KPrintF>
   1061c:	addq.l #4,sp
	return BR_CONTINUE;
   1061e:	moveq #2,d0
}
   10620:	rts

00010622 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10622:	          movea.l 8(sp),a0
   10626:	          move.l 24(a0),d0
   1062a:	          move.l d0,-(sp)
   1062c:	          pea 1 <_start+0x1>
   10630:	          pea 1a8c8 <speechMode>
   10636:	          jsr 141ae <getValueType>
   1063c:	          lea 12(sp),sp
   10640:	          tst.w d0
   10642:	      /-- bne.s 10648 <builtIn_setSpeechMode+0x26>
   10644:	      |   moveq #1,d0
   10646:	/-----|-- bra.s 10680 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10648:	|     \-> moveq #24,d0
   1064a:	|         add.l 8(sp),d0
   1064e:	|         move.l d0,-(sp)
   10650:	|         jsr 14b32 <trimStack>
   10656:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10658:	|         move.l 1a8c8 <speechMode>,d0
   1065e:	|     /-- bmi.s 1066c <builtIn_setSpeechMode+0x4a>
   10660:	|     |   move.l 1a8c8 <speechMode>,d0
   10666:	|     |   moveq #2,d1
   10668:	|     |   cmp.l d0,d1
   1066a:	|  /--|-- bge.s 1067e <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   1066c:	|  |  \-> pea 19472 <graphics.c.1c13408a+0x293>
   10672:	|  |      jsr 16bac <KPrintF>
   10678:	|  |      addq.l #4,sp
		return BR_ERROR;
   1067a:	|  |      moveq #1,d0
   1067c:	+--|----- bra.s 10680 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   1067e:	|  \----> moveq #2,d0
}
   10680:	\-------> rts

00010682 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10682:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10684:	       jsr 77a6 <isThereAnySpeechGoingOn>
   1068a:	       move.l d0,(sp)
	if (i == -1) {
   1068c:	       moveq #-1,d0
   1068e:	       cmp.l (sp),d0
   10690:	/----- bne.s 106ac <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10692:	|      moveq #28,d0
   10694:	|      add.l 12(sp),d0
   10698:	|      clr.l -(sp)
   1069a:	|      pea 1 <_start+0x1>
   1069e:	|      move.l d0,-(sp)
   106a0:	|      jsr 14aa0 <setVariable>
   106a6:	|      lea 12(sp),sp
   106aa:	|  /-- bra.s 106c4 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   106ac:	\--|-> moveq #28,d0
   106ae:	   |   add.l 12(sp),d0
   106b2:	   |   move.l (sp),-(sp)
   106b4:	   |   pea 7 <_start+0x7>
   106b8:	   |   move.l d0,-(sp)
   106ba:	   |   jsr 14aa0 <setVariable>
   106c0:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   106c4:	   \-> moveq #2,d0
}
   106c6:	       addq.l #4,sp
   106c8:	       rts

000106ca <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   106ca:	jsr 5a8e <killSpeechTimers>
	return BR_CONTINUE;
   106d0:	moveq #2,d0
}
   106d2:	rts

000106d4 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   106d4:	       move.l 1a90e <overRegion>,d0
   106da:	/----- beq.s 10704 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   106dc:	|      movea.l 1a90e <overRegion>,a0
   106e2:	|      movea.l 28(a0),a0
   106e6:	|      move.l 4(a0),d1
   106ea:	|      moveq #28,d0
   106ec:	|      add.l 8(sp),d0
   106f0:	|      move.l d1,-(sp)
   106f2:	|      pea 7 <_start+0x7>
   106f6:	|      move.l d0,-(sp)
   106f8:	|      jsr 14aa0 <setVariable>
   106fe:	|      lea 12(sp),sp
   10702:	|  /-- bra.s 1071c <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10704:	\--|-> moveq #28,d0
   10706:	   |   add.l 8(sp),d0
   1070a:	   |   clr.l -(sp)
   1070c:	   |   pea 1 <_start+0x1>
   10710:	   |   move.l d0,-(sp)
   10712:	   |   jsr 14aa0 <setVariable>
   10718:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   1071c:	   \-> moveq #2,d0
}
   1071e:	       rts

00010720 <builtIn_rename>:

builtIn(rename)
{
   10720:	       lea -16(sp),sp
   10724:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10726:	       movea.l 28(sp),a0
   1072a:	       move.l 24(a0),d0
   1072e:	       move.l d0,-(sp)
   10730:	       jsr 14784 <getTextFromAnyVar>
   10736:	       addq.l #4,sp
   10738:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   1073c:	   /-- bne.s 10742 <builtIn_rename+0x22>
   1073e:	   |   moveq #1,d0
   10740:	/--|-- bra.s 107bc <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10742:	|  \-> moveq #24,d0
   10744:	|      add.l 28(sp),d0
   10748:	|      move.l d0,-(sp)
   1074a:	|      jsr 14b32 <trimStack>
   10750:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10752:	|      movea.l 28(sp),a0
   10756:	|      move.l 24(a0),d0
   1075a:	|      move.l d0,-(sp)
   1075c:	|      pea 7 <_start+0x7>
   10760:	|      lea 12(sp),a0
   10764:	|      move.l a0,-(sp)
   10766:	|      jsr 141ae <getValueType>
   1076c:	|      lea 12(sp),sp
   10770:	|      tst.w d0
   10772:	|  /-- bne.s 10778 <builtIn_rename+0x58>
   10774:	|  |   moveq #1,d0
   10776:	+--|-- bra.s 107bc <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10778:	|  \-> moveq #24,d0
   1077a:	|      add.l 28(sp),d0
   1077e:	|      move.l d0,-(sp)
   10780:	|      jsr 14b32 <trimStack>
   10786:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10788:	|      move.l 4(sp),d0
   1078c:	|      move.l d0,-(sp)
   1078e:	|      jsr cf80 <findObjectType>
   10794:	|      addq.l #4,sp
   10796:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   1079a:	|      movea.l 12(sp),a0
   1079e:	|      move.l (a0),8(sp)
   107a2:	|      move.l 1a7a2 <SysBase>,d0
   107a8:	|      movea.l d0,a6
   107aa:	|      movea.l 8(sp),a1
   107ae:	|      jsr -690(a6)
	o->screenName = newText;
   107b2:	|      movea.l 12(sp),a0
   107b6:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   107ba:	|      moveq #2,d0
}
   107bc:	\----> movea.l (sp)+,a6
   107be:	       lea 16(sp),sp
   107c2:	       rts

000107c4 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   107c4:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   107c8:	          movea.l 20(sp),a0
   107cc:	          move.l 24(a0),d0
   107d0:	          move.l d0,-(sp)
   107d2:	          pea 7 <_start+0x7>
   107d6:	          lea 8(sp),a0
   107da:	          move.l a0,-(sp)
   107dc:	          jsr 141ae <getValueType>
   107e2:	          lea 12(sp),sp
   107e6:	          tst.w d0
   107e8:	      /-- bne.s 107f0 <builtIn_getObjectX+0x2c>
   107ea:	      |   moveq #1,d0
   107ec:	/-----|-- bra.w 1088c <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   107f0:	|     \-> moveq #24,d0
   107f2:	|         add.l 20(sp),d0
   107f6:	|         move.l d0,-(sp)
   107f8:	|         jsr 14b32 <trimStack>
   107fe:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10800:	|         move.l (sp),d0
   10802:	|         move.l d0,-(sp)
   10804:	|         jsr a0a6 <findPerson>
   1080a:	|         addq.l #4,sp
   1080c:	|         move.l d0,8(sp)
	if (pers) {
   10810:	|     /-- beq.s 1083e <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10812:	|     |   movea.l 8(sp),a0
   10816:	|     |   move.l (a0),d0
   10818:	|     |   move.l d0,-(sp)
   1081a:	|     |   jsr 16f80 <__fixsfsi>
   10820:	|     |   addq.l #4,sp
   10822:	|     |   move.l d0,d1
   10824:	|     |   moveq #28,d0
   10826:	|     |   add.l 20(sp),d0
   1082a:	|     |   move.l d1,-(sp)
   1082c:	|     |   pea 1 <_start+0x1>
   10830:	|     |   move.l d0,-(sp)
   10832:	|     |   jsr 14aa0 <setVariable>
   10838:	|     |   lea 12(sp),sp
   1083c:	|  /--|-- bra.s 1088a <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   1083e:	|  |  \-> move.l (sp),d0
   10840:	|  |      move.l d0,-(sp)
   10842:	|  |      jsr 153ce <getRegionForObject>
   10848:	|  |      addq.l #4,sp
   1084a:	|  |      move.l d0,4(sp)
		if (la) {
   1084e:	|  |  /-- beq.s 10872 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10850:	|  |  |   movea.l 4(sp),a0
   10854:	|  |  |   move.l 16(a0),d1
   10858:	|  |  |   moveq #28,d0
   1085a:	|  |  |   add.l 20(sp),d0
   1085e:	|  |  |   move.l d1,-(sp)
   10860:	|  |  |   pea 1 <_start+0x1>
   10864:	|  |  |   move.l d0,-(sp)
   10866:	|  |  |   jsr 14aa0 <setVariable>
   1086c:	|  |  |   lea 12(sp),sp
   10870:	|  +--|-- bra.s 1088a <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10872:	|  |  \-> moveq #28,d0
   10874:	|  |      add.l 20(sp),d0
   10878:	|  |      clr.l -(sp)
   1087a:	|  |      pea 1 <_start+0x1>
   1087e:	|  |      move.l d0,-(sp)
   10880:	|  |      jsr 14aa0 <setVariable>
   10886:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   1088a:	|  \----> moveq #2,d0
}
   1088c:	\-------> lea 12(sp),sp
   10890:	          rts

00010892 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10892:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10896:	          movea.l 20(sp),a0
   1089a:	          move.l 24(a0),d0
   1089e:	          move.l d0,-(sp)
   108a0:	          pea 7 <_start+0x7>
   108a4:	          lea 8(sp),a0
   108a8:	          move.l a0,-(sp)
   108aa:	          jsr 141ae <getValueType>
   108b0:	          lea 12(sp),sp
   108b4:	          tst.w d0
   108b6:	      /-- bne.s 108be <builtIn_getObjectY+0x2c>
   108b8:	      |   moveq #1,d0
   108ba:	/-----|-- bra.w 1095c <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   108be:	|     \-> moveq #24,d0
   108c0:	|         add.l 20(sp),d0
   108c4:	|         move.l d0,-(sp)
   108c6:	|         jsr 14b32 <trimStack>
   108cc:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   108ce:	|         move.l (sp),d0
   108d0:	|         move.l d0,-(sp)
   108d2:	|         jsr a0a6 <findPerson>
   108d8:	|         addq.l #4,sp
   108da:	|         move.l d0,8(sp)
	if (pers) {
   108de:	|     /-- beq.s 1090e <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   108e0:	|     |   movea.l 8(sp),a0
   108e4:	|     |   move.l 4(a0),d0
   108e8:	|     |   move.l d0,-(sp)
   108ea:	|     |   jsr 16f80 <__fixsfsi>
   108f0:	|     |   addq.l #4,sp
   108f2:	|     |   move.l d0,d1
   108f4:	|     |   moveq #28,d0
   108f6:	|     |   add.l 20(sp),d0
   108fa:	|     |   move.l d1,-(sp)
   108fc:	|     |   pea 1 <_start+0x1>
   10900:	|     |   move.l d0,-(sp)
   10902:	|     |   jsr 14aa0 <setVariable>
   10908:	|     |   lea 12(sp),sp
   1090c:	|  /--|-- bra.s 1095a <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   1090e:	|  |  \-> move.l (sp),d0
   10910:	|  |      move.l d0,-(sp)
   10912:	|  |      jsr 153ce <getRegionForObject>
   10918:	|  |      addq.l #4,sp
   1091a:	|  |      move.l d0,4(sp)
		if (la) {
   1091e:	|  |  /-- beq.s 10942 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10920:	|  |  |   movea.l 4(sp),a0
   10924:	|  |  |   move.l 20(a0),d1
   10928:	|  |  |   moveq #28,d0
   1092a:	|  |  |   add.l 20(sp),d0
   1092e:	|  |  |   move.l d1,-(sp)
   10930:	|  |  |   pea 1 <_start+0x1>
   10934:	|  |  |   move.l d0,-(sp)
   10936:	|  |  |   jsr 14aa0 <setVariable>
   1093c:	|  |  |   lea 12(sp),sp
   10940:	|  +--|-- bra.s 1095a <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10942:	|  |  \-> moveq #28,d0
   10944:	|  |      add.l 20(sp),d0
   10948:	|  |      clr.l -(sp)
   1094a:	|  |      pea 1 <_start+0x1>
   1094e:	|  |      move.l d0,-(sp)
   10950:	|  |      jsr 14aa0 <setVariable>
   10956:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   1095a:	|  \----> moveq #2,d0
}
   1095c:	\-------> lea 12(sp),sp
   10960:	          rts

00010962 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10962:	       lea -32(sp),sp
   10966:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1096a:	       movea.l 56(sp),a0
   1096e:	       move.l 24(a0),d0
   10972:	       move.l d0,-(sp)
   10974:	       pea 1 <_start+0x1>
   10978:	       lea 28(sp),a0
   1097c:	       move.l a0,-(sp)
   1097e:	       jsr 141ae <getValueType>
   10984:	       lea 12(sp),sp
   10988:	       tst.w d0
   1098a:	   /-- bne.s 10992 <builtIn_addScreenRegion+0x30>
   1098c:	   |   moveq #1,d0
   1098e:	/--|-- bra.w 10b6c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10992:	|  \-> moveq #24,d0
   10994:	|      add.l 56(sp),d0
   10998:	|      move.l d0,-(sp)
   1099a:	|      jsr 14b32 <trimStack>
   109a0:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109a2:	|      movea.l 56(sp),a0
   109a6:	|      move.l 24(a0),d0
   109aa:	|      move.l d0,-(sp)
   109ac:	|      pea 1 <_start+0x1>
   109b0:	|      moveq #48,d0
   109b2:	|      add.l sp,d0
   109b4:	|      move.l d0,-(sp)
   109b6:	|      jsr 141ae <getValueType>
   109bc:	|      lea 12(sp),sp
   109c0:	|      tst.w d0
   109c2:	|  /-- bne.s 109ca <builtIn_addScreenRegion+0x68>
   109c4:	|  |   moveq #1,d0
   109c6:	+--|-- bra.w 10b6c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   109ca:	|  \-> moveq #24,d0
   109cc:	|      add.l 56(sp),d0
   109d0:	|      move.l d0,-(sp)
   109d2:	|      jsr 14b32 <trimStack>
   109d8:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109da:	|      movea.l 56(sp),a0
   109de:	|      move.l 24(a0),d0
   109e2:	|      move.l d0,-(sp)
   109e4:	|      pea 1 <_start+0x1>
   109e8:	|      moveq #52,d0
   109ea:	|      add.l sp,d0
   109ec:	|      move.l d0,-(sp)
   109ee:	|      jsr 141ae <getValueType>
   109f4:	|      lea 12(sp),sp
   109f8:	|      tst.w d0
   109fa:	|  /-- bne.s 10a02 <builtIn_addScreenRegion+0xa0>
   109fc:	|  |   moveq #1,d0
   109fe:	+--|-- bra.w 10b6c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10a02:	|  \-> moveq #24,d0
   10a04:	|      add.l 56(sp),d0
   10a08:	|      move.l d0,-(sp)
   10a0a:	|      jsr 14b32 <trimStack>
   10a10:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a12:	|      movea.l 56(sp),a0
   10a16:	|      move.l 24(a0),d0
   10a1a:	|      move.l d0,-(sp)
   10a1c:	|      pea 1 <_start+0x1>
   10a20:	|      lea 32(sp),a0
   10a24:	|      move.l a0,-(sp)
   10a26:	|      jsr 141ae <getValueType>
   10a2c:	|      lea 12(sp),sp
   10a30:	|      tst.w d0
   10a32:	|  /-- bne.s 10a3a <builtIn_addScreenRegion+0xd8>
   10a34:	|  |   moveq #1,d0
   10a36:	+--|-- bra.w 10b6c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10a3a:	|  \-> moveq #24,d0
   10a3c:	|      add.l 56(sp),d0
   10a40:	|      move.l d0,-(sp)
   10a42:	|      jsr 14b32 <trimStack>
   10a48:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a4a:	|      movea.l 56(sp),a0
   10a4e:	|      move.l 24(a0),d0
   10a52:	|      move.l d0,-(sp)
   10a54:	|      pea 1 <_start+0x1>
   10a58:	|      lea 36(sp),a0
   10a5c:	|      move.l a0,-(sp)
   10a5e:	|      jsr 141ae <getValueType>
   10a64:	|      lea 12(sp),sp
   10a68:	|      tst.w d0
   10a6a:	|  /-- bne.s 10a72 <builtIn_addScreenRegion+0x110>
   10a6c:	|  |   moveq #1,d0
   10a6e:	+--|-- bra.w 10b6c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10a72:	|  \-> moveq #24,d0
   10a74:	|      add.l 56(sp),d0
   10a78:	|      move.l d0,-(sp)
   10a7a:	|      jsr 14b32 <trimStack>
   10a80:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a82:	|      movea.l 56(sp),a0
   10a86:	|      move.l 24(a0),d0
   10a8a:	|      move.l d0,-(sp)
   10a8c:	|      pea 1 <_start+0x1>
   10a90:	|      lea 40(sp),a0
   10a94:	|      move.l a0,-(sp)
   10a96:	|      jsr 141ae <getValueType>
   10a9c:	|      lea 12(sp),sp
   10aa0:	|      tst.w d0
   10aa2:	|  /-- bne.s 10aaa <builtIn_addScreenRegion+0x148>
   10aa4:	|  |   moveq #1,d0
   10aa6:	+--|-- bra.w 10b6c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10aaa:	|  \-> moveq #24,d0
   10aac:	|      add.l 56(sp),d0
   10ab0:	|      move.l d0,-(sp)
   10ab2:	|      jsr 14b32 <trimStack>
   10ab8:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10aba:	|      movea.l 56(sp),a0
   10abe:	|      move.l 24(a0),d0
   10ac2:	|      move.l d0,-(sp)
   10ac4:	|      pea 1 <_start+0x1>
   10ac8:	|      lea 44(sp),a0
   10acc:	|      move.l a0,-(sp)
   10ace:	|      jsr 141ae <getValueType>
   10ad4:	|      lea 12(sp),sp
   10ad8:	|      tst.w d0
   10ada:	|  /-- bne.s 10ae2 <builtIn_addScreenRegion+0x180>
   10adc:	|  |   moveq #1,d0
   10ade:	+--|-- bra.w 10b6c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10ae2:	|  \-> moveq #24,d0
   10ae4:	|      add.l 56(sp),d0
   10ae8:	|      move.l d0,-(sp)
   10aea:	|      jsr 14b32 <trimStack>
   10af0:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10af2:	|      movea.l 56(sp),a0
   10af6:	|      move.l 24(a0),d0
   10afa:	|      move.l d0,-(sp)
   10afc:	|      pea 7 <_start+0x7>
   10b00:	|      lea 24(sp),a0
   10b04:	|      move.l a0,-(sp)
   10b06:	|      jsr 141ae <getValueType>
   10b0c:	|      lea 12(sp),sp
   10b10:	|      tst.w d0
   10b12:	|  /-- bne.s 10b18 <builtIn_addScreenRegion+0x1b6>
   10b14:	|  |   moveq #1,d0
   10b16:	+--|-- bra.s 10b6c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10b18:	|  \-> moveq #24,d0
   10b1a:	|      add.l 56(sp),d0
   10b1e:	|      move.l d0,-(sp)
   10b20:	|      jsr 14b32 <trimStack>
   10b26:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10b28:	|      move.l 16(sp),d5
   10b2c:	|      move.l 20(sp),d4
   10b30:	|      move.l 40(sp),d3
   10b34:	|      move.l 44(sp),d2
   10b38:	|      movea.l 24(sp),a1
   10b3c:	|      movea.l 28(sp),a0
   10b40:	|      move.l 32(sp),d1
   10b44:	|      move.l 36(sp),d0
   10b48:	|      move.l d5,-(sp)
   10b4a:	|      move.l d4,-(sp)
   10b4c:	|      move.l d3,-(sp)
   10b4e:	|      move.l d2,-(sp)
   10b50:	|      move.l a1,-(sp)
   10b52:	|      move.l a0,-(sp)
   10b54:	|      move.l d1,-(sp)
   10b56:	|      move.l d0,-(sp)
   10b58:	|      jsr 15288 <addScreenRegion>
   10b5e:	|      lea 32(sp),sp
   10b62:	|      tst.w d0
   10b64:	|  /-- beq.s 10b6a <builtIn_addScreenRegion+0x208>
   10b66:	|  |   moveq #2,d0
   10b68:	+--|-- bra.s 10b6c <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10b6a:	|  \-> moveq #1,d0

}
   10b6c:	\----> movem.l (sp)+,d2-d5
   10b70:	       lea 32(sp),sp
   10b74:	       rts

00010b76 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   10b76:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b78:	       movea.l 12(sp),a0
   10b7c:	       move.l 24(a0),d0
   10b80:	       move.l d0,-(sp)
   10b82:	       pea 7 <_start+0x7>
   10b86:	       move.l sp,d0
   10b88:	       addq.l #8,d0
   10b8a:	       move.l d0,-(sp)
   10b8c:	       jsr 141ae <getValueType>
   10b92:	       lea 12(sp),sp
   10b96:	       tst.w d0
   10b98:	   /-- bne.s 10b9e <builtIn_removeScreenRegion+0x28>
   10b9a:	   |   moveq #1,d0
   10b9c:	/--|-- bra.s 10bbc <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10b9e:	|  \-> moveq #24,d0
   10ba0:	|      add.l 12(sp),d0
   10ba4:	|      move.l d0,-(sp)
   10ba6:	|      jsr 14b32 <trimStack>
   10bac:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   10bae:	|      move.l (sp),d0
   10bb0:	|      move.l d0,-(sp)
   10bb2:	|      jsr 15576 <removeScreenRegion>
   10bb8:	|      addq.l #4,sp
	return BR_CONTINUE;
   10bba:	|      moveq #2,d0
}
   10bbc:	\----> addq.l #4,sp
   10bbe:	       rts

00010bc0 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   10bc0:	jsr 156fa <showBoxes>
	return BR_CONTINUE;
   10bc6:	moveq #2,d0
}
   10bc8:	rts

00010bca <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   10bca:	jsr 153fc <killAllRegions>
	return BR_CONTINUE;
   10bd0:	moveq #2,d0
}
   10bd2:	rts

00010bd4 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   10bd4:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   10bd8:	       movea.l 24(sp),a0
   10bdc:	       move.l 24(a0),d0
   10be0:	       move.l d0,-(sp)
   10be2:	       jsr 13e5a <getCostumeFromVar>
   10be8:	       addq.l #4,sp
   10bea:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   10bee:	   /-- bne.s 10bf6 <builtIn_addCharacter+0x22>
   10bf0:	   |   moveq #1,d0
   10bf2:	/--|-- bra.w 10cd2 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   10bf6:	|  \-> moveq #24,d0
   10bf8:	|      add.l 24(sp),d0
   10bfc:	|      move.l d0,-(sp)
   10bfe:	|      jsr 14b32 <trimStack>
   10c04:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c06:	|      movea.l 24(sp),a0
   10c0a:	|      move.l 24(a0),d0
   10c0e:	|      move.l d0,-(sp)
   10c10:	|      pea 1 <_start+0x1>
   10c14:	|      lea 12(sp),a0
   10c18:	|      move.l a0,-(sp)
   10c1a:	|      jsr 141ae <getValueType>
   10c20:	|      lea 12(sp),sp
   10c24:	|      tst.w d0
   10c26:	|  /-- bne.s 10c2e <builtIn_addCharacter+0x5a>
   10c28:	|  |   moveq #1,d0
   10c2a:	+--|-- bra.w 10cd2 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10c2e:	|  \-> moveq #24,d0
   10c30:	|      add.l 24(sp),d0
   10c34:	|      move.l d0,-(sp)
   10c36:	|      jsr 14b32 <trimStack>
   10c3c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c3e:	|      movea.l 24(sp),a0
   10c42:	|      move.l 24(a0),d0
   10c46:	|      move.l d0,-(sp)
   10c48:	|      pea 1 <_start+0x1>
   10c4c:	|      moveq #16,d0
   10c4e:	|      add.l sp,d0
   10c50:	|      move.l d0,-(sp)
   10c52:	|      jsr 141ae <getValueType>
   10c58:	|      lea 12(sp),sp
   10c5c:	|      tst.w d0
   10c5e:	|  /-- bne.s 10c64 <builtIn_addCharacter+0x90>
   10c60:	|  |   moveq #1,d0
   10c62:	+--|-- bra.s 10cd2 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10c64:	|  \-> moveq #24,d0
   10c66:	|      add.l 24(sp),d0
   10c6a:	|      move.l d0,-(sp)
   10c6c:	|      jsr 14b32 <trimStack>
   10c72:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c74:	|      movea.l 24(sp),a0
   10c78:	|      move.l 24(a0),d0
   10c7c:	|      move.l d0,-(sp)
   10c7e:	|      pea 7 <_start+0x7>
   10c82:	|      lea 8(sp),a0
   10c86:	|      move.l a0,-(sp)
   10c88:	|      jsr 141ae <getValueType>
   10c8e:	|      lea 12(sp),sp
   10c92:	|      tst.w d0
   10c94:	|  /-- bne.s 10c9a <builtIn_addCharacter+0xc6>
   10c96:	|  |   moveq #1,d0
   10c98:	+--|-- bra.s 10cd2 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10c9a:	|  \-> moveq #24,d0
   10c9c:	|      add.l 24(sp),d0
   10ca0:	|      move.l d0,-(sp)
   10ca2:	|      jsr 14b32 <trimStack>
   10ca8:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   10caa:	|      movea.l (sp),a0
   10cac:	|      move.l 4(sp),d1
   10cb0:	|      move.l 8(sp),d0
   10cb4:	|      move.l 12(sp),-(sp)
   10cb8:	|      move.l a0,-(sp)
   10cba:	|      move.l d1,-(sp)
   10cbc:	|      move.l d0,-(sp)
   10cbe:	|      jsr 8ca0 <addPerson>
   10cc4:	|      lea 16(sp),sp
   10cc8:	|      tst.w d0
   10cca:	|  /-- beq.s 10cd0 <builtIn_addCharacter+0xfc>
   10ccc:	|  |   moveq #2,d0
   10cce:	+--|-- bra.s 10cd2 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   10cd0:	|  \-> moveq #1,d0
}
   10cd2:	\----> lea 16(sp),sp
   10cd6:	       rts

00010cd8 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   10cd8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10cda:	       movea.l 12(sp),a0
   10cde:	       move.l 24(a0),d0
   10ce2:	       move.l d0,-(sp)
   10ce4:	       pea 7 <_start+0x7>
   10ce8:	       move.l sp,d0
   10cea:	       addq.l #8,d0
   10cec:	       move.l d0,-(sp)
   10cee:	       jsr 141ae <getValueType>
   10cf4:	       lea 12(sp),sp
   10cf8:	       tst.w d0
   10cfa:	   /-- bne.s 10d00 <builtIn_hideCharacter+0x28>
   10cfc:	   |   moveq #1,d0
   10cfe:	/--|-- bra.s 10d20 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   10d00:	|  \-> moveq #24,d0
   10d02:	|      add.l 12(sp),d0
   10d06:	|      move.l d0,-(sp)
   10d08:	|      jsr 14b32 <trimStack>
   10d0e:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   10d10:	|      move.l (sp),d0
   10d12:	|      move.l d0,-(sp)
   10d14:	|      clr.l -(sp)
   10d16:	|      jsr b6da <setShown>
   10d1c:	|      addq.l #8,sp
	return BR_CONTINUE;
   10d1e:	|      moveq #2,d0
}
   10d20:	\----> addq.l #4,sp
   10d22:	       rts

00010d24 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   10d24:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d26:	       movea.l 12(sp),a0
   10d2a:	       move.l 24(a0),d0
   10d2e:	       move.l d0,-(sp)
   10d30:	       pea 7 <_start+0x7>
   10d34:	       move.l sp,d0
   10d36:	       addq.l #8,d0
   10d38:	       move.l d0,-(sp)
   10d3a:	       jsr 141ae <getValueType>
   10d40:	       lea 12(sp),sp
   10d44:	       tst.w d0
   10d46:	   /-- bne.s 10d4c <builtIn_showCharacter+0x28>
   10d48:	   |   moveq #1,d0
   10d4a:	/--|-- bra.s 10d6e <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   10d4c:	|  \-> moveq #24,d0
   10d4e:	|      add.l 12(sp),d0
   10d52:	|      move.l d0,-(sp)
   10d54:	|      jsr 14b32 <trimStack>
   10d5a:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   10d5c:	|      move.l (sp),d0
   10d5e:	|      move.l d0,-(sp)
   10d60:	|      pea 1 <_start+0x1>
   10d64:	|      jsr b6da <setShown>
   10d6a:	|      addq.l #8,sp
	return BR_CONTINUE;
   10d6c:	|      moveq #2,d0
}
   10d6e:	\----> addq.l #4,sp
   10d70:	       rts

00010d72 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   10d72:	jsr 5a8e <killSpeechTimers>
	killMostPeople ();
   10d78:	jsr a512 <killMostPeople>
	return BR_CONTINUE;
   10d7e:	moveq #2,d0
}
   10d80:	rts

00010d82 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   10d82:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d84:	       movea.l 16(sp),a0
   10d88:	       move.l 24(a0),d0
   10d8c:	       move.l d0,-(sp)
   10d8e:	       pea 1 <_start+0x1>
   10d92:	       move.l sp,d0
   10d94:	       addq.l #8,d0
   10d96:	       move.l d0,-(sp)
   10d98:	       jsr 141ae <getValueType>
   10d9e:	       lea 12(sp),sp
   10da2:	       tst.w d0
   10da4:	   /-- bne.s 10daa <builtIn_setCharacterDrawMode+0x28>
   10da6:	   |   moveq #1,d0
   10da8:	/--|-- bra.s 10e04 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10daa:	|  \-> moveq #24,d0
   10dac:	|      add.l 16(sp),d0
   10db0:	|      move.l d0,-(sp)
   10db2:	|      jsr 14b32 <trimStack>
   10db8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10dba:	|      movea.l 16(sp),a0
   10dbe:	|      move.l 24(a0),d0
   10dc2:	|      move.l d0,-(sp)
   10dc4:	|      pea 7 <_start+0x7>
   10dc8:	|      moveq #12,d0
   10dca:	|      add.l sp,d0
   10dcc:	|      move.l d0,-(sp)
   10dce:	|      jsr 141ae <getValueType>
   10dd4:	|      lea 12(sp),sp
   10dd8:	|      tst.w d0
   10dda:	|  /-- bne.s 10de0 <builtIn_setCharacterDrawMode+0x5e>
   10ddc:	|  |   moveq #1,d0
   10dde:	+--|-- bra.s 10e04 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10de0:	|  \-> moveq #24,d0
   10de2:	|      add.l 16(sp),d0
   10de6:	|      move.l d0,-(sp)
   10de8:	|      jsr 14b32 <trimStack>
   10dee:	|      addq.l #4,sp
	setDrawMode (di, obj);
   10df0:	|      move.l 4(sp),d1
   10df4:	|      move.l (sp),d0
   10df6:	|      move.l d1,-(sp)
   10df8:	|      move.l d0,-(sp)
   10dfa:	|      jsr b018 <setDrawMode>
   10e00:	|      addq.l #8,sp
	return BR_CONTINUE;
   10e02:	|      moveq #2,d0
}
   10e04:	\----> addq.l #8,sp
   10e06:	       rts

00010e08 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   10e08:	pea 194b0 <graphics.c.1c13408a+0x2d1>
   10e0e:	jsr 16bac <KPrintF>
   10e14:	addq.l #4,sp
	return BR_CONTINUE;
   10e16:	moveq #2,d0
}
   10e18:	rts

00010e1a <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   10e1a:	pea 194e3 <graphics.c.1c13408a+0x304>
   10e20:	jsr 16bac <KPrintF>
   10e26:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   10e28:	moveq #2,d0
}
   10e2a:	rts

00010e2c <builtIn_setScale>:

builtIn(setScale)
{
   10e2c:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e2e:	       movea.l 16(sp),a0
   10e32:	       move.l 24(a0),d0
   10e36:	       move.l d0,-(sp)
   10e38:	       pea 1 <_start+0x1>
   10e3c:	       move.l sp,d0
   10e3e:	       addq.l #8,d0
   10e40:	       move.l d0,-(sp)
   10e42:	       jsr 141ae <getValueType>
   10e48:	       lea 12(sp),sp
   10e4c:	       tst.w d0
   10e4e:	   /-- bne.s 10e54 <builtIn_setScale+0x28>
   10e50:	   |   moveq #1,d0
   10e52:	/--|-- bra.s 10eb6 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   10e54:	|  \-> moveq #24,d0
   10e56:	|      add.l 16(sp),d0
   10e5a:	|      move.l d0,-(sp)
   10e5c:	|      jsr 14b32 <trimStack>
   10e62:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e64:	|      movea.l 16(sp),a0
   10e68:	|      move.l 24(a0),d0
   10e6c:	|      move.l d0,-(sp)
   10e6e:	|      pea 1 <_start+0x1>
   10e72:	|      moveq #12,d0
   10e74:	|      add.l sp,d0
   10e76:	|      move.l d0,-(sp)
   10e78:	|      jsr 141ae <getValueType>
   10e7e:	|      lea 12(sp),sp
   10e82:	|      tst.w d0
   10e84:	|  /-- bne.s 10e8a <builtIn_setScale+0x5e>
   10e86:	|  |   moveq #1,d0
   10e88:	+--|-- bra.s 10eb6 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   10e8a:	|  \-> moveq #24,d0
   10e8c:	|      add.l 16(sp),d0
   10e90:	|      move.l d0,-(sp)
   10e92:	|      jsr 14b32 <trimStack>
   10e98:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   10e9a:	|      move.l (sp),d0
   10e9c:	|      move.l d0,d0
   10e9e:	|      movea.w d0,a1
   10ea0:	|      move.l 4(sp),d0
   10ea4:	|      move.l d0,d0
   10ea6:	|      movea.w d0,a0
   10ea8:	|      move.l a1,-(sp)
   10eaa:	|      move.l a0,-(sp)
   10eac:	|      jsr b6b2 <setScale>
   10eb2:	|      addq.l #8,sp
	return BR_CONTINUE;
   10eb4:	|      moveq #2,d0
}
   10eb6:	\----> addq.l #8,sp
   10eb8:	       rts

00010eba <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   10eba:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ebc:	       movea.l 12(sp),a0
   10ec0:	       move.l 24(a0),d0
   10ec4:	       move.l d0,-(sp)
   10ec6:	       pea 7 <_start+0x7>
   10eca:	       move.l sp,d0
   10ecc:	       addq.l #8,d0
   10ece:	       move.l d0,-(sp)
   10ed0:	       jsr 141ae <getValueType>
   10ed6:	       lea 12(sp),sp
   10eda:	       tst.w d0
   10edc:	   /-- bne.s 10ee2 <builtIn_stopCharacter+0x28>
   10ede:	   |   moveq #1,d0
   10ee0:	/--|-- bra.s 10f1a <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   10ee2:	|  \-> moveq #24,d0
   10ee4:	|      add.l 12(sp),d0
   10ee8:	|      move.l d0,-(sp)
   10eea:	|      jsr 14b32 <trimStack>
   10ef0:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   10ef2:	|      move.l (sp),d0
   10ef4:	|      move.l d0,-(sp)
   10ef6:	|      jsr b7e6 <stopPerson>
   10efc:	|      addq.l #4,sp
   10efe:	|      movea.w d0,a0
   10f00:	|      moveq #28,d0
   10f02:	|      add.l 12(sp),d0
   10f06:	|      move.l a0,-(sp)
   10f08:	|      pea 1 <_start+0x1>
   10f0c:	|      move.l d0,-(sp)
   10f0e:	|      jsr 14aa0 <setVariable>
   10f14:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10f18:	|      moveq #2,d0
}
   10f1a:	\----> addq.l #4,sp
   10f1c:	       rts

00010f1e <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   10f1e:	pea 1951d <graphics.c.1c13408a+0x33e>
   10f24:	jsr 16bac <KPrintF>
   10f2a:	addq.l #4,sp
	return BR_CONTINUE;
   10f2c:	moveq #2,d0
}
   10f2e:	rts

00010f30 <builtIn_animate>:

builtIn(animate)
{
   10f30:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   10f32:	       movea.l 16(sp),a0
   10f36:	       move.l 24(a0),d0
   10f3a:	       move.l d0,-(sp)
   10f3c:	       jsr 14686 <getAnimationFromVar>
   10f42:	       addq.l #4,sp
   10f44:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   10f48:	   /-- bne.s 10f4e <builtIn_animate+0x1e>
   10f4a:	   |   moveq #1,d0
   10f4c:	/--|-- bra.s 10fcc <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   10f4e:	|  \-> moveq #24,d0
   10f50:	|      add.l 16(sp),d0
   10f54:	|      move.l d0,-(sp)
   10f56:	|      jsr 14b32 <trimStack>
   10f5c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f5e:	|      movea.l 16(sp),a0
   10f62:	|      move.l 24(a0),d0
   10f66:	|      move.l d0,-(sp)
   10f68:	|      pea 7 <_start+0x7>
   10f6c:	|      move.l sp,d0
   10f6e:	|      addq.l #8,d0
   10f70:	|      move.l d0,-(sp)
   10f72:	|      jsr 141ae <getValueType>
   10f78:	|      lea 12(sp),sp
   10f7c:	|      tst.w d0
   10f7e:	|  /-- bne.s 10f84 <builtIn_animate+0x54>
   10f80:	|  |   moveq #1,d0
   10f82:	+--|-- bra.s 10fcc <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   10f84:	|  \-> moveq #24,d0
   10f86:	|      add.l 16(sp),d0
   10f8a:	|      move.l d0,-(sp)
   10f8c:	|      jsr 14b32 <trimStack>
   10f92:	|      addq.l #4,sp
	animatePerson (obj, pp);
   10f94:	|      move.l (sp),d0
   10f96:	|      move.l 4(sp),-(sp)
   10f9a:	|      move.l d0,-(sp)
   10f9c:	|      jsr 8f16 <animatePerson>
   10fa2:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   10fa4:	|      move.l 4(sp),-(sp)
   10fa8:	|      jsr b83a <timeForAnim>
   10fae:	|      addq.l #4,sp
   10fb0:	|      move.l d0,d1
   10fb2:	|      moveq #28,d0
   10fb4:	|      add.l 16(sp),d0
   10fb8:	|      move.l d1,-(sp)
   10fba:	|      pea 1 <_start+0x1>
   10fbe:	|      move.l d0,-(sp)
   10fc0:	|      jsr 14aa0 <setVariable>
   10fc6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10fca:	|      moveq #2,d0
}
   10fcc:	\----> addq.l #8,sp
   10fce:	       rts

00010fd0 <builtIn_setCostume>:

builtIn(setCostume)
{
   10fd0:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   10fd2:	       movea.l 16(sp),a0
   10fd6:	       move.l 24(a0),d0
   10fda:	       move.l d0,-(sp)
   10fdc:	       jsr 13e5a <getCostumeFromVar>
   10fe2:	       addq.l #4,sp
   10fe4:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   10fe8:	   /-- bne.s 10fee <builtIn_setCostume+0x1e>
   10fea:	   |   moveq #1,d0
   10fec:	/--|-- bra.s 11046 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   10fee:	|  \-> moveq #24,d0
   10ff0:	|      add.l 16(sp),d0
   10ff4:	|      move.l d0,-(sp)
   10ff6:	|      jsr 14b32 <trimStack>
   10ffc:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ffe:	|      movea.l 16(sp),a0
   11002:	|      move.l 24(a0),d0
   11006:	|      move.l d0,-(sp)
   11008:	|      pea 7 <_start+0x7>
   1100c:	|      move.l sp,d0
   1100e:	|      addq.l #8,d0
   11010:	|      move.l d0,-(sp)
   11012:	|      jsr 141ae <getValueType>
   11018:	|      lea 12(sp),sp
   1101c:	|      tst.w d0
   1101e:	|  /-- bne.s 11024 <builtIn_setCostume+0x54>
   11020:	|  |   moveq #1,d0
   11022:	+--|-- bra.s 11046 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11024:	|  \-> moveq #24,d0
   11026:	|      add.l 16(sp),d0
   1102a:	|      move.l d0,-(sp)
   1102c:	|      jsr 14b32 <trimStack>
   11032:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11034:	|      move.l (sp),d0
   11036:	|      move.l 4(sp),-(sp)
   1103a:	|      move.l d0,-(sp)
   1103c:	|      jsr 8f60 <animatePersonUsingPersona>
   11042:	|      addq.l #8,sp
	return BR_CONTINUE;
   11044:	|      moveq #2,d0
}
   11046:	\----> addq.l #8,sp
   11048:	       rts

0001104a <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   1104a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1104c:	       movea.l 16(sp),a0
   11050:	       move.l 24(a0),d0
   11054:	       move.l d0,-(sp)
   11056:	       pea 1 <_start+0x1>
   1105a:	       move.l sp,d0
   1105c:	       addq.l #8,d0
   1105e:	       move.l d0,-(sp)
   11060:	       jsr 141ae <getValueType>
   11066:	       lea 12(sp),sp
   1106a:	       tst.w d0
   1106c:	   /-- bne.s 11072 <builtIn_floatCharacter+0x28>
   1106e:	   |   moveq #1,d0
   11070:	/--|-- bra.s 110e6 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11072:	|  \-> moveq #24,d0
   11074:	|      add.l 16(sp),d0
   11078:	|      move.l d0,-(sp)
   1107a:	|      jsr 14b32 <trimStack>
   11080:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11082:	|      movea.l 16(sp),a0
   11086:	|      move.l 24(a0),d0
   1108a:	|      move.l d0,-(sp)
   1108c:	|      pea 7 <_start+0x7>
   11090:	|      moveq #12,d0
   11092:	|      add.l sp,d0
   11094:	|      move.l d0,-(sp)
   11096:	|      jsr 141ae <getValueType>
   1109c:	|      lea 12(sp),sp
   110a0:	|      tst.w d0
   110a2:	|  /-- bne.s 110a8 <builtIn_floatCharacter+0x5e>
   110a4:	|  |   moveq #1,d0
   110a6:	+--|-- bra.s 110e6 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   110a8:	|  \-> moveq #24,d0
   110aa:	|      add.l 16(sp),d0
   110ae:	|      move.l d0,-(sp)
   110b0:	|      jsr 14b32 <trimStack>
   110b6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   110b8:	|      move.l 4(sp),d1
   110bc:	|      move.l (sp),d0
   110be:	|      move.l d1,-(sp)
   110c0:	|      move.l d0,-(sp)
   110c2:	|      jsr a0d4 <floatCharacter>
   110c8:	|      addq.l #8,sp
   110ca:	|      movea.w d0,a0
   110cc:	|      moveq #28,d0
   110ce:	|      add.l 16(sp),d0
   110d2:	|      move.l a0,-(sp)
   110d4:	|      pea 1 <_start+0x1>
   110d8:	|      move.l d0,-(sp)
   110da:	|      jsr 14aa0 <setVariable>
   110e0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   110e4:	|      moveq #2,d0
}
   110e6:	\----> addq.l #8,sp
   110e8:	       rts

000110ea <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   110ea:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110ec:	       movea.l 16(sp),a0
   110f0:	       move.l 24(a0),d0
   110f4:	       move.l d0,-(sp)
   110f6:	       pea 1 <_start+0x1>
   110fa:	       move.l sp,d0
   110fc:	       addq.l #8,d0
   110fe:	       move.l d0,-(sp)
   11100:	       jsr 141ae <getValueType>
   11106:	       lea 12(sp),sp
   1110a:	       tst.w d0
   1110c:	   /-- bne.s 11112 <builtIn_setCharacterWalkSpeed+0x28>
   1110e:	   |   moveq #1,d0
   11110:	/--|-- bra.s 11186 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11112:	|  \-> moveq #24,d0
   11114:	|      add.l 16(sp),d0
   11118:	|      move.l d0,-(sp)
   1111a:	|      jsr 14b32 <trimStack>
   11120:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11122:	|      movea.l 16(sp),a0
   11126:	|      move.l 24(a0),d0
   1112a:	|      move.l d0,-(sp)
   1112c:	|      pea 7 <_start+0x7>
   11130:	|      moveq #12,d0
   11132:	|      add.l sp,d0
   11134:	|      move.l d0,-(sp)
   11136:	|      jsr 141ae <getValueType>
   1113c:	|      lea 12(sp),sp
   11140:	|      tst.w d0
   11142:	|  /-- bne.s 11148 <builtIn_setCharacterWalkSpeed+0x5e>
   11144:	|  |   moveq #1,d0
   11146:	+--|-- bra.s 11186 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11148:	|  \-> moveq #24,d0
   1114a:	|      add.l 16(sp),d0
   1114e:	|      move.l d0,-(sp)
   11150:	|      jsr 14b32 <trimStack>
   11156:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11158:	|      move.l 4(sp),d1
   1115c:	|      move.l (sp),d0
   1115e:	|      move.l d1,-(sp)
   11160:	|      move.l d0,-(sp)
   11162:	|      jsr b64e <setCharacterWalkSpeed>
   11168:	|      addq.l #8,sp
   1116a:	|      movea.w d0,a0
   1116c:	|      moveq #28,d0
   1116e:	|      add.l 16(sp),d0
   11172:	|      move.l a0,-(sp)
   11174:	|      pea 1 <_start+0x1>
   11178:	|      move.l d0,-(sp)
   1117a:	|      jsr 14aa0 <setVariable>
   11180:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11184:	|      moveq #2,d0
}
   11186:	\----> addq.l #8,sp
   11188:	       rts

0001118a <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   1118a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1118c:	       movea.l 16(sp),a0
   11190:	       move.l 24(a0),d0
   11194:	       move.l d0,-(sp)
   11196:	       pea 1 <_start+0x1>
   1119a:	       move.l sp,d0
   1119c:	       addq.l #8,d0
   1119e:	       move.l d0,-(sp)
   111a0:	       jsr 141ae <getValueType>
   111a6:	       lea 12(sp),sp
   111aa:	       tst.w d0
   111ac:	   /-- bne.s 111b2 <builtIn_turnCharacter+0x28>
   111ae:	   |   moveq #1,d0
   111b0:	/--|-- bra.s 11226 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   111b2:	|  \-> moveq #24,d0
   111b4:	|      add.l 16(sp),d0
   111b8:	|      move.l d0,-(sp)
   111ba:	|      jsr 14b32 <trimStack>
   111c0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111c2:	|      movea.l 16(sp),a0
   111c6:	|      move.l 24(a0),d0
   111ca:	|      move.l d0,-(sp)
   111cc:	|      pea 7 <_start+0x7>
   111d0:	|      moveq #12,d0
   111d2:	|      add.l sp,d0
   111d4:	|      move.l d0,-(sp)
   111d6:	|      jsr 141ae <getValueType>
   111dc:	|      lea 12(sp),sp
   111e0:	|      tst.w d0
   111e2:	|  /-- bne.s 111e8 <builtIn_turnCharacter+0x5e>
   111e4:	|  |   moveq #1,d0
   111e6:	+--|-- bra.s 11226 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   111e8:	|  \-> moveq #24,d0
   111ea:	|      add.l 16(sp),d0
   111ee:	|      move.l d0,-(sp)
   111f0:	|      jsr 14b32 <trimStack>
   111f6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   111f8:	|      move.l (sp),d1
   111fa:	|      move.l 4(sp),d0
   111fe:	|      move.l d1,-(sp)
   11200:	|      move.l d0,-(sp)
   11202:	|      jsr b8f2 <turnPersonToFace>
   11208:	|      addq.l #8,sp
   1120a:	|      movea.w d0,a0
   1120c:	|      moveq #28,d0
   1120e:	|      add.l 16(sp),d0
   11212:	|      move.l a0,-(sp)
   11214:	|      pea 1 <_start+0x1>
   11218:	|      move.l d0,-(sp)
   1121a:	|      jsr 14aa0 <setVariable>
   11220:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11224:	|      moveq #2,d0
}
   11226:	\----> addq.l #8,sp
   11228:	       rts

0001122a <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   1122a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1122c:	       movea.l 16(sp),a0
   11230:	       move.l 24(a0),d0
   11234:	       move.l d0,-(sp)
   11236:	       pea 1 <_start+0x1>
   1123a:	       move.l sp,d0
   1123c:	       addq.l #8,d0
   1123e:	       move.l d0,-(sp)
   11240:	       jsr 141ae <getValueType>
   11246:	       lea 12(sp),sp
   1124a:	       tst.w d0
   1124c:	   /-- bne.s 11252 <builtIn_setCharacterExtra+0x28>
   1124e:	   |   moveq #1,d0
   11250:	/--|-- bra.s 112c6 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11252:	|  \-> moveq #24,d0
   11254:	|      add.l 16(sp),d0
   11258:	|      move.l d0,-(sp)
   1125a:	|      jsr 14b32 <trimStack>
   11260:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11262:	|      movea.l 16(sp),a0
   11266:	|      move.l 24(a0),d0
   1126a:	|      move.l d0,-(sp)
   1126c:	|      pea 7 <_start+0x7>
   11270:	|      moveq #12,d0
   11272:	|      add.l sp,d0
   11274:	|      move.l d0,-(sp)
   11276:	|      jsr 141ae <getValueType>
   1127c:	|      lea 12(sp),sp
   11280:	|      tst.w d0
   11282:	|  /-- bne.s 11288 <builtIn_setCharacterExtra+0x5e>
   11284:	|  |   moveq #1,d0
   11286:	+--|-- bra.s 112c6 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11288:	|  \-> moveq #24,d0
   1128a:	|      add.l 16(sp),d0
   1128e:	|      move.l d0,-(sp)
   11290:	|      jsr 14b32 <trimStack>
   11296:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11298:	|      move.l (sp),d1
   1129a:	|      move.l 4(sp),d0
   1129e:	|      move.l d1,-(sp)
   112a0:	|      move.l d0,-(sp)
   112a2:	|      jsr b67c <setPersonExtra>
   112a8:	|      addq.l #8,sp
   112aa:	|      movea.w d0,a0
   112ac:	|      moveq #28,d0
   112ae:	|      add.l 16(sp),d0
   112b2:	|      move.l a0,-(sp)
   112b4:	|      pea 1 <_start+0x1>
   112b8:	|      move.l d0,-(sp)
   112ba:	|      jsr 14aa0 <setVariable>
   112c0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   112c4:	|      moveq #2,d0
}
   112c6:	\----> addq.l #8,sp
   112c8:	       rts

000112ca <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   112ca:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112cc:	       movea.l 12(sp),a0
   112d0:	       move.l 24(a0),d0
   112d4:	       move.l d0,-(sp)
   112d6:	       pea 7 <_start+0x7>
   112da:	       move.l sp,d0
   112dc:	       addq.l #8,d0
   112de:	       move.l d0,-(sp)
   112e0:	       jsr 141ae <getValueType>
   112e6:	       lea 12(sp),sp
   112ea:	       tst.w d0
   112ec:	   /-- bne.s 112f2 <builtIn_removeCharacter+0x28>
   112ee:	   |   moveq #1,d0
   112f0:	/--|-- bra.s 11310 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   112f2:	|  \-> moveq #24,d0
   112f4:	|      add.l 12(sp),d0
   112f8:	|      move.l d0,-(sp)
   112fa:	|      jsr 14b32 <trimStack>
   11300:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11302:	|      move.l (sp),d0
   11304:	|      move.l d0,-(sp)
   11306:	|      jsr a87c <removeOneCharacter>
   1130c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1130e:	|      moveq #2,d0
}
   11310:	\----> addq.l #4,sp
   11312:	       rts

00011314 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11314:	                lea -28(sp),sp
   11318:	                move.l d2,-(sp)
   1131a:	                move.l 44(sp),d1
   1131e:	                move.l 48(sp),d0
   11322:	                move.w d1,d1
   11324:	                move.w d1,6(sp)
   11328:	                move.w d0,d0
   1132a:	                move.w d0,4(sp)
	switch (numParams) {
   1132e:	                moveq #2,d0
   11330:	                cmp.l 36(sp),d0
   11334:	      /-------- beq.w 11476 <moveChr+0x162>
   11338:	      |         moveq #3,d0
   1133a:	      |         cmp.l 36(sp),d0
   1133e:	/-----|-------- bne.w 115aa <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11342:	|     |         movea.l 40(sp),a0
   11346:	|     |         move.l 24(a0),d0
   1134a:	|     |         move.l d0,-(sp)
   1134c:	|     |         pea 1 <_start+0x1>
   11350:	|     |         lea 20(sp),a0
   11354:	|     |         move.l a0,-(sp)
   11356:	|     |         jsr 141ae <getValueType>
   1135c:	|     |         lea 12(sp),sp
   11360:	|     |         tst.w d0
   11362:	|     |     /-- bne.s 1136a <moveChr+0x56>
   11364:	|     |     |   moveq #1,d0
   11366:	|  /--|-----|-- bra.w 115ba <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1136a:	|  |  |     \-> moveq #24,d0
   1136c:	|  |  |         add.l 40(sp),d0
   11370:	|  |  |         move.l d0,-(sp)
   11372:	|  |  |         jsr 14b32 <trimStack>
   11378:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1137a:	|  |  |         movea.l 40(sp),a0
   1137e:	|  |  |         move.l 24(a0),d0
   11382:	|  |  |         move.l d0,-(sp)
   11384:	|  |  |         pea 1 <_start+0x1>
   11388:	|  |  |         lea 24(sp),a0
   1138c:	|  |  |         move.l a0,-(sp)
   1138e:	|  |  |         jsr 141ae <getValueType>
   11394:	|  |  |         lea 12(sp),sp
   11398:	|  |  |         tst.w d0
   1139a:	|  |  |     /-- bne.s 113a2 <moveChr+0x8e>
   1139c:	|  |  |     |   moveq #1,d0
   1139e:	|  +--|-----|-- bra.w 115ba <moveChr+0x2a6>
			trimStack (&fun -> stack);
   113a2:	|  |  |     \-> moveq #24,d0
   113a4:	|  |  |         add.l 40(sp),d0
   113a8:	|  |  |         move.l d0,-(sp)
   113aa:	|  |  |         jsr 14b32 <trimStack>
   113b0:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113b2:	|  |  |         movea.l 40(sp),a0
   113b6:	|  |  |         move.l 24(a0),d0
   113ba:	|  |  |         move.l d0,-(sp)
   113bc:	|  |  |         pea 7 <_start+0x7>
   113c0:	|  |  |         lea 16(sp),a0
   113c4:	|  |  |         move.l a0,-(sp)
   113c6:	|  |  |         jsr 141ae <getValueType>
   113cc:	|  |  |         lea 12(sp),sp
   113d0:	|  |  |         tst.w d0
   113d2:	|  |  |     /-- bne.s 113da <moveChr+0xc6>
   113d4:	|  |  |     |   moveq #1,d0
   113d6:	|  +--|-----|-- bra.w 115ba <moveChr+0x2a6>
			trimStack (&fun -> stack);
   113da:	|  |  |     \-> moveq #24,d0
   113dc:	|  |  |         add.l 40(sp),d0
   113e0:	|  |  |         move.l d0,-(sp)
   113e2:	|  |  |         jsr 14b32 <trimStack>
   113e8:	|  |  |         addq.l #4,sp

			if (force) {
   113ea:	|  |  |         tst.w 6(sp)
   113ee:	|  |  |     /-- beq.s 1141e <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   113f0:	|  |  |     |   movea.l 8(sp),a0
   113f4:	|  |  |     |   move.l 12(sp),d1
   113f8:	|  |  |     |   move.l 16(sp),d0
   113fc:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb5845>
   11400:	|  |  |     |   move.l 44(sp),-(sp)
   11404:	|  |  |     |   move.l a0,-(sp)
   11406:	|  |  |     |   move.l d1,-(sp)
   11408:	|  |  |     |   move.l d0,-(sp)
   1140a:	|  |  |     |   jsr a0f8 <forceWalkingPerson>
   11410:	|  |  |     |   lea 20(sp),sp
   11414:	|  |  |     |   tst.w d0
   11416:	|  |  |  /--|-- beq.s 11470 <moveChr+0x15c>
   11418:	|  |  |  |  |   moveq #3,d0
   1141a:	|  +--|--|--|-- bra.w 115ba <moveChr+0x2a6>
			} else if (immediate) {
   1141e:	|  |  |  |  \-> tst.w 4(sp)
   11422:	|  |  |  |  /-- beq.s 11442 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11424:	|  |  |  |  |   movea.l 8(sp),a0
   11428:	|  |  |  |  |   move.l 12(sp),d1
   1142c:	|  |  |  |  |   move.l 16(sp),d0
   11430:	|  |  |  |  |   move.l a0,-(sp)
   11432:	|  |  |  |  |   move.l d1,-(sp)
   11434:	|  |  |  |  |   move.l d0,-(sp)
   11436:	|  |  |  |  |   jsr a400 <jumpPerson>
   1143c:	|  |  |  |  |   lea 12(sp),sp
   11440:	|  |  |  +--|-- bra.s 11470 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11442:	|  |  |  |  \-> movea.l 8(sp),a0
   11446:	|  |  |  |      move.l 12(sp),d1
   1144a:	|  |  |  |      move.l 16(sp),d0
   1144e:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb5845>
   11452:	|  |  |  |      move.l 44(sp),-(sp)
   11456:	|  |  |  |      move.l a0,-(sp)
   11458:	|  |  |  |      move.l d1,-(sp)
   1145a:	|  |  |  |      move.l d0,-(sp)
   1145c:	|  |  |  |      jsr a5d0 <makeWalkingPerson>
   11462:	|  |  |  |      lea 20(sp),sp
   11466:	|  |  |  |      tst.w d0
   11468:	|  |  |  +----- beq.s 11470 <moveChr+0x15c>
   1146a:	|  |  |  |      moveq #3,d0
   1146c:	|  +--|--|----- bra.w 115ba <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11470:	|  |  |  \----> moveq #2,d0
   11472:	|  +--|-------- bra.w 115ba <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11476:	|  |  \-------> movea.l 40(sp),a0
   1147a:	|  |            move.l 24(a0),d0
   1147e:	|  |            move.l d0,-(sp)
   11480:	|  |            pea 7 <_start+0x7>
   11484:	|  |            moveq #32,d0
   11486:	|  |            add.l sp,d0
   11488:	|  |            move.l d0,-(sp)
   1148a:	|  |            jsr 141ae <getValueType>
   11490:	|  |            lea 12(sp),sp
   11494:	|  |            tst.w d0
   11496:	|  |        /-- bne.s 1149e <moveChr+0x18a>
   11498:	|  |        |   moveq #1,d0
   1149a:	|  +--------|-- bra.w 115ba <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1149e:	|  |        \-> moveq #24,d0
   114a0:	|  |            add.l 40(sp),d0
   114a4:	|  |            move.l d0,-(sp)
   114a6:	|  |            jsr 14b32 <trimStack>
   114ac:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114ae:	|  |            movea.l 40(sp),a0
   114b2:	|  |            move.l 24(a0),d0
   114b6:	|  |            move.l d0,-(sp)
   114b8:	|  |            pea 7 <_start+0x7>
   114bc:	|  |            lea 28(sp),a0
   114c0:	|  |            move.l a0,-(sp)
   114c2:	|  |            jsr 141ae <getValueType>
   114c8:	|  |            lea 12(sp),sp
   114cc:	|  |            tst.w d0
   114ce:	|  |        /-- bne.s 114d6 <moveChr+0x1c2>
   114d0:	|  |        |   moveq #1,d0
   114d2:	|  +--------|-- bra.w 115ba <moveChr+0x2a6>
			trimStack (&fun -> stack);
   114d6:	|  |        \-> moveq #24,d0
   114d8:	|  |            add.l 40(sp),d0
   114dc:	|  |            move.l d0,-(sp)
   114de:	|  |            jsr 14b32 <trimStack>
   114e4:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   114e6:	|  |            move.l 24(sp),d0
   114ea:	|  |            move.l d0,-(sp)
   114ec:	|  |            jsr 153ce <getRegionForObject>
   114f2:	|  |            addq.l #4,sp
   114f4:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   114f8:	|  |        /-- bne.s 11500 <moveChr+0x1ec>
   114fa:	|  |        |   moveq #2,d0
   114fc:	|  +--------|-- bra.w 115ba <moveChr+0x2a6>

			if (force)
   11500:	|  |        \-> tst.w 6(sp)
   11504:	|  |        /-- beq.s 11540 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11506:	|  |        |   movea.l 28(sp),a0
   1150a:	|  |        |   move.l 24(a0),d2
   1150e:	|  |        |   movea.l 20(sp),a1
   11512:	|  |        |   movea.l 28(sp),a0
   11516:	|  |        |   move.l 20(a0),d1
   1151a:	|  |        |   movea.l 28(sp),a0
   1151e:	|  |        |   move.l 16(a0),d0
   11522:	|  |        |   move.l d2,-(sp)
   11524:	|  |        |   move.l 44(sp),-(sp)
   11528:	|  |        |   move.l a1,-(sp)
   1152a:	|  |        |   move.l d1,-(sp)
   1152c:	|  |        |   move.l d0,-(sp)
   1152e:	|  |        |   jsr a0f8 <forceWalkingPerson>
   11534:	|  |        |   lea 20(sp),sp
   11538:	|  |        |   tst.w d0
   1153a:	|  |     /--|-- beq.s 115a6 <moveChr+0x292>
   1153c:	|  |     |  |   moveq #3,d0
   1153e:	|  +-----|--|-- bra.s 115ba <moveChr+0x2a6>
			}
			else if (immediate)
   11540:	|  |     |  \-> tst.w 4(sp)
   11544:	|  |     |  /-- beq.s 1156c <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11546:	|  |     |  |   movea.l 20(sp),a1
   1154a:	|  |     |  |   movea.l 28(sp),a0
   1154e:	|  |     |  |   move.l 20(a0),d1
   11552:	|  |     |  |   movea.l 28(sp),a0
   11556:	|  |     |  |   move.l 16(a0),d0
   1155a:	|  |     |  |   move.l a1,-(sp)
   1155c:	|  |     |  |   move.l d1,-(sp)
   1155e:	|  |     |  |   move.l d0,-(sp)
   11560:	|  |     |  |   jsr a400 <jumpPerson>
   11566:	|  |     |  |   lea 12(sp),sp
   1156a:	|  |     +--|-- bra.s 115a6 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   1156c:	|  |     |  \-> movea.l 28(sp),a0
   11570:	|  |     |      move.l 24(a0),d2
   11574:	|  |     |      movea.l 20(sp),a1
   11578:	|  |     |      movea.l 28(sp),a0
   1157c:	|  |     |      move.l 20(a0),d1
   11580:	|  |     |      movea.l 28(sp),a0
   11584:	|  |     |      move.l 16(a0),d0
   11588:	|  |     |      move.l d2,-(sp)
   1158a:	|  |     |      move.l 44(sp),-(sp)
   1158e:	|  |     |      move.l a1,-(sp)
   11590:	|  |     |      move.l d1,-(sp)
   11592:	|  |     |      move.l d0,-(sp)
   11594:	|  |     |      jsr a5d0 <makeWalkingPerson>
   1159a:	|  |     |      lea 20(sp),sp
   1159e:	|  |     |      tst.w d0
   115a0:	|  |     +----- beq.s 115a6 <moveChr+0x292>
   115a2:	|  |     |      moveq #3,d0
   115a4:	|  +-----|----- bra.s 115ba <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   115a6:	|  |     \----> moveq #2,d0
   115a8:	|  +----------- bra.s 115ba <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   115aa:	\--|----------> pea 1953b <graphics.c.1c13408a+0x35c>
   115b0:	   |            jsr 16bac <KPrintF>
   115b6:	   |            addq.l #4,sp
			return BR_ERROR;
   115b8:	   |            moveq #1,d0
	}
}
   115ba:	   \----------> move.l (sp)+,d2
   115bc:	                lea 28(sp),sp
   115c0:	                rts

000115c2 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   115c2:	clr.l -(sp)
   115c4:	clr.l -(sp)
   115c6:	move.l 16(sp),-(sp)
   115ca:	move.l 16(sp),-(sp)
   115ce:	jsr 11314 <moveChr>
   115d4:	lea 16(sp),sp
}
   115d8:	rts

000115da <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   115da:	clr.l -(sp)
   115dc:	pea 1 <_start+0x1>
   115e0:	move.l 16(sp),-(sp)
   115e4:	move.l 16(sp),-(sp)
   115e8:	jsr 11314 <moveChr>
   115ee:	lea 16(sp),sp
}
   115f2:	rts

000115f4 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   115f4:	pea 1 <_start+0x1>
   115f8:	clr.l -(sp)
   115fa:	move.l 16(sp),-(sp)
   115fe:	move.l 16(sp),-(sp)
   11602:	jsr 11314 <moveChr>
   11608:	lea 16(sp),sp
}
   1160c:	rts

0001160e <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   1160e:	jsr 717a <clearStatusBar>
	return BR_CONTINUE;
   11614:	moveq #2,d0
}
   11616:	rts

00011618 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11618:	jsr 7222 <killLastStatus>
	return BR_CONTINUE;
   1161e:	moveq #2,d0
}
   11620:	rts

00011622 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11622:	jsr 7110 <addStatusBar>
	return BR_CONTINUE;
   11628:	moveq #2,d0
}
   1162a:	rts

0001162c <builtIn_statusText>:

builtIn(statusText)
{
   1162c:	       subq.l #8,sp
   1162e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11630:	       movea.l 20(sp),a0
   11634:	       move.l 24(a0),d0
   11638:	       move.l d0,-(sp)
   1163a:	       jsr 14784 <getTextFromAnyVar>
   11640:	       addq.l #4,sp
   11642:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11646:	   /-- bne.s 1164c <builtIn_statusText+0x20>
   11648:	   |   moveq #1,d0
   1164a:	/--|-- bra.s 11680 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   1164c:	|  \-> moveq #24,d0
   1164e:	|      add.l 20(sp),d0
   11652:	|      move.l d0,-(sp)
   11654:	|      jsr 14b32 <trimStack>
   1165a:	|      addq.l #4,sp
	setStatusBar(newText);
   1165c:	|      move.l 8(sp),-(sp)
   11660:	|      jsr 74a2 <setStatusBar>
   11666:	|      addq.l #4,sp
	FreeVec(newText);
   11668:	|      move.l 8(sp),4(sp)
   1166e:	|      move.l 1a7a2 <SysBase>,d0
   11674:	|      movea.l d0,a6
   11676:	|      movea.l 4(sp),a1
   1167a:	|      jsr -690(a6)
	return BR_CONTINUE;
   1167e:	|      moveq #2,d0
}
   11680:	\----> movea.l (sp)+,a6
   11682:	       addq.l #8,sp
   11684:	       rts

00011686 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11686:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11688:	       movea.l 12(sp),a0
   1168c:	       move.l 24(a0),d0
   11690:	       move.l d0,-(sp)
   11692:	       pea 1 <_start+0x1>
   11696:	       move.l sp,d0
   11698:	       addq.l #8,d0
   1169a:	       move.l d0,-(sp)
   1169c:	       jsr 141ae <getValueType>
   116a2:	       lea 12(sp),sp
   116a6:	       tst.w d0
   116a8:	   /-- bne.s 116ae <builtIn_lightStatus+0x28>
   116aa:	   |   moveq #1,d0
   116ac:	/--|-- bra.s 116cc <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   116ae:	|  \-> moveq #24,d0
   116b0:	|      add.l 12(sp),d0
   116b4:	|      move.l d0,-(sp)
   116b6:	|      jsr 14b32 <trimStack>
   116bc:	|      addq.l #4,sp
	setLitStatus (val);
   116be:	|      move.l (sp),d0
   116c0:	|      move.l d0,-(sp)
   116c2:	|      jsr 7492 <setLitStatus>
   116c8:	|      addq.l #4,sp
	return BR_CONTINUE;
   116ca:	|      moveq #2,d0
}
   116cc:	\----> addq.l #4,sp
   116ce:	       rts

000116d0 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   116d0:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116d2:	       movea.l 16(sp),a0
   116d6:	       move.l 24(a0),d0
   116da:	       move.l d0,-(sp)
   116dc:	       pea 1 <_start+0x1>
   116e0:	       move.l sp,d0
   116e2:	       addq.l #8,d0
   116e4:	       move.l d0,-(sp)
   116e6:	       jsr 141ae <getValueType>
   116ec:	       lea 12(sp),sp
   116f0:	       tst.w d0
   116f2:	   /-- bne.s 116f8 <builtIn_positionStatus+0x28>
   116f4:	   |   moveq #1,d0
   116f6:	/--|-- bra.s 11752 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   116f8:	|  \-> moveq #24,d0
   116fa:	|      add.l 16(sp),d0
   116fe:	|      move.l d0,-(sp)
   11700:	|      jsr 14b32 <trimStack>
   11706:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11708:	|      movea.l 16(sp),a0
   1170c:	|      move.l 24(a0),d0
   11710:	|      move.l d0,-(sp)
   11712:	|      pea 1 <_start+0x1>
   11716:	|      moveq #12,d0
   11718:	|      add.l sp,d0
   1171a:	|      move.l d0,-(sp)
   1171c:	|      jsr 141ae <getValueType>
   11722:	|      lea 12(sp),sp
   11726:	|      tst.w d0
   11728:	|  /-- bne.s 1172e <builtIn_positionStatus+0x5e>
   1172a:	|  |   moveq #1,d0
   1172c:	+--|-- bra.s 11752 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   1172e:	|  \-> moveq #24,d0
   11730:	|      add.l 16(sp),d0
   11734:	|      move.l d0,-(sp)
   11736:	|      jsr 14b32 <trimStack>
   1173c:	|      addq.l #4,sp
	positionStatus (x, y);
   1173e:	|      move.l (sp),d1
   11740:	|      move.l 4(sp),d0
   11744:	|      move.l d1,-(sp)
   11746:	|      move.l d0,-(sp)
   11748:	|      jsr 7284 <positionStatus>
   1174e:	|      addq.l #8,sp
	return BR_CONTINUE;
   11750:	|      moveq #2,d0
}
   11752:	\----> addq.l #8,sp
   11754:	       rts

00011756 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11756:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11758:	       movea.l 12(sp),a0
   1175c:	       move.l 24(a0),d0
   11760:	       move.l d0,-(sp)
   11762:	       pea 1 <_start+0x1>
   11766:	       move.l sp,d0
   11768:	       addq.l #8,d0
   1176a:	       move.l d0,-(sp)
   1176c:	       jsr 141ae <getValueType>
   11772:	       lea 12(sp),sp
   11776:	       tst.w d0
   11778:	   /-- bne.s 1177e <builtIn_alignStatus+0x28>
   1177a:	   |   moveq #1,d0
   1177c:	/--|-- bra.s 1179e <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   1177e:	|  \-> moveq #24,d0
   11780:	|      add.l 12(sp),d0
   11784:	|      move.l d0,-(sp)
   11786:	|      jsr 14b32 <trimStack>
   1178c:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   1178e:	|      move.l (sp),d0
   11790:	|      movea.l 1a12a <nowStatus>,a0
   11796:	|      move.l d0,d0
   11798:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   1179c:	|      moveq #2,d0
}
   1179e:	\----> addq.l #4,sp
   117a0:	       rts

000117a2 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   117a2:	             tst.l 4(sp)
   117a6:	      /----- beq.s 117b2 <getFuncNumForCallback+0x10>
   117a8:	      |      moveq #1,d0
   117aa:	      |      cmp.l 4(sp),d0
   117ae:	      |  /-- beq.s 117b8 <getFuncNumForCallback+0x16>
   117b0:	   /--|--|-- bra.s 117ee <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   117b2:	   |  \--|-> clr.l 12(sp)
			break;
   117b6:	/--|-----|-- bra.s 11800 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   117b8:	|  |     \-> movea.l 8(sp),a0
   117bc:	|  |         move.l 24(a0),d0
   117c0:	|  |         move.l d0,-(sp)
   117c2:	|  |         pea 2 <_start+0x2>
   117c6:	|  |         move.l 20(sp),-(sp)
   117ca:	|  |         jsr 141ae <getValueType>
   117d0:	|  |         lea 12(sp),sp
   117d4:	|  |         tst.w d0
   117d6:	|  |     /-- bne.s 117dc <getFuncNumForCallback+0x3a>
   117d8:	|  |     |   clr.w d0
   117da:	|  |  /--|-- bra.s 11802 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   117dc:	|  |  |  \-> moveq #24,d0
   117de:	|  |  |      add.l 8(sp),d0
   117e2:	|  |  |      move.l d0,-(sp)
   117e4:	|  |  |      jsr 14b32 <trimStack>
   117ea:	|  |  |      addq.l #4,sp
			break;
   117ec:	+--|--|----- bra.s 11800 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   117ee:	|  \--|----> pea 19571 <graphics.c.1c13408a+0x392>
   117f4:	|     |      jsr 16bac <KPrintF>
   117fa:	|     |      addq.l #4,sp
			return FALSE;
   117fc:	|     |      clr.w d0
   117fe:	|     +----- bra.s 11802 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11800:	\-----|----> moveq #1,d0
}
   11802:	      \----> rts

00011804 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11804:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11806:	       move.l sp,d0
   11808:	       move.l d0,-(sp)
   1180a:	       move.l 16(sp),-(sp)
   1180e:	       move.l 16(sp),-(sp)
   11812:	       jsr 117a2 <getFuncNumForCallback>
   11818:	       lea 12(sp),sp
   1181c:	       tst.w d0
   1181e:	/----- beq.s 1182e <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11820:	|      movea.l 1a11c <currentEvents>,a0
   11826:	|      move.l (sp),d0
   11828:	|      move.l d0,(a0)
		return BR_CONTINUE;
   1182a:	|      moveq #2,d0
   1182c:	|  /-- bra.s 11830 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   1182e:	\--|-> moveq #1,d0
}
   11830:	   \-> addq.l #4,sp
   11832:	       rts

00011834 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11834:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11836:	       move.l sp,d0
   11838:	       move.l d0,-(sp)
   1183a:	       move.l 16(sp),-(sp)
   1183e:	       move.l 16(sp),-(sp)
   11842:	       jsr 117a2 <getFuncNumForCallback>
   11848:	       lea 12(sp),sp
   1184c:	       tst.w d0
   1184e:	/----- beq.s 11860 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11850:	|      movea.l 1a11c <currentEvents>,a0
   11856:	|      move.l (sp),d0
   11858:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   1185c:	|      moveq #2,d0
   1185e:	|  /-- bra.s 11862 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11860:	\--|-> moveq #1,d0
}
   11862:	   \-> addq.l #4,sp
   11864:	       rts

00011866 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11866:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11868:	       move.l sp,d0
   1186a:	       move.l d0,-(sp)
   1186c:	       move.l 16(sp),-(sp)
   11870:	       move.l 16(sp),-(sp)
   11874:	       jsr 117a2 <getFuncNumForCallback>
   1187a:	       lea 12(sp),sp
   1187e:	       tst.w d0
   11880:	/----- beq.s 11892 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11882:	|      movea.l 1a11c <currentEvents>,a0
   11888:	|      move.l (sp),d0
   1188a:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   1188e:	|      moveq #2,d0
   11890:	|  /-- bra.s 11894 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11892:	\--|-> moveq #1,d0
}
   11894:	   \-> addq.l #4,sp
   11896:	       rts

00011898 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11898:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1189a:	       move.l sp,d0
   1189c:	       move.l d0,-(sp)
   1189e:	       move.l 16(sp),-(sp)
   118a2:	       move.l 16(sp),-(sp)
   118a6:	       jsr 117a2 <getFuncNumForCallback>
   118ac:	       lea 12(sp),sp
   118b0:	       tst.w d0
   118b2:	/----- beq.s 118c4 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   118b4:	|      movea.l 1a11c <currentEvents>,a0
   118ba:	|      move.l (sp),d0
   118bc:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   118c0:	|      moveq #2,d0
   118c2:	|  /-- bra.s 118c6 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   118c4:	\--|-> moveq #1,d0
}
   118c6:	   \-> addq.l #4,sp
   118c8:	       rts

000118ca <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   118ca:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   118cc:	       move.l sp,d0
   118ce:	       move.l d0,-(sp)
   118d0:	       move.l 16(sp),-(sp)
   118d4:	       move.l 16(sp),-(sp)
   118d8:	       jsr 117a2 <getFuncNumForCallback>
   118de:	       lea 12(sp),sp
   118e2:	       tst.w d0
   118e4:	/----- beq.s 118f6 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   118e6:	|      movea.l 1a11c <currentEvents>,a0
   118ec:	|      move.l (sp),d0
   118ee:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   118f2:	|      moveq #2,d0
   118f4:	|  /-- bra.s 118f8 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   118f6:	\--|-> moveq #1,d0
}
   118f8:	   \-> addq.l #4,sp
   118fa:	       rts

000118fc <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   118fc:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   118fe:	       move.l sp,d0
   11900:	       move.l d0,-(sp)
   11902:	       move.l 16(sp),-(sp)
   11906:	       move.l 16(sp),-(sp)
   1190a:	       jsr 117a2 <getFuncNumForCallback>
   11910:	       lea 12(sp),sp
   11914:	       tst.w d0
   11916:	/----- beq.s 11928 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11918:	|      movea.l 1a11c <currentEvents>,a0
   1191e:	|      move.l (sp),d0
   11920:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11924:	|      moveq #2,d0
   11926:	|  /-- bra.s 1192a <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11928:	\--|-> moveq #1,d0
}
   1192a:	   \-> addq.l #4,sp
   1192c:	       rts

0001192e <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   1192e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11930:	       move.l sp,d0
   11932:	       move.l d0,-(sp)
   11934:	       move.l 16(sp),-(sp)
   11938:	       move.l 16(sp),-(sp)
   1193c:	       jsr 117a2 <getFuncNumForCallback>
   11942:	       lea 12(sp),sp
   11946:	       tst.w d0
   11948:	/----- beq.s 1195a <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   1194a:	|      movea.l 1a11c <currentEvents>,a0
   11950:	|      move.l (sp),d0
   11952:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11956:	|      moveq #2,d0
   11958:	|  /-- bra.s 1195c <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   1195a:	\--|-> moveq #1,d0
}
   1195c:	   \-> addq.l #4,sp
   1195e:	       rts

00011960 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11960:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11962:	          move.l sp,d0
   11964:	          move.l d0,-(sp)
   11966:	          move.l 16(sp),-(sp)
   1196a:	          move.l 16(sp),-(sp)
   1196e:	          jsr 117a2 <getFuncNumForCallback>
   11974:	          lea 12(sp),sp
   11978:	          tst.w d0
   1197a:	/-------- beq.s 119a6 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   1197c:	|         move.l 1a772 <noStack>,d1
   11982:	|         move.l (sp),d0
   11984:	|         pea 1 <_start+0x1>
   11988:	|         move.l d1,-(sp)
   1198a:	|         clr.l -(sp)
   1198c:	|         clr.l -(sp)
   1198e:	|         move.l d0,-(sp)
   11990:	|         jsr 6362 <startNewFunctionNum>
   11996:	|         lea 20(sp),sp
   1199a:	|         tst.l d0
   1199c:	|     /-- bne.s 119a2 <builtIn_spawnSub+0x42>
   1199e:	|     |   moveq #1,d0
   119a0:	|  /--|-- bra.s 119a8 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   119a2:	|  |  \-> moveq #2,d0
   119a4:	|  +----- bra.s 119a8 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   119a6:	\--|----> moveq #1,d0
}
   119a8:	   \----> addq.l #4,sp
   119aa:	          rts

000119ac <builtIn_cancelSub>:

builtIn (cancelSub)
{
   119ac:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   119ae:	          move.l sp,d0
   119b0:	          addq.l #4,d0
   119b2:	          move.l d0,-(sp)
   119b4:	          move.l 20(sp),-(sp)
   119b8:	          move.l 20(sp),-(sp)
   119bc:	          jsr 117a2 <getFuncNumForCallback>
   119c2:	          lea 12(sp),sp
   119c6:	          tst.w d0
   119c8:	/-------- beq.s 119fe <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   119ca:	|         move.l 4(sp),d1
   119ce:	|         move.l sp,d0
   119d0:	|         addq.l #2,d0
   119d2:	|         move.l d0,-(sp)
   119d4:	|         move.l 20(sp),-(sp)
   119d8:	|         move.l d1,-(sp)
   119da:	|         jsr 4088 <cancelAFunction>
   119e0:	|         lea 12(sp),sp
		if (killedMyself) {
   119e4:	|         move.w 2(sp),d0
   119e8:	|  /----- beq.s 119fa <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   119ea:	|  |      move.l 16(sp),-(sp)
   119ee:	|  |      jsr 3fa6 <abortFunction>
   119f4:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   119f6:	|  |      moveq #5,d0
   119f8:	|  |  /-- bra.s 11a00 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   119fa:	|  \--|-> moveq #2,d0
   119fc:	|     +-- bra.s 11a00 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   119fe:	\-----|-> moveq #1,d0
}
   11a00:	      \-> addq.l #8,sp
   11a02:	          rts

00011a04 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11a04:	       subq.l #8,sp
   11a06:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11a08:	       movea.l 20(sp),a0
   11a0c:	       move.l 24(a0),d0
   11a10:	       move.l d0,-(sp)
   11a12:	       jsr 14784 <getTextFromAnyVar>
   11a18:	       addq.l #4,sp
   11a1a:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11a1e:	   /-- bne.s 11a24 <builtIn_stringWidth+0x20>
   11a20:	   |   moveq #1,d0
   11a22:	/--|-- bra.s 11a72 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11a24:	|  \-> moveq #24,d0
   11a26:	|      add.l 20(sp),d0
   11a2a:	|      move.l d0,-(sp)
   11a2c:	|      jsr 14b32 <trimStack>
   11a32:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11a34:	|      move.l 8(sp),-(sp)
   11a38:	|      jsr 1526e <stringWidth>
   11a3e:	|      addq.l #4,sp
   11a40:	|      move.l d0,d1
   11a42:	|      moveq #28,d0
   11a44:	|      add.l 20(sp),d0
   11a48:	|      move.l d1,-(sp)
   11a4a:	|      pea 1 <_start+0x1>
   11a4e:	|      move.l d0,-(sp)
   11a50:	|      jsr 14aa0 <setVariable>
   11a56:	|      lea 12(sp),sp
	FreeVec(theText);
   11a5a:	|      move.l 8(sp),4(sp)
   11a60:	|      move.l 1a7a2 <SysBase>,d0
   11a66:	|      movea.l d0,a6
   11a68:	|      movea.l 4(sp),a1
   11a6c:	|      jsr -690(a6)
	return BR_CONTINUE;
   11a70:	|      moveq #2,d0
}
   11a72:	\----> movea.l (sp)+,a6
   11a74:	       addq.l #8,sp
   11a76:	       rts

00011a78 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   11a78:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a7a:	       movea.l 12(sp),a0
   11a7e:	       move.l 24(a0),d0
   11a82:	       move.l d0,-(sp)
   11a84:	       pea 1 <_start+0x1>
   11a88:	       move.l sp,d0
   11a8a:	       addq.l #8,d0
   11a8c:	       move.l d0,-(sp)
   11a8e:	       jsr 141ae <getValueType>
   11a94:	       lea 12(sp),sp
   11a98:	       tst.w d0
   11a9a:	   /-- bne.s 11aa0 <builtIn_hardScroll+0x28>
   11a9c:	   |   moveq #1,d0
   11a9e:	/--|-- bra.s 11abe <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11aa0:	|  \-> moveq #24,d0
   11aa2:	|      add.l 12(sp),d0
   11aa6:	|      move.l d0,-(sp)
   11aa8:	|      jsr 14b32 <trimStack>
   11aae:	|      addq.l #4,sp
	hardScroll (v);
   11ab0:	|      move.l (sp),d0
   11ab2:	|      move.l d0,-(sp)
   11ab4:	|      jsr ccd2 <hardScroll>
   11aba:	|      addq.l #4,sp
	return BR_CONTINUE;
   11abc:	|      moveq #2,d0
}
   11abe:	\----> addq.l #4,sp
   11ac0:	       rts

00011ac2 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11ac2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ac4:	       movea.l 12(sp),a0
   11ac8:	       move.l 24(a0),d0
   11acc:	       move.l d0,-(sp)
   11ace:	       pea 7 <_start+0x7>
   11ad2:	       move.l sp,d0
   11ad4:	       addq.l #8,d0
   11ad6:	       move.l d0,-(sp)
   11ad8:	       jsr 141ae <getValueType>
   11ade:	       lea 12(sp),sp
   11ae2:	       tst.w d0
   11ae4:	   /-- bne.s 11aea <builtIn_isScreenRegion+0x28>
   11ae6:	   |   moveq #1,d0
   11ae8:	/--|-- bra.s 11b2a <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11aea:	|  \-> moveq #24,d0
   11aec:	|      add.l 12(sp),d0
   11af0:	|      move.l d0,-(sp)
   11af2:	|      jsr 14b32 <trimStack>
   11af8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   11afa:	|      move.l (sp),d0
   11afc:	|      move.l d0,-(sp)
   11afe:	|      jsr 153ce <getRegionForObject>
   11b04:	|      addq.l #4,sp
   11b06:	|      tst.l d0
   11b08:	|      sne d0
   11b0a:	|      neg.b d0
   11b0c:	|      moveq #0,d1
   11b0e:	|      move.b d0,d1
   11b10:	|      moveq #28,d0
   11b12:	|      add.l 12(sp),d0
   11b16:	|      move.l d1,-(sp)
   11b18:	|      pea 1 <_start+0x1>
   11b1c:	|      move.l d0,-(sp)
   11b1e:	|      jsr 14aa0 <setVariable>
   11b24:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11b28:	|      moveq #2,d0
}
   11b2a:	\----> addq.l #4,sp
   11b2c:	       rts

00011b2e <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11b2e:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b30:	       movea.l 12(sp),a0
   11b34:	       move.l 24(a0),d0
   11b38:	       move.l d0,-(sp)
   11b3a:	       pea 1 <_start+0x1>
   11b3e:	       move.l sp,d0
   11b40:	       addq.l #8,d0
   11b42:	       move.l d0,-(sp)
   11b44:	       jsr 141ae <getValueType>
   11b4a:	       lea 12(sp),sp
   11b4e:	       tst.w d0
   11b50:	   /-- bne.s 11b56 <builtIn_setSpeechSpeed+0x28>
   11b52:	   |   moveq #1,d0
   11b54:	/--|-- bra.s 11ba4 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   11b56:	|  \-> moveq #24,d0
   11b58:	|      add.l 12(sp),d0
   11b5c:	|      move.l d0,-(sp)
   11b5e:	|      jsr 14b32 <trimStack>
   11b64:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   11b66:	|      move.l (sp),d0
   11b68:	|      move.l d0,-(sp)
   11b6a:	|      jsr 16fe8 <__floatsisf>
   11b70:	|      addq.l #4,sp
   11b72:	|      move.l #1008981770,-(sp)
   11b78:	|      move.l d0,-(sp)
   11b7a:	|      jsr 1709a <__mulsf3>
   11b80:	|      addq.l #8,sp
   11b82:	|      move.l d0,1a12e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   11b88:	|      moveq #28,d0
   11b8a:	|      add.l 12(sp),d0
   11b8e:	|      pea 1 <_start+0x1>
   11b92:	|      pea 1 <_start+0x1>
   11b96:	|      move.l d0,-(sp)
   11b98:	|      jsr 14aa0 <setVariable>
   11b9e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11ba2:	|      moveq #2,d0
}
   11ba4:	\----> addq.l #4,sp
   11ba6:	       rts

00011ba8 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   11ba8:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11baa:	       movea.l 12(sp),a0
   11bae:	       move.l 24(a0),d0
   11bb2:	       move.l d0,-(sp)
   11bb4:	       pea 1 <_start+0x1>
   11bb8:	       move.l sp,d0
   11bba:	       addq.l #8,d0
   11bbc:	       move.l d0,-(sp)
   11bbe:	       jsr 141ae <getValueType>
   11bc4:	       lea 12(sp),sp
   11bc8:	       tst.w d0
   11bca:	   /-- bne.s 11bd0 <builtIn_setFontSpacing+0x28>
   11bcc:	   |   moveq #1,d0
   11bce:	/--|-- bra.s 11c06 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   11bd0:	|  \-> move.l (sp),d0
   11bd2:	|      move.l d0,d0
   11bd4:	|      move.w d0,1a6a8 <fontSpace>
	trimStack (&fun -> stack);
   11bda:	|      moveq #24,d0
   11bdc:	|      add.l 12(sp),d0
   11be0:	|      move.l d0,-(sp)
   11be2:	|      jsr 14b32 <trimStack>
   11be8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11bea:	|      moveq #28,d0
   11bec:	|      add.l 12(sp),d0
   11bf0:	|      pea 1 <_start+0x1>
   11bf4:	|      pea 1 <_start+0x1>
   11bf8:	|      move.l d0,-(sp)
   11bfa:	|      jsr 14aa0 <setVariable>
   11c00:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11c04:	|      moveq #2,d0
}
   11c06:	\----> addq.l #4,sp
   11c08:	       rts

00011c0a <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   11c0a:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c0c:	          movea.l 12(sp),a0
   11c10:	          move.l 24(a0),d0
   11c14:	          move.l d0,-(sp)
   11c16:	          pea 1 <_start+0x1>
   11c1a:	          move.l sp,d0
   11c1c:	          addq.l #8,d0
   11c1e:	          move.l d0,-(sp)
   11c20:	          jsr 141ae <getValueType>
   11c26:	          lea 12(sp),sp
   11c2a:	          tst.w d0
   11c2c:	      /-- bne.s 11c32 <builtIn_transitionLevel+0x28>
   11c2e:	      |   moveq #1,d0
   11c30:	/-----|-- bra.s 11c86 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   11c32:	|     \-> moveq #24,d0
   11c34:	|         add.l 12(sp),d0
   11c38:	|         move.l d0,-(sp)
   11c3a:	|         jsr 14b32 <trimStack>
   11c40:	|         addq.l #4,sp

	if (number < 0)
   11c42:	|         move.l (sp),d0
   11c44:	|     /-- bpl.s 11c4e <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   11c46:	|     |   clr.b 1a11a <brightnessLevel>
   11c4c:	|  /--|-- bra.s 11c6a <builtIn_transitionLevel+0x60>
	else if (number > 255)
   11c4e:	|  |  \-> move.l (sp),d0
   11c50:	|  |      cmpi.l #255,d0
   11c56:	|  |  /-- ble.s 11c60 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   11c58:	|  |  |   st 1a11a <brightnessLevel>
   11c5e:	|  +--|-- bra.s 11c6a <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   11c60:	|  |  \-> move.l (sp),d0
   11c62:	|  |      move.l d0,d0
   11c64:	|  |      move.b d0,1a11a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   11c6a:	|  \----> moveq #28,d0
   11c6c:	|         add.l 12(sp),d0
   11c70:	|         pea 1 <_start+0x1>
   11c74:	|         pea 1 <_start+0x1>
   11c78:	|         move.l d0,-(sp)
   11c7a:	|         jsr 14aa0 <setVariable>
   11c80:	|         lea 12(sp),sp
	return BR_CONTINUE;
   11c84:	|         moveq #2,d0
}
   11c86:	\-------> addq.l #4,sp
   11c88:	          rts

00011c8a <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   11c8a:	movea.l 8(sp),a0
   11c8e:	move.l 24(a0),d0
   11c92:	move.l d0,-(sp)
   11c94:	jsr 146ee <getBoolean>
   11c9a:	addq.l #4,sp
   11c9c:	move.w d0,1a742 <captureAllKeys>
	trimStack (&fun -> stack);
   11ca2:	moveq #24,d0
   11ca4:	add.l 8(sp),d0
   11ca8:	move.l d0,-(sp)
   11caa:	jsr 14b32 <trimStack>
   11cb0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   11cb2:	move.w 1a742 <captureAllKeys>,d0
   11cb8:	movea.w d0,a0
   11cba:	moveq #28,d0
   11cbc:	add.l 8(sp),d0
   11cc0:	move.l a0,-(sp)
   11cc2:	pea 1 <_start+0x1>
   11cc6:	move.l d0,-(sp)
   11cc8:	jsr 14aa0 <setVariable>
   11cce:	lea 12(sp),sp
	return BR_CONTINUE;
   11cd2:	moveq #2,d0
}
   11cd4:	rts

00011cd6 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   11cd6:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cda:	       movea.l 20(sp),a0
   11cde:	       move.l 24(a0),d0
   11ce2:	       move.l d0,-(sp)
   11ce4:	       pea 1 <_start+0x1>
   11ce8:	       moveq #12,d0
   11cea:	       add.l sp,d0
   11cec:	       move.l d0,-(sp)
   11cee:	       jsr 141ae <getValueType>
   11cf4:	       lea 12(sp),sp
   11cf8:	       tst.w d0
   11cfa:	   /-- bne.s 11d02 <builtIn_spinCharacter+0x2c>
   11cfc:	   |   moveq #1,d0
   11cfe:	/--|-- bra.w 11db2 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   11d02:	|  \-> moveq #24,d0
   11d04:	|      add.l 20(sp),d0
   11d08:	|      move.l d0,-(sp)
   11d0a:	|      jsr 14b32 <trimStack>
   11d10:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d12:	|      movea.l 20(sp),a0
   11d16:	|      move.l 24(a0),d0
   11d1a:	|      move.l d0,-(sp)
   11d1c:	|      pea 7 <_start+0x7>
   11d20:	|      lea 8(sp),a0
   11d24:	|      move.l a0,-(sp)
   11d26:	|      jsr 141ae <getValueType>
   11d2c:	|      lea 12(sp),sp
   11d30:	|      tst.w d0
   11d32:	|  /-- bne.s 11d38 <builtIn_spinCharacter+0x62>
   11d34:	|  |   moveq #1,d0
   11d36:	+--|-- bra.s 11db2 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   11d38:	|  \-> moveq #24,d0
   11d3a:	|      add.l 20(sp),d0
   11d3e:	|      move.l d0,-(sp)
   11d40:	|      jsr 14b32 <trimStack>
   11d46:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11d48:	|      move.l (sp),d0
   11d4a:	|      move.l d0,-(sp)
   11d4c:	|      jsr a0a6 <findPerson>
   11d52:	|      addq.l #4,sp
   11d54:	|      move.l d0,8(sp)
	if (thisPerson) {
   11d58:	|  /-- beq.s 11d98 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   11d5a:	|  |   move.l 4(sp),d0
   11d5e:	|  |   movea.l 8(sp),a0
   11d62:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   11d66:	|  |   movea.l 8(sp),a0
   11d6a:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   11d70:	|  |   movea.l 8(sp),a0
   11d74:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11d7a:	|  |   moveq #28,d0
   11d7c:	|  |   add.l 20(sp),d0
   11d80:	|  |   pea 1 <_start+0x1>
   11d84:	|  |   pea 1 <_start+0x1>
   11d88:	|  |   move.l d0,-(sp)
   11d8a:	|  |   jsr 14aa0 <setVariable>
   11d90:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   11d94:	|  |   moveq #3,d0
   11d96:	+--|-- bra.s 11db2 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11d98:	|  \-> moveq #28,d0
   11d9a:	|      add.l 20(sp),d0
   11d9e:	|      clr.l -(sp)
   11da0:	|      pea 1 <_start+0x1>
   11da4:	|      move.l d0,-(sp)
   11da6:	|      jsr 14aa0 <setVariable>
   11dac:	|      lea 12(sp),sp
		return BR_CONTINUE;
   11db0:	|      moveq #2,d0
	}
}
   11db2:	\----> lea 12(sp),sp
   11db6:	       rts

00011db8 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   11db8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11dba:	          movea.l 16(sp),a0
   11dbe:	          move.l 24(a0),d0
   11dc2:	          move.l d0,-(sp)
   11dc4:	          pea 7 <_start+0x7>
   11dc8:	          move.l sp,d0
   11dca:	          addq.l #8,d0
   11dcc:	          move.l d0,-(sp)
   11dce:	          jsr 141ae <getValueType>
   11dd4:	          lea 12(sp),sp
   11dd8:	          tst.w d0
   11dda:	      /-- bne.s 11de0 <builtIn_getCharacterDirection+0x28>
   11ddc:	      |   moveq #1,d0
   11dde:	/-----|-- bra.s 11e3e <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   11de0:	|     \-> moveq #24,d0
   11de2:	|         add.l 16(sp),d0
   11de6:	|         move.l d0,-(sp)
   11de8:	|         jsr 14b32 <trimStack>
   11dee:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11df0:	|         move.l (sp),d0
   11df2:	|         move.l d0,-(sp)
   11df4:	|         jsr a0a6 <findPerson>
   11dfa:	|         addq.l #4,sp
   11dfc:	|         move.l d0,4(sp)
	if (thisPerson) {
   11e00:	|  /----- beq.s 11e24 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   11e02:	|  |      movea.l 4(sp),a0
   11e06:	|  |      move.l 106(a0),d1
   11e0a:	|  |      moveq #28,d0
   11e0c:	|  |      add.l 16(sp),d0
   11e10:	|  |      move.l d1,-(sp)
   11e12:	|  |      pea 1 <_start+0x1>
   11e16:	|  |      move.l d0,-(sp)
   11e18:	|  |      jsr 14aa0 <setVariable>
   11e1e:	|  |      lea 12(sp),sp
   11e22:	|  |  /-- bra.s 11e3c <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11e24:	|  \--|-> moveq #28,d0
   11e26:	|     |   add.l 16(sp),d0
   11e2a:	|     |   clr.l -(sp)
   11e2c:	|     |   pea 1 <_start+0x1>
   11e30:	|     |   move.l d0,-(sp)
   11e32:	|     |   jsr 14aa0 <setVariable>
   11e38:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11e3c:	|     \-> moveq #2,d0
}
   11e3e:	\-------> addq.l #8,sp
   11e40:	          rts

00011e42 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   11e42:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e44:	       movea.l 16(sp),a0
   11e48:	       move.l 24(a0),d0
   11e4c:	       move.l d0,-(sp)
   11e4e:	       pea 7 <_start+0x7>
   11e52:	       move.l sp,d0
   11e54:	       addq.l #8,d0
   11e56:	       move.l d0,-(sp)
   11e58:	       jsr 141ae <getValueType>
   11e5e:	       lea 12(sp),sp
   11e62:	       tst.w d0
   11e64:	   /-- bne.s 11e6a <builtIn_isCharacter+0x28>
   11e66:	   |   moveq #1,d0
   11e68:	/--|-- bra.s 11eac <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   11e6a:	|  \-> moveq #24,d0
   11e6c:	|      add.l 16(sp),d0
   11e70:	|      move.l d0,-(sp)
   11e72:	|      jsr 14b32 <trimStack>
   11e78:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11e7a:	|      move.l (sp),d0
   11e7c:	|      move.l d0,-(sp)
   11e7e:	|      jsr a0a6 <findPerson>
   11e84:	|      addq.l #4,sp
   11e86:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   11e8a:	|      sne d0
   11e8c:	|      neg.b d0
   11e8e:	|      moveq #0,d1
   11e90:	|      move.b d0,d1
   11e92:	|      moveq #28,d0
   11e94:	|      add.l 16(sp),d0
   11e98:	|      move.l d1,-(sp)
   11e9a:	|      pea 1 <_start+0x1>
   11e9e:	|      move.l d0,-(sp)
   11ea0:	|      jsr 14aa0 <setVariable>
   11ea6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11eaa:	|      moveq #2,d0
}
   11eac:	\----> addq.l #8,sp
   11eae:	       rts

00011eb0 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   11eb0:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11eb2:	          movea.l 16(sp),a0
   11eb6:	          move.l 24(a0),d0
   11eba:	          move.l d0,-(sp)
   11ebc:	          pea 7 <_start+0x7>
   11ec0:	          move.l sp,d0
   11ec2:	          addq.l #8,d0
   11ec4:	          move.l d0,-(sp)
   11ec6:	          jsr 141ae <getValueType>
   11ecc:	          lea 12(sp),sp
   11ed0:	          tst.w d0
   11ed2:	      /-- bne.s 11ed8 <builtIn_normalCharacter+0x28>
   11ed4:	      |   moveq #1,d0
   11ed6:	/-----|-- bra.s 11f54 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   11ed8:	|     \-> moveq #24,d0
   11eda:	|         add.l 16(sp),d0
   11ede:	|         move.l d0,-(sp)
   11ee0:	|         jsr 14b32 <trimStack>
   11ee6:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11ee8:	|         move.l (sp),d0
   11eea:	|         move.l d0,-(sp)
   11eec:	|         jsr a0a6 <findPerson>
   11ef2:	|         addq.l #4,sp
   11ef4:	|         move.l d0,4(sp)
	if (thisPerson)
   11ef8:	|  /----- beq.s 11f3a <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   11efa:	|  |      movea.l 4(sp),a0
   11efe:	|  |      movea.l 80(a0),a0
   11f02:	|  |      move.l (a0),d1
   11f04:	|  |      movea.l 4(sp),a0
   11f08:	|  |      move.l 106(a0),d0
   11f0c:	|  |      add.l d0,d0
   11f0e:	|  |      add.l d0,d0
   11f10:	|  |      movea.l d1,a0
   11f12:	|  |      adda.l d0,a0
   11f14:	|  |      move.l (a0),d0
   11f16:	|  |      movea.l 4(sp),a0
   11f1a:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11f1e:	|  |      moveq #28,d0
   11f20:	|  |      add.l 16(sp),d0
   11f24:	|  |      pea 1 <_start+0x1>
   11f28:	|  |      pea 1 <_start+0x1>
   11f2c:	|  |      move.l d0,-(sp)
   11f2e:	|  |      jsr 14aa0 <setVariable>
   11f34:	|  |      lea 12(sp),sp
   11f38:	|  |  /-- bra.s 11f52 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11f3a:	|  \--|-> moveq #28,d0
   11f3c:	|     |   add.l 16(sp),d0
   11f40:	|     |   clr.l -(sp)
   11f42:	|     |   pea 1 <_start+0x1>
   11f46:	|     |   move.l d0,-(sp)
   11f48:	|     |   jsr 14aa0 <setVariable>
   11f4e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11f52:	|     \-> moveq #2,d0
}
   11f54:	\-------> addq.l #8,sp
   11f56:	          rts

00011f58 <builtIn_isMoving>:

builtIn(isMoving)
{
   11f58:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f5a:	          movea.l 16(sp),a0
   11f5e:	          move.l 24(a0),d0
   11f62:	          move.l d0,-(sp)
   11f64:	          pea 7 <_start+0x7>
   11f68:	          move.l sp,d0
   11f6a:	          addq.l #8,d0
   11f6c:	          move.l d0,-(sp)
   11f6e:	          jsr 141ae <getValueType>
   11f74:	          lea 12(sp),sp
   11f78:	          tst.w d0
   11f7a:	      /-- bne.s 11f80 <builtIn_isMoving+0x28>
   11f7c:	      |   moveq #1,d0
   11f7e:	/-----|-- bra.s 11fe0 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   11f80:	|     \-> moveq #24,d0
   11f82:	|         add.l 16(sp),d0
   11f86:	|         move.l d0,-(sp)
   11f88:	|         jsr 14b32 <trimStack>
   11f8e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11f90:	|         move.l (sp),d0
   11f92:	|         move.l d0,-(sp)
   11f94:	|         jsr a0a6 <findPerson>
   11f9a:	|         addq.l #4,sp
   11f9c:	|         move.l d0,4(sp)
	if (thisPerson)
   11fa0:	|  /----- beq.s 11fc6 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   11fa2:	|  |      movea.l 4(sp),a0
   11fa6:	|  |      move.w 64(a0),d0
   11faa:	|  |      movea.w d0,a0
   11fac:	|  |      moveq #28,d0
   11fae:	|  |      add.l 16(sp),d0
   11fb2:	|  |      move.l a0,-(sp)
   11fb4:	|  |      pea 1 <_start+0x1>
   11fb8:	|  |      move.l d0,-(sp)
   11fba:	|  |      jsr 14aa0 <setVariable>
   11fc0:	|  |      lea 12(sp),sp
   11fc4:	|  |  /-- bra.s 11fde <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11fc6:	|  \--|-> moveq #28,d0
   11fc8:	|     |   add.l 16(sp),d0
   11fcc:	|     |   clr.l -(sp)
   11fce:	|     |   pea 1 <_start+0x1>
   11fd2:	|     |   move.l d0,-(sp)
   11fd4:	|     |   jsr 14aa0 <setVariable>
   11fda:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11fde:	|     \-> moveq #2,d0
}
   11fe0:	\-------> addq.l #8,sp
   11fe2:	          rts

00011fe4 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   11fe4:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11fe8:	          movea.l 20(sp),a0
   11fec:	          move.l 24(a0),d0
   11ff0:	          move.l d0,-(sp)
   11ff2:	          pea 7 <_start+0x7>
   11ff6:	          lea 8(sp),a0
   11ffa:	          move.l a0,-(sp)
   11ffc:	          jsr 141ae <getValueType>
   12002:	          lea 12(sp),sp
   12006:	          tst.w d0
   12008:	      /-- bne.s 12010 <builtIn_fetchEvent+0x2c>
   1200a:	      |   moveq #1,d0
   1200c:	/-----|-- bra.w 120a4 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12010:	|     \-> moveq #24,d0
   12012:	|         add.l 20(sp),d0
   12016:	|         move.l d0,-(sp)
   12018:	|         jsr 14b32 <trimStack>
   1201e:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12020:	|         movea.l 20(sp),a0
   12024:	|         move.l 24(a0),d0
   12028:	|         move.l d0,-(sp)
   1202a:	|         pea 7 <_start+0x7>
   1202e:	|         moveq #12,d0
   12030:	|         add.l sp,d0
   12032:	|         move.l d0,-(sp)
   12034:	|         jsr 141ae <getValueType>
   1203a:	|         lea 12(sp),sp
   1203e:	|         tst.w d0
   12040:	|     /-- bne.s 12046 <builtIn_fetchEvent+0x62>
   12042:	|     |   moveq #1,d0
   12044:	+-----|-- bra.s 120a4 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12046:	|     \-> moveq #24,d0
   12048:	|         add.l 20(sp),d0
   1204c:	|         move.l d0,-(sp)
   1204e:	|         jsr 14b32 <trimStack>
   12054:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12056:	|         move.l (sp),d1
   12058:	|         move.l 4(sp),d0
   1205c:	|         move.l d1,-(sp)
   1205e:	|         move.l d0,-(sp)
   12060:	|         jsr cfb4 <getCombinationFunction>
   12066:	|         addq.l #8,sp
   12068:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   1206c:	|  /----- beq.s 1208a <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1206e:	|  |      moveq #28,d0
   12070:	|  |      add.l 20(sp),d0
   12074:	|  |      move.l 8(sp),-(sp)
   12078:	|  |      pea 2 <_start+0x2>
   1207c:	|  |      move.l d0,-(sp)
   1207e:	|  |      jsr 14aa0 <setVariable>
   12084:	|  |      lea 12(sp),sp
   12088:	|  |  /-- bra.s 120a2 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1208a:	|  \--|-> moveq #28,d0
   1208c:	|     |   add.l 20(sp),d0
   12090:	|     |   clr.l -(sp)
   12092:	|     |   pea 1 <_start+0x1>
   12096:	|     |   move.l d0,-(sp)
   12098:	|     |   jsr 14aa0 <setVariable>
   1209e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   120a2:	|     \-> moveq #2,d0
}
   120a4:	\-------> lea 12(sp),sp
   120a8:	          rts

000120aa <builtIn_deleteFile>:

builtIn(deleteFile)
{
   120aa:	       lea -24(sp),sp
   120ae:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   120b0:	       movea.l 36(sp),a0
   120b4:	       move.l 24(a0),d0
   120b8:	       move.l d0,-(sp)
   120ba:	       jsr 14784 <getTextFromAnyVar>
   120c0:	       addq.l #4,sp
   120c2:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   120c6:	       moveq #24,d0
   120c8:	       add.l 36(sp),d0
   120cc:	       move.l d0,-(sp)
   120ce:	       jsr 14b32 <trimStack>
   120d4:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   120d6:	       move.l 24(sp),-(sp)
   120da:	       jsr 2fe <encodeFilename>
   120e0:	       addq.l #4,sp
   120e2:	       move.l d0,20(sp)
    FreeVec(namNormal);
   120e6:	       move.l 24(sp),16(sp)
   120ec:	       move.l 1a7a2 <SysBase>,d0
   120f2:	       movea.l d0,a6
   120f4:	       movea.l 16(sp),a1
   120f8:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   120fc:	       move.l 20(sp),-(sp)
   12100:	       jsr dd6c <failSecurityCheck>
   12106:	       addq.l #4,sp
   12108:	       tst.w d0
   1210a:	   /-- beq.s 12110 <builtIn_deleteFile+0x66>
   1210c:	   |   moveq #1,d0
   1210e:	/--|-- bra.s 1215e <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12110:	|  \-> move.l 20(sp),12(sp)
   12116:	|      move.l 1a7aa <DOSBase>,d0
   1211c:	|      movea.l d0,a6
   1211e:	|      move.l 12(sp),d1
   12122:	|      jsr -72(a6)
   12126:	|      move.l d0,8(sp)
   1212a:	|      move.l 8(sp),d1
   1212e:	|      moveq #28,d0
   12130:	|      add.l 36(sp),d0
   12134:	|      move.l d1,-(sp)
   12136:	|      pea 1 <_start+0x1>
   1213a:	|      move.l d0,-(sp)
   1213c:	|      jsr 14aa0 <setVariable>
   12142:	|      lea 12(sp),sp
    FreeVec(nam);
   12146:	|      move.l 20(sp),4(sp)
   1214c:	|      move.l 1a7a2 <SysBase>,d0
   12152:	|      movea.l d0,a6
   12154:	|      movea.l 4(sp),a1
   12158:	|      jsr -690(a6)

    return BR_CONTINUE;
   1215c:	|      moveq #2,d0
}
   1215e:	\----> movea.l (sp)+,a6
   12160:	       lea 24(sp),sp
   12164:	       rts

00012166 <builtIn_renameFile>:

builtIn(renameFile)
{
   12166:	       lea -40(sp),sp
   1216a:	       move.l a6,-(sp)
   1216c:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1216e:	       movea.l 56(sp),a0
   12172:	       move.l 24(a0),d0
   12176:	       move.l d0,-(sp)
   12178:	       jsr 14784 <getTextFromAnyVar>
   1217e:	       addq.l #4,sp
   12180:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12184:	       move.l 44(sp),-(sp)
   12188:	       jsr 2fe <encodeFilename>
   1218e:	       addq.l #4,sp
   12190:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12194:	       moveq #24,d0
   12196:	       add.l 56(sp),d0
   1219a:	       move.l d0,-(sp)
   1219c:	       jsr 14b32 <trimStack>
   121a2:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   121a4:	       move.l 40(sp),-(sp)
   121a8:	       jsr dd6c <failSecurityCheck>
   121ae:	       addq.l #4,sp
   121b0:	       tst.w d0
   121b2:	   /-- beq.s 121ba <builtIn_renameFile+0x54>
   121b4:	   |   moveq #1,d0
   121b6:	/--|-- bra.w 122a0 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   121ba:	|  \-> move.l 44(sp),36(sp)
   121c0:	|      move.l 1a7a2 <SysBase>,d0
   121c6:	|      movea.l d0,a6
   121c8:	|      movea.l 36(sp),a1
   121cc:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   121d0:	|      movea.l 56(sp),a0
   121d4:	|      move.l 24(a0),d0
   121d8:	|      move.l d0,-(sp)
   121da:	|      jsr 14784 <getTextFromAnyVar>
   121e0:	|      addq.l #4,sp
   121e2:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   121e6:	|      move.l 44(sp),-(sp)
   121ea:	|      jsr 2fe <encodeFilename>
   121f0:	|      addq.l #4,sp
   121f2:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   121f6:	|      moveq #24,d0
   121f8:	|      add.l 56(sp),d0
   121fc:	|      move.l d0,-(sp)
   121fe:	|      jsr 14b32 <trimStack>
   12204:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12206:	|      move.l 32(sp),-(sp)
   1220a:	|      jsr dd6c <failSecurityCheck>
   12210:	|      addq.l #4,sp
   12212:	|      tst.w d0
   12214:	|  /-- beq.s 1221c <builtIn_renameFile+0xb6>
   12216:	|  |   moveq #1,d0
   12218:	+--|-- bra.w 122a0 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1221c:	|  \-> move.l 44(sp),28(sp)
   12222:	|      move.l 1a7a2 <SysBase>,d0
   12228:	|      movea.l d0,a6
   1222a:	|      movea.l 28(sp),a1
   1222e:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12232:	|      move.l 32(sp),24(sp)
   12238:	|      move.l 40(sp),20(sp)
   1223e:	|      move.l 1a7aa <DOSBase>,d0
   12244:	|      movea.l d0,a6
   12246:	|      move.l 24(sp),d1
   1224a:	|      move.l 20(sp),d2
   1224e:	|      jsr -78(a6)
   12252:	|      move.l d0,16(sp)
   12256:	|      move.l 16(sp),d1
   1225a:	|      moveq #28,d0
   1225c:	|      add.l 56(sp),d0
   12260:	|      move.l d1,-(sp)
   12262:	|      pea 1 <_start+0x1>
   12266:	|      move.l d0,-(sp)
   12268:	|      jsr 14aa0 <setVariable>
   1226e:	|      lea 12(sp),sp
	FreeVec(nam);
   12272:	|      move.l 32(sp),12(sp)
   12278:	|      move.l 1a7a2 <SysBase>,d0
   1227e:	|      movea.l d0,a6
   12280:	|      movea.l 12(sp),a1
   12284:	|      jsr -690(a6)
	FreeVec(newnam);
   12288:	|      move.l 40(sp),8(sp)
   1228e:	|      move.l 1a7a2 <SysBase>,d0
   12294:	|      movea.l d0,a6
   12296:	|      movea.l 8(sp),a1
   1229a:	|      jsr -690(a6)

	return BR_CONTINUE;
   1229e:	|      moveq #2,d0
}
   122a0:	\----> move.l (sp)+,d2
   122a2:	       movea.l (sp)+,a6
   122a4:	       lea 40(sp),sp
   122a8:	       rts

000122aa <builtIn_cacheSound>:

builtIn(cacheSound)
{
   122aa:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   122ac:	       movea.l 12(sp),a0
   122b0:	       move.l 24(a0),d0
   122b4:	       move.l d0,-(sp)
   122b6:	       pea 5 <_start+0x5>
   122ba:	       move.l sp,d0
   122bc:	       addq.l #8,d0
   122be:	       move.l d0,-(sp)
   122c0:	       jsr 141ae <getValueType>
   122c6:	       lea 12(sp),sp
   122ca:	       tst.w d0
   122cc:	   /-- bne.s 122d2 <builtIn_cacheSound+0x28>
   122ce:	   |   moveq #1,d0
   122d0:	/--|-- bra.s 122fa <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   122d2:	|  \-> moveq #24,d0
   122d4:	|      add.l 12(sp),d0
   122d8:	|      move.l d0,-(sp)
   122da:	|      jsr 14b32 <trimStack>
   122e0:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   122e2:	|      move.l (sp),d0
   122e4:	|      move.l d0,-(sp)
   122e6:	|      jsr cbb4 <cacheSound>
   122ec:	|      addq.l #4,sp
   122ee:	|      moveq #-1,d1
   122f0:	|      cmp.l d0,d1
   122f2:	|  /-- bne.s 122f8 <builtIn_cacheSound+0x4e>
   122f4:	|  |   moveq #1,d0
   122f6:	+--|-- bra.s 122fa <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   122f8:	|  \-> moveq #2,d0
}
   122fa:	\----> addq.l #4,sp
   122fc:	       rts

000122fe <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   122fe:	pea 19586 <graphics.c.1c13408a+0x3a7>
   12304:	jsr 16bac <KPrintF>
   1230a:	addq.l #4,sp
	return BR_CONTINUE;
   1230c:	moveq #2,d0
}
   1230e:	rts

00012310 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12310:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12314:	          movea.l 20(sp),a0
   12318:	          move.l 24(a0),d0
   1231c:	          move.l d0,-(sp)
   1231e:	          pea 1 <_start+0x1>
   12322:	          moveq #12,d0
   12324:	          add.l sp,d0
   12326:	          move.l d0,-(sp)
   12328:	          jsr 141ae <getValueType>
   1232e:	          lea 12(sp),sp
   12332:	          tst.w d0
   12334:	      /-- bne.s 1233c <builtIn_setCharacterSpinSpeed+0x2c>
   12336:	      |   moveq #1,d0
   12338:	/-----|-- bra.w 123d6 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1233c:	|     \-> moveq #24,d0
   1233e:	|         add.l 20(sp),d0
   12342:	|         move.l d0,-(sp)
   12344:	|         jsr 14b32 <trimStack>
   1234a:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1234c:	|         movea.l 20(sp),a0
   12350:	|         move.l 24(a0),d0
   12354:	|         move.l d0,-(sp)
   12356:	|         pea 7 <_start+0x7>
   1235a:	|         lea 8(sp),a0
   1235e:	|         move.l a0,-(sp)
   12360:	|         jsr 141ae <getValueType>
   12366:	|         lea 12(sp),sp
   1236a:	|         tst.w d0
   1236c:	|     /-- bne.s 12372 <builtIn_setCharacterSpinSpeed+0x62>
   1236e:	|     |   moveq #1,d0
   12370:	+-----|-- bra.s 123d6 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12372:	|     \-> moveq #24,d0
   12374:	|         add.l 20(sp),d0
   12378:	|         move.l d0,-(sp)
   1237a:	|         jsr 14b32 <trimStack>
   12380:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12382:	|         move.l (sp),d0
   12384:	|         move.l d0,-(sp)
   12386:	|         jsr a0a6 <findPerson>
   1238c:	|         addq.l #4,sp
   1238e:	|         move.l d0,8(sp)

	if (thisPerson) {
   12392:	|  /----- beq.s 123bc <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12394:	|  |      move.l 4(sp),d0
   12398:	|  |      movea.l 8(sp),a0
   1239c:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   123a0:	|  |      moveq #28,d0
   123a2:	|  |      add.l 20(sp),d0
   123a6:	|  |      pea 1 <_start+0x1>
   123aa:	|  |      pea 1 <_start+0x1>
   123ae:	|  |      move.l d0,-(sp)
   123b0:	|  |      jsr 14aa0 <setVariable>
   123b6:	|  |      lea 12(sp),sp
   123ba:	|  |  /-- bra.s 123d4 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123bc:	|  \--|-> moveq #28,d0
   123be:	|     |   add.l 20(sp),d0
   123c2:	|     |   clr.l -(sp)
   123c4:	|     |   pea 1 <_start+0x1>
   123c8:	|     |   move.l d0,-(sp)
   123ca:	|     |   jsr 14aa0 <setVariable>
   123d0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   123d4:	|     \-> moveq #2,d0
}
   123d6:	\-------> lea 12(sp),sp
   123da:	          rts

000123dc <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   123dc:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123e0:	          movea.l 20(sp),a0
   123e4:	          move.l 24(a0),d0
   123e8:	          move.l d0,-(sp)
   123ea:	          pea 1 <_start+0x1>
   123ee:	          moveq #12,d0
   123f0:	          add.l sp,d0
   123f2:	          move.l d0,-(sp)
   123f4:	          jsr 141ae <getValueType>
   123fa:	          lea 12(sp),sp
   123fe:	          tst.w d0
   12400:	      /-- bne.s 12408 <builtIn_setCharacterAngleOffset+0x2c>
   12402:	      |   moveq #1,d0
   12404:	/-----|-- bra.w 124a2 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12408:	|     \-> moveq #24,d0
   1240a:	|         add.l 20(sp),d0
   1240e:	|         move.l d0,-(sp)
   12410:	|         jsr 14b32 <trimStack>
   12416:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12418:	|         movea.l 20(sp),a0
   1241c:	|         move.l 24(a0),d0
   12420:	|         move.l d0,-(sp)
   12422:	|         pea 7 <_start+0x7>
   12426:	|         lea 8(sp),a0
   1242a:	|         move.l a0,-(sp)
   1242c:	|         jsr 141ae <getValueType>
   12432:	|         lea 12(sp),sp
   12436:	|         tst.w d0
   12438:	|     /-- bne.s 1243e <builtIn_setCharacterAngleOffset+0x62>
   1243a:	|     |   moveq #1,d0
   1243c:	+-----|-- bra.s 124a2 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   1243e:	|     \-> moveq #24,d0
   12440:	|         add.l 20(sp),d0
   12444:	|         move.l d0,-(sp)
   12446:	|         jsr 14b32 <trimStack>
   1244c:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1244e:	|         move.l (sp),d0
   12450:	|         move.l d0,-(sp)
   12452:	|         jsr a0a6 <findPerson>
   12458:	|         addq.l #4,sp
   1245a:	|         move.l d0,8(sp)

	if (thisPerson) {
   1245e:	|  /----- beq.s 12488 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12460:	|  |      move.l 4(sp),d0
   12464:	|  |      movea.l 8(sp),a0
   12468:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1246c:	|  |      moveq #28,d0
   1246e:	|  |      add.l 20(sp),d0
   12472:	|  |      pea 1 <_start+0x1>
   12476:	|  |      pea 1 <_start+0x1>
   1247a:	|  |      move.l d0,-(sp)
   1247c:	|  |      jsr 14aa0 <setVariable>
   12482:	|  |      lea 12(sp),sp
   12486:	|  |  /-- bra.s 124a0 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12488:	|  \--|-> moveq #28,d0
   1248a:	|     |   add.l 20(sp),d0
   1248e:	|     |   clr.l -(sp)
   12490:	|     |   pea 1 <_start+0x1>
   12494:	|     |   move.l d0,-(sp)
   12496:	|     |   jsr 14aa0 <setVariable>
   1249c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   124a0:	|     \-> moveq #2,d0
}
   124a2:	\-------> lea 12(sp),sp
   124a6:	          rts

000124a8 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   124a8:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   124aa:	       movea.l 12(sp),a0
   124ae:	       move.l 24(a0),d0
   124b2:	       move.l d0,-(sp)
   124b4:	       pea 1 <_start+0x1>
   124b8:	       move.l sp,d0
   124ba:	       addq.l #8,d0
   124bc:	       move.l d0,-(sp)
   124be:	       jsr 141ae <getValueType>
   124c4:	       lea 12(sp),sp
   124c8:	       tst.w d0
   124ca:	   /-- bne.s 124d0 <builtIn_transitionMode+0x28>
   124cc:	   |   moveq #1,d0
   124ce:	/--|-- bra.s 12506 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   124d0:	|  \-> move.l (sp),d0
   124d2:	|      move.l d0,d0
   124d4:	|      move.b d0,1a67e <fadeMode>
	trimStack (&fun -> stack);
   124da:	|      moveq #24,d0
   124dc:	|      add.l 12(sp),d0
   124e0:	|      move.l d0,-(sp)
   124e2:	|      jsr 14b32 <trimStack>
   124e8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   124ea:	|      moveq #28,d0
   124ec:	|      add.l 12(sp),d0
   124f0:	|      pea 1 <_start+0x1>
   124f4:	|      pea 1 <_start+0x1>
   124f8:	|      move.l d0,-(sp)
   124fa:	|      jsr 14aa0 <setVariable>
   12500:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12504:	|      moveq #2,d0
}
   12506:	\----> addq.l #4,sp
   12508:	       rts

0001250a <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1250a:	moveq #24,d0
   1250c:	add.l 8(sp),d0
   12510:	move.l d0,-(sp)
   12512:	jsr 14b32 <trimStack>
   12518:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   1251a:	moveq #28,d0
   1251c:	add.l 8(sp),d0
   12520:	pea 1 <_start+0x1>
   12524:	pea 1 <_start+0x1>
   12528:	move.l d0,-(sp)
   1252a:	jsr 14aa0 <setVariable>
   12530:	lea 12(sp),sp
	return BR_CONTINUE;
   12534:	moveq #2,d0
}
   12536:	rts

00012538 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12538:	pea 195b0 <graphics.c.1c13408a+0x3d1>
   1253e:	jsr 16bac <KPrintF>
   12544:	addq.l #4,sp
	return BR_CONTINUE;
   12546:	moveq #2,d0
}
   12548:	rts

0001254a <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   1254a:	       lea -16(sp),sp
   1254e:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12550:	       movea.l 28(sp),a0
   12554:	       move.l 24(a0),d0
   12558:	       move.l d0,-(sp)
   1255a:	       jsr 14784 <getTextFromAnyVar>
   12560:	       addq.l #4,sp
   12562:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12566:	   /-- bne.s 1256e <builtIn_saveCustomData+0x24>
   12568:	   |   moveq #1,d0
   1256a:	/--|-- bra.w 12620 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   1256e:	|  \-> move.l 16(sp),-(sp)
   12572:	|      jsr 2fe <encodeFilename>
   12578:	|      addq.l #4,sp
   1257a:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   1257e:	|      move.l 16(sp),8(sp)
   12584:	|      move.l 1a7a2 <SysBase>,d0
   1258a:	|      movea.l d0,a6
   1258c:	|      movea.l 8(sp),a1
   12590:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12594:	|      move.l 12(sp),-(sp)
   12598:	|      jsr dd6c <failSecurityCheck>
   1259e:	|      addq.l #4,sp
   125a0:	|      tst.w d0
   125a2:	|  /-- beq.s 125a8 <builtIn_saveCustomData+0x5e>
   125a4:	|  |   moveq #1,d0
   125a6:	+--|-- bra.s 12620 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   125a8:	|  \-> moveq #24,d0
   125aa:	|      add.l 28(sp),d0
   125ae:	|      move.l d0,-(sp)
   125b0:	|      jsr 14b32 <trimStack>
   125b6:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   125b8:	|      movea.l 28(sp),a0
   125bc:	|      movea.l 24(a0),a0
   125c0:	|      move.l (a0),d0
   125c2:	|      moveq #6,d1
   125c4:	|      cmp.l d0,d1
   125c6:	|  /-- beq.s 125da <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   125c8:	|  |   pea 195dd <graphics.c.1c13408a+0x3fe>
   125ce:	|  |   jsr 16bac <KPrintF>
   125d4:	|  |   addq.l #4,sp
		return BR_ERROR;
   125d6:	|  |   moveq #1,d0
   125d8:	+--|-- bra.s 12620 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   125da:	|  \-> movea.l 28(sp),a0
   125de:	|      move.l 24(a0),d0
   125e2:	|      move.l d0,-(sp)
   125e4:	|      move.l 16(sp),-(sp)
   125e8:	|      jsr d9bc <stackToFile>
   125ee:	|      addq.l #8,sp
   125f0:	|      tst.w d0
   125f2:	|  /-- bne.s 125f8 <builtIn_saveCustomData+0xae>
   125f4:	|  |   moveq #1,d0
   125f6:	+--|-- bra.s 12620 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   125f8:	|  \-> moveq #24,d0
   125fa:	|      add.l 28(sp),d0
   125fe:	|      move.l d0,-(sp)
   12600:	|      jsr 14b32 <trimStack>
   12606:	|      addq.l #4,sp
	FreeVec(fileName);
   12608:	|      move.l 12(sp),4(sp)
   1260e:	|      move.l 1a7a2 <SysBase>,d0
   12614:	|      movea.l d0,a6
   12616:	|      movea.l 4(sp),a1
   1261a:	|      jsr -690(a6)
	return BR_CONTINUE;
   1261e:	|      moveq #2,d0
}
   12620:	\----> movea.l (sp)+,a6
   12622:	       lea 16(sp),sp
   12626:	       rts

00012628 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12628:	       lea -28(sp),sp
   1262c:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   1262e:	       movea.l 40(sp),a0
   12632:	       move.l 24(a0),d0
   12636:	       move.l d0,-(sp)
   12638:	       jsr 14784 <getTextFromAnyVar>
   1263e:	       addq.l #4,sp
   12640:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12644:	   /-- bne.s 1264c <builtIn_loadCustomData+0x24>
   12646:	   |   moveq #1,d0
   12648:	/--|-- bra.w 12748 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   1264c:	|  \-> move.l 28(sp),-(sp)
   12650:	|      jsr 2fe <encodeFilename>
   12656:	|      addq.l #4,sp
   12658:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   1265c:	|      move.l 28(sp),20(sp)
   12662:	|      move.l 1a7a2 <SysBase>,d0
   12668:	|      movea.l d0,a6
   1266a:	|      movea.l 20(sp),a1
   1266e:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12672:	|      move.l 24(sp),-(sp)
   12676:	|      jsr dd6c <failSecurityCheck>
   1267c:	|      addq.l #4,sp
   1267e:	|      tst.w d0
   12680:	|  /-- beq.s 12688 <builtIn_loadCustomData+0x60>
   12682:	|  |   moveq #1,d0
   12684:	+--|-- bra.w 12748 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12688:	|  \-> moveq #24,d0
   1268a:	|      add.l 40(sp),d0
   1268e:	|      move.l d0,-(sp)
   12690:	|      jsr 14b32 <trimStack>
   12696:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12698:	|      moveq #28,d0
   1269a:	|      add.l 40(sp),d0
   1269e:	|      move.l d0,-(sp)
   126a0:	|      jsr 143fc <unlinkVar>
   126a6:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   126a8:	|      movea.l 40(sp),a0
   126ac:	|      moveq #6,d0
   126ae:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   126b2:	|      moveq #12,d0
   126b4:	|      move.l d0,16(sp)
   126b8:	|      clr.l 12(sp)
   126bc:	|      move.l 1a7a2 <SysBase>,d0
   126c2:	|      movea.l d0,a6
   126c4:	|      move.l 16(sp),d0
   126c8:	|      move.l 12(sp),d1
   126cc:	|      jsr -684(a6)
   126d0:	|      move.l d0,8(sp)
   126d4:	|      move.l 8(sp),d0
   126d8:	|      movea.l 40(sp),a0
   126dc:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   126e0:	|      movea.l 40(sp),a0
   126e4:	|      move.l 32(a0),d0
   126e8:	|  /-- bne.s 126ee <builtIn_loadCustomData+0xc6>
   126ea:	|  |   moveq #1,d0
   126ec:	+--|-- bra.s 12748 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   126ee:	|  \-> movea.l 40(sp),a0
   126f2:	|      movea.l 32(a0),a0
   126f6:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   126f8:	|      movea.l 40(sp),a0
   126fc:	|      movea.l 32(a0),a0
   12700:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12704:	|      movea.l 40(sp),a0
   12708:	|      movea.l 32(a0),a0
   1270c:	|      moveq #1,d0
   1270e:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12712:	|      movea.l 40(sp),a0
   12716:	|      move.l 32(a0),d0
   1271a:	|      move.l d0,-(sp)
   1271c:	|      move.l 28(sp),-(sp)
   12720:	|      jsr d3f6 <fileToStack>
   12726:	|      addq.l #8,sp
   12728:	|      tst.w d0
   1272a:	|  /-- bne.s 12730 <builtIn_loadCustomData+0x108>
   1272c:	|  |   moveq #1,d0
   1272e:	+--|-- bra.s 12748 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12730:	|  \-> move.l 24(sp),4(sp)
   12736:	|      move.l 1a7a2 <SysBase>,d0
   1273c:	|      movea.l d0,a6
   1273e:	|      movea.l 4(sp),a1
   12742:	|      jsr -690(a6)
	return BR_CONTINUE;
   12746:	|      moveq #2,d0
}
   12748:	\----> movea.l (sp)+,a6
   1274a:	       lea 28(sp),sp
   1274e:	       rts

00012750 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12750:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12752:	       movea.l 12(sp),a0
   12756:	       move.l 24(a0),d0
   1275a:	       move.l d0,-(sp)
   1275c:	       pea 1 <_start+0x1>
   12760:	       move.l sp,d0
   12762:	       addq.l #8,d0
   12764:	       move.l d0,-(sp)
   12766:	       jsr 141ae <getValueType>
   1276c:	       lea 12(sp),sp
   12770:	       tst.w d0
   12772:	   /-- bne.s 12778 <builtIn_setCustomEncoding+0x28>
   12774:	   |   moveq #1,d0
   12776:	/--|-- bra.s 127ae <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12778:	|  \-> move.l (sp),d0
   1277a:	|      move.l d0,d0
   1277c:	|      move.w d0,1a8b2 <saveEncoding>
	trimStack (&fun -> stack);
   12782:	|      moveq #24,d0
   12784:	|      add.l 12(sp),d0
   12788:	|      move.l d0,-(sp)
   1278a:	|      jsr 14b32 <trimStack>
   12790:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12792:	|      moveq #28,d0
   12794:	|      add.l 12(sp),d0
   12798:	|      pea 1 <_start+0x1>
   1279c:	|      pea 1 <_start+0x1>
   127a0:	|      move.l d0,-(sp)
   127a2:	|      jsr 14aa0 <setVariable>
   127a8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   127ac:	|      moveq #2,d0
}
   127ae:	\----> addq.l #4,sp
   127b0:	       rts

000127b2 <builtIn_freeSound>:

builtIn(freeSound)
{
   127b2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   127b4:	       movea.l 12(sp),a0
   127b8:	       move.l 24(a0),d0
   127bc:	       move.l d0,-(sp)
   127be:	       pea 5 <_start+0x5>
   127c2:	       move.l sp,d0
   127c4:	       addq.l #8,d0
   127c6:	       move.l d0,-(sp)
   127c8:	       jsr 141ae <getValueType>
   127ce:	       lea 12(sp),sp
   127d2:	       tst.w d0
   127d4:	   /-- bne.s 127da <builtIn_freeSound+0x28>
   127d6:	   |   moveq #1,d0
   127d8:	/--|-- bra.s 127f8 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   127da:	|  \-> moveq #24,d0
   127dc:	|      add.l 12(sp),d0
   127e0:	|      move.l d0,-(sp)
   127e2:	|      jsr 14b32 <trimStack>
   127e8:	|      addq.l #4,sp
	huntKillFreeSound (v);
   127ea:	|      move.l (sp),d0
   127ec:	|      move.l d0,-(sp)
   127ee:	|      jsr cbb8 <huntKillFreeSound>
   127f4:	|      addq.l #4,sp
	return BR_CONTINUE;
   127f6:	|      moveq #2,d0
}
   127f8:	\----> addq.l #4,sp
   127fa:	       rts

000127fc <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   127fc:	       lea -12(sp),sp
   12800:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12802:	       movea.l 24(sp),a0
   12806:	       move.l 24(a0),d0
   1280a:	       move.l d0,-(sp)
   1280c:	       pea 1 <_start+0x1>
   12810:	       moveq #16,d0
   12812:	       add.l sp,d0
   12814:	       move.l d0,-(sp)
   12816:	       jsr 141ae <getValueType>
   1281c:	       lea 12(sp),sp
   12820:	       tst.w d0
   12822:	   /-- bne.s 1282a <builtIn_parallaxAdd+0x2e>
   12824:	   |   moveq #1,d0
   12826:	/--|-- bra.w 128fe <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1282a:	|  \-> moveq #24,d0
   1282c:	|      add.l 24(sp),d0
   12830:	|      move.l d0,-(sp)
   12832:	|      jsr 14b32 <trimStack>
   12838:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1283a:	|      movea.l 24(sp),a0
   1283e:	|      move.l 24(a0),d0
   12842:	|      move.l d0,-(sp)
   12844:	|      pea 1 <_start+0x1>
   12848:	|      moveq #20,d0
   1284a:	|      add.l sp,d0
   1284c:	|      move.l d0,-(sp)
   1284e:	|      jsr 141ae <getValueType>
   12854:	|      lea 12(sp),sp
   12858:	|      tst.w d0
   1285a:	|  /-- bne.s 12862 <builtIn_parallaxAdd+0x66>
   1285c:	|  |   moveq #1,d0
   1285e:	+--|-- bra.w 128fe <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12862:	|  \-> moveq #24,d0
   12864:	|      add.l 24(sp),d0
   12868:	|      move.l d0,-(sp)
   1286a:	|      jsr 14b32 <trimStack>
   12870:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12872:	|      movea.l 24(sp),a0
   12876:	|      move.l 24(a0),d0
   1287a:	|      move.l d0,-(sp)
   1287c:	|      pea 5 <_start+0x5>
   12880:	|      lea 12(sp),a0
   12884:	|      move.l a0,-(sp)
   12886:	|      jsr 141ae <getValueType>
   1288c:	|      lea 12(sp),sp
   12890:	|      tst.w d0
   12892:	|  /-- bne.s 12898 <builtIn_parallaxAdd+0x9c>
   12894:	|  |   moveq #1,d0
   12896:	+--|-- bra.s 128fe <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12898:	|  \-> moveq #24,d0
   1289a:	|      add.l 24(sp),d0
   1289e:	|      move.l d0,-(sp)
   128a0:	|      jsr 14b32 <trimStack>
   128a6:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   128a8:	|      move.l 8(sp),d0
   128ac:	|      move.l d0,d0
   128ae:	|      moveq #0,d2
   128b0:	|      move.w d0,d2
   128b2:	|      move.l 12(sp),d0
   128b6:	|      move.l d0,d0
   128b8:	|      moveq #0,d1
   128ba:	|      move.w d0,d1
   128bc:	|      move.l 4(sp),d0
   128c0:	|      move.l d0,d0
   128c2:	|      move.w d0,d0
   128c4:	|      andi.l #65535,d0
   128ca:	|      move.l d2,-(sp)
   128cc:	|      move.l d1,-(sp)
   128ce:	|      move.l d0,-(sp)
   128d0:	|      jsr cdd4 <loadParallax>
   128d6:	|      lea 12(sp),sp
   128da:	|      tst.w d0
   128dc:	|  /-- bne.s 128e2 <builtIn_parallaxAdd+0xe6>
   128de:	|  |   moveq #1,d0
   128e0:	+--|-- bra.s 128fe <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   128e2:	|  \-> moveq #28,d0
   128e4:	|      add.l 24(sp),d0
   128e8:	|      pea 1 <_start+0x1>
   128ec:	|      pea 1 <_start+0x1>
   128f0:	|      move.l d0,-(sp)
   128f2:	|      jsr 14aa0 <setVariable>
   128f8:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   128fc:	|      moveq #2,d0
}
   128fe:	\----> move.l (sp)+,d2
   12900:	       lea 12(sp),sp
   12904:	       rts

00012906 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12906:	jsr cd0c <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   1290c:	moveq #28,d0
   1290e:	add.l 8(sp),d0
   12912:	pea 1 <_start+0x1>
   12916:	pea 1 <_start+0x1>
   1291a:	move.l d0,-(sp)
   1291c:	jsr 14aa0 <setVariable>
   12922:	lea 12(sp),sp
	return BR_CONTINUE;
   12926:	moveq #2,d0
}
   12928:	rts

0001292a <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   1292a:	pea 195fb <newfatal.c.307beca7+0x1c>
   12930:	jsr 16bac <KPrintF>
   12936:	addq.l #4,sp

	return BR_CONTINUE;
   12938:	moveq #2,d0
}
   1293a:	rts

0001293c <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   1293c:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   1293e:	             movea.l 16(sp),a0
   12942:	             movea.l 24(a0),a0
   12946:	             move.l (a0),d0
   12948:	             moveq #1,d1
   1294a:	             cmp.l d0,d1
   1294c:	      /----- beq.s 12994 <builtIn_makeFastArray+0x58>
   1294e:	      |      moveq #6,d1
   12950:	      |      cmp.l d0,d1
   12952:	/-----|----- bne.s 129d2 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12954:	|     |      movea.l 16(sp),a0
   12958:	|     |      movea.l 24(a0),a0
   1295c:	|     |      move.l 4(a0),d1
   12960:	|     |      moveq #28,d0
   12962:	|     |      add.l 16(sp),d0
   12966:	|     |      move.l d1,-(sp)
   12968:	|     |      move.l d0,-(sp)
   1296a:	|     |      jsr 14260 <makeFastArrayFromStack>
   12970:	|     |      addq.l #8,sp
   12972:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12976:	|     |      moveq #24,d0
   12978:	|     |      add.l 16(sp),d0
   1297c:	|     |      move.l d0,-(sp)
   1297e:	|     |      jsr 14b32 <trimStack>
   12984:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12986:	|     |      tst.w 6(sp)
   1298a:	|     |  /-- beq.s 12990 <builtIn_makeFastArray+0x54>
   1298c:	|     |  |   moveq #2,d0
   1298e:	|  /--|--|-- bra.s 129e4 <builtIn_makeFastArray+0xa8>
   12990:	|  |  |  \-> moveq #1,d0
   12992:	|  +--|----- bra.s 129e4 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12994:	|  |  \----> movea.l 16(sp),a0
   12998:	|  |         movea.l 24(a0),a0
   1299c:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   129a2:	|  |         moveq #24,d0
   129a4:	|  |         add.l 16(sp),d0
   129a8:	|  |         move.l d0,-(sp)
   129aa:	|  |         jsr 14b32 <trimStack>
   129b0:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   129b2:	|  |         moveq #28,d0
   129b4:	|  |         add.l 16(sp),d0
   129b8:	|  |         move.l 2(sp),-(sp)
   129bc:	|  |         move.l d0,-(sp)
   129be:	|  |         jsr 142ca <makeFastArraySize>
   129c4:	|  |         addq.l #8,sp
   129c6:	|  |         tst.w d0
   129c8:	|  |     /-- beq.s 129ce <builtIn_makeFastArray+0x92>
   129ca:	|  |     |   moveq #2,d0
   129cc:	|  +-----|-- bra.s 129e4 <builtIn_makeFastArray+0xa8>
   129ce:	|  |     \-> moveq #1,d0
   129d0:	|  +-------- bra.s 129e4 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   129d2:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   129d4:	   |         pea 19624 <newfatal.c.307beca7+0x45>
   129da:	   |         jsr 16bac <KPrintF>
   129e0:	   |         addq.l #4,sp
	return BR_ERROR;
   129e2:	   |         moveq #1,d0
}
   129e4:	   \-------> addq.l #8,sp
   129e6:	             rts

000129e8 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   129e8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   129ea:	          movea.l 16(sp),a0
   129ee:	          move.l 24(a0),d0
   129f2:	          move.l d0,-(sp)
   129f4:	          pea 7 <_start+0x7>
   129f8:	          move.l sp,d0
   129fa:	          addq.l #8,d0
   129fc:	          move.l d0,-(sp)
   129fe:	          jsr 141ae <getValueType>
   12a04:	          lea 12(sp),sp
   12a08:	          tst.w d0
   12a0a:	      /-- bne.s 12a10 <builtIn_getCharacterScale+0x28>
   12a0c:	      |   moveq #1,d0
   12a0e:	/-----|-- bra.s 12a8a <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12a10:	|     \-> moveq #24,d0
   12a12:	|         add.l 16(sp),d0
   12a16:	|         move.l d0,-(sp)
   12a18:	|         jsr 14b32 <trimStack>
   12a1e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12a20:	|         move.l (sp),d0
   12a22:	|         move.l d0,-(sp)
   12a24:	|         jsr a0a6 <findPerson>
   12a2a:	|         addq.l #4,sp
   12a2c:	|         move.l d0,4(sp)
	if (pers) {
   12a30:	|  /----- beq.s 12a70 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12a32:	|  |      movea.l 4(sp),a0
   12a36:	|  |      move.l 32(a0),d0
   12a3a:	|  |      move.l #1120403456,-(sp)
   12a40:	|  |      move.l d0,-(sp)
   12a42:	|  |      jsr 1709a <__mulsf3>
   12a48:	|  |      addq.l #8,sp
   12a4a:	|  |      move.l d0,-(sp)
   12a4c:	|  |      jsr 16f80 <__fixsfsi>
   12a52:	|  |      addq.l #4,sp
   12a54:	|  |      move.l d0,d1
   12a56:	|  |      moveq #28,d0
   12a58:	|  |      add.l 16(sp),d0
   12a5c:	|  |      move.l d1,-(sp)
   12a5e:	|  |      pea 1 <_start+0x1>
   12a62:	|  |      move.l d0,-(sp)
   12a64:	|  |      jsr 14aa0 <setVariable>
   12a6a:	|  |      lea 12(sp),sp
   12a6e:	|  |  /-- bra.s 12a88 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a70:	|  \--|-> moveq #28,d0
   12a72:	|     |   add.l 16(sp),d0
   12a76:	|     |   clr.l -(sp)
   12a78:	|     |   pea 1 <_start+0x1>
   12a7c:	|     |   move.l d0,-(sp)
   12a7e:	|     |   jsr 14aa0 <setVariable>
   12a84:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12a88:	|     \-> moveq #2,d0
}
   12a8a:	\-------> addq.l #8,sp
   12a8c:	          rts

00012a8e <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12a8e:	move.l 1a8d6 <gameSettings>,d0
   12a94:	move.l d0,d1
   12a96:	moveq #28,d0
   12a98:	add.l 8(sp),d0
   12a9c:	move.l d1,-(sp)
   12a9e:	pea 1 <_start+0x1>
   12aa2:	move.l d0,-(sp)
   12aa4:	jsr 14aa0 <setVariable>
   12aaa:	lea 12(sp),sp
	return BR_CONTINUE;
   12aae:	moveq #2,d0
}
   12ab0:	rts

00012ab2 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12ab2:	moveq #24,d0
   12ab4:	add.l 8(sp),d0
   12ab8:	move.l d0,-(sp)
   12aba:	jsr 14b32 <trimStack>
   12ac0:	addq.l #4,sp
	trimStack (&fun -> stack);
   12ac2:	moveq #24,d0
   12ac4:	add.l 8(sp),d0
   12ac8:	move.l d0,-(sp)
   12aca:	jsr 14b32 <trimStack>
   12ad0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12ad2:	moveq #28,d0
   12ad4:	add.l 8(sp),d0
   12ad8:	clr.l -(sp)
   12ada:	pea 1 <_start+0x1>
   12ade:	move.l d0,-(sp)
   12ae0:	jsr 14aa0 <setVariable>
   12ae6:	lea 12(sp),sp

	return BR_CONTINUE;
   12aea:	moveq #2,d0

}
   12aec:	rts

00012aee <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12aee:	move.l 1a124 <lastFramesPerSecond>,d1
   12af4:	moveq #28,d0
   12af6:	add.l 8(sp),d0
   12afa:	move.l d1,-(sp)
   12afc:	pea 1 <_start+0x1>
   12b00:	move.l d0,-(sp)
   12b02:	jsr 14aa0 <setVariable>
   12b08:	lea 12(sp),sp
	return BR_CONTINUE;
   12b0c:	moveq #2,d0
}
   12b0e:	rts

00012b10 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12b10:	moveq #2,d0
}
   12b12:	rts

00012b14 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   12b14:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b18:	          movea.l 60(sp),a0
   12b1c:	          move.l 24(a0),d0
   12b20:	          move.l d0,-(sp)
   12b22:	          pea 1 <_start+0x1>
   12b26:	          pea 1a6ba <thumbHeight>
   12b2c:	          jsr 141ae <getValueType>
   12b32:	          lea 12(sp),sp
   12b36:	          tst.w d0
   12b38:	      /-- bne.s 12b40 <builtIn_setThumbnailSize+0x2c>
   12b3a:	      |   moveq #1,d0
   12b3c:	/-----|-- bra.w 12bfc <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12b40:	|     \-> moveq #24,d0
   12b42:	|         add.l 60(sp),d0
   12b46:	|         move.l d0,-(sp)
   12b48:	|         jsr 14b32 <trimStack>
   12b4e:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b50:	|         movea.l 60(sp),a0
   12b54:	|         move.l 24(a0),d0
   12b58:	|         move.l d0,-(sp)
   12b5a:	|         pea 1 <_start+0x1>
   12b5e:	|         pea 1a6b6 <thumbWidth>
   12b64:	|         jsr 141ae <getValueType>
   12b6a:	|         lea 12(sp),sp
   12b6e:	|         tst.w d0
   12b70:	|     /-- bne.s 12b78 <builtIn_setThumbnailSize+0x64>
   12b72:	|     |   moveq #1,d0
   12b74:	+-----|-- bra.w 12bfc <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12b78:	|     \-> moveq #24,d0
   12b7a:	|         add.l 60(sp),d0
   12b7e:	|         move.l d0,-(sp)
   12b80:	|         jsr 14b32 <trimStack>
   12b86:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   12b88:	|         move.l 1a6b6 <thumbWidth>,d0
   12b8e:	|     /-- bmi.s 12bbc <builtIn_setThumbnailSize+0xa8>
   12b90:	|     |   move.l 1a6ba <thumbHeight>,d0
   12b96:	|     +-- bmi.s 12bbc <builtIn_setThumbnailSize+0xa8>
   12b98:	|     |   move.l 1a6b6 <thumbWidth>,d0
   12b9e:	|     |   move.l d0,d1
   12ba0:	|     |   move.l 1a6f6 <winWidth>,d0
   12ba6:	|     |   cmp.l d1,d0
   12ba8:	|     +-- bcs.s 12bbc <builtIn_setThumbnailSize+0xa8>
   12baa:	|     |   move.l 1a6ba <thumbHeight>,d0
   12bb0:	|     |   move.l d0,d1
   12bb2:	|     |   move.l 1a6fa <winHeight>,d0
   12bb8:	|     |   cmp.l d1,d0
   12bba:	|  /--|-- bcc.s 12bfa <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   12bbc:	|  |  \-> move.l 1a6ba <thumbHeight>,d1
   12bc2:	|  |      move.l 1a6b6 <thumbWidth>,d0
   12bc8:	|  |      move.l d1,-(sp)
   12bca:	|  |      move.l d0,-(sp)
   12bcc:	|  |      pea 1964b <newfatal.c.307beca7+0x6c>
   12bd2:	|  |      lea 14(sp),a0
   12bd6:	|  |      move.l a0,-(sp)
   12bd8:	|  |      jsr 139b8 <sprintf>
   12bde:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   12be2:	|  |      lea 2(sp),a0
   12be6:	|  |      move.l a0,-(sp)
   12be8:	|  |      pea 19653 <newfatal.c.307beca7+0x74>
   12bee:	|  |      jsr 16bac <KPrintF>
   12bf4:	|  |      addq.l #8,sp
		return BR_ERROR;
   12bf6:	|  |      moveq #1,d0
   12bf8:	+--|----- bra.s 12bfc <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   12bfa:	|  \----> moveq #2,d0
}
   12bfc:	\-------> lea 52(sp),sp
   12c00:	          rts

00012c02 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   12c02:	       lea -12(sp),sp
   12c06:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c08:	       movea.l 24(sp),a0
   12c0c:	       move.l 24(a0),d0
   12c10:	       move.l d0,-(sp)
   12c12:	       pea 1 <_start+0x1>
   12c16:	       lea 12(sp),a0
   12c1a:	       move.l a0,-(sp)
   12c1c:	       jsr 141ae <getValueType>
   12c22:	       lea 12(sp),sp
   12c26:	       tst.w d0
   12c28:	   /-- bne.s 12c30 <builtIn_hasFlag+0x2e>
   12c2a:	   |   moveq #1,d0
   12c2c:	/--|-- bra.w 12cc0 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12c30:	|  \-> moveq #24,d0
   12c32:	|      add.l 24(sp),d0
   12c36:	|      move.l d0,-(sp)
   12c38:	|      jsr 14b32 <trimStack>
   12c3e:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12c40:	|      movea.l 24(sp),a0
   12c44:	|      move.l 24(a0),d0
   12c48:	|      move.l d0,-(sp)
   12c4a:	|      pea 7 <_start+0x7>
   12c4e:	|      moveq #16,d0
   12c50:	|      add.l sp,d0
   12c52:	|      move.l d0,-(sp)
   12c54:	|      jsr 141ae <getValueType>
   12c5a:	|      lea 12(sp),sp
   12c5e:	|      tst.w d0
   12c60:	|  /-- bne.s 12c66 <builtIn_hasFlag+0x64>
   12c62:	|  |   moveq #1,d0
   12c64:	+--|-- bra.s 12cc0 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12c66:	|  \-> moveq #24,d0
   12c68:	|      add.l 24(sp),d0
   12c6c:	|      move.l d0,-(sp)
   12c6e:	|      jsr 14b32 <trimStack>
   12c74:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   12c76:	|      move.l 8(sp),d0
   12c7a:	|      move.l d0,-(sp)
   12c7c:	|      jsr cf80 <findObjectType>
   12c82:	|      addq.l #4,sp
   12c84:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   12c88:	|  /-- bne.s 12c8e <builtIn_hasFlag+0x8c>
   12c8a:	|  |   moveq #1,d0
   12c8c:	+--|-- bra.s 12cc0 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   12c8e:	|  \-> movea.l 12(sp),a0
   12c92:	|      move.w 36(a0),d0
   12c96:	|      moveq #0,d2
   12c98:	|      move.w d0,d2
   12c9a:	|      move.l 4(sp),d1
   12c9e:	|      moveq #1,d0
   12ca0:	|      lsl.l d1,d0
   12ca2:	|      move.l d2,d1
   12ca4:	|      and.l d0,d1
   12ca6:	|      moveq #28,d0
   12ca8:	|      add.l 24(sp),d0
   12cac:	|      move.l d1,-(sp)
   12cae:	|      pea 1 <_start+0x1>
   12cb2:	|      move.l d0,-(sp)
   12cb4:	|      jsr 14aa0 <setVariable>
   12cba:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12cbe:	|      moveq #2,d0
}
   12cc0:	\----> move.l (sp)+,d2
   12cc2:	       lea 12(sp),sp
   12cc6:	       rts

00012cc8 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   12cc8:	       jsr cf6e <snapshot>
   12cce:	       tst.w d0
   12cd0:	/----- beq.s 12cd6 <builtIn_snapshotGrab+0xe>
   12cd2:	|      moveq #2,d0
   12cd4:	|  /-- bra.s 12cd8 <builtIn_snapshotGrab+0x10>
   12cd6:	\--|-> moveq #1,d0
}
   12cd8:	   \-> rts

00012cda <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   12cda:	jsr ce1a <nosnapshot>
	return BR_CONTINUE;
   12ce0:	moveq #2,d0
}
   12ce2:	rts

00012ce4 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   12ce4:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   12ce6:	move.w 1a000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   12cee:	movea.l 12(sp),a0
   12cf2:	move.l 24(a0),d0
   12cf6:	move.l d0,-(sp)
   12cf8:	jsr 146ee <getBoolean>
   12cfe:	addq.l #4,sp
   12d00:	move.w d0,1a000 <allowAnyFilename>
	trimStack (&fun -> stack);
   12d06:	moveq #24,d0
   12d08:	add.l 12(sp),d0
   12d0c:	move.l d0,-(sp)
   12d0e:	jsr 14b32 <trimStack>
   12d14:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   12d16:	movea.w 2(sp),a0
   12d1a:	moveq #28,d0
   12d1c:	add.l 12(sp),d0
   12d20:	move.l a0,-(sp)
   12d22:	pea 1 <_start+0x1>
   12d26:	move.l d0,-(sp)
   12d28:	jsr 14aa0 <setVariable>
   12d2e:	lea 12(sp),sp
	return BR_CONTINUE;
   12d32:	moveq #2,d0
}
   12d34:	addq.l #4,sp
   12d36:	rts

00012d38 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12d38:	moveq #24,d0
   12d3a:	add.l 8(sp),d0
   12d3e:	move.l d0,-(sp)
   12d40:	jsr 14b32 <trimStack>
   12d46:	addq.l #4,sp
	trimStack (&fun -> stack);
   12d48:	moveq #24,d0
   12d4a:	add.l 8(sp),d0
   12d4e:	move.l d0,-(sp)
   12d50:	jsr 14b32 <trimStack>
   12d56:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   12d58:	moveq #28,d0
   12d5a:	add.l 8(sp),d0
   12d5e:	clr.l -(sp)
   12d60:	pea 1 <_start+0x1>
   12d64:	move.l d0,-(sp)
   12d66:	jsr 14aa0 <setVariable>
   12d6c:	lea 12(sp),sp

	return BR_CONTINUE;
   12d70:	moveq #2,d0
}
   12d72:	rts

00012d74 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   12d74:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   12d76:	movea.l 12(sp),a0
   12d7a:	move.l 24(a0),d0
   12d7e:	move.l d0,-(sp)
   12d80:	jsr 14784 <getTextFromAnyVar>
   12d86:	addq.l #4,sp
   12d88:	move.l d0,(sp)
	trimStack (&fun -> stack);
   12d8a:	moveq #24,d0
   12d8c:	add.l 12(sp),d0
   12d90:	move.l d0,-(sp)
   12d92:	jsr 14b32 <trimStack>
   12d98:	addq.l #4,sp
	KPrintF (mess);
   12d9a:	move.l (sp),-(sp)
   12d9c:	jsr 16bac <KPrintF>
   12da2:	addq.l #4,sp
	return BR_ERROR;
   12da4:	moveq #1,d0
}
   12da6:	addq.l #4,sp
   12da8:	rts

00012daa <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12daa:	moveq #24,d0
   12dac:	add.l 8(sp),d0
   12db0:	move.l d0,-(sp)
   12db2:	jsr 14b32 <trimStack>
   12db8:	addq.l #4,sp
	trimStack (&fun -> stack);
   12dba:	moveq #24,d0
   12dbc:	add.l 8(sp),d0
   12dc0:	move.l d0,-(sp)
   12dc2:	jsr 14b32 <trimStack>
   12dc8:	addq.l #4,sp
	trimStack (&fun -> stack);
   12dca:	moveq #24,d0
   12dcc:	add.l 8(sp),d0
   12dd0:	move.l d0,-(sp)
   12dd2:	jsr 14b32 <trimStack>
   12dd8:	addq.l #4,sp
	trimStack (&fun -> stack);
   12dda:	moveq #24,d0
   12ddc:	add.l 8(sp),d0
   12de0:	move.l d0,-(sp)
   12de2:	jsr 14b32 <trimStack>
   12de8:	addq.l #4,sp

	return BR_CONTINUE;
   12dea:	moveq #2,d0
}
   12dec:	rts

00012dee <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12dee:	moveq #24,d0
   12df0:	add.l 8(sp),d0
   12df4:	move.l d0,-(sp)
   12df6:	jsr 14b32 <trimStack>
   12dfc:	addq.l #4,sp
	trimStack (&fun -> stack);
   12dfe:	moveq #24,d0
   12e00:	add.l 8(sp),d0
   12e04:	move.l d0,-(sp)
   12e06:	jsr 14b32 <trimStack>
   12e0c:	addq.l #4,sp
	trimStack (&fun -> stack);
   12e0e:	moveq #24,d0
   12e10:	add.l 8(sp),d0
   12e14:	move.l d0,-(sp)
   12e16:	jsr 14b32 <trimStack>
   12e1c:	addq.l #4,sp

	return BR_CONTINUE;
   12e1e:	moveq #2,d0

}
   12e20:	rts

00012e22 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   12e22:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   12e24:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   12e2a:	sne d0
   12e2c:	neg.b d0
   12e2e:	moveq #0,d1
   12e30:	move.b d0,d1
   12e32:	moveq #28,d0
   12e34:	add.l 12(sp),d0
   12e38:	move.l d1,-(sp)
   12e3a:	pea 1 <_start+0x1>
   12e3e:	move.l d0,-(sp)
   12e40:	jsr 14aa0 <setVariable>
   12e46:	lea 12(sp),sp
	return BR_CONTINUE;
   12e4a:	moveq #2,d0
}
   12e4c:	addq.l #4,sp
   12e4e:	rts

00012e50 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   12e50:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   12e52:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   12e58:	pea 1966a <newfatal.c.307beca7+0x8b>
   12e5e:	jsr 16bac <KPrintF>
   12e64:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   12e66:	tst.w 2(sp)
   12e6a:	sne d0
   12e6c:	neg.b d0
   12e6e:	moveq #0,d1
   12e70:	move.b d0,d1
   12e72:	moveq #28,d0
   12e74:	add.l 12(sp),d0
   12e78:	move.l d1,-(sp)
   12e7a:	pea 1 <_start+0x1>
   12e7e:	move.l d0,-(sp)
   12e80:	jsr 14aa0 <setVariable>
   12e86:	lea 12(sp),sp
	return BR_CONTINUE;
   12e8a:	moveq #2,d0
}
   12e8c:	addq.l #4,sp
   12e8e:	rts

00012e90 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   12e90:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   12e94:	             move.l 104(sp),d0
   12e98:	             cmpi.l #166,d0
   12e9e:	/----------- bhi.w 12f80 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   12ea2:	|            move.l 104(sp),d0
   12ea6:	|            add.l d0,d0
   12ea8:	|            movea.l d0,a1
   12eaa:	|            adda.l d0,a1
   12eac:	|            lea 1a146 <paramNum>,a0
   12eb2:	|            move.l (0,a1,a0.l),d0
   12eb6:	|            moveq #-1,d1
   12eb8:	|            cmp.l d0,d1
   12eba:	|  /-------- beq.w 12f48 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   12ebe:	|  |         move.l 104(sp),d0
   12ec2:	|  |         add.l d0,d0
   12ec4:	|  |         movea.l d0,a1
   12ec6:	|  |         adda.l d0,a1
   12ec8:	|  |         lea 1a146 <paramNum>,a0
   12ece:	|  |         move.l (0,a1,a0.l),d0
   12ed2:	|  |         cmp.l 108(sp),d0
   12ed6:	|  +-------- beq.s 12f48 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   12ed8:	|  |         move.l 104(sp),d0
   12edc:	|  |         add.l d0,d0
   12ede:	|  |         movea.l d0,a1
   12ee0:	|  |         adda.l d0,a1
   12ee2:	|  |         lea 1a146 <paramNum>,a0
   12ee8:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   12eec:	|  |         moveq #1,d1
   12eee:	|  |         cmp.l d0,d1
   12ef0:	|  |  /----- bne.s 12efa <callBuiltIn+0x6a>
   12ef2:	|  |  |      move.l #99057,d0
   12ef8:	|  |  |  /-- bra.s 12f00 <callBuiltIn+0x70>
   12efa:	|  |  \--|-> move.l #104096,d0
   12f00:	|  |     \-> move.l 104(sp),d1
   12f04:	|  |         add.l d1,d1
   12f06:	|  |         movea.l d1,a1
   12f08:	|  |         adda.l d1,a1
   12f0a:	|  |         lea 1a146 <paramNum>,a0
   12f10:	|  |         move.l (0,a1,a0.l),d1
   12f14:	|  |         move.l d0,-(sp)
   12f16:	|  |         move.l d1,-(sp)
   12f18:	|  |         pea 196a2 <newfatal.c.307beca7+0xc3>
   12f1e:	|  |         lea 12(sp),a0
   12f22:	|  |         move.l a0,-(sp)
   12f24:	|  |         jsr 139b8 <sprintf>
   12f2a:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   12f2e:	|  |         movea.l sp,a0
   12f30:	|  |         move.l a0,-(sp)
   12f32:	|  |         jsr b8 <copyString>
   12f38:	|  |         addq.l #4,sp
   12f3a:	|  |         move.l d0,-(sp)
   12f3c:	|  |         jsr 16bac <KPrintF>
   12f42:	|  |         addq.l #4,sp
				return BR_ERROR;
   12f44:	|  |         moveq #1,d0
   12f46:	|  |     /-- bra.s 12f90 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   12f48:	|  \-----|-> move.l 104(sp),d0
   12f4c:	|        |   add.l d0,d0
   12f4e:	|        |   movea.l d0,a1
   12f50:	|        |   adda.l d0,a1
   12f52:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   12f58:	|        |   move.l (0,a1,a0.l),d0
   12f5c:	+--------|-- beq.s 12f80 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   12f5e:	|        |   move.l 104(sp),d0
   12f62:	|        |   add.l d0,d0
   12f64:	|        |   movea.l d0,a1
   12f66:	|        |   adda.l d0,a1
   12f68:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   12f6e:	|        |   movea.l (0,a1,a0.l),a0
   12f72:	|        |   move.l 112(sp),-(sp)
   12f76:	|        |   move.l 112(sp),-(sp)
   12f7a:	|        |   jsr (a0)
   12f7c:	|        |   addq.l #8,sp
   12f7e:	|        +-- bra.s 12f90 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   12f80:	\--------|-> pea 196cd <newfatal.c.307beca7+0xee>
   12f86:	         |   jsr 16bac <KPrintF>
   12f8c:	         |   addq.l #4,sp
	return BR_ERROR;
   12f8e:	         |   moveq #1,d0
}
   12f90:	         \-> lea 100(sp),sp
   12f94:	             rts

00012f96 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   12f96:	          subq.l #8,sp
	int indexNum = -1;
   12f98:	          moveq #-1,d0
   12f9a:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12f9e:	          clr.l (sp)
   12fa0:	   /----- bra.s 12fc6 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   12fa2:	/--|----> move.l 1a8ce <languageTable>,d1
   12fa8:	|  |      move.l (sp),d0
   12faa:	|  |      add.l d0,d0
   12fac:	|  |      add.l d0,d0
   12fae:	|  |      movea.l d1,a0
   12fb0:	|  |      adda.l d0,a0
   12fb2:	|  |      move.l (a0),d0
   12fb4:	|  |      move.l d0,d1
   12fb6:	|  |      move.l 1a8d6 <gameSettings>,d0
   12fbc:	|  |      cmp.l d1,d0
   12fbe:	|  |  /-- bne.s 12fc4 <getLanguageForFileB+0x2e>
   12fc0:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12fc4:	|  |  \-> addq.l #1,(sp)
   12fc6:	|  \----> move.l 1a8da <gameSettings+0x4>,d0
   12fcc:	|         cmp.l (sp),d0
   12fce:	\-------- bcc.s 12fa2 <getLanguageForFileB+0xc>
	}

	return indexNum;
   12fd0:	          move.l 4(sp),d0
}
   12fd4:	          addq.l #8,sp
   12fd6:	          rts

00012fd8 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   12fd8:	          lea -20(sp),sp
   12fdc:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   12fde:	          move.l 28(sp),-(sp)
   12fe2:	          jsr 1369a <strlen>
   12fe8:	          addq.l #4,sp
   12fea:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   12fee:	          moveq #4,d0
   12ff0:	          cmp.l 12(sp),d0
   12ff4:	      /-- bge.s 13018 <getPrefsFilename+0x40>
   12ff6:	      |   move.l 12(sp),d0
   12ffa:	      |   subq.l #4,d0
   12ffc:	      |   movea.l 28(sp),a0
   13000:	      |   adda.l d0,a0
   13002:	      |   move.b (a0),d0
   13004:	      |   cmpi.b #46,d0
   13008:	      +-- bne.s 13018 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1300a:	      |   move.l 12(sp),d0
   1300e:	      |   subq.l #4,d0
   13010:	      |   movea.l 28(sp),a0
   13014:	      |   adda.l d0,a0
   13016:	      |   clr.b (a0)
	}

	char * f = filename;
   13018:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1301e:	          clr.l 20(sp)
   13022:	   /----- bra.s 1304a <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13024:	/--|----> move.l 20(sp),d0
   13028:	|  |      movea.l 28(sp),a0
   1302c:	|  |      adda.l d0,a0
   1302e:	|  |      move.b (a0),d0
   13030:	|  |      cmpi.b #47,d0
   13034:	|  |  /-- bne.s 13046 <getPrefsFilename+0x6e>
   13036:	|  |  |   move.l 20(sp),d0
   1303a:	|  |  |   addq.l #1,d0
   1303c:	|  |  |   move.l 28(sp),d1
   13040:	|  |  |   add.l d0,d1
   13042:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13046:	|  |  \-> addq.l #1,20(sp)
   1304a:	|  \----> move.l 20(sp),d0
   1304e:	|         cmp.l 12(sp),d0
   13052:	\-------- blt.s 13024 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13054:	          pea 196f8 <newfatal.c.307beca7+0x119>
   1305a:	          move.l 20(sp),-(sp)
   1305e:	          jsr 136da <joinStrings>
   13064:	          addq.l #8,sp
   13066:	          move.l d0,8(sp)

	FreeVec(filename);
   1306a:	          move.l 28(sp),4(sp)
   13070:	          move.l 1a7a2 <SysBase>,d0
   13076:	          movea.l d0,a6
   13078:	          movea.l 4(sp),a1
   1307c:	          jsr -690(a6)
	filename = NULL;
   13080:	          clr.l 28(sp)
	return joined;
   13084:	          move.l 8(sp),d0
}
   13088:	          movea.l (sp)+,a6
   1308a:	          lea 20(sp),sp
   1308e:	          rts

00013090 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   13090:	             lea -28(sp),sp
   13094:	             move.l a6,-(sp)
   13096:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13098:	             move.l 1a8da <gameSettings+0x4>,d0
   1309e:	             move.l d0,d1
   130a0:	             addq.l #1,d1
   130a2:	             move.l d1,28(sp)
   130a6:	             clr.l 24(sp)
   130aa:	             move.l 1a7a2 <SysBase>,d0
   130b0:	             movea.l d0,a6
   130b2:	             move.l 28(sp),d0
   130b6:	             move.l 24(sp),d1
   130ba:	             jsr -684(a6)
   130be:	             move.l d0,20(sp)
   130c2:	             move.l 20(sp),d0
   130c6:	             move.l d0,1a8ce <languageTable>
    if( languageTable == 0) {
   130cc:	             move.l 1a8ce <languageTable>,d0
   130d2:	         /-- bne.s 130e2 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   130d4:	         |   pea 196fd <newfatal.c.307beca7+0x11e>
   130da:	         |   jsr 16bac <KPrintF>
   130e0:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   130e2:	         \-> move.l 1a8da <gameSettings+0x4>,d0
   130e8:	             move.l d0,d1
   130ea:	             addq.l #1,d1
   130ec:	             move.l d1,16(sp)
   130f0:	             clr.l 12(sp)
   130f4:	             move.l 1a7a2 <SysBase>,d0
   130fa:	             movea.l d0,a6
   130fc:	             move.l 16(sp),d0
   13100:	             move.l 12(sp),d1
   13104:	             jsr -684(a6)
   13108:	             move.l d0,8(sp)
   1310c:	             move.l 8(sp),d0
   13110:	             move.l d0,1a8d2 <languageName>
	if( languageName == 0) {
   13116:	             move.l 1a8d2 <languageName>,d0
   1311c:	         /-- bne.s 1312c <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1311e:	         |   pea 19733 <newfatal.c.307beca7+0x154>
   13124:	         |   jsr 16bac <KPrintF>
   1312a:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1312c:	         \-> clr.l 32(sp)
   13130:	   /-------- bra.s 131a8 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13132:	/--|-------> tst.l 32(sp)
   13136:	|  |  /----- beq.s 13146 <makeLanguageTable+0xb6>
   13138:	|  |  |      move.l 40(sp),-(sp)
   1313c:	|  |  |      jsr 6bc <get2bytes>
   13142:	|  |  |      addq.l #4,sp
   13144:	|  |  |  /-- bra.s 13148 <makeLanguageTable+0xb8>
   13146:	|  |  \--|-> moveq #0,d0
   13148:	|  |     \-> movea.l 1a8ce <languageTable>,a0
   1314e:	|  |         move.l 32(sp),d1
   13152:	|  |         add.l d1,d1
   13154:	|  |         add.l d1,d1
   13156:	|  |         adda.l d1,a0
   13158:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   1315a:	|  |         move.l 1a8d2 <languageName>,d1
   13160:	|  |         move.l 32(sp),d0
   13164:	|  |         add.l d0,d0
   13166:	|  |         add.l d0,d0
   13168:	|  |         movea.l d1,a0
   1316a:	|  |         adda.l d0,a0
   1316c:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   1316e:	|  |         move.l 1a74c <gameVersion>,d0
   13174:	|  |         cmpi.l #511,d0
   1317a:	|  |     /-- ble.s 131a4 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   1317c:	|  |     |   move.l 1a8da <gameSettings+0x4>,d0
   13182:	|  |     +-- beq.s 131a4 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13184:	|  |     |   move.l 1a8d2 <languageName>,d1
   1318a:	|  |     |   move.l 32(sp),d0
   1318e:	|  |     |   add.l d0,d0
   13190:	|  |     |   add.l d0,d0
   13192:	|  |     |   movea.l d1,a2
   13194:	|  |     |   adda.l d0,a2
   13196:	|  |     |   move.l 40(sp),-(sp)
   1319a:	|  |     |   jsr b02 <readString>
   131a0:	|  |     |   addq.l #4,sp
   131a2:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   131a4:	|  |     \-> addq.l #1,32(sp)
   131a8:	|  \-------> move.l 1a8da <gameSettings+0x4>,d0
   131ae:	|            cmp.l 32(sp),d0
   131b2:	\----------- bcc.w 13132 <makeLanguageTable+0xa2>
		}
	}
}
   131b6:	             nop
   131b8:	             nop
   131ba:	             movea.l (sp)+,a2
   131bc:	             movea.l (sp)+,a6
   131be:	             lea 28(sp),sp
   131c2:	             rts

000131c4 <readIniFile>:

void readIniFile (char * filename) {
   131c4:	                      lea -564(sp),sp
   131c8:	                      move.l a6,-(sp)
   131ca:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   131cc:	                      move.l 576(sp),-(sp)
   131d0:	                      jsr b8 <copyString>
   131d6:	                      addq.l #4,sp
   131d8:	                      move.l d0,-(sp)
   131da:	                      jsr 12fd8 <getPrefsFilename>
   131e0:	                      addq.l #4,sp
   131e2:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   131e6:	                      move.l 562(sp),558(sp)
   131ec:	                      move.l #1005,554(sp)
   131f4:	                      move.l 1a7aa <DOSBase>,d0
   131fa:	                      movea.l d0,a6
   131fc:	                      move.l 558(sp),d1
   13200:	                      move.l 554(sp),d2
   13204:	                      jsr -30(a6)
   13208:	                      move.l d0,550(sp)
   1320c:	                      move.l 550(sp),d0
   13210:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13214:	                      clr.l 1a8d6 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   1321a:	                      move.w #1,1a8de <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13222:	                      clr.l 1a8e0 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13228:	                      moveq #1,d0
   1322a:	                      move.l d0,1a8e4 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13230:	                      clr.w 1a8e8 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13236:	                      clr.w 1a8ea <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   1323c:	                      clr.w 1a8ec <gameSettings+0x16>

	FreeVec(langName);
   13242:	                      move.l 562(sp),542(sp)
   13248:	                      move.l 1a7a2 <SysBase>,d0
   1324e:	                      movea.l d0,a6
   13250:	                      movea.l 542(sp),a1
   13254:	                      jsr -690(a6)
	langName = NULL;
   13258:	                      clr.l 562(sp)

	if (fp) {
   1325c:	                      tst.l 546(sp)
   13260:	/-------------------- beq.w 1353e <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13264:	|                     move.l sp,d0
   13266:	|                     addi.l #265,d0
   1326c:	|                     move.l #257,d1
   13272:	|                     move.l d1,-(sp)
   13274:	|                     clr.l -(sp)
   13276:	|                     move.l d0,-(sp)
   13278:	|                     jsr 16b30 <memset>
   1327e:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13282:	|                     move.l sp,d0
   13284:	|                     addq.l #8,d0
   13286:	|                     move.l #257,d1
   1328c:	|                     move.l d1,-(sp)
   1328e:	|                     clr.l -(sp)
   13290:	|                     move.l d0,-(sp)
   13292:	|                     jsr 16b30 <memset>
   13298:	|                     lea 12(sp),sp
		unsigned char here = 0;
   1329c:	|                     clr.b 571(sp)
		char readChar = ' ';
   132a0:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   132a6:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   132ac:	|                     clr.w 566(sp)
		LONG tmp = 0;
   132b0:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   132b4:	|  /----------------> move.l 546(sp),534(sp)
   132ba:	|  |                  move.l 1a7aa <DOSBase>,d0
   132c0:	|  |                  movea.l d0,a6
   132c2:	|  |                  move.l 534(sp),d1
   132c6:	|  |                  jsr -306(a6)
   132ca:	|  |                  move.l d0,530(sp)
   132ce:	|  |                  move.l 530(sp),d0
   132d2:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   132d6:	|  |                  moveq #-1,d1
   132d8:	|  |                  cmp.l 538(sp),d1
   132dc:	|  |           /----- bne.s 132ea <readIniFile+0x126>
				readChar = '\n';
   132de:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   132e4:	|  |           |      clr.w 568(sp)
   132e8:	|  |           |  /-- bra.s 132f0 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   132ea:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   132f0:	|  |              \-> move.b 570(sp),d0
   132f4:	|  |                  ext.w d0
   132f6:	|  |                  movea.w d0,a0
   132f8:	|  |                  moveq #61,d0
   132fa:	|  |                  cmp.l a0,d0
   132fc:	|  |     /----------- beq.w 134a6 <readIniFile+0x2e2>
   13300:	|  |     |            moveq #61,d1
   13302:	|  |     |            cmp.l a0,d1
   13304:	|  |  /--|----------- blt.w 134b2 <readIniFile+0x2ee>
   13308:	|  |  |  |            moveq #10,d0
   1330a:	|  |  |  |            cmp.l a0,d0
   1330c:	|  |  |  |        /-- beq.s 13316 <readIniFile+0x152>
   1330e:	|  |  |  |        |   moveq #13,d1
   13310:	|  |  |  |        |   cmp.l a0,d1
   13312:	|  |  +--|--------|-- bne.w 134b2 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13316:	|  |  |  |        \-> tst.w 566(sp)
   1331a:	|  |  |  |     /----- beq.w 13494 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   1331e:	|  |  |  |     |      pea 19767 <newfatal.c.307beca7+0x188>
   13324:	|  |  |  |     |      move.l sp,d0
   13326:	|  |  |  |     |      addi.l #269,d0
   1332c:	|  |  |  |     |      move.l d0,-(sp)
   1332e:	|  |  |  |     |      jsr 1365a <strcmp>
   13334:	|  |  |  |     |      addq.l #8,sp
   13336:	|  |  |  |     |      tst.l d0
   13338:	|  |  |  |     |  /-- bne.s 13352 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   1333a:	|  |  |  |     |  |   move.l sp,d0
   1333c:	|  |  |  |     |  |   addq.l #8,d0
   1333e:	|  |  |  |     |  |   move.l d0,-(sp)
   13340:	|  |  |  |     |  |   jsr 1354a <stringToInt>
   13346:	|  |  |  |     |  |   addq.l #4,sp
   13348:	|  |  |  |     |  |   move.l d0,1a8d6 <gameSettings>
   1334e:	|  |  |  |     +--|-- bra.w 13494 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13352:	|  |  |  |     |  \-> pea 19770 <newfatal.c.307beca7+0x191>
   13358:	|  |  |  |     |      move.l sp,d0
   1335a:	|  |  |  |     |      addi.l #269,d0
   13360:	|  |  |  |     |      move.l d0,-(sp)
   13362:	|  |  |  |     |      jsr 1365a <strcmp>
   13368:	|  |  |  |     |      addq.l #8,sp
   1336a:	|  |  |  |     |      tst.l d0
   1336c:	|  |  |  |     |  /-- bne.s 13392 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   1336e:	|  |  |  |     |  |   move.l sp,d0
   13370:	|  |  |  |     |  |   addq.l #8,d0
   13372:	|  |  |  |     |  |   move.l d0,-(sp)
   13374:	|  |  |  |     |  |   jsr 1354a <stringToInt>
   1337a:	|  |  |  |     |  |   addq.l #4,sp
   1337c:	|  |  |  |     |  |   tst.l d0
   1337e:	|  |  |  |     |  |   seq d0
   13380:	|  |  |  |     |  |   neg.b d0
   13382:	|  |  |  |     |  |   move.b d0,d0
   13384:	|  |  |  |     |  |   andi.w #255,d0
   13388:	|  |  |  |     |  |   move.w d0,1a8de <gameSettings+0x8>
   1338e:	|  |  |  |     +--|-- bra.w 13494 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13392:	|  |  |  |     |  \-> pea 19777 <newfatal.c.307beca7+0x198>
   13398:	|  |  |  |     |      move.l sp,d0
   1339a:	|  |  |  |     |      addi.l #269,d0
   133a0:	|  |  |  |     |      move.l d0,-(sp)
   133a2:	|  |  |  |     |      jsr 1365a <strcmp>
   133a8:	|  |  |  |     |      addq.l #8,sp
   133aa:	|  |  |  |     |      tst.l d0
   133ac:	|  |  |  |     |  /-- bne.s 133c6 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   133ae:	|  |  |  |     |  |   move.l sp,d0
   133b0:	|  |  |  |     |  |   addq.l #8,d0
   133b2:	|  |  |  |     |  |   move.l d0,-(sp)
   133b4:	|  |  |  |     |  |   jsr 1354a <stringToInt>
   133ba:	|  |  |  |     |  |   addq.l #4,sp
   133bc:	|  |  |  |     |  |   move.l d0,1a8e0 <gameSettings+0xa>
   133c2:	|  |  |  |     +--|-- bra.w 13494 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   133c6:	|  |  |  |     |  \-> pea 1977f <newfatal.c.307beca7+0x1a0>
   133cc:	|  |  |  |     |      move.l sp,d0
   133ce:	|  |  |  |     |      addi.l #269,d0
   133d4:	|  |  |  |     |      move.l d0,-(sp)
   133d6:	|  |  |  |     |      jsr 1365a <strcmp>
   133dc:	|  |  |  |     |      addq.l #8,sp
   133de:	|  |  |  |     |      tst.l d0
   133e0:	|  |  |  |     |  /-- bne.s 133fa <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   133e2:	|  |  |  |     |  |   move.l sp,d0
   133e4:	|  |  |  |     |  |   addq.l #8,d0
   133e6:	|  |  |  |     |  |   move.l d0,-(sp)
   133e8:	|  |  |  |     |  |   jsr 1354a <stringToInt>
   133ee:	|  |  |  |     |  |   addq.l #4,sp
   133f0:	|  |  |  |     |  |   move.l d0,1a8e4 <gameSettings+0xe>
   133f6:	|  |  |  |     +--|-- bra.w 13494 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   133fa:	|  |  |  |     |  \-> pea 19789 <newfatal.c.307beca7+0x1aa>
   13400:	|  |  |  |     |      move.l sp,d0
   13402:	|  |  |  |     |      addi.l #269,d0
   13408:	|  |  |  |     |      move.l d0,-(sp)
   1340a:	|  |  |  |     |      jsr 1365a <strcmp>
   13410:	|  |  |  |     |      addq.l #8,sp
   13412:	|  |  |  |     |      tst.l d0
   13414:	|  |  |  |     |  /-- bne.s 1342e <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13416:	|  |  |  |     |  |   move.l sp,d0
   13418:	|  |  |  |     |  |   addq.l #8,d0
   1341a:	|  |  |  |     |  |   move.l d0,-(sp)
   1341c:	|  |  |  |     |  |   jsr 1354a <stringToInt>
   13422:	|  |  |  |     |  |   addq.l #4,sp
   13424:	|  |  |  |     |  |   move.l d0,d0
   13426:	|  |  |  |     |  |   move.w d0,1a8e8 <gameSettings+0x12>
   1342c:	|  |  |  |     +--|-- bra.s 13494 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   1342e:	|  |  |  |     |  \-> pea 19795 <newfatal.c.307beca7+0x1b6>
   13434:	|  |  |  |     |      move.l sp,d0
   13436:	|  |  |  |     |      addi.l #269,d0
   1343c:	|  |  |  |     |      move.l d0,-(sp)
   1343e:	|  |  |  |     |      jsr 1365a <strcmp>
   13444:	|  |  |  |     |      addq.l #8,sp
   13446:	|  |  |  |     |      tst.l d0
   13448:	|  |  |  |     |  /-- bne.s 13462 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   1344a:	|  |  |  |     |  |   move.l sp,d0
   1344c:	|  |  |  |     |  |   addq.l #8,d0
   1344e:	|  |  |  |     |  |   move.l d0,-(sp)
   13450:	|  |  |  |     |  |   jsr 1354a <stringToInt>
   13456:	|  |  |  |     |  |   addq.l #4,sp
   13458:	|  |  |  |     |  |   move.l d0,d0
   1345a:	|  |  |  |     |  |   move.w d0,1a8ea <gameSettings+0x14>
   13460:	|  |  |  |     +--|-- bra.s 13494 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13462:	|  |  |  |     |  \-> pea 197a3 <newfatal.c.307beca7+0x1c4>
   13468:	|  |  |  |     |      move.l sp,d0
   1346a:	|  |  |  |     |      addi.l #269,d0
   13470:	|  |  |  |     |      move.l d0,-(sp)
   13472:	|  |  |  |     |      jsr 1365a <strcmp>
   13478:	|  |  |  |     |      addq.l #8,sp
   1347a:	|  |  |  |     |      tst.l d0
   1347c:	|  |  |  |     +----- bne.s 13494 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   1347e:	|  |  |  |     |      move.l sp,d0
   13480:	|  |  |  |     |      addq.l #8,d0
   13482:	|  |  |  |     |      move.l d0,-(sp)
   13484:	|  |  |  |     |      jsr 1354a <stringToInt>
   1348a:	|  |  |  |     |      addq.l #4,sp
   1348c:	|  |  |  |     |      move.l d0,d0
   1348e:	|  |  |  |     |      move.w d0,1a8ec <gameSettings+0x16>
					}
				}
				here = 0;
   13494:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13498:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   1349c:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   134a0:	|  |  |  |            clr.b 8(sp)
				break;
   134a4:	|  |  |  |  /-------- bra.s 1351c <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   134a6:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   134ac:	|  |  |     |         clr.b 571(sp)
				break;
   134b0:	|  |  |     +-------- bra.s 1351c <readIniFile+0x358>

				default:
				if (doingSecond) {
   134b2:	|  |  \-----|-------> tst.w 566(sp)
   134b6:	|  |        |  /----- beq.s 134ea <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   134b8:	|  |        |  |      move.b 571(sp),d0
   134bc:	|  |        |  |      move.b d0,d1
   134be:	|  |        |  |      addq.b #1,d1
   134c0:	|  |        |  |      move.b d1,571(sp)
   134c4:	|  |        |  |      move.b d0,d0
   134c6:	|  |        |  |      andi.l #255,d0
   134cc:	|  |        |  |      lea 572(sp),a0
   134d0:	|  |        |  |      adda.l d0,a0
   134d2:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   134d8:	|  |        |  |      moveq #0,d0
   134da:	|  |        |  |      move.b 571(sp),d0
   134de:	|  |        |  |      lea 572(sp),a0
   134e2:	|  |        |  |      adda.l d0,a0
   134e4:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   134e8:	|  |        |  |  /-- bra.s 1351a <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   134ea:	|  |        |  \--|-> move.b 571(sp),d0
   134ee:	|  |        |     |   move.b d0,d1
   134f0:	|  |        |     |   addq.b #1,d1
   134f2:	|  |        |     |   move.b d1,571(sp)
   134f6:	|  |        |     |   move.b d0,d0
   134f8:	|  |        |     |   andi.l #255,d0
   134fe:	|  |        |     |   lea 572(sp),a0
   13502:	|  |        |     |   adda.l d0,a0
   13504:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   1350a:	|  |        |     |   moveq #0,d0
   1350c:	|  |        |     |   move.b 571(sp),d0
   13510:	|  |        |     |   lea 572(sp),a0
   13514:	|  |        |     |   adda.l d0,a0
   13516:	|  |        |     |   clr.b -307(a0)
				break;
   1351a:	|  |        |     \-> nop
			}
		} while (keepGoing);
   1351c:	|  |        \-------> tst.w 568(sp)
   13520:	|  \----------------- bne.w 132b4 <readIniFile+0xf0>

		Close(fp);
   13524:	|                     move.l 546(sp),526(sp)
   1352a:	|                     move.l 1a7aa <DOSBase>,d0
   13530:	|                     movea.l d0,a6
   13532:	|                     move.l 526(sp),d1
   13536:	|                     jsr -36(a6)
   1353a:	|                     move.l d0,522(sp)
	}
}
   1353e:	\-------------------> nop
   13540:	                      move.l (sp)+,d2
   13542:	                      movea.l (sp)+,a6
   13544:	                      lea 564(sp),sp
   13548:	                      rts

0001354a <stringToInt>:

unsigned int stringToInt (char * s) {
   1354a:	             subq.l #8,sp
	int i = 0;
   1354c:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13550:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13554:	/----------> movea.l 12(sp),a0
   13558:	|            move.b (a0),d0
   1355a:	|            cmpi.b #47,d0
   1355e:	|        /-- ble.s 13596 <stringToInt+0x4c>
   13560:	|        |   movea.l 12(sp),a0
   13564:	|        |   move.b (a0),d0
   13566:	|        |   cmpi.b #57,d0
   1356a:	|        +-- bgt.s 13596 <stringToInt+0x4c>
			i *= 10;
   1356c:	|        |   move.l 4(sp),d1
   13570:	|        |   move.l d1,d0
   13572:	|        |   add.l d0,d0
   13574:	|        |   add.l d0,d0
   13576:	|        |   add.l d1,d0
   13578:	|        |   add.l d0,d0
   1357a:	|        |   move.l d0,4(sp)
			i += *s - '0';
   1357e:	|        |   movea.l 12(sp),a0
   13582:	|        |   move.b (a0),d0
   13584:	|        |   ext.w d0
   13586:	|        |   movea.w d0,a0
   13588:	|        |   moveq #-48,d0
   1358a:	|        |   add.l a0,d0
   1358c:	|        |   add.l d0,4(sp)
			s ++;
   13590:	|        |   addq.l #1,12(sp)
   13594:	|  /-----|-- bra.s 135ce <stringToInt+0x84>
		} else if (*s == '-') {
   13596:	|  |     \-> movea.l 12(sp),a0
   1359a:	|  |         move.b (a0),d0
   1359c:	|  |         cmpi.b #45,d0
   135a0:	|  |     /-- bne.s 135ba <stringToInt+0x70>
			negative = ! negative;
   135a2:	|  |     |   tst.w 2(sp)
   135a6:	|  |     |   seq d0
   135a8:	|  |     |   neg.b d0
   135aa:	|  |     |   move.b d0,d0
   135ac:	|  |     |   andi.w #255,d0
   135b0:	|  |     |   move.w d0,2(sp)
			s++;
   135b4:	|  |     |   addq.l #1,12(sp)
   135b8:	+--|-----|-- bra.s 13554 <stringToInt+0xa>
		} else {
			if (negative)
   135ba:	|  |     \-> tst.w 2(sp)
   135be:	|  |     /-- beq.s 135c8 <stringToInt+0x7e>
				return -i;
   135c0:	|  |     |   move.l 4(sp),d0
   135c4:	|  |     |   neg.l d0
   135c6:	|  |  /--|-- bra.s 135d0 <stringToInt+0x86>
			return i;
   135c8:	|  |  |  \-> move.l 4(sp),d0
   135cc:	|  |  +----- bra.s 135d0 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   135ce:	\--\--|----X bra.s 13554 <stringToInt+0xa>
		}
	}
   135d0:	      \----> addq.l #8,sp
   135d2:	             rts

000135d4 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   135d4:	    lea -28(sp),sp
   135d8:	    move.l a6,-(sp)
   135da:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   135dc:	    pea 197ad <newfatal.c.307beca7+0x1ce>
   135e2:	    jsr 16bac <KPrintF>
   135e8:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   135ea:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   135ee:	    move.l 40(sp),30(sp)
   135f4:	    move.l #1005,26(sp)
   135fc:	    move.l 1a7aa <DOSBase>,d0
   13602:	    movea.l d0,a6
   13604:	    move.l 30(sp),d1
   13608:	    move.l 26(sp),d2
   1360c:	    jsr -30(a6)
   13610:	    move.l d0,22(sp)
   13614:	    move.l 22(sp),d0
   13618:	    move.l d0,18(sp)
	if (tester) {
   1361c:	/-- beq.s 1364c <fileExists+0x78>
		KPrintF("fileexists: File exists");
   1361e:	|   pea 197c7 <newfatal.c.307beca7+0x1e8>
   13624:	|   jsr 16bac <KPrintF>
   1362a:	|   addq.l #4,sp
		retval = 1;
   1362c:	|   move.b #1,35(sp)
		Close(tester);
   13632:	|   move.l 18(sp),14(sp)
   13638:	|   move.l 1a7aa <DOSBase>,d0
   1363e:	|   movea.l d0,a6
   13640:	|   move.l 14(sp),d1
   13644:	|   jsr -36(a6)
   13648:	|   move.l d0,10(sp)
	}
	return retval;
   1364c:	\-> move.b 35(sp),d0
   13650:	    move.l (sp)+,d2
   13652:	    movea.l (sp)+,a6
   13654:	    lea 28(sp),sp
   13658:	    rts

0001365a <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   1365a:	   /-- bra.s 13664 <strcmp+0xa>
    {
        s1++;
   1365c:	/--|-> addq.l #1,4(sp)
        s2++;
   13660:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13664:	|  \-> movea.l 4(sp),a0
   13668:	|      move.b (a0),d0
   1366a:	|  /-- beq.s 1367c <strcmp+0x22>
   1366c:	|  |   movea.l 4(sp),a0
   13670:	|  |   move.b (a0),d1
   13672:	|  |   movea.l 8(sp),a0
   13676:	|  |   move.b (a0),d0
   13678:	|  |   cmp.b d1,d0
   1367a:	\--|-- beq.s 1365c <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   1367c:	   \-> movea.l 4(sp),a0
   13680:	       move.b (a0),d0
   13682:	       moveq #0,d1
   13684:	       move.b d0,d1
   13686:	       movea.l 8(sp),a0
   1368a:	       move.b (a0),d0
   1368c:	       move.b d0,d0
   1368e:	       andi.l #255,d0
   13694:	       sub.l d0,d1
   13696:	       move.l d1,d0
}
   13698:	       rts

0001369a <strlen>:

long unsigned int strlen (const char *s) 
{  
   1369a:	       subq.l #4,sp
	long unsigned int i = 0;
   1369c:	       clr.l (sp)
	while(s[i]) i++; 
   1369e:	   /-- bra.s 136a2 <strlen+0x8>
   136a0:	/--|-> addq.l #1,(sp)
   136a2:	|  \-> movea.l 8(sp),a0
   136a6:	|      adda.l (sp),a0
   136a8:	|      move.b (a0),d0
   136aa:	\----- bne.s 136a0 <strlen+0x6>
	return(i);
   136ac:	       move.l (sp),d0
}
   136ae:	       addq.l #4,sp
   136b0:	       rts

000136b2 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   136b2:	    nop
   136b4:	/-> move.l 8(sp),d0
   136b8:	|   move.l d0,d1
   136ba:	|   addq.l #1,d1
   136bc:	|   move.l d1,8(sp)
   136c0:	|   movea.l 4(sp),a0
   136c4:	|   lea 1(a0),a1
   136c8:	|   move.l a1,4(sp)
   136cc:	|   movea.l d0,a1
   136ce:	|   move.b (a1),d0
   136d0:	|   move.b d0,(a0)
   136d2:	|   move.b (a0),d0
   136d4:	\-- bne.s 136b4 <strcpy+0x2>
}
   136d6:	    nop
   136d8:	    rts

000136da <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   136da:	    lea -20(sp),sp
   136de:	    move.l a6,-(sp)
   136e0:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   136e2:	    move.l 32(sp),-(sp)
   136e6:	    jsr 1369a <strlen>
   136ec:	    addq.l #4,sp
   136ee:	    move.l d0,d2
   136f0:	    move.l 36(sp),-(sp)
   136f4:	    jsr 1369a <strlen>
   136fa:	    addq.l #4,sp
   136fc:	    add.l d2,d0
   136fe:	    move.l d0,d1
   13700:	    addq.l #1,d1
   13702:	    move.l d1,20(sp)
   13706:	    clr.l 16(sp)
   1370a:	    move.l 1a7a2 <SysBase>,d0
   13710:	    movea.l d0,a6
   13712:	    move.l 20(sp),d0
   13716:	    move.l 16(sp),d1
   1371a:	    jsr -684(a6)
   1371e:	    move.l d0,12(sp)
   13722:	    move.l 12(sp),d0
   13726:	    move.l d0,8(sp)
	char * t = newString;
   1372a:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13730:	    nop
   13732:	/-> move.l 32(sp),d0
   13736:	|   move.l d0,d1
   13738:	|   addq.l #1,d1
   1373a:	|   move.l d1,32(sp)
   1373e:	|   movea.l 24(sp),a0
   13742:	|   lea 1(a0),a1
   13746:	|   move.l a1,24(sp)
   1374a:	|   movea.l d0,a1
   1374c:	|   move.b (a1),d0
   1374e:	|   move.b d0,(a0)
   13750:	|   move.b (a0),d0
   13752:	\-- bne.s 13732 <joinStrings+0x58>
	t--;
   13754:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13758:	    nop
   1375a:	/-> move.l 36(sp),d0
   1375e:	|   move.l d0,d1
   13760:	|   addq.l #1,d1
   13762:	|   move.l d1,36(sp)
   13766:	|   movea.l 24(sp),a0
   1376a:	|   lea 1(a0),a1
   1376e:	|   move.l a1,24(sp)
   13772:	|   movea.l d0,a1
   13774:	|   move.b (a1),d0
   13776:	|   move.b d0,(a0)
   13778:	|   move.b (a0),d0
   1377a:	\-- bne.s 1375a <joinStrings+0x80>

	return newString;
   1377c:	    move.l 8(sp),d0
}
   13780:	    move.l (sp)+,d2
   13782:	    movea.l (sp)+,a6
   13784:	    lea 20(sp),sp
   13788:	    rts

0001378a <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   1378a:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   1378e:	       moveq #10,d0
   13790:	       cmp.l 28(sp),d0
   13794:	   /-- bne.s 137b2 <itoa+0x28>
   13796:	   |   tst.l 20(sp)
   1379a:	   +-- bge.s 137b2 <itoa+0x28>
        *str++ = '-';
   1379c:	   |   move.l 24(sp),d0
   137a0:	   |   move.l d0,d1
   137a2:	   |   addq.l #1,d1
   137a4:	   |   move.l d1,24(sp)
   137a8:	   |   movea.l d0,a0
   137aa:	   |   move.b #45,(a0)
        value *= -1;
   137ae:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   137b2:	   \-> move.l 24(sp),12(sp)
   137b8:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   137be:	   /-> move.l 20(sp),d0
   137c2:	   |   move.l 28(sp),-(sp)
   137c6:	   |   move.l d0,-(sp)
   137c8:	   |   jsr 17616 <__modsi3>
   137ce:	   |   addq.l #8,sp
   137d0:	   |   movea.l d0,a1
   137d2:	   |   move.l 12(sp),d0
   137d6:	   |   move.l d0,d1
   137d8:	   |   addq.l #1,d1
   137da:	   |   move.l d1,12(sp)
   137de:	   |   lea 197df <main_sludge.c.0270f7ba+0x2>,a0
   137e4:	   |   move.b (0,a1,a0.l),d1
   137e8:	   |   movea.l d0,a0
   137ea:	   |   move.b d1,(a0)
        value /= base;
   137ec:	   |   move.l 28(sp),-(sp)
   137f0:	   |   move.l 24(sp),-(sp)
   137f4:	   |   jsr 175e8 <__divsi3>
   137fa:	   |   addq.l #8,sp
   137fc:	   |   move.l d0,20(sp)
    } while (value);
   13800:	   \-- bne.s 137be <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13802:	       move.l 12(sp),d0
   13806:	       move.l d0,d1
   13808:	       subq.l #1,d1
   1380a:	       move.l d1,12(sp)
   1380e:	       movea.l d0,a0
   13810:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13812:	       move.l 4(sp),8(sp)
   13818:	   /-- bra.s 1383e <itoa+0xb4>
        char temp = *low;
   1381a:	/--|-> movea.l 8(sp),a0
   1381e:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13822:	|  |   movea.l 12(sp),a0
   13826:	|  |   move.b (a0),d0
   13828:	|  |   movea.l 8(sp),a0
   1382c:	|  |   move.b d0,(a0)
        *ptr = temp;
   1382e:	|  |   movea.l 12(sp),a0
   13832:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13836:	|  |   addq.l #1,8(sp)
   1383a:	|  |   subq.l #1,12(sp)
   1383e:	|  \-> move.l 8(sp),d0
   13842:	|      cmp.l 12(sp),d0
   13846:	\----- bcs.s 1381a <itoa+0x90>
    }
    return rc;
   13848:	       move.l 4(sp),d0
}
   1384c:	       lea 16(sp),sp
   13850:	       rts

00013852 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13852:	                            lea -40(sp),sp
   13856:	                            move.l d2,-(sp)
    char* s = str;
   13858:	                            move.l 48(sp),40(sp)
    const char* p = format;
   1385e:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13864:	   /----------------------- bra.w 13998 <vsprintf2+0x146>
        if (*p == '%') {
   13868:	/--|----------------------> movea.l 36(sp),a0
   1386c:	|  |                        move.b (a0),d0
   1386e:	|  |                        cmpi.b #37,d0
   13872:	|  |  /-------------------- bne.w 1397e <vsprintf2+0x12c>
            switch (*++p) {
   13876:	|  |  |                     addq.l #1,36(sp)
   1387a:	|  |  |                     movea.l 36(sp),a0
   1387e:	|  |  |                     move.b (a0),d0
   13880:	|  |  |                     ext.w d0
   13882:	|  |  |                     movea.w d0,a0
   13884:	|  |  |                     moveq #115,d0
   13886:	|  |  |                     cmp.l a0,d0
   13888:	|  |  |           /-------- beq.s 13900 <vsprintf2+0xae>
   1388a:	|  |  |           |         moveq #115,d1
   1388c:	|  |  |           |         cmp.l a0,d1
   1388e:	|  |  |  /--------|-------- blt.w 13966 <vsprintf2+0x114>
   13892:	|  |  |  |        |         moveq #99,d2
   13894:	|  |  |  |        |         cmp.l a0,d2
   13896:	|  |  |  |  /-----|-------- beq.w 1393e <vsprintf2+0xec>
   1389a:	|  |  |  |  |     |         moveq #100,d0
   1389c:	|  |  |  |  |     |         cmp.l a0,d0
   1389e:	|  |  |  +--|-----|-------- bne.w 13966 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   138a2:	|  |  |  |  |     |         addq.l #4,56(sp)
   138a6:	|  |  |  |  |     |         movea.l 56(sp),a0
   138aa:	|  |  |  |  |     |         move.l (a0),d0
   138ac:	|  |  |  |  |     |         move.l d0,d1
   138ae:	|  |  |  |  |     |         subq.l #1,d1
   138b0:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   138b4:	|  |  |  |  |     |         pea a <_start+0xa>
   138b8:	|  |  |  |  |     |         lea 8(sp),a0
   138bc:	|  |  |  |  |     |         move.l a0,-(sp)
   138be:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   138c2:	|  |  |  |  |     |         jsr 1378a <itoa>
   138c8:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   138cc:	|  |  |  |  |     |         lea 44(sp),a0
   138d0:	|  |  |  |  |     |         lea -40(a0),a0
   138d4:	|  |  |  |  |     |         move.l a0,28(sp)
   138d8:	|  |  |  |  |     |     /-- bra.s 138f4 <vsprintf2+0xa2>
                        *s++ = *b;
   138da:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   138de:	|  |  |  |  |     |  |  |   move.l d0,d1
   138e0:	|  |  |  |  |     |  |  |   addq.l #1,d1
   138e2:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   138e6:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   138ea:	|  |  |  |  |     |  |  |   move.b (a0),d1
   138ec:	|  |  |  |  |     |  |  |   movea.l d0,a0
   138ee:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   138f0:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   138f4:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   138f8:	|  |  |  |  |     |  |      move.b (a0),d0
   138fa:	|  |  |  |  |     |  \----- bne.s 138da <vsprintf2+0x88>
                    }
                    break;
   138fc:	|  |  |  |  |  /--|-------- bra.w 13994 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13900:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   13904:	|  |  |  |  |  |            movea.l 56(sp),a0
   13908:	|  |  |  |  |  |            move.l (a0),d0
   1390a:	|  |  |  |  |  |            move.l d0,d1
   1390c:	|  |  |  |  |  |            subq.l #1,d1
   1390e:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13912:	|  |  |  |  |  |        /-- bra.s 13934 <vsprintf2+0xe2>
                        *s++ = *sval++;
   13914:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13918:	|  |  |  |  |  |     |  |   move.l d1,d2
   1391a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1391c:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13920:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13924:	|  |  |  |  |  |     |  |   move.l d0,d2
   13926:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13928:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   1392c:	|  |  |  |  |  |     |  |   movea.l d1,a0
   1392e:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13930:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13932:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13934:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   13938:	|  |  |  |  |  |     |      move.b (a0),d0
   1393a:	|  |  |  |  |  |     \----- bne.s 13914 <vsprintf2+0xc2>
                    }
                    break;
   1393c:	|  |  |  |  |  +----------- bra.s 13994 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   1393e:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   13942:	|  |  |  |     |            movea.l 56(sp),a0
   13946:	|  |  |  |     |            move.l (a0),d0
   13948:	|  |  |  |     |            move.l d0,d1
   1394a:	|  |  |  |     |            subq.l #1,d1
   1394c:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13950:	|  |  |  |     |            move.l 40(sp),d0
   13954:	|  |  |  |     |            move.l d0,d2
   13956:	|  |  |  |     |            addq.l #1,d2
   13958:	|  |  |  |     |            move.l d2,40(sp)
   1395c:	|  |  |  |     |            move.l 24(sp),d1
   13960:	|  |  |  |     |            movea.l d0,a0
   13962:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13964:	|  |  |  |     +----------- bra.s 13994 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13966:	|  |  |  \-----|----------> move.l 40(sp),d0
   1396a:	|  |  |        |            move.l d0,d1
   1396c:	|  |  |        |            addq.l #1,d1
   1396e:	|  |  |        |            move.l d1,40(sp)
   13972:	|  |  |        |            movea.l 36(sp),a0
   13976:	|  |  |        |            move.b (a0),d1
   13978:	|  |  |        |            movea.l d0,a0
   1397a:	|  |  |        |            move.b d1,(a0)
                    break;
   1397c:	|  |  |        +----------- bra.s 13994 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   1397e:	|  |  \--------|----------> move.l 40(sp),d0
   13982:	|  |           |            move.l d0,d1
   13984:	|  |           |            addq.l #1,d1
   13986:	|  |           |            move.l d1,40(sp)
   1398a:	|  |           |            movea.l 36(sp),a0
   1398e:	|  |           |            move.b (a0),d1
   13990:	|  |           |            movea.l d0,a0
   13992:	|  |           |            move.b d1,(a0)
        }
        p++;
   13994:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13998:	|  \----------------------> movea.l 36(sp),a0
   1399c:	|                           move.b (a0),d0
   1399e:	\-------------------------- bne.w 13868 <vsprintf2+0x16>
    }
    *s = '\0';
   139a2:	                            movea.l 40(sp),a0
   139a6:	                            clr.b (a0)
    return s - str;
   139a8:	                            move.l 40(sp),d0
   139ac:	                            sub.l 48(sp),d0
}
   139b0:	                            move.l (sp)+,d2
   139b2:	                            lea 40(sp),sp
   139b6:	                            rts

000139b8 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   139b8:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   139ba:	moveq #16,d0
   139bc:	add.l sp,d0
   139be:	move.l d0,d1
   139c0:	addq.l #4,d1
   139c2:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   139c6:	move.l 16(sp),d0
   139ca:	move.l 4(sp),-(sp)
   139ce:	move.l d0,-(sp)
   139d0:	move.l 20(sp),-(sp)
   139d4:	jsr 13852 <vsprintf2>
   139da:	lea 12(sp),sp
   139de:	move.l d0,(sp)
    va_end(args);
   139e0:	clr.l 4(sp)

    return done;
   139e4:	move.l (sp),d0
}
   139e6:	addq.l #8,sp
   139e8:	rts

000139ea <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   139ea:	       lea -20(sp),sp
   139ee:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   139f0:	       moveq #12,d0
   139f2:	       move.l d0,20(sp)
   139f6:	       clr.l 16(sp)
   139fa:	       move.l 1a7a2 <SysBase>,d0
   13a00:	       movea.l d0,a6
   13a02:	       move.l 20(sp),d0
   13a06:	       move.l 16(sp),d1
   13a0a:	       jsr -684(a6)
   13a0e:	       move.l d0,12(sp)
   13a12:	       move.l 12(sp),d0
   13a16:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13a1a:	   /-- bne.s 13a20 <addVarToStack+0x36>
   13a1c:	   |   clr.w d0
   13a1e:	/--|-- bra.s 13a68 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13a20:	|  \-> move.l 8(sp),d0
   13a24:	|      move.l d0,-(sp)
   13a26:	|      move.l 32(sp),-(sp)
   13a2a:	|      jsr 1454c <copyMain>
   13a30:	|      addq.l #8,sp
   13a32:	|      tst.w d0
   13a34:	|  /-- bne.s 13a50 <addVarToStack+0x66>
        FreeVec(newStack);
   13a36:	|  |   move.l 8(sp),4(sp)
   13a3c:	|  |   move.l 1a7a2 <SysBase>,d0
   13a42:	|  |   movea.l d0,a6
   13a44:	|  |   movea.l 4(sp),a1
   13a48:	|  |   jsr -690(a6)
        return FALSE;
   13a4c:	|  |   clr.w d0
   13a4e:	+--|-- bra.s 13a68 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13a50:	|  \-> movea.l 32(sp),a0
   13a54:	|      move.l (a0),d0
   13a56:	|      movea.l 8(sp),a0
   13a5a:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13a5e:	|      movea.l 32(sp),a0
   13a62:	|      move.l 8(sp),(a0)
    return TRUE;
   13a66:	|      moveq #1,d0
}
   13a68:	\----> movea.l (sp)+,a6
   13a6a:	       lea 20(sp),sp
   13a6e:	       rts

00013a70 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13a70:	       lea -16(sp),sp
   13a74:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13a76:	       moveq #12,d0
   13a78:	       move.l d0,16(sp)
   13a7c:	       clr.l 12(sp)
   13a80:	       move.l 1a7a2 <SysBase>,d0
   13a86:	       movea.l d0,a6
   13a88:	       move.l 16(sp),d0
   13a8c:	       move.l 12(sp),d1
   13a90:	       jsr -684(a6)
   13a94:	       move.l d0,8(sp)
   13a98:	       move.l 8(sp),d0
   13a9c:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13aa0:	   /-- bne.s 13aa6 <addVarToStackQuick+0x36>
   13aa2:	   |   clr.w d0
   13aa4:	/--|-- bra.s 13adc <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   13aa6:	|  \-> move.l 4(sp),d0
   13aaa:	|      pea 8 <_start+0x8>
   13aae:	|      move.l 28(sp),-(sp)
   13ab2:	|      move.l d0,-(sp)
   13ab4:	|      jsr 16b60 <memcpy>
   13aba:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13abe:	|      movea.l 24(sp),a0
   13ac2:	|      clr.l (a0)

    newStack->next = *thisStack;
   13ac4:	|      movea.l 28(sp),a0
   13ac8:	|      move.l (a0),d0
   13aca:	|      movea.l 4(sp),a0
   13ace:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13ad2:	|      movea.l 28(sp),a0
   13ad6:	|      move.l 4(sp),(a0)
    return TRUE;
   13ada:	|      moveq #1,d0
}
   13adc:	\----> movea.l (sp)+,a6
   13ade:	       lea 16(sp),sp
   13ae2:	       rts

00013ae4 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   13ae4:	       lea -16(sp),sp
   13ae8:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13aea:	       movea.l 24(sp),a0
   13aee:	       move.l (a0),d0
   13af0:	       moveq #1,d1
   13af2:	       cmp.l d0,d1
   13af4:	   /-- bne.s 13b1e <addVariablesInSecond+0x3a>
   13af6:	   |   movea.l 28(sp),a0
   13afa:	   |   move.l (a0),d0
   13afc:	   |   moveq #1,d1
   13afe:	   |   cmp.l d0,d1
   13b00:	   +-- bne.s 13b1e <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13b02:	   |   movea.l 28(sp),a0
   13b06:	   |   move.l 4(a0),d1
   13b0a:	   |   movea.l 24(sp),a0
   13b0e:	   |   move.l 4(a0),d0
   13b12:	   |   add.l d1,d0
   13b14:	   |   movea.l 28(sp),a0
   13b18:	   |   move.l d0,4(a0)
   13b1c:	/--|-- bra.s 13b98 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13b1e:	|  \-> move.l 24(sp),-(sp)
   13b22:	|      jsr 14784 <getTextFromAnyVar>
   13b28:	|      addq.l #4,sp
   13b2a:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13b2e:	|      move.l 28(sp),-(sp)
   13b32:	|      jsr 14784 <getTextFromAnyVar>
   13b38:	|      addq.l #4,sp
   13b3a:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13b3e:	|      move.l 28(sp),-(sp)
   13b42:	|      jsr 143fc <unlinkVar>
   13b48:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13b4a:	|      move.l 12(sp),-(sp)
   13b4e:	|      move.l 20(sp),-(sp)
   13b52:	|      jsr 136da <joinStrings>
   13b58:	|      addq.l #8,sp
   13b5a:	|      movea.l 28(sp),a0
   13b5e:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13b62:	|      movea.l 28(sp),a0
   13b66:	|      moveq #3,d0
   13b68:	|      move.l d0,(a0)
		FreeVec(string1);
   13b6a:	|      move.l 16(sp),8(sp)
   13b70:	|      move.l 1a7a2 <SysBase>,d0
   13b76:	|      movea.l d0,a6
   13b78:	|      movea.l 8(sp),a1
   13b7c:	|      jsr -690(a6)
		FreeVec(string2);
   13b80:	|      move.l 12(sp),4(sp)
   13b86:	|      move.l 1a7a2 <SysBase>,d0
   13b8c:	|      movea.l d0,a6
   13b8e:	|      movea.l 4(sp),a1
   13b92:	|      jsr -690(a6)
	}
}
   13b96:	|      nop
   13b98:	\----> nop
   13b9a:	       movea.l (sp)+,a6
   13b9c:	       lea 16(sp),sp
   13ba0:	       rts

00013ba2 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   13ba2:	movea.l 8(sp),a0
   13ba6:	move.l 4(a0),-(sp)
   13baa:	move.l (a0),-(sp)
   13bac:	movea.l 12(sp),a0
   13bb0:	move.l 4(a0),-(sp)
   13bb4:	move.l (a0),-(sp)
   13bb6:	jsr 13bd8 <compareVars>
   13bbc:	lea 16(sp),sp
   13bc0:	move.l d0,-(sp)
   13bc2:	pea 1 <_start+0x1>
   13bc6:	move.l 16(sp),-(sp)
   13bca:	jsr 14aa0 <setVariable>
   13bd0:	lea 12(sp),sp
}
   13bd4:	nop
   13bd6:	rts

00013bd8 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   13bd8:	       subq.l #4,sp
	int re = 0;
   13bda:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   13bdc:	       move.l 8(sp),d1
   13be0:	       move.l 16(sp),d0
   13be4:	       cmp.l d1,d0
   13be6:	/----- bne.w 13cae <compareVars+0xd6>
		switch (var1.varType) {
   13bea:	|      move.l 8(sp),d0
   13bee:	|      moveq #9,d1
   13bf0:	|      cmp.l d0,d1
   13bf2:	|  /-- bcs.w 13c96 <compareVars+0xbe>
   13bf6:	|  |   add.l d0,d0
   13bf8:	|  |   movea.l d0,a0
   13bfa:	|  |   adda.l #80902,a0
   13c00:	|  |   move.w (a0),d0
   13c02:	|  |   jmp (13c06 <compareVars+0x2e>,pc,d0.w)
   13c06:	|  |   ori.b #-112,(a4)
   13c0a:	|  |   ori.l #5243024,(a0)
   13c10:	|  |   ori.l #7733392,(a0)
   13c16:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   13c1c:	|  |   move.l d0,(sp)
			break;
   13c1e:	+--|-- bra.w 13cae <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   13c22:	|  |   move.l 12(sp),d1
   13c26:	|  |   move.l 20(sp),d0
   13c2a:	|  |   cmp.l d1,d0
   13c2c:	|  |   seq d0
   13c2e:	|  |   neg.b d0
   13c30:	|  |   move.b d0,d0
   13c32:	|  |   andi.l #255,d0
   13c38:	|  |   move.l d0,(sp)
			break;
   13c3a:	+--|-- bra.s 13cae <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   13c3c:	|  |   move.l 12(sp),d1
   13c40:	|  |   move.l 20(sp),d0
   13c44:	|  |   cmp.l d1,d0
   13c46:	|  |   seq d0
   13c48:	|  |   neg.b d0
   13c4a:	|  |   move.b d0,d0
   13c4c:	|  |   andi.l #255,d0
   13c52:	|  |   move.l d0,(sp)
			break;
   13c54:	+--|-- bra.s 13cae <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   13c56:	|  |   move.l 20(sp),d1
   13c5a:	|  |   move.l 12(sp),d0
   13c5e:	|  |   move.l d1,-(sp)
   13c60:	|  |   move.l d0,-(sp)
   13c62:	|  |   jsr 1365a <strcmp>
   13c68:	|  |   addq.l #8,sp
   13c6a:	|  |   tst.l d0
   13c6c:	|  |   seq d0
   13c6e:	|  |   neg.b d0
   13c70:	|  |   move.b d0,d0
   13c72:	|  |   andi.l #255,d0
   13c78:	|  |   move.l d0,(sp)
			break;
   13c7a:	+--|-- bra.s 13cae <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   13c7c:	|  |   move.l 12(sp),d1
   13c80:	|  |   move.l 20(sp),d0
   13c84:	|  |   cmp.l d1,d0
   13c86:	|  |   seq d0
   13c88:	|  |   neg.b d0
   13c8a:	|  |   move.b d0,d0
   13c8c:	|  |   andi.l #255,d0
   13c92:	|  |   move.l d0,(sp)
			break;
   13c94:	+--|-- bra.s 13cae <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   13c96:	|  \-> move.l 12(sp),d1
   13c9a:	|      move.l 20(sp),d0
   13c9e:	|      cmp.l d1,d0
   13ca0:	|      seq d0
   13ca2:	|      neg.b d0
   13ca4:	|      move.b d0,d0
   13ca6:	|      andi.l #255,d0
   13cac:	|      move.l d0,(sp)
		}
	}
	return re;
   13cae:	\----> move.l (sp),d0
}
   13cb0:	       addq.l #4,sp
   13cb2:	       rts

00013cb4 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   13cb4:	             lea -16(sp),sp
   13cb8:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   13cba:	             movea.l 28(sp),a0
   13cbe:	             moveq #6,d0
   13cc0:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13cc2:	             moveq #12,d0
   13cc4:	             move.l d0,12(sp)
   13cc8:	             clr.l 8(sp)
   13ccc:	             move.l 1a7a2 <SysBase>,d0
   13cd2:	             movea.l d0,a6
   13cd4:	             move.l 12(sp),d0
   13cd8:	             move.l 8(sp),d1
   13cdc:	             jsr -684(a6)
   13ce0:	             move.l d0,4(sp)
   13ce4:	             move.l 4(sp),d0
   13ce8:	             movea.l 28(sp),a0
   13cec:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   13cf0:	             movea.l 28(sp),a0
   13cf4:	             move.l 4(a0),d0
   13cf8:	         /-- bne.s 13d00 <copyStack+0x4c>
   13cfa:	         |   clr.w d0
   13cfc:	/--------|-- bra.w 13d82 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   13d00:	|        \-> movea.l 28(sp),a0
   13d04:	|            movea.l 4(a0),a0
   13d08:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   13d0a:	|            movea.l 28(sp),a0
   13d0e:	|            movea.l 4(a0),a0
   13d12:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   13d16:	|            movea.l 28(sp),a0
   13d1a:	|            movea.l 4(a0),a0
   13d1e:	|            moveq #1,d0
   13d20:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   13d24:	|            movea.l 24(sp),a0
   13d28:	|            movea.l 4(a0),a0
   13d2c:	|            move.l (a0),16(sp)

	while (a) {
   13d30:	|     /----- bra.s 13d7a <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   13d32:	|  /--|----> movea.l 28(sp),a0
   13d36:	|  |  |      move.l 4(a0),d0
   13d3a:	|  |  |      move.l d0,d1
   13d3c:	|  |  |      move.l 16(sp),d0
   13d40:	|  |  |      move.l d1,-(sp)
   13d42:	|  |  |      move.l d0,-(sp)
   13d44:	|  |  |      jsr 139ea <addVarToStack>
   13d4a:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   13d4c:	|  |  |      movea.l 28(sp),a0
   13d50:	|  |  |      movea.l 4(a0),a0
   13d54:	|  |  |      move.l 4(a0),d0
   13d58:	|  |  |  /-- bne.s 13d70 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   13d5a:	|  |  |  |   movea.l 28(sp),a0
   13d5e:	|  |  |  |   movea.l 4(a0),a1
   13d62:	|  |  |  |   movea.l 28(sp),a0
   13d66:	|  |  |  |   movea.l 4(a0),a0
   13d6a:	|  |  |  |   move.l (a1),d0
   13d6c:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   13d70:	|  |  |  \-> movea.l 16(sp),a0
   13d74:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   13d7a:	|  |  \----> tst.l 16(sp)
   13d7e:	|  \-------- bne.s 13d32 <copyStack+0x7e>
	}

	return TRUE;
   13d80:	|            moveq #1,d0
}
   13d82:	\----------> movea.l (sp)+,a6
   13d84:	             lea 16(sp),sp
   13d88:	             rts

00013d8a <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   13d8a:	                lea -20(sp),sp
   13d8e:	                move.l a6,-(sp)
   13d90:	                move.l 36(sp),d0
   13d94:	                move.w d0,d0
   13d96:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   13d9a:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   13da0:	                clr.l 16(sp)

    while (*huntVar) {
   13da4:	   /----------- bra.s 13e22 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   13da6:	/--|----------> movea.l 20(sp),a0
   13daa:	|  |            movea.l (a0),a0
   13dac:	|  |            movea.l 28(sp),a1
   13db0:	|  |            move.l 4(a1),-(sp)
   13db4:	|  |            move.l (a1),-(sp)
   13db6:	|  |            move.l 4(a0),-(sp)
   13dba:	|  |            move.l (a0),-(sp)
   13dbc:	|  |            jsr 13bd8 <compareVars>
   13dc2:	|  |            lea 16(sp),sp
   13dc6:	|  |            tst.l d0
   13dc8:	|  |  /-------- beq.s 13e14 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   13dca:	|  |  |         movea.l 20(sp),a0
   13dce:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   13dd2:	|  |  |         movea.l 12(sp),a0
   13dd6:	|  |  |         move.l 8(a0),d0
   13dda:	|  |  |         movea.l 20(sp),a0
   13dde:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   13de0:	|  |  |         move.l 12(sp),d0
   13de4:	|  |  |         move.l d0,-(sp)
   13de6:	|  |  |         jsr 143fc <unlinkVar>
   13dec:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   13dee:	|  |  |         move.l 12(sp),8(sp)
   13df4:	|  |  |         move.l 1a7a2 <SysBase>,d0
   13dfa:	|  |  |         movea.l d0,a6
   13dfc:	|  |  |         movea.l 8(sp),a1
   13e00:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   13e04:	|  |  |         tst.w 6(sp)
   13e08:	|  |  |     /-- bne.s 13e0e <deleteVarFromStack+0x84>
   13e0a:	|  |  |     |   moveq #1,d0
   13e0c:	|  |  |  /--|-- bra.s 13e30 <deleteVarFromStack+0xa6>
            reply++;
   13e0e:	|  |  |  |  \-> addq.l #1,16(sp)
   13e12:	|  +--|--|----- bra.s 13e22 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   13e14:	|  |  \--|----> movea.l 20(sp),a0
   13e18:	|  |     |      move.l (a0),d0
   13e1a:	|  |     |      move.l d0,d1
   13e1c:	|  |     |      addq.l #8,d1
   13e1e:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   13e22:	|  \-----|----> movea.l 20(sp),a0
   13e26:	|        |      move.l (a0),d0
   13e28:	\--------|----- bne.w 13da6 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   13e2c:	         |      move.l 16(sp),d0
}
   13e30:	         \----> movea.l (sp)+,a6
   13e32:	                lea 20(sp),sp
   13e36:	                rts

00013e38 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   13e38:	       movea.l 4(sp),a0
   13e3c:	       move.l 4(a0),d0
   13e40:	       cmp.l 8(sp),d0
   13e44:	   /-- bhi.s 13e4a <fastArrayGetByIndex+0x12>
   13e46:	   |   moveq #0,d0
   13e48:	/--|-- bra.s 13e58 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   13e4a:	|  \-> movea.l 4(sp),a0
   13e4e:	|      move.l (a0),d1
   13e50:	|      move.l 8(sp),d0
   13e54:	|      lsl.l #3,d0
   13e56:	|      add.l d1,d0
}
   13e58:	\----> rts

00013e5a <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   13e5a:	                lea -32(sp),sp
   13e5e:	                move.l a6,-(sp)
   13e60:	                move.l a2,-(sp)
    struct persona *p = NULL;
   13e62:	                clr.l 36(sp)

    switch (thisVar->varType) {
   13e66:	                movea.l 44(sp),a0
   13e6a:	                move.l (a0),d0
   13e6c:	                moveq #8,d1
   13e6e:	                cmp.l d0,d1
   13e70:	            /-- beq.s 13e7e <getCostumeFromVar+0x24>
   13e72:	            |   moveq #9,d1
   13e74:	            |   cmp.l d0,d1
   13e76:	   /--------|-- beq.w 13f2c <getCostumeFromVar+0xd2>
   13e7a:	/--|--------|-- bra.w 13f36 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   13e7e:	|  |        \-> moveq #8,d0
   13e80:	|  |            move.l d0,28(sp)
   13e84:	|  |            clr.l 24(sp)
   13e88:	|  |            move.l 1a7a2 <SysBase>,d0
   13e8e:	|  |            movea.l d0,a6
   13e90:	|  |            move.l 28(sp),d0
   13e94:	|  |            move.l 24(sp),d1
   13e98:	|  |            jsr -684(a6)
   13e9c:	|  |            move.l d0,20(sp)
   13ea0:	|  |            move.l 20(sp),d0
   13ea4:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   13ea8:	|  |        /-- bne.s 13eb0 <getCostumeFromVar+0x56>
   13eaa:	|  |        |   moveq #0,d0
   13eac:	|  |  /-----|-- bra.w 13f60 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   13eb0:	|  |  |     \-> movea.l 36(sp),a0
   13eb4:	|  |  |         moveq #1,d1
   13eb6:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   13eba:	|  |  |         moveq #12,d0
   13ebc:	|  |  |         move.l d0,16(sp)
   13ec0:	|  |  |         clr.l 12(sp)
   13ec4:	|  |  |         move.l 1a7a2 <SysBase>,d0
   13eca:	|  |  |         movea.l d0,a6
   13ecc:	|  |  |         move.l 16(sp),d0
   13ed0:	|  |  |         move.l 12(sp),d1
   13ed4:	|  |  |         jsr -684(a6)
   13ed8:	|  |  |         move.l d0,8(sp)
   13edc:	|  |  |         move.l 8(sp),d0
   13ee0:	|  |  |         movea.l 36(sp),a0
   13ee4:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   13ee6:	|  |  |         movea.l 36(sp),a0
   13eea:	|  |  |         move.l (a0),d0
   13eec:	|  |  |     /-- bne.s 13ef2 <getCostumeFromVar+0x98>
   13eee:	|  |  |     |   moveq #0,d0
   13ef0:	|  |  +-----|-- bra.s 13f60 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   13ef2:	|  |  |     \-> clr.l 32(sp)
   13ef6:	|  |  |     /-- bra.s 13f22 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   13ef8:	|  |  |  /--|-> movea.l 44(sp),a0
   13efc:	|  |  |  |  |   move.l 4(a0),d0
   13f00:	|  |  |  |  |   movea.l 36(sp),a0
   13f04:	|  |  |  |  |   movea.l (a0),a0
   13f06:	|  |  |  |  |   move.l 32(sp),d1
   13f0a:	|  |  |  |  |   add.l d1,d1
   13f0c:	|  |  |  |  |   add.l d1,d1
   13f0e:	|  |  |  |  |   lea (0,a0,d1.l),a2
   13f12:	|  |  |  |  |   move.l d0,-(sp)
   13f14:	|  |  |  |  |   jsr 8fb8 <copyAnim>
   13f1a:	|  |  |  |  |   addq.l #4,sp
   13f1c:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   13f1e:	|  |  |  |  |   addq.l #1,32(sp)
   13f22:	|  |  |  |  \-> moveq #2,d1
   13f24:	|  |  |  |      cmp.l 32(sp),d1
   13f28:	|  |  |  \----- bge.s 13ef8 <getCostumeFromVar+0x9e>
            }
            break;
   13f2a:	|  |  |     /-- bra.s 13f5c <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   13f2c:	|  \--|-----|-> movea.l 44(sp),a0
   13f30:	|     |     |   move.l 4(a0),d0
   13f34:	|     +-----|-- bra.s 13f60 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13f36:	\-----|-----|-> movea.l 44(sp),a0
   13f3a:	      |     |   move.l (a0),d0
   13f3c:	      |     |   add.l d0,d0
   13f3e:	      |     |   movea.l d0,a1
   13f40:	      |     |   adda.l d0,a1
   13f42:	      |     |   lea 1a680 <typeName>,a0
   13f48:	      |     |   move.l (0,a1,a0.l),d0
   13f4c:	      |     |   move.l d0,-(sp)
   13f4e:	      |     |   pea 19851 <main_sludge.c.0270f7ba+0x74>
   13f54:	      |     |   jsr 16bac <KPrintF>
   13f5a:	      |     |   addq.l #8,sp
    }

    return p;
   13f5c:	      |     \-> move.l 36(sp),d0
}
   13f60:	      \-------> movea.l (sp)+,a2
   13f62:	                movea.l (sp)+,a6
   13f64:	                lea 32(sp),sp
   13f68:	                rts

00013f6a <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   13f6a:	                lea -96(sp),sp
   13f6e:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   13f72:	                move.l 116(sp),-(sp)
   13f76:	                pea 19889 <main_sludge.c.0270f7ba+0xac>
   13f7c:	                jsr 136da <joinStrings>
   13f82:	                addq.l #8,sp
   13f84:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   13f88:	            /-- bne.s 13f90 <getSavedGamesStack+0x26>
   13f8a:	            |   clr.w d0
   13f8c:	/-----------|-- bra.w 141a4 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   13f90:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   13f94:	|               move.l #104587,98(sp)
   13f9c:	|               moveq #-2,d0
   13f9e:	|               move.l d0,94(sp)
   13fa2:	|               move.l 1a7aa <DOSBase>,d0
   13fa8:	|               movea.l d0,a6
   13faa:	|               move.l 98(sp),d1
   13fae:	|               move.l 94(sp),d2
   13fb2:	|               jsr -84(a6)
   13fb6:	|               move.l d0,90(sp)
   13fba:	|               move.l 90(sp),d0
   13fbe:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   13fc2:	|           /-- bne.s 13fca <getSavedGamesStack+0x60>
   13fc4:	|           |   clr.w d0
   13fc6:	+-----------|-- bra.w 141a4 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   13fca:	|           \-> move.l #260,82(sp)
   13fd2:	|               move.l #65536,78(sp)
   13fda:	|               move.l 1a7a2 <SysBase>,d0
   13fe0:	|               movea.l d0,a6
   13fe2:	|               move.l 82(sp),d0
   13fe6:	|               move.l 78(sp),d1
   13fea:	|               jsr -684(a6)
   13fee:	|               move.l d0,74(sp)
   13ff2:	|               move.l 74(sp),d0
   13ff6:	|               move.l d0,70(sp)
	if (!fib) {
   13ffa:	|           /-- bne.s 14018 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   13ffc:	|           |   move.l 86(sp),22(sp)
   14002:	|           |   move.l 1a7aa <DOSBase>,d0
   14008:	|           |   movea.l d0,a6
   1400a:	|           |   move.l 22(sp),d1
   1400e:	|           |   jsr -90(a6)
		return FALSE;
   14012:	|           |   clr.w d0
   14014:	+-----------|-- bra.w 141a4 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14018:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1401c:	|               move.l 86(sp),66(sp)
   14022:	|               move.l 70(sp),62(sp)
   14028:	|               move.l 1a7aa <DOSBase>,d0
   1402e:	|               movea.l d0,a6
   14030:	|               move.l 66(sp),d1
   14034:	|               move.l 62(sp),d2
   14038:	|               jsr -102(a6)
   1403c:	|               move.l d0,58(sp)
   14040:	|               move.l 58(sp),d0
   14044:	|  /----------- beq.w 14158 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14048:	|  |        /-- bra.w 14124 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   1404c:	|  |  /-----|-> move.l 70(sp),d2
   14050:	|  |  |     |   addq.l #8,d2
   14052:	|  |  |     |   move.l 70(sp),d0
   14056:	|  |  |     |   addq.l #8,d0
   14058:	|  |  |     |   move.l d0,-(sp)
   1405a:	|  |  |     |   jsr 1369a <strlen>
   14060:	|  |  |     |   addq.l #4,sp
   14062:	|  |  |     |   move.l d0,d3
   14064:	|  |  |     |   move.l 116(sp),-(sp)
   14068:	|  |  |     |   jsr 1369a <strlen>
   1406e:	|  |  |     |   addq.l #4,sp
   14070:	|  |  |     |   move.l d3,d1
   14072:	|  |  |     |   sub.l d0,d1
   14074:	|  |  |     |   move.l d2,d0
   14076:	|  |  |     |   add.l d1,d0
   14078:	|  |  |     |   move.l 116(sp),-(sp)
   1407c:	|  |  |     |   move.l d0,-(sp)
   1407e:	|  |  |     |   jsr 1365a <strcmp>
   14084:	|  |  |     |   addq.l #8,sp
   14086:	|  |  |     |   tst.l d0
   14088:	|  |  |     +-- bne.w 14124 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   1408c:	|  |  |     |   move.l 70(sp),d0
   14090:	|  |  |     |   addq.l #8,d0
   14092:	|  |  |     |   move.l d0,-(sp)
   14094:	|  |  |     |   jsr 1369a <strlen>
   1409a:	|  |  |     |   addq.l #4,sp
   1409c:	|  |  |     |   move.l d0,d2
   1409e:	|  |  |     |   move.l 116(sp),-(sp)
   140a2:	|  |  |     |   jsr 1369a <strlen>
   140a8:	|  |  |     |   addq.l #4,sp
   140aa:	|  |  |     |   move.l d0,d1
   140ac:	|  |  |     |   move.l d2,d0
   140ae:	|  |  |     |   sub.l d1,d0
   140b0:	|  |  |     |   movea.l 70(sp),a0
   140b4:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   140b8:	|  |  |     |   move.l 70(sp),d0
   140bc:	|  |  |     |   addq.l #8,d0
   140be:	|  |  |     |   move.l d0,-(sp)
   140c0:	|  |  |     |   jsr 118 <decodeFilename>
   140c6:	|  |  |     |   addq.l #4,sp
   140c8:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   140cc:	|  |  |     |   move.l 42(sp),-(sp)
   140d0:	|  |  |     |   lea 18(sp),a0
   140d4:	|  |  |     |   move.l a0,-(sp)
   140d6:	|  |  |     |   jsr 143d0 <makeTextVar>
   140dc:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   140de:	|  |  |     |   move.l 42(sp),38(sp)
   140e4:	|  |  |     |   move.l 1a7a2 <SysBase>,d0
   140ea:	|  |  |     |   movea.l d0,a6
   140ec:	|  |  |     |   movea.l 38(sp),a1
   140f0:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   140f4:	|  |  |     |   move.l 112(sp),d0
   140f8:	|  |  |     |   move.l d0,-(sp)
   140fa:	|  |  |     |   lea 18(sp),a0
   140fe:	|  |  |     |   move.l a0,-(sp)
   14100:	|  |  |     |   jsr 139ea <addVarToStack>
   14106:	|  |  |     |   addq.l #8,sp
   14108:	|  |  |     |   tst.w d0
   1410a:	|  |  |  /--|-- beq.s 1415c <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1410c:	|  |  |  |  |   movea.l 112(sp),a0
   14110:	|  |  |  |  |   move.l 4(a0),d0
   14114:	|  |  |  |  +-- bne.s 14124 <getSavedGamesStack+0x1ba>
   14116:	|  |  |  |  |   movea.l 112(sp),a0
   1411a:	|  |  |  |  |   move.l (a0),d0
   1411c:	|  |  |  |  |   movea.l 112(sp),a0
   14120:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14124:	|  |  |  |  \-> move.l 86(sp),54(sp)
   1412a:	|  |  |  |      move.l 70(sp),50(sp)
   14130:	|  |  |  |      move.l 1a7aa <DOSBase>,d0
   14136:	|  |  |  |      movea.l d0,a6
   14138:	|  |  |  |      move.l 54(sp),d1
   1413c:	|  |  |  |      move.l 50(sp),d2
   14140:	|  |  |  |      jsr -108(a6)
   14144:	|  |  |  |      move.l d0,46(sp)
   14148:	|  |  |  |      move.l 46(sp),d0
   1414c:	|  |  \--|----- bne.w 1404c <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14150:	|  |     |      move.w #1,106(sp)
   14156:	|  |     |  /-- bra.s 1415e <getSavedGamesStack+0x1f4>
	}

cleanup:
   14158:	|  \-----|--|-> nop
   1415a:	|        |  +-- bra.s 1415e <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1415c:	|        \--|-> nop
	FreeVec(fib);
   1415e:	|           \-> move.l 70(sp),34(sp)
   14164:	|               move.l 1a7a2 <SysBase>,d0
   1416a:	|               movea.l d0,a6
   1416c:	|               movea.l 34(sp),a1
   14170:	|               jsr -690(a6)
	UnLock(dirLock);
   14174:	|               move.l 86(sp),30(sp)
   1417a:	|               move.l 1a7aa <DOSBase>,d0
   14180:	|               movea.l d0,a6
   14182:	|               move.l 30(sp),d1
   14186:	|               jsr -90(a6)
	FreeVec(pattern);
   1418a:	|               move.l 102(sp),26(sp)
   14190:	|               move.l 1a7a2 <SysBase>,d0
   14196:	|               movea.l d0,a6
   14198:	|               movea.l 26(sp),a1
   1419c:	|               jsr -690(a6)
	return result;
   141a0:	|               move.w 106(sp),d0
}
   141a4:	\-------------> movem.l (sp)+,d2-d3/a6
   141a8:	                lea 96(sp),sp
   141ac:	                rts

000141ae <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   141ae:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   141b0:	       movea.l 20(sp),a0
   141b4:	       move.l (a0),d0
   141b6:	       cmp.l 16(sp),d0
   141ba:	/----- beq.s 1421e <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   141bc:	|      move.l 16(sp),d0
   141c0:	|      add.l d0,d0
   141c2:	|      movea.l d0,a1
   141c4:	|      adda.l d0,a1
   141c6:	|      lea 1a680 <typeName>,a0
   141cc:	|      move.l (0,a1,a0.l),d0
   141d0:	|      move.l d0,-(sp)
   141d2:	|      pea 1988d <main_sludge.c.0270f7ba+0xb0>
   141d8:	|      jsr 136da <joinStrings>
   141de:	|      addq.l #8,sp
   141e0:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   141e4:	|      movea.l 20(sp),a0
   141e8:	|      move.l (a0),d0
   141ea:	|      add.l d0,d0
   141ec:	|      movea.l d0,a1
   141ee:	|      adda.l d0,a1
   141f0:	|      lea 1a680 <typeName>,a0
   141f6:	|      move.l (0,a1,a0.l),d0
   141fa:	|      move.l d0,-(sp)
   141fc:	|      pea 198cf <main_sludge.c.0270f7ba+0xf2>
   14202:	|      jsr 136da <joinStrings>
   14208:	|      addq.l #8,sp
   1420a:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1420c:	|      move.l (sp),-(sp)
   1420e:	|      move.l 8(sp),-(sp)
   14212:	|      jsr 16bac <KPrintF>
   14218:	|      addq.l #8,sp

		return FALSE;
   1421a:	|      clr.w d0
   1421c:	|  /-- bra.s 1422e <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1421e:	\--|-> movea.l 20(sp),a0
   14222:	   |   move.l 4(a0),d0
   14226:	   |   movea.l 12(sp),a0
   1422a:	   |   move.l d0,(a0)
	return TRUE;
   1422c:	   |   moveq #1,d0
}
   1422e:	   \-> addq.l #8,sp
   14230:	       rts

00014232 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14232:	move.l 8(sp),-(sp)
   14236:	jsr 650c <getNumberedString>
   1423c:	addq.l #4,sp
   1423e:	move.l d0,-(sp)
   14240:	move.l 8(sp),-(sp)
   14244:	jsr 143d0 <makeTextVar>
   1424a:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   1424c:	movea.l 4(sp),a0
   14250:	move.l 4(a0),d0
   14254:	sne d0
   14256:	neg.b d0
   14258:	move.b d0,d0
   1425a:	andi.w #255,d0
}
   1425e:	rts

00014260 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14260:	          subq.l #8,sp
    int size = stackSize(stacky);
   14262:	          move.l 16(sp),-(sp)
   14266:	          jsr 14b0e <stackSize>
   1426c:	          addq.l #4,sp
   1426e:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14272:	          move.l 4(sp),-(sp)
   14276:	          move.l 16(sp),-(sp)
   1427a:	          jsr 142ca <makeFastArraySize>
   14280:	          addq.l #8,sp
   14282:	          tst.w d0
   14284:	      /-- bne.s 1428a <makeFastArrayFromStack+0x2a>
   14286:	      |   clr.w d0
   14288:	/-----|-- bra.s 142c6 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   1428a:	|     \-> movea.l 16(sp),a0
   1428e:	|         move.l (a0),(sp)
    size = 0;
   14290:	|         clr.l 4(sp)
    while (allV) {
   14294:	|     /-- bra.s 142c0 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14296:	|  /--|-> movea.l 12(sp),a0
   1429a:	|  |  |   movea.l 4(a0),a0
   1429e:	|  |  |   move.l (a0),d1
   142a0:	|  |  |   move.l 4(sp),d0
   142a4:	|  |  |   lsl.l #3,d0
   142a6:	|  |  |   add.l d0,d1
   142a8:	|  |  |   move.l (sp),d0
   142aa:	|  |  |   move.l d1,-(sp)
   142ac:	|  |  |   move.l d0,-(sp)
   142ae:	|  |  |   jsr 1454c <copyMain>
   142b4:	|  |  |   addq.l #8,sp
        size++;
   142b6:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   142ba:	|  |  |   movea.l (sp),a0
   142bc:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   142c0:	|  |  \-> tst.l (sp)
   142c2:	|  \----- bne.s 14296 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   142c4:	|         moveq #1,d0
}
   142c6:	\-------> addq.l #8,sp
   142c8:	          rts

000142ca <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   142ca:	          lea -28(sp),sp
   142ce:	          move.l a6,-(sp)
    if (size < 0) {
   142d0:	          tst.l 40(sp)
   142d4:	      /-- bge.s 142ea <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   142d6:	      |   pea 19914 <main_sludge.c.0270f7ba+0x137>
   142dc:	      |   jsr 16bac <KPrintF>
   142e2:	      |   addq.l #4,sp
		return FALSE;
   142e4:	      |   clr.w d0
   142e6:	/-----|-- bra.w 143c8 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   142ea:	|     \-> move.l 36(sp),-(sp)
   142ee:	|         jsr 143fc <unlinkVar>
   142f4:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   142f6:	|         movea.l 36(sp),a0
   142fa:	|         moveq #10,d0
   142fc:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   142fe:	|         moveq #12,d0
   14300:	|         move.l d0,24(sp)
   14304:	|         clr.l 20(sp)
   14308:	|         move.l 1a7a2 <SysBase>,d0
   1430e:	|         movea.l d0,a6
   14310:	|         move.l 24(sp),d0
   14314:	|         move.l 20(sp),d1
   14318:	|         jsr -684(a6)
   1431c:	|         move.l d0,16(sp)
   14320:	|         move.l 16(sp),d0
   14324:	|         movea.l 36(sp),a0
   14328:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   1432c:	|         movea.l 36(sp),a0
   14330:	|         move.l 4(a0),d0
   14334:	|     /-- bne.s 1433c <makeFastArraySize+0x72>
   14336:	|     |   clr.w d0
   14338:	+-----|-- bra.w 143c8 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   1433c:	|     \-> move.l 40(sp),d0
   14340:	|         lsl.l #3,d0
   14342:	|         move.l d0,12(sp)
   14346:	|         clr.l 8(sp)
   1434a:	|         move.l 1a7a2 <SysBase>,d0
   14350:	|         movea.l d0,a6
   14352:	|         move.l 12(sp),d0
   14356:	|         move.l 8(sp),d1
   1435a:	|         jsr -684(a6)
   1435e:	|         move.l d0,4(sp)
   14362:	|         move.l 4(sp),d0
   14366:	|         movea.l 36(sp),a0
   1436a:	|         movea.l 4(a0),a0
   1436e:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14370:	|         movea.l 36(sp),a0
   14374:	|         movea.l 4(a0),a0
   14378:	|         move.l (a0),d0
   1437a:	|     /-- bne.s 14380 <makeFastArraySize+0xb6>
   1437c:	|     |   clr.w d0
   1437e:	+-----|-- bra.s 143c8 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14380:	|     \-> clr.l 28(sp)
   14384:	|     /-- bra.s 143a0 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14386:	|  /--|-> movea.l 36(sp),a0
   1438a:	|  |  |   movea.l 4(a0),a0
   1438e:	|  |  |   move.l (a0),d1
   14390:	|  |  |   move.l 28(sp),d0
   14394:	|  |  |   lsl.l #3,d0
   14396:	|  |  |   movea.l d1,a0
   14398:	|  |  |   adda.l d0,a0
   1439a:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   1439c:	|  |  |   addq.l #1,28(sp)
   143a0:	|  |  \-> move.l 28(sp),d0
   143a4:	|  |      cmp.l 40(sp),d0
   143a8:	|  \----- blt.s 14386 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   143aa:	|         movea.l 36(sp),a0
   143ae:	|         movea.l 4(a0),a0
   143b2:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   143b8:	|         movea.l 36(sp),a0
   143bc:	|         movea.l 4(a0),a0
   143c0:	|         moveq #1,d0
   143c2:	|         move.l d0,8(a0)
    return TRUE;
   143c6:	|         moveq #1,d0
}
   143c8:	\-------> movea.l (sp)+,a6
   143ca:	          lea 28(sp),sp
   143ce:	          rts

000143d0 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   143d0:	move.l 4(sp),-(sp)
   143d4:	jsr 143fc <unlinkVar>
   143da:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   143dc:	movea.l 4(sp),a0
   143e0:	moveq #3,d0
   143e2:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   143e4:	move.l 8(sp),-(sp)
   143e8:	jsr b8 <copyString>
   143ee:	addq.l #4,sp
   143f0:	movea.l 4(sp),a0
   143f4:	move.l d0,4(a0)
}
   143f8:	nop
   143fa:	rts

000143fc <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   143fc:	                      lea -16(sp),sp
   14400:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14402:	                      movea.l 24(sp),a0
   14406:	                      move.l (a0),d0
   14408:	                      moveq #10,d1
   1440a:	                      cmp.l d0,d1
   1440c:	            /-------- beq.w 144c4 <unlinkVar+0xc8>
   14410:	            |         moveq #10,d1
   14412:	            |         cmp.l d0,d1
   14414:	/-----------|-------- bcs.w 14538 <unlinkVar+0x13c>
   14418:	|           |         moveq #8,d1
   1441a:	|           |         cmp.l d0,d1
   1441c:	|  /--------|-------- beq.w 14524 <unlinkVar+0x128>
   14420:	|  |        |         moveq #8,d1
   14422:	|  |        |         cmp.l d0,d1
   14424:	+--|--------|-------- bcs.w 14538 <unlinkVar+0x13c>
   14428:	|  |        |         moveq #3,d1
   1442a:	|  |        |         cmp.l d0,d1
   1442c:	|  |        |     /-- beq.s 14438 <unlinkVar+0x3c>
   1442e:	|  |        |     |   moveq #6,d1
   14430:	|  |        |     |   cmp.l d0,d1
   14432:	|  |        |  /--|-- beq.s 1445e <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14434:	+--|--------|--|--|-- bra.w 14538 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14438:	|  |        |  |  \-> movea.l 24(sp),a0
   1443c:	|  |        |  |      move.l 4(a0),4(sp)
   14442:	|  |        |  |      move.l 1a7a2 <SysBase>,d0
   14448:	|  |        |  |      movea.l d0,a6
   1444a:	|  |        |  |      movea.l 4(sp),a1
   1444e:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14452:	|  |        |  |      movea.l 24(sp),a0
   14456:	|  |        |  |      clr.l 4(a0)
		break;
   1445a:	|  |  /-----|--|----- bra.w 14542 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   1445e:	|  |  |     |  \----> movea.l 24(sp),a0
   14462:	|  |  |     |         movea.l 4(a0),a0
   14466:	|  |  |     |         move.l 8(a0),d0
   1446a:	|  |  |     |         subq.l #1,d0
   1446c:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14470:	|  |  |     |         movea.l 24(sp),a0
   14474:	|  |  |     |         movea.l 4(a0),a0
   14478:	|  |  |     |         move.l 8(a0),d0
   1447c:	|  |  |  /--|-------- bgt.w 1453c <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14480:	|  |  |  |  |     /-- bra.s 14494 <unlinkVar+0x98>
   14482:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14486:	|  |  |  |  |  |  |   move.l 4(a0),d0
   1448a:	|  |  |  |  |  |  |   move.l d0,-(sp)
   1448c:	|  |  |  |  |  |  |   jsr 14b32 <trimStack>
   14492:	|  |  |  |  |  |  |   addq.l #4,sp
   14494:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14498:	|  |  |  |  |  |      movea.l 4(a0),a0
   1449c:	|  |  |  |  |  |      move.l (a0),d0
   1449e:	|  |  |  |  |  \----- bne.s 14482 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   144a0:	|  |  |  |  |         movea.l 24(sp),a0
   144a4:	|  |  |  |  |         move.l 4(a0),8(sp)
   144aa:	|  |  |  |  |         move.l 1a7a2 <SysBase>,d0
   144b0:	|  |  |  |  |         movea.l d0,a6
   144b2:	|  |  |  |  |         movea.l 8(sp),a1
   144b6:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   144ba:	|  |  |  |  |         movea.l 24(sp),a0
   144be:	|  |  |  |  |         clr.l 4(a0)
		break;
   144c2:	|  |  |  +--|-------- bra.s 1453c <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   144c4:	|  |  |  |  \-------> movea.l 24(sp),a0
   144c8:	|  |  |  |            movea.l 4(a0),a0
   144cc:	|  |  |  |            move.l 8(a0),d0
   144d0:	|  |  |  |            subq.l #1,d0
   144d2:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   144d6:	|  |  |  |            movea.l 24(sp),a0
   144da:	|  |  |  |            movea.l 4(a0),a0
   144de:	|  |  |  |            move.l 8(a0),d0
   144e2:	|  |  |  |        /-- bgt.s 14540 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   144e4:	|  |  |  |        |   movea.l 24(sp),a0
   144e8:	|  |  |  |        |   movea.l 4(a0),a0
   144ec:	|  |  |  |        |   move.l (a0),16(sp)
   144f0:	|  |  |  |        |   move.l 1a7a2 <SysBase>,d0
   144f6:	|  |  |  |        |   movea.l d0,a6
   144f8:	|  |  |  |        |   movea.l 16(sp),a1
   144fc:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14500:	|  |  |  |        |   movea.l 24(sp),a0
   14504:	|  |  |  |        |   move.l 4(a0),12(sp)
   1450a:	|  |  |  |        |   move.l 1a7a2 <SysBase>,d0
   14510:	|  |  |  |        |   movea.l d0,a6
   14512:	|  |  |  |        |   movea.l 12(sp),a1
   14516:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   1451a:	|  |  |  |        |   movea.l 24(sp),a0
   1451e:	|  |  |  |        |   clr.l 4(a0)
		break;
   14522:	|  |  |  |        +-- bra.s 14540 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14524:	|  \--|--|--------|-> movea.l 24(sp),a0
   14528:	|     |  |        |   move.l 4(a0),d0
   1452c:	|     |  |        |   move.l d0,-(sp)
   1452e:	|     |  |        |   jsr 9384 <deleteAnim>
   14534:	|     |  |        |   addq.l #4,sp
		break;
   14536:	|     +--|--------|-- bra.s 14542 <unlinkVar+0x146>
		break;
   14538:	\-----|--|--------|-> nop
   1453a:	      +--|--------|-- bra.s 14542 <unlinkVar+0x146>
		break;
   1453c:	      |  \--------|-> nop
   1453e:	      +-----------|-- bra.s 14542 <unlinkVar+0x146>
		break;
   14540:	      |           \-> nop
	}
}
   14542:	      \-------------> nop
   14544:	                      movea.l (sp)+,a6
   14546:	                      lea 16(sp),sp
   1454a:	                      rts

0001454c <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   1454c:	       movea.l 4(sp),a0
   14550:	       move.l (a0),d0
   14552:	       movea.l 8(sp),a0
   14556:	       move.l d0,(a0)
	switch (to->varType) {
   14558:	       movea.l 8(sp),a0
   1455c:	       move.l (a0),d0
   1455e:	       moveq #10,d1
   14560:	       cmp.l d0,d1
   14562:	/----- bcs.w 14654 <copyMain+0x108>
   14566:	|      add.l d0,d0
   14568:	|      movea.l d0,a0
   1456a:	|      adda.l #83318,a0
   14570:	|      move.w (a0),d0
   14572:	|      jmp (14576 <copyMain+0x2a>,pc,d0.w)
   14576:	|      .short 0x00da
   14578:	|      ori.b #22,(a6)
   1457c:	|      ori.w #22,(a4)
   14580:	|      ori.b #-126,(a6)
   14584:	|      ori.b #-68,(a6)
   14588:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14590:	|      move.l 4(a0),d0
   14594:	|      movea.l 8(sp),a0
   14598:	|      move.l d0,4(a0)
		return TRUE;
   1459c:	|      moveq #1,d0
   1459e:	|  /-- bra.w 14666 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   145a2:	|  |   movea.l 4(sp),a0
   145a6:	|  |   move.l 4(a0),d0
   145aa:	|  |   movea.l 8(sp),a0
   145ae:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   145b2:	|  |   movea.l 8(sp),a0
   145b6:	|  |   movea.l 4(a0),a0
   145ba:	|  |   move.l 8(a0),d0
   145be:	|  |   addq.l #1,d0
   145c0:	|  |   move.l d0,8(a0)
		return TRUE;
   145c4:	|  |   moveq #1,d0
   145c6:	|  +-- bra.w 14666 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   145ca:	|  |   movea.l 4(sp),a0
   145ce:	|  |   move.l 4(a0),d0
   145d2:	|  |   move.l d0,-(sp)
   145d4:	|  |   jsr b8 <copyString>
   145da:	|  |   addq.l #4,sp
   145dc:	|  |   movea.l 8(sp),a0
   145e0:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   145e4:	|  |   movea.l 8(sp),a0
   145e8:	|  |   move.l 4(a0),d0
   145ec:	|  |   sne d0
   145ee:	|  |   neg.b d0
   145f0:	|  |   move.b d0,d0
   145f2:	|  |   andi.w #255,d0
   145f6:	|  +-- bra.s 14666 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   145f8:	|  |   movea.l 4(sp),a0
   145fc:	|  |   move.l 4(a0),d0
   14600:	|  |   movea.l 8(sp),a0
   14604:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14608:	|  |   movea.l 8(sp),a0
   1460c:	|  |   movea.l 4(a0),a0
   14610:	|  |   move.l 8(a0),d0
   14614:	|  |   addq.l #1,d0
   14616:	|  |   move.l d0,8(a0)
		return TRUE;
   1461a:	|  |   moveq #1,d0
   1461c:	|  +-- bra.s 14666 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   1461e:	|  |   movea.l 4(sp),a0
   14622:	|  |   move.l 4(a0),d0
   14626:	|  |   movea.l 8(sp),a0
   1462a:	|  |   move.l d0,4(a0)
		return TRUE;
   1462e:	|  |   moveq #1,d0
   14630:	|  +-- bra.s 14666 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14632:	|  |   movea.l 4(sp),a0
   14636:	|  |   move.l 4(a0),d0
   1463a:	|  |   move.l d0,-(sp)
   1463c:	|  |   jsr 8fb8 <copyAnim>
   14642:	|  |   addq.l #4,sp
   14644:	|  |   movea.l 8(sp),a0
   14648:	|  |   move.l d0,4(a0)
		return TRUE;
   1464c:	|  |   moveq #1,d0
   1464e:	|  +-- bra.s 14666 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14650:	|  |   moveq #1,d0
   14652:	|  +-- bra.s 14666 <copyMain+0x11a>

		default:
		break;
   14654:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14656:	   |   pea 19965 <main_sludge.c.0270f7ba+0x188>
   1465c:	   |   jsr 16bac <KPrintF>
   14662:	   |   addq.l #4,sp
	return FALSE;
   14664:	   |   clr.w d0
}
   14666:	   \-> rts

00014668 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14668:	move.l 8(sp),-(sp)
   1466c:	jsr 143fc <unlinkVar>
   14672:	addq.l #4,sp
	return copyMain(from, to);
   14674:	move.l 8(sp),-(sp)
   14678:	move.l 8(sp),-(sp)
   1467c:	jsr 1454c <copyMain>
   14682:	addq.l #8,sp
}
   14684:	rts

00014686 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14686:	       movea.l 4(sp),a0
   1468a:	       move.l (a0),d0
   1468c:	       moveq #8,d1
   1468e:	       cmp.l d0,d1
   14690:	   /-- bne.s 146a6 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14692:	   |   movea.l 4(sp),a0
   14696:	   |   move.l 4(a0),d0
   1469a:	   |   move.l d0,-(sp)
   1469c:	   |   jsr 8fb8 <copyAnim>
   146a2:	   |   addq.l #4,sp
   146a4:	/--|-- bra.s 146ec <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   146a6:	|  \-> movea.l 4(sp),a0
   146aa:	|      move.l (a0),d0
   146ac:	|      moveq #1,d1
   146ae:	|      cmp.l d0,d1
   146b0:	|  /-- bne.s 146c4 <getAnimationFromVar+0x3e>
   146b2:	|  |   movea.l 4(sp),a0
   146b6:	|  |   move.l 4(a0),d0
   146ba:	|  +-- bne.s 146c4 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   146bc:	|  |   jsr a788 <makeNullAnim>
   146c2:	+--|-- bra.s 146ec <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   146c4:	|  \-> movea.l 4(sp),a0
   146c8:	|      move.l (a0),d0
   146ca:	|      add.l d0,d0
   146cc:	|      movea.l d0,a1
   146ce:	|      adda.l d0,a1
   146d0:	|      lea 1a680 <typeName>,a0
   146d6:	|      move.l (0,a1,a0.l),d0
   146da:	|      move.l d0,-(sp)
   146dc:	|      pea 19851 <main_sludge.c.0270f7ba+0x74>
   146e2:	|      jsr 16bac <KPrintF>
   146e8:	|      addq.l #8,sp
	return NULL;
   146ea:	|      moveq #0,d0
}
   146ec:	\----> rts

000146ee <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   146ee:	       movea.l 4(sp),a0
   146f2:	       move.l (a0),d0
   146f4:	       moveq #10,d1
   146f6:	       cmp.l d0,d1
   146f8:	/----- bcs.w 1477e <getBoolean+0x90>
   146fc:	|      add.l d0,d0
   146fe:	|      movea.l d0,a0
   14700:	|      adda.l #83724,a0
   14706:	|      move.w (a0),d0
   14708:	|      jmp (1470c <getBoolean+0x1e>,pc,d0.w)
   1470c:	|      ori.b #26,(a6)
   14710:	|      ori.w #68,(114,a2,d0.w)
   14716:	|      ori.w #46,(114,a2,d0.w)
   1471c:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14722:	|      clr.w d0
   14724:	|  /-- bra.s 14782 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14726:	|  |   movea.l 4(sp),a0
   1472a:	|  |   move.l 4(a0),d0
   1472e:	|  |   sne d0
   14730:	|  |   neg.b d0
   14732:	|  |   move.b d0,d0
   14734:	|  |   andi.w #255,d0
   14738:	|  +-- bra.s 14782 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   1473a:	|  |   movea.l 4(sp),a0
   1473e:	|  |   movea.l 4(a0),a0
   14742:	|  |   move.l (a0),d0
   14744:	|  |   sne d0
   14746:	|  |   neg.b d0
   14748:	|  |   move.b d0,d0
   1474a:	|  |   andi.w #255,d0
   1474e:	|  +-- bra.s 14782 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14750:	|  |   movea.l 4(sp),a0
   14754:	|  |   movea.l 4(a0),a0
   14758:	|  |   move.b (a0),d0
   1475a:	|  |   sne d0
   1475c:	|  |   neg.b d0
   1475e:	|  |   move.b d0,d0
   14760:	|  |   andi.w #255,d0
   14764:	|  +-- bra.s 14782 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14766:	|  |   movea.l 4(sp),a0
   1476a:	|  |   movea.l 4(a0),a0
   1476e:	|  |   move.l 4(a0),d0
   14772:	|  |   sne d0
   14774:	|  |   neg.b d0
   14776:	|  |   move.b d0,d0
   14778:	|  |   andi.w #255,d0
   1477c:	|  +-- bra.s 14782 <getBoolean+0x94>

		default:
		break;
   1477e:	\--|-> nop
	}
	return TRUE;
   14780:	   |   moveq #1,d0
}
   14782:	   \-> rts

00014784 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14784:	      /----------> lea -76(sp),sp
   14788:	      |            move.l a6,-(sp)
	switch (from->varType) {
   1478a:	      |            movea.l 84(sp),a0
   1478e:	      |            move.l (a0),d0
   14790:	      |            moveq #10,d1
   14792:	      |            cmp.l d0,d1
   14794:	/-----|----------- bcs.w 14a32 <getTextFromAnyVar+0x2ae>
   14798:	|     |            add.l d0,d0
   1479a:	|     |            movea.l d0,a0
   1479c:	|     |            adda.l #83880,a0
   147a2:	|     |            move.w (a0),d0
   147a4:	|     |            jmp (147a8 <getTextFromAnyVar+0x24>,pc,d0.w)
   147a8:	|     |            .short 0x028a
   147aa:	|     |            bset d0,(a0)+
   147ac:	|     |            .short 0x028a
   147ae:	|     |            ori.b #-118,(a6)
   147b2:	|     |            andi.b #8,ccr
   147b6:	|     |            andi.w #650,-(a0)
   147ba:	|     |            .short 0x028a
   147bc:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   147c2:	|     |            move.l 4(a0),d0
   147c6:	|     |            move.l d0,-(sp)
   147c8:	|     |            jsr b8 <copyString>
   147ce:	|     |            addq.l #4,sp
   147d0:	|  /--|----------- bra.w 14a54 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   147d4:	|  |  |            pea 19978 <main_sludge.c.0270f7ba+0x19b>
   147da:	|  |  |            jsr b8 <copyString>
   147e0:	|  |  |            addq.l #4,sp
   147e2:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   147e6:	|  |  |            clr.l 72(sp)
   147ea:	|  |  |     /----- bra.w 14894 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   147ee:	|  |  |  /--|----> pea 1997e <main_sludge.c.0270f7ba+0x1a1>
   147f4:	|  |  |  |  |      move.l 80(sp),-(sp)
   147f8:	|  |  |  |  |      jsr 136da <joinStrings>
   147fe:	|  |  |  |  |      addq.l #8,sp
   14800:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14804:	|  |  |  |  |  /-- bne.s 1480c <getTextFromAnyVar+0x88>
   14806:	|  |  |  |  |  |   moveq #0,d0
   14808:	|  +--|--|--|--|-- bra.w 14a54 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1480c:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14812:	|  |  |  |  |      move.l 1a7a2 <SysBase>,d0
   14818:	|  |  |  |  |      movea.l d0,a6
   1481a:	|  |  |  |  |      movea.l 56(sp),a1
   1481e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14822:	|  |  |  |  |      movea.l 84(sp),a0
   14826:	|  |  |  |  |      movea.l 4(a0),a0
   1482a:	|  |  |  |  |      move.l (a0),d1
   1482c:	|  |  |  |  |      move.l 72(sp),d0
   14830:	|  |  |  |  |      lsl.l #3,d0
   14832:	|  |  |  |  |      add.l d1,d0
   14834:	|  |  |  |  |      move.l d0,-(sp)
   14836:	|  |  +--|--|----- jsr 14784 <getTextFromAnyVar>(pc)
   1483a:	|  |  |  |  |      addq.l #4,sp
   1483c:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14840:	|  |  |  |  |      move.l 52(sp),-(sp)
   14844:	|  |  |  |  |      move.l 64(sp),-(sp)
   14848:	|  |  |  |  |      jsr 136da <joinStrings>
   1484e:	|  |  |  |  |      addq.l #8,sp
   14850:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14854:	|  |  |  |  |  /-- bne.s 1485c <getTextFromAnyVar+0xd8>
   14856:	|  |  |  |  |  |   moveq #0,d0
   14858:	|  +--|--|--|--|-- bra.w 14a54 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1485c:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14862:	|  |  |  |  |      move.l 1a7a2 <SysBase>,d0
   14868:	|  |  |  |  |      movea.l d0,a6
   1486a:	|  |  |  |  |      movea.l 48(sp),a1
   1486e:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14872:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14876:	|  |  |  |  |      move.l 60(sp),44(sp)
   1487c:	|  |  |  |  |      move.l 1a7a2 <SysBase>,d0
   14882:	|  |  |  |  |      movea.l d0,a6
   14884:	|  |  |  |  |      movea.l 44(sp),a1
   14888:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   1488c:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14890:	|  |  |  |  |      addq.l #1,72(sp)
   14894:	|  |  |  |  \----> movea.l 84(sp),a0
   14898:	|  |  |  |         movea.l 4(a0),a0
   1489c:	|  |  |  |         move.l 4(a0),d0
   148a0:	|  |  |  |         cmp.l 72(sp),d0
   148a4:	|  |  |  \-------- bgt.w 147ee <getTextFromAnyVar+0x6a>
			}
			return builder;
   148a8:	|  |  |            move.l 76(sp),d0
   148ac:	|  +--|----------- bra.w 14a54 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   148b0:	|  |  |            pea 19980 <main_sludge.c.0270f7ba+0x1a3>
   148b6:	|  |  |            jsr b8 <copyString>
   148bc:	|  |  |            addq.l #4,sp
   148be:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   148c2:	|  |  |            movea.l 84(sp),a0
   148c6:	|  |  |            movea.l 4(a0),a0
   148ca:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   148ce:	|  |  |     /----- bra.w 14970 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   148d2:	|  |  |  /--|----> pea 1997e <main_sludge.c.0270f7ba+0x1a1>
   148d8:	|  |  |  |  |      move.l 72(sp),-(sp)
   148dc:	|  |  |  |  |      jsr 136da <joinStrings>
   148e2:	|  |  |  |  |      addq.l #8,sp
   148e4:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   148e8:	|  |  |  |  |  /-- bne.s 148f0 <getTextFromAnyVar+0x16c>
   148ea:	|  |  |  |  |  |   moveq #0,d0
   148ec:	|  +--|--|--|--|-- bra.w 14a54 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   148f0:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   148f6:	|  |  |  |  |      move.l 1a7a2 <SysBase>,d0
   148fc:	|  |  |  |  |      movea.l d0,a6
   148fe:	|  |  |  |  |      movea.l 32(sp),a1
   14902:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14906:	|  |  |  |  |      move.l 64(sp),d0
   1490a:	|  |  |  |  |      move.l d0,-(sp)
   1490c:	|  |  \--|--|----- jsr 14784 <getTextFromAnyVar>(pc)
   14910:	|  |     |  |      addq.l #4,sp
   14912:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14916:	|  |     |  |      move.l 28(sp),-(sp)
   1491a:	|  |     |  |      move.l 40(sp),-(sp)
   1491e:	|  |     |  |      jsr 136da <joinStrings>
   14924:	|  |     |  |      addq.l #8,sp
   14926:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   1492a:	|  |     |  |  /-- bne.s 14932 <getTextFromAnyVar+0x1ae>
   1492c:	|  |     |  |  |   moveq #0,d0
   1492e:	|  +-----|--|--|-- bra.w 14a54 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14932:	|  |     |  |  \-> move.l 28(sp),24(sp)
   14938:	|  |     |  |      move.l 1a7a2 <SysBase>,d0
   1493e:	|  |     |  |      movea.l d0,a6
   14940:	|  |     |  |      movea.l 24(sp),a1
   14944:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14948:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   1494c:	|  |     |  |      move.l 36(sp),20(sp)
   14952:	|  |     |  |      move.l 1a7a2 <SysBase>,d0
   14958:	|  |     |  |      movea.l d0,a6
   1495a:	|  |     |  |      movea.l 20(sp),a1
   1495e:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14962:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14966:	|  |     |  |      movea.l 64(sp),a0
   1496a:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14970:	|  |     |  \----> tst.l 64(sp)
   14974:	|  |     \-------- bne.w 148d2 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14978:	|  |               move.l 68(sp),d0
   1497c:	|  +-------------- bra.w 14a54 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14980:	|  |               moveq #10,d0
   14982:	|  |               move.l d0,16(sp)
   14986:	|  |               clr.l 12(sp)
   1498a:	|  |               move.l 1a7a2 <SysBase>,d0
   14990:	|  |               movea.l d0,a6
   14992:	|  |               move.l 16(sp),d0
   14996:	|  |               move.l 12(sp),d1
   1499a:	|  |               jsr -684(a6)
   1499e:	|  |               move.l d0,8(sp)
   149a2:	|  |               move.l 8(sp),d0
   149a6:	|  |               move.l d0,4(sp)
			if (! buff) {
   149aa:	|  |           /-- bne.s 149c0 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   149ac:	|  |           |   pea 19987 <main_sludge.c.0270f7ba+0x1aa>
   149b2:	|  |           |   jsr 16bac <KPrintF>
   149b8:	|  |           |   addq.l #4,sp
				return NULL;
   149ba:	|  |           |   moveq #0,d0
   149bc:	|  +-----------|-- bra.w 14a54 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   149c0:	|  |           \-> movea.l 84(sp),a0
   149c4:	|  |               move.l 4(a0),d0
   149c8:	|  |               move.l d0,-(sp)
   149ca:	|  |               pea 199b1 <main_sludge.c.0270f7ba+0x1d4>
   149d0:	|  |               move.l 12(sp),-(sp)
   149d4:	|  |               jsr 139b8 <sprintf>
   149da:	|  |               lea 12(sp),sp
			return buff;
   149de:	|  |               move.l 4(sp),d0
   149e2:	|  +-------------- bra.s 14a54 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   149e4:	|  |               movea.l 84(sp),a0
   149e8:	|  |               move.l 4(a0),d0
   149ec:	|  |               move.l d0,-(sp)
   149ee:	|  |               jsr 3992 <resourceNameFromNum>
   149f4:	|  |               addq.l #4,sp
   149f6:	|  |               move.l d0,-(sp)
   149f8:	|  |               pea 182f1 <PutChar+0xc71>
   149fe:	|  |               jsr 136da <joinStrings>
   14a04:	|  |               addq.l #8,sp
   14a06:	|  +-------------- bra.s 14a54 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14a08:	|  |               movea.l 84(sp),a0
   14a0c:	|  |               move.l 4(a0),d0
   14a10:	|  |               move.l d0,-(sp)
   14a12:	|  |               jsr cf80 <findObjectType>
   14a18:	|  |               addq.l #4,sp
   14a1a:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14a1e:	+--|-------------- beq.s 14a32 <getTextFromAnyVar+0x2ae>
   14a20:	|  |               movea.l 40(sp),a0
   14a24:	|  |               move.l (a0),d0
   14a26:	|  |               move.l d0,-(sp)
   14a28:	|  |               jsr b8 <copyString>
   14a2e:	|  |               addq.l #4,sp
   14a30:	|  +-------------- bra.s 14a54 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14a32:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14a34:	   |               movea.l 84(sp),a0
   14a38:	   |               move.l (a0),d0
   14a3a:	   |               add.l d0,d0
   14a3c:	   |               movea.l d0,a1
   14a3e:	   |               adda.l d0,a1
   14a40:	   |               lea 1a680 <typeName>,a0
   14a46:	   |               move.l (0,a1,a0.l),d0
   14a4a:	   |               move.l d0,-(sp)
   14a4c:	   |               jsr b8 <copyString>
   14a52:	   |               addq.l #4,sp
}
   14a54:	   \-------------> movea.l (sp)+,a6
   14a56:	                   lea 76(sp),sp
   14a5a:	                   rts

00014a5c <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14a5c:	move.l 4(sp),-(sp)
   14a60:	jsr 143fc <unlinkVar>
   14a66:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   14a68:	movea.l 4(sp),a0
   14a6c:	moveq #8,d0
   14a6e:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14a70:	movea.l 4(sp),a0
   14a74:	move.l 8(sp),4(a0)
}
   14a7a:	nop
   14a7c:	rts

00014a7e <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14a7e:	move.l 4(sp),-(sp)
   14a82:	jsr 143fc <unlinkVar>
   14a88:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14a8a:	movea.l 4(sp),a0
   14a8e:	moveq #9,d0
   14a90:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14a92:	movea.l 4(sp),a0
   14a96:	move.l 8(sp),4(a0)
}
   14a9c:	nop
   14a9e:	rts

00014aa0 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   14aa0:	move.l 4(sp),-(sp)
   14aa4:	jsr 143fc <unlinkVar>
   14aaa:	addq.l #4,sp
	thisVar->varType = vT;
   14aac:	movea.l 4(sp),a0
   14ab0:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   14ab4:	movea.l 4(sp),a0
   14ab8:	move.l 12(sp),4(a0)
}
   14abe:	nop
   14ac0:	rts

00014ac2 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14ac2:	      /-- bra.s 14ad4 <stackGetByIndex+0x12>
        vS = vS->next;
   14ac4:	/-----|-> movea.l 4(sp),a0
   14ac8:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14ace:	|     +-- bne.s 14ad4 <stackGetByIndex+0x12>
            return NULL;
   14ad0:	|     |   moveq #0,d0
   14ad2:	|  /--|-- bra.s 14ae8 <stackGetByIndex+0x26>
    while (theIndex--) {
   14ad4:	|  |  \-> move.l 8(sp),d0
   14ad8:	|  |      move.l d0,d1
   14ada:	|  |      subq.l #1,d1
   14adc:	|  |      move.l d1,8(sp)
   14ae0:	|  |      tst.l d0
   14ae2:	\--|----- bne.s 14ac4 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   14ae4:	   |      move.l 4(sp),d0
}
   14ae8:	   \----> rts

00014aea <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14aea:	          tst.l 4(sp)
   14aee:	      /-- bne.s 14afe <stackFindLast+0x14>
		return NULL;
   14af0:	      |   moveq #0,d0
   14af2:	/-----|-- bra.s 14b0c <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   14af4:	|  /--|-> movea.l 4(sp),a0
   14af8:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   14afe:	|  |  \-> movea.l 4(sp),a0
   14b02:	|  |      move.l 8(a0),d0
   14b06:	|  \----- bne.s 14af4 <stackFindLast+0xa>

	return hunt;
   14b08:	|         move.l 4(sp),d0
}
   14b0c:	\-------> rts

00014b0e <stackSize>:

int stackSize (const struct stackHandler * me) {
   14b0e:	       subq.l #8,sp
	int r = 0;
   14b10:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   14b14:	       movea.l 12(sp),a0
   14b18:	       move.l (a0),(sp)
	while (a) {
   14b1a:	   /-- bra.s 14b26 <stackSize+0x18>
		r ++;
   14b1c:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   14b20:	|  |   movea.l (sp),a0
   14b22:	|  |   move.l 8(a0),(sp)
	while (a) {
   14b26:	|  \-> tst.l (sp)
   14b28:	\----- bne.s 14b1c <stackSize+0xe>
	}
	return r;
   14b2a:	       move.l 4(sp),d0
}
   14b2e:	       addq.l #8,sp
   14b30:	       rts

00014b32 <trimStack>:

void trimStack (struct variableStack ** stack) {
   14b32:	subq.l #8,sp
   14b34:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   14b36:	movea.l 16(sp),a0
   14b3a:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14b3e:	movea.l 16(sp),a0
   14b42:	movea.l (a0),a0
   14b44:	move.l 8(a0),d0
   14b48:	movea.l 16(sp),a0
   14b4c:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14b4e:	move.l 8(sp),d0
   14b52:	move.l d0,-(sp)
   14b54:	jsr 143fc <unlinkVar>
   14b5a:	addq.l #4,sp
	FreeVec(killMe);
   14b5c:	move.l 8(sp),4(sp)
   14b62:	move.l 1a7a2 <SysBase>,d0
   14b68:	movea.l d0,a6
   14b6a:	movea.l 4(sp),a1
   14b6e:	jsr -690(a6)
   14b72:	nop
   14b74:	movea.l (sp)+,a6
   14b76:	addq.l #8,sp
   14b78:	rts

00014b7a <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14b7a:	       lea -52(sp),sp
   14b7e:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14b80:	       pea 199b4 <main_sludge.c.0270f7ba+0x1d7>
   14b86:	       jsr 16bac <KPrintF>
   14b8c:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14b8e:	       moveq #64,d0
   14b90:	       move.l d0,52(sp)
   14b94:	       clr.l 48(sp)
   14b98:	       move.l 1a7a2 <SysBase>,d0
   14b9e:	       movea.l d0,a6
   14ba0:	       move.l 52(sp),d0
   14ba4:	       move.l 48(sp),d1
   14ba8:	       jsr -684(a6)
   14bac:	       move.l d0,44(sp)
   14bb0:	       move.l 44(sp),d0
   14bb4:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   14bb8:	   /-- bne.s 14bc0 <freeze+0x46>
   14bba:	   |   clr.w d0
   14bbc:	/--|-- bra.w 14d36 <freeze+0x1bc>

	CstFreeze();
   14bc0:	|  \-> jsr 15b0 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   14bc6:	|      move.l 1a896 <sceneWidth>,d0
   14bcc:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   14bd0:	|      move.l 1a89a <sceneHeight>,d0
   14bd6:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   14bda:	|      move.l 1a896 <sceneWidth>,d0
   14be0:	|      movea.l 40(sp),a0
   14be4:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   14be8:	|      move.l 1a89a <sceneHeight>,d0
   14bee:	|      movea.l 40(sp),a0
   14bf2:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   14bf6:	|      move.l 1a8b4 <cameraX>,d0
   14bfc:	|      movea.l 40(sp),a0
   14c00:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   14c04:	|      move.l 1a8b8 <cameraY>,d0
   14c0a:	|      movea.l 40(sp),a0
   14c0e:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   14c12:	|      move.l 1a142 <cameraZoom>,d0
   14c18:	|      movea.l 40(sp),a0
   14c1c:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   14c20:	|      move.w #1,1a8a2 <backdropExists>

	newFreezer -> allPeople = allPeople;
   14c28:	|      move.l 1a85a <allPeople>,d0
   14c2e:	|      movea.l 40(sp),a0
   14c32:	|      move.l d0,(a0)
	allPeople = NULL;
   14c34:	|      clr.l 1a85a <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   14c3a:	|      moveq #42,d0
   14c3c:	|      move.l d0,28(sp)
   14c40:	|      clr.l 24(sp)
   14c44:	|      move.l 1a7a2 <SysBase>,d0
   14c4a:	|      movea.l d0,a6
   14c4c:	|      move.l 28(sp),d0
   14c50:	|      move.l 24(sp),d1
   14c54:	|      jsr -684(a6)
   14c58:	|      move.l d0,20(sp)
   14c5c:	|      move.l 20(sp),d0
   14c60:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   14c64:	|  /-- bne.s 14c6c <freeze+0xf2>
   14c66:	|  |   clr.w d0
   14c68:	+--|-- bra.w 14d36 <freeze+0x1bc>

	newFreezer -> allScreenRegions = allScreenRegions;
   14c6c:	|  \-> move.l 1a90a <allScreenRegions>,d0
   14c72:	|      movea.l 40(sp),a0
   14c76:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   14c7a:	|      clr.l 1a90a <allScreenRegions>
	overRegion = NULL;
   14c80:	|      clr.l 1a90e <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   14c86:	|      move.l 1a6aa <mouseCursorAnim>,d0
   14c8c:	|      movea.l 40(sp),a0
   14c90:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   14c94:	|      move.l 1a6ae <mouseCursorFrameNum>,d0
   14c9a:	|      movea.l 40(sp),a0
   14c9e:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   14ca2:	|      jsr a788 <makeNullAnim>
   14ca8:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   14cae:	|      clr.l 1a6ae <mouseCursorFrameNum>

	newFreezer -> speech = speech;
   14cb4:	|      move.l 1a7fe <speech>,d0
   14cba:	|      movea.l 40(sp),a0
   14cbe:	|      move.l d0,20(a0)
	initSpeech ();
   14cc2:	|      jsr 772a <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   14cc8:	|      moveq #28,d0
   14cca:	|      move.l d0,12(sp)
   14cce:	|      clr.l 8(sp)
   14cd2:	|      move.l 1a7a2 <SysBase>,d0
   14cd8:	|      movea.l d0,a6
   14cda:	|      move.l 12(sp),d0
   14cde:	|      move.l 8(sp),d1
   14ce2:	|      jsr -684(a6)
   14ce6:	|      move.l d0,4(sp)
   14cea:	|      move.l 4(sp),d0
   14cee:	|      movea.l 40(sp),a0
   14cf2:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   14cf6:	|      movea.l 40(sp),a0
   14cfa:	|      move.l 28(a0),d0
   14cfe:	|  /-- bne.s 14d04 <freeze+0x18a>
   14d00:	|  |   clr.w d0
   14d02:	+--|-- bra.s 14d36 <freeze+0x1bc>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   14d04:	|  \-> movea.l 40(sp),a0
   14d08:	|      move.l 28(a0),d0
   14d0c:	|      pea 1c <_start+0x1c>
   14d10:	|      clr.l -(sp)
   14d12:	|      move.l d0,-(sp)
   14d14:	|      jsr 16b30 <memset>
   14d1a:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   14d1e:	|      move.l 1a8ee <frozenStuff>,d0
   14d24:	|      movea.l 40(sp),a0
   14d28:	|      move.l d0,60(a0)
	frozenStuff = newFreezer;
   14d2c:	|      move.l 40(sp),1a8ee <frozenStuff>

	return TRUE;
   14d34:	|      moveq #1,d0
}
   14d36:	\----> movea.l (sp)+,a6
   14d38:	       lea 52(sp),sp
   14d3c:	       rts

00014d3e <unfreeze>:

void unfreeze () {
   14d3e:	       lea -16(sp),sp
   14d42:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   14d44:	       move.l 1a8ee <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   14d4c:	       move.l 1a8ee <frozenStuff>,d0
   14d52:	/----- beq.w 14f74 <unfreeze+0x236>

	CstUnfreeze();
   14d56:	|      jsr 358a <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   14d5c:	|      movea.l 1a8ee <frozenStuff>,a0
   14d62:	|      move.l 48(a0),d0
   14d66:	|      move.l d0,1a896 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   14d6c:	|      movea.l 1a8ee <frozenStuff>,a0
   14d72:	|      move.l 52(a0),d0
   14d76:	|      move.l d0,1a89a <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   14d7c:	|      movea.l 1a8ee <frozenStuff>,a0
   14d82:	|      move.l 40(a0),d0
   14d86:	|      move.l d0,1a8b4 <cameraX>
	cameraY = frozenStuff -> cameraY;
   14d8c:	|      movea.l 1a8ee <frozenStuff>,a0
   14d92:	|      move.l 44(a0),d0
   14d96:	|      move.l d0,1a8b8 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   14d9c:	|      move.l 1a75e <input+0xa>,d0
   14da2:	|      move.l d0,-(sp)
   14da4:	|      jsr 16fe8 <__floatsisf>
   14daa:	|      addq.l #4,sp
   14dac:	|      move.l d0,d1
   14dae:	|      move.l 1a142 <cameraZoom>,d0
   14db4:	|      move.l d0,-(sp)
   14db6:	|      move.l d1,-(sp)
   14db8:	|      jsr 1709a <__mulsf3>
   14dbe:	|      addq.l #8,sp
   14dc0:	|      move.l d0,-(sp)
   14dc2:	|      jsr 16f80 <__fixsfsi>
   14dc8:	|      addq.l #4,sp
   14dca:	|      move.l d0,1a75e <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   14dd0:	|      move.l 1a762 <input+0xe>,d0
   14dd6:	|      move.l d0,-(sp)
   14dd8:	|      jsr 16fe8 <__floatsisf>
   14dde:	|      addq.l #4,sp
   14de0:	|      move.l d0,d1
   14de2:	|      move.l 1a142 <cameraZoom>,d0
   14de8:	|      move.l d0,-(sp)
   14dea:	|      move.l d1,-(sp)
   14dec:	|      jsr 1709a <__mulsf3>
   14df2:	|      addq.l #8,sp
   14df4:	|      move.l d0,-(sp)
   14df6:	|      jsr 16f80 <__fixsfsi>
   14dfc:	|      addq.l #4,sp
   14dfe:	|      move.l d0,1a762 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   14e04:	|      movea.l 1a8ee <frozenStuff>,a0
   14e0a:	|      move.l 56(a0),d0
   14e0e:	|      move.l d0,1a142 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   14e14:	|      move.l 1a75e <input+0xa>,d0
   14e1a:	|      move.l d0,-(sp)
   14e1c:	|      jsr 16fe8 <__floatsisf>
   14e22:	|      addq.l #4,sp
   14e24:	|      move.l d0,d1
   14e26:	|      move.l 1a142 <cameraZoom>,d0
   14e2c:	|      move.l d0,-(sp)
   14e2e:	|      move.l d1,-(sp)
   14e30:	|      jsr 16e94 <__divsf3>
   14e36:	|      addq.l #8,sp
   14e38:	|      move.l d0,-(sp)
   14e3a:	|      jsr 16f80 <__fixsfsi>
   14e40:	|      addq.l #4,sp
   14e42:	|      move.l d0,1a75e <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   14e48:	|      move.l 1a762 <input+0xe>,d0
   14e4e:	|      move.l d0,-(sp)
   14e50:	|      jsr 16fe8 <__floatsisf>
   14e56:	|      addq.l #4,sp
   14e58:	|      move.l d0,d1
   14e5a:	|      move.l 1a142 <cameraZoom>,d0
   14e60:	|      move.l d0,-(sp)
   14e62:	|      move.l d1,-(sp)
   14e64:	|      jsr 16e94 <__divsf3>
   14e6a:	|      addq.l #8,sp
   14e6c:	|      move.l d0,-(sp)
   14e6e:	|      jsr 16f80 <__fixsfsi>
   14e74:	|      addq.l #4,sp
   14e76:	|      move.l d0,1a762 <input+0xe>

	killAllPeople ();
   14e7c:	|      jsr a490 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   14e82:	|      movea.l 1a8ee <frozenStuff>,a0
   14e88:	|      move.l (a0),d0
   14e8a:	|      move.l d0,1a85a <allPeople>

	killAllRegions ();
   14e90:	|      jsr 153fc <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   14e96:	|      movea.l 1a8ee <frozenStuff>,a0
   14e9c:	|      move.l 4(a0),d0
   14ea0:	|      move.l d0,1a90a <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   14ea6:	|      move.l 1a6aa <mouseCursorAnim>,d0
   14eac:	|      move.l d0,-(sp)
   14eae:	|      jsr 9384 <deleteAnim>
   14eb4:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   14eb6:	|      movea.l 1a8ee <frozenStuff>,a0
   14ebc:	|      move.l 32(a0),d0
   14ec0:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   14ec6:	|      movea.l 1a8ee <frozenStuff>,a0
   14ecc:	|      move.l 36(a0),d0
   14ed0:	|      move.l d0,1a6ae <mouseCursorFrameNum>

	if (currentEvents) FreeVec(currentEvents);
   14ed6:	|      move.l 1a11c <currentEvents>,d0
   14edc:	|  /-- beq.s 14ef6 <unfreeze+0x1b8>
   14ede:	|  |   move.l 1a11c <currentEvents>,12(sp)
   14ee6:	|  |   move.l 1a7a2 <SysBase>,d0
   14eec:	|  |   movea.l d0,a6
   14eee:	|  |   movea.l 12(sp),a1
   14ef2:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   14ef6:	|  \-> movea.l 1a8ee <frozenStuff>,a0
   14efc:	|      move.l 28(a0),d0
   14f00:	|      move.l d0,1a11c <currentEvents>

	killAllSpeech ();
   14f06:	|      jsr 77c2 <killAllSpeech>
	if (speech) FreeVec(speech);
   14f0c:	|      move.l 1a7fe <speech>,d0
   14f12:	|  /-- beq.s 14f2c <unfreeze+0x1ee>
   14f14:	|  |   move.l 1a7fe <speech>,8(sp)
   14f1c:	|  |   move.l 1a7a2 <SysBase>,d0
   14f22:	|  |   movea.l d0,a6
   14f24:	|  |   movea.l 8(sp),a1
   14f28:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   14f2c:	|  \-> movea.l 1a8ee <frozenStuff>,a0
   14f32:	|      move.l 20(a0),d0
   14f36:	|      move.l d0,1a7fe <speech>

	frozenStuff = frozenStuff -> next;
   14f3c:	|      movea.l 1a8ee <frozenStuff>,a0
   14f42:	|      move.l 60(a0),d0
   14f46:	|      move.l d0,1a8ee <frozenStuff>

	overRegion = NULL;
   14f4c:	|      clr.l 1a90e <overRegion>
	if (killMe) FreeVec(killMe);
   14f52:	|      tst.l 16(sp)
   14f56:	|  /-- beq.s 14f6e <unfreeze+0x230>
   14f58:	|  |   move.l 16(sp),4(sp)
   14f5e:	|  |   move.l 1a7a2 <SysBase>,d0
   14f64:	|  |   movea.l d0,a6
   14f66:	|  |   movea.l 4(sp),a1
   14f6a:	|  |   jsr -690(a6)
	killMe = NULL;
   14f6e:	|  \-> clr.l 16(sp)
   14f72:	|  /-- bra.s 14f76 <unfreeze+0x238>
	if (! frozenStuff) return;
   14f74:	\--|-> nop
}
   14f76:	   \-> movea.l (sp)+,a6
   14f78:	       lea 16(sp),sp
   14f7c:	       rts

00014f7e <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   14f7e:	pea 199c6 <main_sludge.c.0270f7ba+0x1e9>
   14f84:	jsr 16bac <KPrintF>
   14f8a:	addq.l #4,sp
	return FALSE;
   14f8c:	clr.w d0
}
   14f8e:	rts

00014f90 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   14f90:	          lea -44(sp),sp
   14f94:	          move.l a6,-(sp)
   14f96:	          move.l d2,-(sp)
	unsigned int a = 0;
   14f98:	          clr.l 48(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   14f9c:	          move.l 1a8fa <fontOrderString>,d0
   14fa2:	      /-- beq.s 14fbc <loadFont+0x2c>
   14fa4:	      |   move.l 1a8fa <fontOrderString>,36(sp)
   14fac:	      |   move.l 1a7a2 <SysBase>,d0
   14fb2:	      |   movea.l d0,a6
   14fb4:	      |   movea.l 36(sp),a1
   14fb8:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   14fbc:	      \-> move.l 60(sp),-(sp)
   14fc0:	          jsr b8 <copyString>
   14fc6:	          addq.l #4,sp
   14fc8:	          move.l d0,1a8fa <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);
   14fce:	          move.l 1a906 <theFont>,d0
   14fd4:	      /-- beq.s 14fe6 <loadFont+0x56>
   14fd6:	      |   move.l 1a906 <theFont>,d0
   14fdc:	      |   move.l d0,-(sp)
   14fde:	      |   jsr 84f6 <forgetSpriteBank>
   14fe4:	      |   addq.l #4,sp
	theFont = AllocVec( sizeof(struct loadedSpriteBank), MEMF_ANY );
   14fe6:	      \-> moveq #26,d0
   14fe8:	          move.l d0,32(sp)
   14fec:	          clr.l 28(sp)
   14ff0:	          move.l 1a7a2 <SysBase>,d0
   14ff6:	          movea.l d0,a6
   14ff8:	          move.l 32(sp),d0
   14ffc:	          move.l 28(sp),d1
   15000:	          jsr -684(a6)
   15004:	          move.l d0,24(sp)
   15008:	          move.l 24(sp),d0
   1500c:	          move.l d0,1a906 <theFont>

	loadedFontNum = filenum;
   15012:	          move.l 56(sp),1a8f6 <loadedFontNum>

	fontTableSize = 0;
   1501a:	          clr.l 1a902 <fontTableSize>
	char *tmp = charOrder;
   15020:	          move.l 60(sp),44(sp)
	while (*tmp) {        
   15026:	   /----- bra.s 15062 <loadFont+0xd2>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15028:	/--|----> movea.l 44(sp),a0
   1502c:	|  |      move.b (a0),d0
   1502e:	|  |      ext.w d0
   15030:	|  |      movea.w d0,a0
   15032:	|  |      move.l 1a902 <fontTableSize>,d0
   15038:	|  |      move.l d0,d0
   1503a:	|  |      move.b d0,d0
   1503c:	|  |      andi.l #255,d0
   15042:	|  |      cmp.l a0,d0
   15044:	|  |  /-- bge.s 15056 <loadFont+0xc6>
   15046:	|  |  |   movea.l 44(sp),a0
   1504a:	|  |  |   move.b (a0),d0
   1504c:	|  |  |   ext.w d0
   1504e:	|  |  |   movea.w d0,a0
   15050:	|  |  |   move.l a0,1a902 <fontTableSize>
		*tmp++;
   15056:	|  |  \-> move.l 44(sp),d0
   1505a:	|  |      move.l d0,d1
   1505c:	|  |      addq.l #1,d1
   1505e:	|  |      move.l d1,44(sp)
	while (*tmp) {        
   15062:	|  \----> movea.l 44(sp),a0
   15066:	|         move.b (a0),d0
   15068:	\-------- bne.s 15028 <loadFont+0x98>
	}
	fontTableSize++;
   1506a:	          move.l 1a902 <fontTableSize>,d0
   15070:	          addq.l #1,d0
   15072:	          move.l d0,1a902 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15078:	          move.l 1a8fe <fontTable>,d0
   1507e:	      /-- beq.s 15098 <loadFont+0x108>
   15080:	      |   move.l 1a8fe <fontTable>,20(sp)
   15088:	      |   move.l 1a7a2 <SysBase>,d0
   1508e:	      |   movea.l d0,a6
   15090:	      |   movea.l 20(sp),a1
   15094:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15098:	      \-> move.l 1a902 <fontTableSize>,d0
   1509e:	          add.l d0,d0
   150a0:	          add.l d0,d0
   150a2:	          move.l d0,16(sp)
   150a6:	          clr.l 12(sp)
   150aa:	          move.l 1a7a2 <SysBase>,d0
   150b0:	          movea.l d0,a6
   150b2:	          move.l 16(sp),d0
   150b6:	          move.l 12(sp),d1
   150ba:	          jsr -684(a6)
   150be:	          move.l d0,8(sp)
   150c2:	          move.l 8(sp),d0
   150c6:	          move.l d0,1a8fe <fontTable>
	if (!fontTable) return FALSE;
   150cc:	          move.l 1a8fe <fontTable>,d0
   150d2:	      /-- bne.s 150da <loadFont+0x14a>
   150d4:	      |   clr.w d0
   150d6:	/-----|-- bra.w 15186 <loadFont+0x1f6>

	for (a = 0;  a < fontTableSize; a++) {
   150da:	|     \-> clr.l 48(sp)
   150de:	|     /-- bra.s 150f8 <loadFont+0x168>
		fontTable[a] = 0;
   150e0:	|  /--|-> move.l 1a8fe <fontTable>,d1
   150e6:	|  |  |   move.l 48(sp),d0
   150ea:	|  |  |   add.l d0,d0
   150ec:	|  |  |   add.l d0,d0
   150ee:	|  |  |   movea.l d1,a0
   150f0:	|  |  |   adda.l d0,a0
   150f2:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   150f4:	|  |  |   addq.l #1,48(sp)
   150f8:	|  |  \-> move.l 1a902 <fontTableSize>,d0
   150fe:	|  |      cmp.l 48(sp),d0
   15102:	|  \----- bhi.s 150e0 <loadFont+0x150>
	}
	a = 0;
   15104:	|         clr.l 48(sp)
	int i = 0;
   15108:	|         clr.l 40(sp)
	tmp = charOrder;
   1510c:	|         move.l 60(sp),44(sp)
	while (*tmp) {
   15112:	|     /-- bra.s 15142 <loadFont+0x1b2>
		fontTable[*tmp++] = i;
   15114:	|  /--|-> move.l 1a8fe <fontTable>,d1
   1511a:	|  |  |   move.l 44(sp),d0
   1511e:	|  |  |   move.l d0,d2
   15120:	|  |  |   addq.l #1,d2
   15122:	|  |  |   move.l d2,44(sp)
   15126:	|  |  |   movea.l d0,a0
   15128:	|  |  |   move.b (a0),d0
   1512a:	|  |  |   ext.w d0
   1512c:	|  |  |   movea.w d0,a0
   1512e:	|  |  |   move.l a0,d0
   15130:	|  |  |   add.l a0,d0
   15132:	|  |  |   add.l d0,d0
   15134:	|  |  |   movea.l d1,a0
   15136:	|  |  |   adda.l d0,a0
   15138:	|  |  |   move.l 40(sp),d0
   1513c:	|  |  |   move.l d0,(a0)
		i++;
   1513e:	|  |  |   addq.l #1,40(sp)
	while (*tmp) {
   15142:	|  |  \-> movea.l 44(sp),a0
   15146:	|  |      move.b (a0),d0
   15148:	|  \----- bne.s 15114 <loadFont+0x184>
	}

	if (!loadSpriteBank(filenum, &theFont->bank, TRUE)) {
   1514a:	|         move.l 1a906 <theFont>,d0
   15150:	|         addq.l #8,d0
   15152:	|         pea 1 <_start+0x1>
   15156:	|         move.l d0,-(sp)
   15158:	|         move.l 64(sp),-(sp)
   1515c:	|         jsr 8618 <loadSpriteBank>
   15162:	|         lea 12(sp),sp
   15166:	|         tst.w d0
   15168:	|     /-- bne.s 1517c <loadFont+0x1ec>
		KPrintF("loadFont: Can't load font");
   1516a:	|     |   pea 199ed <main_sludge.c.0270f7ba+0x210>
   15170:	|     |   jsr 16bac <KPrintF>
   15176:	|     |   addq.l #4,sp
		return FALSE;
   15178:	|     |   clr.w d0
   1517a:	+-----|-- bra.s 15186 <loadFont+0x1f6>
	}
	fontHeight = h;
   1517c:	|     \-> move.l 64(sp),1a8f2 <fontHeight>
	return TRUE;
   15184:	|         moveq #1,d0
}
   15186:	\-------> move.l (sp)+,d2
   15188:	          movea.l (sp)+,a6
   1518a:	          lea 44(sp),sp
   1518e:	          rts

00015190 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15190:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15194:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15198:	                move.l 1a902 <fontTableSize>,d0
   1519e:	/-------------- beq.w 15266 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   151a2:	|               move.w 1a6a8 <fontSpace>,d0
   151a8:	|               asr.w #1,d0
   151aa:	|               ext.l d0
   151ac:	|               add.l d0,20(sp)
	char *tmp = theText;
   151b0:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   151b6:	|     /-------- bra.w 1525a <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   151ba:	|  /--|-------> movea.l 1a906 <theFont>,a0
   151c0:	|  |  |         movea.l 16(a0),a0
   151c4:	|  |  |         movea.l 8(sp),a1
   151c8:	|  |  |         move.b (a1),d0
   151ca:	|  |  |         move.b d0,d0
   151cc:	|  |  |         andi.l #255,d0
   151d2:	|  |  |         move.l 1a902 <fontTableSize>,d1
   151d8:	|  |  |         cmp.l d0,d1
   151da:	|  |  |  /----- bls.s 15206 <pasteStringToBackdrop+0x76>
   151dc:	|  |  |  |      move.l 1a8fe <fontTable>,d1
   151e2:	|  |  |  |      movea.l 8(sp),a1
   151e6:	|  |  |  |      move.b (a1),d0
   151e8:	|  |  |  |      move.b d0,d0
   151ea:	|  |  |  |      andi.l #255,d0
   151f0:	|  |  |  |      add.l d0,d0
   151f2:	|  |  |  |      add.l d0,d0
   151f4:	|  |  |  |      movea.l d1,a1
   151f6:	|  |  |  |      adda.l d0,a1
   151f8:	|  |  |  |      move.l (a1),d1
   151fa:	|  |  |  |      move.l d1,d0
   151fc:	|  |  |  |      lsl.l #3,d0
   151fe:	|  |  |  |      sub.l d1,d0
   15200:	|  |  |  |      add.l d0,d0
   15202:	|  |  |  |      add.l d0,d0
   15204:	|  |  |  |  /-- bra.s 15208 <pasteStringToBackdrop+0x78>
   15206:	|  |  |  \--|-> moveq #0,d0
   15208:	|  |  |     \-> adda.l d0,a0
   1520a:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   1520c:	|  |  |         move.l 24(sp),d1
   15210:	|  |  |         movea.l (sp),a0
   15212:	|  |  |         move.l 12(a0),d0
   15216:	|  |  |         move.l d0,d0
   15218:	|  |  |         sub.w d0,d1
   1521a:	|  |  |         move.w d1,d0
   1521c:	|  |  |         movea.w d0,a1
   1521e:	|  |  |         move.l 20(sp),d1
   15222:	|  |  |         movea.l (sp),a0
   15224:	|  |  |         move.l 8(a0),d0
   15228:	|  |  |         move.l d0,d0
   1522a:	|  |  |         sub.w d0,d1
   1522c:	|  |  |         move.w d1,d0
   1522e:	|  |  |         movea.w d0,a0
   15230:	|  |  |         move.l a1,-(sp)
   15232:	|  |  |         move.l a0,-(sp)
   15234:	|  |  |         move.l 8(sp),-(sp)
   15238:	|  |  |         jsr 1c52 <CstPasteChar>
   1523e:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15242:	|  |  |         movea.l (sp),a0
   15244:	|  |  |         move.l (a0),d1
   15246:	|  |  |         move.w 1a6a8 <fontSpace>,d0
   1524c:	|  |  |         movea.w d0,a0
   1524e:	|  |  |         move.l d1,d0
   15250:	|  |  |         add.l a0,d0
   15252:	|  |  |         add.l d0,20(sp)
		tmp++;
   15256:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   1525a:	|  |  \-------> movea.l 8(sp),a0
   1525e:	|  |            move.b (a0),d0
   15260:	|  \----------- bne.w 151ba <pasteStringToBackdrop+0x2a>
   15264:	|           /-- bra.s 15268 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   15266:	\-----------|-> nop
    }
}
   15268:	            \-> lea 12(sp),sp
   1526c:	                rts

0001526e <stringWidth>:


int stringWidth (char * theText) {
   1526e:	       subq.l #8,sp
	int a = 0;
   15270:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15274:	       clr.l (sp)

	if (! fontTableSize) return 0;
   15276:	       move.l 1a902 <fontTableSize>,d0
   1527c:	/----- bne.s 15282 <stringWidth+0x14>
   1527e:	|      moveq #0,d0
   15280:	|  /-- bra.s 15284 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   15282:	\--|-> move.l (sp),d0
}
   15284:	   \-> addq.l #8,sp
   15286:	       rts

00015288 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15288:	       lea -16(sp),sp
   1528c:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   1528e:	       moveq #36,d0
   15290:	       move.l d0,16(sp)
   15294:	       clr.l 12(sp)
   15298:	       move.l 1a7a2 <SysBase>,d0
   1529e:	       movea.l d0,a6
   152a0:	       move.l 16(sp),d0
   152a4:	       move.l 12(sp),d1
   152a8:	       jsr -684(a6)
   152ac:	       move.l d0,8(sp)
   152b0:	       move.l 8(sp),d0
   152b4:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   152b8:	   /-- bne.s 152c0 <addScreenRegion+0x38>
   152ba:	   |   clr.w d0
   152bc:	/--|-- bra.w 15340 <addScreenRegion+0xb8>
    newRegion->di = di;
   152c0:	|  \-> movea.l 4(sp),a0
   152c4:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   152ca:	|      movea.l 4(sp),a0
   152ce:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   152d2:	|      movea.l 4(sp),a0
   152d6:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   152dc:	|      movea.l 4(sp),a0
   152e0:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   152e6:	|      movea.l 4(sp),a0
   152ea:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   152f0:	|      movea.l 4(sp),a0
   152f4:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   152fa:	|      movea.l 4(sp),a0
   152fe:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15304:	|      move.l 52(sp),-(sp)
   15308:	|      jsr d070 <loadObjectType>
   1530e:	|      addq.l #4,sp
   15310:	|      movea.l 4(sp),a0
   15314:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15318:	|      move.l 1a90a <allScreenRegions>,d0
   1531e:	|      movea.l 4(sp),a0
   15322:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15326:	|      move.l 4(sp),1a90a <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   1532e:	|      movea.l 4(sp),a0
   15332:	|      move.l 28(a0),d0
   15336:	|      sne d0
   15338:	|      neg.b d0
   1533a:	|      move.b d0,d0
   1533c:	|      andi.w #255,d0
}
   15340:	\----> movea.l (sp)+,a6
   15342:	       lea 16(sp),sp
   15346:	       rts

00015348 <getOverRegion>:

void getOverRegion () {
   15348:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1534a:	             move.l 1a90a <allScreenRegions>,(sp)
	while (thisRegion) {
   15350:	   /-------- bra.s 153be <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15352:	/--|-------> move.l 1a75e <input+0xa>,d0
   15358:	|  |         movea.l (sp),a0
   1535a:	|  |         movea.l (a0),a0
   1535c:	|  |         move.l 1a8b4 <cameraX>,d1
   15362:	|  |         suba.l d1,a0
   15364:	|  |         cmpa.l d0,a0
   15366:	|  |  /----- bgt.s 153b8 <getOverRegion+0x70>
   15368:	|  |  |      move.l 1a762 <input+0xe>,d0
   1536e:	|  |  |      movea.l (sp),a0
   15370:	|  |  |      movea.l 4(a0),a0
   15374:	|  |  |      move.l 1a8b8 <cameraY>,d1
   1537a:	|  |  |      suba.l d1,a0
   1537c:	|  |  |      cmpa.l d0,a0
   1537e:	|  |  +----- bgt.s 153b8 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15380:	|  |  |      move.l 1a75e <input+0xa>,d0
   15386:	|  |  |      movea.l (sp),a0
   15388:	|  |  |      movea.l 8(a0),a0
   1538c:	|  |  |      move.l 1a8b4 <cameraX>,d1
   15392:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15394:	|  |  |      cmpa.l d0,a0
   15396:	|  |  +----- blt.s 153b8 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15398:	|  |  |      move.l 1a762 <input+0xe>,d0
   1539e:	|  |  |      movea.l (sp),a0
   153a0:	|  |  |      movea.l 12(a0),a0
   153a4:	|  |  |      move.l 1a8b8 <cameraY>,d1
   153aa:	|  |  |      suba.l d1,a0
   153ac:	|  |  |      cmpa.l d0,a0
   153ae:	|  |  +----- blt.s 153b8 <getOverRegion+0x70>
			overRegion = thisRegion;
   153b0:	|  |  |      move.l (sp),1a90e <overRegion>
			return;
   153b6:	|  |  |  /-- bra.s 153ca <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   153b8:	|  |  \--|-> movea.l (sp),a0
   153ba:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   153be:	|  \-----|-> tst.l (sp)
   153c0:	\--------|-- bne.s 15352 <getOverRegion+0xa>
	}
	overRegion = NULL;
   153c2:	         |   clr.l 1a90e <overRegion>
	return;
   153c8:	         |   nop
}
   153ca:	         \-> addq.l #4,sp
   153cc:	             rts

000153ce <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   153ce:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   153d0:	             move.l 1a90a <allScreenRegions>,(sp)

	while (thisRegion) {
   153d6:	   /-------- bra.s 153f2 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   153d8:	/--|-------> movea.l (sp),a0
   153da:	|  |         movea.l 28(a0),a0
   153de:	|  |         move.l 4(a0),d0
   153e2:	|  |         cmp.l 8(sp),d0
   153e6:	|  |     /-- bne.s 153ec <getRegionForObject+0x1e>
			return thisRegion;
   153e8:	|  |     |   move.l (sp),d0
   153ea:	|  |  /--|-- bra.s 153f8 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   153ec:	|  |  |  \-> movea.l (sp),a0
   153ee:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   153f2:	|  \--|----> tst.l (sp)
   153f4:	\-----|----- bne.s 153d8 <getRegionForObject+0xa>
	}

	return NULL;
   153f6:	      |      moveq #0,d0
}
   153f8:	      \----> addq.l #4,sp
   153fa:	             rts

000153fc <killAllRegions>:

void killAllRegions () {
   153fc:	       subq.l #8,sp
   153fe:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15400:	   /-- bra.s 15442 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15402:	/--|-> move.l 1a90a <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   1540a:	|  |   movea.l 1a90a <allScreenRegions>,a0
   15410:	|  |   move.l 32(a0),d0
   15414:	|  |   move.l d0,1a90a <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   1541a:	|  |   movea.l 8(sp),a0
   1541e:	|  |   move.l 28(a0),d0
   15422:	|  |   move.l d0,-(sp)
   15424:	|  |   jsr d328 <removeObjectType>
   1542a:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   1542c:	|  |   move.l 8(sp),4(sp)
   15432:	|  |   move.l 1a7a2 <SysBase>,d0
   15438:	|  |   movea.l d0,a6
   1543a:	|  |   movea.l 4(sp),a1
   1543e:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15442:	|  \-> move.l 1a90a <allScreenRegions>,d0
   15448:	\----- bne.s 15402 <killAllRegions+0x6>
	}
	overRegion = NULL;
   1544a:	       clr.l 1a90e <overRegion>
}
   15450:	       nop
   15452:	       movea.l (sp)+,a6
   15454:	       addq.l #8,sp
   15456:	       rts

00015458 <loadRegions>:

void loadRegions (BPTR fp) {
   15458:	       lea -24(sp),sp
   1545c:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   1545e:	       move.l 32(sp),-(sp)
   15462:	       jsr 6bc <get2bytes>
   15468:	       addq.l #4,sp
   1546a:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   1546e:	       move.l #108810,20(sp)

	while (numRegions --) {
   15476:	   /-- bra.w 15554 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   1547a:	/--|-> moveq #36,d0
   1547c:	|  |   move.l d0,16(sp)
   15480:	|  |   clr.l 12(sp)
   15484:	|  |   move.l 1a7a2 <SysBase>,d0
   1548a:	|  |   movea.l d0,a6
   1548c:	|  |   move.l 16(sp),d0
   15490:	|  |   move.l 12(sp),d1
   15494:	|  |   jsr -684(a6)
   15498:	|  |   move.l d0,8(sp)
   1549c:	|  |   move.l 8(sp),d0
   154a0:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   154a4:	|  |   movea.l 20(sp),a0
   154a8:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   154ac:	|  |   moveq #32,d1
   154ae:	|  |   add.l 4(sp),d1
   154b2:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   154b6:	|  |   move.l 32(sp),-(sp)
   154ba:	|  |   jsr 6bc <get2bytes>
   154c0:	|  |   addq.l #4,sp
   154c2:	|  |   movea.l 4(sp),a0
   154c6:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   154c8:	|  |   move.l 32(sp),-(sp)
   154cc:	|  |   jsr 6bc <get2bytes>
   154d2:	|  |   addq.l #4,sp
   154d4:	|  |   movea.l 4(sp),a0
   154d8:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   154dc:	|  |   move.l 32(sp),-(sp)
   154e0:	|  |   jsr 6bc <get2bytes>
   154e6:	|  |   addq.l #4,sp
   154e8:	|  |   movea.l 4(sp),a0
   154ec:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   154f0:	|  |   move.l 32(sp),-(sp)
   154f4:	|  |   jsr 6bc <get2bytes>
   154fa:	|  |   addq.l #4,sp
   154fc:	|  |   movea.l 4(sp),a0
   15500:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15504:	|  |   move.l 32(sp),-(sp)
   15508:	|  |   jsr 6bc <get2bytes>
   1550e:	|  |   addq.l #4,sp
   15510:	|  |   movea.l 4(sp),a0
   15514:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15518:	|  |   move.l 32(sp),-(sp)
   1551c:	|  |   jsr 6bc <get2bytes>
   15522:	|  |   addq.l #4,sp
   15524:	|  |   movea.l 4(sp),a0
   15528:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   1552c:	|  |   move.l 32(sp),-(sp)
   15530:	|  |   jsr 6bc <get2bytes>
   15536:	|  |   addq.l #4,sp
   15538:	|  |   movea.l 4(sp),a0
   1553c:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15540:	|  |   move.l 32(sp),-(sp)
   15544:	|  |   jsr d01e <loadObjectRef>
   1554a:	|  |   addq.l #4,sp
   1554c:	|  |   movea.l 4(sp),a0
   15550:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15554:	|  \-> move.l 24(sp),d0
   15558:	|      move.l d0,d1
   1555a:	|      subq.l #1,d1
   1555c:	|      move.l d1,24(sp)
   15560:	|      tst.l d0
   15562:	\----- bne.w 1547a <loadRegions+0x22>
	}
	* pointy = NULL;
   15566:	       movea.l 20(sp),a0
   1556a:	       clr.l (a0)
}
   1556c:	       nop
   1556e:	       movea.l (sp)+,a6
   15570:	       lea 24(sp),sp
   15574:	       rts

00015576 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15576:	             lea -12(sp),sp
   1557a:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   1557c:	             move.l #108810,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15584:	   /-------- bra.s 155fe <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15586:	/--|-------> movea.l 12(sp),a0
   1558a:	|  |         movea.l (a0),a0
   1558c:	|  |         movea.l 28(a0),a0
   15590:	|  |         move.l 4(a0),d0
   15594:	|  |         cmp.l 20(sp),d0
   15598:	|  |  /----- bne.s 155f0 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   1559a:	|  |  |      movea.l 12(sp),a0
   1559e:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   155a2:	|  |  |      movea.l 8(sp),a0
   155a6:	|  |  |      move.l 32(a0),d0
   155aa:	|  |  |      movea.l 12(sp),a0
   155ae:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   155b0:	|  |  |      movea.l 8(sp),a0
   155b4:	|  |  |      move.l 28(a0),d0
   155b8:	|  |  |      move.l d0,-(sp)
   155ba:	|  |  |      jsr d328 <removeObjectType>
   155c0:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   155c2:	|  |  |      move.l 1a90e <overRegion>,d0
   155c8:	|  |  |      cmp.l 8(sp),d0
   155cc:	|  |  |  /-- bne.s 155d4 <removeScreenRegion+0x5e>
   155ce:	|  |  |  |   clr.l 1a90e <overRegion>
            FreeVec(killMe);
   155d4:	|  |  |  \-> move.l 8(sp),4(sp)
   155da:	|  |  |      move.l 1a7a2 <SysBase>,d0
   155e0:	|  |  |      movea.l d0,a6
   155e2:	|  |  |      movea.l 4(sp),a1
   155e6:	|  |  |      jsr -690(a6)
            killMe = NULL;
   155ea:	|  |  |      clr.l 8(sp)
   155ee:	|  +--|----- bra.s 155fe <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   155f0:	|  |  \----> movea.l 12(sp),a0
   155f4:	|  |         move.l (a0),d0
   155f6:	|  |         moveq #32,d1
   155f8:	|  |         add.l d0,d1
   155fa:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   155fe:	|  \-------> movea.l 12(sp),a0
   15602:	|            move.l (a0),d0
   15604:	\----------- bne.s 15586 <removeScreenRegion+0x10>
        }
    }
}
   15606:	             nop
   15608:	             nop
   1560a:	             movea.l (sp)+,a6
   1560c:	             lea 12(sp),sp
   15610:	             rts

00015612 <saveRegions>:

void saveRegions (BPTR fp) {
   15612:	       subq.l #8,sp
	int numRegions = 0;
   15614:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15618:	       move.l 1a90a <allScreenRegions>,(sp)
	while (thisRegion) {
   1561e:	   /-- bra.s 1562a <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15620:	/--|-> movea.l (sp),a0
   15622:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15626:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   1562a:	|  \-> tst.l (sp)
   1562c:	\----- bne.s 15620 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   1562e:	       move.l 12(sp),-(sp)
   15632:	       move.l 8(sp),-(sp)
   15636:	       jsr 8d0 <put2bytes>
   1563c:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   1563e:	       move.l 1a90a <allScreenRegions>,(sp)
	while (thisRegion) {
   15644:	/----- bra.w 156ec <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15648:	|  /-> movea.l (sp),a0
   1564a:	|  |   move.l (a0),d0
   1564c:	|  |   move.l 12(sp),-(sp)
   15650:	|  |   move.l d0,-(sp)
   15652:	|  |   jsr 8d0 <put2bytes>
   15658:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   1565a:	|  |   movea.l (sp),a0
   1565c:	|  |   move.l 4(a0),d0
   15660:	|  |   move.l 12(sp),-(sp)
   15664:	|  |   move.l d0,-(sp)
   15666:	|  |   jsr 8d0 <put2bytes>
   1566c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   1566e:	|  |   movea.l (sp),a0
   15670:	|  |   move.l 8(a0),d0
   15674:	|  |   move.l 12(sp),-(sp)
   15678:	|  |   move.l d0,-(sp)
   1567a:	|  |   jsr 8d0 <put2bytes>
   15680:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15682:	|  |   movea.l (sp),a0
   15684:	|  |   move.l 12(a0),d0
   15688:	|  |   move.l 12(sp),-(sp)
   1568c:	|  |   move.l d0,-(sp)
   1568e:	|  |   jsr 8d0 <put2bytes>
   15694:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15696:	|  |   movea.l (sp),a0
   15698:	|  |   move.l 16(a0),d0
   1569c:	|  |   move.l 12(sp),-(sp)
   156a0:	|  |   move.l d0,-(sp)
   156a2:	|  |   jsr 8d0 <put2bytes>
   156a8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   156aa:	|  |   movea.l (sp),a0
   156ac:	|  |   move.l 20(a0),d0
   156b0:	|  |   move.l 12(sp),-(sp)
   156b4:	|  |   move.l d0,-(sp)
   156b6:	|  |   jsr 8d0 <put2bytes>
   156bc:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   156be:	|  |   movea.l (sp),a0
   156c0:	|  |   move.l 24(a0),d0
   156c4:	|  |   move.l 12(sp),-(sp)
   156c8:	|  |   move.l d0,-(sp)
   156ca:	|  |   jsr 8d0 <put2bytes>
   156d0:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   156d2:	|  |   movea.l (sp),a0
   156d4:	|  |   move.l 28(a0),d0
   156d8:	|  |   move.l 12(sp),-(sp)
   156dc:	|  |   move.l d0,-(sp)
   156de:	|  |   jsr d3c8 <saveObjectRef>
   156e4:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   156e6:	|  |   movea.l (sp),a0
   156e8:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   156ec:	\--|-> tst.l (sp)
   156ee:	   \-- bne.w 15648 <saveRegions+0x36>
	}
}
   156f2:	       nop
   156f4:	       nop
   156f6:	       addq.l #8,sp
   156f8:	       rts

000156fa <showBoxes>:

void showBoxes () {
   156fa:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   156fc:	       move.l 1a90a <allScreenRegions>,(sp)

	while (huntRegion) {
   15702:	/----- bra.w 1579e <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15706:	|  /-> movea.l (sp),a0
   15708:	|  |   move.l 12(a0),d0
   1570c:	|  |   movea.l d0,a1
   1570e:	|  |   movea.l (sp),a0
   15710:	|  |   move.l 4(a0),d0
   15714:	|  |   move.l d0,d1
   15716:	|  |   movea.l (sp),a0
   15718:	|  |   move.l (a0),d0
   1571a:	|  |   move.l a1,-(sp)
   1571c:	|  |   move.l d1,-(sp)
   1571e:	|  |   move.l d0,-(sp)
   15720:	|  |   jsr ccac <drawVerticalLine>
   15726:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   1572a:	|  |   movea.l (sp),a0
   1572c:	|  |   move.l 12(a0),d0
   15730:	|  |   movea.l d0,a1
   15732:	|  |   movea.l (sp),a0
   15734:	|  |   move.l 4(a0),d0
   15738:	|  |   move.l d0,d1
   1573a:	|  |   movea.l (sp),a0
   1573c:	|  |   move.l 8(a0),d0
   15740:	|  |   move.l a1,-(sp)
   15742:	|  |   move.l d1,-(sp)
   15744:	|  |   move.l d0,-(sp)
   15746:	|  |   jsr ccac <drawVerticalLine>
   1574c:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15750:	|  |   movea.l (sp),a0
   15752:	|  |   move.l 8(a0),d0
   15756:	|  |   movea.l d0,a1
   15758:	|  |   movea.l (sp),a0
   1575a:	|  |   move.l 4(a0),d0
   1575e:	|  |   move.l d0,d1
   15760:	|  |   movea.l (sp),a0
   15762:	|  |   move.l (a0),d0
   15764:	|  |   move.l a1,-(sp)
   15766:	|  |   move.l d1,-(sp)
   15768:	|  |   move.l d0,-(sp)
   1576a:	|  |   jsr cc86 <drawHorizontalLine>
   15770:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15774:	|  |   movea.l (sp),a0
   15776:	|  |   move.l 8(a0),d0
   1577a:	|  |   movea.l d0,a1
   1577c:	|  |   movea.l (sp),a0
   1577e:	|  |   move.l 12(a0),d0
   15782:	|  |   move.l d0,d1
   15784:	|  |   movea.l (sp),a0
   15786:	|  |   move.l (a0),d0
   15788:	|  |   move.l a1,-(sp)
   1578a:	|  |   move.l d1,-(sp)
   1578c:	|  |   move.l d0,-(sp)
   1578e:	|  |   jsr cc86 <drawHorizontalLine>
   15794:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15798:	|  |   movea.l (sp),a0
   1579a:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   1579e:	\--|-> tst.l (sp)
   157a0:	   \-- bne.w 15706 <showBoxes+0xc>
	}
   157a4:	       nop
   157a6:	       nop
   157a8:	       addq.l #4,sp
   157aa:	       rts

000157ac <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   157ac:	       lea -88(sp),sp
   157b0:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   157b2:	       move.l 1a7a2 <SysBase>,d0
   157b8:	       movea.l d0,a6
   157ba:	       jsr -666(a6)
   157be:	       move.l d0,88(sp)
   157c2:	       move.l 88(sp),d0
   157c6:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   157ca:	       move.l 84(sp),80(sp)
   157d0:	       moveq #40,d0
   157d2:	       move.l d0,76(sp)
   157d6:	       move.l 1a7a2 <SysBase>,d0
   157dc:	       movea.l d0,a6
   157de:	       movea.l 80(sp),a0
   157e2:	       move.l 76(sp),d0
   157e6:	       jsr -654(a6)
   157ea:	       move.l d0,72(sp)
   157ee:	       move.l 72(sp),d0
   157f2:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   157f6:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   157fc:	       move.l #104967,60(sp)
   15804:	       clr.l 56(sp)
   15808:	       move.l 64(sp),52(sp)
   1580e:	       clr.l 48(sp)
   15812:	       move.l 1a7a2 <SysBase>,d0
   15818:	       movea.l d0,a6
   1581a:	       movea.l 60(sp),a0
   1581e:	       move.l 56(sp),d0
   15822:	       movea.l 52(sp),a1
   15826:	       move.l 48(sp),d1
   1582a:	       jsr -444(a6)
   1582e:	       move.b d0,47(sp)
   15832:	       move.b 47(sp),d0
   15836:	   /-- beq.s 1584c <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15838:	   |   pea 19a14 <main_sludge.c.0270f7ba+0x237>
   1583e:	   |   jsr 16bac <KPrintF>
   15844:	   |   addq.l #4,sp
        return 0;
   15846:	   |   moveq #0,d0
   15848:	/--|-- bra.w 15906 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   1584c:	|  \-> movea.l 64(sp),a0
   15850:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15856:	|      lea 92(sp),a0
   1585a:	|      lea -86(a0),a0
   1585e:	|      move.l a0,38(sp)
   15862:	|      movea.l 42(sp),a6
   15866:	|      movea.l 38(sp),a0
   1586a:	|      jsr -60(a6)
   1586e:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15872:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15878:	|      move.l #1103515245,-(sp)
   1587e:	|      move.l 34(sp),-(sp)
   15882:	|      jsr 1756a <__mulsi3>
   15888:	|      addq.l #8,sp
   1588a:	|      addi.l #12345,d0
   15890:	|      move.l d0,d1
   15892:	|      bclr #31,d1
   15896:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   1589a:	|      move.l 30(sp),d0
   1589e:	|      pea 64 <_start+0x64>
   158a2:	|      move.l d0,-(sp)
   158a4:	|      jsr 17644 <__umodsi3>
   158aa:	|      addq.l #8,sp
   158ac:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   158b0:	|      move.l 26(sp),-(sp)
   158b4:	|      pea 19a31 <main_sludge.c.0270f7ba+0x254>
   158ba:	|      jsr 16bac <KPrintF>
   158c0:	|      addq.l #8,sp

    CloseDevice(ioreq);
   158c2:	|      move.l 64(sp),22(sp)
   158c8:	|      move.l 1a7a2 <SysBase>,d0
   158ce:	|      movea.l d0,a6
   158d0:	|      movea.l 22(sp),a1
   158d4:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   158d8:	|      move.l 64(sp),18(sp)
   158de:	|      move.l 1a7a2 <SysBase>,d0
   158e4:	|      movea.l d0,a6
   158e6:	|      movea.l 18(sp),a0
   158ea:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   158ee:	|      move.l 84(sp),14(sp)
   158f4:	|      move.l 1a7a2 <SysBase>,d0
   158fa:	|      movea.l d0,a6
   158fc:	|      movea.l 14(sp),a0
   15900:	|      jsr -672(a6)
    return 0;
   15904:	|      moveq #0,d0
   15906:	\----> movea.l (sp)+,a6
   15908:	       lea 88(sp),sp
   1590c:	       rts

0001590e <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   1590e:	             lea -20(sp),sp
   15912:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15914:	             move.l 1a912 <allLoadedBanks>,20(sp)
	while (returnMe) {
   1591c:	      /----- bra.s 1594e <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   1591e:	   /--|----> movea.l 20(sp),a0
   15922:	   |  |      move.l (a0),d0
   15924:	   |  |      cmp.l 28(sp),d0
   15928:	   |  |  /-- bne.s 15944 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   1592a:	   |  |  |   movea.l 20(sp),a0
   1592e:	   |  |  |   move.l 4(a0),d0
   15932:	   |  |  |   addq.l #1,d0
   15934:	   |  |  |   movea.l 20(sp),a0
   15938:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   1593c:	   |  |  |   move.l 20(sp),d0
   15940:	/--|--|--|-- bra.w 15a04 <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   15944:	|  |  |  \-> movea.l 20(sp),a0
   15948:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   1594e:	|  |  \----> tst.l 20(sp)
   15952:	|  \-------- bne.s 1591e <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15954:	|            moveq #26,d0
   15956:	|            move.l d0,16(sp)
   1595a:	|            clr.l 12(sp)
   1595e:	|            move.l 1a7a2 <SysBase>,d0
   15964:	|            movea.l d0,a6
   15966:	|            move.l 16(sp),d0
   1596a:	|            move.l 12(sp),d1
   1596e:	|            jsr -684(a6)
   15972:	|            move.l d0,8(sp)
   15976:	|            move.l 8(sp),d0
   1597a:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   1597e:	|     /----- beq.w 15a02 <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   15982:	|     |      movea.l 20(sp),a0
   15986:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   1598a:	|     |      move.l 20(sp),d0
   1598e:	|     |      addq.l #8,d0
   15990:	|     |      clr.l -(sp)
   15992:	|     |      move.l d0,-(sp)
   15994:	|     |      move.l 36(sp),-(sp)
   15998:	|     |      jsr 8618 <loadSpriteBank>
   1599e:	|     |      lea 12(sp),sp
   159a2:	|     |      tst.w d0
   159a4:	|     |  /-- beq.s 159da <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   159a6:	|     |  |   movea.l 20(sp),a0
   159aa:	|     |  |   moveq #1,d0
   159ac:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   159b0:	|     |  |   move.l 1a912 <allLoadedBanks>,d0
   159b6:	|     |  |   movea.l 20(sp),a0
   159ba:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   159be:	|     |  |   move.l 20(sp),1a912 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   159c6:	|     |  |   pea 19a44 <main_sludge.c.0270f7ba+0x267>
   159cc:	|     |  |   jsr 16bac <KPrintF>
   159d2:	|     |  |   addq.l #4,sp
			return returnMe;
   159d4:	|     |  |   move.l 20(sp),d0
   159d8:	+-----|--|-- bra.s 15a04 <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   159da:	|     |  \-> pea 19a71 <main_sludge.c.0270f7ba+0x294>
   159e0:	|     |      jsr 16bac <KPrintF>
   159e6:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   159e8:	|     |      move.l 20(sp),4(sp)
   159ee:	|     |      move.l 1a7a2 <SysBase>,d0
   159f4:	|     |      movea.l d0,a6
   159f6:	|     |      movea.l 4(sp),a1
   159fa:	|     |      jsr -690(a6)
			return NULL;
   159fe:	|     |      moveq #0,d0
   15a00:	+-----|----- bra.s 15a04 <loadBankForAnim+0xf6>
		}
	} else return NULL;
   15a02:	|     \----> moveq #0,d0
}
   15a04:	\----------> movea.l (sp)+,a6
   15a06:	             lea 20(sp),sp
   15a0a:	             rts

00015a0c <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15a0c:	       lea -32(sp),sp
   15a10:	       move.l d3,-(sp)
   15a12:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   15a14:	       move.l 60(sp),d0
   15a18:	       sub.l 52(sp),d0
   15a1c:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   15a20:	       move.l 64(sp),d0
   15a24:	       sub.l 56(sp),d0
   15a28:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15a2c:	       move.l 68(sp),d0
   15a30:	       sub.l 52(sp),d0
   15a34:	       move.l 36(sp),-(sp)
   15a38:	       move.l d0,-(sp)
   15a3a:	       jsr 1756a <__mulsi3>
   15a40:	       addq.l #8,sp
   15a42:	       move.l d0,d2
   15a44:	       move.l 72(sp),d0
   15a48:	       sub.l 56(sp),d0
   15a4c:	       move.l 32(sp),-(sp)
   15a50:	       move.l d0,-(sp)
   15a52:	       jsr 1756a <__mulsi3>
   15a58:	       addq.l #8,sp
   15a5a:	       add.l d2,d0
   15a5c:	       move.l d0,-(sp)
   15a5e:	       jsr 16fa8 <__floatsidf>
   15a64:	       addq.l #4,sp
   15a66:	       move.l d0,16(sp)
   15a6a:	       move.l d1,20(sp)
   15a6e:	       move.l 16(sp),24(sp)
   15a74:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15a7a:	       move.l 36(sp),-(sp)
   15a7e:	       move.l 40(sp),-(sp)
   15a82:	       jsr 1756a <__mulsi3>
   15a88:	       addq.l #8,sp
   15a8a:	       move.l d0,d2
   15a8c:	       move.l 32(sp),-(sp)
   15a90:	       move.l 36(sp),-(sp)
   15a94:	       jsr 1756a <__mulsi3>
   15a9a:	       addq.l #8,sp
   15a9c:	       add.l d2,d0
   15a9e:	       move.l d0,-(sp)
   15aa0:	       jsr 16fa8 <__floatsidf>
   15aa6:	       addq.l #4,sp
   15aa8:	       move.l d1,-(sp)
   15aaa:	       move.l d0,-(sp)
   15aac:	       move.l 36(sp),-(sp)
   15ab0:	       move.l 36(sp),-(sp)
   15ab4:	       jsr 16e32 <__divdf3>
   15aba:	       lea 16(sp),sp
   15abe:	       move.l d0,8(sp)
   15ac2:	       move.l d1,12(sp)
   15ac6:	       move.l 8(sp),24(sp)
   15acc:	       move.l 12(sp),28(sp)

	if (m < 0) {
   15ad2:	       clr.l -(sp)
   15ad4:	       clr.l -(sp)
   15ad6:	       move.l 36(sp),-(sp)
   15ada:	       move.l 36(sp),-(sp)
   15ade:	       jsr 171c0 <__ltdf2>
   15ae4:	       lea 16(sp),sp
   15ae8:	       tst.l d0
   15aea:	   /-- bge.s 15b00 <closestPointOnLine+0xf4>
		*closestX = x1;
   15aec:	   |   movea.l 44(sp),a0
   15af0:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   15af4:	   |   movea.l 48(sp),a0
   15af8:	   |   move.l 56(sp),(a0)
   15afc:	/--|-- bra.w 15be2 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   15b00:	|  \-> clr.l -(sp)
   15b02:	|      move.l #1072693248,-(sp)
   15b08:	|      move.l 36(sp),-(sp)
   15b0c:	|      move.l 36(sp),-(sp)
   15b10:	|      jsr 17106 <__gtdf2>
   15b16:	|      lea 16(sp),sp
   15b1a:	|      tst.l d0
   15b1c:	|  /-- ble.s 15b32 <closestPointOnLine+0x126>
		*closestX = x2;
   15b1e:	|  |   movea.l 44(sp),a0
   15b22:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   15b26:	|  |   movea.l 48(sp),a0
   15b2a:	|  |   move.l 64(sp),(a0)
   15b2e:	+--|-- bra.w 15be2 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   15b32:	|  \-> move.l 52(sp),-(sp)
   15b36:	|      jsr 16fa8 <__floatsidf>
   15b3c:	|      addq.l #4,sp
   15b3e:	|      move.l d0,d2
   15b40:	|      move.l d1,d3
   15b42:	|      move.l 36(sp),-(sp)
   15b46:	|      jsr 16fa8 <__floatsidf>
   15b4c:	|      addq.l #4,sp
   15b4e:	|      move.l 28(sp),-(sp)
   15b52:	|      move.l 28(sp),-(sp)
   15b56:	|      move.l d1,-(sp)
   15b58:	|      move.l d0,-(sp)
   15b5a:	|      jsr 17038 <__muldf3>
   15b60:	|      lea 16(sp),sp
   15b64:	|      move.l d1,-(sp)
   15b66:	|      move.l d0,-(sp)
   15b68:	|      move.l d3,-(sp)
   15b6a:	|      move.l d2,-(sp)
   15b6c:	|      jsr 16dd0 <__adddf3>
   15b72:	|      lea 16(sp),sp
   15b76:	|      move.l d1,-(sp)
   15b78:	|      move.l d0,-(sp)
   15b7a:	|      jsr 16f40 <__fixdfsi>
   15b80:	|      addq.l #8,sp
   15b82:	|      movea.l 44(sp),a0
   15b86:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   15b88:	|      move.l 56(sp),-(sp)
   15b8c:	|      jsr 16fa8 <__floatsidf>
   15b92:	|      addq.l #4,sp
   15b94:	|      move.l d0,d2
   15b96:	|      move.l d1,d3
   15b98:	|      move.l 32(sp),-(sp)
   15b9c:	|      jsr 16fa8 <__floatsidf>
   15ba2:	|      addq.l #4,sp
   15ba4:	|      move.l 28(sp),-(sp)
   15ba8:	|      move.l 28(sp),-(sp)
   15bac:	|      move.l d1,-(sp)
   15bae:	|      move.l d0,-(sp)
   15bb0:	|      jsr 17038 <__muldf3>
   15bb6:	|      lea 16(sp),sp
   15bba:	|      move.l d1,-(sp)
   15bbc:	|      move.l d0,-(sp)
   15bbe:	|      move.l d3,-(sp)
   15bc0:	|      move.l d2,-(sp)
   15bc2:	|      jsr 16dd0 <__adddf3>
   15bc8:	|      lea 16(sp),sp
   15bcc:	|      move.l d1,-(sp)
   15bce:	|      move.l d0,-(sp)
   15bd0:	|      jsr 16f40 <__fixdfsi>
   15bd6:	|      addq.l #8,sp
   15bd8:	|      movea.l 48(sp),a0
   15bdc:	|      move.l d0,(a0)
		return TRUE;
   15bde:	|      moveq #1,d0
   15be0:	|  /-- bra.s 15be4 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   15be2:	\--|-> clr.w d0
}
   15be4:	   \-> move.l (sp)+,d2
   15be6:	       move.l (sp)+,d3
   15be8:	       lea 32(sp),sp
   15bec:	       rts

00015bee <drawFloor>:

void drawFloor() {
   15bee:	                lea -12(sp),sp
   15bf2:	                move.l d3,-(sp)
   15bf4:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   15bf6:	                clr.l 16(sp)
   15bfa:	   /----------- bra.w 15e0e <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   15bfe:	/--|----------> movea.l 1a916 <currentFloor>,a0
   15c04:	|  |            move.l 12(a0),d1
   15c08:	|  |            move.l 16(sp),d0
   15c0c:	|  |            lsl.l #3,d0
   15c0e:	|  |            movea.l d1,a0
   15c10:	|  |            adda.l d0,a0
   15c12:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   15c16:	|  |            moveq #1,d0
   15c18:	|  |            cmp.l 8(sp),d0
   15c1c:	|  |  /-------- bge.w 15e0a <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   15c20:	|  |  |         moveq #1,d0
   15c22:	|  |  |         move.l d0,12(sp)
   15c26:	|  |  |     /-- bra.w 15d20 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   15c2a:	|  |  |  /--|-> movea.l 1a916 <currentFloor>,a0
   15c30:	|  |  |  |  |   move.l 4(a0),d1
   15c34:	|  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   15c3a:	|  |  |  |  |   movea.l 12(a0),a0
   15c3e:	|  |  |  |  |   move.l 16(sp),d0
   15c42:	|  |  |  |  |   lsl.l #3,d0
   15c44:	|  |  |  |  |   adda.l d0,a0
   15c46:	|  |  |  |  |   movea.l 4(a0),a0
   15c4a:	|  |  |  |  |   move.l 12(sp),d0
   15c4e:	|  |  |  |  |   add.l d0,d0
   15c50:	|  |  |  |  |   add.l d0,d0
   15c52:	|  |  |  |  |   adda.l d0,a0
   15c54:	|  |  |  |  |   move.l (a0),d0
   15c56:	|  |  |  |  |   lsl.l #3,d0
   15c58:	|  |  |  |  |   movea.l d1,a0
   15c5a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15c5c:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   15c60:	|  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   15c66:	|  |  |  |  |   move.l 4(a0),d1
   15c6a:	|  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   15c70:	|  |  |  |  |   movea.l 12(a0),a0
   15c74:	|  |  |  |  |   move.l 16(sp),d0
   15c78:	|  |  |  |  |   lsl.l #3,d0
   15c7a:	|  |  |  |  |   adda.l d0,a0
   15c7c:	|  |  |  |  |   movea.l 4(a0),a0
   15c80:	|  |  |  |  |   move.l 12(sp),d0
   15c84:	|  |  |  |  |   add.l d0,d0
   15c86:	|  |  |  |  |   add.l d0,d0
   15c88:	|  |  |  |  |   adda.l d0,a0
   15c8a:	|  |  |  |  |   move.l (a0),d0
   15c8c:	|  |  |  |  |   lsl.l #3,d0
   15c8e:	|  |  |  |  |   movea.l d1,a0
   15c90:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15c92:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   15c94:	|  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   15c9a:	|  |  |  |  |   move.l 4(a0),d1
   15c9e:	|  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   15ca4:	|  |  |  |  |   movea.l 12(a0),a0
   15ca8:	|  |  |  |  |   move.l 16(sp),d0
   15cac:	|  |  |  |  |   lsl.l #3,d0
   15cae:	|  |  |  |  |   adda.l d0,a0
   15cb0:	|  |  |  |  |   movea.l 4(a0),a0
   15cb4:	|  |  |  |  |   move.l 12(sp),d0
   15cb8:	|  |  |  |  |   addi.l #1073741823,d0
   15cbe:	|  |  |  |  |   add.l d0,d0
   15cc0:	|  |  |  |  |   add.l d0,d0
   15cc2:	|  |  |  |  |   adda.l d0,a0
   15cc4:	|  |  |  |  |   move.l (a0),d0
   15cc6:	|  |  |  |  |   lsl.l #3,d0
   15cc8:	|  |  |  |  |   movea.l d1,a0
   15cca:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15ccc:	|  |  |  |  |   move.l 4(a0),d1
   15cd0:	|  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   15cd6:	|  |  |  |  |   move.l 4(a0),d3
   15cda:	|  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   15ce0:	|  |  |  |  |   movea.l 12(a0),a0
   15ce4:	|  |  |  |  |   move.l 16(sp),d0
   15ce8:	|  |  |  |  |   lsl.l #3,d0
   15cea:	|  |  |  |  |   adda.l d0,a0
   15cec:	|  |  |  |  |   movea.l 4(a0),a0
   15cf0:	|  |  |  |  |   move.l 12(sp),d0
   15cf4:	|  |  |  |  |   addi.l #1073741823,d0
   15cfa:	|  |  |  |  |   add.l d0,d0
   15cfc:	|  |  |  |  |   add.l d0,d0
   15cfe:	|  |  |  |  |   adda.l d0,a0
   15d00:	|  |  |  |  |   move.l (a0),d0
   15d02:	|  |  |  |  |   lsl.l #3,d0
   15d04:	|  |  |  |  |   movea.l d3,a0
   15d06:	|  |  |  |  |   adda.l d0,a0
   15d08:	|  |  |  |  |   move.l (a0),d0
   15d0a:	|  |  |  |  |   move.l d2,-(sp)
   15d0c:	|  |  |  |  |   move.l a1,-(sp)
   15d0e:	|  |  |  |  |   move.l d1,-(sp)
   15d10:	|  |  |  |  |   move.l d0,-(sp)
   15d12:	|  |  |  |  |   jsr 36fc <drawLine>
   15d18:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   15d1c:	|  |  |  |  |   addq.l #1,12(sp)
   15d20:	|  |  |  |  \-> move.l 12(sp),d0
   15d24:	|  |  |  |      cmp.l 8(sp),d0
   15d28:	|  |  |  \----- blt.w 15c2a <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   15d2c:	|  |  |         movea.l 1a916 <currentFloor>,a0
   15d32:	|  |  |         move.l 4(a0),d1
   15d36:	|  |  |         movea.l 1a916 <currentFloor>,a0
   15d3c:	|  |  |         movea.l 12(a0),a0
   15d40:	|  |  |         move.l 16(sp),d0
   15d44:	|  |  |         lsl.l #3,d0
   15d46:	|  |  |         adda.l d0,a0
   15d48:	|  |  |         movea.l 4(a0),a0
   15d4c:	|  |  |         move.l 8(sp),d0
   15d50:	|  |  |         addi.l #1073741823,d0
   15d56:	|  |  |         add.l d0,d0
   15d58:	|  |  |         add.l d0,d0
   15d5a:	|  |  |         adda.l d0,a0
   15d5c:	|  |  |         move.l (a0),d0
   15d5e:	|  |  |         lsl.l #3,d0
   15d60:	|  |  |         movea.l d1,a0
   15d62:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15d64:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   15d68:	|  |  |         movea.l 1a916 <currentFloor>,a0
   15d6e:	|  |  |         move.l 4(a0),d1
   15d72:	|  |  |         movea.l 1a916 <currentFloor>,a0
   15d78:	|  |  |         movea.l 12(a0),a0
   15d7c:	|  |  |         move.l 16(sp),d0
   15d80:	|  |  |         lsl.l #3,d0
   15d82:	|  |  |         adda.l d0,a0
   15d84:	|  |  |         movea.l 4(a0),a0
   15d88:	|  |  |         move.l 8(sp),d0
   15d8c:	|  |  |         addi.l #1073741823,d0
   15d92:	|  |  |         add.l d0,d0
   15d94:	|  |  |         add.l d0,d0
   15d96:	|  |  |         adda.l d0,a0
   15d98:	|  |  |         move.l (a0),d0
   15d9a:	|  |  |         lsl.l #3,d0
   15d9c:	|  |  |         movea.l d1,a0
   15d9e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15da0:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   15da2:	|  |  |         movea.l 1a916 <currentFloor>,a0
   15da8:	|  |  |         move.l 4(a0),d1
   15dac:	|  |  |         movea.l 1a916 <currentFloor>,a0
   15db2:	|  |  |         movea.l 12(a0),a0
   15db6:	|  |  |         move.l 16(sp),d0
   15dba:	|  |  |         lsl.l #3,d0
   15dbc:	|  |  |         adda.l d0,a0
   15dbe:	|  |  |         movea.l 4(a0),a0
   15dc2:	|  |  |         move.l (a0),d0
   15dc4:	|  |  |         lsl.l #3,d0
   15dc6:	|  |  |         movea.l d1,a0
   15dc8:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15dca:	|  |  |         move.l 4(a0),d1
   15dce:	|  |  |         movea.l 1a916 <currentFloor>,a0
   15dd4:	|  |  |         move.l 4(a0),d3
   15dd8:	|  |  |         movea.l 1a916 <currentFloor>,a0
   15dde:	|  |  |         movea.l 12(a0),a0
   15de2:	|  |  |         move.l 16(sp),d0
   15de6:	|  |  |         lsl.l #3,d0
   15de8:	|  |  |         adda.l d0,a0
   15dea:	|  |  |         movea.l 4(a0),a0
   15dee:	|  |  |         move.l (a0),d0
   15df0:	|  |  |         lsl.l #3,d0
   15df2:	|  |  |         movea.l d3,a0
   15df4:	|  |  |         adda.l d0,a0
   15df6:	|  |  |         move.l (a0),d0
   15df8:	|  |  |         move.l d2,-(sp)
   15dfa:	|  |  |         move.l a1,-(sp)
   15dfc:	|  |  |         move.l d1,-(sp)
   15dfe:	|  |  |         move.l d0,-(sp)
   15e00:	|  |  |         jsr 36fc <drawLine>
   15e06:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   15e0a:	|  |  \-------> addq.l #1,16(sp)
   15e0e:	|  \----------> movea.l 1a916 <currentFloor>,a0
   15e14:	|               move.l 8(a0),d0
   15e18:	|               cmp.l 16(sp),d0
   15e1c:	\-------------- bgt.w 15bfe <drawFloor+0x10>
        }
    }
}
   15e20:	                nop
   15e22:	                nop
   15e24:	                move.l (sp)+,d2
   15e26:	                move.l (sp)+,d3
   15e28:	                lea 12(sp),sp
   15e2c:	                rts

00015e2e <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   15e2e:	                      lea -12(sp),sp
    int sharedVertices = 0;
   15e32:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   15e36:	                      clr.l 4(sp)
   15e3a:	   /----------------- bra.w 15ecc <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   15e3e:	/--|----------------> clr.l (sp)
   15e40:	|  |     /----------- bra.s 15ebc <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   15e42:	|  |  /--|----------> movea.l 16(sp),a0
   15e46:	|  |  |  |            move.l 4(a0),d1
   15e4a:	|  |  |  |            move.l 4(sp),d0
   15e4e:	|  |  |  |            add.l d0,d0
   15e50:	|  |  |  |            add.l d0,d0
   15e52:	|  |  |  |            movea.l d1,a0
   15e54:	|  |  |  |            adda.l d0,a0
   15e56:	|  |  |  |            move.l (a0),d1
   15e58:	|  |  |  |            movea.l 20(sp),a0
   15e5c:	|  |  |  |            movea.l 4(a0),a0
   15e60:	|  |  |  |            move.l (sp),d0
   15e62:	|  |  |  |            add.l d0,d0
   15e64:	|  |  |  |            add.l d0,d0
   15e66:	|  |  |  |            adda.l d0,a0
   15e68:	|  |  |  |            move.l (a0),d0
   15e6a:	|  |  |  |            cmp.l d1,d0
   15e6c:	|  |  |  |  /-------- bne.s 15eba <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   15e6e:	|  |  |  |  |         move.l 8(sp),d0
   15e72:	|  |  |  |  |         move.l d0,d1
   15e74:	|  |  |  |  |         addq.l #1,d1
   15e76:	|  |  |  |  |         move.l d1,8(sp)
   15e7a:	|  |  |  |  |         tst.l d0
   15e7c:	|  |  |  |  |     /-- beq.s 15e9e <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   15e7e:	|  |  |  |  |     |   movea.l 16(sp),a0
   15e82:	|  |  |  |  |     |   move.l 4(a0),d1
   15e86:	|  |  |  |  |     |   move.l 4(sp),d0
   15e8a:	|  |  |  |  |     |   add.l d0,d0
   15e8c:	|  |  |  |  |     |   add.l d0,d0
   15e8e:	|  |  |  |  |     |   movea.l d1,a0
   15e90:	|  |  |  |  |     |   adda.l d0,a0
   15e92:	|  |  |  |  |     |   move.l (a0),d0
   15e94:	|  |  |  |  |     |   movea.l 28(sp),a0
   15e98:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   15e9a:	|  |  |  |  |     |   moveq #1,d0
   15e9c:	|  |  |  |  |  /--|-- bra.s 15edc <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   15e9e:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   15ea2:	|  |  |  |  |  |      move.l 4(a0),d1
   15ea6:	|  |  |  |  |  |      move.l 4(sp),d0
   15eaa:	|  |  |  |  |  |      add.l d0,d0
   15eac:	|  |  |  |  |  |      add.l d0,d0
   15eae:	|  |  |  |  |  |      movea.l d1,a0
   15eb0:	|  |  |  |  |  |      adda.l d0,a0
   15eb2:	|  |  |  |  |  |      move.l (a0),d0
   15eb4:	|  |  |  |  |  |      movea.l 24(sp),a0
   15eb8:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   15eba:	|  |  |  |  \--|----> addq.l #1,(sp)
   15ebc:	|  |  |  \-----|----> movea.l 20(sp),a0
   15ec0:	|  |  |        |      move.l (a0),d0
   15ec2:	|  |  |        |      cmp.l (sp),d0
   15ec4:	|  |  \--------|----- bgt.w 15e42 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   15ec8:	|  |           |      addq.l #1,4(sp)
   15ecc:	|  \-----------|----> movea.l 16(sp),a0
   15ed0:	|              |      move.l (a0),d0
   15ed2:	|              |      cmp.l 4(sp),d0
   15ed6:	\--------------|----- bgt.w 15e3e <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   15eda:	               |      clr.w d0
}
   15edc:	               \----> lea 12(sp),sp
   15ee0:	                      rts

00015ee2 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   15ee2:	movea.l 1a916 <currentFloor>,a0
   15ee8:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   15eec:	movea.l 1a916 <currentFloor>,a0
   15ef2:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   15ef6:	movea.l 1a916 <currentFloor>,a0
   15efc:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   15f00:	movea.l 1a916 <currentFloor>,a0
   15f06:	clr.l 16(a0)
}
   15f0a:	nop
   15f0c:	rts

00015f0e <inFloor>:

int inFloor (int x, int y) {
   15f0e:	          subq.l #8,sp
	int i, r = -1;
   15f10:	          moveq #-1,d0
   15f12:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   15f14:	          clr.l 4(sp)
   15f18:	   /----- bra.s 15f4c <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   15f1a:	/--|----> movea.l 1a916 <currentFloor>,a0
   15f20:	|  |      move.l 12(a0),d1
   15f24:	|  |      move.l 4(sp),d0
   15f28:	|  |      lsl.l #3,d0
   15f2a:	|  |      add.l d1,d0
   15f2c:	|  |      move.l 16(sp),-(sp)
   15f30:	|  |      move.l 16(sp),-(sp)
   15f34:	|  |      move.l d0,-(sp)
   15f36:	|  |      jsr 16118 <pointInFloorPolygon>
   15f3c:	|  |      lea 12(sp),sp
   15f40:	|  |      tst.w d0
   15f42:	|  |  /-- beq.s 15f48 <inFloor+0x3a>
			r = i;
   15f44:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   15f48:	|  |  \-> addq.l #1,4(sp)
   15f4c:	|  \----> movea.l 1a916 <currentFloor>,a0
   15f52:	|         move.l 8(a0),d0
   15f56:	|         cmp.l 4(sp),d0
   15f5a:	\-------- bgt.s 15f1a <inFloor+0xc>

	return r;
   15f5c:	          move.l (sp),d0
}
   15f5e:	          addq.l #8,sp
   15f60:	          rts

00015f62 <initFloor>:

BOOL initFloor () {
   15f62:	       lea -12(sp),sp
   15f66:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   15f68:	       moveq #20,d0
   15f6a:	       move.l d0,12(sp)
   15f6e:	       clr.l 8(sp)
   15f72:	       move.l 1a7a2 <SysBase>,d0
   15f78:	       movea.l d0,a6
   15f7a:	       move.l 12(sp),d0
   15f7e:	       move.l 8(sp),d1
   15f82:	       jsr -684(a6)
   15f86:	       move.l d0,4(sp)
   15f8a:	       move.l 4(sp),d0
   15f8e:	       move.l d0,1a916 <currentFloor>

    if(currentFloor == 0) {
   15f94:	       move.l 1a916 <currentFloor>,d0
   15f9a:	/----- bne.s 15fae <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   15f9c:	|      pea 19aaa <main_sludge.c.0270f7ba+0x2cd>
   15fa2:	|      jsr 16bac <KPrintF>
   15fa8:	|      addq.l #4,sp
        return FALSE;
   15faa:	|      clr.w d0
   15fac:	|  /-- bra.s 15fb6 <initFloor+0x54>
    }

	noFloor ();
   15fae:	\--|-> jsr 15ee2 <noFloor>
	return TRUE;
   15fb4:	   |   moveq #1,d0
}
   15fb6:	   \-> movea.l (sp)+,a6
   15fb8:	       lea 12(sp),sp
   15fbc:	       rts

00015fbe <killFloor>:

void killFloor () {
   15fbe:	       lea -24(sp),sp
   15fc2:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   15fc4:	       clr.l 24(sp)
   15fc8:	   /-- bra.s 16022 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   15fca:	/--|-> movea.l 1a916 <currentFloor>,a0
   15fd0:	|  |   move.l 12(a0),d1
   15fd4:	|  |   move.l 24(sp),d0
   15fd8:	|  |   lsl.l #3,d0
   15fda:	|  |   movea.l d1,a0
   15fdc:	|  |   adda.l d0,a0
   15fde:	|  |   move.l 4(a0),8(sp)
   15fe4:	|  |   move.l 1a7a2 <SysBase>,d0
   15fea:	|  |   movea.l d0,a6
   15fec:	|  |   movea.l 8(sp),a1
   15ff0:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   15ff4:	|  |   movea.l 1a916 <currentFloor>,a0
   15ffa:	|  |   move.l 16(a0),d1
   15ffe:	|  |   move.l 24(sp),d0
   16002:	|  |   add.l d0,d0
   16004:	|  |   add.l d0,d0
   16006:	|  |   movea.l d1,a0
   16008:	|  |   adda.l d0,a0
   1600a:	|  |   move.l (a0),4(sp)
   1600e:	|  |   move.l 1a7a2 <SysBase>,d0
   16014:	|  |   movea.l d0,a6
   16016:	|  |   movea.l 4(sp),a1
   1601a:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1601e:	|  |   addq.l #1,24(sp)
   16022:	|  \-> movea.l 1a916 <currentFloor>,a0
   16028:	|      move.l 8(a0),d0
   1602c:	|      cmp.l 24(sp),d0
   16030:	\----- bgt.s 15fca <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16032:	       movea.l 1a916 <currentFloor>,a0
   16038:	       move.l 12(a0),20(sp)
   1603e:	       move.l 1a7a2 <SysBase>,d0
   16044:	       movea.l d0,a6
   16046:	       movea.l 20(sp),a1
   1604a:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   1604e:	       movea.l 1a916 <currentFloor>,a0
   16054:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16058:	       movea.l 1a916 <currentFloor>,a0
   1605e:	       move.l 4(a0),16(sp)
   16064:	       move.l 1a7a2 <SysBase>,d0
   1606a:	       movea.l d0,a6
   1606c:	       movea.l 16(sp),a1
   16070:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16074:	       movea.l 1a916 <currentFloor>,a0
   1607a:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1607e:	       movea.l 1a916 <currentFloor>,a0
   16084:	       move.l 16(a0),12(sp)
   1608a:	       move.l 1a7a2 <SysBase>,d0
   16090:	       movea.l d0,a6
   16092:	       movea.l 12(sp),a1
   16096:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   1609a:	       movea.l 1a916 <currentFloor>,a0
   160a0:	       clr.l 16(a0)
}
   160a4:	       nop
   160a6:	       movea.l (sp)+,a6
   160a8:	       lea 24(sp),sp
   160ac:	       rts

000160ae <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   160ae:	                   lea -12(sp),sp
	int sharedVertices = 0;
   160b2:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   160b6:	                   clr.l 4(sp)
   160ba:	   /-------------- bra.s 16106 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   160bc:	/--|-------------> clr.l (sp)
   160be:	|  |     /-------- bra.s 160fa <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   160c0:	|  |  /--|-------> move.l 20(sp),d1
   160c4:	|  |  |  |         move.l 4(sp),d0
   160c8:	|  |  |  |         add.l d0,d0
   160ca:	|  |  |  |         add.l d0,d0
   160cc:	|  |  |  |         movea.l d1,a0
   160ce:	|  |  |  |         adda.l d0,a0
   160d0:	|  |  |  |         move.l (a0),d1
   160d2:	|  |  |  |         movea.l 28(sp),a0
   160d6:	|  |  |  |         move.l (sp),d0
   160d8:	|  |  |  |         add.l d0,d0
   160da:	|  |  |  |         add.l d0,d0
   160dc:	|  |  |  |         adda.l d0,a0
   160de:	|  |  |  |         move.l (a0),d0
   160e0:	|  |  |  |         cmp.l d1,d0
   160e2:	|  |  |  |     /-- bne.s 160f8 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   160e4:	|  |  |  |     |   move.l 8(sp),d0
   160e8:	|  |  |  |     |   move.l d0,d1
   160ea:	|  |  |  |     |   addq.l #1,d1
   160ec:	|  |  |  |     |   move.l d1,8(sp)
   160f0:	|  |  |  |     |   tst.l d0
   160f2:	|  |  |  |     +-- beq.s 160f8 <polysShareSide+0x4a>
   160f4:	|  |  |  |     |   moveq #1,d0
   160f6:	|  |  |  |  /--|-- bra.s 16112 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   160f8:	|  |  |  |  |  \-> addq.l #1,(sp)
   160fa:	|  |  |  \--|----> move.l 24(sp),d0
   160fe:	|  |  |     |      cmp.l (sp),d0
   16100:	|  |  \-----|----- bgt.s 160c0 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16102:	|  |        |      addq.l #1,4(sp)
   16106:	|  \--------|----> move.l 16(sp),d0
   1610a:	|           |      cmp.l 4(sp),d0
   1610e:	\-----------|----- bgt.s 160bc <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16110:	            |      clr.w d0
}
   16112:	            \----> lea 12(sp),sp
   16116:	                   rts

00016118 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16118:	             lea -28(sp),sp
   1611c:	             move.l d3,-(sp)
   1611e:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16120:	             clr.l 32(sp)
   16124:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16128:	             movea.l 40(sp),a0
   1612c:	             move.l (a0),d0
   1612e:	             move.l d0,d1
   16130:	             subq.l #1,d1
   16132:	             move.l d1,28(sp)
   16136:	   /-------- bra.w 16330 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   1613a:	/--|-------> movea.l 1a916 <currentFloor>,a0
   16140:	|  |         move.l 4(a0),d1
   16144:	|  |         movea.l 40(sp),a0
   16148:	|  |         movea.l 4(a0),a0
   1614c:	|  |         move.l 32(sp),d0
   16150:	|  |         add.l d0,d0
   16152:	|  |         add.l d0,d0
   16154:	|  |         adda.l d0,a0
   16156:	|  |         move.l (a0),d0
   16158:	|  |         lsl.l #3,d0
   1615a:	|  |         movea.l d1,a0
   1615c:	|  |         adda.l d0,a0
   1615e:	|  |         move.l (a0),d0
   16160:	|  |         move.l d0,-(sp)
   16162:	|  |         jsr 16fe8 <__floatsisf>
   16168:	|  |         addq.l #4,sp
   1616a:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   1616e:	|  |         movea.l 1a916 <currentFloor>,a0
   16174:	|  |         move.l 4(a0),d1
   16178:	|  |         movea.l 40(sp),a0
   1617c:	|  |         movea.l 4(a0),a0
   16180:	|  |         move.l 32(sp),d0
   16184:	|  |         add.l d0,d0
   16186:	|  |         add.l d0,d0
   16188:	|  |         adda.l d0,a0
   1618a:	|  |         move.l (a0),d0
   1618c:	|  |         lsl.l #3,d0
   1618e:	|  |         movea.l d1,a0
   16190:	|  |         adda.l d0,a0
   16192:	|  |         move.l 4(a0),d0
   16196:	|  |         move.l d0,-(sp)
   16198:	|  |         jsr 16fe8 <__floatsisf>
   1619e:	|  |         addq.l #4,sp
   161a0:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   161a4:	|  |         movea.l 1a916 <currentFloor>,a0
   161aa:	|  |         move.l 4(a0),d1
   161ae:	|  |         movea.l 40(sp),a0
   161b2:	|  |         movea.l 4(a0),a0
   161b6:	|  |         move.l 28(sp),d0
   161ba:	|  |         add.l d0,d0
   161bc:	|  |         add.l d0,d0
   161be:	|  |         adda.l d0,a0
   161c0:	|  |         move.l (a0),d0
   161c2:	|  |         lsl.l #3,d0
   161c4:	|  |         movea.l d1,a0
   161c6:	|  |         adda.l d0,a0
   161c8:	|  |         move.l (a0),d0
   161ca:	|  |         move.l d0,-(sp)
   161cc:	|  |         jsr 16fe8 <__floatsisf>
   161d2:	|  |         addq.l #4,sp
   161d4:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   161d8:	|  |         movea.l 1a916 <currentFloor>,a0
   161de:	|  |         move.l 4(a0),d1
   161e2:	|  |         movea.l 40(sp),a0
   161e6:	|  |         movea.l 4(a0),a0
   161ea:	|  |         move.l 28(sp),d0
   161ee:	|  |         add.l d0,d0
   161f0:	|  |         add.l d0,d0
   161f2:	|  |         adda.l d0,a0
   161f4:	|  |         move.l (a0),d0
   161f6:	|  |         lsl.l #3,d0
   161f8:	|  |         movea.l d1,a0
   161fa:	|  |         adda.l d0,a0
   161fc:	|  |         move.l 4(a0),d0
   16200:	|  |         move.l d0,-(sp)
   16202:	|  |         jsr 16fe8 <__floatsisf>
   16208:	|  |         addq.l #4,sp
   1620a:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1620e:	|  |         move.l 48(sp),-(sp)
   16212:	|  |         jsr 16fe8 <__floatsisf>
   16218:	|  |         addq.l #4,sp
   1621a:	|  |         move.l d0,-(sp)
   1621c:	|  |         move.l 20(sp),-(sp)
   16220:	|  |         jsr 1718a <__lesf2>
   16226:	|  |         addq.l #8,sp
   16228:	|  |         tst.l d0
   1622a:	|  |     /-- bgt.s 1624a <pointInFloorPolygon+0x132>
   1622c:	|  |     |   move.l 48(sp),-(sp)
   16230:	|  |     |   jsr 16fe8 <__floatsisf>
   16236:	|  |     |   addq.l #4,sp
   16238:	|  |     |   move.l d0,-(sp)
   1623a:	|  |     |   move.l 12(sp),-(sp)
   1623e:	|  |     |   jsr 17154 <__gtsf2>
   16244:	|  |     |   addq.l #8,sp
   16246:	|  |     |   tst.l d0
   16248:	|  |  /--|-- bgt.s 1628a <pointInFloorPolygon+0x172>
   1624a:	|  |  |  \-> move.l 48(sp),-(sp)
   1624e:	|  |  |      jsr 16fe8 <__floatsisf>
   16254:	|  |  |      addq.l #4,sp
   16256:	|  |  |      move.l d0,-(sp)
   16258:	|  |  |      move.l 12(sp),-(sp)
   1625c:	|  |  |      jsr 1718a <__lesf2>
   16262:	|  |  |      addq.l #8,sp
   16264:	|  |  |      tst.l d0
   16266:	|  |  |  /-- bgt.w 16320 <pointInFloorPolygon+0x208>
   1626a:	|  |  |  |   move.l 48(sp),-(sp)
   1626e:	|  |  |  |   jsr 16fe8 <__floatsisf>
   16274:	|  |  |  |   addq.l #4,sp
   16276:	|  |  |  |   move.l d0,-(sp)
   16278:	|  |  |  |   move.l 20(sp),-(sp)
   1627c:	|  |  |  |   jsr 17154 <__gtsf2>
   16282:	|  |  |  |   addq.l #8,sp
   16284:	|  |  |  |   tst.l d0
   16286:	|  |  |  +-- ble.w 16320 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   1628a:	|  |  \--|-> move.l 44(sp),-(sp)
   1628e:	|  |     |   jsr 16fe8 <__floatsisf>
   16294:	|  |     |   addq.l #4,sp
   16296:	|  |     |   move.l d0,d3
   16298:	|  |     |   move.l 20(sp),-(sp)
   1629c:	|  |     |   move.l 16(sp),-(sp)
   162a0:	|  |     |   jsr 172dc <__subsf3>
   162a6:	|  |     |   addq.l #8,sp
   162a8:	|  |     |   move.l d0,d2
   162aa:	|  |     |   move.l 48(sp),-(sp)
   162ae:	|  |     |   jsr 16fe8 <__floatsisf>
   162b4:	|  |     |   addq.l #4,sp
   162b6:	|  |     |   move.l 16(sp),-(sp)
   162ba:	|  |     |   move.l d0,-(sp)
   162bc:	|  |     |   jsr 172dc <__subsf3>
   162c2:	|  |     |   addq.l #8,sp
   162c4:	|  |     |   move.l d0,-(sp)
   162c6:	|  |     |   move.l d2,-(sp)
   162c8:	|  |     |   jsr 1709a <__mulsf3>
   162ce:	|  |     |   addq.l #8,sp
   162d0:	|  |     |   move.l d0,d2
   162d2:	|  |     |   move.l 16(sp),-(sp)
   162d6:	|  |     |   move.l 12(sp),-(sp)
   162da:	|  |     |   jsr 172dc <__subsf3>
   162e0:	|  |     |   addq.l #8,sp
   162e2:	|  |     |   move.l d0,-(sp)
   162e4:	|  |     |   move.l d2,-(sp)
   162e6:	|  |     |   jsr 16e94 <__divsf3>
   162ec:	|  |     |   addq.l #8,sp
   162ee:	|  |     |   move.l 20(sp),-(sp)
   162f2:	|  |     |   move.l d0,-(sp)
   162f4:	|  |     |   jsr 16d9a <__addsf3>
   162fa:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   162fc:	|  |     |   move.l d0,-(sp)
   162fe:	|  |     |   move.l d3,-(sp)
   16300:	|  |     |   jsr 1720e <__ltsf2>
   16306:	|  |     |   addq.l #8,sp
   16308:	|  |     |   tst.l d0
   1630a:	|  |     +-- bge.s 16320 <pointInFloorPolygon+0x208>

			c = !c;
   1630c:	|  |     |   tst.l 24(sp)
   16310:	|  |     |   seq d0
   16312:	|  |     |   neg.b d0
   16314:	|  |     |   move.b d0,d0
   16316:	|  |     |   andi.l #255,d0
   1631c:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16320:	|  |     \-> move.l 32(sp),d0
   16324:	|  |         move.l d0,d1
   16326:	|  |         addq.l #1,d1
   16328:	|  |         move.l d1,32(sp)
   1632c:	|  |         move.l d0,28(sp)
   16330:	|  \-------> movea.l 40(sp),a0
   16334:	|            move.l (a0),d0
   16336:	|            cmp.l 32(sp),d0
   1633a:	\----------- bgt.w 1613a <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   1633e:	             tst.l 24(sp)
   16342:	             sne d0
   16344:	             neg.b d0
   16346:	             move.b d0,d0
   16348:	             andi.w #255,d0
}
   1634c:	             move.l (sp)+,d2
   1634e:	             move.l (sp)+,d3
   16350:	             lea 28(sp),sp
   16354:	             rts

00016356 <setFloor>:

BOOL setFloor (int fileNum) {
   16356:	                               lea -132(sp),sp
   1635a:	                               move.l a6,-(sp)
   1635c:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   1635e:	                               jsr 15fbe <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16364:	                               move.l 144(sp),-(sp)
   16368:	                               jsr 660a <openFileFromNum>
   1636e:	                               addq.l #4,sp
   16370:	                               tst.l d0
   16372:	                           /-- bne.s 1637a <setFloor+0x24>
   16374:	                           |   clr.w d0
   16376:	/--------------------------|-- bra.w 16ac6 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   1637a:	|                          \-> movea.l 1a916 <currentFloor>,a0
   16380:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16384:	|                              move.l 1a78a <bigDataFile>,118(sp)
   1638c:	|                              move.l 1a7aa <DOSBase>,d0
   16392:	|                              movea.l d0,a6
   16394:	|                              move.l 118(sp),d1
   16398:	|                              jsr -306(a6)
   1639c:	|                              move.l d0,114(sp)
   163a0:	|                              move.l 114(sp),d0
   163a4:	|                              movea.l 1a916 <currentFloor>,a0
   163aa:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   163ae:	|                              movea.l 1a916 <currentFloor>,a0
   163b4:	|                              move.l 8(a0),d0
   163b8:	|                              lsl.l #3,d0
   163ba:	|                              move.l d0,110(sp)
   163be:	|                              clr.l 106(sp)
   163c2:	|                              move.l 1a7a2 <SysBase>,d0
   163c8:	|                              movea.l d0,a6
   163ca:	|                              move.l 110(sp),d0
   163ce:	|                              move.l 106(sp),d1
   163d2:	|                              jsr -684(a6)
   163d6:	|                              move.l d0,102(sp)
   163da:	|                              move.l 102(sp),d0
   163de:	|                              movea.l 1a916 <currentFloor>,a0
   163e4:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   163e8:	|                              movea.l 1a916 <currentFloor>,a0
   163ee:	|                              move.l 12(a0),d0
   163f2:	|                          /-- bne.s 16408 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   163f4:	|                          |   pea 19ace <main_sludge.c.0270f7ba+0x2f1>
   163fa:	|                          |   jsr 16bac <KPrintF>
   16400:	|                          |   addq.l #4,sp
		return FALSE;
   16402:	|                          |   clr.w d0
   16404:	+--------------------------|-- bra.w 16ac6 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16408:	|                          \-> clr.l 136(sp)
   1640c:	|                    /-------- bra.w 16524 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16410:	|                 /--|-------> move.l 1a78a <bigDataFile>,26(sp)
   16418:	|                 |  |         move.l 1a7aa <DOSBase>,d0
   1641e:	|                 |  |         movea.l d0,a6
   16420:	|                 |  |         move.l 26(sp),d1
   16424:	|                 |  |         jsr -306(a6)
   16428:	|                 |  |         move.l d0,22(sp)
   1642c:	|                 |  |         move.l 22(sp),d1
   16430:	|                 |  |         movea.l 1a916 <currentFloor>,a0
   16436:	|                 |  |         movea.l 12(a0),a0
   1643a:	|                 |  |         move.l 136(sp),d0
   1643e:	|                 |  |         lsl.l #3,d0
   16440:	|                 |  |         adda.l d0,a0
   16442:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16444:	|                 |  |         movea.l 1a916 <currentFloor>,a0
   1644a:	|                 |  |         move.l 12(a0),d1
   1644e:	|                 |  |         move.l 136(sp),d0
   16452:	|                 |  |         lsl.l #3,d0
   16454:	|                 |  |         movea.l d1,a0
   16456:	|                 |  |         adda.l d0,a0
   16458:	|                 |  |         move.l (a0),d0
   1645a:	|                 |  |         add.l d0,d0
   1645c:	|                 |  |         add.l d0,d0
   1645e:	|                 |  |         move.l d0,18(sp)
   16462:	|                 |  |         clr.l 14(sp)
   16466:	|                 |  |         move.l 1a7a2 <SysBase>,d0
   1646c:	|                 |  |         movea.l d0,a6
   1646e:	|                 |  |         move.l 18(sp),d0
   16472:	|                 |  |         move.l 14(sp),d1
   16476:	|                 |  |         jsr -684(a6)
   1647a:	|                 |  |         move.l d0,10(sp)
   1647e:	|                 |  |         move.l 10(sp),d1
   16482:	|                 |  |         movea.l 1a916 <currentFloor>,a0
   16488:	|                 |  |         movea.l 12(a0),a0
   1648c:	|                 |  |         move.l 136(sp),d0
   16490:	|                 |  |         lsl.l #3,d0
   16492:	|                 |  |         adda.l d0,a0
   16494:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16498:	|                 |  |         movea.l 1a916 <currentFloor>,a0
   1649e:	|                 |  |         move.l 12(a0),d1
   164a2:	|                 |  |         move.l 136(sp),d0
   164a6:	|                 |  |         lsl.l #3,d0
   164a8:	|                 |  |         movea.l d1,a0
   164aa:	|                 |  |         adda.l d0,a0
   164ac:	|                 |  |         move.l 4(a0),d0
   164b0:	|                 |  |     /-- bne.s 164c6 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   164b2:	|                 |  |     |   pea 19ace <main_sludge.c.0270f7ba+0x2f1>
   164b8:	|                 |  |     |   jsr 16bac <KPrintF>
   164be:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   164c0:	|                 |  |     |   clr.w d0
   164c2:	+-----------------|--|-----|-- bra.w 16ac6 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   164c6:	|                 |  |     \-> clr.l 132(sp)
   164ca:	|                 |  |     /-- bra.s 16504 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   164cc:	|                 |  |  /--|-> move.l 1a78a <bigDataFile>,d1
   164d2:	|                 |  |  |  |   movea.l 1a916 <currentFloor>,a0
   164d8:	|                 |  |  |  |   movea.l 12(a0),a0
   164dc:	|                 |  |  |  |   move.l 136(sp),d0
   164e0:	|                 |  |  |  |   lsl.l #3,d0
   164e2:	|                 |  |  |  |   adda.l d0,a0
   164e4:	|                 |  |  |  |   movea.l 4(a0),a0
   164e8:	|                 |  |  |  |   move.l 132(sp),d0
   164ec:	|                 |  |  |  |   add.l d0,d0
   164ee:	|                 |  |  |  |   add.l d0,d0
   164f0:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   164f4:	|                 |  |  |  |   move.l d1,-(sp)
   164f6:	|                 |  |  |  |   jsr 6bc <get2bytes>
   164fc:	|                 |  |  |  |   addq.l #4,sp
   164fe:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16500:	|                 |  |  |  |   addq.l #1,132(sp)
   16504:	|                 |  |  |  \-> movea.l 1a916 <currentFloor>,a0
   1650a:	|                 |  |  |      move.l 12(a0),d1
   1650e:	|                 |  |  |      move.l 136(sp),d0
   16512:	|                 |  |  |      lsl.l #3,d0
   16514:	|                 |  |  |      movea.l d1,a0
   16516:	|                 |  |  |      adda.l d0,a0
   16518:	|                 |  |  |      move.l (a0),d0
   1651a:	|                 |  |  |      cmp.l 132(sp),d0
   1651e:	|                 |  |  \----- bgt.s 164cc <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16520:	|                 |  |         addq.l #1,136(sp)
   16524:	|                 |  \-------> movea.l 1a916 <currentFloor>,a0
   1652a:	|                 |            move.l 8(a0),d0
   1652e:	|                 |            cmp.l 136(sp),d0
   16532:	|                 \----------- bgt.w 16410 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16536:	|                              move.l 1a78a <bigDataFile>,d0
   1653c:	|                              move.l d0,-(sp)
   1653e:	|                              jsr 6bc <get2bytes>
   16544:	|                              addq.l #4,sp
   16546:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   1654a:	|                              move.l 136(sp),d0
   1654e:	|                              lsl.l #3,d0
   16550:	|                              move.l d0,98(sp)
   16554:	|                              clr.l 94(sp)
   16558:	|                              move.l 1a7a2 <SysBase>,d0
   1655e:	|                              movea.l d0,a6
   16560:	|                              move.l 98(sp),d0
   16564:	|                              move.l 94(sp),d1
   16568:	|                              jsr -684(a6)
   1656c:	|                              move.l d0,90(sp)
   16570:	|                              move.l 90(sp),d0
   16574:	|                              movea.l 1a916 <currentFloor>,a0
   1657a:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   1657e:	|                              movea.l 1a916 <currentFloor>,a0
   16584:	|                              move.l 4(a0),d0
   16588:	|                          /-- bne.s 1659e <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   1658a:	|                          |   pea 19ace <main_sludge.c.0270f7ba+0x2f1>
   16590:	|                          |   jsr 16bac <KPrintF>
   16596:	|                          |   addq.l #4,sp
		return FALSE;
   16598:	|                          |   clr.w d0
   1659a:	+--------------------------|-- bra.w 16ac6 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   1659e:	|                          \-> clr.l 132(sp)
   165a2:	|                          /-- bra.s 165f6 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   165a4:	|                       /--|-> move.l 1a78a <bigDataFile>,d1
   165aa:	|                       |  |   movea.l 1a916 <currentFloor>,a0
   165b0:	|                       |  |   movea.l 4(a0),a0
   165b4:	|                       |  |   move.l 132(sp),d0
   165b8:	|                       |  |   lsl.l #3,d0
   165ba:	|                       |  |   lea (0,a0,d0.l),a2
   165be:	|                       |  |   move.l d1,-(sp)
   165c0:	|                       |  |   jsr 6bc <get2bytes>
   165c6:	|                       |  |   addq.l #4,sp
   165c8:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   165ca:	|                       |  |   move.l 1a78a <bigDataFile>,d1
   165d0:	|                       |  |   movea.l 1a916 <currentFloor>,a0
   165d6:	|                       |  |   movea.l 4(a0),a0
   165da:	|                       |  |   move.l 132(sp),d0
   165de:	|                       |  |   lsl.l #3,d0
   165e0:	|                       |  |   lea (0,a0,d0.l),a2
   165e4:	|                       |  |   move.l d1,-(sp)
   165e6:	|                       |  |   jsr 6bc <get2bytes>
   165ec:	|                       |  |   addq.l #4,sp
   165ee:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   165f2:	|                       |  |   addq.l #1,132(sp)
   165f6:	|                       |  \-> move.l 132(sp),d0
   165fa:	|                       |      cmp.l 136(sp),d0
   165fe:	|                       \----- blt.s 165a4 <setFloor+0x24e>
	}

	finishAccess ();
   16600:	|                              jsr 6502 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16606:	|                              movea.l 1a916 <currentFloor>,a0
   1660c:	|                              move.l 8(a0),d0
   16610:	|                              add.l d0,d0
   16612:	|                              add.l d0,d0
   16614:	|                              move.l d0,86(sp)
   16618:	|                              clr.l 82(sp)
   1661c:	|                              move.l 1a7a2 <SysBase>,d0
   16622:	|                              movea.l d0,a6
   16624:	|                              move.l 86(sp),d0
   16628:	|                              move.l 82(sp),d1
   1662c:	|                              jsr -684(a6)
   16630:	|                              move.l d0,78(sp)
   16634:	|                              move.l 78(sp),d0
   16638:	|                              movea.l 1a916 <currentFloor>,a0
   1663e:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16642:	|                              movea.l 1a916 <currentFloor>,a0
   16648:	|                              move.l 8(a0),d0
   1664c:	|                              add.l d0,d0
   1664e:	|                              add.l d0,d0
   16650:	|                              move.l d0,74(sp)
   16654:	|                              clr.l 70(sp)
   16658:	|                              move.l 1a7a2 <SysBase>,d0
   1665e:	|                              movea.l d0,a6
   16660:	|                              move.l 74(sp),d0
   16664:	|                              move.l 70(sp),d1
   16668:	|                              jsr -684(a6)
   1666c:	|                              move.l d0,66(sp)
   16670:	|                              move.l 66(sp),d0
   16674:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16678:	|                              movea.l 1a916 <currentFloor>,a0
   1667e:	|                              move.l 16(a0),d0
   16682:	|                          /-- bne.s 16698 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16684:	|                          |   pea 19ace <main_sludge.c.0270f7ba+0x2f1>
   1668a:	|                          |   jsr 16bac <KPrintF>
   16690:	|                          |   addq.l #4,sp
		return FALSE;
   16692:	|                          |   clr.w d0
   16694:	+--------------------------|-- bra.w 16ac6 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16698:	|                          \-> clr.l 136(sp)
   1669c:	|                    /-------- bra.w 167c0 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   166a0:	|                 /--|-------> movea.l 1a916 <currentFloor>,a0
   166a6:	|                 |  |         move.l 8(a0),d0
   166aa:	|                 |  |         add.l d0,d0
   166ac:	|                 |  |         add.l d0,d0
   166ae:	|                 |  |         move.l d0,50(sp)
   166b2:	|                 |  |         clr.l 46(sp)
   166b6:	|                 |  |         move.l 1a7a2 <SysBase>,d0
   166bc:	|                 |  |         movea.l d0,a6
   166be:	|                 |  |         move.l 50(sp),d0
   166c2:	|                 |  |         move.l 46(sp),d1
   166c6:	|                 |  |         jsr -684(a6)
   166ca:	|                 |  |         move.l d0,42(sp)
   166ce:	|                 |  |         move.l 42(sp),d0
   166d2:	|                 |  |         movea.l 1a916 <currentFloor>,a0
   166d8:	|                 |  |         movea.l 16(a0),a0
   166dc:	|                 |  |         move.l 136(sp),d1
   166e0:	|                 |  |         add.l d1,d1
   166e2:	|                 |  |         add.l d1,d1
   166e4:	|                 |  |         adda.l d1,a0
   166e6:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   166e8:	|                 |  |         movea.l 1a916 <currentFloor>,a0
   166ee:	|                 |  |         move.l 8(a0),d0
   166f2:	|                 |  |         add.l d0,d0
   166f4:	|                 |  |         add.l d0,d0
   166f6:	|                 |  |         move.l d0,38(sp)
   166fa:	|                 |  |         clr.l 34(sp)
   166fe:	|                 |  |         move.l 1a7a2 <SysBase>,d0
   16704:	|                 |  |         movea.l d0,a6
   16706:	|                 |  |         move.l 38(sp),d0
   1670a:	|                 |  |         move.l 34(sp),d1
   1670e:	|                 |  |         jsr -684(a6)
   16712:	|                 |  |         move.l d0,30(sp)
   16716:	|                 |  |         move.l 30(sp),d1
   1671a:	|                 |  |         move.l 136(sp),d0
   1671e:	|                 |  |         add.l d0,d0
   16720:	|                 |  |         add.l d0,d0
   16722:	|                 |  |         movea.l 62(sp),a0
   16726:	|                 |  |         adda.l d0,a0
   16728:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   1672a:	|                 |  |         movea.l 1a916 <currentFloor>,a0
   16730:	|                 |  |         move.l 16(a0),d1
   16734:	|                 |  |         move.l 136(sp),d0
   16738:	|                 |  |         add.l d0,d0
   1673a:	|                 |  |         add.l d0,d0
   1673c:	|                 |  |         movea.l d1,a0
   1673e:	|                 |  |         adda.l d0,a0
   16740:	|                 |  |         move.l (a0),d0
   16742:	|                 |  |     /-- bne.s 16758 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16744:	|                 |  |     |   pea 19ace <main_sludge.c.0270f7ba+0x2f1>
   1674a:	|                 |  |     |   jsr 16bac <KPrintF>
   16750:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16752:	|                 |  |     |   clr.w d0
   16754:	+-----------------|--|-----|-- bra.w 16ac6 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16758:	|                 |  |     \-> clr.l 132(sp)
   1675c:	|                 |  |     /-- bra.s 167ac <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   1675e:	|                 |  |  /--|-> movea.l 1a916 <currentFloor>,a0
   16764:	|                 |  |  |  |   move.l 16(a0),d1
   16768:	|                 |  |  |  |   move.l 136(sp),d0
   1676c:	|                 |  |  |  |   add.l d0,d0
   1676e:	|                 |  |  |  |   add.l d0,d0
   16770:	|                 |  |  |  |   movea.l d1,a0
   16772:	|                 |  |  |  |   adda.l d0,a0
   16774:	|                 |  |  |  |   move.l (a0),d1
   16776:	|                 |  |  |  |   move.l 132(sp),d0
   1677a:	|                 |  |  |  |   add.l d0,d0
   1677c:	|                 |  |  |  |   add.l d0,d0
   1677e:	|                 |  |  |  |   movea.l d1,a0
   16780:	|                 |  |  |  |   adda.l d0,a0
   16782:	|                 |  |  |  |   moveq #-1,d1
   16784:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16786:	|                 |  |  |  |   move.l 136(sp),d0
   1678a:	|                 |  |  |  |   add.l d0,d0
   1678c:	|                 |  |  |  |   add.l d0,d0
   1678e:	|                 |  |  |  |   movea.l 62(sp),a0
   16792:	|                 |  |  |  |   adda.l d0,a0
   16794:	|                 |  |  |  |   move.l (a0),d1
   16796:	|                 |  |  |  |   move.l 132(sp),d0
   1679a:	|                 |  |  |  |   add.l d0,d0
   1679c:	|                 |  |  |  |   add.l d0,d0
   1679e:	|                 |  |  |  |   movea.l d1,a0
   167a0:	|                 |  |  |  |   adda.l d0,a0
   167a2:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   167a8:	|                 |  |  |  |   addq.l #1,132(sp)
   167ac:	|                 |  |  |  \-> movea.l 1a916 <currentFloor>,a0
   167b2:	|                 |  |  |      move.l 8(a0),d0
   167b6:	|                 |  |  |      cmp.l 132(sp),d0
   167ba:	|                 |  |  \----- bgt.s 1675e <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   167bc:	|                 |  |         addq.l #1,136(sp)
   167c0:	|                 |  \-------> movea.l 1a916 <currentFloor>,a0
   167c6:	|                 |            move.l 8(a0),d0
   167ca:	|                 |            cmp.l 136(sp),d0
   167ce:	|                 \----------- bgt.w 166a0 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   167d2:	|                              clr.l 136(sp)
   167d6:	|              /-------------- bra.w 168dc <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   167da:	|           /--|-------------> clr.l 132(sp)
   167de:	|           |  |     /-------- bra.w 168c6 <setFloor+0x570>
			if (i != j) {
   167e2:	|           |  |  /--|-------> move.l 136(sp),d0
   167e6:	|           |  |  |  |         cmp.l 132(sp),d0
   167ea:	|           |  |  |  |     /-- beq.w 1687c <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   167ee:	|           |  |  |  |     |   movea.l 1a916 <currentFloor>,a0
   167f4:	|           |  |  |  |     |   move.l 12(a0),d1
   167f8:	|           |  |  |  |     |   move.l 132(sp),d0
   167fc:	|           |  |  |  |     |   lsl.l #3,d0
   167fe:	|           |  |  |  |     |   movea.l d1,a1
   16800:	|           |  |  |  |     |   adda.l d0,a1
   16802:	|           |  |  |  |     |   movea.l 1a916 <currentFloor>,a0
   16808:	|           |  |  |  |     |   move.l 12(a0),d1
   1680c:	|           |  |  |  |     |   move.l 136(sp),d0
   16810:	|           |  |  |  |     |   lsl.l #3,d0
   16812:	|           |  |  |  |     |   movea.l d1,a0
   16814:	|           |  |  |  |     |   adda.l d0,a0
   16816:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   1681a:	|           |  |  |  |     |   move.l (a1),-(sp)
   1681c:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16820:	|           |  |  |  |     |   move.l (a0),-(sp)
   16822:	|           |  |  |  |     |   jsr 160ae <polysShareSide>
   16828:	|           |  |  |  |     |   lea 16(sp),sp
   1682c:	|           |  |  |  |     |   tst.w d0
   1682e:	|           |  |  |  |  /--|-- beq.w 168c2 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16832:	|           |  |  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   16838:	|           |  |  |  |  |  |   move.l 16(a0),d1
   1683c:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16840:	|           |  |  |  |  |  |   add.l d0,d0
   16842:	|           |  |  |  |  |  |   add.l d0,d0
   16844:	|           |  |  |  |  |  |   movea.l d1,a0
   16846:	|           |  |  |  |  |  |   adda.l d0,a0
   16848:	|           |  |  |  |  |  |   move.l (a0),d1
   1684a:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1684e:	|           |  |  |  |  |  |   add.l d0,d0
   16850:	|           |  |  |  |  |  |   add.l d0,d0
   16852:	|           |  |  |  |  |  |   movea.l d1,a0
   16854:	|           |  |  |  |  |  |   adda.l d0,a0
   16856:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   1685a:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1685e:	|           |  |  |  |  |  |   add.l d0,d0
   16860:	|           |  |  |  |  |  |   add.l d0,d0
   16862:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16866:	|           |  |  |  |  |  |   adda.l d0,a0
   16868:	|           |  |  |  |  |  |   move.l (a0),d1
   1686a:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1686e:	|           |  |  |  |  |  |   add.l d0,d0
   16870:	|           |  |  |  |  |  |   add.l d0,d0
   16872:	|           |  |  |  |  |  |   movea.l d1,a0
   16874:	|           |  |  |  |  |  |   adda.l d0,a0
   16876:	|           |  |  |  |  |  |   moveq #1,d1
   16878:	|           |  |  |  |  |  |   move.l d1,(a0)
   1687a:	|           |  |  |  |  +--|-- bra.s 168c2 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   1687c:	|           |  |  |  |  |  \-> movea.l 1a916 <currentFloor>,a0
   16882:	|           |  |  |  |  |      move.l 16(a0),d1
   16886:	|           |  |  |  |  |      move.l 136(sp),d0
   1688a:	|           |  |  |  |  |      add.l d0,d0
   1688c:	|           |  |  |  |  |      add.l d0,d0
   1688e:	|           |  |  |  |  |      movea.l d1,a0
   16890:	|           |  |  |  |  |      adda.l d0,a0
   16892:	|           |  |  |  |  |      move.l (a0),d1
   16894:	|           |  |  |  |  |      move.l 132(sp),d0
   16898:	|           |  |  |  |  |      add.l d0,d0
   1689a:	|           |  |  |  |  |      add.l d0,d0
   1689c:	|           |  |  |  |  |      movea.l d1,a0
   1689e:	|           |  |  |  |  |      adda.l d0,a0
   168a0:	|           |  |  |  |  |      moveq #-2,d0
   168a2:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   168a4:	|           |  |  |  |  |      move.l 136(sp),d0
   168a8:	|           |  |  |  |  |      add.l d0,d0
   168aa:	|           |  |  |  |  |      add.l d0,d0
   168ac:	|           |  |  |  |  |      movea.l 62(sp),a0
   168b0:	|           |  |  |  |  |      adda.l d0,a0
   168b2:	|           |  |  |  |  |      move.l (a0),d1
   168b4:	|           |  |  |  |  |      move.l 132(sp),d0
   168b8:	|           |  |  |  |  |      add.l d0,d0
   168ba:	|           |  |  |  |  |      add.l d0,d0
   168bc:	|           |  |  |  |  |      movea.l d1,a0
   168be:	|           |  |  |  |  |      adda.l d0,a0
   168c0:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   168c2:	|           |  |  |  |  \----> addq.l #1,132(sp)
   168c6:	|           |  |  |  \-------> movea.l 1a916 <currentFloor>,a0
   168cc:	|           |  |  |            move.l 8(a0),d0
   168d0:	|           |  |  |            cmp.l 132(sp),d0
   168d4:	|           |  |  \----------- bgt.w 167e2 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   168d8:	|           |  |               addq.l #1,136(sp)
   168dc:	|           |  \-------------> movea.l 1a916 <currentFloor>,a0
   168e2:	|           |                  move.l 8(a0),d0
   168e6:	|           |                  cmp.l 136(sp),d0
   168ea:	|           \----------------- bgt.w 167da <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   168ee:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   168f2:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   168f6:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   168fa:	|  |                           clr.l 136(sp)
   168fe:	|  |     /-------------------- bra.w 16a54 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16902:	|  |  /--|-------------------> clr.l 132(sp)
   16906:	|  |  |  |     /-------------- bra.w 16a3e <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   1690a:	|  |  |  |  /--|-------------> movea.l 1a916 <currentFloor>,a0
   16910:	|  |  |  |  |  |               move.l 16(a0),d1
   16914:	|  |  |  |  |  |               move.l 136(sp),d0
   16918:	|  |  |  |  |  |               add.l d0,d0
   1691a:	|  |  |  |  |  |               add.l d0,d0
   1691c:	|  |  |  |  |  |               movea.l d1,a0
   1691e:	|  |  |  |  |  |               adda.l d0,a0
   16920:	|  |  |  |  |  |               move.l (a0),d1
   16922:	|  |  |  |  |  |               move.l 132(sp),d0
   16926:	|  |  |  |  |  |               add.l d0,d0
   16928:	|  |  |  |  |  |               add.l d0,d0
   1692a:	|  |  |  |  |  |               movea.l d1,a0
   1692c:	|  |  |  |  |  |               adda.l d0,a0
   1692e:	|  |  |  |  |  |               move.l (a0),d0
   16930:	|  |  |  |  |  |               moveq #-1,d1
   16932:	|  |  |  |  |  |               cmp.l d0,d1
   16934:	|  |  |  |  |  |  /----------- bne.w 16a3a <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16938:	|  |  |  |  |  |  |            clr.l 122(sp)
   1693c:	|  |  |  |  |  |  |     /----- bra.w 16a28 <setFloor+0x6d2>
						if (d != i && d != j) {
   16940:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   16944:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16948:	|  |  |  |  |  |  |  |  |  /-- beq.w 16a24 <setFloor+0x6ce>
   1694c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16950:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16954:	|  |  |  |  |  |  |  |  |  +-- beq.w 16a24 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16958:	|  |  |  |  |  |  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   1695e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16962:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16966:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16968:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1696a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1696c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1696e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16970:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16974:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16976:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16978:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1697a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1697c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   1697e:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16982:	|  |  |  |  |  |  |  |  |  +-- bne.w 16a24 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16986:	|  |  |  |  |  |  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   1698c:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16990:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16994:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16996:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16998:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1699a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1699c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1699e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   169a2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   169a4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   169a6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   169a8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   169aa:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   169ac:	|  |  |  |  |  |  |  |  |  +-- bmi.s 16a24 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   169ae:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   169b2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   169b4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   169b6:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   169ba:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   169bc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   169be:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   169c2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   169c4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   169c6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   169c8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   169ca:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   169cc:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   169d0:	|  |  |  |  |  |  |  |  |  +-- bgt.s 16a24 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   169d2:	|  |  |  |  |  |  |  |  |  |   movea.l 1a916 <currentFloor>,a0
   169d8:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   169dc:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   169e0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   169e2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   169e4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   169e6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   169e8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   169ea:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   169ee:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   169f0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   169f2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   169f4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   169f6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   169fa:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   169fe:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a00:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a02:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16a06:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16a08:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16a0a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16a0e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a10:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a12:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16a14:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16a16:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16a1a:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16a1c:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16a1e:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16a24:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   16a28:	|  |  |  |  |  |  |  |  \----> movea.l 1a916 <currentFloor>,a0
   16a2e:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   16a32:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   16a36:	|  |  |  |  |  |  |  \-------- bgt.w 16940 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16a3a:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   16a3e:	|  |  |  |  |  \-------------> movea.l 1a916 <currentFloor>,a0
   16a44:	|  |  |  |  |                  move.l 8(a0),d0
   16a48:	|  |  |  |  |                  cmp.l 132(sp),d0
   16a4c:	|  |  |  |  \----------------- bgt.w 1690a <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a50:	|  |  |  |                     addq.l #1,136(sp)
   16a54:	|  |  |  \-------------------> movea.l 1a916 <currentFloor>,a0
   16a5a:	|  |  |                        move.l 8(a0),d0
   16a5e:	|  |  |                        cmp.l 136(sp),d0
   16a62:	|  |  \----------------------- bgt.w 16902 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   16a66:	|  |                           tst.w 130(sp)
   16a6a:	|  \-------------------------- bne.w 168f2 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a6e:	|                              clr.l 136(sp)
   16a72:	|                          /-- bra.s 16a9a <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   16a74:	|                       /--|-> move.l 136(sp),d0
   16a78:	|                       |  |   add.l d0,d0
   16a7a:	|                       |  |   add.l d0,d0
   16a7c:	|                       |  |   movea.l 62(sp),a0
   16a80:	|                       |  |   adda.l d0,a0
   16a82:	|                       |  |   move.l (a0),54(sp)
   16a86:	|                       |  |   move.l 1a7a2 <SysBase>,d0
   16a8c:	|                       |  |   movea.l d0,a6
   16a8e:	|                       |  |   movea.l 54(sp),a1
   16a92:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a96:	|                       |  |   addq.l #1,136(sp)
   16a9a:	|                       |  \-> movea.l 1a916 <currentFloor>,a0
   16aa0:	|                       |      move.l 8(a0),d0
   16aa4:	|                       |      cmp.l 136(sp),d0
   16aa8:	|                       \----- bgt.s 16a74 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   16aaa:	|                              move.l 62(sp),58(sp)
   16ab0:	|                              move.l 1a7a2 <SysBase>,d0
   16ab6:	|                              movea.l d0,a6
   16ab8:	|                              movea.l 58(sp),a1
   16abc:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   16ac0:	|                              clr.l 62(sp)

	return TRUE;
   16ac4:	|                              moveq #1,d0
}
   16ac6:	\----------------------------> movea.l (sp)+,a2
   16ac8:	                               movea.l (sp)+,a6
   16aca:	                               lea 132(sp),sp
   16ace:	                               rts

00016ad0 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   16ad0:	jsr 15fbe <killFloor>
	noFloor ();
   16ad6:	jsr 15ee2 <noFloor>
   16adc:	nop
   16ade:	rts

00016ae0 <WaitVbl>:
void WaitVbl() {
   16ae0:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16ae2:	   /-> movea.l #14675972,a0
   16ae8:	   |   move.l (a0),d0
   16aea:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   16aec:	   |   move.l (sp),d0
   16aee:	   |   andi.l #130816,d0
   16af4:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   16af6:	   |   move.l (sp),d0
   16af8:	   |   cmpi.l #76800,d0
   16afe:	   \-- beq.s 16ae2 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16b00:	/----> movea.l #14675972,a0
   16b06:	|      move.l (a0),d0
   16b08:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   16b0c:	|      move.l 4(sp),d0
   16b10:	|      andi.l #130816,d0
   16b16:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   16b1a:	|      move.l 4(sp),d0
   16b1e:	|      cmpi.l #76800,d0
   16b24:	|  /-- beq.s 16b28 <WaitVbl+0x48>
	while (1) {
   16b26:	\--|-- bra.s 16b00 <WaitVbl+0x20>
			break;
   16b28:	   \-> nop
}
   16b2a:	       nop
   16b2c:	       addq.l #8,sp
   16b2e:	       rts

00016b30 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   16b30:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   16b32:	       move.l 8(sp),(sp)
	while(len-- > 0)
   16b36:	   /-- bra.s 16b48 <memset+0x18>
		*ptr++ = val;
   16b38:	/--|-> move.l (sp),d0
   16b3a:	|  |   move.l d0,d1
   16b3c:	|  |   addq.l #1,d1
   16b3e:	|  |   move.l d1,(sp)
   16b40:	|  |   move.l 12(sp),d1
   16b44:	|  |   movea.l d0,a0
   16b46:	|  |   move.b d1,(a0)
	while(len-- > 0)
   16b48:	|  \-> move.l 16(sp),d0
   16b4c:	|      move.l d0,d1
   16b4e:	|      subq.l #1,d1
   16b50:	|      move.l d1,16(sp)
   16b54:	|      tst.l d0
   16b56:	\----- bne.s 16b38 <memset+0x8>
	return dest;
   16b58:	       move.l 8(sp),d0
}
   16b5c:	       addq.l #4,sp
   16b5e:	       rts

00016b60 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   16b60:	       subq.l #8,sp
   16b62:	       move.l d2,-(sp)
	char *d = (char *)dest;
   16b64:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   16b6a:	       move.l 20(sp),4(sp)
	while(len--)
   16b70:	   /-- bra.s 16b92 <memcpy+0x32>
		*d++ = *s++;
   16b72:	/--|-> move.l 4(sp),d1
   16b76:	|  |   move.l d1,d0
   16b78:	|  |   addq.l #1,d0
   16b7a:	|  |   move.l d0,4(sp)
   16b7e:	|  |   move.l 8(sp),d0
   16b82:	|  |   move.l d0,d2
   16b84:	|  |   addq.l #1,d2
   16b86:	|  |   move.l d2,8(sp)
   16b8a:	|  |   movea.l d1,a0
   16b8c:	|  |   move.b (a0),d1
   16b8e:	|  |   movea.l d0,a0
   16b90:	|  |   move.b d1,(a0)
	while(len--)
   16b92:	|  \-> move.l 24(sp),d0
   16b96:	|      move.l d0,d1
   16b98:	|      subq.l #1,d1
   16b9a:	|      move.l d1,24(sp)
   16b9e:	|      tst.l d0
   16ba0:	\----- bne.s 16b72 <memcpy+0x12>
	return dest;
   16ba2:	       move.l 16(sp),d0
}
   16ba6:	       move.l (sp)+,d2
   16ba8:	       addq.l #8,sp
   16baa:	       rts

00016bac <KPrintF>:
void KPrintF(const char* fmt, ...) {
   16bac:	       lea -128(sp),sp
   16bb0:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   16bb4:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec57a6>,d0
   16bba:	       cmpi.w #20153,d0
   16bbe:	   /-- beq.s 16be2 <KPrintF+0x36>
   16bc0:	   |   cmpi.w #-24562,d0
   16bc4:	   +-- beq.s 16be2 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   16bc6:	   |   movea.l 1a7a2 <SysBase>,a6
   16bcc:	   |   movea.l 144(sp),a0
   16bd0:	   |   lea 148(sp),a1
   16bd4:	   |   lea 17672 <KPutCharX>,a2
   16bda:	   |   suba.l a3,a3
   16bdc:	   |   jsr -522(a6)
}
   16be0:	/--|-- bra.s 16c0c <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   16be2:	|  \-> movea.l 1a7a2 <SysBase>,a6
   16be8:	|      movea.l 144(sp),a0
   16bec:	|      lea 148(sp),a1
   16bf0:	|      lea 17680 <PutChar>,a2
   16bf6:	|      lea 12(sp),a3
   16bfa:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   16bfe:	|      move.l a3,-(sp)
   16c00:	|      pea 56 <_start+0x56>
   16c04:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec57a6>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   16c0a:	|      addq.l #8,sp
}
   16c0c:	\----> movem.l (sp)+,a2-a3/a6
   16c10:	       lea 128(sp),sp
   16c14:	       rts

00016c16 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   16c16:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   16c18:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   16c1e:	       movea.l (sp),a0
   16c20:	       move.w (a0),d0
   16c22:	       cmpi.w #20153,d0
   16c26:	   /-- beq.s 16c32 <debug_cmd+0x1c>
   16c28:	   |   movea.l (sp),a0
   16c2a:	   |   move.w (a0),d0
   16c2c:	   |   cmpi.w #-24562,d0
   16c30:	/--|-- bne.s 16c50 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   16c32:	|  \-> move.l 20(sp),-(sp)
   16c36:	|      move.l 20(sp),-(sp)
   16c3a:	|      move.l 20(sp),-(sp)
   16c3e:	|      move.l 20(sp),-(sp)
   16c42:	|      pea 58 <_start+0x58>
   16c46:	|      movea.l 20(sp),a0
   16c4a:	|      jsr (a0)
   16c4c:	|      lea 20(sp),sp
	}
}
   16c50:	\----> nop
   16c52:	       addq.l #4,sp
   16c54:	       rts

00016c56 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   16c56:	       move.l d2,-(sp)
	while(*source && --num > 0)
   16c58:	   /-- bra.s 16c7a <my_strncpy+0x24>
		*destination++ = *source++;
   16c5a:	/--|-> move.l 12(sp),d1
   16c5e:	|  |   move.l d1,d0
   16c60:	|  |   addq.l #1,d0
   16c62:	|  |   move.l d0,12(sp)
   16c66:	|  |   move.l 8(sp),d0
   16c6a:	|  |   move.l d0,d2
   16c6c:	|  |   addq.l #1,d2
   16c6e:	|  |   move.l d2,8(sp)
   16c72:	|  |   movea.l d1,a0
   16c74:	|  |   move.b (a0),d1
   16c76:	|  |   movea.l d0,a0
   16c78:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   16c7a:	|  \-> movea.l 12(sp),a0
   16c7e:	|      move.b (a0),d0
   16c80:	|  /-- beq.s 16c88 <my_strncpy+0x32>
   16c82:	|  |   subq.l #1,16(sp)
   16c86:	\--|-- bne.s 16c5a <my_strncpy+0x4>
	*destination = '\0';
   16c88:	   \-> movea.l 8(sp),a0
   16c8c:	       clr.b (a0)
}
   16c8e:	       nop
   16c90:	       move.l (sp)+,d2
   16c92:	       rts

00016c94 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   16c94:	    lea -60(sp),sp
   16c98:	    movea.l 72(sp),a1
   16c9c:	    movea.l 76(sp),a0
   16ca0:	    move.l 80(sp),d1
   16ca4:	    move.l 84(sp),d0
   16ca8:	    movea.w a1,a1
   16caa:	    move.w a1,8(sp)
   16cae:	    movea.w a0,a0
   16cb0:	    move.w a0,6(sp)
   16cb4:	    move.w d1,d1
   16cb6:	    move.w d1,4(sp)
   16cba:	    move.w d0,d0
   16cbc:	    move.w d0,2(sp)
	struct debug_resource resource = {
   16cc0:	    lea 10(sp),a0
   16cc4:	    clr.l (a0)
   16cc6:	    addq.l #4,a0
   16cc8:	    clr.l (a0)
   16cca:	    addq.l #4,a0
   16ccc:	    clr.l (a0)
   16cce:	    addq.l #4,a0
   16cd0:	    clr.l (a0)
   16cd2:	    addq.l #4,a0
   16cd4:	    clr.l (a0)
   16cd6:	    addq.l #4,a0
   16cd8:	    clr.l (a0)
   16cda:	    addq.l #4,a0
   16cdc:	    clr.l (a0)
   16cde:	    addq.l #4,a0
   16ce0:	    clr.l (a0)
   16ce2:	    addq.l #4,a0
   16ce4:	    clr.l (a0)
   16ce6:	    addq.l #4,a0
   16ce8:	    clr.l (a0)
   16cea:	    addq.l #4,a0
   16cec:	    clr.l (a0)
   16cee:	    addq.l #4,a0
   16cf0:	    clr.l (a0)
   16cf2:	    addq.l #4,a0
   16cf4:	    clr.w (a0)
   16cf6:	    addq.l #2,a0
		.address = (unsigned int)addr,
   16cf8:	    move.l 64(sp),d0
	struct debug_resource resource = {
   16cfc:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   16d00:	    move.w 8(sp),d0
   16d04:	/-- bpl.s 16d08 <debug_register_bitmap+0x74>
   16d06:	|   addq.w #7,d0
   16d08:	\-> asr.w #3,d0
   16d0a:	    movea.w d0,a0
   16d0c:	    movea.w 6(sp),a1
   16d10:	    move.l a1,-(sp)
   16d12:	    move.l a0,-(sp)
   16d14:	    jsr 1756a <__mulsi3>
   16d1a:	    addq.l #8,sp
   16d1c:	    movea.w 4(sp),a0
   16d20:	    move.l a0,-(sp)
   16d22:	    move.l d0,-(sp)
   16d24:	    jsr 1756a <__mulsi3>
   16d2a:	    addq.l #8,sp
	struct debug_resource resource = {
   16d2c:	    move.l d0,14(sp)
   16d30:	    move.w 2(sp),52(sp)
   16d36:	    move.w 8(sp),54(sp)
   16d3c:	    move.w 6(sp),56(sp)
   16d42:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   16d48:	    moveq #0,d0
   16d4a:	    move.w 2(sp),d0
   16d4e:	    moveq #2,d1
   16d50:	    and.l d1,d0
   16d52:	/-- beq.s 16d5e <debug_register_bitmap+0xca>
		resource.size *= 2;
   16d54:	|   move.l 14(sp),d0
   16d58:	|   add.l d0,d0
   16d5a:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   16d5e:	\-> pea 20 <_start+0x20>
   16d62:	    move.l 72(sp),-(sp)
   16d66:	    lea 18(sp),a0
   16d6a:	    move.l a0,d0
   16d6c:	    addq.l #8,d0
   16d6e:	    move.l d0,-(sp)
   16d70:	    jsr 16c56 <my_strncpy>
   16d76:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   16d7a:	    lea 10(sp),a0
   16d7e:	    clr.l -(sp)
   16d80:	    clr.l -(sp)
   16d82:	    move.l a0,-(sp)
   16d84:	    pea 4 <_start+0x4>
   16d88:	    jsr 16c16 <debug_cmd>
   16d8e:	    lea 16(sp),sp
}
   16d92:	    nop
   16d94:	    lea 60(sp),sp
   16d98:	    rts

00016d9a <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   16d9a:	lea -12(sp),sp
   16d9e:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   16da0:	move.l 20(sp),12(sp)
   16da6:	move.l 24(sp),8(sp)
   16dac:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   16db2:	movea.l d0,a6
   16db4:	move.l 12(sp),d0
   16db8:	move.l 8(sp),d1
   16dbc:	jsr -66(a6)
   16dc0:	move.l d0,4(sp)
   16dc4:	move.l 4(sp),d0
}
   16dc8:	movea.l (sp)+,a6
   16dca:	lea 12(sp),sp
   16dce:	rts

00016dd0 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   16dd0:	lea -32(sp),sp
   16dd4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   16dd8:	move.l 48(sp),36(sp)
   16dde:	move.l 52(sp),40(sp)
   16de4:	move.l 56(sp),28(sp)
   16dea:	move.l 60(sp),32(sp)
   16df0:	move.l 1a7ba <MathIeeeDoubBasBase>,d0
   16df6:	movea.l d0,a6
   16df8:	move.l 36(sp),d0
   16dfc:	move.l 40(sp),d1
   16e00:	move.l 28(sp),d2
   16e04:	move.l 32(sp),d3
   16e08:	jsr -66(a6)
   16e0c:	move.l d0,12(sp)
   16e10:	move.l d1,16(sp)
   16e14:	move.l 12(sp),20(sp)
   16e1a:	move.l 16(sp),24(sp)
   16e20:	move.l 20(sp),d0
   16e24:	move.l 24(sp),d1
}
   16e28:	movem.l (sp)+,d2-d3/a6
   16e2c:	lea 32(sp),sp
   16e30:	rts

00016e32 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   16e32:	lea -32(sp),sp
   16e36:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   16e3a:	move.l 48(sp),36(sp)
   16e40:	move.l 52(sp),40(sp)
   16e46:	move.l 56(sp),28(sp)
   16e4c:	move.l 60(sp),32(sp)
   16e52:	move.l 1a7ba <MathIeeeDoubBasBase>,d0
   16e58:	movea.l d0,a6
   16e5a:	move.l 36(sp),d0
   16e5e:	move.l 40(sp),d1
   16e62:	move.l 28(sp),d2
   16e66:	move.l 32(sp),d3
   16e6a:	jsr -84(a6)
   16e6e:	move.l d0,12(sp)
   16e72:	move.l d1,16(sp)
   16e76:	move.l 12(sp),20(sp)
   16e7c:	move.l 16(sp),24(sp)
   16e82:	move.l 20(sp),d0
   16e86:	move.l 24(sp),d1
}
   16e8a:	movem.l (sp)+,d2-d3/a6
   16e8e:	lea 32(sp),sp
   16e92:	rts

00016e94 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   16e94:	lea -12(sp),sp
   16e98:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   16e9a:	move.l 20(sp),12(sp)
   16ea0:	move.l 24(sp),8(sp)
   16ea6:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   16eac:	movea.l d0,a6
   16eae:	move.l 12(sp),d0
   16eb2:	move.l 8(sp),d1
   16eb6:	jsr -84(a6)
   16eba:	move.l d0,4(sp)
   16ebe:	move.l 4(sp),d0
}
   16ec2:	movea.l (sp)+,a6
   16ec4:	lea 12(sp),sp
   16ec8:	rts

00016eca <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   16eca:	lea -12(sp),sp
   16ece:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16ed0:	move.l 20(sp),12(sp)
   16ed6:	move.l 24(sp),8(sp)
   16edc:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   16ee2:	movea.l d0,a6
   16ee4:	move.l 12(sp),d0
   16ee8:	move.l 8(sp),d1
   16eec:	jsr -42(a6)
   16ef0:	move.l d0,4(sp)
   16ef4:	move.l 4(sp),d0
}
   16ef8:	movea.l (sp)+,a6
   16efa:	lea 12(sp),sp
   16efe:	rts

00016f00 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   16f00:	lea -20(sp),sp
   16f04:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   16f06:	move.l 28(sp),20(sp)
   16f0c:	move.l 1a7be <MathIeeeDoubTransBase>,d0
   16f12:	movea.l d0,a6
   16f14:	move.l 20(sp),d0
   16f18:	jsr -108(a6)
   16f1c:	move.l d0,4(sp)
   16f20:	move.l d1,8(sp)
   16f24:	move.l 4(sp),12(sp)
   16f2a:	move.l 8(sp),16(sp)
   16f30:	move.l 12(sp),d0
   16f34:	move.l 16(sp),d1
}
   16f38:	movea.l (sp)+,a6
   16f3a:	lea 20(sp),sp
   16f3e:	rts

00016f40 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   16f40:	lea -12(sp),sp
   16f44:	move.l a6,-(sp)
	return IEEEDPFix(value);
   16f46:	move.l 20(sp),8(sp)
   16f4c:	move.l 24(sp),12(sp)
   16f52:	move.l 1a7ba <MathIeeeDoubBasBase>,d0
   16f58:	movea.l d0,a6
   16f5a:	move.l 8(sp),d0
   16f5e:	move.l 12(sp),d1
   16f62:	jsr -30(a6)
   16f66:	move.l d0,4(sp)
   16f6a:	move.l 4(sp),d0
   16f6e:	move.l d0,-(sp)
   16f70:	jsr 16fa8 <__floatsidf>
   16f76:	addq.l #4,sp
}
   16f78:	movea.l (sp)+,a6
   16f7a:	lea 12(sp),sp
   16f7e:	rts

00016f80 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   16f80:	subq.l #8,sp
   16f82:	move.l a6,-(sp)
	return IEEESPFix(value);
   16f84:	move.l 16(sp),8(sp)
   16f8a:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   16f90:	movea.l d0,a6
   16f92:	move.l 8(sp),d0
   16f96:	jsr -30(a6)
   16f9a:	move.l d0,4(sp)
   16f9e:	move.l 4(sp),d0
}
   16fa2:	movea.l (sp)+,a6
   16fa4:	addq.l #8,sp
   16fa6:	rts

00016fa8 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   16fa8:	lea -20(sp),sp
   16fac:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   16fae:	move.l 28(sp),20(sp)
   16fb4:	move.l 1a7ba <MathIeeeDoubBasBase>,d0
   16fba:	movea.l d0,a6
   16fbc:	move.l 20(sp),d0
   16fc0:	jsr -36(a6)
   16fc4:	move.l d0,4(sp)
   16fc8:	move.l d1,8(sp)
   16fcc:	move.l 4(sp),12(sp)
   16fd2:	move.l 8(sp),16(sp)
   16fd8:	move.l 12(sp),d0
   16fdc:	move.l 16(sp),d1
}
   16fe0:	movea.l (sp)+,a6
   16fe2:	lea 20(sp),sp
   16fe6:	rts

00016fe8 <__floatsisf>:

FLOAT __floatsisf(int i) {
   16fe8:	subq.l #8,sp
   16fea:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   16fec:	move.l 16(sp),8(sp)
   16ff2:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   16ff8:	movea.l d0,a6
   16ffa:	move.l 8(sp),d0
   16ffe:	jsr -36(a6)
   17002:	move.l d0,4(sp)
   17006:	move.l 4(sp),d0
}
   1700a:	movea.l (sp)+,a6
   1700c:	addq.l #8,sp
   1700e:	rts

00017010 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17010:	subq.l #8,sp
   17012:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17014:	move.l 16(sp),8(sp)
   1701a:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   17020:	movea.l d0,a6
   17022:	move.l 8(sp),d0
   17026:	jsr -36(a6)
   1702a:	move.l d0,4(sp)
   1702e:	move.l 4(sp),d0
}
   17032:	movea.l (sp)+,a6
   17034:	addq.l #8,sp
   17036:	rts

00017038 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   17038:	lea -32(sp),sp
   1703c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17040:	move.l 48(sp),36(sp)
   17046:	move.l 52(sp),40(sp)
   1704c:	move.l 56(sp),28(sp)
   17052:	move.l 60(sp),32(sp)
   17058:	move.l 1a7ba <MathIeeeDoubBasBase>,d0
   1705e:	movea.l d0,a6
   17060:	move.l 36(sp),d0
   17064:	move.l 40(sp),d1
   17068:	move.l 28(sp),d2
   1706c:	move.l 32(sp),d3
   17070:	jsr -78(a6)
   17074:	move.l d0,12(sp)
   17078:	move.l d1,16(sp)
   1707c:	move.l 12(sp),20(sp)
   17082:	move.l 16(sp),24(sp)
   17088:	move.l 20(sp),d0
   1708c:	move.l 24(sp),d1
}
   17090:	movem.l (sp)+,d2-d3/a6
   17094:	lea 32(sp),sp
   17098:	rts

0001709a <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1709a:	lea -12(sp),sp
   1709e:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   170a0:	move.l 20(sp),12(sp)
   170a6:	move.l 24(sp),8(sp)
   170ac:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   170b2:	movea.l d0,a6
   170b4:	move.l 12(sp),d0
   170b8:	move.l 8(sp),d1
   170bc:	jsr -78(a6)
   170c0:	move.l d0,4(sp)
   170c4:	move.l 4(sp),d0
}
   170c8:	movea.l (sp)+,a6
   170ca:	lea 12(sp),sp
   170ce:	rts

000170d0 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   170d0:	lea -12(sp),sp
   170d4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   170d6:	move.l 20(sp),12(sp)
   170dc:	move.l 24(sp),8(sp)
   170e2:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   170e8:	movea.l d0,a6
   170ea:	move.l 12(sp),d0
   170ee:	move.l 8(sp),d1
   170f2:	jsr -42(a6)
   170f6:	move.l d0,4(sp)
   170fa:	move.l 4(sp),d0
}
   170fe:	movea.l (sp)+,a6
   17100:	lea 12(sp),sp
   17104:	rts

00017106 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17106:	lea -20(sp),sp
   1710a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1710e:	move.l 36(sp),24(sp)
   17114:	move.l 40(sp),28(sp)
   1711a:	move.l 44(sp),16(sp)
   17120:	move.l 48(sp),20(sp)
   17126:	move.l 1a7ba <MathIeeeDoubBasBase>,d0
   1712c:	movea.l d0,a6
   1712e:	move.l 24(sp),d0
   17132:	move.l 28(sp),d1
   17136:	move.l 16(sp),d2
   1713a:	move.l 20(sp),d3
   1713e:	jsr -42(a6)
   17142:	move.l d0,12(sp)
   17146:	move.l 12(sp),d0
}
   1714a:	movem.l (sp)+,d2-d3/a6
   1714e:	lea 20(sp),sp
   17152:	rts

00017154 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17154:	lea -12(sp),sp
   17158:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1715a:	move.l 20(sp),12(sp)
   17160:	move.l 24(sp),8(sp)
   17166:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   1716c:	movea.l d0,a6
   1716e:	move.l 12(sp),d0
   17172:	move.l 8(sp),d1
   17176:	jsr -42(a6)
   1717a:	move.l d0,4(sp)
   1717e:	move.l 4(sp),d0
}
   17182:	movea.l (sp)+,a6
   17184:	lea 12(sp),sp
   17188:	rts

0001718a <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1718a:	lea -12(sp),sp
   1718e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17190:	move.l 20(sp),12(sp)
   17196:	move.l 24(sp),8(sp)
   1719c:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   171a2:	movea.l d0,a6
   171a4:	move.l 12(sp),d0
   171a8:	move.l 8(sp),d1
   171ac:	jsr -42(a6)
   171b0:	move.l d0,4(sp)
   171b4:	move.l 4(sp),d0
}
   171b8:	movea.l (sp)+,a6
   171ba:	lea 12(sp),sp
   171be:	rts

000171c0 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   171c0:	lea -20(sp),sp
   171c4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   171c8:	move.l 36(sp),24(sp)
   171ce:	move.l 40(sp),28(sp)
   171d4:	move.l 44(sp),16(sp)
   171da:	move.l 48(sp),20(sp)
   171e0:	move.l 1a7ba <MathIeeeDoubBasBase>,d0
   171e6:	movea.l d0,a6
   171e8:	move.l 24(sp),d0
   171ec:	move.l 28(sp),d1
   171f0:	move.l 16(sp),d2
   171f4:	move.l 20(sp),d3
   171f8:	jsr -42(a6)
   171fc:	move.l d0,12(sp)
   17200:	move.l 12(sp),d0
}
   17204:	movem.l (sp)+,d2-d3/a6
   17208:	lea 20(sp),sp
   1720c:	rts

0001720e <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   1720e:	lea -12(sp),sp
   17212:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17214:	move.l 20(sp),12(sp)
   1721a:	move.l 24(sp),8(sp)
   17220:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   17226:	movea.l d0,a6
   17228:	move.l 12(sp),d0
   1722c:	move.l 8(sp),d1
   17230:	jsr -42(a6)
   17234:	move.l d0,4(sp)
   17238:	move.l 4(sp),d0
}
   1723c:	movea.l (sp)+,a6
   1723e:	lea 12(sp),sp
   17242:	rts

00017244 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17244:	lea -12(sp),sp
   17248:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1724a:	move.l 20(sp),12(sp)
   17250:	move.l 24(sp),8(sp)
   17256:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   1725c:	movea.l d0,a6
   1725e:	move.l 12(sp),d0
   17262:	move.l 8(sp),d1
   17266:	jsr -42(a6)
   1726a:	move.l d0,4(sp)
   1726e:	move.l 4(sp),d0
}
   17272:	movea.l (sp)+,a6
   17274:	lea 12(sp),sp
   17278:	rts

0001727a <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   1727a:	lea -32(sp),sp
   1727e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17282:	move.l 48(sp),36(sp)
   17288:	move.l 52(sp),40(sp)
   1728e:	move.l 56(sp),28(sp)
   17294:	move.l 60(sp),32(sp)
   1729a:	move.l 1a7ba <MathIeeeDoubBasBase>,d0
   172a0:	movea.l d0,a6
   172a2:	move.l 36(sp),d0
   172a6:	move.l 40(sp),d1
   172aa:	move.l 28(sp),d2
   172ae:	move.l 32(sp),d3
   172b2:	jsr -72(a6)
   172b6:	move.l d0,12(sp)
   172ba:	move.l d1,16(sp)
   172be:	move.l 12(sp),20(sp)
   172c4:	move.l 16(sp),24(sp)
   172ca:	move.l 20(sp),d0
   172ce:	move.l 24(sp),d1
}
   172d2:	movem.l (sp)+,d2-d3/a6
   172d6:	lea 32(sp),sp
   172da:	rts

000172dc <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   172dc:	lea -12(sp),sp
   172e0:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   172e2:	move.l 20(sp),12(sp)
   172e8:	move.l 24(sp),8(sp)
   172ee:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   172f4:	movea.l d0,a6
   172f6:	move.l 12(sp),d0
   172fa:	move.l 8(sp),d1
   172fe:	jsr -72(a6)
   17302:	move.l d0,4(sp)
   17306:	move.l 4(sp),d0
}
   1730a:	movea.l (sp)+,a6
   1730c:	lea 12(sp),sp
   17310:	rts

00017312 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17312:	lea -12(sp),sp
   17316:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17318:	move.l 20(sp),8(sp)
   1731e:	move.l 24(sp),12(sp)
   17324:	move.l 1a7be <MathIeeeDoubTransBase>,d0
   1732a:	movea.l d0,a6
   1732c:	move.l 8(sp),d0
   17330:	move.l 12(sp),d1
   17334:	jsr -102(a6)
   17338:	move.l d0,4(sp)
   1733c:	move.l 4(sp),d0
}
   17340:	movea.l (sp)+,a6
   17342:	lea 12(sp),sp
   17346:	rts

00017348 <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   17348:	subq.l #8,sp
   1734a:	move.l a6,-(sp)
	return IEEESPFix(a);
   1734c:	move.l 16(sp),8(sp)
   17352:	move.l 1a7b2 <MathIeeeSingBasBase>,d0
   17358:	movea.l d0,a6
   1735a:	move.l 8(sp),d0
   1735e:	jsr -30(a6)
   17362:	move.l d0,4(sp)
   17366:	move.l 4(sp),d0
}
   1736a:	movea.l (sp)+,a6
   1736c:	addq.l #8,sp
   1736e:	rts

00017370 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   17370:	       lea -24(sp),sp
   17374:	       move.l a6,-(sp)
    if (x > 0) {
   17376:	       clr.l -(sp)
   17378:	       move.l 40(sp),-(sp)
   1737c:	       jsr 17154 <__gtsf2>
   17382:	       addq.l #8,sp
   17384:	       tst.l d0
   17386:	   /-- ble.s 173b8 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17388:	   |   move.l 36(sp),-(sp)
   1738c:	   |   move.l 36(sp),-(sp)
   17390:	   |   jsr 16e94 <__divsf3>
   17396:	   |   addq.l #8,sp
   17398:	   |   move.l d0,8(sp)
   1739c:	   |   move.l 1a7b6 <MathIeeeSingTransBase>,d0
   173a2:	   |   movea.l d0,a6
   173a4:	   |   move.l 8(sp),d0
   173a8:	   |   jsr -30(a6)
   173ac:	   |   move.l d0,4(sp)
   173b0:	   |   move.l 4(sp),d0
   173b4:	/--|-- bra.w 17518 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   173b8:	|  \-> clr.l -(sp)
   173ba:	|      move.l 40(sp),-(sp)
   173be:	|      jsr 1720e <__ltsf2>
   173c4:	|      addq.l #8,sp
   173c6:	|      tst.l d0
   173c8:	|  /-- bge.s 1743c <atan2f+0xcc>
   173ca:	|  |   clr.l -(sp)
   173cc:	|  |   move.l 36(sp),-(sp)
   173d0:	|  |   jsr 170d0 <__gesf2>
   173d6:	|  |   addq.l #8,sp
   173d8:	|  |   tst.l d0
   173da:	|  +-- blt.s 1743c <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   173dc:	|  |   move.l 36(sp),-(sp)
   173e0:	|  |   move.l 36(sp),-(sp)
   173e4:	|  |   jsr 16e94 <__divsf3>
   173ea:	|  |   addq.l #8,sp
   173ec:	|  |   move.l d0,24(sp)
   173f0:	|  |   move.l 1a7b6 <MathIeeeSingTransBase>,d0
   173f6:	|  |   movea.l d0,a6
   173f8:	|  |   move.l 24(sp),d0
   173fc:	|  |   jsr -30(a6)
   17400:	|  |   move.l d0,20(sp)
   17404:	|  |   move.l 20(sp),d0
   17408:	|  |   move.l d0,-(sp)
   1740a:	|  |   jsr 16f00 <__extendsfdf2>
   17410:	|  |   addq.l #4,sp
   17412:	|  |   move.l #1413754136,-(sp)
   17418:	|  |   move.l #1074340347,-(sp)
   1741e:	|  |   move.l d1,-(sp)
   17420:	|  |   move.l d0,-(sp)
   17422:	|  |   jsr 16dd0 <__adddf3>
   17428:	|  |   lea 16(sp),sp
   1742c:	|  |   move.l d1,-(sp)
   1742e:	|  |   move.l d0,-(sp)
   17430:	|  |   jsr 17312 <__truncdfsf2>
   17436:	|  |   addq.l #8,sp
   17438:	+--|-- bra.w 17518 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   1743c:	|  \-> clr.l -(sp)
   1743e:	|      move.l 40(sp),-(sp)
   17442:	|      jsr 1720e <__ltsf2>
   17448:	|      addq.l #8,sp
   1744a:	|      tst.l d0
   1744c:	|  /-- bge.s 174be <atan2f+0x14e>
   1744e:	|  |   clr.l -(sp)
   17450:	|  |   move.l 36(sp),-(sp)
   17454:	|  |   jsr 1720e <__ltsf2>
   1745a:	|  |   addq.l #8,sp
   1745c:	|  |   tst.l d0
   1745e:	|  +-- bge.s 174be <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17460:	|  |   move.l 36(sp),-(sp)
   17464:	|  |   move.l 36(sp),-(sp)
   17468:	|  |   jsr 16e94 <__divsf3>
   1746e:	|  |   addq.l #8,sp
   17470:	|  |   move.l d0,16(sp)
   17474:	|  |   move.l 1a7b6 <MathIeeeSingTransBase>,d0
   1747a:	|  |   movea.l d0,a6
   1747c:	|  |   move.l 16(sp),d0
   17480:	|  |   jsr -30(a6)
   17484:	|  |   move.l d0,12(sp)
   17488:	|  |   move.l 12(sp),d0
   1748c:	|  |   move.l d0,-(sp)
   1748e:	|  |   jsr 16f00 <__extendsfdf2>
   17494:	|  |   addq.l #4,sp
   17496:	|  |   move.l #1413754136,-(sp)
   1749c:	|  |   move.l #1074340347,-(sp)
   174a2:	|  |   move.l d1,-(sp)
   174a4:	|  |   move.l d0,-(sp)
   174a6:	|  |   jsr 1727a <__subdf3>
   174ac:	|  |   lea 16(sp),sp
   174b0:	|  |   move.l d1,-(sp)
   174b2:	|  |   move.l d0,-(sp)
   174b4:	|  |   jsr 17312 <__truncdfsf2>
   174ba:	|  |   addq.l #8,sp
   174bc:	+--|-- bra.s 17518 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   174be:	|  \-> clr.l -(sp)
   174c0:	|      move.l 40(sp),-(sp)
   174c4:	|      jsr 16eca <__eqsf2>
   174ca:	|      addq.l #8,sp
   174cc:	|      tst.l d0
   174ce:	|  /-- bne.s 174ea <atan2f+0x17a>
   174d0:	|  |   clr.l -(sp)
   174d2:	|  |   move.l 36(sp),-(sp)
   174d6:	|  |   jsr 17154 <__gtsf2>
   174dc:	|  |   addq.l #8,sp
   174de:	|  |   tst.l d0
   174e0:	|  +-- ble.s 174ea <atan2f+0x17a>
        return PI / 2;
   174e2:	|  |   move.l #1070141403,d0
   174e8:	+--|-- bra.s 17518 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   174ea:	|  \-> clr.l -(sp)
   174ec:	|      move.l 40(sp),-(sp)
   174f0:	|      jsr 16eca <__eqsf2>
   174f6:	|      addq.l #8,sp
   174f8:	|      tst.l d0
   174fa:	|  /-- bne.s 17516 <atan2f+0x1a6>
   174fc:	|  |   clr.l -(sp)
   174fe:	|  |   move.l 36(sp),-(sp)
   17502:	|  |   jsr 1720e <__ltsf2>
   17508:	|  |   addq.l #8,sp
   1750a:	|  |   tst.l d0
   1750c:	|  +-- bge.s 17516 <atan2f+0x1a6>
        return -PI / 2;
   1750e:	|  |   move.l #-1077342245,d0
   17514:	+--|-- bra.s 17518 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17516:	|  \-> moveq #0,d0
    }
}
   17518:	\----> movea.l (sp)+,a6
   1751a:	       lea 24(sp),sp
   1751e:	       rts

00017520 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17520:	lea -24(sp),sp
   17524:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17526:	move.l 32(sp),20(sp)
   1752c:	move.l 36(sp),24(sp)
   17532:	move.l 1a7be <MathIeeeDoubTransBase>,d0
   17538:	movea.l d0,a6
   1753a:	move.l 20(sp),d0
   1753e:	move.l 24(sp),d1
   17542:	jsr -96(a6)
   17546:	move.l d0,4(sp)
   1754a:	move.l d1,8(sp)
   1754e:	move.l 4(sp),12(sp)
   17554:	move.l 8(sp),16(sp)
   1755a:	move.l 12(sp),d0
   1755e:	move.l 16(sp),d1
}
   17562:	movea.l (sp)+,a6
   17564:	lea 24(sp),sp
   17568:	rts

0001756a <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   1756a:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   1756e:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17572:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17576:	mulu.w 8(sp),d1
	addw	d1, d0
   1757a:	add.w d1,d0
	swap	d0
   1757c:	swap d0
	clrw	d0
   1757e:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17580:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17584:	mulu.w 10(sp),d1
	addl	d1, d0
   17588:	add.l d1,d0
	rts
   1758a:	rts

0001758c <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   1758c:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   1758e:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17592:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17596:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   1759c:	   /-- bcc.s 175b4 <__udivsi3+0x28>
	movel	d0, d2
   1759e:	   |   move.l d0,d2
	clrw	d2
   175a0:	   |   clr.w d2
	swap	d2
   175a2:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   175a4:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   175a6:	   |   move.w d2,d0
	swap	d0
   175a8:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   175aa:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   175ae:	   |   divu.w d1,d2
	movew	d2, d0
   175b0:	   |   move.w d2,d0
	jra	6f
   175b2:	/--|-- bra.s 175e4 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   175b4:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   175b6:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   175b8:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   175ba:	|  |   cmpi.l #65536,d1
	jcc	4b
   175c0:	|  \-- bcc.s 175b6 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   175c2:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   175c4:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   175ca:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   175cc:	|      mulu.w d0,d1
	swap	d2
   175ce:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   175d0:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   175d2:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   175d4:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   175d6:	|  /-- bne.s 175e2 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   175d8:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   175da:	|  +-- bcs.s 175e2 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   175dc:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   175e0:	+--|-- bls.s 175e4 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   175e2:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   175e4:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   175e6:	       rts

000175e8 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   175e8:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   175ea:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   175ec:	    move.l 12(sp),d1
	jpl	1f
   175f0:	/-- bpl.s 175f6 <__divsi3+0xe>
	negl	d1
   175f2:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   175f4:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   175f6:	\-> move.l 8(sp),d0
	jpl	2f
   175fa:	/-- bpl.s 17600 <__divsi3+0x18>
	negl	d0
   175fc:	|   neg.l d0
	negb	d2
   175fe:	|   neg.b d2

2:	movel	d1, sp@-
   17600:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17602:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17604:	    jsr 1758c <__udivsi3>
	addql	#8, sp
   1760a:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   1760c:	    tst.b d2
	jpl	3f
   1760e:	/-- bpl.s 17612 <__divsi3+0x2a>
	negl	d0
   17610:	|   neg.l d0

3:	movel	sp@+, d2
   17612:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17614:	    rts

00017616 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17616:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   1761a:	move.l 4(sp),d0
	movel	d1, sp@-
   1761e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17620:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17622:	jsr 175e8 <__divsi3>
	addql	#8, sp
   17628:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   1762a:	move.l 8(sp),d1
	movel	d1, sp@-
   1762e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17630:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17632:	jsr 1756a <__mulsi3>
	addql	#8, sp
   17638:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   1763a:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1763e:	sub.l d0,d1
	movel	d1, d0
   17640:	move.l d1,d0
	rts
   17642:	rts

00017644 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17644:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17648:	move.l 4(sp),d0
	movel	d1, sp@-
   1764c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1764e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17650:	jsr 1758c <__udivsi3>
	addql	#8, sp
   17656:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17658:	move.l 8(sp),d1
	movel	d1, sp@-
   1765c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1765e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17660:	jsr 1756a <__mulsi3>
	addql	#8, sp
   17666:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17668:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1766c:	sub.l d0,d1
	movel	d1, d0
   1766e:	move.l d1,d0
	rts
   17670:	rts

00017672 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17672:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17674:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17678:	jsr -516(a6)
    move.l (sp)+, a6
   1767c:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   1767e:	rts

00017680 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17680:	move.b d0,(a3)+
	rts
   17682:	rts
