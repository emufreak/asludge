
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #90112,d0
       8:	       subi.l #90112,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 16000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #90112,d0
      40:	       subi.l #90112,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 16000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 440e <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #90112,d0
      7e:	       subi.l #90112,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 16000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr f21e <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 17b28 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr f236 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 16000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr f21e <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 17b28 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 16000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr f21e <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 17b28 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 127d4 <PutChar+0x4>
     35c:	|  |              |   jsr 11d08 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 17b30 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 17b30 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 17b30 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 17b30 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 17b30 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 17b30 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 17b30 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 127fe <PutChar+0x2e>
     834:	|   jsr 11d08 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 17b30 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 1281a <PutChar+0x4a>
     8a6:	|   jsr 11d08 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 17b30 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 17b30 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 17b30 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 17b30 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 17b30 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 17b30 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 17b30 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 17b30 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 17b28 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 17b30 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr f21e <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 17b30 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 17b28 <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 17b28 <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #75842,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 17b28 <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 1284f <PutChar+0x7f>
     cea:	   |   jsr 11d08 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 126ba <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 12794 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 1286c <PutChar+0x9c>
     d66:	|      jsr 11d08 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 17b28 <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 17b28 <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 17b28 <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 17a14 <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 5a30 <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),17a14 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 17a18 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 17a1c <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 1287f <PutChar+0xaf>
     de8:	jsr 11d08 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
     df4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
     df8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
     dfc:	       tst.l 24(sp)
     e00:	   /-- bge.s e06 <drawLine+0x12>
     e02:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
     e06:	   \-> tst.l 28(sp)
     e0a:	   /-- bge.s e10 <drawLine+0x1c>
     e0c:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
     e10:	   \-> tst.l 32(sp)
     e14:	   /-- bge.s e1a <drawLine+0x26>
     e16:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
     e1a:	   \-> tst.l 36(sp)
     e1e:	   /-- bge.s e24 <drawLine+0x30>
     e20:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
     e24:	   \-> move.l 17baa <sceneWidth>,d0
     e2a:	       cmp.l 24(sp),d0
     e2e:	   /-- bge.s e3e <drawLine+0x4a>
     e30:	   |   move.l 17baa <sceneWidth>,d0
     e36:	   |   move.l d0,d1
     e38:	   |   subq.l #1,d1
     e3a:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
     e3e:	   \-> move.l 17baa <sceneWidth>,d0
     e44:	       cmp.l 32(sp),d0
     e48:	   /-- bge.s e58 <drawLine+0x64>
     e4a:	   |   move.l 17baa <sceneWidth>,d0
     e50:	   |   move.l d0,d1
     e52:	   |   subq.l #1,d1
     e54:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
     e58:	   \-> move.l 17bae <sceneHeight>,d0
     e5e:	       cmp.l 28(sp),d0
     e62:	   /-- bge.s e72 <drawLine+0x7e>
     e64:	   |   move.l 17bae <sceneHeight>,d0
     e6a:	   |   move.l d0,d1
     e6c:	   |   subq.l #1,d1
     e6e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
     e72:	   \-> move.l 17bae <sceneHeight>,d0
     e78:	       cmp.l 36(sp),d0
     e7c:	   /-- bge.s e8c <drawLine+0x98>
     e7e:	   |   move.l 17bae <sceneHeight>,d0
     e84:	   |   move.l d0,d1
     e86:	   |   subq.l #1,d1
     e88:	   |   move.l d1,36(sp)

	if (x1 > x2) {
     e8c:	   \-> move.l 24(sp),d0
     e90:	       cmp.l 32(sp),d0
     e94:	/----- ble.s eb0 <drawLine+0xbc>
		x = x2; 
     e96:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
     e9c:	|      tst.w 10(sp)
     ea0:	|      seq d0
     ea2:	|      neg.b d0
     ea4:	|      move.b d0,d0
     ea6:	|      andi.w #255,d0
     eaa:	|      move.w d0,10(sp)
     eae:	|  /-- bra.s eb6 <drawLine+0xc2>
	} else x = x1;
     eb0:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
     eb6:	   \-> move.l 28(sp),d1
     eba:	       cmp.l 36(sp),d1
     ebe:	/----- ble.s eda <drawLine+0xe6>
		y = y2; 
     ec0:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
     ec6:	|      tst.w 10(sp)
     eca:	|      seq d0
     ecc:	|      neg.b d0
     ece:	|      move.b d0,d0
     ed0:	|      andi.w #255,d0
     ed4:	|      move.w d0,10(sp)
     ed8:	|  /-- bra.s ee0 <drawLine+0xec>
	} else y = y1;	
     eda:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
     ee0:	   \-> move.l 32(sp),d0
     ee4:	       sub.l 24(sp),d0
     ee8:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
     eec:	       move.l 6(sp),d0
     ef0:	   /-- bpl.s ef4 <drawLine+0x100>
     ef2:	   |   neg.l d0
     ef4:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
     ef8:	       move.l 36(sp),d1
     efc:	       sub.l 28(sp),d1
     f00:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
     f04:	       move.l 2(sp),d0
     f08:	   /-- bpl.s f0c <drawLine+0x118>
     f0a:	   |   neg.l d0
     f0c:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
     f10:	       tst.l 6(sp)
     f14:	   /-- bne.s f38 <drawLine+0x144>
		diffX = 1;
     f16:	   |   moveq #1,d0
     f18:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
     f1c:	   |   move.l 17baa <sceneWidth>,d0
     f22:	   |   subq.l #1,d0
     f24:	   |   cmp.l 16(sp),d0
     f28:	   +-- bne.s f38 <drawLine+0x144>
     f2a:	   |   move.l 17baa <sceneWidth>,d0
     f30:	   |   move.l d0,d1
     f32:	   |   subq.l #2,d1
     f34:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
     f38:	   \-> tst.l 2(sp)
     f3c:	   /-- bne.s f60 <drawLine+0x16c>
		diffY = 1;
     f3e:	   |   moveq #1,d0
     f40:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
     f44:	   |   move.l 17bae <sceneHeight>,d0
     f4a:	   |   subq.l #1,d0
     f4c:	   |   cmp.l 12(sp),d0
     f50:	   +-- bne.s f60 <drawLine+0x16c>
     f52:	   |   move.l 17bae <sceneHeight>,d0
     f58:	   |   move.l d0,d1
     f5a:	   |   subq.l #2,d1
     f5c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
     f60:	   \-> pea 128b8 <PutChar+0xe8>
     f66:	       jsr 11d08 <KPrintF>
     f6c:	       addq.l #4,sp
	
}
     f6e:	       nop
     f70:	       lea 20(sp),sp
     f74:	       rts

00000f76 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
     f76:	                      lea -24(sp),sp
     f7a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
     f7c:	                      move.l 17a30 <firstTexture>,d0
     f82:	/-------------------- beq.w 1060 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
     f86:	|                     clr.l 24(sp)
     f8a:	|     /-------------- bra.w 1054 <deleteTextures+0xde>
			BOOL found = FALSE;
     f8e:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
     f92:	|  |  |               move.l 17a30 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
     f9a:	|  |  |               movea.l 20(sp),a0
     f9e:	|  |  |               move.l (a0),d1
     fa0:	|  |  |               move.l 24(sp),d0
     fa4:	|  |  |               add.l d0,d0
     fa6:	|  |  |               add.l d0,d0
     fa8:	|  |  |               movea.l 36(sp),a0
     fac:	|  |  |               adda.l d0,a0
     fae:	|  |  |               move.l (a0),d0
     fb0:	|  |  |               cmp.l d1,d0
     fb2:	|  |  |  /----------- bne.w 1046 <deleteTextures+0xd0>
				found = TRUE;
     fb6:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
     fbc:	|  |  |  |            movea.l 20(sp),a0
     fc0:	|  |  |  |            move.l 12(a0),d0
     fc4:	|  |  |  |            move.l d0,17a30 <firstTexture>
				FreeVec(list);
     fca:	|  |  |  |            move.l 20(sp),6(sp)
     fd0:	|  |  |  |            move.l 17b28 <SysBase>,d0
     fd6:	|  |  |  |            movea.l d0,a6
     fd8:	|  |  |  |            movea.l 6(sp),a1
     fdc:	|  |  |  |            jsr -690(a6)
				continue;
     fe0:	|  |  |  |  /-------- bra.s 1050 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
     fe2:	|  |  |  |  |  /----> movea.l 20(sp),a0
     fe6:	|  |  |  |  |  |      movea.l 12(a0),a0
     fea:	|  |  |  |  |  |      move.l (a0),d1
     fec:	|  |  |  |  |  |      move.l 24(sp),d0
     ff0:	|  |  |  |  |  |      add.l d0,d0
     ff2:	|  |  |  |  |  |      add.l d0,d0
     ff4:	|  |  |  |  |  |      movea.l 36(sp),a0
     ff8:	|  |  |  |  |  |      adda.l d0,a0
     ffa:	|  |  |  |  |  |      move.l (a0),d0
     ffc:	|  |  |  |  |  |      cmp.l d1,d0
     ffe:	|  |  |  |  |  |  /-- bne.s 103c <deleteTextures+0xc6>
					found = TRUE;
    1000:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    1006:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    100a:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    1010:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1014:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    1018:	|  |  |  |  |  |  |   move.l 12(a0),d0
    101c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1020:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1024:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    102a:	|  |  |  |  |  |  |   move.l 17b28 <SysBase>,d0
    1030:	|  |  |  |  |  |  |   movea.l d0,a6
    1032:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    1036:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    103a:	|  |  |  |  +--|--|-- bra.s 1050 <deleteTextures+0xda>
				}
				list = list->next;
    103c:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    1040:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    1046:	|  |  |  \--|--|----> movea.l 20(sp),a0
    104a:	|  |  |     |  |      move.l 12(a0),d0
    104e:	|  |  |     |  \----- bne.s fe2 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    1050:	|  |  |     \-------> addq.l #1,24(sp)
    1054:	|  |  \-------------> move.l 24(sp),d0
    1058:	|  |                  cmp.l 32(sp),d0
    105c:	|  \----------------- bcs.w f8e <deleteTextures+0x18>
			}
		}
	}
}
    1060:	\-------------------> nop
    1062:	                      movea.l (sp)+,a6
    1064:	                      lea 24(sp),sp
    1068:	                      rts

0000106a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    106a:	subq.l #4,sp
    106c:	move.l 8(sp),d0
    1070:	move.w d0,d0
    1072:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    1076:	pea 128db <PutChar+0x10b>
    107c:	jsr 11d08 <KPrintF>
    1082:	addq.l #4,sp
    1084:	nop
    1086:	addq.l #4,sp
    1088:	rts

0000108a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    108a:	       moveq #-1,d0
    108c:	       cmp.l 4(sp),d0
    1090:	   /-- bne.s 1096 <resourceNameFromNum+0xc>
    1092:	   |   moveq #0,d0
    1094:	/--|-- bra.s 10ce <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    1096:	|  \-> move.l 17b04 <numResourceNames>,d0
    109c:	|  /-- bne.s 10a6 <resourceNameFromNum+0x1c>
    109e:	|  |   move.l #76043,d0
    10a4:	+--|-- bra.s 10ce <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    10a6:	|  \-> move.l 17b04 <numResourceNames>,d0
    10ac:	|      cmp.l 4(sp),d0
    10b0:	|  /-- ble.s 10c8 <resourceNameFromNum+0x3e>
    10b2:	|  |   move.l 17ac0 <allResourceNames>,d1
    10b8:	|  |   move.l 4(sp),d0
    10bc:	|  |   add.l d0,d0
    10be:	|  |   add.l d0,d0
    10c0:	|  |   movea.l d1,a0
    10c2:	|  |   adda.l d0,a0
    10c4:	|  |   move.l (a0),d0
    10c6:	+--|-- bra.s 10ce <resourceNameFromNum+0x44>
	return "Unknown resource";
    10c8:	|  \-> move.l #76052,d0
    10ce:	\----> rts

000010d0 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{	
    10d0:	          lea -40(sp),sp
    10d4:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    10d8:	          move.l #320,17a28 <winWidth>
    winHeight = 256;
    10e2:	          move.l #256,17a2c <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    10ec:	          tst.l 56(sp)
    10f0:	      /-- bne.s 1108 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    10f2:	      |   pea 12925 <PutChar+0x155>
    10f8:	      |   jsr b8 <copyString>
    10fe:	      |   addq.l #4,sp
    1100:	      |   move.l d0,17a40 <bundleFolder>
    1106:	   /--|-- bra.s 111e <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    1108:	   |  \-> movea.l 60(sp),a0
    110c:	   |      move.l (a0),d0
    110e:	   |      move.l d0,-(sp)
    1110:	   |      jsr b8 <copyString>
    1116:	   |      addq.l #4,sp
    1118:	   |      move.l d0,17a40 <bundleFolder>
	}
    
	int lastSlash = -1;
    111e:	   \----> moveq #-1,d0
    1120:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1124:	          clr.l 40(sp)
    1128:	   /----- bra.s 114a <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    112a:	/--|----> move.l 17a40 <bundleFolder>,d1
    1130:	|  |      move.l 40(sp),d0
    1134:	|  |      movea.l d1,a0
    1136:	|  |      adda.l d0,a0
    1138:	|  |      move.b (a0),d0
    113a:	|  |      cmpi.b #47,d0
    113e:	|  |  /-- bne.s 1146 <main_sludge+0x76>
    1140:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1146:	|  |  \-> addq.l #1,40(sp)
    114a:	|  \----> move.l 17a40 <bundleFolder>,d1
    1150:	|         move.l 40(sp),d0
    1154:	|         movea.l d1,a0
    1156:	|         adda.l d0,a0
    1158:	|         move.b (a0),d0
    115a:	\-------- bne.s 112a <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    115c:	          move.l 17a40 <bundleFolder>,d0
    1162:	          move.l 44(sp),d1
    1166:	          addq.l #1,d1
    1168:	          movea.l d0,a0
    116a:	          adda.l d1,a0
    116c:	          clr.b (a0)

	if (argc > 1) {
    116e:	          moveq #1,d0
    1170:	          cmp.l 56(sp),d0
    1174:	      /-- bge.s 1190 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    1176:	      |   move.l 56(sp),d0
    117a:	      |   addi.l #1073741823,d0
    1180:	      |   add.l d0,d0
    1182:	      |   add.l d0,d0
    1184:	      |   movea.l 60(sp),a0
    1188:	      |   adda.l d0,a0
    118a:	      |   move.l (a0),48(sp)
    118e:	   /--|-- bra.s 11ea <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    1190:	   |  \-> move.l 17a40 <bundleFolder>,d0
    1196:	   |      pea 1292b <PutChar+0x15b>
    119c:	   |      move.l d0,-(sp)
    119e:	   |      jsr f25e <joinStrings>
    11a4:	   |      addq.l #8,sp
    11a6:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    11aa:	   |      move.l 48(sp),-(sp)
    11ae:	   |      jsr f174 <fileExists>
    11b4:	   |      addq.l #4,sp
    11b6:	   |      tst.b d0
    11b8:	   +----- bne.s 11ea <main_sludge+0x11a>
			FreeVec(sludgeFile);
    11ba:	   |      move.l 48(sp),36(sp)
    11c0:	   |      move.l 17b28 <SysBase>,d0
    11c6:	   |      movea.l d0,a6
    11c8:	   |      movea.l 36(sp),a1
    11cc:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    11d0:	   |      move.l 17a40 <bundleFolder>,d0
    11d6:	   |      pea 12938 <PutChar+0x168>
    11dc:	   |      move.l d0,-(sp)
    11de:	   |      jsr f25e <joinStrings>
    11e4:	   |      addq.l #8,sp
    11e6:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    11ea:	   \----> move.l 48(sp),-(sp)
    11ee:	          jsr f174 <fileExists>
    11f4:	          addq.l #4,sp
    11f6:	          tst.b d0
    11f8:	      /-- bne.s 1242 <main_sludge+0x172>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    11fa:	      |   move.l 17b30 <DOSBase>,d0
    1200:	      |   movea.l d0,a6
    1202:	      |   jsr -60(a6)
    1206:	      |   move.l d0,28(sp)
    120a:	      |   move.l 28(sp),d0
    120e:	      |   move.l d0,24(sp)
    1212:	      |   move.l #76097,20(sp)
    121a:	      |   moveq #21,d0
    121c:	      |   move.l d0,16(sp)
    1220:	      |   move.l 17b30 <DOSBase>,d0
    1226:	      |   movea.l d0,a6
    1228:	      |   move.l 24(sp),d1
    122c:	      |   move.l 20(sp),d2
    1230:	      |   move.l 16(sp),d3
    1234:	      |   jsr -48(a6)
    1238:	      |   move.l d0,12(sp)
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    123c:	      |   moveq #0,d0
    123e:	/-----|-- bra.w 1354 <main_sludge+0x284>
	}

	setGameFilePath (sludgeFile);
    1242:	|     \-> move.l 48(sp),-(sp)
    1246:	|         jsr 135e <setGameFilePath>
    124c:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    124e:	|         move.l 48(sp),-(sp)
    1252:	|         jsr 2be6 <initSludge>
    1258:	|         addq.l #4,sp
    125a:	|         tst.w d0
    125c:	|     /-- bne.s 1264 <main_sludge+0x194>
    125e:	|     |   moveq #0,d0
    1260:	+-----|-- bra.w 1354 <main_sludge+0x284>
	
	if (! resizeBackdrop (winWidth, winHeight)) {
    1264:	|     \-> move.l 17a2c <winHeight>,d0
    126a:	|         move.l d0,d1
    126c:	|         move.l 17a28 <winWidth>,d0
    1272:	|         move.l d1,-(sp)
    1274:	|         move.l d0,-(sp)
    1276:	|         jsr 8bf0 <resizeBackdrop>
    127c:	|         addq.l #8,sp
    127e:	|         tst.w d0
    1280:	|     /-- bne.s 1296 <main_sludge+0x1c6>
		KPrintF("Couldn't allocate memory for backdrop");
    1282:	|     |   pea 12957 <PutChar+0x187>
    1288:	|     |   jsr 11d08 <KPrintF>
    128e:	|     |   addq.l #4,sp
		return FALSE;
    1290:	|     |   moveq #0,d0
    1292:	+-----|-- bra.w 1354 <main_sludge+0x284>
	}

	if (! initPeople ())
    1296:	|     \-> jsr 6476 <initPeople>
    129c:	|         tst.w d0
    129e:	|     /-- bne.s 12b4 <main_sludge+0x1e4>
	{
		KPrintF("Couldn't initialise people stuff");
    12a0:	|     |   pea 1297d <PutChar+0x1ad>
    12a6:	|     |   jsr 11d08 <KPrintF>
    12ac:	|     |   addq.l #4,sp
		return FALSE;
    12ae:	|     |   moveq #0,d0
    12b0:	+-----|-- bra.w 1354 <main_sludge+0x284>
	}

	if (! initFloor ())
    12b4:	|     \-> jsr 1110e <initFloor>
    12ba:	|         tst.w d0
    12bc:	|     /-- bne.s 12d2 <main_sludge+0x202>
	{
		KPrintF("Couldn't initialise floor stuff");
    12be:	|     |   pea 1299e <PutChar+0x1ce>
    12c4:	|     |   jsr 11d08 <KPrintF>
    12ca:	|     |   addq.l #4,sp
		return FALSE;
    12cc:	|     |   moveq #0,d0
    12ce:	+-----|-- bra.w 1354 <main_sludge+0x284>
	}

	if (! initObjectTypes ())
    12d2:	|     \-> jsr 8d9a <initObjectTypes>
    12d8:	|         tst.w d0
    12da:	|     /-- bne.s 12ee <main_sludge+0x21e>
	{
		KPrintF("Couldn't initialise object type stuff");
    12dc:	|     |   pea 129be <PutChar+0x1ee>
    12e2:	|     |   jsr 11d08 <KPrintF>
    12e8:	|     |   addq.l #4,sp
		return FALSE;
    12ea:	|     |   moveq #0,d0
    12ec:	+-----|-- bra.s 1354 <main_sludge+0x284>
	}

	initSpeech ();
    12ee:	|     \-> jsr 4d04 <initSpeech>
	initStatusBar ();
    12f4:	|         jsr 47c8 <initStatusBar>

	gameName = getNumberedString(1);
    12fa:	|         pea 1 <_start+0x1>
    12fe:	|         jsr 3d62 <getNumberedString>
    1304:	|         addq.l #4,sp
    1306:	|         move.l d0,17a38 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    130c:	|         move.l 17af8 <noStack>,d0
    1312:	|         pea 1 <_start+0x1>
    1316:	|         move.l d0,-(sp)
    1318:	|         clr.l -(sp)
    131a:	|         clr.l -(sp)
    131c:	|         clr.l -(sp)
    131e:	|         jsr 3bf4 <startNewFunctionNum>
    1324:	|         lea 20(sp),sp

	weAreDoneSoQuit = 0;
    1328:	|         clr.l 17a44 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {
    132e:	|     /-- bra.s 1336 <main_sludge+0x266>
		handleInput();
    1330:	|  /--|-> jsr 2bde <handleInput>
	while ( !weAreDoneSoQuit ) {
    1336:	|  |  \-> move.l 17a44 <weAreDoneSoQuit>,d0
    133c:	|  \----- beq.s 1330 <main_sludge+0x260>
	}
	//Amiga Cleanup
	FreeVec(sludgeFile);
    133e:	|         move.l 48(sp),32(sp)
    1344:	|         move.l 17b28 <SysBase>,d0
    134a:	|         movea.l d0,a6
    134c:	|         movea.l 32(sp),a1
    1350:	|         jsr -690(a6)
}
    1354:	\-------> movem.l (sp)+,d2-d3/a6
    1358:	          lea 40(sp),sp
    135c:	          rts

0000135e <setGameFilePath>:

void setGameFilePath (char * f) {
    135e:	          lea -1104(sp),sp
    1362:	          move.l a6,-(sp)
    1364:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1366:	          move.l #1112,d0
    136c:	          add.l sp,d0
    136e:	          addi.l #-1102,d0
    1374:	          move.l d0,1100(sp)
    1378:	          move.l #998,1096(sp)
    1380:	          move.l 17b30 <DOSBase>,d0
    1386:	          movea.l d0,a6
    1388:	          move.l 1100(sp),d1
    138c:	          move.l 1096(sp),d2
    1390:	          jsr -564(a6)
    1394:	          move.w d0,1094(sp)
    1398:	          move.w 1094(sp),d0
    139c:	      /-- bne.s 13ac <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    139e:	      |   pea 129e4 <PutChar+0x214>
    13a4:	      |   jsr 11d08 <KPrintF>
    13aa:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    13ac:	      \-> moveq #-1,d0
    13ae:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    13b2:	          clr.l 1104(sp)
    13b6:	   /----- bra.s 13d4 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    13b8:	/--|----> move.l 1104(sp),d0
    13bc:	|  |      movea.l 1116(sp),a0
    13c0:	|  |      adda.l d0,a0
    13c2:	|  |      move.b (a0),d0
    13c4:	|  |      cmpi.b #47,d0
    13c8:	|  |  /-- bne.s 13d0 <setGameFilePath+0x72>
    13ca:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    13d0:	|  |  \-> addq.l #1,1104(sp)
    13d4:	|  \----> move.l 1104(sp),d0
    13d8:	|         movea.l 1116(sp),a0
    13dc:	|         adda.l d0,a0
    13de:	|         move.b (a0),d0
    13e0:	\-------- bne.s 13b8 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    13e2:	          moveq #-1,d0
    13e4:	          cmp.l 1108(sp),d0
    13e8:	   /----- beq.s 1462 <setGameFilePath+0x104>
		f[got] = 0;	
    13ea:	   |      move.l 1108(sp),d0
    13ee:	   |      movea.l 1116(sp),a0
    13f2:	   |      adda.l d0,a0
    13f4:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    13f6:	   |      move.l 1116(sp),1090(sp)
    13fc:	   |      moveq #-2,d0
    13fe:	   |      move.l d0,1086(sp)
    1402:	   |      move.l 17b30 <DOSBase>,d0
    1408:	   |      movea.l d0,a6
    140a:	   |      move.l 1090(sp),d1
    140e:	   |      move.l 1086(sp),d2
    1412:	   |      jsr -84(a6)
    1416:	   |      move.l d0,1082(sp)
    141a:	   |      move.l 1082(sp),d0
    141e:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    1422:	   |      move.l 1078(sp),1074(sp)
    1428:	   |      move.l 17b30 <DOSBase>,d0
    142e:	   |      movea.l d0,a6
    1430:	   |      move.l 1074(sp),d1
    1434:	   |      jsr -126(a6)
    1438:	   |      move.l d0,1070(sp)
    143c:	   |      move.l 1070(sp),d0
    1440:	   |  /-- bne.s 1454 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    1442:	   |  |   move.l 1116(sp),-(sp)
    1446:	   |  |   pea 12a0a <PutChar+0x23a>
    144c:	   |  |   jsr 11d08 <KPrintF>
    1452:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    1454:	   |  \-> move.l 1108(sp),d0
    1458:	   |      movea.l 1116(sp),a0
    145c:	   |      adda.l d0,a0
    145e:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    1462:	   \----> move.l #400,1066(sp)
    146a:	          clr.l 1062(sp)
    146e:	          move.l 17b28 <SysBase>,d0
    1474:	          movea.l d0,a6
    1476:	          move.l 1066(sp),d0
    147a:	          move.l 1062(sp),d1
    147e:	          jsr -684(a6)
    1482:	          move.l d0,1058(sp)
    1486:	          move.l 1058(sp),d0
    148a:	          move.l d0,17a3c <gamePath>
	if (gamePath==0) {
    1490:	          move.l 17a3c <gamePath>,d0
    1496:	      /-- bne.s 14aa <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    1498:	      |   pea 12a3d <PutChar+0x26d>
    149e:	      |   jsr 11d08 <KPrintF>
    14a4:	      |   addq.l #4,sp
    14a6:	   /--|-- bra.w 1592 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    14aa:	   |  \-> move.l 17a3c <gamePath>,1054(sp)
    14b2:	   |      moveq #-2,d0
    14b4:	   |      move.l d0,1050(sp)
    14b8:	   |      move.l 17b30 <DOSBase>,d0
    14be:	   |      movea.l d0,a6
    14c0:	   |      move.l 1054(sp),d1
    14c4:	   |      move.l 1050(sp),d2
    14c8:	   |      jsr -84(a6)
    14cc:	   |      move.l d0,1046(sp)
    14d0:	   |      move.l 1046(sp),d0
    14d4:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    14d8:	   |      move.l 1042(sp),1038(sp)
    14de:	   |      move.l 17b30 <DOSBase>,d0
    14e4:	   |      movea.l d0,a6
    14e6:	   |      move.l 1038(sp),d1
    14ea:	   |      jsr -126(a6)
    14ee:	   |      move.l d0,1034(sp)
    14f2:	   |      move.l 1034(sp),d0
    14f6:	   |  /-- bne.s 1506 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    14f8:	   |  |   pea 12a78 <PutChar+0x2a8>
    14fe:	   |  |   jsr 11d08 <KPrintF>
    1504:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    1506:	   |  \-> move.l #1112,d0
    150c:	   |      add.l sp,d0
    150e:	   |      addi.l #-1102,d0
    1514:	   |      move.l d0,1030(sp)
    1518:	   |      moveq #-2,d0
    151a:	   |      move.l d0,1026(sp)
    151e:	   |      move.l 17b30 <DOSBase>,d0
    1524:	   |      movea.l d0,a6
    1526:	   |      move.l 1030(sp),d1
    152a:	   |      move.l 1026(sp),d2
    152e:	   |      jsr -84(a6)
    1532:	   |      move.l d0,1022(sp)
    1536:	   |      move.l 1022(sp),d0
    153a:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    153e:	   |      move.l 1042(sp),1018(sp)
    1544:	   |      move.l 17b30 <DOSBase>,d0
    154a:	   |      movea.l d0,a6
    154c:	   |      move.l 1018(sp),d1
    1550:	   |      jsr -126(a6)
    1554:	   |      move.l d0,1014(sp)
    1558:	   |      move.l 1014(sp),d0
    155c:	   |  /-- bne.s 1572 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    155e:	   |  |   moveq #10,d0
    1560:	   |  |   add.l sp,d0
    1562:	   |  |   move.l d0,-(sp)
    1564:	   |  |   pea 12aa4 <PutChar+0x2d4>
    156a:	   |  |   jsr 11d08 <KPrintF>
    1570:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    1572:	   |  \-> move.l 17a3c <gamePath>,d0
    1578:	   +----- beq.s 1592 <setGameFilePath+0x234>
    157a:	   |      move.l 17a3c <gamePath>,1010(sp)
    1582:	   |      move.l 17b28 <SysBase>,d0
    1588:	   |      movea.l d0,a6
    158a:	   |      movea.l 1010(sp),a1
    158e:	   |      jsr -690(a6)
}
    1592:	   \----> move.l (sp)+,d2
    1594:	          movea.l (sp)+,a6
    1596:	          lea 1104(sp),sp
    159a:	          rts

0000159c <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    159c:	    subq.l #4,sp
    159e:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    15a0:	    move.l 17a98 <zBuffer+0x50>,d0
    15a6:	/-- beq.s 15de <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    15a8:	|   pea 17a9c <zBuffer+0x54>
    15ae:	|   pea 1 <_start+0x1>
    15b2:	|   jsr f76 <deleteTextures>
    15b8:	|   addq.l #8,sp
		zBuffer.texName = 0;
    15ba:	|   clr.l 17a9c <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    15c0:	|   move.l 17a98 <zBuffer+0x50>,4(sp)
    15c8:	|   move.l 17b28 <SysBase>,d0
    15ce:	|   movea.l d0,a6
    15d0:	|   movea.l 4(sp),a1
    15d4:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    15d8:	|   clr.l 17a98 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    15de:	\-> clr.l 17a50 <zBuffer+0x8>
	zBuffer.originalNum =0;
    15e4:	    clr.l 17a94 <zBuffer+0x4c>
}
    15ea:	    nop
    15ec:	    movea.l (sp)+,a6
    15ee:	    addq.l #4,sp
    15f0:	    rts

000015f2 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    15f2:	                         lea -528(sp),sp
    15f6:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    15fa:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    15fe:	                         jsr 159c <killZBuffer>

	zBuffer.originalNum = y;
    1604:	                         move.l 544(sp),d0
    1608:	                         move.l d0,17a94 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    160e:	                         move.l 544(sp),d0
    1612:	                         move.l d0,-(sp)
    1614:	                         jsr 3e60 <openFileFromNum>
    161a:	                         addq.l #4,sp
    161c:	                         tst.l d0
    161e:	                     /-- bne.s 1626 <setZBuffer+0x34>
    1620:	                     |   clr.w d0
    1622:	/--------------------|-- bra.w 1a04 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    1626:	|                    \-> move.l 17b10 <bigDataFile>,524(sp)
    162e:	|                        move.l 17b30 <DOSBase>,d0
    1634:	|                        movea.l d0,a6
    1636:	|                        move.l 524(sp),d1
    163a:	|                        jsr -306(a6)
    163e:	|                        move.l d0,520(sp)
    1642:	|                        move.l 520(sp),d0
    1646:	|                        moveq #83,d1
    1648:	|                        cmp.l d0,d1
    164a:	|                    /-- beq.s 16ac <setZBuffer+0xba>
    164c:	|                    |   move.l 17b10 <bigDataFile>,516(sp)
    1654:	|                    |   move.l 17b30 <DOSBase>,d0
    165a:	|                    |   movea.l d0,a6
    165c:	|                    |   move.l 516(sp),d1
    1660:	|                    |   jsr -306(a6)
    1664:	|                    |   move.l d0,512(sp)
    1668:	|                    |   move.l 512(sp),d0
    166c:	|                    |   moveq #122,d1
    166e:	|                    |   cmp.l d0,d1
    1670:	|                    +-- beq.s 16ac <setZBuffer+0xba>
    1672:	|                    |   move.l 17b10 <bigDataFile>,508(sp)
    167a:	|                    |   move.l 17b30 <DOSBase>,d0
    1680:	|                    |   movea.l d0,a6
    1682:	|                    |   move.l 508(sp),d1
    1686:	|                    |   jsr -306(a6)
    168a:	|                    |   move.l d0,504(sp)
    168e:	|                    |   move.l 504(sp),d0
    1692:	|                    |   moveq #98,d1
    1694:	|                    |   cmp.l d0,d1
    1696:	|                    +-- beq.s 16ac <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    1698:	|                    |   pea 12ad6 <PutChar+0x306>
    169e:	|                    |   jsr 11d08 <KPrintF>
    16a4:	|                    |   addq.l #4,sp
		 return FALSE;
    16a6:	|                    |   clr.w d0
    16a8:	+--------------------|-- bra.w 1a04 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    16ac:	|                    \-> move.l 17b10 <bigDataFile>,500(sp)
    16b4:	|                        move.l 17b30 <DOSBase>,d0
    16ba:	|                        movea.l d0,a6
    16bc:	|                        move.l 500(sp),d1
    16c0:	|                        jsr -306(a6)
    16c4:	|                        move.l d0,496(sp)
    16c8:	|                        move.l 496(sp),d0
    16cc:	|                    /-- beq.s 16d6 <setZBuffer+0xe4>
    16ce:	|                    |   moveq #1,d1
    16d0:	|                    |   cmp.l d0,d1
    16d2:	|                 /--|-- beq.s 16ec <setZBuffer+0xfa>
    16d4:	|              /--|--|-- bra.s 171a <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    16d6:	|              |  |  \-> move.l #640,17a48 <zBuffer>
		zBuffer.height = 480;
    16e0:	|              |  |      move.l #480,17a4c <zBuffer+0x4>
		break;
    16ea:	|              |  |  /-- bra.s 172e <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    16ec:	|              |  \--|-> move.l 17b10 <bigDataFile>,d0
    16f2:	|              |     |   move.l d0,-(sp)
    16f4:	|              |     |   jsr 6bc <get2bytes>
    16fa:	|              |     |   addq.l #4,sp
    16fc:	|              |     |   move.l d0,17a48 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    1702:	|              |     |   move.l 17b10 <bigDataFile>,d0
    1708:	|              |     |   move.l d0,-(sp)
    170a:	|              |     |   jsr 6bc <get2bytes>
    1710:	|              |     |   addq.l #4,sp
    1712:	|              |     |   move.l d0,17a4c <zBuffer+0x4>
		break;
    1718:	|              |     +-- bra.s 172e <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    171a:	|              \-----|-> pea 12aea <PutChar+0x31a>
    1720:	|                    |   jsr 11d08 <KPrintF>
    1726:	|                    |   addq.l #4,sp
		return FALSE;
    1728:	|                    |   clr.w d0
    172a:	+--------------------|-- bra.w 1a04 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    172e:	|                    \-> move.l 17a48 <zBuffer>,d0
    1734:	|                        move.l d0,d1
    1736:	|                        move.l 17baa <sceneWidth>,d0
    173c:	|                        cmp.l d1,d0
    173e:	|                    /-- bne.s 1752 <setZBuffer+0x160>
    1740:	|                    |   move.l 17a4c <zBuffer+0x4>,d0
    1746:	|                    |   move.l d0,d1
    1748:	|                    |   move.l 17bae <sceneHeight>,d0
    174e:	|                    |   cmp.l d1,d0
    1750:	|                 /--|-- beq.s 17a2 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    1752:	|                 |  \-> movea.l 17bae <sceneHeight>,a1
    1758:	|                 |      movea.l 17baa <sceneWidth>,a0
    175e:	|                 |      move.l 17a4c <zBuffer+0x4>,d1
    1764:	|                 |      move.l 17a48 <zBuffer>,d0
    176a:	|                 |      move.l a1,-(sp)
    176c:	|                 |      move.l a0,-(sp)
    176e:	|                 |      move.l d1,-(sp)
    1770:	|                 |      move.l d0,-(sp)
    1772:	|                 |      pea 12b36 <PutChar+0x366>
    1778:	|                 |      moveq #32,d0
    177a:	|                 |      add.l sp,d0
    177c:	|                 |      move.l d0,-(sp)
    177e:	|                 |      jsr f53c <sprintf>
    1784:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    1788:	|                 |      moveq #12,d0
    178a:	|                 |      add.l sp,d0
    178c:	|                 |      move.l d0,-(sp)
    178e:	|                 |      pea 12b51 <PutChar+0x381>
    1794:	|                 |      jsr 11d08 <KPrintF>
    179a:	|                 |      addq.l #8,sp
		return FALSE;
    179c:	|                 |      clr.w d0
    179e:	+-----------------|----- bra.w 1a04 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    17a2:	|                 \----> move.l 17b10 <bigDataFile>,492(sp)
    17aa:	|                        move.l 17b30 <DOSBase>,d0
    17b0:	|                        movea.l d0,a6
    17b2:	|                        move.l 492(sp),d1
    17b6:	|                        jsr -306(a6)
    17ba:	|                        move.l d0,488(sp)
    17be:	|                        move.l 488(sp),d0
    17c2:	|                        move.l d0,17a50 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    17c8:	|                        clr.l 544(sp)
    17cc:	|                    /-- bra.s 17f8 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    17ce:	|                 /--|-> move.l 17b10 <bigDataFile>,d0
    17d4:	|                 |  |   move.l d0,-(sp)
    17d6:	|                 |  |   jsr 6bc <get2bytes>
    17dc:	|                 |  |   addq.l #4,sp
    17de:	|                 |  |   move.l 544(sp),d1
    17e2:	|                 |  |   add.l d1,d1
    17e4:	|                 |  |   add.l d1,d1
    17e6:	|                 |  |   lea 540(sp),a0
    17ea:	|                 |  |   add.l a0,d1
    17ec:	|                 |  |   movea.l d1,a0
    17ee:	|                 |  |   lea -144(a0),a0
    17f2:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    17f4:	|                 |  |   addq.l #1,544(sp)
    17f8:	|                 |  \-> move.l 17a50 <zBuffer+0x8>,d0
    17fe:	|                 |      cmp.l 544(sp),d0
    1802:	|                 \----- bhi.s 17ce <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    1804:	|                        move.l 17a50 <zBuffer+0x8>,d0
    180a:	|                        move.l d0,-(sp)
    180c:	|                        move.l sp,d0
    180e:	|                        addi.l #336,d0
    1814:	|                        move.l d0,-(sp)
    1816:	|                        move.l sp,d0
    1818:	|                        addi.l #404,d0
    181e:	|                        move.l d0,-(sp)
    1820:	|                        jsr 1a0e <sortZPal>
    1826:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    182a:	|                        clr.l 544(sp)
    182e:	|                    /-- bra.s 18a6 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    1830:	|                 /--|-> move.l 544(sp),d0
    1834:	|                 |  |   add.l d0,d0
    1836:	|                 |  |   add.l d0,d0
    1838:	|                 |  |   move.l #540,d1
    183e:	|                 |  |   add.l sp,d1
    1840:	|                 |  |   add.l d1,d0
    1842:	|                 |  |   movea.l d0,a0
    1844:	|                 |  |   lea -208(a0),a0
    1848:	|                 |  |   move.l (a0),d0
    184a:	|                 |  |   add.l d0,d0
    184c:	|                 |  |   add.l d0,d0
    184e:	|                 |  |   lea 540(sp),a0
    1852:	|                 |  |   add.l a0,d0
    1854:	|                 |  |   movea.l d0,a0
    1856:	|                 |  |   lea -144(a0),a0
    185a:	|                 |  |   move.l (a0),d0
    185c:	|                 |  |   move.l 544(sp),d1
    1860:	|                 |  |   addq.l #3,d1
    1862:	|                 |  |   add.l d1,d1
    1864:	|                 |  |   movea.l d1,a1
    1866:	|                 |  |   adda.l d1,a1
    1868:	|                 |  |   lea 17a48 <zBuffer>,a0
    186e:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    1872:	|                 |  |   move.l 544(sp),d0
    1876:	|                 |  |   add.l d0,d0
    1878:	|                 |  |   add.l d0,d0
    187a:	|                 |  |   move.l #540,d1
    1880:	|                 |  |   add.l sp,d1
    1882:	|                 |  |   add.l d1,d0
    1884:	|                 |  |   movea.l d0,a0
    1886:	|                 |  |   lea -208(a0),a0
    188a:	|                 |  |   move.l (a0),d1
    188c:	|                 |  |   move.l 544(sp),d0
    1890:	|                 |  |   add.l d1,d1
    1892:	|                 |  |   add.l d1,d1
    1894:	|                 |  |   lea 540(sp),a0
    1898:	|                 |  |   add.l a0,d1
    189a:	|                 |  |   movea.l d1,a0
    189c:	|                 |  |   lea -272(a0),a0
    18a0:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    18a2:	|                 |  |   addq.l #1,544(sp)
    18a6:	|                 |  \-> move.l 17a50 <zBuffer+0x8>,d0
    18ac:	|                 |      cmp.l 544(sp),d0
    18b0:	|                 \----- bhi.w 1830 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    18b4:	|                        move.l 17baa <sceneWidth>,d0
    18ba:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    18be:	|                        move.l 17bae <sceneHeight>,d0
    18c4:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    18c8:	|                        move.l 484(sp),-(sp)
    18cc:	|                        move.l 484(sp),-(sp)
    18d0:	|                        jsr 126ba <__mulsi3>
    18d6:	|                        addq.l #8,sp
    18d8:	|                        move.l d0,476(sp)
    18dc:	|                        clr.l 472(sp)
    18e0:	|                        move.l 17b28 <SysBase>,d0
    18e6:	|                        movea.l d0,a6
    18e8:	|                        move.l 476(sp),d0
    18ec:	|                        move.l 472(sp),d1
    18f0:	|                        jsr -684(a6)
    18f4:	|                        move.l d0,468(sp)
    18f8:	|                        move.l 468(sp),d0
    18fc:	|                        move.l d0,17a98 <zBuffer+0x50>
	if (!zBuffer.tex) {
    1902:	|                        move.l 17a98 <zBuffer+0x50>,d0
    1908:	|                    /-- bne.s 191e <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    190a:	|                    |   pea 12b8e <PutChar+0x3be>
    1910:	|                    |   jsr 11d08 <KPrintF>
    1916:	|                    |   addq.l #4,sp
		return FALSE;
    1918:	|                    |   clr.w d0
    191a:	+--------------------|-- bra.w 1a04 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    191e:	|                    \-> clr.l 544(sp)
    1922:	|     /----------------- bra.w 19ee <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    1926:	|  /--|----------------> clr.l 536(sp)
    192a:	|  |  |     /----------- bra.w 19da <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    192e:	|  |  |  /--|----------> tst.l 528(sp)
    1932:	|  |  |  |  |  /-------- bne.s 1990 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    1934:	|  |  |  |  |  |         move.l 17b10 <bigDataFile>,464(sp)
    193c:	|  |  |  |  |  |         move.l 17b30 <DOSBase>,d0
    1942:	|  |  |  |  |  |         movea.l d0,a6
    1944:	|  |  |  |  |  |         move.l 464(sp),d1
    1948:	|  |  |  |  |  |         jsr -306(a6)
    194c:	|  |  |  |  |  |         move.l d0,460(sp)
    1950:	|  |  |  |  |  |         move.l 460(sp),d0
    1954:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    1958:	|  |  |  |  |  |         move.l 532(sp),d0
    195c:	|  |  |  |  |  |         asr.l #4,d0
    195e:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    1962:	|  |  |  |  |  |         moveq #15,d0
    1964:	|  |  |  |  |  |         cmp.l 528(sp),d0
    1968:	|  |  |  |  |  |  /----- bne.s 1986 <setZBuffer+0x394>
    196a:	|  |  |  |  |  |  |      move.l 17b10 <bigDataFile>,d0
    1970:	|  |  |  |  |  |  |      move.l d0,-(sp)
    1972:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    1978:	|  |  |  |  |  |  |      addq.l #4,sp
    197a:	|  |  |  |  |  |  |      movea.l d0,a0
    197c:	|  |  |  |  |  |  |      lea 16(a0),a0
    1980:	|  |  |  |  |  |  |      move.l a0,528(sp)
    1984:	|  |  |  |  |  |  |  /-- bra.s 198a <setZBuffer+0x398>
				else stillToGo ++;
    1986:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    198a:	|  |  |  |  |  |     \-> moveq #15,d1
    198c:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    1990:	|  |  |  |  |  \-------> move.l 532(sp),d0
    1994:	|  |  |  |  |            add.l d0,d0
    1996:	|  |  |  |  |            add.l d0,d0
    1998:	|  |  |  |  |            lea 540(sp),a0
    199c:	|  |  |  |  |            add.l a0,d0
    199e:	|  |  |  |  |            movea.l d0,a0
    19a0:	|  |  |  |  |            lea -272(a0),a0
    19a4:	|  |  |  |  |            move.l (a0),d0
    19a6:	|  |  |  |  |            move.l d0,d2
    19a8:	|  |  |  |  |            move.l 17a98 <zBuffer+0x50>,d3
    19ae:	|  |  |  |  |            move.l 484(sp),d0
    19b2:	|  |  |  |  |            move.l 544(sp),-(sp)
    19b6:	|  |  |  |  |            move.l d0,-(sp)
    19b8:	|  |  |  |  |            jsr 126ba <__mulsi3>
    19be:	|  |  |  |  |            addq.l #8,sp
    19c0:	|  |  |  |  |            move.l d0,d1
    19c2:	|  |  |  |  |            move.l 536(sp),d0
    19c6:	|  |  |  |  |            add.l d1,d0
    19c8:	|  |  |  |  |            movea.l d3,a0
    19ca:	|  |  |  |  |            adda.l d0,a0
    19cc:	|  |  |  |  |            move.b d2,d0
    19ce:	|  |  |  |  |            lsl.b #4,d0
    19d0:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    19d2:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    19d6:	|  |  |  |  |            addq.l #1,536(sp)
    19da:	|  |  |  |  \----------> move.l 536(sp),d1
    19de:	|  |  |  |               move.l 17baa <sceneWidth>,d0
    19e4:	|  |  |  |               cmp.l d1,d0
    19e6:	|  |  |  \-------------- bhi.w 192e <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    19ea:	|  |  |                  addq.l #1,544(sp)
    19ee:	|  |  \----------------> move.l 17bae <sceneHeight>,d0
    19f4:	|  |                     cmp.l 544(sp),d0
    19f8:	|  \-------------------- bhi.w 1926 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    19fc:	|                        jsr 3d58 <finishAccess>
	
	return TRUE;
    1a02:	|                        moveq #1,d0
}
    1a04:	\----------------------> movem.l (sp)+,d2-d3/a6
    1a08:	                         lea 528(sp),sp
    1a0c:	                         rts

00001a0e <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    1a0e:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    1a10:	             clr.l 4(sp)
    1a14:	         /-- bra.s 1a2c <sortZPal+0x1e>
		newpal[i] = i;
    1a16:	      /--|-> move.l 4(sp),d0
    1a1a:	      |  |   add.l d0,d0
    1a1c:	      |  |   add.l d0,d0
    1a1e:	      |  |   movea.l 16(sp),a0
    1a22:	      |  |   adda.l d0,a0
    1a24:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    1a28:	      |  |   addq.l #1,4(sp)
    1a2c:	      |  \-> move.l 4(sp),d0
    1a30:	      |      cmp.l 20(sp),d0
    1a34:	      \----- blt.s 1a16 <sortZPal+0x8>
	}

	if (size < 2) return;		
    1a36:	             moveq #1,d0
    1a38:	             cmp.l 20(sp),d0
    1a3c:	/----------- bge.w 1aee <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    1a40:	|            moveq #1,d0
    1a42:	|            move.l d0,4(sp)
    1a46:	|     /----- bra.w 1ae0 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    1a4a:	|  /--|----> move.l 4(sp),d0
    1a4e:	|  |  |      add.l d0,d0
    1a50:	|  |  |      add.l d0,d0
    1a52:	|  |  |      movea.l 16(sp),a0
    1a56:	|  |  |      adda.l d0,a0
    1a58:	|  |  |      move.l (a0),d0
    1a5a:	|  |  |      add.l d0,d0
    1a5c:	|  |  |      add.l d0,d0
    1a5e:	|  |  |      movea.l 12(sp),a0
    1a62:	|  |  |      adda.l d0,a0
    1a64:	|  |  |      move.l (a0),d1
    1a66:	|  |  |      move.l 4(sp),d0
    1a6a:	|  |  |      addi.l #1073741823,d0
    1a70:	|  |  |      add.l d0,d0
    1a72:	|  |  |      add.l d0,d0
    1a74:	|  |  |      movea.l 16(sp),a0
    1a78:	|  |  |      adda.l d0,a0
    1a7a:	|  |  |      move.l (a0),d0
    1a7c:	|  |  |      add.l d0,d0
    1a7e:	|  |  |      add.l d0,d0
    1a80:	|  |  |      movea.l 12(sp),a0
    1a84:	|  |  |      adda.l d0,a0
    1a86:	|  |  |      move.l (a0),d0
    1a88:	|  |  |      cmp.l d1,d0
    1a8a:	|  |  |  /-- ble.s 1adc <sortZPal+0xce>
			tmp = newpal[i];
    1a8c:	|  |  |  |   move.l 4(sp),d0
    1a90:	|  |  |  |   add.l d0,d0
    1a92:	|  |  |  |   add.l d0,d0
    1a94:	|  |  |  |   movea.l 16(sp),a0
    1a98:	|  |  |  |   adda.l d0,a0
    1a9a:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    1a9c:	|  |  |  |   move.l 4(sp),d0
    1aa0:	|  |  |  |   addi.l #1073741823,d0
    1aa6:	|  |  |  |   add.l d0,d0
    1aa8:	|  |  |  |   add.l d0,d0
    1aaa:	|  |  |  |   movea.l 16(sp),a1
    1aae:	|  |  |  |   adda.l d0,a1
    1ab0:	|  |  |  |   move.l 4(sp),d0
    1ab4:	|  |  |  |   add.l d0,d0
    1ab6:	|  |  |  |   add.l d0,d0
    1ab8:	|  |  |  |   movea.l 16(sp),a0
    1abc:	|  |  |  |   adda.l d0,a0
    1abe:	|  |  |  |   move.l (a1),d0
    1ac0:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    1ac2:	|  |  |  |   move.l 4(sp),d0
    1ac6:	|  |  |  |   addi.l #1073741823,d0
    1acc:	|  |  |  |   add.l d0,d0
    1ace:	|  |  |  |   add.l d0,d0
    1ad0:	|  |  |  |   movea.l 16(sp),a0
    1ad4:	|  |  |  |   adda.l d0,a0
    1ad6:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    1ad8:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    1adc:	|  |  |  \-> addq.l #1,4(sp)
    1ae0:	|  |  \----> move.l 4(sp),d0
    1ae4:	|  |         cmp.l 20(sp),d0
    1ae8:	|  \-------- blt.w 1a4a <sortZPal+0x3c>
    1aec:	|        /-- bra.s 1af0 <sortZPal+0xe2>
	if (size < 2) return;		
    1aee:	\--------|-> nop
		}
	}
    1af0:	         \-> addq.l #8,sp
    1af2:	             rts

00001af4 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    1af4:	/-------> lea -16(sp),sp
    1af8:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    1afa:	|         move.l 24(sp),-(sp)
    1afe:	|         jsr 3992 <pauseFunction>
    1b04:	|         addq.l #4,sp
	while (fun -> stack) trimStack (fun -> stack);
    1b06:	|     /-- bra.s 1b1a <abortFunction+0x26>
    1b08:	|  /--|-> movea.l 24(sp),a0
    1b0c:	|  |  |   move.l 24(a0),d0
    1b10:	|  |  |   move.l d0,-(sp)
    1b12:	|  |  |   jsr 10694 <trimStack>
    1b18:	|  |  |   addq.l #4,sp
    1b1a:	|  |  \-> movea.l 24(sp),a0
    1b1e:	|  |      move.l 24(a0),d0
    1b22:	|  \----- bne.s 1b08 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    1b24:	|         movea.l 24(sp),a0
    1b28:	|         move.l 4(a0),12(sp)
    1b2e:	|         move.l 17b28 <SysBase>,d0
    1b34:	|         movea.l d0,a6
    1b36:	|         movea.l 12(sp),a1
    1b3a:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    1b3e:	|         clr.l 16(sp)
    1b42:	|     /-- bra.s 1b62 <abortFunction+0x6e>
    1b44:	|  /--|-> movea.l 24(sp),a0
    1b48:	|  |  |   move.l 20(a0),d1
    1b4c:	|  |  |   move.l 16(sp),d0
    1b50:	|  |  |   lsl.l #3,d0
    1b52:	|  |  |   add.l d1,d0
    1b54:	|  |  |   move.l d0,-(sp)
    1b56:	|  |  |   jsr ff80 <unlinkVar>
    1b5c:	|  |  |   addq.l #4,sp
    1b5e:	|  |  |   addq.l #1,16(sp)
    1b62:	|  |  \-> movea.l 24(sp),a0
    1b66:	|  |      move.l 8(a0),d0
    1b6a:	|  |      cmp.l 16(sp),d0
    1b6e:	|  \----- bgt.s 1b44 <abortFunction+0x50>
	FreeVec(fun -> localVars);
    1b70:	|         movea.l 24(sp),a0
    1b74:	|         move.l 20(a0),8(sp)
    1b7a:	|         move.l 17b28 <SysBase>,d0
    1b80:	|         movea.l d0,a6
    1b82:	|         movea.l 8(sp),a1
    1b86:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    1b8a:	|         moveq #28,d0
    1b8c:	|         add.l 24(sp),d0
    1b90:	|         move.l d0,-(sp)
    1b92:	|         jsr ff80 <unlinkVar>
    1b98:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    1b9a:	|         movea.l 24(sp),a0
    1b9e:	|         move.l 40(a0),d0
    1ba2:	|     /-- beq.s 1bb4 <abortFunction+0xc0>
    1ba4:	|     |   movea.l 24(sp),a0
    1ba8:	|     |   move.l 40(a0),d0
    1bac:	|     |   move.l d0,-(sp)
    1bae:	\-----|-- jsr 1af4 <abortFunction>(pc)
    1bb2:	      |   addq.l #4,sp
	FreeVec(fun);
    1bb4:	      \-> move.l 24(sp),4(sp)
    1bba:	          move.l 17b28 <SysBase>,d0
    1bc0:	          movea.l d0,a6
    1bc2:	          movea.l 4(sp),a1
    1bc6:	          jsr -690(a6)
	fun = NULL;
    1bca:	          clr.l 24(sp)
}
    1bce:	          nop
    1bd0:	          movea.l (sp)+,a6
    1bd2:	          lea 16(sp),sp
    1bd6:	          rts

00001bd8 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    1bd8:	          subq.l #8,sp
	int n = 0;
    1bda:	          clr.l 4(sp)
	*killedMyself = FALSE;
    1bde:	          movea.l 20(sp),a0
    1be2:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    1be4:	          move.l 17ac4 <allRunningFunctions>,(sp)
	while (fun) {
    1bea:	   /----- bra.s 1c18 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    1bec:	/--|----> movea.l (sp),a0
    1bee:	|  |      move.l (a0),d0
    1bf0:	|  |      cmp.l 12(sp),d0
    1bf4:	|  |  /-- bne.s 1c12 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    1bf6:	|  |  |   movea.l (sp),a0
    1bf8:	|  |  |   move.w #1,54(a0)
			n++;
    1bfe:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    1c02:	|  |  |   move.l (sp),d0
    1c04:	|  |  |   cmp.l 16(sp),d0
    1c08:	|  |  +-- bne.s 1c12 <cancelAFunction+0x3a>
    1c0a:	|  |  |   movea.l 20(sp),a0
    1c0e:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    1c12:	|  |  \-> movea.l (sp),a0
    1c14:	|  |      move.l 44(a0),(sp)
	while (fun) {
    1c18:	|  \----> tst.l (sp)
    1c1a:	\-------- bne.s 1bec <cancelAFunction+0x14>
	}
	return n;
    1c1c:	          move.l 4(sp),d0
}
    1c20:	          addq.l #8,sp
    1c22:	          rts

00001c24 <completeTimers>:


void completeTimers () {
    1c24:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    1c26:	          move.l 17ac4 <allRunningFunctions>,(sp)

	while (thisFunction) {
    1c2c:	   /----- bra.s 1c42 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    1c2e:	/--|----> movea.l (sp),a0
    1c30:	|  |      move.b 56(a0),d0
    1c34:	|  |  /-- bne.s 1c3c <completeTimers+0x18>
    1c36:	|  |  |   movea.l (sp),a0
    1c38:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    1c3c:	|  |  \-> movea.l (sp),a0
    1c3e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    1c42:	|  \----> tst.l (sp)
    1c44:	\-------- bne.s 1c2e <completeTimers+0xa>
	}
}
    1c46:	          nop
    1c48:	          nop
    1c4a:	          addq.l #4,sp
    1c4c:	          rts

00001c4e <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    1c4e:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    1c52:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    1c58:	                                                             movea.l 80(sp),a0
    1c5c:	                                                             move.w 54(a0),d0
    1c60:	/----------------------------------------------------------- beq.w 2b04 <continueFunction+0xeb6>
		abortFunction (fun);
    1c64:	|                                                            move.l 80(sp),-(sp)
    1c68:	|                                                            jsr 1af4 <abortFunction>
    1c6e:	|                                                            addq.l #4,sp
		return TRUE;
    1c70:	|                                                            moveq #1,d0
    1c72:	|  /-------------------------------------------------------- bra.w 2b0e <continueFunction+0xec0>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    1c76:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    1c7c:	|  |  |                                                      movea.l 80(sp),a0
    1c80:	|  |  |                                                      move.l 4(a0),d1
    1c84:	|  |  |                                                      movea.l 80(sp),a0
    1c88:	|  |  |                                                      move.l 36(a0),d0
    1c8c:	|  |  |                                                      lsl.l #3,d0
    1c8e:	|  |  |                                                      movea.l d1,a0
    1c90:	|  |  |                                                      adda.l d0,a0
    1c92:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    1c98:	|  |  |                                                      movea.l 80(sp),a0
    1c9c:	|  |  |                                                      move.l 4(a0),d1
    1ca0:	|  |  |                                                      movea.l 80(sp),a0
    1ca4:	|  |  |                                                      move.l 36(a0),d0
    1ca8:	|  |  |                                                      lsl.l #3,d0
    1caa:	|  |  |                                                      movea.l d1,a0
    1cac:	|  |  |                                                      adda.l d0,a0
    1cae:	|  |  |                                                      move.l (a0),64(sp)
//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    1cb2:	|  |  |                                                      moveq #41,d0
    1cb4:	|  |  |                                                      cmp.l 64(sp),d0
    1cb8:	|  |  |  /-------------------------------------------------- bcs.w 2ab8 <continueFunction+0xe6a>
    1cbc:	|  |  |  |                                                   move.l 64(sp),d0
    1cc0:	|  |  |  |                                                   add.l d0,d0
    1cc2:	|  |  |  |                                                   movea.l d0,a0
    1cc4:	|  |  |  |                                                   adda.l #7376,a0
    1cca:	|  |  |  |                                                   move.w (a0),d0
    1ccc:	|  |  |  |                                                   jmp (1cd0 <continueFunction+0x82>,pc,d0.w)
    1cd0:	|  |  |  |                                                   bset d6,84(a0)
    1cd4:	|  |  |  |                                                   eori.w #2644,sr
    1cd8:	|  |  |  |                                                   .short 0x097e
    1cda:	|  |  |  |                                                   bchg d4,(a0)
    1cdc:	|  |  |  |                                                   bclr d4,646(a2)
    1ce0:	|  |  |  |                                                   .short 0x0ad8
    1ce2:	|  |  |  |                                                   .short 0x0ad8
    1ce4:	|  |  |  |                                                   .short 0x0ad8
    1ce6:	|  |  |  |                                                   .short 0x0ad8
    1ce8:	|  |  |  |                                                   andi.l #51514072,(-40,a4,d0.l:2)
    1cf0:	|  |  |  |                                                   .short 0x0ad8
    1cf2:	|  |  |  |                                                   andi.w #912,-(a6)
    1cf6:	|  |  |  |                                                   bchg d1,(-60,a0,d0.w)
    1cfa:	|  |  |  |                                                   bset d1,(70,a2,d0.w:2)
    1cfe:	|  |  |  |                                                   bclr d1,(30,a0,d0.l:2)
    1d02:	|  |  |  |                                                   andi.b #-42,2776(a4)
    1d08:	|  |  |  |                                                   .short 0x0ad8
    1d0a:	|  |  |  |                                                   .short 0x0a8e
    1d0c:	|  |  |  |                                                   bset d1,(a0)
    1d0e:	|  |  |  |                                                   .short 0x0ad8
    1d10:	|  |  |  |                                                   .short 0x0ad8
    1d12:	|  |  |  |                                                   bchg d3,(96,a0,d0.l)
    1d16:	|  |  |  |                                                   bset d3,2266(a2)
    1d1a:	|  |  |  |                                                   addi.b #20,(20,a2,d0.w:4)
    1d20:	|  |  |  |                                                   subi.b #-6,(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    1d24:	|  |  |  |                                                   movea.l 80(sp),a0
    1d28:	|  |  |  |                                                   move.l 40(a0),d0
    1d2c:	|  |  |  |                                            /----- beq.s 1d7c <continueFunction+0x12e>
				struct loadedFunction * returnTo = fun -> calledBy;
    1d2e:	|  |  |  |                                            |      movea.l 80(sp),a0
    1d32:	|  |  |  |                                            |      move.l 40(a0),44(sp)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    1d38:	|  |  |  |                                            |      movea.l 80(sp),a0
    1d3c:	|  |  |  |                                            |      move.w 48(a0),d0
    1d40:	|  |  |  |                                            |  /-- beq.s 1d5a <continueFunction+0x10c>
    1d42:	|  |  |  |                                            |  |   moveq #28,d1
    1d44:	|  |  |  |                                            |  |   add.l 44(sp),d1
    1d48:	|  |  |  |                                            |  |   moveq #28,d0
    1d4a:	|  |  |  |                                            |  |   add.l 80(sp),d0
    1d4e:	|  |  |  |                                            |  |   move.l d1,-(sp)
    1d50:	|  |  |  |                                            |  |   move.l d0,-(sp)
    1d52:	|  |  |  |                                            |  |   jsr 101ec <copyVariable>
    1d58:	|  |  |  |                                            |  |   addq.l #8,sp
				finishFunction (fun);
    1d5a:	|  |  |  |                                            |  \-> move.l 80(sp),-(sp)
    1d5e:	|  |  |  |                                            |      jsr 2b14 <finishFunction>
    1d64:	|  |  |  |                                            |      addq.l #4,sp
				fun = returnTo;
    1d66:	|  |  |  |                                            |      move.l 44(sp),80(sp)
				restartFunction (fun);
    1d6c:	|  |  |  |                                            |      move.l 80(sp),-(sp)
    1d70:	|  |  |  |                                            |      jsr 39d4 <restartFunction>
    1d76:	|  |  |  |                                            |      addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    1d78:	|  |  |  |  /-----------------------------------------|----- bra.w 2aec <continueFunction+0xe9e>
				finishFunction (fun);
    1d7c:	|  |  |  |  |                                         \----> move.l 80(sp),-(sp)
    1d80:	|  |  |  |  |                                                jsr 2b14 <finishFunction>
    1d86:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    1d88:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    1d8c:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    1d90:	|  |  |  |  +----------------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    1d94:	|  |  |  |  |                                                movea.l 80(sp),a0
    1d98:	|  |  |  |  |                                                move.l 28(a0),d0
    1d9c:	|  |  |  |  |                                                moveq #2,d1
    1d9e:	|  |  |  |  |                                                cmp.l d0,d1
    1da0:	|  |  |  |  |                                            /-- beq.s 1dac <continueFunction+0x15e>
    1da2:	|  |  |  |  |                                            |   moveq #4,d1
    1da4:	|  |  |  |  |                                            |   cmp.l d0,d1
    1da6:	|  |  |  |  |                                         /--|-- beq.s 1dfc <continueFunction+0x1ae>
    1da8:	|  |  |  |  |                                /--------|--|-- bra.w 1ee4 <continueFunction+0x296>
				case SVT_FUNC:
				pauseFunction (fun);		
    1dac:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    1db0:	|  |  |  |  |                                |        |      jsr 3992 <pauseFunction>
    1db6:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, fun -> stack,TRUE)) return FALSE;
    1db8:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    1dbc:	|  |  |  |  |                                |        |      move.l 24(a0),d1
    1dc0:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    1dc4:	|  |  |  |  |                                |        |      move.l 32(a0),d0
    1dc8:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    1dcc:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    1dce:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    1dd2:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    1dd6:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    1dd8:	|  |  |  |  |                                |        |      jsr 3bf4 <startNewFunctionNum>
    1dde:	|  |  |  |  |                                |        |      lea 20(sp),sp
    1de2:	|  |  |  |  |                                |        |      tst.l d0
    1de4:	|  |  |  |  |                                |        |  /-- bne.s 1dec <continueFunction+0x19e>
    1de6:	|  |  |  |  |                                |        |  |   clr.w d0
    1de8:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 2b0e <continueFunction+0xec0>
				fun = allRunningFunctions;
    1dec:	|  |  |  |  |                                |        |  \-> move.l 17ac4 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    1df4:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    1df8:	|  |  |  |  |                                |  /-----|----- bra.w 1ef8 <continueFunction+0x2aa>

				case SVT_BUILT:
					{
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    1dfc:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    1e00:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    1e04:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    1e08:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    1e0c:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    1e0e:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    1e10:	|  |  |  |  |                                |  |            jsr ea30 <callBuiltIn>
    1e16:	|  |  |  |  |                                |  |            lea 12(sp),sp
    1e1a:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    1e1e:	|  |  |  |  |                                |  |            moveq #5,d0
    1e20:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    1e24:	|  |  |  |  |                                |  |  /-------- bcs.w 1ee0 <continueFunction+0x292>
    1e28:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    1e2c:	|  |  |  |  |                                |  |  |         add.l d0,d0
    1e2e:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    1e30:	|  |  |  |  |                                |  |  |         adda.l #7740,a0
    1e36:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    1e38:	|  |  |  |  |                                |  |  |         jmp (1e3c <continueFunction+0x1ee>,pc,d0.w)
    1e3c:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    1e42:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    1e46:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    1e4c:	|  |  |  |  |                                |  |  |         move.l (-71,a1,d4.l:8),(1,a5,d0.w)
    1e52:	|  |  |  |  |                                |  |  |         .short 0x1d08
    1e54:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    1e56:	|  |  |  |  |                                |  |  |         clr.w d0
    1e58:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 2b0e <continueFunction+0xec0>

						case BR_PAUSE:
						pauseFunction (fun);
    1e5c:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    1e60:	|  |  |  |  |                                |  |  |         jsr 3992 <pauseFunction>
    1e66:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    1e68:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    1e6c:	|  |  |  |  |                                |  |  |  /----- bra.s 1ee2 <continueFunction+0x294>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    1e6e:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    1e72:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    1e76:	|  |  |  |  |                                |  |  |  +----- bra.s 1ee2 <continueFunction+0x294>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    1e78:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    1e7c:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    1e82:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    1e84:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    1e88:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    1e8c:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    1e90:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    1e92:	|  |  |  |  |                                |  |  |  |      jsr 10602 <setVariable>
    1e98:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    1e9c:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    1ea0:	|  |  |  |  |                                |  |  |  |      jsr 3992 <pauseFunction>
    1ea6:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    1ea8:	|  |  |  |  |                                |  |  |  |      move.l 17af8 <noStack>,d1
    1eae:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    1eb2:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    1eb4:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    1eb6:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    1eba:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    1ebc:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    1ebe:	|  |  |  |  |                                |  |  |  |      jsr 3bf4 <startNewFunctionNum>
    1ec4:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    1ec8:	|  |  |  |  |                                |  |  |  |      tst.l d0
    1eca:	|  |  |  |  |                                |  |  |  |  /-- bne.s 1ed2 <continueFunction+0x284>
    1ecc:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    1ece:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 2b0e <continueFunction+0xec0>
							fun = allRunningFunctions;
    1ed2:	|  |  |  |  |                                |  |  |  |  \-> move.l 17ac4 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    1eda:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    1ede:	|  |  |  |  |                                |  |  |  +----- bra.s 1ee2 <continueFunction+0x294>

						default:
						break;
    1ee0:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    1ee2:	|  |  |  |  |                                |  +-----\----X bra.s 1ef8 <continueFunction+0x2aa>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    1ee4:	|  |  |  |  |                                \--|----------> pea 12bfc <PutChar+0x42c>
    1eea:	|  |  |  |  |                                   |            jsr 11d08 <KPrintF>
    1ef0:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    1ef2:	|  |  |  |  |                                   |            clr.w d0
    1ef4:	|  +--|--|--|-----------------------------------|----------- bra.w 2b0e <continueFunction+0xec0>
			}
			break;
    1ef8:	|  |  |  |  +-----------------------------------\----------X bra.w 2aec <continueFunction+0xe9e>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    1efc:	|  |  |  |  |                                                moveq #28,d0
    1efe:	|  |  |  |  |                                                add.l 80(sp),d0
    1f02:	|  |  |  |  |                                                clr.l -(sp)
    1f04:	|  |  |  |  |                                                clr.l -(sp)
    1f06:	|  |  |  |  |                                                move.l d0,-(sp)
    1f08:	|  |  |  |  |                                                jsr 10602 <setVariable>
    1f0e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f12:	|  |  |  |  +----------------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    1f16:	|  |  |  |  |                                                move.l 68(sp),d1
    1f1a:	|  |  |  |  |                                                moveq #28,d0
    1f1c:	|  |  |  |  |                                                add.l 80(sp),d0
    1f20:	|  |  |  |  |                                                move.l d1,-(sp)
    1f22:	|  |  |  |  |                                                pea 5 <_start+0x5>
    1f26:	|  |  |  |  |                                                move.l d0,-(sp)
    1f28:	|  |  |  |  |                                                jsr 10602 <setVariable>
    1f2e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f32:	|  |  |  |  +----------------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    1f36:	|  |  |  |  |                                                move.l 68(sp),d1
    1f3a:	|  |  |  |  |                                                moveq #28,d0
    1f3c:	|  |  |  |  |                                                add.l 80(sp),d0
    1f40:	|  |  |  |  |                                                move.l d1,-(sp)
    1f42:	|  |  |  |  |                                                pea 1 <_start+0x1>
    1f46:	|  |  |  |  |                                                move.l d0,-(sp)
    1f48:	|  |  |  |  |                                                jsr 10602 <setVariable>
    1f4e:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    1f52:	|  |  |  |  +----------------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    1f56:	|  |  |  |  |                                                moveq #28,d0
    1f58:	|  |  |  |  |                                                add.l 80(sp),d0
    1f5c:	|  |  |  |  |                                                movea.l 80(sp),a0
    1f60:	|  |  |  |  |                                                movea.l 20(a0),a0
    1f64:	|  |  |  |  |                                                move.l 68(sp),d1
    1f68:	|  |  |  |  |                                                lsl.l #3,d1
    1f6a:	|  |  |  |  |                                                add.l a0,d1
    1f6c:	|  |  |  |  |                                                move.l d0,-(sp)
    1f6e:	|  |  |  |  |                                                move.l d1,-(sp)
    1f70:	|  |  |  |  |                                                jsr 101ec <copyVariable>
    1f76:	|  |  |  |  |                                                addq.l #8,sp
    1f78:	|  |  |  |  |                                                tst.w d0
    1f7a:	|  |  |  |  |  /-------------------------------------------- bne.w 2aca <continueFunction+0xe7c>
    1f7e:	|  |  |  |  |  |                                             clr.w d0
    1f80:	|  +--|--|--|--|-------------------------------------------- bra.w 2b0e <continueFunction+0xec0>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    1f84:	|  |  |  |  |  |                                             moveq #28,d0
    1f86:	|  |  |  |  |  |                                             add.l 80(sp),d0
    1f8a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1f8c:	|  |  |  |  |  |                                             jsr 10272 <getBoolean>
    1f92:	|  |  |  |  |  |                                             addq.l #4,sp
    1f94:	|  |  |  |  |  |                                             tst.w d0
    1f96:	|  |  |  |  |  |                                      /----- beq.s 1fb2 <continueFunction+0x364>
    1f98:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    1f9c:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    1fa0:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    1fa2:	|  |  |  |  |  |                                      |      jsr 10272 <getBoolean>
    1fa8:	|  |  |  |  |  |                                      |      addq.l #4,sp
    1faa:	|  |  |  |  |  |                                      |      tst.w d0
    1fac:	|  |  |  |  |  |                                      +----- beq.s 1fb2 <continueFunction+0x364>
    1fae:	|  |  |  |  |  |                                      |      moveq #1,d0
    1fb0:	|  |  |  |  |  |                                      |  /-- bra.s 1fb4 <continueFunction+0x366>
    1fb2:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    1fb4:	|  |  |  |  |  |                                         \-> moveq #28,d1
    1fb6:	|  |  |  |  |  |                                             add.l 80(sp),d1
    1fba:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1fbc:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    1fc0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    1fc2:	|  |  |  |  |  |                                             jsr 10602 <setVariable>
    1fc8:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (fun -> stack);
    1fcc:	|  |  |  |  |  |                                             movea.l 80(sp),a0
    1fd0:	|  |  |  |  |  |                                             move.l 24(a0),d0
    1fd4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1fd6:	|  |  |  |  |  |                                             jsr 10694 <trimStack>
    1fdc:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    1fde:	|  |  |  |  +--|-------------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    1fe2:	|  |  |  |  |  |                                             moveq #28,d0
    1fe4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    1fe8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    1fea:	|  |  |  |  |  |                                             jsr 10272 <getBoolean>
    1ff0:	|  |  |  |  |  |                                             addq.l #4,sp
    1ff2:	|  |  |  |  |  |                                             tst.w d0
    1ff4:	|  |  |  |  |  |                                         /-- bne.s 200c <continueFunction+0x3be>
    1ff6:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    1ffa:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    1ffe:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    2000:	|  |  |  |  |  |                                         |   jsr 10272 <getBoolean>
    2006:	|  |  |  |  |  |                                         |   addq.l #4,sp
    2008:	|  |  |  |  |  |                                         |   tst.w d0
    200a:	|  |  |  |  |  |                                      /--|-- beq.s 2010 <continueFunction+0x3c2>
    200c:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    200e:	|  |  |  |  |  |                                      |  /-- bra.s 2012 <continueFunction+0x3c4>
    2010:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    2012:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2014:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2018:	|  |  |  |  |  |                                             move.l d0,-(sp)
    201a:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    201e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2020:	|  |  |  |  |  |                                             jsr 10602 <setVariable>
    2026:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (fun -> stack);
    202a:	|  |  |  |  |  |                                             movea.l 80(sp),a0
    202e:	|  |  |  |  |  |                                             move.l 24(a0),d0
    2032:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2034:	|  |  |  |  |  |                                             jsr 10694 <trimStack>
    203a:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    203c:	|  |  |  |  +--|-------------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_LOAD_FUNC:
			setVariable (&fun -> reg, SVT_FUNC, param);
    2040:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2044:	|  |  |  |  |  |                                             moveq #28,d0
    2046:	|  |  |  |  |  |                                             add.l 80(sp),d0
    204a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    204c:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    2050:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2052:	|  |  |  |  |  |                                             jsr 10602 <setVariable>
    2058:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    205c:	|  |  |  |  +--|-------------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    2060:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2064:	|  |  |  |  |  |                                             moveq #28,d0
    2066:	|  |  |  |  |  |                                             add.l 80(sp),d0
    206a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    206c:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    2070:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2072:	|  |  |  |  |  |                                             jsr 10602 <setVariable>
    2078:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    207c:	|  |  |  |  +--|-------------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    2080:	|  |  |  |  |  |                                             move.l 68(sp),d1
    2084:	|  |  |  |  |  |                                             moveq #28,d0
    2086:	|  |  |  |  |  |                                             add.l 80(sp),d0
    208a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    208c:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    2090:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2092:	|  |  |  |  |  |                                             jsr 10602 <setVariable>
    2098:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    209c:	|  |  |  |  +--|-------------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_UNREG:
			if (dialogValue != 1) {
    20a0:	|  |  |  |  |  |                                             move.l 17a34 <dialogValue>,d0
    20a6:	|  |  |  |  |  |                                             moveq #1,d1
    20a8:	|  |  |  |  |  |                                             cmp.l d0,d1
    20aa:	|  |  |  |  |  |  /----------------------------------------- beq.w 2ace <continueFunction+0xe80>
				KPrintF(ERROR_HACKER);
    20ae:	|  |  |  |  |  |  |                                          pea 12c11 <PutChar+0x441>
    20b4:	|  |  |  |  |  |  |                                          jsr 11d08 <KPrintF>
    20ba:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    20bc:	|  |  |  |  |  |  |                                          clr.w d0
    20be:	|  +--|--|--|--|--|----------------------------------------- bra.w 2b0e <continueFunction+0xec0>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    20c2:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    20c6:	|  |  |  |  |  |  |                                          moveq #28,d0
    20c8:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    20cc:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    20ce:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    20d0:	|  |  |  |  |  |  |                                          jsr fdb6 <loadStringToVar>
    20d6:	|  |  |  |  |  |  |                                          addq.l #8,sp
    20d8:	|  |  |  |  |  |  |                                          tst.w d0
    20da:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 2ad2 <continueFunction+0xe84>
					return FALSE;
    20de:	|  |  |  |  |  |  |  |                                       clr.w d0
    20e0:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 2b0e <continueFunction+0xec0>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    20e4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    20e8:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    20ec:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    20ee:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    20f0:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    20f2:	|  |  |  |  |  |  |  |                                /----- beq.s 2152 <continueFunction+0x504>
    20f4:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    20f6:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    20f8:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 22e8 <continueFunction+0x69a>
    20fc:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    20fe:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 210a <continueFunction+0x4bc>
    2100:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    2102:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    2104:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 2152 <continueFunction+0x504>
    2106:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 22e8 <continueFunction+0x69a>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    210a:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    210c:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    2110:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 213e <continueFunction+0x4f0>
					setVariable (&fun -> reg, SVT_NULL, 0);
    2112:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    2114:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    2118:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    211a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    211c:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    211e:	|  |  |  |  |  |  |  |              |                 |  |   jsr 10602 <setVariable>
    2124:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (fun -> stack);
    2128:	|  |  |  |  |  |  |  |              |                 |  |   movea.l 80(sp),a0
    212c:	|  |  |  |  |  |  |  |              |                 |  |   move.l 24(a0),d0
    2130:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    2132:	|  |  |  |  |  |  |  |              |                 |  |   jsr 10694 <trimStack>
    2138:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    213a:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 22fe <continueFunction+0x6b0>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    213e:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 12c52 <PutChar+0x482>
    2144:	|  |  |  |  |  |  |  |              |  |              |      jsr 11d08 <KPrintF>
    214a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    214c:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    214e:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 2b0e <continueFunction+0xec0>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    2152:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    2156:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    215a:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    215e:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2160:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2176 <continueFunction+0x528>
					KPrintF((ERROR_INDEX_EMPTY));
    2162:	|  |  |  |  |  |  |  |              |  |                 |   pea 12c8e <PutChar+0x4be>
    2168:	|  |  |  |  |  |  |  |              |  |                 |   jsr 11d08 <KPrintF>
    216e:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    2170:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2172:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 2b0e <continueFunction+0xec0>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2176:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    2178:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    217c:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    217e:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    2182:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    2186:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    2188:	|  |  |  |  |  |  |  |              |  |                     jsr fd32 <getValueType>
    218e:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    2192:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    2194:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 219c <continueFunction+0x54e>
    2196:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2198:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 2b0e <continueFunction+0xec0>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    219c:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    21a0:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    21a4:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    21a6:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    21a8:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    21aa:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 21cc <continueFunction+0x57e>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    21ac:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    21b0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    21b2:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    21b6:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    21ba:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    21be:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    21c0:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    21c2:	|  |  |  |  |  |  |  |              |  |                 |   jsr f9bc <fastArrayGetByIndex>
    21c8:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    21ca:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 21ec <continueFunction+0x59e>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    21cc:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    21d0:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    21d2:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    21d6:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    21da:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    21de:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    21e0:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    21e2:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    21e4:	|  |  |  |  |  |  |  |              |  |              |      jsr 10624 <stackGetByIndex>
    21ea:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    21ec:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (fun -> stack);
    21f0:	|  |  |  |  |  |  |  |              |  |                     movea.l 80(sp),a0
    21f4:	|  |  |  |  |  |  |  |              |  |                     move.l 24(a0),d0
    21f8:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    21fa:	|  |  |  |  |  |  |  |              |  |                     jsr 10694 <trimStack>
    2200:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    2202:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    2206:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2222 <continueFunction+0x5d4>
						setVariable (&fun -> reg, SVT_NULL, 0);
    2208:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    220a:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    220e:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2210:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    2212:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2214:	|  |  |  |  |  |  |  |              |  |                 |   jsr 10602 <setVariable>
    221a:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    221e:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 22fc <continueFunction+0x6ae>
    2222:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    2224:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    2228:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 2236 <continueFunction+0x5e8>
    222a:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    222c:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    2230:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 2280 <continueFunction+0x632>
    2232:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 22c8 <continueFunction+0x67a>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2236:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    223a:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    223e:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    2242:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    2244:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr fd32 <getValueType>
    224a:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    224e:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    2250:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 2258 <continueFunction+0x60a>
    2252:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    2254:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 22e2 <continueFunction+0x694>
							setVariable (&fun -> reg, SVT_INT, ii);
    2258:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    225a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    225c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2260:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2262:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    2266:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    2268:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 10602 <setVariable>
    226e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    2272:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    2274:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    2276:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    227a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    227e:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 22e6 <continueFunction+0x698>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2280:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    2284:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2288:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    228c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    228e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr fd32 <getValueType>
    2294:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    2298:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    229a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 22a0 <continueFunction+0x652>
    229c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    229e:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 22e2 <continueFunction+0x694>
							setVariable (&fun -> reg, SVT_INT, ii);
    22a0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    22a2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    22a4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    22a8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    22aa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    22ae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    22b0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 10602 <setVariable>
    22b6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    22ba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    22bc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    22be:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    22c2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    22c6:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 22e6 <continueFunction+0x698>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    22c8:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    22ca:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    22ce:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    22d0:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    22d4:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 101ec <copyVariable>
    22da:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    22dc:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    22de:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 22fc <continueFunction+0x6ae>
    22e0:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    22e2:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 2b0e <continueFunction+0xec0>
				break;
    22e6:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 22fc <continueFunction+0x6ae>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    22e8:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 12cac <PutChar+0x4dc>
    22ee:	|  |  |  |  |  |  |  |                 |  |                  jsr 11d08 <KPrintF>
    22f4:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    22f6:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    22f8:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 2b0e <continueFunction+0xec0>
				break;
    22fc:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    22fe:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 2aec <continueFunction+0xe9e>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    2302:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2306:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    230a:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    230c:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    230e:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2310:	|  |  |  |  |  |  |  |                                   /-- beq.s 231e <continueFunction+0x6d0>
    2312:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    2314:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    2316:	|  |  |  |  |  |  |  |                                /--|-- beq.w 23ce <continueFunction+0x780>
    231a:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 242c <continueFunction+0x7de>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    231e:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    2322:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2326:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    232a:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    232c:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2342 <continueFunction+0x6f4>
					KPrintF((ERROR_INDEX_EMPTY));
    232e:	|  |  |  |  |  |  |  |                             |  |  |   pea 12c8e <PutChar+0x4be>
    2334:	|  |  |  |  |  |  |  |                             |  |  |   jsr 11d08 <KPrintF>
    233a:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    233c:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    233e:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b0e <continueFunction+0xec0>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2342:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    2344:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    2348:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    234a:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    234e:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    2352:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    2354:	|  |  |  |  |  |  |  |                             |  |      jsr fd32 <getValueType>
    235a:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    235e:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2360:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2368 <continueFunction+0x71a>
    2362:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2364:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b0e <continueFunction+0xec0>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    2368:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    236c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2370:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    2374:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    2376:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    237a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    237c:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    2380:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2384:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    2388:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    238a:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    238c:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    238e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2390:	|  |  |  |  |  |  |  |                             |  |      jsr 3bb0 <stackSetByIndex>
    2396:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    239a:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    239c:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 23a4 <continueFunction+0x756>
						return FALSE;
    239e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    23a0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2b0e <continueFunction+0xec0>
					}
					trimStack (fun -> stack);
    23a4:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    23a8:	|  |  |  |  |  |  |  |                             |  |      move.l 24(a0),d0
    23ac:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    23ae:	|  |  |  |  |  |  |  |                             |  |      jsr 10694 <trimStack>
    23b4:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (fun -> stack);
    23b6:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    23ba:	|  |  |  |  |  |  |  |                             |  |      move.l 24(a0),d0
    23be:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    23c0:	|  |  |  |  |  |  |  |                             |  |      jsr 10694 <trimStack>
    23c6:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    23c8:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    23ca:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 2aec <continueFunction+0xe9e>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    23ce:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    23d0:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    23d4:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    23d6:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    23da:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    23de:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    23e0:	|  |  |  |  |  |  |  |                             |         jsr fd32 <getValueType>
    23e6:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    23ea:	|  |  |  |  |  |  |  |                             |         tst.w d0
    23ec:	|  |  |  |  |  |  |  |                             |     /-- bne.s 23f4 <continueFunction+0x7a6>
    23ee:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    23f0:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 2b0e <continueFunction+0xec0>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    23f4:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    23f8:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    23fa:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    23fe:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    2402:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    2406:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    2408:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    240a:	|  |  |  |  |  |  |  |                             |         jsr f9bc <fastArrayGetByIndex>
    2410:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    2412:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    2416:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2426 <continueFunction+0x7d8>
    2418:	|  |  |  |  |  |  |  |                             |     |   pea 12cd0 <PutChar+0x500>
    241e:	|  |  |  |  |  |  |  |                             |     |   jsr 11d08 <KPrintF>
    2424:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    2426:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    2428:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 2b0e <continueFunction+0xec0>
				KPrintF((ERROR_INDEX_NONSTACK));
    242c:	|  |  |  |  |  |  |  |                             \-------> pea 12cac <PutChar+0x4dc>
    2432:	|  |  |  |  |  |  |  |                                       jsr 11d08 <KPrintF>
    2438:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    243a:	|  |  |  |  |  |  |  |                                       clr.w d0
    243c:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 2b0e <continueFunction+0xec0>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2440:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2444:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2448:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    244c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    244e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2450:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2452:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2456:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    245a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    245c:	|  |  |  |  |  |  |  |                                       jsr fd32 <getValueType>
    2462:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2466:	|  |  |  |  |  |  |  |                                       tst.w d0
    2468:	|  |  |  |  |  |  |  |                                   /-- bne.s 2470 <continueFunction+0x822>
    246a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    246c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b0e <continueFunction+0xec0>
				setVariable (&fun -> reg, SVT_INT, ii);
    2470:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2474:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2476:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    247a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    247c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2480:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2482:	|  |  |  |  |  |  |  |                                       jsr 10602 <setVariable>
    2488:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    248c:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    2490:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2492:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2494:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2498:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    249c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    24a0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    24a2:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    24a4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    24a6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24aa:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24ac:	|  |  |  |  |  |  |  |                                       jsr 10602 <setVariable>
    24b2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    24b6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    24ba:	|  |  |  |  |  |  |  |                                       move.l 17ada <globalVars>,d1
    24c0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    24c4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    24c6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    24c8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24ca:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24ce:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    24d2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    24d4:	|  |  |  |  |  |  |  |                                       jsr fd32 <getValueType>
    24da:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    24de:	|  |  |  |  |  |  |  |                                       tst.w d0
    24e0:	|  |  |  |  |  |  |  |                                   /-- bne.s 24e8 <continueFunction+0x89a>
    24e2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    24e4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b0e <continueFunction+0xec0>
				setVariable (&fun -> reg, SVT_INT, ii);
    24e8:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    24ec:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    24ee:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    24f2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    24f4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    24f8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    24fa:	|  |  |  |  |  |  |  |                                       jsr 10602 <setVariable>
    2500:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    2504:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    2508:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    250a:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    250c:	|  |  |  |  |  |  |  |                                       movea.l 17ada <globalVars>,a0
    2512:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2516:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2518:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    251a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    251c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2520:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2522:	|  |  |  |  |  |  |  |                                       jsr 10602 <setVariable>
    2528:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    252c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    2530:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2534:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2538:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    253c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    253e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2540:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2542:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2546:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    254a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    254c:	|  |  |  |  |  |  |  |                                       jsr fd32 <getValueType>
    2552:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2556:	|  |  |  |  |  |  |  |                                       tst.w d0
    2558:	|  |  |  |  |  |  |  |                                   /-- bne.s 2560 <continueFunction+0x912>
    255a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    255c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b0e <continueFunction+0xec0>
				setVariable (&fun -> reg, SVT_INT, ii);
    2560:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2564:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2566:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    256a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    256c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2570:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2572:	|  |  |  |  |  |  |  |                                       jsr 10602 <setVariable>
    2578:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    257c:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    2580:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2582:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2584:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2588:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    258c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2590:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2592:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2594:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2596:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    259a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    259c:	|  |  |  |  |  |  |  |                                       jsr 10602 <setVariable>
    25a2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    25a6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    25aa:	|  |  |  |  |  |  |  |                                       move.l 17ada <globalVars>,d1
    25b0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    25b4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    25b6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    25b8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    25ba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    25be:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    25c2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    25c4:	|  |  |  |  |  |  |  |                                       jsr fd32 <getValueType>
    25ca:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    25ce:	|  |  |  |  |  |  |  |                                       tst.w d0
    25d0:	|  |  |  |  |  |  |  |                                   /-- bne.s 25d8 <continueFunction+0x98a>
    25d2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    25d4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2b0e <continueFunction+0xec0>
				setVariable (&fun -> reg, SVT_INT, ii);
    25d8:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    25dc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    25de:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    25e2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    25e4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    25e8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    25ea:	|  |  |  |  |  |  |  |                                       jsr 10602 <setVariable>
    25f0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    25f4:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    25f8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    25fa:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    25fc:	|  |  |  |  |  |  |  |                                       movea.l 17ada <globalVars>,a0
    2602:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2606:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2608:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    260a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    260c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2610:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2612:	|  |  |  |  |  |  |  |                                       jsr 10602 <setVariable>
    2618:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    261c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    2620:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2624:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    2628:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    262c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    262e:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    2630:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2632:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2636:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2638:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    263a:	|  |  |  |  |  |  |  |                                       jsr 101ec <copyVariable>
    2640:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    2642:	|  |  |  |  |  |  |  |                                       tst.w d0
    2644:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 2ad6 <continueFunction+0xe88>
    2648:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    264a:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 2b0e <continueFunction+0xec0>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    264e:	|  |  |  |  |  |  |  |  |                                    move.l 17ada <globalVars>,d1
    2654:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    2658:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    265a:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    265c:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    265e:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    2662:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    2664:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    2666:	|  |  |  |  |  |  |  |  |                                    jsr 101ec <copyVariable>
    266c:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    266e:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    2670:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 2ada <continueFunction+0xe8c>
    2674:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    2676:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 2b0e <continueFunction+0xec0>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    267a:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    267c:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    2680:	|  |  |  |  |  |  |  |  |  |                                 movea.l 17ada <globalVars>,a0
    2686:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    268a:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    268c:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    268e:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    2690:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    2692:	|  |  |  |  |  |  |  |  |  |                                 jsr 101ec <copyVariable>
    2698:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    269a:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    269c:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 2ade <continueFunction+0xe90>
    26a0:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    26a2:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 2b0e <continueFunction+0xec0>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    26a6:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    26a8:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    26ac:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    26ae:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    26b2:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    26b4:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    26b6:	|  |  |  |  |  |  |  |  |  |  |                              jsr f56e <addVarToStack>
    26bc:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    26be:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    26c0:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 2ae2 <continueFunction+0xe94>
    26c4:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    26c6:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 2b0e <continueFunction+0xec0>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    26ca:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    26cc:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    26d0:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    26d2:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    26d6:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    26d8:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    26da:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr f5f4 <addVarToStackQuick>
    26e0:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    26e2:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    26e4:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 2ae6 <continueFunction+0xe98>
    26e8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    26ea:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 2b0e <continueFunction+0xec0>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    26ee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    26f0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    26f4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    26f6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 10272 <getBoolean>
    26fc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    26fe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2700:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    2702:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    2704:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    2706:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    2708:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    270a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    270e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    2710:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    2714:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2716:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 10602 <setVariable>
    271c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    2720:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    2724:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2726:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    272a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    272c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 10272 <getBoolean>
    2732:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2734:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2736:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 2aea <continueFunction+0xe9c>
				advanceNow = FALSE;
    273a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    273e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2742:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    2748:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 2aea <continueFunction+0xe9c>

			case SLU_BRANCH:
			advanceNow = FALSE;
    274c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    2750:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2754:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    275a:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 2aec <continueFunction+0xe9e>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    275e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2760:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2764:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2766:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    276a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    276e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    2770:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr fd32 <getValueType>
    2776:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    277a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    277c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 2784 <continueFunction+0xb36>
    277e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    2780:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 2b0e <continueFunction+0xec0>
				setVariable (&fun -> reg, SVT_INT, -i);
    2784:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    2788:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    278a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    278c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    278e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2792:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    2794:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2798:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    279a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 10602 <setVariable>
    27a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    27a4:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 2aec <continueFunction+0xe9e>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    27a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    27ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    27b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 2aa2 <continueFunction+0xe54>
    27b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    27b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    27ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 283a <continueFunction+0xbec>
    27bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    27be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    27c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 2886 <continueFunction+0xc38>
    27c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    27c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    27cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 27da <continueFunction+0xb8c>
    27ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    27d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    27d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 280a <continueFunction+0xbbc>
    27d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 2886 <continueFunction+0xc38>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    27da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    27dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    27e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    27e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    27e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    27ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    27ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr f668 <addVariablesInSecond>
    27f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (fun -> stack);
    27f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    27f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d0
    27fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    27fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 10694 <trimStack>
    2804:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    2806:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 2ab6 <continueFunction+0xe68>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    280a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    280c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2810:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    2814:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    2818:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    281a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    281c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr f726 <compareVariablesInSecond>
    2822:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (fun -> stack);
    2824:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    2828:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d0
    282c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    282e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 10694 <trimStack>
    2834:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    2836:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 2ab6 <continueFunction+0xe68>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    283a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    283c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2840:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2844:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    2848:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    284a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    284c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr f726 <compareVariablesInSecond>
    2852:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (fun -> stack);
    2854:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2858:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d0
    285c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    285e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 10694 <trimStack>
    2864:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    2866:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    286a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    286e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    2870:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    2872:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    2874:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    287a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    287e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    2882:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 2ab6 <continueFunction+0xe68>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    2886:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    288a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    288e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2890:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2894:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    2898:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    289a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr fd32 <getValueType>
    28a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    28a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    28a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 28ae <continueFunction+0xc60>
    28a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    28aa:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 2b0e <continueFunction+0xec0>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    28ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    28b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    28b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    28b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    28ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    28be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    28c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr fd32 <getValueType>
    28c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    28ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    28cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 28d4 <continueFunction+0xc86>
    28ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    28d0:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 2b0e <continueFunction+0xec0>
					trimStack (fun -> stack);
    28d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> movea.l 80(sp),a0
    28d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    28dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    28de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10694 <trimStack>
    28e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    28e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    28e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    28ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    28ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    28f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 2ab4 <continueFunction+0xe66>
    28f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    28f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    28f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #10500,a0
    28fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    2900:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (2904 <continueFunction+0xcb6>,pc,d0.w)
    2904:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    2908:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    290a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2912:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    2914:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    291c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2924:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    292c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    2934:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2938:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    293c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    293e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2940:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 126ba <__mulsi3>
    2946:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2948:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    294a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    294c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2950:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2952:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2956:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2958:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 10602 <setVariable>
    295e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2962:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2ab6 <continueFunction+0xe68>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    2966:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    296a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    296e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    2970:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2972:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2976:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2978:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    297c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    297e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 10602 <setVariable>
    2984:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2988:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2ab6 <continueFunction+0xe68>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    298c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2990:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2994:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2996:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2998:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12766 <__modsi3>
    299e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    29a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    29a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    29a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    29a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    29ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 10602 <setVariable>
    29b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    29ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2ab6 <continueFunction+0xe68>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    29be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    29c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    29c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 12738 <__divsi3>
    29d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    29d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    29d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    29d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    29da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    29dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    29e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    29e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 10602 <setVariable>
    29e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    29ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2ab6 <continueFunction+0xe68>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    29f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    29f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    29f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    29fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    29fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    29fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2a00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2a02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2a04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 10602 <setVariable>
    2a16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2ab6 <continueFunction+0xe68>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    2a1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2a22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2a26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2a28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    2a2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2a2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2a2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2a30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2a32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 10602 <setVariable>
    2a44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2ab6 <continueFunction+0xe68>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    2a4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2a4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2a52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2a54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    2a56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2a58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2a5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2a5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2a5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 10602 <setVariable>
    2a70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2a74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2ab6 <continueFunction+0xe68>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    2a76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2a7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2a7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2a80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    2a82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2a84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2a86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2a88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2a8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2a8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2a90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2a94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2a96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 10602 <setVariable>
    2a9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2aa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2ab6 <continueFunction+0xe68>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    2aa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 12cf1 <PutChar+0x521>
    2aa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 11d08 <KPrintF>
    2aae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    2ab0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    2ab2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 2b0e <continueFunction+0xec0>
						break;
    2ab4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    2ab6:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 2aec <continueFunction+0xe9e>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    2ab8:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 12d09 <PutChar+0x539>
    2abe:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 11d08 <KPrintF>
    2ac4:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    2ac6:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    2ac8:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 2b0e <continueFunction+0xec0>
			break;
    2aca:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    2acc:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 2aec <continueFunction+0xe9e>
			break;
    2ace:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    2ad0:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 2aec <continueFunction+0xe9e>
			break;
    2ad2:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    2ad4:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 2aec <continueFunction+0xe9e>
			break;
    2ad6:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    2ad8:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 2aec <continueFunction+0xe9e>
			break;
    2ada:	|  |  |     |              \--|--|--|--|-------------------> nop
    2adc:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 2aec <continueFunction+0xe9e>
			break;
    2ade:	|  |  |     |                 \--|--|--|-------------------> nop
    2ae0:	|  |  |     +--------------------|--|--|-------------------- bra.s 2aec <continueFunction+0xe9e>
			break;
    2ae2:	|  |  |     |                    \--|--|-------------------> nop
    2ae4:	|  |  |     +-----------------------|--|-------------------- bra.s 2aec <continueFunction+0xe9e>
			break;
    2ae6:	|  |  |     |                       \--|-------------------> nop
    2ae8:	|  |  |     +--------------------------|-------------------- bra.s 2aec <continueFunction+0xe9e>
			break;
    2aea:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    2aec:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    2af0:	+--|--|----------------------------------------------------- beq.s 2b04 <continueFunction+0xeb6>
    2af2:	|  |  |                                                      movea.l 80(sp),a0
    2af6:	|  |  |                                                      move.l 36(a0),d0
    2afa:	|  |  |                                                      addq.l #1,d0
    2afc:	|  |  |                                                      movea.l 80(sp),a0
    2b00:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    2b04:	\--|--|----------------------------------------------------> tst.w 74(sp)
    2b08:	   |  \----------------------------------------------------- bne.w 1c76 <continueFunction+0x28>

	}
	return TRUE;
    2b0c:	   |                                                         moveq #1,d0
}
    2b0e:	   \-------------------------------------------------------> lea 76(sp),sp
    2b12:	                                                             rts

00002b14 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    2b14:	       lea -16(sp),sp
    2b18:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    2b1a:	       move.l 24(sp),-(sp)
    2b1e:	       jsr 3992 <pauseFunction>
    2b24:	       addq.l #4,sp
	if (fun -> stack) KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    2b26:	       movea.l 24(sp),a0
    2b2a:	       move.l 24(a0),d0
    2b2e:	   /-- beq.s 2b44 <finishFunction+0x30>
    2b30:	   |   pea 12d35 <PutChar+0x565>
    2b36:	   |   pea 12d62 <PutChar+0x592>
    2b3c:	   |   jsr 11d08 <KPrintF>
    2b42:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    2b44:	   \-> movea.l 24(sp),a0
    2b48:	       move.l 4(a0),12(sp)
    2b4e:	       move.l 17b28 <SysBase>,d0
    2b54:	       movea.l d0,a6
    2b56:	       movea.l 12(sp),a1
    2b5a:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2b5e:	       clr.l 16(sp)
    2b62:	   /-- bra.s 2b82 <finishFunction+0x6e>
    2b64:	/--|-> movea.l 24(sp),a0
    2b68:	|  |   move.l 20(a0),d1
    2b6c:	|  |   move.l 16(sp),d0
    2b70:	|  |   lsl.l #3,d0
    2b72:	|  |   add.l d1,d0
    2b74:	|  |   move.l d0,-(sp)
    2b76:	|  |   jsr ff80 <unlinkVar>
    2b7c:	|  |   addq.l #4,sp
    2b7e:	|  |   addq.l #1,16(sp)
    2b82:	|  \-> movea.l 24(sp),a0
    2b86:	|      move.l 8(a0),d0
    2b8a:	|      cmp.l 16(sp),d0
    2b8e:	\----- bgt.s 2b64 <finishFunction+0x50>
	FreeVec(fun -> localVars);
    2b90:	       movea.l 24(sp),a0
    2b94:	       move.l 20(a0),8(sp)
    2b9a:	       move.l 17b28 <SysBase>,d0
    2ba0:	       movea.l d0,a6
    2ba2:	       movea.l 8(sp),a1
    2ba6:	       jsr -690(a6)
	unlinkVar (&fun -> reg);
    2baa:	       moveq #28,d0
    2bac:	       add.l 24(sp),d0
    2bb0:	       move.l d0,-(sp)
    2bb2:	       jsr ff80 <unlinkVar>
    2bb8:	       addq.l #4,sp
	FreeVec(fun);
    2bba:	       move.l 24(sp),4(sp)
    2bc0:	       move.l 17b28 <SysBase>,d0
    2bc6:	       movea.l d0,a6
    2bc8:	       movea.l 4(sp),a1
    2bcc:	       jsr -690(a6)
	fun = NULL;
    2bd0:	       clr.l 24(sp)
}
    2bd4:	       nop
    2bd6:	       movea.l (sp)+,a6
    2bd8:	       lea 16(sp),sp
    2bdc:	       rts

00002bde <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    2bde:	jsr 39ee <runSludge>
}
    2be4:	rts

00002be6 <initSludge>:

BOOL initSludge (char * filename) {
    2be6:	             lea -296(sp),sp
    2bea:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    2bee:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    2bf2:	             jsr 681c <makeNullAnim>
    2bf8:	             move.l d0,17a14 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    2bfe:	             pea 17ad6 <gameVersion>
    2c04:	             pea 12d72 <PutChar+0x5a2>
    2c0a:	             pea 45 <_start+0x45>
    2c0e:	             pea 47 <_start+0x47>
    2c12:	             move.l 336(sp),-(sp)
    2c16:	             jsr 3622 <openAndVerify>
    2c1c:	             lea 20(sp),sp
    2c20:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    2c24:	         /-- bne.s 2c2c <initSludge+0x46>
    2c26:	         |   clr.w d0
    2c28:	/--------|-- bra.w 334a <initSludge+0x764>
	if (FGetC (fp)) {
    2c2c:	|        \-> move.l 292(sp),288(sp)
    2c32:	|            move.l 17b30 <DOSBase>,d0
    2c38:	|            movea.l d0,a6
    2c3a:	|            move.l 288(sp),d1
    2c3e:	|            jsr -306(a6)
    2c42:	|            move.l d0,284(sp)
    2c46:	|            move.l 284(sp),d0
    2c4a:	|  /-------- beq.w 2df0 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    2c4e:	|  |         move.l 292(sp),-(sp)
    2c52:	|  |         jsr 6bc <get2bytes>
    2c58:	|  |         addq.l #4,sp
    2c5a:	|  |         move.l d0,17afc <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    2c60:	|  |         move.l 17afc <numBIFNames>,d0
    2c66:	|  |         move.l d0,280(sp)
    2c6a:	|  |         clr.l 276(sp)
    2c6e:	|  |         move.l 17b28 <SysBase>,d0
    2c74:	|  |         movea.l d0,a6
    2c76:	|  |         move.l 280(sp),d0
    2c7a:	|  |         move.l 276(sp),d1
    2c7e:	|  |         jsr -684(a6)
    2c82:	|  |         move.l d0,272(sp)
    2c86:	|  |         move.l 272(sp),d0
    2c8a:	|  |         move.l d0,17abc <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    2c90:	|  |         move.l 17abc <allBIFNames>,d0
    2c96:	|  |     /-- bne.s 2c9e <initSludge+0xb8>
    2c98:	|  |     |   clr.w d0
    2c9a:	+--|-----|-- bra.w 334a <initSludge+0x764>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    2c9e:	|  |     \-> clr.l 308(sp)
    2ca2:	|  |     /-- bra.s 2cc8 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    2ca4:	|  |  /--|-> move.l 17abc <allBIFNames>,d1
    2caa:	|  |  |  |   move.l 308(sp),d0
    2cae:	|  |  |  |   add.l d0,d0
    2cb0:	|  |  |  |   add.l d0,d0
    2cb2:	|  |  |  |   movea.l d1,a2
    2cb4:	|  |  |  |   adda.l d0,a2
    2cb6:	|  |  |  |   move.l 292(sp),-(sp)
    2cba:	|  |  |  |   jsr b02 <readString>
    2cc0:	|  |  |  |   addq.l #4,sp
    2cc2:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    2cc4:	|  |  |  |   addq.l #1,308(sp)
    2cc8:	|  |  |  \-> move.l 17afc <numBIFNames>,d0
    2cce:	|  |  |      cmp.l 308(sp),d0
    2cd2:	|  |  \----- bgt.s 2ca4 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    2cd4:	|  |         move.l 292(sp),-(sp)
    2cd8:	|  |         jsr 6bc <get2bytes>
    2cde:	|  |         addq.l #4,sp
    2ce0:	|  |         move.l d0,17b08 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    2ce6:	|  |         move.l 17b08 <numUserFunc>,d0
    2cec:	|  |         move.l d0,268(sp)
    2cf0:	|  |         clr.l 264(sp)
    2cf4:	|  |         move.l 17b28 <SysBase>,d0
    2cfa:	|  |         movea.l d0,a6
    2cfc:	|  |         move.l 268(sp),d0
    2d00:	|  |         move.l 264(sp),d1
    2d04:	|  |         jsr -684(a6)
    2d08:	|  |         move.l d0,260(sp)
    2d0c:	|  |         move.l 260(sp),d0
    2d10:	|  |         move.l d0,17ac8 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    2d16:	|  |         move.l 17ac8 <allUserFunc>,d0
    2d1c:	|  |     /-- bne.s 2d24 <initSludge+0x13e>
    2d1e:	|  |     |   clr.w d0
    2d20:	+--|-----|-- bra.w 334a <initSludge+0x764>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    2d24:	|  |     \-> clr.l 304(sp)
    2d28:	|  |     /-- bra.s 2d4e <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    2d2a:	|  |  /--|-> move.l 17ac8 <allUserFunc>,d1
    2d30:	|  |  |  |   move.l 304(sp),d0
    2d34:	|  |  |  |   add.l d0,d0
    2d36:	|  |  |  |   add.l d0,d0
    2d38:	|  |  |  |   movea.l d1,a2
    2d3a:	|  |  |  |   adda.l d0,a2
    2d3c:	|  |  |  |   move.l 292(sp),-(sp)
    2d40:	|  |  |  |   jsr b02 <readString>
    2d46:	|  |  |  |   addq.l #4,sp
    2d48:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    2d4a:	|  |  |  |   addq.l #1,304(sp)
    2d4e:	|  |  |  \-> move.l 17b08 <numUserFunc>,d0
    2d54:	|  |  |      cmp.l 304(sp),d0
    2d58:	|  |  \----- bgt.s 2d2a <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    2d5a:	|  |         move.l 17ad6 <gameVersion>,d0
    2d60:	|  |         cmpi.l #258,d0
    2d66:	|  +-------- ble.w 2df0 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    2d6a:	|  |         move.l 292(sp),-(sp)
    2d6e:	|  |         jsr 6bc <get2bytes>
    2d74:	|  |         addq.l #4,sp
    2d76:	|  |         move.l d0,17b04 <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    2d7c:	|  |         move.l 17b04 <numResourceNames>,d0
    2d82:	|  |         move.l d0,256(sp)
    2d86:	|  |         clr.l 252(sp)
    2d8a:	|  |         move.l 17b28 <SysBase>,d0
    2d90:	|  |         movea.l d0,a6
    2d92:	|  |         move.l 256(sp),d0
    2d96:	|  |         move.l 252(sp),d1
    2d9a:	|  |         jsr -684(a6)
    2d9e:	|  |         move.l d0,248(sp)
    2da2:	|  |         move.l 248(sp),d0
    2da6:	|  |         move.l d0,17ac0 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    2dac:	|  |         move.l 17ac0 <allResourceNames>,d0
    2db2:	|  |     /-- bne.s 2dba <initSludge+0x1d4>
    2db4:	|  |     |   clr.w d0
    2db6:	+--|-----|-- bra.w 334a <initSludge+0x764>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    2dba:	|  |     \-> clr.l 300(sp)
    2dbe:	|  |     /-- bra.s 2de4 <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    2dc0:	|  |  /--|-> move.l 17ac0 <allResourceNames>,d1
    2dc6:	|  |  |  |   move.l 300(sp),d0
    2dca:	|  |  |  |   add.l d0,d0
    2dcc:	|  |  |  |   add.l d0,d0
    2dce:	|  |  |  |   movea.l d1,a2
    2dd0:	|  |  |  |   adda.l d0,a2
    2dd2:	|  |  |  |   move.l 292(sp),-(sp)
    2dd6:	|  |  |  |   jsr b02 <readString>
    2ddc:	|  |  |  |   addq.l #4,sp
    2dde:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    2de0:	|  |  |  |   addq.l #1,300(sp)
    2de4:	|  |  |  \-> move.l 17b04 <numResourceNames>,d0
    2dea:	|  |  |      cmp.l 300(sp),d0
    2dee:	|  |  \----- bgt.s 2dc0 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    2df0:	|  \-------> move.l 292(sp),-(sp)
    2df4:	|            jsr 6bc <get2bytes>
    2dfa:	|            addq.l #4,sp
    2dfc:	|            move.l d0,17a28 <winWidth>
	winHeight = get2bytes (fp);
    2e02:	|            move.l 292(sp),-(sp)
    2e06:	|            jsr 6bc <get2bytes>
    2e0c:	|            addq.l #4,sp
    2e0e:	|            move.l d0,17a2c <winHeight>
	specialSettings = FGetC (fp);
    2e14:	|            move.l 292(sp),244(sp)
    2e1a:	|            move.l 17b30 <DOSBase>,d0
    2e20:	|            movea.l d0,a6
    2e22:	|            move.l 244(sp),d1
    2e26:	|            jsr -306(a6)
    2e2a:	|            move.l d0,240(sp)
    2e2e:	|            move.l 240(sp),d0
    2e32:	|            move.l d0,17b0c <specialSettings>

	desiredfps = 1000/FGetC (fp);
    2e38:	|            move.l 292(sp),236(sp)
    2e3e:	|            move.l 17b30 <DOSBase>,d0
    2e44:	|            movea.l d0,a6
    2e46:	|            move.l 236(sp),d1
    2e4a:	|            jsr -306(a6)
    2e4e:	|            move.l d0,232(sp)
    2e52:	|            move.l 232(sp),d0
    2e56:	|            move.l d0,-(sp)
    2e58:	|            pea 3e8 <encodeFilename+0xea>
    2e5c:	|            jsr 12738 <__divsi3>
    2e62:	|            addq.l #8,sp
    2e64:	|            move.l d0,16022 <desiredfps>

	FreeVec(readString (fp));
    2e6a:	|            move.l 292(sp),-(sp)
    2e6e:	|            jsr b02 <readString>
    2e74:	|            addq.l #4,sp
    2e76:	|            move.l d0,228(sp)
    2e7a:	|            move.l 17b28 <SysBase>,d0
    2e80:	|            movea.l d0,a6
    2e82:	|            movea.l 228(sp),a1
    2e86:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    2e8a:	|            move.l 292(sp),224(sp)
    2e90:	|            move.l #96974,220(sp)
    2e98:	|            moveq #8,d0
    2e9a:	|            move.l d0,216(sp)
    2e9e:	|            moveq #1,d1
    2ea0:	|            move.l d1,212(sp)
    2ea4:	|            move.l 17b30 <DOSBase>,d0
    2eaa:	|            movea.l d0,a6
    2eac:	|            move.l 224(sp),d1
    2eb0:	|            move.l 220(sp),d2
    2eb4:	|            move.l 216(sp),d3
    2eb8:	|            move.l 212(sp),d4
    2ebc:	|            jsr -324(a6)
    2ec0:	|            move.l d0,208(sp)
    2ec4:	|            move.l 208(sp),d0
    2ec8:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    2ecc:	|            moveq #1,d0
    2ece:	|            cmp.l 204(sp),d0
    2ed2:	|        /-- beq.s 2ee2 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    2ed4:	|        |   pea 12dab <PutChar+0x5db>
    2eda:	|        |   jsr 11d08 <KPrintF>
    2ee0:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    2ee2:	|        \-> move.l 17ad6 <gameVersion>,d0
    2ee8:	|            cmpi.l #258,d0
    2eee:	|        /-- ble.s 2efe <initSludge+0x318>
    2ef0:	|        |   move.l 292(sp),-(sp)
    2ef4:	|        |   jsr b02 <readString>
    2efa:	|        |   addq.l #4,sp
    2efc:	|     /--|-- bra.s 2f12 <initSludge+0x32c>
    2efe:	|     |  \-> pea 12dc9 <cursors.c.46c58bd4+0x2>
    2f04:	|     |      pea 12dc9 <cursors.c.46c58bd4+0x2>
    2f0a:	|     |      jsr f25e <joinStrings>
    2f10:	|     |      addq.l #8,sp
    2f12:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    2f16:	|            move.l 17ad6 <gameVersion>,d0
    2f1c:	|            cmpi.l #258,d0
    2f22:	|     /----- ble.s 2f44 <initSludge+0x35e>
    2f24:	|     |      move.l 292(sp),196(sp)
    2f2a:	|     |      move.l 17b30 <DOSBase>,d0
    2f30:	|     |      movea.l d0,a6
    2f32:	|     |      move.l 196(sp),d1
    2f36:	|     |      jsr -306(a6)
    2f3a:	|     |      move.l d0,192(sp)
    2f3e:	|     |      move.l 192(sp),d0
    2f42:	|     |  /-- bra.s 2f46 <initSludge+0x360>
    2f44:	|     \--|-> moveq #0,d0
    2f46:	|        \-> move.l d0,17bf6 <gameSettings+0x4>
	makeLanguageTable (fp);
    2f4c:	|            move.l 292(sp),-(sp)
    2f50:	|            jsr ec30 <makeLanguageTable>
    2f56:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    2f58:	|            move.l 17ad6 <gameVersion>,d0
    2f5e:	|            cmpi.l #261,d0
    2f64:	|        /-- ble.s 2fb2 <initSludge+0x3cc>
	{
		FGetC(fp);
    2f66:	|        |   move.l 292(sp),188(sp)
    2f6c:	|        |   move.l 17b30 <DOSBase>,d0
    2f72:	|        |   movea.l d0,a6
    2f74:	|        |   move.l 188(sp),d1
    2f78:	|        |   jsr -306(a6)
    2f7c:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    2f80:	|        |   move.l 292(sp),180(sp)
    2f86:	|        |   move.l 17b30 <DOSBase>,d0
    2f8c:	|        |   movea.l d0,a6
    2f8e:	|        |   move.l 180(sp),d1
    2f92:	|        |   jsr -306(a6)
    2f96:	|        |   move.l d0,176(sp)
		getFloat (fp);
    2f9a:	|        |   move.l 292(sp),-(sp)
    2f9e:	|        |   jsr 7d8 <getFloat>
    2fa4:	|        |   addq.l #4,sp
		getFloat (fp);
    2fa6:	|        |   move.l 292(sp),-(sp)
    2faa:	|        |   jsr 7d8 <getFloat>
    2fb0:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    2fb2:	|        \-> move.l 292(sp),-(sp)
    2fb6:	|            jsr b02 <readString>
    2fbc:	|            addq.l #4,sp
    2fbe:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    2fc2:	|            pea 12dca <cursors.c.46c58bd4+0x3>
    2fc8:	|            move.l 176(sp),-(sp)
    2fcc:	|            jsr f1de <strcmp>
    2fd2:	|            addq.l #8,sp
    2fd4:	|            tst.l d0
    2fd6:	|        /-- beq.s 2fde <initSludge+0x3f8>
		return FALSE;
    2fd8:	|        |   clr.w d0
    2fda:	+--------|-- bra.w 334a <initSludge+0x764>
	}
	FreeVec( checker);
    2fde:	|        \-> move.l 172(sp),168(sp)
    2fe4:	|            move.l 17b28 <SysBase>,d0
    2fea:	|            movea.l d0,a6
    2fec:	|            movea.l 168(sp),a1
    2ff0:	|            jsr -690(a6)
	checker = NULL;
    2ff4:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    2ff8:	|            move.l 292(sp),164(sp)
    2ffe:	|            move.l 17b30 <DOSBase>,d0
    3004:	|            movea.l d0,a6
    3006:	|            move.l 164(sp),d1
    300a:	|            jsr -306(a6)
    300e:	|            move.l d0,160(sp)
    3012:	|            move.l 160(sp),d0
    3016:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    301a:	|            moveq #0,d0
    301c:	|            move.b 159(sp),d0
    3020:	|            moveq #1,d1
    3022:	|            and.l d1,d0
    3024:	|        /-- beq.s 307c <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    3026:	|        |   move.l 17b30 <DOSBase>,d0
    302c:	|        |   movea.l d0,a6
    302e:	|        |   jsr -60(a6)
    3032:	|        |   move.l d0,38(sp)
    3036:	|        |   move.l 38(sp),d0
    303a:	|        |   move.l d0,34(sp)
    303e:	|        |   move.l #77266,30(sp)
    3046:	|        |   moveq #54,d0
    3048:	|        |   move.l d0,26(sp)
    304c:	|        |   move.l 17b30 <DOSBase>,d0
    3052:	|        |   movea.l d0,a6
    3054:	|        |   move.l 34(sp),d1
    3058:	|        |   move.l 30(sp),d2
    305c:	|        |   move.l 26(sp),d3
    3060:	|        |   jsr -48(a6)
    3064:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    3068:	|        |   pea 12e09 <cursors.c.46c58bd4+0x42>
    306e:	|        |   jsr 11d08 <KPrintF>
    3074:	|        |   addq.l #4,sp
		return FALSE;
    3076:	|        |   clr.w d0
    3078:	+--------|-- bra.w 334a <initSludge+0x764>
	}

	numGlobals = get2bytes (fp);
    307c:	|        \-> move.l 292(sp),-(sp)
    3080:	|            jsr 6bc <get2bytes>
    3086:	|            addq.l #4,sp
    3088:	|            move.l d0,17b00 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    308e:	|            move.l 17b00 <numGlobals>,d0
    3094:	|            lsl.l #3,d0
    3096:	|            move.l d0,154(sp)
    309a:	|            clr.l 150(sp)
    309e:	|            move.l 17b28 <SysBase>,d0
    30a4:	|            movea.l d0,a6
    30a6:	|            move.l 154(sp),d0
    30aa:	|            move.l 150(sp),d1
    30ae:	|            jsr -684(a6)
    30b2:	|            move.l d0,146(sp)
    30b6:	|            move.l 146(sp),d0
    30ba:	|            move.l d0,17ada <globalVars>
	if(globalVars == 0) {
    30c0:	|            move.l 17ada <globalVars>,d0
    30c6:	|        /-- bne.s 30dc <initSludge+0x4f6>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    30c8:	|        |   pea 12e41 <cursors.c.46c58bd4+0x7a>
    30ce:	|        |   jsr 11d08 <KPrintF>
    30d4:	|        |   addq.l #4,sp
		return FALSE;
    30d6:	|        |   clr.w d0
    30d8:	+--------|-- bra.w 334a <initSludge+0x764>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    30dc:	|        \-> clr.l 312(sp)
    30e0:	|        /-- bra.s 30f8 <initSludge+0x512>
    30e2:	|     /--|-> move.l 17ada <globalVars>,d1
    30e8:	|     |  |   move.l 312(sp),d0
    30ec:	|     |  |   lsl.l #3,d0
    30ee:	|     |  |   movea.l d1,a0
    30f0:	|     |  |   adda.l d0,a0
    30f2:	|     |  |   clr.l (a0)
    30f4:	|     |  |   addq.l #1,312(sp)
    30f8:	|     |  \-> move.l 17b00 <numGlobals>,d0
    30fe:	|     |      cmp.l 312(sp),d0
    3102:	|     \----- bgt.s 30e2 <initSludge+0x4fc>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    3104:	|            move.l 17bf6 <gameSettings+0x4>,d0
    310a:	|            clr.l -(sp)
    310c:	|            move.l d0,-(sp)
    310e:	|            move.l 300(sp),-(sp)
    3112:	|            jsr 40a8 <setFileIndices>
    3118:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    311c:	|            pea 1 <_start+0x1>
    3120:	|            jsr 3d62 <getNumberedString>
    3126:	|            addq.l #4,sp
    3128:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    312c:	|            move.l 142(sp),-(sp)
    3130:	|            jsr 2fe <encodeFilename>
    3136:	|            addq.l #4,sp
    3138:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    313c:	|            move.l 142(sp),134(sp)
    3142:	|            move.l 17b28 <SysBase>,d0
    3148:	|            movea.l d0,a6
    314a:	|            movea.l 134(sp),a1
    314e:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    3152:	|            move.l 138(sp),130(sp)
    3158:	|            move.l 17b30 <DOSBase>,d0
    315e:	|            movea.l d0,a6
    3160:	|            move.l 130(sp),d1
    3164:	|            jsr -120(a6)
    3168:	|            move.l d0,126(sp)
    316c:	|            move.l 126(sp),d0
    3170:	|            move.l d0,296(sp)
	if(lock == 0) {
    3174:	|        /-- bne.s 31a2 <initSludge+0x5bc>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    3176:	|        |   move.l 138(sp),122(sp)
    317c:	|        |   moveq #-2,d1
    317e:	|        |   move.l d1,118(sp)
    3182:	|        |   move.l 17b30 <DOSBase>,d0
    3188:	|        |   movea.l d0,a6
    318a:	|        |   move.l 122(sp),d1
    318e:	|        |   move.l 118(sp),d2
    3192:	|        |   jsr -84(a6)
    3196:	|        |   move.l d0,114(sp)
    319a:	|        |   move.l 114(sp),d0
    319e:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    31a2:	|        \-> move.l 296(sp),110(sp)
    31a8:	|            move.l 17b30 <DOSBase>,d0
    31ae:	|            movea.l d0,a6
    31b0:	|            move.l 110(sp),d1
    31b4:	|            jsr -126(a6)
    31b8:	|            move.l d0,106(sp)
    31bc:	|            move.l 106(sp),d0
    31c0:	|        /-- bne.s 321c <initSludge+0x636>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    31c2:	|        |   move.l 138(sp),-(sp)
    31c6:	|        |   pea 12e74 <cursors.c.46c58bd4+0xad>
    31cc:	|        |   jsr 11d08 <KPrintF>
    31d2:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    31d4:	|        |   move.l 17b30 <DOSBase>,d0
    31da:	|        |   movea.l d0,a6
    31dc:	|        |   jsr -60(a6)
    31e0:	|        |   move.l d0,58(sp)
    31e4:	|        |   move.l 58(sp),d0
    31e8:	|        |   move.l d0,54(sp)
    31ec:	|        |   move.l #77473,50(sp)
    31f4:	|        |   moveq #40,d0
    31f6:	|        |   move.l d0,46(sp)
    31fa:	|        |   move.l 17b30 <DOSBase>,d0
    3200:	|        |   movea.l d0,a6
    3202:	|        |   move.l 54(sp),d1
    3206:	|        |   move.l 50(sp),d2
    320a:	|        |   move.l 46(sp),d3
    320e:	|        |   jsr -48(a6)
    3212:	|        |   move.l d0,42(sp)
		return FALSE;
    3216:	|        |   clr.w d0
    3218:	+--------|-- bra.w 334a <initSludge+0x764>
	}

	FreeVec(gameName);
    321c:	|        \-> move.l 138(sp),102(sp)
    3222:	|            move.l 17b28 <SysBase>,d0
    3228:	|            movea.l d0,a6
    322a:	|            movea.l 102(sp),a1
    322e:	|            jsr -690(a6)

	readIniFile (filename);
    3232:	|            move.l 320(sp),-(sp)
    3236:	|            jsr ed64 <readIniFile>
    323c:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    323e:	|            jsr eb36 <getLanguageForFileB>
    3244:	|            move.l d0,16008 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    324a:	|            move.l 16008 <languageNum>,d0
    3250:	|        /-- bpl.s 3260 <initSludge+0x67a>
    3252:	|        |   pea 12eca <cursors.c.46c58bd4+0x103>
    3258:	|        |   jsr 11d08 <KPrintF>
    325e:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    3260:	|        \-> move.l 16008 <languageNum>,d0
    3266:	|            move.l d0,d1
    3268:	|            move.l 17bf6 <gameSettings+0x4>,d0
    326e:	|            move.l d1,-(sp)
    3270:	|            move.l d0,-(sp)
    3272:	|            clr.l -(sp)
    3274:	|            jsr 40a8 <setFileIndices>
    327a:	|            lea 12(sp),sp

	if (dataFol[0]) {
    327e:	|            movea.l 200(sp),a0
    3282:	|            move.b (a0),d0
    3284:	|     /----- beq.w 332e <initSludge+0x748>
		char *dataFolder = encodeFilename(dataFol);
    3288:	|     |      move.l 200(sp),-(sp)
    328c:	|     |      jsr 2fe <encodeFilename>
    3292:	|     |      addq.l #4,sp
    3294:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    3298:	|     |      move.l 98(sp),94(sp)
    329e:	|     |      move.l 17b30 <DOSBase>,d0
    32a4:	|     |      movea.l d0,a6
    32a6:	|     |      move.l 94(sp),d1
    32aa:	|     |      jsr -120(a6)
    32ae:	|     |      move.l d0,90(sp)
    32b2:	|     |      move.l 90(sp),d0
    32b6:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    32ba:	|     |  /-- bne.s 32e8 <initSludge+0x702>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    32bc:	|     |  |   move.l 98(sp),86(sp)
    32c2:	|     |  |   moveq #-2,d1
    32c4:	|     |  |   move.l d1,82(sp)
    32c8:	|     |  |   move.l 17b30 <DOSBase>,d0
    32ce:	|     |  |   movea.l d0,a6
    32d0:	|     |  |   move.l 86(sp),d1
    32d4:	|     |  |   move.l 82(sp),d2
    32d8:	|     |  |   jsr -84(a6)
    32dc:	|     |  |   move.l d0,78(sp)
    32e0:	|     |  |   move.l 78(sp),d0
    32e4:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    32e8:	|     |  \-> move.l 296(sp),74(sp)
    32ee:	|     |      move.l 17b30 <DOSBase>,d0
    32f4:	|     |      movea.l d0,a6
    32f6:	|     |      move.l 74(sp),d1
    32fa:	|     |      jsr -126(a6)
    32fe:	|     |      move.l d0,70(sp)
    3302:	|     |      move.l 70(sp),d0
    3306:	|     |  /-- bne.s 3318 <initSludge+0x732>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    3308:	|     |  |   move.l 17b30 <DOSBase>,d0
    330e:	|     |  |   movea.l d0,a6
    3310:	|     |  |   jsr -60(a6)
    3314:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    3318:	|     |  \-> move.l 98(sp),62(sp)
    331e:	|     |      move.l 17b28 <SysBase>,d0
    3324:	|     |      movea.l d0,a6
    3326:	|     |      movea.l 62(sp),a1
    332a:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    332e:	|     \----> movea.l 17a2c <winHeight>,a0
    3334:	|            lea -15(a0),a0
    3338:	|            move.l a0,d0
    333a:	|            move.l d0,-(sp)
    333c:	|            pea a <_start+0xa>
    3340:	|            jsr 485e <positionStatus>
    3346:	|            addq.l #8,sp

	return TRUE;
    3348:	|            moveq #1,d0
}
    334a:	\----------> movem.l (sp)+,d2-d4/a2/a6
    334e:	             lea 296(sp),sp
    3352:	             rts

00003354 <killSpeechTimers>:

void killSpeechTimers () {
    3354:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    3356:	          move.l 17ac4 <allRunningFunctions>,(sp)

	while (thisFunction) {
    335c:	   /----- bra.s 3388 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    335e:	/--|----> movea.l (sp),a0
    3360:	|  |      move.b 56(a0),d0
    3364:	|  |  /-- bne.s 3382 <killSpeechTimers+0x2e>
    3366:	|  |  |   movea.l (sp),a0
    3368:	|  |  |   move.w 50(a0),d0
    336c:	|  |  +-- beq.s 3382 <killSpeechTimers+0x2e>
    336e:	|  |  |   movea.l (sp),a0
    3370:	|  |  |   move.l 12(a0),d0
    3374:	|  |  +-- beq.s 3382 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    3376:	|  |  |   movea.l (sp),a0
    3378:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    337c:	|  |  |   movea.l (sp),a0
    337e:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    3382:	|  |  \-> movea.l (sp),a0
    3384:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    3388:	|  \----> tst.l (sp)
    338a:	\-------- bne.s 335e <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    338c:	          jsr 4d9c <killAllSpeech>
}
    3392:	          nop
    3394:	          addq.l #4,sp
    3396:	          rts

00003398 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    3398:	             lea -52(sp),sp
    339c:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    339e:	             movea.l 60(sp),a0
    33a2:	             move.l (a0),d0
    33a4:	             move.l d0,-(sp)
    33a6:	             jsr 3fe8 <openSubSlice>
    33ac:	             addq.l #4,sp
    33ae:	             tst.w d0
    33b0:	         /-- bne.s 33b8 <loadFunctionCode+0x20>
    33b2:	         |   clr.w d0
    33b4:	/--------|-- bra.w 357a <loadFunctionCode+0x1e2>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    33b8:	|        \-> move.l 17b10 <bigDataFile>,44(sp)
    33c0:	|            move.l 17b30 <DOSBase>,d0
    33c6:	|            movea.l d0,a6
    33c8:	|            move.l 44(sp),d1
    33cc:	|            jsr -306(a6)
    33d0:	|            move.l d0,40(sp)
    33d4:	|            move.l 40(sp),d0
    33d8:	|            move.l d0,d0
    33da:	|            movea.l 60(sp),a0
    33de:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    33e2:	|            move.l 17b10 <bigDataFile>,d0
    33e8:	|            move.l d0,-(sp)
    33ea:	|            jsr 6bc <get2bytes>
    33f0:	|            addq.l #4,sp
    33f2:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    33f6:	|            move.l 17b10 <bigDataFile>,d0
    33fc:	|            move.l d0,-(sp)
    33fe:	|            jsr 6bc <get2bytes>
    3404:	|            addq.l #4,sp
    3406:	|            movea.l 60(sp),a0
    340a:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    340e:	|            move.l 17b10 <bigDataFile>,d0
    3414:	|            move.l d0,-(sp)
    3416:	|            jsr 6bc <get2bytes>
    341c:	|            addq.l #4,sp
    341e:	|            movea.l 60(sp),a0
    3422:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    3426:	|            move.l 36(sp),d0
    342a:	|            lsl.l #3,d0
    342c:	|            move.l d0,32(sp)
    3430:	|            clr.l 28(sp)
    3434:	|            move.l 17b28 <SysBase>,d0
    343a:	|            movea.l d0,a6
    343c:	|            move.l 32(sp),d0
    3440:	|            move.l 28(sp),d1
    3444:	|            jsr -684(a6)
    3448:	|            move.l d0,24(sp)
    344c:	|            move.l 24(sp),d0
    3450:	|            movea.l 60(sp),a0
    3454:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    3458:	|            movea.l 60(sp),a0
    345c:	|            move.l 4(a0),d0
    3460:	|        /-- bne.s 3476 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3462:	|        |   pea 12ef5 <cursors.c.46c58bd4+0x12e>
    3468:	|        |   jsr 11d08 <KPrintF>
    346e:	|        |   addq.l #4,sp
		return FALSE;
    3470:	|        |   clr.w d0
    3472:	+--------|-- bra.w 357a <loadFunctionCode+0x1e2>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3476:	|        \-> clr.l 52(sp)
    347a:	|        /-- bra.s 34dc <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    347c:	|     /--|-> move.l 17b10 <bigDataFile>,8(sp)
    3484:	|     |  |   move.l 17b30 <DOSBase>,d0
    348a:	|     |  |   movea.l d0,a6
    348c:	|     |  |   move.l 8(sp),d1
    3490:	|     |  |   jsr -306(a6)
    3494:	|     |  |   move.l d0,4(sp)
    3498:	|     |  |   move.l 4(sp),d1
    349c:	|     |  |   movea.l 60(sp),a0
    34a0:	|     |  |   movea.l 4(a0),a0
    34a4:	|     |  |   move.l 52(sp),d0
    34a8:	|     |  |   lsl.l #3,d0
    34aa:	|     |  |   adda.l d0,a0
    34ac:	|     |  |   move.l d1,d0
    34ae:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    34b0:	|     |  |   move.l 17b10 <bigDataFile>,d0
    34b6:	|     |  |   move.l d0,-(sp)
    34b8:	|     |  |   jsr 6bc <get2bytes>
    34be:	|     |  |   addq.l #4,sp
    34c0:	|     |  |   move.l d0,d1
    34c2:	|     |  |   movea.l 60(sp),a0
    34c6:	|     |  |   movea.l 4(a0),a0
    34ca:	|     |  |   move.l 52(sp),d0
    34ce:	|     |  |   lsl.l #3,d0
    34d0:	|     |  |   adda.l d0,a0
    34d2:	|     |  |   move.l d1,d0
    34d4:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    34d8:	|     |  |   addq.l #1,52(sp)
    34dc:	|     |  \-> move.l 52(sp),d0
    34e0:	|     |      cmp.l 36(sp),d0
    34e4:	|     \----- bcs.s 347c <loadFunctionCode+0xe4>
	}

	finishAccess ();
    34e6:	|            jsr 3d58 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 1) {
    34ec:	|            movea.l 60(sp),a0
    34f0:	|            move.l 8(a0),d0
    34f4:	|            moveq #1,d1
    34f6:	|            cmp.l d0,d1
    34f8:	|  /-------- bge.s 3578 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    34fa:	|  |         movea.l 60(sp),a0
    34fe:	|  |         move.l 8(a0),d0
    3502:	|  |         lsl.l #3,d0
    3504:	|  |         move.l d0,20(sp)
    3508:	|  |         clr.l 16(sp)
    350c:	|  |         move.l 17b28 <SysBase>,d0
    3512:	|  |         movea.l d0,a6
    3514:	|  |         move.l 20(sp),d0
    3518:	|  |         move.l 16(sp),d1
    351c:	|  |         jsr -684(a6)
    3520:	|  |         move.l d0,12(sp)
    3524:	|  |         move.l 12(sp),d0
    3528:	|  |         movea.l 60(sp),a0
    352c:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    3530:	|  |         movea.l 60(sp),a0
    3534:	|  |         move.l 20(a0),d0
    3538:	|  |     /-- bne.s 354c <loadFunctionCode+0x1b4>
			KPrintF("loadFunctionCode: cannot allocate memory");
    353a:	|  |     |   pea 12ef5 <cursors.c.46c58bd4+0x12e>
    3540:	|  |     |   jsr 11d08 <KPrintF>
    3546:	|  |     |   addq.l #4,sp
			return FALSE;
    3548:	|  |     |   clr.w d0
    354a:	+--|-----|-- bra.s 357a <loadFunctionCode+0x1e2>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    354c:	|  |     \-> clr.l 48(sp)
    3550:	|  |     /-- bra.s 356a <loadFunctionCode+0x1d2>
			initVarNew (newFunc -> localVars[a]);
    3552:	|  |  /--|-> movea.l 60(sp),a0
    3556:	|  |  |  |   move.l 20(a0),d1
    355a:	|  |  |  |   move.l 48(sp),d0
    355e:	|  |  |  |   lsl.l #3,d0
    3560:	|  |  |  |   movea.l d1,a0
    3562:	|  |  |  |   adda.l d0,a0
    3564:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3566:	|  |  |  |   addq.l #1,48(sp)
    356a:	|  |  |  \-> movea.l 60(sp),a0
    356e:	|  |  |      move.l 8(a0),d0
    3572:	|  |  |      cmp.l 48(sp),d0
    3576:	|  |  \----- bgt.s 3552 <loadFunctionCode+0x1ba>
		}
	}
	return TRUE;
    3578:	|  \-------> moveq #1,d0
}
    357a:	\----------> movea.l (sp)+,a6
    357c:	             lea 52(sp),sp
    3580:	             rts

00003582 <loadHandlers>:

void loadHandlers (BPTR fp) {
    3582:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    3584:	movea.l 16004 <currentEvents>,a2
    358a:	move.l 8(sp),-(sp)
    358e:	jsr 6bc <get2bytes>
    3594:	addq.l #4,sp
    3596:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    3598:	movea.l 16004 <currentEvents>,a2
    359e:	move.l 8(sp),-(sp)
    35a2:	jsr 6bc <get2bytes>
    35a8:	addq.l #4,sp
    35aa:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    35ae:	movea.l 16004 <currentEvents>,a2
    35b4:	move.l 8(sp),-(sp)
    35b8:	jsr 6bc <get2bytes>
    35be:	addq.l #4,sp
    35c0:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    35c4:	movea.l 16004 <currentEvents>,a2
    35ca:	move.l 8(sp),-(sp)
    35ce:	jsr 6bc <get2bytes>
    35d4:	addq.l #4,sp
    35d6:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    35da:	movea.l 16004 <currentEvents>,a2
    35e0:	move.l 8(sp),-(sp)
    35e4:	jsr 6bc <get2bytes>
    35ea:	addq.l #4,sp
    35ec:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    35f0:	movea.l 16004 <currentEvents>,a2
    35f6:	move.l 8(sp),-(sp)
    35fa:	jsr 6bc <get2bytes>
    3600:	addq.l #4,sp
    3602:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    3606:	movea.l 16004 <currentEvents>,a2
    360c:	move.l 8(sp),-(sp)
    3610:	jsr 6bc <get2bytes>
    3616:	addq.l #4,sp
    3618:	move.l d0,24(a2)
}
    361c:	nop
    361e:	movea.l (sp)+,a2
    3620:	rts

00003622 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    3622:	       lea -312(sp),sp
    3626:	       movem.l d2-d3/a6,-(sp)
    362a:	       move.l 332(sp),d1
    362e:	       move.l 336(sp),d0
    3632:	       move.b d1,d1
    3634:	       move.b d1,16(sp)
    3638:	       move.b d0,d0
    363a:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    363e:	       move.l 328(sp),318(sp)
    3644:	       move.l #1005,314(sp)
    364c:	       move.l 17b30 <DOSBase>,d0
    3652:	       movea.l d0,a6
    3654:	       move.l 318(sp),d1
    3658:	       move.l 314(sp),d2
    365c:	       jsr -30(a6)
    3660:	       move.l d0,310(sp)
    3664:	       move.l 310(sp),d0
    3668:	       move.l d0,306(sp)

	if (! fp) {
    366c:	   /-- bne.s 36c8 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    366e:	   |   move.l 17b30 <DOSBase>,d0
    3674:	   |   movea.l d0,a6
    3676:	   |   jsr -60(a6)
    367a:	   |   move.l d0,154(sp)
    367e:	   |   move.l 154(sp),d0
    3682:	   |   move.l d0,150(sp)
    3686:	   |   move.l #77598,146(sp)
    368e:	   |   moveq #31,d0
    3690:	   |   move.l d0,142(sp)
    3694:	   |   move.l 17b30 <DOSBase>,d0
    369a:	   |   movea.l d0,a6
    369c:	   |   move.l 150(sp),d1
    36a0:	   |   move.l 146(sp),d2
    36a4:	   |   move.l 142(sp),d3
    36a8:	   |   jsr -48(a6)
    36ac:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    36b0:	   |   move.l 328(sp),-(sp)
    36b4:	   |   pea 12f3e <cursors.c.46c58bd4+0x177>
    36ba:	   |   jsr 11d08 <KPrintF>
    36c0:	   |   addq.l #8,sp
		return NULL;
    36c2:	   |   moveq #0,d0
    36c4:	/--|-- bra.w 3988 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    36c8:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    36cc:	|      move.l 306(sp),302(sp)
    36d2:	|      move.l 17b30 <DOSBase>,d0
    36d8:	|      movea.l d0,a6
    36da:	|      move.l 302(sp),d1
    36de:	|      jsr -306(a6)
    36e2:	|      move.l d0,298(sp)
    36e6:	|      move.l 298(sp),d0
    36ea:	|      moveq #83,d1
    36ec:	|      cmp.l d0,d1
    36ee:	|  /-- beq.s 36f6 <openAndVerify+0xd4>
    36f0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    36f6:	|  \-> move.l 306(sp),294(sp)
    36fc:	|      move.l 17b30 <DOSBase>,d0
    3702:	|      movea.l d0,a6
    3704:	|      move.l 294(sp),d1
    3708:	|      jsr -306(a6)
    370c:	|      move.l d0,290(sp)
    3710:	|      move.l 290(sp),d0
    3714:	|      moveq #76,d1
    3716:	|      cmp.l d0,d1
    3718:	|  /-- beq.s 3720 <openAndVerify+0xfe>
    371a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    3720:	|  \-> move.l 306(sp),286(sp)
    3726:	|      move.l 17b30 <DOSBase>,d0
    372c:	|      movea.l d0,a6
    372e:	|      move.l 286(sp),d1
    3732:	|      jsr -306(a6)
    3736:	|      move.l d0,282(sp)
    373a:	|      move.l 282(sp),d0
    373e:	|      moveq #85,d1
    3740:	|      cmp.l d0,d1
    3742:	|  /-- beq.s 374a <openAndVerify+0x128>
    3744:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    374a:	|  \-> move.l 306(sp),278(sp)
    3750:	|      move.l 17b30 <DOSBase>,d0
    3756:	|      movea.l d0,a6
    3758:	|      move.l 278(sp),d1
    375c:	|      jsr -306(a6)
    3760:	|      move.l d0,274(sp)
    3764:	|      move.l 274(sp),d0
    3768:	|      moveq #68,d1
    376a:	|      cmp.l d0,d1
    376c:	|  /-- beq.s 3774 <openAndVerify+0x152>
    376e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    3774:	|  \-> move.l 306(sp),270(sp)
    377a:	|      move.l 17b30 <DOSBase>,d0
    3780:	|      movea.l d0,a6
    3782:	|      move.l 270(sp),d1
    3786:	|      jsr -306(a6)
    378a:	|      move.l d0,266(sp)
    378e:	|      move.l 266(sp),d1
    3792:	|      move.b 16(sp),d0
    3796:	|      ext.w d0
    3798:	|      movea.w d0,a0
    379a:	|      cmpa.l d1,a0
    379c:	|  /-- beq.s 37a4 <openAndVerify+0x182>
    379e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    37a4:	|  \-> move.l 306(sp),262(sp)
    37aa:	|      move.l 17b30 <DOSBase>,d0
    37b0:	|      movea.l d0,a6
    37b2:	|      move.l 262(sp),d1
    37b6:	|      jsr -306(a6)
    37ba:	|      move.l d0,258(sp)
    37be:	|      move.l 258(sp),d1
    37c2:	|      move.b 14(sp),d0
    37c6:	|      ext.w d0
    37c8:	|      movea.w d0,a0
    37ca:	|      cmpa.l d1,a0
    37cc:	|  /-- beq.s 37d4 <openAndVerify+0x1b2>
    37ce:	|  |   move.w #1,322(sp)
	if (headerBad) {
    37d4:	|  \-> tst.w 322(sp)
    37d8:	|  /-- beq.s 3830 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    37da:	|  |   move.l 17b30 <DOSBase>,d0
    37e0:	|  |   movea.l d0,a6
    37e2:	|  |   jsr -60(a6)
    37e6:	|  |   move.l d0,174(sp)
    37ea:	|  |   move.l 174(sp),d0
    37ee:	|  |   move.l d0,170(sp)
    37f2:	|  |   move.l #77661,166(sp)
    37fa:	|  |   moveq #31,d0
    37fc:	|  |   move.l d0,162(sp)
    3800:	|  |   move.l 17b30 <DOSBase>,d0
    3806:	|  |   movea.l d0,a6
    3808:	|  |   move.l 170(sp),d1
    380c:	|  |   move.l 166(sp),d2
    3810:	|  |   move.l 162(sp),d3
    3814:	|  |   jsr -48(a6)
    3818:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    381c:	|  |   pea 12f5d <cursors.c.46c58bd4+0x196>
    3822:	|  |   jsr 11d08 <KPrintF>
    3828:	|  |   addq.l #4,sp
		return NULL;
    382a:	|  |   moveq #0,d0
    382c:	+--|-- bra.w 3988 <openAndVerify+0x366>
	}
	FGetC (fp);
    3830:	|  \-> move.l 306(sp),254(sp)
    3836:	|      move.l 17b30 <DOSBase>,d0
    383c:	|      movea.l d0,a6
    383e:	|      move.l 254(sp),d1
    3842:	|      jsr -306(a6)
    3846:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    384a:	|      nop
    384c:	|  /-> move.l 306(sp),246(sp)
    3852:	|  |   move.l 17b30 <DOSBase>,d0
    3858:	|  |   movea.l d0,a6
    385a:	|  |   move.l 246(sp),d1
    385e:	|  |   jsr -306(a6)
    3862:	|  |   move.l d0,242(sp)
    3866:	|  |   move.l 242(sp),d0
    386a:	|  \-- bne.s 384c <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    386c:	|      move.l 306(sp),238(sp)
    3872:	|      move.l 17b30 <DOSBase>,d0
    3878:	|      movea.l d0,a6
    387a:	|      move.l 238(sp),d1
    387e:	|      jsr -306(a6)
    3882:	|      move.l d0,234(sp)
    3886:	|      move.l 234(sp),d0
    388a:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    388e:	|      move.l 306(sp),226(sp)
    3894:	|      move.l 17b30 <DOSBase>,d0
    389a:	|      movea.l d0,a6
    389c:	|      move.l 226(sp),d1
    38a0:	|      jsr -306(a6)
    38a4:	|      move.l d0,222(sp)
    38a8:	|      move.l 222(sp),d0
    38ac:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    38b0:	|      move.l 230(sp),d0
    38b4:	|      lsl.l #8,d0
    38b6:	|      add.l 218(sp),d0
    38ba:	|      movea.l 344(sp),a0
    38be:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    38c0:	|      movea.l 344(sp),a0
    38c4:	|      move.l (a0),d0
    38c6:	|      cmpi.l #514,d0
    38cc:	|  /-- ble.s 3922 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    38ce:	|  |   move.l 17b30 <DOSBase>,d0
    38d4:	|  |   movea.l d0,a6
    38d6:	|  |   jsr -60(a6)
    38da:	|  |   move.l d0,194(sp)
    38de:	|  |   move.l 194(sp),d0
    38e2:	|  |   move.l d0,190(sp)
    38e6:	|  |   move.l #77688,186(sp)
    38ee:	|  |   moveq #100,d1
    38f0:	|  |   move.l d1,182(sp)
    38f4:	|  |   move.l 17b30 <DOSBase>,d0
    38fa:	|  |   movea.l d0,a6
    38fc:	|  |   move.l 190(sp),d1
    3900:	|  |   move.l 186(sp),d2
    3904:	|  |   move.l 182(sp),d3
    3908:	|  |   jsr -48(a6)
    390c:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    3910:	|  |   pea 12f78 <cursors.c.46c58bd4+0x1b1>
    3916:	|  |   jsr 11d08 <KPrintF>
    391c:	|  |   addq.l #4,sp
		return NULL;
    391e:	|  |   moveq #0,d0
    3920:	+--|-- bra.s 3988 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    3922:	|  \-> movea.l 344(sp),a0
    3926:	|      move.l (a0),d0
    3928:	|      cmpi.l #257,d0
    392e:	|  /-- bgt.s 3984 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    3930:	|  |   move.l 17b30 <DOSBase>,d0
    3936:	|  |   movea.l d0,a6
    3938:	|  |   jsr -60(a6)
    393c:	|  |   move.l d0,214(sp)
    3940:	|  |   move.l 214(sp),d0
    3944:	|  |   move.l d0,210(sp)
    3948:	|  |   move.l #77757,206(sp)
    3950:	|  |   moveq #100,d0
    3952:	|  |   move.l d0,202(sp)
    3956:	|  |   move.l 17b30 <DOSBase>,d0
    395c:	|  |   movea.l d0,a6
    395e:	|  |   move.l 210(sp),d1
    3962:	|  |   move.l 206(sp),d2
    3966:	|  |   move.l 202(sp),d3
    396a:	|  |   jsr -48(a6)
    396e:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    3972:	|  |   pea 12fbd <cursors.c.46c58bd4+0x1f6>
    3978:	|  |   jsr 11d08 <KPrintF>
    397e:	|  |   addq.l #4,sp
		return NULL;
    3980:	|  |   moveq #0,d0
    3982:	+--|-- bra.s 3988 <openAndVerify+0x366>
	}
	return fp;
    3984:	|  \-> move.l 306(sp),d0
}
    3988:	\----> movem.l (sp)+,d2-d3/a6
    398c:	       lea 312(sp),sp
    3990:	       rts

00003992 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    3992:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    3994:	          move.l #96964,(sp)
	while (* huntAndDestroy) {
    399a:	   /----- bra.s 39c6 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    399c:	/--|----> movea.l (sp),a0
    399e:	|  |      move.l (a0),d0
    39a0:	|  |      cmp.l 8(sp),d0
    39a4:	|  |  /-- bne.s 39bc <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    39a6:	|  |  |   movea.l (sp),a0
    39a8:	|  |  |   movea.l (a0),a0
    39aa:	|  |  |   move.l 44(a0),d0
    39ae:	|  |  |   movea.l (sp),a0
    39b0:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    39b2:	|  |  |   movea.l 8(sp),a0
    39b6:	|  |  |   clr.l 44(a0)
    39ba:	|  +--|-- bra.s 39c6 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    39bc:	|  |  \-> movea.l (sp),a0
    39be:	|  |      move.l (a0),d0
    39c0:	|  |      moveq #44,d1
    39c2:	|  |      add.l d0,d1
    39c4:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    39c6:	|  \----> movea.l (sp),a0
    39c8:	|         move.l (a0),d0
    39ca:	\-------- bne.s 399c <pauseFunction+0xa>
		}
	}
}
    39cc:	          nop
    39ce:	          nop
    39d0:	          addq.l #4,sp
    39d2:	          rts

000039d4 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    39d4:	move.l 17ac4 <allRunningFunctions>,d0
    39da:	movea.l 4(sp),a0
    39de:	move.l d0,44(a0)
	allRunningFunctions = fun;
    39e2:	move.l 4(sp),17ac4 <allRunningFunctions>
}
    39ea:	nop
    39ec:	rts

000039ee <runSludge>:

BOOL runSludge () {
    39ee:	                   lea -12(sp),sp
    39f2:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    39f4:	                   move.l 17ac4 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    39fc:	      /----------- bra.s 3a78 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    39fe:	   /--|----------> movea.l 12(sp),a0
    3a02:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    3a08:	   |  |            movea.l 12(sp),a0
    3a0c:	   |  |            move.b 56(a0),d0
    3a10:	   |  |  /-------- bne.s 3a72 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    3a12:	   |  |  |         movea.l 12(sp),a0
    3a16:	   |  |  |         move.l 12(a0),d0
    3a1a:	   |  |  |  /----- beq.s 3a44 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    3a1c:	   |  |  |  |      movea.l 12(sp),a0
    3a20:	   |  |  |  |      move.l 12(a0),d0
    3a24:	   |  |  |  |  /-- bpl.s 3a30 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    3a26:	   |  |  |  |  |   movea.l 12(sp),a0
    3a2a:	   |  |  |  |  |   clr.l 12(a0)
    3a2e:	   |  |  +--|--|-- bra.s 3a72 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    3a30:	   |  |  |  |  \-> movea.l 12(sp),a0
    3a34:	   |  |  |  |      move.l 12(a0),d0
    3a38:	   |  |  |  |      subq.l #1,d0
    3a3a:	   |  |  |  |      movea.l 12(sp),a0
    3a3e:	   |  |  |  |      move.l d0,12(a0)
    3a42:	   |  |  +--|----- bra.s 3a72 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    3a44:	   |  |  |  \----> movea.l 12(sp),a0
    3a48:	   |  |  |         move.w 50(a0),d0
    3a4c:	   |  |  |     /-- beq.s 3a5c <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    3a4e:	   |  |  |     |   movea.l 12(sp),a0
    3a52:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    3a56:	   |  |  |     |   jsr 4d9c <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    3a5c:	   |  |  |     \-> move.l 12(sp),-(sp)
    3a60:	   |  |  |         jsr 1c4e <continueFunction>
    3a66:	   |  |  |         addq.l #4,sp
    3a68:	   |  |  |         tst.w d0
    3a6a:	   |  |  +-------- bne.s 3a72 <runSludge+0x84>
					return FALSE;
    3a6c:	   |  |  |         clr.w d0
    3a6e:	/--|--|--|-------- bra.w 3afe <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    3a72:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    3a78:	|  |  \----------> tst.l 12(sp)
    3a7c:	|  \-------------- bne.s 39fe <runSludge+0x10>
	}

	if (loadNow) {
    3a7e:	|                  move.l 17af4 <loadNow>,d0
    3a84:	|        /-------- beq.s 3afc <runSludge+0x10e>
		if (loadNow[0] == ':') {
    3a86:	|        |         movea.l 17af4 <loadNow>,a0
    3a8c:	|        |         move.b (a0),d0
    3a8e:	|        |         cmpi.b #58,d0
    3a92:	|        |  /----- bne.s 3ac6 <runSludge+0xd8>
			saveGame (loadNow + 1);
    3a94:	|        |  |      move.l 17af4 <loadNow>,d0
    3a9a:	|        |  |      addq.l #1,d0
    3a9c:	|        |  |      move.l d0,-(sp)
    3a9e:	|        |  |      jsr 80ae <saveGame>
    3aa4:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    3aa6:	|        |  |      movea.l 17be0 <saverFunc>,a0
    3aac:	|        |  |      lea 28(a0),a0
    3ab0:	|        |  |      pea 1 <_start+0x1>
    3ab4:	|        |  |      pea 1 <_start+0x1>
    3ab8:	|        |  |      move.l a0,-(sp)
    3aba:	|        |  |      jsr 10602 <setVariable>
    3ac0:	|        |  |      lea 12(sp),sp
    3ac4:	|        |  |  /-- bra.s 3ade <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    3ac6:	|        |  \--|-> move.l 17af4 <loadNow>,d0
    3acc:	|        |     |   move.l d0,-(sp)
    3ace:	|        |     |   jsr 7bf6 <loadGame>
    3ad4:	|        |     |   addq.l #4,sp
    3ad6:	|        |     |   tst.w d0
    3ad8:	|        |     +-- bne.s 3ade <runSludge+0xf0>
    3ada:	|        |     |   clr.w d0
    3adc:	+--------|-----|-- bra.s 3afe <runSludge+0x110>
		}
		FreeVec(loadNow);
    3ade:	|        |     \-> move.l 17af4 <loadNow>,8(sp)
    3ae6:	|        |         move.l 17b28 <SysBase>,d0
    3aec:	|        |         movea.l d0,a6
    3aee:	|        |         movea.l 8(sp),a1
    3af2:	|        |         jsr -690(a6)
		loadNow = NULL;
    3af6:	|        |         clr.l 17af4 <loadNow>
	}

	return TRUE;
    3afc:	|        \-------> moveq #1,d0
}
    3afe:	\----------------> movea.l (sp)+,a6
    3b00:	                   lea 12(sp),sp
    3b04:	                   rts

00003b06 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    3b06:	movea.l 16004 <currentEvents>,a0
    3b0c:	move.l (a0),d0
    3b0e:	move.l 4(sp),-(sp)
    3b12:	move.l d0,-(sp)
    3b14:	jsr 8d0 <put2bytes>
    3b1a:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    3b1c:	movea.l 16004 <currentEvents>,a0
    3b22:	move.l 4(a0),d0
    3b26:	move.l 4(sp),-(sp)
    3b2a:	move.l d0,-(sp)
    3b2c:	jsr 8d0 <put2bytes>
    3b32:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    3b34:	movea.l 16004 <currentEvents>,a0
    3b3a:	move.l 8(a0),d0
    3b3e:	move.l 4(sp),-(sp)
    3b42:	move.l d0,-(sp)
    3b44:	jsr 8d0 <put2bytes>
    3b4a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    3b4c:	movea.l 16004 <currentEvents>,a0
    3b52:	move.l 12(a0),d0
    3b56:	move.l 4(sp),-(sp)
    3b5a:	move.l d0,-(sp)
    3b5c:	jsr 8d0 <put2bytes>
    3b62:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    3b64:	movea.l 16004 <currentEvents>,a0
    3b6a:	move.l 16(a0),d0
    3b6e:	move.l 4(sp),-(sp)
    3b72:	move.l d0,-(sp)
    3b74:	jsr 8d0 <put2bytes>
    3b7a:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    3b7c:	movea.l 16004 <currentEvents>,a0
    3b82:	move.l 20(a0),d0
    3b86:	move.l 4(sp),-(sp)
    3b8a:	move.l d0,-(sp)
    3b8c:	jsr 8d0 <put2bytes>
    3b92:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    3b94:	movea.l 16004 <currentEvents>,a0
    3b9a:	move.l 24(a0),d0
    3b9e:	move.l 4(sp),-(sp)
    3ba2:	move.l d0,-(sp)
    3ba4:	jsr 8d0 <put2bytes>
    3baa:	addq.l #8,sp
}
    3bac:	nop
    3bae:	rts

00003bb0 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    3bb0:	      /-- bra.s 3bd0 <stackSetByIndex+0x20>
		vS = vS->next;
    3bb2:	/-----|-> movea.l 4(sp),a0
    3bb6:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    3bbc:	|     +-- bne.s 3bd0 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    3bbe:	|     |   pea 13004 <cursors.c.46c58bd4+0x23d>
    3bc4:	|     |   jsr 11d08 <KPrintF>
    3bca:	|     |   addq.l #4,sp
			return FALSE;
    3bcc:	|     |   clr.w d0
    3bce:	|  /--|-- bra.s 3bf2 <stackSetByIndex+0x42>
	while (theIndex--) {
    3bd0:	|  |  \-> move.l 8(sp),d0
    3bd4:	|  |      move.l d0,d1
    3bd6:	|  |      subq.l #1,d1
    3bd8:	|  |      move.l d1,8(sp)
    3bdc:	|  |      tst.l d0
    3bde:	\--|----- bne.s 3bb2 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    3be0:	   |      move.l 4(sp),d0
    3be4:	   |      move.l d0,-(sp)
    3be6:	   |      move.l 16(sp),-(sp)
    3bea:	   |      jsr 101ec <copyVariable>
    3bf0:	   |      addq.l #8,sp
}
    3bf2:	   \----> rts

00003bf4 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack * vStack, BOOL returnSommet) {
    3bf4:	             lea -20(sp),sp
    3bf8:	             move.l a6,-(sp)
    3bfa:	             move.l 44(sp),d0
    3bfe:	             move.w d0,d0
    3c00:	             move.w d0,6(sp)
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    3c04:	             moveq #58,d0
    3c06:	             move.l d0,20(sp)
    3c0a:	             clr.l 16(sp)
    3c0e:	             move.l 17b28 <SysBase>,d0
    3c14:	             movea.l d0,a6
    3c16:	             move.l 20(sp),d0
    3c1a:	             move.l 16(sp),d1
    3c1e:	             jsr -684(a6)
    3c22:	             move.l d0,12(sp)
    3c26:	             move.l 12(sp),d0
    3c2a:	             move.l d0,8(sp)
	if(!newFunc) {
    3c2e:	         /-- bne.s 3c44 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    3c30:	         |   pea 1301d <cursors.c.46c58bd4+0x256>
    3c36:	         |   jsr 11d08 <KPrintF>
    3c3c:	         |   addq.l #4,sp
		return 0;
    3c3e:	         |   moveq #0,d0
    3c40:	/--------|-- bra.w 3d50 <startNewFunctionNum+0x15c>
	}
	newFunc -> originalNumber = funcNum;
    3c44:	|        \-> move.l 28(sp),d0
    3c48:	|            movea.l 8(sp),a0
    3c4c:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    3c4e:	|            move.l 8(sp),-(sp)
    3c52:	|            jsr 3398 <loadFunctionCode>
    3c58:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    3c5a:	|            movea.l 8(sp),a0
    3c5e:	|            move.l 16(a0),d1
    3c62:	|            move.l 32(sp),d0
    3c66:	|            cmp.l d1,d0
    3c68:	|        /-- beq.s 3c7e <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    3c6a:	|        |   pea 13046 <cursors.c.46c58bd4+0x27f>
    3c70:	|        |   jsr 11d08 <KPrintF>
    3c76:	|        |   addq.l #4,sp
		return NULL; 
    3c78:	|        |   moveq #0,d0
    3c7a:	+--------|-- bra.w 3d50 <startNewFunctionNum+0x15c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    3c7e:	|        \-> movea.l 8(sp),a0
    3c82:	|            move.l 16(a0),d1
    3c86:	|            movea.l 8(sp),a0
    3c8a:	|            move.l 8(a0),d0
    3c8e:	|            cmp.l d1,d0
    3c90:	|  /-------- bge.s 3cf0 <startNewFunctionNum+0xfc>
		KPrintF ("More arguments than local variable space!");
    3c92:	|  |         pea 13062 <cursors.c.46c58bd4+0x29b>
    3c98:	|  |         jsr 11d08 <KPrintF>
    3c9e:	|  |         addq.l #4,sp
		return NULL; 
    3ca0:	|  |         moveq #0,d0
    3ca2:	+--|-------- bra.w 3d50 <startNewFunctionNum+0x15c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		numParamsExpected --;
    3ca6:	|  |  /----> subq.l #1,32(sp)
		if (vStack == NULL) {
    3caa:	|  |  |      tst.l 40(sp)
    3cae:	|  |  |  /-- bne.s 3cc4 <startNewFunctionNum+0xd0>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    3cb0:	|  |  |  |   pea 1308c <cursors.c.46c58bd4+0x2c5>
    3cb6:	|  |  |  |   jsr 11d08 <KPrintF>
    3cbc:	|  |  |  |   addq.l #4,sp
			return NULL;
    3cbe:	|  |  |  |   moveq #0,d0
    3cc0:	+--|--|--|-- bra.w 3d50 <startNewFunctionNum+0x15c>
		}
		copyVariable (&vStack -> thisVar, &newFunc->localVars[numParamsExpected]);
    3cc4:	|  |  |  \-> movea.l 8(sp),a0
    3cc8:	|  |  |      move.l 20(a0),d1
    3ccc:	|  |  |      move.l 32(sp),d0
    3cd0:	|  |  |      lsl.l #3,d0
    3cd2:	|  |  |      add.l d0,d1
    3cd4:	|  |  |      move.l 40(sp),d0
    3cd8:	|  |  |      move.l d1,-(sp)
    3cda:	|  |  |      move.l d0,-(sp)
    3cdc:	|  |  |      jsr 101ec <copyVariable>
    3ce2:	|  |  |      addq.l #8,sp
		trimStack (vStack);
    3ce4:	|  |  |      move.l 40(sp),-(sp)
    3ce8:	|  |  |      jsr 10694 <trimStack>
    3cee:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    3cf0:	|  \--|----> tst.l 32(sp)
    3cf4:	|     \----- bne.s 3ca6 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    3cf6:	|            movea.l 8(sp),a0
    3cfa:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    3cfe:	|            movea.l 8(sp),a0
    3d02:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    3d06:	|            movea.l 8(sp),a0
    3d0a:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    3d10:	|            movea.l 8(sp),a0
    3d14:	|            move.l 36(sp),40(a0)
	newFunc -> stack = NULL;
    3d1a:	|            movea.l 8(sp),a0
    3d1e:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    3d22:	|            movea.l 8(sp),a0
    3d26:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    3d2a:	|            movea.l 8(sp),a0
    3d2e:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    3d32:	|            movea.l 8(sp),a0
    3d36:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    3d3a:	|            movea.l 8(sp),a0
    3d3e:	|            clr.l 28(a0)

	restartFunction (newFunc);
    3d42:	|            move.l 8(sp),-(sp)
    3d46:	|            jsr 39d4 <restartFunction>
    3d4c:	|            addq.l #4,sp
	return 1;
    3d4e:	|            moveq #1,d0
}
    3d50:	\----------> movea.l (sp)+,a6
    3d52:	             lea 20(sp),sp
    3d56:	             rts

00003d58 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    3d58:	clr.w 16010 <sliceBusy>
}
    3d5e:	nop
    3d60:	rts

00003d62 <getNumberedString>:

char * getNumberedString (int value) {
    3d62:	       lea -56(sp),sp
    3d66:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    3d6a:	       move.w 16010 <sliceBusy>,d0
    3d70:	   /-- beq.s 3dba <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    3d72:	   |   move.l 17b30 <DOSBase>,d0
    3d78:	   |   movea.l d0,a6
    3d7a:	   |   jsr -60(a6)
    3d7e:	   |   move.l d0,28(sp)
    3d82:	   |   move.l 28(sp),d0
    3d86:	   |   move.l d0,24(sp)
    3d8a:	   |   move.l #78039,20(sp)
    3d92:	   |   moveq #76,d0
    3d94:	   |   move.l d0,16(sp)
    3d98:	   |   move.l 17b30 <DOSBase>,d0
    3d9e:	   |   movea.l d0,a6
    3da0:	   |   move.l 24(sp),d1
    3da4:	   |   move.l 20(sp),d2
    3da8:	   |   move.l 16(sp),d3
    3dac:	   |   jsr -48(a6)
    3db0:	   |   move.l d0,12(sp)
		return NULL;
    3db4:	   |   moveq #0,d0
    3db6:	/--|-- bra.w 3e56 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    3dba:	|  \-> move.l 17b10 <bigDataFile>,64(sp)
    3dc2:	|      move.l 72(sp),d0
    3dc6:	|      add.l d0,d0
    3dc8:	|      add.l d0,d0
    3dca:	|      move.l d0,d1
    3dcc:	|      move.l 17b1c <startOfTextIndex>,d0
    3dd2:	|      add.l d1,d0
    3dd4:	|      move.l d0,60(sp)
    3dd8:	|      moveq #-1,d0
    3dda:	|      move.l d0,56(sp)
    3dde:	|      move.l 17b30 <DOSBase>,d0
    3de4:	|      movea.l d0,a6
    3de6:	|      move.l 64(sp),d1
    3dea:	|      move.l 60(sp),d2
    3dee:	|      move.l 56(sp),d3
    3df2:	|      jsr -66(a6)
    3df6:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    3dfa:	|      move.l 17b10 <bigDataFile>,d0
    3e00:	|      move.l d0,-(sp)
    3e02:	|      jsr 718 <get4bytes>
    3e08:	|      addq.l #4,sp
    3e0a:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    3e0e:	|      move.l 17b10 <bigDataFile>,48(sp)
    3e16:	|      move.l 72(sp),44(sp)
    3e1c:	|      moveq #-1,d0
    3e1e:	|      move.l d0,40(sp)
    3e22:	|      move.l 17b30 <DOSBase>,d0
    3e28:	|      movea.l d0,a6
    3e2a:	|      move.l 48(sp),d1
    3e2e:	|      move.l 44(sp),d2
    3e32:	|      move.l 40(sp),d3
    3e36:	|      jsr -66(a6)
    3e3a:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    3e3e:	|      move.l 17b10 <bigDataFile>,d0
    3e44:	|      move.l d0,-(sp)
    3e46:	|      jsr b02 <readString>
    3e4c:	|      addq.l #4,sp
    3e4e:	|      move.l d0,32(sp)
	
	return s;
    3e52:	|      move.l 32(sp),d0
}
    3e56:	\----> movem.l (sp)+,d2-d3/a6
    3e5a:	       lea 56(sp),sp
    3e5e:	       rts

00003e60 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    3e60:	       lea -32(sp),sp
    3e64:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    3e68:	       move.w 16010 <sliceBusy>,d0
    3e6e:	   /-- beq.s 3e8a <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    3e70:	   |   pea 13124 <thumbnail.c.7eb31449+0x40>
    3e76:	   |   pea 13142 <thumbnail.c.7eb31449+0x5e>
    3e7c:	   |   jsr 11d08 <KPrintF>
    3e82:	   |   addq.l #8,sp
		return 0;
    3e84:	   |   moveq #0,d0
    3e86:	/--|-- bra.w 3f1e <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), 0);	
    3e8a:	|  \-> move.l 17b10 <bigDataFile>,40(sp)
    3e92:	|      move.l 48(sp),d0
    3e96:	|      add.l d0,d0
    3e98:	|      add.l d0,d0
    3e9a:	|      move.l d0,d1
    3e9c:	|      move.l 17b18 <startOfDataIndex>,d0
    3ea2:	|      add.l d1,d0
    3ea4:	|      move.l d0,36(sp)
    3ea8:	|      clr.l 32(sp)
    3eac:	|      move.l 17b30 <DOSBase>,d0
    3eb2:	|      movea.l d0,a6
    3eb4:	|      move.l 40(sp),d1
    3eb8:	|      move.l 36(sp),d2
    3ebc:	|      move.l 32(sp),d3
    3ec0:	|      jsr -66(a6)
    3ec4:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), 1);
    3ec8:	|      move.l 17b10 <bigDataFile>,24(sp)
    3ed0:	|      move.l 17b10 <bigDataFile>,d0
    3ed6:	|      move.l d0,-(sp)
    3ed8:	|      jsr 718 <get4bytes>
    3ede:	|      addq.l #4,sp
    3ee0:	|      move.l d0,20(sp)
    3ee4:	|      moveq #1,d0
    3ee6:	|      move.l d0,16(sp)
    3eea:	|      move.l 17b30 <DOSBase>,d0
    3ef0:	|      movea.l d0,a6
    3ef2:	|      move.l 24(sp),d1
    3ef6:	|      move.l 20(sp),d2
    3efa:	|      move.l 16(sp),d3
    3efe:	|      jsr -66(a6)
    3f02:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    3f06:	|      move.w #1,16010 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    3f0e:	|      move.l 17b10 <bigDataFile>,d0
    3f14:	|      move.l d0,-(sp)
    3f16:	|      jsr 718 <get4bytes>
    3f1c:	|      addq.l #4,sp
}
    3f1e:	\----> movem.l (sp)+,d2-d3/a6
    3f22:	       lea 32(sp),sp
    3f26:	       rts

00003f28 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    3f28:	       lea -32(sp),sp
    3f2c:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    3f30:	       move.w 16010 <sliceBusy>,d0
    3f36:	   /-- beq.s 3f52 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    3f38:	   |   pea 13124 <thumbnail.c.7eb31449+0x40>
    3f3e:	   |   pea 13142 <thumbnail.c.7eb31449+0x5e>
    3f44:	   |   jsr 11d08 <KPrintF>
    3f4a:	   |   addq.l #8,sp
        return FALSE;
    3f4c:	   |   clr.w d0
    3f4e:	/--|-- bra.w 3fde <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    3f52:	|  \-> move.l 17b10 <bigDataFile>,40(sp)
    3f5a:	|      move.l 48(sp),d0
    3f5e:	|      add.l d0,d0
    3f60:	|      add.l d0,d0
    3f62:	|      move.l d0,d1
    3f64:	|      move.l 17b24 <startOfObjectIndex>,d0
    3f6a:	|      add.l d1,d0
    3f6c:	|      move.l d0,36(sp)
    3f70:	|      moveq #-1,d0
    3f72:	|      move.l d0,32(sp)
    3f76:	|      move.l 17b30 <DOSBase>,d0
    3f7c:	|      movea.l d0,a6
    3f7e:	|      move.l 40(sp),d1
    3f82:	|      move.l 36(sp),d2
    3f86:	|      move.l 32(sp),d3
    3f8a:	|      jsr -66(a6)
    3f8e:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    3f92:	|      move.l 17b10 <bigDataFile>,24(sp)
    3f9a:	|      move.l 17b10 <bigDataFile>,d0
    3fa0:	|      move.l d0,-(sp)
    3fa2:	|      jsr 718 <get4bytes>
    3fa8:	|      addq.l #4,sp
    3faa:	|      move.l d0,20(sp)
    3fae:	|      moveq #-1,d0
    3fb0:	|      move.l d0,16(sp)
    3fb4:	|      move.l 17b30 <DOSBase>,d0
    3fba:	|      movea.l d0,a6
    3fbc:	|      move.l 24(sp),d1
    3fc0:	|      move.l 20(sp),d2
    3fc4:	|      move.l 16(sp),d3
    3fc8:	|      jsr -66(a6)
    3fcc:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    3fd0:	|      move.w #1,16010 <sliceBusy>
    3fd8:	|      move.w 16010 <sliceBusy>,d0
}
    3fde:	\----> movem.l (sp)+,d2-d3/a6
    3fe2:	       lea 32(sp),sp
    3fe6:	       rts

00003fe8 <openSubSlice>:

BOOL openSubSlice (int num) {
    3fe8:	       lea -32(sp),sp
    3fec:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    3ff0:	       move.w 16010 <sliceBusy>,d0
    3ff6:	   /-- beq.s 4012 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    3ff8:	   |   pea 13124 <thumbnail.c.7eb31449+0x40>
    3ffe:	   |   pea 13142 <thumbnail.c.7eb31449+0x5e>
    4004:	   |   jsr 11d08 <KPrintF>
    400a:	   |   addq.l #8,sp
		return FALSE;
    400c:	   |   clr.w d0
    400e:	/--|-- bra.w 409e <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    4012:	|  \-> move.l 17b10 <bigDataFile>,40(sp)
    401a:	|      move.l 48(sp),d0
    401e:	|      add.l d0,d0
    4020:	|      add.l d0,d0
    4022:	|      move.l d0,d1
    4024:	|      move.l 17b20 <startOfSubIndex>,d0
    402a:	|      add.l d1,d0
    402c:	|      move.l d0,36(sp)
    4030:	|      moveq #-1,d0
    4032:	|      move.l d0,32(sp)
    4036:	|      move.l 17b30 <DOSBase>,d0
    403c:	|      movea.l d0,a6
    403e:	|      move.l 40(sp),d1
    4042:	|      move.l 36(sp),d2
    4046:	|      move.l 32(sp),d3
    404a:	|      jsr -66(a6)
    404e:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    4052:	|      move.l 17b10 <bigDataFile>,24(sp)
    405a:	|      move.l 17b10 <bigDataFile>,d0
    4060:	|      move.l d0,-(sp)
    4062:	|      jsr 718 <get4bytes>
    4068:	|      addq.l #4,sp
    406a:	|      move.l d0,20(sp)
    406e:	|      moveq #-1,d0
    4070:	|      move.l d0,16(sp)
    4074:	|      move.l 17b30 <DOSBase>,d0
    407a:	|      movea.l d0,a6
    407c:	|      move.l 24(sp),d1
    4080:	|      move.l 20(sp),d2
    4084:	|      move.l 16(sp),d3
    4088:	|      jsr -66(a6)
    408c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    4090:	|      move.w #1,16010 <sliceBusy>
    4098:	|      move.w 16010 <sliceBusy>,d0
}
    409e:	\----> movem.l (sp)+,d2-d3/a6
    40a2:	       lea 32(sp),sp
    40a6:	       rts

000040a8 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    40a8:	       lea -180(sp),sp
    40ac:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    40b0:	       tst.l 196(sp)
    40b4:	/----- beq.s 40f4 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    40b6:	|      move.l 196(sp),17b10 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    40be:	|      move.l 196(sp),168(sp)
    40c4:	|      clr.l 164(sp)
    40c8:	|      clr.l 160(sp)
    40cc:	|      move.l 17b30 <DOSBase>,d0
    40d2:	|      movea.l d0,a6
    40d4:	|      move.l 168(sp),d1
    40d8:	|      move.l 164(sp),d2
    40dc:	|      move.l 160(sp),d3
    40e0:	|      jsr -66(a6)
    40e4:	|      move.l d0,156(sp)
    40e8:	|      move.l 156(sp),d0
    40ec:	|      move.l d0,17b14 <startIndex>
    40f2:	|  /-- bra.s 412e <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    40f4:	\--|-> move.l 17b10 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    40fc:	   |   move.l 196(sp),184(sp)
    4102:	   |   move.l 17b14 <startIndex>,d0
    4108:	   |   move.l d0,180(sp)
    410c:	   |   moveq #-1,d0
    410e:	   |   move.l d0,176(sp)
    4112:	   |   move.l 17b30 <DOSBase>,d0
    4118:	   |   movea.l d0,a6
    411a:	   |   move.l 184(sp),d1
    411e:	   |   move.l 180(sp),d2
    4122:	   |   move.l 176(sp),d3
    4126:	   |   jsr -66(a6)
    412a:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    412e:	   \-> clr.w 16010 <sliceBusy>

	if (skipBefore > numLanguages) {
    4134:	       move.l 204(sp),d0
    4138:	       cmp.l 200(sp),d0
    413c:	   /-- bls.s 4150 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    413e:	   |   pea 1315c <thumbnail.c.7eb31449+0x78>
    4144:	   |   jsr 11d08 <KPrintF>
    414a:	   |   addq.l #4,sp
		skipBefore = 0;
    414c:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    4150:	   \-> move.l 200(sp),d0
    4154:	       sub.l 204(sp),d0
    4158:	       move.l d0,188(sp)
	while (skipBefore) {
    415c:	   /-- bra.s 4198 <setFileIndices+0xf0>
        Seek(fp, get4bytes(fp),0);		
    415e:	/--|-> move.l 196(sp),24(sp)
    4164:	|  |   move.l 196(sp),-(sp)
    4168:	|  |   jsr 718 <get4bytes>
    416e:	|  |   addq.l #4,sp
    4170:	|  |   move.l d0,20(sp)
    4174:	|  |   clr.l 16(sp)
    4178:	|  |   move.l 17b30 <DOSBase>,d0
    417e:	|  |   movea.l d0,a6
    4180:	|  |   move.l 24(sp),d1
    4184:	|  |   move.l 20(sp),d2
    4188:	|  |   move.l 16(sp),d3
    418c:	|  |   jsr -66(a6)
    4190:	|  |   move.l d0,12(sp)
		skipBefore --;
    4194:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    4198:	|  \-> tst.l 204(sp)
    419c:	\----- bne.s 415e <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    419e:	       move.l 196(sp),152(sp)
    41a4:	       clr.l 148(sp)
    41a8:	       clr.l 144(sp)
    41ac:	       move.l 17b30 <DOSBase>,d0
    41b2:	       movea.l d0,a6
    41b4:	       move.l 152(sp),d1
    41b8:	       move.l 148(sp),d2
    41bc:	       move.l 144(sp),d3
    41c0:	       jsr -66(a6)
    41c4:	       move.l d0,140(sp)
    41c8:	       move.l 140(sp),d0
    41cc:	       addq.l #4,d0
    41ce:	       move.l d0,17b1c <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    41d4:	       move.l 196(sp),136(sp)
    41da:	       move.l 196(sp),-(sp)
    41de:	       jsr 718 <get4bytes>
    41e4:	       addq.l #4,sp
    41e6:	       move.l d0,132(sp)
    41ea:	       moveq #-1,d0
    41ec:	       move.l d0,128(sp)
    41f0:	       move.l 17b30 <DOSBase>,d0
    41f6:	       movea.l d0,a6
    41f8:	       move.l 136(sp),d1
    41fc:	       move.l 132(sp),d2
    4200:	       move.l 128(sp),d3
    4204:	       jsr -66(a6)
    4208:	       move.l d0,124(sp)

	while (skipAfter) {
    420c:	   /-- bra.s 424a <setFileIndices+0x1a2>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    420e:	/--|-> move.l 196(sp),40(sp)
    4214:	|  |   move.l 196(sp),-(sp)
    4218:	|  |   jsr 718 <get4bytes>
    421e:	|  |   addq.l #4,sp
    4220:	|  |   move.l d0,36(sp)
    4224:	|  |   moveq #-1,d0
    4226:	|  |   move.l d0,32(sp)
    422a:	|  |   move.l 17b30 <DOSBase>,d0
    4230:	|  |   movea.l d0,a6
    4232:	|  |   move.l 40(sp),d1
    4236:	|  |   move.l 36(sp),d2
    423a:	|  |   move.l 32(sp),d3
    423e:	|  |   jsr -66(a6)
    4242:	|  |   move.l d0,28(sp)
		skipAfter --;
    4246:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    424a:	|  \-> tst.l 188(sp)
    424e:	\----- bne.s 420e <setFileIndices+0x166>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    4250:	       move.l 196(sp),120(sp)
    4256:	       clr.l 116(sp)
    425a:	       clr.l 112(sp)
    425e:	       move.l 17b30 <DOSBase>,d0
    4264:	       movea.l d0,a6
    4266:	       move.l 120(sp),d1
    426a:	       move.l 116(sp),d2
    426e:	       move.l 112(sp),d3
    4272:	       jsr -66(a6)
    4276:	       move.l d0,108(sp)
    427a:	       move.l 108(sp),d0
    427e:	       addq.l #4,d0
    4280:	       move.l d0,17b20 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    4286:	       move.l 196(sp),104(sp)
    428c:	       move.l 196(sp),-(sp)
    4290:	       jsr 718 <get4bytes>
    4296:	       addq.l #4,sp
    4298:	       move.l d0,100(sp)
    429c:	       clr.l 96(sp)
    42a0:	       move.l 17b30 <DOSBase>,d0
    42a6:	       movea.l d0,a6
    42a8:	       move.l 104(sp),d1
    42ac:	       move.l 100(sp),d2
    42b0:	       move.l 96(sp),d3
    42b4:	       jsr -66(a6)
    42b8:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    42bc:	       move.l 196(sp),88(sp)
    42c2:	       clr.l 84(sp)
    42c6:	       clr.l 80(sp)
    42ca:	       move.l 17b30 <DOSBase>,d0
    42d0:	       movea.l d0,a6
    42d2:	       move.l 88(sp),d1
    42d6:	       move.l 84(sp),d2
    42da:	       move.l 80(sp),d3
    42de:	       jsr -66(a6)
    42e2:	       move.l d0,76(sp)
    42e6:	       move.l 76(sp),d0
    42ea:	       addq.l #4,d0
    42ec:	       move.l d0,17b24 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    42f2:	       move.l 196(sp),72(sp)
    42f8:	       move.l 196(sp),-(sp)
    42fc:	       jsr 718 <get4bytes>
    4302:	       addq.l #4,sp
    4304:	       move.l d0,68(sp)
    4308:	       clr.l 64(sp)
    430c:	       move.l 17b30 <DOSBase>,d0
    4312:	       movea.l d0,a6
    4314:	       move.l 72(sp),d1
    4318:	       move.l 68(sp),d2
    431c:	       move.l 64(sp),d3
    4320:	       jsr -66(a6)
    4324:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    4328:	       move.l 196(sp),56(sp)
    432e:	       clr.l 52(sp)
    4332:	       clr.l 48(sp)
    4336:	       move.l 17b30 <DOSBase>,d0
    433c:	       movea.l d0,a6
    433e:	       move.l 56(sp),d1
    4342:	       move.l 52(sp),d2
    4346:	       move.l 48(sp),d3
    434a:	       jsr -66(a6)
    434e:	       move.l d0,44(sp)
    4352:	       move.l 44(sp),d0
    4356:	       move.l d0,17b18 <startOfDataIndex>
    435c:	       nop
    435e:	       movem.l (sp)+,d2-d3/a6
    4362:	       lea 180(sp),sp
    4366:	       rts

00004368 <WaitVbl>:
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
}

//vblank begins at vpos 312 hpos 1 and ends at vpos 25 hpos 1
//vsync begins at line 2 hpos 132 and ends at vpos 5 hpos 18 
void WaitVbl() {
    4368:	       subq.l #8,sp
	debug_start_idle();
    436a:	       jsr 11ee0 <debug_start_idle>
	while (1) {
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
    4370:	   /-> movea.l #14675972,a0
    4376:	   |   move.l (a0),d0
    4378:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
    437a:	   |   move.l (sp),d0
    437c:	   |   andi.l #130816,d0
    4382:	   |   move.l d0,(sp)
		if (vpos!=(311<<8))
    4384:	   |   move.l (sp),d0
    4386:	   |   cmpi.l #79616,d0
    438c:	   \-- beq.s 4370 <WaitVbl+0x8>
			break;
	}
	while (1) {
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
    438e:	/----> movea.l #14675972,a0
    4394:	|      move.l (a0),d0
    4396:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
    439a:	|      move.l 4(sp),d0
    439e:	|      andi.l #130816,d0
    43a4:	|      move.l d0,4(sp)
		if (vpos==(311<<8))
    43a8:	|      move.l 4(sp),d0
    43ac:	|      cmpi.l #79616,d0
    43b2:	|  /-- beq.s 43b6 <WaitVbl+0x4e>
	while (1) {
    43b4:	\--|-- bra.s 438e <WaitVbl+0x26>
			break;
    43b6:	   \-> nop
	}
	debug_stop_idle();
    43b8:	       jsr 11efa <debug_stop_idle>
}
    43be:	       nop
    43c0:	       addq.l #8,sp
    43c2:	       rts

000043c4 <p61Init>:
	// The Player® 6.1A: Copyright © 1992-95 Jarno Paananen
	// P61.testmod - Module by Skylord/Sector 7 
	INCBIN(player, "player610.6.no_cia.bin")
	INCBIN_CHIP(module, "testmod.p61")

	int p61Init(const void* module) { // returns 0 if success, non-zero otherwise
    43c4:	move.l a3,-(sp)
    43c6:	move.l a2,-(sp)
		register volatile const void* _a0 ASM("a0") = module;
    43c8:	movea.l 12(sp),a0
		register volatile const void* _a1 ASM("a1") = NULL;
    43cc:	suba.l a1,a1
		register volatile const void* _a2 ASM("a2") = NULL;
    43ce:	suba.l a2,a2
		register volatile const void* _a3 ASM("a3") = player;
    43d0:	move.l 16012 <player>,d0
    43d6:	movea.l d0,a3
		register                int   _d0 ASM("d0"); // return value
		__asm volatile (
    43d8:	movem.l d1-d7/a4-a6,-(sp)
    43dc:	jsr (a3)
    43de:	movem.l (sp)+,d1-d7/a4-a6
			"movem.l (%%sp)+,%%d1-%%d7/%%a4-%%a6"
		: "=r" (_d0), "+rf"(_a0), "+rf"(_a1), "+rf"(_a2), "+rf"(_a3)
		:
		: "cc", "memory");
		return _d0;
	}
    43e2:	movea.l (sp)+,a2
    43e4:	movea.l (sp)+,a3
    43e6:	rts

000043e8 <p61End>:
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}

	void p61End() {
    43e8:	move.l a6,-(sp)
    43ea:	move.l a3,-(sp)
		register volatile const void* _a3 ASM("a3") = player;
    43ec:	move.l 16012 <player>,d0
    43f2:	movea.l d0,a3
		register volatile const void* _a6 ASM("a6") = (void*)0xdff000;
    43f4:	movea.l #14675968,a6
		__asm volatile (
    43fa:	movem.l d0-d1/a0-a1,-(sp)
    43fe:	jsr 8(a3)
    4402:	movem.l (sp)+,d0-d1/a0-a1
			"jsr 8(%%a3)\n"
			"movem.l (%%sp)+,%%d0-%%d1/%%a0-%%a1"
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}
    4406:	nop
    4408:	movea.l (sp)+,a3
    440a:	movea.l (sp)+,a6
    440c:	rts

0000440e <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    440e:	    lea -128(sp),sp
    4412:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    4416:	    movea.w #4,a0
    441a:	    move.l (a0),d0
    441c:	    move.l d0,17b28 <SysBase>
	custom = (struct Custom*)0xdff000;	
    4422:	    move.l #14675968,17b2c <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    442c:	    move.l #84749,136(sp)
    4434:	    clr.l 132(sp)
    4438:	    move.l 17b28 <SysBase>,d0
    443e:	    movea.l d0,a6
    4440:	    movea.l 136(sp),a1
    4444:	    move.l 132(sp),d0
    4448:	    jsr -552(a6)
    444c:	    move.l d0,128(sp)
    4450:	    move.l 128(sp),d0
    4454:	    move.l d0,17b34 <GfxBase>
	if (!GfxBase)
    445a:	    move.l 17b34 <GfxBase>,d0
    4460:	/-- bne.s 4476 <main+0x68>
		Exit(0);
    4462:	|   clr.l 124(sp)
    4466:	|   move.l 17b30 <DOSBase>,d0
    446c:	|   movea.l d0,a6
    446e:	|   move.l 124(sp),d1
    4472:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    4476:	\-> move.l #84766,120(sp)
    447e:	    clr.l 116(sp)
    4482:	    move.l 17b28 <SysBase>,d0
    4488:	    movea.l d0,a6
    448a:	    movea.l 120(sp),a1
    448e:	    move.l 116(sp),d0
    4492:	    jsr -552(a6)
    4496:	    move.l d0,112(sp)
    449a:	    move.l 112(sp),d0
    449e:	    move.l d0,17b30 <DOSBase>
	if (!DOSBase)
    44a4:	    move.l 17b30 <DOSBase>,d0
    44aa:	/-- bne.s 44c0 <main+0xb2>
		Exit(0);
    44ac:	|   clr.l 108(sp)
    44b0:	|   move.l 17b30 <DOSBase>,d0
    44b6:	|   movea.l d0,a6
    44b8:	|   move.l 108(sp),d1
    44bc:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    44c0:	\-> move.l #84778,104(sp)
    44c8:	    clr.l 100(sp)
    44cc:	    move.l 17b28 <SysBase>,d0
    44d2:	    movea.l d0,a6
    44d4:	    movea.l 104(sp),a1
    44d8:	    move.l 100(sp),d0
    44dc:	    jsr -552(a6)
    44e0:	    move.l d0,96(sp)
    44e4:	    move.l 96(sp),d0
    44e8:	    move.l d0,17b38 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    44ee:	    move.l 17b38 <MathIeeeSingBasBase>,d0
    44f4:	/-- bne.s 450a <main+0xfc>
		Exit(0);	
    44f6:	|   clr.l 92(sp)
    44fa:	|   move.l 17b30 <DOSBase>,d0
    4500:	|   movea.l d0,a6
    4502:	|   move.l 92(sp),d1
    4506:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    450a:	\-> move.l #84802,88(sp)
    4512:	    clr.l 84(sp)
    4516:	    move.l 17b28 <SysBase>,d0
    451c:	    movea.l d0,a6
    451e:	    movea.l 88(sp),a1
    4522:	    move.l 84(sp),d0
    4526:	    jsr -552(a6)
    452a:	    move.l d0,80(sp)
    452e:	    move.l 80(sp),d0
    4532:	    move.l d0,17b3c <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    4538:	    move.l 17b3c <MathIeeeSingTransBase>,d0
    453e:	/-- bne.s 4554 <main+0x146>
		Exit(0);
    4540:	|   clr.l 76(sp)
    4544:	|   move.l 17b30 <DOSBase>,d0
    454a:	|   movea.l d0,a6
    454c:	|   move.l 76(sp),d1
    4550:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    4554:	\-> move.l #84828,72(sp)
    455c:	    clr.l 68(sp)
    4560:	    move.l 17b28 <SysBase>,d0
    4566:	    movea.l d0,a6
    4568:	    movea.l 72(sp),a1
    456c:	    move.l 68(sp),d0
    4570:	    jsr -552(a6)
    4574:	    move.l d0,64(sp)
    4578:	    move.l 64(sp),d0
    457c:	    move.l d0,17b44 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    4582:	    move.l 17b44 <MathIeeeDoubTransBase>,d0
    4588:	/-- bne.s 459e <main+0x190>
		Exit(0);
    458a:	|   clr.l 60(sp)
    458e:	|   move.l 17b30 <DOSBase>,d0
    4594:	|   movea.l d0,a6
    4596:	|   move.l 60(sp),d1
    459a:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    459e:	\-> move.l #84854,56(sp)
    45a6:	    clr.l 52(sp)
    45aa:	    move.l 17b28 <SysBase>,d0
    45b0:	    movea.l d0,a6
    45b2:	    movea.l 56(sp),a1
    45b6:	    move.l 52(sp),d0
    45ba:	    jsr -552(a6)
    45be:	    move.l d0,48(sp)
    45c2:	    move.l 48(sp),d0
    45c6:	    move.l d0,17b40 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    45cc:	    move.l 17b40 <MathIeeeDoubBasBase>,d0
    45d2:	/-- bne.s 45e8 <main+0x1da>
		Exit(0);
    45d4:	|   clr.l 44(sp)
    45d8:	|   move.l 17b30 <DOSBase>,d0
    45de:	|   movea.l d0,a6
    45e0:	|   move.l 44(sp),d1
    45e4:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    45e8:	\-> pea 14b8e <incbin_player_end+0x82>
    45ee:	    jsr 11d08 <KPrintF>
    45f4:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    45f6:	    move.l 17b30 <DOSBase>,d0
    45fc:	    movea.l d0,a6
    45fe:	    jsr -60(a6)
    4602:	    move.l d0,40(sp)
    4606:	    move.l 40(sp),d0
    460a:	    move.l d0,36(sp)
    460e:	    move.l #84906,32(sp)
    4616:	    moveq #15,d0
    4618:	    move.l d0,28(sp)
    461c:	    move.l 17b30 <DOSBase>,d0
    4622:	    movea.l d0,a6
    4624:	    move.l 36(sp),d1
    4628:	    move.l 32(sp),d2
    462c:	    move.l 28(sp),d3
    4630:	    jsr -48(a6)
    4634:	    move.l d0,24(sp)
	Delay(50);
    4638:	    moveq #50,d0
    463a:	    move.l d0,20(sp)
    463e:	    move.l 17b30 <DOSBase>,d0
    4644:	    movea.l d0,a6
    4646:	    move.l 20(sp),d1
    464a:	    jsr -198(a6)

	warpmode(1);
    464e:	    pea 1 <_start+0x1>
    4652:	    jsr 11d72 <warpmode>
    4658:	    addq.l #4,sp
	// TODO: precalc stuff here
#ifdef MUSIC
	if(p61Init(module) != 0)
    465a:	    move.l 16016 <module>,d0
    4660:	    move.l d0,-(sp)
    4662:	    jsr 43c4 <p61Init>
    4668:	    addq.l #4,sp
    466a:	    tst.l d0
    466c:	/-- beq.s 467c <main+0x26e>
		KPrintF("p61Init failed!\n");
    466e:	|   pea 14bba <incbin_player_end+0xae>
    4674:	|   jsr 11d08 <KPrintF>
    467a:	|   addq.l #4,sp
#endif
	warpmode(0);
    467c:	\-> clr.l -(sp)
    467e:	    jsr 11d72 <warpmode>
    4684:	    addq.l #4,sp

	//TakeSystem();
	custom->dmacon = 0x87ff;
    4686:	    movea.l 17b2c <custom>,a0
    468c:	    move.w #-30721,150(a0)
	WaitVbl();
    4692:	    jsr 4368 <WaitVbl>

	main_sludge(argc, argv);
    4698:	    move.l 148(sp),-(sp)
    469c:	    move.l 148(sp),-(sp)
    46a0:	    jsr 10d0 <main_sludge>
    46a6:	    addq.l #8,sp
	debug_register_palette(colors, "image.pal", 32, 0);
	debug_register_copperlist(copper1, "copper1", 1024, 0);
	debug_register_copperlist(copper2, "copper2", sizeof(copper2), 0);*/

#ifdef MUSIC
	p61End();
    46a8:	    jsr 43e8 <p61End>
#endif

	// END
	//FreeSystem();

	CloseLibrary((struct Library*)DOSBase);
    46ae:	    move.l 17b30 <DOSBase>,16(sp)
    46b6:	    move.l 17b28 <SysBase>,d0
    46bc:	    movea.l d0,a6
    46be:	    movea.l 16(sp),a1
    46c2:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    46c6:	    move.l 17b34 <GfxBase>,12(sp)
    46ce:	    move.l 17b28 <SysBase>,d0
    46d4:	    movea.l d0,a6
    46d6:	    movea.l 12(sp),a1
    46da:	    jsr -414(a6)
    46de:	    moveq #0,d0
}
    46e0:	    movem.l (sp)+,d2-d3/a6
    46e4:	    lea 128(sp),sp
    46e8:	    rts

000046ea <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    46ea:	    lea -16(sp),sp
    46ee:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    46f0:	    moveq #8,d0
    46f2:	    move.l d0,16(sp)
    46f6:	    clr.l 12(sp)
    46fa:	    move.l 17b28 <SysBase>,d0
    4700:	    movea.l d0,a6
    4702:	    move.l 16(sp),d0
    4706:	    move.l 12(sp),d1
    470a:	    jsr -684(a6)
    470e:	    move.l d0,8(sp)
    4712:	    move.l 8(sp),d0
    4716:	    move.l d0,4(sp)
	if (!newStat) {
    471a:	/-- bne.s 474a <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    471c:	|   movea.l 1601a <nowStatus>,a0
    4722:	|   move.l (a0),d0
    4724:	|   movea.l 4(sp),a0
    4728:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    472c:	|   pea 12dc9 <cursors.c.46c58bd4+0x2>
    4732:	|   jsr b8 <copyString>
    4738:	|   addq.l #4,sp
    473a:	|   movea.l 4(sp),a0
    473e:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    4740:	|   movea.l 1601a <nowStatus>,a0
    4746:	|   move.l 4(sp),(a0)
	}
}
    474a:	\-> nop
    474c:	    movea.l (sp)+,a6
    474e:	    lea 16(sp),sp
    4752:	    rts

00004754 <clearStatusBar>:

void clearStatusBar () {
    4754:	       lea -16(sp),sp
    4758:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    475a:	       movea.l 1601a <nowStatus>,a0
    4760:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    4764:	       movea.l 1601a <nowStatus>,a0
    476a:	       moveq #-1,d0
    476c:	       move.l d0,6(a0)
	while (stat) {
    4770:	   /-- bra.s 47b0 <clearStatusBar+0x5c>
		kill = stat;
    4772:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    4778:	|  |   movea.l 16(sp),a0
    477c:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    4782:	|  |   movea.l 12(sp),a0
    4786:	|  |   move.l (a0),8(sp)
    478a:	|  |   move.l 17b28 <SysBase>,d0
    4790:	|  |   movea.l d0,a6
    4792:	|  |   movea.l 8(sp),a1
    4796:	|  |   jsr -690(a6)
		FreeVec(kill);
    479a:	|  |   move.l 12(sp),4(sp)
    47a0:	|  |   move.l 17b28 <SysBase>,d0
    47a6:	|  |   movea.l d0,a6
    47a8:	|  |   movea.l 4(sp),a1
    47ac:	|  |   jsr -690(a6)
	while (stat) {
    47b0:	|  \-> tst.l 16(sp)
    47b4:	\----- bne.s 4772 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    47b6:	       movea.l 1601a <nowStatus>,a0
    47bc:	       clr.l (a0)
}
    47be:	       nop
    47c0:	       movea.l (sp)+,a6
    47c2:	       lea 16(sp),sp
    47c6:	       rts

000047c8 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    47c8:	clr.l 17b48 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    47ce:	move.w #-1,17b4c <mainStatus+0x4>
	mainStatus.litStatus = -1;
    47d6:	moveq #-1,d0
    47d8:	move.l d0,17b4e <mainStatus+0x6>
	mainStatus.statusX = 10;
    47de:	moveq #10,d0
    47e0:	move.l d0,17b52 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    47e6:	movea.l 17a2c <winHeight>,a0
    47ec:	lea -15(a0),a0
    47f0:	move.l a0,d0
    47f2:	move.l d0,17b56 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    47f8:	nop
    47fa:	rts

000047fc <killLastStatus>:

void killLastStatus () {
    47fc:	    lea -12(sp),sp
    4800:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    4802:	    movea.l 1601a <nowStatus>,a0
    4808:	    move.l (a0),d0
    480a:	/-- beq.s 4854 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    480c:	|   movea.l 1601a <nowStatus>,a0
    4812:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    4816:	|   movea.l 1601a <nowStatus>,a0
    481c:	|   movea.l 12(sp),a1
    4820:	|   move.l 4(a1),d0
    4824:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    4826:	|   movea.l 12(sp),a0
    482a:	|   move.l (a0),8(sp)
    482e:	|   move.l 17b28 <SysBase>,d0
    4834:	|   movea.l d0,a6
    4836:	|   movea.l 8(sp),a1
    483a:	|   jsr -690(a6)
		FreeVec(kill);
    483e:	|   move.l 12(sp),4(sp)
    4844:	|   move.l 17b28 <SysBase>,d0
    484a:	|   movea.l d0,a6
    484c:	|   movea.l 4(sp),a1
    4850:	|   jsr -690(a6)
	}
}
    4854:	\-> nop
    4856:	    movea.l (sp)+,a6
    4858:	    lea 12(sp),sp
    485c:	    rts

0000485e <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    485e:	movea.l 1601a <nowStatus>,a0
    4864:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    486a:	movea.l 1601a <nowStatus>,a0
    4870:	move.l 8(sp),14(a0)
}
    4876:	nop
    4878:	rts

0000487a <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    487a:	       lea -100(sp),sp
    487e:	       move.l a6,-(sp)
    4880:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    4882:	       movea.l 1601a <nowStatus>,a0
    4888:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    488c:	       movea.l 1601a <nowStatus>,a0
    4892:	       move.w 4(a0),d0
    4896:	       move.w d0,d0
    4898:	       andi.l #65535,d0
    489e:	       move.l 112(sp),-(sp)
    48a2:	       move.l d0,-(sp)
    48a4:	       jsr 8d0 <put2bytes>
    48aa:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    48ac:	       movea.l 1601a <nowStatus>,a0
    48b2:	       move.l 6(a0),d0
    48b6:	       move.l d0,d0
    48b8:	       movea.w d0,a0
    48ba:	       move.l 112(sp),-(sp)
    48be:	       move.l a0,-(sp)
    48c0:	       jsr a9c <putSigned>
    48c6:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    48c8:	       movea.l 1601a <nowStatus>,a0
    48ce:	       move.l 10(a0),d0
    48d2:	       move.l 112(sp),-(sp)
    48d6:	       move.l d0,-(sp)
    48d8:	       jsr 8d0 <put2bytes>
    48de:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    48e0:	       movea.l 1601a <nowStatus>,a0
    48e6:	       move.l 14(a0),d0
    48ea:	       move.l 112(sp),-(sp)
    48ee:	       move.l d0,-(sp)
    48f0:	       jsr 8d0 <put2bytes>
    48f6:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    48f8:	       move.l 112(sp),100(sp)
    48fe:	       movea.l 1601a <nowStatus>,a0
    4904:	       move.l 18(a0),96(sp)
    490a:	       move.l 17b30 <DOSBase>,d0
    4910:	       movea.l d0,a6
    4912:	       move.l 100(sp),d1
    4916:	       move.l 96(sp),d2
    491a:	       jsr -312(a6)
    491e:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    4922:	       move.l 112(sp),88(sp)
    4928:	       movea.l 1601a <nowStatus>,a0
    492e:	       move.l 22(a0),84(sp)
    4934:	       move.l 17b30 <DOSBase>,d0
    493a:	       movea.l d0,a6
    493c:	       move.l 88(sp),d1
    4940:	       move.l 84(sp),d2
    4944:	       jsr -312(a6)
    4948:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    494c:	       move.l 112(sp),76(sp)
    4952:	       movea.l 1601a <nowStatus>,a0
    4958:	       move.l 26(a0),72(sp)
    495e:	       move.l 17b30 <DOSBase>,d0
    4964:	       movea.l d0,a6
    4966:	       move.l 76(sp),d1
    496a:	       move.l 72(sp),d2
    496e:	       jsr -312(a6)
    4972:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    4976:	       move.l 112(sp),64(sp)
    497c:	       movea.l 1601a <nowStatus>,a0
    4982:	       move.l 30(a0),60(sp)
    4988:	       move.l 17b30 <DOSBase>,d0
    498e:	       movea.l d0,a6
    4990:	       move.l 64(sp),d1
    4994:	       move.l 60(sp),d2
    4998:	       jsr -312(a6)
    499c:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    49a0:	       move.l 112(sp),52(sp)
    49a6:	       movea.l 1601a <nowStatus>,a0
    49ac:	       move.l 34(a0),48(sp)
    49b2:	       move.l 17b30 <DOSBase>,d0
    49b8:	       movea.l d0,a6
    49ba:	       move.l 52(sp),d1
    49be:	       move.l 48(sp),d2
    49c2:	       jsr -312(a6)
    49c6:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    49ca:	       move.l 112(sp),40(sp)
    49d0:	       movea.l 1601a <nowStatus>,a0
    49d6:	       move.l 38(a0),36(sp)
    49dc:	       move.l 17b30 <DOSBase>,d0
    49e2:	       movea.l d0,a6
    49e4:	       move.l 40(sp),d1
    49e8:	       move.l 36(sp),d2
    49ec:	       jsr -312(a6)
    49f0:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    49f4:	   /-- bra.s 4a38 <saveStatusBars+0x1be>
		FPutC (fp,1);
    49f6:	/--|-> move.l 112(sp),16(sp)
    49fc:	|  |   moveq #1,d0
    49fe:	|  |   move.l d0,12(sp)
    4a02:	|  |   move.l 17b30 <DOSBase>,d0
    4a08:	|  |   movea.l d0,a6
    4a0a:	|  |   move.l 16(sp),d1
    4a0e:	|  |   move.l 12(sp),d2
    4a12:	|  |   jsr -312(a6)
    4a16:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    4a1a:	|  |   movea.l 104(sp),a0
    4a1e:	|  |   move.l (a0),d0
    4a20:	|  |   move.l 112(sp),-(sp)
    4a24:	|  |   move.l d0,-(sp)
    4a26:	|  |   jsr bd8 <writeString>
    4a2c:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    4a2e:	|  |   movea.l 104(sp),a0
    4a32:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    4a38:	|  \-> tst.l 104(sp)
    4a3c:	\----- bne.s 49f6 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    4a3e:	       move.l 112(sp),28(sp)
    4a44:	       clr.l 24(sp)
    4a48:	       move.l 17b30 <DOSBase>,d0
    4a4e:	       movea.l d0,a6
    4a50:	       move.l 28(sp),d1
    4a54:	       move.l 24(sp),d2
    4a58:	       jsr -312(a6)
    4a5c:	       move.l d0,20(sp)
}
    4a60:	       nop
    4a62:	       move.l (sp)+,d2
    4a64:	       movea.l (sp)+,a6
    4a66:	       lea 100(sp),sp
    4a6a:	       rts

00004a6c <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    4a6c:	movea.l 1601a <nowStatus>,a0
    4a72:	move.l 4(sp),6(a0)
}
    4a78:	nop
    4a7a:	rts

00004a7c <setStatusBar>:

void setStatusBar (char * txt) {
    4a7c:	    subq.l #4,sp
    4a7e:	    move.l a6,-(sp)
    4a80:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    4a82:	    movea.l 1601a <nowStatus>,a0
    4a88:	    move.l (a0),d0
    4a8a:	/-- beq.s 4abe <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    4a8c:	|   movea.l 1601a <nowStatus>,a0
    4a92:	|   movea.l (a0),a0
    4a94:	|   move.l (a0),8(sp)
    4a98:	|   move.l 17b28 <SysBase>,d0
    4a9e:	|   movea.l d0,a6
    4aa0:	|   movea.l 8(sp),a1
    4aa4:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    4aa8:	|   movea.l 1601a <nowStatus>,a0
    4aae:	|   movea.l (a0),a2
    4ab0:	|   move.l 16(sp),-(sp)
    4ab4:	|   jsr b8 <copyString>
    4aba:	|   addq.l #4,sp
    4abc:	|   move.l d0,(a2)
	}
}
    4abe:	\-> nop
    4ac0:	    movea.l (sp)+,a2
    4ac2:	    movea.l (sp)+,a6
    4ac4:	    addq.l #4,sp
    4ac6:	    rts

00004ac8 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    4ac8:	       movea.l 1601a <nowStatus>,a0
    4ace:	       move.l (a0),d0
    4ad0:	/----- beq.s 4ade <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    4ad2:	|      movea.l 1601a <nowStatus>,a0
    4ad8:	|      movea.l (a0),a0
    4ada:	|      move.l (a0),d0
    4adc:	|  /-- bra.s 4ae4 <statusBarText+0x1c>
	} else {
		return "";
    4ade:	\--|-> move.l #77257,d0
	}
    4ae4:	   \-> rts

00004ae6 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    4ae6:	       lea -28(sp),sp
    4aea:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    4aee:	       move.l 52(sp),-(sp)
    4af2:	       jsr 106ee <stringWidth>
    4af8:	       addq.l #4,sp
    4afa:	       asr.l #1,d0
    4afc:	       move.l d0,-(sp)
    4afe:	       jsr 12160 <__floatsisf>
    4b04:	       addq.l #4,sp
    4b06:	       move.l d0,d1
    4b08:	       move.l 16032 <cameraZoom>,d0
    4b0e:	       move.l d0,-(sp)
    4b10:	       move.l d1,-(sp)
    4b12:	       jsr 1200c <__divsf3>
    4b18:	       addq.l #8,sp
    4b1a:	       move.l d0,-(sp)
    4b1c:	       jsr 120f8 <__fixsfsi>
    4b22:	       addq.l #4,sp
    4b24:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    4b28:	       move.l 56(sp),d0
    4b2c:	       sub.l 44(sp),d0
    4b30:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4b34:	       move.l 56(sp),d0
    4b38:	       add.l 44(sp),d0
    4b3c:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    4b40:	       moveq #12,d0
    4b42:	       move.l d0,32(sp)
    4b46:	       clr.l 28(sp)
    4b4a:	       move.l 17b28 <SysBase>,d0
    4b50:	       movea.l d0,a6
    4b52:	       move.l 32(sp),d0
    4b56:	       move.l 28(sp),d1
    4b5a:	       jsr -684(a6)
    4b5e:	       move.l d0,24(sp)
    4b62:	       move.l 24(sp),d0
    4b66:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    4b6a:	       movea.l 17b72 <speech>,a0
    4b70:	       move.l 4(a0),d0
    4b74:	       movea.l 20(sp),a0
    4b78:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    4b7c:	       move.l 52(sp),-(sp)
    4b80:	       jsr b8 <copyString>
    4b86:	       addq.l #4,sp
    4b88:	       movea.l 20(sp),a0
    4b8c:	       move.l d0,(a0)
	newLine -> x = xx1;
    4b8e:	       movea.l 20(sp),a0
    4b92:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    4b98:	       movea.l 17b72 <speech>,a0
    4b9e:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    4ba4:	       moveq #4,d0
    4ba6:	       cmp.l 40(sp),d0
    4baa:	   /-- blt.s 4bcc <addSpeechLine+0xe6>
    4bac:	   |   movea.l 60(sp),a0
    4bb0:	   |   move.l (a0),d1
    4bb2:	   |   moveq #5,d0
    4bb4:	   |   sub.l 40(sp),d0
    4bb8:	   |   cmp.l d1,d0
    4bba:	   +-- ble.s 4bcc <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    4bbc:	   |   moveq #5,d0
    4bbe:	   |   sub.l 40(sp),d0
    4bc2:	   |   movea.l 60(sp),a0
    4bc6:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    4bc8:	/--|-- bra.w 4cf8 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4bcc:	|  \-> move.l 36(sp),-(sp)
    4bd0:	|      jsr 12160 <__floatsisf>
    4bd6:	|      addq.l #4,sp
    4bd8:	|      move.l d0,d2
    4bda:	|      move.l 17a28 <winWidth>,d0
    4be0:	|      move.l d0,-(sp)
    4be2:	|      jsr 12188 <__floatunsisf>
    4be8:	|      addq.l #4,sp
    4bea:	|      move.l d0,d1
    4bec:	|      move.l 16032 <cameraZoom>,d0
    4bf2:	|      move.l d0,-(sp)
    4bf4:	|      move.l d1,-(sp)
    4bf6:	|      jsr 1200c <__divsf3>
    4bfc:	|      addq.l #8,sp
    4bfe:	|      move.l #1084227584,-(sp)
    4c04:	|      move.l d0,-(sp)
    4c06:	|      jsr 12454 <__subsf3>
    4c0c:	|      addq.l #8,sp
    4c0e:	|      move.l d0,-(sp)
    4c10:	|      move.l d2,-(sp)
    4c12:	|      jsr 12248 <__gesf2>
    4c18:	|      addq.l #8,sp
    4c1a:	|      tst.l d0
    4c1c:	|  /-- bge.s 4c22 <addSpeechLine+0x13c>
}
    4c1e:	+--|-- bra.w 4cf8 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4c22:	|  \-> movea.l 60(sp),a0
    4c26:	|      move.l (a0),d0
    4c28:	|      move.l d0,-(sp)
    4c2a:	|      jsr 12160 <__floatsisf>
    4c30:	|      addq.l #4,sp
    4c32:	|      move.l d0,-(sp)
    4c34:	|      jsr 12078 <__extendsfdf2>
    4c3a:	|      addq.l #4,sp
    4c3c:	|      move.l d0,d4
    4c3e:	|      move.l d1,d5
    4c40:	|      move.l 17a28 <winWidth>,d0
    4c46:	|      move.l d0,-(sp)
    4c48:	|      jsr 12188 <__floatunsisf>
    4c4e:	|      addq.l #4,sp
    4c50:	|      move.l d0,d1
    4c52:	|      move.l 16032 <cameraZoom>,d0
    4c58:	|      move.l d0,-(sp)
    4c5a:	|      move.l d1,-(sp)
    4c5c:	|      jsr 1200c <__divsf3>
    4c62:	|      addq.l #8,sp
    4c64:	|      move.l d0,-(sp)
    4c66:	|      jsr 12078 <__extendsfdf2>
    4c6c:	|      addq.l #4,sp
    4c6e:	|      clr.l -(sp)
    4c70:	|      move.l #1075052544,-(sp)
    4c76:	|      move.l d1,-(sp)
    4c78:	|      move.l d0,-(sp)
    4c7a:	|      jsr 123f2 <__subdf3>
    4c80:	|      lea 16(sp),sp
    4c84:	|      move.l d0,d2
    4c86:	|      move.l d1,d3
    4c88:	|      move.l 36(sp),-(sp)
    4c8c:	|      jsr 12120 <__floatsidf>
    4c92:	|      addq.l #4,sp
    4c94:	|      move.l d1,-(sp)
    4c96:	|      move.l d0,-(sp)
    4c98:	|      move.l d3,-(sp)
    4c9a:	|      move.l d2,-(sp)
    4c9c:	|      jsr 123f2 <__subdf3>
    4ca2:	|      lea 16(sp),sp
    4ca6:	|      move.l d1,-(sp)
    4ca8:	|      move.l d0,-(sp)
    4caa:	|      move.l d5,-(sp)
    4cac:	|      move.l d4,-(sp)
    4cae:	|      jsr 1227e <__gtdf2>
    4cb4:	|      lea 16(sp),sp
    4cb8:	|      tst.l d0
    4cba:	|  /-- bgt.s 4cbe <addSpeechLine+0x1d8>
}
    4cbc:	+--|-- bra.s 4cf8 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    4cbe:	|  \-> move.l 17a28 <winWidth>,d0
    4cc4:	|      move.l d0,-(sp)
    4cc6:	|      jsr 12188 <__floatunsisf>
    4ccc:	|      addq.l #4,sp
    4cce:	|      move.l d0,d1
    4cd0:	|      move.l 16032 <cameraZoom>,d0
    4cd6:	|      move.l d0,-(sp)
    4cd8:	|      move.l d1,-(sp)
    4cda:	|      jsr 1200c <__divsf3>
    4ce0:	|      addq.l #8,sp
    4ce2:	|      move.l d0,-(sp)
    4ce4:	|      jsr 120f8 <__fixsfsi>
    4cea:	|      addq.l #4,sp
    4cec:	|      subq.l #5,d0
    4cee:	|      sub.l 36(sp),d0
    4cf2:	|      movea.l 60(sp),a0
    4cf6:	|      move.l d0,(a0)
}
    4cf8:	\----> nop
    4cfa:	       movem.l (sp)+,d2-d5/a6
    4cfe:	       lea 28(sp),sp
    4d02:	       rts

00004d04 <initSpeech>:


void initSpeech () {
    4d04:	       lea -12(sp),sp
    4d08:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    4d0a:	       moveq #20,d0
    4d0c:	       move.l d0,12(sp)
    4d10:	       clr.l 8(sp)
    4d14:	       move.l 17b28 <SysBase>,d0
    4d1a:	       movea.l d0,a6
    4d1c:	       move.l 12(sp),d0
    4d20:	       move.l 8(sp),d1
    4d24:	       jsr -684(a6)
    4d28:	       move.l d0,4(sp)
    4d2c:	       move.l 4(sp),d0
    4d30:	       move.l d0,17b72 <speech>
	if (speech) {
    4d36:	       move.l 17b72 <speech>,d0
    4d3c:	/----- beq.s 4d68 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    4d3e:	|      movea.l 17b72 <speech>,a0
    4d44:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4d46:	|      movea.l 17b72 <speech>,a0
    4d4c:	|      clr.l 4(a0)
		speech -> speechY = 0;
    4d50:	|      movea.l 17b72 <speech>,a0
    4d56:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    4d5a:	|      movea.l 17b72 <speech>,a0
    4d60:	|      moveq #-1,d0
    4d62:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    4d66:	|  /-- bra.s 4d76 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    4d68:	\--|-> pea 14bf2 <incbin_player_end+0xe6>
    4d6e:	   |   jsr 11d08 <KPrintF>
    4d74:	   |   addq.l #4,sp
}
    4d76:	   \-> nop
    4d78:	       movea.l (sp)+,a6
    4d7a:	       lea 12(sp),sp
    4d7e:	       rts

00004d80 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    4d80:	       movea.l 17b72 <speech>,a0
    4d86:	       move.l 4(a0),d0
    4d8a:	/----- beq.s 4d98 <isThereAnySpeechGoingOn+0x18>
    4d8c:	|      movea.l 17b72 <speech>,a0
    4d92:	|      move.l 16(a0),d0
    4d96:	|  /-- bra.s 4d9a <isThereAnySpeechGoingOn+0x1a>
    4d98:	\--|-> moveq #-1,d0
}
    4d9a:	   \-> rts

00004d9c <killAllSpeech>:

void killAllSpeech () {
    4d9c:	       lea -12(sp),sp
    4da0:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    4da2:	       movea.l 17b72 <speech>,a0
    4da8:	       move.l 12(a0),d0
    4dac:	       moveq #-1,d1
    4dae:	       cmp.l d0,d1
    4db0:	   /-- beq.s 4dbe <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    4db2:	   |   movea.l 17b72 <speech>,a0
    4db8:	   |   moveq #-1,d0
    4dba:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    4dbe:	   \-> movea.l 17b72 <speech>,a0
    4dc4:	       move.l (a0),d0
    4dc6:	/----- beq.w 4e52 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    4dca:	|      movea.l 17b72 <speech>,a0
    4dd0:	|      move.l (a0),d0
    4dd2:	|      lea -120(sp),sp
    4dd6:	|      move.l sp,d1
    4dd8:	|      movea.l d0,a0
    4dda:	|      moveq #120,d0
    4ddc:	|      move.l d0,-(sp)
    4dde:	|      move.l a0,-(sp)
    4de0:	|      move.l d1,-(sp)
    4de2:	|      jsr 11cbc <memcpy>
    4de8:	|      lea 12(sp),sp
    4dec:	|      jsr 6650 <makeSilent>
    4df2:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    4df6:	|      movea.l 17b72 <speech>,a0
    4dfc:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    4dfe:	+----- bra.s 4e52 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    4e00:	|  /-> movea.l 17b72 <speech>,a0
    4e06:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4e0c:	|  |   movea.l 17b72 <speech>,a0
    4e12:	|  |   movea.l 4(a0),a1
    4e16:	|  |   movea.l 17b72 <speech>,a0
    4e1c:	|  |   move.l 4(a1),d0
    4e20:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4e24:	|  |   movea.l 12(sp),a0
    4e28:	|  |   move.l (a0),8(sp)
    4e2c:	|  |   move.l 17b28 <SysBase>,d0
    4e32:	|  |   movea.l d0,a6
    4e34:	|  |   movea.l 8(sp),a1
    4e38:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4e3c:	|  |   move.l 12(sp),4(sp)
    4e42:	|  |   move.l 17b28 <SysBase>,d0
    4e48:	|  |   movea.l d0,a6
    4e4a:	|  |   movea.l 4(sp),a1
    4e4e:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4e52:	\--|-> movea.l 17b72 <speech>,a0
    4e58:	   |   move.l 4(a0),d0
    4e5c:	   \-- bne.s 4e00 <killAllSpeech+0x64>
	}
}
    4e5e:	       nop
    4e60:	       nop
    4e62:	       movea.l (sp)+,a6
    4e64:	       lea 12(sp),sp
    4e68:	       rts

00004e6a <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    4e6a:	pea 2 <_start+0x2>
    4e6e:	move.l 8(sp),-(sp)
    4e72:	jsr 4fca <setFrames>
    4e78:	addq.l #8,sp
}
    4e7a:	nop
    4e7c:	rts

00004e7e <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    4e7e:	       lea -52(sp),sp
    4e82:	       move.l a6,-(sp)
    4e84:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4e86:	       movea.l 64(sp),a0
    4e8a:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    4e90:	       move.l 1601e <speechSpeed>,d0
    4e96:	       move.l 68(sp),-(sp)
    4e9a:	       move.l d0,-(sp)
    4e9c:	       jsr a46 <putFloat>
    4ea2:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    4ea4:	       movea.l 64(sp),a0
    4ea8:	       move.l 8(a0),d0
    4eac:	       move.l 68(sp),-(sp)
    4eb0:	       move.l d0,-(sp)
    4eb2:	       jsr 8d0 <put2bytes>
    4eb8:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    4eba:	       movea.l 64(sp),a0
    4ebe:	       move.l 16(a0),d0
    4ec2:	       move.l 68(sp),-(sp)
    4ec6:	       move.l d0,-(sp)
    4ec8:	       jsr 8d0 <put2bytes>
    4ece:	       addq.l #8,sp
		if (sS -> currentTalker) {
    4ed0:	       movea.l 64(sp),a0
    4ed4:	       move.l (a0),d0
    4ed6:	   /-- beq.s 4f1a <saveSpeech+0x9c>
			FPutC (fp, 1);
    4ed8:	   |   move.l 68(sp),40(sp)
    4ede:	   |   moveq #1,d0
    4ee0:	   |   move.l d0,36(sp)
    4ee4:	   |   move.l 17b30 <DOSBase>,d0
    4eea:	   |   movea.l d0,a6
    4eec:	   |   move.l 40(sp),d1
    4ef0:	   |   move.l 36(sp),d2
    4ef4:	   |   jsr -312(a6)
    4ef8:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4efc:	   |   movea.l 64(sp),a0
    4f00:	   |   movea.l (a0),a0
    4f02:	   |   movea.l 102(a0),a0
    4f06:	   |   move.l 4(a0),d0
    4f0a:	   |   move.l 68(sp),-(sp)
    4f0e:	   |   move.l d0,-(sp)
    4f10:	   |   jsr 8d0 <put2bytes>
    4f16:	   |   addq.l #8,sp
    4f18:	/--|-- bra.s 4f96 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4f1a:	|  \-> move.l 68(sp),52(sp)
    4f20:	|      clr.l 48(sp)
    4f24:	|      move.l 17b30 <DOSBase>,d0
    4f2a:	|      movea.l d0,a6
    4f2c:	|      move.l 52(sp),d1
    4f30:	|      move.l 48(sp),d2
    4f34:	|      jsr -312(a6)
    4f38:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4f3c:	+----- bra.s 4f96 <saveSpeech+0x118>
			FPutC (fp, 1);
    4f3e:	|  /-> move.l 68(sp),16(sp)
    4f44:	|  |   moveq #1,d0
    4f46:	|  |   move.l d0,12(sp)
    4f4a:	|  |   move.l 17b30 <DOSBase>,d0
    4f50:	|  |   movea.l d0,a6
    4f52:	|  |   move.l 16(sp),d1
    4f56:	|  |   move.l 12(sp),d2
    4f5a:	|  |   jsr -312(a6)
    4f5e:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4f62:	|  |   movea.l 56(sp),a0
    4f66:	|  |   move.l (a0),d0
    4f68:	|  |   move.l 68(sp),-(sp)
    4f6c:	|  |   move.l d0,-(sp)
    4f6e:	|  |   jsr bd8 <writeString>
    4f74:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    4f76:	|  |   movea.l 56(sp),a0
    4f7a:	|  |   move.l 8(a0),d0
    4f7e:	|  |   move.l 68(sp),-(sp)
    4f82:	|  |   move.l d0,-(sp)
    4f84:	|  |   jsr 8d0 <put2bytes>
    4f8a:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    4f8c:	|  |   movea.l 56(sp),a0
    4f90:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    4f96:	\--|-> tst.l 56(sp)
    4f9a:	   \-- bne.s 4f3e <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    4f9c:	       move.l 68(sp),28(sp)
    4fa2:	       clr.l 24(sp)
    4fa6:	       move.l 17b30 <DOSBase>,d0
    4fac:	       movea.l d0,a6
    4fae:	       move.l 28(sp),d1
    4fb2:	       move.l 24(sp),d2
    4fb6:	       jsr -312(a6)
    4fba:	       move.l d0,20(sp)
}
    4fbe:	       nop
    4fc0:	       move.l (sp)+,d2
    4fc2:	       movea.l (sp)+,a6
    4fc4:	       lea 52(sp),sp
    4fc8:	       rts

00004fca <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    4fca:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    4fcc:	movea.l 8(sp),a0
    4fd0:	movea.l 68(a0),a0
    4fd4:	move.l (a0),d2
    4fd6:	movea.l 8(sp),a0
    4fda:	movea.l 68(a0),a0
    4fde:	move.l 4(a0),d0
    4fe2:	move.l 12(sp),-(sp)
    4fe6:	move.l d0,-(sp)
    4fe8:	jsr 126ba <__mulsi3>
    4fee:	addq.l #8,sp
    4ff0:	move.l d0,d1
    4ff2:	movea.l 8(sp),a0
    4ff6:	move.l 94(a0),d0
    4ffa:	add.l d1,d0
    4ffc:	add.l d0,d0
    4ffe:	add.l d0,d0
    5000:	movea.l d2,a0
    5002:	adda.l d0,a0
    5004:	move.l (a0),d0
    5006:	movea.l 8(sp),a0
    500a:	move.l d0,60(a0)
}
    500e:	nop
    5010:	move.l (sp)+,d2
    5012:	rts

00005014 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    5014:	       lea -20(sp),sp
    5018:	       move.l d2,-(sp)
    501a:	       move.l 40(sp),d0
    501e:	       move.w d0,d0
    5020:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    5024:	       movea.l 17b72 <speech>,a0
    502a:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    5030:	       move.l 32(sp),-(sp)
    5034:	       jsr 613a <findPerson>
    503a:	       addq.l #4,sp
    503c:	       move.l d0,16(sp)
    if (thisPerson) {
    5040:	   /-- beq.s 5066 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    5042:	   |   movea.w 6(sp),a0
    5046:	   |   move.l a0,-(sp)
    5048:	   |   move.l 40(sp),-(sp)
    504c:	   |   move.l 24(sp),-(sp)
    5050:	   |   move.l 40(sp),-(sp)
    5054:	   |   jsr 512c <wrapSpeechPerson>
    505a:	   |   lea 16(sp),sp
    505e:	   |   move.l d0,20(sp)
    5062:	/--|-- bra.w 5120 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    5066:	|  \-> move.l 32(sp),-(sp)
    506a:	|      jsr 107da <getRegionForObject>
    5070:	|      addq.l #4,sp
    5072:	|      move.l d0,12(sp)
        if (thisRegion) {
    5076:	|  /-- beq.s 50e2 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    5078:	|  |   movea.l 12(sp),a0
    507c:	|  |   movea.l 28(a0),a0
    5080:	|  |   move.l 28(a0),d0
    5084:	|  |   movea.l 12(sp),a0
    5088:	|  |   movea.l 4(a0),a1
    508c:	|  |   movea.l 12(sp),a0
    5090:	|  |   movea.l 28(a0),a0
    5094:	|  |   move.l 20(a0),d1
    5098:	|  |   movea.l a1,a0
    509a:	|  |   suba.l d1,a0
    509c:	|  |   move.l 17bd4 <cameraY>,d1
    50a2:	|  |   movea.l a0,a1
    50a4:	|  |   suba.l d1,a1
    50a6:	|  |   movea.l 12(sp),a0
    50aa:	|  |   move.l (a0),d2
    50ac:	|  |   movea.l 12(sp),a0
    50b0:	|  |   move.l 8(a0),d1
    50b4:	|  |   add.l d2,d1
    50b6:	|  |   move.l d1,d2
    50b8:	|  |   asr.l #1,d2
    50ba:	|  |   move.l 17bd0 <cameraX>,d1
    50c0:	|  |   movea.l d2,a0
    50c2:	|  |   suba.l d1,a0
    50c4:	|  |   move.l 36(sp),-(sp)
    50c8:	|  |   move.l d0,-(sp)
    50ca:	|  |   move.l a1,-(sp)
    50cc:	|  |   move.l a0,-(sp)
    50ce:	|  |   move.l 44(sp),-(sp)
    50d2:	|  |   jsr 524a <wrapSpeechXY>
    50d8:	|  |   lea 20(sp),sp
    50dc:	|  |   move.l d0,20(sp)
    50e0:	+--|-- bra.s 5120 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    50e2:	|  \-> move.l 32(sp),-(sp)
    50e6:	|      jsr 8d00 <findObjectType>
    50ec:	|      addq.l #4,sp
    50ee:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    50f2:	|      movea.l 8(sp),a0
    50f6:	|      move.l 28(a0),d1
    50fa:	|      move.l 17a28 <winWidth>,d0
    5100:	|      lsr.l #1,d0
    5102:	|      move.l 36(sp),-(sp)
    5106:	|      move.l d1,-(sp)
    5108:	|      pea a <_start+0xa>
    510c:	|      move.l d0,-(sp)
    510e:	|      move.l 44(sp),-(sp)
    5112:	|      jsr 524a <wrapSpeechXY>
    5118:	|      lea 20(sp),sp
    511c:	|      move.l d0,20(sp)
        }
    }
    return i;
    5120:	\----> move.l 20(sp),d0
}
    5124:	       move.l (sp)+,d2
    5126:	       lea 20(sp),sp
    512a:	       rts

0000512c <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    512c:	    subq.l #8,sp
    512e:	    movem.l d2-d4,-(sp)
    5132:	    move.l 36(sp),d0
    5136:	    move.w d0,d0
    5138:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    513c:	    movea.l 28(sp),a0
    5140:	    movea.l 102(a0),a0
    5144:	    move.l 28(a0),d2
    5148:	    movea.l 28(sp),a0
    514c:	    move.l 4(a0),d3
    5150:	    move.l 17bd4 <cameraY>,d0
    5156:	    move.l d0,-(sp)
    5158:	    jsr 12160 <__floatsisf>
    515e:	    addq.l #4,sp
    5160:	    move.l d0,-(sp)
    5162:	    move.l d3,-(sp)
    5164:	    jsr 12454 <__subsf3>
    516a:	    addq.l #8,sp
    516c:	    move.l d0,d3
    516e:	    movea.l 28(sp),a0
    5172:	    move.l 20(a0),d4
    5176:	    movea.l 28(sp),a0
    517a:	    move.l 8(a0),d1
    517e:	    movea.l 28(sp),a0
    5182:	    move.l 12(a0),d0
    5186:	    sub.l d0,d1
    5188:	    move.l d1,-(sp)
    518a:	    jsr 12160 <__floatsisf>
    5190:	    addq.l #4,sp
    5192:	    move.l d0,-(sp)
    5194:	    move.l d4,-(sp)
    5196:	    jsr 12212 <__mulsf3>
    519c:	    addq.l #8,sp
    519e:	    move.l d0,-(sp)
    51a0:	    move.l d3,-(sp)
    51a2:	    jsr 12454 <__subsf3>
    51a8:	    addq.l #8,sp
    51aa:	    move.l d0,d3
    51ac:	    movea.l 28(sp),a0
    51b0:	    movea.l 102(a0),a0
    51b4:	    move.l 20(a0),d0
    51b8:	    move.l d0,-(sp)
    51ba:	    jsr 12160 <__floatsisf>
    51c0:	    addq.l #4,sp
    51c2:	    move.l d0,-(sp)
    51c4:	    move.l d3,-(sp)
    51c6:	    jsr 12454 <__subsf3>
    51cc:	    addq.l #8,sp
    51ce:	    move.l d0,-(sp)
    51d0:	    jsr 120f8 <__fixsfsi>
    51d6:	    addq.l #4,sp
    51d8:	    move.l d0,d4
    51da:	    movea.l 28(sp),a0
    51de:	    move.l (a0),d3
    51e0:	    move.l 17bd0 <cameraX>,d0
    51e6:	    move.l d0,-(sp)
    51e8:	    jsr 12160 <__floatsisf>
    51ee:	    addq.l #4,sp
    51f0:	    move.l d0,-(sp)
    51f2:	    move.l d3,-(sp)
    51f4:	    jsr 12454 <__subsf3>
    51fa:	    addq.l #8,sp
    51fc:	    move.l d0,-(sp)
    51fe:	    jsr 120f8 <__fixsfsi>
    5204:	    addq.l #4,sp
    5206:	    move.l 32(sp),-(sp)
    520a:	    move.l d2,-(sp)
    520c:	    move.l d4,-(sp)
    520e:	    move.l d0,-(sp)
    5210:	    move.l 40(sp),-(sp)
    5214:	    jsr 524a <wrapSpeechXY>
    521a:	    lea 20(sp),sp
    521e:	    move.l d0,16(sp)
	if (animPerson) {
    5222:	    tst.w 14(sp)
    5226:	/-- beq.s 523e <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    5228:	|   move.l 28(sp),-(sp)
    522c:	|   jsr 4e6a <makeTalker>
    5232:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    5234:	|   movea.l 17b72 <speech>,a0
    523a:	|   move.l 28(sp),(a0)
	}
	return i;
    523e:	\-> move.l 16(sp),d0
}
    5242:	    movem.l (sp)+,d2-d4
    5246:	    addq.l #8,sp
    5248:	    rts

0000524a <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    524a:	                   lea -16(sp),sp
    524e:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    5252:	                   clr.l 16(sp)
    killAllSpeech();
    5256:	                   jsr 4d9c <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    525c:	                   move.l 36(sp),-(sp)
    5260:	                   jsr f21e <strlen>
    5266:	                   addq.l #4,sp
    5268:	                   movea.l d0,a0
    526a:	                   lea 20(a0),a0
    526e:	                   move.l a0,-(sp)
    5270:	                   jsr 12188 <__floatunsisf>
    5276:	                   addq.l #4,sp
    5278:	                   move.l d0,d1
    527a:	                   move.l 1601e <speechSpeed>,d0
    5280:	                   move.l d0,-(sp)
    5282:	                   move.l d1,-(sp)
    5284:	                   jsr 12212 <__mulsf3>
    528a:	                   addq.l #8,sp
    528c:	                   move.l d0,-(sp)
    528e:	                   jsr 120f8 <__fixsfsi>
    5294:	                   addq.l #4,sp
    5296:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    529a:	               /-- bgt.s 52a2 <wrapSpeechXY+0x58>
    529c:	               |   moveq #1,d0
    529e:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    52a2:	               \-> moveq #-1,d1
    52a4:	                   cmp.l 52(sp),d1
    52a8:	               /-- beq.s 52e8 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    52aa:	               |   move.l 17be4 <speechMode>,d0
    52b0:	               +-- ble.s 52e8 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    52b2:	               |   clr.l -(sp)
    52b4:	               |   move.l 56(sp),-(sp)
    52b8:	               |   jsr 8978 <startSound>
    52be:	               |   addq.l #8,sp
    52c0:	               |   tst.w d0
    52c2:	               +-- beq.s 52e8 <wrapSpeechXY+0x9e>
                speechTime = -10;
    52c4:	               |   moveq #-10,d0
    52c6:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    52ca:	               |   movea.l 17b72 <speech>,a0
    52d0:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    52d6:	               |   move.l 17be4 <speechMode>,d0
    52dc:	               |   moveq #2,d1
    52de:	               |   cmp.l d0,d1
    52e0:	               +-- bne.s 52e8 <wrapSpeechXY+0x9e>
    52e2:	               |   moveq #-10,d0
    52e4:	/--------------|-- bra.w 556e <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    52e8:	|              \-> movea.l 17b72 <speech>,a0
    52ee:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    52f4:	|     /----------- bra.w 53a8 <wrapSpeechXY+0x15e>
        a = wrap;
    52f8:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    52fe:	|  |  |        /-- bra.s 530e <wrapSpeechXY+0xc4>
            a--;
    5300:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    5304:	|  |  |  |     +-- bne.s 530e <wrapSpeechXY+0xc4>
                a = wrap;
    5306:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    530c:	|  |  |  |  /--|-- bra.s 5320 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    530e:	|  |  |  |  |  \-> move.l 28(sp),d0
    5312:	|  |  |  |  |      movea.l 36(sp),a0
    5316:	|  |  |  |  |      adda.l d0,a0
    5318:	|  |  |  |  |      move.b (a0),d0
    531a:	|  |  |  |  |      cmpi.b #32,d0
    531e:	|  |  |  \--|----- bne.s 5300 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    5320:	|  |  |     \----> move.l 28(sp),d0
    5324:	|  |  |            movea.l 36(sp),a0
    5328:	|  |  |            adda.l d0,a0
    532a:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    532c:	|  |  |            lea 16(sp),a0
    5330:	|  |  |            move.l a0,-(sp)
    5332:	|  |  |            move.l 44(sp),-(sp)
    5336:	|  |  |            move.l 44(sp),-(sp)
    533a:	|  |  |            jsr 4ae6 <addSpeechLine>
    5340:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    5344:	|  |  |            move.l 28(sp),d0
    5348:	|  |  |            movea.l 36(sp),a0
    534c:	|  |  |            adda.l d0,a0
    534e:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    5352:	|  |  |            move.l 28(sp),d0
    5356:	|  |  |            addq.l #1,d0
    5358:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    535c:	|  |  |            move.l 44(sp),-(sp)
    5360:	|  |  |            jsr 12160 <__floatsisf>
    5366:	|  |  |            addq.l #4,sp
    5368:	|  |  |            move.l d0,d2
    536a:	|  |  |            move.l 17c0a <fontHeight>,d0
    5370:	|  |  |            move.l d0,-(sp)
    5372:	|  |  |            jsr 12160 <__floatsisf>
    5378:	|  |  |            addq.l #4,sp
    537a:	|  |  |            move.l d0,d1
    537c:	|  |  |            move.l 16032 <cameraZoom>,d0
    5382:	|  |  |            move.l d0,-(sp)
    5384:	|  |  |            move.l d1,-(sp)
    5386:	|  |  |            jsr 1200c <__divsf3>
    538c:	|  |  |            addq.l #8,sp
    538e:	|  |  |            move.l d0,-(sp)
    5390:	|  |  |            move.l d2,-(sp)
    5392:	|  |  |            jsr 12454 <__subsf3>
    5398:	|  |  |            addq.l #8,sp
    539a:	|  |  |            move.l d0,-(sp)
    539c:	|  |  |            jsr 120f8 <__fixsfsi>
    53a2:	|  |  |            addq.l #4,sp
    53a4:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    53a8:	|  |  \----------> move.l 36(sp),-(sp)
    53ac:	|  |               jsr f21e <strlen>
    53b2:	|  |               addq.l #4,sp
    53b4:	|  |               move.l d0,d1
    53b6:	|  |               move.l 48(sp),d0
    53ba:	|  |               cmp.l d1,d0
    53bc:	|  \-------------- bcs.w 52f8 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    53c0:	|                  lea 16(sp),a0
    53c4:	|                  move.l a0,-(sp)
    53c6:	|                  move.l 44(sp),-(sp)
    53ca:	|                  move.l 44(sp),-(sp)
    53ce:	|                  jsr 4ae6 <addSpeechLine>
    53d4:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    53d8:	|                  move.l 44(sp),-(sp)
    53dc:	|                  jsr 12160 <__floatsisf>
    53e2:	|                  addq.l #4,sp
    53e4:	|                  move.l d0,d2
    53e6:	|                  move.l 17c0a <fontHeight>,d0
    53ec:	|                  move.l d0,-(sp)
    53ee:	|                  jsr 12160 <__floatsisf>
    53f4:	|                  addq.l #4,sp
    53f6:	|                  move.l d0,d1
    53f8:	|                  move.l 16032 <cameraZoom>,d0
    53fe:	|                  move.l d0,-(sp)
    5400:	|                  move.l d1,-(sp)
    5402:	|                  jsr 1200c <__divsf3>
    5408:	|                  addq.l #8,sp
    540a:	|                  move.l d0,-(sp)
    540c:	|                  move.l d2,-(sp)
    540e:	|                  jsr 12454 <__subsf3>
    5414:	|                  addq.l #8,sp
    5416:	|                  move.l d0,-(sp)
    5418:	|                  jsr 120f8 <__fixsfsi>
    541e:	|                  addq.l #4,sp
    5420:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    5424:	|              /-- bpl.s 5442 <wrapSpeechXY+0x1f8>
    5426:	|              |   movea.l 17b72 <speech>,a0
    542c:	|              |   move.l 8(a0),d0
    5430:	|              |   movea.l 17b72 <speech>,a0
    5436:	|              |   sub.l 44(sp),d0
    543a:	|              |   move.l d0,8(a0)
    543e:	|           /--|-- bra.w 5530 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    5442:	|           |  \-> movea.l 17b72 <speech>,a0
    5448:	|           |      move.l 8(a0),d0
    544c:	|           |      move.l d0,-(sp)
    544e:	|           |      jsr 12160 <__floatsisf>
    5454:	|           |      addq.l #4,sp
    5456:	|           |      move.l d0,d2
    5458:	|           |      move.l 17bd4 <cameraY>,d0
    545e:	|           |      move.l d0,-(sp)
    5460:	|           |      jsr 12160 <__floatsisf>
    5466:	|           |      addq.l #4,sp
    5468:	|           |      move.l d0,d3
    546a:	|           |      move.l 17a2c <winHeight>,d4
    5470:	|           |      move.l 17c0a <fontHeight>,d0
    5476:	|           |      pea 3 <_start+0x3>
    547a:	|           |      move.l d0,-(sp)
    547c:	|           |      jsr 12738 <__divsi3>
    5482:	|           |      addq.l #8,sp
    5484:	|           |      move.l d4,d1
    5486:	|           |      sub.l d0,d1
    5488:	|           |      move.l d1,-(sp)
    548a:	|           |      jsr 12188 <__floatunsisf>
    5490:	|           |      addq.l #4,sp
    5492:	|           |      move.l d0,d1
    5494:	|           |      move.l 16032 <cameraZoom>,d0
    549a:	|           |      move.l d0,-(sp)
    549c:	|           |      move.l d1,-(sp)
    549e:	|           |      jsr 1200c <__divsf3>
    54a4:	|           |      addq.l #8,sp
    54a6:	|           |      move.l d0,-(sp)
    54a8:	|           |      move.l d3,-(sp)
    54aa:	|           |      jsr 11f12 <__addsf3>
    54b0:	|           |      addq.l #8,sp
    54b2:	|           |      move.l d0,-(sp)
    54b4:	|           |      move.l d2,-(sp)
    54b6:	|           |      jsr 122cc <__gtsf2>
    54bc:	|           |      addq.l #8,sp
    54be:	|           |      tst.l d0
    54c0:	|           +----- ble.s 5530 <wrapSpeechXY+0x2e6>
    54c2:	|           |      move.l 17bd4 <cameraY>,d0
    54c8:	|           |      move.l d0,-(sp)
    54ca:	|           |      jsr 12160 <__floatsisf>
    54d0:	|           |      addq.l #4,sp
    54d2:	|           |      move.l d0,d2
    54d4:	|           |      move.l 17a2c <winHeight>,d3
    54da:	|           |      move.l 17c0a <fontHeight>,d0
    54e0:	|           |      pea 3 <_start+0x3>
    54e4:	|           |      move.l d0,-(sp)
    54e6:	|           |      jsr 12738 <__divsi3>
    54ec:	|           |      addq.l #8,sp
    54ee:	|           |      move.l d3,d1
    54f0:	|           |      sub.l d0,d1
    54f2:	|           |      move.l d1,-(sp)
    54f4:	|           |      jsr 12188 <__floatunsisf>
    54fa:	|           |      addq.l #4,sp
    54fc:	|           |      move.l d0,d1
    54fe:	|           |      move.l 16032 <cameraZoom>,d0
    5504:	|           |      move.l d0,-(sp)
    5506:	|           |      move.l d1,-(sp)
    5508:	|           |      jsr 1200c <__divsf3>
    550e:	|           |      addq.l #8,sp
    5510:	|           |      move.l d0,-(sp)
    5512:	|           |      move.l d2,-(sp)
    5514:	|           |      jsr 11f12 <__addsf3>
    551a:	|           |      addq.l #8,sp
    551c:	|           |      movea.l 17b72 <speech>,a2
    5522:	|           |      move.l d0,-(sp)
    5524:	|           |      jsr 120f8 <__fixsfsi>
    552a:	|           |      addq.l #4,sp
    552c:	|           |      move.l d0,8(a2)

    if (offset) {
    5530:	|           \----> move.l 16(sp),d0
    5534:	|        /-------- beq.s 556a <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    5536:	|        |         movea.l 17b72 <speech>,a0
    553c:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    5542:	|        |     /-- bra.s 5564 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    5544:	|        |  /--|-> movea.l 20(sp),a0
    5548:	|        |  |  |   move.l 8(a0),d1
    554c:	|        |  |  |   move.l 16(sp),d0
    5550:	|        |  |  |   add.l d1,d0
    5552:	|        |  |  |   movea.l 20(sp),a0
    5556:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    555a:	|        |  |  |   movea.l 20(sp),a0
    555e:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    5564:	|        |  |  \-> tst.l 20(sp)
    5568:	|        |  \----- bne.s 5544 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    556a:	|        \-------> move.l 24(sp),d0
}
    556e:	\----------------> movem.l (sp)+,d2-d4/a2
    5572:	                   lea 16(sp),sp
    5576:	                   rts

00005578 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    5578:	    move.l 4(sp),d0
    557c:	/-- bpl.s 5580 <TF_abs+0x8>
    557e:	|   neg.l d0
}
    5580:	\-> rts

00005582 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    5582:	             lea -28(sp),sp
    5586:	             move.l a6,-(sp)
    5588:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    558a:	             moveq #120,d0
    558c:	             move.l d0,28(sp)
    5590:	             clr.l 24(sp)
    5594:	             move.l 17b28 <SysBase>,d0
    559a:	             movea.l d0,a6
    559c:	             move.l 28(sp),d0
    55a0:	             move.l 24(sp),d1
    55a4:	             jsr -684(a6)
    55a8:	             move.l d0,20(sp)
    55ac:	             move.l 20(sp),d0
    55b0:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    55b4:	         /-- bne.s 55bc <addPerson+0x3a>
    55b6:	         |   clr.w d0
    55b8:	/--------|-- bra.w 57ea <addPerson+0x268>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    55bc:	|        \-> move.l 48(sp),-(sp)
    55c0:	|            jsr 8df0 <loadObjectType>
    55c6:	|            addq.l #4,sp
    55c8:	|            movea.l 16(sp),a0
    55cc:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    55d0:	|            movea.l 16(sp),a0
    55d4:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    55dc:	|            movea.l 16(sp),a0
    55e0:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    55e4:	|            movea.l 16(sp),a0
    55e8:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    55ec:	|            move.l 44(sp),-(sp)
    55f0:	|            jsr 12160 <__floatsisf>
    55f6:	|            addq.l #4,sp
    55f8:	|            move.l d0,d2
    55fa:	|            move.l 40(sp),-(sp)
    55fe:	|            jsr 12160 <__floatsisf>
    5604:	|            addq.l #4,sp
    5606:	|            move.l d2,-(sp)
    5608:	|            move.l d0,-(sp)
    560a:	|            move.l 24(sp),-(sp)
    560e:	|            jsr 6882 <moveAndScale>
    5614:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    5618:	|            movea.l 16(sp),a0
    561c:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    5620:	|            movea.l 16(sp),a0
    5624:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    562a:	|            movea.l 16(sp),a0
    562e:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    5634:	|            movea.l 16(sp),a0
    5638:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    563c:	|            movea.l 16(sp),a0
    5640:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    5644:	|            movea.l 16(sp),a0
    5648:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    564e:	|            movea.l 16(sp),a0
    5652:	|            clr.l 94(a0)
    newPerson->angle = 180;
    5656:	|            movea.l 16(sp),a0
    565a:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    5662:	|            movea.l 16(sp),a0
    5666:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    566e:	|            movea.l 16(sp),a0
    5672:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    5676:	|            movea.l 16(sp),a0
    567a:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    567e:	|            movea.l 16(sp),a0
    5682:	|            movea.l 102(a0),a0
    5686:	|            move.l 24(a0),d0
    568a:	|            movea.l 16(sp),a0
    568e:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    5692:	|            movea.l 16(sp),a0
    5696:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    569a:	|            movea.l 16(sp),a0
    569e:	|            movea.l 102(a0),a0
    56a2:	|            move.l 32(a0),d0
    56a6:	|            movea.l 16(sp),a0
    56aa:	|            move.l d0,110(a0)
    newPerson->r = 0;
    56ae:	|            movea.l 16(sp),a0
    56b2:	|            clr.b 114(a0)
    newPerson->g = 0;
    56b6:	|            movea.l 16(sp),a0
    56ba:	|            clr.b 115(a0)
    newPerson->b = 0;
    56be:	|            movea.l 16(sp),a0
    56c2:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    56c6:	|            movea.l 16(sp),a0
    56ca:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    56ce:	|            movea.l 16(sp),a0
    56d2:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    56d6:	|            movea.l 16(sp),a0
    56da:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    56e0:	|            clr.l -(sp)
    56e2:	|            move.l 20(sp),-(sp)
    56e6:	|            jsr 4fca <setFrames>
    56ec:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    56ee:	|            movea.l 52(sp),a0
    56f2:	|            movea.l (a0),a0
    56f4:	|            movea.l (a0),a0
    56f6:	|            movea.l 4(a0),a0
    56fa:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    56fe:	|     /----- bpl.s 5708 <addPerson+0x186>
    5700:	|     |      move.l 12(sp),d0
    5704:	|     |      neg.l d0
    5706:	|     |  /-- bra.s 570a <addPerson+0x188>
    5708:	|     \--|-> moveq #1,d0
    570a:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    570e:	|            movea.l 52(sp),a0
    5712:	|            movea.l (a0),a0
    5714:	|            movea.l (a0),a0
    5716:	|            movea.l (a0),a0
    5718:	|            move.l 8(a0),d0
    571c:	|            cmp.l 8(sp),d0
    5720:	|     /----- bgt.s 5752 <addPerson+0x1d0>
        if (fNumSigned < 0) {
    5722:	|     |      tst.l 12(sp)
    5726:	|     |  /-- bge.s 5734 <addPerson+0x1b2>
            newPerson->height = 5;
    5728:	|     |  |   movea.l 16(sp),a0
    572c:	|     |  |   moveq #5,d1
    572e:	|     |  |   move.l d1,8(a0)
    5732:	|  /--|--|-- bra.s 577c <addPerson+0x1fa>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    5734:	|  |  |  \-> movea.l 52(sp),a0
    5738:	|  |  |      movea.l (a0),a0
    573a:	|  |  |      movea.l (a0),a0
    573c:	|  |  |      movea.l (a0),a0
    573e:	|  |  |      movea.l 16(a0),a0
    5742:	|  |  |      move.l 12(a0),d0
    5746:	|  |  |      addq.l #5,d0
    5748:	|  |  |      movea.l 16(sp),a0
    574c:	|  |  |      move.l d0,8(a0)
    5750:	|  +--|----- bra.s 577c <addPerson+0x1fa>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    5752:	|  |  \----> movea.l 52(sp),a0
    5756:	|  |         movea.l (a0),a0
    5758:	|  |         movea.l (a0),a0
    575a:	|  |         movea.l (a0),a0
    575c:	|  |         movea.l 16(a0),a0
    5760:	|  |         move.l 8(sp),d1
    5764:	|  |         move.l d1,d0
    5766:	|  |         add.l d0,d0
    5768:	|  |         add.l d1,d0
    576a:	|  |         lsl.l #3,d0
    576c:	|  |         adda.l d0,a0
    576e:	|  |         move.l 12(a0),d0
    5772:	|  |         addq.l #5,d0
    5774:	|  |         movea.l 16(sp),a0
    5778:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    577c:	|  \-------> move.l #97142,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    5784:	|        /-- bra.s 5794 <addPerson+0x212>
        changethat = &((*changethat)->next);
    5786:	|     /--|-> movea.l 32(sp),a0
    578a:	|     |  |   move.l (a0),d0
    578c:	|     |  |   moveq #24,d1
    578e:	|     |  |   add.l d0,d1
    5790:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    5794:	|     |  \-> movea.l 32(sp),a0
    5798:	|     |      move.l (a0),d0
    579a:	|     |  /-- beq.s 57c2 <addPerson+0x240>
    579c:	|     |  |   movea.l 32(sp),a0
    57a0:	|     |  |   movea.l (a0),a0
    57a2:	|     |  |   move.l 4(a0),d2
    57a6:	|     |  |   move.l 44(sp),-(sp)
    57aa:	|     |  |   jsr 12160 <__floatsisf>
    57b0:	|     |  |   addq.l #4,sp
    57b2:	|     |  |   move.l d0,-(sp)
    57b4:	|     |  |   move.l d2,-(sp)
    57b6:	|     |  |   jsr 12386 <__ltsf2>
    57bc:	|     |  |   addq.l #8,sp
    57be:	|     |  |   tst.l d0
    57c0:	|     \--|-- blt.s 5786 <addPerson+0x204>
    }

    newPerson->next = (*changethat);
    57c2:	|        \-> movea.l 32(sp),a0
    57c6:	|            move.l (a0),d0
    57c8:	|            movea.l 16(sp),a0
    57cc:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    57d0:	|            movea.l 32(sp),a0
    57d4:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    57d8:	|            movea.l 16(sp),a0
    57dc:	|            move.l 102(a0),d0
    57e0:	|            sne d0
    57e2:	|            neg.b d0
    57e4:	|            move.b d0,d0
    57e6:	|            andi.w #255,d0
}
    57ea:	\----------> move.l (sp)+,d2
    57ec:	             movea.l (sp)+,a6
    57ee:	             lea 28(sp),sp
    57f2:	             rts

000057f4 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    57f4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    57f6:	       move.l 8(sp),-(sp)
    57fa:	       jsr 613a <findPerson>
    5800:	       addq.l #4,sp
    5802:	       move.l d0,(sp)
    if (moveMe) {
    5804:	/----- beq.s 5838 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    5806:	|      movea.l (sp),a0
    5808:	|      move.l 56(a0),d0
    580c:	|  /-- beq.s 581e <animatePerson+0x2a>
    580e:	|  |   movea.l (sp),a0
    5810:	|  |   move.l 56(a0),d0
    5814:	|  |   move.l d0,-(sp)
    5816:	|  |   jsr 1af4 <abortFunction>
    581c:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    581e:	|  \-> movea.l (sp),a0
    5820:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    5824:	|      movea.l (sp),a0
    5826:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    582a:	|      movea.l (sp),a0
    582c:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    5830:	|      movea.l (sp),a0
    5832:	|      move.l 12(sp),60(a0)
    }
}
    5838:	\----> nop
    583a:	       addq.l #4,sp
    583c:	       rts

0000583e <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    583e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    5840:	       move.l 8(sp),-(sp)
    5844:	       jsr 613a <findPerson>
    584a:	       addq.l #4,sp
    584c:	       move.l d0,(sp)
    if (moveMe) {
    584e:	/----- beq.s 5890 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    5850:	|      movea.l (sp),a0
    5852:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    5856:	|      movea.l (sp),a0
    5858:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    585e:	|      move.l (sp),-(sp)
    5860:	|      jsr 69cc <rethinkAngle>
    5866:	|      addq.l #4,sp
        if (moveMe->walking) {
    5868:	|      movea.l (sp),a0
    586a:	|      move.w 52(a0),d0
    586e:	|  /-- beq.s 5882 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    5870:	|  |   pea 1 <_start+0x1>
    5874:	|  |   move.l 4(sp),-(sp)
    5878:	|  |   jsr 4fca <setFrames>
    587e:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    5880:	+--|-- bra.s 5890 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    5882:	|  \-> clr.l -(sp)
    5884:	|      move.l 4(sp),-(sp)
    5888:	|      jsr 4fca <setFrames>
    588e:	|      addq.l #8,sp
}
    5890:	\----> nop
    5892:	       addq.l #4,sp
    5894:	       rts

00005896 <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    5896:	             lea -36(sp),sp
    589a:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    589c:	             movea.l 44(sp),a0
    58a0:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    58a6:	             moveq #12,d0
    58a8:	             move.l d0,28(sp)
    58ac:	             clr.l 24(sp)
    58b0:	             move.l 17b28 <SysBase>,d0
    58b6:	             movea.l d0,a6
    58b8:	             move.l 28(sp),d0
    58bc:	             move.l 24(sp),d1
    58c0:	             jsr -684(a6)
    58c4:	             move.l d0,20(sp)
    58c8:	             move.l 20(sp),d0
    58cc:	             move.l d0,16(sp)
	if (!(newAnim)) {
    58d0:	         /-- bne.s 58e6 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    58d2:	         |   pea 14c4f <incbin_player_end+0x143>
    58d8:	         |   jsr 11d08 <KPrintF>
    58de:	         |   addq.l #4,sp
		return NULL;
    58e0:	         |   moveq #0,d0
    58e2:	/--------|-- bra.w 5a28 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    58e6:	|        \-> movea.l 44(sp),a0
    58ea:	|            move.l (a0),d0
    58ec:	|            movea.l 16(sp),a0
    58f0:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    58f2:	|            movea.l 16(sp),a0
    58f6:	|            move.l 32(sp),8(a0)

	if (num) {
    58fc:	|  /-------- beq.w 5a1c <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    5900:	|  |         move.l 32(sp),d1
    5904:	|  |         move.l d1,d0
    5906:	|  |         add.l d0,d0
    5908:	|  |         add.l d1,d0
    590a:	|  |         add.l d0,d0
    590c:	|  |         add.l d0,d0
    590e:	|  |         move.l d0,12(sp)
    5912:	|  |         clr.l 8(sp)
    5916:	|  |         move.l 17b28 <SysBase>,d0
    591c:	|  |         movea.l d0,a6
    591e:	|  |         move.l 12(sp),d0
    5922:	|  |         move.l 8(sp),d1
    5926:	|  |         jsr -684(a6)
    592a:	|  |         move.l d0,4(sp)
    592e:	|  |         move.l 4(sp),d0
    5932:	|  |         movea.l 16(sp),a0
    5936:	|  |         move.l d0,4(a0)
		if (newAnim->frames) {
    593a:	|  |         movea.l 16(sp),a0
    593e:	|  |         move.l 4(a0),d0
    5942:	|  |     /-- beq.s 5958 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    5944:	|  |     |   pea 14c4f <incbin_player_end+0x143>
    594a:	|  |     |   jsr 11d08 <KPrintF>
    5950:	|  |     |   addq.l #4,sp
			return NULL;
    5952:	|  |     |   moveq #0,d0
    5954:	+--|-----|-- bra.w 5a28 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    5958:	|  |     \-> clr.l 36(sp)
    595c:	|  |     /-- bra.w 5a0e <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    5960:	|  |  /--|-> movea.l 44(sp),a0
    5964:	|  |  |  |   movea.l 4(a0),a0
    5968:	|  |  |  |   move.l 36(sp),d1
    596c:	|  |  |  |   move.l d1,d0
    596e:	|  |  |  |   add.l d0,d0
    5970:	|  |  |  |   add.l d1,d0
    5972:	|  |  |  |   add.l d0,d0
    5974:	|  |  |  |   add.l d0,d0
    5976:	|  |  |  |   lea (0,a0,d0.l),a1
    597a:	|  |  |  |   movea.l 16(sp),a0
    597e:	|  |  |  |   movea.l 4(a0),a0
    5982:	|  |  |  |   move.l 36(sp),d1
    5986:	|  |  |  |   move.l d1,d0
    5988:	|  |  |  |   add.l d0,d0
    598a:	|  |  |  |   add.l d1,d0
    598c:	|  |  |  |   add.l d0,d0
    598e:	|  |  |  |   add.l d0,d0
    5990:	|  |  |  |   adda.l d0,a0
    5992:	|  |  |  |   move.l (a1),d0
    5994:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    5996:	|  |  |  |   movea.l 44(sp),a0
    599a:	|  |  |  |   movea.l 4(a0),a0
    599e:	|  |  |  |   move.l 36(sp),d1
    59a2:	|  |  |  |   move.l d1,d0
    59a4:	|  |  |  |   add.l d0,d0
    59a6:	|  |  |  |   add.l d1,d0
    59a8:	|  |  |  |   add.l d0,d0
    59aa:	|  |  |  |   add.l d0,d0
    59ac:	|  |  |  |   lea (0,a0,d0.l),a1
    59b0:	|  |  |  |   movea.l 16(sp),a0
    59b4:	|  |  |  |   movea.l 4(a0),a0
    59b8:	|  |  |  |   move.l 36(sp),d1
    59bc:	|  |  |  |   move.l d1,d0
    59be:	|  |  |  |   add.l d0,d0
    59c0:	|  |  |  |   add.l d1,d0
    59c2:	|  |  |  |   add.l d0,d0
    59c4:	|  |  |  |   add.l d0,d0
    59c6:	|  |  |  |   adda.l d0,a0
    59c8:	|  |  |  |   move.l 4(a1),d0
    59cc:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    59d0:	|  |  |  |   movea.l 44(sp),a0
    59d4:	|  |  |  |   movea.l 4(a0),a0
    59d8:	|  |  |  |   move.l 36(sp),d1
    59dc:	|  |  |  |   move.l d1,d0
    59de:	|  |  |  |   add.l d0,d0
    59e0:	|  |  |  |   add.l d1,d0
    59e2:	|  |  |  |   add.l d0,d0
    59e4:	|  |  |  |   add.l d0,d0
    59e6:	|  |  |  |   lea (0,a0,d0.l),a1
    59ea:	|  |  |  |   movea.l 16(sp),a0
    59ee:	|  |  |  |   movea.l 4(a0),a0
    59f2:	|  |  |  |   move.l 36(sp),d1
    59f6:	|  |  |  |   move.l d1,d0
    59f8:	|  |  |  |   add.l d0,d0
    59fa:	|  |  |  |   add.l d1,d0
    59fc:	|  |  |  |   add.l d0,d0
    59fe:	|  |  |  |   add.l d0,d0
    5a00:	|  |  |  |   adda.l d0,a0
    5a02:	|  |  |  |   move.l 8(a1),d0
    5a06:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    5a0a:	|  |  |  |   addq.l #1,36(sp)
    5a0e:	|  |  |  \-> move.l 36(sp),d0
    5a12:	|  |  |      cmp.l 32(sp),d0
    5a16:	|  |  \----- blt.w 5960 <copyAnim+0xca>
    5a1a:	|  |     /-- bra.s 5a24 <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    5a1c:	|  \-----|-> movea.l 16(sp),a0
    5a20:	|        |   clr.l 4(a0)
	}

	return newAnim;
    5a24:	|        \-> move.l 16(sp),d0
}
    5a28:	\----------> movea.l (sp)+,a6
    5a2a:	             lea 36(sp),sp
    5a2e:	             rts

00005a30 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    5a30:	       subq.l #8,sp
    5a32:	       move.l a6,-(sp)

	if (orig)
    5a34:	       tst.l 16(sp)
    5a38:	/----- beq.s 5a78 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    5a3a:	|      movea.l 16(sp),a0
    5a3e:	|      move.l 8(a0),d0
    5a42:	|  /-- beq.s 5a5e <deleteAnim+0x2e>
			FreeVec( orig->frames);
    5a44:	|  |   movea.l 16(sp),a0
    5a48:	|  |   move.l 4(a0),8(sp)
    5a4e:	|  |   move.l 17b28 <SysBase>,d0
    5a54:	|  |   movea.l d0,a6
    5a56:	|  |   movea.l 8(sp),a1
    5a5a:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    5a5e:	|  \-> move.l 16(sp),4(sp)
    5a64:	|      move.l 17b28 <SysBase>,d0
    5a6a:	|      movea.l d0,a6
    5a6c:	|      movea.l 4(sp),a1
    5a70:	|      jsr -690(a6)
		orig = NULL;
    5a74:	|      clr.l 16(sp)
	}
}
    5a78:	\----> nop
    5a7a:	       movea.l (sp)+,a6
    5a7c:	       addq.l #8,sp
    5a7e:	       rts

00005a80 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    5a80:	          lea -124(sp),sp
    5a84:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    5a88:	          movea.l 152(sp),a0
    5a8c:	          move.l 44(a0),d1
    5a90:	          movea.l 152(sp),a0
    5a94:	          move.l 48(a0),d0
    5a98:	          cmp.l d1,d0
    5a9a:	      /-- bne.s 5aca <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    5a9c:	      |   movea.l 152(sp),a0
    5aa0:	      |   moveq #-1,d0
    5aa2:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    5aa6:	      |   movea.l 152(sp),a0
    5aaa:	      |   move.l 28(a0),d0
    5aae:	      |   movea.l 152(sp),a0
    5ab2:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    5ab6:	      |   movea.l 152(sp),a0
    5aba:	      |   move.l 32(a0),d0
    5abe:	      |   movea.l 152(sp),a0
    5ac2:	      |   move.l d0,40(a0)
    5ac6:	   /--|-- bra.w 6030 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    5aca:	   |  \-> movea.l 17c22 <currentFloor>,a0
    5ad0:	   |      move.l 16(a0),d1
    5ad4:	   |      movea.l 152(sp),a0
    5ad8:	   |      move.l 44(a0),d0
    5adc:	   |      add.l d0,d0
    5ade:	   |      add.l d0,d0
    5ae0:	   |      movea.l d1,a0
    5ae2:	   |      adda.l d0,a0
    5ae4:	   |      move.l (a0),d1
    5ae6:	   |      movea.l 152(sp),a0
    5aea:	   |      move.l 48(a0),d0
    5aee:	   |      add.l d0,d0
    5af0:	   |      add.l d0,d0
    5af2:	   |      movea.l d1,a0
    5af4:	   |      adda.l d0,a0
    5af6:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    5afa:	   |      moveq #-1,d0
    5afc:	   |      cmp.l 144(sp),d0
    5b00:	   |  /-- bne.s 5b08 <doBorderStuff+0x88>
    5b02:	   |  |   clr.w d0
    5b04:	/--|--|-- bra.w 6130 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    5b08:	|  |  \-> movea.l 17c22 <currentFloor>,a0
    5b0e:	|  |      move.l 12(a0),d1
    5b12:	|  |      move.l 144(sp),d0
    5b16:	|  |      lsl.l #3,d0
    5b18:	|  |      add.l d0,d1
    5b1a:	|  |      movea.l 17c22 <currentFloor>,a0
    5b20:	|  |      movea.l 12(a0),a1
    5b24:	|  |      movea.l 152(sp),a0
    5b28:	|  |      move.l 44(a0),d0
    5b2c:	|  |      lsl.l #3,d0
    5b2e:	|  |      add.l a1,d0
    5b30:	|  |      lea 40(sp),a0
    5b34:	|  |      move.l a0,-(sp)
    5b36:	|  |      lea 48(sp),a0
    5b3a:	|  |      move.l a0,-(sp)
    5b3c:	|  |      move.l d1,-(sp)
    5b3e:	|  |      move.l d0,-(sp)
    5b40:	|  |      jsr 10fda <getMatchingCorners>
    5b46:	|  |      lea 16(sp),sp
    5b4a:	|  |      tst.w d0
    5b4c:	|  |  /-- bne.s 5b62 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    5b4e:	|  |  |   pea 14c70 <incbin_player_end+0x164>
    5b54:	|  |  |   jsr 11d08 <KPrintF>
    5b5a:	|  |  |   addq.l #4,sp
            return FALSE;
    5b5c:	|  |  |   clr.w d0
    5b5e:	+--|--|-- bra.w 6130 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    5b62:	|  |  \-> movea.l 152(sp),a0
    5b66:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    5b6c:	|  |      movea.l 152(sp),a0
    5b70:	|  |      move.l (a0),d0
    5b72:	|  |      move.l d0,-(sp)
    5b74:	|  |      jsr 120f8 <__fixsfsi>
    5b7a:	|  |      addq.l #4,sp
    5b7c:	|  |      move.l d0,140(sp)
    5b80:	|  |      movea.l 152(sp),a0
    5b84:	|  |      move.l 4(a0),d0
    5b88:	|  |      move.l d0,-(sp)
    5b8a:	|  |      jsr 120f8 <__fixsfsi>
    5b90:	|  |      addq.l #4,sp
    5b92:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    5b96:	|  |      movea.l 152(sp),a0
    5b9a:	|  |      move.l 28(a0),132(sp)
    5ba0:	|  |      movea.l 152(sp),a0
    5ba4:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    5baa:	|  |      movea.l 17c22 <currentFloor>,a0
    5bb0:	|  |      move.l 4(a0),d1
    5bb4:	|  |      move.l 44(sp),d0
    5bb8:	|  |      lsl.l #3,d0
    5bba:	|  |      movea.l d1,a0
    5bbc:	|  |      adda.l d0,a0
    5bbe:	|  |      move.l (a0),124(sp)
    5bc2:	|  |      movea.l 17c22 <currentFloor>,a0
    5bc8:	|  |      move.l 4(a0),d1
    5bcc:	|  |      move.l 44(sp),d0
    5bd0:	|  |      lsl.l #3,d0
    5bd2:	|  |      movea.l d1,a0
    5bd4:	|  |      adda.l d0,a0
    5bd6:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    5bdc:	|  |      movea.l 17c22 <currentFloor>,a0
    5be2:	|  |      move.l 4(a0),d1
    5be6:	|  |      move.l 40(sp),d0
    5bea:	|  |      lsl.l #3,d0
    5bec:	|  |      movea.l d1,a0
    5bee:	|  |      adda.l d0,a0
    5bf0:	|  |      move.l (a0),116(sp)
    5bf4:	|  |      movea.l 17c22 <currentFloor>,a0
    5bfa:	|  |      move.l 4(a0),d1
    5bfe:	|  |      move.l 40(sp),d0
    5c02:	|  |      lsl.l #3,d0
    5c04:	|  |      movea.l d1,a0
    5c06:	|  |      adda.l d0,a0
    5c08:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    5c0e:	|  |      move.l 140(sp),d0
    5c12:	|  |      sub.l 132(sp),d0
    5c16:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    5c1a:	|  |      move.l 136(sp),d0
    5c1e:	|  |      sub.l 128(sp),d0
    5c22:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    5c26:	|  |      move.l 116(sp),d0
    5c2a:	|  |      sub.l 124(sp),d0
    5c2e:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    5c32:	|  |      move.l 112(sp),d0
    5c36:	|  |      sub.l 120(sp),d0
    5c3a:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    5c3e:	|  |      move.l 124(sp),d0
    5c42:	|  |      sub.l 140(sp),d0
    5c46:	|  |      move.l 104(sp),-(sp)
    5c4a:	|  |      move.l d0,-(sp)
    5c4c:	|  |      jsr 126ba <__mulsi3>
    5c52:	|  |      addq.l #8,sp
    5c54:	|  |      move.l d0,d2
    5c56:	|  |      move.l 120(sp),d0
    5c5a:	|  |      sub.l 136(sp),d0
    5c5e:	|  |      move.l 108(sp),-(sp)
    5c62:	|  |      move.l d0,-(sp)
    5c64:	|  |      jsr 126ba <__mulsi3>
    5c6a:	|  |      addq.l #8,sp
    5c6c:	|  |      move.l d2,d1
    5c6e:	|  |      sub.l d0,d1
    5c70:	|  |      move.l d1,-(sp)
    5c72:	|  |      jsr 12120 <__floatsidf>
    5c78:	|  |      addq.l #4,sp
    5c7a:	|  |      move.l d0,32(sp)
    5c7e:	|  |      move.l d1,36(sp)
    5c82:	|  |      move.l 32(sp),88(sp)
    5c88:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    5c8e:	|  |      move.l 96(sp),-(sp)
    5c92:	|  |      move.l 112(sp),-(sp)
    5c96:	|  |      jsr 126ba <__mulsi3>
    5c9c:	|  |      addq.l #8,sp
    5c9e:	|  |      move.l d0,d2
    5ca0:	|  |      move.l 100(sp),-(sp)
    5ca4:	|  |      move.l 108(sp),-(sp)
    5ca8:	|  |      jsr 126ba <__mulsi3>
    5cae:	|  |      addq.l #8,sp
    5cb0:	|  |      move.l d2,d1
    5cb2:	|  |      sub.l d0,d1
    5cb4:	|  |      move.l d1,-(sp)
    5cb6:	|  |      jsr 12120 <__floatsidf>
    5cbc:	|  |      addq.l #4,sp
    5cbe:	|  |      move.l d1,-(sp)
    5cc0:	|  |      move.l d0,-(sp)
    5cc2:	|  |      move.l 100(sp),-(sp)
    5cc6:	|  |      move.l 100(sp),-(sp)
    5cca:	|  |      jsr 11faa <__divdf3>
    5cd0:	|  |      lea 16(sp),sp
    5cd4:	|  |      move.l d0,24(sp)
    5cd8:	|  |      move.l d1,28(sp)
    5cdc:	|  |      move.l 24(sp),88(sp)
    5ce2:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    5ce8:	|  |      clr.l -(sp)
    5cea:	|  |      clr.l -(sp)
    5cec:	|  |      move.l 100(sp),-(sp)
    5cf0:	|  |      move.l 100(sp),-(sp)
    5cf4:	|  |      jsr 1227e <__gtdf2>
    5cfa:	|  |      lea 16(sp),sp
    5cfe:	|  |      tst.l d0
    5d00:	|  |  /-- ble.w 5dd8 <doBorderStuff+0x358>
    5d04:	|  |  |   clr.l -(sp)
    5d06:	|  |  |   move.l #1072693248,-(sp)
    5d0c:	|  |  |   move.l 100(sp),-(sp)
    5d10:	|  |  |   move.l 100(sp),-(sp)
    5d14:	|  |  |   jsr 12338 <__ltdf2>
    5d1a:	|  |  |   lea 16(sp),sp
    5d1e:	|  |  |   tst.l d0
    5d20:	|  |  +-- bge.w 5dd8 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    5d24:	|  |  |   move.l 124(sp),-(sp)
    5d28:	|  |  |   jsr 12120 <__floatsidf>
    5d2e:	|  |  |   addq.l #4,sp
    5d30:	|  |  |   move.l d0,d2
    5d32:	|  |  |   move.l d1,d3
    5d34:	|  |  |   move.l 100(sp),-(sp)
    5d38:	|  |  |   jsr 12120 <__floatsidf>
    5d3e:	|  |  |   addq.l #4,sp
    5d40:	|  |  |   move.l 92(sp),-(sp)
    5d44:	|  |  |   move.l 92(sp),-(sp)
    5d48:	|  |  |   move.l d1,-(sp)
    5d4a:	|  |  |   move.l d0,-(sp)
    5d4c:	|  |  |   jsr 121b0 <__muldf3>
    5d52:	|  |  |   lea 16(sp),sp
    5d56:	|  |  |   move.l d1,-(sp)
    5d58:	|  |  |   move.l d0,-(sp)
    5d5a:	|  |  |   move.l d3,-(sp)
    5d5c:	|  |  |   move.l d2,-(sp)
    5d5e:	|  |  |   jsr 11f48 <__adddf3>
    5d64:	|  |  |   lea 16(sp),sp
    5d68:	|  |  |   move.l d1,-(sp)
    5d6a:	|  |  |   move.l d0,-(sp)
    5d6c:	|  |  |   jsr 120b8 <__fixdfsi>
    5d72:	|  |  |   addq.l #8,sp
    5d74:	|  |  |   movea.l 152(sp),a0
    5d78:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    5d7c:	|  |  |   move.l 120(sp),-(sp)
    5d80:	|  |  |   jsr 12120 <__floatsidf>
    5d86:	|  |  |   addq.l #4,sp
    5d88:	|  |  |   move.l d0,d2
    5d8a:	|  |  |   move.l d1,d3
    5d8c:	|  |  |   move.l 96(sp),-(sp)
    5d90:	|  |  |   jsr 12120 <__floatsidf>
    5d96:	|  |  |   addq.l #4,sp
    5d98:	|  |  |   move.l 92(sp),-(sp)
    5d9c:	|  |  |   move.l 92(sp),-(sp)
    5da0:	|  |  |   move.l d1,-(sp)
    5da2:	|  |  |   move.l d0,-(sp)
    5da4:	|  |  |   jsr 121b0 <__muldf3>
    5daa:	|  |  |   lea 16(sp),sp
    5dae:	|  |  |   move.l d1,-(sp)
    5db0:	|  |  |   move.l d0,-(sp)
    5db2:	|  |  |   move.l d3,-(sp)
    5db4:	|  |  |   move.l d2,-(sp)
    5db6:	|  |  |   jsr 11f48 <__adddf3>
    5dbc:	|  |  |   lea 16(sp),sp
    5dc0:	|  |  |   move.l d1,-(sp)
    5dc2:	|  |  |   move.l d0,-(sp)
    5dc4:	|  |  |   jsr 120b8 <__fixdfsi>
    5dca:	|  |  |   addq.l #8,sp
    5dcc:	|  |  |   movea.l 152(sp),a0
    5dd0:	|  |  |   move.l d0,40(a0)
    5dd4:	|  +--|-- bra.w 6030 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    5dd8:	|  |  \-> move.l 140(sp),d0
    5ddc:	|  |      sub.l 124(sp),d0
    5de0:	|  |      move.l d0,84(sp)
    5de4:	|  |      move.l 140(sp),d0
    5de8:	|  |      sub.l 116(sp),d0
    5dec:	|  |      move.l d0,80(sp)
    5df0:	|  |      move.l 132(sp),d0
    5df4:	|  |      sub.l 124(sp),d0
    5df8:	|  |      move.l d0,76(sp)
    5dfc:	|  |      move.l 132(sp),d0
    5e00:	|  |      sub.l 116(sp),d0
    5e04:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    5e08:	|  |      move.l 136(sp),d0
    5e0c:	|  |      sub.l 120(sp),d0
    5e10:	|  |      move.l d0,68(sp)
    5e14:	|  |      move.l 136(sp),d0
    5e18:	|  |      sub.l 112(sp),d0
    5e1c:	|  |      move.l d0,64(sp)
    5e20:	|  |      move.l 128(sp),d0
    5e24:	|  |      sub.l 120(sp),d0
    5e28:	|  |      move.l d0,60(sp)
    5e2c:	|  |      move.l 128(sp),d0
    5e30:	|  |      sub.l 112(sp),d0
    5e34:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    5e38:	|  |      move.l 84(sp),-(sp)
    5e3c:	|  |      move.l 88(sp),-(sp)
    5e40:	|  |      jsr 126ba <__mulsi3>
    5e46:	|  |      addq.l #8,sp
    5e48:	|  |      move.l d0,84(sp)
    5e4c:	|  |      move.l 80(sp),-(sp)
    5e50:	|  |      move.l 84(sp),-(sp)
    5e54:	|  |      jsr 126ba <__mulsi3>
    5e5a:	|  |      addq.l #8,sp
    5e5c:	|  |      move.l d0,80(sp)
    5e60:	|  |      move.l 76(sp),-(sp)
    5e64:	|  |      move.l 80(sp),-(sp)
    5e68:	|  |      jsr 126ba <__mulsi3>
    5e6e:	|  |      addq.l #8,sp
    5e70:	|  |      move.l d0,76(sp)
    5e74:	|  |      move.l 72(sp),-(sp)
    5e78:	|  |      move.l 76(sp),-(sp)
    5e7c:	|  |      jsr 126ba <__mulsi3>
    5e82:	|  |      addq.l #8,sp
    5e84:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    5e88:	|  |      move.l 68(sp),-(sp)
    5e8c:	|  |      move.l 72(sp),-(sp)
    5e90:	|  |      jsr 126ba <__mulsi3>
    5e96:	|  |      addq.l #8,sp
    5e98:	|  |      move.l d0,68(sp)
    5e9c:	|  |      move.l 64(sp),-(sp)
    5ea0:	|  |      move.l 68(sp),-(sp)
    5ea4:	|  |      jsr 126ba <__mulsi3>
    5eaa:	|  |      addq.l #8,sp
    5eac:	|  |      move.l d0,64(sp)
    5eb0:	|  |      move.l 60(sp),-(sp)
    5eb4:	|  |      move.l 64(sp),-(sp)
    5eb8:	|  |      jsr 126ba <__mulsi3>
    5ebe:	|  |      addq.l #8,sp
    5ec0:	|  |      move.l d0,60(sp)
    5ec4:	|  |      move.l 56(sp),-(sp)
    5ec8:	|  |      move.l 60(sp),-(sp)
    5ecc:	|  |      jsr 126ba <__mulsi3>
    5ed2:	|  |      addq.l #8,sp
    5ed4:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    5ed8:	|  |      move.l 84(sp),-(sp)
    5edc:	|  |      jsr 12120 <__floatsidf>
    5ee2:	|  |      addq.l #4,sp
    5ee4:	|  |      move.l d0,d2
    5ee6:	|  |      move.l d1,d3
    5ee8:	|  |      move.l 68(sp),-(sp)
    5eec:	|  |      jsr 12120 <__floatsidf>
    5ef2:	|  |      addq.l #4,sp
    5ef4:	|  |      move.l d1,-(sp)
    5ef6:	|  |      move.l d0,-(sp)
    5ef8:	|  |      move.l d3,-(sp)
    5efa:	|  |      move.l d2,-(sp)
    5efc:	|  |      jsr 11f48 <__adddf3>
    5f02:	|  |      lea 16(sp),sp
    5f06:	|  |      move.l d1,-(sp)
    5f08:	|  |      move.l d0,-(sp)
    5f0a:	|  |      jsr 12670 <sqrt>
    5f10:	|  |      addq.l #8,sp
    5f12:	|  |      move.l d0,d2
    5f14:	|  |      move.l d1,d3
    5f16:	|  |      move.l 76(sp),-(sp)
    5f1a:	|  |      jsr 12120 <__floatsidf>
    5f20:	|  |      addq.l #4,sp
    5f22:	|  |      move.l d0,d4
    5f24:	|  |      move.l d1,d5
    5f26:	|  |      move.l 60(sp),-(sp)
    5f2a:	|  |      jsr 12120 <__floatsidf>
    5f30:	|  |      addq.l #4,sp
    5f32:	|  |      move.l d1,-(sp)
    5f34:	|  |      move.l d0,-(sp)
    5f36:	|  |      move.l d5,-(sp)
    5f38:	|  |      move.l d4,-(sp)
    5f3a:	|  |      jsr 11f48 <__adddf3>
    5f40:	|  |      lea 16(sp),sp
    5f44:	|  |      move.l d1,-(sp)
    5f46:	|  |      move.l d0,-(sp)
    5f48:	|  |      jsr 12670 <sqrt>
    5f4e:	|  |      addq.l #8,sp
    5f50:	|  |      move.l d1,-(sp)
    5f52:	|  |      move.l d0,-(sp)
    5f54:	|  |      move.l d3,-(sp)
    5f56:	|  |      move.l d2,-(sp)
    5f58:	|  |      jsr 11f48 <__adddf3>
    5f5e:	|  |      lea 16(sp),sp
    5f62:	|  |      move.l d0,d2
    5f64:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    5f66:	|  |      move.l 80(sp),-(sp)
    5f6a:	|  |      jsr 12120 <__floatsidf>
    5f70:	|  |      addq.l #4,sp
    5f72:	|  |      move.l d0,d4
    5f74:	|  |      move.l d1,d5
    5f76:	|  |      move.l 64(sp),-(sp)
    5f7a:	|  |      jsr 12120 <__floatsidf>
    5f80:	|  |      addq.l #4,sp
    5f82:	|  |      move.l d1,-(sp)
    5f84:	|  |      move.l d0,-(sp)
    5f86:	|  |      move.l d5,-(sp)
    5f88:	|  |      move.l d4,-(sp)
    5f8a:	|  |      jsr 11f48 <__adddf3>
    5f90:	|  |      lea 16(sp),sp
    5f94:	|  |      move.l d1,-(sp)
    5f96:	|  |      move.l d0,-(sp)
    5f98:	|  |      jsr 12670 <sqrt>
    5f9e:	|  |      addq.l #8,sp
    5fa0:	|  |      move.l d0,d4
    5fa2:	|  |      move.l d1,d5
    5fa4:	|  |      move.l 72(sp),-(sp)
    5fa8:	|  |      jsr 12120 <__floatsidf>
    5fae:	|  |      addq.l #4,sp
    5fb0:	|  |      move.l d0,d6
    5fb2:	|  |      move.l d1,d7
    5fb4:	|  |      move.l 56(sp),-(sp)
    5fb8:	|  |      jsr 12120 <__floatsidf>
    5fbe:	|  |      addq.l #4,sp
    5fc0:	|  |      move.l d1,-(sp)
    5fc2:	|  |      move.l d0,-(sp)
    5fc4:	|  |      move.l d7,-(sp)
    5fc6:	|  |      move.l d6,-(sp)
    5fc8:	|  |      jsr 11f48 <__adddf3>
    5fce:	|  |      lea 16(sp),sp
    5fd2:	|  |      move.l d1,-(sp)
    5fd4:	|  |      move.l d0,-(sp)
    5fd6:	|  |      jsr 12670 <sqrt>
    5fdc:	|  |      addq.l #8,sp
    5fde:	|  |      move.l d1,-(sp)
    5fe0:	|  |      move.l d0,-(sp)
    5fe2:	|  |      move.l d5,-(sp)
    5fe4:	|  |      move.l d4,-(sp)
    5fe6:	|  |      jsr 11f48 <__adddf3>
    5fec:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    5ff0:	|  |      move.l d1,-(sp)
    5ff2:	|  |      move.l d0,-(sp)
    5ff4:	|  |      move.l d3,-(sp)
    5ff6:	|  |      move.l d2,-(sp)
    5ff8:	|  |      jsr 12338 <__ltdf2>
    5ffe:	|  |      lea 16(sp),sp
    6002:	|  |      tst.l d0
    6004:	|  |  /-- bge.s 601c <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    6006:	|  |  |   movea.l 152(sp),a0
    600a:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    6010:	|  |  |   movea.l 152(sp),a0
    6014:	|  |  |   move.l 120(sp),40(a0)
    601a:	|  +--|-- bra.s 6030 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    601c:	|  |  \-> movea.l 152(sp),a0
    6020:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    6026:	|  |      movea.l 152(sp),a0
    602a:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    6030:	|  \----> movea.l 152(sp),a0
    6034:	|         move.l 40(a0),d0
    6038:	|         move.l d0,-(sp)
    603a:	|         jsr 12160 <__floatsisf>
    6040:	|         addq.l #4,sp
    6042:	|         move.l d0,d1
    6044:	|         movea.l 152(sp),a0
    6048:	|         move.l 4(a0),d0
    604c:	|         move.l d0,-(sp)
    604e:	|         move.l d1,-(sp)
    6050:	|         jsr 12454 <__subsf3>
    6056:	|         addq.l #8,sp
    6058:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    605c:	|         movea.l 152(sp),a0
    6060:	|         move.l (a0),d2
    6062:	|         movea.l 152(sp),a0
    6066:	|         move.l 36(a0),d0
    606a:	|         move.l d0,-(sp)
    606c:	|         jsr 12160 <__floatsisf>
    6072:	|         addq.l #4,sp
    6074:	|         move.l d0,-(sp)
    6076:	|         move.l d2,-(sp)
    6078:	|         jsr 12454 <__subsf3>
    607e:	|         addq.l #8,sp
    6080:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    6084:	|         clr.l -(sp)
    6086:	|         move.l 52(sp),-(sp)
    608a:	|         jsr 123bc <__nesf2>
    6090:	|         addq.l #8,sp
    6092:	|         tst.l d0
    6094:	|     /-- bne.s 60a8 <doBorderStuff+0x628>
    6096:	|     |   clr.l -(sp)
    6098:	|     |   move.l 56(sp),-(sp)
    609c:	|     |   jsr 123bc <__nesf2>
    60a2:	|     |   addq.l #8,sp
    60a4:	|     |   tst.l d0
    60a6:	|  /--|-- beq.s 611e <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    60a8:	|  |  \-> move.l 52(sp),d0
    60ac:	|  |      move.l d0,-(sp)
    60ae:	|  |      move.l d0,-(sp)
    60b0:	|  |      jsr 11f12 <__addsf3>
    60b6:	|  |      addq.l #8,sp
    60b8:	|  |      move.l d0,-(sp)
    60ba:	|  |      move.l 52(sp),-(sp)
    60be:	|  |      jsr 124c0 <atan2f>
    60c4:	|  |      addq.l #8,sp
    60c6:	|  |      move.l d0,-(sp)
    60c8:	|  |      jsr 12078 <__extendsfdf2>
    60ce:	|  |      addq.l #4,sp
    60d0:	|  |      move.l #-1540411785,-(sp)
    60d6:	|  |      move.l #1078765033,-(sp)
    60dc:	|  |      move.l d1,-(sp)
    60de:	|  |      move.l d0,-(sp)
    60e0:	|  |      jsr 121b0 <__muldf3>
    60e6:	|  |      lea 16(sp),sp
    60ea:	|  |      clr.l -(sp)
    60ec:	|  |      move.l #1080459264,-(sp)
    60f2:	|  |      move.l d1,-(sp)
    60f4:	|  |      move.l d0,-(sp)
    60f6:	|  |      jsr 11f48 <__adddf3>
    60fc:	|  |      lea 16(sp),sp
    6100:	|  |      move.l d1,-(sp)
    6102:	|  |      move.l d0,-(sp)
    6104:	|  |      jsr 120b8 <__fixdfsi>
    610a:	|  |      addq.l #8,sp
    610c:	|  |      movea.l 152(sp),a0
    6110:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    6114:	|  |      movea.l 152(sp),a0
    6118:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    611e:	|  \----> pea 1 <_start+0x1>
    6122:	|         move.l 156(sp),-(sp)
    6126:	|         jsr 4fca <setFrames>
    612c:	|         addq.l #8,sp
    return TRUE;
    612e:	|         moveq #1,d0
}
    6130:	\-------> movem.l (sp)+,d2-d7
    6134:	          lea 124(sp),sp
    6138:	          rts

0000613a <findPerson>:


struct onScreenPerson * findPerson (int v) {
    613a:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    613c:	          move.l 17b76 <allPeople>,(sp)
	while (thisPerson) {
    6142:	      /-- bra.s 615a <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    6144:	/-----|-> movea.l (sp),a0
    6146:	|     |   movea.l 102(a0),a0
    614a:	|     |   move.l 4(a0),d0
    614e:	|     |   cmp.l 8(sp),d0
    6152:	|  /--|-- beq.s 6160 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    6154:	|  |  |   movea.l (sp),a0
    6156:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    615a:	|  |  \-> tst.l (sp)
    615c:	\--|----- bne.s 6144 <findPerson+0xa>
    615e:	   |  /-- bra.s 6162 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    6160:	   \--|-> nop
	}
	return thisPerson;
    6162:	      \-> move.l (sp),d0
}
    6164:	          addq.l #4,sp
    6166:	          rts

00006168 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    6168:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    616a:	       move.l 12(sp),-(sp)
    616e:	       jsr 613a <findPerson>
    6174:	       addq.l #4,sp
    6176:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    6178:	   /-- bne.s 617e <floatCharacter+0x16>
    617a:	   |   clr.w d0
    617c:	/--|-- bra.s 6188 <floatCharacter+0x20>
	moveMe -> floaty = f;
    617e:	|  \-> movea.l (sp),a0
    6180:	|      move.l 8(sp),12(a0)
	return TRUE;
    6186:	|      moveq #1,d0
}
    6188:	\----> addq.l #4,sp
    618a:	       rts

0000618c <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    618c:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    618e:	          tst.l 8(sp)
    6192:	      /-- bne.s 61a0 <forceWalkingPerson+0x14>
    6194:	      |   tst.l 12(sp)
    6198:	      +-- bne.s 61a0 <forceWalkingPerson+0x14>
    619a:	      |   clr.w d0
    619c:	/-----|-- bra.w 6232 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    61a0:	|     \-> move.l 16(sp),-(sp)
    61a4:	|         jsr 613a <findPerson>
    61aa:	|         addq.l #4,sp
    61ac:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    61ae:	|     /-- bne.s 61b4 <forceWalkingPerson+0x28>
    61b0:	|     |   clr.w d0
    61b2:	+-----|-- bra.s 6232 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    61b4:	|     \-> movea.l (sp),a0
    61b6:	|         move.l 56(a0),d0
    61ba:	|     /-- beq.s 61cc <forceWalkingPerson+0x40>
    61bc:	|     |   movea.l (sp),a0
    61be:	|     |   move.l 56(a0),d0
    61c2:	|     |   move.l d0,-(sp)
    61c4:	|     |   jsr 1af4 <abortFunction>
    61ca:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    61cc:	|     \-> movea.l (sp),a0
    61ce:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    61d4:	|         movea.l (sp),a0
    61d6:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    61da:	|         movea.l (sp),a0
    61dc:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    61e2:	|         movea.l (sp),a0
    61e4:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    61ea:	|         movea.l (sp),a0
    61ec:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    61f2:	|         movea.l (sp),a0
    61f4:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    61f8:	|         movea.l (sp),a0
    61fa:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    61fe:	|         move.l (sp),-(sp)
    6200:	|         jsr 5a80 <doBorderStuff>
    6206:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    6208:	|         pea 1 <_start+0x1>
    620c:	|         move.l 4(sp),-(sp)
    6210:	|         jsr 78bc <walkMe>
    6216:	|         addq.l #8,sp
    6218:	|         tst.w d0
    621a:	|     /-- bne.s 6224 <forceWalkingPerson+0x98>
    621c:	|     |   movea.l (sp),a0
    621e:	|     |   move.w 54(a0),d0
    6222:	|  /--|-- beq.s 6230 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    6224:	|  |  \-> movea.l (sp),a0
    6226:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    622c:	|  |      moveq #1,d0
    622e:	+--|----- bra.s 6232 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    6230:	|  \----> clr.w d0
    }
}
    6232:	\-------> addq.l #4,sp
    6234:	          rts

00006236 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    6236:	                lea -56(sp),sp
    623a:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    623c:	                move.l #320,56(sp)
    6244:	                move.l #200,52(sp)
    624c:	                moveq #-1,d0
    624e:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    6252:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    625a:	                clr.l 44(sp)
    625e:	   /----------- bra.w 6436 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    6262:	/--|----------> movea.l 17c22 <currentFloor>,a0
    6268:	|  |            move.l 12(a0),d1
    626c:	|  |            move.l 44(sp),d0
    6270:	|  |            lsl.l #3,d0
    6272:	|  |            movea.l d1,a0
    6274:	|  |            adda.l d0,a0
    6276:	|  |            move.l (a0),d0
    6278:	|  |            move.l d0,d1
    627a:	|  |            subq.l #1,d1
    627c:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    6280:	|  |            clr.l 40(sp)
    6284:	|  |     /----- bra.w 6414 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    6288:	|  |  /--|----> movea.l 17c22 <currentFloor>,a0
    628e:	|  |  |  |      move.l 4(a0),d1
    6292:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    6298:	|  |  |  |      movea.l 12(a0),a0
    629c:	|  |  |  |      move.l 44(sp),d0
    62a0:	|  |  |  |      lsl.l #3,d0
    62a2:	|  |  |  |      adda.l d0,a0
    62a4:	|  |  |  |      movea.l 4(a0),a0
    62a8:	|  |  |  |      move.l 40(sp),d0
    62ac:	|  |  |  |      add.l d0,d0
    62ae:	|  |  |  |      add.l d0,d0
    62b0:	|  |  |  |      adda.l d0,a0
    62b2:	|  |  |  |      move.l (a0),d0
    62b4:	|  |  |  |      lsl.l #3,d0
    62b6:	|  |  |  |      movea.l d1,a0
    62b8:	|  |  |  |      adda.l d0,a0
    62ba:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    62be:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    62c4:	|  |  |  |      move.l 4(a0),d1
    62c8:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    62ce:	|  |  |  |      movea.l 12(a0),a0
    62d2:	|  |  |  |      move.l 44(sp),d0
    62d6:	|  |  |  |      lsl.l #3,d0
    62d8:	|  |  |  |      adda.l d0,a0
    62da:	|  |  |  |      movea.l 4(a0),a0
    62de:	|  |  |  |      move.l 40(sp),d0
    62e2:	|  |  |  |      add.l d0,d0
    62e4:	|  |  |  |      add.l d0,d0
    62e6:	|  |  |  |      adda.l d0,a0
    62e8:	|  |  |  |      move.l (a0),d0
    62ea:	|  |  |  |      lsl.l #3,d0
    62ec:	|  |  |  |      movea.l d1,a0
    62ee:	|  |  |  |      adda.l d0,a0
    62f0:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    62f6:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    62fc:	|  |  |  |      move.l 4(a0),d1
    6300:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    6306:	|  |  |  |      movea.l 12(a0),a0
    630a:	|  |  |  |      move.l 44(sp),d0
    630e:	|  |  |  |      lsl.l #3,d0
    6310:	|  |  |  |      adda.l d0,a0
    6312:	|  |  |  |      movea.l 4(a0),a0
    6316:	|  |  |  |      move.l 36(sp),d0
    631a:	|  |  |  |      add.l d0,d0
    631c:	|  |  |  |      add.l d0,d0
    631e:	|  |  |  |      adda.l d0,a0
    6320:	|  |  |  |      move.l (a0),d0
    6322:	|  |  |  |      lsl.l #3,d0
    6324:	|  |  |  |      movea.l d1,a0
    6326:	|  |  |  |      adda.l d0,a0
    6328:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    632c:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    6332:	|  |  |  |      move.l 4(a0),d1
    6336:	|  |  |  |      movea.l 17c22 <currentFloor>,a0
    633c:	|  |  |  |      movea.l 12(a0),a0
    6340:	|  |  |  |      move.l 44(sp),d0
    6344:	|  |  |  |      lsl.l #3,d0
    6346:	|  |  |  |      adda.l d0,a0
    6348:	|  |  |  |      movea.l 4(a0),a0
    634c:	|  |  |  |      move.l 36(sp),d0
    6350:	|  |  |  |      add.l d0,d0
    6352:	|  |  |  |      add.l d0,d0
    6354:	|  |  |  |      adda.l d0,a0
    6356:	|  |  |  |      move.l (a0),d0
    6358:	|  |  |  |      lsl.l #3,d0
    635a:	|  |  |  |      movea.l d1,a0
    635c:	|  |  |  |      adda.l d0,a0
    635e:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    6364:	|  |  |  |      movea.l 68(sp),a0
    6368:	|  |  |  |      move.l (a0),d1
    636a:	|  |  |  |      movea.l 64(sp),a0
    636e:	|  |  |  |      move.l (a0),d0
    6370:	|  |  |  |      move.l d1,-(sp)
    6372:	|  |  |  |      move.l d0,-(sp)
    6374:	|  |  |  |      move.l 24(sp),-(sp)
    6378:	|  |  |  |      move.l 32(sp),-(sp)
    637c:	|  |  |  |      move.l 40(sp),-(sp)
    6380:	|  |  |  |      move.l 48(sp),-(sp)
    6384:	|  |  |  |      lea 28(sp),a0
    6388:	|  |  |  |      move.l a0,-(sp)
    638a:	|  |  |  |      lea 36(sp),a0
    638e:	|  |  |  |      move.l a0,-(sp)
    6390:	|  |  |  |      jsr 10bb8 <closestPointOnLine>
    6396:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    639a:	|  |  |  |      movea.l 64(sp),a0
    639e:	|  |  |  |      move.l (a0),d0
    63a0:	|  |  |  |      move.l 8(sp),d1
    63a4:	|  |  |  |      move.l d0,d2
    63a6:	|  |  |  |      sub.l d1,d2
    63a8:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    63ac:	|  |  |  |      movea.l 68(sp),a0
    63b0:	|  |  |  |      move.l (a0),d0
    63b2:	|  |  |  |      move.l 4(sp),d1
    63b6:	|  |  |  |      move.l d0,d2
    63b8:	|  |  |  |      sub.l d1,d2
    63ba:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    63be:	|  |  |  |      move.l 28(sp),-(sp)
    63c2:	|  |  |  |      move.l 32(sp),-(sp)
    63c6:	|  |  |  |      jsr 126ba <__mulsi3>
    63cc:	|  |  |  |      addq.l #8,sp
    63ce:	|  |  |  |      move.l d0,d2
    63d0:	|  |  |  |      move.l 24(sp),-(sp)
    63d4:	|  |  |  |      move.l 28(sp),-(sp)
    63d8:	|  |  |  |      jsr 126ba <__mulsi3>
    63de:	|  |  |  |      addq.l #8,sp
    63e0:	|  |  |  |      move.l d2,d1
    63e2:	|  |  |  |      add.l d0,d1
    63e4:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    63e8:	|  |  |  |      move.l 12(sp),d2
    63ec:	|  |  |  |      cmp.l 32(sp),d2
    63f0:	|  |  |  |  /-- bge.s 640a <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    63f2:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    63f8:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    63fe:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    6404:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    640a:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    6410:	|  |  |  |      addq.l #1,40(sp)
    6414:	|  |  |  \----> movea.l 17c22 <currentFloor>,a0
    641a:	|  |  |         move.l 12(a0),d1
    641e:	|  |  |         move.l 44(sp),d0
    6422:	|  |  |         lsl.l #3,d0
    6424:	|  |  |         movea.l d1,a0
    6426:	|  |  |         adda.l d0,a0
    6428:	|  |  |         move.l (a0),d0
    642a:	|  |  |         cmp.l 40(sp),d0
    642e:	|  |  \-------- bgt.w 6288 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    6432:	|  |            addq.l #1,44(sp)
    6436:	|  \----------> movea.l 17c22 <currentFloor>,a0
    643c:	|               move.l 8(a0),d0
    6440:	|               cmp.l 44(sp),d0
    6444:	\-------------- bgt.w 6262 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    6448:	                moveq #-1,d0
    644a:	                cmp.l 48(sp),d0
    644e:	            /-- bne.s 6454 <handleClosestPoint+0x21e>
    6450:	            |   clr.w d0
    6452:	         /--|-- bra.s 646e <handleClosestPoint+0x238>
	*setX = gotX;
    6454:	         |  \-> movea.l 64(sp),a0
    6458:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    645c:	         |      movea.l 68(sp),a0
    6460:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    6464:	         |      movea.l 72(sp),a0
    6468:	         |      move.l 48(sp),(a0)

	return TRUE;
    646c:	         |      moveq #1,d0
}
    646e:	         \----> move.l (sp)+,d2
    6470:	                lea 56(sp),sp
    6474:	                rts

00006476 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    6476:	clr.l 17b8a <personRegion+0x10>
	personRegion.sY = 0;
    647c:	clr.l 17b8e <personRegion+0x14>
	personRegion.di = -1;
    6482:	moveq #-1,d0
    6484:	move.l d0,17b92 <personRegion+0x18>
	allScreenRegions = NULL;
    648a:	clr.l 17c1a <allScreenRegions>

	return TRUE;
    6490:	moveq #1,d0
}
    6492:	rts

00006494 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    6494:	          subq.l #4,sp
    6496:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    6498:	          tst.l 12(sp)
    649c:	      /-- bne.s 64a4 <jumpPerson+0x10>
    649e:	      |   tst.l 16(sp)
    64a2:	/-----|-- beq.s 6518 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    64a4:	|     \-> move.l 20(sp),-(sp)
    64a8:	|         jsr 613a <findPerson>
    64ae:	|         addq.l #4,sp
    64b0:	|         move.l d0,4(sp)
    if (!moveMe) return;
    64b4:	|  /----- beq.s 651c <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    64b6:	|  |      movea.l 4(sp),a0
    64ba:	|  |      move.l 56(a0),d0
    64be:	|  |  /-- beq.s 64d2 <jumpPerson+0x3e>
    64c0:	|  |  |   movea.l 4(sp),a0
    64c4:	|  |  |   move.l 56(a0),d0
    64c8:	|  |  |   move.l d0,-(sp)
    64ca:	|  |  |   jsr 1af4 <abortFunction>
    64d0:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    64d2:	|  |  \-> movea.l 4(sp),a0
    64d6:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    64da:	|  |      movea.l 4(sp),a0
    64de:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    64e2:	|  |      movea.l 4(sp),a0
    64e6:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    64ea:	|  |      move.l 16(sp),-(sp)
    64ee:	|  |      jsr 12160 <__floatsisf>
    64f4:	|  |      addq.l #4,sp
    64f6:	|  |      move.l d0,d2
    64f8:	|  |      move.l 12(sp),-(sp)
    64fc:	|  |      jsr 12160 <__floatsisf>
    6502:	|  |      addq.l #4,sp
    6504:	|  |      move.l d2,-(sp)
    6506:	|  |      move.l d0,-(sp)
    6508:	|  |      move.l 12(sp),-(sp)
    650c:	|  |      jsr 6882 <moveAndScale>
    6512:	|  |      lea 12(sp),sp
    6516:	|  |  /-- bra.s 651e <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    6518:	\--|--|-> nop
    651a:	   |  +-- bra.s 651e <jumpPerson+0x8a>
    if (!moveMe) return;
    651c:	   \--|-> nop
}
    651e:	      \-> move.l (sp)+,d2
    6520:	          addq.l #4,sp
    6522:	          rts

00006524 <killAllPeople>:


void killAllPeople () {
    6524:	          subq.l #8,sp
    6526:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    6528:	   /----- bra.s 6594 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    652a:	/--|----> movea.l 17b76 <allPeople>,a0
    6530:	|  |      move.l 56(a0),d0
    6534:	|  |  /-- beq.s 654a <killAllPeople+0x26>
    6536:	|  |  |   movea.l 17b76 <allPeople>,a0
    653c:	|  |  |   move.l 56(a0),d0
    6540:	|  |  |   move.l d0,-(sp)
    6542:	|  |  |   jsr 1af4 <abortFunction>
    6548:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    654a:	|  |  \-> movea.l 17b76 <allPeople>,a0
    6550:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    6554:	|  |      move.l 17b76 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    655c:	|  |      movea.l 17b76 <allPeople>,a0
    6562:	|  |      move.l 24(a0),d0
    6566:	|  |      move.l d0,17b76 <allPeople>
		removeObjectType (killPeople -> thisType);
    656c:	|  |      movea.l 8(sp),a0
    6570:	|  |      move.l 102(a0),d0
    6574:	|  |      move.l d0,-(sp)
    6576:	|  |      jsr 90a8 <removeObjectType>
    657c:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    657e:	|  |      move.l 8(sp),4(sp)
    6584:	|  |      move.l 17b28 <SysBase>,d0
    658a:	|  |      movea.l d0,a6
    658c:	|  |      movea.l 4(sp),a1
    6590:	|  |      jsr -690(a6)
	while (allPeople) {
    6594:	|  \----> move.l 17b76 <allPeople>,d0
    659a:	\-------- bne.s 652a <killAllPeople+0x6>
	}
}
    659c:	          nop
    659e:	          nop
    65a0:	          movea.l (sp)+,a6
    65a2:	          addq.l #8,sp
    65a4:	          rts

000065a6 <killMostPeople>:

void killMostPeople() {
    65a6:	          lea -12(sp),sp
    65aa:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    65ac:	          move.l #97142,12(sp)

    while (*lookyHere) {
    65b4:	   /----- bra.w 663a <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    65b8:	/--|----> movea.l 12(sp),a0
    65bc:	|  |      movea.l (a0),a0
    65be:	|  |      move.l 106(a0),d0
    65c2:	|  |      moveq #32,d1
    65c4:	|  |      and.l d1,d0
    65c6:	|  |  /-- beq.s 65d8 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    65c8:	|  |  |   movea.l 12(sp),a0
    65cc:	|  |  |   move.l (a0),d0
    65ce:	|  |  |   moveq #24,d1
    65d0:	|  |  |   add.l d0,d1
    65d2:	|  |  |   move.l d1,12(sp)
    65d6:	|  +--|-- bra.s 663a <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    65d8:	|  |  \-> movea.l 12(sp),a0
    65dc:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    65e0:	|  |      movea.l 8(sp),a0
    65e4:	|  |      move.l 24(a0),d0
    65e8:	|  |      movea.l 12(sp),a0
    65ec:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    65ee:	|  |      movea.l 8(sp),a0
    65f2:	|  |      move.l 56(a0),d0
    65f6:	|  |  /-- beq.s 660a <killMostPeople+0x64>
    65f8:	|  |  |   movea.l 8(sp),a0
    65fc:	|  |  |   move.l 56(a0),d0
    6600:	|  |  |   move.l d0,-(sp)
    6602:	|  |  |   jsr 1af4 <abortFunction>
    6608:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    660a:	|  |  \-> movea.l 8(sp),a0
    660e:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    6612:	|  |      movea.l 8(sp),a0
    6616:	|  |      move.l 102(a0),d0
    661a:	|  |      move.l d0,-(sp)
    661c:	|  |      jsr 90a8 <removeObjectType>
    6622:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    6624:	|  |      move.l 8(sp),4(sp)
    662a:	|  |      move.l 17b28 <SysBase>,d0
    6630:	|  |      movea.l d0,a6
    6632:	|  |      movea.l 4(sp),a1
    6636:	|  |      jsr -690(a6)
    while (*lookyHere) {
    663a:	|  \----> movea.l 12(sp),a0
    663e:	|         move.l (a0),d0
    6640:	\-------- bne.w 65b8 <killMostPeople+0x12>
        }
    }
}
    6644:	          nop
    6646:	          nop
    6648:	          movea.l (sp)+,a6
    664a:	          lea 12(sp),sp
    664e:	          rts

00006650 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    6650:	clr.l -(sp)
    6652:	move.l sp,d0
    6654:	addq.l #8,d0
    6656:	move.l d0,-(sp)
    6658:	jsr 4fca <setFrames>
    665e:	addq.l #8,sp
}
    6660:	nop
    6662:	rts

00006664 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    6664:	          lea -12(sp),sp
    6668:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    666a:	          tst.l 20(sp)
    666e:	      /-- bne.s 667c <makeWalkingPerson+0x18>
    6670:	      |   tst.l 24(sp)
    6674:	      +-- bne.s 667c <makeWalkingPerson+0x18>
    6676:	      |   clr.w d0
    6678:	/-----|-- bra.w 6814 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    667c:	|     \-> movea.l 17c22 <currentFloor>,a0
    6682:	|         move.l 8(a0),d0
    6686:	|     /-- bne.s 668e <makeWalkingPerson+0x2a>
    6688:	|     |   clr.w d0
    668a:	+-----|-- bra.w 6814 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    668e:	|     \-> move.l 28(sp),-(sp)
    6692:	|         jsr 613a <findPerson>
    6698:	|         addq.l #4,sp
    669a:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    669e:	|     /-- bne.s 66a6 <makeWalkingPerson+0x42>
    66a0:	|     |   clr.w d0
    66a2:	+-----|-- bra.w 6814 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    66a6:	|     \-> movea.l 12(sp),a0
    66aa:	|         move.l 56(a0),d0
    66ae:	|     /-- beq.s 66c2 <makeWalkingPerson+0x5e>
    66b0:	|     |   movea.l 12(sp),a0
    66b4:	|     |   move.l 56(a0),d0
    66b8:	|     |   move.l d0,-(sp)
    66ba:	|     |   jsr 1af4 <abortFunction>
    66c0:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    66c2:	|     \-> movea.l 12(sp),a0
    66c6:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    66ca:	|         movea.l 12(sp),a0
    66ce:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    66d4:	|         movea.l 12(sp),a0
    66d8:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    66de:	|         movea.l 12(sp),a0
    66e2:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    66e8:	|         movea.l 12(sp),a0
    66ec:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    66f2:	|         move.l 24(sp),-(sp)
    66f6:	|         move.l 24(sp),-(sp)
    66fa:	|         jsr 110ba <inFloor>
    6700:	|         addq.l #8,sp
    6702:	|         movea.l 12(sp),a0
    6706:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    670a:	|         movea.l 12(sp),a0
    670e:	|         move.l 48(a0),d0
    6712:	|         moveq #-1,d1
    6714:	|         cmp.l d0,d1
    6716:	|     /-- bne.s 6746 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    6718:	|     |   movea.w #48,a0
    671c:	|     |   adda.l 12(sp),a0
    6720:	|     |   moveq #32,d1
    6722:	|     |   add.l 12(sp),d1
    6726:	|     |   moveq #28,d0
    6728:	|     |   add.l 12(sp),d0
    672c:	|     |   move.l a0,-(sp)
    672e:	|     |   move.l d1,-(sp)
    6730:	|     |   move.l d0,-(sp)
    6732:	|     |   jsr 6236 <handleClosestPoint>
    6738:	|     |   lea 12(sp),sp
    673c:	|     |   tst.w d0
    673e:	|     +-- bne.s 6746 <makeWalkingPerson+0xe2>
    6740:	|     |   clr.w d0
    6742:	+-----|-- bra.w 6814 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    6746:	|     \-> movea.l 12(sp),a0
    674a:	|         move.l 4(a0),d0
    674e:	|         move.l d0,-(sp)
    6750:	|         jsr 120f8 <__fixsfsi>
    6756:	|         addq.l #4,sp
    6758:	|         move.l d0,d2
    675a:	|         movea.l 12(sp),a0
    675e:	|         move.l (a0),d0
    6760:	|         move.l d0,-(sp)
    6762:	|         jsr 120f8 <__fixsfsi>
    6768:	|         addq.l #4,sp
    676a:	|         move.l d2,-(sp)
    676c:	|         move.l d0,-(sp)
    676e:	|         jsr 110ba <inFloor>
    6774:	|         addq.l #8,sp
    6776:	|         movea.l 12(sp),a0
    677a:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    677e:	|         movea.l 12(sp),a0
    6782:	|         move.l 44(a0),d0
    6786:	|         moveq #-1,d1
    6788:	|         cmp.l d0,d1
    678a:	|     /-- bne.s 67dc <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    678c:	|     |   movea.l 12(sp),a0
    6790:	|     |   move.l (a0),d0
    6792:	|     |   move.l d0,-(sp)
    6794:	|     |   jsr 120f8 <__fixsfsi>
    679a:	|     |   addq.l #4,sp
    679c:	|     |   move.l d0,8(sp)
    67a0:	|     |   movea.l 12(sp),a0
    67a4:	|     |   move.l 4(a0),d0
    67a8:	|     |   move.l d0,-(sp)
    67aa:	|     |   jsr 120f8 <__fixsfsi>
    67b0:	|     |   addq.l #4,sp
    67b2:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    67b6:	|     |   moveq #44,d0
    67b8:	|     |   add.l 12(sp),d0
    67bc:	|     |   move.l d0,-(sp)
    67be:	|     |   lea 8(sp),a0
    67c2:	|     |   move.l a0,-(sp)
    67c4:	|     |   moveq #16,d0
    67c6:	|     |   add.l sp,d0
    67c8:	|     |   move.l d0,-(sp)
    67ca:	|     |   jsr 6236 <handleClosestPoint>
    67d0:	|     |   lea 12(sp),sp
    67d4:	|     |   tst.w d0
    67d6:	|     +-- bne.s 67dc <makeWalkingPerson+0x178>
    67d8:	|     |   clr.w d0
    67da:	+-----|-- bra.s 6814 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    67dc:	|     \-> move.l 12(sp),-(sp)
    67e0:	|         jsr 5a80 <doBorderStuff>
    67e6:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    67e8:	|         clr.l -(sp)
    67ea:	|         move.l 16(sp),-(sp)
    67ee:	|         jsr 78bc <walkMe>
    67f4:	|         addq.l #8,sp
    67f6:	|         tst.w d0
    67f8:	|     /-- bne.s 6804 <makeWalkingPerson+0x1a0>
    67fa:	|     |   movea.l 12(sp),a0
    67fe:	|     |   move.w 54(a0),d0
    6802:	|  /--|-- beq.s 6812 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    6804:	|  |  \-> movea.l 12(sp),a0
    6808:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    680e:	|  |      moveq #1,d0
    6810:	+--|----- bra.s 6814 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    6812:	|  \----> clr.w d0
	}
}
    6814:	\-------> move.l (sp)+,d2
    6816:	          lea 12(sp),sp
    681a:	          rts

0000681c <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    681c:	       lea -16(sp),sp
    6820:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    6822:	       moveq #12,d0
    6824:	       move.l d0,16(sp)
    6828:	       clr.l 12(sp)
    682c:	       move.l 17b28 <SysBase>,d0
    6832:	       movea.l d0,a6
    6834:	       move.l 16(sp),d0
    6838:	       move.l 12(sp),d1
    683c:	       jsr -684(a6)
    6840:	       move.l d0,8(sp)
    6844:	       move.l 8(sp),d0
    6848:	       move.l d0,4(sp)
    if(newAnim == 0) {
    684c:	   /-- bne.s 6860 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    684e:	   |   pea 14cf0 <incbin_player_end+0x1e4>
    6854:	   |   jsr 11d08 <KPrintF>
    685a:	   |   addq.l #4,sp
        return NULL;    
    685c:	   |   moveq #0,d0
    685e:	/--|-- bra.s 687a <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    6860:	|  \-> movea.l 4(sp),a0
    6864:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    6866:	|      movea.l 4(sp),a0
    686a:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    686e:	|      movea.l 4(sp),a0
    6872:	|      clr.l 4(a0)
	return newAnim;
    6876:	|      move.l 4(sp),d0
}
    687a:	\----> movea.l (sp)+,a6
    687c:	       lea 16(sp),sp
    6880:	       rts

00006882 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    6882:	    move.l d2,-(sp)
	me->x = x;
    6884:	    movea.l 8(sp),a0
    6888:	    move.l 12(sp),(a0)
	me->y = y;
    688c:	    movea.l 8(sp),a0
    6890:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    6896:	    movea.l 8(sp),a0
    689a:	    move.l 106(a0),d0
    689e:	    moveq #2,d1
    68a0:	    and.l d1,d0
    68a2:	/-- bne.s 68fa <moveAndScale+0x78>
    68a4:	|   move.w 16028 <scaleDivide>,d0
    68aa:	+-- beq.s 68fa <moveAndScale+0x78>
    68ac:	|   movea.l 8(sp),a0
    68b0:	|   move.l 4(a0),d2
    68b4:	|   move.w 16026 <scaleHorizon>,d0
    68ba:	|   movea.w d0,a0
    68bc:	|   move.l a0,-(sp)
    68be:	|   jsr 12160 <__floatsisf>
    68c4:	|   addq.l #4,sp
    68c6:	|   move.l d0,-(sp)
    68c8:	|   move.l d2,-(sp)
    68ca:	|   jsr 12454 <__subsf3>
    68d0:	|   addq.l #8,sp
    68d2:	|   move.l d0,d2
    68d4:	|   move.w 16028 <scaleDivide>,d0
    68da:	|   movea.w d0,a0
    68dc:	|   move.l a0,-(sp)
    68de:	|   jsr 12160 <__floatsisf>
    68e4:	|   addq.l #4,sp
    68e6:	|   move.l d0,-(sp)
    68e8:	|   move.l d2,-(sp)
    68ea:	|   jsr 1200c <__divsf3>
    68f0:	|   addq.l #8,sp
    68f2:	|   movea.l 8(sp),a0
    68f6:	|   move.l d0,20(a0)
}
    68fa:	\-> nop
    68fc:	    move.l (sp)+,d2
    68fe:	    rts

00006900 <removeOneCharacter>:

void removeOneCharacter (int i) {
    6900:	          lea -12(sp),sp
    6904:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    6906:	          move.l 20(sp),-(sp)
    690a:	          jsr 613a <findPerson>
    6910:	          addq.l #4,sp
    6912:	          move.l d0,8(sp)

    if (p) {
    6916:	/-------- beq.w 69c2 <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    691a:	|         move.l 17c1e <overRegion>,d0
    6920:	|         cmpi.l #97146,d0
    6926:	|     /-- bne.s 6944 <removeOneCharacter+0x44>
    6928:	|     |   movea.l 17c1e <overRegion>,a0
    692e:	|     |   move.l 28(a0),d1
    6932:	|     |   movea.l 8(sp),a0
    6936:	|     |   move.l 102(a0),d0
    693a:	|     |   cmp.l d1,d0
    693c:	|     +-- bne.s 6944 <removeOneCharacter+0x44>
            overRegion = NULL;
    693e:	|     |   clr.l 17c1e <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    6944:	|     \-> movea.l 8(sp),a0
    6948:	|         move.l 56(a0),d0
    694c:	|     /-- beq.s 6960 <removeOneCharacter+0x60>
    694e:	|     |   movea.l 8(sp),a0
    6952:	|     |   move.l 56(a0),d0
    6956:	|     |   move.l d0,-(sp)
    6958:	|     |   jsr 1af4 <abortFunction>
    695e:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    6960:	|     \-> movea.l 8(sp),a0
    6964:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    6968:	|         move.l #97142,12(sp)
    6970:	|     /-- bra.s 6980 <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    6972:	|  /--|-> movea.l 12(sp),a0
    6976:	|  |  |   move.l (a0),d0
    6978:	|  |  |   moveq #24,d1
    697a:	|  |  |   add.l d0,d1
    697c:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    6980:	|  |  \-> movea.l 12(sp),a0
    6984:	|  |      move.l (a0),d0
    6986:	|  |      cmp.l 8(sp),d0
    698a:	|  \----- bne.s 6972 <removeOneCharacter+0x72>

        *killPeople = p->next;
    698c:	|         movea.l 8(sp),a0
    6990:	|         move.l 24(a0),d0
    6994:	|         movea.l 12(sp),a0
    6998:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    699a:	|         movea.l 8(sp),a0
    699e:	|         move.l 102(a0),d0
    69a2:	|         move.l d0,-(sp)
    69a4:	|         jsr 90a8 <removeObjectType>
    69aa:	|         addq.l #4,sp
        FreeVec(p);
    69ac:	|         move.l 8(sp),4(sp)
    69b2:	|         move.l 17b28 <SysBase>,d0
    69b8:	|         movea.l d0,a6
    69ba:	|         movea.l 4(sp),a1
    69be:	|         jsr -690(a6)
    }
}
    69c2:	\-------> nop
    69c4:	          movea.l (sp)+,a6
    69c6:	          lea 12(sp),sp
    69ca:	          rts

000069cc <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    69cc:	       subq.l #8,sp
    69ce:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    69d0:	       movea.l 16(sp),a0
    69d4:	       movea.l 68(a0),a0
    69d8:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    69de:	       movea.l 16(sp),a0
    69e2:	       move.l 80(a0),d2
    69e6:	       move.l 4(sp),-(sp)
    69ea:	       pea b4 <_start+0xb4>
    69ee:	       jsr 12738 <__divsi3>
    69f4:	       addq.l #8,sp
    69f6:	       add.l d2,d0
    69f8:	       move.l d0,d1
    69fa:	       addi.l #180,d1
    6a00:	       movea.l 16(sp),a0
    6a04:	       move.l 88(a0),d0
    6a08:	       move.l d1,d2
    6a0a:	       add.l d0,d2
    6a0c:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    6a10:	   /-- bra.s 6a1a <rethinkAngle+0x4e>
    6a12:	/--|-> addi.l #-360,8(sp)
    6a1a:	|  \-> cmpi.l #359,8(sp)
    6a22:	\----- bgt.s 6a12 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    6a24:	       move.l 4(sp),-(sp)
    6a28:	       move.l 12(sp),-(sp)
    6a2c:	       jsr 126ba <__mulsi3>
    6a32:	       addq.l #8,sp
    6a34:	       pea 168 <decodeFilename+0x50>
    6a38:	       move.l d0,-(sp)
    6a3a:	       jsr 12738 <__divsi3>
    6a40:	       addq.l #8,sp
    6a42:	       movea.l 16(sp),a0
    6a46:	       move.l d0,94(a0)
}
    6a4a:	       nop
    6a4c:	       move.l (sp)+,d2
    6a4e:	       addq.l #8,sp
    6a50:	       rts

00006a52 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    6a52:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    6a54:	          movea.l 8(sp),a0
    6a58:	          move.l 8(a0),d0
    6a5c:	          move.l 12(sp),-(sp)
    6a60:	          move.l d0,-(sp)
    6a62:	          jsr 8d0 <put2bytes>
    6a68:	          addq.l #8,sp
	if (p -> numFrames) {
    6a6a:	          movea.l 8(sp),a0
    6a6e:	          move.l 8(a0),d0
    6a72:	/-------- beq.w 6b16 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    6a76:	|         movea.l 8(sp),a0
    6a7a:	|         movea.l (a0),a0
    6a7c:	|         move.l (a0),d0
    6a7e:	|         move.l 12(sp),-(sp)
    6a82:	|         move.l d0,-(sp)
    6a84:	|         jsr 958 <put4bytes>
    6a8a:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    6a8c:	|         clr.l (sp)
    6a8e:	|     /-- bra.s 6b08 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    6a90:	|  /--|-> movea.l 8(sp),a0
    6a94:	|  |  |   movea.l 4(a0),a0
    6a98:	|  |  |   move.l (sp),d1
    6a9a:	|  |  |   move.l d1,d0
    6a9c:	|  |  |   add.l d0,d0
    6a9e:	|  |  |   add.l d1,d0
    6aa0:	|  |  |   add.l d0,d0
    6aa2:	|  |  |   add.l d0,d0
    6aa4:	|  |  |   adda.l d0,a0
    6aa6:	|  |  |   move.l (a0),d0
    6aa8:	|  |  |   move.l 12(sp),-(sp)
    6aac:	|  |  |   move.l d0,-(sp)
    6aae:	|  |  |   jsr 958 <put4bytes>
    6ab4:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    6ab6:	|  |  |   movea.l 8(sp),a0
    6aba:	|  |  |   movea.l 4(a0),a0
    6abe:	|  |  |   move.l (sp),d1
    6ac0:	|  |  |   move.l d1,d0
    6ac2:	|  |  |   add.l d0,d0
    6ac4:	|  |  |   add.l d1,d0
    6ac6:	|  |  |   add.l d0,d0
    6ac8:	|  |  |   add.l d0,d0
    6aca:	|  |  |   adda.l d0,a0
    6acc:	|  |  |   move.l 4(a0),d0
    6ad0:	|  |  |   move.l 12(sp),-(sp)
    6ad4:	|  |  |   move.l d0,-(sp)
    6ad6:	|  |  |   jsr 958 <put4bytes>
    6adc:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    6ade:	|  |  |   movea.l 8(sp),a0
    6ae2:	|  |  |   movea.l 4(a0),a0
    6ae6:	|  |  |   move.l (sp),d1
    6ae8:	|  |  |   move.l d1,d0
    6aea:	|  |  |   add.l d0,d0
    6aec:	|  |  |   add.l d1,d0
    6aee:	|  |  |   add.l d0,d0
    6af0:	|  |  |   add.l d0,d0
    6af2:	|  |  |   adda.l d0,a0
    6af4:	|  |  |   move.l 8(a0),d0
    6af8:	|  |  |   move.l 12(sp),-(sp)
    6afc:	|  |  |   move.l d0,-(sp)
    6afe:	|  |  |   jsr 958 <put4bytes>
    6b04:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    6b06:	|  |  |   addq.l #1,(sp)
    6b08:	|  |  \-> movea.l 8(sp),a0
    6b0c:	|  |      move.l 8(a0),d0
    6b10:	|  |      cmp.l (sp),d0
    6b12:	|  \----- bgt.w 6a90 <saveAnim+0x3e>
		}
	}
	return TRUE;
    6b16:	\-------> moveq #1,d0
}
    6b18:	          addq.l #4,sp
    6b1a:	          rts

00006b1c <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    6b1c:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    6b1e:	             movea.l 8(sp),a0
    6b22:	             move.l 4(a0),d0
    6b26:	             move.l 12(sp),-(sp)
    6b2a:	             move.l d0,-(sp)
    6b2c:	             jsr 8d0 <put2bytes>
    6b32:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    6b34:	             clr.l (sp)
    6b36:	   /-------- bra.s 6b62 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    6b38:	/--|-------> movea.l 8(sp),a0
    6b3c:	|  |         move.l (a0),d1
    6b3e:	|  |         move.l (sp),d0
    6b40:	|  |         add.l d0,d0
    6b42:	|  |         add.l d0,d0
    6b44:	|  |         movea.l d1,a0
    6b46:	|  |         adda.l d0,a0
    6b48:	|  |         move.l (a0),d0
    6b4a:	|  |         move.l 12(sp),-(sp)
    6b4e:	|  |         move.l d0,-(sp)
    6b50:	|  |         jsr 6a52 <saveAnim>
    6b56:	|  |         addq.l #8,sp
    6b58:	|  |         tst.w d0
    6b5a:	|  |     /-- bne.s 6b60 <saveCostume+0x44>
    6b5c:	|  |     |   clr.w d0
    6b5e:	|  |  /--|-- bra.s 6b76 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    6b60:	|  |  |  \-> addq.l #1,(sp)
    6b62:	|  \--|----> movea.l 8(sp),a0
    6b66:	|     |      move.l 4(a0),d1
    6b6a:	|     |      move.l d1,d0
    6b6c:	|     |      add.l d0,d0
    6b6e:	|     |      add.l d1,d0
    6b70:	|     |      cmp.l (sp),d0
    6b72:	\-----|----- bgt.s 6b38 <saveCostume+0x1c>
	}

	return TRUE;
    6b74:	      |      moveq #1,d0
}
    6b76:	      \----> addq.l #4,sp
    6b78:	             rts

00006b7a <savePeople>:

BOOL savePeople (BPTR fp) {
    6b7a:	             lea -144(sp),sp
    6b7e:	             move.l a6,-(sp)
    6b80:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    6b82:	             move.l 17b76 <allPeople>,148(sp)
	int countPeople = 0, a;
    6b8a:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    6b8e:	             move.w 16026 <scaleHorizon>,d0
    6b94:	             movea.w d0,a0
    6b96:	             move.l 156(sp),-(sp)
    6b9a:	             move.l a0,-(sp)
    6b9c:	             jsr a9c <putSigned>
    6ba2:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    6ba4:	             move.w 16028 <scaleDivide>,d0
    6baa:	             movea.w d0,a0
    6bac:	             move.l 156(sp),-(sp)
    6bb0:	             move.l a0,-(sp)
    6bb2:	             jsr a9c <putSigned>
    6bb8:	             addq.l #8,sp

	while (me) {
    6bba:	         /-- bra.s 6bca <savePeople+0x50>
		countPeople ++;
    6bbc:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    6bc0:	      |  |   movea.l 148(sp),a0
    6bc4:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    6bca:	      |  \-> tst.l 148(sp)
    6bce:	      \----- bne.s 6bbc <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    6bd0:	             move.l 156(sp),-(sp)
    6bd4:	             move.l 148(sp),-(sp)
    6bd8:	             jsr 8d0 <put2bytes>
    6bde:	             addq.l #8,sp

	me = allPeople;
    6be0:	             move.l 17b76 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    6be8:	             clr.l 140(sp)
    6bec:	   /-------- bra.w 7044 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    6bf0:	/--|-------> movea.l 148(sp),a0
    6bf4:	|  |         move.l (a0),d0
    6bf6:	|  |         move.l 156(sp),-(sp)
    6bfa:	|  |         move.l d0,-(sp)
    6bfc:	|  |         jsr a46 <putFloat>
    6c02:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    6c04:	|  |         movea.l 148(sp),a0
    6c08:	|  |         move.l 4(a0),d0
    6c0c:	|  |         move.l 156(sp),-(sp)
    6c10:	|  |         move.l d0,-(sp)
    6c12:	|  |         jsr a46 <putFloat>
    6c18:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    6c1a:	|  |         movea.l 148(sp),a0
    6c1e:	|  |         move.l 68(a0),d0
    6c22:	|  |         move.l 156(sp),-(sp)
    6c26:	|  |         move.l d0,-(sp)
    6c28:	|  |         jsr 6b1c <saveCostume>
    6c2e:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    6c30:	|  |         movea.l 148(sp),a0
    6c34:	|  |         move.l 60(a0),d0
    6c38:	|  |         move.l 156(sp),-(sp)
    6c3c:	|  |         move.l d0,-(sp)
    6c3e:	|  |         jsr 6a52 <saveAnim>
    6c44:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    6c46:	|  |         move.l 156(sp),136(sp)
    6c4c:	|  |         movea.l 148(sp),a0
    6c50:	|  |         move.l 60(a0),d1
    6c54:	|  |         movea.l 148(sp),a0
    6c58:	|  |         move.l 64(a0),d0
    6c5c:	|  |         cmp.l d1,d0
    6c5e:	|  |         seq d0
    6c60:	|  |         neg.b d0
    6c62:	|  |         move.b d0,d0
    6c64:	|  |         andi.l #255,d0
    6c6a:	|  |         move.l d0,132(sp)
    6c6e:	|  |         move.l 17b30 <DOSBase>,d0
    6c74:	|  |         movea.l d0,a6
    6c76:	|  |         move.l 136(sp),d1
    6c7a:	|  |         move.l 132(sp),d2
    6c7e:	|  |         jsr -312(a6)
    6c82:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    6c86:	|  |         movea.l 148(sp),a0
    6c8a:	|  |         move.l 20(a0),d0
    6c8e:	|  |         move.l 156(sp),-(sp)
    6c92:	|  |         move.l d0,-(sp)
    6c94:	|  |         jsr a46 <putFloat>
    6c9a:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    6c9c:	|  |         movea.l 148(sp),a0
    6ca0:	|  |         move.l 106(a0),d0
    6ca4:	|  |         move.l 156(sp),-(sp)
    6ca8:	|  |         move.l d0,-(sp)
    6caa:	|  |         jsr 8d0 <put2bytes>
    6cb0:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    6cb2:	|  |         movea.l 148(sp),a0
    6cb6:	|  |         move.l 8(a0),d0
    6cba:	|  |         move.l 156(sp),-(sp)
    6cbe:	|  |         move.l d0,-(sp)
    6cc0:	|  |         jsr 8d0 <put2bytes>
    6cc6:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    6cc8:	|  |         movea.l 148(sp),a0
    6ccc:	|  |         move.l 28(a0),d0
    6cd0:	|  |         move.l 156(sp),-(sp)
    6cd4:	|  |         move.l d0,-(sp)
    6cd6:	|  |         jsr 8d0 <put2bytes>
    6cdc:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    6cde:	|  |         movea.l 148(sp),a0
    6ce2:	|  |         move.l 32(a0),d0
    6ce6:	|  |         move.l 156(sp),-(sp)
    6cea:	|  |         move.l d0,-(sp)
    6cec:	|  |         jsr 8d0 <put2bytes>
    6cf2:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    6cf4:	|  |         movea.l 148(sp),a0
    6cf8:	|  |         move.l 36(a0),d0
    6cfc:	|  |         move.l 156(sp),-(sp)
    6d00:	|  |         move.l d0,-(sp)
    6d02:	|  |         jsr 8d0 <put2bytes>
    6d08:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    6d0a:	|  |         movea.l 148(sp),a0
    6d0e:	|  |         move.l 40(a0),d0
    6d12:	|  |         move.l 156(sp),-(sp)
    6d16:	|  |         move.l d0,-(sp)
    6d18:	|  |         jsr 8d0 <put2bytes>
    6d1e:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    6d20:	|  |         movea.l 148(sp),a0
    6d24:	|  |         move.l 72(a0),d0
    6d28:	|  |         move.l 156(sp),-(sp)
    6d2c:	|  |         move.l d0,-(sp)
    6d2e:	|  |         jsr 8d0 <put2bytes>
    6d34:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    6d36:	|  |         movea.l 148(sp),a0
    6d3a:	|  |         move.l 76(a0),d0
    6d3e:	|  |         move.l 156(sp),-(sp)
    6d42:	|  |         move.l d0,-(sp)
    6d44:	|  |         jsr 8d0 <put2bytes>
    6d4a:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    6d4c:	|  |         movea.l 148(sp),a0
    6d50:	|  |         move.l 16(a0),d0
    6d54:	|  |         move.l 156(sp),-(sp)
    6d58:	|  |         move.l d0,-(sp)
    6d5a:	|  |         jsr 8d0 <put2bytes>
    6d60:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    6d62:	|  |         movea.l 148(sp),a0
    6d66:	|  |         move.l 110(a0),d0
    6d6a:	|  |         move.l 156(sp),-(sp)
    6d6e:	|  |         move.l d0,-(sp)
    6d70:	|  |         jsr 8d0 <put2bytes>
    6d76:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    6d78:	|  |         movea.l 148(sp),a0
    6d7c:	|  |         move.l 12(a0),d0
    6d80:	|  |         move.l d0,d0
    6d82:	|  |         movea.w d0,a0
    6d84:	|  |         move.l 156(sp),-(sp)
    6d88:	|  |         move.l a0,-(sp)
    6d8a:	|  |         jsr a9c <putSigned>
    6d90:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    6d92:	|  |         move.l 156(sp),124(sp)
    6d98:	|  |         movea.l 148(sp),a0
    6d9c:	|  |         move.w 92(a0),d0
    6da0:	|  |         movea.w d0,a0
    6da2:	|  |         move.l a0,120(sp)
    6da6:	|  |         move.l 17b30 <DOSBase>,d0
    6dac:	|  |         movea.l d0,a6
    6dae:	|  |         move.l 124(sp),d1
    6db2:	|  |         move.l 120(sp),d2
    6db6:	|  |         jsr -312(a6)
    6dba:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    6dbe:	|  |         move.l 156(sp),112(sp)
    6dc4:	|  |         movea.l 148(sp),a0
    6dc8:	|  |         move.w 52(a0),d0
    6dcc:	|  |         movea.w d0,a0
    6dce:	|  |         move.l a0,108(sp)
    6dd2:	|  |         move.l 17b30 <DOSBase>,d0
    6dd8:	|  |         movea.l d0,a6
    6dda:	|  |         move.l 112(sp),d1
    6dde:	|  |         move.l 108(sp),d2
    6de2:	|  |         jsr -312(a6)
    6de6:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    6dea:	|  |         move.l 156(sp),100(sp)
    6df0:	|  |         movea.l 148(sp),a0
    6df4:	|  |         move.w 54(a0),d0
    6df8:	|  |         movea.w d0,a0
    6dfa:	|  |         move.l a0,96(sp)
    6dfe:	|  |         move.l 17b30 <DOSBase>,d0
    6e04:	|  |         movea.l d0,a6
    6e06:	|  |         move.l 100(sp),d1
    6e0a:	|  |         move.l 96(sp),d2
    6e0e:	|  |         jsr -312(a6)
    6e12:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    6e16:	|  |         movea.l 148(sp),a0
    6e1a:	|  |         move.l 56(a0),d0
    6e1e:	|  |  /----- beq.s 6e5c <savePeople+0x2e2>
			FPutC (fp, 1);
    6e20:	|  |  |      move.l 156(sp),76(sp)
    6e26:	|  |  |      moveq #1,d0
    6e28:	|  |  |      move.l d0,72(sp)
    6e2c:	|  |  |      move.l 17b30 <DOSBase>,d0
    6e32:	|  |  |      movea.l d0,a6
    6e34:	|  |  |      move.l 76(sp),d1
    6e38:	|  |  |      move.l 72(sp),d2
    6e3c:	|  |  |      jsr -312(a6)
    6e40:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    6e44:	|  |  |      movea.l 148(sp),a0
    6e48:	|  |  |      move.l 56(a0),d0
    6e4c:	|  |  |      move.l 156(sp),-(sp)
    6e50:	|  |  |      move.l d0,-(sp)
    6e52:	|  |  |      jsr 7ef6 <saveFunction>
    6e58:	|  |  |      addq.l #8,sp
    6e5a:	|  |  |  /-- bra.s 6e80 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    6e5c:	|  |  \--|-> move.l 156(sp),88(sp)
    6e62:	|  |     |   moveq #1,d0
    6e64:	|  |     |   move.l d0,84(sp)
    6e68:	|  |     |   move.l 17b30 <DOSBase>,d0
    6e6e:	|  |     |   movea.l d0,a6
    6e70:	|  |     |   move.l 88(sp),d1
    6e74:	|  |     |   move.l 84(sp),d2
    6e78:	|  |     |   jsr -312(a6)
    6e7c:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    6e80:	|  |     \-> movea.l 148(sp),a0
    6e84:	|  |         move.l 94(a0),d0
    6e88:	|  |         move.l 156(sp),-(sp)
    6e8c:	|  |         move.l d0,-(sp)
    6e8e:	|  |         jsr 8d0 <put2bytes>
    6e94:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    6e96:	|  |         movea.l 148(sp),a0
    6e9a:	|  |         move.l 80(a0),d0
    6e9e:	|  |         move.l 156(sp),-(sp)
    6ea2:	|  |         move.l d0,-(sp)
    6ea4:	|  |         jsr 8d0 <put2bytes>
    6eaa:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    6eac:	|  |         movea.l 148(sp),a0
    6eb0:	|  |         move.l 88(a0),d0
    6eb4:	|  |         move.l 156(sp),-(sp)
    6eb8:	|  |         move.l d0,-(sp)
    6eba:	|  |         jsr 8d0 <put2bytes>
    6ec0:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    6ec2:	|  |         movea.l 148(sp),a0
    6ec6:	|  |         move.l 84(a0),d0
    6eca:	|  |         move.l 156(sp),-(sp)
    6ece:	|  |         move.l d0,-(sp)
    6ed0:	|  |         jsr 8d0 <put2bytes>
    6ed6:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    6ed8:	|  |         movea.l 148(sp),a0
    6edc:	|  |         move.l 98(a0),d0
    6ee0:	|  |         move.l d0,d0
    6ee2:	|  |         movea.w d0,a0
    6ee4:	|  |         move.l 156(sp),-(sp)
    6ee8:	|  |         move.l a0,-(sp)
    6eea:	|  |         jsr a9c <putSigned>
    6ef0:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    6ef2:	|  |         movea.l 148(sp),a0
    6ef6:	|  |         move.l 44(a0),d0
    6efa:	|  |         move.l d0,d0
    6efc:	|  |         movea.w d0,a0
    6efe:	|  |         move.l 156(sp),-(sp)
    6f02:	|  |         move.l a0,-(sp)
    6f04:	|  |         jsr a9c <putSigned>
    6f0a:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    6f0c:	|  |         movea.l 148(sp),a0
    6f10:	|  |         move.l 48(a0),d0
    6f14:	|  |         move.l d0,d0
    6f16:	|  |         movea.w d0,a0
    6f18:	|  |         move.l 156(sp),-(sp)
    6f1c:	|  |         move.l a0,-(sp)
    6f1e:	|  |         jsr a9c <putSigned>
    6f24:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    6f26:	|  |         move.l 156(sp),64(sp)
    6f2c:	|  |         movea.l 148(sp),a0
    6f30:	|  |         move.b 114(a0),d0
    6f34:	|  |         move.b d0,d0
    6f36:	|  |         andi.l #255,d0
    6f3c:	|  |         move.l d0,60(sp)
    6f40:	|  |         move.l 17b30 <DOSBase>,d0
    6f46:	|  |         movea.l d0,a6
    6f48:	|  |         move.l 64(sp),d1
    6f4c:	|  |         move.l 60(sp),d2
    6f50:	|  |         jsr -312(a6)
    6f54:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    6f58:	|  |         move.l 156(sp),52(sp)
    6f5e:	|  |         movea.l 148(sp),a0
    6f62:	|  |         move.b 115(a0),d0
    6f66:	|  |         move.b d0,d0
    6f68:	|  |         andi.l #255,d0
    6f6e:	|  |         move.l d0,48(sp)
    6f72:	|  |         move.l 17b30 <DOSBase>,d0
    6f78:	|  |         movea.l d0,a6
    6f7a:	|  |         move.l 52(sp),d1
    6f7e:	|  |         move.l 48(sp),d2
    6f82:	|  |         jsr -312(a6)
    6f86:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    6f8a:	|  |         move.l 156(sp),40(sp)
    6f90:	|  |         movea.l 148(sp),a0
    6f94:	|  |         move.b 116(a0),d0
    6f98:	|  |         move.b d0,d0
    6f9a:	|  |         andi.l #255,d0
    6fa0:	|  |         move.l d0,36(sp)
    6fa4:	|  |         move.l 17b30 <DOSBase>,d0
    6faa:	|  |         movea.l d0,a6
    6fac:	|  |         move.l 40(sp),d1
    6fb0:	|  |         move.l 36(sp),d2
    6fb4:	|  |         jsr -312(a6)
    6fb8:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    6fbc:	|  |         move.l 156(sp),28(sp)
    6fc2:	|  |         movea.l 148(sp),a0
    6fc6:	|  |         move.b 117(a0),d0
    6fca:	|  |         move.b d0,d0
    6fcc:	|  |         andi.l #255,d0
    6fd2:	|  |         move.l d0,24(sp)
    6fd6:	|  |         move.l 17b30 <DOSBase>,d0
    6fdc:	|  |         movea.l d0,a6
    6fde:	|  |         move.l 28(sp),d1
    6fe2:	|  |         move.l 24(sp),d2
    6fe6:	|  |         jsr -312(a6)
    6fea:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    6fee:	|  |         move.l 156(sp),16(sp)
    6ff4:	|  |         movea.l 148(sp),a0
    6ff8:	|  |         move.b 118(a0),d0
    6ffc:	|  |         move.b d0,d0
    6ffe:	|  |         andi.l #255,d0
    7004:	|  |         move.l d0,12(sp)
    7008:	|  |         move.l 17b30 <DOSBase>,d0
    700e:	|  |         movea.l d0,a6
    7010:	|  |         move.l 16(sp),d1
    7014:	|  |         move.l 12(sp),d2
    7018:	|  |         jsr -312(a6)
    701c:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    7020:	|  |         movea.l 148(sp),a0
    7024:	|  |         move.l 102(a0),d0
    7028:	|  |         move.l 156(sp),-(sp)
    702c:	|  |         move.l d0,-(sp)
    702e:	|  |         jsr 9148 <saveObjectRef>
    7034:	|  |         addq.l #8,sp

		me = me -> next;
    7036:	|  |         movea.l 148(sp),a0
    703a:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    7040:	|  |         addq.l #1,140(sp)
    7044:	|  \-------> movea.l 140(sp),a0
    7048:	|            cmpa.l 144(sp),a0
    704c:	\----------- blt.w 6bf0 <savePeople+0x76>
	}
	return TRUE;
    7050:	             moveq #1,d0
}
    7052:	             move.l (sp)+,d2
    7054:	             movea.l (sp)+,a6
    7056:	             lea 144(sp),sp
    705a:	             rts

0000705c <setDrawMode>:

void setDrawMode (int h, int ob) {
    705c:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    705e:	       move.l 12(sp),-(sp)
    7062:	       jsr 613a <findPerson>
    7068:	       addq.l #4,sp
    706a:	       move.l d0,(sp)
	if (! moveMe) return;
    706c:	/----- beq.s 7080 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    706e:	|      move.l 8(sp),-(sp)
    7072:	|      move.l 4(sp),-(sp)
    7076:	|      jsr 7086 <setMyDrawMode>
    707c:	|      addq.l #8,sp
    707e:	|  /-- bra.s 7082 <setDrawMode+0x26>
	if (! moveMe) return;
    7080:	\--|-> nop
}
    7082:	   \-> addq.l #4,sp
    7084:	       rts

00007086 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    7086:	       moveq #19,d0
    7088:	       cmp.l 8(sp),d0
    708c:	/----- bcs.w 7564 <setMyDrawMode+0x4de>
    7090:	|      move.l 8(sp),d0
    7094:	|      add.l d0,d0
    7096:	|      movea.l d0,a0
    7098:	|      adda.l #28836,a0
    709e:	|      move.w (a0),d0
    70a0:	|      jmp (70a4 <setMyDrawMode+0x1e>,pc,d0.w)
    70a4:	|      .short 0x04c0
    70a6:	|      ori.l #6684712,-(a4)
    70ac:	|      btst d0,-(a0)
    70ae:	|      bchg d0,(a6)+
    70b0:	|      bclr d0,(a4)+
    70b2:	|      bset d0,(a2)+
    70b4:	|      andi.b #84,(a6)
    70b8:	|      andi.l #55575312,(a2)
    70be:	|      .short 0x02d0
    70c0:	|      bclr d1,(a0)
    70c2:	|      .short 0x044a
    70c4:	|      .short 0x040c
    70c6:	|      movep.l d1,1158(a6)
    70ca:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    70cc:	|      movea.l 4(sp),a0
    70d0:	|      clr.b 116(a0)
    70d4:	|      movea.l 4(sp),a0
    70d8:	|      move.b 116(a0),d0
    70dc:	|      movea.l 4(sp),a0
    70e0:	|      move.b d0,115(a0)
    70e4:	|      movea.l 4(sp),a0
    70e8:	|      move.b 115(a0),d0
    70ec:	|      movea.l 4(sp),a0
    70f0:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    70f4:	|      movea.l 4(sp),a0
    70f8:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    70fc:	|      movea.l 4(sp),a0
    7100:	|      move.b #64,118(a0)
			break;
    7106:	|  /-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    710a:	|  |   movea.l 4(sp),a0
    710e:	|  |   clr.b 116(a0)
    7112:	|  |   movea.l 4(sp),a0
    7116:	|  |   move.b 116(a0),d0
    711a:	|  |   movea.l 4(sp),a0
    711e:	|  |   move.b d0,115(a0)
    7122:	|  |   movea.l 4(sp),a0
    7126:	|  |   move.b 115(a0),d0
    712a:	|  |   movea.l 4(sp),a0
    712e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7132:	|  |   movea.l 4(sp),a0
    7136:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    713a:	|  |   movea.l 4(sp),a0
    713e:	|  |   move.b #-128,118(a0)
			break;
    7144:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7148:	|  |   movea.l 4(sp),a0
    714c:	|  |   clr.b 116(a0)
    7150:	|  |   movea.l 4(sp),a0
    7154:	|  |   move.b 116(a0),d0
    7158:	|  |   movea.l 4(sp),a0
    715c:	|  |   move.b d0,115(a0)
    7160:	|  |   movea.l 4(sp),a0
    7164:	|  |   move.b 115(a0),d0
    7168:	|  |   movea.l 4(sp),a0
    716c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7170:	|  |   movea.l 4(sp),a0
    7174:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    7178:	|  |   movea.l 4(sp),a0
    717c:	|  |   move.b #-64,118(a0)
			break;
    7182:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7186:	|  |   movea.l 4(sp),a0
    718a:	|  |   clr.b 116(a0)
    718e:	|  |   movea.l 4(sp),a0
    7192:	|  |   move.b 116(a0),d0
    7196:	|  |   movea.l 4(sp),a0
    719a:	|  |   move.b d0,115(a0)
    719e:	|  |   movea.l 4(sp),a0
    71a2:	|  |   move.b 115(a0),d0
    71a6:	|  |   movea.l 4(sp),a0
    71aa:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    71ae:	|  |   movea.l 4(sp),a0
    71b2:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    71b6:	|  |   movea.l 4(sp),a0
    71ba:	|  |   move.b #-2,118(a0)
			break;
    71c0:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    71c4:	|  |   movea.l 4(sp),a0
    71c8:	|  |   clr.b 116(a0)
    71cc:	|  |   movea.l 4(sp),a0
    71d0:	|  |   move.b 116(a0),d0
    71d4:	|  |   movea.l 4(sp),a0
    71d8:	|  |   move.b d0,115(a0)
    71dc:	|  |   movea.l 4(sp),a0
    71e0:	|  |   move.b 115(a0),d0
    71e4:	|  |   movea.l 4(sp),a0
    71e8:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    71ec:	|  |   movea.l 4(sp),a0
    71f0:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    71f6:	|  |   movea.l 4(sp),a0
    71fa:	|  |   clr.b 118(a0)
			break;
    71fe:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7202:	|  |   movea.l 4(sp),a0
    7206:	|  |   clr.b 116(a0)
    720a:	|  |   movea.l 4(sp),a0
    720e:	|  |   move.b 116(a0),d0
    7212:	|  |   movea.l 4(sp),a0
    7216:	|  |   move.b d0,115(a0)
    721a:	|  |   movea.l 4(sp),a0
    721e:	|  |   move.b 115(a0),d0
    7222:	|  |   movea.l 4(sp),a0
    7226:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    722a:	|  |   movea.l 4(sp),a0
    722e:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7234:	|  |   movea.l 4(sp),a0
    7238:	|  |   clr.b 118(a0)
			break;
    723c:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7240:	|  |   movea.l 4(sp),a0
    7244:	|  |   clr.b 116(a0)
    7248:	|  |   movea.l 4(sp),a0
    724c:	|  |   move.b 116(a0),d0
    7250:	|  |   movea.l 4(sp),a0
    7254:	|  |   move.b d0,115(a0)
    7258:	|  |   movea.l 4(sp),a0
    725c:	|  |   move.b 115(a0),d0
    7260:	|  |   movea.l 4(sp),a0
    7264:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7268:	|  |   movea.l 4(sp),a0
    726c:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7272:	|  |   movea.l 4(sp),a0
    7276:	|  |   clr.b 118(a0)
			break;
    727a:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    727e:	|  |   movea.l 4(sp),a0
    7282:	|  |   clr.b 116(a0)
    7286:	|  |   movea.l 4(sp),a0
    728a:	|  |   move.b 116(a0),d0
    728e:	|  |   movea.l 4(sp),a0
    7292:	|  |   move.b d0,115(a0)
    7296:	|  |   movea.l 4(sp),a0
    729a:	|  |   move.b 115(a0),d0
    729e:	|  |   movea.l 4(sp),a0
    72a2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    72a6:	|  |   movea.l 4(sp),a0
    72aa:	|  |   st 117(a0)
			moveMe->transparency = 0;
    72ae:	|  |   movea.l 4(sp),a0
    72b2:	|  |   clr.b 118(a0)
			break;
    72b6:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    72ba:	|  |   movea.l 4(sp),a0
    72be:	|  |   clr.b 116(a0)
    72c2:	|  |   movea.l 4(sp),a0
    72c6:	|  |   move.b 116(a0),d0
    72ca:	|  |   movea.l 4(sp),a0
    72ce:	|  |   move.b d0,115(a0)
    72d2:	|  |   movea.l 4(sp),a0
    72d6:	|  |   move.b 115(a0),d0
    72da:	|  |   movea.l 4(sp),a0
    72de:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    72e2:	|  |   movea.l 4(sp),a0
    72e6:	|  |   st 117(a0)
			moveMe->transparency = 64;
    72ea:	|  |   movea.l 4(sp),a0
    72ee:	|  |   move.b #64,118(a0)
			break;
    72f4:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    72f8:	|  |   movea.l 4(sp),a0
    72fc:	|  |   clr.b 116(a0)
    7300:	|  |   movea.l 4(sp),a0
    7304:	|  |   move.b 116(a0),d0
    7308:	|  |   movea.l 4(sp),a0
    730c:	|  |   move.b d0,115(a0)
    7310:	|  |   movea.l 4(sp),a0
    7314:	|  |   move.b 115(a0),d0
    7318:	|  |   movea.l 4(sp),a0
    731c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7320:	|  |   movea.l 4(sp),a0
    7324:	|  |   st 117(a0)
			moveMe->transparency = 128;
    7328:	|  |   movea.l 4(sp),a0
    732c:	|  |   move.b #-128,118(a0)
			break;
    7332:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7336:	|  |   movea.l 4(sp),a0
    733a:	|  |   clr.b 116(a0)
    733e:	|  |   movea.l 4(sp),a0
    7342:	|  |   move.b 116(a0),d0
    7346:	|  |   movea.l 4(sp),a0
    734a:	|  |   move.b d0,115(a0)
    734e:	|  |   movea.l 4(sp),a0
    7352:	|  |   move.b 115(a0),d0
    7356:	|  |   movea.l 4(sp),a0
    735a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    735e:	|  |   movea.l 4(sp),a0
    7362:	|  |   st 117(a0)
			moveMe->transparency = 192;
    7366:	|  |   movea.l 4(sp),a0
    736a:	|  |   move.b #-64,118(a0)
			break;
    7370:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7374:	|  |   movea.l 4(sp),a0
    7378:	|  |   move.b #-128,116(a0)
    737e:	|  |   movea.l 4(sp),a0
    7382:	|  |   move.b 116(a0),d0
    7386:	|  |   movea.l 4(sp),a0
    738a:	|  |   move.b d0,115(a0)
    738e:	|  |   movea.l 4(sp),a0
    7392:	|  |   move.b 115(a0),d0
    7396:	|  |   movea.l 4(sp),a0
    739a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    739e:	|  |   movea.l 4(sp),a0
    73a2:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    73a8:	|  |   movea.l 4(sp),a0
    73ac:	|  |   clr.b 118(a0)
			break;
    73b0:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    73b4:	|  |   movea.l 4(sp),a0
    73b8:	|  |   move.b #-128,116(a0)
    73be:	|  |   movea.l 4(sp),a0
    73c2:	|  |   move.b 116(a0),d0
    73c6:	|  |   movea.l 4(sp),a0
    73ca:	|  |   move.b d0,115(a0)
    73ce:	|  |   movea.l 4(sp),a0
    73d2:	|  |   move.b 115(a0),d0
    73d6:	|  |   movea.l 4(sp),a0
    73da:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    73de:	|  |   movea.l 4(sp),a0
    73e2:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    73e8:	|  |   movea.l 4(sp),a0
    73ec:	|  |   clr.b 118(a0)
			break;
    73f0:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    73f4:	|  |   movea.l 4(sp),a0
    73f8:	|  |   move.b #-128,116(a0)
    73fe:	|  |   movea.l 4(sp),a0
    7402:	|  |   move.b 116(a0),d0
    7406:	|  |   movea.l 4(sp),a0
    740a:	|  |   move.b d0,115(a0)
    740e:	|  |   movea.l 4(sp),a0
    7412:	|  |   move.b 115(a0),d0
    7416:	|  |   movea.l 4(sp),a0
    741a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    741e:	|  |   movea.l 4(sp),a0
    7422:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7428:	|  |   movea.l 4(sp),a0
    742c:	|  |   clr.b 118(a0)
			break;
    7430:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7434:	|  |   movea.l 4(sp),a0
    7438:	|  |   move.b #-128,116(a0)
    743e:	|  |   movea.l 4(sp),a0
    7442:	|  |   move.b 116(a0),d0
    7446:	|  |   movea.l 4(sp),a0
    744a:	|  |   move.b d0,115(a0)
    744e:	|  |   movea.l 4(sp),a0
    7452:	|  |   move.b 115(a0),d0
    7456:	|  |   movea.l 4(sp),a0
    745a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    745e:	|  |   movea.l 4(sp),a0
    7462:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7466:	|  |   movea.l 4(sp),a0
    746a:	|  |   clr.b 118(a0)
			break;
    746e:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7472:	|  |   movea.l 4(sp),a0
    7476:	|  |   st 116(a0)
    747a:	|  |   movea.l 4(sp),a0
    747e:	|  |   move.b 116(a0),d0
    7482:	|  |   movea.l 4(sp),a0
    7486:	|  |   move.b d0,115(a0)
    748a:	|  |   movea.l 4(sp),a0
    748e:	|  |   move.b 115(a0),d0
    7492:	|  |   movea.l 4(sp),a0
    7496:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    749a:	|  |   movea.l 4(sp),a0
    749e:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    74a4:	|  |   movea.l 4(sp),a0
    74a8:	|  |   clr.b 118(a0)
			break;
    74ac:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    74b0:	|  |   movea.l 4(sp),a0
    74b4:	|  |   st 116(a0)
    74b8:	|  |   movea.l 4(sp),a0
    74bc:	|  |   move.b 116(a0),d0
    74c0:	|  |   movea.l 4(sp),a0
    74c4:	|  |   move.b d0,115(a0)
    74c8:	|  |   movea.l 4(sp),a0
    74cc:	|  |   move.b 115(a0),d0
    74d0:	|  |   movea.l 4(sp),a0
    74d4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    74d8:	|  |   movea.l 4(sp),a0
    74dc:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    74e2:	|  |   movea.l 4(sp),a0
    74e6:	|  |   clr.b 118(a0)
			break;
    74ea:	|  +-- bra.w 759e <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    74ee:	|  |   movea.l 4(sp),a0
    74f2:	|  |   st 116(a0)
    74f6:	|  |   movea.l 4(sp),a0
    74fa:	|  |   move.b 116(a0),d0
    74fe:	|  |   movea.l 4(sp),a0
    7502:	|  |   move.b d0,115(a0)
    7506:	|  |   movea.l 4(sp),a0
    750a:	|  |   move.b 115(a0),d0
    750e:	|  |   movea.l 4(sp),a0
    7512:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7516:	|  |   movea.l 4(sp),a0
    751a:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7520:	|  |   movea.l 4(sp),a0
    7524:	|  |   clr.b 118(a0)
			break;
    7528:	|  +-- bra.s 759e <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    752a:	|  |   movea.l 4(sp),a0
    752e:	|  |   st 116(a0)
    7532:	|  |   movea.l 4(sp),a0
    7536:	|  |   move.b 116(a0),d0
    753a:	|  |   movea.l 4(sp),a0
    753e:	|  |   move.b d0,115(a0)
    7542:	|  |   movea.l 4(sp),a0
    7546:	|  |   move.b 115(a0),d0
    754a:	|  |   movea.l 4(sp),a0
    754e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7552:	|  |   movea.l 4(sp),a0
    7556:	|  |   st 117(a0)
			moveMe->transparency = 0;
    755a:	|  |   movea.l 4(sp),a0
    755e:	|  |   clr.b 118(a0)
			break;
    7562:	|  +-- bra.s 759e <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7564:	\--|-> movea.l 4(sp),a0
    7568:	   |   clr.b 116(a0)
    756c:	   |   movea.l 4(sp),a0
    7570:	   |   move.b 116(a0),d0
    7574:	   |   movea.l 4(sp),a0
    7578:	   |   move.b d0,115(a0)
    757c:	   |   movea.l 4(sp),a0
    7580:	   |   move.b 115(a0),d0
    7584:	   |   movea.l 4(sp),a0
    7588:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    758c:	   |   movea.l 4(sp),a0
    7590:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    7594:	   |   movea.l 4(sp),a0
    7598:	   |   clr.b 118(a0)
			break;
    759c:	   |   nop
	}
}
    759e:	   \-> nop
    75a0:	       rts

000075a2 <setCharacterWalkSpeed>:



BOOL setCharacterWalkSpeed (int f, int objNum) {
    75a2:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    75a4:	       tst.l 8(sp)
    75a8:	   /-- bgt.s 75ae <setCharacterWalkSpeed+0xc>
    75aa:	   |   clr.w d0
    75ac:	/--|-- bra.s 75cc <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    75ae:	|  \-> move.l 12(sp),-(sp)
    75b2:	|      jsr 613a <findPerson>
    75b8:	|      addq.l #4,sp
    75ba:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    75bc:	|  /-- bne.s 75c2 <setCharacterWalkSpeed+0x20>
    75be:	|  |   clr.w d0
    75c0:	+--|-- bra.s 75cc <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    75c2:	|  \-> movea.l (sp),a0
    75c4:	|      move.l 8(sp),16(a0)
	return TRUE;
    75ca:	|      moveq #1,d0
}
    75cc:	\----> addq.l #4,sp
    75ce:	       rts

000075d0 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    75d0:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    75d2:	       move.l 8(sp),-(sp)
    75d6:	       jsr 613a <findPerson>
    75dc:	       addq.l #4,sp
    75de:	       move.l d0,(sp)
    if (thisPerson) {
    75e0:	/----- beq.s 7600 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    75e2:	|      movea.l (sp),a0
    75e4:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    75ea:	|      moveq #2,d0
    75ec:	|      and.l 12(sp),d0
    75f0:	|  /-- beq.s 75fc <setPersonExtra+0x2c>
    75f2:	|  |   movea.l (sp),a0
    75f4:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    75fc:	|  \-> moveq #1,d0
    75fe:	|  /-- bra.s 7602 <setPersonExtra+0x32>
    }
    return FALSE;
    7600:	\--|-> clr.w d0
}
    7602:	   \-> addq.l #4,sp
    7604:	       rts

00007606 <setScale>:


void setScale (short int h, short int d) {
    7606:	subq.l #4,sp
    7608:	move.l 8(sp),d1
    760c:	move.l 12(sp),d0
    7610:	move.w d1,d1
    7612:	move.w d1,2(sp)
    7616:	move.w d0,d0
    7618:	move.w d0,(sp)
	scaleHorizon = h;
    761a:	move.w 2(sp),16026 <scaleHorizon>
	scaleDivide = d;
    7622:	move.w (sp),16028 <scaleDivide>
}
    7628:	nop
    762a:	addq.l #4,sp
    762c:	rts

0000762e <setShown>:

void setShown (BOOL h, int ob) {
    762e:	    subq.l #8,sp
    7630:	    move.l 12(sp),d0
    7634:	    move.w d0,d0
    7636:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    763a:	    move.l 16(sp),-(sp)
    763e:	    jsr 613a <findPerson>
    7644:	    addq.l #4,sp
    7646:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    764a:	/-- beq.s 7656 <setShown+0x28>
    764c:	|   movea.l 4(sp),a0
    7650:	|   move.w 2(sp),92(a0)
}
    7656:	\-> nop
    7658:	    addq.l #8,sp
    765a:	    rts

0000765c <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    765c:	       subq.l #8,sp
    765e:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    7660:	       movea.l 16(sp),a0
    7664:	       move.l 80(a0),d0
    7668:	       move.l d0,d1
    766a:	       addi.l #360,d1
    7670:	       movea.l 16(sp),a0
    7674:	       move.l 84(a0),d0
    7678:	       move.l d1,d2
    767a:	       sub.l d0,d2
    767c:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    7680:	       movea.l 16(sp),a0
    7684:	       move.l 110(a0),d0
    7688:	   /-- beq.s 7694 <spinStep+0x38>
    768a:	   |   movea.l 16(sp),a0
    768e:	   |   move.l 110(a0),d0
    7692:	/--|-- bra.s 76ae <spinStep+0x52>
    7694:	|  \-> movea.l 16(sp),a0
    7698:	|      movea.l 68(a0),a0
    769c:	|      move.l 4(a0),d0
    76a0:	|      move.l d0,-(sp)
    76a2:	|      pea 168 <decodeFilename+0x50>
    76a6:	|      jsr 12738 <__divsi3>
    76ac:	|      addq.l #8,sp
    76ae:	\----> move.l d0,4(sp)
	while (diff > 180) {
    76b2:	   /-- bra.s 76bc <spinStep+0x60>
		diff -= 360;
    76b4:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    76bc:	|  \-> cmpi.l #180,8(sp)
    76c4:	\----- bgt.s 76b4 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    76c6:	       move.l 8(sp),d0
    76ca:	       cmp.l 4(sp),d0
    76ce:	   /-- blt.s 76ec <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    76d0:	   |   movea.l 16(sp),a0
    76d4:	   |   move.l 80(a0),d0
    76d8:	   |   sub.l 4(sp),d0
    76dc:	   |   move.l d0,-(sp)
    76de:	   |   move.l 20(sp),-(sp)
    76e2:	   |   jsr 77cc <turnMeAngle>
    76e8:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    76ea:	/--|-- bra.s 7732 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    76ec:	|  \-> move.l 4(sp),d0
    76f0:	|      neg.l d0
    76f2:	|      cmp.l 8(sp),d0
    76f6:	|  /-- blt.s 7714 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    76f8:	|  |   movea.l 16(sp),a0
    76fc:	|  |   move.l 80(a0),d0
    7700:	|  |   add.l 4(sp),d0
    7704:	|  |   move.l d0,-(sp)
    7706:	|  |   move.l 20(sp),-(sp)
    770a:	|  |   jsr 77cc <turnMeAngle>
    7710:	|  |   addq.l #8,sp
}
    7712:	+--|-- bra.s 7732 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    7714:	|  \-> movea.l 16(sp),a0
    7718:	|      move.l 84(a0),d0
    771c:	|      move.l d0,-(sp)
    771e:	|      move.l 20(sp),-(sp)
    7722:	|      jsr 77cc <turnMeAngle>
    7728:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    772a:	|      movea.l 16(sp),a0
    772e:	|      clr.w 54(a0)
}
    7732:	\----> nop
    7734:	       move.l (sp)+,d2
    7736:	       addq.l #8,sp
    7738:	       rts

0000773a <stopPerson>:


BOOL stopPerson (int o) {
    773a:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    773c:	       move.l 8(sp),-(sp)
    7740:	       jsr 613a <findPerson>
    7746:	       addq.l #4,sp
    7748:	       move.l d0,(sp)
    if (moveMe)
    774a:	/----- beq.s 7788 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    774c:	|      movea.l (sp),a0
    774e:	|      move.l 56(a0),d0
    7752:	+----- beq.s 7788 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    7754:	|      movea.l (sp),a0
    7756:	|      move.l 56(a0),d0
    775a:	|      move.l d0,-(sp)
    775c:	|      jsr 1af4 <abortFunction>
    7762:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    7764:	|      movea.l (sp),a0
    7766:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    776a:	|      movea.l (sp),a0
    776c:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    7770:	|      movea.l (sp),a0
    7772:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    7776:	|      clr.l -(sp)
    7778:	|      move.l 4(sp),-(sp)
    777c:	|      jsr 4fca <setFrames>
    7782:	|      addq.l #8,sp
            return TRUE;
    7784:	|      moveq #1,d0
    7786:	|  /-- bra.s 778a <stopPerson+0x50>
        }
    return FALSE;
    7788:	\--|-> clr.w d0
}
    778a:	   \-> addq.l #4,sp
    778c:	       rts

0000778e <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    778e:	       subq.l #8,sp
	int total = 0;
    7790:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    7794:	       clr.l (sp)
    7796:	   /-- bra.s 77b8 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    7798:	/--|-> movea.l 12(sp),a0
    779c:	|  |   movea.l 4(a0),a0
    77a0:	|  |   move.l (sp),d1
    77a2:	|  |   move.l d1,d0
    77a4:	|  |   add.l d0,d0
    77a6:	|  |   add.l d1,d0
    77a8:	|  |   add.l d0,d0
    77aa:	|  |   add.l d0,d0
    77ac:	|  |   adda.l d0,a0
    77ae:	|  |   move.l 4(a0),d0
    77b2:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    77b6:	|  |   addq.l #1,(sp)
    77b8:	|  \-> movea.l 12(sp),a0
    77bc:	|      move.l 8(a0),d0
    77c0:	|      cmp.l (sp),d0
    77c2:	\----- bgt.s 7798 <timeForAnim+0xa>
	}
	return total;
    77c4:	       move.l 4(sp),d0
}
    77c8:	       addq.l #8,sp
    77ca:	       rts

000077cc <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    77cc:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    77ce:	       movea.l 8(sp),a0
    77d2:	       movea.l 68(a0),a0
    77d6:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    77da:	       movea.l 8(sp),a0
    77de:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    77e4:	       move.l (sp),-(sp)
    77e6:	       pea b4 <_start+0xb4>
    77ea:	       jsr 12738 <__divsi3>
    77f0:	       addq.l #8,sp
    77f2:	       move.l d0,d1
    77f4:	       addi.l #180,d1
    77fa:	       movea.l 8(sp),a0
    77fe:	       move.l 88(a0),d0
    7802:	       add.l d1,d0
    7804:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    7808:	   /-- bra.s 7812 <turnMeAngle+0x46>
    780a:	/--|-> addi.l #-360,12(sp)
    7812:	|  \-> cmpi.l #359,12(sp)
    781a:	\----- bgt.s 780a <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    781c:	       move.l (sp),-(sp)
    781e:	       move.l 16(sp),-(sp)
    7822:	       jsr 126ba <__mulsi3>
    7828:	       addq.l #8,sp
    782a:	       pea 168 <decodeFilename+0x50>
    782e:	       move.l d0,-(sp)
    7830:	       jsr 12738 <__divsi3>
    7836:	       addq.l #8,sp
    7838:	       movea.l 8(sp),a0
    783c:	       move.l d0,94(a0)
}
    7840:	       nop
    7842:	       addq.l #4,sp
    7844:	       rts

00007846 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    7846:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    7848:	          move.l 8(sp),-(sp)
    784c:	          jsr 613a <findPerson>
    7852:	          addq.l #4,sp
    7854:	          move.l d0,(sp)
    if (thisPerson) {
    7856:	/-------- beq.s 78b6 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    7858:	|         movea.l (sp),a0
    785a:	|         move.l 56(a0),d0
    785e:	|     /-- beq.s 7870 <turnPersonToFace+0x2a>
    7860:	|     |   movea.l (sp),a0
    7862:	|     |   move.l 56(a0),d0
    7866:	|     |   move.l d0,-(sp)
    7868:	|     |   jsr 1af4 <abortFunction>
    786e:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    7870:	|     \-> movea.l (sp),a0
    7872:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    7876:	|         movea.l (sp),a0
    7878:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    787c:	|         movea.l (sp),a0
    787e:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    7882:	|         move.l 12(sp),-(sp)
    7886:	|         move.l 4(sp),-(sp)
    788a:	|         jsr 77cc <turnMeAngle>
    7890:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    7892:	|         movea.l 17b72 <speech>,a0
    7898:	|         move.l (a0),d0
    789a:	|         cmp.l (sp),d0
    789c:	|  /----- bne.s 78a2 <turnPersonToFace+0x5c>
    789e:	|  |      moveq #2,d0
    78a0:	|  |  /-- bra.s 78a4 <turnPersonToFace+0x5e>
    78a2:	|  \--|-> moveq #0,d0
    78a4:	|     \-> move.l d0,-(sp)
    78a6:	|         move.l 4(sp),-(sp)
    78aa:	|         jsr 4fca <setFrames>
    78b0:	|         addq.l #8,sp
        return TRUE;
    78b2:	|         moveq #1,d0
    78b4:	|     /-- bra.s 78b8 <turnPersonToFace+0x72>
    }
    return FALSE;
    78b6:	\-----|-> clr.w d0
}
    78b8:	      \-> addq.l #4,sp
    78ba:	          rts

000078bc <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    78bc:	                lea -20(sp),sp
    78c0:	                move.l d3,-(sp)
    78c2:	                move.l d2,-(sp)
    78c4:	                move.l 36(sp),d0
    78c8:	                move.w d0,d0
    78ca:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    78ce:	                cmpi.w #-1,10(sp)
    78d4:	/-------------- bne.s 78dc <walkMe+0x20>
    78d6:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    78dc:	>-------------> movea.l 32(sp),a0
    78e0:	|               move.l 36(a0),d0
    78e4:	|               move.l d0,-(sp)
    78e6:	|               jsr 12160 <__floatsisf>
    78ec:	|               addq.l #4,sp
    78ee:	|               move.l d0,d1
    78f0:	|               movea.l 32(sp),a0
    78f4:	|               move.l (a0),d0
    78f6:	|               move.l d0,-(sp)
    78f8:	|               move.l d1,-(sp)
    78fa:	|               jsr 12454 <__subsf3>
    7900:	|               addq.l #8,sp
    7902:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    7906:	|               movea.l 32(sp),a0
    790a:	|               move.l 40(a0),d0
    790e:	|               move.l d0,-(sp)
    7910:	|               jsr 12160 <__floatsisf>
    7916:	|               addq.l #4,sp
    7918:	|               move.l d0,d1
    791a:	|               movea.l 32(sp),a0
    791e:	|               move.l 4(a0),d0
    7922:	|               move.l d0,-(sp)
    7924:	|               move.l d1,-(sp)
    7926:	|               jsr 12454 <__subsf3>
    792c:	|               addq.l #8,sp
    792e:	|               move.l d0,-(sp)
    7930:	|               move.l d0,-(sp)
    7932:	|               jsr 11f12 <__addsf3>
    7938:	|               addq.l #8,sp
    793a:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    793e:	|               movea.l 32(sp),a0
    7942:	|               move.l 20(a0),d2
    7946:	|               movea.l 32(sp),a0
    794a:	|               move.l 16(a0),d0
    794e:	|               move.l d0,-(sp)
    7950:	|               jsr 12160 <__floatsisf>
    7956:	|               addq.l #4,sp
    7958:	|               move.l d0,-(sp)
    795a:	|               move.l d2,-(sp)
    795c:	|               jsr 12212 <__mulsf3>
    7962:	|               addq.l #8,sp
    7964:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    7968:	|               move.l 24(sp),-(sp)
    796c:	|               jsr 12078 <__extendsfdf2>
    7972:	|               addq.l #4,sp
    7974:	|               move.l #-1717986918,-(sp)
    797a:	|               move.l #1070176665,-(sp)
    7980:	|               move.l d1,-(sp)
    7982:	|               move.l d0,-(sp)
    7984:	|               jsr 12338 <__ltdf2>
    798a:	|               lea 16(sp),sp
    798e:	|               tst.l d0
    7990:	|           /-- bge.s 799a <walkMe+0xde>
    7992:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    799a:	|           \-> move.l 20(sp),-(sp)
    799e:	|               jsr 120f8 <__fixsfsi>
    79a4:	|               addq.l #4,sp
    79a6:	|               move.l d0,-(sp)
    79a8:	|               jsr 5578 <TF_abs>
    79ae:	|               addq.l #4,sp
    79b0:	|               move.l d0,d2
    79b2:	|               move.l 16(sp),-(sp)
    79b6:	|               jsr 120f8 <__fixsfsi>
    79bc:	|               addq.l #4,sp
    79be:	|               move.l d0,-(sp)
    79c0:	|               jsr 5578 <TF_abs>
    79c6:	|               addq.l #4,sp
    79c8:	|               cmp.l d2,d0
    79ca:	|        /----- bgt.s 79ee <walkMe+0x132>
    79cc:	|        |      move.l 20(sp),-(sp)
    79d0:	|        |      jsr 120f8 <__fixsfsi>
    79d6:	|        |      addq.l #4,sp
    79d8:	|        |      move.l d0,-(sp)
    79da:	|        |      jsr 5578 <TF_abs>
    79e0:	|        |      addq.l #4,sp
    79e2:	|        |      move.l d0,-(sp)
    79e4:	|        |      jsr 12160 <__floatsisf>
    79ea:	|        |      addq.l #4,sp
    79ec:	|        |  /-- bra.s 7a0e <walkMe+0x152>
    79ee:	|        \--|-> move.l 16(sp),-(sp)
    79f2:	|           |   jsr 120f8 <__fixsfsi>
    79f8:	|           |   addq.l #4,sp
    79fa:	|           |   move.l d0,-(sp)
    79fc:	|           |   jsr 5578 <TF_abs>
    7a02:	|           |   addq.l #4,sp
    7a04:	|           |   move.l d0,-(sp)
    7a06:	|           |   jsr 12160 <__floatsisf>
    7a0c:	|           |   addq.l #4,sp
    7a0e:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    7a12:	|               move.l 12(sp),-(sp)
    7a16:	|               jsr 120f8 <__fixsfsi>
    7a1c:	|               addq.l #4,sp
    7a1e:	|               move.l d0,-(sp)
    7a20:	|               jsr 5578 <TF_abs>
    7a26:	|               addq.l #4,sp
    7a28:	|               move.l d0,-(sp)
    7a2a:	|               jsr 12160 <__floatsisf>
    7a30:	|               addq.l #4,sp
    7a32:	|               move.l d0,-(sp)
    7a34:	|               move.l 28(sp),-(sp)
    7a38:	|               jsr 12386 <__ltsf2>
    7a3e:	|               addq.l #8,sp
    7a40:	|               tst.l d0
    7a42:	|        /----- bge.w 7af4 <walkMe+0x238>
			if (thisPerson->spinning) {
    7a46:	|        |      movea.l 32(sp),a0
    7a4a:	|        |      move.w 54(a0),d0
    7a4e:	|        |  /-- beq.s 7a6c <walkMe+0x1b0>
				spinStep(thisPerson);
    7a50:	|        |  |   move.l 32(sp),-(sp)
    7a54:	|        |  |   jsr 765c <spinStep>
    7a5a:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    7a5c:	|        |  |   pea 1 <_start+0x1>
    7a60:	|        |  |   move.l 36(sp),-(sp)
    7a64:	|        |  |   jsr 4fca <setFrames>
    7a6a:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    7a6c:	|        |  \-> move.l 24(sp),-(sp)
    7a70:	|        |      move.l 16(sp),-(sp)
    7a74:	|        |      jsr 1200c <__divsf3>
    7a7a:	|        |      addq.l #8,sp
    7a7c:	|        |      move.l d0,24(sp)
			if (move)
    7a80:	|        |      tst.w 10(sp)
    7a84:	|        |  /-- beq.s 7aee <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    7a86:	|        |  |   movea.l 32(sp),a0
    7a8a:	|        |  |   move.l 4(a0),d2
    7a8e:	|        |  |   move.l 24(sp),d0
    7a92:	|        |  |   move.l d0,-(sp)
    7a94:	|        |  |   move.l d0,-(sp)
    7a96:	|        |  |   jsr 11f12 <__addsf3>
    7a9c:	|        |  |   addq.l #8,sp
    7a9e:	|        |  |   move.l d0,-(sp)
    7aa0:	|        |  |   move.l 20(sp),-(sp)
    7aa4:	|        |  |   jsr 1200c <__divsf3>
    7aaa:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    7aac:	|        |  |   move.l d0,-(sp)
    7aae:	|        |  |   move.l d2,-(sp)
    7ab0:	|        |  |   jsr 11f12 <__addsf3>
    7ab6:	|        |  |   addq.l #8,sp
    7ab8:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    7aba:	|        |  |   movea.l 32(sp),a0
    7abe:	|        |  |   move.l (a0),d3
    7ac0:	|        |  |   move.l 24(sp),-(sp)
    7ac4:	|        |  |   move.l 24(sp),-(sp)
    7ac8:	|        |  |   jsr 1200c <__divsf3>
    7ace:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    7ad0:	|        |  |   move.l d0,-(sp)
    7ad2:	|        |  |   move.l d3,-(sp)
    7ad4:	|        |  |   jsr 11f12 <__addsf3>
    7ada:	|        |  |   addq.l #8,sp
    7adc:	|        |  |   move.l d2,-(sp)
    7ade:	|        |  |   move.l d0,-(sp)
    7ae0:	|        |  |   move.l 40(sp),-(sp)
    7ae4:	|        |  |   jsr 6882 <moveAndScale>
    7aea:	|        |  |   lea 12(sp),sp
			return TRUE;
    7aee:	|        |  \-> moveq #1,d0
    7af0:	|  /-----|----- bra.w 7ba2 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    7af4:	|  |     \----> movea.l 32(sp),a0
    7af8:	|  |            move.l 44(a0),d0
    7afc:	|  |            moveq #-1,d1
    7afe:	|  |            cmp.l d0,d1
    7b00:	|  |        /-- bne.s 7b38 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    7b02:	|  |        |   movea.l 32(sp),a0
    7b06:	|  |        |   move.l 98(a0),d0
    7b0a:	|  |        |   moveq #-1,d1
    7b0c:	|  |        |   cmp.l d0,d1
    7b0e:	|  |  /-----|-- beq.s 7b4c <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    7b10:	|  |  |     |   movea.l 32(sp),a0
    7b14:	|  |  |     |   move.l 98(a0),d0
    7b18:	|  |  |     |   movea.l 32(sp),a0
    7b1c:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    7b20:	|  |  |     |   movea.l 32(sp),a0
    7b24:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    7b2a:	|  |  |     |   move.l 32(sp),-(sp)
    7b2e:	|  |  |     |   jsr 765c <spinStep>
    7b34:	|  |  |     |   addq.l #4,sp
			}
			break;
    7b36:	|  |  +-----|-- bra.s 7b4c <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    7b38:	|  |  |     \-> move.l 32(sp),-(sp)
    7b3c:	|  |  |         jsr 5a80 <doBorderStuff>
    7b42:	|  |  |         addq.l #4,sp
    7b44:	|  |  |         tst.w d0
    7b46:	|  |  |  /----- beq.s 7b50 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    7b48:	\--|--|--|----- bra.w 78dc <walkMe+0x20>
			break;
    7b4c:	   |  \--|----> nop
    7b4e:	   |     |  /-- bra.s 7b52 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    7b50:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    7b52:	   |        \-> movea.l 32(sp),a0
    7b56:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    7b5a:	   |            clr.l -(sp)
    7b5c:	   |            move.l 36(sp),-(sp)
    7b60:	   |            jsr 4fca <setFrames>
    7b66:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    7b68:	   |            movea.l 32(sp),a0
    7b6c:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    7b70:	   |            move.l d0,-(sp)
    7b72:	   |            jsr 12160 <__floatsisf>
    7b78:	   |            addq.l #4,sp
    7b7a:	   |            move.l d0,d2
				 thisPerson->walkToX,
    7b7c:	   |            movea.l 32(sp),a0
    7b80:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    7b84:	   |            move.l d0,-(sp)
    7b86:	   |            jsr 12160 <__floatsisf>
    7b8c:	   |            addq.l #4,sp
    7b8e:	   |            move.l d2,-(sp)
    7b90:	   |            move.l d0,-(sp)
    7b92:	   |            move.l 40(sp),-(sp)
    7b96:	   |            jsr 6882 <moveAndScale>
    7b9c:	   |            lea 12(sp),sp
	return FALSE;
    7ba0:	   |            clr.w d0
}
    7ba2:	   \----------> move.l (sp)+,d2
    7ba4:	                move.l (sp)+,d3
    7ba6:	                lea 20(sp),sp
    7baa:	                rts

00007bac <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    7bac:	       subq.l #8,sp
    7bae:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    7bb0:	   /-- bra.s 7be0 <clearStackLib+0x34>
		k = stackLib;
    7bb2:	/--|-> move.l 17ba2 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    7bba:	|  |   movea.l 17ba2 <stackLib>,a0
    7bc0:	|  |   move.l 4(a0),d0
    7bc4:	|  |   move.l d0,17ba2 <stackLib>
		FreeVec(k);
    7bca:	|  |   move.l 8(sp),4(sp)
    7bd0:	|  |   move.l 17b28 <SysBase>,d0
    7bd6:	|  |   movea.l d0,a6
    7bd8:	|  |   movea.l 4(sp),a1
    7bdc:	|  |   jsr -690(a6)
	while (stackLib) {
    7be0:	|  \-> move.l 17ba2 <stackLib>,d0
    7be6:	\----- bne.s 7bb2 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    7be8:	       clr.l 17b9e <stackLibTotal>
}
    7bee:	       nop
    7bf0:	       movea.l (sp)+,a6
    7bf2:	       addq.l #8,sp
    7bf4:	       rts

00007bf6 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    7bf6:	          lea -128(sp),sp
    7bfa:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    7bfe:	      /-- bra.s 7c10 <loadGame+0x1a>
    7c00:	   /--|-> move.l 17ac4 <allRunningFunctions>,d0
    7c06:	   |  |   move.l d0,-(sp)
    7c08:	   |  |   jsr 2b14 <finishFunction>
    7c0e:	   |  |   addq.l #4,sp
    7c10:	   |  \-> move.l 17ac4 <allRunningFunctions>,d0
    7c16:	   \----- bne.s 7c00 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    7c18:	          pea 17ba6 <ssgVersion>
    7c1e:	          pea 14d9f <incbin_player_end+0x293>
    7c24:	          pea 41 <_start+0x41>
    7c28:	          pea 53 <_start+0x53>
    7c2c:	          move.l 160(sp),-(sp)
    7c30:	          jsr 3622 <openAndVerify>
    7c36:	          lea 20(sp),sp
    7c3a:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    7c3e:	      /-- bne.s 7c46 <loadGame+0x50>
    7c40:	      |   clr.w d0
    7c42:	/-----|-- bra.w 7eec <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    7c46:	|     \-> move.l 112(sp),108(sp)
    7c4c:	|         lea 140(sp),a0
    7c50:	|         lea -126(a0),a0
    7c54:	|         move.l a0,120(sp)
    7c58:	|         moveq #8,d0
    7c5a:	|         move.l d0,116(sp)
    7c5e:	|         move.l 17b30 <DOSBase>,d0
    7c64:	|         movea.l d0,a6
    7c66:	|         move.l 108(sp),d1
    7c6a:	|         move.l 120(sp),d2
    7c6e:	|         move.l 116(sp),d3
    7c72:	|         jsr -42(a6)
    7c76:	|         move.l d0,132(sp)
    7c7a:	|         move.l 132(sp),d0
    7c7e:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    7c82:	|         moveq #8,d0
    7c84:	|         cmp.l 128(sp),d0
    7c88:	|     /-- beq.s 7c98 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    7c8a:	|     |   pea 14dc0 <incbin_player_end+0x2b4>
    7c90:	|     |   jsr 11d08 <KPrintF>
    7c96:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    7c98:	|     \-> move.l 14(sp),d1
    7c9c:	|         move.l 17ace <fileTime>,d0
    7ca2:	|         cmp.l d1,d0
    7ca4:	|     /-- bne.s 7cb4 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    7ca6:	|     |   move.l 18(sp),d1
    7caa:	|     |   move.l 17ad2 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    7cb0:	|     |   cmp.l d1,d0
    7cb2:	|  /--|-- beq.s 7cd4 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    7cb4:	|  |  \-> move.l 144(sp),-(sp)
    7cb8:	|  |      pea 14ddc <incbin_player_end+0x2d0>
    7cbe:	|  |      pea 14ea3 <incbin_player_end+0x397>
    7cc4:	|  |      jsr 11d08 <KPrintF>
    7cca:	|  |      lea 12(sp),sp
		return FALSE; 
    7cce:	|  |      clr.w d0
    7cd0:	+--|----- bra.w 7eec <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    7cd4:	|  \----> move.l 112(sp),124(sp)
    7cda:	|         move.l 17b30 <DOSBase>,d0
    7ce0:	|         movea.l d0,a6
    7ce2:	|         move.l 124(sp),d1
    7ce6:	|         jsr -306(a6)
    7cea:	|         move.l d0,136(sp)
    7cee:	|         move.l 136(sp),d0
    7cf2:	|         move.l d0,d0
    7cf4:	|         move.w d0,16000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    7cfa:	|         move.l 112(sp),100(sp)
    7d00:	|         move.l 17b30 <DOSBase>,d0
    7d06:	|         movea.l d0,a6
    7d08:	|         move.l 100(sp),d1
    7d0c:	|         jsr -306(a6)
    7d10:	|         move.l d0,96(sp)
    7d14:	|         move.l 96(sp),d0
    7d18:	|         move.l d0,d0
    7d1a:	|         move.w d0,17acc <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    7d20:	|         move.l 112(sp),92(sp)
    7d26:	|         move.l 17b30 <DOSBase>,d0
    7d2c:	|         movea.l d0,a6
    7d2e:	|         move.l 92(sp),d1
    7d32:	|         jsr -306(a6)
    7d36:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    7d3a:	|         move.l 112(sp),84(sp)
    7d40:	|         move.l 17b30 <DOSBase>,d0
    7d46:	|         movea.l d0,a6
    7d48:	|         move.l 84(sp),d1
    7d4c:	|         jsr -306(a6)
    7d50:	|         move.l d0,80(sp)
    7d54:	|         move.l 80(sp),d0
    7d58:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    7d5c:	|     /-- beq.s 7d90 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    7d5e:	|     |   move.l 112(sp),-(sp)
    7d62:	|     |   jsr 6bc <get2bytes>
    7d68:	|     |   addq.l #4,sp
    7d6a:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    7d6e:	|     |   move.l 112(sp),-(sp)
    7d72:	|     |   jsr 6bc <get2bytes>
    7d78:	|     |   addq.l #4,sp
    7d7a:	|     |   move.l d0,17c0a <fontHeight>
		charOrder = readString(fp);		
    7d80:	|     |   move.l 112(sp),-(sp)
    7d84:	|     |   jsr b02 <readString>
    7d8a:	|     |   addq.l #4,sp
    7d8c:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    7d90:	|     \-> move.l 104(sp),70(sp)
    7d96:	|         move.l 17b28 <SysBase>,d0
    7d9c:	|         movea.l d0,a6
    7d9e:	|         movea.l 70(sp),a1
    7da2:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    7da6:	|         move.l 112(sp),-(sp)
    7daa:	|         jsr 854 <getSigned>
    7db0:	|         addq.l #4,sp
    7db2:	|         move.w d0,16598 <fontSpace>

	killAllPeople ();
    7db8:	|         jsr 6524 <killAllPeople>
	killAllRegions ();
    7dbe:	|         jsr 10808 <killAllRegions>

	int camerX = get2bytes (fp);
    7dc4:	|         move.l 112(sp),-(sp)
    7dc8:	|         jsr 6bc <get2bytes>
    7dce:	|         addq.l #4,sp
    7dd0:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    7dd4:	|         move.l 112(sp),-(sp)
    7dd8:	|         jsr 6bc <get2bytes>
    7dde:	|         addq.l #4,sp
    7de0:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    7de4:	|         move.l 112(sp),-(sp)
    7de8:	|         jsr 7d8 <getFloat>
    7dee:	|         addq.l #4,sp
    7df0:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    7df4:	|         move.l 112(sp),54(sp)
    7dfa:	|         move.l 17b30 <DOSBase>,d0
    7e00:	|         movea.l d0,a6
    7e02:	|         move.l 54(sp),d1
    7e06:	|         jsr -306(a6)
    7e0a:	|         move.l d0,50(sp)
    7e0e:	|         move.l 50(sp),d0
    7e12:	|         move.l d0,d0
    7e14:	|         move.b d0,16002 <brightnessLevel>

	loadHandlers (fp);
    7e1a:	|         move.l 112(sp),-(sp)
    7e1e:	|         jsr 3582 <loadHandlers>
    7e24:	|         addq.l #4,sp
	loadRegions (fp);
    7e26:	|         move.l 112(sp),-(sp)
    7e2a:	|         jsr 10864 <loadRegions>
    7e30:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    7e32:	|         moveq #12,d0
    7e34:	|         move.l d0,46(sp)
    7e38:	|         clr.l 42(sp)
    7e3c:	|         move.l 17b28 <SysBase>,d0
    7e42:	|         movea.l d0,a6
    7e44:	|         move.l 46(sp),d0
    7e48:	|         move.l 42(sp),d1
    7e4c:	|         jsr -684(a6)
    7e50:	|         move.l d0,38(sp)
    7e54:	|         move.l 38(sp),d0
    7e58:	|         move.l d0,17a14 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    7e5e:	|         move.l 17a14 <mouseCursorAnim>,d0
    7e64:	|     /-- bne.s 7e78 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    7e66:	|     |   pea 14ead <incbin_player_end+0x3a1>
    7e6c:	|     |   jsr 11d08 <KPrintF>
    7e72:	|     |   addq.l #4,sp
		return FALSE;
    7e74:	|     |   clr.w d0
    7e76:	+-----|-- bra.s 7eec <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    7e78:	|     \-> jsr 8bd4 <nosnapshot>
	if (FGetC (fp)) {
    7e7e:	|         move.l 112(sp),34(sp)
    7e84:	|         move.l 17b30 <DOSBase>,d0
    7e8a:	|         movea.l d0,a6
    7e8c:	|         move.l 34(sp),d1
    7e90:	|         jsr -306(a6)
    7e94:	|         move.l d0,30(sp)
    7e98:	|         move.l 30(sp),d0
    7e9c:	|     /-- beq.s 7eb2 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    7e9e:	|     |   move.l 112(sp),-(sp)
    7ea2:	|     |   jsr 8c1a <restoreSnapshot>
    7ea8:	|     |   addq.l #4,sp
    7eaa:	|     |   tst.w d0
    7eac:	|     +-- bne.s 7eb2 <loadGame+0x2bc>
    7eae:	|     |   clr.w d0
    7eb0:	+-----|-- bra.s 7eec <loadGame+0x2f6>
	}

	Close (fp);
    7eb2:	|     \-> move.l 112(sp),26(sp)
    7eb8:	|         move.l 17b30 <DOSBase>,d0
    7ebe:	|         movea.l d0,a6
    7ec0:	|         move.l 26(sp),d1
    7ec4:	|         jsr -36(a6)
    7ec8:	|         move.l d0,22(sp)
	clearStackLib ();
    7ecc:	|         jsr 7bac <clearStackLib>

	cameraX = camerX;
    7ed2:	|         move.l 66(sp),17bd0 <cameraX>
	cameraY = camerY;
    7eda:	|         move.l 62(sp),17bd4 <cameraY>
	cameraZoom = camerZ;
    7ee2:	|         move.l 58(sp),16032 <cameraZoom>

	return TRUE;
    7eea:	|         moveq #1,d0
}
    7eec:	\-------> movem.l (sp)+,d2-d3/a6
    7ef0:	          lea 128(sp),sp
    7ef4:	          rts

00007ef6 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    7ef6:	   /-> lea -64(sp),sp
    7efa:	   |   move.l a6,-(sp)
    7efc:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    7efe:	   |   movea.l 76(sp),a0
    7f02:	   |   move.l (a0),d0
    7f04:	   |   move.l 80(sp),-(sp)
    7f08:	   |   move.l d0,-(sp)
    7f0a:	   |   jsr 8d0 <put2bytes>
    7f10:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    7f12:	   |   movea.l 76(sp),a0
    7f16:	   |   move.l 40(a0),d0
    7f1a:	/--|-- beq.s 7f56 <saveFunction+0x60>
		FPutC (fp, 1);
    7f1c:	|  |   move.l 80(sp),52(sp)
    7f22:	|  |   moveq #1,d0
    7f24:	|  |   move.l d0,48(sp)
    7f28:	|  |   move.l 17b30 <DOSBase>,d0
    7f2e:	|  |   movea.l d0,a6
    7f30:	|  |   move.l 52(sp),d1
    7f34:	|  |   move.l 48(sp),d2
    7f38:	|  |   jsr -312(a6)
    7f3c:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    7f40:	|  |   movea.l 76(sp),a0
    7f44:	|  |   move.l 40(a0),d0
    7f48:	|  |   move.l 80(sp),-(sp)
    7f4c:	|  |   move.l d0,-(sp)
    7f4e:	|  \-- jsr 7ef6 <saveFunction>(pc)
    7f52:	|      addq.l #8,sp
    7f54:	|  /-- bra.s 7f78 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    7f56:	\--|-> move.l 80(sp),64(sp)
    7f5c:	   |   clr.l 60(sp)
    7f60:	   |   move.l 17b30 <DOSBase>,d0
    7f66:	   |   movea.l d0,a6
    7f68:	   |   move.l 64(sp),d1
    7f6c:	   |   move.l 60(sp),d2
    7f70:	   |   jsr -312(a6)
    7f74:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    7f78:	   \-> movea.l 76(sp),a0
    7f7c:	       move.l 12(a0),d0
    7f80:	       move.l 80(sp),-(sp)
    7f84:	       move.l d0,-(sp)
    7f86:	       jsr 958 <put4bytes>
    7f8c:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    7f8e:	       movea.l 76(sp),a0
    7f92:	       move.l 36(a0),d0
    7f96:	       move.l 80(sp),-(sp)
    7f9a:	       move.l d0,-(sp)
    7f9c:	       jsr 8d0 <put2bytes>
    7fa2:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    7fa4:	       move.l 80(sp),40(sp)
    7faa:	       movea.l 76(sp),a0
    7fae:	       move.w 54(a0),d0
    7fb2:	       movea.w d0,a0
    7fb4:	       move.l a0,36(sp)
    7fb8:	       move.l 17b30 <DOSBase>,d0
    7fbe:	       movea.l d0,a6
    7fc0:	       move.l 40(sp),d1
    7fc4:	       move.l 36(sp),d2
    7fc8:	       jsr -312(a6)
    7fcc:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    7fd0:	       move.l 80(sp),28(sp)
    7fd6:	       movea.l 76(sp),a0
    7fda:	       move.w 48(a0),d0
    7fde:	       movea.w d0,a0
    7fe0:	       move.l a0,24(sp)
    7fe4:	       move.l 17b30 <DOSBase>,d0
    7fea:	       movea.l d0,a6
    7fec:	       move.l 28(sp),d1
    7ff0:	       move.l 24(sp),d2
    7ff4:	       jsr -312(a6)
    7ff8:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    7ffc:	       move.l 80(sp),16(sp)
    8002:	       movea.l 76(sp),a0
    8006:	       move.w 50(a0),d0
    800a:	       movea.w d0,a0
    800c:	       move.l a0,12(sp)
    8010:	       move.l 17b30 <DOSBase>,d0
    8016:	       movea.l d0,a6
    8018:	       move.l 16(sp),d1
    801c:	       move.l 12(sp),d2
    8020:	       jsr -312(a6)
    8024:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    8028:	       moveq #28,d0
    802a:	       add.l 76(sp),d0
    802e:	       move.l 80(sp),-(sp)
    8032:	       move.l d0,-(sp)
    8034:	       jsr 87b2 <saveVariable>
    803a:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    803c:	       movea.l 76(sp),a0
    8040:	       move.b 56(a0),d0
    8044:	   /-- beq.s 8054 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    8046:	   |   pea 14ece <incbin_player_end+0x3c2>
    804c:	   |   jsr 11d08 <KPrintF>
    8052:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    8054:	   \-> movea.l 76(sp),a0
    8058:	       move.l 24(a0),d0
    805c:	       move.l 80(sp),-(sp)
    8060:	       move.l d0,-(sp)
    8062:	       jsr 8626 <saveStack>
    8068:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    806a:	       clr.l 68(sp)
    806e:	   /-- bra.s 8092 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    8070:	/--|-> movea.l 76(sp),a0
    8074:	|  |   move.l 20(a0),d1
    8078:	|  |   move.l 68(sp),d0
    807c:	|  |   lsl.l #3,d0
    807e:	|  |   add.l d1,d0
    8080:	|  |   move.l 80(sp),-(sp)
    8084:	|  |   move.l d0,-(sp)
    8086:	|  |   jsr 87b2 <saveVariable>
    808c:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    808e:	|  |   addq.l #1,68(sp)
    8092:	|  \-> movea.l 76(sp),a0
    8096:	|      move.l 8(a0),d0
    809a:	|      cmp.l 68(sp),d0
    809e:	\----- bgt.s 8070 <saveFunction+0x17a>
	}
}
    80a0:	       nop
    80a2:	       nop
    80a4:	       move.l (sp)+,d2
    80a6:	       movea.l (sp)+,a6
    80a8:	       lea 64(sp),sp
    80ac:	       rts

000080ae <saveGame>:

BOOL saveGame (char * fname) {
    80ae:	          lea -272(sp),sp
    80b2:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    80b6:	          move.l 288(sp),268(sp)
    80bc:	          move.l #1006,264(sp)
    80c4:	          move.l 17b30 <DOSBase>,d0
    80ca:	          movea.l d0,a6
    80cc:	          move.l 268(sp),d1
    80d0:	          move.l 264(sp),d2
    80d4:	          jsr -30(a6)
    80d8:	          move.l d0,260(sp)
    80dc:	          move.l 260(sp),d0
    80e0:	          move.l d0,256(sp)
	if (fp == NULL) {
    80e4:	      /-- bne.s 80fa <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    80e6:	      |   pea 14ef0 <incbin_player_end+0x3e4>
    80ec:	      |   jsr 11d08 <KPrintF>
    80f2:	      |   addq.l #4,sp
		return FALSE;
    80f4:	      |   clr.w d0
    80f6:	/-----|-- bra.w 861c <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    80fa:	|     \-> move.l 256(sp),252(sp)
    8100:	|         move.l #85773,248(sp)
    8108:	|         moveq #6,d0
    810a:	|         move.l d0,244(sp)
    810e:	|         move.l 17b30 <DOSBase>,d0
    8114:	|         movea.l d0,a6
    8116:	|         move.l 252(sp),d1
    811a:	|         move.l 248(sp),d2
    811e:	|         move.l 244(sp),d3
    8122:	|         jsr -48(a6)
    8126:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    812a:	|         move.l 256(sp),236(sp)
    8130:	|         clr.l 232(sp)
    8134:	|         move.l 17b30 <DOSBase>,d0
    813a:	|         movea.l d0,a6
    813c:	|         move.l 236(sp),d1
    8140:	|         move.l 232(sp),d2
    8144:	|         jsr -312(a6)
    8148:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    814c:	|         move.l 256(sp),224(sp)
    8152:	|         clr.l 220(sp)
    8156:	|         move.l 17b30 <DOSBase>,d0
    815c:	|         movea.l d0,a6
    815e:	|         move.l 224(sp),d1
    8162:	|         move.l 220(sp),d2
    8166:	|         jsr -312(a6)
    816a:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    816e:	|         move.l 256(sp),212(sp)
    8174:	|         moveq #2,d0
    8176:	|         move.l d0,208(sp)
    817a:	|         move.l 17b30 <DOSBase>,d0
    8180:	|         movea.l d0,a6
    8182:	|         move.l 212(sp),d1
    8186:	|         move.l 208(sp),d2
    818a:	|         jsr -312(a6)
    818e:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    8192:	|         move.l 256(sp),200(sp)
    8198:	|         moveq #2,d0
    819a:	|         move.l d0,196(sp)
    819e:	|         move.l 17b30 <DOSBase>,d0
    81a4:	|         movea.l d0,a6
    81a6:	|         move.l 200(sp),d1
    81aa:	|         move.l 196(sp),d2
    81ae:	|         jsr -312(a6)
    81b2:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    81b6:	|         move.l 256(sp),188(sp)
    81bc:	|         move.l #96974,184(sp)
    81c4:	|         moveq #8,d0
    81c6:	|         move.l d0,180(sp)
    81ca:	|         move.l 17b30 <DOSBase>,d0
    81d0:	|         movea.l d0,a6
    81d2:	|         move.l 188(sp),d1
    81d6:	|         move.l 184(sp),d2
    81da:	|         move.l 180(sp),d3
    81de:	|         jsr -48(a6)
    81e2:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    81e6:	|         move.l 256(sp),172(sp)
    81ec:	|         move.w 16000 <allowAnyFilename>,d0
    81f2:	|         movea.w d0,a0
    81f4:	|         move.l a0,168(sp)
    81f8:	|         move.l 17b30 <DOSBase>,d0
    81fe:	|         movea.l d0,a6
    8200:	|         move.l 172(sp),d1
    8204:	|         move.l 168(sp),d2
    8208:	|         jsr -312(a6)
    820c:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    8210:	|         move.l 256(sp),160(sp)
    8216:	|         move.w 17acc <captureAllKeys>,d0
    821c:	|         movea.w d0,a0
    821e:	|         move.l a0,156(sp)
    8222:	|         move.l 17b30 <DOSBase>,d0
    8228:	|         movea.l d0,a6
    822a:	|         move.l 160(sp),d1
    822e:	|         move.l 156(sp),d2
    8232:	|         jsr -312(a6)
    8236:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    823a:	|         move.l 256(sp),148(sp)
    8240:	|         moveq #1,d0
    8242:	|         move.l d0,144(sp)
    8246:	|         move.l 17b30 <DOSBase>,d0
    824c:	|         movea.l d0,a6
    824e:	|         move.l 148(sp),d1
    8252:	|         move.l 144(sp),d2
    8256:	|         jsr -312(a6)
    825a:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    825e:	|         move.l 256(sp),136(sp)
    8264:	|         move.l 17c16 <fontTableSize>,d0
    826a:	|         sgt d0
    826c:	|         neg.b d0
    826e:	|         move.b d0,d0
    8270:	|         andi.l #255,d0
    8276:	|         move.l d0,132(sp)
    827a:	|         move.l 17b30 <DOSBase>,d0
    8280:	|         movea.l d0,a6
    8282:	|         move.l 136(sp),d1
    8286:	|         move.l 132(sp),d2
    828a:	|         jsr -312(a6)
    828e:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    8292:	|         move.l 17c16 <fontTableSize>,d0
    8298:	|     /-- ble.s 82d6 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    829a:	|     |   move.l 17c0e <loadedFontNum>,d0
    82a0:	|     |   move.l 256(sp),-(sp)
    82a4:	|     |   move.l d0,-(sp)
    82a6:	|     |   jsr 8d0 <put2bytes>
    82ac:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    82ae:	|     |   move.l 17c0a <fontHeight>,d0
    82b4:	|     |   move.l 256(sp),-(sp)
    82b8:	|     |   move.l d0,-(sp)
    82ba:	|     |   jsr 8d0 <put2bytes>
    82c0:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    82c2:	|     |   move.l 17c12 <fontOrderString>,d0
    82c8:	|     |   move.l 256(sp),-(sp)
    82cc:	|     |   move.l d0,-(sp)
    82ce:	|     |   jsr bd8 <writeString>
    82d4:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    82d6:	|     \-> move.w 16598 <fontSpace>,d0
    82dc:	|         movea.w d0,a0
    82de:	|         move.l 256(sp),-(sp)
    82e2:	|         move.l a0,-(sp)
    82e4:	|         jsr a9c <putSigned>
    82ea:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    82ec:	|         move.l 17bd0 <cameraX>,d0
    82f2:	|         move.l 256(sp),-(sp)
    82f6:	|         move.l d0,-(sp)
    82f8:	|         jsr 8d0 <put2bytes>
    82fe:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    8300:	|         move.l 17bd4 <cameraY>,d0
    8306:	|         move.l 256(sp),-(sp)
    830a:	|         move.l d0,-(sp)
    830c:	|         jsr 8d0 <put2bytes>
    8312:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    8314:	|         move.l 16032 <cameraZoom>,d0
    831a:	|         move.l 256(sp),-(sp)
    831e:	|         move.l d0,-(sp)
    8320:	|         jsr a46 <putFloat>
    8326:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    8328:	|         move.l 256(sp),124(sp)
    832e:	|         move.b 16002 <brightnessLevel>,d0
    8334:	|         move.b d0,d0
    8336:	|         andi.l #255,d0
    833c:	|         move.l d0,120(sp)
    8340:	|         move.l 17b30 <DOSBase>,d0
    8346:	|         movea.l d0,a6
    8348:	|         move.l 124(sp),d1
    834c:	|         move.l 120(sp),d2
    8350:	|         jsr -312(a6)
    8354:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    8358:	|         move.l 256(sp),-(sp)
    835c:	|         jsr 3b06 <saveHandlers>
    8362:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    8364:	|         move.l 256(sp),-(sp)
    8368:	|         jsr 10a1e <saveRegions>
    836e:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    8370:	|         move.l 17a14 <mouseCursorAnim>,d0
    8376:	|         move.l 256(sp),-(sp)
    837a:	|         move.l d0,-(sp)
    837c:	|         jsr 6a52 <saveAnim>
    8382:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    8384:	|         move.l 17a18 <mouseCursorFrameNum>,d0
    838a:	|         move.l 256(sp),-(sp)
    838e:	|         move.l d0,-(sp)
    8390:	|         jsr 8d0 <put2bytes>
    8396:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    8398:	|         move.l 17ac4 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    83a0:	|         clr.l 272(sp)
	while (thisFunction) {
    83a4:	|     /-- bra.s 83b4 <saveGame+0x306>
		countFunctions ++;
    83a6:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    83aa:	|  |  |   movea.l 276(sp),a0
    83ae:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    83b4:	|  |  \-> tst.l 276(sp)
    83b8:	|  \----- bne.s 83a6 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    83ba:	|         move.l 256(sp),-(sp)
    83be:	|         move.l 276(sp),-(sp)
    83c2:	|         jsr 8d0 <put2bytes>
    83c8:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    83ca:	|         move.l 17ac4 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    83d2:	|     /-- bra.s 83ee <saveGame+0x340>
		saveFunction (thisFunction, fp);
    83d4:	|  /--|-> move.l 256(sp),-(sp)
    83d8:	|  |  |   move.l 280(sp),-(sp)
    83dc:	|  |  |   jsr 7ef6 <saveFunction>
    83e2:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    83e4:	|  |  |   movea.l 276(sp),a0
    83e8:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    83ee:	|  |  \-> tst.l 276(sp)
    83f2:	|  \----- bne.s 83d4 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    83f4:	|         clr.l 280(sp)
    83f8:	|     /-- bra.s 841a <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    83fa:	|  /--|-> move.l 17ada <globalVars>,d1
    8400:	|  |  |   move.l 280(sp),d0
    8404:	|  |  |   lsl.l #3,d0
    8406:	|  |  |   add.l d1,d0
    8408:	|  |  |   move.l 256(sp),-(sp)
    840c:	|  |  |   move.l d0,-(sp)
    840e:	|  |  |   jsr 87b2 <saveVariable>
    8414:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    8416:	|  |  |   addq.l #1,280(sp)
    841a:	|  |  \-> move.l 17b00 <numGlobals>,d0
    8420:	|  |      cmp.l 280(sp),d0
    8424:	|  \----- bgt.s 83fa <saveGame+0x34c>
	}

	savePeople (fp);
    8426:	|         move.l 256(sp),-(sp)
    842a:	|         jsr 6b7a <savePeople>
    8430:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    8432:	|         movea.l 17c22 <currentFloor>,a0
    8438:	|         move.l 8(a0),d0
    843c:	|  /----- beq.s 847a <saveGame+0x3cc>
		FPutC (fp, 1);
    843e:	|  |      move.l 256(sp),100(sp)
    8444:	|  |      moveq #1,d0
    8446:	|  |      move.l d0,96(sp)
    844a:	|  |      move.l 17b30 <DOSBase>,d0
    8450:	|  |      movea.l d0,a6
    8452:	|  |      move.l 100(sp),d1
    8456:	|  |      move.l 96(sp),d2
    845a:	|  |      jsr -312(a6)
    845e:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    8462:	|  |      movea.l 17c22 <currentFloor>,a0
    8468:	|  |      move.l (a0),d0
    846a:	|  |      move.l 256(sp),-(sp)
    846e:	|  |      move.l d0,-(sp)
    8470:	|  |      jsr 8d0 <put2bytes>
    8476:	|  |      addq.l #8,sp
    8478:	|  |  /-- bra.s 849c <saveGame+0x3ee>
	} else FPutC (fp, 0);
    847a:	|  \--|-> move.l 256(sp),112(sp)
    8480:	|     |   clr.l 108(sp)
    8484:	|     |   move.l 17b30 <DOSBase>,d0
    848a:	|     |   movea.l d0,a6
    848c:	|     |   move.l 112(sp),d1
    8490:	|     |   move.l 108(sp),d2
    8494:	|     |   jsr -312(a6)
    8498:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    849c:	|     \-> move.l 17a98 <zBuffer+0x50>,d0
    84a2:	|  /----- beq.s 84de <saveGame+0x430>
		FPutC (fp, 1);
    84a4:	|  |      move.l 256(sp),76(sp)
    84aa:	|  |      moveq #1,d0
    84ac:	|  |      move.l d0,72(sp)
    84b0:	|  |      move.l 17b30 <DOSBase>,d0
    84b6:	|  |      movea.l d0,a6
    84b8:	|  |      move.l 76(sp),d1
    84bc:	|  |      move.l 72(sp),d2
    84c0:	|  |      jsr -312(a6)
    84c4:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    84c8:	|  |      move.l 17a94 <zBuffer+0x4c>,d0
    84ce:	|  |      move.l 256(sp),-(sp)
    84d2:	|  |      move.l d0,-(sp)
    84d4:	|  |      jsr 8d0 <put2bytes>
    84da:	|  |      addq.l #8,sp
    84dc:	|  |  /-- bra.s 8500 <saveGame+0x452>
	} else FPutC (fp,0);
    84de:	|  \--|-> move.l 256(sp),88(sp)
    84e4:	|     |   clr.l 84(sp)
    84e8:	|     |   move.l 17b30 <DOSBase>,d0
    84ee:	|     |   movea.l d0,a6
    84f0:	|     |   move.l 88(sp),d1
    84f4:	|     |   move.l 84(sp),d2
    84f8:	|     |   jsr -312(a6)
    84fc:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    8500:	|     \-> move.l 256(sp),64(sp)
    8506:	|         move.l 17be4 <speechMode>,60(sp)
    850e:	|         move.l 17b30 <DOSBase>,d0
    8514:	|         movea.l d0,a6
    8516:	|         move.l 64(sp),d1
    851a:	|         move.l 60(sp),d2
    851e:	|         jsr -312(a6)
    8522:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    8526:	|         move.b 1656e <fadeMode>,d0
    852c:	|         move.b d0,d0
    852e:	|         andi.l #255,d0
    8534:	|         move.l d0,52(sp)
    8538:	|         move.l 256(sp),48(sp)
    853e:	|         move.l 17b30 <DOSBase>,d0
    8544:	|         movea.l d0,a6
    8546:	|         move.l 52(sp),d1
    854a:	|         move.l 48(sp),d2
    854e:	|         jsr -312(a6)
    8552:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    8556:	|         move.l 17b72 <speech>,d0
    855c:	|         move.l 256(sp),-(sp)
    8560:	|         move.l d0,-(sp)
    8562:	|         jsr 4e7e <saveSpeech>
    8568:	|         addq.l #8,sp
	saveStatusBars (fp);
    856a:	|         move.l 256(sp),-(sp)
    856e:	|         jsr 487a <saveStatusBars>
    8574:	|         addq.l #4,sp
	saveSounds (fp);
    8576:	|         move.l 256(sp),-(sp)
    857a:	|         jsr 88f6 <saveSounds>
    8580:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    8582:	|         move.w 17bce <saveEncoding>,d0
    8588:	|         move.w d0,d0
    858a:	|         andi.l #65535,d0
    8590:	|         move.l 256(sp),-(sp)
    8594:	|         move.l d0,-(sp)
    8596:	|         jsr 8d0 <put2bytes>
    859c:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    859e:	|         move.l 17bb8 <parallaxStuff>,d0
    85a4:	|         move.l 256(sp),-(sp)
    85a8:	|         move.l d0,-(sp)
    85aa:	|         jsr 8c40 <saveParallaxRecursive>
    85b0:	|         addq.l #8,sp
	FPutC (fp, 0);
    85b2:	|         move.l 256(sp),40(sp)
    85b8:	|         clr.l 36(sp)
    85bc:	|         move.l 17b30 <DOSBase>,d0
    85c2:	|         movea.l d0,a6
    85c4:	|         move.l 40(sp),d1
    85c8:	|         move.l 36(sp),d2
    85cc:	|         jsr -312(a6)
    85d0:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    85d4:	|         move.l 256(sp),28(sp)
    85da:	|         move.l 16008 <languageNum>,24(sp)
    85e2:	|         move.l 17b30 <DOSBase>,d0
    85e8:	|         movea.l d0,a6
    85ea:	|         move.l 28(sp),d1
    85ee:	|         move.l 24(sp),d2
    85f2:	|         jsr -312(a6)
    85f6:	|         move.l d0,20(sp)

	Close(fp);
    85fa:	|         move.l 256(sp),16(sp)
    8600:	|         move.l 17b30 <DOSBase>,d0
    8606:	|         movea.l d0,a6
    8608:	|         move.l 16(sp),d1
    860c:	|         jsr -36(a6)
    8610:	|         move.l d0,12(sp)
	clearStackLib ();
    8614:	|         jsr 7bac <clearStackLib>
	return TRUE;
    861a:	|         moveq #1,d0
}
    861c:	\-------> movem.l (sp)+,d2-d3/a6
    8620:	          lea 272(sp),sp
    8624:	          rts

00008626 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    8626:	       lea -12(sp),sp
	int elements = 0;
    862a:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    862e:	       move.l 16(sp),(sp)
	while (search) {
    8632:	   /-- bra.s 863e <saveStack+0x18>
		elements ++;
    8634:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    8638:	|  |   movea.l (sp),a0
    863a:	|  |   move.l 8(a0),(sp)
	while (search) {
    863e:	|  \-> tst.l (sp)
    8640:	\----- bne.s 8634 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    8642:	       move.l 20(sp),-(sp)
    8646:	       move.l 12(sp),-(sp)
    864a:	       jsr 8d0 <put2bytes>
    8650:	       addq.l #8,sp
	search = vs;
    8652:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    8656:	       clr.l 4(sp)
    865a:	   /-- bra.s 8676 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    865c:	/--|-> move.l (sp),d0
    865e:	|  |   move.l 20(sp),-(sp)
    8662:	|  |   move.l d0,-(sp)
    8664:	|  |   jsr 87b2 <saveVariable>
    866a:	|  |   addq.l #8,sp
		search = search -> next;
    866c:	|  |   movea.l (sp),a0
    866e:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    8672:	|  |   addq.l #1,4(sp)
    8676:	|  \-> move.l 4(sp),d0
    867a:	|      cmp.l 8(sp),d0
    867e:	\----- blt.s 865c <saveStack+0x36>
	}
}
    8680:	       nop
    8682:	       nop
    8684:	       lea 12(sp),sp
    8688:	       rts

0000868a <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    868a:	             lea -44(sp),sp
    868e:	             move.l a6,-(sp)
    8690:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    8692:	             move.l 17ba2 <stackLib>,48(sp)
	int a = 0;
    869a:	             clr.l 44(sp)
	while (s) {
    869e:	      /----- bra.s 86fc <saveStackRef+0x72>
		if (s -> stack == vs) {
    86a0:	   /--|----> movea.l 48(sp),a0
    86a4:	   |  |      move.l (a0),d0
    86a6:	   |  |      cmp.l 56(sp),d0
    86aa:	   |  |  /-- bne.s 86ee <saveStackRef+0x64>
			FPutC (fp, 1);
    86ac:	   |  |  |   move.l 60(sp),16(sp)
    86b2:	   |  |  |   moveq #1,d0
    86b4:	   |  |  |   move.l d0,12(sp)
    86b8:	   |  |  |   move.l 17b30 <DOSBase>,d0
    86be:	   |  |  |   movea.l d0,a6
    86c0:	   |  |  |   move.l 16(sp),d1
    86c4:	   |  |  |   move.l 12(sp),d2
    86c8:	   |  |  |   jsr -312(a6)
    86cc:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    86d0:	   |  |  |   move.l 17b9e <stackLibTotal>,d0
    86d6:	   |  |  |   sub.l 44(sp),d0
    86da:	   |  |  |   move.l 60(sp),-(sp)
    86de:	   |  |  |   move.l d0,-(sp)
    86e0:	   |  |  |   jsr 8d0 <put2bytes>
    86e6:	   |  |  |   addq.l #8,sp
			return TRUE;
    86e8:	   |  |  |   moveq #1,d0
    86ea:	/--|--|--|-- bra.w 87a8 <saveStackRef+0x11e>
		}
		s = s -> next;
    86ee:	|  |  |  \-> movea.l 48(sp),a0
    86f2:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    86f8:	|  |  |      addq.l #1,44(sp)
	while (s) {
    86fc:	|  |  \----> tst.l 48(sp)
    8700:	|  \-------- bne.s 86a0 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    8702:	|            move.l 60(sp),40(sp)
    8708:	|            clr.l 36(sp)
    870c:	|            move.l 17b30 <DOSBase>,d0
    8712:	|            movea.l d0,a6
    8714:	|            move.l 40(sp),d1
    8718:	|            move.l 36(sp),d2
    871c:	|            jsr -312(a6)
    8720:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    8724:	|            movea.l 56(sp),a0
    8728:	|            move.l (a0),d0
    872a:	|            move.l 60(sp),-(sp)
    872e:	|            move.l d0,-(sp)
    8730:	|            jsr 8626 <saveStack>
    8736:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    8738:	|            moveq #8,d0
    873a:	|            move.l d0,28(sp)
    873e:	|            clr.l 24(sp)
    8742:	|            move.l 17b28 <SysBase>,d0
    8748:	|            movea.l d0,a6
    874a:	|            move.l 28(sp),d0
    874e:	|            move.l 24(sp),d1
    8752:	|            jsr -684(a6)
    8756:	|            move.l d0,20(sp)
    875a:	|            move.l 20(sp),d0
    875e:	|            move.l d0,48(sp)
	stackLibTotal ++;
    8762:	|            move.l 17b9e <stackLibTotal>,d0
    8768:	|            addq.l #1,d0
    876a:	|            move.l d0,17b9e <stackLibTotal>
	if (! s) {
    8770:	|            tst.l 48(sp)
    8774:	|        /-- bne.s 8788 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    8776:	|        |   pea 14f3c <incbin_player_end+0x430>
    877c:	|        |   jsr 11d08 <KPrintF>
    8782:	|        |   addq.l #4,sp
		return FALSE;
    8784:	|        |   clr.w d0
    8786:	+--------|-- bra.s 87a8 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    8788:	|        \-> move.l 17ba2 <stackLib>,d0
    878e:	|            movea.l 48(sp),a0
    8792:	|            move.l d0,4(a0)
	s -> stack = vs;
    8796:	|            movea.l 48(sp),a0
    879a:	|            move.l 56(sp),(a0)
	stackLib = s;
    879e:	|            move.l 48(sp),17ba2 <stackLib>
	return TRUE;
    87a6:	|            moveq #1,d0
}
    87a8:	\----------> move.l (sp)+,d2
    87aa:	             movea.l (sp)+,a6
    87ac:	             lea 44(sp),sp
    87b0:	             rts

000087b2 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    87b2:	          lea -12(sp),sp
    87b6:	          move.l a6,-(sp)
    87b8:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    87ba:	          move.l 28(sp),16(sp)
    87c0:	          movea.l 24(sp),a0
    87c4:	          move.l (a0),d0
    87c6:	          move.l d0,12(sp)
    87ca:	          move.l 17b30 <DOSBase>,d0
    87d0:	          movea.l d0,a6
    87d2:	          move.l 16(sp),d1
    87d6:	          move.l 12(sp),d2
    87da:	          jsr -312(a6)
    87de:	          move.l d0,8(sp)
	switch (from -> varType) {
    87e2:	          movea.l 24(sp),a0
    87e6:	          move.l (a0),d0
    87e8:	          moveq #9,d1
    87ea:	          cmp.l d0,d1
    87ec:	      /-- bcs.w 889c <saveVariable+0xea>
    87f0:	      |   add.l d0,d0
    87f2:	      |   movea.l d0,a0
    87f4:	      |   adda.l #34816,a0
    87fa:	      |   move.w (a0),d0
    87fc:	      |   jmp (8800 <saveVariable+0x4e>,pc,d0.w)
    8800:	      |   ori.l #1310740,(a0)+
    8806:	      |   ori.b #20,(20,a0,d0.w)
    880c:	      |   .short 0x004c
    880e:	      |   ori.b #126,(a4)
    8812:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    8816:	      |   ori.b #40,(a0)+
    881a:	      |   ori.b #47,d4
    881e:	      |   ori.b #0,(a4)+
    8822:	      |   jsr 958 <put4bytes>
    8828:	      |   addq.l #8,sp
		return TRUE;
    882a:	      |   moveq #1,d0
    882c:	/-----|-- bra.w 88d8 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    8830:	|     |   movea.l 24(sp),a0
    8834:	|     |   move.l 4(a0),d0
    8838:	|     |   move.l 28(sp),-(sp)
    883c:	|     |   move.l d0,-(sp)
    883e:	|     |   jsr bd8 <writeString>
    8844:	|     |   addq.l #8,sp
		return TRUE;
    8846:	|     |   moveq #1,d0
    8848:	+-----|-- bra.w 88d8 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    884c:	|     |   movea.l 24(sp),a0
    8850:	|     |   move.l 4(a0),d0
    8854:	|     |   move.l 28(sp),-(sp)
    8858:	|     |   move.l d0,-(sp)
    885a:	|     |   jsr 868a <saveStackRef>
    8860:	|     |   addq.l #8,sp
    8862:	+-----|-- bra.s 88d8 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    8864:	|     |   movea.l 24(sp),a0
    8868:	|     |   move.l 4(a0),d0
    886c:	|     |   move.l 28(sp),-(sp)
    8870:	|     |   move.l d0,-(sp)
    8872:	|     |   jsr 6b1c <saveCostume>
    8878:	|     |   addq.l #8,sp
		return FALSE;
    887a:	|     |   clr.w d0
    887c:	+-----|-- bra.s 88d8 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    887e:	|     |   movea.l 24(sp),a0
    8882:	|     |   move.l 4(a0),d0
    8886:	|     |   move.l 28(sp),-(sp)
    888a:	|     |   move.l d0,-(sp)
    888c:	|     |   jsr 6a52 <saveAnim>
    8892:	|     |   addq.l #8,sp
		return FALSE;
    8894:	|     |   clr.w d0
    8896:	+-----|-- bra.s 88d8 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    8898:	|     |   clr.w d0
    889a:	+-----|-- bra.s 88d8 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    889c:	|     \-> movea.l 24(sp),a0
    88a0:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    88a2:	|         moveq #10,d1
    88a4:	|         cmp.l d0,d1
    88a6:	|  /----- bcs.s 88c0 <saveVariable+0x10e>
						typeName[from->varType] :
    88a8:	|  |      movea.l 24(sp),a0
    88ac:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    88ae:	|  |      add.l d0,d0
    88b0:	|  |      movea.l d0,a1
    88b2:	|  |      adda.l d0,a1
    88b4:	|  |      lea 16570 <typeName>,a0
    88ba:	|  |      move.l (0,a1,a0.l),d0
    88be:	|  |  /-- bra.s 88c6 <saveVariable+0x114>
    88c0:	|  \--|-> move.l #85857,d0
    88c6:	|     \-> move.l d0,-(sp)
    88c8:	|         pea 14f68 <incbin_player_end+0x45c>
    88ce:	|         jsr 11d08 <KPrintF>
    88d4:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    88d6:	|         moveq #1,d0
    88d8:	\-------> move.l (sp)+,d2
    88da:	          movea.l (sp)+,a6
    88dc:	          lea 12(sp),sp
    88e0:	          rts

000088e2 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    88e2:	moveq #0,d0
}
    88e4:	rts

000088e6 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    88e6:	nop
    88e8:	rts

000088ea <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    88ea:	nop
    88ec:	rts

000088ee <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    88ee:	moveq #1,d0
}
    88f0:	rts

000088f2 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    88f2:	nop
    88f4:	rts

000088f6 <saveSounds>:

void saveSounds (BPTR fp) {
    88f6:	lea -12(sp),sp
    88fa:	move.l a6,-(sp)
    88fc:	move.l d2,-(sp)
	FPutC (fp,0);
    88fe:	move.l 24(sp),16(sp)
    8904:	clr.l 12(sp)
    8908:	move.l 17b30 <DOSBase>,d0
    890e:	movea.l d0,a6
    8910:	move.l 16(sp),d1
    8914:	move.l 12(sp),d2
    8918:	jsr -312(a6)
    891c:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    8920:	move.l 1602e <defSoundVol>,d0
    8926:	move.l 24(sp),-(sp)
    892a:	move.l d0,-(sp)
    892c:	jsr 8d0 <put2bytes>
    8932:	addq.l #8,sp
	put2bytes (defVol, fp);
    8934:	move.l 1602a <defVol>,d0
    893a:	move.l 24(sp),-(sp)
    893e:	move.l d0,-(sp)
    8940:	jsr 8d0 <put2bytes>
    8946:	addq.l #8,sp
}
    8948:	nop
    894a:	move.l (sp)+,d2
    894c:	movea.l (sp)+,a6
    894e:	lea 12(sp),sp
    8952:	rts

00008954 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    8954:	move.l 4(sp),1602a <defVol>
}
    895c:	nop
    895e:	rts

00008960 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    8960:	move.l 4(sp),1602e <defSoundVol>
}
    8968:	nop
    896a:	rts

0000896c <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    896c:	nop
    896e:	rts

00008970 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    8970:	nop
    8972:	rts

00008974 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    8974:	nop
    8976:	rts

00008978 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    8978:	subq.l #4,sp
    897a:	move.l 12(sp),d0
    897e:	move.w d0,d0
    8980:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    8984:	moveq #1,d0
}
    8986:	addq.l #4,sp
    8988:	rts

0000898a <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    898a:	nop
    898c:	rts

0000898e <blankScreen>:
int lightMapNumber;
int viewportHeight, viewportWidth;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
    898e:	                lea -24(sp),sp
	if (y1 < 0) y1 = 0;
    8992:	                tst.l 32(sp)
    8996:	            /-- bge.s 899c <blankScreen+0xe>
    8998:	            |   clr.l 32(sp)
	if (x1 < 0) x1 = 0;
    899c:	            \-> tst.l 28(sp)
    89a0:	            /-- bge.s 89a6 <blankScreen+0x18>
    89a2:	            |   clr.l 28(sp)
	if (x2 > (int)sceneWidth) x2 = (int)sceneWidth;
    89a6:	            \-> move.l 17baa <sceneWidth>,d0
    89ac:	                cmp.l 36(sp),d0
    89b0:	            /-- bge.s 89bc <blankScreen+0x2e>
    89b2:	            |   move.l 17baa <sceneWidth>,d0
    89b8:	            |   move.l d0,36(sp)
	if (y2 > (int)sceneHeight) y2 = (int)sceneHeight;
    89bc:	            \-> move.l 17bae <sceneHeight>,d0
    89c2:	                cmp.l 40(sp),d0
    89c6:	            /-- bge.s 89d2 <blankScreen+0x44>
    89c8:	            |   move.l 17bae <sceneHeight>,d0
    89ce:	            |   move.l d0,40(sp)

	int picWidth = x2 - x1;
    89d2:	            \-> move.l 36(sp),d0
    89d6:	                sub.l 28(sp),d0
    89da:	                move.l d0,12(sp)
	int picHeight = y2 - y1;
    89de:	                move.l 40(sp),d0
    89e2:	                sub.l 32(sp),d0
    89e6:	                move.l d0,8(sp)

	//setPixelCoords(TRUE);

	int xoffset = 0;
    89ea:	                clr.l 20(sp)
	while (xoffset < picWidth) {
    89ee:	   /----------- bra.s 8a50 <blankScreen+0xc2>
		int w = (picWidth - xoffset < viewportWidth) ? picWidth - xoffset : viewportWidth;
    89f0:	/--|----------> move.l 12(sp),d0
    89f4:	|  |            sub.l 20(sp),d0
    89f8:	|  |            move.l 17bc0 <viewportWidth>,d1
    89fe:	|  |            cmp.l d0,d1
    8a00:	|  |        /-- bge.s 8a04 <blankScreen+0x76>
    8a02:	|  |        |   move.l d1,d0
    8a04:	|  |        \-> move.l d0,4(sp)

		int yoffset = 0;
    8a08:	|  |            clr.l 16(sp)
		while (yoffset < picHeight) {
    8a0c:	|  |     /----- bra.s 8a3c <blankScreen+0xae>
			int h = (picHeight - yoffset < viewportHeight) ? picHeight - yoffset : viewportHeight;
    8a0e:	|  |  /--|----> move.l 8(sp),d0
    8a12:	|  |  |  |      sub.l 16(sp),d0
    8a16:	|  |  |  |      move.l 17bbc <viewportHeight>,d1
    8a1c:	|  |  |  |      cmp.l d0,d1
    8a1e:	|  |  |  |  /-- bge.s 8a22 <blankScreen+0x94>
    8a20:	|  |  |  |  |   move.l d1,d0
    8a22:	|  |  |  |  \-> move.l d0,(sp)
		
			KPrintF("Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    8a24:	|  |  |  |      pea 14f8b <incbin_player_end+0x47f>
    8a2a:	|  |  |  |      jsr 11d08 <KPrintF>
    8a30:	|  |  |  |      addq.l #4,sp

			yoffset += viewportHeight;
    8a32:	|  |  |  |      move.l 17bbc <viewportHeight>,d0
    8a38:	|  |  |  |      add.l d0,16(sp)
		while (yoffset < picHeight) {
    8a3c:	|  |  |  \----> move.l 16(sp),d0
    8a40:	|  |  |         cmp.l 8(sp),d0
    8a44:	|  |  \-------- blt.s 8a0e <blankScreen+0x80>
		}
		xoffset += viewportWidth;
    8a46:	|  |            move.l 17bc0 <viewportWidth>,d0
    8a4c:	|  |            add.l d0,20(sp)
	while (xoffset < picWidth) {
    8a50:	|  \----------> move.l 20(sp),d0
    8a54:	|               cmp.l 12(sp),d0
    8a58:	\-------------- blt.s 89f0 <blankScreen+0x62>
	}

	//setPixelCoords(FALSE);
}
    8a5a:	                nop
    8a5c:	                nop
    8a5e:	                lea 24(sp),sp
    8a62:	                rts

00008a64 <darkScreen>:

void darkScreen () {
	KPrintF("Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    8a64:	pea 14f8b <incbin_player_end+0x47f>
    8a6a:	jsr 11d08 <KPrintF>
    8a70:	addq.l #4,sp
}
    8a72:	nop
    8a74:	rts

00008a76 <drawHorizontalLine>:

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    8a76:	movea.l 8(sp),a1
    8a7a:	movea.l 12(sp),a0
    8a7e:	move.l 8(sp),d1
    8a82:	move.l 4(sp),d0
    8a86:	move.l a1,-(sp)
    8a88:	move.l a0,-(sp)
    8a8a:	move.l d1,-(sp)
    8a8c:	move.l d0,-(sp)
    8a8e:	jsr df4 <drawLine>
    8a94:	lea 16(sp),sp
}
    8a98:	nop
    8a9a:	rts

00008a9c <drawVerticalLine>:

void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    8a9c:	movea.l 12(sp),a1
    8aa0:	movea.l 4(sp),a0
    8aa4:	move.l 8(sp),d1
    8aa8:	move.l 4(sp),d0
    8aac:	move.l a1,-(sp)
    8aae:	move.l a0,-(sp)
    8ab0:	move.l d1,-(sp)
    8ab2:	move.l d0,-(sp)
    8ab4:	jsr df4 <drawLine>
    8aba:	lea 16(sp),sp
}
    8abe:	nop
    8ac0:	rts

00008ac2 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    8ac2:	pea 14fb8 <incbin_player_end+0x4ac>
    8ac8:	jsr 11d08 <KPrintF>
    8ace:	addq.l #4,sp
}
    8ad0:	nop
    8ad2:	rts

00008ad4 <killBackDrop>:


void killBackDrop () {
	deleteTextures (1, &backdropTextureName);
    8ad4:	pea 17bb2 <backdropTextureName>
    8ada:	pea 1 <_start+0x1>
    8ade:	jsr f76 <deleteTextures>
    8ae4:	addq.l #8,sp
	backdropTextureName = 0;
    8ae6:	clr.l 17bb2 <backdropTextureName>
	backdropExists = FALSE;
    8aec:	clr.w 17bb6 <backdropExists>
}
    8af2:	nop
    8af4:	rts

00008af6 <killParallax>:

void killParallax () {
    8af6:	          lea -12(sp),sp
    8afa:	          move.l a6,-(sp)
	while (parallaxStuff) {
    8afc:	   /----- bra.s 8b68 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    8afe:	/--|----> move.l 17bb8 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    8b06:	|  |      movea.l 12(sp),a0
    8b0a:	|  |      move.l 42(a0),d0
    8b0e:	|  |      move.l d0,17bb8 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    8b14:	|  |      move.l 12(sp),d0
    8b18:	|  |      addq.l #4,d0
    8b1a:	|  |      move.l d0,-(sp)
    8b1c:	|  |      pea 1 <_start+0x1>
    8b20:	|  |      jsr f76 <deleteTextures>
    8b26:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    8b28:	|  |      movea.l 12(sp),a0
    8b2c:	|  |      move.l (a0),d0
    8b2e:	|  |  /-- beq.s 8b48 <killParallax+0x52>
    8b30:	|  |  |   movea.l 12(sp),a0
    8b34:	|  |  |   move.l (a0),8(sp)
    8b38:	|  |  |   move.l 17b28 <SysBase>,d0
    8b3e:	|  |  |   movea.l d0,a6
    8b40:	|  |  |   movea.l 8(sp),a1
    8b44:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    8b48:	|  |  \-> tst.l 12(sp)
    8b4c:	|  |  /-- beq.s 8b64 <killParallax+0x6e>
    8b4e:	|  |  |   move.l 12(sp),4(sp)
    8b54:	|  |  |   move.l 17b28 <SysBase>,d0
    8b5a:	|  |  |   movea.l d0,a6
    8b5c:	|  |  |   movea.l 4(sp),a1
    8b60:	|  |  |   jsr -690(a6)
		k = NULL;
    8b64:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    8b68:	|  \----> move.l 17bb8 <parallaxStuff>,d0
    8b6e:	\-------- bne.s 8afe <killParallax+0x8>
	}
}
    8b70:	          nop
    8b72:	          nop
    8b74:	          movea.l (sp)+,a6
    8b76:	          lea 12(sp),sp
    8b7a:	          rts

00008b7c <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {

	KPrintF("loadBackDrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    8b7c:	pea 14fd9 <incbin_player_end+0x4cd>
    8b82:	jsr 11d08 <KPrintF>
    8b88:	addq.l #4,sp
}
    8b8a:	nop
    8b8c:	rts

00008b8e <loadParallax>:

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    8b8e:	subq.l #8,sp
    8b90:	movea.l 12(sp),a0
    8b94:	move.l 16(sp),d1
    8b98:	move.l 20(sp),d0
    8b9c:	movea.w a0,a0
    8b9e:	move.w a0,6(sp)
    8ba2:	move.w d1,d1
    8ba4:	move.w d1,4(sp)
    8ba8:	move.w d0,d0
    8baa:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    8bae:	pea 15013 <incbin_player_end+0x507>
    8bb4:	jsr 11d08 <KPrintF>
    8bba:	addq.l #4,sp

}
    8bbc:	nop
    8bbe:	addq.l #8,sp
    8bc0:	rts

00008bc2 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    8bc2:	pea 15036 <incbin_player_end+0x52a>
    8bc8:	jsr 11d08 <KPrintF>
    8bce:	addq.l #4,sp
}
    8bd0:	nop
    8bd2:	rts

00008bd4 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    8bd4:	pea 17bc4 <snapshotTextureName>
    8bda:	pea 1 <_start+0x1>
    8bde:	jsr f76 <deleteTextures>
    8be4:	addq.l #8,sp
	snapshotTextureName = 0;
    8be6:	clr.l 17bc4 <snapshotTextureName>
}
    8bec:	nop
    8bee:	rts

00008bf0 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    8bf0:	jsr 8ad4 <killBackDrop>
	killParallax ();
    8bf6:	jsr 8af6 <killParallax>
	killZBuffer ();
    8bfc:	jsr 159c <killZBuffer>
	sceneWidth = x;
    8c02:	move.l 4(sp),d0
    8c06:	move.l d0,17baa <sceneWidth>
	sceneHeight = y;
    8c0c:	move.l 8(sp),d0
    8c10:	move.l d0,17bae <sceneHeight>
	return TRUE;
    8c16:	moveq #1,d0
}
    8c18:	rts

00008c1a <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    8c1a:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    8c1c:	move.l 12(sp),-(sp)
    8c20:	jsr 6bc <get2bytes>
    8c26:	addq.l #4,sp
    8c28:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    8c2c:	move.l 12(sp),-(sp)
    8c30:	jsr 6bc <get2bytes>
    8c36:	addq.l #4,sp
    8c38:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    8c3a:	moveq #1,d0
}
    8c3c:	addq.l #8,sp
    8c3e:	rts

00008c40 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    8c40:	   /-> lea -12(sp),sp
    8c44:	   |   move.l a6,-(sp)
    8c46:	   |   move.l d2,-(sp)
	if (me) {
    8c48:	   |   tst.l 24(sp)
    8c4c:	/--|-- beq.w 8ce2 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    8c50:	|  |   movea.l 24(sp),a0
    8c54:	|  |   move.l 42(a0),d0
    8c58:	|  |   move.l 28(sp),-(sp)
    8c5c:	|  |   move.l d0,-(sp)
    8c5e:	|  \-- jsr 8c40 <saveParallaxRecursive>(pc)
    8c62:	|      addq.l #8,sp
		FPutC (fp, 1);
    8c64:	|      move.l 28(sp),16(sp)
    8c6a:	|      moveq #1,d0
    8c6c:	|      move.l d0,12(sp)
    8c70:	|      move.l 17b30 <DOSBase>,d0
    8c76:	|      movea.l d0,a6
    8c78:	|      move.l 16(sp),d1
    8c7c:	|      move.l 12(sp),d2
    8c80:	|      jsr -312(a6)
    8c84:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    8c88:	|      movea.l 24(sp),a0
    8c8c:	|      move.w 28(a0),d0
    8c90:	|      move.w d0,d0
    8c92:	|      andi.l #65535,d0
    8c98:	|      move.l 28(sp),-(sp)
    8c9c:	|      move.l d0,-(sp)
    8c9e:	|      jsr 8d0 <put2bytes>
    8ca4:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    8ca6:	|      movea.l 24(sp),a0
    8caa:	|      move.w 30(a0),d0
    8cae:	|      move.w d0,d0
    8cb0:	|      andi.l #65535,d0
    8cb6:	|      move.l 28(sp),-(sp)
    8cba:	|      move.l d0,-(sp)
    8cbc:	|      jsr 8d0 <put2bytes>
    8cc2:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    8cc4:	|      movea.l 24(sp),a0
    8cc8:	|      move.w 32(a0),d0
    8ccc:	|      move.w d0,d0
    8cce:	|      andi.l #65535,d0
    8cd4:	|      move.l 28(sp),-(sp)
    8cd8:	|      move.l d0,-(sp)
    8cda:	|      jsr 8d0 <put2bytes>
    8ce0:	|      addq.l #8,sp
	}
}
    8ce2:	\----> nop
    8ce4:	       move.l (sp)+,d2
    8ce6:	       movea.l (sp)+,a6
    8ce8:	       lea 12(sp),sp
    8cec:	       rts

00008cee <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    8cee:	pea 1506f <incbin_player_end+0x563>
    8cf4:	jsr 11d08 <KPrintF>
    8cfa:	addq.l #4,sp
	return TRUE;
    8cfc:	moveq #1,d0
    8cfe:	rts

00008d00 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    8d00:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    8d02:	             move.l 17bc8 <allObjectTypes>,(sp)

	while (huntType) {
    8d08:	      /----- bra.s 8d20 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    8d0a:	   /--|----> movea.l (sp),a0
    8d0c:	   |  |      move.l 4(a0),d0
    8d10:	   |  |      cmp.l 8(sp),d0
    8d14:	   |  |  /-- bne.s 8d1a <findObjectType+0x1a>
    8d16:	   |  |  |   move.l (sp),d0
    8d18:	/--|--|--|-- bra.s 8d30 <findObjectType+0x30>
		huntType = huntType -> next;
    8d1a:	|  |  |  \-> movea.l (sp),a0
    8d1c:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    8d20:	|  |  \----> tst.l (sp)
    8d22:	|  \-------- bne.s 8d0a <findObjectType+0xa>
	}

	return loadObjectType (i);
    8d24:	|            move.l 8(sp),-(sp)
    8d28:	|            jsr 8df0 <loadObjectType>
    8d2e:	|            addq.l #4,sp
}
    8d30:	\----------> addq.l #4,sp
    8d32:	             rts

00008d34 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    8d34:	             lea -12(sp),sp
	int i, num = 0;
    8d38:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    8d3c:	             move.l 20(sp),-(sp)
    8d40:	             jsr 8d00 <findObjectType>
    8d46:	             addq.l #4,sp
    8d48:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    8d4a:	             clr.l 8(sp)
    8d4e:	   /-------- bra.s 8d84 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    8d50:	/--|-------> movea.l (sp),a0
    8d52:	|  |         move.l 38(a0),d1
    8d56:	|  |         move.l 8(sp),d0
    8d5a:	|  |         lsl.l #3,d0
    8d5c:	|  |         movea.l d1,a0
    8d5e:	|  |         adda.l d0,a0
    8d60:	|  |         move.l (a0),d0
    8d62:	|  |         cmp.l 16(sp),d0
    8d66:	|  |  /----- bne.s 8d80 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    8d68:	|  |  |      movea.l (sp),a0
    8d6a:	|  |  |      move.l 38(a0),d1
    8d6e:	|  |  |      move.l 8(sp),d0
    8d72:	|  |  |      lsl.l #3,d0
    8d74:	|  |  |      movea.l d1,a0
    8d76:	|  |  |      adda.l d0,a0
    8d78:	|  |  |      move.l 4(a0),4(sp)
			break;
    8d7e:	|  |  |  /-- bra.s 8d90 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    8d80:	|  |  \--|-> addq.l #1,8(sp)
    8d84:	|  \-----|-> movea.l (sp),a0
    8d86:	|        |   move.l 16(a0),d0
    8d8a:	|        |   cmp.l 8(sp),d0
    8d8e:	\--------|-- bgt.s 8d50 <getCombinationFunction+0x1c>
		}
	}

	return num;
    8d90:	         \-> move.l 4(sp),d0
}
    8d94:	             lea 12(sp),sp
    8d98:	             rts

00008d9a <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    8d9a:	moveq #1,d0
}
    8d9c:	rts

00008d9e <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    8d9e:	subq.l #8,sp
    8da0:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    8da2:	move.l 16(sp),-(sp)
    8da6:	jsr 6bc <get2bytes>
    8dac:	addq.l #4,sp
    8dae:	move.l d0,-(sp)
    8db0:	jsr 8df0 <loadObjectType>
    8db6:	addq.l #4,sp
    8db8:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    8dbc:	movea.l 8(sp),a0
    8dc0:	move.l (a0),4(sp)
    8dc4:	move.l 17b28 <SysBase>,d0
    8dca:	movea.l d0,a6
    8dcc:	movea.l 4(sp),a1
    8dd0:	jsr -690(a6)
	r -> screenName = readString (fp);
    8dd4:	move.l 16(sp),-(sp)
    8dd8:	jsr b02 <readString>
    8dde:	addq.l #4,sp
    8de0:	movea.l 8(sp),a0
    8de4:	move.l d0,(a0)
	return r;
    8de6:	move.l 8(sp),d0
}
    8dea:	movea.l (sp)+,a6
    8dec:	addq.l #8,sp
    8dee:	rts

00008df0 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    8df0:	          lea -84(sp),sp
    8df4:	          move.l a6,-(sp)
    8df6:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    8df8:	          moveq #42,d0
    8dfa:	          move.l d0,84(sp)
    8dfe:	          clr.l 80(sp)
    8e02:	          move.l 17b28 <SysBase>,d0
    8e08:	          movea.l d0,a6
    8e0a:	          move.l 84(sp),d0
    8e0e:	          move.l 80(sp),d1
    8e12:	          jsr -684(a6)
    8e16:	          move.l d0,76(sp)
    8e1a:	          move.l 76(sp),d0
    8e1e:	          move.l d0,72(sp)

    if (newType) {
    8e22:	/-------- beq.w 909c <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    8e26:	|         move.l 96(sp),-(sp)
    8e2a:	|         jsr 3f28 <openObjectSlice>
    8e30:	|         addq.l #4,sp
    8e32:	|         tst.w d0
    8e34:	+-------- beq.w 909c <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    8e38:	|         move.l 17b10 <bigDataFile>,d0
    8e3e:	|         move.l d0,-(sp)
    8e40:	|         jsr 6bc <get2bytes>
    8e46:	|         addq.l #4,sp
    8e48:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    8e4c:	|         move.l 17b10 <bigDataFile>,64(sp)
    8e54:	|         move.l 17b30 <DOSBase>,d0
    8e5a:	|         movea.l d0,a6
    8e5c:	|         move.l 64(sp),d1
    8e60:	|         jsr -306(a6)
    8e64:	|         move.l d0,60(sp)
    8e68:	|         move.l 60(sp),d0
    8e6c:	|         move.l d0,d0
    8e6e:	|         movea.l 72(sp),a0
    8e72:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    8e76:	|         move.l 17b10 <bigDataFile>,56(sp)
    8e7e:	|         move.l 17b30 <DOSBase>,d0
    8e84:	|         movea.l d0,a6
    8e86:	|         move.l 56(sp),d1
    8e8a:	|         jsr -306(a6)
    8e8e:	|         move.l d0,52(sp)
    8e92:	|         move.l 52(sp),d0
    8e96:	|         move.l d0,d0
    8e98:	|         movea.l 72(sp),a0
    8e9c:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    8ea0:	|         move.l 17b10 <bigDataFile>,48(sp)
    8ea8:	|         move.l 17b30 <DOSBase>,d0
    8eae:	|         movea.l d0,a6
    8eb0:	|         move.l 48(sp),d1
    8eb4:	|         jsr -306(a6)
    8eb8:	|         move.l d0,44(sp)
    8ebc:	|         move.l 44(sp),d0
    8ec0:	|         move.l d0,d0
    8ec2:	|         movea.l 72(sp),a0
    8ec6:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    8eca:	|         move.l 17b10 <bigDataFile>,40(sp)
    8ed2:	|         move.l 17b30 <DOSBase>,d0
    8ed8:	|         movea.l d0,a6
    8eda:	|         move.l 40(sp),d1
    8ede:	|         jsr -306(a6)
    8ee2:	|         move.l d0,36(sp)
    8ee6:	|         move.l 36(sp),d0
    8eea:	|         movea.l 72(sp),a0
    8eee:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    8ef2:	|         move.l 17b10 <bigDataFile>,32(sp)
    8efa:	|         move.l 17b30 <DOSBase>,d0
    8f00:	|         movea.l d0,a6
    8f02:	|         move.l 32(sp),d1
    8f06:	|         jsr -306(a6)
    8f0a:	|         move.l d0,28(sp)
    8f0e:	|         move.l 28(sp),d0
    8f12:	|         movea.l 72(sp),a0
    8f16:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    8f1a:	|         move.l 17b10 <bigDataFile>,d0
    8f20:	|         move.l d0,-(sp)
    8f22:	|         jsr 718 <get4bytes>
    8f28:	|         addq.l #4,sp
    8f2a:	|         movea.l 72(sp),a0
    8f2e:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    8f32:	|         move.l 17b10 <bigDataFile>,d0
    8f38:	|         move.l d0,-(sp)
    8f3a:	|         jsr 6bc <get2bytes>
    8f40:	|         addq.l #4,sp
    8f42:	|         movea.l 72(sp),a0
    8f46:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    8f4a:	|         move.l 17b10 <bigDataFile>,24(sp)
    8f52:	|         move.l 17b30 <DOSBase>,d0
    8f58:	|         movea.l d0,a6
    8f5a:	|         move.l 24(sp),d1
    8f5e:	|         jsr -306(a6)
    8f62:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    8f66:	|         move.l 17b10 <bigDataFile>,d0
    8f6c:	|         move.l d0,-(sp)
    8f6e:	|         jsr 7d8 <getFloat>
    8f74:	|         addq.l #4,sp
            getFloat(bigDataFile);
    8f76:	|         move.l 17b10 <bigDataFile>,d0
    8f7c:	|         move.l d0,-(sp)
    8f7e:	|         jsr 7d8 <getFloat>
    8f84:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    8f86:	|         move.l 17b10 <bigDataFile>,d0
    8f8c:	|         move.l d0,-(sp)
    8f8e:	|         jsr 6bc <get2bytes>
    8f94:	|         addq.l #4,sp
    8f96:	|         move.l d0,d0
    8f98:	|         movea.l 72(sp),a0
    8f9c:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    8fa0:	|         move.l 17b10 <bigDataFile>,d0
    8fa6:	|         move.l d0,-(sp)
    8fa8:	|         jsr 6bc <get2bytes>
    8fae:	|         addq.l #4,sp
    8fb0:	|         movea.l 72(sp),a0
    8fb4:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    8fb8:	|         movea.l 72(sp),a0
    8fbc:	|         move.l 16(a0),d0
    8fc0:	|  /----- beq.s 8ff2 <loadObjectType+0x202>
    8fc2:	|  |      movea.l 72(sp),a0
    8fc6:	|  |      move.l 16(a0),d0
    8fca:	|  |      lsl.l #3,d0
    8fcc:	|  |      move.l d0,16(sp)
    8fd0:	|  |      clr.l 12(sp)
    8fd4:	|  |      move.l 17b28 <SysBase>,d0
    8fda:	|  |      movea.l d0,a6
    8fdc:	|  |      move.l 16(sp),d0
    8fe0:	|  |      move.l 12(sp),d1
    8fe4:	|  |      jsr -684(a6)
    8fe8:	|  |      move.l d0,8(sp)
    8fec:	|  |      move.l 8(sp),d0
    8ff0:	|  |  /-- bra.s 8ff4 <loadObjectType+0x204>
    8ff2:	|  \--|-> moveq #0,d0
    8ff4:	|     \-> movea.l 72(sp),a0
    8ff8:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    8ffc:	|         clr.l 88(sp)
    9000:	|     /-- bra.s 9050 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    9002:	|  /--|-> move.l 17b10 <bigDataFile>,d1
    9008:	|  |  |   movea.l 72(sp),a0
    900c:	|  |  |   movea.l 38(a0),a0
    9010:	|  |  |   move.l 88(sp),d0
    9014:	|  |  |   lsl.l #3,d0
    9016:	|  |  |   lea (0,a0,d0.l),a2
    901a:	|  |  |   move.l d1,-(sp)
    901c:	|  |  |   jsr 6bc <get2bytes>
    9022:	|  |  |   addq.l #4,sp
    9024:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    9026:	|  |  |   move.l 17b10 <bigDataFile>,d1
    902c:	|  |  |   movea.l 72(sp),a0
    9030:	|  |  |   movea.l 38(a0),a0
    9034:	|  |  |   move.l 88(sp),d0
    9038:	|  |  |   lsl.l #3,d0
    903a:	|  |  |   lea (0,a0,d0.l),a2
    903e:	|  |  |   move.l d1,-(sp)
    9040:	|  |  |   jsr 6bc <get2bytes>
    9046:	|  |  |   addq.l #4,sp
    9048:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    904c:	|  |  |   addq.l #1,88(sp)
    9050:	|  |  \-> movea.l 72(sp),a0
    9054:	|  |      move.l 16(a0),d0
    9058:	|  |      cmp.l 88(sp),d0
    905c:	|  \----- bgt.s 9002 <loadObjectType+0x212>
            }
            finishAccess();
    905e:	|         jsr 3d58 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    9064:	|         move.l 68(sp),-(sp)
    9068:	|         jsr 3d62 <getNumberedString>
    906e:	|         addq.l #4,sp
    9070:	|         movea.l 72(sp),a0
    9074:	|         move.l d0,(a0)
            newType->objectNum = i;
    9076:	|         movea.l 72(sp),a0
    907a:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    9080:	|         move.l 17bc8 <allObjectTypes>,d0
    9086:	|         movea.l 72(sp),a0
    908a:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    908e:	|         move.l 72(sp),17bc8 <allObjectTypes>
            return newType;
    9096:	|         move.l 72(sp),d0
    909a:	|     /-- bra.s 909e <loadObjectType+0x2ae>
        }
    }
    return NULL;
    909c:	\-----|-> moveq #0,d0
}
    909e:	      \-> movea.l (sp)+,a2
    90a0:	          movea.l (sp)+,a6
    90a2:	          lea 84(sp),sp
    90a6:	          rts

000090a8 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    90a8:	             lea -16(sp),sp
    90ac:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    90ae:	             move.l #97224,16(sp)

	while (* huntRegion) {
    90b6:	   /-------- bra.s 912a <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    90b8:	/--|-------> movea.l 16(sp),a0
    90bc:	|  |         move.l (a0),d0
    90be:	|  |         cmp.l 24(sp),d0
    90c2:	|  |  /----- bne.s 911c <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    90c4:	|  |  |      movea.l 24(sp),a0
    90c8:	|  |  |      move.l 8(a0),d0
    90cc:	|  |  |      movea.l 16(sp),a0
    90d0:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    90d2:	|  |  |      movea.l 24(sp),a0
    90d6:	|  |  |      move.l 38(a0),12(sp)
    90dc:	|  |  |      move.l 17b28 <SysBase>,d0
    90e2:	|  |  |      movea.l d0,a6
    90e4:	|  |  |      movea.l 12(sp),a1
    90e8:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    90ec:	|  |  |      movea.l 24(sp),a0
    90f0:	|  |  |      move.l (a0),8(sp)
    90f4:	|  |  |      move.l 17b28 <SysBase>,d0
    90fa:	|  |  |      movea.l d0,a6
    90fc:	|  |  |      movea.l 8(sp),a1
    9100:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    9104:	|  |  |      move.l 24(sp),4(sp)
    910a:	|  |  |      move.l 17b28 <SysBase>,d0
    9110:	|  |  |      movea.l d0,a6
    9112:	|  |  |      movea.l 4(sp),a1
    9116:	|  |  |      jsr -690(a6)
			return;
    911a:	|  |  |  /-- bra.s 9140 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    911c:	|  |  \--|-> movea.l 16(sp),a0
    9120:	|  |     |   move.l (a0),d0
    9122:	|  |     |   move.l d0,d1
    9124:	|  |     |   addq.l #8,d1
    9126:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    912a:	|  \-----|-> movea.l 16(sp),a0
    912e:	|        |   move.l (a0),d0
    9130:	\--------|-- bne.s 90b8 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    9132:	         |   pea 15096 <incbin_player_end+0x58a>
    9138:	         |   jsr 11d08 <KPrintF>
    913e:	         |   addq.l #4,sp
}
    9140:	         \-> movea.l (sp)+,a6
    9142:	             lea 16(sp),sp
    9146:	             rts

00009148 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    9148:	movea.l 4(sp),a0
    914c:	move.l 4(a0),d0
    9150:	move.l 8(sp),-(sp)
    9154:	move.l d0,-(sp)
    9156:	jsr 8d0 <put2bytes>
    915c:	addq.l #8,sp
	writeString (r -> screenName, fp);
    915e:	movea.l 4(sp),a0
    9162:	move.l (a0),d0
    9164:	move.l 8(sp),-(sp)
    9168:	move.l d0,-(sp)
    916a:	jsr bd8 <writeString>
    9170:	addq.l #8,sp
    9172:	nop
    9174:	rts

00009176 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    9176:	                         lea -112(sp),sp
    917a:	                         move.l a6,-(sp)
    917c:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    917e:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    9182:	                         move.w 17bce <saveEncoding>,d0
    9188:	                  /----- beq.s 9192 <fileToStack+0x1c>
    918a:	                  |      move.l #86204,d0
    9190:	                  |  /-- bra.s 9198 <fileToStack+0x22>
    9192:	                  \--|-> move.l #86230,d0
    9198:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    919c:	                         move.l 124(sp),112(sp)
    91a2:	                         move.l #1005,108(sp)
    91aa:	                         move.l 17b30 <DOSBase>,d0
    91b0:	                         movea.l d0,a6
    91b2:	                         move.l 112(sp),d1
    91b6:	                         move.l 108(sp),d2
    91ba:	                         jsr -30(a6)
    91be:	                         move.l d0,104(sp)
    91c2:	                         move.l 104(sp),d0
    91c6:	                         move.l d0,100(sp)
    if (!fp) {
    91ca:	                     /-- bne.s 91e4 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    91cc:	                     |   move.l 124(sp),-(sp)
    91d0:	                     |   pea 150ed <incbin_player_end+0x5e1>
    91d6:	                     |   jsr 11d08 <KPrintF>
    91dc:	                     |   addq.l #8,sp
        return FALSE;
    91de:	                     |   clr.w d0
    91e0:	/--------------------|-- bra.w 94da <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    91e4:	|                    \-> move.w 17bce <saveEncoding>,d0
    91ea:	|                        move.l d0,d0
    91ec:	|                        move.b d0,17bcc <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    91f2:	|                        move.w 17bce <saveEncoding>,d0
    91f8:	|                        lsr.w #8,d0
    91fa:	|                        move.l d0,d0
    91fc:	|                        move.b d0,17bcd <encode2>

    while (*checker) {
    9202:	|                 /----- bra.s 9266 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    9204:	|              /--|----> move.l 100(sp),30(sp)
    920a:	|              |  |      move.l 17b30 <DOSBase>,d0
    9210:	|              |  |      movea.l d0,a6
    9212:	|              |  |      move.l 30(sp),d1
    9216:	|              |  |      jsr -306(a6)
    921a:	|              |  |      move.l d0,26(sp)
    921e:	|              |  |      move.l 26(sp),d1
    9222:	|              |  |      movea.l 116(sp),a0
    9226:	|              |  |      move.b (a0),d0
    9228:	|              |  |      ext.w d0
    922a:	|              |  |      movea.w d0,a0
    922c:	|              |  |      cmpa.l d1,a0
    922e:	|              |  |  /-- beq.s 9262 <fileToStack+0xec>
            Close(fp);
    9230:	|              |  |  |   move.l 100(sp),22(sp)
    9236:	|              |  |  |   move.l 17b30 <DOSBase>,d0
    923c:	|              |  |  |   movea.l d0,a6
    923e:	|              |  |  |   move.l 22(sp),d1
    9242:	|              |  |  |   jsr -36(a6)
    9246:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    924a:	|              |  |  |   move.l 124(sp),-(sp)
    924e:	|              |  |  |   pea 150fa <incbin_player_end+0x5ee>
    9254:	|              |  |  |   jsr 11d08 <KPrintF>
    925a:	|              |  |  |   addq.l #8,sp
            return FALSE;
    925c:	|              |  |  |   clr.w d0
    925e:	+--------------|--|--|-- bra.w 94da <fileToStack+0x364>
        }
        checker++;
    9262:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    9266:	|              |  \----> movea.l 116(sp),a0
    926a:	|              |         move.b (a0),d0
    926c:	|              \-------- bne.s 9204 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    926e:	|                        move.w 17bce <saveEncoding>,d0
    9274:	|  /-------------------- beq.s 92e8 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    9276:	|  |                     move.l 100(sp),-(sp)
    927a:	|  |                     jsr 94e4 <readStringEncoded>
    9280:	|  |                     addq.l #4,sp
    9282:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    9286:	|  |                     pea 1513b <incbin_player_end+0x62f>
    928c:	|  |                     move.l 100(sp),-(sp)
    9290:	|  |                     jsr f1de <strcmp>
    9296:	|  |                     addq.l #8,sp
    9298:	|  |                     tst.l d0
    929a:	|  |                 /-- beq.s 92ce <fileToStack+0x158>
            Close(fp);
    929c:	|  |                 |   move.l 100(sp),88(sp)
    92a2:	|  |                 |   move.l 17b30 <DOSBase>,d0
    92a8:	|  |                 |   movea.l d0,a6
    92aa:	|  |                 |   move.l 88(sp),d1
    92ae:	|  |                 |   jsr -36(a6)
    92b2:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    92b6:	|  |                 |   move.l 124(sp),-(sp)
    92ba:	|  |                 |   pea 1514a <incbin_player_end+0x63e>
    92c0:	|  |                 |   jsr 11d08 <KPrintF>
    92c6:	|  |                 |   addq.l #8,sp
            return FALSE;
    92c8:	|  |                 |   clr.w d0
    92ca:	+--|-----------------|-- bra.w 94da <fileToStack+0x364>
        }
        FreeVec(checker);
    92ce:	|  |                 \-> move.l 96(sp),92(sp)
    92d4:	|  |                     move.l 17b28 <SysBase>,d0
    92da:	|  |                     movea.l d0,a6
    92dc:	|  |                     movea.l 92(sp),a1
    92e0:	|  |                     jsr -690(a6)
        checker = NULL;
    92e4:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    92e8:	|  >-------------------> move.w 17bce <saveEncoding>,d0
    92ee:	|  |     /-------------- beq.w 9422 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    92f2:	|  |     |               move.l 100(sp),76(sp)
    92f8:	|  |     |               move.l 17b30 <DOSBase>,d0
    92fe:	|  |     |               movea.l d0,a6
    9300:	|  |     |               move.l 76(sp),d1
    9304:	|  |     |               jsr -306(a6)
    9308:	|  |     |               move.l d0,72(sp)
    930c:	|  |     |               move.l 72(sp),d0
    9310:	|  |     |               move.b 17bcc <encode1>,d1
    9316:	|  |     |               ext.w d1
    9318:	|  |     |               ext.l d1
    931a:	|  |     |               move.l d0,d2
    931c:	|  |     |               eor.l d1,d2
    931e:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    9322:	|  |     |               moveq #-1,d0
    9324:	|  |     |               cmp.l 68(sp),d0
    9328:	|  |  /--|-------------- beq.w 94b8 <fileToStack+0x342>

            char i = (char) tmp;
    932c:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    9332:	|  |  |  |               move.b 67(sp),d0
    9336:	|  |  |  |               ext.w d0
    9338:	|  |  |  |               movea.w d0,a0
    933a:	|  |  |  |               moveq #2,d2
    933c:	|  |  |  |               cmp.l a0,d2
    933e:	|  |  |  |     /-------- beq.s 93ba <fileToStack+0x244>
    9340:	|  |  |  |     |         moveq #2,d0
    9342:	|  |  |  |     |         cmp.l a0,d0
    9344:	|  |  |  |  /--|-------- blt.w 93f0 <fileToStack+0x27a>
    9348:	|  |  |  |  |  |         cmpa.w #0,a0
    934c:	|  |  |  |  |  |     /-- beq.s 9358 <fileToStack+0x1e2>
    934e:	|  |  |  |  |  |     |   moveq #1,d2
    9350:	|  |  |  |  |  |     |   cmp.l a0,d2
    9352:	|  |  |  |  |  |  /--|-- beq.s 9394 <fileToStack+0x21e>
    9354:	|  |  |  |  +--|--|--|-- bra.w 93f0 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    9358:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    935c:	|  |  |  |  |  |  |      jsr 94e4 <readStringEncoded>
    9362:	|  |  |  |  |  |  |      addq.l #4,sp
    9364:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    9368:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    936c:	|  |  |  |  |  |  |      lea 14(sp),a0
    9370:	|  |  |  |  |  |  |      move.l a0,-(sp)
    9372:	|  |  |  |  |  |  |      jsr ff54 <makeTextVar>
    9378:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    937a:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    9380:	|  |  |  |  |  |  |      move.l 17b28 <SysBase>,d0
    9386:	|  |  |  |  |  |  |      movea.l d0,a6
    9388:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    938c:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    9390:	|  |  |  |  |  |  |  /-- bra.w 9448 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    9394:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    9398:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    939e:	|  |  |  |  |  |     |   addq.l #4,sp
    93a0:	|  |  |  |  |  |     |   move.l d0,-(sp)
    93a2:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    93a6:	|  |  |  |  |  |     |   lea 18(sp),a0
    93aa:	|  |  |  |  |  |     |   move.l a0,-(sp)
    93ac:	|  |  |  |  |  |     |   jsr 10602 <setVariable>
    93b2:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    93b6:	|  |  |  |  |  |     +-- bra.w 9448 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    93ba:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    93c0:	|  |  |  |  |        |   move.l 17b30 <DOSBase>,d0
    93c6:	|  |  |  |  |        |   movea.l d0,a6
    93c8:	|  |  |  |  |        |   move.l 62(sp),d1
    93cc:	|  |  |  |  |        |   jsr -306(a6)
    93d0:	|  |  |  |  |        |   move.l d0,58(sp)
    93d4:	|  |  |  |  |        |   move.l 58(sp),d0
    93d8:	|  |  |  |  |        |   move.l d0,-(sp)
    93da:	|  |  |  |  |        |   pea 1 <_start+0x1>
    93de:	|  |  |  |  |        |   lea 18(sp),a0
    93e2:	|  |  |  |  |        |   move.l a0,-(sp)
    93e4:	|  |  |  |  |        |   jsr 10602 <setVariable>
    93ea:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    93ee:	|  |  |  |  |        +-- bra.s 9448 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    93f0:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    93f4:	|  |  |  |           |   pea 151cc <incbin_player_end+0x6c0>
    93fa:	|  |  |  |           |   jsr 11d08 <KPrintF>
    9400:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    9402:	|  |  |  |           |   move.l 100(sp),46(sp)
    9408:	|  |  |  |           |   move.l 17b30 <DOSBase>,d0
    940e:	|  |  |  |           |   movea.l d0,a6
    9410:	|  |  |  |           |   move.l 46(sp),d1
    9414:	|  |  |  |           |   jsr -36(a6)
    9418:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    941c:	|  |  |  |           |   clr.w d0
    941e:	+--|--|--|-----------|-- bra.w 94da <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    9422:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    9426:	|  |  |              |   jsr 95aa <readTextPlain>
    942c:	|  |  |              |   addq.l #4,sp
    942e:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    9432:	|  |  |        /-----|-- beq.w 94bc <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    9436:	|  |  |        |     |   move.l 80(sp),-(sp)
    943a:	|  |  |        |     |   lea 14(sp),a0
    943e:	|  |  |        |     |   move.l a0,-(sp)
    9440:	|  |  |        |     |   jsr ff54 <makeTextVar>
    9446:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    9448:	|  |  |        |     \-> movea.l 128(sp),a0
    944c:	|  |  |        |         move.l (a0),d0
    944e:	|  |  |        |  /----- bne.s 947e <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    9450:	|  |  |        |  |      move.l 128(sp),d0
    9454:	|  |  |        |  |      move.l d0,-(sp)
    9456:	|  |  |        |  |      lea 14(sp),a0
    945a:	|  |  |        |  |      move.l a0,-(sp)
    945c:	|  |  |        |  |      jsr f5f4 <addVarToStackQuick>
    9462:	|  |  |        |  |      addq.l #8,sp
    9464:	|  |  |        |  |      tst.w d0
    9466:	|  |  |        |  |  /-- bne.s 946c <fileToStack+0x2f6>
    9468:	|  |  |        |  |  |   clr.w d0
    946a:	+--|--|--------|--|--|-- bra.s 94da <fileToStack+0x364>
            sH->last = sH->first;
    946c:	|  |  |        |  |  \-> movea.l 128(sp),a0
    9470:	|  |  |        |  |      move.l (a0),d0
    9472:	|  |  |        |  |      movea.l 128(sp),a0
    9476:	|  |  |        |  |      move.l d0,4(a0)
    947a:	|  +--|--------|--|----- bra.w 92e8 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    947e:	|  |  |        |  \----> movea.l 128(sp),a0
    9482:	|  |  |        |         move.l 4(a0),d0
    9486:	|  |  |        |         addq.l #8,d0
    9488:	|  |  |        |         move.l d0,-(sp)
    948a:	|  |  |        |         lea 14(sp),a0
    948e:	|  |  |        |         move.l a0,-(sp)
    9490:	|  |  |        |         jsr f5f4 <addVarToStackQuick>
    9496:	|  |  |        |         addq.l #8,sp
    9498:	|  |  |        |         tst.w d0
    949a:	|  |  |        |     /-- bne.s 94a0 <fileToStack+0x32a>
    949c:	|  |  |        |     |   clr.w d0
    949e:	+--|--|--------|-----|-- bra.s 94da <fileToStack+0x364>
            sH->last = sH->last->next;
    94a0:	|  |  |        |     \-> movea.l 128(sp),a0
    94a4:	|  |  |        |         movea.l 4(a0),a0
    94a8:	|  |  |        |         move.l 8(a0),d0
    94ac:	|  |  |        |         movea.l 128(sp),a0
    94b0:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    94b4:	|  \--|--------|-------- bra.w 92e8 <fileToStack+0x172>
            if (tmp == -1) break;
    94b8:	|     \--------|-------> nop
    94ba:	|              |     /-- bra.s 94be <fileToStack+0x348>
            if (!line) break;
    94bc:	|              \-----|-> nop
        }
    }
    Close(fp);
    94be:	|                    \-> move.l 100(sp),38(sp)
    94c4:	|                        move.l 17b30 <DOSBase>,d0
    94ca:	|                        movea.l d0,a6
    94cc:	|                        move.l 38(sp),d1
    94d0:	|                        jsr -36(a6)
    94d4:	|                        move.l d0,34(sp)
    return TRUE;
    94d8:	|                        moveq #1,d0
}
    94da:	\----------------------> move.l (sp)+,d2
    94dc:	                         movea.l (sp)+,a6
    94de:	                         lea 112(sp),sp
    94e2:	                         rts

000094e4 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    94e4:	          lea -32(sp),sp
    94e8:	          move.l a6,-(sp)
    94ea:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    94ec:	          move.l 44(sp),-(sp)
    94f0:	          jsr 6bc <get2bytes>
    94f6:	          addq.l #4,sp
    94f8:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    94fc:	          move.l 32(sp),d0
    9500:	          addq.l #1,d0
    9502:	          move.l d0,28(sp)
    9506:	          clr.l 24(sp)
    950a:	          move.l 17b28 <SysBase>,d0
    9510:	          movea.l d0,a6
    9512:	          move.l 28(sp),d0
    9516:	          move.l 24(sp),d1
    951a:	          jsr -684(a6)
    951e:	          move.l d0,20(sp)
    9522:	          move.l 20(sp),d0
    9526:	          move.l d0,16(sp)
    if (!s) return NULL;
    952a:	      /-- bne.s 9530 <readStringEncoded+0x4c>
    952c:	      |   moveq #0,d0
    952e:	/-----|-- bra.s 95a0 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    9530:	|     \-> clr.l 36(sp)
    9534:	|     /-- bra.s 9586 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    9536:	|  /--|-> move.l 44(sp),12(sp)
    953c:	|  |  |   move.l 17b30 <DOSBase>,d0
    9542:	|  |  |   movea.l d0,a6
    9544:	|  |  |   move.l 12(sp),d1
    9548:	|  |  |   jsr -306(a6)
    954c:	|  |  |   move.l d0,8(sp)
    9550:	|  |  |   move.l 8(sp),d0
    9554:	|  |  |   move.l d0,d1
    9556:	|  |  |   move.b 17bcc <encode1>,d2
    955c:	|  |  |   move.l 36(sp),d0
    9560:	|  |  |   movea.l 16(sp),a0
    9564:	|  |  |   adda.l d0,a0
    9566:	|  |  |   move.b d1,d0
    9568:	|  |  |   eor.b d2,d0
    956a:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    956c:	|  |  |   move.b 17bcc <encode1>,d0
    9572:	|  |  |   move.b d0,d1
    9574:	|  |  |   move.b 17bcd <encode2>,d0
    957a:	|  |  |   add.b d1,d0
    957c:	|  |  |   move.b d0,17bcc <encode1>
    for (a = 0; a < len; a++) {
    9582:	|  |  |   addq.l #1,36(sp)
    9586:	|  |  \-> move.l 36(sp),d0
    958a:	|  |      cmp.l 32(sp),d0
    958e:	|  \----- blt.s 9536 <readStringEncoded+0x52>
    }
    s[len] = 0;
    9590:	|         move.l 32(sp),d0
    9594:	|         movea.l 16(sp),a0
    9598:	|         adda.l d0,a0
    959a:	|         clr.b (a0)
    return s;
    959c:	|         move.l 16(sp),d0
}
    95a0:	\-------> move.l (sp)+,d2
    95a2:	          movea.l (sp)+,a6
    95a4:	          lea 32(sp),sp
    95a8:	          rts

000095aa <readTextPlain>:

char *readTextPlain(BPTR fp) {
    95aa:	             lea -104(sp),sp
    95ae:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    95b2:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    95b6:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    95bc:	             move.l 124(sp),106(sp)
    95c2:	             clr.l 102(sp)
    95c6:	             clr.l 98(sp)
    95ca:	             move.l 17b30 <DOSBase>,d0
    95d0:	             movea.l d0,a6
    95d2:	             move.l 106(sp),d1
    95d6:	             move.l 102(sp),d2
    95da:	             move.l 98(sp),d3
    95de:	             jsr -66(a6)
    95e2:	             move.l d0,94(sp)
    95e6:	             move.l 94(sp),d0
    95ea:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    95ee:	   /-------- bra.s 9632 <readTextPlain+0x88>
        tmp = FGetC(fp);
    95f0:	/--|-------> move.l 124(sp),22(sp)
    95f6:	|  |         move.l 17b30 <DOSBase>,d0
    95fc:	|  |         movea.l d0,a6
    95fe:	|  |         move.l 22(sp),d1
    9602:	|  |         jsr -306(a6)
    9606:	|  |         move.l d0,18(sp)
    960a:	|  |         move.l 18(sp),d0
    960e:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    9612:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    9618:	|  |         cmpi.b #10,17(sp)
    961e:	|  |  /----- beq.s 9628 <readTextPlain+0x7e>
    9620:	|  |  |      moveq #-1,d0
    9622:	|  |  |      cmp.l 110(sp),d0
    9626:	|  |  |  /-- bne.s 962e <readTextPlain+0x84>
            keepGoing = FALSE;
    9628:	|  |  \--|-> clr.w 114(sp)
    962c:	|  +-----|-- bra.s 9632 <readTextPlain+0x88>
        } else {
            stringSize++;
    962e:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    9632:	|  \-------> tst.w 114(sp)
    9636:	\----------- bne.s 95f0 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    9638:	             tst.l 116(sp)
    963c:	         /-- bne.s 964c <readTextPlain+0xa2>
    963e:	         |   moveq #-1,d0
    9640:	         |   cmp.l 110(sp),d0
    9644:	         +-- bne.s 964c <readTextPlain+0xa2>
        return NULL;
    9646:	         |   moveq #0,d0
    9648:	      /--|-- bra.w 9732 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    964c:	      |  \-> move.l 124(sp),86(sp)
    9652:	      |      move.l 90(sp),82(sp)
    9658:	      |      moveq #-1,d0
    965a:	      |      move.l d0,78(sp)
    965e:	      |      move.l 17b30 <DOSBase>,d0
    9664:	      |      movea.l d0,a6
    9666:	      |      move.l 86(sp),d1
    966a:	      |      move.l 82(sp),d2
    966e:	      |      move.l 78(sp),d3
    9672:	      |      jsr -66(a6)
    9676:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    967a:	      |      move.l 116(sp),d0
    967e:	      |      addq.l #1,d0
    9680:	      |      move.l d0,70(sp)
    9684:	      |      clr.l 66(sp)
    9688:	      |      move.l 17b28 <SysBase>,d0
    968e:	      |      movea.l d0,a6
    9690:	      |      move.l 70(sp),d0
    9694:	      |      move.l 66(sp),d1
    9698:	      |      jsr -684(a6)
    969c:	      |      move.l d0,62(sp)
    96a0:	      |      move.l 62(sp),d0
    96a4:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    96a8:	      |  /-- bne.s 96b0 <readTextPlain+0x106>
    96aa:	      |  |   moveq #0,d0
    96ac:	      +--|-- bra.w 9732 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    96b0:	      |  \-> move.l 124(sp),54(sp)
    96b6:	      |      move.l 58(sp),50(sp)
    96bc:	      |      moveq #1,d0
    96be:	      |      move.l d0,46(sp)
    96c2:	      |      move.l 116(sp),42(sp)
    96c8:	      |      move.l 17b30 <DOSBase>,d0
    96ce:	      |      movea.l d0,a6
    96d0:	      |      move.l 54(sp),d1
    96d4:	      |      move.l 50(sp),d2
    96d8:	      |      move.l 46(sp),d3
    96dc:	      |      move.l 42(sp),d4
    96e0:	      |      jsr -324(a6)
    96e4:	      |      move.l d0,38(sp)
    96e8:	      |      move.l 38(sp),d0
    96ec:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    96f0:	      |      move.l 34(sp),d0
    96f4:	      |      cmp.l 116(sp),d0
    96f8:	      |  /-- beq.s 9708 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    96fa:	      |  |   pea 15201 <incbin_player_end+0x6f5>
    9700:	      |  |   jsr 11d08 <KPrintF>
    9706:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    9708:	      |  \-> move.l 124(sp),30(sp)
    970e:	      |      move.l 17b30 <DOSBase>,d0
    9714:	      |      movea.l d0,a6
    9716:	      |      move.l 30(sp),d1
    971a:	      |      jsr -306(a6)
    971e:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    9722:	      |      move.l 116(sp),d0
    9726:	      |      movea.l 58(sp),a0
    972a:	      |      adda.l d0,a0
    972c:	      |      clr.b (a0)
    }

    return reply;
    972e:	      |      move.l 58(sp),d0
}
    9732:	      \----> movem.l (sp)+,d2-d4/a6
    9736:	             lea 104(sp),sp
    973a:	             rts

0000973c <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    973c:	                      lea -144(sp),sp
    9740:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    9744:	                      move.l 160(sp),148(sp)
    974a:	                      move.l #1006,144(sp)
    9752:	                      move.l 17b30 <DOSBase>,d0
    9758:	                      movea.l d0,a6
    975a:	                      move.l 148(sp),d1
    975e:	                      move.l 144(sp),d2
    9762:	                      jsr -30(a6)
    9766:	                      move.l d0,140(sp)
    976a:	                      move.l 140(sp),d0
    976e:	                      move.l d0,136(sp)

    if (!fp) {
    9772:	                  /-- bne.s 978c <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    9774:	                  |   move.l 160(sp),-(sp)
    9778:	                  |   pea 15222 <incbin_player_end+0x716>
    977e:	                  |   jsr 11d08 <KPrintF>
    9784:	                  |   addq.l #8,sp
        return FALSE;
    9786:	                  |   clr.w d0
    9788:	/-----------------|-- bra.w 9a48 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    978c:	|                 \-> movea.l 164(sp),a0
    9790:	|                     movea.l 4(a0),a0
    9794:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    9798:	|                     move.w 17bce <saveEncoding>,d0
    979e:	|                     move.l d0,d0
    97a0:	|                     move.b d0,17bcc <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    97a6:	|                     move.w 17bce <saveEncoding>,d0
    97ac:	|                     lsr.w #8,d0
    97ae:	|                     move.l d0,d0
    97b0:	|                     move.b d0,17bcd <encode2>

    if (saveEncoding) {
    97b6:	|                     move.w 17bce <saveEncoding>,d0
    97bc:	|                 /-- beq.s 980e <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    97be:	|                 |   move.l 136(sp),116(sp)
    97c4:	|                 |   move.l #86204,112(sp)
    97cc:	|                 |   moveq #99,d0
    97ce:	|                 |   not.b d0
    97d0:	|                 |   add.l sp,d0
    97d2:	|                 |   addi.l #-144,d0
    97d8:	|                 |   move.l d0,108(sp)
    97dc:	|                 |   move.l 17b30 <DOSBase>,d0
    97e2:	|                 |   movea.l d0,a6
    97e4:	|                 |   move.l 116(sp),d1
    97e8:	|                 |   move.l 112(sp),d2
    97ec:	|                 |   move.l 108(sp),d3
    97f0:	|                 |   jsr -354(a6)
    97f4:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    97f8:	|                 |   move.l 136(sp),-(sp)
    97fc:	|                 |   pea 1513b <incbin_player_end+0x62f>
    9802:	|                 |   jsr 9a52 <writeStringEncoded>
    9808:	|                 |   addq.l #8,sp
    980a:	|  /--------------|-- bra.w 9a20 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    980e:	|  |              \-> move.l 136(sp),132(sp)
    9814:	|  |                  move.l #86230,128(sp)
    981c:	|  |                  moveq #99,d1
    981e:	|  |                  not.b d1
    9820:	|  |                  add.l sp,d1
    9822:	|  |                  addi.l #-144,d1
    9828:	|  |                  move.l d1,124(sp)
    982c:	|  |                  move.l 17b30 <DOSBase>,d0
    9832:	|  |                  movea.l d0,a6
    9834:	|  |                  move.l 132(sp),d1
    9838:	|  |                  move.l 128(sp),d2
    983c:	|  |                  move.l 124(sp),d3
    9840:	|  |                  jsr -354(a6)
    9844:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    9848:	|  +----------------- bra.w 9a20 <stackToFile+0x2e4>
        if (saveEncoding) {
    984c:	|  |  /-------------> move.w 17bce <saveEncoding>,d0
    9852:	|  |  |     /-------- beq.w 99a4 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    9856:	|  |  |     |         movea.l 152(sp),a0
    985a:	|  |  |     |         move.l (a0),d0
    985c:	|  |  |     |         moveq #1,d1
    985e:	|  |  |     |         cmp.l d0,d1
    9860:	|  |  |     |     /-- beq.s 98b0 <stackToFile+0x174>
    9862:	|  |  |     |     |   moveq #3,d1
    9864:	|  |  |     |     |   cmp.l d0,d1
    9866:	|  |  |     |  /--|-- bne.w 9972 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    986a:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    9870:	|  |  |     |  |  |   move.b 17bcc <encode1>,d0
    9876:	|  |  |     |  |  |   ext.w d0
    9878:	|  |  |     |  |  |   movea.w d0,a0
    987a:	|  |  |     |  |  |   move.l a0,72(sp)
    987e:	|  |  |     |  |  |   move.l 17b30 <DOSBase>,d0
    9884:	|  |  |     |  |  |   movea.l d0,a6
    9886:	|  |  |     |  |  |   move.l 76(sp),d1
    988a:	|  |  |     |  |  |   move.l 72(sp),d2
    988e:	|  |  |     |  |  |   jsr -312(a6)
    9892:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    9896:	|  |  |     |  |  |   movea.l 152(sp),a0
    989a:	|  |  |     |  |  |   move.l 4(a0),d0
    989e:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    98a2:	|  |  |     |  |  |   move.l d0,-(sp)
    98a4:	|  |  |     |  |  |   jsr 9a52 <writeStringEncoded>
    98aa:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    98ac:	|  |  |  /--|--|--|-- bra.w 9a16 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    98b0:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    98b4:	|  |  |  |  |  |      move.l 4(a0),d0
    98b8:	|  |  |  |  |  |  /-- bmi.s 9928 <stackToFile+0x1ec>
    98ba:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    98be:	|  |  |  |  |  |  |   move.l 4(a0),d0
    98c2:	|  |  |  |  |  |  |   cmpi.l #255,d0
    98c8:	|  |  |  |  |  |  +-- bgt.s 9928 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    98ca:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    98d0:	|  |  |  |  |  |  |   move.b 17bcc <encode1>,d0
    98d6:	|  |  |  |  |  |  |   eori.b #2,d0
    98da:	|  |  |  |  |  |  |   ext.w d0
    98dc:	|  |  |  |  |  |  |   movea.w d0,a0
    98de:	|  |  |  |  |  |  |   move.l a0,60(sp)
    98e2:	|  |  |  |  |  |  |   move.l 17b30 <DOSBase>,d0
    98e8:	|  |  |  |  |  |  |   movea.l d0,a6
    98ea:	|  |  |  |  |  |  |   move.l 64(sp),d1
    98ee:	|  |  |  |  |  |  |   move.l 60(sp),d2
    98f2:	|  |  |  |  |  |  |   jsr -312(a6)
    98f6:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    98fa:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    9900:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    9904:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    990a:	|  |  |  |  |  |  |   move.l 17b30 <DOSBase>,d0
    9910:	|  |  |  |  |  |  |   movea.l d0,a6
    9912:	|  |  |  |  |  |  |   move.l 52(sp),d1
    9916:	|  |  |  |  |  |  |   move.l 48(sp),d2
    991a:	|  |  |  |  |  |  |   jsr -312(a6)
    991e:	|  |  |  |  |  |  |   move.l d0,44(sp)
    9922:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    9924:	|  |  |  +--|--|--|-- bra.w 9a16 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    9928:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    992e:	|  |  |  |  |  |      move.b 17bcc <encode1>,d0
    9934:	|  |  |  |  |  |      eori.b #1,d0
    9938:	|  |  |  |  |  |      ext.w d0
    993a:	|  |  |  |  |  |      movea.w d0,a0
    993c:	|  |  |  |  |  |      move.l a0,36(sp)
    9940:	|  |  |  |  |  |      move.l 17b30 <DOSBase>,d0
    9946:	|  |  |  |  |  |      movea.l d0,a6
    9948:	|  |  |  |  |  |      move.l 40(sp),d1
    994c:	|  |  |  |  |  |      move.l 36(sp),d2
    9950:	|  |  |  |  |  |      jsr -312(a6)
    9954:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    9958:	|  |  |  |  |  |      movea.l 152(sp),a0
    995c:	|  |  |  |  |  |      move.l 4(a0),d0
    9960:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    9964:	|  |  |  |  |  |      move.l d0,-(sp)
    9966:	|  |  |  |  |  |      jsr 958 <put4bytes>
    996c:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    996e:	|  |  |  +--|--|----- bra.w 9a16 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    9972:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    9976:	|  |  |  |  |         pea 15234 <incbin_player_end+0x728>
    997c:	|  |  |  |  |         jsr 11d08 <KPrintF>
    9982:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    9984:	|  |  |  |  |         move.l 136(sp),28(sp)
    998a:	|  |  |  |  |         move.l 17b30 <DOSBase>,d0
    9990:	|  |  |  |  |         movea.l d0,a6
    9992:	|  |  |  |  |         move.l 28(sp),d1
    9996:	|  |  |  |  |         jsr -36(a6)
    999a:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    999e:	|  |  |  |  |         clr.w d0
    99a0:	+--|--|--|--|-------- bra.w 9a48 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    99a4:	|  |  |  |  \-------> move.l 152(sp),d0
    99a8:	|  |  |  |            move.l d0,-(sp)
    99aa:	|  |  |  |            jsr 10308 <getTextFromAnyVar>
    99b0:	|  |  |  |            addq.l #4,sp
    99b2:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    99b6:	|  |  |  |     /----- beq.s 9a2a <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    99b8:	|  |  |  |     |      movea.l 100(sp),a0
    99bc:	|  |  |  |     |      move.b (a0),d0
    99be:	|  |  |  |     |      ext.w d0
    99c0:	|  |  |  |     |      movea.w d0,a0
    99c2:	|  |  |  |     |      move.l a0,12(sp)
    99c6:	|  |  |  |     |      move.l 136(sp),96(sp)
    99cc:	|  |  |  |     |      move.l #86672,92(sp)
    99d4:	|  |  |  |     |      moveq #99,d0
    99d6:	|  |  |  |     |      not.b d0
    99d8:	|  |  |  |     |      add.l sp,d0
    99da:	|  |  |  |     |      addi.l #-144,d0
    99e0:	|  |  |  |     |      move.l d0,88(sp)
    99e4:	|  |  |  |     |      move.l 17b30 <DOSBase>,d0
    99ea:	|  |  |  |     |      movea.l d0,a6
    99ec:	|  |  |  |     |      move.l 96(sp),d1
    99f0:	|  |  |  |     |      move.l 92(sp),d2
    99f4:	|  |  |  |     |      move.l 88(sp),d3
    99f8:	|  |  |  |     |      jsr -354(a6)
    99fc:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    9a00:	|  |  |  |     |      move.l 100(sp),80(sp)
    9a06:	|  |  |  |     |      move.l 17b28 <SysBase>,d0
    9a0c:	|  |  |  |     |      movea.l d0,a6
    9a0e:	|  |  |  |     |      movea.l 80(sp),a1
    9a12:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    9a16:	|  |  |  \-----|----> movea.l 152(sp),a0
    9a1a:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    9a20:	|  \--|--------|----> tst.l 152(sp)
    9a24:	|     \--------|----- bne.w 984c <stackToFile+0x110>
    9a28:	|              |  /-- bra.s 9a2c <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    9a2a:	|              \--|-> nop
    }
    Close(fp);
    9a2c:	|                 \-> move.l 136(sp),20(sp)
    9a32:	|                     move.l 17b30 <DOSBase>,d0
    9a38:	|                     movea.l d0,a6
    9a3a:	|                     move.l 20(sp),d1
    9a3e:	|                     jsr -36(a6)
    9a42:	|                     move.l d0,16(sp)
    return TRUE;
    9a46:	|                     moveq #1,d0
}
    9a48:	\-------------------> movem.l (sp)+,d2-d3/a6
    9a4c:	                      lea 144(sp),sp
    9a50:	                      rts

00009a52 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    9a52:	       lea -20(sp),sp
    9a56:	       move.l a6,-(sp)
    9a58:	       move.l d2,-(sp)
	int a, len = strlen (s);
    9a5a:	       move.l 32(sp),-(sp)
    9a5e:	       jsr f21e <strlen>
    9a64:	       addq.l #4,sp
    9a66:	       move.l d0,20(sp)

	put2bytes (len, fp);
    9a6a:	       move.l 36(sp),-(sp)
    9a6e:	       move.l 24(sp),-(sp)
    9a72:	       jsr 8d0 <put2bytes>
    9a78:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    9a7a:	       clr.l 24(sp)
    9a7e:	   /-- bra.s 9ad4 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    9a80:	/--|-> move.l 36(sp),16(sp)
    9a86:	|  |   move.l 24(sp),d0
    9a8a:	|  |   movea.l 32(sp),a0
    9a8e:	|  |   adda.l d0,a0
    9a90:	|  |   move.b (a0),d1
    9a92:	|  |   move.b 17bcc <encode1>,d0
    9a98:	|  |   eor.b d1,d0
    9a9a:	|  |   ext.w d0
    9a9c:	|  |   movea.w d0,a0
    9a9e:	|  |   move.l a0,12(sp)
    9aa2:	|  |   move.l 17b30 <DOSBase>,d0
    9aa8:	|  |   movea.l d0,a6
    9aaa:	|  |   move.l 16(sp),d1
    9aae:	|  |   move.l 12(sp),d2
    9ab2:	|  |   jsr -312(a6)
    9ab6:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    9aba:	|  |   move.b 17bcc <encode1>,d0
    9ac0:	|  |   move.b d0,d1
    9ac2:	|  |   move.b 17bcd <encode2>,d0
    9ac8:	|  |   add.b d1,d0
    9aca:	|  |   move.b d0,17bcc <encode1>
	for (a = 0; a < len; a ++) {
    9ad0:	|  |   addq.l #1,24(sp)
    9ad4:	|  \-> move.l 24(sp),d0
    9ad8:	|      cmp.l 20(sp),d0
    9adc:	\----- blt.s 9a80 <writeStringEncoded+0x2e>
	}
}
    9ade:	       nop
    9ae0:	       nop
    9ae2:	       move.l (sp)+,d2
    9ae4:	       movea.l (sp)+,a6
    9ae6:	       lea 20(sp),sp
    9aea:	       rts

00009aec <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    9aec:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    9aee:	                   tst.l 8(sp)
    9af2:	               /-- bne.s 9af8 <failSecurityCheck+0xc>
    9af4:	               |   moveq #1,d0
    9af6:	/--------------|-- bra.s 9b76 <failSecurityCheck+0x8a>

	int a = 0;
    9af8:	|              \-> clr.l (sp)

	while (fn[a]) {
    9afa:	|     /----------- bra.s 9b68 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    9afc:	|  /--|----------> move.l (sp),d0
    9afe:	|  |  |            movea.l 8(sp),a0
    9b02:	|  |  |            adda.l d0,a0
    9b04:	|  |  |            move.b (a0),d0
    9b06:	|  |  |            ext.w d0
    9b08:	|  |  |            movea.w d0,a0
    9b0a:	|  |  |            moveq #124,d0
    9b0c:	|  |  |            cmp.l a0,d0
    9b0e:	|  |  |     /----- beq.s 9b50 <failSecurityCheck+0x64>
    9b10:	|  |  |     |      moveq #124,d1
    9b12:	|  |  |     |      cmp.l a0,d1
    9b14:	|  |  |  /--|----- blt.s 9b66 <failSecurityCheck+0x7a>
    9b16:	|  |  |  |  |      moveq #92,d0
    9b18:	|  |  |  |  |      cmp.l a0,d0
    9b1a:	|  |  |  |  +----- beq.s 9b50 <failSecurityCheck+0x64>
    9b1c:	|  |  |  |  |      moveq #92,d1
    9b1e:	|  |  |  |  |      cmp.l a0,d1
    9b20:	|  |  |  +--|----- blt.s 9b66 <failSecurityCheck+0x7a>
    9b22:	|  |  |  |  |      moveq #60,d0
    9b24:	|  |  |  |  |      cmp.l a0,d0
    9b26:	|  |  |  |  |  /-- blt.s 9b46 <failSecurityCheck+0x5a>
    9b28:	|  |  |  |  |  |   moveq #34,d1
    9b2a:	|  |  |  |  |  |   cmp.l a0,d1
    9b2c:	|  |  |  +--|--|-- bgt.s 9b66 <failSecurityCheck+0x7a>
    9b2e:	|  |  |  |  |  |   moveq #-34,d1
    9b30:	|  |  |  |  |  |   add.l a0,d1
    9b32:	|  |  |  |  |  |   move.l #83894529,d0
    9b38:	|  |  |  |  |  |   lsr.l d1,d0
    9b3a:	|  |  |  |  |  |   moveq #1,d1
    9b3c:	|  |  |  |  |  |   and.l d1,d0
    9b3e:	|  |  |  |  |  |   sne d0
    9b40:	|  |  |  |  |  |   neg.b d0
    9b42:	|  |  |  |  +--|-- bne.s 9b50 <failSecurityCheck+0x64>
    9b44:	|  |  |  +--|--|-- bra.s 9b66 <failSecurityCheck+0x7a>
    9b46:	|  |  |  |  |  \-> lea -62(a0),a0
    9b4a:	|  |  |  |  |      moveq #1,d0
    9b4c:	|  |  |  |  |      cmp.l a0,d0
    9b4e:	|  |  |  +--|----- bcs.s 9b66 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    9b50:	|  |  |  |  \----> move.l 8(sp),-(sp)
    9b54:	|  |  |  |         pea 15294 <incbin_player_end+0x788>
    9b5a:	|  |  |  |         jsr 11d08 <KPrintF>
    9b60:	|  |  |  |         addq.l #8,sp
				return TRUE;
    9b62:	|  |  |  |         moveq #1,d0
    9b64:	+--|--|--|-------- bra.s 9b76 <failSecurityCheck+0x8a>
		}
		a++;
    9b66:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    9b68:	|  |  \----------> move.l (sp),d0
    9b6a:	|  |               movea.l 8(sp),a0
    9b6e:	|  |               adda.l d0,a0
    9b70:	|  |               move.b (a0),d0
    9b72:	|  \-------------- bne.s 9afc <failSecurityCheck+0x10>
	}
	return FALSE;
    9b74:	|                  clr.w d0
}
    9b76:	\----------------> addq.l #4,sp
    9b78:	                   rts

00009b7a <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    9b7a:	             lea -24(sp),sp
    9b7e:	             move.l a6,-(sp)
    9b80:	             move.l 40(sp),d0
    9b84:	             move.w d0,d0
    9b86:	             move.w d0,6(sp)
	int fileNum = -1;
    9b8a:	             moveq #-1,d0
    9b8c:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    9b90:	             jsr 3354 <killSpeechTimers>

	switch (numParams) {
    9b96:	             moveq #2,d0
    9b98:	             cmp.l 32(sp),d0
    9b9c:	      /----- beq.s 9be0 <sayCore+0x66>
    9b9e:	      |      moveq #3,d0
    9ba0:	      |      cmp.l 32(sp),d0
    9ba4:	/-----|----- bne.w 9cc2 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    9ba8:	|     |      movea.l 36(sp),a0
    9bac:	|     |      move.l 24(a0),d0
    9bb0:	|     |      move.l d0,-(sp)
    9bb2:	|     |      pea 5 <_start+0x5>
    9bb6:	|     |      lea 20(sp),a0
    9bba:	|     |      move.l a0,-(sp)
    9bbc:	|     |      jsr fd32 <getValueType>
    9bc2:	|     |      lea 12(sp),sp
    9bc6:	|     |      tst.w d0
    9bc8:	|     |  /-- bne.s 9bd0 <sayCore+0x56>
    9bca:	|     |  |   moveq #1,d0
    9bcc:	|  /--|--|-- bra.w 9cd2 <sayCore+0x158>
			trimStack (&fun -> stack);
    9bd0:	|  |  |  \-> moveq #24,d0
    9bd2:	|  |  |      add.l 36(sp),d0
    9bd6:	|  |  |      move.l d0,-(sp)
    9bd8:	|  |  |      jsr 10694 <trimStack>
    9bde:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    9be0:	|  |  \----> movea.l 36(sp),a0
    9be4:	|  |         move.l 24(a0),d0
    9be8:	|  |         move.l d0,-(sp)
    9bea:	|  |         jsr 10308 <getTextFromAnyVar>
    9bf0:	|  |         addq.l #4,sp
    9bf2:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    9bf6:	|  |     /-- bne.s 9bfe <sayCore+0x84>
    9bf8:	|  |     |   moveq #1,d0
    9bfa:	|  +-----|-- bra.w 9cd2 <sayCore+0x158>
			trimStack (&fun -> stack);
    9bfe:	|  |     \-> moveq #24,d0
    9c00:	|  |         add.l 36(sp),d0
    9c04:	|  |         move.l d0,-(sp)
    9c06:	|  |         jsr 10694 <trimStack>
    9c0c:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    9c0e:	|  |         movea.l 36(sp),a0
    9c12:	|  |         move.l 24(a0),d0
    9c16:	|  |         move.l d0,-(sp)
    9c18:	|  |         pea 7 <_start+0x7>
    9c1c:	|  |         lea 16(sp),a0
    9c20:	|  |         move.l a0,-(sp)
    9c22:	|  |         jsr fd32 <getValueType>
    9c28:	|  |         lea 12(sp),sp
    9c2c:	|  |         tst.w d0
    9c2e:	|  |     /-- bne.s 9c36 <sayCore+0xbc>
    9c30:	|  |     |   moveq #1,d0
    9c32:	|  +-----|-- bra.w 9cd2 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    9c36:	|  |     \-> movea.l 36(sp),a0
    9c3a:	|  |         move.l 24(a0),d0
    9c3e:	|  |         move.l d0,-(sp)
    9c40:	|  |         pea 7 <_start+0x7>
    9c44:	|  |         lea 16(sp),a0
    9c48:	|  |         move.l a0,-(sp)
    9c4a:	|  |         jsr fd32 <getValueType>
    9c50:	|  |         lea 12(sp),sp
    9c54:	|  |         tst.w d0
    9c56:	|  |     /-- bne.s 9c5c <sayCore+0xe2>
    9c58:	|  |     |   moveq #1,d0
    9c5a:	|  +-----|-- bra.s 9cd2 <sayCore+0x158>
			trimStack (&fun -> stack);
    9c5c:	|  |     \-> moveq #24,d0
    9c5e:	|  |         add.l 36(sp),d0
    9c62:	|  |         move.l d0,-(sp)
    9c64:	|  |         jsr 10694 <trimStack>
    9c6a:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    9c6c:	|  |         movea.w 6(sp),a0
    9c70:	|  |         move.l 12(sp),d1
    9c74:	|  |         move.l 8(sp),d0
    9c78:	|  |         move.l a0,-(sp)
    9c7a:	|  |         move.l d1,-(sp)
    9c7c:	|  |         move.l d0,-(sp)
    9c7e:	|  |         move.l 36(sp),-(sp)
    9c82:	|  |         jsr 5014 <wrapSpeech>
    9c88:	|  |         lea 16(sp),sp
    9c8c:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    9c90:	|  |         movea.l 36(sp),a0
    9c94:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    9c9a:	|  |         movea.l 36(sp),a0
    9c9e:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    9ca4:	|  |         move.l 24(sp),16(sp)
    9caa:	|  |         move.l 17b28 <SysBase>,d0
    9cb0:	|  |         movea.l d0,a6
    9cb2:	|  |         movea.l 16(sp),a1
    9cb6:	|  |         jsr -690(a6)
			newText = NULL;
    9cba:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    9cbe:	|  |         moveq #0,d0
    9cc0:	|  +-------- bra.s 9cd2 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    9cc2:	\--|-------> pea 1531a <incbin_player_end+0x80e>
    9cc8:	   |         jsr 11d08 <KPrintF>
    9cce:	   |         addq.l #4,sp
	return BR_ERROR;
    9cd0:	   |         moveq #1,d0
}
    9cd2:	   \-------> movea.l (sp)+,a6
    9cd4:	             lea 24(sp),sp
    9cd8:	             rts

00009cda <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    9cda:	pea 1 <_start+0x1>
    9cde:	move.l 12(sp),-(sp)
    9ce2:	move.l 12(sp),-(sp)
    9ce6:	jsr 9b7a <sayCore>
    9cec:	lea 12(sp),sp
}
    9cf0:	rts

00009cf2 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    9cf2:	clr.l -(sp)
    9cf4:	move.l 12(sp),-(sp)
    9cf8:	move.l 12(sp),-(sp)
    9cfc:	jsr 9b7a <sayCore>
    9d02:	lea 12(sp),sp
}
    9d06:	rts

00009d08 <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    9d08:	moveq #2,d0
}
    9d0a:	rts

00009d0c <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    9d0c:	moveq #2,d0
}
    9d0e:	rts

00009d10 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    9d10:	nop
    9d12:	rts

00009d14 <builtIn_setCursor>:

builtIn(setCursor)
{
    9d14:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    9d16:	movea.l 12(sp),a0
    9d1a:	move.l 24(a0),d0
    9d1e:	move.l d0,-(sp)
    9d20:	jsr 1020a <getAnimationFromVar>
    9d26:	addq.l #4,sp
    9d28:	move.l d0,(sp)
	pickAnimCursor (aa);
    9d2a:	move.l (sp),-(sp)
    9d2c:	jsr dba <pickAnimCursor>
    9d32:	addq.l #4,sp
	trimStack (&fun -> stack);
    9d34:	moveq #24,d0
    9d36:	add.l 12(sp),d0
    9d3a:	move.l d0,-(sp)
    9d3c:	jsr 10694 <trimStack>
    9d42:	addq.l #4,sp
	return BR_CONTINUE;
    9d44:	moveq #2,d0
}
    9d46:	addq.l #4,sp
    9d48:	rts

00009d4a <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    9d4a:	move.l 17ae8 <input+0xa>,d1
    9d50:	move.l 17bd0 <cameraX>,d0
    9d56:	add.l d0,d1
    9d58:	moveq #28,d0
    9d5a:	add.l 8(sp),d0
    9d5e:	move.l d1,-(sp)
    9d60:	pea 1 <_start+0x1>
    9d64:	move.l d0,-(sp)
    9d66:	jsr 10602 <setVariable>
    9d6c:	lea 12(sp),sp
	return BR_CONTINUE;
    9d70:	moveq #2,d0
}
    9d72:	rts

00009d74 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    9d74:	move.l 17aec <input+0xe>,d1
    9d7a:	move.l 17bd4 <cameraY>,d0
    9d80:	add.l d0,d1
    9d82:	moveq #28,d0
    9d84:	add.l 8(sp),d0
    9d88:	move.l d1,-(sp)
    9d8a:	pea 1 <_start+0x1>
    9d8e:	move.l d0,-(sp)
    9d90:	jsr 10602 <setVariable>
    9d96:	lea 12(sp),sp
	return BR_CONTINUE;
    9d9a:	moveq #2,d0
}
    9d9c:	rts

00009d9e <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    9d9e:	move.l 17ae8 <input+0xa>,d0
    9da4:	move.l d0,-(sp)
    9da6:	jsr 12160 <__floatsisf>
    9dac:	addq.l #4,sp
    9dae:	move.l d0,d1
    9db0:	move.l 16032 <cameraZoom>,d0
    9db6:	move.l d0,-(sp)
    9db8:	move.l d1,-(sp)
    9dba:	jsr 12212 <__mulsf3>
    9dc0:	addq.l #8,sp
    9dc2:	move.l d0,-(sp)
    9dc4:	jsr 120f8 <__fixsfsi>
    9dca:	addq.l #4,sp
    9dcc:	move.l d0,d1
    9dce:	moveq #28,d0
    9dd0:	add.l 8(sp),d0
    9dd4:	move.l d1,-(sp)
    9dd6:	pea 1 <_start+0x1>
    9dda:	move.l d0,-(sp)
    9ddc:	jsr 10602 <setVariable>
    9de2:	lea 12(sp),sp
	return BR_CONTINUE;
    9de6:	moveq #2,d0
}
    9de8:	rts

00009dea <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    9dea:	move.l 17aec <input+0xe>,d0
    9df0:	move.l d0,-(sp)
    9df2:	jsr 12160 <__floatsisf>
    9df8:	addq.l #4,sp
    9dfa:	move.l d0,d1
    9dfc:	move.l 16032 <cameraZoom>,d0
    9e02:	move.l d0,-(sp)
    9e04:	move.l d1,-(sp)
    9e06:	jsr 12212 <__mulsf3>
    9e0c:	addq.l #8,sp
    9e0e:	move.l d0,-(sp)
    9e10:	jsr 120f8 <__fixsfsi>
    9e16:	addq.l #4,sp
    9e18:	move.l d0,d1
    9e1a:	moveq #28,d0
    9e1c:	add.l 8(sp),d0
    9e20:	move.l d1,-(sp)
    9e22:	pea 1 <_start+0x1>
    9e26:	move.l d0,-(sp)
    9e28:	jsr 10602 <setVariable>
    9e2e:	lea 12(sp),sp
	return BR_CONTINUE;
    9e32:	moveq #2,d0
}
    9e34:	rts

00009e36 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    9e36:	jsr 4ac8 <statusBarText>
    9e3c:	move.l d0,d1
    9e3e:	moveq #28,d0
    9e40:	add.l 8(sp),d0
    9e44:	move.l d1,-(sp)
    9e46:	move.l d0,-(sp)
    9e48:	jsr ff54 <makeTextVar>
    9e4e:	addq.l #8,sp
	return BR_CONTINUE;
    9e50:	moveq #2,d0
}
    9e52:	rts

00009e54 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    9e54:	       lea -20(sp),sp
    9e58:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    9e5a:	       movea.l 32(sp),a0
    9e5e:	       move.l 24(a0),d0
    9e62:	       move.l d0,-(sp)
    9e64:	       jsr 10308 <getTextFromAnyVar>
    9e6a:	       addq.l #4,sp
    9e6c:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    9e70:	   /-- bne.s 9e78 <builtIn_getMatchingFiles+0x24>
    9e72:	   |   moveq #1,d0
    9e74:	/--|-- bra.w 9f3a <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    9e78:	|  \-> moveq #24,d0
    9e7a:	|      add.l 32(sp),d0
    9e7e:	|      move.l d0,-(sp)
    9e80:	|      jsr 10694 <trimStack>
    9e86:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    9e88:	|      moveq #28,d0
    9e8a:	|      add.l 32(sp),d0
    9e8e:	|      move.l d0,-(sp)
    9e90:	|      jsr ff80 <unlinkVar>
    9e96:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    9e98:	|      movea.l 32(sp),a0
    9e9c:	|      moveq #6,d0
    9e9e:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    9ea2:	|      moveq #12,d0
    9ea4:	|      move.l d0,16(sp)
    9ea8:	|      clr.l 12(sp)
    9eac:	|      move.l 17b28 <SysBase>,d0
    9eb2:	|      movea.l d0,a6
    9eb4:	|      move.l 16(sp),d0
    9eb8:	|      move.l 12(sp),d1
    9ebc:	|      jsr -684(a6)
    9ec0:	|      move.l d0,8(sp)
    9ec4:	|      move.l 8(sp),d0
    9ec8:	|      movea.l 32(sp),a0
    9ecc:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    9ed0:	|      moveq #32,d0
    9ed2:	|      add.l 32(sp),d0
    9ed6:	|  /-- bne.s 9edc <builtIn_getMatchingFiles+0x88>
    9ed8:	|  |   moveq #1,d0
    9eda:	+--|-- bra.s 9f3a <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    9edc:	|  \-> movea.l 32(sp),a0
    9ee0:	|      movea.l 32(a0),a0
    9ee4:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    9ee6:	|      movea.l 32(sp),a0
    9eea:	|      movea.l 32(a0),a0
    9eee:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    9ef2:	|      movea.l 32(sp),a0
    9ef6:	|      movea.l 32(a0),a0
    9efa:	|      moveq #1,d0
    9efc:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    9f00:	|      movea.l 32(sp),a0
    9f04:	|      move.l 32(a0),d0
    9f08:	|      move.l 20(sp),-(sp)
    9f0c:	|      move.l d0,-(sp)
    9f0e:	|      jsr faee <getSavedGamesStack>
    9f14:	|      addq.l #8,sp
    9f16:	|      tst.w d0
    9f18:	|  /-- bne.s 9f1e <builtIn_getMatchingFiles+0xca>
    9f1a:	|  |   moveq #1,d0
    9f1c:	+--|-- bra.s 9f3a <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    9f1e:	|  \-> move.l 20(sp),4(sp)
    9f24:	|      move.l 17b28 <SysBase>,d0
    9f2a:	|      movea.l d0,a6
    9f2c:	|      movea.l 4(sp),a1
    9f30:	|      jsr -690(a6)
	newText = NULL;
    9f34:	|      clr.l 20(sp)
	return BR_CONTINUE;
    9f38:	|      moveq #2,d0
}
    9f3a:	\----> movea.l (sp)+,a6
    9f3c:	       lea 20(sp),sp
    9f40:	       rts

00009f42 <builtIn_saveGame>:

builtIn(saveGame)
{
    9f42:	       lea -12(sp),sp
    9f46:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    9f48:	       movea.l 24(sp),a0
    9f4c:	       move.l 24(a0),d0
    9f50:	       move.l d0,-(sp)
    9f52:	       jsr 10308 <getTextFromAnyVar>
    9f58:	       addq.l #4,sp
    9f5a:	       move.l d0,17af4 <loadNow>
    trimStack(&fun->stack);
    9f60:	       moveq #24,d0
    9f62:	       add.l 24(sp),d0
    9f66:	       move.l d0,-(sp)
    9f68:	       jsr 10694 <trimStack>
    9f6e:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    9f70:	       move.l 17af4 <loadNow>,d0
    9f76:	       move.l d0,-(sp)
    9f78:	       jsr 2fe <encodeFilename>
    9f7e:	       addq.l #4,sp
    9f80:	       move.l d0,12(sp)
    FreeVec(loadNow);
    9f84:	       move.l 17af4 <loadNow>,8(sp)
    9f8c:	       move.l 17b28 <SysBase>,d0
    9f92:	       movea.l d0,a6
    9f94:	       movea.l 8(sp),a1
    9f98:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    9f9c:	       move.l 12(sp),-(sp)
    9fa0:	       jsr 9aec <failSecurityCheck>
    9fa6:	       addq.l #4,sp
    9fa8:	       tst.w d0
    9faa:	   /-- beq.s 9fb0 <builtIn_saveGame+0x6e>
    9fac:	   |   moveq #1,d0
    9fae:	/--|-- bra.s a000 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    9fb0:	|  \-> move.l 12(sp),-(sp)
    9fb4:	|      pea 15348 <incbin_player_end+0x83c>
    9fba:	|      jsr f25e <joinStrings>
    9fc0:	|      addq.l #8,sp
    9fc2:	|      move.l d0,17af4 <loadNow>
    FreeVec(aaaaa);
    9fc8:	|      move.l 12(sp),4(sp)
    9fce:	|      move.l 17b28 <SysBase>,d0
    9fd4:	|      movea.l d0,a6
    9fd6:	|      movea.l 4(sp),a1
    9fda:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    9fde:	|      moveq #28,d0
    9fe0:	|      add.l 24(sp),d0
    9fe4:	|      clr.l -(sp)
    9fe6:	|      pea 1 <_start+0x1>
    9fea:	|      move.l d0,-(sp)
    9fec:	|      jsr 10602 <setVariable>
    9ff2:	|      lea 12(sp),sp
    saverFunc = fun;
    9ff6:	|      move.l 24(sp),17be0 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    9ffe:	|      moveq #0,d0
}
    a000:	\----> movea.l (sp)+,a6
    a002:	       lea 12(sp),sp
    a006:	       rts

0000a008 <builtIn_fileExists>:

builtIn(fileExists)
{
    a008:	       lea -36(sp),sp
    a00c:	       move.l a6,-(sp)
    a00e:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    a010:	       movea.l 52(sp),a0
    a014:	       move.l 24(a0),d0
    a018:	       move.l d0,-(sp)
    a01a:	       jsr 10308 <getTextFromAnyVar>
    a020:	       addq.l #4,sp
    a022:	       move.l d0,17af4 <loadNow>
    trimStack(&fun->stack);
    a028:	       moveq #24,d0
    a02a:	       add.l 52(sp),d0
    a02e:	       move.l d0,-(sp)
    a030:	       jsr 10694 <trimStack>
    a036:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    a038:	       move.l 17af4 <loadNow>,d0
    a03e:	       move.l d0,-(sp)
    a040:	       jsr 2fe <encodeFilename>
    a046:	       addq.l #4,sp
    a048:	       move.l d0,40(sp)
    FreeVec(loadNow);
    a04c:	       move.l 17af4 <loadNow>,36(sp)
    a054:	       move.l 17b28 <SysBase>,d0
    a05a:	       movea.l d0,a6
    a05c:	       movea.l 36(sp),a1
    a060:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    a064:	       move.l 40(sp),-(sp)
    a068:	       jsr 9aec <failSecurityCheck>
    a06e:	       addq.l #4,sp
    a070:	       tst.w d0
    a072:	   /-- beq.s a07a <builtIn_fileExists+0x72>
    a074:	   |   moveq #1,d0
    a076:	/--|-- bra.w a11a <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    a07a:	|  \-> move.l 40(sp),32(sp)
    a080:	|      move.l #1005,28(sp)
    a088:	|      move.l 17b30 <DOSBase>,d0
    a08e:	|      movea.l d0,a6
    a090:	|      move.l 32(sp),d1
    a094:	|      move.l 28(sp),d2
    a098:	|      jsr -30(a6)
    a09c:	|      move.l d0,24(sp)
    a0a0:	|      move.l 24(sp),d0
    a0a4:	|      move.l d0,20(sp)
    if (!fp) {        
    a0a8:	|  /-- bne.s a0b8 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    a0aa:	|  |   pea 1534a <incbin_player_end+0x83e>
    a0b0:	|  |   jsr 11d08 <KPrintF>
    a0b6:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    a0b8:	|  \-> tst.l 20(sp)
    a0bc:	|      sne d0
    a0be:	|      neg.b d0
    a0c0:	|      moveq #0,d1
    a0c2:	|      move.b d0,d1
    a0c4:	|      moveq #28,d0
    a0c6:	|      add.l 52(sp),d0
    a0ca:	|      move.l d1,-(sp)
    a0cc:	|      pea 1 <_start+0x1>
    a0d0:	|      move.l d0,-(sp)
    a0d2:	|      jsr 10602 <setVariable>
    a0d8:	|      lea 12(sp),sp
    if (fp) Close(fp);
    a0dc:	|      tst.l 20(sp)
    a0e0:	|  /-- beq.s a0fc <builtIn_fileExists+0xf4>
    a0e2:	|  |   move.l 20(sp),16(sp)
    a0e8:	|  |   move.l 17b30 <DOSBase>,d0
    a0ee:	|  |   movea.l d0,a6
    a0f0:	|  |   move.l 16(sp),d1
    a0f4:	|  |   jsr -36(a6)
    a0f8:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    a0fc:	|  \-> move.l 40(sp),8(sp)
    a102:	|      move.l 17b28 <SysBase>,d0
    a108:	|      movea.l d0,a6
    a10a:	|      movea.l 8(sp),a1
    a10e:	|      jsr -690(a6)
    loadNow = NULL;
    a112:	|      clr.l 17af4 <loadNow>
    return BR_CONTINUE;
    a118:	|      moveq #2,d0
}
    a11a:	\----> move.l (sp)+,d2
    a11c:	       movea.l (sp)+,a6
    a11e:	       lea 36(sp),sp
    a122:	       rts

0000a124 <builtIn_loadGame>:

builtIn(loadGame)
{
    a124:	       lea -36(sp),sp
    a128:	       move.l a6,-(sp)
    a12a:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    a12c:	       movea.l 52(sp),a0
    a130:	       move.l 24(a0),d0
    a134:	       move.l d0,-(sp)
    a136:	       jsr 10308 <getTextFromAnyVar>
    a13c:	       addq.l #4,sp
    a13e:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    a142:	       moveq #24,d0
    a144:	       add.l 52(sp),d0
    a148:	       move.l d0,-(sp)
    a14a:	       jsr 10694 <trimStack>
    a150:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    a152:	       move.l 40(sp),-(sp)
    a156:	       jsr 2fe <encodeFilename>
    a15c:	       addq.l #4,sp
    a15e:	       move.l d0,17af4 <loadNow>
    FreeVec(aaaaa);
    a164:	       move.l 40(sp),36(sp)
    a16a:	       move.l 17b28 <SysBase>,d0
    a170:	       movea.l d0,a6
    a172:	       movea.l 36(sp),a1
    a176:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    a17a:	       move.l 17af4 <loadNow>,d0
    a180:	       move.l d0,-(sp)
    a182:	       jsr 9aec <failSecurityCheck>
    a188:	       addq.l #4,sp
    a18a:	       tst.w d0
    a18c:	   /-- beq.s a192 <builtIn_loadGame+0x6e>
    a18e:	   |   moveq #1,d0
    a190:	/--|-- bra.s a202 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    a192:	|  \-> move.l 17af4 <loadNow>,32(sp)
    a19a:	|      move.l #1005,28(sp)
    a1a2:	|      move.l 17b30 <DOSBase>,d0
    a1a8:	|      movea.l d0,a6
    a1aa:	|      move.l 32(sp),d1
    a1ae:	|      move.l 28(sp),d2
    a1b2:	|      jsr -30(a6)
    a1b6:	|      move.l d0,24(sp)
    a1ba:	|      move.l 24(sp),d0
    a1be:	|      move.l d0,20(sp)
    if (fp) {
    a1c2:	|  /-- beq.s a1e2 <builtIn_loadGame+0xbe>
        Close(fp);
    a1c4:	|  |   move.l 20(sp),12(sp)
    a1ca:	|  |   move.l 17b30 <DOSBase>,d0
    a1d0:	|  |   movea.l d0,a6
    a1d2:	|  |   move.l 12(sp),d1
    a1d6:	|  |   jsr -36(a6)
    a1da:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    a1de:	|  |   moveq #0,d0
    a1e0:	+--|-- bra.s a202 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    a1e2:	|  \-> move.l 17af4 <loadNow>,16(sp)
    a1ea:	|      move.l 17b28 <SysBase>,d0
    a1f0:	|      movea.l d0,a6
    a1f2:	|      movea.l 16(sp),a1
    a1f6:	|      jsr -690(a6)
    loadNow = NULL;
    a1fa:	|      clr.l 17af4 <loadNow>
    return BR_CONTINUE;
    a200:	|      moveq #2,d0
}
    a202:	\----> move.l (sp)+,d2
    a204:	       movea.l (sp)+,a6
    a206:	       lea 36(sp),sp
    a20a:	       rts

0000a20c <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    a20c:	move.l 17bae <sceneHeight>,d0
    a212:	move.l d0,d1
    a214:	move.l 17baa <sceneWidth>,d0
    a21a:	move.l d1,-(sp)
    a21c:	move.l d0,-(sp)
    a21e:	clr.l -(sp)
    a220:	clr.l -(sp)
    a222:	jsr 898e <blankScreen>
    a228:	lea 16(sp),sp
	return BR_CONTINUE;
    a22c:	moveq #2,d0
}
    a22e:	rts

0000a230 <builtIn_blankArea>:

builtIn(blankArea)
{
    a230:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a234:	       movea.l 24(sp),a0
    a238:	       move.l 24(a0),d0
    a23c:	       move.l d0,-(sp)
    a23e:	       pea 1 <_start+0x1>
    a242:	       lea 8(sp),a0
    a246:	       move.l a0,-(sp)
    a248:	       jsr fd32 <getValueType>
    a24e:	       lea 12(sp),sp
    a252:	       tst.w d0
    a254:	   /-- bne.s a25c <builtIn_blankArea+0x2c>
    a256:	   |   moveq #1,d0
    a258:	/--|-- bra.w a332 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a25c:	|  \-> moveq #24,d0
    a25e:	|      add.l 24(sp),d0
    a262:	|      move.l d0,-(sp)
    a264:	|      jsr 10694 <trimStack>
    a26a:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a26c:	|      movea.l 24(sp),a0
    a270:	|      move.l 24(a0),d0
    a274:	|      move.l d0,-(sp)
    a276:	|      pea 1 <_start+0x1>
    a27a:	|      lea 12(sp),a0
    a27e:	|      move.l a0,-(sp)
    a280:	|      jsr fd32 <getValueType>
    a286:	|      lea 12(sp),sp
    a28a:	|      tst.w d0
    a28c:	|  /-- bne.s a294 <builtIn_blankArea+0x64>
    a28e:	|  |   moveq #1,d0
    a290:	+--|-- bra.w a332 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a294:	|  \-> moveq #24,d0
    a296:	|      add.l 24(sp),d0
    a29a:	|      move.l d0,-(sp)
    a29c:	|      jsr 10694 <trimStack>
    a2a2:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a2a4:	|      movea.l 24(sp),a0
    a2a8:	|      move.l 24(a0),d0
    a2ac:	|      move.l d0,-(sp)
    a2ae:	|      pea 1 <_start+0x1>
    a2b2:	|      moveq #16,d0
    a2b4:	|      add.l sp,d0
    a2b6:	|      move.l d0,-(sp)
    a2b8:	|      jsr fd32 <getValueType>
    a2be:	|      lea 12(sp),sp
    a2c2:	|      tst.w d0
    a2c4:	|  /-- bne.s a2ca <builtIn_blankArea+0x9a>
    a2c6:	|  |   moveq #1,d0
    a2c8:	+--|-- bra.s a332 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a2ca:	|  \-> moveq #24,d0
    a2cc:	|      add.l 24(sp),d0
    a2d0:	|      move.l d0,-(sp)
    a2d2:	|      jsr 10694 <trimStack>
    a2d8:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    a2da:	|      movea.l 24(sp),a0
    a2de:	|      move.l 24(a0),d0
    a2e2:	|      move.l d0,-(sp)
    a2e4:	|      pea 1 <_start+0x1>
    a2e8:	|      moveq #20,d0
    a2ea:	|      add.l sp,d0
    a2ec:	|      move.l d0,-(sp)
    a2ee:	|      jsr fd32 <getValueType>
    a2f4:	|      lea 12(sp),sp
    a2f8:	|      tst.w d0
    a2fa:	|  /-- bne.s a300 <builtIn_blankArea+0xd0>
    a2fc:	|  |   moveq #1,d0
    a2fe:	+--|-- bra.s a332 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    a300:	|  \-> moveq #24,d0
    a302:	|      add.l 24(sp),d0
    a306:	|      move.l d0,-(sp)
    a308:	|      jsr 10694 <trimStack>
    a30e:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    a310:	|      movea.l (sp),a1
    a312:	|      movea.l 4(sp),a0
    a316:	|      move.l 8(sp),d1
    a31a:	|      move.l 12(sp),d0
    a31e:	|      move.l a1,-(sp)
    a320:	|      move.l a0,-(sp)
    a322:	|      move.l d1,-(sp)
    a324:	|      move.l d0,-(sp)
    a326:	|      jsr 898e <blankScreen>
    a32c:	|      lea 16(sp),sp
	return BR_CONTINUE;
    a330:	|      moveq #2,d0
}
    a332:	\----> lea 16(sp),sp
    a336:	       rts

0000a338 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    a338:	jsr 8a64 <darkScreen>
	return BR_CONTINUE;
    a33e:	moveq #2,d0
}
    a340:	rts

0000a342 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    a342:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a346:	       movea.l 20(sp),a0
    a34a:	       move.l 24(a0),d0
    a34e:	       move.l d0,-(sp)
    a350:	       pea 1 <_start+0x1>
    a354:	       lea 8(sp),a0
    a358:	       move.l a0,-(sp)
    a35a:	       jsr fd32 <getValueType>
    a360:	       lea 12(sp),sp
    a364:	       tst.w d0
    a366:	   /-- bne.s a36e <builtIn_addOverlay+0x2c>
    a368:	   |   moveq #1,d0
    a36a:	/--|-- bra.w a406 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    a36e:	|  \-> moveq #24,d0
    a370:	|      add.l 20(sp),d0
    a374:	|      move.l d0,-(sp)
    a376:	|      jsr 10694 <trimStack>
    a37c:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a37e:	|      movea.l 20(sp),a0
    a382:	|      move.l 24(a0),d0
    a386:	|      move.l d0,-(sp)
    a388:	|      pea 1 <_start+0x1>
    a38c:	|      moveq #12,d0
    a38e:	|      add.l sp,d0
    a390:	|      move.l d0,-(sp)
    a392:	|      jsr fd32 <getValueType>
    a398:	|      lea 12(sp),sp
    a39c:	|      tst.w d0
    a39e:	|  /-- bne.s a3a4 <builtIn_addOverlay+0x62>
    a3a0:	|  |   moveq #1,d0
    a3a2:	+--|-- bra.s a406 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    a3a4:	|  \-> moveq #24,d0
    a3a6:	|      add.l 20(sp),d0
    a3aa:	|      move.l d0,-(sp)
    a3ac:	|      jsr 10694 <trimStack>
    a3b2:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    a3b4:	|      movea.l 20(sp),a0
    a3b8:	|      move.l 24(a0),d0
    a3bc:	|      move.l d0,-(sp)
    a3be:	|      pea 5 <_start+0x5>
    a3c2:	|      moveq #16,d0
    a3c4:	|      add.l sp,d0
    a3c6:	|      move.l d0,-(sp)
    a3c8:	|      jsr fd32 <getValueType>
    a3ce:	|      lea 12(sp),sp
    a3d2:	|      tst.w d0
    a3d4:	|  /-- bne.s a3da <builtIn_addOverlay+0x98>
    a3d6:	|  |   moveq #1,d0
    a3d8:	+--|-- bra.s a406 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    a3da:	|  \-> moveq #24,d0
    a3dc:	|      add.l 20(sp),d0
    a3e0:	|      move.l d0,-(sp)
    a3e2:	|      jsr 10694 <trimStack>
    a3e8:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    a3ea:	|      movea.l (sp),a0
    a3ec:	|      move.l 4(sp),d1
    a3f0:	|      move.l 8(sp),d0
    a3f4:	|      move.l a0,-(sp)
    a3f6:	|      move.l d1,-(sp)
    a3f8:	|      move.l d0,-(sp)
    a3fa:	|      jsr 8b7c <loadBackDrop>
    a400:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a404:	|      moveq #2,d0
}
    a406:	\----> lea 12(sp),sp
    a40a:	       rts

0000a40c <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    a40c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a410:	       movea.l 20(sp),a0
    a414:	       move.l 24(a0),d0
    a418:	       move.l d0,-(sp)
    a41a:	       pea 1 <_start+0x1>
    a41e:	       lea 8(sp),a0
    a422:	       move.l a0,-(sp)
    a424:	       jsr fd32 <getValueType>
    a42a:	       lea 12(sp),sp
    a42e:	       tst.w d0
    a430:	   /-- bne.s a438 <builtIn_mixOverlay+0x2c>
    a432:	   |   moveq #1,d0
    a434:	/--|-- bra.w a4d0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    a438:	|  \-> moveq #24,d0
    a43a:	|      add.l 20(sp),d0
    a43e:	|      move.l d0,-(sp)
    a440:	|      jsr 10694 <trimStack>
    a446:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a448:	|      movea.l 20(sp),a0
    a44c:	|      move.l 24(a0),d0
    a450:	|      move.l d0,-(sp)
    a452:	|      pea 1 <_start+0x1>
    a456:	|      moveq #12,d0
    a458:	|      add.l sp,d0
    a45a:	|      move.l d0,-(sp)
    a45c:	|      jsr fd32 <getValueType>
    a462:	|      lea 12(sp),sp
    a466:	|      tst.w d0
    a468:	|  /-- bne.s a46e <builtIn_mixOverlay+0x62>
    a46a:	|  |   moveq #1,d0
    a46c:	+--|-- bra.s a4d0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    a46e:	|  \-> moveq #24,d0
    a470:	|      add.l 20(sp),d0
    a474:	|      move.l d0,-(sp)
    a476:	|      jsr 10694 <trimStack>
    a47c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    a47e:	|      movea.l 20(sp),a0
    a482:	|      move.l 24(a0),d0
    a486:	|      move.l d0,-(sp)
    a488:	|      pea 5 <_start+0x5>
    a48c:	|      moveq #16,d0
    a48e:	|      add.l sp,d0
    a490:	|      move.l d0,-(sp)
    a492:	|      jsr fd32 <getValueType>
    a498:	|      lea 12(sp),sp
    a49c:	|      tst.w d0
    a49e:	|  /-- bne.s a4a4 <builtIn_mixOverlay+0x98>
    a4a0:	|  |   moveq #1,d0
    a4a2:	+--|-- bra.s a4d0 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    a4a4:	|  \-> moveq #24,d0
    a4a6:	|      add.l 20(sp),d0
    a4aa:	|      move.l d0,-(sp)
    a4ac:	|      jsr 10694 <trimStack>
    a4b2:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    a4b4:	|      movea.l (sp),a0
    a4b6:	|      move.l 4(sp),d1
    a4ba:	|      move.l 8(sp),d0
    a4be:	|      move.l a0,-(sp)
    a4c0:	|      move.l d1,-(sp)
    a4c2:	|      move.l d0,-(sp)
    a4c4:	|      jsr 8bc2 <mixBackDrop>
    a4ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a4ce:	|      moveq #2,d0
}
    a4d0:	\----> lea 12(sp),sp
    a4d4:	       rts

0000a4d6 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    a4d6:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a4da:	       movea.l 20(sp),a0
    a4de:	       move.l 24(a0),d0
    a4e2:	       move.l d0,-(sp)
    a4e4:	       pea 1 <_start+0x1>
    a4e8:	       lea 8(sp),a0
    a4ec:	       move.l a0,-(sp)
    a4ee:	       jsr fd32 <getValueType>
    a4f4:	       lea 12(sp),sp
    a4f8:	       tst.w d0
    a4fa:	   /-- bne.s a502 <builtIn_pasteImage+0x2c>
    a4fc:	   |   moveq #1,d0
    a4fe:	/--|-- bra.w a592 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    a502:	|  \-> moveq #24,d0
    a504:	|      add.l 20(sp),d0
    a508:	|      move.l d0,-(sp)
    a50a:	|      jsr 10694 <trimStack>
    a510:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a512:	|      movea.l 20(sp),a0
    a516:	|      move.l 24(a0),d0
    a51a:	|      move.l d0,-(sp)
    a51c:	|      pea 1 <_start+0x1>
    a520:	|      moveq #12,d0
    a522:	|      add.l sp,d0
    a524:	|      move.l d0,-(sp)
    a526:	|      jsr fd32 <getValueType>
    a52c:	|      lea 12(sp),sp
    a530:	|      tst.w d0
    a532:	|  /-- bne.s a538 <builtIn_pasteImage+0x62>
    a534:	|  |   moveq #1,d0
    a536:	+--|-- bra.s a592 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    a538:	|  \-> moveq #24,d0
    a53a:	|      add.l 20(sp),d0
    a53e:	|      move.l d0,-(sp)
    a540:	|      jsr 10694 <trimStack>
    a546:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    a548:	|      movea.l 20(sp),a0
    a54c:	|      move.l 24(a0),d0
    a550:	|      move.l d0,-(sp)
    a552:	|      jsr 1020a <getAnimationFromVar>
    a558:	|      addq.l #4,sp
    a55a:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    a55e:	|      moveq #24,d0
    a560:	|      add.l 20(sp),d0
    a564:	|      move.l d0,-(sp)
    a566:	|      jsr 10694 <trimStack>
    a56c:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    a56e:	|      tst.l 8(sp)
    a572:	|  /-- bne.s a578 <builtIn_pasteImage+0xa2>
    a574:	|  |   moveq #2,d0
    a576:	+--|-- bra.s a592 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    a578:	|  \-> move.l (sp),d1
    a57a:	|      move.l 4(sp),d0
    a57e:	|      move.l 8(sp),-(sp)
    a582:	|      move.l d1,-(sp)
    a584:	|      move.l d0,-(sp)
    a586:	|      jsr de2 <pasteCursor>
    a58c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    a590:	|      moveq #2,d0
}
    a592:	\----> lea 12(sp),sp
    a596:	       rts

0000a598 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    a598:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a59a:	       movea.l 16(sp),a0
    a59e:	       move.l 24(a0),d0
    a5a2:	       move.l d0,-(sp)
    a5a4:	       pea 1 <_start+0x1>
    a5a8:	       move.l sp,d0
    a5aa:	       addq.l #8,d0
    a5ac:	       move.l d0,-(sp)
    a5ae:	       jsr fd32 <getValueType>
    a5b4:	       lea 12(sp),sp
    a5b8:	       tst.w d0
    a5ba:	   /-- bne.s a5c2 <builtIn_setSceneDimensions+0x2a>
    a5bc:	   |   moveq #1,d0
    a5be:	/--|-- bra.w a64a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    a5c2:	|  \-> moveq #24,d0
    a5c4:	|      add.l 16(sp),d0
    a5c8:	|      move.l d0,-(sp)
    a5ca:	|      jsr 10694 <trimStack>
    a5d0:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a5d2:	|      movea.l 16(sp),a0
    a5d6:	|      move.l 24(a0),d0
    a5da:	|      move.l d0,-(sp)
    a5dc:	|      pea 1 <_start+0x1>
    a5e0:	|      moveq #12,d0
    a5e2:	|      add.l sp,d0
    a5e4:	|      move.l d0,-(sp)
    a5e6:	|      jsr fd32 <getValueType>
    a5ec:	|      lea 12(sp),sp
    a5f0:	|      tst.w d0
    a5f2:	|  /-- bne.s a5f8 <builtIn_setSceneDimensions+0x60>
    a5f4:	|  |   moveq #1,d0
    a5f6:	+--|-- bra.s a64a <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    a5f8:	|  \-> moveq #24,d0
    a5fa:	|      add.l 16(sp),d0
    a5fe:	|      move.l d0,-(sp)
    a600:	|      jsr 10694 <trimStack>
    a606:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    a608:	|      move.l (sp),d1
    a60a:	|      move.l 4(sp),d0
    a60e:	|      move.l d1,-(sp)
    a610:	|      move.l d0,-(sp)
    a612:	|      jsr 8bf0 <resizeBackdrop>
    a618:	|      addq.l #8,sp
    a61a:	|      tst.w d0
    a61c:	|  /-- beq.s a63a <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    a61e:	|  |   move.l (sp),d1
    a620:	|  |   move.l 4(sp),d0
    a624:	|  |   move.l d1,-(sp)
    a626:	|  |   move.l d0,-(sp)
    a628:	|  |   clr.l -(sp)
    a62a:	|  |   clr.l -(sp)
    a62c:	|  |   jsr 898e <blankScreen>
    a632:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    a636:	|  |   moveq #2,d0
    a638:	+--|-- bra.s a64a <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    a63a:	|  \-> pea 15368 <incbin_player_end+0x85c>
    a640:	|      jsr 11d08 <KPrintF>
    a646:	|      addq.l #4,sp
	return BR_ERROR;
    a648:	|      moveq #1,d0
}
    a64a:	\----> addq.l #8,sp
    a64c:	       rts

0000a64e <builtIn_aimCamera>:

builtIn(aimCamera)
{
    a64e:	          move.l d3,-(sp)
    a650:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a652:	          movea.l 16(sp),a0
    a656:	          move.l 24(a0),d0
    a65a:	          move.l d0,-(sp)
    a65c:	          pea 1 <_start+0x1>
    a660:	          pea 17bd4 <cameraY>
    a666:	          jsr fd32 <getValueType>
    a66c:	          lea 12(sp),sp
    a670:	          tst.w d0
    a672:	      /-- bne.s a67a <builtIn_aimCamera+0x2c>
    a674:	      |   moveq #1,d0
    a676:	/-----|-- bra.w a8fc <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    a67a:	|     \-> moveq #24,d0
    a67c:	|         add.l 16(sp),d0
    a680:	|         move.l d0,-(sp)
    a682:	|         jsr 10694 <trimStack>
    a688:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a68a:	|         movea.l 16(sp),a0
    a68e:	|         move.l 24(a0),d0
    a692:	|         move.l d0,-(sp)
    a694:	|         pea 1 <_start+0x1>
    a698:	|         pea 17bd0 <cameraX>
    a69e:	|         jsr fd32 <getValueType>
    a6a4:	|         lea 12(sp),sp
    a6a8:	|         tst.w d0
    a6aa:	|     /-- bne.s a6b2 <builtIn_aimCamera+0x64>
    a6ac:	|     |   moveq #1,d0
    a6ae:	+-----|-- bra.w a8fc <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    a6b2:	|     \-> moveq #24,d0
    a6b4:	|         add.l 16(sp),d0
    a6b8:	|         move.l d0,-(sp)
    a6ba:	|         jsr 10694 <trimStack>
    a6c0:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    a6c2:	|         move.l 17bd0 <cameraX>,d0
    a6c8:	|         move.l d0,-(sp)
    a6ca:	|         jsr 12160 <__floatsisf>
    a6d0:	|         addq.l #4,sp
    a6d2:	|         move.l d0,d2
    a6d4:	|         move.l 17a28 <winWidth>,d0
    a6da:	|         lsr.l #1,d0
    a6dc:	|         move.l d0,-(sp)
    a6de:	|         jsr 12188 <__floatunsisf>
    a6e4:	|         addq.l #4,sp
    a6e6:	|         move.l d0,d1
    a6e8:	|         move.l 16032 <cameraZoom>,d0
    a6ee:	|         move.l d0,-(sp)
    a6f0:	|         move.l d1,-(sp)
    a6f2:	|         jsr 1200c <__divsf3>
    a6f8:	|         addq.l #8,sp
    a6fa:	|         move.l d0,-(sp)
    a6fc:	|         move.l d2,-(sp)
    a6fe:	|         jsr 12454 <__subsf3>
    a704:	|         addq.l #8,sp
    a706:	|         move.l d0,-(sp)
    a708:	|         jsr 120f8 <__fixsfsi>
    a70e:	|         addq.l #4,sp
    a710:	|         move.l d0,17bd0 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    a716:	|         move.l 17bd4 <cameraY>,d0
    a71c:	|         move.l d0,-(sp)
    a71e:	|         jsr 12160 <__floatsisf>
    a724:	|         addq.l #4,sp
    a726:	|         move.l d0,d2
    a728:	|         move.l 17a2c <winHeight>,d0
    a72e:	|         lsr.l #1,d0
    a730:	|         move.l d0,-(sp)
    a732:	|         jsr 12188 <__floatunsisf>
    a738:	|         addq.l #4,sp
    a73a:	|         move.l d0,d1
    a73c:	|         move.l 16032 <cameraZoom>,d0
    a742:	|         move.l d0,-(sp)
    a744:	|         move.l d1,-(sp)
    a746:	|         jsr 1200c <__divsf3>
    a74c:	|         addq.l #8,sp
    a74e:	|         move.l d0,-(sp)
    a750:	|         move.l d2,-(sp)
    a752:	|         jsr 12454 <__subsf3>
    a758:	|         addq.l #8,sp
    a75a:	|         move.l d0,-(sp)
    a75c:	|         jsr 120f8 <__fixsfsi>
    a762:	|         addq.l #4,sp
    a764:	|         move.l d0,17bd4 <cameraY>

	if (cameraX < 0) cameraX = 0;
    a76a:	|         move.l 17bd0 <cameraX>,d0
    a770:	|     /-- bpl.s a77c <builtIn_aimCamera+0x12e>
    a772:	|     |   clr.l 17bd0 <cameraX>
    a778:	|  /--|-- bra.w a832 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    a77c:	|  |  \-> move.l 17bd0 <cameraX>,d0
    a782:	|  |      move.l d0,-(sp)
    a784:	|  |      jsr 12160 <__floatsisf>
    a78a:	|  |      addq.l #4,sp
    a78c:	|  |      move.l d0,d2
    a78e:	|  |      move.l 17baa <sceneWidth>,d0
    a794:	|  |      move.l d0,-(sp)
    a796:	|  |      jsr 12188 <__floatunsisf>
    a79c:	|  |      addq.l #4,sp
    a79e:	|  |      move.l d0,d3
    a7a0:	|  |      move.l 17a28 <winWidth>,d0
    a7a6:	|  |      move.l d0,-(sp)
    a7a8:	|  |      jsr 12188 <__floatunsisf>
    a7ae:	|  |      addq.l #4,sp
    a7b0:	|  |      move.l d0,d1
    a7b2:	|  |      move.l 16032 <cameraZoom>,d0
    a7b8:	|  |      move.l d0,-(sp)
    a7ba:	|  |      move.l d1,-(sp)
    a7bc:	|  |      jsr 1200c <__divsf3>
    a7c2:	|  |      addq.l #8,sp
    a7c4:	|  |      move.l d0,-(sp)
    a7c6:	|  |      move.l d3,-(sp)
    a7c8:	|  |      jsr 12454 <__subsf3>
    a7ce:	|  |      addq.l #8,sp
    a7d0:	|  |      move.l d0,-(sp)
    a7d2:	|  |      move.l d2,-(sp)
    a7d4:	|  |      jsr 122cc <__gtsf2>
    a7da:	|  |      addq.l #8,sp
    a7dc:	|  |      tst.l d0
    a7de:	|  +----- ble.s a832 <builtIn_aimCamera+0x1e4>
    a7e0:	|  |      move.l 17baa <sceneWidth>,d0
    a7e6:	|  |      move.l d0,-(sp)
    a7e8:	|  |      jsr 12188 <__floatunsisf>
    a7ee:	|  |      addq.l #4,sp
    a7f0:	|  |      move.l d0,d2
    a7f2:	|  |      move.l 17a28 <winWidth>,d0
    a7f8:	|  |      move.l d0,-(sp)
    a7fa:	|  |      jsr 12188 <__floatunsisf>
    a800:	|  |      addq.l #4,sp
    a802:	|  |      move.l d0,d1
    a804:	|  |      move.l 16032 <cameraZoom>,d0
    a80a:	|  |      move.l d0,-(sp)
    a80c:	|  |      move.l d1,-(sp)
    a80e:	|  |      jsr 1200c <__divsf3>
    a814:	|  |      addq.l #8,sp
    a816:	|  |      move.l d0,-(sp)
    a818:	|  |      move.l d2,-(sp)
    a81a:	|  |      jsr 12454 <__subsf3>
    a820:	|  |      addq.l #8,sp
    a822:	|  |      move.l d0,-(sp)
    a824:	|  |      jsr 120f8 <__fixsfsi>
    a82a:	|  |      addq.l #4,sp
    a82c:	|  |      move.l d0,17bd0 <cameraX>
	if (cameraY < 0) cameraY = 0;
    a832:	|  \----> move.l 17bd4 <cameraY>,d0
    a838:	|     /-- bpl.s a844 <builtIn_aimCamera+0x1f6>
    a83a:	|     |   clr.l 17bd4 <cameraY>
    a840:	|  /--|-- bra.w a8fa <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    a844:	|  |  \-> move.l 17bd4 <cameraY>,d0
    a84a:	|  |      move.l d0,-(sp)
    a84c:	|  |      jsr 12160 <__floatsisf>
    a852:	|  |      addq.l #4,sp
    a854:	|  |      move.l d0,d2
    a856:	|  |      move.l 17bae <sceneHeight>,d0
    a85c:	|  |      move.l d0,-(sp)
    a85e:	|  |      jsr 12188 <__floatunsisf>
    a864:	|  |      addq.l #4,sp
    a866:	|  |      move.l d0,d3
    a868:	|  |      move.l 17a2c <winHeight>,d0
    a86e:	|  |      move.l d0,-(sp)
    a870:	|  |      jsr 12188 <__floatunsisf>
    a876:	|  |      addq.l #4,sp
    a878:	|  |      move.l d0,d1
    a87a:	|  |      move.l 16032 <cameraZoom>,d0
    a880:	|  |      move.l d0,-(sp)
    a882:	|  |      move.l d1,-(sp)
    a884:	|  |      jsr 1200c <__divsf3>
    a88a:	|  |      addq.l #8,sp
    a88c:	|  |      move.l d0,-(sp)
    a88e:	|  |      move.l d3,-(sp)
    a890:	|  |      jsr 12454 <__subsf3>
    a896:	|  |      addq.l #8,sp
    a898:	|  |      move.l d0,-(sp)
    a89a:	|  |      move.l d2,-(sp)
    a89c:	|  |      jsr 122cc <__gtsf2>
    a8a2:	|  |      addq.l #8,sp
    a8a4:	|  |      tst.l d0
    a8a6:	|  +----- ble.s a8fa <builtIn_aimCamera+0x2ac>
    a8a8:	|  |      move.l 17bae <sceneHeight>,d0
    a8ae:	|  |      move.l d0,-(sp)
    a8b0:	|  |      jsr 12188 <__floatunsisf>
    a8b6:	|  |      addq.l #4,sp
    a8b8:	|  |      move.l d0,d2
    a8ba:	|  |      move.l 17a2c <winHeight>,d0
    a8c0:	|  |      move.l d0,-(sp)
    a8c2:	|  |      jsr 12188 <__floatunsisf>
    a8c8:	|  |      addq.l #4,sp
    a8ca:	|  |      move.l d0,d1
    a8cc:	|  |      move.l 16032 <cameraZoom>,d0
    a8d2:	|  |      move.l d0,-(sp)
    a8d4:	|  |      move.l d1,-(sp)
    a8d6:	|  |      jsr 1200c <__divsf3>
    a8dc:	|  |      addq.l #8,sp
    a8de:	|  |      move.l d0,-(sp)
    a8e0:	|  |      move.l d2,-(sp)
    a8e2:	|  |      jsr 12454 <__subsf3>
    a8e8:	|  |      addq.l #8,sp
    a8ea:	|  |      move.l d0,-(sp)
    a8ec:	|  |      jsr 120f8 <__fixsfsi>
    a8f2:	|  |      addq.l #4,sp
    a8f4:	|  |      move.l d0,17bd4 <cameraY>
	return BR_CONTINUE;
    a8fa:	|  \----> moveq #2,d0
}
    a8fc:	\-------> move.l (sp)+,d2
    a8fe:	          move.l (sp)+,d3
    a900:	          rts

0000a902 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    a902:	       subq.l #4,sp
    a904:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    a906:	       movea.l 16(sp),a0
    a90a:	       move.l 24(a0),d0
    a90e:	       move.l d0,-(sp)
    a910:	       pea 1 <_start+0x1>
    a914:	       moveq #12,d0
    a916:	       add.l sp,d0
    a918:	       move.l d0,-(sp)
    a91a:	       jsr fd32 <getValueType>
    a920:	       lea 12(sp),sp
    a924:	       tst.w d0
    a926:	   /-- bne.s a92e <builtIn_zoomCamera+0x2c>
    a928:	   |   moveq #1,d0
    a92a:	/--|-- bra.w ab28 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    a92e:	|  \-> moveq #24,d0
    a930:	|      add.l 16(sp),d0
    a934:	|      move.l d0,-(sp)
    a936:	|      jsr 10694 <trimStack>
    a93c:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    a93e:	|      move.l 17ae8 <input+0xa>,d0
    a944:	|      move.l d0,-(sp)
    a946:	|      jsr 12160 <__floatsisf>
    a94c:	|      addq.l #4,sp
    a94e:	|      move.l d0,d1
    a950:	|      move.l 16032 <cameraZoom>,d0
    a956:	|      move.l d0,-(sp)
    a958:	|      move.l d1,-(sp)
    a95a:	|      jsr 12212 <__mulsf3>
    a960:	|      addq.l #8,sp
    a962:	|      move.l d0,-(sp)
    a964:	|      jsr 120f8 <__fixsfsi>
    a96a:	|      addq.l #4,sp
    a96c:	|      move.l d0,17ae8 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    a972:	|      move.l 17aec <input+0xe>,d0
    a978:	|      move.l d0,-(sp)
    a97a:	|      jsr 12160 <__floatsisf>
    a980:	|      addq.l #4,sp
    a982:	|      move.l d0,d1
    a984:	|      move.l 16032 <cameraZoom>,d0
    a98a:	|      move.l d0,-(sp)
    a98c:	|      move.l d1,-(sp)
    a98e:	|      jsr 12212 <__mulsf3>
    a994:	|      addq.l #8,sp
    a996:	|      move.l d0,-(sp)
    a998:	|      jsr 120f8 <__fixsfsi>
    a99e:	|      addq.l #4,sp
    a9a0:	|      move.l d0,17aec <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    a9a6:	|      move.l 4(sp),d0
    a9aa:	|      move.l d0,-(sp)
    a9ac:	|      jsr 12160 <__floatsisf>
    a9b2:	|      addq.l #4,sp
    a9b4:	|      move.l #1008981770,-(sp)
    a9ba:	|      move.l d0,-(sp)
    a9bc:	|      jsr 12212 <__mulsf3>
    a9c2:	|      addq.l #8,sp
    a9c4:	|      move.l d0,16032 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    a9ca:	|      move.l 17a28 <winWidth>,d0
    a9d0:	|      move.l d0,-(sp)
    a9d2:	|      jsr 12188 <__floatunsisf>
    a9d8:	|      addq.l #4,sp
    a9da:	|      move.l d0,d1
    a9dc:	|      move.l 16032 <cameraZoom>,d0
    a9e2:	|      move.l d0,-(sp)
    a9e4:	|      move.l d1,-(sp)
    a9e6:	|      jsr 1200c <__divsf3>
    a9ec:	|      addq.l #8,sp
    a9ee:	|      move.l d0,d2
    a9f0:	|      move.l 17baa <sceneWidth>,d0
    a9f6:	|      move.l d0,-(sp)
    a9f8:	|      jsr 12188 <__floatunsisf>
    a9fe:	|      addq.l #4,sp
    aa00:	|      move.l d0,-(sp)
    aa02:	|      move.l d2,-(sp)
    aa04:	|      jsr 122cc <__gtsf2>
    aa0a:	|      addq.l #8,sp
    aa0c:	|      tst.l d0
    aa0e:	|  /-- ble.s aa44 <builtIn_zoomCamera+0x142>
    aa10:	|  |   move.l 17a28 <winWidth>,d0
    aa16:	|  |   move.l d0,-(sp)
    aa18:	|  |   jsr 12188 <__floatunsisf>
    aa1e:	|  |   addq.l #4,sp
    aa20:	|  |   move.l d0,d2
    aa22:	|  |   move.l 17baa <sceneWidth>,d0
    aa28:	|  |   move.l d0,-(sp)
    aa2a:	|  |   jsr 12188 <__floatunsisf>
    aa30:	|  |   addq.l #4,sp
    aa32:	|  |   move.l d0,-(sp)
    aa34:	|  |   move.l d2,-(sp)
    aa36:	|  |   jsr 1200c <__divsf3>
    aa3c:	|  |   addq.l #8,sp
    aa3e:	|  |   move.l d0,16032 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    aa44:	|  \-> move.l 17a2c <winHeight>,d0
    aa4a:	|      move.l d0,-(sp)
    aa4c:	|      jsr 12188 <__floatunsisf>
    aa52:	|      addq.l #4,sp
    aa54:	|      move.l d0,d1
    aa56:	|      move.l 16032 <cameraZoom>,d0
    aa5c:	|      move.l d0,-(sp)
    aa5e:	|      move.l d1,-(sp)
    aa60:	|      jsr 1200c <__divsf3>
    aa66:	|      addq.l #8,sp
    aa68:	|      move.l d0,d2
    aa6a:	|      move.l 17bae <sceneHeight>,d0
    aa70:	|      move.l d0,-(sp)
    aa72:	|      jsr 12188 <__floatunsisf>
    aa78:	|      addq.l #4,sp
    aa7a:	|      move.l d0,-(sp)
    aa7c:	|      move.l d2,-(sp)
    aa7e:	|      jsr 122cc <__gtsf2>
    aa84:	|      addq.l #8,sp
    aa86:	|      tst.l d0
    aa88:	|  /-- ble.s aabe <builtIn_zoomCamera+0x1bc>
    aa8a:	|  |   move.l 17a2c <winHeight>,d0
    aa90:	|  |   move.l d0,-(sp)
    aa92:	|  |   jsr 12188 <__floatunsisf>
    aa98:	|  |   addq.l #4,sp
    aa9a:	|  |   move.l d0,d2
    aa9c:	|  |   move.l 17bae <sceneHeight>,d0
    aaa2:	|  |   move.l d0,-(sp)
    aaa4:	|  |   jsr 12188 <__floatunsisf>
    aaaa:	|  |   addq.l #4,sp
    aaac:	|  |   move.l d0,-(sp)
    aaae:	|  |   move.l d2,-(sp)
    aab0:	|  |   jsr 1200c <__divsf3>
    aab6:	|  |   addq.l #8,sp
    aab8:	|  |   move.l d0,16032 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    aabe:	|  \-> move.l 17ae8 <input+0xa>,d0
    aac4:	|      move.l d0,-(sp)
    aac6:	|      jsr 12160 <__floatsisf>
    aacc:	|      addq.l #4,sp
    aace:	|      move.l d0,d1
    aad0:	|      move.l 16032 <cameraZoom>,d0
    aad6:	|      move.l d0,-(sp)
    aad8:	|      move.l d1,-(sp)
    aada:	|      jsr 1200c <__divsf3>
    aae0:	|      addq.l #8,sp
    aae2:	|      move.l d0,-(sp)
    aae4:	|      jsr 120f8 <__fixsfsi>
    aaea:	|      addq.l #4,sp
    aaec:	|      move.l d0,17ae8 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    aaf2:	|      move.l 17aec <input+0xe>,d0
    aaf8:	|      move.l d0,-(sp)
    aafa:	|      jsr 12160 <__floatsisf>
    ab00:	|      addq.l #4,sp
    ab02:	|      move.l d0,d1
    ab04:	|      move.l 16032 <cameraZoom>,d0
    ab0a:	|      move.l d0,-(sp)
    ab0c:	|      move.l d1,-(sp)
    ab0e:	|      jsr 1200c <__divsf3>
    ab14:	|      addq.l #8,sp
    ab16:	|      move.l d0,-(sp)
    ab18:	|      jsr 120f8 <__fixsfsi>
    ab1e:	|      addq.l #4,sp
    ab20:	|      move.l d0,17aec <input+0xe>

	return BR_CONTINUE;
    ab26:	|      moveq #2,d0
}
    ab28:	\----> move.l (sp)+,d2
    ab2a:	       addq.l #4,sp
    ab2c:	       rts

0000ab2e <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    ab2e:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    ab30:	             tst.l 8(sp)
    ab34:	         /-- bne.s ab48 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    ab36:	         |   pea 1538d <incbin_player_end+0x881>
    ab3c:	         |   jsr 11d08 <KPrintF>
    ab42:	         |   addq.l #4,sp
		return BR_ERROR;
    ab44:	         |   moveq #1,d0
    ab46:	/--------|-- bra.s aba8 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    ab48:	|        \-> jsr c58 <rand>
    ab4e:	|            move.l d0,d1
    ab50:	|            move.l 8(sp),d0
    ab54:	|            move.l d0,-(sp)
    ab56:	|            move.l d1,-(sp)
    ab58:	|            jsr 12794 <__umodsi3>
    ab5e:	|            addq.l #8,sp
    ab60:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ab62:	|     /----- bra.s ab96 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    ab64:	|  /--|----> move.l (sp),d0
    ab66:	|  |  |      cmp.l 8(sp),d0
    ab6a:	|  |  |  /-- bne.s ab86 <builtIn_pickOne+0x58>
    ab6c:	|  |  |  |   moveq #28,d0
    ab6e:	|  |  |  |   add.l 12(sp),d0
    ab72:	|  |  |  |   movea.l 12(sp),a0
    ab76:	|  |  |  |   move.l 24(a0),d1
    ab7a:	|  |  |  |   move.l d0,-(sp)
    ab7c:	|  |  |  |   move.l d1,-(sp)
    ab7e:	|  |  |  |   jsr 101ec <copyVariable>
    ab84:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    ab86:	|  |  |  \-> moveq #24,d0
    ab88:	|  |  |      add.l 12(sp),d0
    ab8c:	|  |  |      move.l d0,-(sp)
    ab8e:	|  |  |      jsr 10694 <trimStack>
    ab94:	|  |  |      addq.l #4,sp
	while (numParams --) {
    ab96:	|  |  \----> move.l 8(sp),d0
    ab9a:	|  |         move.l d0,d1
    ab9c:	|  |         subq.l #1,d1
    ab9e:	|  |         move.l d1,8(sp)
    aba2:	|  |         tst.l d0
    aba4:	|  \-------- bne.s ab64 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    aba6:	|            moveq #2,d0
}
    aba8:	\----------> addq.l #4,sp
    abaa:	             rts

0000abac <builtIn_substring>:

builtIn(substring)
{
    abac:	       lea -40(sp),sp
    abb0:	       move.l a6,-(sp)
    abb2:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    abb4:	       movea.l 56(sp),a0
    abb8:	       move.l 24(a0),d0
    abbc:	       move.l d0,-(sp)
    abbe:	       pea 1 <_start+0x1>
    abc2:	       lea 16(sp),a0
    abc6:	       move.l a0,-(sp)
    abc8:	       jsr fd32 <getValueType>
    abce:	       lea 12(sp),sp
    abd2:	       tst.w d0
    abd4:	   /-- bne.s abdc <builtIn_substring+0x30>
    abd6:	   |   moveq #1,d0
    abd8:	/--|-- bra.w ad54 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    abdc:	|  \-> moveq #24,d0
    abde:	|      add.l 56(sp),d0
    abe2:	|      move.l d0,-(sp)
    abe4:	|      jsr 10694 <trimStack>
    abea:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    abec:	|      movea.l 56(sp),a0
    abf0:	|      move.l 24(a0),d0
    abf4:	|      move.l d0,-(sp)
    abf6:	|      pea 1 <_start+0x1>
    abfa:	|      lea 20(sp),a0
    abfe:	|      move.l a0,-(sp)
    ac00:	|      jsr fd32 <getValueType>
    ac06:	|      lea 12(sp),sp
    ac0a:	|      tst.w d0
    ac0c:	|  /-- bne.s ac14 <builtIn_substring+0x68>
    ac0e:	|  |   moveq #1,d0
    ac10:	+--|-- bra.w ad54 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    ac14:	|  \-> moveq #24,d0
    ac16:	|      add.l 56(sp),d0
    ac1a:	|      move.l d0,-(sp)
    ac1c:	|      jsr 10694 <trimStack>
    ac22:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    ac24:	|      movea.l 56(sp),a0
    ac28:	|      move.l 24(a0),d0
    ac2c:	|      move.l d0,-(sp)
    ac2e:	|      jsr 10308 <getTextFromAnyVar>
    ac34:	|      addq.l #4,sp
    ac36:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    ac3a:	|      moveq #24,d0
    ac3c:	|      add.l 56(sp),d0
    ac40:	|      move.l d0,-(sp)
    ac42:	|      jsr 10694 <trimStack>
    ac48:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    ac4a:	|      move.l 44(sp),-(sp)
    ac4e:	|      jsr f21e <strlen>
    ac54:	|      addq.l #4,sp
    ac56:	|      move.l d0,d1
    ac58:	|      move.l 12(sp),d0
    ac5c:	|      movea.l d0,a0
    ac5e:	|      move.l 8(sp),d0
    ac62:	|      add.l a0,d0
    ac64:	|      cmp.l d1,d0
    ac66:	|  /-- bls.s ac9c <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    ac68:	|  |   move.l 44(sp),-(sp)
    ac6c:	|  |   jsr f21e <strlen>
    ac72:	|  |   addq.l #4,sp
    ac74:	|  |   move.l d0,d1
    ac76:	|  |   move.l 12(sp),d0
    ac7a:	|  |   sub.l d0,d1
    ac7c:	|  |   move.l d1,d0
    ac7e:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    ac82:	|  |   move.l 44(sp),-(sp)
    ac86:	|  |   jsr f21e <strlen>
    ac8c:	|  |   addq.l #4,sp
    ac8e:	|  |   move.l d0,d1
    ac90:	|  |   move.l 12(sp),d0
    ac94:	|  |   cmp.l d1,d0
    ac96:	|  +-- bls.s ac9c <builtIn_substring+0xf0>
            start = 0;
    ac98:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    ac9c:	|  \-> move.l 8(sp),d0
    aca0:	|  /-- bpl.s aca6 <builtIn_substring+0xfa>
        length = 0;
    aca2:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    aca6:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    acac:	|      move.l 12(sp),d1
    acb0:	|      move.l 8(sp),d0
    acb4:	|      move.l d1,d2
    acb6:	|      add.l d0,d2
    acb8:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    acbc:	|      move.l 36(sp),d0
    acc0:	|      sub.l 40(sp),d0
    acc4:	|      addq.l #1,d0
    acc6:	|      move.l d0,32(sp)
    acca:	|      clr.l 28(sp)
    acce:	|      move.l 17b28 <SysBase>,d0
    acd4:	|      movea.l d0,a6
    acd6:	|      move.l 32(sp),d0
    acda:	|      move.l 28(sp),d1
    acde:	|      jsr -684(a6)
    ace2:	|      move.l d0,24(sp)
    ace6:	|      move.l 24(sp),d0
    acea:	|      move.l d0,20(sp)
    if (!newString) {
    acee:	|  /-- bne.s acf4 <builtIn_substring+0x148>
        return BR_ERROR;
    acf0:	|  |   moveq #1,d0
    acf2:	+--|-- bra.s ad54 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    acf4:	|  \-> move.l 36(sp),d0
    acf8:	|      sub.l 40(sp),d0
    acfc:	|      move.l d0,d1
    acfe:	|      move.l 40(sp),d0
    ad02:	|      add.l 44(sp),d0
    ad06:	|      move.l d1,-(sp)
    ad08:	|      move.l d0,-(sp)
    ad0a:	|      move.l 28(sp),-(sp)
    ad0e:	|      jsr 11cbc <memcpy>
    ad14:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    ad18:	|      move.l 36(sp),d0
    ad1c:	|      sub.l 40(sp),d0
    ad20:	|      movea.l 20(sp),a0
    ad24:	|      adda.l d0,a0
    ad26:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    ad28:	|      moveq #28,d0
    ad2a:	|      add.l 56(sp),d0
    ad2e:	|      move.l 20(sp),-(sp)
    ad32:	|      move.l d0,-(sp)
    ad34:	|      jsr ff54 <makeTextVar>
    ad3a:	|      addq.l #8,sp
    FreeVec(newString);
    ad3c:	|      move.l 20(sp),16(sp)
    ad42:	|      move.l 17b28 <SysBase>,d0
    ad48:	|      movea.l d0,a6
    ad4a:	|      movea.l 16(sp),a1
    ad4e:	|      jsr -690(a6)
    return BR_CONTINUE;
    ad52:	|      moveq #2,d0
}
    ad54:	\----> move.l (sp)+,d2
    ad56:	       movea.l (sp)+,a6
    ad58:	       lea 40(sp),sp
    ad5c:	       rts

0000ad5e <builtIn_stringLength>:

builtIn(stringLength)
{
    ad5e:	subq.l #8,sp
    ad60:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ad62:	movea.l 20(sp),a0
    ad66:	move.l 24(a0),d0
    ad6a:	move.l d0,-(sp)
    ad6c:	jsr 10308 <getTextFromAnyVar>
    ad72:	addq.l #4,sp
    ad74:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    ad78:	moveq #24,d0
    ad7a:	add.l 20(sp),d0
    ad7e:	move.l d0,-(sp)
    ad80:	jsr 10694 <trimStack>
    ad86:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    ad88:	move.l 8(sp),-(sp)
    ad8c:	jsr f21e <strlen>
    ad92:	addq.l #4,sp
    ad94:	move.l d0,d1
    ad96:	moveq #28,d0
    ad98:	add.l 20(sp),d0
    ad9c:	move.l d1,-(sp)
    ad9e:	pea 1 <_start+0x1>
    ada2:	move.l d0,-(sp)
    ada4:	jsr 10602 <setVariable>
    adaa:	lea 12(sp),sp
	FreeVec(newText);
    adae:	move.l 8(sp),4(sp)
    adb4:	move.l 17b28 <SysBase>,d0
    adba:	movea.l d0,a6
    adbc:	movea.l 4(sp),a1
    adc0:	jsr -690(a6)
	return BR_CONTINUE;
    adc4:	moveq #2,d0
}
    adc6:	movea.l (sp)+,a6
    adc8:	addq.l #8,sp
    adca:	rts

0000adcc <builtIn_newStack>:

builtIn(newStack)
{
    adcc:	             lea -12(sp),sp
    add0:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    add2:	             moveq #28,d0
    add4:	             add.l 24(sp),d0
    add8:	             move.l d0,-(sp)
    adda:	             jsr ff80 <unlinkVar>
    ade0:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    ade2:	             movea.l 24(sp),a0
    ade6:	             moveq #6,d0
    ade8:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    adec:	             moveq #12,d1
    adee:	             move.l d1,12(sp)
    adf2:	             clr.l 8(sp)
    adf6:	             move.l 17b28 <SysBase>,d0
    adfc:	             movea.l d0,a6
    adfe:	             move.l 12(sp),d0
    ae02:	             move.l 8(sp),d1
    ae06:	             jsr -684(a6)
    ae0a:	             move.l d0,4(sp)
    ae0e:	             move.l 4(sp),d0
    ae12:	             movea.l 24(sp),a0
    ae16:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    ae1a:	             movea.l 24(sp),a0
    ae1e:	             move.l 32(a0),d0
    ae22:	         /-- bne.s ae2a <builtIn_newStack+0x5e>
    ae24:	         |   moveq #1,d0
    ae26:	/--------|-- bra.w aebc <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    ae2a:	|        \-> movea.l 24(sp),a0
    ae2e:	|            movea.l 32(a0),a0
    ae32:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    ae34:	|            movea.l 24(sp),a0
    ae38:	|            movea.l 32(a0),a0
    ae3c:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    ae40:	|            movea.l 24(sp),a0
    ae44:	|            movea.l 32(a0),a0
    ae48:	|            moveq #1,d0
    ae4a:	|            move.l d0,8(a0)
    
    while (numParams--) {
    ae4e:	|     /----- bra.s aeaa <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    ae50:	|  /--|----> movea.l 24(sp),a0
    ae54:	|  |  |      move.l 32(a0),d0
    ae58:	|  |  |      move.l d0,d1
    ae5a:	|  |  |      movea.l 24(sp),a0
    ae5e:	|  |  |      move.l 24(a0),d0
    ae62:	|  |  |      move.l d1,-(sp)
    ae64:	|  |  |      move.l d0,-(sp)
    ae66:	|  |  |      jsr f56e <addVarToStack>
    ae6c:	|  |  |      addq.l #8,sp
    ae6e:	|  |  |      tst.w d0
    ae70:	|  |  |  /-- bne.s ae76 <builtIn_newStack+0xaa>
    ae72:	|  |  |  |   moveq #1,d0
    ae74:	+--|--|--|-- bra.s aebc <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    ae76:	|  |  |  \-> movea.l 24(sp),a0
    ae7a:	|  |  |      movea.l 32(a0),a0
    ae7e:	|  |  |      move.l 4(a0),d0
    ae82:	|  |  |  /-- bne.s ae9a <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    ae84:	|  |  |  |   movea.l 24(sp),a0
    ae88:	|  |  |  |   movea.l 32(a0),a1
    ae8c:	|  |  |  |   movea.l 24(sp),a0
    ae90:	|  |  |  |   movea.l 32(a0),a0
    ae94:	|  |  |  |   move.l (a1),d0
    ae96:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    ae9a:	|  |  |  \-> moveq #24,d0
    ae9c:	|  |  |      add.l 24(sp),d0
    aea0:	|  |  |      move.l d0,-(sp)
    aea2:	|  |  |      jsr 10694 <trimStack>
    aea8:	|  |  |      addq.l #4,sp
    while (numParams--) {
    aeaa:	|  |  \----> move.l 20(sp),d0
    aeae:	|  |         move.l d0,d1
    aeb0:	|  |         subq.l #1,d1
    aeb2:	|  |         move.l d1,20(sp)
    aeb6:	|  |         tst.l d0
    aeb8:	|  \-------- bne.s ae50 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    aeba:	|            moveq #2,d0
}
    aebc:	\----------> movea.l (sp)+,a6
    aebe:	             lea 12(sp),sp
    aec2:	             rts

0000aec4 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    aec4:	          movea.l 8(sp),a0
    aec8:	          movea.l 24(a0),a0
    aecc:	          move.l (a0),d0
    aece:	          moveq #6,d1
    aed0:	          cmp.l d0,d1
    aed2:	      /-- beq.s aeee <builtIn_stackSize+0x2a>
    aed4:	      |   moveq #10,d1
    aed6:	      |   cmp.l d0,d1
    aed8:	   /--|-- beq.s af32 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    aeda:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    aedc:	   |  |   pea 153c0 <incbin_player_end+0x8b4>
    aee2:	   |  |   jsr 11d08 <KPrintF>
    aee8:	   |  |   addq.l #4,sp
	return BR_ERROR;
    aeea:	   |  |   moveq #1,d0
    aeec:	/--|--|-- bra.s af6c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    aeee:	|  |  \-> movea.l 8(sp),a0
    aef2:	|  |      movea.l 24(a0),a0
    aef6:	|  |      move.l 4(a0),d0
    aefa:	|  |      move.l d0,-(sp)
    aefc:	|  |      jsr 10670 <stackSize>
    af02:	|  |      addq.l #4,sp
    af04:	|  |      move.l d0,d1
    af06:	|  |      moveq #28,d0
    af08:	|  |      add.l 8(sp),d0
    af0c:	|  |      move.l d1,-(sp)
    af0e:	|  |      pea 1 <_start+0x1>
    af12:	|  |      move.l d0,-(sp)
    af14:	|  |      jsr 10602 <setVariable>
    af1a:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    af1e:	|  |      moveq #24,d0
    af20:	|  |      add.l 8(sp),d0
    af24:	|  |      move.l d0,-(sp)
    af26:	|  |      jsr 10694 <trimStack>
    af2c:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    af2e:	|  |      moveq #2,d0
    af30:	+--|----- bra.s af6c <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    af32:	|  \----> movea.l 8(sp),a0
    af36:	|         movea.l 24(a0),a0
    af3a:	|         movea.l 4(a0),a0
    af3e:	|         move.l 4(a0),d1
    af42:	|         moveq #28,d0
    af44:	|         add.l 8(sp),d0
    af48:	|         move.l d1,-(sp)
    af4a:	|         pea 1 <_start+0x1>
    af4e:	|         move.l d0,-(sp)
    af50:	|         jsr 10602 <setVariable>
    af56:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    af5a:	|         moveq #24,d0
    af5c:	|         add.l 8(sp),d0
    af60:	|         move.l d0,-(sp)
    af62:	|         jsr 10694 <trimStack>
    af68:	|         addq.l #4,sp
			return BR_CONTINUE;
    af6a:	|         moveq #2,d0
}
    af6c:	\-------> rts

0000af6e <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    af6e:	       movea.l 8(sp),a0
    af72:	       movea.l 24(a0),a0
    af76:	       move.l (a0),d0
    af78:	       moveq #6,d1
    af7a:	       cmp.l d0,d1
    af7c:	   /-- beq.s af90 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    af7e:	   |   pea 153e9 <incbin_player_end+0x8dd>
    af84:	   |   jsr 11d08 <KPrintF>
    af8a:	   |   addq.l #4,sp
		return BR_ERROR;
    af8c:	   |   moveq #1,d0
    af8e:	/--|-- bra.s afc4 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    af90:	|  \-> moveq #28,d0
    af92:	|      add.l 8(sp),d0
    af96:	|      movea.l 8(sp),a0
    af9a:	|      move.l 24(a0),d1
    af9e:	|      move.l d0,-(sp)
    afa0:	|      move.l d1,-(sp)
    afa2:	|      jsr f838 <copyStack>
    afa8:	|      addq.l #8,sp
    afaa:	|      tst.w d0
    afac:	|  /-- bne.s afb2 <builtIn_copyStack+0x44>
    afae:	|  |   moveq #1,d0
    afb0:	+--|-- bra.s afc4 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    afb2:	|  \-> moveq #24,d0
    afb4:	|      add.l 8(sp),d0
    afb8:	|      move.l d0,-(sp)
    afba:	|      jsr 10694 <trimStack>
    afc0:	|      addq.l #4,sp
	return BR_CONTINUE;
    afc2:	|      moveq #2,d0
}
    afc4:	\----> rts

0000afc6 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    afc6:	       movea.l 8(sp),a0
    afca:	       movea.l 24(a0),a0
    afce:	       movea.l 8(a0),a0
    afd2:	       move.l (a0),d0
    afd4:	       moveq #6,d1
    afd6:	       cmp.l d0,d1
    afd8:	   /-- beq.s afee <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    afda:	   |   pea 15402 <incbin_player_end+0x8f6>
    afe0:	   |   jsr 11d08 <KPrintF>
    afe6:	   |   addq.l #4,sp
		return BR_ERROR;
    afe8:	   |   moveq #1,d0
    afea:	/--|-- bra.w b07c <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    afee:	|  \-> movea.l 8(sp),a0
    aff2:	|      movea.l 24(a0),a0
    aff6:	|      movea.l 8(a0),a0
    affa:	|      move.l 4(a0),d0
    affe:	|      move.l d0,d1
    b000:	|      movea.l 8(sp),a0
    b004:	|      move.l 24(a0),d0
    b008:	|      move.l d1,-(sp)
    b00a:	|      move.l d0,-(sp)
    b00c:	|      jsr f56e <addVarToStack>
    b012:	|      addq.l #8,sp
    b014:	|      tst.w d0
    b016:	|  /-- bne.s b01c <builtIn_pushToStack+0x56>
		return BR_ERROR;
    b018:	|  |   moveq #1,d0
    b01a:	+--|-- bra.s b07c <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    b01c:	|  \-> movea.l 8(sp),a0
    b020:	|      movea.l 24(a0),a0
    b024:	|      movea.l 8(a0),a0
    b028:	|      movea.l 4(a0),a0
    b02c:	|      movea.l (a0),a0
    b02e:	|      move.l 8(a0),d0
    b032:	|  /-- bne.s b05a <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    b034:	|  |   movea.l 8(sp),a0
    b038:	|  |   movea.l 24(a0),a0
    b03c:	|  |   movea.l 8(a0),a0
    b040:	|  |   movea.l 4(a0),a1
    b044:	|  |   movea.l 8(sp),a0
    b048:	|  |   movea.l 24(a0),a0
    b04c:	|  |   movea.l 8(a0),a0
    b050:	|  |   movea.l 4(a0),a0
    b054:	|  |   move.l (a1),d0
    b056:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    b05a:	|  \-> moveq #24,d0
    b05c:	|      add.l 8(sp),d0
    b060:	|      move.l d0,-(sp)
    b062:	|      jsr 10694 <trimStack>
    b068:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b06a:	|      moveq #24,d0
    b06c:	|      add.l 8(sp),d0
    b070:	|      move.l d0,-(sp)
    b072:	|      jsr 10694 <trimStack>
    b078:	|      addq.l #4,sp
	return BR_CONTINUE;
    b07a:	|      moveq #2,d0
}
    b07c:	\----> rts

0000b07e <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b07e:	             movea.l 8(sp),a0
    b082:	             movea.l 24(a0),a0
    b086:	             movea.l 8(a0),a0
    b08a:	             move.l (a0),d0
    b08c:	             moveq #6,d1
    b08e:	             cmp.l d0,d1
    b090:	         /-- beq.s b0a6 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    b092:	         |   pea 15402 <incbin_player_end+0x8f6>
    b098:	         |   jsr 11d08 <KPrintF>
    b09e:	         |   addq.l #4,sp
		return BR_ERROR;
    b0a0:	         |   moveq #1,d0
    b0a2:	/--------|-- bra.w b194 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    b0a6:	|        \-> movea.l 8(sp),a0
    b0aa:	|            movea.l 24(a0),a0
    b0ae:	|            movea.l 8(a0),a0
    b0b2:	|            movea.l 4(a0),a0
    b0b6:	|            move.l (a0),d0
    b0b8:	|     /----- bne.s b112 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    b0ba:	|     |      movea.l 8(sp),a0
    b0be:	|     |      movea.l 24(a0),a0
    b0c2:	|     |      movea.l 8(a0),a0
    b0c6:	|     |      move.l 4(a0),d0
    b0ca:	|     |      move.l d0,d1
    b0cc:	|     |      movea.l 8(sp),a0
    b0d0:	|     |      move.l 24(a0),d0
    b0d4:	|     |      move.l d1,-(sp)
    b0d6:	|     |      move.l d0,-(sp)
    b0d8:	|     |      jsr f56e <addVarToStack>
    b0de:	|     |      addq.l #8,sp
    b0e0:	|     |      tst.w d0
    b0e2:	|     |  /-- bne.s b0ea <builtIn_enqueue+0x6c>
			return BR_ERROR;
    b0e4:	|     |  |   moveq #1,d0
    b0e6:	+-----|--|-- bra.w b194 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    b0ea:	|     |  \-> movea.l 8(sp),a0
    b0ee:	|     |      movea.l 24(a0),a0
    b0f2:	|     |      movea.l 8(a0),a0
    b0f6:	|     |      movea.l 4(a0),a1
    b0fa:	|     |      movea.l 8(sp),a0
    b0fe:	|     |      movea.l 24(a0),a0
    b102:	|     |      movea.l 8(a0),a0
    b106:	|     |      movea.l 4(a0),a0
    b10a:	|     |      move.l (a1),d0
    b10c:	|     |      move.l d0,4(a0)
    b110:	|  /--|----- bra.s b172 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    b112:	|  |  \----> movea.l 8(sp),a0
    b116:	|  |         movea.l 24(a0),a0
    b11a:	|  |         movea.l 8(a0),a0
    b11e:	|  |         movea.l 4(a0),a0
    b122:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    b126:	|  |         move.l d0,d1
    b128:	|  |         addq.l #8,d1
    b12a:	|  |         movea.l 8(sp),a0
    b12e:	|  |         move.l 24(a0),d0
    b132:	|  |         move.l d1,-(sp)
    b134:	|  |         move.l d0,-(sp)
    b136:	|  |         jsr f56e <addVarToStack>
    b13c:	|  |         addq.l #8,sp
    b13e:	|  |         tst.w d0
    b140:	|  |     /-- bne.s b146 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    b142:	|  |     |   moveq #1,d0
    b144:	+--|-----|-- bra.s b194 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    b146:	|  |     \-> movea.l 8(sp),a0
    b14a:	|  |         movea.l 24(a0),a0
    b14e:	|  |         movea.l 8(a0),a0
    b152:	|  |         movea.l 4(a0),a0
    b156:	|  |         movea.l 4(a0),a1
    b15a:	|  |         movea.l 8(sp),a0
    b15e:	|  |         movea.l 24(a0),a0
    b162:	|  |         movea.l 8(a0),a0
    b166:	|  |         movea.l 4(a0),a0
    b16a:	|  |         move.l 8(a1),d0
    b16e:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    b172:	|  \-------> moveq #24,d0
    b174:	|            add.l 8(sp),d0
    b178:	|            move.l d0,-(sp)
    b17a:	|            jsr 10694 <trimStack>
    b180:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    b182:	|            moveq #24,d0
    b184:	|            add.l 8(sp),d0
    b188:	|            move.l d0,-(sp)
    b18a:	|            jsr 10694 <trimStack>
    b190:	|            addq.l #4,sp
	return BR_CONTINUE;
    b192:	|            moveq #2,d0
}
    b194:	\----------> rts

0000b196 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    b196:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b198:	       movea.l 12(sp),a0
    b19c:	       movea.l 24(a0),a0
    b1a0:	       movea.l 8(a0),a0
    b1a4:	       move.l (a0),d0
    b1a6:	       moveq #6,d1
    b1a8:	       cmp.l d0,d1
    b1aa:	   /-- beq.s b1c0 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    b1ac:	   |   pea 153e9 <incbin_player_end+0x8dd>
    b1b2:	   |   jsr 11d08 <KPrintF>
    b1b8:	   |   addq.l #4,sp
		return BR_ERROR;
    b1ba:	   |   moveq #1,d0
    b1bc:	/--|-- bra.w b256 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    b1c0:	|  \-> movea.l 12(sp),a0
    b1c4:	|      movea.l 24(a0),a0
    b1c8:	|      movea.l 8(a0),a0
    b1cc:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b1d0:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    b1d2:	|      movea.l 12(sp),a0
    b1d6:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b1da:	|      clr.l -(sp)
    b1dc:	|      move.l d1,-(sp)
    b1de:	|      move.l d0,-(sp)
    b1e0:	|      jsr f90e <deleteVarFromStack>
    b1e6:	|      lea 12(sp),sp
    b1ea:	|      move.l d0,d1
    b1ec:	|      moveq #28,d0
    b1ee:	|      add.l 12(sp),d0
    b1f2:	|      move.l d1,-(sp)
    b1f4:	|      pea 1 <_start+0x1>
    b1f8:	|      move.l d0,-(sp)
    b1fa:	|      jsr 10602 <setVariable>
    b200:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    b204:	|      movea.l 12(sp),a0
    b208:	|      movea.l 24(a0),a0
    b20c:	|      movea.l 8(a0),a0
    b210:	|      movea.l 4(a0),a0
    b214:	|      move.l (a0),d0
    b216:	|      movea.l 12(sp),a0
    b21a:	|      movea.l 24(a0),a0
    b21e:	|      movea.l 8(a0),a0
    b222:	|      movea.l 4(a0),a2
    b226:	|      move.l d0,-(sp)
    b228:	|      jsr 1064c <stackFindLast>
    b22e:	|      addq.l #4,sp
    b230:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    b234:	|      moveq #24,d0
    b236:	|      add.l 12(sp),d0
    b23a:	|      move.l d0,-(sp)
    b23c:	|      jsr 10694 <trimStack>
    b242:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b244:	|      moveq #24,d0
    b246:	|      add.l 12(sp),d0
    b24a:	|      move.l d0,-(sp)
    b24c:	|      jsr 10694 <trimStack>
    b252:	|      addq.l #4,sp
	return BR_CONTINUE;
    b254:	|      moveq #2,d0
}
    b256:	\----> movea.l (sp)+,a2
    b258:	       rts

0000b25a <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    b25a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b25c:	       movea.l 12(sp),a0
    b260:	       movea.l 24(a0),a0
    b264:	       movea.l 8(a0),a0
    b268:	       move.l (a0),d0
    b26a:	       moveq #6,d1
    b26c:	       cmp.l d0,d1
    b26e:	   /-- beq.s b284 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    b270:	   |   pea 153e9 <incbin_player_end+0x8dd>
    b276:	   |   jsr 11d08 <KPrintF>
    b27c:	   |   addq.l #4,sp
		return BR_ERROR;
    b27e:	   |   moveq #1,d0
    b280:	/--|-- bra.w b31c <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    b284:	|  \-> movea.l 12(sp),a0
    b288:	|      movea.l 24(a0),a0
    b28c:	|      movea.l 8(a0),a0
    b290:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b294:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    b296:	|      movea.l 12(sp),a0
    b29a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    b29e:	|      pea 1 <_start+0x1>
    b2a2:	|      move.l d1,-(sp)
    b2a4:	|      move.l d0,-(sp)
    b2a6:	|      jsr f90e <deleteVarFromStack>
    b2ac:	|      lea 12(sp),sp
    b2b0:	|      move.l d0,d1
    b2b2:	|      moveq #28,d0
    b2b4:	|      add.l 12(sp),d0
    b2b8:	|      move.l d1,-(sp)
    b2ba:	|      pea 1 <_start+0x1>
    b2be:	|      move.l d0,-(sp)
    b2c0:	|      jsr 10602 <setVariable>
    b2c6:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    b2ca:	|      movea.l 12(sp),a0
    b2ce:	|      movea.l 24(a0),a0
    b2d2:	|      movea.l 8(a0),a0
    b2d6:	|      movea.l 4(a0),a0
    b2da:	|      move.l (a0),d0
    b2dc:	|      movea.l 12(sp),a0
    b2e0:	|      movea.l 24(a0),a0
    b2e4:	|      movea.l 8(a0),a0
    b2e8:	|      movea.l 4(a0),a2
    b2ec:	|      move.l d0,-(sp)
    b2ee:	|      jsr 1064c <stackFindLast>
    b2f4:	|      addq.l #4,sp
    b2f6:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    b2fa:	|      moveq #24,d0
    b2fc:	|      add.l 12(sp),d0
    b300:	|      move.l d0,-(sp)
    b302:	|      jsr 10694 <trimStack>
    b308:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b30a:	|      moveq #24,d0
    b30c:	|      add.l 12(sp),d0
    b310:	|      move.l d0,-(sp)
    b312:	|      jsr 10694 <trimStack>
    b318:	|      addq.l #4,sp
	return BR_CONTINUE;
    b31a:	|      moveq #2,d0
}
    b31c:	\----> movea.l (sp)+,a2
    b31e:	       rts

0000b320 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b320:	       movea.l 8(sp),a0
    b324:	       movea.l 24(a0),a0
    b328:	       move.l (a0),d0
    b32a:	       moveq #6,d1
    b32c:	       cmp.l d0,d1
    b32e:	   /-- beq.s b342 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    b330:	   |   pea 153e9 <incbin_player_end+0x8dd>
    b336:	   |   jsr 11d08 <KPrintF>
    b33c:	   |   addq.l #4,sp
		return BR_ERROR;
    b33e:	   |   moveq #1,d0
    b340:	/--|-- bra.s b3ac <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b342:	|  \-> movea.l 8(sp),a0
    b346:	|      movea.l 24(a0),a0
    b34a:	|      movea.l 4(a0),a0
    b34e:	|      move.l (a0),d0
    b350:	|  /-- bne.s b364 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    b352:	|  |   pea 1541a <incbin_player_end+0x90e>
    b358:	|  |   jsr 11d08 <KPrintF>
    b35e:	|  |   addq.l #4,sp
		return BR_ERROR;
    b360:	|  |   moveq #1,d0
    b362:	+--|-- bra.s b3ac <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    b364:	|  \-> moveq #28,d0
    b366:	|      add.l 8(sp),d0
    b36a:	|      movea.l 8(sp),a0
    b36e:	|      movea.l 24(a0),a0
    b372:	|      movea.l 4(a0),a0
    b376:	|      move.l (a0),d1
    b378:	|      move.l d0,-(sp)
    b37a:	|      move.l d1,-(sp)
    b37c:	|      jsr 101ec <copyVariable>
    b382:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    b384:	|      movea.l 8(sp),a0
    b388:	|      movea.l 24(a0),a0
    b38c:	|      move.l 4(a0),d0
    b390:	|      move.l d0,-(sp)
    b392:	|      jsr 10694 <trimStack>
    b398:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b39a:	|      moveq #24,d0
    b39c:	|      add.l 8(sp),d0
    b3a0:	|      move.l d0,-(sp)
    b3a2:	|      jsr 10694 <trimStack>
    b3a8:	|      addq.l #4,sp
	return BR_CONTINUE;
    b3aa:	|      moveq #2,d0
}
    b3ac:	\----> rts

0000b3ae <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b3ae:	       movea.l 8(sp),a0
    b3b2:	       movea.l 24(a0),a0
    b3b6:	       move.l (a0),d0
    b3b8:	       moveq #6,d1
    b3ba:	       cmp.l d0,d1
    b3bc:	   /-- beq.s b3d0 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    b3be:	   |   pea 153e9 <incbin_player_end+0x8dd>
    b3c4:	   |   jsr 11d08 <KPrintF>
    b3ca:	   |   addq.l #4,sp
		return BR_ERROR;
    b3cc:	   |   moveq #1,d0
    b3ce:	/--|-- bra.s b424 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b3d0:	|  \-> movea.l 8(sp),a0
    b3d4:	|      movea.l 24(a0),a0
    b3d8:	|      movea.l 4(a0),a0
    b3dc:	|      move.l (a0),d0
    b3de:	|  /-- bne.s b3f2 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    b3e0:	|  |   pea 1541a <incbin_player_end+0x90e>
    b3e6:	|  |   jsr 11d08 <KPrintF>
    b3ec:	|  |   addq.l #4,sp
		return BR_ERROR;
    b3ee:	|  |   moveq #1,d0
    b3f0:	+--|-- bra.s b424 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    b3f2:	|  \-> moveq #28,d0
    b3f4:	|      add.l 8(sp),d0
    b3f8:	|      movea.l 8(sp),a0
    b3fc:	|      movea.l 24(a0),a0
    b400:	|      movea.l 4(a0),a0
    b404:	|      move.l (a0),d1
    b406:	|      move.l d0,-(sp)
    b408:	|      move.l d1,-(sp)
    b40a:	|      jsr 101ec <copyVariable>
    b410:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    b412:	|      moveq #24,d0
    b414:	|      add.l 8(sp),d0
    b418:	|      move.l d0,-(sp)
    b41a:	|      jsr 10694 <trimStack>
    b420:	|      addq.l #4,sp
	return BR_CONTINUE;
    b422:	|      moveq #2,d0
}
    b424:	\----> rts

0000b426 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b426:	       movea.l 8(sp),a0
    b42a:	       movea.l 24(a0),a0
    b42e:	       move.l (a0),d0
    b430:	       moveq #6,d1
    b432:	       cmp.l d0,d1
    b434:	   /-- beq.s b448 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    b436:	   |   pea 153e9 <incbin_player_end+0x8dd>
    b43c:	   |   jsr 11d08 <KPrintF>
    b442:	   |   addq.l #4,sp
		return BR_ERROR;
    b444:	   |   moveq #1,d0
    b446:	/--|-- bra.s b49e <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    b448:	|  \-> movea.l 8(sp),a0
    b44c:	|      movea.l 24(a0),a0
    b450:	|      movea.l 4(a0),a0
    b454:	|      move.l (a0),d0
    b456:	|  /-- bne.s b46a <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    b458:	|  |   pea 1541a <incbin_player_end+0x90e>
    b45e:	|  |   jsr 11d08 <KPrintF>
    b464:	|  |   addq.l #4,sp
		return BR_ERROR;
    b466:	|  |   moveq #1,d0
    b468:	+--|-- bra.s b49e <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    b46a:	|  \-> moveq #28,d0
    b46c:	|      add.l 8(sp),d0
    b470:	|      movea.l 8(sp),a0
    b474:	|      movea.l 24(a0),a0
    b478:	|      movea.l 4(a0),a0
    b47c:	|      move.l 4(a0),d1
    b480:	|      move.l d0,-(sp)
    b482:	|      move.l d1,-(sp)
    b484:	|      jsr 101ec <copyVariable>
    b48a:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    b48c:	|      moveq #24,d0
    b48e:	|      add.l 8(sp),d0
    b492:	|      move.l d0,-(sp)
    b494:	|      jsr 10694 <trimStack>
    b49a:	|      addq.l #4,sp
	return BR_CONTINUE;
    b49c:	|      moveq #2,d0
}
    b49e:	\----> rts

0000b4a0 <builtIn_random>:

builtIn(random)
{
    b4a0:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    b4a2:	       movea.l 12(sp),a0
    b4a6:	       move.l 24(a0),d0
    b4aa:	       move.l d0,-(sp)
    b4ac:	       pea 1 <_start+0x1>
    b4b0:	       move.l sp,d0
    b4b2:	       addq.l #8,d0
    b4b4:	       move.l d0,-(sp)
    b4b6:	       jsr fd32 <getValueType>
    b4bc:	       lea 12(sp),sp
    b4c0:	       tst.w d0
    b4c2:	   /-- bne.s b4c8 <builtIn_random+0x28>
		return BR_ERROR;
    b4c4:	   |   moveq #1,d0
    b4c6:	/--|-- bra.s b512 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    b4c8:	|  \-> moveq #24,d0
    b4ca:	|      add.l 12(sp),d0
    b4ce:	|      move.l d0,-(sp)
    b4d0:	|      jsr 10694 <trimStack>
    b4d6:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    b4d8:	|      move.l (sp),d0
    b4da:	|  /-- bgt.s b4e0 <builtIn_random+0x40>
    b4dc:	|  |   moveq #1,d0
    b4de:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    b4e0:	|  \-> jsr c58 <rand>
    b4e6:	|      move.l d0,d1
    b4e8:	|      move.l (sp),d0
    b4ea:	|      move.l d0,-(sp)
    b4ec:	|      move.l d1,-(sp)
    b4ee:	|      jsr 12794 <__umodsi3>
    b4f4:	|      addq.l #8,sp
    b4f6:	|      move.l d0,d1
    b4f8:	|      moveq #28,d0
    b4fa:	|      add.l 12(sp),d0
    b4fe:	|      move.l d1,-(sp)
    b500:	|      pea 1 <_start+0x1>
    b504:	|      move.l d0,-(sp)
    b506:	|      jsr 10602 <setVariable>
    b50c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b510:	|      moveq #2,d0
}
    b512:	\----> addq.l #4,sp
    b514:	       rts

0000b516 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    b516:	nop
    b518:	rts

0000b51a <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    b51a:	moveq #2,d0
}
    b51c:	rts

0000b51e <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    b51e:	moveq #2,d0
}
    b520:	rts

0000b522 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    b522:	moveq #2,d0
}
    b524:	rts

0000b526 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    b526:	moveq #2,d0
}
    b528:	rts

0000b52a <builtIn_setFont>:


builtIn(setFont)
{
    b52a:	       lea -16(sp),sp
    b52e:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    b530:	       movea.l 28(sp),a0
    b534:	       move.l 24(a0),d0
    b538:	       move.l d0,-(sp)
    b53a:	       pea 1 <_start+0x1>
    b53e:	       lea 12(sp),a0
    b542:	       move.l a0,-(sp)
    b544:	       jsr fd32 <getValueType>
    b54a:	       lea 12(sp),sp
    b54e:	       tst.w d0
    b550:	   /-- bne.s b558 <builtIn_setFont+0x2e>
    b552:	   |   moveq #1,d0
    b554:	/--|-- bra.w b606 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    b558:	|  \-> moveq #24,d0
    b55a:	|      add.l 28(sp),d0
    b55e:	|      move.l d0,-(sp)
    b560:	|      jsr 10694 <trimStack>
    b566:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    b568:	|      movea.l 28(sp),a0
    b56c:	|      move.l 24(a0),d0
    b570:	|      move.l d0,-(sp)
    b572:	|      jsr 10308 <getTextFromAnyVar>
    b578:	|      addq.l #4,sp
    b57a:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    b57e:	|  /-- bne.s b586 <builtIn_setFont+0x5c>
    b580:	|  |   moveq #1,d0
    b582:	+--|-- bra.w b606 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    b586:	|  \-> moveq #24,d0
    b588:	|      add.l 28(sp),d0
    b58c:	|      move.l d0,-(sp)
    b58e:	|      jsr 10694 <trimStack>
    b594:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    b596:	|      movea.l 28(sp),a0
    b59a:	|      move.l 24(a0),d0
    b59e:	|      move.l d0,-(sp)
    b5a0:	|      pea 5 <_start+0x5>
    b5a4:	|      lea 16(sp),a0
    b5a8:	|      move.l a0,-(sp)
    b5aa:	|      jsr fd32 <getValueType>
    b5b0:	|      lea 12(sp),sp
    b5b4:	|      tst.w d0
    b5b6:	|  /-- bne.s b5bc <builtIn_setFont+0x92>
    b5b8:	|  |   moveq #1,d0
    b5ba:	+--|-- bra.s b606 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    b5bc:	|  \-> moveq #24,d0
    b5be:	|      add.l 28(sp),d0
    b5c2:	|      move.l d0,-(sp)
    b5c4:	|      jsr 10694 <trimStack>
    b5ca:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    b5cc:	|      move.l 4(sp),d1
    b5d0:	|      move.l 8(sp),d0
    b5d4:	|      move.l d1,-(sp)
    b5d6:	|      move.l 20(sp),-(sp)
    b5da:	|      move.l d0,-(sp)
    b5dc:	|      jsr 10708 <loadFont>
    b5e2:	|      lea 12(sp),sp
    b5e6:	|      tst.w d0
    b5e8:	|  /-- bne.s b5ee <builtIn_setFont+0xc4>
    b5ea:	|  |   moveq #1,d0
    b5ec:	+--|-- bra.s b606 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    b5ee:	|  \-> move.l 16(sp),12(sp)
    b5f4:	|      move.l 17b28 <SysBase>,d0
    b5fa:	|      movea.l d0,a6
    b5fc:	|      movea.l 12(sp),a1
    b600:	|      jsr -690(a6)

    return BR_CONTINUE;
    b604:	|      moveq #2,d0
}
    b606:	\----> movea.l (sp)+,a6
    b608:	       lea 16(sp),sp
    b60c:	       rts

0000b60e <builtIn_inFont>:

builtIn(inFont)
{
    b60e:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    b610:	       movea.l 12(sp),a0
    b614:	       move.l 24(a0),d0
    b618:	       move.l d0,-(sp)
    b61a:	       jsr 10308 <getTextFromAnyVar>
    b620:	       addq.l #4,sp
    b622:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    b624:	   /-- bne.s b62a <builtIn_inFont+0x1c>
    b626:	   |   moveq #1,d0
    b628:	/--|-- bra.s b660 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    b62a:	|  \-> moveq #24,d0
    b62c:	|      add.l 12(sp),d0
    b630:	|      move.l d0,-(sp)
    b632:	|      jsr 10694 <trimStack>
    b638:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    b63a:	|      move.l (sp),-(sp)
    b63c:	|      jsr 106dc <isInFont>
    b642:	|      addq.l #4,sp
    b644:	|      movea.w d0,a0
    b646:	|      moveq #28,d0
    b648:	|      add.l 12(sp),d0
    b64c:	|      move.l a0,-(sp)
    b64e:	|      pea 1 <_start+0x1>
    b652:	|      move.l d0,-(sp)
    b654:	|      jsr 10602 <setVariable>
    b65a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    b65e:	|      moveq #2,d0
}
    b660:	\----> addq.l #4,sp
    b662:	       rts

0000b664 <builtIn_pasteString>:
    trimStack(&fun->stack);
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    fixFont(pastePalette);
    pasteStringToBackdrop(newText, x, y, pastePalette);
    FreeVec(newText); Todo Amigize this*/
    return BR_CONTINUE;
    b664:	moveq #2,d0
}
    b666:	rts

0000b668 <builtIn_anim>:

builtIn(anim)
{
	UNUSEDALL
	if (numParams < 2) {
    b668:	       moveq #1,d0
    b66a:	       cmp.l 4(sp),d0
    b66e:	/----- blt.s b682 <builtIn_anim+0x1a>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    b670:	|      pea 1542d <incbin_player_end+0x921>
    b676:	|      jsr 11d08 <KPrintF>
    b67c:	|      addq.l #4,sp
		return BR_ERROR;
    b67e:	|      moveq #1,d0
    b680:	|  /-- bra.s b692 <builtIn_anim+0x2a>
	}

	KPrintF("Not implemented yet on Amiga");
    b682:	\--|-> pea 15467 <incbin_player_end+0x95b>
    b688:	   |   jsr 11d08 <KPrintF>
    b68e:	   |   addq.l #4,sp
	setBankFile (ba, sprBanky);

	// Return value
	newAnimationVariable (&fun -> reg, ba);Todo Amigize This*/

	return BR_CONTINUE;
    b690:	   |   moveq #2,d0
}
    b692:	   \-> rts

0000b694 <builtIn_costume>:

builtIn(costume)
{
    b694:	          lea -32(sp),sp
    b698:	          move.l a6,-(sp)
    b69a:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    b69c:	          moveq #8,d0
    b69e:	          move.l d0,32(sp)
    b6a2:	          clr.l 28(sp)
    b6a6:	          move.l 17b28 <SysBase>,d0
    b6ac:	          movea.l d0,a6
    b6ae:	          move.l 32(sp),d0
    b6b2:	          move.l 28(sp),d1
    b6b6:	          jsr -684(a6)
    b6ba:	          move.l d0,24(sp)
    b6be:	          move.l 24(sp),d0
    b6c2:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    b6c6:	      /-- bne.s b6ce <builtIn_costume+0x3a>
    b6c8:	      |   moveq #1,d0
    b6ca:	/-----|-- bra.w b7b6 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    b6ce:	|     \-> move.l 44(sp),d0
    b6d2:	|         pea 3 <_start+0x3>
    b6d6:	|         move.l d0,-(sp)
    b6d8:	|         jsr 12738 <__divsi3>
    b6de:	|         addq.l #8,sp
    b6e0:	|         movea.l 20(sp),a0
    b6e4:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    b6e8:	|         tst.l 44(sp)
    b6ec:	|     /-- beq.s b702 <builtIn_costume+0x6e>
    b6ee:	|     |   movea.l 20(sp),a0
    b6f2:	|     |   move.l 4(a0),d1
    b6f6:	|     |   move.l d1,d0
    b6f8:	|     |   add.l d0,d0
    b6fa:	|     |   add.l d1,d0
    b6fc:	|     |   cmp.l 44(sp),d0
    b700:	|  /--|-- beq.s b716 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    b702:	|  |  \-> pea 15484 <incbin_player_end+0x978>
    b708:	|  |      jsr 11d08 <KPrintF>
    b70e:	|  |      addq.l #4,sp
        return BR_ERROR;
    b710:	|  |      moveq #1,d0
    b712:	+--|----- bra.w b7b6 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    b716:	|  \----> move.l 44(sp),d0
    b71a:	|         add.l d0,d0
    b71c:	|         add.l d0,d0
    b71e:	|         move.l d0,16(sp)
    b722:	|         clr.l 12(sp)
    b726:	|         move.l 17b28 <SysBase>,d0
    b72c:	|         movea.l d0,a6
    b72e:	|         move.l 16(sp),d0
    b732:	|         move.l 12(sp),d1
    b736:	|         jsr -684(a6)
    b73a:	|         move.l d0,8(sp)
    b73e:	|         move.l 8(sp),d0
    b742:	|         movea.l 20(sp),a0
    b746:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    b748:	|         movea.l 20(sp),a0
    b74c:	|         move.l (a0),d0
    b74e:	|     /-- bne.s b754 <builtIn_costume+0xc0>
    b750:	|     |   moveq #1,d0
    b752:	+-----|-- bra.s b7b6 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    b754:	|     \-> move.l 44(sp),d0
    b758:	|         subq.l #1,d0
    b75a:	|         move.l d0,36(sp)
    b75e:	|     /-- bra.s b79a <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    b760:	|  /--|-> movea.l 48(sp),a0
    b764:	|  |  |   move.l 24(a0),d0
    b768:	|  |  |   movea.l 20(sp),a0
    b76c:	|  |  |   movea.l (a0),a0
    b76e:	|  |  |   move.l 36(sp),d1
    b772:	|  |  |   add.l d1,d1
    b774:	|  |  |   add.l d1,d1
    b776:	|  |  |   lea (0,a0,d1.l),a2
    b77a:	|  |  |   move.l d0,-(sp)
    b77c:	|  |  |   jsr 1020a <getAnimationFromVar>
    b782:	|  |  |   addq.l #4,sp
    b784:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    b786:	|  |  |   moveq #24,d0
    b788:	|  |  |   add.l 48(sp),d0
    b78c:	|  |  |   move.l d0,-(sp)
    b78e:	|  |  |   jsr 10694 <trimStack>
    b794:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    b796:	|  |  |   subq.l #1,36(sp)
    b79a:	|  |  \-> tst.l 36(sp)
    b79e:	|  \----- bge.s b760 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    b7a0:	|         moveq #28,d0
    b7a2:	|         add.l 48(sp),d0
    b7a6:	|         move.l 20(sp),-(sp)
    b7aa:	|         move.l d0,-(sp)
    b7ac:	|         jsr 105e0 <newCostumeVariable>
    b7b2:	|         addq.l #8,sp
    return BR_CONTINUE;
    b7b4:	|         moveq #2,d0
}
    b7b6:	\-------> movea.l (sp)+,a2
    b7b8:	          movea.l (sp)+,a6
    b7ba:	          lea 32(sp),sp
    b7be:	          rts

0000b7c0 <builtIn_launch>:

builtIn(launch)
{
    b7c0:	          lea -20(sp),sp
    b7c4:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    b7c6:	          movea.l 32(sp),a0
    b7ca:	          move.l 24(a0),d0
    b7ce:	          move.l d0,-(sp)
    b7d0:	          jsr 10308 <getTextFromAnyVar>
    b7d6:	          addq.l #4,sp
    b7d8:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    b7dc:	      /-- bne.s b7e4 <builtIn_launch+0x24>
    b7de:	      |   moveq #1,d0
    b7e0:	/-----|-- bra.w b912 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    b7e4:	|     \-> move.l 20(sp),-(sp)
    b7e8:	|         jsr 2fe <encodeFilename>
    b7ee:	|         addq.l #4,sp
    b7f0:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    b7f4:	|         moveq #24,d0
    b7f6:	|         add.l 32(sp),d0
    b7fa:	|         move.l d0,-(sp)
    b7fc:	|         jsr 10694 <trimStack>
    b802:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    b804:	|         movea.l 20(sp),a0
    b808:	|         move.b (a0),d0
    b80a:	|         cmpi.b #104,d0
    b80e:	|  /----- bne.s b878 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    b810:	|  |      movea.l 20(sp),a0
    b814:	|  |      addq.l #1,a0
    b816:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    b818:	|  |      cmpi.b #116,d0
    b81c:	|  +----- bne.s b878 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    b81e:	|  |      movea.l 20(sp),a0
    b822:	|  |      addq.l #2,a0
    b824:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    b826:	|  |      cmpi.b #116,d0
    b82a:	|  +----- bne.s b878 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    b82c:	|  |      movea.l 20(sp),a0
    b830:	|  |      addq.l #3,a0
    b832:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    b834:	|  |      cmpi.b #112,d0
    b838:	|  +----- bne.s b878 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    b83a:	|  |      movea.l 20(sp),a0
    b83e:	|  |      addq.l #4,a0
    b840:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    b842:	|  |      cmpi.b #58,d0
    b846:	|  |  /-- beq.s b864 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    b848:	|  |  |   movea.l 20(sp),a0
    b84c:	|  |  |   addq.l #4,a0
    b84e:	|  |  |   move.b (a0),d0
    b850:	|  |  |   cmpi.b #115,d0
    b854:	|  +--|-- bne.s b878 <builtIn_launch+0xb8>
    b856:	|  |  |   movea.l 20(sp),a0
    b85a:	|  |  |   addq.l #5,a0
    b85c:	|  |  |   move.b (a0),d0
    b85e:	|  |  |   cmpi.b #58,d0
    b862:	|  +--|-- bne.s b878 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    b864:	|  |  \-> move.l 20(sp),-(sp)
    b868:	|  |      jsr b8 <copyString>
    b86e:	|  |      addq.l #4,sp
    b870:	|  |      move.l d0,17bd8 <launchMe>
    b876:	|  |  /-- bra.s b8ca <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    b878:	|  \--|-> move.l 17a3c <gamePath>,d0
    b87e:	|     |   pea 154cf <incbin_player_end+0x9c3>
    b884:	|     |   move.l d0,-(sp)
    b886:	|     |   jsr f25e <joinStrings>
    b88c:	|     |   addq.l #8,sp
    b88e:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    b892:	|     |   move.l 16(sp),-(sp)
    b896:	|     |   move.l 16(sp),-(sp)
    b89a:	|     |   jsr f25e <joinStrings>
    b8a0:	|     |   addq.l #8,sp
    b8a2:	|     |   move.l d0,17bd8 <launchMe>
        FreeVec(newText);
    b8a8:	|     |   move.l 16(sp),8(sp)
    b8ae:	|     |   move.l 17b28 <SysBase>,d0
    b8b4:	|     |   movea.l d0,a6
    b8b6:	|     |   movea.l 8(sp),a1
    b8ba:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    b8be:	|     |   move.l 17bd8 <launchMe>,d0
    b8c4:	|     +-- bne.s b8ca <builtIn_launch+0x10a>
    b8c6:	|     |   moveq #1,d0
    b8c8:	+-----|-- bra.s b912 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    b8ca:	|     \-> move.l 20(sp),4(sp)
    b8d0:	|         move.l 17b28 <SysBase>,d0
    b8d6:	|         movea.l d0,a6
    b8d8:	|         movea.l 4(sp),a1
    b8dc:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    b8e0:	|         clr.l -(sp)
    b8e2:	|         jsr 106a <setGraphicsWindow>
    b8e8:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    b8ea:	|         moveq #28,d0
    b8ec:	|         add.l 32(sp),d0
    b8f0:	|         pea 1 <_start+0x1>
    b8f4:	|         pea 1 <_start+0x1>
    b8f8:	|         move.l d0,-(sp)
    b8fa:	|         jsr 10602 <setVariable>
    b900:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    b904:	|         moveq #28,d0
    b906:	|         add.l 32(sp),d0
    b90a:	|         move.l d0,17bdc <launchResult>

    return BR_KEEP_AND_PAUSE;
    b910:	|         moveq #0,d0
}
    b912:	\-------> movea.l (sp)+,a6
    b914:	          lea 20(sp),sp
    b918:	          rts

0000b91a <builtIn_pause>:

builtIn(pause)
{
    b91a:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b91c:	       movea.l 12(sp),a0
    b920:	       move.l 24(a0),d0
    b924:	       move.l d0,-(sp)
    b926:	       pea 1 <_start+0x1>
    b92a:	       move.l sp,d0
    b92c:	       addq.l #8,d0
    b92e:	       move.l d0,-(sp)
    b930:	       jsr fd32 <getValueType>
    b936:	       lea 12(sp),sp
    b93a:	       tst.w d0
    b93c:	   /-- bne.s b942 <builtIn_pause+0x28>
    b93e:	   |   moveq #1,d0
    b940:	/--|-- bra.s b970 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    b942:	|  \-> moveq #24,d0
    b944:	|      add.l 12(sp),d0
    b948:	|      move.l d0,-(sp)
    b94a:	|      jsr 10694 <trimStack>
    b950:	|      addq.l #4,sp
	if (theTime > 0) {
    b952:	|      move.l (sp),d0
    b954:	|  /-- ble.s b96e <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    b956:	|  |   move.l (sp),d0
    b958:	|  |   subq.l #1,d0
    b95a:	|  |   movea.l 12(sp),a0
    b95e:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    b962:	|  |   movea.l 12(sp),a0
    b966:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    b96a:	|  |   moveq #0,d0
    b96c:	+--|-- bra.s b970 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    b96e:	|  \-> moveq #2,d0
}
    b970:	\----> addq.l #4,sp
    b972:	       rts

0000b974 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    b974:	jsr 1c24 <completeTimers>
	return BR_CONTINUE;
    b97a:	moveq #2,d0
}
    b97c:	rts

0000b97e <builtIn_callEvent>:

builtIn(callEvent)
{
    b97e:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    b982:	       movea.l 20(sp),a0
    b986:	       move.l 24(a0),d0
    b98a:	       move.l d0,-(sp)
    b98c:	       pea 7 <_start+0x7>
    b990:	       lea 8(sp),a0
    b994:	       move.l a0,-(sp)
    b996:	       jsr fd32 <getValueType>
    b99c:	       lea 12(sp),sp
    b9a0:	       tst.w d0
    b9a2:	   /-- bne.s b9aa <builtIn_callEvent+0x2c>
    b9a4:	   |   moveq #1,d0
    b9a6:	/--|-- bra.w ba40 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    b9aa:	|  \-> moveq #24,d0
    b9ac:	|      add.l 20(sp),d0
    b9b0:	|      move.l d0,-(sp)
    b9b2:	|      jsr 10694 <trimStack>
    b9b8:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    b9ba:	|      movea.l 20(sp),a0
    b9be:	|      move.l 24(a0),d0
    b9c2:	|      move.l d0,-(sp)
    b9c4:	|      pea 7 <_start+0x7>
    b9c8:	|      moveq #12,d0
    b9ca:	|      add.l sp,d0
    b9cc:	|      move.l d0,-(sp)
    b9ce:	|      jsr fd32 <getValueType>
    b9d4:	|      lea 12(sp),sp
    b9d8:	|      tst.w d0
    b9da:	|  /-- bne.s b9e0 <builtIn_callEvent+0x62>
    b9dc:	|  |   moveq #1,d0
    b9de:	+--|-- bra.s ba40 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    b9e0:	|  \-> moveq #24,d0
    b9e2:	|      add.l 20(sp),d0
    b9e6:	|      move.l d0,-(sp)
    b9e8:	|      jsr 10694 <trimStack>
    b9ee:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    b9f0:	|      move.l (sp),d1
    b9f2:	|      move.l 4(sp),d0
    b9f6:	|      move.l d1,-(sp)
    b9f8:	|      move.l d0,-(sp)
    b9fa:	|      jsr 8d34 <getCombinationFunction>
    ba00:	|      addq.l #8,sp
    ba02:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    ba06:	|  /-- beq.s ba26 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    ba08:	|  |   moveq #28,d0
    ba0a:	|  |   add.l 20(sp),d0
    ba0e:	|  |   move.l 8(sp),-(sp)
    ba12:	|  |   pea 2 <_start+0x2>
    ba16:	|  |   move.l d0,-(sp)
    ba18:	|  |   jsr 10602 <setVariable>
    ba1e:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    ba22:	|  |   moveq #4,d0
    ba24:	+--|-- bra.s ba40 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    ba26:	|  \-> moveq #28,d0
    ba28:	|      add.l 20(sp),d0
    ba2c:	|      clr.l -(sp)
    ba2e:	|      pea 1 <_start+0x1>
    ba32:	|      move.l d0,-(sp)
    ba34:	|      jsr 10602 <setVariable>
    ba3a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ba3e:	|      moveq #2,d0
}
    ba40:	\----> lea 12(sp),sp
    ba44:	       rts

0000ba46 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    ba46:	move.w #1,17be8 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    ba4e:	moveq #2,d0
}
    ba50:	rts

0000ba52 <builtIn__rem_movieStart>:
// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	/*trimStack (&fun -> stack);*/
	KPrintF("Movie Stuff not supported on Amiga");
    ba52:	pea 154d1 <incbin_player_end+0x9c5>
    ba58:	jsr 11d08 <KPrintF>
    ba5e:	addq.l #4,sp
	return BR_CONTINUE;
    ba60:	moveq #2,d0
}
    ba62:	rts

0000ba64 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    ba64:	pea 154d1 <incbin_player_end+0x9c5>
    ba6a:	jsr 11d08 <KPrintF>
    ba70:	addq.l #4,sp
	return BR_CONTINUE;
    ba72:	moveq #2,d0
}
    ba74:	rts

0000ba76 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    ba76:	pea 154d1 <incbin_player_end+0x9c5>
    ba7c:	jsr 11d08 <KPrintF>
    ba82:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    ba84:	moveq #2,d0
}
    ba86:	rts

0000ba88 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    ba88:	pea 154d1 <incbin_player_end+0x9c5>
    ba8e:	jsr 11d08 <KPrintF>
    ba94:	addq.l #4,sp
	return BR_CONTINUE;
    ba96:	moveq #2,d0
}
    ba98:	rts

0000ba9a <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    ba9a:	pea 154d1 <incbin_player_end+0x9c5>
    baa0:	jsr 11d08 <KPrintF>
    baa6:	addq.l #4,sp
	return BR_CONTINUE;
    baa8:	moveq #2,d0
}
    baaa:	rts

0000baac <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    baac:	pea 154d1 <incbin_player_end+0x9c5>
    bab2:	jsr 11d08 <KPrintF>
    bab8:	addq.l #4,sp
	return BR_CONTINUE;
    baba:	moveq #2,d0
}
    babc:	rts

0000babe <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    babe:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bac2:	       movea.l 20(sp),a0
    bac6:	       move.l 24(a0),d0
    baca:	       move.l d0,-(sp)
    bacc:	       pea 1 <_start+0x1>
    bad0:	       moveq #16,d0
    bad2:	       add.l sp,d0
    bad4:	       move.l d0,-(sp)
    bad6:	       jsr fd32 <getValueType>
    badc:	       lea 12(sp),sp
    bae0:	       tst.w d0
    bae2:	   /-- bne.s baea <builtIn_startMusic+0x2c>
    bae4:	   |   moveq #1,d0
    bae6:	/--|-- bra.w bb8a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    baea:	|  \-> moveq #24,d0
    baec:	|      add.l 20(sp),d0
    baf0:	|      move.l d0,-(sp)
    baf2:	|      jsr 10694 <trimStack>
    baf8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bafa:	|      movea.l 20(sp),a0
    bafe:	|      move.l 24(a0),d0
    bb02:	|      move.l d0,-(sp)
    bb04:	|      pea 1 <_start+0x1>
    bb08:	|      moveq #12,d0
    bb0a:	|      add.l sp,d0
    bb0c:	|      move.l d0,-(sp)
    bb0e:	|      jsr fd32 <getValueType>
    bb14:	|      lea 12(sp),sp
    bb18:	|      tst.w d0
    bb1a:	|  /-- bne.s bb20 <builtIn_startMusic+0x62>
    bb1c:	|  |   moveq #1,d0
    bb1e:	+--|-- bra.s bb8a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    bb20:	|  \-> moveq #24,d0
    bb22:	|      add.l 20(sp),d0
    bb26:	|      move.l d0,-(sp)
    bb28:	|      jsr 10694 <trimStack>
    bb2e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    bb30:	|      movea.l 20(sp),a0
    bb34:	|      move.l 24(a0),d0
    bb38:	|      move.l d0,-(sp)
    bb3a:	|      pea 5 <_start+0x5>
    bb3e:	|      lea 8(sp),a0
    bb42:	|      move.l a0,-(sp)
    bb44:	|      jsr fd32 <getValueType>
    bb4a:	|      lea 12(sp),sp
    bb4e:	|      tst.w d0
    bb50:	|  /-- bne.s bb56 <builtIn_startMusic+0x98>
    bb52:	|  |   moveq #1,d0
    bb54:	+--|-- bra.s bb8a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    bb56:	|  \-> moveq #24,d0
    bb58:	|      add.l 20(sp),d0
    bb5c:	|      move.l d0,-(sp)
    bb5e:	|      jsr 10694 <trimStack>
    bb64:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    bb66:	|      movea.l 8(sp),a0
    bb6a:	|      move.l 4(sp),d1
    bb6e:	|      move.l (sp),d0
    bb70:	|      move.l a0,-(sp)
    bb72:	|      move.l d1,-(sp)
    bb74:	|      move.l d0,-(sp)
    bb76:	|      jsr 88ee <playMOD>
    bb7c:	|      lea 12(sp),sp
    bb80:	|      tst.w d0
    bb82:	|  /-- bne.s bb88 <builtIn_startMusic+0xca>
    bb84:	|  |   moveq #2,d0
    bb86:	+--|-- bra.s bb8a <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    bb88:	|  \-> moveq #2,d0
}
    bb8a:	\----> lea 12(sp),sp
    bb8e:	       rts

0000bb90 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    bb90:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bb92:	       movea.l 12(sp),a0
    bb96:	       move.l 24(a0),d0
    bb9a:	       move.l d0,-(sp)
    bb9c:	       pea 1 <_start+0x1>
    bba0:	       move.l sp,d0
    bba2:	       addq.l #8,d0
    bba4:	       move.l d0,-(sp)
    bba6:	       jsr fd32 <getValueType>
    bbac:	       lea 12(sp),sp
    bbb0:	       tst.w d0
    bbb2:	   /-- bne.s bbb8 <builtIn_stopMusic+0x28>
    bbb4:	   |   moveq #1,d0
    bbb6:	/--|-- bra.s bbd6 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    bbb8:	|  \-> moveq #24,d0
    bbba:	|      add.l 12(sp),d0
    bbbe:	|      move.l d0,-(sp)
    bbc0:	|      jsr 10694 <trimStack>
    bbc6:	|      addq.l #4,sp
	stopMOD (v);
    bbc8:	|      move.l (sp),d0
    bbca:	|      move.l d0,-(sp)
    bbcc:	|      jsr 898a <stopMOD>
    bbd2:	|      addq.l #4,sp
	return BR_CONTINUE;
    bbd4:	|      moveq #2,d0
}
    bbd6:	\----> addq.l #4,sp
    bbd8:	       rts

0000bbda <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    bbda:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bbdc:	       movea.l 16(sp),a0
    bbe0:	       move.l 24(a0),d0
    bbe4:	       move.l d0,-(sp)
    bbe6:	       pea 1 <_start+0x1>
    bbea:	       move.l sp,d0
    bbec:	       addq.l #8,d0
    bbee:	       move.l d0,-(sp)
    bbf0:	       jsr fd32 <getValueType>
    bbf6:	       lea 12(sp),sp
    bbfa:	       tst.w d0
    bbfc:	   /-- bne.s bc02 <builtIn_setMusicVolume+0x28>
    bbfe:	   |   moveq #1,d0
    bc00:	/--|-- bra.s bc5c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    bc02:	|  \-> moveq #24,d0
    bc04:	|      add.l 16(sp),d0
    bc08:	|      move.l d0,-(sp)
    bc0a:	|      jsr 10694 <trimStack>
    bc10:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bc12:	|      movea.l 16(sp),a0
    bc16:	|      move.l 24(a0),d0
    bc1a:	|      move.l d0,-(sp)
    bc1c:	|      pea 1 <_start+0x1>
    bc20:	|      moveq #12,d0
    bc22:	|      add.l sp,d0
    bc24:	|      move.l d0,-(sp)
    bc26:	|      jsr fd32 <getValueType>
    bc2c:	|      lea 12(sp),sp
    bc30:	|      tst.w d0
    bc32:	|  /-- bne.s bc38 <builtIn_setMusicVolume+0x5e>
    bc34:	|  |   moveq #1,d0
    bc36:	+--|-- bra.s bc5c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    bc38:	|  \-> moveq #24,d0
    bc3a:	|      add.l 16(sp),d0
    bc3e:	|      move.l d0,-(sp)
    bc40:	|      jsr 10694 <trimStack>
    bc46:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    bc48:	|      move.l (sp),d1
    bc4a:	|      move.l 4(sp),d0
    bc4e:	|      move.l d1,-(sp)
    bc50:	|      move.l d0,-(sp)
    bc52:	|      jsr 8970 <setMusicVolume>
    bc58:	|      addq.l #8,sp
	return BR_CONTINUE;
    bc5a:	|      moveq #2,d0
}
    bc5c:	\----> addq.l #8,sp
    bc5e:	       rts

0000bc60 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    bc60:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bc62:	       movea.l 12(sp),a0
    bc66:	       move.l 24(a0),d0
    bc6a:	       move.l d0,-(sp)
    bc6c:	       pea 1 <_start+0x1>
    bc70:	       move.l sp,d0
    bc72:	       addq.l #8,d0
    bc74:	       move.l d0,-(sp)
    bc76:	       jsr fd32 <getValueType>
    bc7c:	       lea 12(sp),sp
    bc80:	       tst.w d0
    bc82:	   /-- bne.s bc88 <builtIn_setDefaultMusicVolume+0x28>
    bc84:	   |   moveq #1,d0
    bc86:	/--|-- bra.s bca6 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    bc88:	|  \-> moveq #24,d0
    bc8a:	|      add.l 12(sp),d0
    bc8e:	|      move.l d0,-(sp)
    bc90:	|      jsr 10694 <trimStack>
    bc96:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    bc98:	|      move.l (sp),d0
    bc9a:	|      move.l d0,-(sp)
    bc9c:	|      jsr 8954 <setDefaultMusicVolume>
    bca2:	|      addq.l #4,sp
	return BR_CONTINUE;
    bca4:	|      moveq #2,d0
}
    bca6:	\----> addq.l #4,sp
    bca8:	       rts

0000bcaa <builtIn_playSound>:

builtIn(playSound)
{
    bcaa:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    bcac:	       movea.l 12(sp),a0
    bcb0:	       move.l 24(a0),d0
    bcb4:	       move.l d0,-(sp)
    bcb6:	       pea 5 <_start+0x5>
    bcba:	       move.l sp,d0
    bcbc:	       addq.l #8,d0
    bcbe:	       move.l d0,-(sp)
    bcc0:	       jsr fd32 <getValueType>
    bcc6:	       lea 12(sp),sp
    bcca:	       tst.w d0
    bccc:	   /-- bne.s bcd2 <builtIn_playSound+0x28>
    bcce:	   |   moveq #1,d0
    bcd0:	/--|-- bra.s bcfa <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    bcd2:	|  \-> moveq #24,d0
    bcd4:	|      add.l 12(sp),d0
    bcd8:	|      move.l d0,-(sp)
    bcda:	|      jsr 10694 <trimStack>
    bce0:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    bce2:	|      move.l (sp),d0
    bce4:	|      clr.l -(sp)
    bce6:	|      move.l d0,-(sp)
    bce8:	|      jsr 8978 <startSound>
    bcee:	|      addq.l #8,sp
    bcf0:	|      tst.w d0
    bcf2:	|  /-- bne.s bcf8 <builtIn_playSound+0x4e>
    bcf4:	|  |   moveq #2,d0
    bcf6:	+--|-- bra.s bcfa <builtIn_playSound+0x50>
	return BR_CONTINUE;
    bcf8:	|  \-> moveq #2,d0
}
    bcfa:	\----> addq.l #4,sp
    bcfc:	       rts

0000bcfe <builtIn_loopSound>:

builtIn(loopSound)
{
    bcfe:	             lea -28(sp),sp
    bd02:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    bd04:	             tst.l 36(sp)
    bd08:	         /-- bgt.s bd1e <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    bd0a:	         |   pea 154f4 <incbin_player_end+0x9e8>
    bd10:	         |   jsr 11d08 <KPrintF>
    bd16:	         |   addq.l #4,sp
		return BR_ERROR;
    bd18:	         |   moveq #1,d0
    bd1a:	/--------|-- bra.w beda <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    bd1e:	|        \-> moveq #1,d0
    bd20:	|            cmp.l 36(sp),d0
    bd24:	|     /----- blt.s bd80 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    bd26:	|     |      movea.l 40(sp),a0
    bd2a:	|     |      move.l 24(a0),d0
    bd2e:	|     |      move.l d0,-(sp)
    bd30:	|     |      pea 5 <_start+0x5>
    bd34:	|     |      lea 16(sp),a0
    bd38:	|     |      move.l a0,-(sp)
    bd3a:	|     |      jsr fd32 <getValueType>
    bd40:	|     |      lea 12(sp),sp
    bd44:	|     |      tst.w d0
    bd46:	|     |  /-- bne.s bd4e <builtIn_loopSound+0x50>
    bd48:	|     |  |   moveq #1,d0
    bd4a:	+-----|--|-- bra.w beda <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    bd4e:	|     |  \-> moveq #24,d0
    bd50:	|     |      add.l 40(sp),d0
    bd54:	|     |      move.l d0,-(sp)
    bd56:	|     |      jsr 10694 <trimStack>
    bd5c:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    bd5e:	|     |      move.l 8(sp),d0
    bd62:	|     |      pea 1 <_start+0x1>
    bd66:	|     |      move.l d0,-(sp)
    bd68:	|     |      jsr 8978 <startSound>
    bd6e:	|     |      addq.l #8,sp
    bd70:	|     |      tst.w d0
    bd72:	|     |  /-- bne.s bd7a <builtIn_loopSound+0x7c>
    bd74:	|     |  |   moveq #2,d0
    bd76:	+-----|--|-- bra.w beda <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    bd7a:	|     |  \-> moveq #2,d0
    bd7c:	+-----|----- bra.w beda <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    bd80:	|     \----> moveq #2,d1
    bd82:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    bd86:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    bd8a:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    bd8e:	|            movea.l 40(sp),a0
    bd92:	|            movea.l 24(a0),a0
    bd96:	|            move.l (a0),d0
    bd98:	|            moveq #5,d1
    bd9a:	|            cmp.l d0,d1
    bd9c:	|  /-------- beq.w be74 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    bda0:	|  |         movea.l 40(sp),a0
    bda4:	|  |         move.l 24(a0),d0
    bda8:	|  |         move.l d0,-(sp)
    bdaa:	|  |         pea 1 <_start+0x1>
    bdae:	|  |         lea 12(sp),a0
    bdb2:	|  |         move.l a0,-(sp)
    bdb4:	|  |         jsr fd32 <getValueType>
    bdba:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    bdbe:	|  |         moveq #24,d0
    bdc0:	|  |         add.l 40(sp),d0
    bdc4:	|  |         move.l d0,-(sp)
    bdc6:	|  |         jsr 10694 <trimStack>
    bdcc:	|  |         addq.l #4,sp
			numParams--;
    bdce:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    bdd2:	|  +-------- bra.w be74 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    bdd6:	|  |  /----> movea.l 40(sp),a0
    bdda:	|  |  |      move.l 24(a0),d0
    bdde:	|  |  |      move.l d0,-(sp)
    bde0:	|  |  |      pea 5 <_start+0x5>
    bde4:	|  |  |      lea 16(sp),a0
    bde8:	|  |  |      move.l a0,-(sp)
    bdea:	|  |  |      jsr fd32 <getValueType>
    bdf0:	|  |  |      lea 12(sp),sp
    bdf4:	|  |  |      tst.w d0
    bdf6:	|  |  |  /-- bne.s be0c <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    bdf8:	|  |  |  |   pea 15532 <incbin_player_end+0xa26>
    bdfe:	|  |  |  |   jsr 11d08 <KPrintF>
    be04:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    be06:	|  |  |  |   moveq #1,d0
    be08:	+--|--|--|-- bra.w beda <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    be0c:	|  |  |  \-> moveq #20,d0
    be0e:	|  |  |      move.l d0,20(sp)
    be12:	|  |  |      clr.l 16(sp)
    be16:	|  |  |      move.l 17b28 <SysBase>,d0
    be1c:	|  |  |      movea.l d0,a6
    be1e:	|  |  |      move.l 20(sp),d0
    be22:	|  |  |      move.l 16(sp),d1
    be26:	|  |  |      jsr -684(a6)
    be2a:	|  |  |      move.l d0,12(sp)
    be2e:	|  |  |      move.l 12(sp),d0
    be32:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    be36:	|  |  |  /-- bne.s be3e <builtIn_loopSound+0x140>
    be38:	|  |  |  |   moveq #1,d0
    be3a:	+--|--|--|-- bra.w beda <builtIn_loopSound+0x1dc>

			s->next = old;
    be3e:	|  |  |  \-> movea.l 28(sp),a0
    be42:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    be48:	|  |  |      movea.l 28(sp),a0
    be4c:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    be50:	|  |  |      move.l 8(sp),d0
    be54:	|  |  |      movea.l 28(sp),a0
    be58:	|  |  |      move.l d0,(a0)
			old = s;
    be5a:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    be60:	|  |  |      moveq #24,d0
    be62:	|  |  |      add.l 40(sp),d0
    be66:	|  |  |      move.l d0,-(sp)
    be68:	|  |  |      jsr 10694 <trimStack>
    be6e:	|  |  |      addq.l #4,sp
			numParams--;
    be70:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    be74:	|  \--|----> tst.l 36(sp)
    be78:	|     \----- bne.w bdd6 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    be7c:	|        /-- bra.s be88 <builtIn_loopSound+0x18a>
    be7e:	|     /--|-> movea.l 28(sp),a0
    be82:	|     |  |   move.l 4(a0),28(sp)
    be88:	|     |  \-> movea.l 28(sp),a0
    be8c:	|     |      move.l 4(a0),d0
    be90:	|     \----- bne.s be7e <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    be92:	|            move.l 4(sp),d0
    be96:	|            moveq #1,d1
    be98:	|            cmp.l d0,d1
    be9a:	|     /----- bge.s beb2 <builtIn_loopSound+0x1b4>
			s->next = old;
    be9c:	|     |      movea.l 28(sp),a0
    bea0:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    bea6:	|     |      movea.l 24(sp),a0
    beaa:	|     |      move.l 28(sp),8(a0)
    beb0:	|     |  /-- bra.s bec2 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    beb2:	|     \--|-> move.l 4(sp),d0
    beb6:	|        +-- beq.s bec2 <builtIn_loopSound+0x1c4>
			s->next = s;
    beb8:	|        |   movea.l 28(sp),a0
    bebc:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    bec2:	|        \-> movea.l 24(sp),a0
    bec6:	|            moveq #-1,d0
    bec8:	|            move.l d0,16(a0)
		playSoundList(old);
    becc:	|            move.l 24(sp),-(sp)
    bed0:	|            jsr 88f2 <playSoundList>
    bed6:	|            addq.l #4,sp
		return BR_CONTINUE;
    bed8:	|            moveq #2,d0
	}
}
    beda:	\----------> movea.l (sp)+,a6
    bedc:	             lea 28(sp),sp
    bee0:	             rts

0000bee2 <builtIn_stopSound>:

builtIn(stopSound)
{
    bee2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    bee4:	       movea.l 12(sp),a0
    bee8:	       move.l 24(a0),d0
    beec:	       move.l d0,-(sp)
    beee:	       pea 5 <_start+0x5>
    bef2:	       move.l sp,d0
    bef4:	       addq.l #8,d0
    bef6:	       move.l d0,-(sp)
    bef8:	       jsr fd32 <getValueType>
    befe:	       lea 12(sp),sp
    bf02:	       tst.w d0
    bf04:	   /-- bne.s bf0a <builtIn_stopSound+0x28>
    bf06:	   |   moveq #1,d0
    bf08:	/--|-- bra.s bf28 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    bf0a:	|  \-> moveq #24,d0
    bf0c:	|      add.l 12(sp),d0
    bf10:	|      move.l d0,-(sp)
    bf12:	|      jsr 10694 <trimStack>
    bf18:	|      addq.l #4,sp
	huntKillSound (v);
    bf1a:	|      move.l (sp),d0
    bf1c:	|      move.l d0,-(sp)
    bf1e:	|      jsr 88ea <huntKillSound>
    bf24:	|      addq.l #4,sp
	return BR_CONTINUE;
    bf26:	|      moveq #2,d0
}
    bf28:	\----> addq.l #4,sp
    bf2a:	       rts

0000bf2c <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    bf2c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bf2e:	       movea.l 12(sp),a0
    bf32:	       move.l 24(a0),d0
    bf36:	       move.l d0,-(sp)
    bf38:	       pea 1 <_start+0x1>
    bf3c:	       move.l sp,d0
    bf3e:	       addq.l #8,d0
    bf40:	       move.l d0,-(sp)
    bf42:	       jsr fd32 <getValueType>
    bf48:	       lea 12(sp),sp
    bf4c:	       tst.w d0
    bf4e:	   /-- bne.s bf54 <builtIn_setDefaultSoundVolume+0x28>
    bf50:	   |   moveq #1,d0
    bf52:	/--|-- bra.s bf72 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    bf54:	|  \-> moveq #24,d0
    bf56:	|      add.l 12(sp),d0
    bf5a:	|      move.l d0,-(sp)
    bf5c:	|      jsr 10694 <trimStack>
    bf62:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    bf64:	|      move.l (sp),d0
    bf66:	|      move.l d0,-(sp)
    bf68:	|      jsr 8960 <setDefaultSoundVolume>
    bf6e:	|      addq.l #4,sp
	return BR_CONTINUE;
    bf70:	|      moveq #2,d0
}
    bf72:	\----> addq.l #4,sp
    bf74:	       rts

0000bf76 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    bf76:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    bf78:	       movea.l 16(sp),a0
    bf7c:	       move.l 24(a0),d0
    bf80:	       move.l d0,-(sp)
    bf82:	       pea 1 <_start+0x1>
    bf86:	       move.l sp,d0
    bf88:	       addq.l #8,d0
    bf8a:	       move.l d0,-(sp)
    bf8c:	       jsr fd32 <getValueType>
    bf92:	       lea 12(sp),sp
    bf96:	       tst.w d0
    bf98:	   /-- bne.s bf9e <builtIn_setSoundVolume+0x28>
    bf9a:	   |   moveq #1,d0
    bf9c:	/--|-- bra.s bff8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    bf9e:	|  \-> moveq #24,d0
    bfa0:	|      add.l 16(sp),d0
    bfa4:	|      move.l d0,-(sp)
    bfa6:	|      jsr 10694 <trimStack>
    bfac:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    bfae:	|      movea.l 16(sp),a0
    bfb2:	|      move.l 24(a0),d0
    bfb6:	|      move.l d0,-(sp)
    bfb8:	|      pea 5 <_start+0x5>
    bfbc:	|      moveq #12,d0
    bfbe:	|      add.l sp,d0
    bfc0:	|      move.l d0,-(sp)
    bfc2:	|      jsr fd32 <getValueType>
    bfc8:	|      lea 12(sp),sp
    bfcc:	|      tst.w d0
    bfce:	|  /-- bne.s bfd4 <builtIn_setSoundVolume+0x5e>
    bfd0:	|  |   moveq #1,d0
    bfd2:	+--|-- bra.s bff8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    bfd4:	|  \-> moveq #24,d0
    bfd6:	|      add.l 16(sp),d0
    bfda:	|      move.l d0,-(sp)
    bfdc:	|      jsr 10694 <trimStack>
    bfe2:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    bfe4:	|      move.l (sp),d1
    bfe6:	|      move.l 4(sp),d0
    bfea:	|      move.l d1,-(sp)
    bfec:	|      move.l d0,-(sp)
    bfee:	|      jsr 8974 <setSoundVolume>
    bff4:	|      addq.l #8,sp
	return BR_CONTINUE;
    bff6:	|      moveq #2,d0
}
    bff8:	\----> addq.l #8,sp
    bffa:	       rts

0000bffc <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    bffc:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c000:	       movea.l 20(sp),a0
    c004:	       move.l 24(a0),d0
    c008:	       move.l d0,-(sp)
    c00a:	       pea 1 <_start+0x1>
    c00e:	       moveq #12,d0
    c010:	       add.l sp,d0
    c012:	       move.l d0,-(sp)
    c014:	       jsr fd32 <getValueType>
    c01a:	       lea 12(sp),sp
    c01e:	       tst.w d0
    c020:	   /-- bne.s c028 <builtIn_setSoundLoopPoints+0x2c>
    c022:	   |   moveq #1,d0
    c024:	/--|-- bra.w c0c0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    c028:	|  \-> moveq #24,d0
    c02a:	|      add.l 20(sp),d0
    c02e:	|      move.l d0,-(sp)
    c030:	|      jsr 10694 <trimStack>
    c036:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c038:	|      movea.l 20(sp),a0
    c03c:	|      move.l 24(a0),d0
    c040:	|      move.l d0,-(sp)
    c042:	|      pea 1 <_start+0x1>
    c046:	|      lea 8(sp),a0
    c04a:	|      move.l a0,-(sp)
    c04c:	|      jsr fd32 <getValueType>
    c052:	|      lea 12(sp),sp
    c056:	|      tst.w d0
    c058:	|  /-- bne.s c05e <builtIn_setSoundLoopPoints+0x62>
    c05a:	|  |   moveq #1,d0
    c05c:	+--|-- bra.s c0c0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    c05e:	|  \-> moveq #24,d0
    c060:	|      add.l 20(sp),d0
    c064:	|      move.l d0,-(sp)
    c066:	|      jsr 10694 <trimStack>
    c06c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c06e:	|      movea.l 20(sp),a0
    c072:	|      move.l 24(a0),d0
    c076:	|      move.l d0,-(sp)
    c078:	|      pea 5 <_start+0x5>
    c07c:	|      moveq #16,d0
    c07e:	|      add.l sp,d0
    c080:	|      move.l d0,-(sp)
    c082:	|      jsr fd32 <getValueType>
    c088:	|      lea 12(sp),sp
    c08c:	|      tst.w d0
    c08e:	|  /-- bne.s c094 <builtIn_setSoundLoopPoints+0x98>
    c090:	|  |   moveq #1,d0
    c092:	+--|-- bra.s c0c0 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    c094:	|  \-> moveq #24,d0
    c096:	|      add.l 20(sp),d0
    c09a:	|      move.l d0,-(sp)
    c09c:	|      jsr 10694 <trimStack>
    c0a2:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    c0a4:	|      movea.l 4(sp),a0
    c0a8:	|      move.l (sp),d1
    c0aa:	|      move.l 8(sp),d0
    c0ae:	|      move.l a0,-(sp)
    c0b0:	|      move.l d1,-(sp)
    c0b2:	|      move.l d0,-(sp)
    c0b4:	|      jsr 896c <setSoundLoop>
    c0ba:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c0be:	|      moveq #2,d0
}
    c0c0:	\----> lea 12(sp),sp
    c0c4:	       rts

0000c0c6 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    c0c6:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    c0c8:	          movea.l 12(sp),a0
    c0cc:	          movea.l 24(a0),a0
    c0d0:	          move.l (a0),d0
    c0d2:	          moveq #5,d1
    c0d4:	          cmp.l d0,d1
    c0d6:	/-------- bne.s c11a <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    c0d8:	|         movea.l 12(sp),a0
    c0dc:	|         move.l 24(a0),d0
    c0e0:	|         move.l d0,-(sp)
    c0e2:	|         pea 5 <_start+0x5>
    c0e6:	|         move.l sp,d0
    c0e8:	|         addq.l #8,d0
    c0ea:	|         move.l d0,-(sp)
    c0ec:	|         jsr fd32 <getValueType>
    c0f2:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    c0f6:	|         moveq #24,d0
    c0f8:	|         add.l 12(sp),d0
    c0fc:	|         move.l d0,-(sp)
    c0fe:	|         jsr 10694 <trimStack>
    c104:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    c106:	|         move.l (sp),d0
    c108:	|         move.l d0,-(sp)
    c10a:	|         jsr 11502 <setFloor>
    c110:	|         addq.l #4,sp
    c112:	|         tst.w d0
    c114:	|  /----- bne.s c130 <builtIn_setFloor+0x6a>
    c116:	|  |      moveq #1,d0
    c118:	|  |  /-- bra.s c132 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    c11a:	\--|--|-> moveq #24,d0
    c11c:	   |  |   add.l 12(sp),d0
    c120:	   |  |   move.l d0,-(sp)
    c122:	   |  |   jsr 10694 <trimStack>
    c128:	   |  |   addq.l #4,sp
		setFloorNull ();
    c12a:	   |  |   jsr 11c7c <setFloorNull>
	}
	return BR_CONTINUE;
    c130:	   \--|-> moveq #2,d0
}
    c132:	      \-> addq.l #4,sp
    c134:	          rts

0000c136 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    c136:	jsr 10d9a <drawFloor>
	return BR_CONTINUE;
    c13c:	moveq #2,d0
}
    c13e:	rts

0000c140 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    c140:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    c142:	          movea.l 12(sp),a0
    c146:	          movea.l 24(a0),a0
    c14a:	          move.l (a0),d0
    c14c:	          moveq #5,d1
    c14e:	          cmp.l d0,d1
    c150:	/-------- bne.s c194 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    c152:	|         movea.l 12(sp),a0
    c156:	|         move.l 24(a0),d0
    c15a:	|         move.l d0,-(sp)
    c15c:	|         pea 5 <_start+0x5>
    c160:	|         move.l sp,d0
    c162:	|         addq.l #8,d0
    c164:	|         move.l d0,-(sp)
    c166:	|         jsr fd32 <getValueType>
    c16c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    c170:	|         moveq #24,d0
    c172:	|         add.l 12(sp),d0
    c176:	|         move.l d0,-(sp)
    c178:	|         jsr 10694 <trimStack>
    c17e:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    c180:	|         move.l (sp),d0
    c182:	|         move.l d0,-(sp)
    c184:	|         jsr 15f2 <setZBuffer>
    c18a:	|         addq.l #4,sp
    c18c:	|         tst.w d0
    c18e:	|  /----- bne.s c1aa <builtIn_setZBuffer+0x6a>
    c190:	|  |      moveq #1,d0
    c192:	|  |  /-- bra.s c1ac <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    c194:	\--|--|-> moveq #24,d0
    c196:	   |  |   add.l 12(sp),d0
    c19a:	   |  |   move.l d0,-(sp)
    c19c:	   |  |   jsr 10694 <trimStack>
    c1a2:	   |  |   addq.l #4,sp
		killZBuffer ();
    c1a4:	   |  |   jsr 159c <killZBuffer>
	}
	return BR_CONTINUE;
    c1aa:	   \--|-> moveq #2,d0
}
    c1ac:	      \-> addq.l #4,sp
    c1ae:	          rts

0000c1b0 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    c1b0:	pea 15569 <zbuffer.c.d110ca03+0x23>
    c1b6:	jsr 11d08 <KPrintF>
    c1bc:	addq.l #4,sp
	return BR_CONTINUE;
    c1be:	moveq #2,d0
}
    c1c0:	rts

0000c1c2 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c1c2:	          movea.l 8(sp),a0
    c1c6:	          move.l 24(a0),d0
    c1ca:	          move.l d0,-(sp)
    c1cc:	          pea 1 <_start+0x1>
    c1d0:	          pea 17be4 <speechMode>
    c1d6:	          jsr fd32 <getValueType>
    c1dc:	          lea 12(sp),sp
    c1e0:	          tst.w d0
    c1e2:	      /-- bne.s c1e8 <builtIn_setSpeechMode+0x26>
    c1e4:	      |   moveq #1,d0
    c1e6:	/-----|-- bra.s c220 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    c1e8:	|     \-> moveq #24,d0
    c1ea:	|         add.l 8(sp),d0
    c1ee:	|         move.l d0,-(sp)
    c1f0:	|         jsr 10694 <trimStack>
    c1f6:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    c1f8:	|         move.l 17be4 <speechMode>,d0
    c1fe:	|     /-- bmi.s c20c <builtIn_setSpeechMode+0x4a>
    c200:	|     |   move.l 17be4 <speechMode>,d0
    c206:	|     |   moveq #2,d1
    c208:	|     |   cmp.l d0,d1
    c20a:	|  /--|-- bge.s c21e <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    c20c:	|  |  \-> pea 15582 <zbuffer.c.d110ca03+0x3c>
    c212:	|  |      jsr 11d08 <KPrintF>
    c218:	|  |      addq.l #4,sp
		return BR_ERROR;
    c21a:	|  |      moveq #1,d0
    c21c:	+--|----- bra.s c220 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    c21e:	|  \----> moveq #2,d0
}
    c220:	\-------> rts

0000c222 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    c222:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    c224:	       jsr 4d80 <isThereAnySpeechGoingOn>
    c22a:	       move.l d0,(sp)
	if (i == -1) {
    c22c:	       moveq #-1,d0
    c22e:	       cmp.l (sp),d0
    c230:	/----- bne.s c24c <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    c232:	|      moveq #28,d0
    c234:	|      add.l 12(sp),d0
    c238:	|      clr.l -(sp)
    c23a:	|      pea 1 <_start+0x1>
    c23e:	|      move.l d0,-(sp)
    c240:	|      jsr 10602 <setVariable>
    c246:	|      lea 12(sp),sp
    c24a:	|  /-- bra.s c264 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    c24c:	\--|-> moveq #28,d0
    c24e:	   |   add.l 12(sp),d0
    c252:	   |   move.l (sp),-(sp)
    c254:	   |   pea 7 <_start+0x7>
    c258:	   |   move.l d0,-(sp)
    c25a:	   |   jsr 10602 <setVariable>
    c260:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    c264:	   \-> moveq #2,d0
}
    c266:	       addq.l #4,sp
    c268:	       rts

0000c26a <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    c26a:	jsr 3354 <killSpeechTimers>
	return BR_CONTINUE;
    c270:	moveq #2,d0
}
    c272:	rts

0000c274 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    c274:	       move.l 17c1e <overRegion>,d0
    c27a:	/----- beq.s c2a4 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    c27c:	|      movea.l 17c1e <overRegion>,a0
    c282:	|      movea.l 28(a0),a0
    c286:	|      move.l 4(a0),d1
    c28a:	|      moveq #28,d0
    c28c:	|      add.l 8(sp),d0
    c290:	|      move.l d1,-(sp)
    c292:	|      pea 7 <_start+0x7>
    c296:	|      move.l d0,-(sp)
    c298:	|      jsr 10602 <setVariable>
    c29e:	|      lea 12(sp),sp
    c2a2:	|  /-- bra.s c2bc <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    c2a4:	\--|-> moveq #28,d0
    c2a6:	   |   add.l 8(sp),d0
    c2aa:	   |   clr.l -(sp)
    c2ac:	   |   pea 1 <_start+0x1>
    c2b0:	   |   move.l d0,-(sp)
    c2b2:	   |   jsr 10602 <setVariable>
    c2b8:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    c2bc:	   \-> moveq #2,d0
}
    c2be:	       rts

0000c2c0 <builtIn_rename>:

builtIn(rename)
{
    c2c0:	       lea -16(sp),sp
    c2c4:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    c2c6:	       movea.l 28(sp),a0
    c2ca:	       move.l 24(a0),d0
    c2ce:	       move.l d0,-(sp)
    c2d0:	       jsr 10308 <getTextFromAnyVar>
    c2d6:	       addq.l #4,sp
    c2d8:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    c2dc:	   /-- bne.s c2e2 <builtIn_rename+0x22>
    c2de:	   |   moveq #1,d0
    c2e0:	/--|-- bra.s c35c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    c2e2:	|  \-> moveq #24,d0
    c2e4:	|      add.l 28(sp),d0
    c2e8:	|      move.l d0,-(sp)
    c2ea:	|      jsr 10694 <trimStack>
    c2f0:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    c2f2:	|      movea.l 28(sp),a0
    c2f6:	|      move.l 24(a0),d0
    c2fa:	|      move.l d0,-(sp)
    c2fc:	|      pea 7 <_start+0x7>
    c300:	|      lea 12(sp),a0
    c304:	|      move.l a0,-(sp)
    c306:	|      jsr fd32 <getValueType>
    c30c:	|      lea 12(sp),sp
    c310:	|      tst.w d0
    c312:	|  /-- bne.s c318 <builtIn_rename+0x58>
    c314:	|  |   moveq #1,d0
    c316:	+--|-- bra.s c35c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    c318:	|  \-> moveq #24,d0
    c31a:	|      add.l 28(sp),d0
    c31e:	|      move.l d0,-(sp)
    c320:	|      jsr 10694 <trimStack>
    c326:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    c328:	|      move.l 4(sp),d0
    c32c:	|      move.l d0,-(sp)
    c32e:	|      jsr 8d00 <findObjectType>
    c334:	|      addq.l #4,sp
    c336:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    c33a:	|      movea.l 12(sp),a0
    c33e:	|      move.l (a0),8(sp)
    c342:	|      move.l 17b28 <SysBase>,d0
    c348:	|      movea.l d0,a6
    c34a:	|      movea.l 8(sp),a1
    c34e:	|      jsr -690(a6)
	o->screenName = newText;
    c352:	|      movea.l 12(sp),a0
    c356:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    c35a:	|      moveq #2,d0
}
    c35c:	\----> movea.l (sp)+,a6
    c35e:	       lea 16(sp),sp
    c362:	       rts

0000c364 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    c364:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c368:	          movea.l 20(sp),a0
    c36c:	          move.l 24(a0),d0
    c370:	          move.l d0,-(sp)
    c372:	          pea 7 <_start+0x7>
    c376:	          lea 8(sp),a0
    c37a:	          move.l a0,-(sp)
    c37c:	          jsr fd32 <getValueType>
    c382:	          lea 12(sp),sp
    c386:	          tst.w d0
    c388:	      /-- bne.s c390 <builtIn_getObjectX+0x2c>
    c38a:	      |   moveq #1,d0
    c38c:	/-----|-- bra.w c42c <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    c390:	|     \-> moveq #24,d0
    c392:	|         add.l 20(sp),d0
    c396:	|         move.l d0,-(sp)
    c398:	|         jsr 10694 <trimStack>
    c39e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    c3a0:	|         move.l (sp),d0
    c3a2:	|         move.l d0,-(sp)
    c3a4:	|         jsr 613a <findPerson>
    c3aa:	|         addq.l #4,sp
    c3ac:	|         move.l d0,8(sp)
	if (pers) {
    c3b0:	|     /-- beq.s c3de <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    c3b2:	|     |   movea.l 8(sp),a0
    c3b6:	|     |   move.l (a0),d0
    c3b8:	|     |   move.l d0,-(sp)
    c3ba:	|     |   jsr 120f8 <__fixsfsi>
    c3c0:	|     |   addq.l #4,sp
    c3c2:	|     |   move.l d0,d1
    c3c4:	|     |   moveq #28,d0
    c3c6:	|     |   add.l 20(sp),d0
    c3ca:	|     |   move.l d1,-(sp)
    c3cc:	|     |   pea 1 <_start+0x1>
    c3d0:	|     |   move.l d0,-(sp)
    c3d2:	|     |   jsr 10602 <setVariable>
    c3d8:	|     |   lea 12(sp),sp
    c3dc:	|  /--|-- bra.s c42a <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    c3de:	|  |  \-> move.l (sp),d0
    c3e0:	|  |      move.l d0,-(sp)
    c3e2:	|  |      jsr 107da <getRegionForObject>
    c3e8:	|  |      addq.l #4,sp
    c3ea:	|  |      move.l d0,4(sp)
		if (la) {
    c3ee:	|  |  /-- beq.s c412 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    c3f0:	|  |  |   movea.l 4(sp),a0
    c3f4:	|  |  |   move.l 16(a0),d1
    c3f8:	|  |  |   moveq #28,d0
    c3fa:	|  |  |   add.l 20(sp),d0
    c3fe:	|  |  |   move.l d1,-(sp)
    c400:	|  |  |   pea 1 <_start+0x1>
    c404:	|  |  |   move.l d0,-(sp)
    c406:	|  |  |   jsr 10602 <setVariable>
    c40c:	|  |  |   lea 12(sp),sp
    c410:	|  +--|-- bra.s c42a <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    c412:	|  |  \-> moveq #28,d0
    c414:	|  |      add.l 20(sp),d0
    c418:	|  |      clr.l -(sp)
    c41a:	|  |      pea 1 <_start+0x1>
    c41e:	|  |      move.l d0,-(sp)
    c420:	|  |      jsr 10602 <setVariable>
    c426:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    c42a:	|  \----> moveq #2,d0
}
    c42c:	\-------> lea 12(sp),sp
    c430:	          rts

0000c432 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    c432:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c436:	          movea.l 20(sp),a0
    c43a:	          move.l 24(a0),d0
    c43e:	          move.l d0,-(sp)
    c440:	          pea 7 <_start+0x7>
    c444:	          lea 8(sp),a0
    c448:	          move.l a0,-(sp)
    c44a:	          jsr fd32 <getValueType>
    c450:	          lea 12(sp),sp
    c454:	          tst.w d0
    c456:	      /-- bne.s c45e <builtIn_getObjectY+0x2c>
    c458:	      |   moveq #1,d0
    c45a:	/-----|-- bra.w c4fc <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    c45e:	|     \-> moveq #24,d0
    c460:	|         add.l 20(sp),d0
    c464:	|         move.l d0,-(sp)
    c466:	|         jsr 10694 <trimStack>
    c46c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    c46e:	|         move.l (sp),d0
    c470:	|         move.l d0,-(sp)
    c472:	|         jsr 613a <findPerson>
    c478:	|         addq.l #4,sp
    c47a:	|         move.l d0,8(sp)
	if (pers) {
    c47e:	|     /-- beq.s c4ae <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    c480:	|     |   movea.l 8(sp),a0
    c484:	|     |   move.l 4(a0),d0
    c488:	|     |   move.l d0,-(sp)
    c48a:	|     |   jsr 120f8 <__fixsfsi>
    c490:	|     |   addq.l #4,sp
    c492:	|     |   move.l d0,d1
    c494:	|     |   moveq #28,d0
    c496:	|     |   add.l 20(sp),d0
    c49a:	|     |   move.l d1,-(sp)
    c49c:	|     |   pea 1 <_start+0x1>
    c4a0:	|     |   move.l d0,-(sp)
    c4a2:	|     |   jsr 10602 <setVariable>
    c4a8:	|     |   lea 12(sp),sp
    c4ac:	|  /--|-- bra.s c4fa <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    c4ae:	|  |  \-> move.l (sp),d0
    c4b0:	|  |      move.l d0,-(sp)
    c4b2:	|  |      jsr 107da <getRegionForObject>
    c4b8:	|  |      addq.l #4,sp
    c4ba:	|  |      move.l d0,4(sp)
		if (la) {
    c4be:	|  |  /-- beq.s c4e2 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    c4c0:	|  |  |   movea.l 4(sp),a0
    c4c4:	|  |  |   move.l 20(a0),d1
    c4c8:	|  |  |   moveq #28,d0
    c4ca:	|  |  |   add.l 20(sp),d0
    c4ce:	|  |  |   move.l d1,-(sp)
    c4d0:	|  |  |   pea 1 <_start+0x1>
    c4d4:	|  |  |   move.l d0,-(sp)
    c4d6:	|  |  |   jsr 10602 <setVariable>
    c4dc:	|  |  |   lea 12(sp),sp
    c4e0:	|  +--|-- bra.s c4fa <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    c4e2:	|  |  \-> moveq #28,d0
    c4e4:	|  |      add.l 20(sp),d0
    c4e8:	|  |      clr.l -(sp)
    c4ea:	|  |      pea 1 <_start+0x1>
    c4ee:	|  |      move.l d0,-(sp)
    c4f0:	|  |      jsr 10602 <setVariable>
    c4f6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    c4fa:	|  \----> moveq #2,d0
}
    c4fc:	\-------> lea 12(sp),sp
    c500:	          rts

0000c502 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    c502:	       lea -32(sp),sp
    c506:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c50a:	       movea.l 56(sp),a0
    c50e:	       move.l 24(a0),d0
    c512:	       move.l d0,-(sp)
    c514:	       pea 1 <_start+0x1>
    c518:	       lea 28(sp),a0
    c51c:	       move.l a0,-(sp)
    c51e:	       jsr fd32 <getValueType>
    c524:	       lea 12(sp),sp
    c528:	       tst.w d0
    c52a:	   /-- bne.s c532 <builtIn_addScreenRegion+0x30>
    c52c:	   |   moveq #1,d0
    c52e:	/--|-- bra.w c70c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c532:	|  \-> moveq #24,d0
    c534:	|      add.l 56(sp),d0
    c538:	|      move.l d0,-(sp)
    c53a:	|      jsr 10694 <trimStack>
    c540:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c542:	|      movea.l 56(sp),a0
    c546:	|      move.l 24(a0),d0
    c54a:	|      move.l d0,-(sp)
    c54c:	|      pea 1 <_start+0x1>
    c550:	|      moveq #48,d0
    c552:	|      add.l sp,d0
    c554:	|      move.l d0,-(sp)
    c556:	|      jsr fd32 <getValueType>
    c55c:	|      lea 12(sp),sp
    c560:	|      tst.w d0
    c562:	|  /-- bne.s c56a <builtIn_addScreenRegion+0x68>
    c564:	|  |   moveq #1,d0
    c566:	+--|-- bra.w c70c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c56a:	|  \-> moveq #24,d0
    c56c:	|      add.l 56(sp),d0
    c570:	|      move.l d0,-(sp)
    c572:	|      jsr 10694 <trimStack>
    c578:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c57a:	|      movea.l 56(sp),a0
    c57e:	|      move.l 24(a0),d0
    c582:	|      move.l d0,-(sp)
    c584:	|      pea 1 <_start+0x1>
    c588:	|      moveq #52,d0
    c58a:	|      add.l sp,d0
    c58c:	|      move.l d0,-(sp)
    c58e:	|      jsr fd32 <getValueType>
    c594:	|      lea 12(sp),sp
    c598:	|      tst.w d0
    c59a:	|  /-- bne.s c5a2 <builtIn_addScreenRegion+0xa0>
    c59c:	|  |   moveq #1,d0
    c59e:	+--|-- bra.w c70c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c5a2:	|  \-> moveq #24,d0
    c5a4:	|      add.l 56(sp),d0
    c5a8:	|      move.l d0,-(sp)
    c5aa:	|      jsr 10694 <trimStack>
    c5b0:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c5b2:	|      movea.l 56(sp),a0
    c5b6:	|      move.l 24(a0),d0
    c5ba:	|      move.l d0,-(sp)
    c5bc:	|      pea 1 <_start+0x1>
    c5c0:	|      lea 32(sp),a0
    c5c4:	|      move.l a0,-(sp)
    c5c6:	|      jsr fd32 <getValueType>
    c5cc:	|      lea 12(sp),sp
    c5d0:	|      tst.w d0
    c5d2:	|  /-- bne.s c5da <builtIn_addScreenRegion+0xd8>
    c5d4:	|  |   moveq #1,d0
    c5d6:	+--|-- bra.w c70c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c5da:	|  \-> moveq #24,d0
    c5dc:	|      add.l 56(sp),d0
    c5e0:	|      move.l d0,-(sp)
    c5e2:	|      jsr 10694 <trimStack>
    c5e8:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c5ea:	|      movea.l 56(sp),a0
    c5ee:	|      move.l 24(a0),d0
    c5f2:	|      move.l d0,-(sp)
    c5f4:	|      pea 1 <_start+0x1>
    c5f8:	|      lea 36(sp),a0
    c5fc:	|      move.l a0,-(sp)
    c5fe:	|      jsr fd32 <getValueType>
    c604:	|      lea 12(sp),sp
    c608:	|      tst.w d0
    c60a:	|  /-- bne.s c612 <builtIn_addScreenRegion+0x110>
    c60c:	|  |   moveq #1,d0
    c60e:	+--|-- bra.w c70c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c612:	|  \-> moveq #24,d0
    c614:	|      add.l 56(sp),d0
    c618:	|      move.l d0,-(sp)
    c61a:	|      jsr 10694 <trimStack>
    c620:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c622:	|      movea.l 56(sp),a0
    c626:	|      move.l 24(a0),d0
    c62a:	|      move.l d0,-(sp)
    c62c:	|      pea 1 <_start+0x1>
    c630:	|      lea 40(sp),a0
    c634:	|      move.l a0,-(sp)
    c636:	|      jsr fd32 <getValueType>
    c63c:	|      lea 12(sp),sp
    c640:	|      tst.w d0
    c642:	|  /-- bne.s c64a <builtIn_addScreenRegion+0x148>
    c644:	|  |   moveq #1,d0
    c646:	+--|-- bra.w c70c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c64a:	|  \-> moveq #24,d0
    c64c:	|      add.l 56(sp),d0
    c650:	|      move.l d0,-(sp)
    c652:	|      jsr 10694 <trimStack>
    c658:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c65a:	|      movea.l 56(sp),a0
    c65e:	|      move.l 24(a0),d0
    c662:	|      move.l d0,-(sp)
    c664:	|      pea 1 <_start+0x1>
    c668:	|      lea 44(sp),a0
    c66c:	|      move.l a0,-(sp)
    c66e:	|      jsr fd32 <getValueType>
    c674:	|      lea 12(sp),sp
    c678:	|      tst.w d0
    c67a:	|  /-- bne.s c682 <builtIn_addScreenRegion+0x180>
    c67c:	|  |   moveq #1,d0
    c67e:	+--|-- bra.w c70c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c682:	|  \-> moveq #24,d0
    c684:	|      add.l 56(sp),d0
    c688:	|      move.l d0,-(sp)
    c68a:	|      jsr 10694 <trimStack>
    c690:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c692:	|      movea.l 56(sp),a0
    c696:	|      move.l 24(a0),d0
    c69a:	|      move.l d0,-(sp)
    c69c:	|      pea 7 <_start+0x7>
    c6a0:	|      lea 24(sp),a0
    c6a4:	|      move.l a0,-(sp)
    c6a6:	|      jsr fd32 <getValueType>
    c6ac:	|      lea 12(sp),sp
    c6b0:	|      tst.w d0
    c6b2:	|  /-- bne.s c6b8 <builtIn_addScreenRegion+0x1b6>
    c6b4:	|  |   moveq #1,d0
    c6b6:	+--|-- bra.s c70c <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    c6b8:	|  \-> moveq #24,d0
    c6ba:	|      add.l 56(sp),d0
    c6be:	|      move.l d0,-(sp)
    c6c0:	|      jsr 10694 <trimStack>
    c6c6:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    c6c8:	|      move.l 16(sp),d5
    c6cc:	|      move.l 20(sp),d4
    c6d0:	|      move.l 40(sp),d3
    c6d4:	|      move.l 44(sp),d2
    c6d8:	|      movea.l 24(sp),a1
    c6dc:	|      movea.l 28(sp),a0
    c6e0:	|      move.l 32(sp),d1
    c6e4:	|      move.l 36(sp),d0
    c6e8:	|      move.l d5,-(sp)
    c6ea:	|      move.l d4,-(sp)
    c6ec:	|      move.l d3,-(sp)
    c6ee:	|      move.l d2,-(sp)
    c6f0:	|      move.l a1,-(sp)
    c6f2:	|      move.l a0,-(sp)
    c6f4:	|      move.l d1,-(sp)
    c6f6:	|      move.l d0,-(sp)
    c6f8:	|      jsr 1071a <addScreenRegion>
    c6fe:	|      lea 32(sp),sp
    c702:	|      tst.w d0
    c704:	|  /-- beq.s c70a <builtIn_addScreenRegion+0x208>
    c706:	|  |   moveq #2,d0
    c708:	+--|-- bra.s c70c <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    c70a:	|  \-> moveq #1,d0

}
    c70c:	\----> movem.l (sp)+,d2-d5
    c710:	       lea 32(sp),sp
    c714:	       rts

0000c716 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    c716:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c718:	       movea.l 12(sp),a0
    c71c:	       move.l 24(a0),d0
    c720:	       move.l d0,-(sp)
    c722:	       pea 7 <_start+0x7>
    c726:	       move.l sp,d0
    c728:	       addq.l #8,d0
    c72a:	       move.l d0,-(sp)
    c72c:	       jsr fd32 <getValueType>
    c732:	       lea 12(sp),sp
    c736:	       tst.w d0
    c738:	   /-- bne.s c73e <builtIn_removeScreenRegion+0x28>
    c73a:	   |   moveq #1,d0
    c73c:	/--|-- bra.s c75c <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    c73e:	|  \-> moveq #24,d0
    c740:	|      add.l 12(sp),d0
    c744:	|      move.l d0,-(sp)
    c746:	|      jsr 10694 <trimStack>
    c74c:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    c74e:	|      move.l (sp),d0
    c750:	|      move.l d0,-(sp)
    c752:	|      jsr 10982 <removeScreenRegion>
    c758:	|      addq.l #4,sp
	return BR_CONTINUE;
    c75a:	|      moveq #2,d0
}
    c75c:	\----> addq.l #4,sp
    c75e:	       rts

0000c760 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    c760:	jsr 10b06 <showBoxes>
	return BR_CONTINUE;
    c766:	moveq #2,d0
}
    c768:	rts

0000c76a <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    c76a:	jsr 10808 <killAllRegions>
	return BR_CONTINUE;
    c770:	moveq #2,d0
}
    c772:	rts

0000c774 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    c774:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    c778:	       movea.l 24(sp),a0
    c77c:	       move.l 24(a0),d0
    c780:	       move.l d0,-(sp)
    c782:	       jsr f9de <getCostumeFromVar>
    c788:	       addq.l #4,sp
    c78a:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    c78e:	   /-- bne.s c796 <builtIn_addCharacter+0x22>
    c790:	   |   moveq #1,d0
    c792:	/--|-- bra.w c872 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    c796:	|  \-> moveq #24,d0
    c798:	|      add.l 24(sp),d0
    c79c:	|      move.l d0,-(sp)
    c79e:	|      jsr 10694 <trimStack>
    c7a4:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c7a6:	|      movea.l 24(sp),a0
    c7aa:	|      move.l 24(a0),d0
    c7ae:	|      move.l d0,-(sp)
    c7b0:	|      pea 1 <_start+0x1>
    c7b4:	|      lea 12(sp),a0
    c7b8:	|      move.l a0,-(sp)
    c7ba:	|      jsr fd32 <getValueType>
    c7c0:	|      lea 12(sp),sp
    c7c4:	|      tst.w d0
    c7c6:	|  /-- bne.s c7ce <builtIn_addCharacter+0x5a>
    c7c8:	|  |   moveq #1,d0
    c7ca:	+--|-- bra.w c872 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    c7ce:	|  \-> moveq #24,d0
    c7d0:	|      add.l 24(sp),d0
    c7d4:	|      move.l d0,-(sp)
    c7d6:	|      jsr 10694 <trimStack>
    c7dc:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c7de:	|      movea.l 24(sp),a0
    c7e2:	|      move.l 24(a0),d0
    c7e6:	|      move.l d0,-(sp)
    c7e8:	|      pea 1 <_start+0x1>
    c7ec:	|      moveq #16,d0
    c7ee:	|      add.l sp,d0
    c7f0:	|      move.l d0,-(sp)
    c7f2:	|      jsr fd32 <getValueType>
    c7f8:	|      lea 12(sp),sp
    c7fc:	|      tst.w d0
    c7fe:	|  /-- bne.s c804 <builtIn_addCharacter+0x90>
    c800:	|  |   moveq #1,d0
    c802:	+--|-- bra.s c872 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    c804:	|  \-> moveq #24,d0
    c806:	|      add.l 24(sp),d0
    c80a:	|      move.l d0,-(sp)
    c80c:	|      jsr 10694 <trimStack>
    c812:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c814:	|      movea.l 24(sp),a0
    c818:	|      move.l 24(a0),d0
    c81c:	|      move.l d0,-(sp)
    c81e:	|      pea 7 <_start+0x7>
    c822:	|      lea 8(sp),a0
    c826:	|      move.l a0,-(sp)
    c828:	|      jsr fd32 <getValueType>
    c82e:	|      lea 12(sp),sp
    c832:	|      tst.w d0
    c834:	|  /-- bne.s c83a <builtIn_addCharacter+0xc6>
    c836:	|  |   moveq #1,d0
    c838:	+--|-- bra.s c872 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    c83a:	|  \-> moveq #24,d0
    c83c:	|      add.l 24(sp),d0
    c840:	|      move.l d0,-(sp)
    c842:	|      jsr 10694 <trimStack>
    c848:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    c84a:	|      movea.l (sp),a0
    c84c:	|      move.l 4(sp),d1
    c850:	|      move.l 8(sp),d0
    c854:	|      move.l 12(sp),-(sp)
    c858:	|      move.l a0,-(sp)
    c85a:	|      move.l d1,-(sp)
    c85c:	|      move.l d0,-(sp)
    c85e:	|      jsr 5582 <addPerson>
    c864:	|      lea 16(sp),sp
    c868:	|      tst.w d0
    c86a:	|  /-- beq.s c870 <builtIn_addCharacter+0xfc>
    c86c:	|  |   moveq #2,d0
    c86e:	+--|-- bra.s c872 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    c870:	|  \-> moveq #1,d0
}
    c872:	\----> lea 16(sp),sp
    c876:	       rts

0000c878 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    c878:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c87a:	       movea.l 12(sp),a0
    c87e:	       move.l 24(a0),d0
    c882:	       move.l d0,-(sp)
    c884:	       pea 7 <_start+0x7>
    c888:	       move.l sp,d0
    c88a:	       addq.l #8,d0
    c88c:	       move.l d0,-(sp)
    c88e:	       jsr fd32 <getValueType>
    c894:	       lea 12(sp),sp
    c898:	       tst.w d0
    c89a:	   /-- bne.s c8a0 <builtIn_hideCharacter+0x28>
    c89c:	   |   moveq #1,d0
    c89e:	/--|-- bra.s c8c0 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    c8a0:	|  \-> moveq #24,d0
    c8a2:	|      add.l 12(sp),d0
    c8a6:	|      move.l d0,-(sp)
    c8a8:	|      jsr 10694 <trimStack>
    c8ae:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    c8b0:	|      move.l (sp),d0
    c8b2:	|      move.l d0,-(sp)
    c8b4:	|      clr.l -(sp)
    c8b6:	|      jsr 762e <setShown>
    c8bc:	|      addq.l #8,sp
	return BR_CONTINUE;
    c8be:	|      moveq #2,d0
}
    c8c0:	\----> addq.l #4,sp
    c8c2:	       rts

0000c8c4 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    c8c4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c8c6:	       movea.l 12(sp),a0
    c8ca:	       move.l 24(a0),d0
    c8ce:	       move.l d0,-(sp)
    c8d0:	       pea 7 <_start+0x7>
    c8d4:	       move.l sp,d0
    c8d6:	       addq.l #8,d0
    c8d8:	       move.l d0,-(sp)
    c8da:	       jsr fd32 <getValueType>
    c8e0:	       lea 12(sp),sp
    c8e4:	       tst.w d0
    c8e6:	   /-- bne.s c8ec <builtIn_showCharacter+0x28>
    c8e8:	   |   moveq #1,d0
    c8ea:	/--|-- bra.s c90e <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    c8ec:	|  \-> moveq #24,d0
    c8ee:	|      add.l 12(sp),d0
    c8f2:	|      move.l d0,-(sp)
    c8f4:	|      jsr 10694 <trimStack>
    c8fa:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    c8fc:	|      move.l (sp),d0
    c8fe:	|      move.l d0,-(sp)
    c900:	|      pea 1 <_start+0x1>
    c904:	|      jsr 762e <setShown>
    c90a:	|      addq.l #8,sp
	return BR_CONTINUE;
    c90c:	|      moveq #2,d0
}
    c90e:	\----> addq.l #4,sp
    c910:	       rts

0000c912 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    c912:	jsr 3354 <killSpeechTimers>
	killMostPeople ();
    c918:	jsr 65a6 <killMostPeople>
	return BR_CONTINUE;
    c91e:	moveq #2,d0
}
    c920:	rts

0000c922 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    c922:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c924:	       movea.l 16(sp),a0
    c928:	       move.l 24(a0),d0
    c92c:	       move.l d0,-(sp)
    c92e:	       pea 1 <_start+0x1>
    c932:	       move.l sp,d0
    c934:	       addq.l #8,d0
    c936:	       move.l d0,-(sp)
    c938:	       jsr fd32 <getValueType>
    c93e:	       lea 12(sp),sp
    c942:	       tst.w d0
    c944:	   /-- bne.s c94a <builtIn_setCharacterDrawMode+0x28>
    c946:	   |   moveq #1,d0
    c948:	/--|-- bra.s c9a4 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    c94a:	|  \-> moveq #24,d0
    c94c:	|      add.l 16(sp),d0
    c950:	|      move.l d0,-(sp)
    c952:	|      jsr 10694 <trimStack>
    c958:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c95a:	|      movea.l 16(sp),a0
    c95e:	|      move.l 24(a0),d0
    c962:	|      move.l d0,-(sp)
    c964:	|      pea 7 <_start+0x7>
    c968:	|      moveq #12,d0
    c96a:	|      add.l sp,d0
    c96c:	|      move.l d0,-(sp)
    c96e:	|      jsr fd32 <getValueType>
    c974:	|      lea 12(sp),sp
    c978:	|      tst.w d0
    c97a:	|  /-- bne.s c980 <builtIn_setCharacterDrawMode+0x5e>
    c97c:	|  |   moveq #1,d0
    c97e:	+--|-- bra.s c9a4 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    c980:	|  \-> moveq #24,d0
    c982:	|      add.l 16(sp),d0
    c986:	|      move.l d0,-(sp)
    c988:	|      jsr 10694 <trimStack>
    c98e:	|      addq.l #4,sp
	setDrawMode (di, obj);
    c990:	|      move.l 4(sp),d1
    c994:	|      move.l (sp),d0
    c996:	|      move.l d1,-(sp)
    c998:	|      move.l d0,-(sp)
    c99a:	|      jsr 705c <setDrawMode>
    c9a0:	|      addq.l #8,sp
	return BR_CONTINUE;
    c9a2:	|      moveq #2,d0
}
    c9a4:	\----> addq.l #8,sp
    c9a6:	       rts

0000c9a8 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    c9a8:	pea 155c0 <zbuffer.c.d110ca03+0x7a>
    c9ae:	jsr 11d08 <KPrintF>
    c9b4:	addq.l #4,sp
	return BR_CONTINUE;
    c9b6:	moveq #2,d0
}
    c9b8:	rts

0000c9ba <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    c9ba:	pea 155f3 <zbuffer.c.d110ca03+0xad>
    c9c0:	jsr 11d08 <KPrintF>
    c9c6:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    c9c8:	moveq #2,d0
}
    c9ca:	rts

0000c9cc <builtIn_setScale>:

builtIn(setScale)
{
    c9cc:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c9ce:	       movea.l 16(sp),a0
    c9d2:	       move.l 24(a0),d0
    c9d6:	       move.l d0,-(sp)
    c9d8:	       pea 1 <_start+0x1>
    c9dc:	       move.l sp,d0
    c9de:	       addq.l #8,d0
    c9e0:	       move.l d0,-(sp)
    c9e2:	       jsr fd32 <getValueType>
    c9e8:	       lea 12(sp),sp
    c9ec:	       tst.w d0
    c9ee:	   /-- bne.s c9f4 <builtIn_setScale+0x28>
    c9f0:	   |   moveq #1,d0
    c9f2:	/--|-- bra.s ca56 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    c9f4:	|  \-> moveq #24,d0
    c9f6:	|      add.l 16(sp),d0
    c9fa:	|      move.l d0,-(sp)
    c9fc:	|      jsr 10694 <trimStack>
    ca02:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ca04:	|      movea.l 16(sp),a0
    ca08:	|      move.l 24(a0),d0
    ca0c:	|      move.l d0,-(sp)
    ca0e:	|      pea 1 <_start+0x1>
    ca12:	|      moveq #12,d0
    ca14:	|      add.l sp,d0
    ca16:	|      move.l d0,-(sp)
    ca18:	|      jsr fd32 <getValueType>
    ca1e:	|      lea 12(sp),sp
    ca22:	|      tst.w d0
    ca24:	|  /-- bne.s ca2a <builtIn_setScale+0x5e>
    ca26:	|  |   moveq #1,d0
    ca28:	+--|-- bra.s ca56 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    ca2a:	|  \-> moveq #24,d0
    ca2c:	|      add.l 16(sp),d0
    ca30:	|      move.l d0,-(sp)
    ca32:	|      jsr 10694 <trimStack>
    ca38:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    ca3a:	|      move.l (sp),d0
    ca3c:	|      move.l d0,d0
    ca3e:	|      movea.w d0,a1
    ca40:	|      move.l 4(sp),d0
    ca44:	|      move.l d0,d0
    ca46:	|      movea.w d0,a0
    ca48:	|      move.l a1,-(sp)
    ca4a:	|      move.l a0,-(sp)
    ca4c:	|      jsr 7606 <setScale>
    ca52:	|      addq.l #8,sp
	return BR_CONTINUE;
    ca54:	|      moveq #2,d0
}
    ca56:	\----> addq.l #8,sp
    ca58:	       rts

0000ca5a <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    ca5a:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ca5c:	       movea.l 12(sp),a0
    ca60:	       move.l 24(a0),d0
    ca64:	       move.l d0,-(sp)
    ca66:	       pea 7 <_start+0x7>
    ca6a:	       move.l sp,d0
    ca6c:	       addq.l #8,d0
    ca6e:	       move.l d0,-(sp)
    ca70:	       jsr fd32 <getValueType>
    ca76:	       lea 12(sp),sp
    ca7a:	       tst.w d0
    ca7c:	   /-- bne.s ca82 <builtIn_stopCharacter+0x28>
    ca7e:	   |   moveq #1,d0
    ca80:	/--|-- bra.s caba <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    ca82:	|  \-> moveq #24,d0
    ca84:	|      add.l 12(sp),d0
    ca88:	|      move.l d0,-(sp)
    ca8a:	|      jsr 10694 <trimStack>
    ca90:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    ca92:	|      move.l (sp),d0
    ca94:	|      move.l d0,-(sp)
    ca96:	|      jsr 773a <stopPerson>
    ca9c:	|      addq.l #4,sp
    ca9e:	|      movea.w d0,a0
    caa0:	|      moveq #28,d0
    caa2:	|      add.l 12(sp),d0
    caa6:	|      move.l a0,-(sp)
    caa8:	|      pea 1 <_start+0x1>
    caac:	|      move.l d0,-(sp)
    caae:	|      jsr 10602 <setVariable>
    cab4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cab8:	|      moveq #2,d0
}
    caba:	\----> addq.l #4,sp
    cabc:	       rts

0000cabe <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    cabe:	pea 1562d <zbuffer.c.d110ca03+0xe7>
    cac4:	jsr 11d08 <KPrintF>
    caca:	addq.l #4,sp
	return BR_CONTINUE;
    cacc:	moveq #2,d0
}
    cace:	rts

0000cad0 <builtIn_animate>:

builtIn(animate)
{
    cad0:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    cad2:	       movea.l 16(sp),a0
    cad6:	       move.l 24(a0),d0
    cada:	       move.l d0,-(sp)
    cadc:	       jsr 1020a <getAnimationFromVar>
    cae2:	       addq.l #4,sp
    cae4:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    cae8:	   /-- bne.s caee <builtIn_animate+0x1e>
    caea:	   |   moveq #1,d0
    caec:	/--|-- bra.s cb6c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    caee:	|  \-> moveq #24,d0
    caf0:	|      add.l 16(sp),d0
    caf4:	|      move.l d0,-(sp)
    caf6:	|      jsr 10694 <trimStack>
    cafc:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cafe:	|      movea.l 16(sp),a0
    cb02:	|      move.l 24(a0),d0
    cb06:	|      move.l d0,-(sp)
    cb08:	|      pea 7 <_start+0x7>
    cb0c:	|      move.l sp,d0
    cb0e:	|      addq.l #8,d0
    cb10:	|      move.l d0,-(sp)
    cb12:	|      jsr fd32 <getValueType>
    cb18:	|      lea 12(sp),sp
    cb1c:	|      tst.w d0
    cb1e:	|  /-- bne.s cb24 <builtIn_animate+0x54>
    cb20:	|  |   moveq #1,d0
    cb22:	+--|-- bra.s cb6c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    cb24:	|  \-> moveq #24,d0
    cb26:	|      add.l 16(sp),d0
    cb2a:	|      move.l d0,-(sp)
    cb2c:	|      jsr 10694 <trimStack>
    cb32:	|      addq.l #4,sp
	animatePerson (obj, pp);
    cb34:	|      move.l (sp),d0
    cb36:	|      move.l 4(sp),-(sp)
    cb3a:	|      move.l d0,-(sp)
    cb3c:	|      jsr 57f4 <animatePerson>
    cb42:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    cb44:	|      move.l 4(sp),-(sp)
    cb48:	|      jsr 778e <timeForAnim>
    cb4e:	|      addq.l #4,sp
    cb50:	|      move.l d0,d1
    cb52:	|      moveq #28,d0
    cb54:	|      add.l 16(sp),d0
    cb58:	|      move.l d1,-(sp)
    cb5a:	|      pea 1 <_start+0x1>
    cb5e:	|      move.l d0,-(sp)
    cb60:	|      jsr 10602 <setVariable>
    cb66:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cb6a:	|      moveq #2,d0
}
    cb6c:	\----> addq.l #8,sp
    cb6e:	       rts

0000cb70 <builtIn_setCostume>:

builtIn(setCostume)
{
    cb70:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    cb72:	       movea.l 16(sp),a0
    cb76:	       move.l 24(a0),d0
    cb7a:	       move.l d0,-(sp)
    cb7c:	       jsr f9de <getCostumeFromVar>
    cb82:	       addq.l #4,sp
    cb84:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    cb88:	   /-- bne.s cb8e <builtIn_setCostume+0x1e>
    cb8a:	   |   moveq #1,d0
    cb8c:	/--|-- bra.s cbe6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    cb8e:	|  \-> moveq #24,d0
    cb90:	|      add.l 16(sp),d0
    cb94:	|      move.l d0,-(sp)
    cb96:	|      jsr 10694 <trimStack>
    cb9c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cb9e:	|      movea.l 16(sp),a0
    cba2:	|      move.l 24(a0),d0
    cba6:	|      move.l d0,-(sp)
    cba8:	|      pea 7 <_start+0x7>
    cbac:	|      move.l sp,d0
    cbae:	|      addq.l #8,d0
    cbb0:	|      move.l d0,-(sp)
    cbb2:	|      jsr fd32 <getValueType>
    cbb8:	|      lea 12(sp),sp
    cbbc:	|      tst.w d0
    cbbe:	|  /-- bne.s cbc4 <builtIn_setCostume+0x54>
    cbc0:	|  |   moveq #1,d0
    cbc2:	+--|-- bra.s cbe6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    cbc4:	|  \-> moveq #24,d0
    cbc6:	|      add.l 16(sp),d0
    cbca:	|      move.l d0,-(sp)
    cbcc:	|      jsr 10694 <trimStack>
    cbd2:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    cbd4:	|      move.l (sp),d0
    cbd6:	|      move.l 4(sp),-(sp)
    cbda:	|      move.l d0,-(sp)
    cbdc:	|      jsr 583e <animatePersonUsingPersona>
    cbe2:	|      addq.l #8,sp
	return BR_CONTINUE;
    cbe4:	|      moveq #2,d0
}
    cbe6:	\----> addq.l #8,sp
    cbe8:	       rts

0000cbea <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    cbea:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cbec:	       movea.l 16(sp),a0
    cbf0:	       move.l 24(a0),d0
    cbf4:	       move.l d0,-(sp)
    cbf6:	       pea 1 <_start+0x1>
    cbfa:	       move.l sp,d0
    cbfc:	       addq.l #8,d0
    cbfe:	       move.l d0,-(sp)
    cc00:	       jsr fd32 <getValueType>
    cc06:	       lea 12(sp),sp
    cc0a:	       tst.w d0
    cc0c:	   /-- bne.s cc12 <builtIn_floatCharacter+0x28>
    cc0e:	   |   moveq #1,d0
    cc10:	/--|-- bra.s cc86 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    cc12:	|  \-> moveq #24,d0
    cc14:	|      add.l 16(sp),d0
    cc18:	|      move.l d0,-(sp)
    cc1a:	|      jsr 10694 <trimStack>
    cc20:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cc22:	|      movea.l 16(sp),a0
    cc26:	|      move.l 24(a0),d0
    cc2a:	|      move.l d0,-(sp)
    cc2c:	|      pea 7 <_start+0x7>
    cc30:	|      moveq #12,d0
    cc32:	|      add.l sp,d0
    cc34:	|      move.l d0,-(sp)
    cc36:	|      jsr fd32 <getValueType>
    cc3c:	|      lea 12(sp),sp
    cc40:	|      tst.w d0
    cc42:	|  /-- bne.s cc48 <builtIn_floatCharacter+0x5e>
    cc44:	|  |   moveq #1,d0
    cc46:	+--|-- bra.s cc86 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    cc48:	|  \-> moveq #24,d0
    cc4a:	|      add.l 16(sp),d0
    cc4e:	|      move.l d0,-(sp)
    cc50:	|      jsr 10694 <trimStack>
    cc56:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    cc58:	|      move.l 4(sp),d1
    cc5c:	|      move.l (sp),d0
    cc5e:	|      move.l d1,-(sp)
    cc60:	|      move.l d0,-(sp)
    cc62:	|      jsr 6168 <floatCharacter>
    cc68:	|      addq.l #8,sp
    cc6a:	|      movea.w d0,a0
    cc6c:	|      moveq #28,d0
    cc6e:	|      add.l 16(sp),d0
    cc72:	|      move.l a0,-(sp)
    cc74:	|      pea 1 <_start+0x1>
    cc78:	|      move.l d0,-(sp)
    cc7a:	|      jsr 10602 <setVariable>
    cc80:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cc84:	|      moveq #2,d0
}
    cc86:	\----> addq.l #8,sp
    cc88:	       rts

0000cc8a <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    cc8a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cc8c:	       movea.l 16(sp),a0
    cc90:	       move.l 24(a0),d0
    cc94:	       move.l d0,-(sp)
    cc96:	       pea 1 <_start+0x1>
    cc9a:	       move.l sp,d0
    cc9c:	       addq.l #8,d0
    cc9e:	       move.l d0,-(sp)
    cca0:	       jsr fd32 <getValueType>
    cca6:	       lea 12(sp),sp
    ccaa:	       tst.w d0
    ccac:	   /-- bne.s ccb2 <builtIn_setCharacterWalkSpeed+0x28>
    ccae:	   |   moveq #1,d0
    ccb0:	/--|-- bra.s cd26 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    ccb2:	|  \-> moveq #24,d0
    ccb4:	|      add.l 16(sp),d0
    ccb8:	|      move.l d0,-(sp)
    ccba:	|      jsr 10694 <trimStack>
    ccc0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ccc2:	|      movea.l 16(sp),a0
    ccc6:	|      move.l 24(a0),d0
    ccca:	|      move.l d0,-(sp)
    cccc:	|      pea 7 <_start+0x7>
    ccd0:	|      moveq #12,d0
    ccd2:	|      add.l sp,d0
    ccd4:	|      move.l d0,-(sp)
    ccd6:	|      jsr fd32 <getValueType>
    ccdc:	|      lea 12(sp),sp
    cce0:	|      tst.w d0
    cce2:	|  /-- bne.s cce8 <builtIn_setCharacterWalkSpeed+0x5e>
    cce4:	|  |   moveq #1,d0
    cce6:	+--|-- bra.s cd26 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    cce8:	|  \-> moveq #24,d0
    ccea:	|      add.l 16(sp),d0
    ccee:	|      move.l d0,-(sp)
    ccf0:	|      jsr 10694 <trimStack>
    ccf6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    ccf8:	|      move.l 4(sp),d1
    ccfc:	|      move.l (sp),d0
    ccfe:	|      move.l d1,-(sp)
    cd00:	|      move.l d0,-(sp)
    cd02:	|      jsr 75a2 <setCharacterWalkSpeed>
    cd08:	|      addq.l #8,sp
    cd0a:	|      movea.w d0,a0
    cd0c:	|      moveq #28,d0
    cd0e:	|      add.l 16(sp),d0
    cd12:	|      move.l a0,-(sp)
    cd14:	|      pea 1 <_start+0x1>
    cd18:	|      move.l d0,-(sp)
    cd1a:	|      jsr 10602 <setVariable>
    cd20:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cd24:	|      moveq #2,d0
}
    cd26:	\----> addq.l #8,sp
    cd28:	       rts

0000cd2a <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    cd2a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cd2c:	       movea.l 16(sp),a0
    cd30:	       move.l 24(a0),d0
    cd34:	       move.l d0,-(sp)
    cd36:	       pea 1 <_start+0x1>
    cd3a:	       move.l sp,d0
    cd3c:	       addq.l #8,d0
    cd3e:	       move.l d0,-(sp)
    cd40:	       jsr fd32 <getValueType>
    cd46:	       lea 12(sp),sp
    cd4a:	       tst.w d0
    cd4c:	   /-- bne.s cd52 <builtIn_turnCharacter+0x28>
    cd4e:	   |   moveq #1,d0
    cd50:	/--|-- bra.s cdc6 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    cd52:	|  \-> moveq #24,d0
    cd54:	|      add.l 16(sp),d0
    cd58:	|      move.l d0,-(sp)
    cd5a:	|      jsr 10694 <trimStack>
    cd60:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cd62:	|      movea.l 16(sp),a0
    cd66:	|      move.l 24(a0),d0
    cd6a:	|      move.l d0,-(sp)
    cd6c:	|      pea 7 <_start+0x7>
    cd70:	|      moveq #12,d0
    cd72:	|      add.l sp,d0
    cd74:	|      move.l d0,-(sp)
    cd76:	|      jsr fd32 <getValueType>
    cd7c:	|      lea 12(sp),sp
    cd80:	|      tst.w d0
    cd82:	|  /-- bne.s cd88 <builtIn_turnCharacter+0x5e>
    cd84:	|  |   moveq #1,d0
    cd86:	+--|-- bra.s cdc6 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    cd88:	|  \-> moveq #24,d0
    cd8a:	|      add.l 16(sp),d0
    cd8e:	|      move.l d0,-(sp)
    cd90:	|      jsr 10694 <trimStack>
    cd96:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    cd98:	|      move.l (sp),d1
    cd9a:	|      move.l 4(sp),d0
    cd9e:	|      move.l d1,-(sp)
    cda0:	|      move.l d0,-(sp)
    cda2:	|      jsr 7846 <turnPersonToFace>
    cda8:	|      addq.l #8,sp
    cdaa:	|      movea.w d0,a0
    cdac:	|      moveq #28,d0
    cdae:	|      add.l 16(sp),d0
    cdb2:	|      move.l a0,-(sp)
    cdb4:	|      pea 1 <_start+0x1>
    cdb8:	|      move.l d0,-(sp)
    cdba:	|      jsr 10602 <setVariable>
    cdc0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cdc4:	|      moveq #2,d0
}
    cdc6:	\----> addq.l #8,sp
    cdc8:	       rts

0000cdca <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    cdca:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cdcc:	       movea.l 16(sp),a0
    cdd0:	       move.l 24(a0),d0
    cdd4:	       move.l d0,-(sp)
    cdd6:	       pea 1 <_start+0x1>
    cdda:	       move.l sp,d0
    cddc:	       addq.l #8,d0
    cdde:	       move.l d0,-(sp)
    cde0:	       jsr fd32 <getValueType>
    cde6:	       lea 12(sp),sp
    cdea:	       tst.w d0
    cdec:	   /-- bne.s cdf2 <builtIn_setCharacterExtra+0x28>
    cdee:	   |   moveq #1,d0
    cdf0:	/--|-- bra.s ce66 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    cdf2:	|  \-> moveq #24,d0
    cdf4:	|      add.l 16(sp),d0
    cdf8:	|      move.l d0,-(sp)
    cdfa:	|      jsr 10694 <trimStack>
    ce00:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ce02:	|      movea.l 16(sp),a0
    ce06:	|      move.l 24(a0),d0
    ce0a:	|      move.l d0,-(sp)
    ce0c:	|      pea 7 <_start+0x7>
    ce10:	|      moveq #12,d0
    ce12:	|      add.l sp,d0
    ce14:	|      move.l d0,-(sp)
    ce16:	|      jsr fd32 <getValueType>
    ce1c:	|      lea 12(sp),sp
    ce20:	|      tst.w d0
    ce22:	|  /-- bne.s ce28 <builtIn_setCharacterExtra+0x5e>
    ce24:	|  |   moveq #1,d0
    ce26:	+--|-- bra.s ce66 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    ce28:	|  \-> moveq #24,d0
    ce2a:	|      add.l 16(sp),d0
    ce2e:	|      move.l d0,-(sp)
    ce30:	|      jsr 10694 <trimStack>
    ce36:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    ce38:	|      move.l (sp),d1
    ce3a:	|      move.l 4(sp),d0
    ce3e:	|      move.l d1,-(sp)
    ce40:	|      move.l d0,-(sp)
    ce42:	|      jsr 75d0 <setPersonExtra>
    ce48:	|      addq.l #8,sp
    ce4a:	|      movea.w d0,a0
    ce4c:	|      moveq #28,d0
    ce4e:	|      add.l 16(sp),d0
    ce52:	|      move.l a0,-(sp)
    ce54:	|      pea 1 <_start+0x1>
    ce58:	|      move.l d0,-(sp)
    ce5a:	|      jsr 10602 <setVariable>
    ce60:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ce64:	|      moveq #2,d0
}
    ce66:	\----> addq.l #8,sp
    ce68:	       rts

0000ce6a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    ce6a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ce6c:	       movea.l 12(sp),a0
    ce70:	       move.l 24(a0),d0
    ce74:	       move.l d0,-(sp)
    ce76:	       pea 7 <_start+0x7>
    ce7a:	       move.l sp,d0
    ce7c:	       addq.l #8,d0
    ce7e:	       move.l d0,-(sp)
    ce80:	       jsr fd32 <getValueType>
    ce86:	       lea 12(sp),sp
    ce8a:	       tst.w d0
    ce8c:	   /-- bne.s ce92 <builtIn_removeCharacter+0x28>
    ce8e:	   |   moveq #1,d0
    ce90:	/--|-- bra.s ceb0 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    ce92:	|  \-> moveq #24,d0
    ce94:	|      add.l 12(sp),d0
    ce98:	|      move.l d0,-(sp)
    ce9a:	|      jsr 10694 <trimStack>
    cea0:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    cea2:	|      move.l (sp),d0
    cea4:	|      move.l d0,-(sp)
    cea6:	|      jsr 6900 <removeOneCharacter>
    ceac:	|      addq.l #4,sp
	return BR_CONTINUE;
    ceae:	|      moveq #2,d0
}
    ceb0:	\----> addq.l #4,sp
    ceb2:	       rts

0000ceb4 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    ceb4:	                lea -28(sp),sp
    ceb8:	                move.l d2,-(sp)
    ceba:	                move.l 44(sp),d1
    cebe:	                move.l 48(sp),d0
    cec2:	                move.w d1,d1
    cec4:	                move.w d1,6(sp)
    cec8:	                move.w d0,d0
    ceca:	                move.w d0,4(sp)
	switch (numParams) {
    cece:	                moveq #2,d0
    ced0:	                cmp.l 36(sp),d0
    ced4:	      /-------- beq.w d016 <moveChr+0x162>
    ced8:	      |         moveq #3,d0
    ceda:	      |         cmp.l 36(sp),d0
    cede:	/-----|-------- bne.w d14a <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cee2:	|     |         movea.l 40(sp),a0
    cee6:	|     |         move.l 24(a0),d0
    ceea:	|     |         move.l d0,-(sp)
    ceec:	|     |         pea 1 <_start+0x1>
    cef0:	|     |         lea 20(sp),a0
    cef4:	|     |         move.l a0,-(sp)
    cef6:	|     |         jsr fd32 <getValueType>
    cefc:	|     |         lea 12(sp),sp
    cf00:	|     |         tst.w d0
    cf02:	|     |     /-- bne.s cf0a <moveChr+0x56>
    cf04:	|     |     |   moveq #1,d0
    cf06:	|  /--|-----|-- bra.w d15a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    cf0a:	|  |  |     \-> moveq #24,d0
    cf0c:	|  |  |         add.l 40(sp),d0
    cf10:	|  |  |         move.l d0,-(sp)
    cf12:	|  |  |         jsr 10694 <trimStack>
    cf18:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf1a:	|  |  |         movea.l 40(sp),a0
    cf1e:	|  |  |         move.l 24(a0),d0
    cf22:	|  |  |         move.l d0,-(sp)
    cf24:	|  |  |         pea 1 <_start+0x1>
    cf28:	|  |  |         lea 24(sp),a0
    cf2c:	|  |  |         move.l a0,-(sp)
    cf2e:	|  |  |         jsr fd32 <getValueType>
    cf34:	|  |  |         lea 12(sp),sp
    cf38:	|  |  |         tst.w d0
    cf3a:	|  |  |     /-- bne.s cf42 <moveChr+0x8e>
    cf3c:	|  |  |     |   moveq #1,d0
    cf3e:	|  +--|-----|-- bra.w d15a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    cf42:	|  |  |     \-> moveq #24,d0
    cf44:	|  |  |         add.l 40(sp),d0
    cf48:	|  |  |         move.l d0,-(sp)
    cf4a:	|  |  |         jsr 10694 <trimStack>
    cf50:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cf52:	|  |  |         movea.l 40(sp),a0
    cf56:	|  |  |         move.l 24(a0),d0
    cf5a:	|  |  |         move.l d0,-(sp)
    cf5c:	|  |  |         pea 7 <_start+0x7>
    cf60:	|  |  |         lea 16(sp),a0
    cf64:	|  |  |         move.l a0,-(sp)
    cf66:	|  |  |         jsr fd32 <getValueType>
    cf6c:	|  |  |         lea 12(sp),sp
    cf70:	|  |  |         tst.w d0
    cf72:	|  |  |     /-- bne.s cf7a <moveChr+0xc6>
    cf74:	|  |  |     |   moveq #1,d0
    cf76:	|  +--|-----|-- bra.w d15a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    cf7a:	|  |  |     \-> moveq #24,d0
    cf7c:	|  |  |         add.l 40(sp),d0
    cf80:	|  |  |         move.l d0,-(sp)
    cf82:	|  |  |         jsr 10694 <trimStack>
    cf88:	|  |  |         addq.l #4,sp

			if (force) {
    cf8a:	|  |  |         tst.w 6(sp)
    cf8e:	|  |  |     /-- beq.s cfbe <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    cf90:	|  |  |     |   movea.l 8(sp),a0
    cf94:	|  |  |     |   move.l 12(sp),d1
    cf98:	|  |  |     |   move.l 16(sp),d0
    cf9c:	|  |  |     |   pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
    cfa0:	|  |  |     |   move.l 44(sp),-(sp)
    cfa4:	|  |  |     |   move.l a0,-(sp)
    cfa6:	|  |  |     |   move.l d1,-(sp)
    cfa8:	|  |  |     |   move.l d0,-(sp)
    cfaa:	|  |  |     |   jsr 618c <forceWalkingPerson>
    cfb0:	|  |  |     |   lea 20(sp),sp
    cfb4:	|  |  |     |   tst.w d0
    cfb6:	|  |  |  /--|-- beq.s d010 <moveChr+0x15c>
    cfb8:	|  |  |  |  |   moveq #3,d0
    cfba:	|  +--|--|--|-- bra.w d15a <moveChr+0x2a6>
			} else if (immediate) {
    cfbe:	|  |  |  |  \-> tst.w 4(sp)
    cfc2:	|  |  |  |  /-- beq.s cfe2 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    cfc4:	|  |  |  |  |   movea.l 8(sp),a0
    cfc8:	|  |  |  |  |   move.l 12(sp),d1
    cfcc:	|  |  |  |  |   move.l 16(sp),d0
    cfd0:	|  |  |  |  |   move.l a0,-(sp)
    cfd2:	|  |  |  |  |   move.l d1,-(sp)
    cfd4:	|  |  |  |  |   move.l d0,-(sp)
    cfd6:	|  |  |  |  |   jsr 6494 <jumpPerson>
    cfdc:	|  |  |  |  |   lea 12(sp),sp
    cfe0:	|  |  |  +--|-- bra.s d010 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    cfe2:	|  |  |  |  \-> movea.l 8(sp),a0
    cfe6:	|  |  |  |      move.l 12(sp),d1
    cfea:	|  |  |  |      move.l 16(sp),d0
    cfee:	|  |  |  |      pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
    cff2:	|  |  |  |      move.l 44(sp),-(sp)
    cff6:	|  |  |  |      move.l a0,-(sp)
    cff8:	|  |  |  |      move.l d1,-(sp)
    cffa:	|  |  |  |      move.l d0,-(sp)
    cffc:	|  |  |  |      jsr 6664 <makeWalkingPerson>
    d002:	|  |  |  |      lea 20(sp),sp
    d006:	|  |  |  |      tst.w d0
    d008:	|  |  |  +----- beq.s d010 <moveChr+0x15c>
    d00a:	|  |  |  |      moveq #3,d0
    d00c:	|  +--|--|----- bra.w d15a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    d010:	|  |  |  \----> moveq #2,d0
    d012:	|  +--|-------- bra.w d15a <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d016:	|  |  \-------> movea.l 40(sp),a0
    d01a:	|  |            move.l 24(a0),d0
    d01e:	|  |            move.l d0,-(sp)
    d020:	|  |            pea 7 <_start+0x7>
    d024:	|  |            moveq #32,d0
    d026:	|  |            add.l sp,d0
    d028:	|  |            move.l d0,-(sp)
    d02a:	|  |            jsr fd32 <getValueType>
    d030:	|  |            lea 12(sp),sp
    d034:	|  |            tst.w d0
    d036:	|  |        /-- bne.s d03e <moveChr+0x18a>
    d038:	|  |        |   moveq #1,d0
    d03a:	|  +--------|-- bra.w d15a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d03e:	|  |        \-> moveq #24,d0
    d040:	|  |            add.l 40(sp),d0
    d044:	|  |            move.l d0,-(sp)
    d046:	|  |            jsr 10694 <trimStack>
    d04c:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d04e:	|  |            movea.l 40(sp),a0
    d052:	|  |            move.l 24(a0),d0
    d056:	|  |            move.l d0,-(sp)
    d058:	|  |            pea 7 <_start+0x7>
    d05c:	|  |            lea 28(sp),a0
    d060:	|  |            move.l a0,-(sp)
    d062:	|  |            jsr fd32 <getValueType>
    d068:	|  |            lea 12(sp),sp
    d06c:	|  |            tst.w d0
    d06e:	|  |        /-- bne.s d076 <moveChr+0x1c2>
    d070:	|  |        |   moveq #1,d0
    d072:	|  +--------|-- bra.w d15a <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d076:	|  |        \-> moveq #24,d0
    d078:	|  |            add.l 40(sp),d0
    d07c:	|  |            move.l d0,-(sp)
    d07e:	|  |            jsr 10694 <trimStack>
    d084:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    d086:	|  |            move.l 24(sp),d0
    d08a:	|  |            move.l d0,-(sp)
    d08c:	|  |            jsr 107da <getRegionForObject>
    d092:	|  |            addq.l #4,sp
    d094:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    d098:	|  |        /-- bne.s d0a0 <moveChr+0x1ec>
    d09a:	|  |        |   moveq #2,d0
    d09c:	|  +--------|-- bra.w d15a <moveChr+0x2a6>

			if (force)
    d0a0:	|  |        \-> tst.w 6(sp)
    d0a4:	|  |        /-- beq.s d0e0 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    d0a6:	|  |        |   movea.l 28(sp),a0
    d0aa:	|  |        |   move.l 24(a0),d2
    d0ae:	|  |        |   movea.l 20(sp),a1
    d0b2:	|  |        |   movea.l 28(sp),a0
    d0b6:	|  |        |   move.l 20(a0),d1
    d0ba:	|  |        |   movea.l 28(sp),a0
    d0be:	|  |        |   move.l 16(a0),d0
    d0c2:	|  |        |   move.l d2,-(sp)
    d0c4:	|  |        |   move.l 44(sp),-(sp)
    d0c8:	|  |        |   move.l a1,-(sp)
    d0ca:	|  |        |   move.l d1,-(sp)
    d0cc:	|  |        |   move.l d0,-(sp)
    d0ce:	|  |        |   jsr 618c <forceWalkingPerson>
    d0d4:	|  |        |   lea 20(sp),sp
    d0d8:	|  |        |   tst.w d0
    d0da:	|  |     /--|-- beq.s d146 <moveChr+0x292>
    d0dc:	|  |     |  |   moveq #3,d0
    d0de:	|  +-----|--|-- bra.s d15a <moveChr+0x2a6>
			}
			else if (immediate)
    d0e0:	|  |     |  \-> tst.w 4(sp)
    d0e4:	|  |     |  /-- beq.s d10c <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    d0e6:	|  |     |  |   movea.l 20(sp),a1
    d0ea:	|  |     |  |   movea.l 28(sp),a0
    d0ee:	|  |     |  |   move.l 20(a0),d1
    d0f2:	|  |     |  |   movea.l 28(sp),a0
    d0f6:	|  |     |  |   move.l 16(a0),d0
    d0fa:	|  |     |  |   move.l a1,-(sp)
    d0fc:	|  |     |  |   move.l d1,-(sp)
    d0fe:	|  |     |  |   move.l d0,-(sp)
    d100:	|  |     |  |   jsr 6494 <jumpPerson>
    d106:	|  |     |  |   lea 12(sp),sp
    d10a:	|  |     +--|-- bra.s d146 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    d10c:	|  |     |  \-> movea.l 28(sp),a0
    d110:	|  |     |      move.l 24(a0),d2
    d114:	|  |     |      movea.l 20(sp),a1
    d118:	|  |     |      movea.l 28(sp),a0
    d11c:	|  |     |      move.l 20(a0),d1
    d120:	|  |     |      movea.l 28(sp),a0
    d124:	|  |     |      move.l 16(a0),d0
    d128:	|  |     |      move.l d2,-(sp)
    d12a:	|  |     |      move.l 44(sp),-(sp)
    d12e:	|  |     |      move.l a1,-(sp)
    d130:	|  |     |      move.l d1,-(sp)
    d132:	|  |     |      move.l d0,-(sp)
    d134:	|  |     |      jsr 6664 <makeWalkingPerson>
    d13a:	|  |     |      lea 20(sp),sp
    d13e:	|  |     |      tst.w d0
    d140:	|  |     +----- beq.s d146 <moveChr+0x292>
    d142:	|  |     |      moveq #3,d0
    d144:	|  +-----|----- bra.s d15a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    d146:	|  |     \----> moveq #2,d0
    d148:	|  +----------- bra.s d15a <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    d14a:	\--|----------> pea 1564b <zbuffer.c.d110ca03+0x105>
    d150:	   |            jsr 11d08 <KPrintF>
    d156:	   |            addq.l #4,sp
			return BR_ERROR;
    d158:	   |            moveq #1,d0
	}
}
    d15a:	   \----------> move.l (sp)+,d2
    d15c:	                lea 28(sp),sp
    d160:	                rts

0000d162 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    d162:	clr.l -(sp)
    d164:	clr.l -(sp)
    d166:	move.l 16(sp),-(sp)
    d16a:	move.l 16(sp),-(sp)
    d16e:	jsr ceb4 <moveChr>
    d174:	lea 16(sp),sp
}
    d178:	rts

0000d17a <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    d17a:	clr.l -(sp)
    d17c:	pea 1 <_start+0x1>
    d180:	move.l 16(sp),-(sp)
    d184:	move.l 16(sp),-(sp)
    d188:	jsr ceb4 <moveChr>
    d18e:	lea 16(sp),sp
}
    d192:	rts

0000d194 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    d194:	pea 1 <_start+0x1>
    d198:	clr.l -(sp)
    d19a:	move.l 16(sp),-(sp)
    d19e:	move.l 16(sp),-(sp)
    d1a2:	jsr ceb4 <moveChr>
    d1a8:	lea 16(sp),sp
}
    d1ac:	rts

0000d1ae <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    d1ae:	jsr 4754 <clearStatusBar>
	return BR_CONTINUE;
    d1b4:	moveq #2,d0
}
    d1b6:	rts

0000d1b8 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    d1b8:	jsr 47fc <killLastStatus>
	return BR_CONTINUE;
    d1be:	moveq #2,d0
}
    d1c0:	rts

0000d1c2 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    d1c2:	jsr 46ea <addStatusBar>
	return BR_CONTINUE;
    d1c8:	moveq #2,d0
}
    d1ca:	rts

0000d1cc <builtIn_statusText>:

builtIn(statusText)
{
    d1cc:	       subq.l #8,sp
    d1ce:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    d1d0:	       movea.l 20(sp),a0
    d1d4:	       move.l 24(a0),d0
    d1d8:	       move.l d0,-(sp)
    d1da:	       jsr 10308 <getTextFromAnyVar>
    d1e0:	       addq.l #4,sp
    d1e2:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    d1e6:	   /-- bne.s d1ec <builtIn_statusText+0x20>
    d1e8:	   |   moveq #1,d0
    d1ea:	/--|-- bra.s d220 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    d1ec:	|  \-> moveq #24,d0
    d1ee:	|      add.l 20(sp),d0
    d1f2:	|      move.l d0,-(sp)
    d1f4:	|      jsr 10694 <trimStack>
    d1fa:	|      addq.l #4,sp
	setStatusBar(newText);
    d1fc:	|      move.l 8(sp),-(sp)
    d200:	|      jsr 4a7c <setStatusBar>
    d206:	|      addq.l #4,sp
	FreeVec(newText);
    d208:	|      move.l 8(sp),4(sp)
    d20e:	|      move.l 17b28 <SysBase>,d0
    d214:	|      movea.l d0,a6
    d216:	|      movea.l 4(sp),a1
    d21a:	|      jsr -690(a6)
	return BR_CONTINUE;
    d21e:	|      moveq #2,d0
}
    d220:	\----> movea.l (sp)+,a6
    d222:	       addq.l #8,sp
    d224:	       rts

0000d226 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    d226:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d228:	       movea.l 12(sp),a0
    d22c:	       move.l 24(a0),d0
    d230:	       move.l d0,-(sp)
    d232:	       pea 1 <_start+0x1>
    d236:	       move.l sp,d0
    d238:	       addq.l #8,d0
    d23a:	       move.l d0,-(sp)
    d23c:	       jsr fd32 <getValueType>
    d242:	       lea 12(sp),sp
    d246:	       tst.w d0
    d248:	   /-- bne.s d24e <builtIn_lightStatus+0x28>
    d24a:	   |   moveq #1,d0
    d24c:	/--|-- bra.s d26c <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    d24e:	|  \-> moveq #24,d0
    d250:	|      add.l 12(sp),d0
    d254:	|      move.l d0,-(sp)
    d256:	|      jsr 10694 <trimStack>
    d25c:	|      addq.l #4,sp
	setLitStatus (val);
    d25e:	|      move.l (sp),d0
    d260:	|      move.l d0,-(sp)
    d262:	|      jsr 4a6c <setLitStatus>
    d268:	|      addq.l #4,sp
	return BR_CONTINUE;
    d26a:	|      moveq #2,d0
}
    d26c:	\----> addq.l #4,sp
    d26e:	       rts

0000d270 <builtIn_positionStatus>:

builtIn(positionStatus)
{
    d270:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d272:	       movea.l 16(sp),a0
    d276:	       move.l 24(a0),d0
    d27a:	       move.l d0,-(sp)
    d27c:	       pea 1 <_start+0x1>
    d280:	       move.l sp,d0
    d282:	       addq.l #8,d0
    d284:	       move.l d0,-(sp)
    d286:	       jsr fd32 <getValueType>
    d28c:	       lea 12(sp),sp
    d290:	       tst.w d0
    d292:	   /-- bne.s d298 <builtIn_positionStatus+0x28>
    d294:	   |   moveq #1,d0
    d296:	/--|-- bra.s d2f2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    d298:	|  \-> moveq #24,d0
    d29a:	|      add.l 16(sp),d0
    d29e:	|      move.l d0,-(sp)
    d2a0:	|      jsr 10694 <trimStack>
    d2a6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d2a8:	|      movea.l 16(sp),a0
    d2ac:	|      move.l 24(a0),d0
    d2b0:	|      move.l d0,-(sp)
    d2b2:	|      pea 1 <_start+0x1>
    d2b6:	|      moveq #12,d0
    d2b8:	|      add.l sp,d0
    d2ba:	|      move.l d0,-(sp)
    d2bc:	|      jsr fd32 <getValueType>
    d2c2:	|      lea 12(sp),sp
    d2c6:	|      tst.w d0
    d2c8:	|  /-- bne.s d2ce <builtIn_positionStatus+0x5e>
    d2ca:	|  |   moveq #1,d0
    d2cc:	+--|-- bra.s d2f2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    d2ce:	|  \-> moveq #24,d0
    d2d0:	|      add.l 16(sp),d0
    d2d4:	|      move.l d0,-(sp)
    d2d6:	|      jsr 10694 <trimStack>
    d2dc:	|      addq.l #4,sp
	positionStatus (x, y);
    d2de:	|      move.l (sp),d1
    d2e0:	|      move.l 4(sp),d0
    d2e4:	|      move.l d1,-(sp)
    d2e6:	|      move.l d0,-(sp)
    d2e8:	|      jsr 485e <positionStatus>
    d2ee:	|      addq.l #8,sp
	return BR_CONTINUE;
    d2f0:	|      moveq #2,d0
}
    d2f2:	\----> addq.l #8,sp
    d2f4:	       rts

0000d2f6 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    d2f6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d2f8:	       movea.l 12(sp),a0
    d2fc:	       move.l 24(a0),d0
    d300:	       move.l d0,-(sp)
    d302:	       pea 1 <_start+0x1>
    d306:	       move.l sp,d0
    d308:	       addq.l #8,d0
    d30a:	       move.l d0,-(sp)
    d30c:	       jsr fd32 <getValueType>
    d312:	       lea 12(sp),sp
    d316:	       tst.w d0
    d318:	   /-- bne.s d31e <builtIn_alignStatus+0x28>
    d31a:	   |   moveq #1,d0
    d31c:	/--|-- bra.s d33e <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    d31e:	|  \-> moveq #24,d0
    d320:	|      add.l 12(sp),d0
    d324:	|      move.l d0,-(sp)
    d326:	|      jsr 10694 <trimStack>
    d32c:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    d32e:	|      move.l (sp),d0
    d330:	|      movea.l 1601a <nowStatus>,a0
    d336:	|      move.l d0,d0
    d338:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    d33c:	|      moveq #2,d0
}
    d33e:	\----> addq.l #4,sp
    d340:	       rts

0000d342 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    d342:	             tst.l 4(sp)
    d346:	      /----- beq.s d352 <getFuncNumForCallback+0x10>
    d348:	      |      moveq #1,d0
    d34a:	      |      cmp.l 4(sp),d0
    d34e:	      |  /-- beq.s d358 <getFuncNumForCallback+0x16>
    d350:	   /--|--|-- bra.s d38e <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    d352:	   |  \--|-> clr.l 12(sp)
			break;
    d356:	/--|-----|-- bra.s d3a0 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    d358:	|  |     \-> movea.l 8(sp),a0
    d35c:	|  |         move.l 24(a0),d0
    d360:	|  |         move.l d0,-(sp)
    d362:	|  |         pea 2 <_start+0x2>
    d366:	|  |         move.l 20(sp),-(sp)
    d36a:	|  |         jsr fd32 <getValueType>
    d370:	|  |         lea 12(sp),sp
    d374:	|  |         tst.w d0
    d376:	|  |     /-- bne.s d37c <getFuncNumForCallback+0x3a>
    d378:	|  |     |   clr.w d0
    d37a:	|  |  /--|-- bra.s d3a2 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    d37c:	|  |  |  \-> moveq #24,d0
    d37e:	|  |  |      add.l 8(sp),d0
    d382:	|  |  |      move.l d0,-(sp)
    d384:	|  |  |      jsr 10694 <trimStack>
    d38a:	|  |  |      addq.l #4,sp
			break;
    d38c:	+--|--|----- bra.s d3a0 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    d38e:	|  \--|----> pea 15681 <zbuffer.c.d110ca03+0x13b>
    d394:	|     |      jsr 11d08 <KPrintF>
    d39a:	|     |      addq.l #4,sp
			return FALSE;
    d39c:	|     |      clr.w d0
    d39e:	|     +----- bra.s d3a2 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    d3a0:	\-----|----> moveq #1,d0
}
    d3a2:	      \----> rts

0000d3a4 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    d3a4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d3a6:	       move.l sp,d0
    d3a8:	       move.l d0,-(sp)
    d3aa:	       move.l 16(sp),-(sp)
    d3ae:	       move.l 16(sp),-(sp)
    d3b2:	       jsr d342 <getFuncNumForCallback>
    d3b8:	       lea 12(sp),sp
    d3bc:	       tst.w d0
    d3be:	/----- beq.s d3ce <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    d3c0:	|      movea.l 16004 <currentEvents>,a0
    d3c6:	|      move.l (sp),d0
    d3c8:	|      move.l d0,(a0)
		return BR_CONTINUE;
    d3ca:	|      moveq #2,d0
    d3cc:	|  /-- bra.s d3d0 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    d3ce:	\--|-> moveq #1,d0
}
    d3d0:	   \-> addq.l #4,sp
    d3d2:	       rts

0000d3d4 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    d3d4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d3d6:	       move.l sp,d0
    d3d8:	       move.l d0,-(sp)
    d3da:	       move.l 16(sp),-(sp)
    d3de:	       move.l 16(sp),-(sp)
    d3e2:	       jsr d342 <getFuncNumForCallback>
    d3e8:	       lea 12(sp),sp
    d3ec:	       tst.w d0
    d3ee:	/----- beq.s d400 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    d3f0:	|      movea.l 16004 <currentEvents>,a0
    d3f6:	|      move.l (sp),d0
    d3f8:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    d3fc:	|      moveq #2,d0
    d3fe:	|  /-- bra.s d402 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    d400:	\--|-> moveq #1,d0
}
    d402:	   \-> addq.l #4,sp
    d404:	       rts

0000d406 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    d406:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d408:	       move.l sp,d0
    d40a:	       move.l d0,-(sp)
    d40c:	       move.l 16(sp),-(sp)
    d410:	       move.l 16(sp),-(sp)
    d414:	       jsr d342 <getFuncNumForCallback>
    d41a:	       lea 12(sp),sp
    d41e:	       tst.w d0
    d420:	/----- beq.s d432 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    d422:	|      movea.l 16004 <currentEvents>,a0
    d428:	|      move.l (sp),d0
    d42a:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    d42e:	|      moveq #2,d0
    d430:	|  /-- bra.s d434 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    d432:	\--|-> moveq #1,d0
}
    d434:	   \-> addq.l #4,sp
    d436:	       rts

0000d438 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    d438:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d43a:	       move.l sp,d0
    d43c:	       move.l d0,-(sp)
    d43e:	       move.l 16(sp),-(sp)
    d442:	       move.l 16(sp),-(sp)
    d446:	       jsr d342 <getFuncNumForCallback>
    d44c:	       lea 12(sp),sp
    d450:	       tst.w d0
    d452:	/----- beq.s d464 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    d454:	|      movea.l 16004 <currentEvents>,a0
    d45a:	|      move.l (sp),d0
    d45c:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    d460:	|      moveq #2,d0
    d462:	|  /-- bra.s d466 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    d464:	\--|-> moveq #1,d0
}
    d466:	   \-> addq.l #4,sp
    d468:	       rts

0000d46a <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    d46a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d46c:	       move.l sp,d0
    d46e:	       move.l d0,-(sp)
    d470:	       move.l 16(sp),-(sp)
    d474:	       move.l 16(sp),-(sp)
    d478:	       jsr d342 <getFuncNumForCallback>
    d47e:	       lea 12(sp),sp
    d482:	       tst.w d0
    d484:	/----- beq.s d496 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    d486:	|      movea.l 16004 <currentEvents>,a0
    d48c:	|      move.l (sp),d0
    d48e:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    d492:	|      moveq #2,d0
    d494:	|  /-- bra.s d498 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    d496:	\--|-> moveq #1,d0
}
    d498:	   \-> addq.l #4,sp
    d49a:	       rts

0000d49c <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    d49c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d49e:	       move.l sp,d0
    d4a0:	       move.l d0,-(sp)
    d4a2:	       move.l 16(sp),-(sp)
    d4a6:	       move.l 16(sp),-(sp)
    d4aa:	       jsr d342 <getFuncNumForCallback>
    d4b0:	       lea 12(sp),sp
    d4b4:	       tst.w d0
    d4b6:	/----- beq.s d4c8 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    d4b8:	|      movea.l 16004 <currentEvents>,a0
    d4be:	|      move.l (sp),d0
    d4c0:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    d4c4:	|      moveq #2,d0
    d4c6:	|  /-- bra.s d4ca <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    d4c8:	\--|-> moveq #1,d0
}
    d4ca:	   \-> addq.l #4,sp
    d4cc:	       rts

0000d4ce <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    d4ce:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d4d0:	       move.l sp,d0
    d4d2:	       move.l d0,-(sp)
    d4d4:	       move.l 16(sp),-(sp)
    d4d8:	       move.l 16(sp),-(sp)
    d4dc:	       jsr d342 <getFuncNumForCallback>
    d4e2:	       lea 12(sp),sp
    d4e6:	       tst.w d0
    d4e8:	/----- beq.s d4fa <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    d4ea:	|      movea.l 16004 <currentEvents>,a0
    d4f0:	|      move.l (sp),d0
    d4f2:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    d4f6:	|      moveq #2,d0
    d4f8:	|  /-- bra.s d4fc <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    d4fa:	\--|-> moveq #1,d0
}
    d4fc:	   \-> addq.l #4,sp
    d4fe:	       rts

0000d500 <builtIn_spawnSub>:

builtIn (spawnSub)
{
    d500:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d502:	          move.l sp,d0
    d504:	          move.l d0,-(sp)
    d506:	          move.l 16(sp),-(sp)
    d50a:	          move.l 16(sp),-(sp)
    d50e:	          jsr d342 <getFuncNumForCallback>
    d514:	          lea 12(sp),sp
    d518:	          tst.w d0
    d51a:	/-------- beq.s d546 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    d51c:	|         move.l 17af8 <noStack>,d1
    d522:	|         move.l (sp),d0
    d524:	|         pea 1 <_start+0x1>
    d528:	|         move.l d1,-(sp)
    d52a:	|         clr.l -(sp)
    d52c:	|         clr.l -(sp)
    d52e:	|         move.l d0,-(sp)
    d530:	|         jsr 3bf4 <startNewFunctionNum>
    d536:	|         lea 20(sp),sp
    d53a:	|         tst.l d0
    d53c:	|     /-- bne.s d542 <builtIn_spawnSub+0x42>
    d53e:	|     |   moveq #1,d0
    d540:	|  /--|-- bra.s d548 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    d542:	|  |  \-> moveq #2,d0
    d544:	|  +----- bra.s d548 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    d546:	\--|----> moveq #1,d0
}
    d548:	   \----> addq.l #4,sp
    d54a:	          rts

0000d54c <builtIn_cancelSub>:

builtIn (cancelSub)
{
    d54c:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    d54e:	          move.l sp,d0
    d550:	          addq.l #4,d0
    d552:	          move.l d0,-(sp)
    d554:	          move.l 20(sp),-(sp)
    d558:	          move.l 20(sp),-(sp)
    d55c:	          jsr d342 <getFuncNumForCallback>
    d562:	          lea 12(sp),sp
    d566:	          tst.w d0
    d568:	/-------- beq.s d59e <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    d56a:	|         move.l 4(sp),d1
    d56e:	|         move.l sp,d0
    d570:	|         addq.l #2,d0
    d572:	|         move.l d0,-(sp)
    d574:	|         move.l 20(sp),-(sp)
    d578:	|         move.l d1,-(sp)
    d57a:	|         jsr 1bd8 <cancelAFunction>
    d580:	|         lea 12(sp),sp
		if (killedMyself) {
    d584:	|         move.w 2(sp),d0
    d588:	|  /----- beq.s d59a <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    d58a:	|  |      move.l 16(sp),-(sp)
    d58e:	|  |      jsr 1af4 <abortFunction>
    d594:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    d596:	|  |      moveq #5,d0
    d598:	|  |  /-- bra.s d5a0 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    d59a:	|  \--|-> moveq #2,d0
    d59c:	|     +-- bra.s d5a0 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    d59e:	\-----|-> moveq #1,d0
}
    d5a0:	      \-> addq.l #8,sp
    d5a2:	          rts

0000d5a4 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    d5a4:	       subq.l #8,sp
    d5a6:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    d5a8:	       movea.l 20(sp),a0
    d5ac:	       move.l 24(a0),d0
    d5b0:	       move.l d0,-(sp)
    d5b2:	       jsr 10308 <getTextFromAnyVar>
    d5b8:	       addq.l #4,sp
    d5ba:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    d5be:	   /-- bne.s d5c4 <builtIn_stringWidth+0x20>
    d5c0:	   |   moveq #1,d0
    d5c2:	/--|-- bra.s d612 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    d5c4:	|  \-> moveq #24,d0
    d5c6:	|      add.l 20(sp),d0
    d5ca:	|      move.l d0,-(sp)
    d5cc:	|      jsr 10694 <trimStack>
    d5d2:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    d5d4:	|      move.l 8(sp),-(sp)
    d5d8:	|      jsr 106ee <stringWidth>
    d5de:	|      addq.l #4,sp
    d5e0:	|      move.l d0,d1
    d5e2:	|      moveq #28,d0
    d5e4:	|      add.l 20(sp),d0
    d5e8:	|      move.l d1,-(sp)
    d5ea:	|      pea 1 <_start+0x1>
    d5ee:	|      move.l d0,-(sp)
    d5f0:	|      jsr 10602 <setVariable>
    d5f6:	|      lea 12(sp),sp
	FreeVec(theText);
    d5fa:	|      move.l 8(sp),4(sp)
    d600:	|      move.l 17b28 <SysBase>,d0
    d606:	|      movea.l d0,a6
    d608:	|      movea.l 4(sp),a1
    d60c:	|      jsr -690(a6)
	return BR_CONTINUE;
    d610:	|      moveq #2,d0
}
    d612:	\----> movea.l (sp)+,a6
    d614:	       addq.l #8,sp
    d616:	       rts

0000d618 <builtIn_hardScroll>:

builtIn(hardScroll)
{
    d618:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d61a:	       movea.l 12(sp),a0
    d61e:	       move.l 24(a0),d0
    d622:	       move.l d0,-(sp)
    d624:	       pea 1 <_start+0x1>
    d628:	       move.l sp,d0
    d62a:	       addq.l #8,d0
    d62c:	       move.l d0,-(sp)
    d62e:	       jsr fd32 <getValueType>
    d634:	       lea 12(sp),sp
    d638:	       tst.w d0
    d63a:	   /-- bne.s d640 <builtIn_hardScroll+0x28>
    d63c:	   |   moveq #1,d0
    d63e:	/--|-- bra.s d65e <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    d640:	|  \-> moveq #24,d0
    d642:	|      add.l 12(sp),d0
    d646:	|      move.l d0,-(sp)
    d648:	|      jsr 10694 <trimStack>
    d64e:	|      addq.l #4,sp
	hardScroll (v);
    d650:	|      move.l (sp),d0
    d652:	|      move.l d0,-(sp)
    d654:	|      jsr 8ac2 <hardScroll>
    d65a:	|      addq.l #4,sp
	return BR_CONTINUE;
    d65c:	|      moveq #2,d0
}
    d65e:	\----> addq.l #4,sp
    d660:	       rts

0000d662 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    d662:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d664:	       movea.l 12(sp),a0
    d668:	       move.l 24(a0),d0
    d66c:	       move.l d0,-(sp)
    d66e:	       pea 7 <_start+0x7>
    d672:	       move.l sp,d0
    d674:	       addq.l #8,d0
    d676:	       move.l d0,-(sp)
    d678:	       jsr fd32 <getValueType>
    d67e:	       lea 12(sp),sp
    d682:	       tst.w d0
    d684:	   /-- bne.s d68a <builtIn_isScreenRegion+0x28>
    d686:	   |   moveq #1,d0
    d688:	/--|-- bra.s d6ca <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    d68a:	|  \-> moveq #24,d0
    d68c:	|      add.l 12(sp),d0
    d690:	|      move.l d0,-(sp)
    d692:	|      jsr 10694 <trimStack>
    d698:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    d69a:	|      move.l (sp),d0
    d69c:	|      move.l d0,-(sp)
    d69e:	|      jsr 107da <getRegionForObject>
    d6a4:	|      addq.l #4,sp
    d6a6:	|      tst.l d0
    d6a8:	|      sne d0
    d6aa:	|      neg.b d0
    d6ac:	|      moveq #0,d1
    d6ae:	|      move.b d0,d1
    d6b0:	|      moveq #28,d0
    d6b2:	|      add.l 12(sp),d0
    d6b6:	|      move.l d1,-(sp)
    d6b8:	|      pea 1 <_start+0x1>
    d6bc:	|      move.l d0,-(sp)
    d6be:	|      jsr 10602 <setVariable>
    d6c4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d6c8:	|      moveq #2,d0
}
    d6ca:	\----> addq.l #4,sp
    d6cc:	       rts

0000d6ce <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    d6ce:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d6d0:	       movea.l 12(sp),a0
    d6d4:	       move.l 24(a0),d0
    d6d8:	       move.l d0,-(sp)
    d6da:	       pea 1 <_start+0x1>
    d6de:	       move.l sp,d0
    d6e0:	       addq.l #8,d0
    d6e2:	       move.l d0,-(sp)
    d6e4:	       jsr fd32 <getValueType>
    d6ea:	       lea 12(sp),sp
    d6ee:	       tst.w d0
    d6f0:	   /-- bne.s d6f6 <builtIn_setSpeechSpeed+0x28>
    d6f2:	   |   moveq #1,d0
    d6f4:	/--|-- bra.s d744 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    d6f6:	|  \-> moveq #24,d0
    d6f8:	|      add.l 12(sp),d0
    d6fc:	|      move.l d0,-(sp)
    d6fe:	|      jsr 10694 <trimStack>
    d704:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    d706:	|      move.l (sp),d0
    d708:	|      move.l d0,-(sp)
    d70a:	|      jsr 12160 <__floatsisf>
    d710:	|      addq.l #4,sp
    d712:	|      move.l #1008981770,-(sp)
    d718:	|      move.l d0,-(sp)
    d71a:	|      jsr 12212 <__mulsf3>
    d720:	|      addq.l #8,sp
    d722:	|      move.l d0,1601e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    d728:	|      moveq #28,d0
    d72a:	|      add.l 12(sp),d0
    d72e:	|      pea 1 <_start+0x1>
    d732:	|      pea 1 <_start+0x1>
    d736:	|      move.l d0,-(sp)
    d738:	|      jsr 10602 <setVariable>
    d73e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d742:	|      moveq #2,d0
}
    d744:	\----> addq.l #4,sp
    d746:	       rts

0000d748 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    d748:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d74a:	       movea.l 12(sp),a0
    d74e:	       move.l 24(a0),d0
    d752:	       move.l d0,-(sp)
    d754:	       pea 1 <_start+0x1>
    d758:	       move.l sp,d0
    d75a:	       addq.l #8,d0
    d75c:	       move.l d0,-(sp)
    d75e:	       jsr fd32 <getValueType>
    d764:	       lea 12(sp),sp
    d768:	       tst.w d0
    d76a:	   /-- bne.s d770 <builtIn_setFontSpacing+0x28>
    d76c:	   |   moveq #1,d0
    d76e:	/--|-- bra.s d7a6 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    d770:	|  \-> move.l (sp),d0
    d772:	|      move.l d0,d0
    d774:	|      move.w d0,16598 <fontSpace>
	trimStack (&fun -> stack);
    d77a:	|      moveq #24,d0
    d77c:	|      add.l 12(sp),d0
    d780:	|      move.l d0,-(sp)
    d782:	|      jsr 10694 <trimStack>
    d788:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    d78a:	|      moveq #28,d0
    d78c:	|      add.l 12(sp),d0
    d790:	|      pea 1 <_start+0x1>
    d794:	|      pea 1 <_start+0x1>
    d798:	|      move.l d0,-(sp)
    d79a:	|      jsr 10602 <setVariable>
    d7a0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d7a4:	|      moveq #2,d0
}
    d7a6:	\----> addq.l #4,sp
    d7a8:	       rts

0000d7aa <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    d7aa:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d7ac:	          movea.l 12(sp),a0
    d7b0:	          move.l 24(a0),d0
    d7b4:	          move.l d0,-(sp)
    d7b6:	          pea 1 <_start+0x1>
    d7ba:	          move.l sp,d0
    d7bc:	          addq.l #8,d0
    d7be:	          move.l d0,-(sp)
    d7c0:	          jsr fd32 <getValueType>
    d7c6:	          lea 12(sp),sp
    d7ca:	          tst.w d0
    d7cc:	      /-- bne.s d7d2 <builtIn_transitionLevel+0x28>
    d7ce:	      |   moveq #1,d0
    d7d0:	/-----|-- bra.s d826 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    d7d2:	|     \-> moveq #24,d0
    d7d4:	|         add.l 12(sp),d0
    d7d8:	|         move.l d0,-(sp)
    d7da:	|         jsr 10694 <trimStack>
    d7e0:	|         addq.l #4,sp

	if (number < 0)
    d7e2:	|         move.l (sp),d0
    d7e4:	|     /-- bpl.s d7ee <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    d7e6:	|     |   clr.b 16002 <brightnessLevel>
    d7ec:	|  /--|-- bra.s d80a <builtIn_transitionLevel+0x60>
	else if (number > 255)
    d7ee:	|  |  \-> move.l (sp),d0
    d7f0:	|  |      cmpi.l #255,d0
    d7f6:	|  |  /-- ble.s d800 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    d7f8:	|  |  |   st 16002 <brightnessLevel>
    d7fe:	|  +--|-- bra.s d80a <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    d800:	|  |  \-> move.l (sp),d0
    d802:	|  |      move.l d0,d0
    d804:	|  |      move.b d0,16002 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    d80a:	|  \----> moveq #28,d0
    d80c:	|         add.l 12(sp),d0
    d810:	|         pea 1 <_start+0x1>
    d814:	|         pea 1 <_start+0x1>
    d818:	|         move.l d0,-(sp)
    d81a:	|         jsr 10602 <setVariable>
    d820:	|         lea 12(sp),sp
	return BR_CONTINUE;
    d824:	|         moveq #2,d0
}
    d826:	\-------> addq.l #4,sp
    d828:	          rts

0000d82a <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    d82a:	movea.l 8(sp),a0
    d82e:	move.l 24(a0),d0
    d832:	move.l d0,-(sp)
    d834:	jsr 10272 <getBoolean>
    d83a:	addq.l #4,sp
    d83c:	move.w d0,17acc <captureAllKeys>
	trimStack (&fun -> stack);
    d842:	moveq #24,d0
    d844:	add.l 8(sp),d0
    d848:	move.l d0,-(sp)
    d84a:	jsr 10694 <trimStack>
    d850:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    d852:	move.w 17acc <captureAllKeys>,d0
    d858:	movea.w d0,a0
    d85a:	moveq #28,d0
    d85c:	add.l 8(sp),d0
    d860:	move.l a0,-(sp)
    d862:	pea 1 <_start+0x1>
    d866:	move.l d0,-(sp)
    d868:	jsr 10602 <setVariable>
    d86e:	lea 12(sp),sp
	return BR_CONTINUE;
    d872:	moveq #2,d0
}
    d874:	rts

0000d876 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    d876:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d87a:	       movea.l 20(sp),a0
    d87e:	       move.l 24(a0),d0
    d882:	       move.l d0,-(sp)
    d884:	       pea 1 <_start+0x1>
    d888:	       moveq #12,d0
    d88a:	       add.l sp,d0
    d88c:	       move.l d0,-(sp)
    d88e:	       jsr fd32 <getValueType>
    d894:	       lea 12(sp),sp
    d898:	       tst.w d0
    d89a:	   /-- bne.s d8a2 <builtIn_spinCharacter+0x2c>
    d89c:	   |   moveq #1,d0
    d89e:	/--|-- bra.w d952 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    d8a2:	|  \-> moveq #24,d0
    d8a4:	|      add.l 20(sp),d0
    d8a8:	|      move.l d0,-(sp)
    d8aa:	|      jsr 10694 <trimStack>
    d8b0:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d8b2:	|      movea.l 20(sp),a0
    d8b6:	|      move.l 24(a0),d0
    d8ba:	|      move.l d0,-(sp)
    d8bc:	|      pea 7 <_start+0x7>
    d8c0:	|      lea 8(sp),a0
    d8c4:	|      move.l a0,-(sp)
    d8c6:	|      jsr fd32 <getValueType>
    d8cc:	|      lea 12(sp),sp
    d8d0:	|      tst.w d0
    d8d2:	|  /-- bne.s d8d8 <builtIn_spinCharacter+0x62>
    d8d4:	|  |   moveq #1,d0
    d8d6:	+--|-- bra.s d952 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    d8d8:	|  \-> moveq #24,d0
    d8da:	|      add.l 20(sp),d0
    d8de:	|      move.l d0,-(sp)
    d8e0:	|      jsr 10694 <trimStack>
    d8e6:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    d8e8:	|      move.l (sp),d0
    d8ea:	|      move.l d0,-(sp)
    d8ec:	|      jsr 613a <findPerson>
    d8f2:	|      addq.l #4,sp
    d8f4:	|      move.l d0,8(sp)
	if (thisPerson) {
    d8f8:	|  /-- beq.s d938 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    d8fa:	|  |   move.l 4(sp),d0
    d8fe:	|  |   movea.l 8(sp),a0
    d902:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    d906:	|  |   movea.l 8(sp),a0
    d90a:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    d910:	|  |   movea.l 8(sp),a0
    d914:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    d91a:	|  |   moveq #28,d0
    d91c:	|  |   add.l 20(sp),d0
    d920:	|  |   pea 1 <_start+0x1>
    d924:	|  |   pea 1 <_start+0x1>
    d928:	|  |   move.l d0,-(sp)
    d92a:	|  |   jsr 10602 <setVariable>
    d930:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    d934:	|  |   moveq #3,d0
    d936:	+--|-- bra.s d952 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    d938:	|  \-> moveq #28,d0
    d93a:	|      add.l 20(sp),d0
    d93e:	|      clr.l -(sp)
    d940:	|      pea 1 <_start+0x1>
    d944:	|      move.l d0,-(sp)
    d946:	|      jsr 10602 <setVariable>
    d94c:	|      lea 12(sp),sp
		return BR_CONTINUE;
    d950:	|      moveq #2,d0
	}
}
    d952:	\----> lea 12(sp),sp
    d956:	       rts

0000d958 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    d958:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d95a:	          movea.l 16(sp),a0
    d95e:	          move.l 24(a0),d0
    d962:	          move.l d0,-(sp)
    d964:	          pea 7 <_start+0x7>
    d968:	          move.l sp,d0
    d96a:	          addq.l #8,d0
    d96c:	          move.l d0,-(sp)
    d96e:	          jsr fd32 <getValueType>
    d974:	          lea 12(sp),sp
    d978:	          tst.w d0
    d97a:	      /-- bne.s d980 <builtIn_getCharacterDirection+0x28>
    d97c:	      |   moveq #1,d0
    d97e:	/-----|-- bra.s d9de <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    d980:	|     \-> moveq #24,d0
    d982:	|         add.l 16(sp),d0
    d986:	|         move.l d0,-(sp)
    d988:	|         jsr 10694 <trimStack>
    d98e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    d990:	|         move.l (sp),d0
    d992:	|         move.l d0,-(sp)
    d994:	|         jsr 613a <findPerson>
    d99a:	|         addq.l #4,sp
    d99c:	|         move.l d0,4(sp)
	if (thisPerson) {
    d9a0:	|  /----- beq.s d9c4 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    d9a2:	|  |      movea.l 4(sp),a0
    d9a6:	|  |      move.l 94(a0),d1
    d9aa:	|  |      moveq #28,d0
    d9ac:	|  |      add.l 16(sp),d0
    d9b0:	|  |      move.l d1,-(sp)
    d9b2:	|  |      pea 1 <_start+0x1>
    d9b6:	|  |      move.l d0,-(sp)
    d9b8:	|  |      jsr 10602 <setVariable>
    d9be:	|  |      lea 12(sp),sp
    d9c2:	|  |  /-- bra.s d9dc <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    d9c4:	|  \--|-> moveq #28,d0
    d9c6:	|     |   add.l 16(sp),d0
    d9ca:	|     |   clr.l -(sp)
    d9cc:	|     |   pea 1 <_start+0x1>
    d9d0:	|     |   move.l d0,-(sp)
    d9d2:	|     |   jsr 10602 <setVariable>
    d9d8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    d9dc:	|     \-> moveq #2,d0
}
    d9de:	\-------> addq.l #8,sp
    d9e0:	          rts

0000d9e2 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    d9e2:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d9e4:	       movea.l 16(sp),a0
    d9e8:	       move.l 24(a0),d0
    d9ec:	       move.l d0,-(sp)
    d9ee:	       pea 7 <_start+0x7>
    d9f2:	       move.l sp,d0
    d9f4:	       addq.l #8,d0
    d9f6:	       move.l d0,-(sp)
    d9f8:	       jsr fd32 <getValueType>
    d9fe:	       lea 12(sp),sp
    da02:	       tst.w d0
    da04:	   /-- bne.s da0a <builtIn_isCharacter+0x28>
    da06:	   |   moveq #1,d0
    da08:	/--|-- bra.s da4c <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    da0a:	|  \-> moveq #24,d0
    da0c:	|      add.l 16(sp),d0
    da10:	|      move.l d0,-(sp)
    da12:	|      jsr 10694 <trimStack>
    da18:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    da1a:	|      move.l (sp),d0
    da1c:	|      move.l d0,-(sp)
    da1e:	|      jsr 613a <findPerson>
    da24:	|      addq.l #4,sp
    da26:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    da2a:	|      sne d0
    da2c:	|      neg.b d0
    da2e:	|      moveq #0,d1
    da30:	|      move.b d0,d1
    da32:	|      moveq #28,d0
    da34:	|      add.l 16(sp),d0
    da38:	|      move.l d1,-(sp)
    da3a:	|      pea 1 <_start+0x1>
    da3e:	|      move.l d0,-(sp)
    da40:	|      jsr 10602 <setVariable>
    da46:	|      lea 12(sp),sp
	return BR_CONTINUE;
    da4a:	|      moveq #2,d0
}
    da4c:	\----> addq.l #8,sp
    da4e:	       rts

0000da50 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    da50:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    da52:	          movea.l 16(sp),a0
    da56:	          move.l 24(a0),d0
    da5a:	          move.l d0,-(sp)
    da5c:	          pea 7 <_start+0x7>
    da60:	          move.l sp,d0
    da62:	          addq.l #8,d0
    da64:	          move.l d0,-(sp)
    da66:	          jsr fd32 <getValueType>
    da6c:	          lea 12(sp),sp
    da70:	          tst.w d0
    da72:	      /-- bne.s da78 <builtIn_normalCharacter+0x28>
    da74:	      |   moveq #1,d0
    da76:	/-----|-- bra.s daf4 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    da78:	|     \-> moveq #24,d0
    da7a:	|         add.l 16(sp),d0
    da7e:	|         move.l d0,-(sp)
    da80:	|         jsr 10694 <trimStack>
    da86:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    da88:	|         move.l (sp),d0
    da8a:	|         move.l d0,-(sp)
    da8c:	|         jsr 613a <findPerson>
    da92:	|         addq.l #4,sp
    da94:	|         move.l d0,4(sp)
	if (thisPerson)
    da98:	|  /----- beq.s dada <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    da9a:	|  |      movea.l 4(sp),a0
    da9e:	|  |      movea.l 68(a0),a0
    daa2:	|  |      move.l (a0),d1
    daa4:	|  |      movea.l 4(sp),a0
    daa8:	|  |      move.l 94(a0),d0
    daac:	|  |      add.l d0,d0
    daae:	|  |      add.l d0,d0
    dab0:	|  |      movea.l d1,a0
    dab2:	|  |      adda.l d0,a0
    dab4:	|  |      move.l (a0),d0
    dab6:	|  |      movea.l 4(sp),a0
    daba:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    dabe:	|  |      moveq #28,d0
    dac0:	|  |      add.l 16(sp),d0
    dac4:	|  |      pea 1 <_start+0x1>
    dac8:	|  |      pea 1 <_start+0x1>
    dacc:	|  |      move.l d0,-(sp)
    dace:	|  |      jsr 10602 <setVariable>
    dad4:	|  |      lea 12(sp),sp
    dad8:	|  |  /-- bra.s daf2 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    dada:	|  \--|-> moveq #28,d0
    dadc:	|     |   add.l 16(sp),d0
    dae0:	|     |   clr.l -(sp)
    dae2:	|     |   pea 1 <_start+0x1>
    dae6:	|     |   move.l d0,-(sp)
    dae8:	|     |   jsr 10602 <setVariable>
    daee:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    daf2:	|     \-> moveq #2,d0
}
    daf4:	\-------> addq.l #8,sp
    daf6:	          rts

0000daf8 <builtIn_isMoving>:

builtIn(isMoving)
{
    daf8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dafa:	          movea.l 16(sp),a0
    dafe:	          move.l 24(a0),d0
    db02:	          move.l d0,-(sp)
    db04:	          pea 7 <_start+0x7>
    db08:	          move.l sp,d0
    db0a:	          addq.l #8,d0
    db0c:	          move.l d0,-(sp)
    db0e:	          jsr fd32 <getValueType>
    db14:	          lea 12(sp),sp
    db18:	          tst.w d0
    db1a:	      /-- bne.s db20 <builtIn_isMoving+0x28>
    db1c:	      |   moveq #1,d0
    db1e:	/-----|-- bra.s db80 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    db20:	|     \-> moveq #24,d0
    db22:	|         add.l 16(sp),d0
    db26:	|         move.l d0,-(sp)
    db28:	|         jsr 10694 <trimStack>
    db2e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    db30:	|         move.l (sp),d0
    db32:	|         move.l d0,-(sp)
    db34:	|         jsr 613a <findPerson>
    db3a:	|         addq.l #4,sp
    db3c:	|         move.l d0,4(sp)
	if (thisPerson)
    db40:	|  /----- beq.s db66 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    db42:	|  |      movea.l 4(sp),a0
    db46:	|  |      move.w 52(a0),d0
    db4a:	|  |      movea.w d0,a0
    db4c:	|  |      moveq #28,d0
    db4e:	|  |      add.l 16(sp),d0
    db52:	|  |      move.l a0,-(sp)
    db54:	|  |      pea 1 <_start+0x1>
    db58:	|  |      move.l d0,-(sp)
    db5a:	|  |      jsr 10602 <setVariable>
    db60:	|  |      lea 12(sp),sp
    db64:	|  |  /-- bra.s db7e <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    db66:	|  \--|-> moveq #28,d0
    db68:	|     |   add.l 16(sp),d0
    db6c:	|     |   clr.l -(sp)
    db6e:	|     |   pea 1 <_start+0x1>
    db72:	|     |   move.l d0,-(sp)
    db74:	|     |   jsr 10602 <setVariable>
    db7a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    db7e:	|     \-> moveq #2,d0
}
    db80:	\-------> addq.l #8,sp
    db82:	          rts

0000db84 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    db84:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    db88:	          movea.l 20(sp),a0
    db8c:	          move.l 24(a0),d0
    db90:	          move.l d0,-(sp)
    db92:	          pea 7 <_start+0x7>
    db96:	          lea 8(sp),a0
    db9a:	          move.l a0,-(sp)
    db9c:	          jsr fd32 <getValueType>
    dba2:	          lea 12(sp),sp
    dba6:	          tst.w d0
    dba8:	      /-- bne.s dbb0 <builtIn_fetchEvent+0x2c>
    dbaa:	      |   moveq #1,d0
    dbac:	/-----|-- bra.w dc44 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    dbb0:	|     \-> moveq #24,d0
    dbb2:	|         add.l 20(sp),d0
    dbb6:	|         move.l d0,-(sp)
    dbb8:	|         jsr 10694 <trimStack>
    dbbe:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dbc0:	|         movea.l 20(sp),a0
    dbc4:	|         move.l 24(a0),d0
    dbc8:	|         move.l d0,-(sp)
    dbca:	|         pea 7 <_start+0x7>
    dbce:	|         moveq #12,d0
    dbd0:	|         add.l sp,d0
    dbd2:	|         move.l d0,-(sp)
    dbd4:	|         jsr fd32 <getValueType>
    dbda:	|         lea 12(sp),sp
    dbde:	|         tst.w d0
    dbe0:	|     /-- bne.s dbe6 <builtIn_fetchEvent+0x62>
    dbe2:	|     |   moveq #1,d0
    dbe4:	+-----|-- bra.s dc44 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    dbe6:	|     \-> moveq #24,d0
    dbe8:	|         add.l 20(sp),d0
    dbec:	|         move.l d0,-(sp)
    dbee:	|         jsr 10694 <trimStack>
    dbf4:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    dbf6:	|         move.l (sp),d1
    dbf8:	|         move.l 4(sp),d0
    dbfc:	|         move.l d1,-(sp)
    dbfe:	|         move.l d0,-(sp)
    dc00:	|         jsr 8d34 <getCombinationFunction>
    dc06:	|         addq.l #8,sp
    dc08:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    dc0c:	|  /----- beq.s dc2a <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    dc0e:	|  |      moveq #28,d0
    dc10:	|  |      add.l 20(sp),d0
    dc14:	|  |      move.l 8(sp),-(sp)
    dc18:	|  |      pea 2 <_start+0x2>
    dc1c:	|  |      move.l d0,-(sp)
    dc1e:	|  |      jsr 10602 <setVariable>
    dc24:	|  |      lea 12(sp),sp
    dc28:	|  |  /-- bra.s dc42 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    dc2a:	|  \--|-> moveq #28,d0
    dc2c:	|     |   add.l 20(sp),d0
    dc30:	|     |   clr.l -(sp)
    dc32:	|     |   pea 1 <_start+0x1>
    dc36:	|     |   move.l d0,-(sp)
    dc38:	|     |   jsr 10602 <setVariable>
    dc3e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    dc42:	|     \-> moveq #2,d0
}
    dc44:	\-------> lea 12(sp),sp
    dc48:	          rts

0000dc4a <builtIn_deleteFile>:

builtIn(deleteFile)
{
    dc4a:	       lea -24(sp),sp
    dc4e:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    dc50:	       movea.l 36(sp),a0
    dc54:	       move.l 24(a0),d0
    dc58:	       move.l d0,-(sp)
    dc5a:	       jsr 10308 <getTextFromAnyVar>
    dc60:	       addq.l #4,sp
    dc62:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    dc66:	       moveq #24,d0
    dc68:	       add.l 36(sp),d0
    dc6c:	       move.l d0,-(sp)
    dc6e:	       jsr 10694 <trimStack>
    dc74:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    dc76:	       move.l 24(sp),-(sp)
    dc7a:	       jsr 2fe <encodeFilename>
    dc80:	       addq.l #4,sp
    dc82:	       move.l d0,20(sp)
    FreeVec(namNormal);
    dc86:	       move.l 24(sp),16(sp)
    dc8c:	       move.l 17b28 <SysBase>,d0
    dc92:	       movea.l d0,a6
    dc94:	       movea.l 16(sp),a1
    dc98:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    dc9c:	       move.l 20(sp),-(sp)
    dca0:	       jsr 9aec <failSecurityCheck>
    dca6:	       addq.l #4,sp
    dca8:	       tst.w d0
    dcaa:	   /-- beq.s dcb0 <builtIn_deleteFile+0x66>
    dcac:	   |   moveq #1,d0
    dcae:	/--|-- bra.s dcfe <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    dcb0:	|  \-> move.l 20(sp),12(sp)
    dcb6:	|      move.l 17b30 <DOSBase>,d0
    dcbc:	|      movea.l d0,a6
    dcbe:	|      move.l 12(sp),d1
    dcc2:	|      jsr -72(a6)
    dcc6:	|      move.l d0,8(sp)
    dcca:	|      move.l 8(sp),d1
    dcce:	|      moveq #28,d0
    dcd0:	|      add.l 36(sp),d0
    dcd4:	|      move.l d1,-(sp)
    dcd6:	|      pea 1 <_start+0x1>
    dcda:	|      move.l d0,-(sp)
    dcdc:	|      jsr 10602 <setVariable>
    dce2:	|      lea 12(sp),sp
    FreeVec(nam);
    dce6:	|      move.l 20(sp),4(sp)
    dcec:	|      move.l 17b28 <SysBase>,d0
    dcf2:	|      movea.l d0,a6
    dcf4:	|      movea.l 4(sp),a1
    dcf8:	|      jsr -690(a6)

    return BR_CONTINUE;
    dcfc:	|      moveq #2,d0
}
    dcfe:	\----> movea.l (sp)+,a6
    dd00:	       lea 24(sp),sp
    dd04:	       rts

0000dd06 <builtIn_renameFile>:

builtIn(renameFile)
{
    dd06:	       lea -40(sp),sp
    dd0a:	       move.l a6,-(sp)
    dd0c:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    dd0e:	       movea.l 56(sp),a0
    dd12:	       move.l 24(a0),d0
    dd16:	       move.l d0,-(sp)
    dd18:	       jsr 10308 <getTextFromAnyVar>
    dd1e:	       addq.l #4,sp
    dd20:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    dd24:	       move.l 44(sp),-(sp)
    dd28:	       jsr 2fe <encodeFilename>
    dd2e:	       addq.l #4,sp
    dd30:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    dd34:	       moveq #24,d0
    dd36:	       add.l 56(sp),d0
    dd3a:	       move.l d0,-(sp)
    dd3c:	       jsr 10694 <trimStack>
    dd42:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    dd44:	       move.l 40(sp),-(sp)
    dd48:	       jsr 9aec <failSecurityCheck>
    dd4e:	       addq.l #4,sp
    dd50:	       tst.w d0
    dd52:	   /-- beq.s dd5a <builtIn_renameFile+0x54>
    dd54:	   |   moveq #1,d0
    dd56:	/--|-- bra.w de40 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    dd5a:	|  \-> move.l 44(sp),36(sp)
    dd60:	|      move.l 17b28 <SysBase>,d0
    dd66:	|      movea.l d0,a6
    dd68:	|      movea.l 36(sp),a1
    dd6c:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    dd70:	|      movea.l 56(sp),a0
    dd74:	|      move.l 24(a0),d0
    dd78:	|      move.l d0,-(sp)
    dd7a:	|      jsr 10308 <getTextFromAnyVar>
    dd80:	|      addq.l #4,sp
    dd82:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    dd86:	|      move.l 44(sp),-(sp)
    dd8a:	|      jsr 2fe <encodeFilename>
    dd90:	|      addq.l #4,sp
    dd92:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    dd96:	|      moveq #24,d0
    dd98:	|      add.l 56(sp),d0
    dd9c:	|      move.l d0,-(sp)
    dd9e:	|      jsr 10694 <trimStack>
    dda4:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    dda6:	|      move.l 32(sp),-(sp)
    ddaa:	|      jsr 9aec <failSecurityCheck>
    ddb0:	|      addq.l #4,sp
    ddb2:	|      tst.w d0
    ddb4:	|  /-- beq.s ddbc <builtIn_renameFile+0xb6>
    ddb6:	|  |   moveq #1,d0
    ddb8:	+--|-- bra.w de40 <builtIn_renameFile+0x13a>
	FreeVec(temp);
    ddbc:	|  \-> move.l 44(sp),28(sp)
    ddc2:	|      move.l 17b28 <SysBase>,d0
    ddc8:	|      movea.l d0,a6
    ddca:	|      movea.l 28(sp),a1
    ddce:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    ddd2:	|      move.l 32(sp),24(sp)
    ddd8:	|      move.l 40(sp),20(sp)
    ddde:	|      move.l 17b30 <DOSBase>,d0
    dde4:	|      movea.l d0,a6
    dde6:	|      move.l 24(sp),d1
    ddea:	|      move.l 20(sp),d2
    ddee:	|      jsr -78(a6)
    ddf2:	|      move.l d0,16(sp)
    ddf6:	|      move.l 16(sp),d1
    ddfa:	|      moveq #28,d0
    ddfc:	|      add.l 56(sp),d0
    de00:	|      move.l d1,-(sp)
    de02:	|      pea 1 <_start+0x1>
    de06:	|      move.l d0,-(sp)
    de08:	|      jsr 10602 <setVariable>
    de0e:	|      lea 12(sp),sp
	FreeVec(nam);
    de12:	|      move.l 32(sp),12(sp)
    de18:	|      move.l 17b28 <SysBase>,d0
    de1e:	|      movea.l d0,a6
    de20:	|      movea.l 12(sp),a1
    de24:	|      jsr -690(a6)
	FreeVec(newnam);
    de28:	|      move.l 40(sp),8(sp)
    de2e:	|      move.l 17b28 <SysBase>,d0
    de34:	|      movea.l d0,a6
    de36:	|      movea.l 8(sp),a1
    de3a:	|      jsr -690(a6)

	return BR_CONTINUE;
    de3e:	|      moveq #2,d0
}
    de40:	\----> move.l (sp)+,d2
    de42:	       movea.l (sp)+,a6
    de44:	       lea 40(sp),sp
    de48:	       rts

0000de4a <builtIn_cacheSound>:

builtIn(cacheSound)
{
    de4a:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    de4c:	       movea.l 12(sp),a0
    de50:	       move.l 24(a0),d0
    de54:	       move.l d0,-(sp)
    de56:	       pea 5 <_start+0x5>
    de5a:	       move.l sp,d0
    de5c:	       addq.l #8,d0
    de5e:	       move.l d0,-(sp)
    de60:	       jsr fd32 <getValueType>
    de66:	       lea 12(sp),sp
    de6a:	       tst.w d0
    de6c:	   /-- bne.s de72 <builtIn_cacheSound+0x28>
    de6e:	   |   moveq #1,d0
    de70:	/--|-- bra.s de9a <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    de72:	|  \-> moveq #24,d0
    de74:	|      add.l 12(sp),d0
    de78:	|      move.l d0,-(sp)
    de7a:	|      jsr 10694 <trimStack>
    de80:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    de82:	|      move.l (sp),d0
    de84:	|      move.l d0,-(sp)
    de86:	|      jsr 88e2 <cacheSound>
    de8c:	|      addq.l #4,sp
    de8e:	|      moveq #-1,d1
    de90:	|      cmp.l d0,d1
    de92:	|  /-- bne.s de98 <builtIn_cacheSound+0x4e>
    de94:	|  |   moveq #1,d0
    de96:	+--|-- bra.s de9a <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    de98:	|  \-> moveq #2,d0
}
    de9a:	\----> addq.l #4,sp
    de9c:	       rts

0000de9e <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    de9e:	pea 15696 <zbuffer.c.d110ca03+0x150>
    dea4:	jsr 11d08 <KPrintF>
    deaa:	addq.l #4,sp
	return BR_CONTINUE;
    deac:	moveq #2,d0
}
    deae:	rts

0000deb0 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    deb0:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    deb4:	          movea.l 20(sp),a0
    deb8:	          move.l 24(a0),d0
    debc:	          move.l d0,-(sp)
    debe:	          pea 1 <_start+0x1>
    dec2:	          moveq #12,d0
    dec4:	          add.l sp,d0
    dec6:	          move.l d0,-(sp)
    dec8:	          jsr fd32 <getValueType>
    dece:	          lea 12(sp),sp
    ded2:	          tst.w d0
    ded4:	      /-- bne.s dedc <builtIn_setCharacterSpinSpeed+0x2c>
    ded6:	      |   moveq #1,d0
    ded8:	/-----|-- bra.w df76 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    dedc:	|     \-> moveq #24,d0
    dede:	|         add.l 20(sp),d0
    dee2:	|         move.l d0,-(sp)
    dee4:	|         jsr 10694 <trimStack>
    deea:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    deec:	|         movea.l 20(sp),a0
    def0:	|         move.l 24(a0),d0
    def4:	|         move.l d0,-(sp)
    def6:	|         pea 7 <_start+0x7>
    defa:	|         lea 8(sp),a0
    defe:	|         move.l a0,-(sp)
    df00:	|         jsr fd32 <getValueType>
    df06:	|         lea 12(sp),sp
    df0a:	|         tst.w d0
    df0c:	|     /-- bne.s df12 <builtIn_setCharacterSpinSpeed+0x62>
    df0e:	|     |   moveq #1,d0
    df10:	+-----|-- bra.s df76 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    df12:	|     \-> moveq #24,d0
    df14:	|         add.l 20(sp),d0
    df18:	|         move.l d0,-(sp)
    df1a:	|         jsr 10694 <trimStack>
    df20:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    df22:	|         move.l (sp),d0
    df24:	|         move.l d0,-(sp)
    df26:	|         jsr 613a <findPerson>
    df2c:	|         addq.l #4,sp
    df2e:	|         move.l d0,8(sp)

	if (thisPerson) {
    df32:	|  /----- beq.s df5c <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    df34:	|  |      move.l 4(sp),d0
    df38:	|  |      movea.l 8(sp),a0
    df3c:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    df40:	|  |      moveq #28,d0
    df42:	|  |      add.l 20(sp),d0
    df46:	|  |      pea 1 <_start+0x1>
    df4a:	|  |      pea 1 <_start+0x1>
    df4e:	|  |      move.l d0,-(sp)
    df50:	|  |      jsr 10602 <setVariable>
    df56:	|  |      lea 12(sp),sp
    df5a:	|  |  /-- bra.s df74 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    df5c:	|  \--|-> moveq #28,d0
    df5e:	|     |   add.l 20(sp),d0
    df62:	|     |   clr.l -(sp)
    df64:	|     |   pea 1 <_start+0x1>
    df68:	|     |   move.l d0,-(sp)
    df6a:	|     |   jsr 10602 <setVariable>
    df70:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    df74:	|     \-> moveq #2,d0
}
    df76:	\-------> lea 12(sp),sp
    df7a:	          rts

0000df7c <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    df7c:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    df80:	          movea.l 20(sp),a0
    df84:	          move.l 24(a0),d0
    df88:	          move.l d0,-(sp)
    df8a:	          pea 1 <_start+0x1>
    df8e:	          moveq #12,d0
    df90:	          add.l sp,d0
    df92:	          move.l d0,-(sp)
    df94:	          jsr fd32 <getValueType>
    df9a:	          lea 12(sp),sp
    df9e:	          tst.w d0
    dfa0:	      /-- bne.s dfa8 <builtIn_setCharacterAngleOffset+0x2c>
    dfa2:	      |   moveq #1,d0
    dfa4:	/-----|-- bra.w e042 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    dfa8:	|     \-> moveq #24,d0
    dfaa:	|         add.l 20(sp),d0
    dfae:	|         move.l d0,-(sp)
    dfb0:	|         jsr 10694 <trimStack>
    dfb6:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    dfb8:	|         movea.l 20(sp),a0
    dfbc:	|         move.l 24(a0),d0
    dfc0:	|         move.l d0,-(sp)
    dfc2:	|         pea 7 <_start+0x7>
    dfc6:	|         lea 8(sp),a0
    dfca:	|         move.l a0,-(sp)
    dfcc:	|         jsr fd32 <getValueType>
    dfd2:	|         lea 12(sp),sp
    dfd6:	|         tst.w d0
    dfd8:	|     /-- bne.s dfde <builtIn_setCharacterAngleOffset+0x62>
    dfda:	|     |   moveq #1,d0
    dfdc:	+-----|-- bra.s e042 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    dfde:	|     \-> moveq #24,d0
    dfe0:	|         add.l 20(sp),d0
    dfe4:	|         move.l d0,-(sp)
    dfe6:	|         jsr 10694 <trimStack>
    dfec:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    dfee:	|         move.l (sp),d0
    dff0:	|         move.l d0,-(sp)
    dff2:	|         jsr 613a <findPerson>
    dff8:	|         addq.l #4,sp
    dffa:	|         move.l d0,8(sp)

	if (thisPerson) {
    dffe:	|  /----- beq.s e028 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
    e000:	|  |      move.l 4(sp),d0
    e004:	|  |      movea.l 8(sp),a0
    e008:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e00c:	|  |      moveq #28,d0
    e00e:	|  |      add.l 20(sp),d0
    e012:	|  |      pea 1 <_start+0x1>
    e016:	|  |      pea 1 <_start+0x1>
    e01a:	|  |      move.l d0,-(sp)
    e01c:	|  |      jsr 10602 <setVariable>
    e022:	|  |      lea 12(sp),sp
    e026:	|  |  /-- bra.s e040 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e028:	|  \--|-> moveq #28,d0
    e02a:	|     |   add.l 20(sp),d0
    e02e:	|     |   clr.l -(sp)
    e030:	|     |   pea 1 <_start+0x1>
    e034:	|     |   move.l d0,-(sp)
    e036:	|     |   jsr 10602 <setVariable>
    e03c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e040:	|     \-> moveq #2,d0
}
    e042:	\-------> lea 12(sp),sp
    e046:	          rts

0000e048 <builtIn_transitionMode>:


builtIn(transitionMode)
{
    e048:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e04a:	       movea.l 12(sp),a0
    e04e:	       move.l 24(a0),d0
    e052:	       move.l d0,-(sp)
    e054:	       pea 1 <_start+0x1>
    e058:	       move.l sp,d0
    e05a:	       addq.l #8,d0
    e05c:	       move.l d0,-(sp)
    e05e:	       jsr fd32 <getValueType>
    e064:	       lea 12(sp),sp
    e068:	       tst.w d0
    e06a:	   /-- bne.s e070 <builtIn_transitionMode+0x28>
    e06c:	   |   moveq #1,d0
    e06e:	/--|-- bra.s e0a6 <builtIn_transitionMode+0x5e>
	fadeMode = n;
    e070:	|  \-> move.l (sp),d0
    e072:	|      move.l d0,d0
    e074:	|      move.b d0,1656e <fadeMode>
	trimStack (&fun -> stack);
    e07a:	|      moveq #24,d0
    e07c:	|      add.l 12(sp),d0
    e080:	|      move.l d0,-(sp)
    e082:	|      jsr 10694 <trimStack>
    e088:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e08a:	|      moveq #28,d0
    e08c:	|      add.l 12(sp),d0
    e090:	|      pea 1 <_start+0x1>
    e094:	|      pea 1 <_start+0x1>
    e098:	|      move.l d0,-(sp)
    e09a:	|      jsr 10602 <setVariable>
    e0a0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e0a4:	|      moveq #2,d0
}
    e0a6:	\----> addq.l #4,sp
    e0a8:	       rts

0000e0aa <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    e0aa:	moveq #24,d0
    e0ac:	add.l 8(sp),d0
    e0b0:	move.l d0,-(sp)
    e0b2:	jsr 10694 <trimStack>
    e0b8:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
    e0ba:	moveq #28,d0
    e0bc:	add.l 8(sp),d0
    e0c0:	pea 1 <_start+0x1>
    e0c4:	pea 1 <_start+0x1>
    e0c8:	move.l d0,-(sp)
    e0ca:	jsr 10602 <setVariable>
    e0d0:	lea 12(sp),sp
	return BR_CONTINUE;
    e0d4:	moveq #2,d0
}
    e0d6:	rts

0000e0d8 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    e0d8:	pea 156c0 <zbuffer.c.d110ca03+0x17a>
    e0de:	jsr 11d08 <KPrintF>
    e0e4:	addq.l #4,sp
	return BR_CONTINUE;
    e0e6:	moveq #2,d0
}
    e0e8:	rts

0000e0ea <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    e0ea:	       lea -16(sp),sp
    e0ee:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    e0f0:	       movea.l 28(sp),a0
    e0f4:	       move.l 24(a0),d0
    e0f8:	       move.l d0,-(sp)
    e0fa:	       jsr 10308 <getTextFromAnyVar>
    e100:	       addq.l #4,sp
    e102:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    e106:	   /-- bne.s e10e <builtIn_saveCustomData+0x24>
    e108:	   |   moveq #1,d0
    e10a:	/--|-- bra.w e1c0 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
    e10e:	|  \-> move.l 16(sp),-(sp)
    e112:	|      jsr 2fe <encodeFilename>
    e118:	|      addq.l #4,sp
    e11a:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    e11e:	|      move.l 16(sp),8(sp)
    e124:	|      move.l 17b28 <SysBase>,d0
    e12a:	|      movea.l d0,a6
    e12c:	|      movea.l 8(sp),a1
    e130:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    e134:	|      move.l 12(sp),-(sp)
    e138:	|      jsr 9aec <failSecurityCheck>
    e13e:	|      addq.l #4,sp
    e140:	|      tst.w d0
    e142:	|  /-- beq.s e148 <builtIn_saveCustomData+0x5e>
    e144:	|  |   moveq #1,d0
    e146:	+--|-- bra.s e1c0 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    e148:	|  \-> moveq #24,d0
    e14a:	|      add.l 28(sp),d0
    e14e:	|      move.l d0,-(sp)
    e150:	|      jsr 10694 <trimStack>
    e156:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    e158:	|      movea.l 28(sp),a0
    e15c:	|      movea.l 24(a0),a0
    e160:	|      move.l (a0),d0
    e162:	|      moveq #6,d1
    e164:	|      cmp.l d0,d1
    e166:	|  /-- beq.s e17a <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
    e168:	|  |   pea 156ed <zbuffer.c.d110ca03+0x1a7>
    e16e:	|  |   jsr 11d08 <KPrintF>
    e174:	|  |   addq.l #4,sp
		return BR_ERROR;
    e176:	|  |   moveq #1,d0
    e178:	+--|-- bra.s e1c0 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    e17a:	|  \-> movea.l 28(sp),a0
    e17e:	|      move.l 24(a0),d0
    e182:	|      move.l d0,-(sp)
    e184:	|      move.l 16(sp),-(sp)
    e188:	|      jsr 973c <stackToFile>
    e18e:	|      addq.l #8,sp
    e190:	|      tst.w d0
    e192:	|  /-- bne.s e198 <builtIn_saveCustomData+0xae>
    e194:	|  |   moveq #1,d0
    e196:	+--|-- bra.s e1c0 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    e198:	|  \-> moveq #24,d0
    e19a:	|      add.l 28(sp),d0
    e19e:	|      move.l d0,-(sp)
    e1a0:	|      jsr 10694 <trimStack>
    e1a6:	|      addq.l #4,sp
	FreeVec(fileName);
    e1a8:	|      move.l 12(sp),4(sp)
    e1ae:	|      move.l 17b28 <SysBase>,d0
    e1b4:	|      movea.l d0,a6
    e1b6:	|      movea.l 4(sp),a1
    e1ba:	|      jsr -690(a6)
	return BR_CONTINUE;
    e1be:	|      moveq #2,d0
}
    e1c0:	\----> movea.l (sp)+,a6
    e1c2:	       lea 16(sp),sp
    e1c6:	       rts

0000e1c8 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    e1c8:	       lea -28(sp),sp
    e1cc:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    e1ce:	       movea.l 40(sp),a0
    e1d2:	       move.l 24(a0),d0
    e1d6:	       move.l d0,-(sp)
    e1d8:	       jsr 10308 <getTextFromAnyVar>
    e1de:	       addq.l #4,sp
    e1e0:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    e1e4:	   /-- bne.s e1ec <builtIn_loadCustomData+0x24>
    e1e6:	   |   moveq #1,d0
    e1e8:	/--|-- bra.w e2e8 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
    e1ec:	|  \-> move.l 28(sp),-(sp)
    e1f0:	|      jsr 2fe <encodeFilename>
    e1f6:	|      addq.l #4,sp
    e1f8:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    e1fc:	|      move.l 28(sp),20(sp)
    e202:	|      move.l 17b28 <SysBase>,d0
    e208:	|      movea.l d0,a6
    e20a:	|      movea.l 20(sp),a1
    e20e:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    e212:	|      move.l 24(sp),-(sp)
    e216:	|      jsr 9aec <failSecurityCheck>
    e21c:	|      addq.l #4,sp
    e21e:	|      tst.w d0
    e220:	|  /-- beq.s e228 <builtIn_loadCustomData+0x60>
    e222:	|  |   moveq #1,d0
    e224:	+--|-- bra.w e2e8 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
    e228:	|  \-> moveq #24,d0
    e22a:	|      add.l 40(sp),d0
    e22e:	|      move.l d0,-(sp)
    e230:	|      jsr 10694 <trimStack>
    e236:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
    e238:	|      moveq #28,d0
    e23a:	|      add.l 40(sp),d0
    e23e:	|      move.l d0,-(sp)
    e240:	|      jsr ff80 <unlinkVar>
    e246:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
    e248:	|      movea.l 40(sp),a0
    e24c:	|      moveq #6,d0
    e24e:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    e252:	|      moveq #12,d0
    e254:	|      move.l d0,16(sp)
    e258:	|      clr.l 12(sp)
    e25c:	|      move.l 17b28 <SysBase>,d0
    e262:	|      movea.l d0,a6
    e264:	|      move.l 16(sp),d0
    e268:	|      move.l 12(sp),d1
    e26c:	|      jsr -684(a6)
    e270:	|      move.l d0,8(sp)
    e274:	|      move.l 8(sp),d0
    e278:	|      movea.l 40(sp),a0
    e27c:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
    e280:	|      movea.l 40(sp),a0
    e284:	|      move.l 32(a0),d0
    e288:	|  /-- bne.s e28e <builtIn_loadCustomData+0xc6>
    e28a:	|  |   moveq #1,d0
    e28c:	+--|-- bra.s e2e8 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
    e28e:	|  \-> movea.l 40(sp),a0
    e292:	|      movea.l 32(a0),a0
    e296:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
    e298:	|      movea.l 40(sp),a0
    e29c:	|      movea.l 32(a0),a0
    e2a0:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
    e2a4:	|      movea.l 40(sp),a0
    e2a8:	|      movea.l 32(a0),a0
    e2ac:	|      moveq #1,d0
    e2ae:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
    e2b2:	|      movea.l 40(sp),a0
    e2b6:	|      move.l 32(a0),d0
    e2ba:	|      move.l d0,-(sp)
    e2bc:	|      move.l 28(sp),-(sp)
    e2c0:	|      jsr 9176 <fileToStack>
    e2c6:	|      addq.l #8,sp
    e2c8:	|      tst.w d0
    e2ca:	|  /-- bne.s e2d0 <builtIn_loadCustomData+0x108>
    e2cc:	|  |   moveq #1,d0
    e2ce:	+--|-- bra.s e2e8 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
    e2d0:	|  \-> move.l 24(sp),4(sp)
    e2d6:	|      move.l 17b28 <SysBase>,d0
    e2dc:	|      movea.l d0,a6
    e2de:	|      movea.l 4(sp),a1
    e2e2:	|      jsr -690(a6)
	return BR_CONTINUE;
    e2e6:	|      moveq #2,d0
}
    e2e8:	\----> movea.l (sp)+,a6
    e2ea:	       lea 28(sp),sp
    e2ee:	       rts

0000e2f0 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    e2f0:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e2f2:	       movea.l 12(sp),a0
    e2f6:	       move.l 24(a0),d0
    e2fa:	       move.l d0,-(sp)
    e2fc:	       pea 1 <_start+0x1>
    e300:	       move.l sp,d0
    e302:	       addq.l #8,d0
    e304:	       move.l d0,-(sp)
    e306:	       jsr fd32 <getValueType>
    e30c:	       lea 12(sp),sp
    e310:	       tst.w d0
    e312:	   /-- bne.s e318 <builtIn_setCustomEncoding+0x28>
    e314:	   |   moveq #1,d0
    e316:	/--|-- bra.s e34e <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
    e318:	|  \-> move.l (sp),d0
    e31a:	|      move.l d0,d0
    e31c:	|      move.w d0,17bce <saveEncoding>
	trimStack (&fun -> stack);
    e322:	|      moveq #24,d0
    e324:	|      add.l 12(sp),d0
    e328:	|      move.l d0,-(sp)
    e32a:	|      jsr 10694 <trimStack>
    e330:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e332:	|      moveq #28,d0
    e334:	|      add.l 12(sp),d0
    e338:	|      pea 1 <_start+0x1>
    e33c:	|      pea 1 <_start+0x1>
    e340:	|      move.l d0,-(sp)
    e342:	|      jsr 10602 <setVariable>
    e348:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e34c:	|      moveq #2,d0
}
    e34e:	\----> addq.l #4,sp
    e350:	       rts

0000e352 <builtIn_freeSound>:

builtIn(freeSound)
{
    e352:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e354:	       movea.l 12(sp),a0
    e358:	       move.l 24(a0),d0
    e35c:	       move.l d0,-(sp)
    e35e:	       pea 5 <_start+0x5>
    e362:	       move.l sp,d0
    e364:	       addq.l #8,d0
    e366:	       move.l d0,-(sp)
    e368:	       jsr fd32 <getValueType>
    e36e:	       lea 12(sp),sp
    e372:	       tst.w d0
    e374:	   /-- bne.s e37a <builtIn_freeSound+0x28>
    e376:	   |   moveq #1,d0
    e378:	/--|-- bra.s e398 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
    e37a:	|  \-> moveq #24,d0
    e37c:	|      add.l 12(sp),d0
    e380:	|      move.l d0,-(sp)
    e382:	|      jsr 10694 <trimStack>
    e388:	|      addq.l #4,sp
	huntKillFreeSound (v);
    e38a:	|      move.l (sp),d0
    e38c:	|      move.l d0,-(sp)
    e38e:	|      jsr 88e6 <huntKillFreeSound>
    e394:	|      addq.l #4,sp
	return BR_CONTINUE;
    e396:	|      moveq #2,d0
}
    e398:	\----> addq.l #4,sp
    e39a:	       rts

0000e39c <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
    e39c:	       lea -12(sp),sp
    e3a0:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e3a2:	       movea.l 24(sp),a0
    e3a6:	       move.l 24(a0),d0
    e3aa:	       move.l d0,-(sp)
    e3ac:	       pea 1 <_start+0x1>
    e3b0:	       moveq #16,d0
    e3b2:	       add.l sp,d0
    e3b4:	       move.l d0,-(sp)
    e3b6:	       jsr fd32 <getValueType>
    e3bc:	       lea 12(sp),sp
    e3c0:	       tst.w d0
    e3c2:	   /-- bne.s e3ca <builtIn_parallaxAdd+0x2e>
    e3c4:	   |   moveq #1,d0
    e3c6:	/--|-- bra.w e49e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    e3ca:	|  \-> moveq #24,d0
    e3cc:	|      add.l 24(sp),d0
    e3d0:	|      move.l d0,-(sp)
    e3d2:	|      jsr 10694 <trimStack>
    e3d8:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e3da:	|      movea.l 24(sp),a0
    e3de:	|      move.l 24(a0),d0
    e3e2:	|      move.l d0,-(sp)
    e3e4:	|      pea 1 <_start+0x1>
    e3e8:	|      moveq #20,d0
    e3ea:	|      add.l sp,d0
    e3ec:	|      move.l d0,-(sp)
    e3ee:	|      jsr fd32 <getValueType>
    e3f4:	|      lea 12(sp),sp
    e3f8:	|      tst.w d0
    e3fa:	|  /-- bne.s e402 <builtIn_parallaxAdd+0x66>
    e3fc:	|  |   moveq #1,d0
    e3fe:	+--|-- bra.w e49e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    e402:	|  \-> moveq #24,d0
    e404:	|      add.l 24(sp),d0
    e408:	|      move.l d0,-(sp)
    e40a:	|      jsr 10694 <trimStack>
    e410:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e412:	|      movea.l 24(sp),a0
    e416:	|      move.l 24(a0),d0
    e41a:	|      move.l d0,-(sp)
    e41c:	|      pea 5 <_start+0x5>
    e420:	|      lea 12(sp),a0
    e424:	|      move.l a0,-(sp)
    e426:	|      jsr fd32 <getValueType>
    e42c:	|      lea 12(sp),sp
    e430:	|      tst.w d0
    e432:	|  /-- bne.s e438 <builtIn_parallaxAdd+0x9c>
    e434:	|  |   moveq #1,d0
    e436:	+--|-- bra.s e49e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    e438:	|  \-> moveq #24,d0
    e43a:	|      add.l 24(sp),d0
    e43e:	|      move.l d0,-(sp)
    e440:	|      jsr 10694 <trimStack>
    e446:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
    e448:	|      move.l 8(sp),d0
    e44c:	|      move.l d0,d0
    e44e:	|      moveq #0,d2
    e450:	|      move.w d0,d2
    e452:	|      move.l 12(sp),d0
    e456:	|      move.l d0,d0
    e458:	|      moveq #0,d1
    e45a:	|      move.w d0,d1
    e45c:	|      move.l 4(sp),d0
    e460:	|      move.l d0,d0
    e462:	|      move.w d0,d0
    e464:	|      andi.l #65535,d0
    e46a:	|      move.l d2,-(sp)
    e46c:	|      move.l d1,-(sp)
    e46e:	|      move.l d0,-(sp)
    e470:	|      jsr 8b8e <loadParallax>
    e476:	|      lea 12(sp),sp
    e47a:	|      tst.w d0
    e47c:	|  /-- bne.s e482 <builtIn_parallaxAdd+0xe6>
    e47e:	|  |   moveq #1,d0
    e480:	+--|-- bra.s e49e <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
    e482:	|  \-> moveq #28,d0
    e484:	|      add.l 24(sp),d0
    e488:	|      pea 1 <_start+0x1>
    e48c:	|      pea 1 <_start+0x1>
    e490:	|      move.l d0,-(sp)
    e492:	|      jsr 10602 <setVariable>
    e498:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
    e49c:	|      moveq #2,d0
}
    e49e:	\----> move.l (sp)+,d2
    e4a0:	       lea 12(sp),sp
    e4a4:	       rts

0000e4a6 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
    e4a6:	jsr 8af6 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
    e4ac:	moveq #28,d0
    e4ae:	add.l 8(sp),d0
    e4b2:	pea 1 <_start+0x1>
    e4b6:	pea 1 <_start+0x1>
    e4ba:	move.l d0,-(sp)
    e4bc:	jsr 10602 <setVariable>
    e4c2:	lea 12(sp),sp
	return BR_CONTINUE;
    e4c6:	moveq #2,d0
}
    e4c8:	rts

0000e4ca <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
    e4ca:	pea 1570b <zbuffer.c.d110ca03+0x1c5>
    e4d0:	jsr 11d08 <KPrintF>
    e4d6:	addq.l #4,sp

	return BR_CONTINUE;
    e4d8:	moveq #2,d0
}
    e4da:	rts

0000e4dc <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
    e4dc:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    e4de:	             movea.l 16(sp),a0
    e4e2:	             movea.l 24(a0),a0
    e4e6:	             move.l (a0),d0
    e4e8:	             moveq #1,d1
    e4ea:	             cmp.l d0,d1
    e4ec:	      /----- beq.s e534 <builtIn_makeFastArray+0x58>
    e4ee:	      |      moveq #6,d1
    e4f0:	      |      cmp.l d0,d1
    e4f2:	/-----|----- bne.s e572 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
    e4f4:	|     |      movea.l 16(sp),a0
    e4f8:	|     |      movea.l 24(a0),a0
    e4fc:	|     |      move.l 4(a0),d1
    e500:	|     |      moveq #28,d0
    e502:	|     |      add.l 16(sp),d0
    e506:	|     |      move.l d1,-(sp)
    e508:	|     |      move.l d0,-(sp)
    e50a:	|     |      jsr fde4 <makeFastArrayFromStack>
    e510:	|     |      addq.l #8,sp
    e512:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
    e516:	|     |      moveq #24,d0
    e518:	|     |      add.l 16(sp),d0
    e51c:	|     |      move.l d0,-(sp)
    e51e:	|     |      jsr 10694 <trimStack>
    e524:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
    e526:	|     |      tst.w 6(sp)
    e52a:	|     |  /-- beq.s e530 <builtIn_makeFastArray+0x54>
    e52c:	|     |  |   moveq #2,d0
    e52e:	|  /--|--|-- bra.s e584 <builtIn_makeFastArray+0xa8>
    e530:	|  |  |  \-> moveq #1,d0
    e532:	|  +--|----- bra.s e584 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
    e534:	|  |  \----> movea.l 16(sp),a0
    e538:	|  |         movea.l 24(a0),a0
    e53c:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
    e542:	|  |         moveq #24,d0
    e544:	|  |         add.l 16(sp),d0
    e548:	|  |         move.l d0,-(sp)
    e54a:	|  |         jsr 10694 <trimStack>
    e550:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
    e552:	|  |         moveq #28,d0
    e554:	|  |         add.l 16(sp),d0
    e558:	|  |         move.l 2(sp),-(sp)
    e55c:	|  |         move.l d0,-(sp)
    e55e:	|  |         jsr fe4e <makeFastArraySize>
    e564:	|  |         addq.l #8,sp
    e566:	|  |         tst.w d0
    e568:	|  |     /-- beq.s e56e <builtIn_makeFastArray+0x92>
    e56a:	|  |     |   moveq #2,d0
    e56c:	|  +-----|-- bra.s e584 <builtIn_makeFastArray+0xa8>
    e56e:	|  |     \-> moveq #1,d0
    e570:	|  +-------- bra.s e584 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
    e572:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
    e574:	   |         pea 15734 <zbuffer.c.d110ca03+0x1ee>
    e57a:	   |         jsr 11d08 <KPrintF>
    e580:	   |         addq.l #4,sp
	return BR_ERROR;
    e582:	   |         moveq #1,d0
}
    e584:	   \-------> addq.l #8,sp
    e586:	             rts

0000e588 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
    e588:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e58a:	          movea.l 16(sp),a0
    e58e:	          move.l 24(a0),d0
    e592:	          move.l d0,-(sp)
    e594:	          pea 7 <_start+0x7>
    e598:	          move.l sp,d0
    e59a:	          addq.l #8,d0
    e59c:	          move.l d0,-(sp)
    e59e:	          jsr fd32 <getValueType>
    e5a4:	          lea 12(sp),sp
    e5a8:	          tst.w d0
    e5aa:	      /-- bne.s e5b0 <builtIn_getCharacterScale+0x28>
    e5ac:	      |   moveq #1,d0
    e5ae:	/-----|-- bra.s e62a <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
    e5b0:	|     \-> moveq #24,d0
    e5b2:	|         add.l 16(sp),d0
    e5b6:	|         move.l d0,-(sp)
    e5b8:	|         jsr 10694 <trimStack>
    e5be:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    e5c0:	|         move.l (sp),d0
    e5c2:	|         move.l d0,-(sp)
    e5c4:	|         jsr 613a <findPerson>
    e5ca:	|         addq.l #4,sp
    e5cc:	|         move.l d0,4(sp)
	if (pers) {
    e5d0:	|  /----- beq.s e610 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
    e5d2:	|  |      movea.l 4(sp),a0
    e5d6:	|  |      move.l 20(a0),d0
    e5da:	|  |      move.l #1120403456,-(sp)
    e5e0:	|  |      move.l d0,-(sp)
    e5e2:	|  |      jsr 12212 <__mulsf3>
    e5e8:	|  |      addq.l #8,sp
    e5ea:	|  |      move.l d0,-(sp)
    e5ec:	|  |      jsr 120f8 <__fixsfsi>
    e5f2:	|  |      addq.l #4,sp
    e5f4:	|  |      move.l d0,d1
    e5f6:	|  |      moveq #28,d0
    e5f8:	|  |      add.l 16(sp),d0
    e5fc:	|  |      move.l d1,-(sp)
    e5fe:	|  |      pea 1 <_start+0x1>
    e602:	|  |      move.l d0,-(sp)
    e604:	|  |      jsr 10602 <setVariable>
    e60a:	|  |      lea 12(sp),sp
    e60e:	|  |  /-- bra.s e628 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e610:	|  \--|-> moveq #28,d0
    e612:	|     |   add.l 16(sp),d0
    e616:	|     |   clr.l -(sp)
    e618:	|     |   pea 1 <_start+0x1>
    e61c:	|     |   move.l d0,-(sp)
    e61e:	|     |   jsr 10602 <setVariable>
    e624:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e628:	|     \-> moveq #2,d0
}
    e62a:	\-------> addq.l #8,sp
    e62c:	          rts

0000e62e <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
    e62e:	move.l 17bf2 <gameSettings>,d0
    e634:	move.l d0,d1
    e636:	moveq #28,d0
    e638:	add.l 8(sp),d0
    e63c:	move.l d1,-(sp)
    e63e:	pea 1 <_start+0x1>
    e642:	move.l d0,-(sp)
    e644:	jsr 10602 <setVariable>
    e64a:	lea 12(sp),sp
	return BR_CONTINUE;
    e64e:	moveq #2,d0
}
    e650:	rts

0000e652 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    e652:	moveq #24,d0
    e654:	add.l 8(sp),d0
    e658:	move.l d0,-(sp)
    e65a:	jsr 10694 <trimStack>
    e660:	addq.l #4,sp
	trimStack (&fun -> stack);
    e662:	moveq #24,d0
    e664:	add.l 8(sp),d0
    e668:	move.l d0,-(sp)
    e66a:	jsr 10694 <trimStack>
    e670:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
    e672:	moveq #28,d0
    e674:	add.l 8(sp),d0
    e678:	clr.l -(sp)
    e67a:	pea 1 <_start+0x1>
    e67e:	move.l d0,-(sp)
    e680:	jsr 10602 <setVariable>
    e686:	lea 12(sp),sp

	return BR_CONTINUE;
    e68a:	moveq #2,d0

}
    e68c:	rts

0000e68e <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
    e68e:	move.l 1600c <lastFramesPerSecond>,d1
    e694:	moveq #28,d0
    e696:	add.l 8(sp),d0
    e69a:	move.l d1,-(sp)
    e69c:	pea 1 <_start+0x1>
    e6a0:	move.l d0,-(sp)
    e6a2:	jsr 10602 <setVariable>
    e6a8:	lea 12(sp),sp
	return BR_CONTINUE;
    e6ac:	moveq #2,d0
}
    e6ae:	rts

0000e6b0 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
    e6b0:	moveq #2,d0
}
    e6b2:	rts

0000e6b4 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
    e6b4:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e6b8:	          movea.l 60(sp),a0
    e6bc:	          move.l 24(a0),d0
    e6c0:	          move.l d0,-(sp)
    e6c2:	          pea 1 <_start+0x1>
    e6c6:	          pea 17a24 <thumbHeight>
    e6cc:	          jsr fd32 <getValueType>
    e6d2:	          lea 12(sp),sp
    e6d6:	          tst.w d0
    e6d8:	      /-- bne.s e6e0 <builtIn_setThumbnailSize+0x2c>
    e6da:	      |   moveq #1,d0
    e6dc:	/-----|-- bra.w e79c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    e6e0:	|     \-> moveq #24,d0
    e6e2:	|         add.l 60(sp),d0
    e6e6:	|         move.l d0,-(sp)
    e6e8:	|         jsr 10694 <trimStack>
    e6ee:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e6f0:	|         movea.l 60(sp),a0
    e6f4:	|         move.l 24(a0),d0
    e6f8:	|         move.l d0,-(sp)
    e6fa:	|         pea 1 <_start+0x1>
    e6fe:	|         pea 17a20 <thumbWidth>
    e704:	|         jsr fd32 <getValueType>
    e70a:	|         lea 12(sp),sp
    e70e:	|         tst.w d0
    e710:	|     /-- bne.s e718 <builtIn_setThumbnailSize+0x64>
    e712:	|     |   moveq #1,d0
    e714:	+-----|-- bra.w e79c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    e718:	|     \-> moveq #24,d0
    e71a:	|         add.l 60(sp),d0
    e71e:	|         move.l d0,-(sp)
    e720:	|         jsr 10694 <trimStack>
    e726:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
    e728:	|         move.l 17a20 <thumbWidth>,d0
    e72e:	|     /-- bmi.s e75c <builtIn_setThumbnailSize+0xa8>
    e730:	|     |   move.l 17a24 <thumbHeight>,d0
    e736:	|     +-- bmi.s e75c <builtIn_setThumbnailSize+0xa8>
    e738:	|     |   move.l 17a20 <thumbWidth>,d0
    e73e:	|     |   move.l d0,d1
    e740:	|     |   move.l 17a28 <winWidth>,d0
    e746:	|     |   cmp.l d1,d0
    e748:	|     +-- bcs.s e75c <builtIn_setThumbnailSize+0xa8>
    e74a:	|     |   move.l 17a24 <thumbHeight>,d0
    e750:	|     |   move.l d0,d1
    e752:	|     |   move.l 17a2c <winHeight>,d0
    e758:	|     |   cmp.l d1,d0
    e75a:	|  /--|-- bcc.s e79a <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
    e75c:	|  |  \-> move.l 17a24 <thumbHeight>,d1
    e762:	|  |      move.l 17a20 <thumbWidth>,d0
    e768:	|  |      move.l d1,-(sp)
    e76a:	|  |      move.l d0,-(sp)
    e76c:	|  |      pea 1575b <zbuffer.c.d110ca03+0x215>
    e772:	|  |      lea 14(sp),a0
    e776:	|  |      move.l a0,-(sp)
    e778:	|  |      jsr f53c <sprintf>
    e77e:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
    e782:	|  |      lea 2(sp),a0
    e786:	|  |      move.l a0,-(sp)
    e788:	|  |      pea 15763 <zbuffer.c.d110ca03+0x21d>
    e78e:	|  |      jsr 11d08 <KPrintF>
    e794:	|  |      addq.l #8,sp
		return BR_ERROR;
    e796:	|  |      moveq #1,d0
    e798:	+--|----- bra.s e79c <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
    e79a:	|  \----> moveq #2,d0
}
    e79c:	\-------> lea 52(sp),sp
    e7a0:	          rts

0000e7a2 <builtIn_hasFlag>:

builtIn(hasFlag)
{
    e7a2:	       lea -12(sp),sp
    e7a6:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e7a8:	       movea.l 24(sp),a0
    e7ac:	       move.l 24(a0),d0
    e7b0:	       move.l d0,-(sp)
    e7b2:	       pea 1 <_start+0x1>
    e7b6:	       lea 12(sp),a0
    e7ba:	       move.l a0,-(sp)
    e7bc:	       jsr fd32 <getValueType>
    e7c2:	       lea 12(sp),sp
    e7c6:	       tst.w d0
    e7c8:	   /-- bne.s e7d0 <builtIn_hasFlag+0x2e>
    e7ca:	   |   moveq #1,d0
    e7cc:	/--|-- bra.w e860 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    e7d0:	|  \-> moveq #24,d0
    e7d2:	|      add.l 24(sp),d0
    e7d6:	|      move.l d0,-(sp)
    e7d8:	|      jsr 10694 <trimStack>
    e7de:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e7e0:	|      movea.l 24(sp),a0
    e7e4:	|      move.l 24(a0),d0
    e7e8:	|      move.l d0,-(sp)
    e7ea:	|      pea 7 <_start+0x7>
    e7ee:	|      moveq #16,d0
    e7f0:	|      add.l sp,d0
    e7f2:	|      move.l d0,-(sp)
    e7f4:	|      jsr fd32 <getValueType>
    e7fa:	|      lea 12(sp),sp
    e7fe:	|      tst.w d0
    e800:	|  /-- bne.s e806 <builtIn_hasFlag+0x64>
    e802:	|  |   moveq #1,d0
    e804:	+--|-- bra.s e860 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    e806:	|  \-> moveq #24,d0
    e808:	|      add.l 24(sp),d0
    e80c:	|      move.l d0,-(sp)
    e80e:	|      jsr 10694 <trimStack>
    e814:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
    e816:	|      move.l 8(sp),d0
    e81a:	|      move.l d0,-(sp)
    e81c:	|      jsr 8d00 <findObjectType>
    e822:	|      addq.l #4,sp
    e824:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
    e828:	|  /-- bne.s e82e <builtIn_hasFlag+0x8c>
    e82a:	|  |   moveq #1,d0
    e82c:	+--|-- bra.s e860 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
    e82e:	|  \-> movea.l 12(sp),a0
    e832:	|      move.w 36(a0),d0
    e836:	|      moveq #0,d2
    e838:	|      move.w d0,d2
    e83a:	|      move.l 4(sp),d1
    e83e:	|      moveq #1,d0
    e840:	|      lsl.l d1,d0
    e842:	|      move.l d2,d1
    e844:	|      and.l d0,d1
    e846:	|      moveq #28,d0
    e848:	|      add.l 24(sp),d0
    e84c:	|      move.l d1,-(sp)
    e84e:	|      pea 1 <_start+0x1>
    e852:	|      move.l d0,-(sp)
    e854:	|      jsr 10602 <setVariable>
    e85a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e85e:	|      moveq #2,d0
}
    e860:	\----> move.l (sp)+,d2
    e862:	       lea 12(sp),sp
    e866:	       rts

0000e868 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
    e868:	       jsr 8cee <snapshot>
    e86e:	       tst.w d0
    e870:	/----- beq.s e876 <builtIn_snapshotGrab+0xe>
    e872:	|      moveq #2,d0
    e874:	|  /-- bra.s e878 <builtIn_snapshotGrab+0x10>
    e876:	\--|-> moveq #1,d0
}
    e878:	   \-> rts

0000e87a <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
    e87a:	jsr 8bd4 <nosnapshot>
	return BR_CONTINUE;
    e880:	moveq #2,d0
}
    e882:	rts

0000e884 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
    e884:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
    e886:	move.w 16000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
    e88e:	movea.l 12(sp),a0
    e892:	move.l 24(a0),d0
    e896:	move.l d0,-(sp)
    e898:	jsr 10272 <getBoolean>
    e89e:	addq.l #4,sp
    e8a0:	move.w d0,16000 <allowAnyFilename>
	trimStack (&fun -> stack);
    e8a6:	moveq #24,d0
    e8a8:	add.l 12(sp),d0
    e8ac:	move.l d0,-(sp)
    e8ae:	jsr 10694 <trimStack>
    e8b4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
    e8b6:	movea.w 2(sp),a0
    e8ba:	moveq #28,d0
    e8bc:	add.l 12(sp),d0
    e8c0:	move.l a0,-(sp)
    e8c2:	pea 1 <_start+0x1>
    e8c6:	move.l d0,-(sp)
    e8c8:	jsr 10602 <setVariable>
    e8ce:	lea 12(sp),sp
	return BR_CONTINUE;
    e8d2:	moveq #2,d0
}
    e8d4:	addq.l #4,sp
    e8d6:	rts

0000e8d8 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    e8d8:	moveq #24,d0
    e8da:	add.l 8(sp),d0
    e8de:	move.l d0,-(sp)
    e8e0:	jsr 10694 <trimStack>
    e8e6:	addq.l #4,sp
	trimStack (&fun -> stack);
    e8e8:	moveq #24,d0
    e8ea:	add.l 8(sp),d0
    e8ee:	move.l d0,-(sp)
    e8f0:	jsr 10694 <trimStack>
    e8f6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
    e8f8:	moveq #28,d0
    e8fa:	add.l 8(sp),d0
    e8fe:	clr.l -(sp)
    e900:	pea 1 <_start+0x1>
    e904:	move.l d0,-(sp)
    e906:	jsr 10602 <setVariable>
    e90c:	lea 12(sp),sp

	return BR_CONTINUE;
    e910:	moveq #2,d0
}
    e912:	rts

0000e914 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
    e914:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
    e916:	movea.l 12(sp),a0
    e91a:	move.l 24(a0),d0
    e91e:	move.l d0,-(sp)
    e920:	jsr 10308 <getTextFromAnyVar>
    e926:	addq.l #4,sp
    e928:	move.l d0,(sp)
	trimStack (&fun -> stack);
    e92a:	moveq #24,d0
    e92c:	add.l 12(sp),d0
    e930:	move.l d0,-(sp)
    e932:	jsr 10694 <trimStack>
    e938:	addq.l #4,sp
	KPrintF (mess);
    e93a:	move.l (sp),-(sp)
    e93c:	jsr 11d08 <KPrintF>
    e942:	addq.l #4,sp
	return BR_ERROR;
    e944:	moveq #1,d0
}
    e946:	addq.l #4,sp
    e948:	rts

0000e94a <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    e94a:	moveq #24,d0
    e94c:	add.l 8(sp),d0
    e950:	move.l d0,-(sp)
    e952:	jsr 10694 <trimStack>
    e958:	addq.l #4,sp
	trimStack (&fun -> stack);
    e95a:	moveq #24,d0
    e95c:	add.l 8(sp),d0
    e960:	move.l d0,-(sp)
    e962:	jsr 10694 <trimStack>
    e968:	addq.l #4,sp
	trimStack (&fun -> stack);
    e96a:	moveq #24,d0
    e96c:	add.l 8(sp),d0
    e970:	move.l d0,-(sp)
    e972:	jsr 10694 <trimStack>
    e978:	addq.l #4,sp
	trimStack (&fun -> stack);
    e97a:	moveq #24,d0
    e97c:	add.l 8(sp),d0
    e980:	move.l d0,-(sp)
    e982:	jsr 10694 <trimStack>
    e988:	addq.l #4,sp

	return BR_CONTINUE;
    e98a:	moveq #2,d0
}
    e98c:	rts

0000e98e <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    e98e:	moveq #24,d0
    e990:	add.l 8(sp),d0
    e994:	move.l d0,-(sp)
    e996:	jsr 10694 <trimStack>
    e99c:	addq.l #4,sp
	trimStack (&fun -> stack);
    e99e:	moveq #24,d0
    e9a0:	add.l 8(sp),d0
    e9a4:	move.l d0,-(sp)
    e9a6:	jsr 10694 <trimStack>
    e9ac:	addq.l #4,sp
	trimStack (&fun -> stack);
    e9ae:	moveq #24,d0
    e9b0:	add.l 8(sp),d0
    e9b4:	move.l d0,-(sp)
    e9b6:	jsr 10694 <trimStack>
    e9bc:	addq.l #4,sp

	return BR_CONTINUE;
    e9be:	moveq #2,d0

}
    e9c0:	rts

0000e9c2 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
    e9c2:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
    e9c4:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    e9ca:	sne d0
    e9cc:	neg.b d0
    e9ce:	moveq #0,d1
    e9d0:	move.b d0,d1
    e9d2:	moveq #28,d0
    e9d4:	add.l 12(sp),d0
    e9d8:	move.l d1,-(sp)
    e9da:	pea 1 <_start+0x1>
    e9de:	move.l d0,-(sp)
    e9e0:	jsr 10602 <setVariable>
    e9e6:	lea 12(sp),sp
	return BR_CONTINUE;
    e9ea:	moveq #2,d0
}
    e9ec:	addq.l #4,sp
    e9ee:	rts

0000e9f0 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
    e9f0:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
    e9f2:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
    e9f8:	pea 1577a <zbuffer.c.d110ca03+0x234>
    e9fe:	jsr 11d08 <KPrintF>
    ea04:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    ea06:	tst.w 2(sp)
    ea0a:	sne d0
    ea0c:	neg.b d0
    ea0e:	moveq #0,d1
    ea10:	move.b d0,d1
    ea12:	moveq #28,d0
    ea14:	add.l 12(sp),d0
    ea18:	move.l d1,-(sp)
    ea1a:	pea 1 <_start+0x1>
    ea1e:	move.l d0,-(sp)
    ea20:	jsr 10602 <setVariable>
    ea26:	lea 12(sp),sp
	return BR_CONTINUE;
    ea2a:	moveq #2,d0
}
    ea2c:	addq.l #4,sp
    ea2e:	rts

0000ea30 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
    ea30:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
    ea34:	             move.l 104(sp),d0
    ea38:	             cmpi.l #166,d0
    ea3e:	/----------- bhi.w eb20 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
    ea42:	|            move.l 104(sp),d0
    ea46:	|            add.l d0,d0
    ea48:	|            movea.l d0,a1
    ea4a:	|            adda.l d0,a1
    ea4c:	|            lea 16036 <paramNum>,a0
    ea52:	|            move.l (0,a1,a0.l),d0
    ea56:	|            moveq #-1,d1
    ea58:	|            cmp.l d0,d1
    ea5a:	|  /-------- beq.w eae8 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
    ea5e:	|  |         move.l 104(sp),d0
    ea62:	|  |         add.l d0,d0
    ea64:	|  |         movea.l d0,a1
    ea66:	|  |         adda.l d0,a1
    ea68:	|  |         lea 16036 <paramNum>,a0
    ea6e:	|  |         move.l (0,a1,a0.l),d0
    ea72:	|  |         cmp.l 108(sp),d0
    ea76:	|  +-------- beq.s eae8 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
    ea78:	|  |         move.l 104(sp),d0
    ea7c:	|  |         add.l d0,d0
    ea7e:	|  |         movea.l d0,a1
    ea80:	|  |         adda.l d0,a1
    ea82:	|  |         lea 16036 <paramNum>,a0
    ea88:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
    ea8c:	|  |         moveq #1,d1
    ea8e:	|  |         cmp.l d0,d1
    ea90:	|  |  /----- bne.s ea9a <callBuiltIn+0x6a>
    ea92:	|  |  |      move.l #77257,d0
    ea98:	|  |  |  /-- bra.s eaa0 <callBuiltIn+0x70>
    ea9a:	|  |  \--|-> move.l #87984,d0
    eaa0:	|  |     \-> move.l 104(sp),d1
    eaa4:	|  |         add.l d1,d1
    eaa6:	|  |         movea.l d1,a1
    eaa8:	|  |         adda.l d1,a1
    eaaa:	|  |         lea 16036 <paramNum>,a0
    eab0:	|  |         move.l (0,a1,a0.l),d1
    eab4:	|  |         move.l d0,-(sp)
    eab6:	|  |         move.l d1,-(sp)
    eab8:	|  |         pea 157b2 <zbuffer.c.d110ca03+0x26c>
    eabe:	|  |         lea 12(sp),a0
    eac2:	|  |         move.l a0,-(sp)
    eac4:	|  |         jsr f53c <sprintf>
    eaca:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
    eace:	|  |         movea.l sp,a0
    ead0:	|  |         move.l a0,-(sp)
    ead2:	|  |         jsr b8 <copyString>
    ead8:	|  |         addq.l #4,sp
    eada:	|  |         move.l d0,-(sp)
    eadc:	|  |         jsr 11d08 <KPrintF>
    eae2:	|  |         addq.l #4,sp
				return BR_ERROR;
    eae4:	|  |         moveq #1,d0
    eae6:	|  |     /-- bra.s eb30 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
    eae8:	|  \-----|-> move.l 104(sp),d0
    eaec:	|        |   add.l d0,d0
    eaee:	|        |   movea.l d0,a1
    eaf0:	|        |   adda.l d0,a1
    eaf2:	|        |   lea 162d2 <builtInFunctionArray>,a0
    eaf8:	|        |   move.l (0,a1,a0.l),d0
    eafc:	+--------|-- beq.s eb20 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
    eafe:	|        |   move.l 104(sp),d0
    eb02:	|        |   add.l d0,d0
    eb04:	|        |   movea.l d0,a1
    eb06:	|        |   adda.l d0,a1
    eb08:	|        |   lea 162d2 <builtInFunctionArray>,a0
    eb0e:	|        |   movea.l (0,a1,a0.l),a0
    eb12:	|        |   move.l 112(sp),-(sp)
    eb16:	|        |   move.l 112(sp),-(sp)
    eb1a:	|        |   jsr (a0)
    eb1c:	|        |   addq.l #8,sp
    eb1e:	|        +-- bra.s eb30 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
    eb20:	\--------|-> pea 157dd <zbuffer.c.d110ca03+0x297>
    eb26:	         |   jsr 11d08 <KPrintF>
    eb2c:	         |   addq.l #4,sp
	return BR_ERROR;
    eb2e:	         |   moveq #1,d0
}
    eb30:	         \-> lea 100(sp),sp
    eb34:	             rts

0000eb36 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
    eb36:	          subq.l #8,sp
	int indexNum = -1;
    eb38:	          moveq #-1,d0
    eb3a:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    eb3e:	          clr.l (sp)
    eb40:	   /----- bra.s eb66 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
    eb42:	/--|----> move.l 17bea <languageTable>,d1
    eb48:	|  |      move.l (sp),d0
    eb4a:	|  |      add.l d0,d0
    eb4c:	|  |      add.l d0,d0
    eb4e:	|  |      movea.l d1,a0
    eb50:	|  |      adda.l d0,a0
    eb52:	|  |      move.l (a0),d0
    eb54:	|  |      move.l d0,d1
    eb56:	|  |      move.l 17bf2 <gameSettings>,d0
    eb5c:	|  |      cmp.l d1,d0
    eb5e:	|  |  /-- bne.s eb64 <getLanguageForFileB+0x2e>
    eb60:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    eb64:	|  |  \-> addq.l #1,(sp)
    eb66:	|  \----> move.l 17bf6 <gameSettings+0x4>,d0
    eb6c:	|         cmp.l (sp),d0
    eb6e:	\-------- bcc.s eb42 <getLanguageForFileB+0xc>
	}

	return indexNum;
    eb70:	          move.l 4(sp),d0
}
    eb74:	          addq.l #8,sp
    eb76:	          rts

0000eb78 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
    eb78:	          lea -20(sp),sp
    eb7c:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
    eb7e:	          move.l 28(sp),-(sp)
    eb82:	          jsr f21e <strlen>
    eb88:	          addq.l #4,sp
    eb8a:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
    eb8e:	          moveq #4,d0
    eb90:	          cmp.l 12(sp),d0
    eb94:	      /-- bge.s ebb8 <getPrefsFilename+0x40>
    eb96:	      |   move.l 12(sp),d0
    eb9a:	      |   subq.l #4,d0
    eb9c:	      |   movea.l 28(sp),a0
    eba0:	      |   adda.l d0,a0
    eba2:	      |   move.b (a0),d0
    eba4:	      |   cmpi.b #46,d0
    eba8:	      +-- bne.s ebb8 <getPrefsFilename+0x40>
		filename[n-4] = 0;
    ebaa:	      |   move.l 12(sp),d0
    ebae:	      |   subq.l #4,d0
    ebb0:	      |   movea.l 28(sp),a0
    ebb4:	      |   adda.l d0,a0
    ebb6:	      |   clr.b (a0)
	}

	char * f = filename;
    ebb8:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
    ebbe:	          clr.l 20(sp)
    ebc2:	   /----- bra.s ebea <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
    ebc4:	/--|----> move.l 20(sp),d0
    ebc8:	|  |      movea.l 28(sp),a0
    ebcc:	|  |      adda.l d0,a0
    ebce:	|  |      move.b (a0),d0
    ebd0:	|  |      cmpi.b #47,d0
    ebd4:	|  |  /-- bne.s ebe6 <getPrefsFilename+0x6e>
    ebd6:	|  |  |   move.l 20(sp),d0
    ebda:	|  |  |   addq.l #1,d0
    ebdc:	|  |  |   move.l 28(sp),d1
    ebe0:	|  |  |   add.l d0,d1
    ebe2:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
    ebe6:	|  |  \-> addq.l #1,20(sp)
    ebea:	|  \----> move.l 20(sp),d0
    ebee:	|         cmp.l 12(sp),d0
    ebf2:	\-------- blt.s ebc4 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
    ebf4:	          pea 15808 <zbuffer.c.d110ca03+0x2c2>
    ebfa:	          move.l 20(sp),-(sp)
    ebfe:	          jsr f25e <joinStrings>
    ec04:	          addq.l #8,sp
    ec06:	          move.l d0,8(sp)

	FreeVec(filename);
    ec0a:	          move.l 28(sp),4(sp)
    ec10:	          move.l 17b28 <SysBase>,d0
    ec16:	          movea.l d0,a6
    ec18:	          movea.l 4(sp),a1
    ec1c:	          jsr -690(a6)
	filename = NULL;
    ec20:	          clr.l 28(sp)
	return joined;
    ec24:	          move.l 8(sp),d0
}
    ec28:	          movea.l (sp)+,a6
    ec2a:	          lea 20(sp),sp
    ec2e:	          rts

0000ec30 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
    ec30:	             lea -28(sp),sp
    ec34:	             move.l a6,-(sp)
    ec36:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    ec38:	             move.l 17bf6 <gameSettings+0x4>,d0
    ec3e:	             move.l d0,d1
    ec40:	             addq.l #1,d1
    ec42:	             move.l d1,28(sp)
    ec46:	             clr.l 24(sp)
    ec4a:	             move.l 17b28 <SysBase>,d0
    ec50:	             movea.l d0,a6
    ec52:	             move.l 28(sp),d0
    ec56:	             move.l 24(sp),d1
    ec5a:	             jsr -684(a6)
    ec5e:	             move.l d0,20(sp)
    ec62:	             move.l 20(sp),d0
    ec66:	             move.l d0,17bea <languageTable>
    if( languageTable == 0) {
    ec6c:	             move.l 17bea <languageTable>,d0
    ec72:	         /-- bne.s ec82 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
    ec74:	         |   pea 1580d <zbuffer.c.d110ca03+0x2c7>
    ec7a:	         |   jsr 11d08 <KPrintF>
    ec80:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    ec82:	         \-> move.l 17bf6 <gameSettings+0x4>,d0
    ec88:	             move.l d0,d1
    ec8a:	             addq.l #1,d1
    ec8c:	             move.l d1,16(sp)
    ec90:	             clr.l 12(sp)
    ec94:	             move.l 17b28 <SysBase>,d0
    ec9a:	             movea.l d0,a6
    ec9c:	             move.l 16(sp),d0
    eca0:	             move.l 12(sp),d1
    eca4:	             jsr -684(a6)
    eca8:	             move.l d0,8(sp)
    ecac:	             move.l 8(sp),d0
    ecb0:	             move.l d0,17bee <languageName>
	if( languageName == 0) {
    ecb6:	             move.l 17bee <languageName>,d0
    ecbc:	         /-- bne.s eccc <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
    ecbe:	         |   pea 15843 <zbuffer.c.d110ca03+0x2fd>
    ecc4:	         |   jsr 11d08 <KPrintF>
    ecca:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    eccc:	         \-> clr.l 32(sp)
    ecd0:	   /-------- bra.s ed48 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
    ecd2:	/--|-------> tst.l 32(sp)
    ecd6:	|  |  /----- beq.s ece6 <makeLanguageTable+0xb6>
    ecd8:	|  |  |      move.l 40(sp),-(sp)
    ecdc:	|  |  |      jsr 6bc <get2bytes>
    ece2:	|  |  |      addq.l #4,sp
    ece4:	|  |  |  /-- bra.s ece8 <makeLanguageTable+0xb8>
    ece6:	|  |  \--|-> moveq #0,d0
    ece8:	|  |     \-> movea.l 17bea <languageTable>,a0
    ecee:	|  |         move.l 32(sp),d1
    ecf2:	|  |         add.l d1,d1
    ecf4:	|  |         add.l d1,d1
    ecf6:	|  |         adda.l d1,a0
    ecf8:	|  |         move.l d0,(a0)
		languageName[i] = 0;
    ecfa:	|  |         move.l 17bee <languageName>,d1
    ed00:	|  |         move.l 32(sp),d0
    ed04:	|  |         add.l d0,d0
    ed06:	|  |         add.l d0,d0
    ed08:	|  |         movea.l d1,a0
    ed0a:	|  |         adda.l d0,a0
    ed0c:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
    ed0e:	|  |         move.l 17ad6 <gameVersion>,d0
    ed14:	|  |         cmpi.l #511,d0
    ed1a:	|  |     /-- ble.s ed44 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
    ed1c:	|  |     |   move.l 17bf6 <gameSettings+0x4>,d0
    ed22:	|  |     +-- beq.s ed44 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
    ed24:	|  |     |   move.l 17bee <languageName>,d1
    ed2a:	|  |     |   move.l 32(sp),d0
    ed2e:	|  |     |   add.l d0,d0
    ed30:	|  |     |   add.l d0,d0
    ed32:	|  |     |   movea.l d1,a2
    ed34:	|  |     |   adda.l d0,a2
    ed36:	|  |     |   move.l 40(sp),-(sp)
    ed3a:	|  |     |   jsr b02 <readString>
    ed40:	|  |     |   addq.l #4,sp
    ed42:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    ed44:	|  |     \-> addq.l #1,32(sp)
    ed48:	|  \-------> move.l 17bf6 <gameSettings+0x4>,d0
    ed4e:	|            cmp.l 32(sp),d0
    ed52:	\----------- bcc.w ecd2 <makeLanguageTable+0xa2>
		}
	}
}
    ed56:	             nop
    ed58:	             nop
    ed5a:	             movea.l (sp)+,a2
    ed5c:	             movea.l (sp)+,a6
    ed5e:	             lea 28(sp),sp
    ed62:	             rts

0000ed64 <readIniFile>:

void readIniFile (char * filename) {
    ed64:	                      lea -564(sp),sp
    ed68:	                      move.l a6,-(sp)
    ed6a:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
    ed6c:	                      move.l 576(sp),-(sp)
    ed70:	                      jsr b8 <copyString>
    ed76:	                      addq.l #4,sp
    ed78:	                      move.l d0,-(sp)
    ed7a:	                      jsr eb78 <getPrefsFilename>
    ed80:	                      addq.l #4,sp
    ed82:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
    ed86:	                      move.l 562(sp),558(sp)
    ed8c:	                      move.l #1005,554(sp)
    ed94:	                      move.l 17b30 <DOSBase>,d0
    ed9a:	                      movea.l d0,a6
    ed9c:	                      move.l 558(sp),d1
    eda0:	                      move.l 554(sp),d2
    eda4:	                      jsr -30(a6)
    eda8:	                      move.l d0,550(sp)
    edac:	                      move.l 550(sp),d0
    edb0:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
    edb4:	                      clr.l 17bf2 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
    edba:	                      move.w #1,17bfa <gameSettings+0x8>
	gameSettings.refreshRate = 0;
    edc2:	                      clr.l 17bfc <gameSettings+0xa>
	gameSettings.antiAlias = 1;
    edc8:	                      moveq #1,d0
    edca:	                      move.l d0,17c00 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
    edd0:	                      clr.w 17c04 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
    edd6:	                      clr.w 17c06 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
    eddc:	                      clr.w 17c08 <gameSettings+0x16>

	FreeVec(langName);
    ede2:	                      move.l 562(sp),542(sp)
    ede8:	                      move.l 17b28 <SysBase>,d0
    edee:	                      movea.l d0,a6
    edf0:	                      movea.l 542(sp),a1
    edf4:	                      jsr -690(a6)
	langName = NULL;
    edf8:	                      clr.l 562(sp)

	if (fp) {
    edfc:	                      tst.l 546(sp)
    ee00:	/-------------------- beq.w f0de <readIniFile+0x37a>
		char lineSoFar[257] = "";
    ee04:	|                     move.l sp,d0
    ee06:	|                     addi.l #265,d0
    ee0c:	|                     move.l #257,d1
    ee12:	|                     move.l d1,-(sp)
    ee14:	|                     clr.l -(sp)
    ee16:	|                     move.l d0,-(sp)
    ee18:	|                     jsr 11c8c <memset>
    ee1e:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
    ee22:	|                     move.l sp,d0
    ee24:	|                     addq.l #8,d0
    ee26:	|                     move.l #257,d1
    ee2c:	|                     move.l d1,-(sp)
    ee2e:	|                     clr.l -(sp)
    ee30:	|                     move.l d0,-(sp)
    ee32:	|                     jsr 11c8c <memset>
    ee38:	|                     lea 12(sp),sp
		unsigned char here = 0;
    ee3c:	|                     clr.b 571(sp)
		char readChar = ' ';
    ee40:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
    ee46:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
    ee4c:	|                     clr.w 566(sp)
		LONG tmp = 0;
    ee50:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
    ee54:	|  /----------------> move.l 546(sp),534(sp)
    ee5a:	|  |                  move.l 17b30 <DOSBase>,d0
    ee60:	|  |                  movea.l d0,a6
    ee62:	|  |                  move.l 534(sp),d1
    ee66:	|  |                  jsr -306(a6)
    ee6a:	|  |                  move.l d0,530(sp)
    ee6e:	|  |                  move.l 530(sp),d0
    ee72:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
    ee76:	|  |                  moveq #-1,d1
    ee78:	|  |                  cmp.l 538(sp),d1
    ee7c:	|  |           /----- bne.s ee8a <readIniFile+0x126>
				readChar = '\n';
    ee7e:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
    ee84:	|  |           |      clr.w 568(sp)
    ee88:	|  |           |  /-- bra.s ee90 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
    ee8a:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
    ee90:	|  |              \-> move.b 570(sp),d0
    ee94:	|  |                  ext.w d0
    ee96:	|  |                  movea.w d0,a0
    ee98:	|  |                  moveq #61,d0
    ee9a:	|  |                  cmp.l a0,d0
    ee9c:	|  |     /----------- beq.w f046 <readIniFile+0x2e2>
    eea0:	|  |     |            moveq #61,d1
    eea2:	|  |     |            cmp.l a0,d1
    eea4:	|  |  /--|----------- blt.w f052 <readIniFile+0x2ee>
    eea8:	|  |  |  |            moveq #10,d0
    eeaa:	|  |  |  |            cmp.l a0,d0
    eeac:	|  |  |  |        /-- beq.s eeb6 <readIniFile+0x152>
    eeae:	|  |  |  |        |   moveq #13,d1
    eeb0:	|  |  |  |        |   cmp.l a0,d1
    eeb2:	|  |  +--|--------|-- bne.w f052 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
    eeb6:	|  |  |  |        \-> tst.w 566(sp)
    eeba:	|  |  |  |     /----- beq.w f034 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
    eebe:	|  |  |  |     |      pea 15877 <zbuffer.c.d110ca03+0x331>
    eec4:	|  |  |  |     |      move.l sp,d0
    eec6:	|  |  |  |     |      addi.l #269,d0
    eecc:	|  |  |  |     |      move.l d0,-(sp)
    eece:	|  |  |  |     |      jsr f1de <strcmp>
    eed4:	|  |  |  |     |      addq.l #8,sp
    eed6:	|  |  |  |     |      tst.l d0
    eed8:	|  |  |  |     |  /-- bne.s eef2 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
    eeda:	|  |  |  |     |  |   move.l sp,d0
    eedc:	|  |  |  |     |  |   addq.l #8,d0
    eede:	|  |  |  |     |  |   move.l d0,-(sp)
    eee0:	|  |  |  |     |  |   jsr f0ea <stringToInt>
    eee6:	|  |  |  |     |  |   addq.l #4,sp
    eee8:	|  |  |  |     |  |   move.l d0,17bf2 <gameSettings>
    eeee:	|  |  |  |     +--|-- bra.w f034 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
    eef2:	|  |  |  |     |  \-> pea 15880 <zbuffer.c.d110ca03+0x33a>
    eef8:	|  |  |  |     |      move.l sp,d0
    eefa:	|  |  |  |     |      addi.l #269,d0
    ef00:	|  |  |  |     |      move.l d0,-(sp)
    ef02:	|  |  |  |     |      jsr f1de <strcmp>
    ef08:	|  |  |  |     |      addq.l #8,sp
    ef0a:	|  |  |  |     |      tst.l d0
    ef0c:	|  |  |  |     |  /-- bne.s ef32 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
    ef0e:	|  |  |  |     |  |   move.l sp,d0
    ef10:	|  |  |  |     |  |   addq.l #8,d0
    ef12:	|  |  |  |     |  |   move.l d0,-(sp)
    ef14:	|  |  |  |     |  |   jsr f0ea <stringToInt>
    ef1a:	|  |  |  |     |  |   addq.l #4,sp
    ef1c:	|  |  |  |     |  |   tst.l d0
    ef1e:	|  |  |  |     |  |   seq d0
    ef20:	|  |  |  |     |  |   neg.b d0
    ef22:	|  |  |  |     |  |   move.b d0,d0
    ef24:	|  |  |  |     |  |   andi.w #255,d0
    ef28:	|  |  |  |     |  |   move.w d0,17bfa <gameSettings+0x8>
    ef2e:	|  |  |  |     +--|-- bra.w f034 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
    ef32:	|  |  |  |     |  \-> pea 15887 <zbuffer.c.d110ca03+0x341>
    ef38:	|  |  |  |     |      move.l sp,d0
    ef3a:	|  |  |  |     |      addi.l #269,d0
    ef40:	|  |  |  |     |      move.l d0,-(sp)
    ef42:	|  |  |  |     |      jsr f1de <strcmp>
    ef48:	|  |  |  |     |      addq.l #8,sp
    ef4a:	|  |  |  |     |      tst.l d0
    ef4c:	|  |  |  |     |  /-- bne.s ef66 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
    ef4e:	|  |  |  |     |  |   move.l sp,d0
    ef50:	|  |  |  |     |  |   addq.l #8,d0
    ef52:	|  |  |  |     |  |   move.l d0,-(sp)
    ef54:	|  |  |  |     |  |   jsr f0ea <stringToInt>
    ef5a:	|  |  |  |     |  |   addq.l #4,sp
    ef5c:	|  |  |  |     |  |   move.l d0,17bfc <gameSettings+0xa>
    ef62:	|  |  |  |     +--|-- bra.w f034 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
    ef66:	|  |  |  |     |  \-> pea 1588f <zbuffer.c.d110ca03+0x349>
    ef6c:	|  |  |  |     |      move.l sp,d0
    ef6e:	|  |  |  |     |      addi.l #269,d0
    ef74:	|  |  |  |     |      move.l d0,-(sp)
    ef76:	|  |  |  |     |      jsr f1de <strcmp>
    ef7c:	|  |  |  |     |      addq.l #8,sp
    ef7e:	|  |  |  |     |      tst.l d0
    ef80:	|  |  |  |     |  /-- bne.s ef9a <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
    ef82:	|  |  |  |     |  |   move.l sp,d0
    ef84:	|  |  |  |     |  |   addq.l #8,d0
    ef86:	|  |  |  |     |  |   move.l d0,-(sp)
    ef88:	|  |  |  |     |  |   jsr f0ea <stringToInt>
    ef8e:	|  |  |  |     |  |   addq.l #4,sp
    ef90:	|  |  |  |     |  |   move.l d0,17c00 <gameSettings+0xe>
    ef96:	|  |  |  |     +--|-- bra.w f034 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
    ef9a:	|  |  |  |     |  \-> pea 15899 <zbuffer.c.d110ca03+0x353>
    efa0:	|  |  |  |     |      move.l sp,d0
    efa2:	|  |  |  |     |      addi.l #269,d0
    efa8:	|  |  |  |     |      move.l d0,-(sp)
    efaa:	|  |  |  |     |      jsr f1de <strcmp>
    efb0:	|  |  |  |     |      addq.l #8,sp
    efb2:	|  |  |  |     |      tst.l d0
    efb4:	|  |  |  |     |  /-- bne.s efce <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
    efb6:	|  |  |  |     |  |   move.l sp,d0
    efb8:	|  |  |  |     |  |   addq.l #8,d0
    efba:	|  |  |  |     |  |   move.l d0,-(sp)
    efbc:	|  |  |  |     |  |   jsr f0ea <stringToInt>
    efc2:	|  |  |  |     |  |   addq.l #4,sp
    efc4:	|  |  |  |     |  |   move.l d0,d0
    efc6:	|  |  |  |     |  |   move.w d0,17c04 <gameSettings+0x12>
    efcc:	|  |  |  |     +--|-- bra.s f034 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
    efce:	|  |  |  |     |  \-> pea 158a5 <zbuffer.c.d110ca03+0x35f>
    efd4:	|  |  |  |     |      move.l sp,d0
    efd6:	|  |  |  |     |      addi.l #269,d0
    efdc:	|  |  |  |     |      move.l d0,-(sp)
    efde:	|  |  |  |     |      jsr f1de <strcmp>
    efe4:	|  |  |  |     |      addq.l #8,sp
    efe6:	|  |  |  |     |      tst.l d0
    efe8:	|  |  |  |     |  /-- bne.s f002 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
    efea:	|  |  |  |     |  |   move.l sp,d0
    efec:	|  |  |  |     |  |   addq.l #8,d0
    efee:	|  |  |  |     |  |   move.l d0,-(sp)
    eff0:	|  |  |  |     |  |   jsr f0ea <stringToInt>
    eff6:	|  |  |  |     |  |   addq.l #4,sp
    eff8:	|  |  |  |     |  |   move.l d0,d0
    effa:	|  |  |  |     |  |   move.w d0,17c06 <gameSettings+0x14>
    f000:	|  |  |  |     +--|-- bra.s f034 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
    f002:	|  |  |  |     |  \-> pea 158b3 <zbuffer.c.d110ca03+0x36d>
    f008:	|  |  |  |     |      move.l sp,d0
    f00a:	|  |  |  |     |      addi.l #269,d0
    f010:	|  |  |  |     |      move.l d0,-(sp)
    f012:	|  |  |  |     |      jsr f1de <strcmp>
    f018:	|  |  |  |     |      addq.l #8,sp
    f01a:	|  |  |  |     |      tst.l d0
    f01c:	|  |  |  |     +----- bne.s f034 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
    f01e:	|  |  |  |     |      move.l sp,d0
    f020:	|  |  |  |     |      addq.l #8,d0
    f022:	|  |  |  |     |      move.l d0,-(sp)
    f024:	|  |  |  |     |      jsr f0ea <stringToInt>
    f02a:	|  |  |  |     |      addq.l #4,sp
    f02c:	|  |  |  |     |      move.l d0,d0
    f02e:	|  |  |  |     |      move.w d0,17c08 <gameSettings+0x16>
					}
				}
				here = 0;
    f034:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
    f038:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
    f03c:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
    f040:	|  |  |  |            clr.b 8(sp)
				break;
    f044:	|  |  |  |  /-------- bra.s f0bc <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
    f046:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
    f04c:	|  |  |     |         clr.b 571(sp)
				break;
    f050:	|  |  |     +-------- bra.s f0bc <readIniFile+0x358>

				default:
				if (doingSecond) {
    f052:	|  |  \-----|-------> tst.w 566(sp)
    f056:	|  |        |  /----- beq.s f08a <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
    f058:	|  |        |  |      move.b 571(sp),d0
    f05c:	|  |        |  |      move.b d0,d1
    f05e:	|  |        |  |      addq.b #1,d1
    f060:	|  |        |  |      move.b d1,571(sp)
    f064:	|  |        |  |      move.b d0,d0
    f066:	|  |        |  |      andi.l #255,d0
    f06c:	|  |        |  |      lea 572(sp),a0
    f070:	|  |        |  |      adda.l d0,a0
    f072:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
    f078:	|  |        |  |      moveq #0,d0
    f07a:	|  |        |  |      move.b 571(sp),d0
    f07e:	|  |        |  |      lea 572(sp),a0
    f082:	|  |        |  |      adda.l d0,a0
    f084:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
    f088:	|  |        |  |  /-- bra.s f0ba <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
    f08a:	|  |        |  \--|-> move.b 571(sp),d0
    f08e:	|  |        |     |   move.b d0,d1
    f090:	|  |        |     |   addq.b #1,d1
    f092:	|  |        |     |   move.b d1,571(sp)
    f096:	|  |        |     |   move.b d0,d0
    f098:	|  |        |     |   andi.l #255,d0
    f09e:	|  |        |     |   lea 572(sp),a0
    f0a2:	|  |        |     |   adda.l d0,a0
    f0a4:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
    f0aa:	|  |        |     |   moveq #0,d0
    f0ac:	|  |        |     |   move.b 571(sp),d0
    f0b0:	|  |        |     |   lea 572(sp),a0
    f0b4:	|  |        |     |   adda.l d0,a0
    f0b6:	|  |        |     |   clr.b -307(a0)
				break;
    f0ba:	|  |        |     \-> nop
			}
		} while (keepGoing);
    f0bc:	|  |        \-------> tst.w 568(sp)
    f0c0:	|  \----------------- bne.w ee54 <readIniFile+0xf0>

		Close(fp);
    f0c4:	|                     move.l 546(sp),526(sp)
    f0ca:	|                     move.l 17b30 <DOSBase>,d0
    f0d0:	|                     movea.l d0,a6
    f0d2:	|                     move.l 526(sp),d1
    f0d6:	|                     jsr -36(a6)
    f0da:	|                     move.l d0,522(sp)
	}
}
    f0de:	\-------------------> nop
    f0e0:	                      move.l (sp)+,d2
    f0e2:	                      movea.l (sp)+,a6
    f0e4:	                      lea 564(sp),sp
    f0e8:	                      rts

0000f0ea <stringToInt>:

unsigned int stringToInt (char * s) {
    f0ea:	             subq.l #8,sp
	int i = 0;
    f0ec:	             clr.l 4(sp)
	BOOL negative = FALSE;
    f0f0:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
    f0f4:	/----------> movea.l 12(sp),a0
    f0f8:	|            move.b (a0),d0
    f0fa:	|            cmpi.b #47,d0
    f0fe:	|        /-- ble.s f136 <stringToInt+0x4c>
    f100:	|        |   movea.l 12(sp),a0
    f104:	|        |   move.b (a0),d0
    f106:	|        |   cmpi.b #57,d0
    f10a:	|        +-- bgt.s f136 <stringToInt+0x4c>
			i *= 10;
    f10c:	|        |   move.l 4(sp),d1
    f110:	|        |   move.l d1,d0
    f112:	|        |   add.l d0,d0
    f114:	|        |   add.l d0,d0
    f116:	|        |   add.l d1,d0
    f118:	|        |   add.l d0,d0
    f11a:	|        |   move.l d0,4(sp)
			i += *s - '0';
    f11e:	|        |   movea.l 12(sp),a0
    f122:	|        |   move.b (a0),d0
    f124:	|        |   ext.w d0
    f126:	|        |   movea.w d0,a0
    f128:	|        |   moveq #-48,d0
    f12a:	|        |   add.l a0,d0
    f12c:	|        |   add.l d0,4(sp)
			s ++;
    f130:	|        |   addq.l #1,12(sp)
    f134:	|  /-----|-- bra.s f16e <stringToInt+0x84>
		} else if (*s == '-') {
    f136:	|  |     \-> movea.l 12(sp),a0
    f13a:	|  |         move.b (a0),d0
    f13c:	|  |         cmpi.b #45,d0
    f140:	|  |     /-- bne.s f15a <stringToInt+0x70>
			negative = ! negative;
    f142:	|  |     |   tst.w 2(sp)
    f146:	|  |     |   seq d0
    f148:	|  |     |   neg.b d0
    f14a:	|  |     |   move.b d0,d0
    f14c:	|  |     |   andi.w #255,d0
    f150:	|  |     |   move.w d0,2(sp)
			s++;
    f154:	|  |     |   addq.l #1,12(sp)
    f158:	+--|-----|-- bra.s f0f4 <stringToInt+0xa>
		} else {
			if (negative)
    f15a:	|  |     \-> tst.w 2(sp)
    f15e:	|  |     /-- beq.s f168 <stringToInt+0x7e>
				return -i;
    f160:	|  |     |   move.l 4(sp),d0
    f164:	|  |     |   neg.l d0
    f166:	|  |  /--|-- bra.s f170 <stringToInt+0x86>
			return i;
    f168:	|  |  |  \-> move.l 4(sp),d0
    f16c:	|  |  +----- bra.s f170 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
    f16e:	\--\--|----X bra.s f0f4 <stringToInt+0xa>
		}
	}
    f170:	      \----> addq.l #8,sp
    f172:	             rts

0000f174 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
    f174:	    lea -28(sp),sp
    f178:	    move.l a6,-(sp)
    f17a:	    move.l d2,-(sp)
	BPTR tester;
	BYTE retval = 0;
    f17c:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
    f180:	    move.l 40(sp),30(sp)
    f186:	    move.l #1005,26(sp)
    f18e:	    move.l 17b30 <DOSBase>,d0
    f194:	    movea.l d0,a6
    f196:	    move.l 30(sp),d1
    f19a:	    move.l 26(sp),d2
    f19e:	    jsr -30(a6)
    f1a2:	    move.l d0,22(sp)
    f1a6:	    move.l 22(sp),d0
    f1aa:	    move.l d0,18(sp)
	if (tester) {
    f1ae:	/-- beq.s f1d0 <fileExists+0x5c>
		retval = 1;
    f1b0:	|   move.b #1,35(sp)
		Close(tester);
    f1b6:	|   move.l 18(sp),14(sp)
    f1bc:	|   move.l 17b30 <DOSBase>,d0
    f1c2:	|   movea.l d0,a6
    f1c4:	|   move.l 14(sp),d1
    f1c8:	|   jsr -36(a6)
    f1cc:	|   move.l d0,10(sp)
	}
	return retval;
    f1d0:	\-> move.b 35(sp),d0
    f1d4:	    move.l (sp)+,d2
    f1d6:	    movea.l (sp)+,a6
    f1d8:	    lea 28(sp),sp
    f1dc:	    rts

0000f1de <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
    f1de:	   /-- bra.s f1e8 <strcmp+0xa>
    {
        s1++;
    f1e0:	/--|-> addq.l #1,4(sp)
        s2++;
    f1e4:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
    f1e8:	|  \-> movea.l 4(sp),a0
    f1ec:	|      move.b (a0),d0
    f1ee:	|  /-- beq.s f200 <strcmp+0x22>
    f1f0:	|  |   movea.l 4(sp),a0
    f1f4:	|  |   move.b (a0),d1
    f1f6:	|  |   movea.l 8(sp),a0
    f1fa:	|  |   move.b (a0),d0
    f1fc:	|  |   cmp.b d1,d0
    f1fe:	\--|-- beq.s f1e0 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
    f200:	   \-> movea.l 4(sp),a0
    f204:	       move.b (a0),d0
    f206:	       moveq #0,d1
    f208:	       move.b d0,d1
    f20a:	       movea.l 8(sp),a0
    f20e:	       move.b (a0),d0
    f210:	       move.b d0,d0
    f212:	       andi.l #255,d0
    f218:	       sub.l d0,d1
    f21a:	       move.l d1,d0
}
    f21c:	       rts

0000f21e <strlen>:

long unsigned int strlen (const char *s) 
{  
    f21e:	       subq.l #4,sp
	long unsigned int i = 0;
    f220:	       clr.l (sp)
	while(s[i]) i++; 
    f222:	   /-- bra.s f226 <strlen+0x8>
    f224:	/--|-> addq.l #1,(sp)
    f226:	|  \-> movea.l 8(sp),a0
    f22a:	|      adda.l (sp),a0
    f22c:	|      move.b (a0),d0
    f22e:	\----- bne.s f224 <strlen+0x6>
	return(i);
    f230:	       move.l (sp),d0
}
    f232:	       addq.l #4,sp
    f234:	       rts

0000f236 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
    f236:	    nop
    f238:	/-> move.l 8(sp),d0
    f23c:	|   move.l d0,d1
    f23e:	|   addq.l #1,d1
    f240:	|   move.l d1,8(sp)
    f244:	|   movea.l 4(sp),a0
    f248:	|   lea 1(a0),a1
    f24c:	|   move.l a1,4(sp)
    f250:	|   movea.l d0,a1
    f252:	|   move.b (a1),d0
    f254:	|   move.b d0,(a0)
    f256:	|   move.b (a0),d0
    f258:	\-- bne.s f238 <strcpy+0x2>
}
    f25a:	    nop
    f25c:	    rts

0000f25e <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
    f25e:	    lea -20(sp),sp
    f262:	    move.l a6,-(sp)
    f264:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
    f266:	    move.l 32(sp),-(sp)
    f26a:	    jsr f21e <strlen>
    f270:	    addq.l #4,sp
    f272:	    move.l d0,d2
    f274:	    move.l 36(sp),-(sp)
    f278:	    jsr f21e <strlen>
    f27e:	    addq.l #4,sp
    f280:	    add.l d2,d0
    f282:	    move.l d0,d1
    f284:	    addq.l #1,d1
    f286:	    move.l d1,20(sp)
    f28a:	    clr.l 16(sp)
    f28e:	    move.l 17b28 <SysBase>,d0
    f294:	    movea.l d0,a6
    f296:	    move.l 20(sp),d0
    f29a:	    move.l 16(sp),d1
    f29e:	    jsr -684(a6)
    f2a2:	    move.l d0,12(sp)
    f2a6:	    move.l 12(sp),d0
    f2aa:	    move.l d0,8(sp)
	char * t = newString;
    f2ae:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
    f2b4:	    nop
    f2b6:	/-> move.l 32(sp),d0
    f2ba:	|   move.l d0,d1
    f2bc:	|   addq.l #1,d1
    f2be:	|   move.l d1,32(sp)
    f2c2:	|   movea.l 24(sp),a0
    f2c6:	|   lea 1(a0),a1
    f2ca:	|   move.l a1,24(sp)
    f2ce:	|   movea.l d0,a1
    f2d0:	|   move.b (a1),d0
    f2d2:	|   move.b d0,(a0)
    f2d4:	|   move.b (a0),d0
    f2d6:	\-- bne.s f2b6 <joinStrings+0x58>
	t--;
    f2d8:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
    f2dc:	    nop
    f2de:	/-> move.l 36(sp),d0
    f2e2:	|   move.l d0,d1
    f2e4:	|   addq.l #1,d1
    f2e6:	|   move.l d1,36(sp)
    f2ea:	|   movea.l 24(sp),a0
    f2ee:	|   lea 1(a0),a1
    f2f2:	|   move.l a1,24(sp)
    f2f6:	|   movea.l d0,a1
    f2f8:	|   move.b (a1),d0
    f2fa:	|   move.b d0,(a0)
    f2fc:	|   move.b (a0),d0
    f2fe:	\-- bne.s f2de <joinStrings+0x80>

	return newString;
    f300:	    move.l 8(sp),d0
}
    f304:	    move.l (sp)+,d2
    f306:	    movea.l (sp)+,a6
    f308:	    lea 20(sp),sp
    f30c:	    rts

0000f30e <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
    f30e:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
    f312:	       moveq #10,d0
    f314:	       cmp.l 28(sp),d0
    f318:	   /-- bne.s f336 <itoa+0x28>
    f31a:	   |   tst.l 20(sp)
    f31e:	   +-- bge.s f336 <itoa+0x28>
        *str++ = '-';
    f320:	   |   move.l 24(sp),d0
    f324:	   |   move.l d0,d1
    f326:	   |   addq.l #1,d1
    f328:	   |   move.l d1,24(sp)
    f32c:	   |   movea.l d0,a0
    f32e:	   |   move.b #45,(a0)
        value *= -1;
    f332:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
    f336:	   \-> move.l 24(sp),12(sp)
    f33c:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
    f342:	   /-> move.l 20(sp),d0
    f346:	   |   move.l 28(sp),-(sp)
    f34a:	   |   move.l d0,-(sp)
    f34c:	   |   jsr 12766 <__modsi3>
    f352:	   |   addq.l #8,sp
    f354:	   |   movea.l d0,a1
    f356:	   |   move.l 12(sp),d0
    f35a:	   |   move.l d0,d1
    f35c:	   |   addq.l #1,d1
    f35e:	   |   move.l d1,12(sp)
    f362:	   |   lea 158bd <zbuffer.c.d110ca03+0x377>,a0
    f368:	   |   move.b (0,a1,a0.l),d1
    f36c:	   |   movea.l d0,a0
    f36e:	   |   move.b d1,(a0)
        value /= base;
    f370:	   |   move.l 28(sp),-(sp)
    f374:	   |   move.l 24(sp),-(sp)
    f378:	   |   jsr 12738 <__divsi3>
    f37e:	   |   addq.l #8,sp
    f380:	   |   move.l d0,20(sp)
    } while (value);
    f384:	   \-- bne.s f342 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
    f386:	       move.l 12(sp),d0
    f38a:	       move.l d0,d1
    f38c:	       subq.l #1,d1
    f38e:	       move.l d1,12(sp)
    f392:	       movea.l d0,a0
    f394:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
    f396:	       move.l 4(sp),8(sp)
    f39c:	   /-- bra.s f3c2 <itoa+0xb4>
        char temp = *low;
    f39e:	/--|-> movea.l 8(sp),a0
    f3a2:	|  |   move.b (a0),3(sp)
        *low = *ptr;
    f3a6:	|  |   movea.l 12(sp),a0
    f3aa:	|  |   move.b (a0),d0
    f3ac:	|  |   movea.l 8(sp),a0
    f3b0:	|  |   move.b d0,(a0)
        *ptr = temp;
    f3b2:	|  |   movea.l 12(sp),a0
    f3b6:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
    f3ba:	|  |   addq.l #1,8(sp)
    f3be:	|  |   subq.l #1,12(sp)
    f3c2:	|  \-> move.l 8(sp),d0
    f3c6:	|      cmp.l 12(sp),d0
    f3ca:	\----- bcs.s f39e <itoa+0x90>
    }
    return rc;
    f3cc:	       move.l 4(sp),d0
}
    f3d0:	       lea 16(sp),sp
    f3d4:	       rts

0000f3d6 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
    f3d6:	                            lea -40(sp),sp
    f3da:	                            move.l d2,-(sp)
    char* s = str;
    f3dc:	                            move.l 48(sp),40(sp)
    const char* p = format;
    f3e2:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
    f3e8:	   /----------------------- bra.w f51c <vsprintf2+0x146>
        if (*p == '%') {
    f3ec:	/--|----------------------> movea.l 36(sp),a0
    f3f0:	|  |                        move.b (a0),d0
    f3f2:	|  |                        cmpi.b #37,d0
    f3f6:	|  |  /-------------------- bne.w f502 <vsprintf2+0x12c>
            switch (*++p) {
    f3fa:	|  |  |                     addq.l #1,36(sp)
    f3fe:	|  |  |                     movea.l 36(sp),a0
    f402:	|  |  |                     move.b (a0),d0
    f404:	|  |  |                     ext.w d0
    f406:	|  |  |                     movea.w d0,a0
    f408:	|  |  |                     moveq #115,d0
    f40a:	|  |  |                     cmp.l a0,d0
    f40c:	|  |  |           /-------- beq.s f484 <vsprintf2+0xae>
    f40e:	|  |  |           |         moveq #115,d1
    f410:	|  |  |           |         cmp.l a0,d1
    f412:	|  |  |  /--------|-------- blt.w f4ea <vsprintf2+0x114>
    f416:	|  |  |  |        |         moveq #99,d2
    f418:	|  |  |  |        |         cmp.l a0,d2
    f41a:	|  |  |  |  /-----|-------- beq.w f4c2 <vsprintf2+0xec>
    f41e:	|  |  |  |  |     |         moveq #100,d0
    f420:	|  |  |  |  |     |         cmp.l a0,d0
    f422:	|  |  |  +--|-----|-------- bne.w f4ea <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
    f426:	|  |  |  |  |     |         addq.l #4,56(sp)
    f42a:	|  |  |  |  |     |         movea.l 56(sp),a0
    f42e:	|  |  |  |  |     |         move.l (a0),d0
    f430:	|  |  |  |  |     |         move.l d0,d1
    f432:	|  |  |  |  |     |         subq.l #1,d1
    f434:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
    f438:	|  |  |  |  |     |         pea a <_start+0xa>
    f43c:	|  |  |  |  |     |         lea 8(sp),a0
    f440:	|  |  |  |  |     |         move.l a0,-(sp)
    f442:	|  |  |  |  |     |         move.l 32(sp),-(sp)
    f446:	|  |  |  |  |     |         jsr f30e <itoa>
    f44c:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
    f450:	|  |  |  |  |     |         lea 44(sp),a0
    f454:	|  |  |  |  |     |         lea -40(a0),a0
    f458:	|  |  |  |  |     |         move.l a0,28(sp)
    f45c:	|  |  |  |  |     |     /-- bra.s f478 <vsprintf2+0xa2>
                        *s++ = *b;
    f45e:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
    f462:	|  |  |  |  |     |  |  |   move.l d0,d1
    f464:	|  |  |  |  |     |  |  |   addq.l #1,d1
    f466:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
    f46a:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
    f46e:	|  |  |  |  |     |  |  |   move.b (a0),d1
    f470:	|  |  |  |  |     |  |  |   movea.l d0,a0
    f472:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
    f474:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
    f478:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
    f47c:	|  |  |  |  |     |  |      move.b (a0),d0
    f47e:	|  |  |  |  |     |  \----- bne.s f45e <vsprintf2+0x88>
                    }
                    break;
    f480:	|  |  |  |  |  /--|-------- bra.w f518 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
    f484:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
    f488:	|  |  |  |  |  |            movea.l 56(sp),a0
    f48c:	|  |  |  |  |  |            move.l (a0),d0
    f48e:	|  |  |  |  |  |            move.l d0,d1
    f490:	|  |  |  |  |  |            subq.l #1,d1
    f492:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
    f496:	|  |  |  |  |  |        /-- bra.s f4b8 <vsprintf2+0xe2>
                        *s++ = *sval++;
    f498:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
    f49c:	|  |  |  |  |  |     |  |   move.l d1,d2
    f49e:	|  |  |  |  |  |     |  |   addq.l #1,d2
    f4a0:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
    f4a4:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
    f4a8:	|  |  |  |  |  |     |  |   move.l d0,d2
    f4aa:	|  |  |  |  |  |     |  |   addq.l #1,d2
    f4ac:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
    f4b0:	|  |  |  |  |  |     |  |   movea.l d1,a0
    f4b2:	|  |  |  |  |  |     |  |   move.b (a0),d1
    f4b4:	|  |  |  |  |  |     |  |   movea.l d0,a0
    f4b6:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
    f4b8:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
    f4bc:	|  |  |  |  |  |     |      move.b (a0),d0
    f4be:	|  |  |  |  |  |     \----- bne.s f498 <vsprintf2+0xc2>
                    }
                    break;
    f4c0:	|  |  |  |  |  +----------- bra.s f518 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
    f4c2:	|  |  |  |  \--|----------> addq.l #4,56(sp)
    f4c6:	|  |  |  |     |            movea.l 56(sp),a0
    f4ca:	|  |  |  |     |            move.l (a0),d0
    f4cc:	|  |  |  |     |            move.l d0,d1
    f4ce:	|  |  |  |     |            subq.l #1,d1
    f4d0:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
    f4d4:	|  |  |  |     |            move.l 40(sp),d0
    f4d8:	|  |  |  |     |            move.l d0,d2
    f4da:	|  |  |  |     |            addq.l #1,d2
    f4dc:	|  |  |  |     |            move.l d2,40(sp)
    f4e0:	|  |  |  |     |            move.l 24(sp),d1
    f4e4:	|  |  |  |     |            movea.l d0,a0
    f4e6:	|  |  |  |     |            move.b d1,(a0)
                    break;
    f4e8:	|  |  |  |     +----------- bra.s f518 <vsprintf2+0x142>
                default:
                    *s++ = *p;
    f4ea:	|  |  |  \-----|----------> move.l 40(sp),d0
    f4ee:	|  |  |        |            move.l d0,d1
    f4f0:	|  |  |        |            addq.l #1,d1
    f4f2:	|  |  |        |            move.l d1,40(sp)
    f4f6:	|  |  |        |            movea.l 36(sp),a0
    f4fa:	|  |  |        |            move.b (a0),d1
    f4fc:	|  |  |        |            movea.l d0,a0
    f4fe:	|  |  |        |            move.b d1,(a0)
                    break;
    f500:	|  |  |        +----------- bra.s f518 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
    f502:	|  |  \--------|----------> move.l 40(sp),d0
    f506:	|  |           |            move.l d0,d1
    f508:	|  |           |            addq.l #1,d1
    f50a:	|  |           |            move.l d1,40(sp)
    f50e:	|  |           |            movea.l 36(sp),a0
    f512:	|  |           |            move.b (a0),d1
    f514:	|  |           |            movea.l d0,a0
    f516:	|  |           |            move.b d1,(a0)
        }
        p++;
    f518:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
    f51c:	|  \----------------------> movea.l 36(sp),a0
    f520:	|                           move.b (a0),d0
    f522:	\-------------------------- bne.w f3ec <vsprintf2+0x16>
    }
    *s = '\0';
    f526:	                            movea.l 40(sp),a0
    f52a:	                            clr.b (a0)
    return s - str;
    f52c:	                            move.l 40(sp),d0
    f530:	                            sub.l 48(sp),d0
}
    f534:	                            move.l (sp)+,d2
    f536:	                            lea 40(sp),sp
    f53a:	                            rts

0000f53c <sprintf>:

int sprintf(char* str, const char* format, ...) {
    f53c:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
    f53e:	moveq #16,d0
    f540:	add.l sp,d0
    f542:	move.l d0,d1
    f544:	addq.l #4,d1
    f546:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
    f54a:	move.l 16(sp),d0
    f54e:	move.l 4(sp),-(sp)
    f552:	move.l d0,-(sp)
    f554:	move.l 20(sp),-(sp)
    f558:	jsr f3d6 <vsprintf2>
    f55e:	lea 12(sp),sp
    f562:	move.l d0,(sp)
    va_end(args);
    f564:	clr.l 4(sp)

    return done;
    f568:	move.l (sp),d0
}
    f56a:	addq.l #8,sp
    f56c:	rts

0000f56e <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
    f56e:	       lea -20(sp),sp
    f572:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
    f574:	       moveq #12,d0
    f576:	       move.l d0,20(sp)
    f57a:	       clr.l 16(sp)
    f57e:	       move.l 17b28 <SysBase>,d0
    f584:	       movea.l d0,a6
    f586:	       move.l 20(sp),d0
    f58a:	       move.l 16(sp),d1
    f58e:	       jsr -684(a6)
    f592:	       move.l d0,12(sp)
    f596:	       move.l 12(sp),d0
    f59a:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
    f59e:	   /-- bne.s f5a4 <addVarToStack+0x36>
    f5a0:	   |   clr.w d0
    f5a2:	/--|-- bra.s f5ec <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
    f5a4:	|  \-> move.l 8(sp),d0
    f5a8:	|      move.l d0,-(sp)
    f5aa:	|      move.l 32(sp),-(sp)
    f5ae:	|      jsr 100d0 <copyMain>
    f5b4:	|      addq.l #8,sp
    f5b6:	|      tst.w d0
    f5b8:	|  /-- bne.s f5d4 <addVarToStack+0x66>
        FreeVec(newStack);
    f5ba:	|  |   move.l 8(sp),4(sp)
    f5c0:	|  |   move.l 17b28 <SysBase>,d0
    f5c6:	|  |   movea.l d0,a6
    f5c8:	|  |   movea.l 4(sp),a1
    f5cc:	|  |   jsr -690(a6)
        return FALSE;
    f5d0:	|  |   clr.w d0
    f5d2:	+--|-- bra.s f5ec <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
    f5d4:	|  \-> movea.l 32(sp),a0
    f5d8:	|      move.l (a0),d0
    f5da:	|      movea.l 8(sp),a0
    f5de:	|      move.l d0,8(a0)
    *thisStack = newStack;
    f5e2:	|      movea.l 32(sp),a0
    f5e6:	|      move.l 8(sp),(a0)
    return TRUE;
    f5ea:	|      moveq #1,d0
}
    f5ec:	\----> movea.l (sp)+,a6
    f5ee:	       lea 20(sp),sp
    f5f2:	       rts

0000f5f4 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
    f5f4:	       lea -16(sp),sp
    f5f8:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
    f5fa:	       moveq #12,d0
    f5fc:	       move.l d0,16(sp)
    f600:	       clr.l 12(sp)
    f604:	       move.l 17b28 <SysBase>,d0
    f60a:	       movea.l d0,a6
    f60c:	       move.l 16(sp),d0
    f610:	       move.l 12(sp),d1
    f614:	       jsr -684(a6)
    f618:	       move.l d0,8(sp)
    f61c:	       move.l 8(sp),d0
    f620:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
    f624:	   /-- bne.s f62a <addVarToStackQuick+0x36>
    f626:	   |   clr.w d0
    f628:	/--|-- bra.s f660 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
    f62a:	|  \-> move.l 4(sp),d0
    f62e:	|      pea 8 <_start+0x8>
    f632:	|      move.l 28(sp),-(sp)
    f636:	|      move.l d0,-(sp)
    f638:	|      jsr 11cbc <memcpy>
    f63e:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
    f642:	|      movea.l 24(sp),a0
    f646:	|      clr.l (a0)

    newStack->next = *thisStack;
    f648:	|      movea.l 28(sp),a0
    f64c:	|      move.l (a0),d0
    f64e:	|      movea.l 4(sp),a0
    f652:	|      move.l d0,8(a0)
    *thisStack = newStack;
    f656:	|      movea.l 28(sp),a0
    f65a:	|      move.l 4(sp),(a0)
    return TRUE;
    f65e:	|      moveq #1,d0
}
    f660:	\----> movea.l (sp)+,a6
    f662:	       lea 16(sp),sp
    f666:	       rts

0000f668 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
    f668:	       lea -16(sp),sp
    f66c:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
    f66e:	       movea.l 24(sp),a0
    f672:	       move.l (a0),d0
    f674:	       moveq #1,d1
    f676:	       cmp.l d0,d1
    f678:	   /-- bne.s f6a2 <addVariablesInSecond+0x3a>
    f67a:	   |   movea.l 28(sp),a0
    f67e:	   |   move.l (a0),d0
    f680:	   |   moveq #1,d1
    f682:	   |   cmp.l d0,d1
    f684:	   +-- bne.s f6a2 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
    f686:	   |   movea.l 28(sp),a0
    f68a:	   |   move.l 4(a0),d1
    f68e:	   |   movea.l 24(sp),a0
    f692:	   |   move.l 4(a0),d0
    f696:	   |   add.l d1,d0
    f698:	   |   movea.l 28(sp),a0
    f69c:	   |   move.l d0,4(a0)
    f6a0:	/--|-- bra.s f71c <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
    f6a2:	|  \-> move.l 24(sp),-(sp)
    f6a6:	|      jsr 10308 <getTextFromAnyVar>
    f6ac:	|      addq.l #4,sp
    f6ae:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
    f6b2:	|      move.l 28(sp),-(sp)
    f6b6:	|      jsr 10308 <getTextFromAnyVar>
    f6bc:	|      addq.l #4,sp
    f6be:	|      move.l d0,12(sp)

		unlinkVar(var2);
    f6c2:	|      move.l 28(sp),-(sp)
    f6c6:	|      jsr ff80 <unlinkVar>
    f6cc:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
    f6ce:	|      move.l 12(sp),-(sp)
    f6d2:	|      move.l 20(sp),-(sp)
    f6d6:	|      jsr f25e <joinStrings>
    f6dc:	|      addq.l #8,sp
    f6de:	|      movea.l 28(sp),a0
    f6e2:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
    f6e6:	|      movea.l 28(sp),a0
    f6ea:	|      moveq #3,d0
    f6ec:	|      move.l d0,(a0)
		FreeVec(string1);
    f6ee:	|      move.l 16(sp),8(sp)
    f6f4:	|      move.l 17b28 <SysBase>,d0
    f6fa:	|      movea.l d0,a6
    f6fc:	|      movea.l 8(sp),a1
    f700:	|      jsr -690(a6)
		FreeVec(string2);
    f704:	|      move.l 12(sp),4(sp)
    f70a:	|      move.l 17b28 <SysBase>,d0
    f710:	|      movea.l d0,a6
    f712:	|      movea.l 4(sp),a1
    f716:	|      jsr -690(a6)
	}
}
    f71a:	|      nop
    f71c:	\----> nop
    f71e:	       movea.l (sp)+,a6
    f720:	       lea 16(sp),sp
    f724:	       rts

0000f726 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
    f726:	movea.l 8(sp),a0
    f72a:	move.l 4(a0),-(sp)
    f72e:	move.l (a0),-(sp)
    f730:	movea.l 12(sp),a0
    f734:	move.l 4(a0),-(sp)
    f738:	move.l (a0),-(sp)
    f73a:	jsr f75c <compareVars>
    f740:	lea 16(sp),sp
    f744:	move.l d0,-(sp)
    f746:	pea 1 <_start+0x1>
    f74a:	move.l 16(sp),-(sp)
    f74e:	jsr 10602 <setVariable>
    f754:	lea 12(sp),sp
}
    f758:	nop
    f75a:	rts

0000f75c <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
    f75c:	       subq.l #4,sp
	int re = 0;
    f75e:	       clr.l (sp)
	if (var1.varType == var2.varType) {
    f760:	       move.l 8(sp),d1
    f764:	       move.l 16(sp),d0
    f768:	       cmp.l d1,d0
    f76a:	/----- bne.w f832 <compareVars+0xd6>
		switch (var1.varType) {
    f76e:	|      move.l 8(sp),d0
    f772:	|      moveq #9,d1
    f774:	|      cmp.l d0,d1
    f776:	|  /-- bcs.w f81a <compareVars+0xbe>
    f77a:	|  |   add.l d0,d0
    f77c:	|  |   movea.l d0,a0
    f77e:	|  |   adda.l #63370,a0
    f784:	|  |   move.w (a0),d0
    f786:	|  |   jmp (f78a <compareVars+0x2e>,pc,d0.w)
    f78a:	|  |   ori.b #-112,(a4)
    f78e:	|  |   ori.l #5243024,(a0)
    f794:	|  |   ori.l #7733392,(a0)
    f79a:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
    f7a0:	|  |   move.l d0,(sp)
			break;
    f7a2:	+--|-- bra.w f832 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
    f7a6:	|  |   move.l 12(sp),d1
    f7aa:	|  |   move.l 20(sp),d0
    f7ae:	|  |   cmp.l d1,d0
    f7b0:	|  |   seq d0
    f7b2:	|  |   neg.b d0
    f7b4:	|  |   move.b d0,d0
    f7b6:	|  |   andi.l #255,d0
    f7bc:	|  |   move.l d0,(sp)
			break;
    f7be:	+--|-- bra.s f832 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
    f7c0:	|  |   move.l 12(sp),d1
    f7c4:	|  |   move.l 20(sp),d0
    f7c8:	|  |   cmp.l d1,d0
    f7ca:	|  |   seq d0
    f7cc:	|  |   neg.b d0
    f7ce:	|  |   move.b d0,d0
    f7d0:	|  |   andi.l #255,d0
    f7d6:	|  |   move.l d0,(sp)
			break;
    f7d8:	+--|-- bra.s f832 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
    f7da:	|  |   move.l 20(sp),d1
    f7de:	|  |   move.l 12(sp),d0
    f7e2:	|  |   move.l d1,-(sp)
    f7e4:	|  |   move.l d0,-(sp)
    f7e6:	|  |   jsr f1de <strcmp>
    f7ec:	|  |   addq.l #8,sp
    f7ee:	|  |   tst.l d0
    f7f0:	|  |   seq d0
    f7f2:	|  |   neg.b d0
    f7f4:	|  |   move.b d0,d0
    f7f6:	|  |   andi.l #255,d0
    f7fc:	|  |   move.l d0,(sp)
			break;
    f7fe:	+--|-- bra.s f832 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
    f800:	|  |   move.l 12(sp),d1
    f804:	|  |   move.l 20(sp),d0
    f808:	|  |   cmp.l d1,d0
    f80a:	|  |   seq d0
    f80c:	|  |   neg.b d0
    f80e:	|  |   move.b d0,d0
    f810:	|  |   andi.l #255,d0
    f816:	|  |   move.l d0,(sp)
			break;
    f818:	+--|-- bra.s f832 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
    f81a:	|  \-> move.l 12(sp),d1
    f81e:	|      move.l 20(sp),d0
    f822:	|      cmp.l d1,d0
    f824:	|      seq d0
    f826:	|      neg.b d0
    f828:	|      move.b d0,d0
    f82a:	|      andi.l #255,d0
    f830:	|      move.l d0,(sp)
		}
	}
	return re;
    f832:	\----> move.l (sp),d0
}
    f834:	       addq.l #4,sp
    f836:	       rts

0000f838 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
    f838:	             lea -16(sp),sp
    f83c:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
    f83e:	             movea.l 28(sp),a0
    f842:	             moveq #6,d0
    f844:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f846:	             moveq #12,d0
    f848:	             move.l d0,12(sp)
    f84c:	             clr.l 8(sp)
    f850:	             move.l 17b28 <SysBase>,d0
    f856:	             movea.l d0,a6
    f858:	             move.l 12(sp),d0
    f85c:	             move.l 8(sp),d1
    f860:	             jsr -684(a6)
    f864:	             move.l d0,4(sp)
    f868:	             move.l 4(sp),d0
    f86c:	             movea.l 28(sp),a0
    f870:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
    f874:	             movea.l 28(sp),a0
    f878:	             move.l 4(a0),d0
    f87c:	         /-- bne.s f884 <copyStack+0x4c>
    f87e:	         |   clr.w d0
    f880:	/--------|-- bra.w f906 <copyStack+0xce>
	to->varData.theStack->first = NULL;
    f884:	|        \-> movea.l 28(sp),a0
    f888:	|            movea.l 4(a0),a0
    f88c:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
    f88e:	|            movea.l 28(sp),a0
    f892:	|            movea.l 4(a0),a0
    f896:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
    f89a:	|            movea.l 28(sp),a0
    f89e:	|            movea.l 4(a0),a0
    f8a2:	|            moveq #1,d0
    f8a4:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
    f8a8:	|            movea.l 24(sp),a0
    f8ac:	|            movea.l 4(a0),a0
    f8b0:	|            move.l (a0),16(sp)

	while (a) {
    f8b4:	|     /----- bra.s f8fe <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
    f8b6:	|  /--|----> movea.l 28(sp),a0
    f8ba:	|  |  |      move.l 4(a0),d0
    f8be:	|  |  |      move.l d0,d1
    f8c0:	|  |  |      move.l 16(sp),d0
    f8c4:	|  |  |      move.l d1,-(sp)
    f8c6:	|  |  |      move.l d0,-(sp)
    f8c8:	|  |  |      jsr f56e <addVarToStack>
    f8ce:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
    f8d0:	|  |  |      movea.l 28(sp),a0
    f8d4:	|  |  |      movea.l 4(a0),a0
    f8d8:	|  |  |      move.l 4(a0),d0
    f8dc:	|  |  |  /-- bne.s f8f4 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
    f8de:	|  |  |  |   movea.l 28(sp),a0
    f8e2:	|  |  |  |   movea.l 4(a0),a1
    f8e6:	|  |  |  |   movea.l 28(sp),a0
    f8ea:	|  |  |  |   movea.l 4(a0),a0
    f8ee:	|  |  |  |   move.l (a1),d0
    f8f0:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
    f8f4:	|  |  |  \-> movea.l 16(sp),a0
    f8f8:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
    f8fe:	|  |  \----> tst.l 16(sp)
    f902:	|  \-------- bne.s f8b6 <copyStack+0x7e>
	}

	return TRUE;
    f904:	|            moveq #1,d0
}
    f906:	\----------> movea.l (sp)+,a6
    f908:	             lea 16(sp),sp
    f90c:	             rts

0000f90e <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
    f90e:	                lea -20(sp),sp
    f912:	                move.l a6,-(sp)
    f914:	                move.l 36(sp),d0
    f918:	                move.w d0,d0
    f91a:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
    f91e:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
    f924:	                clr.l 16(sp)

    while (*huntVar) {
    f928:	   /----------- bra.s f9a6 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
    f92a:	/--|----------> movea.l 20(sp),a0
    f92e:	|  |            movea.l (a0),a0
    f930:	|  |            movea.l 28(sp),a1
    f934:	|  |            move.l 4(a1),-(sp)
    f938:	|  |            move.l (a1),-(sp)
    f93a:	|  |            move.l 4(a0),-(sp)
    f93e:	|  |            move.l (a0),-(sp)
    f940:	|  |            jsr f75c <compareVars>
    f946:	|  |            lea 16(sp),sp
    f94a:	|  |            tst.l d0
    f94c:	|  |  /-------- beq.s f998 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
    f94e:	|  |  |         movea.l 20(sp),a0
    f952:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
    f956:	|  |  |         movea.l 12(sp),a0
    f95a:	|  |  |         move.l 8(a0),d0
    f95e:	|  |  |         movea.l 20(sp),a0
    f962:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
    f964:	|  |  |         move.l 12(sp),d0
    f968:	|  |  |         move.l d0,-(sp)
    f96a:	|  |  |         jsr ff80 <unlinkVar>
    f970:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
    f972:	|  |  |         move.l 12(sp),8(sp)
    f978:	|  |  |         move.l 17b28 <SysBase>,d0
    f97e:	|  |  |         movea.l d0,a6
    f980:	|  |  |         movea.l 8(sp),a1
    f984:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
    f988:	|  |  |         tst.w 6(sp)
    f98c:	|  |  |     /-- bne.s f992 <deleteVarFromStack+0x84>
    f98e:	|  |  |     |   moveq #1,d0
    f990:	|  |  |  /--|-- bra.s f9b4 <deleteVarFromStack+0xa6>
            reply++;
    f992:	|  |  |  |  \-> addq.l #1,16(sp)
    f996:	|  +--|--|----- bra.s f9a6 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
    f998:	|  |  \--|----> movea.l 20(sp),a0
    f99c:	|  |     |      move.l (a0),d0
    f99e:	|  |     |      move.l d0,d1
    f9a0:	|  |     |      addq.l #8,d1
    f9a2:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
    f9a6:	|  \-----|----> movea.l 20(sp),a0
    f9aa:	|        |      move.l (a0),d0
    f9ac:	\--------|----- bne.w f92a <deleteVarFromStack+0x1c>
        }
    }

    return reply;
    f9b0:	         |      move.l 16(sp),d0
}
    f9b4:	         \----> movea.l (sp)+,a6
    f9b6:	                lea 20(sp),sp
    f9ba:	                rts

0000f9bc <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
    f9bc:	       movea.l 4(sp),a0
    f9c0:	       move.l 4(a0),d0
    f9c4:	       cmp.l 8(sp),d0
    f9c8:	   /-- bhi.s f9ce <fastArrayGetByIndex+0x12>
    f9ca:	   |   moveq #0,d0
    f9cc:	/--|-- bra.s f9dc <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
    f9ce:	|  \-> movea.l 4(sp),a0
    f9d2:	|      move.l (a0),d1
    f9d4:	|      move.l 8(sp),d0
    f9d8:	|      lsl.l #3,d0
    f9da:	|      add.l d1,d0
}
    f9dc:	\----> rts

0000f9de <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
    f9de:	                lea -32(sp),sp
    f9e2:	                move.l a6,-(sp)
    f9e4:	                move.l a2,-(sp)
    struct persona *p = NULL;
    f9e6:	                clr.l 36(sp)

    switch (thisVar->varType) {
    f9ea:	                movea.l 44(sp),a0
    f9ee:	                move.l (a0),d0
    f9f0:	                moveq #8,d1
    f9f2:	                cmp.l d0,d1
    f9f4:	            /-- beq.s fa02 <getCostumeFromVar+0x24>
    f9f6:	            |   moveq #9,d1
    f9f8:	            |   cmp.l d0,d1
    f9fa:	   /--------|-- beq.w fab0 <getCostumeFromVar+0xd2>
    f9fe:	/--|--------|-- bra.w faba <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
    fa02:	|  |        \-> moveq #8,d0
    fa04:	|  |            move.l d0,28(sp)
    fa08:	|  |            clr.l 24(sp)
    fa0c:	|  |            move.l 17b28 <SysBase>,d0
    fa12:	|  |            movea.l d0,a6
    fa14:	|  |            move.l 28(sp),d0
    fa18:	|  |            move.l 24(sp),d1
    fa1c:	|  |            jsr -684(a6)
    fa20:	|  |            move.l d0,20(sp)
    fa24:	|  |            move.l 20(sp),d0
    fa28:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
    fa2c:	|  |        /-- bne.s fa34 <getCostumeFromVar+0x56>
    fa2e:	|  |        |   moveq #0,d0
    fa30:	|  |  /-----|-- bra.w fae4 <getCostumeFromVar+0x106>
            p->numDirections = 1;
    fa34:	|  |  |     \-> movea.l 36(sp),a0
    fa38:	|  |  |         moveq #1,d1
    fa3a:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
    fa3e:	|  |  |         moveq #12,d0
    fa40:	|  |  |         move.l d0,16(sp)
    fa44:	|  |  |         clr.l 12(sp)
    fa48:	|  |  |         move.l 17b28 <SysBase>,d0
    fa4e:	|  |  |         movea.l d0,a6
    fa50:	|  |  |         move.l 16(sp),d0
    fa54:	|  |  |         move.l 12(sp),d1
    fa58:	|  |  |         jsr -684(a6)
    fa5c:	|  |  |         move.l d0,8(sp)
    fa60:	|  |  |         move.l 8(sp),d0
    fa64:	|  |  |         movea.l 36(sp),a0
    fa68:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
    fa6a:	|  |  |         movea.l 36(sp),a0
    fa6e:	|  |  |         move.l (a0),d0
    fa70:	|  |  |     /-- bne.s fa76 <getCostumeFromVar+0x98>
    fa72:	|  |  |     |   moveq #0,d0
    fa74:	|  |  +-----|-- bra.s fae4 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
    fa76:	|  |  |     \-> clr.l 32(sp)
    fa7a:	|  |  |     /-- bra.s faa6 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
    fa7c:	|  |  |  /--|-> movea.l 44(sp),a0
    fa80:	|  |  |  |  |   move.l 4(a0),d0
    fa84:	|  |  |  |  |   movea.l 36(sp),a0
    fa88:	|  |  |  |  |   movea.l (a0),a0
    fa8a:	|  |  |  |  |   move.l 32(sp),d1
    fa8e:	|  |  |  |  |   add.l d1,d1
    fa90:	|  |  |  |  |   add.l d1,d1
    fa92:	|  |  |  |  |   lea (0,a0,d1.l),a2
    fa96:	|  |  |  |  |   move.l d0,-(sp)
    fa98:	|  |  |  |  |   jsr 5896 <copyAnim>
    fa9e:	|  |  |  |  |   addq.l #4,sp
    faa0:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
    faa2:	|  |  |  |  |   addq.l #1,32(sp)
    faa6:	|  |  |  |  \-> moveq #2,d1
    faa8:	|  |  |  |      cmp.l 32(sp),d1
    faac:	|  |  |  \----- bge.s fa7c <getCostumeFromVar+0x9e>
            }
            break;
    faae:	|  |  |     /-- bra.s fae0 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
    fab0:	|  \--|-----|-> movea.l 44(sp),a0
    fab4:	|     |     |   move.l 4(a0),d0
    fab8:	|     +-----|-- bra.s fae4 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
    faba:	\-----|-----|-> movea.l 44(sp),a0
    fabe:	      |     |   move.l (a0),d0
    fac0:	      |     |   add.l d0,d0
    fac2:	      |     |   movea.l d0,a1
    fac4:	      |     |   adda.l d0,a1
    fac6:	      |     |   lea 16570 <typeName>,a0
    facc:	      |     |   move.l (0,a1,a0.l),d0
    fad0:	      |     |   move.l d0,-(sp)
    fad2:	      |     |   pea 1592f <zbuffer.c.d110ca03+0x3e9>
    fad8:	      |     |   jsr 11d08 <KPrintF>
    fade:	      |     |   addq.l #8,sp
    }

    return p;
    fae0:	      |     \-> move.l 36(sp),d0
}
    fae4:	      \-------> movea.l (sp)+,a2
    fae6:	                movea.l (sp)+,a6
    fae8:	                lea 32(sp),sp
    faec:	                rts

0000faee <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
    faee:	                lea -96(sp),sp
    faf2:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
    faf6:	                move.l 116(sp),-(sp)
    fafa:	                pea 15967 <zbuffer.c.d110ca03+0x421>
    fb00:	                jsr f25e <joinStrings>
    fb06:	                addq.l #8,sp
    fb08:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
    fb0c:	            /-- bne.s fb14 <getSavedGamesStack+0x26>
    fb0e:	            |   clr.w d0
    fb10:	/-----------|-- bra.w fd28 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
    fb14:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
    fb18:	|               move.l #88425,98(sp)
    fb20:	|               moveq #-2,d0
    fb22:	|               move.l d0,94(sp)
    fb26:	|               move.l 17b30 <DOSBase>,d0
    fb2c:	|               movea.l d0,a6
    fb2e:	|               move.l 98(sp),d1
    fb32:	|               move.l 94(sp),d2
    fb36:	|               jsr -84(a6)
    fb3a:	|               move.l d0,90(sp)
    fb3e:	|               move.l 90(sp),d0
    fb42:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
    fb46:	|           /-- bne.s fb4e <getSavedGamesStack+0x60>
    fb48:	|           |   clr.w d0
    fb4a:	+-----------|-- bra.w fd28 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
    fb4e:	|           \-> move.l #260,82(sp)
    fb56:	|               move.l #65536,78(sp)
    fb5e:	|               move.l 17b28 <SysBase>,d0
    fb64:	|               movea.l d0,a6
    fb66:	|               move.l 82(sp),d0
    fb6a:	|               move.l 78(sp),d1
    fb6e:	|               jsr -684(a6)
    fb72:	|               move.l d0,74(sp)
    fb76:	|               move.l 74(sp),d0
    fb7a:	|               move.l d0,70(sp)
	if (!fib) {
    fb7e:	|           /-- bne.s fb9c <getSavedGamesStack+0xae>
		UnLock(dirLock);
    fb80:	|           |   move.l 86(sp),22(sp)
    fb86:	|           |   move.l 17b30 <DOSBase>,d0
    fb8c:	|           |   movea.l d0,a6
    fb8e:	|           |   move.l 22(sp),d1
    fb92:	|           |   jsr -90(a6)
		return FALSE;
    fb96:	|           |   clr.w d0
    fb98:	+-----------|-- bra.w fd28 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
    fb9c:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
    fba0:	|               move.l 86(sp),66(sp)
    fba6:	|               move.l 70(sp),62(sp)
    fbac:	|               move.l 17b30 <DOSBase>,d0
    fbb2:	|               movea.l d0,a6
    fbb4:	|               move.l 66(sp),d1
    fbb8:	|               move.l 62(sp),d2
    fbbc:	|               jsr -102(a6)
    fbc0:	|               move.l d0,58(sp)
    fbc4:	|               move.l 58(sp),d0
    fbc8:	|  /----------- beq.w fcdc <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
    fbcc:	|  |        /-- bra.w fca8 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
    fbd0:	|  |  /-----|-> move.l 70(sp),d2
    fbd4:	|  |  |     |   addq.l #8,d2
    fbd6:	|  |  |     |   move.l 70(sp),d0
    fbda:	|  |  |     |   addq.l #8,d0
    fbdc:	|  |  |     |   move.l d0,-(sp)
    fbde:	|  |  |     |   jsr f21e <strlen>
    fbe4:	|  |  |     |   addq.l #4,sp
    fbe6:	|  |  |     |   move.l d0,d3
    fbe8:	|  |  |     |   move.l 116(sp),-(sp)
    fbec:	|  |  |     |   jsr f21e <strlen>
    fbf2:	|  |  |     |   addq.l #4,sp
    fbf4:	|  |  |     |   move.l d3,d1
    fbf6:	|  |  |     |   sub.l d0,d1
    fbf8:	|  |  |     |   move.l d2,d0
    fbfa:	|  |  |     |   add.l d1,d0
    fbfc:	|  |  |     |   move.l 116(sp),-(sp)
    fc00:	|  |  |     |   move.l d0,-(sp)
    fc02:	|  |  |     |   jsr f1de <strcmp>
    fc08:	|  |  |     |   addq.l #8,sp
    fc0a:	|  |  |     |   tst.l d0
    fc0c:	|  |  |     +-- bne.w fca8 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
    fc10:	|  |  |     |   move.l 70(sp),d0
    fc14:	|  |  |     |   addq.l #8,d0
    fc16:	|  |  |     |   move.l d0,-(sp)
    fc18:	|  |  |     |   jsr f21e <strlen>
    fc1e:	|  |  |     |   addq.l #4,sp
    fc20:	|  |  |     |   move.l d0,d2
    fc22:	|  |  |     |   move.l 116(sp),-(sp)
    fc26:	|  |  |     |   jsr f21e <strlen>
    fc2c:	|  |  |     |   addq.l #4,sp
    fc2e:	|  |  |     |   move.l d0,d1
    fc30:	|  |  |     |   move.l d2,d0
    fc32:	|  |  |     |   sub.l d1,d0
    fc34:	|  |  |     |   movea.l 70(sp),a0
    fc38:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
    fc3c:	|  |  |     |   move.l 70(sp),d0
    fc40:	|  |  |     |   addq.l #8,d0
    fc42:	|  |  |     |   move.l d0,-(sp)
    fc44:	|  |  |     |   jsr 118 <decodeFilename>
    fc4a:	|  |  |     |   addq.l #4,sp
    fc4c:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
    fc50:	|  |  |     |   move.l 42(sp),-(sp)
    fc54:	|  |  |     |   lea 18(sp),a0
    fc58:	|  |  |     |   move.l a0,-(sp)
    fc5a:	|  |  |     |   jsr ff54 <makeTextVar>
    fc60:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
    fc62:	|  |  |     |   move.l 42(sp),38(sp)
    fc68:	|  |  |     |   move.l 17b28 <SysBase>,d0
    fc6e:	|  |  |     |   movea.l d0,a6
    fc70:	|  |  |     |   movea.l 38(sp),a1
    fc74:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
    fc78:	|  |  |     |   move.l 112(sp),d0
    fc7c:	|  |  |     |   move.l d0,-(sp)
    fc7e:	|  |  |     |   lea 18(sp),a0
    fc82:	|  |  |     |   move.l a0,-(sp)
    fc84:	|  |  |     |   jsr f56e <addVarToStack>
    fc8a:	|  |  |     |   addq.l #8,sp
    fc8c:	|  |  |     |   tst.w d0
    fc8e:	|  |  |  /--|-- beq.s fce0 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
    fc90:	|  |  |  |  |   movea.l 112(sp),a0
    fc94:	|  |  |  |  |   move.l 4(a0),d0
    fc98:	|  |  |  |  +-- bne.s fca8 <getSavedGamesStack+0x1ba>
    fc9a:	|  |  |  |  |   movea.l 112(sp),a0
    fc9e:	|  |  |  |  |   move.l (a0),d0
    fca0:	|  |  |  |  |   movea.l 112(sp),a0
    fca4:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
    fca8:	|  |  |  |  \-> move.l 86(sp),54(sp)
    fcae:	|  |  |  |      move.l 70(sp),50(sp)
    fcb4:	|  |  |  |      move.l 17b30 <DOSBase>,d0
    fcba:	|  |  |  |      movea.l d0,a6
    fcbc:	|  |  |  |      move.l 54(sp),d1
    fcc0:	|  |  |  |      move.l 50(sp),d2
    fcc4:	|  |  |  |      jsr -108(a6)
    fcc8:	|  |  |  |      move.l d0,46(sp)
    fccc:	|  |  |  |      move.l 46(sp),d0
    fcd0:	|  |  \--|----- bne.w fbd0 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
    fcd4:	|  |     |      move.w #1,106(sp)
    fcda:	|  |     |  /-- bra.s fce2 <getSavedGamesStack+0x1f4>
	}

cleanup:
    fcdc:	|  \-----|--|-> nop
    fcde:	|        |  +-- bra.s fce2 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
    fce0:	|        \--|-> nop
	FreeVec(fib);
    fce2:	|           \-> move.l 70(sp),34(sp)
    fce8:	|               move.l 17b28 <SysBase>,d0
    fcee:	|               movea.l d0,a6
    fcf0:	|               movea.l 34(sp),a1
    fcf4:	|               jsr -690(a6)
	UnLock(dirLock);
    fcf8:	|               move.l 86(sp),30(sp)
    fcfe:	|               move.l 17b30 <DOSBase>,d0
    fd04:	|               movea.l d0,a6
    fd06:	|               move.l 30(sp),d1
    fd0a:	|               jsr -90(a6)
	FreeVec(pattern);
    fd0e:	|               move.l 102(sp),26(sp)
    fd14:	|               move.l 17b28 <SysBase>,d0
    fd1a:	|               movea.l d0,a6
    fd1c:	|               movea.l 26(sp),a1
    fd20:	|               jsr -690(a6)
	return result;
    fd24:	|               move.w 106(sp),d0
}
    fd28:	\-------------> movem.l (sp)+,d2-d3/a6
    fd2c:	                lea 96(sp),sp
    fd30:	                rts

0000fd32 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
    fd32:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
    fd34:	       movea.l 20(sp),a0
    fd38:	       move.l (a0),d0
    fd3a:	       cmp.l 16(sp),d0
    fd3e:	/----- beq.s fda2 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
    fd40:	|      move.l 16(sp),d0
    fd44:	|      add.l d0,d0
    fd46:	|      movea.l d0,a1
    fd48:	|      adda.l d0,a1
    fd4a:	|      lea 16570 <typeName>,a0
    fd50:	|      move.l (0,a1,a0.l),d0
    fd54:	|      move.l d0,-(sp)
    fd56:	|      pea 1596b <zbuffer.c.d110ca03+0x425>
    fd5c:	|      jsr f25e <joinStrings>
    fd62:	|      addq.l #8,sp
    fd64:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
    fd68:	|      movea.l 20(sp),a0
    fd6c:	|      move.l (a0),d0
    fd6e:	|      add.l d0,d0
    fd70:	|      movea.l d0,a1
    fd72:	|      adda.l d0,a1
    fd74:	|      lea 16570 <typeName>,a0
    fd7a:	|      move.l (0,a1,a0.l),d0
    fd7e:	|      move.l d0,-(sp)
    fd80:	|      pea 159ad <zbuffer.c.d110ca03+0x467>
    fd86:	|      jsr f25e <joinStrings>
    fd8c:	|      addq.l #8,sp
    fd8e:	|      move.l d0,(sp)
		KPrintF(e1, e2);
    fd90:	|      move.l (sp),-(sp)
    fd92:	|      move.l 8(sp),-(sp)
    fd96:	|      jsr 11d08 <KPrintF>
    fd9c:	|      addq.l #8,sp

		return FALSE;
    fd9e:	|      clr.w d0
    fda0:	|  /-- bra.s fdb2 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
    fda2:	\--|-> movea.l 20(sp),a0
    fda6:	   |   move.l 4(a0),d0
    fdaa:	   |   movea.l 12(sp),a0
    fdae:	   |   move.l d0,(a0)
	return TRUE;
    fdb0:	   |   moveq #1,d0
}
    fdb2:	   \-> addq.l #8,sp
    fdb4:	       rts

0000fdb6 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
    fdb6:	move.l 8(sp),-(sp)
    fdba:	jsr 3d62 <getNumberedString>
    fdc0:	addq.l #4,sp
    fdc2:	move.l d0,-(sp)
    fdc4:	move.l 8(sp),-(sp)
    fdc8:	jsr ff54 <makeTextVar>
    fdce:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
    fdd0:	movea.l 4(sp),a0
    fdd4:	move.l 4(a0),d0
    fdd8:	sne d0
    fdda:	neg.b d0
    fddc:	move.b d0,d0
    fdde:	andi.w #255,d0
}
    fde2:	rts

0000fde4 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
    fde4:	          subq.l #8,sp
    int size = stackSize(stacky);
    fde6:	          move.l 16(sp),-(sp)
    fdea:	          jsr 10670 <stackSize>
    fdf0:	          addq.l #4,sp
    fdf2:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
    fdf6:	          move.l 4(sp),-(sp)
    fdfa:	          move.l 16(sp),-(sp)
    fdfe:	          jsr fe4e <makeFastArraySize>
    fe04:	          addq.l #8,sp
    fe06:	          tst.w d0
    fe08:	      /-- bne.s fe0e <makeFastArrayFromStack+0x2a>
    fe0a:	      |   clr.w d0
    fe0c:	/-----|-- bra.s fe4a <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
    fe0e:	|     \-> movea.l 16(sp),a0
    fe12:	|         move.l (a0),(sp)
    size = 0;
    fe14:	|         clr.l 4(sp)
    while (allV) {
    fe18:	|     /-- bra.s fe44 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
    fe1a:	|  /--|-> movea.l 12(sp),a0
    fe1e:	|  |  |   movea.l 4(a0),a0
    fe22:	|  |  |   move.l (a0),d1
    fe24:	|  |  |   move.l 4(sp),d0
    fe28:	|  |  |   lsl.l #3,d0
    fe2a:	|  |  |   add.l d0,d1
    fe2c:	|  |  |   move.l (sp),d0
    fe2e:	|  |  |   move.l d1,-(sp)
    fe30:	|  |  |   move.l d0,-(sp)
    fe32:	|  |  |   jsr 100d0 <copyMain>
    fe38:	|  |  |   addq.l #8,sp
        size++;
    fe3a:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
    fe3e:	|  |  |   movea.l (sp),a0
    fe40:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
    fe44:	|  |  \-> tst.l (sp)
    fe46:	|  \----- bne.s fe1a <makeFastArrayFromStack+0x36>
    }
    return TRUE;
    fe48:	|         moveq #1,d0
}
    fe4a:	\-------> addq.l #8,sp
    fe4c:	          rts

0000fe4e <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
    fe4e:	          lea -28(sp),sp
    fe52:	          move.l a6,-(sp)
    if (size < 0) {
    fe54:	          tst.l 40(sp)
    fe58:	      /-- bge.s fe6e <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
    fe5a:	      |   pea 159f2 <zbuffer.c.d110ca03+0x4ac>
    fe60:	      |   jsr 11d08 <KPrintF>
    fe66:	      |   addq.l #4,sp
		return FALSE;
    fe68:	      |   clr.w d0
    fe6a:	/-----|-- bra.w ff4c <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
    fe6e:	|     \-> move.l 36(sp),-(sp)
    fe72:	|         jsr ff80 <unlinkVar>
    fe78:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
    fe7a:	|         movea.l 36(sp),a0
    fe7e:	|         moveq #10,d0
    fe80:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
    fe82:	|         moveq #12,d0
    fe84:	|         move.l d0,24(sp)
    fe88:	|         clr.l 20(sp)
    fe8c:	|         move.l 17b28 <SysBase>,d0
    fe92:	|         movea.l d0,a6
    fe94:	|         move.l 24(sp),d0
    fe98:	|         move.l 20(sp),d1
    fe9c:	|         jsr -684(a6)
    fea0:	|         move.l d0,16(sp)
    fea4:	|         move.l 16(sp),d0
    fea8:	|         movea.l 36(sp),a0
    feac:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
    feb0:	|         movea.l 36(sp),a0
    feb4:	|         move.l 4(a0),d0
    feb8:	|     /-- bne.s fec0 <makeFastArraySize+0x72>
    feba:	|     |   clr.w d0
    febc:	+-----|-- bra.w ff4c <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
    fec0:	|     \-> move.l 40(sp),d0
    fec4:	|         lsl.l #3,d0
    fec6:	|         move.l d0,12(sp)
    feca:	|         clr.l 8(sp)
    fece:	|         move.l 17b28 <SysBase>,d0
    fed4:	|         movea.l d0,a6
    fed6:	|         move.l 12(sp),d0
    feda:	|         move.l 8(sp),d1
    fede:	|         jsr -684(a6)
    fee2:	|         move.l d0,4(sp)
    fee6:	|         move.l 4(sp),d0
    feea:	|         movea.l 36(sp),a0
    feee:	|         movea.l 4(a0),a0
    fef2:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
    fef4:	|         movea.l 36(sp),a0
    fef8:	|         movea.l 4(a0),a0
    fefc:	|         move.l (a0),d0
    fefe:	|     /-- bne.s ff04 <makeFastArraySize+0xb6>
    ff00:	|     |   clr.w d0
    ff02:	+-----|-- bra.s ff4c <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
    ff04:	|     \-> clr.l 28(sp)
    ff08:	|     /-- bra.s ff24 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
    ff0a:	|  /--|-> movea.l 36(sp),a0
    ff0e:	|  |  |   movea.l 4(a0),a0
    ff12:	|  |  |   move.l (a0),d1
    ff14:	|  |  |   move.l 28(sp),d0
    ff18:	|  |  |   lsl.l #3,d0
    ff1a:	|  |  |   movea.l d1,a0
    ff1c:	|  |  |   adda.l d0,a0
    ff1e:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
    ff20:	|  |  |   addq.l #1,28(sp)
    ff24:	|  |  \-> move.l 28(sp),d0
    ff28:	|  |      cmp.l 40(sp),d0
    ff2c:	|  \----- blt.s ff0a <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
    ff2e:	|         movea.l 36(sp),a0
    ff32:	|         movea.l 4(a0),a0
    ff36:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
    ff3c:	|         movea.l 36(sp),a0
    ff40:	|         movea.l 4(a0),a0
    ff44:	|         moveq #1,d0
    ff46:	|         move.l d0,8(a0)
    return TRUE;
    ff4a:	|         moveq #1,d0
}
    ff4c:	\-------> movea.l (sp)+,a6
    ff4e:	          lea 28(sp),sp
    ff52:	          rts

0000ff54 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
    ff54:	move.l 4(sp),-(sp)
    ff58:	jsr ff80 <unlinkVar>
    ff5e:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
    ff60:	movea.l 4(sp),a0
    ff64:	moveq #3,d0
    ff66:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
    ff68:	move.l 8(sp),-(sp)
    ff6c:	jsr b8 <copyString>
    ff72:	addq.l #4,sp
    ff74:	movea.l 4(sp),a0
    ff78:	move.l d0,4(a0)
}
    ff7c:	nop
    ff7e:	rts

0000ff80 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
    ff80:	                      lea -16(sp),sp
    ff84:	                      move.l a6,-(sp)
	switch (thisVar->varType) {
    ff86:	                      movea.l 24(sp),a0
    ff8a:	                      move.l (a0),d0
    ff8c:	                      moveq #10,d1
    ff8e:	                      cmp.l d0,d1
    ff90:	            /-------- beq.w 10048 <unlinkVar+0xc8>
    ff94:	            |         moveq #10,d1
    ff96:	            |         cmp.l d0,d1
    ff98:	/-----------|-------- bcs.w 100bc <unlinkVar+0x13c>
    ff9c:	|           |         moveq #8,d1
    ff9e:	|           |         cmp.l d0,d1
    ffa0:	|  /--------|-------- beq.w 100a8 <unlinkVar+0x128>
    ffa4:	|  |        |         moveq #8,d1
    ffa6:	|  |        |         cmp.l d0,d1
    ffa8:	+--|--------|-------- bcs.w 100bc <unlinkVar+0x13c>
    ffac:	|  |        |         moveq #3,d1
    ffae:	|  |        |         cmp.l d0,d1
    ffb0:	|  |        |     /-- beq.s ffbc <unlinkVar+0x3c>
    ffb2:	|  |        |     |   moveq #6,d1
    ffb4:	|  |        |     |   cmp.l d0,d1
    ffb6:	|  |        |  /--|-- beq.s ffe2 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
    ffb8:	+--|--------|--|--|-- bra.w 100bc <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
    ffbc:	|  |        |  |  \-> movea.l 24(sp),a0
    ffc0:	|  |        |  |      move.l 4(a0),4(sp)
    ffc6:	|  |        |  |      move.l 17b28 <SysBase>,d0
    ffcc:	|  |        |  |      movea.l d0,a6
    ffce:	|  |        |  |      movea.l 4(sp),a1
    ffd2:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
    ffd6:	|  |        |  |      movea.l 24(sp),a0
    ffda:	|  |        |  |      clr.l 4(a0)
		break;
    ffde:	|  |  /-----|--|----- bra.w 100c6 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
    ffe2:	|  |  |     |  \----> movea.l 24(sp),a0
    ffe6:	|  |  |     |         movea.l 4(a0),a0
    ffea:	|  |  |     |         move.l 8(a0),d0
    ffee:	|  |  |     |         subq.l #1,d0
    fff0:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
    fff4:	|  |  |     |         movea.l 24(sp),a0
    fff8:	|  |  |     |         movea.l 4(a0),a0
    fffc:	|  |  |     |         move.l 8(a0),d0
   10000:	|  |  |  /--|-------- bgt.w 100c0 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   10004:	|  |  |  |  |     /-- bra.s 10018 <unlinkVar+0x98>
   10006:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   1000a:	|  |  |  |  |  |  |   move.l 4(a0),d0
   1000e:	|  |  |  |  |  |  |   move.l d0,-(sp)
   10010:	|  |  |  |  |  |  |   jsr 10694 <trimStack>
   10016:	|  |  |  |  |  |  |   addq.l #4,sp
   10018:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   1001c:	|  |  |  |  |  |      movea.l 4(a0),a0
   10020:	|  |  |  |  |  |      move.l (a0),d0
   10022:	|  |  |  |  |  \----- bne.s 10006 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   10024:	|  |  |  |  |         movea.l 24(sp),a0
   10028:	|  |  |  |  |         move.l 4(a0),8(sp)
   1002e:	|  |  |  |  |         move.l 17b28 <SysBase>,d0
   10034:	|  |  |  |  |         movea.l d0,a6
   10036:	|  |  |  |  |         movea.l 8(sp),a1
   1003a:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   1003e:	|  |  |  |  |         movea.l 24(sp),a0
   10042:	|  |  |  |  |         clr.l 4(a0)
		break;
   10046:	|  |  |  +--|-------- bra.s 100c0 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   10048:	|  |  |  |  \-------> movea.l 24(sp),a0
   1004c:	|  |  |  |            movea.l 4(a0),a0
   10050:	|  |  |  |            move.l 8(a0),d0
   10054:	|  |  |  |            subq.l #1,d0
   10056:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   1005a:	|  |  |  |            movea.l 24(sp),a0
   1005e:	|  |  |  |            movea.l 4(a0),a0
   10062:	|  |  |  |            move.l 8(a0),d0
   10066:	|  |  |  |        /-- bgt.s 100c4 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   10068:	|  |  |  |        |   movea.l 24(sp),a0
   1006c:	|  |  |  |        |   movea.l 4(a0),a0
   10070:	|  |  |  |        |   move.l (a0),16(sp)
   10074:	|  |  |  |        |   move.l 17b28 <SysBase>,d0
   1007a:	|  |  |  |        |   movea.l d0,a6
   1007c:	|  |  |  |        |   movea.l 16(sp),a1
   10080:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   10084:	|  |  |  |        |   movea.l 24(sp),a0
   10088:	|  |  |  |        |   move.l 4(a0),12(sp)
   1008e:	|  |  |  |        |   move.l 17b28 <SysBase>,d0
   10094:	|  |  |  |        |   movea.l d0,a6
   10096:	|  |  |  |        |   movea.l 12(sp),a1
   1009a:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   1009e:	|  |  |  |        |   movea.l 24(sp),a0
   100a2:	|  |  |  |        |   clr.l 4(a0)
		break;
   100a6:	|  |  |  |        +-- bra.s 100c4 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   100a8:	|  \--|--|--------|-> movea.l 24(sp),a0
   100ac:	|     |  |        |   move.l 4(a0),d0
   100b0:	|     |  |        |   move.l d0,-(sp)
   100b2:	|     |  |        |   jsr 5a30 <deleteAnim>
   100b8:	|     |  |        |   addq.l #4,sp
		break;
   100ba:	|     +--|--------|-- bra.s 100c6 <unlinkVar+0x146>
		break;
   100bc:	\-----|--|--------|-> nop
   100be:	      +--|--------|-- bra.s 100c6 <unlinkVar+0x146>
		break;
   100c0:	      |  \--------|-> nop
   100c2:	      +-----------|-- bra.s 100c6 <unlinkVar+0x146>
		break;
   100c4:	      |           \-> nop
	}
}
   100c6:	      \-------------> nop
   100c8:	                      movea.l (sp)+,a6
   100ca:	                      lea 16(sp),sp
   100ce:	                      rts

000100d0 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   100d0:	       movea.l 4(sp),a0
   100d4:	       move.l (a0),d0
   100d6:	       movea.l 8(sp),a0
   100da:	       move.l d0,(a0)
	switch (to->varType) {
   100dc:	       movea.l 8(sp),a0
   100e0:	       move.l (a0),d0
   100e2:	       moveq #10,d1
   100e4:	       cmp.l d0,d1
   100e6:	/----- bcs.w 101d8 <copyMain+0x108>
   100ea:	|      add.l d0,d0
   100ec:	|      movea.l d0,a0
   100ee:	|      adda.l #65786,a0
   100f4:	|      move.w (a0),d0
   100f6:	|      jmp (100fa <copyMain+0x2a>,pc,d0.w)
   100fa:	|      .short 0x00da
   100fc:	|      ori.b #22,(a6)
   10100:	|      ori.w #22,(a4)
   10104:	|      ori.b #-126,(a6)
   10108:	|      ori.b #-68,(a6)
   1010c:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   10114:	|      move.l 4(a0),d0
   10118:	|      movea.l 8(sp),a0
   1011c:	|      move.l d0,4(a0)
		return TRUE;
   10120:	|      moveq #1,d0
   10122:	|  /-- bra.w 101ea <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   10126:	|  |   movea.l 4(sp),a0
   1012a:	|  |   move.l 4(a0),d0
   1012e:	|  |   movea.l 8(sp),a0
   10132:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   10136:	|  |   movea.l 8(sp),a0
   1013a:	|  |   movea.l 4(a0),a0
   1013e:	|  |   move.l 8(a0),d0
   10142:	|  |   addq.l #1,d0
   10144:	|  |   move.l d0,8(a0)
		return TRUE;
   10148:	|  |   moveq #1,d0
   1014a:	|  +-- bra.w 101ea <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   1014e:	|  |   movea.l 4(sp),a0
   10152:	|  |   move.l 4(a0),d0
   10156:	|  |   move.l d0,-(sp)
   10158:	|  |   jsr b8 <copyString>
   1015e:	|  |   addq.l #4,sp
   10160:	|  |   movea.l 8(sp),a0
   10164:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   10168:	|  |   movea.l 8(sp),a0
   1016c:	|  |   move.l 4(a0),d0
   10170:	|  |   sne d0
   10172:	|  |   neg.b d0
   10174:	|  |   move.b d0,d0
   10176:	|  |   andi.w #255,d0
   1017a:	|  +-- bra.s 101ea <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   1017c:	|  |   movea.l 4(sp),a0
   10180:	|  |   move.l 4(a0),d0
   10184:	|  |   movea.l 8(sp),a0
   10188:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   1018c:	|  |   movea.l 8(sp),a0
   10190:	|  |   movea.l 4(a0),a0
   10194:	|  |   move.l 8(a0),d0
   10198:	|  |   addq.l #1,d0
   1019a:	|  |   move.l d0,8(a0)
		return TRUE;
   1019e:	|  |   moveq #1,d0
   101a0:	|  +-- bra.s 101ea <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   101a2:	|  |   movea.l 4(sp),a0
   101a6:	|  |   move.l 4(a0),d0
   101aa:	|  |   movea.l 8(sp),a0
   101ae:	|  |   move.l d0,4(a0)
		return TRUE;
   101b2:	|  |   moveq #1,d0
   101b4:	|  +-- bra.s 101ea <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   101b6:	|  |   movea.l 4(sp),a0
   101ba:	|  |   move.l 4(a0),d0
   101be:	|  |   move.l d0,-(sp)
   101c0:	|  |   jsr 5896 <copyAnim>
   101c6:	|  |   addq.l #4,sp
   101c8:	|  |   movea.l 8(sp),a0
   101cc:	|  |   move.l d0,4(a0)
		return TRUE;
   101d0:	|  |   moveq #1,d0
   101d2:	|  +-- bra.s 101ea <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   101d4:	|  |   moveq #1,d0
   101d6:	|  +-- bra.s 101ea <copyMain+0x11a>

		default:
		break;
   101d8:	\--|-> nop
	}
	KPrintF("Unknown value type");
   101da:	   |   pea 15a43 <zbuffer.c.d110ca03+0x4fd>
   101e0:	   |   jsr 11d08 <KPrintF>
   101e6:	   |   addq.l #4,sp
	return FALSE;
   101e8:	   |   clr.w d0
}
   101ea:	   \-> rts

000101ec <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   101ec:	move.l 8(sp),-(sp)
   101f0:	jsr ff80 <unlinkVar>
   101f6:	addq.l #4,sp
	return copyMain(from, to);
   101f8:	move.l 8(sp),-(sp)
   101fc:	move.l 8(sp),-(sp)
   10200:	jsr 100d0 <copyMain>
   10206:	addq.l #8,sp
}
   10208:	rts

0001020a <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   1020a:	       movea.l 4(sp),a0
   1020e:	       move.l (a0),d0
   10210:	       moveq #8,d1
   10212:	       cmp.l d0,d1
   10214:	   /-- bne.s 1022a <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   10216:	   |   movea.l 4(sp),a0
   1021a:	   |   move.l 4(a0),d0
   1021e:	   |   move.l d0,-(sp)
   10220:	   |   jsr 5896 <copyAnim>
   10226:	   |   addq.l #4,sp
   10228:	/--|-- bra.s 10270 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   1022a:	|  \-> movea.l 4(sp),a0
   1022e:	|      move.l (a0),d0
   10230:	|      moveq #1,d1
   10232:	|      cmp.l d0,d1
   10234:	|  /-- bne.s 10248 <getAnimationFromVar+0x3e>
   10236:	|  |   movea.l 4(sp),a0
   1023a:	|  |   move.l 4(a0),d0
   1023e:	|  +-- bne.s 10248 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   10240:	|  |   jsr 681c <makeNullAnim>
   10246:	+--|-- bra.s 10270 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   10248:	|  \-> movea.l 4(sp),a0
   1024c:	|      move.l (a0),d0
   1024e:	|      add.l d0,d0
   10250:	|      movea.l d0,a1
   10252:	|      adda.l d0,a1
   10254:	|      lea 16570 <typeName>,a0
   1025a:	|      move.l (0,a1,a0.l),d0
   1025e:	|      move.l d0,-(sp)
   10260:	|      pea 1592f <zbuffer.c.d110ca03+0x3e9>
   10266:	|      jsr 11d08 <KPrintF>
   1026c:	|      addq.l #8,sp
	return NULL;
   1026e:	|      moveq #0,d0
}
   10270:	\----> rts

00010272 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   10272:	       movea.l 4(sp),a0
   10276:	       move.l (a0),d0
   10278:	       moveq #10,d1
   1027a:	       cmp.l d0,d1
   1027c:	/----- bcs.w 10302 <getBoolean+0x90>
   10280:	|      add.l d0,d0
   10282:	|      movea.l d0,a0
   10284:	|      adda.l #66192,a0
   1028a:	|      move.w (a0),d0
   1028c:	|      jmp (10290 <getBoolean+0x1e>,pc,d0.w)
   10290:	|      ori.b #26,(a6)
   10294:	|      ori.w #68,(114,a2,d0.w)
   1029a:	|      ori.w #46,(114,a2,d0.w)
   102a0:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   102a6:	|      clr.w d0
   102a8:	|  /-- bra.s 10306 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   102aa:	|  |   movea.l 4(sp),a0
   102ae:	|  |   move.l 4(a0),d0
   102b2:	|  |   sne d0
   102b4:	|  |   neg.b d0
   102b6:	|  |   move.b d0,d0
   102b8:	|  |   andi.w #255,d0
   102bc:	|  +-- bra.s 10306 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   102be:	|  |   movea.l 4(sp),a0
   102c2:	|  |   movea.l 4(a0),a0
   102c6:	|  |   move.l (a0),d0
   102c8:	|  |   sne d0
   102ca:	|  |   neg.b d0
   102cc:	|  |   move.b d0,d0
   102ce:	|  |   andi.w #255,d0
   102d2:	|  +-- bra.s 10306 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   102d4:	|  |   movea.l 4(sp),a0
   102d8:	|  |   movea.l 4(a0),a0
   102dc:	|  |   move.b (a0),d0
   102de:	|  |   sne d0
   102e0:	|  |   neg.b d0
   102e2:	|  |   move.b d0,d0
   102e4:	|  |   andi.w #255,d0
   102e8:	|  +-- bra.s 10306 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   102ea:	|  |   movea.l 4(sp),a0
   102ee:	|  |   movea.l 4(a0),a0
   102f2:	|  |   move.l 4(a0),d0
   102f6:	|  |   sne d0
   102f8:	|  |   neg.b d0
   102fa:	|  |   move.b d0,d0
   102fc:	|  |   andi.w #255,d0
   10300:	|  +-- bra.s 10306 <getBoolean+0x94>

		default:
		break;
   10302:	\--|-> nop
	}
	return TRUE;
   10304:	   |   moveq #1,d0
}
   10306:	   \-> rts

00010308 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   10308:	      /----------> lea -76(sp),sp
   1030c:	      |            move.l a6,-(sp)
	switch (from->varType) {
   1030e:	      |            movea.l 84(sp),a0
   10312:	      |            move.l (a0),d0
   10314:	      |            moveq #10,d1
   10316:	      |            cmp.l d0,d1
   10318:	/-----|----------- bcs.w 105b6 <getTextFromAnyVar+0x2ae>
   1031c:	|     |            add.l d0,d0
   1031e:	|     |            movea.l d0,a0
   10320:	|     |            adda.l #66348,a0
   10326:	|     |            move.w (a0),d0
   10328:	|     |            jmp (1032c <getTextFromAnyVar+0x24>,pc,d0.w)
   1032c:	|     |            .short 0x028a
   1032e:	|     |            bset d0,(a0)+
   10330:	|     |            .short 0x028a
   10332:	|     |            ori.b #-118,(a6)
   10336:	|     |            andi.b #8,ccr
   1033a:	|     |            andi.w #650,-(a0)
   1033e:	|     |            .short 0x028a
   10340:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   10346:	|     |            move.l 4(a0),d0
   1034a:	|     |            move.l d0,-(sp)
   1034c:	|     |            jsr b8 <copyString>
   10352:	|     |            addq.l #4,sp
   10354:	|  /--|----------- bra.w 105d8 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   10358:	|  |  |            pea 15a56 <zbuffer.c.d110ca03+0x510>
   1035e:	|  |  |            jsr b8 <copyString>
   10364:	|  |  |            addq.l #4,sp
   10366:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   1036a:	|  |  |            clr.l 72(sp)
   1036e:	|  |  |     /----- bra.w 10418 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   10372:	|  |  |  /--|----> pea 15a5c <zbuffer.c.d110ca03+0x516>
   10378:	|  |  |  |  |      move.l 80(sp),-(sp)
   1037c:	|  |  |  |  |      jsr f25e <joinStrings>
   10382:	|  |  |  |  |      addq.l #8,sp
   10384:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   10388:	|  |  |  |  |  /-- bne.s 10390 <getTextFromAnyVar+0x88>
   1038a:	|  |  |  |  |  |   moveq #0,d0
   1038c:	|  +--|--|--|--|-- bra.w 105d8 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   10390:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   10396:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   1039c:	|  |  |  |  |      movea.l d0,a6
   1039e:	|  |  |  |  |      movea.l 56(sp),a1
   103a2:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   103a6:	|  |  |  |  |      movea.l 84(sp),a0
   103aa:	|  |  |  |  |      movea.l 4(a0),a0
   103ae:	|  |  |  |  |      move.l (a0),d1
   103b0:	|  |  |  |  |      move.l 72(sp),d0
   103b4:	|  |  |  |  |      lsl.l #3,d0
   103b6:	|  |  |  |  |      add.l d1,d0
   103b8:	|  |  |  |  |      move.l d0,-(sp)
   103ba:	|  |  +--|--|----- jsr 10308 <getTextFromAnyVar>(pc)
   103be:	|  |  |  |  |      addq.l #4,sp
   103c0:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   103c4:	|  |  |  |  |      move.l 52(sp),-(sp)
   103c8:	|  |  |  |  |      move.l 64(sp),-(sp)
   103cc:	|  |  |  |  |      jsr f25e <joinStrings>
   103d2:	|  |  |  |  |      addq.l #8,sp
   103d4:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   103d8:	|  |  |  |  |  /-- bne.s 103e0 <getTextFromAnyVar+0xd8>
   103da:	|  |  |  |  |  |   moveq #0,d0
   103dc:	|  +--|--|--|--|-- bra.w 105d8 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   103e0:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   103e6:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   103ec:	|  |  |  |  |      movea.l d0,a6
   103ee:	|  |  |  |  |      movea.l 48(sp),a1
   103f2:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   103f6:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   103fa:	|  |  |  |  |      move.l 60(sp),44(sp)
   10400:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   10406:	|  |  |  |  |      movea.l d0,a6
   10408:	|  |  |  |  |      movea.l 44(sp),a1
   1040c:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   10410:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   10414:	|  |  |  |  |      addq.l #1,72(sp)
   10418:	|  |  |  |  \----> movea.l 84(sp),a0
   1041c:	|  |  |  |         movea.l 4(a0),a0
   10420:	|  |  |  |         move.l 4(a0),d0
   10424:	|  |  |  |         cmp.l 72(sp),d0
   10428:	|  |  |  \-------- bgt.w 10372 <getTextFromAnyVar+0x6a>
			}
			return builder;
   1042c:	|  |  |            move.l 76(sp),d0
   10430:	|  +--|----------- bra.w 105d8 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   10434:	|  |  |            pea 15a5e <zbuffer.c.d110ca03+0x518>
   1043a:	|  |  |            jsr b8 <copyString>
   10440:	|  |  |            addq.l #4,sp
   10442:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   10446:	|  |  |            movea.l 84(sp),a0
   1044a:	|  |  |            movea.l 4(a0),a0
   1044e:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   10452:	|  |  |     /----- bra.w 104f4 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   10456:	|  |  |  /--|----> pea 15a5c <zbuffer.c.d110ca03+0x516>
   1045c:	|  |  |  |  |      move.l 72(sp),-(sp)
   10460:	|  |  |  |  |      jsr f25e <joinStrings>
   10466:	|  |  |  |  |      addq.l #8,sp
   10468:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   1046c:	|  |  |  |  |  /-- bne.s 10474 <getTextFromAnyVar+0x16c>
   1046e:	|  |  |  |  |  |   moveq #0,d0
   10470:	|  +--|--|--|--|-- bra.w 105d8 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   10474:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   1047a:	|  |  |  |  |      move.l 17b28 <SysBase>,d0
   10480:	|  |  |  |  |      movea.l d0,a6
   10482:	|  |  |  |  |      movea.l 32(sp),a1
   10486:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   1048a:	|  |  |  |  |      move.l 64(sp),d0
   1048e:	|  |  |  |  |      move.l d0,-(sp)
   10490:	|  |  \--|--|----- jsr 10308 <getTextFromAnyVar>(pc)
   10494:	|  |     |  |      addq.l #4,sp
   10496:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   1049a:	|  |     |  |      move.l 28(sp),-(sp)
   1049e:	|  |     |  |      move.l 40(sp),-(sp)
   104a2:	|  |     |  |      jsr f25e <joinStrings>
   104a8:	|  |     |  |      addq.l #8,sp
   104aa:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   104ae:	|  |     |  |  /-- bne.s 104b6 <getTextFromAnyVar+0x1ae>
   104b0:	|  |     |  |  |   moveq #0,d0
   104b2:	|  +-----|--|--|-- bra.w 105d8 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   104b6:	|  |     |  |  \-> move.l 28(sp),24(sp)
   104bc:	|  |     |  |      move.l 17b28 <SysBase>,d0
   104c2:	|  |     |  |      movea.l d0,a6
   104c4:	|  |     |  |      movea.l 24(sp),a1
   104c8:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   104cc:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   104d0:	|  |     |  |      move.l 36(sp),20(sp)
   104d6:	|  |     |  |      move.l 17b28 <SysBase>,d0
   104dc:	|  |     |  |      movea.l d0,a6
   104de:	|  |     |  |      movea.l 20(sp),a1
   104e2:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   104e6:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   104ea:	|  |     |  |      movea.l 64(sp),a0
   104ee:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   104f4:	|  |     |  \----> tst.l 64(sp)
   104f8:	|  |     \-------- bne.w 10456 <getTextFromAnyVar+0x14e>
			}
			return builder;
   104fc:	|  |               move.l 68(sp),d0
   10500:	|  +-------------- bra.w 105d8 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   10504:	|  |               moveq #10,d0
   10506:	|  |               move.l d0,16(sp)
   1050a:	|  |               clr.l 12(sp)
   1050e:	|  |               move.l 17b28 <SysBase>,d0
   10514:	|  |               movea.l d0,a6
   10516:	|  |               move.l 16(sp),d0
   1051a:	|  |               move.l 12(sp),d1
   1051e:	|  |               jsr -684(a6)
   10522:	|  |               move.l d0,8(sp)
   10526:	|  |               move.l 8(sp),d0
   1052a:	|  |               move.l d0,4(sp)
			if (! buff) {
   1052e:	|  |           /-- bne.s 10544 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   10530:	|  |           |   pea 15a65 <zbuffer.c.d110ca03+0x51f>
   10536:	|  |           |   jsr 11d08 <KPrintF>
   1053c:	|  |           |   addq.l #4,sp
				return NULL;
   1053e:	|  |           |   moveq #0,d0
   10540:	|  +-----------|-- bra.w 105d8 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   10544:	|  |           \-> movea.l 84(sp),a0
   10548:	|  |               move.l 4(a0),d0
   1054c:	|  |               move.l d0,-(sp)
   1054e:	|  |               pea 15a8f <zbuffer.c.d110ca03+0x549>
   10554:	|  |               move.l 12(sp),-(sp)
   10558:	|  |               jsr f53c <sprintf>
   1055e:	|  |               lea 12(sp),sp
			return buff;
   10562:	|  |               move.l 4(sp),d0
   10566:	|  +-------------- bra.s 105d8 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   10568:	|  |               movea.l 84(sp),a0
   1056c:	|  |               move.l 4(a0),d0
   10570:	|  |               move.l d0,-(sp)
   10572:	|  |               jsr 108a <resourceNameFromNum>
   10578:	|  |               addq.l #4,sp
   1057a:	|  |               move.l d0,-(sp)
   1057c:	|  |               pea 12dc9 <cursors.c.46c58bd4+0x2>
   10582:	|  |               jsr f25e <joinStrings>
   10588:	|  |               addq.l #8,sp
   1058a:	|  +-------------- bra.s 105d8 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   1058c:	|  |               movea.l 84(sp),a0
   10590:	|  |               move.l 4(a0),d0
   10594:	|  |               move.l d0,-(sp)
   10596:	|  |               jsr 8d00 <findObjectType>
   1059c:	|  |               addq.l #4,sp
   1059e:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   105a2:	+--|-------------- beq.s 105b6 <getTextFromAnyVar+0x2ae>
   105a4:	|  |               movea.l 40(sp),a0
   105a8:	|  |               move.l (a0),d0
   105aa:	|  |               move.l d0,-(sp)
   105ac:	|  |               jsr b8 <copyString>
   105b2:	|  |               addq.l #4,sp
   105b4:	|  +-------------- bra.s 105d8 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   105b6:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   105b8:	   |               movea.l 84(sp),a0
   105bc:	   |               move.l (a0),d0
   105be:	   |               add.l d0,d0
   105c0:	   |               movea.l d0,a1
   105c2:	   |               adda.l d0,a1
   105c4:	   |               lea 16570 <typeName>,a0
   105ca:	   |               move.l (0,a1,a0.l),d0
   105ce:	   |               move.l d0,-(sp)
   105d0:	   |               jsr b8 <copyString>
   105d6:	   |               addq.l #4,sp
}
   105d8:	   \-------------> movea.l (sp)+,a6
   105da:	                   lea 76(sp),sp
   105de:	                   rts

000105e0 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   105e0:	move.l 4(sp),-(sp)
   105e4:	jsr ff80 <unlinkVar>
   105ea:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   105ec:	movea.l 4(sp),a0
   105f0:	moveq #9,d0
   105f2:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   105f4:	movea.l 4(sp),a0
   105f8:	move.l 8(sp),4(a0)
}
   105fe:	nop
   10600:	rts

00010602 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   10602:	move.l 4(sp),-(sp)
   10606:	jsr ff80 <unlinkVar>
   1060c:	addq.l #4,sp
	thisVar->varType = vT;
   1060e:	movea.l 4(sp),a0
   10612:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   10616:	movea.l 4(sp),a0
   1061a:	move.l 12(sp),4(a0)
}
   10620:	nop
   10622:	rts

00010624 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   10624:	      /-- bra.s 10636 <stackGetByIndex+0x12>
        vS = vS->next;
   10626:	/-----|-> movea.l 4(sp),a0
   1062a:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   10630:	|     +-- bne.s 10636 <stackGetByIndex+0x12>
            return NULL;
   10632:	|     |   moveq #0,d0
   10634:	|  /--|-- bra.s 1064a <stackGetByIndex+0x26>
    while (theIndex--) {
   10636:	|  |  \-> move.l 8(sp),d0
   1063a:	|  |      move.l d0,d1
   1063c:	|  |      subq.l #1,d1
   1063e:	|  |      move.l d1,8(sp)
   10642:	|  |      tst.l d0
   10644:	\--|----- bne.s 10626 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   10646:	   |      move.l 4(sp),d0
}
   1064a:	   \----> rts

0001064c <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1064c:	          tst.l 4(sp)
   10650:	      /-- bne.s 10660 <stackFindLast+0x14>
		return NULL;
   10652:	      |   moveq #0,d0
   10654:	/-----|-- bra.s 1066e <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   10656:	|  /--|-> movea.l 4(sp),a0
   1065a:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   10660:	|  |  \-> movea.l 4(sp),a0
   10664:	|  |      move.l 8(a0),d0
   10668:	|  \----- bne.s 10656 <stackFindLast+0xa>

	return hunt;
   1066a:	|         move.l 4(sp),d0
}
   1066e:	\-------> rts

00010670 <stackSize>:

int stackSize (const struct stackHandler * me) {
   10670:	       subq.l #8,sp
	int r = 0;
   10672:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   10676:	       movea.l 12(sp),a0
   1067a:	       move.l (a0),(sp)
	while (a) {
   1067c:	   /-- bra.s 10688 <stackSize+0x18>
		r ++;
   1067e:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   10682:	|  |   movea.l (sp),a0
   10684:	|  |   move.l 8(a0),(sp)
	while (a) {
   10688:	|  \-> tst.l (sp)
   1068a:	\----- bne.s 1067e <stackSize+0xe>
	}
	return r;
   1068c:	       move.l 4(sp),d0
}
   10690:	       addq.l #8,sp
   10692:	       rts

00010694 <trimStack>:

void trimStack (struct variableStack ** stack) {
   10694:	subq.l #8,sp
   10696:	move.l a6,-(sp)
	struct variableStack* killMe = *stack;
   10698:	movea.l 16(sp),a0
   1069c:	move.l (a0),8(sp)
	*stack = (*stack)->next;
   106a0:	movea.l 16(sp),a0
   106a4:	movea.l (a0),a0
   106a6:	move.l 8(a0),d0
   106aa:	movea.l 16(sp),a0
   106ae:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   106b0:	move.l 8(sp),d0
   106b4:	move.l d0,-(sp)
   106b6:	jsr ff80 <unlinkVar>
   106bc:	addq.l #4,sp
	FreeVec(killMe);
   106be:	move.l 8(sp),4(sp)
   106c4:	move.l 17b28 <SysBase>,d0
   106ca:	movea.l d0,a6
   106cc:	movea.l 4(sp),a1
   106d0:	jsr -690(a6)
   106d4:	nop
   106d6:	movea.l (sp)+,a6
   106d8:	addq.l #8,sp
   106da:	rts

000106dc <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   106dc:	pea 15a92 <zbuffer.c.d110ca03+0x54c>
   106e2:	jsr 11d08 <KPrintF>
   106e8:	addq.l #4,sp
	return FALSE;
   106ea:	clr.w d0
}
   106ec:	rts

000106ee <stringWidth>:

int stringWidth (char * theText) {
   106ee:	       subq.l #8,sp
	int a = 0;
   106f0:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   106f4:	       clr.l (sp)

	if (! fontTableSize) return 0;
   106f6:	       move.l 17c16 <fontTableSize>,d0
   106fc:	/----- bne.s 10702 <stringWidth+0x14>
   106fe:	|      moveq #0,d0
   10700:	|  /-- bra.s 10704 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   10702:	\--|-> move.l (sp),d0
}
   10704:	   \-> addq.l #8,sp
   10706:	       rts

00010708 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   10708:	pea 15ab9 <zbuffer.c.d110ca03+0x573>
   1070e:	jsr 11d08 <KPrintF>
   10714:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   10716:	moveq #1,d0
}
   10718:	rts

0001071a <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   1071a:	       lea -16(sp),sp
   1071e:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   10720:	       moveq #36,d0
   10722:	       move.l d0,16(sp)
   10726:	       clr.l 12(sp)
   1072a:	       move.l 17b28 <SysBase>,d0
   10730:	       movea.l d0,a6
   10732:	       move.l 16(sp),d0
   10736:	       move.l 12(sp),d1
   1073a:	       jsr -684(a6)
   1073e:	       move.l d0,8(sp)
   10742:	       move.l 8(sp),d0
   10746:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   1074a:	   /-- bne.s 10752 <addScreenRegion+0x38>
   1074c:	   |   clr.w d0
   1074e:	/--|-- bra.w 107d2 <addScreenRegion+0xb8>
    newRegion->di = di;
   10752:	|  \-> movea.l 4(sp),a0
   10756:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   1075c:	|      movea.l 4(sp),a0
   10760:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   10764:	|      movea.l 4(sp),a0
   10768:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   1076e:	|      movea.l 4(sp),a0
   10772:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   10778:	|      movea.l 4(sp),a0
   1077c:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   10782:	|      movea.l 4(sp),a0
   10786:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   1078c:	|      movea.l 4(sp),a0
   10790:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   10796:	|      move.l 52(sp),-(sp)
   1079a:	|      jsr 8df0 <loadObjectType>
   107a0:	|      addq.l #4,sp
   107a2:	|      movea.l 4(sp),a0
   107a6:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   107aa:	|      move.l 17c1a <allScreenRegions>,d0
   107b0:	|      movea.l 4(sp),a0
   107b4:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   107b8:	|      move.l 4(sp),17c1a <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   107c0:	|      movea.l 4(sp),a0
   107c4:	|      move.l 28(a0),d0
   107c8:	|      sne d0
   107ca:	|      neg.b d0
   107cc:	|      move.b d0,d0
   107ce:	|      andi.w #255,d0
}
   107d2:	\----> movea.l (sp)+,a6
   107d4:	       lea 16(sp),sp
   107d8:	       rts

000107da <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   107da:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   107dc:	             move.l 17c1a <allScreenRegions>,(sp)

	while (thisRegion) {
   107e2:	   /-------- bra.s 107fe <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   107e4:	/--|-------> movea.l (sp),a0
   107e6:	|  |         movea.l 28(a0),a0
   107ea:	|  |         move.l 4(a0),d0
   107ee:	|  |         cmp.l 8(sp),d0
   107f2:	|  |     /-- bne.s 107f8 <getRegionForObject+0x1e>
			return thisRegion;
   107f4:	|  |     |   move.l (sp),d0
   107f6:	|  |  /--|-- bra.s 10804 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   107f8:	|  |  |  \-> movea.l (sp),a0
   107fa:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   107fe:	|  \--|----> tst.l (sp)
   10800:	\-----|----- bne.s 107e4 <getRegionForObject+0xa>
	}

	return NULL;
   10802:	      |      moveq #0,d0
}
   10804:	      \----> addq.l #4,sp
   10806:	             rts

00010808 <killAllRegions>:

void killAllRegions () {
   10808:	       subq.l #8,sp
   1080a:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1080c:	   /-- bra.s 1084e <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1080e:	/--|-> move.l 17c1a <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   10816:	|  |   movea.l 17c1a <allScreenRegions>,a0
   1081c:	|  |   move.l 32(a0),d0
   10820:	|  |   move.l d0,17c1a <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   10826:	|  |   movea.l 8(sp),a0
   1082a:	|  |   move.l 28(a0),d0
   1082e:	|  |   move.l d0,-(sp)
   10830:	|  |   jsr 90a8 <removeObjectType>
   10836:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   10838:	|  |   move.l 8(sp),4(sp)
   1083e:	|  |   move.l 17b28 <SysBase>,d0
   10844:	|  |   movea.l d0,a6
   10846:	|  |   movea.l 4(sp),a1
   1084a:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   1084e:	|  \-> move.l 17c1a <allScreenRegions>,d0
   10854:	\----- bne.s 1080e <killAllRegions+0x6>
	}
	overRegion = NULL;
   10856:	       clr.l 17c1e <overRegion>
}
   1085c:	       nop
   1085e:	       movea.l (sp)+,a6
   10860:	       addq.l #8,sp
   10862:	       rts

00010864 <loadRegions>:

void loadRegions (BPTR fp) {
   10864:	       lea -24(sp),sp
   10868:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   1086a:	       move.l 32(sp),-(sp)
   1086e:	       jsr 6bc <get2bytes>
   10874:	       addq.l #4,sp
   10876:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   1087a:	       move.l #97306,20(sp)

	while (numRegions --) {
   10882:	   /-- bra.w 10960 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   10886:	/--|-> moveq #36,d0
   10888:	|  |   move.l d0,16(sp)
   1088c:	|  |   clr.l 12(sp)
   10890:	|  |   move.l 17b28 <SysBase>,d0
   10896:	|  |   movea.l d0,a6
   10898:	|  |   move.l 16(sp),d0
   1089c:	|  |   move.l 12(sp),d1
   108a0:	|  |   jsr -684(a6)
   108a4:	|  |   move.l d0,8(sp)
   108a8:	|  |   move.l 8(sp),d0
   108ac:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   108b0:	|  |   movea.l 20(sp),a0
   108b4:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   108b8:	|  |   moveq #32,d1
   108ba:	|  |   add.l 4(sp),d1
   108be:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   108c2:	|  |   move.l 32(sp),-(sp)
   108c6:	|  |   jsr 6bc <get2bytes>
   108cc:	|  |   addq.l #4,sp
   108ce:	|  |   movea.l 4(sp),a0
   108d2:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   108d4:	|  |   move.l 32(sp),-(sp)
   108d8:	|  |   jsr 6bc <get2bytes>
   108de:	|  |   addq.l #4,sp
   108e0:	|  |   movea.l 4(sp),a0
   108e4:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   108e8:	|  |   move.l 32(sp),-(sp)
   108ec:	|  |   jsr 6bc <get2bytes>
   108f2:	|  |   addq.l #4,sp
   108f4:	|  |   movea.l 4(sp),a0
   108f8:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   108fc:	|  |   move.l 32(sp),-(sp)
   10900:	|  |   jsr 6bc <get2bytes>
   10906:	|  |   addq.l #4,sp
   10908:	|  |   movea.l 4(sp),a0
   1090c:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   10910:	|  |   move.l 32(sp),-(sp)
   10914:	|  |   jsr 6bc <get2bytes>
   1091a:	|  |   addq.l #4,sp
   1091c:	|  |   movea.l 4(sp),a0
   10920:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   10924:	|  |   move.l 32(sp),-(sp)
   10928:	|  |   jsr 6bc <get2bytes>
   1092e:	|  |   addq.l #4,sp
   10930:	|  |   movea.l 4(sp),a0
   10934:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   10938:	|  |   move.l 32(sp),-(sp)
   1093c:	|  |   jsr 6bc <get2bytes>
   10942:	|  |   addq.l #4,sp
   10944:	|  |   movea.l 4(sp),a0
   10948:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   1094c:	|  |   move.l 32(sp),-(sp)
   10950:	|  |   jsr 8d9e <loadObjectRef>
   10956:	|  |   addq.l #4,sp
   10958:	|  |   movea.l 4(sp),a0
   1095c:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   10960:	|  \-> move.l 24(sp),d0
   10964:	|      move.l d0,d1
   10966:	|      subq.l #1,d1
   10968:	|      move.l d1,24(sp)
   1096c:	|      tst.l d0
   1096e:	\----- bne.w 10886 <loadRegions+0x22>
	}
	* pointy = NULL;
   10972:	       movea.l 20(sp),a0
   10976:	       clr.l (a0)
}
   10978:	       nop
   1097a:	       movea.l (sp)+,a6
   1097c:	       lea 24(sp),sp
   10980:	       rts

00010982 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   10982:	             lea -12(sp),sp
   10986:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   10988:	             move.l #97306,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   10990:	   /-------- bra.s 10a0a <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   10992:	/--|-------> movea.l 12(sp),a0
   10996:	|  |         movea.l (a0),a0
   10998:	|  |         movea.l 28(a0),a0
   1099c:	|  |         move.l 4(a0),d0
   109a0:	|  |         cmp.l 20(sp),d0
   109a4:	|  |  /----- bne.s 109fc <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   109a6:	|  |  |      movea.l 12(sp),a0
   109aa:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   109ae:	|  |  |      movea.l 8(sp),a0
   109b2:	|  |  |      move.l 32(a0),d0
   109b6:	|  |  |      movea.l 12(sp),a0
   109ba:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   109bc:	|  |  |      movea.l 8(sp),a0
   109c0:	|  |  |      move.l 28(a0),d0
   109c4:	|  |  |      move.l d0,-(sp)
   109c6:	|  |  |      jsr 90a8 <removeObjectType>
   109cc:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   109ce:	|  |  |      move.l 17c1e <overRegion>,d0
   109d4:	|  |  |      cmp.l 8(sp),d0
   109d8:	|  |  |  /-- bne.s 109e0 <removeScreenRegion+0x5e>
   109da:	|  |  |  |   clr.l 17c1e <overRegion>
            FreeVec(killMe);
   109e0:	|  |  |  \-> move.l 8(sp),4(sp)
   109e6:	|  |  |      move.l 17b28 <SysBase>,d0
   109ec:	|  |  |      movea.l d0,a6
   109ee:	|  |  |      movea.l 4(sp),a1
   109f2:	|  |  |      jsr -690(a6)
            killMe = NULL;
   109f6:	|  |  |      clr.l 8(sp)
   109fa:	|  +--|----- bra.s 10a0a <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   109fc:	|  |  \----> movea.l 12(sp),a0
   10a00:	|  |         move.l (a0),d0
   10a02:	|  |         moveq #32,d1
   10a04:	|  |         add.l d0,d1
   10a06:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   10a0a:	|  \-------> movea.l 12(sp),a0
   10a0e:	|            move.l (a0),d0
   10a10:	\----------- bne.s 10992 <removeScreenRegion+0x10>
        }
    }
}
   10a12:	             nop
   10a14:	             nop
   10a16:	             movea.l (sp)+,a6
   10a18:	             lea 12(sp),sp
   10a1c:	             rts

00010a1e <saveRegions>:

void saveRegions (BPTR fp) {
   10a1e:	       subq.l #8,sp
	int numRegions = 0;
   10a20:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   10a24:	       move.l 17c1a <allScreenRegions>,(sp)
	while (thisRegion) {
   10a2a:	   /-- bra.s 10a36 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   10a2c:	/--|-> movea.l (sp),a0
   10a2e:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   10a32:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   10a36:	|  \-> tst.l (sp)
   10a38:	\----- bne.s 10a2c <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   10a3a:	       move.l 12(sp),-(sp)
   10a3e:	       move.l 8(sp),-(sp)
   10a42:	       jsr 8d0 <put2bytes>
   10a48:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   10a4a:	       move.l 17c1a <allScreenRegions>,(sp)
	while (thisRegion) {
   10a50:	/----- bra.w 10af8 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   10a54:	|  /-> movea.l (sp),a0
   10a56:	|  |   move.l (a0),d0
   10a58:	|  |   move.l 12(sp),-(sp)
   10a5c:	|  |   move.l d0,-(sp)
   10a5e:	|  |   jsr 8d0 <put2bytes>
   10a64:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   10a66:	|  |   movea.l (sp),a0
   10a68:	|  |   move.l 4(a0),d0
   10a6c:	|  |   move.l 12(sp),-(sp)
   10a70:	|  |   move.l d0,-(sp)
   10a72:	|  |   jsr 8d0 <put2bytes>
   10a78:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   10a7a:	|  |   movea.l (sp),a0
   10a7c:	|  |   move.l 8(a0),d0
   10a80:	|  |   move.l 12(sp),-(sp)
   10a84:	|  |   move.l d0,-(sp)
   10a86:	|  |   jsr 8d0 <put2bytes>
   10a8c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   10a8e:	|  |   movea.l (sp),a0
   10a90:	|  |   move.l 12(a0),d0
   10a94:	|  |   move.l 12(sp),-(sp)
   10a98:	|  |   move.l d0,-(sp)
   10a9a:	|  |   jsr 8d0 <put2bytes>
   10aa0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   10aa2:	|  |   movea.l (sp),a0
   10aa4:	|  |   move.l 16(a0),d0
   10aa8:	|  |   move.l 12(sp),-(sp)
   10aac:	|  |   move.l d0,-(sp)
   10aae:	|  |   jsr 8d0 <put2bytes>
   10ab4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   10ab6:	|  |   movea.l (sp),a0
   10ab8:	|  |   move.l 20(a0),d0
   10abc:	|  |   move.l 12(sp),-(sp)
   10ac0:	|  |   move.l d0,-(sp)
   10ac2:	|  |   jsr 8d0 <put2bytes>
   10ac8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   10aca:	|  |   movea.l (sp),a0
   10acc:	|  |   move.l 24(a0),d0
   10ad0:	|  |   move.l 12(sp),-(sp)
   10ad4:	|  |   move.l d0,-(sp)
   10ad6:	|  |   jsr 8d0 <put2bytes>
   10adc:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   10ade:	|  |   movea.l (sp),a0
   10ae0:	|  |   move.l 28(a0),d0
   10ae4:	|  |   move.l 12(sp),-(sp)
   10ae8:	|  |   move.l d0,-(sp)
   10aea:	|  |   jsr 9148 <saveObjectRef>
   10af0:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   10af2:	|  |   movea.l (sp),a0
   10af4:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   10af8:	\--|-> tst.l (sp)
   10afa:	   \-- bne.w 10a54 <saveRegions+0x36>
	}
}
   10afe:	       nop
   10b00:	       nop
   10b02:	       addq.l #8,sp
   10b04:	       rts

00010b06 <showBoxes>:

void showBoxes () {
   10b06:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   10b08:	       move.l 17c1a <allScreenRegions>,(sp)

	while (huntRegion) {
   10b0e:	/----- bra.w 10baa <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   10b12:	|  /-> movea.l (sp),a0
   10b14:	|  |   move.l 12(a0),d0
   10b18:	|  |   movea.l d0,a1
   10b1a:	|  |   movea.l (sp),a0
   10b1c:	|  |   move.l 4(a0),d0
   10b20:	|  |   move.l d0,d1
   10b22:	|  |   movea.l (sp),a0
   10b24:	|  |   move.l (a0),d0
   10b26:	|  |   move.l a1,-(sp)
   10b28:	|  |   move.l d1,-(sp)
   10b2a:	|  |   move.l d0,-(sp)
   10b2c:	|  |   jsr 8a9c <drawVerticalLine>
   10b32:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   10b36:	|  |   movea.l (sp),a0
   10b38:	|  |   move.l 12(a0),d0
   10b3c:	|  |   movea.l d0,a1
   10b3e:	|  |   movea.l (sp),a0
   10b40:	|  |   move.l 4(a0),d0
   10b44:	|  |   move.l d0,d1
   10b46:	|  |   movea.l (sp),a0
   10b48:	|  |   move.l 8(a0),d0
   10b4c:	|  |   move.l a1,-(sp)
   10b4e:	|  |   move.l d1,-(sp)
   10b50:	|  |   move.l d0,-(sp)
   10b52:	|  |   jsr 8a9c <drawVerticalLine>
   10b58:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   10b5c:	|  |   movea.l (sp),a0
   10b5e:	|  |   move.l 8(a0),d0
   10b62:	|  |   movea.l d0,a1
   10b64:	|  |   movea.l (sp),a0
   10b66:	|  |   move.l 4(a0),d0
   10b6a:	|  |   move.l d0,d1
   10b6c:	|  |   movea.l (sp),a0
   10b6e:	|  |   move.l (a0),d0
   10b70:	|  |   move.l a1,-(sp)
   10b72:	|  |   move.l d1,-(sp)
   10b74:	|  |   move.l d0,-(sp)
   10b76:	|  |   jsr 8a76 <drawHorizontalLine>
   10b7c:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   10b80:	|  |   movea.l (sp),a0
   10b82:	|  |   move.l 8(a0),d0
   10b86:	|  |   movea.l d0,a1
   10b88:	|  |   movea.l (sp),a0
   10b8a:	|  |   move.l 12(a0),d0
   10b8e:	|  |   move.l d0,d1
   10b90:	|  |   movea.l (sp),a0
   10b92:	|  |   move.l (a0),d0
   10b94:	|  |   move.l a1,-(sp)
   10b96:	|  |   move.l d1,-(sp)
   10b98:	|  |   move.l d0,-(sp)
   10b9a:	|  |   jsr 8a76 <drawHorizontalLine>
   10ba0:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   10ba4:	|  |   movea.l (sp),a0
   10ba6:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   10baa:	\--|-> tst.l (sp)
   10bac:	   \-- bne.w 10b12 <showBoxes+0xc>
	}
   10bb0:	       nop
   10bb2:	       nop
   10bb4:	       addq.l #4,sp
   10bb6:	       rts

00010bb8 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   10bb8:	       lea -32(sp),sp
   10bbc:	       move.l d3,-(sp)
   10bbe:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   10bc0:	       move.l 60(sp),d0
   10bc4:	       sub.l 52(sp),d0
   10bc8:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   10bcc:	       move.l 64(sp),d0
   10bd0:	       sub.l 56(sp),d0
   10bd4:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   10bd8:	       move.l 68(sp),d0
   10bdc:	       sub.l 52(sp),d0
   10be0:	       move.l 36(sp),-(sp)
   10be4:	       move.l d0,-(sp)
   10be6:	       jsr 126ba <__mulsi3>
   10bec:	       addq.l #8,sp
   10bee:	       move.l d0,d2
   10bf0:	       move.l 72(sp),d0
   10bf4:	       sub.l 56(sp),d0
   10bf8:	       move.l 32(sp),-(sp)
   10bfc:	       move.l d0,-(sp)
   10bfe:	       jsr 126ba <__mulsi3>
   10c04:	       addq.l #8,sp
   10c06:	       add.l d2,d0
   10c08:	       move.l d0,-(sp)
   10c0a:	       jsr 12120 <__floatsidf>
   10c10:	       addq.l #4,sp
   10c12:	       move.l d0,16(sp)
   10c16:	       move.l d1,20(sp)
   10c1a:	       move.l 16(sp),24(sp)
   10c20:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   10c26:	       move.l 36(sp),-(sp)
   10c2a:	       move.l 40(sp),-(sp)
   10c2e:	       jsr 126ba <__mulsi3>
   10c34:	       addq.l #8,sp
   10c36:	       move.l d0,d2
   10c38:	       move.l 32(sp),-(sp)
   10c3c:	       move.l 36(sp),-(sp)
   10c40:	       jsr 126ba <__mulsi3>
   10c46:	       addq.l #8,sp
   10c48:	       add.l d2,d0
   10c4a:	       move.l d0,-(sp)
   10c4c:	       jsr 12120 <__floatsidf>
   10c52:	       addq.l #4,sp
   10c54:	       move.l d1,-(sp)
   10c56:	       move.l d0,-(sp)
   10c58:	       move.l 36(sp),-(sp)
   10c5c:	       move.l 36(sp),-(sp)
   10c60:	       jsr 11faa <__divdf3>
   10c66:	       lea 16(sp),sp
   10c6a:	       move.l d0,8(sp)
   10c6e:	       move.l d1,12(sp)
   10c72:	       move.l 8(sp),24(sp)
   10c78:	       move.l 12(sp),28(sp)

	if (m < 0) {
   10c7e:	       clr.l -(sp)
   10c80:	       clr.l -(sp)
   10c82:	       move.l 36(sp),-(sp)
   10c86:	       move.l 36(sp),-(sp)
   10c8a:	       jsr 12338 <__ltdf2>
   10c90:	       lea 16(sp),sp
   10c94:	       tst.l d0
   10c96:	   /-- bge.s 10cac <closestPointOnLine+0xf4>
		*closestX = x1;
   10c98:	   |   movea.l 44(sp),a0
   10c9c:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   10ca0:	   |   movea.l 48(sp),a0
   10ca4:	   |   move.l 56(sp),(a0)
   10ca8:	/--|-- bra.w 10d8e <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   10cac:	|  \-> clr.l -(sp)
   10cae:	|      move.l #1072693248,-(sp)
   10cb4:	|      move.l 36(sp),-(sp)
   10cb8:	|      move.l 36(sp),-(sp)
   10cbc:	|      jsr 1227e <__gtdf2>
   10cc2:	|      lea 16(sp),sp
   10cc6:	|      tst.l d0
   10cc8:	|  /-- ble.s 10cde <closestPointOnLine+0x126>
		*closestX = x2;
   10cca:	|  |   movea.l 44(sp),a0
   10cce:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   10cd2:	|  |   movea.l 48(sp),a0
   10cd6:	|  |   move.l 64(sp),(a0)
   10cda:	+--|-- bra.w 10d8e <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   10cde:	|  \-> move.l 52(sp),-(sp)
   10ce2:	|      jsr 12120 <__floatsidf>
   10ce8:	|      addq.l #4,sp
   10cea:	|      move.l d0,d2
   10cec:	|      move.l d1,d3
   10cee:	|      move.l 36(sp),-(sp)
   10cf2:	|      jsr 12120 <__floatsidf>
   10cf8:	|      addq.l #4,sp
   10cfa:	|      move.l 28(sp),-(sp)
   10cfe:	|      move.l 28(sp),-(sp)
   10d02:	|      move.l d1,-(sp)
   10d04:	|      move.l d0,-(sp)
   10d06:	|      jsr 121b0 <__muldf3>
   10d0c:	|      lea 16(sp),sp
   10d10:	|      move.l d1,-(sp)
   10d12:	|      move.l d0,-(sp)
   10d14:	|      move.l d3,-(sp)
   10d16:	|      move.l d2,-(sp)
   10d18:	|      jsr 11f48 <__adddf3>
   10d1e:	|      lea 16(sp),sp
   10d22:	|      move.l d1,-(sp)
   10d24:	|      move.l d0,-(sp)
   10d26:	|      jsr 120b8 <__fixdfsi>
   10d2c:	|      addq.l #8,sp
   10d2e:	|      movea.l 44(sp),a0
   10d32:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   10d34:	|      move.l 56(sp),-(sp)
   10d38:	|      jsr 12120 <__floatsidf>
   10d3e:	|      addq.l #4,sp
   10d40:	|      move.l d0,d2
   10d42:	|      move.l d1,d3
   10d44:	|      move.l 32(sp),-(sp)
   10d48:	|      jsr 12120 <__floatsidf>
   10d4e:	|      addq.l #4,sp
   10d50:	|      move.l 28(sp),-(sp)
   10d54:	|      move.l 28(sp),-(sp)
   10d58:	|      move.l d1,-(sp)
   10d5a:	|      move.l d0,-(sp)
   10d5c:	|      jsr 121b0 <__muldf3>
   10d62:	|      lea 16(sp),sp
   10d66:	|      move.l d1,-(sp)
   10d68:	|      move.l d0,-(sp)
   10d6a:	|      move.l d3,-(sp)
   10d6c:	|      move.l d2,-(sp)
   10d6e:	|      jsr 11f48 <__adddf3>
   10d74:	|      lea 16(sp),sp
   10d78:	|      move.l d1,-(sp)
   10d7a:	|      move.l d0,-(sp)
   10d7c:	|      jsr 120b8 <__fixdfsi>
   10d82:	|      addq.l #8,sp
   10d84:	|      movea.l 48(sp),a0
   10d88:	|      move.l d0,(a0)
		return TRUE;
   10d8a:	|      moveq #1,d0
   10d8c:	|  /-- bra.s 10d90 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   10d8e:	\--|-> clr.w d0
}
   10d90:	   \-> move.l (sp)+,d2
   10d92:	       move.l (sp)+,d3
   10d94:	       lea 32(sp),sp
   10d98:	       rts

00010d9a <drawFloor>:

void drawFloor() {
   10d9a:	                lea -12(sp),sp
   10d9e:	                move.l d3,-(sp)
   10da0:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   10da2:	                clr.l 16(sp)
   10da6:	   /----------- bra.w 10fba <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   10daa:	/--|----------> movea.l 17c22 <currentFloor>,a0
   10db0:	|  |            move.l 12(a0),d1
   10db4:	|  |            move.l 16(sp),d0
   10db8:	|  |            lsl.l #3,d0
   10dba:	|  |            movea.l d1,a0
   10dbc:	|  |            adda.l d0,a0
   10dbe:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   10dc2:	|  |            moveq #1,d0
   10dc4:	|  |            cmp.l 8(sp),d0
   10dc8:	|  |  /-------- bge.w 10fb6 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   10dcc:	|  |  |         moveq #1,d0
   10dce:	|  |  |         move.l d0,12(sp)
   10dd2:	|  |  |     /-- bra.w 10ecc <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   10dd6:	|  |  |  /--|-> movea.l 17c22 <currentFloor>,a0
   10ddc:	|  |  |  |  |   move.l 4(a0),d1
   10de0:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   10de6:	|  |  |  |  |   movea.l 12(a0),a0
   10dea:	|  |  |  |  |   move.l 16(sp),d0
   10dee:	|  |  |  |  |   lsl.l #3,d0
   10df0:	|  |  |  |  |   adda.l d0,a0
   10df2:	|  |  |  |  |   movea.l 4(a0),a0
   10df6:	|  |  |  |  |   move.l 12(sp),d0
   10dfa:	|  |  |  |  |   add.l d0,d0
   10dfc:	|  |  |  |  |   add.l d0,d0
   10dfe:	|  |  |  |  |   adda.l d0,a0
   10e00:	|  |  |  |  |   move.l (a0),d0
   10e02:	|  |  |  |  |   lsl.l #3,d0
   10e04:	|  |  |  |  |   movea.l d1,a0
   10e06:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   10e08:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   10e0c:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   10e12:	|  |  |  |  |   move.l 4(a0),d1
   10e16:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   10e1c:	|  |  |  |  |   movea.l 12(a0),a0
   10e20:	|  |  |  |  |   move.l 16(sp),d0
   10e24:	|  |  |  |  |   lsl.l #3,d0
   10e26:	|  |  |  |  |   adda.l d0,a0
   10e28:	|  |  |  |  |   movea.l 4(a0),a0
   10e2c:	|  |  |  |  |   move.l 12(sp),d0
   10e30:	|  |  |  |  |   add.l d0,d0
   10e32:	|  |  |  |  |   add.l d0,d0
   10e34:	|  |  |  |  |   adda.l d0,a0
   10e36:	|  |  |  |  |   move.l (a0),d0
   10e38:	|  |  |  |  |   lsl.l #3,d0
   10e3a:	|  |  |  |  |   movea.l d1,a0
   10e3c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   10e3e:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   10e40:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   10e46:	|  |  |  |  |   move.l 4(a0),d1
   10e4a:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   10e50:	|  |  |  |  |   movea.l 12(a0),a0
   10e54:	|  |  |  |  |   move.l 16(sp),d0
   10e58:	|  |  |  |  |   lsl.l #3,d0
   10e5a:	|  |  |  |  |   adda.l d0,a0
   10e5c:	|  |  |  |  |   movea.l 4(a0),a0
   10e60:	|  |  |  |  |   move.l 12(sp),d0
   10e64:	|  |  |  |  |   addi.l #1073741823,d0
   10e6a:	|  |  |  |  |   add.l d0,d0
   10e6c:	|  |  |  |  |   add.l d0,d0
   10e6e:	|  |  |  |  |   adda.l d0,a0
   10e70:	|  |  |  |  |   move.l (a0),d0
   10e72:	|  |  |  |  |   lsl.l #3,d0
   10e74:	|  |  |  |  |   movea.l d1,a0
   10e76:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   10e78:	|  |  |  |  |   move.l 4(a0),d1
   10e7c:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   10e82:	|  |  |  |  |   move.l 4(a0),d3
   10e86:	|  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   10e8c:	|  |  |  |  |   movea.l 12(a0),a0
   10e90:	|  |  |  |  |   move.l 16(sp),d0
   10e94:	|  |  |  |  |   lsl.l #3,d0
   10e96:	|  |  |  |  |   adda.l d0,a0
   10e98:	|  |  |  |  |   movea.l 4(a0),a0
   10e9c:	|  |  |  |  |   move.l 12(sp),d0
   10ea0:	|  |  |  |  |   addi.l #1073741823,d0
   10ea6:	|  |  |  |  |   add.l d0,d0
   10ea8:	|  |  |  |  |   add.l d0,d0
   10eaa:	|  |  |  |  |   adda.l d0,a0
   10eac:	|  |  |  |  |   move.l (a0),d0
   10eae:	|  |  |  |  |   lsl.l #3,d0
   10eb0:	|  |  |  |  |   movea.l d3,a0
   10eb2:	|  |  |  |  |   adda.l d0,a0
   10eb4:	|  |  |  |  |   move.l (a0),d0
   10eb6:	|  |  |  |  |   move.l d2,-(sp)
   10eb8:	|  |  |  |  |   move.l a1,-(sp)
   10eba:	|  |  |  |  |   move.l d1,-(sp)
   10ebc:	|  |  |  |  |   move.l d0,-(sp)
   10ebe:	|  |  |  |  |   jsr df4 <drawLine>
   10ec4:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   10ec8:	|  |  |  |  |   addq.l #1,12(sp)
   10ecc:	|  |  |  |  \-> move.l 12(sp),d0
   10ed0:	|  |  |  |      cmp.l 8(sp),d0
   10ed4:	|  |  |  \----- blt.w 10dd6 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   10ed8:	|  |  |         movea.l 17c22 <currentFloor>,a0
   10ede:	|  |  |         move.l 4(a0),d1
   10ee2:	|  |  |         movea.l 17c22 <currentFloor>,a0
   10ee8:	|  |  |         movea.l 12(a0),a0
   10eec:	|  |  |         move.l 16(sp),d0
   10ef0:	|  |  |         lsl.l #3,d0
   10ef2:	|  |  |         adda.l d0,a0
   10ef4:	|  |  |         movea.l 4(a0),a0
   10ef8:	|  |  |         move.l 8(sp),d0
   10efc:	|  |  |         addi.l #1073741823,d0
   10f02:	|  |  |         add.l d0,d0
   10f04:	|  |  |         add.l d0,d0
   10f06:	|  |  |         adda.l d0,a0
   10f08:	|  |  |         move.l (a0),d0
   10f0a:	|  |  |         lsl.l #3,d0
   10f0c:	|  |  |         movea.l d1,a0
   10f0e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   10f10:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   10f14:	|  |  |         movea.l 17c22 <currentFloor>,a0
   10f1a:	|  |  |         move.l 4(a0),d1
   10f1e:	|  |  |         movea.l 17c22 <currentFloor>,a0
   10f24:	|  |  |         movea.l 12(a0),a0
   10f28:	|  |  |         move.l 16(sp),d0
   10f2c:	|  |  |         lsl.l #3,d0
   10f2e:	|  |  |         adda.l d0,a0
   10f30:	|  |  |         movea.l 4(a0),a0
   10f34:	|  |  |         move.l 8(sp),d0
   10f38:	|  |  |         addi.l #1073741823,d0
   10f3e:	|  |  |         add.l d0,d0
   10f40:	|  |  |         add.l d0,d0
   10f42:	|  |  |         adda.l d0,a0
   10f44:	|  |  |         move.l (a0),d0
   10f46:	|  |  |         lsl.l #3,d0
   10f48:	|  |  |         movea.l d1,a0
   10f4a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   10f4c:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   10f4e:	|  |  |         movea.l 17c22 <currentFloor>,a0
   10f54:	|  |  |         move.l 4(a0),d1
   10f58:	|  |  |         movea.l 17c22 <currentFloor>,a0
   10f5e:	|  |  |         movea.l 12(a0),a0
   10f62:	|  |  |         move.l 16(sp),d0
   10f66:	|  |  |         lsl.l #3,d0
   10f68:	|  |  |         adda.l d0,a0
   10f6a:	|  |  |         movea.l 4(a0),a0
   10f6e:	|  |  |         move.l (a0),d0
   10f70:	|  |  |         lsl.l #3,d0
   10f72:	|  |  |         movea.l d1,a0
   10f74:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   10f76:	|  |  |         move.l 4(a0),d1
   10f7a:	|  |  |         movea.l 17c22 <currentFloor>,a0
   10f80:	|  |  |         move.l 4(a0),d3
   10f84:	|  |  |         movea.l 17c22 <currentFloor>,a0
   10f8a:	|  |  |         movea.l 12(a0),a0
   10f8e:	|  |  |         move.l 16(sp),d0
   10f92:	|  |  |         lsl.l #3,d0
   10f94:	|  |  |         adda.l d0,a0
   10f96:	|  |  |         movea.l 4(a0),a0
   10f9a:	|  |  |         move.l (a0),d0
   10f9c:	|  |  |         lsl.l #3,d0
   10f9e:	|  |  |         movea.l d3,a0
   10fa0:	|  |  |         adda.l d0,a0
   10fa2:	|  |  |         move.l (a0),d0
   10fa4:	|  |  |         move.l d2,-(sp)
   10fa6:	|  |  |         move.l a1,-(sp)
   10fa8:	|  |  |         move.l d1,-(sp)
   10faa:	|  |  |         move.l d0,-(sp)
   10fac:	|  |  |         jsr df4 <drawLine>
   10fb2:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   10fb6:	|  |  \-------> addq.l #1,16(sp)
   10fba:	|  \----------> movea.l 17c22 <currentFloor>,a0
   10fc0:	|               move.l 8(a0),d0
   10fc4:	|               cmp.l 16(sp),d0
   10fc8:	\-------------- bgt.w 10daa <drawFloor+0x10>
        }
    }
}
   10fcc:	                nop
   10fce:	                nop
   10fd0:	                move.l (sp)+,d2
   10fd2:	                move.l (sp)+,d3
   10fd4:	                lea 12(sp),sp
   10fd8:	                rts

00010fda <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   10fda:	                      lea -12(sp),sp
    int sharedVertices = 0;
   10fde:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   10fe2:	                      clr.l 4(sp)
   10fe6:	   /----------------- bra.w 11078 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   10fea:	/--|----------------> clr.l (sp)
   10fec:	|  |     /----------- bra.s 11068 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   10fee:	|  |  /--|----------> movea.l 16(sp),a0
   10ff2:	|  |  |  |            move.l 4(a0),d1
   10ff6:	|  |  |  |            move.l 4(sp),d0
   10ffa:	|  |  |  |            add.l d0,d0
   10ffc:	|  |  |  |            add.l d0,d0
   10ffe:	|  |  |  |            movea.l d1,a0
   11000:	|  |  |  |            adda.l d0,a0
   11002:	|  |  |  |            move.l (a0),d1
   11004:	|  |  |  |            movea.l 20(sp),a0
   11008:	|  |  |  |            movea.l 4(a0),a0
   1100c:	|  |  |  |            move.l (sp),d0
   1100e:	|  |  |  |            add.l d0,d0
   11010:	|  |  |  |            add.l d0,d0
   11012:	|  |  |  |            adda.l d0,a0
   11014:	|  |  |  |            move.l (a0),d0
   11016:	|  |  |  |            cmp.l d1,d0
   11018:	|  |  |  |  /-------- bne.s 11066 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   1101a:	|  |  |  |  |         move.l 8(sp),d0
   1101e:	|  |  |  |  |         move.l d0,d1
   11020:	|  |  |  |  |         addq.l #1,d1
   11022:	|  |  |  |  |         move.l d1,8(sp)
   11026:	|  |  |  |  |         tst.l d0
   11028:	|  |  |  |  |     /-- beq.s 1104a <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1102a:	|  |  |  |  |     |   movea.l 16(sp),a0
   1102e:	|  |  |  |  |     |   move.l 4(a0),d1
   11032:	|  |  |  |  |     |   move.l 4(sp),d0
   11036:	|  |  |  |  |     |   add.l d0,d0
   11038:	|  |  |  |  |     |   add.l d0,d0
   1103a:	|  |  |  |  |     |   movea.l d1,a0
   1103c:	|  |  |  |  |     |   adda.l d0,a0
   1103e:	|  |  |  |  |     |   move.l (a0),d0
   11040:	|  |  |  |  |     |   movea.l 28(sp),a0
   11044:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   11046:	|  |  |  |  |     |   moveq #1,d0
   11048:	|  |  |  |  |  /--|-- bra.s 11088 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   1104a:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   1104e:	|  |  |  |  |  |      move.l 4(a0),d1
   11052:	|  |  |  |  |  |      move.l 4(sp),d0
   11056:	|  |  |  |  |  |      add.l d0,d0
   11058:	|  |  |  |  |  |      add.l d0,d0
   1105a:	|  |  |  |  |  |      movea.l d1,a0
   1105c:	|  |  |  |  |  |      adda.l d0,a0
   1105e:	|  |  |  |  |  |      move.l (a0),d0
   11060:	|  |  |  |  |  |      movea.l 24(sp),a0
   11064:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   11066:	|  |  |  |  \--|----> addq.l #1,(sp)
   11068:	|  |  |  \-----|----> movea.l 20(sp),a0
   1106c:	|  |  |        |      move.l (a0),d0
   1106e:	|  |  |        |      cmp.l (sp),d0
   11070:	|  |  \--------|----- bgt.w 10fee <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   11074:	|  |           |      addq.l #1,4(sp)
   11078:	|  \-----------|----> movea.l 16(sp),a0
   1107c:	|              |      move.l (a0),d0
   1107e:	|              |      cmp.l 4(sp),d0
   11082:	\--------------|----- bgt.w 10fea <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   11086:	               |      clr.w d0
}
   11088:	               \----> lea 12(sp),sp
   1108c:	                      rts

0001108e <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1108e:	movea.l 17c22 <currentFloor>,a0
   11094:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   11098:	movea.l 17c22 <currentFloor>,a0
   1109e:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   110a2:	movea.l 17c22 <currentFloor>,a0
   110a8:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   110ac:	movea.l 17c22 <currentFloor>,a0
   110b2:	clr.l 16(a0)
}
   110b6:	nop
   110b8:	rts

000110ba <inFloor>:

int inFloor (int x, int y) {
   110ba:	          subq.l #8,sp
	int i, r = -1;
   110bc:	          moveq #-1,d0
   110be:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   110c0:	          clr.l 4(sp)
   110c4:	   /----- bra.s 110f8 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   110c6:	/--|----> movea.l 17c22 <currentFloor>,a0
   110cc:	|  |      move.l 12(a0),d1
   110d0:	|  |      move.l 4(sp),d0
   110d4:	|  |      lsl.l #3,d0
   110d6:	|  |      add.l d1,d0
   110d8:	|  |      move.l 16(sp),-(sp)
   110dc:	|  |      move.l 16(sp),-(sp)
   110e0:	|  |      move.l d0,-(sp)
   110e2:	|  |      jsr 112c4 <pointInFloorPolygon>
   110e8:	|  |      lea 12(sp),sp
   110ec:	|  |      tst.w d0
   110ee:	|  |  /-- beq.s 110f4 <inFloor+0x3a>
			r = i;
   110f0:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   110f4:	|  |  \-> addq.l #1,4(sp)
   110f8:	|  \----> movea.l 17c22 <currentFloor>,a0
   110fe:	|         move.l 8(a0),d0
   11102:	|         cmp.l 4(sp),d0
   11106:	\-------- bgt.s 110c6 <inFloor+0xc>

	return r;
   11108:	          move.l (sp),d0
}
   1110a:	          addq.l #8,sp
   1110c:	          rts

0001110e <initFloor>:

BOOL initFloor () {
   1110e:	       lea -12(sp),sp
   11112:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   11114:	       moveq #20,d0
   11116:	       move.l d0,12(sp)
   1111a:	       clr.l 8(sp)
   1111e:	       move.l 17b28 <SysBase>,d0
   11124:	       movea.l d0,a6
   11126:	       move.l 12(sp),d0
   1112a:	       move.l 8(sp),d1
   1112e:	       jsr -684(a6)
   11132:	       move.l d0,4(sp)
   11136:	       move.l 4(sp),d0
   1113a:	       move.l d0,17c22 <currentFloor>

    if(currentFloor == 0) {
   11140:	       move.l 17c22 <currentFloor>,d0
   11146:	/----- bne.s 1115a <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   11148:	|      pea 15adc <zbuffer.c.d110ca03+0x596>
   1114e:	|      jsr 11d08 <KPrintF>
   11154:	|      addq.l #4,sp
        return FALSE;
   11156:	|      clr.w d0
   11158:	|  /-- bra.s 11162 <initFloor+0x54>
    }

	noFloor ();
   1115a:	\--|-> jsr 1108e <noFloor>
	return TRUE;
   11160:	   |   moveq #1,d0
}
   11162:	   \-> movea.l (sp)+,a6
   11164:	       lea 12(sp),sp
   11168:	       rts

0001116a <killFloor>:

void killFloor () {
   1116a:	       lea -24(sp),sp
   1116e:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   11170:	       clr.l 24(sp)
   11174:	   /-- bra.s 111ce <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   11176:	/--|-> movea.l 17c22 <currentFloor>,a0
   1117c:	|  |   move.l 12(a0),d1
   11180:	|  |   move.l 24(sp),d0
   11184:	|  |   lsl.l #3,d0
   11186:	|  |   movea.l d1,a0
   11188:	|  |   adda.l d0,a0
   1118a:	|  |   move.l 4(a0),8(sp)
   11190:	|  |   move.l 17b28 <SysBase>,d0
   11196:	|  |   movea.l d0,a6
   11198:	|  |   movea.l 8(sp),a1
   1119c:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   111a0:	|  |   movea.l 17c22 <currentFloor>,a0
   111a6:	|  |   move.l 16(a0),d1
   111aa:	|  |   move.l 24(sp),d0
   111ae:	|  |   add.l d0,d0
   111b0:	|  |   add.l d0,d0
   111b2:	|  |   movea.l d1,a0
   111b4:	|  |   adda.l d0,a0
   111b6:	|  |   move.l (a0),4(sp)
   111ba:	|  |   move.l 17b28 <SysBase>,d0
   111c0:	|  |   movea.l d0,a6
   111c2:	|  |   movea.l 4(sp),a1
   111c6:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   111ca:	|  |   addq.l #1,24(sp)
   111ce:	|  \-> movea.l 17c22 <currentFloor>,a0
   111d4:	|      move.l 8(a0),d0
   111d8:	|      cmp.l 24(sp),d0
   111dc:	\----- bgt.s 11176 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   111de:	       movea.l 17c22 <currentFloor>,a0
   111e4:	       move.l 12(a0),20(sp)
   111ea:	       move.l 17b28 <SysBase>,d0
   111f0:	       movea.l d0,a6
   111f2:	       movea.l 20(sp),a1
   111f6:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   111fa:	       movea.l 17c22 <currentFloor>,a0
   11200:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   11204:	       movea.l 17c22 <currentFloor>,a0
   1120a:	       move.l 4(a0),16(sp)
   11210:	       move.l 17b28 <SysBase>,d0
   11216:	       movea.l d0,a6
   11218:	       movea.l 16(sp),a1
   1121c:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   11220:	       movea.l 17c22 <currentFloor>,a0
   11226:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1122a:	       movea.l 17c22 <currentFloor>,a0
   11230:	       move.l 16(a0),12(sp)
   11236:	       move.l 17b28 <SysBase>,d0
   1123c:	       movea.l d0,a6
   1123e:	       movea.l 12(sp),a1
   11242:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   11246:	       movea.l 17c22 <currentFloor>,a0
   1124c:	       clr.l 16(a0)
}
   11250:	       nop
   11252:	       movea.l (sp)+,a6
   11254:	       lea 24(sp),sp
   11258:	       rts

0001125a <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1125a:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1125e:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   11262:	                   clr.l 4(sp)
   11266:	   /-------------- bra.s 112b2 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   11268:	/--|-------------> clr.l (sp)
   1126a:	|  |     /-------- bra.s 112a6 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1126c:	|  |  /--|-------> move.l 20(sp),d1
   11270:	|  |  |  |         move.l 4(sp),d0
   11274:	|  |  |  |         add.l d0,d0
   11276:	|  |  |  |         add.l d0,d0
   11278:	|  |  |  |         movea.l d1,a0
   1127a:	|  |  |  |         adda.l d0,a0
   1127c:	|  |  |  |         move.l (a0),d1
   1127e:	|  |  |  |         movea.l 28(sp),a0
   11282:	|  |  |  |         move.l (sp),d0
   11284:	|  |  |  |         add.l d0,d0
   11286:	|  |  |  |         add.l d0,d0
   11288:	|  |  |  |         adda.l d0,a0
   1128a:	|  |  |  |         move.l (a0),d0
   1128c:	|  |  |  |         cmp.l d1,d0
   1128e:	|  |  |  |     /-- bne.s 112a4 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   11290:	|  |  |  |     |   move.l 8(sp),d0
   11294:	|  |  |  |     |   move.l d0,d1
   11296:	|  |  |  |     |   addq.l #1,d1
   11298:	|  |  |  |     |   move.l d1,8(sp)
   1129c:	|  |  |  |     |   tst.l d0
   1129e:	|  |  |  |     +-- beq.s 112a4 <polysShareSide+0x4a>
   112a0:	|  |  |  |     |   moveq #1,d0
   112a2:	|  |  |  |  /--|-- bra.s 112be <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   112a4:	|  |  |  |  |  \-> addq.l #1,(sp)
   112a6:	|  |  |  \--|----> move.l 24(sp),d0
   112aa:	|  |  |     |      cmp.l (sp),d0
   112ac:	|  |  \-----|----- bgt.s 1126c <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   112ae:	|  |        |      addq.l #1,4(sp)
   112b2:	|  \--------|----> move.l 16(sp),d0
   112b6:	|           |      cmp.l 4(sp),d0
   112ba:	\-----------|----- bgt.s 11268 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   112bc:	            |      clr.w d0
}
   112be:	            \----> lea 12(sp),sp
   112c2:	                   rts

000112c4 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   112c4:	             lea -28(sp),sp
   112c8:	             move.l d3,-(sp)
   112ca:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   112cc:	             clr.l 32(sp)
   112d0:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   112d4:	             movea.l 40(sp),a0
   112d8:	             move.l (a0),d0
   112da:	             move.l d0,d1
   112dc:	             subq.l #1,d1
   112de:	             move.l d1,28(sp)
   112e2:	   /-------- bra.w 114dc <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   112e6:	/--|-------> movea.l 17c22 <currentFloor>,a0
   112ec:	|  |         move.l 4(a0),d1
   112f0:	|  |         movea.l 40(sp),a0
   112f4:	|  |         movea.l 4(a0),a0
   112f8:	|  |         move.l 32(sp),d0
   112fc:	|  |         add.l d0,d0
   112fe:	|  |         add.l d0,d0
   11300:	|  |         adda.l d0,a0
   11302:	|  |         move.l (a0),d0
   11304:	|  |         lsl.l #3,d0
   11306:	|  |         movea.l d1,a0
   11308:	|  |         adda.l d0,a0
   1130a:	|  |         move.l (a0),d0
   1130c:	|  |         move.l d0,-(sp)
   1130e:	|  |         jsr 12160 <__floatsisf>
   11314:	|  |         addq.l #4,sp
   11316:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   1131a:	|  |         movea.l 17c22 <currentFloor>,a0
   11320:	|  |         move.l 4(a0),d1
   11324:	|  |         movea.l 40(sp),a0
   11328:	|  |         movea.l 4(a0),a0
   1132c:	|  |         move.l 32(sp),d0
   11330:	|  |         add.l d0,d0
   11332:	|  |         add.l d0,d0
   11334:	|  |         adda.l d0,a0
   11336:	|  |         move.l (a0),d0
   11338:	|  |         lsl.l #3,d0
   1133a:	|  |         movea.l d1,a0
   1133c:	|  |         adda.l d0,a0
   1133e:	|  |         move.l 4(a0),d0
   11342:	|  |         move.l d0,-(sp)
   11344:	|  |         jsr 12160 <__floatsisf>
   1134a:	|  |         addq.l #4,sp
   1134c:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   11350:	|  |         movea.l 17c22 <currentFloor>,a0
   11356:	|  |         move.l 4(a0),d1
   1135a:	|  |         movea.l 40(sp),a0
   1135e:	|  |         movea.l 4(a0),a0
   11362:	|  |         move.l 28(sp),d0
   11366:	|  |         add.l d0,d0
   11368:	|  |         add.l d0,d0
   1136a:	|  |         adda.l d0,a0
   1136c:	|  |         move.l (a0),d0
   1136e:	|  |         lsl.l #3,d0
   11370:	|  |         movea.l d1,a0
   11372:	|  |         adda.l d0,a0
   11374:	|  |         move.l (a0),d0
   11376:	|  |         move.l d0,-(sp)
   11378:	|  |         jsr 12160 <__floatsisf>
   1137e:	|  |         addq.l #4,sp
   11380:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   11384:	|  |         movea.l 17c22 <currentFloor>,a0
   1138a:	|  |         move.l 4(a0),d1
   1138e:	|  |         movea.l 40(sp),a0
   11392:	|  |         movea.l 4(a0),a0
   11396:	|  |         move.l 28(sp),d0
   1139a:	|  |         add.l d0,d0
   1139c:	|  |         add.l d0,d0
   1139e:	|  |         adda.l d0,a0
   113a0:	|  |         move.l (a0),d0
   113a2:	|  |         lsl.l #3,d0
   113a4:	|  |         movea.l d1,a0
   113a6:	|  |         adda.l d0,a0
   113a8:	|  |         move.l 4(a0),d0
   113ac:	|  |         move.l d0,-(sp)
   113ae:	|  |         jsr 12160 <__floatsisf>
   113b4:	|  |         addq.l #4,sp
   113b6:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   113ba:	|  |         move.l 48(sp),-(sp)
   113be:	|  |         jsr 12160 <__floatsisf>
   113c4:	|  |         addq.l #4,sp
   113c6:	|  |         move.l d0,-(sp)
   113c8:	|  |         move.l 20(sp),-(sp)
   113cc:	|  |         jsr 12302 <__lesf2>
   113d2:	|  |         addq.l #8,sp
   113d4:	|  |         tst.l d0
   113d6:	|  |     /-- bgt.s 113f6 <pointInFloorPolygon+0x132>
   113d8:	|  |     |   move.l 48(sp),-(sp)
   113dc:	|  |     |   jsr 12160 <__floatsisf>
   113e2:	|  |     |   addq.l #4,sp
   113e4:	|  |     |   move.l d0,-(sp)
   113e6:	|  |     |   move.l 12(sp),-(sp)
   113ea:	|  |     |   jsr 122cc <__gtsf2>
   113f0:	|  |     |   addq.l #8,sp
   113f2:	|  |     |   tst.l d0
   113f4:	|  |  /--|-- bgt.s 11436 <pointInFloorPolygon+0x172>
   113f6:	|  |  |  \-> move.l 48(sp),-(sp)
   113fa:	|  |  |      jsr 12160 <__floatsisf>
   11400:	|  |  |      addq.l #4,sp
   11402:	|  |  |      move.l d0,-(sp)
   11404:	|  |  |      move.l 12(sp),-(sp)
   11408:	|  |  |      jsr 12302 <__lesf2>
   1140e:	|  |  |      addq.l #8,sp
   11410:	|  |  |      tst.l d0
   11412:	|  |  |  /-- bgt.w 114cc <pointInFloorPolygon+0x208>
   11416:	|  |  |  |   move.l 48(sp),-(sp)
   1141a:	|  |  |  |   jsr 12160 <__floatsisf>
   11420:	|  |  |  |   addq.l #4,sp
   11422:	|  |  |  |   move.l d0,-(sp)
   11424:	|  |  |  |   move.l 20(sp),-(sp)
   11428:	|  |  |  |   jsr 122cc <__gtsf2>
   1142e:	|  |  |  |   addq.l #8,sp
   11430:	|  |  |  |   tst.l d0
   11432:	|  |  |  +-- ble.w 114cc <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   11436:	|  |  \--|-> move.l 44(sp),-(sp)
   1143a:	|  |     |   jsr 12160 <__floatsisf>
   11440:	|  |     |   addq.l #4,sp
   11442:	|  |     |   move.l d0,d3
   11444:	|  |     |   move.l 20(sp),-(sp)
   11448:	|  |     |   move.l 16(sp),-(sp)
   1144c:	|  |     |   jsr 12454 <__subsf3>
   11452:	|  |     |   addq.l #8,sp
   11454:	|  |     |   move.l d0,d2
   11456:	|  |     |   move.l 48(sp),-(sp)
   1145a:	|  |     |   jsr 12160 <__floatsisf>
   11460:	|  |     |   addq.l #4,sp
   11462:	|  |     |   move.l 16(sp),-(sp)
   11466:	|  |     |   move.l d0,-(sp)
   11468:	|  |     |   jsr 12454 <__subsf3>
   1146e:	|  |     |   addq.l #8,sp
   11470:	|  |     |   move.l d0,-(sp)
   11472:	|  |     |   move.l d2,-(sp)
   11474:	|  |     |   jsr 12212 <__mulsf3>
   1147a:	|  |     |   addq.l #8,sp
   1147c:	|  |     |   move.l d0,d2
   1147e:	|  |     |   move.l 16(sp),-(sp)
   11482:	|  |     |   move.l 12(sp),-(sp)
   11486:	|  |     |   jsr 12454 <__subsf3>
   1148c:	|  |     |   addq.l #8,sp
   1148e:	|  |     |   move.l d0,-(sp)
   11490:	|  |     |   move.l d2,-(sp)
   11492:	|  |     |   jsr 1200c <__divsf3>
   11498:	|  |     |   addq.l #8,sp
   1149a:	|  |     |   move.l 20(sp),-(sp)
   1149e:	|  |     |   move.l d0,-(sp)
   114a0:	|  |     |   jsr 11f12 <__addsf3>
   114a6:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   114a8:	|  |     |   move.l d0,-(sp)
   114aa:	|  |     |   move.l d3,-(sp)
   114ac:	|  |     |   jsr 12386 <__ltsf2>
   114b2:	|  |     |   addq.l #8,sp
   114b4:	|  |     |   tst.l d0
   114b6:	|  |     +-- bge.s 114cc <pointInFloorPolygon+0x208>

			c = !c;
   114b8:	|  |     |   tst.l 24(sp)
   114bc:	|  |     |   seq d0
   114be:	|  |     |   neg.b d0
   114c0:	|  |     |   move.b d0,d0
   114c2:	|  |     |   andi.l #255,d0
   114c8:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   114cc:	|  |     \-> move.l 32(sp),d0
   114d0:	|  |         move.l d0,d1
   114d2:	|  |         addq.l #1,d1
   114d4:	|  |         move.l d1,32(sp)
   114d8:	|  |         move.l d0,28(sp)
   114dc:	|  \-------> movea.l 40(sp),a0
   114e0:	|            move.l (a0),d0
   114e2:	|            cmp.l 32(sp),d0
   114e6:	\----------- bgt.w 112e6 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   114ea:	             tst.l 24(sp)
   114ee:	             sne d0
   114f0:	             neg.b d0
   114f2:	             move.b d0,d0
   114f4:	             andi.w #255,d0
}
   114f8:	             move.l (sp)+,d2
   114fa:	             move.l (sp)+,d3
   114fc:	             lea 28(sp),sp
   11500:	             rts

00011502 <setFloor>:

BOOL setFloor (int fileNum) {
   11502:	                               lea -132(sp),sp
   11506:	                               move.l a6,-(sp)
   11508:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   1150a:	                               jsr 1116a <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   11510:	                               move.l 144(sp),-(sp)
   11514:	                               jsr 3e60 <openFileFromNum>
   1151a:	                               addq.l #4,sp
   1151c:	                               tst.l d0
   1151e:	                           /-- bne.s 11526 <setFloor+0x24>
   11520:	                           |   clr.w d0
   11522:	/--------------------------|-- bra.w 11c72 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   11526:	|                          \-> movea.l 17c22 <currentFloor>,a0
   1152c:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   11530:	|                              move.l 17b10 <bigDataFile>,118(sp)
   11538:	|                              move.l 17b30 <DOSBase>,d0
   1153e:	|                              movea.l d0,a6
   11540:	|                              move.l 118(sp),d1
   11544:	|                              jsr -306(a6)
   11548:	|                              move.l d0,114(sp)
   1154c:	|                              move.l 114(sp),d0
   11550:	|                              movea.l 17c22 <currentFloor>,a0
   11556:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1155a:	|                              movea.l 17c22 <currentFloor>,a0
   11560:	|                              move.l 8(a0),d0
   11564:	|                              lsl.l #3,d0
   11566:	|                              move.l d0,110(sp)
   1156a:	|                              clr.l 106(sp)
   1156e:	|                              move.l 17b28 <SysBase>,d0
   11574:	|                              movea.l d0,a6
   11576:	|                              move.l 110(sp),d0
   1157a:	|                              move.l 106(sp),d1
   1157e:	|                              jsr -684(a6)
   11582:	|                              move.l d0,102(sp)
   11586:	|                              move.l 102(sp),d0
   1158a:	|                              movea.l 17c22 <currentFloor>,a0
   11590:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   11594:	|                              movea.l 17c22 <currentFloor>,a0
   1159a:	|                              move.l 12(a0),d0
   1159e:	|                          /-- bne.s 115b4 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   115a0:	|                          |   pea 15b00 <zbuffer.c.d110ca03+0x5ba>
   115a6:	|                          |   jsr 11d08 <KPrintF>
   115ac:	|                          |   addq.l #4,sp
		return FALSE;
   115ae:	|                          |   clr.w d0
   115b0:	+--------------------------|-- bra.w 11c72 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   115b4:	|                          \-> clr.l 136(sp)
   115b8:	|                    /-------- bra.w 116d0 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   115bc:	|                 /--|-------> move.l 17b10 <bigDataFile>,26(sp)
   115c4:	|                 |  |         move.l 17b30 <DOSBase>,d0
   115ca:	|                 |  |         movea.l d0,a6
   115cc:	|                 |  |         move.l 26(sp),d1
   115d0:	|                 |  |         jsr -306(a6)
   115d4:	|                 |  |         move.l d0,22(sp)
   115d8:	|                 |  |         move.l 22(sp),d1
   115dc:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   115e2:	|                 |  |         movea.l 12(a0),a0
   115e6:	|                 |  |         move.l 136(sp),d0
   115ea:	|                 |  |         lsl.l #3,d0
   115ec:	|                 |  |         adda.l d0,a0
   115ee:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   115f0:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   115f6:	|                 |  |         move.l 12(a0),d1
   115fa:	|                 |  |         move.l 136(sp),d0
   115fe:	|                 |  |         lsl.l #3,d0
   11600:	|                 |  |         movea.l d1,a0
   11602:	|                 |  |         adda.l d0,a0
   11604:	|                 |  |         move.l (a0),d0
   11606:	|                 |  |         add.l d0,d0
   11608:	|                 |  |         add.l d0,d0
   1160a:	|                 |  |         move.l d0,18(sp)
   1160e:	|                 |  |         clr.l 14(sp)
   11612:	|                 |  |         move.l 17b28 <SysBase>,d0
   11618:	|                 |  |         movea.l d0,a6
   1161a:	|                 |  |         move.l 18(sp),d0
   1161e:	|                 |  |         move.l 14(sp),d1
   11622:	|                 |  |         jsr -684(a6)
   11626:	|                 |  |         move.l d0,10(sp)
   1162a:	|                 |  |         move.l 10(sp),d1
   1162e:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   11634:	|                 |  |         movea.l 12(a0),a0
   11638:	|                 |  |         move.l 136(sp),d0
   1163c:	|                 |  |         lsl.l #3,d0
   1163e:	|                 |  |         adda.l d0,a0
   11640:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   11644:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   1164a:	|                 |  |         move.l 12(a0),d1
   1164e:	|                 |  |         move.l 136(sp),d0
   11652:	|                 |  |         lsl.l #3,d0
   11654:	|                 |  |         movea.l d1,a0
   11656:	|                 |  |         adda.l d0,a0
   11658:	|                 |  |         move.l 4(a0),d0
   1165c:	|                 |  |     /-- bne.s 11672 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   1165e:	|                 |  |     |   pea 15b00 <zbuffer.c.d110ca03+0x5ba>
   11664:	|                 |  |     |   jsr 11d08 <KPrintF>
   1166a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1166c:	|                 |  |     |   clr.w d0
   1166e:	+-----------------|--|-----|-- bra.w 11c72 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   11672:	|                 |  |     \-> clr.l 132(sp)
   11676:	|                 |  |     /-- bra.s 116b0 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   11678:	|                 |  |  /--|-> move.l 17b10 <bigDataFile>,d1
   1167e:	|                 |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11684:	|                 |  |  |  |   movea.l 12(a0),a0
   11688:	|                 |  |  |  |   move.l 136(sp),d0
   1168c:	|                 |  |  |  |   lsl.l #3,d0
   1168e:	|                 |  |  |  |   adda.l d0,a0
   11690:	|                 |  |  |  |   movea.l 4(a0),a0
   11694:	|                 |  |  |  |   move.l 132(sp),d0
   11698:	|                 |  |  |  |   add.l d0,d0
   1169a:	|                 |  |  |  |   add.l d0,d0
   1169c:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   116a0:	|                 |  |  |  |   move.l d1,-(sp)
   116a2:	|                 |  |  |  |   jsr 6bc <get2bytes>
   116a8:	|                 |  |  |  |   addq.l #4,sp
   116aa:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   116ac:	|                 |  |  |  |   addq.l #1,132(sp)
   116b0:	|                 |  |  |  \-> movea.l 17c22 <currentFloor>,a0
   116b6:	|                 |  |  |      move.l 12(a0),d1
   116ba:	|                 |  |  |      move.l 136(sp),d0
   116be:	|                 |  |  |      lsl.l #3,d0
   116c0:	|                 |  |  |      movea.l d1,a0
   116c2:	|                 |  |  |      adda.l d0,a0
   116c4:	|                 |  |  |      move.l (a0),d0
   116c6:	|                 |  |  |      cmp.l 132(sp),d0
   116ca:	|                 |  |  \----- bgt.s 11678 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   116cc:	|                 |  |         addq.l #1,136(sp)
   116d0:	|                 |  \-------> movea.l 17c22 <currentFloor>,a0
   116d6:	|                 |            move.l 8(a0),d0
   116da:	|                 |            cmp.l 136(sp),d0
   116de:	|                 \----------- bgt.w 115bc <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   116e2:	|                              move.l 17b10 <bigDataFile>,d0
   116e8:	|                              move.l d0,-(sp)
   116ea:	|                              jsr 6bc <get2bytes>
   116f0:	|                              addq.l #4,sp
   116f2:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   116f6:	|                              move.l 136(sp),d0
   116fa:	|                              lsl.l #3,d0
   116fc:	|                              move.l d0,98(sp)
   11700:	|                              clr.l 94(sp)
   11704:	|                              move.l 17b28 <SysBase>,d0
   1170a:	|                              movea.l d0,a6
   1170c:	|                              move.l 98(sp),d0
   11710:	|                              move.l 94(sp),d1
   11714:	|                              jsr -684(a6)
   11718:	|                              move.l d0,90(sp)
   1171c:	|                              move.l 90(sp),d0
   11720:	|                              movea.l 17c22 <currentFloor>,a0
   11726:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   1172a:	|                              movea.l 17c22 <currentFloor>,a0
   11730:	|                              move.l 4(a0),d0
   11734:	|                          /-- bne.s 1174a <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   11736:	|                          |   pea 15b00 <zbuffer.c.d110ca03+0x5ba>
   1173c:	|                          |   jsr 11d08 <KPrintF>
   11742:	|                          |   addq.l #4,sp
		return FALSE;
   11744:	|                          |   clr.w d0
   11746:	+--------------------------|-- bra.w 11c72 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   1174a:	|                          \-> clr.l 132(sp)
   1174e:	|                          /-- bra.s 117a2 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   11750:	|                       /--|-> move.l 17b10 <bigDataFile>,d1
   11756:	|                       |  |   movea.l 17c22 <currentFloor>,a0
   1175c:	|                       |  |   movea.l 4(a0),a0
   11760:	|                       |  |   move.l 132(sp),d0
   11764:	|                       |  |   lsl.l #3,d0
   11766:	|                       |  |   lea (0,a0,d0.l),a2
   1176a:	|                       |  |   move.l d1,-(sp)
   1176c:	|                       |  |   jsr 6bc <get2bytes>
   11772:	|                       |  |   addq.l #4,sp
   11774:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   11776:	|                       |  |   move.l 17b10 <bigDataFile>,d1
   1177c:	|                       |  |   movea.l 17c22 <currentFloor>,a0
   11782:	|                       |  |   movea.l 4(a0),a0
   11786:	|                       |  |   move.l 132(sp),d0
   1178a:	|                       |  |   lsl.l #3,d0
   1178c:	|                       |  |   lea (0,a0,d0.l),a2
   11790:	|                       |  |   move.l d1,-(sp)
   11792:	|                       |  |   jsr 6bc <get2bytes>
   11798:	|                       |  |   addq.l #4,sp
   1179a:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   1179e:	|                       |  |   addq.l #1,132(sp)
   117a2:	|                       |  \-> move.l 132(sp),d0
   117a6:	|                       |      cmp.l 136(sp),d0
   117aa:	|                       \----- blt.s 11750 <setFloor+0x24e>
	}

	finishAccess ();
   117ac:	|                              jsr 3d58 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   117b2:	|                              movea.l 17c22 <currentFloor>,a0
   117b8:	|                              move.l 8(a0),d0
   117bc:	|                              add.l d0,d0
   117be:	|                              add.l d0,d0
   117c0:	|                              move.l d0,86(sp)
   117c4:	|                              clr.l 82(sp)
   117c8:	|                              move.l 17b28 <SysBase>,d0
   117ce:	|                              movea.l d0,a6
   117d0:	|                              move.l 86(sp),d0
   117d4:	|                              move.l 82(sp),d1
   117d8:	|                              jsr -684(a6)
   117dc:	|                              move.l d0,78(sp)
   117e0:	|                              move.l 78(sp),d0
   117e4:	|                              movea.l 17c22 <currentFloor>,a0
   117ea:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   117ee:	|                              movea.l 17c22 <currentFloor>,a0
   117f4:	|                              move.l 8(a0),d0
   117f8:	|                              add.l d0,d0
   117fa:	|                              add.l d0,d0
   117fc:	|                              move.l d0,74(sp)
   11800:	|                              clr.l 70(sp)
   11804:	|                              move.l 17b28 <SysBase>,d0
   1180a:	|                              movea.l d0,a6
   1180c:	|                              move.l 74(sp),d0
   11810:	|                              move.l 70(sp),d1
   11814:	|                              jsr -684(a6)
   11818:	|                              move.l d0,66(sp)
   1181c:	|                              move.l 66(sp),d0
   11820:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   11824:	|                              movea.l 17c22 <currentFloor>,a0
   1182a:	|                              move.l 16(a0),d0
   1182e:	|                          /-- bne.s 11844 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   11830:	|                          |   pea 15b00 <zbuffer.c.d110ca03+0x5ba>
   11836:	|                          |   jsr 11d08 <KPrintF>
   1183c:	|                          |   addq.l #4,sp
		return FALSE;
   1183e:	|                          |   clr.w d0
   11840:	+--------------------------|-- bra.w 11c72 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11844:	|                          \-> clr.l 136(sp)
   11848:	|                    /-------- bra.w 1196c <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1184c:	|                 /--|-------> movea.l 17c22 <currentFloor>,a0
   11852:	|                 |  |         move.l 8(a0),d0
   11856:	|                 |  |         add.l d0,d0
   11858:	|                 |  |         add.l d0,d0
   1185a:	|                 |  |         move.l d0,50(sp)
   1185e:	|                 |  |         clr.l 46(sp)
   11862:	|                 |  |         move.l 17b28 <SysBase>,d0
   11868:	|                 |  |         movea.l d0,a6
   1186a:	|                 |  |         move.l 50(sp),d0
   1186e:	|                 |  |         move.l 46(sp),d1
   11872:	|                 |  |         jsr -684(a6)
   11876:	|                 |  |         move.l d0,42(sp)
   1187a:	|                 |  |         move.l 42(sp),d0
   1187e:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   11884:	|                 |  |         movea.l 16(a0),a0
   11888:	|                 |  |         move.l 136(sp),d1
   1188c:	|                 |  |         add.l d1,d1
   1188e:	|                 |  |         add.l d1,d1
   11890:	|                 |  |         adda.l d1,a0
   11892:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   11894:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   1189a:	|                 |  |         move.l 8(a0),d0
   1189e:	|                 |  |         add.l d0,d0
   118a0:	|                 |  |         add.l d0,d0
   118a2:	|                 |  |         move.l d0,38(sp)
   118a6:	|                 |  |         clr.l 34(sp)
   118aa:	|                 |  |         move.l 17b28 <SysBase>,d0
   118b0:	|                 |  |         movea.l d0,a6
   118b2:	|                 |  |         move.l 38(sp),d0
   118b6:	|                 |  |         move.l 34(sp),d1
   118ba:	|                 |  |         jsr -684(a6)
   118be:	|                 |  |         move.l d0,30(sp)
   118c2:	|                 |  |         move.l 30(sp),d1
   118c6:	|                 |  |         move.l 136(sp),d0
   118ca:	|                 |  |         add.l d0,d0
   118cc:	|                 |  |         add.l d0,d0
   118ce:	|                 |  |         movea.l 62(sp),a0
   118d2:	|                 |  |         adda.l d0,a0
   118d4:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   118d6:	|                 |  |         movea.l 17c22 <currentFloor>,a0
   118dc:	|                 |  |         move.l 16(a0),d1
   118e0:	|                 |  |         move.l 136(sp),d0
   118e4:	|                 |  |         add.l d0,d0
   118e6:	|                 |  |         add.l d0,d0
   118e8:	|                 |  |         movea.l d1,a0
   118ea:	|                 |  |         adda.l d0,a0
   118ec:	|                 |  |         move.l (a0),d0
   118ee:	|                 |  |     /-- bne.s 11904 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   118f0:	|                 |  |     |   pea 15b00 <zbuffer.c.d110ca03+0x5ba>
   118f6:	|                 |  |     |   jsr 11d08 <KPrintF>
   118fc:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   118fe:	|                 |  |     |   clr.w d0
   11900:	+-----------------|--|-----|-- bra.w 11c72 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11904:	|                 |  |     \-> clr.l 132(sp)
   11908:	|                 |  |     /-- bra.s 11958 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   1190a:	|                 |  |  /--|-> movea.l 17c22 <currentFloor>,a0
   11910:	|                 |  |  |  |   move.l 16(a0),d1
   11914:	|                 |  |  |  |   move.l 136(sp),d0
   11918:	|                 |  |  |  |   add.l d0,d0
   1191a:	|                 |  |  |  |   add.l d0,d0
   1191c:	|                 |  |  |  |   movea.l d1,a0
   1191e:	|                 |  |  |  |   adda.l d0,a0
   11920:	|                 |  |  |  |   move.l (a0),d1
   11922:	|                 |  |  |  |   move.l 132(sp),d0
   11926:	|                 |  |  |  |   add.l d0,d0
   11928:	|                 |  |  |  |   add.l d0,d0
   1192a:	|                 |  |  |  |   movea.l d1,a0
   1192c:	|                 |  |  |  |   adda.l d0,a0
   1192e:	|                 |  |  |  |   moveq #-1,d1
   11930:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   11932:	|                 |  |  |  |   move.l 136(sp),d0
   11936:	|                 |  |  |  |   add.l d0,d0
   11938:	|                 |  |  |  |   add.l d0,d0
   1193a:	|                 |  |  |  |   movea.l 62(sp),a0
   1193e:	|                 |  |  |  |   adda.l d0,a0
   11940:	|                 |  |  |  |   move.l (a0),d1
   11942:	|                 |  |  |  |   move.l 132(sp),d0
   11946:	|                 |  |  |  |   add.l d0,d0
   11948:	|                 |  |  |  |   add.l d0,d0
   1194a:	|                 |  |  |  |   movea.l d1,a0
   1194c:	|                 |  |  |  |   adda.l d0,a0
   1194e:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11954:	|                 |  |  |  |   addq.l #1,132(sp)
   11958:	|                 |  |  |  \-> movea.l 17c22 <currentFloor>,a0
   1195e:	|                 |  |  |      move.l 8(a0),d0
   11962:	|                 |  |  |      cmp.l 132(sp),d0
   11966:	|                 |  |  \----- bgt.s 1190a <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11968:	|                 |  |         addq.l #1,136(sp)
   1196c:	|                 |  \-------> movea.l 17c22 <currentFloor>,a0
   11972:	|                 |            move.l 8(a0),d0
   11976:	|                 |            cmp.l 136(sp),d0
   1197a:	|                 \----------- bgt.w 1184c <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1197e:	|                              clr.l 136(sp)
   11982:	|              /-------------- bra.w 11a88 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11986:	|           /--|-------------> clr.l 132(sp)
   1198a:	|           |  |     /-------- bra.w 11a72 <setFloor+0x570>
			if (i != j) {
   1198e:	|           |  |  /--|-------> move.l 136(sp),d0
   11992:	|           |  |  |  |         cmp.l 132(sp),d0
   11996:	|           |  |  |  |     /-- beq.w 11a28 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   1199a:	|           |  |  |  |     |   movea.l 17c22 <currentFloor>,a0
   119a0:	|           |  |  |  |     |   move.l 12(a0),d1
   119a4:	|           |  |  |  |     |   move.l 132(sp),d0
   119a8:	|           |  |  |  |     |   lsl.l #3,d0
   119aa:	|           |  |  |  |     |   movea.l d1,a1
   119ac:	|           |  |  |  |     |   adda.l d0,a1
   119ae:	|           |  |  |  |     |   movea.l 17c22 <currentFloor>,a0
   119b4:	|           |  |  |  |     |   move.l 12(a0),d1
   119b8:	|           |  |  |  |     |   move.l 136(sp),d0
   119bc:	|           |  |  |  |     |   lsl.l #3,d0
   119be:	|           |  |  |  |     |   movea.l d1,a0
   119c0:	|           |  |  |  |     |   adda.l d0,a0
   119c2:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   119c6:	|           |  |  |  |     |   move.l (a1),-(sp)
   119c8:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   119cc:	|           |  |  |  |     |   move.l (a0),-(sp)
   119ce:	|           |  |  |  |     |   jsr 1125a <polysShareSide>
   119d4:	|           |  |  |  |     |   lea 16(sp),sp
   119d8:	|           |  |  |  |     |   tst.w d0
   119da:	|           |  |  |  |  /--|-- beq.w 11a6e <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   119de:	|           |  |  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   119e4:	|           |  |  |  |  |  |   move.l 16(a0),d1
   119e8:	|           |  |  |  |  |  |   move.l 136(sp),d0
   119ec:	|           |  |  |  |  |  |   add.l d0,d0
   119ee:	|           |  |  |  |  |  |   add.l d0,d0
   119f0:	|           |  |  |  |  |  |   movea.l d1,a0
   119f2:	|           |  |  |  |  |  |   adda.l d0,a0
   119f4:	|           |  |  |  |  |  |   move.l (a0),d1
   119f6:	|           |  |  |  |  |  |   move.l 132(sp),d0
   119fa:	|           |  |  |  |  |  |   add.l d0,d0
   119fc:	|           |  |  |  |  |  |   add.l d0,d0
   119fe:	|           |  |  |  |  |  |   movea.l d1,a0
   11a00:	|           |  |  |  |  |  |   adda.l d0,a0
   11a02:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   11a06:	|           |  |  |  |  |  |   move.l 136(sp),d0
   11a0a:	|           |  |  |  |  |  |   add.l d0,d0
   11a0c:	|           |  |  |  |  |  |   add.l d0,d0
   11a0e:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   11a12:	|           |  |  |  |  |  |   adda.l d0,a0
   11a14:	|           |  |  |  |  |  |   move.l (a0),d1
   11a16:	|           |  |  |  |  |  |   move.l 132(sp),d0
   11a1a:	|           |  |  |  |  |  |   add.l d0,d0
   11a1c:	|           |  |  |  |  |  |   add.l d0,d0
   11a1e:	|           |  |  |  |  |  |   movea.l d1,a0
   11a20:	|           |  |  |  |  |  |   adda.l d0,a0
   11a22:	|           |  |  |  |  |  |   moveq #1,d1
   11a24:	|           |  |  |  |  |  |   move.l d1,(a0)
   11a26:	|           |  |  |  |  +--|-- bra.s 11a6e <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   11a28:	|           |  |  |  |  |  \-> movea.l 17c22 <currentFloor>,a0
   11a2e:	|           |  |  |  |  |      move.l 16(a0),d1
   11a32:	|           |  |  |  |  |      move.l 136(sp),d0
   11a36:	|           |  |  |  |  |      add.l d0,d0
   11a38:	|           |  |  |  |  |      add.l d0,d0
   11a3a:	|           |  |  |  |  |      movea.l d1,a0
   11a3c:	|           |  |  |  |  |      adda.l d0,a0
   11a3e:	|           |  |  |  |  |      move.l (a0),d1
   11a40:	|           |  |  |  |  |      move.l 132(sp),d0
   11a44:	|           |  |  |  |  |      add.l d0,d0
   11a46:	|           |  |  |  |  |      add.l d0,d0
   11a48:	|           |  |  |  |  |      movea.l d1,a0
   11a4a:	|           |  |  |  |  |      adda.l d0,a0
   11a4c:	|           |  |  |  |  |      moveq #-2,d0
   11a4e:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   11a50:	|           |  |  |  |  |      move.l 136(sp),d0
   11a54:	|           |  |  |  |  |      add.l d0,d0
   11a56:	|           |  |  |  |  |      add.l d0,d0
   11a58:	|           |  |  |  |  |      movea.l 62(sp),a0
   11a5c:	|           |  |  |  |  |      adda.l d0,a0
   11a5e:	|           |  |  |  |  |      move.l (a0),d1
   11a60:	|           |  |  |  |  |      move.l 132(sp),d0
   11a64:	|           |  |  |  |  |      add.l d0,d0
   11a66:	|           |  |  |  |  |      add.l d0,d0
   11a68:	|           |  |  |  |  |      movea.l d1,a0
   11a6a:	|           |  |  |  |  |      adda.l d0,a0
   11a6c:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11a6e:	|           |  |  |  |  \----> addq.l #1,132(sp)
   11a72:	|           |  |  |  \-------> movea.l 17c22 <currentFloor>,a0
   11a78:	|           |  |  |            move.l 8(a0),d0
   11a7c:	|           |  |  |            cmp.l 132(sp),d0
   11a80:	|           |  |  \----------- bgt.w 1198e <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11a84:	|           |  |               addq.l #1,136(sp)
   11a88:	|           |  \-------------> movea.l 17c22 <currentFloor>,a0
   11a8e:	|           |                  move.l 8(a0),d0
   11a92:	|           |                  cmp.l 136(sp),d0
   11a96:	|           \----------------- bgt.w 11986 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   11a9a:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   11a9e:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   11aa2:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11aa6:	|  |                           clr.l 136(sp)
   11aaa:	|  |     /-------------------- bra.w 11c00 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11aae:	|  |  /--|-------------------> clr.l 132(sp)
   11ab2:	|  |  |  |     /-------------- bra.w 11bea <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   11ab6:	|  |  |  |  /--|-------------> movea.l 17c22 <currentFloor>,a0
   11abc:	|  |  |  |  |  |               move.l 16(a0),d1
   11ac0:	|  |  |  |  |  |               move.l 136(sp),d0
   11ac4:	|  |  |  |  |  |               add.l d0,d0
   11ac6:	|  |  |  |  |  |               add.l d0,d0
   11ac8:	|  |  |  |  |  |               movea.l d1,a0
   11aca:	|  |  |  |  |  |               adda.l d0,a0
   11acc:	|  |  |  |  |  |               move.l (a0),d1
   11ace:	|  |  |  |  |  |               move.l 132(sp),d0
   11ad2:	|  |  |  |  |  |               add.l d0,d0
   11ad4:	|  |  |  |  |  |               add.l d0,d0
   11ad6:	|  |  |  |  |  |               movea.l d1,a0
   11ad8:	|  |  |  |  |  |               adda.l d0,a0
   11ada:	|  |  |  |  |  |               move.l (a0),d0
   11adc:	|  |  |  |  |  |               moveq #-1,d1
   11ade:	|  |  |  |  |  |               cmp.l d0,d1
   11ae0:	|  |  |  |  |  |  /----------- bne.w 11be6 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   11ae4:	|  |  |  |  |  |  |            clr.l 122(sp)
   11ae8:	|  |  |  |  |  |  |     /----- bra.w 11bd4 <setFloor+0x6d2>
						if (d != i && d != j) {
   11aec:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   11af0:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   11af4:	|  |  |  |  |  |  |  |  |  /-- beq.w 11bd0 <setFloor+0x6ce>
   11af8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   11afc:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   11b00:	|  |  |  |  |  |  |  |  |  +-- beq.w 11bd0 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   11b04:	|  |  |  |  |  |  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11b0a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11b0e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11b12:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b14:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b16:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11b18:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11b1a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11b1c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11b20:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b22:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b24:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11b26:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11b28:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   11b2a:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   11b2e:	|  |  |  |  |  |  |  |  |  +-- bne.w 11bd0 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   11b32:	|  |  |  |  |  |  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11b38:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11b3c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11b40:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b42:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b44:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11b46:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11b48:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11b4a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11b4e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b50:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b52:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11b54:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11b56:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   11b58:	|  |  |  |  |  |  |  |  |  +-- bmi.s 11bd0 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   11b5a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   11b5e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b60:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b62:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   11b66:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11b68:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11b6a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11b6e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b70:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b72:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11b74:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11b76:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   11b78:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   11b7c:	|  |  |  |  |  |  |  |  |  +-- bgt.s 11bd0 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   11b7e:	|  |  |  |  |  |  |  |  |  |   movea.l 17c22 <currentFloor>,a0
   11b84:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   11b88:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11b8c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b8e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b90:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11b92:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11b94:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11b96:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11b9a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b9c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11b9e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11ba0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11ba2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   11ba6:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   11baa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11bac:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11bae:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   11bb2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11bb4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   11bb6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   11bba:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11bbc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   11bbe:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   11bc0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   11bc2:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   11bc6:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   11bc8:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   11bca:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   11bd0:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   11bd4:	|  |  |  |  |  |  |  |  \----> movea.l 17c22 <currentFloor>,a0
   11bda:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   11bde:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   11be2:	|  |  |  |  |  |  |  \-------- bgt.w 11aec <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   11be6:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   11bea:	|  |  |  |  |  \-------------> movea.l 17c22 <currentFloor>,a0
   11bf0:	|  |  |  |  |                  move.l 8(a0),d0
   11bf4:	|  |  |  |  |                  cmp.l 132(sp),d0
   11bf8:	|  |  |  |  \----------------- bgt.w 11ab6 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11bfc:	|  |  |  |                     addq.l #1,136(sp)
   11c00:	|  |  |  \-------------------> movea.l 17c22 <currentFloor>,a0
   11c06:	|  |  |                        move.l 8(a0),d0
   11c0a:	|  |  |                        cmp.l 136(sp),d0
   11c0e:	|  |  \----------------------- bgt.w 11aae <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   11c12:	|  |                           tst.w 130(sp)
   11c16:	|  \-------------------------- bne.w 11a9e <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11c1a:	|                              clr.l 136(sp)
   11c1e:	|                          /-- bra.s 11c46 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   11c20:	|                       /--|-> move.l 136(sp),d0
   11c24:	|                       |  |   add.l d0,d0
   11c26:	|                       |  |   add.l d0,d0
   11c28:	|                       |  |   movea.l 62(sp),a0
   11c2c:	|                       |  |   adda.l d0,a0
   11c2e:	|                       |  |   move.l (a0),54(sp)
   11c32:	|                       |  |   move.l 17b28 <SysBase>,d0
   11c38:	|                       |  |   movea.l d0,a6
   11c3a:	|                       |  |   movea.l 54(sp),a1
   11c3e:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11c42:	|                       |  |   addq.l #1,136(sp)
   11c46:	|                       |  \-> movea.l 17c22 <currentFloor>,a0
   11c4c:	|                       |      move.l 8(a0),d0
   11c50:	|                       |      cmp.l 136(sp),d0
   11c54:	|                       \----- bgt.s 11c20 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   11c56:	|                              move.l 62(sp),58(sp)
   11c5c:	|                              move.l 17b28 <SysBase>,d0
   11c62:	|                              movea.l d0,a6
   11c64:	|                              movea.l 58(sp),a1
   11c68:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   11c6c:	|                              clr.l 62(sp)

	return TRUE;
   11c70:	|                              moveq #1,d0
}
   11c72:	\----------------------------> movea.l (sp)+,a2
   11c74:	                               movea.l (sp)+,a6
   11c76:	                               lea 132(sp),sp
   11c7a:	                               rts

00011c7c <setFloorNull>:

void setFloorNull () {
	killFloor ();
   11c7c:	jsr 1116a <killFloor>
	noFloor ();
   11c82:	jsr 1108e <noFloor>
   11c88:	nop
   11c8a:	rts

00011c8c <memset>:
void* memset(void *dest, int val, unsigned long len) {
   11c8c:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   11c8e:	       move.l 8(sp),(sp)
	while(len-- > 0)
   11c92:	   /-- bra.s 11ca4 <memset+0x18>
		*ptr++ = val;
   11c94:	/--|-> move.l (sp),d0
   11c96:	|  |   move.l d0,d1
   11c98:	|  |   addq.l #1,d1
   11c9a:	|  |   move.l d1,(sp)
   11c9c:	|  |   move.l 12(sp),d1
   11ca0:	|  |   movea.l d0,a0
   11ca2:	|  |   move.b d1,(a0)
	while(len-- > 0)
   11ca4:	|  \-> move.l 16(sp),d0
   11ca8:	|      move.l d0,d1
   11caa:	|      subq.l #1,d1
   11cac:	|      move.l d1,16(sp)
   11cb0:	|      tst.l d0
   11cb2:	\----- bne.s 11c94 <memset+0x8>
	return dest;
   11cb4:	       move.l 8(sp),d0
}
   11cb8:	       addq.l #4,sp
   11cba:	       rts

00011cbc <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   11cbc:	       subq.l #8,sp
   11cbe:	       move.l d2,-(sp)
	char *d = (char *)dest;
   11cc0:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   11cc6:	       move.l 20(sp),4(sp)
	while(len--)
   11ccc:	   /-- bra.s 11cee <memcpy+0x32>
		*d++ = *s++;
   11cce:	/--|-> move.l 4(sp),d1
   11cd2:	|  |   move.l d1,d0
   11cd4:	|  |   addq.l #1,d0
   11cd6:	|  |   move.l d0,4(sp)
   11cda:	|  |   move.l 8(sp),d0
   11cde:	|  |   move.l d0,d2
   11ce0:	|  |   addq.l #1,d2
   11ce2:	|  |   move.l d2,8(sp)
   11ce6:	|  |   movea.l d1,a0
   11ce8:	|  |   move.b (a0),d1
   11cea:	|  |   movea.l d0,a0
   11cec:	|  |   move.b d1,(a0)
	while(len--)
   11cee:	|  \-> move.l 24(sp),d0
   11cf2:	|      move.l d0,d1
   11cf4:	|      subq.l #1,d1
   11cf6:	|      move.l d1,24(sp)
   11cfa:	|      tst.l d0
   11cfc:	\----- bne.s 11cce <memcpy+0x12>
	return dest;
   11cfe:	       move.l 16(sp),d0
}
   11d02:	       move.l (sp)+,d2
   11d04:	       addq.l #8,sp
   11d06:	       rts

00011d08 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   11d08:	       lea -128(sp),sp
   11d0c:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   11d10:	       move.w f0ff60 <gcc8_c_support.c.114adc9d+0xed3ccf>,d0
   11d16:	       cmpi.w #20153,d0
   11d1a:	   /-- beq.s 11d3e <KPrintF+0x36>
   11d1c:	   |   cmpi.w #-24562,d0
   11d20:	   +-- beq.s 11d3e <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   11d22:	   |   movea.l 17b28 <SysBase>,a6
   11d28:	   |   movea.l 144(sp),a0
   11d2c:	   |   lea 148(sp),a1
   11d30:	   |   lea 127c2 <KPutCharX>,a2
   11d36:	   |   suba.l a3,a3
   11d38:	   |   jsr -522(a6)
}
   11d3c:	/--|-- bra.s 11d68 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   11d3e:	|  \-> movea.l 17b28 <SysBase>,a6
   11d44:	|      movea.l 144(sp),a0
   11d48:	|      lea 148(sp),a1
   11d4c:	|      lea 127d0 <PutChar>,a2
   11d52:	|      lea 12(sp),a3
   11d56:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   11d5a:	|      move.l a3,-(sp)
   11d5c:	|      pea 56 <_start+0x56>
   11d60:	|      jsr f0ff60 <gcc8_c_support.c.114adc9d+0xed3ccf>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   11d66:	|      addq.l #8,sp
}
   11d68:	\----> movem.l (sp)+,a2-a3/a6
   11d6c:	       lea 128(sp),sp
   11d70:	       rts

00011d72 <warpmode>:

void warpmode(int on) { // bool
   11d72:	          subq.l #8,sp
	long(*UaeConf)(long mode, int index, const char* param, int param_len, char* outbuf, int outbuf_len);
	UaeConf = (long(*)(long, int, const char*, int, char*, int))0xf0ff60;
   11d74:	          move.l #15794016,4(sp)
	if(*((UWORD *)UaeConf) == 0x4eb9 || *((UWORD *)UaeConf) == 0xa00e) {
   11d7c:	          movea.l 4(sp),a0
   11d80:	          move.w (a0),d0
   11d82:	          cmpi.w #20153,d0
   11d86:	      /-- beq.s 11d96 <warpmode+0x24>
   11d88:	      |   movea.l 4(sp),a0
   11d8c:	      |   move.w (a0),d0
   11d8e:	      |   cmpi.w #-24562,d0
   11d92:	/-----|-- bne.w 11e9a <warpmode+0x128>
		char outbuf;
		UaeConf(82, -1, on ? "cpu_speed max" : "cpu_speed real", 0, &outbuf, 1);
   11d96:	|     \-> tst.l 12(sp)
   11d9a:	|  /----- beq.s 11da4 <warpmode+0x32>
   11d9c:	|  |      move.l #88865,d0
   11da2:	|  |  /-- bra.s 11daa <warpmode+0x38>
   11da4:	|  \--|-> move.l #88879,d0
   11daa:	|     \-> pea 1 <_start+0x1>
   11dae:	|         move.l sp,d1
   11db0:	|         addq.l #7,d1
   11db2:	|         move.l d1,-(sp)
   11db4:	|         clr.l -(sp)
   11db6:	|         move.l d0,-(sp)
   11db8:	|         pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
   11dbc:	|         pea 52 <_start+0x52>
   11dc0:	|         movea.l 28(sp),a0
   11dc4:	|         jsr (a0)
   11dc6:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_cycle_exact false" : "cpu_cycle_exact true", 0, &outbuf, 1);
   11dca:	|         tst.l 12(sp)
   11dce:	|  /----- beq.s 11dd8 <warpmode+0x66>
   11dd0:	|  |      move.l #88894,d0
   11dd6:	|  |  /-- bra.s 11dde <warpmode+0x6c>
   11dd8:	|  \--|-> move.l #88916,d0
   11dde:	|     \-> pea 1 <_start+0x1>
   11de2:	|         move.l sp,d1
   11de4:	|         addq.l #7,d1
   11de6:	|         move.l d1,-(sp)
   11de8:	|         clr.l -(sp)
   11dea:	|         move.l d0,-(sp)
   11dec:	|         pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
   11df0:	|         pea 52 <_start+0x52>
   11df4:	|         movea.l 28(sp),a0
   11df8:	|         jsr (a0)
   11dfa:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_memory_cycle_exact false" : "cpu_memory_cycle_exact true", 0, &outbuf, 1);
   11dfe:	|         tst.l 12(sp)
   11e02:	|  /----- beq.s 11e0c <warpmode+0x9a>
   11e04:	|  |      move.l #88937,d0
   11e0a:	|  |  /-- bra.s 11e12 <warpmode+0xa0>
   11e0c:	|  \--|-> move.l #88966,d0
   11e12:	|     \-> pea 1 <_start+0x1>
   11e16:	|         move.l sp,d1
   11e18:	|         addq.l #7,d1
   11e1a:	|         move.l d1,-(sp)
   11e1c:	|         clr.l -(sp)
   11e1e:	|         move.l d0,-(sp)
   11e20:	|         pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
   11e24:	|         pea 52 <_start+0x52>
   11e28:	|         movea.l 28(sp),a0
   11e2c:	|         jsr (a0)
   11e2e:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
   11e32:	|         tst.l 12(sp)
   11e36:	|  /----- beq.s 11e40 <warpmode+0xce>
   11e38:	|  |      move.l #88994,d0
   11e3e:	|  |  /-- bra.s 11e46 <warpmode+0xd4>
   11e40:	|  \--|-> move.l #89020,d0
   11e46:	|     \-> pea 1 <_start+0x1>
   11e4a:	|         move.l sp,d1
   11e4c:	|         addq.l #7,d1
   11e4e:	|         move.l d1,-(sp)
   11e50:	|         clr.l -(sp)
   11e52:	|         move.l d0,-(sp)
   11e54:	|         pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
   11e58:	|         pea 52 <_start+0x52>
   11e5c:	|         movea.l 28(sp),a0
   11e60:	|         jsr (a0)
   11e62:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
   11e66:	|         tst.l 12(sp)
   11e6a:	|  /----- beq.s 11e74 <warpmode+0x102>
   11e6c:	|  |      move.l #89045,d0
   11e72:	|  |  /-- bra.s 11e7a <warpmode+0x108>
   11e74:	|  \--|-> move.l #89055,d0
   11e7a:	|     \-> pea 1 <_start+0x1>
   11e7e:	|         move.l sp,d1
   11e80:	|         addq.l #7,d1
   11e82:	|         move.l d1,-(sp)
   11e84:	|         clr.l -(sp)
   11e86:	|         move.l d0,-(sp)
   11e88:	|         pea ffffffff <gcc8_c_support.c.114adc9d+0xfffc3d6e>
   11e8c:	|         pea 52 <_start+0x52>
   11e90:	|         movea.l 28(sp),a0
   11e94:	|         jsr (a0)
   11e96:	|         lea 24(sp),sp
	}
}
   11e9a:	\-------> nop
   11e9c:	          addq.l #8,sp
   11e9e:	          rts

00011ea0 <debug_cmd>:

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   11ea0:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   11ea2:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   11ea8:	       movea.l (sp),a0
   11eaa:	       move.w (a0),d0
   11eac:	       cmpi.w #20153,d0
   11eb0:	   /-- beq.s 11ebc <debug_cmd+0x1c>
   11eb2:	   |   movea.l (sp),a0
   11eb4:	   |   move.w (a0),d0
   11eb6:	   |   cmpi.w #-24562,d0
   11eba:	/--|-- bne.s 11eda <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   11ebc:	|  \-> move.l 20(sp),-(sp)
   11ec0:	|      move.l 20(sp),-(sp)
   11ec4:	|      move.l 20(sp),-(sp)
   11ec8:	|      move.l 20(sp),-(sp)
   11ecc:	|      pea 58 <_start+0x58>
   11ed0:	|      movea.l 20(sp),a0
   11ed4:	|      jsr (a0)
   11ed6:	|      lea 20(sp),sp
	}
}
   11eda:	\----> nop
   11edc:	       addq.l #4,sp
   11ede:	       rts

00011ee0 <debug_start_idle>:
	debug_cmd(barto_cmd_text, (((unsigned int)left) << 16) | ((unsigned int)top), (unsigned int)text, color);
}

// profiler
void debug_start_idle() {
	debug_cmd(barto_cmd_set_idle, 1, 0, 0);
   11ee0:	clr.l -(sp)
   11ee2:	clr.l -(sp)
   11ee4:	pea 1 <_start+0x1>
   11ee8:	pea 5 <_start+0x5>
   11eec:	jsr 11ea0 <debug_cmd>
   11ef2:	lea 16(sp),sp
}
   11ef6:	nop
   11ef8:	rts

00011efa <debug_stop_idle>:

void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
   11efa:	clr.l -(sp)
   11efc:	clr.l -(sp)
   11efe:	clr.l -(sp)
   11f00:	pea 5 <_start+0x5>
   11f04:	jsr 11ea0 <debug_cmd>
   11f0a:	lea 16(sp),sp
}
   11f0e:	nop
   11f10:	rts

00011f12 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   11f12:	lea -12(sp),sp
   11f16:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   11f18:	move.l 20(sp),12(sp)
   11f1e:	move.l 24(sp),8(sp)
   11f24:	move.l 17b38 <MathIeeeSingBasBase>,d0
   11f2a:	movea.l d0,a6
   11f2c:	move.l 12(sp),d0
   11f30:	move.l 8(sp),d1
   11f34:	jsr -66(a6)
   11f38:	move.l d0,4(sp)
   11f3c:	move.l 4(sp),d0
}
   11f40:	movea.l (sp)+,a6
   11f42:	lea 12(sp),sp
   11f46:	rts

00011f48 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   11f48:	lea -32(sp),sp
   11f4c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   11f50:	move.l 48(sp),36(sp)
   11f56:	move.l 52(sp),40(sp)
   11f5c:	move.l 56(sp),28(sp)
   11f62:	move.l 60(sp),32(sp)
   11f68:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   11f6e:	movea.l d0,a6
   11f70:	move.l 36(sp),d0
   11f74:	move.l 40(sp),d1
   11f78:	move.l 28(sp),d2
   11f7c:	move.l 32(sp),d3
   11f80:	jsr -66(a6)
   11f84:	move.l d0,12(sp)
   11f88:	move.l d1,16(sp)
   11f8c:	move.l 12(sp),20(sp)
   11f92:	move.l 16(sp),24(sp)
   11f98:	move.l 20(sp),d0
   11f9c:	move.l 24(sp),d1
}
   11fa0:	movem.l (sp)+,d2-d3/a6
   11fa4:	lea 32(sp),sp
   11fa8:	rts

00011faa <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   11faa:	lea -32(sp),sp
   11fae:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   11fb2:	move.l 48(sp),36(sp)
   11fb8:	move.l 52(sp),40(sp)
   11fbe:	move.l 56(sp),28(sp)
   11fc4:	move.l 60(sp),32(sp)
   11fca:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   11fd0:	movea.l d0,a6
   11fd2:	move.l 36(sp),d0
   11fd6:	move.l 40(sp),d1
   11fda:	move.l 28(sp),d2
   11fde:	move.l 32(sp),d3
   11fe2:	jsr -84(a6)
   11fe6:	move.l d0,12(sp)
   11fea:	move.l d1,16(sp)
   11fee:	move.l 12(sp),20(sp)
   11ff4:	move.l 16(sp),24(sp)
   11ffa:	move.l 20(sp),d0
   11ffe:	move.l 24(sp),d1
}
   12002:	movem.l (sp)+,d2-d3/a6
   12006:	lea 32(sp),sp
   1200a:	rts

0001200c <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   1200c:	lea -12(sp),sp
   12010:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   12012:	move.l 20(sp),12(sp)
   12018:	move.l 24(sp),8(sp)
   1201e:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12024:	movea.l d0,a6
   12026:	move.l 12(sp),d0
   1202a:	move.l 8(sp),d1
   1202e:	jsr -84(a6)
   12032:	move.l d0,4(sp)
   12036:	move.l 4(sp),d0
}
   1203a:	movea.l (sp)+,a6
   1203c:	lea 12(sp),sp
   12040:	rts

00012042 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   12042:	lea -12(sp),sp
   12046:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12048:	move.l 20(sp),12(sp)
   1204e:	move.l 24(sp),8(sp)
   12054:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1205a:	movea.l d0,a6
   1205c:	move.l 12(sp),d0
   12060:	move.l 8(sp),d1
   12064:	jsr -42(a6)
   12068:	move.l d0,4(sp)
   1206c:	move.l 4(sp),d0
}
   12070:	movea.l (sp)+,a6
   12072:	lea 12(sp),sp
   12076:	rts

00012078 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   12078:	lea -20(sp),sp
   1207c:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1207e:	move.l 28(sp),20(sp)
   12084:	move.l 17b44 <MathIeeeDoubTransBase>,d0
   1208a:	movea.l d0,a6
   1208c:	move.l 20(sp),d0
   12090:	jsr -108(a6)
   12094:	move.l d0,4(sp)
   12098:	move.l d1,8(sp)
   1209c:	move.l 4(sp),12(sp)
   120a2:	move.l 8(sp),16(sp)
   120a8:	move.l 12(sp),d0
   120ac:	move.l 16(sp),d1
}
   120b0:	movea.l (sp)+,a6
   120b2:	lea 20(sp),sp
   120b6:	rts

000120b8 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   120b8:	lea -12(sp),sp
   120bc:	move.l a6,-(sp)
	return IEEEDPFix(value);
   120be:	move.l 20(sp),8(sp)
   120c4:	move.l 24(sp),12(sp)
   120ca:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   120d0:	movea.l d0,a6
   120d2:	move.l 8(sp),d0
   120d6:	move.l 12(sp),d1
   120da:	jsr -30(a6)
   120de:	move.l d0,4(sp)
   120e2:	move.l 4(sp),d0
   120e6:	move.l d0,-(sp)
   120e8:	jsr 12120 <__floatsidf>
   120ee:	addq.l #4,sp
}
   120f0:	movea.l (sp)+,a6
   120f2:	lea 12(sp),sp
   120f6:	rts

000120f8 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   120f8:	subq.l #8,sp
   120fa:	move.l a6,-(sp)
	return IEEESPFix(value);
   120fc:	move.l 16(sp),8(sp)
   12102:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12108:	movea.l d0,a6
   1210a:	move.l 8(sp),d0
   1210e:	jsr -30(a6)
   12112:	move.l d0,4(sp)
   12116:	move.l 4(sp),d0
}
   1211a:	movea.l (sp)+,a6
   1211c:	addq.l #8,sp
   1211e:	rts

00012120 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   12120:	lea -20(sp),sp
   12124:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   12126:	move.l 28(sp),20(sp)
   1212c:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   12132:	movea.l d0,a6
   12134:	move.l 20(sp),d0
   12138:	jsr -36(a6)
   1213c:	move.l d0,4(sp)
   12140:	move.l d1,8(sp)
   12144:	move.l 4(sp),12(sp)
   1214a:	move.l 8(sp),16(sp)
   12150:	move.l 12(sp),d0
   12154:	move.l 16(sp),d1
}
   12158:	movea.l (sp)+,a6
   1215a:	lea 20(sp),sp
   1215e:	rts

00012160 <__floatsisf>:

FLOAT __floatsisf(int i) {
   12160:	subq.l #8,sp
   12162:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   12164:	move.l 16(sp),8(sp)
   1216a:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12170:	movea.l d0,a6
   12172:	move.l 8(sp),d0
   12176:	jsr -36(a6)
   1217a:	move.l d0,4(sp)
   1217e:	move.l 4(sp),d0
}
   12182:	movea.l (sp)+,a6
   12184:	addq.l #8,sp
   12186:	rts

00012188 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   12188:	subq.l #8,sp
   1218a:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1218c:	move.l 16(sp),8(sp)
   12192:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12198:	movea.l d0,a6
   1219a:	move.l 8(sp),d0
   1219e:	jsr -36(a6)
   121a2:	move.l d0,4(sp)
   121a6:	move.l 4(sp),d0
}
   121aa:	movea.l (sp)+,a6
   121ac:	addq.l #8,sp
   121ae:	rts

000121b0 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   121b0:	lea -32(sp),sp
   121b4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   121b8:	move.l 48(sp),36(sp)
   121be:	move.l 52(sp),40(sp)
   121c4:	move.l 56(sp),28(sp)
   121ca:	move.l 60(sp),32(sp)
   121d0:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   121d6:	movea.l d0,a6
   121d8:	move.l 36(sp),d0
   121dc:	move.l 40(sp),d1
   121e0:	move.l 28(sp),d2
   121e4:	move.l 32(sp),d3
   121e8:	jsr -78(a6)
   121ec:	move.l d0,12(sp)
   121f0:	move.l d1,16(sp)
   121f4:	move.l 12(sp),20(sp)
   121fa:	move.l 16(sp),24(sp)
   12200:	move.l 20(sp),d0
   12204:	move.l 24(sp),d1
}
   12208:	movem.l (sp)+,d2-d3/a6
   1220c:	lea 32(sp),sp
   12210:	rts

00012212 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   12212:	lea -12(sp),sp
   12216:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   12218:	move.l 20(sp),12(sp)
   1221e:	move.l 24(sp),8(sp)
   12224:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1222a:	movea.l d0,a6
   1222c:	move.l 12(sp),d0
   12230:	move.l 8(sp),d1
   12234:	jsr -78(a6)
   12238:	move.l d0,4(sp)
   1223c:	move.l 4(sp),d0
}
   12240:	movea.l (sp)+,a6
   12242:	lea 12(sp),sp
   12246:	rts

00012248 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   12248:	lea -12(sp),sp
   1224c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1224e:	move.l 20(sp),12(sp)
   12254:	move.l 24(sp),8(sp)
   1225a:	move.l 17b38 <MathIeeeSingBasBase>,d0
   12260:	movea.l d0,a6
   12262:	move.l 12(sp),d0
   12266:	move.l 8(sp),d1
   1226a:	jsr -42(a6)
   1226e:	move.l d0,4(sp)
   12272:	move.l 4(sp),d0
}
   12276:	movea.l (sp)+,a6
   12278:	lea 12(sp),sp
   1227c:	rts

0001227e <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1227e:	lea -20(sp),sp
   12282:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   12286:	move.l 36(sp),24(sp)
   1228c:	move.l 40(sp),28(sp)
   12292:	move.l 44(sp),16(sp)
   12298:	move.l 48(sp),20(sp)
   1229e:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   122a4:	movea.l d0,a6
   122a6:	move.l 24(sp),d0
   122aa:	move.l 28(sp),d1
   122ae:	move.l 16(sp),d2
   122b2:	move.l 20(sp),d3
   122b6:	jsr -42(a6)
   122ba:	move.l d0,12(sp)
   122be:	move.l 12(sp),d0
}
   122c2:	movem.l (sp)+,d2-d3/a6
   122c6:	lea 20(sp),sp
   122ca:	rts

000122cc <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   122cc:	lea -12(sp),sp
   122d0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   122d2:	move.l 20(sp),12(sp)
   122d8:	move.l 24(sp),8(sp)
   122de:	move.l 17b38 <MathIeeeSingBasBase>,d0
   122e4:	movea.l d0,a6
   122e6:	move.l 12(sp),d0
   122ea:	move.l 8(sp),d1
   122ee:	jsr -42(a6)
   122f2:	move.l d0,4(sp)
   122f6:	move.l 4(sp),d0
}
   122fa:	movea.l (sp)+,a6
   122fc:	lea 12(sp),sp
   12300:	rts

00012302 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   12302:	lea -12(sp),sp
   12306:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12308:	move.l 20(sp),12(sp)
   1230e:	move.l 24(sp),8(sp)
   12314:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1231a:	movea.l d0,a6
   1231c:	move.l 12(sp),d0
   12320:	move.l 8(sp),d1
   12324:	jsr -42(a6)
   12328:	move.l d0,4(sp)
   1232c:	move.l 4(sp),d0
}
   12330:	movea.l (sp)+,a6
   12332:	lea 12(sp),sp
   12336:	rts

00012338 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   12338:	lea -20(sp),sp
   1233c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   12340:	move.l 36(sp),24(sp)
   12346:	move.l 40(sp),28(sp)
   1234c:	move.l 44(sp),16(sp)
   12352:	move.l 48(sp),20(sp)
   12358:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   1235e:	movea.l d0,a6
   12360:	move.l 24(sp),d0
   12364:	move.l 28(sp),d1
   12368:	move.l 16(sp),d2
   1236c:	move.l 20(sp),d3
   12370:	jsr -42(a6)
   12374:	move.l d0,12(sp)
   12378:	move.l 12(sp),d0
}
   1237c:	movem.l (sp)+,d2-d3/a6
   12380:	lea 20(sp),sp
   12384:	rts

00012386 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   12386:	lea -12(sp),sp
   1238a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1238c:	move.l 20(sp),12(sp)
   12392:	move.l 24(sp),8(sp)
   12398:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1239e:	movea.l d0,a6
   123a0:	move.l 12(sp),d0
   123a4:	move.l 8(sp),d1
   123a8:	jsr -42(a6)
   123ac:	move.l d0,4(sp)
   123b0:	move.l 4(sp),d0
}
   123b4:	movea.l (sp)+,a6
   123b6:	lea 12(sp),sp
   123ba:	rts

000123bc <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   123bc:	lea -12(sp),sp
   123c0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   123c2:	move.l 20(sp),12(sp)
   123c8:	move.l 24(sp),8(sp)
   123ce:	move.l 17b38 <MathIeeeSingBasBase>,d0
   123d4:	movea.l d0,a6
   123d6:	move.l 12(sp),d0
   123da:	move.l 8(sp),d1
   123de:	jsr -42(a6)
   123e2:	move.l d0,4(sp)
   123e6:	move.l 4(sp),d0
}
   123ea:	movea.l (sp)+,a6
   123ec:	lea 12(sp),sp
   123f0:	rts

000123f2 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   123f2:	lea -32(sp),sp
   123f6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   123fa:	move.l 48(sp),36(sp)
   12400:	move.l 52(sp),40(sp)
   12406:	move.l 56(sp),28(sp)
   1240c:	move.l 60(sp),32(sp)
   12412:	move.l 17b40 <MathIeeeDoubBasBase>,d0
   12418:	movea.l d0,a6
   1241a:	move.l 36(sp),d0
   1241e:	move.l 40(sp),d1
   12422:	move.l 28(sp),d2
   12426:	move.l 32(sp),d3
   1242a:	jsr -72(a6)
   1242e:	move.l d0,12(sp)
   12432:	move.l d1,16(sp)
   12436:	move.l 12(sp),20(sp)
   1243c:	move.l 16(sp),24(sp)
   12442:	move.l 20(sp),d0
   12446:	move.l 24(sp),d1
}
   1244a:	movem.l (sp)+,d2-d3/a6
   1244e:	lea 32(sp),sp
   12452:	rts

00012454 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   12454:	lea -12(sp),sp
   12458:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   1245a:	move.l 20(sp),12(sp)
   12460:	move.l 24(sp),8(sp)
   12466:	move.l 17b38 <MathIeeeSingBasBase>,d0
   1246c:	movea.l d0,a6
   1246e:	move.l 12(sp),d0
   12472:	move.l 8(sp),d1
   12476:	jsr -72(a6)
   1247a:	move.l d0,4(sp)
   1247e:	move.l 4(sp),d0
}
   12482:	movea.l (sp)+,a6
   12484:	lea 12(sp),sp
   12488:	rts

0001248a <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   1248a:	lea -12(sp),sp
   1248e:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   12490:	move.l 20(sp),8(sp)
   12496:	move.l 24(sp),12(sp)
   1249c:	move.l 17b44 <MathIeeeDoubTransBase>,d0
   124a2:	movea.l d0,a6
   124a4:	move.l 8(sp),d0
   124a8:	move.l 12(sp),d1
   124ac:	jsr -102(a6)
   124b0:	move.l d0,4(sp)
   124b4:	move.l 4(sp),d0
}
   124b8:	movea.l (sp)+,a6
   124ba:	lea 12(sp),sp
   124be:	rts

000124c0 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   124c0:	       lea -24(sp),sp
   124c4:	       move.l a6,-(sp)
    if (x > 0) {
   124c6:	       clr.l -(sp)
   124c8:	       move.l 40(sp),-(sp)
   124cc:	       jsr 122cc <__gtsf2>
   124d2:	       addq.l #8,sp
   124d4:	       tst.l d0
   124d6:	   /-- ble.s 12508 <atan2f+0x48>
        return IEEESPAtan(y / x);
   124d8:	   |   move.l 36(sp),-(sp)
   124dc:	   |   move.l 36(sp),-(sp)
   124e0:	   |   jsr 1200c <__divsf3>
   124e6:	   |   addq.l #8,sp
   124e8:	   |   move.l d0,8(sp)
   124ec:	   |   move.l 17b3c <MathIeeeSingTransBase>,d0
   124f2:	   |   movea.l d0,a6
   124f4:	   |   move.l 8(sp),d0
   124f8:	   |   jsr -30(a6)
   124fc:	   |   move.l d0,4(sp)
   12500:	   |   move.l 4(sp),d0
   12504:	/--|-- bra.w 12668 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   12508:	|  \-> clr.l -(sp)
   1250a:	|      move.l 40(sp),-(sp)
   1250e:	|      jsr 12386 <__ltsf2>
   12514:	|      addq.l #8,sp
   12516:	|      tst.l d0
   12518:	|  /-- bge.s 1258c <atan2f+0xcc>
   1251a:	|  |   clr.l -(sp)
   1251c:	|  |   move.l 36(sp),-(sp)
   12520:	|  |   jsr 12248 <__gesf2>
   12526:	|  |   addq.l #8,sp
   12528:	|  |   tst.l d0
   1252a:	|  +-- blt.s 1258c <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1252c:	|  |   move.l 36(sp),-(sp)
   12530:	|  |   move.l 36(sp),-(sp)
   12534:	|  |   jsr 1200c <__divsf3>
   1253a:	|  |   addq.l #8,sp
   1253c:	|  |   move.l d0,24(sp)
   12540:	|  |   move.l 17b3c <MathIeeeSingTransBase>,d0
   12546:	|  |   movea.l d0,a6
   12548:	|  |   move.l 24(sp),d0
   1254c:	|  |   jsr -30(a6)
   12550:	|  |   move.l d0,20(sp)
   12554:	|  |   move.l 20(sp),d0
   12558:	|  |   move.l d0,-(sp)
   1255a:	|  |   jsr 12078 <__extendsfdf2>
   12560:	|  |   addq.l #4,sp
   12562:	|  |   move.l #1413754136,-(sp)
   12568:	|  |   move.l #1074340347,-(sp)
   1256e:	|  |   move.l d1,-(sp)
   12570:	|  |   move.l d0,-(sp)
   12572:	|  |   jsr 11f48 <__adddf3>
   12578:	|  |   lea 16(sp),sp
   1257c:	|  |   move.l d1,-(sp)
   1257e:	|  |   move.l d0,-(sp)
   12580:	|  |   jsr 1248a <__truncdfsf2>
   12586:	|  |   addq.l #8,sp
   12588:	+--|-- bra.w 12668 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   1258c:	|  \-> clr.l -(sp)
   1258e:	|      move.l 40(sp),-(sp)
   12592:	|      jsr 12386 <__ltsf2>
   12598:	|      addq.l #8,sp
   1259a:	|      tst.l d0
   1259c:	|  /-- bge.s 1260e <atan2f+0x14e>
   1259e:	|  |   clr.l -(sp)
   125a0:	|  |   move.l 36(sp),-(sp)
   125a4:	|  |   jsr 12386 <__ltsf2>
   125aa:	|  |   addq.l #8,sp
   125ac:	|  |   tst.l d0
   125ae:	|  +-- bge.s 1260e <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   125b0:	|  |   move.l 36(sp),-(sp)
   125b4:	|  |   move.l 36(sp),-(sp)
   125b8:	|  |   jsr 1200c <__divsf3>
   125be:	|  |   addq.l #8,sp
   125c0:	|  |   move.l d0,16(sp)
   125c4:	|  |   move.l 17b3c <MathIeeeSingTransBase>,d0
   125ca:	|  |   movea.l d0,a6
   125cc:	|  |   move.l 16(sp),d0
   125d0:	|  |   jsr -30(a6)
   125d4:	|  |   move.l d0,12(sp)
   125d8:	|  |   move.l 12(sp),d0
   125dc:	|  |   move.l d0,-(sp)
   125de:	|  |   jsr 12078 <__extendsfdf2>
   125e4:	|  |   addq.l #4,sp
   125e6:	|  |   move.l #1413754136,-(sp)
   125ec:	|  |   move.l #1074340347,-(sp)
   125f2:	|  |   move.l d1,-(sp)
   125f4:	|  |   move.l d0,-(sp)
   125f6:	|  |   jsr 123f2 <__subdf3>
   125fc:	|  |   lea 16(sp),sp
   12600:	|  |   move.l d1,-(sp)
   12602:	|  |   move.l d0,-(sp)
   12604:	|  |   jsr 1248a <__truncdfsf2>
   1260a:	|  |   addq.l #8,sp
   1260c:	+--|-- bra.s 12668 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1260e:	|  \-> clr.l -(sp)
   12610:	|      move.l 40(sp),-(sp)
   12614:	|      jsr 12042 <__eqsf2>
   1261a:	|      addq.l #8,sp
   1261c:	|      tst.l d0
   1261e:	|  /-- bne.s 1263a <atan2f+0x17a>
   12620:	|  |   clr.l -(sp)
   12622:	|  |   move.l 36(sp),-(sp)
   12626:	|  |   jsr 122cc <__gtsf2>
   1262c:	|  |   addq.l #8,sp
   1262e:	|  |   tst.l d0
   12630:	|  +-- ble.s 1263a <atan2f+0x17a>
        return PI / 2;
   12632:	|  |   move.l #1070141403,d0
   12638:	+--|-- bra.s 12668 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   1263a:	|  \-> clr.l -(sp)
   1263c:	|      move.l 40(sp),-(sp)
   12640:	|      jsr 12042 <__eqsf2>
   12646:	|      addq.l #8,sp
   12648:	|      tst.l d0
   1264a:	|  /-- bne.s 12666 <atan2f+0x1a6>
   1264c:	|  |   clr.l -(sp)
   1264e:	|  |   move.l 36(sp),-(sp)
   12652:	|  |   jsr 12386 <__ltsf2>
   12658:	|  |   addq.l #8,sp
   1265a:	|  |   tst.l d0
   1265c:	|  +-- bge.s 12666 <atan2f+0x1a6>
        return -PI / 2;
   1265e:	|  |   move.l #-1077342245,d0
   12664:	+--|-- bra.s 12668 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   12666:	|  \-> moveq #0,d0
    }
}
   12668:	\----> movea.l (sp)+,a6
   1266a:	       lea 24(sp),sp
   1266e:	       rts

00012670 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   12670:	lea -24(sp),sp
   12674:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   12676:	move.l 32(sp),20(sp)
   1267c:	move.l 36(sp),24(sp)
   12682:	move.l 17b44 <MathIeeeDoubTransBase>,d0
   12688:	movea.l d0,a6
   1268a:	move.l 20(sp),d0
   1268e:	move.l 24(sp),d1
   12692:	jsr -96(a6)
   12696:	move.l d0,4(sp)
   1269a:	move.l d1,8(sp)
   1269e:	move.l 4(sp),12(sp)
   126a4:	move.l 8(sp),16(sp)
   126aa:	move.l 12(sp),d0
   126ae:	move.l 16(sp),d1
}
   126b2:	movea.l (sp)+,a6
   126b4:	lea 24(sp),sp
   126b8:	rts

000126ba <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   126ba:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   126be:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   126c2:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   126c6:	mulu.w 8(sp),d1
	addw	d1, d0
   126ca:	add.w d1,d0
	swap	d0
   126cc:	swap d0
	clrw	d0
   126ce:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   126d0:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   126d4:	mulu.w 10(sp),d1
	addl	d1, d0
   126d8:	add.l d1,d0
	rts
   126da:	rts

000126dc <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   126dc:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   126de:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   126e2:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   126e6:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   126ec:	   /-- bcc.s 12704 <__udivsi3+0x28>
	movel	d0, d2
   126ee:	   |   move.l d0,d2
	clrw	d2
   126f0:	   |   clr.w d2
	swap	d2
   126f2:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   126f4:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   126f6:	   |   move.w d2,d0
	swap	d0
   126f8:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   126fa:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   126fe:	   |   divu.w d1,d2
	movew	d2, d0
   12700:	   |   move.w d2,d0
	jra	6f
   12702:	/--|-- bra.s 12734 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   12704:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   12706:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   12708:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   1270a:	|  |   cmpi.l #65536,d1
	jcc	4b
   12710:	|  \-- bcc.s 12706 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   12712:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   12714:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   1271a:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   1271c:	|      mulu.w d0,d1
	swap	d2
   1271e:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   12720:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   12722:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   12724:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   12726:	|  /-- bne.s 12732 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   12728:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   1272a:	|  +-- bcs.s 12732 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   1272c:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   12730:	+--|-- bls.s 12734 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   12732:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   12734:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   12736:	       rts

00012738 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   12738:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   1273a:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   1273c:	    move.l 12(sp),d1
	jpl	1f
   12740:	/-- bpl.s 12746 <__divsi3+0xe>
	negl	d1
   12742:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   12744:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   12746:	\-> move.l 8(sp),d0
	jpl	2f
   1274a:	/-- bpl.s 12750 <__divsi3+0x18>
	negl	d0
   1274c:	|   neg.l d0
	negb	d2
   1274e:	|   neg.b d2

2:	movel	d1, sp@-
   12750:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12752:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   12754:	    jsr 126dc <__udivsi3>
	addql	#8, sp
   1275a:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   1275c:	    tst.b d2
	jpl	3f
   1275e:	/-- bpl.s 12762 <__divsi3+0x2a>
	negl	d0
   12760:	|   neg.l d0

3:	movel	sp@+, d2
   12762:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   12764:	    rts

00012766 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   12766:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   1276a:	move.l 4(sp),d0
	movel	d1, sp@-
   1276e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12770:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   12772:	jsr 12738 <__divsi3>
	addql	#8, sp
   12778:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   1277a:	move.l 8(sp),d1
	movel	d1, sp@-
   1277e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   12780:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   12782:	jsr 126ba <__mulsi3>
	addql	#8, sp
   12788:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   1278a:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1278e:	sub.l d0,d1
	movel	d1, d0
   12790:	move.l d1,d0
	rts
   12792:	rts

00012794 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   12794:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   12798:	move.l 4(sp),d0
	movel	d1, sp@-
   1279c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1279e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   127a0:	jsr 126dc <__udivsi3>
	addql	#8, sp
   127a6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   127a8:	move.l 8(sp),d1
	movel	d1, sp@-
   127ac:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   127ae:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   127b0:	jsr 126ba <__mulsi3>
	addql	#8, sp
   127b6:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   127b8:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   127bc:	sub.l d0,d1
	movel	d1, d0
   127be:	move.l d1,d0
	rts
   127c0:	rts

000127c2 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   127c2:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   127c4:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   127c8:	jsr -516(a6)
    move.l (sp)+, a6
   127cc:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   127ce:	rts

000127d0 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   127d0:	move.b d0,(a3)+
	rts
   127d2:	rts
