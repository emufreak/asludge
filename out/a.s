
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #109109,d0
       8:	       subi.l #109109,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1aa35 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #109109,d0
      40:	       subi.l #109109,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1aa35 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 64a8 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #109109,d0
      7e:	       subi.l #109109,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1aa35 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 12c20 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1b1d8 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 12c38 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1aa36 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 12c20 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1b1d8 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1aa36 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 12c20 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1b1d8 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 1657a <PutChar+0x4>
     35c:	|  |              |   jsr 15c26 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1b1e0 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1b1e0 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1b1e0 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1b1e0 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1b1e0 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1b1e0 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1b1e0 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 165a4 <PutChar+0x2e>
     834:	|   jsr 15c26 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1b1e0 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 165c0 <PutChar+0x4a>
     8a6:	|   jsr 15c26 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1b1e0 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1b1e0 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1b1e0 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1b1e0 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1b1e0 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1b1e0 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1b1e0 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1b1e0 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1b1d8 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1b1e0 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 12c20 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1b1e0 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1b0e0 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1b0e0 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1b0e0 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1b0e0 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1b0e0 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1b198 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1b0e0 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1b0e0 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1b194 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1b0e0 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1b0e0 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1b0e0 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 8930 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1b0e0 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1b0e4 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1b0e8 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 1df2 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 165e8 <PutChar+0x72>
     e1a:	          jsr 15c26 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1b0fa <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 16601 <PutChar+0x8b>
     e30:	      |   jsr 15c26 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1b0f4 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1b1e4 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1b0fa <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 1662f <PutChar+0xb9>
     ef0:	|         jsr 15c26 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1b1e4 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 1664f <PutChar+0xd9>
     f3c:	|         jsr 15c26 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1b106 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1b12c <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1b11c <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1b130 <winHeight>,d0
     f6e:	|         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1b11c <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1b11c <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1b11c <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1b11c <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 1666f <PutChar+0xf9>
     fbe:	|         jsr 15c26 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1b1d8 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 16684 <PutChar+0x10e>
    1010:	   |   jsr 15c26 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1b1e0 <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1b128 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #109112,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #109176,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #109224,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #109264,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1b120 <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 166bf <PutChar+0x149>
    11c6:	                jsr 15c26 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1b118 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1b11c <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1b118 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1b10c <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1b1e4 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1b12c <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1b12c <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1b12c <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 16460 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1b0fa <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1b12c <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 16460 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1b10c <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1b12c <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1b130 <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 16460 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1b12c <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1b130 <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 16460 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1b1e4 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1b124 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1b120 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1b128 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1b128 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1b106 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1b106 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1b106 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    14e8:	    lea -20(sp),sp
    14ec:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    14ee:	    move.l 1b10c <CstDrawBuffer>,d0
    14f4:	/-- beq.s 150e <CstFreeBuffer+0x26>
    14f6:	|   move.l 1b10c <CstDrawBuffer>,20(sp)
    14fe:	|   move.l 1b1d8 <SysBase>,d0
    1504:	|   movea.l d0,a6
    1506:	|   movea.l 20(sp),a1
    150a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    150e:	\-> move.l 1b108 <CstViewBuffer>,d0
    1514:	/-- beq.s 152e <CstFreeBuffer+0x46>
    1516:	|   move.l 1b108 <CstViewBuffer>,16(sp)
    151e:	|   move.l 1b1d8 <SysBase>,d0
    1524:	|   movea.l d0,a6
    1526:	|   movea.l 16(sp),a1
    152a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    152e:	\-> move.l 1b102 <CstCopperList>,d0
    1534:	/-- beq.s 154e <CstFreeBuffer+0x66>
    1536:	|   move.l 1b102 <CstCopperList>,12(sp)
    153e:	|   move.l 1b1d8 <SysBase>,d0
    1544:	|   movea.l d0,a6
    1546:	|   movea.l 12(sp),a1
    154a:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    154e:	\-> move.l 1b0fa <CstBackDrop>,d0
    1554:	/-- beq.s 156e <CstFreeBuffer+0x86>
    1556:	|   move.l 1b0fa <CstBackDrop>,8(sp)
    155e:	|   move.l 1b1d8 <SysBase>,d0
    1564:	|   movea.l d0,a6
    1566:	|   movea.l 8(sp),a1
    156a:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    156e:	\-> move.l 1b0fe <CstBackDropBackup>,d0
    1574:	/-- beq.s 158e <CstFreeBuffer+0xa6>
    1576:	|   move.l 1b0fe <CstBackDropBackup>,4(sp)
    157e:	|   move.l 1b1d8 <SysBase>,d0
    1584:	|   movea.l d0,a6
    1586:	|   movea.l 4(sp),a1
    158a:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    158e:	\-> clr.l 1b10c <CstDrawBuffer>
  CstViewBuffer = NULL;
    1594:	    clr.l 1b108 <CstViewBuffer>
  CstCopperList = NULL;
    159a:	    clr.l 1b102 <CstCopperList>
  CstBackDrop = NULL;
    15a0:	    clr.l 1b0fa <CstBackDrop>

}
    15a6:	    nop
    15a8:	    movea.l (sp)+,a6
    15aa:	    lea 20(sp),sp
    15ae:	    rts

000015b0 <CstFreeze>:



void CstFreeze( ) {
    15b0:	       lea -36(sp),sp
    15b4:	       move.l a6,-(sp)
    15b6:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    15b8:	       pea 166db <PutChar+0x165>
    15be:	       jsr 15c26 <KPrintF>
    15c4:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    15c6:	       move.l 1b12c <winWidth>,d0
    15cc:	       lsr.l #3,d0
    15ce:	       move.l d0,d1
    15d0:	       move.l 1b130 <winHeight>,d0
    15d6:	       move.l d0,d0
    15d8:	       muls.w d0,d1
    15da:	       move.w d1,d0
    15dc:	       add.w d0,d0
    15de:	       add.w d0,d0
    15e0:	       move.w d0,d2
    15e2:	       add.w d1,d2
    15e4:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    15e8:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    15f0:	       moveq #0,d0
    15f2:	       move.w 26(sp),d0
    15f6:	       move.l d0,18(sp)
    15fa:	       clr.l 14(sp)
    15fe:	       move.l 1b1d8 <SysBase>,d0
    1604:	       movea.l d0,a6
    1606:	       move.l 18(sp),d0
    160a:	       move.l 14(sp),d1
    160e:	       jsr -684(a6)
    1612:	       move.l d0,10(sp)
    1616:	       move.l 10(sp),d0
    161a:	       move.l d0,1b0fe <CstBackDropBackup>
  if( !CstBackDropBackup)
    1620:	       move.l 1b0fe <CstBackDropBackup>,d0
    1626:	   /-- bne.s 1636 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1628:	   |   pea 16702 <PutChar+0x18c>
    162e:	   |   jsr 15c26 <KPrintF>
    1634:	   |   addq.l #4,sp

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1636:	   \-> move.l 1b0fa <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    163e:	       move.l 1b0fe <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1646:	       clr.l 32(sp)
    164a:	   /-- bra.s 1670 <CstFreeze+0xc0>
  {
    *dst++ = *src++;
    164c:	/--|-> move.l 40(sp),d1
    1650:	|  |   move.l d1,d0
    1652:	|  |   addq.l #4,d0
    1654:	|  |   move.l d0,40(sp)
    1658:	|  |   move.l 36(sp),d0
    165c:	|  |   move.l d0,d2
    165e:	|  |   addq.l #4,d2
    1660:	|  |   move.l d2,36(sp)
    1664:	|  |   movea.l d1,a0
    1666:	|  |   move.l (a0),d1
    1668:	|  |   movea.l d0,a0
    166a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    166c:	|  |   addq.l #1,32(sp)
    1670:	|  \-> move.w 26(sp),d0
    1674:	|      lsr.w #2,d0
    1676:	|      move.w d0,d0
    1678:	|      andi.l #65535,d0
    167e:	|      cmp.l 32(sp),d0
    1682:	\----- bgt.s 164c <CstFreeze+0x9c>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1684:	       move.l 1b108 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    168c:	       move.l 1b0fa <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1694:	       clr.l 28(sp)
    1698:	   /-- bra.s 16be <CstFreeze+0x10e>
  {
    *dst++ = *src++;
    169a:	/--|-> move.l 40(sp),d1
    169e:	|  |   move.l d1,d0
    16a0:	|  |   addq.l #4,d0
    16a2:	|  |   move.l d0,40(sp)
    16a6:	|  |   move.l 36(sp),d0
    16aa:	|  |   move.l d0,d2
    16ac:	|  |   addq.l #4,d2
    16ae:	|  |   move.l d2,36(sp)
    16b2:	|  |   movea.l d1,a0
    16b4:	|  |   move.l (a0),d1
    16b6:	|  |   movea.l d0,a0
    16b8:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    16ba:	|  |   addq.l #1,28(sp)
    16be:	|  \-> move.w 26(sp),d0
    16c2:	|      lsr.w #2,d0
    16c4:	|      move.w d0,d0
    16c6:	|      andi.l #65535,d0
    16cc:	|      cmp.l 28(sp),d0
    16d0:	\----- bgt.s 169a <CstFreeze+0xea>
  }

  CstApplyBackDropCounter = 2;
    16d2:	       move.w #2,1b106 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    16da:	       move.l 1b12c <winWidth>,d0
    16e0:	       lsr.l #4,d0
    16e2:	       movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    16e8:	       move.l a0,d1
    16ea:	       addq.l #2,d1
    16ec:	       move.l d1,1b11c <CstBackDropBufferApplyCursor>
    16f2:	       move.l d0,d0
    16f4:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    16f6:	       move.l 1b130 <winHeight>,d0
    16fc:	       movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    1702:	       move.l a0,d1
    1704:	       addq.l #2,d1
    1706:	       move.l d1,1b11c <CstBackDropBufferApplyCursor>
    170c:	       move.l d0,d0
    170e:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1710:	       movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    1716:	       move.l a0,d0
    1718:	       addq.l #2,d0
    171a:	       move.l d0,1b11c <CstBackDropBufferApplyCursor>
    1720:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1722:	       movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    1728:	       move.l a0,d0
    172a:	       addq.l #2,d0
    172c:	       move.l d0,1b11c <CstBackDropBufferApplyCursor>
    1732:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1734:	       movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    173a:	       move.l a0,d0
    173c:	       addq.l #2,d0
    173e:	       move.l d0,1b11c <CstBackDropBufferApplyCursor>
    1744:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1746:	       pea 1673a <PutChar+0x1c4>
    174c:	       jsr 15c26 <KPrintF>
    1752:	       addq.l #4,sp

}
    1754:	       nop
    1756:	       move.l (sp)+,d2
    1758:	       movea.l (sp)+,a6
    175a:	       lea 36(sp),sp
    175e:	       rts

00001760 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1760:	             lea -144(sp),sp
    1764:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1768:	             pea 1674e <PutChar+0x1d8>
    176e:	             jsr 15c26 <KPrintF>
    1774:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1776:	             move.l 164(sp),-(sp)
    177a:	             jsr 6bc <get2bytes>
    1780:	             addq.l #4,sp
    1782:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1786:	             move.l 164(sp),-(sp)
    178a:	             jsr 6bc <get2bytes>
    1790:	             addq.l #4,sp
    1792:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1796:	             move.w 134(sp),d0
    179a:	             lsr.w #3,d0
    179c:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    17a0:	             move.w 130(sp),d0
    17a4:	             lsr.w #1,d0
    17a6:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    17aa:	             move.l 1b12c <winWidth>,d0
    17b0:	             lsr.l #3,d0
    17b2:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    17b6:	             move.w 130(sp),d0
    17ba:	             muls.w 132(sp),d0
    17be:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    17c2:	             move.w 124(sp),d1
    17c6:	             move.w d1,d0
    17c8:	             add.w d0,d0
    17ca:	             add.w d0,d0
    17cc:	             move.w d0,d2
    17ce:	             add.w d1,d2
    17d0:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    17d4:	             move.w 1b0f4 <CstPaletteLoaded>,d0
    17da:	/----------- bne.w 1874 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    17de:	|            move.w #384,120(sp)

    if(CstPalette) {
    17e4:	|            move.l 1b124 <CstPalette>,d0
    17ea:	|        /-- beq.s 1804 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    17ec:	|        |   move.l 1b124 <CstPalette>,116(sp)
    17f4:	|        |   move.l 1b1d8 <SysBase>,d0
    17fa:	|        |   movea.l d0,a6
    17fc:	|        |   movea.l 116(sp),a1
    1800:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1804:	|        \-> moveq #64,d0
    1806:	|            move.l d0,112(sp)
    180a:	|            clr.l 108(sp)
    180e:	|            move.l 1b1d8 <SysBase>,d0
    1814:	|            movea.l d0,a6
    1816:	|            move.l 112(sp),d0
    181a:	|            move.l 108(sp),d1
    181e:	|            jsr -684(a6)
    1822:	|            move.l d0,104(sp)
    1826:	|            move.l 104(sp),d0
    182a:	|            move.l d0,1b124 <CstPalette>
    CstPaletteLoaded = 1;
    1830:	|            move.w #1,1b0f4 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1838:	|            move.l 1b124 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1840:	|            clr.l 152(sp)
    1844:	|        /-- bra.s 186a <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1846:	|     /--|-> move.l 164(sp),-(sp)
    184a:	|     |  |   jsr 6bc <get2bytes>
    1850:	|     |  |   addq.l #4,sp
    1852:	|     |  |   move.l d0,d1
    1854:	|     |  |   move.l 156(sp),d0
    1858:	|     |  |   move.l d0,d2
    185a:	|     |  |   addq.l #2,d2
    185c:	|     |  |   move.l d2,156(sp)
    1860:	|     |  |   move.l d1,d1
    1862:	|     |  |   movea.l d0,a0
    1864:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1866:	|     |  |   addq.l #1,152(sp)
    186a:	|     |  \-> moveq #31,d0
    186c:	|     |      cmp.l 152(sp),d0
    1870:	|     \----- bge.s 1846 <CstLoadBackdrop+0xe6>
    1872:	|  /-------- bra.s 1892 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1874:	\--|-------> clr.l 148(sp)
    1878:	   |     /-- bra.s 188a <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    187a:	   |  /--|-> move.l 164(sp),-(sp)
    187e:	   |  |  |   jsr 6bc <get2bytes>
    1884:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1886:	   |  |  |   addq.l #1,148(sp)
    188a:	   |  |  \-> moveq #31,d2
    188c:	   |  |      cmp.l 148(sp),d2
    1890:	   |  \----- bge.s 187a <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1892:	   \-------> moveq #0,d0
    1894:	             move.w 122(sp),d0
    1898:	             move.l d0,100(sp)
    189c:	             moveq #2,d0
    189e:	             move.l d0,96(sp)
    18a2:	             move.l 1b1d8 <SysBase>,d0
    18a8:	             movea.l d0,a6
    18aa:	             move.l 100(sp),d0
    18ae:	             move.l 96(sp),d1
    18b2:	             jsr -684(a6)
    18b6:	             move.l d0,92(sp)
    18ba:	             move.l 92(sp),d0
    18be:	             move.l d0,88(sp)
  if( !tmpbuffer)
    18c2:	         /-- bne.s 18d2 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    18c4:	         |   pea 1677d <PutChar+0x207>
    18ca:	         |   jsr 15c26 <KPrintF>
    18d0:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    18d2:	         \-> moveq #0,d0
    18d4:	             move.w 124(sp),d0
    18d8:	             move.l d0,84(sp)
    18dc:	             moveq #2,d2
    18de:	             move.l d2,80(sp)
    18e2:	             move.l 1b1d8 <SysBase>,d0
    18e8:	             movea.l d0,a6
    18ea:	             move.l 84(sp),d0
    18ee:	             move.l 80(sp),d1
    18f2:	             jsr -684(a6)
    18f6:	             move.l d0,76(sp)
    18fa:	             move.l 76(sp),d0
    18fe:	             move.l d0,72(sp)
  if( !tmpmask)
    1902:	         /-- bne.s 1912 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1904:	         |   pea 167b3 <PutChar+0x23d>
    190a:	         |   jsr 15c26 <KPrintF>
    1910:	         |   addq.l #4,sp
#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1912:	         \-> move.l 164(sp),68(sp)
    1918:	             move.l 88(sp),64(sp)
    191e:	             moveq #2,d0
    1920:	             move.l d0,60(sp)
    1924:	             move.w 122(sp),d0
    1928:	             lsr.w #1,d0
    192a:	             move.w d0,d0
    192c:	             andi.l #65535,d0
    1932:	             move.l d0,56(sp)
    1936:	             move.l 1b1e0 <DOSBase>,d0
    193c:	             movea.l d0,a6
    193e:	             move.l 68(sp),d1
    1942:	             move.l 64(sp),d2
    1946:	             move.l 60(sp),d3
    194a:	             move.l 56(sp),d4
    194e:	             jsr -324(a6)
    1952:	             move.l d0,52(sp)
    1956:	             move.l 52(sp),d0
    195a:	             move.w d0,50(sp)
  if(!count) {
    195e:	         /-- bne.s 1972 <CstLoadBackdrop+0x212>
    KPrintF("Error while reading stream");
    1960:	         |   pea 167e7 <PutChar+0x271>
    1966:	         |   jsr 15c26 <KPrintF>
    196c:	         |   addq.l #4,sp
    return;
    196e:	   /-----|-- bra.w 1bbe <CstLoadBackdrop+0x45e>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1972:	   |     \-> move.l 164(sp),46(sp)
    1978:	   |         move.l 72(sp),42(sp)
    197e:	   |         moveq #2,d2
    1980:	   |         move.l d2,38(sp)
    1984:	   |         move.w 124(sp),d0
    1988:	   |         lsr.w #1,d0
    198a:	   |         move.w d0,d0
    198c:	   |         andi.l #65535,d0
    1992:	   |         move.l d0,34(sp)
    1996:	   |         move.l 1b1e0 <DOSBase>,d0
    199c:	   |         movea.l d0,a6
    199e:	   |         move.l 46(sp),d1
    19a2:	   |         move.l 42(sp),d2
    19a6:	   |         move.l 38(sp),d3
    19aa:	   |         move.l 34(sp),d4
    19ae:	   |         jsr -324(a6)
    19b2:	   |         move.l d0,30(sp)
    19b6:	   |         move.l 30(sp),d0
    19ba:	   |         move.w d0,50(sp)
   

  if(!count) {
    19be:	   |     /-- bne.s 19d2 <CstLoadBackdrop+0x272>
    KPrintF("Error while reading stream");
    19c0:	   |     |   pea 167e7 <PutChar+0x271>
    19c6:	   |     |   jsr 15c26 <KPrintF>
    19cc:	   |     |   addq.l #4,sp
    return;
    19ce:	   +-----|-- bra.w 1bbe <CstLoadBackdrop+0x45e>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    19d2:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    19da:	   |         move.l 1b0fa <CstBackDrop>,d0
    19e0:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    19e4:	   |         move.l 172(sp),d0
    19e8:	   |         move.w d0,d1
    19ea:	   |         muls.w 126(sp),d1
    19ee:	   |         move.l 168(sp),d0
    19f2:	   |     /-- bpl.s 19f6 <CstLoadBackdrop+0x296>
    19f4:	   |     |   addq.l #7,d0
    19f6:	   |     \-> asr.l #3,d0
    19f8:	   |         move.l d0,d0
    19fa:	   |         movea.w d1,a0
    19fc:	   |         adda.w d0,a0
    19fe:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1a02:	   |         moveq #0,d0
    1a04:	   |         move.w 24(sp),d0
    1a08:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    1a0c:	   |         pea 16802 <PutChar+0x28c>
    1a12:	   |         jsr 15c26 <KPrintF>
    1a18:	   |         addq.l #4,sp


  WaitBlit();
    1a1a:	   |         move.l 1b1e4 <GfxBase>,d0
    1a20:	   |         movea.l d0,a6
    1a22:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1a26:	   |         movea.l 26(sp),a0
    1a2a:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1a30:	   |         movea.l 26(sp),a0
    1a34:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    1a3a:	   |         movea.l 26(sp),a0
    1a3e:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    1a44:	   |         movea.l 26(sp),a0
    1a48:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    1a4e:	   |         move.w 126(sp),d0
    1a52:	   |         sub.w 130(sp),d0
    1a56:	   |         movea.l 26(sp),a0
    1a5a:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    1a5e:	   |         move.w 126(sp),d0
    1a62:	   |         sub.w 130(sp),d0
    1a66:	   |         movea.l 26(sp),a0
    1a6a:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1a6e:	   |         movea.l 26(sp),a0
    1a72:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    1a78:	   |         movea.l 26(sp),a0
    1a7c:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    1a82:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1a88:	   |         clr.l 136(sp)
    1a8c:	   |     /-- bra.s 1aee <CstLoadBackdrop+0x38e>
  {    
    custom->bltapt = (APTR) tmpmask;
    1a8e:	   |  /--|-> movea.l 26(sp),a0
    1a92:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    1a98:	   |  |  |   move.l 140(sp),d0
    1a9c:	   |  |  |   movea.l 26(sp),a0
    1aa0:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    1aa4:	   |  |  |   move.l 144(sp),d0
    1aa8:	   |  |  |   movea.l 26(sp),a0
    1aac:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    1ab0:	   |  |  |   move.l 144(sp),d0
    1ab4:	   |  |  |   movea.l 26(sp),a0
    1ab8:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1abc:	   |  |  |   move.w 132(sp),d0
    1ac0:	   |  |  |   lsl.w #6,d0
    1ac2:	   |  |  |   add.w 128(sp),d0
    1ac6:	   |  |  |   movea.l 26(sp),a0
    1aca:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    1ace:	   |  |  |   moveq #0,d0
    1ad0:	   |  |  |   move.w 124(sp),d0
    1ad4:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    1ad8:	   |  |  |   move.w 1b0f8 <CstBackdropSizePlane>,d0
    1ade:	   |  |  |   move.w d0,d0
    1ae0:	   |  |  |   andi.l #65535,d0
    1ae6:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1aea:	   |  |  |   addq.l #1,136(sp)
    1aee:	   |  |  \-> moveq #4,d0
    1af0:	   |  |      cmp.l 136(sp),d0
    1af4:	   |  \----- bge.s 1a8e <CstLoadBackdrop+0x32e>
  }    

  WaitBlit();
    1af6:	   |         move.l 1b1e4 <GfxBase>,d0
    1afc:	   |         movea.l d0,a6
    1afe:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1b02:	   |         pea 16821 <PutChar+0x2ab>
    1b08:	   |         jsr 15c26 <KPrintF>
    1b0e:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1b10:	   |         move.l 88(sp),20(sp)
    1b16:	   |         move.l 1b1d8 <SysBase>,d0
    1b1c:	   |         movea.l d0,a6
    1b1e:	   |         movea.l 20(sp),a1
    1b22:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    1b26:	   |         move.l 72(sp),16(sp)
    1b2c:	   |         move.l 1b1d8 <SysBase>,d0
    1b32:	   |         movea.l d0,a6
    1b34:	   |         movea.l 16(sp),a1
    1b38:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1b3c:	   |         move.w #2,1b106 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1b44:	   |         move.l 1b12c <winWidth>,d0
    1b4a:	   |         lsr.l #4,d0
    1b4c:	   |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    1b52:	   |         move.l a0,d1
    1b54:	   |         addq.l #2,d1
    1b56:	   |         move.l d1,1b11c <CstBackDropBufferApplyCursor>
    1b5c:	   |         move.l d0,d0
    1b5e:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1b60:	   |         move.l 1b130 <winHeight>,d0
    1b66:	   |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    1b6c:	   |         move.l a0,d1
    1b6e:	   |         addq.l #2,d1
    1b70:	   |         move.l d1,1b11c <CstBackDropBufferApplyCursor>
    1b76:	   |         move.l d0,d0
    1b78:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b7a:	   |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    1b80:	   |         move.l a0,d0
    1b82:	   |         addq.l #2,d0
    1b84:	   |         move.l d0,1b11c <CstBackDropBufferApplyCursor>
    1b8a:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b8c:	   |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    1b92:	   |         move.l a0,d0
    1b94:	   |         addq.l #2,d0
    1b96:	   |         move.l d0,1b11c <CstBackDropBufferApplyCursor>
    1b9c:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1b9e:	   |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    1ba4:	   |         move.l a0,d0
    1ba6:	   |         addq.l #2,d0
    1ba8:	   |         move.l d0,1b11c <CstBackDropBufferApplyCursor>
    1bae:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    1bb0:	   |         pea 16841 <PutChar+0x2cb>
    1bb6:	   |         jsr 15c26 <KPrintF>
    1bbc:	   |         addq.l #4,sp

}
    1bbe:	   \-------> movem.l (sp)+,d2-d4/a6
    1bc2:	             lea 144(sp),sp
    1bc6:	             rts

00001bc8 <CstRestoreScreen>:

ULONG test = 0;

void CstRestoreScreen()
{
    1bc8:	                   lea -24(sp),sp
    1bcc:	                   move.l a6,-(sp)
    1bce:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    1bd0:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    1bd8:	                   move.l 1b114 <CstCleanupQueueDrawBuffer>,d0
    1bde:	/----------------- beq.w 1de6 <CstRestoreScreen+0x21e>
    1be2:	|                  move.l 1b10c <CstDrawBuffer>,d0
    1be8:	+----------------- beq.w 1de6 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    1bec:	|                  move.l 1b1e4 <GfxBase>,d0
    1bf2:	|                  movea.l d0,a6
    1bf4:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1bf8:	|                  movea.l 16(sp),a0
    1bfc:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1c02:	|                  movea.l 16(sp),a0
    1c06:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1c0c:	|                  movea.l 16(sp),a0
    1c10:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    1c16:	|     /----------- bra.w 1dda <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    1c1a:	|  /--|----------> movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1c20:	|  |  |            move.l 4(a0),d0
    1c24:	|  |  |  /-------- beq.w 1da8 <CstRestoreScreen+0x1e0>
    1c28:	|  |  |  |         movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1c2e:	|  |  |  |         movea.l 4(a0),a0
    1c32:	|  |  |  |         move.l 16(a0),d0
    1c36:	|  |  |  |         moveq #2,d1
    1c38:	|  |  |  |         cmp.l d0,d1
    1c3a:	|  |  |  +-------- blt.w 1da8 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    1c3e:	|  |  |  |         move.l 1b12c <winWidth>,d0
    1c44:	|  |  |  |         lsr.l #3,d0
    1c46:	|  |  |  |         move.l d0,d1
    1c48:	|  |  |  |         movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1c4e:	|  |  |  |         move.w 8(a0),d0
    1c52:	|  |  |  |         add.w d0,d0
    1c54:	|  |  |  |         sub.w d0,d1
    1c56:	|  |  |  |         movea.l 16(sp),a0
    1c5a:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    1c5e:	|  |  |  |         move.l 1b12c <winWidth>,d0
    1c64:	|  |  |  |         lsr.l #3,d0
    1c66:	|  |  |  |         move.l d0,d1
    1c68:	|  |  |  |         movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1c6e:	|  |  |  |         move.w 8(a0),d0
    1c72:	|  |  |  |         add.w d0,d0
    1c74:	|  |  |  |         sub.w d0,d1
    1c76:	|  |  |  |         movea.l 16(sp),a0
    1c7a:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    1c7e:	|  |  |  |         movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1c84:	|  |  |  |         move.w 14(a0),d0
    1c88:	|  |  |  |         move.w d0,d0
    1c8a:	|  |  |  |         andi.l #65535,d0
    1c90:	|  |  |  |         move.l 1b12c <winWidth>,d1
    1c96:	|  |  |  |         move.l d1,-(sp)
    1c98:	|  |  |  |         move.l d0,-(sp)
    1c9a:	|  |  |  |         jsr 16460 <__mulsi3>
    1ca0:	|  |  |  |         addq.l #8,sp
    1ca2:	|  |  |  |         move.l d0,d1
    1ca4:	|  |  |  |         lsr.l #3,d1
    1ca6:	|  |  |  |         move.l 1b0fa <CstBackDrop>,d0
    1cac:	|  |  |  |         add.l d0,d1
    1cae:	|  |  |  |         movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1cb4:	|  |  |  |         move.w 12(a0),d0
    1cb8:	|  |  |  |         move.w d0,d0
    1cba:	|  |  |  |         andi.l #65535,d0
    1cc0:	|  |  |  |         move.l d1,d2
    1cc2:	|  |  |  |         add.l d0,d2
    1cc4:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    1cc8:	|  |  |  |         movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1cce:	|  |  |  |         move.w 14(a0),d0
    1cd2:	|  |  |  |         move.w d0,d0
    1cd4:	|  |  |  |         andi.l #65535,d0
    1cda:	|  |  |  |         move.l 1b12c <winWidth>,d1
    1ce0:	|  |  |  |         move.l d1,-(sp)
    1ce2:	|  |  |  |         move.l d0,-(sp)
    1ce4:	|  |  |  |         jsr 16460 <__mulsi3>
    1cea:	|  |  |  |         addq.l #8,sp
    1cec:	|  |  |  |         move.l d0,d1
    1cee:	|  |  |  |         lsr.l #3,d1
    1cf0:	|  |  |  |         move.l 1b10c <CstDrawBuffer>,d0
    1cf6:	|  |  |  |         add.l d0,d1
    1cf8:	|  |  |  |         movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1cfe:	|  |  |  |         move.w 12(a0),d0
    1d02:	|  |  |  |         move.w d0,d0
    1d04:	|  |  |  |         andi.l #65535,d0
    1d0a:	|  |  |  |         move.l d1,d2
    1d0c:	|  |  |  |         add.l d0,d2
    1d0e:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1d12:	|  |  |  |         clr.l 20(sp)
    1d16:	|  |  |  |     /-- bra.w 1d9e <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    1d1a:	|  |  |  |  /--|-> move.l 28(sp),d0
    1d1e:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d22:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    1d26:	|  |  |  |  |  |   move.l 24(sp),d0
    1d2a:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d2e:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    1d32:	|  |  |  |  |  |   movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1d38:	|  |  |  |  |  |   move.w 10(a0),d0
    1d3c:	|  |  |  |  |  |   lsl.w #6,d0
    1d3e:	|  |  |  |  |  |   movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1d44:	|  |  |  |  |  |   move.w 8(a0),d1
    1d48:	|  |  |  |  |  |   add.w d1,d0
    1d4a:	|  |  |  |  |  |   movea.l 16(sp),a0
    1d4e:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    1d52:	|  |  |  |  |  |   move.l 1b12c <winWidth>,d0
    1d58:	|  |  |  |  |  |   lsr.l #3,d0
    1d5a:	|  |  |  |  |  |   move.l 1b130 <winHeight>,d1
    1d60:	|  |  |  |  |  |   move.l d1,-(sp)
    1d62:	|  |  |  |  |  |   move.l d0,-(sp)
    1d64:	|  |  |  |  |  |   jsr 16460 <__mulsi3>
    1d6a:	|  |  |  |  |  |   addq.l #8,sp
    1d6c:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    1d70:	|  |  |  |  |  |   move.l 1b12c <winWidth>,d0
    1d76:	|  |  |  |  |  |   lsr.l #3,d0
    1d78:	|  |  |  |  |  |   move.l 1b130 <winHeight>,d1
    1d7e:	|  |  |  |  |  |   move.l d1,-(sp)
    1d80:	|  |  |  |  |  |   move.l d0,-(sp)
    1d82:	|  |  |  |  |  |   jsr 16460 <__mulsi3>
    1d88:	|  |  |  |  |  |   addq.l #8,sp
    1d8a:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    1d8e:	|  |  |  |  |  |   move.l 1b1e4 <GfxBase>,d0
    1d94:	|  |  |  |  |  |   movea.l d0,a6
    1d96:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1d9a:	|  |  |  |  |  |   addq.l #1,20(sp)
    1d9e:	|  |  |  |  |  \-> moveq #4,d0
    1da0:	|  |  |  |  |      cmp.l 20(sp),d0
    1da4:	|  |  |  |  \----- bge.w 1d1a <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    1da8:	|  |  |  \-------> move.l 1b114 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    1db0:	|  |  |            movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    1db6:	|  |  |            move.l 16(a0),d0
    1dba:	|  |  |            move.l d0,1b114 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    1dc0:	|  |  |            move.l 12(sp),8(sp)
    1dc6:	|  |  |            move.l 1b1d8 <SysBase>,d0
    1dcc:	|  |  |            movea.l d0,a6
    1dce:	|  |  |            movea.l 8(sp),a1
    1dd2:	|  |  |            jsr -690(a6)
    todelete = NULL;
    1dd6:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    1dda:	|  |  \----------> move.l 1b114 <CstCleanupQueueDrawBuffer>,d0
    1de0:	|  \-------------- bne.w 1c1a <CstRestoreScreen+0x52>
    1de4:	|              /-- bra.s 1de8 <CstRestoreScreen+0x220>
    return;
    1de6:	\--------------|-> nop
  }
  
}
    1de8:	               \-> move.l (sp)+,d2
    1dea:	                   movea.l (sp)+,a6
    1dec:	                   lea 24(sp),sp
    1df0:	                   rts

00001df2 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    1df2:	                lea -124(sp),sp
    1df6:	                movem.l d2-d3/a6,-(sp)
    1dfa:	                movea.l 148(sp),a0
    1dfe:	                move.l 152(sp),d1
    1e02:	                move.l 156(sp),d0
    1e06:	                movea.w a0,a0
    1e08:	                move.w a0,16(sp)
    1e0c:	                move.w d1,d1
    1e0e:	                move.w d1,14(sp)
    1e12:	                move.w d0,d0
    1e14:	                move.w d0,12(sp)
  UWORD *destination = 0;
    1e18:	                clr.l 132(sp)
  switch(destinationtype)
    1e1c:	                moveq #0,d0
    1e1e:	                move.w 12(sp),d0
    1e22:	                moveq #1,d1
    1e24:	                cmp.l d0,d1
    1e26:	            /-- beq.s 1e30 <CstScaleSprite+0x3e>
    1e28:	            |   moveq #2,d2
    1e2a:	            |   cmp.l d0,d2
    1e2c:	         /--|-- beq.s 1e3a <CstScaleSprite+0x48>
    1e2e:	      /--|--|-- bra.s 1e4c <CstScaleSprite+0x5a>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    1e30:	      |  |  \-> move.l 1b10c <CstDrawBuffer>,132(sp)
      break;
    1e38:	      +--|----- bra.s 1e4c <CstScaleSprite+0x5a>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    1e3a:	      |  \----> move.w #2,1b106 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    1e42:	      |         move.l 1b0fa <CstBackDrop>,132(sp)
      break;
    1e4a:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    1e4c:	      \-------> tst.w 14(sp)
    1e50:	         /----- bge.s 1e98 <CstScaleSprite+0xa6>
    if(y + single->height < 0) {
    1e52:	         |      movea.w 14(sp),a1
    1e56:	         |      movea.l 140(sp),a0
    1e5a:	         |      move.l 4(a0),d0
    1e5e:	         |      add.l a1,d0
    1e60:	         |  /-- bpl.s 1e74 <CstScaleSprite+0x82>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1e62:	         |  |   pea 1685b <PutChar+0x2e5>
    1e68:	         |  |   jsr 15c26 <KPrintF>
    1e6e:	         |  |   addq.l #4,sp
      return;
    1e70:	/--------|--|-- bra.w 2942 <CstScaleSprite+0xb50>
    }
    ystartdst = 0;
    1e74:	|        |  \-> clr.l 96(sp)
    ystartsrc = y*-1;
    1e78:	|        |      move.w 14(sp),d0
    1e7c:	|        |      ext.l d0
    1e7e:	|        |      neg.l d0
    1e80:	|        |      move.l d0,92(sp)
    blitheight = single->height+y;
    1e84:	|        |      movea.l 140(sp),a0
    1e88:	|        |      move.l 4(a0),d0
    1e8c:	|        |      movea.w 14(sp),a0
    1e90:	|        |      add.l a0,d0
    1e92:	|        |      move.l d0,88(sp)
    1e96:	|     /--|----- bra.s 1f0a <CstScaleSprite+0x118>
  } else if(y+single->height > (int) winHeight) {
    1e98:	|     |  \----> movea.w 14(sp),a1
    1e9c:	|     |         movea.l 140(sp),a0
    1ea0:	|     |         move.l 4(a0),d0
    1ea4:	|     |         move.l a1,d1
    1ea6:	|     |         add.l d0,d1
    1ea8:	|     |         move.l 1b130 <winHeight>,d0
    1eae:	|     |         cmp.l d1,d0
    1eb0:	|     |  /----- bge.s 1ef2 <CstScaleSprite+0x100>
    if(y  > (int) winHeight) {
    1eb2:	|     |  |      movea.w 14(sp),a0
    1eb6:	|     |  |      move.l 1b130 <winHeight>,d0
    1ebc:	|     |  |      cmp.l a0,d0
    1ebe:	|     |  |  /-- bge.s 1ed2 <CstScaleSprite+0xe0>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1ec0:	|     |  |  |   pea 1685b <PutChar+0x2e5>
    1ec6:	|     |  |  |   jsr 15c26 <KPrintF>
    1ecc:	|     |  |  |   addq.l #4,sp
      return;
    1ece:	+-----|--|--|-- bra.w 2942 <CstScaleSprite+0xb50>
    }
    ystartdst = y;
    1ed2:	|     |  |  \-> movea.w 14(sp),a0
    1ed6:	|     |  |      move.l a0,96(sp)
    ystartsrc = 0;
    1eda:	|     |  |      clr.l 92(sp)
    blitheight = winHeight-y;
    1ede:	|     |  |      move.l 1b130 <winHeight>,d0
    1ee4:	|     |  |      movea.w 14(sp),a0
    1ee8:	|     |  |      move.l d0,d1
    1eea:	|     |  |      sub.l a0,d1
    1eec:	|     |  |      move.l d1,88(sp)
    1ef0:	|     +--|----- bra.s 1f0a <CstScaleSprite+0x118>
  } else {
    ystartdst = y;
    1ef2:	|     |  \----> movea.w 14(sp),a0
    1ef6:	|     |         move.l a0,96(sp)
    ystartsrc = 0;
    1efa:	|     |         clr.l 92(sp)
    blitheight = single->height;
    1efe:	|     |         movea.l 140(sp),a0
    1f02:	|     |         move.l 4(a0),d0
    1f06:	|     |         move.l d0,88(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    1f0a:	|     \-------> tst.w 16(sp)
    1f0e:	|     /-------- bge.w 21be <CstScaleSprite+0x3cc>
    if(x + single->width < 0) {
    1f12:	|     |         movea.w 16(sp),a1
    1f16:	|     |         movea.l 140(sp),a0
    1f1a:	|     |         move.l (a0),d0
    1f1c:	|     |         add.l a1,d0
    1f1e:	|     |     /-- bpl.s 1f32 <CstScaleSprite+0x140>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1f20:	|     |     |   pea 1685b <PutChar+0x2e5>
    1f26:	|     |     |   jsr 15c26 <KPrintF>
    1f2c:	|     |     |   addq.l #4,sp
      return;
    1f2e:	+-----|-----|-- bra.w 2942 <CstScaleSprite+0xb50>

    }
    
    extrawords = 1;
    1f32:	|     |     \-> move.w #1,130(sp)
    cutwordssource = (x*-1)/16; 
    1f38:	|     |         move.w 16(sp),d0
    1f3c:	|     |     /-- bpl.s 1f42 <CstScaleSprite+0x150>
    1f3e:	|     |     |   addi.w #15,d0
    1f42:	|     |     \-> asr.w #4,d0
    1f44:	|     |         neg.w d0
    1f46:	|     |         move.w d0,128(sp)
    cutmaskpixel = (x*-1)%16;     
    1f4a:	|     |         move.w 16(sp),d0
    1f4e:	|     |         ext.l d0
    1f50:	|     |         neg.l d0
    1f52:	|     |         andi.l #-2147483633,d0
    1f58:	|     |     /-- bpl.s 1f62 <CstScaleSprite+0x170>
    1f5a:	|     |     |   subq.l #1,d0
    1f5c:	|     |     |   moveq #-16,d1
    1f5e:	|     |     |   or.l d1,d0
    1f60:	|     |     |   addq.l #1,d0
    1f62:	|     |     \-> move.w d0,126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1f66:	|     |         clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    1f6a:	|     |         movea.l 140(sp),a0
    1f6e:	|     |         move.l 24(a0),d0
    1f72:	|     |         move.l d0,d2
    1f74:	|     |         moveq #0,d0
    1f76:	|     |         move.w 128(sp),d0
    1f7a:	|     |         add.l d0,d0
    1f7c:	|     |         move.l d0,d3
    1f7e:	|     |         movea.l 140(sp),a0
    1f82:	|     |         move.l (a0),d0
    1f84:	|     |     /-- bpl.s 1f88 <CstScaleSprite+0x196>
    1f86:	|     |     |   addq.l #7,d0
    1f88:	|     |     \-> asr.l #3,d0
    1f8a:	|     |         movea.l 140(sp),a0
    1f8e:	|     |         move.l 4(a0),d1
    1f92:	|     |         move.l d1,-(sp)
    1f94:	|     |         move.l d0,-(sp)
    1f96:	|     |         jsr 16460 <__mulsi3>
    1f9c:	|     |         addq.l #8,sp
    1f9e:	|     |         move.l d0,d1
    1fa0:	|     |         move.l d1,d0
    1fa2:	|     |         add.l d0,d0
    1fa4:	|     |         add.l d0,d0
    1fa6:	|     |         add.l d1,d0
    1fa8:	|     |         add.l d3,d0
    1faa:	|     |         add.l d0,d2
    1fac:	|     |         movea.l 140(sp),a0
    1fb0:	|     |         move.l (a0),d0
    1fb2:	|     |         move.l 92(sp),-(sp)
    1fb6:	|     |         move.l d0,-(sp)
    1fb8:	|     |         jsr 16460 <__mulsi3>
    1fbe:	|     |         addq.l #8,sp
    1fc0:	|     |         lsr.l #3,d0
    1fc2:	|     |         move.l d2,d1
    1fc4:	|     |         add.l d0,d1
    1fc6:	|     |         move.l d1,120(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1fca:	|     |         movea.l 140(sp),a0
    1fce:	|     |         move.l 24(a0),d0
    1fd2:	|     |         move.l d0,d1
    1fd4:	|     |         moveq #0,d0
    1fd6:	|     |         move.w 128(sp),d0
    1fda:	|     |         add.l d0,d0
    1fdc:	|     |         move.l d1,d2
    1fde:	|     |         add.l d0,d2
    1fe0:	|     |         movea.l 140(sp),a0
    1fe4:	|     |         move.l (a0),d0
    1fe6:	|     |         move.l 92(sp),-(sp)
    1fea:	|     |         move.l d0,-(sp)
    1fec:	|     |         jsr 16460 <__mulsi3>
    1ff2:	|     |         addq.l #8,sp
    1ff4:	|     |         lsr.l #3,d0
    1ff6:	|     |         move.l d2,d1
    1ff8:	|     |         add.l d0,d1
    1ffa:	|     |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1ffe:	|     |         move.l 1b12c <winWidth>,d0
    2004:	|     |         move.l 96(sp),-(sp)
    2008:	|     |         move.l d0,-(sp)
    200a:	|     |         jsr 16460 <__mulsi3>
    2010:	|     |         addq.l #8,sp
    2012:	|     |         lsr.l #3,d0
    2014:	|     |         move.l 132(sp),d1
    2018:	|     |         add.l d1,d0
    201a:	|     |         move.l d0,d2
    201c:	|     |         subq.l #2,d2
    201e:	|     |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2022:	|     |         move.l 1b12c <winWidth>,d0
    2028:	|     |         move.l 96(sp),-(sp)
    202c:	|     |         move.l d0,-(sp)
    202e:	|     |         jsr 16460 <__mulsi3>
    2034:	|     |         addq.l #8,sp
    2036:	|     |         lsr.l #3,d0
    2038:	|     |         move.l 132(sp),d1
    203c:	|     |         add.l d1,d0
    203e:	|     |         move.l d0,d1
    2040:	|     |         subq.l #2,d1
    2042:	|     |         move.l d1,108(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2046:	|     |         moveq #0,d0
    2048:	|     |         move.w 126(sp),d0
    204c:	|     |         moveq #16,d1
    204e:	|     |         sub.l d0,d1
    2050:	|     |         move.l d1,d0
    2052:	|     |         moveq #12,d2
    2054:	|     |         lsl.l d2,d0
    2056:	|     |         addi.l #4042,d0
    205c:	|     |         move.l d0,104(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    2060:	|     |         moveq #0,d0
    2062:	|     |         move.w 126(sp),d0
    2066:	|     |         moveq #16,d1
    2068:	|     |         sub.l d0,d1
    206a:	|     |         move.l d1,d0
    206c:	|     |         moveq #12,d1
    206e:	|     |         lsl.l d1,d0
    2070:	|     |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2074:	|     |         cmpi.w #1,12(sp)
    207a:	|     |  /----- bne.w 2138 <CstScaleSprite+0x346>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    207e:	|     |  |      move.l 1b114 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2086:	|     |  |      moveq #20,d2
    2088:	|     |  |      move.l d2,44(sp)
    208c:	|     |  |      clr.l 40(sp)
    2090:	|     |  |      move.l 1b1d8 <SysBase>,d0
    2096:	|     |  |      movea.l d0,a6
    2098:	|     |  |      move.l 44(sp),d0
    209c:	|     |  |      move.l 40(sp),d1
    20a0:	|     |  |      jsr -684(a6)
    20a4:	|     |  |      move.l d0,36(sp)
    20a8:	|     |  |      move.l 36(sp),d0
    20ac:	|     |  |      move.l d0,1b114 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    20b2:	|     |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    20b8:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    20be:	|     |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    20c4:	|     |  |      move.w 16(sp),d0
    20c8:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    20ca:	|     |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    20d0:	|     |  |      move.w 14(sp),d0
    20d4:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    20d8:	|     |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    20de:	|     |  |      move.l 144(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    20e4:	|     |  |      movea.l 140(sp),a0
    20e8:	|     |  |      move.l (a0),d0
    20ea:	|     |  |      movea.l d0,a0
    20ec:	|     |  |      cmpa.w #0,a0
    20f0:	|     |  |  /-- bge.s 20f6 <CstScaleSprite+0x304>
    20f2:	|     |  |  |   lea 15(a0),a0
    20f6:	|     |  |  \-> move.l a0,d0
    20f8:	|     |  |      asr.l #4,d0
    20fa:	|     |  |      move.l d0,d0
    20fc:	|     |  |      add.w 128(sp),d0
    2100:	|     |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    2106:	|     |  |      add.w 130(sp),d0
    210a:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    210e:	|     |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    2114:	|     |  |      move.l 88(sp),d0
    2118:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    211c:	|     |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    2122:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2126:	|     |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    212c:	|     |  |      move.l 96(sp),d0
    2130:	|     |  |      move.w d0,14(a0)
    2134:	|  /--|--|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2138:	|  |  |  \----> movea.l 140(sp),a0
    213c:	|  |  |         move.l (a0),d0
    213e:	|  |  |         movea.l d0,a0
    2140:	|  |  |         cmpa.w #0,a0
    2144:	|  |  |     /-- bge.s 214a <CstScaleSprite+0x358>
    2146:	|  |  |     |   lea 15(a0),a0
    214a:	|  |  |     \-> move.l a0,d0
    214c:	|  |  |         asr.l #4,d0
    214e:	|  |  |         move.l d0,d0
    2150:	|  |  |         add.w 128(sp),d0
    2154:	|  |  |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    215a:	|  |  |         move.l a0,d1
    215c:	|  |  |         addq.l #2,d1
    215e:	|  |  |         move.l d1,1b11c <CstBackDropBufferApplyCursor>
    2164:	|  |  |         add.w 130(sp),d0
    2168:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    216a:	|  |  |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    2170:	|  |  |         move.l a0,d0
    2172:	|  |  |         addq.l #2,d0
    2174:	|  |  |         move.l d0,1b11c <CstBackDropBufferApplyCursor>
    217a:	|  |  |         move.l 88(sp),d0
    217e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2180:	|  |  |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    2186:	|  |  |         move.l a0,d0
    2188:	|  |  |         addq.l #2,d0
    218a:	|  |  |         move.l d0,1b11c <CstBackDropBufferApplyCursor>
    2190:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2192:	|  |  |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    2198:	|  |  |         move.l a0,d0
    219a:	|  |  |         addq.l #2,d0
    219c:	|  |  |         move.l d0,1b11c <CstBackDropBufferApplyCursor>
    21a2:	|  |  |         move.l 96(sp),d0
    21a6:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    21a8:	|  |  |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    21ae:	|  |  |         move.l a0,d0
    21b0:	|  |  |         addq.l #2,d0
    21b2:	|  |  |         move.l d0,1b11c <CstBackDropBufferApplyCursor>
    21b8:	|  |  |         clr.w (a0)
    21ba:	|  +--|-------- bra.w 2750 <CstScaleSprite+0x95e>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    21be:	|  |  \-------> movea.w 16(sp),a1
    21c2:	|  |            movea.l 140(sp),a0
    21c6:	|  |            move.l (a0),d0
    21c8:	|  |            move.l a1,d1
    21ca:	|  |            add.l d0,d1
    21cc:	|  |            move.l 1b12c <winWidth>,d0
    21d2:	|  |            cmp.l d1,d0
    21d4:	|  |  /-------- bge.w 24b6 <CstScaleSprite+0x6c4>

    if(x - single->width > (int) winWidth)
    21d8:	|  |  |         movea.w 16(sp),a1
    21dc:	|  |  |         movea.l 140(sp),a0
    21e0:	|  |  |         move.l (a0),d0
    21e2:	|  |  |         move.l a1,d1
    21e4:	|  |  |         sub.l d0,d1
    21e6:	|  |  |         move.l 1b12c <winWidth>,d0
    21ec:	|  |  |         cmp.l d1,d0
    21ee:	|  |  |     /-- bge.s 2202 <CstScaleSprite+0x410>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    21f0:	|  |  |     |   pea 1685b <PutChar+0x2e5>
    21f6:	|  |  |     |   jsr 15c26 <KPrintF>
    21fc:	|  |  |     |   addq.l #4,sp
      return;
    21fe:	+--|--|-----|-- bra.w 2942 <CstScaleSprite+0xb50>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2202:	|  |  |     \-> clr.w 130(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2206:	|  |  |         movea.w 16(sp),a1
    220a:	|  |  |         movea.l 140(sp),a0
    220e:	|  |  |         move.l (a0),d0
    2210:	|  |  |         add.l a1,d0
    2212:	|  |  |         move.l d0,d1
    2214:	|  |  |         move.l 1b12c <winWidth>,d0
    221a:	|  |  |         sub.l d0,d1
    221c:	|  |  |         move.l d1,d0
    221e:	|  |  |         lsr.l #4,d0
    2220:	|  |  |         move.w d0,128(sp)
    cutmaskpixel = 0;
    2224:	|  |  |         clr.w 126(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2228:	|  |  |         move.w #-1,124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    222e:	|  |  |         movea.l 140(sp),a0
    2232:	|  |  |         move.l 24(a0),d0
    2236:	|  |  |         move.l d0,d2
    2238:	|  |  |         movea.l 140(sp),a0
    223c:	|  |  |         move.l (a0),d0
    223e:	|  |  |     /-- bpl.s 2242 <CstScaleSprite+0x450>
    2240:	|  |  |     |   addq.l #7,d0
    2242:	|  |  |     \-> asr.l #3,d0
    2244:	|  |  |         movea.l 140(sp),a0
    2248:	|  |  |         move.l 4(a0),d1
    224c:	|  |  |         move.l d1,-(sp)
    224e:	|  |  |         move.l d0,-(sp)
    2250:	|  |  |         jsr 16460 <__mulsi3>
    2256:	|  |  |         addq.l #8,sp
    2258:	|  |  |         move.l d0,d1
    225a:	|  |  |         move.l d1,d0
    225c:	|  |  |         add.l d0,d0
    225e:	|  |  |         add.l d0,d0
    2260:	|  |  |         add.l d1,d0
    2262:	|  |  |         add.l d0,d2
    2264:	|  |  |         movea.l 140(sp),a0
    2268:	|  |  |         move.l (a0),d0
    226a:	|  |  |         move.l 92(sp),-(sp)
    226e:	|  |  |         move.l d0,-(sp)
    2270:	|  |  |         jsr 16460 <__mulsi3>
    2276:	|  |  |         addq.l #8,sp
    2278:	|  |  |         lsr.l #3,d0
    227a:	|  |  |         move.l d2,d1
    227c:	|  |  |         add.l d0,d1
    227e:	|  |  |         move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2282:	|  |  |         movea.l 140(sp),a0
    2286:	|  |  |         move.l 24(a0),d0
    228a:	|  |  |         move.l d0,d2
    228c:	|  |  |         movea.l 140(sp),a0
    2290:	|  |  |         move.l (a0),d0
    2292:	|  |  |         move.l 92(sp),-(sp)
    2296:	|  |  |         move.l d0,-(sp)
    2298:	|  |  |         jsr 16460 <__mulsi3>
    229e:	|  |  |         addq.l #8,sp
    22a0:	|  |  |         lsr.l #3,d0
    22a2:	|  |  |         move.l d2,d1
    22a4:	|  |  |         add.l d0,d1
    22a6:	|  |  |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    22aa:	|  |  |         move.l 1b12c <winWidth>,d0
    22b0:	|  |  |         move.l 96(sp),-(sp)
    22b4:	|  |  |         move.l d0,-(sp)
    22b6:	|  |  |         jsr 16460 <__mulsi3>
    22bc:	|  |  |         addq.l #8,sp
    22be:	|  |  |         lsr.l #3,d0
    22c0:	|  |  |         move.l 132(sp),d1
    22c4:	|  |  |         add.l d0,d1
    22c6:	|  |  |         move.w 16(sp),d0
    22ca:	|  |  |     /-- bpl.s 22d0 <CstScaleSprite+0x4de>
    22cc:	|  |  |     |   addi.w #15,d0
    22d0:	|  |  |     \-> asr.w #4,d0
    22d2:	|  |  |         movea.w d0,a0
    22d4:	|  |  |         move.l a0,d0
    22d6:	|  |  |         add.l a0,d0
    22d8:	|  |  |         move.l d1,d2
    22da:	|  |  |         add.l d0,d2
    22dc:	|  |  |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    22e0:	|  |  |         move.l 1b12c <winWidth>,d0
    22e6:	|  |  |         move.l 96(sp),-(sp)
    22ea:	|  |  |         move.l d0,-(sp)
    22ec:	|  |  |         jsr 16460 <__mulsi3>
    22f2:	|  |  |         addq.l #8,sp
    22f4:	|  |  |         lsr.l #3,d0
    22f6:	|  |  |         move.l 132(sp),d1
    22fa:	|  |  |         add.l d0,d1
    22fc:	|  |  |         move.w 16(sp),d0
    2300:	|  |  |     /-- bpl.s 2306 <CstScaleSprite+0x514>
    2302:	|  |  |     |   addi.w #15,d0
    2306:	|  |  |     \-> asr.w #4,d0
    2308:	|  |  |         movea.w d0,a0
    230a:	|  |  |         move.l a0,d0
    230c:	|  |  |         add.l a0,d0
    230e:	|  |  |         move.l d1,d2
    2310:	|  |  |         add.l d0,d2
    2312:	|  |  |         move.l d2,108(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    2316:	|  |  |         movea.l 140(sp),a0
    231a:	|  |  |         move.l (a0),d0
    231c:	|  |  |         andi.l #-2147483633,d0
    2322:	|  |  |     /-- bpl.s 232c <CstScaleSprite+0x53a>
    2324:	|  |  |     |   subq.l #1,d0
    2326:	|  |  |     |   moveq #-16,d1
    2328:	|  |  |     |   or.l d1,d0
    232a:	|  |  |     |   addq.l #1,d0
    232c:	|  |  |     \-> moveq #12,d2
    232e:	|  |  |         lsl.l d2,d0
    2330:	|  |  |         addi.l #4042,d0
    2336:	|  |  |         move.l d0,104(sp)
    bltcon1 = ((single->width%16) << 12);
    233a:	|  |  |         movea.l 140(sp),a0
    233e:	|  |  |         move.l (a0),d0
    2340:	|  |  |         andi.l #-2147483633,d0
    2346:	|  |  |     /-- bpl.s 2350 <CstScaleSprite+0x55e>
    2348:	|  |  |     |   subq.l #1,d0
    234a:	|  |  |     |   moveq #-16,d1
    234c:	|  |  |     |   or.l d1,d0
    234e:	|  |  |     |   addq.l #1,d0
    2350:	|  |  |     \-> moveq #12,d2
    2352:	|  |  |         lsl.l d2,d0
    2354:	|  |  |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2358:	|  |  |         cmpi.w #1,12(sp)
    235e:	|  |  |  /----- bne.w 2426 <CstScaleSprite+0x634>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2362:	|  |  |  |      move.l 1b114 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    236a:	|  |  |  |      moveq #20,d0
    236c:	|  |  |  |      move.l d0,60(sp)
    2370:	|  |  |  |      clr.l 56(sp)
    2374:	|  |  |  |      move.l 1b1d8 <SysBase>,d0
    237a:	|  |  |  |      movea.l d0,a6
    237c:	|  |  |  |      move.l 60(sp),d0
    2380:	|  |  |  |      move.l 56(sp),d1
    2384:	|  |  |  |      jsr -684(a6)
    2388:	|  |  |  |      move.l d0,52(sp)
    238c:	|  |  |  |      move.l 52(sp),d0
    2390:	|  |  |  |      move.l d0,1b114 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2396:	|  |  |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    239c:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    23a2:	|  |  |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    23a8:	|  |  |  |      move.w 16(sp),d0
    23ac:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    23ae:	|  |  |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    23b4:	|  |  |  |      move.w 14(sp),d0
    23b8:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    23bc:	|  |  |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    23c2:	|  |  |  |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    23c8:	|  |  |  |      movea.l 140(sp),a0
    23cc:	|  |  |  |      move.l (a0),d0
    23ce:	|  |  |  |      movea.l d0,a0
    23d0:	|  |  |  |      cmpa.w #0,a0
    23d4:	|  |  |  |  /-- bge.s 23da <CstScaleSprite+0x5e8>
    23d6:	|  |  |  |  |   lea 15(a0),a0
    23da:	|  |  |  |  \-> move.l a0,d0
    23dc:	|  |  |  |      asr.l #4,d0
    23de:	|  |  |  |      move.l d0,d0
    23e0:	|  |  |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    23e6:	|  |  |  |      add.w 128(sp),d0
    23ea:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    23ee:	|  |  |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    23f4:	|  |  |  |      move.l 88(sp),d0
    23f8:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    23fc:	|  |  |  |      move.w 16(sp),d0
    2400:	|  |  |  |  /-- bpl.s 2406 <CstScaleSprite+0x614>
    2402:	|  |  |  |  |   addi.w #15,d0
    2406:	|  |  |  |  \-> asr.w #4,d0
    2408:	|  |  |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    240e:	|  |  |  |      add.w d0,d0
    2410:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2414:	|  |  |  |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    241a:	|  |  |  |      move.l 96(sp),d0
    241e:	|  |  |  |      move.w d0,14(a0)
    2422:	|  +--|--|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2426:	|  |  |  \----> movea.l 140(sp),a0
    242a:	|  |  |         move.l (a0),d0
    242c:	|  |  |         movea.l d0,a0
    242e:	|  |  |         cmpa.w #0,a0
    2432:	|  |  |     /-- bge.s 2438 <CstScaleSprite+0x646>
    2434:	|  |  |     |   lea 15(a0),a0
    2438:	|  |  |     \-> move.l a0,d0
    243a:	|  |  |         asr.l #4,d0
    243c:	|  |  |         move.l d0,d0
    243e:	|  |  |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    2444:	|  |  |         move.l a0,d1
    2446:	|  |  |         addq.l #2,d1
    2448:	|  |  |         move.l d1,1b11c <CstBackDropBufferApplyCursor>
    244e:	|  |  |         add.w 128(sp),d0
    2452:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2454:	|  |  |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    245a:	|  |  |         move.l a0,d0
    245c:	|  |  |         addq.l #2,d0
    245e:	|  |  |         move.l d0,1b11c <CstBackDropBufferApplyCursor>
    2464:	|  |  |         move.l 88(sp),d0
    2468:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    246a:	|  |  |         move.w 16(sp),d0
    246e:	|  |  |     /-- bpl.s 2474 <CstScaleSprite+0x682>
    2470:	|  |  |     |   addi.w #15,d0
    2474:	|  |  |     \-> asr.w #4,d0
    2476:	|  |  |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    247c:	|  |  |         move.l a0,d1
    247e:	|  |  |         addq.l #2,d1
    2480:	|  |  |         move.l d1,1b11c <CstBackDropBufferApplyCursor>
    2486:	|  |  |         add.w d0,d0
    2488:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    248a:	|  |  |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    2490:	|  |  |         move.l a0,d0
    2492:	|  |  |         addq.l #2,d0
    2494:	|  |  |         move.l d0,1b11c <CstBackDropBufferApplyCursor>
    249a:	|  |  |         move.l 96(sp),d0
    249e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    24a0:	|  |  |         movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    24a6:	|  |  |         move.l a0,d0
    24a8:	|  |  |         addq.l #2,d0
    24aa:	|  |  |         move.l d0,1b11c <CstBackDropBufferApplyCursor>
    24b0:	|  |  |         clr.w (a0)
    24b2:	|  +--|-------- bra.w 2750 <CstScaleSprite+0x95e>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    24b6:	|  |  \-------> move.w #1,130(sp)
    cutwordssource = 0;
    24bc:	|  |            clr.w 128(sp)
    cutmaskpixel = 0;
    24c0:	|  |            clr.w 126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    24c4:	|  |            clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    24c8:	|  |            movea.l 140(sp),a0
    24cc:	|  |            move.l 24(a0),d0
    24d0:	|  |            move.l d0,d2
    24d2:	|  |            movea.l 140(sp),a0
    24d6:	|  |            move.l (a0),d0
    24d8:	|  |        /-- bpl.s 24dc <CstScaleSprite+0x6ea>
    24da:	|  |        |   addq.l #7,d0
    24dc:	|  |        \-> asr.l #3,d0
    24de:	|  |            movea.l 140(sp),a0
    24e2:	|  |            move.l 4(a0),d1
    24e6:	|  |            move.l d1,-(sp)
    24e8:	|  |            move.l d0,-(sp)
    24ea:	|  |            jsr 16460 <__mulsi3>
    24f0:	|  |            addq.l #8,sp
    24f2:	|  |            move.l d0,d1
    24f4:	|  |            move.l d1,d0
    24f6:	|  |            add.l d0,d0
    24f8:	|  |            add.l d0,d0
    24fa:	|  |            add.l d1,d0
    24fc:	|  |            add.l d0,d2
    24fe:	|  |            movea.l 140(sp),a0
    2502:	|  |            move.l (a0),d0
    2504:	|  |            move.l 92(sp),-(sp)
    2508:	|  |            move.l d0,-(sp)
    250a:	|  |            jsr 16460 <__mulsi3>
    2510:	|  |            addq.l #8,sp
    2512:	|  |            lsr.l #3,d0
    2514:	|  |            move.l d2,d1
    2516:	|  |            add.l d0,d1
    2518:	|  |            move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    251c:	|  |            movea.l 140(sp),a0
    2520:	|  |            move.l 24(a0),d0
    2524:	|  |            move.l d0,d2
    2526:	|  |            movea.l 140(sp),a0
    252a:	|  |            move.l (a0),d0
    252c:	|  |            move.l 92(sp),-(sp)
    2530:	|  |            move.l d0,-(sp)
    2532:	|  |            jsr 16460 <__mulsi3>
    2538:	|  |            addq.l #8,sp
    253a:	|  |            lsr.l #3,d0
    253c:	|  |            move.l d2,d1
    253e:	|  |            add.l d0,d1
    2540:	|  |            move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2544:	|  |            move.l 1b12c <winWidth>,d0
    254a:	|  |            move.l 96(sp),-(sp)
    254e:	|  |            move.l d0,-(sp)
    2550:	|  |            jsr 16460 <__mulsi3>
    2556:	|  |            addq.l #8,sp
    2558:	|  |            lsr.l #3,d0
    255a:	|  |            move.l 132(sp),d1
    255e:	|  |            add.l d0,d1
    2560:	|  |            move.w 16(sp),d0
    2564:	|  |        /-- bpl.s 256a <CstScaleSprite+0x778>
    2566:	|  |        |   addi.w #15,d0
    256a:	|  |        \-> asr.w #4,d0
    256c:	|  |            movea.w d0,a0
    256e:	|  |            move.l a0,d0
    2570:	|  |            add.l a0,d0
    2572:	|  |            move.l d1,d2
    2574:	|  |            add.l d0,d2
    2576:	|  |            move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    257a:	|  |            move.l 1b12c <winWidth>,d0
    2580:	|  |            move.l 96(sp),-(sp)
    2584:	|  |            move.l d0,-(sp)
    2586:	|  |            jsr 16460 <__mulsi3>
    258c:	|  |            addq.l #8,sp
    258e:	|  |            lsr.l #3,d0
    2590:	|  |            move.l 132(sp),d1
    2594:	|  |            add.l d0,d1
    2596:	|  |            move.w 16(sp),d0
    259a:	|  |        /-- bpl.s 25a0 <CstScaleSprite+0x7ae>
    259c:	|  |        |   addi.w #15,d0
    25a0:	|  |        \-> asr.w #4,d0
    25a2:	|  |            movea.w d0,a0
    25a4:	|  |            move.l a0,d0
    25a6:	|  |            add.l a0,d0
    25a8:	|  |            move.l d1,d2
    25aa:	|  |            add.l d0,d2
    25ac:	|  |            move.l d2,108(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    25b0:	|  |            move.w 16(sp),d0
    25b4:	|  |            andi.w #-32753,d0
    25b8:	|  |        /-- bpl.s 25c2 <CstScaleSprite+0x7d0>
    25ba:	|  |        |   subq.w #1,d0
    25bc:	|  |        |   ori.w #-16,d0
    25c0:	|  |        |   addq.w #1,d0
    25c2:	|  |        \-> ext.l d0
    25c4:	|  |            moveq #12,d1
    25c6:	|  |            lsl.l d1,d0
    25c8:	|  |            addi.l #4042,d0
    25ce:	|  |            move.l d0,104(sp)
    bltcon1 = ((x%16) << 12);
    25d2:	|  |            move.w 16(sp),d0
    25d6:	|  |            andi.w #-32753,d0
    25da:	|  |        /-- bpl.s 25e4 <CstScaleSprite+0x7f2>
    25dc:	|  |        |   subq.w #1,d0
    25de:	|  |        |   ori.w #-16,d0
    25e2:	|  |        |   addq.w #1,d0
    25e4:	|  |        \-> ext.l d0
    25e6:	|  |            moveq #12,d2
    25e8:	|  |            lsl.l d2,d0
    25ea:	|  |            move.l d0,100(sp)
    if( destinationtype == SCREEN)
    25ee:	|  |            cmpi.w #1,12(sp)
    25f4:	|  |     /----- bne.w 26c0 <CstScaleSprite+0x8ce>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    25f8:	|  |     |      move.l 1b114 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2600:	|  |     |      moveq #20,d0
    2602:	|  |     |      move.l d0,76(sp)
    2606:	|  |     |      clr.l 72(sp)
    260a:	|  |     |      move.l 1b1d8 <SysBase>,d0
    2610:	|  |     |      movea.l d0,a6
    2612:	|  |     |      move.l 76(sp),d0
    2616:	|  |     |      move.l 72(sp),d1
    261a:	|  |     |      jsr -684(a6)
    261e:	|  |     |      move.l d0,68(sp)
    2622:	|  |     |      move.l 68(sp),d0
    2626:	|  |     |      move.l d0,1b114 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    262c:	|  |     |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    2632:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2638:	|  |     |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    263e:	|  |     |      move.w 16(sp),d0
    2642:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2644:	|  |     |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    264a:	|  |     |      move.w 14(sp),d0
    264e:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    2652:	|  |     |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    2658:	|  |     |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    265e:	|  |     |      movea.l 140(sp),a0
    2662:	|  |     |      move.l (a0),d0
    2664:	|  |     |      movea.l d0,a0
    2666:	|  |     |      cmpa.w #0,a0
    266a:	|  |     |  /-- bge.s 2670 <CstScaleSprite+0x87e>
    266c:	|  |     |  |   lea 15(a0),a0
    2670:	|  |     |  \-> move.l a0,d0
    2672:	|  |     |      asr.l #4,d0
    2674:	|  |     |      move.l d0,d0
    2676:	|  |     |      add.w 128(sp),d0
    267a:	|  |     |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    2680:	|  |     |      add.w 130(sp),d0
    2684:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    2688:	|  |     |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    268e:	|  |     |      move.l 88(sp),d0
    2692:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    2696:	|  |     |      move.w 16(sp),d0
    269a:	|  |     |  /-- bpl.s 26a0 <CstScaleSprite+0x8ae>
    269c:	|  |     |  |   addi.w #15,d0
    26a0:	|  |     |  \-> asr.w #4,d0
    26a2:	|  |     |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    26a8:	|  |     |      add.w d0,d0
    26aa:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    26ae:	|  |     |      movea.l 1b114 <CstCleanupQueueDrawBuffer>,a0
    26b4:	|  |     |      move.l 96(sp),d0
    26b8:	|  |     |      move.w d0,14(a0)
    26bc:	|  +-----|----- bra.w 2750 <CstScaleSprite+0x95e>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    26c0:	|  |     \----> movea.l 140(sp),a0
    26c4:	|  |            move.l (a0),d0
    26c6:	|  |            movea.l d0,a0
    26c8:	|  |            cmpa.w #0,a0
    26cc:	|  |        /-- bge.s 26d2 <CstScaleSprite+0x8e0>
    26ce:	|  |        |   lea 15(a0),a0
    26d2:	|  |        \-> move.l a0,d0
    26d4:	|  |            asr.l #4,d0
    26d6:	|  |            move.l d0,d0
    26d8:	|  |            add.w 128(sp),d0
    26dc:	|  |            movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    26e2:	|  |            move.l a0,d1
    26e4:	|  |            addq.l #2,d1
    26e6:	|  |            move.l d1,1b11c <CstBackDropBufferApplyCursor>
    26ec:	|  |            add.w 130(sp),d0
    26f0:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    26f2:	|  |            movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    26f8:	|  |            move.l a0,d0
    26fa:	|  |            addq.l #2,d0
    26fc:	|  |            move.l d0,1b11c <CstBackDropBufferApplyCursor>
    2702:	|  |            move.l 88(sp),d0
    2706:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2708:	|  |            move.w 16(sp),d0
    270c:	|  |        /-- bpl.s 2712 <CstScaleSprite+0x920>
    270e:	|  |        |   addi.w #15,d0
    2712:	|  |        \-> asr.w #4,d0
    2714:	|  |            movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    271a:	|  |            move.l a0,d1
    271c:	|  |            addq.l #2,d1
    271e:	|  |            move.l d1,1b11c <CstBackDropBufferApplyCursor>
    2724:	|  |            add.w d0,d0
    2726:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2728:	|  |            movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    272e:	|  |            move.l a0,d0
    2730:	|  |            addq.l #2,d0
    2732:	|  |            move.l d0,1b11c <CstBackDropBufferApplyCursor>
    2738:	|  |            move.l 96(sp),d0
    273c:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    273e:	|  |            movea.l 1b11c <CstBackDropBufferApplyCursor>,a0
    2744:	|  |            move.l a0,d0
    2746:	|  |            addq.l #2,d0
    2748:	|  |            move.l d0,1b11c <CstBackDropBufferApplyCursor>
    274e:	|  |            clr.w (a0)
    }
  }

  if(person && person->samePosCount > 3) {
    2750:	|  \----------> tst.l 144(sp)
    2754:	|           /-- beq.s 2766 <CstScaleSprite+0x974>
    2756:	|           |   movea.l 144(sp),a0
    275a:	|           |   move.l 16(a0),d0
    275e:	|           |   moveq #3,d1
    2760:	|           |   cmp.l d0,d1
    2762:	|  /--------|-- blt.w 2940 <CstScaleSprite+0xb4e>
    return;
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2766:	|  |        \-> moveq #0,d0
    2768:	|  |            move.w 126(sp),d0
    276c:	|  |            moveq #0,d1
    276e:	|  |            not.w d1
    2770:	|  |            asr.l d0,d1
    2772:	|  |            move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2776:	|  |            moveq #0,d1
    2778:	|  |            move.w 128(sp),d1
    277c:	|  |            moveq #0,d0
    277e:	|  |            move.w 130(sp),d0
    2782:	|  |            sub.l d0,d1
    2784:	|  |            move.l d1,d0
    2786:	|  |            add.w d0,d0
    2788:	|  |            move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    278c:	|  |            moveq #0,d1
    278e:	|  |            move.w 128(sp),d1
    2792:	|  |            moveq #0,d0
    2794:	|  |            move.w 130(sp),d0
    2798:	|  |            sub.l d0,d1
    279a:	|  |            move.l d1,d0
    279c:	|  |            add.w d0,d0
    279e:	|  |            move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    27a2:	|  |            move.l 1b12c <winWidth>,d0
    27a8:	|  |            lsr.l #3,d0
    27aa:	|  |            move.l d0,d1
    27ac:	|  |            movea.l 140(sp),a0
    27b0:	|  |            move.l (a0),d0
    27b2:	|  |        /-- bpl.s 27b6 <CstScaleSprite+0x9c4>
    27b4:	|  |        |   addq.l #7,d0
    27b6:	|  |        \-> asr.l #3,d0
    27b8:	|  |            move.l d0,d0
    27ba:	|  |            sub.w d0,d1
    27bc:	|  |            move.w 128(sp),d0
    27c0:	|  |            sub.w 130(sp),d0
    27c4:	|  |            add.w d0,d0
    27c6:	|  |            add.w d1,d0
    27c8:	|  |            move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    27cc:	|  |            move.l 1b12c <winWidth>,d0
    27d2:	|  |            lsr.l #3,d0
    27d4:	|  |            move.l d0,d1
    27d6:	|  |            movea.l 140(sp),a0
    27da:	|  |            move.l (a0),d0
    27dc:	|  |        /-- bpl.s 27e0 <CstScaleSprite+0x9ee>
    27de:	|  |        |   addq.l #7,d0
    27e0:	|  |        \-> asr.l #3,d0
    27e2:	|  |            move.l d0,d0
    27e4:	|  |            sub.w d0,d1
    27e6:	|  |            move.w 128(sp),d0
    27ea:	|  |            sub.w 130(sp),d0
    27ee:	|  |            add.w d0,d0
    27f0:	|  |            add.w d1,d0
    27f2:	|  |            move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    27f6:	|  |            move.l #14675968,22(sp)
  WaitBlit();
    27fe:	|  |            move.l 1b1e4 <GfxBase>,d0
    2804:	|  |            movea.l d0,a6
    2806:	|  |            jsr -228(a6)

  custom->bltafwm = bltafwm;
    280a:	|  |            movea.l 22(sp),a0
    280e:	|  |            move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    2814:	|  |            movea.l 22(sp),a0
    2818:	|  |            move.w 124(sp),70(a0)
  custom->bltamod = bltamod;
    281e:	|  |            move.w 32(sp),d0
    2822:	|  |            movea.l 22(sp),a0
    2826:	|  |            move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    282a:	|  |            move.w 30(sp),d0
    282e:	|  |            movea.l 22(sp),a0
    2832:	|  |            move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    2836:	|  |            move.w 28(sp),d0
    283a:	|  |            movea.l 22(sp),a0
    283e:	|  |            move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2842:	|  |            move.w 26(sp),d0
    2846:	|  |            movea.l 22(sp),a0
    284a:	|  |            move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    284e:	|  |            move.l 104(sp),d0
    2852:	|  |            movea.l 22(sp),a0
    2856:	|  |            move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    285a:	|  |            move.l 100(sp),d0
    285e:	|  |            movea.l 22(sp),a0
    2862:	|  |            move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2866:	|  |            movea.l 140(sp),a0
    286a:	|  |            move.l (a0),d0
    286c:	|  |            asr.l #3,d0
    286e:	|  |            move.l d0,d1
    2870:	|  |            movea.l 140(sp),a0
    2874:	|  |            move.l 4(a0),d0
    2878:	|  |            move.l d0,d0
    287a:	|  |            move.w d1,d2
    287c:	|  |            muls.w d0,d2
    287e:	|  |            move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    2882:	|  |            move.l 1b12c <winWidth>,d0
    2888:	|  |            lsr.l #3,d0
    288a:	|  |            move.l d0,d1
    288c:	|  |            move.l 1b130 <winHeight>,d0
    2892:	|  |            move.l d0,d0
    2894:	|  |            move.w d1,d2
    2896:	|  |            muls.w d0,d2
    2898:	|  |            move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    289c:	|  |            clr.l 84(sp)
    28a0:	|  |     /----- bra.w 2934 <CstScaleSprite+0xb42>
  {
    custom->bltapt = (APTR) bltapt;
    28a4:	|  |  /--|----> move.l 120(sp),d0
    28a8:	|  |  |  |      movea.l 22(sp),a0
    28ac:	|  |  |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    28b0:	|  |  |  |      move.l 116(sp),d0
    28b4:	|  |  |  |      movea.l 22(sp),a0
    28b8:	|  |  |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    28bc:	|  |  |  |      move.l 112(sp),d0
    28c0:	|  |  |  |      movea.l 22(sp),a0
    28c4:	|  |  |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    28c8:	|  |  |  |      move.l 108(sp),d0
    28cc:	|  |  |  |      movea.l 22(sp),a0
    28d0:	|  |  |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    28d4:	|  |  |  |      move.l 88(sp),d0
    28d8:	|  |  |  |      move.w d0,d1
    28da:	|  |  |  |      lsl.w #6,d1
    28dc:	|  |  |  |      movea.l 140(sp),a0
    28e0:	|  |  |  |      move.l (a0),d0
    28e2:	|  |  |  |      movea.l d0,a0
    28e4:	|  |  |  |      cmpa.w #0,a0
    28e8:	|  |  |  |  /-- bge.s 28ee <CstScaleSprite+0xafc>
    28ea:	|  |  |  |  |   lea 15(a0),a0
    28ee:	|  |  |  |  \-> move.l a0,d0
    28f0:	|  |  |  |      asr.l #4,d0
    28f2:	|  |  |  |      move.l d0,d0
    28f4:	|  |  |  |      add.w d1,d0
    28f6:	|  |  |  |      sub.w 128(sp),d0
    28fa:	|  |  |  |      add.w 130(sp),d0
    28fe:	|  |  |  |      movea.l 22(sp),a0
    2902:	|  |  |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    2906:	|  |  |  |      moveq #0,d0
    2908:	|  |  |  |      move.w 20(sp),d0
    290c:	|  |  |  |      add.l d0,116(sp)
    bltcpt += bltcptplus;
    2910:	|  |  |  |      moveq #0,d0
    2912:	|  |  |  |      move.w 18(sp),d0
    2916:	|  |  |  |      add.l d0,112(sp)
    bltdpt += bltcptplus;
    291a:	|  |  |  |      moveq #0,d0
    291c:	|  |  |  |      move.w 18(sp),d0
    2920:	|  |  |  |      add.l d0,108(sp)
    WaitBlit();
    2924:	|  |  |  |      move.l 1b1e4 <GfxBase>,d0
    292a:	|  |  |  |      movea.l d0,a6
    292c:	|  |  |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2930:	|  |  |  |      addq.l #1,84(sp)
    2934:	|  |  |  \----> moveq #4,d0
    2936:	|  |  |         cmp.l 84(sp),d0
    293a:	|  |  \-------- bge.w 28a4 <CstScaleSprite+0xab2>
    293e:	+--|----------- bra.s 2942 <CstScaleSprite+0xb50>
    return;
    2940:	|  \----------> nop
  }   
}
    2942:	\-------------> movem.l (sp)+,d2-d3/a6
    2946:	                lea 124(sp),sp
    294a:	                rts

0000294c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    294c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    294e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    2954:	move.l 8(sp),d0
    2958:	movea.l (sp),a0
    295a:	move.l d0,128(a0)
}
    295e:	nop
    2960:	addq.l #4,sp
    2962:	rts

00002964 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    2964:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    2968:	move.l 1b108 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    2970:	move.l 1b10c <CstDrawBuffer>,d0
    2976:	move.l d0,1b108 <CstViewBuffer>
  CstDrawBuffer = tmp;
    297c:	move.l 16(sp),1b10c <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    2984:	move.l 1b110 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    298c:	move.l 1b114 <CstCleanupQueueDrawBuffer>,d0
    2992:	move.l d0,1b110 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    2998:	move.l 12(sp),1b114 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    29a0:	move.l 1b102 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    29a8:	move.l 1b108 <CstViewBuffer>,d0
    29ae:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    29b2:	move.l 4(sp),d0
    29b6:	clr.w d0
    29b8:	swap d0
    29ba:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    29be:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    29c2:	movea.w #118,a0
    29c6:	adda.l 8(sp),a0
    29ca:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    29cc:	movea.w #114,a0
    29d0:	adda.l 8(sp),a0
    29d4:	move.w 2(sp),(a0)

  ptr +=  40*256;
    29d8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    29e0:	move.l 4(sp),d0
    29e4:	clr.w d0
    29e6:	swap d0
    29e8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    29ec:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    29f0:	movea.w #126,a0
    29f4:	adda.l 8(sp),a0
    29f8:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    29fa:	movea.w #122,a0
    29fe:	adda.l 8(sp),a0
    2a02:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    2a06:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2a0e:	move.l 4(sp),d0
    2a12:	clr.w d0
    2a14:	swap d0
    2a16:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a1a:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    2a1e:	movea.l 8(sp),a0
    2a22:	lea 134(a0),a0
    2a26:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    2a28:	movea.l 8(sp),a0
    2a2c:	lea 130(a0),a0
    2a30:	move.w 2(sp),(a0)

  ptr +=  40*256;
    2a34:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2a3c:	move.l 4(sp),d0
    2a40:	clr.w d0
    2a42:	swap d0
    2a44:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a48:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    2a4c:	movea.l 8(sp),a0
    2a50:	lea 142(a0),a0
    2a54:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    2a56:	movea.l 8(sp),a0
    2a5a:	lea 138(a0),a0
    2a5e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    2a62:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    2a6a:	move.l 4(sp),d0
    2a6e:	clr.w d0
    2a70:	swap d0
    2a72:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    2a76:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    2a7a:	movea.l 8(sp),a0
    2a7e:	lea 150(a0),a0
    2a82:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    2a84:	movea.l 8(sp),a0
    2a88:	lea 146(a0),a0
    2a8c:	move.w 2(sp),(a0)

}
    2a90:	nop
    2a92:	lea 20(sp),sp
    2a96:	rts

00002a98 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    2a98:	          lea -56(sp),sp
    2a9c:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    2a9e:	          pea 1688e <PutChar+0x318>
    2aa4:	          jsr 15c26 <KPrintF>
    2aaa:	          addq.l #4,sp

  width = width / 8;
    2aac:	          move.l 64(sp),d0
    2ab0:	      /-- bpl.s 2ab4 <CstReserveBackdrop+0x1c>
    2ab2:	      |   addq.l #7,d0
    2ab4:	      \-> asr.l #3,d0
    2ab6:	          move.l d0,64(sp)

  if( width < 40) 
    2aba:	          moveq #39,d0
    2abc:	          cmp.l 64(sp),d0
    2ac0:	      /-- blt.s 2ad6 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    2ac2:	      |   pea 168a8 <PutChar+0x332>
    2ac8:	      |   jsr 15c26 <KPrintF>
    2ace:	      |   addq.l #4,sp
    return FALSE;
    2ad0:	      |   clr.w d0
    2ad2:	/-----|-- bra.w 2d92 <CstReserveBackdrop+0x2fa>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    2ad6:	|     \-> pea 168e6 <PutChar+0x370>
    2adc:	|         jsr 15c26 <KPrintF>
    2ae2:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    2ae4:	|         move.l 64(sp),-(sp)
    2ae8:	|         jsr fce <CstCreateCopperlist>
    2aee:	|         addq.l #4,sp
    2af0:	|         move.l d0,1b102 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    2af6:	|         pea 16906 <PutChar+0x390>
    2afc:	|         jsr 15c26 <KPrintF>
    2b02:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    2b04:	|         move.l 64(sp),d1
    2b08:	|         move.l 68(sp),d0
    2b0c:	|         muls.w d1,d0
    2b0e:	|         move.w d0,1b0f8 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    2b14:	|         move.w 1b0f8 <CstBackdropSizePlane>,d1
    2b1a:	|         move.w d1,d0
    2b1c:	|         add.w d0,d0
    2b1e:	|         add.w d0,d0
    2b20:	|         add.w d1,d0
    2b22:	|         move.w d0,1b0f6 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    2b28:	|         move.w 1b0f6 <CstBackdropSize>,d0
    2b2e:	|         move.w d0,d0
    2b30:	|         andi.l #65535,d0
    2b36:	|         move.l d0,48(sp)
    2b3a:	|         moveq #2,d1
    2b3c:	|         move.l d1,44(sp)
    2b40:	|         move.l 1b1d8 <SysBase>,d0
    2b46:	|         movea.l d0,a6
    2b48:	|         move.l 48(sp),d0
    2b4c:	|         move.l 44(sp),d1
    2b50:	|         jsr -684(a6)
    2b54:	|         move.l d0,40(sp)
    2b58:	|         move.l 40(sp),d0
    2b5c:	|         move.l d0,1b0fa <CstBackDrop>
  if( !CstBackDrop)
    2b62:	|         move.l 1b0fa <CstBackDrop>,d0
    2b68:	|     /-- bne.s 2b7e <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    2b6a:	|     |   pea 1692d <PutChar+0x3b7>
    2b70:	|     |   jsr 15c26 <KPrintF>
    2b76:	|     |   addq.l #4,sp
    return FALSE;  
    2b78:	|     |   clr.w d0
    2b7a:	+-----|-- bra.w 2d92 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    2b7e:	|     \-> pea 16965 <PutChar+0x3ef>
    2b84:	|         jsr 15c26 <KPrintF>
    2b8a:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    2b8c:	|         move.l 1b0fa <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    2b94:	|         clr.l 52(sp)
    2b98:	|     /-- bra.s 2bae <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    2b9a:	|  /--|-> move.l 56(sp),d0
    2b9e:	|  |  |   move.l d0,d1
    2ba0:	|  |  |   addq.l #4,d1
    2ba2:	|  |  |   move.l d1,56(sp)
    2ba6:	|  |  |   movea.l d0,a0
    2ba8:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    2baa:	|  |  |   addq.l #1,52(sp)
    2bae:	|  |  \-> move.w 1b0f6 <CstBackdropSize>,d0
    2bb4:	|  |      lsr.w #2,d0
    2bb6:	|  |      move.w d0,d0
    2bb8:	|  |      andi.l #65535,d0
    2bbe:	|  |      cmp.l 52(sp),d0
    2bc2:	|  \----- bgt.s 2b9a <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2bc4:	|         move.w 1b0f6 <CstBackdropSize>,d0
    2bca:	|         move.w d0,d0
    2bcc:	|         andi.l #65535,d0
    2bd2:	|         move.l 64(sp),d1
    2bd6:	|         add.l d1,d1
    2bd8:	|         add.l d1,d0
    2bda:	|         move.l d0,36(sp)
    2bde:	|         moveq #2,d0
    2be0:	|         move.l d0,32(sp)
    2be4:	|         move.l 1b1d8 <SysBase>,d0
    2bea:	|         movea.l d0,a6
    2bec:	|         move.l 36(sp),d0
    2bf0:	|         move.l 32(sp),d1
    2bf4:	|         jsr -684(a6)
    2bf8:	|         move.l d0,28(sp)
    2bfc:	|         move.l 28(sp),d0
    2c00:	|         move.l d0,1b10c <CstDrawBuffer>
  if( !CstDrawBuffer)
    2c06:	|         move.l 1b10c <CstDrawBuffer>,d0
    2c0c:	|     /-- bne.s 2c22 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    2c0e:	|     |   pea 1698b <PutChar+0x415>
    2c14:	|     |   jsr 15c26 <KPrintF>
    2c1a:	|     |   addq.l #4,sp
    return FALSE;  
    2c1c:	|     |   clr.w d0
    2c1e:	+-----|-- bra.w 2d92 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    2c22:	|     \-> pea 169c5 <PutChar+0x44f>
    2c28:	|         jsr 15c26 <KPrintF>
    2c2e:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    2c30:	|         move.l #10000,24(sp)
    2c38:	|         clr.l 20(sp)
    2c3c:	|         move.l 1b1d8 <SysBase>,d0
    2c42:	|         movea.l d0,a6
    2c44:	|         move.l 24(sp),d0
    2c48:	|         move.l 20(sp),d1
    2c4c:	|         jsr -684(a6)
    2c50:	|         move.l d0,16(sp)
    2c54:	|         move.l 16(sp),d0
    2c58:	|         move.l d0,1b118 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    2c5e:	|         move.l 1b118 <CstBackDropBufferApplyStart>,d0
    2c64:	|     /-- bne.s 2c7a <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    2c66:	|     |   pea 169ed <PutChar+0x477>
    2c6c:	|     |   jsr 15c26 <KPrintF>
    2c72:	|     |   addq.l #4,sp
    return FALSE;  
    2c74:	|     |   clr.w d0
    2c76:	+-----|-- bra.w 2d92 <CstReserveBackdrop+0x2fa>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    2c7a:	|     \-> move.l 1b118 <CstBackDropBufferApplyStart>,d0
    2c80:	|         move.l d0,1b11c <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    2c86:	|         movea.l 1b118 <CstBackDropBufferApplyStart>,a0
    2c8c:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    2c8e:	|         movea.l 1b118 <CstBackDropBufferApplyStart>,a0
    2c94:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    2c96:	|         move.w 1b0f6 <CstBackdropSize>,d0
    2c9c:	|         move.w d0,d0
    2c9e:	|         andi.l #65535,d0
    2ca4:	|         move.l 64(sp),d1
    2ca8:	|         add.l d1,d1
    2caa:	|         add.l d1,d0
    2cac:	|         move.l d0,12(sp)
    2cb0:	|         moveq #2,d1
    2cb2:	|         move.l d1,8(sp)
    2cb6:	|         move.l 1b1d8 <SysBase>,d0
    2cbc:	|         movea.l d0,a6
    2cbe:	|         move.l 12(sp),d0
    2cc2:	|         move.l 8(sp),d1
    2cc6:	|         jsr -684(a6)
    2cca:	|         move.l d0,4(sp)
    2cce:	|         move.l 4(sp),d0
    2cd2:	|         move.l d0,1b108 <CstViewBuffer>
  if( !CstViewBuffer)
    2cd8:	|         move.l 1b108 <CstViewBuffer>,d0
    2cde:	|     /-- bne.s 2cf4 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    2ce0:	|     |   pea 16a38 <PutChar+0x4c2>
    2ce6:	|     |   jsr 15c26 <KPrintF>
    2cec:	|     |   addq.l #4,sp
    return FALSE;  
    2cee:	|     |   clr.w d0
    2cf0:	+-----|-- bra.w 2d92 <CstReserveBackdrop+0x2fa>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    2cf4:	|     \-> pea 16a72 <PutChar+0x4fc>
    2cfa:	|         jsr 15c26 <KPrintF>
    2d00:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    2d02:	|         move.l 1b10c <CstDrawBuffer>,d1
    2d08:	|         move.l 64(sp),d0
    2d0c:	|     /-- bpl.s 2d10 <CstReserveBackdrop+0x278>
    2d0e:	|     |   addq.l #3,d0
    2d10:	|     \-> asr.l #2,d0
    2d12:	|         add.l d0,d0
    2d14:	|         add.l d0,d0
    2d16:	|         add.l d1,d0
    2d18:	|         move.l d0,1b10c <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    2d1e:	|         move.l 1b108 <CstViewBuffer>,d1
    2d24:	|         move.l 64(sp),d0
    2d28:	|     /-- bpl.s 2d2c <CstReserveBackdrop+0x294>
    2d2a:	|     |   addq.l #3,d0
    2d2c:	|     \-> asr.l #2,d0
    2d2e:	|         add.l d0,d0
    2d30:	|         add.l d0,d0
    2d32:	|         add.l d1,d0
    2d34:	|         move.l d0,1b108 <CstViewBuffer>
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    2d3a:	|         move.l 1b102 <CstCopperList>,d0
    2d40:	|     /-- beq.s 2d52 <CstReserveBackdrop+0x2ba>
    2d42:	|     |   move.l 1b10c <CstDrawBuffer>,d0
    2d48:	|     +-- beq.s 2d52 <CstReserveBackdrop+0x2ba>
    2d4a:	|     |   move.l 1b108 <CstViewBuffer>,d0
    2d50:	|  /--|-- bne.s 2d64 <CstReserveBackdrop+0x2cc>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    2d52:	|  |  \-> pea 16a9a <PutChar+0x524>
    2d58:	|  |      jsr 15c26 <KPrintF>
    2d5e:	|  |      addq.l #4,sp
    return FALSE;
    2d60:	|  |      clr.w d0
    2d62:	+--|----- bra.s 2d92 <CstReserveBackdrop+0x2fa>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    2d64:	|  \----> pea 16ac7 <PutChar+0x551>
    2d6a:	|         jsr 15c26 <KPrintF>
    2d70:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    2d72:	|         move.l 1b102 <CstCopperList>,d0
    2d78:	|         move.l d0,-(sp)
    2d7a:	|         jsr 294c <CstSetCl>
    2d80:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    2d82:	|         pea 16aee <PutChar+0x578>
    2d88:	|         jsr 15c26 <KPrintF>
    2d8e:	|         addq.l #4,sp
  return TRUE;
    2d90:	|         moveq #1,d0

}
    2d92:	\-------> movea.l (sp)+,a6
    2d94:	          lea 56(sp),sp
    2d98:	          rts

00002d9a <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    2d9a:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    2d9e:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    2da2:	       tst.l 24(sp)
    2da6:	   /-- bge.s 2dac <drawLine+0x12>
    2da8:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    2dac:	   \-> tst.l 28(sp)
    2db0:	   /-- bge.s 2db6 <drawLine+0x1c>
    2db2:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    2db6:	   \-> tst.l 32(sp)
    2dba:	   /-- bge.s 2dc0 <drawLine+0x26>
    2dbc:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    2dc0:	   \-> tst.l 36(sp)
    2dc4:	   /-- bge.s 2dca <drawLine+0x30>
    2dc6:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    2dca:	   \-> move.l 1b2cc <sceneWidth>,d0
    2dd0:	       cmp.l 24(sp),d0
    2dd4:	   /-- bge.s 2de4 <drawLine+0x4a>
    2dd6:	   |   move.l 1b2cc <sceneWidth>,d0
    2ddc:	   |   move.l d0,d1
    2dde:	   |   subq.l #1,d1
    2de0:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    2de4:	   \-> move.l 1b2cc <sceneWidth>,d0
    2dea:	       cmp.l 32(sp),d0
    2dee:	   /-- bge.s 2dfe <drawLine+0x64>
    2df0:	   |   move.l 1b2cc <sceneWidth>,d0
    2df6:	   |   move.l d0,d1
    2df8:	   |   subq.l #1,d1
    2dfa:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    2dfe:	   \-> move.l 1b2d0 <sceneHeight>,d0
    2e04:	       cmp.l 28(sp),d0
    2e08:	   /-- bge.s 2e18 <drawLine+0x7e>
    2e0a:	   |   move.l 1b2d0 <sceneHeight>,d0
    2e10:	   |   move.l d0,d1
    2e12:	   |   subq.l #1,d1
    2e14:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    2e18:	   \-> move.l 1b2d0 <sceneHeight>,d0
    2e1e:	       cmp.l 36(sp),d0
    2e22:	   /-- bge.s 2e32 <drawLine+0x98>
    2e24:	   |   move.l 1b2d0 <sceneHeight>,d0
    2e2a:	   |   move.l d0,d1
    2e2c:	   |   subq.l #1,d1
    2e2e:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    2e32:	   \-> move.l 24(sp),d0
    2e36:	       cmp.l 32(sp),d0
    2e3a:	/----- ble.s 2e56 <drawLine+0xbc>
		x = x2; 
    2e3c:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    2e42:	|      tst.w 10(sp)
    2e46:	|      seq d0
    2e48:	|      neg.b d0
    2e4a:	|      move.b d0,d0
    2e4c:	|      andi.w #255,d0
    2e50:	|      move.w d0,10(sp)
    2e54:	|  /-- bra.s 2e5c <drawLine+0xc2>
	} else x = x1;
    2e56:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    2e5c:	   \-> move.l 28(sp),d1
    2e60:	       cmp.l 36(sp),d1
    2e64:	/----- ble.s 2e80 <drawLine+0xe6>
		y = y2; 
    2e66:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    2e6c:	|      tst.w 10(sp)
    2e70:	|      seq d0
    2e72:	|      neg.b d0
    2e74:	|      move.b d0,d0
    2e76:	|      andi.w #255,d0
    2e7a:	|      move.w d0,10(sp)
    2e7e:	|  /-- bra.s 2e86 <drawLine+0xec>
	} else y = y1;	
    2e80:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    2e86:	   \-> move.l 32(sp),d0
    2e8a:	       sub.l 24(sp),d0
    2e8e:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    2e92:	       move.l 6(sp),d0
    2e96:	   /-- bpl.s 2e9a <drawLine+0x100>
    2e98:	   |   neg.l d0
    2e9a:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    2e9e:	       move.l 36(sp),d1
    2ea2:	       sub.l 28(sp),d1
    2ea6:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    2eaa:	       move.l 2(sp),d0
    2eae:	   /-- bpl.s 2eb2 <drawLine+0x118>
    2eb0:	   |   neg.l d0
    2eb2:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    2eb6:	       tst.l 6(sp)
    2eba:	   /-- bne.s 2ede <drawLine+0x144>
		diffX = 1;
    2ebc:	   |   moveq #1,d0
    2ebe:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    2ec2:	   |   move.l 1b2cc <sceneWidth>,d0
    2ec8:	   |   subq.l #1,d0
    2eca:	   |   cmp.l 16(sp),d0
    2ece:	   +-- bne.s 2ede <drawLine+0x144>
    2ed0:	   |   move.l 1b2cc <sceneWidth>,d0
    2ed6:	   |   move.l d0,d1
    2ed8:	   |   subq.l #2,d1
    2eda:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    2ede:	   \-> tst.l 2(sp)
    2ee2:	   /-- bne.s 2f06 <drawLine+0x16c>
		diffY = 1;
    2ee4:	   |   moveq #1,d0
    2ee6:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    2eea:	   |   move.l 1b2d0 <sceneHeight>,d0
    2ef0:	   |   subq.l #1,d0
    2ef2:	   |   cmp.l 12(sp),d0
    2ef6:	   +-- bne.s 2f06 <drawLine+0x16c>
    2ef8:	   |   move.l 1b2d0 <sceneHeight>,d0
    2efe:	   |   move.l d0,d1
    2f00:	   |   subq.l #2,d1
    2f02:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    2f06:	   \-> pea 16b11 <PutChar+0x59b>
    2f0c:	       jsr 15c26 <KPrintF>
    2f12:	       addq.l #4,sp
	
}
    2f14:	       nop
    2f16:	       lea 20(sp),sp
    2f1a:	       rts

00002f1c <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    2f1c:	                      lea -24(sp),sp
    2f20:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    2f22:	                      move.l 1b134 <firstTexture>,d0
    2f28:	/-------------------- beq.w 3006 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    2f2c:	|                     clr.l 24(sp)
    2f30:	|     /-------------- bra.w 2ffa <deleteTextures+0xde>
			BOOL found = FALSE;
    2f34:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    2f38:	|  |  |               move.l 1b134 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    2f40:	|  |  |               movea.l 20(sp),a0
    2f44:	|  |  |               move.l (a0),d1
    2f46:	|  |  |               move.l 24(sp),d0
    2f4a:	|  |  |               add.l d0,d0
    2f4c:	|  |  |               add.l d0,d0
    2f4e:	|  |  |               movea.l 36(sp),a0
    2f52:	|  |  |               adda.l d0,a0
    2f54:	|  |  |               move.l (a0),d0
    2f56:	|  |  |               cmp.l d1,d0
    2f58:	|  |  |  /----------- bne.w 2fec <deleteTextures+0xd0>
				found = TRUE;
    2f5c:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    2f62:	|  |  |  |            movea.l 20(sp),a0
    2f66:	|  |  |  |            move.l 12(a0),d0
    2f6a:	|  |  |  |            move.l d0,1b134 <firstTexture>
				FreeVec(list);
    2f70:	|  |  |  |            move.l 20(sp),6(sp)
    2f76:	|  |  |  |            move.l 1b1d8 <SysBase>,d0
    2f7c:	|  |  |  |            movea.l d0,a6
    2f7e:	|  |  |  |            movea.l 6(sp),a1
    2f82:	|  |  |  |            jsr -690(a6)
				continue;
    2f86:	|  |  |  |  /-------- bra.s 2ff6 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    2f88:	|  |  |  |  |  /----> movea.l 20(sp),a0
    2f8c:	|  |  |  |  |  |      movea.l 12(a0),a0
    2f90:	|  |  |  |  |  |      move.l (a0),d1
    2f92:	|  |  |  |  |  |      move.l 24(sp),d0
    2f96:	|  |  |  |  |  |      add.l d0,d0
    2f98:	|  |  |  |  |  |      add.l d0,d0
    2f9a:	|  |  |  |  |  |      movea.l 36(sp),a0
    2f9e:	|  |  |  |  |  |      adda.l d0,a0
    2fa0:	|  |  |  |  |  |      move.l (a0),d0
    2fa2:	|  |  |  |  |  |      cmp.l d1,d0
    2fa4:	|  |  |  |  |  |  /-- bne.s 2fe2 <deleteTextures+0xc6>
					found = TRUE;
    2fa6:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    2fac:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2fb0:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    2fb6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2fba:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    2fbe:	|  |  |  |  |  |  |   move.l 12(a0),d0
    2fc2:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    2fc6:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    2fca:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    2fd0:	|  |  |  |  |  |  |   move.l 1b1d8 <SysBase>,d0
    2fd6:	|  |  |  |  |  |  |   movea.l d0,a6
    2fd8:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    2fdc:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    2fe0:	|  |  |  |  +--|--|-- bra.s 2ff6 <deleteTextures+0xda>
				}
				list = list->next;
    2fe2:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    2fe6:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    2fec:	|  |  |  \--|--|----> movea.l 20(sp),a0
    2ff0:	|  |  |     |  |      move.l 12(a0),d0
    2ff4:	|  |  |     |  \----- bne.s 2f88 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    2ff6:	|  |  |     \-------> addq.l #1,24(sp)
    2ffa:	|  |  \-------------> move.l 24(sp),d0
    2ffe:	|  |                  cmp.l 32(sp),d0
    3002:	|  \----------------- bcs.w 2f34 <deleteTextures+0x18>
			}
		}
	}
}
    3006:	\-------------------> nop
    3008:	                      movea.l (sp)+,a6
    300a:	                      lea 24(sp),sp
    300e:	                      rts

00003010 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    3010:	subq.l #4,sp
    3012:	move.l 8(sp),d0
    3016:	move.w d0,d0
    3018:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    301c:	pea 16b34 <PutChar+0x5be>
    3022:	jsr 15c26 <KPrintF>
    3028:	addq.l #4,sp
}
    302a:	nop
    302c:	addq.l #4,sp
    302e:	rts

00003030 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    3030:	       moveq #-1,d0
    3032:	       cmp.l 4(sp),d0
    3036:	   /-- bne.s 303c <resourceNameFromNum+0xc>
    3038:	   |   moveq #0,d0
    303a:	/--|-- bra.s 3074 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    303c:	|  \-> move.l 1b1b4 <numResourceNames>,d0
    3042:	|  /-- bne.s 304c <resourceNameFromNum+0x1c>
    3044:	|  |   move.l #93028,d0
    304a:	+--|-- bra.s 3074 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    304c:	|  \-> move.l 1b1b4 <numResourceNames>,d0
    3052:	|      cmp.l 4(sp),d0
    3056:	|  /-- ble.s 306e <resourceNameFromNum+0x3e>
    3058:	|  |   move.l 1b16c <allResourceNames>,d1
    305e:	|  |   move.l 4(sp),d0
    3062:	|  |   add.l d0,d0
    3064:	|  |   add.l d0,d0
    3066:	|  |   movea.l d1,a0
    3068:	|  |   adda.l d0,a0
    306a:	|  |   move.l (a0),d0
    306c:	+--|-- bra.s 3074 <resourceNameFromNum+0x44>
	return "Unknown resource";
    306e:	|  \-> move.l #93037,d0
    3074:	\----> rts

00003076 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    3076:	          lea -44(sp),sp
    307a:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    307e:	          move.l #320,1b12c <winWidth>
    winHeight = 256;
    3088:	          move.l #256,1b130 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    3092:	          tst.l 60(sp)
    3096:	      /-- bne.s 30ae <main_sludge+0x38>
		bundleFolder = copyString("game/");
    3098:	      |   pea 16b7e <PutChar+0x608>
    309e:	      |   jsr b8 <copyString>
    30a4:	      |   addq.l #4,sp
    30a6:	      |   move.l d0,1b144 <bundleFolder>
    30ac:	   /--|-- bra.s 30c4 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    30ae:	   |  \-> movea.l 64(sp),a0
    30b2:	   |      move.l (a0),d0
    30b4:	   |      move.l d0,-(sp)
    30b6:	   |      jsr b8 <copyString>
    30bc:	   |      addq.l #4,sp
    30be:	   |      move.l d0,1b144 <bundleFolder>
	}
    
	int lastSlash = -1;
    30c4:	   \----> moveq #-1,d0
    30c6:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    30ca:	          clr.l 44(sp)
    30ce:	   /----- bra.s 30f0 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    30d0:	/--|----> move.l 1b144 <bundleFolder>,d1
    30d6:	|  |      move.l 44(sp),d0
    30da:	|  |      movea.l d1,a0
    30dc:	|  |      adda.l d0,a0
    30de:	|  |      move.b (a0),d0
    30e0:	|  |      cmpi.b #47,d0
    30e4:	|  |  /-- bne.s 30ec <main_sludge+0x76>
    30e6:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    30ec:	|  |  \-> addq.l #1,44(sp)
    30f0:	|  \----> move.l 1b144 <bundleFolder>,d1
    30f6:	|         move.l 44(sp),d0
    30fa:	|         movea.l d1,a0
    30fc:	|         adda.l d0,a0
    30fe:	|         move.b (a0),d0
    3100:	\-------- bne.s 30d0 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    3102:	          move.l 1b144 <bundleFolder>,d0
    3108:	          move.l 48(sp),d1
    310c:	          addq.l #1,d1
    310e:	          movea.l d0,a0
    3110:	          adda.l d1,a0
    3112:	          clr.b (a0)

	if (argc > 1) {
    3114:	          moveq #1,d0
    3116:	          cmp.l 60(sp),d0
    311a:	      /-- bge.s 3136 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    311c:	      |   move.l 60(sp),d0
    3120:	      |   addi.l #1073741823,d0
    3126:	      |   add.l d0,d0
    3128:	      |   add.l d0,d0
    312a:	      |   movea.l 64(sp),a0
    312e:	      |   adda.l d0,a0
    3130:	      |   move.l (a0),52(sp)
    3134:	   /--|-- bra.s 3190 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3136:	   |  \-> move.l 1b144 <bundleFolder>,d0
    313c:	   |      pea 16b84 <PutChar+0x60e>
    3142:	   |      move.l d0,-(sp)
    3144:	   |      jsr 12c60 <joinStrings>
    314a:	   |      addq.l #8,sp
    314c:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    3150:	   |      move.l 52(sp),-(sp)
    3154:	   |      jsr 12b5a <fileExists>
    315a:	   |      addq.l #4,sp
    315c:	   |      tst.b d0
    315e:	   +----- bne.s 3190 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    3160:	   |      move.l 52(sp),40(sp)
    3166:	   |      move.l 1b1d8 <SysBase>,d0
    316c:	   |      movea.l d0,a6
    316e:	   |      movea.l 40(sp),a1
    3172:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3176:	   |      move.l 1b144 <bundleFolder>,d0
    317c:	   |      pea 16b91 <PutChar+0x61b>
    3182:	   |      move.l d0,-(sp)
    3184:	   |      jsr 12c60 <joinStrings>
    318a:	   |      addq.l #8,sp
    318c:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    3190:	   \----> pea 16b9a <PutChar+0x624>
    3196:	          jsr 15c26 <KPrintF>
    319c:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    319e:	          move.l 52(sp),-(sp)
    31a2:	          jsr 12b5a <fileExists>
    31a8:	          addq.l #4,sp
    31aa:	          tst.b d0
    31ac:	      /-- bne.s 3204 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    31ae:	      |   move.l 1b1e0 <DOSBase>,d0
    31b4:	      |   movea.l d0,a6
    31b6:	      |   jsr -60(a6)
    31ba:	      |   move.l d0,28(sp)
    31be:	      |   move.l 28(sp),d0
    31c2:	      |   move.l d0,24(sp)
    31c6:	      |   move.l #93082,20(sp)
    31ce:	      |   moveq #21,d0
    31d0:	      |   move.l d0,16(sp)
    31d4:	      |   move.l 1b1e0 <DOSBase>,d0
    31da:	      |   movea.l d0,a6
    31dc:	      |   move.l 24(sp),d1
    31e0:	      |   move.l 20(sp),d2
    31e4:	      |   move.l 16(sp),d3
    31e8:	      |   jsr -48(a6)
    31ec:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    31f0:	      |   pea 16b9a <PutChar+0x624>
    31f6:	      |   jsr 15c26 <KPrintF>
    31fc:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    31fe:	      |   moveq #0,d0
    3200:	/-----|-- bra.w 33fc <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    3204:	|     \-> pea 16bb0 <PutChar+0x63a>
    320a:	|         jsr 15c26 <KPrintF>
    3210:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    3212:	|         move.l 52(sp),-(sp)
    3216:	|         jsr 3406 <setGameFilePath>
    321c:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    321e:	|         move.l 52(sp),-(sp)
    3222:	|         jsr 49b4 <initSludge>
    3228:	|         addq.l #4,sp
    322a:	|         tst.w d0
    322c:	|     /-- bne.s 3234 <main_sludge+0x1be>
    322e:	|     |   moveq #0,d0
    3230:	+-----|-- bra.w 33fc <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    3234:	|     \-> move.l 1b12c <winWidth>,d0
    323a:	|         cmpi.l #320,d0
    3240:	|     /-- bne.s 3250 <main_sludge+0x1da>
    3242:	|     |   move.l 1b130 <winHeight>,d0
    3248:	|     |   cmpi.l #256,d0
    324e:	|  /--|-- beq.s 3272 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    3250:	|  |  \-> pea 16bc1 <PutChar+0x64b>
    3256:	|  |      jsr 15c26 <KPrintF>
    325c:	|  |      addq.l #4,sp
		winWidth = 320;
    325e:	|  |      move.l #320,1b12c <winWidth>
		winHeight = 256;
    3268:	|  |      move.l #256,1b130 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    3272:	|  \----> pea 16c3e <PutChar+0x6c8>
    3278:	|         jsr 15c26 <KPrintF>
    327e:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    3280:	|         move.l 1b130 <winHeight>,d0
    3286:	|         move.l d0,d1
    3288:	|         move.l 1b12c <winWidth>,d0
    328e:	|         move.l d1,-(sp)
    3290:	|         move.l d0,-(sp)
    3292:	|         jsr c40a <resizeBackdrop>
    3298:	|         addq.l #8,sp
    329a:	|         tst.w d0
    329c:	|     /-- bne.s 32b2 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    329e:	|     |   pea 16c51 <PutChar+0x6db>
    32a4:	|     |   jsr 15c26 <KPrintF>
    32aa:	|     |   addq.l #4,sp
		return FALSE;
    32ac:	|     |   moveq #0,d0
    32ae:	+-----|-- bra.w 33fc <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    32b2:	|     \-> pea 16c77 <PutChar+0x701>
    32b8:	|         jsr 15c26 <KPrintF>
    32be:	|         addq.l #4,sp
	if (! initPeople ())
    32c0:	|         jsr 998e <initPeople>
    32c6:	|         tst.w d0
    32c8:	|     /-- bne.s 32de <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    32ca:	|     |   pea 16c84 <PutChar+0x70e>
    32d0:	|     |   jsr 15c26 <KPrintF>
    32d6:	|     |   addq.l #4,sp
		return FALSE;
    32d8:	|     |   moveq #0,d0
    32da:	+-----|-- bra.w 33fc <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    32de:	|     \-> pea 16ca5 <PutChar+0x72f>
    32e4:	|         jsr 15c26 <KPrintF>
    32ea:	|         addq.l #4,sp
	if (! initFloor ())
    32ec:	|         jsr 14fdc <initFloor>
    32f2:	|         tst.w d0
    32f4:	|     /-- bne.s 330a <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    32f6:	|     |   pea 16cb1 <PutChar+0x73b>
    32fc:	|     |   jsr 15c26 <KPrintF>
    3302:	|     |   addq.l #4,sp
		
		return FALSE;
    3304:	|     |   moveq #0,d0
    3306:	+-----|-- bra.w 33fc <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    330a:	|     \-> pea 16cd1 <PutChar+0x75b>
    3310:	|         jsr 15c26 <KPrintF>
    3316:	|         addq.l #4,sp
	if (! initObjectTypes ())
    3318:	|         jsr c5c6 <initObjectTypes>
    331e:	|         tst.w d0
    3320:	|     /-- bne.s 3336 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    3322:	|     |   pea 16ce2 <PutChar+0x76c>
    3328:	|     |   jsr 15c26 <KPrintF>
    332e:	|     |   addq.l #4,sp
		return FALSE;
    3330:	|     |   moveq #0,d0
    3332:	+-----|-- bra.w 33fc <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    3336:	|     \-> pea 16d08 <PutChar+0x792>
    333c:	|         jsr 15c26 <KPrintF>
    3342:	|         addq.l #4,sp
	initSpeech ();
    3344:	|         jsr 6d96 <initSpeech>
	KPrintF("Init status bar\n");
    334a:	|         pea 16d15 <PutChar+0x79f>
    3350:	|         jsr 15c26 <KPrintF>
    3356:	|         addq.l #4,sp
	initStatusBar ();
    3358:	|         jsr 685a <initStatusBar>

	KPrintF("Get numbered string\n");
    335e:	|         pea 16d26 <PutChar+0x7b0>
    3364:	|         jsr 15c26 <KPrintF>
    336a:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    336c:	|         pea 1 <_start+0x1>
    3370:	|         jsr 5b78 <getNumberedString>
    3376:	|         addq.l #4,sp
    3378:	|         move.l d0,1b13c <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    337e:	|         pea 16d3b <PutChar+0x7c5>
    3384:	|         jsr 15c26 <KPrintF>
    338a:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    338c:	|         move.l 1b1a8 <noStack>,d0
    3392:	|         pea 1 <_start+0x1>
    3396:	|         move.l d0,-(sp)
    3398:	|         clr.l -(sp)
    339a:	|         clr.l -(sp)
    339c:	|         clr.l -(sp)
    339e:	|         jsr 5a00 <startNewFunctionNum>
    33a4:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    33a8:	|         pea 16d53 <PutChar+0x7dd>
    33ae:	|         jsr 15c26 <KPrintF>
    33b4:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    33b6:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    33be:	|         clr.l 1b148 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    33c4:	|     /-- bra.s 33de <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    33c6:	|  /--|-> jsr 5990 <sludgeDisplay>
		CsiCheckInput();
    33cc:	|  |  |   jsr bf3a <CsiCheckInput>
		handleInput();
    33d2:	|  |  |   jsr 474e <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    33d8:	|  |  |   jsr 15b5a <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    33de:	|  |  \-> move.l 1b148 <weAreDoneSoQuit>,d0
    33e4:	|  \----- beq.s 33c6 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    33e6:	|         move.l 52(sp),32(sp)
    33ec:	|         move.l 1b1d8 <SysBase>,d0
    33f2:	|         movea.l d0,a6
    33f4:	|         movea.l 32(sp),a1
    33f8:	|         jsr -690(a6)
}
    33fc:	\-------> movem.l (sp)+,d2-d3/a6
    3400:	          lea 44(sp),sp
    3404:	          rts

00003406 <setGameFilePath>:

void setGameFilePath (char * f) {
    3406:	          lea -1104(sp),sp
    340a:	          move.l a6,-(sp)
    340c:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    340e:	          move.l #1112,d0
    3414:	          add.l sp,d0
    3416:	          addi.l #-1102,d0
    341c:	          move.l d0,1100(sp)
    3420:	          move.l #998,1096(sp)
    3428:	          move.l 1b1e0 <DOSBase>,d0
    342e:	          movea.l d0,a6
    3430:	          move.l 1100(sp),d1
    3434:	          move.l 1096(sp),d2
    3438:	          jsr -564(a6)
    343c:	          move.w d0,1094(sp)
    3440:	          move.w 1094(sp),d0
    3444:	      /-- bne.s 3454 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    3446:	      |   pea 16d66 <PutChar+0x7f0>
    344c:	      |   jsr 15c26 <KPrintF>
    3452:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    3454:	      \-> moveq #-1,d0
    3456:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    345a:	          clr.l 1104(sp)
    345e:	   /----- bra.s 347c <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    3460:	/--|----> move.l 1104(sp),d0
    3464:	|  |      movea.l 1116(sp),a0
    3468:	|  |      adda.l d0,a0
    346a:	|  |      move.b (a0),d0
    346c:	|  |      cmpi.b #47,d0
    3470:	|  |  /-- bne.s 3478 <setGameFilePath+0x72>
    3472:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    3478:	|  |  \-> addq.l #1,1104(sp)
    347c:	|  \----> move.l 1104(sp),d0
    3480:	|         movea.l 1116(sp),a0
    3484:	|         adda.l d0,a0
    3486:	|         move.b (a0),d0
    3488:	\-------- bne.s 3460 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    348a:	          moveq #-1,d0
    348c:	          cmp.l 1108(sp),d0
    3490:	   /----- beq.s 350a <setGameFilePath+0x104>
		f[got] = 0;	
    3492:	   |      move.l 1108(sp),d0
    3496:	   |      movea.l 1116(sp),a0
    349a:	   |      adda.l d0,a0
    349c:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    349e:	   |      move.l 1116(sp),1090(sp)
    34a4:	   |      moveq #-2,d0
    34a6:	   |      move.l d0,1086(sp)
    34aa:	   |      move.l 1b1e0 <DOSBase>,d0
    34b0:	   |      movea.l d0,a6
    34b2:	   |      move.l 1090(sp),d1
    34b6:	   |      move.l 1086(sp),d2
    34ba:	   |      jsr -84(a6)
    34be:	   |      move.l d0,1082(sp)
    34c2:	   |      move.l 1082(sp),d0
    34c6:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    34ca:	   |      move.l 1078(sp),1074(sp)
    34d0:	   |      move.l 1b1e0 <DOSBase>,d0
    34d6:	   |      movea.l d0,a6
    34d8:	   |      move.l 1074(sp),d1
    34dc:	   |      jsr -126(a6)
    34e0:	   |      move.l d0,1070(sp)
    34e4:	   |      move.l 1070(sp),d0
    34e8:	   |  /-- bne.s 34fc <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    34ea:	   |  |   move.l 1116(sp),-(sp)
    34ee:	   |  |   pea 16d8c <PutChar+0x816>
    34f4:	   |  |   jsr 15c26 <KPrintF>
    34fa:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    34fc:	   |  \-> move.l 1108(sp),d0
    3500:	   |      movea.l 1116(sp),a0
    3504:	   |      adda.l d0,a0
    3506:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    350a:	   \----> move.l #400,1066(sp)
    3512:	          clr.l 1062(sp)
    3516:	          move.l 1b1d8 <SysBase>,d0
    351c:	          movea.l d0,a6
    351e:	          move.l 1066(sp),d0
    3522:	          move.l 1062(sp),d1
    3526:	          jsr -684(a6)
    352a:	          move.l d0,1058(sp)
    352e:	          move.l 1058(sp),d0
    3532:	          move.l d0,1b140 <gamePath>
	if (gamePath==0) {
    3538:	          move.l 1b140 <gamePath>,d0
    353e:	      /-- bne.s 3552 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    3540:	      |   pea 16dbf <PutChar+0x849>
    3546:	      |   jsr 15c26 <KPrintF>
    354c:	      |   addq.l #4,sp
    354e:	   /--|-- bra.w 363a <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    3552:	   |  \-> move.l 1b140 <gamePath>,1054(sp)
    355a:	   |      moveq #-2,d0
    355c:	   |      move.l d0,1050(sp)
    3560:	   |      move.l 1b1e0 <DOSBase>,d0
    3566:	   |      movea.l d0,a6
    3568:	   |      move.l 1054(sp),d1
    356c:	   |      move.l 1050(sp),d2
    3570:	   |      jsr -84(a6)
    3574:	   |      move.l d0,1046(sp)
    3578:	   |      move.l 1046(sp),d0
    357c:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    3580:	   |      move.l 1042(sp),1038(sp)
    3586:	   |      move.l 1b1e0 <DOSBase>,d0
    358c:	   |      movea.l d0,a6
    358e:	   |      move.l 1038(sp),d1
    3592:	   |      jsr -126(a6)
    3596:	   |      move.l d0,1034(sp)
    359a:	   |      move.l 1034(sp),d0
    359e:	   |  /-- bne.s 35ae <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    35a0:	   |  |   pea 16dfa <PutChar+0x884>
    35a6:	   |  |   jsr 15c26 <KPrintF>
    35ac:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    35ae:	   |  \-> move.l #1112,d0
    35b4:	   |      add.l sp,d0
    35b6:	   |      addi.l #-1102,d0
    35bc:	   |      move.l d0,1030(sp)
    35c0:	   |      moveq #-2,d0
    35c2:	   |      move.l d0,1026(sp)
    35c6:	   |      move.l 1b1e0 <DOSBase>,d0
    35cc:	   |      movea.l d0,a6
    35ce:	   |      move.l 1030(sp),d1
    35d2:	   |      move.l 1026(sp),d2
    35d6:	   |      jsr -84(a6)
    35da:	   |      move.l d0,1022(sp)
    35de:	   |      move.l 1022(sp),d0
    35e2:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    35e6:	   |      move.l 1042(sp),1018(sp)
    35ec:	   |      move.l 1b1e0 <DOSBase>,d0
    35f2:	   |      movea.l d0,a6
    35f4:	   |      move.l 1018(sp),d1
    35f8:	   |      jsr -126(a6)
    35fc:	   |      move.l d0,1014(sp)
    3600:	   |      move.l 1014(sp),d0
    3604:	   |  /-- bne.s 361a <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    3606:	   |  |   moveq #10,d0
    3608:	   |  |   add.l sp,d0
    360a:	   |  |   move.l d0,-(sp)
    360c:	   |  |   pea 16e26 <PutChar+0x8b0>
    3612:	   |  |   jsr 15c26 <KPrintF>
    3618:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    361a:	   |  \-> move.l 1b140 <gamePath>,d0
    3620:	   +----- beq.s 363a <setGameFilePath+0x234>
    3622:	   |      move.l 1b140 <gamePath>,1010(sp)
    362a:	   |      move.l 1b1d8 <SysBase>,d0
    3630:	   |      movea.l d0,a6
    3632:	   |      movea.l 1010(sp),a1
    3636:	   |      jsr -690(a6)
}
    363a:	   \----> move.l (sp)+,d2
    363c:	          movea.l (sp)+,a6
    363e:	          lea 1104(sp),sp
    3642:	          rts

00003644 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    3644:	/-------> lea -16(sp),sp
    3648:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    364a:	|         move.l 24(sp),-(sp)
    364e:	|         jsr 5772 <pauseFunction>
    3654:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    3656:	|     /-- bra.s 3668 <abortFunction+0x24>
    3658:	|  /--|-> moveq #24,d0
    365a:	|  |  |   add.l 24(sp),d0
    365e:	|  |  |   move.l d0,-(sp)
    3660:	|  |  |   jsr 140b8 <trimStack>
    3666:	|  |  |   addq.l #4,sp
    3668:	|  |  \-> movea.l 24(sp),a0
    366c:	|  |      move.l 24(a0),d0
    3670:	|  \----- bne.s 3658 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    3672:	|         movea.l 24(sp),a0
    3676:	|         move.l 4(a0),12(sp)
    367c:	|         move.l 1b1d8 <SysBase>,d0
    3682:	|         movea.l d0,a6
    3684:	|         movea.l 12(sp),a1
    3688:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    368c:	|         clr.l 16(sp)
    3690:	|     /-- bra.s 36b0 <abortFunction+0x6c>
    3692:	|  /--|-> movea.l 24(sp),a0
    3696:	|  |  |   move.l 20(a0),d1
    369a:	|  |  |   move.l 16(sp),d0
    369e:	|  |  |   lsl.l #3,d0
    36a0:	|  |  |   add.l d1,d0
    36a2:	|  |  |   move.l d0,-(sp)
    36a4:	|  |  |   jsr 13982 <unlinkVar>
    36aa:	|  |  |   addq.l #4,sp
    36ac:	|  |  |   addq.l #1,16(sp)
    36b0:	|  |  \-> movea.l 24(sp),a0
    36b4:	|  |      move.l 8(a0),d0
    36b8:	|  |      cmp.l 16(sp),d0
    36bc:	|  \----- bgt.s 3692 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    36be:	|         movea.l 24(sp),a0
    36c2:	|         move.l 20(a0),8(sp)
    36c8:	|         move.l 1b1d8 <SysBase>,d0
    36ce:	|         movea.l d0,a6
    36d0:	|         movea.l 8(sp),a1
    36d4:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    36d8:	|         moveq #28,d0
    36da:	|         add.l 24(sp),d0
    36de:	|         move.l d0,-(sp)
    36e0:	|         jsr 13982 <unlinkVar>
    36e6:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    36e8:	|         movea.l 24(sp),a0
    36ec:	|         move.l 40(a0),d0
    36f0:	|     /-- beq.s 3702 <abortFunction+0xbe>
    36f2:	|     |   movea.l 24(sp),a0
    36f6:	|     |   move.l 40(a0),d0
    36fa:	|     |   move.l d0,-(sp)
    36fc:	\-----|-- jsr 3644 <abortFunction>(pc)
    3700:	      |   addq.l #4,sp
	FreeVec(fun);
    3702:	      \-> move.l 24(sp),4(sp)
    3708:	          move.l 1b1d8 <SysBase>,d0
    370e:	          movea.l d0,a6
    3710:	          movea.l 4(sp),a1
    3714:	          jsr -690(a6)
	fun = NULL;
    3718:	          clr.l 24(sp)
}
    371c:	          nop
    371e:	          movea.l (sp)+,a6
    3720:	          lea 16(sp),sp
    3724:	          rts

00003726 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    3726:	          subq.l #8,sp
	int n = 0;
    3728:	          clr.l 4(sp)
	*killedMyself = FALSE;
    372c:	          movea.l 20(sp),a0
    3730:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    3732:	          move.l 1b170 <allRunningFunctions>,(sp)
	while (fun) {
    3738:	   /----- bra.s 3766 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    373a:	/--|----> movea.l (sp),a0
    373c:	|  |      move.l (a0),d0
    373e:	|  |      cmp.l 12(sp),d0
    3742:	|  |  /-- bne.s 3760 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    3744:	|  |  |   movea.l (sp),a0
    3746:	|  |  |   move.w #1,54(a0)
			n++;
    374c:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    3750:	|  |  |   move.l (sp),d0
    3752:	|  |  |   cmp.l 16(sp),d0
    3756:	|  |  +-- bne.s 3760 <cancelAFunction+0x3a>
    3758:	|  |  |   movea.l 20(sp),a0
    375c:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    3760:	|  |  \-> movea.l (sp),a0
    3762:	|  |      move.l 44(a0),(sp)
	while (fun) {
    3766:	|  \----> tst.l (sp)
    3768:	\-------- bne.s 373a <cancelAFunction+0x14>
	}
	return n;
    376a:	          move.l 4(sp),d0
}
    376e:	          addq.l #8,sp
    3770:	          rts

00003772 <completeTimers>:


void completeTimers () {
    3772:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    3774:	          move.l 1b170 <allRunningFunctions>,(sp)

	while (thisFunction) {
    377a:	   /----- bra.s 3790 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    377c:	/--|----> movea.l (sp),a0
    377e:	|  |      move.b 56(a0),d0
    3782:	|  |  /-- bne.s 378a <completeTimers+0x18>
    3784:	|  |  |   movea.l (sp),a0
    3786:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    378a:	|  |  \-> movea.l (sp),a0
    378c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    3790:	|  \----> tst.l (sp)
    3792:	\-------- bne.s 377c <completeTimers+0xa>
	}
}
    3794:	          nop
    3796:	          nop
    3798:	          addq.l #4,sp
    379a:	          rts

0000379c <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    379c:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    37a0:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    37a6:	                                                             movea.l 80(sp),a0
    37aa:	                                                             move.w 54(a0),d0
    37ae:	/----------------------------------------------------------- beq.w 463c <continueFunction+0xea0>
		abortFunction (fun);
    37b2:	|                                                            move.l 80(sp),-(sp)
    37b6:	|                                                            jsr 3644 <abortFunction>
    37bc:	|                                                            addq.l #4,sp
		return TRUE;
    37be:	|                                                            moveq #1,d0
    37c0:	|  /-------------------------------------------------------- bra.w 4646 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    37c4:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    37ca:	|  |  |                                                      movea.l 80(sp),a0
    37ce:	|  |  |                                                      move.l 4(a0),d1
    37d2:	|  |  |                                                      movea.l 80(sp),a0
    37d6:	|  |  |                                                      move.l 36(a0),d0
    37da:	|  |  |                                                      lsl.l #3,d0
    37dc:	|  |  |                                                      movea.l d1,a0
    37de:	|  |  |                                                      adda.l d0,a0
    37e0:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    37e6:	|  |  |                                                      movea.l 80(sp),a0
    37ea:	|  |  |                                                      move.l 4(a0),d1
    37ee:	|  |  |                                                      movea.l 80(sp),a0
    37f2:	|  |  |                                                      move.l 36(a0),d0
    37f6:	|  |  |                                                      lsl.l #3,d0
    37f8:	|  |  |                                                      movea.l d1,a0
    37fa:	|  |  |                                                      adda.l d0,a0
    37fc:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    3800:	|  |  |                                                      moveq #41,d0
    3802:	|  |  |                                                      cmp.l 64(sp),d0
    3806:	|  |  |  /-------------------------------------------------- bcs.w 45f0 <continueFunction+0xe54>
    380a:	|  |  |  |                                                   move.l 64(sp),d0
    380e:	|  |  |  |                                                   add.l d0,d0
    3810:	|  |  |  |                                                   movea.l d0,a0
    3812:	|  |  |  |                                                   adda.l #14366,a0
    3818:	|  |  |  |                                                   move.w (a0),d0
    381a:	|  |  |  |                                                   jmp (381e <continueFunction+0x82>,pc,d0.w)
    381e:	|  |  |  |                                                   bset d6,(a2)
    3820:	|  |  |  |                                                   ori.w #2670,(a4)
    3824:	|  |  |  |                                                   eori.w #2416,d6
    3828:	|  |  |  |                                                   bchg d4,d2
    382a:	|  |  |  |                                                   bclr d4,(a4)+
    382c:	|  |  |  |                                                   andi.l #181013194,d4
    3832:	|  |  |  |                                                   .short 0x0aca
    3834:	|  |  |  |                                                   .short 0x0aca
    3836:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    383e:	|  |  |  |                                                   .short 0x0aca
    3840:	|  |  |  |                                                   andi.w #906,-(a4)
    3844:	|  |  |  |                                                   bchg d1,196(a2)
    3848:	|  |  |  |                                                   bset d1,580(a4)
    384c:	|  |  |  |                                                   bclr d1,2576(a2)
    3850:	|  |  |  |                                                   andi.b #-56,2762(a2)
    3856:	|  |  |  |                                                   .short 0x0aca
    3858:	|  |  |  |                                                   eori.l #63572682,d0
    385e:	|  |  |  |                                                   .short 0x0aca
    3860:	|  |  |  |                                                   bchg d3,-(a2)
    3862:	|  |  |  |                                                   bchg #-36,(a2)
    3866:	|  |  |  |                                                   .short 0x08cc
    3868:	|  |  |  |                                                   addi.b #14,1038(a0)
    386e:	|  |  |  |                                                   .short 0x040e
    3870:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    3874:	|  |  |  |                                                   ori.w #8232,(a0)
    3878:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    387e:	|  |  |  |                                                   ori.w #12136,(a0)
    3882:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    3888:	|  |  |  |                                                   ori.w #12328,(a0)
    388c:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    3892:	|  |  |  |                                                   add.l 44(sp),d1
    3896:	|  |  |  |                                                   moveq #28,d0
    3898:	|  |  |  |                                                   add.l 80(sp),d0
    389c:	|  |  |  |                                                   move.l d1,-(sp)
    389e:	|  |  |  |                                                   move.l d0,-(sp)
    38a0:	|  |  |  |                                                   jsr 13bee <copyVariable>
    38a6:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    38a8:	|  |  |  |                                                   move.l 80(sp),-(sp)
    38ac:	|  |  |  |                                                   jsr 464c <finishFunction>
    38b2:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    38b4:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    38ba:	|  |  |  |                                                   move.l 80(sp),-(sp)
    38be:	|  |  |  |                                                   jsr 57b4 <restartFunction>
    38c4:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    38c6:	|  |  |  |  /----------------------------------------------- bra.w 4624 <continueFunction+0xe88>
				finishFunction (fun);
    38ca:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    38ce:	|  |  |  |  |                                                jsr 464c <finishFunction>
    38d4:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    38d6:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    38da:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    38de:	|  |  |  |  +----------------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    38e2:	|  |  |  |  |                                                movea.l 80(sp),a0
    38e6:	|  |  |  |  |                                                move.l 28(a0),d0
    38ea:	|  |  |  |  |                                                moveq #2,d1
    38ec:	|  |  |  |  |                                                cmp.l d0,d1
    38ee:	|  |  |  |  |                                            /-- beq.s 38fa <continueFunction+0x15e>
    38f0:	|  |  |  |  |                                            |   moveq #4,d1
    38f2:	|  |  |  |  |                                            |   cmp.l d0,d1
    38f4:	|  |  |  |  |                                         /--|-- beq.s 3948 <continueFunction+0x1ac>
    38f6:	|  |  |  |  |                                /--------|--|-- bra.w 3a30 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    38fa:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    38fe:	|  |  |  |  |                                |        |      jsr 5772 <pauseFunction>
    3904:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    3906:	|  |  |  |  |                                |        |      moveq #24,d0
    3908:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    390c:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    3910:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    3914:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    3918:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    391a:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    391e:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    3922:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    3924:	|  |  |  |  |                                |        |      jsr 5a00 <startNewFunctionNum>
    392a:	|  |  |  |  |                                |        |      lea 20(sp),sp
    392e:	|  |  |  |  |                                |        |      tst.l d0
    3930:	|  |  |  |  |                                |        |  /-- bne.s 3938 <continueFunction+0x19c>
    3932:	|  |  |  |  |                                |        |  |   clr.w d0
    3934:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 4646 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    3938:	|  |  |  |  |                                |        |  \-> move.l 1b170 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    3940:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    3944:	|  |  |  |  |                                |  /-----|----- bra.w 3a44 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    3948:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    394c:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    3950:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    3954:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    3958:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    395a:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    395c:	|  |  |  |  |                                |  |            jsr 12416 <callBuiltIn>
    3962:	|  |  |  |  |                                |  |            lea 12(sp),sp
    3966:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    396a:	|  |  |  |  |                                |  |            moveq #5,d0
    396c:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    3970:	|  |  |  |  |                                |  |  /-------- bcs.w 3a2c <continueFunction+0x290>
    3974:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    3978:	|  |  |  |  |                                |  |  |         add.l d0,d0
    397a:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    397c:	|  |  |  |  |                                |  |  |         adda.l #14728,a0
    3982:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    3984:	|  |  |  |  |                                |  |  |         jmp (3988 <continueFunction+0x1ec>,pc,d0.w)
    3988:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    398e:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    3992:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    3998:	|  |  |  |  |                                |  |  |     /-- ble.s 39c8 <continueFunction+0x22c>
    399a:	|  |  |  |  |                                |  |  |     |   jsr 15c26 <KPrintF>
    39a0:	|  |  |  |  |                                |  |  |     |   addq.l #4,sp
							return FALSE;
    39a2:	|  |  |  |  |                                |  |  |     |   clr.w d0
    39a4:	|  +--|--|--|--------------------------------|--|--|-----|-- bra.w 4646 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    39a8:	|  |  |  |  |                                |  |  |     |   move.l 80(sp),-(sp)
    39ac:	|  |  |  |  |                                |  |  |     |   jsr 5772 <pauseFunction>
    39b2:	|  |  |  |  |                                |  |  |     |   addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    39b4:	|  |  |  |  |                                |  |  |     |   clr.w 74(sp)
						break;
    39b8:	|  |  |  |  |                                |  |  |  /--|-- bra.s 3a2e <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    39ba:	|  |  |  |  |                                |  |  |  |  |   clr.w 74(sp)
						advanceNow = FALSE;
    39be:	|  |  |  |  |                                |  |  |  |  |   clr.w 72(sp)
						break;
    39c2:	|  |  |  |  |                                |  |  |  +--|-- bra.s 3a2e <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    39c4:	|  |  |  |  |                                |  |  |  |  |   movea.l 80(sp),a0
    39c8:	|  |  |  |  |                                |  |  |  |  \-> move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    39ce:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    39d0:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    39d4:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    39d8:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    39dc:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    39de:	|  |  |  |  |                                |  |  |  |      jsr 14026 <setVariable>
    39e4:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    39e8:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    39ec:	|  |  |  |  |                                |  |  |  |      jsr 5772 <pauseFunction>
    39f2:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    39f4:	|  |  |  |  |                                |  |  |  |      move.l 1b1a8 <noStack>,d1
    39fa:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    39fe:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3a00:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    3a02:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    3a06:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    3a08:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    3a0a:	|  |  |  |  |                                |  |  |  |      jsr 5a00 <startNewFunctionNum>
    3a10:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    3a14:	|  |  |  |  |                                |  |  |  |      tst.l d0
    3a16:	|  |  |  |  |                                |  |  |  |  /-- bne.s 3a1e <continueFunction+0x282>
    3a18:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    3a1a:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 4646 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    3a1e:	|  |  |  |  |                                |  |  |  |  \-> move.l 1b170 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    3a26:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    3a2a:	|  |  |  |  |                                |  |  |  +----- bra.s 3a2e <continueFunction+0x292>

						default:
						break;
    3a2c:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    3a2e:	|  |  |  |  |                                |  +-----\----X bra.s 3a44 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    3a30:	|  |  |  |  |                                \--|----------> pea 16f79 <PutChar+0xa03>
    3a36:	|  |  |  |  |                                   |            jsr 15c26 <KPrintF>
    3a3c:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    3a3e:	|  |  |  |  |                                   |            clr.w d0
    3a40:	|  +--|--|--|-----------------------------------|----------- bra.w 4646 <continueFunction+0xeaa>
			}
			break;
    3a44:	|  |  |  |  +-----------------------------------\----------X bra.w 4624 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    3a48:	|  |  |  |  |                                                moveq #28,d0
    3a4a:	|  |  |  |  |                                                add.l 80(sp),d0
    3a4e:	|  |  |  |  |                                                clr.l -(sp)
    3a50:	|  |  |  |  |                                                clr.l -(sp)
    3a52:	|  |  |  |  |                                                move.l d0,-(sp)
    3a54:	|  |  |  |  |                                                jsr 14026 <setVariable>
    3a5a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3a5e:	|  |  |  |  +----------------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    3a62:	|  |  |  |  |                                                move.l 68(sp),d1
    3a66:	|  |  |  |  |                                                moveq #28,d0
    3a68:	|  |  |  |  |                                                add.l 80(sp),d0
    3a6c:	|  |  |  |  |                                                move.l d1,-(sp)
    3a6e:	|  |  |  |  |                                                pea 5 <_start+0x5>
    3a72:	|  |  |  |  |                                                move.l d0,-(sp)
    3a74:	|  |  |  |  |                                                jsr 14026 <setVariable>
    3a7a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3a7e:	|  |  |  |  +----------------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    3a82:	|  |  |  |  |                                                move.l 68(sp),d1
    3a86:	|  |  |  |  |                                                moveq #28,d0
    3a88:	|  |  |  |  |                                                add.l 80(sp),d0
    3a8c:	|  |  |  |  |                                                move.l d1,-(sp)
    3a8e:	|  |  |  |  |                                                pea 1 <_start+0x1>
    3a92:	|  |  |  |  |                                                move.l d0,-(sp)
    3a94:	|  |  |  |  |                                                jsr 14026 <setVariable>
    3a9a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    3a9e:	|  |  |  |  +----------------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    3aa2:	|  |  |  |  |                                                moveq #28,d0
    3aa4:	|  |  |  |  |                                                add.l 80(sp),d0
    3aa8:	|  |  |  |  |                                                movea.l 80(sp),a0
    3aac:	|  |  |  |  |                                                movea.l 20(a0),a0
    3ab0:	|  |  |  |  |                                                move.l 68(sp),d1
    3ab4:	|  |  |  |  |                                                lsl.l #3,d1
    3ab6:	|  |  |  |  |                                                add.l a0,d1
    3ab8:	|  |  |  |  |                                                move.l d0,-(sp)
    3aba:	|  |  |  |  |                                                move.l d1,-(sp)
    3abc:	|  |  |  |  |                                                jsr 13bee <copyVariable>
    3ac2:	|  |  |  |  |                                                addq.l #8,sp
    3ac4:	|  |  |  |  |                                                tst.w d0
    3ac6:	|  |  |  |  |  /-------------------------------------------- bne.w 4602 <continueFunction+0xe66>
    3aca:	|  |  |  |  |  |                                             clr.w d0
    3acc:	|  +--|--|--|--|-------------------------------------------- bra.w 4646 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    3ad0:	|  |  |  |  |  |                                             moveq #28,d0
    3ad2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3ad6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3ad8:	|  |  |  |  |  |                                             jsr 13c74 <getBoolean>
    3ade:	|  |  |  |  |  |                                             addq.l #4,sp
    3ae0:	|  |  |  |  |  |                                             tst.w d0
    3ae2:	|  |  |  |  |  |                                      /----- beq.s 3afe <continueFunction+0x362>
    3ae4:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    3ae8:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    3aec:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    3aee:	|  |  |  |  |  |                                      |      jsr 13c74 <getBoolean>
    3af4:	|  |  |  |  |  |                                      |      addq.l #4,sp
    3af6:	|  |  |  |  |  |                                      |      tst.w d0
    3af8:	|  |  |  |  |  |                                      +----- beq.s 3afe <continueFunction+0x362>
    3afa:	|  |  |  |  |  |                                      |      moveq #1,d0
    3afc:	|  |  |  |  |  |                                      |  /-- bra.s 3b00 <continueFunction+0x364>
    3afe:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3b00:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3b02:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3b06:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b08:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3b0c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b0e:	|  |  |  |  |  |                                             jsr 14026 <setVariable>
    3b14:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3b18:	|  |  |  |  |  |                                             moveq #24,d0
    3b1a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b1e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b20:	|  |  |  |  |  |                                             jsr 140b8 <trimStack>
    3b26:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3b28:	|  |  |  |  +--|-------------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    3b2c:	|  |  |  |  |  |                                             moveq #28,d0
    3b2e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b32:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b34:	|  |  |  |  |  |                                             jsr 13c74 <getBoolean>
    3b3a:	|  |  |  |  |  |                                             addq.l #4,sp
    3b3c:	|  |  |  |  |  |                                             tst.w d0
    3b3e:	|  |  |  |  |  |                                         /-- bne.s 3b56 <continueFunction+0x3ba>
    3b40:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    3b44:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    3b48:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    3b4a:	|  |  |  |  |  |                                         |   jsr 13c74 <getBoolean>
    3b50:	|  |  |  |  |  |                                         |   addq.l #4,sp
    3b52:	|  |  |  |  |  |                                         |   tst.w d0
    3b54:	|  |  |  |  |  |                                      /--|-- beq.s 3b5a <continueFunction+0x3be>
    3b56:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    3b58:	|  |  |  |  |  |                                      |  /-- bra.s 3b5c <continueFunction+0x3c0>
    3b5a:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    3b5c:	|  |  |  |  |  |                                         \-> moveq #28,d1
    3b5e:	|  |  |  |  |  |                                             add.l 80(sp),d1
    3b62:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b64:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    3b68:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b6a:	|  |  |  |  |  |                                             jsr 14026 <setVariable>
    3b70:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    3b74:	|  |  |  |  |  |                                             moveq #24,d0
    3b76:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b7a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b7c:	|  |  |  |  |  |                                             jsr 140b8 <trimStack>
    3b82:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    3b84:	|  |  |  |  +--|-------------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    3b88:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3b8c:	|  |  |  |  |  |                                             moveq #28,d0
    3b8e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3b92:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3b94:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    3b98:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3b9a:	|  |  |  |  |  |                                             jsr 14026 <setVariable>
    3ba0:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3ba4:	|  |  |  |  +--|-------------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    3ba8:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3bac:	|  |  |  |  |  |                                             moveq #28,d0
    3bae:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3bb2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3bb4:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    3bb8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3bba:	|  |  |  |  |  |                                             jsr 14026 <setVariable>
    3bc0:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3bc4:	|  |  |  |  +--|-------------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    3bc8:	|  |  |  |  |  |                                             move.l 68(sp),d1
    3bcc:	|  |  |  |  |  |                                             moveq #28,d0
    3bce:	|  |  |  |  |  |                                             add.l 80(sp),d0
    3bd2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    3bd4:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    3bd8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    3bda:	|  |  |  |  |  |                                             jsr 14026 <setVariable>
    3be0:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    3be4:	|  |  |  |  +--|-------------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    3be8:	|  |  |  |  |  |                                             move.l 1b138 <dialogValue>,d0
    3bee:	|  |  |  |  |  |                                             moveq #1,d1
    3bf0:	|  |  |  |  |  |                                             cmp.l d0,d1
    3bf2:	|  |  |  |  |  |  /----------------------------------------- beq.w 4606 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    3bf6:	|  |  |  |  |  |  |                                          pea 16f8e <PutChar+0xa18>
    3bfc:	|  |  |  |  |  |  |                                          jsr 15c26 <KPrintF>
    3c02:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    3c04:	|  |  |  |  |  |  |                                          clr.w d0
    3c06:	|  +--|--|--|--|--|----------------------------------------- bra.w 4646 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    3c0a:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    3c0e:	|  |  |  |  |  |  |                                          moveq #28,d0
    3c10:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    3c14:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    3c16:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    3c18:	|  |  |  |  |  |  |                                          jsr 137b8 <loadStringToVar>
    3c1e:	|  |  |  |  |  |  |                                          addq.l #8,sp
    3c20:	|  |  |  |  |  |  |                                          tst.w d0
    3c22:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 460a <continueFunction+0xe6e>
					return FALSE;
    3c26:	|  |  |  |  |  |  |  |                                       clr.w d0
    3c28:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4646 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    3c2c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3c30:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3c34:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3c36:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    3c38:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3c3a:	|  |  |  |  |  |  |  |                                /----- beq.s 3c98 <continueFunction+0x4fc>
    3c3c:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    3c3e:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    3c40:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 3e2c <continueFunction+0x690>
    3c44:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    3c46:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 3c52 <continueFunction+0x4b6>
    3c48:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    3c4a:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    3c4c:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 3c98 <continueFunction+0x4fc>
    3c4e:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 3e2c <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    3c52:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    3c54:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    3c58:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 3c84 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    3c5a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    3c5c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3c60:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3c62:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    3c64:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3c66:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14026 <setVariable>
    3c6c:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    3c70:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    3c72:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    3c76:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    3c78:	|  |  |  |  |  |  |  |              |                 |  |   jsr 140b8 <trimStack>
    3c7e:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    3c80:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 3e42 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    3c84:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 16fcf <PutChar+0xa59>
    3c8a:	|  |  |  |  |  |  |  |              |  |              |      jsr 15c26 <KPrintF>
    3c90:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    3c92:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    3c94:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 4646 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3c98:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    3c9c:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3ca0:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    3ca4:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    3ca6:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3cbc <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    3ca8:	|  |  |  |  |  |  |  |              |  |                 |   pea 1700b <PutChar+0xa95>
    3cae:	|  |  |  |  |  |  |  |              |  |                 |   jsr 15c26 <KPrintF>
    3cb4:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    3cb6:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3cb8:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4646 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3cbc:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    3cbe:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3cc2:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3cc4:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    3cc8:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    3ccc:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    3cce:	|  |  |  |  |  |  |  |              |  |                     jsr 13734 <getValueType>
    3cd4:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    3cd8:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    3cda:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3ce2 <continueFunction+0x546>
    3cdc:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    3cde:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4646 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3ce2:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    3ce6:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    3cea:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    3cec:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    3cee:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    3cf0:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3d12 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    3cf2:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    3cf6:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    3cf8:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    3cfc:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    3d00:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    3d04:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    3d06:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3d08:	|  |  |  |  |  |  |  |              |  |                 |   jsr 133be <fastArrayGetByIndex>
    3d0e:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    3d10:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 3d32 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    3d12:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    3d16:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    3d18:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    3d1c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    3d20:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    3d24:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    3d26:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    3d28:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    3d2a:	|  |  |  |  |  |  |  |              |  |              |      jsr 14048 <stackGetByIndex>
    3d30:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    3d32:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    3d36:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    3d38:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    3d3c:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    3d3e:	|  |  |  |  |  |  |  |              |  |                     jsr 140b8 <trimStack>
    3d44:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    3d46:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    3d4a:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 3d66 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    3d4c:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    3d4e:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    3d52:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3d54:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    3d56:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    3d58:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14026 <setVariable>
    3d5e:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    3d62:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 3e40 <continueFunction+0x6a4>
    3d66:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    3d68:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    3d6c:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 3d7a <continueFunction+0x5de>
    3d6e:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    3d70:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    3d74:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 3dc4 <continueFunction+0x628>
    3d76:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 3e0c <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3d7a:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    3d7e:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    3d82:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    3d86:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    3d88:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 13734 <getValueType>
    3d8e:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    3d92:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    3d94:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 3d9c <continueFunction+0x600>
    3d96:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    3d98:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 3e26 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    3d9c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    3d9e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    3da0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    3da4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    3da6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    3daa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    3dac:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14026 <setVariable>
    3db2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    3db6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    3db8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    3dba:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    3dbe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    3dc2:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 3e2a <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    3dc4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    3dc8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3dcc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    3dd0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    3dd2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 13734 <getValueType>
    3dd8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    3ddc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    3dde:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 3de4 <continueFunction+0x648>
    3de0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    3de2:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 3e26 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    3de4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    3de6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    3de8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    3dec:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    3dee:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    3df2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    3df4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14026 <setVariable>
    3dfa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    3dfe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    3e00:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    3e02:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    3e06:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    3e0a:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 3e2a <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    3e0c:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    3e0e:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    3e12:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    3e14:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    3e18:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 13bee <copyVariable>
    3e1e:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    3e20:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    3e22:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 3e40 <continueFunction+0x6a4>
    3e24:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3e26:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 4646 <continueFunction+0xeaa>
				break;
    3e2a:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 3e40 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    3e2c:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 17029 <PutChar+0xab3>
    3e32:	|  |  |  |  |  |  |  |                 |  |                  jsr 15c26 <KPrintF>
    3e38:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    3e3a:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    3e3c:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 4646 <continueFunction+0xeaa>
				break;
    3e40:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    3e42:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 4624 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    3e46:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3e4a:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    3e4e:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    3e50:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    3e52:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    3e54:	|  |  |  |  |  |  |  |                                   /-- beq.s 3e62 <continueFunction+0x6c6>
    3e56:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    3e58:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    3e5a:	|  |  |  |  |  |  |  |                                /--|-- beq.w 3f0e <continueFunction+0x772>
    3e5e:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 3f6c <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    3e62:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3e66:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3e6a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3e6e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3e70:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3e86 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    3e72:	|  |  |  |  |  |  |  |                             |  |  |   pea 1700b <PutChar+0xa95>
    3e78:	|  |  |  |  |  |  |  |                             |  |  |   jsr 15c26 <KPrintF>
    3e7e:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    3e80:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3e82:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4646 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    3e86:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    3e88:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3e8c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3e8e:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    3e92:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    3e96:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    3e98:	|  |  |  |  |  |  |  |                             |  |      jsr 13734 <getValueType>
    3e9e:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3ea2:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3ea4:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3eac <continueFunction+0x710>
    3ea6:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3ea8:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4646 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    3eac:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    3eb0:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3eb4:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    3eb8:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    3eba:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    3ebe:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    3ec0:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    3ec4:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    3ec8:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    3ecc:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    3ece:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    3ed0:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    3ed2:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3ed4:	|  |  |  |  |  |  |  |                             |  |      jsr 59bc <stackSetByIndex>
    3eda:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    3ede:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    3ee0:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 3ee8 <continueFunction+0x74c>
						return FALSE;
    3ee2:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    3ee4:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4646 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    3ee8:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    3eea:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3eee:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3ef0:	|  |  |  |  |  |  |  |                             |  |      jsr 140b8 <trimStack>
    3ef6:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    3ef8:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    3efa:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    3efe:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    3f00:	|  |  |  |  |  |  |  |                             |  |      jsr 140b8 <trimStack>
    3f06:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    3f08:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    3f0a:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 4624 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    3f0e:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    3f10:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    3f14:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3f16:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    3f1a:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    3f1e:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    3f20:	|  |  |  |  |  |  |  |                             |         jsr 13734 <getValueType>
    3f26:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    3f2a:	|  |  |  |  |  |  |  |                             |         tst.w d0
    3f2c:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3f34 <continueFunction+0x798>
    3f2e:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    3f30:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 4646 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    3f34:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    3f38:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    3f3a:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    3f3e:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    3f42:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    3f46:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    3f48:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    3f4a:	|  |  |  |  |  |  |  |                             |         jsr 133be <fastArrayGetByIndex>
    3f50:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    3f52:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    3f56:	|  |  |  |  |  |  |  |                             |     /-- bne.s 3f66 <continueFunction+0x7ca>
    3f58:	|  |  |  |  |  |  |  |                             |     |   pea 1704d <PutChar+0xad7>
    3f5e:	|  |  |  |  |  |  |  |                             |     |   jsr 15c26 <KPrintF>
    3f64:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    3f66:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    3f68:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 4646 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    3f6c:	|  |  |  |  |  |  |  |                             \-------> pea 17029 <PutChar+0xab3>
    3f72:	|  |  |  |  |  |  |  |                                       jsr 15c26 <KPrintF>
    3f78:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    3f7a:	|  |  |  |  |  |  |  |                                       clr.w d0
    3f7c:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4646 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    3f80:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3f84:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    3f88:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3f8c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3f8e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    3f90:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3f92:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3f96:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    3f9a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    3f9c:	|  |  |  |  |  |  |  |                                       jsr 13734 <getValueType>
    3fa2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    3fa6:	|  |  |  |  |  |  |  |                                       tst.w d0
    3fa8:	|  |  |  |  |  |  |  |                                   /-- bne.s 3fb0 <continueFunction+0x814>
    3faa:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    3fac:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4646 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    3fb0:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    3fb4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    3fb6:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    3fba:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3fbc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3fc0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3fc2:	|  |  |  |  |  |  |  |                                       jsr 14026 <setVariable>
    3fc8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    3fcc:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    3fd0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    3fd2:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    3fd4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    3fd8:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    3fdc:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    3fe0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    3fe2:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    3fe4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    3fe6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    3fea:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    3fec:	|  |  |  |  |  |  |  |                                       jsr 14026 <setVariable>
    3ff2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    3ff6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    3ffa:	|  |  |  |  |  |  |  |                                       move.l 1b186 <globalVars>,d1
    4000:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4004:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4006:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4008:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    400a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    400e:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    4012:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4014:	|  |  |  |  |  |  |  |                                       jsr 13734 <getValueType>
    401a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    401e:	|  |  |  |  |  |  |  |                                       tst.w d0
    4020:	|  |  |  |  |  |  |  |                                   /-- bne.s 4028 <continueFunction+0x88c>
    4022:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4024:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4646 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4028:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    402c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    402e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4032:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4034:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4038:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    403a:	|  |  |  |  |  |  |  |                                       jsr 14026 <setVariable>
    4040:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    4044:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    4048:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    404a:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    404c:	|  |  |  |  |  |  |  |                                       movea.l 1b186 <globalVars>,a0
    4052:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4056:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4058:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    405a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    405c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4060:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4062:	|  |  |  |  |  |  |  |                                       jsr 14026 <setVariable>
    4068:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    406c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4070:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4074:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4078:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    407c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    407e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4080:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4082:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4086:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    408a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    408c:	|  |  |  |  |  |  |  |                                       jsr 13734 <getValueType>
    4092:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4096:	|  |  |  |  |  |  |  |                                       tst.w d0
    4098:	|  |  |  |  |  |  |  |                                   /-- bne.s 40a0 <continueFunction+0x904>
    409a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    409c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4646 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    40a0:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    40a4:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    40a6:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    40aa:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40ac:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40b0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40b2:	|  |  |  |  |  |  |  |                                       jsr 14026 <setVariable>
    40b8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    40bc:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    40c0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    40c2:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    40c4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    40c8:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    40cc:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    40d0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    40d2:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    40d4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    40d6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40da:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40dc:	|  |  |  |  |  |  |  |                                       jsr 14026 <setVariable>
    40e2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    40e6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    40ea:	|  |  |  |  |  |  |  |                                       move.l 1b186 <globalVars>,d1
    40f0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    40f4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    40f6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    40f8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    40fa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    40fe:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    4102:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4104:	|  |  |  |  |  |  |  |                                       jsr 13734 <getValueType>
    410a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    410e:	|  |  |  |  |  |  |  |                                       tst.w d0
    4110:	|  |  |  |  |  |  |  |                                   /-- bne.s 4118 <continueFunction+0x97c>
    4112:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4114:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4646 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4118:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    411c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    411e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4122:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4124:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4128:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    412a:	|  |  |  |  |  |  |  |                                       jsr 14026 <setVariable>
    4130:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    4134:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    4138:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    413a:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    413c:	|  |  |  |  |  |  |  |                                       movea.l 1b186 <globalVars>,a0
    4142:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4146:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4148:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    414a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    414c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4150:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4152:	|  |  |  |  |  |  |  |                                       jsr 14026 <setVariable>
    4158:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    415c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    4160:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4164:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4168:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    416c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    416e:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    4170:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4172:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4176:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4178:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    417a:	|  |  |  |  |  |  |  |                                       jsr 13bee <copyVariable>
    4180:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    4182:	|  |  |  |  |  |  |  |                                       tst.w d0
    4184:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 460e <continueFunction+0xe72>
    4188:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    418a:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 4646 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    418e:	|  |  |  |  |  |  |  |  |                                    move.l 1b186 <globalVars>,d1
    4194:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    4198:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    419a:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    419c:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    419e:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    41a2:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    41a4:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    41a6:	|  |  |  |  |  |  |  |  |                                    jsr 13bee <copyVariable>
    41ac:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    41ae:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    41b0:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 4612 <continueFunction+0xe76>
    41b4:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    41b6:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 4646 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    41ba:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    41bc:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    41c0:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1b186 <globalVars>,a0
    41c6:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    41ca:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    41cc:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    41ce:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    41d0:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    41d2:	|  |  |  |  |  |  |  |  |  |                                 jsr 13bee <copyVariable>
    41d8:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    41da:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    41dc:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 4616 <continueFunction+0xe7a>
    41e0:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    41e2:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 4646 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    41e6:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    41e8:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    41ec:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    41ee:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    41f2:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    41f4:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    41f6:	|  |  |  |  |  |  |  |  |  |  |                              jsr 12f70 <addVarToStack>
    41fc:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    41fe:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    4200:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 461a <continueFunction+0xe7e>
    4204:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    4206:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 4646 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    420a:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    420c:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    4210:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    4212:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    4216:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    4218:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    421a:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 12ff6 <addVarToStackQuick>
    4220:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    4222:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    4224:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 461e <continueFunction+0xe82>
    4228:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    422a:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 4646 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    422e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4230:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4234:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4236:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13c74 <getBoolean>
    423c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    423e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4240:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    4242:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    4244:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    4246:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    4248:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    424a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    424e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    4250:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    4254:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4256:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14026 <setVariable>
    425c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    4260:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    4264:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4266:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    426a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    426c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 13c74 <getBoolean>
    4272:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4274:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4276:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 4622 <continueFunction+0xe86>
				advanceNow = FALSE;
    427a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    427e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    4288:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 4622 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    428c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    4290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    429a:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4624 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    429e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    42a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    42a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    42a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    42aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    42ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    42b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 13734 <getValueType>
    42b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    42ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    42bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 42c4 <continueFunction+0xb28>
    42be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    42c0:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 4646 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    42c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    42c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    42ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    42cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    42ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    42d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    42d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    42d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    42da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14026 <setVariable>
    42e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    42e4:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4624 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    42e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    42ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    42f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 45da <continueFunction+0xe3e>
    42f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    42f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    42fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 4376 <continueFunction+0xbda>
    42fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    42fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    4302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 43c0 <continueFunction+0xc24>
    4306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    4308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    430c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 431a <continueFunction+0xb7e>
    430e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    4310:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    4314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 4348 <continueFunction+0xbac>
    4316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 43c0 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    431a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    431c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    4324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    4328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    432a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    432c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1306a <addVariablesInSecond>
    4332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    4334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    4336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    433a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    433c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 140b8 <trimStack>
    4342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    4344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 45ee <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    434a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    434e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    4352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    4356:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4358:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    435a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13128 <compareVariablesInSecond>
    4360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    4362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    4364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    436a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 140b8 <trimStack>
    4370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    4372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 45ee <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    4378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    437c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4380:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    4384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4386:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    4388:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13128 <compareVariablesInSecond>
    438e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    4390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    4392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4398:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 140b8 <trimStack>
    439e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    43a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    43a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    43a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    43aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    43ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    43ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    43b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    43b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    43bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 45ee <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    43c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    43c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    43c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    43ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    43ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    43d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    43d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 13734 <getValueType>
    43da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    43de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    43e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 43e8 <continueFunction+0xc4c>
    43e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    43e4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4646 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    43e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    43ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    43ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    43f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    43f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    43f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    43fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 13734 <getValueType>
    4400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 440e <continueFunction+0xc72>
    4408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    440a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4646 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    440e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    4410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4414:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 140b8 <trimStack>
    441c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    441e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    4420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    4424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    4426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    4428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 45ec <continueFunction+0xe50>
    442c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    442e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    4430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #17468,a0
    4436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    4438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (443c <continueFunction+0xca0>,pc,d0.w)
    443c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    4440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    4442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    444a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    444c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    445c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    4464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    446c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 16460 <__mulsi3>
    447e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    448a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    448e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14026 <setVariable>
    4496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    449a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45ee <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    449e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    44a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    44a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    44a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    44aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    44ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    44b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14026 <setVariable>
    44bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    44c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45ee <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    44c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    44c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    44cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1650c <__modsi3>
    44d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    44d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    44da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    44dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    44e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    44e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    44e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    44e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14026 <setVariable>
    44ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    44f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45ee <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    44f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    44fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    44fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 164de <__divsi3>
    4508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    450a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    450c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    450e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    451a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14026 <setVariable>
    4520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45ee <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    4528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    452c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    4534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    453a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    453c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14026 <setVariable>
    454e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 45ee <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    4556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    455a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    455e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    4562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    456a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    456e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14026 <setVariable>
    457c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 45ee <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    4582:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    458a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    458c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    458e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    459a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    459c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    45a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    45a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14026 <setVariable>
    45a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    45ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 45ee <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    45ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    45b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    45b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    45b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    45ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    45bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    45be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    45c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    45c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    45c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    45c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    45cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    45ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14026 <setVariable>
    45d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    45d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 45ee <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    45da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 1706e <PutChar+0xaf8>
    45e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 15c26 <KPrintF>
    45e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    45e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    45ea:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 4646 <continueFunction+0xeaa>
						break;
    45ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    45ee:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 4624 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    45f0:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 17086 <PutChar+0xb10>
    45f6:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 15c26 <KPrintF>
    45fc:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    45fe:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    4600:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 4646 <continueFunction+0xeaa>
			break;
    4602:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    4604:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 4624 <continueFunction+0xe88>
			break;
    4606:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    4608:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 4624 <continueFunction+0xe88>
			break;
    460a:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    460c:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 4624 <continueFunction+0xe88>
			break;
    460e:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    4610:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 4624 <continueFunction+0xe88>
			break;
    4612:	|  |  |     |              \--|--|--|--|-------------------> nop
    4614:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 4624 <continueFunction+0xe88>
			break;
    4616:	|  |  |     |                 \--|--|--|-------------------> nop
    4618:	|  |  |     +--------------------|--|--|-------------------- bra.s 4624 <continueFunction+0xe88>
			break;
    461a:	|  |  |     |                    \--|--|-------------------> nop
    461c:	|  |  |     +-----------------------|--|-------------------- bra.s 4624 <continueFunction+0xe88>
			break;
    461e:	|  |  |     |                       \--|-------------------> nop
    4620:	|  |  |     +--------------------------|-------------------- bra.s 4624 <continueFunction+0xe88>
			break;
    4622:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    4624:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    4628:	+--|--|----------------------------------------------------- beq.s 463c <continueFunction+0xea0>
    462a:	|  |  |                                                      movea.l 80(sp),a0
    462e:	|  |  |                                                      move.l 36(a0),d0
    4632:	|  |  |                                                      addq.l #1,d0
    4634:	|  |  |                                                      movea.l 80(sp),a0
    4638:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    463c:	\--|--|----------------------------------------------------> tst.w 74(sp)
    4640:	   |  \----------------------------------------------------- bne.w 37c4 <continueFunction+0x28>

	}
	return TRUE;
    4644:	   |                                                         moveq #1,d0
}
    4646:	   \-------------------------------------------------------> lea 76(sp),sp
    464a:	                                                             rts

0000464c <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    464c:	          lea -16(sp),sp
    4650:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4652:	          move.l 24(sp),-(sp)
    4656:	          jsr 5772 <pauseFunction>
    465c:	          addq.l #4,sp
	if (fun -> stack) 
    465e:	          movea.l 24(sp),a0
    4662:	          move.l 24(a0),d0
    4666:	      /-- beq.s 467a <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    4668:	      |   pea 170b2 <PutChar+0xb3c>
    466e:	      |   jsr 15c26 <KPrintF>
    4674:	      |   addq.l #4,sp
		return;
    4676:	/-----|-- bra.w 4714 <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    467a:	|     \-> movea.l 24(sp),a0
    467e:	|         move.l 4(a0),12(sp)
    4684:	|         move.l 1b1d8 <SysBase>,d0
    468a:	|         movea.l d0,a6
    468c:	|         movea.l 12(sp),a1
    4690:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4694:	|         clr.l 16(sp)
    4698:	|     /-- bra.s 46b8 <finishFunction+0x6c>
    469a:	|  /--|-> movea.l 24(sp),a0
    469e:	|  |  |   move.l 20(a0),d1
    46a2:	|  |  |   move.l 16(sp),d0
    46a6:	|  |  |   lsl.l #3,d0
    46a8:	|  |  |   add.l d1,d0
    46aa:	|  |  |   move.l d0,-(sp)
    46ac:	|  |  |   jsr 13982 <unlinkVar>
    46b2:	|  |  |   addq.l #4,sp
    46b4:	|  |  |   addq.l #1,16(sp)
    46b8:	|  |  \-> movea.l 24(sp),a0
    46bc:	|  |      move.l 8(a0),d0
    46c0:	|  |      cmp.l 16(sp),d0
    46c4:	|  \----- bgt.s 469a <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    46c6:	|         movea.l 24(sp),a0
    46ca:	|         move.l 8(a0),d0
    46ce:	|     /-- ble.s 46ea <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    46d0:	|     |   movea.l 24(sp),a0
    46d4:	|     |   move.l 20(a0),8(sp)
    46da:	|     |   move.l 1b1d8 <SysBase>,d0
    46e0:	|     |   movea.l d0,a6
    46e2:	|     |   movea.l 8(sp),a1
    46e6:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    46ea:	|     \-> moveq #28,d0
    46ec:	|         add.l 24(sp),d0
    46f0:	|         move.l d0,-(sp)
    46f2:	|         jsr 13982 <unlinkVar>
    46f8:	|         addq.l #4,sp
	FreeVec(fun);
    46fa:	|         move.l 24(sp),4(sp)
    4700:	|         move.l 1b1d8 <SysBase>,d0
    4706:	|         movea.l d0,a6
    4708:	|         movea.l 4(sp),a1
    470c:	|         jsr -690(a6)
	fun = NULL;
    4710:	|         clr.l 24(sp)
}
    4714:	\-------> movea.l (sp)+,a6
    4716:	          lea 16(sp),sp
    471a:	          rts

0000471c <freezeSubs>:

void freezeSubs () {
    471c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    471e:	          move.l 1b170 <allRunningFunctions>,(sp)

	while (thisFunction) {
    4724:	   /----- bra.s 4742 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    4726:	/--|----> movea.l (sp),a0
    4728:	|  |      move.w 52(a0),d0
    472c:	|  |  /-- bne.s 473c <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    472e:	|  |  |   movea.l (sp),a0
    4730:	|  |  |   move.b 56(a0),d0
    4734:	|  |  |   addq.b #1,d0
    4736:	|  |  |   movea.l (sp),a0
    4738:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    473c:	|  |  \-> movea.l (sp),a0
    473e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4742:	|  \----> tst.l (sp)
    4744:	\-------- bne.s 4726 <freezeSubs+0xa>
	}
}
    4746:	          nop
    4748:	          nop
    474a:	          addq.l #4,sp
    474c:	          rts

0000474e <handleInput>:

BOOL handleInput () {
    474e:	             lea -16(sp),sp
    4752:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    4754:	             move.l 1b33c <overRegion>,d0
    475a:	         /-- bne.s 4762 <handleInput+0x14>
    475c:	         |   jsr 143c2 <getOverRegion>

	if (input.justMoved) {
    4762:	         \-> move.w 1b18e <input+0x4>,d0
    4768:	         /-- beq.s 47a6 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    476a:	         |   movea.l 1ab52 <currentEvents>,a0
    4770:	         |   move.l 16(a0),d0
    4774:	         +-- beq.s 47a6 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    4776:	         |   move.l 1b1a8 <noStack>,d1
    477c:	         |   movea.l 1ab52 <currentEvents>,a0
    4782:	         |   move.l 16(a0),d0
    4786:	         |   pea 1 <_start+0x1>
    478a:	         |   move.l d1,-(sp)
    478c:	         |   clr.l -(sp)
    478e:	         |   clr.l -(sp)
    4790:	         |   move.l d0,-(sp)
    4792:	         |   jsr 5a00 <startNewFunctionNum>
    4798:	         |   lea 20(sp),sp
    479c:	         |   tst.l d0
    479e:	         +-- bne.s 47a6 <handleInput+0x58>
    47a0:	         |   clr.w d0
    47a2:	/--------|-- bra.w 49ac <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    47a6:	|        \-> clr.w 1b18e <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    47ac:	|            move.l 1b1a0 <lastRegion>,d1
    47b2:	|            move.l 1b33c <overRegion>,d0
    47b8:	|            cmp.l d1,d0
    47ba:	|  /-------- beq.w 4892 <handleInput+0x144>
    47be:	|  |         movea.l 1ab52 <currentEvents>,a0
    47c4:	|  |         move.l 20(a0),d0
    47c8:	|  +-------- beq.w 4892 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    47cc:	|  |         moveq #12,d0
    47ce:	|  |         move.l d0,16(sp)
    47d2:	|  |         clr.l 12(sp)
    47d6:	|  |         move.l 1b1d8 <SysBase>,d0
    47dc:	|  |         movea.l d0,a6
    47de:	|  |         move.l 16(sp),d0
    47e2:	|  |         move.l 12(sp),d1
    47e6:	|  |         jsr -684(a6)
    47ea:	|  |         move.l d0,8(sp)
    47ee:	|  |         move.l 8(sp),d0
    47f2:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    47f6:	|  |         move.l 4(sp),d0
    47fa:	|  |     /-- bne.s 4810 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    47fc:	|  |     |   pea 170d8 <PutChar+0xb62>
    4802:	|  |     |   jsr 15c26 <KPrintF>
    4808:	|  |     |   addq.l #4,sp
			return FALSE;
    480a:	|  |     |   clr.w d0
    480c:	+--|-----|-- bra.w 49ac <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    4810:	|  |     \-> movea.l 4(sp),a0
    4814:	|  |         clr.l (a0)
		if (overRegion) {
    4816:	|  |         move.l 1b33c <overRegion>,d0
    481c:	|  |  /----- beq.s 4844 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    481e:	|  |  |      movea.l 1b33c <overRegion>,a0
    4824:	|  |  |      movea.l 28(a0),a0
    4828:	|  |  |      move.l 4(a0),d1
    482c:	|  |  |      move.l 4(sp),d0
    4830:	|  |  |      move.l d1,-(sp)
    4832:	|  |  |      pea 7 <_start+0x7>
    4836:	|  |  |      move.l d0,-(sp)
    4838:	|  |  |      jsr 14026 <setVariable>
    483e:	|  |  |      lea 12(sp),sp
    4842:	|  |  |  /-- bra.s 485a <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    4844:	|  |  \--|-> move.l 4(sp),d0
    4848:	|  |     |   clr.l -(sp)
    484a:	|  |     |   pea 1 <_start+0x1>
    484e:	|  |     |   move.l d0,-(sp)
    4850:	|  |     |   jsr 14026 <setVariable>
    4856:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    485a:	|  |     \-> movea.l 4(sp),a0
    485e:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    4862:	|  |         movea.l 1ab52 <currentEvents>,a0
    4868:	|  |         move.l 20(a0),d0
    486c:	|  |         pea 1 <_start+0x1>
    4870:	|  |         lea 8(sp),a0
    4874:	|  |         move.l a0,-(sp)
    4876:	|  |         clr.l -(sp)
    4878:	|  |         pea 1 <_start+0x1>
    487c:	|  |         move.l d0,-(sp)
    487e:	|  |         jsr 5a00 <startNewFunctionNum>
    4884:	|  |         lea 20(sp),sp
    4888:	|  |         tst.l d0
    488a:	|  +-------- bne.s 4892 <handleInput+0x144>
    488c:	|  |         clr.w d0
    488e:	+--|-------- bra.w 49ac <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    4892:	|  \-------> move.w 1b190 <input+0x6>,d0
    4898:	|        /-- beq.s 48d6 <handleInput+0x188>
    489a:	|        |   movea.l 1ab52 <currentEvents>,a0
    48a0:	|        |   move.l 4(a0),d0
    48a4:	|        +-- beq.s 48d6 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    48a6:	|        |   move.l 1b1a8 <noStack>,d1
    48ac:	|        |   movea.l 1ab52 <currentEvents>,a0
    48b2:	|        |   move.l 4(a0),d0
    48b6:	|        |   pea 1 <_start+0x1>
    48ba:	|        |   move.l d1,-(sp)
    48bc:	|        |   clr.l -(sp)
    48be:	|        |   clr.l -(sp)
    48c0:	|        |   move.l d0,-(sp)
    48c2:	|        |   jsr 5a00 <startNewFunctionNum>
    48c8:	|        |   lea 20(sp),sp
    48cc:	|        |   tst.l d0
    48ce:	|        +-- bne.s 48d6 <handleInput+0x188>
    48d0:	|        |   clr.w d0
    48d2:	+--------|-- bra.w 49ac <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    48d6:	|        \-> move.w 1b192 <input+0x8>,d0
    48dc:	|        /-- beq.s 491a <handleInput+0x1cc>
    48de:	|        |   movea.l 1ab52 <currentEvents>,a0
    48e4:	|        |   move.l 12(a0),d0
    48e8:	|        +-- beq.s 491a <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    48ea:	|        |   move.l 1b1a8 <noStack>,d1
    48f0:	|        |   movea.l 1ab52 <currentEvents>,a0
    48f6:	|        |   move.l 12(a0),d0
    48fa:	|        |   pea 1 <_start+0x1>
    48fe:	|        |   move.l d1,-(sp)
    4900:	|        |   clr.l -(sp)
    4902:	|        |   clr.l -(sp)
    4904:	|        |   move.l d0,-(sp)
    4906:	|        |   jsr 5a00 <startNewFunctionNum>
    490c:	|        |   lea 20(sp),sp
    4910:	|        |   tst.l d0
    4912:	|        +-- bne.s 491a <handleInput+0x1cc>
    4914:	|        |   clr.w d0
    4916:	+--------|-- bra.w 49ac <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    491a:	|        \-> move.w 1b18a <input>,d0
    4920:	|        /-- beq.s 4958 <handleInput+0x20a>
    4922:	|        |   movea.l 1ab52 <currentEvents>,a0
    4928:	|        |   move.l (a0),d0
    492a:	|        +-- beq.s 4958 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    492c:	|        |   move.l 1b1a8 <noStack>,d1
    4932:	|        |   movea.l 1ab52 <currentEvents>,a0
    4938:	|        |   move.l (a0),d0
    493a:	|        |   pea 1 <_start+0x1>
    493e:	|        |   move.l d1,-(sp)
    4940:	|        |   clr.l -(sp)
    4942:	|        |   clr.l -(sp)
    4944:	|        |   move.l d0,-(sp)
    4946:	|        |   jsr 5a00 <startNewFunctionNum>
    494c:	|        |   lea 20(sp),sp
    4950:	|        |   tst.l d0
    4952:	|        +-- bne.s 4958 <handleInput+0x20a>
    4954:	|        |   clr.w d0
    4956:	+--------|-- bra.s 49ac <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    4958:	|        \-> move.w 1b18c <input+0x2>,d0
    495e:	|        /-- beq.s 499a <handleInput+0x24c>
    4960:	|        |   movea.l 1ab52 <currentEvents>,a0
    4966:	|        |   move.l 8(a0),d0
    496a:	|        +-- beq.s 499a <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    496c:	|        |   move.l 1b1a8 <noStack>,d1
    4972:	|        |   movea.l 1ab52 <currentEvents>,a0
    4978:	|        |   move.l 8(a0),d0
    497c:	|        |   pea 1 <_start+0x1>
    4980:	|        |   move.l d1,-(sp)
    4982:	|        |   clr.l -(sp)
    4984:	|        |   clr.l -(sp)
    4986:	|        |   move.l d0,-(sp)
    4988:	|        |   jsr 5a00 <startNewFunctionNum>
    498e:	|        |   lea 20(sp),sp
    4992:	|        |   tst.l d0
    4994:	|        +-- bne.s 499a <handleInput+0x24c>
    4996:	|        |   clr.w d0
    4998:	+--------|-- bra.s 49ac <handleInput+0x25e>
	}

	lastRegion = overRegion;
    499a:	|        \-> move.l 1b33c <overRegion>,d0
    49a0:	|            move.l d0,1b1a0 <lastRegion>
	return runSludge ();
    49a6:	|            jsr 57ce <runSludge>
}
    49ac:	\----------> movea.l (sp)+,a6
    49ae:	             lea 16(sp),sp
    49b2:	             rts

000049b4 <initSludge>:

BOOL initSludge (char * filename) {
    49b4:	             lea -292(sp),sp
    49b8:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    49bc:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    49c0:	             jsr 9d34 <makeNullAnim>
    49c6:	             move.l d0,1b0e0 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    49cc:	             pea 1b182 <gameVersion>
    49d2:	             pea 1710e <PutChar+0xb98>
    49d8:	             pea 45 <_start+0x45>
    49dc:	             pea 47 <_start+0x47>
    49e0:	             move.l 332(sp),-(sp)
    49e4:	             jsr 5402 <openAndVerify>
    49ea:	             lea 20(sp),sp
    49ee:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    49f2:	         /-- bne.s 49fa <initSludge+0x46>
    49f4:	         |   clr.w d0
    49f6:	/--------|-- bra.w 5122 <initSludge+0x76e>
	if (FGetC (fp)) {
    49fa:	|        \-> move.l 288(sp),284(sp)
    4a00:	|            move.l 1b1e0 <DOSBase>,d0
    4a06:	|            movea.l d0,a6
    4a08:	|            move.l 284(sp),d1
    4a0c:	|            jsr -306(a6)
    4a10:	|            move.l d0,280(sp)
    4a14:	|            move.l 280(sp),d0
    4a18:	|  /-------- beq.w 4bc2 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    4a1c:	|  |         move.l 288(sp),-(sp)
    4a20:	|  |         jsr 6bc <get2bytes>
    4a26:	|  |         addq.l #4,sp
    4a28:	|  |         move.l d0,1b1ac <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    4a2e:	|  |         move.l 1b1ac <numBIFNames>,d0
    4a34:	|  |         move.l d0,276(sp)
    4a38:	|  |         clr.l 272(sp)
    4a3c:	|  |         move.l 1b1d8 <SysBase>,d0
    4a42:	|  |         movea.l d0,a6
    4a44:	|  |         move.l 276(sp),d0
    4a48:	|  |         move.l 272(sp),d1
    4a4c:	|  |         jsr -684(a6)
    4a50:	|  |         move.l d0,268(sp)
    4a54:	|  |         move.l 268(sp),d0
    4a58:	|  |         move.l d0,1b168 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    4a5e:	|  |         move.l 1b168 <allBIFNames>,d0
    4a64:	|  |     /-- bne.s 4a6c <initSludge+0xb8>
    4a66:	|  |     |   clr.w d0
    4a68:	+--|-----|-- bra.w 5122 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4a6c:	|  |     \-> clr.l 304(sp)
    4a70:	|  |     /-- bra.s 4a96 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    4a72:	|  |  /--|-> move.l 1b168 <allBIFNames>,d1
    4a78:	|  |  |  |   move.l 304(sp),d0
    4a7c:	|  |  |  |   add.l d0,d0
    4a7e:	|  |  |  |   add.l d0,d0
    4a80:	|  |  |  |   movea.l d1,a2
    4a82:	|  |  |  |   adda.l d0,a2
    4a84:	|  |  |  |   move.l 288(sp),-(sp)
    4a88:	|  |  |  |   jsr b02 <readString>
    4a8e:	|  |  |  |   addq.l #4,sp
    4a90:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    4a92:	|  |  |  |   addq.l #1,304(sp)
    4a96:	|  |  |  \-> move.l 1b1ac <numBIFNames>,d0
    4a9c:	|  |  |      cmp.l 304(sp),d0
    4aa0:	|  |  \----- bgt.s 4a72 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    4aa2:	|  |         move.l 288(sp),-(sp)
    4aa6:	|  |         jsr 6bc <get2bytes>
    4aac:	|  |         addq.l #4,sp
    4aae:	|  |         move.l d0,1b1b8 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    4ab4:	|  |         move.l 1b1b8 <numUserFunc>,d0
    4aba:	|  |         move.l d0,264(sp)
    4abe:	|  |         clr.l 260(sp)
    4ac2:	|  |         move.l 1b1d8 <SysBase>,d0
    4ac8:	|  |         movea.l d0,a6
    4aca:	|  |         move.l 264(sp),d0
    4ace:	|  |         move.l 260(sp),d1
    4ad2:	|  |         jsr -684(a6)
    4ad6:	|  |         move.l d0,256(sp)
    4ada:	|  |         move.l 256(sp),d0
    4ade:	|  |         move.l d0,1b174 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    4ae4:	|  |         move.l 1b174 <allUserFunc>,d0
    4aea:	|  |     /-- bne.s 4af2 <initSludge+0x13e>
    4aec:	|  |     |   clr.w d0
    4aee:	+--|-----|-- bra.w 5122 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    4af2:	|  |     \-> clr.l 300(sp)
    4af6:	|  |     /-- bra.s 4b1c <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    4af8:	|  |  /--|-> move.l 1b174 <allUserFunc>,d1
    4afe:	|  |  |  |   move.l 300(sp),d0
    4b02:	|  |  |  |   add.l d0,d0
    4b04:	|  |  |  |   add.l d0,d0
    4b06:	|  |  |  |   movea.l d1,a2
    4b08:	|  |  |  |   adda.l d0,a2
    4b0a:	|  |  |  |   move.l 288(sp),-(sp)
    4b0e:	|  |  |  |   jsr b02 <readString>
    4b14:	|  |  |  |   addq.l #4,sp
    4b16:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    4b18:	|  |  |  |   addq.l #1,300(sp)
    4b1c:	|  |  |  \-> move.l 1b1b8 <numUserFunc>,d0
    4b22:	|  |  |      cmp.l 300(sp),d0
    4b26:	|  |  \----- bgt.s 4af8 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    4b28:	|  |         move.l 1b182 <gameVersion>,d0
    4b2e:	|  |         cmpi.l #258,d0
    4b34:	|  +-------- ble.w 4bc2 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    4b38:	|  |         move.l 288(sp),-(sp)
    4b3c:	|  |         jsr 6bc <get2bytes>
    4b42:	|  |         addq.l #4,sp
    4b44:	|  |         move.l d0,1b1b4 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    4b4a:	|  |         move.l 1b1b4 <numResourceNames>,d0
    4b50:	|  |         add.l d0,d0
    4b52:	|  |         add.l d0,d0
    4b54:	|  |         move.l d0,252(sp)
    4b58:	|  |         clr.l 248(sp)
    4b5c:	|  |         move.l 1b1d8 <SysBase>,d0
    4b62:	|  |         movea.l d0,a6
    4b64:	|  |         move.l 252(sp),d0
    4b68:	|  |         move.l 248(sp),d1
    4b6c:	|  |         jsr -684(a6)
    4b70:	|  |         move.l d0,244(sp)
    4b74:	|  |         move.l 244(sp),d0
    4b78:	|  |         move.l d0,1b16c <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    4b7e:	|  |         move.l 1b16c <allResourceNames>,d0
    4b84:	|  |     /-- bne.s 4b8c <initSludge+0x1d8>
    4b86:	|  |     |   clr.w d0
    4b88:	+--|-----|-- bra.w 5122 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    4b8c:	|  |     \-> clr.l 296(sp)
    4b90:	|  |     /-- bra.s 4bb6 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    4b92:	|  |  /--|-> move.l 1b16c <allResourceNames>,d1
    4b98:	|  |  |  |   move.l 296(sp),d0
    4b9c:	|  |  |  |   add.l d0,d0
    4b9e:	|  |  |  |   add.l d0,d0
    4ba0:	|  |  |  |   movea.l d1,a2
    4ba2:	|  |  |  |   adda.l d0,a2
    4ba4:	|  |  |  |   move.l 288(sp),-(sp)
    4ba8:	|  |  |  |   jsr b02 <readString>
    4bae:	|  |  |  |   addq.l #4,sp
    4bb0:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    4bb2:	|  |  |  |   addq.l #1,296(sp)
    4bb6:	|  |  |  \-> move.l 1b1b4 <numResourceNames>,d0
    4bbc:	|  |  |      cmp.l 296(sp),d0
    4bc0:	|  |  \----- bgt.s 4b92 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    4bc2:	|  \-------> move.l #129,1b194 <input+0xa>
	input.mouseY = 100;
    4bcc:	|            moveq #100,d0
    4bce:	|            move.l d0,1b198 <input+0xe>
	winWidth = get2bytes (fp);
    4bd4:	|            move.l 288(sp),-(sp)
    4bd8:	|            jsr 6bc <get2bytes>
    4bde:	|            addq.l #4,sp
    4be0:	|            move.l d0,1b12c <winWidth>
	winHeight = get2bytes (fp);
    4be6:	|            move.l 288(sp),-(sp)
    4bea:	|            jsr 6bc <get2bytes>
    4bf0:	|            addq.l #4,sp
    4bf2:	|            move.l d0,1b130 <winHeight>
	specialSettings = FGetC (fp);
    4bf8:	|            move.l 288(sp),240(sp)
    4bfe:	|            move.l 1b1e0 <DOSBase>,d0
    4c04:	|            movea.l d0,a6
    4c06:	|            move.l 240(sp),d1
    4c0a:	|            jsr -306(a6)
    4c0e:	|            move.l d0,236(sp)
    4c12:	|            move.l 236(sp),d0
    4c16:	|            move.l d0,1b1bc <specialSettings>

	desiredfps = 1000/FGetC (fp);
    4c1c:	|            move.l 288(sp),232(sp)
    4c22:	|            move.l 1b1e0 <DOSBase>,d0
    4c28:	|            movea.l d0,a6
    4c2a:	|            move.l 232(sp),d1
    4c2e:	|            jsr -306(a6)
    4c32:	|            move.l d0,228(sp)
    4c36:	|            move.l 228(sp),d0
    4c3a:	|            move.l d0,-(sp)
    4c3c:	|            pea 3e8 <encodeFilename+0xea>
    4c40:	|            jsr 164de <__divsi3>
    4c46:	|            addq.l #8,sp
    4c48:	|            move.l d0,1ab68 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    4c4e:	|            move.l 288(sp),-(sp)
    4c52:	|            jsr b02 <readString>
    4c58:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    4c5a:	|            move.l 288(sp),224(sp)
    4c60:	|            move.l #110970,220(sp)
    4c68:	|            moveq #8,d1
    4c6a:	|            move.l d1,216(sp)
    4c6e:	|            moveq #1,d0
    4c70:	|            move.l d0,212(sp)
    4c74:	|            move.l 1b1e0 <DOSBase>,d0
    4c7a:	|            movea.l d0,a6
    4c7c:	|            move.l 224(sp),d1
    4c80:	|            move.l 220(sp),d2
    4c84:	|            move.l 216(sp),d3
    4c88:	|            move.l 212(sp),d4
    4c8c:	|            jsr -324(a6)
    4c90:	|            move.l d0,208(sp)
    4c94:	|            move.l 208(sp),d0
    4c98:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    4c9c:	|            moveq #1,d1
    4c9e:	|            cmp.l 204(sp),d1
    4ca2:	|        /-- beq.s 4cb2 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    4ca4:	|        |   pea 17147 <PutChar+0xbd1>
    4caa:	|        |   jsr 15c26 <KPrintF>
    4cb0:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    4cb2:	|        \-> move.l 1b182 <gameVersion>,d0
    4cb8:	|            cmpi.l #258,d0
    4cbe:	|        /-- ble.s 4cce <initSludge+0x31a>
    4cc0:	|        |   move.l 288(sp),-(sp)
    4cc4:	|        |   jsr b02 <readString>
    4cca:	|        |   addq.l #4,sp
    4ccc:	|     /--|-- bra.s 4ce2 <initSludge+0x32e>
    4cce:	|     |  \-> pea 17165 <PutChar+0xbef>
    4cd4:	|     |      pea 17165 <PutChar+0xbef>
    4cda:	|     |      jsr 12c60 <joinStrings>
    4ce0:	|     |      addq.l #8,sp
    4ce2:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    4ce6:	|            move.l 1b182 <gameVersion>,d0
    4cec:	|            cmpi.l #258,d0
    4cf2:	|     /----- ble.s 4d14 <initSludge+0x360>
    4cf4:	|     |      move.l 288(sp),196(sp)
    4cfa:	|     |      move.l 1b1e0 <DOSBase>,d0
    4d00:	|     |      movea.l d0,a6
    4d02:	|     |      move.l 196(sp),d1
    4d06:	|     |      jsr -306(a6)
    4d0a:	|     |      move.l d0,192(sp)
    4d0e:	|     |      move.l 192(sp),d0
    4d12:	|     |  /-- bra.s 4d16 <initSludge+0x362>
    4d14:	|     \--|-> moveq #0,d0
    4d16:	|        \-> move.l d0,1b310 <gameSettings+0x4>
	makeLanguageTable (fp);
    4d1c:	|            move.l 288(sp),-(sp)
    4d20:	|            jsr 12616 <makeLanguageTable>
    4d26:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    4d28:	|            move.l 1b182 <gameVersion>,d0
    4d2e:	|            cmpi.l #261,d0
    4d34:	|        /-- ble.s 4d82 <initSludge+0x3ce>
	{
		FGetC(fp);
    4d36:	|        |   move.l 288(sp),188(sp)
    4d3c:	|        |   move.l 1b1e0 <DOSBase>,d0
    4d42:	|        |   movea.l d0,a6
    4d44:	|        |   move.l 188(sp),d1
    4d48:	|        |   jsr -306(a6)
    4d4c:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    4d50:	|        |   move.l 288(sp),180(sp)
    4d56:	|        |   move.l 1b1e0 <DOSBase>,d0
    4d5c:	|        |   movea.l d0,a6
    4d5e:	|        |   move.l 180(sp),d1
    4d62:	|        |   jsr -306(a6)
    4d66:	|        |   move.l d0,176(sp)
		getFloat (fp);
    4d6a:	|        |   move.l 288(sp),-(sp)
    4d6e:	|        |   jsr 7d8 <getFloat>
    4d74:	|        |   addq.l #4,sp
		getFloat (fp);
    4d76:	|        |   move.l 288(sp),-(sp)
    4d7a:	|        |   jsr 7d8 <getFloat>
    4d80:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    4d82:	|        \-> move.l 288(sp),-(sp)
    4d86:	|            jsr b02 <readString>
    4d8c:	|            addq.l #4,sp
    4d8e:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    4d92:	|            pea 17166 <PutChar+0xbf0>
    4d98:	|            move.l 176(sp),-(sp)
    4d9c:	|            jsr 12be0 <strcmp>
    4da2:	|            addq.l #8,sp
    4da4:	|            tst.l d0
    4da6:	|        /-- beq.s 4dae <initSludge+0x3fa>
		return FALSE;
    4da8:	|        |   clr.w d0
    4daa:	+--------|-- bra.w 5122 <initSludge+0x76e>
	}
	FreeVec( checker);
    4dae:	|        \-> move.l 172(sp),168(sp)
    4db4:	|            move.l 1b1d8 <SysBase>,d0
    4dba:	|            movea.l d0,a6
    4dbc:	|            movea.l 168(sp),a1
    4dc0:	|            jsr -690(a6)
	checker = NULL;
    4dc4:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    4dc8:	|            move.l 288(sp),164(sp)
    4dce:	|            move.l 1b1e0 <DOSBase>,d0
    4dd4:	|            movea.l d0,a6
    4dd6:	|            move.l 164(sp),d1
    4dda:	|            jsr -306(a6)
    4dde:	|            move.l d0,160(sp)
    4de2:	|            move.l 160(sp),d0
    4de6:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    4dea:	|            moveq #0,d0
    4dec:	|            move.b 159(sp),d0
    4df0:	|            moveq #1,d1
    4df2:	|            and.l d1,d0
    4df4:	|        /-- beq.s 4e4c <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    4df6:	|        |   move.l 1b1e0 <DOSBase>,d0
    4dfc:	|        |   movea.l d0,a6
    4dfe:	|        |   jsr -60(a6)
    4e02:	|        |   move.l d0,38(sp)
    4e06:	|        |   move.l 38(sp),d0
    4e0a:	|        |   move.l d0,34(sp)
    4e0e:	|        |   move.l #94574,30(sp)
    4e16:	|        |   moveq #54,d0
    4e18:	|        |   move.l d0,26(sp)
    4e1c:	|        |   move.l 1b1e0 <DOSBase>,d0
    4e22:	|        |   movea.l d0,a6
    4e24:	|        |   move.l 34(sp),d1
    4e28:	|        |   move.l 30(sp),d2
    4e2c:	|        |   move.l 26(sp),d3
    4e30:	|        |   jsr -48(a6)
    4e34:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    4e38:	|        |   pea 171a5 <PutChar+0xc2f>
    4e3e:	|        |   jsr 15c26 <KPrintF>
    4e44:	|        |   addq.l #4,sp
		return FALSE;
    4e46:	|        |   clr.w d0
    4e48:	+--------|-- bra.w 5122 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    4e4c:	|        \-> move.l 288(sp),-(sp)
    4e50:	|            jsr 6bc <get2bytes>
    4e56:	|            addq.l #4,sp
    4e58:	|            move.l d0,1b1b0 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    4e5e:	|            move.l 1b1b0 <numGlobals>,d0
    4e64:	|            lsl.l #3,d0
    4e66:	|            move.l d0,154(sp)
    4e6a:	|            clr.l 150(sp)
    4e6e:	|            move.l 1b1d8 <SysBase>,d0
    4e74:	|            movea.l d0,a6
    4e76:	|            move.l 154(sp),d0
    4e7a:	|            move.l 150(sp),d1
    4e7e:	|            jsr -684(a6)
    4e82:	|            move.l d0,146(sp)
    4e86:	|            move.l 146(sp),d0
    4e8a:	|            move.l d0,1b186 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    4e90:	|            move.l 1b186 <globalVars>,d0
    4e96:	|        /-- bne.s 4eb4 <initSludge+0x500>
    4e98:	|        |   move.l 1b1b0 <numGlobals>,d0
    4e9e:	|        +-- ble.s 4eb4 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    4ea0:	|        |   pea 171dd <PutChar+0xc67>
    4ea6:	|        |   jsr 15c26 <KPrintF>
    4eac:	|        |   addq.l #4,sp
		return FALSE;
    4eae:	|        |   clr.w d0
    4eb0:	+--------|-- bra.w 5122 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    4eb4:	|        \-> clr.l 308(sp)
    4eb8:	|        /-- bra.s 4ed0 <initSludge+0x51c>
    4eba:	|     /--|-> move.l 1b186 <globalVars>,d1
    4ec0:	|     |  |   move.l 308(sp),d0
    4ec4:	|     |  |   lsl.l #3,d0
    4ec6:	|     |  |   movea.l d1,a0
    4ec8:	|     |  |   adda.l d0,a0
    4eca:	|     |  |   clr.l (a0)
    4ecc:	|     |  |   addq.l #1,308(sp)
    4ed0:	|     |  \-> move.l 1b1b0 <numGlobals>,d0
    4ed6:	|     |      cmp.l 308(sp),d0
    4eda:	|     \----- bgt.s 4eba <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    4edc:	|            move.l 1b310 <gameSettings+0x4>,d0
    4ee2:	|            clr.l -(sp)
    4ee4:	|            move.l d0,-(sp)
    4ee6:	|            move.l 296(sp),-(sp)
    4eea:	|            jsr 5ebe <setFileIndices>
    4ef0:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    4ef4:	|            pea 1 <_start+0x1>
    4ef8:	|            jsr 5b78 <getNumberedString>
    4efe:	|            addq.l #4,sp
    4f00:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    4f04:	|            move.l 142(sp),-(sp)
    4f08:	|            jsr 2fe <encodeFilename>
    4f0e:	|            addq.l #4,sp
    4f10:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    4f14:	|            move.l 142(sp),134(sp)
    4f1a:	|            move.l 1b1d8 <SysBase>,d0
    4f20:	|            movea.l d0,a6
    4f22:	|            movea.l 134(sp),a1
    4f26:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    4f2a:	|            move.l 138(sp),130(sp)
    4f30:	|            move.l 1b1e0 <DOSBase>,d0
    4f36:	|            movea.l d0,a6
    4f38:	|            move.l 130(sp),d1
    4f3c:	|            jsr -120(a6)
    4f40:	|            move.l d0,126(sp)
    4f44:	|            move.l 126(sp),d0
    4f48:	|            move.l d0,292(sp)
	if(lock == 0) {
    4f4c:	|        /-- bne.s 4f7a <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    4f4e:	|        |   move.l 138(sp),122(sp)
    4f54:	|        |   moveq #-2,d1
    4f56:	|        |   move.l d1,118(sp)
    4f5a:	|        |   move.l 1b1e0 <DOSBase>,d0
    4f60:	|        |   movea.l d0,a6
    4f62:	|        |   move.l 122(sp),d1
    4f66:	|        |   move.l 118(sp),d2
    4f6a:	|        |   jsr -84(a6)
    4f6e:	|        |   move.l d0,114(sp)
    4f72:	|        |   move.l 114(sp),d0
    4f76:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    4f7a:	|        \-> move.l 292(sp),110(sp)
    4f80:	|            move.l 1b1e0 <DOSBase>,d0
    4f86:	|            movea.l d0,a6
    4f88:	|            move.l 110(sp),d1
    4f8c:	|            jsr -126(a6)
    4f90:	|            move.l d0,106(sp)
    4f94:	|            move.l 106(sp),d0
    4f98:	|        /-- bne.s 4ff4 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    4f9a:	|        |   move.l 138(sp),-(sp)
    4f9e:	|        |   pea 17210 <PutChar+0xc9a>
    4fa4:	|        |   jsr 15c26 <KPrintF>
    4faa:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    4fac:	|        |   move.l 1b1e0 <DOSBase>,d0
    4fb2:	|        |   movea.l d0,a6
    4fb4:	|        |   jsr -60(a6)
    4fb8:	|        |   move.l d0,58(sp)
    4fbc:	|        |   move.l 58(sp),d0
    4fc0:	|        |   move.l d0,54(sp)
    4fc4:	|        |   move.l #94781,50(sp)
    4fcc:	|        |   moveq #40,d0
    4fce:	|        |   move.l d0,46(sp)
    4fd2:	|        |   move.l 1b1e0 <DOSBase>,d0
    4fd8:	|        |   movea.l d0,a6
    4fda:	|        |   move.l 54(sp),d1
    4fde:	|        |   move.l 50(sp),d2
    4fe2:	|        |   move.l 46(sp),d3
    4fe6:	|        |   jsr -48(a6)
    4fea:	|        |   move.l d0,42(sp)
		return FALSE;
    4fee:	|        |   clr.w d0
    4ff0:	+--------|-- bra.w 5122 <initSludge+0x76e>
	}

	FreeVec(gameName);
    4ff4:	|        \-> move.l 138(sp),102(sp)
    4ffa:	|            move.l 1b1d8 <SysBase>,d0
    5000:	|            movea.l d0,a6
    5002:	|            movea.l 102(sp),a1
    5006:	|            jsr -690(a6)

	readIniFile (filename);
    500a:	|            move.l 316(sp),-(sp)
    500e:	|            jsr 1274a <readIniFile>
    5014:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    5016:	|            jsr 1251c <getLanguageForFileB>
    501c:	|            move.l d0,1ab56 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    5022:	|            move.l 1ab56 <languageNum>,d0
    5028:	|        /-- bpl.s 5038 <initSludge+0x684>
    502a:	|        |   pea 17266 <PutChar+0xcf0>
    5030:	|        |   jsr 15c26 <KPrintF>
    5036:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    5038:	|        \-> move.l 1ab56 <languageNum>,d0
    503e:	|            move.l d0,d1
    5040:	|            move.l 1b310 <gameSettings+0x4>,d0
    5046:	|            move.l d1,-(sp)
    5048:	|            move.l d0,-(sp)
    504a:	|            clr.l -(sp)
    504c:	|            jsr 5ebe <setFileIndices>
    5052:	|            lea 12(sp),sp

	if (dataFol[0]) {
    5056:	|            movea.l 200(sp),a0
    505a:	|            move.b (a0),d0
    505c:	|     /----- beq.w 5106 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    5060:	|     |      move.l 200(sp),-(sp)
    5064:	|     |      jsr 2fe <encodeFilename>
    506a:	|     |      addq.l #4,sp
    506c:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    5070:	|     |      move.l 98(sp),94(sp)
    5076:	|     |      move.l 1b1e0 <DOSBase>,d0
    507c:	|     |      movea.l d0,a6
    507e:	|     |      move.l 94(sp),d1
    5082:	|     |      jsr -120(a6)
    5086:	|     |      move.l d0,90(sp)
    508a:	|     |      move.l 90(sp),d0
    508e:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    5092:	|     |  /-- bne.s 50c0 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    5094:	|     |  |   move.l 98(sp),86(sp)
    509a:	|     |  |   moveq #-2,d1
    509c:	|     |  |   move.l d1,82(sp)
    50a0:	|     |  |   move.l 1b1e0 <DOSBase>,d0
    50a6:	|     |  |   movea.l d0,a6
    50a8:	|     |  |   move.l 86(sp),d1
    50ac:	|     |  |   move.l 82(sp),d2
    50b0:	|     |  |   jsr -84(a6)
    50b4:	|     |  |   move.l d0,78(sp)
    50b8:	|     |  |   move.l 78(sp),d0
    50bc:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    50c0:	|     |  \-> move.l 292(sp),74(sp)
    50c6:	|     |      move.l 1b1e0 <DOSBase>,d0
    50cc:	|     |      movea.l d0,a6
    50ce:	|     |      move.l 74(sp),d1
    50d2:	|     |      jsr -126(a6)
    50d6:	|     |      move.l d0,70(sp)
    50da:	|     |      move.l 70(sp),d0
    50de:	|     |  /-- bne.s 50f0 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    50e0:	|     |  |   move.l 1b1e0 <DOSBase>,d0
    50e6:	|     |  |   movea.l d0,a6
    50e8:	|     |  |   jsr -60(a6)
    50ec:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    50f0:	|     |  \-> move.l 98(sp),62(sp)
    50f6:	|     |      move.l 1b1d8 <SysBase>,d0
    50fc:	|     |      movea.l d0,a6
    50fe:	|     |      movea.l 62(sp),a1
    5102:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    5106:	|     \----> movea.l 1b130 <winHeight>,a0
    510c:	|            lea -15(a0),a0
    5110:	|            move.l a0,d0
    5112:	|            move.l d0,-(sp)
    5114:	|            pea a <_start+0xa>
    5118:	|            jsr 68f0 <positionStatus>
    511e:	|            addq.l #8,sp

	return TRUE;
    5120:	|            moveq #1,d0
}
    5122:	\----------> movem.l (sp)+,d2-d4/a2/a6
    5126:	             lea 292(sp),sp
    512a:	             rts

0000512c <killSpeechTimers>:

void killSpeechTimers () {
    512c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    512e:	          move.l 1b170 <allRunningFunctions>,(sp)

	while (thisFunction) {
    5134:	   /----- bra.s 5160 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5136:	/--|----> movea.l (sp),a0
    5138:	|  |      move.b 56(a0),d0
    513c:	|  |  /-- bne.s 515a <killSpeechTimers+0x2e>
    513e:	|  |  |   movea.l (sp),a0
    5140:	|  |  |   move.w 50(a0),d0
    5144:	|  |  +-- beq.s 515a <killSpeechTimers+0x2e>
    5146:	|  |  |   movea.l (sp),a0
    5148:	|  |  |   move.l 12(a0),d0
    514c:	|  |  +-- beq.s 515a <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    514e:	|  |  |   movea.l (sp),a0
    5150:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    5154:	|  |  |   movea.l (sp),a0
    5156:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    515a:	|  |  \-> movea.l (sp),a0
    515c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5160:	|  \----> tst.l (sp)
    5162:	\-------- bne.s 5136 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    5164:	          jsr 6e2e <killAllSpeech>
}
    516a:	          nop
    516c:	          addq.l #4,sp
    516e:	          rts

00005170 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    5170:	             lea -52(sp),sp
    5174:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    5176:	             movea.l 60(sp),a0
    517a:	             move.l (a0),d0
    517c:	             move.l d0,-(sp)
    517e:	             jsr 5dfe <openSubSlice>
    5184:	             addq.l #4,sp
    5186:	             tst.w d0
    5188:	         /-- bne.s 5190 <loadFunctionCode+0x20>
    518a:	         |   clr.w d0
    518c:	/--------|-- bra.w 535a <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    5190:	|        \-> move.l 1b1c0 <bigDataFile>,44(sp)
    5198:	|            move.l 1b1e0 <DOSBase>,d0
    519e:	|            movea.l d0,a6
    51a0:	|            move.l 44(sp),d1
    51a4:	|            jsr -306(a6)
    51a8:	|            move.l d0,40(sp)
    51ac:	|            move.l 40(sp),d0
    51b0:	|            move.l d0,d0
    51b2:	|            movea.l 60(sp),a0
    51b6:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    51ba:	|            move.l 1b1c0 <bigDataFile>,d0
    51c0:	|            move.l d0,-(sp)
    51c2:	|            jsr 6bc <get2bytes>
    51c8:	|            addq.l #4,sp
    51ca:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    51ce:	|            move.l 1b1c0 <bigDataFile>,d0
    51d4:	|            move.l d0,-(sp)
    51d6:	|            jsr 6bc <get2bytes>
    51dc:	|            addq.l #4,sp
    51de:	|            movea.l 60(sp),a0
    51e2:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    51e6:	|            move.l 1b1c0 <bigDataFile>,d0
    51ec:	|            move.l d0,-(sp)
    51ee:	|            jsr 6bc <get2bytes>
    51f4:	|            addq.l #4,sp
    51f6:	|            movea.l 60(sp),a0
    51fa:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    51fe:	|            move.l 36(sp),d0
    5202:	|            lsl.l #3,d0
    5204:	|            move.l d0,32(sp)
    5208:	|            clr.l 28(sp)
    520c:	|            move.l 1b1d8 <SysBase>,d0
    5212:	|            movea.l d0,a6
    5214:	|            move.l 32(sp),d0
    5218:	|            move.l 28(sp),d1
    521c:	|            jsr -684(a6)
    5220:	|            move.l d0,24(sp)
    5224:	|            move.l 24(sp),d0
    5228:	|            movea.l 60(sp),a0
    522c:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    5230:	|            movea.l 60(sp),a0
    5234:	|            move.l 4(a0),d0
    5238:	|        /-- bne.s 524e <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    523a:	|        |   pea 17291 <PutChar+0xd1b>
    5240:	|        |   jsr 15c26 <KPrintF>
    5246:	|        |   addq.l #4,sp
		return FALSE;
    5248:	|        |   clr.w d0
    524a:	+--------|-- bra.w 535a <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    524e:	|        \-> clr.l 52(sp)
    5252:	|        /-- bra.s 52b4 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    5254:	|     /--|-> move.l 1b1c0 <bigDataFile>,8(sp)
    525c:	|     |  |   move.l 1b1e0 <DOSBase>,d0
    5262:	|     |  |   movea.l d0,a6
    5264:	|     |  |   move.l 8(sp),d1
    5268:	|     |  |   jsr -306(a6)
    526c:	|     |  |   move.l d0,4(sp)
    5270:	|     |  |   move.l 4(sp),d1
    5274:	|     |  |   movea.l 60(sp),a0
    5278:	|     |  |   movea.l 4(a0),a0
    527c:	|     |  |   move.l 52(sp),d0
    5280:	|     |  |   lsl.l #3,d0
    5282:	|     |  |   adda.l d0,a0
    5284:	|     |  |   move.l d1,d0
    5286:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    5288:	|     |  |   move.l 1b1c0 <bigDataFile>,d0
    528e:	|     |  |   move.l d0,-(sp)
    5290:	|     |  |   jsr 6bc <get2bytes>
    5296:	|     |  |   addq.l #4,sp
    5298:	|     |  |   move.l d0,d1
    529a:	|     |  |   movea.l 60(sp),a0
    529e:	|     |  |   movea.l 4(a0),a0
    52a2:	|     |  |   move.l 52(sp),d0
    52a6:	|     |  |   lsl.l #3,d0
    52a8:	|     |  |   adda.l d0,a0
    52aa:	|     |  |   move.l d1,d0
    52ac:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    52b0:	|     |  |   addq.l #1,52(sp)
    52b4:	|     |  \-> move.l 52(sp),d0
    52b8:	|     |      cmp.l 36(sp),d0
    52bc:	|     \----- bcs.s 5254 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    52be:	|            jsr 5b6e <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    52c4:	|            movea.l 60(sp),a0
    52c8:	|            move.l 8(a0),d0
    52cc:	|  /-------- ble.w 5350 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    52d0:	|  |         movea.l 60(sp),a0
    52d4:	|  |         move.l 8(a0),d0
    52d8:	|  |         lsl.l #3,d0
    52da:	|  |         move.l d0,20(sp)
    52de:	|  |         clr.l 16(sp)
    52e2:	|  |         move.l 1b1d8 <SysBase>,d0
    52e8:	|  |         movea.l d0,a6
    52ea:	|  |         move.l 20(sp),d0
    52ee:	|  |         move.l 16(sp),d1
    52f2:	|  |         jsr -684(a6)
    52f6:	|  |         move.l d0,12(sp)
    52fa:	|  |         move.l 12(sp),d0
    52fe:	|  |         movea.l 60(sp),a0
    5302:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    5306:	|  |         movea.l 60(sp),a0
    530a:	|  |         move.l 20(a0),d0
    530e:	|  |     /-- bne.s 5322 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    5310:	|  |     |   pea 17291 <PutChar+0xd1b>
    5316:	|  |     |   jsr 15c26 <KPrintF>
    531c:	|  |     |   addq.l #4,sp
			return FALSE;
    531e:	|  |     |   clr.w d0
    5320:	+--|-----|-- bra.s 535a <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    5322:	|  |     \-> clr.l 48(sp)
    5326:	|  |     /-- bra.s 5340 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    5328:	|  |  /--|-> movea.l 60(sp),a0
    532c:	|  |  |  |   move.l 20(a0),d1
    5330:	|  |  |  |   move.l 48(sp),d0
    5334:	|  |  |  |   lsl.l #3,d0
    5336:	|  |  |  |   movea.l d1,a0
    5338:	|  |  |  |   adda.l d0,a0
    533a:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    533c:	|  |  |  |   addq.l #1,48(sp)
    5340:	|  |  |  \-> movea.l 60(sp),a0
    5344:	|  |  |      move.l 8(a0),d0
    5348:	|  |  |      cmp.l 48(sp),d0
    534c:	|  |  \----- bgt.s 5328 <loadFunctionCode+0x1b8>
    534e:	|  |     /-- bra.s 5358 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    5350:	|  \-----|-> movea.l 60(sp),a0
    5354:	|        |   clr.l 8(a0)
	}
	return TRUE;
    5358:	|        \-> moveq #1,d0
}
    535a:	\----------> movea.l (sp)+,a6
    535c:	             lea 52(sp),sp
    5360:	             rts

00005362 <loadHandlers>:

void loadHandlers (BPTR fp) {
    5362:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    5364:	movea.l 1ab52 <currentEvents>,a2
    536a:	move.l 8(sp),-(sp)
    536e:	jsr 6bc <get2bytes>
    5374:	addq.l #4,sp
    5376:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    5378:	movea.l 1ab52 <currentEvents>,a2
    537e:	move.l 8(sp),-(sp)
    5382:	jsr 6bc <get2bytes>
    5388:	addq.l #4,sp
    538a:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    538e:	movea.l 1ab52 <currentEvents>,a2
    5394:	move.l 8(sp),-(sp)
    5398:	jsr 6bc <get2bytes>
    539e:	addq.l #4,sp
    53a0:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    53a4:	movea.l 1ab52 <currentEvents>,a2
    53aa:	move.l 8(sp),-(sp)
    53ae:	jsr 6bc <get2bytes>
    53b4:	addq.l #4,sp
    53b6:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    53ba:	movea.l 1ab52 <currentEvents>,a2
    53c0:	move.l 8(sp),-(sp)
    53c4:	jsr 6bc <get2bytes>
    53ca:	addq.l #4,sp
    53cc:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    53d0:	movea.l 1ab52 <currentEvents>,a2
    53d6:	move.l 8(sp),-(sp)
    53da:	jsr 6bc <get2bytes>
    53e0:	addq.l #4,sp
    53e2:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    53e6:	movea.l 1ab52 <currentEvents>,a2
    53ec:	move.l 8(sp),-(sp)
    53f0:	jsr 6bc <get2bytes>
    53f6:	addq.l #4,sp
    53f8:	move.l d0,24(a2)
}
    53fc:	nop
    53fe:	movea.l (sp)+,a2
    5400:	rts

00005402 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    5402:	       lea -312(sp),sp
    5406:	       movem.l d2-d3/a6,-(sp)
    540a:	       move.l 332(sp),d1
    540e:	       move.l 336(sp),d0
    5412:	       move.b d1,d1
    5414:	       move.b d1,16(sp)
    5418:	       move.b d0,d0
    541a:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    541e:	       move.l 328(sp),318(sp)
    5424:	       move.l #1005,314(sp)
    542c:	       move.l 1b1e0 <DOSBase>,d0
    5432:	       movea.l d0,a6
    5434:	       move.l 318(sp),d1
    5438:	       move.l 314(sp),d2
    543c:	       jsr -30(a6)
    5440:	       move.l d0,310(sp)
    5444:	       move.l 310(sp),d0
    5448:	       move.l d0,306(sp)

	if (! fp) {
    544c:	   /-- bne.s 54a8 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    544e:	   |   move.l 1b1e0 <DOSBase>,d0
    5454:	   |   movea.l d0,a6
    5456:	   |   jsr -60(a6)
    545a:	   |   move.l d0,154(sp)
    545e:	   |   move.l 154(sp),d0
    5462:	   |   move.l d0,150(sp)
    5466:	   |   move.l #94906,146(sp)
    546e:	   |   moveq #31,d0
    5470:	   |   move.l d0,142(sp)
    5474:	   |   move.l 1b1e0 <DOSBase>,d0
    547a:	   |   movea.l d0,a6
    547c:	   |   move.l 150(sp),d1
    5480:	   |   move.l 146(sp),d2
    5484:	   |   move.l 142(sp),d3
    5488:	   |   jsr -48(a6)
    548c:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    5490:	   |   move.l 328(sp),-(sp)
    5494:	   |   pea 172da <PutChar+0xd64>
    549a:	   |   jsr 15c26 <KPrintF>
    54a0:	   |   addq.l #8,sp
		return NULL;
    54a2:	   |   moveq #0,d0
    54a4:	/--|-- bra.w 5768 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    54a8:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    54ac:	|      move.l 306(sp),302(sp)
    54b2:	|      move.l 1b1e0 <DOSBase>,d0
    54b8:	|      movea.l d0,a6
    54ba:	|      move.l 302(sp),d1
    54be:	|      jsr -306(a6)
    54c2:	|      move.l d0,298(sp)
    54c6:	|      move.l 298(sp),d0
    54ca:	|      moveq #83,d1
    54cc:	|      cmp.l d0,d1
    54ce:	|  /-- beq.s 54d6 <openAndVerify+0xd4>
    54d0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    54d6:	|  \-> move.l 306(sp),294(sp)
    54dc:	|      move.l 1b1e0 <DOSBase>,d0
    54e2:	|      movea.l d0,a6
    54e4:	|      move.l 294(sp),d1
    54e8:	|      jsr -306(a6)
    54ec:	|      move.l d0,290(sp)
    54f0:	|      move.l 290(sp),d0
    54f4:	|      moveq #76,d1
    54f6:	|      cmp.l d0,d1
    54f8:	|  /-- beq.s 5500 <openAndVerify+0xfe>
    54fa:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    5500:	|  \-> move.l 306(sp),286(sp)
    5506:	|      move.l 1b1e0 <DOSBase>,d0
    550c:	|      movea.l d0,a6
    550e:	|      move.l 286(sp),d1
    5512:	|      jsr -306(a6)
    5516:	|      move.l d0,282(sp)
    551a:	|      move.l 282(sp),d0
    551e:	|      moveq #85,d1
    5520:	|      cmp.l d0,d1
    5522:	|  /-- beq.s 552a <openAndVerify+0x128>
    5524:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    552a:	|  \-> move.l 306(sp),278(sp)
    5530:	|      move.l 1b1e0 <DOSBase>,d0
    5536:	|      movea.l d0,a6
    5538:	|      move.l 278(sp),d1
    553c:	|      jsr -306(a6)
    5540:	|      move.l d0,274(sp)
    5544:	|      move.l 274(sp),d0
    5548:	|      moveq #68,d1
    554a:	|      cmp.l d0,d1
    554c:	|  /-- beq.s 5554 <openAndVerify+0x152>
    554e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    5554:	|  \-> move.l 306(sp),270(sp)
    555a:	|      move.l 1b1e0 <DOSBase>,d0
    5560:	|      movea.l d0,a6
    5562:	|      move.l 270(sp),d1
    5566:	|      jsr -306(a6)
    556a:	|      move.l d0,266(sp)
    556e:	|      move.l 266(sp),d1
    5572:	|      move.b 16(sp),d0
    5576:	|      ext.w d0
    5578:	|      movea.w d0,a0
    557a:	|      cmpa.l d1,a0
    557c:	|  /-- beq.s 5584 <openAndVerify+0x182>
    557e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    5584:	|  \-> move.l 306(sp),262(sp)
    558a:	|      move.l 1b1e0 <DOSBase>,d0
    5590:	|      movea.l d0,a6
    5592:	|      move.l 262(sp),d1
    5596:	|      jsr -306(a6)
    559a:	|      move.l d0,258(sp)
    559e:	|      move.l 258(sp),d1
    55a2:	|      move.b 14(sp),d0
    55a6:	|      ext.w d0
    55a8:	|      movea.w d0,a0
    55aa:	|      cmpa.l d1,a0
    55ac:	|  /-- beq.s 55b4 <openAndVerify+0x1b2>
    55ae:	|  |   move.w #1,322(sp)
	if (headerBad) {
    55b4:	|  \-> tst.w 322(sp)
    55b8:	|  /-- beq.s 5610 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    55ba:	|  |   move.l 1b1e0 <DOSBase>,d0
    55c0:	|  |   movea.l d0,a6
    55c2:	|  |   jsr -60(a6)
    55c6:	|  |   move.l d0,174(sp)
    55ca:	|  |   move.l 174(sp),d0
    55ce:	|  |   move.l d0,170(sp)
    55d2:	|  |   move.l #94969,166(sp)
    55da:	|  |   moveq #31,d0
    55dc:	|  |   move.l d0,162(sp)
    55e0:	|  |   move.l 1b1e0 <DOSBase>,d0
    55e6:	|  |   movea.l d0,a6
    55e8:	|  |   move.l 170(sp),d1
    55ec:	|  |   move.l 166(sp),d2
    55f0:	|  |   move.l 162(sp),d3
    55f4:	|  |   jsr -48(a6)
    55f8:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    55fc:	|  |   pea 172f9 <PutChar+0xd83>
    5602:	|  |   jsr 15c26 <KPrintF>
    5608:	|  |   addq.l #4,sp
		return NULL;
    560a:	|  |   moveq #0,d0
    560c:	+--|-- bra.w 5768 <openAndVerify+0x366>
	}
	FGetC (fp);
    5610:	|  \-> move.l 306(sp),254(sp)
    5616:	|      move.l 1b1e0 <DOSBase>,d0
    561c:	|      movea.l d0,a6
    561e:	|      move.l 254(sp),d1
    5622:	|      jsr -306(a6)
    5626:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    562a:	|      nop
    562c:	|  /-> move.l 306(sp),246(sp)
    5632:	|  |   move.l 1b1e0 <DOSBase>,d0
    5638:	|  |   movea.l d0,a6
    563a:	|  |   move.l 246(sp),d1
    563e:	|  |   jsr -306(a6)
    5642:	|  |   move.l d0,242(sp)
    5646:	|  |   move.l 242(sp),d0
    564a:	|  \-- bne.s 562c <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    564c:	|      move.l 306(sp),238(sp)
    5652:	|      move.l 1b1e0 <DOSBase>,d0
    5658:	|      movea.l d0,a6
    565a:	|      move.l 238(sp),d1
    565e:	|      jsr -306(a6)
    5662:	|      move.l d0,234(sp)
    5666:	|      move.l 234(sp),d0
    566a:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    566e:	|      move.l 306(sp),226(sp)
    5674:	|      move.l 1b1e0 <DOSBase>,d0
    567a:	|      movea.l d0,a6
    567c:	|      move.l 226(sp),d1
    5680:	|      jsr -306(a6)
    5684:	|      move.l d0,222(sp)
    5688:	|      move.l 222(sp),d0
    568c:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    5690:	|      move.l 230(sp),d0
    5694:	|      lsl.l #8,d0
    5696:	|      add.l 218(sp),d0
    569a:	|      movea.l 344(sp),a0
    569e:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    56a0:	|      movea.l 344(sp),a0
    56a4:	|      move.l (a0),d0
    56a6:	|      cmpi.l #514,d0
    56ac:	|  /-- ble.s 5702 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    56ae:	|  |   move.l 1b1e0 <DOSBase>,d0
    56b4:	|  |   movea.l d0,a6
    56b6:	|  |   jsr -60(a6)
    56ba:	|  |   move.l d0,194(sp)
    56be:	|  |   move.l 194(sp),d0
    56c2:	|  |   move.l d0,190(sp)
    56c6:	|  |   move.l #94996,186(sp)
    56ce:	|  |   moveq #100,d1
    56d0:	|  |   move.l d1,182(sp)
    56d4:	|  |   move.l 1b1e0 <DOSBase>,d0
    56da:	|  |   movea.l d0,a6
    56dc:	|  |   move.l 190(sp),d1
    56e0:	|  |   move.l 186(sp),d2
    56e4:	|  |   move.l 182(sp),d3
    56e8:	|  |   jsr -48(a6)
    56ec:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    56f0:	|  |   pea 17314 <PutChar+0xd9e>
    56f6:	|  |   jsr 15c26 <KPrintF>
    56fc:	|  |   addq.l #4,sp
		return NULL;
    56fe:	|  |   moveq #0,d0
    5700:	+--|-- bra.s 5768 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    5702:	|  \-> movea.l 344(sp),a0
    5706:	|      move.l (a0),d0
    5708:	|      cmpi.l #257,d0
    570e:	|  /-- bgt.s 5764 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    5710:	|  |   move.l 1b1e0 <DOSBase>,d0
    5716:	|  |   movea.l d0,a6
    5718:	|  |   jsr -60(a6)
    571c:	|  |   move.l d0,214(sp)
    5720:	|  |   move.l 214(sp),d0
    5724:	|  |   move.l d0,210(sp)
    5728:	|  |   move.l #95065,206(sp)
    5730:	|  |   moveq #100,d0
    5732:	|  |   move.l d0,202(sp)
    5736:	|  |   move.l 1b1e0 <DOSBase>,d0
    573c:	|  |   movea.l d0,a6
    573e:	|  |   move.l 210(sp),d1
    5742:	|  |   move.l 206(sp),d2
    5746:	|  |   move.l 202(sp),d3
    574a:	|  |   jsr -48(a6)
    574e:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    5752:	|  |   pea 17359 <PutChar+0xde3>
    5758:	|  |   jsr 15c26 <KPrintF>
    575e:	|  |   addq.l #4,sp
		return NULL;
    5760:	|  |   moveq #0,d0
    5762:	+--|-- bra.s 5768 <openAndVerify+0x366>
	}
	return fp;
    5764:	|  \-> move.l 306(sp),d0
}
    5768:	\----> movem.l (sp)+,d2-d3/a6
    576c:	       lea 312(sp),sp
    5770:	       rts

00005772 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    5772:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    5774:	          move.l #110960,(sp)
	while (* huntAndDestroy) {
    577a:	   /----- bra.s 57a6 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    577c:	/--|----> movea.l (sp),a0
    577e:	|  |      move.l (a0),d0
    5780:	|  |      cmp.l 8(sp),d0
    5784:	|  |  /-- bne.s 579c <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    5786:	|  |  |   movea.l (sp),a0
    5788:	|  |  |   movea.l (a0),a0
    578a:	|  |  |   move.l 44(a0),d0
    578e:	|  |  |   movea.l (sp),a0
    5790:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    5792:	|  |  |   movea.l 8(sp),a0
    5796:	|  |  |   clr.l 44(a0)
    579a:	|  +--|-- bra.s 57a6 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    579c:	|  |  \-> movea.l (sp),a0
    579e:	|  |      move.l (a0),d0
    57a0:	|  |      moveq #44,d1
    57a2:	|  |      add.l d0,d1
    57a4:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    57a6:	|  \----> movea.l (sp),a0
    57a8:	|         move.l (a0),d0
    57aa:	\-------- bne.s 577c <pauseFunction+0xa>
		}
	}
}
    57ac:	          nop
    57ae:	          nop
    57b0:	          addq.l #4,sp
    57b2:	          rts

000057b4 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    57b4:	move.l 1b170 <allRunningFunctions>,d0
    57ba:	movea.l 4(sp),a0
    57be:	move.l d0,44(a0)
	allRunningFunctions = fun;
    57c2:	move.l 4(sp),1b170 <allRunningFunctions>
}
    57ca:	nop
    57cc:	rts

000057ce <runSludge>:

BOOL runSludge () {
    57ce:	                   lea -12(sp),sp
    57d2:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    57d4:	                   move.l 1b170 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    57dc:	      /----------- bra.s 5858 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    57de:	   /--|----------> movea.l 12(sp),a0
    57e2:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    57e8:	   |  |            movea.l 12(sp),a0
    57ec:	   |  |            move.b 56(a0),d0
    57f0:	   |  |  /-------- bne.s 5852 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    57f2:	   |  |  |         movea.l 12(sp),a0
    57f6:	   |  |  |         move.l 12(a0),d0
    57fa:	   |  |  |  /----- beq.s 5824 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    57fc:	   |  |  |  |      movea.l 12(sp),a0
    5800:	   |  |  |  |      move.l 12(a0),d0
    5804:	   |  |  |  |  /-- bpl.s 5810 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    5806:	   |  |  |  |  |   movea.l 12(sp),a0
    580a:	   |  |  |  |  |   clr.l 12(a0)
    580e:	   |  |  +--|--|-- bra.s 5852 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    5810:	   |  |  |  |  \-> movea.l 12(sp),a0
    5814:	   |  |  |  |      move.l 12(a0),d0
    5818:	   |  |  |  |      subq.l #1,d0
    581a:	   |  |  |  |      movea.l 12(sp),a0
    581e:	   |  |  |  |      move.l d0,12(a0)
    5822:	   |  |  +--|----- bra.s 5852 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    5824:	   |  |  |  \----> movea.l 12(sp),a0
    5828:	   |  |  |         move.w 50(a0),d0
    582c:	   |  |  |     /-- beq.s 583c <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    582e:	   |  |  |     |   movea.l 12(sp),a0
    5832:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    5836:	   |  |  |     |   jsr 6e2e <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    583c:	   |  |  |     \-> move.l 12(sp),-(sp)
    5840:	   |  |  |         jsr 379c <continueFunction>
    5846:	   |  |  |         addq.l #4,sp
    5848:	   |  |  |         tst.w d0
    584a:	   |  |  +-------- bne.s 5852 <runSludge+0x84>
					return FALSE;
    584c:	   |  |  |         clr.w d0
    584e:	/--|--|--|-------- bra.w 58de <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    5852:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    5858:	|  |  \----------> tst.l 12(sp)
    585c:	|  \-------------- bne.s 57de <runSludge+0x10>
	}

	if (loadNow) {
    585e:	|                  move.l 1b1a4 <loadNow>,d0
    5864:	|        /-------- beq.s 58dc <runSludge+0x10e>
		if (loadNow[0] == ':') {
    5866:	|        |         movea.l 1b1a4 <loadNow>,a0
    586c:	|        |         move.b (a0),d0
    586e:	|        |         cmpi.b #58,d0
    5872:	|        |  /----- bne.s 58a6 <runSludge+0xd8>
			saveGame (loadNow + 1);
    5874:	|        |  |      move.l 1b1a4 <loadNow>,d0
    587a:	|        |  |      addq.l #1,d0
    587c:	|        |  |      move.l d0,-(sp)
    587e:	|        |  |      jsr b706 <saveGame>
    5884:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    5886:	|        |  |      movea.l 1b2fa <saverFunc>,a0
    588c:	|        |  |      lea 28(a0),a0
    5890:	|        |  |      pea 1 <_start+0x1>
    5894:	|        |  |      pea 1 <_start+0x1>
    5898:	|        |  |      move.l a0,-(sp)
    589a:	|        |  |      jsr 14026 <setVariable>
    58a0:	|        |  |      lea 12(sp),sp
    58a4:	|        |  |  /-- bra.s 58be <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    58a6:	|        |  \--|-> move.l 1b1a4 <loadNow>,d0
    58ac:	|        |     |   move.l d0,-(sp)
    58ae:	|        |     |   jsr b24e <loadGame>
    58b4:	|        |     |   addq.l #4,sp
    58b6:	|        |     |   tst.w d0
    58b8:	|        |     +-- bne.s 58be <runSludge+0xf0>
    58ba:	|        |     |   clr.w d0
    58bc:	+--------|-----|-- bra.s 58de <runSludge+0x110>
		}
		FreeVec(loadNow);
    58be:	|        |     \-> move.l 1b1a4 <loadNow>,8(sp)
    58c6:	|        |         move.l 1b1d8 <SysBase>,d0
    58cc:	|        |         movea.l d0,a6
    58ce:	|        |         movea.l 8(sp),a1
    58d2:	|        |         jsr -690(a6)
		loadNow = NULL;
    58d6:	|        |         clr.l 1b1a4 <loadNow>
	}

	return TRUE;
    58dc:	|        \-------> moveq #1,d0
}
    58de:	\----------------> movea.l (sp)+,a6
    58e0:	                   lea 12(sp),sp
    58e4:	                   rts

000058e6 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    58e6:	movea.l 1ab52 <currentEvents>,a0
    58ec:	move.l (a0),d0
    58ee:	move.l 4(sp),-(sp)
    58f2:	move.l d0,-(sp)
    58f4:	jsr 8d0 <put2bytes>
    58fa:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    58fc:	movea.l 1ab52 <currentEvents>,a0
    5902:	move.l 4(a0),d0
    5906:	move.l 4(sp),-(sp)
    590a:	move.l d0,-(sp)
    590c:	jsr 8d0 <put2bytes>
    5912:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    5914:	movea.l 1ab52 <currentEvents>,a0
    591a:	move.l 8(a0),d0
    591e:	move.l 4(sp),-(sp)
    5922:	move.l d0,-(sp)
    5924:	jsr 8d0 <put2bytes>
    592a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    592c:	movea.l 1ab52 <currentEvents>,a0
    5932:	move.l 12(a0),d0
    5936:	move.l 4(sp),-(sp)
    593a:	move.l d0,-(sp)
    593c:	jsr 8d0 <put2bytes>
    5942:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    5944:	movea.l 1ab52 <currentEvents>,a0
    594a:	move.l 16(a0),d0
    594e:	move.l 4(sp),-(sp)
    5952:	move.l d0,-(sp)
    5954:	jsr 8d0 <put2bytes>
    595a:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    595c:	movea.l 1ab52 <currentEvents>,a0
    5962:	move.l 20(a0),d0
    5966:	move.l 4(sp),-(sp)
    596a:	move.l d0,-(sp)
    596c:	jsr 8d0 <put2bytes>
    5972:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    5974:	movea.l 1ab52 <currentEvents>,a0
    597a:	move.l 24(a0),d0
    597e:	move.l 4(sp),-(sp)
    5982:	move.l d0,-(sp)
    5984:	jsr 8d0 <put2bytes>
    598a:	addq.l #8,sp
}
    598c:	nop
    598e:	rts

00005990 <sludgeDisplay>:

void sludgeDisplay () {					
    5990:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    5992:	move.l #14675968,(sp)
	displayCursor();
    5998:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    599e:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    59a4:	jsr 1bc8 <CstRestoreScreen>
	drawPeople();
    59aa:	jsr 906e <drawPeople>
	CstSwapBuffer();
    59b0:	jsr 2964 <CstSwapBuffer>
}
    59b6:	nop
    59b8:	addq.l #4,sp
    59ba:	rts

000059bc <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    59bc:	      /-- bra.s 59dc <stackSetByIndex+0x20>
		vS = vS->next;
    59be:	/-----|-> movea.l 4(sp),a0
    59c2:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    59c8:	|     +-- bne.s 59dc <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    59ca:	|     |   pea 173a0 <PutChar+0xe2a>
    59d0:	|     |   jsr 15c26 <KPrintF>
    59d6:	|     |   addq.l #4,sp
			return FALSE;
    59d8:	|     |   clr.w d0
    59da:	|  /--|-- bra.s 59fe <stackSetByIndex+0x42>
	while (theIndex--) {
    59dc:	|  |  \-> move.l 8(sp),d0
    59e0:	|  |      move.l d0,d1
    59e2:	|  |      subq.l #1,d1
    59e4:	|  |      move.l d1,8(sp)
    59e8:	|  |      tst.l d0
    59ea:	\--|----- bne.s 59be <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    59ec:	   |      move.l 4(sp),d0
    59f0:	   |      move.l d0,-(sp)
    59f2:	   |      move.l 16(sp),-(sp)
    59f6:	   |      jsr 13bee <copyVariable>
    59fc:	   |      addq.l #8,sp
}
    59fe:	   \----> rts

00005a00 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    5a00:	             lea -24(sp),sp
    5a04:	             move.l a6,-(sp)
    5a06:	             move.l 48(sp),d0
    5a0a:	             move.w d0,d0
    5a0c:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    5a10:	             moveq #58,d0
    5a12:	             move.l d0,24(sp)
    5a16:	             clr.l 20(sp)
    5a1a:	             move.l 1b1d8 <SysBase>,d0
    5a20:	             movea.l d0,a6
    5a22:	             move.l 24(sp),d0
    5a26:	             move.l 20(sp),d1
    5a2a:	             jsr -684(a6)
    5a2e:	             move.l d0,16(sp)
    5a32:	             move.l 16(sp),d0
    5a36:	             move.l d0,12(sp)
	if(!newFunc) {
    5a3a:	         /-- bne.s 5a50 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    5a3c:	         |   pea 173b9 <PutChar+0xe43>
    5a42:	         |   jsr 15c26 <KPrintF>
    5a48:	         |   addq.l #4,sp
		return 0;
    5a4a:	         |   moveq #0,d0
    5a4c:	/--------|-- bra.w 5b66 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    5a50:	|        \-> move.l 32(sp),d0
    5a54:	|            movea.l 12(sp),a0
    5a58:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    5a5a:	|            move.l 12(sp),-(sp)
    5a5e:	|            jsr 5170 <loadFunctionCode>
    5a64:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    5a66:	|            movea.l 12(sp),a0
    5a6a:	|            move.l 16(a0),d1
    5a6e:	|            move.l 36(sp),d0
    5a72:	|            cmp.l d1,d0
    5a74:	|        /-- beq.s 5a8a <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    5a76:	|        |   pea 173e2 <PutChar+0xe6c>
    5a7c:	|        |   jsr 15c26 <KPrintF>
    5a82:	|        |   addq.l #4,sp
		return NULL; 
    5a84:	|        |   moveq #0,d0
    5a86:	+--------|-- bra.w 5b66 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    5a8a:	|        \-> movea.l 12(sp),a0
    5a8e:	|            move.l 16(a0),d1
    5a92:	|            movea.l 12(sp),a0
    5a96:	|            move.l 8(a0),d0
    5a9a:	|            cmp.l d1,d0
    5a9c:	|  /-------- bge.s 5b06 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    5a9e:	|  |         pea 173fe <PutChar+0xe88>
    5aa4:	|  |         jsr 15c26 <KPrintF>
    5aaa:	|  |         addq.l #4,sp
		return NULL; 
    5aac:	|  |         moveq #0,d0
    5aae:	+--|-------- bra.w 5b66 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    5ab2:	|  |  /----> movea.l 44(sp),a0
    5ab6:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    5aba:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    5abe:	|  |  |      movea.l 44(sp),a0
    5ac2:	|  |  |      move.l (a0),d0
    5ac4:	|  |  |  /-- bne.s 5ada <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    5ac6:	|  |  |  |   pea 17428 <PutChar+0xeb2>
    5acc:	|  |  |  |   jsr 15c26 <KPrintF>
    5ad2:	|  |  |  |   addq.l #4,sp
			return NULL;
    5ad4:	|  |  |  |   moveq #0,d0
    5ad6:	+--|--|--|-- bra.w 5b66 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    5ada:	|  |  |  \-> movea.l 12(sp),a0
    5ade:	|  |  |      move.l 20(a0),d1
    5ae2:	|  |  |      move.l 36(sp),d0
    5ae6:	|  |  |      lsl.l #3,d0
    5ae8:	|  |  |      add.l d0,d1
    5aea:	|  |  |      move.l 8(sp),d0
    5aee:	|  |  |      move.l d1,-(sp)
    5af0:	|  |  |      move.l d0,-(sp)
    5af2:	|  |  |      jsr 13bee <copyVariable>
    5af8:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    5afa:	|  |  |      move.l 44(sp),-(sp)
    5afe:	|  |  |      jsr 140b8 <trimStack>
    5b04:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    5b06:	|  \--|----> tst.l 36(sp)
    5b0a:	|     \----- bne.s 5ab2 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    5b0c:	|            movea.l 12(sp),a0
    5b10:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    5b14:	|            movea.l 12(sp),a0
    5b18:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    5b1c:	|            movea.l 12(sp),a0
    5b20:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    5b26:	|            movea.l 12(sp),a0
    5b2a:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    5b30:	|            movea.l 12(sp),a0
    5b34:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    5b38:	|            movea.l 12(sp),a0
    5b3c:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    5b40:	|            movea.l 12(sp),a0
    5b44:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    5b48:	|            movea.l 12(sp),a0
    5b4c:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    5b50:	|            movea.l 12(sp),a0
    5b54:	|            clr.l 28(a0)

	restartFunction (newFunc);
    5b58:	|            move.l 12(sp),-(sp)
    5b5c:	|            jsr 57b4 <restartFunction>
    5b62:	|            addq.l #4,sp
	return 1;
    5b64:	|            moveq #1,d0
}
    5b66:	\----------> movea.l (sp)+,a6
    5b68:	             lea 24(sp),sp
    5b6c:	             rts

00005b6e <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    5b6e:	clr.w 1ab5e <sliceBusy>
}
    5b74:	nop
    5b76:	rts

00005b78 <getNumberedString>:

char * getNumberedString (int value) {
    5b78:	       lea -56(sp),sp
    5b7c:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    5b80:	       move.w 1ab5e <sliceBusy>,d0
    5b86:	   /-- beq.s 5bd0 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    5b88:	   |   move.l 1b1e0 <DOSBase>,d0
    5b8e:	   |   movea.l d0,a6
    5b90:	   |   jsr -60(a6)
    5b94:	   |   move.l d0,28(sp)
    5b98:	   |   move.l 28(sp),d0
    5b9c:	   |   move.l d0,24(sp)
    5ba0:	   |   move.l #95347,20(sp)
    5ba8:	   |   moveq #76,d0
    5baa:	   |   move.l d0,16(sp)
    5bae:	   |   move.l 1b1e0 <DOSBase>,d0
    5bb4:	   |   movea.l d0,a6
    5bb6:	   |   move.l 24(sp),d1
    5bba:	   |   move.l 20(sp),d2
    5bbe:	   |   move.l 16(sp),d3
    5bc2:	   |   jsr -48(a6)
    5bc6:	   |   move.l d0,12(sp)
		return NULL;
    5bca:	   |   moveq #0,d0
    5bcc:	/--|-- bra.w 5c6c <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    5bd0:	|  \-> move.l 1b1c0 <bigDataFile>,64(sp)
    5bd8:	|      move.l 72(sp),d0
    5bdc:	|      add.l d0,d0
    5bde:	|      add.l d0,d0
    5be0:	|      move.l d0,d1
    5be2:	|      move.l 1b1cc <startOfTextIndex>,d0
    5be8:	|      add.l d1,d0
    5bea:	|      move.l d0,60(sp)
    5bee:	|      moveq #-1,d0
    5bf0:	|      move.l d0,56(sp)
    5bf4:	|      move.l 1b1e0 <DOSBase>,d0
    5bfa:	|      movea.l d0,a6
    5bfc:	|      move.l 64(sp),d1
    5c00:	|      move.l 60(sp),d2
    5c04:	|      move.l 56(sp),d3
    5c08:	|      jsr -66(a6)
    5c0c:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    5c10:	|      move.l 1b1c0 <bigDataFile>,d0
    5c16:	|      move.l d0,-(sp)
    5c18:	|      jsr 718 <get4bytes>
    5c1e:	|      addq.l #4,sp
    5c20:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    5c24:	|      move.l 1b1c0 <bigDataFile>,48(sp)
    5c2c:	|      move.l 72(sp),44(sp)
    5c32:	|      moveq #-1,d0
    5c34:	|      move.l d0,40(sp)
    5c38:	|      move.l 1b1e0 <DOSBase>,d0
    5c3e:	|      movea.l d0,a6
    5c40:	|      move.l 48(sp),d1
    5c44:	|      move.l 44(sp),d2
    5c48:	|      move.l 40(sp),d3
    5c4c:	|      jsr -66(a6)
    5c50:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    5c54:	|      move.l 1b1c0 <bigDataFile>,d0
    5c5a:	|      move.l d0,-(sp)
    5c5c:	|      jsr b02 <readString>
    5c62:	|      addq.l #4,sp
    5c64:	|      move.l d0,32(sp)
	
	return s;
    5c68:	|      move.l 32(sp),d0
}
    5c6c:	\----> movem.l (sp)+,d2-d3/a6
    5c70:	       lea 56(sp),sp
    5c74:	       rts

00005c76 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    5c76:	       lea -32(sp),sp
    5c7a:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    5c7e:	       move.w 1ab5e <sliceBusy>,d0
    5c84:	   /-- beq.s 5ca0 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5c86:	   |   pea 174c0 <PutChar+0xf4a>
    5c8c:	   |   pea 174de <PutChar+0xf68>
    5c92:	   |   jsr 15c26 <KPrintF>
    5c98:	   |   addq.l #8,sp
		return 0;
    5c9a:	   |   moveq #0,d0
    5c9c:	/--|-- bra.w 5d34 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    5ca0:	|  \-> move.l 1b1c0 <bigDataFile>,40(sp)
    5ca8:	|      move.l 48(sp),d0
    5cac:	|      add.l d0,d0
    5cae:	|      add.l d0,d0
    5cb0:	|      move.l d0,d1
    5cb2:	|      move.l 1b1c8 <startOfDataIndex>,d0
    5cb8:	|      add.l d1,d0
    5cba:	|      move.l d0,36(sp)
    5cbe:	|      moveq #-1,d0
    5cc0:	|      move.l d0,32(sp)
    5cc4:	|      move.l 1b1e0 <DOSBase>,d0
    5cca:	|      movea.l d0,a6
    5ccc:	|      move.l 40(sp),d1
    5cd0:	|      move.l 36(sp),d2
    5cd4:	|      move.l 32(sp),d3
    5cd8:	|      jsr -66(a6)
    5cdc:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    5ce0:	|      move.l 1b1c0 <bigDataFile>,24(sp)
    5ce8:	|      move.l 1b1c0 <bigDataFile>,d0
    5cee:	|      move.l d0,-(sp)
    5cf0:	|      jsr 718 <get4bytes>
    5cf6:	|      addq.l #4,sp
    5cf8:	|      move.l d0,20(sp)
    5cfc:	|      clr.l 16(sp)
    5d00:	|      move.l 1b1e0 <DOSBase>,d0
    5d06:	|      movea.l d0,a6
    5d08:	|      move.l 24(sp),d1
    5d0c:	|      move.l 20(sp),d2
    5d10:	|      move.l 16(sp),d3
    5d14:	|      jsr -66(a6)
    5d18:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    5d1c:	|      move.w #1,1ab5e <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    5d24:	|      move.l 1b1c0 <bigDataFile>,d0
    5d2a:	|      move.l d0,-(sp)
    5d2c:	|      jsr 718 <get4bytes>
    5d32:	|      addq.l #4,sp
}
    5d34:	\----> movem.l (sp)+,d2-d3/a6
    5d38:	       lea 32(sp),sp
    5d3c:	       rts

00005d3e <openObjectSlice>:

BOOL openObjectSlice (int num) {
    5d3e:	       lea -32(sp),sp
    5d42:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    5d46:	       move.w 1ab5e <sliceBusy>,d0
    5d4c:	   /-- beq.s 5d68 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    5d4e:	   |   pea 174c0 <PutChar+0xf4a>
    5d54:	   |   pea 174de <PutChar+0xf68>
    5d5a:	   |   jsr 15c26 <KPrintF>
    5d60:	   |   addq.l #8,sp
        return FALSE;
    5d62:	   |   clr.w d0
    5d64:	/--|-- bra.w 5df4 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    5d68:	|  \-> move.l 1b1c0 <bigDataFile>,40(sp)
    5d70:	|      move.l 48(sp),d0
    5d74:	|      add.l d0,d0
    5d76:	|      add.l d0,d0
    5d78:	|      move.l d0,d1
    5d7a:	|      move.l 1b1d4 <startOfObjectIndex>,d0
    5d80:	|      add.l d1,d0
    5d82:	|      move.l d0,36(sp)
    5d86:	|      moveq #-1,d0
    5d88:	|      move.l d0,32(sp)
    5d8c:	|      move.l 1b1e0 <DOSBase>,d0
    5d92:	|      movea.l d0,a6
    5d94:	|      move.l 40(sp),d1
    5d98:	|      move.l 36(sp),d2
    5d9c:	|      move.l 32(sp),d3
    5da0:	|      jsr -66(a6)
    5da4:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    5da8:	|      move.l 1b1c0 <bigDataFile>,24(sp)
    5db0:	|      move.l 1b1c0 <bigDataFile>,d0
    5db6:	|      move.l d0,-(sp)
    5db8:	|      jsr 718 <get4bytes>
    5dbe:	|      addq.l #4,sp
    5dc0:	|      move.l d0,20(sp)
    5dc4:	|      moveq #-1,d0
    5dc6:	|      move.l d0,16(sp)
    5dca:	|      move.l 1b1e0 <DOSBase>,d0
    5dd0:	|      movea.l d0,a6
    5dd2:	|      move.l 24(sp),d1
    5dd6:	|      move.l 20(sp),d2
    5dda:	|      move.l 16(sp),d3
    5dde:	|      jsr -66(a6)
    5de2:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    5de6:	|      move.w #1,1ab5e <sliceBusy>
    5dee:	|      move.w 1ab5e <sliceBusy>,d0
}
    5df4:	\----> movem.l (sp)+,d2-d3/a6
    5df8:	       lea 32(sp),sp
    5dfc:	       rts

00005dfe <openSubSlice>:

BOOL openSubSlice (int num) {
    5dfe:	       lea -32(sp),sp
    5e02:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    5e06:	       move.w 1ab5e <sliceBusy>,d0
    5e0c:	   /-- beq.s 5e28 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    5e0e:	   |   pea 174c0 <PutChar+0xf4a>
    5e14:	   |   pea 174de <PutChar+0xf68>
    5e1a:	   |   jsr 15c26 <KPrintF>
    5e20:	   |   addq.l #8,sp
		return FALSE;
    5e22:	   |   clr.w d0
    5e24:	/--|-- bra.w 5eb4 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    5e28:	|  \-> move.l 1b1c0 <bigDataFile>,40(sp)
    5e30:	|      move.l 48(sp),d0
    5e34:	|      add.l d0,d0
    5e36:	|      add.l d0,d0
    5e38:	|      move.l d0,d1
    5e3a:	|      move.l 1b1d0 <startOfSubIndex>,d0
    5e40:	|      add.l d1,d0
    5e42:	|      move.l d0,36(sp)
    5e46:	|      moveq #-1,d0
    5e48:	|      move.l d0,32(sp)
    5e4c:	|      move.l 1b1e0 <DOSBase>,d0
    5e52:	|      movea.l d0,a6
    5e54:	|      move.l 40(sp),d1
    5e58:	|      move.l 36(sp),d2
    5e5c:	|      move.l 32(sp),d3
    5e60:	|      jsr -66(a6)
    5e64:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    5e68:	|      move.l 1b1c0 <bigDataFile>,24(sp)
    5e70:	|      move.l 1b1c0 <bigDataFile>,d0
    5e76:	|      move.l d0,-(sp)
    5e78:	|      jsr 718 <get4bytes>
    5e7e:	|      addq.l #4,sp
    5e80:	|      move.l d0,20(sp)
    5e84:	|      moveq #-1,d0
    5e86:	|      move.l d0,16(sp)
    5e8a:	|      move.l 1b1e0 <DOSBase>,d0
    5e90:	|      movea.l d0,a6
    5e92:	|      move.l 24(sp),d1
    5e96:	|      move.l 20(sp),d2
    5e9a:	|      move.l 16(sp),d3
    5e9e:	|      jsr -66(a6)
    5ea2:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    5ea6:	|      move.w #1,1ab5e <sliceBusy>
    5eae:	|      move.w 1ab5e <sliceBusy>,d0
}
    5eb4:	\----> movem.l (sp)+,d2-d3/a6
    5eb8:	       lea 32(sp),sp
    5ebc:	       rts

00005ebe <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    5ebe:	       lea -180(sp),sp
    5ec2:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    5ec6:	       tst.l 196(sp)
    5eca:	/----- beq.s 5f0a <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    5ecc:	|      move.l 196(sp),1b1c0 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    5ed4:	|      move.l 196(sp),168(sp)
    5eda:	|      clr.l 164(sp)
    5ede:	|      clr.l 160(sp)
    5ee2:	|      move.l 1b1e0 <DOSBase>,d0
    5ee8:	|      movea.l d0,a6
    5eea:	|      move.l 168(sp),d1
    5eee:	|      move.l 164(sp),d2
    5ef2:	|      move.l 160(sp),d3
    5ef6:	|      jsr -66(a6)
    5efa:	|      move.l d0,156(sp)
    5efe:	|      move.l 156(sp),d0
    5f02:	|      move.l d0,1b1c4 <startIndex>
    5f08:	|  /-- bra.s 5f44 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    5f0a:	\--|-> move.l 1b1c0 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    5f12:	   |   move.l 196(sp),184(sp)
    5f18:	   |   move.l 1b1c4 <startIndex>,d0
    5f1e:	   |   move.l d0,180(sp)
    5f22:	   |   moveq #-1,d0
    5f24:	   |   move.l d0,176(sp)
    5f28:	   |   move.l 1b1e0 <DOSBase>,d0
    5f2e:	   |   movea.l d0,a6
    5f30:	   |   move.l 184(sp),d1
    5f34:	   |   move.l 180(sp),d2
    5f38:	   |   move.l 176(sp),d3
    5f3c:	   |   jsr -66(a6)
    5f40:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    5f44:	   \-> clr.w 1ab5e <sliceBusy>

	if (skipBefore > numLanguages) {
    5f4a:	       move.l 204(sp),d0
    5f4e:	       cmp.l 200(sp),d0
    5f52:	   /-- bls.s 5f66 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    5f54:	   |   pea 174f8 <PutChar+0xf82>
    5f5a:	   |   jsr 15c26 <KPrintF>
    5f60:	   |   addq.l #4,sp
		skipBefore = 0;
    5f62:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    5f66:	   \-> move.l 200(sp),d0
    5f6a:	       sub.l 204(sp),d0
    5f6e:	       move.l d0,188(sp)
	while (skipBefore) {
    5f72:	   /-- bra.s 5fb0 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    5f74:	/--|-> move.l 196(sp),24(sp)
    5f7a:	|  |   move.l 196(sp),-(sp)
    5f7e:	|  |   jsr 718 <get4bytes>
    5f84:	|  |   addq.l #4,sp
    5f86:	|  |   move.l d0,20(sp)
    5f8a:	|  |   moveq #-1,d0
    5f8c:	|  |   move.l d0,16(sp)
    5f90:	|  |   move.l 1b1e0 <DOSBase>,d0
    5f96:	|  |   movea.l d0,a6
    5f98:	|  |   move.l 24(sp),d1
    5f9c:	|  |   move.l 20(sp),d2
    5fa0:	|  |   move.l 16(sp),d3
    5fa4:	|  |   jsr -66(a6)
    5fa8:	|  |   move.l d0,12(sp)
		skipBefore --;
    5fac:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    5fb0:	|  \-> tst.l 204(sp)
    5fb4:	\----- bne.s 5f74 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    5fb6:	       move.l 196(sp),152(sp)
    5fbc:	       clr.l 148(sp)
    5fc0:	       clr.l 144(sp)
    5fc4:	       move.l 1b1e0 <DOSBase>,d0
    5fca:	       movea.l d0,a6
    5fcc:	       move.l 152(sp),d1
    5fd0:	       move.l 148(sp),d2
    5fd4:	       move.l 144(sp),d3
    5fd8:	       jsr -66(a6)
    5fdc:	       move.l d0,140(sp)
    5fe0:	       move.l 140(sp),d0
    5fe4:	       addq.l #4,d0
    5fe6:	       move.l d0,1b1cc <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    5fec:	       move.l 196(sp),136(sp)
    5ff2:	       move.l 196(sp),-(sp)
    5ff6:	       jsr 718 <get4bytes>
    5ffc:	       addq.l #4,sp
    5ffe:	       move.l d0,132(sp)
    6002:	       moveq #-1,d0
    6004:	       move.l d0,128(sp)
    6008:	       move.l 1b1e0 <DOSBase>,d0
    600e:	       movea.l d0,a6
    6010:	       move.l 136(sp),d1
    6014:	       move.l 132(sp),d2
    6018:	       move.l 128(sp),d3
    601c:	       jsr -66(a6)
    6020:	       move.l d0,124(sp)

	while (skipAfter) {
    6024:	   /-- bra.s 6062 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    6026:	/--|-> move.l 196(sp),40(sp)
    602c:	|  |   move.l 196(sp),-(sp)
    6030:	|  |   jsr 718 <get4bytes>
    6036:	|  |   addq.l #4,sp
    6038:	|  |   move.l d0,36(sp)
    603c:	|  |   moveq #-1,d0
    603e:	|  |   move.l d0,32(sp)
    6042:	|  |   move.l 1b1e0 <DOSBase>,d0
    6048:	|  |   movea.l d0,a6
    604a:	|  |   move.l 40(sp),d1
    604e:	|  |   move.l 36(sp),d2
    6052:	|  |   move.l 32(sp),d3
    6056:	|  |   jsr -66(a6)
    605a:	|  |   move.l d0,28(sp)
		skipAfter --;
    605e:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    6062:	|  \-> tst.l 188(sp)
    6066:	\----- bne.s 6026 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6068:	       move.l 196(sp),120(sp)
    606e:	       clr.l 116(sp)
    6072:	       clr.l 112(sp)
    6076:	       move.l 1b1e0 <DOSBase>,d0
    607c:	       movea.l d0,a6
    607e:	       move.l 120(sp),d1
    6082:	       move.l 116(sp),d2
    6086:	       move.l 112(sp),d3
    608a:	       jsr -66(a6)
    608e:	       move.l d0,108(sp)
    6092:	       move.l 108(sp),d0
    6096:	       addq.l #4,d0
    6098:	       move.l d0,1b1d0 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    609e:	       move.l 196(sp),104(sp)
    60a4:	       move.l 196(sp),-(sp)
    60a8:	       jsr 718 <get4bytes>
    60ae:	       addq.l #4,sp
    60b0:	       move.l d0,100(sp)
    60b4:	       clr.l 96(sp)
    60b8:	       move.l 1b1e0 <DOSBase>,d0
    60be:	       movea.l d0,a6
    60c0:	       move.l 104(sp),d1
    60c4:	       move.l 100(sp),d2
    60c8:	       move.l 96(sp),d3
    60cc:	       jsr -66(a6)
    60d0:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    60d4:	       move.l 196(sp),88(sp)
    60da:	       clr.l 84(sp)
    60de:	       clr.l 80(sp)
    60e2:	       move.l 1b1e0 <DOSBase>,d0
    60e8:	       movea.l d0,a6
    60ea:	       move.l 88(sp),d1
    60ee:	       move.l 84(sp),d2
    60f2:	       move.l 80(sp),d3
    60f6:	       jsr -66(a6)
    60fa:	       move.l d0,76(sp)
    60fe:	       move.l 76(sp),d0
    6102:	       addq.l #4,d0
    6104:	       move.l d0,1b1d4 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    610a:	       move.l 196(sp),72(sp)
    6110:	       move.l 196(sp),-(sp)
    6114:	       jsr 718 <get4bytes>
    611a:	       addq.l #4,sp
    611c:	       move.l d0,68(sp)
    6120:	       clr.l 64(sp)
    6124:	       move.l 1b1e0 <DOSBase>,d0
    612a:	       movea.l d0,a6
    612c:	       move.l 72(sp),d1
    6130:	       move.l 68(sp),d2
    6134:	       move.l 64(sp),d3
    6138:	       jsr -66(a6)
    613c:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    6140:	       move.l 196(sp),56(sp)
    6146:	       clr.l 52(sp)
    614a:	       clr.l 48(sp)
    614e:	       move.l 1b1e0 <DOSBase>,d0
    6154:	       movea.l d0,a6
    6156:	       move.l 56(sp),d1
    615a:	       move.l 52(sp),d2
    615e:	       move.l 48(sp),d3
    6162:	       jsr -66(a6)
    6166:	       move.l d0,44(sp)
    616a:	       move.l 44(sp),d0
    616e:	       move.l d0,1b1c8 <startOfDataIndex>
    6174:	       nop
    6176:	       movem.l (sp)+,d2-d3/a6
    617a:	       lea 180(sp),sp
    617e:	       rts

00006180 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    6180:	    lea -20(sp),sp
    6184:	    move.l a6,-(sp)
    6186:	    move.l d7,-(sp)
	APTR vbr = 0;
    6188:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    618c:	    move.w #20090,10(sp)
    6192:	    move.w #2049,12(sp)
    6198:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    619e:	    movea.l 1b1d8 <SysBase>,a0
    61a4:	    move.w 296(a0),d0
    61a8:	    move.w d0,d0
    61aa:	    andi.l #65535,d0
    61b0:	    moveq #1,d1
    61b2:	    and.l d1,d0
    61b4:	/-- beq.s 61e2 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    61b6:	|   lea 28(sp),a0
    61ba:	|   lea -18(a0),a0
    61be:	|   move.l a0,20(sp)
    61c2:	|   move.l 1b1d8 <SysBase>,d0
    61c8:	|   movea.l d0,a6
    61ca:	|   move.l 20(sp),d7
    61ce:	|   exg d7,a5
    61d0:	|   jsr -30(a6)
    61d4:	|   exg d7,a5
    61d6:	|   move.l d0,16(sp)
    61da:	|   move.l 16(sp),d0
    61de:	|   move.l d0,24(sp)

	return vbr;
    61e2:	\-> move.l 24(sp),d0
}
    61e6:	    move.l (sp)+,d7
    61e8:	    movea.l (sp)+,a6
    61ea:	    lea 20(sp),sp
    61ee:	    rts

000061f0 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    61f0:	movea.l 1b1fe <VBR>,a0
    61f6:	lea 108(a0),a0
    61fa:	move.l 4(sp),(a0)
}
    61fe:	nop
    6200:	rts

00006202 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    6202:	movea.l 1b1fe <VBR>,a0
    6208:	move.l 108(a0),d0
}
    620c:	rts

0000620e <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    620e:	       subq.l #8,sp
    6210:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    6212:	       pea 17541 <PutChar+0xfcb>
    6218:	       jsr 15c26 <KPrintF>
    621e:	       addq.l #4,sp
	Forbid();
    6220:	       move.l 1b1d8 <SysBase>,d0
    6226:	       movea.l d0,a6
    6228:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    622c:	       pea 17559 <PutChar+0xfe3>
    6232:	       jsr 15c26 <KPrintF>
    6238:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    623a:	       movea.l 1b1dc <custom>,a0
    6240:	       move.w 16(a0),d0
    6244:	       move.w d0,1b1fc <SystemADKCON>
	SystemInts=custom->intenar;
    624a:	       movea.l 1b1dc <custom>,a0
    6250:	       move.w 28(a0),d0
    6254:	       move.w d0,1b1f8 <SystemInts>
	SystemDMA=custom->dmaconr;
    625a:	       movea.l 1b1dc <custom>,a0
    6260:	       move.w 2(a0),d0
    6264:	       move.w d0,1b1fa <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    626a:	       movea.l 1b1e4 <GfxBase>,a0
    6270:	       move.l 34(a0),d0
    6274:	       move.l d0,1b206 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    627a:	       pea 17577 <PutChar+0x1001>
    6280:	       jsr 15c26 <KPrintF>
    6286:	       addq.l #4,sp
	LoadView(0);
    6288:	       clr.l 4(sp)
    628c:	       move.l 1b1e4 <GfxBase>,d0
    6292:	       movea.l d0,a6
    6294:	       movea.l 4(sp),a1
    6298:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    629c:	       pea 1758d <PutChar+0x1017>
    62a2:	       jsr 15c26 <KPrintF>
    62a8:	       addq.l #4,sp
	WaitTOF();
    62aa:	       move.l 1b1e4 <GfxBase>,d0
    62b0:	       movea.l d0,a6
    62b2:	       jsr -270(a6)
	WaitTOF();
    62b6:	       move.l 1b1e4 <GfxBase>,d0
    62bc:	       movea.l d0,a6
    62be:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    62c2:	       pea 175a2 <PutChar+0x102c>
    62c8:	       jsr 15c26 <KPrintF>
    62ce:	       addq.l #4,sp
	WaitVbl();
    62d0:	       jsr 15b5a <WaitVbl>
	WaitVbl();
    62d6:	       jsr 15b5a <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    62dc:	       pea 175b7 <PutChar+0x1041>
    62e2:	       jsr 15c26 <KPrintF>
    62e8:	       addq.l #4,sp
	OwnBlitter();
    62ea:	       move.l 1b1e4 <GfxBase>,d0
    62f0:	       movea.l d0,a6
    62f2:	       jsr -456(a6)
	WaitBlit();	
    62f6:	       move.l 1b1e4 <GfxBase>,d0
    62fc:	       movea.l d0,a6
    62fe:	       jsr -228(a6)
	Disable();
    6302:	       move.l 1b1d8 <SysBase>,d0
    6308:	       movea.l d0,a6
    630a:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    630e:	       pea 175d8 <PutChar+0x1062>
    6314:	       jsr 15c26 <KPrintF>
    631a:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    631c:	       movea.l 1b1dc <custom>,a0
    6322:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    6328:	       pea 175ef <PutChar+0x1079>
    632e:	       jsr 15c26 <KPrintF>
    6334:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    6336:	       clr.l 8(sp)
    633a:	   /-- bra.s 6358 <TakeSystem+0x14a>
		custom->color[a]=0;
    633c:	/--|-> movea.l 1b1dc <custom>,a0
    6342:	|  |   move.l 8(sp),d0
    6346:	|  |   addi.l #192,d0
    634c:	|  |   add.l d0,d0
    634e:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    6354:	|  |   addq.l #1,8(sp)
    6358:	|  \-> moveq #31,d0
    635a:	|      cmp.l 8(sp),d0
    635e:	\----- bge.s 633c <TakeSystem+0x12e>

	WaitVbl();
    6360:	       jsr 15b5a <WaitVbl>
	WaitVbl();
    6366:	       jsr 15b5a <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    636c:	       pea 17614 <PutChar+0x109e>
    6372:	       jsr 15c26 <KPrintF>
    6378:	       addq.l #4,sp
	VBR=GetVBR();
    637a:	       jsr 6180 <GetVBR>
    6380:	       move.l d0,1b1fe <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    6386:	       jsr 6202 <GetInterruptHandler>
    638c:	       move.l d0,1b202 <SystemIrq>
}
    6392:	       nop
    6394:	       movea.l (sp)+,a6
    6396:	       addq.l #8,sp
    6398:	       rts

0000639a <FreeSystem>:

void FreeSystem() { 
    639a:	subq.l #4,sp
    639c:	move.l a6,-(sp)
	WaitVbl();
    639e:	jsr 15b5a <WaitVbl>
	WaitBlit();
    63a4:	move.l 1b1e4 <GfxBase>,d0
    63aa:	movea.l d0,a6
    63ac:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    63b0:	movea.l 1b1dc <custom>,a0
    63b6:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    63bc:	movea.l 1b1dc <custom>,a0
    63c2:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    63c8:	movea.l 1b1dc <custom>,a0
    63ce:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    63d4:	move.l 1b202 <SystemIrq>,d0
    63da:	move.l d0,-(sp)
    63dc:	jsr 61f0 <SetInterruptHandler>
    63e2:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    63e4:	movea.l 1b1e4 <GfxBase>,a0
    63ea:	move.l 38(a0),d0
    63ee:	movea.l 1b1dc <custom>,a0
    63f4:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    63f8:	movea.l 1b1e4 <GfxBase>,a0
    63fe:	move.l 50(a0),d0
    6402:	movea.l 1b1dc <custom>,a0
    6408:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    640c:	movea.l 1b1dc <custom>,a0
    6412:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    6418:	move.w 1b1fa <SystemDMA>,d0
    641e:	movea.l 1b1dc <custom>,a0
    6424:	ori.w #-32768,d0
    6428:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    642c:	move.w 1b1fc <SystemADKCON>,d0
    6432:	movea.l 1b1dc <custom>,a0
    6438:	ori.w #-32768,d0
    643c:	move.w d0,158(a0)

	WaitBlit();	
    6440:	move.l 1b1e4 <GfxBase>,d0
    6446:	movea.l d0,a6
    6448:	jsr -228(a6)
	DisownBlitter();
    644c:	move.l 1b1e4 <GfxBase>,d0
    6452:	movea.l d0,a6
    6454:	jsr -462(a6)
	Enable();
    6458:	move.l 1b1d8 <SysBase>,d0
    645e:	movea.l d0,a6
    6460:	jsr -126(a6)

	LoadView(ActiView);
    6464:	move.l 1b206 <ActiView>,4(sp)
    646c:	move.l 1b1e4 <GfxBase>,d0
    6472:	movea.l d0,a6
    6474:	movea.l 4(sp),a1
    6478:	jsr -222(a6)
	WaitTOF();
    647c:	move.l 1b1e4 <GfxBase>,d0
    6482:	movea.l d0,a6
    6484:	jsr -270(a6)
	WaitTOF();
    6488:	move.l 1b1e4 <GfxBase>,d0
    648e:	movea.l d0,a6
    6490:	jsr -270(a6)

	Permit();
    6494:	move.l 1b1d8 <SysBase>,d0
    649a:	movea.l d0,a6
    649c:	jsr -138(a6)
}
    64a0:	nop
    64a2:	movea.l (sp)+,a6
    64a4:	addq.l #4,sp
    64a6:	rts

000064a8 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    64a8:	    lea -128(sp),sp
    64ac:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    64b0:	    movea.w #4,a0
    64b4:	    move.l (a0),d0
    64b6:	    move.l d0,1b1d8 <SysBase>
	custom = (struct Custom*)0xdff000;	
    64bc:	    move.l #14675968,1b1dc <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    64c6:	    move.l #95800,136(sp)
    64ce:	    clr.l 132(sp)
    64d2:	    move.l 1b1d8 <SysBase>,d0
    64d8:	    movea.l d0,a6
    64da:	    movea.l 136(sp),a1
    64de:	    move.l 132(sp),d0
    64e2:	    jsr -552(a6)
    64e6:	    move.l d0,128(sp)
    64ea:	    move.l 128(sp),d0
    64ee:	    move.l d0,1b1e4 <GfxBase>
	if (!GfxBase)
    64f4:	    move.l 1b1e4 <GfxBase>,d0
    64fa:	/-- bne.s 6510 <main+0x68>
		Exit(0);
    64fc:	|   clr.l 124(sp)
    6500:	|   move.l 1b1e0 <DOSBase>,d0
    6506:	|   movea.l d0,a6
    6508:	|   move.l 124(sp),d1
    650c:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    6510:	\-> move.l #95817,120(sp)
    6518:	    clr.l 116(sp)
    651c:	    move.l 1b1d8 <SysBase>,d0
    6522:	    movea.l d0,a6
    6524:	    movea.l 120(sp),a1
    6528:	    move.l 116(sp),d0
    652c:	    jsr -552(a6)
    6530:	    move.l d0,112(sp)
    6534:	    move.l 112(sp),d0
    6538:	    move.l d0,1b1e0 <DOSBase>
	if (!DOSBase)
    653e:	    move.l 1b1e0 <DOSBase>,d0
    6544:	/-- bne.s 655a <main+0xb2>
		Exit(0);
    6546:	|   clr.l 108(sp)
    654a:	|   move.l 1b1e0 <DOSBase>,d0
    6550:	|   movea.l d0,a6
    6552:	|   move.l 108(sp),d1
    6556:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    655a:	\-> move.l #95829,104(sp)
    6562:	    clr.l 100(sp)
    6566:	    move.l 1b1d8 <SysBase>,d0
    656c:	    movea.l d0,a6
    656e:	    movea.l 104(sp),a1
    6572:	    move.l 100(sp),d0
    6576:	    jsr -552(a6)
    657a:	    move.l d0,96(sp)
    657e:	    move.l 96(sp),d0
    6582:	    move.l d0,1b1e8 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    6588:	    move.l 1b1e8 <MathIeeeSingBasBase>,d0
    658e:	/-- bne.s 65a4 <main+0xfc>
		Exit(0);	
    6590:	|   clr.l 92(sp)
    6594:	|   move.l 1b1e0 <DOSBase>,d0
    659a:	|   movea.l d0,a6
    659c:	|   move.l 92(sp),d1
    65a0:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    65a4:	\-> move.l #95853,88(sp)
    65ac:	    clr.l 84(sp)
    65b0:	    move.l 1b1d8 <SysBase>,d0
    65b6:	    movea.l d0,a6
    65b8:	    movea.l 88(sp),a1
    65bc:	    move.l 84(sp),d0
    65c0:	    jsr -552(a6)
    65c4:	    move.l d0,80(sp)
    65c8:	    move.l 80(sp),d0
    65cc:	    move.l d0,1b1ec <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    65d2:	    move.l 1b1ec <MathIeeeSingTransBase>,d0
    65d8:	/-- bne.s 65ee <main+0x146>
		Exit(0);
    65da:	|   clr.l 76(sp)
    65de:	|   move.l 1b1e0 <DOSBase>,d0
    65e4:	|   movea.l d0,a6
    65e6:	|   move.l 76(sp),d1
    65ea:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    65ee:	\-> move.l #95879,72(sp)
    65f6:	    clr.l 68(sp)
    65fa:	    move.l 1b1d8 <SysBase>,d0
    6600:	    movea.l d0,a6
    6602:	    movea.l 72(sp),a1
    6606:	    move.l 68(sp),d0
    660a:	    jsr -552(a6)
    660e:	    move.l d0,64(sp)
    6612:	    move.l 64(sp),d0
    6616:	    move.l d0,1b1f4 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    661c:	    move.l 1b1f4 <MathIeeeDoubTransBase>,d0
    6622:	/-- bne.s 6638 <main+0x190>
		Exit(0);
    6624:	|   clr.l 60(sp)
    6628:	|   move.l 1b1e0 <DOSBase>,d0
    662e:	|   movea.l d0,a6
    6630:	|   move.l 60(sp),d1
    6634:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    6638:	\-> move.l #95905,56(sp)
    6640:	    clr.l 52(sp)
    6644:	    move.l 1b1d8 <SysBase>,d0
    664a:	    movea.l d0,a6
    664c:	    movea.l 56(sp),a1
    6650:	    move.l 52(sp),d0
    6654:	    jsr -552(a6)
    6658:	    move.l d0,48(sp)
    665c:	    move.l 48(sp),d0
    6660:	    move.l d0,1b1f0 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    6666:	    move.l 1b1f0 <MathIeeeDoubBasBase>,d0
    666c:	/-- bne.s 6682 <main+0x1da>
		Exit(0);
    666e:	|   clr.l 44(sp)
    6672:	|   move.l 1b1e0 <DOSBase>,d0
    6678:	|   movea.l d0,a6
    667a:	|   move.l 44(sp),d1
    667e:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 026!\n");
    6682:	\-> pea 176b9 <PutChar+0x1143>
    6688:	    jsr 15c26 <KPrintF>
    668e:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 026!\n", 25);
    6690:	    move.l 1b1e0 <DOSBase>,d0
    6696:	    movea.l d0,a6
    6698:	    jsr -60(a6)
    669c:	    move.l d0,40(sp)
    66a0:	    move.l 40(sp),d0
    66a4:	    move.l d0,36(sp)
    66a8:	    move.l #95961,32(sp)
    66b0:	    moveq #25,d0
    66b2:	    move.l d0,28(sp)
    66b6:	    move.l 1b1e0 <DOSBase>,d0
    66bc:	    movea.l d0,a6
    66be:	    move.l 36(sp),d1
    66c2:	    move.l 32(sp),d2
    66c6:	    move.l 28(sp),d3
    66ca:	    jsr -48(a6)
    66ce:	    move.l d0,24(sp)
	Delay(50);
    66d2:	    moveq #50,d0
    66d4:	    move.l d0,20(sp)
    66d8:	    move.l 1b1e0 <DOSBase>,d0
    66de:	    movea.l d0,a6
    66e0:	    move.l 20(sp),d1
    66e4:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    66e8:	    pea 176f2 <PutChar+0x117c>
    66ee:	    jsr 15c26 <KPrintF>
    66f4:	    addq.l #4,sp
	TakeSystem();
    66f6:	    jsr 620e <TakeSystem>
	KPrintF("System Taken\n");
    66fc:	    pea 17701 <PutChar+0x118b>
    6702:	    jsr 15c26 <KPrintF>
    6708:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    670a:	    movea.l 1b1dc <custom>,a0
    6710:	    move.w #-30721,150(a0)
	WaitVbl();
    6716:	    jsr 15b5a <WaitVbl>

	KPrintF("Starting main_sludge\n");
    671c:	    pea 1770f <PutChar+0x1199>
    6722:	    jsr 15c26 <KPrintF>
    6728:	    addq.l #4,sp
	main_sludge(argc, argv);	
    672a:	    move.l 148(sp),-(sp)
    672e:	    move.l 148(sp),-(sp)
    6732:	    jsr 3076 <main_sludge>
    6738:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    673a:	    jsr 639a <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    6740:	    move.l 1b1e0 <DOSBase>,16(sp)
    6748:	    move.l 1b1d8 <SysBase>,d0
    674e:	    movea.l d0,a6
    6750:	    movea.l 16(sp),a1
    6754:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    6758:	    move.l 1b1e4 <GfxBase>,12(sp)
    6760:	    move.l 1b1d8 <SysBase>,d0
    6766:	    movea.l d0,a6
    6768:	    movea.l 12(sp),a1
    676c:	    jsr -414(a6)
    6770:	    moveq #0,d0
}
    6772:	    movem.l (sp)+,d2-d3/a6
    6776:	    lea 128(sp),sp
    677a:	    rts

0000677c <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    677c:	    lea -16(sp),sp
    6780:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    6782:	    moveq #8,d0
    6784:	    move.l d0,16(sp)
    6788:	    clr.l 12(sp)
    678c:	    move.l 1b1d8 <SysBase>,d0
    6792:	    movea.l d0,a6
    6794:	    move.l 16(sp),d0
    6798:	    move.l 12(sp),d1
    679c:	    jsr -684(a6)
    67a0:	    move.l d0,8(sp)
    67a4:	    move.l 8(sp),d0
    67a8:	    move.l d0,4(sp)
	if (!newStat) {
    67ac:	/-- bne.s 67dc <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    67ae:	|   movea.l 1ab60 <nowStatus>,a0
    67b4:	|   move.l (a0),d0
    67b6:	|   movea.l 4(sp),a0
    67ba:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    67be:	|   pea 17165 <PutChar+0xbef>
    67c4:	|   jsr b8 <copyString>
    67ca:	|   addq.l #4,sp
    67cc:	|   movea.l 4(sp),a0
    67d0:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    67d2:	|   movea.l 1ab60 <nowStatus>,a0
    67d8:	|   move.l 4(sp),(a0)
	}
}
    67dc:	\-> nop
    67de:	    movea.l (sp)+,a6
    67e0:	    lea 16(sp),sp
    67e4:	    rts

000067e6 <clearStatusBar>:

void clearStatusBar () {
    67e6:	       lea -16(sp),sp
    67ea:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    67ec:	       movea.l 1ab60 <nowStatus>,a0
    67f2:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    67f6:	       movea.l 1ab60 <nowStatus>,a0
    67fc:	       moveq #-1,d0
    67fe:	       move.l d0,6(a0)
	while (stat) {
    6802:	   /-- bra.s 6842 <clearStatusBar+0x5c>
		kill = stat;
    6804:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    680a:	|  |   movea.l 16(sp),a0
    680e:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    6814:	|  |   movea.l 12(sp),a0
    6818:	|  |   move.l (a0),8(sp)
    681c:	|  |   move.l 1b1d8 <SysBase>,d0
    6822:	|  |   movea.l d0,a6
    6824:	|  |   movea.l 8(sp),a1
    6828:	|  |   jsr -690(a6)
		FreeVec(kill);
    682c:	|  |   move.l 12(sp),4(sp)
    6832:	|  |   move.l 1b1d8 <SysBase>,d0
    6838:	|  |   movea.l d0,a6
    683a:	|  |   movea.l 4(sp),a1
    683e:	|  |   jsr -690(a6)
	while (stat) {
    6842:	|  \-> tst.l 16(sp)
    6846:	\----- bne.s 6804 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    6848:	       movea.l 1ab60 <nowStatus>,a0
    684e:	       clr.l (a0)
}
    6850:	       nop
    6852:	       movea.l (sp)+,a6
    6854:	       lea 16(sp),sp
    6858:	       rts

0000685a <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    685a:	clr.l 1b20a <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    6860:	move.w #-1,1b20e <mainStatus+0x4>
	mainStatus.litStatus = -1;
    6868:	moveq #-1,d0
    686a:	move.l d0,1b210 <mainStatus+0x6>
	mainStatus.statusX = 10;
    6870:	moveq #10,d0
    6872:	move.l d0,1b214 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    6878:	movea.l 1b130 <winHeight>,a0
    687e:	lea -15(a0),a0
    6882:	move.l a0,d0
    6884:	move.l d0,1b218 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    688a:	nop
    688c:	rts

0000688e <killLastStatus>:

void killLastStatus () {
    688e:	    lea -12(sp),sp
    6892:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    6894:	    movea.l 1ab60 <nowStatus>,a0
    689a:	    move.l (a0),d0
    689c:	/-- beq.s 68e6 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    689e:	|   movea.l 1ab60 <nowStatus>,a0
    68a4:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    68a8:	|   movea.l 1ab60 <nowStatus>,a0
    68ae:	|   movea.l 12(sp),a1
    68b2:	|   move.l 4(a1),d0
    68b6:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    68b8:	|   movea.l 12(sp),a0
    68bc:	|   move.l (a0),8(sp)
    68c0:	|   move.l 1b1d8 <SysBase>,d0
    68c6:	|   movea.l d0,a6
    68c8:	|   movea.l 8(sp),a1
    68cc:	|   jsr -690(a6)
		FreeVec(kill);
    68d0:	|   move.l 12(sp),4(sp)
    68d6:	|   move.l 1b1d8 <SysBase>,d0
    68dc:	|   movea.l d0,a6
    68de:	|   movea.l 4(sp),a1
    68e2:	|   jsr -690(a6)
	}
}
    68e6:	\-> nop
    68e8:	    movea.l (sp)+,a6
    68ea:	    lea 12(sp),sp
    68ee:	    rts

000068f0 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    68f0:	movea.l 1ab60 <nowStatus>,a0
    68f6:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    68fc:	movea.l 1ab60 <nowStatus>,a0
    6902:	move.l 8(sp),14(a0)
}
    6908:	nop
    690a:	rts

0000690c <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    690c:	       lea -100(sp),sp
    6910:	       move.l a6,-(sp)
    6912:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    6914:	       movea.l 1ab60 <nowStatus>,a0
    691a:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    691e:	       movea.l 1ab60 <nowStatus>,a0
    6924:	       move.w 4(a0),d0
    6928:	       move.w d0,d0
    692a:	       andi.l #65535,d0
    6930:	       move.l 112(sp),-(sp)
    6934:	       move.l d0,-(sp)
    6936:	       jsr 8d0 <put2bytes>
    693c:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    693e:	       movea.l 1ab60 <nowStatus>,a0
    6944:	       move.l 6(a0),d0
    6948:	       move.l d0,d0
    694a:	       movea.w d0,a0
    694c:	       move.l 112(sp),-(sp)
    6950:	       move.l a0,-(sp)
    6952:	       jsr a9c <putSigned>
    6958:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    695a:	       movea.l 1ab60 <nowStatus>,a0
    6960:	       move.l 10(a0),d0
    6964:	       move.l 112(sp),-(sp)
    6968:	       move.l d0,-(sp)
    696a:	       jsr 8d0 <put2bytes>
    6970:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    6972:	       movea.l 1ab60 <nowStatus>,a0
    6978:	       move.l 14(a0),d0
    697c:	       move.l 112(sp),-(sp)
    6980:	       move.l d0,-(sp)
    6982:	       jsr 8d0 <put2bytes>
    6988:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    698a:	       move.l 112(sp),100(sp)
    6990:	       movea.l 1ab60 <nowStatus>,a0
    6996:	       move.l 18(a0),96(sp)
    699c:	       move.l 1b1e0 <DOSBase>,d0
    69a2:	       movea.l d0,a6
    69a4:	       move.l 100(sp),d1
    69a8:	       move.l 96(sp),d2
    69ac:	       jsr -312(a6)
    69b0:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    69b4:	       move.l 112(sp),88(sp)
    69ba:	       movea.l 1ab60 <nowStatus>,a0
    69c0:	       move.l 22(a0),84(sp)
    69c6:	       move.l 1b1e0 <DOSBase>,d0
    69cc:	       movea.l d0,a6
    69ce:	       move.l 88(sp),d1
    69d2:	       move.l 84(sp),d2
    69d6:	       jsr -312(a6)
    69da:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    69de:	       move.l 112(sp),76(sp)
    69e4:	       movea.l 1ab60 <nowStatus>,a0
    69ea:	       move.l 26(a0),72(sp)
    69f0:	       move.l 1b1e0 <DOSBase>,d0
    69f6:	       movea.l d0,a6
    69f8:	       move.l 76(sp),d1
    69fc:	       move.l 72(sp),d2
    6a00:	       jsr -312(a6)
    6a04:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    6a08:	       move.l 112(sp),64(sp)
    6a0e:	       movea.l 1ab60 <nowStatus>,a0
    6a14:	       move.l 30(a0),60(sp)
    6a1a:	       move.l 1b1e0 <DOSBase>,d0
    6a20:	       movea.l d0,a6
    6a22:	       move.l 64(sp),d1
    6a26:	       move.l 60(sp),d2
    6a2a:	       jsr -312(a6)
    6a2e:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    6a32:	       move.l 112(sp),52(sp)
    6a38:	       movea.l 1ab60 <nowStatus>,a0
    6a3e:	       move.l 34(a0),48(sp)
    6a44:	       move.l 1b1e0 <DOSBase>,d0
    6a4a:	       movea.l d0,a6
    6a4c:	       move.l 52(sp),d1
    6a50:	       move.l 48(sp),d2
    6a54:	       jsr -312(a6)
    6a58:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    6a5c:	       move.l 112(sp),40(sp)
    6a62:	       movea.l 1ab60 <nowStatus>,a0
    6a68:	       move.l 38(a0),36(sp)
    6a6e:	       move.l 1b1e0 <DOSBase>,d0
    6a74:	       movea.l d0,a6
    6a76:	       move.l 40(sp),d1
    6a7a:	       move.l 36(sp),d2
    6a7e:	       jsr -312(a6)
    6a82:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    6a86:	   /-- bra.s 6aca <saveStatusBars+0x1be>
		FPutC (fp,1);
    6a88:	/--|-> move.l 112(sp),16(sp)
    6a8e:	|  |   moveq #1,d0
    6a90:	|  |   move.l d0,12(sp)
    6a94:	|  |   move.l 1b1e0 <DOSBase>,d0
    6a9a:	|  |   movea.l d0,a6
    6a9c:	|  |   move.l 16(sp),d1
    6aa0:	|  |   move.l 12(sp),d2
    6aa4:	|  |   jsr -312(a6)
    6aa8:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    6aac:	|  |   movea.l 104(sp),a0
    6ab0:	|  |   move.l (a0),d0
    6ab2:	|  |   move.l 112(sp),-(sp)
    6ab6:	|  |   move.l d0,-(sp)
    6ab8:	|  |   jsr bd8 <writeString>
    6abe:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    6ac0:	|  |   movea.l 104(sp),a0
    6ac4:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    6aca:	|  \-> tst.l 104(sp)
    6ace:	\----- bne.s 6a88 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    6ad0:	       move.l 112(sp),28(sp)
    6ad6:	       clr.l 24(sp)
    6ada:	       move.l 1b1e0 <DOSBase>,d0
    6ae0:	       movea.l d0,a6
    6ae2:	       move.l 28(sp),d1
    6ae6:	       move.l 24(sp),d2
    6aea:	       jsr -312(a6)
    6aee:	       move.l d0,20(sp)
}
    6af2:	       nop
    6af4:	       move.l (sp)+,d2
    6af6:	       movea.l (sp)+,a6
    6af8:	       lea 100(sp),sp
    6afc:	       rts

00006afe <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    6afe:	movea.l 1ab60 <nowStatus>,a0
    6b04:	move.l 4(sp),6(a0)
}
    6b0a:	nop
    6b0c:	rts

00006b0e <setStatusBar>:

void setStatusBar (char * txt) {
    6b0e:	    subq.l #4,sp
    6b10:	    move.l a6,-(sp)
    6b12:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    6b14:	    movea.l 1ab60 <nowStatus>,a0
    6b1a:	    move.l (a0),d0
    6b1c:	/-- beq.s 6b50 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    6b1e:	|   movea.l 1ab60 <nowStatus>,a0
    6b24:	|   movea.l (a0),a0
    6b26:	|   move.l (a0),8(sp)
    6b2a:	|   move.l 1b1d8 <SysBase>,d0
    6b30:	|   movea.l d0,a6
    6b32:	|   movea.l 8(sp),a1
    6b36:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    6b3a:	|   movea.l 1ab60 <nowStatus>,a0
    6b40:	|   movea.l (a0),a2
    6b42:	|   move.l 16(sp),-(sp)
    6b46:	|   jsr b8 <copyString>
    6b4c:	|   addq.l #4,sp
    6b4e:	|   move.l d0,(a2)
	}
}
    6b50:	\-> nop
    6b52:	    movea.l (sp)+,a2
    6b54:	    movea.l (sp)+,a6
    6b56:	    addq.l #4,sp
    6b58:	    rts

00006b5a <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    6b5a:	       movea.l 1ab60 <nowStatus>,a0
    6b60:	       move.l (a0),d0
    6b62:	/----- beq.s 6b70 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    6b64:	|      movea.l 1ab60 <nowStatus>,a0
    6b6a:	|      movea.l (a0),a0
    6b6c:	|      move.l (a0),d0
    6b6e:	|  /-- bra.s 6b76 <statusBarText+0x1c>
	} else {
		return "";
    6b70:	\--|-> move.l #94565,d0
	}
    6b76:	   \-> rts

00006b78 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    6b78:	       lea -28(sp),sp
    6b7c:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    6b80:	       move.l 52(sp),-(sp)
    6b84:	       jsr 142d6 <stringWidth>
    6b8a:	       addq.l #4,sp
    6b8c:	       asr.l #1,d0
    6b8e:	       move.l d0,-(sp)
    6b90:	       jsr 15ede <__floatsisf>
    6b96:	       addq.l #4,sp
    6b98:	       move.l d0,d1
    6b9a:	       move.l 1ab78 <cameraZoom>,d0
    6ba0:	       move.l d0,-(sp)
    6ba2:	       move.l d1,-(sp)
    6ba4:	       jsr 15d8a <__divsf3>
    6baa:	       addq.l #8,sp
    6bac:	       move.l d0,-(sp)
    6bae:	       jsr 15e76 <__fixsfsi>
    6bb4:	       addq.l #4,sp
    6bb6:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    6bba:	       move.l 56(sp),d0
    6bbe:	       sub.l 44(sp),d0
    6bc2:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    6bc6:	       move.l 56(sp),d0
    6bca:	       add.l 44(sp),d0
    6bce:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    6bd2:	       moveq #12,d0
    6bd4:	       move.l d0,32(sp)
    6bd8:	       clr.l 28(sp)
    6bdc:	       move.l 1b1d8 <SysBase>,d0
    6be2:	       movea.l d0,a6
    6be4:	       move.l 32(sp),d0
    6be8:	       move.l 28(sp),d1
    6bec:	       jsr -684(a6)
    6bf0:	       move.l d0,24(sp)
    6bf4:	       move.l 24(sp),d0
    6bf8:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    6bfc:	       movea.l 1b234 <speech>,a0
    6c02:	       move.l 4(a0),d0
    6c06:	       movea.l 20(sp),a0
    6c0a:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    6c0e:	       move.l 52(sp),-(sp)
    6c12:	       jsr b8 <copyString>
    6c18:	       addq.l #4,sp
    6c1a:	       movea.l 20(sp),a0
    6c1e:	       move.l d0,(a0)
	newLine -> x = xx1;
    6c20:	       movea.l 20(sp),a0
    6c24:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    6c2a:	       movea.l 1b234 <speech>,a0
    6c30:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    6c36:	       moveq #4,d0
    6c38:	       cmp.l 40(sp),d0
    6c3c:	   /-- blt.s 6c5e <addSpeechLine+0xe6>
    6c3e:	   |   movea.l 60(sp),a0
    6c42:	   |   move.l (a0),d1
    6c44:	   |   moveq #5,d0
    6c46:	   |   sub.l 40(sp),d0
    6c4a:	   |   cmp.l d1,d0
    6c4c:	   +-- ble.s 6c5e <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    6c4e:	   |   moveq #5,d0
    6c50:	   |   sub.l 40(sp),d0
    6c54:	   |   movea.l 60(sp),a0
    6c58:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    6c5a:	/--|-- bra.w 6d8a <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6c5e:	|  \-> move.l 36(sp),-(sp)
    6c62:	|      jsr 15ede <__floatsisf>
    6c68:	|      addq.l #4,sp
    6c6a:	|      move.l d0,d2
    6c6c:	|      move.l 1b12c <winWidth>,d0
    6c72:	|      move.l d0,-(sp)
    6c74:	|      jsr 15f06 <__floatunsisf>
    6c7a:	|      addq.l #4,sp
    6c7c:	|      move.l d0,d1
    6c7e:	|      move.l 1ab78 <cameraZoom>,d0
    6c84:	|      move.l d0,-(sp)
    6c86:	|      move.l d1,-(sp)
    6c88:	|      jsr 15d8a <__divsf3>
    6c8e:	|      addq.l #8,sp
    6c90:	|      move.l #1084227584,-(sp)
    6c96:	|      move.l d0,-(sp)
    6c98:	|      jsr 161d2 <__subsf3>
    6c9e:	|      addq.l #8,sp
    6ca0:	|      move.l d0,-(sp)
    6ca2:	|      move.l d2,-(sp)
    6ca4:	|      jsr 15fc6 <__gesf2>
    6caa:	|      addq.l #8,sp
    6cac:	|      tst.l d0
    6cae:	|  /-- bge.s 6cb4 <addSpeechLine+0x13c>
}
    6cb0:	+--|-- bra.w 6d8a <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    6cb4:	|  \-> movea.l 60(sp),a0
    6cb8:	|      move.l (a0),d0
    6cba:	|      move.l d0,-(sp)
    6cbc:	|      jsr 15ede <__floatsisf>
    6cc2:	|      addq.l #4,sp
    6cc4:	|      move.l d0,-(sp)
    6cc6:	|      jsr 15df6 <__extendsfdf2>
    6ccc:	|      addq.l #4,sp
    6cce:	|      move.l d0,d4
    6cd0:	|      move.l d1,d5
    6cd2:	|      move.l 1b12c <winWidth>,d0
    6cd8:	|      move.l d0,-(sp)
    6cda:	|      jsr 15f06 <__floatunsisf>
    6ce0:	|      addq.l #4,sp
    6ce2:	|      move.l d0,d1
    6ce4:	|      move.l 1ab78 <cameraZoom>,d0
    6cea:	|      move.l d0,-(sp)
    6cec:	|      move.l d1,-(sp)
    6cee:	|      jsr 15d8a <__divsf3>
    6cf4:	|      addq.l #8,sp
    6cf6:	|      move.l d0,-(sp)
    6cf8:	|      jsr 15df6 <__extendsfdf2>
    6cfe:	|      addq.l #4,sp
    6d00:	|      clr.l -(sp)
    6d02:	|      move.l #1075052544,-(sp)
    6d08:	|      move.l d1,-(sp)
    6d0a:	|      move.l d0,-(sp)
    6d0c:	|      jsr 16170 <__subdf3>
    6d12:	|      lea 16(sp),sp
    6d16:	|      move.l d0,d2
    6d18:	|      move.l d1,d3
    6d1a:	|      move.l 36(sp),-(sp)
    6d1e:	|      jsr 15e9e <__floatsidf>
    6d24:	|      addq.l #4,sp
    6d26:	|      move.l d1,-(sp)
    6d28:	|      move.l d0,-(sp)
    6d2a:	|      move.l d3,-(sp)
    6d2c:	|      move.l d2,-(sp)
    6d2e:	|      jsr 16170 <__subdf3>
    6d34:	|      lea 16(sp),sp
    6d38:	|      move.l d1,-(sp)
    6d3a:	|      move.l d0,-(sp)
    6d3c:	|      move.l d5,-(sp)
    6d3e:	|      move.l d4,-(sp)
    6d40:	|      jsr 15ffc <__gtdf2>
    6d46:	|      lea 16(sp),sp
    6d4a:	|      tst.l d0
    6d4c:	|  /-- bgt.s 6d50 <addSpeechLine+0x1d8>
}
    6d4e:	+--|-- bra.s 6d8a <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    6d50:	|  \-> move.l 1b12c <winWidth>,d0
    6d56:	|      move.l d0,-(sp)
    6d58:	|      jsr 15f06 <__floatunsisf>
    6d5e:	|      addq.l #4,sp
    6d60:	|      move.l d0,d1
    6d62:	|      move.l 1ab78 <cameraZoom>,d0
    6d68:	|      move.l d0,-(sp)
    6d6a:	|      move.l d1,-(sp)
    6d6c:	|      jsr 15d8a <__divsf3>
    6d72:	|      addq.l #8,sp
    6d74:	|      move.l d0,-(sp)
    6d76:	|      jsr 15e76 <__fixsfsi>
    6d7c:	|      addq.l #4,sp
    6d7e:	|      subq.l #5,d0
    6d80:	|      sub.l 36(sp),d0
    6d84:	|      movea.l 60(sp),a0
    6d88:	|      move.l d0,(a0)
}
    6d8a:	\----> nop
    6d8c:	       movem.l (sp)+,d2-d5/a6
    6d90:	       lea 28(sp),sp
    6d94:	       rts

00006d96 <initSpeech>:


void initSpeech () {
    6d96:	       lea -12(sp),sp
    6d9a:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    6d9c:	       moveq #20,d0
    6d9e:	       move.l d0,12(sp)
    6da2:	       clr.l 8(sp)
    6da6:	       move.l 1b1d8 <SysBase>,d0
    6dac:	       movea.l d0,a6
    6dae:	       move.l 12(sp),d0
    6db2:	       move.l 8(sp),d1
    6db6:	       jsr -684(a6)
    6dba:	       move.l d0,4(sp)
    6dbe:	       move.l 4(sp),d0
    6dc2:	       move.l d0,1b234 <speech>
	if (speech) {
    6dc8:	       move.l 1b234 <speech>,d0
    6dce:	/----- beq.s 6dfa <initSpeech+0x64>
		speech -> currentTalker = NULL;
    6dd0:	|      movea.l 1b234 <speech>,a0
    6dd6:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    6dd8:	|      movea.l 1b234 <speech>,a0
    6dde:	|      clr.l 4(a0)
		speech -> speechY = 0;
    6de2:	|      movea.l 1b234 <speech>,a0
    6de8:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    6dec:	|      movea.l 1b234 <speech>,a0
    6df2:	|      moveq #-1,d0
    6df4:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    6df8:	|  /-- bra.s 6e08 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    6dfa:	\--|-> pea 1774c <PutChar+0x11d6>
    6e00:	   |   jsr 15c26 <KPrintF>
    6e06:	   |   addq.l #4,sp
}
    6e08:	   \-> nop
    6e0a:	       movea.l (sp)+,a6
    6e0c:	       lea 12(sp),sp
    6e10:	       rts

00006e12 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    6e12:	       movea.l 1b234 <speech>,a0
    6e18:	       move.l 4(a0),d0
    6e1c:	/----- beq.s 6e2a <isThereAnySpeechGoingOn+0x18>
    6e1e:	|      movea.l 1b234 <speech>,a0
    6e24:	|      move.l 16(a0),d0
    6e28:	|  /-- bra.s 6e2c <isThereAnySpeechGoingOn+0x1a>
    6e2a:	\--|-> moveq #-1,d0
}
    6e2c:	   \-> rts

00006e2e <killAllSpeech>:

void killAllSpeech () {
    6e2e:	       lea -12(sp),sp
    6e32:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    6e34:	       movea.l 1b234 <speech>,a0
    6e3a:	       move.l 12(a0),d0
    6e3e:	       moveq #-1,d1
    6e40:	       cmp.l d0,d1
    6e42:	   /-- beq.s 6e50 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    6e44:	   |   movea.l 1b234 <speech>,a0
    6e4a:	   |   moveq #-1,d0
    6e4c:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    6e50:	   \-> movea.l 1b234 <speech>,a0
    6e56:	       move.l (a0),d0
    6e58:	/----- beq.w 6ee4 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    6e5c:	|      movea.l 1b234 <speech>,a0
    6e62:	|      move.l (a0),d1
    6e64:	|      lea -132(sp),sp
    6e68:	|      move.l sp,d0
    6e6a:	|      movea.w #132,a0
    6e6e:	|      move.l a0,-(sp)
    6e70:	|      move.l d1,-(sp)
    6e72:	|      move.l d0,-(sp)
    6e74:	|      jsr 15bda <memcpy>
    6e7a:	|      lea 12(sp),sp
    6e7e:	|      jsr 9b68 <makeSilent>
    6e84:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    6e88:	|      movea.l 1b234 <speech>,a0
    6e8e:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    6e90:	+----- bra.s 6ee4 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    6e92:	|  /-> movea.l 1b234 <speech>,a0
    6e98:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    6e9e:	|  |   movea.l 1b234 <speech>,a0
    6ea4:	|  |   movea.l 4(a0),a1
    6ea8:	|  |   movea.l 1b234 <speech>,a0
    6eae:	|  |   move.l 4(a1),d0
    6eb2:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    6eb6:	|  |   movea.l 12(sp),a0
    6eba:	|  |   move.l (a0),8(sp)
    6ebe:	|  |   move.l 1b1d8 <SysBase>,d0
    6ec4:	|  |   movea.l d0,a6
    6ec6:	|  |   movea.l 8(sp),a1
    6eca:	|  |   jsr -690(a6)
		FreeVec(killMe);
    6ece:	|  |   move.l 12(sp),4(sp)
    6ed4:	|  |   move.l 1b1d8 <SysBase>,d0
    6eda:	|  |   movea.l d0,a6
    6edc:	|  |   movea.l 4(sp),a1
    6ee0:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    6ee4:	\--|-> movea.l 1b234 <speech>,a0
    6eea:	   |   move.l 4(a0),d0
    6eee:	   \-- bne.s 6e92 <killAllSpeech+0x64>
	}
}
    6ef0:	       nop
    6ef2:	       nop
    6ef4:	       movea.l (sp)+,a6
    6ef6:	       lea 12(sp),sp
    6efa:	       rts

00006efc <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    6efc:	pea 2 <_start+0x2>
    6f00:	move.l 8(sp),-(sp)
    6f04:	jsr 705c <setFrames>
    6f0a:	addq.l #8,sp
}
    6f0c:	nop
    6f0e:	rts

00006f10 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    6f10:	       lea -52(sp),sp
    6f14:	       move.l a6,-(sp)
    6f16:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    6f18:	       movea.l 64(sp),a0
    6f1c:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    6f22:	       move.l 1ab64 <speechSpeed>,d0
    6f28:	       move.l 68(sp),-(sp)
    6f2c:	       move.l d0,-(sp)
    6f2e:	       jsr a46 <putFloat>
    6f34:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    6f36:	       movea.l 64(sp),a0
    6f3a:	       move.l 8(a0),d0
    6f3e:	       move.l 68(sp),-(sp)
    6f42:	       move.l d0,-(sp)
    6f44:	       jsr 8d0 <put2bytes>
    6f4a:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    6f4c:	       movea.l 64(sp),a0
    6f50:	       move.l 16(a0),d0
    6f54:	       move.l 68(sp),-(sp)
    6f58:	       move.l d0,-(sp)
    6f5a:	       jsr 8d0 <put2bytes>
    6f60:	       addq.l #8,sp
		if (sS -> currentTalker) {
    6f62:	       movea.l 64(sp),a0
    6f66:	       move.l (a0),d0
    6f68:	   /-- beq.s 6fac <saveSpeech+0x9c>
			FPutC (fp, 1);
    6f6a:	   |   move.l 68(sp),40(sp)
    6f70:	   |   moveq #1,d0
    6f72:	   |   move.l d0,36(sp)
    6f76:	   |   move.l 1b1e0 <DOSBase>,d0
    6f7c:	   |   movea.l d0,a6
    6f7e:	   |   move.l 40(sp),d1
    6f82:	   |   move.l 36(sp),d2
    6f86:	   |   jsr -312(a6)
    6f8a:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    6f8e:	   |   movea.l 64(sp),a0
    6f92:	   |   movea.l (a0),a0
    6f94:	   |   movea.l 114(a0),a0
    6f98:	   |   move.l 4(a0),d0
    6f9c:	   |   move.l 68(sp),-(sp)
    6fa0:	   |   move.l d0,-(sp)
    6fa2:	   |   jsr 8d0 <put2bytes>
    6fa8:	   |   addq.l #8,sp
    6faa:	/--|-- bra.s 7028 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    6fac:	|  \-> move.l 68(sp),52(sp)
    6fb2:	|      clr.l 48(sp)
    6fb6:	|      move.l 1b1e0 <DOSBase>,d0
    6fbc:	|      movea.l d0,a6
    6fbe:	|      move.l 52(sp),d1
    6fc2:	|      move.l 48(sp),d2
    6fc6:	|      jsr -312(a6)
    6fca:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    6fce:	+----- bra.s 7028 <saveSpeech+0x118>
			FPutC (fp, 1);
    6fd0:	|  /-> move.l 68(sp),16(sp)
    6fd6:	|  |   moveq #1,d0
    6fd8:	|  |   move.l d0,12(sp)
    6fdc:	|  |   move.l 1b1e0 <DOSBase>,d0
    6fe2:	|  |   movea.l d0,a6
    6fe4:	|  |   move.l 16(sp),d1
    6fe8:	|  |   move.l 12(sp),d2
    6fec:	|  |   jsr -312(a6)
    6ff0:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    6ff4:	|  |   movea.l 56(sp),a0
    6ff8:	|  |   move.l (a0),d0
    6ffa:	|  |   move.l 68(sp),-(sp)
    6ffe:	|  |   move.l d0,-(sp)
    7000:	|  |   jsr bd8 <writeString>
    7006:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    7008:	|  |   movea.l 56(sp),a0
    700c:	|  |   move.l 8(a0),d0
    7010:	|  |   move.l 68(sp),-(sp)
    7014:	|  |   move.l d0,-(sp)
    7016:	|  |   jsr 8d0 <put2bytes>
    701c:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    701e:	|  |   movea.l 56(sp),a0
    7022:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    7028:	\--|-> tst.l 56(sp)
    702c:	   \-- bne.s 6fd0 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    702e:	       move.l 68(sp),28(sp)
    7034:	       clr.l 24(sp)
    7038:	       move.l 1b1e0 <DOSBase>,d0
    703e:	       movea.l d0,a6
    7040:	       move.l 28(sp),d1
    7044:	       move.l 24(sp),d2
    7048:	       jsr -312(a6)
    704c:	       move.l d0,20(sp)
}
    7050:	       nop
    7052:	       move.l (sp)+,d2
    7054:	       movea.l (sp)+,a6
    7056:	       lea 52(sp),sp
    705a:	       rts

0000705c <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    705c:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    705e:	movea.l 8(sp),a0
    7062:	movea.l 80(a0),a0
    7066:	move.l (a0),d2
    7068:	movea.l 8(sp),a0
    706c:	movea.l 80(a0),a0
    7070:	move.l 4(a0),d0
    7074:	move.l 12(sp),-(sp)
    7078:	move.l d0,-(sp)
    707a:	jsr 16460 <__mulsi3>
    7080:	addq.l #8,sp
    7082:	move.l d0,d1
    7084:	movea.l 8(sp),a0
    7088:	move.l 106(a0),d0
    708c:	add.l d1,d0
    708e:	add.l d0,d0
    7090:	add.l d0,d0
    7092:	movea.l d2,a0
    7094:	adda.l d0,a0
    7096:	move.l (a0),d0
    7098:	movea.l 8(sp),a0
    709c:	move.l d0,72(a0)
}
    70a0:	nop
    70a2:	move.l (sp)+,d2
    70a4:	rts

000070a6 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    70a6:	       lea -20(sp),sp
    70aa:	       move.l d2,-(sp)
    70ac:	       move.l 40(sp),d0
    70b0:	       move.w d0,d0
    70b2:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    70b6:	       movea.l 1b234 <speech>,a0
    70bc:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    70c2:	       move.l 32(sp),-(sp)
    70c6:	       jsr 9652 <findPerson>
    70cc:	       addq.l #4,sp
    70ce:	       move.l d0,16(sp)
    if (thisPerson) {
    70d2:	   /-- beq.s 70f8 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    70d4:	   |   movea.w 6(sp),a0
    70d8:	   |   move.l a0,-(sp)
    70da:	   |   move.l 40(sp),-(sp)
    70de:	   |   move.l 24(sp),-(sp)
    70e2:	   |   move.l 40(sp),-(sp)
    70e6:	   |   jsr 71be <wrapSpeechPerson>
    70ec:	   |   lea 16(sp),sp
    70f0:	   |   move.l d0,20(sp)
    70f4:	/--|-- bra.w 71b2 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    70f8:	|  \-> move.l 32(sp),-(sp)
    70fc:	|      jsr 14448 <getRegionForObject>
    7102:	|      addq.l #4,sp
    7104:	|      move.l d0,12(sp)
        if (thisRegion) {
    7108:	|  /-- beq.s 7174 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    710a:	|  |   movea.l 12(sp),a0
    710e:	|  |   movea.l 28(a0),a0
    7112:	|  |   move.l 28(a0),d0
    7116:	|  |   movea.l 12(sp),a0
    711a:	|  |   movea.l 4(a0),a1
    711e:	|  |   movea.l 12(sp),a0
    7122:	|  |   movea.l 28(a0),a0
    7126:	|  |   move.l 20(a0),d1
    712a:	|  |   movea.l a1,a0
    712c:	|  |   suba.l d1,a0
    712e:	|  |   move.l 1b2ee <cameraY>,d1
    7134:	|  |   movea.l a0,a1
    7136:	|  |   suba.l d1,a1
    7138:	|  |   movea.l 12(sp),a0
    713c:	|  |   move.l (a0),d2
    713e:	|  |   movea.l 12(sp),a0
    7142:	|  |   move.l 8(a0),d1
    7146:	|  |   add.l d2,d1
    7148:	|  |   move.l d1,d2
    714a:	|  |   asr.l #1,d2
    714c:	|  |   move.l 1b2ea <cameraX>,d1
    7152:	|  |   movea.l d2,a0
    7154:	|  |   suba.l d1,a0
    7156:	|  |   move.l 36(sp),-(sp)
    715a:	|  |   move.l d0,-(sp)
    715c:	|  |   move.l a1,-(sp)
    715e:	|  |   move.l a0,-(sp)
    7160:	|  |   move.l 44(sp),-(sp)
    7164:	|  |   jsr 72dc <wrapSpeechXY>
    716a:	|  |   lea 20(sp),sp
    716e:	|  |   move.l d0,20(sp)
    7172:	+--|-- bra.s 71b2 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    7174:	|  \-> move.l 32(sp),-(sp)
    7178:	|      jsr c52c <findObjectType>
    717e:	|      addq.l #4,sp
    7180:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    7184:	|      movea.l 8(sp),a0
    7188:	|      move.l 28(a0),d1
    718c:	|      move.l 1b12c <winWidth>,d0
    7192:	|      lsr.l #1,d0
    7194:	|      move.l 36(sp),-(sp)
    7198:	|      move.l d1,-(sp)
    719a:	|      pea a <_start+0xa>
    719e:	|      move.l d0,-(sp)
    71a0:	|      move.l 44(sp),-(sp)
    71a4:	|      jsr 72dc <wrapSpeechXY>
    71aa:	|      lea 20(sp),sp
    71ae:	|      move.l d0,20(sp)
        }
    }
    return i;
    71b2:	\----> move.l 20(sp),d0
}
    71b6:	       move.l (sp)+,d2
    71b8:	       lea 20(sp),sp
    71bc:	       rts

000071be <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    71be:	    subq.l #8,sp
    71c0:	    movem.l d2-d4,-(sp)
    71c4:	    move.l 36(sp),d0
    71c8:	    move.w d0,d0
    71ca:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    71ce:	    movea.l 28(sp),a0
    71d2:	    movea.l 114(a0),a0
    71d6:	    move.l 28(a0),d2
    71da:	    movea.l 28(sp),a0
    71de:	    move.l 4(a0),d3
    71e2:	    move.l 1b2ee <cameraY>,d0
    71e8:	    move.l d0,-(sp)
    71ea:	    jsr 15ede <__floatsisf>
    71f0:	    addq.l #4,sp
    71f2:	    move.l d0,-(sp)
    71f4:	    move.l d3,-(sp)
    71f6:	    jsr 161d2 <__subsf3>
    71fc:	    addq.l #8,sp
    71fe:	    move.l d0,d3
    7200:	    movea.l 28(sp),a0
    7204:	    move.l 32(a0),d4
    7208:	    movea.l 28(sp),a0
    720c:	    move.l 20(a0),d1
    7210:	    movea.l 28(sp),a0
    7214:	    move.l 24(a0),d0
    7218:	    sub.l d0,d1
    721a:	    move.l d1,-(sp)
    721c:	    jsr 15ede <__floatsisf>
    7222:	    addq.l #4,sp
    7224:	    move.l d0,-(sp)
    7226:	    move.l d4,-(sp)
    7228:	    jsr 15f90 <__mulsf3>
    722e:	    addq.l #8,sp
    7230:	    move.l d0,-(sp)
    7232:	    move.l d3,-(sp)
    7234:	    jsr 161d2 <__subsf3>
    723a:	    addq.l #8,sp
    723c:	    move.l d0,d3
    723e:	    movea.l 28(sp),a0
    7242:	    movea.l 114(a0),a0
    7246:	    move.l 20(a0),d0
    724a:	    move.l d0,-(sp)
    724c:	    jsr 15ede <__floatsisf>
    7252:	    addq.l #4,sp
    7254:	    move.l d0,-(sp)
    7256:	    move.l d3,-(sp)
    7258:	    jsr 161d2 <__subsf3>
    725e:	    addq.l #8,sp
    7260:	    move.l d0,-(sp)
    7262:	    jsr 15e76 <__fixsfsi>
    7268:	    addq.l #4,sp
    726a:	    move.l d0,d4
    726c:	    movea.l 28(sp),a0
    7270:	    move.l (a0),d3
    7272:	    move.l 1b2ea <cameraX>,d0
    7278:	    move.l d0,-(sp)
    727a:	    jsr 15ede <__floatsisf>
    7280:	    addq.l #4,sp
    7282:	    move.l d0,-(sp)
    7284:	    move.l d3,-(sp)
    7286:	    jsr 161d2 <__subsf3>
    728c:	    addq.l #8,sp
    728e:	    move.l d0,-(sp)
    7290:	    jsr 15e76 <__fixsfsi>
    7296:	    addq.l #4,sp
    7298:	    move.l 32(sp),-(sp)
    729c:	    move.l d2,-(sp)
    729e:	    move.l d4,-(sp)
    72a0:	    move.l d0,-(sp)
    72a2:	    move.l 40(sp),-(sp)
    72a6:	    jsr 72dc <wrapSpeechXY>
    72ac:	    lea 20(sp),sp
    72b0:	    move.l d0,16(sp)
	if (animPerson) {
    72b4:	    tst.w 14(sp)
    72b8:	/-- beq.s 72d0 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    72ba:	|   move.l 28(sp),-(sp)
    72be:	|   jsr 6efc <makeTalker>
    72c4:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    72c6:	|   movea.l 1b234 <speech>,a0
    72cc:	|   move.l 28(sp),(a0)
	}
	return i;
    72d0:	\-> move.l 16(sp),d0
}
    72d4:	    movem.l (sp)+,d2-d4
    72d8:	    addq.l #8,sp
    72da:	    rts

000072dc <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    72dc:	                   lea -16(sp),sp
    72e0:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    72e4:	                   clr.l 16(sp)
    killAllSpeech();
    72e8:	                   jsr 6e2e <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    72ee:	                   move.l 36(sp),-(sp)
    72f2:	                   jsr 12c20 <strlen>
    72f8:	                   addq.l #4,sp
    72fa:	                   movea.l d0,a0
    72fc:	                   lea 20(a0),a0
    7300:	                   move.l a0,-(sp)
    7302:	                   jsr 15f06 <__floatunsisf>
    7308:	                   addq.l #4,sp
    730a:	                   move.l d0,d1
    730c:	                   move.l 1ab64 <speechSpeed>,d0
    7312:	                   move.l d0,-(sp)
    7314:	                   move.l d1,-(sp)
    7316:	                   jsr 15f90 <__mulsf3>
    731c:	                   addq.l #8,sp
    731e:	                   move.l d0,-(sp)
    7320:	                   jsr 15e76 <__fixsfsi>
    7326:	                   addq.l #4,sp
    7328:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    732c:	               /-- bgt.s 7334 <wrapSpeechXY+0x58>
    732e:	               |   moveq #1,d0
    7330:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    7334:	               \-> moveq #-1,d1
    7336:	                   cmp.l 52(sp),d1
    733a:	               /-- beq.s 737a <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    733c:	               |   move.l 1b2fe <speechMode>,d0
    7342:	               +-- ble.s 737a <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    7344:	               |   clr.l -(sp)
    7346:	               |   move.l 56(sp),-(sp)
    734a:	               |   jsr c1f6 <startSound>
    7350:	               |   addq.l #8,sp
    7352:	               |   tst.w d0
    7354:	               +-- beq.s 737a <wrapSpeechXY+0x9e>
                speechTime = -10;
    7356:	               |   moveq #-10,d0
    7358:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    735c:	               |   movea.l 1b234 <speech>,a0
    7362:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    7368:	               |   move.l 1b2fe <speechMode>,d0
    736e:	               |   moveq #2,d1
    7370:	               |   cmp.l d0,d1
    7372:	               +-- bne.s 737a <wrapSpeechXY+0x9e>
    7374:	               |   moveq #-10,d0
    7376:	/--------------|-- bra.w 7600 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    737a:	|              \-> movea.l 1b234 <speech>,a0
    7380:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    7386:	|     /----------- bra.w 743a <wrapSpeechXY+0x15e>
        a = wrap;
    738a:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    7390:	|  |  |        /-- bra.s 73a0 <wrapSpeechXY+0xc4>
            a--;
    7392:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    7396:	|  |  |  |     +-- bne.s 73a0 <wrapSpeechXY+0xc4>
                a = wrap;
    7398:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    739e:	|  |  |  |  /--|-- bra.s 73b2 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    73a0:	|  |  |  |  |  \-> move.l 28(sp),d0
    73a4:	|  |  |  |  |      movea.l 36(sp),a0
    73a8:	|  |  |  |  |      adda.l d0,a0
    73aa:	|  |  |  |  |      move.b (a0),d0
    73ac:	|  |  |  |  |      cmpi.b #32,d0
    73b0:	|  |  |  \--|----- bne.s 7392 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    73b2:	|  |  |     \----> move.l 28(sp),d0
    73b6:	|  |  |            movea.l 36(sp),a0
    73ba:	|  |  |            adda.l d0,a0
    73bc:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    73be:	|  |  |            lea 16(sp),a0
    73c2:	|  |  |            move.l a0,-(sp)
    73c4:	|  |  |            move.l 44(sp),-(sp)
    73c8:	|  |  |            move.l 44(sp),-(sp)
    73cc:	|  |  |            jsr 6b78 <addSpeechLine>
    73d2:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    73d6:	|  |  |            move.l 28(sp),d0
    73da:	|  |  |            movea.l 36(sp),a0
    73de:	|  |  |            adda.l d0,a0
    73e0:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    73e4:	|  |  |            move.l 28(sp),d0
    73e8:	|  |  |            addq.l #1,d0
    73ea:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    73ee:	|  |  |            move.l 44(sp),-(sp)
    73f2:	|  |  |            jsr 15ede <__floatsisf>
    73f8:	|  |  |            addq.l #4,sp
    73fa:	|  |  |            move.l d0,d2
    73fc:	|  |  |            move.l 1b328 <fontHeight>,d0
    7402:	|  |  |            move.l d0,-(sp)
    7404:	|  |  |            jsr 15ede <__floatsisf>
    740a:	|  |  |            addq.l #4,sp
    740c:	|  |  |            move.l d0,d1
    740e:	|  |  |            move.l 1ab78 <cameraZoom>,d0
    7414:	|  |  |            move.l d0,-(sp)
    7416:	|  |  |            move.l d1,-(sp)
    7418:	|  |  |            jsr 15d8a <__divsf3>
    741e:	|  |  |            addq.l #8,sp
    7420:	|  |  |            move.l d0,-(sp)
    7422:	|  |  |            move.l d2,-(sp)
    7424:	|  |  |            jsr 161d2 <__subsf3>
    742a:	|  |  |            addq.l #8,sp
    742c:	|  |  |            move.l d0,-(sp)
    742e:	|  |  |            jsr 15e76 <__fixsfsi>
    7434:	|  |  |            addq.l #4,sp
    7436:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    743a:	|  |  \----------> move.l 36(sp),-(sp)
    743e:	|  |               jsr 12c20 <strlen>
    7444:	|  |               addq.l #4,sp
    7446:	|  |               move.l d0,d1
    7448:	|  |               move.l 48(sp),d0
    744c:	|  |               cmp.l d1,d0
    744e:	|  \-------------- bcs.w 738a <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    7452:	|                  lea 16(sp),a0
    7456:	|                  move.l a0,-(sp)
    7458:	|                  move.l 44(sp),-(sp)
    745c:	|                  move.l 44(sp),-(sp)
    7460:	|                  jsr 6b78 <addSpeechLine>
    7466:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    746a:	|                  move.l 44(sp),-(sp)
    746e:	|                  jsr 15ede <__floatsisf>
    7474:	|                  addq.l #4,sp
    7476:	|                  move.l d0,d2
    7478:	|                  move.l 1b328 <fontHeight>,d0
    747e:	|                  move.l d0,-(sp)
    7480:	|                  jsr 15ede <__floatsisf>
    7486:	|                  addq.l #4,sp
    7488:	|                  move.l d0,d1
    748a:	|                  move.l 1ab78 <cameraZoom>,d0
    7490:	|                  move.l d0,-(sp)
    7492:	|                  move.l d1,-(sp)
    7494:	|                  jsr 15d8a <__divsf3>
    749a:	|                  addq.l #8,sp
    749c:	|                  move.l d0,-(sp)
    749e:	|                  move.l d2,-(sp)
    74a0:	|                  jsr 161d2 <__subsf3>
    74a6:	|                  addq.l #8,sp
    74a8:	|                  move.l d0,-(sp)
    74aa:	|                  jsr 15e76 <__fixsfsi>
    74b0:	|                  addq.l #4,sp
    74b2:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    74b6:	|              /-- bpl.s 74d4 <wrapSpeechXY+0x1f8>
    74b8:	|              |   movea.l 1b234 <speech>,a0
    74be:	|              |   move.l 8(a0),d0
    74c2:	|              |   movea.l 1b234 <speech>,a0
    74c8:	|              |   sub.l 44(sp),d0
    74cc:	|              |   move.l d0,8(a0)
    74d0:	|           /--|-- bra.w 75c2 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    74d4:	|           |  \-> movea.l 1b234 <speech>,a0
    74da:	|           |      move.l 8(a0),d0
    74de:	|           |      move.l d0,-(sp)
    74e0:	|           |      jsr 15ede <__floatsisf>
    74e6:	|           |      addq.l #4,sp
    74e8:	|           |      move.l d0,d2
    74ea:	|           |      move.l 1b2ee <cameraY>,d0
    74f0:	|           |      move.l d0,-(sp)
    74f2:	|           |      jsr 15ede <__floatsisf>
    74f8:	|           |      addq.l #4,sp
    74fa:	|           |      move.l d0,d3
    74fc:	|           |      move.l 1b130 <winHeight>,d4
    7502:	|           |      move.l 1b328 <fontHeight>,d0
    7508:	|           |      pea 3 <_start+0x3>
    750c:	|           |      move.l d0,-(sp)
    750e:	|           |      jsr 164de <__divsi3>
    7514:	|           |      addq.l #8,sp
    7516:	|           |      move.l d4,d1
    7518:	|           |      sub.l d0,d1
    751a:	|           |      move.l d1,-(sp)
    751c:	|           |      jsr 15f06 <__floatunsisf>
    7522:	|           |      addq.l #4,sp
    7524:	|           |      move.l d0,d1
    7526:	|           |      move.l 1ab78 <cameraZoom>,d0
    752c:	|           |      move.l d0,-(sp)
    752e:	|           |      move.l d1,-(sp)
    7530:	|           |      jsr 15d8a <__divsf3>
    7536:	|           |      addq.l #8,sp
    7538:	|           |      move.l d0,-(sp)
    753a:	|           |      move.l d3,-(sp)
    753c:	|           |      jsr 15c90 <__addsf3>
    7542:	|           |      addq.l #8,sp
    7544:	|           |      move.l d0,-(sp)
    7546:	|           |      move.l d2,-(sp)
    7548:	|           |      jsr 1604a <__gtsf2>
    754e:	|           |      addq.l #8,sp
    7550:	|           |      tst.l d0
    7552:	|           +----- ble.s 75c2 <wrapSpeechXY+0x2e6>
    7554:	|           |      move.l 1b2ee <cameraY>,d0
    755a:	|           |      move.l d0,-(sp)
    755c:	|           |      jsr 15ede <__floatsisf>
    7562:	|           |      addq.l #4,sp
    7564:	|           |      move.l d0,d2
    7566:	|           |      move.l 1b130 <winHeight>,d3
    756c:	|           |      move.l 1b328 <fontHeight>,d0
    7572:	|           |      pea 3 <_start+0x3>
    7576:	|           |      move.l d0,-(sp)
    7578:	|           |      jsr 164de <__divsi3>
    757e:	|           |      addq.l #8,sp
    7580:	|           |      move.l d3,d1
    7582:	|           |      sub.l d0,d1
    7584:	|           |      move.l d1,-(sp)
    7586:	|           |      jsr 15f06 <__floatunsisf>
    758c:	|           |      addq.l #4,sp
    758e:	|           |      move.l d0,d1
    7590:	|           |      move.l 1ab78 <cameraZoom>,d0
    7596:	|           |      move.l d0,-(sp)
    7598:	|           |      move.l d1,-(sp)
    759a:	|           |      jsr 15d8a <__divsf3>
    75a0:	|           |      addq.l #8,sp
    75a2:	|           |      move.l d0,-(sp)
    75a4:	|           |      move.l d2,-(sp)
    75a6:	|           |      jsr 15c90 <__addsf3>
    75ac:	|           |      addq.l #8,sp
    75ae:	|           |      movea.l 1b234 <speech>,a2
    75b4:	|           |      move.l d0,-(sp)
    75b6:	|           |      jsr 15e76 <__fixsfsi>
    75bc:	|           |      addq.l #4,sp
    75be:	|           |      move.l d0,8(a2)

    if (offset) {
    75c2:	|           \----> move.l 16(sp),d0
    75c6:	|        /-------- beq.s 75fc <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    75c8:	|        |         movea.l 1b234 <speech>,a0
    75ce:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    75d4:	|        |     /-- bra.s 75f6 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    75d6:	|        |  /--|-> movea.l 20(sp),a0
    75da:	|        |  |  |   move.l 8(a0),d1
    75de:	|        |  |  |   move.l 16(sp),d0
    75e2:	|        |  |  |   add.l d1,d0
    75e4:	|        |  |  |   movea.l 20(sp),a0
    75e8:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    75ec:	|        |  |  |   movea.l 20(sp),a0
    75f0:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    75f6:	|        |  |  \-> tst.l 20(sp)
    75fa:	|        |  \----- bne.s 75d6 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    75fc:	|        \-------> move.l 24(sp),d0
}
    7600:	\----------------> movem.l (sp)+,d2-d4/a2
    7604:	                   lea 16(sp),sp
    7608:	                   rts

0000760a <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    760a:	    subq.l #4,sp
    760c:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    760e:	    move.l 1b288 <zBuffer+0x50>,d0
    7614:	/-- beq.s 764c <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    7616:	|   pea 1b28c <zBuffer+0x54>
    761c:	|   pea 1 <_start+0x1>
    7620:	|   jsr 2f1c <deleteTextures>
    7626:	|   addq.l #8,sp
		zBuffer.texName = 0;
    7628:	|   clr.l 1b28c <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    762e:	|   move.l 1b288 <zBuffer+0x50>,4(sp)
    7636:	|   move.l 1b1d8 <SysBase>,d0
    763c:	|   movea.l d0,a6
    763e:	|   movea.l 4(sp),a1
    7642:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    7646:	|   clr.l 1b288 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    764c:	\-> clr.l 1b240 <zBuffer+0x8>
	zBuffer.originalNum =0;
    7652:	    clr.l 1b284 <zBuffer+0x4c>
}
    7658:	    nop
    765a:	    movea.l (sp)+,a6
    765c:	    addq.l #4,sp
    765e:	    rts

00007660 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    7660:	                         lea -528(sp),sp
    7664:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    7668:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    766c:	                         jsr 760a <killZBuffer>

	zBuffer.originalNum = y;
    7672:	                         move.l 544(sp),d0
    7676:	                         move.l d0,1b284 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    767c:	                         move.l 544(sp),d0
    7680:	                         move.l d0,-(sp)
    7682:	                         jsr 5c76 <openFileFromNum>
    7688:	                         addq.l #4,sp
    768a:	                         tst.l d0
    768c:	                     /-- bne.s 7694 <setZBuffer+0x34>
    768e:	                     |   clr.w d0
    7690:	/--------------------|-- bra.w 7a72 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    7694:	|                    \-> move.l 1b1c0 <bigDataFile>,524(sp)
    769c:	|                        move.l 1b1e0 <DOSBase>,d0
    76a2:	|                        movea.l d0,a6
    76a4:	|                        move.l 524(sp),d1
    76a8:	|                        jsr -306(a6)
    76ac:	|                        move.l d0,520(sp)
    76b0:	|                        move.l 520(sp),d0
    76b4:	|                        moveq #83,d1
    76b6:	|                        cmp.l d0,d1
    76b8:	|                    /-- beq.s 771a <setZBuffer+0xba>
    76ba:	|                    |   move.l 1b1c0 <bigDataFile>,516(sp)
    76c2:	|                    |   move.l 1b1e0 <DOSBase>,d0
    76c8:	|                    |   movea.l d0,a6
    76ca:	|                    |   move.l 516(sp),d1
    76ce:	|                    |   jsr -306(a6)
    76d2:	|                    |   move.l d0,512(sp)
    76d6:	|                    |   move.l 512(sp),d0
    76da:	|                    |   moveq #122,d1
    76dc:	|                    |   cmp.l d0,d1
    76de:	|                    +-- beq.s 771a <setZBuffer+0xba>
    76e0:	|                    |   move.l 1b1c0 <bigDataFile>,508(sp)
    76e8:	|                    |   move.l 1b1e0 <DOSBase>,d0
    76ee:	|                    |   movea.l d0,a6
    76f0:	|                    |   move.l 508(sp),d1
    76f4:	|                    |   jsr -306(a6)
    76f8:	|                    |   move.l d0,504(sp)
    76fc:	|                    |   move.l 504(sp),d0
    7700:	|                    |   moveq #98,d1
    7702:	|                    |   cmp.l d0,d1
    7704:	|                    +-- beq.s 771a <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    7706:	|                    |   pea 17789 <PutChar+0x1213>
    770c:	|                    |   jsr 15c26 <KPrintF>
    7712:	|                    |   addq.l #4,sp
		 return FALSE;
    7714:	|                    |   clr.w d0
    7716:	+--------------------|-- bra.w 7a72 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    771a:	|                    \-> move.l 1b1c0 <bigDataFile>,500(sp)
    7722:	|                        move.l 1b1e0 <DOSBase>,d0
    7728:	|                        movea.l d0,a6
    772a:	|                        move.l 500(sp),d1
    772e:	|                        jsr -306(a6)
    7732:	|                        move.l d0,496(sp)
    7736:	|                        move.l 496(sp),d0
    773a:	|                    /-- beq.s 7744 <setZBuffer+0xe4>
    773c:	|                    |   moveq #1,d1
    773e:	|                    |   cmp.l d0,d1
    7740:	|                 /--|-- beq.s 775a <setZBuffer+0xfa>
    7742:	|              /--|--|-- bra.s 7788 <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    7744:	|              |  |  \-> move.l #640,1b238 <zBuffer>
		zBuffer.height = 480;
    774e:	|              |  |      move.l #480,1b23c <zBuffer+0x4>
		break;
    7758:	|              |  |  /-- bra.s 779c <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    775a:	|              |  \--|-> move.l 1b1c0 <bigDataFile>,d0
    7760:	|              |     |   move.l d0,-(sp)
    7762:	|              |     |   jsr 6bc <get2bytes>
    7768:	|              |     |   addq.l #4,sp
    776a:	|              |     |   move.l d0,1b238 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    7770:	|              |     |   move.l 1b1c0 <bigDataFile>,d0
    7776:	|              |     |   move.l d0,-(sp)
    7778:	|              |     |   jsr 6bc <get2bytes>
    777e:	|              |     |   addq.l #4,sp
    7780:	|              |     |   move.l d0,1b23c <zBuffer+0x4>
		break;
    7786:	|              |     +-- bra.s 779c <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    7788:	|              \-----|-> pea 1779d <PutChar+0x1227>
    778e:	|                    |   jsr 15c26 <KPrintF>
    7794:	|                    |   addq.l #4,sp
		return FALSE;
    7796:	|                    |   clr.w d0
    7798:	+--------------------|-- bra.w 7a72 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    779c:	|                    \-> move.l 1b238 <zBuffer>,d0
    77a2:	|                        move.l d0,d1
    77a4:	|                        move.l 1b2cc <sceneWidth>,d0
    77aa:	|                        cmp.l d1,d0
    77ac:	|                    /-- bne.s 77c0 <setZBuffer+0x160>
    77ae:	|                    |   move.l 1b23c <zBuffer+0x4>,d0
    77b4:	|                    |   move.l d0,d1
    77b6:	|                    |   move.l 1b2d0 <sceneHeight>,d0
    77bc:	|                    |   cmp.l d1,d0
    77be:	|                 /--|-- beq.s 7810 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    77c0:	|                 |  \-> movea.l 1b2d0 <sceneHeight>,a1
    77c6:	|                 |      movea.l 1b2cc <sceneWidth>,a0
    77cc:	|                 |      move.l 1b23c <zBuffer+0x4>,d1
    77d2:	|                 |      move.l 1b238 <zBuffer>,d0
    77d8:	|                 |      move.l a1,-(sp)
    77da:	|                 |      move.l a0,-(sp)
    77dc:	|                 |      move.l d1,-(sp)
    77de:	|                 |      move.l d0,-(sp)
    77e0:	|                 |      pea 177e9 <PutChar+0x1273>
    77e6:	|                 |      moveq #32,d0
    77e8:	|                 |      add.l sp,d0
    77ea:	|                 |      move.l d0,-(sp)
    77ec:	|                 |      jsr 12f3e <sprintf>
    77f2:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    77f6:	|                 |      moveq #12,d0
    77f8:	|                 |      add.l sp,d0
    77fa:	|                 |      move.l d0,-(sp)
    77fc:	|                 |      pea 17804 <PutChar+0x128e>
    7802:	|                 |      jsr 15c26 <KPrintF>
    7808:	|                 |      addq.l #8,sp
		return FALSE;
    780a:	|                 |      clr.w d0
    780c:	+-----------------|----- bra.w 7a72 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    7810:	|                 \----> move.l 1b1c0 <bigDataFile>,492(sp)
    7818:	|                        move.l 1b1e0 <DOSBase>,d0
    781e:	|                        movea.l d0,a6
    7820:	|                        move.l 492(sp),d1
    7824:	|                        jsr -306(a6)
    7828:	|                        move.l d0,488(sp)
    782c:	|                        move.l 488(sp),d0
    7830:	|                        move.l d0,1b240 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7836:	|                        clr.l 544(sp)
    783a:	|                    /-- bra.s 7866 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    783c:	|                 /--|-> move.l 1b1c0 <bigDataFile>,d0
    7842:	|                 |  |   move.l d0,-(sp)
    7844:	|                 |  |   jsr 6bc <get2bytes>
    784a:	|                 |  |   addq.l #4,sp
    784c:	|                 |  |   move.l 544(sp),d1
    7850:	|                 |  |   add.l d1,d1
    7852:	|                 |  |   add.l d1,d1
    7854:	|                 |  |   lea 540(sp),a0
    7858:	|                 |  |   add.l a0,d1
    785a:	|                 |  |   movea.l d1,a0
    785c:	|                 |  |   lea -144(a0),a0
    7860:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7862:	|                 |  |   addq.l #1,544(sp)
    7866:	|                 |  \-> move.l 1b240 <zBuffer+0x8>,d0
    786c:	|                 |      cmp.l 544(sp),d0
    7870:	|                 \----- bhi.s 783c <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    7872:	|                        move.l 1b240 <zBuffer+0x8>,d0
    7878:	|                        move.l d0,-(sp)
    787a:	|                        move.l sp,d0
    787c:	|                        addi.l #336,d0
    7882:	|                        move.l d0,-(sp)
    7884:	|                        move.l sp,d0
    7886:	|                        addi.l #404,d0
    788c:	|                        move.l d0,-(sp)
    788e:	|                        jsr 7a7c <sortZPal>
    7894:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7898:	|                        clr.l 544(sp)
    789c:	|                    /-- bra.s 7914 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    789e:	|                 /--|-> move.l 544(sp),d0
    78a2:	|                 |  |   add.l d0,d0
    78a4:	|                 |  |   add.l d0,d0
    78a6:	|                 |  |   move.l #540,d1
    78ac:	|                 |  |   add.l sp,d1
    78ae:	|                 |  |   add.l d1,d0
    78b0:	|                 |  |   movea.l d0,a0
    78b2:	|                 |  |   lea -208(a0),a0
    78b6:	|                 |  |   move.l (a0),d0
    78b8:	|                 |  |   add.l d0,d0
    78ba:	|                 |  |   add.l d0,d0
    78bc:	|                 |  |   lea 540(sp),a0
    78c0:	|                 |  |   add.l a0,d0
    78c2:	|                 |  |   movea.l d0,a0
    78c4:	|                 |  |   lea -144(a0),a0
    78c8:	|                 |  |   move.l (a0),d0
    78ca:	|                 |  |   move.l 544(sp),d1
    78ce:	|                 |  |   addq.l #3,d1
    78d0:	|                 |  |   add.l d1,d1
    78d2:	|                 |  |   movea.l d1,a1
    78d4:	|                 |  |   adda.l d1,a1
    78d6:	|                 |  |   lea 1b238 <zBuffer>,a0
    78dc:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    78e0:	|                 |  |   move.l 544(sp),d0
    78e4:	|                 |  |   add.l d0,d0
    78e6:	|                 |  |   add.l d0,d0
    78e8:	|                 |  |   move.l #540,d1
    78ee:	|                 |  |   add.l sp,d1
    78f0:	|                 |  |   add.l d1,d0
    78f2:	|                 |  |   movea.l d0,a0
    78f4:	|                 |  |   lea -208(a0),a0
    78f8:	|                 |  |   move.l (a0),d1
    78fa:	|                 |  |   move.l 544(sp),d0
    78fe:	|                 |  |   add.l d1,d1
    7900:	|                 |  |   add.l d1,d1
    7902:	|                 |  |   lea 540(sp),a0
    7906:	|                 |  |   add.l a0,d1
    7908:	|                 |  |   movea.l d1,a0
    790a:	|                 |  |   lea -272(a0),a0
    790e:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    7910:	|                 |  |   addq.l #1,544(sp)
    7914:	|                 |  \-> move.l 1b240 <zBuffer+0x8>,d0
    791a:	|                 |      cmp.l 544(sp),d0
    791e:	|                 \----- bhi.w 789e <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    7922:	|                        move.l 1b2cc <sceneWidth>,d0
    7928:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    792c:	|                        move.l 1b2d0 <sceneHeight>,d0
    7932:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    7936:	|                        move.l 484(sp),-(sp)
    793a:	|                        move.l 484(sp),-(sp)
    793e:	|                        jsr 16460 <__mulsi3>
    7944:	|                        addq.l #8,sp
    7946:	|                        move.l d0,476(sp)
    794a:	|                        clr.l 472(sp)
    794e:	|                        move.l 1b1d8 <SysBase>,d0
    7954:	|                        movea.l d0,a6
    7956:	|                        move.l 476(sp),d0
    795a:	|                        move.l 472(sp),d1
    795e:	|                        jsr -684(a6)
    7962:	|                        move.l d0,468(sp)
    7966:	|                        move.l 468(sp),d0
    796a:	|                        move.l d0,1b288 <zBuffer+0x50>
	if (!zBuffer.tex) {
    7970:	|                        move.l 1b288 <zBuffer+0x50>,d0
    7976:	|                    /-- bne.s 798c <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    7978:	|                    |   pea 17841 <PutChar+0x12cb>
    797e:	|                    |   jsr 15c26 <KPrintF>
    7984:	|                    |   addq.l #4,sp
		return FALSE;
    7986:	|                    |   clr.w d0
    7988:	+--------------------|-- bra.w 7a72 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    798c:	|                    \-> clr.l 544(sp)
    7990:	|     /----------------- bra.w 7a5c <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    7994:	|  /--|----------------> clr.l 536(sp)
    7998:	|  |  |     /----------- bra.w 7a48 <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    799c:	|  |  |  /--|----------> tst.l 528(sp)
    79a0:	|  |  |  |  |  /-------- bne.s 79fe <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    79a2:	|  |  |  |  |  |         move.l 1b1c0 <bigDataFile>,464(sp)
    79aa:	|  |  |  |  |  |         move.l 1b1e0 <DOSBase>,d0
    79b0:	|  |  |  |  |  |         movea.l d0,a6
    79b2:	|  |  |  |  |  |         move.l 464(sp),d1
    79b6:	|  |  |  |  |  |         jsr -306(a6)
    79ba:	|  |  |  |  |  |         move.l d0,460(sp)
    79be:	|  |  |  |  |  |         move.l 460(sp),d0
    79c2:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    79c6:	|  |  |  |  |  |         move.l 532(sp),d0
    79ca:	|  |  |  |  |  |         asr.l #4,d0
    79cc:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    79d0:	|  |  |  |  |  |         moveq #15,d0
    79d2:	|  |  |  |  |  |         cmp.l 528(sp),d0
    79d6:	|  |  |  |  |  |  /----- bne.s 79f4 <setZBuffer+0x394>
    79d8:	|  |  |  |  |  |  |      move.l 1b1c0 <bigDataFile>,d0
    79de:	|  |  |  |  |  |  |      move.l d0,-(sp)
    79e0:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    79e6:	|  |  |  |  |  |  |      addq.l #4,sp
    79e8:	|  |  |  |  |  |  |      movea.l d0,a0
    79ea:	|  |  |  |  |  |  |      lea 16(a0),a0
    79ee:	|  |  |  |  |  |  |      move.l a0,528(sp)
    79f2:	|  |  |  |  |  |  |  /-- bra.s 79f8 <setZBuffer+0x398>
				else stillToGo ++;
    79f4:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    79f8:	|  |  |  |  |  |     \-> moveq #15,d1
    79fa:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    79fe:	|  |  |  |  |  \-------> move.l 532(sp),d0
    7a02:	|  |  |  |  |            add.l d0,d0
    7a04:	|  |  |  |  |            add.l d0,d0
    7a06:	|  |  |  |  |            lea 540(sp),a0
    7a0a:	|  |  |  |  |            add.l a0,d0
    7a0c:	|  |  |  |  |            movea.l d0,a0
    7a0e:	|  |  |  |  |            lea -272(a0),a0
    7a12:	|  |  |  |  |            move.l (a0),d0
    7a14:	|  |  |  |  |            move.l d0,d2
    7a16:	|  |  |  |  |            move.l 1b288 <zBuffer+0x50>,d3
    7a1c:	|  |  |  |  |            move.l 484(sp),d0
    7a20:	|  |  |  |  |            move.l 544(sp),-(sp)
    7a24:	|  |  |  |  |            move.l d0,-(sp)
    7a26:	|  |  |  |  |            jsr 16460 <__mulsi3>
    7a2c:	|  |  |  |  |            addq.l #8,sp
    7a2e:	|  |  |  |  |            move.l d0,d1
    7a30:	|  |  |  |  |            move.l 536(sp),d0
    7a34:	|  |  |  |  |            add.l d1,d0
    7a36:	|  |  |  |  |            movea.l d3,a0
    7a38:	|  |  |  |  |            adda.l d0,a0
    7a3a:	|  |  |  |  |            move.b d2,d0
    7a3c:	|  |  |  |  |            lsl.b #4,d0
    7a3e:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    7a40:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    7a44:	|  |  |  |  |            addq.l #1,536(sp)
    7a48:	|  |  |  |  \----------> move.l 536(sp),d1
    7a4c:	|  |  |  |               move.l 1b2cc <sceneWidth>,d0
    7a52:	|  |  |  |               cmp.l d1,d0
    7a54:	|  |  |  \-------------- bhi.w 799c <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    7a58:	|  |  |                  addq.l #1,544(sp)
    7a5c:	|  |  \----------------> move.l 1b2d0 <sceneHeight>,d0
    7a62:	|  |                     cmp.l 544(sp),d0
    7a66:	|  \-------------------- bhi.w 7994 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    7a6a:	|                        jsr 5b6e <finishAccess>
	
	return TRUE;
    7a70:	|                        moveq #1,d0
}
    7a72:	\----------------------> movem.l (sp)+,d2-d3/a6
    7a76:	                         lea 528(sp),sp
    7a7a:	                         rts

00007a7c <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    7a7c:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    7a7e:	             clr.l 4(sp)
    7a82:	         /-- bra.s 7a9a <sortZPal+0x1e>
		newpal[i] = i;
    7a84:	      /--|-> move.l 4(sp),d0
    7a88:	      |  |   add.l d0,d0
    7a8a:	      |  |   add.l d0,d0
    7a8c:	      |  |   movea.l 16(sp),a0
    7a90:	      |  |   adda.l d0,a0
    7a92:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    7a96:	      |  |   addq.l #1,4(sp)
    7a9a:	      |  \-> move.l 4(sp),d0
    7a9e:	      |      cmp.l 20(sp),d0
    7aa2:	      \----- blt.s 7a84 <sortZPal+0x8>
	}

	if (size < 2) return;		
    7aa4:	             moveq #1,d0
    7aa6:	             cmp.l 20(sp),d0
    7aaa:	/----------- bge.w 7b5c <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    7aae:	|            moveq #1,d0
    7ab0:	|            move.l d0,4(sp)
    7ab4:	|     /----- bra.w 7b4e <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    7ab8:	|  /--|----> move.l 4(sp),d0
    7abc:	|  |  |      add.l d0,d0
    7abe:	|  |  |      add.l d0,d0
    7ac0:	|  |  |      movea.l 16(sp),a0
    7ac4:	|  |  |      adda.l d0,a0
    7ac6:	|  |  |      move.l (a0),d0
    7ac8:	|  |  |      add.l d0,d0
    7aca:	|  |  |      add.l d0,d0
    7acc:	|  |  |      movea.l 12(sp),a0
    7ad0:	|  |  |      adda.l d0,a0
    7ad2:	|  |  |      move.l (a0),d1
    7ad4:	|  |  |      move.l 4(sp),d0
    7ad8:	|  |  |      addi.l #1073741823,d0
    7ade:	|  |  |      add.l d0,d0
    7ae0:	|  |  |      add.l d0,d0
    7ae2:	|  |  |      movea.l 16(sp),a0
    7ae6:	|  |  |      adda.l d0,a0
    7ae8:	|  |  |      move.l (a0),d0
    7aea:	|  |  |      add.l d0,d0
    7aec:	|  |  |      add.l d0,d0
    7aee:	|  |  |      movea.l 12(sp),a0
    7af2:	|  |  |      adda.l d0,a0
    7af4:	|  |  |      move.l (a0),d0
    7af6:	|  |  |      cmp.l d1,d0
    7af8:	|  |  |  /-- ble.s 7b4a <sortZPal+0xce>
			tmp = newpal[i];
    7afa:	|  |  |  |   move.l 4(sp),d0
    7afe:	|  |  |  |   add.l d0,d0
    7b00:	|  |  |  |   add.l d0,d0
    7b02:	|  |  |  |   movea.l 16(sp),a0
    7b06:	|  |  |  |   adda.l d0,a0
    7b08:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    7b0a:	|  |  |  |   move.l 4(sp),d0
    7b0e:	|  |  |  |   addi.l #1073741823,d0
    7b14:	|  |  |  |   add.l d0,d0
    7b16:	|  |  |  |   add.l d0,d0
    7b18:	|  |  |  |   movea.l 16(sp),a1
    7b1c:	|  |  |  |   adda.l d0,a1
    7b1e:	|  |  |  |   move.l 4(sp),d0
    7b22:	|  |  |  |   add.l d0,d0
    7b24:	|  |  |  |   add.l d0,d0
    7b26:	|  |  |  |   movea.l 16(sp),a0
    7b2a:	|  |  |  |   adda.l d0,a0
    7b2c:	|  |  |  |   move.l (a1),d0
    7b2e:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    7b30:	|  |  |  |   move.l 4(sp),d0
    7b34:	|  |  |  |   addi.l #1073741823,d0
    7b3a:	|  |  |  |   add.l d0,d0
    7b3c:	|  |  |  |   add.l d0,d0
    7b3e:	|  |  |  |   movea.l 16(sp),a0
    7b42:	|  |  |  |   adda.l d0,a0
    7b44:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    7b46:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    7b4a:	|  |  |  \-> addq.l #1,4(sp)
    7b4e:	|  |  \----> move.l 4(sp),d0
    7b52:	|  |         cmp.l 20(sp),d0
    7b56:	|  \-------- blt.w 7ab8 <sortZPal+0x3c>
    7b5a:	|        /-- bra.s 7b5e <sortZPal+0xe2>
	if (size < 2) return;		
    7b5c:	\--------|-> nop
		}
	}
    7b5e:	         \-> addq.l #8,sp
    7b60:	             rts

00007b62 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    7b62:	          lea -36(sp),sp
    7b66:	          move.l a6,-(sp)

	struct spriteBank *spritebanktoforget = &forgetme->bank;
    7b68:	          move.l 44(sp),d0
    7b6c:	          addq.l #8,d0
    7b6e:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7b72:	          clr.l 36(sp)
    7b76:	   /----- bra.s 7bbc <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    7b78:	/--|----> movea.l 28(sp),a0
    7b7c:	|  |      movea.l 8(a0),a0
    7b80:	|  |      move.l 36(sp),d1
    7b84:	|  |      move.l d1,d0
    7b86:	|  |      lsl.l #3,d0
    7b88:	|  |      sub.l d1,d0
    7b8a:	|  |      add.l d0,d0
    7b8c:	|  |      add.l d0,d0
    7b8e:	|  |      adda.l d0,a0
    7b90:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    7b94:	|  |      movea.l 8(sp),a0
    7b98:	|  |      move.l 24(a0),d0
    7b9c:	|  |  /-- beq.s 7bb8 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    7b9e:	|  |  |   movea.l 8(sp),a0
    7ba2:	|  |  |   move.l 24(a0),4(sp)
    7ba8:	|  |  |   move.l 1b1d8 <SysBase>,d0
    7bae:	|  |  |   movea.l d0,a6
    7bb0:	|  |  |   movea.l 4(sp),a1
    7bb4:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    7bb8:	|  |  \-> addq.l #1,36(sp)
    7bbc:	|  \----> movea.l 28(sp),a0
    7bc0:	|         move.l (a0),d0
    7bc2:	|         cmp.l 36(sp),d0
    7bc6:	\-------- bgt.s 7b78 <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    7bc8:	          movea.l 28(sp),a0
    7bcc:	          move.l 8(a0),24(sp)
    7bd2:	          move.l 1b1d8 <SysBase>,d0
    7bd8:	          movea.l d0,a6
    7bda:	          movea.l 24(sp),a1
    7bde:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    7be2:	          move.l 28(sp),20(sp)
    7be8:	          move.l 1b1d8 <SysBase>,d0
    7bee:	          movea.l d0,a6
    7bf0:	          movea.l 20(sp),a1
    7bf4:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    7bf8:	          move.l 1b340 <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7c00:	      /-- bra.s 7c0c <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    7c02:	   /--|-> movea.l 32(sp),a0
    7c06:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    7c0c:	   |  \-> movea.l 32(sp),a0
    7c10:	   |      movea.l 22(a0),a0
    7c14:	   |      move.l (a0),d1
    7c16:	   |      movea.l 44(sp),a0
    7c1a:	   |      move.l (a0),d0
    7c1c:	   |      cmp.l d1,d0
    7c1e:	   |  /-- beq.s 7c26 <forgetSpriteBank+0xc4>
    7c20:	   |  |   tst.l 32(sp)
    7c24:	   \--|-- bne.s 7c02 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    7c26:	      \-> tst.l 32(sp)
    7c2a:	   /----- beq.s 7c54 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    7c2c:	   |      movea.l 44(sp),a0
    7c30:	   |      move.l 22(a0),d0
    7c34:	   |      movea.l 32(sp),a0
    7c38:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    7c3c:	   |      move.l 44(sp),12(sp)
    7c42:	   |      move.l 1b1d8 <SysBase>,d0
    7c48:	   |      movea.l d0,a6
    7c4a:	   |      movea.l 12(sp),a1
    7c4e:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    7c52:	   |  /-- bra.s 7c7a <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    7c54:	   \--|-> movea.l 1b340 <allLoadedBanks>,a0
    7c5a:	      |   move.l 22(a0),d0
    7c5e:	      |   move.l d0,1b340 <allLoadedBanks>
		FreeVec( forgetme);
    7c64:	      |   move.l 44(sp),16(sp)
    7c6a:	      |   move.l 1b1d8 <SysBase>,d0
    7c70:	      |   movea.l d0,a6
    7c72:	      |   movea.l 16(sp),a1
    7c76:	      |   jsr -690(a6)
}
    7c7a:	      \-> nop
    7c7c:	          movea.l (sp)+,a6
    7c7e:	          lea 36(sp),sp
    7c82:	          rts

00007c84 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    7c84:	                lea -80(sp),sp
    7c88:	                movem.l d2-d4/a2/a6,-(sp)
    7c8c:	                move.l 112(sp),d0
    7c90:	                move.w d0,d0
    7c92:	                move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    7c96:	                clr.l 90(sp)
    7c9a:	                clr.l 86(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    7c9e:	                clr.l 82(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    7ca2:	                move.l 104(sp),-(sp)
    7ca6:	                jsr 5c76 <openFileFromNum>
    7cac:	                addq.l #4,sp
    7cae:	                tst.l d0
    7cb0:	            /-- bne.s 7cc6 <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    7cb2:	            |   pea 17864 <PutChar+0x12ee>
    7cb8:	            |   jsr 15c26 <KPrintF>
    7cbe:	            |   addq.l #4,sp
		return FALSE;
    7cc0:	            |   clr.w d0
    7cc2:	/-----------|-- bra.w 7fce <loadSpriteBank+0x34a>
	}

	loadhere->isFont = isFont;
    7cc6:	|           \-> movea.l 108(sp),a0
    7cca:	|               move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    7cd0:	|               move.l 1b1c0 <bigDataFile>,d0
    7cd6:	|               move.l d0,-(sp)
    7cd8:	|               jsr 6bc <get2bytes>
    7cde:	|               addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    7ce0:	|               move.l 1b1c0 <bigDataFile>,78(sp)
    7ce8:	|               move.l 1b1e0 <DOSBase>,d0
    7cee:	|               movea.l d0,a6
    7cf0:	|               move.l 78(sp),d1
    7cf4:	|               jsr -306(a6)
    7cf8:	|               move.l d0,74(sp)
    7cfc:	|               move.l 74(sp),d0
    7d00:	|               movea.l 108(sp),a0
    7d04:	|               move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    7d08:	|               move.l 1b1c0 <bigDataFile>,d0
    7d0e:	|               move.l d0,-(sp)
    7d10:	|               jsr 6bc <get2bytes>
    7d16:	|               addq.l #4,sp
    7d18:	|               move.l d0,70(sp)

	if (total <= 0) {
    7d1c:	|           /-- bgt.s 7d32 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    7d1e:	|           |   pea 17892 <PutChar+0x131c>
    7d24:	|           |   jsr 15c26 <KPrintF>
    7d2a:	|           |   addq.l #4,sp
		return FALSE;
    7d2c:	|           |   clr.w d0
    7d2e:	+-----------|-- bra.w 7fce <loadSpriteBank+0x34a>
	}
	if (loadhere->type > 2) {
    7d32:	|           \-> movea.l 108(sp),a0
    7d36:	|               move.l 4(a0),d0
    7d3a:	|               moveq #2,d1
    7d3c:	|               cmp.l d0,d1
    7d3e:	|           /-- bge.s 7d54 <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    7d40:	|           |   pea 178d2 <PutChar+0x135c>
    7d46:	|           |   jsr 15c26 <KPrintF>
    7d4c:	|           |   addq.l #4,sp
		return FALSE;
    7d4e:	|           |   clr.w d0
    7d50:	+-----------|-- bra.w 7fce <loadSpriteBank+0x34a>
	}

	loadhere->total = total;
    7d54:	|           \-> movea.l 108(sp),a0
    7d58:	|               move.l 70(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    7d5c:	|               move.l 70(sp),d1
    7d60:	|               move.l d1,d0
    7d62:	|               lsl.l #3,d0
    7d64:	|               sub.l d1,d0
    7d66:	|               add.l d0,d0
    7d68:	|               add.l d0,d0
    7d6a:	|               move.l d0,66(sp)
    7d6e:	|               clr.l 62(sp)
    7d72:	|               move.l 1b1d8 <SysBase>,d0
    7d78:	|               movea.l d0,a6
    7d7a:	|               move.l 66(sp),d0
    7d7e:	|               move.l 62(sp),d1
    7d82:	|               jsr -684(a6)
    7d86:	|               move.l d0,58(sp)
    7d8a:	|               move.l 58(sp),d0
    7d8e:	|               movea.l 108(sp),a0
    7d92:	|               move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    7d96:	|               movea.l 108(sp),a0
    7d9a:	|               move.l 8(a0),d0
    7d9e:	|           /-- bne.s 7da6 <loadSpriteBank+0x122>
    7da0:	|           |   clr.w d0
    7da2:	+-----------|-- bra.w 7fce <loadSpriteBank+0x34a>
	
	startIndex = 1;
    7da6:	|           \-> moveq #1,d0
    7da8:	|               move.l d0,86(sp)

	for (i = 0; i < total; i++) {
    7dac:	|               clr.l 96(sp)
    7db0:	|     /-------- bra.w 7fba <loadSpriteBank+0x336>
		loadhere->sprites[i].width = get2bytes(bigDataFile);
    7db4:	|  /--|-------> movea.l 1b1c0 <bigDataFile>,a1
    7dba:	|  |  |         movea.l 108(sp),a0
    7dbe:	|  |  |         movea.l 8(a0),a0
    7dc2:	|  |  |         move.l 96(sp),d1
    7dc6:	|  |  |         move.l d1,d0
    7dc8:	|  |  |         lsl.l #3,d0
    7dca:	|  |  |         sub.l d1,d0
    7dcc:	|  |  |         add.l d0,d0
    7dce:	|  |  |         add.l d0,d0
    7dd0:	|  |  |         lea (0,a0,d0.l),a2
    7dd4:	|  |  |         move.l a1,-(sp)
    7dd6:	|  |  |         jsr 6bc <get2bytes>
    7ddc:	|  |  |         addq.l #4,sp
    7dde:	|  |  |         move.l d0,(a2)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    7de0:	|  |  |         movea.l 1b1c0 <bigDataFile>,a1
    7de6:	|  |  |         movea.l 108(sp),a0
    7dea:	|  |  |         movea.l 8(a0),a0
    7dee:	|  |  |         move.l 96(sp),d1
    7df2:	|  |  |         move.l d1,d0
    7df4:	|  |  |         lsl.l #3,d0
    7df6:	|  |  |         sub.l d1,d0
    7df8:	|  |  |         add.l d0,d0
    7dfa:	|  |  |         add.l d0,d0
    7dfc:	|  |  |         lea (0,a0,d0.l),a2
    7e00:	|  |  |         move.l a1,-(sp)
    7e02:	|  |  |         jsr 6bc <get2bytes>
    7e08:	|  |  |         addq.l #4,sp
    7e0a:	|  |  |         move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    7e0e:	|  |  |         movea.l 1b1c0 <bigDataFile>,a1
    7e14:	|  |  |         movea.l 108(sp),a0
    7e18:	|  |  |         movea.l 8(a0),a0
    7e1c:	|  |  |         move.l 96(sp),d1
    7e20:	|  |  |         move.l d1,d0
    7e22:	|  |  |         lsl.l #3,d0
    7e24:	|  |  |         sub.l d1,d0
    7e26:	|  |  |         add.l d0,d0
    7e28:	|  |  |         add.l d0,d0
    7e2a:	|  |  |         lea (0,a0,d0.l),a2
    7e2e:	|  |  |         move.l a1,-(sp)
    7e30:	|  |  |         jsr 6bc <get2bytes>
    7e36:	|  |  |         addq.l #4,sp
    7e38:	|  |  |         move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    7e3c:	|  |  |         movea.l 1b1c0 <bigDataFile>,a1
    7e42:	|  |  |         movea.l 108(sp),a0
    7e46:	|  |  |         movea.l 8(a0),a0
    7e4a:	|  |  |         move.l 96(sp),d1
    7e4e:	|  |  |         move.l d1,d0
    7e50:	|  |  |         lsl.l #3,d0
    7e52:	|  |  |         sub.l d1,d0
    7e54:	|  |  |         add.l d0,d0
    7e56:	|  |  |         add.l d0,d0
    7e58:	|  |  |         lea (0,a0,d0.l),a2
    7e5c:	|  |  |         move.l a1,-(sp)
    7e5e:	|  |  |         jsr 6bc <get2bytes>
    7e64:	|  |  |         addq.l #4,sp
    7e66:	|  |  |         move.l d0,12(a2)

		UWORD size;
		// ToDo Load Data
		if( loadhere->type == 1) 
    7e6a:	|  |  |         movea.l 108(sp),a0
    7e6e:	|  |  |         move.l 4(a0),d0
    7e72:	|  |  |         moveq #1,d1
    7e74:	|  |  |         cmp.l d0,d1
    7e76:	|  |  |     /-- bne.s 7ea2 <loadSpriteBank+0x21e>
		//Mousecursor Data (4 Colors HW-Sprite)
		{
			size = 4*loadhere->sprites[i].height+8;
    7e78:	|  |  |     |   movea.l 108(sp),a0
    7e7c:	|  |  |     |   movea.l 8(a0),a0
    7e80:	|  |  |     |   move.l 96(sp),d1
    7e84:	|  |  |     |   move.l d1,d0
    7e86:	|  |  |     |   lsl.l #3,d0
    7e88:	|  |  |     |   sub.l d1,d0
    7e8a:	|  |  |     |   add.l d0,d0
    7e8c:	|  |  |     |   add.l d0,d0
    7e8e:	|  |  |     |   adda.l d0,a0
    7e90:	|  |  |     |   move.l 4(a0),d0
    7e94:	|  |  |     |   addq.l #2,d0
    7e96:	|  |  |     |   move.l d0,d0
    7e98:	|  |  |     |   add.w d0,d0
    7e9a:	|  |  |     |   add.w d0,d0
    7e9c:	|  |  |     |   move.w d0,94(sp)
    7ea0:	|  |  |  /--|-- bra.s 7ef2 <loadSpriteBank+0x26e>
		} else {
			size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    7ea2:	|  |  |  |  \-> movea.l 108(sp),a0
    7ea6:	|  |  |  |      movea.l 8(a0),a0
    7eaa:	|  |  |  |      move.l 96(sp),d1
    7eae:	|  |  |  |      move.l d1,d0
    7eb0:	|  |  |  |      lsl.l #3,d0
    7eb2:	|  |  |  |      sub.l d1,d0
    7eb4:	|  |  |  |      add.l d0,d0
    7eb6:	|  |  |  |      add.l d0,d0
    7eb8:	|  |  |  |      adda.l d0,a0
    7eba:	|  |  |  |      move.l (a0),d0
    7ebc:	|  |  |  |  /-- bpl.s 7ec0 <loadSpriteBank+0x23c>
    7ebe:	|  |  |  |  |   addq.l #7,d0
    7ec0:	|  |  |  |  \-> asr.l #3,d0
    7ec2:	|  |  |  |      move.l d0,d2
    7ec4:	|  |  |  |      movea.l 108(sp),a0
    7ec8:	|  |  |  |      movea.l 8(a0),a0
    7ecc:	|  |  |  |      move.l 96(sp),d1
    7ed0:	|  |  |  |      move.l d1,d0
    7ed2:	|  |  |  |      lsl.l #3,d0
    7ed4:	|  |  |  |      sub.l d1,d0
    7ed6:	|  |  |  |      add.l d0,d0
    7ed8:	|  |  |  |      add.l d0,d0
    7eda:	|  |  |  |      adda.l d0,a0
    7edc:	|  |  |  |      move.l 4(a0),d0
    7ee0:	|  |  |  |      move.l d0,d0
    7ee2:	|  |  |  |      move.w d2,d1
    7ee4:	|  |  |  |      muls.w d0,d1
    7ee6:	|  |  |  |      move.w d1,d0
    7ee8:	|  |  |  |      add.w d0,d0
    7eea:	|  |  |  |      add.w d1,d0
    7eec:	|  |  |  |      add.w d0,d0
    7eee:	|  |  |  |      move.w d0,94(sp)
		}
		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    7ef2:	|  |  |  \----> moveq #0,d0
    7ef4:	|  |  |         move.w 94(sp),d0
    7ef8:	|  |  |         add.l d0,d0
    7efa:	|  |  |         move.l d0,54(sp)
    7efe:	|  |  |         moveq #2,d0
    7f00:	|  |  |         move.l d0,50(sp)
    7f04:	|  |  |         move.l 1b1d8 <SysBase>,d0
    7f0a:	|  |  |         movea.l d0,a6
    7f0c:	|  |  |         move.l 54(sp),d0
    7f10:	|  |  |         move.l 50(sp),d1
    7f14:	|  |  |         jsr -684(a6)
    7f18:	|  |  |         move.l d0,46(sp)
    7f1c:	|  |  |         movea.l 46(sp),a1
    7f20:	|  |  |         movea.l 108(sp),a0
    7f24:	|  |  |         movea.l 8(a0),a0
    7f28:	|  |  |         move.l 96(sp),d1
    7f2c:	|  |  |         move.l d1,d0
    7f2e:	|  |  |         lsl.l #3,d0
    7f30:	|  |  |         sub.l d1,d0
    7f32:	|  |  |         add.l d0,d0
    7f34:	|  |  |         add.l d0,d0
    7f36:	|  |  |         adda.l d0,a0
    7f38:	|  |  |         move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    7f3c:	|  |  |         move.l 1b1c0 <bigDataFile>,42(sp)
    7f44:	|  |  |         movea.l 108(sp),a0
    7f48:	|  |  |         movea.l 8(a0),a0
    7f4c:	|  |  |         move.l 96(sp),d1
    7f50:	|  |  |         move.l d1,d0
    7f52:	|  |  |         lsl.l #3,d0
    7f54:	|  |  |         sub.l d1,d0
    7f56:	|  |  |         add.l d0,d0
    7f58:	|  |  |         add.l d0,d0
    7f5a:	|  |  |         adda.l d0,a0
    7f5c:	|  |  |         move.l 24(a0),38(sp)
    7f62:	|  |  |         moveq #2,d1
    7f64:	|  |  |         move.l d1,34(sp)
    7f68:	|  |  |         move.w 94(sp),d0
    7f6c:	|  |  |         lsr.w #1,d0
    7f6e:	|  |  |         move.w d0,d0
    7f70:	|  |  |         andi.l #65535,d0
    7f76:	|  |  |         move.l d0,30(sp)
    7f7a:	|  |  |         move.l 1b1e0 <DOSBase>,d0
    7f80:	|  |  |         movea.l d0,a6
    7f82:	|  |  |         move.l 42(sp),d1
    7f86:	|  |  |         move.l 38(sp),d2
    7f8a:	|  |  |         move.l 34(sp),d3
    7f8e:	|  |  |         move.l 30(sp),d4
    7f92:	|  |  |         jsr -324(a6)
    7f96:	|  |  |         move.l d0,26(sp)
    7f9a:	|  |  |         move.l 26(sp),d0
    7f9e:	|  |  |         move.w d0,24(sp)
		if (!count) {
    7fa2:	|  |  |     /-- bne.s 7fb6 <loadSpriteBank+0x332>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    7fa4:	|  |  |     |   pea 17907 <PutChar+0x1391>
    7faa:	|  |  |     |   jsr 15c26 <KPrintF>
    7fb0:	|  |  |     |   addq.l #4,sp
			return FALSE;
    7fb2:	|  |  |     |   clr.w d0
    7fb4:	+--|--|-----|-- bra.s 7fce <loadSpriteBank+0x34a>
	for (i = 0; i < total; i++) {
    7fb6:	|  |  |     \-> addq.l #1,96(sp)
    7fba:	|  |  \-------> move.l 96(sp),d0
    7fbe:	|  |            cmp.l 70(sp),d0
    7fc2:	|  \----------- blt.w 7db4 <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    7fc6:	|               jsr 5b6e <finishAccess>

	return TRUE;
    7fcc:	|               moveq #1,d0
}
    7fce:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    7fd2:	                lea 80(sp),sp
    7fd6:	                rts

00007fd8 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    7fd8:	                   lea -16(sp),sp
    7fdc:	                   move.l 28(sp),d0
    7fe0:	                   move.w d0,d0
    7fe2:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    7fe6:	                   movea.l 24(sp),a0
    7fea:	                   move.l (a0),d0
    7fec:	                   move.l d0,-(sp)
    7fee:	                   jsr 1623e <__fixunssfsi>
    7ff4:	                   addq.l #4,sp
    7ff6:	                   move.l d0,d0
    7ff8:	                   movea.l 20(sp),a0
    7ffc:	                   move.l 8(a0),d1
    8000:	                   move.l d1,d1
    8002:	                   movea.w d0,a0
    8004:	                   suba.w d1,a0
    8006:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    800a:	                   movea.l 24(sp),a0
    800e:	                   move.l 4(a0),d0
    8012:	                   move.l d0,-(sp)
    8014:	                   jsr 1623e <__fixunssfsi>
    801a:	                   addq.l #4,sp
    801c:	                   move.l d0,d0
    801e:	                   movea.l 20(sp),a0
    8022:	                   move.l 12(a0),d1
    8026:	                   move.l d1,d1
    8028:	                   movea.w d0,a0
    802a:	                   suba.w d1,a0
    802c:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    8030:	                   move.w 4(sp),d0
    8034:	                   movea.w d0,a1
    8036:	                   move.w 6(sp),d0
    803a:	                   movea.w d0,a0
    803c:	                   pea 1 <_start+0x1>
    8040:	                   move.l a1,-(sp)
    8042:	                   move.l a0,-(sp)
    8044:	                   move.l 36(sp),-(sp)
    8048:	                   move.l 36(sp),-(sp)
    804c:	                   jsr 1df2 <CstScaleSprite>
    8052:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8056:	                   movea.l 24(sp),a0
    805a:	                   move.l 118(a0),d0
    805e:	                   moveq #8,d1
    8060:	                   and.l d1,d0
    8062:	   /-------------- beq.w 8124 <scaleSprite+0x14c>
		if (single->xhot < 0)
    8066:	   |               movea.l 20(sp),a0
    806a:	   |               move.l 8(a0),d0
    806e:	   |  /----------- bpl.s 80a6 <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8070:	   |  |            tst.w 2(sp)
    8074:	   |  |     /----- beq.s 808c <scaleSprite+0xb4>
    8076:	   |  |     |      movea.l 20(sp),a0
    807a:	   |  |     |      move.l (a0),d0
    807c:	   |  |     |      move.l d0,d1
    807e:	   |  |     |      movea.l 20(sp),a0
    8082:	   |  |     |      move.l 8(a0),d0
    8086:	   |  |     |      move.l d0,d0
    8088:	   |  |     |      sub.w d0,d1
    808a:	   |  |     |  /-- bra.s 809a <scaleSprite+0xc2>
    808c:	   |  |     \--|-> movea.l 20(sp),a0
    8090:	   |  |        |   move.l 8(a0),d0
    8094:	   |  |        |   move.l d0,d0
    8096:	   |  |        |   move.w d0,d1
    8098:	   |  |        |   addq.w #1,d1
    809a:	   |  |        \-> movea.w 6(sp),a0
    809e:	   |  |            suba.w d1,a0
    80a0:	   |  |            move.w a0,14(sp)
    80a4:	   |  |  /-------- bra.s 80da <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    80a6:	   |  \--|-------> tst.w 2(sp)
    80aa:	   |     |  /----- beq.s 80c6 <scaleSprite+0xee>
    80ac:	   |     |  |      movea.l 20(sp),a0
    80b0:	   |     |  |      move.l (a0),d0
    80b2:	   |     |  |      move.l d0,d1
    80b4:	   |     |  |      movea.l 20(sp),a0
    80b8:	   |     |  |      move.l 8(a0),d0
    80bc:	   |     |  |      move.l d0,d0
    80be:	   |     |  |      sub.w d0,d1
    80c0:	   |     |  |      move.w d1,d0
    80c2:	   |     |  |      subq.w #1,d0
    80c4:	   |     |  |  /-- bra.s 80d0 <scaleSprite+0xf8>
    80c6:	   |     |  \--|-> movea.l 20(sp),a0
    80ca:	   |     |     |   move.l 8(a0),d0
    80ce:	   |     |     |   move.l d0,d0
    80d0:	   |     |     \-> move.w 6(sp),d1
    80d4:	   |     |         sub.w d0,d1
    80d6:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    80da:	   |     \-------> movea.l 24(sp),a0
    80de:	   |               move.l 24(a0),d0
    80e2:	   |               move.l d0,d1
    80e4:	   |               movea.l 20(sp),a0
    80e8:	   |               move.l 12(a0),d0
    80ec:	   |               move.l d0,d0
    80ee:	   |               sub.w d0,d1
    80f0:	   |               movea.w 4(sp),a0
    80f4:	   |               adda.w d1,a0
    80f6:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    80fa:	   |               movea.l 20(sp),a0
    80fe:	   |               move.l (a0),d0
    8100:	   |               move.l d0,d0
    8102:	   |               move.w 14(sp),d1
    8106:	   |               add.w d0,d1
    8108:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    810c:	   |               movea.l 20(sp),a0
    8110:	   |               move.l 4(a0),d0
    8114:	   |               move.l d0,d0
    8116:	   |               movea.w 12(sp),a0
    811a:	   |               adda.w d0,a0
    811c:	   |               move.w a0,8(sp)
    8120:	/--|-------------- bra.w 81f6 <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    8124:	|  \-------------> move.l 1b2ea <cameraX>,d0
    812a:	|                  move.l d0,d0
    812c:	|                  sub.w d0,6(sp)
		y -= cameraY;
    8130:	|                  move.l 1b2ee <cameraY>,d0
    8136:	|                  move.l d0,d0
    8138:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    813c:	|                  movea.l 20(sp),a0
    8140:	|                  move.l 8(a0),d0
    8144:	|     /----------- bpl.s 817c <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8146:	|     |            tst.w 2(sp)
    814a:	|     |     /----- beq.s 8162 <scaleSprite+0x18a>
    814c:	|     |     |      movea.l 20(sp),a0
    8150:	|     |     |      move.l (a0),d0
    8152:	|     |     |      move.l d0,d1
    8154:	|     |     |      movea.l 20(sp),a0
    8158:	|     |     |      move.l 8(a0),d0
    815c:	|     |     |      move.l d0,d0
    815e:	|     |     |      sub.w d0,d1
    8160:	|     |     |  /-- bra.s 8170 <scaleSprite+0x198>
    8162:	|     |     \--|-> movea.l 20(sp),a0
    8166:	|     |        |   move.l 8(a0),d0
    816a:	|     |        |   move.l d0,d0
    816c:	|     |        |   move.w d0,d1
    816e:	|     |        |   addq.w #1,d1
    8170:	|     |        \-> move.w 6(sp),d0
    8174:	|     |            sub.w d1,d0
    8176:	|     |            move.w d0,14(sp)
    817a:	|     |  /-------- bra.s 81b0 <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    817c:	|     \--|-------> tst.w 2(sp)
    8180:	|        |  /----- beq.s 819c <scaleSprite+0x1c4>
    8182:	|        |  |      movea.l 20(sp),a0
    8186:	|        |  |      move.l (a0),d0
    8188:	|        |  |      move.l d0,d1
    818a:	|        |  |      movea.l 20(sp),a0
    818e:	|        |  |      move.l 8(a0),d0
    8192:	|        |  |      move.l d0,d0
    8194:	|        |  |      sub.w d0,d1
    8196:	|        |  |      move.w d1,d0
    8198:	|        |  |      subq.w #1,d0
    819a:	|        |  |  /-- bra.s 81a6 <scaleSprite+0x1ce>
    819c:	|        |  \--|-> movea.l 20(sp),a0
    81a0:	|        |     |   move.l 8(a0),d0
    81a4:	|        |     |   move.l d0,d0
    81a6:	|        |     \-> move.w 6(sp),d1
    81aa:	|        |         sub.w d0,d1
    81ac:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    81b0:	|        \-------> movea.l 24(sp),a0
    81b4:	|                  move.l 24(a0),d0
    81b8:	|                  move.l d0,d1
    81ba:	|                  movea.l 20(sp),a0
    81be:	|                  move.l 12(a0),d0
    81c2:	|                  move.l d0,d0
    81c4:	|                  sub.w d0,d1
    81c6:	|                  movea.w 4(sp),a0
    81ca:	|                  adda.w d1,a0
    81cc:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    81d0:	|                  movea.l 20(sp),a0
    81d4:	|                  move.l (a0),d0
    81d6:	|                  move.l d0,d0
    81d8:	|                  move.w 14(sp),d1
    81dc:	|                  add.w d0,d1
    81de:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    81e2:	|                  movea.l 20(sp),a0
    81e6:	|                  move.l 4(a0),d0
    81ea:	|                  move.l d0,d0
    81ec:	|                  movea.w 12(sp),a0
    81f0:	|                  adda.w d0,a0
    81f2:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    81f6:	\----------------> move.l 1b194 <input+0xa>,d1
    81fc:	                   moveq #0,d0
    81fe:	                   move.w 14(sp),d0
    8202:	                   cmp.l d1,d0
    8204:	            /----- bgt.s 823a <scaleSprite+0x262>
    8206:	            |      move.l 1b194 <input+0xa>,d1
    820c:	            |      moveq #0,d0
    820e:	            |      move.w 10(sp),d0
    8212:	            |      cmp.l d1,d0
    8214:	            +----- blt.s 823a <scaleSprite+0x262>
    8216:	            |      move.l 1b198 <input+0xe>,d1
    821c:	            |      moveq #0,d0
    821e:	            |      move.w 12(sp),d0
    8222:	            |      cmp.l d1,d0
    8224:	            +----- bgt.s 823a <scaleSprite+0x262>
    8226:	            |      move.l 1b198 <input+0xe>,d1
    822c:	            |      moveq #0,d0
    822e:	            |      move.w 8(sp),d0
    8232:	            |      cmp.l d1,d0
    8234:	            +----- blt.s 823a <scaleSprite+0x262>
		return TRUE;
    8236:	            |      moveq #1,d0
    8238:	            |  /-- bra.s 823c <scaleSprite+0x264>
	}
	return FALSE;
    823a:	            \--|-> clr.w d0
    823c:	               \-> lea 16(sp),sp
    8240:	                   rts

00008242 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    8242:	    move.l 4(sp),d0
    8246:	/-- bpl.s 824a <TF_abs+0x8>
    8248:	|   neg.l d0
}
    824a:	\-> rts

0000824c <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    824c:	             lea -28(sp),sp
    8250:	             move.l a6,-(sp)
    8252:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    8254:	             move.l #132,28(sp)
    825c:	             clr.l 24(sp)
    8260:	             move.l 1b1d8 <SysBase>,d0
    8266:	             movea.l d0,a6
    8268:	             move.l 28(sp),d0
    826c:	             move.l 24(sp),d1
    8270:	             jsr -684(a6)
    8274:	             move.l d0,20(sp)
    8278:	             move.l 20(sp),d0
    827c:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    8280:	         /-- bne.s 8288 <addPerson+0x3c>
    8282:	         |   clr.w d0
    8284:	/--------|-- bra.w 84b8 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    8288:	|        \-> move.l 48(sp),-(sp)
    828c:	|            jsr c61c <loadObjectType>
    8292:	|            addq.l #4,sp
    8294:	|            movea.l 16(sp),a0
    8298:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    829c:	|            movea.l 16(sp),a0
    82a0:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    82a8:	|            movea.l 16(sp),a0
    82ac:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    82b0:	|            movea.l 16(sp),a0
    82b4:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    82b8:	|            move.l 44(sp),-(sp)
    82bc:	|            jsr 15ede <__floatsisf>
    82c2:	|            addq.l #4,sp
    82c4:	|            move.l d0,d2
    82c6:	|            move.l 40(sp),-(sp)
    82ca:	|            jsr 15ede <__floatsisf>
    82d0:	|            addq.l #4,sp
    82d2:	|            move.l d2,-(sp)
    82d4:	|            move.l d0,-(sp)
    82d6:	|            move.l 24(sp),-(sp)
    82da:	|            jsr 9d9a <moveAndScale>
    82e0:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    82e4:	|            movea.l 16(sp),a0
    82e8:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    82ec:	|            movea.l 16(sp),a0
    82f0:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    82f6:	|            movea.l 16(sp),a0
    82fa:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    8300:	|            movea.l 16(sp),a0
    8304:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    8308:	|            movea.l 16(sp),a0
    830c:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    8310:	|            movea.l 16(sp),a0
    8314:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    831a:	|            movea.l 16(sp),a0
    831e:	|            clr.l 106(a0)
    newPerson->angle = 180;
    8322:	|            movea.l 16(sp),a0
    8326:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    832e:	|            movea.l 16(sp),a0
    8332:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    833a:	|            movea.l 16(sp),a0
    833e:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    8342:	|            movea.l 16(sp),a0
    8346:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    834a:	|            movea.l 16(sp),a0
    834e:	|            movea.l 114(a0),a0
    8352:	|            move.l 24(a0),d0
    8356:	|            movea.l 16(sp),a0
    835a:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    835e:	|            movea.l 16(sp),a0
    8362:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    8366:	|            movea.l 16(sp),a0
    836a:	|            movea.l 114(a0),a0
    836e:	|            move.l 32(a0),d0
    8372:	|            movea.l 16(sp),a0
    8376:	|            move.l d0,122(a0)
    newPerson->r = 0;
    837a:	|            movea.l 16(sp),a0
    837e:	|            clr.b 126(a0)
    newPerson->g = 0;
    8382:	|            movea.l 16(sp),a0
    8386:	|            clr.b 127(a0)
    newPerson->b = 0;
    838a:	|            movea.l 16(sp),a0
    838e:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    8392:	|            movea.l 16(sp),a0
    8396:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    839a:	|            movea.l 16(sp),a0
    839e:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    83a2:	|            movea.l 16(sp),a0
    83a6:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    83ac:	|            clr.l -(sp)
    83ae:	|            move.l 20(sp),-(sp)
    83b2:	|            jsr 705c <setFrames>
    83b8:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    83ba:	|            movea.l 52(sp),a0
    83be:	|            movea.l (a0),a0
    83c0:	|            movea.l (a0),a0
    83c2:	|            movea.l 4(a0),a0
    83c6:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    83ca:	|     /----- bpl.s 83d4 <addPerson+0x188>
    83cc:	|     |      move.l 12(sp),d0
    83d0:	|     |      neg.l d0
    83d2:	|     |  /-- bra.s 83d6 <addPerson+0x18a>
    83d4:	|     \--|-> moveq #1,d0
    83d6:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    83da:	|            movea.l 52(sp),a0
    83de:	|            movea.l (a0),a0
    83e0:	|            movea.l (a0),a0
    83e2:	|            movea.l (a0),a0
    83e4:	|            move.l 8(a0),d0
    83e8:	|            cmp.l 8(sp),d0
    83ec:	|     /----- bgt.s 841e <addPerson+0x1d2>
        if (fNumSigned < 0) {
    83ee:	|     |      tst.l 12(sp)
    83f2:	|     |  /-- bge.s 8400 <addPerson+0x1b4>
            newPerson->height = 5;
    83f4:	|     |  |   movea.l 16(sp),a0
    83f8:	|     |  |   moveq #5,d0
    83fa:	|     |  |   move.l d0,20(a0)
    83fe:	|  /--|--|-- bra.s 844a <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    8400:	|  |  |  \-> movea.l 52(sp),a0
    8404:	|  |  |      movea.l (a0),a0
    8406:	|  |  |      movea.l (a0),a0
    8408:	|  |  |      movea.l (a0),a0
    840a:	|  |  |      movea.l 16(a0),a0
    840e:	|  |  |      move.l 12(a0),d0
    8412:	|  |  |      addq.l #5,d0
    8414:	|  |  |      movea.l 16(sp),a0
    8418:	|  |  |      move.l d0,20(a0)
    841c:	|  +--|----- bra.s 844a <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    841e:	|  |  \----> movea.l 52(sp),a0
    8422:	|  |         movea.l (a0),a0
    8424:	|  |         movea.l (a0),a0
    8426:	|  |         movea.l (a0),a0
    8428:	|  |         movea.l 16(a0),a0
    842c:	|  |         move.l 8(sp),d1
    8430:	|  |         move.l d1,d0
    8432:	|  |         lsl.l #3,d0
    8434:	|  |         sub.l d1,d0
    8436:	|  |         add.l d0,d0
    8438:	|  |         add.l d0,d0
    843a:	|  |         adda.l d0,a0
    843c:	|  |         move.l 12(a0),d0
    8440:	|  |         addq.l #5,d0
    8442:	|  |         movea.l 16(sp),a0
    8446:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    844a:	|  \-------> move.l #111248,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    8452:	|        /-- bra.s 8462 <addPerson+0x216>
        changethat = &((*changethat)->next);
    8454:	|     /--|-> movea.l 32(sp),a0
    8458:	|     |  |   move.l (a0),d0
    845a:	|     |  |   moveq #36,d1
    845c:	|     |  |   add.l d0,d1
    845e:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    8462:	|     |  \-> movea.l 32(sp),a0
    8466:	|     |      move.l (a0),d0
    8468:	|     |  /-- beq.s 8490 <addPerson+0x244>
    846a:	|     |  |   movea.l 32(sp),a0
    846e:	|     |  |   movea.l (a0),a0
    8470:	|     |  |   move.l 4(a0),d2
    8474:	|     |  |   move.l 44(sp),-(sp)
    8478:	|     |  |   jsr 15ede <__floatsisf>
    847e:	|     |  |   addq.l #4,sp
    8480:	|     |  |   move.l d0,-(sp)
    8482:	|     |  |   move.l d2,-(sp)
    8484:	|     |  |   jsr 16104 <__ltsf2>
    848a:	|     |  |   addq.l #8,sp
    848c:	|     |  |   tst.l d0
    848e:	|     \--|-- blt.s 8454 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    8490:	|        \-> movea.l 32(sp),a0
    8494:	|            move.l (a0),d0
    8496:	|            movea.l 16(sp),a0
    849a:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    849e:	|            movea.l 32(sp),a0
    84a2:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    84a6:	|            movea.l 16(sp),a0
    84aa:	|            move.l 114(a0),d0
    84ae:	|            sne d0
    84b0:	|            neg.b d0
    84b2:	|            move.b d0,d0
    84b4:	|            andi.w #255,d0
}
    84b8:	\----------> move.l (sp)+,d2
    84ba:	             movea.l (sp)+,a6
    84bc:	             lea 28(sp),sp
    84c0:	             rts

000084c2 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    84c2:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    84c4:	       move.l 8(sp),-(sp)
    84c8:	       jsr 9652 <findPerson>
    84ce:	       addq.l #4,sp
    84d0:	       move.l d0,(sp)
    if (moveMe) {
    84d2:	/----- beq.s 8506 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    84d4:	|      movea.l (sp),a0
    84d6:	|      move.l 68(a0),d0
    84da:	|  /-- beq.s 84ec <animatePerson+0x2a>
    84dc:	|  |   movea.l (sp),a0
    84de:	|  |   move.l 68(a0),d0
    84e2:	|  |   move.l d0,-(sp)
    84e4:	|  |   jsr 3644 <abortFunction>
    84ea:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    84ec:	|  \-> movea.l (sp),a0
    84ee:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    84f2:	|      movea.l (sp),a0
    84f4:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    84f8:	|      movea.l (sp),a0
    84fa:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    84fe:	|      movea.l (sp),a0
    8500:	|      move.l 12(sp),72(a0)
    }
}
    8506:	\----> nop
    8508:	       addq.l #4,sp
    850a:	       rts

0000850c <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    850c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    850e:	       move.l 8(sp),-(sp)
    8512:	       jsr 9652 <findPerson>
    8518:	       addq.l #4,sp
    851a:	       move.l d0,(sp)
    if (moveMe) {
    851c:	/----- beq.s 855e <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    851e:	|      movea.l (sp),a0
    8520:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    8524:	|      movea.l (sp),a0
    8526:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    852c:	|      move.l (sp),-(sp)
    852e:	|      jsr 9f28 <rethinkAngle>
    8534:	|      addq.l #4,sp
        if (moveMe->walking) {
    8536:	|      movea.l (sp),a0
    8538:	|      move.w 64(a0),d0
    853c:	|  /-- beq.s 8550 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    853e:	|  |   pea 1 <_start+0x1>
    8542:	|  |   move.l 4(sp),-(sp)
    8546:	|  |   jsr 705c <setFrames>
    854c:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    854e:	+--|-- bra.s 855e <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    8550:	|  \-> clr.l -(sp)
    8552:	|      move.l 4(sp),-(sp)
    8556:	|      jsr 705c <setFrames>
    855c:	|      addq.l #8,sp
}
    855e:	\----> nop
    8560:	       addq.l #4,sp
    8562:	       rts

00008564 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    8564:	             lea -36(sp),sp
    8568:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    856a:	             movea.l 44(sp),a0
    856e:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    8574:	             moveq #12,d0
    8576:	             move.l d0,28(sp)
    857a:	             clr.l 24(sp)
    857e:	             move.l 1b1d8 <SysBase>,d0
    8584:	             movea.l d0,a6
    8586:	             move.l 28(sp),d0
    858a:	             move.l 24(sp),d1
    858e:	             jsr -684(a6)
    8592:	             move.l d0,20(sp)
    8596:	             move.l 20(sp),d0
    859a:	             move.l d0,16(sp)
	if (!(newAnim)) {
    859e:	         /-- bne.s 85b4 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    85a0:	         |   pea 1793a <PutChar+0x13c4>
    85a6:	         |   jsr 15c26 <KPrintF>
    85ac:	         |   addq.l #4,sp
		return NULL;
    85ae:	         |   moveq #0,d0
    85b0:	/--------|-- bra.w 8706 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    85b4:	|        \-> movea.l 44(sp),a0
    85b8:	|            move.l (a0),d0
    85ba:	|            movea.l 16(sp),a0
    85be:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    85c0:	|            movea.l 16(sp),a0
    85c4:	|            movea.l (a0),a0
    85c6:	|            move.l 4(a0),d0
    85ca:	|            addq.l #1,d0
    85cc:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    85d0:	|            movea.l 16(sp),a0
    85d4:	|            move.l 32(sp),8(a0)

	if (num) {
    85da:	|  /-------- beq.w 86fa <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    85de:	|  |         move.l 32(sp),d1
    85e2:	|  |         move.l d1,d0
    85e4:	|  |         add.l d0,d0
    85e6:	|  |         add.l d1,d0
    85e8:	|  |         add.l d0,d0
    85ea:	|  |         add.l d0,d0
    85ec:	|  |         move.l d0,12(sp)
    85f0:	|  |         clr.l 8(sp)
    85f4:	|  |         move.l 1b1d8 <SysBase>,d0
    85fa:	|  |         movea.l d0,a6
    85fc:	|  |         move.l 12(sp),d0
    8600:	|  |         move.l 8(sp),d1
    8604:	|  |         jsr -684(a6)
    8608:	|  |         move.l d0,4(sp)
    860c:	|  |         move.l 4(sp),d0
    8610:	|  |         movea.l 16(sp),a0
    8614:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    8618:	|  |         movea.l 16(sp),a0
    861c:	|  |         move.l 4(a0),d0
    8620:	|  |     /-- bne.s 8636 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    8622:	|  |     |   pea 1793a <PutChar+0x13c4>
    8628:	|  |     |   jsr 15c26 <KPrintF>
    862e:	|  |     |   addq.l #4,sp
			return NULL;
    8630:	|  |     |   moveq #0,d0
    8632:	+--|-----|-- bra.w 8706 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    8636:	|  |     \-> clr.l 36(sp)
    863a:	|  |     /-- bra.w 86ec <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    863e:	|  |  /--|-> movea.l 44(sp),a0
    8642:	|  |  |  |   movea.l 4(a0),a0
    8646:	|  |  |  |   move.l 36(sp),d1
    864a:	|  |  |  |   move.l d1,d0
    864c:	|  |  |  |   add.l d0,d0
    864e:	|  |  |  |   add.l d1,d0
    8650:	|  |  |  |   add.l d0,d0
    8652:	|  |  |  |   add.l d0,d0
    8654:	|  |  |  |   lea (0,a0,d0.l),a1
    8658:	|  |  |  |   movea.l 16(sp),a0
    865c:	|  |  |  |   movea.l 4(a0),a0
    8660:	|  |  |  |   move.l 36(sp),d1
    8664:	|  |  |  |   move.l d1,d0
    8666:	|  |  |  |   add.l d0,d0
    8668:	|  |  |  |   add.l d1,d0
    866a:	|  |  |  |   add.l d0,d0
    866c:	|  |  |  |   add.l d0,d0
    866e:	|  |  |  |   adda.l d0,a0
    8670:	|  |  |  |   move.l (a1),d0
    8672:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    8674:	|  |  |  |   movea.l 44(sp),a0
    8678:	|  |  |  |   movea.l 4(a0),a0
    867c:	|  |  |  |   move.l 36(sp),d1
    8680:	|  |  |  |   move.l d1,d0
    8682:	|  |  |  |   add.l d0,d0
    8684:	|  |  |  |   add.l d1,d0
    8686:	|  |  |  |   add.l d0,d0
    8688:	|  |  |  |   add.l d0,d0
    868a:	|  |  |  |   lea (0,a0,d0.l),a1
    868e:	|  |  |  |   movea.l 16(sp),a0
    8692:	|  |  |  |   movea.l 4(a0),a0
    8696:	|  |  |  |   move.l 36(sp),d1
    869a:	|  |  |  |   move.l d1,d0
    869c:	|  |  |  |   add.l d0,d0
    869e:	|  |  |  |   add.l d1,d0
    86a0:	|  |  |  |   add.l d0,d0
    86a2:	|  |  |  |   add.l d0,d0
    86a4:	|  |  |  |   adda.l d0,a0
    86a6:	|  |  |  |   move.l 4(a1),d0
    86aa:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    86ae:	|  |  |  |   movea.l 44(sp),a0
    86b2:	|  |  |  |   movea.l 4(a0),a0
    86b6:	|  |  |  |   move.l 36(sp),d1
    86ba:	|  |  |  |   move.l d1,d0
    86bc:	|  |  |  |   add.l d0,d0
    86be:	|  |  |  |   add.l d1,d0
    86c0:	|  |  |  |   add.l d0,d0
    86c2:	|  |  |  |   add.l d0,d0
    86c4:	|  |  |  |   lea (0,a0,d0.l),a1
    86c8:	|  |  |  |   movea.l 16(sp),a0
    86cc:	|  |  |  |   movea.l 4(a0),a0
    86d0:	|  |  |  |   move.l 36(sp),d1
    86d4:	|  |  |  |   move.l d1,d0
    86d6:	|  |  |  |   add.l d0,d0
    86d8:	|  |  |  |   add.l d1,d0
    86da:	|  |  |  |   add.l d0,d0
    86dc:	|  |  |  |   add.l d0,d0
    86de:	|  |  |  |   adda.l d0,a0
    86e0:	|  |  |  |   move.l 8(a1),d0
    86e4:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    86e8:	|  |  |  |   addq.l #1,36(sp)
    86ec:	|  |  |  \-> move.l 36(sp),d0
    86f0:	|  |  |      cmp.l 32(sp),d0
    86f4:	|  |  \----- blt.w 863e <copyAnim+0xda>
    86f8:	|  |     /-- bra.s 8702 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    86fa:	|  \-----|-> movea.l 16(sp),a0
    86fe:	|        |   clr.l 4(a0)
	}

	return newAnim;
    8702:	|        \-> move.l 16(sp),d0
}
    8706:	\----------> movea.l (sp)+,a6
    8708:	             lea 36(sp),sp
    870c:	             rts

0000870e <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    870e:	                lea -44(sp),sp
    8712:	                move.l a6,-(sp)
    8714:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    8716:	                moveq #12,d0
    8718:	                move.l d0,40(sp)
    871c:	                clr.l 36(sp)
    8720:	                move.l 1b1d8 <SysBase>,d0
    8726:	                movea.l d0,a6
    8728:	                move.l 40(sp),d0
    872c:	                move.l 36(sp),d1
    8730:	                jsr -684(a6)
    8734:	                move.l d0,32(sp)
    8738:	                move.l 32(sp),d0
    873c:	                move.l d0,28(sp)
	if( !newP) {
    8740:	            /-- bne.s 8756 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    8742:	            |   pea 1795b <PutChar+0x13e5>
    8748:	            |   jsr 15c26 <KPrintF>
    874e:	            |   addq.l #4,sp
		return NULL;
    8750:	            |   moveq #0,d0
    8752:	/-----------|-- bra.w 8926 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    8756:	|           \-> movea.l 28(sp),a0
    875a:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    8760:	|               move.l 56(sp),d1
    8764:	|               move.l d1,d0
    8766:	|               add.l d0,d0
    8768:	|               add.l d1,d0
    876a:	|               add.l d0,d0
    876c:	|               add.l d0,d0
    876e:	|               move.l d0,24(sp)
    8772:	|               clr.l 20(sp)
    8776:	|               move.l 1b1d8 <SysBase>,d0
    877c:	|               movea.l d0,a6
    877e:	|               move.l 24(sp),d0
    8782:	|               move.l 20(sp),d1
    8786:	|               jsr -684(a6)
    878a:	|               move.l d0,16(sp)
    878e:	|               move.l 16(sp),d0
    8792:	|               movea.l 28(sp),a0
    8796:	|               move.l d0,4(a0)
	if( !newP->frames) {
    879a:	|               movea.l 28(sp),a0
    879e:	|               move.l 4(a0),d0
    87a2:	|           /-- bne.s 87b8 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    87a4:	|           |   pea 1795b <PutChar+0x13e5>
    87aa:	|           |   jsr 15c26 <KPrintF>
    87b0:	|           |   addq.l #4,sp
		return NULL;
    87b2:	|           |   moveq #0,d0
    87b4:	+-----------|-- bra.w 8926 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    87b8:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    87be:	|               movea.l 60(sp),a0
    87c2:	|               move.l (a0),44(sp)
	while (a) {
    87c6:	|     /-------- bra.w 891a <createPersonaAnim+0x20c>
		a --;
    87ca:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    87ce:	|  |  |         movea.l 28(sp),a0
    87d2:	|  |  |         movea.l 4(a0),a0
    87d6:	|  |  |         move.l 48(sp),d1
    87da:	|  |  |         move.l d1,d0
    87dc:	|  |  |         add.l d0,d0
    87de:	|  |  |         add.l d1,d0
    87e0:	|  |  |         add.l d0,d0
    87e2:	|  |  |         add.l d0,d0
    87e4:	|  |  |         adda.l d0,a0
    87e6:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    87ea:	|  |  |         movea.l 44(sp),a0
    87ee:	|  |  |         move.l (a0),d0
    87f0:	|  |  |         moveq #5,d1
    87f2:	|  |  |         cmp.l d0,d1
    87f4:	|  |  |     /-- bne.s 8820 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    87f6:	|  |  |     |   movea.l 28(sp),a0
    87fa:	|  |  |     |   movea.l 4(a0),a0
    87fe:	|  |  |     |   move.l 48(sp),d1
    8802:	|  |  |     |   move.l d1,d0
    8804:	|  |  |     |   add.l d0,d0
    8806:	|  |  |     |   add.l d1,d0
    8808:	|  |  |     |   add.l d0,d0
    880a:	|  |  |     |   add.l d0,d0
    880c:	|  |  |     |   lea (0,a0,d0.l),a1
    8810:	|  |  |     |   movea.l 44(sp),a0
    8814:	|  |  |     |   move.l 4(a0),d0
    8818:	|  |  |     |   move.l d0,8(a1)
    881c:	|  |  |  /--|-- bra.w 88c8 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    8820:	|  |  |  |  \-> movea.l 44(sp),a0
    8824:	|  |  |  |      move.l (a0),d0
    8826:	|  |  |  |      moveq #2,d1
    8828:	|  |  |  |      cmp.l d0,d1
    882a:	|  |  |  |  /-- bne.s 8856 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    882c:	|  |  |  |  |   movea.l 44(sp),a0
    8830:	|  |  |  |  |   move.l 4(a0),d2
    8834:	|  |  |  |  |   movea.l 28(sp),a0
    8838:	|  |  |  |  |   movea.l 4(a0),a0
    883c:	|  |  |  |  |   move.l 48(sp),d1
    8840:	|  |  |  |  |   move.l d1,d0
    8842:	|  |  |  |  |   add.l d0,d0
    8844:	|  |  |  |  |   add.l d1,d0
    8846:	|  |  |  |  |   add.l d0,d0
    8848:	|  |  |  |  |   add.l d0,d0
    884a:	|  |  |  |  |   adda.l d0,a0
    884c:	|  |  |  |  |   move.l d2,d0
    884e:	|  |  |  |  |   neg.l d0
    8850:	|  |  |  |  |   move.l d0,8(a0)
    8854:	|  |  |  +--|-- bra.s 88c8 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    8856:	|  |  |  |  \-> movea.l 44(sp),a0
    885a:	|  |  |  |      move.l (a0),d0
    885c:	|  |  |  |      moveq #6,d1
    885e:	|  |  |  |      cmp.l d0,d1
    8860:	|  |  |  |  /-- bne.s 88a8 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    8862:	|  |  |  |  |   movea.l 44(sp),a0
    8866:	|  |  |  |  |   movea.l 4(a0),a0
    886a:	|  |  |  |  |   move.l (a0),d0
    886c:	|  |  |  |  |   move.l d0,-(sp)
    886e:	|  |  |  |  |   pea 1 <_start+0x1>
    8872:	|  |  |  |  |   lea 20(sp),a0
    8876:	|  |  |  |  |   move.l a0,-(sp)
    8878:	|  |  |  |  |   jsr 13734 <getValueType>
    887e:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    8882:	|  |  |  |  |   movea.l 44(sp),a0
    8886:	|  |  |  |  |   movea.l 4(a0),a0
    888a:	|  |  |  |  |   movea.l (a0),a0
    888c:	|  |  |  |  |   move.l 8(a0),d0
    8890:	|  |  |  |  |   move.l d0,-(sp)
    8892:	|  |  |  |  |   pea 1 <_start+0x1>
    8896:	|  |  |  |  |   lea 16(sp),a0
    889a:	|  |  |  |  |   move.l a0,-(sp)
    889c:	|  |  |  |  |   jsr 13734 <getValueType>
    88a2:	|  |  |  |  |   lea 12(sp),sp
    88a6:	|  |  |  +--|-- bra.s 88c8 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    88a8:	|  |  |  |  \-> move.l 44(sp),d0
    88ac:	|  |  |  |      move.l d0,-(sp)
    88ae:	|  |  |  |      pea 1 <_start+0x1>
    88b2:	|  |  |  |      lea 20(sp),a0
    88b6:	|  |  |  |      move.l a0,-(sp)
    88b8:	|  |  |  |      jsr 13734 <getValueType>
    88be:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    88c2:	|  |  |  |      moveq #1,d0
    88c4:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    88c8:	|  |  |  \----> move.l 60(sp),-(sp)
    88cc:	|  |  |         jsr 140b8 <trimStack>
    88d2:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    88d4:	|  |  |         movea.l 28(sp),a0
    88d8:	|  |  |         movea.l 4(a0),a0
    88dc:	|  |  |         move.l 48(sp),d1
    88e0:	|  |  |         move.l d1,d0
    88e2:	|  |  |         add.l d0,d0
    88e4:	|  |  |         add.l d1,d0
    88e6:	|  |  |         add.l d0,d0
    88e8:	|  |  |         add.l d0,d0
    88ea:	|  |  |         adda.l d0,a0
    88ec:	|  |  |         move.l 12(sp),d0
    88f0:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    88f2:	|  |  |         movea.l 28(sp),a0
    88f6:	|  |  |         movea.l 4(a0),a0
    88fa:	|  |  |         move.l 48(sp),d1
    88fe:	|  |  |         move.l d1,d0
    8900:	|  |  |         add.l d0,d0
    8902:	|  |  |         add.l d1,d0
    8904:	|  |  |         add.l d0,d0
    8906:	|  |  |         add.l d0,d0
    8908:	|  |  |         adda.l d0,a0
    890a:	|  |  |         move.l 8(sp),d0
    890e:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    8912:	|  |  |         movea.l 60(sp),a0
    8916:	|  |  |         move.l (a0),44(sp)
	while (a) {
    891a:	|  |  \-------> tst.l 48(sp)
    891e:	|  \----------- bne.w 87ca <createPersonaAnim+0xbc>
	}

	return newP;
    8922:	|               move.l 28(sp),d0
}
    8926:	\-------------> move.l (sp)+,d2
    8928:	                movea.l (sp)+,a6
    892a:	                lea 44(sp),sp
    892e:	                rts

00008930 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    8930:	       lea -12(sp),sp
    8934:	       move.l a6,-(sp)

	if(orig->theSprites)
    8936:	       movea.l 20(sp),a0
    893a:	       move.l (a0),d0
    893c:	   /-- beq.s 8966 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    893e:	   |   movea.l 20(sp),a0
    8942:	   |   movea.l (a0),a0
    8944:	   |   move.l 4(a0),d0
    8948:	   |   subq.l #1,d0
    894a:	   |   move.l d0,4(a0)
    894e:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    8954:	   +-- bne.s 8966 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    8956:	   |   movea.l 20(sp),a0
    895a:	   |   move.l (a0),d0
    895c:	   |   move.l d0,-(sp)
    895e:	   |   jsr 7b62 <forgetSpriteBank>
    8964:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    8966:	   \-> tst.l 20(sp)
    896a:	/----- beq.s 89aa <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    896c:	|      movea.l 20(sp),a0
    8970:	|      move.l 8(a0),d0
    8974:	|  /-- beq.s 8990 <deleteAnim+0x60>
			FreeVec( orig->frames);
    8976:	|  |   movea.l 20(sp),a0
    897a:	|  |   move.l 4(a0),8(sp)
    8980:	|  |   move.l 1b1d8 <SysBase>,d0
    8986:	|  |   movea.l d0,a6
    8988:	|  |   movea.l 8(sp),a1
    898c:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    8990:	|  \-> move.l 20(sp),4(sp)
    8996:	|      move.l 1b1d8 <SysBase>,d0
    899c:	|      movea.l d0,a6
    899e:	|      movea.l 4(sp),a1
    89a2:	|      jsr -690(a6)
		orig = NULL;
    89a6:	|      clr.l 20(sp)
	}	
	
}
    89aa:	\----> nop
    89ac:	       movea.l (sp)+,a6
    89ae:	       lea 12(sp),sp
    89b2:	       rts

000089b4 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    89b4:	          lea -124(sp),sp
    89b8:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    89bc:	          movea.l 152(sp),a0
    89c0:	          move.l 56(a0),d1
    89c4:	          movea.l 152(sp),a0
    89c8:	          move.l 60(a0),d0
    89cc:	          cmp.l d1,d0
    89ce:	      /-- bne.s 89fe <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    89d0:	      |   movea.l 152(sp),a0
    89d4:	      |   moveq #-1,d0
    89d6:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    89da:	      |   movea.l 152(sp),a0
    89de:	      |   move.l 40(a0),d0
    89e2:	      |   movea.l 152(sp),a0
    89e6:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    89ea:	      |   movea.l 152(sp),a0
    89ee:	      |   move.l 44(a0),d0
    89f2:	      |   movea.l 152(sp),a0
    89f6:	      |   move.l d0,52(a0)
    89fa:	   /--|-- bra.w 8f64 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    89fe:	   |  \-> movea.l 1b344 <currentFloor>,a0
    8a04:	   |      move.l 16(a0),d1
    8a08:	   |      movea.l 152(sp),a0
    8a0c:	   |      move.l 56(a0),d0
    8a10:	   |      add.l d0,d0
    8a12:	   |      add.l d0,d0
    8a14:	   |      movea.l d1,a0
    8a16:	   |      adda.l d0,a0
    8a18:	   |      move.l (a0),d1
    8a1a:	   |      movea.l 152(sp),a0
    8a1e:	   |      move.l 60(a0),d0
    8a22:	   |      add.l d0,d0
    8a24:	   |      add.l d0,d0
    8a26:	   |      movea.l d1,a0
    8a28:	   |      adda.l d0,a0
    8a2a:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    8a2e:	   |      moveq #-1,d0
    8a30:	   |      cmp.l 144(sp),d0
    8a34:	   |  /-- bne.s 8a3c <doBorderStuff+0x88>
    8a36:	   |  |   clr.w d0
    8a38:	/--|--|-- bra.w 9064 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    8a3c:	|  |  \-> movea.l 1b344 <currentFloor>,a0
    8a42:	|  |      move.l 12(a0),d1
    8a46:	|  |      move.l 144(sp),d0
    8a4a:	|  |      lsl.l #3,d0
    8a4c:	|  |      add.l d0,d1
    8a4e:	|  |      movea.l 1b344 <currentFloor>,a0
    8a54:	|  |      movea.l 12(a0),a1
    8a58:	|  |      movea.l 152(sp),a0
    8a5c:	|  |      move.l 56(a0),d0
    8a60:	|  |      lsl.l #3,d0
    8a62:	|  |      add.l a1,d0
    8a64:	|  |      lea 40(sp),a0
    8a68:	|  |      move.l a0,-(sp)
    8a6a:	|  |      lea 48(sp),a0
    8a6e:	|  |      move.l a0,-(sp)
    8a70:	|  |      move.l d1,-(sp)
    8a72:	|  |      move.l d0,-(sp)
    8a74:	|  |      jsr 14ea8 <getMatchingCorners>
    8a7a:	|  |      lea 16(sp),sp
    8a7e:	|  |      tst.w d0
    8a80:	|  |  /-- bne.s 8a96 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    8a82:	|  |  |   pea 17985 <PutChar+0x140f>
    8a88:	|  |  |   jsr 15c26 <KPrintF>
    8a8e:	|  |  |   addq.l #4,sp
            return FALSE;
    8a90:	|  |  |   clr.w d0
    8a92:	+--|--|-- bra.w 9064 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    8a96:	|  |  \-> movea.l 152(sp),a0
    8a9a:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    8aa0:	|  |      movea.l 152(sp),a0
    8aa4:	|  |      move.l (a0),d0
    8aa6:	|  |      move.l d0,-(sp)
    8aa8:	|  |      jsr 15e76 <__fixsfsi>
    8aae:	|  |      addq.l #4,sp
    8ab0:	|  |      move.l d0,140(sp)
    8ab4:	|  |      movea.l 152(sp),a0
    8ab8:	|  |      move.l 4(a0),d0
    8abc:	|  |      move.l d0,-(sp)
    8abe:	|  |      jsr 15e76 <__fixsfsi>
    8ac4:	|  |      addq.l #4,sp
    8ac6:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    8aca:	|  |      movea.l 152(sp),a0
    8ace:	|  |      move.l 40(a0),132(sp)
    8ad4:	|  |      movea.l 152(sp),a0
    8ad8:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    8ade:	|  |      movea.l 1b344 <currentFloor>,a0
    8ae4:	|  |      move.l 4(a0),d1
    8ae8:	|  |      move.l 44(sp),d0
    8aec:	|  |      lsl.l #3,d0
    8aee:	|  |      movea.l d1,a0
    8af0:	|  |      adda.l d0,a0
    8af2:	|  |      move.l (a0),124(sp)
    8af6:	|  |      movea.l 1b344 <currentFloor>,a0
    8afc:	|  |      move.l 4(a0),d1
    8b00:	|  |      move.l 44(sp),d0
    8b04:	|  |      lsl.l #3,d0
    8b06:	|  |      movea.l d1,a0
    8b08:	|  |      adda.l d0,a0
    8b0a:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    8b10:	|  |      movea.l 1b344 <currentFloor>,a0
    8b16:	|  |      move.l 4(a0),d1
    8b1a:	|  |      move.l 40(sp),d0
    8b1e:	|  |      lsl.l #3,d0
    8b20:	|  |      movea.l d1,a0
    8b22:	|  |      adda.l d0,a0
    8b24:	|  |      move.l (a0),116(sp)
    8b28:	|  |      movea.l 1b344 <currentFloor>,a0
    8b2e:	|  |      move.l 4(a0),d1
    8b32:	|  |      move.l 40(sp),d0
    8b36:	|  |      lsl.l #3,d0
    8b38:	|  |      movea.l d1,a0
    8b3a:	|  |      adda.l d0,a0
    8b3c:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    8b42:	|  |      move.l 140(sp),d0
    8b46:	|  |      sub.l 132(sp),d0
    8b4a:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    8b4e:	|  |      move.l 136(sp),d0
    8b52:	|  |      sub.l 128(sp),d0
    8b56:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    8b5a:	|  |      move.l 116(sp),d0
    8b5e:	|  |      sub.l 124(sp),d0
    8b62:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    8b66:	|  |      move.l 112(sp),d0
    8b6a:	|  |      sub.l 120(sp),d0
    8b6e:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    8b72:	|  |      move.l 124(sp),d0
    8b76:	|  |      sub.l 140(sp),d0
    8b7a:	|  |      move.l 104(sp),-(sp)
    8b7e:	|  |      move.l d0,-(sp)
    8b80:	|  |      jsr 16460 <__mulsi3>
    8b86:	|  |      addq.l #8,sp
    8b88:	|  |      move.l d0,d2
    8b8a:	|  |      move.l 120(sp),d0
    8b8e:	|  |      sub.l 136(sp),d0
    8b92:	|  |      move.l 108(sp),-(sp)
    8b96:	|  |      move.l d0,-(sp)
    8b98:	|  |      jsr 16460 <__mulsi3>
    8b9e:	|  |      addq.l #8,sp
    8ba0:	|  |      move.l d2,d1
    8ba2:	|  |      sub.l d0,d1
    8ba4:	|  |      move.l d1,-(sp)
    8ba6:	|  |      jsr 15e9e <__floatsidf>
    8bac:	|  |      addq.l #4,sp
    8bae:	|  |      move.l d0,32(sp)
    8bb2:	|  |      move.l d1,36(sp)
    8bb6:	|  |      move.l 32(sp),88(sp)
    8bbc:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    8bc2:	|  |      move.l 96(sp),-(sp)
    8bc6:	|  |      move.l 112(sp),-(sp)
    8bca:	|  |      jsr 16460 <__mulsi3>
    8bd0:	|  |      addq.l #8,sp
    8bd2:	|  |      move.l d0,d2
    8bd4:	|  |      move.l 100(sp),-(sp)
    8bd8:	|  |      move.l 108(sp),-(sp)
    8bdc:	|  |      jsr 16460 <__mulsi3>
    8be2:	|  |      addq.l #8,sp
    8be4:	|  |      move.l d2,d1
    8be6:	|  |      sub.l d0,d1
    8be8:	|  |      move.l d1,-(sp)
    8bea:	|  |      jsr 15e9e <__floatsidf>
    8bf0:	|  |      addq.l #4,sp
    8bf2:	|  |      move.l d1,-(sp)
    8bf4:	|  |      move.l d0,-(sp)
    8bf6:	|  |      move.l 100(sp),-(sp)
    8bfa:	|  |      move.l 100(sp),-(sp)
    8bfe:	|  |      jsr 15d28 <__divdf3>
    8c04:	|  |      lea 16(sp),sp
    8c08:	|  |      move.l d0,24(sp)
    8c0c:	|  |      move.l d1,28(sp)
    8c10:	|  |      move.l 24(sp),88(sp)
    8c16:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    8c1c:	|  |      clr.l -(sp)
    8c1e:	|  |      clr.l -(sp)
    8c20:	|  |      move.l 100(sp),-(sp)
    8c24:	|  |      move.l 100(sp),-(sp)
    8c28:	|  |      jsr 15ffc <__gtdf2>
    8c2e:	|  |      lea 16(sp),sp
    8c32:	|  |      tst.l d0
    8c34:	|  |  /-- ble.w 8d0c <doBorderStuff+0x358>
    8c38:	|  |  |   clr.l -(sp)
    8c3a:	|  |  |   move.l #1072693248,-(sp)
    8c40:	|  |  |   move.l 100(sp),-(sp)
    8c44:	|  |  |   move.l 100(sp),-(sp)
    8c48:	|  |  |   jsr 160b6 <__ltdf2>
    8c4e:	|  |  |   lea 16(sp),sp
    8c52:	|  |  |   tst.l d0
    8c54:	|  |  +-- bge.w 8d0c <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    8c58:	|  |  |   move.l 124(sp),-(sp)
    8c5c:	|  |  |   jsr 15e9e <__floatsidf>
    8c62:	|  |  |   addq.l #4,sp
    8c64:	|  |  |   move.l d0,d2
    8c66:	|  |  |   move.l d1,d3
    8c68:	|  |  |   move.l 100(sp),-(sp)
    8c6c:	|  |  |   jsr 15e9e <__floatsidf>
    8c72:	|  |  |   addq.l #4,sp
    8c74:	|  |  |   move.l 92(sp),-(sp)
    8c78:	|  |  |   move.l 92(sp),-(sp)
    8c7c:	|  |  |   move.l d1,-(sp)
    8c7e:	|  |  |   move.l d0,-(sp)
    8c80:	|  |  |   jsr 15f2e <__muldf3>
    8c86:	|  |  |   lea 16(sp),sp
    8c8a:	|  |  |   move.l d1,-(sp)
    8c8c:	|  |  |   move.l d0,-(sp)
    8c8e:	|  |  |   move.l d3,-(sp)
    8c90:	|  |  |   move.l d2,-(sp)
    8c92:	|  |  |   jsr 15cc6 <__adddf3>
    8c98:	|  |  |   lea 16(sp),sp
    8c9c:	|  |  |   move.l d1,-(sp)
    8c9e:	|  |  |   move.l d0,-(sp)
    8ca0:	|  |  |   jsr 15e36 <__fixdfsi>
    8ca6:	|  |  |   addq.l #8,sp
    8ca8:	|  |  |   movea.l 152(sp),a0
    8cac:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    8cb0:	|  |  |   move.l 120(sp),-(sp)
    8cb4:	|  |  |   jsr 15e9e <__floatsidf>
    8cba:	|  |  |   addq.l #4,sp
    8cbc:	|  |  |   move.l d0,d2
    8cbe:	|  |  |   move.l d1,d3
    8cc0:	|  |  |   move.l 96(sp),-(sp)
    8cc4:	|  |  |   jsr 15e9e <__floatsidf>
    8cca:	|  |  |   addq.l #4,sp
    8ccc:	|  |  |   move.l 92(sp),-(sp)
    8cd0:	|  |  |   move.l 92(sp),-(sp)
    8cd4:	|  |  |   move.l d1,-(sp)
    8cd6:	|  |  |   move.l d0,-(sp)
    8cd8:	|  |  |   jsr 15f2e <__muldf3>
    8cde:	|  |  |   lea 16(sp),sp
    8ce2:	|  |  |   move.l d1,-(sp)
    8ce4:	|  |  |   move.l d0,-(sp)
    8ce6:	|  |  |   move.l d3,-(sp)
    8ce8:	|  |  |   move.l d2,-(sp)
    8cea:	|  |  |   jsr 15cc6 <__adddf3>
    8cf0:	|  |  |   lea 16(sp),sp
    8cf4:	|  |  |   move.l d1,-(sp)
    8cf6:	|  |  |   move.l d0,-(sp)
    8cf8:	|  |  |   jsr 15e36 <__fixdfsi>
    8cfe:	|  |  |   addq.l #8,sp
    8d00:	|  |  |   movea.l 152(sp),a0
    8d04:	|  |  |   move.l d0,52(a0)
    8d08:	|  +--|-- bra.w 8f64 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    8d0c:	|  |  \-> move.l 140(sp),d0
    8d10:	|  |      sub.l 124(sp),d0
    8d14:	|  |      move.l d0,84(sp)
    8d18:	|  |      move.l 140(sp),d0
    8d1c:	|  |      sub.l 116(sp),d0
    8d20:	|  |      move.l d0,80(sp)
    8d24:	|  |      move.l 132(sp),d0
    8d28:	|  |      sub.l 124(sp),d0
    8d2c:	|  |      move.l d0,76(sp)
    8d30:	|  |      move.l 132(sp),d0
    8d34:	|  |      sub.l 116(sp),d0
    8d38:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    8d3c:	|  |      move.l 136(sp),d0
    8d40:	|  |      sub.l 120(sp),d0
    8d44:	|  |      move.l d0,68(sp)
    8d48:	|  |      move.l 136(sp),d0
    8d4c:	|  |      sub.l 112(sp),d0
    8d50:	|  |      move.l d0,64(sp)
    8d54:	|  |      move.l 128(sp),d0
    8d58:	|  |      sub.l 120(sp),d0
    8d5c:	|  |      move.l d0,60(sp)
    8d60:	|  |      move.l 128(sp),d0
    8d64:	|  |      sub.l 112(sp),d0
    8d68:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    8d6c:	|  |      move.l 84(sp),-(sp)
    8d70:	|  |      move.l 88(sp),-(sp)
    8d74:	|  |      jsr 16460 <__mulsi3>
    8d7a:	|  |      addq.l #8,sp
    8d7c:	|  |      move.l d0,84(sp)
    8d80:	|  |      move.l 80(sp),-(sp)
    8d84:	|  |      move.l 84(sp),-(sp)
    8d88:	|  |      jsr 16460 <__mulsi3>
    8d8e:	|  |      addq.l #8,sp
    8d90:	|  |      move.l d0,80(sp)
    8d94:	|  |      move.l 76(sp),-(sp)
    8d98:	|  |      move.l 80(sp),-(sp)
    8d9c:	|  |      jsr 16460 <__mulsi3>
    8da2:	|  |      addq.l #8,sp
    8da4:	|  |      move.l d0,76(sp)
    8da8:	|  |      move.l 72(sp),-(sp)
    8dac:	|  |      move.l 76(sp),-(sp)
    8db0:	|  |      jsr 16460 <__mulsi3>
    8db6:	|  |      addq.l #8,sp
    8db8:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    8dbc:	|  |      move.l 68(sp),-(sp)
    8dc0:	|  |      move.l 72(sp),-(sp)
    8dc4:	|  |      jsr 16460 <__mulsi3>
    8dca:	|  |      addq.l #8,sp
    8dcc:	|  |      move.l d0,68(sp)
    8dd0:	|  |      move.l 64(sp),-(sp)
    8dd4:	|  |      move.l 68(sp),-(sp)
    8dd8:	|  |      jsr 16460 <__mulsi3>
    8dde:	|  |      addq.l #8,sp
    8de0:	|  |      move.l d0,64(sp)
    8de4:	|  |      move.l 60(sp),-(sp)
    8de8:	|  |      move.l 64(sp),-(sp)
    8dec:	|  |      jsr 16460 <__mulsi3>
    8df2:	|  |      addq.l #8,sp
    8df4:	|  |      move.l d0,60(sp)
    8df8:	|  |      move.l 56(sp),-(sp)
    8dfc:	|  |      move.l 60(sp),-(sp)
    8e00:	|  |      jsr 16460 <__mulsi3>
    8e06:	|  |      addq.l #8,sp
    8e08:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    8e0c:	|  |      move.l 84(sp),-(sp)
    8e10:	|  |      jsr 15e9e <__floatsidf>
    8e16:	|  |      addq.l #4,sp
    8e18:	|  |      move.l d0,d2
    8e1a:	|  |      move.l d1,d3
    8e1c:	|  |      move.l 68(sp),-(sp)
    8e20:	|  |      jsr 15e9e <__floatsidf>
    8e26:	|  |      addq.l #4,sp
    8e28:	|  |      move.l d1,-(sp)
    8e2a:	|  |      move.l d0,-(sp)
    8e2c:	|  |      move.l d3,-(sp)
    8e2e:	|  |      move.l d2,-(sp)
    8e30:	|  |      jsr 15cc6 <__adddf3>
    8e36:	|  |      lea 16(sp),sp
    8e3a:	|  |      move.l d1,-(sp)
    8e3c:	|  |      move.l d0,-(sp)
    8e3e:	|  |      jsr 16416 <sqrt>
    8e44:	|  |      addq.l #8,sp
    8e46:	|  |      move.l d0,d2
    8e48:	|  |      move.l d1,d3
    8e4a:	|  |      move.l 76(sp),-(sp)
    8e4e:	|  |      jsr 15e9e <__floatsidf>
    8e54:	|  |      addq.l #4,sp
    8e56:	|  |      move.l d0,d4
    8e58:	|  |      move.l d1,d5
    8e5a:	|  |      move.l 60(sp),-(sp)
    8e5e:	|  |      jsr 15e9e <__floatsidf>
    8e64:	|  |      addq.l #4,sp
    8e66:	|  |      move.l d1,-(sp)
    8e68:	|  |      move.l d0,-(sp)
    8e6a:	|  |      move.l d5,-(sp)
    8e6c:	|  |      move.l d4,-(sp)
    8e6e:	|  |      jsr 15cc6 <__adddf3>
    8e74:	|  |      lea 16(sp),sp
    8e78:	|  |      move.l d1,-(sp)
    8e7a:	|  |      move.l d0,-(sp)
    8e7c:	|  |      jsr 16416 <sqrt>
    8e82:	|  |      addq.l #8,sp
    8e84:	|  |      move.l d1,-(sp)
    8e86:	|  |      move.l d0,-(sp)
    8e88:	|  |      move.l d3,-(sp)
    8e8a:	|  |      move.l d2,-(sp)
    8e8c:	|  |      jsr 15cc6 <__adddf3>
    8e92:	|  |      lea 16(sp),sp
    8e96:	|  |      move.l d0,d2
    8e98:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    8e9a:	|  |      move.l 80(sp),-(sp)
    8e9e:	|  |      jsr 15e9e <__floatsidf>
    8ea4:	|  |      addq.l #4,sp
    8ea6:	|  |      move.l d0,d4
    8ea8:	|  |      move.l d1,d5
    8eaa:	|  |      move.l 64(sp),-(sp)
    8eae:	|  |      jsr 15e9e <__floatsidf>
    8eb4:	|  |      addq.l #4,sp
    8eb6:	|  |      move.l d1,-(sp)
    8eb8:	|  |      move.l d0,-(sp)
    8eba:	|  |      move.l d5,-(sp)
    8ebc:	|  |      move.l d4,-(sp)
    8ebe:	|  |      jsr 15cc6 <__adddf3>
    8ec4:	|  |      lea 16(sp),sp
    8ec8:	|  |      move.l d1,-(sp)
    8eca:	|  |      move.l d0,-(sp)
    8ecc:	|  |      jsr 16416 <sqrt>
    8ed2:	|  |      addq.l #8,sp
    8ed4:	|  |      move.l d0,d4
    8ed6:	|  |      move.l d1,d5
    8ed8:	|  |      move.l 72(sp),-(sp)
    8edc:	|  |      jsr 15e9e <__floatsidf>
    8ee2:	|  |      addq.l #4,sp
    8ee4:	|  |      move.l d0,d6
    8ee6:	|  |      move.l d1,d7
    8ee8:	|  |      move.l 56(sp),-(sp)
    8eec:	|  |      jsr 15e9e <__floatsidf>
    8ef2:	|  |      addq.l #4,sp
    8ef4:	|  |      move.l d1,-(sp)
    8ef6:	|  |      move.l d0,-(sp)
    8ef8:	|  |      move.l d7,-(sp)
    8efa:	|  |      move.l d6,-(sp)
    8efc:	|  |      jsr 15cc6 <__adddf3>
    8f02:	|  |      lea 16(sp),sp
    8f06:	|  |      move.l d1,-(sp)
    8f08:	|  |      move.l d0,-(sp)
    8f0a:	|  |      jsr 16416 <sqrt>
    8f10:	|  |      addq.l #8,sp
    8f12:	|  |      move.l d1,-(sp)
    8f14:	|  |      move.l d0,-(sp)
    8f16:	|  |      move.l d5,-(sp)
    8f18:	|  |      move.l d4,-(sp)
    8f1a:	|  |      jsr 15cc6 <__adddf3>
    8f20:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    8f24:	|  |      move.l d1,-(sp)
    8f26:	|  |      move.l d0,-(sp)
    8f28:	|  |      move.l d3,-(sp)
    8f2a:	|  |      move.l d2,-(sp)
    8f2c:	|  |      jsr 160b6 <__ltdf2>
    8f32:	|  |      lea 16(sp),sp
    8f36:	|  |      tst.l d0
    8f38:	|  |  /-- bge.s 8f50 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    8f3a:	|  |  |   movea.l 152(sp),a0
    8f3e:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    8f44:	|  |  |   movea.l 152(sp),a0
    8f48:	|  |  |   move.l 120(sp),52(a0)
    8f4e:	|  +--|-- bra.s 8f64 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    8f50:	|  |  \-> movea.l 152(sp),a0
    8f54:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    8f5a:	|  |      movea.l 152(sp),a0
    8f5e:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    8f64:	|  \----> movea.l 152(sp),a0
    8f68:	|         move.l 52(a0),d0
    8f6c:	|         move.l d0,-(sp)
    8f6e:	|         jsr 15ede <__floatsisf>
    8f74:	|         addq.l #4,sp
    8f76:	|         move.l d0,d1
    8f78:	|         movea.l 152(sp),a0
    8f7c:	|         move.l 4(a0),d0
    8f80:	|         move.l d0,-(sp)
    8f82:	|         move.l d1,-(sp)
    8f84:	|         jsr 161d2 <__subsf3>
    8f8a:	|         addq.l #8,sp
    8f8c:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    8f90:	|         movea.l 152(sp),a0
    8f94:	|         move.l (a0),d2
    8f96:	|         movea.l 152(sp),a0
    8f9a:	|         move.l 48(a0),d0
    8f9e:	|         move.l d0,-(sp)
    8fa0:	|         jsr 15ede <__floatsisf>
    8fa6:	|         addq.l #4,sp
    8fa8:	|         move.l d0,-(sp)
    8faa:	|         move.l d2,-(sp)
    8fac:	|         jsr 161d2 <__subsf3>
    8fb2:	|         addq.l #8,sp
    8fb4:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    8fb8:	|         clr.l -(sp)
    8fba:	|         move.l 52(sp),-(sp)
    8fbe:	|         jsr 1613a <__nesf2>
    8fc4:	|         addq.l #8,sp
    8fc6:	|         tst.l d0
    8fc8:	|     /-- bne.s 8fdc <doBorderStuff+0x628>
    8fca:	|     |   clr.l -(sp)
    8fcc:	|     |   move.l 56(sp),-(sp)
    8fd0:	|     |   jsr 1613a <__nesf2>
    8fd6:	|     |   addq.l #8,sp
    8fd8:	|     |   tst.l d0
    8fda:	|  /--|-- beq.s 9052 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    8fdc:	|  |  \-> move.l 52(sp),d0
    8fe0:	|  |      move.l d0,-(sp)
    8fe2:	|  |      move.l d0,-(sp)
    8fe4:	|  |      jsr 15c90 <__addsf3>
    8fea:	|  |      addq.l #8,sp
    8fec:	|  |      move.l d0,-(sp)
    8fee:	|  |      move.l 52(sp),-(sp)
    8ff2:	|  |      jsr 16266 <atan2f>
    8ff8:	|  |      addq.l #8,sp
    8ffa:	|  |      move.l d0,-(sp)
    8ffc:	|  |      jsr 15df6 <__extendsfdf2>
    9002:	|  |      addq.l #4,sp
    9004:	|  |      move.l #-1540411785,-(sp)
    900a:	|  |      move.l #1078765033,-(sp)
    9010:	|  |      move.l d1,-(sp)
    9012:	|  |      move.l d0,-(sp)
    9014:	|  |      jsr 15f2e <__muldf3>
    901a:	|  |      lea 16(sp),sp
    901e:	|  |      clr.l -(sp)
    9020:	|  |      move.l #1080459264,-(sp)
    9026:	|  |      move.l d1,-(sp)
    9028:	|  |      move.l d0,-(sp)
    902a:	|  |      jsr 15cc6 <__adddf3>
    9030:	|  |      lea 16(sp),sp
    9034:	|  |      move.l d1,-(sp)
    9036:	|  |      move.l d0,-(sp)
    9038:	|  |      jsr 15e36 <__fixdfsi>
    903e:	|  |      addq.l #8,sp
    9040:	|  |      movea.l 152(sp),a0
    9044:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9048:	|  |      movea.l 152(sp),a0
    904c:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9052:	|  \----> pea 1 <_start+0x1>
    9056:	|         move.l 156(sp),-(sp)
    905a:	|         jsr 705c <setFrames>
    9060:	|         addq.l #8,sp
    return TRUE;
    9062:	|         moveq #1,d0
}
    9064:	\-------> movem.l (sp)+,d2-d7
    9068:	          lea 124(sp),sp
    906c:	          rts

0000906e <drawPeople>:

void drawPeople () {
    906e:	                   lea -24(sp),sp
    9072:	                   move.l d2,-(sp)

	shufflePeople ();
    9074:	                   jsr ab0a <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    907a:	                   move.l 1b290 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9082:	                   clr.l 20(sp)
	overRegion = NULL;
    9086:	                   clr.l 1b33c <overRegion>

	while (thisPerson) {
    908c:	   /-------------- bra.w 963e <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9090:	/--|-------------> movea.l 24(sp),a0
    9094:	|  |               move.w 104(a0),d0
    9098:	|  |  /----------- beq.w 93f2 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    909c:	|  |  |            movea.l 24(sp),a0
    90a0:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    90a6:	|  |  |            movea.l 24(sp),a0
    90aa:	|  |  |            move.l 76(a0),d0
    90ae:	|  |  |            cmp.l 20(sp),d0
    90b2:	|  |  |  /-------- beq.w 9280 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    90b6:	|  |  |  |         movea.l 24(sp),a0
    90ba:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    90be:	|  |  |  |         movea.l 24(sp),a0
    90c2:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    90c8:	|  |  |  |         movea.l 24(sp),a0
    90cc:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    90d0:	|  |  |  |         movea.l 20(sp),a0
    90d4:	|  |  |  |         movea.l 4(a0),a0
    90d8:	|  |  |  |         move.l 4(a0),d0
    90dc:	|  |  |  |         movea.l 24(sp),a0
    90e0:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    90e4:	|  |  |  |         movea.l 20(sp),a0
    90e8:	|  |  |  |         movea.l 4(a0),a1
    90ec:	|  |  |  |         movea.l 24(sp),a0
    90f0:	|  |  |  |         move.l 84(a0),d0
    90f4:	|  |  |  |         move.l d0,d1
    90f6:	|  |  |  |         move.l d1,d0
    90f8:	|  |  |  |         add.l d0,d0
    90fa:	|  |  |  |         add.l d1,d0
    90fc:	|  |  |  |         add.l d0,d0
    90fe:	|  |  |  |         add.l d0,d0
    9100:	|  |  |  |         lea (0,a1,d0.l),a0
    9104:	|  |  |  |         move.l 8(a0),d0
    9108:	|  |  |  |     /-- ble.w 91aa <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    910c:	|  |  |  |     |   movea.l 20(sp),a0
    9110:	|  |  |  |     |   movea.l 4(a0),a1
    9114:	|  |  |  |     |   movea.l 24(sp),a0
    9118:	|  |  |  |     |   move.l 84(a0),d0
    911c:	|  |  |  |     |   move.l d0,d1
    911e:	|  |  |  |     |   move.l d1,d0
    9120:	|  |  |  |     |   add.l d0,d0
    9122:	|  |  |  |     |   add.l d1,d0
    9124:	|  |  |  |     |   add.l d0,d0
    9126:	|  |  |  |     |   add.l d0,d0
    9128:	|  |  |  |     |   lea (0,a1,d0.l),a0
    912c:	|  |  |  |     |   move.l 8(a0),d0
    9130:	|  |  |  |     |   clr.l -(sp)
    9132:	|  |  |  |     |   move.l d0,-(sp)
    9134:	|  |  |  |     |   jsr c1f6 <startSound>
    913a:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    913c:	|  |  |  |     |   movea.l 24(sp),a0
    9140:	|  |  |  |     |   move.l 84(a0),d0
    9144:	|  |  |  |     |   addq.l #1,d0
    9146:	|  |  |  |     |   movea.l 24(sp),a0
    914a:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    914e:	|  |  |  |     |   movea.l 24(sp),a0
    9152:	|  |  |  |     |   move.l 84(a0),d0
    9156:	|  |  |  |     |   movea.l 24(sp),a0
    915a:	|  |  |  |     |   movea.l 72(a0),a0
    915e:	|  |  |  |     |   move.l 8(a0),d1
    9162:	|  |  |  |     |   move.l d1,-(sp)
    9164:	|  |  |  |     |   move.l d0,-(sp)
    9166:	|  |  |  |     |   jsr 1650c <__modsi3>
    916c:	|  |  |  |     |   addq.l #8,sp
    916e:	|  |  |  |     |   movea.l 24(sp),a0
    9172:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9176:	|  |  |  |     |   movea.l 24(sp),a0
    917a:	|  |  |  |     |   movea.l 72(a0),a0
    917e:	|  |  |  |     |   movea.l 4(a0),a1
    9182:	|  |  |  |     |   movea.l 24(sp),a0
    9186:	|  |  |  |     |   move.l 84(a0),d0
    918a:	|  |  |  |     |   move.l d0,d1
    918c:	|  |  |  |     |   move.l d1,d0
    918e:	|  |  |  |     |   add.l d0,d0
    9190:	|  |  |  |     |   add.l d1,d0
    9192:	|  |  |  |     |   add.l d0,d0
    9194:	|  |  |  |     |   add.l d0,d0
    9196:	|  |  |  |     |   lea (0,a1,d0.l),a0
    919a:	|  |  |  |     |   move.l 4(a0),d0
    919e:	|  |  |  |     |   movea.l 24(sp),a0
    91a2:	|  |  |  |     |   move.l d0,88(a0)
    91a6:	|  |  |  |  /--|-- bra.w 92e8 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    91aa:	|  |  |  |  |  \-> movea.l 20(sp),a0
    91ae:	|  |  |  |  |      movea.l 4(a0),a1
    91b2:	|  |  |  |  |      movea.l 24(sp),a0
    91b6:	|  |  |  |  |      move.l 84(a0),d0
    91ba:	|  |  |  |  |      move.l d0,d1
    91bc:	|  |  |  |  |      move.l d1,d0
    91be:	|  |  |  |  |      add.l d0,d0
    91c0:	|  |  |  |  |      add.l d1,d0
    91c2:	|  |  |  |  |      add.l d0,d0
    91c4:	|  |  |  |  |      add.l d0,d0
    91c6:	|  |  |  |  |      lea (0,a1,d0.l),a0
    91ca:	|  |  |  |  |      move.l 8(a0),d0
    91ce:	|  |  |  |  +----- beq.w 92e8 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    91d2:	|  |  |  |  |      movea.l 1b1a8 <noStack>,a1
    91d8:	|  |  |  |  |      movea.l 20(sp),a0
    91dc:	|  |  |  |  |      move.l 4(a0),d2
    91e0:	|  |  |  |  |      movea.l 24(sp),a0
    91e4:	|  |  |  |  |      move.l 84(a0),d0
    91e8:	|  |  |  |  |      move.l d0,d1
    91ea:	|  |  |  |  |      move.l d1,d0
    91ec:	|  |  |  |  |      add.l d0,d0
    91ee:	|  |  |  |  |      add.l d1,d0
    91f0:	|  |  |  |  |      add.l d0,d0
    91f2:	|  |  |  |  |      add.l d0,d0
    91f4:	|  |  |  |  |      movea.l d2,a0
    91f6:	|  |  |  |  |      adda.l d0,a0
    91f8:	|  |  |  |  |      move.l 8(a0),d0
    91fc:	|  |  |  |  |      neg.l d0
    91fe:	|  |  |  |  |      pea 1 <_start+0x1>
    9202:	|  |  |  |  |      move.l a1,-(sp)
    9204:	|  |  |  |  |      clr.l -(sp)
    9206:	|  |  |  |  |      clr.l -(sp)
    9208:	|  |  |  |  |      move.l d0,-(sp)
    920a:	|  |  |  |  |      jsr 5a00 <startNewFunctionNum>
    9210:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9214:	|  |  |  |  |      movea.l 24(sp),a0
    9218:	|  |  |  |  |      move.l 84(a0),d0
    921c:	|  |  |  |  |      addq.l #1,d0
    921e:	|  |  |  |  |      movea.l 24(sp),a0
    9222:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9226:	|  |  |  |  |      movea.l 24(sp),a0
    922a:	|  |  |  |  |      move.l 84(a0),d0
    922e:	|  |  |  |  |      movea.l 24(sp),a0
    9232:	|  |  |  |  |      movea.l 72(a0),a0
    9236:	|  |  |  |  |      move.l 8(a0),d1
    923a:	|  |  |  |  |      move.l d1,-(sp)
    923c:	|  |  |  |  |      move.l d0,-(sp)
    923e:	|  |  |  |  |      jsr 1650c <__modsi3>
    9244:	|  |  |  |  |      addq.l #8,sp
    9246:	|  |  |  |  |      movea.l 24(sp),a0
    924a:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    924e:	|  |  |  |  |      movea.l 24(sp),a0
    9252:	|  |  |  |  |      movea.l 72(a0),a0
    9256:	|  |  |  |  |      movea.l 4(a0),a1
    925a:	|  |  |  |  |      movea.l 24(sp),a0
    925e:	|  |  |  |  |      move.l 84(a0),d0
    9262:	|  |  |  |  |      move.l d0,d1
    9264:	|  |  |  |  |      move.l d1,d0
    9266:	|  |  |  |  |      add.l d0,d0
    9268:	|  |  |  |  |      add.l d1,d0
    926a:	|  |  |  |  |      add.l d0,d0
    926c:	|  |  |  |  |      add.l d0,d0
    926e:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9272:	|  |  |  |  |      move.l 4(a0),d0
    9276:	|  |  |  |  |      movea.l 24(sp),a0
    927a:	|  |  |  |  |      move.l d0,88(a0)
    927e:	|  |  |  |  +----- bra.s 92e8 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    9280:	|  |  |  \--|----> movea.l 24(sp),a0
    9284:	|  |  |     |      move.l (a0),d0
    9286:	|  |  |     |      movea.l 24(sp),a0
    928a:	|  |  |     |      move.l 8(a0),d1
    928e:	|  |  |     |      move.l d1,-(sp)
    9290:	|  |  |     |      move.l d0,-(sp)
    9292:	|  |  |     |      jsr 15dc0 <__eqsf2>
    9298:	|  |  |     |      addq.l #8,sp
    929a:	|  |  |     |      tst.l d0
    929c:	|  |  |     |  /-- bne.s 92e0 <drawPeople+0x272>
    929e:	|  |  |     |  |   movea.l 24(sp),a0
    92a2:	|  |  |     |  |   move.l 4(a0),d0
    92a6:	|  |  |     |  |   movea.l 24(sp),a0
    92aa:	|  |  |     |  |   move.l 12(a0),d1
    92ae:	|  |  |     |  |   move.l d1,-(sp)
    92b0:	|  |  |     |  |   move.l d0,-(sp)
    92b2:	|  |  |     |  |   jsr 15dc0 <__eqsf2>
    92b8:	|  |  |     |  |   addq.l #8,sp
    92ba:	|  |  |     |  |   tst.l d0
    92bc:	|  |  |     |  +-- bne.s 92e0 <drawPeople+0x272>
    92be:	|  |  |     |  |   movea.l 20(sp),a0
    92c2:	|  |  |     |  |   move.l 8(a0),d0
    92c6:	|  |  |     |  |   moveq #1,d1
    92c8:	|  |  |     |  |   cmp.l d0,d1
    92ca:	|  |  |     |  +-- bne.s 92e0 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    92cc:	|  |  |     |  |   movea.l 24(sp),a0
    92d0:	|  |  |     |  |   move.l 16(a0),d0
    92d4:	|  |  |     |  |   addq.l #1,d0
    92d6:	|  |  |     |  |   movea.l 24(sp),a0
    92da:	|  |  |     |  |   move.l d0,16(a0)
    92de:	|  |  |     +--|-- bra.s 92e8 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    92e0:	|  |  |     |  \-> movea.l 24(sp),a0
    92e4:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    92e8:	|  |  |     \----> movea.l 24(sp),a0
    92ec:	|  |  |            move.l (a0),d0
    92ee:	|  |  |            movea.l 24(sp),a0
    92f2:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    92f6:	|  |  |            movea.l 24(sp),a0
    92fa:	|  |  |            move.l 4(a0),d0
    92fe:	|  |  |            movea.l 24(sp),a0
    9302:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    9306:	|  |  |            movea.l 20(sp),a0
    930a:	|  |  |            movea.l 4(a0),a1
    930e:	|  |  |            movea.l 24(sp),a0
    9312:	|  |  |            move.l 84(a0),d0
    9316:	|  |  |            move.l d0,d1
    9318:	|  |  |            move.l d1,d0
    931a:	|  |  |            add.l d0,d0
    931c:	|  |  |            add.l d1,d0
    931e:	|  |  |            add.l d0,d0
    9320:	|  |  |            add.l d0,d0
    9322:	|  |  |            lea (0,a1,d0.l),a0
    9326:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    932a:	|  |  |            move.l 8(sp),d0
    932e:	|  |  |            add.l d0,d0
    9330:	|  |  |            subx.l d0,d0
    9332:	|  |  |            neg.l d0
    9334:	|  |  |            move.b d0,d0
    9336:	|  |  |            move.b d0,d0
    9338:	|  |  |            andi.l #255,d0
    933e:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    9342:	|  |  |            move.l 8(sp),-(sp)
    9346:	|  |  |            jsr 8242 <TF_abs>
    934c:	|  |  |            addq.l #4,sp
    934e:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    9352:	|  |  |            movea.l 20(sp),a0
    9356:	|  |  |            movea.l (a0),a0
    9358:	|  |  |            move.l 8(a0),d0
    935c:	|  |  |            cmp.l 12(sp),d0
    9360:	|  |  |        /-- bgt.s 9370 <drawPeople+0x302>
				fNum = 0;
    9362:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    9366:	|  |  |        |   moveq #2,d0
    9368:	|  |  |        |   sub.l 16(sp),d0
    936c:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    9370:	|  |  |        \-> moveq #2,d1
    9372:	|  |  |            cmp.l 16(sp),d1
    9376:	|  |  +----------- beq.s 93f2 <drawPeople+0x384>
				BOOL r = FALSE;
    9378:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    937c:	|  |  |            move.l 16(sp),d0
    9380:	|  |  |            movea.w d0,a0
    9382:	|  |  |            movea.l 20(sp),a1
    9386:	|  |  |            movea.l (a1),a1
    9388:	|  |  |            movea.l 16(a1),a1
    938c:	|  |  |            move.l 12(sp),d1
    9390:	|  |  |            move.l d1,d0
    9392:	|  |  |            lsl.l #3,d0
    9394:	|  |  |            sub.l d1,d0
    9396:	|  |  |            add.l d0,d0
    9398:	|  |  |            add.l d0,d0
    939a:	|  |  |            add.l a1,d0
    939c:	|  |  |            move.l a0,-(sp)
    939e:	|  |  |            move.l 28(sp),-(sp)
    93a2:	|  |  |            move.l d0,-(sp)
    93a4:	|  |  |            jsr 7fd8 <scaleSprite>
    93aa:	|  |  |            lea 12(sp),sp
    93ae:	|  |  |            move.w d0,6(sp)
				if (r) {
    93b2:	|  |  +----------- beq.s 93f2 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    93b4:	|  |  |            movea.l 24(sp),a0
    93b8:	|  |  |            movea.l 114(a0),a0
    93bc:	|  |  |            movea.l (a0),a0
    93be:	|  |  |            move.b (a0),d0
    93c0:	|  |  +----------- beq.s 93f2 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    93c2:	|  |  |            move.l 1b2b0 <personRegion+0x1c>,d1
    93c8:	|  |  |            movea.l 24(sp),a0
    93cc:	|  |  |            move.l 114(a0),d0
    93d0:	|  |  |            cmp.l d1,d0
    93d2:	|  |  |        /-- beq.s 93da <drawPeople+0x36c>
    93d4:	|  |  |        |   clr.l 1b1a0 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    93da:	|  |  |        \-> movea.l 24(sp),a0
    93de:	|  |  |            move.l 114(a0),d0
    93e2:	|  |  |            move.l d0,1b2b0 <personRegion+0x1c>
						overRegion = & personRegion;
    93e8:	|  |  |            move.l #111252,1b33c <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    93f2:	|  |  \----------> movea.l 24(sp),a0
    93f6:	|  |               move.l 88(a0),d0
    93fa:	|  |               subq.l #1,d0
    93fc:	|  |               movea.l 24(sp),a0
    9400:	|  |               move.l d0,88(a0)
    9404:	|  |               movea.l 24(sp),a0
    9408:	|  |               move.l 88(a0),d0
    940c:	|  |        /----- bne.w 9634 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    9410:	|  |        |      movea.l 24(sp),a0
    9414:	|  |        |      move.l 84(a0),d0
    9418:	|  |        |      addq.l #1,d0
    941a:	|  |        |      movea.l 24(sp),a0
    941e:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9422:	|  |        |      movea.l 24(sp),a0
    9426:	|  |        |      move.l 84(a0),d0
    942a:	|  |        |      movea.l 24(sp),a0
    942e:	|  |        |      movea.l 72(a0),a0
    9432:	|  |        |      move.l 8(a0),d1
    9436:	|  |        |      move.l d1,-(sp)
    9438:	|  |        |      move.l d0,-(sp)
    943a:	|  |        |      jsr 1650c <__modsi3>
    9440:	|  |        |      addq.l #8,sp
    9442:	|  |        |      movea.l 24(sp),a0
    9446:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    944a:	|  |        |      movea.l 24(sp),a0
    944e:	|  |        |      movea.l 72(a0),a0
    9452:	|  |        |      movea.l 4(a0),a1
    9456:	|  |        |      movea.l 24(sp),a0
    945a:	|  |        |      move.l 84(a0),d0
    945e:	|  |        |      move.l d0,d1
    9460:	|  |        |      move.l d1,d0
    9462:	|  |        |      add.l d0,d0
    9464:	|  |        |      add.l d1,d0
    9466:	|  |        |      add.l d0,d0
    9468:	|  |        |      add.l d0,d0
    946a:	|  |        |      lea (0,a1,d0.l),a0
    946e:	|  |        |      move.l 4(a0),d0
    9472:	|  |        |      movea.l 24(sp),a0
    9476:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    947a:	|  |        |      movea.l 24(sp),a0
    947e:	|  |        |      move.w 104(a0),d0
    9482:	|  |        +----- beq.w 9634 <drawPeople+0x5c6>
    9486:	|  |        |      tst.l 20(sp)
    948a:	|  |        +----- beq.w 9634 <drawPeople+0x5c6>
    948e:	|  |        |      movea.l 20(sp),a0
    9492:	|  |        |      move.l 4(a0),d0
    9496:	|  |        +----- beq.w 9634 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    949a:	|  |        |      movea.l 20(sp),a0
    949e:	|  |        |      movea.l 4(a0),a1
    94a2:	|  |        |      movea.l 24(sp),a0
    94a6:	|  |        |      move.l 84(a0),d0
    94aa:	|  |        |      move.l d0,d1
    94ac:	|  |        |      move.l d1,d0
    94ae:	|  |        |      add.l d0,d0
    94b0:	|  |        |      add.l d1,d0
    94b2:	|  |        |      add.l d0,d0
    94b4:	|  |        |      add.l d0,d0
    94b6:	|  |        |      lea (0,a1,d0.l),a0
    94ba:	|  |        |      move.l 8(a0),d0
    94be:	|  |        |  /-- ble.w 9560 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    94c2:	|  |        |  |   movea.l 20(sp),a0
    94c6:	|  |        |  |   movea.l 4(a0),a1
    94ca:	|  |        |  |   movea.l 24(sp),a0
    94ce:	|  |        |  |   move.l 84(a0),d0
    94d2:	|  |        |  |   move.l d0,d1
    94d4:	|  |        |  |   move.l d1,d0
    94d6:	|  |        |  |   add.l d0,d0
    94d8:	|  |        |  |   add.l d1,d0
    94da:	|  |        |  |   add.l d0,d0
    94dc:	|  |        |  |   add.l d0,d0
    94de:	|  |        |  |   lea (0,a1,d0.l),a0
    94e2:	|  |        |  |   move.l 8(a0),d0
    94e6:	|  |        |  |   clr.l -(sp)
    94e8:	|  |        |  |   move.l d0,-(sp)
    94ea:	|  |        |  |   jsr c1f6 <startSound>
    94f0:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    94f2:	|  |        |  |   movea.l 24(sp),a0
    94f6:	|  |        |  |   move.l 84(a0),d0
    94fa:	|  |        |  |   addq.l #1,d0
    94fc:	|  |        |  |   movea.l 24(sp),a0
    9500:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9504:	|  |        |  |   movea.l 24(sp),a0
    9508:	|  |        |  |   move.l 84(a0),d0
    950c:	|  |        |  |   movea.l 24(sp),a0
    9510:	|  |        |  |   movea.l 72(a0),a0
    9514:	|  |        |  |   move.l 8(a0),d1
    9518:	|  |        |  |   move.l d1,-(sp)
    951a:	|  |        |  |   move.l d0,-(sp)
    951c:	|  |        |  |   jsr 1650c <__modsi3>
    9522:	|  |        |  |   addq.l #8,sp
    9524:	|  |        |  |   movea.l 24(sp),a0
    9528:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    952c:	|  |        |  |   movea.l 24(sp),a0
    9530:	|  |        |  |   movea.l 72(a0),a0
    9534:	|  |        |  |   movea.l 4(a0),a1
    9538:	|  |        |  |   movea.l 24(sp),a0
    953c:	|  |        |  |   move.l 84(a0),d0
    9540:	|  |        |  |   move.l d0,d1
    9542:	|  |        |  |   move.l d1,d0
    9544:	|  |        |  |   add.l d0,d0
    9546:	|  |        |  |   add.l d1,d0
    9548:	|  |        |  |   add.l d0,d0
    954a:	|  |        |  |   add.l d0,d0
    954c:	|  |        |  |   lea (0,a1,d0.l),a0
    9550:	|  |        |  |   move.l 4(a0),d0
    9554:	|  |        |  |   movea.l 24(sp),a0
    9558:	|  |        |  |   move.l d0,88(a0)
    955c:	|  |        +--|-- bra.w 9634 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9560:	|  |        |  \-> movea.l 20(sp),a0
    9564:	|  |        |      movea.l 4(a0),a1
    9568:	|  |        |      movea.l 24(sp),a0
    956c:	|  |        |      move.l 84(a0),d0
    9570:	|  |        |      move.l d0,d1
    9572:	|  |        |      move.l d1,d0
    9574:	|  |        |      add.l d0,d0
    9576:	|  |        |      add.l d1,d0
    9578:	|  |        |      add.l d0,d0
    957a:	|  |        |      add.l d0,d0
    957c:	|  |        |      lea (0,a1,d0.l),a0
    9580:	|  |        |      move.l 8(a0),d0
    9584:	|  |        +----- beq.w 9634 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9588:	|  |        |      movea.l 1b1a8 <noStack>,a1
    958e:	|  |        |      movea.l 20(sp),a0
    9592:	|  |        |      move.l 4(a0),d2
    9596:	|  |        |      movea.l 24(sp),a0
    959a:	|  |        |      move.l 84(a0),d0
    959e:	|  |        |      move.l d0,d1
    95a0:	|  |        |      move.l d1,d0
    95a2:	|  |        |      add.l d0,d0
    95a4:	|  |        |      add.l d1,d0
    95a6:	|  |        |      add.l d0,d0
    95a8:	|  |        |      add.l d0,d0
    95aa:	|  |        |      movea.l d2,a0
    95ac:	|  |        |      adda.l d0,a0
    95ae:	|  |        |      move.l 8(a0),d0
    95b2:	|  |        |      neg.l d0
    95b4:	|  |        |      pea 1 <_start+0x1>
    95b8:	|  |        |      move.l a1,-(sp)
    95ba:	|  |        |      clr.l -(sp)
    95bc:	|  |        |      clr.l -(sp)
    95be:	|  |        |      move.l d0,-(sp)
    95c0:	|  |        |      jsr 5a00 <startNewFunctionNum>
    95c6:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    95ca:	|  |        |      movea.l 24(sp),a0
    95ce:	|  |        |      move.l 84(a0),d0
    95d2:	|  |        |      addq.l #1,d0
    95d4:	|  |        |      movea.l 24(sp),a0
    95d8:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    95dc:	|  |        |      movea.l 24(sp),a0
    95e0:	|  |        |      move.l 84(a0),d0
    95e4:	|  |        |      movea.l 24(sp),a0
    95e8:	|  |        |      movea.l 72(a0),a0
    95ec:	|  |        |      move.l 8(a0),d1
    95f0:	|  |        |      move.l d1,-(sp)
    95f2:	|  |        |      move.l d0,-(sp)
    95f4:	|  |        |      jsr 1650c <__modsi3>
    95fa:	|  |        |      addq.l #8,sp
    95fc:	|  |        |      movea.l 24(sp),a0
    9600:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9604:	|  |        |      movea.l 24(sp),a0
    9608:	|  |        |      movea.l 72(a0),a0
    960c:	|  |        |      movea.l 4(a0),a1
    9610:	|  |        |      movea.l 24(sp),a0
    9614:	|  |        |      move.l 84(a0),d0
    9618:	|  |        |      move.l d0,d1
    961a:	|  |        |      move.l d1,d0
    961c:	|  |        |      add.l d0,d0
    961e:	|  |        |      add.l d1,d0
    9620:	|  |        |      add.l d0,d0
    9622:	|  |        |      add.l d0,d0
    9624:	|  |        |      lea (0,a1,d0.l),a0
    9628:	|  |        |      move.l 4(a0),d0
    962c:	|  |        |      movea.l 24(sp),a0
    9630:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    9634:	|  |        \----> movea.l 24(sp),a0
    9638:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    963e:	|  \-------------> tst.l 24(sp)
    9642:	\----------------- bne.w 9090 <drawPeople+0x22>
	}
}
    9646:	                   nop
    9648:	                   nop
    964a:	                   move.l (sp)+,d2
    964c:	                   lea 24(sp),sp
    9650:	                   rts

00009652 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    9652:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    9654:	          move.l 1b290 <allPeople>,(sp)
	while (thisPerson) {
    965a:	      /-- bra.s 9672 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    965c:	/-----|-> movea.l (sp),a0
    965e:	|     |   movea.l 114(a0),a0
    9662:	|     |   move.l 4(a0),d0
    9666:	|     |   cmp.l 8(sp),d0
    966a:	|  /--|-- beq.s 9678 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    966c:	|  |  |   movea.l (sp),a0
    966e:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    9672:	|  |  \-> tst.l (sp)
    9674:	\--|----- bne.s 965c <findPerson+0xa>
    9676:	   |  /-- bra.s 967a <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    9678:	   \--|-> nop
	}
	return thisPerson;
    967a:	      \-> move.l (sp),d0
}
    967c:	          addq.l #4,sp
    967e:	          rts

00009680 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    9680:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    9682:	       move.l 12(sp),-(sp)
    9686:	       jsr 9652 <findPerson>
    968c:	       addq.l #4,sp
    968e:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    9690:	   /-- bne.s 9696 <floatCharacter+0x16>
    9692:	   |   clr.w d0
    9694:	/--|-- bra.s 96a0 <floatCharacter+0x20>
	moveMe -> floaty = f;
    9696:	|  \-> movea.l (sp),a0
    9698:	|      move.l 8(sp),24(a0)
	return TRUE;
    969e:	|      moveq #1,d0
}
    96a0:	\----> addq.l #4,sp
    96a2:	       rts

000096a4 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    96a4:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    96a6:	          tst.l 8(sp)
    96aa:	      /-- bne.s 96b8 <forceWalkingPerson+0x14>
    96ac:	      |   tst.l 12(sp)
    96b0:	      +-- bne.s 96b8 <forceWalkingPerson+0x14>
    96b2:	      |   clr.w d0
    96b4:	/-----|-- bra.w 974a <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    96b8:	|     \-> move.l 16(sp),-(sp)
    96bc:	|         jsr 9652 <findPerson>
    96c2:	|         addq.l #4,sp
    96c4:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    96c6:	|     /-- bne.s 96cc <forceWalkingPerson+0x28>
    96c8:	|     |   clr.w d0
    96ca:	+-----|-- bra.s 974a <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    96cc:	|     \-> movea.l (sp),a0
    96ce:	|         move.l 68(a0),d0
    96d2:	|     /-- beq.s 96e4 <forceWalkingPerson+0x40>
    96d4:	|     |   movea.l (sp),a0
    96d6:	|     |   move.l 68(a0),d0
    96da:	|     |   move.l d0,-(sp)
    96dc:	|     |   jsr 3644 <abortFunction>
    96e2:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    96e4:	|     \-> movea.l (sp),a0
    96e6:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    96ec:	|         movea.l (sp),a0
    96ee:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    96f2:	|         movea.l (sp),a0
    96f4:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    96fa:	|         movea.l (sp),a0
    96fc:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    9702:	|         movea.l (sp),a0
    9704:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    970a:	|         movea.l (sp),a0
    970c:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    9710:	|         movea.l (sp),a0
    9712:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    9716:	|         move.l (sp),-(sp)
    9718:	|         jsr 89b4 <doBorderStuff>
    971e:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    9720:	|         pea 1 <_start+0x1>
    9724:	|         move.l 4(sp),-(sp)
    9728:	|         jsr af14 <walkMe>
    972e:	|         addq.l #8,sp
    9730:	|         tst.w d0
    9732:	|     /-- bne.s 973c <forceWalkingPerson+0x98>
    9734:	|     |   movea.l (sp),a0
    9736:	|     |   move.w 66(a0),d0
    973a:	|  /--|-- beq.s 9748 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    973c:	|  |  \-> movea.l (sp),a0
    973e:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    9744:	|  |      moveq #1,d0
    9746:	+--|----- bra.s 974a <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    9748:	|  \----> clr.w d0
    }
}
    974a:	\-------> addq.l #4,sp
    974c:	          rts

0000974e <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    974e:	                lea -56(sp),sp
    9752:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    9754:	                move.l #320,56(sp)
    975c:	                move.l #200,52(sp)
    9764:	                moveq #-1,d0
    9766:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    976a:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    9772:	                clr.l 44(sp)
    9776:	   /----------- bra.w 994e <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    977a:	/--|----------> movea.l 1b344 <currentFloor>,a0
    9780:	|  |            move.l 12(a0),d1
    9784:	|  |            move.l 44(sp),d0
    9788:	|  |            lsl.l #3,d0
    978a:	|  |            movea.l d1,a0
    978c:	|  |            adda.l d0,a0
    978e:	|  |            move.l (a0),d0
    9790:	|  |            move.l d0,d1
    9792:	|  |            subq.l #1,d1
    9794:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    9798:	|  |            clr.l 40(sp)
    979c:	|  |     /----- bra.w 992c <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    97a0:	|  |  /--|----> movea.l 1b344 <currentFloor>,a0
    97a6:	|  |  |  |      move.l 4(a0),d1
    97aa:	|  |  |  |      movea.l 1b344 <currentFloor>,a0
    97b0:	|  |  |  |      movea.l 12(a0),a0
    97b4:	|  |  |  |      move.l 44(sp),d0
    97b8:	|  |  |  |      lsl.l #3,d0
    97ba:	|  |  |  |      adda.l d0,a0
    97bc:	|  |  |  |      movea.l 4(a0),a0
    97c0:	|  |  |  |      move.l 40(sp),d0
    97c4:	|  |  |  |      add.l d0,d0
    97c6:	|  |  |  |      add.l d0,d0
    97c8:	|  |  |  |      adda.l d0,a0
    97ca:	|  |  |  |      move.l (a0),d0
    97cc:	|  |  |  |      lsl.l #3,d0
    97ce:	|  |  |  |      movea.l d1,a0
    97d0:	|  |  |  |      adda.l d0,a0
    97d2:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    97d6:	|  |  |  |      movea.l 1b344 <currentFloor>,a0
    97dc:	|  |  |  |      move.l 4(a0),d1
    97e0:	|  |  |  |      movea.l 1b344 <currentFloor>,a0
    97e6:	|  |  |  |      movea.l 12(a0),a0
    97ea:	|  |  |  |      move.l 44(sp),d0
    97ee:	|  |  |  |      lsl.l #3,d0
    97f0:	|  |  |  |      adda.l d0,a0
    97f2:	|  |  |  |      movea.l 4(a0),a0
    97f6:	|  |  |  |      move.l 40(sp),d0
    97fa:	|  |  |  |      add.l d0,d0
    97fc:	|  |  |  |      add.l d0,d0
    97fe:	|  |  |  |      adda.l d0,a0
    9800:	|  |  |  |      move.l (a0),d0
    9802:	|  |  |  |      lsl.l #3,d0
    9804:	|  |  |  |      movea.l d1,a0
    9806:	|  |  |  |      adda.l d0,a0
    9808:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    980e:	|  |  |  |      movea.l 1b344 <currentFloor>,a0
    9814:	|  |  |  |      move.l 4(a0),d1
    9818:	|  |  |  |      movea.l 1b344 <currentFloor>,a0
    981e:	|  |  |  |      movea.l 12(a0),a0
    9822:	|  |  |  |      move.l 44(sp),d0
    9826:	|  |  |  |      lsl.l #3,d0
    9828:	|  |  |  |      adda.l d0,a0
    982a:	|  |  |  |      movea.l 4(a0),a0
    982e:	|  |  |  |      move.l 36(sp),d0
    9832:	|  |  |  |      add.l d0,d0
    9834:	|  |  |  |      add.l d0,d0
    9836:	|  |  |  |      adda.l d0,a0
    9838:	|  |  |  |      move.l (a0),d0
    983a:	|  |  |  |      lsl.l #3,d0
    983c:	|  |  |  |      movea.l d1,a0
    983e:	|  |  |  |      adda.l d0,a0
    9840:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    9844:	|  |  |  |      movea.l 1b344 <currentFloor>,a0
    984a:	|  |  |  |      move.l 4(a0),d1
    984e:	|  |  |  |      movea.l 1b344 <currentFloor>,a0
    9854:	|  |  |  |      movea.l 12(a0),a0
    9858:	|  |  |  |      move.l 44(sp),d0
    985c:	|  |  |  |      lsl.l #3,d0
    985e:	|  |  |  |      adda.l d0,a0
    9860:	|  |  |  |      movea.l 4(a0),a0
    9864:	|  |  |  |      move.l 36(sp),d0
    9868:	|  |  |  |      add.l d0,d0
    986a:	|  |  |  |      add.l d0,d0
    986c:	|  |  |  |      adda.l d0,a0
    986e:	|  |  |  |      move.l (a0),d0
    9870:	|  |  |  |      lsl.l #3,d0
    9872:	|  |  |  |      movea.l d1,a0
    9874:	|  |  |  |      adda.l d0,a0
    9876:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    987c:	|  |  |  |      movea.l 68(sp),a0
    9880:	|  |  |  |      move.l (a0),d1
    9882:	|  |  |  |      movea.l 64(sp),a0
    9886:	|  |  |  |      move.l (a0),d0
    9888:	|  |  |  |      move.l d1,-(sp)
    988a:	|  |  |  |      move.l d0,-(sp)
    988c:	|  |  |  |      move.l 24(sp),-(sp)
    9890:	|  |  |  |      move.l 32(sp),-(sp)
    9894:	|  |  |  |      move.l 40(sp),-(sp)
    9898:	|  |  |  |      move.l 48(sp),-(sp)
    989c:	|  |  |  |      lea 28(sp),a0
    98a0:	|  |  |  |      move.l a0,-(sp)
    98a2:	|  |  |  |      lea 36(sp),a0
    98a6:	|  |  |  |      move.l a0,-(sp)
    98a8:	|  |  |  |      jsr 14a86 <closestPointOnLine>
    98ae:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    98b2:	|  |  |  |      movea.l 64(sp),a0
    98b6:	|  |  |  |      move.l (a0),d0
    98b8:	|  |  |  |      move.l 8(sp),d1
    98bc:	|  |  |  |      move.l d0,d2
    98be:	|  |  |  |      sub.l d1,d2
    98c0:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    98c4:	|  |  |  |      movea.l 68(sp),a0
    98c8:	|  |  |  |      move.l (a0),d0
    98ca:	|  |  |  |      move.l 4(sp),d1
    98ce:	|  |  |  |      move.l d0,d2
    98d0:	|  |  |  |      sub.l d1,d2
    98d2:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    98d6:	|  |  |  |      move.l 28(sp),-(sp)
    98da:	|  |  |  |      move.l 32(sp),-(sp)
    98de:	|  |  |  |      jsr 16460 <__mulsi3>
    98e4:	|  |  |  |      addq.l #8,sp
    98e6:	|  |  |  |      move.l d0,d2
    98e8:	|  |  |  |      move.l 24(sp),-(sp)
    98ec:	|  |  |  |      move.l 28(sp),-(sp)
    98f0:	|  |  |  |      jsr 16460 <__mulsi3>
    98f6:	|  |  |  |      addq.l #8,sp
    98f8:	|  |  |  |      move.l d2,d1
    98fa:	|  |  |  |      add.l d0,d1
    98fc:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    9900:	|  |  |  |      move.l 12(sp),d2
    9904:	|  |  |  |      cmp.l 32(sp),d2
    9908:	|  |  |  |  /-- bge.s 9922 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    990a:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    9910:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    9916:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    991c:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    9922:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    9928:	|  |  |  |      addq.l #1,40(sp)
    992c:	|  |  |  \----> movea.l 1b344 <currentFloor>,a0
    9932:	|  |  |         move.l 12(a0),d1
    9936:	|  |  |         move.l 44(sp),d0
    993a:	|  |  |         lsl.l #3,d0
    993c:	|  |  |         movea.l d1,a0
    993e:	|  |  |         adda.l d0,a0
    9940:	|  |  |         move.l (a0),d0
    9942:	|  |  |         cmp.l 40(sp),d0
    9946:	|  |  \-------- bgt.w 97a0 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    994a:	|  |            addq.l #1,44(sp)
    994e:	|  \----------> movea.l 1b344 <currentFloor>,a0
    9954:	|               move.l 8(a0),d0
    9958:	|               cmp.l 44(sp),d0
    995c:	\-------------- bgt.w 977a <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    9960:	                moveq #-1,d0
    9962:	                cmp.l 48(sp),d0
    9966:	            /-- bne.s 996c <handleClosestPoint+0x21e>
    9968:	            |   clr.w d0
    996a:	         /--|-- bra.s 9986 <handleClosestPoint+0x238>
	*setX = gotX;
    996c:	         |  \-> movea.l 64(sp),a0
    9970:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    9974:	         |      movea.l 68(sp),a0
    9978:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    997c:	         |      movea.l 72(sp),a0
    9980:	         |      move.l 48(sp),(a0)

	return TRUE;
    9984:	         |      moveq #1,d0
}
    9986:	         \----> move.l (sp)+,d2
    9988:	                lea 56(sp),sp
    998c:	                rts

0000998e <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    998e:	clr.l 1b2a4 <personRegion+0x10>
	personRegion.sY = 0;
    9994:	clr.l 1b2a8 <personRegion+0x14>
	personRegion.di = -1;
    999a:	moveq #-1,d0
    999c:	move.l d0,1b2ac <personRegion+0x18>
	allScreenRegions = NULL;
    99a2:	clr.l 1b338 <allScreenRegions>

	return TRUE;
    99a8:	moveq #1,d0
}
    99aa:	rts

000099ac <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    99ac:	          subq.l #4,sp
    99ae:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    99b0:	          tst.l 12(sp)
    99b4:	      /-- bne.s 99bc <jumpPerson+0x10>
    99b6:	      |   tst.l 16(sp)
    99ba:	/-----|-- beq.s 9a30 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    99bc:	|     \-> move.l 20(sp),-(sp)
    99c0:	|         jsr 9652 <findPerson>
    99c6:	|         addq.l #4,sp
    99c8:	|         move.l d0,4(sp)
    if (!moveMe) return;
    99cc:	|  /----- beq.s 9a34 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    99ce:	|  |      movea.l 4(sp),a0
    99d2:	|  |      move.l 68(a0),d0
    99d6:	|  |  /-- beq.s 99ea <jumpPerson+0x3e>
    99d8:	|  |  |   movea.l 4(sp),a0
    99dc:	|  |  |   move.l 68(a0),d0
    99e0:	|  |  |   move.l d0,-(sp)
    99e2:	|  |  |   jsr 3644 <abortFunction>
    99e8:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    99ea:	|  |  \-> movea.l 4(sp),a0
    99ee:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    99f2:	|  |      movea.l 4(sp),a0
    99f6:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    99fa:	|  |      movea.l 4(sp),a0
    99fe:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    9a02:	|  |      move.l 16(sp),-(sp)
    9a06:	|  |      jsr 15ede <__floatsisf>
    9a0c:	|  |      addq.l #4,sp
    9a0e:	|  |      move.l d0,d2
    9a10:	|  |      move.l 12(sp),-(sp)
    9a14:	|  |      jsr 15ede <__floatsisf>
    9a1a:	|  |      addq.l #4,sp
    9a1c:	|  |      move.l d2,-(sp)
    9a1e:	|  |      move.l d0,-(sp)
    9a20:	|  |      move.l 12(sp),-(sp)
    9a24:	|  |      jsr 9d9a <moveAndScale>
    9a2a:	|  |      lea 12(sp),sp
    9a2e:	|  |  /-- bra.s 9a36 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    9a30:	\--|--|-> nop
    9a32:	   |  +-- bra.s 9a36 <jumpPerson+0x8a>
    if (!moveMe) return;
    9a34:	   \--|-> nop
}
    9a36:	      \-> move.l (sp)+,d2
    9a38:	          addq.l #4,sp
    9a3a:	          rts

00009a3c <killAllPeople>:


void killAllPeople () {
    9a3c:	          subq.l #8,sp
    9a3e:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    9a40:	   /----- bra.s 9aac <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    9a42:	/--|----> movea.l 1b290 <allPeople>,a0
    9a48:	|  |      move.l 68(a0),d0
    9a4c:	|  |  /-- beq.s 9a62 <killAllPeople+0x26>
    9a4e:	|  |  |   movea.l 1b290 <allPeople>,a0
    9a54:	|  |  |   move.l 68(a0),d0
    9a58:	|  |  |   move.l d0,-(sp)
    9a5a:	|  |  |   jsr 3644 <abortFunction>
    9a60:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    9a62:	|  |  \-> movea.l 1b290 <allPeople>,a0
    9a68:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    9a6c:	|  |      move.l 1b290 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    9a74:	|  |      movea.l 1b290 <allPeople>,a0
    9a7a:	|  |      move.l 36(a0),d0
    9a7e:	|  |      move.l d0,1b290 <allPeople>
		removeObjectType (killPeople -> thisType);
    9a84:	|  |      movea.l 8(sp),a0
    9a88:	|  |      move.l 114(a0),d0
    9a8c:	|  |      move.l d0,-(sp)
    9a8e:	|  |      jsr c8d4 <removeObjectType>
    9a94:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    9a96:	|  |      move.l 8(sp),4(sp)
    9a9c:	|  |      move.l 1b1d8 <SysBase>,d0
    9aa2:	|  |      movea.l d0,a6
    9aa4:	|  |      movea.l 4(sp),a1
    9aa8:	|  |      jsr -690(a6)
	while (allPeople) {
    9aac:	|  \----> move.l 1b290 <allPeople>,d0
    9ab2:	\-------- bne.s 9a42 <killAllPeople+0x6>
	}
}
    9ab4:	          nop
    9ab6:	          nop
    9ab8:	          movea.l (sp)+,a6
    9aba:	          addq.l #8,sp
    9abc:	          rts

00009abe <killMostPeople>:

void killMostPeople() {
    9abe:	          lea -12(sp),sp
    9ac2:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    9ac4:	          move.l #111248,12(sp)

    while (*lookyHere) {
    9acc:	   /----- bra.w 9b52 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    9ad0:	/--|----> movea.l 12(sp),a0
    9ad4:	|  |      movea.l (a0),a0
    9ad6:	|  |      move.l 118(a0),d0
    9ada:	|  |      moveq #32,d1
    9adc:	|  |      and.l d1,d0
    9ade:	|  |  /-- beq.s 9af0 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    9ae0:	|  |  |   movea.l 12(sp),a0
    9ae4:	|  |  |   move.l (a0),d0
    9ae6:	|  |  |   moveq #36,d1
    9ae8:	|  |  |   add.l d0,d1
    9aea:	|  |  |   move.l d1,12(sp)
    9aee:	|  +--|-- bra.s 9b52 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    9af0:	|  |  \-> movea.l 12(sp),a0
    9af4:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    9af8:	|  |      movea.l 8(sp),a0
    9afc:	|  |      move.l 36(a0),d0
    9b00:	|  |      movea.l 12(sp),a0
    9b04:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    9b06:	|  |      movea.l 8(sp),a0
    9b0a:	|  |      move.l 68(a0),d0
    9b0e:	|  |  /-- beq.s 9b22 <killMostPeople+0x64>
    9b10:	|  |  |   movea.l 8(sp),a0
    9b14:	|  |  |   move.l 68(a0),d0
    9b18:	|  |  |   move.l d0,-(sp)
    9b1a:	|  |  |   jsr 3644 <abortFunction>
    9b20:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    9b22:	|  |  \-> movea.l 8(sp),a0
    9b26:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    9b2a:	|  |      movea.l 8(sp),a0
    9b2e:	|  |      move.l 114(a0),d0
    9b32:	|  |      move.l d0,-(sp)
    9b34:	|  |      jsr c8d4 <removeObjectType>
    9b3a:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    9b3c:	|  |      move.l 8(sp),4(sp)
    9b42:	|  |      move.l 1b1d8 <SysBase>,d0
    9b48:	|  |      movea.l d0,a6
    9b4a:	|  |      movea.l 4(sp),a1
    9b4e:	|  |      jsr -690(a6)
    while (*lookyHere) {
    9b52:	|  \----> movea.l 12(sp),a0
    9b56:	|         move.l (a0),d0
    9b58:	\-------- bne.w 9ad0 <killMostPeople+0x12>
        }
    }
}
    9b5c:	          nop
    9b5e:	          nop
    9b60:	          movea.l (sp)+,a6
    9b62:	          lea 12(sp),sp
    9b66:	          rts

00009b68 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    9b68:	clr.l -(sp)
    9b6a:	move.l sp,d0
    9b6c:	addq.l #8,d0
    9b6e:	move.l d0,-(sp)
    9b70:	jsr 705c <setFrames>
    9b76:	addq.l #8,sp
}
    9b78:	nop
    9b7a:	rts

00009b7c <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    9b7c:	          lea -12(sp),sp
    9b80:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    9b82:	          tst.l 20(sp)
    9b86:	      /-- bne.s 9b94 <makeWalkingPerson+0x18>
    9b88:	      |   tst.l 24(sp)
    9b8c:	      +-- bne.s 9b94 <makeWalkingPerson+0x18>
    9b8e:	      |   clr.w d0
    9b90:	/-----|-- bra.w 9d2c <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    9b94:	|     \-> movea.l 1b344 <currentFloor>,a0
    9b9a:	|         move.l 8(a0),d0
    9b9e:	|     /-- bne.s 9ba6 <makeWalkingPerson+0x2a>
    9ba0:	|     |   clr.w d0
    9ba2:	+-----|-- bra.w 9d2c <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    9ba6:	|     \-> move.l 28(sp),-(sp)
    9baa:	|         jsr 9652 <findPerson>
    9bb0:	|         addq.l #4,sp
    9bb2:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    9bb6:	|     /-- bne.s 9bbe <makeWalkingPerson+0x42>
    9bb8:	|     |   clr.w d0
    9bba:	+-----|-- bra.w 9d2c <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    9bbe:	|     \-> movea.l 12(sp),a0
    9bc2:	|         move.l 68(a0),d0
    9bc6:	|     /-- beq.s 9bda <makeWalkingPerson+0x5e>
    9bc8:	|     |   movea.l 12(sp),a0
    9bcc:	|     |   move.l 68(a0),d0
    9bd0:	|     |   move.l d0,-(sp)
    9bd2:	|     |   jsr 3644 <abortFunction>
    9bd8:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    9bda:	|     \-> movea.l 12(sp),a0
    9bde:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    9be2:	|         movea.l 12(sp),a0
    9be6:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    9bec:	|         movea.l 12(sp),a0
    9bf0:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    9bf6:	|         movea.l 12(sp),a0
    9bfa:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    9c00:	|         movea.l 12(sp),a0
    9c04:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    9c0a:	|         move.l 24(sp),-(sp)
    9c0e:	|         move.l 24(sp),-(sp)
    9c12:	|         jsr 14f88 <inFloor>
    9c18:	|         addq.l #8,sp
    9c1a:	|         movea.l 12(sp),a0
    9c1e:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    9c22:	|         movea.l 12(sp),a0
    9c26:	|         move.l 60(a0),d0
    9c2a:	|         moveq #-1,d1
    9c2c:	|         cmp.l d0,d1
    9c2e:	|     /-- bne.s 9c5e <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    9c30:	|     |   movea.w #60,a0
    9c34:	|     |   adda.l 12(sp),a0
    9c38:	|     |   moveq #44,d1
    9c3a:	|     |   add.l 12(sp),d1
    9c3e:	|     |   moveq #40,d0
    9c40:	|     |   add.l 12(sp),d0
    9c44:	|     |   move.l a0,-(sp)
    9c46:	|     |   move.l d1,-(sp)
    9c48:	|     |   move.l d0,-(sp)
    9c4a:	|     |   jsr 974e <handleClosestPoint>
    9c50:	|     |   lea 12(sp),sp
    9c54:	|     |   tst.w d0
    9c56:	|     +-- bne.s 9c5e <makeWalkingPerson+0xe2>
    9c58:	|     |   clr.w d0
    9c5a:	+-----|-- bra.w 9d2c <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    9c5e:	|     \-> movea.l 12(sp),a0
    9c62:	|         move.l 4(a0),d0
    9c66:	|         move.l d0,-(sp)
    9c68:	|         jsr 15e76 <__fixsfsi>
    9c6e:	|         addq.l #4,sp
    9c70:	|         move.l d0,d2
    9c72:	|         movea.l 12(sp),a0
    9c76:	|         move.l (a0),d0
    9c78:	|         move.l d0,-(sp)
    9c7a:	|         jsr 15e76 <__fixsfsi>
    9c80:	|         addq.l #4,sp
    9c82:	|         move.l d2,-(sp)
    9c84:	|         move.l d0,-(sp)
    9c86:	|         jsr 14f88 <inFloor>
    9c8c:	|         addq.l #8,sp
    9c8e:	|         movea.l 12(sp),a0
    9c92:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    9c96:	|         movea.l 12(sp),a0
    9c9a:	|         move.l 56(a0),d0
    9c9e:	|         moveq #-1,d1
    9ca0:	|         cmp.l d0,d1
    9ca2:	|     /-- bne.s 9cf4 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    9ca4:	|     |   movea.l 12(sp),a0
    9ca8:	|     |   move.l (a0),d0
    9caa:	|     |   move.l d0,-(sp)
    9cac:	|     |   jsr 15e76 <__fixsfsi>
    9cb2:	|     |   addq.l #4,sp
    9cb4:	|     |   move.l d0,8(sp)
    9cb8:	|     |   movea.l 12(sp),a0
    9cbc:	|     |   move.l 4(a0),d0
    9cc0:	|     |   move.l d0,-(sp)
    9cc2:	|     |   jsr 15e76 <__fixsfsi>
    9cc8:	|     |   addq.l #4,sp
    9cca:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    9cce:	|     |   moveq #56,d0
    9cd0:	|     |   add.l 12(sp),d0
    9cd4:	|     |   move.l d0,-(sp)
    9cd6:	|     |   lea 8(sp),a0
    9cda:	|     |   move.l a0,-(sp)
    9cdc:	|     |   moveq #16,d0
    9cde:	|     |   add.l sp,d0
    9ce0:	|     |   move.l d0,-(sp)
    9ce2:	|     |   jsr 974e <handleClosestPoint>
    9ce8:	|     |   lea 12(sp),sp
    9cec:	|     |   tst.w d0
    9cee:	|     +-- bne.s 9cf4 <makeWalkingPerson+0x178>
    9cf0:	|     |   clr.w d0
    9cf2:	+-----|-- bra.s 9d2c <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    9cf4:	|     \-> move.l 12(sp),-(sp)
    9cf8:	|         jsr 89b4 <doBorderStuff>
    9cfe:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    9d00:	|         clr.l -(sp)
    9d02:	|         move.l 16(sp),-(sp)
    9d06:	|         jsr af14 <walkMe>
    9d0c:	|         addq.l #8,sp
    9d0e:	|         tst.w d0
    9d10:	|     /-- bne.s 9d1c <makeWalkingPerson+0x1a0>
    9d12:	|     |   movea.l 12(sp),a0
    9d16:	|     |   move.w 66(a0),d0
    9d1a:	|  /--|-- beq.s 9d2a <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    9d1c:	|  |  \-> movea.l 12(sp),a0
    9d20:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    9d26:	|  |      moveq #1,d0
    9d28:	+--|----- bra.s 9d2c <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    9d2a:	|  \----> clr.w d0
	}
}
    9d2c:	\-------> move.l (sp)+,d2
    9d2e:	          lea 12(sp),sp
    9d32:	          rts

00009d34 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    9d34:	       lea -16(sp),sp
    9d38:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    9d3a:	       moveq #12,d0
    9d3c:	       move.l d0,16(sp)
    9d40:	       clr.l 12(sp)
    9d44:	       move.l 1b1d8 <SysBase>,d0
    9d4a:	       movea.l d0,a6
    9d4c:	       move.l 16(sp),d0
    9d50:	       move.l 12(sp),d1
    9d54:	       jsr -684(a6)
    9d58:	       move.l d0,8(sp)
    9d5c:	       move.l 8(sp),d0
    9d60:	       move.l d0,4(sp)
    if(newAnim == 0) {
    9d64:	   /-- bne.s 9d78 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    9d66:	   |   pea 17a05 <PutChar+0x148f>
    9d6c:	   |   jsr 15c26 <KPrintF>
    9d72:	   |   addq.l #4,sp
        return NULL;    
    9d74:	   |   moveq #0,d0
    9d76:	/--|-- bra.s 9d92 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    9d78:	|  \-> movea.l 4(sp),a0
    9d7c:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    9d7e:	|      movea.l 4(sp),a0
    9d82:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    9d86:	|      movea.l 4(sp),a0
    9d8a:	|      clr.l 4(a0)
	return newAnim;
    9d8e:	|      move.l 4(sp),d0
}
    9d92:	\----> movea.l (sp)+,a6
    9d94:	       lea 16(sp),sp
    9d98:	       rts

00009d9a <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    9d9a:	    move.l d2,-(sp)
	me->x = x;
    9d9c:	    movea.l 8(sp),a0
    9da0:	    move.l 12(sp),(a0)
	me->y = y;
    9da4:	    movea.l 8(sp),a0
    9da8:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    9dae:	    movea.l 8(sp),a0
    9db2:	    clr.l 8(a0)
	me->oldy = 0;
    9db6:	    movea.l 8(sp),a0
    9dba:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    9dbe:	    movea.l 8(sp),a0
    9dc2:	    move.l 118(a0),d0
    9dc6:	    moveq #2,d1
    9dc8:	    and.l d1,d0
    9dca:	/-- bne.s 9e22 <moveAndScale+0x88>
    9dcc:	|   move.w 1ab6e <scaleDivide>,d0
    9dd2:	+-- beq.s 9e22 <moveAndScale+0x88>
    9dd4:	|   movea.l 8(sp),a0
    9dd8:	|   move.l 4(a0),d2
    9ddc:	|   move.w 1ab6c <scaleHorizon>,d0
    9de2:	|   movea.w d0,a0
    9de4:	|   move.l a0,-(sp)
    9de6:	|   jsr 15ede <__floatsisf>
    9dec:	|   addq.l #4,sp
    9dee:	|   move.l d0,-(sp)
    9df0:	|   move.l d2,-(sp)
    9df2:	|   jsr 161d2 <__subsf3>
    9df8:	|   addq.l #8,sp
    9dfa:	|   move.l d0,d2
    9dfc:	|   move.w 1ab6e <scaleDivide>,d0
    9e02:	|   movea.w d0,a0
    9e04:	|   move.l a0,-(sp)
    9e06:	|   jsr 15ede <__floatsisf>
    9e0c:	|   addq.l #4,sp
    9e0e:	|   move.l d0,-(sp)
    9e10:	|   move.l d2,-(sp)
    9e12:	|   jsr 15d8a <__divsf3>
    9e18:	|   addq.l #8,sp
    9e1a:	|   movea.l 8(sp),a0
    9e1e:	|   move.l d0,32(a0)
}
    9e22:	\-> nop
    9e24:	    move.l (sp)+,d2
    9e26:	    rts

00009e28 <removeOneCharacter>:

void removeOneCharacter (int i) {
    9e28:	          lea -16(sp),sp
    9e2c:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    9e2e:	          move.l 24(sp),-(sp)
    9e32:	          jsr 9652 <findPerson>
    9e38:	          addq.l #4,sp
    9e3a:	          move.l d0,8(sp)

    if (p) {
    9e3e:	/-------- beq.w 9f1e <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    9e42:	|         move.l 1b33c <overRegion>,d0
    9e48:	|         cmpi.l #111252,d0
    9e4e:	|     /-- bne.s 9e6c <removeOneCharacter+0x44>
    9e50:	|     |   movea.l 1b33c <overRegion>,a0
    9e56:	|     |   move.l 28(a0),d1
    9e5a:	|     |   movea.l 8(sp),a0
    9e5e:	|     |   move.l 114(a0),d0
    9e62:	|     |   cmp.l d1,d0
    9e64:	|     +-- bne.s 9e6c <removeOneCharacter+0x44>
            overRegion = NULL;
    9e66:	|     |   clr.l 1b33c <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    9e6c:	|     \-> movea.l 8(sp),a0
    9e70:	|         move.l 68(a0),d0
    9e74:	|     /-- beq.s 9e88 <removeOneCharacter+0x60>
    9e76:	|     |   movea.l 8(sp),a0
    9e7a:	|     |   move.l 68(a0),d0
    9e7e:	|     |   move.l d0,-(sp)
    9e80:	|     |   jsr 3644 <abortFunction>
    9e86:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    9e88:	|     \-> movea.l 8(sp),a0
    9e8c:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    9e90:	|         clr.l 12(sp)
    9e94:	|     /-- bra.s 9ebc <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    9e96:	|  /--|-> movea.l 8(sp),a0
    9e9a:	|  |  |   movea.l 80(a0),a0
    9e9e:	|  |  |   move.l (a0),d1
    9ea0:	|  |  |   move.l 12(sp),d0
    9ea4:	|  |  |   add.l d0,d0
    9ea6:	|  |  |   add.l d0,d0
    9ea8:	|  |  |   movea.l d1,a0
    9eaa:	|  |  |   adda.l d0,a0
    9eac:	|  |  |   move.l (a0),d0
    9eae:	|  |  |   move.l d0,-(sp)
    9eb0:	|  |  |   jsr 8930 <deleteAnim>
    9eb6:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    9eb8:	|  |  |   addq.l #1,12(sp)
    9ebc:	|  |  \-> moveq #2,d0
    9ebe:	|  |      cmp.l 12(sp),d0
    9ec2:	|  \----- bge.s 9e96 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    9ec4:	|         move.l #111248,16(sp)
    9ecc:	|     /-- bra.s 9edc <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    9ece:	|  /--|-> movea.l 16(sp),a0
    9ed2:	|  |  |   move.l (a0),d0
    9ed4:	|  |  |   moveq #36,d1
    9ed6:	|  |  |   add.l d0,d1
    9ed8:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    9edc:	|  |  \-> movea.l 16(sp),a0
    9ee0:	|  |      move.l (a0),d0
    9ee2:	|  |      cmp.l 8(sp),d0
    9ee6:	|  \----- bne.s 9ece <removeOneCharacter+0xa6>

        *killPeople = p->next;
    9ee8:	|         movea.l 8(sp),a0
    9eec:	|         move.l 36(a0),d0
    9ef0:	|         movea.l 16(sp),a0
    9ef4:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    9ef6:	|         movea.l 8(sp),a0
    9efa:	|         move.l 114(a0),d0
    9efe:	|         move.l d0,-(sp)
    9f00:	|         jsr c8d4 <removeObjectType>
    9f06:	|         addq.l #4,sp
        FreeVec(p);
    9f08:	|         move.l 8(sp),4(sp)
    9f0e:	|         move.l 1b1d8 <SysBase>,d0
    9f14:	|         movea.l d0,a6
    9f16:	|         movea.l 4(sp),a1
    9f1a:	|         jsr -690(a6)
    }
}
    9f1e:	\-------> nop
    9f20:	          movea.l (sp)+,a6
    9f22:	          lea 16(sp),sp
    9f26:	          rts

00009f28 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    9f28:	       subq.l #8,sp
    9f2a:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    9f2c:	       movea.l 16(sp),a0
    9f30:	       movea.l 80(a0),a0
    9f34:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    9f3a:	       movea.l 16(sp),a0
    9f3e:	       move.l 92(a0),d2
    9f42:	       move.l 4(sp),-(sp)
    9f46:	       pea b4 <_start+0xb4>
    9f4a:	       jsr 164de <__divsi3>
    9f50:	       addq.l #8,sp
    9f52:	       add.l d2,d0
    9f54:	       move.l d0,d1
    9f56:	       addi.l #180,d1
    9f5c:	       movea.l 16(sp),a0
    9f60:	       move.l 100(a0),d0
    9f64:	       move.l d1,d2
    9f66:	       add.l d0,d2
    9f68:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    9f6c:	   /-- bra.s 9f76 <rethinkAngle+0x4e>
    9f6e:	/--|-> addi.l #-360,8(sp)
    9f76:	|  \-> cmpi.l #359,8(sp)
    9f7e:	\----- bgt.s 9f6e <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    9f80:	       move.l 4(sp),-(sp)
    9f84:	       move.l 12(sp),-(sp)
    9f88:	       jsr 16460 <__mulsi3>
    9f8e:	       addq.l #8,sp
    9f90:	       pea 168 <decodeFilename+0x50>
    9f94:	       move.l d0,-(sp)
    9f96:	       jsr 164de <__divsi3>
    9f9c:	       addq.l #8,sp
    9f9e:	       movea.l 16(sp),a0
    9fa2:	       move.l d0,106(a0)
}
    9fa6:	       nop
    9fa8:	       move.l (sp)+,d2
    9faa:	       addq.l #8,sp
    9fac:	       rts

00009fae <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    9fae:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    9fb0:	          movea.l 8(sp),a0
    9fb4:	          move.l 8(a0),d0
    9fb8:	          move.l 12(sp),-(sp)
    9fbc:	          move.l d0,-(sp)
    9fbe:	          jsr 8d0 <put2bytes>
    9fc4:	          addq.l #8,sp
	if (p -> numFrames) {
    9fc6:	          movea.l 8(sp),a0
    9fca:	          move.l 8(a0),d0
    9fce:	/-------- beq.w a072 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    9fd2:	|         movea.l 8(sp),a0
    9fd6:	|         movea.l (a0),a0
    9fd8:	|         move.l (a0),d0
    9fda:	|         move.l 12(sp),-(sp)
    9fde:	|         move.l d0,-(sp)
    9fe0:	|         jsr 958 <put4bytes>
    9fe6:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    9fe8:	|         clr.l (sp)
    9fea:	|     /-- bra.s a064 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    9fec:	|  /--|-> movea.l 8(sp),a0
    9ff0:	|  |  |   movea.l 4(a0),a0
    9ff4:	|  |  |   move.l (sp),d1
    9ff6:	|  |  |   move.l d1,d0
    9ff8:	|  |  |   add.l d0,d0
    9ffa:	|  |  |   add.l d1,d0
    9ffc:	|  |  |   add.l d0,d0
    9ffe:	|  |  |   add.l d0,d0
    a000:	|  |  |   adda.l d0,a0
    a002:	|  |  |   move.l (a0),d0
    a004:	|  |  |   move.l 12(sp),-(sp)
    a008:	|  |  |   move.l d0,-(sp)
    a00a:	|  |  |   jsr 958 <put4bytes>
    a010:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    a012:	|  |  |   movea.l 8(sp),a0
    a016:	|  |  |   movea.l 4(a0),a0
    a01a:	|  |  |   move.l (sp),d1
    a01c:	|  |  |   move.l d1,d0
    a01e:	|  |  |   add.l d0,d0
    a020:	|  |  |   add.l d1,d0
    a022:	|  |  |   add.l d0,d0
    a024:	|  |  |   add.l d0,d0
    a026:	|  |  |   adda.l d0,a0
    a028:	|  |  |   move.l 4(a0),d0
    a02c:	|  |  |   move.l 12(sp),-(sp)
    a030:	|  |  |   move.l d0,-(sp)
    a032:	|  |  |   jsr 958 <put4bytes>
    a038:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    a03a:	|  |  |   movea.l 8(sp),a0
    a03e:	|  |  |   movea.l 4(a0),a0
    a042:	|  |  |   move.l (sp),d1
    a044:	|  |  |   move.l d1,d0
    a046:	|  |  |   add.l d0,d0
    a048:	|  |  |   add.l d1,d0
    a04a:	|  |  |   add.l d0,d0
    a04c:	|  |  |   add.l d0,d0
    a04e:	|  |  |   adda.l d0,a0
    a050:	|  |  |   move.l 8(a0),d0
    a054:	|  |  |   move.l 12(sp),-(sp)
    a058:	|  |  |   move.l d0,-(sp)
    a05a:	|  |  |   jsr 958 <put4bytes>
    a060:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    a062:	|  |  |   addq.l #1,(sp)
    a064:	|  |  \-> movea.l 8(sp),a0
    a068:	|  |      move.l 8(a0),d0
    a06c:	|  |      cmp.l (sp),d0
    a06e:	|  \----- bgt.w 9fec <saveAnim+0x3e>
		}
	}
	return TRUE;
    a072:	\-------> moveq #1,d0
}
    a074:	          addq.l #4,sp
    a076:	          rts

0000a078 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    a078:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    a07a:	             movea.l 8(sp),a0
    a07e:	             move.l 4(a0),d0
    a082:	             move.l 12(sp),-(sp)
    a086:	             move.l d0,-(sp)
    a088:	             jsr 8d0 <put2bytes>
    a08e:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    a090:	             clr.l (sp)
    a092:	   /-------- bra.s a0be <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    a094:	/--|-------> movea.l 8(sp),a0
    a098:	|  |         move.l (a0),d1
    a09a:	|  |         move.l (sp),d0
    a09c:	|  |         add.l d0,d0
    a09e:	|  |         add.l d0,d0
    a0a0:	|  |         movea.l d1,a0
    a0a2:	|  |         adda.l d0,a0
    a0a4:	|  |         move.l (a0),d0
    a0a6:	|  |         move.l 12(sp),-(sp)
    a0aa:	|  |         move.l d0,-(sp)
    a0ac:	|  |         jsr 9fae <saveAnim>
    a0b2:	|  |         addq.l #8,sp
    a0b4:	|  |         tst.w d0
    a0b6:	|  |     /-- bne.s a0bc <saveCostume+0x44>
    a0b8:	|  |     |   clr.w d0
    a0ba:	|  |  /--|-- bra.s a0d2 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    a0bc:	|  |  |  \-> addq.l #1,(sp)
    a0be:	|  \--|----> movea.l 8(sp),a0
    a0c2:	|     |      move.l 4(a0),d1
    a0c6:	|     |      move.l d1,d0
    a0c8:	|     |      add.l d0,d0
    a0ca:	|     |      add.l d1,d0
    a0cc:	|     |      cmp.l (sp),d0
    a0ce:	\-----|----- bgt.s a094 <saveCostume+0x1c>
	}

	return TRUE;
    a0d0:	      |      moveq #1,d0
}
    a0d2:	      \----> addq.l #4,sp
    a0d4:	             rts

0000a0d6 <savePeople>:

BOOL savePeople (BPTR fp) {
    a0d6:	             lea -144(sp),sp
    a0da:	             move.l a6,-(sp)
    a0dc:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    a0de:	             move.l 1b290 <allPeople>,148(sp)
	int countPeople = 0, a;
    a0e6:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    a0ea:	             move.w 1ab6c <scaleHorizon>,d0
    a0f0:	             movea.w d0,a0
    a0f2:	             move.l 156(sp),-(sp)
    a0f6:	             move.l a0,-(sp)
    a0f8:	             jsr a9c <putSigned>
    a0fe:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    a100:	             move.w 1ab6e <scaleDivide>,d0
    a106:	             movea.w d0,a0
    a108:	             move.l 156(sp),-(sp)
    a10c:	             move.l a0,-(sp)
    a10e:	             jsr a9c <putSigned>
    a114:	             addq.l #8,sp

	while (me) {
    a116:	         /-- bra.s a126 <savePeople+0x50>
		countPeople ++;
    a118:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    a11c:	      |  |   movea.l 148(sp),a0
    a120:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    a126:	      |  \-> tst.l 148(sp)
    a12a:	      \----- bne.s a118 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    a12c:	             move.l 156(sp),-(sp)
    a130:	             move.l 148(sp),-(sp)
    a134:	             jsr 8d0 <put2bytes>
    a13a:	             addq.l #8,sp

	me = allPeople;
    a13c:	             move.l 1b290 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    a144:	             clr.l 140(sp)
    a148:	   /-------- bra.w a5a0 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    a14c:	/--|-------> movea.l 148(sp),a0
    a150:	|  |         move.l (a0),d0
    a152:	|  |         move.l 156(sp),-(sp)
    a156:	|  |         move.l d0,-(sp)
    a158:	|  |         jsr a46 <putFloat>
    a15e:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    a160:	|  |         movea.l 148(sp),a0
    a164:	|  |         move.l 4(a0),d0
    a168:	|  |         move.l 156(sp),-(sp)
    a16c:	|  |         move.l d0,-(sp)
    a16e:	|  |         jsr a46 <putFloat>
    a174:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    a176:	|  |         movea.l 148(sp),a0
    a17a:	|  |         move.l 80(a0),d0
    a17e:	|  |         move.l 156(sp),-(sp)
    a182:	|  |         move.l d0,-(sp)
    a184:	|  |         jsr a078 <saveCostume>
    a18a:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    a18c:	|  |         movea.l 148(sp),a0
    a190:	|  |         move.l 72(a0),d0
    a194:	|  |         move.l 156(sp),-(sp)
    a198:	|  |         move.l d0,-(sp)
    a19a:	|  |         jsr 9fae <saveAnim>
    a1a0:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    a1a2:	|  |         move.l 156(sp),136(sp)
    a1a8:	|  |         movea.l 148(sp),a0
    a1ac:	|  |         move.l 72(a0),d1
    a1b0:	|  |         movea.l 148(sp),a0
    a1b4:	|  |         move.l 76(a0),d0
    a1b8:	|  |         cmp.l d1,d0
    a1ba:	|  |         seq d0
    a1bc:	|  |         neg.b d0
    a1be:	|  |         move.b d0,d0
    a1c0:	|  |         andi.l #255,d0
    a1c6:	|  |         move.l d0,132(sp)
    a1ca:	|  |         move.l 1b1e0 <DOSBase>,d0
    a1d0:	|  |         movea.l d0,a6
    a1d2:	|  |         move.l 136(sp),d1
    a1d6:	|  |         move.l 132(sp),d2
    a1da:	|  |         jsr -312(a6)
    a1de:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    a1e2:	|  |         movea.l 148(sp),a0
    a1e6:	|  |         move.l 32(a0),d0
    a1ea:	|  |         move.l 156(sp),-(sp)
    a1ee:	|  |         move.l d0,-(sp)
    a1f0:	|  |         jsr a46 <putFloat>
    a1f6:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    a1f8:	|  |         movea.l 148(sp),a0
    a1fc:	|  |         move.l 118(a0),d0
    a200:	|  |         move.l 156(sp),-(sp)
    a204:	|  |         move.l d0,-(sp)
    a206:	|  |         jsr 8d0 <put2bytes>
    a20c:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    a20e:	|  |         movea.l 148(sp),a0
    a212:	|  |         move.l 20(a0),d0
    a216:	|  |         move.l 156(sp),-(sp)
    a21a:	|  |         move.l d0,-(sp)
    a21c:	|  |         jsr 8d0 <put2bytes>
    a222:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    a224:	|  |         movea.l 148(sp),a0
    a228:	|  |         move.l 40(a0),d0
    a22c:	|  |         move.l 156(sp),-(sp)
    a230:	|  |         move.l d0,-(sp)
    a232:	|  |         jsr 8d0 <put2bytes>
    a238:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    a23a:	|  |         movea.l 148(sp),a0
    a23e:	|  |         move.l 44(a0),d0
    a242:	|  |         move.l 156(sp),-(sp)
    a246:	|  |         move.l d0,-(sp)
    a248:	|  |         jsr 8d0 <put2bytes>
    a24e:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    a250:	|  |         movea.l 148(sp),a0
    a254:	|  |         move.l 48(a0),d0
    a258:	|  |         move.l 156(sp),-(sp)
    a25c:	|  |         move.l d0,-(sp)
    a25e:	|  |         jsr 8d0 <put2bytes>
    a264:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    a266:	|  |         movea.l 148(sp),a0
    a26a:	|  |         move.l 52(a0),d0
    a26e:	|  |         move.l 156(sp),-(sp)
    a272:	|  |         move.l d0,-(sp)
    a274:	|  |         jsr 8d0 <put2bytes>
    a27a:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    a27c:	|  |         movea.l 148(sp),a0
    a280:	|  |         move.l 84(a0),d0
    a284:	|  |         move.l 156(sp),-(sp)
    a288:	|  |         move.l d0,-(sp)
    a28a:	|  |         jsr 8d0 <put2bytes>
    a290:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    a292:	|  |         movea.l 148(sp),a0
    a296:	|  |         move.l 88(a0),d0
    a29a:	|  |         move.l 156(sp),-(sp)
    a29e:	|  |         move.l d0,-(sp)
    a2a0:	|  |         jsr 8d0 <put2bytes>
    a2a6:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    a2a8:	|  |         movea.l 148(sp),a0
    a2ac:	|  |         move.l 28(a0),d0
    a2b0:	|  |         move.l 156(sp),-(sp)
    a2b4:	|  |         move.l d0,-(sp)
    a2b6:	|  |         jsr 8d0 <put2bytes>
    a2bc:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    a2be:	|  |         movea.l 148(sp),a0
    a2c2:	|  |         move.l 122(a0),d0
    a2c6:	|  |         move.l 156(sp),-(sp)
    a2ca:	|  |         move.l d0,-(sp)
    a2cc:	|  |         jsr 8d0 <put2bytes>
    a2d2:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    a2d4:	|  |         movea.l 148(sp),a0
    a2d8:	|  |         move.l 24(a0),d0
    a2dc:	|  |         move.l d0,d0
    a2de:	|  |         movea.w d0,a0
    a2e0:	|  |         move.l 156(sp),-(sp)
    a2e4:	|  |         move.l a0,-(sp)
    a2e6:	|  |         jsr a9c <putSigned>
    a2ec:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    a2ee:	|  |         move.l 156(sp),124(sp)
    a2f4:	|  |         movea.l 148(sp),a0
    a2f8:	|  |         move.w 104(a0),d0
    a2fc:	|  |         movea.w d0,a0
    a2fe:	|  |         move.l a0,120(sp)
    a302:	|  |         move.l 1b1e0 <DOSBase>,d0
    a308:	|  |         movea.l d0,a6
    a30a:	|  |         move.l 124(sp),d1
    a30e:	|  |         move.l 120(sp),d2
    a312:	|  |         jsr -312(a6)
    a316:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    a31a:	|  |         move.l 156(sp),112(sp)
    a320:	|  |         movea.l 148(sp),a0
    a324:	|  |         move.w 64(a0),d0
    a328:	|  |         movea.w d0,a0
    a32a:	|  |         move.l a0,108(sp)
    a32e:	|  |         move.l 1b1e0 <DOSBase>,d0
    a334:	|  |         movea.l d0,a6
    a336:	|  |         move.l 112(sp),d1
    a33a:	|  |         move.l 108(sp),d2
    a33e:	|  |         jsr -312(a6)
    a342:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    a346:	|  |         move.l 156(sp),100(sp)
    a34c:	|  |         movea.l 148(sp),a0
    a350:	|  |         move.w 66(a0),d0
    a354:	|  |         movea.w d0,a0
    a356:	|  |         move.l a0,96(sp)
    a35a:	|  |         move.l 1b1e0 <DOSBase>,d0
    a360:	|  |         movea.l d0,a6
    a362:	|  |         move.l 100(sp),d1
    a366:	|  |         move.l 96(sp),d2
    a36a:	|  |         jsr -312(a6)
    a36e:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    a372:	|  |         movea.l 148(sp),a0
    a376:	|  |         move.l 68(a0),d0
    a37a:	|  |  /----- beq.s a3b8 <savePeople+0x2e2>
			FPutC (fp, 1);
    a37c:	|  |  |      move.l 156(sp),76(sp)
    a382:	|  |  |      moveq #1,d0
    a384:	|  |  |      move.l d0,72(sp)
    a388:	|  |  |      move.l 1b1e0 <DOSBase>,d0
    a38e:	|  |  |      movea.l d0,a6
    a390:	|  |  |      move.l 76(sp),d1
    a394:	|  |  |      move.l 72(sp),d2
    a398:	|  |  |      jsr -312(a6)
    a39c:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    a3a0:	|  |  |      movea.l 148(sp),a0
    a3a4:	|  |  |      move.l 68(a0),d0
    a3a8:	|  |  |      move.l 156(sp),-(sp)
    a3ac:	|  |  |      move.l d0,-(sp)
    a3ae:	|  |  |      jsr b54e <saveFunction>
    a3b4:	|  |  |      addq.l #8,sp
    a3b6:	|  |  |  /-- bra.s a3dc <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    a3b8:	|  |  \--|-> move.l 156(sp),88(sp)
    a3be:	|  |     |   moveq #1,d0
    a3c0:	|  |     |   move.l d0,84(sp)
    a3c4:	|  |     |   move.l 1b1e0 <DOSBase>,d0
    a3ca:	|  |     |   movea.l d0,a6
    a3cc:	|  |     |   move.l 88(sp),d1
    a3d0:	|  |     |   move.l 84(sp),d2
    a3d4:	|  |     |   jsr -312(a6)
    a3d8:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    a3dc:	|  |     \-> movea.l 148(sp),a0
    a3e0:	|  |         move.l 106(a0),d0
    a3e4:	|  |         move.l 156(sp),-(sp)
    a3e8:	|  |         move.l d0,-(sp)
    a3ea:	|  |         jsr 8d0 <put2bytes>
    a3f0:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    a3f2:	|  |         movea.l 148(sp),a0
    a3f6:	|  |         move.l 92(a0),d0
    a3fa:	|  |         move.l 156(sp),-(sp)
    a3fe:	|  |         move.l d0,-(sp)
    a400:	|  |         jsr 8d0 <put2bytes>
    a406:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    a408:	|  |         movea.l 148(sp),a0
    a40c:	|  |         move.l 100(a0),d0
    a410:	|  |         move.l 156(sp),-(sp)
    a414:	|  |         move.l d0,-(sp)
    a416:	|  |         jsr 8d0 <put2bytes>
    a41c:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    a41e:	|  |         movea.l 148(sp),a0
    a422:	|  |         move.l 96(a0),d0
    a426:	|  |         move.l 156(sp),-(sp)
    a42a:	|  |         move.l d0,-(sp)
    a42c:	|  |         jsr 8d0 <put2bytes>
    a432:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    a434:	|  |         movea.l 148(sp),a0
    a438:	|  |         move.l 110(a0),d0
    a43c:	|  |         move.l d0,d0
    a43e:	|  |         movea.w d0,a0
    a440:	|  |         move.l 156(sp),-(sp)
    a444:	|  |         move.l a0,-(sp)
    a446:	|  |         jsr a9c <putSigned>
    a44c:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    a44e:	|  |         movea.l 148(sp),a0
    a452:	|  |         move.l 56(a0),d0
    a456:	|  |         move.l d0,d0
    a458:	|  |         movea.w d0,a0
    a45a:	|  |         move.l 156(sp),-(sp)
    a45e:	|  |         move.l a0,-(sp)
    a460:	|  |         jsr a9c <putSigned>
    a466:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    a468:	|  |         movea.l 148(sp),a0
    a46c:	|  |         move.l 60(a0),d0
    a470:	|  |         move.l d0,d0
    a472:	|  |         movea.w d0,a0
    a474:	|  |         move.l 156(sp),-(sp)
    a478:	|  |         move.l a0,-(sp)
    a47a:	|  |         jsr a9c <putSigned>
    a480:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    a482:	|  |         move.l 156(sp),64(sp)
    a488:	|  |         movea.l 148(sp),a0
    a48c:	|  |         move.b 126(a0),d0
    a490:	|  |         move.b d0,d0
    a492:	|  |         andi.l #255,d0
    a498:	|  |         move.l d0,60(sp)
    a49c:	|  |         move.l 1b1e0 <DOSBase>,d0
    a4a2:	|  |         movea.l d0,a6
    a4a4:	|  |         move.l 64(sp),d1
    a4a8:	|  |         move.l 60(sp),d2
    a4ac:	|  |         jsr -312(a6)
    a4b0:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    a4b4:	|  |         move.l 156(sp),52(sp)
    a4ba:	|  |         movea.l 148(sp),a0
    a4be:	|  |         move.b 127(a0),d0
    a4c2:	|  |         move.b d0,d0
    a4c4:	|  |         andi.l #255,d0
    a4ca:	|  |         move.l d0,48(sp)
    a4ce:	|  |         move.l 1b1e0 <DOSBase>,d0
    a4d4:	|  |         movea.l d0,a6
    a4d6:	|  |         move.l 52(sp),d1
    a4da:	|  |         move.l 48(sp),d2
    a4de:	|  |         jsr -312(a6)
    a4e2:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    a4e6:	|  |         move.l 156(sp),40(sp)
    a4ec:	|  |         movea.l 148(sp),a0
    a4f0:	|  |         move.b 128(a0),d0
    a4f4:	|  |         move.b d0,d0
    a4f6:	|  |         andi.l #255,d0
    a4fc:	|  |         move.l d0,36(sp)
    a500:	|  |         move.l 1b1e0 <DOSBase>,d0
    a506:	|  |         movea.l d0,a6
    a508:	|  |         move.l 40(sp),d1
    a50c:	|  |         move.l 36(sp),d2
    a510:	|  |         jsr -312(a6)
    a514:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    a518:	|  |         move.l 156(sp),28(sp)
    a51e:	|  |         movea.l 148(sp),a0
    a522:	|  |         move.b 129(a0),d0
    a526:	|  |         move.b d0,d0
    a528:	|  |         andi.l #255,d0
    a52e:	|  |         move.l d0,24(sp)
    a532:	|  |         move.l 1b1e0 <DOSBase>,d0
    a538:	|  |         movea.l d0,a6
    a53a:	|  |         move.l 28(sp),d1
    a53e:	|  |         move.l 24(sp),d2
    a542:	|  |         jsr -312(a6)
    a546:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    a54a:	|  |         move.l 156(sp),16(sp)
    a550:	|  |         movea.l 148(sp),a0
    a554:	|  |         move.b 130(a0),d0
    a558:	|  |         move.b d0,d0
    a55a:	|  |         andi.l #255,d0
    a560:	|  |         move.l d0,12(sp)
    a564:	|  |         move.l 1b1e0 <DOSBase>,d0
    a56a:	|  |         movea.l d0,a6
    a56c:	|  |         move.l 16(sp),d1
    a570:	|  |         move.l 12(sp),d2
    a574:	|  |         jsr -312(a6)
    a578:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    a57c:	|  |         movea.l 148(sp),a0
    a580:	|  |         move.l 114(a0),d0
    a584:	|  |         move.l 156(sp),-(sp)
    a588:	|  |         move.l d0,-(sp)
    a58a:	|  |         jsr c974 <saveObjectRef>
    a590:	|  |         addq.l #8,sp

		me = me -> next;
    a592:	|  |         movea.l 148(sp),a0
    a596:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    a59c:	|  |         addq.l #1,140(sp)
    a5a0:	|  \-------> movea.l 140(sp),a0
    a5a4:	|            cmpa.l 144(sp),a0
    a5a8:	\----------- blt.w a14c <savePeople+0x76>
	}
	return TRUE;
    a5ac:	             moveq #1,d0
}
    a5ae:	             move.l (sp)+,d2
    a5b0:	             movea.l (sp)+,a6
    a5b2:	             lea 144(sp),sp
    a5b6:	             rts

0000a5b8 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    a5b8:	movea.l 4(sp),a0
    a5bc:	move.l 8(sp),(a0)
}
    a5c0:	nop
    a5c2:	rts

0000a5c4 <setDrawMode>:


void setDrawMode (int h, int ob) {
    a5c4:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    a5c6:	       move.l 12(sp),-(sp)
    a5ca:	       jsr 9652 <findPerson>
    a5d0:	       addq.l #4,sp
    a5d2:	       move.l d0,(sp)
	if (! moveMe) return;
    a5d4:	/----- beq.s a5e8 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    a5d6:	|      move.l 8(sp),-(sp)
    a5da:	|      move.l 4(sp),-(sp)
    a5de:	|      jsr a5ee <setMyDrawMode>
    a5e4:	|      addq.l #8,sp
    a5e6:	|  /-- bra.s a5ea <setDrawMode+0x26>
	if (! moveMe) return;
    a5e8:	\--|-> nop
}
    a5ea:	   \-> addq.l #4,sp
    a5ec:	       rts

0000a5ee <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    a5ee:	       moveq #19,d0
    a5f0:	       cmp.l 8(sp),d0
    a5f4:	/----- bcs.w aacc <setMyDrawMode+0x4de>
    a5f8:	|      move.l 8(sp),d0
    a5fc:	|      add.l d0,d0
    a5fe:	|      movea.l d0,a0
    a600:	|      adda.l #42508,a0
    a606:	|      move.w (a0),d0
    a608:	|      jmp (a60c <setMyDrawMode+0x1e>,pc,d0.w)
    a60c:	|      .short 0x04c0
    a60e:	|      ori.l #6684712,-(a4)
    a614:	|      btst d0,-(a0)
    a616:	|      bchg d0,(a6)+
    a618:	|      bclr d0,(a4)+
    a61a:	|      bset d0,(a2)+
    a61c:	|      andi.b #84,(a6)
    a620:	|      andi.l #55575312,(a2)
    a626:	|      .short 0x02d0
    a628:	|      bclr d1,(a0)
    a62a:	|      .short 0x044a
    a62c:	|      .short 0x040c
    a62e:	|      movep.l d1,1158(a6)
    a632:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a634:	|      movea.l 4(sp),a0
    a638:	|      clr.b 128(a0)
    a63c:	|      movea.l 4(sp),a0
    a640:	|      move.b 128(a0),d0
    a644:	|      movea.l 4(sp),a0
    a648:	|      move.b d0,127(a0)
    a64c:	|      movea.l 4(sp),a0
    a650:	|      move.b 127(a0),d0
    a654:	|      movea.l 4(sp),a0
    a658:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    a65c:	|      movea.l 4(sp),a0
    a660:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    a664:	|      movea.l 4(sp),a0
    a668:	|      move.b #64,130(a0)
			break;
    a66e:	|  /-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a672:	|  |   movea.l 4(sp),a0
    a676:	|  |   clr.b 128(a0)
    a67a:	|  |   movea.l 4(sp),a0
    a67e:	|  |   move.b 128(a0),d0
    a682:	|  |   movea.l 4(sp),a0
    a686:	|  |   move.b d0,127(a0)
    a68a:	|  |   movea.l 4(sp),a0
    a68e:	|  |   move.b 127(a0),d0
    a692:	|  |   movea.l 4(sp),a0
    a696:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a69a:	|  |   movea.l 4(sp),a0
    a69e:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    a6a2:	|  |   movea.l 4(sp),a0
    a6a6:	|  |   move.b #-128,130(a0)
			break;
    a6ac:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a6b0:	|  |   movea.l 4(sp),a0
    a6b4:	|  |   clr.b 128(a0)
    a6b8:	|  |   movea.l 4(sp),a0
    a6bc:	|  |   move.b 128(a0),d0
    a6c0:	|  |   movea.l 4(sp),a0
    a6c4:	|  |   move.b d0,127(a0)
    a6c8:	|  |   movea.l 4(sp),a0
    a6cc:	|  |   move.b 127(a0),d0
    a6d0:	|  |   movea.l 4(sp),a0
    a6d4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a6d8:	|  |   movea.l 4(sp),a0
    a6dc:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    a6e0:	|  |   movea.l 4(sp),a0
    a6e4:	|  |   move.b #-64,130(a0)
			break;
    a6ea:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a6ee:	|  |   movea.l 4(sp),a0
    a6f2:	|  |   clr.b 128(a0)
    a6f6:	|  |   movea.l 4(sp),a0
    a6fa:	|  |   move.b 128(a0),d0
    a6fe:	|  |   movea.l 4(sp),a0
    a702:	|  |   move.b d0,127(a0)
    a706:	|  |   movea.l 4(sp),a0
    a70a:	|  |   move.b 127(a0),d0
    a70e:	|  |   movea.l 4(sp),a0
    a712:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    a716:	|  |   movea.l 4(sp),a0
    a71a:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    a71e:	|  |   movea.l 4(sp),a0
    a722:	|  |   move.b #-2,130(a0)
			break;
    a728:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a72c:	|  |   movea.l 4(sp),a0
    a730:	|  |   clr.b 128(a0)
    a734:	|  |   movea.l 4(sp),a0
    a738:	|  |   move.b 128(a0),d0
    a73c:	|  |   movea.l 4(sp),a0
    a740:	|  |   move.b d0,127(a0)
    a744:	|  |   movea.l 4(sp),a0
    a748:	|  |   move.b 127(a0),d0
    a74c:	|  |   movea.l 4(sp),a0
    a750:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    a754:	|  |   movea.l 4(sp),a0
    a758:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    a75e:	|  |   movea.l 4(sp),a0
    a762:	|  |   clr.b 130(a0)
			break;
    a766:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a76a:	|  |   movea.l 4(sp),a0
    a76e:	|  |   clr.b 128(a0)
    a772:	|  |   movea.l 4(sp),a0
    a776:	|  |   move.b 128(a0),d0
    a77a:	|  |   movea.l 4(sp),a0
    a77e:	|  |   move.b d0,127(a0)
    a782:	|  |   movea.l 4(sp),a0
    a786:	|  |   move.b 127(a0),d0
    a78a:	|  |   movea.l 4(sp),a0
    a78e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    a792:	|  |   movea.l 4(sp),a0
    a796:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    a79c:	|  |   movea.l 4(sp),a0
    a7a0:	|  |   clr.b 130(a0)
			break;
    a7a4:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a7a8:	|  |   movea.l 4(sp),a0
    a7ac:	|  |   clr.b 128(a0)
    a7b0:	|  |   movea.l 4(sp),a0
    a7b4:	|  |   move.b 128(a0),d0
    a7b8:	|  |   movea.l 4(sp),a0
    a7bc:	|  |   move.b d0,127(a0)
    a7c0:	|  |   movea.l 4(sp),a0
    a7c4:	|  |   move.b 127(a0),d0
    a7c8:	|  |   movea.l 4(sp),a0
    a7cc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    a7d0:	|  |   movea.l 4(sp),a0
    a7d4:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    a7da:	|  |   movea.l 4(sp),a0
    a7de:	|  |   clr.b 130(a0)
			break;
    a7e2:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a7e6:	|  |   movea.l 4(sp),a0
    a7ea:	|  |   clr.b 128(a0)
    a7ee:	|  |   movea.l 4(sp),a0
    a7f2:	|  |   move.b 128(a0),d0
    a7f6:	|  |   movea.l 4(sp),a0
    a7fa:	|  |   move.b d0,127(a0)
    a7fe:	|  |   movea.l 4(sp),a0
    a802:	|  |   move.b 127(a0),d0
    a806:	|  |   movea.l 4(sp),a0
    a80a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a80e:	|  |   movea.l 4(sp),a0
    a812:	|  |   st 129(a0)
			moveMe->transparency = 0;
    a816:	|  |   movea.l 4(sp),a0
    a81a:	|  |   clr.b 130(a0)
			break;
    a81e:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a822:	|  |   movea.l 4(sp),a0
    a826:	|  |   clr.b 128(a0)
    a82a:	|  |   movea.l 4(sp),a0
    a82e:	|  |   move.b 128(a0),d0
    a832:	|  |   movea.l 4(sp),a0
    a836:	|  |   move.b d0,127(a0)
    a83a:	|  |   movea.l 4(sp),a0
    a83e:	|  |   move.b 127(a0),d0
    a842:	|  |   movea.l 4(sp),a0
    a846:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a84a:	|  |   movea.l 4(sp),a0
    a84e:	|  |   st 129(a0)
			moveMe->transparency = 64;
    a852:	|  |   movea.l 4(sp),a0
    a856:	|  |   move.b #64,130(a0)
			break;
    a85c:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a860:	|  |   movea.l 4(sp),a0
    a864:	|  |   clr.b 128(a0)
    a868:	|  |   movea.l 4(sp),a0
    a86c:	|  |   move.b 128(a0),d0
    a870:	|  |   movea.l 4(sp),a0
    a874:	|  |   move.b d0,127(a0)
    a878:	|  |   movea.l 4(sp),a0
    a87c:	|  |   move.b 127(a0),d0
    a880:	|  |   movea.l 4(sp),a0
    a884:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a888:	|  |   movea.l 4(sp),a0
    a88c:	|  |   st 129(a0)
			moveMe->transparency = 128;
    a890:	|  |   movea.l 4(sp),a0
    a894:	|  |   move.b #-128,130(a0)
			break;
    a89a:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    a89e:	|  |   movea.l 4(sp),a0
    a8a2:	|  |   clr.b 128(a0)
    a8a6:	|  |   movea.l 4(sp),a0
    a8aa:	|  |   move.b 128(a0),d0
    a8ae:	|  |   movea.l 4(sp),a0
    a8b2:	|  |   move.b d0,127(a0)
    a8b6:	|  |   movea.l 4(sp),a0
    a8ba:	|  |   move.b 127(a0),d0
    a8be:	|  |   movea.l 4(sp),a0
    a8c2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a8c6:	|  |   movea.l 4(sp),a0
    a8ca:	|  |   st 129(a0)
			moveMe->transparency = 192;
    a8ce:	|  |   movea.l 4(sp),a0
    a8d2:	|  |   move.b #-64,130(a0)
			break;
    a8d8:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a8dc:	|  |   movea.l 4(sp),a0
    a8e0:	|  |   move.b #-128,128(a0)
    a8e6:	|  |   movea.l 4(sp),a0
    a8ea:	|  |   move.b 128(a0),d0
    a8ee:	|  |   movea.l 4(sp),a0
    a8f2:	|  |   move.b d0,127(a0)
    a8f6:	|  |   movea.l 4(sp),a0
    a8fa:	|  |   move.b 127(a0),d0
    a8fe:	|  |   movea.l 4(sp),a0
    a902:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    a906:	|  |   movea.l 4(sp),a0
    a90a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    a910:	|  |   movea.l 4(sp),a0
    a914:	|  |   clr.b 130(a0)
			break;
    a918:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a91c:	|  |   movea.l 4(sp),a0
    a920:	|  |   move.b #-128,128(a0)
    a926:	|  |   movea.l 4(sp),a0
    a92a:	|  |   move.b 128(a0),d0
    a92e:	|  |   movea.l 4(sp),a0
    a932:	|  |   move.b d0,127(a0)
    a936:	|  |   movea.l 4(sp),a0
    a93a:	|  |   move.b 127(a0),d0
    a93e:	|  |   movea.l 4(sp),a0
    a942:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    a946:	|  |   movea.l 4(sp),a0
    a94a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    a950:	|  |   movea.l 4(sp),a0
    a954:	|  |   clr.b 130(a0)
			break;
    a958:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a95c:	|  |   movea.l 4(sp),a0
    a960:	|  |   move.b #-128,128(a0)
    a966:	|  |   movea.l 4(sp),a0
    a96a:	|  |   move.b 128(a0),d0
    a96e:	|  |   movea.l 4(sp),a0
    a972:	|  |   move.b d0,127(a0)
    a976:	|  |   movea.l 4(sp),a0
    a97a:	|  |   move.b 127(a0),d0
    a97e:	|  |   movea.l 4(sp),a0
    a982:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    a986:	|  |   movea.l 4(sp),a0
    a98a:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    a990:	|  |   movea.l 4(sp),a0
    a994:	|  |   clr.b 130(a0)
			break;
    a998:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    a99c:	|  |   movea.l 4(sp),a0
    a9a0:	|  |   move.b #-128,128(a0)
    a9a6:	|  |   movea.l 4(sp),a0
    a9aa:	|  |   move.b 128(a0),d0
    a9ae:	|  |   movea.l 4(sp),a0
    a9b2:	|  |   move.b d0,127(a0)
    a9b6:	|  |   movea.l 4(sp),a0
    a9ba:	|  |   move.b 127(a0),d0
    a9be:	|  |   movea.l 4(sp),a0
    a9c2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    a9c6:	|  |   movea.l 4(sp),a0
    a9ca:	|  |   st 129(a0)
			moveMe->transparency = 0;
    a9ce:	|  |   movea.l 4(sp),a0
    a9d2:	|  |   clr.b 130(a0)
			break;
    a9d6:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    a9da:	|  |   movea.l 4(sp),a0
    a9de:	|  |   st 128(a0)
    a9e2:	|  |   movea.l 4(sp),a0
    a9e6:	|  |   move.b 128(a0),d0
    a9ea:	|  |   movea.l 4(sp),a0
    a9ee:	|  |   move.b d0,127(a0)
    a9f2:	|  |   movea.l 4(sp),a0
    a9f6:	|  |   move.b 127(a0),d0
    a9fa:	|  |   movea.l 4(sp),a0
    a9fe:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    aa02:	|  |   movea.l 4(sp),a0
    aa06:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    aa0c:	|  |   movea.l 4(sp),a0
    aa10:	|  |   clr.b 130(a0)
			break;
    aa14:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    aa18:	|  |   movea.l 4(sp),a0
    aa1c:	|  |   st 128(a0)
    aa20:	|  |   movea.l 4(sp),a0
    aa24:	|  |   move.b 128(a0),d0
    aa28:	|  |   movea.l 4(sp),a0
    aa2c:	|  |   move.b d0,127(a0)
    aa30:	|  |   movea.l 4(sp),a0
    aa34:	|  |   move.b 127(a0),d0
    aa38:	|  |   movea.l 4(sp),a0
    aa3c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    aa40:	|  |   movea.l 4(sp),a0
    aa44:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    aa4a:	|  |   movea.l 4(sp),a0
    aa4e:	|  |   clr.b 130(a0)
			break;
    aa52:	|  +-- bra.w ab06 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    aa56:	|  |   movea.l 4(sp),a0
    aa5a:	|  |   st 128(a0)
    aa5e:	|  |   movea.l 4(sp),a0
    aa62:	|  |   move.b 128(a0),d0
    aa66:	|  |   movea.l 4(sp),a0
    aa6a:	|  |   move.b d0,127(a0)
    aa6e:	|  |   movea.l 4(sp),a0
    aa72:	|  |   move.b 127(a0),d0
    aa76:	|  |   movea.l 4(sp),a0
    aa7a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    aa7e:	|  |   movea.l 4(sp),a0
    aa82:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    aa88:	|  |   movea.l 4(sp),a0
    aa8c:	|  |   clr.b 130(a0)
			break;
    aa90:	|  +-- bra.s ab06 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    aa92:	|  |   movea.l 4(sp),a0
    aa96:	|  |   st 128(a0)
    aa9a:	|  |   movea.l 4(sp),a0
    aa9e:	|  |   move.b 128(a0),d0
    aaa2:	|  |   movea.l 4(sp),a0
    aaa6:	|  |   move.b d0,127(a0)
    aaaa:	|  |   movea.l 4(sp),a0
    aaae:	|  |   move.b 127(a0),d0
    aab2:	|  |   movea.l 4(sp),a0
    aab6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    aaba:	|  |   movea.l 4(sp),a0
    aabe:	|  |   st 129(a0)
			moveMe->transparency = 0;
    aac2:	|  |   movea.l 4(sp),a0
    aac6:	|  |   clr.b 130(a0)
			break;
    aaca:	|  +-- bra.s ab06 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    aacc:	\--|-> movea.l 4(sp),a0
    aad0:	   |   clr.b 128(a0)
    aad4:	   |   movea.l 4(sp),a0
    aad8:	   |   move.b 128(a0),d0
    aadc:	   |   movea.l 4(sp),a0
    aae0:	   |   move.b d0,127(a0)
    aae4:	   |   movea.l 4(sp),a0
    aae8:	   |   move.b 127(a0),d0
    aaec:	   |   movea.l 4(sp),a0
    aaf0:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    aaf4:	   |   movea.l 4(sp),a0
    aaf8:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    aafc:	   |   movea.l 4(sp),a0
    ab00:	   |   clr.b 130(a0)
			break;
    ab04:	   |   nop
	}
}
    ab06:	   \-> nop
    ab08:	       rts

0000ab0a <shufflePeople>:

void shufflePeople () {
    ab0a:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    ab0e:	             move.l #111248,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    ab16:	             move.l 1b290 <allPeople>,d0
    ab1c:	/----------- beq.w abf2 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    ab20:	|     /----- bra.w abe2 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    ab24:	|  /--|----> movea.l 16(sp),a0
    ab28:	|  |  |      movea.l (a0),a0
    ab2a:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    ab30:	|  |  |      movea.l 16(sp),a0
    ab34:	|  |  |      movea.l (a0),a0
    ab36:	|  |  |      move.l 118(a0),d0
    ab3a:	|  |  |      moveq #1,d1
    ab3c:	|  |  |      and.l d1,d0
    ab3e:	|  |  |  /-- beq.s ab56 <shufflePeople+0x4c>
    ab40:	|  |  |  |   move.l #1148846080,-(sp)
    ab46:	|  |  |  |   move.l 16(sp),-(sp)
    ab4a:	|  |  |  |   jsr 15c90 <__addsf3>
    ab50:	|  |  |  |   addq.l #8,sp
    ab52:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    ab56:	|  |  |  \-> movea.l 16(sp),a0
    ab5a:	|  |  |      movea.l (a0),a0
    ab5c:	|  |  |      movea.l 36(a0),a0
    ab60:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    ab66:	|  |  |      movea.l 16(sp),a0
    ab6a:	|  |  |      movea.l (a0),a0
    ab6c:	|  |  |      movea.l 36(a0),a0
    ab70:	|  |  |      move.l 118(a0),d0
    ab74:	|  |  |      moveq #1,d1
    ab76:	|  |  |      and.l d1,d0
    ab78:	|  |  |  /-- beq.s ab90 <shufflePeople+0x86>
    ab7a:	|  |  |  |   move.l #1148846080,-(sp)
    ab80:	|  |  |  |   move.l 12(sp),-(sp)
    ab84:	|  |  |  |   jsr 15c90 <__addsf3>
    ab8a:	|  |  |  |   addq.l #8,sp
    ab8c:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    ab90:	|  |  |  \-> move.l 8(sp),-(sp)
    ab94:	|  |  |      move.l 16(sp),-(sp)
    ab98:	|  |  |      jsr 1604a <__gtsf2>
    ab9e:	|  |  |      addq.l #8,sp
    aba0:	|  |  |      tst.l d0
    aba2:	|  |  |  /-- ble.s abd4 <shufflePeople+0xca>
			A = (*thisReference);
    aba4:	|  |  |  |   movea.l 16(sp),a0
    aba8:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    abac:	|  |  |  |   movea.l 16(sp),a0
    abb0:	|  |  |  |   movea.l (a0),a0
    abb2:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    abb6:	|  |  |  |   movea.l (sp),a0
    abb8:	|  |  |  |   move.l 36(a0),d0
    abbc:	|  |  |  |   movea.l 4(sp),a0
    abc0:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    abc4:	|  |  |  |   movea.l (sp),a0
    abc6:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    abcc:	|  |  |  |   movea.l 16(sp),a0
    abd0:	|  |  |  |   move.l (sp),(a0)
    abd2:	|  |  +--|-- bra.s abe2 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    abd4:	|  |  |  \-> movea.l 16(sp),a0
    abd8:	|  |  |      move.l (a0),d0
    abda:	|  |  |      moveq #36,d1
    abdc:	|  |  |      add.l d0,d1
    abde:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    abe2:	|  |  \----> movea.l 16(sp),a0
    abe6:	|  |         movea.l (a0),a0
    abe8:	|  |         move.l 36(a0),d0
    abec:	|  \-------- bne.w ab24 <shufflePeople+0x1a>
    abf0:	|        /-- bra.s abf4 <shufflePeople+0xea>
	if (!allPeople) return;
    abf2:	\--------|-> nop
		}
	}
}
    abf4:	         \-> lea 20(sp),sp
    abf8:	             rts

0000abfa <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    abfa:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    abfc:	       tst.l 8(sp)
    ac00:	   /-- bgt.s ac06 <setCharacterWalkSpeed+0xc>
    ac02:	   |   clr.w d0
    ac04:	/--|-- bra.s ac24 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ac06:	|  \-> move.l 12(sp),-(sp)
    ac0a:	|      jsr 9652 <findPerson>
    ac10:	|      addq.l #4,sp
    ac12:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    ac14:	|  /-- bne.s ac1a <setCharacterWalkSpeed+0x20>
    ac16:	|  |   clr.w d0
    ac18:	+--|-- bra.s ac24 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    ac1a:	|  \-> movea.l (sp),a0
    ac1c:	|      move.l 8(sp),28(a0)
	return TRUE;
    ac22:	|      moveq #1,d0
}
    ac24:	\----> addq.l #4,sp
    ac26:	       rts

0000ac28 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    ac28:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    ac2a:	       move.l 8(sp),-(sp)
    ac2e:	       jsr 9652 <findPerson>
    ac34:	       addq.l #4,sp
    ac36:	       move.l d0,(sp)
    if (thisPerson) {
    ac38:	/----- beq.s ac58 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    ac3a:	|      movea.l (sp),a0
    ac3c:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    ac42:	|      moveq #2,d0
    ac44:	|      and.l 12(sp),d0
    ac48:	|  /-- beq.s ac54 <setPersonExtra+0x2c>
    ac4a:	|  |   movea.l (sp),a0
    ac4c:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    ac54:	|  \-> moveq #1,d0
    ac56:	|  /-- bra.s ac5a <setPersonExtra+0x32>
    }
    return FALSE;
    ac58:	\--|-> clr.w d0
}
    ac5a:	   \-> addq.l #4,sp
    ac5c:	       rts

0000ac5e <setScale>:


void setScale (short int h, short int d) {
    ac5e:	subq.l #4,sp
    ac60:	move.l 8(sp),d1
    ac64:	move.l 12(sp),d0
    ac68:	move.w d1,d1
    ac6a:	move.w d1,2(sp)
    ac6e:	move.w d0,d0
    ac70:	move.w d0,(sp)
	scaleHorizon = h;
    ac72:	move.w 2(sp),1ab6c <scaleHorizon>
	scaleDivide = d;
    ac7a:	move.w (sp),1ab6e <scaleDivide>
}
    ac80:	nop
    ac82:	addq.l #4,sp
    ac84:	rts

0000ac86 <setShown>:

void setShown (BOOL h, int ob) {
    ac86:	    subq.l #8,sp
    ac88:	    move.l 12(sp),d0
    ac8c:	    move.w d0,d0
    ac8e:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    ac92:	    move.l 16(sp),-(sp)
    ac96:	    jsr 9652 <findPerson>
    ac9c:	    addq.l #4,sp
    ac9e:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    aca2:	/-- beq.s acae <setShown+0x28>
    aca4:	|   movea.l 4(sp),a0
    aca8:	|   move.w 2(sp),104(a0)
}
    acae:	\-> nop
    acb0:	    addq.l #8,sp
    acb2:	    rts

0000acb4 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    acb4:	       subq.l #8,sp
    acb6:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    acb8:	       movea.l 16(sp),a0
    acbc:	       move.l 92(a0),d0
    acc0:	       move.l d0,d1
    acc2:	       addi.l #360,d1
    acc8:	       movea.l 16(sp),a0
    accc:	       move.l 96(a0),d0
    acd0:	       move.l d1,d2
    acd2:	       sub.l d0,d2
    acd4:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    acd8:	       movea.l 16(sp),a0
    acdc:	       move.l 122(a0),d0
    ace0:	   /-- beq.s acec <spinStep+0x38>
    ace2:	   |   movea.l 16(sp),a0
    ace6:	   |   move.l 122(a0),d0
    acea:	/--|-- bra.s ad06 <spinStep+0x52>
    acec:	|  \-> movea.l 16(sp),a0
    acf0:	|      movea.l 80(a0),a0
    acf4:	|      move.l 4(a0),d0
    acf8:	|      move.l d0,-(sp)
    acfa:	|      pea 168 <decodeFilename+0x50>
    acfe:	|      jsr 164de <__divsi3>
    ad04:	|      addq.l #8,sp
    ad06:	\----> move.l d0,4(sp)
	while (diff > 180) {
    ad0a:	   /-- bra.s ad14 <spinStep+0x60>
		diff -= 360;
    ad0c:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    ad14:	|  \-> cmpi.l #180,8(sp)
    ad1c:	\----- bgt.s ad0c <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    ad1e:	       move.l 8(sp),d0
    ad22:	       cmp.l 4(sp),d0
    ad26:	   /-- blt.s ad44 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    ad28:	   |   movea.l 16(sp),a0
    ad2c:	   |   move.l 92(a0),d0
    ad30:	   |   sub.l 4(sp),d0
    ad34:	   |   move.l d0,-(sp)
    ad36:	   |   move.l 20(sp),-(sp)
    ad3a:	   |   jsr ae24 <turnMeAngle>
    ad40:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    ad42:	/--|-- bra.s ad8a <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    ad44:	|  \-> move.l 4(sp),d0
    ad48:	|      neg.l d0
    ad4a:	|      cmp.l 8(sp),d0
    ad4e:	|  /-- blt.s ad6c <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    ad50:	|  |   movea.l 16(sp),a0
    ad54:	|  |   move.l 92(a0),d0
    ad58:	|  |   add.l 4(sp),d0
    ad5c:	|  |   move.l d0,-(sp)
    ad5e:	|  |   move.l 20(sp),-(sp)
    ad62:	|  |   jsr ae24 <turnMeAngle>
    ad68:	|  |   addq.l #8,sp
}
    ad6a:	+--|-- bra.s ad8a <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    ad6c:	|  \-> movea.l 16(sp),a0
    ad70:	|      move.l 96(a0),d0
    ad74:	|      move.l d0,-(sp)
    ad76:	|      move.l 20(sp),-(sp)
    ad7a:	|      jsr ae24 <turnMeAngle>
    ad80:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    ad82:	|      movea.l 16(sp),a0
    ad86:	|      clr.w 66(a0)
}
    ad8a:	\----> nop
    ad8c:	       move.l (sp)+,d2
    ad8e:	       addq.l #8,sp
    ad90:	       rts

0000ad92 <stopPerson>:


BOOL stopPerson (int o) {
    ad92:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    ad94:	       move.l 8(sp),-(sp)
    ad98:	       jsr 9652 <findPerson>
    ad9e:	       addq.l #4,sp
    ada0:	       move.l d0,(sp)
    if (moveMe)
    ada2:	/----- beq.s ade0 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    ada4:	|      movea.l (sp),a0
    ada6:	|      move.l 68(a0),d0
    adaa:	+----- beq.s ade0 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    adac:	|      movea.l (sp),a0
    adae:	|      move.l 68(a0),d0
    adb2:	|      move.l d0,-(sp)
    adb4:	|      jsr 3644 <abortFunction>
    adba:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    adbc:	|      movea.l (sp),a0
    adbe:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    adc2:	|      movea.l (sp),a0
    adc4:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    adc8:	|      movea.l (sp),a0
    adca:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    adce:	|      clr.l -(sp)
    add0:	|      move.l 4(sp),-(sp)
    add4:	|      jsr 705c <setFrames>
    adda:	|      addq.l #8,sp
            return TRUE;
    addc:	|      moveq #1,d0
    adde:	|  /-- bra.s ade2 <stopPerson+0x50>
        }
    return FALSE;
    ade0:	\--|-> clr.w d0
}
    ade2:	   \-> addq.l #4,sp
    ade4:	       rts

0000ade6 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    ade6:	       subq.l #8,sp
	int total = 0;
    ade8:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    adec:	       clr.l (sp)
    adee:	   /-- bra.s ae10 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    adf0:	/--|-> movea.l 12(sp),a0
    adf4:	|  |   movea.l 4(a0),a0
    adf8:	|  |   move.l (sp),d1
    adfa:	|  |   move.l d1,d0
    adfc:	|  |   add.l d0,d0
    adfe:	|  |   add.l d1,d0
    ae00:	|  |   add.l d0,d0
    ae02:	|  |   add.l d0,d0
    ae04:	|  |   adda.l d0,a0
    ae06:	|  |   move.l 4(a0),d0
    ae0a:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    ae0e:	|  |   addq.l #1,(sp)
    ae10:	|  \-> movea.l 12(sp),a0
    ae14:	|      move.l 8(a0),d0
    ae18:	|      cmp.l (sp),d0
    ae1a:	\----- bgt.s adf0 <timeForAnim+0xa>
	}
	return total;
    ae1c:	       move.l 4(sp),d0
}
    ae20:	       addq.l #8,sp
    ae22:	       rts

0000ae24 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    ae24:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    ae26:	       movea.l 8(sp),a0
    ae2a:	       movea.l 80(a0),a0
    ae2e:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    ae32:	       movea.l 8(sp),a0
    ae36:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    ae3c:	       move.l (sp),-(sp)
    ae3e:	       pea b4 <_start+0xb4>
    ae42:	       jsr 164de <__divsi3>
    ae48:	       addq.l #8,sp
    ae4a:	       move.l d0,d1
    ae4c:	       addi.l #180,d1
    ae52:	       movea.l 8(sp),a0
    ae56:	       move.l 100(a0),d0
    ae5a:	       add.l d1,d0
    ae5c:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    ae60:	   /-- bra.s ae6a <turnMeAngle+0x46>
    ae62:	/--|-> addi.l #-360,12(sp)
    ae6a:	|  \-> cmpi.l #359,12(sp)
    ae72:	\----- bgt.s ae62 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    ae74:	       move.l (sp),-(sp)
    ae76:	       move.l 16(sp),-(sp)
    ae7a:	       jsr 16460 <__mulsi3>
    ae80:	       addq.l #8,sp
    ae82:	       pea 168 <decodeFilename+0x50>
    ae86:	       move.l d0,-(sp)
    ae88:	       jsr 164de <__divsi3>
    ae8e:	       addq.l #8,sp
    ae90:	       movea.l 8(sp),a0
    ae94:	       move.l d0,106(a0)
}
    ae98:	       nop
    ae9a:	       addq.l #4,sp
    ae9c:	       rts

0000ae9e <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    ae9e:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    aea0:	          move.l 8(sp),-(sp)
    aea4:	          jsr 9652 <findPerson>
    aeaa:	          addq.l #4,sp
    aeac:	          move.l d0,(sp)
    if (thisPerson) {
    aeae:	/-------- beq.s af0e <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    aeb0:	|         movea.l (sp),a0
    aeb2:	|         move.l 68(a0),d0
    aeb6:	|     /-- beq.s aec8 <turnPersonToFace+0x2a>
    aeb8:	|     |   movea.l (sp),a0
    aeba:	|     |   move.l 68(a0),d0
    aebe:	|     |   move.l d0,-(sp)
    aec0:	|     |   jsr 3644 <abortFunction>
    aec6:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    aec8:	|     \-> movea.l (sp),a0
    aeca:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    aece:	|         movea.l (sp),a0
    aed0:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    aed4:	|         movea.l (sp),a0
    aed6:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    aeda:	|         move.l 12(sp),-(sp)
    aede:	|         move.l 4(sp),-(sp)
    aee2:	|         jsr ae24 <turnMeAngle>
    aee8:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    aeea:	|         movea.l 1b234 <speech>,a0
    aef0:	|         move.l (a0),d0
    aef2:	|         cmp.l (sp),d0
    aef4:	|  /----- bne.s aefa <turnPersonToFace+0x5c>
    aef6:	|  |      moveq #2,d0
    aef8:	|  |  /-- bra.s aefc <turnPersonToFace+0x5e>
    aefa:	|  \--|-> moveq #0,d0
    aefc:	|     \-> move.l d0,-(sp)
    aefe:	|         move.l 4(sp),-(sp)
    af02:	|         jsr 705c <setFrames>
    af08:	|         addq.l #8,sp
        return TRUE;
    af0a:	|         moveq #1,d0
    af0c:	|     /-- bra.s af10 <turnPersonToFace+0x72>
    }
    return FALSE;
    af0e:	\-----|-> clr.w d0
}
    af10:	      \-> addq.l #4,sp
    af12:	          rts

0000af14 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    af14:	                lea -20(sp),sp
    af18:	                move.l d3,-(sp)
    af1a:	                move.l d2,-(sp)
    af1c:	                move.l 36(sp),d0
    af20:	                move.w d0,d0
    af22:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    af26:	                cmpi.w #-1,10(sp)
    af2c:	/-------------- bne.s af34 <walkMe+0x20>
    af2e:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    af34:	>-------------> movea.l 32(sp),a0
    af38:	|               move.l 48(a0),d0
    af3c:	|               move.l d0,-(sp)
    af3e:	|               jsr 15ede <__floatsisf>
    af44:	|               addq.l #4,sp
    af46:	|               move.l d0,d1
    af48:	|               movea.l 32(sp),a0
    af4c:	|               move.l (a0),d0
    af4e:	|               move.l d0,-(sp)
    af50:	|               move.l d1,-(sp)
    af52:	|               jsr 161d2 <__subsf3>
    af58:	|               addq.l #8,sp
    af5a:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    af5e:	|               movea.l 32(sp),a0
    af62:	|               move.l 52(a0),d0
    af66:	|               move.l d0,-(sp)
    af68:	|               jsr 15ede <__floatsisf>
    af6e:	|               addq.l #4,sp
    af70:	|               move.l d0,d1
    af72:	|               movea.l 32(sp),a0
    af76:	|               move.l 4(a0),d0
    af7a:	|               move.l d0,-(sp)
    af7c:	|               move.l d1,-(sp)
    af7e:	|               jsr 161d2 <__subsf3>
    af84:	|               addq.l #8,sp
    af86:	|               move.l d0,-(sp)
    af88:	|               move.l d0,-(sp)
    af8a:	|               jsr 15c90 <__addsf3>
    af90:	|               addq.l #8,sp
    af92:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    af96:	|               movea.l 32(sp),a0
    af9a:	|               move.l 32(a0),d2
    af9e:	|               movea.l 32(sp),a0
    afa2:	|               move.l 28(a0),d0
    afa6:	|               move.l d0,-(sp)
    afa8:	|               jsr 15ede <__floatsisf>
    afae:	|               addq.l #4,sp
    afb0:	|               move.l d0,-(sp)
    afb2:	|               move.l d2,-(sp)
    afb4:	|               jsr 15f90 <__mulsf3>
    afba:	|               addq.l #8,sp
    afbc:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    afc0:	|               move.l 24(sp),-(sp)
    afc4:	|               jsr 15df6 <__extendsfdf2>
    afca:	|               addq.l #4,sp
    afcc:	|               move.l #-1717986918,-(sp)
    afd2:	|               move.l #1070176665,-(sp)
    afd8:	|               move.l d1,-(sp)
    afda:	|               move.l d0,-(sp)
    afdc:	|               jsr 160b6 <__ltdf2>
    afe2:	|               lea 16(sp),sp
    afe6:	|               tst.l d0
    afe8:	|           /-- bge.s aff2 <walkMe+0xde>
    afea:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    aff2:	|           \-> move.l 20(sp),-(sp)
    aff6:	|               jsr 15e76 <__fixsfsi>
    affc:	|               addq.l #4,sp
    affe:	|               move.l d0,-(sp)
    b000:	|               jsr 8242 <TF_abs>
    b006:	|               addq.l #4,sp
    b008:	|               move.l d0,d2
    b00a:	|               move.l 16(sp),-(sp)
    b00e:	|               jsr 15e76 <__fixsfsi>
    b014:	|               addq.l #4,sp
    b016:	|               move.l d0,-(sp)
    b018:	|               jsr 8242 <TF_abs>
    b01e:	|               addq.l #4,sp
    b020:	|               cmp.l d2,d0
    b022:	|        /----- bgt.s b046 <walkMe+0x132>
    b024:	|        |      move.l 20(sp),-(sp)
    b028:	|        |      jsr 15e76 <__fixsfsi>
    b02e:	|        |      addq.l #4,sp
    b030:	|        |      move.l d0,-(sp)
    b032:	|        |      jsr 8242 <TF_abs>
    b038:	|        |      addq.l #4,sp
    b03a:	|        |      move.l d0,-(sp)
    b03c:	|        |      jsr 15ede <__floatsisf>
    b042:	|        |      addq.l #4,sp
    b044:	|        |  /-- bra.s b066 <walkMe+0x152>
    b046:	|        \--|-> move.l 16(sp),-(sp)
    b04a:	|           |   jsr 15e76 <__fixsfsi>
    b050:	|           |   addq.l #4,sp
    b052:	|           |   move.l d0,-(sp)
    b054:	|           |   jsr 8242 <TF_abs>
    b05a:	|           |   addq.l #4,sp
    b05c:	|           |   move.l d0,-(sp)
    b05e:	|           |   jsr 15ede <__floatsisf>
    b064:	|           |   addq.l #4,sp
    b066:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    b06a:	|               move.l 12(sp),-(sp)
    b06e:	|               jsr 15e76 <__fixsfsi>
    b074:	|               addq.l #4,sp
    b076:	|               move.l d0,-(sp)
    b078:	|               jsr 8242 <TF_abs>
    b07e:	|               addq.l #4,sp
    b080:	|               move.l d0,-(sp)
    b082:	|               jsr 15ede <__floatsisf>
    b088:	|               addq.l #4,sp
    b08a:	|               move.l d0,-(sp)
    b08c:	|               move.l 28(sp),-(sp)
    b090:	|               jsr 16104 <__ltsf2>
    b096:	|               addq.l #8,sp
    b098:	|               tst.l d0
    b09a:	|        /----- bge.w b14c <walkMe+0x238>
			if (thisPerson->spinning) {
    b09e:	|        |      movea.l 32(sp),a0
    b0a2:	|        |      move.w 66(a0),d0
    b0a6:	|        |  /-- beq.s b0c4 <walkMe+0x1b0>
				spinStep(thisPerson);
    b0a8:	|        |  |   move.l 32(sp),-(sp)
    b0ac:	|        |  |   jsr acb4 <spinStep>
    b0b2:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    b0b4:	|        |  |   pea 1 <_start+0x1>
    b0b8:	|        |  |   move.l 36(sp),-(sp)
    b0bc:	|        |  |   jsr 705c <setFrames>
    b0c2:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    b0c4:	|        |  \-> move.l 24(sp),-(sp)
    b0c8:	|        |      move.l 16(sp),-(sp)
    b0cc:	|        |      jsr 15d8a <__divsf3>
    b0d2:	|        |      addq.l #8,sp
    b0d4:	|        |      move.l d0,24(sp)
			if (move)
    b0d8:	|        |      tst.w 10(sp)
    b0dc:	|        |  /-- beq.s b146 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    b0de:	|        |  |   movea.l 32(sp),a0
    b0e2:	|        |  |   move.l 4(a0),d2
    b0e6:	|        |  |   move.l 24(sp),d0
    b0ea:	|        |  |   move.l d0,-(sp)
    b0ec:	|        |  |   move.l d0,-(sp)
    b0ee:	|        |  |   jsr 15c90 <__addsf3>
    b0f4:	|        |  |   addq.l #8,sp
    b0f6:	|        |  |   move.l d0,-(sp)
    b0f8:	|        |  |   move.l 20(sp),-(sp)
    b0fc:	|        |  |   jsr 15d8a <__divsf3>
    b102:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b104:	|        |  |   move.l d0,-(sp)
    b106:	|        |  |   move.l d2,-(sp)
    b108:	|        |  |   jsr 15c90 <__addsf3>
    b10e:	|        |  |   addq.l #8,sp
    b110:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    b112:	|        |  |   movea.l 32(sp),a0
    b116:	|        |  |   move.l (a0),d3
    b118:	|        |  |   move.l 24(sp),-(sp)
    b11c:	|        |  |   move.l 24(sp),-(sp)
    b120:	|        |  |   jsr 15d8a <__divsf3>
    b126:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    b128:	|        |  |   move.l d0,-(sp)
    b12a:	|        |  |   move.l d3,-(sp)
    b12c:	|        |  |   jsr 15c90 <__addsf3>
    b132:	|        |  |   addq.l #8,sp
    b134:	|        |  |   move.l d2,-(sp)
    b136:	|        |  |   move.l d0,-(sp)
    b138:	|        |  |   move.l 40(sp),-(sp)
    b13c:	|        |  |   jsr 9d9a <moveAndScale>
    b142:	|        |  |   lea 12(sp),sp
			return TRUE;
    b146:	|        |  \-> moveq #1,d0
    b148:	|  /-----|----- bra.w b1fa <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    b14c:	|  |     \----> movea.l 32(sp),a0
    b150:	|  |            move.l 56(a0),d0
    b154:	|  |            moveq #-1,d1
    b156:	|  |            cmp.l d0,d1
    b158:	|  |        /-- bne.s b190 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    b15a:	|  |        |   movea.l 32(sp),a0
    b15e:	|  |        |   move.l 110(a0),d0
    b162:	|  |        |   moveq #-1,d1
    b164:	|  |        |   cmp.l d0,d1
    b166:	|  |  /-----|-- beq.s b1a4 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    b168:	|  |  |     |   movea.l 32(sp),a0
    b16c:	|  |  |     |   move.l 110(a0),d0
    b170:	|  |  |     |   movea.l 32(sp),a0
    b174:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    b178:	|  |  |     |   movea.l 32(sp),a0
    b17c:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    b182:	|  |  |     |   move.l 32(sp),-(sp)
    b186:	|  |  |     |   jsr acb4 <spinStep>
    b18c:	|  |  |     |   addq.l #4,sp
			}
			break;
    b18e:	|  |  +-----|-- bra.s b1a4 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    b190:	|  |  |     \-> move.l 32(sp),-(sp)
    b194:	|  |  |         jsr 89b4 <doBorderStuff>
    b19a:	|  |  |         addq.l #4,sp
    b19c:	|  |  |         tst.w d0
    b19e:	|  |  |  /----- beq.s b1a8 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b1a0:	\--|--|--|----- bra.w af34 <walkMe+0x20>
			break;
    b1a4:	   |  \--|----> nop
    b1a6:	   |     |  /-- bra.s b1aa <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    b1a8:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    b1aa:	   |        \-> movea.l 32(sp),a0
    b1ae:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    b1b2:	   |            clr.l -(sp)
    b1b4:	   |            move.l 36(sp),-(sp)
    b1b8:	   |            jsr 705c <setFrames>
    b1be:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    b1c0:	   |            movea.l 32(sp),a0
    b1c4:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    b1c8:	   |            move.l d0,-(sp)
    b1ca:	   |            jsr 15ede <__floatsisf>
    b1d0:	   |            addq.l #4,sp
    b1d2:	   |            move.l d0,d2
				 thisPerson->walkToX,
    b1d4:	   |            movea.l 32(sp),a0
    b1d8:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    b1dc:	   |            move.l d0,-(sp)
    b1de:	   |            jsr 15ede <__floatsisf>
    b1e4:	   |            addq.l #4,sp
    b1e6:	   |            move.l d2,-(sp)
    b1e8:	   |            move.l d0,-(sp)
    b1ea:	   |            move.l 40(sp),-(sp)
    b1ee:	   |            jsr 9d9a <moveAndScale>
    b1f4:	   |            lea 12(sp),sp
	return FALSE;
    b1f8:	   |            clr.w d0
}
    b1fa:	   \----------> move.l (sp)+,d2
    b1fc:	                move.l (sp)+,d3
    b1fe:	                lea 20(sp),sp
    b202:	                rts

0000b204 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    b204:	       subq.l #8,sp
    b206:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    b208:	   /-- bra.s b238 <clearStackLib+0x34>
		k = stackLib;
    b20a:	/--|-> move.l 1b2bc <stackLib>,8(sp)
		stackLib = stackLib -> next;
    b212:	|  |   movea.l 1b2bc <stackLib>,a0
    b218:	|  |   move.l 4(a0),d0
    b21c:	|  |   move.l d0,1b2bc <stackLib>
		FreeVec(k);
    b222:	|  |   move.l 8(sp),4(sp)
    b228:	|  |   move.l 1b1d8 <SysBase>,d0
    b22e:	|  |   movea.l d0,a6
    b230:	|  |   movea.l 4(sp),a1
    b234:	|  |   jsr -690(a6)
	while (stackLib) {
    b238:	|  \-> move.l 1b2bc <stackLib>,d0
    b23e:	\----- bne.s b20a <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    b240:	       clr.l 1b2b8 <stackLibTotal>
}
    b246:	       nop
    b248:	       movea.l (sp)+,a6
    b24a:	       addq.l #8,sp
    b24c:	       rts

0000b24e <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    b24e:	          lea -128(sp),sp
    b252:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    b256:	      /-- bra.s b268 <loadGame+0x1a>
    b258:	   /--|-> move.l 1b170 <allRunningFunctions>,d0
    b25e:	   |  |   move.l d0,-(sp)
    b260:	   |  |   jsr 464c <finishFunction>
    b266:	   |  |   addq.l #4,sp
    b268:	   |  \-> move.l 1b170 <allRunningFunctions>,d0
    b26e:	   \----- bne.s b258 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    b270:	          pea 1b2c0 <ssgVersion>
    b276:	          pea 17a4e <PutChar+0x14d8>
    b27c:	          pea 41 <_start+0x41>
    b280:	          pea 53 <_start+0x53>
    b284:	          move.l 160(sp),-(sp)
    b288:	          jsr 5402 <openAndVerify>
    b28e:	          lea 20(sp),sp
    b292:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    b296:	      /-- bne.s b29e <loadGame+0x50>
    b298:	      |   clr.w d0
    b29a:	/-----|-- bra.w b544 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    b29e:	|     \-> move.l 112(sp),108(sp)
    b2a4:	|         lea 140(sp),a0
    b2a8:	|         lea -126(a0),a0
    b2ac:	|         move.l a0,120(sp)
    b2b0:	|         moveq #8,d0
    b2b2:	|         move.l d0,116(sp)
    b2b6:	|         move.l 1b1e0 <DOSBase>,d0
    b2bc:	|         movea.l d0,a6
    b2be:	|         move.l 108(sp),d1
    b2c2:	|         move.l 120(sp),d2
    b2c6:	|         move.l 116(sp),d3
    b2ca:	|         jsr -42(a6)
    b2ce:	|         move.l d0,132(sp)
    b2d2:	|         move.l 132(sp),d0
    b2d6:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    b2da:	|         moveq #8,d0
    b2dc:	|         cmp.l 128(sp),d0
    b2e0:	|     /-- beq.s b2f0 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    b2e2:	|     |   pea 17a6f <PutChar+0x14f9>
    b2e8:	|     |   jsr 15c26 <KPrintF>
    b2ee:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b2f0:	|     \-> move.l 14(sp),d1
    b2f4:	|         move.l 1b17a <fileTime>,d0
    b2fa:	|         cmp.l d1,d0
    b2fc:	|     /-- bne.s b30c <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    b2fe:	|     |   move.l 18(sp),d1
    b302:	|     |   move.l 1b17e <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    b308:	|     |   cmp.l d1,d0
    b30a:	|  /--|-- beq.s b32c <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    b30c:	|  |  \-> move.l 144(sp),-(sp)
    b310:	|  |      pea 17a8b <PutChar+0x1515>
    b316:	|  |      pea 17b52 <PutChar+0x15dc>
    b31c:	|  |      jsr 15c26 <KPrintF>
    b322:	|  |      lea 12(sp),sp
		return FALSE; 
    b326:	|  |      clr.w d0
    b328:	+--|----- bra.w b544 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    b32c:	|  \----> move.l 112(sp),124(sp)
    b332:	|         move.l 1b1e0 <DOSBase>,d0
    b338:	|         movea.l d0,a6
    b33a:	|         move.l 124(sp),d1
    b33e:	|         jsr -306(a6)
    b342:	|         move.l d0,136(sp)
    b346:	|         move.l 136(sp),d0
    b34a:	|         move.l d0,d0
    b34c:	|         move.w d0,1aa36 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    b352:	|         move.l 112(sp),100(sp)
    b358:	|         move.l 1b1e0 <DOSBase>,d0
    b35e:	|         movea.l d0,a6
    b360:	|         move.l 100(sp),d1
    b364:	|         jsr -306(a6)
    b368:	|         move.l d0,96(sp)
    b36c:	|         move.l 96(sp),d0
    b370:	|         move.l d0,d0
    b372:	|         move.w d0,1b178 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    b378:	|         move.l 112(sp),92(sp)
    b37e:	|         move.l 1b1e0 <DOSBase>,d0
    b384:	|         movea.l d0,a6
    b386:	|         move.l 92(sp),d1
    b38a:	|         jsr -306(a6)
    b38e:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    b392:	|         move.l 112(sp),84(sp)
    b398:	|         move.l 1b1e0 <DOSBase>,d0
    b39e:	|         movea.l d0,a6
    b3a0:	|         move.l 84(sp),d1
    b3a4:	|         jsr -306(a6)
    b3a8:	|         move.l d0,80(sp)
    b3ac:	|         move.l 80(sp),d0
    b3b0:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    b3b4:	|     /-- beq.s b3e8 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    b3b6:	|     |   move.l 112(sp),-(sp)
    b3ba:	|     |   jsr 6bc <get2bytes>
    b3c0:	|     |   addq.l #4,sp
    b3c2:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    b3c6:	|     |   move.l 112(sp),-(sp)
    b3ca:	|     |   jsr 6bc <get2bytes>
    b3d0:	|     |   addq.l #4,sp
    b3d2:	|     |   move.l d0,1b328 <fontHeight>
		charOrder = readString(fp);		
    b3d8:	|     |   move.l 112(sp),-(sp)
    b3dc:	|     |   jsr b02 <readString>
    b3e2:	|     |   addq.l #4,sp
    b3e4:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    b3e8:	|     \-> move.l 104(sp),70(sp)
    b3ee:	|         move.l 1b1d8 <SysBase>,d0
    b3f4:	|         movea.l d0,a6
    b3f6:	|         movea.l 70(sp),a1
    b3fa:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    b3fe:	|         move.l 112(sp),-(sp)
    b402:	|         jsr 854 <getSigned>
    b408:	|         addq.l #4,sp
    b40a:	|         move.w d0,1b0de <fontSpace>

	killAllPeople ();
    b410:	|         jsr 9a3c <killAllPeople>
	killAllRegions ();
    b416:	|         jsr 14476 <killAllRegions>

	int camerX = get2bytes (fp);
    b41c:	|         move.l 112(sp),-(sp)
    b420:	|         jsr 6bc <get2bytes>
    b426:	|         addq.l #4,sp
    b428:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    b42c:	|         move.l 112(sp),-(sp)
    b430:	|         jsr 6bc <get2bytes>
    b436:	|         addq.l #4,sp
    b438:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    b43c:	|         move.l 112(sp),-(sp)
    b440:	|         jsr 7d8 <getFloat>
    b446:	|         addq.l #4,sp
    b448:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    b44c:	|         move.l 112(sp),54(sp)
    b452:	|         move.l 1b1e0 <DOSBase>,d0
    b458:	|         movea.l d0,a6
    b45a:	|         move.l 54(sp),d1
    b45e:	|         jsr -306(a6)
    b462:	|         move.l d0,50(sp)
    b466:	|         move.l 50(sp),d0
    b46a:	|         move.l d0,d0
    b46c:	|         move.b d0,1ab50 <brightnessLevel>

	loadHandlers (fp);
    b472:	|         move.l 112(sp),-(sp)
    b476:	|         jsr 5362 <loadHandlers>
    b47c:	|         addq.l #4,sp
	loadRegions (fp);
    b47e:	|         move.l 112(sp),-(sp)
    b482:	|         jsr 144d2 <loadRegions>
    b488:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    b48a:	|         moveq #12,d0
    b48c:	|         move.l d0,46(sp)
    b490:	|         clr.l 42(sp)
    b494:	|         move.l 1b1d8 <SysBase>,d0
    b49a:	|         movea.l d0,a6
    b49c:	|         move.l 46(sp),d0
    b4a0:	|         move.l 42(sp),d1
    b4a4:	|         jsr -684(a6)
    b4a8:	|         move.l d0,38(sp)
    b4ac:	|         move.l 38(sp),d0
    b4b0:	|         move.l d0,1b0e0 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    b4b6:	|         move.l 1b0e0 <mouseCursorAnim>,d0
    b4bc:	|     /-- bne.s b4d0 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    b4be:	|     |   pea 17b5c <PutChar+0x15e6>
    b4c4:	|     |   jsr 15c26 <KPrintF>
    b4ca:	|     |   addq.l #4,sp
		return FALSE;
    b4cc:	|     |   clr.w d0
    b4ce:	+-----|-- bra.s b544 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    b4d0:	|     \-> jsr c3c6 <nosnapshot>
	if (FGetC (fp)) {
    b4d6:	|         move.l 112(sp),34(sp)
    b4dc:	|         move.l 1b1e0 <DOSBase>,d0
    b4e2:	|         movea.l d0,a6
    b4e4:	|         move.l 34(sp),d1
    b4e8:	|         jsr -306(a6)
    b4ec:	|         move.l d0,30(sp)
    b4f0:	|         move.l 30(sp),d0
    b4f4:	|     /-- beq.s b50a <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    b4f6:	|     |   move.l 112(sp),-(sp)
    b4fa:	|     |   jsr c446 <restoreSnapshot>
    b500:	|     |   addq.l #4,sp
    b502:	|     |   tst.w d0
    b504:	|     +-- bne.s b50a <loadGame+0x2bc>
    b506:	|     |   clr.w d0
    b508:	+-----|-- bra.s b544 <loadGame+0x2f6>
	}

	Close (fp);
    b50a:	|     \-> move.l 112(sp),26(sp)
    b510:	|         move.l 1b1e0 <DOSBase>,d0
    b516:	|         movea.l d0,a6
    b518:	|         move.l 26(sp),d1
    b51c:	|         jsr -36(a6)
    b520:	|         move.l d0,22(sp)
	clearStackLib ();
    b524:	|         jsr b204 <clearStackLib>

	cameraX = camerX;
    b52a:	|         move.l 66(sp),1b2ea <cameraX>
	cameraY = camerY;
    b532:	|         move.l 62(sp),1b2ee <cameraY>
	cameraZoom = camerZ;
    b53a:	|         move.l 58(sp),1ab78 <cameraZoom>

	return TRUE;
    b542:	|         moveq #1,d0
}
    b544:	\-------> movem.l (sp)+,d2-d3/a6
    b548:	          lea 128(sp),sp
    b54c:	          rts

0000b54e <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    b54e:	   /-> lea -64(sp),sp
    b552:	   |   move.l a6,-(sp)
    b554:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    b556:	   |   movea.l 76(sp),a0
    b55a:	   |   move.l (a0),d0
    b55c:	   |   move.l 80(sp),-(sp)
    b560:	   |   move.l d0,-(sp)
    b562:	   |   jsr 8d0 <put2bytes>
    b568:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    b56a:	   |   movea.l 76(sp),a0
    b56e:	   |   move.l 40(a0),d0
    b572:	/--|-- beq.s b5ae <saveFunction+0x60>
		FPutC (fp, 1);
    b574:	|  |   move.l 80(sp),52(sp)
    b57a:	|  |   moveq #1,d0
    b57c:	|  |   move.l d0,48(sp)
    b580:	|  |   move.l 1b1e0 <DOSBase>,d0
    b586:	|  |   movea.l d0,a6
    b588:	|  |   move.l 52(sp),d1
    b58c:	|  |   move.l 48(sp),d2
    b590:	|  |   jsr -312(a6)
    b594:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    b598:	|  |   movea.l 76(sp),a0
    b59c:	|  |   move.l 40(a0),d0
    b5a0:	|  |   move.l 80(sp),-(sp)
    b5a4:	|  |   move.l d0,-(sp)
    b5a6:	|  \-- jsr b54e <saveFunction>(pc)
    b5aa:	|      addq.l #8,sp
    b5ac:	|  /-- bra.s b5d0 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    b5ae:	\--|-> move.l 80(sp),64(sp)
    b5b4:	   |   clr.l 60(sp)
    b5b8:	   |   move.l 1b1e0 <DOSBase>,d0
    b5be:	   |   movea.l d0,a6
    b5c0:	   |   move.l 64(sp),d1
    b5c4:	   |   move.l 60(sp),d2
    b5c8:	   |   jsr -312(a6)
    b5cc:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    b5d0:	   \-> movea.l 76(sp),a0
    b5d4:	       move.l 12(a0),d0
    b5d8:	       move.l 80(sp),-(sp)
    b5dc:	       move.l d0,-(sp)
    b5de:	       jsr 958 <put4bytes>
    b5e4:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    b5e6:	       movea.l 76(sp),a0
    b5ea:	       move.l 36(a0),d0
    b5ee:	       move.l 80(sp),-(sp)
    b5f2:	       move.l d0,-(sp)
    b5f4:	       jsr 8d0 <put2bytes>
    b5fa:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    b5fc:	       move.l 80(sp),40(sp)
    b602:	       movea.l 76(sp),a0
    b606:	       move.w 54(a0),d0
    b60a:	       movea.w d0,a0
    b60c:	       move.l a0,36(sp)
    b610:	       move.l 1b1e0 <DOSBase>,d0
    b616:	       movea.l d0,a6
    b618:	       move.l 40(sp),d1
    b61c:	       move.l 36(sp),d2
    b620:	       jsr -312(a6)
    b624:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    b628:	       move.l 80(sp),28(sp)
    b62e:	       movea.l 76(sp),a0
    b632:	       move.w 48(a0),d0
    b636:	       movea.w d0,a0
    b638:	       move.l a0,24(sp)
    b63c:	       move.l 1b1e0 <DOSBase>,d0
    b642:	       movea.l d0,a6
    b644:	       move.l 28(sp),d1
    b648:	       move.l 24(sp),d2
    b64c:	       jsr -312(a6)
    b650:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    b654:	       move.l 80(sp),16(sp)
    b65a:	       movea.l 76(sp),a0
    b65e:	       move.w 50(a0),d0
    b662:	       movea.w d0,a0
    b664:	       move.l a0,12(sp)
    b668:	       move.l 1b1e0 <DOSBase>,d0
    b66e:	       movea.l d0,a6
    b670:	       move.l 16(sp),d1
    b674:	       move.l 12(sp),d2
    b678:	       jsr -312(a6)
    b67c:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    b680:	       moveq #28,d0
    b682:	       add.l 76(sp),d0
    b686:	       move.l 80(sp),-(sp)
    b68a:	       move.l d0,-(sp)
    b68c:	       jsr be0a <saveVariable>
    b692:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    b694:	       movea.l 76(sp),a0
    b698:	       move.b 56(a0),d0
    b69c:	   /-- beq.s b6ac <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    b69e:	   |   pea 17b7d <PutChar+0x1607>
    b6a4:	   |   jsr 15c26 <KPrintF>
    b6aa:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    b6ac:	   \-> movea.l 76(sp),a0
    b6b0:	       move.l 24(a0),d0
    b6b4:	       move.l 80(sp),-(sp)
    b6b8:	       move.l d0,-(sp)
    b6ba:	       jsr bc7e <saveStack>
    b6c0:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b6c2:	       clr.l 68(sp)
    b6c6:	   /-- bra.s b6ea <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    b6c8:	/--|-> movea.l 76(sp),a0
    b6cc:	|  |   move.l 20(a0),d1
    b6d0:	|  |   move.l 68(sp),d0
    b6d4:	|  |   lsl.l #3,d0
    b6d6:	|  |   add.l d1,d0
    b6d8:	|  |   move.l 80(sp),-(sp)
    b6dc:	|  |   move.l d0,-(sp)
    b6de:	|  |   jsr be0a <saveVariable>
    b6e4:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    b6e6:	|  |   addq.l #1,68(sp)
    b6ea:	|  \-> movea.l 76(sp),a0
    b6ee:	|      move.l 8(a0),d0
    b6f2:	|      cmp.l 68(sp),d0
    b6f6:	\----- bgt.s b6c8 <saveFunction+0x17a>
	}
}
    b6f8:	       nop
    b6fa:	       nop
    b6fc:	       move.l (sp)+,d2
    b6fe:	       movea.l (sp)+,a6
    b700:	       lea 64(sp),sp
    b704:	       rts

0000b706 <saveGame>:

BOOL saveGame (char * fname) {
    b706:	          lea -272(sp),sp
    b70a:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    b70e:	          move.l 288(sp),268(sp)
    b714:	          move.l #1006,264(sp)
    b71c:	          move.l 1b1e0 <DOSBase>,d0
    b722:	          movea.l d0,a6
    b724:	          move.l 268(sp),d1
    b728:	          move.l 264(sp),d2
    b72c:	          jsr -30(a6)
    b730:	          move.l d0,260(sp)
    b734:	          move.l 260(sp),d0
    b738:	          move.l d0,256(sp)
	if (fp == NULL) {
    b73c:	      /-- bne.s b752 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    b73e:	      |   pea 17b9f <PutChar+0x1629>
    b744:	      |   jsr 15c26 <KPrintF>
    b74a:	      |   addq.l #4,sp
		return FALSE;
    b74c:	      |   clr.w d0
    b74e:	/-----|-- bra.w bc74 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    b752:	|     \-> move.l 256(sp),252(sp)
    b758:	|         move.l #97212,248(sp)
    b760:	|         moveq #6,d0
    b762:	|         move.l d0,244(sp)
    b766:	|         move.l 1b1e0 <DOSBase>,d0
    b76c:	|         movea.l d0,a6
    b76e:	|         move.l 252(sp),d1
    b772:	|         move.l 248(sp),d2
    b776:	|         move.l 244(sp),d3
    b77a:	|         jsr -48(a6)
    b77e:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    b782:	|         move.l 256(sp),236(sp)
    b788:	|         clr.l 232(sp)
    b78c:	|         move.l 1b1e0 <DOSBase>,d0
    b792:	|         movea.l d0,a6
    b794:	|         move.l 236(sp),d1
    b798:	|         move.l 232(sp),d2
    b79c:	|         jsr -312(a6)
    b7a0:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    b7a4:	|         move.l 256(sp),224(sp)
    b7aa:	|         clr.l 220(sp)
    b7ae:	|         move.l 1b1e0 <DOSBase>,d0
    b7b4:	|         movea.l d0,a6
    b7b6:	|         move.l 224(sp),d1
    b7ba:	|         move.l 220(sp),d2
    b7be:	|         jsr -312(a6)
    b7c2:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    b7c6:	|         move.l 256(sp),212(sp)
    b7cc:	|         moveq #2,d0
    b7ce:	|         move.l d0,208(sp)
    b7d2:	|         move.l 1b1e0 <DOSBase>,d0
    b7d8:	|         movea.l d0,a6
    b7da:	|         move.l 212(sp),d1
    b7de:	|         move.l 208(sp),d2
    b7e2:	|         jsr -312(a6)
    b7e6:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    b7ea:	|         move.l 256(sp),200(sp)
    b7f0:	|         moveq #2,d0
    b7f2:	|         move.l d0,196(sp)
    b7f6:	|         move.l 1b1e0 <DOSBase>,d0
    b7fc:	|         movea.l d0,a6
    b7fe:	|         move.l 200(sp),d1
    b802:	|         move.l 196(sp),d2
    b806:	|         jsr -312(a6)
    b80a:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    b80e:	|         move.l 256(sp),188(sp)
    b814:	|         move.l #110970,184(sp)
    b81c:	|         moveq #8,d0
    b81e:	|         move.l d0,180(sp)
    b822:	|         move.l 1b1e0 <DOSBase>,d0
    b828:	|         movea.l d0,a6
    b82a:	|         move.l 188(sp),d1
    b82e:	|         move.l 184(sp),d2
    b832:	|         move.l 180(sp),d3
    b836:	|         jsr -48(a6)
    b83a:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    b83e:	|         move.l 256(sp),172(sp)
    b844:	|         move.w 1aa36 <allowAnyFilename>,d0
    b84a:	|         movea.w d0,a0
    b84c:	|         move.l a0,168(sp)
    b850:	|         move.l 1b1e0 <DOSBase>,d0
    b856:	|         movea.l d0,a6
    b858:	|         move.l 172(sp),d1
    b85c:	|         move.l 168(sp),d2
    b860:	|         jsr -312(a6)
    b864:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    b868:	|         move.l 256(sp),160(sp)
    b86e:	|         move.w 1b178 <captureAllKeys>,d0
    b874:	|         movea.w d0,a0
    b876:	|         move.l a0,156(sp)
    b87a:	|         move.l 1b1e0 <DOSBase>,d0
    b880:	|         movea.l d0,a6
    b882:	|         move.l 160(sp),d1
    b886:	|         move.l 156(sp),d2
    b88a:	|         jsr -312(a6)
    b88e:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    b892:	|         move.l 256(sp),148(sp)
    b898:	|         moveq #1,d0
    b89a:	|         move.l d0,144(sp)
    b89e:	|         move.l 1b1e0 <DOSBase>,d0
    b8a4:	|         movea.l d0,a6
    b8a6:	|         move.l 148(sp),d1
    b8aa:	|         move.l 144(sp),d2
    b8ae:	|         jsr -312(a6)
    b8b2:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    b8b6:	|         move.l 256(sp),136(sp)
    b8bc:	|         move.l 1b334 <fontTableSize>,d0
    b8c2:	|         sgt d0
    b8c4:	|         neg.b d0
    b8c6:	|         move.b d0,d0
    b8c8:	|         andi.l #255,d0
    b8ce:	|         move.l d0,132(sp)
    b8d2:	|         move.l 1b1e0 <DOSBase>,d0
    b8d8:	|         movea.l d0,a6
    b8da:	|         move.l 136(sp),d1
    b8de:	|         move.l 132(sp),d2
    b8e2:	|         jsr -312(a6)
    b8e6:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    b8ea:	|         move.l 1b334 <fontTableSize>,d0
    b8f0:	|     /-- ble.s b92e <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    b8f2:	|     |   move.l 1b32c <loadedFontNum>,d0
    b8f8:	|     |   move.l 256(sp),-(sp)
    b8fc:	|     |   move.l d0,-(sp)
    b8fe:	|     |   jsr 8d0 <put2bytes>
    b904:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    b906:	|     |   move.l 1b328 <fontHeight>,d0
    b90c:	|     |   move.l 256(sp),-(sp)
    b910:	|     |   move.l d0,-(sp)
    b912:	|     |   jsr 8d0 <put2bytes>
    b918:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    b91a:	|     |   move.l 1b330 <fontOrderString>,d0
    b920:	|     |   move.l 256(sp),-(sp)
    b924:	|     |   move.l d0,-(sp)
    b926:	|     |   jsr bd8 <writeString>
    b92c:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    b92e:	|     \-> move.w 1b0de <fontSpace>,d0
    b934:	|         movea.w d0,a0
    b936:	|         move.l 256(sp),-(sp)
    b93a:	|         move.l a0,-(sp)
    b93c:	|         jsr a9c <putSigned>
    b942:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    b944:	|         move.l 1b2ea <cameraX>,d0
    b94a:	|         move.l 256(sp),-(sp)
    b94e:	|         move.l d0,-(sp)
    b950:	|         jsr 8d0 <put2bytes>
    b956:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    b958:	|         move.l 1b2ee <cameraY>,d0
    b95e:	|         move.l 256(sp),-(sp)
    b962:	|         move.l d0,-(sp)
    b964:	|         jsr 8d0 <put2bytes>
    b96a:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    b96c:	|         move.l 1ab78 <cameraZoom>,d0
    b972:	|         move.l 256(sp),-(sp)
    b976:	|         move.l d0,-(sp)
    b978:	|         jsr a46 <putFloat>
    b97e:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    b980:	|         move.l 256(sp),124(sp)
    b986:	|         move.b 1ab50 <brightnessLevel>,d0
    b98c:	|         move.b d0,d0
    b98e:	|         andi.l #255,d0
    b994:	|         move.l d0,120(sp)
    b998:	|         move.l 1b1e0 <DOSBase>,d0
    b99e:	|         movea.l d0,a6
    b9a0:	|         move.l 124(sp),d1
    b9a4:	|         move.l 120(sp),d2
    b9a8:	|         jsr -312(a6)
    b9ac:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    b9b0:	|         move.l 256(sp),-(sp)
    b9b4:	|         jsr 58e6 <saveHandlers>
    b9ba:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    b9bc:	|         move.l 256(sp),-(sp)
    b9c0:	|         jsr 1468c <saveRegions>
    b9c6:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    b9c8:	|         move.l 1b0e0 <mouseCursorAnim>,d0
    b9ce:	|         move.l 256(sp),-(sp)
    b9d2:	|         move.l d0,-(sp)
    b9d4:	|         jsr 9fae <saveAnim>
    b9da:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    b9dc:	|         move.l 1b0e4 <mouseCursorFrameNum>,d0
    b9e2:	|         move.l 256(sp),-(sp)
    b9e6:	|         move.l d0,-(sp)
    b9e8:	|         jsr 8d0 <put2bytes>
    b9ee:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    b9f0:	|         move.l 1b170 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    b9f8:	|         clr.l 272(sp)
	while (thisFunction) {
    b9fc:	|     /-- bra.s ba0c <saveGame+0x306>
		countFunctions ++;
    b9fe:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    ba02:	|  |  |   movea.l 276(sp),a0
    ba06:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    ba0c:	|  |  \-> tst.l 276(sp)
    ba10:	|  \----- bne.s b9fe <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    ba12:	|         move.l 256(sp),-(sp)
    ba16:	|         move.l 276(sp),-(sp)
    ba1a:	|         jsr 8d0 <put2bytes>
    ba20:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    ba22:	|         move.l 1b170 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    ba2a:	|     /-- bra.s ba46 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    ba2c:	|  /--|-> move.l 256(sp),-(sp)
    ba30:	|  |  |   move.l 280(sp),-(sp)
    ba34:	|  |  |   jsr b54e <saveFunction>
    ba3a:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ba3c:	|  |  |   movea.l 276(sp),a0
    ba40:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    ba46:	|  |  \-> tst.l 276(sp)
    ba4a:	|  \----- bne.s ba2c <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    ba4c:	|         clr.l 280(sp)
    ba50:	|     /-- bra.s ba72 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    ba52:	|  /--|-> move.l 1b186 <globalVars>,d1
    ba58:	|  |  |   move.l 280(sp),d0
    ba5c:	|  |  |   lsl.l #3,d0
    ba5e:	|  |  |   add.l d1,d0
    ba60:	|  |  |   move.l 256(sp),-(sp)
    ba64:	|  |  |   move.l d0,-(sp)
    ba66:	|  |  |   jsr be0a <saveVariable>
    ba6c:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    ba6e:	|  |  |   addq.l #1,280(sp)
    ba72:	|  |  \-> move.l 1b1b0 <numGlobals>,d0
    ba78:	|  |      cmp.l 280(sp),d0
    ba7c:	|  \----- bgt.s ba52 <saveGame+0x34c>
	}

	savePeople (fp);
    ba7e:	|         move.l 256(sp),-(sp)
    ba82:	|         jsr a0d6 <savePeople>
    ba88:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    ba8a:	|         movea.l 1b344 <currentFloor>,a0
    ba90:	|         move.l 8(a0),d0
    ba94:	|  /----- beq.s bad2 <saveGame+0x3cc>
		FPutC (fp, 1);
    ba96:	|  |      move.l 256(sp),100(sp)
    ba9c:	|  |      moveq #1,d0
    ba9e:	|  |      move.l d0,96(sp)
    baa2:	|  |      move.l 1b1e0 <DOSBase>,d0
    baa8:	|  |      movea.l d0,a6
    baaa:	|  |      move.l 100(sp),d1
    baae:	|  |      move.l 96(sp),d2
    bab2:	|  |      jsr -312(a6)
    bab6:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    baba:	|  |      movea.l 1b344 <currentFloor>,a0
    bac0:	|  |      move.l (a0),d0
    bac2:	|  |      move.l 256(sp),-(sp)
    bac6:	|  |      move.l d0,-(sp)
    bac8:	|  |      jsr 8d0 <put2bytes>
    bace:	|  |      addq.l #8,sp
    bad0:	|  |  /-- bra.s baf4 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    bad2:	|  \--|-> move.l 256(sp),112(sp)
    bad8:	|     |   clr.l 108(sp)
    badc:	|     |   move.l 1b1e0 <DOSBase>,d0
    bae2:	|     |   movea.l d0,a6
    bae4:	|     |   move.l 112(sp),d1
    bae8:	|     |   move.l 108(sp),d2
    baec:	|     |   jsr -312(a6)
    baf0:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    baf4:	|     \-> move.l 1b288 <zBuffer+0x50>,d0
    bafa:	|  /----- beq.s bb36 <saveGame+0x430>
		FPutC (fp, 1);
    bafc:	|  |      move.l 256(sp),76(sp)
    bb02:	|  |      moveq #1,d0
    bb04:	|  |      move.l d0,72(sp)
    bb08:	|  |      move.l 1b1e0 <DOSBase>,d0
    bb0e:	|  |      movea.l d0,a6
    bb10:	|  |      move.l 76(sp),d1
    bb14:	|  |      move.l 72(sp),d2
    bb18:	|  |      jsr -312(a6)
    bb1c:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    bb20:	|  |      move.l 1b284 <zBuffer+0x4c>,d0
    bb26:	|  |      move.l 256(sp),-(sp)
    bb2a:	|  |      move.l d0,-(sp)
    bb2c:	|  |      jsr 8d0 <put2bytes>
    bb32:	|  |      addq.l #8,sp
    bb34:	|  |  /-- bra.s bb58 <saveGame+0x452>
	} else FPutC (fp,0);
    bb36:	|  \--|-> move.l 256(sp),88(sp)
    bb3c:	|     |   clr.l 84(sp)
    bb40:	|     |   move.l 1b1e0 <DOSBase>,d0
    bb46:	|     |   movea.l d0,a6
    bb48:	|     |   move.l 88(sp),d1
    bb4c:	|     |   move.l 84(sp),d2
    bb50:	|     |   jsr -312(a6)
    bb54:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    bb58:	|     \-> move.l 256(sp),64(sp)
    bb5e:	|         move.l 1b2fe <speechMode>,60(sp)
    bb66:	|         move.l 1b1e0 <DOSBase>,d0
    bb6c:	|         movea.l d0,a6
    bb6e:	|         move.l 64(sp),d1
    bb72:	|         move.l 60(sp),d2
    bb76:	|         jsr -312(a6)
    bb7a:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    bb7e:	|         move.b 1b0b4 <fadeMode>,d0
    bb84:	|         move.b d0,d0
    bb86:	|         andi.l #255,d0
    bb8c:	|         move.l d0,52(sp)
    bb90:	|         move.l 256(sp),48(sp)
    bb96:	|         move.l 1b1e0 <DOSBase>,d0
    bb9c:	|         movea.l d0,a6
    bb9e:	|         move.l 52(sp),d1
    bba2:	|         move.l 48(sp),d2
    bba6:	|         jsr -312(a6)
    bbaa:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    bbae:	|         move.l 1b234 <speech>,d0
    bbb4:	|         move.l 256(sp),-(sp)
    bbb8:	|         move.l d0,-(sp)
    bbba:	|         jsr 6f10 <saveSpeech>
    bbc0:	|         addq.l #8,sp
	saveStatusBars (fp);
    bbc2:	|         move.l 256(sp),-(sp)
    bbc6:	|         jsr 690c <saveStatusBars>
    bbcc:	|         addq.l #4,sp
	saveSounds (fp);
    bbce:	|         move.l 256(sp),-(sp)
    bbd2:	|         jsr c174 <saveSounds>
    bbd8:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    bbda:	|         move.w 1b2e8 <saveEncoding>,d0
    bbe0:	|         move.w d0,d0
    bbe2:	|         andi.l #65535,d0
    bbe8:	|         move.l 256(sp),-(sp)
    bbec:	|         move.l d0,-(sp)
    bbee:	|         jsr 8d0 <put2bytes>
    bbf4:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    bbf6:	|         move.l 1b2da <parallaxStuff>,d0
    bbfc:	|         move.l 256(sp),-(sp)
    bc00:	|         move.l d0,-(sp)
    bc02:	|         jsr c46c <saveParallaxRecursive>
    bc08:	|         addq.l #8,sp
	FPutC (fp, 0);
    bc0a:	|         move.l 256(sp),40(sp)
    bc10:	|         clr.l 36(sp)
    bc14:	|         move.l 1b1e0 <DOSBase>,d0
    bc1a:	|         movea.l d0,a6
    bc1c:	|         move.l 40(sp),d1
    bc20:	|         move.l 36(sp),d2
    bc24:	|         jsr -312(a6)
    bc28:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    bc2c:	|         move.l 256(sp),28(sp)
    bc32:	|         move.l 1ab56 <languageNum>,24(sp)
    bc3a:	|         move.l 1b1e0 <DOSBase>,d0
    bc40:	|         movea.l d0,a6
    bc42:	|         move.l 28(sp),d1
    bc46:	|         move.l 24(sp),d2
    bc4a:	|         jsr -312(a6)
    bc4e:	|         move.l d0,20(sp)

	Close(fp);
    bc52:	|         move.l 256(sp),16(sp)
    bc58:	|         move.l 1b1e0 <DOSBase>,d0
    bc5e:	|         movea.l d0,a6
    bc60:	|         move.l 16(sp),d1
    bc64:	|         jsr -36(a6)
    bc68:	|         move.l d0,12(sp)
	clearStackLib ();
    bc6c:	|         jsr b204 <clearStackLib>
	return TRUE;
    bc72:	|         moveq #1,d0
}
    bc74:	\-------> movem.l (sp)+,d2-d3/a6
    bc78:	          lea 272(sp),sp
    bc7c:	          rts

0000bc7e <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    bc7e:	       lea -12(sp),sp
	int elements = 0;
    bc82:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    bc86:	       move.l 16(sp),(sp)
	while (search) {
    bc8a:	   /-- bra.s bc96 <saveStack+0x18>
		elements ++;
    bc8c:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    bc90:	|  |   movea.l (sp),a0
    bc92:	|  |   move.l 8(a0),(sp)
	while (search) {
    bc96:	|  \-> tst.l (sp)
    bc98:	\----- bne.s bc8c <saveStack+0xe>
	}

	put2bytes (elements, fp);
    bc9a:	       move.l 20(sp),-(sp)
    bc9e:	       move.l 12(sp),-(sp)
    bca2:	       jsr 8d0 <put2bytes>
    bca8:	       addq.l #8,sp
	search = vs;
    bcaa:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    bcae:	       clr.l 4(sp)
    bcb2:	   /-- bra.s bcce <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    bcb4:	/--|-> move.l (sp),d0
    bcb6:	|  |   move.l 20(sp),-(sp)
    bcba:	|  |   move.l d0,-(sp)
    bcbc:	|  |   jsr be0a <saveVariable>
    bcc2:	|  |   addq.l #8,sp
		search = search -> next;
    bcc4:	|  |   movea.l (sp),a0
    bcc6:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    bcca:	|  |   addq.l #1,4(sp)
    bcce:	|  \-> move.l 4(sp),d0
    bcd2:	|      cmp.l 8(sp),d0
    bcd6:	\----- blt.s bcb4 <saveStack+0x36>
	}
}
    bcd8:	       nop
    bcda:	       nop
    bcdc:	       lea 12(sp),sp
    bce0:	       rts

0000bce2 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    bce2:	             lea -44(sp),sp
    bce6:	             move.l a6,-(sp)
    bce8:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    bcea:	             move.l 1b2bc <stackLib>,48(sp)
	int a = 0;
    bcf2:	             clr.l 44(sp)
	while (s) {
    bcf6:	      /----- bra.s bd54 <saveStackRef+0x72>
		if (s -> stack == vs) {
    bcf8:	   /--|----> movea.l 48(sp),a0
    bcfc:	   |  |      move.l (a0),d0
    bcfe:	   |  |      cmp.l 56(sp),d0
    bd02:	   |  |  /-- bne.s bd46 <saveStackRef+0x64>
			FPutC (fp, 1);
    bd04:	   |  |  |   move.l 60(sp),16(sp)
    bd0a:	   |  |  |   moveq #1,d0
    bd0c:	   |  |  |   move.l d0,12(sp)
    bd10:	   |  |  |   move.l 1b1e0 <DOSBase>,d0
    bd16:	   |  |  |   movea.l d0,a6
    bd18:	   |  |  |   move.l 16(sp),d1
    bd1c:	   |  |  |   move.l 12(sp),d2
    bd20:	   |  |  |   jsr -312(a6)
    bd24:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    bd28:	   |  |  |   move.l 1b2b8 <stackLibTotal>,d0
    bd2e:	   |  |  |   sub.l 44(sp),d0
    bd32:	   |  |  |   move.l 60(sp),-(sp)
    bd36:	   |  |  |   move.l d0,-(sp)
    bd38:	   |  |  |   jsr 8d0 <put2bytes>
    bd3e:	   |  |  |   addq.l #8,sp
			return TRUE;
    bd40:	   |  |  |   moveq #1,d0
    bd42:	/--|--|--|-- bra.w be00 <saveStackRef+0x11e>
		}
		s = s -> next;
    bd46:	|  |  |  \-> movea.l 48(sp),a0
    bd4a:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    bd50:	|  |  |      addq.l #1,44(sp)
	while (s) {
    bd54:	|  |  \----> tst.l 48(sp)
    bd58:	|  \-------- bne.s bcf8 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    bd5a:	|            move.l 60(sp),40(sp)
    bd60:	|            clr.l 36(sp)
    bd64:	|            move.l 1b1e0 <DOSBase>,d0
    bd6a:	|            movea.l d0,a6
    bd6c:	|            move.l 40(sp),d1
    bd70:	|            move.l 36(sp),d2
    bd74:	|            jsr -312(a6)
    bd78:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    bd7c:	|            movea.l 56(sp),a0
    bd80:	|            move.l (a0),d0
    bd82:	|            move.l 60(sp),-(sp)
    bd86:	|            move.l d0,-(sp)
    bd88:	|            jsr bc7e <saveStack>
    bd8e:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    bd90:	|            moveq #8,d0
    bd92:	|            move.l d0,28(sp)
    bd96:	|            clr.l 24(sp)
    bd9a:	|            move.l 1b1d8 <SysBase>,d0
    bda0:	|            movea.l d0,a6
    bda2:	|            move.l 28(sp),d0
    bda6:	|            move.l 24(sp),d1
    bdaa:	|            jsr -684(a6)
    bdae:	|            move.l d0,20(sp)
    bdb2:	|            move.l 20(sp),d0
    bdb6:	|            move.l d0,48(sp)
	stackLibTotal ++;
    bdba:	|            move.l 1b2b8 <stackLibTotal>,d0
    bdc0:	|            addq.l #1,d0
    bdc2:	|            move.l d0,1b2b8 <stackLibTotal>
	if (! s) {
    bdc8:	|            tst.l 48(sp)
    bdcc:	|        /-- bne.s bde0 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    bdce:	|        |   pea 17beb <PutChar+0x1675>
    bdd4:	|        |   jsr 15c26 <KPrintF>
    bdda:	|        |   addq.l #4,sp
		return FALSE;
    bddc:	|        |   clr.w d0
    bdde:	+--------|-- bra.s be00 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    bde0:	|        \-> move.l 1b2bc <stackLib>,d0
    bde6:	|            movea.l 48(sp),a0
    bdea:	|            move.l d0,4(a0)
	s -> stack = vs;
    bdee:	|            movea.l 48(sp),a0
    bdf2:	|            move.l 56(sp),(a0)
	stackLib = s;
    bdf6:	|            move.l 48(sp),1b2bc <stackLib>
	return TRUE;
    bdfe:	|            moveq #1,d0
}
    be00:	\----------> move.l (sp)+,d2
    be02:	             movea.l (sp)+,a6
    be04:	             lea 44(sp),sp
    be08:	             rts

0000be0a <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    be0a:	          lea -12(sp),sp
    be0e:	          move.l a6,-(sp)
    be10:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    be12:	          move.l 28(sp),16(sp)
    be18:	          movea.l 24(sp),a0
    be1c:	          move.l (a0),d0
    be1e:	          move.l d0,12(sp)
    be22:	          move.l 1b1e0 <DOSBase>,d0
    be28:	          movea.l d0,a6
    be2a:	          move.l 16(sp),d1
    be2e:	          move.l 12(sp),d2
    be32:	          jsr -312(a6)
    be36:	          move.l d0,8(sp)
	switch (from -> varType) {
    be3a:	          movea.l 24(sp),a0
    be3e:	          move.l (a0),d0
    be40:	          moveq #9,d1
    be42:	          cmp.l d0,d1
    be44:	      /-- bcs.w bef4 <saveVariable+0xea>
    be48:	      |   add.l d0,d0
    be4a:	      |   movea.l d0,a0
    be4c:	      |   adda.l #48728,a0
    be52:	      |   move.w (a0),d0
    be54:	      |   jmp (be58 <saveVariable+0x4e>,pc,d0.w)
    be58:	      |   ori.l #1310740,(a0)+
    be5e:	      |   ori.b #20,(20,a0,d0.w)
    be64:	      |   .short 0x004c
    be66:	      |   ori.b #126,(a4)
    be6a:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    be6e:	      |   ori.b #40,(a0)+
    be72:	      |   ori.b #47,d4
    be76:	      |   ori.b #0,(a4)+
    be7a:	      |   jsr 958 <put4bytes>
    be80:	      |   addq.l #8,sp
		return TRUE;
    be82:	      |   moveq #1,d0
    be84:	/-----|-- bra.w bf30 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    be88:	|     |   movea.l 24(sp),a0
    be8c:	|     |   move.l 4(a0),d0
    be90:	|     |   move.l 28(sp),-(sp)
    be94:	|     |   move.l d0,-(sp)
    be96:	|     |   jsr bd8 <writeString>
    be9c:	|     |   addq.l #8,sp
		return TRUE;
    be9e:	|     |   moveq #1,d0
    bea0:	+-----|-- bra.w bf30 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    bea4:	|     |   movea.l 24(sp),a0
    bea8:	|     |   move.l 4(a0),d0
    beac:	|     |   move.l 28(sp),-(sp)
    beb0:	|     |   move.l d0,-(sp)
    beb2:	|     |   jsr bce2 <saveStackRef>
    beb8:	|     |   addq.l #8,sp
    beba:	+-----|-- bra.s bf30 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    bebc:	|     |   movea.l 24(sp),a0
    bec0:	|     |   move.l 4(a0),d0
    bec4:	|     |   move.l 28(sp),-(sp)
    bec8:	|     |   move.l d0,-(sp)
    beca:	|     |   jsr a078 <saveCostume>
    bed0:	|     |   addq.l #8,sp
		return FALSE;
    bed2:	|     |   clr.w d0
    bed4:	+-----|-- bra.s bf30 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    bed6:	|     |   movea.l 24(sp),a0
    beda:	|     |   move.l 4(a0),d0
    bede:	|     |   move.l 28(sp),-(sp)
    bee2:	|     |   move.l d0,-(sp)
    bee4:	|     |   jsr 9fae <saveAnim>
    beea:	|     |   addq.l #8,sp
		return FALSE;
    beec:	|     |   clr.w d0
    beee:	+-----|-- bra.s bf30 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    bef0:	|     |   clr.w d0
    bef2:	+-----|-- bra.s bf30 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    bef4:	|     \-> movea.l 24(sp),a0
    bef8:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    befa:	|         moveq #10,d1
    befc:	|         cmp.l d0,d1
    befe:	|  /----- bcs.s bf18 <saveVariable+0x10e>
						typeName[from->varType] :
    bf00:	|  |      movea.l 24(sp),a0
    bf04:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    bf06:	|  |      add.l d0,d0
    bf08:	|  |      movea.l d0,a1
    bf0a:	|  |      adda.l d0,a1
    bf0c:	|  |      lea 1b0b6 <typeName>,a0
    bf12:	|  |      move.l (0,a1,a0.l),d0
    bf16:	|  |  /-- bra.s bf1e <saveVariable+0x114>
    bf18:	|  \--|-> move.l #97296,d0
    bf1e:	|     \-> move.l d0,-(sp)
    bf20:	|         pea 17c17 <PutChar+0x16a1>
    bf26:	|         jsr 15c26 <KPrintF>
    bf2c:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    bf2e:	|         moveq #1,d0
    bf30:	\-------> move.l (sp)+,d2
    bf32:	          movea.l (sp)+,a6
    bf34:	          lea 12(sp),sp
    bf38:	          rts

0000bf3a <CsiCheckInput>:
extern struct inputType input;

counterx_old = 0;
countery_old = 0;

void CsiCheckInput() {
    bf3a:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    bf3e:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    bf46:	          movea.l 4(sp),a0
    bf4a:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    bf50:	          movea.l 4(sp),a0
    bf54:	          move.w 10(a0),d0
    bf58:	          lsr.w #8,d0
    bf5a:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    bf5e:	          movea.l 4(sp),a0
    bf62:	          move.w 10(a0),d0
    bf66:	          move.b d0,(sp)

    if(counterx_new)
    bf68:	/-------- beq.w c010 <CsiCheckInput+0xd6>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    bf6c:	|         clr.w d1
    bf6e:	|         move.b (sp),d1
    bf70:	|         move.l 1b2c4 <counterx_old>,d0
    bf76:	|         move.l d0,d0
    bf78:	|         sub.w d0,d1
    bf7a:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    bf7e:	|         cmpi.w #128,10(sp)
    bf84:	|     /-- blt.s bf9c <CsiCheckInput+0x62>
            input.justMoved = TRUE;                
    bf86:	|     |   move.w #1,1b18e <input+0x4>
            counterx_diff -= 256;    
    bf8e:	|     |   move.w 10(sp),d0
    bf92:	|     |   addi.w #-256,d0
    bf96:	|     |   move.w d0,10(sp)
    bf9a:	|  /--|-- bra.s bfc8 <CsiCheckInput+0x8e>
        } else if (counterx_diff < -128) {
    bf9c:	|  |  \-> cmpi.w #-129,10(sp)
    bfa2:	|  |  /-- bgt.s bfba <CsiCheckInput+0x80>
            counterx_diff += 256;
    bfa4:	|  |  |   move.w 10(sp),d0
    bfa8:	|  |  |   addi.w #256,d0
    bfac:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    bfb0:	|  |  |   move.w #1,1b18e <input+0x4>
    bfb8:	|  +--|-- bra.s bfc8 <CsiCheckInput+0x8e>
        } else if (counterx_diff) {
    bfba:	|  |  \-> tst.w 10(sp)
    bfbe:	|  +----- beq.s bfc8 <CsiCheckInput+0x8e>
            input.justMoved = TRUE;
    bfc0:	|  |      move.w #1,1b18e <input+0x4>
        }

        input.mouseX += counterx_diff;
    bfc8:	|  \----> move.l 1b194 <input+0xa>,d0
    bfce:	|         movea.w 10(sp),a0
    bfd2:	|         add.l a0,d0
    bfd4:	|         move.l d0,1b194 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    bfda:	|         move.l 1b194 <input+0xa>,d1
    bfe0:	|         move.l 1b12c <winWidth>,d0
    bfe6:	|         cmp.l d1,d0
    bfe8:	|     /-- bge.s bff8 <CsiCheckInput+0xbe>
            input.mouseX = winWidth;            
    bfea:	|     |   move.l 1b12c <winWidth>,d0
    bff0:	|     |   move.l d0,1b194 <input+0xa>
    bff6:	|  /--|-- bra.s c006 <CsiCheckInput+0xcc>
        }
        else if(input.mouseX < 0) {
    bff8:	|  |  \-> move.l 1b194 <input+0xa>,d0
    bffe:	|  +----- bpl.s c006 <CsiCheckInput+0xcc>
            input.mouseX = 0;
    c000:	|  |      clr.l 1b194 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    c006:	|  \----> moveq #0,d0
    c008:	|         move.b (sp),d0
    c00a:	|         move.l d0,1b2c4 <counterx_old>
    }    

    if(countery_new)
    c010:	\-------> tst.b 1(sp)
    c014:	/-------- beq.w c0c0 <CsiCheckInput+0x186>
    {
        WORD countery_diff = countery_new - countery_old;
    c018:	|         clr.w d1
    c01a:	|         move.b 1(sp),d1
    c01e:	|         move.l 1b2c8 <countery_old>,d0
    c024:	|         move.l d0,d0
    c026:	|         sub.w d0,d1
    c028:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    c02c:	|         cmpi.w #128,8(sp)
    c032:	|     /-- blt.s c04a <CsiCheckInput+0x110>
            input.justMoved = TRUE;                
    c034:	|     |   move.w #1,1b18e <input+0x4>
            countery_diff -= 256;    
    c03c:	|     |   move.w 8(sp),d0
    c040:	|     |   addi.w #-256,d0
    c044:	|     |   move.w d0,8(sp)
    c048:	|  /--|-- bra.s c076 <CsiCheckInput+0x13c>
        } else if (countery_diff < -128) {
    c04a:	|  |  \-> cmpi.w #-129,8(sp)
    c050:	|  |  /-- bgt.s c068 <CsiCheckInput+0x12e>
            input.justMoved = TRUE;                
    c052:	|  |  |   move.w #1,1b18e <input+0x4>
            countery_diff += 256;
    c05a:	|  |  |   move.w 8(sp),d0
    c05e:	|  |  |   addi.w #256,d0
    c062:	|  |  |   move.w d0,8(sp)
    c066:	|  +--|-- bra.s c076 <CsiCheckInput+0x13c>
        } else if (countery_diff) {
    c068:	|  |  \-> tst.w 8(sp)
    c06c:	|  +----- beq.s c076 <CsiCheckInput+0x13c>
            input.justMoved = TRUE;
    c06e:	|  |      move.w #1,1b18e <input+0x4>
        }

        input.mouseY += countery_diff;
    c076:	|  \----> move.l 1b198 <input+0xe>,d0
    c07c:	|         movea.w 8(sp),a0
    c080:	|         add.l a0,d0
    c082:	|         move.l d0,1b198 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    c088:	|         move.l 1b198 <input+0xe>,d1
    c08e:	|         move.l 1b130 <winHeight>,d0
    c094:	|         cmp.l d1,d0
    c096:	|     /-- bge.s c0a6 <CsiCheckInput+0x16c>
            input.mouseY = winHeight;            
    c098:	|     |   move.l 1b130 <winHeight>,d0
    c09e:	|     |   move.l d0,1b198 <input+0xe>
    c0a4:	|  /--|-- bra.s c0b4 <CsiCheckInput+0x17a>
        }
        else if(input.mouseY < 0) {
    c0a6:	|  |  \-> move.l 1b198 <input+0xe>,d0
    c0ac:	|  +----- bpl.s c0b4 <CsiCheckInput+0x17a>
            input.mouseY = 0;
    c0ae:	|  |      clr.l 1b198 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    c0b4:	|  \----> moveq #0,d0
    c0b6:	|         move.b 1(sp),d0
    c0ba:	|         move.l d0,1b2c8 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    c0c0:	\-------> move.w 1b18a <input>,d0
    c0c6:	      /-- beq.s c0ec <CsiCheckInput+0x1b2>
    c0c8:	      |   movea.l #12574721,a0
    c0ce:	      |   move.b (a0),d0
    c0d0:	      |   move.b d0,d0
    c0d2:	      |   andi.l #255,d0
    c0d8:	      |   moveq #64,d1
    c0da:	      |   and.l d1,d0
    c0dc:	      +-- beq.s c0ec <CsiCheckInput+0x1b2>
    {
        input.leftClick = FALSE;
    c0de:	      |   clr.w 1b18a <input>
        input.leftRelease = TRUE;
    c0e4:	      |   move.w #1,1b190 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    c0ec:	      \-> move.w 1b18c <input+0x2>,d0
    c0f2:	      /-- beq.s c11a <CsiCheckInput+0x1e0>
    c0f4:	      |   movea.l #14675990,a0
    c0fa:	      |   move.w (a0),d0
    c0fc:	      |   move.w d0,d0
    c0fe:	      |   andi.l #65535,d0
    c104:	      |   andi.l #1024,d0
    c10a:	      +-- beq.s c11a <CsiCheckInput+0x1e0>
    {
        input.rightClick = FALSE;
    c10c:	      |   clr.w 1b18c <input+0x2>
        input.rightRelease = TRUE;
    c112:	      |   move.w #1,1b192 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    c11a:	      \-> movea.l #12574721,a0
    c120:	          move.b (a0),d0
    c122:	          move.b d0,d0
    c124:	          andi.l #255,d0
    c12a:	          moveq #64,d1
    c12c:	          and.l d1,d0
    c12e:	      /-- bne.s c138 <CsiCheckInput+0x1fe>
        input.leftClick = TRUE;        
    c130:	      |   move.w #1,1b18a <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    c138:	      \-> movea.l #14675990,a0
    c13e:	          move.w (a0),d0
    c140:	          move.w d0,d0
    c142:	          andi.l #65535,d0
    c148:	          andi.l #1024,d0
    c14e:	      /-- bne.s c158 <CsiCheckInput+0x21e>
        input.rightClick = TRUE;
    c150:	      |   move.w #1,1b18c <input+0x2>
    }

    c158:	      \-> nop
    c15a:	          lea 12(sp),sp
    c15e:	          rts

0000c160 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    c160:	moveq #0,d0
}
    c162:	rts

0000c164 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    c164:	nop
    c166:	rts

0000c168 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    c168:	nop
    c16a:	rts

0000c16c <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    c16c:	moveq #1,d0
}
    c16e:	rts

0000c170 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    c170:	nop
    c172:	rts

0000c174 <saveSounds>:

void saveSounds (BPTR fp) {
    c174:	lea -12(sp),sp
    c178:	move.l a6,-(sp)
    c17a:	move.l d2,-(sp)
	FPutC (fp,0);
    c17c:	move.l 24(sp),16(sp)
    c182:	clr.l 12(sp)
    c186:	move.l 1b1e0 <DOSBase>,d0
    c18c:	movea.l d0,a6
    c18e:	move.l 16(sp),d1
    c192:	move.l 12(sp),d2
    c196:	jsr -312(a6)
    c19a:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    c19e:	move.l 1ab74 <defSoundVol>,d0
    c1a4:	move.l 24(sp),-(sp)
    c1a8:	move.l d0,-(sp)
    c1aa:	jsr 8d0 <put2bytes>
    c1b0:	addq.l #8,sp
	put2bytes (defVol, fp);
    c1b2:	move.l 1ab70 <defVol>,d0
    c1b8:	move.l 24(sp),-(sp)
    c1bc:	move.l d0,-(sp)
    c1be:	jsr 8d0 <put2bytes>
    c1c4:	addq.l #8,sp
}
    c1c6:	nop
    c1c8:	move.l (sp)+,d2
    c1ca:	movea.l (sp)+,a6
    c1cc:	lea 12(sp),sp
    c1d0:	rts

0000c1d2 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    c1d2:	move.l 4(sp),1ab70 <defVol>
}
    c1da:	nop
    c1dc:	rts

0000c1de <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    c1de:	move.l 4(sp),1ab74 <defSoundVol>
}
    c1e6:	nop
    c1e8:	rts

0000c1ea <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    c1ea:	nop
    c1ec:	rts

0000c1ee <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    c1ee:	nop
    c1f0:	rts

0000c1f2 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    c1f2:	nop
    c1f4:	rts

0000c1f6 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    c1f6:	subq.l #4,sp
    c1f8:	move.l 12(sp),d0
    c1fc:	move.w d0,d0
    c1fe:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    c202:	moveq #1,d0
}
    c204:	addq.l #4,sp
    c206:	rts

0000c208 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    c208:	nop
    c20a:	rts

0000c20c <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    c20c:	move.l 16(sp),-(sp)
    c210:	move.l 16(sp),-(sp)
    c214:	jsr e0e <CstBlankScreen>
    c21a:	addq.l #8,sp
}
    c21c:	nop
    c21e:	rts

0000c220 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    c220:	pea 17c3a <PutChar+0x16c4>
    c226:	jsr 15c26 <KPrintF>
    c22c:	addq.l #4,sp
}
    c22e:	nop
    c230:	rts

0000c232 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    c232:	movea.l 8(sp),a1
    c236:	movea.l 12(sp),a0
    c23a:	move.l 8(sp),d1
    c23e:	move.l 4(sp),d0
    c242:	move.l a1,-(sp)
    c244:	move.l a0,-(sp)
    c246:	move.l d1,-(sp)
    c248:	move.l d0,-(sp)
    c24a:	jsr 2d9a <drawLine>
    c250:	lea 16(sp),sp
}
    c254:	nop
    c256:	rts

0000c258 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    c258:	movea.l 12(sp),a1
    c25c:	movea.l 4(sp),a0
    c260:	move.l 8(sp),d1
    c264:	move.l 4(sp),d0
    c268:	move.l a1,-(sp)
    c26a:	move.l a0,-(sp)
    c26c:	move.l d1,-(sp)
    c26e:	move.l d0,-(sp)
    c270:	jsr 2d9a <drawLine>
    c276:	lea 16(sp),sp
}
    c27a:	nop
    c27c:	rts

0000c27e <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    c27e:	pea 17c73 <PutChar+0x16fd>
    c284:	jsr 15c26 <KPrintF>
    c28a:	addq.l #4,sp
}
    c28c:	nop
    c28e:	rts

0000c290 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    c290:	jsr 14e8 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    c296:	pea 1b2d4 <backdropTextureName>
    c29c:	pea 1 <_start+0x1>
    c2a0:	jsr 2f1c <deleteTextures>
    c2a6:	addq.l #8,sp
	backdropTextureName = 0;
    c2a8:	clr.l 1b2d4 <backdropTextureName>
	backdropExists = FALSE;
    c2ae:	clr.w 1b2d8 <backdropExists>
}
    c2b4:	nop
    c2b6:	rts

0000c2b8 <killParallax>:

void killParallax () {
    c2b8:	          lea -12(sp),sp
    c2bc:	          move.l a6,-(sp)
	while (parallaxStuff) {
    c2be:	   /----- bra.s c32a <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    c2c0:	/--|----> move.l 1b2da <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    c2c8:	|  |      movea.l 12(sp),a0
    c2cc:	|  |      move.l 42(a0),d0
    c2d0:	|  |      move.l d0,1b2da <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    c2d6:	|  |      move.l 12(sp),d0
    c2da:	|  |      addq.l #4,d0
    c2dc:	|  |      move.l d0,-(sp)
    c2de:	|  |      pea 1 <_start+0x1>
    c2e2:	|  |      jsr 2f1c <deleteTextures>
    c2e8:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    c2ea:	|  |      movea.l 12(sp),a0
    c2ee:	|  |      move.l (a0),d0
    c2f0:	|  |  /-- beq.s c30a <killParallax+0x52>
    c2f2:	|  |  |   movea.l 12(sp),a0
    c2f6:	|  |  |   move.l (a0),8(sp)
    c2fa:	|  |  |   move.l 1b1d8 <SysBase>,d0
    c300:	|  |  |   movea.l d0,a6
    c302:	|  |  |   movea.l 8(sp),a1
    c306:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    c30a:	|  |  \-> tst.l 12(sp)
    c30e:	|  |  /-- beq.s c326 <killParallax+0x6e>
    c310:	|  |  |   move.l 12(sp),4(sp)
    c316:	|  |  |   move.l 1b1d8 <SysBase>,d0
    c31c:	|  |  |   movea.l d0,a6
    c31e:	|  |  |   movea.l 4(sp),a1
    c322:	|  |  |   jsr -690(a6)
		k = NULL;
    c326:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    c32a:	|  \----> move.l 1b2da <parallaxStuff>,d0
    c330:	\-------- bne.s c2c0 <killParallax+0x8>
	}
}
    c332:	          nop
    c334:	          nop
    c336:	          movea.l (sp)+,a6
    c338:	          lea 12(sp),sp
    c33c:	          rts

0000c33e <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    c33e:	       move.l 4(sp),-(sp)
    c342:	       jsr 5c76 <openFileFromNum>
    c348:	       addq.l #4,sp
    c34a:	       tst.l d0
    c34c:	   /-- bne.s c35e <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    c34e:	   |   pea 17c94 <PutChar+0x171e>
    c354:	   |   jsr 15c26 <KPrintF>
    c35a:	   |   addq.l #4,sp
		return;
    c35c:	/--|-- bra.s c37e <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    c35e:	|  \-> move.l 1b1c0 <bigDataFile>,d0
    c364:	|      move.l 12(sp),-(sp)
    c368:	|      move.l 12(sp),-(sp)
    c36c:	|      move.l d0,-(sp)
    c36e:	|      jsr 1760 <CstLoadBackdrop>
    c374:	|      lea 12(sp),sp
	finishAccess ();
    c378:	|      jsr 5b6e <finishAccess>
	
}
    c37e:	\----> rts

0000c380 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    c380:	subq.l #8,sp
    c382:	movea.l 12(sp),a0
    c386:	move.l 16(sp),d1
    c38a:	move.l 20(sp),d0
    c38e:	movea.w a0,a0
    c390:	move.w a0,6(sp)
    c394:	move.w d1,d1
    c396:	move.w d1,4(sp)
    c39a:	move.w d0,d0
    c39c:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    c3a0:	pea 17ce3 <PutChar+0x176d>
    c3a6:	jsr 15c26 <KPrintF>
    c3ac:	addq.l #4,sp

}
    c3ae:	nop
    c3b0:	addq.l #8,sp
    c3b2:	rts

0000c3b4 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    c3b4:	pea 17d06 <PutChar+0x1790>
    c3ba:	jsr 15c26 <KPrintF>
    c3c0:	addq.l #4,sp
}
    c3c2:	nop
    c3c4:	rts

0000c3c6 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    c3c6:	pea 1b2de <snapshotTextureName>
    c3cc:	pea 1 <_start+0x1>
    c3d0:	jsr 2f1c <deleteTextures>
    c3d6:	addq.l #8,sp
	snapshotTextureName = 0;
    c3d8:	clr.l 1b2de <snapshotTextureName>
}
    c3de:	nop
    c3e0:	rts

0000c3e2 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    c3e2:	clr.l 1b2ea <cameraX>
	cameraY = 0;
    c3e8:	clr.l 1b2ee <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    c3ee:	move.l 1b2d0 <sceneHeight>,d0
    c3f4:	move.l d0,d1
    c3f6:	move.l 1b2cc <sceneWidth>,d0
    c3fc:	move.l d1,-(sp)
    c3fe:	move.l d0,-(sp)
    c400:	jsr 2a98 <CstReserveBackdrop>
    c406:	addq.l #8,sp
}
    c408:	rts

0000c40a <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    c40a:	jsr c290 <killBackDrop>
	killParallax ();
    c410:	jsr c2b8 <killParallax>
	killZBuffer ();
    c416:	jsr 760a <killZBuffer>
	sceneWidth = x;
    c41c:	move.l 4(sp),d0
    c420:	move.l d0,1b2cc <sceneWidth>
	sceneHeight = y;
    c426:	move.l 8(sp),d0
    c42a:	move.l d0,1b2d0 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    c430:	pea 17d3f <PutChar+0x17c9>
    c436:	jsr 15c26 <KPrintF>
    c43c:	addq.l #4,sp
	return reserveBackdrop();
    c43e:	jsr c3e2 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    c444:	rts

0000c446 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    c446:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    c448:	move.l 12(sp),-(sp)
    c44c:	jsr 6bc <get2bytes>
    c452:	addq.l #4,sp
    c454:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    c458:	move.l 12(sp),-(sp)
    c45c:	jsr 6bc <get2bytes>
    c462:	addq.l #4,sp
    c464:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    c466:	moveq #1,d0
}
    c468:	addq.l #8,sp
    c46a:	rts

0000c46c <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    c46c:	   /-> lea -12(sp),sp
    c470:	   |   move.l a6,-(sp)
    c472:	   |   move.l d2,-(sp)
	if (me) {
    c474:	   |   tst.l 24(sp)
    c478:	/--|-- beq.w c50e <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    c47c:	|  |   movea.l 24(sp),a0
    c480:	|  |   move.l 42(a0),d0
    c484:	|  |   move.l 28(sp),-(sp)
    c488:	|  |   move.l d0,-(sp)
    c48a:	|  \-- jsr c46c <saveParallaxRecursive>(pc)
    c48e:	|      addq.l #8,sp
		FPutC (fp, 1);
    c490:	|      move.l 28(sp),16(sp)
    c496:	|      moveq #1,d0
    c498:	|      move.l d0,12(sp)
    c49c:	|      move.l 1b1e0 <DOSBase>,d0
    c4a2:	|      movea.l d0,a6
    c4a4:	|      move.l 16(sp),d1
    c4a8:	|      move.l 12(sp),d2
    c4ac:	|      jsr -312(a6)
    c4b0:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    c4b4:	|      movea.l 24(sp),a0
    c4b8:	|      move.w 28(a0),d0
    c4bc:	|      move.w d0,d0
    c4be:	|      andi.l #65535,d0
    c4c4:	|      move.l 28(sp),-(sp)
    c4c8:	|      move.l d0,-(sp)
    c4ca:	|      jsr 8d0 <put2bytes>
    c4d0:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    c4d2:	|      movea.l 24(sp),a0
    c4d6:	|      move.w 30(a0),d0
    c4da:	|      move.w d0,d0
    c4dc:	|      andi.l #65535,d0
    c4e2:	|      move.l 28(sp),-(sp)
    c4e6:	|      move.l d0,-(sp)
    c4e8:	|      jsr 8d0 <put2bytes>
    c4ee:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    c4f0:	|      movea.l 24(sp),a0
    c4f4:	|      move.w 32(a0),d0
    c4f8:	|      move.w d0,d0
    c4fa:	|      andi.l #65535,d0
    c500:	|      move.l 28(sp),-(sp)
    c504:	|      move.l d0,-(sp)
    c506:	|      jsr 8d0 <put2bytes>
    c50c:	|      addq.l #8,sp
	}
}
    c50e:	\----> nop
    c510:	       move.l (sp)+,d2
    c512:	       movea.l (sp)+,a6
    c514:	       lea 12(sp),sp
    c518:	       rts

0000c51a <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    c51a:	pea 17d66 <PutChar+0x17f0>
    c520:	jsr 15c26 <KPrintF>
    c526:	addq.l #4,sp
	return TRUE;
    c528:	moveq #1,d0
    c52a:	rts

0000c52c <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    c52c:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    c52e:	             move.l 1b2e2 <allObjectTypes>,(sp)

	while (huntType) {
    c534:	      /----- bra.s c54c <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    c536:	   /--|----> movea.l (sp),a0
    c538:	   |  |      move.l 4(a0),d0
    c53c:	   |  |      cmp.l 8(sp),d0
    c540:	   |  |  /-- bne.s c546 <findObjectType+0x1a>
    c542:	   |  |  |   move.l (sp),d0
    c544:	/--|--|--|-- bra.s c55c <findObjectType+0x30>
		huntType = huntType -> next;
    c546:	|  |  |  \-> movea.l (sp),a0
    c548:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    c54c:	|  |  \----> tst.l (sp)
    c54e:	|  \-------- bne.s c536 <findObjectType+0xa>
	}

	return loadObjectType (i);
    c550:	|            move.l 8(sp),-(sp)
    c554:	|            jsr c61c <loadObjectType>
    c55a:	|            addq.l #4,sp
}
    c55c:	\----------> addq.l #4,sp
    c55e:	             rts

0000c560 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    c560:	             lea -12(sp),sp
	int i, num = 0;
    c564:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    c568:	             move.l 20(sp),-(sp)
    c56c:	             jsr c52c <findObjectType>
    c572:	             addq.l #4,sp
    c574:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    c576:	             clr.l 8(sp)
    c57a:	   /-------- bra.s c5b0 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    c57c:	/--|-------> movea.l (sp),a0
    c57e:	|  |         move.l 38(a0),d1
    c582:	|  |         move.l 8(sp),d0
    c586:	|  |         lsl.l #3,d0
    c588:	|  |         movea.l d1,a0
    c58a:	|  |         adda.l d0,a0
    c58c:	|  |         move.l (a0),d0
    c58e:	|  |         cmp.l 16(sp),d0
    c592:	|  |  /----- bne.s c5ac <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    c594:	|  |  |      movea.l (sp),a0
    c596:	|  |  |      move.l 38(a0),d1
    c59a:	|  |  |      move.l 8(sp),d0
    c59e:	|  |  |      lsl.l #3,d0
    c5a0:	|  |  |      movea.l d1,a0
    c5a2:	|  |  |      adda.l d0,a0
    c5a4:	|  |  |      move.l 4(a0),4(sp)
			break;
    c5aa:	|  |  |  /-- bra.s c5bc <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    c5ac:	|  |  \--|-> addq.l #1,8(sp)
    c5b0:	|  \-----|-> movea.l (sp),a0
    c5b2:	|        |   move.l 16(a0),d0
    c5b6:	|        |   cmp.l 8(sp),d0
    c5ba:	\--------|-- bgt.s c57c <getCombinationFunction+0x1c>
		}
	}

	return num;
    c5bc:	         \-> move.l 4(sp),d0
}
    c5c0:	             lea 12(sp),sp
    c5c4:	             rts

0000c5c6 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    c5c6:	moveq #1,d0
}
    c5c8:	rts

0000c5ca <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    c5ca:	subq.l #8,sp
    c5cc:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    c5ce:	move.l 16(sp),-(sp)
    c5d2:	jsr 6bc <get2bytes>
    c5d8:	addq.l #4,sp
    c5da:	move.l d0,-(sp)
    c5dc:	jsr c61c <loadObjectType>
    c5e2:	addq.l #4,sp
    c5e4:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    c5e8:	movea.l 8(sp),a0
    c5ec:	move.l (a0),4(sp)
    c5f0:	move.l 1b1d8 <SysBase>,d0
    c5f6:	movea.l d0,a6
    c5f8:	movea.l 4(sp),a1
    c5fc:	jsr -690(a6)
	r -> screenName = readString (fp);
    c600:	move.l 16(sp),-(sp)
    c604:	jsr b02 <readString>
    c60a:	addq.l #4,sp
    c60c:	movea.l 8(sp),a0
    c610:	move.l d0,(a0)
	return r;
    c612:	move.l 8(sp),d0
}
    c616:	movea.l (sp)+,a6
    c618:	addq.l #8,sp
    c61a:	rts

0000c61c <loadObjectType>:

struct objectType * loadObjectType (int i) {
    c61c:	          lea -84(sp),sp
    c620:	          move.l a6,-(sp)
    c622:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    c624:	          moveq #42,d0
    c626:	          move.l d0,84(sp)
    c62a:	          clr.l 80(sp)
    c62e:	          move.l 1b1d8 <SysBase>,d0
    c634:	          movea.l d0,a6
    c636:	          move.l 84(sp),d0
    c63a:	          move.l 80(sp),d1
    c63e:	          jsr -684(a6)
    c642:	          move.l d0,76(sp)
    c646:	          move.l 76(sp),d0
    c64a:	          move.l d0,72(sp)

    if (newType) {
    c64e:	/-------- beq.w c8c8 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    c652:	|         move.l 96(sp),-(sp)
    c656:	|         jsr 5d3e <openObjectSlice>
    c65c:	|         addq.l #4,sp
    c65e:	|         tst.w d0
    c660:	+-------- beq.w c8c8 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    c664:	|         move.l 1b1c0 <bigDataFile>,d0
    c66a:	|         move.l d0,-(sp)
    c66c:	|         jsr 6bc <get2bytes>
    c672:	|         addq.l #4,sp
    c674:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    c678:	|         move.l 1b1c0 <bigDataFile>,64(sp)
    c680:	|         move.l 1b1e0 <DOSBase>,d0
    c686:	|         movea.l d0,a6
    c688:	|         move.l 64(sp),d1
    c68c:	|         jsr -306(a6)
    c690:	|         move.l d0,60(sp)
    c694:	|         move.l 60(sp),d0
    c698:	|         move.l d0,d0
    c69a:	|         movea.l 72(sp),a0
    c69e:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    c6a2:	|         move.l 1b1c0 <bigDataFile>,56(sp)
    c6aa:	|         move.l 1b1e0 <DOSBase>,d0
    c6b0:	|         movea.l d0,a6
    c6b2:	|         move.l 56(sp),d1
    c6b6:	|         jsr -306(a6)
    c6ba:	|         move.l d0,52(sp)
    c6be:	|         move.l 52(sp),d0
    c6c2:	|         move.l d0,d0
    c6c4:	|         movea.l 72(sp),a0
    c6c8:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    c6cc:	|         move.l 1b1c0 <bigDataFile>,48(sp)
    c6d4:	|         move.l 1b1e0 <DOSBase>,d0
    c6da:	|         movea.l d0,a6
    c6dc:	|         move.l 48(sp),d1
    c6e0:	|         jsr -306(a6)
    c6e4:	|         move.l d0,44(sp)
    c6e8:	|         move.l 44(sp),d0
    c6ec:	|         move.l d0,d0
    c6ee:	|         movea.l 72(sp),a0
    c6f2:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    c6f6:	|         move.l 1b1c0 <bigDataFile>,40(sp)
    c6fe:	|         move.l 1b1e0 <DOSBase>,d0
    c704:	|         movea.l d0,a6
    c706:	|         move.l 40(sp),d1
    c70a:	|         jsr -306(a6)
    c70e:	|         move.l d0,36(sp)
    c712:	|         move.l 36(sp),d0
    c716:	|         movea.l 72(sp),a0
    c71a:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    c71e:	|         move.l 1b1c0 <bigDataFile>,32(sp)
    c726:	|         move.l 1b1e0 <DOSBase>,d0
    c72c:	|         movea.l d0,a6
    c72e:	|         move.l 32(sp),d1
    c732:	|         jsr -306(a6)
    c736:	|         move.l d0,28(sp)
    c73a:	|         move.l 28(sp),d0
    c73e:	|         movea.l 72(sp),a0
    c742:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    c746:	|         move.l 1b1c0 <bigDataFile>,d0
    c74c:	|         move.l d0,-(sp)
    c74e:	|         jsr 718 <get4bytes>
    c754:	|         addq.l #4,sp
    c756:	|         movea.l 72(sp),a0
    c75a:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    c75e:	|         move.l 1b1c0 <bigDataFile>,d0
    c764:	|         move.l d0,-(sp)
    c766:	|         jsr 6bc <get2bytes>
    c76c:	|         addq.l #4,sp
    c76e:	|         movea.l 72(sp),a0
    c772:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    c776:	|         move.l 1b1c0 <bigDataFile>,24(sp)
    c77e:	|         move.l 1b1e0 <DOSBase>,d0
    c784:	|         movea.l d0,a6
    c786:	|         move.l 24(sp),d1
    c78a:	|         jsr -306(a6)
    c78e:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    c792:	|         move.l 1b1c0 <bigDataFile>,d0
    c798:	|         move.l d0,-(sp)
    c79a:	|         jsr 7d8 <getFloat>
    c7a0:	|         addq.l #4,sp
            getFloat(bigDataFile);
    c7a2:	|         move.l 1b1c0 <bigDataFile>,d0
    c7a8:	|         move.l d0,-(sp)
    c7aa:	|         jsr 7d8 <getFloat>
    c7b0:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    c7b2:	|         move.l 1b1c0 <bigDataFile>,d0
    c7b8:	|         move.l d0,-(sp)
    c7ba:	|         jsr 6bc <get2bytes>
    c7c0:	|         addq.l #4,sp
    c7c2:	|         move.l d0,d0
    c7c4:	|         movea.l 72(sp),a0
    c7c8:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    c7cc:	|         move.l 1b1c0 <bigDataFile>,d0
    c7d2:	|         move.l d0,-(sp)
    c7d4:	|         jsr 6bc <get2bytes>
    c7da:	|         addq.l #4,sp
    c7dc:	|         movea.l 72(sp),a0
    c7e0:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    c7e4:	|         movea.l 72(sp),a0
    c7e8:	|         move.l 16(a0),d0
    c7ec:	|  /----- beq.s c81e <loadObjectType+0x202>
    c7ee:	|  |      movea.l 72(sp),a0
    c7f2:	|  |      move.l 16(a0),d0
    c7f6:	|  |      lsl.l #3,d0
    c7f8:	|  |      move.l d0,16(sp)
    c7fc:	|  |      clr.l 12(sp)
    c800:	|  |      move.l 1b1d8 <SysBase>,d0
    c806:	|  |      movea.l d0,a6
    c808:	|  |      move.l 16(sp),d0
    c80c:	|  |      move.l 12(sp),d1
    c810:	|  |      jsr -684(a6)
    c814:	|  |      move.l d0,8(sp)
    c818:	|  |      move.l 8(sp),d0
    c81c:	|  |  /-- bra.s c820 <loadObjectType+0x204>
    c81e:	|  \--|-> moveq #0,d0
    c820:	|     \-> movea.l 72(sp),a0
    c824:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    c828:	|         clr.l 88(sp)
    c82c:	|     /-- bra.s c87c <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    c82e:	|  /--|-> move.l 1b1c0 <bigDataFile>,d1
    c834:	|  |  |   movea.l 72(sp),a0
    c838:	|  |  |   movea.l 38(a0),a0
    c83c:	|  |  |   move.l 88(sp),d0
    c840:	|  |  |   lsl.l #3,d0
    c842:	|  |  |   lea (0,a0,d0.l),a2
    c846:	|  |  |   move.l d1,-(sp)
    c848:	|  |  |   jsr 6bc <get2bytes>
    c84e:	|  |  |   addq.l #4,sp
    c850:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    c852:	|  |  |   move.l 1b1c0 <bigDataFile>,d1
    c858:	|  |  |   movea.l 72(sp),a0
    c85c:	|  |  |   movea.l 38(a0),a0
    c860:	|  |  |   move.l 88(sp),d0
    c864:	|  |  |   lsl.l #3,d0
    c866:	|  |  |   lea (0,a0,d0.l),a2
    c86a:	|  |  |   move.l d1,-(sp)
    c86c:	|  |  |   jsr 6bc <get2bytes>
    c872:	|  |  |   addq.l #4,sp
    c874:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    c878:	|  |  |   addq.l #1,88(sp)
    c87c:	|  |  \-> movea.l 72(sp),a0
    c880:	|  |      move.l 16(a0),d0
    c884:	|  |      cmp.l 88(sp),d0
    c888:	|  \----- bgt.s c82e <loadObjectType+0x212>
            }
            finishAccess();
    c88a:	|         jsr 5b6e <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    c890:	|         move.l 68(sp),-(sp)
    c894:	|         jsr 5b78 <getNumberedString>
    c89a:	|         addq.l #4,sp
    c89c:	|         movea.l 72(sp),a0
    c8a0:	|         move.l d0,(a0)
            newType->objectNum = i;
    c8a2:	|         movea.l 72(sp),a0
    c8a6:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    c8ac:	|         move.l 1b2e2 <allObjectTypes>,d0
    c8b2:	|         movea.l 72(sp),a0
    c8b6:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    c8ba:	|         move.l 72(sp),1b2e2 <allObjectTypes>
            return newType;
    c8c2:	|         move.l 72(sp),d0
    c8c6:	|     /-- bra.s c8ca <loadObjectType+0x2ae>
        }
    }
    return NULL;
    c8c8:	\-----|-> moveq #0,d0
}
    c8ca:	      \-> movea.l (sp)+,a2
    c8cc:	          movea.l (sp)+,a6
    c8ce:	          lea 84(sp),sp
    c8d2:	          rts

0000c8d4 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    c8d4:	             lea -16(sp),sp
    c8d8:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    c8da:	             move.l #111330,16(sp)

	while (* huntRegion) {
    c8e2:	   /-------- bra.s c956 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    c8e4:	/--|-------> movea.l 16(sp),a0
    c8e8:	|  |         move.l (a0),d0
    c8ea:	|  |         cmp.l 24(sp),d0
    c8ee:	|  |  /----- bne.s c948 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    c8f0:	|  |  |      movea.l 24(sp),a0
    c8f4:	|  |  |      move.l 8(a0),d0
    c8f8:	|  |  |      movea.l 16(sp),a0
    c8fc:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    c8fe:	|  |  |      movea.l 24(sp),a0
    c902:	|  |  |      move.l 38(a0),12(sp)
    c908:	|  |  |      move.l 1b1d8 <SysBase>,d0
    c90e:	|  |  |      movea.l d0,a6
    c910:	|  |  |      movea.l 12(sp),a1
    c914:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    c918:	|  |  |      movea.l 24(sp),a0
    c91c:	|  |  |      move.l (a0),8(sp)
    c920:	|  |  |      move.l 1b1d8 <SysBase>,d0
    c926:	|  |  |      movea.l d0,a6
    c928:	|  |  |      movea.l 8(sp),a1
    c92c:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    c930:	|  |  |      move.l 24(sp),4(sp)
    c936:	|  |  |      move.l 1b1d8 <SysBase>,d0
    c93c:	|  |  |      movea.l d0,a6
    c93e:	|  |  |      movea.l 4(sp),a1
    c942:	|  |  |      jsr -690(a6)
			return;
    c946:	|  |  |  /-- bra.s c96c <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    c948:	|  |  \--|-> movea.l 16(sp),a0
    c94c:	|  |     |   move.l (a0),d0
    c94e:	|  |     |   move.l d0,d1
    c950:	|  |     |   addq.l #8,d1
    c952:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    c956:	|  \-----|-> movea.l 16(sp),a0
    c95a:	|        |   move.l (a0),d0
    c95c:	\--------|-- bne.s c8e4 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    c95e:	         |   pea 17d8d <PutChar+0x1817>
    c964:	         |   jsr 15c26 <KPrintF>
    c96a:	         |   addq.l #4,sp
}
    c96c:	         \-> movea.l (sp)+,a6
    c96e:	             lea 16(sp),sp
    c972:	             rts

0000c974 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    c974:	movea.l 4(sp),a0
    c978:	move.l 4(a0),d0
    c97c:	move.l 8(sp),-(sp)
    c980:	move.l d0,-(sp)
    c982:	jsr 8d0 <put2bytes>
    c988:	addq.l #8,sp
	writeString (r -> screenName, fp);
    c98a:	movea.l 4(sp),a0
    c98e:	move.l (a0),d0
    c990:	move.l 8(sp),-(sp)
    c994:	move.l d0,-(sp)
    c996:	jsr bd8 <writeString>
    c99c:	addq.l #8,sp
    c99e:	nop
    c9a0:	rts

0000c9a2 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    c9a2:	                         lea -112(sp),sp
    c9a6:	                         move.l a6,-(sp)
    c9a8:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    c9aa:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    c9ae:	                         move.w 1b2e8 <saveEncoding>,d0
    c9b4:	                  /----- beq.s c9be <fileToStack+0x1c>
    c9b6:	                  |      move.l #97715,d0
    c9bc:	                  |  /-- bra.s c9c4 <fileToStack+0x22>
    c9be:	                  \--|-> move.l #97741,d0
    c9c4:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    c9c8:	                         move.l 124(sp),112(sp)
    c9ce:	                         move.l #1005,108(sp)
    c9d6:	                         move.l 1b1e0 <DOSBase>,d0
    c9dc:	                         movea.l d0,a6
    c9de:	                         move.l 112(sp),d1
    c9e2:	                         move.l 108(sp),d2
    c9e6:	                         jsr -30(a6)
    c9ea:	                         move.l d0,104(sp)
    c9ee:	                         move.l 104(sp),d0
    c9f2:	                         move.l d0,100(sp)
    if (!fp) {
    c9f6:	                     /-- bne.s ca10 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    c9f8:	                     |   move.l 124(sp),-(sp)
    c9fc:	                     |   pea 17de4 <PutChar+0x186e>
    ca02:	                     |   jsr 15c26 <KPrintF>
    ca08:	                     |   addq.l #8,sp
        return FALSE;
    ca0a:	                     |   clr.w d0
    ca0c:	/--------------------|-- bra.w cd06 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    ca10:	|                    \-> move.w 1b2e8 <saveEncoding>,d0
    ca16:	|                        move.l d0,d0
    ca18:	|                        move.b d0,1b2e6 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    ca1e:	|                        move.w 1b2e8 <saveEncoding>,d0
    ca24:	|                        lsr.w #8,d0
    ca26:	|                        move.l d0,d0
    ca28:	|                        move.b d0,1b2e7 <encode2>

    while (*checker) {
    ca2e:	|                 /----- bra.s ca92 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    ca30:	|              /--|----> move.l 100(sp),30(sp)
    ca36:	|              |  |      move.l 1b1e0 <DOSBase>,d0
    ca3c:	|              |  |      movea.l d0,a6
    ca3e:	|              |  |      move.l 30(sp),d1
    ca42:	|              |  |      jsr -306(a6)
    ca46:	|              |  |      move.l d0,26(sp)
    ca4a:	|              |  |      move.l 26(sp),d1
    ca4e:	|              |  |      movea.l 116(sp),a0
    ca52:	|              |  |      move.b (a0),d0
    ca54:	|              |  |      ext.w d0
    ca56:	|              |  |      movea.w d0,a0
    ca58:	|              |  |      cmpa.l d1,a0
    ca5a:	|              |  |  /-- beq.s ca8e <fileToStack+0xec>
            Close(fp);
    ca5c:	|              |  |  |   move.l 100(sp),22(sp)
    ca62:	|              |  |  |   move.l 1b1e0 <DOSBase>,d0
    ca68:	|              |  |  |   movea.l d0,a6
    ca6a:	|              |  |  |   move.l 22(sp),d1
    ca6e:	|              |  |  |   jsr -36(a6)
    ca72:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    ca76:	|              |  |  |   move.l 124(sp),-(sp)
    ca7a:	|              |  |  |   pea 17df1 <PutChar+0x187b>
    ca80:	|              |  |  |   jsr 15c26 <KPrintF>
    ca86:	|              |  |  |   addq.l #8,sp
            return FALSE;
    ca88:	|              |  |  |   clr.w d0
    ca8a:	+--------------|--|--|-- bra.w cd06 <fileToStack+0x364>
        }
        checker++;
    ca8e:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    ca92:	|              |  \----> movea.l 116(sp),a0
    ca96:	|              |         move.b (a0),d0
    ca98:	|              \-------- bne.s ca30 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    ca9a:	|                        move.w 1b2e8 <saveEncoding>,d0
    caa0:	|  /-------------------- beq.s cb14 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    caa2:	|  |                     move.l 100(sp),-(sp)
    caa6:	|  |                     jsr cd10 <readStringEncoded>
    caac:	|  |                     addq.l #4,sp
    caae:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    cab2:	|  |                     pea 17e32 <PutChar+0x18bc>
    cab8:	|  |                     move.l 100(sp),-(sp)
    cabc:	|  |                     jsr 12be0 <strcmp>
    cac2:	|  |                     addq.l #8,sp
    cac4:	|  |                     tst.l d0
    cac6:	|  |                 /-- beq.s cafa <fileToStack+0x158>
            Close(fp);
    cac8:	|  |                 |   move.l 100(sp),88(sp)
    cace:	|  |                 |   move.l 1b1e0 <DOSBase>,d0
    cad4:	|  |                 |   movea.l d0,a6
    cad6:	|  |                 |   move.l 88(sp),d1
    cada:	|  |                 |   jsr -36(a6)
    cade:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    cae2:	|  |                 |   move.l 124(sp),-(sp)
    cae6:	|  |                 |   pea 17e41 <PutChar+0x18cb>
    caec:	|  |                 |   jsr 15c26 <KPrintF>
    caf2:	|  |                 |   addq.l #8,sp
            return FALSE;
    caf4:	|  |                 |   clr.w d0
    caf6:	+--|-----------------|-- bra.w cd06 <fileToStack+0x364>
        }
        FreeVec(checker);
    cafa:	|  |                 \-> move.l 96(sp),92(sp)
    cb00:	|  |                     move.l 1b1d8 <SysBase>,d0
    cb06:	|  |                     movea.l d0,a6
    cb08:	|  |                     movea.l 92(sp),a1
    cb0c:	|  |                     jsr -690(a6)
        checker = NULL;
    cb10:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    cb14:	|  >-------------------> move.w 1b2e8 <saveEncoding>,d0
    cb1a:	|  |     /-------------- beq.w cc4e <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    cb1e:	|  |     |               move.l 100(sp),76(sp)
    cb24:	|  |     |               move.l 1b1e0 <DOSBase>,d0
    cb2a:	|  |     |               movea.l d0,a6
    cb2c:	|  |     |               move.l 76(sp),d1
    cb30:	|  |     |               jsr -306(a6)
    cb34:	|  |     |               move.l d0,72(sp)
    cb38:	|  |     |               move.l 72(sp),d0
    cb3c:	|  |     |               move.b 1b2e6 <encode1>,d1
    cb42:	|  |     |               ext.w d1
    cb44:	|  |     |               ext.l d1
    cb46:	|  |     |               move.l d0,d2
    cb48:	|  |     |               eor.l d1,d2
    cb4a:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    cb4e:	|  |     |               moveq #-1,d0
    cb50:	|  |     |               cmp.l 68(sp),d0
    cb54:	|  |  /--|-------------- beq.w cce4 <fileToStack+0x342>

            char i = (char) tmp;
    cb58:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    cb5e:	|  |  |  |               move.b 67(sp),d0
    cb62:	|  |  |  |               ext.w d0
    cb64:	|  |  |  |               movea.w d0,a0
    cb66:	|  |  |  |               moveq #2,d2
    cb68:	|  |  |  |               cmp.l a0,d2
    cb6a:	|  |  |  |     /-------- beq.s cbe6 <fileToStack+0x244>
    cb6c:	|  |  |  |     |         moveq #2,d0
    cb6e:	|  |  |  |     |         cmp.l a0,d0
    cb70:	|  |  |  |  /--|-------- blt.w cc1c <fileToStack+0x27a>
    cb74:	|  |  |  |  |  |         cmpa.w #0,a0
    cb78:	|  |  |  |  |  |     /-- beq.s cb84 <fileToStack+0x1e2>
    cb7a:	|  |  |  |  |  |     |   moveq #1,d2
    cb7c:	|  |  |  |  |  |     |   cmp.l a0,d2
    cb7e:	|  |  |  |  |  |  /--|-- beq.s cbc0 <fileToStack+0x21e>
    cb80:	|  |  |  |  +--|--|--|-- bra.w cc1c <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    cb84:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    cb88:	|  |  |  |  |  |  |      jsr cd10 <readStringEncoded>
    cb8e:	|  |  |  |  |  |  |      addq.l #4,sp
    cb90:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    cb94:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    cb98:	|  |  |  |  |  |  |      lea 14(sp),a0
    cb9c:	|  |  |  |  |  |  |      move.l a0,-(sp)
    cb9e:	|  |  |  |  |  |  |      jsr 13956 <makeTextVar>
    cba4:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    cba6:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    cbac:	|  |  |  |  |  |  |      move.l 1b1d8 <SysBase>,d0
    cbb2:	|  |  |  |  |  |  |      movea.l d0,a6
    cbb4:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    cbb8:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    cbbc:	|  |  |  |  |  |  |  /-- bra.w cc74 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    cbc0:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    cbc4:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    cbca:	|  |  |  |  |  |     |   addq.l #4,sp
    cbcc:	|  |  |  |  |  |     |   move.l d0,-(sp)
    cbce:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    cbd2:	|  |  |  |  |  |     |   lea 18(sp),a0
    cbd6:	|  |  |  |  |  |     |   move.l a0,-(sp)
    cbd8:	|  |  |  |  |  |     |   jsr 14026 <setVariable>
    cbde:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    cbe2:	|  |  |  |  |  |     +-- bra.w cc74 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    cbe6:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    cbec:	|  |  |  |  |        |   move.l 1b1e0 <DOSBase>,d0
    cbf2:	|  |  |  |  |        |   movea.l d0,a6
    cbf4:	|  |  |  |  |        |   move.l 62(sp),d1
    cbf8:	|  |  |  |  |        |   jsr -306(a6)
    cbfc:	|  |  |  |  |        |   move.l d0,58(sp)
    cc00:	|  |  |  |  |        |   move.l 58(sp),d0
    cc04:	|  |  |  |  |        |   move.l d0,-(sp)
    cc06:	|  |  |  |  |        |   pea 1 <_start+0x1>
    cc0a:	|  |  |  |  |        |   lea 18(sp),a0
    cc0e:	|  |  |  |  |        |   move.l a0,-(sp)
    cc10:	|  |  |  |  |        |   jsr 14026 <setVariable>
    cc16:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    cc1a:	|  |  |  |  |        +-- bra.s cc74 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    cc1c:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    cc20:	|  |  |  |           |   pea 17ec3 <PutChar+0x194d>
    cc26:	|  |  |  |           |   jsr 15c26 <KPrintF>
    cc2c:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    cc2e:	|  |  |  |           |   move.l 100(sp),46(sp)
    cc34:	|  |  |  |           |   move.l 1b1e0 <DOSBase>,d0
    cc3a:	|  |  |  |           |   movea.l d0,a6
    cc3c:	|  |  |  |           |   move.l 46(sp),d1
    cc40:	|  |  |  |           |   jsr -36(a6)
    cc44:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    cc48:	|  |  |  |           |   clr.w d0
    cc4a:	+--|--|--|-----------|-- bra.w cd06 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    cc4e:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    cc52:	|  |  |              |   jsr cdd6 <readTextPlain>
    cc58:	|  |  |              |   addq.l #4,sp
    cc5a:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    cc5e:	|  |  |        /-----|-- beq.w cce8 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    cc62:	|  |  |        |     |   move.l 80(sp),-(sp)
    cc66:	|  |  |        |     |   lea 14(sp),a0
    cc6a:	|  |  |        |     |   move.l a0,-(sp)
    cc6c:	|  |  |        |     |   jsr 13956 <makeTextVar>
    cc72:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    cc74:	|  |  |        |     \-> movea.l 128(sp),a0
    cc78:	|  |  |        |         move.l (a0),d0
    cc7a:	|  |  |        |  /----- bne.s ccaa <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    cc7c:	|  |  |        |  |      move.l 128(sp),d0
    cc80:	|  |  |        |  |      move.l d0,-(sp)
    cc82:	|  |  |        |  |      lea 14(sp),a0
    cc86:	|  |  |        |  |      move.l a0,-(sp)
    cc88:	|  |  |        |  |      jsr 12ff6 <addVarToStackQuick>
    cc8e:	|  |  |        |  |      addq.l #8,sp
    cc90:	|  |  |        |  |      tst.w d0
    cc92:	|  |  |        |  |  /-- bne.s cc98 <fileToStack+0x2f6>
    cc94:	|  |  |        |  |  |   clr.w d0
    cc96:	+--|--|--------|--|--|-- bra.s cd06 <fileToStack+0x364>
            sH->last = sH->first;
    cc98:	|  |  |        |  |  \-> movea.l 128(sp),a0
    cc9c:	|  |  |        |  |      move.l (a0),d0
    cc9e:	|  |  |        |  |      movea.l 128(sp),a0
    cca2:	|  |  |        |  |      move.l d0,4(a0)
    cca6:	|  +--|--------|--|----- bra.w cb14 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    ccaa:	|  |  |        |  \----> movea.l 128(sp),a0
    ccae:	|  |  |        |         move.l 4(a0),d0
    ccb2:	|  |  |        |         addq.l #8,d0
    ccb4:	|  |  |        |         move.l d0,-(sp)
    ccb6:	|  |  |        |         lea 14(sp),a0
    ccba:	|  |  |        |         move.l a0,-(sp)
    ccbc:	|  |  |        |         jsr 12ff6 <addVarToStackQuick>
    ccc2:	|  |  |        |         addq.l #8,sp
    ccc4:	|  |  |        |         tst.w d0
    ccc6:	|  |  |        |     /-- bne.s cccc <fileToStack+0x32a>
    ccc8:	|  |  |        |     |   clr.w d0
    ccca:	+--|--|--------|-----|-- bra.s cd06 <fileToStack+0x364>
            sH->last = sH->last->next;
    cccc:	|  |  |        |     \-> movea.l 128(sp),a0
    ccd0:	|  |  |        |         movea.l 4(a0),a0
    ccd4:	|  |  |        |         move.l 8(a0),d0
    ccd8:	|  |  |        |         movea.l 128(sp),a0
    ccdc:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    cce0:	|  \--|--------|-------- bra.w cb14 <fileToStack+0x172>
            if (tmp == -1) break;
    cce4:	|     \--------|-------> nop
    cce6:	|              |     /-- bra.s ccea <fileToStack+0x348>
            if (!line) break;
    cce8:	|              \-----|-> nop
        }
    }
    Close(fp);
    ccea:	|                    \-> move.l 100(sp),38(sp)
    ccf0:	|                        move.l 1b1e0 <DOSBase>,d0
    ccf6:	|                        movea.l d0,a6
    ccf8:	|                        move.l 38(sp),d1
    ccfc:	|                        jsr -36(a6)
    cd00:	|                        move.l d0,34(sp)
    return TRUE;
    cd04:	|                        moveq #1,d0
}
    cd06:	\----------------------> move.l (sp)+,d2
    cd08:	                         movea.l (sp)+,a6
    cd0a:	                         lea 112(sp),sp
    cd0e:	                         rts

0000cd10 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    cd10:	          lea -32(sp),sp
    cd14:	          move.l a6,-(sp)
    cd16:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    cd18:	          move.l 44(sp),-(sp)
    cd1c:	          jsr 6bc <get2bytes>
    cd22:	          addq.l #4,sp
    cd24:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    cd28:	          move.l 32(sp),d0
    cd2c:	          addq.l #1,d0
    cd2e:	          move.l d0,28(sp)
    cd32:	          clr.l 24(sp)
    cd36:	          move.l 1b1d8 <SysBase>,d0
    cd3c:	          movea.l d0,a6
    cd3e:	          move.l 28(sp),d0
    cd42:	          move.l 24(sp),d1
    cd46:	          jsr -684(a6)
    cd4a:	          move.l d0,20(sp)
    cd4e:	          move.l 20(sp),d0
    cd52:	          move.l d0,16(sp)
    if (!s) return NULL;
    cd56:	      /-- bne.s cd5c <readStringEncoded+0x4c>
    cd58:	      |   moveq #0,d0
    cd5a:	/-----|-- bra.s cdcc <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    cd5c:	|     \-> clr.l 36(sp)
    cd60:	|     /-- bra.s cdb2 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    cd62:	|  /--|-> move.l 44(sp),12(sp)
    cd68:	|  |  |   move.l 1b1e0 <DOSBase>,d0
    cd6e:	|  |  |   movea.l d0,a6
    cd70:	|  |  |   move.l 12(sp),d1
    cd74:	|  |  |   jsr -306(a6)
    cd78:	|  |  |   move.l d0,8(sp)
    cd7c:	|  |  |   move.l 8(sp),d0
    cd80:	|  |  |   move.l d0,d1
    cd82:	|  |  |   move.b 1b2e6 <encode1>,d2
    cd88:	|  |  |   move.l 36(sp),d0
    cd8c:	|  |  |   movea.l 16(sp),a0
    cd90:	|  |  |   adda.l d0,a0
    cd92:	|  |  |   move.b d1,d0
    cd94:	|  |  |   eor.b d2,d0
    cd96:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    cd98:	|  |  |   move.b 1b2e6 <encode1>,d0
    cd9e:	|  |  |   move.b d0,d1
    cda0:	|  |  |   move.b 1b2e7 <encode2>,d0
    cda6:	|  |  |   add.b d1,d0
    cda8:	|  |  |   move.b d0,1b2e6 <encode1>
    for (a = 0; a < len; a++) {
    cdae:	|  |  |   addq.l #1,36(sp)
    cdb2:	|  |  \-> move.l 36(sp),d0
    cdb6:	|  |      cmp.l 32(sp),d0
    cdba:	|  \----- blt.s cd62 <readStringEncoded+0x52>
    }
    s[len] = 0;
    cdbc:	|         move.l 32(sp),d0
    cdc0:	|         movea.l 16(sp),a0
    cdc4:	|         adda.l d0,a0
    cdc6:	|         clr.b (a0)
    return s;
    cdc8:	|         move.l 16(sp),d0
}
    cdcc:	\-------> move.l (sp)+,d2
    cdce:	          movea.l (sp)+,a6
    cdd0:	          lea 32(sp),sp
    cdd4:	          rts

0000cdd6 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    cdd6:	             lea -104(sp),sp
    cdda:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    cdde:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    cde2:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    cde8:	             move.l 124(sp),106(sp)
    cdee:	             clr.l 102(sp)
    cdf2:	             clr.l 98(sp)
    cdf6:	             move.l 1b1e0 <DOSBase>,d0
    cdfc:	             movea.l d0,a6
    cdfe:	             move.l 106(sp),d1
    ce02:	             move.l 102(sp),d2
    ce06:	             move.l 98(sp),d3
    ce0a:	             jsr -66(a6)
    ce0e:	             move.l d0,94(sp)
    ce12:	             move.l 94(sp),d0
    ce16:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    ce1a:	   /-------- bra.s ce5e <readTextPlain+0x88>
        tmp = FGetC(fp);
    ce1c:	/--|-------> move.l 124(sp),22(sp)
    ce22:	|  |         move.l 1b1e0 <DOSBase>,d0
    ce28:	|  |         movea.l d0,a6
    ce2a:	|  |         move.l 22(sp),d1
    ce2e:	|  |         jsr -306(a6)
    ce32:	|  |         move.l d0,18(sp)
    ce36:	|  |         move.l 18(sp),d0
    ce3a:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    ce3e:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    ce44:	|  |         cmpi.b #10,17(sp)
    ce4a:	|  |  /----- beq.s ce54 <readTextPlain+0x7e>
    ce4c:	|  |  |      moveq #-1,d0
    ce4e:	|  |  |      cmp.l 110(sp),d0
    ce52:	|  |  |  /-- bne.s ce5a <readTextPlain+0x84>
            keepGoing = FALSE;
    ce54:	|  |  \--|-> clr.w 114(sp)
    ce58:	|  +-----|-- bra.s ce5e <readTextPlain+0x88>
        } else {
            stringSize++;
    ce5a:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    ce5e:	|  \-------> tst.w 114(sp)
    ce62:	\----------- bne.s ce1c <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    ce64:	             tst.l 116(sp)
    ce68:	         /-- bne.s ce78 <readTextPlain+0xa2>
    ce6a:	         |   moveq #-1,d0
    ce6c:	         |   cmp.l 110(sp),d0
    ce70:	         +-- bne.s ce78 <readTextPlain+0xa2>
        return NULL;
    ce72:	         |   moveq #0,d0
    ce74:	      /--|-- bra.w cf5e <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    ce78:	      |  \-> move.l 124(sp),86(sp)
    ce7e:	      |      move.l 90(sp),82(sp)
    ce84:	      |      moveq #-1,d0
    ce86:	      |      move.l d0,78(sp)
    ce8a:	      |      move.l 1b1e0 <DOSBase>,d0
    ce90:	      |      movea.l d0,a6
    ce92:	      |      move.l 86(sp),d1
    ce96:	      |      move.l 82(sp),d2
    ce9a:	      |      move.l 78(sp),d3
    ce9e:	      |      jsr -66(a6)
    cea2:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    cea6:	      |      move.l 116(sp),d0
    ceaa:	      |      addq.l #1,d0
    ceac:	      |      move.l d0,70(sp)
    ceb0:	      |      clr.l 66(sp)
    ceb4:	      |      move.l 1b1d8 <SysBase>,d0
    ceba:	      |      movea.l d0,a6
    cebc:	      |      move.l 70(sp),d0
    cec0:	      |      move.l 66(sp),d1
    cec4:	      |      jsr -684(a6)
    cec8:	      |      move.l d0,62(sp)
    cecc:	      |      move.l 62(sp),d0
    ced0:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    ced4:	      |  /-- bne.s cedc <readTextPlain+0x106>
    ced6:	      |  |   moveq #0,d0
    ced8:	      +--|-- bra.w cf5e <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    cedc:	      |  \-> move.l 124(sp),54(sp)
    cee2:	      |      move.l 58(sp),50(sp)
    cee8:	      |      moveq #1,d0
    ceea:	      |      move.l d0,46(sp)
    ceee:	      |      move.l 116(sp),42(sp)
    cef4:	      |      move.l 1b1e0 <DOSBase>,d0
    cefa:	      |      movea.l d0,a6
    cefc:	      |      move.l 54(sp),d1
    cf00:	      |      move.l 50(sp),d2
    cf04:	      |      move.l 46(sp),d3
    cf08:	      |      move.l 42(sp),d4
    cf0c:	      |      jsr -324(a6)
    cf10:	      |      move.l d0,38(sp)
    cf14:	      |      move.l 38(sp),d0
    cf18:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    cf1c:	      |      move.l 34(sp),d0
    cf20:	      |      cmp.l 116(sp),d0
    cf24:	      |  /-- beq.s cf34 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    cf26:	      |  |   pea 17ef8 <PutChar+0x1982>
    cf2c:	      |  |   jsr 15c26 <KPrintF>
    cf32:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    cf34:	      |  \-> move.l 124(sp),30(sp)
    cf3a:	      |      move.l 1b1e0 <DOSBase>,d0
    cf40:	      |      movea.l d0,a6
    cf42:	      |      move.l 30(sp),d1
    cf46:	      |      jsr -306(a6)
    cf4a:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    cf4e:	      |      move.l 116(sp),d0
    cf52:	      |      movea.l 58(sp),a0
    cf56:	      |      adda.l d0,a0
    cf58:	      |      clr.b (a0)
    }

    return reply;
    cf5a:	      |      move.l 58(sp),d0
}
    cf5e:	      \----> movem.l (sp)+,d2-d4/a6
    cf62:	             lea 104(sp),sp
    cf66:	             rts

0000cf68 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    cf68:	                      lea -144(sp),sp
    cf6c:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    cf70:	                      move.l 160(sp),148(sp)
    cf76:	                      move.l #1006,144(sp)
    cf7e:	                      move.l 1b1e0 <DOSBase>,d0
    cf84:	                      movea.l d0,a6
    cf86:	                      move.l 148(sp),d1
    cf8a:	                      move.l 144(sp),d2
    cf8e:	                      jsr -30(a6)
    cf92:	                      move.l d0,140(sp)
    cf96:	                      move.l 140(sp),d0
    cf9a:	                      move.l d0,136(sp)

    if (!fp) {
    cf9e:	                  /-- bne.s cfb8 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    cfa0:	                  |   move.l 160(sp),-(sp)
    cfa4:	                  |   pea 17f19 <PutChar+0x19a3>
    cfaa:	                  |   jsr 15c26 <KPrintF>
    cfb0:	                  |   addq.l #8,sp
        return FALSE;
    cfb2:	                  |   clr.w d0
    cfb4:	/-----------------|-- bra.w d274 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    cfb8:	|                 \-> movea.l 164(sp),a0
    cfbc:	|                     movea.l 4(a0),a0
    cfc0:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    cfc4:	|                     move.w 1b2e8 <saveEncoding>,d0
    cfca:	|                     move.l d0,d0
    cfcc:	|                     move.b d0,1b2e6 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    cfd2:	|                     move.w 1b2e8 <saveEncoding>,d0
    cfd8:	|                     lsr.w #8,d0
    cfda:	|                     move.l d0,d0
    cfdc:	|                     move.b d0,1b2e7 <encode2>

    if (saveEncoding) {
    cfe2:	|                     move.w 1b2e8 <saveEncoding>,d0
    cfe8:	|                 /-- beq.s d03a <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    cfea:	|                 |   move.l 136(sp),116(sp)
    cff0:	|                 |   move.l #97715,112(sp)
    cff8:	|                 |   moveq #99,d0
    cffa:	|                 |   not.b d0
    cffc:	|                 |   add.l sp,d0
    cffe:	|                 |   addi.l #-144,d0
    d004:	|                 |   move.l d0,108(sp)
    d008:	|                 |   move.l 1b1e0 <DOSBase>,d0
    d00e:	|                 |   movea.l d0,a6
    d010:	|                 |   move.l 116(sp),d1
    d014:	|                 |   move.l 112(sp),d2
    d018:	|                 |   move.l 108(sp),d3
    d01c:	|                 |   jsr -354(a6)
    d020:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    d024:	|                 |   move.l 136(sp),-(sp)
    d028:	|                 |   pea 17e32 <PutChar+0x18bc>
    d02e:	|                 |   jsr d27e <writeStringEncoded>
    d034:	|                 |   addq.l #8,sp
    d036:	|  /--------------|-- bra.w d24c <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    d03a:	|  |              \-> move.l 136(sp),132(sp)
    d040:	|  |                  move.l #97741,128(sp)
    d048:	|  |                  moveq #99,d1
    d04a:	|  |                  not.b d1
    d04c:	|  |                  add.l sp,d1
    d04e:	|  |                  addi.l #-144,d1
    d054:	|  |                  move.l d1,124(sp)
    d058:	|  |                  move.l 1b1e0 <DOSBase>,d0
    d05e:	|  |                  movea.l d0,a6
    d060:	|  |                  move.l 132(sp),d1
    d064:	|  |                  move.l 128(sp),d2
    d068:	|  |                  move.l 124(sp),d3
    d06c:	|  |                  jsr -354(a6)
    d070:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    d074:	|  +----------------- bra.w d24c <stackToFile+0x2e4>
        if (saveEncoding) {
    d078:	|  |  /-------------> move.w 1b2e8 <saveEncoding>,d0
    d07e:	|  |  |     /-------- beq.w d1d0 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    d082:	|  |  |     |         movea.l 152(sp),a0
    d086:	|  |  |     |         move.l (a0),d0
    d088:	|  |  |     |         moveq #1,d1
    d08a:	|  |  |     |         cmp.l d0,d1
    d08c:	|  |  |     |     /-- beq.s d0dc <stackToFile+0x174>
    d08e:	|  |  |     |     |   moveq #3,d1
    d090:	|  |  |     |     |   cmp.l d0,d1
    d092:	|  |  |     |  /--|-- bne.w d19e <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    d096:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    d09c:	|  |  |     |  |  |   move.b 1b2e6 <encode1>,d0
    d0a2:	|  |  |     |  |  |   ext.w d0
    d0a4:	|  |  |     |  |  |   movea.w d0,a0
    d0a6:	|  |  |     |  |  |   move.l a0,72(sp)
    d0aa:	|  |  |     |  |  |   move.l 1b1e0 <DOSBase>,d0
    d0b0:	|  |  |     |  |  |   movea.l d0,a6
    d0b2:	|  |  |     |  |  |   move.l 76(sp),d1
    d0b6:	|  |  |     |  |  |   move.l 72(sp),d2
    d0ba:	|  |  |     |  |  |   jsr -312(a6)
    d0be:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    d0c2:	|  |  |     |  |  |   movea.l 152(sp),a0
    d0c6:	|  |  |     |  |  |   move.l 4(a0),d0
    d0ca:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    d0ce:	|  |  |     |  |  |   move.l d0,-(sp)
    d0d0:	|  |  |     |  |  |   jsr d27e <writeStringEncoded>
    d0d6:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    d0d8:	|  |  |  /--|--|--|-- bra.w d242 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    d0dc:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    d0e0:	|  |  |  |  |  |      move.l 4(a0),d0
    d0e4:	|  |  |  |  |  |  /-- bmi.s d154 <stackToFile+0x1ec>
    d0e6:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d0ea:	|  |  |  |  |  |  |   move.l 4(a0),d0
    d0ee:	|  |  |  |  |  |  |   cmpi.l #255,d0
    d0f4:	|  |  |  |  |  |  +-- bgt.s d154 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    d0f6:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    d0fc:	|  |  |  |  |  |  |   move.b 1b2e6 <encode1>,d0
    d102:	|  |  |  |  |  |  |   eori.b #2,d0
    d106:	|  |  |  |  |  |  |   ext.w d0
    d108:	|  |  |  |  |  |  |   movea.w d0,a0
    d10a:	|  |  |  |  |  |  |   move.l a0,60(sp)
    d10e:	|  |  |  |  |  |  |   move.l 1b1e0 <DOSBase>,d0
    d114:	|  |  |  |  |  |  |   movea.l d0,a6
    d116:	|  |  |  |  |  |  |   move.l 64(sp),d1
    d11a:	|  |  |  |  |  |  |   move.l 60(sp),d2
    d11e:	|  |  |  |  |  |  |   jsr -312(a6)
    d122:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    d126:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    d12c:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    d130:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    d136:	|  |  |  |  |  |  |   move.l 1b1e0 <DOSBase>,d0
    d13c:	|  |  |  |  |  |  |   movea.l d0,a6
    d13e:	|  |  |  |  |  |  |   move.l 52(sp),d1
    d142:	|  |  |  |  |  |  |   move.l 48(sp),d2
    d146:	|  |  |  |  |  |  |   jsr -312(a6)
    d14a:	|  |  |  |  |  |  |   move.l d0,44(sp)
    d14e:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    d150:	|  |  |  +--|--|--|-- bra.w d242 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    d154:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    d15a:	|  |  |  |  |  |      move.b 1b2e6 <encode1>,d0
    d160:	|  |  |  |  |  |      eori.b #1,d0
    d164:	|  |  |  |  |  |      ext.w d0
    d166:	|  |  |  |  |  |      movea.w d0,a0
    d168:	|  |  |  |  |  |      move.l a0,36(sp)
    d16c:	|  |  |  |  |  |      move.l 1b1e0 <DOSBase>,d0
    d172:	|  |  |  |  |  |      movea.l d0,a6
    d174:	|  |  |  |  |  |      move.l 40(sp),d1
    d178:	|  |  |  |  |  |      move.l 36(sp),d2
    d17c:	|  |  |  |  |  |      jsr -312(a6)
    d180:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    d184:	|  |  |  |  |  |      movea.l 152(sp),a0
    d188:	|  |  |  |  |  |      move.l 4(a0),d0
    d18c:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    d190:	|  |  |  |  |  |      move.l d0,-(sp)
    d192:	|  |  |  |  |  |      jsr 958 <put4bytes>
    d198:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    d19a:	|  |  |  +--|--|----- bra.w d242 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    d19e:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    d1a2:	|  |  |  |  |         pea 17f2b <PutChar+0x19b5>
    d1a8:	|  |  |  |  |         jsr 15c26 <KPrintF>
    d1ae:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    d1b0:	|  |  |  |  |         move.l 136(sp),28(sp)
    d1b6:	|  |  |  |  |         move.l 1b1e0 <DOSBase>,d0
    d1bc:	|  |  |  |  |         movea.l d0,a6
    d1be:	|  |  |  |  |         move.l 28(sp),d1
    d1c2:	|  |  |  |  |         jsr -36(a6)
    d1c6:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    d1ca:	|  |  |  |  |         clr.w d0
    d1cc:	+--|--|--|--|-------- bra.w d274 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    d1d0:	|  |  |  |  \-------> move.l 152(sp),d0
    d1d4:	|  |  |  |            move.l d0,-(sp)
    d1d6:	|  |  |  |            jsr 13d0a <getTextFromAnyVar>
    d1dc:	|  |  |  |            addq.l #4,sp
    d1de:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    d1e2:	|  |  |  |     /----- beq.s d256 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    d1e4:	|  |  |  |     |      movea.l 100(sp),a0
    d1e8:	|  |  |  |     |      move.b (a0),d0
    d1ea:	|  |  |  |     |      ext.w d0
    d1ec:	|  |  |  |     |      movea.w d0,a0
    d1ee:	|  |  |  |     |      move.l a0,12(sp)
    d1f2:	|  |  |  |     |      move.l 136(sp),96(sp)
    d1f8:	|  |  |  |     |      move.l #98183,92(sp)
    d200:	|  |  |  |     |      moveq #99,d0
    d202:	|  |  |  |     |      not.b d0
    d204:	|  |  |  |     |      add.l sp,d0
    d206:	|  |  |  |     |      addi.l #-144,d0
    d20c:	|  |  |  |     |      move.l d0,88(sp)
    d210:	|  |  |  |     |      move.l 1b1e0 <DOSBase>,d0
    d216:	|  |  |  |     |      movea.l d0,a6
    d218:	|  |  |  |     |      move.l 96(sp),d1
    d21c:	|  |  |  |     |      move.l 92(sp),d2
    d220:	|  |  |  |     |      move.l 88(sp),d3
    d224:	|  |  |  |     |      jsr -354(a6)
    d228:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    d22c:	|  |  |  |     |      move.l 100(sp),80(sp)
    d232:	|  |  |  |     |      move.l 1b1d8 <SysBase>,d0
    d238:	|  |  |  |     |      movea.l d0,a6
    d23a:	|  |  |  |     |      movea.l 80(sp),a1
    d23e:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    d242:	|  |  |  \-----|----> movea.l 152(sp),a0
    d246:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    d24c:	|  \--|--------|----> tst.l 152(sp)
    d250:	|     \--------|----- bne.w d078 <stackToFile+0x110>
    d254:	|              |  /-- bra.s d258 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    d256:	|              \--|-> nop
    }
    Close(fp);
    d258:	|                 \-> move.l 136(sp),20(sp)
    d25e:	|                     move.l 1b1e0 <DOSBase>,d0
    d264:	|                     movea.l d0,a6
    d266:	|                     move.l 20(sp),d1
    d26a:	|                     jsr -36(a6)
    d26e:	|                     move.l d0,16(sp)
    return TRUE;
    d272:	|                     moveq #1,d0
}
    d274:	\-------------------> movem.l (sp)+,d2-d3/a6
    d278:	                      lea 144(sp),sp
    d27c:	                      rts

0000d27e <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    d27e:	       lea -20(sp),sp
    d282:	       move.l a6,-(sp)
    d284:	       move.l d2,-(sp)
	int a, len = strlen (s);
    d286:	       move.l 32(sp),-(sp)
    d28a:	       jsr 12c20 <strlen>
    d290:	       addq.l #4,sp
    d292:	       move.l d0,20(sp)

	put2bytes (len, fp);
    d296:	       move.l 36(sp),-(sp)
    d29a:	       move.l 24(sp),-(sp)
    d29e:	       jsr 8d0 <put2bytes>
    d2a4:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    d2a6:	       clr.l 24(sp)
    d2aa:	   /-- bra.s d300 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    d2ac:	/--|-> move.l 36(sp),16(sp)
    d2b2:	|  |   move.l 24(sp),d0
    d2b6:	|  |   movea.l 32(sp),a0
    d2ba:	|  |   adda.l d0,a0
    d2bc:	|  |   move.b (a0),d1
    d2be:	|  |   move.b 1b2e6 <encode1>,d0
    d2c4:	|  |   eor.b d1,d0
    d2c6:	|  |   ext.w d0
    d2c8:	|  |   movea.w d0,a0
    d2ca:	|  |   move.l a0,12(sp)
    d2ce:	|  |   move.l 1b1e0 <DOSBase>,d0
    d2d4:	|  |   movea.l d0,a6
    d2d6:	|  |   move.l 16(sp),d1
    d2da:	|  |   move.l 12(sp),d2
    d2de:	|  |   jsr -312(a6)
    d2e2:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    d2e6:	|  |   move.b 1b2e6 <encode1>,d0
    d2ec:	|  |   move.b d0,d1
    d2ee:	|  |   move.b 1b2e7 <encode2>,d0
    d2f4:	|  |   add.b d1,d0
    d2f6:	|  |   move.b d0,1b2e6 <encode1>
	for (a = 0; a < len; a ++) {
    d2fc:	|  |   addq.l #1,24(sp)
    d300:	|  \-> move.l 24(sp),d0
    d304:	|      cmp.l 20(sp),d0
    d308:	\----- blt.s d2ac <writeStringEncoded+0x2e>
	}
}
    d30a:	       nop
    d30c:	       nop
    d30e:	       move.l (sp)+,d2
    d310:	       movea.l (sp)+,a6
    d312:	       lea 20(sp),sp
    d316:	       rts

0000d318 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    d318:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    d31a:	                   tst.l 8(sp)
    d31e:	               /-- bne.s d324 <failSecurityCheck+0xc>
    d320:	               |   moveq #1,d0
    d322:	/--------------|-- bra.s d3a2 <failSecurityCheck+0x8a>

	int a = 0;
    d324:	|              \-> clr.l (sp)

	while (fn[a]) {
    d326:	|     /----------- bra.s d394 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    d328:	|  /--|----------> move.l (sp),d0
    d32a:	|  |  |            movea.l 8(sp),a0
    d32e:	|  |  |            adda.l d0,a0
    d330:	|  |  |            move.b (a0),d0
    d332:	|  |  |            ext.w d0
    d334:	|  |  |            movea.w d0,a0
    d336:	|  |  |            moveq #124,d0
    d338:	|  |  |            cmp.l a0,d0
    d33a:	|  |  |     /----- beq.s d37c <failSecurityCheck+0x64>
    d33c:	|  |  |     |      moveq #124,d1
    d33e:	|  |  |     |      cmp.l a0,d1
    d340:	|  |  |  /--|----- blt.s d392 <failSecurityCheck+0x7a>
    d342:	|  |  |  |  |      moveq #92,d0
    d344:	|  |  |  |  |      cmp.l a0,d0
    d346:	|  |  |  |  +----- beq.s d37c <failSecurityCheck+0x64>
    d348:	|  |  |  |  |      moveq #92,d1
    d34a:	|  |  |  |  |      cmp.l a0,d1
    d34c:	|  |  |  +--|----- blt.s d392 <failSecurityCheck+0x7a>
    d34e:	|  |  |  |  |      moveq #60,d0
    d350:	|  |  |  |  |      cmp.l a0,d0
    d352:	|  |  |  |  |  /-- blt.s d372 <failSecurityCheck+0x5a>
    d354:	|  |  |  |  |  |   moveq #34,d1
    d356:	|  |  |  |  |  |   cmp.l a0,d1
    d358:	|  |  |  +--|--|-- bgt.s d392 <failSecurityCheck+0x7a>
    d35a:	|  |  |  |  |  |   moveq #-34,d1
    d35c:	|  |  |  |  |  |   add.l a0,d1
    d35e:	|  |  |  |  |  |   move.l #83894529,d0
    d364:	|  |  |  |  |  |   lsr.l d1,d0
    d366:	|  |  |  |  |  |   moveq #1,d1
    d368:	|  |  |  |  |  |   and.l d1,d0
    d36a:	|  |  |  |  |  |   sne d0
    d36c:	|  |  |  |  |  |   neg.b d0
    d36e:	|  |  |  |  +--|-- bne.s d37c <failSecurityCheck+0x64>
    d370:	|  |  |  +--|--|-- bra.s d392 <failSecurityCheck+0x7a>
    d372:	|  |  |  |  |  \-> lea -62(a0),a0
    d376:	|  |  |  |  |      moveq #1,d0
    d378:	|  |  |  |  |      cmp.l a0,d0
    d37a:	|  |  |  +--|----- bcs.s d392 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    d37c:	|  |  |  |  \----> move.l 8(sp),-(sp)
    d380:	|  |  |  |         pea 17f8b <PutChar+0x1a15>
    d386:	|  |  |  |         jsr 15c26 <KPrintF>
    d38c:	|  |  |  |         addq.l #8,sp
				return TRUE;
    d38e:	|  |  |  |         moveq #1,d0
    d390:	+--|--|--|-------- bra.s d3a2 <failSecurityCheck+0x8a>
		}
		a++;
    d392:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    d394:	|  |  \----------> move.l (sp),d0
    d396:	|  |               movea.l 8(sp),a0
    d39a:	|  |               adda.l d0,a0
    d39c:	|  |               move.b (a0),d0
    d39e:	|  \-------------- bne.s d328 <failSecurityCheck+0x10>
	}
	return FALSE;
    d3a0:	|                  clr.w d0
}
    d3a2:	\----------------> addq.l #4,sp
    d3a4:	                   rts

0000d3a6 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    d3a6:	             lea -24(sp),sp
    d3aa:	             move.l a6,-(sp)
    d3ac:	             move.l 40(sp),d0
    d3b0:	             move.w d0,d0
    d3b2:	             move.w d0,6(sp)
	int fileNum = -1;
    d3b6:	             moveq #-1,d0
    d3b8:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    d3bc:	             jsr 512c <killSpeechTimers>

	switch (numParams) {
    d3c2:	             moveq #2,d0
    d3c4:	             cmp.l 32(sp),d0
    d3c8:	      /----- beq.s d40c <sayCore+0x66>
    d3ca:	      |      moveq #3,d0
    d3cc:	      |      cmp.l 32(sp),d0
    d3d0:	/-----|----- bne.w d4ee <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    d3d4:	|     |      movea.l 36(sp),a0
    d3d8:	|     |      move.l 24(a0),d0
    d3dc:	|     |      move.l d0,-(sp)
    d3de:	|     |      pea 5 <_start+0x5>
    d3e2:	|     |      lea 20(sp),a0
    d3e6:	|     |      move.l a0,-(sp)
    d3e8:	|     |      jsr 13734 <getValueType>
    d3ee:	|     |      lea 12(sp),sp
    d3f2:	|     |      tst.w d0
    d3f4:	|     |  /-- bne.s d3fc <sayCore+0x56>
    d3f6:	|     |  |   moveq #1,d0
    d3f8:	|  /--|--|-- bra.w d4fe <sayCore+0x158>
			trimStack (&fun -> stack);
    d3fc:	|  |  |  \-> moveq #24,d0
    d3fe:	|  |  |      add.l 36(sp),d0
    d402:	|  |  |      move.l d0,-(sp)
    d404:	|  |  |      jsr 140b8 <trimStack>
    d40a:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    d40c:	|  |  \----> movea.l 36(sp),a0
    d410:	|  |         move.l 24(a0),d0
    d414:	|  |         move.l d0,-(sp)
    d416:	|  |         jsr 13d0a <getTextFromAnyVar>
    d41c:	|  |         addq.l #4,sp
    d41e:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    d422:	|  |     /-- bne.s d42a <sayCore+0x84>
    d424:	|  |     |   moveq #1,d0
    d426:	|  +-----|-- bra.w d4fe <sayCore+0x158>
			trimStack (&fun -> stack);
    d42a:	|  |     \-> moveq #24,d0
    d42c:	|  |         add.l 36(sp),d0
    d430:	|  |         move.l d0,-(sp)
    d432:	|  |         jsr 140b8 <trimStack>
    d438:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d43a:	|  |         movea.l 36(sp),a0
    d43e:	|  |         move.l 24(a0),d0
    d442:	|  |         move.l d0,-(sp)
    d444:	|  |         pea 7 <_start+0x7>
    d448:	|  |         lea 16(sp),a0
    d44c:	|  |         move.l a0,-(sp)
    d44e:	|  |         jsr 13734 <getValueType>
    d454:	|  |         lea 12(sp),sp
    d458:	|  |         tst.w d0
    d45a:	|  |     /-- bne.s d462 <sayCore+0xbc>
    d45c:	|  |     |   moveq #1,d0
    d45e:	|  +-----|-- bra.w d4fe <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d462:	|  |     \-> movea.l 36(sp),a0
    d466:	|  |         move.l 24(a0),d0
    d46a:	|  |         move.l d0,-(sp)
    d46c:	|  |         pea 7 <_start+0x7>
    d470:	|  |         lea 16(sp),a0
    d474:	|  |         move.l a0,-(sp)
    d476:	|  |         jsr 13734 <getValueType>
    d47c:	|  |         lea 12(sp),sp
    d480:	|  |         tst.w d0
    d482:	|  |     /-- bne.s d488 <sayCore+0xe2>
    d484:	|  |     |   moveq #1,d0
    d486:	|  +-----|-- bra.s d4fe <sayCore+0x158>
			trimStack (&fun -> stack);
    d488:	|  |     \-> moveq #24,d0
    d48a:	|  |         add.l 36(sp),d0
    d48e:	|  |         move.l d0,-(sp)
    d490:	|  |         jsr 140b8 <trimStack>
    d496:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    d498:	|  |         movea.w 6(sp),a0
    d49c:	|  |         move.l 12(sp),d1
    d4a0:	|  |         move.l 8(sp),d0
    d4a4:	|  |         move.l a0,-(sp)
    d4a6:	|  |         move.l d1,-(sp)
    d4a8:	|  |         move.l d0,-(sp)
    d4aa:	|  |         move.l 36(sp),-(sp)
    d4ae:	|  |         jsr 70a6 <wrapSpeech>
    d4b4:	|  |         lea 16(sp),sp
    d4b8:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    d4bc:	|  |         movea.l 36(sp),a0
    d4c0:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    d4c6:	|  |         movea.l 36(sp),a0
    d4ca:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    d4d0:	|  |         move.l 24(sp),16(sp)
    d4d6:	|  |         move.l 1b1d8 <SysBase>,d0
    d4dc:	|  |         movea.l d0,a6
    d4de:	|  |         movea.l 16(sp),a1
    d4e2:	|  |         jsr -690(a6)
			newText = NULL;
    d4e6:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    d4ea:	|  |         moveq #0,d0
    d4ec:	|  +-------- bra.s d4fe <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    d4ee:	\--|-------> pea 18011 <PutChar+0x1a9b>
    d4f4:	   |         jsr 15c26 <KPrintF>
    d4fa:	   |         addq.l #4,sp
	return BR_ERROR;
    d4fc:	   |         moveq #1,d0
}
    d4fe:	   \-------> movea.l (sp)+,a6
    d500:	             lea 24(sp),sp
    d504:	             rts

0000d506 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    d506:	pea 1 <_start+0x1>
    d50a:	move.l 12(sp),-(sp)
    d50e:	move.l 12(sp),-(sp)
    d512:	jsr d3a6 <sayCore>
    d518:	lea 12(sp),sp
}
    d51c:	rts

0000d51e <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    d51e:	clr.l -(sp)
    d520:	move.l 12(sp),-(sp)
    d524:	move.l 12(sp),-(sp)
    d528:	jsr d3a6 <sayCore>
    d52e:	lea 12(sp),sp
}
    d532:	rts

0000d534 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    d534:	jsr 14100 <freeze>
	freezeSubs (); 
    d53a:	jsr 471c <freezeSubs>
	fun -> freezerLevel = 0;
    d540:	movea.l 8(sp),a0
    d544:	clr.b 56(a0)
	return BR_CONTINUE;
    d548:	moveq #2,d0
}
    d54a:	rts

0000d54c <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    d54c:	moveq #2,d0
}
    d54e:	rts

0000d550 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    d550:	nop
    d552:	rts

0000d554 <builtIn_setCursor>:

builtIn(setCursor)
{
    d554:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    d556:	movea.l 12(sp),a0
    d55a:	move.l 24(a0),d0
    d55e:	move.l d0,-(sp)
    d560:	jsr 13c0c <getAnimationFromVar>
    d566:	addq.l #4,sp
    d568:	move.l d0,(sp)
	pickAnimCursor (aa);
    d56a:	move.l (sp),-(sp)
    d56c:	jsr d6c <pickAnimCursor>
    d572:	addq.l #4,sp
	trimStack (&fun -> stack);
    d574:	moveq #24,d0
    d576:	add.l 12(sp),d0
    d57a:	move.l d0,-(sp)
    d57c:	jsr 140b8 <trimStack>
    d582:	addq.l #4,sp
	return BR_CONTINUE;
    d584:	moveq #2,d0
}
    d586:	addq.l #4,sp
    d588:	rts

0000d58a <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    d58a:	move.l 1b194 <input+0xa>,d1
    d590:	move.l 1b2ea <cameraX>,d0
    d596:	add.l d0,d1
    d598:	moveq #28,d0
    d59a:	add.l 8(sp),d0
    d59e:	move.l d1,-(sp)
    d5a0:	pea 1 <_start+0x1>
    d5a4:	move.l d0,-(sp)
    d5a6:	jsr 14026 <setVariable>
    d5ac:	lea 12(sp),sp
	return BR_CONTINUE;
    d5b0:	moveq #2,d0
}
    d5b2:	rts

0000d5b4 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    d5b4:	move.l 1b198 <input+0xe>,d1
    d5ba:	move.l 1b2ee <cameraY>,d0
    d5c0:	add.l d0,d1
    d5c2:	moveq #28,d0
    d5c4:	add.l 8(sp),d0
    d5c8:	move.l d1,-(sp)
    d5ca:	pea 1 <_start+0x1>
    d5ce:	move.l d0,-(sp)
    d5d0:	jsr 14026 <setVariable>
    d5d6:	lea 12(sp),sp
	return BR_CONTINUE;
    d5da:	moveq #2,d0
}
    d5dc:	rts

0000d5de <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    d5de:	move.l 1b194 <input+0xa>,d0
    d5e4:	move.l d0,-(sp)
    d5e6:	jsr 15ede <__floatsisf>
    d5ec:	addq.l #4,sp
    d5ee:	move.l d0,d1
    d5f0:	move.l 1ab78 <cameraZoom>,d0
    d5f6:	move.l d0,-(sp)
    d5f8:	move.l d1,-(sp)
    d5fa:	jsr 15f90 <__mulsf3>
    d600:	addq.l #8,sp
    d602:	move.l d0,-(sp)
    d604:	jsr 15e76 <__fixsfsi>
    d60a:	addq.l #4,sp
    d60c:	move.l d0,d1
    d60e:	moveq #28,d0
    d610:	add.l 8(sp),d0
    d614:	move.l d1,-(sp)
    d616:	pea 1 <_start+0x1>
    d61a:	move.l d0,-(sp)
    d61c:	jsr 14026 <setVariable>
    d622:	lea 12(sp),sp
	return BR_CONTINUE;
    d626:	moveq #2,d0
}
    d628:	rts

0000d62a <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    d62a:	move.l 1b198 <input+0xe>,d0
    d630:	move.l d0,-(sp)
    d632:	jsr 15ede <__floatsisf>
    d638:	addq.l #4,sp
    d63a:	move.l d0,d1
    d63c:	move.l 1ab78 <cameraZoom>,d0
    d642:	move.l d0,-(sp)
    d644:	move.l d1,-(sp)
    d646:	jsr 15f90 <__mulsf3>
    d64c:	addq.l #8,sp
    d64e:	move.l d0,-(sp)
    d650:	jsr 15e76 <__fixsfsi>
    d656:	addq.l #4,sp
    d658:	move.l d0,d1
    d65a:	moveq #28,d0
    d65c:	add.l 8(sp),d0
    d660:	move.l d1,-(sp)
    d662:	pea 1 <_start+0x1>
    d666:	move.l d0,-(sp)
    d668:	jsr 14026 <setVariable>
    d66e:	lea 12(sp),sp
	return BR_CONTINUE;
    d672:	moveq #2,d0
}
    d674:	rts

0000d676 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    d676:	jsr 6b5a <statusBarText>
    d67c:	move.l d0,d1
    d67e:	moveq #28,d0
    d680:	add.l 8(sp),d0
    d684:	move.l d1,-(sp)
    d686:	move.l d0,-(sp)
    d688:	jsr 13956 <makeTextVar>
    d68e:	addq.l #8,sp
	return BR_CONTINUE;
    d690:	moveq #2,d0
}
    d692:	rts

0000d694 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    d694:	       lea -20(sp),sp
    d698:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    d69a:	       movea.l 32(sp),a0
    d69e:	       move.l 24(a0),d0
    d6a2:	       move.l d0,-(sp)
    d6a4:	       jsr 13d0a <getTextFromAnyVar>
    d6aa:	       addq.l #4,sp
    d6ac:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    d6b0:	   /-- bne.s d6b8 <builtIn_getMatchingFiles+0x24>
    d6b2:	   |   moveq #1,d0
    d6b4:	/--|-- bra.w d77a <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    d6b8:	|  \-> moveq #24,d0
    d6ba:	|      add.l 32(sp),d0
    d6be:	|      move.l d0,-(sp)
    d6c0:	|      jsr 140b8 <trimStack>
    d6c6:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    d6c8:	|      moveq #28,d0
    d6ca:	|      add.l 32(sp),d0
    d6ce:	|      move.l d0,-(sp)
    d6d0:	|      jsr 13982 <unlinkVar>
    d6d6:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    d6d8:	|      movea.l 32(sp),a0
    d6dc:	|      moveq #6,d0
    d6de:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    d6e2:	|      moveq #12,d0
    d6e4:	|      move.l d0,16(sp)
    d6e8:	|      clr.l 12(sp)
    d6ec:	|      move.l 1b1d8 <SysBase>,d0
    d6f2:	|      movea.l d0,a6
    d6f4:	|      move.l 16(sp),d0
    d6f8:	|      move.l 12(sp),d1
    d6fc:	|      jsr -684(a6)
    d700:	|      move.l d0,8(sp)
    d704:	|      move.l 8(sp),d0
    d708:	|      movea.l 32(sp),a0
    d70c:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    d710:	|      moveq #32,d0
    d712:	|      add.l 32(sp),d0
    d716:	|  /-- bne.s d71c <builtIn_getMatchingFiles+0x88>
    d718:	|  |   moveq #1,d0
    d71a:	+--|-- bra.s d77a <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    d71c:	|  \-> movea.l 32(sp),a0
    d720:	|      movea.l 32(a0),a0
    d724:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    d726:	|      movea.l 32(sp),a0
    d72a:	|      movea.l 32(a0),a0
    d72e:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    d732:	|      movea.l 32(sp),a0
    d736:	|      movea.l 32(a0),a0
    d73a:	|      moveq #1,d0
    d73c:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    d740:	|      movea.l 32(sp),a0
    d744:	|      move.l 32(a0),d0
    d748:	|      move.l 20(sp),-(sp)
    d74c:	|      move.l d0,-(sp)
    d74e:	|      jsr 134f0 <getSavedGamesStack>
    d754:	|      addq.l #8,sp
    d756:	|      tst.w d0
    d758:	|  /-- bne.s d75e <builtIn_getMatchingFiles+0xca>
    d75a:	|  |   moveq #1,d0
    d75c:	+--|-- bra.s d77a <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    d75e:	|  \-> move.l 20(sp),4(sp)
    d764:	|      move.l 1b1d8 <SysBase>,d0
    d76a:	|      movea.l d0,a6
    d76c:	|      movea.l 4(sp),a1
    d770:	|      jsr -690(a6)
	newText = NULL;
    d774:	|      clr.l 20(sp)
	return BR_CONTINUE;
    d778:	|      moveq #2,d0
}
    d77a:	\----> movea.l (sp)+,a6
    d77c:	       lea 20(sp),sp
    d780:	       rts

0000d782 <builtIn_saveGame>:

builtIn(saveGame)
{
    d782:	       lea -12(sp),sp
    d786:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d788:	       movea.l 24(sp),a0
    d78c:	       move.l 24(a0),d0
    d790:	       move.l d0,-(sp)
    d792:	       jsr 13d0a <getTextFromAnyVar>
    d798:	       addq.l #4,sp
    d79a:	       move.l d0,1b1a4 <loadNow>
    trimStack(&fun->stack);
    d7a0:	       moveq #24,d0
    d7a2:	       add.l 24(sp),d0
    d7a6:	       move.l d0,-(sp)
    d7a8:	       jsr 140b8 <trimStack>
    d7ae:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    d7b0:	       move.l 1b1a4 <loadNow>,d0
    d7b6:	       move.l d0,-(sp)
    d7b8:	       jsr 2fe <encodeFilename>
    d7be:	       addq.l #4,sp
    d7c0:	       move.l d0,12(sp)
    FreeVec(loadNow);
    d7c4:	       move.l 1b1a4 <loadNow>,8(sp)
    d7cc:	       move.l 1b1d8 <SysBase>,d0
    d7d2:	       movea.l d0,a6
    d7d4:	       movea.l 8(sp),a1
    d7d8:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    d7dc:	       move.l 12(sp),-(sp)
    d7e0:	       jsr d318 <failSecurityCheck>
    d7e6:	       addq.l #4,sp
    d7e8:	       tst.w d0
    d7ea:	   /-- beq.s d7f0 <builtIn_saveGame+0x6e>
    d7ec:	   |   moveq #1,d0
    d7ee:	/--|-- bra.s d840 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    d7f0:	|  \-> move.l 12(sp),-(sp)
    d7f4:	|      pea 1803f <PutChar+0x1ac9>
    d7fa:	|      jsr 12c60 <joinStrings>
    d800:	|      addq.l #8,sp
    d802:	|      move.l d0,1b1a4 <loadNow>
    FreeVec(aaaaa);
    d808:	|      move.l 12(sp),4(sp)
    d80e:	|      move.l 1b1d8 <SysBase>,d0
    d814:	|      movea.l d0,a6
    d816:	|      movea.l 4(sp),a1
    d81a:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    d81e:	|      moveq #28,d0
    d820:	|      add.l 24(sp),d0
    d824:	|      clr.l -(sp)
    d826:	|      pea 1 <_start+0x1>
    d82a:	|      move.l d0,-(sp)
    d82c:	|      jsr 14026 <setVariable>
    d832:	|      lea 12(sp),sp
    saverFunc = fun;
    d836:	|      move.l 24(sp),1b2fa <saverFunc>
    return BR_KEEP_AND_PAUSE;
    d83e:	|      moveq #0,d0
}
    d840:	\----> movea.l (sp)+,a6
    d842:	       lea 12(sp),sp
    d846:	       rts

0000d848 <builtIn_fileExists>:

builtIn(fileExists)
{
    d848:	       lea -36(sp),sp
    d84c:	       move.l a6,-(sp)
    d84e:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    d850:	       movea.l 52(sp),a0
    d854:	       move.l 24(a0),d0
    d858:	       move.l d0,-(sp)
    d85a:	       jsr 13d0a <getTextFromAnyVar>
    d860:	       addq.l #4,sp
    d862:	       move.l d0,1b1a4 <loadNow>
    trimStack(&fun->stack);
    d868:	       moveq #24,d0
    d86a:	       add.l 52(sp),d0
    d86e:	       move.l d0,-(sp)
    d870:	       jsr 140b8 <trimStack>
    d876:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    d878:	       move.l 1b1a4 <loadNow>,d0
    d87e:	       move.l d0,-(sp)
    d880:	       jsr 2fe <encodeFilename>
    d886:	       addq.l #4,sp
    d888:	       move.l d0,40(sp)
    FreeVec(loadNow);
    d88c:	       move.l 1b1a4 <loadNow>,36(sp)
    d894:	       move.l 1b1d8 <SysBase>,d0
    d89a:	       movea.l d0,a6
    d89c:	       movea.l 36(sp),a1
    d8a0:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    d8a4:	       move.l 40(sp),-(sp)
    d8a8:	       jsr d318 <failSecurityCheck>
    d8ae:	       addq.l #4,sp
    d8b0:	       tst.w d0
    d8b2:	   /-- beq.s d8ba <builtIn_fileExists+0x72>
    d8b4:	   |   moveq #1,d0
    d8b6:	/--|-- bra.w d95a <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    d8ba:	|  \-> move.l 40(sp),32(sp)
    d8c0:	|      move.l #1005,28(sp)
    d8c8:	|      move.l 1b1e0 <DOSBase>,d0
    d8ce:	|      movea.l d0,a6
    d8d0:	|      move.l 32(sp),d1
    d8d4:	|      move.l 28(sp),d2
    d8d8:	|      jsr -30(a6)
    d8dc:	|      move.l d0,24(sp)
    d8e0:	|      move.l 24(sp),d0
    d8e4:	|      move.l d0,20(sp)
    if (!fp) {        
    d8e8:	|  /-- bne.s d8f8 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    d8ea:	|  |   pea 18041 <PutChar+0x1acb>
    d8f0:	|  |   jsr 15c26 <KPrintF>
    d8f6:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    d8f8:	|  \-> tst.l 20(sp)
    d8fc:	|      sne d0
    d8fe:	|      neg.b d0
    d900:	|      moveq #0,d1
    d902:	|      move.b d0,d1
    d904:	|      moveq #28,d0
    d906:	|      add.l 52(sp),d0
    d90a:	|      move.l d1,-(sp)
    d90c:	|      pea 1 <_start+0x1>
    d910:	|      move.l d0,-(sp)
    d912:	|      jsr 14026 <setVariable>
    d918:	|      lea 12(sp),sp
    if (fp) Close(fp);
    d91c:	|      tst.l 20(sp)
    d920:	|  /-- beq.s d93c <builtIn_fileExists+0xf4>
    d922:	|  |   move.l 20(sp),16(sp)
    d928:	|  |   move.l 1b1e0 <DOSBase>,d0
    d92e:	|  |   movea.l d0,a6
    d930:	|  |   move.l 16(sp),d1
    d934:	|  |   jsr -36(a6)
    d938:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    d93c:	|  \-> move.l 40(sp),8(sp)
    d942:	|      move.l 1b1d8 <SysBase>,d0
    d948:	|      movea.l d0,a6
    d94a:	|      movea.l 8(sp),a1
    d94e:	|      jsr -690(a6)
    loadNow = NULL;
    d952:	|      clr.l 1b1a4 <loadNow>
    return BR_CONTINUE;
    d958:	|      moveq #2,d0
}
    d95a:	\----> move.l (sp)+,d2
    d95c:	       movea.l (sp)+,a6
    d95e:	       lea 36(sp),sp
    d962:	       rts

0000d964 <builtIn_loadGame>:

builtIn(loadGame)
{
    d964:	       lea -36(sp),sp
    d968:	       move.l a6,-(sp)
    d96a:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    d96c:	       movea.l 52(sp),a0
    d970:	       move.l 24(a0),d0
    d974:	       move.l d0,-(sp)
    d976:	       jsr 13d0a <getTextFromAnyVar>
    d97c:	       addq.l #4,sp
    d97e:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    d982:	       moveq #24,d0
    d984:	       add.l 52(sp),d0
    d988:	       move.l d0,-(sp)
    d98a:	       jsr 140b8 <trimStack>
    d990:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    d992:	       move.l 40(sp),-(sp)
    d996:	       jsr 2fe <encodeFilename>
    d99c:	       addq.l #4,sp
    d99e:	       move.l d0,1b1a4 <loadNow>
    FreeVec(aaaaa);
    d9a4:	       move.l 40(sp),36(sp)
    d9aa:	       move.l 1b1d8 <SysBase>,d0
    d9b0:	       movea.l d0,a6
    d9b2:	       movea.l 36(sp),a1
    d9b6:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    d9ba:	       move.l 1b1a4 <loadNow>,d0
    d9c0:	       move.l d0,-(sp)
    d9c2:	       jsr d318 <failSecurityCheck>
    d9c8:	       addq.l #4,sp
    d9ca:	       tst.w d0
    d9cc:	   /-- beq.s d9d2 <builtIn_loadGame+0x6e>
    d9ce:	   |   moveq #1,d0
    d9d0:	/--|-- bra.s da42 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    d9d2:	|  \-> move.l 1b1a4 <loadNow>,32(sp)
    d9da:	|      move.l #1005,28(sp)
    d9e2:	|      move.l 1b1e0 <DOSBase>,d0
    d9e8:	|      movea.l d0,a6
    d9ea:	|      move.l 32(sp),d1
    d9ee:	|      move.l 28(sp),d2
    d9f2:	|      jsr -30(a6)
    d9f6:	|      move.l d0,24(sp)
    d9fa:	|      move.l 24(sp),d0
    d9fe:	|      move.l d0,20(sp)
    if (fp) {
    da02:	|  /-- beq.s da22 <builtIn_loadGame+0xbe>
        Close(fp);
    da04:	|  |   move.l 20(sp),12(sp)
    da0a:	|  |   move.l 1b1e0 <DOSBase>,d0
    da10:	|  |   movea.l d0,a6
    da12:	|  |   move.l 12(sp),d1
    da16:	|  |   jsr -36(a6)
    da1a:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    da1e:	|  |   moveq #0,d0
    da20:	+--|-- bra.s da42 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    da22:	|  \-> move.l 1b1a4 <loadNow>,16(sp)
    da2a:	|      move.l 1b1d8 <SysBase>,d0
    da30:	|      movea.l d0,a6
    da32:	|      movea.l 16(sp),a1
    da36:	|      jsr -690(a6)
    loadNow = NULL;
    da3a:	|      clr.l 1b1a4 <loadNow>
    return BR_CONTINUE;
    da40:	|      moveq #2,d0
}
    da42:	\----> move.l (sp)+,d2
    da44:	       movea.l (sp)+,a6
    da46:	       lea 36(sp),sp
    da4a:	       rts

0000da4c <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    da4c:	move.l 1b2d0 <sceneHeight>,d0
    da52:	move.l d0,d1
    da54:	move.l 1b2cc <sceneWidth>,d0
    da5a:	move.l d1,-(sp)
    da5c:	move.l d0,-(sp)
    da5e:	clr.l -(sp)
    da60:	clr.l -(sp)
    da62:	jsr c20c <blankScreen>
    da68:	lea 16(sp),sp
	return BR_CONTINUE;
    da6c:	moveq #2,d0
}
    da6e:	rts

0000da70 <builtIn_blankArea>:

builtIn(blankArea)
{
    da70:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    da74:	       movea.l 24(sp),a0
    da78:	       move.l 24(a0),d0
    da7c:	       move.l d0,-(sp)
    da7e:	       pea 1 <_start+0x1>
    da82:	       lea 8(sp),a0
    da86:	       move.l a0,-(sp)
    da88:	       jsr 13734 <getValueType>
    da8e:	       lea 12(sp),sp
    da92:	       tst.w d0
    da94:	   /-- bne.s da9c <builtIn_blankArea+0x2c>
    da96:	   |   moveq #1,d0
    da98:	/--|-- bra.w db72 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    da9c:	|  \-> moveq #24,d0
    da9e:	|      add.l 24(sp),d0
    daa2:	|      move.l d0,-(sp)
    daa4:	|      jsr 140b8 <trimStack>
    daaa:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    daac:	|      movea.l 24(sp),a0
    dab0:	|      move.l 24(a0),d0
    dab4:	|      move.l d0,-(sp)
    dab6:	|      pea 1 <_start+0x1>
    daba:	|      lea 12(sp),a0
    dabe:	|      move.l a0,-(sp)
    dac0:	|      jsr 13734 <getValueType>
    dac6:	|      lea 12(sp),sp
    daca:	|      tst.w d0
    dacc:	|  /-- bne.s dad4 <builtIn_blankArea+0x64>
    dace:	|  |   moveq #1,d0
    dad0:	+--|-- bra.w db72 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    dad4:	|  \-> moveq #24,d0
    dad6:	|      add.l 24(sp),d0
    dada:	|      move.l d0,-(sp)
    dadc:	|      jsr 140b8 <trimStack>
    dae2:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    dae4:	|      movea.l 24(sp),a0
    dae8:	|      move.l 24(a0),d0
    daec:	|      move.l d0,-(sp)
    daee:	|      pea 1 <_start+0x1>
    daf2:	|      moveq #16,d0
    daf4:	|      add.l sp,d0
    daf6:	|      move.l d0,-(sp)
    daf8:	|      jsr 13734 <getValueType>
    dafe:	|      lea 12(sp),sp
    db02:	|      tst.w d0
    db04:	|  /-- bne.s db0a <builtIn_blankArea+0x9a>
    db06:	|  |   moveq #1,d0
    db08:	+--|-- bra.s db72 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    db0a:	|  \-> moveq #24,d0
    db0c:	|      add.l 24(sp),d0
    db10:	|      move.l d0,-(sp)
    db12:	|      jsr 140b8 <trimStack>
    db18:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    db1a:	|      movea.l 24(sp),a0
    db1e:	|      move.l 24(a0),d0
    db22:	|      move.l d0,-(sp)
    db24:	|      pea 1 <_start+0x1>
    db28:	|      moveq #20,d0
    db2a:	|      add.l sp,d0
    db2c:	|      move.l d0,-(sp)
    db2e:	|      jsr 13734 <getValueType>
    db34:	|      lea 12(sp),sp
    db38:	|      tst.w d0
    db3a:	|  /-- bne.s db40 <builtIn_blankArea+0xd0>
    db3c:	|  |   moveq #1,d0
    db3e:	+--|-- bra.s db72 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    db40:	|  \-> moveq #24,d0
    db42:	|      add.l 24(sp),d0
    db46:	|      move.l d0,-(sp)
    db48:	|      jsr 140b8 <trimStack>
    db4e:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    db50:	|      movea.l (sp),a1
    db52:	|      movea.l 4(sp),a0
    db56:	|      move.l 8(sp),d1
    db5a:	|      move.l 12(sp),d0
    db5e:	|      move.l a1,-(sp)
    db60:	|      move.l a0,-(sp)
    db62:	|      move.l d1,-(sp)
    db64:	|      move.l d0,-(sp)
    db66:	|      jsr c20c <blankScreen>
    db6c:	|      lea 16(sp),sp
	return BR_CONTINUE;
    db70:	|      moveq #2,d0
}
    db72:	\----> lea 16(sp),sp
    db76:	       rts

0000db78 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    db78:	jsr c220 <darkScreen>
	return BR_CONTINUE;
    db7e:	moveq #2,d0
}
    db80:	rts

0000db82 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    db82:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    db86:	       movea.l 20(sp),a0
    db8a:	       move.l 24(a0),d0
    db8e:	       move.l d0,-(sp)
    db90:	       pea 1 <_start+0x1>
    db94:	       lea 8(sp),a0
    db98:	       move.l a0,-(sp)
    db9a:	       jsr 13734 <getValueType>
    dba0:	       lea 12(sp),sp
    dba4:	       tst.w d0
    dba6:	   /-- bne.s dbae <builtIn_addOverlay+0x2c>
    dba8:	   |   moveq #1,d0
    dbaa:	/--|-- bra.w dc46 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    dbae:	|  \-> moveq #24,d0
    dbb0:	|      add.l 20(sp),d0
    dbb4:	|      move.l d0,-(sp)
    dbb6:	|      jsr 140b8 <trimStack>
    dbbc:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dbbe:	|      movea.l 20(sp),a0
    dbc2:	|      move.l 24(a0),d0
    dbc6:	|      move.l d0,-(sp)
    dbc8:	|      pea 1 <_start+0x1>
    dbcc:	|      moveq #12,d0
    dbce:	|      add.l sp,d0
    dbd0:	|      move.l d0,-(sp)
    dbd2:	|      jsr 13734 <getValueType>
    dbd8:	|      lea 12(sp),sp
    dbdc:	|      tst.w d0
    dbde:	|  /-- bne.s dbe4 <builtIn_addOverlay+0x62>
    dbe0:	|  |   moveq #1,d0
    dbe2:	+--|-- bra.s dc46 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    dbe4:	|  \-> moveq #24,d0
    dbe6:	|      add.l 20(sp),d0
    dbea:	|      move.l d0,-(sp)
    dbec:	|      jsr 140b8 <trimStack>
    dbf2:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dbf4:	|      movea.l 20(sp),a0
    dbf8:	|      move.l 24(a0),d0
    dbfc:	|      move.l d0,-(sp)
    dbfe:	|      pea 5 <_start+0x5>
    dc02:	|      moveq #16,d0
    dc04:	|      add.l sp,d0
    dc06:	|      move.l d0,-(sp)
    dc08:	|      jsr 13734 <getValueType>
    dc0e:	|      lea 12(sp),sp
    dc12:	|      tst.w d0
    dc14:	|  /-- bne.s dc1a <builtIn_addOverlay+0x98>
    dc16:	|  |   moveq #1,d0
    dc18:	+--|-- bra.s dc46 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    dc1a:	|  \-> moveq #24,d0
    dc1c:	|      add.l 20(sp),d0
    dc20:	|      move.l d0,-(sp)
    dc22:	|      jsr 140b8 <trimStack>
    dc28:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    dc2a:	|      movea.l (sp),a0
    dc2c:	|      move.l 4(sp),d1
    dc30:	|      move.l 8(sp),d0
    dc34:	|      move.l a0,-(sp)
    dc36:	|      move.l d1,-(sp)
    dc38:	|      move.l d0,-(sp)
    dc3a:	|      jsr c33e <loadBackDrop>
    dc40:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dc44:	|      moveq #2,d0
}
    dc46:	\----> lea 12(sp),sp
    dc4a:	       rts

0000dc4c <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    dc4c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc50:	       movea.l 20(sp),a0
    dc54:	       move.l 24(a0),d0
    dc58:	       move.l d0,-(sp)
    dc5a:	       pea 1 <_start+0x1>
    dc5e:	       lea 8(sp),a0
    dc62:	       move.l a0,-(sp)
    dc64:	       jsr 13734 <getValueType>
    dc6a:	       lea 12(sp),sp
    dc6e:	       tst.w d0
    dc70:	   /-- bne.s dc78 <builtIn_mixOverlay+0x2c>
    dc72:	   |   moveq #1,d0
    dc74:	/--|-- bra.w dd10 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    dc78:	|  \-> moveq #24,d0
    dc7a:	|      add.l 20(sp),d0
    dc7e:	|      move.l d0,-(sp)
    dc80:	|      jsr 140b8 <trimStack>
    dc86:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc88:	|      movea.l 20(sp),a0
    dc8c:	|      move.l 24(a0),d0
    dc90:	|      move.l d0,-(sp)
    dc92:	|      pea 1 <_start+0x1>
    dc96:	|      moveq #12,d0
    dc98:	|      add.l sp,d0
    dc9a:	|      move.l d0,-(sp)
    dc9c:	|      jsr 13734 <getValueType>
    dca2:	|      lea 12(sp),sp
    dca6:	|      tst.w d0
    dca8:	|  /-- bne.s dcae <builtIn_mixOverlay+0x62>
    dcaa:	|  |   moveq #1,d0
    dcac:	+--|-- bra.s dd10 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    dcae:	|  \-> moveq #24,d0
    dcb0:	|      add.l 20(sp),d0
    dcb4:	|      move.l d0,-(sp)
    dcb6:	|      jsr 140b8 <trimStack>
    dcbc:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    dcbe:	|      movea.l 20(sp),a0
    dcc2:	|      move.l 24(a0),d0
    dcc6:	|      move.l d0,-(sp)
    dcc8:	|      pea 5 <_start+0x5>
    dccc:	|      moveq #16,d0
    dcce:	|      add.l sp,d0
    dcd0:	|      move.l d0,-(sp)
    dcd2:	|      jsr 13734 <getValueType>
    dcd8:	|      lea 12(sp),sp
    dcdc:	|      tst.w d0
    dcde:	|  /-- bne.s dce4 <builtIn_mixOverlay+0x98>
    dce0:	|  |   moveq #1,d0
    dce2:	+--|-- bra.s dd10 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    dce4:	|  \-> moveq #24,d0
    dce6:	|      add.l 20(sp),d0
    dcea:	|      move.l d0,-(sp)
    dcec:	|      jsr 140b8 <trimStack>
    dcf2:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    dcf4:	|      movea.l (sp),a0
    dcf6:	|      move.l 4(sp),d1
    dcfa:	|      move.l 8(sp),d0
    dcfe:	|      move.l a0,-(sp)
    dd00:	|      move.l d1,-(sp)
    dd02:	|      move.l d0,-(sp)
    dd04:	|      jsr c3b4 <mixBackDrop>
    dd0a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    dd0e:	|      moveq #2,d0
}
    dd10:	\----> lea 12(sp),sp
    dd14:	       rts

0000dd16 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    dd16:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    dd1a:	       pea 1805f <PutChar+0x1ae9>
    dd20:	       jsr 15c26 <KPrintF>
    dd26:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd28:	       movea.l 20(sp),a0
    dd2c:	       move.l 24(a0),d0
    dd30:	       move.l d0,-(sp)
    dd32:	       pea 1 <_start+0x1>
    dd36:	       lea 8(sp),a0
    dd3a:	       move.l a0,-(sp)
    dd3c:	       jsr 13734 <getValueType>
    dd42:	       lea 12(sp),sp
    dd46:	       tst.w d0
    dd48:	   /-- bne.s dd50 <builtIn_pasteImage+0x3a>
    dd4a:	   |   moveq #1,d0
    dd4c:	/--|-- bra.w ddee <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    dd50:	|  \-> moveq #24,d0
    dd52:	|      add.l 20(sp),d0
    dd56:	|      move.l d0,-(sp)
    dd58:	|      jsr 140b8 <trimStack>
    dd5e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd60:	|      movea.l 20(sp),a0
    dd64:	|      move.l 24(a0),d0
    dd68:	|      move.l d0,-(sp)
    dd6a:	|      pea 1 <_start+0x1>
    dd6e:	|      moveq #12,d0
    dd70:	|      add.l sp,d0
    dd72:	|      move.l d0,-(sp)
    dd74:	|      jsr 13734 <getValueType>
    dd7a:	|      lea 12(sp),sp
    dd7e:	|      tst.w d0
    dd80:	|  /-- bne.s dd86 <builtIn_pasteImage+0x70>
    dd82:	|  |   moveq #1,d0
    dd84:	+--|-- bra.s ddee <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    dd86:	|  \-> moveq #24,d0
    dd88:	|      add.l 20(sp),d0
    dd8c:	|      move.l d0,-(sp)
    dd8e:	|      jsr 140b8 <trimStack>
    dd94:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    dd96:	|      movea.l 20(sp),a0
    dd9a:	|      move.l 24(a0),d0
    dd9e:	|      move.l d0,-(sp)
    dda0:	|      jsr 13c0c <getAnimationFromVar>
    dda6:	|      addq.l #4,sp
    dda8:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ddac:	|      moveq #24,d0
    ddae:	|      add.l 20(sp),d0
    ddb2:	|      move.l d0,-(sp)
    ddb4:	|      jsr 140b8 <trimStack>
    ddba:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ddbc:	|      tst.l 8(sp)
    ddc0:	|  /-- bne.s ddc6 <builtIn_pasteImage+0xb0>
    ddc2:	|  |   moveq #2,d0
    ddc4:	+--|-- bra.s ddee <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    ddc6:	|  \-> move.l (sp),d1
    ddc8:	|      move.l 4(sp),d0
    ddcc:	|      move.l 8(sp),-(sp)
    ddd0:	|      move.l d1,-(sp)
    ddd2:	|      move.l d0,-(sp)
    ddd4:	|      jsr d94 <pasteCursor>
    ddda:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    ddde:	|      pea 18074 <PutChar+0x1afe>
    dde4:	|      jsr 15c26 <KPrintF>
    ddea:	|      addq.l #4,sp
	return BR_CONTINUE;	
    ddec:	|      moveq #2,d0
}
    ddee:	\----> lea 12(sp),sp
    ddf2:	       rts

0000ddf4 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ddf4:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ddf6:	       movea.l 16(sp),a0
    ddfa:	       move.l 24(a0),d0
    ddfe:	       move.l d0,-(sp)
    de00:	       pea 1 <_start+0x1>
    de04:	       move.l sp,d0
    de06:	       addq.l #8,d0
    de08:	       move.l d0,-(sp)
    de0a:	       jsr 13734 <getValueType>
    de10:	       lea 12(sp),sp
    de14:	       tst.w d0
    de16:	   /-- bne.s de1e <builtIn_setSceneDimensions+0x2a>
    de18:	   |   moveq #1,d0
    de1a:	/--|-- bra.w dea6 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    de1e:	|  \-> moveq #24,d0
    de20:	|      add.l 16(sp),d0
    de24:	|      move.l d0,-(sp)
    de26:	|      jsr 140b8 <trimStack>
    de2c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    de2e:	|      movea.l 16(sp),a0
    de32:	|      move.l 24(a0),d0
    de36:	|      move.l d0,-(sp)
    de38:	|      pea 1 <_start+0x1>
    de3c:	|      moveq #12,d0
    de3e:	|      add.l sp,d0
    de40:	|      move.l d0,-(sp)
    de42:	|      jsr 13734 <getValueType>
    de48:	|      lea 12(sp),sp
    de4c:	|      tst.w d0
    de4e:	|  /-- bne.s de54 <builtIn_setSceneDimensions+0x60>
    de50:	|  |   moveq #1,d0
    de52:	+--|-- bra.s dea6 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    de54:	|  \-> moveq #24,d0
    de56:	|      add.l 16(sp),d0
    de5a:	|      move.l d0,-(sp)
    de5c:	|      jsr 140b8 <trimStack>
    de62:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    de64:	|      move.l (sp),d1
    de66:	|      move.l 4(sp),d0
    de6a:	|      move.l d1,-(sp)
    de6c:	|      move.l d0,-(sp)
    de6e:	|      jsr c40a <resizeBackdrop>
    de74:	|      addq.l #8,sp
    de76:	|      tst.w d0
    de78:	|  /-- beq.s de96 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    de7a:	|  |   move.l (sp),d1
    de7c:	|  |   move.l 4(sp),d0
    de80:	|  |   move.l d1,-(sp)
    de82:	|  |   move.l d0,-(sp)
    de84:	|  |   clr.l -(sp)
    de86:	|  |   clr.l -(sp)
    de88:	|  |   jsr c20c <blankScreen>
    de8e:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    de92:	|  |   moveq #2,d0
    de94:	+--|-- bra.s dea6 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    de96:	|  \-> pea 1808a <PutChar+0x1b14>
    de9c:	|      jsr 15c26 <KPrintF>
    dea2:	|      addq.l #4,sp
	return BR_ERROR;
    dea4:	|      moveq #1,d0
}
    dea6:	\----> addq.l #8,sp
    dea8:	       rts

0000deaa <builtIn_aimCamera>:

builtIn(aimCamera)
{
    deaa:	          move.l d3,-(sp)
    deac:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    deae:	          movea.l 16(sp),a0
    deb2:	          move.l 24(a0),d0
    deb6:	          move.l d0,-(sp)
    deb8:	          pea 1 <_start+0x1>
    debc:	          pea 1b2ee <cameraY>
    dec2:	          jsr 13734 <getValueType>
    dec8:	          lea 12(sp),sp
    decc:	          tst.w d0
    dece:	      /-- bne.s ded6 <builtIn_aimCamera+0x2c>
    ded0:	      |   moveq #1,d0
    ded2:	/-----|-- bra.w e158 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ded6:	|     \-> moveq #24,d0
    ded8:	|         add.l 16(sp),d0
    dedc:	|         move.l d0,-(sp)
    dede:	|         jsr 140b8 <trimStack>
    dee4:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dee6:	|         movea.l 16(sp),a0
    deea:	|         move.l 24(a0),d0
    deee:	|         move.l d0,-(sp)
    def0:	|         pea 1 <_start+0x1>
    def4:	|         pea 1b2ea <cameraX>
    defa:	|         jsr 13734 <getValueType>
    df00:	|         lea 12(sp),sp
    df04:	|         tst.w d0
    df06:	|     /-- bne.s df0e <builtIn_aimCamera+0x64>
    df08:	|     |   moveq #1,d0
    df0a:	+-----|-- bra.w e158 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    df0e:	|     \-> moveq #24,d0
    df10:	|         add.l 16(sp),d0
    df14:	|         move.l d0,-(sp)
    df16:	|         jsr 140b8 <trimStack>
    df1c:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    df1e:	|         move.l 1b2ea <cameraX>,d0
    df24:	|         move.l d0,-(sp)
    df26:	|         jsr 15ede <__floatsisf>
    df2c:	|         addq.l #4,sp
    df2e:	|         move.l d0,d2
    df30:	|         move.l 1b12c <winWidth>,d0
    df36:	|         lsr.l #1,d0
    df38:	|         move.l d0,-(sp)
    df3a:	|         jsr 15f06 <__floatunsisf>
    df40:	|         addq.l #4,sp
    df42:	|         move.l d0,d1
    df44:	|         move.l 1ab78 <cameraZoom>,d0
    df4a:	|         move.l d0,-(sp)
    df4c:	|         move.l d1,-(sp)
    df4e:	|         jsr 15d8a <__divsf3>
    df54:	|         addq.l #8,sp
    df56:	|         move.l d0,-(sp)
    df58:	|         move.l d2,-(sp)
    df5a:	|         jsr 161d2 <__subsf3>
    df60:	|         addq.l #8,sp
    df62:	|         move.l d0,-(sp)
    df64:	|         jsr 15e76 <__fixsfsi>
    df6a:	|         addq.l #4,sp
    df6c:	|         move.l d0,1b2ea <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    df72:	|         move.l 1b2ee <cameraY>,d0
    df78:	|         move.l d0,-(sp)
    df7a:	|         jsr 15ede <__floatsisf>
    df80:	|         addq.l #4,sp
    df82:	|         move.l d0,d2
    df84:	|         move.l 1b130 <winHeight>,d0
    df8a:	|         lsr.l #1,d0
    df8c:	|         move.l d0,-(sp)
    df8e:	|         jsr 15f06 <__floatunsisf>
    df94:	|         addq.l #4,sp
    df96:	|         move.l d0,d1
    df98:	|         move.l 1ab78 <cameraZoom>,d0
    df9e:	|         move.l d0,-(sp)
    dfa0:	|         move.l d1,-(sp)
    dfa2:	|         jsr 15d8a <__divsf3>
    dfa8:	|         addq.l #8,sp
    dfaa:	|         move.l d0,-(sp)
    dfac:	|         move.l d2,-(sp)
    dfae:	|         jsr 161d2 <__subsf3>
    dfb4:	|         addq.l #8,sp
    dfb6:	|         move.l d0,-(sp)
    dfb8:	|         jsr 15e76 <__fixsfsi>
    dfbe:	|         addq.l #4,sp
    dfc0:	|         move.l d0,1b2ee <cameraY>

	if (cameraX < 0) cameraX = 0;
    dfc6:	|         move.l 1b2ea <cameraX>,d0
    dfcc:	|     /-- bpl.s dfd8 <builtIn_aimCamera+0x12e>
    dfce:	|     |   clr.l 1b2ea <cameraX>
    dfd4:	|  /--|-- bra.w e08e <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    dfd8:	|  |  \-> move.l 1b2ea <cameraX>,d0
    dfde:	|  |      move.l d0,-(sp)
    dfe0:	|  |      jsr 15ede <__floatsisf>
    dfe6:	|  |      addq.l #4,sp
    dfe8:	|  |      move.l d0,d2
    dfea:	|  |      move.l 1b2cc <sceneWidth>,d0
    dff0:	|  |      move.l d0,-(sp)
    dff2:	|  |      jsr 15f06 <__floatunsisf>
    dff8:	|  |      addq.l #4,sp
    dffa:	|  |      move.l d0,d3
    dffc:	|  |      move.l 1b12c <winWidth>,d0
    e002:	|  |      move.l d0,-(sp)
    e004:	|  |      jsr 15f06 <__floatunsisf>
    e00a:	|  |      addq.l #4,sp
    e00c:	|  |      move.l d0,d1
    e00e:	|  |      move.l 1ab78 <cameraZoom>,d0
    e014:	|  |      move.l d0,-(sp)
    e016:	|  |      move.l d1,-(sp)
    e018:	|  |      jsr 15d8a <__divsf3>
    e01e:	|  |      addq.l #8,sp
    e020:	|  |      move.l d0,-(sp)
    e022:	|  |      move.l d3,-(sp)
    e024:	|  |      jsr 161d2 <__subsf3>
    e02a:	|  |      addq.l #8,sp
    e02c:	|  |      move.l d0,-(sp)
    e02e:	|  |      move.l d2,-(sp)
    e030:	|  |      jsr 1604a <__gtsf2>
    e036:	|  |      addq.l #8,sp
    e038:	|  |      tst.l d0
    e03a:	|  +----- ble.s e08e <builtIn_aimCamera+0x1e4>
    e03c:	|  |      move.l 1b2cc <sceneWidth>,d0
    e042:	|  |      move.l d0,-(sp)
    e044:	|  |      jsr 15f06 <__floatunsisf>
    e04a:	|  |      addq.l #4,sp
    e04c:	|  |      move.l d0,d2
    e04e:	|  |      move.l 1b12c <winWidth>,d0
    e054:	|  |      move.l d0,-(sp)
    e056:	|  |      jsr 15f06 <__floatunsisf>
    e05c:	|  |      addq.l #4,sp
    e05e:	|  |      move.l d0,d1
    e060:	|  |      move.l 1ab78 <cameraZoom>,d0
    e066:	|  |      move.l d0,-(sp)
    e068:	|  |      move.l d1,-(sp)
    e06a:	|  |      jsr 15d8a <__divsf3>
    e070:	|  |      addq.l #8,sp
    e072:	|  |      move.l d0,-(sp)
    e074:	|  |      move.l d2,-(sp)
    e076:	|  |      jsr 161d2 <__subsf3>
    e07c:	|  |      addq.l #8,sp
    e07e:	|  |      move.l d0,-(sp)
    e080:	|  |      jsr 15e76 <__fixsfsi>
    e086:	|  |      addq.l #4,sp
    e088:	|  |      move.l d0,1b2ea <cameraX>
	if (cameraY < 0) cameraY = 0;
    e08e:	|  \----> move.l 1b2ee <cameraY>,d0
    e094:	|     /-- bpl.s e0a0 <builtIn_aimCamera+0x1f6>
    e096:	|     |   clr.l 1b2ee <cameraY>
    e09c:	|  /--|-- bra.w e156 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    e0a0:	|  |  \-> move.l 1b2ee <cameraY>,d0
    e0a6:	|  |      move.l d0,-(sp)
    e0a8:	|  |      jsr 15ede <__floatsisf>
    e0ae:	|  |      addq.l #4,sp
    e0b0:	|  |      move.l d0,d2
    e0b2:	|  |      move.l 1b2d0 <sceneHeight>,d0
    e0b8:	|  |      move.l d0,-(sp)
    e0ba:	|  |      jsr 15f06 <__floatunsisf>
    e0c0:	|  |      addq.l #4,sp
    e0c2:	|  |      move.l d0,d3
    e0c4:	|  |      move.l 1b130 <winHeight>,d0
    e0ca:	|  |      move.l d0,-(sp)
    e0cc:	|  |      jsr 15f06 <__floatunsisf>
    e0d2:	|  |      addq.l #4,sp
    e0d4:	|  |      move.l d0,d1
    e0d6:	|  |      move.l 1ab78 <cameraZoom>,d0
    e0dc:	|  |      move.l d0,-(sp)
    e0de:	|  |      move.l d1,-(sp)
    e0e0:	|  |      jsr 15d8a <__divsf3>
    e0e6:	|  |      addq.l #8,sp
    e0e8:	|  |      move.l d0,-(sp)
    e0ea:	|  |      move.l d3,-(sp)
    e0ec:	|  |      jsr 161d2 <__subsf3>
    e0f2:	|  |      addq.l #8,sp
    e0f4:	|  |      move.l d0,-(sp)
    e0f6:	|  |      move.l d2,-(sp)
    e0f8:	|  |      jsr 1604a <__gtsf2>
    e0fe:	|  |      addq.l #8,sp
    e100:	|  |      tst.l d0
    e102:	|  +----- ble.s e156 <builtIn_aimCamera+0x2ac>
    e104:	|  |      move.l 1b2d0 <sceneHeight>,d0
    e10a:	|  |      move.l d0,-(sp)
    e10c:	|  |      jsr 15f06 <__floatunsisf>
    e112:	|  |      addq.l #4,sp
    e114:	|  |      move.l d0,d2
    e116:	|  |      move.l 1b130 <winHeight>,d0
    e11c:	|  |      move.l d0,-(sp)
    e11e:	|  |      jsr 15f06 <__floatunsisf>
    e124:	|  |      addq.l #4,sp
    e126:	|  |      move.l d0,d1
    e128:	|  |      move.l 1ab78 <cameraZoom>,d0
    e12e:	|  |      move.l d0,-(sp)
    e130:	|  |      move.l d1,-(sp)
    e132:	|  |      jsr 15d8a <__divsf3>
    e138:	|  |      addq.l #8,sp
    e13a:	|  |      move.l d0,-(sp)
    e13c:	|  |      move.l d2,-(sp)
    e13e:	|  |      jsr 161d2 <__subsf3>
    e144:	|  |      addq.l #8,sp
    e146:	|  |      move.l d0,-(sp)
    e148:	|  |      jsr 15e76 <__fixsfsi>
    e14e:	|  |      addq.l #4,sp
    e150:	|  |      move.l d0,1b2ee <cameraY>
	return BR_CONTINUE;
    e156:	|  \----> moveq #2,d0
}
    e158:	\-------> move.l (sp)+,d2
    e15a:	          move.l (sp)+,d3
    e15c:	          rts

0000e15e <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    e15e:	       subq.l #4,sp
    e160:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e162:	       movea.l 16(sp),a0
    e166:	       move.l 24(a0),d0
    e16a:	       move.l d0,-(sp)
    e16c:	       pea 1 <_start+0x1>
    e170:	       moveq #12,d0
    e172:	       add.l sp,d0
    e174:	       move.l d0,-(sp)
    e176:	       jsr 13734 <getValueType>
    e17c:	       lea 12(sp),sp
    e180:	       tst.w d0
    e182:	   /-- bne.s e18a <builtIn_zoomCamera+0x2c>
    e184:	   |   moveq #1,d0
    e186:	/--|-- bra.w e384 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    e18a:	|  \-> moveq #24,d0
    e18c:	|      add.l 16(sp),d0
    e190:	|      move.l d0,-(sp)
    e192:	|      jsr 140b8 <trimStack>
    e198:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    e19a:	|      move.l 1b194 <input+0xa>,d0
    e1a0:	|      move.l d0,-(sp)
    e1a2:	|      jsr 15ede <__floatsisf>
    e1a8:	|      addq.l #4,sp
    e1aa:	|      move.l d0,d1
    e1ac:	|      move.l 1ab78 <cameraZoom>,d0
    e1b2:	|      move.l d0,-(sp)
    e1b4:	|      move.l d1,-(sp)
    e1b6:	|      jsr 15f90 <__mulsf3>
    e1bc:	|      addq.l #8,sp
    e1be:	|      move.l d0,-(sp)
    e1c0:	|      jsr 15e76 <__fixsfsi>
    e1c6:	|      addq.l #4,sp
    e1c8:	|      move.l d0,1b194 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    e1ce:	|      move.l 1b198 <input+0xe>,d0
    e1d4:	|      move.l d0,-(sp)
    e1d6:	|      jsr 15ede <__floatsisf>
    e1dc:	|      addq.l #4,sp
    e1de:	|      move.l d0,d1
    e1e0:	|      move.l 1ab78 <cameraZoom>,d0
    e1e6:	|      move.l d0,-(sp)
    e1e8:	|      move.l d1,-(sp)
    e1ea:	|      jsr 15f90 <__mulsf3>
    e1f0:	|      addq.l #8,sp
    e1f2:	|      move.l d0,-(sp)
    e1f4:	|      jsr 15e76 <__fixsfsi>
    e1fa:	|      addq.l #4,sp
    e1fc:	|      move.l d0,1b198 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    e202:	|      move.l 4(sp),d0
    e206:	|      move.l d0,-(sp)
    e208:	|      jsr 15ede <__floatsisf>
    e20e:	|      addq.l #4,sp
    e210:	|      move.l #1008981770,-(sp)
    e216:	|      move.l d0,-(sp)
    e218:	|      jsr 15f90 <__mulsf3>
    e21e:	|      addq.l #8,sp
    e220:	|      move.l d0,1ab78 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    e226:	|      move.l 1b12c <winWidth>,d0
    e22c:	|      move.l d0,-(sp)
    e22e:	|      jsr 15f06 <__floatunsisf>
    e234:	|      addq.l #4,sp
    e236:	|      move.l d0,d1
    e238:	|      move.l 1ab78 <cameraZoom>,d0
    e23e:	|      move.l d0,-(sp)
    e240:	|      move.l d1,-(sp)
    e242:	|      jsr 15d8a <__divsf3>
    e248:	|      addq.l #8,sp
    e24a:	|      move.l d0,d2
    e24c:	|      move.l 1b2cc <sceneWidth>,d0
    e252:	|      move.l d0,-(sp)
    e254:	|      jsr 15f06 <__floatunsisf>
    e25a:	|      addq.l #4,sp
    e25c:	|      move.l d0,-(sp)
    e25e:	|      move.l d2,-(sp)
    e260:	|      jsr 1604a <__gtsf2>
    e266:	|      addq.l #8,sp
    e268:	|      tst.l d0
    e26a:	|  /-- ble.s e2a0 <builtIn_zoomCamera+0x142>
    e26c:	|  |   move.l 1b12c <winWidth>,d0
    e272:	|  |   move.l d0,-(sp)
    e274:	|  |   jsr 15f06 <__floatunsisf>
    e27a:	|  |   addq.l #4,sp
    e27c:	|  |   move.l d0,d2
    e27e:	|  |   move.l 1b2cc <sceneWidth>,d0
    e284:	|  |   move.l d0,-(sp)
    e286:	|  |   jsr 15f06 <__floatunsisf>
    e28c:	|  |   addq.l #4,sp
    e28e:	|  |   move.l d0,-(sp)
    e290:	|  |   move.l d2,-(sp)
    e292:	|  |   jsr 15d8a <__divsf3>
    e298:	|  |   addq.l #8,sp
    e29a:	|  |   move.l d0,1ab78 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    e2a0:	|  \-> move.l 1b130 <winHeight>,d0
    e2a6:	|      move.l d0,-(sp)
    e2a8:	|      jsr 15f06 <__floatunsisf>
    e2ae:	|      addq.l #4,sp
    e2b0:	|      move.l d0,d1
    e2b2:	|      move.l 1ab78 <cameraZoom>,d0
    e2b8:	|      move.l d0,-(sp)
    e2ba:	|      move.l d1,-(sp)
    e2bc:	|      jsr 15d8a <__divsf3>
    e2c2:	|      addq.l #8,sp
    e2c4:	|      move.l d0,d2
    e2c6:	|      move.l 1b2d0 <sceneHeight>,d0
    e2cc:	|      move.l d0,-(sp)
    e2ce:	|      jsr 15f06 <__floatunsisf>
    e2d4:	|      addq.l #4,sp
    e2d6:	|      move.l d0,-(sp)
    e2d8:	|      move.l d2,-(sp)
    e2da:	|      jsr 1604a <__gtsf2>
    e2e0:	|      addq.l #8,sp
    e2e2:	|      tst.l d0
    e2e4:	|  /-- ble.s e31a <builtIn_zoomCamera+0x1bc>
    e2e6:	|  |   move.l 1b130 <winHeight>,d0
    e2ec:	|  |   move.l d0,-(sp)
    e2ee:	|  |   jsr 15f06 <__floatunsisf>
    e2f4:	|  |   addq.l #4,sp
    e2f6:	|  |   move.l d0,d2
    e2f8:	|  |   move.l 1b2d0 <sceneHeight>,d0
    e2fe:	|  |   move.l d0,-(sp)
    e300:	|  |   jsr 15f06 <__floatunsisf>
    e306:	|  |   addq.l #4,sp
    e308:	|  |   move.l d0,-(sp)
    e30a:	|  |   move.l d2,-(sp)
    e30c:	|  |   jsr 15d8a <__divsf3>
    e312:	|  |   addq.l #8,sp
    e314:	|  |   move.l d0,1ab78 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    e31a:	|  \-> move.l 1b194 <input+0xa>,d0
    e320:	|      move.l d0,-(sp)
    e322:	|      jsr 15ede <__floatsisf>
    e328:	|      addq.l #4,sp
    e32a:	|      move.l d0,d1
    e32c:	|      move.l 1ab78 <cameraZoom>,d0
    e332:	|      move.l d0,-(sp)
    e334:	|      move.l d1,-(sp)
    e336:	|      jsr 15d8a <__divsf3>
    e33c:	|      addq.l #8,sp
    e33e:	|      move.l d0,-(sp)
    e340:	|      jsr 15e76 <__fixsfsi>
    e346:	|      addq.l #4,sp
    e348:	|      move.l d0,1b194 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    e34e:	|      move.l 1b198 <input+0xe>,d0
    e354:	|      move.l d0,-(sp)
    e356:	|      jsr 15ede <__floatsisf>
    e35c:	|      addq.l #4,sp
    e35e:	|      move.l d0,d1
    e360:	|      move.l 1ab78 <cameraZoom>,d0
    e366:	|      move.l d0,-(sp)
    e368:	|      move.l d1,-(sp)
    e36a:	|      jsr 15d8a <__divsf3>
    e370:	|      addq.l #8,sp
    e372:	|      move.l d0,-(sp)
    e374:	|      jsr 15e76 <__fixsfsi>
    e37a:	|      addq.l #4,sp
    e37c:	|      move.l d0,1b198 <input+0xe>

	return BR_CONTINUE;
    e382:	|      moveq #2,d0
}
    e384:	\----> move.l (sp)+,d2
    e386:	       addq.l #4,sp
    e388:	       rts

0000e38a <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    e38a:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    e38c:	             tst.l 8(sp)
    e390:	         /-- bne.s e3a4 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    e392:	         |   pea 180af <PutChar+0x1b39>
    e398:	         |   jsr 15c26 <KPrintF>
    e39e:	         |   addq.l #4,sp
		return BR_ERROR;
    e3a0:	         |   moveq #1,d0
    e3a2:	/--------|-- bra.s e404 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    e3a4:	|        \-> jsr 14826 <rand>
    e3aa:	|            move.l d0,d1
    e3ac:	|            move.l 8(sp),d0
    e3b0:	|            move.l d0,-(sp)
    e3b2:	|            move.l d1,-(sp)
    e3b4:	|            jsr 1653a <__umodsi3>
    e3ba:	|            addq.l #8,sp
    e3bc:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    e3be:	|     /----- bra.s e3f2 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    e3c0:	|  /--|----> move.l (sp),d0
    e3c2:	|  |  |      cmp.l 8(sp),d0
    e3c6:	|  |  |  /-- bne.s e3e2 <builtIn_pickOne+0x58>
    e3c8:	|  |  |  |   moveq #28,d0
    e3ca:	|  |  |  |   add.l 12(sp),d0
    e3ce:	|  |  |  |   movea.l 12(sp),a0
    e3d2:	|  |  |  |   move.l 24(a0),d1
    e3d6:	|  |  |  |   move.l d0,-(sp)
    e3d8:	|  |  |  |   move.l d1,-(sp)
    e3da:	|  |  |  |   jsr 13bee <copyVariable>
    e3e0:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    e3e2:	|  |  |  \-> moveq #24,d0
    e3e4:	|  |  |      add.l 12(sp),d0
    e3e8:	|  |  |      move.l d0,-(sp)
    e3ea:	|  |  |      jsr 140b8 <trimStack>
    e3f0:	|  |  |      addq.l #4,sp
	while (numParams --) {
    e3f2:	|  |  \----> move.l 8(sp),d0
    e3f6:	|  |         move.l d0,d1
    e3f8:	|  |         subq.l #1,d1
    e3fa:	|  |         move.l d1,8(sp)
    e3fe:	|  |         tst.l d0
    e400:	|  \-------- bne.s e3c0 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    e402:	|            moveq #2,d0
}
    e404:	\----------> addq.l #4,sp
    e406:	             rts

0000e408 <builtIn_substring>:

builtIn(substring)
{
    e408:	       lea -40(sp),sp
    e40c:	       move.l a6,-(sp)
    e40e:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e410:	       movea.l 56(sp),a0
    e414:	       move.l 24(a0),d0
    e418:	       move.l d0,-(sp)
    e41a:	       pea 1 <_start+0x1>
    e41e:	       lea 16(sp),a0
    e422:	       move.l a0,-(sp)
    e424:	       jsr 13734 <getValueType>
    e42a:	       lea 12(sp),sp
    e42e:	       tst.w d0
    e430:	   /-- bne.s e438 <builtIn_substring+0x30>
    e432:	   |   moveq #1,d0
    e434:	/--|-- bra.w e5b0 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e438:	|  \-> moveq #24,d0
    e43a:	|      add.l 56(sp),d0
    e43e:	|      move.l d0,-(sp)
    e440:	|      jsr 140b8 <trimStack>
    e446:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    e448:	|      movea.l 56(sp),a0
    e44c:	|      move.l 24(a0),d0
    e450:	|      move.l d0,-(sp)
    e452:	|      pea 1 <_start+0x1>
    e456:	|      lea 20(sp),a0
    e45a:	|      move.l a0,-(sp)
    e45c:	|      jsr 13734 <getValueType>
    e462:	|      lea 12(sp),sp
    e466:	|      tst.w d0
    e468:	|  /-- bne.s e470 <builtIn_substring+0x68>
    e46a:	|  |   moveq #1,d0
    e46c:	+--|-- bra.w e5b0 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    e470:	|  \-> moveq #24,d0
    e472:	|      add.l 56(sp),d0
    e476:	|      move.l d0,-(sp)
    e478:	|      jsr 140b8 <trimStack>
    e47e:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    e480:	|      movea.l 56(sp),a0
    e484:	|      move.l 24(a0),d0
    e488:	|      move.l d0,-(sp)
    e48a:	|      jsr 13d0a <getTextFromAnyVar>
    e490:	|      addq.l #4,sp
    e492:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    e496:	|      moveq #24,d0
    e498:	|      add.l 56(sp),d0
    e49c:	|      move.l d0,-(sp)
    e49e:	|      jsr 140b8 <trimStack>
    e4a4:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    e4a6:	|      move.l 44(sp),-(sp)
    e4aa:	|      jsr 12c20 <strlen>
    e4b0:	|      addq.l #4,sp
    e4b2:	|      move.l d0,d1
    e4b4:	|      move.l 12(sp),d0
    e4b8:	|      movea.l d0,a0
    e4ba:	|      move.l 8(sp),d0
    e4be:	|      add.l a0,d0
    e4c0:	|      cmp.l d1,d0
    e4c2:	|  /-- bls.s e4f8 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    e4c4:	|  |   move.l 44(sp),-(sp)
    e4c8:	|  |   jsr 12c20 <strlen>
    e4ce:	|  |   addq.l #4,sp
    e4d0:	|  |   move.l d0,d1
    e4d2:	|  |   move.l 12(sp),d0
    e4d6:	|  |   sub.l d0,d1
    e4d8:	|  |   move.l d1,d0
    e4da:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    e4de:	|  |   move.l 44(sp),-(sp)
    e4e2:	|  |   jsr 12c20 <strlen>
    e4e8:	|  |   addq.l #4,sp
    e4ea:	|  |   move.l d0,d1
    e4ec:	|  |   move.l 12(sp),d0
    e4f0:	|  |   cmp.l d1,d0
    e4f2:	|  +-- bls.s e4f8 <builtIn_substring+0xf0>
            start = 0;
    e4f4:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    e4f8:	|  \-> move.l 8(sp),d0
    e4fc:	|  /-- bpl.s e502 <builtIn_substring+0xfa>
        length = 0;
    e4fe:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    e502:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    e508:	|      move.l 12(sp),d1
    e50c:	|      move.l 8(sp),d0
    e510:	|      move.l d1,d2
    e512:	|      add.l d0,d2
    e514:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    e518:	|      move.l 36(sp),d0
    e51c:	|      sub.l 40(sp),d0
    e520:	|      addq.l #1,d0
    e522:	|      move.l d0,32(sp)
    e526:	|      clr.l 28(sp)
    e52a:	|      move.l 1b1d8 <SysBase>,d0
    e530:	|      movea.l d0,a6
    e532:	|      move.l 32(sp),d0
    e536:	|      move.l 28(sp),d1
    e53a:	|      jsr -684(a6)
    e53e:	|      move.l d0,24(sp)
    e542:	|      move.l 24(sp),d0
    e546:	|      move.l d0,20(sp)
    if (!newString) {
    e54a:	|  /-- bne.s e550 <builtIn_substring+0x148>
        return BR_ERROR;
    e54c:	|  |   moveq #1,d0
    e54e:	+--|-- bra.s e5b0 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    e550:	|  \-> move.l 36(sp),d0
    e554:	|      sub.l 40(sp),d0
    e558:	|      move.l d0,d1
    e55a:	|      move.l 40(sp),d0
    e55e:	|      add.l 44(sp),d0
    e562:	|      move.l d1,-(sp)
    e564:	|      move.l d0,-(sp)
    e566:	|      move.l 28(sp),-(sp)
    e56a:	|      jsr 15bda <memcpy>
    e570:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    e574:	|      move.l 36(sp),d0
    e578:	|      sub.l 40(sp),d0
    e57c:	|      movea.l 20(sp),a0
    e580:	|      adda.l d0,a0
    e582:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    e584:	|      moveq #28,d0
    e586:	|      add.l 56(sp),d0
    e58a:	|      move.l 20(sp),-(sp)
    e58e:	|      move.l d0,-(sp)
    e590:	|      jsr 13956 <makeTextVar>
    e596:	|      addq.l #8,sp
    FreeVec(newString);
    e598:	|      move.l 20(sp),16(sp)
    e59e:	|      move.l 1b1d8 <SysBase>,d0
    e5a4:	|      movea.l d0,a6
    e5a6:	|      movea.l 16(sp),a1
    e5aa:	|      jsr -690(a6)
    return BR_CONTINUE;
    e5ae:	|      moveq #2,d0
}
    e5b0:	\----> move.l (sp)+,d2
    e5b2:	       movea.l (sp)+,a6
    e5b4:	       lea 40(sp),sp
    e5b8:	       rts

0000e5ba <builtIn_stringLength>:

builtIn(stringLength)
{
    e5ba:	subq.l #8,sp
    e5bc:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e5be:	movea.l 20(sp),a0
    e5c2:	move.l 24(a0),d0
    e5c6:	move.l d0,-(sp)
    e5c8:	jsr 13d0a <getTextFromAnyVar>
    e5ce:	addq.l #4,sp
    e5d0:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    e5d4:	moveq #24,d0
    e5d6:	add.l 20(sp),d0
    e5da:	move.l d0,-(sp)
    e5dc:	jsr 140b8 <trimStack>
    e5e2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    e5e4:	move.l 8(sp),-(sp)
    e5e8:	jsr 12c20 <strlen>
    e5ee:	addq.l #4,sp
    e5f0:	move.l d0,d1
    e5f2:	moveq #28,d0
    e5f4:	add.l 20(sp),d0
    e5f8:	move.l d1,-(sp)
    e5fa:	pea 1 <_start+0x1>
    e5fe:	move.l d0,-(sp)
    e600:	jsr 14026 <setVariable>
    e606:	lea 12(sp),sp
	FreeVec(newText);
    e60a:	move.l 8(sp),4(sp)
    e610:	move.l 1b1d8 <SysBase>,d0
    e616:	movea.l d0,a6
    e618:	movea.l 4(sp),a1
    e61c:	jsr -690(a6)
	return BR_CONTINUE;
    e620:	moveq #2,d0
}
    e622:	movea.l (sp)+,a6
    e624:	addq.l #8,sp
    e626:	rts

0000e628 <builtIn_newStack>:

builtIn(newStack)
{
    e628:	             lea -12(sp),sp
    e62c:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    e62e:	             moveq #28,d0
    e630:	             add.l 24(sp),d0
    e634:	             move.l d0,-(sp)
    e636:	             jsr 13982 <unlinkVar>
    e63c:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    e63e:	             movea.l 24(sp),a0
    e642:	             moveq #6,d0
    e644:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    e648:	             moveq #12,d1
    e64a:	             move.l d1,12(sp)
    e64e:	             clr.l 8(sp)
    e652:	             move.l 1b1d8 <SysBase>,d0
    e658:	             movea.l d0,a6
    e65a:	             move.l 12(sp),d0
    e65e:	             move.l 8(sp),d1
    e662:	             jsr -684(a6)
    e666:	             move.l d0,4(sp)
    e66a:	             move.l 4(sp),d0
    e66e:	             movea.l 24(sp),a0
    e672:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    e676:	             movea.l 24(sp),a0
    e67a:	             move.l 32(a0),d0
    e67e:	         /-- bne.s e686 <builtIn_newStack+0x5e>
    e680:	         |   moveq #1,d0
    e682:	/--------|-- bra.w e718 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    e686:	|        \-> movea.l 24(sp),a0
    e68a:	|            movea.l 32(a0),a0
    e68e:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    e690:	|            movea.l 24(sp),a0
    e694:	|            movea.l 32(a0),a0
    e698:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    e69c:	|            movea.l 24(sp),a0
    e6a0:	|            movea.l 32(a0),a0
    e6a4:	|            moveq #1,d0
    e6a6:	|            move.l d0,8(a0)
    
    while (numParams--) {
    e6aa:	|     /----- bra.s e706 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    e6ac:	|  /--|----> movea.l 24(sp),a0
    e6b0:	|  |  |      move.l 32(a0),d0
    e6b4:	|  |  |      move.l d0,d1
    e6b6:	|  |  |      movea.l 24(sp),a0
    e6ba:	|  |  |      move.l 24(a0),d0
    e6be:	|  |  |      move.l d1,-(sp)
    e6c0:	|  |  |      move.l d0,-(sp)
    e6c2:	|  |  |      jsr 12f70 <addVarToStack>
    e6c8:	|  |  |      addq.l #8,sp
    e6ca:	|  |  |      tst.w d0
    e6cc:	|  |  |  /-- bne.s e6d2 <builtIn_newStack+0xaa>
    e6ce:	|  |  |  |   moveq #1,d0
    e6d0:	+--|--|--|-- bra.s e718 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    e6d2:	|  |  |  \-> movea.l 24(sp),a0
    e6d6:	|  |  |      movea.l 32(a0),a0
    e6da:	|  |  |      move.l 4(a0),d0
    e6de:	|  |  |  /-- bne.s e6f6 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    e6e0:	|  |  |  |   movea.l 24(sp),a0
    e6e4:	|  |  |  |   movea.l 32(a0),a1
    e6e8:	|  |  |  |   movea.l 24(sp),a0
    e6ec:	|  |  |  |   movea.l 32(a0),a0
    e6f0:	|  |  |  |   move.l (a1),d0
    e6f2:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    e6f6:	|  |  |  \-> moveq #24,d0
    e6f8:	|  |  |      add.l 24(sp),d0
    e6fc:	|  |  |      move.l d0,-(sp)
    e6fe:	|  |  |      jsr 140b8 <trimStack>
    e704:	|  |  |      addq.l #4,sp
    while (numParams--) {
    e706:	|  |  \----> move.l 20(sp),d0
    e70a:	|  |         move.l d0,d1
    e70c:	|  |         subq.l #1,d1
    e70e:	|  |         move.l d1,20(sp)
    e712:	|  |         tst.l d0
    e714:	|  \-------- bne.s e6ac <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    e716:	|            moveq #2,d0
}
    e718:	\----------> movea.l (sp)+,a6
    e71a:	             lea 12(sp),sp
    e71e:	             rts

0000e720 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    e720:	          movea.l 8(sp),a0
    e724:	          movea.l 24(a0),a0
    e728:	          move.l (a0),d0
    e72a:	          moveq #6,d1
    e72c:	          cmp.l d0,d1
    e72e:	      /-- beq.s e74a <builtIn_stackSize+0x2a>
    e730:	      |   moveq #10,d1
    e732:	      |   cmp.l d0,d1
    e734:	   /--|-- beq.s e78e <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    e736:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    e738:	   |  |   pea 180e2 <PutChar+0x1b6c>
    e73e:	   |  |   jsr 15c26 <KPrintF>
    e744:	   |  |   addq.l #4,sp
	return BR_ERROR;
    e746:	   |  |   moveq #1,d0
    e748:	/--|--|-- bra.s e7c8 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    e74a:	|  |  \-> movea.l 8(sp),a0
    e74e:	|  |      movea.l 24(a0),a0
    e752:	|  |      move.l 4(a0),d0
    e756:	|  |      move.l d0,-(sp)
    e758:	|  |      jsr 14094 <stackSize>
    e75e:	|  |      addq.l #4,sp
    e760:	|  |      move.l d0,d1
    e762:	|  |      moveq #28,d0
    e764:	|  |      add.l 8(sp),d0
    e768:	|  |      move.l d1,-(sp)
    e76a:	|  |      pea 1 <_start+0x1>
    e76e:	|  |      move.l d0,-(sp)
    e770:	|  |      jsr 14026 <setVariable>
    e776:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    e77a:	|  |      moveq #24,d0
    e77c:	|  |      add.l 8(sp),d0
    e780:	|  |      move.l d0,-(sp)
    e782:	|  |      jsr 140b8 <trimStack>
    e788:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    e78a:	|  |      moveq #2,d0
    e78c:	+--|----- bra.s e7c8 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    e78e:	|  \----> movea.l 8(sp),a0
    e792:	|         movea.l 24(a0),a0
    e796:	|         movea.l 4(a0),a0
    e79a:	|         move.l 4(a0),d1
    e79e:	|         moveq #28,d0
    e7a0:	|         add.l 8(sp),d0
    e7a4:	|         move.l d1,-(sp)
    e7a6:	|         pea 1 <_start+0x1>
    e7aa:	|         move.l d0,-(sp)
    e7ac:	|         jsr 14026 <setVariable>
    e7b2:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    e7b6:	|         moveq #24,d0
    e7b8:	|         add.l 8(sp),d0
    e7bc:	|         move.l d0,-(sp)
    e7be:	|         jsr 140b8 <trimStack>
    e7c4:	|         addq.l #4,sp
			return BR_CONTINUE;
    e7c6:	|         moveq #2,d0
}
    e7c8:	\-------> rts

0000e7ca <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    e7ca:	       movea.l 8(sp),a0
    e7ce:	       movea.l 24(a0),a0
    e7d2:	       move.l (a0),d0
    e7d4:	       moveq #6,d1
    e7d6:	       cmp.l d0,d1
    e7d8:	   /-- beq.s e7ec <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    e7da:	   |   pea 1810b <PutChar+0x1b95>
    e7e0:	   |   jsr 15c26 <KPrintF>
    e7e6:	   |   addq.l #4,sp
		return BR_ERROR;
    e7e8:	   |   moveq #1,d0
    e7ea:	/--|-- bra.s e820 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    e7ec:	|  \-> moveq #28,d0
    e7ee:	|      add.l 8(sp),d0
    e7f2:	|      movea.l 8(sp),a0
    e7f6:	|      move.l 24(a0),d1
    e7fa:	|      move.l d0,-(sp)
    e7fc:	|      move.l d1,-(sp)
    e7fe:	|      jsr 1323a <copyStack>
    e804:	|      addq.l #8,sp
    e806:	|      tst.w d0
    e808:	|  /-- bne.s e80e <builtIn_copyStack+0x44>
    e80a:	|  |   moveq #1,d0
    e80c:	+--|-- bra.s e820 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    e80e:	|  \-> moveq #24,d0
    e810:	|      add.l 8(sp),d0
    e814:	|      move.l d0,-(sp)
    e816:	|      jsr 140b8 <trimStack>
    e81c:	|      addq.l #4,sp
	return BR_CONTINUE;
    e81e:	|      moveq #2,d0
}
    e820:	\----> rts

0000e822 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e822:	       movea.l 8(sp),a0
    e826:	       movea.l 24(a0),a0
    e82a:	       movea.l 8(a0),a0
    e82e:	       move.l (a0),d0
    e830:	       moveq #6,d1
    e832:	       cmp.l d0,d1
    e834:	   /-- beq.s e84a <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    e836:	   |   pea 18124 <PutChar+0x1bae>
    e83c:	   |   jsr 15c26 <KPrintF>
    e842:	   |   addq.l #4,sp
		return BR_ERROR;
    e844:	   |   moveq #1,d0
    e846:	/--|-- bra.w e8d8 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    e84a:	|  \-> movea.l 8(sp),a0
    e84e:	|      movea.l 24(a0),a0
    e852:	|      movea.l 8(a0),a0
    e856:	|      move.l 4(a0),d0
    e85a:	|      move.l d0,d1
    e85c:	|      movea.l 8(sp),a0
    e860:	|      move.l 24(a0),d0
    e864:	|      move.l d1,-(sp)
    e866:	|      move.l d0,-(sp)
    e868:	|      jsr 12f70 <addVarToStack>
    e86e:	|      addq.l #8,sp
    e870:	|      tst.w d0
    e872:	|  /-- bne.s e878 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    e874:	|  |   moveq #1,d0
    e876:	+--|-- bra.s e8d8 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    e878:	|  \-> movea.l 8(sp),a0
    e87c:	|      movea.l 24(a0),a0
    e880:	|      movea.l 8(a0),a0
    e884:	|      movea.l 4(a0),a0
    e888:	|      movea.l (a0),a0
    e88a:	|      move.l 8(a0),d0
    e88e:	|  /-- bne.s e8b6 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    e890:	|  |   movea.l 8(sp),a0
    e894:	|  |   movea.l 24(a0),a0
    e898:	|  |   movea.l 8(a0),a0
    e89c:	|  |   movea.l 4(a0),a1
    e8a0:	|  |   movea.l 8(sp),a0
    e8a4:	|  |   movea.l 24(a0),a0
    e8a8:	|  |   movea.l 8(a0),a0
    e8ac:	|  |   movea.l 4(a0),a0
    e8b0:	|  |   move.l (a1),d0
    e8b2:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    e8b6:	|  \-> moveq #24,d0
    e8b8:	|      add.l 8(sp),d0
    e8bc:	|      move.l d0,-(sp)
    e8be:	|      jsr 140b8 <trimStack>
    e8c4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    e8c6:	|      moveq #24,d0
    e8c8:	|      add.l 8(sp),d0
    e8cc:	|      move.l d0,-(sp)
    e8ce:	|      jsr 140b8 <trimStack>
    e8d4:	|      addq.l #4,sp
	return BR_CONTINUE;
    e8d6:	|      moveq #2,d0
}
    e8d8:	\----> rts

0000e8da <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e8da:	             movea.l 8(sp),a0
    e8de:	             movea.l 24(a0),a0
    e8e2:	             movea.l 8(a0),a0
    e8e6:	             move.l (a0),d0
    e8e8:	             moveq #6,d1
    e8ea:	             cmp.l d0,d1
    e8ec:	         /-- beq.s e902 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    e8ee:	         |   pea 18124 <PutChar+0x1bae>
    e8f4:	         |   jsr 15c26 <KPrintF>
    e8fa:	         |   addq.l #4,sp
		return BR_ERROR;
    e8fc:	         |   moveq #1,d0
    e8fe:	/--------|-- bra.w e9f0 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    e902:	|        \-> movea.l 8(sp),a0
    e906:	|            movea.l 24(a0),a0
    e90a:	|            movea.l 8(a0),a0
    e90e:	|            movea.l 4(a0),a0
    e912:	|            move.l (a0),d0
    e914:	|     /----- bne.s e96e <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    e916:	|     |      movea.l 8(sp),a0
    e91a:	|     |      movea.l 24(a0),a0
    e91e:	|     |      movea.l 8(a0),a0
    e922:	|     |      move.l 4(a0),d0
    e926:	|     |      move.l d0,d1
    e928:	|     |      movea.l 8(sp),a0
    e92c:	|     |      move.l 24(a0),d0
    e930:	|     |      move.l d1,-(sp)
    e932:	|     |      move.l d0,-(sp)
    e934:	|     |      jsr 12f70 <addVarToStack>
    e93a:	|     |      addq.l #8,sp
    e93c:	|     |      tst.w d0
    e93e:	|     |  /-- bne.s e946 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    e940:	|     |  |   moveq #1,d0
    e942:	+-----|--|-- bra.w e9f0 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    e946:	|     |  \-> movea.l 8(sp),a0
    e94a:	|     |      movea.l 24(a0),a0
    e94e:	|     |      movea.l 8(a0),a0
    e952:	|     |      movea.l 4(a0),a1
    e956:	|     |      movea.l 8(sp),a0
    e95a:	|     |      movea.l 24(a0),a0
    e95e:	|     |      movea.l 8(a0),a0
    e962:	|     |      movea.l 4(a0),a0
    e966:	|     |      move.l (a1),d0
    e968:	|     |      move.l d0,4(a0)
    e96c:	|  /--|----- bra.s e9ce <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    e96e:	|  |  \----> movea.l 8(sp),a0
    e972:	|  |         movea.l 24(a0),a0
    e976:	|  |         movea.l 8(a0),a0
    e97a:	|  |         movea.l 4(a0),a0
    e97e:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    e982:	|  |         move.l d0,d1
    e984:	|  |         addq.l #8,d1
    e986:	|  |         movea.l 8(sp),a0
    e98a:	|  |         move.l 24(a0),d0
    e98e:	|  |         move.l d1,-(sp)
    e990:	|  |         move.l d0,-(sp)
    e992:	|  |         jsr 12f70 <addVarToStack>
    e998:	|  |         addq.l #8,sp
    e99a:	|  |         tst.w d0
    e99c:	|  |     /-- bne.s e9a2 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    e99e:	|  |     |   moveq #1,d0
    e9a0:	+--|-----|-- bra.s e9f0 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    e9a2:	|  |     \-> movea.l 8(sp),a0
    e9a6:	|  |         movea.l 24(a0),a0
    e9aa:	|  |         movea.l 8(a0),a0
    e9ae:	|  |         movea.l 4(a0),a0
    e9b2:	|  |         movea.l 4(a0),a1
    e9b6:	|  |         movea.l 8(sp),a0
    e9ba:	|  |         movea.l 24(a0),a0
    e9be:	|  |         movea.l 8(a0),a0
    e9c2:	|  |         movea.l 4(a0),a0
    e9c6:	|  |         move.l 8(a1),d0
    e9ca:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    e9ce:	|  \-------> moveq #24,d0
    e9d0:	|            add.l 8(sp),d0
    e9d4:	|            move.l d0,-(sp)
    e9d6:	|            jsr 140b8 <trimStack>
    e9dc:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    e9de:	|            moveq #24,d0
    e9e0:	|            add.l 8(sp),d0
    e9e4:	|            move.l d0,-(sp)
    e9e6:	|            jsr 140b8 <trimStack>
    e9ec:	|            addq.l #4,sp
	return BR_CONTINUE;
    e9ee:	|            moveq #2,d0
}
    e9f0:	\----------> rts

0000e9f2 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    e9f2:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    e9f4:	       movea.l 12(sp),a0
    e9f8:	       movea.l 24(a0),a0
    e9fc:	       movea.l 8(a0),a0
    ea00:	       move.l (a0),d0
    ea02:	       moveq #6,d1
    ea04:	       cmp.l d0,d1
    ea06:	   /-- beq.s ea1c <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    ea08:	   |   pea 1810b <PutChar+0x1b95>
    ea0e:	   |   jsr 15c26 <KPrintF>
    ea14:	   |   addq.l #4,sp
		return BR_ERROR;
    ea16:	   |   moveq #1,d0
    ea18:	/--|-- bra.w eab2 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    ea1c:	|  \-> movea.l 12(sp),a0
    ea20:	|      movea.l 24(a0),a0
    ea24:	|      movea.l 8(a0),a0
    ea28:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ea2c:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    ea2e:	|      movea.l 12(sp),a0
    ea32:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ea36:	|      clr.l -(sp)
    ea38:	|      move.l d1,-(sp)
    ea3a:	|      move.l d0,-(sp)
    ea3c:	|      jsr 13310 <deleteVarFromStack>
    ea42:	|      lea 12(sp),sp
    ea46:	|      move.l d0,d1
    ea48:	|      moveq #28,d0
    ea4a:	|      add.l 12(sp),d0
    ea4e:	|      move.l d1,-(sp)
    ea50:	|      pea 1 <_start+0x1>
    ea54:	|      move.l d0,-(sp)
    ea56:	|      jsr 14026 <setVariable>
    ea5c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    ea60:	|      movea.l 12(sp),a0
    ea64:	|      movea.l 24(a0),a0
    ea68:	|      movea.l 8(a0),a0
    ea6c:	|      movea.l 4(a0),a0
    ea70:	|      move.l (a0),d0
    ea72:	|      movea.l 12(sp),a0
    ea76:	|      movea.l 24(a0),a0
    ea7a:	|      movea.l 8(a0),a0
    ea7e:	|      movea.l 4(a0),a2
    ea82:	|      move.l d0,-(sp)
    ea84:	|      jsr 14070 <stackFindLast>
    ea8a:	|      addq.l #4,sp
    ea8c:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    ea90:	|      moveq #24,d0
    ea92:	|      add.l 12(sp),d0
    ea96:	|      move.l d0,-(sp)
    ea98:	|      jsr 140b8 <trimStack>
    ea9e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    eaa0:	|      moveq #24,d0
    eaa2:	|      add.l 12(sp),d0
    eaa6:	|      move.l d0,-(sp)
    eaa8:	|      jsr 140b8 <trimStack>
    eaae:	|      addq.l #4,sp
	return BR_CONTINUE;
    eab0:	|      moveq #2,d0
}
    eab2:	\----> movea.l (sp)+,a2
    eab4:	       rts

0000eab6 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    eab6:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    eab8:	       movea.l 12(sp),a0
    eabc:	       movea.l 24(a0),a0
    eac0:	       movea.l 8(a0),a0
    eac4:	       move.l (a0),d0
    eac6:	       moveq #6,d1
    eac8:	       cmp.l d0,d1
    eaca:	   /-- beq.s eae0 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    eacc:	   |   pea 1810b <PutChar+0x1b95>
    ead2:	   |   jsr 15c26 <KPrintF>
    ead8:	   |   addq.l #4,sp
		return BR_ERROR;
    eada:	   |   moveq #1,d0
    eadc:	/--|-- bra.w eb78 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    eae0:	|  \-> movea.l 12(sp),a0
    eae4:	|      movea.l 24(a0),a0
    eae8:	|      movea.l 8(a0),a0
    eaec:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    eaf0:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    eaf2:	|      movea.l 12(sp),a0
    eaf6:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    eafa:	|      pea 1 <_start+0x1>
    eafe:	|      move.l d1,-(sp)
    eb00:	|      move.l d0,-(sp)
    eb02:	|      jsr 13310 <deleteVarFromStack>
    eb08:	|      lea 12(sp),sp
    eb0c:	|      move.l d0,d1
    eb0e:	|      moveq #28,d0
    eb10:	|      add.l 12(sp),d0
    eb14:	|      move.l d1,-(sp)
    eb16:	|      pea 1 <_start+0x1>
    eb1a:	|      move.l d0,-(sp)
    eb1c:	|      jsr 14026 <setVariable>
    eb22:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    eb26:	|      movea.l 12(sp),a0
    eb2a:	|      movea.l 24(a0),a0
    eb2e:	|      movea.l 8(a0),a0
    eb32:	|      movea.l 4(a0),a0
    eb36:	|      move.l (a0),d0
    eb38:	|      movea.l 12(sp),a0
    eb3c:	|      movea.l 24(a0),a0
    eb40:	|      movea.l 8(a0),a0
    eb44:	|      movea.l 4(a0),a2
    eb48:	|      move.l d0,-(sp)
    eb4a:	|      jsr 14070 <stackFindLast>
    eb50:	|      addq.l #4,sp
    eb52:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    eb56:	|      moveq #24,d0
    eb58:	|      add.l 12(sp),d0
    eb5c:	|      move.l d0,-(sp)
    eb5e:	|      jsr 140b8 <trimStack>
    eb64:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    eb66:	|      moveq #24,d0
    eb68:	|      add.l 12(sp),d0
    eb6c:	|      move.l d0,-(sp)
    eb6e:	|      jsr 140b8 <trimStack>
    eb74:	|      addq.l #4,sp
	return BR_CONTINUE;
    eb76:	|      moveq #2,d0
}
    eb78:	\----> movea.l (sp)+,a2
    eb7a:	       rts

0000eb7c <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    eb7c:	       movea.l 8(sp),a0
    eb80:	       movea.l 24(a0),a0
    eb84:	       move.l (a0),d0
    eb86:	       moveq #6,d1
    eb88:	       cmp.l d0,d1
    eb8a:	   /-- beq.s eb9e <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    eb8c:	   |   pea 1810b <PutChar+0x1b95>
    eb92:	   |   jsr 15c26 <KPrintF>
    eb98:	   |   addq.l #4,sp
		return BR_ERROR;
    eb9a:	   |   moveq #1,d0
    eb9c:	/--|-- bra.s ec08 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    eb9e:	|  \-> movea.l 8(sp),a0
    eba2:	|      movea.l 24(a0),a0
    eba6:	|      movea.l 4(a0),a0
    ebaa:	|      move.l (a0),d0
    ebac:	|  /-- bne.s ebc0 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    ebae:	|  |   pea 1813c <PutChar+0x1bc6>
    ebb4:	|  |   jsr 15c26 <KPrintF>
    ebba:	|  |   addq.l #4,sp
		return BR_ERROR;
    ebbc:	|  |   moveq #1,d0
    ebbe:	+--|-- bra.s ec08 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ebc0:	|  \-> moveq #28,d0
    ebc2:	|      add.l 8(sp),d0
    ebc6:	|      movea.l 8(sp),a0
    ebca:	|      movea.l 24(a0),a0
    ebce:	|      movea.l 4(a0),a0
    ebd2:	|      move.l (a0),d1
    ebd4:	|      move.l d0,-(sp)
    ebd6:	|      move.l d1,-(sp)
    ebd8:	|      jsr 13bee <copyVariable>
    ebde:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    ebe0:	|      movea.l 8(sp),a0
    ebe4:	|      movea.l 24(a0),a0
    ebe8:	|      move.l 4(a0),d0
    ebec:	|      move.l d0,-(sp)
    ebee:	|      jsr 140b8 <trimStack>
    ebf4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ebf6:	|      moveq #24,d0
    ebf8:	|      add.l 8(sp),d0
    ebfc:	|      move.l d0,-(sp)
    ebfe:	|      jsr 140b8 <trimStack>
    ec04:	|      addq.l #4,sp
	return BR_CONTINUE;
    ec06:	|      moveq #2,d0
}
    ec08:	\----> rts

0000ec0a <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ec0a:	       movea.l 8(sp),a0
    ec0e:	       movea.l 24(a0),a0
    ec12:	       move.l (a0),d0
    ec14:	       moveq #6,d1
    ec16:	       cmp.l d0,d1
    ec18:	   /-- beq.s ec2c <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    ec1a:	   |   pea 1810b <PutChar+0x1b95>
    ec20:	   |   jsr 15c26 <KPrintF>
    ec26:	   |   addq.l #4,sp
		return BR_ERROR;
    ec28:	   |   moveq #1,d0
    ec2a:	/--|-- bra.s ec80 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ec2c:	|  \-> movea.l 8(sp),a0
    ec30:	|      movea.l 24(a0),a0
    ec34:	|      movea.l 4(a0),a0
    ec38:	|      move.l (a0),d0
    ec3a:	|  /-- bne.s ec4e <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    ec3c:	|  |   pea 1813c <PutChar+0x1bc6>
    ec42:	|  |   jsr 15c26 <KPrintF>
    ec48:	|  |   addq.l #4,sp
		return BR_ERROR;
    ec4a:	|  |   moveq #1,d0
    ec4c:	+--|-- bra.s ec80 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ec4e:	|  \-> moveq #28,d0
    ec50:	|      add.l 8(sp),d0
    ec54:	|      movea.l 8(sp),a0
    ec58:	|      movea.l 24(a0),a0
    ec5c:	|      movea.l 4(a0),a0
    ec60:	|      move.l (a0),d1
    ec62:	|      move.l d0,-(sp)
    ec64:	|      move.l d1,-(sp)
    ec66:	|      jsr 13bee <copyVariable>
    ec6c:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    ec6e:	|      moveq #24,d0
    ec70:	|      add.l 8(sp),d0
    ec74:	|      move.l d0,-(sp)
    ec76:	|      jsr 140b8 <trimStack>
    ec7c:	|      addq.l #4,sp
	return BR_CONTINUE;
    ec7e:	|      moveq #2,d0
}
    ec80:	\----> rts

0000ec82 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ec82:	       movea.l 8(sp),a0
    ec86:	       movea.l 24(a0),a0
    ec8a:	       move.l (a0),d0
    ec8c:	       moveq #6,d1
    ec8e:	       cmp.l d0,d1
    ec90:	   /-- beq.s eca4 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    ec92:	   |   pea 1810b <PutChar+0x1b95>
    ec98:	   |   jsr 15c26 <KPrintF>
    ec9e:	   |   addq.l #4,sp
		return BR_ERROR;
    eca0:	   |   moveq #1,d0
    eca2:	/--|-- bra.s ecfa <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    eca4:	|  \-> movea.l 8(sp),a0
    eca8:	|      movea.l 24(a0),a0
    ecac:	|      movea.l 4(a0),a0
    ecb0:	|      move.l (a0),d0
    ecb2:	|  /-- bne.s ecc6 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    ecb4:	|  |   pea 1813c <PutChar+0x1bc6>
    ecba:	|  |   jsr 15c26 <KPrintF>
    ecc0:	|  |   addq.l #4,sp
		return BR_ERROR;
    ecc2:	|  |   moveq #1,d0
    ecc4:	+--|-- bra.s ecfa <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    ecc6:	|  \-> moveq #28,d0
    ecc8:	|      add.l 8(sp),d0
    eccc:	|      movea.l 8(sp),a0
    ecd0:	|      movea.l 24(a0),a0
    ecd4:	|      movea.l 4(a0),a0
    ecd8:	|      move.l 4(a0),d1
    ecdc:	|      move.l d0,-(sp)
    ecde:	|      move.l d1,-(sp)
    ece0:	|      jsr 13bee <copyVariable>
    ece6:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    ece8:	|      moveq #24,d0
    ecea:	|      add.l 8(sp),d0
    ecee:	|      move.l d0,-(sp)
    ecf0:	|      jsr 140b8 <trimStack>
    ecf6:	|      addq.l #4,sp
	return BR_CONTINUE;
    ecf8:	|      moveq #2,d0
}
    ecfa:	\----> rts

0000ecfc <builtIn_random>:

builtIn(random)
{
    ecfc:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    ecfe:	       movea.l 12(sp),a0
    ed02:	       move.l 24(a0),d0
    ed06:	       move.l d0,-(sp)
    ed08:	       pea 1 <_start+0x1>
    ed0c:	       move.l sp,d0
    ed0e:	       addq.l #8,d0
    ed10:	       move.l d0,-(sp)
    ed12:	       jsr 13734 <getValueType>
    ed18:	       lea 12(sp),sp
    ed1c:	       tst.w d0
    ed1e:	   /-- bne.s ed24 <builtIn_random+0x28>
		return BR_ERROR;
    ed20:	   |   moveq #1,d0
    ed22:	/--|-- bra.s ed6e <builtIn_random+0x72>

	trimStack (&fun -> stack);
    ed24:	|  \-> moveq #24,d0
    ed26:	|      add.l 12(sp),d0
    ed2a:	|      move.l d0,-(sp)
    ed2c:	|      jsr 140b8 <trimStack>
    ed32:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    ed34:	|      move.l (sp),d0
    ed36:	|  /-- bgt.s ed3c <builtIn_random+0x40>
    ed38:	|  |   moveq #1,d0
    ed3a:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    ed3c:	|  \-> jsr 14826 <rand>
    ed42:	|      move.l d0,d1
    ed44:	|      move.l (sp),d0
    ed46:	|      move.l d0,-(sp)
    ed48:	|      move.l d1,-(sp)
    ed4a:	|      jsr 1653a <__umodsi3>
    ed50:	|      addq.l #8,sp
    ed52:	|      move.l d0,d1
    ed54:	|      moveq #28,d0
    ed56:	|      add.l 12(sp),d0
    ed5a:	|      move.l d1,-(sp)
    ed5c:	|      pea 1 <_start+0x1>
    ed60:	|      move.l d0,-(sp)
    ed62:	|      jsr 14026 <setVariable>
    ed68:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed6c:	|      moveq #2,d0
}
    ed6e:	\----> addq.l #4,sp
    ed70:	       rts

0000ed72 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    ed72:	nop
    ed74:	rts

0000ed76 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    ed76:	moveq #2,d0
}
    ed78:	rts

0000ed7a <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
	UNUSEDALL
	int red, green, blue;
	KPrintF("setPasteColour: Function not implemented on Amiga. Attention using this might cause problems!\n");
    ed7a:	pea 1814f <PutChar+0x1bd9>
    ed80:	jsr 15c26 <KPrintF>
    ed86:	addq.l #4,sp
	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    ed88:	moveq #2,d0
}
    ed8a:	rts

0000ed8c <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ed8c:	moveq #2,d0
}
    ed8e:	rts

0000ed90 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ed90:	moveq #2,d0
}
    ed92:	rts

0000ed94 <builtIn_setFont>:


builtIn(setFont)
{
    ed94:	       lea -16(sp),sp
    ed98:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ed9a:	       movea.l 28(sp),a0
    ed9e:	       move.l 24(a0),d0
    eda2:	       move.l d0,-(sp)
    eda4:	       pea 1 <_start+0x1>
    eda8:	       lea 12(sp),a0
    edac:	       move.l a0,-(sp)
    edae:	       jsr 13734 <getValueType>
    edb4:	       lea 12(sp),sp
    edb8:	       tst.w d0
    edba:	   /-- bne.s edc2 <builtIn_setFont+0x2e>
    edbc:	   |   moveq #1,d0
    edbe:	/--|-- bra.w ee70 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    edc2:	|  \-> moveq #24,d0
    edc4:	|      add.l 28(sp),d0
    edc8:	|      move.l d0,-(sp)
    edca:	|      jsr 140b8 <trimStack>
    edd0:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    edd2:	|      movea.l 28(sp),a0
    edd6:	|      move.l 24(a0),d0
    edda:	|      move.l d0,-(sp)
    eddc:	|      jsr 13d0a <getTextFromAnyVar>
    ede2:	|      addq.l #4,sp
    ede4:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    ede8:	|  /-- bne.s edf0 <builtIn_setFont+0x5c>
    edea:	|  |   moveq #1,d0
    edec:	+--|-- bra.w ee70 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    edf0:	|  \-> moveq #24,d0
    edf2:	|      add.l 28(sp),d0
    edf6:	|      move.l d0,-(sp)
    edf8:	|      jsr 140b8 <trimStack>
    edfe:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    ee00:	|      movea.l 28(sp),a0
    ee04:	|      move.l 24(a0),d0
    ee08:	|      move.l d0,-(sp)
    ee0a:	|      pea 5 <_start+0x5>
    ee0e:	|      lea 16(sp),a0
    ee12:	|      move.l a0,-(sp)
    ee14:	|      jsr 13734 <getValueType>
    ee1a:	|      lea 12(sp),sp
    ee1e:	|      tst.w d0
    ee20:	|  /-- bne.s ee26 <builtIn_setFont+0x92>
    ee22:	|  |   moveq #1,d0
    ee24:	+--|-- bra.s ee70 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    ee26:	|  \-> moveq #24,d0
    ee28:	|      add.l 28(sp),d0
    ee2c:	|      move.l d0,-(sp)
    ee2e:	|      jsr 140b8 <trimStack>
    ee34:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    ee36:	|      move.l 4(sp),d1
    ee3a:	|      move.l 8(sp),d0
    ee3e:	|      move.l d1,-(sp)
    ee40:	|      move.l 20(sp),-(sp)
    ee44:	|      move.l d0,-(sp)
    ee46:	|      jsr 142f0 <loadFont>
    ee4c:	|      lea 12(sp),sp
    ee50:	|      tst.w d0
    ee52:	|  /-- bne.s ee58 <builtIn_setFont+0xc4>
    ee54:	|  |   moveq #1,d0
    ee56:	+--|-- bra.s ee70 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    ee58:	|  \-> move.l 16(sp),12(sp)
    ee5e:	|      move.l 1b1d8 <SysBase>,d0
    ee64:	|      movea.l d0,a6
    ee66:	|      movea.l 12(sp),a1
    ee6a:	|      jsr -690(a6)

    return BR_CONTINUE;
    ee6e:	|      moveq #2,d0
}
    ee70:	\----> movea.l (sp)+,a6
    ee72:	       lea 16(sp),sp
    ee76:	       rts

0000ee78 <builtIn_inFont>:

builtIn(inFont)
{
    ee78:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ee7a:	       movea.l 12(sp),a0
    ee7e:	       move.l 24(a0),d0
    ee82:	       move.l d0,-(sp)
    ee84:	       jsr 13d0a <getTextFromAnyVar>
    ee8a:	       addq.l #4,sp
    ee8c:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    ee8e:	   /-- bne.s ee94 <builtIn_inFont+0x1c>
    ee90:	   |   moveq #1,d0
    ee92:	/--|-- bra.s eeca <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    ee94:	|  \-> moveq #24,d0
    ee96:	|      add.l 12(sp),d0
    ee9a:	|      move.l d0,-(sp)
    ee9c:	|      jsr 140b8 <trimStack>
    eea2:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    eea4:	|      move.l (sp),-(sp)
    eea6:	|      jsr 142c4 <isInFont>
    eeac:	|      addq.l #4,sp
    eeae:	|      movea.w d0,a0
    eeb0:	|      moveq #28,d0
    eeb2:	|      add.l 12(sp),d0
    eeb6:	|      move.l a0,-(sp)
    eeb8:	|      pea 1 <_start+0x1>
    eebc:	|      move.l d0,-(sp)
    eebe:	|      jsr 14026 <setVariable>
    eec4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eec8:	|      moveq #2,d0
}
    eeca:	\----> addq.l #4,sp
    eecc:	       rts

0000eece <builtIn_pasteString>:

builtIn(pasteString)
{
    eece:	       lea -16(sp),sp
    eed2:	       move.l a6,-(sp)
    eed4:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    eed6:	       movea.l 32(sp),a0
    eeda:	       move.l 24(a0),d0
    eede:	       move.l d0,-(sp)
    eee0:	       jsr 13d0a <getTextFromAnyVar>
    eee6:	       addq.l #4,sp
    eee8:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    eeec:	       moveq #24,d0
    eeee:	       add.l 32(sp),d0
    eef2:	       move.l d0,-(sp)
    eef4:	       jsr 140b8 <trimStack>
    eefa:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    eefc:	       movea.l 32(sp),a0
    ef00:	       move.l 24(a0),d0
    ef04:	       move.l d0,-(sp)
    ef06:	       pea 1 <_start+0x1>
    ef0a:	       lea 20(sp),a0
    ef0e:	       move.l a0,-(sp)
    ef10:	       jsr 13734 <getValueType>
    ef16:	       lea 12(sp),sp
    ef1a:	       tst.w d0
    ef1c:	   /-- bne.s ef24 <builtIn_pasteString+0x56>
    ef1e:	   |   moveq #1,d0
    ef20:	/--|-- bra.w efac <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    ef24:	|  \-> moveq #24,d0
    ef26:	|      add.l 32(sp),d0
    ef2a:	|      move.l d0,-(sp)
    ef2c:	|      jsr 140b8 <trimStack>
    ef32:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ef34:	|      movea.l 32(sp),a0
    ef38:	|      move.l 24(a0),d0
    ef3c:	|      move.l d0,-(sp)
    ef3e:	|      pea 1 <_start+0x1>
    ef42:	|      lea 16(sp),a0
    ef46:	|      move.l a0,-(sp)
    ef48:	|      jsr 13734 <getValueType>
    ef4e:	|      lea 12(sp),sp
    ef52:	|      tst.w d0
    ef54:	|  /-- bne.s ef5a <builtIn_pasteString+0x8c>
    ef56:	|  |   moveq #1,d0
    ef58:	+--|-- bra.s efac <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    ef5a:	|  \-> moveq #24,d0
    ef5c:	|      add.l 32(sp),d0
    ef60:	|      move.l d0,-(sp)
    ef62:	|      jsr 140b8 <trimStack>
    ef68:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    ef6a:	|      move.l 8(sp),d0
    ef6e:	|      cmpi.l #65535,d0
    ef74:	|  /-- bne.s ef94 <builtIn_pasteString+0xc6>
    ef76:	|  |   move.l 1b12c <winWidth>,d2
    ef7c:	|  |   move.l 20(sp),-(sp)
    ef80:	|  |   jsr 142d6 <stringWidth>
    ef86:	|  |   addq.l #4,sp
    ef88:	|  |   move.l d2,d1
    ef8a:	|  |   sub.l d0,d1
    ef8c:	|  |   move.l d1,d0
    ef8e:	|  |   lsr.l #1,d0
    ef90:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    ef94:	|  \-> move.l 20(sp),16(sp)
    ef9a:	|      move.l 1b1d8 <SysBase>,d0
    efa0:	|      movea.l d0,a6
    efa2:	|      movea.l 16(sp),a1
    efa6:	|      jsr -690(a6)
    return BR_CONTINUE;
    efaa:	|      moveq #2,d0
}
    efac:	\----> move.l (sp)+,d2
    efae:	       movea.l (sp)+,a6
    efb0:	       lea 16(sp),sp
    efb4:	       rts

0000efb6 <builtIn_anim>:

builtIn(anim)
{
    efb6:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    efba:	       moveq #1,d0
    efbc:	       cmp.l 16(sp),d0
    efc0:	   /-- blt.s efd6 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    efc2:	   |   pea 181ae <PutChar+0x1c38>
    efc8:	   |   jsr 15c26 <KPrintF>
    efce:	   |   addq.l #4,sp
		return BR_ERROR;
    efd0:	   |   moveq #1,d0
    efd2:	/--|-- bra.w f064 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    efd6:	|  \-> moveq #24,d1
    efd8:	|      add.l 20(sp),d1
    efdc:	|      move.l 16(sp),d0
    efe0:	|      subq.l #1,d0
    efe2:	|      move.l d1,-(sp)
    efe4:	|      move.l d0,-(sp)
    efe6:	|      jsr 870e <createPersonaAnim>
    efec:	|      addq.l #8,sp
    efee:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eff2:	|      movea.l 20(sp),a0
    eff6:	|      move.l 24(a0),d0
    effa:	|      move.l d0,-(sp)
    effc:	|      pea 5 <_start+0x5>
    f000:	|      lea 8(sp),a0
    f004:	|      move.l a0,-(sp)
    f006:	|      jsr 13734 <getValueType>
    f00c:	|      lea 12(sp),sp
    f010:	|      tst.w d0
    f012:	|  /-- bne.s f018 <builtIn_anim+0x62>
    f014:	|  |   moveq #1,d0
    f016:	+--|-- bra.s f064 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    f018:	|  \-> moveq #24,d0
    f01a:	|      add.l 20(sp),d0
    f01e:	|      move.l d0,-(sp)
    f020:	|      jsr 140b8 <trimStack>
    f026:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    f028:	|      move.l (sp),d0
    f02a:	|      move.l d0,-(sp)
    f02c:	|      jsr 14988 <loadBankForAnim>
    f032:	|      addq.l #4,sp
    f034:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    f038:	|  /-- bne.s f03e <builtIn_anim+0x88>
    f03a:	|  |   moveq #1,d0
    f03c:	+--|-- bra.s f064 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    f03e:	|  \-> move.l 4(sp),-(sp)
    f042:	|      move.l 12(sp),-(sp)
    f046:	|      jsr a5b8 <setBankFile>
    f04c:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    f04e:	|      moveq #28,d0
    f050:	|      add.l 20(sp),d0
    f054:	|      move.l 8(sp),-(sp)
    f058:	|      move.l d0,-(sp)
    f05a:	|      jsr 13fe2 <newAnimationVariable>
    f060:	|      addq.l #8,sp
	return BR_CONTINUE;
    f062:	|      moveq #2,d0
}
    f064:	\----> lea 12(sp),sp
    f068:	       rts

0000f06a <builtIn_costume>:

builtIn(costume)
{
    f06a:	          lea -32(sp),sp
    f06e:	          move.l a6,-(sp)
    f070:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    f072:	          moveq #8,d0
    f074:	          move.l d0,32(sp)
    f078:	          clr.l 28(sp)
    f07c:	          move.l 1b1d8 <SysBase>,d0
    f082:	          movea.l d0,a6
    f084:	          move.l 32(sp),d0
    f088:	          move.l 28(sp),d1
    f08c:	          jsr -684(a6)
    f090:	          move.l d0,24(sp)
    f094:	          move.l 24(sp),d0
    f098:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    f09c:	      /-- bne.s f0a4 <builtIn_costume+0x3a>
    f09e:	      |   moveq #1,d0
    f0a0:	/-----|-- bra.w f18c <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    f0a4:	|     \-> move.l 44(sp),d0
    f0a8:	|         pea 3 <_start+0x3>
    f0ac:	|         move.l d0,-(sp)
    f0ae:	|         jsr 164de <__divsi3>
    f0b4:	|         addq.l #8,sp
    f0b6:	|         movea.l 20(sp),a0
    f0ba:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    f0be:	|         tst.l 44(sp)
    f0c2:	|     /-- beq.s f0d8 <builtIn_costume+0x6e>
    f0c4:	|     |   movea.l 20(sp),a0
    f0c8:	|     |   move.l 4(a0),d1
    f0cc:	|     |   move.l d1,d0
    f0ce:	|     |   add.l d0,d0
    f0d0:	|     |   add.l d1,d0
    f0d2:	|     |   cmp.l 44(sp),d0
    f0d6:	|  /--|-- beq.s f0ec <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    f0d8:	|  |  \-> pea 181e8 <PutChar+0x1c72>
    f0de:	|  |      jsr 15c26 <KPrintF>
    f0e4:	|  |      addq.l #4,sp
        return BR_ERROR;
    f0e6:	|  |      moveq #1,d0
    f0e8:	+--|----- bra.w f18c <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    f0ec:	|  \----> move.l 44(sp),d0
    f0f0:	|         add.l d0,d0
    f0f2:	|         add.l d0,d0
    f0f4:	|         move.l d0,16(sp)
    f0f8:	|         clr.l 12(sp)
    f0fc:	|         move.l 1b1d8 <SysBase>,d0
    f102:	|         movea.l d0,a6
    f104:	|         move.l 16(sp),d0
    f108:	|         move.l 12(sp),d1
    f10c:	|         jsr -684(a6)
    f110:	|         move.l d0,8(sp)
    f114:	|         move.l 8(sp),d0
    f118:	|         movea.l 20(sp),a0
    f11c:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    f11e:	|         movea.l 20(sp),a0
    f122:	|         move.l (a0),d0
    f124:	|     /-- bne.s f12a <builtIn_costume+0xc0>
    f126:	|     |   moveq #1,d0
    f128:	+-----|-- bra.s f18c <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    f12a:	|     \-> move.l 44(sp),d0
    f12e:	|         subq.l #1,d0
    f130:	|         move.l d0,36(sp)
    f134:	|     /-- bra.s f170 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    f136:	|  /--|-> movea.l 48(sp),a0
    f13a:	|  |  |   move.l 24(a0),d0
    f13e:	|  |  |   movea.l 20(sp),a0
    f142:	|  |  |   movea.l (a0),a0
    f144:	|  |  |   move.l 36(sp),d1
    f148:	|  |  |   add.l d1,d1
    f14a:	|  |  |   add.l d1,d1
    f14c:	|  |  |   lea (0,a0,d1.l),a2
    f150:	|  |  |   move.l d0,-(sp)
    f152:	|  |  |   jsr 13c0c <getAnimationFromVar>
    f158:	|  |  |   addq.l #4,sp
    f15a:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    f15c:	|  |  |   moveq #24,d0
    f15e:	|  |  |   add.l 48(sp),d0
    f162:	|  |  |   move.l d0,-(sp)
    f164:	|  |  |   jsr 140b8 <trimStack>
    f16a:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    f16c:	|  |  |   subq.l #1,36(sp)
    f170:	|  |  \-> tst.l 36(sp)
    f174:	|  \----- bge.s f136 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    f176:	|         moveq #28,d0
    f178:	|         add.l 48(sp),d0
    f17c:	|         move.l 20(sp),-(sp)
    f180:	|         move.l d0,-(sp)
    f182:	|         jsr 14004 <newCostumeVariable>
    f188:	|         addq.l #8,sp
    return BR_CONTINUE;
    f18a:	|         moveq #2,d0
}
    f18c:	\-------> movea.l (sp)+,a2
    f18e:	          movea.l (sp)+,a6
    f190:	          lea 32(sp),sp
    f194:	          rts

0000f196 <builtIn_launch>:

builtIn(launch)
{
    f196:	          lea -20(sp),sp
    f19a:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    f19c:	          movea.l 32(sp),a0
    f1a0:	          move.l 24(a0),d0
    f1a4:	          move.l d0,-(sp)
    f1a6:	          jsr 13d0a <getTextFromAnyVar>
    f1ac:	          addq.l #4,sp
    f1ae:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    f1b2:	      /-- bne.s f1ba <builtIn_launch+0x24>
    f1b4:	      |   moveq #1,d0
    f1b6:	/-----|-- bra.w f2e8 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    f1ba:	|     \-> move.l 20(sp),-(sp)
    f1be:	|         jsr 2fe <encodeFilename>
    f1c4:	|         addq.l #4,sp
    f1c6:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    f1ca:	|         moveq #24,d0
    f1cc:	|         add.l 32(sp),d0
    f1d0:	|         move.l d0,-(sp)
    f1d2:	|         jsr 140b8 <trimStack>
    f1d8:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    f1da:	|         movea.l 20(sp),a0
    f1de:	|         move.b (a0),d0
    f1e0:	|         cmpi.b #104,d0
    f1e4:	|  /----- bne.s f24e <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    f1e6:	|  |      movea.l 20(sp),a0
    f1ea:	|  |      addq.l #1,a0
    f1ec:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    f1ee:	|  |      cmpi.b #116,d0
    f1f2:	|  +----- bne.s f24e <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    f1f4:	|  |      movea.l 20(sp),a0
    f1f8:	|  |      addq.l #2,a0
    f1fa:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    f1fc:	|  |      cmpi.b #116,d0
    f200:	|  +----- bne.s f24e <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    f202:	|  |      movea.l 20(sp),a0
    f206:	|  |      addq.l #3,a0
    f208:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    f20a:	|  |      cmpi.b #112,d0
    f20e:	|  +----- bne.s f24e <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f210:	|  |      movea.l 20(sp),a0
    f214:	|  |      addq.l #4,a0
    f216:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    f218:	|  |      cmpi.b #58,d0
    f21c:	|  |  /-- beq.s f23a <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    f21e:	|  |  |   movea.l 20(sp),a0
    f222:	|  |  |   addq.l #4,a0
    f224:	|  |  |   move.b (a0),d0
    f226:	|  |  |   cmpi.b #115,d0
    f22a:	|  +--|-- bne.s f24e <builtIn_launch+0xb8>
    f22c:	|  |  |   movea.l 20(sp),a0
    f230:	|  |  |   addq.l #5,a0
    f232:	|  |  |   move.b (a0),d0
    f234:	|  |  |   cmpi.b #58,d0
    f238:	|  +--|-- bne.s f24e <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    f23a:	|  |  \-> move.l 20(sp),-(sp)
    f23e:	|  |      jsr b8 <copyString>
    f244:	|  |      addq.l #4,sp
    f246:	|  |      move.l d0,1b2f2 <launchMe>
    f24c:	|  |  /-- bra.s f2a0 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    f24e:	|  \--|-> move.l 1b140 <gamePath>,d0
    f254:	|     |   pea 18233 <PutChar+0x1cbd>
    f25a:	|     |   move.l d0,-(sp)
    f25c:	|     |   jsr 12c60 <joinStrings>
    f262:	|     |   addq.l #8,sp
    f264:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    f268:	|     |   move.l 16(sp),-(sp)
    f26c:	|     |   move.l 16(sp),-(sp)
    f270:	|     |   jsr 12c60 <joinStrings>
    f276:	|     |   addq.l #8,sp
    f278:	|     |   move.l d0,1b2f2 <launchMe>
        FreeVec(newText);
    f27e:	|     |   move.l 16(sp),8(sp)
    f284:	|     |   move.l 1b1d8 <SysBase>,d0
    f28a:	|     |   movea.l d0,a6
    f28c:	|     |   movea.l 8(sp),a1
    f290:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    f294:	|     |   move.l 1b2f2 <launchMe>,d0
    f29a:	|     +-- bne.s f2a0 <builtIn_launch+0x10a>
    f29c:	|     |   moveq #1,d0
    f29e:	+-----|-- bra.s f2e8 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    f2a0:	|     \-> move.l 20(sp),4(sp)
    f2a6:	|         move.l 1b1d8 <SysBase>,d0
    f2ac:	|         movea.l d0,a6
    f2ae:	|         movea.l 4(sp),a1
    f2b2:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    f2b6:	|         clr.l -(sp)
    f2b8:	|         jsr 3010 <setGraphicsWindow>
    f2be:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    f2c0:	|         moveq #28,d0
    f2c2:	|         add.l 32(sp),d0
    f2c6:	|         pea 1 <_start+0x1>
    f2ca:	|         pea 1 <_start+0x1>
    f2ce:	|         move.l d0,-(sp)
    f2d0:	|         jsr 14026 <setVariable>
    f2d6:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    f2da:	|         moveq #28,d0
    f2dc:	|         add.l 32(sp),d0
    f2e0:	|         move.l d0,1b2f6 <launchResult>

    return BR_KEEP_AND_PAUSE;
    f2e6:	|         moveq #0,d0
}
    f2e8:	\-------> movea.l (sp)+,a6
    f2ea:	          lea 20(sp),sp
    f2ee:	          rts

0000f2f0 <builtIn_pause>:

builtIn(pause)
{
    f2f0:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2f2:	       movea.l 12(sp),a0
    f2f6:	       move.l 24(a0),d0
    f2fa:	       move.l d0,-(sp)
    f2fc:	       pea 1 <_start+0x1>
    f300:	       move.l sp,d0
    f302:	       addq.l #8,d0
    f304:	       move.l d0,-(sp)
    f306:	       jsr 13734 <getValueType>
    f30c:	       lea 12(sp),sp
    f310:	       tst.w d0
    f312:	   /-- bne.s f318 <builtIn_pause+0x28>
    f314:	   |   moveq #1,d0
    f316:	/--|-- bra.s f346 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    f318:	|  \-> moveq #24,d0
    f31a:	|      add.l 12(sp),d0
    f31e:	|      move.l d0,-(sp)
    f320:	|      jsr 140b8 <trimStack>
    f326:	|      addq.l #4,sp
	if (theTime > 0) {
    f328:	|      move.l (sp),d0
    f32a:	|  /-- ble.s f344 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    f32c:	|  |   move.l (sp),d0
    f32e:	|  |   subq.l #1,d0
    f330:	|  |   movea.l 12(sp),a0
    f334:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    f338:	|  |   movea.l 12(sp),a0
    f33c:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    f340:	|  |   moveq #0,d0
    f342:	+--|-- bra.s f346 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    f344:	|  \-> moveq #2,d0
}
    f346:	\----> addq.l #4,sp
    f348:	       rts

0000f34a <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    f34a:	jsr 3772 <completeTimers>
	return BR_CONTINUE;
    f350:	moveq #2,d0
}
    f352:	rts

0000f354 <builtIn_callEvent>:

builtIn(callEvent)
{
    f354:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f358:	       movea.l 20(sp),a0
    f35c:	       move.l 24(a0),d0
    f360:	       move.l d0,-(sp)
    f362:	       pea 7 <_start+0x7>
    f366:	       lea 8(sp),a0
    f36a:	       move.l a0,-(sp)
    f36c:	       jsr 13734 <getValueType>
    f372:	       lea 12(sp),sp
    f376:	       tst.w d0
    f378:	   /-- bne.s f380 <builtIn_callEvent+0x2c>
    f37a:	   |   moveq #1,d0
    f37c:	/--|-- bra.w f416 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f380:	|  \-> moveq #24,d0
    f382:	|      add.l 20(sp),d0
    f386:	|      move.l d0,-(sp)
    f388:	|      jsr 140b8 <trimStack>
    f38e:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f390:	|      movea.l 20(sp),a0
    f394:	|      move.l 24(a0),d0
    f398:	|      move.l d0,-(sp)
    f39a:	|      pea 7 <_start+0x7>
    f39e:	|      moveq #12,d0
    f3a0:	|      add.l sp,d0
    f3a2:	|      move.l d0,-(sp)
    f3a4:	|      jsr 13734 <getValueType>
    f3aa:	|      lea 12(sp),sp
    f3ae:	|      tst.w d0
    f3b0:	|  /-- bne.s f3b6 <builtIn_callEvent+0x62>
    f3b2:	|  |   moveq #1,d0
    f3b4:	+--|-- bra.s f416 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    f3b6:	|  \-> moveq #24,d0
    f3b8:	|      add.l 20(sp),d0
    f3bc:	|      move.l d0,-(sp)
    f3be:	|      jsr 140b8 <trimStack>
    f3c4:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    f3c6:	|      move.l (sp),d1
    f3c8:	|      move.l 4(sp),d0
    f3cc:	|      move.l d1,-(sp)
    f3ce:	|      move.l d0,-(sp)
    f3d0:	|      jsr c560 <getCombinationFunction>
    f3d6:	|      addq.l #8,sp
    f3d8:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    f3dc:	|  /-- beq.s f3fc <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    f3de:	|  |   moveq #28,d0
    f3e0:	|  |   add.l 20(sp),d0
    f3e4:	|  |   move.l 8(sp),-(sp)
    f3e8:	|  |   pea 2 <_start+0x2>
    f3ec:	|  |   move.l d0,-(sp)
    f3ee:	|  |   jsr 14026 <setVariable>
    f3f4:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    f3f8:	|  |   moveq #4,d0
    f3fa:	+--|-- bra.s f416 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    f3fc:	|  \-> moveq #28,d0
    f3fe:	|      add.l 20(sp),d0
    f402:	|      clr.l -(sp)
    f404:	|      pea 1 <_start+0x1>
    f408:	|      move.l d0,-(sp)
    f40a:	|      jsr 14026 <setVariable>
    f410:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f414:	|      moveq #2,d0
}
    f416:	\----> lea 12(sp),sp
    f41a:	       rts

0000f41c <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    f41c:	move.w #1,1b302 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    f424:	moveq #2,d0
}
    f426:	rts

0000f428 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f428:	moveq #24,d0
    f42a:	add.l 8(sp),d0
    f42e:	move.l d0,-(sp)
    f430:	jsr 140b8 <trimStack>
    f436:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    f438:	pea 18235 <PutChar+0x1cbf>
    f43e:	jsr 15c26 <KPrintF>
    f444:	addq.l #4,sp
	return BR_CONTINUE;
    f446:	moveq #2,d0
}
    f448:	rts

0000f44a <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    f44a:	pea 18235 <PutChar+0x1cbf>
    f450:	jsr 15c26 <KPrintF>
    f456:	addq.l #4,sp
	return BR_CONTINUE;
    f458:	moveq #2,d0
}
    f45a:	rts

0000f45c <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    f45c:	pea 18235 <PutChar+0x1cbf>
    f462:	jsr 15c26 <KPrintF>
    f468:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    f46a:	moveq #2,d0
}
    f46c:	rts

0000f46e <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    f46e:	pea 18235 <PutChar+0x1cbf>
    f474:	jsr 15c26 <KPrintF>
    f47a:	addq.l #4,sp
	return BR_CONTINUE;
    f47c:	moveq #2,d0
}
    f47e:	rts

0000f480 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f480:	pea 18235 <PutChar+0x1cbf>
    f486:	jsr 15c26 <KPrintF>
    f48c:	addq.l #4,sp
	return BR_CONTINUE;
    f48e:	moveq #2,d0
}
    f490:	rts

0000f492 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    f492:	pea 18235 <PutChar+0x1cbf>
    f498:	jsr 15c26 <KPrintF>
    f49e:	addq.l #4,sp
	return BR_CONTINUE;
    f4a0:	moveq #2,d0
}
    f4a2:	rts

0000f4a4 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    f4a4:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f4a8:	       movea.l 20(sp),a0
    f4ac:	       move.l 24(a0),d0
    f4b0:	       move.l d0,-(sp)
    f4b2:	       pea 1 <_start+0x1>
    f4b6:	       moveq #16,d0
    f4b8:	       add.l sp,d0
    f4ba:	       move.l d0,-(sp)
    f4bc:	       jsr 13734 <getValueType>
    f4c2:	       lea 12(sp),sp
    f4c6:	       tst.w d0
    f4c8:	   /-- bne.s f4d0 <builtIn_startMusic+0x2c>
    f4ca:	   |   moveq #1,d0
    f4cc:	/--|-- bra.w f570 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f4d0:	|  \-> moveq #24,d0
    f4d2:	|      add.l 20(sp),d0
    f4d6:	|      move.l d0,-(sp)
    f4d8:	|      jsr 140b8 <trimStack>
    f4de:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f4e0:	|      movea.l 20(sp),a0
    f4e4:	|      move.l 24(a0),d0
    f4e8:	|      move.l d0,-(sp)
    f4ea:	|      pea 1 <_start+0x1>
    f4ee:	|      moveq #12,d0
    f4f0:	|      add.l sp,d0
    f4f2:	|      move.l d0,-(sp)
    f4f4:	|      jsr 13734 <getValueType>
    f4fa:	|      lea 12(sp),sp
    f4fe:	|      tst.w d0
    f500:	|  /-- bne.s f506 <builtIn_startMusic+0x62>
    f502:	|  |   moveq #1,d0
    f504:	+--|-- bra.s f570 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f506:	|  \-> moveq #24,d0
    f508:	|      add.l 20(sp),d0
    f50c:	|      move.l d0,-(sp)
    f50e:	|      jsr 140b8 <trimStack>
    f514:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f516:	|      movea.l 20(sp),a0
    f51a:	|      move.l 24(a0),d0
    f51e:	|      move.l d0,-(sp)
    f520:	|      pea 5 <_start+0x5>
    f524:	|      lea 8(sp),a0
    f528:	|      move.l a0,-(sp)
    f52a:	|      jsr 13734 <getValueType>
    f530:	|      lea 12(sp),sp
    f534:	|      tst.w d0
    f536:	|  /-- bne.s f53c <builtIn_startMusic+0x98>
    f538:	|  |   moveq #1,d0
    f53a:	+--|-- bra.s f570 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    f53c:	|  \-> moveq #24,d0
    f53e:	|      add.l 20(sp),d0
    f542:	|      move.l d0,-(sp)
    f544:	|      jsr 140b8 <trimStack>
    f54a:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    f54c:	|      movea.l 8(sp),a0
    f550:	|      move.l 4(sp),d1
    f554:	|      move.l (sp),d0
    f556:	|      move.l a0,-(sp)
    f558:	|      move.l d1,-(sp)
    f55a:	|      move.l d0,-(sp)
    f55c:	|      jsr c16c <playMOD>
    f562:	|      lea 12(sp),sp
    f566:	|      tst.w d0
    f568:	|  /-- bne.s f56e <builtIn_startMusic+0xca>
    f56a:	|  |   moveq #2,d0
    f56c:	+--|-- bra.s f570 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    f56e:	|  \-> moveq #2,d0
}
    f570:	\----> lea 12(sp),sp
    f574:	       rts

0000f576 <builtIn_stopMusic>:

builtIn(stopMusic)
{
    f576:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f578:	       movea.l 12(sp),a0
    f57c:	       move.l 24(a0),d0
    f580:	       move.l d0,-(sp)
    f582:	       pea 1 <_start+0x1>
    f586:	       move.l sp,d0
    f588:	       addq.l #8,d0
    f58a:	       move.l d0,-(sp)
    f58c:	       jsr 13734 <getValueType>
    f592:	       lea 12(sp),sp
    f596:	       tst.w d0
    f598:	   /-- bne.s f59e <builtIn_stopMusic+0x28>
    f59a:	   |   moveq #1,d0
    f59c:	/--|-- bra.s f5bc <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    f59e:	|  \-> moveq #24,d0
    f5a0:	|      add.l 12(sp),d0
    f5a4:	|      move.l d0,-(sp)
    f5a6:	|      jsr 140b8 <trimStack>
    f5ac:	|      addq.l #4,sp
	stopMOD (v);
    f5ae:	|      move.l (sp),d0
    f5b0:	|      move.l d0,-(sp)
    f5b2:	|      jsr c208 <stopMOD>
    f5b8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f5ba:	|      moveq #2,d0
}
    f5bc:	\----> addq.l #4,sp
    f5be:	       rts

0000f5c0 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    f5c0:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f5c2:	       movea.l 16(sp),a0
    f5c6:	       move.l 24(a0),d0
    f5ca:	       move.l d0,-(sp)
    f5cc:	       pea 1 <_start+0x1>
    f5d0:	       move.l sp,d0
    f5d2:	       addq.l #8,d0
    f5d4:	       move.l d0,-(sp)
    f5d6:	       jsr 13734 <getValueType>
    f5dc:	       lea 12(sp),sp
    f5e0:	       tst.w d0
    f5e2:	   /-- bne.s f5e8 <builtIn_setMusicVolume+0x28>
    f5e4:	   |   moveq #1,d0
    f5e6:	/--|-- bra.s f642 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f5e8:	|  \-> moveq #24,d0
    f5ea:	|      add.l 16(sp),d0
    f5ee:	|      move.l d0,-(sp)
    f5f0:	|      jsr 140b8 <trimStack>
    f5f6:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f5f8:	|      movea.l 16(sp),a0
    f5fc:	|      move.l 24(a0),d0
    f600:	|      move.l d0,-(sp)
    f602:	|      pea 1 <_start+0x1>
    f606:	|      moveq #12,d0
    f608:	|      add.l sp,d0
    f60a:	|      move.l d0,-(sp)
    f60c:	|      jsr 13734 <getValueType>
    f612:	|      lea 12(sp),sp
    f616:	|      tst.w d0
    f618:	|  /-- bne.s f61e <builtIn_setMusicVolume+0x5e>
    f61a:	|  |   moveq #1,d0
    f61c:	+--|-- bra.s f642 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    f61e:	|  \-> moveq #24,d0
    f620:	|      add.l 16(sp),d0
    f624:	|      move.l d0,-(sp)
    f626:	|      jsr 140b8 <trimStack>
    f62c:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    f62e:	|      move.l (sp),d1
    f630:	|      move.l 4(sp),d0
    f634:	|      move.l d1,-(sp)
    f636:	|      move.l d0,-(sp)
    f638:	|      jsr c1ee <setMusicVolume>
    f63e:	|      addq.l #8,sp
	return BR_CONTINUE;
    f640:	|      moveq #2,d0
}
    f642:	\----> addq.l #8,sp
    f644:	       rts

0000f646 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    f646:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f648:	       movea.l 12(sp),a0
    f64c:	       move.l 24(a0),d0
    f650:	       move.l d0,-(sp)
    f652:	       pea 1 <_start+0x1>
    f656:	       move.l sp,d0
    f658:	       addq.l #8,d0
    f65a:	       move.l d0,-(sp)
    f65c:	       jsr 13734 <getValueType>
    f662:	       lea 12(sp),sp
    f666:	       tst.w d0
    f668:	   /-- bne.s f66e <builtIn_setDefaultMusicVolume+0x28>
    f66a:	   |   moveq #1,d0
    f66c:	/--|-- bra.s f68c <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    f66e:	|  \-> moveq #24,d0
    f670:	|      add.l 12(sp),d0
    f674:	|      move.l d0,-(sp)
    f676:	|      jsr 140b8 <trimStack>
    f67c:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    f67e:	|      move.l (sp),d0
    f680:	|      move.l d0,-(sp)
    f682:	|      jsr c1d2 <setDefaultMusicVolume>
    f688:	|      addq.l #4,sp
	return BR_CONTINUE;
    f68a:	|      moveq #2,d0
}
    f68c:	\----> addq.l #4,sp
    f68e:	       rts

0000f690 <builtIn_playSound>:

builtIn(playSound)
{
    f690:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f692:	       movea.l 12(sp),a0
    f696:	       move.l 24(a0),d0
    f69a:	       move.l d0,-(sp)
    f69c:	       pea 5 <_start+0x5>
    f6a0:	       move.l sp,d0
    f6a2:	       addq.l #8,d0
    f6a4:	       move.l d0,-(sp)
    f6a6:	       jsr 13734 <getValueType>
    f6ac:	       lea 12(sp),sp
    f6b0:	       tst.w d0
    f6b2:	   /-- bne.s f6b8 <builtIn_playSound+0x28>
    f6b4:	   |   moveq #1,d0
    f6b6:	/--|-- bra.s f6e0 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    f6b8:	|  \-> moveq #24,d0
    f6ba:	|      add.l 12(sp),d0
    f6be:	|      move.l d0,-(sp)
    f6c0:	|      jsr 140b8 <trimStack>
    f6c6:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    f6c8:	|      move.l (sp),d0
    f6ca:	|      clr.l -(sp)
    f6cc:	|      move.l d0,-(sp)
    f6ce:	|      jsr c1f6 <startSound>
    f6d4:	|      addq.l #8,sp
    f6d6:	|      tst.w d0
    f6d8:	|  /-- bne.s f6de <builtIn_playSound+0x4e>
    f6da:	|  |   moveq #2,d0
    f6dc:	+--|-- bra.s f6e0 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    f6de:	|  \-> moveq #2,d0
}
    f6e0:	\----> addq.l #4,sp
    f6e2:	       rts

0000f6e4 <builtIn_loopSound>:

builtIn(loopSound)
{
    f6e4:	             lea -28(sp),sp
    f6e8:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    f6ea:	             tst.l 36(sp)
    f6ee:	         /-- bgt.s f704 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    f6f0:	         |   pea 18258 <PutChar+0x1ce2>
    f6f6:	         |   jsr 15c26 <KPrintF>
    f6fc:	         |   addq.l #4,sp
		return BR_ERROR;
    f6fe:	         |   moveq #1,d0
    f700:	/--------|-- bra.w f8c0 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    f704:	|        \-> moveq #1,d0
    f706:	|            cmp.l 36(sp),d0
    f70a:	|     /----- blt.s f766 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    f70c:	|     |      movea.l 40(sp),a0
    f710:	|     |      move.l 24(a0),d0
    f714:	|     |      move.l d0,-(sp)
    f716:	|     |      pea 5 <_start+0x5>
    f71a:	|     |      lea 16(sp),a0
    f71e:	|     |      move.l a0,-(sp)
    f720:	|     |      jsr 13734 <getValueType>
    f726:	|     |      lea 12(sp),sp
    f72a:	|     |      tst.w d0
    f72c:	|     |  /-- bne.s f734 <builtIn_loopSound+0x50>
    f72e:	|     |  |   moveq #1,d0
    f730:	+-----|--|-- bra.w f8c0 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    f734:	|     |  \-> moveq #24,d0
    f736:	|     |      add.l 40(sp),d0
    f73a:	|     |      move.l d0,-(sp)
    f73c:	|     |      jsr 140b8 <trimStack>
    f742:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    f744:	|     |      move.l 8(sp),d0
    f748:	|     |      pea 1 <_start+0x1>
    f74c:	|     |      move.l d0,-(sp)
    f74e:	|     |      jsr c1f6 <startSound>
    f754:	|     |      addq.l #8,sp
    f756:	|     |      tst.w d0
    f758:	|     |  /-- bne.s f760 <builtIn_loopSound+0x7c>
    f75a:	|     |  |   moveq #2,d0
    f75c:	+-----|--|-- bra.w f8c0 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    f760:	|     |  \-> moveq #2,d0
    f762:	+-----|----- bra.w f8c0 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    f766:	|     \----> moveq #2,d1
    f768:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    f76c:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    f770:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    f774:	|            movea.l 40(sp),a0
    f778:	|            movea.l 24(a0),a0
    f77c:	|            move.l (a0),d0
    f77e:	|            moveq #5,d1
    f780:	|            cmp.l d0,d1
    f782:	|  /-------- beq.w f85a <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    f786:	|  |         movea.l 40(sp),a0
    f78a:	|  |         move.l 24(a0),d0
    f78e:	|  |         move.l d0,-(sp)
    f790:	|  |         pea 1 <_start+0x1>
    f794:	|  |         lea 12(sp),a0
    f798:	|  |         move.l a0,-(sp)
    f79a:	|  |         jsr 13734 <getValueType>
    f7a0:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    f7a4:	|  |         moveq #24,d0
    f7a6:	|  |         add.l 40(sp),d0
    f7aa:	|  |         move.l d0,-(sp)
    f7ac:	|  |         jsr 140b8 <trimStack>
    f7b2:	|  |         addq.l #4,sp
			numParams--;
    f7b4:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    f7b8:	|  +-------- bra.w f85a <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    f7bc:	|  |  /----> movea.l 40(sp),a0
    f7c0:	|  |  |      move.l 24(a0),d0
    f7c4:	|  |  |      move.l d0,-(sp)
    f7c6:	|  |  |      pea 5 <_start+0x5>
    f7ca:	|  |  |      lea 16(sp),a0
    f7ce:	|  |  |      move.l a0,-(sp)
    f7d0:	|  |  |      jsr 13734 <getValueType>
    f7d6:	|  |  |      lea 12(sp),sp
    f7da:	|  |  |      tst.w d0
    f7dc:	|  |  |  /-- bne.s f7f2 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    f7de:	|  |  |  |   pea 18296 <PutChar+0x1d20>
    f7e4:	|  |  |  |   jsr 15c26 <KPrintF>
    f7ea:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    f7ec:	|  |  |  |   moveq #1,d0
    f7ee:	+--|--|--|-- bra.w f8c0 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    f7f2:	|  |  |  \-> moveq #20,d0
    f7f4:	|  |  |      move.l d0,20(sp)
    f7f8:	|  |  |      clr.l 16(sp)
    f7fc:	|  |  |      move.l 1b1d8 <SysBase>,d0
    f802:	|  |  |      movea.l d0,a6
    f804:	|  |  |      move.l 20(sp),d0
    f808:	|  |  |      move.l 16(sp),d1
    f80c:	|  |  |      jsr -684(a6)
    f810:	|  |  |      move.l d0,12(sp)
    f814:	|  |  |      move.l 12(sp),d0
    f818:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    f81c:	|  |  |  /-- bne.s f824 <builtIn_loopSound+0x140>
    f81e:	|  |  |  |   moveq #1,d0
    f820:	+--|--|--|-- bra.w f8c0 <builtIn_loopSound+0x1dc>

			s->next = old;
    f824:	|  |  |  \-> movea.l 28(sp),a0
    f828:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    f82e:	|  |  |      movea.l 28(sp),a0
    f832:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    f836:	|  |  |      move.l 8(sp),d0
    f83a:	|  |  |      movea.l 28(sp),a0
    f83e:	|  |  |      move.l d0,(a0)
			old = s;
    f840:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    f846:	|  |  |      moveq #24,d0
    f848:	|  |  |      add.l 40(sp),d0
    f84c:	|  |  |      move.l d0,-(sp)
    f84e:	|  |  |      jsr 140b8 <trimStack>
    f854:	|  |  |      addq.l #4,sp
			numParams--;
    f856:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    f85a:	|  \--|----> tst.l 36(sp)
    f85e:	|     \----- bne.w f7bc <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    f862:	|        /-- bra.s f86e <builtIn_loopSound+0x18a>
    f864:	|     /--|-> movea.l 28(sp),a0
    f868:	|     |  |   move.l 4(a0),28(sp)
    f86e:	|     |  \-> movea.l 28(sp),a0
    f872:	|     |      move.l 4(a0),d0
    f876:	|     \----- bne.s f864 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    f878:	|            move.l 4(sp),d0
    f87c:	|            moveq #1,d1
    f87e:	|            cmp.l d0,d1
    f880:	|     /----- bge.s f898 <builtIn_loopSound+0x1b4>
			s->next = old;
    f882:	|     |      movea.l 28(sp),a0
    f886:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    f88c:	|     |      movea.l 24(sp),a0
    f890:	|     |      move.l 28(sp),8(a0)
    f896:	|     |  /-- bra.s f8a8 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    f898:	|     \--|-> move.l 4(sp),d0
    f89c:	|        +-- beq.s f8a8 <builtIn_loopSound+0x1c4>
			s->next = s;
    f89e:	|        |   movea.l 28(sp),a0
    f8a2:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    f8a8:	|        \-> movea.l 24(sp),a0
    f8ac:	|            moveq #-1,d0
    f8ae:	|            move.l d0,16(a0)
		playSoundList(old);
    f8b2:	|            move.l 24(sp),-(sp)
    f8b6:	|            jsr c170 <playSoundList>
    f8bc:	|            addq.l #4,sp
		return BR_CONTINUE;
    f8be:	|            moveq #2,d0
	}
}
    f8c0:	\----------> movea.l (sp)+,a6
    f8c2:	             lea 28(sp),sp
    f8c6:	             rts

0000f8c8 <builtIn_stopSound>:

builtIn(stopSound)
{
    f8c8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f8ca:	       movea.l 12(sp),a0
    f8ce:	       move.l 24(a0),d0
    f8d2:	       move.l d0,-(sp)
    f8d4:	       pea 5 <_start+0x5>
    f8d8:	       move.l sp,d0
    f8da:	       addq.l #8,d0
    f8dc:	       move.l d0,-(sp)
    f8de:	       jsr 13734 <getValueType>
    f8e4:	       lea 12(sp),sp
    f8e8:	       tst.w d0
    f8ea:	   /-- bne.s f8f0 <builtIn_stopSound+0x28>
    f8ec:	   |   moveq #1,d0
    f8ee:	/--|-- bra.s f90e <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    f8f0:	|  \-> moveq #24,d0
    f8f2:	|      add.l 12(sp),d0
    f8f6:	|      move.l d0,-(sp)
    f8f8:	|      jsr 140b8 <trimStack>
    f8fe:	|      addq.l #4,sp
	huntKillSound (v);
    f900:	|      move.l (sp),d0
    f902:	|      move.l d0,-(sp)
    f904:	|      jsr c168 <huntKillSound>
    f90a:	|      addq.l #4,sp
	return BR_CONTINUE;
    f90c:	|      moveq #2,d0
}
    f90e:	\----> addq.l #4,sp
    f910:	       rts

0000f912 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    f912:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f914:	       movea.l 12(sp),a0
    f918:	       move.l 24(a0),d0
    f91c:	       move.l d0,-(sp)
    f91e:	       pea 1 <_start+0x1>
    f922:	       move.l sp,d0
    f924:	       addq.l #8,d0
    f926:	       move.l d0,-(sp)
    f928:	       jsr 13734 <getValueType>
    f92e:	       lea 12(sp),sp
    f932:	       tst.w d0
    f934:	   /-- bne.s f93a <builtIn_setDefaultSoundVolume+0x28>
    f936:	   |   moveq #1,d0
    f938:	/--|-- bra.s f958 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    f93a:	|  \-> moveq #24,d0
    f93c:	|      add.l 12(sp),d0
    f940:	|      move.l d0,-(sp)
    f942:	|      jsr 140b8 <trimStack>
    f948:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    f94a:	|      move.l (sp),d0
    f94c:	|      move.l d0,-(sp)
    f94e:	|      jsr c1de <setDefaultSoundVolume>
    f954:	|      addq.l #4,sp
	return BR_CONTINUE;
    f956:	|      moveq #2,d0
}
    f958:	\----> addq.l #4,sp
    f95a:	       rts

0000f95c <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    f95c:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f95e:	       movea.l 16(sp),a0
    f962:	       move.l 24(a0),d0
    f966:	       move.l d0,-(sp)
    f968:	       pea 1 <_start+0x1>
    f96c:	       move.l sp,d0
    f96e:	       addq.l #8,d0
    f970:	       move.l d0,-(sp)
    f972:	       jsr 13734 <getValueType>
    f978:	       lea 12(sp),sp
    f97c:	       tst.w d0
    f97e:	   /-- bne.s f984 <builtIn_setSoundVolume+0x28>
    f980:	   |   moveq #1,d0
    f982:	/--|-- bra.s f9de <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    f984:	|  \-> moveq #24,d0
    f986:	|      add.l 16(sp),d0
    f98a:	|      move.l d0,-(sp)
    f98c:	|      jsr 140b8 <trimStack>
    f992:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f994:	|      movea.l 16(sp),a0
    f998:	|      move.l 24(a0),d0
    f99c:	|      move.l d0,-(sp)
    f99e:	|      pea 5 <_start+0x5>
    f9a2:	|      moveq #12,d0
    f9a4:	|      add.l sp,d0
    f9a6:	|      move.l d0,-(sp)
    f9a8:	|      jsr 13734 <getValueType>
    f9ae:	|      lea 12(sp),sp
    f9b2:	|      tst.w d0
    f9b4:	|  /-- bne.s f9ba <builtIn_setSoundVolume+0x5e>
    f9b6:	|  |   moveq #1,d0
    f9b8:	+--|-- bra.s f9de <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    f9ba:	|  \-> moveq #24,d0
    f9bc:	|      add.l 16(sp),d0
    f9c0:	|      move.l d0,-(sp)
    f9c2:	|      jsr 140b8 <trimStack>
    f9c8:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    f9ca:	|      move.l (sp),d1
    f9cc:	|      move.l 4(sp),d0
    f9d0:	|      move.l d1,-(sp)
    f9d2:	|      move.l d0,-(sp)
    f9d4:	|      jsr c1f2 <setSoundVolume>
    f9da:	|      addq.l #8,sp
	return BR_CONTINUE;
    f9dc:	|      moveq #2,d0
}
    f9de:	\----> addq.l #8,sp
    f9e0:	       rts

0000f9e2 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    f9e2:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f9e6:	       movea.l 20(sp),a0
    f9ea:	       move.l 24(a0),d0
    f9ee:	       move.l d0,-(sp)
    f9f0:	       pea 1 <_start+0x1>
    f9f4:	       moveq #12,d0
    f9f6:	       add.l sp,d0
    f9f8:	       move.l d0,-(sp)
    f9fa:	       jsr 13734 <getValueType>
    fa00:	       lea 12(sp),sp
    fa04:	       tst.w d0
    fa06:	   /-- bne.s fa0e <builtIn_setSoundLoopPoints+0x2c>
    fa08:	   |   moveq #1,d0
    fa0a:	/--|-- bra.w faa6 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fa0e:	|  \-> moveq #24,d0
    fa10:	|      add.l 20(sp),d0
    fa14:	|      move.l d0,-(sp)
    fa16:	|      jsr 140b8 <trimStack>
    fa1c:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fa1e:	|      movea.l 20(sp),a0
    fa22:	|      move.l 24(a0),d0
    fa26:	|      move.l d0,-(sp)
    fa28:	|      pea 1 <_start+0x1>
    fa2c:	|      lea 8(sp),a0
    fa30:	|      move.l a0,-(sp)
    fa32:	|      jsr 13734 <getValueType>
    fa38:	|      lea 12(sp),sp
    fa3c:	|      tst.w d0
    fa3e:	|  /-- bne.s fa44 <builtIn_setSoundLoopPoints+0x62>
    fa40:	|  |   moveq #1,d0
    fa42:	+--|-- bra.s faa6 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fa44:	|  \-> moveq #24,d0
    fa46:	|      add.l 20(sp),d0
    fa4a:	|      move.l d0,-(sp)
    fa4c:	|      jsr 140b8 <trimStack>
    fa52:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fa54:	|      movea.l 20(sp),a0
    fa58:	|      move.l 24(a0),d0
    fa5c:	|      move.l d0,-(sp)
    fa5e:	|      pea 5 <_start+0x5>
    fa62:	|      moveq #16,d0
    fa64:	|      add.l sp,d0
    fa66:	|      move.l d0,-(sp)
    fa68:	|      jsr 13734 <getValueType>
    fa6e:	|      lea 12(sp),sp
    fa72:	|      tst.w d0
    fa74:	|  /-- bne.s fa7a <builtIn_setSoundLoopPoints+0x98>
    fa76:	|  |   moveq #1,d0
    fa78:	+--|-- bra.s faa6 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    fa7a:	|  \-> moveq #24,d0
    fa7c:	|      add.l 20(sp),d0
    fa80:	|      move.l d0,-(sp)
    fa82:	|      jsr 140b8 <trimStack>
    fa88:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    fa8a:	|      movea.l 4(sp),a0
    fa8e:	|      move.l (sp),d1
    fa90:	|      move.l 8(sp),d0
    fa94:	|      move.l a0,-(sp)
    fa96:	|      move.l d1,-(sp)
    fa98:	|      move.l d0,-(sp)
    fa9a:	|      jsr c1ea <setSoundLoop>
    faa0:	|      lea 12(sp),sp
	return BR_CONTINUE;
    faa4:	|      moveq #2,d0
}
    faa6:	\----> lea 12(sp),sp
    faaa:	       rts

0000faac <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    faac:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    faae:	          movea.l 12(sp),a0
    fab2:	          movea.l 24(a0),a0
    fab6:	          move.l (a0),d0
    fab8:	          moveq #5,d1
    faba:	          cmp.l d0,d1
    fabc:	/-------- bne.s fb00 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    fabe:	|         movea.l 12(sp),a0
    fac2:	|         move.l 24(a0),d0
    fac6:	|         move.l d0,-(sp)
    fac8:	|         pea 5 <_start+0x5>
    facc:	|         move.l sp,d0
    face:	|         addq.l #8,d0
    fad0:	|         move.l d0,-(sp)
    fad2:	|         jsr 13734 <getValueType>
    fad8:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    fadc:	|         moveq #24,d0
    fade:	|         add.l 12(sp),d0
    fae2:	|         move.l d0,-(sp)
    fae4:	|         jsr 140b8 <trimStack>
    faea:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    faec:	|         move.l (sp),d0
    faee:	|         move.l d0,-(sp)
    faf0:	|         jsr 153d0 <setFloor>
    faf6:	|         addq.l #4,sp
    faf8:	|         tst.w d0
    fafa:	|  /----- bne.s fb16 <builtIn_setFloor+0x6a>
    fafc:	|  |      moveq #1,d0
    fafe:	|  |  /-- bra.s fb18 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    fb00:	\--|--|-> moveq #24,d0
    fb02:	   |  |   add.l 12(sp),d0
    fb06:	   |  |   move.l d0,-(sp)
    fb08:	   |  |   jsr 140b8 <trimStack>
    fb0e:	   |  |   addq.l #4,sp
		setFloorNull ();
    fb10:	   |  |   jsr 15b4a <setFloorNull>
	}
	return BR_CONTINUE;
    fb16:	   \--|-> moveq #2,d0
}
    fb18:	      \-> addq.l #4,sp
    fb1a:	          rts

0000fb1c <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    fb1c:	jsr 14c68 <drawFloor>
	return BR_CONTINUE;
    fb22:	moveq #2,d0
}
    fb24:	rts

0000fb26 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    fb26:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    fb28:	          movea.l 12(sp),a0
    fb2c:	          movea.l 24(a0),a0
    fb30:	          move.l (a0),d0
    fb32:	          moveq #5,d1
    fb34:	          cmp.l d0,d1
    fb36:	/-------- bne.s fb7a <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    fb38:	|         movea.l 12(sp),a0
    fb3c:	|         move.l 24(a0),d0
    fb40:	|         move.l d0,-(sp)
    fb42:	|         pea 5 <_start+0x5>
    fb46:	|         move.l sp,d0
    fb48:	|         addq.l #8,d0
    fb4a:	|         move.l d0,-(sp)
    fb4c:	|         jsr 13734 <getValueType>
    fb52:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    fb56:	|         moveq #24,d0
    fb58:	|         add.l 12(sp),d0
    fb5c:	|         move.l d0,-(sp)
    fb5e:	|         jsr 140b8 <trimStack>
    fb64:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    fb66:	|         move.l (sp),d0
    fb68:	|         move.l d0,-(sp)
    fb6a:	|         jsr 7660 <setZBuffer>
    fb70:	|         addq.l #4,sp
    fb72:	|         tst.w d0
    fb74:	|  /----- bne.s fb90 <builtIn_setZBuffer+0x6a>
    fb76:	|  |      moveq #1,d0
    fb78:	|  |  /-- bra.s fb92 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    fb7a:	\--|--|-> moveq #24,d0
    fb7c:	   |  |   add.l 12(sp),d0
    fb80:	   |  |   move.l d0,-(sp)
    fb82:	   |  |   jsr 140b8 <trimStack>
    fb88:	   |  |   addq.l #4,sp
		killZBuffer ();
    fb8a:	   |  |   jsr 760a <killZBuffer>
	}
	return BR_CONTINUE;
    fb90:	   \--|-> moveq #2,d0
}
    fb92:	      \-> addq.l #4,sp
    fb94:	          rts

0000fb96 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    fb96:	pea 182cd <PutChar+0x1d57>
    fb9c:	jsr 15c26 <KPrintF>
    fba2:	addq.l #4,sp
	return BR_CONTINUE;
    fba4:	moveq #2,d0
}
    fba6:	rts

0000fba8 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fba8:	          movea.l 8(sp),a0
    fbac:	          move.l 24(a0),d0
    fbb0:	          move.l d0,-(sp)
    fbb2:	          pea 1 <_start+0x1>
    fbb6:	          pea 1b2fe <speechMode>
    fbbc:	          jsr 13734 <getValueType>
    fbc2:	          lea 12(sp),sp
    fbc6:	          tst.w d0
    fbc8:	      /-- bne.s fbce <builtIn_setSpeechMode+0x26>
    fbca:	      |   moveq #1,d0
    fbcc:	/-----|-- bra.s fc06 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    fbce:	|     \-> moveq #24,d0
    fbd0:	|         add.l 8(sp),d0
    fbd4:	|         move.l d0,-(sp)
    fbd6:	|         jsr 140b8 <trimStack>
    fbdc:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    fbde:	|         move.l 1b2fe <speechMode>,d0
    fbe4:	|     /-- bmi.s fbf2 <builtIn_setSpeechMode+0x4a>
    fbe6:	|     |   move.l 1b2fe <speechMode>,d0
    fbec:	|     |   moveq #2,d1
    fbee:	|     |   cmp.l d0,d1
    fbf0:	|  /--|-- bge.s fc04 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    fbf2:	|  |  \-> pea 182e6 <PutChar+0x1d70>
    fbf8:	|  |      jsr 15c26 <KPrintF>
    fbfe:	|  |      addq.l #4,sp
		return BR_ERROR;
    fc00:	|  |      moveq #1,d0
    fc02:	+--|----- bra.s fc06 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    fc04:	|  \----> moveq #2,d0
}
    fc06:	\-------> rts

0000fc08 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    fc08:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    fc0a:	       jsr 6e12 <isThereAnySpeechGoingOn>
    fc10:	       move.l d0,(sp)
	if (i == -1) {
    fc12:	       moveq #-1,d0
    fc14:	       cmp.l (sp),d0
    fc16:	/----- bne.s fc32 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    fc18:	|      moveq #28,d0
    fc1a:	|      add.l 12(sp),d0
    fc1e:	|      clr.l -(sp)
    fc20:	|      pea 1 <_start+0x1>
    fc24:	|      move.l d0,-(sp)
    fc26:	|      jsr 14026 <setVariable>
    fc2c:	|      lea 12(sp),sp
    fc30:	|  /-- bra.s fc4a <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    fc32:	\--|-> moveq #28,d0
    fc34:	   |   add.l 12(sp),d0
    fc38:	   |   move.l (sp),-(sp)
    fc3a:	   |   pea 7 <_start+0x7>
    fc3e:	   |   move.l d0,-(sp)
    fc40:	   |   jsr 14026 <setVariable>
    fc46:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    fc4a:	   \-> moveq #2,d0
}
    fc4c:	       addq.l #4,sp
    fc4e:	       rts

0000fc50 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    fc50:	jsr 512c <killSpeechTimers>
	return BR_CONTINUE;
    fc56:	moveq #2,d0
}
    fc58:	rts

0000fc5a <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    fc5a:	       move.l 1b33c <overRegion>,d0
    fc60:	/----- beq.s fc8a <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    fc62:	|      movea.l 1b33c <overRegion>,a0
    fc68:	|      movea.l 28(a0),a0
    fc6c:	|      move.l 4(a0),d1
    fc70:	|      moveq #28,d0
    fc72:	|      add.l 8(sp),d0
    fc76:	|      move.l d1,-(sp)
    fc78:	|      pea 7 <_start+0x7>
    fc7c:	|      move.l d0,-(sp)
    fc7e:	|      jsr 14026 <setVariable>
    fc84:	|      lea 12(sp),sp
    fc88:	|  /-- bra.s fca2 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    fc8a:	\--|-> moveq #28,d0
    fc8c:	   |   add.l 8(sp),d0
    fc90:	   |   clr.l -(sp)
    fc92:	   |   pea 1 <_start+0x1>
    fc96:	   |   move.l d0,-(sp)
    fc98:	   |   jsr 14026 <setVariable>
    fc9e:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    fca2:	   \-> moveq #2,d0
}
    fca4:	       rts

0000fca6 <builtIn_rename>:

builtIn(rename)
{
    fca6:	       lea -16(sp),sp
    fcaa:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fcac:	       movea.l 28(sp),a0
    fcb0:	       move.l 24(a0),d0
    fcb4:	       move.l d0,-(sp)
    fcb6:	       jsr 13d0a <getTextFromAnyVar>
    fcbc:	       addq.l #4,sp
    fcbe:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    fcc2:	   /-- bne.s fcc8 <builtIn_rename+0x22>
    fcc4:	   |   moveq #1,d0
    fcc6:	/--|-- bra.s fd42 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fcc8:	|  \-> moveq #24,d0
    fcca:	|      add.l 28(sp),d0
    fcce:	|      move.l d0,-(sp)
    fcd0:	|      jsr 140b8 <trimStack>
    fcd6:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    fcd8:	|      movea.l 28(sp),a0
    fcdc:	|      move.l 24(a0),d0
    fce0:	|      move.l d0,-(sp)
    fce2:	|      pea 7 <_start+0x7>
    fce6:	|      lea 12(sp),a0
    fcea:	|      move.l a0,-(sp)
    fcec:	|      jsr 13734 <getValueType>
    fcf2:	|      lea 12(sp),sp
    fcf6:	|      tst.w d0
    fcf8:	|  /-- bne.s fcfe <builtIn_rename+0x58>
    fcfa:	|  |   moveq #1,d0
    fcfc:	+--|-- bra.s fd42 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    fcfe:	|  \-> moveq #24,d0
    fd00:	|      add.l 28(sp),d0
    fd04:	|      move.l d0,-(sp)
    fd06:	|      jsr 140b8 <trimStack>
    fd0c:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    fd0e:	|      move.l 4(sp),d0
    fd12:	|      move.l d0,-(sp)
    fd14:	|      jsr c52c <findObjectType>
    fd1a:	|      addq.l #4,sp
    fd1c:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    fd20:	|      movea.l 12(sp),a0
    fd24:	|      move.l (a0),8(sp)
    fd28:	|      move.l 1b1d8 <SysBase>,d0
    fd2e:	|      movea.l d0,a6
    fd30:	|      movea.l 8(sp),a1
    fd34:	|      jsr -690(a6)
	o->screenName = newText;
    fd38:	|      movea.l 12(sp),a0
    fd3c:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    fd40:	|      moveq #2,d0
}
    fd42:	\----> movea.l (sp)+,a6
    fd44:	       lea 16(sp),sp
    fd48:	       rts

0000fd4a <builtIn_getObjectX>:

builtIn (getObjectX)
{
    fd4a:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fd4e:	          movea.l 20(sp),a0
    fd52:	          move.l 24(a0),d0
    fd56:	          move.l d0,-(sp)
    fd58:	          pea 7 <_start+0x7>
    fd5c:	          lea 8(sp),a0
    fd60:	          move.l a0,-(sp)
    fd62:	          jsr 13734 <getValueType>
    fd68:	          lea 12(sp),sp
    fd6c:	          tst.w d0
    fd6e:	      /-- bne.s fd76 <builtIn_getObjectX+0x2c>
    fd70:	      |   moveq #1,d0
    fd72:	/-----|-- bra.w fe12 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    fd76:	|     \-> moveq #24,d0
    fd78:	|         add.l 20(sp),d0
    fd7c:	|         move.l d0,-(sp)
    fd7e:	|         jsr 140b8 <trimStack>
    fd84:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    fd86:	|         move.l (sp),d0
    fd88:	|         move.l d0,-(sp)
    fd8a:	|         jsr 9652 <findPerson>
    fd90:	|         addq.l #4,sp
    fd92:	|         move.l d0,8(sp)
	if (pers) {
    fd96:	|     /-- beq.s fdc4 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    fd98:	|     |   movea.l 8(sp),a0
    fd9c:	|     |   move.l (a0),d0
    fd9e:	|     |   move.l d0,-(sp)
    fda0:	|     |   jsr 15e76 <__fixsfsi>
    fda6:	|     |   addq.l #4,sp
    fda8:	|     |   move.l d0,d1
    fdaa:	|     |   moveq #28,d0
    fdac:	|     |   add.l 20(sp),d0
    fdb0:	|     |   move.l d1,-(sp)
    fdb2:	|     |   pea 1 <_start+0x1>
    fdb6:	|     |   move.l d0,-(sp)
    fdb8:	|     |   jsr 14026 <setVariable>
    fdbe:	|     |   lea 12(sp),sp
    fdc2:	|  /--|-- bra.s fe10 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    fdc4:	|  |  \-> move.l (sp),d0
    fdc6:	|  |      move.l d0,-(sp)
    fdc8:	|  |      jsr 14448 <getRegionForObject>
    fdce:	|  |      addq.l #4,sp
    fdd0:	|  |      move.l d0,4(sp)
		if (la) {
    fdd4:	|  |  /-- beq.s fdf8 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    fdd6:	|  |  |   movea.l 4(sp),a0
    fdda:	|  |  |   move.l 16(a0),d1
    fdde:	|  |  |   moveq #28,d0
    fde0:	|  |  |   add.l 20(sp),d0
    fde4:	|  |  |   move.l d1,-(sp)
    fde6:	|  |  |   pea 1 <_start+0x1>
    fdea:	|  |  |   move.l d0,-(sp)
    fdec:	|  |  |   jsr 14026 <setVariable>
    fdf2:	|  |  |   lea 12(sp),sp
    fdf6:	|  +--|-- bra.s fe10 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    fdf8:	|  |  \-> moveq #28,d0
    fdfa:	|  |      add.l 20(sp),d0
    fdfe:	|  |      clr.l -(sp)
    fe00:	|  |      pea 1 <_start+0x1>
    fe04:	|  |      move.l d0,-(sp)
    fe06:	|  |      jsr 14026 <setVariable>
    fe0c:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    fe10:	|  \----> moveq #2,d0
}
    fe12:	\-------> lea 12(sp),sp
    fe16:	          rts

0000fe18 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    fe18:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fe1c:	          movea.l 20(sp),a0
    fe20:	          move.l 24(a0),d0
    fe24:	          move.l d0,-(sp)
    fe26:	          pea 7 <_start+0x7>
    fe2a:	          lea 8(sp),a0
    fe2e:	          move.l a0,-(sp)
    fe30:	          jsr 13734 <getValueType>
    fe36:	          lea 12(sp),sp
    fe3a:	          tst.w d0
    fe3c:	      /-- bne.s fe44 <builtIn_getObjectY+0x2c>
    fe3e:	      |   moveq #1,d0
    fe40:	/-----|-- bra.w fee2 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    fe44:	|     \-> moveq #24,d0
    fe46:	|         add.l 20(sp),d0
    fe4a:	|         move.l d0,-(sp)
    fe4c:	|         jsr 140b8 <trimStack>
    fe52:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    fe54:	|         move.l (sp),d0
    fe56:	|         move.l d0,-(sp)
    fe58:	|         jsr 9652 <findPerson>
    fe5e:	|         addq.l #4,sp
    fe60:	|         move.l d0,8(sp)
	if (pers) {
    fe64:	|     /-- beq.s fe94 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    fe66:	|     |   movea.l 8(sp),a0
    fe6a:	|     |   move.l 4(a0),d0
    fe6e:	|     |   move.l d0,-(sp)
    fe70:	|     |   jsr 15e76 <__fixsfsi>
    fe76:	|     |   addq.l #4,sp
    fe78:	|     |   move.l d0,d1
    fe7a:	|     |   moveq #28,d0
    fe7c:	|     |   add.l 20(sp),d0
    fe80:	|     |   move.l d1,-(sp)
    fe82:	|     |   pea 1 <_start+0x1>
    fe86:	|     |   move.l d0,-(sp)
    fe88:	|     |   jsr 14026 <setVariable>
    fe8e:	|     |   lea 12(sp),sp
    fe92:	|  /--|-- bra.s fee0 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    fe94:	|  |  \-> move.l (sp),d0
    fe96:	|  |      move.l d0,-(sp)
    fe98:	|  |      jsr 14448 <getRegionForObject>
    fe9e:	|  |      addq.l #4,sp
    fea0:	|  |      move.l d0,4(sp)
		if (la) {
    fea4:	|  |  /-- beq.s fec8 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    fea6:	|  |  |   movea.l 4(sp),a0
    feaa:	|  |  |   move.l 20(a0),d1
    feae:	|  |  |   moveq #28,d0
    feb0:	|  |  |   add.l 20(sp),d0
    feb4:	|  |  |   move.l d1,-(sp)
    feb6:	|  |  |   pea 1 <_start+0x1>
    feba:	|  |  |   move.l d0,-(sp)
    febc:	|  |  |   jsr 14026 <setVariable>
    fec2:	|  |  |   lea 12(sp),sp
    fec6:	|  +--|-- bra.s fee0 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    fec8:	|  |  \-> moveq #28,d0
    feca:	|  |      add.l 20(sp),d0
    fece:	|  |      clr.l -(sp)
    fed0:	|  |      pea 1 <_start+0x1>
    fed4:	|  |      move.l d0,-(sp)
    fed6:	|  |      jsr 14026 <setVariable>
    fedc:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    fee0:	|  \----> moveq #2,d0
}
    fee2:	\-------> lea 12(sp),sp
    fee6:	          rts

0000fee8 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    fee8:	       lea -32(sp),sp
    feec:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fef0:	       movea.l 56(sp),a0
    fef4:	       move.l 24(a0),d0
    fef8:	       move.l d0,-(sp)
    fefa:	       pea 1 <_start+0x1>
    fefe:	       lea 28(sp),a0
    ff02:	       move.l a0,-(sp)
    ff04:	       jsr 13734 <getValueType>
    ff0a:	       lea 12(sp),sp
    ff0e:	       tst.w d0
    ff10:	   /-- bne.s ff18 <builtIn_addScreenRegion+0x30>
    ff12:	   |   moveq #1,d0
    ff14:	/--|-- bra.w 100f2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ff18:	|  \-> moveq #24,d0
    ff1a:	|      add.l 56(sp),d0
    ff1e:	|      move.l d0,-(sp)
    ff20:	|      jsr 140b8 <trimStack>
    ff26:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff28:	|      movea.l 56(sp),a0
    ff2c:	|      move.l 24(a0),d0
    ff30:	|      move.l d0,-(sp)
    ff32:	|      pea 1 <_start+0x1>
    ff36:	|      moveq #48,d0
    ff38:	|      add.l sp,d0
    ff3a:	|      move.l d0,-(sp)
    ff3c:	|      jsr 13734 <getValueType>
    ff42:	|      lea 12(sp),sp
    ff46:	|      tst.w d0
    ff48:	|  /-- bne.s ff50 <builtIn_addScreenRegion+0x68>
    ff4a:	|  |   moveq #1,d0
    ff4c:	+--|-- bra.w 100f2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ff50:	|  \-> moveq #24,d0
    ff52:	|      add.l 56(sp),d0
    ff56:	|      move.l d0,-(sp)
    ff58:	|      jsr 140b8 <trimStack>
    ff5e:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff60:	|      movea.l 56(sp),a0
    ff64:	|      move.l 24(a0),d0
    ff68:	|      move.l d0,-(sp)
    ff6a:	|      pea 1 <_start+0x1>
    ff6e:	|      moveq #52,d0
    ff70:	|      add.l sp,d0
    ff72:	|      move.l d0,-(sp)
    ff74:	|      jsr 13734 <getValueType>
    ff7a:	|      lea 12(sp),sp
    ff7e:	|      tst.w d0
    ff80:	|  /-- bne.s ff88 <builtIn_addScreenRegion+0xa0>
    ff82:	|  |   moveq #1,d0
    ff84:	+--|-- bra.w 100f2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ff88:	|  \-> moveq #24,d0
    ff8a:	|      add.l 56(sp),d0
    ff8e:	|      move.l d0,-(sp)
    ff90:	|      jsr 140b8 <trimStack>
    ff96:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ff98:	|      movea.l 56(sp),a0
    ff9c:	|      move.l 24(a0),d0
    ffa0:	|      move.l d0,-(sp)
    ffa2:	|      pea 1 <_start+0x1>
    ffa6:	|      lea 32(sp),a0
    ffaa:	|      move.l a0,-(sp)
    ffac:	|      jsr 13734 <getValueType>
    ffb2:	|      lea 12(sp),sp
    ffb6:	|      tst.w d0
    ffb8:	|  /-- bne.s ffc0 <builtIn_addScreenRegion+0xd8>
    ffba:	|  |   moveq #1,d0
    ffbc:	+--|-- bra.w 100f2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    ffc0:	|  \-> moveq #24,d0
    ffc2:	|      add.l 56(sp),d0
    ffc6:	|      move.l d0,-(sp)
    ffc8:	|      jsr 140b8 <trimStack>
    ffce:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ffd0:	|      movea.l 56(sp),a0
    ffd4:	|      move.l 24(a0),d0
    ffd8:	|      move.l d0,-(sp)
    ffda:	|      pea 1 <_start+0x1>
    ffde:	|      lea 36(sp),a0
    ffe2:	|      move.l a0,-(sp)
    ffe4:	|      jsr 13734 <getValueType>
    ffea:	|      lea 12(sp),sp
    ffee:	|      tst.w d0
    fff0:	|  /-- bne.s fff8 <builtIn_addScreenRegion+0x110>
    fff2:	|  |   moveq #1,d0
    fff4:	+--|-- bra.w 100f2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    fff8:	|  \-> moveq #24,d0
    fffa:	|      add.l 56(sp),d0
    fffe:	|      move.l d0,-(sp)
   10000:	|      jsr 140b8 <trimStack>
   10006:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10008:	|      movea.l 56(sp),a0
   1000c:	|      move.l 24(a0),d0
   10010:	|      move.l d0,-(sp)
   10012:	|      pea 1 <_start+0x1>
   10016:	|      lea 40(sp),a0
   1001a:	|      move.l a0,-(sp)
   1001c:	|      jsr 13734 <getValueType>
   10022:	|      lea 12(sp),sp
   10026:	|      tst.w d0
   10028:	|  /-- bne.s 10030 <builtIn_addScreenRegion+0x148>
   1002a:	|  |   moveq #1,d0
   1002c:	+--|-- bra.w 100f2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10030:	|  \-> moveq #24,d0
   10032:	|      add.l 56(sp),d0
   10036:	|      move.l d0,-(sp)
   10038:	|      jsr 140b8 <trimStack>
   1003e:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10040:	|      movea.l 56(sp),a0
   10044:	|      move.l 24(a0),d0
   10048:	|      move.l d0,-(sp)
   1004a:	|      pea 1 <_start+0x1>
   1004e:	|      lea 44(sp),a0
   10052:	|      move.l a0,-(sp)
   10054:	|      jsr 13734 <getValueType>
   1005a:	|      lea 12(sp),sp
   1005e:	|      tst.w d0
   10060:	|  /-- bne.s 10068 <builtIn_addScreenRegion+0x180>
   10062:	|  |   moveq #1,d0
   10064:	+--|-- bra.w 100f2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10068:	|  \-> moveq #24,d0
   1006a:	|      add.l 56(sp),d0
   1006e:	|      move.l d0,-(sp)
   10070:	|      jsr 140b8 <trimStack>
   10076:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10078:	|      movea.l 56(sp),a0
   1007c:	|      move.l 24(a0),d0
   10080:	|      move.l d0,-(sp)
   10082:	|      pea 7 <_start+0x7>
   10086:	|      lea 24(sp),a0
   1008a:	|      move.l a0,-(sp)
   1008c:	|      jsr 13734 <getValueType>
   10092:	|      lea 12(sp),sp
   10096:	|      tst.w d0
   10098:	|  /-- bne.s 1009e <builtIn_addScreenRegion+0x1b6>
   1009a:	|  |   moveq #1,d0
   1009c:	+--|-- bra.s 100f2 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1009e:	|  \-> moveq #24,d0
   100a0:	|      add.l 56(sp),d0
   100a4:	|      move.l d0,-(sp)
   100a6:	|      jsr 140b8 <trimStack>
   100ac:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   100ae:	|      move.l 16(sp),d5
   100b2:	|      move.l 20(sp),d4
   100b6:	|      move.l 40(sp),d3
   100ba:	|      move.l 44(sp),d2
   100be:	|      movea.l 24(sp),a1
   100c2:	|      movea.l 28(sp),a0
   100c6:	|      move.l 32(sp),d1
   100ca:	|      move.l 36(sp),d0
   100ce:	|      move.l d5,-(sp)
   100d0:	|      move.l d4,-(sp)
   100d2:	|      move.l d3,-(sp)
   100d4:	|      move.l d2,-(sp)
   100d6:	|      move.l a1,-(sp)
   100d8:	|      move.l a0,-(sp)
   100da:	|      move.l d1,-(sp)
   100dc:	|      move.l d0,-(sp)
   100de:	|      jsr 14302 <addScreenRegion>
   100e4:	|      lea 32(sp),sp
   100e8:	|      tst.w d0
   100ea:	|  /-- beq.s 100f0 <builtIn_addScreenRegion+0x208>
   100ec:	|  |   moveq #2,d0
   100ee:	+--|-- bra.s 100f2 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   100f0:	|  \-> moveq #1,d0

}
   100f2:	\----> movem.l (sp)+,d2-d5
   100f6:	       lea 32(sp),sp
   100fa:	       rts

000100fc <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   100fc:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   100fe:	       movea.l 12(sp),a0
   10102:	       move.l 24(a0),d0
   10106:	       move.l d0,-(sp)
   10108:	       pea 7 <_start+0x7>
   1010c:	       move.l sp,d0
   1010e:	       addq.l #8,d0
   10110:	       move.l d0,-(sp)
   10112:	       jsr 13734 <getValueType>
   10118:	       lea 12(sp),sp
   1011c:	       tst.w d0
   1011e:	   /-- bne.s 10124 <builtIn_removeScreenRegion+0x28>
   10120:	   |   moveq #1,d0
   10122:	/--|-- bra.s 10142 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10124:	|  \-> moveq #24,d0
   10126:	|      add.l 12(sp),d0
   1012a:	|      move.l d0,-(sp)
   1012c:	|      jsr 140b8 <trimStack>
   10132:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   10134:	|      move.l (sp),d0
   10136:	|      move.l d0,-(sp)
   10138:	|      jsr 145f0 <removeScreenRegion>
   1013e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10140:	|      moveq #2,d0
}
   10142:	\----> addq.l #4,sp
   10144:	       rts

00010146 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   10146:	jsr 14774 <showBoxes>
	return BR_CONTINUE;
   1014c:	moveq #2,d0
}
   1014e:	rts

00010150 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   10150:	jsr 14476 <killAllRegions>
	return BR_CONTINUE;
   10156:	moveq #2,d0
}
   10158:	rts

0001015a <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1015a:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   1015e:	       movea.l 24(sp),a0
   10162:	       move.l 24(a0),d0
   10166:	       move.l d0,-(sp)
   10168:	       jsr 133e0 <getCostumeFromVar>
   1016e:	       addq.l #4,sp
   10170:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   10174:	   /-- bne.s 1017c <builtIn_addCharacter+0x22>
   10176:	   |   moveq #1,d0
   10178:	/--|-- bra.w 10258 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   1017c:	|  \-> moveq #24,d0
   1017e:	|      add.l 24(sp),d0
   10182:	|      move.l d0,-(sp)
   10184:	|      jsr 140b8 <trimStack>
   1018a:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1018c:	|      movea.l 24(sp),a0
   10190:	|      move.l 24(a0),d0
   10194:	|      move.l d0,-(sp)
   10196:	|      pea 1 <_start+0x1>
   1019a:	|      lea 12(sp),a0
   1019e:	|      move.l a0,-(sp)
   101a0:	|      jsr 13734 <getValueType>
   101a6:	|      lea 12(sp),sp
   101aa:	|      tst.w d0
   101ac:	|  /-- bne.s 101b4 <builtIn_addCharacter+0x5a>
   101ae:	|  |   moveq #1,d0
   101b0:	+--|-- bra.w 10258 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   101b4:	|  \-> moveq #24,d0
   101b6:	|      add.l 24(sp),d0
   101ba:	|      move.l d0,-(sp)
   101bc:	|      jsr 140b8 <trimStack>
   101c2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   101c4:	|      movea.l 24(sp),a0
   101c8:	|      move.l 24(a0),d0
   101cc:	|      move.l d0,-(sp)
   101ce:	|      pea 1 <_start+0x1>
   101d2:	|      moveq #16,d0
   101d4:	|      add.l sp,d0
   101d6:	|      move.l d0,-(sp)
   101d8:	|      jsr 13734 <getValueType>
   101de:	|      lea 12(sp),sp
   101e2:	|      tst.w d0
   101e4:	|  /-- bne.s 101ea <builtIn_addCharacter+0x90>
   101e6:	|  |   moveq #1,d0
   101e8:	+--|-- bra.s 10258 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   101ea:	|  \-> moveq #24,d0
   101ec:	|      add.l 24(sp),d0
   101f0:	|      move.l d0,-(sp)
   101f2:	|      jsr 140b8 <trimStack>
   101f8:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   101fa:	|      movea.l 24(sp),a0
   101fe:	|      move.l 24(a0),d0
   10202:	|      move.l d0,-(sp)
   10204:	|      pea 7 <_start+0x7>
   10208:	|      lea 8(sp),a0
   1020c:	|      move.l a0,-(sp)
   1020e:	|      jsr 13734 <getValueType>
   10214:	|      lea 12(sp),sp
   10218:	|      tst.w d0
   1021a:	|  /-- bne.s 10220 <builtIn_addCharacter+0xc6>
   1021c:	|  |   moveq #1,d0
   1021e:	+--|-- bra.s 10258 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10220:	|  \-> moveq #24,d0
   10222:	|      add.l 24(sp),d0
   10226:	|      move.l d0,-(sp)
   10228:	|      jsr 140b8 <trimStack>
   1022e:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   10230:	|      movea.l (sp),a0
   10232:	|      move.l 4(sp),d1
   10236:	|      move.l 8(sp),d0
   1023a:	|      move.l 12(sp),-(sp)
   1023e:	|      move.l a0,-(sp)
   10240:	|      move.l d1,-(sp)
   10242:	|      move.l d0,-(sp)
   10244:	|      jsr 824c <addPerson>
   1024a:	|      lea 16(sp),sp
   1024e:	|      tst.w d0
   10250:	|  /-- beq.s 10256 <builtIn_addCharacter+0xfc>
   10252:	|  |   moveq #2,d0
   10254:	+--|-- bra.s 10258 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   10256:	|  \-> moveq #1,d0
}
   10258:	\----> lea 16(sp),sp
   1025c:	       rts

0001025e <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   1025e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10260:	       movea.l 12(sp),a0
   10264:	       move.l 24(a0),d0
   10268:	       move.l d0,-(sp)
   1026a:	       pea 7 <_start+0x7>
   1026e:	       move.l sp,d0
   10270:	       addq.l #8,d0
   10272:	       move.l d0,-(sp)
   10274:	       jsr 13734 <getValueType>
   1027a:	       lea 12(sp),sp
   1027e:	       tst.w d0
   10280:	   /-- bne.s 10286 <builtIn_hideCharacter+0x28>
   10282:	   |   moveq #1,d0
   10284:	/--|-- bra.s 102a6 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   10286:	|  \-> moveq #24,d0
   10288:	|      add.l 12(sp),d0
   1028c:	|      move.l d0,-(sp)
   1028e:	|      jsr 140b8 <trimStack>
   10294:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   10296:	|      move.l (sp),d0
   10298:	|      move.l d0,-(sp)
   1029a:	|      clr.l -(sp)
   1029c:	|      jsr ac86 <setShown>
   102a2:	|      addq.l #8,sp
	return BR_CONTINUE;
   102a4:	|      moveq #2,d0
}
   102a6:	\----> addq.l #4,sp
   102a8:	       rts

000102aa <builtIn_showCharacter>:

builtIn(showCharacter)
{
   102aa:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   102ac:	       movea.l 12(sp),a0
   102b0:	       move.l 24(a0),d0
   102b4:	       move.l d0,-(sp)
   102b6:	       pea 7 <_start+0x7>
   102ba:	       move.l sp,d0
   102bc:	       addq.l #8,d0
   102be:	       move.l d0,-(sp)
   102c0:	       jsr 13734 <getValueType>
   102c6:	       lea 12(sp),sp
   102ca:	       tst.w d0
   102cc:	   /-- bne.s 102d2 <builtIn_showCharacter+0x28>
   102ce:	   |   moveq #1,d0
   102d0:	/--|-- bra.s 102f4 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   102d2:	|  \-> moveq #24,d0
   102d4:	|      add.l 12(sp),d0
   102d8:	|      move.l d0,-(sp)
   102da:	|      jsr 140b8 <trimStack>
   102e0:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   102e2:	|      move.l (sp),d0
   102e4:	|      move.l d0,-(sp)
   102e6:	|      pea 1 <_start+0x1>
   102ea:	|      jsr ac86 <setShown>
   102f0:	|      addq.l #8,sp
	return BR_CONTINUE;
   102f2:	|      moveq #2,d0
}
   102f4:	\----> addq.l #4,sp
   102f6:	       rts

000102f8 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   102f8:	jsr 512c <killSpeechTimers>
	killMostPeople ();
   102fe:	jsr 9abe <killMostPeople>
	return BR_CONTINUE;
   10304:	moveq #2,d0
}
   10306:	rts

00010308 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   10308:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1030a:	       movea.l 16(sp),a0
   1030e:	       move.l 24(a0),d0
   10312:	       move.l d0,-(sp)
   10314:	       pea 1 <_start+0x1>
   10318:	       move.l sp,d0
   1031a:	       addq.l #8,d0
   1031c:	       move.l d0,-(sp)
   1031e:	       jsr 13734 <getValueType>
   10324:	       lea 12(sp),sp
   10328:	       tst.w d0
   1032a:	   /-- bne.s 10330 <builtIn_setCharacterDrawMode+0x28>
   1032c:	   |   moveq #1,d0
   1032e:	/--|-- bra.s 1038a <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10330:	|  \-> moveq #24,d0
   10332:	|      add.l 16(sp),d0
   10336:	|      move.l d0,-(sp)
   10338:	|      jsr 140b8 <trimStack>
   1033e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10340:	|      movea.l 16(sp),a0
   10344:	|      move.l 24(a0),d0
   10348:	|      move.l d0,-(sp)
   1034a:	|      pea 7 <_start+0x7>
   1034e:	|      moveq #12,d0
   10350:	|      add.l sp,d0
   10352:	|      move.l d0,-(sp)
   10354:	|      jsr 13734 <getValueType>
   1035a:	|      lea 12(sp),sp
   1035e:	|      tst.w d0
   10360:	|  /-- bne.s 10366 <builtIn_setCharacterDrawMode+0x5e>
   10362:	|  |   moveq #1,d0
   10364:	+--|-- bra.s 1038a <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10366:	|  \-> moveq #24,d0
   10368:	|      add.l 16(sp),d0
   1036c:	|      move.l d0,-(sp)
   1036e:	|      jsr 140b8 <trimStack>
   10374:	|      addq.l #4,sp
	setDrawMode (di, obj);
   10376:	|      move.l 4(sp),d1
   1037a:	|      move.l (sp),d0
   1037c:	|      move.l d1,-(sp)
   1037e:	|      move.l d0,-(sp)
   10380:	|      jsr a5c4 <setDrawMode>
   10386:	|      addq.l #8,sp
	return BR_CONTINUE;
   10388:	|      moveq #2,d0
}
   1038a:	\----> addq.l #8,sp
   1038c:	       rts

0001038e <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   1038e:	pea 18324 <PutChar+0x1dae>
   10394:	jsr 15c26 <KPrintF>
   1039a:	addq.l #4,sp
	return BR_CONTINUE;
   1039c:	moveq #2,d0
}
   1039e:	rts

000103a0 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   103a0:	pea 18357 <PutChar+0x1de1>
   103a6:	jsr 15c26 <KPrintF>
   103ac:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   103ae:	moveq #2,d0
}
   103b0:	rts

000103b2 <builtIn_setScale>:

builtIn(setScale)
{
   103b2:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103b4:	       movea.l 16(sp),a0
   103b8:	       move.l 24(a0),d0
   103bc:	       move.l d0,-(sp)
   103be:	       pea 1 <_start+0x1>
   103c2:	       move.l sp,d0
   103c4:	       addq.l #8,d0
   103c6:	       move.l d0,-(sp)
   103c8:	       jsr 13734 <getValueType>
   103ce:	       lea 12(sp),sp
   103d2:	       tst.w d0
   103d4:	   /-- bne.s 103da <builtIn_setScale+0x28>
   103d6:	   |   moveq #1,d0
   103d8:	/--|-- bra.s 1043c <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   103da:	|  \-> moveq #24,d0
   103dc:	|      add.l 16(sp),d0
   103e0:	|      move.l d0,-(sp)
   103e2:	|      jsr 140b8 <trimStack>
   103e8:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103ea:	|      movea.l 16(sp),a0
   103ee:	|      move.l 24(a0),d0
   103f2:	|      move.l d0,-(sp)
   103f4:	|      pea 1 <_start+0x1>
   103f8:	|      moveq #12,d0
   103fa:	|      add.l sp,d0
   103fc:	|      move.l d0,-(sp)
   103fe:	|      jsr 13734 <getValueType>
   10404:	|      lea 12(sp),sp
   10408:	|      tst.w d0
   1040a:	|  /-- bne.s 10410 <builtIn_setScale+0x5e>
   1040c:	|  |   moveq #1,d0
   1040e:	+--|-- bra.s 1043c <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   10410:	|  \-> moveq #24,d0
   10412:	|      add.l 16(sp),d0
   10416:	|      move.l d0,-(sp)
   10418:	|      jsr 140b8 <trimStack>
   1041e:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   10420:	|      move.l (sp),d0
   10422:	|      move.l d0,d0
   10424:	|      movea.w d0,a1
   10426:	|      move.l 4(sp),d0
   1042a:	|      move.l d0,d0
   1042c:	|      movea.w d0,a0
   1042e:	|      move.l a1,-(sp)
   10430:	|      move.l a0,-(sp)
   10432:	|      jsr ac5e <setScale>
   10438:	|      addq.l #8,sp
	return BR_CONTINUE;
   1043a:	|      moveq #2,d0
}
   1043c:	\----> addq.l #8,sp
   1043e:	       rts

00010440 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   10440:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10442:	       movea.l 12(sp),a0
   10446:	       move.l 24(a0),d0
   1044a:	       move.l d0,-(sp)
   1044c:	       pea 7 <_start+0x7>
   10450:	       move.l sp,d0
   10452:	       addq.l #8,d0
   10454:	       move.l d0,-(sp)
   10456:	       jsr 13734 <getValueType>
   1045c:	       lea 12(sp),sp
   10460:	       tst.w d0
   10462:	   /-- bne.s 10468 <builtIn_stopCharacter+0x28>
   10464:	   |   moveq #1,d0
   10466:	/--|-- bra.s 104a0 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   10468:	|  \-> moveq #24,d0
   1046a:	|      add.l 12(sp),d0
   1046e:	|      move.l d0,-(sp)
   10470:	|      jsr 140b8 <trimStack>
   10476:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   10478:	|      move.l (sp),d0
   1047a:	|      move.l d0,-(sp)
   1047c:	|      jsr ad92 <stopPerson>
   10482:	|      addq.l #4,sp
   10484:	|      movea.w d0,a0
   10486:	|      moveq #28,d0
   10488:	|      add.l 12(sp),d0
   1048c:	|      move.l a0,-(sp)
   1048e:	|      pea 1 <_start+0x1>
   10492:	|      move.l d0,-(sp)
   10494:	|      jsr 14026 <setVariable>
   1049a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1049e:	|      moveq #2,d0
}
   104a0:	\----> addq.l #4,sp
   104a2:	       rts

000104a4 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   104a4:	pea 18391 <PutChar+0x1e1b>
   104aa:	jsr 15c26 <KPrintF>
   104b0:	addq.l #4,sp
	return BR_CONTINUE;
   104b2:	moveq #2,d0
}
   104b4:	rts

000104b6 <builtIn_animate>:

builtIn(animate)
{
   104b6:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   104b8:	       movea.l 16(sp),a0
   104bc:	       move.l 24(a0),d0
   104c0:	       move.l d0,-(sp)
   104c2:	       jsr 13c0c <getAnimationFromVar>
   104c8:	       addq.l #4,sp
   104ca:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   104ce:	   /-- bne.s 104d4 <builtIn_animate+0x1e>
   104d0:	   |   moveq #1,d0
   104d2:	/--|-- bra.s 10552 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   104d4:	|  \-> moveq #24,d0
   104d6:	|      add.l 16(sp),d0
   104da:	|      move.l d0,-(sp)
   104dc:	|      jsr 140b8 <trimStack>
   104e2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   104e4:	|      movea.l 16(sp),a0
   104e8:	|      move.l 24(a0),d0
   104ec:	|      move.l d0,-(sp)
   104ee:	|      pea 7 <_start+0x7>
   104f2:	|      move.l sp,d0
   104f4:	|      addq.l #8,d0
   104f6:	|      move.l d0,-(sp)
   104f8:	|      jsr 13734 <getValueType>
   104fe:	|      lea 12(sp),sp
   10502:	|      tst.w d0
   10504:	|  /-- bne.s 1050a <builtIn_animate+0x54>
   10506:	|  |   moveq #1,d0
   10508:	+--|-- bra.s 10552 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1050a:	|  \-> moveq #24,d0
   1050c:	|      add.l 16(sp),d0
   10510:	|      move.l d0,-(sp)
   10512:	|      jsr 140b8 <trimStack>
   10518:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1051a:	|      move.l (sp),d0
   1051c:	|      move.l 4(sp),-(sp)
   10520:	|      move.l d0,-(sp)
   10522:	|      jsr 84c2 <animatePerson>
   10528:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1052a:	|      move.l 4(sp),-(sp)
   1052e:	|      jsr ade6 <timeForAnim>
   10534:	|      addq.l #4,sp
   10536:	|      move.l d0,d1
   10538:	|      moveq #28,d0
   1053a:	|      add.l 16(sp),d0
   1053e:	|      move.l d1,-(sp)
   10540:	|      pea 1 <_start+0x1>
   10544:	|      move.l d0,-(sp)
   10546:	|      jsr 14026 <setVariable>
   1054c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10550:	|      moveq #2,d0
}
   10552:	\----> addq.l #8,sp
   10554:	       rts

00010556 <builtIn_setCostume>:

builtIn(setCostume)
{
   10556:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   10558:	       movea.l 16(sp),a0
   1055c:	       move.l 24(a0),d0
   10560:	       move.l d0,-(sp)
   10562:	       jsr 133e0 <getCostumeFromVar>
   10568:	       addq.l #4,sp
   1056a:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1056e:	   /-- bne.s 10574 <builtIn_setCostume+0x1e>
   10570:	   |   moveq #1,d0
   10572:	/--|-- bra.s 105cc <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   10574:	|  \-> moveq #24,d0
   10576:	|      add.l 16(sp),d0
   1057a:	|      move.l d0,-(sp)
   1057c:	|      jsr 140b8 <trimStack>
   10582:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10584:	|      movea.l 16(sp),a0
   10588:	|      move.l 24(a0),d0
   1058c:	|      move.l d0,-(sp)
   1058e:	|      pea 7 <_start+0x7>
   10592:	|      move.l sp,d0
   10594:	|      addq.l #8,d0
   10596:	|      move.l d0,-(sp)
   10598:	|      jsr 13734 <getValueType>
   1059e:	|      lea 12(sp),sp
   105a2:	|      tst.w d0
   105a4:	|  /-- bne.s 105aa <builtIn_setCostume+0x54>
   105a6:	|  |   moveq #1,d0
   105a8:	+--|-- bra.s 105cc <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   105aa:	|  \-> moveq #24,d0
   105ac:	|      add.l 16(sp),d0
   105b0:	|      move.l d0,-(sp)
   105b2:	|      jsr 140b8 <trimStack>
   105b8:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   105ba:	|      move.l (sp),d0
   105bc:	|      move.l 4(sp),-(sp)
   105c0:	|      move.l d0,-(sp)
   105c2:	|      jsr 850c <animatePersonUsingPersona>
   105c8:	|      addq.l #8,sp
	return BR_CONTINUE;
   105ca:	|      moveq #2,d0
}
   105cc:	\----> addq.l #8,sp
   105ce:	       rts

000105d0 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   105d0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105d2:	       movea.l 16(sp),a0
   105d6:	       move.l 24(a0),d0
   105da:	       move.l d0,-(sp)
   105dc:	       pea 1 <_start+0x1>
   105e0:	       move.l sp,d0
   105e2:	       addq.l #8,d0
   105e4:	       move.l d0,-(sp)
   105e6:	       jsr 13734 <getValueType>
   105ec:	       lea 12(sp),sp
   105f0:	       tst.w d0
   105f2:	   /-- bne.s 105f8 <builtIn_floatCharacter+0x28>
   105f4:	   |   moveq #1,d0
   105f6:	/--|-- bra.s 1066c <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   105f8:	|  \-> moveq #24,d0
   105fa:	|      add.l 16(sp),d0
   105fe:	|      move.l d0,-(sp)
   10600:	|      jsr 140b8 <trimStack>
   10606:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10608:	|      movea.l 16(sp),a0
   1060c:	|      move.l 24(a0),d0
   10610:	|      move.l d0,-(sp)
   10612:	|      pea 7 <_start+0x7>
   10616:	|      moveq #12,d0
   10618:	|      add.l sp,d0
   1061a:	|      move.l d0,-(sp)
   1061c:	|      jsr 13734 <getValueType>
   10622:	|      lea 12(sp),sp
   10626:	|      tst.w d0
   10628:	|  /-- bne.s 1062e <builtIn_floatCharacter+0x5e>
   1062a:	|  |   moveq #1,d0
   1062c:	+--|-- bra.s 1066c <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1062e:	|  \-> moveq #24,d0
   10630:	|      add.l 16(sp),d0
   10634:	|      move.l d0,-(sp)
   10636:	|      jsr 140b8 <trimStack>
   1063c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   1063e:	|      move.l 4(sp),d1
   10642:	|      move.l (sp),d0
   10644:	|      move.l d1,-(sp)
   10646:	|      move.l d0,-(sp)
   10648:	|      jsr 9680 <floatCharacter>
   1064e:	|      addq.l #8,sp
   10650:	|      movea.w d0,a0
   10652:	|      moveq #28,d0
   10654:	|      add.l 16(sp),d0
   10658:	|      move.l a0,-(sp)
   1065a:	|      pea 1 <_start+0x1>
   1065e:	|      move.l d0,-(sp)
   10660:	|      jsr 14026 <setVariable>
   10666:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1066a:	|      moveq #2,d0
}
   1066c:	\----> addq.l #8,sp
   1066e:	       rts

00010670 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   10670:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10672:	       movea.l 16(sp),a0
   10676:	       move.l 24(a0),d0
   1067a:	       move.l d0,-(sp)
   1067c:	       pea 1 <_start+0x1>
   10680:	       move.l sp,d0
   10682:	       addq.l #8,d0
   10684:	       move.l d0,-(sp)
   10686:	       jsr 13734 <getValueType>
   1068c:	       lea 12(sp),sp
   10690:	       tst.w d0
   10692:	   /-- bne.s 10698 <builtIn_setCharacterWalkSpeed+0x28>
   10694:	   |   moveq #1,d0
   10696:	/--|-- bra.s 1070c <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   10698:	|  \-> moveq #24,d0
   1069a:	|      add.l 16(sp),d0
   1069e:	|      move.l d0,-(sp)
   106a0:	|      jsr 140b8 <trimStack>
   106a6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   106a8:	|      movea.l 16(sp),a0
   106ac:	|      move.l 24(a0),d0
   106b0:	|      move.l d0,-(sp)
   106b2:	|      pea 7 <_start+0x7>
   106b6:	|      moveq #12,d0
   106b8:	|      add.l sp,d0
   106ba:	|      move.l d0,-(sp)
   106bc:	|      jsr 13734 <getValueType>
   106c2:	|      lea 12(sp),sp
   106c6:	|      tst.w d0
   106c8:	|  /-- bne.s 106ce <builtIn_setCharacterWalkSpeed+0x5e>
   106ca:	|  |   moveq #1,d0
   106cc:	+--|-- bra.s 1070c <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   106ce:	|  \-> moveq #24,d0
   106d0:	|      add.l 16(sp),d0
   106d4:	|      move.l d0,-(sp)
   106d6:	|      jsr 140b8 <trimStack>
   106dc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   106de:	|      move.l 4(sp),d1
   106e2:	|      move.l (sp),d0
   106e4:	|      move.l d1,-(sp)
   106e6:	|      move.l d0,-(sp)
   106e8:	|      jsr abfa <setCharacterWalkSpeed>
   106ee:	|      addq.l #8,sp
   106f0:	|      movea.w d0,a0
   106f2:	|      moveq #28,d0
   106f4:	|      add.l 16(sp),d0
   106f8:	|      move.l a0,-(sp)
   106fa:	|      pea 1 <_start+0x1>
   106fe:	|      move.l d0,-(sp)
   10700:	|      jsr 14026 <setVariable>
   10706:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1070a:	|      moveq #2,d0
}
   1070c:	\----> addq.l #8,sp
   1070e:	       rts

00010710 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   10710:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10712:	       movea.l 16(sp),a0
   10716:	       move.l 24(a0),d0
   1071a:	       move.l d0,-(sp)
   1071c:	       pea 1 <_start+0x1>
   10720:	       move.l sp,d0
   10722:	       addq.l #8,d0
   10724:	       move.l d0,-(sp)
   10726:	       jsr 13734 <getValueType>
   1072c:	       lea 12(sp),sp
   10730:	       tst.w d0
   10732:	   /-- bne.s 10738 <builtIn_turnCharacter+0x28>
   10734:	   |   moveq #1,d0
   10736:	/--|-- bra.s 107ac <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   10738:	|  \-> moveq #24,d0
   1073a:	|      add.l 16(sp),d0
   1073e:	|      move.l d0,-(sp)
   10740:	|      jsr 140b8 <trimStack>
   10746:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10748:	|      movea.l 16(sp),a0
   1074c:	|      move.l 24(a0),d0
   10750:	|      move.l d0,-(sp)
   10752:	|      pea 7 <_start+0x7>
   10756:	|      moveq #12,d0
   10758:	|      add.l sp,d0
   1075a:	|      move.l d0,-(sp)
   1075c:	|      jsr 13734 <getValueType>
   10762:	|      lea 12(sp),sp
   10766:	|      tst.w d0
   10768:	|  /-- bne.s 1076e <builtIn_turnCharacter+0x5e>
   1076a:	|  |   moveq #1,d0
   1076c:	+--|-- bra.s 107ac <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1076e:	|  \-> moveq #24,d0
   10770:	|      add.l 16(sp),d0
   10774:	|      move.l d0,-(sp)
   10776:	|      jsr 140b8 <trimStack>
   1077c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   1077e:	|      move.l (sp),d1
   10780:	|      move.l 4(sp),d0
   10784:	|      move.l d1,-(sp)
   10786:	|      move.l d0,-(sp)
   10788:	|      jsr ae9e <turnPersonToFace>
   1078e:	|      addq.l #8,sp
   10790:	|      movea.w d0,a0
   10792:	|      moveq #28,d0
   10794:	|      add.l 16(sp),d0
   10798:	|      move.l a0,-(sp)
   1079a:	|      pea 1 <_start+0x1>
   1079e:	|      move.l d0,-(sp)
   107a0:	|      jsr 14026 <setVariable>
   107a6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   107aa:	|      moveq #2,d0
}
   107ac:	\----> addq.l #8,sp
   107ae:	       rts

000107b0 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   107b0:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107b2:	       movea.l 16(sp),a0
   107b6:	       move.l 24(a0),d0
   107ba:	       move.l d0,-(sp)
   107bc:	       pea 1 <_start+0x1>
   107c0:	       move.l sp,d0
   107c2:	       addq.l #8,d0
   107c4:	       move.l d0,-(sp)
   107c6:	       jsr 13734 <getValueType>
   107cc:	       lea 12(sp),sp
   107d0:	       tst.w d0
   107d2:	   /-- bne.s 107d8 <builtIn_setCharacterExtra+0x28>
   107d4:	   |   moveq #1,d0
   107d6:	/--|-- bra.s 1084c <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   107d8:	|  \-> moveq #24,d0
   107da:	|      add.l 16(sp),d0
   107de:	|      move.l d0,-(sp)
   107e0:	|      jsr 140b8 <trimStack>
   107e6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   107e8:	|      movea.l 16(sp),a0
   107ec:	|      move.l 24(a0),d0
   107f0:	|      move.l d0,-(sp)
   107f2:	|      pea 7 <_start+0x7>
   107f6:	|      moveq #12,d0
   107f8:	|      add.l sp,d0
   107fa:	|      move.l d0,-(sp)
   107fc:	|      jsr 13734 <getValueType>
   10802:	|      lea 12(sp),sp
   10806:	|      tst.w d0
   10808:	|  /-- bne.s 1080e <builtIn_setCharacterExtra+0x5e>
   1080a:	|  |   moveq #1,d0
   1080c:	+--|-- bra.s 1084c <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1080e:	|  \-> moveq #24,d0
   10810:	|      add.l 16(sp),d0
   10814:	|      move.l d0,-(sp)
   10816:	|      jsr 140b8 <trimStack>
   1081c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   1081e:	|      move.l (sp),d1
   10820:	|      move.l 4(sp),d0
   10824:	|      move.l d1,-(sp)
   10826:	|      move.l d0,-(sp)
   10828:	|      jsr ac28 <setPersonExtra>
   1082e:	|      addq.l #8,sp
   10830:	|      movea.w d0,a0
   10832:	|      moveq #28,d0
   10834:	|      add.l 16(sp),d0
   10838:	|      move.l a0,-(sp)
   1083a:	|      pea 1 <_start+0x1>
   1083e:	|      move.l d0,-(sp)
   10840:	|      jsr 14026 <setVariable>
   10846:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1084a:	|      moveq #2,d0
}
   1084c:	\----> addq.l #8,sp
   1084e:	       rts

00010850 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   10850:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10852:	       movea.l 12(sp),a0
   10856:	       move.l 24(a0),d0
   1085a:	       move.l d0,-(sp)
   1085c:	       pea 7 <_start+0x7>
   10860:	       move.l sp,d0
   10862:	       addq.l #8,d0
   10864:	       move.l d0,-(sp)
   10866:	       jsr 13734 <getValueType>
   1086c:	       lea 12(sp),sp
   10870:	       tst.w d0
   10872:	   /-- bne.s 10878 <builtIn_removeCharacter+0x28>
   10874:	   |   moveq #1,d0
   10876:	/--|-- bra.s 10896 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   10878:	|  \-> moveq #24,d0
   1087a:	|      add.l 12(sp),d0
   1087e:	|      move.l d0,-(sp)
   10880:	|      jsr 140b8 <trimStack>
   10886:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   10888:	|      move.l (sp),d0
   1088a:	|      move.l d0,-(sp)
   1088c:	|      jsr 9e28 <removeOneCharacter>
   10892:	|      addq.l #4,sp
	return BR_CONTINUE;
   10894:	|      moveq #2,d0
}
   10896:	\----> addq.l #4,sp
   10898:	       rts

0001089a <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   1089a:	                lea -28(sp),sp
   1089e:	                move.l d2,-(sp)
   108a0:	                move.l 44(sp),d1
   108a4:	                move.l 48(sp),d0
   108a8:	                move.w d1,d1
   108aa:	                move.w d1,6(sp)
   108ae:	                move.w d0,d0
   108b0:	                move.w d0,4(sp)
	switch (numParams) {
   108b4:	                moveq #2,d0
   108b6:	                cmp.l 36(sp),d0
   108ba:	      /-------- beq.w 109fc <moveChr+0x162>
   108be:	      |         moveq #3,d0
   108c0:	      |         cmp.l 36(sp),d0
   108c4:	/-----|-------- bne.w 10b30 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108c8:	|     |         movea.l 40(sp),a0
   108cc:	|     |         move.l 24(a0),d0
   108d0:	|     |         move.l d0,-(sp)
   108d2:	|     |         pea 1 <_start+0x1>
   108d6:	|     |         lea 20(sp),a0
   108da:	|     |         move.l a0,-(sp)
   108dc:	|     |         jsr 13734 <getValueType>
   108e2:	|     |         lea 12(sp),sp
   108e6:	|     |         tst.w d0
   108e8:	|     |     /-- bne.s 108f0 <moveChr+0x56>
   108ea:	|     |     |   moveq #1,d0
   108ec:	|  /--|-----|-- bra.w 10b40 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   108f0:	|  |  |     \-> moveq #24,d0
   108f2:	|  |  |         add.l 40(sp),d0
   108f6:	|  |  |         move.l d0,-(sp)
   108f8:	|  |  |         jsr 140b8 <trimStack>
   108fe:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10900:	|  |  |         movea.l 40(sp),a0
   10904:	|  |  |         move.l 24(a0),d0
   10908:	|  |  |         move.l d0,-(sp)
   1090a:	|  |  |         pea 1 <_start+0x1>
   1090e:	|  |  |         lea 24(sp),a0
   10912:	|  |  |         move.l a0,-(sp)
   10914:	|  |  |         jsr 13734 <getValueType>
   1091a:	|  |  |         lea 12(sp),sp
   1091e:	|  |  |         tst.w d0
   10920:	|  |  |     /-- bne.s 10928 <moveChr+0x8e>
   10922:	|  |  |     |   moveq #1,d0
   10924:	|  +--|-----|-- bra.w 10b40 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10928:	|  |  |     \-> moveq #24,d0
   1092a:	|  |  |         add.l 40(sp),d0
   1092e:	|  |  |         move.l d0,-(sp)
   10930:	|  |  |         jsr 140b8 <trimStack>
   10936:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10938:	|  |  |         movea.l 40(sp),a0
   1093c:	|  |  |         move.l 24(a0),d0
   10940:	|  |  |         move.l d0,-(sp)
   10942:	|  |  |         pea 7 <_start+0x7>
   10946:	|  |  |         lea 16(sp),a0
   1094a:	|  |  |         move.l a0,-(sp)
   1094c:	|  |  |         jsr 13734 <getValueType>
   10952:	|  |  |         lea 12(sp),sp
   10956:	|  |  |         tst.w d0
   10958:	|  |  |     /-- bne.s 10960 <moveChr+0xc6>
   1095a:	|  |  |     |   moveq #1,d0
   1095c:	|  +--|-----|-- bra.w 10b40 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10960:	|  |  |     \-> moveq #24,d0
   10962:	|  |  |         add.l 40(sp),d0
   10966:	|  |  |         move.l d0,-(sp)
   10968:	|  |  |         jsr 140b8 <trimStack>
   1096e:	|  |  |         addq.l #4,sp

			if (force) {
   10970:	|  |  |         tst.w 6(sp)
   10974:	|  |  |     /-- beq.s 109a4 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   10976:	|  |  |     |   movea.l 8(sp),a0
   1097a:	|  |  |     |   move.l 12(sp),d1
   1097e:	|  |  |     |   move.l 16(sp),d0
   10982:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb66bc>
   10986:	|  |  |     |   move.l 44(sp),-(sp)
   1098a:	|  |  |     |   move.l a0,-(sp)
   1098c:	|  |  |     |   move.l d1,-(sp)
   1098e:	|  |  |     |   move.l d0,-(sp)
   10990:	|  |  |     |   jsr 96a4 <forceWalkingPerson>
   10996:	|  |  |     |   lea 20(sp),sp
   1099a:	|  |  |     |   tst.w d0
   1099c:	|  |  |  /--|-- beq.s 109f6 <moveChr+0x15c>
   1099e:	|  |  |  |  |   moveq #3,d0
   109a0:	|  +--|--|--|-- bra.w 10b40 <moveChr+0x2a6>
			} else if (immediate) {
   109a4:	|  |  |  |  \-> tst.w 4(sp)
   109a8:	|  |  |  |  /-- beq.s 109c8 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   109aa:	|  |  |  |  |   movea.l 8(sp),a0
   109ae:	|  |  |  |  |   move.l 12(sp),d1
   109b2:	|  |  |  |  |   move.l 16(sp),d0
   109b6:	|  |  |  |  |   move.l a0,-(sp)
   109b8:	|  |  |  |  |   move.l d1,-(sp)
   109ba:	|  |  |  |  |   move.l d0,-(sp)
   109bc:	|  |  |  |  |   jsr 99ac <jumpPerson>
   109c2:	|  |  |  |  |   lea 12(sp),sp
   109c6:	|  |  |  +--|-- bra.s 109f6 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   109c8:	|  |  |  |  \-> movea.l 8(sp),a0
   109cc:	|  |  |  |      move.l 12(sp),d1
   109d0:	|  |  |  |      move.l 16(sp),d0
   109d4:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb66bc>
   109d8:	|  |  |  |      move.l 44(sp),-(sp)
   109dc:	|  |  |  |      move.l a0,-(sp)
   109de:	|  |  |  |      move.l d1,-(sp)
   109e0:	|  |  |  |      move.l d0,-(sp)
   109e2:	|  |  |  |      jsr 9b7c <makeWalkingPerson>
   109e8:	|  |  |  |      lea 20(sp),sp
   109ec:	|  |  |  |      tst.w d0
   109ee:	|  |  |  +----- beq.s 109f6 <moveChr+0x15c>
   109f0:	|  |  |  |      moveq #3,d0
   109f2:	|  +--|--|----- bra.w 10b40 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   109f6:	|  |  |  \----> moveq #2,d0
   109f8:	|  +--|-------- bra.w 10b40 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   109fc:	|  |  \-------> movea.l 40(sp),a0
   10a00:	|  |            move.l 24(a0),d0
   10a04:	|  |            move.l d0,-(sp)
   10a06:	|  |            pea 7 <_start+0x7>
   10a0a:	|  |            moveq #32,d0
   10a0c:	|  |            add.l sp,d0
   10a0e:	|  |            move.l d0,-(sp)
   10a10:	|  |            jsr 13734 <getValueType>
   10a16:	|  |            lea 12(sp),sp
   10a1a:	|  |            tst.w d0
   10a1c:	|  |        /-- bne.s 10a24 <moveChr+0x18a>
   10a1e:	|  |        |   moveq #1,d0
   10a20:	|  +--------|-- bra.w 10b40 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10a24:	|  |        \-> moveq #24,d0
   10a26:	|  |            add.l 40(sp),d0
   10a2a:	|  |            move.l d0,-(sp)
   10a2c:	|  |            jsr 140b8 <trimStack>
   10a32:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a34:	|  |            movea.l 40(sp),a0
   10a38:	|  |            move.l 24(a0),d0
   10a3c:	|  |            move.l d0,-(sp)
   10a3e:	|  |            pea 7 <_start+0x7>
   10a42:	|  |            lea 28(sp),a0
   10a46:	|  |            move.l a0,-(sp)
   10a48:	|  |            jsr 13734 <getValueType>
   10a4e:	|  |            lea 12(sp),sp
   10a52:	|  |            tst.w d0
   10a54:	|  |        /-- bne.s 10a5c <moveChr+0x1c2>
   10a56:	|  |        |   moveq #1,d0
   10a58:	|  +--------|-- bra.w 10b40 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   10a5c:	|  |        \-> moveq #24,d0
   10a5e:	|  |            add.l 40(sp),d0
   10a62:	|  |            move.l d0,-(sp)
   10a64:	|  |            jsr 140b8 <trimStack>
   10a6a:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   10a6c:	|  |            move.l 24(sp),d0
   10a70:	|  |            move.l d0,-(sp)
   10a72:	|  |            jsr 14448 <getRegionForObject>
   10a78:	|  |            addq.l #4,sp
   10a7a:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   10a7e:	|  |        /-- bne.s 10a86 <moveChr+0x1ec>
   10a80:	|  |        |   moveq #2,d0
   10a82:	|  +--------|-- bra.w 10b40 <moveChr+0x2a6>

			if (force)
   10a86:	|  |        \-> tst.w 6(sp)
   10a8a:	|  |        /-- beq.s 10ac6 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10a8c:	|  |        |   movea.l 28(sp),a0
   10a90:	|  |        |   move.l 24(a0),d2
   10a94:	|  |        |   movea.l 20(sp),a1
   10a98:	|  |        |   movea.l 28(sp),a0
   10a9c:	|  |        |   move.l 20(a0),d1
   10aa0:	|  |        |   movea.l 28(sp),a0
   10aa4:	|  |        |   move.l 16(a0),d0
   10aa8:	|  |        |   move.l d2,-(sp)
   10aaa:	|  |        |   move.l 44(sp),-(sp)
   10aae:	|  |        |   move.l a1,-(sp)
   10ab0:	|  |        |   move.l d1,-(sp)
   10ab2:	|  |        |   move.l d0,-(sp)
   10ab4:	|  |        |   jsr 96a4 <forceWalkingPerson>
   10aba:	|  |        |   lea 20(sp),sp
   10abe:	|  |        |   tst.w d0
   10ac0:	|  |     /--|-- beq.s 10b2c <moveChr+0x292>
   10ac2:	|  |     |  |   moveq #3,d0
   10ac4:	|  +-----|--|-- bra.s 10b40 <moveChr+0x2a6>
			}
			else if (immediate)
   10ac6:	|  |     |  \-> tst.w 4(sp)
   10aca:	|  |     |  /-- beq.s 10af2 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   10acc:	|  |     |  |   movea.l 20(sp),a1
   10ad0:	|  |     |  |   movea.l 28(sp),a0
   10ad4:	|  |     |  |   move.l 20(a0),d1
   10ad8:	|  |     |  |   movea.l 28(sp),a0
   10adc:	|  |     |  |   move.l 16(a0),d0
   10ae0:	|  |     |  |   move.l a1,-(sp)
   10ae2:	|  |     |  |   move.l d1,-(sp)
   10ae4:	|  |     |  |   move.l d0,-(sp)
   10ae6:	|  |     |  |   jsr 99ac <jumpPerson>
   10aec:	|  |     |  |   lea 12(sp),sp
   10af0:	|  |     +--|-- bra.s 10b2c <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   10af2:	|  |     |  \-> movea.l 28(sp),a0
   10af6:	|  |     |      move.l 24(a0),d2
   10afa:	|  |     |      movea.l 20(sp),a1
   10afe:	|  |     |      movea.l 28(sp),a0
   10b02:	|  |     |      move.l 20(a0),d1
   10b06:	|  |     |      movea.l 28(sp),a0
   10b0a:	|  |     |      move.l 16(a0),d0
   10b0e:	|  |     |      move.l d2,-(sp)
   10b10:	|  |     |      move.l 44(sp),-(sp)
   10b14:	|  |     |      move.l a1,-(sp)
   10b16:	|  |     |      move.l d1,-(sp)
   10b18:	|  |     |      move.l d0,-(sp)
   10b1a:	|  |     |      jsr 9b7c <makeWalkingPerson>
   10b20:	|  |     |      lea 20(sp),sp
   10b24:	|  |     |      tst.w d0
   10b26:	|  |     +----- beq.s 10b2c <moveChr+0x292>
   10b28:	|  |     |      moveq #3,d0
   10b2a:	|  +-----|----- bra.s 10b40 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   10b2c:	|  |     \----> moveq #2,d0
   10b2e:	|  +----------- bra.s 10b40 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   10b30:	\--|----------> pea 183af <PutChar+0x1e39>
   10b36:	   |            jsr 15c26 <KPrintF>
   10b3c:	   |            addq.l #4,sp
			return BR_ERROR;
   10b3e:	   |            moveq #1,d0
	}
}
   10b40:	   \----------> move.l (sp)+,d2
   10b42:	                lea 28(sp),sp
   10b46:	                rts

00010b48 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   10b48:	clr.l -(sp)
   10b4a:	clr.l -(sp)
   10b4c:	move.l 16(sp),-(sp)
   10b50:	move.l 16(sp),-(sp)
   10b54:	jsr 1089a <moveChr>
   10b5a:	lea 16(sp),sp
}
   10b5e:	rts

00010b60 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   10b60:	clr.l -(sp)
   10b62:	pea 1 <_start+0x1>
   10b66:	move.l 16(sp),-(sp)
   10b6a:	move.l 16(sp),-(sp)
   10b6e:	jsr 1089a <moveChr>
   10b74:	lea 16(sp),sp
}
   10b78:	rts

00010b7a <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   10b7a:	pea 1 <_start+0x1>
   10b7e:	clr.l -(sp)
   10b80:	move.l 16(sp),-(sp)
   10b84:	move.l 16(sp),-(sp)
   10b88:	jsr 1089a <moveChr>
   10b8e:	lea 16(sp),sp
}
   10b92:	rts

00010b94 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   10b94:	jsr 67e6 <clearStatusBar>
	return BR_CONTINUE;
   10b9a:	moveq #2,d0
}
   10b9c:	rts

00010b9e <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   10b9e:	jsr 688e <killLastStatus>
	return BR_CONTINUE;
   10ba4:	moveq #2,d0
}
   10ba6:	rts

00010ba8 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   10ba8:	jsr 677c <addStatusBar>
	return BR_CONTINUE;
   10bae:	moveq #2,d0
}
   10bb0:	rts

00010bb2 <builtIn_statusText>:

builtIn(statusText)
{
   10bb2:	       subq.l #8,sp
   10bb4:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10bb6:	       movea.l 20(sp),a0
   10bba:	       move.l 24(a0),d0
   10bbe:	       move.l d0,-(sp)
   10bc0:	       jsr 13d0a <getTextFromAnyVar>
   10bc6:	       addq.l #4,sp
   10bc8:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   10bcc:	   /-- bne.s 10bd2 <builtIn_statusText+0x20>
   10bce:	   |   moveq #1,d0
   10bd0:	/--|-- bra.s 10c06 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   10bd2:	|  \-> moveq #24,d0
   10bd4:	|      add.l 20(sp),d0
   10bd8:	|      move.l d0,-(sp)
   10bda:	|      jsr 140b8 <trimStack>
   10be0:	|      addq.l #4,sp
	setStatusBar(newText);
   10be2:	|      move.l 8(sp),-(sp)
   10be6:	|      jsr 6b0e <setStatusBar>
   10bec:	|      addq.l #4,sp
	FreeVec(newText);
   10bee:	|      move.l 8(sp),4(sp)
   10bf4:	|      move.l 1b1d8 <SysBase>,d0
   10bfa:	|      movea.l d0,a6
   10bfc:	|      movea.l 4(sp),a1
   10c00:	|      jsr -690(a6)
	return BR_CONTINUE;
   10c04:	|      moveq #2,d0
}
   10c06:	\----> movea.l (sp)+,a6
   10c08:	       addq.l #8,sp
   10c0a:	       rts

00010c0c <builtIn_lightStatus>:

builtIn(lightStatus)
{
   10c0c:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c0e:	       movea.l 12(sp),a0
   10c12:	       move.l 24(a0),d0
   10c16:	       move.l d0,-(sp)
   10c18:	       pea 1 <_start+0x1>
   10c1c:	       move.l sp,d0
   10c1e:	       addq.l #8,d0
   10c20:	       move.l d0,-(sp)
   10c22:	       jsr 13734 <getValueType>
   10c28:	       lea 12(sp),sp
   10c2c:	       tst.w d0
   10c2e:	   /-- bne.s 10c34 <builtIn_lightStatus+0x28>
   10c30:	   |   moveq #1,d0
   10c32:	/--|-- bra.s 10c52 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   10c34:	|  \-> moveq #24,d0
   10c36:	|      add.l 12(sp),d0
   10c3a:	|      move.l d0,-(sp)
   10c3c:	|      jsr 140b8 <trimStack>
   10c42:	|      addq.l #4,sp
	setLitStatus (val);
   10c44:	|      move.l (sp),d0
   10c46:	|      move.l d0,-(sp)
   10c48:	|      jsr 6afe <setLitStatus>
   10c4e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10c50:	|      moveq #2,d0
}
   10c52:	\----> addq.l #4,sp
   10c54:	       rts

00010c56 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   10c56:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c58:	       movea.l 16(sp),a0
   10c5c:	       move.l 24(a0),d0
   10c60:	       move.l d0,-(sp)
   10c62:	       pea 1 <_start+0x1>
   10c66:	       move.l sp,d0
   10c68:	       addq.l #8,d0
   10c6a:	       move.l d0,-(sp)
   10c6c:	       jsr 13734 <getValueType>
   10c72:	       lea 12(sp),sp
   10c76:	       tst.w d0
   10c78:	   /-- bne.s 10c7e <builtIn_positionStatus+0x28>
   10c7a:	   |   moveq #1,d0
   10c7c:	/--|-- bra.s 10cd8 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10c7e:	|  \-> moveq #24,d0
   10c80:	|      add.l 16(sp),d0
   10c84:	|      move.l d0,-(sp)
   10c86:	|      jsr 140b8 <trimStack>
   10c8c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c8e:	|      movea.l 16(sp),a0
   10c92:	|      move.l 24(a0),d0
   10c96:	|      move.l d0,-(sp)
   10c98:	|      pea 1 <_start+0x1>
   10c9c:	|      moveq #12,d0
   10c9e:	|      add.l sp,d0
   10ca0:	|      move.l d0,-(sp)
   10ca2:	|      jsr 13734 <getValueType>
   10ca8:	|      lea 12(sp),sp
   10cac:	|      tst.w d0
   10cae:	|  /-- bne.s 10cb4 <builtIn_positionStatus+0x5e>
   10cb0:	|  |   moveq #1,d0
   10cb2:	+--|-- bra.s 10cd8 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   10cb4:	|  \-> moveq #24,d0
   10cb6:	|      add.l 16(sp),d0
   10cba:	|      move.l d0,-(sp)
   10cbc:	|      jsr 140b8 <trimStack>
   10cc2:	|      addq.l #4,sp
	positionStatus (x, y);
   10cc4:	|      move.l (sp),d1
   10cc6:	|      move.l 4(sp),d0
   10cca:	|      move.l d1,-(sp)
   10ccc:	|      move.l d0,-(sp)
   10cce:	|      jsr 68f0 <positionStatus>
   10cd4:	|      addq.l #8,sp
	return BR_CONTINUE;
   10cd6:	|      moveq #2,d0
}
   10cd8:	\----> addq.l #8,sp
   10cda:	       rts

00010cdc <builtIn_alignStatus>:

builtIn(alignStatus)
{
   10cdc:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10cde:	       movea.l 12(sp),a0
   10ce2:	       move.l 24(a0),d0
   10ce6:	       move.l d0,-(sp)
   10ce8:	       pea 1 <_start+0x1>
   10cec:	       move.l sp,d0
   10cee:	       addq.l #8,d0
   10cf0:	       move.l d0,-(sp)
   10cf2:	       jsr 13734 <getValueType>
   10cf8:	       lea 12(sp),sp
   10cfc:	       tst.w d0
   10cfe:	   /-- bne.s 10d04 <builtIn_alignStatus+0x28>
   10d00:	   |   moveq #1,d0
   10d02:	/--|-- bra.s 10d24 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   10d04:	|  \-> moveq #24,d0
   10d06:	|      add.l 12(sp),d0
   10d0a:	|      move.l d0,-(sp)
   10d0c:	|      jsr 140b8 <trimStack>
   10d12:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   10d14:	|      move.l (sp),d0
   10d16:	|      movea.l 1ab60 <nowStatus>,a0
   10d1c:	|      move.l d0,d0
   10d1e:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   10d22:	|      moveq #2,d0
}
   10d24:	\----> addq.l #4,sp
   10d26:	       rts

00010d28 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   10d28:	             tst.l 4(sp)
   10d2c:	      /----- beq.s 10d38 <getFuncNumForCallback+0x10>
   10d2e:	      |      moveq #1,d0
   10d30:	      |      cmp.l 4(sp),d0
   10d34:	      |  /-- beq.s 10d3e <getFuncNumForCallback+0x16>
   10d36:	   /--|--|-- bra.s 10d74 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   10d38:	   |  \--|-> clr.l 12(sp)
			break;
   10d3c:	/--|-----|-- bra.s 10d86 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   10d3e:	|  |     \-> movea.l 8(sp),a0
   10d42:	|  |         move.l 24(a0),d0
   10d46:	|  |         move.l d0,-(sp)
   10d48:	|  |         pea 2 <_start+0x2>
   10d4c:	|  |         move.l 20(sp),-(sp)
   10d50:	|  |         jsr 13734 <getValueType>
   10d56:	|  |         lea 12(sp),sp
   10d5a:	|  |         tst.w d0
   10d5c:	|  |     /-- bne.s 10d62 <getFuncNumForCallback+0x3a>
   10d5e:	|  |     |   clr.w d0
   10d60:	|  |  /--|-- bra.s 10d88 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   10d62:	|  |  |  \-> moveq #24,d0
   10d64:	|  |  |      add.l 8(sp),d0
   10d68:	|  |  |      move.l d0,-(sp)
   10d6a:	|  |  |      jsr 140b8 <trimStack>
   10d70:	|  |  |      addq.l #4,sp
			break;
   10d72:	+--|--|----- bra.s 10d86 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   10d74:	|  \--|----> pea 183e5 <PutChar+0x1e6f>
   10d7a:	|     |      jsr 15c26 <KPrintF>
   10d80:	|     |      addq.l #4,sp
			return FALSE;
   10d82:	|     |      clr.w d0
   10d84:	|     +----- bra.s 10d88 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   10d86:	\-----|----> moveq #1,d0
}
   10d88:	      \----> rts

00010d8a <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   10d8a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10d8c:	       move.l sp,d0
   10d8e:	       move.l d0,-(sp)
   10d90:	       move.l 16(sp),-(sp)
   10d94:	       move.l 16(sp),-(sp)
   10d98:	       jsr 10d28 <getFuncNumForCallback>
   10d9e:	       lea 12(sp),sp
   10da2:	       tst.w d0
   10da4:	/----- beq.s 10db4 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   10da6:	|      movea.l 1ab52 <currentEvents>,a0
   10dac:	|      move.l (sp),d0
   10dae:	|      move.l d0,(a0)
		return BR_CONTINUE;
   10db0:	|      moveq #2,d0
   10db2:	|  /-- bra.s 10db6 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   10db4:	\--|-> moveq #1,d0
}
   10db6:	   \-> addq.l #4,sp
   10db8:	       rts

00010dba <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   10dba:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10dbc:	       move.l sp,d0
   10dbe:	       move.l d0,-(sp)
   10dc0:	       move.l 16(sp),-(sp)
   10dc4:	       move.l 16(sp),-(sp)
   10dc8:	       jsr 10d28 <getFuncNumForCallback>
   10dce:	       lea 12(sp),sp
   10dd2:	       tst.w d0
   10dd4:	/----- beq.s 10de6 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   10dd6:	|      movea.l 1ab52 <currentEvents>,a0
   10ddc:	|      move.l (sp),d0
   10dde:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   10de2:	|      moveq #2,d0
   10de4:	|  /-- bra.s 10de8 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   10de6:	\--|-> moveq #1,d0
}
   10de8:	   \-> addq.l #4,sp
   10dea:	       rts

00010dec <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   10dec:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10dee:	       move.l sp,d0
   10df0:	       move.l d0,-(sp)
   10df2:	       move.l 16(sp),-(sp)
   10df6:	       move.l 16(sp),-(sp)
   10dfa:	       jsr 10d28 <getFuncNumForCallback>
   10e00:	       lea 12(sp),sp
   10e04:	       tst.w d0
   10e06:	/----- beq.s 10e18 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   10e08:	|      movea.l 1ab52 <currentEvents>,a0
   10e0e:	|      move.l (sp),d0
   10e10:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   10e14:	|      moveq #2,d0
   10e16:	|  /-- bra.s 10e1a <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   10e18:	\--|-> moveq #1,d0
}
   10e1a:	   \-> addq.l #4,sp
   10e1c:	       rts

00010e1e <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   10e1e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10e20:	       move.l sp,d0
   10e22:	       move.l d0,-(sp)
   10e24:	       move.l 16(sp),-(sp)
   10e28:	       move.l 16(sp),-(sp)
   10e2c:	       jsr 10d28 <getFuncNumForCallback>
   10e32:	       lea 12(sp),sp
   10e36:	       tst.w d0
   10e38:	/----- beq.s 10e4a <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   10e3a:	|      movea.l 1ab52 <currentEvents>,a0
   10e40:	|      move.l (sp),d0
   10e42:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   10e46:	|      moveq #2,d0
   10e48:	|  /-- bra.s 10e4c <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   10e4a:	\--|-> moveq #1,d0
}
   10e4c:	   \-> addq.l #4,sp
   10e4e:	       rts

00010e50 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   10e50:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10e52:	       move.l sp,d0
   10e54:	       move.l d0,-(sp)
   10e56:	       move.l 16(sp),-(sp)
   10e5a:	       move.l 16(sp),-(sp)
   10e5e:	       jsr 10d28 <getFuncNumForCallback>
   10e64:	       lea 12(sp),sp
   10e68:	       tst.w d0
   10e6a:	/----- beq.s 10e7c <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   10e6c:	|      movea.l 1ab52 <currentEvents>,a0
   10e72:	|      move.l (sp),d0
   10e74:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   10e78:	|      moveq #2,d0
   10e7a:	|  /-- bra.s 10e7e <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   10e7c:	\--|-> moveq #1,d0
}
   10e7e:	   \-> addq.l #4,sp
   10e80:	       rts

00010e82 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   10e82:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10e84:	       move.l sp,d0
   10e86:	       move.l d0,-(sp)
   10e88:	       move.l 16(sp),-(sp)
   10e8c:	       move.l 16(sp),-(sp)
   10e90:	       jsr 10d28 <getFuncNumForCallback>
   10e96:	       lea 12(sp),sp
   10e9a:	       tst.w d0
   10e9c:	/----- beq.s 10eae <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   10e9e:	|      movea.l 1ab52 <currentEvents>,a0
   10ea4:	|      move.l (sp),d0
   10ea6:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   10eaa:	|      moveq #2,d0
   10eac:	|  /-- bra.s 10eb0 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   10eae:	\--|-> moveq #1,d0
}
   10eb0:	   \-> addq.l #4,sp
   10eb2:	       rts

00010eb4 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   10eb4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10eb6:	       move.l sp,d0
   10eb8:	       move.l d0,-(sp)
   10eba:	       move.l 16(sp),-(sp)
   10ebe:	       move.l 16(sp),-(sp)
   10ec2:	       jsr 10d28 <getFuncNumForCallback>
   10ec8:	       lea 12(sp),sp
   10ecc:	       tst.w d0
   10ece:	/----- beq.s 10ee0 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   10ed0:	|      movea.l 1ab52 <currentEvents>,a0
   10ed6:	|      move.l (sp),d0
   10ed8:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   10edc:	|      moveq #2,d0
   10ede:	|  /-- bra.s 10ee2 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   10ee0:	\--|-> moveq #1,d0
}
   10ee2:	   \-> addq.l #4,sp
   10ee4:	       rts

00010ee6 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   10ee6:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10ee8:	          move.l sp,d0
   10eea:	          move.l d0,-(sp)
   10eec:	          move.l 16(sp),-(sp)
   10ef0:	          move.l 16(sp),-(sp)
   10ef4:	          jsr 10d28 <getFuncNumForCallback>
   10efa:	          lea 12(sp),sp
   10efe:	          tst.w d0
   10f00:	/-------- beq.s 10f2c <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   10f02:	|         move.l 1b1a8 <noStack>,d1
   10f08:	|         move.l (sp),d0
   10f0a:	|         pea 1 <_start+0x1>
   10f0e:	|         move.l d1,-(sp)
   10f10:	|         clr.l -(sp)
   10f12:	|         clr.l -(sp)
   10f14:	|         move.l d0,-(sp)
   10f16:	|         jsr 5a00 <startNewFunctionNum>
   10f1c:	|         lea 20(sp),sp
   10f20:	|         tst.l d0
   10f22:	|     /-- bne.s 10f28 <builtIn_spawnSub+0x42>
   10f24:	|     |   moveq #1,d0
   10f26:	|  /--|-- bra.s 10f2e <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   10f28:	|  |  \-> moveq #2,d0
   10f2a:	|  +----- bra.s 10f2e <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   10f2c:	\--|----> moveq #1,d0
}
   10f2e:	   \----> addq.l #4,sp
   10f30:	          rts

00010f32 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   10f32:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   10f34:	          move.l sp,d0
   10f36:	          addq.l #4,d0
   10f38:	          move.l d0,-(sp)
   10f3a:	          move.l 20(sp),-(sp)
   10f3e:	          move.l 20(sp),-(sp)
   10f42:	          jsr 10d28 <getFuncNumForCallback>
   10f48:	          lea 12(sp),sp
   10f4c:	          tst.w d0
   10f4e:	/-------- beq.s 10f84 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   10f50:	|         move.l 4(sp),d1
   10f54:	|         move.l sp,d0
   10f56:	|         addq.l #2,d0
   10f58:	|         move.l d0,-(sp)
   10f5a:	|         move.l 20(sp),-(sp)
   10f5e:	|         move.l d1,-(sp)
   10f60:	|         jsr 3726 <cancelAFunction>
   10f66:	|         lea 12(sp),sp
		if (killedMyself) {
   10f6a:	|         move.w 2(sp),d0
   10f6e:	|  /----- beq.s 10f80 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   10f70:	|  |      move.l 16(sp),-(sp)
   10f74:	|  |      jsr 3644 <abortFunction>
   10f7a:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   10f7c:	|  |      moveq #5,d0
   10f7e:	|  |  /-- bra.s 10f86 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   10f80:	|  \--|-> moveq #2,d0
   10f82:	|     +-- bra.s 10f86 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   10f84:	\-----|-> moveq #1,d0
}
   10f86:	      \-> addq.l #8,sp
   10f88:	          rts

00010f8a <builtIn_stringWidth>:

builtIn(stringWidth)
{
   10f8a:	       subq.l #8,sp
   10f8c:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   10f8e:	       movea.l 20(sp),a0
   10f92:	       move.l 24(a0),d0
   10f96:	       move.l d0,-(sp)
   10f98:	       jsr 13d0a <getTextFromAnyVar>
   10f9e:	       addq.l #4,sp
   10fa0:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   10fa4:	   /-- bne.s 10faa <builtIn_stringWidth+0x20>
   10fa6:	   |   moveq #1,d0
   10fa8:	/--|-- bra.s 10ff8 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   10faa:	|  \-> moveq #24,d0
   10fac:	|      add.l 20(sp),d0
   10fb0:	|      move.l d0,-(sp)
   10fb2:	|      jsr 140b8 <trimStack>
   10fb8:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   10fba:	|      move.l 8(sp),-(sp)
   10fbe:	|      jsr 142d6 <stringWidth>
   10fc4:	|      addq.l #4,sp
   10fc6:	|      move.l d0,d1
   10fc8:	|      moveq #28,d0
   10fca:	|      add.l 20(sp),d0
   10fce:	|      move.l d1,-(sp)
   10fd0:	|      pea 1 <_start+0x1>
   10fd4:	|      move.l d0,-(sp)
   10fd6:	|      jsr 14026 <setVariable>
   10fdc:	|      lea 12(sp),sp
	FreeVec(theText);
   10fe0:	|      move.l 8(sp),4(sp)
   10fe6:	|      move.l 1b1d8 <SysBase>,d0
   10fec:	|      movea.l d0,a6
   10fee:	|      movea.l 4(sp),a1
   10ff2:	|      jsr -690(a6)
	return BR_CONTINUE;
   10ff6:	|      moveq #2,d0
}
   10ff8:	\----> movea.l (sp)+,a6
   10ffa:	       addq.l #8,sp
   10ffc:	       rts

00010ffe <builtIn_hardScroll>:

builtIn(hardScroll)
{
   10ffe:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11000:	       movea.l 12(sp),a0
   11004:	       move.l 24(a0),d0
   11008:	       move.l d0,-(sp)
   1100a:	       pea 1 <_start+0x1>
   1100e:	       move.l sp,d0
   11010:	       addq.l #8,d0
   11012:	       move.l d0,-(sp)
   11014:	       jsr 13734 <getValueType>
   1101a:	       lea 12(sp),sp
   1101e:	       tst.w d0
   11020:	   /-- bne.s 11026 <builtIn_hardScroll+0x28>
   11022:	   |   moveq #1,d0
   11024:	/--|-- bra.s 11044 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11026:	|  \-> moveq #24,d0
   11028:	|      add.l 12(sp),d0
   1102c:	|      move.l d0,-(sp)
   1102e:	|      jsr 140b8 <trimStack>
   11034:	|      addq.l #4,sp
	hardScroll (v);
   11036:	|      move.l (sp),d0
   11038:	|      move.l d0,-(sp)
   1103a:	|      jsr c27e <hardScroll>
   11040:	|      addq.l #4,sp
	return BR_CONTINUE;
   11042:	|      moveq #2,d0
}
   11044:	\----> addq.l #4,sp
   11046:	       rts

00011048 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11048:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1104a:	       movea.l 12(sp),a0
   1104e:	       move.l 24(a0),d0
   11052:	       move.l d0,-(sp)
   11054:	       pea 7 <_start+0x7>
   11058:	       move.l sp,d0
   1105a:	       addq.l #8,d0
   1105c:	       move.l d0,-(sp)
   1105e:	       jsr 13734 <getValueType>
   11064:	       lea 12(sp),sp
   11068:	       tst.w d0
   1106a:	   /-- bne.s 11070 <builtIn_isScreenRegion+0x28>
   1106c:	   |   moveq #1,d0
   1106e:	/--|-- bra.s 110b0 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11070:	|  \-> moveq #24,d0
   11072:	|      add.l 12(sp),d0
   11076:	|      move.l d0,-(sp)
   11078:	|      jsr 140b8 <trimStack>
   1107e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   11080:	|      move.l (sp),d0
   11082:	|      move.l d0,-(sp)
   11084:	|      jsr 14448 <getRegionForObject>
   1108a:	|      addq.l #4,sp
   1108c:	|      tst.l d0
   1108e:	|      sne d0
   11090:	|      neg.b d0
   11092:	|      moveq #0,d1
   11094:	|      move.b d0,d1
   11096:	|      moveq #28,d0
   11098:	|      add.l 12(sp),d0
   1109c:	|      move.l d1,-(sp)
   1109e:	|      pea 1 <_start+0x1>
   110a2:	|      move.l d0,-(sp)
   110a4:	|      jsr 14026 <setVariable>
   110aa:	|      lea 12(sp),sp
	return BR_CONTINUE;
   110ae:	|      moveq #2,d0
}
   110b0:	\----> addq.l #4,sp
   110b2:	       rts

000110b4 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   110b4:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110b6:	       movea.l 12(sp),a0
   110ba:	       move.l 24(a0),d0
   110be:	       move.l d0,-(sp)
   110c0:	       pea 1 <_start+0x1>
   110c4:	       move.l sp,d0
   110c6:	       addq.l #8,d0
   110c8:	       move.l d0,-(sp)
   110ca:	       jsr 13734 <getValueType>
   110d0:	       lea 12(sp),sp
   110d4:	       tst.w d0
   110d6:	   /-- bne.s 110dc <builtIn_setSpeechSpeed+0x28>
   110d8:	   |   moveq #1,d0
   110da:	/--|-- bra.s 1112a <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   110dc:	|  \-> moveq #24,d0
   110de:	|      add.l 12(sp),d0
   110e2:	|      move.l d0,-(sp)
   110e4:	|      jsr 140b8 <trimStack>
   110ea:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   110ec:	|      move.l (sp),d0
   110ee:	|      move.l d0,-(sp)
   110f0:	|      jsr 15ede <__floatsisf>
   110f6:	|      addq.l #4,sp
   110f8:	|      move.l #1008981770,-(sp)
   110fe:	|      move.l d0,-(sp)
   11100:	|      jsr 15f90 <__mulsf3>
   11106:	|      addq.l #8,sp
   11108:	|      move.l d0,1ab64 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   1110e:	|      moveq #28,d0
   11110:	|      add.l 12(sp),d0
   11114:	|      pea 1 <_start+0x1>
   11118:	|      pea 1 <_start+0x1>
   1111c:	|      move.l d0,-(sp)
   1111e:	|      jsr 14026 <setVariable>
   11124:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11128:	|      moveq #2,d0
}
   1112a:	\----> addq.l #4,sp
   1112c:	       rts

0001112e <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   1112e:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11130:	       movea.l 12(sp),a0
   11134:	       move.l 24(a0),d0
   11138:	       move.l d0,-(sp)
   1113a:	       pea 1 <_start+0x1>
   1113e:	       move.l sp,d0
   11140:	       addq.l #8,d0
   11142:	       move.l d0,-(sp)
   11144:	       jsr 13734 <getValueType>
   1114a:	       lea 12(sp),sp
   1114e:	       tst.w d0
   11150:	   /-- bne.s 11156 <builtIn_setFontSpacing+0x28>
   11152:	   |   moveq #1,d0
   11154:	/--|-- bra.s 1118c <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   11156:	|  \-> move.l (sp),d0
   11158:	|      move.l d0,d0
   1115a:	|      move.w d0,1b0de <fontSpace>
	trimStack (&fun -> stack);
   11160:	|      moveq #24,d0
   11162:	|      add.l 12(sp),d0
   11166:	|      move.l d0,-(sp)
   11168:	|      jsr 140b8 <trimStack>
   1116e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11170:	|      moveq #28,d0
   11172:	|      add.l 12(sp),d0
   11176:	|      pea 1 <_start+0x1>
   1117a:	|      pea 1 <_start+0x1>
   1117e:	|      move.l d0,-(sp)
   11180:	|      jsr 14026 <setVariable>
   11186:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1118a:	|      moveq #2,d0
}
   1118c:	\----> addq.l #4,sp
   1118e:	       rts

00011190 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   11190:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11192:	          movea.l 12(sp),a0
   11196:	          move.l 24(a0),d0
   1119a:	          move.l d0,-(sp)
   1119c:	          pea 1 <_start+0x1>
   111a0:	          move.l sp,d0
   111a2:	          addq.l #8,d0
   111a4:	          move.l d0,-(sp)
   111a6:	          jsr 13734 <getValueType>
   111ac:	          lea 12(sp),sp
   111b0:	          tst.w d0
   111b2:	      /-- bne.s 111b8 <builtIn_transitionLevel+0x28>
   111b4:	      |   moveq #1,d0
   111b6:	/-----|-- bra.s 1120c <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   111b8:	|     \-> moveq #24,d0
   111ba:	|         add.l 12(sp),d0
   111be:	|         move.l d0,-(sp)
   111c0:	|         jsr 140b8 <trimStack>
   111c6:	|         addq.l #4,sp

	if (number < 0)
   111c8:	|         move.l (sp),d0
   111ca:	|     /-- bpl.s 111d4 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   111cc:	|     |   clr.b 1ab50 <brightnessLevel>
   111d2:	|  /--|-- bra.s 111f0 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   111d4:	|  |  \-> move.l (sp),d0
   111d6:	|  |      cmpi.l #255,d0
   111dc:	|  |  /-- ble.s 111e6 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   111de:	|  |  |   st 1ab50 <brightnessLevel>
   111e4:	|  +--|-- bra.s 111f0 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   111e6:	|  |  \-> move.l (sp),d0
   111e8:	|  |      move.l d0,d0
   111ea:	|  |      move.b d0,1ab50 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   111f0:	|  \----> moveq #28,d0
   111f2:	|         add.l 12(sp),d0
   111f6:	|         pea 1 <_start+0x1>
   111fa:	|         pea 1 <_start+0x1>
   111fe:	|         move.l d0,-(sp)
   11200:	|         jsr 14026 <setVariable>
   11206:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1120a:	|         moveq #2,d0
}
   1120c:	\-------> addq.l #4,sp
   1120e:	          rts

00011210 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   11210:	movea.l 8(sp),a0
   11214:	move.l 24(a0),d0
   11218:	move.l d0,-(sp)
   1121a:	jsr 13c74 <getBoolean>
   11220:	addq.l #4,sp
   11222:	move.w d0,1b178 <captureAllKeys>
	trimStack (&fun -> stack);
   11228:	moveq #24,d0
   1122a:	add.l 8(sp),d0
   1122e:	move.l d0,-(sp)
   11230:	jsr 140b8 <trimStack>
   11236:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   11238:	move.w 1b178 <captureAllKeys>,d0
   1123e:	movea.w d0,a0
   11240:	moveq #28,d0
   11242:	add.l 8(sp),d0
   11246:	move.l a0,-(sp)
   11248:	pea 1 <_start+0x1>
   1124c:	move.l d0,-(sp)
   1124e:	jsr 14026 <setVariable>
   11254:	lea 12(sp),sp
	return BR_CONTINUE;
   11258:	moveq #2,d0
}
   1125a:	rts

0001125c <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   1125c:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11260:	       movea.l 20(sp),a0
   11264:	       move.l 24(a0),d0
   11268:	       move.l d0,-(sp)
   1126a:	       pea 1 <_start+0x1>
   1126e:	       moveq #12,d0
   11270:	       add.l sp,d0
   11272:	       move.l d0,-(sp)
   11274:	       jsr 13734 <getValueType>
   1127a:	       lea 12(sp),sp
   1127e:	       tst.w d0
   11280:	   /-- bne.s 11288 <builtIn_spinCharacter+0x2c>
   11282:	   |   moveq #1,d0
   11284:	/--|-- bra.w 11338 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   11288:	|  \-> moveq #24,d0
   1128a:	|      add.l 20(sp),d0
   1128e:	|      move.l d0,-(sp)
   11290:	|      jsr 140b8 <trimStack>
   11296:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11298:	|      movea.l 20(sp),a0
   1129c:	|      move.l 24(a0),d0
   112a0:	|      move.l d0,-(sp)
   112a2:	|      pea 7 <_start+0x7>
   112a6:	|      lea 8(sp),a0
   112aa:	|      move.l a0,-(sp)
   112ac:	|      jsr 13734 <getValueType>
   112b2:	|      lea 12(sp),sp
   112b6:	|      tst.w d0
   112b8:	|  /-- bne.s 112be <builtIn_spinCharacter+0x62>
   112ba:	|  |   moveq #1,d0
   112bc:	+--|-- bra.s 11338 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   112be:	|  \-> moveq #24,d0
   112c0:	|      add.l 20(sp),d0
   112c4:	|      move.l d0,-(sp)
   112c6:	|      jsr 140b8 <trimStack>
   112cc:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   112ce:	|      move.l (sp),d0
   112d0:	|      move.l d0,-(sp)
   112d2:	|      jsr 9652 <findPerson>
   112d8:	|      addq.l #4,sp
   112da:	|      move.l d0,8(sp)
	if (thisPerson) {
   112de:	|  /-- beq.s 1131e <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   112e0:	|  |   move.l 4(sp),d0
   112e4:	|  |   movea.l 8(sp),a0
   112e8:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   112ec:	|  |   movea.l 8(sp),a0
   112f0:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   112f6:	|  |   movea.l 8(sp),a0
   112fa:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11300:	|  |   moveq #28,d0
   11302:	|  |   add.l 20(sp),d0
   11306:	|  |   pea 1 <_start+0x1>
   1130a:	|  |   pea 1 <_start+0x1>
   1130e:	|  |   move.l d0,-(sp)
   11310:	|  |   jsr 14026 <setVariable>
   11316:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1131a:	|  |   moveq #3,d0
   1131c:	+--|-- bra.s 11338 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1131e:	|  \-> moveq #28,d0
   11320:	|      add.l 20(sp),d0
   11324:	|      clr.l -(sp)
   11326:	|      pea 1 <_start+0x1>
   1132a:	|      move.l d0,-(sp)
   1132c:	|      jsr 14026 <setVariable>
   11332:	|      lea 12(sp),sp
		return BR_CONTINUE;
   11336:	|      moveq #2,d0
	}
}
   11338:	\----> lea 12(sp),sp
   1133c:	       rts

0001133e <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   1133e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11340:	          movea.l 16(sp),a0
   11344:	          move.l 24(a0),d0
   11348:	          move.l d0,-(sp)
   1134a:	          pea 7 <_start+0x7>
   1134e:	          move.l sp,d0
   11350:	          addq.l #8,d0
   11352:	          move.l d0,-(sp)
   11354:	          jsr 13734 <getValueType>
   1135a:	          lea 12(sp),sp
   1135e:	          tst.w d0
   11360:	      /-- bne.s 11366 <builtIn_getCharacterDirection+0x28>
   11362:	      |   moveq #1,d0
   11364:	/-----|-- bra.s 113c4 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   11366:	|     \-> moveq #24,d0
   11368:	|         add.l 16(sp),d0
   1136c:	|         move.l d0,-(sp)
   1136e:	|         jsr 140b8 <trimStack>
   11374:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11376:	|         move.l (sp),d0
   11378:	|         move.l d0,-(sp)
   1137a:	|         jsr 9652 <findPerson>
   11380:	|         addq.l #4,sp
   11382:	|         move.l d0,4(sp)
	if (thisPerson) {
   11386:	|  /----- beq.s 113aa <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   11388:	|  |      movea.l 4(sp),a0
   1138c:	|  |      move.l 106(a0),d1
   11390:	|  |      moveq #28,d0
   11392:	|  |      add.l 16(sp),d0
   11396:	|  |      move.l d1,-(sp)
   11398:	|  |      pea 1 <_start+0x1>
   1139c:	|  |      move.l d0,-(sp)
   1139e:	|  |      jsr 14026 <setVariable>
   113a4:	|  |      lea 12(sp),sp
   113a8:	|  |  /-- bra.s 113c2 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   113aa:	|  \--|-> moveq #28,d0
   113ac:	|     |   add.l 16(sp),d0
   113b0:	|     |   clr.l -(sp)
   113b2:	|     |   pea 1 <_start+0x1>
   113b6:	|     |   move.l d0,-(sp)
   113b8:	|     |   jsr 14026 <setVariable>
   113be:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   113c2:	|     \-> moveq #2,d0
}
   113c4:	\-------> addq.l #8,sp
   113c6:	          rts

000113c8 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   113c8:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113ca:	       movea.l 16(sp),a0
   113ce:	       move.l 24(a0),d0
   113d2:	       move.l d0,-(sp)
   113d4:	       pea 7 <_start+0x7>
   113d8:	       move.l sp,d0
   113da:	       addq.l #8,d0
   113dc:	       move.l d0,-(sp)
   113de:	       jsr 13734 <getValueType>
   113e4:	       lea 12(sp),sp
   113e8:	       tst.w d0
   113ea:	   /-- bne.s 113f0 <builtIn_isCharacter+0x28>
   113ec:	   |   moveq #1,d0
   113ee:	/--|-- bra.s 11432 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   113f0:	|  \-> moveq #24,d0
   113f2:	|      add.l 16(sp),d0
   113f6:	|      move.l d0,-(sp)
   113f8:	|      jsr 140b8 <trimStack>
   113fe:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11400:	|      move.l (sp),d0
   11402:	|      move.l d0,-(sp)
   11404:	|      jsr 9652 <findPerson>
   1140a:	|      addq.l #4,sp
   1140c:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   11410:	|      sne d0
   11412:	|      neg.b d0
   11414:	|      moveq #0,d1
   11416:	|      move.b d0,d1
   11418:	|      moveq #28,d0
   1141a:	|      add.l 16(sp),d0
   1141e:	|      move.l d1,-(sp)
   11420:	|      pea 1 <_start+0x1>
   11424:	|      move.l d0,-(sp)
   11426:	|      jsr 14026 <setVariable>
   1142c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11430:	|      moveq #2,d0
}
   11432:	\----> addq.l #8,sp
   11434:	       rts

00011436 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   11436:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11438:	          movea.l 16(sp),a0
   1143c:	          move.l 24(a0),d0
   11440:	          move.l d0,-(sp)
   11442:	          pea 7 <_start+0x7>
   11446:	          move.l sp,d0
   11448:	          addq.l #8,d0
   1144a:	          move.l d0,-(sp)
   1144c:	          jsr 13734 <getValueType>
   11452:	          lea 12(sp),sp
   11456:	          tst.w d0
   11458:	      /-- bne.s 1145e <builtIn_normalCharacter+0x28>
   1145a:	      |   moveq #1,d0
   1145c:	/-----|-- bra.s 114da <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   1145e:	|     \-> moveq #24,d0
   11460:	|         add.l 16(sp),d0
   11464:	|         move.l d0,-(sp)
   11466:	|         jsr 140b8 <trimStack>
   1146c:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1146e:	|         move.l (sp),d0
   11470:	|         move.l d0,-(sp)
   11472:	|         jsr 9652 <findPerson>
   11478:	|         addq.l #4,sp
   1147a:	|         move.l d0,4(sp)
	if (thisPerson)
   1147e:	|  /----- beq.s 114c0 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   11480:	|  |      movea.l 4(sp),a0
   11484:	|  |      movea.l 80(a0),a0
   11488:	|  |      move.l (a0),d1
   1148a:	|  |      movea.l 4(sp),a0
   1148e:	|  |      move.l 106(a0),d0
   11492:	|  |      add.l d0,d0
   11494:	|  |      add.l d0,d0
   11496:	|  |      movea.l d1,a0
   11498:	|  |      adda.l d0,a0
   1149a:	|  |      move.l (a0),d0
   1149c:	|  |      movea.l 4(sp),a0
   114a0:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   114a4:	|  |      moveq #28,d0
   114a6:	|  |      add.l 16(sp),d0
   114aa:	|  |      pea 1 <_start+0x1>
   114ae:	|  |      pea 1 <_start+0x1>
   114b2:	|  |      move.l d0,-(sp)
   114b4:	|  |      jsr 14026 <setVariable>
   114ba:	|  |      lea 12(sp),sp
   114be:	|  |  /-- bra.s 114d8 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   114c0:	|  \--|-> moveq #28,d0
   114c2:	|     |   add.l 16(sp),d0
   114c6:	|     |   clr.l -(sp)
   114c8:	|     |   pea 1 <_start+0x1>
   114cc:	|     |   move.l d0,-(sp)
   114ce:	|     |   jsr 14026 <setVariable>
   114d4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   114d8:	|     \-> moveq #2,d0
}
   114da:	\-------> addq.l #8,sp
   114dc:	          rts

000114de <builtIn_isMoving>:

builtIn(isMoving)
{
   114de:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114e0:	          movea.l 16(sp),a0
   114e4:	          move.l 24(a0),d0
   114e8:	          move.l d0,-(sp)
   114ea:	          pea 7 <_start+0x7>
   114ee:	          move.l sp,d0
   114f0:	          addq.l #8,d0
   114f2:	          move.l d0,-(sp)
   114f4:	          jsr 13734 <getValueType>
   114fa:	          lea 12(sp),sp
   114fe:	          tst.w d0
   11500:	      /-- bne.s 11506 <builtIn_isMoving+0x28>
   11502:	      |   moveq #1,d0
   11504:	/-----|-- bra.s 11566 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   11506:	|     \-> moveq #24,d0
   11508:	|         add.l 16(sp),d0
   1150c:	|         move.l d0,-(sp)
   1150e:	|         jsr 140b8 <trimStack>
   11514:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11516:	|         move.l (sp),d0
   11518:	|         move.l d0,-(sp)
   1151a:	|         jsr 9652 <findPerson>
   11520:	|         addq.l #4,sp
   11522:	|         move.l d0,4(sp)
	if (thisPerson)
   11526:	|  /----- beq.s 1154c <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   11528:	|  |      movea.l 4(sp),a0
   1152c:	|  |      move.w 64(a0),d0
   11530:	|  |      movea.w d0,a0
   11532:	|  |      moveq #28,d0
   11534:	|  |      add.l 16(sp),d0
   11538:	|  |      move.l a0,-(sp)
   1153a:	|  |      pea 1 <_start+0x1>
   1153e:	|  |      move.l d0,-(sp)
   11540:	|  |      jsr 14026 <setVariable>
   11546:	|  |      lea 12(sp),sp
   1154a:	|  |  /-- bra.s 11564 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1154c:	|  \--|-> moveq #28,d0
   1154e:	|     |   add.l 16(sp),d0
   11552:	|     |   clr.l -(sp)
   11554:	|     |   pea 1 <_start+0x1>
   11558:	|     |   move.l d0,-(sp)
   1155a:	|     |   jsr 14026 <setVariable>
   11560:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11564:	|     \-> moveq #2,d0
}
   11566:	\-------> addq.l #8,sp
   11568:	          rts

0001156a <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   1156a:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1156e:	          movea.l 20(sp),a0
   11572:	          move.l 24(a0),d0
   11576:	          move.l d0,-(sp)
   11578:	          pea 7 <_start+0x7>
   1157c:	          lea 8(sp),a0
   11580:	          move.l a0,-(sp)
   11582:	          jsr 13734 <getValueType>
   11588:	          lea 12(sp),sp
   1158c:	          tst.w d0
   1158e:	      /-- bne.s 11596 <builtIn_fetchEvent+0x2c>
   11590:	      |   moveq #1,d0
   11592:	/-----|-- bra.w 1162a <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   11596:	|     \-> moveq #24,d0
   11598:	|         add.l 20(sp),d0
   1159c:	|         move.l d0,-(sp)
   1159e:	|         jsr 140b8 <trimStack>
   115a4:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115a6:	|         movea.l 20(sp),a0
   115aa:	|         move.l 24(a0),d0
   115ae:	|         move.l d0,-(sp)
   115b0:	|         pea 7 <_start+0x7>
   115b4:	|         moveq #12,d0
   115b6:	|         add.l sp,d0
   115b8:	|         move.l d0,-(sp)
   115ba:	|         jsr 13734 <getValueType>
   115c0:	|         lea 12(sp),sp
   115c4:	|         tst.w d0
   115c6:	|     /-- bne.s 115cc <builtIn_fetchEvent+0x62>
   115c8:	|     |   moveq #1,d0
   115ca:	+-----|-- bra.s 1162a <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   115cc:	|     \-> moveq #24,d0
   115ce:	|         add.l 20(sp),d0
   115d2:	|         move.l d0,-(sp)
   115d4:	|         jsr 140b8 <trimStack>
   115da:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   115dc:	|         move.l (sp),d1
   115de:	|         move.l 4(sp),d0
   115e2:	|         move.l d1,-(sp)
   115e4:	|         move.l d0,-(sp)
   115e6:	|         jsr c560 <getCombinationFunction>
   115ec:	|         addq.l #8,sp
   115ee:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   115f2:	|  /----- beq.s 11610 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   115f4:	|  |      moveq #28,d0
   115f6:	|  |      add.l 20(sp),d0
   115fa:	|  |      move.l 8(sp),-(sp)
   115fe:	|  |      pea 2 <_start+0x2>
   11602:	|  |      move.l d0,-(sp)
   11604:	|  |      jsr 14026 <setVariable>
   1160a:	|  |      lea 12(sp),sp
   1160e:	|  |  /-- bra.s 11628 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11610:	|  \--|-> moveq #28,d0
   11612:	|     |   add.l 20(sp),d0
   11616:	|     |   clr.l -(sp)
   11618:	|     |   pea 1 <_start+0x1>
   1161c:	|     |   move.l d0,-(sp)
   1161e:	|     |   jsr 14026 <setVariable>
   11624:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11628:	|     \-> moveq #2,d0
}
   1162a:	\-------> lea 12(sp),sp
   1162e:	          rts

00011630 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   11630:	       lea -24(sp),sp
   11634:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   11636:	       movea.l 36(sp),a0
   1163a:	       move.l 24(a0),d0
   1163e:	       move.l d0,-(sp)
   11640:	       jsr 13d0a <getTextFromAnyVar>
   11646:	       addq.l #4,sp
   11648:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   1164c:	       moveq #24,d0
   1164e:	       add.l 36(sp),d0
   11652:	       move.l d0,-(sp)
   11654:	       jsr 140b8 <trimStack>
   1165a:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   1165c:	       move.l 24(sp),-(sp)
   11660:	       jsr 2fe <encodeFilename>
   11666:	       addq.l #4,sp
   11668:	       move.l d0,20(sp)
    FreeVec(namNormal);
   1166c:	       move.l 24(sp),16(sp)
   11672:	       move.l 1b1d8 <SysBase>,d0
   11678:	       movea.l d0,a6
   1167a:	       movea.l 16(sp),a1
   1167e:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   11682:	       move.l 20(sp),-(sp)
   11686:	       jsr d318 <failSecurityCheck>
   1168c:	       addq.l #4,sp
   1168e:	       tst.w d0
   11690:	   /-- beq.s 11696 <builtIn_deleteFile+0x66>
   11692:	   |   moveq #1,d0
   11694:	/--|-- bra.s 116e4 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   11696:	|  \-> move.l 20(sp),12(sp)
   1169c:	|      move.l 1b1e0 <DOSBase>,d0
   116a2:	|      movea.l d0,a6
   116a4:	|      move.l 12(sp),d1
   116a8:	|      jsr -72(a6)
   116ac:	|      move.l d0,8(sp)
   116b0:	|      move.l 8(sp),d1
   116b4:	|      moveq #28,d0
   116b6:	|      add.l 36(sp),d0
   116ba:	|      move.l d1,-(sp)
   116bc:	|      pea 1 <_start+0x1>
   116c0:	|      move.l d0,-(sp)
   116c2:	|      jsr 14026 <setVariable>
   116c8:	|      lea 12(sp),sp
    FreeVec(nam);
   116cc:	|      move.l 20(sp),4(sp)
   116d2:	|      move.l 1b1d8 <SysBase>,d0
   116d8:	|      movea.l d0,a6
   116da:	|      movea.l 4(sp),a1
   116de:	|      jsr -690(a6)

    return BR_CONTINUE;
   116e2:	|      moveq #2,d0
}
   116e4:	\----> movea.l (sp)+,a6
   116e6:	       lea 24(sp),sp
   116ea:	       rts

000116ec <builtIn_renameFile>:

builtIn(renameFile)
{
   116ec:	       lea -40(sp),sp
   116f0:	       move.l a6,-(sp)
   116f2:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   116f4:	       movea.l 56(sp),a0
   116f8:	       move.l 24(a0),d0
   116fc:	       move.l d0,-(sp)
   116fe:	       jsr 13d0a <getTextFromAnyVar>
   11704:	       addq.l #4,sp
   11706:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   1170a:	       move.l 44(sp),-(sp)
   1170e:	       jsr 2fe <encodeFilename>
   11714:	       addq.l #4,sp
   11716:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   1171a:	       moveq #24,d0
   1171c:	       add.l 56(sp),d0
   11720:	       move.l d0,-(sp)
   11722:	       jsr 140b8 <trimStack>
   11728:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   1172a:	       move.l 40(sp),-(sp)
   1172e:	       jsr d318 <failSecurityCheck>
   11734:	       addq.l #4,sp
   11736:	       tst.w d0
   11738:	   /-- beq.s 11740 <builtIn_renameFile+0x54>
   1173a:	   |   moveq #1,d0
   1173c:	/--|-- bra.w 11826 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   11740:	|  \-> move.l 44(sp),36(sp)
   11746:	|      move.l 1b1d8 <SysBase>,d0
   1174c:	|      movea.l d0,a6
   1174e:	|      movea.l 36(sp),a1
   11752:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   11756:	|      movea.l 56(sp),a0
   1175a:	|      move.l 24(a0),d0
   1175e:	|      move.l d0,-(sp)
   11760:	|      jsr 13d0a <getTextFromAnyVar>
   11766:	|      addq.l #4,sp
   11768:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   1176c:	|      move.l 44(sp),-(sp)
   11770:	|      jsr 2fe <encodeFilename>
   11776:	|      addq.l #4,sp
   11778:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   1177c:	|      moveq #24,d0
   1177e:	|      add.l 56(sp),d0
   11782:	|      move.l d0,-(sp)
   11784:	|      jsr 140b8 <trimStack>
   1178a:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   1178c:	|      move.l 32(sp),-(sp)
   11790:	|      jsr d318 <failSecurityCheck>
   11796:	|      addq.l #4,sp
   11798:	|      tst.w d0
   1179a:	|  /-- beq.s 117a2 <builtIn_renameFile+0xb6>
   1179c:	|  |   moveq #1,d0
   1179e:	+--|-- bra.w 11826 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   117a2:	|  \-> move.l 44(sp),28(sp)
   117a8:	|      move.l 1b1d8 <SysBase>,d0
   117ae:	|      movea.l d0,a6
   117b0:	|      movea.l 28(sp),a1
   117b4:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   117b8:	|      move.l 32(sp),24(sp)
   117be:	|      move.l 40(sp),20(sp)
   117c4:	|      move.l 1b1e0 <DOSBase>,d0
   117ca:	|      movea.l d0,a6
   117cc:	|      move.l 24(sp),d1
   117d0:	|      move.l 20(sp),d2
   117d4:	|      jsr -78(a6)
   117d8:	|      move.l d0,16(sp)
   117dc:	|      move.l 16(sp),d1
   117e0:	|      moveq #28,d0
   117e2:	|      add.l 56(sp),d0
   117e6:	|      move.l d1,-(sp)
   117e8:	|      pea 1 <_start+0x1>
   117ec:	|      move.l d0,-(sp)
   117ee:	|      jsr 14026 <setVariable>
   117f4:	|      lea 12(sp),sp
	FreeVec(nam);
   117f8:	|      move.l 32(sp),12(sp)
   117fe:	|      move.l 1b1d8 <SysBase>,d0
   11804:	|      movea.l d0,a6
   11806:	|      movea.l 12(sp),a1
   1180a:	|      jsr -690(a6)
	FreeVec(newnam);
   1180e:	|      move.l 40(sp),8(sp)
   11814:	|      move.l 1b1d8 <SysBase>,d0
   1181a:	|      movea.l d0,a6
   1181c:	|      movea.l 8(sp),a1
   11820:	|      jsr -690(a6)

	return BR_CONTINUE;
   11824:	|      moveq #2,d0
}
   11826:	\----> move.l (sp)+,d2
   11828:	       movea.l (sp)+,a6
   1182a:	       lea 40(sp),sp
   1182e:	       rts

00011830 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   11830:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11832:	       movea.l 12(sp),a0
   11836:	       move.l 24(a0),d0
   1183a:	       move.l d0,-(sp)
   1183c:	       pea 5 <_start+0x5>
   11840:	       move.l sp,d0
   11842:	       addq.l #8,d0
   11844:	       move.l d0,-(sp)
   11846:	       jsr 13734 <getValueType>
   1184c:	       lea 12(sp),sp
   11850:	       tst.w d0
   11852:	   /-- bne.s 11858 <builtIn_cacheSound+0x28>
   11854:	   |   moveq #1,d0
   11856:	/--|-- bra.s 11880 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   11858:	|  \-> moveq #24,d0
   1185a:	|      add.l 12(sp),d0
   1185e:	|      move.l d0,-(sp)
   11860:	|      jsr 140b8 <trimStack>
   11866:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   11868:	|      move.l (sp),d0
   1186a:	|      move.l d0,-(sp)
   1186c:	|      jsr c160 <cacheSound>
   11872:	|      addq.l #4,sp
   11874:	|      moveq #-1,d1
   11876:	|      cmp.l d0,d1
   11878:	|  /-- bne.s 1187e <builtIn_cacheSound+0x4e>
   1187a:	|  |   moveq #1,d0
   1187c:	+--|-- bra.s 11880 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   1187e:	|  \-> moveq #2,d0
}
   11880:	\----> addq.l #4,sp
   11882:	       rts

00011884 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   11884:	pea 183fa <PutChar+0x1e84>
   1188a:	jsr 15c26 <KPrintF>
   11890:	addq.l #4,sp
	return BR_CONTINUE;
   11892:	moveq #2,d0
}
   11894:	rts

00011896 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   11896:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1189a:	          movea.l 20(sp),a0
   1189e:	          move.l 24(a0),d0
   118a2:	          move.l d0,-(sp)
   118a4:	          pea 1 <_start+0x1>
   118a8:	          moveq #12,d0
   118aa:	          add.l sp,d0
   118ac:	          move.l d0,-(sp)
   118ae:	          jsr 13734 <getValueType>
   118b4:	          lea 12(sp),sp
   118b8:	          tst.w d0
   118ba:	      /-- bne.s 118c2 <builtIn_setCharacterSpinSpeed+0x2c>
   118bc:	      |   moveq #1,d0
   118be:	/-----|-- bra.w 1195c <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   118c2:	|     \-> moveq #24,d0
   118c4:	|         add.l 20(sp),d0
   118c8:	|         move.l d0,-(sp)
   118ca:	|         jsr 140b8 <trimStack>
   118d0:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118d2:	|         movea.l 20(sp),a0
   118d6:	|         move.l 24(a0),d0
   118da:	|         move.l d0,-(sp)
   118dc:	|         pea 7 <_start+0x7>
   118e0:	|         lea 8(sp),a0
   118e4:	|         move.l a0,-(sp)
   118e6:	|         jsr 13734 <getValueType>
   118ec:	|         lea 12(sp),sp
   118f0:	|         tst.w d0
   118f2:	|     /-- bne.s 118f8 <builtIn_setCharacterSpinSpeed+0x62>
   118f4:	|     |   moveq #1,d0
   118f6:	+-----|-- bra.s 1195c <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   118f8:	|     \-> moveq #24,d0
   118fa:	|         add.l 20(sp),d0
   118fe:	|         move.l d0,-(sp)
   11900:	|         jsr 140b8 <trimStack>
   11906:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   11908:	|         move.l (sp),d0
   1190a:	|         move.l d0,-(sp)
   1190c:	|         jsr 9652 <findPerson>
   11912:	|         addq.l #4,sp
   11914:	|         move.l d0,8(sp)

	if (thisPerson) {
   11918:	|  /----- beq.s 11942 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   1191a:	|  |      move.l 4(sp),d0
   1191e:	|  |      movea.l 8(sp),a0
   11922:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11926:	|  |      moveq #28,d0
   11928:	|  |      add.l 20(sp),d0
   1192c:	|  |      pea 1 <_start+0x1>
   11930:	|  |      pea 1 <_start+0x1>
   11934:	|  |      move.l d0,-(sp)
   11936:	|  |      jsr 14026 <setVariable>
   1193c:	|  |      lea 12(sp),sp
   11940:	|  |  /-- bra.s 1195a <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11942:	|  \--|-> moveq #28,d0
   11944:	|     |   add.l 20(sp),d0
   11948:	|     |   clr.l -(sp)
   1194a:	|     |   pea 1 <_start+0x1>
   1194e:	|     |   move.l d0,-(sp)
   11950:	|     |   jsr 14026 <setVariable>
   11956:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1195a:	|     \-> moveq #2,d0
}
   1195c:	\-------> lea 12(sp),sp
   11960:	          rts

00011962 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   11962:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11966:	          movea.l 20(sp),a0
   1196a:	          move.l 24(a0),d0
   1196e:	          move.l d0,-(sp)
   11970:	          pea 1 <_start+0x1>
   11974:	          moveq #12,d0
   11976:	          add.l sp,d0
   11978:	          move.l d0,-(sp)
   1197a:	          jsr 13734 <getValueType>
   11980:	          lea 12(sp),sp
   11984:	          tst.w d0
   11986:	      /-- bne.s 1198e <builtIn_setCharacterAngleOffset+0x2c>
   11988:	      |   moveq #1,d0
   1198a:	/-----|-- bra.w 11a28 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   1198e:	|     \-> moveq #24,d0
   11990:	|         add.l 20(sp),d0
   11994:	|         move.l d0,-(sp)
   11996:	|         jsr 140b8 <trimStack>
   1199c:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1199e:	|         movea.l 20(sp),a0
   119a2:	|         move.l 24(a0),d0
   119a6:	|         move.l d0,-(sp)
   119a8:	|         pea 7 <_start+0x7>
   119ac:	|         lea 8(sp),a0
   119b0:	|         move.l a0,-(sp)
   119b2:	|         jsr 13734 <getValueType>
   119b8:	|         lea 12(sp),sp
   119bc:	|         tst.w d0
   119be:	|     /-- bne.s 119c4 <builtIn_setCharacterAngleOffset+0x62>
   119c0:	|     |   moveq #1,d0
   119c2:	+-----|-- bra.s 11a28 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   119c4:	|     \-> moveq #24,d0
   119c6:	|         add.l 20(sp),d0
   119ca:	|         move.l d0,-(sp)
   119cc:	|         jsr 140b8 <trimStack>
   119d2:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   119d4:	|         move.l (sp),d0
   119d6:	|         move.l d0,-(sp)
   119d8:	|         jsr 9652 <findPerson>
   119de:	|         addq.l #4,sp
   119e0:	|         move.l d0,8(sp)

	if (thisPerson) {
   119e4:	|  /----- beq.s 11a0e <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   119e6:	|  |      move.l 4(sp),d0
   119ea:	|  |      movea.l 8(sp),a0
   119ee:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   119f2:	|  |      moveq #28,d0
   119f4:	|  |      add.l 20(sp),d0
   119f8:	|  |      pea 1 <_start+0x1>
   119fc:	|  |      pea 1 <_start+0x1>
   11a00:	|  |      move.l d0,-(sp)
   11a02:	|  |      jsr 14026 <setVariable>
   11a08:	|  |      lea 12(sp),sp
   11a0c:	|  |  /-- bra.s 11a26 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11a0e:	|  \--|-> moveq #28,d0
   11a10:	|     |   add.l 20(sp),d0
   11a14:	|     |   clr.l -(sp)
   11a16:	|     |   pea 1 <_start+0x1>
   11a1a:	|     |   move.l d0,-(sp)
   11a1c:	|     |   jsr 14026 <setVariable>
   11a22:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11a26:	|     \-> moveq #2,d0
}
   11a28:	\-------> lea 12(sp),sp
   11a2c:	          rts

00011a2e <builtIn_transitionMode>:


builtIn(transitionMode)
{
   11a2e:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a30:	       movea.l 12(sp),a0
   11a34:	       move.l 24(a0),d0
   11a38:	       move.l d0,-(sp)
   11a3a:	       pea 1 <_start+0x1>
   11a3e:	       move.l sp,d0
   11a40:	       addq.l #8,d0
   11a42:	       move.l d0,-(sp)
   11a44:	       jsr 13734 <getValueType>
   11a4a:	       lea 12(sp),sp
   11a4e:	       tst.w d0
   11a50:	   /-- bne.s 11a56 <builtIn_transitionMode+0x28>
   11a52:	   |   moveq #1,d0
   11a54:	/--|-- bra.s 11a8c <builtIn_transitionMode+0x5e>
	fadeMode = n;
   11a56:	|  \-> move.l (sp),d0
   11a58:	|      move.l d0,d0
   11a5a:	|      move.b d0,1b0b4 <fadeMode>
	trimStack (&fun -> stack);
   11a60:	|      moveq #24,d0
   11a62:	|      add.l 12(sp),d0
   11a66:	|      move.l d0,-(sp)
   11a68:	|      jsr 140b8 <trimStack>
   11a6e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11a70:	|      moveq #28,d0
   11a72:	|      add.l 12(sp),d0
   11a76:	|      pea 1 <_start+0x1>
   11a7a:	|      pea 1 <_start+0x1>
   11a7e:	|      move.l d0,-(sp)
   11a80:	|      jsr 14026 <setVariable>
   11a86:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11a8a:	|      moveq #2,d0
}
   11a8c:	\----> addq.l #4,sp
   11a8e:	       rts

00011a90 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   11a90:	moveq #24,d0
   11a92:	add.l 8(sp),d0
   11a96:	move.l d0,-(sp)
   11a98:	jsr 140b8 <trimStack>
   11a9e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   11aa0:	moveq #28,d0
   11aa2:	add.l 8(sp),d0
   11aa6:	pea 1 <_start+0x1>
   11aaa:	pea 1 <_start+0x1>
   11aae:	move.l d0,-(sp)
   11ab0:	jsr 14026 <setVariable>
   11ab6:	lea 12(sp),sp
	return BR_CONTINUE;
   11aba:	moveq #2,d0
}
   11abc:	rts

00011abe <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   11abe:	pea 18424 <PutChar+0x1eae>
   11ac4:	jsr 15c26 <KPrintF>
   11aca:	addq.l #4,sp
	return BR_CONTINUE;
   11acc:	moveq #2,d0
}
   11ace:	rts

00011ad0 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   11ad0:	       lea -16(sp),sp
   11ad4:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   11ad6:	       movea.l 28(sp),a0
   11ada:	       move.l 24(a0),d0
   11ade:	       move.l d0,-(sp)
   11ae0:	       jsr 13d0a <getTextFromAnyVar>
   11ae6:	       addq.l #4,sp
   11ae8:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   11aec:	   /-- bne.s 11af4 <builtIn_saveCustomData+0x24>
   11aee:	   |   moveq #1,d0
   11af0:	/--|-- bra.w 11ba6 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   11af4:	|  \-> move.l 16(sp),-(sp)
   11af8:	|      jsr 2fe <encodeFilename>
   11afe:	|      addq.l #4,sp
   11b00:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   11b04:	|      move.l 16(sp),8(sp)
   11b0a:	|      move.l 1b1d8 <SysBase>,d0
   11b10:	|      movea.l d0,a6
   11b12:	|      movea.l 8(sp),a1
   11b16:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   11b1a:	|      move.l 12(sp),-(sp)
   11b1e:	|      jsr d318 <failSecurityCheck>
   11b24:	|      addq.l #4,sp
   11b26:	|      tst.w d0
   11b28:	|  /-- beq.s 11b2e <builtIn_saveCustomData+0x5e>
   11b2a:	|  |   moveq #1,d0
   11b2c:	+--|-- bra.s 11ba6 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11b2e:	|  \-> moveq #24,d0
   11b30:	|      add.l 28(sp),d0
   11b34:	|      move.l d0,-(sp)
   11b36:	|      jsr 140b8 <trimStack>
   11b3c:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   11b3e:	|      movea.l 28(sp),a0
   11b42:	|      movea.l 24(a0),a0
   11b46:	|      move.l (a0),d0
   11b48:	|      moveq #6,d1
   11b4a:	|      cmp.l d0,d1
   11b4c:	|  /-- beq.s 11b60 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   11b4e:	|  |   pea 18451 <PutChar+0x1edb>
   11b54:	|  |   jsr 15c26 <KPrintF>
   11b5a:	|  |   addq.l #4,sp
		return BR_ERROR;
   11b5c:	|  |   moveq #1,d0
   11b5e:	+--|-- bra.s 11ba6 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   11b60:	|  \-> movea.l 28(sp),a0
   11b64:	|      move.l 24(a0),d0
   11b68:	|      move.l d0,-(sp)
   11b6a:	|      move.l 16(sp),-(sp)
   11b6e:	|      jsr cf68 <stackToFile>
   11b74:	|      addq.l #8,sp
   11b76:	|      tst.w d0
   11b78:	|  /-- bne.s 11b7e <builtIn_saveCustomData+0xae>
   11b7a:	|  |   moveq #1,d0
   11b7c:	+--|-- bra.s 11ba6 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   11b7e:	|  \-> moveq #24,d0
   11b80:	|      add.l 28(sp),d0
   11b84:	|      move.l d0,-(sp)
   11b86:	|      jsr 140b8 <trimStack>
   11b8c:	|      addq.l #4,sp
	FreeVec(fileName);
   11b8e:	|      move.l 12(sp),4(sp)
   11b94:	|      move.l 1b1d8 <SysBase>,d0
   11b9a:	|      movea.l d0,a6
   11b9c:	|      movea.l 4(sp),a1
   11ba0:	|      jsr -690(a6)
	return BR_CONTINUE;
   11ba4:	|      moveq #2,d0
}
   11ba6:	\----> movea.l (sp)+,a6
   11ba8:	       lea 16(sp),sp
   11bac:	       rts

00011bae <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   11bae:	       lea -28(sp),sp
   11bb2:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   11bb4:	       movea.l 40(sp),a0
   11bb8:	       move.l 24(a0),d0
   11bbc:	       move.l d0,-(sp)
   11bbe:	       jsr 13d0a <getTextFromAnyVar>
   11bc4:	       addq.l #4,sp
   11bc6:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   11bca:	   /-- bne.s 11bd2 <builtIn_loadCustomData+0x24>
   11bcc:	   |   moveq #1,d0
   11bce:	/--|-- bra.w 11cce <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   11bd2:	|  \-> move.l 28(sp),-(sp)
   11bd6:	|      jsr 2fe <encodeFilename>
   11bdc:	|      addq.l #4,sp
   11bde:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   11be2:	|      move.l 28(sp),20(sp)
   11be8:	|      move.l 1b1d8 <SysBase>,d0
   11bee:	|      movea.l d0,a6
   11bf0:	|      movea.l 20(sp),a1
   11bf4:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   11bf8:	|      move.l 24(sp),-(sp)
   11bfc:	|      jsr d318 <failSecurityCheck>
   11c02:	|      addq.l #4,sp
   11c04:	|      tst.w d0
   11c06:	|  /-- beq.s 11c0e <builtIn_loadCustomData+0x60>
   11c08:	|  |   moveq #1,d0
   11c0a:	+--|-- bra.w 11cce <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   11c0e:	|  \-> moveq #24,d0
   11c10:	|      add.l 40(sp),d0
   11c14:	|      move.l d0,-(sp)
   11c16:	|      jsr 140b8 <trimStack>
   11c1c:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   11c1e:	|      moveq #28,d0
   11c20:	|      add.l 40(sp),d0
   11c24:	|      move.l d0,-(sp)
   11c26:	|      jsr 13982 <unlinkVar>
   11c2c:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   11c2e:	|      movea.l 40(sp),a0
   11c32:	|      moveq #6,d0
   11c34:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   11c38:	|      moveq #12,d0
   11c3a:	|      move.l d0,16(sp)
   11c3e:	|      clr.l 12(sp)
   11c42:	|      move.l 1b1d8 <SysBase>,d0
   11c48:	|      movea.l d0,a6
   11c4a:	|      move.l 16(sp),d0
   11c4e:	|      move.l 12(sp),d1
   11c52:	|      jsr -684(a6)
   11c56:	|      move.l d0,8(sp)
   11c5a:	|      move.l 8(sp),d0
   11c5e:	|      movea.l 40(sp),a0
   11c62:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   11c66:	|      movea.l 40(sp),a0
   11c6a:	|      move.l 32(a0),d0
   11c6e:	|  /-- bne.s 11c74 <builtIn_loadCustomData+0xc6>
   11c70:	|  |   moveq #1,d0
   11c72:	+--|-- bra.s 11cce <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   11c74:	|  \-> movea.l 40(sp),a0
   11c78:	|      movea.l 32(a0),a0
   11c7c:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   11c7e:	|      movea.l 40(sp),a0
   11c82:	|      movea.l 32(a0),a0
   11c86:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   11c8a:	|      movea.l 40(sp),a0
   11c8e:	|      movea.l 32(a0),a0
   11c92:	|      moveq #1,d0
   11c94:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   11c98:	|      movea.l 40(sp),a0
   11c9c:	|      move.l 32(a0),d0
   11ca0:	|      move.l d0,-(sp)
   11ca2:	|      move.l 28(sp),-(sp)
   11ca6:	|      jsr c9a2 <fileToStack>
   11cac:	|      addq.l #8,sp
   11cae:	|      tst.w d0
   11cb0:	|  /-- bne.s 11cb6 <builtIn_loadCustomData+0x108>
   11cb2:	|  |   moveq #1,d0
   11cb4:	+--|-- bra.s 11cce <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   11cb6:	|  \-> move.l 24(sp),4(sp)
   11cbc:	|      move.l 1b1d8 <SysBase>,d0
   11cc2:	|      movea.l d0,a6
   11cc4:	|      movea.l 4(sp),a1
   11cc8:	|      jsr -690(a6)
	return BR_CONTINUE;
   11ccc:	|      moveq #2,d0
}
   11cce:	\----> movea.l (sp)+,a6
   11cd0:	       lea 28(sp),sp
   11cd4:	       rts

00011cd6 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   11cd6:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cd8:	       movea.l 12(sp),a0
   11cdc:	       move.l 24(a0),d0
   11ce0:	       move.l d0,-(sp)
   11ce2:	       pea 1 <_start+0x1>
   11ce6:	       move.l sp,d0
   11ce8:	       addq.l #8,d0
   11cea:	       move.l d0,-(sp)
   11cec:	       jsr 13734 <getValueType>
   11cf2:	       lea 12(sp),sp
   11cf6:	       tst.w d0
   11cf8:	   /-- bne.s 11cfe <builtIn_setCustomEncoding+0x28>
   11cfa:	   |   moveq #1,d0
   11cfc:	/--|-- bra.s 11d34 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   11cfe:	|  \-> move.l (sp),d0
   11d00:	|      move.l d0,d0
   11d02:	|      move.w d0,1b2e8 <saveEncoding>
	trimStack (&fun -> stack);
   11d08:	|      moveq #24,d0
   11d0a:	|      add.l 12(sp),d0
   11d0e:	|      move.l d0,-(sp)
   11d10:	|      jsr 140b8 <trimStack>
   11d16:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11d18:	|      moveq #28,d0
   11d1a:	|      add.l 12(sp),d0
   11d1e:	|      pea 1 <_start+0x1>
   11d22:	|      pea 1 <_start+0x1>
   11d26:	|      move.l d0,-(sp)
   11d28:	|      jsr 14026 <setVariable>
   11d2e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11d32:	|      moveq #2,d0
}
   11d34:	\----> addq.l #4,sp
   11d36:	       rts

00011d38 <builtIn_freeSound>:

builtIn(freeSound)
{
   11d38:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d3a:	       movea.l 12(sp),a0
   11d3e:	       move.l 24(a0),d0
   11d42:	       move.l d0,-(sp)
   11d44:	       pea 5 <_start+0x5>
   11d48:	       move.l sp,d0
   11d4a:	       addq.l #8,d0
   11d4c:	       move.l d0,-(sp)
   11d4e:	       jsr 13734 <getValueType>
   11d54:	       lea 12(sp),sp
   11d58:	       tst.w d0
   11d5a:	   /-- bne.s 11d60 <builtIn_freeSound+0x28>
   11d5c:	   |   moveq #1,d0
   11d5e:	/--|-- bra.s 11d7e <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   11d60:	|  \-> moveq #24,d0
   11d62:	|      add.l 12(sp),d0
   11d66:	|      move.l d0,-(sp)
   11d68:	|      jsr 140b8 <trimStack>
   11d6e:	|      addq.l #4,sp
	huntKillFreeSound (v);
   11d70:	|      move.l (sp),d0
   11d72:	|      move.l d0,-(sp)
   11d74:	|      jsr c164 <huntKillFreeSound>
   11d7a:	|      addq.l #4,sp
	return BR_CONTINUE;
   11d7c:	|      moveq #2,d0
}
   11d7e:	\----> addq.l #4,sp
   11d80:	       rts

00011d82 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   11d82:	       lea -12(sp),sp
   11d86:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d88:	       movea.l 24(sp),a0
   11d8c:	       move.l 24(a0),d0
   11d90:	       move.l d0,-(sp)
   11d92:	       pea 1 <_start+0x1>
   11d96:	       moveq #16,d0
   11d98:	       add.l sp,d0
   11d9a:	       move.l d0,-(sp)
   11d9c:	       jsr 13734 <getValueType>
   11da2:	       lea 12(sp),sp
   11da6:	       tst.w d0
   11da8:	   /-- bne.s 11db0 <builtIn_parallaxAdd+0x2e>
   11daa:	   |   moveq #1,d0
   11dac:	/--|-- bra.w 11e84 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11db0:	|  \-> moveq #24,d0
   11db2:	|      add.l 24(sp),d0
   11db6:	|      move.l d0,-(sp)
   11db8:	|      jsr 140b8 <trimStack>
   11dbe:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11dc0:	|      movea.l 24(sp),a0
   11dc4:	|      move.l 24(a0),d0
   11dc8:	|      move.l d0,-(sp)
   11dca:	|      pea 1 <_start+0x1>
   11dce:	|      moveq #20,d0
   11dd0:	|      add.l sp,d0
   11dd2:	|      move.l d0,-(sp)
   11dd4:	|      jsr 13734 <getValueType>
   11dda:	|      lea 12(sp),sp
   11dde:	|      tst.w d0
   11de0:	|  /-- bne.s 11de8 <builtIn_parallaxAdd+0x66>
   11de2:	|  |   moveq #1,d0
   11de4:	+--|-- bra.w 11e84 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11de8:	|  \-> moveq #24,d0
   11dea:	|      add.l 24(sp),d0
   11dee:	|      move.l d0,-(sp)
   11df0:	|      jsr 140b8 <trimStack>
   11df6:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11df8:	|      movea.l 24(sp),a0
   11dfc:	|      move.l 24(a0),d0
   11e00:	|      move.l d0,-(sp)
   11e02:	|      pea 5 <_start+0x5>
   11e06:	|      lea 12(sp),a0
   11e0a:	|      move.l a0,-(sp)
   11e0c:	|      jsr 13734 <getValueType>
   11e12:	|      lea 12(sp),sp
   11e16:	|      tst.w d0
   11e18:	|  /-- bne.s 11e1e <builtIn_parallaxAdd+0x9c>
   11e1a:	|  |   moveq #1,d0
   11e1c:	+--|-- bra.s 11e84 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   11e1e:	|  \-> moveq #24,d0
   11e20:	|      add.l 24(sp),d0
   11e24:	|      move.l d0,-(sp)
   11e26:	|      jsr 140b8 <trimStack>
   11e2c:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   11e2e:	|      move.l 8(sp),d0
   11e32:	|      move.l d0,d0
   11e34:	|      moveq #0,d2
   11e36:	|      move.w d0,d2
   11e38:	|      move.l 12(sp),d0
   11e3c:	|      move.l d0,d0
   11e3e:	|      moveq #0,d1
   11e40:	|      move.w d0,d1
   11e42:	|      move.l 4(sp),d0
   11e46:	|      move.l d0,d0
   11e48:	|      move.w d0,d0
   11e4a:	|      andi.l #65535,d0
   11e50:	|      move.l d2,-(sp)
   11e52:	|      move.l d1,-(sp)
   11e54:	|      move.l d0,-(sp)
   11e56:	|      jsr c380 <loadParallax>
   11e5c:	|      lea 12(sp),sp
   11e60:	|      tst.w d0
   11e62:	|  /-- bne.s 11e68 <builtIn_parallaxAdd+0xe6>
   11e64:	|  |   moveq #1,d0
   11e66:	+--|-- bra.s 11e84 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   11e68:	|  \-> moveq #28,d0
   11e6a:	|      add.l 24(sp),d0
   11e6e:	|      pea 1 <_start+0x1>
   11e72:	|      pea 1 <_start+0x1>
   11e76:	|      move.l d0,-(sp)
   11e78:	|      jsr 14026 <setVariable>
   11e7e:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   11e82:	|      moveq #2,d0
}
   11e84:	\----> move.l (sp)+,d2
   11e86:	       lea 12(sp),sp
   11e8a:	       rts

00011e8c <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   11e8c:	jsr c2b8 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   11e92:	moveq #28,d0
   11e94:	add.l 8(sp),d0
   11e98:	pea 1 <_start+0x1>
   11e9c:	pea 1 <_start+0x1>
   11ea0:	move.l d0,-(sp)
   11ea2:	jsr 14026 <setVariable>
   11ea8:	lea 12(sp),sp
	return BR_CONTINUE;
   11eac:	moveq #2,d0
}
   11eae:	rts

00011eb0 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   11eb0:	pea 1846f <PutChar+0x1ef9>
   11eb6:	jsr 15c26 <KPrintF>
   11ebc:	addq.l #4,sp

	return BR_CONTINUE;
   11ebe:	moveq #2,d0
}
   11ec0:	rts

00011ec2 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   11ec2:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   11ec4:	             movea.l 16(sp),a0
   11ec8:	             movea.l 24(a0),a0
   11ecc:	             move.l (a0),d0
   11ece:	             moveq #1,d1
   11ed0:	             cmp.l d0,d1
   11ed2:	      /----- beq.s 11f1a <builtIn_makeFastArray+0x58>
   11ed4:	      |      moveq #6,d1
   11ed6:	      |      cmp.l d0,d1
   11ed8:	/-----|----- bne.s 11f58 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   11eda:	|     |      movea.l 16(sp),a0
   11ede:	|     |      movea.l 24(a0),a0
   11ee2:	|     |      move.l 4(a0),d1
   11ee6:	|     |      moveq #28,d0
   11ee8:	|     |      add.l 16(sp),d0
   11eec:	|     |      move.l d1,-(sp)
   11eee:	|     |      move.l d0,-(sp)
   11ef0:	|     |      jsr 137e6 <makeFastArrayFromStack>
   11ef6:	|     |      addq.l #8,sp
   11ef8:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   11efc:	|     |      moveq #24,d0
   11efe:	|     |      add.l 16(sp),d0
   11f02:	|     |      move.l d0,-(sp)
   11f04:	|     |      jsr 140b8 <trimStack>
   11f0a:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   11f0c:	|     |      tst.w 6(sp)
   11f10:	|     |  /-- beq.s 11f16 <builtIn_makeFastArray+0x54>
   11f12:	|     |  |   moveq #2,d0
   11f14:	|  /--|--|-- bra.s 11f6a <builtIn_makeFastArray+0xa8>
   11f16:	|  |  |  \-> moveq #1,d0
   11f18:	|  +--|----- bra.s 11f6a <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   11f1a:	|  |  \----> movea.l 16(sp),a0
   11f1e:	|  |         movea.l 24(a0),a0
   11f22:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   11f28:	|  |         moveq #24,d0
   11f2a:	|  |         add.l 16(sp),d0
   11f2e:	|  |         move.l d0,-(sp)
   11f30:	|  |         jsr 140b8 <trimStack>
   11f36:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   11f38:	|  |         moveq #28,d0
   11f3a:	|  |         add.l 16(sp),d0
   11f3e:	|  |         move.l 2(sp),-(sp)
   11f42:	|  |         move.l d0,-(sp)
   11f44:	|  |         jsr 13850 <makeFastArraySize>
   11f4a:	|  |         addq.l #8,sp
   11f4c:	|  |         tst.w d0
   11f4e:	|  |     /-- beq.s 11f54 <builtIn_makeFastArray+0x92>
   11f50:	|  |     |   moveq #2,d0
   11f52:	|  +-----|-- bra.s 11f6a <builtIn_makeFastArray+0xa8>
   11f54:	|  |     \-> moveq #1,d0
   11f56:	|  +-------- bra.s 11f6a <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   11f58:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   11f5a:	   |         pea 18498 <PutChar+0x1f22>
   11f60:	   |         jsr 15c26 <KPrintF>
   11f66:	   |         addq.l #4,sp
	return BR_ERROR;
   11f68:	   |         moveq #1,d0
}
   11f6a:	   \-------> addq.l #8,sp
   11f6c:	             rts

00011f6e <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   11f6e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f70:	          movea.l 16(sp),a0
   11f74:	          move.l 24(a0),d0
   11f78:	          move.l d0,-(sp)
   11f7a:	          pea 7 <_start+0x7>
   11f7e:	          move.l sp,d0
   11f80:	          addq.l #8,d0
   11f82:	          move.l d0,-(sp)
   11f84:	          jsr 13734 <getValueType>
   11f8a:	          lea 12(sp),sp
   11f8e:	          tst.w d0
   11f90:	      /-- bne.s 11f96 <builtIn_getCharacterScale+0x28>
   11f92:	      |   moveq #1,d0
   11f94:	/-----|-- bra.s 12010 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   11f96:	|     \-> moveq #24,d0
   11f98:	|         add.l 16(sp),d0
   11f9c:	|         move.l d0,-(sp)
   11f9e:	|         jsr 140b8 <trimStack>
   11fa4:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11fa6:	|         move.l (sp),d0
   11fa8:	|         move.l d0,-(sp)
   11faa:	|         jsr 9652 <findPerson>
   11fb0:	|         addq.l #4,sp
   11fb2:	|         move.l d0,4(sp)
	if (pers) {
   11fb6:	|  /----- beq.s 11ff6 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   11fb8:	|  |      movea.l 4(sp),a0
   11fbc:	|  |      move.l 32(a0),d0
   11fc0:	|  |      move.l #1120403456,-(sp)
   11fc6:	|  |      move.l d0,-(sp)
   11fc8:	|  |      jsr 15f90 <__mulsf3>
   11fce:	|  |      addq.l #8,sp
   11fd0:	|  |      move.l d0,-(sp)
   11fd2:	|  |      jsr 15e76 <__fixsfsi>
   11fd8:	|  |      addq.l #4,sp
   11fda:	|  |      move.l d0,d1
   11fdc:	|  |      moveq #28,d0
   11fde:	|  |      add.l 16(sp),d0
   11fe2:	|  |      move.l d1,-(sp)
   11fe4:	|  |      pea 1 <_start+0x1>
   11fe8:	|  |      move.l d0,-(sp)
   11fea:	|  |      jsr 14026 <setVariable>
   11ff0:	|  |      lea 12(sp),sp
   11ff4:	|  |  /-- bra.s 1200e <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11ff6:	|  \--|-> moveq #28,d0
   11ff8:	|     |   add.l 16(sp),d0
   11ffc:	|     |   clr.l -(sp)
   11ffe:	|     |   pea 1 <_start+0x1>
   12002:	|     |   move.l d0,-(sp)
   12004:	|     |   jsr 14026 <setVariable>
   1200a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1200e:	|     \-> moveq #2,d0
}
   12010:	\-------> addq.l #8,sp
   12012:	          rts

00012014 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12014:	move.l 1b30c <gameSettings>,d0
   1201a:	move.l d0,d1
   1201c:	moveq #28,d0
   1201e:	add.l 8(sp),d0
   12022:	move.l d1,-(sp)
   12024:	pea 1 <_start+0x1>
   12028:	move.l d0,-(sp)
   1202a:	jsr 14026 <setVariable>
   12030:	lea 12(sp),sp
	return BR_CONTINUE;
   12034:	moveq #2,d0
}
   12036:	rts

00012038 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12038:	moveq #24,d0
   1203a:	add.l 8(sp),d0
   1203e:	move.l d0,-(sp)
   12040:	jsr 140b8 <trimStack>
   12046:	addq.l #4,sp
	trimStack (&fun -> stack);
   12048:	moveq #24,d0
   1204a:	add.l 8(sp),d0
   1204e:	move.l d0,-(sp)
   12050:	jsr 140b8 <trimStack>
   12056:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12058:	moveq #28,d0
   1205a:	add.l 8(sp),d0
   1205e:	clr.l -(sp)
   12060:	pea 1 <_start+0x1>
   12064:	move.l d0,-(sp)
   12066:	jsr 14026 <setVariable>
   1206c:	lea 12(sp),sp

	return BR_CONTINUE;
   12070:	moveq #2,d0

}
   12072:	rts

00012074 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12074:	move.l 1ab5a <lastFramesPerSecond>,d1
   1207a:	moveq #28,d0
   1207c:	add.l 8(sp),d0
   12080:	move.l d1,-(sp)
   12082:	pea 1 <_start+0x1>
   12086:	move.l d0,-(sp)
   12088:	jsr 14026 <setVariable>
   1208e:	lea 12(sp),sp
	return BR_CONTINUE;
   12092:	moveq #2,d0
}
   12094:	rts

00012096 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12096:	moveq #2,d0
}
   12098:	rts

0001209a <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   1209a:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1209e:	          movea.l 60(sp),a0
   120a2:	          move.l 24(a0),d0
   120a6:	          move.l d0,-(sp)
   120a8:	          pea 1 <_start+0x1>
   120ac:	          pea 1b0f0 <thumbHeight>
   120b2:	          jsr 13734 <getValueType>
   120b8:	          lea 12(sp),sp
   120bc:	          tst.w d0
   120be:	      /-- bne.s 120c6 <builtIn_setThumbnailSize+0x2c>
   120c0:	      |   moveq #1,d0
   120c2:	/-----|-- bra.w 12182 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   120c6:	|     \-> moveq #24,d0
   120c8:	|         add.l 60(sp),d0
   120cc:	|         move.l d0,-(sp)
   120ce:	|         jsr 140b8 <trimStack>
   120d4:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120d6:	|         movea.l 60(sp),a0
   120da:	|         move.l 24(a0),d0
   120de:	|         move.l d0,-(sp)
   120e0:	|         pea 1 <_start+0x1>
   120e4:	|         pea 1b0ec <thumbWidth>
   120ea:	|         jsr 13734 <getValueType>
   120f0:	|         lea 12(sp),sp
   120f4:	|         tst.w d0
   120f6:	|     /-- bne.s 120fe <builtIn_setThumbnailSize+0x64>
   120f8:	|     |   moveq #1,d0
   120fa:	+-----|-- bra.w 12182 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   120fe:	|     \-> moveq #24,d0
   12100:	|         add.l 60(sp),d0
   12104:	|         move.l d0,-(sp)
   12106:	|         jsr 140b8 <trimStack>
   1210c:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   1210e:	|         move.l 1b0ec <thumbWidth>,d0
   12114:	|     /-- bmi.s 12142 <builtIn_setThumbnailSize+0xa8>
   12116:	|     |   move.l 1b0f0 <thumbHeight>,d0
   1211c:	|     +-- bmi.s 12142 <builtIn_setThumbnailSize+0xa8>
   1211e:	|     |   move.l 1b0ec <thumbWidth>,d0
   12124:	|     |   move.l d0,d1
   12126:	|     |   move.l 1b12c <winWidth>,d0
   1212c:	|     |   cmp.l d1,d0
   1212e:	|     +-- bcs.s 12142 <builtIn_setThumbnailSize+0xa8>
   12130:	|     |   move.l 1b0f0 <thumbHeight>,d0
   12136:	|     |   move.l d0,d1
   12138:	|     |   move.l 1b130 <winHeight>,d0
   1213e:	|     |   cmp.l d1,d0
   12140:	|  /--|-- bcc.s 12180 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   12142:	|  |  \-> move.l 1b0f0 <thumbHeight>,d1
   12148:	|  |      move.l 1b0ec <thumbWidth>,d0
   1214e:	|  |      move.l d1,-(sp)
   12150:	|  |      move.l d0,-(sp)
   12152:	|  |      pea 184bf <PutChar+0x1f49>
   12158:	|  |      lea 14(sp),a0
   1215c:	|  |      move.l a0,-(sp)
   1215e:	|  |      jsr 12f3e <sprintf>
   12164:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   12168:	|  |      lea 2(sp),a0
   1216c:	|  |      move.l a0,-(sp)
   1216e:	|  |      pea 184c7 <PutChar+0x1f51>
   12174:	|  |      jsr 15c26 <KPrintF>
   1217a:	|  |      addq.l #8,sp
		return BR_ERROR;
   1217c:	|  |      moveq #1,d0
   1217e:	+--|----- bra.s 12182 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   12180:	|  \----> moveq #2,d0
}
   12182:	\-------> lea 52(sp),sp
   12186:	          rts

00012188 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   12188:	       lea -12(sp),sp
   1218c:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1218e:	       movea.l 24(sp),a0
   12192:	       move.l 24(a0),d0
   12196:	       move.l d0,-(sp)
   12198:	       pea 1 <_start+0x1>
   1219c:	       lea 12(sp),a0
   121a0:	       move.l a0,-(sp)
   121a2:	       jsr 13734 <getValueType>
   121a8:	       lea 12(sp),sp
   121ac:	       tst.w d0
   121ae:	   /-- bne.s 121b6 <builtIn_hasFlag+0x2e>
   121b0:	   |   moveq #1,d0
   121b2:	/--|-- bra.w 12246 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   121b6:	|  \-> moveq #24,d0
   121b8:	|      add.l 24(sp),d0
   121bc:	|      move.l d0,-(sp)
   121be:	|      jsr 140b8 <trimStack>
   121c4:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121c6:	|      movea.l 24(sp),a0
   121ca:	|      move.l 24(a0),d0
   121ce:	|      move.l d0,-(sp)
   121d0:	|      pea 7 <_start+0x7>
   121d4:	|      moveq #16,d0
   121d6:	|      add.l sp,d0
   121d8:	|      move.l d0,-(sp)
   121da:	|      jsr 13734 <getValueType>
   121e0:	|      lea 12(sp),sp
   121e4:	|      tst.w d0
   121e6:	|  /-- bne.s 121ec <builtIn_hasFlag+0x64>
   121e8:	|  |   moveq #1,d0
   121ea:	+--|-- bra.s 12246 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   121ec:	|  \-> moveq #24,d0
   121ee:	|      add.l 24(sp),d0
   121f2:	|      move.l d0,-(sp)
   121f4:	|      jsr 140b8 <trimStack>
   121fa:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   121fc:	|      move.l 8(sp),d0
   12200:	|      move.l d0,-(sp)
   12202:	|      jsr c52c <findObjectType>
   12208:	|      addq.l #4,sp
   1220a:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   1220e:	|  /-- bne.s 12214 <builtIn_hasFlag+0x8c>
   12210:	|  |   moveq #1,d0
   12212:	+--|-- bra.s 12246 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   12214:	|  \-> movea.l 12(sp),a0
   12218:	|      move.w 36(a0),d0
   1221c:	|      moveq #0,d2
   1221e:	|      move.w d0,d2
   12220:	|      move.l 4(sp),d1
   12224:	|      moveq #1,d0
   12226:	|      lsl.l d1,d0
   12228:	|      move.l d2,d1
   1222a:	|      and.l d0,d1
   1222c:	|      moveq #28,d0
   1222e:	|      add.l 24(sp),d0
   12232:	|      move.l d1,-(sp)
   12234:	|      pea 1 <_start+0x1>
   12238:	|      move.l d0,-(sp)
   1223a:	|      jsr 14026 <setVariable>
   12240:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12244:	|      moveq #2,d0
}
   12246:	\----> move.l (sp)+,d2
   12248:	       lea 12(sp),sp
   1224c:	       rts

0001224e <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   1224e:	       jsr c51a <snapshot>
   12254:	       tst.w d0
   12256:	/----- beq.s 1225c <builtIn_snapshotGrab+0xe>
   12258:	|      moveq #2,d0
   1225a:	|  /-- bra.s 1225e <builtIn_snapshotGrab+0x10>
   1225c:	\--|-> moveq #1,d0
}
   1225e:	   \-> rts

00012260 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   12260:	jsr c3c6 <nosnapshot>
	return BR_CONTINUE;
   12266:	moveq #2,d0
}
   12268:	rts

0001226a <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   1226a:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   1226c:	move.w 1aa36 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   12274:	movea.l 12(sp),a0
   12278:	move.l 24(a0),d0
   1227c:	move.l d0,-(sp)
   1227e:	jsr 13c74 <getBoolean>
   12284:	addq.l #4,sp
   12286:	move.w d0,1aa36 <allowAnyFilename>
	trimStack (&fun -> stack);
   1228c:	moveq #24,d0
   1228e:	add.l 12(sp),d0
   12292:	move.l d0,-(sp)
   12294:	jsr 140b8 <trimStack>
   1229a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   1229c:	movea.w 2(sp),a0
   122a0:	moveq #28,d0
   122a2:	add.l 12(sp),d0
   122a6:	move.l a0,-(sp)
   122a8:	pea 1 <_start+0x1>
   122ac:	move.l d0,-(sp)
   122ae:	jsr 14026 <setVariable>
   122b4:	lea 12(sp),sp
	return BR_CONTINUE;
   122b8:	moveq #2,d0
}
   122ba:	addq.l #4,sp
   122bc:	rts

000122be <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   122be:	moveq #24,d0
   122c0:	add.l 8(sp),d0
   122c4:	move.l d0,-(sp)
   122c6:	jsr 140b8 <trimStack>
   122cc:	addq.l #4,sp
	trimStack (&fun -> stack);
   122ce:	moveq #24,d0
   122d0:	add.l 8(sp),d0
   122d4:	move.l d0,-(sp)
   122d6:	jsr 140b8 <trimStack>
   122dc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   122de:	moveq #28,d0
   122e0:	add.l 8(sp),d0
   122e4:	clr.l -(sp)
   122e6:	pea 1 <_start+0x1>
   122ea:	move.l d0,-(sp)
   122ec:	jsr 14026 <setVariable>
   122f2:	lea 12(sp),sp

	return BR_CONTINUE;
   122f6:	moveq #2,d0
}
   122f8:	rts

000122fa <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   122fa:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   122fc:	movea.l 12(sp),a0
   12300:	move.l 24(a0),d0
   12304:	move.l d0,-(sp)
   12306:	jsr 13d0a <getTextFromAnyVar>
   1230c:	addq.l #4,sp
   1230e:	move.l d0,(sp)
	trimStack (&fun -> stack);
   12310:	moveq #24,d0
   12312:	add.l 12(sp),d0
   12316:	move.l d0,-(sp)
   12318:	jsr 140b8 <trimStack>
   1231e:	addq.l #4,sp
	KPrintF (mess);
   12320:	move.l (sp),-(sp)
   12322:	jsr 15c26 <KPrintF>
   12328:	addq.l #4,sp
	return BR_ERROR;
   1232a:	moveq #1,d0
}
   1232c:	addq.l #4,sp
   1232e:	rts

00012330 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12330:	moveq #24,d0
   12332:	add.l 8(sp),d0
   12336:	move.l d0,-(sp)
   12338:	jsr 140b8 <trimStack>
   1233e:	addq.l #4,sp
	trimStack (&fun -> stack);
   12340:	moveq #24,d0
   12342:	add.l 8(sp),d0
   12346:	move.l d0,-(sp)
   12348:	jsr 140b8 <trimStack>
   1234e:	addq.l #4,sp
	trimStack (&fun -> stack);
   12350:	moveq #24,d0
   12352:	add.l 8(sp),d0
   12356:	move.l d0,-(sp)
   12358:	jsr 140b8 <trimStack>
   1235e:	addq.l #4,sp
	trimStack (&fun -> stack);
   12360:	moveq #24,d0
   12362:	add.l 8(sp),d0
   12366:	move.l d0,-(sp)
   12368:	jsr 140b8 <trimStack>
   1236e:	addq.l #4,sp

	return BR_CONTINUE;
   12370:	moveq #2,d0
}
   12372:	rts

00012374 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12374:	moveq #24,d0
   12376:	add.l 8(sp),d0
   1237a:	move.l d0,-(sp)
   1237c:	jsr 140b8 <trimStack>
   12382:	addq.l #4,sp
	trimStack (&fun -> stack);
   12384:	moveq #24,d0
   12386:	add.l 8(sp),d0
   1238a:	move.l d0,-(sp)
   1238c:	jsr 140b8 <trimStack>
   12392:	addq.l #4,sp
	trimStack (&fun -> stack);
   12394:	moveq #24,d0
   12396:	add.l 8(sp),d0
   1239a:	move.l d0,-(sp)
   1239c:	jsr 140b8 <trimStack>
   123a2:	addq.l #4,sp

	return BR_CONTINUE;
   123a4:	moveq #2,d0

}
   123a6:	rts

000123a8 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   123a8:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   123aa:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   123b0:	sne d0
   123b2:	neg.b d0
   123b4:	moveq #0,d1
   123b6:	move.b d0,d1
   123b8:	moveq #28,d0
   123ba:	add.l 12(sp),d0
   123be:	move.l d1,-(sp)
   123c0:	pea 1 <_start+0x1>
   123c4:	move.l d0,-(sp)
   123c6:	jsr 14026 <setVariable>
   123cc:	lea 12(sp),sp
	return BR_CONTINUE;
   123d0:	moveq #2,d0
}
   123d2:	addq.l #4,sp
   123d4:	rts

000123d6 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   123d6:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   123d8:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   123de:	pea 184de <PutChar+0x1f68>
   123e4:	jsr 15c26 <KPrintF>
   123ea:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   123ec:	tst.w 2(sp)
   123f0:	sne d0
   123f2:	neg.b d0
   123f4:	moveq #0,d1
   123f6:	move.b d0,d1
   123f8:	moveq #28,d0
   123fa:	add.l 12(sp),d0
   123fe:	move.l d1,-(sp)
   12400:	pea 1 <_start+0x1>
   12404:	move.l d0,-(sp)
   12406:	jsr 14026 <setVariable>
   1240c:	lea 12(sp),sp
	return BR_CONTINUE;
   12410:	moveq #2,d0
}
   12412:	addq.l #4,sp
   12414:	rts

00012416 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   12416:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   1241a:	             move.l 104(sp),d0
   1241e:	             cmpi.l #166,d0
   12424:	/----------- bhi.w 12506 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   12428:	|            move.l 104(sp),d0
   1242c:	|            add.l d0,d0
   1242e:	|            movea.l d0,a1
   12430:	|            adda.l d0,a1
   12432:	|            lea 1ab7c <paramNum>,a0
   12438:	|            move.l (0,a1,a0.l),d0
   1243c:	|            moveq #-1,d1
   1243e:	|            cmp.l d0,d1
   12440:	|  /-------- beq.w 124ce <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   12444:	|  |         move.l 104(sp),d0
   12448:	|  |         add.l d0,d0
   1244a:	|  |         movea.l d0,a1
   1244c:	|  |         adda.l d0,a1
   1244e:	|  |         lea 1ab7c <paramNum>,a0
   12454:	|  |         move.l (0,a1,a0.l),d0
   12458:	|  |         cmp.l 108(sp),d0
   1245c:	|  +-------- beq.s 124ce <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   1245e:	|  |         move.l 104(sp),d0
   12462:	|  |         add.l d0,d0
   12464:	|  |         movea.l d0,a1
   12466:	|  |         adda.l d0,a1
   12468:	|  |         lea 1ab7c <paramNum>,a0
   1246e:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   12472:	|  |         moveq #1,d1
   12474:	|  |         cmp.l d0,d1
   12476:	|  |  /----- bne.s 12480 <callBuiltIn+0x6a>
   12478:	|  |  |      move.l #94565,d0
   1247e:	|  |  |  /-- bra.s 12486 <callBuiltIn+0x70>
   12480:	|  |  \--|-> move.l #99604,d0
   12486:	|  |     \-> move.l 104(sp),d1
   1248a:	|  |         add.l d1,d1
   1248c:	|  |         movea.l d1,a1
   1248e:	|  |         adda.l d1,a1
   12490:	|  |         lea 1ab7c <paramNum>,a0
   12496:	|  |         move.l (0,a1,a0.l),d1
   1249a:	|  |         move.l d0,-(sp)
   1249c:	|  |         move.l d1,-(sp)
   1249e:	|  |         pea 18516 <PutChar+0x1fa0>
   124a4:	|  |         lea 12(sp),a0
   124a8:	|  |         move.l a0,-(sp)
   124aa:	|  |         jsr 12f3e <sprintf>
   124b0:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   124b4:	|  |         movea.l sp,a0
   124b6:	|  |         move.l a0,-(sp)
   124b8:	|  |         jsr b8 <copyString>
   124be:	|  |         addq.l #4,sp
   124c0:	|  |         move.l d0,-(sp)
   124c2:	|  |         jsr 15c26 <KPrintF>
   124c8:	|  |         addq.l #4,sp
				return BR_ERROR;
   124ca:	|  |         moveq #1,d0
   124cc:	|  |     /-- bra.s 12516 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   124ce:	|  \-----|-> move.l 104(sp),d0
   124d2:	|        |   add.l d0,d0
   124d4:	|        |   movea.l d0,a1
   124d6:	|        |   adda.l d0,a1
   124d8:	|        |   lea 1ae18 <builtInFunctionArray>,a0
   124de:	|        |   move.l (0,a1,a0.l),d0
   124e2:	+--------|-- beq.s 12506 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   124e4:	|        |   move.l 104(sp),d0
   124e8:	|        |   add.l d0,d0
   124ea:	|        |   movea.l d0,a1
   124ec:	|        |   adda.l d0,a1
   124ee:	|        |   lea 1ae18 <builtInFunctionArray>,a0
   124f4:	|        |   movea.l (0,a1,a0.l),a0
   124f8:	|        |   move.l 112(sp),-(sp)
   124fc:	|        |   move.l 112(sp),-(sp)
   12500:	|        |   jsr (a0)
   12502:	|        |   addq.l #8,sp
   12504:	|        +-- bra.s 12516 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   12506:	\--------|-> pea 18541 <PutChar+0x1fcb>
   1250c:	         |   jsr 15c26 <KPrintF>
   12512:	         |   addq.l #4,sp
	return BR_ERROR;
   12514:	         |   moveq #1,d0
}
   12516:	         \-> lea 100(sp),sp
   1251a:	             rts

0001251c <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   1251c:	          subq.l #8,sp
	int indexNum = -1;
   1251e:	          moveq #-1,d0
   12520:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   12524:	          clr.l (sp)
   12526:	   /----- bra.s 1254c <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   12528:	/--|----> move.l 1b304 <languageTable>,d1
   1252e:	|  |      move.l (sp),d0
   12530:	|  |      add.l d0,d0
   12532:	|  |      add.l d0,d0
   12534:	|  |      movea.l d1,a0
   12536:	|  |      adda.l d0,a0
   12538:	|  |      move.l (a0),d0
   1253a:	|  |      move.l d0,d1
   1253c:	|  |      move.l 1b30c <gameSettings>,d0
   12542:	|  |      cmp.l d1,d0
   12544:	|  |  /-- bne.s 1254a <getLanguageForFileB+0x2e>
   12546:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1254a:	|  |  \-> addq.l #1,(sp)
   1254c:	|  \----> move.l 1b310 <gameSettings+0x4>,d0
   12552:	|         cmp.l (sp),d0
   12554:	\-------- bcc.s 12528 <getLanguageForFileB+0xc>
	}

	return indexNum;
   12556:	          move.l 4(sp),d0
}
   1255a:	          addq.l #8,sp
   1255c:	          rts

0001255e <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   1255e:	          lea -20(sp),sp
   12562:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   12564:	          move.l 28(sp),-(sp)
   12568:	          jsr 12c20 <strlen>
   1256e:	          addq.l #4,sp
   12570:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   12574:	          moveq #4,d0
   12576:	          cmp.l 12(sp),d0
   1257a:	      /-- bge.s 1259e <getPrefsFilename+0x40>
   1257c:	      |   move.l 12(sp),d0
   12580:	      |   subq.l #4,d0
   12582:	      |   movea.l 28(sp),a0
   12586:	      |   adda.l d0,a0
   12588:	      |   move.b (a0),d0
   1258a:	      |   cmpi.b #46,d0
   1258e:	      +-- bne.s 1259e <getPrefsFilename+0x40>
		filename[n-4] = 0;
   12590:	      |   move.l 12(sp),d0
   12594:	      |   subq.l #4,d0
   12596:	      |   movea.l 28(sp),a0
   1259a:	      |   adda.l d0,a0
   1259c:	      |   clr.b (a0)
	}

	char * f = filename;
   1259e:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   125a4:	          clr.l 20(sp)
   125a8:	   /----- bra.s 125d0 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   125aa:	/--|----> move.l 20(sp),d0
   125ae:	|  |      movea.l 28(sp),a0
   125b2:	|  |      adda.l d0,a0
   125b4:	|  |      move.b (a0),d0
   125b6:	|  |      cmpi.b #47,d0
   125ba:	|  |  /-- bne.s 125cc <getPrefsFilename+0x6e>
   125bc:	|  |  |   move.l 20(sp),d0
   125c0:	|  |  |   addq.l #1,d0
   125c2:	|  |  |   move.l 28(sp),d1
   125c6:	|  |  |   add.l d0,d1
   125c8:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   125cc:	|  |  \-> addq.l #1,20(sp)
   125d0:	|  \----> move.l 20(sp),d0
   125d4:	|         cmp.l 12(sp),d0
   125d8:	\-------- blt.s 125aa <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   125da:	          pea 1856c <PutChar+0x1ff6>
   125e0:	          move.l 20(sp),-(sp)
   125e4:	          jsr 12c60 <joinStrings>
   125ea:	          addq.l #8,sp
   125ec:	          move.l d0,8(sp)

	FreeVec(filename);
   125f0:	          move.l 28(sp),4(sp)
   125f6:	          move.l 1b1d8 <SysBase>,d0
   125fc:	          movea.l d0,a6
   125fe:	          movea.l 4(sp),a1
   12602:	          jsr -690(a6)
	filename = NULL;
   12606:	          clr.l 28(sp)
	return joined;
   1260a:	          move.l 8(sp),d0
}
   1260e:	          movea.l (sp)+,a6
   12610:	          lea 20(sp),sp
   12614:	          rts

00012616 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   12616:	             lea -28(sp),sp
   1261a:	             move.l a6,-(sp)
   1261c:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1261e:	             move.l 1b310 <gameSettings+0x4>,d0
   12624:	             move.l d0,d1
   12626:	             addq.l #1,d1
   12628:	             move.l d1,28(sp)
   1262c:	             clr.l 24(sp)
   12630:	             move.l 1b1d8 <SysBase>,d0
   12636:	             movea.l d0,a6
   12638:	             move.l 28(sp),d0
   1263c:	             move.l 24(sp),d1
   12640:	             jsr -684(a6)
   12644:	             move.l d0,20(sp)
   12648:	             move.l 20(sp),d0
   1264c:	             move.l d0,1b304 <languageTable>
    if( languageTable == 0) {
   12652:	             move.l 1b304 <languageTable>,d0
   12658:	         /-- bne.s 12668 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   1265a:	         |   pea 18571 <PutChar+0x1ffb>
   12660:	         |   jsr 15c26 <KPrintF>
   12666:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   12668:	         \-> move.l 1b310 <gameSettings+0x4>,d0
   1266e:	             move.l d0,d1
   12670:	             addq.l #1,d1
   12672:	             move.l d1,16(sp)
   12676:	             clr.l 12(sp)
   1267a:	             move.l 1b1d8 <SysBase>,d0
   12680:	             movea.l d0,a6
   12682:	             move.l 16(sp),d0
   12686:	             move.l 12(sp),d1
   1268a:	             jsr -684(a6)
   1268e:	             move.l d0,8(sp)
   12692:	             move.l 8(sp),d0
   12696:	             move.l d0,1b308 <languageName>
	if( languageName == 0) {
   1269c:	             move.l 1b308 <languageName>,d0
   126a2:	         /-- bne.s 126b2 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   126a4:	         |   pea 185a7 <PutChar+0x2031>
   126aa:	         |   jsr 15c26 <KPrintF>
   126b0:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   126b2:	         \-> clr.l 32(sp)
   126b6:	   /-------- bra.s 1272e <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   126b8:	/--|-------> tst.l 32(sp)
   126bc:	|  |  /----- beq.s 126cc <makeLanguageTable+0xb6>
   126be:	|  |  |      move.l 40(sp),-(sp)
   126c2:	|  |  |      jsr 6bc <get2bytes>
   126c8:	|  |  |      addq.l #4,sp
   126ca:	|  |  |  /-- bra.s 126ce <makeLanguageTable+0xb8>
   126cc:	|  |  \--|-> moveq #0,d0
   126ce:	|  |     \-> movea.l 1b304 <languageTable>,a0
   126d4:	|  |         move.l 32(sp),d1
   126d8:	|  |         add.l d1,d1
   126da:	|  |         add.l d1,d1
   126dc:	|  |         adda.l d1,a0
   126de:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   126e0:	|  |         move.l 1b308 <languageName>,d1
   126e6:	|  |         move.l 32(sp),d0
   126ea:	|  |         add.l d0,d0
   126ec:	|  |         add.l d0,d0
   126ee:	|  |         movea.l d1,a0
   126f0:	|  |         adda.l d0,a0
   126f2:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   126f4:	|  |         move.l 1b182 <gameVersion>,d0
   126fa:	|  |         cmpi.l #511,d0
   12700:	|  |     /-- ble.s 1272a <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   12702:	|  |     |   move.l 1b310 <gameSettings+0x4>,d0
   12708:	|  |     +-- beq.s 1272a <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   1270a:	|  |     |   move.l 1b308 <languageName>,d1
   12710:	|  |     |   move.l 32(sp),d0
   12714:	|  |     |   add.l d0,d0
   12716:	|  |     |   add.l d0,d0
   12718:	|  |     |   movea.l d1,a2
   1271a:	|  |     |   adda.l d0,a2
   1271c:	|  |     |   move.l 40(sp),-(sp)
   12720:	|  |     |   jsr b02 <readString>
   12726:	|  |     |   addq.l #4,sp
   12728:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1272a:	|  |     \-> addq.l #1,32(sp)
   1272e:	|  \-------> move.l 1b310 <gameSettings+0x4>,d0
   12734:	|            cmp.l 32(sp),d0
   12738:	\----------- bcc.w 126b8 <makeLanguageTable+0xa2>
		}
	}
}
   1273c:	             nop
   1273e:	             nop
   12740:	             movea.l (sp)+,a2
   12742:	             movea.l (sp)+,a6
   12744:	             lea 28(sp),sp
   12748:	             rts

0001274a <readIniFile>:

void readIniFile (char * filename) {
   1274a:	                      lea -564(sp),sp
   1274e:	                      move.l a6,-(sp)
   12750:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   12752:	                      move.l 576(sp),-(sp)
   12756:	                      jsr b8 <copyString>
   1275c:	                      addq.l #4,sp
   1275e:	                      move.l d0,-(sp)
   12760:	                      jsr 1255e <getPrefsFilename>
   12766:	                      addq.l #4,sp
   12768:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   1276c:	                      move.l 562(sp),558(sp)
   12772:	                      move.l #1005,554(sp)
   1277a:	                      move.l 1b1e0 <DOSBase>,d0
   12780:	                      movea.l d0,a6
   12782:	                      move.l 558(sp),d1
   12786:	                      move.l 554(sp),d2
   1278a:	                      jsr -30(a6)
   1278e:	                      move.l d0,550(sp)
   12792:	                      move.l 550(sp),d0
   12796:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   1279a:	                      clr.l 1b30c <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   127a0:	                      move.w #1,1b314 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   127a8:	                      clr.l 1b316 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   127ae:	                      moveq #1,d0
   127b0:	                      move.l d0,1b31a <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   127b6:	                      clr.w 1b31e <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   127bc:	                      clr.w 1b320 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   127c2:	                      clr.w 1b322 <gameSettings+0x16>

	FreeVec(langName);
   127c8:	                      move.l 562(sp),542(sp)
   127ce:	                      move.l 1b1d8 <SysBase>,d0
   127d4:	                      movea.l d0,a6
   127d6:	                      movea.l 542(sp),a1
   127da:	                      jsr -690(a6)
	langName = NULL;
   127de:	                      clr.l 562(sp)

	if (fp) {
   127e2:	                      tst.l 546(sp)
   127e6:	/-------------------- beq.w 12ac4 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   127ea:	|                     move.l sp,d0
   127ec:	|                     addi.l #265,d0
   127f2:	|                     move.l #257,d1
   127f8:	|                     move.l d1,-(sp)
   127fa:	|                     clr.l -(sp)
   127fc:	|                     move.l d0,-(sp)
   127fe:	|                     jsr 15baa <memset>
   12804:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   12808:	|                     move.l sp,d0
   1280a:	|                     addq.l #8,d0
   1280c:	|                     move.l #257,d1
   12812:	|                     move.l d1,-(sp)
   12814:	|                     clr.l -(sp)
   12816:	|                     move.l d0,-(sp)
   12818:	|                     jsr 15baa <memset>
   1281e:	|                     lea 12(sp),sp
		unsigned char here = 0;
   12822:	|                     clr.b 571(sp)
		char readChar = ' ';
   12826:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   1282c:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   12832:	|                     clr.w 566(sp)
		LONG tmp = 0;
   12836:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   1283a:	|  /----------------> move.l 546(sp),534(sp)
   12840:	|  |                  move.l 1b1e0 <DOSBase>,d0
   12846:	|  |                  movea.l d0,a6
   12848:	|  |                  move.l 534(sp),d1
   1284c:	|  |                  jsr -306(a6)
   12850:	|  |                  move.l d0,530(sp)
   12854:	|  |                  move.l 530(sp),d0
   12858:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   1285c:	|  |                  moveq #-1,d1
   1285e:	|  |                  cmp.l 538(sp),d1
   12862:	|  |           /----- bne.s 12870 <readIniFile+0x126>
				readChar = '\n';
   12864:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   1286a:	|  |           |      clr.w 568(sp)
   1286e:	|  |           |  /-- bra.s 12876 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   12870:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   12876:	|  |              \-> move.b 570(sp),d0
   1287a:	|  |                  ext.w d0
   1287c:	|  |                  movea.w d0,a0
   1287e:	|  |                  moveq #61,d0
   12880:	|  |                  cmp.l a0,d0
   12882:	|  |     /----------- beq.w 12a2c <readIniFile+0x2e2>
   12886:	|  |     |            moveq #61,d1
   12888:	|  |     |            cmp.l a0,d1
   1288a:	|  |  /--|----------- blt.w 12a38 <readIniFile+0x2ee>
   1288e:	|  |  |  |            moveq #10,d0
   12890:	|  |  |  |            cmp.l a0,d0
   12892:	|  |  |  |        /-- beq.s 1289c <readIniFile+0x152>
   12894:	|  |  |  |        |   moveq #13,d1
   12896:	|  |  |  |        |   cmp.l a0,d1
   12898:	|  |  +--|--------|-- bne.w 12a38 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   1289c:	|  |  |  |        \-> tst.w 566(sp)
   128a0:	|  |  |  |     /----- beq.w 12a1a <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   128a4:	|  |  |  |     |      pea 185db <PutChar+0x2065>
   128aa:	|  |  |  |     |      move.l sp,d0
   128ac:	|  |  |  |     |      addi.l #269,d0
   128b2:	|  |  |  |     |      move.l d0,-(sp)
   128b4:	|  |  |  |     |      jsr 12be0 <strcmp>
   128ba:	|  |  |  |     |      addq.l #8,sp
   128bc:	|  |  |  |     |      tst.l d0
   128be:	|  |  |  |     |  /-- bne.s 128d8 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   128c0:	|  |  |  |     |  |   move.l sp,d0
   128c2:	|  |  |  |     |  |   addq.l #8,d0
   128c4:	|  |  |  |     |  |   move.l d0,-(sp)
   128c6:	|  |  |  |     |  |   jsr 12ad0 <stringToInt>
   128cc:	|  |  |  |     |  |   addq.l #4,sp
   128ce:	|  |  |  |     |  |   move.l d0,1b30c <gameSettings>
   128d4:	|  |  |  |     +--|-- bra.w 12a1a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   128d8:	|  |  |  |     |  \-> pea 185e4 <PutChar+0x206e>
   128de:	|  |  |  |     |      move.l sp,d0
   128e0:	|  |  |  |     |      addi.l #269,d0
   128e6:	|  |  |  |     |      move.l d0,-(sp)
   128e8:	|  |  |  |     |      jsr 12be0 <strcmp>
   128ee:	|  |  |  |     |      addq.l #8,sp
   128f0:	|  |  |  |     |      tst.l d0
   128f2:	|  |  |  |     |  /-- bne.s 12918 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   128f4:	|  |  |  |     |  |   move.l sp,d0
   128f6:	|  |  |  |     |  |   addq.l #8,d0
   128f8:	|  |  |  |     |  |   move.l d0,-(sp)
   128fa:	|  |  |  |     |  |   jsr 12ad0 <stringToInt>
   12900:	|  |  |  |     |  |   addq.l #4,sp
   12902:	|  |  |  |     |  |   tst.l d0
   12904:	|  |  |  |     |  |   seq d0
   12906:	|  |  |  |     |  |   neg.b d0
   12908:	|  |  |  |     |  |   move.b d0,d0
   1290a:	|  |  |  |     |  |   andi.w #255,d0
   1290e:	|  |  |  |     |  |   move.w d0,1b314 <gameSettings+0x8>
   12914:	|  |  |  |     +--|-- bra.w 12a1a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   12918:	|  |  |  |     |  \-> pea 185eb <PutChar+0x2075>
   1291e:	|  |  |  |     |      move.l sp,d0
   12920:	|  |  |  |     |      addi.l #269,d0
   12926:	|  |  |  |     |      move.l d0,-(sp)
   12928:	|  |  |  |     |      jsr 12be0 <strcmp>
   1292e:	|  |  |  |     |      addq.l #8,sp
   12930:	|  |  |  |     |      tst.l d0
   12932:	|  |  |  |     |  /-- bne.s 1294c <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   12934:	|  |  |  |     |  |   move.l sp,d0
   12936:	|  |  |  |     |  |   addq.l #8,d0
   12938:	|  |  |  |     |  |   move.l d0,-(sp)
   1293a:	|  |  |  |     |  |   jsr 12ad0 <stringToInt>
   12940:	|  |  |  |     |  |   addq.l #4,sp
   12942:	|  |  |  |     |  |   move.l d0,1b316 <gameSettings+0xa>
   12948:	|  |  |  |     +--|-- bra.w 12a1a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   1294c:	|  |  |  |     |  \-> pea 185f3 <PutChar+0x207d>
   12952:	|  |  |  |     |      move.l sp,d0
   12954:	|  |  |  |     |      addi.l #269,d0
   1295a:	|  |  |  |     |      move.l d0,-(sp)
   1295c:	|  |  |  |     |      jsr 12be0 <strcmp>
   12962:	|  |  |  |     |      addq.l #8,sp
   12964:	|  |  |  |     |      tst.l d0
   12966:	|  |  |  |     |  /-- bne.s 12980 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   12968:	|  |  |  |     |  |   move.l sp,d0
   1296a:	|  |  |  |     |  |   addq.l #8,d0
   1296c:	|  |  |  |     |  |   move.l d0,-(sp)
   1296e:	|  |  |  |     |  |   jsr 12ad0 <stringToInt>
   12974:	|  |  |  |     |  |   addq.l #4,sp
   12976:	|  |  |  |     |  |   move.l d0,1b31a <gameSettings+0xe>
   1297c:	|  |  |  |     +--|-- bra.w 12a1a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   12980:	|  |  |  |     |  \-> pea 185fd <PutChar+0x2087>
   12986:	|  |  |  |     |      move.l sp,d0
   12988:	|  |  |  |     |      addi.l #269,d0
   1298e:	|  |  |  |     |      move.l d0,-(sp)
   12990:	|  |  |  |     |      jsr 12be0 <strcmp>
   12996:	|  |  |  |     |      addq.l #8,sp
   12998:	|  |  |  |     |      tst.l d0
   1299a:	|  |  |  |     |  /-- bne.s 129b4 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   1299c:	|  |  |  |     |  |   move.l sp,d0
   1299e:	|  |  |  |     |  |   addq.l #8,d0
   129a0:	|  |  |  |     |  |   move.l d0,-(sp)
   129a2:	|  |  |  |     |  |   jsr 12ad0 <stringToInt>
   129a8:	|  |  |  |     |  |   addq.l #4,sp
   129aa:	|  |  |  |     |  |   move.l d0,d0
   129ac:	|  |  |  |     |  |   move.w d0,1b31e <gameSettings+0x12>
   129b2:	|  |  |  |     +--|-- bra.s 12a1a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   129b4:	|  |  |  |     |  \-> pea 18609 <PutChar+0x2093>
   129ba:	|  |  |  |     |      move.l sp,d0
   129bc:	|  |  |  |     |      addi.l #269,d0
   129c2:	|  |  |  |     |      move.l d0,-(sp)
   129c4:	|  |  |  |     |      jsr 12be0 <strcmp>
   129ca:	|  |  |  |     |      addq.l #8,sp
   129cc:	|  |  |  |     |      tst.l d0
   129ce:	|  |  |  |     |  /-- bne.s 129e8 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   129d0:	|  |  |  |     |  |   move.l sp,d0
   129d2:	|  |  |  |     |  |   addq.l #8,d0
   129d4:	|  |  |  |     |  |   move.l d0,-(sp)
   129d6:	|  |  |  |     |  |   jsr 12ad0 <stringToInt>
   129dc:	|  |  |  |     |  |   addq.l #4,sp
   129de:	|  |  |  |     |  |   move.l d0,d0
   129e0:	|  |  |  |     |  |   move.w d0,1b320 <gameSettings+0x14>
   129e6:	|  |  |  |     +--|-- bra.s 12a1a <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   129e8:	|  |  |  |     |  \-> pea 18617 <PutChar+0x20a1>
   129ee:	|  |  |  |     |      move.l sp,d0
   129f0:	|  |  |  |     |      addi.l #269,d0
   129f6:	|  |  |  |     |      move.l d0,-(sp)
   129f8:	|  |  |  |     |      jsr 12be0 <strcmp>
   129fe:	|  |  |  |     |      addq.l #8,sp
   12a00:	|  |  |  |     |      tst.l d0
   12a02:	|  |  |  |     +----- bne.s 12a1a <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   12a04:	|  |  |  |     |      move.l sp,d0
   12a06:	|  |  |  |     |      addq.l #8,d0
   12a08:	|  |  |  |     |      move.l d0,-(sp)
   12a0a:	|  |  |  |     |      jsr 12ad0 <stringToInt>
   12a10:	|  |  |  |     |      addq.l #4,sp
   12a12:	|  |  |  |     |      move.l d0,d0
   12a14:	|  |  |  |     |      move.w d0,1b322 <gameSettings+0x16>
					}
				}
				here = 0;
   12a1a:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   12a1e:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   12a22:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   12a26:	|  |  |  |            clr.b 8(sp)
				break;
   12a2a:	|  |  |  |  /-------- bra.s 12aa2 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   12a2c:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   12a32:	|  |  |     |         clr.b 571(sp)
				break;
   12a36:	|  |  |     +-------- bra.s 12aa2 <readIniFile+0x358>

				default:
				if (doingSecond) {
   12a38:	|  |  \-----|-------> tst.w 566(sp)
   12a3c:	|  |        |  /----- beq.s 12a70 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   12a3e:	|  |        |  |      move.b 571(sp),d0
   12a42:	|  |        |  |      move.b d0,d1
   12a44:	|  |        |  |      addq.b #1,d1
   12a46:	|  |        |  |      move.b d1,571(sp)
   12a4a:	|  |        |  |      move.b d0,d0
   12a4c:	|  |        |  |      andi.l #255,d0
   12a52:	|  |        |  |      lea 572(sp),a0
   12a56:	|  |        |  |      adda.l d0,a0
   12a58:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   12a5e:	|  |        |  |      moveq #0,d0
   12a60:	|  |        |  |      move.b 571(sp),d0
   12a64:	|  |        |  |      lea 572(sp),a0
   12a68:	|  |        |  |      adda.l d0,a0
   12a6a:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   12a6e:	|  |        |  |  /-- bra.s 12aa0 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   12a70:	|  |        |  \--|-> move.b 571(sp),d0
   12a74:	|  |        |     |   move.b d0,d1
   12a76:	|  |        |     |   addq.b #1,d1
   12a78:	|  |        |     |   move.b d1,571(sp)
   12a7c:	|  |        |     |   move.b d0,d0
   12a7e:	|  |        |     |   andi.l #255,d0
   12a84:	|  |        |     |   lea 572(sp),a0
   12a88:	|  |        |     |   adda.l d0,a0
   12a8a:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   12a90:	|  |        |     |   moveq #0,d0
   12a92:	|  |        |     |   move.b 571(sp),d0
   12a96:	|  |        |     |   lea 572(sp),a0
   12a9a:	|  |        |     |   adda.l d0,a0
   12a9c:	|  |        |     |   clr.b -307(a0)
				break;
   12aa0:	|  |        |     \-> nop
			}
		} while (keepGoing);
   12aa2:	|  |        \-------> tst.w 568(sp)
   12aa6:	|  \----------------- bne.w 1283a <readIniFile+0xf0>

		Close(fp);
   12aaa:	|                     move.l 546(sp),526(sp)
   12ab0:	|                     move.l 1b1e0 <DOSBase>,d0
   12ab6:	|                     movea.l d0,a6
   12ab8:	|                     move.l 526(sp),d1
   12abc:	|                     jsr -36(a6)
   12ac0:	|                     move.l d0,522(sp)
	}
}
   12ac4:	\-------------------> nop
   12ac6:	                      move.l (sp)+,d2
   12ac8:	                      movea.l (sp)+,a6
   12aca:	                      lea 564(sp),sp
   12ace:	                      rts

00012ad0 <stringToInt>:

unsigned int stringToInt (char * s) {
   12ad0:	             subq.l #8,sp
	int i = 0;
   12ad2:	             clr.l 4(sp)
	BOOL negative = FALSE;
   12ad6:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   12ada:	/----------> movea.l 12(sp),a0
   12ade:	|            move.b (a0),d0
   12ae0:	|            cmpi.b #47,d0
   12ae4:	|        /-- ble.s 12b1c <stringToInt+0x4c>
   12ae6:	|        |   movea.l 12(sp),a0
   12aea:	|        |   move.b (a0),d0
   12aec:	|        |   cmpi.b #57,d0
   12af0:	|        +-- bgt.s 12b1c <stringToInt+0x4c>
			i *= 10;
   12af2:	|        |   move.l 4(sp),d1
   12af6:	|        |   move.l d1,d0
   12af8:	|        |   add.l d0,d0
   12afa:	|        |   add.l d0,d0
   12afc:	|        |   add.l d1,d0
   12afe:	|        |   add.l d0,d0
   12b00:	|        |   move.l d0,4(sp)
			i += *s - '0';
   12b04:	|        |   movea.l 12(sp),a0
   12b08:	|        |   move.b (a0),d0
   12b0a:	|        |   ext.w d0
   12b0c:	|        |   movea.w d0,a0
   12b0e:	|        |   moveq #-48,d0
   12b10:	|        |   add.l a0,d0
   12b12:	|        |   add.l d0,4(sp)
			s ++;
   12b16:	|        |   addq.l #1,12(sp)
   12b1a:	|  /-----|-- bra.s 12b54 <stringToInt+0x84>
		} else if (*s == '-') {
   12b1c:	|  |     \-> movea.l 12(sp),a0
   12b20:	|  |         move.b (a0),d0
   12b22:	|  |         cmpi.b #45,d0
   12b26:	|  |     /-- bne.s 12b40 <stringToInt+0x70>
			negative = ! negative;
   12b28:	|  |     |   tst.w 2(sp)
   12b2c:	|  |     |   seq d0
   12b2e:	|  |     |   neg.b d0
   12b30:	|  |     |   move.b d0,d0
   12b32:	|  |     |   andi.w #255,d0
   12b36:	|  |     |   move.w d0,2(sp)
			s++;
   12b3a:	|  |     |   addq.l #1,12(sp)
   12b3e:	+--|-----|-- bra.s 12ada <stringToInt+0xa>
		} else {
			if (negative)
   12b40:	|  |     \-> tst.w 2(sp)
   12b44:	|  |     /-- beq.s 12b4e <stringToInt+0x7e>
				return -i;
   12b46:	|  |     |   move.l 4(sp),d0
   12b4a:	|  |     |   neg.l d0
   12b4c:	|  |  /--|-- bra.s 12b56 <stringToInt+0x86>
			return i;
   12b4e:	|  |  |  \-> move.l 4(sp),d0
   12b52:	|  |  +----- bra.s 12b56 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   12b54:	\--\--|----X bra.s 12ada <stringToInt+0xa>
		}
	}
   12b56:	      \----> addq.l #8,sp
   12b58:	             rts

00012b5a <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   12b5a:	    lea -28(sp),sp
   12b5e:	    move.l a6,-(sp)
   12b60:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   12b62:	    pea 18621 <PutChar+0x20ab>
   12b68:	    jsr 15c26 <KPrintF>
   12b6e:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   12b70:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   12b74:	    move.l 40(sp),30(sp)
   12b7a:	    move.l #1005,26(sp)
   12b82:	    move.l 1b1e0 <DOSBase>,d0
   12b88:	    movea.l d0,a6
   12b8a:	    move.l 30(sp),d1
   12b8e:	    move.l 26(sp),d2
   12b92:	    jsr -30(a6)
   12b96:	    move.l d0,22(sp)
   12b9a:	    move.l 22(sp),d0
   12b9e:	    move.l d0,18(sp)
	if (tester) {
   12ba2:	/-- beq.s 12bd2 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   12ba4:	|   pea 1863b <PutChar+0x20c5>
   12baa:	|   jsr 15c26 <KPrintF>
   12bb0:	|   addq.l #4,sp
		retval = 1;
   12bb2:	|   move.b #1,35(sp)
		Close(tester);
   12bb8:	|   move.l 18(sp),14(sp)
   12bbe:	|   move.l 1b1e0 <DOSBase>,d0
   12bc4:	|   movea.l d0,a6
   12bc6:	|   move.l 14(sp),d1
   12bca:	|   jsr -36(a6)
   12bce:	|   move.l d0,10(sp)
	}
	return retval;
   12bd2:	\-> move.b 35(sp),d0
   12bd6:	    move.l (sp)+,d2
   12bd8:	    movea.l (sp)+,a6
   12bda:	    lea 28(sp),sp
   12bde:	    rts

00012be0 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   12be0:	   /-- bra.s 12bea <strcmp+0xa>
    {
        s1++;
   12be2:	/--|-> addq.l #1,4(sp)
        s2++;
   12be6:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   12bea:	|  \-> movea.l 4(sp),a0
   12bee:	|      move.b (a0),d0
   12bf0:	|  /-- beq.s 12c02 <strcmp+0x22>
   12bf2:	|  |   movea.l 4(sp),a0
   12bf6:	|  |   move.b (a0),d1
   12bf8:	|  |   movea.l 8(sp),a0
   12bfc:	|  |   move.b (a0),d0
   12bfe:	|  |   cmp.b d1,d0
   12c00:	\--|-- beq.s 12be2 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   12c02:	   \-> movea.l 4(sp),a0
   12c06:	       move.b (a0),d0
   12c08:	       moveq #0,d1
   12c0a:	       move.b d0,d1
   12c0c:	       movea.l 8(sp),a0
   12c10:	       move.b (a0),d0
   12c12:	       move.b d0,d0
   12c14:	       andi.l #255,d0
   12c1a:	       sub.l d0,d1
   12c1c:	       move.l d1,d0
}
   12c1e:	       rts

00012c20 <strlen>:

long unsigned int strlen (const char *s) 
{  
   12c20:	       subq.l #4,sp
	long unsigned int i = 0;
   12c22:	       clr.l (sp)
	while(s[i]) i++; 
   12c24:	   /-- bra.s 12c28 <strlen+0x8>
   12c26:	/--|-> addq.l #1,(sp)
   12c28:	|  \-> movea.l 8(sp),a0
   12c2c:	|      adda.l (sp),a0
   12c2e:	|      move.b (a0),d0
   12c30:	\----- bne.s 12c26 <strlen+0x6>
	return(i);
   12c32:	       move.l (sp),d0
}
   12c34:	       addq.l #4,sp
   12c36:	       rts

00012c38 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   12c38:	    nop
   12c3a:	/-> move.l 8(sp),d0
   12c3e:	|   move.l d0,d1
   12c40:	|   addq.l #1,d1
   12c42:	|   move.l d1,8(sp)
   12c46:	|   movea.l 4(sp),a0
   12c4a:	|   lea 1(a0),a1
   12c4e:	|   move.l a1,4(sp)
   12c52:	|   movea.l d0,a1
   12c54:	|   move.b (a1),d0
   12c56:	|   move.b d0,(a0)
   12c58:	|   move.b (a0),d0
   12c5a:	\-- bne.s 12c3a <strcpy+0x2>
}
   12c5c:	    nop
   12c5e:	    rts

00012c60 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   12c60:	    lea -20(sp),sp
   12c64:	    move.l a6,-(sp)
   12c66:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   12c68:	    move.l 32(sp),-(sp)
   12c6c:	    jsr 12c20 <strlen>
   12c72:	    addq.l #4,sp
   12c74:	    move.l d0,d2
   12c76:	    move.l 36(sp),-(sp)
   12c7a:	    jsr 12c20 <strlen>
   12c80:	    addq.l #4,sp
   12c82:	    add.l d2,d0
   12c84:	    move.l d0,d1
   12c86:	    addq.l #1,d1
   12c88:	    move.l d1,20(sp)
   12c8c:	    clr.l 16(sp)
   12c90:	    move.l 1b1d8 <SysBase>,d0
   12c96:	    movea.l d0,a6
   12c98:	    move.l 20(sp),d0
   12c9c:	    move.l 16(sp),d1
   12ca0:	    jsr -684(a6)
   12ca4:	    move.l d0,12(sp)
   12ca8:	    move.l 12(sp),d0
   12cac:	    move.l d0,8(sp)
	char * t = newString;
   12cb0:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   12cb6:	    nop
   12cb8:	/-> move.l 32(sp),d0
   12cbc:	|   move.l d0,d1
   12cbe:	|   addq.l #1,d1
   12cc0:	|   move.l d1,32(sp)
   12cc4:	|   movea.l 24(sp),a0
   12cc8:	|   lea 1(a0),a1
   12ccc:	|   move.l a1,24(sp)
   12cd0:	|   movea.l d0,a1
   12cd2:	|   move.b (a1),d0
   12cd4:	|   move.b d0,(a0)
   12cd6:	|   move.b (a0),d0
   12cd8:	\-- bne.s 12cb8 <joinStrings+0x58>
	t--;
   12cda:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   12cde:	    nop
   12ce0:	/-> move.l 36(sp),d0
   12ce4:	|   move.l d0,d1
   12ce6:	|   addq.l #1,d1
   12ce8:	|   move.l d1,36(sp)
   12cec:	|   movea.l 24(sp),a0
   12cf0:	|   lea 1(a0),a1
   12cf4:	|   move.l a1,24(sp)
   12cf8:	|   movea.l d0,a1
   12cfa:	|   move.b (a1),d0
   12cfc:	|   move.b d0,(a0)
   12cfe:	|   move.b (a0),d0
   12d00:	\-- bne.s 12ce0 <joinStrings+0x80>

	return newString;
   12d02:	    move.l 8(sp),d0
}
   12d06:	    move.l (sp)+,d2
   12d08:	    movea.l (sp)+,a6
   12d0a:	    lea 20(sp),sp
   12d0e:	    rts

00012d10 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   12d10:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   12d14:	       moveq #10,d0
   12d16:	       cmp.l 28(sp),d0
   12d1a:	   /-- bne.s 12d38 <itoa+0x28>
   12d1c:	   |   tst.l 20(sp)
   12d20:	   +-- bge.s 12d38 <itoa+0x28>
        *str++ = '-';
   12d22:	   |   move.l 24(sp),d0
   12d26:	   |   move.l d0,d1
   12d28:	   |   addq.l #1,d1
   12d2a:	   |   move.l d1,24(sp)
   12d2e:	   |   movea.l d0,a0
   12d30:	   |   move.b #45,(a0)
        value *= -1;
   12d34:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   12d38:	   \-> move.l 24(sp),12(sp)
   12d3e:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   12d44:	   /-> move.l 20(sp),d0
   12d48:	   |   move.l 28(sp),-(sp)
   12d4c:	   |   move.l d0,-(sp)
   12d4e:	   |   jsr 1650c <__modsi3>
   12d54:	   |   addq.l #8,sp
   12d56:	   |   movea.l d0,a1
   12d58:	   |   move.l 12(sp),d0
   12d5c:	   |   move.l d0,d1
   12d5e:	   |   addq.l #1,d1
   12d60:	   |   move.l d1,12(sp)
   12d64:	   |   lea 18653 <PutChar+0x20dd>,a0
   12d6a:	   |   move.b (0,a1,a0.l),d1
   12d6e:	   |   movea.l d0,a0
   12d70:	   |   move.b d1,(a0)
        value /= base;
   12d72:	   |   move.l 28(sp),-(sp)
   12d76:	   |   move.l 24(sp),-(sp)
   12d7a:	   |   jsr 164de <__divsi3>
   12d80:	   |   addq.l #8,sp
   12d82:	   |   move.l d0,20(sp)
    } while (value);
   12d86:	   \-- bne.s 12d44 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   12d88:	       move.l 12(sp),d0
   12d8c:	       move.l d0,d1
   12d8e:	       subq.l #1,d1
   12d90:	       move.l d1,12(sp)
   12d94:	       movea.l d0,a0
   12d96:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   12d98:	       move.l 4(sp),8(sp)
   12d9e:	   /-- bra.s 12dc4 <itoa+0xb4>
        char temp = *low;
   12da0:	/--|-> movea.l 8(sp),a0
   12da4:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   12da8:	|  |   movea.l 12(sp),a0
   12dac:	|  |   move.b (a0),d0
   12dae:	|  |   movea.l 8(sp),a0
   12db2:	|  |   move.b d0,(a0)
        *ptr = temp;
   12db4:	|  |   movea.l 12(sp),a0
   12db8:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   12dbc:	|  |   addq.l #1,8(sp)
   12dc0:	|  |   subq.l #1,12(sp)
   12dc4:	|  \-> move.l 8(sp),d0
   12dc8:	|      cmp.l 12(sp),d0
   12dcc:	\----- bcs.s 12da0 <itoa+0x90>
    }
    return rc;
   12dce:	       move.l 4(sp),d0
}
   12dd2:	       lea 16(sp),sp
   12dd6:	       rts

00012dd8 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   12dd8:	                            lea -40(sp),sp
   12ddc:	                            move.l d2,-(sp)
    char* s = str;
   12dde:	                            move.l 48(sp),40(sp)
    const char* p = format;
   12de4:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   12dea:	   /----------------------- bra.w 12f1e <vsprintf2+0x146>
        if (*p == '%') {
   12dee:	/--|----------------------> movea.l 36(sp),a0
   12df2:	|  |                        move.b (a0),d0
   12df4:	|  |                        cmpi.b #37,d0
   12df8:	|  |  /-------------------- bne.w 12f04 <vsprintf2+0x12c>
            switch (*++p) {
   12dfc:	|  |  |                     addq.l #1,36(sp)
   12e00:	|  |  |                     movea.l 36(sp),a0
   12e04:	|  |  |                     move.b (a0),d0
   12e06:	|  |  |                     ext.w d0
   12e08:	|  |  |                     movea.w d0,a0
   12e0a:	|  |  |                     moveq #115,d0
   12e0c:	|  |  |                     cmp.l a0,d0
   12e0e:	|  |  |           /-------- beq.s 12e86 <vsprintf2+0xae>
   12e10:	|  |  |           |         moveq #115,d1
   12e12:	|  |  |           |         cmp.l a0,d1
   12e14:	|  |  |  /--------|-------- blt.w 12eec <vsprintf2+0x114>
   12e18:	|  |  |  |        |         moveq #99,d2
   12e1a:	|  |  |  |        |         cmp.l a0,d2
   12e1c:	|  |  |  |  /-----|-------- beq.w 12ec4 <vsprintf2+0xec>
   12e20:	|  |  |  |  |     |         moveq #100,d0
   12e22:	|  |  |  |  |     |         cmp.l a0,d0
   12e24:	|  |  |  +--|-----|-------- bne.w 12eec <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   12e28:	|  |  |  |  |     |         addq.l #4,56(sp)
   12e2c:	|  |  |  |  |     |         movea.l 56(sp),a0
   12e30:	|  |  |  |  |     |         move.l (a0),d0
   12e32:	|  |  |  |  |     |         move.l d0,d1
   12e34:	|  |  |  |  |     |         subq.l #1,d1
   12e36:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   12e3a:	|  |  |  |  |     |         pea a <_start+0xa>
   12e3e:	|  |  |  |  |     |         lea 8(sp),a0
   12e42:	|  |  |  |  |     |         move.l a0,-(sp)
   12e44:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   12e48:	|  |  |  |  |     |         jsr 12d10 <itoa>
   12e4e:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   12e52:	|  |  |  |  |     |         lea 44(sp),a0
   12e56:	|  |  |  |  |     |         lea -40(a0),a0
   12e5a:	|  |  |  |  |     |         move.l a0,28(sp)
   12e5e:	|  |  |  |  |     |     /-- bra.s 12e7a <vsprintf2+0xa2>
                        *s++ = *b;
   12e60:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   12e64:	|  |  |  |  |     |  |  |   move.l d0,d1
   12e66:	|  |  |  |  |     |  |  |   addq.l #1,d1
   12e68:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   12e6c:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   12e70:	|  |  |  |  |     |  |  |   move.b (a0),d1
   12e72:	|  |  |  |  |     |  |  |   movea.l d0,a0
   12e74:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   12e76:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   12e7a:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   12e7e:	|  |  |  |  |     |  |      move.b (a0),d0
   12e80:	|  |  |  |  |     |  \----- bne.s 12e60 <vsprintf2+0x88>
                    }
                    break;
   12e82:	|  |  |  |  |  /--|-------- bra.w 12f1a <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   12e86:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   12e8a:	|  |  |  |  |  |            movea.l 56(sp),a0
   12e8e:	|  |  |  |  |  |            move.l (a0),d0
   12e90:	|  |  |  |  |  |            move.l d0,d1
   12e92:	|  |  |  |  |  |            subq.l #1,d1
   12e94:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   12e98:	|  |  |  |  |  |        /-- bra.s 12eba <vsprintf2+0xe2>
                        *s++ = *sval++;
   12e9a:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   12e9e:	|  |  |  |  |  |     |  |   move.l d1,d2
   12ea0:	|  |  |  |  |  |     |  |   addq.l #1,d2
   12ea2:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   12ea6:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   12eaa:	|  |  |  |  |  |     |  |   move.l d0,d2
   12eac:	|  |  |  |  |  |     |  |   addq.l #1,d2
   12eae:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   12eb2:	|  |  |  |  |  |     |  |   movea.l d1,a0
   12eb4:	|  |  |  |  |  |     |  |   move.b (a0),d1
   12eb6:	|  |  |  |  |  |     |  |   movea.l d0,a0
   12eb8:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   12eba:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   12ebe:	|  |  |  |  |  |     |      move.b (a0),d0
   12ec0:	|  |  |  |  |  |     \----- bne.s 12e9a <vsprintf2+0xc2>
                    }
                    break;
   12ec2:	|  |  |  |  |  +----------- bra.s 12f1a <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   12ec4:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   12ec8:	|  |  |  |     |            movea.l 56(sp),a0
   12ecc:	|  |  |  |     |            move.l (a0),d0
   12ece:	|  |  |  |     |            move.l d0,d1
   12ed0:	|  |  |  |     |            subq.l #1,d1
   12ed2:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   12ed6:	|  |  |  |     |            move.l 40(sp),d0
   12eda:	|  |  |  |     |            move.l d0,d2
   12edc:	|  |  |  |     |            addq.l #1,d2
   12ede:	|  |  |  |     |            move.l d2,40(sp)
   12ee2:	|  |  |  |     |            move.l 24(sp),d1
   12ee6:	|  |  |  |     |            movea.l d0,a0
   12ee8:	|  |  |  |     |            move.b d1,(a0)
                    break;
   12eea:	|  |  |  |     +----------- bra.s 12f1a <vsprintf2+0x142>
                default:
                    *s++ = *p;
   12eec:	|  |  |  \-----|----------> move.l 40(sp),d0
   12ef0:	|  |  |        |            move.l d0,d1
   12ef2:	|  |  |        |            addq.l #1,d1
   12ef4:	|  |  |        |            move.l d1,40(sp)
   12ef8:	|  |  |        |            movea.l 36(sp),a0
   12efc:	|  |  |        |            move.b (a0),d1
   12efe:	|  |  |        |            movea.l d0,a0
   12f00:	|  |  |        |            move.b d1,(a0)
                    break;
   12f02:	|  |  |        +----------- bra.s 12f1a <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   12f04:	|  |  \--------|----------> move.l 40(sp),d0
   12f08:	|  |           |            move.l d0,d1
   12f0a:	|  |           |            addq.l #1,d1
   12f0c:	|  |           |            move.l d1,40(sp)
   12f10:	|  |           |            movea.l 36(sp),a0
   12f14:	|  |           |            move.b (a0),d1
   12f16:	|  |           |            movea.l d0,a0
   12f18:	|  |           |            move.b d1,(a0)
        }
        p++;
   12f1a:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   12f1e:	|  \----------------------> movea.l 36(sp),a0
   12f22:	|                           move.b (a0),d0
   12f24:	\-------------------------- bne.w 12dee <vsprintf2+0x16>
    }
    *s = '\0';
   12f28:	                            movea.l 40(sp),a0
   12f2c:	                            clr.b (a0)
    return s - str;
   12f2e:	                            move.l 40(sp),d0
   12f32:	                            sub.l 48(sp),d0
}
   12f36:	                            move.l (sp)+,d2
   12f38:	                            lea 40(sp),sp
   12f3c:	                            rts

00012f3e <sprintf>:

int sprintf(char* str, const char* format, ...) {
   12f3e:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   12f40:	moveq #16,d0
   12f42:	add.l sp,d0
   12f44:	move.l d0,d1
   12f46:	addq.l #4,d1
   12f48:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   12f4c:	move.l 16(sp),d0
   12f50:	move.l 4(sp),-(sp)
   12f54:	move.l d0,-(sp)
   12f56:	move.l 20(sp),-(sp)
   12f5a:	jsr 12dd8 <vsprintf2>
   12f60:	lea 12(sp),sp
   12f64:	move.l d0,(sp)
    va_end(args);
   12f66:	clr.l 4(sp)

    return done;
   12f6a:	move.l (sp),d0
}
   12f6c:	addq.l #8,sp
   12f6e:	rts

00012f70 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   12f70:	       lea -20(sp),sp
   12f74:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   12f76:	       moveq #12,d0
   12f78:	       move.l d0,20(sp)
   12f7c:	       clr.l 16(sp)
   12f80:	       move.l 1b1d8 <SysBase>,d0
   12f86:	       movea.l d0,a6
   12f88:	       move.l 20(sp),d0
   12f8c:	       move.l 16(sp),d1
   12f90:	       jsr -684(a6)
   12f94:	       move.l d0,12(sp)
   12f98:	       move.l 12(sp),d0
   12f9c:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   12fa0:	   /-- bne.s 12fa6 <addVarToStack+0x36>
   12fa2:	   |   clr.w d0
   12fa4:	/--|-- bra.s 12fee <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   12fa6:	|  \-> move.l 8(sp),d0
   12faa:	|      move.l d0,-(sp)
   12fac:	|      move.l 32(sp),-(sp)
   12fb0:	|      jsr 13ad2 <copyMain>
   12fb6:	|      addq.l #8,sp
   12fb8:	|      tst.w d0
   12fba:	|  /-- bne.s 12fd6 <addVarToStack+0x66>
        FreeVec(newStack);
   12fbc:	|  |   move.l 8(sp),4(sp)
   12fc2:	|  |   move.l 1b1d8 <SysBase>,d0
   12fc8:	|  |   movea.l d0,a6
   12fca:	|  |   movea.l 4(sp),a1
   12fce:	|  |   jsr -690(a6)
        return FALSE;
   12fd2:	|  |   clr.w d0
   12fd4:	+--|-- bra.s 12fee <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   12fd6:	|  \-> movea.l 32(sp),a0
   12fda:	|      move.l (a0),d0
   12fdc:	|      movea.l 8(sp),a0
   12fe0:	|      move.l d0,8(a0)
    *thisStack = newStack;
   12fe4:	|      movea.l 32(sp),a0
   12fe8:	|      move.l 8(sp),(a0)
    return TRUE;
   12fec:	|      moveq #1,d0
}
   12fee:	\----> movea.l (sp)+,a6
   12ff0:	       lea 20(sp),sp
   12ff4:	       rts

00012ff6 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   12ff6:	       lea -16(sp),sp
   12ffa:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   12ffc:	       moveq #12,d0
   12ffe:	       move.l d0,16(sp)
   13002:	       clr.l 12(sp)
   13006:	       move.l 1b1d8 <SysBase>,d0
   1300c:	       movea.l d0,a6
   1300e:	       move.l 16(sp),d0
   13012:	       move.l 12(sp),d1
   13016:	       jsr -684(a6)
   1301a:	       move.l d0,8(sp)
   1301e:	       move.l 8(sp),d0
   13022:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13026:	   /-- bne.s 1302c <addVarToStackQuick+0x36>
   13028:	   |   clr.w d0
   1302a:	/--|-- bra.s 13062 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   1302c:	|  \-> move.l 4(sp),d0
   13030:	|      pea 8 <_start+0x8>
   13034:	|      move.l 28(sp),-(sp)
   13038:	|      move.l d0,-(sp)
   1303a:	|      jsr 15bda <memcpy>
   13040:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13044:	|      movea.l 24(sp),a0
   13048:	|      clr.l (a0)

    newStack->next = *thisStack;
   1304a:	|      movea.l 28(sp),a0
   1304e:	|      move.l (a0),d0
   13050:	|      movea.l 4(sp),a0
   13054:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13058:	|      movea.l 28(sp),a0
   1305c:	|      move.l 4(sp),(a0)
    return TRUE;
   13060:	|      moveq #1,d0
}
   13062:	\----> movea.l (sp)+,a6
   13064:	       lea 16(sp),sp
   13068:	       rts

0001306a <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   1306a:	       lea -16(sp),sp
   1306e:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13070:	       movea.l 24(sp),a0
   13074:	       move.l (a0),d0
   13076:	       moveq #1,d1
   13078:	       cmp.l d0,d1
   1307a:	   /-- bne.s 130a4 <addVariablesInSecond+0x3a>
   1307c:	   |   movea.l 28(sp),a0
   13080:	   |   move.l (a0),d0
   13082:	   |   moveq #1,d1
   13084:	   |   cmp.l d0,d1
   13086:	   +-- bne.s 130a4 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13088:	   |   movea.l 28(sp),a0
   1308c:	   |   move.l 4(a0),d1
   13090:	   |   movea.l 24(sp),a0
   13094:	   |   move.l 4(a0),d0
   13098:	   |   add.l d1,d0
   1309a:	   |   movea.l 28(sp),a0
   1309e:	   |   move.l d0,4(a0)
   130a2:	/--|-- bra.s 1311e <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   130a4:	|  \-> move.l 24(sp),-(sp)
   130a8:	|      jsr 13d0a <getTextFromAnyVar>
   130ae:	|      addq.l #4,sp
   130b0:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   130b4:	|      move.l 28(sp),-(sp)
   130b8:	|      jsr 13d0a <getTextFromAnyVar>
   130be:	|      addq.l #4,sp
   130c0:	|      move.l d0,12(sp)

		unlinkVar(var2);
   130c4:	|      move.l 28(sp),-(sp)
   130c8:	|      jsr 13982 <unlinkVar>
   130ce:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   130d0:	|      move.l 12(sp),-(sp)
   130d4:	|      move.l 20(sp),-(sp)
   130d8:	|      jsr 12c60 <joinStrings>
   130de:	|      addq.l #8,sp
   130e0:	|      movea.l 28(sp),a0
   130e4:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   130e8:	|      movea.l 28(sp),a0
   130ec:	|      moveq #3,d0
   130ee:	|      move.l d0,(a0)
		FreeVec(string1);
   130f0:	|      move.l 16(sp),8(sp)
   130f6:	|      move.l 1b1d8 <SysBase>,d0
   130fc:	|      movea.l d0,a6
   130fe:	|      movea.l 8(sp),a1
   13102:	|      jsr -690(a6)
		FreeVec(string2);
   13106:	|      move.l 12(sp),4(sp)
   1310c:	|      move.l 1b1d8 <SysBase>,d0
   13112:	|      movea.l d0,a6
   13114:	|      movea.l 4(sp),a1
   13118:	|      jsr -690(a6)
	}
}
   1311c:	|      nop
   1311e:	\----> nop
   13120:	       movea.l (sp)+,a6
   13122:	       lea 16(sp),sp
   13126:	       rts

00013128 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   13128:	movea.l 8(sp),a0
   1312c:	move.l 4(a0),-(sp)
   13130:	move.l (a0),-(sp)
   13132:	movea.l 12(sp),a0
   13136:	move.l 4(a0),-(sp)
   1313a:	move.l (a0),-(sp)
   1313c:	jsr 1315e <compareVars>
   13142:	lea 16(sp),sp
   13146:	move.l d0,-(sp)
   13148:	pea 1 <_start+0x1>
   1314c:	move.l 16(sp),-(sp)
   13150:	jsr 14026 <setVariable>
   13156:	lea 12(sp),sp
}
   1315a:	nop
   1315c:	rts

0001315e <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   1315e:	       subq.l #4,sp
	int re = 0;
   13160:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   13162:	       move.l 8(sp),d1
   13166:	       move.l 16(sp),d0
   1316a:	       cmp.l d1,d0
   1316c:	/----- bne.w 13234 <compareVars+0xd6>
		switch (var1.varType) {
   13170:	|      move.l 8(sp),d0
   13174:	|      moveq #9,d1
   13176:	|      cmp.l d0,d1
   13178:	|  /-- bcs.w 1321c <compareVars+0xbe>
   1317c:	|  |   add.l d0,d0
   1317e:	|  |   movea.l d0,a0
   13180:	|  |   adda.l #78220,a0
   13186:	|  |   move.w (a0),d0
   13188:	|  |   jmp (1318c <compareVars+0x2e>,pc,d0.w)
   1318c:	|  |   ori.b #-112,(a4)
   13190:	|  |   ori.l #5243024,(a0)
   13196:	|  |   ori.l #7733392,(a0)
   1319c:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   131a2:	|  |   move.l d0,(sp)
			break;
   131a4:	+--|-- bra.w 13234 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   131a8:	|  |   move.l 12(sp),d1
   131ac:	|  |   move.l 20(sp),d0
   131b0:	|  |   cmp.l d1,d0
   131b2:	|  |   seq d0
   131b4:	|  |   neg.b d0
   131b6:	|  |   move.b d0,d0
   131b8:	|  |   andi.l #255,d0
   131be:	|  |   move.l d0,(sp)
			break;
   131c0:	+--|-- bra.s 13234 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   131c2:	|  |   move.l 12(sp),d1
   131c6:	|  |   move.l 20(sp),d0
   131ca:	|  |   cmp.l d1,d0
   131cc:	|  |   seq d0
   131ce:	|  |   neg.b d0
   131d0:	|  |   move.b d0,d0
   131d2:	|  |   andi.l #255,d0
   131d8:	|  |   move.l d0,(sp)
			break;
   131da:	+--|-- bra.s 13234 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   131dc:	|  |   move.l 20(sp),d1
   131e0:	|  |   move.l 12(sp),d0
   131e4:	|  |   move.l d1,-(sp)
   131e6:	|  |   move.l d0,-(sp)
   131e8:	|  |   jsr 12be0 <strcmp>
   131ee:	|  |   addq.l #8,sp
   131f0:	|  |   tst.l d0
   131f2:	|  |   seq d0
   131f4:	|  |   neg.b d0
   131f6:	|  |   move.b d0,d0
   131f8:	|  |   andi.l #255,d0
   131fe:	|  |   move.l d0,(sp)
			break;
   13200:	+--|-- bra.s 13234 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   13202:	|  |   move.l 12(sp),d1
   13206:	|  |   move.l 20(sp),d0
   1320a:	|  |   cmp.l d1,d0
   1320c:	|  |   seq d0
   1320e:	|  |   neg.b d0
   13210:	|  |   move.b d0,d0
   13212:	|  |   andi.l #255,d0
   13218:	|  |   move.l d0,(sp)
			break;
   1321a:	+--|-- bra.s 13234 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   1321c:	|  \-> move.l 12(sp),d1
   13220:	|      move.l 20(sp),d0
   13224:	|      cmp.l d1,d0
   13226:	|      seq d0
   13228:	|      neg.b d0
   1322a:	|      move.b d0,d0
   1322c:	|      andi.l #255,d0
   13232:	|      move.l d0,(sp)
		}
	}
	return re;
   13234:	\----> move.l (sp),d0
}
   13236:	       addq.l #4,sp
   13238:	       rts

0001323a <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1323a:	             lea -16(sp),sp
   1323e:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   13240:	             movea.l 28(sp),a0
   13244:	             moveq #6,d0
   13246:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13248:	             moveq #12,d0
   1324a:	             move.l d0,12(sp)
   1324e:	             clr.l 8(sp)
   13252:	             move.l 1b1d8 <SysBase>,d0
   13258:	             movea.l d0,a6
   1325a:	             move.l 12(sp),d0
   1325e:	             move.l 8(sp),d1
   13262:	             jsr -684(a6)
   13266:	             move.l d0,4(sp)
   1326a:	             move.l 4(sp),d0
   1326e:	             movea.l 28(sp),a0
   13272:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   13276:	             movea.l 28(sp),a0
   1327a:	             move.l 4(a0),d0
   1327e:	         /-- bne.s 13286 <copyStack+0x4c>
   13280:	         |   clr.w d0
   13282:	/--------|-- bra.w 13308 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   13286:	|        \-> movea.l 28(sp),a0
   1328a:	|            movea.l 4(a0),a0
   1328e:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   13290:	|            movea.l 28(sp),a0
   13294:	|            movea.l 4(a0),a0
   13298:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   1329c:	|            movea.l 28(sp),a0
   132a0:	|            movea.l 4(a0),a0
   132a4:	|            moveq #1,d0
   132a6:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   132aa:	|            movea.l 24(sp),a0
   132ae:	|            movea.l 4(a0),a0
   132b2:	|            move.l (a0),16(sp)

	while (a) {
   132b6:	|     /----- bra.s 13300 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   132b8:	|  /--|----> movea.l 28(sp),a0
   132bc:	|  |  |      move.l 4(a0),d0
   132c0:	|  |  |      move.l d0,d1
   132c2:	|  |  |      move.l 16(sp),d0
   132c6:	|  |  |      move.l d1,-(sp)
   132c8:	|  |  |      move.l d0,-(sp)
   132ca:	|  |  |      jsr 12f70 <addVarToStack>
   132d0:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   132d2:	|  |  |      movea.l 28(sp),a0
   132d6:	|  |  |      movea.l 4(a0),a0
   132da:	|  |  |      move.l 4(a0),d0
   132de:	|  |  |  /-- bne.s 132f6 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   132e0:	|  |  |  |   movea.l 28(sp),a0
   132e4:	|  |  |  |   movea.l 4(a0),a1
   132e8:	|  |  |  |   movea.l 28(sp),a0
   132ec:	|  |  |  |   movea.l 4(a0),a0
   132f0:	|  |  |  |   move.l (a1),d0
   132f2:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   132f6:	|  |  |  \-> movea.l 16(sp),a0
   132fa:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   13300:	|  |  \----> tst.l 16(sp)
   13304:	|  \-------- bne.s 132b8 <copyStack+0x7e>
	}

	return TRUE;
   13306:	|            moveq #1,d0
}
   13308:	\----------> movea.l (sp)+,a6
   1330a:	             lea 16(sp),sp
   1330e:	             rts

00013310 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   13310:	                lea -20(sp),sp
   13314:	                move.l a6,-(sp)
   13316:	                move.l 36(sp),d0
   1331a:	                move.w d0,d0
   1331c:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   13320:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   13326:	                clr.l 16(sp)

    while (*huntVar) {
   1332a:	   /----------- bra.s 133a8 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   1332c:	/--|----------> movea.l 20(sp),a0
   13330:	|  |            movea.l (a0),a0
   13332:	|  |            movea.l 28(sp),a1
   13336:	|  |            move.l 4(a1),-(sp)
   1333a:	|  |            move.l (a1),-(sp)
   1333c:	|  |            move.l 4(a0),-(sp)
   13340:	|  |            move.l (a0),-(sp)
   13342:	|  |            jsr 1315e <compareVars>
   13348:	|  |            lea 16(sp),sp
   1334c:	|  |            tst.l d0
   1334e:	|  |  /-------- beq.s 1339a <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   13350:	|  |  |         movea.l 20(sp),a0
   13354:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   13358:	|  |  |         movea.l 12(sp),a0
   1335c:	|  |  |         move.l 8(a0),d0
   13360:	|  |  |         movea.l 20(sp),a0
   13364:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   13366:	|  |  |         move.l 12(sp),d0
   1336a:	|  |  |         move.l d0,-(sp)
   1336c:	|  |  |         jsr 13982 <unlinkVar>
   13372:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   13374:	|  |  |         move.l 12(sp),8(sp)
   1337a:	|  |  |         move.l 1b1d8 <SysBase>,d0
   13380:	|  |  |         movea.l d0,a6
   13382:	|  |  |         movea.l 8(sp),a1
   13386:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1338a:	|  |  |         tst.w 6(sp)
   1338e:	|  |  |     /-- bne.s 13394 <deleteVarFromStack+0x84>
   13390:	|  |  |     |   moveq #1,d0
   13392:	|  |  |  /--|-- bra.s 133b6 <deleteVarFromStack+0xa6>
            reply++;
   13394:	|  |  |  |  \-> addq.l #1,16(sp)
   13398:	|  +--|--|----- bra.s 133a8 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   1339a:	|  |  \--|----> movea.l 20(sp),a0
   1339e:	|  |     |      move.l (a0),d0
   133a0:	|  |     |      move.l d0,d1
   133a2:	|  |     |      addq.l #8,d1
   133a4:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   133a8:	|  \-----|----> movea.l 20(sp),a0
   133ac:	|        |      move.l (a0),d0
   133ae:	\--------|----- bne.w 1332c <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   133b2:	         |      move.l 16(sp),d0
}
   133b6:	         \----> movea.l (sp)+,a6
   133b8:	                lea 20(sp),sp
   133bc:	                rts

000133be <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   133be:	       movea.l 4(sp),a0
   133c2:	       move.l 4(a0),d0
   133c6:	       cmp.l 8(sp),d0
   133ca:	   /-- bhi.s 133d0 <fastArrayGetByIndex+0x12>
   133cc:	   |   moveq #0,d0
   133ce:	/--|-- bra.s 133de <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   133d0:	|  \-> movea.l 4(sp),a0
   133d4:	|      move.l (a0),d1
   133d6:	|      move.l 8(sp),d0
   133da:	|      lsl.l #3,d0
   133dc:	|      add.l d1,d0
}
   133de:	\----> rts

000133e0 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   133e0:	                lea -32(sp),sp
   133e4:	                move.l a6,-(sp)
   133e6:	                move.l a2,-(sp)
    struct persona *p = NULL;
   133e8:	                clr.l 36(sp)

    switch (thisVar->varType) {
   133ec:	                movea.l 44(sp),a0
   133f0:	                move.l (a0),d0
   133f2:	                moveq #8,d1
   133f4:	                cmp.l d0,d1
   133f6:	            /-- beq.s 13404 <getCostumeFromVar+0x24>
   133f8:	            |   moveq #9,d1
   133fa:	            |   cmp.l d0,d1
   133fc:	   /--------|-- beq.w 134b2 <getCostumeFromVar+0xd2>
   13400:	/--|--------|-- bra.w 134bc <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   13404:	|  |        \-> moveq #8,d0
   13406:	|  |            move.l d0,28(sp)
   1340a:	|  |            clr.l 24(sp)
   1340e:	|  |            move.l 1b1d8 <SysBase>,d0
   13414:	|  |            movea.l d0,a6
   13416:	|  |            move.l 28(sp),d0
   1341a:	|  |            move.l 24(sp),d1
   1341e:	|  |            jsr -684(a6)
   13422:	|  |            move.l d0,20(sp)
   13426:	|  |            move.l 20(sp),d0
   1342a:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   1342e:	|  |        /-- bne.s 13436 <getCostumeFromVar+0x56>
   13430:	|  |        |   moveq #0,d0
   13432:	|  |  /-----|-- bra.w 134e6 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   13436:	|  |  |     \-> movea.l 36(sp),a0
   1343a:	|  |  |         moveq #1,d1
   1343c:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   13440:	|  |  |         moveq #12,d0
   13442:	|  |  |         move.l d0,16(sp)
   13446:	|  |  |         clr.l 12(sp)
   1344a:	|  |  |         move.l 1b1d8 <SysBase>,d0
   13450:	|  |  |         movea.l d0,a6
   13452:	|  |  |         move.l 16(sp),d0
   13456:	|  |  |         move.l 12(sp),d1
   1345a:	|  |  |         jsr -684(a6)
   1345e:	|  |  |         move.l d0,8(sp)
   13462:	|  |  |         move.l 8(sp),d0
   13466:	|  |  |         movea.l 36(sp),a0
   1346a:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   1346c:	|  |  |         movea.l 36(sp),a0
   13470:	|  |  |         move.l (a0),d0
   13472:	|  |  |     /-- bne.s 13478 <getCostumeFromVar+0x98>
   13474:	|  |  |     |   moveq #0,d0
   13476:	|  |  +-----|-- bra.s 134e6 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   13478:	|  |  |     \-> clr.l 32(sp)
   1347c:	|  |  |     /-- bra.s 134a8 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1347e:	|  |  |  /--|-> movea.l 44(sp),a0
   13482:	|  |  |  |  |   move.l 4(a0),d0
   13486:	|  |  |  |  |   movea.l 36(sp),a0
   1348a:	|  |  |  |  |   movea.l (a0),a0
   1348c:	|  |  |  |  |   move.l 32(sp),d1
   13490:	|  |  |  |  |   add.l d1,d1
   13492:	|  |  |  |  |   add.l d1,d1
   13494:	|  |  |  |  |   lea (0,a0,d1.l),a2
   13498:	|  |  |  |  |   move.l d0,-(sp)
   1349a:	|  |  |  |  |   jsr 8564 <copyAnim>
   134a0:	|  |  |  |  |   addq.l #4,sp
   134a2:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   134a4:	|  |  |  |  |   addq.l #1,32(sp)
   134a8:	|  |  |  |  \-> moveq #2,d1
   134aa:	|  |  |  |      cmp.l 32(sp),d1
   134ae:	|  |  |  \----- bge.s 1347e <getCostumeFromVar+0x9e>
            }
            break;
   134b0:	|  |  |     /-- bra.s 134e2 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   134b2:	|  \--|-----|-> movea.l 44(sp),a0
   134b6:	|     |     |   move.l 4(a0),d0
   134ba:	|     +-----|-- bra.s 134e6 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   134bc:	\-----|-----|-> movea.l 44(sp),a0
   134c0:	      |     |   move.l (a0),d0
   134c2:	      |     |   add.l d0,d0
   134c4:	      |     |   movea.l d0,a1
   134c6:	      |     |   adda.l d0,a1
   134c8:	      |     |   lea 1b0b6 <typeName>,a0
   134ce:	      |     |   move.l (0,a1,a0.l),d0
   134d2:	      |     |   move.l d0,-(sp)
   134d4:	      |     |   pea 186c5 <PutChar+0x214f>
   134da:	      |     |   jsr 15c26 <KPrintF>
   134e0:	      |     |   addq.l #8,sp
    }

    return p;
   134e2:	      |     \-> move.l 36(sp),d0
}
   134e6:	      \-------> movea.l (sp)+,a2
   134e8:	                movea.l (sp)+,a6
   134ea:	                lea 32(sp),sp
   134ee:	                rts

000134f0 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   134f0:	                lea -96(sp),sp
   134f4:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   134f8:	                move.l 116(sp),-(sp)
   134fc:	                pea 186fd <PutChar+0x2187>
   13502:	                jsr 12c60 <joinStrings>
   13508:	                addq.l #8,sp
   1350a:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   1350e:	            /-- bne.s 13516 <getSavedGamesStack+0x26>
   13510:	            |   clr.w d0
   13512:	/-----------|-- bra.w 1372a <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   13516:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   1351a:	|               move.l #100095,98(sp)
   13522:	|               moveq #-2,d0
   13524:	|               move.l d0,94(sp)
   13528:	|               move.l 1b1e0 <DOSBase>,d0
   1352e:	|               movea.l d0,a6
   13530:	|               move.l 98(sp),d1
   13534:	|               move.l 94(sp),d2
   13538:	|               jsr -84(a6)
   1353c:	|               move.l d0,90(sp)
   13540:	|               move.l 90(sp),d0
   13544:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   13548:	|           /-- bne.s 13550 <getSavedGamesStack+0x60>
   1354a:	|           |   clr.w d0
   1354c:	+-----------|-- bra.w 1372a <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   13550:	|           \-> move.l #260,82(sp)
   13558:	|               move.l #65536,78(sp)
   13560:	|               move.l 1b1d8 <SysBase>,d0
   13566:	|               movea.l d0,a6
   13568:	|               move.l 82(sp),d0
   1356c:	|               move.l 78(sp),d1
   13570:	|               jsr -684(a6)
   13574:	|               move.l d0,74(sp)
   13578:	|               move.l 74(sp),d0
   1357c:	|               move.l d0,70(sp)
	if (!fib) {
   13580:	|           /-- bne.s 1359e <getSavedGamesStack+0xae>
		UnLock(dirLock);
   13582:	|           |   move.l 86(sp),22(sp)
   13588:	|           |   move.l 1b1e0 <DOSBase>,d0
   1358e:	|           |   movea.l d0,a6
   13590:	|           |   move.l 22(sp),d1
   13594:	|           |   jsr -90(a6)
		return FALSE;
   13598:	|           |   clr.w d0
   1359a:	+-----------|-- bra.w 1372a <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   1359e:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   135a2:	|               move.l 86(sp),66(sp)
   135a8:	|               move.l 70(sp),62(sp)
   135ae:	|               move.l 1b1e0 <DOSBase>,d0
   135b4:	|               movea.l d0,a6
   135b6:	|               move.l 66(sp),d1
   135ba:	|               move.l 62(sp),d2
   135be:	|               jsr -102(a6)
   135c2:	|               move.l d0,58(sp)
   135c6:	|               move.l 58(sp),d0
   135ca:	|  /----------- beq.w 136de <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   135ce:	|  |        /-- bra.w 136aa <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   135d2:	|  |  /-----|-> move.l 70(sp),d2
   135d6:	|  |  |     |   addq.l #8,d2
   135d8:	|  |  |     |   move.l 70(sp),d0
   135dc:	|  |  |     |   addq.l #8,d0
   135de:	|  |  |     |   move.l d0,-(sp)
   135e0:	|  |  |     |   jsr 12c20 <strlen>
   135e6:	|  |  |     |   addq.l #4,sp
   135e8:	|  |  |     |   move.l d0,d3
   135ea:	|  |  |     |   move.l 116(sp),-(sp)
   135ee:	|  |  |     |   jsr 12c20 <strlen>
   135f4:	|  |  |     |   addq.l #4,sp
   135f6:	|  |  |     |   move.l d3,d1
   135f8:	|  |  |     |   sub.l d0,d1
   135fa:	|  |  |     |   move.l d2,d0
   135fc:	|  |  |     |   add.l d1,d0
   135fe:	|  |  |     |   move.l 116(sp),-(sp)
   13602:	|  |  |     |   move.l d0,-(sp)
   13604:	|  |  |     |   jsr 12be0 <strcmp>
   1360a:	|  |  |     |   addq.l #8,sp
   1360c:	|  |  |     |   tst.l d0
   1360e:	|  |  |     +-- bne.w 136aa <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   13612:	|  |  |     |   move.l 70(sp),d0
   13616:	|  |  |     |   addq.l #8,d0
   13618:	|  |  |     |   move.l d0,-(sp)
   1361a:	|  |  |     |   jsr 12c20 <strlen>
   13620:	|  |  |     |   addq.l #4,sp
   13622:	|  |  |     |   move.l d0,d2
   13624:	|  |  |     |   move.l 116(sp),-(sp)
   13628:	|  |  |     |   jsr 12c20 <strlen>
   1362e:	|  |  |     |   addq.l #4,sp
   13630:	|  |  |     |   move.l d0,d1
   13632:	|  |  |     |   move.l d2,d0
   13634:	|  |  |     |   sub.l d1,d0
   13636:	|  |  |     |   movea.l 70(sp),a0
   1363a:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   1363e:	|  |  |     |   move.l 70(sp),d0
   13642:	|  |  |     |   addq.l #8,d0
   13644:	|  |  |     |   move.l d0,-(sp)
   13646:	|  |  |     |   jsr 118 <decodeFilename>
   1364c:	|  |  |     |   addq.l #4,sp
   1364e:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   13652:	|  |  |     |   move.l 42(sp),-(sp)
   13656:	|  |  |     |   lea 18(sp),a0
   1365a:	|  |  |     |   move.l a0,-(sp)
   1365c:	|  |  |     |   jsr 13956 <makeTextVar>
   13662:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   13664:	|  |  |     |   move.l 42(sp),38(sp)
   1366a:	|  |  |     |   move.l 1b1d8 <SysBase>,d0
   13670:	|  |  |     |   movea.l d0,a6
   13672:	|  |  |     |   movea.l 38(sp),a1
   13676:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1367a:	|  |  |     |   move.l 112(sp),d0
   1367e:	|  |  |     |   move.l d0,-(sp)
   13680:	|  |  |     |   lea 18(sp),a0
   13684:	|  |  |     |   move.l a0,-(sp)
   13686:	|  |  |     |   jsr 12f70 <addVarToStack>
   1368c:	|  |  |     |   addq.l #8,sp
   1368e:	|  |  |     |   tst.w d0
   13690:	|  |  |  /--|-- beq.s 136e2 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   13692:	|  |  |  |  |   movea.l 112(sp),a0
   13696:	|  |  |  |  |   move.l 4(a0),d0
   1369a:	|  |  |  |  +-- bne.s 136aa <getSavedGamesStack+0x1ba>
   1369c:	|  |  |  |  |   movea.l 112(sp),a0
   136a0:	|  |  |  |  |   move.l (a0),d0
   136a2:	|  |  |  |  |   movea.l 112(sp),a0
   136a6:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   136aa:	|  |  |  |  \-> move.l 86(sp),54(sp)
   136b0:	|  |  |  |      move.l 70(sp),50(sp)
   136b6:	|  |  |  |      move.l 1b1e0 <DOSBase>,d0
   136bc:	|  |  |  |      movea.l d0,a6
   136be:	|  |  |  |      move.l 54(sp),d1
   136c2:	|  |  |  |      move.l 50(sp),d2
   136c6:	|  |  |  |      jsr -108(a6)
   136ca:	|  |  |  |      move.l d0,46(sp)
   136ce:	|  |  |  |      move.l 46(sp),d0
   136d2:	|  |  \--|----- bne.w 135d2 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   136d6:	|  |     |      move.w #1,106(sp)
   136dc:	|  |     |  /-- bra.s 136e4 <getSavedGamesStack+0x1f4>
	}

cleanup:
   136de:	|  \-----|--|-> nop
   136e0:	|        |  +-- bra.s 136e4 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   136e2:	|        \--|-> nop
	FreeVec(fib);
   136e4:	|           \-> move.l 70(sp),34(sp)
   136ea:	|               move.l 1b1d8 <SysBase>,d0
   136f0:	|               movea.l d0,a6
   136f2:	|               movea.l 34(sp),a1
   136f6:	|               jsr -690(a6)
	UnLock(dirLock);
   136fa:	|               move.l 86(sp),30(sp)
   13700:	|               move.l 1b1e0 <DOSBase>,d0
   13706:	|               movea.l d0,a6
   13708:	|               move.l 30(sp),d1
   1370c:	|               jsr -90(a6)
	FreeVec(pattern);
   13710:	|               move.l 102(sp),26(sp)
   13716:	|               move.l 1b1d8 <SysBase>,d0
   1371c:	|               movea.l d0,a6
   1371e:	|               movea.l 26(sp),a1
   13722:	|               jsr -690(a6)
	return result;
   13726:	|               move.w 106(sp),d0
}
   1372a:	\-------------> movem.l (sp)+,d2-d3/a6
   1372e:	                lea 96(sp),sp
   13732:	                rts

00013734 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   13734:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   13736:	       movea.l 20(sp),a0
   1373a:	       move.l (a0),d0
   1373c:	       cmp.l 16(sp),d0
   13740:	/----- beq.s 137a4 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   13742:	|      move.l 16(sp),d0
   13746:	|      add.l d0,d0
   13748:	|      movea.l d0,a1
   1374a:	|      adda.l d0,a1
   1374c:	|      lea 1b0b6 <typeName>,a0
   13752:	|      move.l (0,a1,a0.l),d0
   13756:	|      move.l d0,-(sp)
   13758:	|      pea 18701 <PutChar+0x218b>
   1375e:	|      jsr 12c60 <joinStrings>
   13764:	|      addq.l #8,sp
   13766:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   1376a:	|      movea.l 20(sp),a0
   1376e:	|      move.l (a0),d0
   13770:	|      add.l d0,d0
   13772:	|      movea.l d0,a1
   13774:	|      adda.l d0,a1
   13776:	|      lea 1b0b6 <typeName>,a0
   1377c:	|      move.l (0,a1,a0.l),d0
   13780:	|      move.l d0,-(sp)
   13782:	|      pea 18743 <PutChar+0x21cd>
   13788:	|      jsr 12c60 <joinStrings>
   1378e:	|      addq.l #8,sp
   13790:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   13792:	|      move.l (sp),-(sp)
   13794:	|      move.l 8(sp),-(sp)
   13798:	|      jsr 15c26 <KPrintF>
   1379e:	|      addq.l #8,sp

		return FALSE;
   137a0:	|      clr.w d0
   137a2:	|  /-- bra.s 137b4 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   137a4:	\--|-> movea.l 20(sp),a0
   137a8:	   |   move.l 4(a0),d0
   137ac:	   |   movea.l 12(sp),a0
   137b0:	   |   move.l d0,(a0)
	return TRUE;
   137b2:	   |   moveq #1,d0
}
   137b4:	   \-> addq.l #8,sp
   137b6:	       rts

000137b8 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   137b8:	move.l 8(sp),-(sp)
   137bc:	jsr 5b78 <getNumberedString>
   137c2:	addq.l #4,sp
   137c4:	move.l d0,-(sp)
   137c6:	move.l 8(sp),-(sp)
   137ca:	jsr 13956 <makeTextVar>
   137d0:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   137d2:	movea.l 4(sp),a0
   137d6:	move.l 4(a0),d0
   137da:	sne d0
   137dc:	neg.b d0
   137de:	move.b d0,d0
   137e0:	andi.w #255,d0
}
   137e4:	rts

000137e6 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   137e6:	          subq.l #8,sp
    int size = stackSize(stacky);
   137e8:	          move.l 16(sp),-(sp)
   137ec:	          jsr 14094 <stackSize>
   137f2:	          addq.l #4,sp
   137f4:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   137f8:	          move.l 4(sp),-(sp)
   137fc:	          move.l 16(sp),-(sp)
   13800:	          jsr 13850 <makeFastArraySize>
   13806:	          addq.l #8,sp
   13808:	          tst.w d0
   1380a:	      /-- bne.s 13810 <makeFastArrayFromStack+0x2a>
   1380c:	      |   clr.w d0
   1380e:	/-----|-- bra.s 1384c <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   13810:	|     \-> movea.l 16(sp),a0
   13814:	|         move.l (a0),(sp)
    size = 0;
   13816:	|         clr.l 4(sp)
    while (allV) {
   1381a:	|     /-- bra.s 13846 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   1381c:	|  /--|-> movea.l 12(sp),a0
   13820:	|  |  |   movea.l 4(a0),a0
   13824:	|  |  |   move.l (a0),d1
   13826:	|  |  |   move.l 4(sp),d0
   1382a:	|  |  |   lsl.l #3,d0
   1382c:	|  |  |   add.l d0,d1
   1382e:	|  |  |   move.l (sp),d0
   13830:	|  |  |   move.l d1,-(sp)
   13832:	|  |  |   move.l d0,-(sp)
   13834:	|  |  |   jsr 13ad2 <copyMain>
   1383a:	|  |  |   addq.l #8,sp
        size++;
   1383c:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   13840:	|  |  |   movea.l (sp),a0
   13842:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   13846:	|  |  \-> tst.l (sp)
   13848:	|  \----- bne.s 1381c <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   1384a:	|         moveq #1,d0
}
   1384c:	\-------> addq.l #8,sp
   1384e:	          rts

00013850 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   13850:	          lea -28(sp),sp
   13854:	          move.l a6,-(sp)
    if (size < 0) {
   13856:	          tst.l 40(sp)
   1385a:	      /-- bge.s 13870 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   1385c:	      |   pea 18788 <PutChar+0x2212>
   13862:	      |   jsr 15c26 <KPrintF>
   13868:	      |   addq.l #4,sp
		return FALSE;
   1386a:	      |   clr.w d0
   1386c:	/-----|-- bra.w 1394e <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   13870:	|     \-> move.l 36(sp),-(sp)
   13874:	|         jsr 13982 <unlinkVar>
   1387a:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   1387c:	|         movea.l 36(sp),a0
   13880:	|         moveq #10,d0
   13882:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   13884:	|         moveq #12,d0
   13886:	|         move.l d0,24(sp)
   1388a:	|         clr.l 20(sp)
   1388e:	|         move.l 1b1d8 <SysBase>,d0
   13894:	|         movea.l d0,a6
   13896:	|         move.l 24(sp),d0
   1389a:	|         move.l 20(sp),d1
   1389e:	|         jsr -684(a6)
   138a2:	|         move.l d0,16(sp)
   138a6:	|         move.l 16(sp),d0
   138aa:	|         movea.l 36(sp),a0
   138ae:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   138b2:	|         movea.l 36(sp),a0
   138b6:	|         move.l 4(a0),d0
   138ba:	|     /-- bne.s 138c2 <makeFastArraySize+0x72>
   138bc:	|     |   clr.w d0
   138be:	+-----|-- bra.w 1394e <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   138c2:	|     \-> move.l 40(sp),d0
   138c6:	|         lsl.l #3,d0
   138c8:	|         move.l d0,12(sp)
   138cc:	|         clr.l 8(sp)
   138d0:	|         move.l 1b1d8 <SysBase>,d0
   138d6:	|         movea.l d0,a6
   138d8:	|         move.l 12(sp),d0
   138dc:	|         move.l 8(sp),d1
   138e0:	|         jsr -684(a6)
   138e4:	|         move.l d0,4(sp)
   138e8:	|         move.l 4(sp),d0
   138ec:	|         movea.l 36(sp),a0
   138f0:	|         movea.l 4(a0),a0
   138f4:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   138f6:	|         movea.l 36(sp),a0
   138fa:	|         movea.l 4(a0),a0
   138fe:	|         move.l (a0),d0
   13900:	|     /-- bne.s 13906 <makeFastArraySize+0xb6>
   13902:	|     |   clr.w d0
   13904:	+-----|-- bra.s 1394e <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   13906:	|     \-> clr.l 28(sp)
   1390a:	|     /-- bra.s 13926 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   1390c:	|  /--|-> movea.l 36(sp),a0
   13910:	|  |  |   movea.l 4(a0),a0
   13914:	|  |  |   move.l (a0),d1
   13916:	|  |  |   move.l 28(sp),d0
   1391a:	|  |  |   lsl.l #3,d0
   1391c:	|  |  |   movea.l d1,a0
   1391e:	|  |  |   adda.l d0,a0
   13920:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   13922:	|  |  |   addq.l #1,28(sp)
   13926:	|  |  \-> move.l 28(sp),d0
   1392a:	|  |      cmp.l 40(sp),d0
   1392e:	|  \----- blt.s 1390c <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   13930:	|         movea.l 36(sp),a0
   13934:	|         movea.l 4(a0),a0
   13938:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   1393e:	|         movea.l 36(sp),a0
   13942:	|         movea.l 4(a0),a0
   13946:	|         moveq #1,d0
   13948:	|         move.l d0,8(a0)
    return TRUE;
   1394c:	|         moveq #1,d0
}
   1394e:	\-------> movea.l (sp)+,a6
   13950:	          lea 28(sp),sp
   13954:	          rts

00013956 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   13956:	move.l 4(sp),-(sp)
   1395a:	jsr 13982 <unlinkVar>
   13960:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   13962:	movea.l 4(sp),a0
   13966:	moveq #3,d0
   13968:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   1396a:	move.l 8(sp),-(sp)
   1396e:	jsr b8 <copyString>
   13974:	addq.l #4,sp
   13976:	movea.l 4(sp),a0
   1397a:	move.l d0,4(a0)
}
   1397e:	nop
   13980:	rts

00013982 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   13982:	                      lea -16(sp),sp
   13986:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   13988:	                      movea.l 24(sp),a0
   1398c:	                      move.l (a0),d0
   1398e:	                      moveq #10,d1
   13990:	                      cmp.l d0,d1
   13992:	            /-------- beq.w 13a4a <unlinkVar+0xc8>
   13996:	            |         moveq #10,d1
   13998:	            |         cmp.l d0,d1
   1399a:	/-----------|-------- bcs.w 13abe <unlinkVar+0x13c>
   1399e:	|           |         moveq #8,d1
   139a0:	|           |         cmp.l d0,d1
   139a2:	|  /--------|-------- beq.w 13aaa <unlinkVar+0x128>
   139a6:	|  |        |         moveq #8,d1
   139a8:	|  |        |         cmp.l d0,d1
   139aa:	+--|--------|-------- bcs.w 13abe <unlinkVar+0x13c>
   139ae:	|  |        |         moveq #3,d1
   139b0:	|  |        |         cmp.l d0,d1
   139b2:	|  |        |     /-- beq.s 139be <unlinkVar+0x3c>
   139b4:	|  |        |     |   moveq #6,d1
   139b6:	|  |        |     |   cmp.l d0,d1
   139b8:	|  |        |  /--|-- beq.s 139e4 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   139ba:	+--|--------|--|--|-- bra.w 13abe <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   139be:	|  |        |  |  \-> movea.l 24(sp),a0
   139c2:	|  |        |  |      move.l 4(a0),4(sp)
   139c8:	|  |        |  |      move.l 1b1d8 <SysBase>,d0
   139ce:	|  |        |  |      movea.l d0,a6
   139d0:	|  |        |  |      movea.l 4(sp),a1
   139d4:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   139d8:	|  |        |  |      movea.l 24(sp),a0
   139dc:	|  |        |  |      clr.l 4(a0)
		break;
   139e0:	|  |  /-----|--|----- bra.w 13ac8 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   139e4:	|  |  |     |  \----> movea.l 24(sp),a0
   139e8:	|  |  |     |         movea.l 4(a0),a0
   139ec:	|  |  |     |         move.l 8(a0),d0
   139f0:	|  |  |     |         subq.l #1,d0
   139f2:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   139f6:	|  |  |     |         movea.l 24(sp),a0
   139fa:	|  |  |     |         movea.l 4(a0),a0
   139fe:	|  |  |     |         move.l 8(a0),d0
   13a02:	|  |  |  /--|-------- bgt.w 13ac2 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   13a06:	|  |  |  |  |     /-- bra.s 13a1a <unlinkVar+0x98>
   13a08:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   13a0c:	|  |  |  |  |  |  |   move.l 4(a0),d0
   13a10:	|  |  |  |  |  |  |   move.l d0,-(sp)
   13a12:	|  |  |  |  |  |  |   jsr 140b8 <trimStack>
   13a18:	|  |  |  |  |  |  |   addq.l #4,sp
   13a1a:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   13a1e:	|  |  |  |  |  |      movea.l 4(a0),a0
   13a22:	|  |  |  |  |  |      move.l (a0),d0
   13a24:	|  |  |  |  |  \----- bne.s 13a08 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   13a26:	|  |  |  |  |         movea.l 24(sp),a0
   13a2a:	|  |  |  |  |         move.l 4(a0),8(sp)
   13a30:	|  |  |  |  |         move.l 1b1d8 <SysBase>,d0
   13a36:	|  |  |  |  |         movea.l d0,a6
   13a38:	|  |  |  |  |         movea.l 8(sp),a1
   13a3c:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   13a40:	|  |  |  |  |         movea.l 24(sp),a0
   13a44:	|  |  |  |  |         clr.l 4(a0)
		break;
   13a48:	|  |  |  +--|-------- bra.s 13ac2 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   13a4a:	|  |  |  |  \-------> movea.l 24(sp),a0
   13a4e:	|  |  |  |            movea.l 4(a0),a0
   13a52:	|  |  |  |            move.l 8(a0),d0
   13a56:	|  |  |  |            subq.l #1,d0
   13a58:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   13a5c:	|  |  |  |            movea.l 24(sp),a0
   13a60:	|  |  |  |            movea.l 4(a0),a0
   13a64:	|  |  |  |            move.l 8(a0),d0
   13a68:	|  |  |  |        /-- bgt.s 13ac6 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   13a6a:	|  |  |  |        |   movea.l 24(sp),a0
   13a6e:	|  |  |  |        |   movea.l 4(a0),a0
   13a72:	|  |  |  |        |   move.l (a0),16(sp)
   13a76:	|  |  |  |        |   move.l 1b1d8 <SysBase>,d0
   13a7c:	|  |  |  |        |   movea.l d0,a6
   13a7e:	|  |  |  |        |   movea.l 16(sp),a1
   13a82:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   13a86:	|  |  |  |        |   movea.l 24(sp),a0
   13a8a:	|  |  |  |        |   move.l 4(a0),12(sp)
   13a90:	|  |  |  |        |   move.l 1b1d8 <SysBase>,d0
   13a96:	|  |  |  |        |   movea.l d0,a6
   13a98:	|  |  |  |        |   movea.l 12(sp),a1
   13a9c:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   13aa0:	|  |  |  |        |   movea.l 24(sp),a0
   13aa4:	|  |  |  |        |   clr.l 4(a0)
		break;
   13aa8:	|  |  |  |        +-- bra.s 13ac6 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   13aaa:	|  \--|--|--------|-> movea.l 24(sp),a0
   13aae:	|     |  |        |   move.l 4(a0),d0
   13ab2:	|     |  |        |   move.l d0,-(sp)
   13ab4:	|     |  |        |   jsr 8930 <deleteAnim>
   13aba:	|     |  |        |   addq.l #4,sp
		break;
   13abc:	|     +--|--------|-- bra.s 13ac8 <unlinkVar+0x146>
		break;
   13abe:	\-----|--|--------|-> nop
   13ac0:	      +--|--------|-- bra.s 13ac8 <unlinkVar+0x146>
		break;
   13ac2:	      |  \--------|-> nop
   13ac4:	      +-----------|-- bra.s 13ac8 <unlinkVar+0x146>
		break;
   13ac6:	      |           \-> nop
	}
}
   13ac8:	      \-------------> nop
   13aca:	                      movea.l (sp)+,a6
   13acc:	                      lea 16(sp),sp
   13ad0:	                      rts

00013ad2 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   13ad2:	       movea.l 4(sp),a0
   13ad6:	       move.l (a0),d0
   13ad8:	       movea.l 8(sp),a0
   13adc:	       move.l d0,(a0)
	switch (to->varType) {
   13ade:	       movea.l 8(sp),a0
   13ae2:	       move.l (a0),d0
   13ae4:	       moveq #10,d1
   13ae6:	       cmp.l d0,d1
   13ae8:	/----- bcs.w 13bda <copyMain+0x108>
   13aec:	|      add.l d0,d0
   13aee:	|      movea.l d0,a0
   13af0:	|      adda.l #80636,a0
   13af6:	|      move.w (a0),d0
   13af8:	|      jmp (13afc <copyMain+0x2a>,pc,d0.w)
   13afc:	|      .short 0x00da
   13afe:	|      ori.b #22,(a6)
   13b02:	|      ori.w #22,(a4)
   13b06:	|      ori.b #-126,(a6)
   13b0a:	|      ori.b #-68,(a6)
   13b0e:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   13b16:	|      move.l 4(a0),d0
   13b1a:	|      movea.l 8(sp),a0
   13b1e:	|      move.l d0,4(a0)
		return TRUE;
   13b22:	|      moveq #1,d0
   13b24:	|  /-- bra.w 13bec <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   13b28:	|  |   movea.l 4(sp),a0
   13b2c:	|  |   move.l 4(a0),d0
   13b30:	|  |   movea.l 8(sp),a0
   13b34:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   13b38:	|  |   movea.l 8(sp),a0
   13b3c:	|  |   movea.l 4(a0),a0
   13b40:	|  |   move.l 8(a0),d0
   13b44:	|  |   addq.l #1,d0
   13b46:	|  |   move.l d0,8(a0)
		return TRUE;
   13b4a:	|  |   moveq #1,d0
   13b4c:	|  +-- bra.w 13bec <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   13b50:	|  |   movea.l 4(sp),a0
   13b54:	|  |   move.l 4(a0),d0
   13b58:	|  |   move.l d0,-(sp)
   13b5a:	|  |   jsr b8 <copyString>
   13b60:	|  |   addq.l #4,sp
   13b62:	|  |   movea.l 8(sp),a0
   13b66:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   13b6a:	|  |   movea.l 8(sp),a0
   13b6e:	|  |   move.l 4(a0),d0
   13b72:	|  |   sne d0
   13b74:	|  |   neg.b d0
   13b76:	|  |   move.b d0,d0
   13b78:	|  |   andi.w #255,d0
   13b7c:	|  +-- bra.s 13bec <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   13b7e:	|  |   movea.l 4(sp),a0
   13b82:	|  |   move.l 4(a0),d0
   13b86:	|  |   movea.l 8(sp),a0
   13b8a:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   13b8e:	|  |   movea.l 8(sp),a0
   13b92:	|  |   movea.l 4(a0),a0
   13b96:	|  |   move.l 8(a0),d0
   13b9a:	|  |   addq.l #1,d0
   13b9c:	|  |   move.l d0,8(a0)
		return TRUE;
   13ba0:	|  |   moveq #1,d0
   13ba2:	|  +-- bra.s 13bec <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   13ba4:	|  |   movea.l 4(sp),a0
   13ba8:	|  |   move.l 4(a0),d0
   13bac:	|  |   movea.l 8(sp),a0
   13bb0:	|  |   move.l d0,4(a0)
		return TRUE;
   13bb4:	|  |   moveq #1,d0
   13bb6:	|  +-- bra.s 13bec <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   13bb8:	|  |   movea.l 4(sp),a0
   13bbc:	|  |   move.l 4(a0),d0
   13bc0:	|  |   move.l d0,-(sp)
   13bc2:	|  |   jsr 8564 <copyAnim>
   13bc8:	|  |   addq.l #4,sp
   13bca:	|  |   movea.l 8(sp),a0
   13bce:	|  |   move.l d0,4(a0)
		return TRUE;
   13bd2:	|  |   moveq #1,d0
   13bd4:	|  +-- bra.s 13bec <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   13bd6:	|  |   moveq #1,d0
   13bd8:	|  +-- bra.s 13bec <copyMain+0x11a>

		default:
		break;
   13bda:	\--|-> nop
	}
	KPrintF("Unknown value type");
   13bdc:	   |   pea 187d9 <PutChar+0x2263>
   13be2:	   |   jsr 15c26 <KPrintF>
   13be8:	   |   addq.l #4,sp
	return FALSE;
   13bea:	   |   clr.w d0
}
   13bec:	   \-> rts

00013bee <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   13bee:	move.l 8(sp),-(sp)
   13bf2:	jsr 13982 <unlinkVar>
   13bf8:	addq.l #4,sp
	return copyMain(from, to);
   13bfa:	move.l 8(sp),-(sp)
   13bfe:	move.l 8(sp),-(sp)
   13c02:	jsr 13ad2 <copyMain>
   13c08:	addq.l #8,sp
}
   13c0a:	rts

00013c0c <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   13c0c:	       movea.l 4(sp),a0
   13c10:	       move.l (a0),d0
   13c12:	       moveq #8,d1
   13c14:	       cmp.l d0,d1
   13c16:	   /-- bne.s 13c2c <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   13c18:	   |   movea.l 4(sp),a0
   13c1c:	   |   move.l 4(a0),d0
   13c20:	   |   move.l d0,-(sp)
   13c22:	   |   jsr 8564 <copyAnim>
   13c28:	   |   addq.l #4,sp
   13c2a:	/--|-- bra.s 13c72 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   13c2c:	|  \-> movea.l 4(sp),a0
   13c30:	|      move.l (a0),d0
   13c32:	|      moveq #1,d1
   13c34:	|      cmp.l d0,d1
   13c36:	|  /-- bne.s 13c4a <getAnimationFromVar+0x3e>
   13c38:	|  |   movea.l 4(sp),a0
   13c3c:	|  |   move.l 4(a0),d0
   13c40:	|  +-- bne.s 13c4a <getAnimationFromVar+0x3e>
		return makeNullAnim();
   13c42:	|  |   jsr 9d34 <makeNullAnim>
   13c48:	+--|-- bra.s 13c72 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13c4a:	|  \-> movea.l 4(sp),a0
   13c4e:	|      move.l (a0),d0
   13c50:	|      add.l d0,d0
   13c52:	|      movea.l d0,a1
   13c54:	|      adda.l d0,a1
   13c56:	|      lea 1b0b6 <typeName>,a0
   13c5c:	|      move.l (0,a1,a0.l),d0
   13c60:	|      move.l d0,-(sp)
   13c62:	|      pea 186c5 <PutChar+0x214f>
   13c68:	|      jsr 15c26 <KPrintF>
   13c6e:	|      addq.l #8,sp
	return NULL;
   13c70:	|      moveq #0,d0
}
   13c72:	\----> rts

00013c74 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   13c74:	       movea.l 4(sp),a0
   13c78:	       move.l (a0),d0
   13c7a:	       moveq #10,d1
   13c7c:	       cmp.l d0,d1
   13c7e:	/----- bcs.w 13d04 <getBoolean+0x90>
   13c82:	|      add.l d0,d0
   13c84:	|      movea.l d0,a0
   13c86:	|      adda.l #81042,a0
   13c8c:	|      move.w (a0),d0
   13c8e:	|      jmp (13c92 <getBoolean+0x1e>,pc,d0.w)
   13c92:	|      ori.b #26,(a6)
   13c96:	|      ori.w #68,(114,a2,d0.w)
   13c9c:	|      ori.w #46,(114,a2,d0.w)
   13ca2:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   13ca8:	|      clr.w d0
   13caa:	|  /-- bra.s 13d08 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   13cac:	|  |   movea.l 4(sp),a0
   13cb0:	|  |   move.l 4(a0),d0
   13cb4:	|  |   sne d0
   13cb6:	|  |   neg.b d0
   13cb8:	|  |   move.b d0,d0
   13cba:	|  |   andi.w #255,d0
   13cbe:	|  +-- bra.s 13d08 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   13cc0:	|  |   movea.l 4(sp),a0
   13cc4:	|  |   movea.l 4(a0),a0
   13cc8:	|  |   move.l (a0),d0
   13cca:	|  |   sne d0
   13ccc:	|  |   neg.b d0
   13cce:	|  |   move.b d0,d0
   13cd0:	|  |   andi.w #255,d0
   13cd4:	|  +-- bra.s 13d08 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   13cd6:	|  |   movea.l 4(sp),a0
   13cda:	|  |   movea.l 4(a0),a0
   13cde:	|  |   move.b (a0),d0
   13ce0:	|  |   sne d0
   13ce2:	|  |   neg.b d0
   13ce4:	|  |   move.b d0,d0
   13ce6:	|  |   andi.w #255,d0
   13cea:	|  +-- bra.s 13d08 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   13cec:	|  |   movea.l 4(sp),a0
   13cf0:	|  |   movea.l 4(a0),a0
   13cf4:	|  |   move.l 4(a0),d0
   13cf8:	|  |   sne d0
   13cfa:	|  |   neg.b d0
   13cfc:	|  |   move.b d0,d0
   13cfe:	|  |   andi.w #255,d0
   13d02:	|  +-- bra.s 13d08 <getBoolean+0x94>

		default:
		break;
   13d04:	\--|-> nop
	}
	return TRUE;
   13d06:	   |   moveq #1,d0
}
   13d08:	   \-> rts

00013d0a <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   13d0a:	      /----------> lea -76(sp),sp
   13d0e:	      |            move.l a6,-(sp)
	switch (from->varType) {
   13d10:	      |            movea.l 84(sp),a0
   13d14:	      |            move.l (a0),d0
   13d16:	      |            moveq #10,d1
   13d18:	      |            cmp.l d0,d1
   13d1a:	/-----|----------- bcs.w 13fb8 <getTextFromAnyVar+0x2ae>
   13d1e:	|     |            add.l d0,d0
   13d20:	|     |            movea.l d0,a0
   13d22:	|     |            adda.l #81198,a0
   13d28:	|     |            move.w (a0),d0
   13d2a:	|     |            jmp (13d2e <getTextFromAnyVar+0x24>,pc,d0.w)
   13d2e:	|     |            .short 0x028a
   13d30:	|     |            bset d0,(a0)+
   13d32:	|     |            .short 0x028a
   13d34:	|     |            ori.b #-118,(a6)
   13d38:	|     |            andi.b #8,ccr
   13d3c:	|     |            andi.w #650,-(a0)
   13d40:	|     |            .short 0x028a
   13d42:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   13d48:	|     |            move.l 4(a0),d0
   13d4c:	|     |            move.l d0,-(sp)
   13d4e:	|     |            jsr b8 <copyString>
   13d54:	|     |            addq.l #4,sp
   13d56:	|  /--|----------- bra.w 13fda <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   13d5a:	|  |  |            pea 187ec <PutChar+0x2276>
   13d60:	|  |  |            jsr b8 <copyString>
   13d66:	|  |  |            addq.l #4,sp
   13d68:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13d6c:	|  |  |            clr.l 72(sp)
   13d70:	|  |  |     /----- bra.w 13e1a <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   13d74:	|  |  |  /--|----> pea 187f2 <PutChar+0x227c>
   13d7a:	|  |  |  |  |      move.l 80(sp),-(sp)
   13d7e:	|  |  |  |  |      jsr 12c60 <joinStrings>
   13d84:	|  |  |  |  |      addq.l #8,sp
   13d86:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   13d8a:	|  |  |  |  |  /-- bne.s 13d92 <getTextFromAnyVar+0x88>
   13d8c:	|  |  |  |  |  |   moveq #0,d0
   13d8e:	|  +--|--|--|--|-- bra.w 13fda <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13d92:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   13d98:	|  |  |  |  |      move.l 1b1d8 <SysBase>,d0
   13d9e:	|  |  |  |  |      movea.l d0,a6
   13da0:	|  |  |  |  |      movea.l 56(sp),a1
   13da4:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   13da8:	|  |  |  |  |      movea.l 84(sp),a0
   13dac:	|  |  |  |  |      movea.l 4(a0),a0
   13db0:	|  |  |  |  |      move.l (a0),d1
   13db2:	|  |  |  |  |      move.l 72(sp),d0
   13db6:	|  |  |  |  |      lsl.l #3,d0
   13db8:	|  |  |  |  |      add.l d1,d0
   13dba:	|  |  |  |  |      move.l d0,-(sp)
   13dbc:	|  |  +--|--|----- jsr 13d0a <getTextFromAnyVar>(pc)
   13dc0:	|  |  |  |  |      addq.l #4,sp
   13dc2:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   13dc6:	|  |  |  |  |      move.l 52(sp),-(sp)
   13dca:	|  |  |  |  |      move.l 64(sp),-(sp)
   13dce:	|  |  |  |  |      jsr 12c60 <joinStrings>
   13dd4:	|  |  |  |  |      addq.l #8,sp
   13dd6:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   13dda:	|  |  |  |  |  /-- bne.s 13de2 <getTextFromAnyVar+0xd8>
   13ddc:	|  |  |  |  |  |   moveq #0,d0
   13dde:	|  +--|--|--|--|-- bra.w 13fda <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   13de2:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   13de8:	|  |  |  |  |      move.l 1b1d8 <SysBase>,d0
   13dee:	|  |  |  |  |      movea.l d0,a6
   13df0:	|  |  |  |  |      movea.l 48(sp),a1
   13df4:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   13df8:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   13dfc:	|  |  |  |  |      move.l 60(sp),44(sp)
   13e02:	|  |  |  |  |      move.l 1b1d8 <SysBase>,d0
   13e08:	|  |  |  |  |      movea.l d0,a6
   13e0a:	|  |  |  |  |      movea.l 44(sp),a1
   13e0e:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   13e12:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   13e16:	|  |  |  |  |      addq.l #1,72(sp)
   13e1a:	|  |  |  |  \----> movea.l 84(sp),a0
   13e1e:	|  |  |  |         movea.l 4(a0),a0
   13e22:	|  |  |  |         move.l 4(a0),d0
   13e26:	|  |  |  |         cmp.l 72(sp),d0
   13e2a:	|  |  |  \-------- bgt.w 13d74 <getTextFromAnyVar+0x6a>
			}
			return builder;
   13e2e:	|  |  |            move.l 76(sp),d0
   13e32:	|  +--|----------- bra.w 13fda <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   13e36:	|  |  |            pea 187f4 <PutChar+0x227e>
   13e3c:	|  |  |            jsr b8 <copyString>
   13e42:	|  |  |            addq.l #4,sp
   13e44:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   13e48:	|  |  |            movea.l 84(sp),a0
   13e4c:	|  |  |            movea.l 4(a0),a0
   13e50:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   13e54:	|  |  |     /----- bra.w 13ef6 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   13e58:	|  |  |  /--|----> pea 187f2 <PutChar+0x227c>
   13e5e:	|  |  |  |  |      move.l 72(sp),-(sp)
   13e62:	|  |  |  |  |      jsr 12c60 <joinStrings>
   13e68:	|  |  |  |  |      addq.l #8,sp
   13e6a:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   13e6e:	|  |  |  |  |  /-- bne.s 13e76 <getTextFromAnyVar+0x16c>
   13e70:	|  |  |  |  |  |   moveq #0,d0
   13e72:	|  +--|--|--|--|-- bra.w 13fda <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   13e76:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   13e7c:	|  |  |  |  |      move.l 1b1d8 <SysBase>,d0
   13e82:	|  |  |  |  |      movea.l d0,a6
   13e84:	|  |  |  |  |      movea.l 32(sp),a1
   13e88:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   13e8c:	|  |  |  |  |      move.l 64(sp),d0
   13e90:	|  |  |  |  |      move.l d0,-(sp)
   13e92:	|  |  \--|--|----- jsr 13d0a <getTextFromAnyVar>(pc)
   13e96:	|  |     |  |      addq.l #4,sp
   13e98:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   13e9c:	|  |     |  |      move.l 28(sp),-(sp)
   13ea0:	|  |     |  |      move.l 40(sp),-(sp)
   13ea4:	|  |     |  |      jsr 12c60 <joinStrings>
   13eaa:	|  |     |  |      addq.l #8,sp
   13eac:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   13eb0:	|  |     |  |  /-- bne.s 13eb8 <getTextFromAnyVar+0x1ae>
   13eb2:	|  |     |  |  |   moveq #0,d0
   13eb4:	|  +-----|--|--|-- bra.w 13fda <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   13eb8:	|  |     |  |  \-> move.l 28(sp),24(sp)
   13ebe:	|  |     |  |      move.l 1b1d8 <SysBase>,d0
   13ec4:	|  |     |  |      movea.l d0,a6
   13ec6:	|  |     |  |      movea.l 24(sp),a1
   13eca:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   13ece:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   13ed2:	|  |     |  |      move.l 36(sp),20(sp)
   13ed8:	|  |     |  |      move.l 1b1d8 <SysBase>,d0
   13ede:	|  |     |  |      movea.l d0,a6
   13ee0:	|  |     |  |      movea.l 20(sp),a1
   13ee4:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   13ee8:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   13eec:	|  |     |  |      movea.l 64(sp),a0
   13ef0:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   13ef6:	|  |     |  \----> tst.l 64(sp)
   13efa:	|  |     \-------- bne.w 13e58 <getTextFromAnyVar+0x14e>
			}
			return builder;
   13efe:	|  |               move.l 68(sp),d0
   13f02:	|  +-------------- bra.w 13fda <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   13f06:	|  |               moveq #10,d0
   13f08:	|  |               move.l d0,16(sp)
   13f0c:	|  |               clr.l 12(sp)
   13f10:	|  |               move.l 1b1d8 <SysBase>,d0
   13f16:	|  |               movea.l d0,a6
   13f18:	|  |               move.l 16(sp),d0
   13f1c:	|  |               move.l 12(sp),d1
   13f20:	|  |               jsr -684(a6)
   13f24:	|  |               move.l d0,8(sp)
   13f28:	|  |               move.l 8(sp),d0
   13f2c:	|  |               move.l d0,4(sp)
			if (! buff) {
   13f30:	|  |           /-- bne.s 13f46 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   13f32:	|  |           |   pea 187fb <PutChar+0x2285>
   13f38:	|  |           |   jsr 15c26 <KPrintF>
   13f3e:	|  |           |   addq.l #4,sp
				return NULL;
   13f40:	|  |           |   moveq #0,d0
   13f42:	|  +-----------|-- bra.w 13fda <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   13f46:	|  |           \-> movea.l 84(sp),a0
   13f4a:	|  |               move.l 4(a0),d0
   13f4e:	|  |               move.l d0,-(sp)
   13f50:	|  |               pea 18825 <PutChar+0x22af>
   13f56:	|  |               move.l 12(sp),-(sp)
   13f5a:	|  |               jsr 12f3e <sprintf>
   13f60:	|  |               lea 12(sp),sp
			return buff;
   13f64:	|  |               move.l 4(sp),d0
   13f68:	|  +-------------- bra.s 13fda <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   13f6a:	|  |               movea.l 84(sp),a0
   13f6e:	|  |               move.l 4(a0),d0
   13f72:	|  |               move.l d0,-(sp)
   13f74:	|  |               jsr 3030 <resourceNameFromNum>
   13f7a:	|  |               addq.l #4,sp
   13f7c:	|  |               move.l d0,-(sp)
   13f7e:	|  |               pea 17165 <PutChar+0xbef>
   13f84:	|  |               jsr 12c60 <joinStrings>
   13f8a:	|  |               addq.l #8,sp
   13f8c:	|  +-------------- bra.s 13fda <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   13f8e:	|  |               movea.l 84(sp),a0
   13f92:	|  |               move.l 4(a0),d0
   13f96:	|  |               move.l d0,-(sp)
   13f98:	|  |               jsr c52c <findObjectType>
   13f9e:	|  |               addq.l #4,sp
   13fa0:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   13fa4:	+--|-------------- beq.s 13fb8 <getTextFromAnyVar+0x2ae>
   13fa6:	|  |               movea.l 40(sp),a0
   13faa:	|  |               move.l (a0),d0
   13fac:	|  |               move.l d0,-(sp)
   13fae:	|  |               jsr b8 <copyString>
   13fb4:	|  |               addq.l #4,sp
   13fb6:	|  +-------------- bra.s 13fda <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   13fb8:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   13fba:	   |               movea.l 84(sp),a0
   13fbe:	   |               move.l (a0),d0
   13fc0:	   |               add.l d0,d0
   13fc2:	   |               movea.l d0,a1
   13fc4:	   |               adda.l d0,a1
   13fc6:	   |               lea 1b0b6 <typeName>,a0
   13fcc:	   |               move.l (0,a1,a0.l),d0
   13fd0:	   |               move.l d0,-(sp)
   13fd2:	   |               jsr b8 <copyString>
   13fd8:	   |               addq.l #4,sp
}
   13fda:	   \-------------> movea.l (sp)+,a6
   13fdc:	                   lea 76(sp),sp
   13fe0:	                   rts

00013fe2 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   13fe2:	move.l 4(sp),-(sp)
   13fe6:	jsr 13982 <unlinkVar>
   13fec:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   13fee:	movea.l 4(sp),a0
   13ff2:	moveq #8,d0
   13ff4:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   13ff6:	movea.l 4(sp),a0
   13ffa:	move.l 8(sp),4(a0)
}
   14000:	nop
   14002:	rts

00014004 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14004:	move.l 4(sp),-(sp)
   14008:	jsr 13982 <unlinkVar>
   1400e:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14010:	movea.l 4(sp),a0
   14014:	moveq #9,d0
   14016:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14018:	movea.l 4(sp),a0
   1401c:	move.l 8(sp),4(a0)
}
   14022:	nop
   14024:	rts

00014026 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   14026:	move.l 4(sp),-(sp)
   1402a:	jsr 13982 <unlinkVar>
   14030:	addq.l #4,sp
	thisVar->varType = vT;
   14032:	movea.l 4(sp),a0
   14036:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   1403a:	movea.l 4(sp),a0
   1403e:	move.l 12(sp),4(a0)
}
   14044:	nop
   14046:	rts

00014048 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14048:	      /-- bra.s 1405a <stackGetByIndex+0x12>
        vS = vS->next;
   1404a:	/-----|-> movea.l 4(sp),a0
   1404e:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14054:	|     +-- bne.s 1405a <stackGetByIndex+0x12>
            return NULL;
   14056:	|     |   moveq #0,d0
   14058:	|  /--|-- bra.s 1406e <stackGetByIndex+0x26>
    while (theIndex--) {
   1405a:	|  |  \-> move.l 8(sp),d0
   1405e:	|  |      move.l d0,d1
   14060:	|  |      subq.l #1,d1
   14062:	|  |      move.l d1,8(sp)
   14066:	|  |      tst.l d0
   14068:	\--|----- bne.s 1404a <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   1406a:	   |      move.l 4(sp),d0
}
   1406e:	   \----> rts

00014070 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14070:	          tst.l 4(sp)
   14074:	      /-- bne.s 14084 <stackFindLast+0x14>
		return NULL;
   14076:	      |   moveq #0,d0
   14078:	/-----|-- bra.s 14092 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1407a:	|  /--|-> movea.l 4(sp),a0
   1407e:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   14084:	|  |  \-> movea.l 4(sp),a0
   14088:	|  |      move.l 8(a0),d0
   1408c:	|  \----- bne.s 1407a <stackFindLast+0xa>

	return hunt;
   1408e:	|         move.l 4(sp),d0
}
   14092:	\-------> rts

00014094 <stackSize>:

int stackSize (const struct stackHandler * me) {
   14094:	       subq.l #8,sp
	int r = 0;
   14096:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1409a:	       movea.l 12(sp),a0
   1409e:	       move.l (a0),(sp)
	while (a) {
   140a0:	   /-- bra.s 140ac <stackSize+0x18>
		r ++;
   140a2:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   140a6:	|  |   movea.l (sp),a0
   140a8:	|  |   move.l 8(a0),(sp)
	while (a) {
   140ac:	|  \-> tst.l (sp)
   140ae:	\----- bne.s 140a2 <stackSize+0xe>
	}
	return r;
   140b0:	       move.l 4(sp),d0
}
   140b4:	       addq.l #8,sp
   140b6:	       rts

000140b8 <trimStack>:

void trimStack (struct variableStack ** stack) {
   140b8:	subq.l #8,sp
   140ba:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   140bc:	movea.l 16(sp),a0
   140c0:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   140c4:	movea.l 16(sp),a0
   140c8:	movea.l (a0),a0
   140ca:	move.l 8(a0),d0
   140ce:	movea.l 16(sp),a0
   140d2:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   140d4:	move.l 8(sp),d0
   140d8:	move.l d0,-(sp)
   140da:	jsr 13982 <unlinkVar>
   140e0:	addq.l #4,sp
	FreeVec(killMe);
   140e2:	move.l 8(sp),4(sp)
   140e8:	move.l 1b1d8 <SysBase>,d0
   140ee:	movea.l d0,a6
   140f0:	movea.l 4(sp),a1
   140f4:	jsr -690(a6)
   140f8:	nop
   140fa:	movea.l (sp)+,a6
   140fc:	addq.l #8,sp
   140fe:	rts

00014100 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14100:	       lea -52(sp),sp
   14104:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14106:	       pea 18828 <PutChar+0x22b2>
   1410c:	       jsr 15c26 <KPrintF>
   14112:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14114:	       moveq #64,d0
   14116:	       move.l d0,52(sp)
   1411a:	       clr.l 48(sp)
   1411e:	       move.l 1b1d8 <SysBase>,d0
   14124:	       movea.l d0,a6
   14126:	       move.l 52(sp),d0
   1412a:	       move.l 48(sp),d1
   1412e:	       jsr -684(a6)
   14132:	       move.l d0,44(sp)
   14136:	       move.l 44(sp),d0
   1413a:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   1413e:	   /-- bne.s 14146 <freeze+0x46>
   14140:	   |   clr.w d0
   14142:	/--|-- bra.w 142bc <freeze+0x1bc>

	CstFreeze();
   14146:	|  \-> jsr 15b0 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   1414c:	|      move.l 1b2cc <sceneWidth>,d0
   14152:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   14156:	|      move.l 1b2d0 <sceneHeight>,d0
   1415c:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   14160:	|      move.l 1b2cc <sceneWidth>,d0
   14166:	|      movea.l 40(sp),a0
   1416a:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   1416e:	|      move.l 1b2d0 <sceneHeight>,d0
   14174:	|      movea.l 40(sp),a0
   14178:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   1417c:	|      move.l 1b2ea <cameraX>,d0
   14182:	|      movea.l 40(sp),a0
   14186:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   1418a:	|      move.l 1b2ee <cameraY>,d0
   14190:	|      movea.l 40(sp),a0
   14194:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   14198:	|      move.l 1ab78 <cameraZoom>,d0
   1419e:	|      movea.l 40(sp),a0
   141a2:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   141a6:	|      move.w #1,1b2d8 <backdropExists>

	newFreezer -> allPeople = allPeople;
   141ae:	|      move.l 1b290 <allPeople>,d0
   141b4:	|      movea.l 40(sp),a0
   141b8:	|      move.l d0,(a0)
	allPeople = NULL;
   141ba:	|      clr.l 1b290 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   141c0:	|      moveq #42,d0
   141c2:	|      move.l d0,28(sp)
   141c6:	|      clr.l 24(sp)
   141ca:	|      move.l 1b1d8 <SysBase>,d0
   141d0:	|      movea.l d0,a6
   141d2:	|      move.l 28(sp),d0
   141d6:	|      move.l 24(sp),d1
   141da:	|      jsr -684(a6)
   141de:	|      move.l d0,20(sp)
   141e2:	|      move.l 20(sp),d0
   141e6:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   141ea:	|  /-- bne.s 141f2 <freeze+0xf2>
   141ec:	|  |   clr.w d0
   141ee:	+--|-- bra.w 142bc <freeze+0x1bc>

	newFreezer -> allScreenRegions = allScreenRegions;
   141f2:	|  \-> move.l 1b338 <allScreenRegions>,d0
   141f8:	|      movea.l 40(sp),a0
   141fc:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   14200:	|      clr.l 1b338 <allScreenRegions>
	overRegion = NULL;
   14206:	|      clr.l 1b33c <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   1420c:	|      move.l 1b0e0 <mouseCursorAnim>,d0
   14212:	|      movea.l 40(sp),a0
   14216:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1421a:	|      move.l 1b0e4 <mouseCursorFrameNum>,d0
   14220:	|      movea.l 40(sp),a0
   14224:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   14228:	|      jsr 9d34 <makeNullAnim>
   1422e:	|      move.l d0,1b0e0 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   14234:	|      clr.l 1b0e4 <mouseCursorFrameNum>

	newFreezer -> speech = speech;
   1423a:	|      move.l 1b234 <speech>,d0
   14240:	|      movea.l 40(sp),a0
   14244:	|      move.l d0,20(a0)
	initSpeech ();
   14248:	|      jsr 6d96 <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1424e:	|      moveq #28,d0
   14250:	|      move.l d0,12(sp)
   14254:	|      clr.l 8(sp)
   14258:	|      move.l 1b1d8 <SysBase>,d0
   1425e:	|      movea.l d0,a6
   14260:	|      move.l 12(sp),d0
   14264:	|      move.l 8(sp),d1
   14268:	|      jsr -684(a6)
   1426c:	|      move.l d0,4(sp)
   14270:	|      move.l 4(sp),d0
   14274:	|      movea.l 40(sp),a0
   14278:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   1427c:	|      movea.l 40(sp),a0
   14280:	|      move.l 28(a0),d0
   14284:	|  /-- bne.s 1428a <freeze+0x18a>
   14286:	|  |   clr.w d0
   14288:	+--|-- bra.s 142bc <freeze+0x1bc>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   1428a:	|  \-> movea.l 40(sp),a0
   1428e:	|      move.l 28(a0),d0
   14292:	|      pea 1c <_start+0x1c>
   14296:	|      clr.l -(sp)
   14298:	|      move.l d0,-(sp)
   1429a:	|      jsr 15baa <memset>
   142a0:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   142a4:	|      move.l 1b324 <frozenStuff>,d0
   142aa:	|      movea.l 40(sp),a0
   142ae:	|      move.l d0,60(a0)
	frozenStuff = newFreezer;
   142b2:	|      move.l 40(sp),1b324 <frozenStuff>

	return TRUE;
   142ba:	|      moveq #1,d0
}
   142bc:	\----> movea.l (sp)+,a6
   142be:	       lea 52(sp),sp
   142c2:	       rts

000142c4 <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   142c4:	pea 1883a <PutChar+0x22c4>
   142ca:	jsr 15c26 <KPrintF>
   142d0:	addq.l #4,sp
	return FALSE;
   142d2:	clr.w d0
}
   142d4:	rts

000142d6 <stringWidth>:

int stringWidth (char * theText) {
   142d6:	       subq.l #8,sp
	int a = 0;
   142d8:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   142dc:	       clr.l (sp)

	if (! fontTableSize) return 0;
   142de:	       move.l 1b334 <fontTableSize>,d0
   142e4:	/----- bne.s 142ea <stringWidth+0x14>
   142e6:	|      moveq #0,d0
   142e8:	|  /-- bra.s 142ec <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   142ea:	\--|-> move.l (sp),d0
}
   142ec:	   \-> addq.l #8,sp
   142ee:	       rts

000142f0 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   142f0:	pea 18861 <line.c.05397aaf+0x23>
   142f6:	jsr 15c26 <KPrintF>
   142fc:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   142fe:	moveq #1,d0
}
   14300:	rts

00014302 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   14302:	       lea -16(sp),sp
   14306:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   14308:	       moveq #36,d0
   1430a:	       move.l d0,16(sp)
   1430e:	       clr.l 12(sp)
   14312:	       move.l 1b1d8 <SysBase>,d0
   14318:	       movea.l d0,a6
   1431a:	       move.l 16(sp),d0
   1431e:	       move.l 12(sp),d1
   14322:	       jsr -684(a6)
   14326:	       move.l d0,8(sp)
   1432a:	       move.l 8(sp),d0
   1432e:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   14332:	   /-- bne.s 1433a <addScreenRegion+0x38>
   14334:	   |   clr.w d0
   14336:	/--|-- bra.w 143ba <addScreenRegion+0xb8>
    newRegion->di = di;
   1433a:	|  \-> movea.l 4(sp),a0
   1433e:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   14344:	|      movea.l 4(sp),a0
   14348:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   1434c:	|      movea.l 4(sp),a0
   14350:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   14356:	|      movea.l 4(sp),a0
   1435a:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   14360:	|      movea.l 4(sp),a0
   14364:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1436a:	|      movea.l 4(sp),a0
   1436e:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   14374:	|      movea.l 4(sp),a0
   14378:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   1437e:	|      move.l 52(sp),-(sp)
   14382:	|      jsr c61c <loadObjectType>
   14388:	|      addq.l #4,sp
   1438a:	|      movea.l 4(sp),a0
   1438e:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   14392:	|      move.l 1b338 <allScreenRegions>,d0
   14398:	|      movea.l 4(sp),a0
   1439c:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   143a0:	|      move.l 4(sp),1b338 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   143a8:	|      movea.l 4(sp),a0
   143ac:	|      move.l 28(a0),d0
   143b0:	|      sne d0
   143b2:	|      neg.b d0
   143b4:	|      move.b d0,d0
   143b6:	|      andi.w #255,d0
}
   143ba:	\----> movea.l (sp)+,a6
   143bc:	       lea 16(sp),sp
   143c0:	       rts

000143c2 <getOverRegion>:

void getOverRegion () {
   143c2:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   143c4:	             move.l 1b338 <allScreenRegions>,(sp)
	while (thisRegion) {
   143ca:	   /-------- bra.s 14438 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   143cc:	/--|-------> move.l 1b194 <input+0xa>,d0
   143d2:	|  |         movea.l (sp),a0
   143d4:	|  |         movea.l (a0),a0
   143d6:	|  |         move.l 1b2ea <cameraX>,d1
   143dc:	|  |         suba.l d1,a0
   143de:	|  |         cmpa.l d0,a0
   143e0:	|  |  /----- bgt.s 14432 <getOverRegion+0x70>
   143e2:	|  |  |      move.l 1b198 <input+0xe>,d0
   143e8:	|  |  |      movea.l (sp),a0
   143ea:	|  |  |      movea.l 4(a0),a0
   143ee:	|  |  |      move.l 1b2ee <cameraY>,d1
   143f4:	|  |  |      suba.l d1,a0
   143f6:	|  |  |      cmpa.l d0,a0
   143f8:	|  |  +----- bgt.s 14432 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   143fa:	|  |  |      move.l 1b194 <input+0xa>,d0
   14400:	|  |  |      movea.l (sp),a0
   14402:	|  |  |      movea.l 8(a0),a0
   14406:	|  |  |      move.l 1b2ea <cameraX>,d1
   1440c:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   1440e:	|  |  |      cmpa.l d0,a0
   14410:	|  |  +----- blt.s 14432 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   14412:	|  |  |      move.l 1b198 <input+0xe>,d0
   14418:	|  |  |      movea.l (sp),a0
   1441a:	|  |  |      movea.l 12(a0),a0
   1441e:	|  |  |      move.l 1b2ee <cameraY>,d1
   14424:	|  |  |      suba.l d1,a0
   14426:	|  |  |      cmpa.l d0,a0
   14428:	|  |  +----- blt.s 14432 <getOverRegion+0x70>
			overRegion = thisRegion;
   1442a:	|  |  |      move.l (sp),1b33c <overRegion>
			return;
   14430:	|  |  |  /-- bra.s 14444 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   14432:	|  |  \--|-> movea.l (sp),a0
   14434:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   14438:	|  \-----|-> tst.l (sp)
   1443a:	\--------|-- bne.s 143cc <getOverRegion+0xa>
	}
	overRegion = NULL;
   1443c:	         |   clr.l 1b33c <overRegion>
	return;
   14442:	         |   nop
}
   14444:	         \-> addq.l #4,sp
   14446:	             rts

00014448 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   14448:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1444a:	             move.l 1b338 <allScreenRegions>,(sp)

	while (thisRegion) {
   14450:	   /-------- bra.s 1446c <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   14452:	/--|-------> movea.l (sp),a0
   14454:	|  |         movea.l 28(a0),a0
   14458:	|  |         move.l 4(a0),d0
   1445c:	|  |         cmp.l 8(sp),d0
   14460:	|  |     /-- bne.s 14466 <getRegionForObject+0x1e>
			return thisRegion;
   14462:	|  |     |   move.l (sp),d0
   14464:	|  |  /--|-- bra.s 14472 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   14466:	|  |  |  \-> movea.l (sp),a0
   14468:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1446c:	|  \--|----> tst.l (sp)
   1446e:	\-----|----- bne.s 14452 <getRegionForObject+0xa>
	}

	return NULL;
   14470:	      |      moveq #0,d0
}
   14472:	      \----> addq.l #4,sp
   14474:	             rts

00014476 <killAllRegions>:

void killAllRegions () {
   14476:	       subq.l #8,sp
   14478:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1447a:	   /-- bra.s 144bc <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1447c:	/--|-> move.l 1b338 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   14484:	|  |   movea.l 1b338 <allScreenRegions>,a0
   1448a:	|  |   move.l 32(a0),d0
   1448e:	|  |   move.l d0,1b338 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   14494:	|  |   movea.l 8(sp),a0
   14498:	|  |   move.l 28(a0),d0
   1449c:	|  |   move.l d0,-(sp)
   1449e:	|  |   jsr c8d4 <removeObjectType>
   144a4:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   144a6:	|  |   move.l 8(sp),4(sp)
   144ac:	|  |   move.l 1b1d8 <SysBase>,d0
   144b2:	|  |   movea.l d0,a6
   144b4:	|  |   movea.l 4(sp),a1
   144b8:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   144bc:	|  \-> move.l 1b338 <allScreenRegions>,d0
   144c2:	\----- bne.s 1447c <killAllRegions+0x6>
	}
	overRegion = NULL;
   144c4:	       clr.l 1b33c <overRegion>
}
   144ca:	       nop
   144cc:	       movea.l (sp)+,a6
   144ce:	       addq.l #8,sp
   144d0:	       rts

000144d2 <loadRegions>:

void loadRegions (BPTR fp) {
   144d2:	       lea -24(sp),sp
   144d6:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   144d8:	       move.l 32(sp),-(sp)
   144dc:	       jsr 6bc <get2bytes>
   144e2:	       addq.l #4,sp
   144e4:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   144e8:	       move.l #111416,20(sp)

	while (numRegions --) {
   144f0:	   /-- bra.w 145ce <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   144f4:	/--|-> moveq #36,d0
   144f6:	|  |   move.l d0,16(sp)
   144fa:	|  |   clr.l 12(sp)
   144fe:	|  |   move.l 1b1d8 <SysBase>,d0
   14504:	|  |   movea.l d0,a6
   14506:	|  |   move.l 16(sp),d0
   1450a:	|  |   move.l 12(sp),d1
   1450e:	|  |   jsr -684(a6)
   14512:	|  |   move.l d0,8(sp)
   14516:	|  |   move.l 8(sp),d0
   1451a:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   1451e:	|  |   movea.l 20(sp),a0
   14522:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   14526:	|  |   moveq #32,d1
   14528:	|  |   add.l 4(sp),d1
   1452c:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   14530:	|  |   move.l 32(sp),-(sp)
   14534:	|  |   jsr 6bc <get2bytes>
   1453a:	|  |   addq.l #4,sp
   1453c:	|  |   movea.l 4(sp),a0
   14540:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   14542:	|  |   move.l 32(sp),-(sp)
   14546:	|  |   jsr 6bc <get2bytes>
   1454c:	|  |   addq.l #4,sp
   1454e:	|  |   movea.l 4(sp),a0
   14552:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   14556:	|  |   move.l 32(sp),-(sp)
   1455a:	|  |   jsr 6bc <get2bytes>
   14560:	|  |   addq.l #4,sp
   14562:	|  |   movea.l 4(sp),a0
   14566:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1456a:	|  |   move.l 32(sp),-(sp)
   1456e:	|  |   jsr 6bc <get2bytes>
   14574:	|  |   addq.l #4,sp
   14576:	|  |   movea.l 4(sp),a0
   1457a:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   1457e:	|  |   move.l 32(sp),-(sp)
   14582:	|  |   jsr 6bc <get2bytes>
   14588:	|  |   addq.l #4,sp
   1458a:	|  |   movea.l 4(sp),a0
   1458e:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   14592:	|  |   move.l 32(sp),-(sp)
   14596:	|  |   jsr 6bc <get2bytes>
   1459c:	|  |   addq.l #4,sp
   1459e:	|  |   movea.l 4(sp),a0
   145a2:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   145a6:	|  |   move.l 32(sp),-(sp)
   145aa:	|  |   jsr 6bc <get2bytes>
   145b0:	|  |   addq.l #4,sp
   145b2:	|  |   movea.l 4(sp),a0
   145b6:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   145ba:	|  |   move.l 32(sp),-(sp)
   145be:	|  |   jsr c5ca <loadObjectRef>
   145c4:	|  |   addq.l #4,sp
   145c6:	|  |   movea.l 4(sp),a0
   145ca:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   145ce:	|  \-> move.l 24(sp),d0
   145d2:	|      move.l d0,d1
   145d4:	|      subq.l #1,d1
   145d6:	|      move.l d1,24(sp)
   145da:	|      tst.l d0
   145dc:	\----- bne.w 144f4 <loadRegions+0x22>
	}
	* pointy = NULL;
   145e0:	       movea.l 20(sp),a0
   145e4:	       clr.l (a0)
}
   145e6:	       nop
   145e8:	       movea.l (sp)+,a6
   145ea:	       lea 24(sp),sp
   145ee:	       rts

000145f0 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   145f0:	             lea -12(sp),sp
   145f4:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   145f6:	             move.l #111416,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   145fe:	   /-------- bra.s 14678 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   14600:	/--|-------> movea.l 12(sp),a0
   14604:	|  |         movea.l (a0),a0
   14606:	|  |         movea.l 28(a0),a0
   1460a:	|  |         move.l 4(a0),d0
   1460e:	|  |         cmp.l 20(sp),d0
   14612:	|  |  /----- bne.s 1466a <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   14614:	|  |  |      movea.l 12(sp),a0
   14618:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   1461c:	|  |  |      movea.l 8(sp),a0
   14620:	|  |  |      move.l 32(a0),d0
   14624:	|  |  |      movea.l 12(sp),a0
   14628:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   1462a:	|  |  |      movea.l 8(sp),a0
   1462e:	|  |  |      move.l 28(a0),d0
   14632:	|  |  |      move.l d0,-(sp)
   14634:	|  |  |      jsr c8d4 <removeObjectType>
   1463a:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   1463c:	|  |  |      move.l 1b33c <overRegion>,d0
   14642:	|  |  |      cmp.l 8(sp),d0
   14646:	|  |  |  /-- bne.s 1464e <removeScreenRegion+0x5e>
   14648:	|  |  |  |   clr.l 1b33c <overRegion>
            FreeVec(killMe);
   1464e:	|  |  |  \-> move.l 8(sp),4(sp)
   14654:	|  |  |      move.l 1b1d8 <SysBase>,d0
   1465a:	|  |  |      movea.l d0,a6
   1465c:	|  |  |      movea.l 4(sp),a1
   14660:	|  |  |      jsr -690(a6)
            killMe = NULL;
   14664:	|  |  |      clr.l 8(sp)
   14668:	|  +--|----- bra.s 14678 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   1466a:	|  |  \----> movea.l 12(sp),a0
   1466e:	|  |         move.l (a0),d0
   14670:	|  |         moveq #32,d1
   14672:	|  |         add.l d0,d1
   14674:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   14678:	|  \-------> movea.l 12(sp),a0
   1467c:	|            move.l (a0),d0
   1467e:	\----------- bne.s 14600 <removeScreenRegion+0x10>
        }
    }
}
   14680:	             nop
   14682:	             nop
   14684:	             movea.l (sp)+,a6
   14686:	             lea 12(sp),sp
   1468a:	             rts

0001468c <saveRegions>:

void saveRegions (BPTR fp) {
   1468c:	       subq.l #8,sp
	int numRegions = 0;
   1468e:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   14692:	       move.l 1b338 <allScreenRegions>,(sp)
	while (thisRegion) {
   14698:	   /-- bra.s 146a4 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   1469a:	/--|-> movea.l (sp),a0
   1469c:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   146a0:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   146a4:	|  \-> tst.l (sp)
   146a6:	\----- bne.s 1469a <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   146a8:	       move.l 12(sp),-(sp)
   146ac:	       move.l 8(sp),-(sp)
   146b0:	       jsr 8d0 <put2bytes>
   146b6:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   146b8:	       move.l 1b338 <allScreenRegions>,(sp)
	while (thisRegion) {
   146be:	/----- bra.w 14766 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   146c2:	|  /-> movea.l (sp),a0
   146c4:	|  |   move.l (a0),d0
   146c6:	|  |   move.l 12(sp),-(sp)
   146ca:	|  |   move.l d0,-(sp)
   146cc:	|  |   jsr 8d0 <put2bytes>
   146d2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   146d4:	|  |   movea.l (sp),a0
   146d6:	|  |   move.l 4(a0),d0
   146da:	|  |   move.l 12(sp),-(sp)
   146de:	|  |   move.l d0,-(sp)
   146e0:	|  |   jsr 8d0 <put2bytes>
   146e6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   146e8:	|  |   movea.l (sp),a0
   146ea:	|  |   move.l 8(a0),d0
   146ee:	|  |   move.l 12(sp),-(sp)
   146f2:	|  |   move.l d0,-(sp)
   146f4:	|  |   jsr 8d0 <put2bytes>
   146fa:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   146fc:	|  |   movea.l (sp),a0
   146fe:	|  |   move.l 12(a0),d0
   14702:	|  |   move.l 12(sp),-(sp)
   14706:	|  |   move.l d0,-(sp)
   14708:	|  |   jsr 8d0 <put2bytes>
   1470e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   14710:	|  |   movea.l (sp),a0
   14712:	|  |   move.l 16(a0),d0
   14716:	|  |   move.l 12(sp),-(sp)
   1471a:	|  |   move.l d0,-(sp)
   1471c:	|  |   jsr 8d0 <put2bytes>
   14722:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   14724:	|  |   movea.l (sp),a0
   14726:	|  |   move.l 20(a0),d0
   1472a:	|  |   move.l 12(sp),-(sp)
   1472e:	|  |   move.l d0,-(sp)
   14730:	|  |   jsr 8d0 <put2bytes>
   14736:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   14738:	|  |   movea.l (sp),a0
   1473a:	|  |   move.l 24(a0),d0
   1473e:	|  |   move.l 12(sp),-(sp)
   14742:	|  |   move.l d0,-(sp)
   14744:	|  |   jsr 8d0 <put2bytes>
   1474a:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   1474c:	|  |   movea.l (sp),a0
   1474e:	|  |   move.l 28(a0),d0
   14752:	|  |   move.l 12(sp),-(sp)
   14756:	|  |   move.l d0,-(sp)
   14758:	|  |   jsr c974 <saveObjectRef>
   1475e:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   14760:	|  |   movea.l (sp),a0
   14762:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   14766:	\--|-> tst.l (sp)
   14768:	   \-- bne.w 146c2 <saveRegions+0x36>
	}
}
   1476c:	       nop
   1476e:	       nop
   14770:	       addq.l #8,sp
   14772:	       rts

00014774 <showBoxes>:

void showBoxes () {
   14774:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   14776:	       move.l 1b338 <allScreenRegions>,(sp)

	while (huntRegion) {
   1477c:	/----- bra.w 14818 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   14780:	|  /-> movea.l (sp),a0
   14782:	|  |   move.l 12(a0),d0
   14786:	|  |   movea.l d0,a1
   14788:	|  |   movea.l (sp),a0
   1478a:	|  |   move.l 4(a0),d0
   1478e:	|  |   move.l d0,d1
   14790:	|  |   movea.l (sp),a0
   14792:	|  |   move.l (a0),d0
   14794:	|  |   move.l a1,-(sp)
   14796:	|  |   move.l d1,-(sp)
   14798:	|  |   move.l d0,-(sp)
   1479a:	|  |   jsr c258 <drawVerticalLine>
   147a0:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   147a4:	|  |   movea.l (sp),a0
   147a6:	|  |   move.l 12(a0),d0
   147aa:	|  |   movea.l d0,a1
   147ac:	|  |   movea.l (sp),a0
   147ae:	|  |   move.l 4(a0),d0
   147b2:	|  |   move.l d0,d1
   147b4:	|  |   movea.l (sp),a0
   147b6:	|  |   move.l 8(a0),d0
   147ba:	|  |   move.l a1,-(sp)
   147bc:	|  |   move.l d1,-(sp)
   147be:	|  |   move.l d0,-(sp)
   147c0:	|  |   jsr c258 <drawVerticalLine>
   147c6:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   147ca:	|  |   movea.l (sp),a0
   147cc:	|  |   move.l 8(a0),d0
   147d0:	|  |   movea.l d0,a1
   147d2:	|  |   movea.l (sp),a0
   147d4:	|  |   move.l 4(a0),d0
   147d8:	|  |   move.l d0,d1
   147da:	|  |   movea.l (sp),a0
   147dc:	|  |   move.l (a0),d0
   147de:	|  |   move.l a1,-(sp)
   147e0:	|  |   move.l d1,-(sp)
   147e2:	|  |   move.l d0,-(sp)
   147e4:	|  |   jsr c232 <drawHorizontalLine>
   147ea:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   147ee:	|  |   movea.l (sp),a0
   147f0:	|  |   move.l 8(a0),d0
   147f4:	|  |   movea.l d0,a1
   147f6:	|  |   movea.l (sp),a0
   147f8:	|  |   move.l 12(a0),d0
   147fc:	|  |   move.l d0,d1
   147fe:	|  |   movea.l (sp),a0
   14800:	|  |   move.l (a0),d0
   14802:	|  |   move.l a1,-(sp)
   14804:	|  |   move.l d1,-(sp)
   14806:	|  |   move.l d0,-(sp)
   14808:	|  |   jsr c232 <drawHorizontalLine>
   1480e:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   14812:	|  |   movea.l (sp),a0
   14814:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   14818:	\--|-> tst.l (sp)
   1481a:	   \-- bne.w 14780 <showBoxes+0xc>
	}
   1481e:	       nop
   14820:	       nop
   14822:	       addq.l #4,sp
   14824:	       rts

00014826 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   14826:	       lea -88(sp),sp
   1482a:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   1482c:	       move.l 1b1d8 <SysBase>,d0
   14832:	       movea.l d0,a6
   14834:	       jsr -666(a6)
   14838:	       move.l d0,88(sp)
   1483c:	       move.l 88(sp),d0
   14840:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   14844:	       move.l 84(sp),80(sp)
   1484a:	       moveq #40,d0
   1484c:	       move.l d0,76(sp)
   14850:	       move.l 1b1d8 <SysBase>,d0
   14856:	       movea.l d0,a6
   14858:	       movea.l 80(sp),a0
   1485c:	       move.l 76(sp),d0
   14860:	       jsr -654(a6)
   14864:	       move.l d0,72(sp)
   14868:	       move.l 72(sp),d0
   1486c:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   14870:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   14876:	       move.l #100484,60(sp)
   1487e:	       clr.l 56(sp)
   14882:	       move.l 64(sp),52(sp)
   14888:	       clr.l 48(sp)
   1488c:	       move.l 1b1d8 <SysBase>,d0
   14892:	       movea.l d0,a6
   14894:	       movea.l 60(sp),a0
   14898:	       move.l 56(sp),d0
   1489c:	       movea.l 52(sp),a1
   148a0:	       move.l 48(sp),d1
   148a4:	       jsr -444(a6)
   148a8:	       move.b d0,47(sp)
   148ac:	       move.b 47(sp),d0
   148b0:	   /-- beq.s 148c6 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   148b2:	   |   pea 18891 <line.c.05397aaf+0x53>
   148b8:	   |   jsr 15c26 <KPrintF>
   148be:	   |   addq.l #4,sp
        return 0;
   148c0:	   |   moveq #0,d0
   148c2:	/--|-- bra.w 14980 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   148c6:	|  \-> movea.l 64(sp),a0
   148ca:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   148d0:	|      lea 92(sp),a0
   148d4:	|      lea -86(a0),a0
   148d8:	|      move.l a0,38(sp)
   148dc:	|      movea.l 42(sp),a6
   148e0:	|      movea.l 38(sp),a0
   148e4:	|      jsr -60(a6)
   148e8:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   148ec:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   148f2:	|      move.l #1103515245,-(sp)
   148f8:	|      move.l 34(sp),-(sp)
   148fc:	|      jsr 16460 <__mulsi3>
   14902:	|      addq.l #8,sp
   14904:	|      addi.l #12345,d0
   1490a:	|      move.l d0,d1
   1490c:	|      bclr #31,d1
   14910:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   14914:	|      move.l 30(sp),d0
   14918:	|      pea 64 <_start+0x64>
   1491c:	|      move.l d0,-(sp)
   1491e:	|      jsr 1653a <__umodsi3>
   14924:	|      addq.l #8,sp
   14926:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   1492a:	|      move.l 26(sp),-(sp)
   1492e:	|      pea 188ae <line.c.05397aaf+0x70>
   14934:	|      jsr 15c26 <KPrintF>
   1493a:	|      addq.l #8,sp

    CloseDevice(ioreq);
   1493c:	|      move.l 64(sp),22(sp)
   14942:	|      move.l 1b1d8 <SysBase>,d0
   14948:	|      movea.l d0,a6
   1494a:	|      movea.l 22(sp),a1
   1494e:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   14952:	|      move.l 64(sp),18(sp)
   14958:	|      move.l 1b1d8 <SysBase>,d0
   1495e:	|      movea.l d0,a6
   14960:	|      movea.l 18(sp),a0
   14964:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   14968:	|      move.l 84(sp),14(sp)
   1496e:	|      move.l 1b1d8 <SysBase>,d0
   14974:	|      movea.l d0,a6
   14976:	|      movea.l 14(sp),a0
   1497a:	|      jsr -672(a6)
    return 0;
   1497e:	|      moveq #0,d0
   14980:	\----> movea.l (sp)+,a6
   14982:	       lea 88(sp),sp
   14986:	       rts

00014988 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   14988:	             lea -20(sp),sp
   1498c:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   1498e:	             move.l 1b340 <allLoadedBanks>,20(sp)
	while (returnMe) {
   14996:	      /----- bra.s 149c8 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   14998:	   /--|----> movea.l 20(sp),a0
   1499c:	   |  |      move.l (a0),d0
   1499e:	   |  |      cmp.l 28(sp),d0
   149a2:	   |  |  /-- bne.s 149be <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   149a4:	   |  |  |   movea.l 20(sp),a0
   149a8:	   |  |  |   move.l 4(a0),d0
   149ac:	   |  |  |   addq.l #1,d0
   149ae:	   |  |  |   movea.l 20(sp),a0
   149b2:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   149b6:	   |  |  |   move.l 20(sp),d0
   149ba:	/--|--|--|-- bra.w 14a7e <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   149be:	|  |  |  \-> movea.l 20(sp),a0
   149c2:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   149c8:	|  |  \----> tst.l 20(sp)
   149cc:	|  \-------- bne.s 14998 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   149ce:	|            moveq #26,d0
   149d0:	|            move.l d0,16(sp)
   149d4:	|            clr.l 12(sp)
   149d8:	|            move.l 1b1d8 <SysBase>,d0
   149de:	|            movea.l d0,a6
   149e0:	|            move.l 16(sp),d0
   149e4:	|            move.l 12(sp),d1
   149e8:	|            jsr -684(a6)
   149ec:	|            move.l d0,8(sp)
   149f0:	|            move.l 8(sp),d0
   149f4:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   149f8:	|     /----- beq.w 14a7c <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   149fc:	|     |      movea.l 20(sp),a0
   14a00:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   14a04:	|     |      move.l 20(sp),d0
   14a08:	|     |      addq.l #8,d0
   14a0a:	|     |      clr.l -(sp)
   14a0c:	|     |      move.l d0,-(sp)
   14a0e:	|     |      move.l 36(sp),-(sp)
   14a12:	|     |      jsr 7c84 <loadSpriteBank>
   14a18:	|     |      lea 12(sp),sp
   14a1c:	|     |      tst.w d0
   14a1e:	|     |  /-- beq.s 14a54 <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   14a20:	|     |  |   movea.l 20(sp),a0
   14a24:	|     |  |   moveq #1,d0
   14a26:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   14a2a:	|     |  |   move.l 1b340 <allLoadedBanks>,d0
   14a30:	|     |  |   movea.l 20(sp),a0
   14a34:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   14a38:	|     |  |   move.l 20(sp),1b340 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   14a40:	|     |  |   pea 188c1 <line.c.05397aaf+0x83>
   14a46:	|     |  |   jsr 15c26 <KPrintF>
   14a4c:	|     |  |   addq.l #4,sp
			return returnMe;
   14a4e:	|     |  |   move.l 20(sp),d0
   14a52:	+-----|--|-- bra.s 14a7e <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   14a54:	|     |  \-> pea 188ee <line.c.05397aaf+0xb0>
   14a5a:	|     |      jsr 15c26 <KPrintF>
   14a60:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   14a62:	|     |      move.l 20(sp),4(sp)
   14a68:	|     |      move.l 1b1d8 <SysBase>,d0
   14a6e:	|     |      movea.l d0,a6
   14a70:	|     |      movea.l 4(sp),a1
   14a74:	|     |      jsr -690(a6)
			return NULL;
   14a78:	|     |      moveq #0,d0
   14a7a:	+-----|----- bra.s 14a7e <loadBankForAnim+0xf6>
		}
	} else return NULL;
   14a7c:	|     \----> moveq #0,d0
}
   14a7e:	\----------> movea.l (sp)+,a6
   14a80:	             lea 20(sp),sp
   14a84:	             rts

00014a86 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   14a86:	       lea -32(sp),sp
   14a8a:	       move.l d3,-(sp)
   14a8c:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   14a8e:	       move.l 60(sp),d0
   14a92:	       sub.l 52(sp),d0
   14a96:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   14a9a:	       move.l 64(sp),d0
   14a9e:	       sub.l 56(sp),d0
   14aa2:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   14aa6:	       move.l 68(sp),d0
   14aaa:	       sub.l 52(sp),d0
   14aae:	       move.l 36(sp),-(sp)
   14ab2:	       move.l d0,-(sp)
   14ab4:	       jsr 16460 <__mulsi3>
   14aba:	       addq.l #8,sp
   14abc:	       move.l d0,d2
   14abe:	       move.l 72(sp),d0
   14ac2:	       sub.l 56(sp),d0
   14ac6:	       move.l 32(sp),-(sp)
   14aca:	       move.l d0,-(sp)
   14acc:	       jsr 16460 <__mulsi3>
   14ad2:	       addq.l #8,sp
   14ad4:	       add.l d2,d0
   14ad6:	       move.l d0,-(sp)
   14ad8:	       jsr 15e9e <__floatsidf>
   14ade:	       addq.l #4,sp
   14ae0:	       move.l d0,16(sp)
   14ae4:	       move.l d1,20(sp)
   14ae8:	       move.l 16(sp),24(sp)
   14aee:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   14af4:	       move.l 36(sp),-(sp)
   14af8:	       move.l 40(sp),-(sp)
   14afc:	       jsr 16460 <__mulsi3>
   14b02:	       addq.l #8,sp
   14b04:	       move.l d0,d2
   14b06:	       move.l 32(sp),-(sp)
   14b0a:	       move.l 36(sp),-(sp)
   14b0e:	       jsr 16460 <__mulsi3>
   14b14:	       addq.l #8,sp
   14b16:	       add.l d2,d0
   14b18:	       move.l d0,-(sp)
   14b1a:	       jsr 15e9e <__floatsidf>
   14b20:	       addq.l #4,sp
   14b22:	       move.l d1,-(sp)
   14b24:	       move.l d0,-(sp)
   14b26:	       move.l 36(sp),-(sp)
   14b2a:	       move.l 36(sp),-(sp)
   14b2e:	       jsr 15d28 <__divdf3>
   14b34:	       lea 16(sp),sp
   14b38:	       move.l d0,8(sp)
   14b3c:	       move.l d1,12(sp)
   14b40:	       move.l 8(sp),24(sp)
   14b46:	       move.l 12(sp),28(sp)

	if (m < 0) {
   14b4c:	       clr.l -(sp)
   14b4e:	       clr.l -(sp)
   14b50:	       move.l 36(sp),-(sp)
   14b54:	       move.l 36(sp),-(sp)
   14b58:	       jsr 160b6 <__ltdf2>
   14b5e:	       lea 16(sp),sp
   14b62:	       tst.l d0
   14b64:	   /-- bge.s 14b7a <closestPointOnLine+0xf4>
		*closestX = x1;
   14b66:	   |   movea.l 44(sp),a0
   14b6a:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   14b6e:	   |   movea.l 48(sp),a0
   14b72:	   |   move.l 56(sp),(a0)
   14b76:	/--|-- bra.w 14c5c <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   14b7a:	|  \-> clr.l -(sp)
   14b7c:	|      move.l #1072693248,-(sp)
   14b82:	|      move.l 36(sp),-(sp)
   14b86:	|      move.l 36(sp),-(sp)
   14b8a:	|      jsr 15ffc <__gtdf2>
   14b90:	|      lea 16(sp),sp
   14b94:	|      tst.l d0
   14b96:	|  /-- ble.s 14bac <closestPointOnLine+0x126>
		*closestX = x2;
   14b98:	|  |   movea.l 44(sp),a0
   14b9c:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   14ba0:	|  |   movea.l 48(sp),a0
   14ba4:	|  |   move.l 64(sp),(a0)
   14ba8:	+--|-- bra.w 14c5c <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   14bac:	|  \-> move.l 52(sp),-(sp)
   14bb0:	|      jsr 15e9e <__floatsidf>
   14bb6:	|      addq.l #4,sp
   14bb8:	|      move.l d0,d2
   14bba:	|      move.l d1,d3
   14bbc:	|      move.l 36(sp),-(sp)
   14bc0:	|      jsr 15e9e <__floatsidf>
   14bc6:	|      addq.l #4,sp
   14bc8:	|      move.l 28(sp),-(sp)
   14bcc:	|      move.l 28(sp),-(sp)
   14bd0:	|      move.l d1,-(sp)
   14bd2:	|      move.l d0,-(sp)
   14bd4:	|      jsr 15f2e <__muldf3>
   14bda:	|      lea 16(sp),sp
   14bde:	|      move.l d1,-(sp)
   14be0:	|      move.l d0,-(sp)
   14be2:	|      move.l d3,-(sp)
   14be4:	|      move.l d2,-(sp)
   14be6:	|      jsr 15cc6 <__adddf3>
   14bec:	|      lea 16(sp),sp
   14bf0:	|      move.l d1,-(sp)
   14bf2:	|      move.l d0,-(sp)
   14bf4:	|      jsr 15e36 <__fixdfsi>
   14bfa:	|      addq.l #8,sp
   14bfc:	|      movea.l 44(sp),a0
   14c00:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   14c02:	|      move.l 56(sp),-(sp)
   14c06:	|      jsr 15e9e <__floatsidf>
   14c0c:	|      addq.l #4,sp
   14c0e:	|      move.l d0,d2
   14c10:	|      move.l d1,d3
   14c12:	|      move.l 32(sp),-(sp)
   14c16:	|      jsr 15e9e <__floatsidf>
   14c1c:	|      addq.l #4,sp
   14c1e:	|      move.l 28(sp),-(sp)
   14c22:	|      move.l 28(sp),-(sp)
   14c26:	|      move.l d1,-(sp)
   14c28:	|      move.l d0,-(sp)
   14c2a:	|      jsr 15f2e <__muldf3>
   14c30:	|      lea 16(sp),sp
   14c34:	|      move.l d1,-(sp)
   14c36:	|      move.l d0,-(sp)
   14c38:	|      move.l d3,-(sp)
   14c3a:	|      move.l d2,-(sp)
   14c3c:	|      jsr 15cc6 <__adddf3>
   14c42:	|      lea 16(sp),sp
   14c46:	|      move.l d1,-(sp)
   14c48:	|      move.l d0,-(sp)
   14c4a:	|      jsr 15e36 <__fixdfsi>
   14c50:	|      addq.l #8,sp
   14c52:	|      movea.l 48(sp),a0
   14c56:	|      move.l d0,(a0)
		return TRUE;
   14c58:	|      moveq #1,d0
   14c5a:	|  /-- bra.s 14c5e <closestPointOnLine+0x1d8>
	}
	return FALSE;
   14c5c:	\--|-> clr.w d0
}
   14c5e:	   \-> move.l (sp)+,d2
   14c60:	       move.l (sp)+,d3
   14c62:	       lea 32(sp),sp
   14c66:	       rts

00014c68 <drawFloor>:

void drawFloor() {
   14c68:	                lea -12(sp),sp
   14c6c:	                move.l d3,-(sp)
   14c6e:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   14c70:	                clr.l 16(sp)
   14c74:	   /----------- bra.w 14e88 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   14c78:	/--|----------> movea.l 1b344 <currentFloor>,a0
   14c7e:	|  |            move.l 12(a0),d1
   14c82:	|  |            move.l 16(sp),d0
   14c86:	|  |            lsl.l #3,d0
   14c88:	|  |            movea.l d1,a0
   14c8a:	|  |            adda.l d0,a0
   14c8c:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   14c90:	|  |            moveq #1,d0
   14c92:	|  |            cmp.l 8(sp),d0
   14c96:	|  |  /-------- bge.w 14e84 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   14c9a:	|  |  |         moveq #1,d0
   14c9c:	|  |  |         move.l d0,12(sp)
   14ca0:	|  |  |     /-- bra.w 14d9a <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   14ca4:	|  |  |  /--|-> movea.l 1b344 <currentFloor>,a0
   14caa:	|  |  |  |  |   move.l 4(a0),d1
   14cae:	|  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   14cb4:	|  |  |  |  |   movea.l 12(a0),a0
   14cb8:	|  |  |  |  |   move.l 16(sp),d0
   14cbc:	|  |  |  |  |   lsl.l #3,d0
   14cbe:	|  |  |  |  |   adda.l d0,a0
   14cc0:	|  |  |  |  |   movea.l 4(a0),a0
   14cc4:	|  |  |  |  |   move.l 12(sp),d0
   14cc8:	|  |  |  |  |   add.l d0,d0
   14cca:	|  |  |  |  |   add.l d0,d0
   14ccc:	|  |  |  |  |   adda.l d0,a0
   14cce:	|  |  |  |  |   move.l (a0),d0
   14cd0:	|  |  |  |  |   lsl.l #3,d0
   14cd2:	|  |  |  |  |   movea.l d1,a0
   14cd4:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   14cd6:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   14cda:	|  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   14ce0:	|  |  |  |  |   move.l 4(a0),d1
   14ce4:	|  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   14cea:	|  |  |  |  |   movea.l 12(a0),a0
   14cee:	|  |  |  |  |   move.l 16(sp),d0
   14cf2:	|  |  |  |  |   lsl.l #3,d0
   14cf4:	|  |  |  |  |   adda.l d0,a0
   14cf6:	|  |  |  |  |   movea.l 4(a0),a0
   14cfa:	|  |  |  |  |   move.l 12(sp),d0
   14cfe:	|  |  |  |  |   add.l d0,d0
   14d00:	|  |  |  |  |   add.l d0,d0
   14d02:	|  |  |  |  |   adda.l d0,a0
   14d04:	|  |  |  |  |   move.l (a0),d0
   14d06:	|  |  |  |  |   lsl.l #3,d0
   14d08:	|  |  |  |  |   movea.l d1,a0
   14d0a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   14d0c:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   14d0e:	|  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   14d14:	|  |  |  |  |   move.l 4(a0),d1
   14d18:	|  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   14d1e:	|  |  |  |  |   movea.l 12(a0),a0
   14d22:	|  |  |  |  |   move.l 16(sp),d0
   14d26:	|  |  |  |  |   lsl.l #3,d0
   14d28:	|  |  |  |  |   adda.l d0,a0
   14d2a:	|  |  |  |  |   movea.l 4(a0),a0
   14d2e:	|  |  |  |  |   move.l 12(sp),d0
   14d32:	|  |  |  |  |   addi.l #1073741823,d0
   14d38:	|  |  |  |  |   add.l d0,d0
   14d3a:	|  |  |  |  |   add.l d0,d0
   14d3c:	|  |  |  |  |   adda.l d0,a0
   14d3e:	|  |  |  |  |   move.l (a0),d0
   14d40:	|  |  |  |  |   lsl.l #3,d0
   14d42:	|  |  |  |  |   movea.l d1,a0
   14d44:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   14d46:	|  |  |  |  |   move.l 4(a0),d1
   14d4a:	|  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   14d50:	|  |  |  |  |   move.l 4(a0),d3
   14d54:	|  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   14d5a:	|  |  |  |  |   movea.l 12(a0),a0
   14d5e:	|  |  |  |  |   move.l 16(sp),d0
   14d62:	|  |  |  |  |   lsl.l #3,d0
   14d64:	|  |  |  |  |   adda.l d0,a0
   14d66:	|  |  |  |  |   movea.l 4(a0),a0
   14d6a:	|  |  |  |  |   move.l 12(sp),d0
   14d6e:	|  |  |  |  |   addi.l #1073741823,d0
   14d74:	|  |  |  |  |   add.l d0,d0
   14d76:	|  |  |  |  |   add.l d0,d0
   14d78:	|  |  |  |  |   adda.l d0,a0
   14d7a:	|  |  |  |  |   move.l (a0),d0
   14d7c:	|  |  |  |  |   lsl.l #3,d0
   14d7e:	|  |  |  |  |   movea.l d3,a0
   14d80:	|  |  |  |  |   adda.l d0,a0
   14d82:	|  |  |  |  |   move.l (a0),d0
   14d84:	|  |  |  |  |   move.l d2,-(sp)
   14d86:	|  |  |  |  |   move.l a1,-(sp)
   14d88:	|  |  |  |  |   move.l d1,-(sp)
   14d8a:	|  |  |  |  |   move.l d0,-(sp)
   14d8c:	|  |  |  |  |   jsr 2d9a <drawLine>
   14d92:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   14d96:	|  |  |  |  |   addq.l #1,12(sp)
   14d9a:	|  |  |  |  \-> move.l 12(sp),d0
   14d9e:	|  |  |  |      cmp.l 8(sp),d0
   14da2:	|  |  |  \----- blt.w 14ca4 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   14da6:	|  |  |         movea.l 1b344 <currentFloor>,a0
   14dac:	|  |  |         move.l 4(a0),d1
   14db0:	|  |  |         movea.l 1b344 <currentFloor>,a0
   14db6:	|  |  |         movea.l 12(a0),a0
   14dba:	|  |  |         move.l 16(sp),d0
   14dbe:	|  |  |         lsl.l #3,d0
   14dc0:	|  |  |         adda.l d0,a0
   14dc2:	|  |  |         movea.l 4(a0),a0
   14dc6:	|  |  |         move.l 8(sp),d0
   14dca:	|  |  |         addi.l #1073741823,d0
   14dd0:	|  |  |         add.l d0,d0
   14dd2:	|  |  |         add.l d0,d0
   14dd4:	|  |  |         adda.l d0,a0
   14dd6:	|  |  |         move.l (a0),d0
   14dd8:	|  |  |         lsl.l #3,d0
   14dda:	|  |  |         movea.l d1,a0
   14ddc:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   14dde:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   14de2:	|  |  |         movea.l 1b344 <currentFloor>,a0
   14de8:	|  |  |         move.l 4(a0),d1
   14dec:	|  |  |         movea.l 1b344 <currentFloor>,a0
   14df2:	|  |  |         movea.l 12(a0),a0
   14df6:	|  |  |         move.l 16(sp),d0
   14dfa:	|  |  |         lsl.l #3,d0
   14dfc:	|  |  |         adda.l d0,a0
   14dfe:	|  |  |         movea.l 4(a0),a0
   14e02:	|  |  |         move.l 8(sp),d0
   14e06:	|  |  |         addi.l #1073741823,d0
   14e0c:	|  |  |         add.l d0,d0
   14e0e:	|  |  |         add.l d0,d0
   14e10:	|  |  |         adda.l d0,a0
   14e12:	|  |  |         move.l (a0),d0
   14e14:	|  |  |         lsl.l #3,d0
   14e16:	|  |  |         movea.l d1,a0
   14e18:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   14e1a:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   14e1c:	|  |  |         movea.l 1b344 <currentFloor>,a0
   14e22:	|  |  |         move.l 4(a0),d1
   14e26:	|  |  |         movea.l 1b344 <currentFloor>,a0
   14e2c:	|  |  |         movea.l 12(a0),a0
   14e30:	|  |  |         move.l 16(sp),d0
   14e34:	|  |  |         lsl.l #3,d0
   14e36:	|  |  |         adda.l d0,a0
   14e38:	|  |  |         movea.l 4(a0),a0
   14e3c:	|  |  |         move.l (a0),d0
   14e3e:	|  |  |         lsl.l #3,d0
   14e40:	|  |  |         movea.l d1,a0
   14e42:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   14e44:	|  |  |         move.l 4(a0),d1
   14e48:	|  |  |         movea.l 1b344 <currentFloor>,a0
   14e4e:	|  |  |         move.l 4(a0),d3
   14e52:	|  |  |         movea.l 1b344 <currentFloor>,a0
   14e58:	|  |  |         movea.l 12(a0),a0
   14e5c:	|  |  |         move.l 16(sp),d0
   14e60:	|  |  |         lsl.l #3,d0
   14e62:	|  |  |         adda.l d0,a0
   14e64:	|  |  |         movea.l 4(a0),a0
   14e68:	|  |  |         move.l (a0),d0
   14e6a:	|  |  |         lsl.l #3,d0
   14e6c:	|  |  |         movea.l d3,a0
   14e6e:	|  |  |         adda.l d0,a0
   14e70:	|  |  |         move.l (a0),d0
   14e72:	|  |  |         move.l d2,-(sp)
   14e74:	|  |  |         move.l a1,-(sp)
   14e76:	|  |  |         move.l d1,-(sp)
   14e78:	|  |  |         move.l d0,-(sp)
   14e7a:	|  |  |         jsr 2d9a <drawLine>
   14e80:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   14e84:	|  |  \-------> addq.l #1,16(sp)
   14e88:	|  \----------> movea.l 1b344 <currentFloor>,a0
   14e8e:	|               move.l 8(a0),d0
   14e92:	|               cmp.l 16(sp),d0
   14e96:	\-------------- bgt.w 14c78 <drawFloor+0x10>
        }
    }
}
   14e9a:	                nop
   14e9c:	                nop
   14e9e:	                move.l (sp)+,d2
   14ea0:	                move.l (sp)+,d3
   14ea2:	                lea 12(sp),sp
   14ea6:	                rts

00014ea8 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   14ea8:	                      lea -12(sp),sp
    int sharedVertices = 0;
   14eac:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   14eb0:	                      clr.l 4(sp)
   14eb4:	   /----------------- bra.w 14f46 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   14eb8:	/--|----------------> clr.l (sp)
   14eba:	|  |     /----------- bra.s 14f36 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   14ebc:	|  |  /--|----------> movea.l 16(sp),a0
   14ec0:	|  |  |  |            move.l 4(a0),d1
   14ec4:	|  |  |  |            move.l 4(sp),d0
   14ec8:	|  |  |  |            add.l d0,d0
   14eca:	|  |  |  |            add.l d0,d0
   14ecc:	|  |  |  |            movea.l d1,a0
   14ece:	|  |  |  |            adda.l d0,a0
   14ed0:	|  |  |  |            move.l (a0),d1
   14ed2:	|  |  |  |            movea.l 20(sp),a0
   14ed6:	|  |  |  |            movea.l 4(a0),a0
   14eda:	|  |  |  |            move.l (sp),d0
   14edc:	|  |  |  |            add.l d0,d0
   14ede:	|  |  |  |            add.l d0,d0
   14ee0:	|  |  |  |            adda.l d0,a0
   14ee2:	|  |  |  |            move.l (a0),d0
   14ee4:	|  |  |  |            cmp.l d1,d0
   14ee6:	|  |  |  |  /-------- bne.s 14f34 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   14ee8:	|  |  |  |  |         move.l 8(sp),d0
   14eec:	|  |  |  |  |         move.l d0,d1
   14eee:	|  |  |  |  |         addq.l #1,d1
   14ef0:	|  |  |  |  |         move.l d1,8(sp)
   14ef4:	|  |  |  |  |         tst.l d0
   14ef6:	|  |  |  |  |     /-- beq.s 14f18 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   14ef8:	|  |  |  |  |     |   movea.l 16(sp),a0
   14efc:	|  |  |  |  |     |   move.l 4(a0),d1
   14f00:	|  |  |  |  |     |   move.l 4(sp),d0
   14f04:	|  |  |  |  |     |   add.l d0,d0
   14f06:	|  |  |  |  |     |   add.l d0,d0
   14f08:	|  |  |  |  |     |   movea.l d1,a0
   14f0a:	|  |  |  |  |     |   adda.l d0,a0
   14f0c:	|  |  |  |  |     |   move.l (a0),d0
   14f0e:	|  |  |  |  |     |   movea.l 28(sp),a0
   14f12:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   14f14:	|  |  |  |  |     |   moveq #1,d0
   14f16:	|  |  |  |  |  /--|-- bra.s 14f56 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   14f18:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   14f1c:	|  |  |  |  |  |      move.l 4(a0),d1
   14f20:	|  |  |  |  |  |      move.l 4(sp),d0
   14f24:	|  |  |  |  |  |      add.l d0,d0
   14f26:	|  |  |  |  |  |      add.l d0,d0
   14f28:	|  |  |  |  |  |      movea.l d1,a0
   14f2a:	|  |  |  |  |  |      adda.l d0,a0
   14f2c:	|  |  |  |  |  |      move.l (a0),d0
   14f2e:	|  |  |  |  |  |      movea.l 24(sp),a0
   14f32:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   14f34:	|  |  |  |  \--|----> addq.l #1,(sp)
   14f36:	|  |  |  \-----|----> movea.l 20(sp),a0
   14f3a:	|  |  |        |      move.l (a0),d0
   14f3c:	|  |  |        |      cmp.l (sp),d0
   14f3e:	|  |  \--------|----- bgt.w 14ebc <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   14f42:	|  |           |      addq.l #1,4(sp)
   14f46:	|  \-----------|----> movea.l 16(sp),a0
   14f4a:	|              |      move.l (a0),d0
   14f4c:	|              |      cmp.l 4(sp),d0
   14f50:	\--------------|----- bgt.w 14eb8 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   14f54:	               |      clr.w d0
}
   14f56:	               \----> lea 12(sp),sp
   14f5a:	                      rts

00014f5c <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   14f5c:	movea.l 1b344 <currentFloor>,a0
   14f62:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   14f66:	movea.l 1b344 <currentFloor>,a0
   14f6c:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   14f70:	movea.l 1b344 <currentFloor>,a0
   14f76:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   14f7a:	movea.l 1b344 <currentFloor>,a0
   14f80:	clr.l 16(a0)
}
   14f84:	nop
   14f86:	rts

00014f88 <inFloor>:

int inFloor (int x, int y) {
   14f88:	          subq.l #8,sp
	int i, r = -1;
   14f8a:	          moveq #-1,d0
   14f8c:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   14f8e:	          clr.l 4(sp)
   14f92:	   /----- bra.s 14fc6 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   14f94:	/--|----> movea.l 1b344 <currentFloor>,a0
   14f9a:	|  |      move.l 12(a0),d1
   14f9e:	|  |      move.l 4(sp),d0
   14fa2:	|  |      lsl.l #3,d0
   14fa4:	|  |      add.l d1,d0
   14fa6:	|  |      move.l 16(sp),-(sp)
   14faa:	|  |      move.l 16(sp),-(sp)
   14fae:	|  |      move.l d0,-(sp)
   14fb0:	|  |      jsr 15192 <pointInFloorPolygon>
   14fb6:	|  |      lea 12(sp),sp
   14fba:	|  |      tst.w d0
   14fbc:	|  |  /-- beq.s 14fc2 <inFloor+0x3a>
			r = i;
   14fbe:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   14fc2:	|  |  \-> addq.l #1,4(sp)
   14fc6:	|  \----> movea.l 1b344 <currentFloor>,a0
   14fcc:	|         move.l 8(a0),d0
   14fd0:	|         cmp.l 4(sp),d0
   14fd4:	\-------- bgt.s 14f94 <inFloor+0xc>

	return r;
   14fd6:	          move.l (sp),d0
}
   14fd8:	          addq.l #8,sp
   14fda:	          rts

00014fdc <initFloor>:

BOOL initFloor () {
   14fdc:	       lea -12(sp),sp
   14fe0:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   14fe2:	       moveq #20,d0
   14fe4:	       move.l d0,12(sp)
   14fe8:	       clr.l 8(sp)
   14fec:	       move.l 1b1d8 <SysBase>,d0
   14ff2:	       movea.l d0,a6
   14ff4:	       move.l 12(sp),d0
   14ff8:	       move.l 8(sp),d1
   14ffc:	       jsr -684(a6)
   15000:	       move.l d0,4(sp)
   15004:	       move.l 4(sp),d0
   15008:	       move.l d0,1b344 <currentFloor>

    if(currentFloor == 0) {
   1500e:	       move.l 1b344 <currentFloor>,d0
   15014:	/----- bne.s 15028 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   15016:	|      pea 18927 <line.c.05397aaf+0xe9>
   1501c:	|      jsr 15c26 <KPrintF>
   15022:	|      addq.l #4,sp
        return FALSE;
   15024:	|      clr.w d0
   15026:	|  /-- bra.s 15030 <initFloor+0x54>
    }

	noFloor ();
   15028:	\--|-> jsr 14f5c <noFloor>
	return TRUE;
   1502e:	   |   moveq #1,d0
}
   15030:	   \-> movea.l (sp)+,a6
   15032:	       lea 12(sp),sp
   15036:	       rts

00015038 <killFloor>:

void killFloor () {
   15038:	       lea -24(sp),sp
   1503c:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1503e:	       clr.l 24(sp)
   15042:	   /-- bra.s 1509c <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   15044:	/--|-> movea.l 1b344 <currentFloor>,a0
   1504a:	|  |   move.l 12(a0),d1
   1504e:	|  |   move.l 24(sp),d0
   15052:	|  |   lsl.l #3,d0
   15054:	|  |   movea.l d1,a0
   15056:	|  |   adda.l d0,a0
   15058:	|  |   move.l 4(a0),8(sp)
   1505e:	|  |   move.l 1b1d8 <SysBase>,d0
   15064:	|  |   movea.l d0,a6
   15066:	|  |   movea.l 8(sp),a1
   1506a:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1506e:	|  |   movea.l 1b344 <currentFloor>,a0
   15074:	|  |   move.l 16(a0),d1
   15078:	|  |   move.l 24(sp),d0
   1507c:	|  |   add.l d0,d0
   1507e:	|  |   add.l d0,d0
   15080:	|  |   movea.l d1,a0
   15082:	|  |   adda.l d0,a0
   15084:	|  |   move.l (a0),4(sp)
   15088:	|  |   move.l 1b1d8 <SysBase>,d0
   1508e:	|  |   movea.l d0,a6
   15090:	|  |   movea.l 4(sp),a1
   15094:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   15098:	|  |   addq.l #1,24(sp)
   1509c:	|  \-> movea.l 1b344 <currentFloor>,a0
   150a2:	|      move.l 8(a0),d0
   150a6:	|      cmp.l 24(sp),d0
   150aa:	\----- bgt.s 15044 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   150ac:	       movea.l 1b344 <currentFloor>,a0
   150b2:	       move.l 12(a0),20(sp)
   150b8:	       move.l 1b1d8 <SysBase>,d0
   150be:	       movea.l d0,a6
   150c0:	       movea.l 20(sp),a1
   150c4:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   150c8:	       movea.l 1b344 <currentFloor>,a0
   150ce:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   150d2:	       movea.l 1b344 <currentFloor>,a0
   150d8:	       move.l 4(a0),16(sp)
   150de:	       move.l 1b1d8 <SysBase>,d0
   150e4:	       movea.l d0,a6
   150e6:	       movea.l 16(sp),a1
   150ea:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   150ee:	       movea.l 1b344 <currentFloor>,a0
   150f4:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   150f8:	       movea.l 1b344 <currentFloor>,a0
   150fe:	       move.l 16(a0),12(sp)
   15104:	       move.l 1b1d8 <SysBase>,d0
   1510a:	       movea.l d0,a6
   1510c:	       movea.l 12(sp),a1
   15110:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   15114:	       movea.l 1b344 <currentFloor>,a0
   1511a:	       clr.l 16(a0)
}
   1511e:	       nop
   15120:	       movea.l (sp)+,a6
   15122:	       lea 24(sp),sp
   15126:	       rts

00015128 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   15128:	                   lea -12(sp),sp
	int sharedVertices = 0;
   1512c:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   15130:	                   clr.l 4(sp)
   15134:	   /-------------- bra.s 15180 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   15136:	/--|-------------> clr.l (sp)
   15138:	|  |     /-------- bra.s 15174 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1513a:	|  |  /--|-------> move.l 20(sp),d1
   1513e:	|  |  |  |         move.l 4(sp),d0
   15142:	|  |  |  |         add.l d0,d0
   15144:	|  |  |  |         add.l d0,d0
   15146:	|  |  |  |         movea.l d1,a0
   15148:	|  |  |  |         adda.l d0,a0
   1514a:	|  |  |  |         move.l (a0),d1
   1514c:	|  |  |  |         movea.l 28(sp),a0
   15150:	|  |  |  |         move.l (sp),d0
   15152:	|  |  |  |         add.l d0,d0
   15154:	|  |  |  |         add.l d0,d0
   15156:	|  |  |  |         adda.l d0,a0
   15158:	|  |  |  |         move.l (a0),d0
   1515a:	|  |  |  |         cmp.l d1,d0
   1515c:	|  |  |  |     /-- bne.s 15172 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1515e:	|  |  |  |     |   move.l 8(sp),d0
   15162:	|  |  |  |     |   move.l d0,d1
   15164:	|  |  |  |     |   addq.l #1,d1
   15166:	|  |  |  |     |   move.l d1,8(sp)
   1516a:	|  |  |  |     |   tst.l d0
   1516c:	|  |  |  |     +-- beq.s 15172 <polysShareSide+0x4a>
   1516e:	|  |  |  |     |   moveq #1,d0
   15170:	|  |  |  |  /--|-- bra.s 1518c <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   15172:	|  |  |  |  |  \-> addq.l #1,(sp)
   15174:	|  |  |  \--|----> move.l 24(sp),d0
   15178:	|  |  |     |      cmp.l (sp),d0
   1517a:	|  |  \-----|----- bgt.s 1513a <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1517c:	|  |        |      addq.l #1,4(sp)
   15180:	|  \--------|----> move.l 16(sp),d0
   15184:	|           |      cmp.l 4(sp),d0
   15188:	\-----------|----- bgt.s 15136 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1518a:	            |      clr.w d0
}
   1518c:	            \----> lea 12(sp),sp
   15190:	                   rts

00015192 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   15192:	             lea -28(sp),sp
   15196:	             move.l d3,-(sp)
   15198:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   1519a:	             clr.l 32(sp)
   1519e:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   151a2:	             movea.l 40(sp),a0
   151a6:	             move.l (a0),d0
   151a8:	             move.l d0,d1
   151aa:	             subq.l #1,d1
   151ac:	             move.l d1,28(sp)
   151b0:	   /-------- bra.w 153aa <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   151b4:	/--|-------> movea.l 1b344 <currentFloor>,a0
   151ba:	|  |         move.l 4(a0),d1
   151be:	|  |         movea.l 40(sp),a0
   151c2:	|  |         movea.l 4(a0),a0
   151c6:	|  |         move.l 32(sp),d0
   151ca:	|  |         add.l d0,d0
   151cc:	|  |         add.l d0,d0
   151ce:	|  |         adda.l d0,a0
   151d0:	|  |         move.l (a0),d0
   151d2:	|  |         lsl.l #3,d0
   151d4:	|  |         movea.l d1,a0
   151d6:	|  |         adda.l d0,a0
   151d8:	|  |         move.l (a0),d0
   151da:	|  |         move.l d0,-(sp)
   151dc:	|  |         jsr 15ede <__floatsisf>
   151e2:	|  |         addq.l #4,sp
   151e4:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   151e8:	|  |         movea.l 1b344 <currentFloor>,a0
   151ee:	|  |         move.l 4(a0),d1
   151f2:	|  |         movea.l 40(sp),a0
   151f6:	|  |         movea.l 4(a0),a0
   151fa:	|  |         move.l 32(sp),d0
   151fe:	|  |         add.l d0,d0
   15200:	|  |         add.l d0,d0
   15202:	|  |         adda.l d0,a0
   15204:	|  |         move.l (a0),d0
   15206:	|  |         lsl.l #3,d0
   15208:	|  |         movea.l d1,a0
   1520a:	|  |         adda.l d0,a0
   1520c:	|  |         move.l 4(a0),d0
   15210:	|  |         move.l d0,-(sp)
   15212:	|  |         jsr 15ede <__floatsisf>
   15218:	|  |         addq.l #4,sp
   1521a:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   1521e:	|  |         movea.l 1b344 <currentFloor>,a0
   15224:	|  |         move.l 4(a0),d1
   15228:	|  |         movea.l 40(sp),a0
   1522c:	|  |         movea.l 4(a0),a0
   15230:	|  |         move.l 28(sp),d0
   15234:	|  |         add.l d0,d0
   15236:	|  |         add.l d0,d0
   15238:	|  |         adda.l d0,a0
   1523a:	|  |         move.l (a0),d0
   1523c:	|  |         lsl.l #3,d0
   1523e:	|  |         movea.l d1,a0
   15240:	|  |         adda.l d0,a0
   15242:	|  |         move.l (a0),d0
   15244:	|  |         move.l d0,-(sp)
   15246:	|  |         jsr 15ede <__floatsisf>
   1524c:	|  |         addq.l #4,sp
   1524e:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   15252:	|  |         movea.l 1b344 <currentFloor>,a0
   15258:	|  |         move.l 4(a0),d1
   1525c:	|  |         movea.l 40(sp),a0
   15260:	|  |         movea.l 4(a0),a0
   15264:	|  |         move.l 28(sp),d0
   15268:	|  |         add.l d0,d0
   1526a:	|  |         add.l d0,d0
   1526c:	|  |         adda.l d0,a0
   1526e:	|  |         move.l (a0),d0
   15270:	|  |         lsl.l #3,d0
   15272:	|  |         movea.l d1,a0
   15274:	|  |         adda.l d0,a0
   15276:	|  |         move.l 4(a0),d0
   1527a:	|  |         move.l d0,-(sp)
   1527c:	|  |         jsr 15ede <__floatsisf>
   15282:	|  |         addq.l #4,sp
   15284:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   15288:	|  |         move.l 48(sp),-(sp)
   1528c:	|  |         jsr 15ede <__floatsisf>
   15292:	|  |         addq.l #4,sp
   15294:	|  |         move.l d0,-(sp)
   15296:	|  |         move.l 20(sp),-(sp)
   1529a:	|  |         jsr 16080 <__lesf2>
   152a0:	|  |         addq.l #8,sp
   152a2:	|  |         tst.l d0
   152a4:	|  |     /-- bgt.s 152c4 <pointInFloorPolygon+0x132>
   152a6:	|  |     |   move.l 48(sp),-(sp)
   152aa:	|  |     |   jsr 15ede <__floatsisf>
   152b0:	|  |     |   addq.l #4,sp
   152b2:	|  |     |   move.l d0,-(sp)
   152b4:	|  |     |   move.l 12(sp),-(sp)
   152b8:	|  |     |   jsr 1604a <__gtsf2>
   152be:	|  |     |   addq.l #8,sp
   152c0:	|  |     |   tst.l d0
   152c2:	|  |  /--|-- bgt.s 15304 <pointInFloorPolygon+0x172>
   152c4:	|  |  |  \-> move.l 48(sp),-(sp)
   152c8:	|  |  |      jsr 15ede <__floatsisf>
   152ce:	|  |  |      addq.l #4,sp
   152d0:	|  |  |      move.l d0,-(sp)
   152d2:	|  |  |      move.l 12(sp),-(sp)
   152d6:	|  |  |      jsr 16080 <__lesf2>
   152dc:	|  |  |      addq.l #8,sp
   152de:	|  |  |      tst.l d0
   152e0:	|  |  |  /-- bgt.w 1539a <pointInFloorPolygon+0x208>
   152e4:	|  |  |  |   move.l 48(sp),-(sp)
   152e8:	|  |  |  |   jsr 15ede <__floatsisf>
   152ee:	|  |  |  |   addq.l #4,sp
   152f0:	|  |  |  |   move.l d0,-(sp)
   152f2:	|  |  |  |   move.l 20(sp),-(sp)
   152f6:	|  |  |  |   jsr 1604a <__gtsf2>
   152fc:	|  |  |  |   addq.l #8,sp
   152fe:	|  |  |  |   tst.l d0
   15300:	|  |  |  +-- ble.w 1539a <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   15304:	|  |  \--|-> move.l 44(sp),-(sp)
   15308:	|  |     |   jsr 15ede <__floatsisf>
   1530e:	|  |     |   addq.l #4,sp
   15310:	|  |     |   move.l d0,d3
   15312:	|  |     |   move.l 20(sp),-(sp)
   15316:	|  |     |   move.l 16(sp),-(sp)
   1531a:	|  |     |   jsr 161d2 <__subsf3>
   15320:	|  |     |   addq.l #8,sp
   15322:	|  |     |   move.l d0,d2
   15324:	|  |     |   move.l 48(sp),-(sp)
   15328:	|  |     |   jsr 15ede <__floatsisf>
   1532e:	|  |     |   addq.l #4,sp
   15330:	|  |     |   move.l 16(sp),-(sp)
   15334:	|  |     |   move.l d0,-(sp)
   15336:	|  |     |   jsr 161d2 <__subsf3>
   1533c:	|  |     |   addq.l #8,sp
   1533e:	|  |     |   move.l d0,-(sp)
   15340:	|  |     |   move.l d2,-(sp)
   15342:	|  |     |   jsr 15f90 <__mulsf3>
   15348:	|  |     |   addq.l #8,sp
   1534a:	|  |     |   move.l d0,d2
   1534c:	|  |     |   move.l 16(sp),-(sp)
   15350:	|  |     |   move.l 12(sp),-(sp)
   15354:	|  |     |   jsr 161d2 <__subsf3>
   1535a:	|  |     |   addq.l #8,sp
   1535c:	|  |     |   move.l d0,-(sp)
   1535e:	|  |     |   move.l d2,-(sp)
   15360:	|  |     |   jsr 15d8a <__divsf3>
   15366:	|  |     |   addq.l #8,sp
   15368:	|  |     |   move.l 20(sp),-(sp)
   1536c:	|  |     |   move.l d0,-(sp)
   1536e:	|  |     |   jsr 15c90 <__addsf3>
   15374:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   15376:	|  |     |   move.l d0,-(sp)
   15378:	|  |     |   move.l d3,-(sp)
   1537a:	|  |     |   jsr 16104 <__ltsf2>
   15380:	|  |     |   addq.l #8,sp
   15382:	|  |     |   tst.l d0
   15384:	|  |     +-- bge.s 1539a <pointInFloorPolygon+0x208>

			c = !c;
   15386:	|  |     |   tst.l 24(sp)
   1538a:	|  |     |   seq d0
   1538c:	|  |     |   neg.b d0
   1538e:	|  |     |   move.b d0,d0
   15390:	|  |     |   andi.l #255,d0
   15396:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1539a:	|  |     \-> move.l 32(sp),d0
   1539e:	|  |         move.l d0,d1
   153a0:	|  |         addq.l #1,d1
   153a2:	|  |         move.l d1,32(sp)
   153a6:	|  |         move.l d0,28(sp)
   153aa:	|  \-------> movea.l 40(sp),a0
   153ae:	|            move.l (a0),d0
   153b0:	|            cmp.l 32(sp),d0
   153b4:	\----------- bgt.w 151b4 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   153b8:	             tst.l 24(sp)
   153bc:	             sne d0
   153be:	             neg.b d0
   153c0:	             move.b d0,d0
   153c2:	             andi.w #255,d0
}
   153c6:	             move.l (sp)+,d2
   153c8:	             move.l (sp)+,d3
   153ca:	             lea 28(sp),sp
   153ce:	             rts

000153d0 <setFloor>:

BOOL setFloor (int fileNum) {
   153d0:	                               lea -132(sp),sp
   153d4:	                               move.l a6,-(sp)
   153d6:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   153d8:	                               jsr 15038 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   153de:	                               move.l 144(sp),-(sp)
   153e2:	                               jsr 5c76 <openFileFromNum>
   153e8:	                               addq.l #4,sp
   153ea:	                               tst.l d0
   153ec:	                           /-- bne.s 153f4 <setFloor+0x24>
   153ee:	                           |   clr.w d0
   153f0:	/--------------------------|-- bra.w 15b40 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   153f4:	|                          \-> movea.l 1b344 <currentFloor>,a0
   153fa:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   153fe:	|                              move.l 1b1c0 <bigDataFile>,118(sp)
   15406:	|                              move.l 1b1e0 <DOSBase>,d0
   1540c:	|                              movea.l d0,a6
   1540e:	|                              move.l 118(sp),d1
   15412:	|                              jsr -306(a6)
   15416:	|                              move.l d0,114(sp)
   1541a:	|                              move.l 114(sp),d0
   1541e:	|                              movea.l 1b344 <currentFloor>,a0
   15424:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   15428:	|                              movea.l 1b344 <currentFloor>,a0
   1542e:	|                              move.l 8(a0),d0
   15432:	|                              lsl.l #3,d0
   15434:	|                              move.l d0,110(sp)
   15438:	|                              clr.l 106(sp)
   1543c:	|                              move.l 1b1d8 <SysBase>,d0
   15442:	|                              movea.l d0,a6
   15444:	|                              move.l 110(sp),d0
   15448:	|                              move.l 106(sp),d1
   1544c:	|                              jsr -684(a6)
   15450:	|                              move.l d0,102(sp)
   15454:	|                              move.l 102(sp),d0
   15458:	|                              movea.l 1b344 <currentFloor>,a0
   1545e:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   15462:	|                              movea.l 1b344 <currentFloor>,a0
   15468:	|                              move.l 12(a0),d0
   1546c:	|                          /-- bne.s 15482 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   1546e:	|                          |   pea 1894b <line.c.05397aaf+0x10d>
   15474:	|                          |   jsr 15c26 <KPrintF>
   1547a:	|                          |   addq.l #4,sp
		return FALSE;
   1547c:	|                          |   clr.w d0
   1547e:	+--------------------------|-- bra.w 15b40 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15482:	|                          \-> clr.l 136(sp)
   15486:	|                    /-------- bra.w 1559e <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1548a:	|                 /--|-------> move.l 1b1c0 <bigDataFile>,26(sp)
   15492:	|                 |  |         move.l 1b1e0 <DOSBase>,d0
   15498:	|                 |  |         movea.l d0,a6
   1549a:	|                 |  |         move.l 26(sp),d1
   1549e:	|                 |  |         jsr -306(a6)
   154a2:	|                 |  |         move.l d0,22(sp)
   154a6:	|                 |  |         move.l 22(sp),d1
   154aa:	|                 |  |         movea.l 1b344 <currentFloor>,a0
   154b0:	|                 |  |         movea.l 12(a0),a0
   154b4:	|                 |  |         move.l 136(sp),d0
   154b8:	|                 |  |         lsl.l #3,d0
   154ba:	|                 |  |         adda.l d0,a0
   154bc:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   154be:	|                 |  |         movea.l 1b344 <currentFloor>,a0
   154c4:	|                 |  |         move.l 12(a0),d1
   154c8:	|                 |  |         move.l 136(sp),d0
   154cc:	|                 |  |         lsl.l #3,d0
   154ce:	|                 |  |         movea.l d1,a0
   154d0:	|                 |  |         adda.l d0,a0
   154d2:	|                 |  |         move.l (a0),d0
   154d4:	|                 |  |         add.l d0,d0
   154d6:	|                 |  |         add.l d0,d0
   154d8:	|                 |  |         move.l d0,18(sp)
   154dc:	|                 |  |         clr.l 14(sp)
   154e0:	|                 |  |         move.l 1b1d8 <SysBase>,d0
   154e6:	|                 |  |         movea.l d0,a6
   154e8:	|                 |  |         move.l 18(sp),d0
   154ec:	|                 |  |         move.l 14(sp),d1
   154f0:	|                 |  |         jsr -684(a6)
   154f4:	|                 |  |         move.l d0,10(sp)
   154f8:	|                 |  |         move.l 10(sp),d1
   154fc:	|                 |  |         movea.l 1b344 <currentFloor>,a0
   15502:	|                 |  |         movea.l 12(a0),a0
   15506:	|                 |  |         move.l 136(sp),d0
   1550a:	|                 |  |         lsl.l #3,d0
   1550c:	|                 |  |         adda.l d0,a0
   1550e:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   15512:	|                 |  |         movea.l 1b344 <currentFloor>,a0
   15518:	|                 |  |         move.l 12(a0),d1
   1551c:	|                 |  |         move.l 136(sp),d0
   15520:	|                 |  |         lsl.l #3,d0
   15522:	|                 |  |         movea.l d1,a0
   15524:	|                 |  |         adda.l d0,a0
   15526:	|                 |  |         move.l 4(a0),d0
   1552a:	|                 |  |     /-- bne.s 15540 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   1552c:	|                 |  |     |   pea 1894b <line.c.05397aaf+0x10d>
   15532:	|                 |  |     |   jsr 15c26 <KPrintF>
   15538:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1553a:	|                 |  |     |   clr.w d0
   1553c:	+-----------------|--|-----|-- bra.w 15b40 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   15540:	|                 |  |     \-> clr.l 132(sp)
   15544:	|                 |  |     /-- bra.s 1557e <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   15546:	|                 |  |  /--|-> move.l 1b1c0 <bigDataFile>,d1
   1554c:	|                 |  |  |  |   movea.l 1b344 <currentFloor>,a0
   15552:	|                 |  |  |  |   movea.l 12(a0),a0
   15556:	|                 |  |  |  |   move.l 136(sp),d0
   1555a:	|                 |  |  |  |   lsl.l #3,d0
   1555c:	|                 |  |  |  |   adda.l d0,a0
   1555e:	|                 |  |  |  |   movea.l 4(a0),a0
   15562:	|                 |  |  |  |   move.l 132(sp),d0
   15566:	|                 |  |  |  |   add.l d0,d0
   15568:	|                 |  |  |  |   add.l d0,d0
   1556a:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   1556e:	|                 |  |  |  |   move.l d1,-(sp)
   15570:	|                 |  |  |  |   jsr 6bc <get2bytes>
   15576:	|                 |  |  |  |   addq.l #4,sp
   15578:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1557a:	|                 |  |  |  |   addq.l #1,132(sp)
   1557e:	|                 |  |  |  \-> movea.l 1b344 <currentFloor>,a0
   15584:	|                 |  |  |      move.l 12(a0),d1
   15588:	|                 |  |  |      move.l 136(sp),d0
   1558c:	|                 |  |  |      lsl.l #3,d0
   1558e:	|                 |  |  |      movea.l d1,a0
   15590:	|                 |  |  |      adda.l d0,a0
   15592:	|                 |  |  |      move.l (a0),d0
   15594:	|                 |  |  |      cmp.l 132(sp),d0
   15598:	|                 |  |  \----- bgt.s 15546 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1559a:	|                 |  |         addq.l #1,136(sp)
   1559e:	|                 |  \-------> movea.l 1b344 <currentFloor>,a0
   155a4:	|                 |            move.l 8(a0),d0
   155a8:	|                 |            cmp.l 136(sp),d0
   155ac:	|                 \----------- bgt.w 1548a <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   155b0:	|                              move.l 1b1c0 <bigDataFile>,d0
   155b6:	|                              move.l d0,-(sp)
   155b8:	|                              jsr 6bc <get2bytes>
   155be:	|                              addq.l #4,sp
   155c0:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   155c4:	|                              move.l 136(sp),d0
   155c8:	|                              lsl.l #3,d0
   155ca:	|                              move.l d0,98(sp)
   155ce:	|                              clr.l 94(sp)
   155d2:	|                              move.l 1b1d8 <SysBase>,d0
   155d8:	|                              movea.l d0,a6
   155da:	|                              move.l 98(sp),d0
   155de:	|                              move.l 94(sp),d1
   155e2:	|                              jsr -684(a6)
   155e6:	|                              move.l d0,90(sp)
   155ea:	|                              move.l 90(sp),d0
   155ee:	|                              movea.l 1b344 <currentFloor>,a0
   155f4:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   155f8:	|                              movea.l 1b344 <currentFloor>,a0
   155fe:	|                              move.l 4(a0),d0
   15602:	|                          /-- bne.s 15618 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   15604:	|                          |   pea 1894b <line.c.05397aaf+0x10d>
   1560a:	|                          |   jsr 15c26 <KPrintF>
   15610:	|                          |   addq.l #4,sp
		return FALSE;
   15612:	|                          |   clr.w d0
   15614:	+--------------------------|-- bra.w 15b40 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   15618:	|                          \-> clr.l 132(sp)
   1561c:	|                          /-- bra.s 15670 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   1561e:	|                       /--|-> move.l 1b1c0 <bigDataFile>,d1
   15624:	|                       |  |   movea.l 1b344 <currentFloor>,a0
   1562a:	|                       |  |   movea.l 4(a0),a0
   1562e:	|                       |  |   move.l 132(sp),d0
   15632:	|                       |  |   lsl.l #3,d0
   15634:	|                       |  |   lea (0,a0,d0.l),a2
   15638:	|                       |  |   move.l d1,-(sp)
   1563a:	|                       |  |   jsr 6bc <get2bytes>
   15640:	|                       |  |   addq.l #4,sp
   15642:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   15644:	|                       |  |   move.l 1b1c0 <bigDataFile>,d1
   1564a:	|                       |  |   movea.l 1b344 <currentFloor>,a0
   15650:	|                       |  |   movea.l 4(a0),a0
   15654:	|                       |  |   move.l 132(sp),d0
   15658:	|                       |  |   lsl.l #3,d0
   1565a:	|                       |  |   lea (0,a0,d0.l),a2
   1565e:	|                       |  |   move.l d1,-(sp)
   15660:	|                       |  |   jsr 6bc <get2bytes>
   15666:	|                       |  |   addq.l #4,sp
   15668:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   1566c:	|                       |  |   addq.l #1,132(sp)
   15670:	|                       |  \-> move.l 132(sp),d0
   15674:	|                       |      cmp.l 136(sp),d0
   15678:	|                       \----- blt.s 1561e <setFloor+0x24e>
	}

	finishAccess ();
   1567a:	|                              jsr 5b6e <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   15680:	|                              movea.l 1b344 <currentFloor>,a0
   15686:	|                              move.l 8(a0),d0
   1568a:	|                              add.l d0,d0
   1568c:	|                              add.l d0,d0
   1568e:	|                              move.l d0,86(sp)
   15692:	|                              clr.l 82(sp)
   15696:	|                              move.l 1b1d8 <SysBase>,d0
   1569c:	|                              movea.l d0,a6
   1569e:	|                              move.l 86(sp),d0
   156a2:	|                              move.l 82(sp),d1
   156a6:	|                              jsr -684(a6)
   156aa:	|                              move.l d0,78(sp)
   156ae:	|                              move.l 78(sp),d0
   156b2:	|                              movea.l 1b344 <currentFloor>,a0
   156b8:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   156bc:	|                              movea.l 1b344 <currentFloor>,a0
   156c2:	|                              move.l 8(a0),d0
   156c6:	|                              add.l d0,d0
   156c8:	|                              add.l d0,d0
   156ca:	|                              move.l d0,74(sp)
   156ce:	|                              clr.l 70(sp)
   156d2:	|                              move.l 1b1d8 <SysBase>,d0
   156d8:	|                              movea.l d0,a6
   156da:	|                              move.l 74(sp),d0
   156de:	|                              move.l 70(sp),d1
   156e2:	|                              jsr -684(a6)
   156e6:	|                              move.l d0,66(sp)
   156ea:	|                              move.l 66(sp),d0
   156ee:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   156f2:	|                              movea.l 1b344 <currentFloor>,a0
   156f8:	|                              move.l 16(a0),d0
   156fc:	|                          /-- bne.s 15712 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   156fe:	|                          |   pea 1894b <line.c.05397aaf+0x10d>
   15704:	|                          |   jsr 15c26 <KPrintF>
   1570a:	|                          |   addq.l #4,sp
		return FALSE;
   1570c:	|                          |   clr.w d0
   1570e:	+--------------------------|-- bra.w 15b40 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15712:	|                          \-> clr.l 136(sp)
   15716:	|                    /-------- bra.w 1583a <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1571a:	|                 /--|-------> movea.l 1b344 <currentFloor>,a0
   15720:	|                 |  |         move.l 8(a0),d0
   15724:	|                 |  |         add.l d0,d0
   15726:	|                 |  |         add.l d0,d0
   15728:	|                 |  |         move.l d0,50(sp)
   1572c:	|                 |  |         clr.l 46(sp)
   15730:	|                 |  |         move.l 1b1d8 <SysBase>,d0
   15736:	|                 |  |         movea.l d0,a6
   15738:	|                 |  |         move.l 50(sp),d0
   1573c:	|                 |  |         move.l 46(sp),d1
   15740:	|                 |  |         jsr -684(a6)
   15744:	|                 |  |         move.l d0,42(sp)
   15748:	|                 |  |         move.l 42(sp),d0
   1574c:	|                 |  |         movea.l 1b344 <currentFloor>,a0
   15752:	|                 |  |         movea.l 16(a0),a0
   15756:	|                 |  |         move.l 136(sp),d1
   1575a:	|                 |  |         add.l d1,d1
   1575c:	|                 |  |         add.l d1,d1
   1575e:	|                 |  |         adda.l d1,a0
   15760:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   15762:	|                 |  |         movea.l 1b344 <currentFloor>,a0
   15768:	|                 |  |         move.l 8(a0),d0
   1576c:	|                 |  |         add.l d0,d0
   1576e:	|                 |  |         add.l d0,d0
   15770:	|                 |  |         move.l d0,38(sp)
   15774:	|                 |  |         clr.l 34(sp)
   15778:	|                 |  |         move.l 1b1d8 <SysBase>,d0
   1577e:	|                 |  |         movea.l d0,a6
   15780:	|                 |  |         move.l 38(sp),d0
   15784:	|                 |  |         move.l 34(sp),d1
   15788:	|                 |  |         jsr -684(a6)
   1578c:	|                 |  |         move.l d0,30(sp)
   15790:	|                 |  |         move.l 30(sp),d1
   15794:	|                 |  |         move.l 136(sp),d0
   15798:	|                 |  |         add.l d0,d0
   1579a:	|                 |  |         add.l d0,d0
   1579c:	|                 |  |         movea.l 62(sp),a0
   157a0:	|                 |  |         adda.l d0,a0
   157a2:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   157a4:	|                 |  |         movea.l 1b344 <currentFloor>,a0
   157aa:	|                 |  |         move.l 16(a0),d1
   157ae:	|                 |  |         move.l 136(sp),d0
   157b2:	|                 |  |         add.l d0,d0
   157b4:	|                 |  |         add.l d0,d0
   157b6:	|                 |  |         movea.l d1,a0
   157b8:	|                 |  |         adda.l d0,a0
   157ba:	|                 |  |         move.l (a0),d0
   157bc:	|                 |  |     /-- bne.s 157d2 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   157be:	|                 |  |     |   pea 1894b <line.c.05397aaf+0x10d>
   157c4:	|                 |  |     |   jsr 15c26 <KPrintF>
   157ca:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   157cc:	|                 |  |     |   clr.w d0
   157ce:	+-----------------|--|-----|-- bra.w 15b40 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   157d2:	|                 |  |     \-> clr.l 132(sp)
   157d6:	|                 |  |     /-- bra.s 15826 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   157d8:	|                 |  |  /--|-> movea.l 1b344 <currentFloor>,a0
   157de:	|                 |  |  |  |   move.l 16(a0),d1
   157e2:	|                 |  |  |  |   move.l 136(sp),d0
   157e6:	|                 |  |  |  |   add.l d0,d0
   157e8:	|                 |  |  |  |   add.l d0,d0
   157ea:	|                 |  |  |  |   movea.l d1,a0
   157ec:	|                 |  |  |  |   adda.l d0,a0
   157ee:	|                 |  |  |  |   move.l (a0),d1
   157f0:	|                 |  |  |  |   move.l 132(sp),d0
   157f4:	|                 |  |  |  |   add.l d0,d0
   157f6:	|                 |  |  |  |   add.l d0,d0
   157f8:	|                 |  |  |  |   movea.l d1,a0
   157fa:	|                 |  |  |  |   adda.l d0,a0
   157fc:	|                 |  |  |  |   moveq #-1,d1
   157fe:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   15800:	|                 |  |  |  |   move.l 136(sp),d0
   15804:	|                 |  |  |  |   add.l d0,d0
   15806:	|                 |  |  |  |   add.l d0,d0
   15808:	|                 |  |  |  |   movea.l 62(sp),a0
   1580c:	|                 |  |  |  |   adda.l d0,a0
   1580e:	|                 |  |  |  |   move.l (a0),d1
   15810:	|                 |  |  |  |   move.l 132(sp),d0
   15814:	|                 |  |  |  |   add.l d0,d0
   15816:	|                 |  |  |  |   add.l d0,d0
   15818:	|                 |  |  |  |   movea.l d1,a0
   1581a:	|                 |  |  |  |   adda.l d0,a0
   1581c:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15822:	|                 |  |  |  |   addq.l #1,132(sp)
   15826:	|                 |  |  |  \-> movea.l 1b344 <currentFloor>,a0
   1582c:	|                 |  |  |      move.l 8(a0),d0
   15830:	|                 |  |  |      cmp.l 132(sp),d0
   15834:	|                 |  |  \----- bgt.s 157d8 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15836:	|                 |  |         addq.l #1,136(sp)
   1583a:	|                 |  \-------> movea.l 1b344 <currentFloor>,a0
   15840:	|                 |            move.l 8(a0),d0
   15844:	|                 |            cmp.l 136(sp),d0
   15848:	|                 \----------- bgt.w 1571a <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1584c:	|                              clr.l 136(sp)
   15850:	|              /-------------- bra.w 15956 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15854:	|           /--|-------------> clr.l 132(sp)
   15858:	|           |  |     /-------- bra.w 15940 <setFloor+0x570>
			if (i != j) {
   1585c:	|           |  |  /--|-------> move.l 136(sp),d0
   15860:	|           |  |  |  |         cmp.l 132(sp),d0
   15864:	|           |  |  |  |     /-- beq.w 158f6 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   15868:	|           |  |  |  |     |   movea.l 1b344 <currentFloor>,a0
   1586e:	|           |  |  |  |     |   move.l 12(a0),d1
   15872:	|           |  |  |  |     |   move.l 132(sp),d0
   15876:	|           |  |  |  |     |   lsl.l #3,d0
   15878:	|           |  |  |  |     |   movea.l d1,a1
   1587a:	|           |  |  |  |     |   adda.l d0,a1
   1587c:	|           |  |  |  |     |   movea.l 1b344 <currentFloor>,a0
   15882:	|           |  |  |  |     |   move.l 12(a0),d1
   15886:	|           |  |  |  |     |   move.l 136(sp),d0
   1588a:	|           |  |  |  |     |   lsl.l #3,d0
   1588c:	|           |  |  |  |     |   movea.l d1,a0
   1588e:	|           |  |  |  |     |   adda.l d0,a0
   15890:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   15894:	|           |  |  |  |     |   move.l (a1),-(sp)
   15896:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   1589a:	|           |  |  |  |     |   move.l (a0),-(sp)
   1589c:	|           |  |  |  |     |   jsr 15128 <polysShareSide>
   158a2:	|           |  |  |  |     |   lea 16(sp),sp
   158a6:	|           |  |  |  |     |   tst.w d0
   158a8:	|           |  |  |  |  /--|-- beq.w 1593c <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   158ac:	|           |  |  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   158b2:	|           |  |  |  |  |  |   move.l 16(a0),d1
   158b6:	|           |  |  |  |  |  |   move.l 136(sp),d0
   158ba:	|           |  |  |  |  |  |   add.l d0,d0
   158bc:	|           |  |  |  |  |  |   add.l d0,d0
   158be:	|           |  |  |  |  |  |   movea.l d1,a0
   158c0:	|           |  |  |  |  |  |   adda.l d0,a0
   158c2:	|           |  |  |  |  |  |   move.l (a0),d1
   158c4:	|           |  |  |  |  |  |   move.l 132(sp),d0
   158c8:	|           |  |  |  |  |  |   add.l d0,d0
   158ca:	|           |  |  |  |  |  |   add.l d0,d0
   158cc:	|           |  |  |  |  |  |   movea.l d1,a0
   158ce:	|           |  |  |  |  |  |   adda.l d0,a0
   158d0:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   158d4:	|           |  |  |  |  |  |   move.l 136(sp),d0
   158d8:	|           |  |  |  |  |  |   add.l d0,d0
   158da:	|           |  |  |  |  |  |   add.l d0,d0
   158dc:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   158e0:	|           |  |  |  |  |  |   adda.l d0,a0
   158e2:	|           |  |  |  |  |  |   move.l (a0),d1
   158e4:	|           |  |  |  |  |  |   move.l 132(sp),d0
   158e8:	|           |  |  |  |  |  |   add.l d0,d0
   158ea:	|           |  |  |  |  |  |   add.l d0,d0
   158ec:	|           |  |  |  |  |  |   movea.l d1,a0
   158ee:	|           |  |  |  |  |  |   adda.l d0,a0
   158f0:	|           |  |  |  |  |  |   moveq #1,d1
   158f2:	|           |  |  |  |  |  |   move.l d1,(a0)
   158f4:	|           |  |  |  |  +--|-- bra.s 1593c <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   158f6:	|           |  |  |  |  |  \-> movea.l 1b344 <currentFloor>,a0
   158fc:	|           |  |  |  |  |      move.l 16(a0),d1
   15900:	|           |  |  |  |  |      move.l 136(sp),d0
   15904:	|           |  |  |  |  |      add.l d0,d0
   15906:	|           |  |  |  |  |      add.l d0,d0
   15908:	|           |  |  |  |  |      movea.l d1,a0
   1590a:	|           |  |  |  |  |      adda.l d0,a0
   1590c:	|           |  |  |  |  |      move.l (a0),d1
   1590e:	|           |  |  |  |  |      move.l 132(sp),d0
   15912:	|           |  |  |  |  |      add.l d0,d0
   15914:	|           |  |  |  |  |      add.l d0,d0
   15916:	|           |  |  |  |  |      movea.l d1,a0
   15918:	|           |  |  |  |  |      adda.l d0,a0
   1591a:	|           |  |  |  |  |      moveq #-2,d0
   1591c:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   1591e:	|           |  |  |  |  |      move.l 136(sp),d0
   15922:	|           |  |  |  |  |      add.l d0,d0
   15924:	|           |  |  |  |  |      add.l d0,d0
   15926:	|           |  |  |  |  |      movea.l 62(sp),a0
   1592a:	|           |  |  |  |  |      adda.l d0,a0
   1592c:	|           |  |  |  |  |      move.l (a0),d1
   1592e:	|           |  |  |  |  |      move.l 132(sp),d0
   15932:	|           |  |  |  |  |      add.l d0,d0
   15934:	|           |  |  |  |  |      add.l d0,d0
   15936:	|           |  |  |  |  |      movea.l d1,a0
   15938:	|           |  |  |  |  |      adda.l d0,a0
   1593a:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1593c:	|           |  |  |  |  \----> addq.l #1,132(sp)
   15940:	|           |  |  |  \-------> movea.l 1b344 <currentFloor>,a0
   15946:	|           |  |  |            move.l 8(a0),d0
   1594a:	|           |  |  |            cmp.l 132(sp),d0
   1594e:	|           |  |  \----------- bgt.w 1585c <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15952:	|           |  |               addq.l #1,136(sp)
   15956:	|           |  \-------------> movea.l 1b344 <currentFloor>,a0
   1595c:	|           |                  move.l 8(a0),d0
   15960:	|           |                  cmp.l 136(sp),d0
   15964:	|           \----------------- bgt.w 15854 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   15968:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   1596c:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   15970:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15974:	|  |                           clr.l 136(sp)
   15978:	|  |     /-------------------- bra.w 15ace <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1597c:	|  |  /--|-------------------> clr.l 132(sp)
   15980:	|  |  |  |     /-------------- bra.w 15ab8 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   15984:	|  |  |  |  /--|-------------> movea.l 1b344 <currentFloor>,a0
   1598a:	|  |  |  |  |  |               move.l 16(a0),d1
   1598e:	|  |  |  |  |  |               move.l 136(sp),d0
   15992:	|  |  |  |  |  |               add.l d0,d0
   15994:	|  |  |  |  |  |               add.l d0,d0
   15996:	|  |  |  |  |  |               movea.l d1,a0
   15998:	|  |  |  |  |  |               adda.l d0,a0
   1599a:	|  |  |  |  |  |               move.l (a0),d1
   1599c:	|  |  |  |  |  |               move.l 132(sp),d0
   159a0:	|  |  |  |  |  |               add.l d0,d0
   159a2:	|  |  |  |  |  |               add.l d0,d0
   159a4:	|  |  |  |  |  |               movea.l d1,a0
   159a6:	|  |  |  |  |  |               adda.l d0,a0
   159a8:	|  |  |  |  |  |               move.l (a0),d0
   159aa:	|  |  |  |  |  |               moveq #-1,d1
   159ac:	|  |  |  |  |  |               cmp.l d0,d1
   159ae:	|  |  |  |  |  |  /----------- bne.w 15ab4 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   159b2:	|  |  |  |  |  |  |            clr.l 122(sp)
   159b6:	|  |  |  |  |  |  |     /----- bra.w 15aa2 <setFloor+0x6d2>
						if (d != i && d != j) {
   159ba:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   159be:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   159c2:	|  |  |  |  |  |  |  |  |  /-- beq.w 15a9e <setFloor+0x6ce>
   159c6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   159ca:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   159ce:	|  |  |  |  |  |  |  |  |  +-- beq.w 15a9e <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   159d2:	|  |  |  |  |  |  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   159d8:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   159dc:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   159e0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159e2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159e4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   159e6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   159e8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   159ea:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   159ee:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159f0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   159f2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   159f4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   159f6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   159f8:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   159fc:	|  |  |  |  |  |  |  |  |  +-- bne.w 15a9e <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   15a00:	|  |  |  |  |  |  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   15a06:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   15a0a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   15a0e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a10:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a12:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15a14:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a16:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15a18:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15a1c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a1e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a20:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15a22:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a24:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   15a26:	|  |  |  |  |  |  |  |  |  +-- bmi.s 15a9e <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   15a28:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   15a2c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a2e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a30:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   15a34:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a36:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15a38:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15a3c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a3e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a40:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15a42:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a44:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   15a46:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   15a4a:	|  |  |  |  |  |  |  |  |  +-- bgt.s 15a9e <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   15a4c:	|  |  |  |  |  |  |  |  |  |   movea.l 1b344 <currentFloor>,a0
   15a52:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   15a56:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   15a5a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a5c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a5e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15a60:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a62:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15a64:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15a68:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a6a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a6c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15a6e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a70:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   15a74:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   15a78:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a7a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a7c:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   15a80:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a82:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   15a84:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   15a88:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a8a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   15a8c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   15a8e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   15a90:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   15a94:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   15a96:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   15a98:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   15a9e:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   15aa2:	|  |  |  |  |  |  |  |  \----> movea.l 1b344 <currentFloor>,a0
   15aa8:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   15aac:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   15ab0:	|  |  |  |  |  |  |  \-------- bgt.w 159ba <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   15ab4:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   15ab8:	|  |  |  |  |  \-------------> movea.l 1b344 <currentFloor>,a0
   15abe:	|  |  |  |  |                  move.l 8(a0),d0
   15ac2:	|  |  |  |  |                  cmp.l 132(sp),d0
   15ac6:	|  |  |  |  \----------------- bgt.w 15984 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15aca:	|  |  |  |                     addq.l #1,136(sp)
   15ace:	|  |  |  \-------------------> movea.l 1b344 <currentFloor>,a0
   15ad4:	|  |  |                        move.l 8(a0),d0
   15ad8:	|  |  |                        cmp.l 136(sp),d0
   15adc:	|  |  \----------------------- bgt.w 1597c <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   15ae0:	|  |                           tst.w 130(sp)
   15ae4:	|  \-------------------------- bne.w 1596c <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15ae8:	|                              clr.l 136(sp)
   15aec:	|                          /-- bra.s 15b14 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   15aee:	|                       /--|-> move.l 136(sp),d0
   15af2:	|                       |  |   add.l d0,d0
   15af4:	|                       |  |   add.l d0,d0
   15af6:	|                       |  |   movea.l 62(sp),a0
   15afa:	|                       |  |   adda.l d0,a0
   15afc:	|                       |  |   move.l (a0),54(sp)
   15b00:	|                       |  |   move.l 1b1d8 <SysBase>,d0
   15b06:	|                       |  |   movea.l d0,a6
   15b08:	|                       |  |   movea.l 54(sp),a1
   15b0c:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   15b10:	|                       |  |   addq.l #1,136(sp)
   15b14:	|                       |  \-> movea.l 1b344 <currentFloor>,a0
   15b1a:	|                       |      move.l 8(a0),d0
   15b1e:	|                       |      cmp.l 136(sp),d0
   15b22:	|                       \----- bgt.s 15aee <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   15b24:	|                              move.l 62(sp),58(sp)
   15b2a:	|                              move.l 1b1d8 <SysBase>,d0
   15b30:	|                              movea.l d0,a6
   15b32:	|                              movea.l 58(sp),a1
   15b36:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   15b3a:	|                              clr.l 62(sp)

	return TRUE;
   15b3e:	|                              moveq #1,d0
}
   15b40:	\----------------------------> movea.l (sp)+,a2
   15b42:	                               movea.l (sp)+,a6
   15b44:	                               lea 132(sp),sp
   15b48:	                               rts

00015b4a <setFloorNull>:

void setFloorNull () {
	killFloor ();
   15b4a:	jsr 15038 <killFloor>
	noFloor ();
   15b50:	jsr 14f5c <noFloor>
   15b56:	nop
   15b58:	rts

00015b5a <WaitVbl>:
void WaitVbl() {
   15b5a:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   15b5c:	   /-> movea.l #14675972,a0
   15b62:	   |   move.l (a0),d0
   15b64:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   15b66:	   |   move.l (sp),d0
   15b68:	   |   andi.l #130816,d0
   15b6e:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   15b70:	   |   move.l (sp),d0
   15b72:	   |   cmpi.l #76800,d0
   15b78:	   \-- beq.s 15b5c <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   15b7a:	/----> movea.l #14675972,a0
   15b80:	|      move.l (a0),d0
   15b82:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   15b86:	|      move.l 4(sp),d0
   15b8a:	|      andi.l #130816,d0
   15b90:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   15b94:	|      move.l 4(sp),d0
   15b98:	|      cmpi.l #76800,d0
   15b9e:	|  /-- beq.s 15ba2 <WaitVbl+0x48>
	while (1) {
   15ba0:	\--|-- bra.s 15b7a <WaitVbl+0x20>
			break;
   15ba2:	   \-> nop
}
   15ba4:	       nop
   15ba6:	       addq.l #8,sp
   15ba8:	       rts

00015baa <memset>:
void* memset(void *dest, int val, unsigned long len) {
   15baa:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   15bac:	       move.l 8(sp),(sp)
	while(len-- > 0)
   15bb0:	   /-- bra.s 15bc2 <memset+0x18>
		*ptr++ = val;
   15bb2:	/--|-> move.l (sp),d0
   15bb4:	|  |   move.l d0,d1
   15bb6:	|  |   addq.l #1,d1
   15bb8:	|  |   move.l d1,(sp)
   15bba:	|  |   move.l 12(sp),d1
   15bbe:	|  |   movea.l d0,a0
   15bc0:	|  |   move.b d1,(a0)
	while(len-- > 0)
   15bc2:	|  \-> move.l 16(sp),d0
   15bc6:	|      move.l d0,d1
   15bc8:	|      subq.l #1,d1
   15bca:	|      move.l d1,16(sp)
   15bce:	|      tst.l d0
   15bd0:	\----- bne.s 15bb2 <memset+0x8>
	return dest;
   15bd2:	       move.l 8(sp),d0
}
   15bd6:	       addq.l #4,sp
   15bd8:	       rts

00015bda <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   15bda:	       subq.l #8,sp
   15bdc:	       move.l d2,-(sp)
	char *d = (char *)dest;
   15bde:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   15be4:	       move.l 20(sp),4(sp)
	while(len--)
   15bea:	   /-- bra.s 15c0c <memcpy+0x32>
		*d++ = *s++;
   15bec:	/--|-> move.l 4(sp),d1
   15bf0:	|  |   move.l d1,d0
   15bf2:	|  |   addq.l #1,d0
   15bf4:	|  |   move.l d0,4(sp)
   15bf8:	|  |   move.l 8(sp),d0
   15bfc:	|  |   move.l d0,d2
   15bfe:	|  |   addq.l #1,d2
   15c00:	|  |   move.l d2,8(sp)
   15c04:	|  |   movea.l d1,a0
   15c06:	|  |   move.b (a0),d1
   15c08:	|  |   movea.l d0,a0
   15c0a:	|  |   move.b d1,(a0)
	while(len--)
   15c0c:	|  \-> move.l 24(sp),d0
   15c10:	|      move.l d0,d1
   15c12:	|      subq.l #1,d1
   15c14:	|      move.l d1,24(sp)
   15c18:	|      tst.l d0
   15c1a:	\----- bne.s 15bec <memcpy+0x12>
	return dest;
   15c1c:	       move.l 16(sp),d0
}
   15c20:	       move.l (sp)+,d2
   15c22:	       addq.l #8,sp
   15c24:	       rts

00015c26 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   15c26:	       lea -128(sp),sp
   15c2a:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   15c2e:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec661d>,d0
   15c34:	       cmpi.w #20153,d0
   15c38:	   /-- beq.s 15c5c <KPrintF+0x36>
   15c3a:	   |   cmpi.w #-24562,d0
   15c3e:	   +-- beq.s 15c5c <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   15c40:	   |   movea.l 1b1d8 <SysBase>,a6
   15c46:	   |   movea.l 144(sp),a0
   15c4a:	   |   lea 148(sp),a1
   15c4e:	   |   lea 16568 <KPutCharX>,a2
   15c54:	   |   suba.l a3,a3
   15c56:	   |   jsr -522(a6)
}
   15c5a:	/--|-- bra.s 15c86 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   15c5c:	|  \-> movea.l 1b1d8 <SysBase>,a6
   15c62:	|      movea.l 144(sp),a0
   15c66:	|      lea 148(sp),a1
   15c6a:	|      lea 16576 <PutChar>,a2
   15c70:	|      lea 12(sp),a3
   15c74:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   15c78:	|      move.l a3,-(sp)
   15c7a:	|      pea 56 <_start+0x56>
   15c7e:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec661d>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   15c84:	|      addq.l #8,sp
}
   15c86:	\----> movem.l (sp)+,a2-a3/a6
   15c8a:	       lea 128(sp),sp
   15c8e:	       rts

00015c90 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   15c90:	lea -12(sp),sp
   15c94:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   15c96:	move.l 20(sp),12(sp)
   15c9c:	move.l 24(sp),8(sp)
   15ca2:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   15ca8:	movea.l d0,a6
   15caa:	move.l 12(sp),d0
   15cae:	move.l 8(sp),d1
   15cb2:	jsr -66(a6)
   15cb6:	move.l d0,4(sp)
   15cba:	move.l 4(sp),d0
}
   15cbe:	movea.l (sp)+,a6
   15cc0:	lea 12(sp),sp
   15cc4:	rts

00015cc6 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   15cc6:	lea -32(sp),sp
   15cca:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   15cce:	move.l 48(sp),36(sp)
   15cd4:	move.l 52(sp),40(sp)
   15cda:	move.l 56(sp),28(sp)
   15ce0:	move.l 60(sp),32(sp)
   15ce6:	move.l 1b1f0 <MathIeeeDoubBasBase>,d0
   15cec:	movea.l d0,a6
   15cee:	move.l 36(sp),d0
   15cf2:	move.l 40(sp),d1
   15cf6:	move.l 28(sp),d2
   15cfa:	move.l 32(sp),d3
   15cfe:	jsr -66(a6)
   15d02:	move.l d0,12(sp)
   15d06:	move.l d1,16(sp)
   15d0a:	move.l 12(sp),20(sp)
   15d10:	move.l 16(sp),24(sp)
   15d16:	move.l 20(sp),d0
   15d1a:	move.l 24(sp),d1
}
   15d1e:	movem.l (sp)+,d2-d3/a6
   15d22:	lea 32(sp),sp
   15d26:	rts

00015d28 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   15d28:	lea -32(sp),sp
   15d2c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   15d30:	move.l 48(sp),36(sp)
   15d36:	move.l 52(sp),40(sp)
   15d3c:	move.l 56(sp),28(sp)
   15d42:	move.l 60(sp),32(sp)
   15d48:	move.l 1b1f0 <MathIeeeDoubBasBase>,d0
   15d4e:	movea.l d0,a6
   15d50:	move.l 36(sp),d0
   15d54:	move.l 40(sp),d1
   15d58:	move.l 28(sp),d2
   15d5c:	move.l 32(sp),d3
   15d60:	jsr -84(a6)
   15d64:	move.l d0,12(sp)
   15d68:	move.l d1,16(sp)
   15d6c:	move.l 12(sp),20(sp)
   15d72:	move.l 16(sp),24(sp)
   15d78:	move.l 20(sp),d0
   15d7c:	move.l 24(sp),d1
}
   15d80:	movem.l (sp)+,d2-d3/a6
   15d84:	lea 32(sp),sp
   15d88:	rts

00015d8a <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   15d8a:	lea -12(sp),sp
   15d8e:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   15d90:	move.l 20(sp),12(sp)
   15d96:	move.l 24(sp),8(sp)
   15d9c:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   15da2:	movea.l d0,a6
   15da4:	move.l 12(sp),d0
   15da8:	move.l 8(sp),d1
   15dac:	jsr -84(a6)
   15db0:	move.l d0,4(sp)
   15db4:	move.l 4(sp),d0
}
   15db8:	movea.l (sp)+,a6
   15dba:	lea 12(sp),sp
   15dbe:	rts

00015dc0 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   15dc0:	lea -12(sp),sp
   15dc4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15dc6:	move.l 20(sp),12(sp)
   15dcc:	move.l 24(sp),8(sp)
   15dd2:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   15dd8:	movea.l d0,a6
   15dda:	move.l 12(sp),d0
   15dde:	move.l 8(sp),d1
   15de2:	jsr -42(a6)
   15de6:	move.l d0,4(sp)
   15dea:	move.l 4(sp),d0
}
   15dee:	movea.l (sp)+,a6
   15df0:	lea 12(sp),sp
   15df4:	rts

00015df6 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   15df6:	lea -20(sp),sp
   15dfa:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   15dfc:	move.l 28(sp),20(sp)
   15e02:	move.l 1b1f4 <MathIeeeDoubTransBase>,d0
   15e08:	movea.l d0,a6
   15e0a:	move.l 20(sp),d0
   15e0e:	jsr -108(a6)
   15e12:	move.l d0,4(sp)
   15e16:	move.l d1,8(sp)
   15e1a:	move.l 4(sp),12(sp)
   15e20:	move.l 8(sp),16(sp)
   15e26:	move.l 12(sp),d0
   15e2a:	move.l 16(sp),d1
}
   15e2e:	movea.l (sp)+,a6
   15e30:	lea 20(sp),sp
   15e34:	rts

00015e36 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   15e36:	lea -12(sp),sp
   15e3a:	move.l a6,-(sp)
	return IEEEDPFix(value);
   15e3c:	move.l 20(sp),8(sp)
   15e42:	move.l 24(sp),12(sp)
   15e48:	move.l 1b1f0 <MathIeeeDoubBasBase>,d0
   15e4e:	movea.l d0,a6
   15e50:	move.l 8(sp),d0
   15e54:	move.l 12(sp),d1
   15e58:	jsr -30(a6)
   15e5c:	move.l d0,4(sp)
   15e60:	move.l 4(sp),d0
   15e64:	move.l d0,-(sp)
   15e66:	jsr 15e9e <__floatsidf>
   15e6c:	addq.l #4,sp
}
   15e6e:	movea.l (sp)+,a6
   15e70:	lea 12(sp),sp
   15e74:	rts

00015e76 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   15e76:	subq.l #8,sp
   15e78:	move.l a6,-(sp)
	return IEEESPFix(value);
   15e7a:	move.l 16(sp),8(sp)
   15e80:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   15e86:	movea.l d0,a6
   15e88:	move.l 8(sp),d0
   15e8c:	jsr -30(a6)
   15e90:	move.l d0,4(sp)
   15e94:	move.l 4(sp),d0
}
   15e98:	movea.l (sp)+,a6
   15e9a:	addq.l #8,sp
   15e9c:	rts

00015e9e <__floatsidf>:


DOUBLE __floatsidf (int i) {
   15e9e:	lea -20(sp),sp
   15ea2:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   15ea4:	move.l 28(sp),20(sp)
   15eaa:	move.l 1b1f0 <MathIeeeDoubBasBase>,d0
   15eb0:	movea.l d0,a6
   15eb2:	move.l 20(sp),d0
   15eb6:	jsr -36(a6)
   15eba:	move.l d0,4(sp)
   15ebe:	move.l d1,8(sp)
   15ec2:	move.l 4(sp),12(sp)
   15ec8:	move.l 8(sp),16(sp)
   15ece:	move.l 12(sp),d0
   15ed2:	move.l 16(sp),d1
}
   15ed6:	movea.l (sp)+,a6
   15ed8:	lea 20(sp),sp
   15edc:	rts

00015ede <__floatsisf>:

FLOAT __floatsisf(int i) {
   15ede:	subq.l #8,sp
   15ee0:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   15ee2:	move.l 16(sp),8(sp)
   15ee8:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   15eee:	movea.l d0,a6
   15ef0:	move.l 8(sp),d0
   15ef4:	jsr -36(a6)
   15ef8:	move.l d0,4(sp)
   15efc:	move.l 4(sp),d0
}
   15f00:	movea.l (sp)+,a6
   15f02:	addq.l #8,sp
   15f04:	rts

00015f06 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   15f06:	subq.l #8,sp
   15f08:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   15f0a:	move.l 16(sp),8(sp)
   15f10:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   15f16:	movea.l d0,a6
   15f18:	move.l 8(sp),d0
   15f1c:	jsr -36(a6)
   15f20:	move.l d0,4(sp)
   15f24:	move.l 4(sp),d0
}
   15f28:	movea.l (sp)+,a6
   15f2a:	addq.l #8,sp
   15f2c:	rts

00015f2e <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   15f2e:	lea -32(sp),sp
   15f32:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   15f36:	move.l 48(sp),36(sp)
   15f3c:	move.l 52(sp),40(sp)
   15f42:	move.l 56(sp),28(sp)
   15f48:	move.l 60(sp),32(sp)
   15f4e:	move.l 1b1f0 <MathIeeeDoubBasBase>,d0
   15f54:	movea.l d0,a6
   15f56:	move.l 36(sp),d0
   15f5a:	move.l 40(sp),d1
   15f5e:	move.l 28(sp),d2
   15f62:	move.l 32(sp),d3
   15f66:	jsr -78(a6)
   15f6a:	move.l d0,12(sp)
   15f6e:	move.l d1,16(sp)
   15f72:	move.l 12(sp),20(sp)
   15f78:	move.l 16(sp),24(sp)
   15f7e:	move.l 20(sp),d0
   15f82:	move.l 24(sp),d1
}
   15f86:	movem.l (sp)+,d2-d3/a6
   15f8a:	lea 32(sp),sp
   15f8e:	rts

00015f90 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   15f90:	lea -12(sp),sp
   15f94:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   15f96:	move.l 20(sp),12(sp)
   15f9c:	move.l 24(sp),8(sp)
   15fa2:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   15fa8:	movea.l d0,a6
   15faa:	move.l 12(sp),d0
   15fae:	move.l 8(sp),d1
   15fb2:	jsr -78(a6)
   15fb6:	move.l d0,4(sp)
   15fba:	move.l 4(sp),d0
}
   15fbe:	movea.l (sp)+,a6
   15fc0:	lea 12(sp),sp
   15fc4:	rts

00015fc6 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   15fc6:	lea -12(sp),sp
   15fca:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   15fcc:	move.l 20(sp),12(sp)
   15fd2:	move.l 24(sp),8(sp)
   15fd8:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   15fde:	movea.l d0,a6
   15fe0:	move.l 12(sp),d0
   15fe4:	move.l 8(sp),d1
   15fe8:	jsr -42(a6)
   15fec:	move.l d0,4(sp)
   15ff0:	move.l 4(sp),d0
}
   15ff4:	movea.l (sp)+,a6
   15ff6:	lea 12(sp),sp
   15ffa:	rts

00015ffc <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   15ffc:	lea -20(sp),sp
   16000:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   16004:	move.l 36(sp),24(sp)
   1600a:	move.l 40(sp),28(sp)
   16010:	move.l 44(sp),16(sp)
   16016:	move.l 48(sp),20(sp)
   1601c:	move.l 1b1f0 <MathIeeeDoubBasBase>,d0
   16022:	movea.l d0,a6
   16024:	move.l 24(sp),d0
   16028:	move.l 28(sp),d1
   1602c:	move.l 16(sp),d2
   16030:	move.l 20(sp),d3
   16034:	jsr -42(a6)
   16038:	move.l d0,12(sp)
   1603c:	move.l 12(sp),d0
}
   16040:	movem.l (sp)+,d2-d3/a6
   16044:	lea 20(sp),sp
   16048:	rts

0001604a <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   1604a:	lea -12(sp),sp
   1604e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16050:	move.l 20(sp),12(sp)
   16056:	move.l 24(sp),8(sp)
   1605c:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   16062:	movea.l d0,a6
   16064:	move.l 12(sp),d0
   16068:	move.l 8(sp),d1
   1606c:	jsr -42(a6)
   16070:	move.l d0,4(sp)
   16074:	move.l 4(sp),d0
}
   16078:	movea.l (sp)+,a6
   1607a:	lea 12(sp),sp
   1607e:	rts

00016080 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   16080:	lea -12(sp),sp
   16084:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16086:	move.l 20(sp),12(sp)
   1608c:	move.l 24(sp),8(sp)
   16092:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   16098:	movea.l d0,a6
   1609a:	move.l 12(sp),d0
   1609e:	move.l 8(sp),d1
   160a2:	jsr -42(a6)
   160a6:	move.l d0,4(sp)
   160aa:	move.l 4(sp),d0
}
   160ae:	movea.l (sp)+,a6
   160b0:	lea 12(sp),sp
   160b4:	rts

000160b6 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   160b6:	lea -20(sp),sp
   160ba:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   160be:	move.l 36(sp),24(sp)
   160c4:	move.l 40(sp),28(sp)
   160ca:	move.l 44(sp),16(sp)
   160d0:	move.l 48(sp),20(sp)
   160d6:	move.l 1b1f0 <MathIeeeDoubBasBase>,d0
   160dc:	movea.l d0,a6
   160de:	move.l 24(sp),d0
   160e2:	move.l 28(sp),d1
   160e6:	move.l 16(sp),d2
   160ea:	move.l 20(sp),d3
   160ee:	jsr -42(a6)
   160f2:	move.l d0,12(sp)
   160f6:	move.l 12(sp),d0
}
   160fa:	movem.l (sp)+,d2-d3/a6
   160fe:	lea 20(sp),sp
   16102:	rts

00016104 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   16104:	lea -12(sp),sp
   16108:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1610a:	move.l 20(sp),12(sp)
   16110:	move.l 24(sp),8(sp)
   16116:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   1611c:	movea.l d0,a6
   1611e:	move.l 12(sp),d0
   16122:	move.l 8(sp),d1
   16126:	jsr -42(a6)
   1612a:	move.l d0,4(sp)
   1612e:	move.l 4(sp),d0
}
   16132:	movea.l (sp)+,a6
   16134:	lea 12(sp),sp
   16138:	rts

0001613a <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   1613a:	lea -12(sp),sp
   1613e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16140:	move.l 20(sp),12(sp)
   16146:	move.l 24(sp),8(sp)
   1614c:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   16152:	movea.l d0,a6
   16154:	move.l 12(sp),d0
   16158:	move.l 8(sp),d1
   1615c:	jsr -42(a6)
   16160:	move.l d0,4(sp)
   16164:	move.l 4(sp),d0
}
   16168:	movea.l (sp)+,a6
   1616a:	lea 12(sp),sp
   1616e:	rts

00016170 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   16170:	lea -32(sp),sp
   16174:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   16178:	move.l 48(sp),36(sp)
   1617e:	move.l 52(sp),40(sp)
   16184:	move.l 56(sp),28(sp)
   1618a:	move.l 60(sp),32(sp)
   16190:	move.l 1b1f0 <MathIeeeDoubBasBase>,d0
   16196:	movea.l d0,a6
   16198:	move.l 36(sp),d0
   1619c:	move.l 40(sp),d1
   161a0:	move.l 28(sp),d2
   161a4:	move.l 32(sp),d3
   161a8:	jsr -72(a6)
   161ac:	move.l d0,12(sp)
   161b0:	move.l d1,16(sp)
   161b4:	move.l 12(sp),20(sp)
   161ba:	move.l 16(sp),24(sp)
   161c0:	move.l 20(sp),d0
   161c4:	move.l 24(sp),d1
}
   161c8:	movem.l (sp)+,d2-d3/a6
   161cc:	lea 32(sp),sp
   161d0:	rts

000161d2 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   161d2:	lea -12(sp),sp
   161d6:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   161d8:	move.l 20(sp),12(sp)
   161de:	move.l 24(sp),8(sp)
   161e4:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   161ea:	movea.l d0,a6
   161ec:	move.l 12(sp),d0
   161f0:	move.l 8(sp),d1
   161f4:	jsr -72(a6)
   161f8:	move.l d0,4(sp)
   161fc:	move.l 4(sp),d0
}
   16200:	movea.l (sp)+,a6
   16202:	lea 12(sp),sp
   16206:	rts

00016208 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   16208:	lea -12(sp),sp
   1620c:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1620e:	move.l 20(sp),8(sp)
   16214:	move.l 24(sp),12(sp)
   1621a:	move.l 1b1f4 <MathIeeeDoubTransBase>,d0
   16220:	movea.l d0,a6
   16222:	move.l 8(sp),d0
   16226:	move.l 12(sp),d1
   1622a:	jsr -102(a6)
   1622e:	move.l d0,4(sp)
   16232:	move.l 4(sp),d0
}
   16236:	movea.l (sp)+,a6
   16238:	lea 12(sp),sp
   1623c:	rts

0001623e <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   1623e:	subq.l #8,sp
   16240:	move.l a6,-(sp)
	return IEEESPFix(a);
   16242:	move.l 16(sp),8(sp)
   16248:	move.l 1b1e8 <MathIeeeSingBasBase>,d0
   1624e:	movea.l d0,a6
   16250:	move.l 8(sp),d0
   16254:	jsr -30(a6)
   16258:	move.l d0,4(sp)
   1625c:	move.l 4(sp),d0
}
   16260:	movea.l (sp)+,a6
   16262:	addq.l #8,sp
   16264:	rts

00016266 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   16266:	       lea -24(sp),sp
   1626a:	       move.l a6,-(sp)
    if (x > 0) {
   1626c:	       clr.l -(sp)
   1626e:	       move.l 40(sp),-(sp)
   16272:	       jsr 1604a <__gtsf2>
   16278:	       addq.l #8,sp
   1627a:	       tst.l d0
   1627c:	   /-- ble.s 162ae <atan2f+0x48>
        return IEEESPAtan(y / x);
   1627e:	   |   move.l 36(sp),-(sp)
   16282:	   |   move.l 36(sp),-(sp)
   16286:	   |   jsr 15d8a <__divsf3>
   1628c:	   |   addq.l #8,sp
   1628e:	   |   move.l d0,8(sp)
   16292:	   |   move.l 1b1ec <MathIeeeSingTransBase>,d0
   16298:	   |   movea.l d0,a6
   1629a:	   |   move.l 8(sp),d0
   1629e:	   |   jsr -30(a6)
   162a2:	   |   move.l d0,4(sp)
   162a6:	   |   move.l 4(sp),d0
   162aa:	/--|-- bra.w 1640e <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   162ae:	|  \-> clr.l -(sp)
   162b0:	|      move.l 40(sp),-(sp)
   162b4:	|      jsr 16104 <__ltsf2>
   162ba:	|      addq.l #8,sp
   162bc:	|      tst.l d0
   162be:	|  /-- bge.s 16332 <atan2f+0xcc>
   162c0:	|  |   clr.l -(sp)
   162c2:	|  |   move.l 36(sp),-(sp)
   162c6:	|  |   jsr 15fc6 <__gesf2>
   162cc:	|  |   addq.l #8,sp
   162ce:	|  |   tst.l d0
   162d0:	|  +-- blt.s 16332 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   162d2:	|  |   move.l 36(sp),-(sp)
   162d6:	|  |   move.l 36(sp),-(sp)
   162da:	|  |   jsr 15d8a <__divsf3>
   162e0:	|  |   addq.l #8,sp
   162e2:	|  |   move.l d0,24(sp)
   162e6:	|  |   move.l 1b1ec <MathIeeeSingTransBase>,d0
   162ec:	|  |   movea.l d0,a6
   162ee:	|  |   move.l 24(sp),d0
   162f2:	|  |   jsr -30(a6)
   162f6:	|  |   move.l d0,20(sp)
   162fa:	|  |   move.l 20(sp),d0
   162fe:	|  |   move.l d0,-(sp)
   16300:	|  |   jsr 15df6 <__extendsfdf2>
   16306:	|  |   addq.l #4,sp
   16308:	|  |   move.l #1413754136,-(sp)
   1630e:	|  |   move.l #1074340347,-(sp)
   16314:	|  |   move.l d1,-(sp)
   16316:	|  |   move.l d0,-(sp)
   16318:	|  |   jsr 15cc6 <__adddf3>
   1631e:	|  |   lea 16(sp),sp
   16322:	|  |   move.l d1,-(sp)
   16324:	|  |   move.l d0,-(sp)
   16326:	|  |   jsr 16208 <__truncdfsf2>
   1632c:	|  |   addq.l #8,sp
   1632e:	+--|-- bra.w 1640e <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   16332:	|  \-> clr.l -(sp)
   16334:	|      move.l 40(sp),-(sp)
   16338:	|      jsr 16104 <__ltsf2>
   1633e:	|      addq.l #8,sp
   16340:	|      tst.l d0
   16342:	|  /-- bge.s 163b4 <atan2f+0x14e>
   16344:	|  |   clr.l -(sp)
   16346:	|  |   move.l 36(sp),-(sp)
   1634a:	|  |   jsr 16104 <__ltsf2>
   16350:	|  |   addq.l #8,sp
   16352:	|  |   tst.l d0
   16354:	|  +-- bge.s 163b4 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   16356:	|  |   move.l 36(sp),-(sp)
   1635a:	|  |   move.l 36(sp),-(sp)
   1635e:	|  |   jsr 15d8a <__divsf3>
   16364:	|  |   addq.l #8,sp
   16366:	|  |   move.l d0,16(sp)
   1636a:	|  |   move.l 1b1ec <MathIeeeSingTransBase>,d0
   16370:	|  |   movea.l d0,a6
   16372:	|  |   move.l 16(sp),d0
   16376:	|  |   jsr -30(a6)
   1637a:	|  |   move.l d0,12(sp)
   1637e:	|  |   move.l 12(sp),d0
   16382:	|  |   move.l d0,-(sp)
   16384:	|  |   jsr 15df6 <__extendsfdf2>
   1638a:	|  |   addq.l #4,sp
   1638c:	|  |   move.l #1413754136,-(sp)
   16392:	|  |   move.l #1074340347,-(sp)
   16398:	|  |   move.l d1,-(sp)
   1639a:	|  |   move.l d0,-(sp)
   1639c:	|  |   jsr 16170 <__subdf3>
   163a2:	|  |   lea 16(sp),sp
   163a6:	|  |   move.l d1,-(sp)
   163a8:	|  |   move.l d0,-(sp)
   163aa:	|  |   jsr 16208 <__truncdfsf2>
   163b0:	|  |   addq.l #8,sp
   163b2:	+--|-- bra.s 1640e <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   163b4:	|  \-> clr.l -(sp)
   163b6:	|      move.l 40(sp),-(sp)
   163ba:	|      jsr 15dc0 <__eqsf2>
   163c0:	|      addq.l #8,sp
   163c2:	|      tst.l d0
   163c4:	|  /-- bne.s 163e0 <atan2f+0x17a>
   163c6:	|  |   clr.l -(sp)
   163c8:	|  |   move.l 36(sp),-(sp)
   163cc:	|  |   jsr 1604a <__gtsf2>
   163d2:	|  |   addq.l #8,sp
   163d4:	|  |   tst.l d0
   163d6:	|  +-- ble.s 163e0 <atan2f+0x17a>
        return PI / 2;
   163d8:	|  |   move.l #1070141403,d0
   163de:	+--|-- bra.s 1640e <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   163e0:	|  \-> clr.l -(sp)
   163e2:	|      move.l 40(sp),-(sp)
   163e6:	|      jsr 15dc0 <__eqsf2>
   163ec:	|      addq.l #8,sp
   163ee:	|      tst.l d0
   163f0:	|  /-- bne.s 1640c <atan2f+0x1a6>
   163f2:	|  |   clr.l -(sp)
   163f4:	|  |   move.l 36(sp),-(sp)
   163f8:	|  |   jsr 16104 <__ltsf2>
   163fe:	|  |   addq.l #8,sp
   16400:	|  |   tst.l d0
   16402:	|  +-- bge.s 1640c <atan2f+0x1a6>
        return -PI / 2;
   16404:	|  |   move.l #-1077342245,d0
   1640a:	+--|-- bra.s 1640e <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   1640c:	|  \-> moveq #0,d0
    }
}
   1640e:	\----> movea.l (sp)+,a6
   16410:	       lea 24(sp),sp
   16414:	       rts

00016416 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   16416:	lea -24(sp),sp
   1641a:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   1641c:	move.l 32(sp),20(sp)
   16422:	move.l 36(sp),24(sp)
   16428:	move.l 1b1f4 <MathIeeeDoubTransBase>,d0
   1642e:	movea.l d0,a6
   16430:	move.l 20(sp),d0
   16434:	move.l 24(sp),d1
   16438:	jsr -96(a6)
   1643c:	move.l d0,4(sp)
   16440:	move.l d1,8(sp)
   16444:	move.l 4(sp),12(sp)
   1644a:	move.l 8(sp),16(sp)
   16450:	move.l 12(sp),d0
   16454:	move.l 16(sp),d1
}
   16458:	movea.l (sp)+,a6
   1645a:	lea 24(sp),sp
   1645e:	rts

00016460 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   16460:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   16464:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   16468:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   1646c:	mulu.w 8(sp),d1
	addw	d1, d0
   16470:	add.w d1,d0
	swap	d0
   16472:	swap d0
	clrw	d0
   16474:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   16476:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   1647a:	mulu.w 10(sp),d1
	addl	d1, d0
   1647e:	add.l d1,d0
	rts
   16480:	rts

00016482 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   16482:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   16484:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   16488:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   1648c:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   16492:	   /-- bcc.s 164aa <__udivsi3+0x28>
	movel	d0, d2
   16494:	   |   move.l d0,d2
	clrw	d2
   16496:	   |   clr.w d2
	swap	d2
   16498:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   1649a:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   1649c:	   |   move.w d2,d0
	swap	d0
   1649e:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   164a0:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   164a4:	   |   divu.w d1,d2
	movew	d2, d0
   164a6:	   |   move.w d2,d0
	jra	6f
   164a8:	/--|-- bra.s 164da <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   164aa:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   164ac:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   164ae:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   164b0:	|  |   cmpi.l #65536,d1
	jcc	4b
   164b6:	|  \-- bcc.s 164ac <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   164b8:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   164ba:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   164c0:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   164c2:	|      mulu.w d0,d1
	swap	d2
   164c4:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   164c6:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   164c8:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   164ca:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   164cc:	|  /-- bne.s 164d8 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   164ce:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   164d0:	|  +-- bcs.s 164d8 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   164d2:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   164d6:	+--|-- bls.s 164da <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   164d8:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   164da:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   164dc:	       rts

000164de <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   164de:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   164e0:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   164e2:	    move.l 12(sp),d1
	jpl	1f
   164e6:	/-- bpl.s 164ec <__divsi3+0xe>
	negl	d1
   164e8:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   164ea:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   164ec:	\-> move.l 8(sp),d0
	jpl	2f
   164f0:	/-- bpl.s 164f6 <__divsi3+0x18>
	negl	d0
   164f2:	|   neg.l d0
	negb	d2
   164f4:	|   neg.b d2

2:	movel	d1, sp@-
   164f6:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   164f8:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   164fa:	    jsr 16482 <__udivsi3>
	addql	#8, sp
   16500:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   16502:	    tst.b d2
	jpl	3f
   16504:	/-- bpl.s 16508 <__divsi3+0x2a>
	negl	d0
   16506:	|   neg.l d0

3:	movel	sp@+, d2
   16508:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   1650a:	    rts

0001650c <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   1650c:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   16510:	move.l 4(sp),d0
	movel	d1, sp@-
   16514:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16516:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   16518:	jsr 164de <__divsi3>
	addql	#8, sp
   1651e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   16520:	move.l 8(sp),d1
	movel	d1, sp@-
   16524:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16526:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   16528:	jsr 16460 <__mulsi3>
	addql	#8, sp
   1652e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   16530:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   16534:	sub.l d0,d1
	movel	d1, d0
   16536:	move.l d1,d0
	rts
   16538:	rts

0001653a <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   1653a:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   1653e:	move.l 4(sp),d0
	movel	d1, sp@-
   16542:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16544:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   16546:	jsr 16482 <__udivsi3>
	addql	#8, sp
   1654c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   1654e:	move.l 8(sp),d1
	movel	d1, sp@-
   16552:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   16554:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   16556:	jsr 16460 <__mulsi3>
	addql	#8, sp
   1655c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   1655e:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   16562:	sub.l d0,d1
	movel	d1, d0
   16564:	move.l d1,d0
	rts
   16566:	rts

00016568 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   16568:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   1656a:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   1656e:	jsr -516(a6)
    move.l (sp)+, a6
   16572:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   16574:	rts

00016576 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   16576:	move.b d0,(a3)+
	rts
   16578:	rts
