
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #114930,d0
       8:	       subi.l #114930,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c0f2 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #114930,d0
      40:	       subi.l #114930,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c0f2 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 765c <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #114930,d0
      7e:	       subi.l #114930,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c0f2 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13c74 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c896 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13c8c <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c0f2 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13c74 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c896 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1c0f2 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13c74 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c896 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17c88 <PutChar+0x4>
     35c:	|  |              |   jsr 171b0 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c89e <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c89e <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c89e <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c89e <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c89e <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c89e <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c89e <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17cb2 <PutChar+0x2e>
     834:	|   jsr 171b0 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c89e <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17cce <PutChar+0x4a>
     8a6:	|   jsr 171b0 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c89e <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c89e <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c89e <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c89e <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c89e <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c89e <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c89e <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c89e <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c896 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c89e <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13c74 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c89e <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c79c <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c79c <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c79c <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c79c <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c79c <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c856 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c79c <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c79c <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c852 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c79c <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c79c <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c79c <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 995e <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c79c <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c7a0 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c7a4 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2de2 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17cf6 <PutChar+0x72>
     e1a:	          jsr 171b0 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c7b8 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17d0f <PutChar+0x8b>
     e30:	      |   jsr 171b0 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1c7b2 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1c8a2 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1c7b8 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17d3d <PutChar+0xb9>
     ef0:	|         jsr 171b0 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1c8a2 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17d5d <PutChar+0xd9>
     f3c:	|         jsr 171b0 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1c7c4 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1c7ea <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1c7da <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1c7ee <winHeight>,d0
     f6e:	|         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1c7da <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1c7da <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1c7da <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1c7da <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17d7d <PutChar+0xf9>
     fbe:	|         jsr 171b0 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1c896 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17d92 <PutChar+0x10e>
    1010:	   |   jsr 171b0 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1c89e <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1c7e6 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #114932,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #114996,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #115044,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #115084,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1c7de <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17dcd <PutChar+0x149>
    11c6:	                jsr 171b0 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1c7d6 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1c7da <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1c7d6 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1c7ca <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1c8a2 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1c7ea <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1c7ea <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1c7ea <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17b6e <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1c7b8 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1c7ea <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17b6e <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1c7ca <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1c7ea <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1c7ee <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17b6e <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1c7ea <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1c7ee <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17b6e <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1c8a2 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1c7e2 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1c7de <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1c7e6 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1c7e6 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1c7c4 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1c7c4 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1c7c4 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

 UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, UWORD x, UWORD y) {
    14e8:	                      lea -88(sp),sp
    14ec:	                      move.l a6,-(sp)
    14ee:	                      move.l d2,-(sp)
    14f0:	                      move.l 108(sp),d1
    14f4:	                      move.l 112(sp),d0
    14f8:	                      move.w d1,d1
    14fa:	                      move.w d1,10(sp)
    14fe:	                      move.w d0,d0
    1500:	                      move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1504:	                      move.l #14675968,70(sp)
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP);
    150c:	                      movea.l 100(sp),a0
    1510:	                      move.l (a0),d0
    1512:	                  /-- bpl.s 1516 <CstDrawZBuffer+0x2e>
    1514:	                  |   addq.l #7,d0
    1516:	                  \-> asr.l #3,d0
    1518:	                      movea.l 100(sp),a0
    151c:	                      move.l 4(a0),d1
    1520:	                      move.l d1,-(sp)
    1522:	                      move.l d0,-(sp)
    1524:	                      jsr 17b6e <__mulsi3>
    152a:	                      addq.l #8,sp
    152c:	                      move.l d0,66(sp)
    1530:	                      moveq #2,d0
    1532:	                      move.l d0,62(sp)
    1536:	                      move.l 1c896 <SysBase>,d0
    153c:	                      movea.l d0,a6
    153e:	                      move.l 66(sp),d0
    1542:	                      move.l 62(sp),d1
    1546:	                      jsr -684(a6)
    154a:	                      move.l d0,58(sp)
    154e:	                      move.l 58(sp),d0
    1552:	                      move.l d0,54(sp)

  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1556:	                      movea.l 100(sp),a0
    155a:	                      move.l 4(a0),d0
    155e:	                      move.l d0,d0
    1560:	                      movea.w d0,a1
    1562:	                      movea.l 100(sp),a0
    1566:	                      move.l (a0),d0
    1568:	                      move.l d0,d0
    156a:	                      movea.w d0,a0
    156c:	                      clr.l -(sp)
    156e:	                      pea 1 <_start+0x1>
    1572:	                      move.l a1,-(sp)
    1574:	                      move.l a0,-(sp)
    1576:	                      pea 17de9 <PutChar+0x165>
    157c:	                      move.l 74(sp),-(sp)
    1580:	                      jsr 17298 <debug_register_bitmap>
    1586:	                      lea 24(sp),sp
  #endif  

  WaitBlit();
    158a:	                      move.l 1c8a2 <GfxBase>,d0
    1590:	                      movea.l d0,a6
    1592:	                      jsr -228(a6)

  custom->bltafwm = 0xffff;
    1596:	                      movea.l 70(sp),a0
    159a:	                      move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    15a0:	                      movea.l 70(sp),a0
    15a4:	                      move.w #-1,70(a0)
  custom->bltamod = 0;
    15aa:	                      movea.l 70(sp),a0
    15ae:	                      move.w #0,100(a0)
  custom->bltbmod = 0;
    15b4:	                      movea.l 70(sp),a0
    15b8:	                      move.w #0,98(a0)
  custom->bltcmod = 0;
    15be:	                      movea.l 70(sp),a0
    15c2:	                      move.w #0,96(a0)
  custom->bltdmod = 0;
    15c8:	                      movea.l 70(sp),a0
    15cc:	                      move.w #0,102(a0)
  custom->bltcon0 = 0x9f0; //Copy A to D
    15d2:	                      movea.l 70(sp),a0
    15d6:	                      move.w #2544,64(a0)
  custom->bltcon1 = 0;        
    15dc:	                      movea.l 70(sp),a0
    15e0:	                      move.w #0,66(a0)

  custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    15e6:	                      movea.l 100(sp),a0
    15ea:	                      move.l 24(a0),d2
    15ee:	                      movea.l 100(sp),a0
    15f2:	                      move.l (a0),d0
    15f4:	                  /-- bpl.s 15f8 <CstDrawZBuffer+0x110>
    15f6:	                  |   addq.l #7,d0
    15f8:	                  \-> asr.l #3,d0
    15fa:	                      movea.l 100(sp),a0
    15fe:	                      move.l 4(a0),d1
    1602:	                      move.l d1,-(sp)
    1604:	                      move.l d0,-(sp)
    1606:	                      jsr 17b6e <__mulsi3>
    160c:	                      addq.l #8,sp
    160e:	                      move.l d0,d1
    1610:	                      move.l d1,d0
    1612:	                      add.l d0,d0
    1614:	                      add.l d0,d0
    1616:	                      add.l d1,d0
    1618:	                      add.l d2,d0
    161a:	                      movea.l 70(sp),a0
    161e:	                      move.l d0,80(a0)
  custom->bltdpt = (APTR) returnvalue;
    1622:	                      movea.l 70(sp),a0
    1626:	                      move.l 54(sp),84(a0)
  custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    162c:	                      movea.l 100(sp),a0
    1630:	                      move.l 4(a0),d0
    1634:	                      move.l d0,d0
    1636:	                      move.w d0,d1
    1638:	                      lsl.w #6,d1
    163a:	                      movea.l 100(sp),a0
    163e:	                      move.l (a0),d0
    1640:	                      movea.l d0,a0
    1642:	                      cmpa.w #0,a0
    1646:	                  /-- bge.s 164c <CstDrawZBuffer+0x164>
    1648:	                  |   lea 15(a0),a0
    164c:	                  \-> move.l a0,d0
    164e:	                      asr.l #4,d0
    1650:	                      move.l d0,d0
    1652:	                      add.w d1,d0
    1654:	                      movea.l 70(sp),a0
    1658:	                      move.w d0,88(a0)

  while(zbuffer) 
    165c:	   /----------------- bra.w 1cf0 <CstDrawZBuffer+0x808>
  {

    UWORD spritex1oncanvas = x+sprite->xhot;
    1660:	/--|----------------> movea.l 100(sp),a0
    1664:	|  |                  move.l 8(a0),d0
    1668:	|  |                  move.l d0,d0
    166a:	|  |                  move.w 10(sp),d1
    166e:	|  |                  add.w d0,d1
    1670:	|  |                  move.w d1,52(sp)
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1674:	|  |                  movea.l 100(sp),a0
    1678:	|  |                  move.l (a0),d0
    167a:	|  |                  move.l d0,d0
    167c:	|  |                  move.w 52(sp),d1
    1680:	|  |                  add.w d0,d1
    1682:	|  |                  move.w d1,50(sp)
    UWORD spritey1oncanvas = y+sprite->yhot;
    1686:	|  |                  movea.l 100(sp),a0
    168a:	|  |                  move.l 12(a0),d0
    168e:	|  |                  move.l d0,d0
    1690:	|  |                  move.w 8(sp),d1
    1694:	|  |                  add.w d0,d1
    1696:	|  |                  move.w d1,48(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    169a:	|  |                  movea.l 100(sp),a0
    169e:	|  |                  move.l 4(a0),d0
    16a2:	|  |                  move.l d0,d0
    16a4:	|  |                  move.w 48(sp),d1
    16a8:	|  |                  add.w d0,d1
    16aa:	|  |                  move.w d1,46(sp)

    UWORD zbufferx1oncanvas = zbuffer->topx;
    16ae:	|  |                  movea.l 104(sp),a0
    16b2:	|  |                  move.l 8(a0),d0
    16b6:	|  |                  move.w d0,44(sp)
    UWORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    16ba:	|  |                  movea.l 104(sp),a0
    16be:	|  |                  move.l (a0),d0
    16c0:	|  |                  move.l d0,d0
    16c2:	|  |                  move.w 44(sp),d1
    16c6:	|  |                  add.w d0,d1
    16c8:	|  |                  move.w d1,42(sp)

    UWORD zbuffery1oncanvas = zbuffer->topy;
    16cc:	|  |                  movea.l 104(sp),a0
    16d0:	|  |                  move.l 12(a0),d0
    16d4:	|  |                  move.w d0,40(sp)
    UWORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    16d8:	|  |                  movea.l 104(sp),a0
    16dc:	|  |                  move.l 4(a0),d0
    16e0:	|  |                  move.l d0,d0
    16e2:	|  |                  move.w 40(sp),d1
    16e6:	|  |                  add.w d0,d1
    16e8:	|  |                  move.w d1,38(sp)
  
    BOOL zbufferfromright = FALSE;
    16ec:	|  |                  clr.w 94(sp)
    BOOL zbufferfromleft = FALSE;
    16f0:	|  |                  clr.w 92(sp)
    BOOL zbufferfrombottom = FALSE;
    16f4:	|  |                  clr.w 90(sp)
    BOOL zbufferfromtop = FALSE;
    16f8:	|  |                  clr.w 88(sp)

    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) {
    16fc:	|  |                  moveq #0,d0
    16fe:	|  |                  move.w 46(sp),d0
    1702:	|  |                  movea.l 104(sp),a0
    1706:	|  |                  move.l 16(a0),d1
    170a:	|  |                  cmp.l d0,d1
    170c:	|  +----------------- ble.w 1cf0 <CstDrawZBuffer+0x808>
      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    1710:	|  |                  move.w 44(sp),d0
    1714:	|  |                  cmp.w 52(sp),d0
    1718:	|  |              /-- bcs.s 172c <CstDrawZBuffer+0x244>
    171a:	|  |              |   move.w 44(sp),d1
    171e:	|  |              |   cmp.w 50(sp),d1
    1722:	|  |              +-- bcc.s 172c <CstDrawZBuffer+0x244>
        zbufferfromright = TRUE;
    1724:	|  |              |   move.w #1,94(sp)
    172a:	|  |           /--|-- bra.s 1746 <CstDrawZBuffer+0x25e>
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    172c:	|  |           |  \-> move.w 44(sp),d0
    1730:	|  |           |      cmp.w 52(sp),d0
    1734:	|  |           +----- bcc.s 1746 <CstDrawZBuffer+0x25e>
    1736:	|  |           |      move.w 42(sp),d1
    173a:	|  |           |      cmp.w 52(sp),d1
    173e:	|  |           +----- bls.s 1746 <CstDrawZBuffer+0x25e>
        zbufferfromleft = TRUE;       
    1740:	|  |           |      move.w #1,92(sp)

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
    1746:	|  |           \----> tst.w 92(sp)
    174a:	|  |              /-- bne.s 1752 <CstDrawZBuffer+0x26a>
    174c:	|  |              |   tst.w 94(sp)
    1750:	|  |           /--|-- beq.s 1788 <CstDrawZBuffer+0x2a0>
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1752:	|  |           |  \-> move.w 40(sp),d0
    1756:	|  |           |      cmp.w 48(sp),d0
    175a:	|  |           |  /-- bcs.s 176e <CstDrawZBuffer+0x286>
    175c:	|  |           |  |   move.w 40(sp),d1
    1760:	|  |           |  |   cmp.w 46(sp),d1
    1764:	|  |           |  +-- bcc.s 176e <CstDrawZBuffer+0x286>
          zbufferfrombottom = TRUE;
    1766:	|  |           |  |   move.w #1,90(sp)
    176c:	|  |           +--|-- bra.s 1788 <CstDrawZBuffer+0x2a0>

        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
    176e:	|  |           |  \-> move.w 40(sp),d0
    1772:	|  |           |      cmp.w 48(sp),d0
    1776:	|  |           +----- bcc.s 1788 <CstDrawZBuffer+0x2a0>
    1778:	|  |           |      move.w 38(sp),d1
    177c:	|  |           |      cmp.w 48(sp),d1
    1780:	|  |           +----- bls.s 1788 <CstDrawZBuffer+0x2a0>
          zbufferfromtop = TRUE;       
    1782:	|  |           |      move.w #1,88(sp)
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1788:	|  |           \----> tst.w 94(sp)
    178c:	|  |              /-- bne.s 1796 <CstDrawZBuffer+0x2ae>
    178e:	|  |              |   tst.w 92(sp)
    1792:	|  |  /-----------|-- beq.w 1ce6 <CstDrawZBuffer+0x7fe>
    1796:	|  |  |           \-> tst.w 90(sp)
    179a:	|  |  |           /-- bne.s 17a4 <CstDrawZBuffer+0x2bc>
    179c:	|  |  |           |   tst.w 88(sp)
    17a0:	|  |  +-----------|-- beq.w 1ce6 <CstDrawZBuffer+0x7fe>
      {      

        ULONG bltapt;

        if(zbufferfromright)
    17a4:	|  |  |           \-> tst.w 94(sp)
    17a8:	|  |  |  /----------- beq.w 1a3e <CstDrawZBuffer+0x556>
        {        

          //Get Distance D(iff)
          //sprite ------------x1+++++++++++++++++++x2-----------------*/
          /*zbuffer------------DDDDDDDX1++++++++++?????????------------*/    
          UWORD xdiff = zbufferx1oncanvas - spritex1oncanvas; 
    17ac:	|  |  |  |            move.w 44(sp),d0
    17b0:	|  |  |  |            sub.w 52(sp),d0
    17b4:	|  |  |  |            move.w d0,24(sp)
          UWORD xdiffbyte = (xdiff / 16) * 2;
    17b8:	|  |  |  |            move.w 24(sp),d0
    17bc:	|  |  |  |            lsr.w #4,d0
    17be:	|  |  |  |            add.w d0,d0
    17c0:	|  |  |  |            move.w d0,22(sp)
          UWORD xdiffrest = xdiff - xdiffbyte * 8;
    17c4:	|  |  |  |            move.w 22(sp),d0
    17c8:	|  |  |  |            lsl.w #3,d0
    17ca:	|  |  |  |            move.w 24(sp),d1
    17ce:	|  |  |  |            sub.w d0,d1
    17d0:	|  |  |  |            move.w d1,20(sp)
          UWORD bytewidth, width, rest;

          if( zbufferx2oncanvas > spritex2oncanvas)    
    17d4:	|  |  |  |            move.w 50(sp),d0
    17d8:	|  |  |  |            cmp.w 42(sp),d0
    17dc:	|  |  |  |  /-------- bcc.w 18ba <CstDrawZBuffer+0x3d2>
            //BlBmod      ++++++++++++++++------------------------------------------------            
            //ShiftB      ----------------------------------------------------------------
            //XDiffByte   ++++++++++++++++------------------------------------------------
            //XDiffRest   ----------------+++++++++++++++---------------------------------
         
            width = spritex2oncanvas - zbufferx1oncanvas; 
    17e0:	|  |  |  |  |         move.w 50(sp),d1
    17e4:	|  |  |  |  |         sub.w 44(sp),d1
    17e8:	|  |  |  |  |         move.w d1,18(sp)
            bytewidth = (width/16)*2;
    17ec:	|  |  |  |  |         move.w 18(sp),d0
    17f0:	|  |  |  |  |         lsr.w #4,d0
    17f2:	|  |  |  |  |         add.w d0,d0
    17f4:	|  |  |  |  |         move.w d0,82(sp)
            UWORD rest = width - bytewidth * 8;
    17f8:	|  |  |  |  |         move.w 82(sp),d0
    17fc:	|  |  |  |  |         lsl.w #3,d0
    17fe:	|  |  |  |  |         move.w 18(sp),d1
    1802:	|  |  |  |  |         sub.w d0,d1
    1804:	|  |  |  |  |         move.w d1,14(sp)
            if( rest) {
    1808:	|  |  |  |  |     /-- beq.s 180e <CstDrawZBuffer+0x326>
              bytewidth+=1;    
    180a:	|  |  |  |  |     |   addq.w #1,82(sp)
            }

            WaitBlit();
    180e:	|  |  |  |  |     \-> move.l 1c8a2 <GfxBase>,d0
    1814:	|  |  |  |  |         movea.l d0,a6
    1816:	|  |  |  |  |         jsr -228(a6)

            custom->bltapt = zbuffer->bitplane;
    181a:	|  |  |  |  |         movea.l 104(sp),a0
    181e:	|  |  |  |  |         move.l 20(a0),d0
    1822:	|  |  |  |  |         movea.l 70(sp),a0
    1826:	|  |  |  |  |         move.l d0,80(a0)
            custom->bltcon0 = xdiffrest * 4096;
    182a:	|  |  |  |  |         move.w 20(sp),d0
    182e:	|  |  |  |  |         moveq #12,d1
    1830:	|  |  |  |  |         lsl.w d1,d0
    1832:	|  |  |  |  |         movea.l 70(sp),a0
    1836:	|  |  |  |  |         move.w d0,64(a0)
            custom->bltbmod = sprite->width/8 - bytewidth;
    183a:	|  |  |  |  |         movea.l 100(sp),a0
    183e:	|  |  |  |  |         move.l (a0),d0
    1840:	|  |  |  |  |     /-- bpl.s 1844 <CstDrawZBuffer+0x35c>
    1842:	|  |  |  |  |     |   addq.l #7,d0
    1844:	|  |  |  |  |     \-> asr.l #3,d0
    1846:	|  |  |  |  |         move.l d0,d0
    1848:	|  |  |  |  |         sub.w 82(sp),d0
    184c:	|  |  |  |  |         movea.l 70(sp),a0
    1850:	|  |  |  |  |         move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1854:	|  |  |  |  |         movea.l 104(sp),a0
    1858:	|  |  |  |  |         move.l (a0),d0
    185a:	|  |  |  |  |     /-- bpl.s 185e <CstDrawZBuffer+0x376>
    185c:	|  |  |  |  |     |   addq.l #7,d0
    185e:	|  |  |  |  |     \-> asr.l #3,d0
    1860:	|  |  |  |  |         move.l d0,d0
    1862:	|  |  |  |  |         sub.w 82(sp),d0
    1866:	|  |  |  |  |         movea.l 70(sp),a0
    186a:	|  |  |  |  |         move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;
    186e:	|  |  |  |  |         movea.l 100(sp),a0
    1872:	|  |  |  |  |         move.l (a0),d0
    1874:	|  |  |  |  |     /-- bpl.s 1878 <CstDrawZBuffer+0x390>
    1876:	|  |  |  |  |     |   addq.l #7,d0
    1878:	|  |  |  |  |     \-> asr.l #3,d0
    187a:	|  |  |  |  |         move.l d0,d0
    187c:	|  |  |  |  |         sub.w 82(sp),d0
    1880:	|  |  |  |  |         movea.l 70(sp),a0
    1884:	|  |  |  |  |         move.w d0,102(a0)
            custom->bltafwm = 0xffff;
    1888:	|  |  |  |  |         movea.l 70(sp),a0
    188c:	|  |  |  |  |         move.w #-1,68(a0)
            custom->bltalwm = 0xffff << (16 - xdiffrest);
    1892:	|  |  |  |  |         moveq #0,d0
    1894:	|  |  |  |  |         move.w 20(sp),d0
    1898:	|  |  |  |  |         moveq #16,d1
    189a:	|  |  |  |  |         sub.l d0,d1
    189c:	|  |  |  |  |         moveq #0,d0
    189e:	|  |  |  |  |         not.w d0
    18a0:	|  |  |  |  |         lsl.l d1,d0
    18a2:	|  |  |  |  |         move.l d0,d0
    18a4:	|  |  |  |  |         movea.l 70(sp),a0
    18a8:	|  |  |  |  |         move.w d0,70(a0)
            custom->bltcon0 = 0xd0c;
    18ac:	|  |  |  |  |         movea.l 70(sp),a0
    18b0:	|  |  |  |  |         move.w #3340,64(a0)
    18b6:	|  |  |  |  |  /----- bra.w 197e <CstDrawZBuffer+0x496>
            //Width       -------------------------------+++++++++++++++++++++++++++++++++----------------
            //BWidth      ----------------++++++++++++++++++++++++++++++++++++++++++++++++----------------
            //BltBpt      ----------------+---------------------------------------------------------------             
            //BlBmod      ++++++++++++++++------------------------------------------------++++++++++++++++            

            WaitBlit();
    18ba:	|  |  |  |  \--|----> move.l 1c8a2 <GfxBase>,d0
    18c0:	|  |  |  |     |      movea.l d0,a6
    18c2:	|  |  |  |     |      jsr -228(a6)
                                            
            width = zbuffer->width;                       
    18c6:	|  |  |  |     |      movea.l 104(sp),a0
    18ca:	|  |  |  |     |      move.l (a0),d0
    18cc:	|  |  |  |     |      move.w d0,18(sp)
            bytewidth = (width/16)*2;
    18d0:	|  |  |  |     |      move.w 18(sp),d0
    18d4:	|  |  |  |     |      lsr.w #4,d0
    18d6:	|  |  |  |     |      add.w d0,d0
    18d8:	|  |  |  |     |      move.w d0,82(sp)
            UWORD rest = width - bytewidth * 8;
    18dc:	|  |  |  |     |      move.w 82(sp),d0
    18e0:	|  |  |  |     |      lsl.w #3,d0
    18e2:	|  |  |  |     |      move.w 18(sp),d1
    18e6:	|  |  |  |     |      sub.w d0,d1
    18e8:	|  |  |  |     |      move.w d1,16(sp)
            if( rest) {
    18ec:	|  |  |  |     |  /-- beq.s 18f2 <CstDrawZBuffer+0x40a>
              bytewidth+=1;    
    18ee:	|  |  |  |     |  |   addq.w #1,82(sp)
            }

            custom->bltapt = zbuffer->bitplane;
    18f2:	|  |  |  |     |  \-> movea.l 104(sp),a0
    18f6:	|  |  |  |     |      move.l 20(a0),d0
    18fa:	|  |  |  |     |      movea.l 70(sp),a0
    18fe:	|  |  |  |     |      move.l d0,80(a0)
            custom->bltcon0 = xdiffrest * 4096;
    1902:	|  |  |  |     |      move.w 20(sp),d0
    1906:	|  |  |  |     |      moveq #12,d1
    1908:	|  |  |  |     |      lsl.w d1,d0
    190a:	|  |  |  |     |      movea.l 70(sp),a0
    190e:	|  |  |  |     |      move.w d0,64(a0)
            custom->bltbmod = sprite->width/8 - bytewidth;
    1912:	|  |  |  |     |      movea.l 100(sp),a0
    1916:	|  |  |  |     |      move.l (a0),d0
    1918:	|  |  |  |     |  /-- bpl.s 191c <CstDrawZBuffer+0x434>
    191a:	|  |  |  |     |  |   addq.l #7,d0
    191c:	|  |  |  |     |  \-> asr.l #3,d0
    191e:	|  |  |  |     |      move.l d0,d0
    1920:	|  |  |  |     |      sub.w 82(sp),d0
    1924:	|  |  |  |     |      movea.l 70(sp),a0
    1928:	|  |  |  |     |      move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    192c:	|  |  |  |     |      movea.l 104(sp),a0
    1930:	|  |  |  |     |      move.l (a0),d0
    1932:	|  |  |  |     |  /-- bpl.s 1936 <CstDrawZBuffer+0x44e>
    1934:	|  |  |  |     |  |   addq.l #7,d0
    1936:	|  |  |  |     |  \-> asr.l #3,d0
    1938:	|  |  |  |     |      move.l d0,d0
    193a:	|  |  |  |     |      sub.w 82(sp),d0
    193e:	|  |  |  |     |      movea.l 70(sp),a0
    1942:	|  |  |  |     |      move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;
    1946:	|  |  |  |     |      movea.l 100(sp),a0
    194a:	|  |  |  |     |      move.l (a0),d0
    194c:	|  |  |  |     |  /-- bpl.s 1950 <CstDrawZBuffer+0x468>
    194e:	|  |  |  |     |  |   addq.l #7,d0
    1950:	|  |  |  |     |  \-> asr.l #3,d0
    1952:	|  |  |  |     |      move.l d0,d0
    1954:	|  |  |  |     |      sub.w 82(sp),d0
    1958:	|  |  |  |     |      movea.l 70(sp),a0
    195c:	|  |  |  |     |      move.w d0,102(a0)
            custom->bltafwm = 0xffff;
    1960:	|  |  |  |     |      movea.l 70(sp),a0
    1964:	|  |  |  |     |      move.w #-1,68(a0)
            custom->bltalwm = 0; 
    196a:	|  |  |  |     |      movea.l 70(sp),a0
    196e:	|  |  |  |     |      move.w #0,70(a0)
            custom->bltcon0 = 0xd0c;
    1974:	|  |  |  |     |      movea.l 70(sp),a0
    1978:	|  |  |  |     |      move.w #3340,64(a0)
          }

          if(zbufferfrombottom)
    197e:	|  |  |  |     \----> tst.w 90(sp)
    1982:	|  |  +--|----------- beq.w 1ce6 <CstDrawZBuffer+0x7fe>
          {
            //Get Distance R
            //sprite ------------x1+++++++++++++++++++x2-----------------*/
            /*zbuffer------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = zbuffery1oncanvas - spritey1oncanvas; 
    1986:	|  |  |  |            move.w 40(sp),d0
    198a:	|  |  |  |            sub.w 48(sp),d0
    198e:	|  |  |  |            move.w d0,12(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1992:	|  |  |  |            move.w 46(sp),d1
    1996:	|  |  |  |            cmp.w 38(sp),d1
    199a:	|  |  |  |     /----- bcc.s 19aa <CstDrawZBuffer+0x4c2>
              height = spritey2oncanvas - zbuffery1oncanvas; 
    199c:	|  |  |  |     |      move.w 46(sp),d0
    19a0:	|  |  |  |     |      sub.w 40(sp),d0
    19a4:	|  |  |  |     |      move.w d0,80(sp)
    19a8:	|  |  |  |     |  /-- bra.s 19b6 <CstDrawZBuffer+0x4ce>
            else
              height = zbuffer->height;
    19aa:	|  |  |  |     \--|-> movea.l 104(sp),a0
    19ae:	|  |  |  |        |   move.l 4(a0),d0
    19b2:	|  |  |  |        |   move.w d0,80(sp)

            WaitBlit();
    19b6:	|  |  |  |        \-> move.l 1c8a2 <GfxBase>,d0
    19bc:	|  |  |  |            movea.l d0,a6
    19be:	|  |  |  |            jsr -228(a6)

            custom->bltbpt = returnvalue+xdiffbyte+ydiff*sprite->width/8;            
    19c2:	|  |  |  |            moveq #0,d2
    19c4:	|  |  |  |            move.w 22(sp),d2
    19c8:	|  |  |  |            moveq #0,d0
    19ca:	|  |  |  |            move.w 12(sp),d0
    19ce:	|  |  |  |            movea.l 100(sp),a0
    19d2:	|  |  |  |            move.l (a0),d1
    19d4:	|  |  |  |            move.l d1,-(sp)
    19d6:	|  |  |  |            move.l d0,-(sp)
    19d8:	|  |  |  |            jsr 17b6e <__mulsi3>
    19de:	|  |  |  |            addq.l #8,sp
    19e0:	|  |  |  |            tst.l d0
    19e2:	|  |  |  |        /-- bge.s 19e6 <CstDrawZBuffer+0x4fe>
    19e4:	|  |  |  |        |   addq.l #7,d0
    19e6:	|  |  |  |        \-> asr.l #3,d0
    19e8:	|  |  |  |            add.l d2,d0
    19ea:	|  |  |  |            add.l 54(sp),d0
    19ee:	|  |  |  |            movea.l 70(sp),a0
    19f2:	|  |  |  |            move.l d0,76(a0)
            custom->bltdpt = returnvalue+xdiffbyte+ydiff*sprite->width;          
    19f6:	|  |  |  |            moveq #0,d2
    19f8:	|  |  |  |            move.w 22(sp),d2
    19fc:	|  |  |  |            moveq #0,d0
    19fe:	|  |  |  |            move.w 12(sp),d0
    1a02:	|  |  |  |            movea.l 100(sp),a0
    1a06:	|  |  |  |            move.l (a0),d1
    1a08:	|  |  |  |            move.l d1,-(sp)
    1a0a:	|  |  |  |            move.l d0,-(sp)
    1a0c:	|  |  |  |            jsr 17b6e <__mulsi3>
    1a12:	|  |  |  |            addq.l #8,sp
    1a14:	|  |  |  |            add.l d2,d0
    1a16:	|  |  |  |            add.l 54(sp),d0
    1a1a:	|  |  |  |            movea.l 70(sp),a0
    1a1e:	|  |  |  |            move.l d0,84(a0)
            custom->bltsize = height*64+bytewidth/2;
    1a22:	|  |  |  |            move.w 80(sp),d0
    1a26:	|  |  |  |            move.w d0,d1
    1a28:	|  |  |  |            lsl.w #6,d1
    1a2a:	|  |  |  |            move.w 82(sp),d0
    1a2e:	|  |  |  |            lsr.w #1,d0
    1a30:	|  |  |  |            add.w d1,d0
    1a32:	|  |  |  |            movea.l 70(sp),a0
    1a36:	|  |  |  |            move.w d0,88(a0)
    1a3a:	|  |  +--|----------- bra.w 1ce6 <CstDrawZBuffer+0x7fe>
        {
          //Get Distance R
          /*sprite  ------------RRRRRRRRx1++++++++++?????????------------*/    
          //zbuffer ------------x1+++++++++++++++++++x2-----------------*/                    
          
          UWORD xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1a3e:	|  |  |  \----------> move.w 52(sp),d1
    1a42:	|  |  |               sub.w 44(sp),d1
    1a46:	|  |  |               move.w d1,36(sp)
          UWORD xdiffbyte = (xdiff / 16) * 2;          
    1a4a:	|  |  |               move.w 36(sp),d0
    1a4e:	|  |  |               lsr.w #4,d0
    1a50:	|  |  |               add.w d0,d0
    1a52:	|  |  |               move.w d0,34(sp)
          UWORD xdiffrest = xdiff - xdiffbyte * 8;
    1a56:	|  |  |               move.w 34(sp),d0
    1a5a:	|  |  |               lsl.w #3,d0
    1a5c:	|  |  |               move.w 36(sp),d1
    1a60:	|  |  |               sub.w d0,d1
    1a62:	|  |  |               move.w d1,32(sp)
          UWORD bytewidth, width, rest;


          if( zbufferx2oncanvas > spritex2oncanvas)    
    1a66:	|  |  |               move.w 50(sp),d0
    1a6a:	|  |  |               cmp.w 42(sp),d0
    1a6e:	|  |  |     /-------- bcc.w 1ba6 <CstDrawZBuffer+0x6be>
            //Data        KKKKKKKKKKKKKKKKCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
            //BltBpt      +---------------------------------------------------------------
            //BlBmod      NNNNNNNNNNNNNNNN------------------------------------------------
            //ShiftB      ----------------------------------------------------------------
         
            width = spritex2oncanvas - spritex1oncanvas; 
    1a72:	|  |  |     |         move.w 50(sp),d1
    1a76:	|  |  |     |         sub.w 52(sp),d1
    1a7a:	|  |  |     |         move.w d1,30(sp)
            bytewidth = (width/16)*2;
    1a7e:	|  |  |     |         move.w 30(sp),d0
    1a82:	|  |  |     |         lsr.w #4,d0
    1a84:	|  |  |     |         add.w d0,d0
    1a86:	|  |  |     |         move.w d0,78(sp)

            WaitBlit();
    1a8a:	|  |  |     |         move.l 1c8a2 <GfxBase>,d0
    1a90:	|  |  |     |         movea.l d0,a6
    1a92:	|  |  |     |         jsr -228(a6)

            bltapt = zbuffer->bitplane + xdiffbyte;
    1a96:	|  |  |     |         movea.l 104(sp),a0
    1a9a:	|  |  |     |         move.l 20(a0),d1
    1a9e:	|  |  |     |         moveq #0,d0
    1aa0:	|  |  |     |         move.w 34(sp),d0
    1aa4:	|  |  |     |         add.l d1,d0
    1aa6:	|  |  |     |         move.l d0,84(sp)
            if( xdiffrest) {
    1aaa:	|  |  |     |         tst.w 32(sp)
    1aae:	|  |  |     |  /----- beq.s 1b22 <CstDrawZBuffer+0x63a>
              bytewidth += 2;
    1ab0:	|  |  |     |  |      addq.w #2,78(sp)
              bltapt += -2;
    1ab4:	|  |  |     |  |      subq.l #2,84(sp)
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0xd0c;
    1ab8:	|  |  |     |  |      moveq #0,d0
    1aba:	|  |  |     |  |      move.w 32(sp),d0
    1abe:	|  |  |     |  |      moveq #16,d1
    1ac0:	|  |  |     |  |      sub.l d0,d1
    1ac2:	|  |  |     |  |      move.l d1,d0
    1ac4:	|  |  |     |  |      moveq #12,d1
    1ac6:	|  |  |     |  |      lsl.w d1,d0
    1ac8:	|  |  |     |  |      addi.w #3340,d0
    1acc:	|  |  |     |  |      movea.l 70(sp),a0
    1ad0:	|  |  |     |  |      move.w d0,64(a0)
              custom->bltafwm = 0xffff >> (16 - xdiffrest);
    1ad4:	|  |  |     |  |      moveq #0,d0
    1ad6:	|  |  |     |  |      move.w 32(sp),d0
    1ada:	|  |  |     |  |      moveq #16,d1
    1adc:	|  |  |     |  |      sub.l d0,d1
    1ade:	|  |  |     |  |      moveq #0,d0
    1ae0:	|  |  |     |  |      not.w d0
    1ae2:	|  |  |     |  |      asr.l d1,d0
    1ae4:	|  |  |     |  |      move.l d0,d0
    1ae6:	|  |  |     |  |      movea.l 70(sp),a0
    1aea:	|  |  |     |  |      move.w d0,68(a0)
              custom->bltalwm = 0xffff << xdiffrest;
    1aee:	|  |  |     |  |      moveq #0,d0
    1af0:	|  |  |     |  |      move.w 32(sp),d0
    1af4:	|  |  |     |  |      moveq #0,d1
    1af6:	|  |  |     |  |      not.w d1
    1af8:	|  |  |     |  |      lsl.l d0,d1
    1afa:	|  |  |     |  |      move.l d1,d0
    1afc:	|  |  |     |  |      movea.l 70(sp),a0
    1b00:	|  |  |     |  |      move.w d0,70(a0)
              custom->bltbpt = returnvalue - 2;
    1b04:	|  |  |     |  |      move.l 54(sp),d0
    1b08:	|  |  |     |  |      subq.l #2,d0
    1b0a:	|  |  |     |  |      movea.l 70(sp),a0
    1b0e:	|  |  |     |  |      move.l d0,76(a0)
              custom->bltdpt = returnvalue - 2;
    1b12:	|  |  |     |  |      move.l 54(sp),d0
    1b16:	|  |  |     |  |      subq.l #2,d0
    1b18:	|  |  |     |  |      movea.l 70(sp),a0
    1b1c:	|  |  |     |  |      move.l d0,84(a0)
    1b20:	|  |  |     |  |  /-- bra.s 1b58 <CstDrawZBuffer+0x670>
            } else {
              bytewidth += 2;
    1b22:	|  |  |     |  \--|-> addq.w #2,78(sp)
              custom->bltcon0 = 0xd0c;
    1b26:	|  |  |     |     |   movea.l 70(sp),a0
    1b2a:	|  |  |     |     |   move.w #3340,64(a0)
              custom->bltafwm = 0xffff;
    1b30:	|  |  |     |     |   movea.l 70(sp),a0
    1b34:	|  |  |     |     |   move.w #-1,68(a0)
              custom->bltalwm = 0xffff;
    1b3a:	|  |  |     |     |   movea.l 70(sp),a0
    1b3e:	|  |  |     |     |   move.w #-1,70(a0)
              custom->bltbpt = returnvalue;
    1b44:	|  |  |     |     |   movea.l 70(sp),a0
    1b48:	|  |  |     |     |   move.l 54(sp),76(a0)
              custom->bltdpt = returnvalue;
    1b4e:	|  |  |     |     |   movea.l 70(sp),a0
    1b52:	|  |  |     |     |   move.l 54(sp),84(a0)
            }

            custom->bltbmod = sprite->width/8 - bytewidth;
    1b58:	|  |  |     |     \-> movea.l 100(sp),a0
    1b5c:	|  |  |     |         move.l (a0),d0
    1b5e:	|  |  |     |     /-- bpl.s 1b62 <CstDrawZBuffer+0x67a>
    1b60:	|  |  |     |     |   addq.l #7,d0
    1b62:	|  |  |     |     \-> asr.l #3,d0
    1b64:	|  |  |     |         move.l d0,d0
    1b66:	|  |  |     |         sub.w 78(sp),d0
    1b6a:	|  |  |     |         movea.l 70(sp),a0
    1b6e:	|  |  |     |         move.w d0,98(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b72:	|  |  |     |         movea.l 104(sp),a0
    1b76:	|  |  |     |         move.l (a0),d0
    1b78:	|  |  |     |     /-- bpl.s 1b7c <CstDrawZBuffer+0x694>
    1b7a:	|  |  |     |     |   addq.l #7,d0
    1b7c:	|  |  |     |     \-> asr.l #3,d0
    1b7e:	|  |  |     |         move.l d0,d0
    1b80:	|  |  |     |         sub.w 78(sp),d0
    1b84:	|  |  |     |         movea.l 70(sp),a0
    1b88:	|  |  |     |         move.w d0,100(a0)
            custom->bltdmod = sprite->width/8 - bytewidth;                      
    1b8c:	|  |  |     |         movea.l 100(sp),a0
    1b90:	|  |  |     |         move.l (a0),d0
    1b92:	|  |  |     |     /-- bpl.s 1b96 <CstDrawZBuffer+0x6ae>
    1b94:	|  |  |     |     |   addq.l #7,d0
    1b96:	|  |  |     |     \-> asr.l #3,d0
    1b98:	|  |  |     |         move.l d0,d0
    1b9a:	|  |  |     |         sub.w 78(sp),d0
    1b9e:	|  |  |     |         movea.l 70(sp),a0
    1ba2:	|  |  |     |         move.w d0,102(a0)
          }
          
          if(zbufferfromtop)
    1ba6:	|  |  |     \-------> tst.w 88(sp)
    1baa:	|  |  |     /-------- beq.w 1c32 <CstDrawZBuffer+0x74a>
          {
            //Get Distance R
            //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
            /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1bae:	|  |  |     |         move.w 48(sp),d0
    1bb2:	|  |  |     |         sub.w 40(sp),d0
    1bb6:	|  |  |     |         move.w d0,26(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1bba:	|  |  |     |         move.w 46(sp),d1
    1bbe:	|  |  |     |         cmp.w 38(sp),d1
    1bc2:	|  |  |     |  /----- bcc.s 1bd2 <CstDrawZBuffer+0x6ea>
              height = sprite->height;
    1bc4:	|  |  |     |  |      movea.l 100(sp),a0
    1bc8:	|  |  |     |  |      move.l 4(a0),d0
    1bcc:	|  |  |     |  |      move.w d0,76(sp)
    1bd0:	|  |  |     |  |  /-- bra.s 1bde <CstDrawZBuffer+0x6f6>
            else
              height = zbuffery2oncanvas - spritey1oncanvas;
    1bd2:	|  |  |     |  \--|-> move.w 38(sp),d0
    1bd6:	|  |  |     |     |   sub.w 48(sp),d0
    1bda:	|  |  |     |     |   move.w d0,76(sp)

            WaitBlit();
    1bde:	|  |  |     |     \-> move.l 1c8a2 <GfxBase>,d0
    1be4:	|  |  |     |         movea.l d0,a6
    1be6:	|  |  |     |         jsr -228(a6)

            custom->bltapt = bltapt + ydiff*zbuffer->width/8;            
    1bea:	|  |  |     |         moveq #0,d0
    1bec:	|  |  |     |         move.w 26(sp),d0
    1bf0:	|  |  |     |         movea.l 104(sp),a0
    1bf4:	|  |  |     |         move.l (a0),d1
    1bf6:	|  |  |     |         move.l d1,-(sp)
    1bf8:	|  |  |     |         move.l d0,-(sp)
    1bfa:	|  |  |     |         jsr 17b6e <__mulsi3>
    1c00:	|  |  |     |         addq.l #8,sp
    1c02:	|  |  |     |         tst.l d0
    1c04:	|  |  |     |     /-- bge.s 1c08 <CstDrawZBuffer+0x720>
    1c06:	|  |  |     |     |   addq.l #7,d0
    1c08:	|  |  |     |     \-> asr.l #3,d0
    1c0a:	|  |  |     |         add.l 84(sp),d0
    1c0e:	|  |  |     |         movea.l 70(sp),a0
    1c12:	|  |  |     |         move.l d0,80(a0)
            custom->bltsize = height*64+bytewidth/2;
    1c16:	|  |  |     |         move.w 76(sp),d0
    1c1a:	|  |  |     |         move.w d0,d1
    1c1c:	|  |  |     |         lsl.w #6,d1
    1c1e:	|  |  |     |         move.w 78(sp),d0
    1c22:	|  |  |     |         lsr.w #1,d0
    1c24:	|  |  |     |         add.w d1,d0
    1c26:	|  |  |     |         movea.l 70(sp),a0
    1c2a:	|  |  |     |         move.w d0,88(a0)
    1c2e:	|  |  +-----|-------- bra.w 1ce6 <CstDrawZBuffer+0x7fe>
          //Zbufferfrombottom
          {
           //Get Distance R
            //sprite ------------x1+++++++++++++++++++x2-----------------*/
            /*zbuffer------------RRRRRRRRx1++++++++++?????????------------*/    
            UWORD ydiff = zbuffery1oncanvas - spritey1oncanvas; 
    1c32:	|  |  |     \-------> move.w 40(sp),d1
    1c36:	|  |  |               sub.w 48(sp),d1
    1c3a:	|  |  |               move.w d1,28(sp)

            UWORD height;
            if( zbuffery2oncanvas > spritey2oncanvas) 
    1c3e:	|  |  |               move.w 46(sp),d0
    1c42:	|  |  |               cmp.w 38(sp),d0
    1c46:	|  |  |        /----- bcc.s 1c56 <CstDrawZBuffer+0x76e>
              height = spritey2oncanvas - zbuffery1oncanvas; 
    1c48:	|  |  |        |      move.w 46(sp),d1
    1c4c:	|  |  |        |      sub.w 40(sp),d1
    1c50:	|  |  |        |      move.w d1,74(sp)
    1c54:	|  |  |        |  /-- bra.s 1c62 <CstDrawZBuffer+0x77a>
            else
              height = zbuffer->height;
    1c56:	|  |  |        \--|-> movea.l 104(sp),a0
    1c5a:	|  |  |           |   move.l 4(a0),d0
    1c5e:	|  |  |           |   move.w d0,74(sp)

            WaitBlit();
    1c62:	|  |  |           \-> move.l 1c8a2 <GfxBase>,d0
    1c68:	|  |  |               movea.l d0,a6
    1c6a:	|  |  |               jsr -228(a6)

            custom->bltbpt = returnvalue+xdiffbyte+ydiff*sprite->width/8;            
    1c6e:	|  |  |               moveq #0,d2
    1c70:	|  |  |               move.w 34(sp),d2
    1c74:	|  |  |               moveq #0,d0
    1c76:	|  |  |               move.w 28(sp),d0
    1c7a:	|  |  |               movea.l 100(sp),a0
    1c7e:	|  |  |               move.l (a0),d1
    1c80:	|  |  |               move.l d1,-(sp)
    1c82:	|  |  |               move.l d0,-(sp)
    1c84:	|  |  |               jsr 17b6e <__mulsi3>
    1c8a:	|  |  |               addq.l #8,sp
    1c8c:	|  |  |               tst.l d0
    1c8e:	|  |  |           /-- bge.s 1c92 <CstDrawZBuffer+0x7aa>
    1c90:	|  |  |           |   addq.l #7,d0
    1c92:	|  |  |           \-> asr.l #3,d0
    1c94:	|  |  |               add.l d2,d0
    1c96:	|  |  |               add.l 54(sp),d0
    1c9a:	|  |  |               movea.l 70(sp),a0
    1c9e:	|  |  |               move.l d0,76(a0)
            custom->bltdpt = returnvalue+xdiffbyte+ydiff*sprite->width;          
    1ca2:	|  |  |               moveq #0,d2
    1ca4:	|  |  |               move.w 34(sp),d2
    1ca8:	|  |  |               moveq #0,d0
    1caa:	|  |  |               move.w 28(sp),d0
    1cae:	|  |  |               movea.l 100(sp),a0
    1cb2:	|  |  |               move.l (a0),d1
    1cb4:	|  |  |               move.l d1,-(sp)
    1cb6:	|  |  |               move.l d0,-(sp)
    1cb8:	|  |  |               jsr 17b6e <__mulsi3>
    1cbe:	|  |  |               addq.l #8,sp
    1cc0:	|  |  |               add.l d2,d0
    1cc2:	|  |  |               add.l 54(sp),d0
    1cc6:	|  |  |               movea.l 70(sp),a0
    1cca:	|  |  |               move.l d0,84(a0)
            custom->bltsize = height*64+bytewidth/2;
    1cce:	|  |  |               move.w 74(sp),d0
    1cd2:	|  |  |               move.w d0,d1
    1cd4:	|  |  |               lsl.w #6,d1
    1cd6:	|  |  |               move.w 78(sp),d0
    1cda:	|  |  |               lsr.w #1,d0
    1cdc:	|  |  |               add.w d1,d0
    1cde:	|  |  |               movea.l 70(sp),a0
    1ce2:	|  |  |               move.w d0,88(a0)
          }
        }     
      }
      zbuffer = zbuffer->nextPanel;
    1ce6:	|  |  \-------------> movea.l 104(sp),a0
    1cea:	|  |                  move.l 24(a0),104(sp)
  while(zbuffer) 
    1cf0:	|  \----------------> tst.l 104(sp)
    1cf4:	\-------------------- bne.w 1660 <CstDrawZBuffer+0x178>
    }
  }

  return returnvalue;
    1cf8:	                      move.l 54(sp),d0

}
    1cfc:	                      move.l (sp)+,d2
    1cfe:	                      movea.l (sp)+,a6
    1d00:	                      lea 88(sp),sp
    1d04:	                      rts

00001d06 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1d06:	    lea -20(sp),sp
    1d0a:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1d0c:	    move.l 1c7ca <CstDrawBuffer>,d0
    1d12:	/-- beq.s 1d2c <CstFreeBuffer+0x26>
    1d14:	|   move.l 1c7ca <CstDrawBuffer>,20(sp)
    1d1c:	|   move.l 1c896 <SysBase>,d0
    1d22:	|   movea.l d0,a6
    1d24:	|   movea.l 20(sp),a1
    1d28:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1d2c:	\-> move.l 1c7c6 <CstViewBuffer>,d0
    1d32:	/-- beq.s 1d4c <CstFreeBuffer+0x46>
    1d34:	|   move.l 1c7c6 <CstViewBuffer>,16(sp)
    1d3c:	|   move.l 1c896 <SysBase>,d0
    1d42:	|   movea.l d0,a6
    1d44:	|   movea.l 16(sp),a1
    1d48:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1d4c:	\-> move.l 1c7c0 <CstCopperList>,d0
    1d52:	/-- beq.s 1d6c <CstFreeBuffer+0x66>
    1d54:	|   move.l 1c7c0 <CstCopperList>,12(sp)
    1d5c:	|   move.l 1c896 <SysBase>,d0
    1d62:	|   movea.l d0,a6
    1d64:	|   movea.l 12(sp),a1
    1d68:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1d6c:	\-> move.l 1c7b8 <CstBackDrop>,d0
    1d72:	/-- beq.s 1d8c <CstFreeBuffer+0x86>
    1d74:	|   move.l 1c7b8 <CstBackDrop>,8(sp)
    1d7c:	|   move.l 1c896 <SysBase>,d0
    1d82:	|   movea.l d0,a6
    1d84:	|   movea.l 8(sp),a1
    1d88:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1d8c:	\-> move.l 1c7bc <CstBackDropBackup>,d0
    1d92:	/-- beq.s 1dac <CstFreeBuffer+0xa6>
    1d94:	|   move.l 1c7bc <CstBackDropBackup>,4(sp)
    1d9c:	|   move.l 1c896 <SysBase>,d0
    1da2:	|   movea.l d0,a6
    1da4:	|   movea.l 4(sp),a1
    1da8:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1dac:	\-> clr.l 1c7ca <CstDrawBuffer>
  CstViewBuffer = NULL;
    1db2:	    clr.l 1c7c6 <CstViewBuffer>
  CstCopperList = NULL;
    1db8:	    clr.l 1c7c0 <CstCopperList>
  CstBackDrop = NULL;
    1dbe:	    clr.l 1c7b8 <CstBackDrop>

}
    1dc4:	    nop
    1dc6:	    movea.l (sp)+,a6
    1dc8:	    lea 20(sp),sp
    1dcc:	    rts

00001dce <CstFreeze>:



void CstFreeze( ) {
    1dce:	       lea -36(sp),sp
    1dd2:	       move.l a6,-(sp)
    1dd4:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1dd6:	       pea 17df4 <PutChar+0x170>
    1ddc:	       jsr 171b0 <KPrintF>
    1de2:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1de4:	       move.l 1c7ea <winWidth>,d0
    1dea:	       lsr.l #3,d0
    1dec:	       move.l d0,d1
    1dee:	       move.l 1c7ee <winHeight>,d0
    1df4:	       move.l d0,d0
    1df6:	       muls.w d0,d1
    1df8:	       move.w d1,d0
    1dfa:	       add.w d0,d0
    1dfc:	       add.w d0,d0
    1dfe:	       move.w d0,d2
    1e00:	       add.w d1,d2
    1e02:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1e06:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1e0e:	       moveq #0,d0
    1e10:	       move.w 26(sp),d0
    1e14:	       move.l d0,18(sp)
    1e18:	       clr.l 14(sp)
    1e1c:	       move.l 1c896 <SysBase>,d0
    1e22:	       movea.l d0,a6
    1e24:	       move.l 18(sp),d0
    1e28:	       move.l 14(sp),d1
    1e2c:	       jsr -684(a6)
    1e30:	       move.l d0,10(sp)
    1e34:	       move.l 10(sp),d0
    1e38:	       move.l d0,1c7bc <CstBackDropBackup>
  if( !CstBackDropBackup)
    1e3e:	       move.l 1c7bc <CstBackDropBackup>,d0
    1e44:	   /-- bne.s 1e54 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1e46:	   |   pea 17e1b <PutChar+0x197>
    1e4c:	   |   jsr 171b0 <KPrintF>
    1e52:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1e54:	   \-> move.l 1c7ee <winHeight>,d0
    1e5a:	       move.l d0,d0
    1e5c:	       movea.w d0,a1
    1e5e:	       move.l 1c7ea <winWidth>,d0
    1e64:	       move.l d0,d0
    1e66:	       movea.w d0,a0
    1e68:	       move.l 1c7bc <CstBackDropBackup>,d0
    1e6e:	       clr.l -(sp)
    1e70:	       pea 5 <_start+0x5>
    1e74:	       move.l a1,-(sp)
    1e76:	       move.l a0,-(sp)
    1e78:	       pea 17e53 <PutChar+0x1cf>
    1e7e:	       move.l d0,-(sp)
    1e80:	       jsr 17298 <debug_register_bitmap>
    1e86:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1e8a:	       move.l 1c7b8 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1e92:	       move.l 1c7bc <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1e9a:	       clr.l 32(sp)
    1e9e:	   /-- bra.s 1ec4 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1ea0:	/--|-> move.l 40(sp),d1
    1ea4:	|  |   move.l d1,d0
    1ea6:	|  |   addq.l #4,d0
    1ea8:	|  |   move.l d0,40(sp)
    1eac:	|  |   move.l 36(sp),d0
    1eb0:	|  |   move.l d0,d2
    1eb2:	|  |   addq.l #4,d2
    1eb4:	|  |   move.l d2,36(sp)
    1eb8:	|  |   movea.l d1,a0
    1eba:	|  |   move.l (a0),d1
    1ebc:	|  |   movea.l d0,a0
    1ebe:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1ec0:	|  |   addq.l #1,32(sp)
    1ec4:	|  \-> move.w 26(sp),d0
    1ec8:	|      lsr.w #2,d0
    1eca:	|      move.w d0,d0
    1ecc:	|      andi.l #65535,d0
    1ed2:	|      cmp.l 32(sp),d0
    1ed6:	\----- bgt.s 1ea0 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1ed8:	       move.l 1c7c6 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1ee0:	       move.l 1c7b8 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1ee8:	       clr.l 28(sp)
    1eec:	   /-- bra.s 1f12 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1eee:	/--|-> move.l 40(sp),d1
    1ef2:	|  |   move.l d1,d0
    1ef4:	|  |   addq.l #4,d0
    1ef6:	|  |   move.l d0,40(sp)
    1efa:	|  |   move.l 36(sp),d0
    1efe:	|  |   move.l d0,d2
    1f00:	|  |   addq.l #4,d2
    1f02:	|  |   move.l d2,36(sp)
    1f06:	|  |   movea.l d1,a0
    1f08:	|  |   move.l (a0),d1
    1f0a:	|  |   movea.l d0,a0
    1f0c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1f0e:	|  |   addq.l #1,28(sp)
    1f12:	|  \-> move.w 26(sp),d0
    1f16:	|      lsr.w #2,d0
    1f18:	|      move.w d0,d0
    1f1a:	|      andi.l #65535,d0
    1f20:	|      cmp.l 28(sp),d0
    1f24:	\----- bgt.s 1eee <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1f26:	       move.w #2,1c7c4 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1f2e:	       move.l 1c7ea <winWidth>,d0
    1f34:	       lsr.l #4,d0
    1f36:	       movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    1f3c:	       move.l a0,d1
    1f3e:	       addq.l #2,d1
    1f40:	       move.l d1,1c7da <CstBackDropBufferApplyCursor>
    1f46:	       move.l d0,d0
    1f48:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1f4a:	       move.l 1c7ee <winHeight>,d0
    1f50:	       movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    1f56:	       move.l a0,d1
    1f58:	       addq.l #2,d1
    1f5a:	       move.l d1,1c7da <CstBackDropBufferApplyCursor>
    1f60:	       move.l d0,d0
    1f62:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1f64:	       movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    1f6a:	       move.l a0,d0
    1f6c:	       addq.l #2,d0
    1f6e:	       move.l d0,1c7da <CstBackDropBufferApplyCursor>
    1f74:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1f76:	       movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    1f7c:	       move.l a0,d0
    1f7e:	       addq.l #2,d0
    1f80:	       move.l d0,1c7da <CstBackDropBufferApplyCursor>
    1f86:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1f88:	       movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    1f8e:	       move.l a0,d0
    1f90:	       addq.l #2,d0
    1f92:	       move.l d0,1c7da <CstBackDropBufferApplyCursor>
    1f98:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1f9a:	       pea 17e62 <PutChar+0x1de>
    1fa0:	       jsr 171b0 <KPrintF>
    1fa6:	       addq.l #4,sp

}  
    1fa8:	       nop
    1faa:	       move.l (sp)+,d2
    1fac:	       movea.l (sp)+,a6
    1fae:	       lea 36(sp),sp
    1fb2:	       rts

00001fb4 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1fb4:	             lea -144(sp),sp
    1fb8:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1fbc:	             pea 17e76 <PutChar+0x1f2>
    1fc2:	             jsr 171b0 <KPrintF>
    1fc8:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1fca:	             move.l 164(sp),-(sp)
    1fce:	             jsr 6bc <get2bytes>
    1fd4:	             addq.l #4,sp
    1fd6:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1fda:	             move.l 164(sp),-(sp)
    1fde:	             jsr 6bc <get2bytes>
    1fe4:	             addq.l #4,sp
    1fe6:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1fea:	             move.w 134(sp),d0
    1fee:	             lsr.w #3,d0
    1ff0:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1ff4:	             move.w 130(sp),d0
    1ff8:	             lsr.w #1,d0
    1ffa:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1ffe:	             move.l 1c7ea <winWidth>,d0
    2004:	             lsr.l #3,d0
    2006:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    200a:	             move.w 130(sp),d0
    200e:	             muls.w 132(sp),d0
    2012:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    2016:	             move.w 124(sp),d1
    201a:	             move.w d1,d0
    201c:	             add.w d0,d0
    201e:	             add.w d0,d0
    2020:	             move.w d0,d2
    2022:	             add.w d1,d2
    2024:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    2028:	             move.w 1c7b2 <CstPaletteLoaded>,d0
    202e:	/----------- bne.w 20c8 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    2032:	|            move.w #384,120(sp)

    if(CstPalette) {
    2038:	|            move.l 1c7e2 <CstPalette>,d0
    203e:	|        /-- beq.s 2058 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    2040:	|        |   move.l 1c7e2 <CstPalette>,116(sp)
    2048:	|        |   move.l 1c896 <SysBase>,d0
    204e:	|        |   movea.l d0,a6
    2050:	|        |   movea.l 116(sp),a1
    2054:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    2058:	|        \-> moveq #64,d0
    205a:	|            move.l d0,112(sp)
    205e:	|            clr.l 108(sp)
    2062:	|            move.l 1c896 <SysBase>,d0
    2068:	|            movea.l d0,a6
    206a:	|            move.l 112(sp),d0
    206e:	|            move.l 108(sp),d1
    2072:	|            jsr -684(a6)
    2076:	|            move.l d0,104(sp)
    207a:	|            move.l 104(sp),d0
    207e:	|            move.l d0,1c7e2 <CstPalette>
    CstPaletteLoaded = 1;
    2084:	|            move.w #1,1c7b2 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    208c:	|            move.l 1c7e2 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2094:	|            clr.l 152(sp)
    2098:	|        /-- bra.s 20be <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    209a:	|     /--|-> move.l 164(sp),-(sp)
    209e:	|     |  |   jsr 6bc <get2bytes>
    20a4:	|     |  |   addq.l #4,sp
    20a6:	|     |  |   move.l d0,d1
    20a8:	|     |  |   move.l 156(sp),d0
    20ac:	|     |  |   move.l d0,d2
    20ae:	|     |  |   addq.l #2,d2
    20b0:	|     |  |   move.l d2,156(sp)
    20b4:	|     |  |   move.l d1,d1
    20b6:	|     |  |   movea.l d0,a0
    20b8:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    20ba:	|     |  |   addq.l #1,152(sp)
    20be:	|     |  \-> moveq #31,d0
    20c0:	|     |      cmp.l 152(sp),d0
    20c4:	|     \----- bge.s 209a <CstLoadBackdrop+0xe6>
    20c6:	|  /-------- bra.s 20e6 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    20c8:	\--|-------> clr.l 148(sp)
    20cc:	   |     /-- bra.s 20de <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    20ce:	   |  /--|-> move.l 164(sp),-(sp)
    20d2:	   |  |  |   jsr 6bc <get2bytes>
    20d8:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    20da:	   |  |  |   addq.l #1,148(sp)
    20de:	   |  |  \-> moveq #31,d2
    20e0:	   |  |      cmp.l 148(sp),d2
    20e4:	   |  \----- bge.s 20ce <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    20e6:	   \-------> moveq #0,d0
    20e8:	             move.w 122(sp),d0
    20ec:	             move.l d0,100(sp)
    20f0:	             moveq #2,d0
    20f2:	             move.l d0,96(sp)
    20f6:	             move.l 1c896 <SysBase>,d0
    20fc:	             movea.l d0,a6
    20fe:	             move.l 100(sp),d0
    2102:	             move.l 96(sp),d1
    2106:	             jsr -684(a6)
    210a:	             move.l d0,92(sp)
    210e:	             move.l 92(sp),d0
    2112:	             move.l d0,88(sp)
  if( !tmpbuffer)
    2116:	         /-- bne.s 2126 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    2118:	         |   pea 17ea5 <PutChar+0x221>
    211e:	         |   jsr 171b0 <KPrintF>
    2124:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    2126:	         \-> moveq #0,d0
    2128:	             move.w 124(sp),d0
    212c:	             move.l d0,84(sp)
    2130:	             moveq #2,d2
    2132:	             move.l d2,80(sp)
    2136:	             move.l 1c896 <SysBase>,d0
    213c:	             movea.l d0,a6
    213e:	             move.l 84(sp),d0
    2142:	             move.l 80(sp),d1
    2146:	             jsr -684(a6)
    214a:	             move.l d0,76(sp)
    214e:	             move.l 76(sp),d0
    2152:	             move.l d0,72(sp)
  if( !tmpmask)
    2156:	         /-- bne.s 2166 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    2158:	         |   pea 17edb <PutChar+0x257>
    215e:	         |   jsr 171b0 <KPrintF>
    2164:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    2166:	         \-> move.w 132(sp),d0
    216a:	             movea.w d0,a1
    216c:	             move.w 134(sp),d0
    2170:	             movea.w d0,a0
    2172:	             clr.l -(sp)
    2174:	             pea 5 <_start+0x5>
    2178:	             move.l a1,-(sp)
    217a:	             move.l a0,-(sp)
    217c:	             pea 17f0f <PutChar+0x28b>
    2182:	             move.l 108(sp),-(sp)
    2186:	             jsr 17298 <debug_register_bitmap>
    218c:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    2190:	             move.w 132(sp),d0
    2194:	             movea.w d0,a1
    2196:	             move.w 134(sp),d0
    219a:	             movea.w d0,a0
    219c:	             clr.l -(sp)
    219e:	             pea 1 <_start+0x1>
    21a2:	             move.l a1,-(sp)
    21a4:	             move.l a0,-(sp)
    21a6:	             pea 17f1d <PutChar+0x299>
    21ac:	             move.l 108(sp),-(sp)
    21b0:	             jsr 17298 <debug_register_bitmap>
    21b6:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    21ba:	             move.l 164(sp),68(sp)
    21c0:	             move.l 88(sp),64(sp)
    21c6:	             moveq #2,d0
    21c8:	             move.l d0,60(sp)
    21cc:	             move.w 122(sp),d0
    21d0:	             lsr.w #1,d0
    21d2:	             move.w d0,d0
    21d4:	             andi.l #65535,d0
    21da:	             move.l d0,56(sp)
    21de:	             move.l 1c89e <DOSBase>,d0
    21e4:	             movea.l d0,a6
    21e6:	             move.l 68(sp),d1
    21ea:	             move.l 64(sp),d2
    21ee:	             move.l 60(sp),d3
    21f2:	             move.l 56(sp),d4
    21f6:	             jsr -324(a6)
    21fa:	             move.l d0,52(sp)
    21fe:	             move.l 52(sp),d0
    2202:	             move.w d0,50(sp)
  if(!count) {
    2206:	         /-- bne.s 221a <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2208:	         |   pea 17f29 <PutChar+0x2a5>
    220e:	         |   jsr 171b0 <KPrintF>
    2214:	         |   addq.l #4,sp
    return;
    2216:	   /-----|-- bra.w 2466 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    221a:	   |     \-> move.l 164(sp),46(sp)
    2220:	   |         move.l 72(sp),42(sp)
    2226:	   |         moveq #2,d2
    2228:	   |         move.l d2,38(sp)
    222c:	   |         move.w 124(sp),d0
    2230:	   |         lsr.w #1,d0
    2232:	   |         move.w d0,d0
    2234:	   |         andi.l #65535,d0
    223a:	   |         move.l d0,34(sp)
    223e:	   |         move.l 1c89e <DOSBase>,d0
    2244:	   |         movea.l d0,a6
    2246:	   |         move.l 46(sp),d1
    224a:	   |         move.l 42(sp),d2
    224e:	   |         move.l 38(sp),d3
    2252:	   |         move.l 34(sp),d4
    2256:	   |         jsr -324(a6)
    225a:	   |         move.l d0,30(sp)
    225e:	   |         move.l 30(sp),d0
    2262:	   |         move.w d0,50(sp)
   

  if(!count) {
    2266:	   |     /-- bne.s 227a <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    2268:	   |     |   pea 17f29 <PutChar+0x2a5>
    226e:	   |     |   jsr 171b0 <KPrintF>
    2274:	   |     |   addq.l #4,sp
    return;
    2276:	   +-----|-- bra.w 2466 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    227a:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2282:	   |         move.l 1c7b8 <CstBackDrop>,d0
    2288:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    228c:	   |         move.l 172(sp),d0
    2290:	   |         move.w d0,d1
    2292:	   |         muls.w 126(sp),d1
    2296:	   |         move.l 168(sp),d0
    229a:	   |     /-- bpl.s 229e <CstLoadBackdrop+0x2ea>
    229c:	   |     |   addq.l #7,d0
    229e:	   |     \-> asr.l #3,d0
    22a0:	   |         move.l d0,d0
    22a2:	   |         movea.w d1,a0
    22a4:	   |         adda.w d0,a0
    22a6:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    22aa:	   |         moveq #0,d0
    22ac:	   |         move.w 24(sp),d0
    22b0:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    22b4:	   |         pea 17f44 <PutChar+0x2c0>
    22ba:	   |         jsr 171b0 <KPrintF>
    22c0:	   |         addq.l #4,sp


  WaitBlit();
    22c2:	   |         move.l 1c8a2 <GfxBase>,d0
    22c8:	   |         movea.l d0,a6
    22ca:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    22ce:	   |         movea.l 26(sp),a0
    22d2:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    22d8:	   |         movea.l 26(sp),a0
    22dc:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    22e2:	   |         movea.l 26(sp),a0
    22e6:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    22ec:	   |         movea.l 26(sp),a0
    22f0:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    22f6:	   |         move.w 126(sp),d0
    22fa:	   |         sub.w 130(sp),d0
    22fe:	   |         movea.l 26(sp),a0
    2302:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2306:	   |         move.w 126(sp),d0
    230a:	   |         sub.w 130(sp),d0
    230e:	   |         movea.l 26(sp),a0
    2312:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2316:	   |         movea.l 26(sp),a0
    231a:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2320:	   |         movea.l 26(sp),a0
    2324:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    232a:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2330:	   |         clr.l 136(sp)
    2334:	   |     /-- bra.s 2396 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    2336:	   |  /--|-> movea.l 26(sp),a0
    233a:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2340:	   |  |  |   move.l 140(sp),d0
    2344:	   |  |  |   movea.l 26(sp),a0
    2348:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    234c:	   |  |  |   move.l 144(sp),d0
    2350:	   |  |  |   movea.l 26(sp),a0
    2354:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    2358:	   |  |  |   move.l 144(sp),d0
    235c:	   |  |  |   movea.l 26(sp),a0
    2360:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2364:	   |  |  |   move.w 132(sp),d0
    2368:	   |  |  |   lsl.w #6,d0
    236a:	   |  |  |   add.w 128(sp),d0
    236e:	   |  |  |   movea.l 26(sp),a0
    2372:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    2376:	   |  |  |   moveq #0,d0
    2378:	   |  |  |   move.w 124(sp),d0
    237c:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    2380:	   |  |  |   move.w 1c7b6 <CstBackdropSizePlane>,d0
    2386:	   |  |  |   move.w d0,d0
    2388:	   |  |  |   andi.l #65535,d0
    238e:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2392:	   |  |  |   addq.l #1,136(sp)
    2396:	   |  |  \-> moveq #4,d0
    2398:	   |  |      cmp.l 136(sp),d0
    239c:	   |  \----- bge.s 2336 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    239e:	   |         move.l 1c8a2 <GfxBase>,d0
    23a4:	   |         movea.l d0,a6
    23a6:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    23aa:	   |         pea 17f63 <PutChar+0x2df>
    23b0:	   |         jsr 171b0 <KPrintF>
    23b6:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    23b8:	   |         move.l 88(sp),20(sp)
    23be:	   |         move.l 1c896 <SysBase>,d0
    23c4:	   |         movea.l d0,a6
    23c6:	   |         movea.l 20(sp),a1
    23ca:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    23ce:	   |         move.l 72(sp),16(sp)
    23d4:	   |         move.l 1c896 <SysBase>,d0
    23da:	   |         movea.l d0,a6
    23dc:	   |         movea.l 16(sp),a1
    23e0:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    23e4:	   |         move.w #2,1c7c4 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    23ec:	   |         move.l 1c7ea <winWidth>,d0
    23f2:	   |         lsr.l #4,d0
    23f4:	   |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    23fa:	   |         move.l a0,d1
    23fc:	   |         addq.l #2,d1
    23fe:	   |         move.l d1,1c7da <CstBackDropBufferApplyCursor>
    2404:	   |         move.l d0,d0
    2406:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2408:	   |         move.l 1c7ee <winHeight>,d0
    240e:	   |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    2414:	   |         move.l a0,d1
    2416:	   |         addq.l #2,d1
    2418:	   |         move.l d1,1c7da <CstBackDropBufferApplyCursor>
    241e:	   |         move.l d0,d0
    2420:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2422:	   |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    2428:	   |         move.l a0,d0
    242a:	   |         addq.l #2,d0
    242c:	   |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    2432:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2434:	   |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    243a:	   |         move.l a0,d0
    243c:	   |         addq.l #2,d0
    243e:	   |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    2444:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2446:	   |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    244c:	   |         move.l a0,d0
    244e:	   |         addq.l #2,d0
    2450:	   |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    2456:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    2458:	   |         pea 17f83 <PutChar+0x2ff>
    245e:	   |         jsr 171b0 <KPrintF>
    2464:	   |         addq.l #4,sp

}
    2466:	   \-------> movem.l (sp)+,d2-d4/a6
    246a:	             lea 144(sp),sp
    246e:	             rts

00002470 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    2470:	                lea -72(sp),sp
    2474:	                move.l a6,-(sp)
    2476:	                move.l d2,-(sp)
    2478:	                move.l 88(sp),d1
    247c:	                move.l 92(sp),d0
    2480:	                move.w d1,d1
    2482:	                move.w d1,10(sp)
    2486:	                move.w d0,d0
    2488:	                move.w d0,8(sp)
  UWORD *destination = 0;
    248c:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    2490:	                move.w #2,1c7c4 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2498:	                move.l 1c7b8 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    24a0:	                clr.l 56(sp)

  blitwidth = single->width/16;
    24a4:	                movea.l 84(sp),a0
    24a8:	                move.l (a0),d0
    24aa:	                movea.l d0,a0
    24ac:	                cmpa.w #0,a0
    24b0:	            /-- bge.s 24b6 <CstPasteChar+0x46>
    24b2:	            |   lea 15(a0),a0
    24b6:	            \-> move.l a0,d0
    24b8:	                asr.l #4,d0
    24ba:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    24be:	            /-- bne.s 24c6 <CstPasteChar+0x56>
    24c0:	            |   moveq #1,d0
    24c2:	            |   move.l d0,40(sp)

  if( y < 0) {
    24c6:	            \-> tst.w 8(sp)
    24ca:	         /----- bge.s 2512 <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    24cc:	         |      movea.w 8(sp),a1
    24d0:	         |      movea.l 84(sp),a0
    24d4:	         |      move.l 4(a0),d0
    24d8:	         |      add.l a1,d0
    24da:	         |  /-- bpl.s 24ee <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24dc:	         |  |   pea 17f9d <PutChar+0x319>
    24e2:	         |  |   jsr 171b0 <KPrintF>
    24e8:	         |  |   addq.l #4,sp
      return;
    24ea:	/--------|--|-- bra.w 2bae <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    24ee:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    24f2:	|        |      move.w 8(sp),d0
    24f6:	|        |      ext.l d0
    24f8:	|        |      neg.l d0
    24fa:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    24fe:	|        |      movea.l 84(sp),a0
    2502:	|        |      move.l 4(a0),d0
    2506:	|        |      movea.w 8(sp),a0
    250a:	|        |      add.l a0,d0
    250c:	|        |      move.l d0,44(sp)
    2510:	|     /--|----- bra.s 2584 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    2512:	|     |  \----> movea.w 8(sp),a1
    2516:	|     |         movea.l 84(sp),a0
    251a:	|     |         move.l 4(a0),d0
    251e:	|     |         move.l a1,d1
    2520:	|     |         add.l d0,d1
    2522:	|     |         move.l 1c7ee <winHeight>,d0
    2528:	|     |         cmp.l d1,d0
    252a:	|     |  /----- bge.s 256c <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    252c:	|     |  |      movea.w 8(sp),a0
    2530:	|     |  |      move.l 1c7ee <winHeight>,d0
    2536:	|     |  |      cmp.l a0,d0
    2538:	|     |  |  /-- bge.s 254c <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    253a:	|     |  |  |   pea 17f9d <PutChar+0x319>
    2540:	|     |  |  |   jsr 171b0 <KPrintF>
    2546:	|     |  |  |   addq.l #4,sp
      return;
    2548:	+-----|--|--|-- bra.w 2bae <CstPasteChar+0x73e>
    }
    ystartdst = y;
    254c:	|     |  |  \-> movea.w 8(sp),a0
    2550:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    2554:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    2558:	|     |  |      move.l 1c7ee <winHeight>,d0
    255e:	|     |  |      movea.w 8(sp),a0
    2562:	|     |  |      move.l d0,d1
    2564:	|     |  |      sub.l a0,d1
    2566:	|     |  |      move.l d1,44(sp)
    256a:	|     +--|----- bra.s 2584 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    256c:	|     |  \----> movea.w 8(sp),a0
    2570:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    2574:	|     |         clr.l 48(sp)
    blitheight = single->height;
    2578:	|     |         movea.l 84(sp),a0
    257c:	|     |         move.l 4(a0),d0
    2580:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2584:	|     \-------> tst.w 10(sp)
    2588:	|        /----- bge.w 26fa <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    258c:	|        |      movea.w 10(sp),a1
    2590:	|        |      movea.l 84(sp),a0
    2594:	|        |      move.l (a0),d0
    2596:	|        |      add.l a1,d0
    2598:	|        |  /-- bpl.s 25ac <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    259a:	|        |  |   pea 17f9d <PutChar+0x319>
    25a0:	|        |  |   jsr 171b0 <KPrintF>
    25a6:	|        |  |   addq.l #4,sp
      return;
    25a8:	+--------|--|-- bra.w 2bae <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    25ac:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    25b2:	|        |      move.w 10(sp),d0
    25b6:	|        |  /-- bpl.s 25bc <CstPasteChar+0x14c>
    25b8:	|        |  |   addi.w #15,d0
    25bc:	|        |  \-> asr.w #4,d0
    25be:	|        |      neg.w d0
    25c0:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    25c4:	|        |      move.w 10(sp),d0
    25c8:	|        |      ext.l d0
    25ca:	|        |      neg.l d0
    25cc:	|        |      andi.l #-2147483633,d0
    25d2:	|        |  /-- bpl.s 25dc <CstPasteChar+0x16c>
    25d4:	|        |  |   subq.l #1,d0
    25d6:	|        |  |   moveq #-16,d1
    25d8:	|        |  |   or.l d1,d0
    25da:	|        |  |   addq.l #1,d0
    25dc:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    25e0:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    25e4:	|        |      movea.l 84(sp),a0
    25e8:	|        |      move.l 24(a0),d0
    25ec:	|        |      move.l d0,d1
    25ee:	|        |      moveq #0,d0
    25f0:	|        |      move.w 76(sp),d0
    25f4:	|        |      add.l d0,d0
    25f6:	|        |      move.l d1,d2
    25f8:	|        |      add.l d0,d2
    25fa:	|        |      movea.l 84(sp),a0
    25fe:	|        |      move.l (a0),d0
    2600:	|        |      move.l 48(sp),-(sp)
    2604:	|        |      move.l d0,-(sp)
    2606:	|        |      jsr 17b6e <__mulsi3>
    260c:	|        |      addq.l #8,sp
    260e:	|        |      lsr.l #3,d0
    2610:	|        |      move.l d2,d1
    2612:	|        |      add.l d0,d1
    2614:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2618:	|        |      move.l 1c7ea <winWidth>,d0
    261e:	|        |      move.l 52(sp),-(sp)
    2622:	|        |      move.l d0,-(sp)
    2624:	|        |      jsr 17b6e <__mulsi3>
    262a:	|        |      addq.l #8,sp
    262c:	|        |      lsr.l #3,d0
    262e:	|        |      move.l 28(sp),d1
    2632:	|        |      add.l d1,d0
    2634:	|        |      move.l d0,d2
    2636:	|        |      subq.l #2,d2
    2638:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    263c:	|        |      move.l 1c7ea <winWidth>,d0
    2642:	|        |      move.l 52(sp),-(sp)
    2646:	|        |      move.l d0,-(sp)
    2648:	|        |      jsr 17b6e <__mulsi3>
    264e:	|        |      addq.l #8,sp
    2650:	|        |      lsr.l #3,d0
    2652:	|        |      move.l 28(sp),d1
    2656:	|        |      add.l d1,d0
    2658:	|        |      move.l d0,d1
    265a:	|        |      subq.l #2,d1
    265c:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    2660:	|        |      moveq #0,d0
    2662:	|        |      move.w 74(sp),d0
    2666:	|        |      moveq #16,d1
    2668:	|        |      sub.l d0,d1
    266a:	|        |      move.l d1,d0
    266c:	|        |      moveq #12,d2
    266e:	|        |      lsl.l d2,d0
    2670:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2674:	|        |      movea.l 84(sp),a0
    2678:	|        |      move.l (a0),d0
    267a:	|        |      movea.l d0,a0
    267c:	|        |      cmpa.w #0,a0
    2680:	|        |  /-- bge.s 2686 <CstPasteChar+0x216>
    2682:	|        |  |   lea 15(a0),a0
    2686:	|        |  \-> move.l a0,d0
    2688:	|        |      asr.l #4,d0
    268a:	|        |      move.l d0,d0
    268c:	|        |      add.w 76(sp),d0
    2690:	|        |      movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    2696:	|        |      move.l a0,d1
    2698:	|        |      addq.l #2,d1
    269a:	|        |      move.l d1,1c7da <CstBackDropBufferApplyCursor>
    26a0:	|        |      add.w 78(sp),d0
    26a4:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    26a6:	|        |      movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    26ac:	|        |      move.l a0,d0
    26ae:	|        |      addq.l #2,d0
    26b0:	|        |      move.l d0,1c7da <CstBackDropBufferApplyCursor>
    26b6:	|        |      move.l 44(sp),d0
    26ba:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    26bc:	|        |      movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    26c2:	|        |      move.l a0,d0
    26c4:	|        |      addq.l #2,d0
    26c6:	|        |      move.l d0,1c7da <CstBackDropBufferApplyCursor>
    26cc:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    26ce:	|        |      movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    26d4:	|        |      move.l a0,d0
    26d6:	|        |      addq.l #2,d0
    26d8:	|        |      move.l d0,1c7da <CstBackDropBufferApplyCursor>
    26de:	|        |      move.l 52(sp),d0
    26e2:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    26e4:	|        |      movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    26ea:	|        |      move.l a0,d0
    26ec:	|        |      addq.l #2,d0
    26ee:	|        |      move.l d0,1c7da <CstBackDropBufferApplyCursor>
    26f4:	|        |      clr.w (a0)
    26f6:	|     /--|----- bra.w 2a0e <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    26fa:	|     |  \----> movea.w 10(sp),a1
    26fe:	|     |         movea.l 84(sp),a0
    2702:	|     |         move.l (a0),d0
    2704:	|     |         move.l a1,d1
    2706:	|     |         add.l d0,d1
    2708:	|     |         move.l 1c7ea <winWidth>,d0
    270e:	|     |         cmp.l d1,d0
    2710:	|     |  /----- bge.w 28ac <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    2714:	|     |  |      movea.w 10(sp),a1
    2718:	|     |  |      movea.l 84(sp),a0
    271c:	|     |  |      move.l (a0),d0
    271e:	|     |  |      move.l a1,d1
    2720:	|     |  |      sub.l d0,d1
    2722:	|     |  |      move.l 1c7ea <winWidth>,d0
    2728:	|     |  |      cmp.l d1,d0
    272a:	|     |  |  /-- bge.s 273e <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    272c:	|     |  |  |   pea 17f9d <PutChar+0x319>
    2732:	|     |  |  |   jsr 171b0 <KPrintF>
    2738:	|     |  |  |   addq.l #4,sp
      return;
    273a:	+-----|--|--|-- bra.w 2bae <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    273e:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2742:	|     |  |      movea.w 10(sp),a1
    2746:	|     |  |      movea.l 84(sp),a0
    274a:	|     |  |      move.l (a0),d0
    274c:	|     |  |      add.l a1,d0
    274e:	|     |  |      move.l d0,d1
    2750:	|     |  |      move.l 1c7ea <winWidth>,d0
    2756:	|     |  |      sub.l d0,d1
    2758:	|     |  |      move.l d1,d0
    275a:	|     |  |      lsr.l #4,d0
    275c:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    2760:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2764:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    276a:	|     |  |      movea.l 84(sp),a0
    276e:	|     |  |      move.l 24(a0),d0
    2772:	|     |  |      move.l d0,d2
    2774:	|     |  |      movea.l 84(sp),a0
    2778:	|     |  |      move.l (a0),d0
    277a:	|     |  |      move.l 48(sp),-(sp)
    277e:	|     |  |      move.l d0,-(sp)
    2780:	|     |  |      jsr 17b6e <__mulsi3>
    2786:	|     |  |      addq.l #8,sp
    2788:	|     |  |      lsr.l #3,d0
    278a:	|     |  |      move.l d2,d1
    278c:	|     |  |      add.l d0,d1
    278e:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2792:	|     |  |      move.l 1c7ea <winWidth>,d0
    2798:	|     |  |      move.l 52(sp),-(sp)
    279c:	|     |  |      move.l d0,-(sp)
    279e:	|     |  |      jsr 17b6e <__mulsi3>
    27a4:	|     |  |      addq.l #8,sp
    27a6:	|     |  |      lsr.l #3,d0
    27a8:	|     |  |      move.l 28(sp),d1
    27ac:	|     |  |      add.l d0,d1
    27ae:	|     |  |      move.w 10(sp),d0
    27b2:	|     |  |  /-- bpl.s 27b8 <CstPasteChar+0x348>
    27b4:	|     |  |  |   addi.w #15,d0
    27b8:	|     |  |  \-> asr.w #4,d0
    27ba:	|     |  |      movea.w d0,a0
    27bc:	|     |  |      move.l a0,d0
    27be:	|     |  |      add.l a0,d0
    27c0:	|     |  |      move.l d1,d2
    27c2:	|     |  |      add.l d0,d2
    27c4:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    27c8:	|     |  |      move.l 1c7ea <winWidth>,d0
    27ce:	|     |  |      move.l 52(sp),-(sp)
    27d2:	|     |  |      move.l d0,-(sp)
    27d4:	|     |  |      jsr 17b6e <__mulsi3>
    27da:	|     |  |      addq.l #8,sp
    27dc:	|     |  |      lsr.l #3,d0
    27de:	|     |  |      move.l 28(sp),d1
    27e2:	|     |  |      add.l d0,d1
    27e4:	|     |  |      move.w 10(sp),d0
    27e8:	|     |  |  /-- bpl.s 27ee <CstPasteChar+0x37e>
    27ea:	|     |  |  |   addi.w #15,d0
    27ee:	|     |  |  \-> asr.w #4,d0
    27f0:	|     |  |      movea.w d0,a0
    27f2:	|     |  |      move.l a0,d0
    27f4:	|     |  |      add.l a0,d0
    27f6:	|     |  |      move.l d1,d2
    27f8:	|     |  |      add.l d0,d2
    27fa:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    27fe:	|     |  |      movea.l 84(sp),a0
    2802:	|     |  |      move.l (a0),d0
    2804:	|     |  |      andi.l #-2147483633,d0
    280a:	|     |  |  /-- bpl.s 2814 <CstPasteChar+0x3a4>
    280c:	|     |  |  |   subq.l #1,d0
    280e:	|     |  |  |   moveq #-16,d1
    2810:	|     |  |  |   or.l d1,d0
    2812:	|     |  |  |   addq.l #1,d0
    2814:	|     |  |  \-> moveq #12,d2
    2816:	|     |  |      lsl.l d2,d0
    2818:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    281c:	|     |  |      movea.l 84(sp),a0
    2820:	|     |  |      move.l (a0),d0
    2822:	|     |  |      movea.l d0,a0
    2824:	|     |  |      cmpa.w #0,a0
    2828:	|     |  |  /-- bge.s 282e <CstPasteChar+0x3be>
    282a:	|     |  |  |   lea 15(a0),a0
    282e:	|     |  |  \-> move.l a0,d0
    2830:	|     |  |      asr.l #4,d0
    2832:	|     |  |      move.l d0,d0
    2834:	|     |  |      movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    283a:	|     |  |      move.l a0,d1
    283c:	|     |  |      addq.l #2,d1
    283e:	|     |  |      move.l d1,1c7da <CstBackDropBufferApplyCursor>
    2844:	|     |  |      add.w 76(sp),d0
    2848:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    284a:	|     |  |      movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    2850:	|     |  |      move.l a0,d0
    2852:	|     |  |      addq.l #2,d0
    2854:	|     |  |      move.l d0,1c7da <CstBackDropBufferApplyCursor>
    285a:	|     |  |      move.l 44(sp),d0
    285e:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2860:	|     |  |      move.w 10(sp),d0
    2864:	|     |  |  /-- bpl.s 286a <CstPasteChar+0x3fa>
    2866:	|     |  |  |   addi.w #15,d0
    286a:	|     |  |  \-> asr.w #4,d0
    286c:	|     |  |      movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    2872:	|     |  |      move.l a0,d1
    2874:	|     |  |      addq.l #2,d1
    2876:	|     |  |      move.l d1,1c7da <CstBackDropBufferApplyCursor>
    287c:	|     |  |      add.w d0,d0
    287e:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2880:	|     |  |      movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    2886:	|     |  |      move.l a0,d0
    2888:	|     |  |      addq.l #2,d0
    288a:	|     |  |      move.l d0,1c7da <CstBackDropBufferApplyCursor>
    2890:	|     |  |      move.l 52(sp),d0
    2894:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2896:	|     |  |      movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    289c:	|     |  |      move.l a0,d0
    289e:	|     |  |      addq.l #2,d0
    28a0:	|     |  |      move.l d0,1c7da <CstBackDropBufferApplyCursor>
    28a6:	|     |  |      clr.w (a0)
    28a8:	|     +--|----- bra.w 2a0e <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    28ac:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    28b2:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    28b6:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    28ba:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    28be:	|     |         movea.l 84(sp),a0
    28c2:	|     |         move.l 24(a0),d0
    28c6:	|     |         move.l d0,d2
    28c8:	|     |         movea.l 84(sp),a0
    28cc:	|     |         move.l (a0),d0
    28ce:	|     |         movea.l d0,a0
    28d0:	|     |         cmpa.w #0,a0
    28d4:	|     |     /-- bge.s 28da <CstPasteChar+0x46a>
    28d6:	|     |     |   lea 15(a0),a0
    28da:	|     |     \-> move.l a0,d0
    28dc:	|     |         asr.l #4,d0
    28de:	|     |         move.l 48(sp),-(sp)
    28e2:	|     |         move.l d0,-(sp)
    28e4:	|     |         jsr 17b6e <__mulsi3>
    28ea:	|     |         addq.l #8,sp
    28ec:	|     |         add.l d0,d0
    28ee:	|     |         move.l d2,d1
    28f0:	|     |         add.l d0,d1
    28f2:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28f6:	|     |         move.l 1c7ea <winWidth>,d0
    28fc:	|     |         move.l 52(sp),-(sp)
    2900:	|     |         move.l d0,-(sp)
    2902:	|     |         jsr 17b6e <__mulsi3>
    2908:	|     |         addq.l #8,sp
    290a:	|     |         lsr.l #3,d0
    290c:	|     |         move.l 28(sp),d1
    2910:	|     |         add.l d0,d1
    2912:	|     |         move.w 10(sp),d0
    2916:	|     |     /-- bpl.s 291c <CstPasteChar+0x4ac>
    2918:	|     |     |   addi.w #15,d0
    291c:	|     |     \-> asr.w #4,d0
    291e:	|     |         movea.w d0,a0
    2920:	|     |         move.l a0,d0
    2922:	|     |         add.l a0,d0
    2924:	|     |         move.l d1,d2
    2926:	|     |         add.l d0,d2
    2928:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    292c:	|     |         move.l 1c7ea <winWidth>,d0
    2932:	|     |         move.l 52(sp),-(sp)
    2936:	|     |         move.l d0,-(sp)
    2938:	|     |         jsr 17b6e <__mulsi3>
    293e:	|     |         addq.l #8,sp
    2940:	|     |         lsr.l #3,d0
    2942:	|     |         move.l 28(sp),d1
    2946:	|     |         add.l d0,d1
    2948:	|     |         move.w 10(sp),d0
    294c:	|     |     /-- bpl.s 2952 <CstPasteChar+0x4e2>
    294e:	|     |     |   addi.w #15,d0
    2952:	|     |     \-> asr.w #4,d0
    2954:	|     |         movea.w d0,a0
    2956:	|     |         move.l a0,d0
    2958:	|     |         add.l a0,d0
    295a:	|     |         move.l d1,d2
    295c:	|     |         add.l d0,d2
    295e:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2962:	|     |         move.w 10(sp),d0
    2966:	|     |         andi.w #-32753,d0
    296a:	|     |     /-- bpl.s 2974 <CstPasteChar+0x504>
    296c:	|     |     |   subq.w #1,d0
    296e:	|     |     |   ori.w #-16,d0
    2972:	|     |     |   addq.w #1,d0
    2974:	|     |     \-> ext.l d0
    2976:	|     |         moveq #12,d1
    2978:	|     |         lsl.l d1,d0
    297a:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    297e:	|     |         movea.l 84(sp),a0
    2982:	|     |         move.l (a0),d0
    2984:	|     |         movea.l d0,a0
    2986:	|     |         cmpa.w #0,a0
    298a:	|     |     /-- bge.s 2990 <CstPasteChar+0x520>
    298c:	|     |     |   lea 15(a0),a0
    2990:	|     |     \-> move.l a0,d0
    2992:	|     |         asr.l #4,d0
    2994:	|     |         move.l d0,d0
    2996:	|     |         add.w 76(sp),d0
    299a:	|     |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    29a0:	|     |         move.l a0,d1
    29a2:	|     |         addq.l #2,d1
    29a4:	|     |         move.l d1,1c7da <CstBackDropBufferApplyCursor>
    29aa:	|     |         add.w 78(sp),d0
    29ae:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    29b0:	|     |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    29b6:	|     |         move.l a0,d0
    29b8:	|     |         addq.l #2,d0
    29ba:	|     |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    29c0:	|     |         move.l 44(sp),d0
    29c4:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    29c6:	|     |         move.w 10(sp),d0
    29ca:	|     |     /-- bpl.s 29d0 <CstPasteChar+0x560>
    29cc:	|     |     |   addi.w #15,d0
    29d0:	|     |     \-> asr.w #4,d0
    29d2:	|     |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    29d8:	|     |         move.l a0,d1
    29da:	|     |         addq.l #2,d1
    29dc:	|     |         move.l d1,1c7da <CstBackDropBufferApplyCursor>
    29e2:	|     |         add.w d0,d0
    29e4:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    29e6:	|     |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    29ec:	|     |         move.l a0,d0
    29ee:	|     |         addq.l #2,d0
    29f0:	|     |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    29f6:	|     |         move.l 52(sp),d0
    29fa:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    29fc:	|     |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    2a02:	|     |         move.l a0,d0
    2a04:	|     |         addq.l #2,d0
    2a06:	|     |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    2a0c:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2a0e:	|     \-------> moveq #0,d0
    2a10:	|               move.w 74(sp),d0
    2a14:	|               moveq #0,d1
    2a16:	|               not.w d1
    2a18:	|               asr.l d0,d1
    2a1a:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2a1e:	|               moveq #0,d1
    2a20:	|               move.w 76(sp),d1
    2a24:	|               moveq #0,d0
    2a26:	|               move.w 78(sp),d0
    2a2a:	|               sub.l d0,d1
    2a2c:	|               move.l d1,d0
    2a2e:	|               add.w d0,d0
    2a30:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2a34:	|               move.l 1c7ea <winWidth>,d0
    2a3a:	|               lsr.l #3,d0
    2a3c:	|               move.l d0,d2
    2a3e:	|               move.w 76(sp),d1
    2a42:	|               sub.w 78(sp),d1
    2a46:	|               move.l 40(sp),d0
    2a4a:	|               sub.w d0,d1
    2a4c:	|               move.w d1,d0
    2a4e:	|               add.w d1,d0
    2a50:	|               add.w d2,d0
    2a52:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2a56:	|               move.l 1c7ea <winWidth>,d0
    2a5c:	|               lsr.l #3,d0
    2a5e:	|               move.l d0,d2
    2a60:	|               move.w 76(sp),d1
    2a64:	|               sub.w 78(sp),d1
    2a68:	|               move.l 40(sp),d0
    2a6c:	|               sub.w d0,d1
    2a6e:	|               move.w d1,d0
    2a70:	|               add.w d1,d0
    2a72:	|               add.w d2,d0
    2a74:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2a78:	|               move.l #14675968,16(sp)
  WaitBlit();
    2a80:	|               move.l 1c8a2 <GfxBase>,d0
    2a86:	|               movea.l d0,a6
    2a88:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2a8c:	|               movea.l 16(sp),a0
    2a90:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2a96:	|               movea.l 16(sp),a0
    2a9a:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2aa0:	|               move.w 24(sp),d0
    2aa4:	|               movea.l 16(sp),a0
    2aa8:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2aac:	|               move.w 22(sp),d0
    2ab0:	|               movea.l 16(sp),a0
    2ab4:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2ab8:	|               move.w 20(sp),d0
    2abc:	|               movea.l 16(sp),a0
    2ac0:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2ac4:	|               move.l 1c7ea <winWidth>,d0
    2aca:	|               lsr.l #3,d0
    2acc:	|               move.l d0,d1
    2ace:	|               move.l 1c7ee <winHeight>,d0
    2ad4:	|               move.l d0,d0
    2ad6:	|               move.w d1,d2
    2ad8:	|               muls.w d0,d2
    2ada:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2ade:	|               move.w 1c7b0 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2ae6:	|               move.w 38(sp),d0
    2aea:	|               andi.w #1,d0
    2aee:	|               move.w d0,12(sp)
  if(tmp2) {
    2af2:	|        /----- beq.s 2afc <CstPasteChar+0x68c>
    minterm = 0xbfa;
    2af4:	|        |      move.w #3066,36(sp)
    2afa:	|        |  /-- bra.s 2b02 <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    2afc:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b02:	|           \-> clr.l 32(sp)
    2b06:	|     /-------- bra.w 2ba4 <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2b0a:	|  /--|-------> move.l 56(sp),d0
    2b0e:	|  |  |         add.w 36(sp),d0
    2b12:	|  |  |         movea.l 16(sp),a0
    2b16:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2b1a:	|  |  |         move.l 68(sp),d0
    2b1e:	|  |  |         movea.l 16(sp),a0
    2b22:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2b26:	|  |  |         move.l 64(sp),d0
    2b2a:	|  |  |         movea.l 16(sp),a0
    2b2e:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2b32:	|  |  |         move.l 60(sp),d0
    2b36:	|  |  |         movea.l 16(sp),a0
    2b3a:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2b3e:	|  |  |         move.l 44(sp),d0
    2b42:	|  |  |         lsl.w #6,d0
    2b44:	|  |  |         move.l 40(sp),d1
    2b48:	|  |  |         add.w d1,d0
    2b4a:	|  |  |         sub.w 76(sp),d0
    2b4e:	|  |  |         add.w 78(sp),d0
    2b52:	|  |  |         movea.l 16(sp),a0
    2b56:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2b5a:	|  |  |         moveq #0,d0
    2b5c:	|  |  |         move.w 14(sp),d0
    2b60:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2b64:	|  |  |         moveq #0,d0
    2b66:	|  |  |         move.w 14(sp),d0
    2b6a:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2b6e:	|  |  |         move.w 38(sp),d0
    2b72:	|  |  |         lsr.w #1,d0
    2b74:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2b78:	|  |  |         move.w 38(sp),d1
    2b7c:	|  |  |         andi.w #1,d1
    2b80:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2b84:	|  |  |  /----- beq.s 2b8e <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2b86:	|  |  |  |      move.w #3066,36(sp)
    2b8c:	|  |  |  |  /-- bra.s 2b94 <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2b8e:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2b94:	|  |  |     \-> move.l 1c8a2 <GfxBase>,d0
    2b9a:	|  |  |         movea.l d0,a6
    2b9c:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2ba0:	|  |  |         addq.l #1,32(sp)
    2ba4:	|  |  \-------> moveq #4,d2
    2ba6:	|  |            cmp.l 32(sp),d2
    2baa:	|  \----------- bge.w 2b0a <CstPasteChar+0x69a>
 
  }   
}
    2bae:	\-------------> move.l (sp)+,d2
    2bb0:	                movea.l (sp)+,a6
    2bb2:	                lea 72(sp),sp
    2bb6:	                rts

00002bb8 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2bb8:	                   lea -24(sp),sp
    2bbc:	                   move.l a6,-(sp)
    2bbe:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2bc0:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2bc8:	                   move.l 1c7d2 <CstCleanupQueueDrawBuffer>,d0
    2bce:	/----------------- beq.w 2dd6 <CstRestoreScreen+0x21e>
    2bd2:	|                  move.l 1c7ca <CstDrawBuffer>,d0
    2bd8:	+----------------- beq.w 2dd6 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2bdc:	|                  move.l 1c8a2 <GfxBase>,d0
    2be2:	|                  movea.l d0,a6
    2be4:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2be8:	|                  movea.l 16(sp),a0
    2bec:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2bf2:	|                  movea.l 16(sp),a0
    2bf6:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2bfc:	|                  movea.l 16(sp),a0
    2c00:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2c06:	|     /----------- bra.w 2dca <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2c0a:	|  /--|----------> movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2c10:	|  |  |            move.l 4(a0),d0
    2c14:	|  |  |  /-------- beq.w 2d98 <CstRestoreScreen+0x1e0>
    2c18:	|  |  |  |         movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2c1e:	|  |  |  |         movea.l 4(a0),a0
    2c22:	|  |  |  |         move.l 16(a0),d0
    2c26:	|  |  |  |         moveq #2,d1
    2c28:	|  |  |  |         cmp.l d0,d1
    2c2a:	|  |  |  +-------- blt.w 2d98 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2c2e:	|  |  |  |         move.l 1c7ea <winWidth>,d0
    2c34:	|  |  |  |         lsr.l #3,d0
    2c36:	|  |  |  |         move.l d0,d1
    2c38:	|  |  |  |         movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2c3e:	|  |  |  |         move.w 8(a0),d0
    2c42:	|  |  |  |         add.w d0,d0
    2c44:	|  |  |  |         sub.w d0,d1
    2c46:	|  |  |  |         movea.l 16(sp),a0
    2c4a:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2c4e:	|  |  |  |         move.l 1c7ea <winWidth>,d0
    2c54:	|  |  |  |         lsr.l #3,d0
    2c56:	|  |  |  |         move.l d0,d1
    2c58:	|  |  |  |         movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2c5e:	|  |  |  |         move.w 8(a0),d0
    2c62:	|  |  |  |         add.w d0,d0
    2c64:	|  |  |  |         sub.w d0,d1
    2c66:	|  |  |  |         movea.l 16(sp),a0
    2c6a:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2c6e:	|  |  |  |         movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2c74:	|  |  |  |         move.w 14(a0),d0
    2c78:	|  |  |  |         move.w d0,d0
    2c7a:	|  |  |  |         andi.l #65535,d0
    2c80:	|  |  |  |         move.l 1c7ea <winWidth>,d1
    2c86:	|  |  |  |         move.l d1,-(sp)
    2c88:	|  |  |  |         move.l d0,-(sp)
    2c8a:	|  |  |  |         jsr 17b6e <__mulsi3>
    2c90:	|  |  |  |         addq.l #8,sp
    2c92:	|  |  |  |         move.l d0,d1
    2c94:	|  |  |  |         lsr.l #3,d1
    2c96:	|  |  |  |         move.l 1c7b8 <CstBackDrop>,d0
    2c9c:	|  |  |  |         add.l d0,d1
    2c9e:	|  |  |  |         movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2ca4:	|  |  |  |         move.w 12(a0),d0
    2ca8:	|  |  |  |         move.w d0,d0
    2caa:	|  |  |  |         andi.l #65535,d0
    2cb0:	|  |  |  |         move.l d1,d2
    2cb2:	|  |  |  |         add.l d0,d2
    2cb4:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2cb8:	|  |  |  |         movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2cbe:	|  |  |  |         move.w 14(a0),d0
    2cc2:	|  |  |  |         move.w d0,d0
    2cc4:	|  |  |  |         andi.l #65535,d0
    2cca:	|  |  |  |         move.l 1c7ea <winWidth>,d1
    2cd0:	|  |  |  |         move.l d1,-(sp)
    2cd2:	|  |  |  |         move.l d0,-(sp)
    2cd4:	|  |  |  |         jsr 17b6e <__mulsi3>
    2cda:	|  |  |  |         addq.l #8,sp
    2cdc:	|  |  |  |         move.l d0,d1
    2cde:	|  |  |  |         lsr.l #3,d1
    2ce0:	|  |  |  |         move.l 1c7ca <CstDrawBuffer>,d0
    2ce6:	|  |  |  |         add.l d0,d1
    2ce8:	|  |  |  |         movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2cee:	|  |  |  |         move.w 12(a0),d0
    2cf2:	|  |  |  |         move.w d0,d0
    2cf4:	|  |  |  |         andi.l #65535,d0
    2cfa:	|  |  |  |         move.l d1,d2
    2cfc:	|  |  |  |         add.l d0,d2
    2cfe:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2d02:	|  |  |  |         clr.l 20(sp)
    2d06:	|  |  |  |     /-- bra.w 2d8e <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2d0a:	|  |  |  |  /--|-> move.l 28(sp),d0
    2d0e:	|  |  |  |  |  |   movea.l 16(sp),a0
    2d12:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2d16:	|  |  |  |  |  |   move.l 24(sp),d0
    2d1a:	|  |  |  |  |  |   movea.l 16(sp),a0
    2d1e:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2d22:	|  |  |  |  |  |   movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2d28:	|  |  |  |  |  |   move.w 10(a0),d0
    2d2c:	|  |  |  |  |  |   lsl.w #6,d0
    2d2e:	|  |  |  |  |  |   movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2d34:	|  |  |  |  |  |   move.w 8(a0),d1
    2d38:	|  |  |  |  |  |   add.w d1,d0
    2d3a:	|  |  |  |  |  |   movea.l 16(sp),a0
    2d3e:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2d42:	|  |  |  |  |  |   move.l 1c7ea <winWidth>,d0
    2d48:	|  |  |  |  |  |   lsr.l #3,d0
    2d4a:	|  |  |  |  |  |   move.l 1c7ee <winHeight>,d1
    2d50:	|  |  |  |  |  |   move.l d1,-(sp)
    2d52:	|  |  |  |  |  |   move.l d0,-(sp)
    2d54:	|  |  |  |  |  |   jsr 17b6e <__mulsi3>
    2d5a:	|  |  |  |  |  |   addq.l #8,sp
    2d5c:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2d60:	|  |  |  |  |  |   move.l 1c7ea <winWidth>,d0
    2d66:	|  |  |  |  |  |   lsr.l #3,d0
    2d68:	|  |  |  |  |  |   move.l 1c7ee <winHeight>,d1
    2d6e:	|  |  |  |  |  |   move.l d1,-(sp)
    2d70:	|  |  |  |  |  |   move.l d0,-(sp)
    2d72:	|  |  |  |  |  |   jsr 17b6e <__mulsi3>
    2d78:	|  |  |  |  |  |   addq.l #8,sp
    2d7a:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2d7e:	|  |  |  |  |  |   move.l 1c8a2 <GfxBase>,d0
    2d84:	|  |  |  |  |  |   movea.l d0,a6
    2d86:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2d8a:	|  |  |  |  |  |   addq.l #1,20(sp)
    2d8e:	|  |  |  |  |  \-> moveq #4,d0
    2d90:	|  |  |  |  |      cmp.l 20(sp),d0
    2d94:	|  |  |  |  \----- bge.w 2d0a <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2d98:	|  |  |  \-------> move.l 1c7d2 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2da0:	|  |  |            movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    2da6:	|  |  |            move.l 16(a0),d0
    2daa:	|  |  |            move.l d0,1c7d2 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2db0:	|  |  |            move.l 12(sp),8(sp)
    2db6:	|  |  |            move.l 1c896 <SysBase>,d0
    2dbc:	|  |  |            movea.l d0,a6
    2dbe:	|  |  |            movea.l 8(sp),a1
    2dc2:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2dc6:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2dca:	|  |  \----------> move.l 1c7d2 <CstCleanupQueueDrawBuffer>,d0
    2dd0:	|  \-------------- bne.w 2c0a <CstRestoreScreen+0x52>
    2dd4:	|              /-- bra.s 2dd8 <CstRestoreScreen+0x220>
    return;
    2dd6:	\--------------|-> nop
  }
  
}
    2dd8:	               \-> move.l (sp)+,d2
    2dda:	                   movea.l (sp)+,a6
    2ddc:	                   lea 24(sp),sp
    2de0:	                   rts

00002de2 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2de2:	                lea -132(sp),sp
    2de6:	                move.l a6,-(sp)
    2de8:	                move.l d2,-(sp)
    2dea:	                movea.l 152(sp),a0
    2dee:	                move.l 156(sp),d1
    2df2:	                move.l 160(sp),d0
    2df6:	                movea.w a0,a0
    2df8:	                move.w a0,12(sp)
    2dfc:	                move.w d1,d1
    2dfe:	                move.w d1,10(sp)
    2e02:	                move.w d0,d0
    2e04:	                move.w d0,8(sp)

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2e08:	                move.w 10(sp),d0
    2e0c:	                moveq #0,d1
    2e0e:	                move.w d0,d1
    2e10:	                move.w 12(sp),d0
    2e14:	                move.w d0,d0
    2e16:	                andi.l #65535,d0
    2e1c:	                movea.l 1c8f6 <zBuffer>,a0
    2e22:	                move.l d1,-(sp)
    2e24:	                move.l d0,-(sp)
    2e26:	                move.l a0,-(sp)
    2e28:	                move.l 156(sp),-(sp)
    2e2c:	                jsr 14e8 <CstDrawZBuffer>
    2e32:	                lea 16(sp),sp
    2e36:	                move.l d0,84(sp)

  UWORD *destination = 0;
    2e3a:	                clr.l 136(sp)
  switch(destinationtype)
    2e3e:	                moveq #0,d0
    2e40:	                move.w 8(sp),d0
    2e44:	                moveq #1,d1
    2e46:	                cmp.l d0,d1
    2e48:	            /-- beq.s 2e52 <CstScaleSprite+0x70>
    2e4a:	            |   moveq #2,d2
    2e4c:	            |   cmp.l d0,d2
    2e4e:	         /--|-- beq.s 2e5c <CstScaleSprite+0x7a>
    2e50:	      /--|--|-- bra.s 2e6e <CstScaleSprite+0x8c>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2e52:	      |  |  \-> move.l 1c7ca <CstDrawBuffer>,136(sp)
      break;
    2e5a:	      +--|----- bra.s 2e6e <CstScaleSprite+0x8c>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    2e5c:	      |  \----> move.w #2,1c7c4 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2e64:	      |         move.l 1c7b8 <CstBackDrop>,136(sp)
      break;
    2e6c:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    2e6e:	      \-------> tst.w 10(sp)
    2e72:	         /----- bge.s 2eba <CstScaleSprite+0xd8>
    if(y + single->height < 0) {
    2e74:	         |      movea.w 10(sp),a1
    2e78:	         |      movea.l 144(sp),a0
    2e7c:	         |      move.l 4(a0),d0
    2e80:	         |      add.l a1,d0
    2e82:	         |  /-- bpl.s 2e96 <CstScaleSprite+0xb4>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2e84:	         |  |   pea 17f9d <PutChar+0x319>
    2e8a:	         |  |   jsr 171b0 <KPrintF>
    2e90:	         |  |   addq.l #4,sp
      return;
    2e92:	/--------|--|-- bra.w 38cc <CstScaleSprite+0xaea>
    }
    ystartdst = 0;
    2e96:	|        |  \-> clr.l 100(sp)
    ystartsrc = y*-1;
    2e9a:	|        |      move.w 10(sp),d0
    2e9e:	|        |      ext.l d0
    2ea0:	|        |      neg.l d0
    2ea2:	|        |      move.l d0,96(sp)
    blitheight = single->height+y;
    2ea6:	|        |      movea.l 144(sp),a0
    2eaa:	|        |      move.l 4(a0),d0
    2eae:	|        |      movea.w 10(sp),a0
    2eb2:	|        |      add.l a0,d0
    2eb4:	|        |      move.l d0,92(sp)
    2eb8:	|     /--|----- bra.s 2f2c <CstScaleSprite+0x14a>
  } else if(y+single->height > (int) winHeight) {
    2eba:	|     |  \----> movea.w 10(sp),a1
    2ebe:	|     |         movea.l 144(sp),a0
    2ec2:	|     |         move.l 4(a0),d0
    2ec6:	|     |         move.l a1,d1
    2ec8:	|     |         add.l d0,d1
    2eca:	|     |         move.l 1c7ee <winHeight>,d0
    2ed0:	|     |         cmp.l d1,d0
    2ed2:	|     |  /----- bge.s 2f14 <CstScaleSprite+0x132>
    if(y  > (int) winHeight) {
    2ed4:	|     |  |      movea.w 10(sp),a0
    2ed8:	|     |  |      move.l 1c7ee <winHeight>,d0
    2ede:	|     |  |      cmp.l a0,d0
    2ee0:	|     |  |  /-- bge.s 2ef4 <CstScaleSprite+0x112>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2ee2:	|     |  |  |   pea 17f9d <PutChar+0x319>
    2ee8:	|     |  |  |   jsr 171b0 <KPrintF>
    2eee:	|     |  |  |   addq.l #4,sp
      return;
    2ef0:	+-----|--|--|-- bra.w 38cc <CstScaleSprite+0xaea>
    }
    ystartdst = y;
    2ef4:	|     |  |  \-> movea.w 10(sp),a0
    2ef8:	|     |  |      move.l a0,100(sp)
    ystartsrc = 0;
    2efc:	|     |  |      clr.l 96(sp)
    blitheight = winHeight-y;
    2f00:	|     |  |      move.l 1c7ee <winHeight>,d0
    2f06:	|     |  |      movea.w 10(sp),a0
    2f0a:	|     |  |      move.l d0,d1
    2f0c:	|     |  |      sub.l a0,d1
    2f0e:	|     |  |      move.l d1,92(sp)
    2f12:	|     +--|----- bra.s 2f2c <CstScaleSprite+0x14a>
  } else {
    ystartdst = y;
    2f14:	|     |  \----> movea.w 10(sp),a0
    2f18:	|     |         move.l a0,100(sp)
    ystartsrc = 0;
    2f1c:	|     |         clr.l 96(sp)
    blitheight = single->height;
    2f20:	|     |         movea.l 144(sp),a0
    2f24:	|     |         move.l 4(a0),d0
    2f28:	|     |         move.l d0,92(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2f2c:	|     \-------> tst.w 12(sp)
    2f30:	|     /-------- bge.w 31b0 <CstScaleSprite+0x3ce>
    if(x + single->width < 0) {
    2f34:	|     |         movea.w 12(sp),a1
    2f38:	|     |         movea.l 144(sp),a0
    2f3c:	|     |         move.l (a0),d0
    2f3e:	|     |         add.l a1,d0
    2f40:	|     |     /-- bpl.s 2f54 <CstScaleSprite+0x172>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2f42:	|     |     |   pea 17f9d <PutChar+0x319>
    2f48:	|     |     |   jsr 171b0 <KPrintF>
    2f4e:	|     |     |   addq.l #4,sp
      return;
    2f50:	+-----|-----|-- bra.w 38cc <CstScaleSprite+0xaea>

    }
    
    extrawords = 1;
    2f54:	|     |     \-> move.w #1,134(sp)
    cutwordssource = (x*-1)/16; 
    2f5a:	|     |         move.w 12(sp),d0
    2f5e:	|     |     /-- bpl.s 2f64 <CstScaleSprite+0x182>
    2f60:	|     |     |   addi.w #15,d0
    2f64:	|     |     \-> asr.w #4,d0
    2f66:	|     |         neg.w d0
    2f68:	|     |         move.w d0,132(sp)
    cutmaskpixel = (x*-1)%16;     
    2f6c:	|     |         move.w 12(sp),d0
    2f70:	|     |         ext.l d0
    2f72:	|     |         neg.l d0
    2f74:	|     |         andi.l #-2147483633,d0
    2f7a:	|     |     /-- bpl.s 2f84 <CstScaleSprite+0x1a2>
    2f7c:	|     |     |   subq.l #1,d0
    2f7e:	|     |     |   moveq #-16,d1
    2f80:	|     |     |   or.l d1,d0
    2f82:	|     |     |   addq.l #1,d0
    2f84:	|     |     \-> move.w d0,130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2f88:	|     |         clr.w 128(sp)
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2f8c:	|     |         moveq #0,d0
    2f8e:	|     |         move.w 132(sp),d0
    2f92:	|     |         add.l d0,d0
    2f94:	|     |         move.l d0,d1
    2f96:	|     |         move.l 84(sp),d0
    2f9a:	|     |         move.l d1,d2
    2f9c:	|     |         add.l d0,d2
    2f9e:	|     |         movea.l 144(sp),a0
    2fa2:	|     |         move.l (a0),d0
    2fa4:	|     |         move.l 96(sp),-(sp)
    2fa8:	|     |         move.l d0,-(sp)
    2faa:	|     |         jsr 17b6e <__mulsi3>
    2fb0:	|     |         addq.l #8,sp
    2fb2:	|     |         lsr.l #3,d0
    2fb4:	|     |         move.l d2,d1
    2fb6:	|     |         add.l d0,d1
    2fb8:	|     |         move.l d1,124(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2fbc:	|     |         movea.l 144(sp),a0
    2fc0:	|     |         move.l 24(a0),d0
    2fc4:	|     |         move.l d0,d1
    2fc6:	|     |         moveq #0,d0
    2fc8:	|     |         move.w 132(sp),d0
    2fcc:	|     |         add.l d0,d0
    2fce:	|     |         move.l d1,d2
    2fd0:	|     |         add.l d0,d2
    2fd2:	|     |         movea.l 144(sp),a0
    2fd6:	|     |         move.l (a0),d0
    2fd8:	|     |         move.l 96(sp),-(sp)
    2fdc:	|     |         move.l d0,-(sp)
    2fde:	|     |         jsr 17b6e <__mulsi3>
    2fe4:	|     |         addq.l #8,sp
    2fe6:	|     |         lsr.l #3,d0
    2fe8:	|     |         move.l d2,d1
    2fea:	|     |         add.l d0,d1
    2fec:	|     |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2ff0:	|     |         move.l 1c7ea <winWidth>,d0
    2ff6:	|     |         move.l 100(sp),-(sp)
    2ffa:	|     |         move.l d0,-(sp)
    2ffc:	|     |         jsr 17b6e <__mulsi3>
    3002:	|     |         addq.l #8,sp
    3004:	|     |         lsr.l #3,d0
    3006:	|     |         move.l 136(sp),d1
    300a:	|     |         add.l d1,d0
    300c:	|     |         move.l d0,d2
    300e:	|     |         subq.l #2,d2
    3010:	|     |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3014:	|     |         move.l 1c7ea <winWidth>,d0
    301a:	|     |         move.l 100(sp),-(sp)
    301e:	|     |         move.l d0,-(sp)
    3020:	|     |         jsr 17b6e <__mulsi3>
    3026:	|     |         addq.l #8,sp
    3028:	|     |         lsr.l #3,d0
    302a:	|     |         move.l 136(sp),d1
    302e:	|     |         add.l d1,d0
    3030:	|     |         move.l d0,d1
    3032:	|     |         subq.l #2,d1
    3034:	|     |         move.l d1,112(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    3038:	|     |         moveq #0,d0
    303a:	|     |         move.w 130(sp),d0
    303e:	|     |         moveq #16,d1
    3040:	|     |         sub.l d0,d1
    3042:	|     |         move.l d1,d0
    3044:	|     |         moveq #12,d2
    3046:	|     |         lsl.l d2,d0
    3048:	|     |         addi.l #4042,d0
    304e:	|     |         move.l d0,108(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    3052:	|     |         moveq #0,d0
    3054:	|     |         move.w 130(sp),d0
    3058:	|     |         moveq #16,d1
    305a:	|     |         sub.l d0,d1
    305c:	|     |         move.l d1,d0
    305e:	|     |         moveq #12,d1
    3060:	|     |         lsl.l d1,d0
    3062:	|     |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    3066:	|     |         cmpi.w #1,8(sp)
    306c:	|     |  /----- bne.w 312a <CstScaleSprite+0x348>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3070:	|     |  |      move.l 1c7d2 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3078:	|     |  |      moveq #20,d2
    307a:	|     |  |      move.l d2,44(sp)
    307e:	|     |  |      clr.l 40(sp)
    3082:	|     |  |      move.l 1c896 <SysBase>,d0
    3088:	|     |  |      movea.l d0,a6
    308a:	|     |  |      move.l 44(sp),d0
    308e:	|     |  |      move.l 40(sp),d1
    3092:	|     |  |      jsr -684(a6)
    3096:	|     |  |      move.l d0,36(sp)
    309a:	|     |  |      move.l 36(sp),d0
    309e:	|     |  |      move.l d0,1c7d2 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    30a4:	|     |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    30aa:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    30b0:	|     |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    30b6:	|     |  |      move.w 12(sp),d0
    30ba:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    30bc:	|     |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    30c2:	|     |  |      move.w 10(sp),d0
    30c6:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    30ca:	|     |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    30d0:	|     |  |      move.l 148(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    30d6:	|     |  |      movea.l 144(sp),a0
    30da:	|     |  |      move.l (a0),d0
    30dc:	|     |  |      movea.l d0,a0
    30de:	|     |  |      cmpa.w #0,a0
    30e2:	|     |  |  /-- bge.s 30e8 <CstScaleSprite+0x306>
    30e4:	|     |  |  |   lea 15(a0),a0
    30e8:	|     |  |  \-> move.l a0,d0
    30ea:	|     |  |      asr.l #4,d0
    30ec:	|     |  |      move.l d0,d0
    30ee:	|     |  |      add.w 132(sp),d0
    30f2:	|     |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    30f8:	|     |  |      add.w 134(sp),d0
    30fc:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3100:	|     |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    3106:	|     |  |      move.l 92(sp),d0
    310a:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    310e:	|     |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    3114:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3118:	|     |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    311e:	|     |  |      move.l 100(sp),d0
    3122:	|     |  |      move.w d0,14(a0)
    3126:	|  /--|--|----- bra.w 36de <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    312a:	|  |  |  \----> movea.l 144(sp),a0
    312e:	|  |  |         move.l (a0),d0
    3130:	|  |  |         movea.l d0,a0
    3132:	|  |  |         cmpa.w #0,a0
    3136:	|  |  |     /-- bge.s 313c <CstScaleSprite+0x35a>
    3138:	|  |  |     |   lea 15(a0),a0
    313c:	|  |  |     \-> move.l a0,d0
    313e:	|  |  |         asr.l #4,d0
    3140:	|  |  |         move.l d0,d0
    3142:	|  |  |         add.w 132(sp),d0
    3146:	|  |  |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    314c:	|  |  |         move.l a0,d1
    314e:	|  |  |         addq.l #2,d1
    3150:	|  |  |         move.l d1,1c7da <CstBackDropBufferApplyCursor>
    3156:	|  |  |         add.w 134(sp),d0
    315a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    315c:	|  |  |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3162:	|  |  |         move.l a0,d0
    3164:	|  |  |         addq.l #2,d0
    3166:	|  |  |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    316c:	|  |  |         move.l 92(sp),d0
    3170:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3172:	|  |  |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3178:	|  |  |         move.l a0,d0
    317a:	|  |  |         addq.l #2,d0
    317c:	|  |  |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    3182:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3184:	|  |  |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    318a:	|  |  |         move.l a0,d0
    318c:	|  |  |         addq.l #2,d0
    318e:	|  |  |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    3194:	|  |  |         move.l 100(sp),d0
    3198:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    319a:	|  |  |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    31a0:	|  |  |         move.l a0,d0
    31a2:	|  |  |         addq.l #2,d0
    31a4:	|  |  |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    31aa:	|  |  |         clr.w (a0)
    31ac:	|  +--|-------- bra.w 36de <CstScaleSprite+0x8fc>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    31b0:	|  |  \-------> movea.w 12(sp),a1
    31b4:	|  |            movea.l 144(sp),a0
    31b8:	|  |            move.l (a0),d0
    31ba:	|  |            move.l a1,d1
    31bc:	|  |            add.l d0,d1
    31be:	|  |            move.l 1c7ea <winWidth>,d0
    31c4:	|  |            cmp.l d1,d0
    31c6:	|  |  /-------- bge.w 3476 <CstScaleSprite+0x694>

    if(x - single->width > (int) winWidth)
    31ca:	|  |  |         movea.w 12(sp),a1
    31ce:	|  |  |         movea.l 144(sp),a0
    31d2:	|  |  |         move.l (a0),d0
    31d4:	|  |  |         move.l a1,d1
    31d6:	|  |  |         sub.l d0,d1
    31d8:	|  |  |         move.l 1c7ea <winWidth>,d0
    31de:	|  |  |         cmp.l d1,d0
    31e0:	|  |  |     /-- bge.s 31f4 <CstScaleSprite+0x412>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    31e2:	|  |  |     |   pea 17f9d <PutChar+0x319>
    31e8:	|  |  |     |   jsr 171b0 <KPrintF>
    31ee:	|  |  |     |   addq.l #4,sp
      return;
    31f0:	+--|--|-----|-- bra.w 38cc <CstScaleSprite+0xaea>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    31f4:	|  |  |     \-> clr.w 134(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    31f8:	|  |  |         movea.w 12(sp),a1
    31fc:	|  |  |         movea.l 144(sp),a0
    3200:	|  |  |         move.l (a0),d0
    3202:	|  |  |         add.l a1,d0
    3204:	|  |  |         move.l d0,d1
    3206:	|  |  |         move.l 1c7ea <winWidth>,d0
    320c:	|  |  |         sub.l d0,d1
    320e:	|  |  |         move.l d1,d0
    3210:	|  |  |         lsr.l #4,d0
    3212:	|  |  |         move.w d0,132(sp)
    cutmaskpixel = 0;
    3216:	|  |  |         clr.w 130(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    321a:	|  |  |         move.w #-1,128(sp)
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    3220:	|  |  |         movea.l 144(sp),a0
    3224:	|  |  |         move.l (a0),d0
    3226:	|  |  |         move.l 96(sp),-(sp)
    322a:	|  |  |         move.l d0,-(sp)
    322c:	|  |  |         jsr 17b6e <__mulsi3>
    3232:	|  |  |         addq.l #8,sp
    3234:	|  |  |         lsr.l #3,d0
    3236:	|  |  |         move.l 84(sp),d1
    323a:	|  |  |         move.l d0,d2
    323c:	|  |  |         add.l d1,d2
    323e:	|  |  |         move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3242:	|  |  |         movea.l 144(sp),a0
    3246:	|  |  |         move.l 24(a0),d0
    324a:	|  |  |         move.l d0,d2
    324c:	|  |  |         movea.l 144(sp),a0
    3250:	|  |  |         move.l (a0),d0
    3252:	|  |  |         move.l 96(sp),-(sp)
    3256:	|  |  |         move.l d0,-(sp)
    3258:	|  |  |         jsr 17b6e <__mulsi3>
    325e:	|  |  |         addq.l #8,sp
    3260:	|  |  |         lsr.l #3,d0
    3262:	|  |  |         move.l d2,d1
    3264:	|  |  |         add.l d0,d1
    3266:	|  |  |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    326a:	|  |  |         move.l 1c7ea <winWidth>,d0
    3270:	|  |  |         move.l 100(sp),-(sp)
    3274:	|  |  |         move.l d0,-(sp)
    3276:	|  |  |         jsr 17b6e <__mulsi3>
    327c:	|  |  |         addq.l #8,sp
    327e:	|  |  |         lsr.l #3,d0
    3280:	|  |  |         move.l 136(sp),d1
    3284:	|  |  |         add.l d0,d1
    3286:	|  |  |         move.w 12(sp),d0
    328a:	|  |  |     /-- bpl.s 3290 <CstScaleSprite+0x4ae>
    328c:	|  |  |     |   addi.w #15,d0
    3290:	|  |  |     \-> asr.w #4,d0
    3292:	|  |  |         movea.w d0,a0
    3294:	|  |  |         move.l a0,d0
    3296:	|  |  |         add.l a0,d0
    3298:	|  |  |         move.l d1,d2
    329a:	|  |  |         add.l d0,d2
    329c:	|  |  |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    32a0:	|  |  |         move.l 1c7ea <winWidth>,d0
    32a6:	|  |  |         move.l 100(sp),-(sp)
    32aa:	|  |  |         move.l d0,-(sp)
    32ac:	|  |  |         jsr 17b6e <__mulsi3>
    32b2:	|  |  |         addq.l #8,sp
    32b4:	|  |  |         lsr.l #3,d0
    32b6:	|  |  |         move.l 136(sp),d1
    32ba:	|  |  |         add.l d0,d1
    32bc:	|  |  |         move.w 12(sp),d0
    32c0:	|  |  |     /-- bpl.s 32c6 <CstScaleSprite+0x4e4>
    32c2:	|  |  |     |   addi.w #15,d0
    32c6:	|  |  |     \-> asr.w #4,d0
    32c8:	|  |  |         movea.w d0,a0
    32ca:	|  |  |         move.l a0,d0
    32cc:	|  |  |         add.l a0,d0
    32ce:	|  |  |         move.l d1,d2
    32d0:	|  |  |         add.l d0,d2
    32d2:	|  |  |         move.l d2,112(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    32d6:	|  |  |         movea.l 144(sp),a0
    32da:	|  |  |         move.l (a0),d0
    32dc:	|  |  |         andi.l #-2147483633,d0
    32e2:	|  |  |     /-- bpl.s 32ec <CstScaleSprite+0x50a>
    32e4:	|  |  |     |   subq.l #1,d0
    32e6:	|  |  |     |   moveq #-16,d1
    32e8:	|  |  |     |   or.l d1,d0
    32ea:	|  |  |     |   addq.l #1,d0
    32ec:	|  |  |     \-> moveq #12,d2
    32ee:	|  |  |         lsl.l d2,d0
    32f0:	|  |  |         addi.l #4042,d0
    32f6:	|  |  |         move.l d0,108(sp)
    bltcon1 = ((single->width%16) << 12);
    32fa:	|  |  |         movea.l 144(sp),a0
    32fe:	|  |  |         move.l (a0),d0
    3300:	|  |  |         andi.l #-2147483633,d0
    3306:	|  |  |     /-- bpl.s 3310 <CstScaleSprite+0x52e>
    3308:	|  |  |     |   subq.l #1,d0
    330a:	|  |  |     |   moveq #-16,d1
    330c:	|  |  |     |   or.l d1,d0
    330e:	|  |  |     |   addq.l #1,d0
    3310:	|  |  |     \-> moveq #12,d2
    3312:	|  |  |         lsl.l d2,d0
    3314:	|  |  |         move.l d0,104(sp)
    if( destinationtype == SCREEN)
    3318:	|  |  |         cmpi.w #1,8(sp)
    331e:	|  |  |  /----- bne.w 33e6 <CstScaleSprite+0x604>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3322:	|  |  |  |      move.l 1c7d2 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    332a:	|  |  |  |      moveq #20,d0
    332c:	|  |  |  |      move.l d0,60(sp)
    3330:	|  |  |  |      clr.l 56(sp)
    3334:	|  |  |  |      move.l 1c896 <SysBase>,d0
    333a:	|  |  |  |      movea.l d0,a6
    333c:	|  |  |  |      move.l 60(sp),d0
    3340:	|  |  |  |      move.l 56(sp),d1
    3344:	|  |  |  |      jsr -684(a6)
    3348:	|  |  |  |      move.l d0,52(sp)
    334c:	|  |  |  |      move.l 52(sp),d0
    3350:	|  |  |  |      move.l d0,1c7d2 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3356:	|  |  |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    335c:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    3362:	|  |  |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    3368:	|  |  |  |      move.w 12(sp),d0
    336c:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    336e:	|  |  |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    3374:	|  |  |  |      move.w 10(sp),d0
    3378:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    337c:	|  |  |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    3382:	|  |  |  |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3388:	|  |  |  |      movea.l 144(sp),a0
    338c:	|  |  |  |      move.l (a0),d0
    338e:	|  |  |  |      movea.l d0,a0
    3390:	|  |  |  |      cmpa.w #0,a0
    3394:	|  |  |  |  /-- bge.s 339a <CstScaleSprite+0x5b8>
    3396:	|  |  |  |  |   lea 15(a0),a0
    339a:	|  |  |  |  \-> move.l a0,d0
    339c:	|  |  |  |      asr.l #4,d0
    339e:	|  |  |  |      move.l d0,d0
    33a0:	|  |  |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    33a6:	|  |  |  |      add.w 132(sp),d0
    33aa:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    33ae:	|  |  |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    33b4:	|  |  |  |      move.l 92(sp),d0
    33b8:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    33bc:	|  |  |  |      move.w 12(sp),d0
    33c0:	|  |  |  |  /-- bpl.s 33c6 <CstScaleSprite+0x5e4>
    33c2:	|  |  |  |  |   addi.w #15,d0
    33c6:	|  |  |  |  \-> asr.w #4,d0
    33c8:	|  |  |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    33ce:	|  |  |  |      add.w d0,d0
    33d0:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    33d4:	|  |  |  |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    33da:	|  |  |  |      move.l 100(sp),d0
    33de:	|  |  |  |      move.w d0,14(a0)
    33e2:	|  +--|--|----- bra.w 36de <CstScaleSprite+0x8fc>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    33e6:	|  |  |  \----> movea.l 144(sp),a0
    33ea:	|  |  |         move.l (a0),d0
    33ec:	|  |  |         movea.l d0,a0
    33ee:	|  |  |         cmpa.w #0,a0
    33f2:	|  |  |     /-- bge.s 33f8 <CstScaleSprite+0x616>
    33f4:	|  |  |     |   lea 15(a0),a0
    33f8:	|  |  |     \-> move.l a0,d0
    33fa:	|  |  |         asr.l #4,d0
    33fc:	|  |  |         move.l d0,d0
    33fe:	|  |  |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3404:	|  |  |         move.l a0,d1
    3406:	|  |  |         addq.l #2,d1
    3408:	|  |  |         move.l d1,1c7da <CstBackDropBufferApplyCursor>
    340e:	|  |  |         add.w 132(sp),d0
    3412:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3414:	|  |  |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    341a:	|  |  |         move.l a0,d0
    341c:	|  |  |         addq.l #2,d0
    341e:	|  |  |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    3424:	|  |  |         move.l 92(sp),d0
    3428:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    342a:	|  |  |         move.w 12(sp),d0
    342e:	|  |  |     /-- bpl.s 3434 <CstScaleSprite+0x652>
    3430:	|  |  |     |   addi.w #15,d0
    3434:	|  |  |     \-> asr.w #4,d0
    3436:	|  |  |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    343c:	|  |  |         move.l a0,d1
    343e:	|  |  |         addq.l #2,d1
    3440:	|  |  |         move.l d1,1c7da <CstBackDropBufferApplyCursor>
    3446:	|  |  |         add.w d0,d0
    3448:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    344a:	|  |  |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3450:	|  |  |         move.l a0,d0
    3452:	|  |  |         addq.l #2,d0
    3454:	|  |  |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    345a:	|  |  |         move.l 100(sp),d0
    345e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3460:	|  |  |         movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3466:	|  |  |         move.l a0,d0
    3468:	|  |  |         addq.l #2,d0
    346a:	|  |  |         move.l d0,1c7da <CstBackDropBufferApplyCursor>
    3470:	|  |  |         clr.w (a0)
    3472:	|  +--|-------- bra.w 36de <CstScaleSprite+0x8fc>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    3476:	|  |  \-------> move.w #1,134(sp)
    cutwordssource = 0;
    347c:	|  |            clr.w 132(sp)
    cutmaskpixel = 0;
    3480:	|  |            clr.w 130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    3484:	|  |            clr.w 128(sp)
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3488:	|  |            movea.l 144(sp),a0
    348c:	|  |            move.l (a0),d0
    348e:	|  |            move.l 96(sp),-(sp)
    3492:	|  |            move.l d0,-(sp)
    3494:	|  |            jsr 17b6e <__mulsi3>
    349a:	|  |            addq.l #8,sp
    349c:	|  |            lsr.l #3,d0
    349e:	|  |            move.l 84(sp),d1
    34a2:	|  |            move.l d0,d2
    34a4:	|  |            add.l d1,d2
    34a6:	|  |            move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    34aa:	|  |            movea.l 144(sp),a0
    34ae:	|  |            move.l 24(a0),d0
    34b2:	|  |            move.l d0,d2
    34b4:	|  |            movea.l 144(sp),a0
    34b8:	|  |            move.l (a0),d0
    34ba:	|  |            move.l 96(sp),-(sp)
    34be:	|  |            move.l d0,-(sp)
    34c0:	|  |            jsr 17b6e <__mulsi3>
    34c6:	|  |            addq.l #8,sp
    34c8:	|  |            lsr.l #3,d0
    34ca:	|  |            move.l d2,d1
    34cc:	|  |            add.l d0,d1
    34ce:	|  |            move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    34d2:	|  |            move.l 1c7ea <winWidth>,d0
    34d8:	|  |            move.l 100(sp),-(sp)
    34dc:	|  |            move.l d0,-(sp)
    34de:	|  |            jsr 17b6e <__mulsi3>
    34e4:	|  |            addq.l #8,sp
    34e6:	|  |            lsr.l #3,d0
    34e8:	|  |            move.l 136(sp),d1
    34ec:	|  |            add.l d0,d1
    34ee:	|  |            move.w 12(sp),d0
    34f2:	|  |        /-- bpl.s 34f8 <CstScaleSprite+0x716>
    34f4:	|  |        |   addi.w #15,d0
    34f8:	|  |        \-> asr.w #4,d0
    34fa:	|  |            movea.w d0,a0
    34fc:	|  |            move.l a0,d0
    34fe:	|  |            add.l a0,d0
    3500:	|  |            move.l d1,d2
    3502:	|  |            add.l d0,d2
    3504:	|  |            move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3508:	|  |            move.l 1c7ea <winWidth>,d0
    350e:	|  |            move.l 100(sp),-(sp)
    3512:	|  |            move.l d0,-(sp)
    3514:	|  |            jsr 17b6e <__mulsi3>
    351a:	|  |            addq.l #8,sp
    351c:	|  |            lsr.l #3,d0
    351e:	|  |            move.l 136(sp),d1
    3522:	|  |            add.l d0,d1
    3524:	|  |            move.w 12(sp),d0
    3528:	|  |        /-- bpl.s 352e <CstScaleSprite+0x74c>
    352a:	|  |        |   addi.w #15,d0
    352e:	|  |        \-> asr.w #4,d0
    3530:	|  |            movea.w d0,a0
    3532:	|  |            move.l a0,d0
    3534:	|  |            add.l a0,d0
    3536:	|  |            move.l d1,d2
    3538:	|  |            add.l d0,d2
    353a:	|  |            move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    353e:	|  |            move.w 12(sp),d0
    3542:	|  |            andi.w #-32753,d0
    3546:	|  |        /-- bpl.s 3550 <CstScaleSprite+0x76e>
    3548:	|  |        |   subq.w #1,d0
    354a:	|  |        |   ori.w #-16,d0
    354e:	|  |        |   addq.w #1,d0
    3550:	|  |        \-> ext.l d0
    3552:	|  |            moveq #12,d1
    3554:	|  |            lsl.l d1,d0
    3556:	|  |            addi.l #4042,d0
    355c:	|  |            move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    3560:	|  |            move.w 12(sp),d0
    3564:	|  |            andi.w #-32753,d0
    3568:	|  |        /-- bpl.s 3572 <CstScaleSprite+0x790>
    356a:	|  |        |   subq.w #1,d0
    356c:	|  |        |   ori.w #-16,d0
    3570:	|  |        |   addq.w #1,d0
    3572:	|  |        \-> ext.l d0
    3574:	|  |            moveq #12,d2
    3576:	|  |            lsl.l d2,d0
    3578:	|  |            move.l d0,104(sp)
    if( destinationtype == SCREEN)
    357c:	|  |            cmpi.w #1,8(sp)
    3582:	|  |     /----- bne.w 364e <CstScaleSprite+0x86c>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3586:	|  |     |      move.l 1c7d2 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    358e:	|  |     |      moveq #20,d0
    3590:	|  |     |      move.l d0,76(sp)
    3594:	|  |     |      clr.l 72(sp)
    3598:	|  |     |      move.l 1c896 <SysBase>,d0
    359e:	|  |     |      movea.l d0,a6
    35a0:	|  |     |      move.l 76(sp),d0
    35a4:	|  |     |      move.l 72(sp),d1
    35a8:	|  |     |      jsr -684(a6)
    35ac:	|  |     |      move.l d0,68(sp)
    35b0:	|  |     |      move.l 68(sp),d0
    35b4:	|  |     |      move.l d0,1c7d2 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    35ba:	|  |     |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    35c0:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    35c6:	|  |     |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    35cc:	|  |     |      move.w 12(sp),d0
    35d0:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    35d2:	|  |     |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    35d8:	|  |     |      move.w 10(sp),d0
    35dc:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    35e0:	|  |     |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    35e6:	|  |     |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    35ec:	|  |     |      movea.l 144(sp),a0
    35f0:	|  |     |      move.l (a0),d0
    35f2:	|  |     |      movea.l d0,a0
    35f4:	|  |     |      cmpa.w #0,a0
    35f8:	|  |     |  /-- bge.s 35fe <CstScaleSprite+0x81c>
    35fa:	|  |     |  |   lea 15(a0),a0
    35fe:	|  |     |  \-> move.l a0,d0
    3600:	|  |     |      asr.l #4,d0
    3602:	|  |     |      move.l d0,d0
    3604:	|  |     |      add.w 132(sp),d0
    3608:	|  |     |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    360e:	|  |     |      add.w 134(sp),d0
    3612:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3616:	|  |     |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    361c:	|  |     |      move.l 92(sp),d0
    3620:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3624:	|  |     |      move.w 12(sp),d0
    3628:	|  |     |  /-- bpl.s 362e <CstScaleSprite+0x84c>
    362a:	|  |     |  |   addi.w #15,d0
    362e:	|  |     |  \-> asr.w #4,d0
    3630:	|  |     |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    3636:	|  |     |      add.w d0,d0
    3638:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    363c:	|  |     |      movea.l 1c7d2 <CstCleanupQueueDrawBuffer>,a0
    3642:	|  |     |      move.l 100(sp),d0
    3646:	|  |     |      move.w d0,14(a0)
    364a:	|  +-----|----- bra.w 36de <CstScaleSprite+0x8fc>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    364e:	|  |     \----> movea.l 144(sp),a0
    3652:	|  |            move.l (a0),d0
    3654:	|  |            movea.l d0,a0
    3656:	|  |            cmpa.w #0,a0
    365a:	|  |        /-- bge.s 3660 <CstScaleSprite+0x87e>
    365c:	|  |        |   lea 15(a0),a0
    3660:	|  |        \-> move.l a0,d0
    3662:	|  |            asr.l #4,d0
    3664:	|  |            move.l d0,d0
    3666:	|  |            add.w 132(sp),d0
    366a:	|  |            movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3670:	|  |            move.l a0,d1
    3672:	|  |            addq.l #2,d1
    3674:	|  |            move.l d1,1c7da <CstBackDropBufferApplyCursor>
    367a:	|  |            add.w 134(sp),d0
    367e:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3680:	|  |            movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3686:	|  |            move.l a0,d0
    3688:	|  |            addq.l #2,d0
    368a:	|  |            move.l d0,1c7da <CstBackDropBufferApplyCursor>
    3690:	|  |            move.l 92(sp),d0
    3694:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3696:	|  |            move.w 12(sp),d0
    369a:	|  |        /-- bpl.s 36a0 <CstScaleSprite+0x8be>
    369c:	|  |        |   addi.w #15,d0
    36a0:	|  |        \-> asr.w #4,d0
    36a2:	|  |            movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    36a8:	|  |            move.l a0,d1
    36aa:	|  |            addq.l #2,d1
    36ac:	|  |            move.l d1,1c7da <CstBackDropBufferApplyCursor>
    36b2:	|  |            add.w d0,d0
    36b4:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    36b6:	|  |            movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    36bc:	|  |            move.l a0,d0
    36be:	|  |            addq.l #2,d0
    36c0:	|  |            move.l d0,1c7da <CstBackDropBufferApplyCursor>
    36c6:	|  |            move.l 100(sp),d0
    36ca:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    36cc:	|  |            movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    36d2:	|  |            move.l a0,d0
    36d4:	|  |            addq.l #2,d0
    36d6:	|  |            move.l d0,1c7da <CstBackDropBufferApplyCursor>
    36dc:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    36de:	|  \----------> moveq #0,d0
    36e0:	|               move.w 130(sp),d0
    36e4:	|               moveq #0,d1
    36e6:	|               not.w d1
    36e8:	|               asr.l d0,d1
    36ea:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    36ee:	|               moveq #0,d1
    36f0:	|               move.w 132(sp),d1
    36f4:	|               moveq #0,d0
    36f6:	|               move.w 134(sp),d0
    36fa:	|               sub.l d0,d1
    36fc:	|               move.l d1,d0
    36fe:	|               add.w d0,d0
    3700:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    3704:	|               moveq #0,d1
    3706:	|               move.w 132(sp),d1
    370a:	|               moveq #0,d0
    370c:	|               move.w 134(sp),d0
    3710:	|               sub.l d0,d1
    3712:	|               move.l d1,d0
    3714:	|               add.w d0,d0
    3716:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    371a:	|               move.l 1c7ea <winWidth>,d0
    3720:	|               lsr.l #3,d0
    3722:	|               move.l d0,d1
    3724:	|               movea.l 144(sp),a0
    3728:	|               move.l (a0),d0
    372a:	|           /-- bpl.s 372e <CstScaleSprite+0x94c>
    372c:	|           |   addq.l #7,d0
    372e:	|           \-> asr.l #3,d0
    3730:	|               move.l d0,d0
    3732:	|               sub.w d0,d1
    3734:	|               move.w 132(sp),d0
    3738:	|               sub.w 134(sp),d0
    373c:	|               add.w d0,d0
    373e:	|               add.w d1,d0
    3740:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3744:	|               move.l 1c7ea <winWidth>,d0
    374a:	|               lsr.l #3,d0
    374c:	|               move.l d0,d1
    374e:	|               movea.l 144(sp),a0
    3752:	|               move.l (a0),d0
    3754:	|           /-- bpl.s 3758 <CstScaleSprite+0x976>
    3756:	|           |   addq.l #7,d0
    3758:	|           \-> asr.l #3,d0
    375a:	|               move.l d0,d0
    375c:	|               sub.w d0,d1
    375e:	|               move.w 132(sp),d0
    3762:	|               sub.w 134(sp),d0
    3766:	|               add.w d0,d0
    3768:	|               add.w d1,d0
    376a:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    376e:	|               move.l #14675968,22(sp)
  WaitBlit();
    3776:	|               move.l 1c8a2 <GfxBase>,d0
    377c:	|               movea.l d0,a6
    377e:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    3782:	|               movea.l 22(sp),a0
    3786:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    378c:	|               movea.l 22(sp),a0
    3790:	|               move.w 128(sp),70(a0)
  custom->bltamod = bltamod;
    3796:	|               move.w 32(sp),d0
    379a:	|               movea.l 22(sp),a0
    379e:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    37a2:	|               move.w 30(sp),d0
    37a6:	|               movea.l 22(sp),a0
    37aa:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    37ae:	|               move.w 28(sp),d0
    37b2:	|               movea.l 22(sp),a0
    37b6:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    37ba:	|               move.w 26(sp),d0
    37be:	|               movea.l 22(sp),a0
    37c2:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    37c6:	|               move.l 108(sp),d0
    37ca:	|               movea.l 22(sp),a0
    37ce:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    37d2:	|               move.l 104(sp),d0
    37d6:	|               movea.l 22(sp),a0
    37da:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    37de:	|               movea.l 144(sp),a0
    37e2:	|               move.l (a0),d0
    37e4:	|               asr.l #3,d0
    37e6:	|               move.l d0,d1
    37e8:	|               movea.l 144(sp),a0
    37ec:	|               move.l 4(a0),d0
    37f0:	|               move.l d0,d0
    37f2:	|               move.w d1,d2
    37f4:	|               muls.w d0,d2
    37f6:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    37fa:	|               move.l 1c7ea <winWidth>,d0
    3800:	|               lsr.l #3,d0
    3802:	|               move.l d0,d1
    3804:	|               move.l 1c7ee <winHeight>,d0
    380a:	|               move.l d0,d0
    380c:	|               move.w d1,d2
    380e:	|               muls.w d0,d2
    3810:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3814:	|               clr.l 88(sp)
    3818:	|        /----- bra.w 38ac <CstScaleSprite+0xaca>
  {
    custom->bltapt = (APTR) bltapt;
    381c:	|     /--|----> move.l 124(sp),d0
    3820:	|     |  |      movea.l 22(sp),a0
    3824:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    3828:	|     |  |      move.l 120(sp),d0
    382c:	|     |  |      movea.l 22(sp),a0
    3830:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    3834:	|     |  |      move.l 116(sp),d0
    3838:	|     |  |      movea.l 22(sp),a0
    383c:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    3840:	|     |  |      move.l 112(sp),d0
    3844:	|     |  |      movea.l 22(sp),a0
    3848:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    384c:	|     |  |      move.l 92(sp),d0
    3850:	|     |  |      move.w d0,d1
    3852:	|     |  |      lsl.w #6,d1
    3854:	|     |  |      movea.l 144(sp),a0
    3858:	|     |  |      move.l (a0),d0
    385a:	|     |  |      movea.l d0,a0
    385c:	|     |  |      cmpa.w #0,a0
    3860:	|     |  |  /-- bge.s 3866 <CstScaleSprite+0xa84>
    3862:	|     |  |  |   lea 15(a0),a0
    3866:	|     |  |  \-> move.l a0,d0
    3868:	|     |  |      asr.l #4,d0
    386a:	|     |  |      move.l d0,d0
    386c:	|     |  |      add.w d1,d0
    386e:	|     |  |      sub.w 132(sp),d0
    3872:	|     |  |      add.w 134(sp),d0
    3876:	|     |  |      movea.l 22(sp),a0
    387a:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    387e:	|     |  |      moveq #0,d0
    3880:	|     |  |      move.w 20(sp),d0
    3884:	|     |  |      add.l d0,120(sp)
    bltcpt += bltcptplus;
    3888:	|     |  |      moveq #0,d0
    388a:	|     |  |      move.w 18(sp),d0
    388e:	|     |  |      add.l d0,116(sp)
    bltdpt += bltcptplus;
    3892:	|     |  |      moveq #0,d0
    3894:	|     |  |      move.w 18(sp),d0
    3898:	|     |  |      add.l d0,112(sp)
    WaitBlit();
    389c:	|     |  |      move.l 1c8a2 <GfxBase>,d0
    38a2:	|     |  |      movea.l d0,a6
    38a4:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    38a8:	|     |  |      addq.l #1,88(sp)
    38ac:	|     |  \----> moveq #4,d0
    38ae:	|     |         cmp.l 88(sp),d0
    38b2:	|     \-------- bge.w 381c <CstScaleSprite+0xa3a>
  }   

  FreeVec(mask);
    38b6:	|               move.l 84(sp),14(sp)
    38bc:	|               move.l 1c896 <SysBase>,d0
    38c2:	|               movea.l d0,a6
    38c4:	|               movea.l 14(sp),a1
    38c8:	|               jsr -690(a6)
}
    38cc:	\-------------> move.l (sp)+,d2
    38ce:	                movea.l (sp)+,a6
    38d0:	                lea 132(sp),sp
    38d4:	                rts

000038d6 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    38d6:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    38d8:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    38de:	move.l 8(sp),d0
    38e2:	movea.l (sp),a0
    38e4:	move.l d0,128(a0)
}
    38e8:	nop
    38ea:	addq.l #4,sp
    38ec:	rts

000038ee <CstSwapBuffer>:

void CstSwapBuffer( ) {
    38ee:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    38f2:	move.l 1c7c6 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    38fa:	move.l 1c7ca <CstDrawBuffer>,d0
    3900:	move.l d0,1c7c6 <CstViewBuffer>
  CstDrawBuffer = tmp;
    3906:	move.l 16(sp),1c7ca <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    390e:	move.l 1c7ce <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3916:	move.l 1c7d2 <CstCleanupQueueDrawBuffer>,d0
    391c:	move.l d0,1c7ce <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3922:	move.l 12(sp),1c7d2 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    392a:	move.l 1c7c0 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3932:	move.l 1c7c6 <CstViewBuffer>,d0
    3938:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    393c:	move.l 4(sp),d0
    3940:	clr.w d0
    3942:	swap d0
    3944:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3948:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    394c:	movea.w #118,a0
    3950:	adda.l 8(sp),a0
    3954:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3956:	movea.w #114,a0
    395a:	adda.l 8(sp),a0
    395e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3962:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    396a:	move.l 4(sp),d0
    396e:	clr.w d0
    3970:	swap d0
    3972:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3976:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    397a:	movea.w #126,a0
    397e:	adda.l 8(sp),a0
    3982:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3984:	movea.w #122,a0
    3988:	adda.l 8(sp),a0
    398c:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3990:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3998:	move.l 4(sp),d0
    399c:	clr.w d0
    399e:	swap d0
    39a0:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39a4:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    39a8:	movea.l 8(sp),a0
    39ac:	lea 134(a0),a0
    39b0:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    39b2:	movea.l 8(sp),a0
    39b6:	lea 130(a0),a0
    39ba:	move.w 2(sp),(a0)

  ptr +=  40*256;
    39be:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39c6:	move.l 4(sp),d0
    39ca:	clr.w d0
    39cc:	swap d0
    39ce:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39d2:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    39d6:	movea.l 8(sp),a0
    39da:	lea 142(a0),a0
    39de:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    39e0:	movea.l 8(sp),a0
    39e4:	lea 138(a0),a0
    39e8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    39ec:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39f4:	move.l 4(sp),d0
    39f8:	clr.w d0
    39fa:	swap d0
    39fc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a00:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3a04:	movea.l 8(sp),a0
    3a08:	lea 150(a0),a0
    3a0c:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3a0e:	movea.l 8(sp),a0
    3a12:	lea 146(a0),a0
    3a16:	move.w 2(sp),(a0)

}
    3a1a:	nop
    3a1c:	lea 20(sp),sp
    3a20:	rts

00003a22 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3a22:	          lea -56(sp),sp
    3a26:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3a28:	          pea 17fd0 <PutChar+0x34c>
    3a2e:	          jsr 171b0 <KPrintF>
    3a34:	          addq.l #4,sp

  width = width / 8;
    3a36:	          move.l 64(sp),d0
    3a3a:	      /-- bpl.s 3a3e <CstReserveBackdrop+0x1c>
    3a3c:	      |   addq.l #7,d0
    3a3e:	      \-> asr.l #3,d0
    3a40:	          move.l d0,64(sp)

  if( width < 40) 
    3a44:	          moveq #39,d0
    3a46:	          cmp.l 64(sp),d0
    3a4a:	      /-- blt.s 3a60 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3a4c:	      |   pea 17fea <PutChar+0x366>
    3a52:	      |   jsr 171b0 <KPrintF>
    3a58:	      |   addq.l #4,sp
    return FALSE;
    3a5a:	      |   clr.w d0
    3a5c:	/-----|-- bra.w 3da2 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3a60:	|     \-> pea 18028 <PutChar+0x3a4>
    3a66:	|         jsr 171b0 <KPrintF>
    3a6c:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3a6e:	|         move.l 64(sp),-(sp)
    3a72:	|         jsr fce <CstCreateCopperlist>
    3a78:	|         addq.l #4,sp
    3a7a:	|         move.l d0,1c7c0 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3a80:	|         pea 18048 <PutChar+0x3c4>
    3a86:	|         jsr 171b0 <KPrintF>
    3a8c:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3a8e:	|         move.l 64(sp),d1
    3a92:	|         move.l 68(sp),d0
    3a96:	|         muls.w d1,d0
    3a98:	|         move.w d0,1c7b6 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3a9e:	|         move.w 1c7b6 <CstBackdropSizePlane>,d1
    3aa4:	|         move.w d1,d0
    3aa6:	|         add.w d0,d0
    3aa8:	|         add.w d0,d0
    3aaa:	|         add.w d1,d0
    3aac:	|         move.w d0,1c7b4 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3ab2:	|         move.w 1c7b4 <CstBackdropSize>,d0
    3ab8:	|         move.w d0,d0
    3aba:	|         andi.l #65535,d0
    3ac0:	|         move.l d0,48(sp)
    3ac4:	|         moveq #2,d1
    3ac6:	|         move.l d1,44(sp)
    3aca:	|         move.l 1c896 <SysBase>,d0
    3ad0:	|         movea.l d0,a6
    3ad2:	|         move.l 48(sp),d0
    3ad6:	|         move.l 44(sp),d1
    3ada:	|         jsr -684(a6)
    3ade:	|         move.l d0,40(sp)
    3ae2:	|         move.l 40(sp),d0
    3ae6:	|         move.l d0,1c7b8 <CstBackDrop>
  if( !CstBackDrop)
    3aec:	|         move.l 1c7b8 <CstBackDrop>,d0
    3af2:	|     /-- bne.s 3b08 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3af4:	|     |   pea 1806f <PutChar+0x3eb>
    3afa:	|     |   jsr 171b0 <KPrintF>
    3b00:	|     |   addq.l #4,sp
    return FALSE;  
    3b02:	|     |   clr.w d0
    3b04:	+-----|-- bra.w 3da2 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3b08:	|     \-> pea 180a7 <PutChar+0x423>
    3b0e:	|         jsr 171b0 <KPrintF>
    3b14:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3b16:	|         move.l 1c7b8 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3b1e:	|         clr.l 52(sp)
    3b22:	|     /-- bra.s 3b38 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3b24:	|  /--|-> move.l 56(sp),d0
    3b28:	|  |  |   move.l d0,d1
    3b2a:	|  |  |   addq.l #4,d1
    3b2c:	|  |  |   move.l d1,56(sp)
    3b30:	|  |  |   movea.l d0,a0
    3b32:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3b34:	|  |  |   addq.l #1,52(sp)
    3b38:	|  |  \-> move.w 1c7b4 <CstBackdropSize>,d0
    3b3e:	|  |      lsr.w #2,d0
    3b40:	|  |      move.w d0,d0
    3b42:	|  |      andi.l #65535,d0
    3b48:	|  |      cmp.l 52(sp),d0
    3b4c:	|  \----- bgt.s 3b24 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3b4e:	|         move.w 1c7b4 <CstBackdropSize>,d0
    3b54:	|         move.w d0,d0
    3b56:	|         andi.l #65535,d0
    3b5c:	|         move.l 64(sp),d1
    3b60:	|         add.l d1,d1
    3b62:	|         add.l d1,d0
    3b64:	|         move.l d0,36(sp)
    3b68:	|         moveq #2,d0
    3b6a:	|         move.l d0,32(sp)
    3b6e:	|         move.l 1c896 <SysBase>,d0
    3b74:	|         movea.l d0,a6
    3b76:	|         move.l 36(sp),d0
    3b7a:	|         move.l 32(sp),d1
    3b7e:	|         jsr -684(a6)
    3b82:	|         move.l d0,28(sp)
    3b86:	|         move.l 28(sp),d0
    3b8a:	|         move.l d0,1c7ca <CstDrawBuffer>
  if( !CstDrawBuffer)
    3b90:	|         move.l 1c7ca <CstDrawBuffer>,d0
    3b96:	|     /-- bne.s 3bac <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3b98:	|     |   pea 180cd <PutChar+0x449>
    3b9e:	|     |   jsr 171b0 <KPrintF>
    3ba4:	|     |   addq.l #4,sp
    return FALSE;  
    3ba6:	|     |   clr.w d0
    3ba8:	+-----|-- bra.w 3da2 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3bac:	|     \-> pea 18107 <PutChar+0x483>
    3bb2:	|         jsr 171b0 <KPrintF>
    3bb8:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3bba:	|         move.l #10000,24(sp)
    3bc2:	|         clr.l 20(sp)
    3bc6:	|         move.l 1c896 <SysBase>,d0
    3bcc:	|         movea.l d0,a6
    3bce:	|         move.l 24(sp),d0
    3bd2:	|         move.l 20(sp),d1
    3bd6:	|         jsr -684(a6)
    3bda:	|         move.l d0,16(sp)
    3bde:	|         move.l 16(sp),d0
    3be2:	|         move.l d0,1c7d6 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3be8:	|         move.l 1c7d6 <CstBackDropBufferApplyStart>,d0
    3bee:	|     /-- bne.s 3c04 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3bf0:	|     |   pea 1812f <PutChar+0x4ab>
    3bf6:	|     |   jsr 171b0 <KPrintF>
    3bfc:	|     |   addq.l #4,sp
    return FALSE;  
    3bfe:	|     |   clr.w d0
    3c00:	+-----|-- bra.w 3da2 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3c04:	|     \-> move.l 1c7d6 <CstBackDropBufferApplyStart>,d0
    3c0a:	|         move.l d0,1c7da <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3c10:	|         movea.l 1c7d6 <CstBackDropBufferApplyStart>,a0
    3c16:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3c18:	|         movea.l 1c7d6 <CstBackDropBufferApplyStart>,a0
    3c1e:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3c20:	|         move.w 1c7b4 <CstBackdropSize>,d0
    3c26:	|         move.w d0,d0
    3c28:	|         andi.l #65535,d0
    3c2e:	|         move.l 64(sp),d1
    3c32:	|         add.l d1,d1
    3c34:	|         add.l d1,d0
    3c36:	|         move.l d0,12(sp)
    3c3a:	|         moveq #2,d1
    3c3c:	|         move.l d1,8(sp)
    3c40:	|         move.l 1c896 <SysBase>,d0
    3c46:	|         movea.l d0,a6
    3c48:	|         move.l 12(sp),d0
    3c4c:	|         move.l 8(sp),d1
    3c50:	|         jsr -684(a6)
    3c54:	|         move.l d0,4(sp)
    3c58:	|         move.l 4(sp),d0
    3c5c:	|         move.l d0,1c7c6 <CstViewBuffer>
  if( !CstViewBuffer)
    3c62:	|         move.l 1c7c6 <CstViewBuffer>,d0
    3c68:	|     /-- bne.s 3c7e <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3c6a:	|     |   pea 1817a <PutChar+0x4f6>
    3c70:	|     |   jsr 171b0 <KPrintF>
    3c76:	|     |   addq.l #4,sp
    return FALSE;  
    3c78:	|     |   clr.w d0
    3c7a:	+-----|-- bra.w 3da2 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3c7e:	|     \-> pea 181b4 <PutChar+0x530>
    3c84:	|         jsr 171b0 <KPrintF>
    3c8a:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3c8c:	|         move.l 1c7ca <CstDrawBuffer>,d1
    3c92:	|         move.l 64(sp),d0
    3c96:	|     /-- bpl.s 3c9a <CstReserveBackdrop+0x278>
    3c98:	|     |   addq.l #3,d0
    3c9a:	|     \-> asr.l #2,d0
    3c9c:	|         add.l d0,d0
    3c9e:	|         add.l d0,d0
    3ca0:	|         add.l d1,d0
    3ca2:	|         move.l d0,1c7ca <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3ca8:	|         move.l 1c7c6 <CstViewBuffer>,d1
    3cae:	|         move.l 64(sp),d0
    3cb2:	|     /-- bpl.s 3cb6 <CstReserveBackdrop+0x294>
    3cb4:	|     |   addq.l #3,d0
    3cb6:	|     \-> asr.l #2,d0
    3cb8:	|         add.l d0,d0
    3cba:	|         add.l d0,d0
    3cbc:	|         add.l d1,d0
    3cbe:	|         move.l d0,1c7c6 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3cc4:	|         move.l 1c7b8 <CstBackDrop>,d0
    3cca:	|         clr.l -(sp)
    3ccc:	|         pea 5 <_start+0x5>
    3cd0:	|         pea 100 <copyString+0x48>
    3cd4:	|         pea 140 <decodeFilename+0x28>
    3cd8:	|         pea 181dc <PutChar+0x558>
    3cde:	|         move.l d0,-(sp)
    3ce0:	|         jsr 17298 <debug_register_bitmap>
    3ce6:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3cea:	|         move.l 68(sp),d0
    3cee:	|         movea.w d0,a1
    3cf0:	|         move.l 64(sp),d0
    3cf4:	|         lsl.w #3,d0
    3cf6:	|         movea.w d0,a0
    3cf8:	|         move.l 1c7ca <CstDrawBuffer>,d0
    3cfe:	|         clr.l -(sp)
    3d00:	|         pea 5 <_start+0x5>
    3d04:	|         move.l a1,-(sp)
    3d06:	|         move.l a0,-(sp)
    3d08:	|         pea 181ec <PutChar+0x568>
    3d0e:	|         move.l d0,-(sp)
    3d10:	|         jsr 17298 <debug_register_bitmap>
    3d16:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3d1a:	|         move.l 68(sp),d0
    3d1e:	|         movea.w d0,a1
    3d20:	|         move.l 64(sp),d0
    3d24:	|         lsl.w #3,d0
    3d26:	|         movea.w d0,a0
    3d28:	|         move.l 1c7c6 <CstViewBuffer>,d0
    3d2e:	|         clr.l -(sp)
    3d30:	|         pea 5 <_start+0x5>
    3d34:	|         move.l a1,-(sp)
    3d36:	|         move.l a0,-(sp)
    3d38:	|         pea 181fb <PutChar+0x577>
    3d3e:	|         move.l d0,-(sp)
    3d40:	|         jsr 17298 <debug_register_bitmap>
    3d46:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3d4a:	|         move.l 1c7c0 <CstCopperList>,d0
    3d50:	|     /-- beq.s 3d62 <CstReserveBackdrop+0x340>
    3d52:	|     |   move.l 1c7ca <CstDrawBuffer>,d0
    3d58:	|     +-- beq.s 3d62 <CstReserveBackdrop+0x340>
    3d5a:	|     |   move.l 1c7c6 <CstViewBuffer>,d0
    3d60:	|  /--|-- bne.s 3d74 <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3d62:	|  |  \-> pea 1820a <PutChar+0x586>
    3d68:	|  |      jsr 171b0 <KPrintF>
    3d6e:	|  |      addq.l #4,sp
    return FALSE;
    3d70:	|  |      clr.w d0
    3d72:	+--|----- bra.s 3da2 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3d74:	|  \----> pea 18237 <PutChar+0x5b3>
    3d7a:	|         jsr 171b0 <KPrintF>
    3d80:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3d82:	|         move.l 1c7c0 <CstCopperList>,d0
    3d88:	|         move.l d0,-(sp)
    3d8a:	|         jsr 38d6 <CstSetCl>
    3d90:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3d92:	|         pea 1825e <PutChar+0x5da>
    3d98:	|         jsr 171b0 <KPrintF>
    3d9e:	|         addq.l #4,sp
  return TRUE;
    3da0:	|         moveq #1,d0

}
    3da2:	\-------> movea.l (sp)+,a6
    3da4:	          lea 56(sp),sp
    3da8:	          rts

00003daa <CstUnfreeze>:

void CstUnfreeze() {
    3daa:	       lea -24(sp),sp
    3dae:	       move.l a6,-(sp)
    3db0:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3db2:	       pea 18281 <PutChar+0x5fd>
    3db8:	       jsr 171b0 <KPrintF>
    3dbe:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3dc0:	       move.l 1c7ea <winWidth>,d0
    3dc6:	       lsr.l #3,d0
    3dc8:	       move.l d0,d1
    3dca:	       move.l 1c7ee <winHeight>,d0
    3dd0:	       move.l d0,d0
    3dd2:	       muls.w d0,d1
    3dd4:	       move.w d1,d0
    3dd6:	       add.w d0,d0
    3dd8:	       add.w d0,d0
    3dda:	       move.w d0,d2
    3ddc:	       add.w d1,d2
    3dde:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3de2:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3dea:	       move.l 1c7ee <winHeight>,d0
    3df0:	       move.l d0,d0
    3df2:	       movea.w d0,a1
    3df4:	       move.l 1c7ea <winWidth>,d0
    3dfa:	       move.l d0,d0
    3dfc:	       movea.w d0,a0
    3dfe:	       move.l 1c7bc <CstBackDropBackup>,d0
    3e04:	       clr.l -(sp)
    3e06:	       pea 5 <_start+0x5>
    3e0a:	       move.l a1,-(sp)
    3e0c:	       move.l a0,-(sp)
    3e0e:	       pea 17e53 <PutChar+0x1cf>
    3e14:	       move.l d0,-(sp)
    3e16:	       jsr 17298 <debug_register_bitmap>
    3e1c:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3e20:	       move.l 1c7bc <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3e28:	       move.l 1c7b8 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3e30:	       clr.l 20(sp)
    3e34:	   /-- bra.s 3e5a <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3e36:	/--|-> move.l 28(sp),d1
    3e3a:	|  |   move.l d1,d0
    3e3c:	|  |   addq.l #4,d0
    3e3e:	|  |   move.l d0,28(sp)
    3e42:	|  |   move.l 24(sp),d0
    3e46:	|  |   move.l d0,d2
    3e48:	|  |   addq.l #4,d2
    3e4a:	|  |   move.l d2,24(sp)
    3e4e:	|  |   movea.l d1,a0
    3e50:	|  |   move.l (a0),d1
    3e52:	|  |   movea.l d0,a0
    3e54:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3e56:	|  |   addq.l #1,20(sp)
    3e5a:	|  \-> move.w 18(sp),d0
    3e5e:	|      lsr.w #2,d0
    3e60:	|      move.w d0,d0
    3e62:	|      andi.l #65535,d0
    3e68:	|      cmp.l 20(sp),d0
    3e6c:	\----- bgt.s 3e36 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3e6e:	       move.w #2,1c7c4 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3e76:	       move.l 1c7ea <winWidth>,d0
    3e7c:	       lsr.l #4,d0
    3e7e:	       movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3e84:	       move.l a0,d1
    3e86:	       addq.l #2,d1
    3e88:	       move.l d1,1c7da <CstBackDropBufferApplyCursor>
    3e8e:	       move.l d0,d0
    3e90:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3e92:	       move.l 1c7ee <winHeight>,d0
    3e98:	       movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3e9e:	       move.l a0,d1
    3ea0:	       addq.l #2,d1
    3ea2:	       move.l d1,1c7da <CstBackDropBufferApplyCursor>
    3ea8:	       move.l d0,d0
    3eaa:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3eac:	       movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3eb2:	       move.l a0,d0
    3eb4:	       addq.l #2,d0
    3eb6:	       move.l d0,1c7da <CstBackDropBufferApplyCursor>
    3ebc:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3ebe:	       movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3ec4:	       move.l a0,d0
    3ec6:	       addq.l #2,d0
    3ec8:	       move.l d0,1c7da <CstBackDropBufferApplyCursor>
    3ece:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3ed0:	       movea.l 1c7da <CstBackDropBufferApplyCursor>,a0
    3ed6:	       move.l a0,d0
    3ed8:	       addq.l #2,d0
    3eda:	       move.l d0,1c7da <CstBackDropBufferApplyCursor>
    3ee0:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3ee2:	       move.l 1c7bc <CstBackDropBackup>,d0
    3ee8:	   /-- bne.s 3f02 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3eea:	   |   move.l 1c7bc <CstBackDropBackup>,10(sp)
    3ef2:	   |   move.l 1c896 <SysBase>,d0
    3ef8:	   |   movea.l d0,a6
    3efa:	   |   movea.l 10(sp),a1
    3efe:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3f02:	   \-> pea 17e62 <PutChar+0x1de>
    3f08:	       jsr 171b0 <KPrintF>
    3f0e:	       addq.l #4,sp

}
    3f10:	       nop
    3f12:	       move.l (sp)+,d2
    3f14:	       movea.l (sp)+,a6
    3f16:	       lea 24(sp),sp
    3f1a:	       rts

00003f1c <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3f1c:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3f20:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3f24:	       tst.l 24(sp)
    3f28:	   /-- bge.s 3f2e <drawLine+0x12>
    3f2a:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3f2e:	   \-> tst.l 28(sp)
    3f32:	   /-- bge.s 3f38 <drawLine+0x1c>
    3f34:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3f38:	   \-> tst.l 32(sp)
    3f3c:	   /-- bge.s 3f42 <drawLine+0x26>
    3f3e:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3f42:	   \-> tst.l 36(sp)
    3f46:	   /-- bge.s 3f4c <drawLine+0x30>
    3f48:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3f4c:	   \-> move.l 1c932 <sceneWidth>,d0
    3f52:	       cmp.l 24(sp),d0
    3f56:	   /-- bge.s 3f66 <drawLine+0x4a>
    3f58:	   |   move.l 1c932 <sceneWidth>,d0
    3f5e:	   |   move.l d0,d1
    3f60:	   |   subq.l #1,d1
    3f62:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3f66:	   \-> move.l 1c932 <sceneWidth>,d0
    3f6c:	       cmp.l 32(sp),d0
    3f70:	   /-- bge.s 3f80 <drawLine+0x64>
    3f72:	   |   move.l 1c932 <sceneWidth>,d0
    3f78:	   |   move.l d0,d1
    3f7a:	   |   subq.l #1,d1
    3f7c:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3f80:	   \-> move.l 1c936 <sceneHeight>,d0
    3f86:	       cmp.l 28(sp),d0
    3f8a:	   /-- bge.s 3f9a <drawLine+0x7e>
    3f8c:	   |   move.l 1c936 <sceneHeight>,d0
    3f92:	   |   move.l d0,d1
    3f94:	   |   subq.l #1,d1
    3f96:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3f9a:	   \-> move.l 1c936 <sceneHeight>,d0
    3fa0:	       cmp.l 36(sp),d0
    3fa4:	   /-- bge.s 3fb4 <drawLine+0x98>
    3fa6:	   |   move.l 1c936 <sceneHeight>,d0
    3fac:	   |   move.l d0,d1
    3fae:	   |   subq.l #1,d1
    3fb0:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3fb4:	   \-> move.l 24(sp),d0
    3fb8:	       cmp.l 32(sp),d0
    3fbc:	/----- ble.s 3fd8 <drawLine+0xbc>
		x = x2; 
    3fbe:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3fc4:	|      tst.w 10(sp)
    3fc8:	|      seq d0
    3fca:	|      neg.b d0
    3fcc:	|      move.b d0,d0
    3fce:	|      andi.w #255,d0
    3fd2:	|      move.w d0,10(sp)
    3fd6:	|  /-- bra.s 3fde <drawLine+0xc2>
	} else x = x1;
    3fd8:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3fde:	   \-> move.l 28(sp),d1
    3fe2:	       cmp.l 36(sp),d1
    3fe6:	/----- ble.s 4002 <drawLine+0xe6>
		y = y2; 
    3fe8:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3fee:	|      tst.w 10(sp)
    3ff2:	|      seq d0
    3ff4:	|      neg.b d0
    3ff6:	|      move.b d0,d0
    3ff8:	|      andi.w #255,d0
    3ffc:	|      move.w d0,10(sp)
    4000:	|  /-- bra.s 4008 <drawLine+0xec>
	} else y = y1;	
    4002:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4008:	   \-> move.l 32(sp),d0
    400c:	       sub.l 24(sp),d0
    4010:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4014:	       move.l 6(sp),d0
    4018:	   /-- bpl.s 401c <drawLine+0x100>
    401a:	   |   neg.l d0
    401c:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4020:	       move.l 36(sp),d1
    4024:	       sub.l 28(sp),d1
    4028:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    402c:	       move.l 2(sp),d0
    4030:	   /-- bpl.s 4034 <drawLine+0x118>
    4032:	   |   neg.l d0
    4034:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    4038:	       tst.l 6(sp)
    403c:	   /-- bne.s 4060 <drawLine+0x144>
		diffX = 1;
    403e:	   |   moveq #1,d0
    4040:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4044:	   |   move.l 1c932 <sceneWidth>,d0
    404a:	   |   subq.l #1,d0
    404c:	   |   cmp.l 16(sp),d0
    4050:	   +-- bne.s 4060 <drawLine+0x144>
    4052:	   |   move.l 1c932 <sceneWidth>,d0
    4058:	   |   move.l d0,d1
    405a:	   |   subq.l #2,d1
    405c:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4060:	   \-> tst.l 2(sp)
    4064:	   /-- bne.s 4088 <drawLine+0x16c>
		diffY = 1;
    4066:	   |   moveq #1,d0
    4068:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    406c:	   |   move.l 1c936 <sceneHeight>,d0
    4072:	   |   subq.l #1,d0
    4074:	   |   cmp.l 12(sp),d0
    4078:	   +-- bne.s 4088 <drawLine+0x16c>
    407a:	   |   move.l 1c936 <sceneHeight>,d0
    4080:	   |   move.l d0,d1
    4082:	   |   subq.l #2,d1
    4084:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4088:	   \-> pea 182ac <PutChar+0x628>
    408e:	       jsr 171b0 <KPrintF>
    4094:	       addq.l #4,sp
	
}
    4096:	       nop
    4098:	       lea 20(sp),sp
    409c:	       rts

0000409e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    409e:	                      lea -24(sp),sp
    40a2:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    40a4:	                      move.l 1c7f2 <firstTexture>,d0
    40aa:	/-------------------- beq.w 4188 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    40ae:	|                     clr.l 24(sp)
    40b2:	|     /-------------- bra.w 417c <deleteTextures+0xde>
			BOOL found = FALSE;
    40b6:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    40ba:	|  |  |               move.l 1c7f2 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    40c2:	|  |  |               movea.l 20(sp),a0
    40c6:	|  |  |               move.l (a0),d1
    40c8:	|  |  |               move.l 24(sp),d0
    40cc:	|  |  |               add.l d0,d0
    40ce:	|  |  |               add.l d0,d0
    40d0:	|  |  |               movea.l 36(sp),a0
    40d4:	|  |  |               adda.l d0,a0
    40d6:	|  |  |               move.l (a0),d0
    40d8:	|  |  |               cmp.l d1,d0
    40da:	|  |  |  /----------- bne.w 416e <deleteTextures+0xd0>
				found = TRUE;
    40de:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    40e4:	|  |  |  |            movea.l 20(sp),a0
    40e8:	|  |  |  |            move.l 12(a0),d0
    40ec:	|  |  |  |            move.l d0,1c7f2 <firstTexture>
				FreeVec(list);
    40f2:	|  |  |  |            move.l 20(sp),6(sp)
    40f8:	|  |  |  |            move.l 1c896 <SysBase>,d0
    40fe:	|  |  |  |            movea.l d0,a6
    4100:	|  |  |  |            movea.l 6(sp),a1
    4104:	|  |  |  |            jsr -690(a6)
				continue;
    4108:	|  |  |  |  /-------- bra.s 4178 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    410a:	|  |  |  |  |  /----> movea.l 20(sp),a0
    410e:	|  |  |  |  |  |      movea.l 12(a0),a0
    4112:	|  |  |  |  |  |      move.l (a0),d1
    4114:	|  |  |  |  |  |      move.l 24(sp),d0
    4118:	|  |  |  |  |  |      add.l d0,d0
    411a:	|  |  |  |  |  |      add.l d0,d0
    411c:	|  |  |  |  |  |      movea.l 36(sp),a0
    4120:	|  |  |  |  |  |      adda.l d0,a0
    4122:	|  |  |  |  |  |      move.l (a0),d0
    4124:	|  |  |  |  |  |      cmp.l d1,d0
    4126:	|  |  |  |  |  |  /-- bne.s 4164 <deleteTextures+0xc6>
					found = TRUE;
    4128:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    412e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4132:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4138:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    413c:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4140:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4144:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4148:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    414c:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4152:	|  |  |  |  |  |  |   move.l 1c896 <SysBase>,d0
    4158:	|  |  |  |  |  |  |   movea.l d0,a6
    415a:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    415e:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4162:	|  |  |  |  +--|--|-- bra.s 4178 <deleteTextures+0xda>
				}
				list = list->next;
    4164:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    4168:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    416e:	|  |  |  \--|--|----> movea.l 20(sp),a0
    4172:	|  |  |     |  |      move.l 12(a0),d0
    4176:	|  |  |     |  \----- bne.s 410a <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4178:	|  |  |     \-------> addq.l #1,24(sp)
    417c:	|  |  \-------------> move.l 24(sp),d0
    4180:	|  |                  cmp.l 32(sp),d0
    4184:	|  \----------------- bcs.w 40b6 <deleteTextures+0x18>
			}
		}
	}
}
    4188:	\-------------------> nop
    418a:	                      movea.l (sp)+,a6
    418c:	                      lea 24(sp),sp
    4190:	                      rts

00004192 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4192:	subq.l #4,sp
    4194:	move.l 8(sp),d0
    4198:	move.w d0,d0
    419a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    419e:	pea 182cf <PutChar+0x64b>
    41a4:	jsr 171b0 <KPrintF>
    41aa:	addq.l #4,sp
}
    41ac:	nop
    41ae:	addq.l #4,sp
    41b0:	rts

000041b2 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    41b2:	       moveq #-1,d0
    41b4:	       cmp.l 4(sp),d0
    41b8:	   /-- bne.s 41be <resourceNameFromNum+0xc>
    41ba:	   |   moveq #0,d0
    41bc:	/--|-- bra.s 41f6 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    41be:	|  \-> move.l 1c872 <numResourceNames>,d0
    41c4:	|  /-- bne.s 41ce <resourceNameFromNum+0x1c>
    41c6:	|  |   move.l #99071,d0
    41cc:	+--|-- bra.s 41f6 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    41ce:	|  \-> move.l 1c872 <numResourceNames>,d0
    41d4:	|      cmp.l 4(sp),d0
    41d8:	|  /-- ble.s 41f0 <resourceNameFromNum+0x3e>
    41da:	|  |   move.l 1c82a <allResourceNames>,d1
    41e0:	|  |   move.l 4(sp),d0
    41e4:	|  |   add.l d0,d0
    41e6:	|  |   add.l d0,d0
    41e8:	|  |   movea.l d1,a0
    41ea:	|  |   adda.l d0,a0
    41ec:	|  |   move.l (a0),d0
    41ee:	+--|-- bra.s 41f6 <resourceNameFromNum+0x44>
	return "Unknown resource";
    41f0:	|  \-> move.l #99080,d0
    41f6:	\----> rts

000041f8 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    41f8:	          lea -44(sp),sp
    41fc:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4200:	          move.l #320,1c7ea <winWidth>
    winHeight = 256;
    420a:	          move.l #256,1c7ee <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4214:	          tst.l 60(sp)
    4218:	      /-- bne.s 4230 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    421a:	      |   pea 18319 <PutChar+0x695>
    4220:	      |   jsr b8 <copyString>
    4226:	      |   addq.l #4,sp
    4228:	      |   move.l d0,1c802 <bundleFolder>
    422e:	   /--|-- bra.s 4246 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4230:	   |  \-> movea.l 64(sp),a0
    4234:	   |      move.l (a0),d0
    4236:	   |      move.l d0,-(sp)
    4238:	   |      jsr b8 <copyString>
    423e:	   |      addq.l #4,sp
    4240:	   |      move.l d0,1c802 <bundleFolder>
	}
    
	int lastSlash = -1;
    4246:	   \----> moveq #-1,d0
    4248:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    424c:	          clr.l 44(sp)
    4250:	   /----- bra.s 4272 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4252:	/--|----> move.l 1c802 <bundleFolder>,d1
    4258:	|  |      move.l 44(sp),d0
    425c:	|  |      movea.l d1,a0
    425e:	|  |      adda.l d0,a0
    4260:	|  |      move.b (a0),d0
    4262:	|  |      cmpi.b #47,d0
    4266:	|  |  /-- bne.s 426e <main_sludge+0x76>
    4268:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    426e:	|  |  \-> addq.l #1,44(sp)
    4272:	|  \----> move.l 1c802 <bundleFolder>,d1
    4278:	|         move.l 44(sp),d0
    427c:	|         movea.l d1,a0
    427e:	|         adda.l d0,a0
    4280:	|         move.b (a0),d0
    4282:	\-------- bne.s 4252 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4284:	          move.l 1c802 <bundleFolder>,d0
    428a:	          move.l 48(sp),d1
    428e:	          addq.l #1,d1
    4290:	          movea.l d0,a0
    4292:	          adda.l d1,a0
    4294:	          clr.b (a0)

	if (argc > 1) {
    4296:	          moveq #1,d0
    4298:	          cmp.l 60(sp),d0
    429c:	      /-- bge.s 42b8 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    429e:	      |   move.l 60(sp),d0
    42a2:	      |   addi.l #1073741823,d0
    42a8:	      |   add.l d0,d0
    42aa:	      |   add.l d0,d0
    42ac:	      |   movea.l 64(sp),a0
    42b0:	      |   adda.l d0,a0
    42b2:	      |   move.l (a0),52(sp)
    42b6:	   /--|-- bra.s 4312 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    42b8:	   |  \-> move.l 1c802 <bundleFolder>,d0
    42be:	   |      pea 1831f <PutChar+0x69b>
    42c4:	   |      move.l d0,-(sp)
    42c6:	   |      jsr 13cb4 <joinStrings>
    42cc:	   |      addq.l #8,sp
    42ce:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    42d2:	   |      move.l 52(sp),-(sp)
    42d6:	   |      jsr 13bae <fileExists>
    42dc:	   |      addq.l #4,sp
    42de:	   |      tst.b d0
    42e0:	   +----- bne.s 4312 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    42e2:	   |      move.l 52(sp),40(sp)
    42e8:	   |      move.l 1c896 <SysBase>,d0
    42ee:	   |      movea.l d0,a6
    42f0:	   |      movea.l 40(sp),a1
    42f4:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    42f8:	   |      move.l 1c802 <bundleFolder>,d0
    42fe:	   |      pea 1832c <PutChar+0x6a8>
    4304:	   |      move.l d0,-(sp)
    4306:	   |      jsr 13cb4 <joinStrings>
    430c:	   |      addq.l #8,sp
    430e:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4312:	   \----> pea 18335 <PutChar+0x6b1>
    4318:	          jsr 171b0 <KPrintF>
    431e:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4320:	          move.l 52(sp),-(sp)
    4324:	          jsr 13bae <fileExists>
    432a:	          addq.l #4,sp
    432c:	          tst.b d0
    432e:	      /-- bne.s 4386 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4330:	      |   move.l 1c89e <DOSBase>,d0
    4336:	      |   movea.l d0,a6
    4338:	      |   jsr -60(a6)
    433c:	      |   move.l d0,28(sp)
    4340:	      |   move.l 28(sp),d0
    4344:	      |   move.l d0,24(sp)
    4348:	      |   move.l #99125,20(sp)
    4350:	      |   moveq #21,d0
    4352:	      |   move.l d0,16(sp)
    4356:	      |   move.l 1c89e <DOSBase>,d0
    435c:	      |   movea.l d0,a6
    435e:	      |   move.l 24(sp),d1
    4362:	      |   move.l 20(sp),d2
    4366:	      |   move.l 16(sp),d3
    436a:	      |   jsr -48(a6)
    436e:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4372:	      |   pea 18335 <PutChar+0x6b1>
    4378:	      |   jsr 171b0 <KPrintF>
    437e:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4380:	      |   moveq #0,d0
    4382:	/-----|-- bra.w 457e <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    4386:	|     \-> pea 1834b <PutChar+0x6c7>
    438c:	|         jsr 171b0 <KPrintF>
    4392:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4394:	|         move.l 52(sp),-(sp)
    4398:	|         jsr 4588 <setGameFilePath>
    439e:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    43a0:	|         move.l 52(sp),-(sp)
    43a4:	|         jsr 5b36 <initSludge>
    43aa:	|         addq.l #4,sp
    43ac:	|         tst.w d0
    43ae:	|     /-- bne.s 43b6 <main_sludge+0x1be>
    43b0:	|     |   moveq #0,d0
    43b2:	+-----|-- bra.w 457e <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    43b6:	|     \-> move.l 1c7ea <winWidth>,d0
    43bc:	|         cmpi.l #320,d0
    43c2:	|     /-- bne.s 43d2 <main_sludge+0x1da>
    43c4:	|     |   move.l 1c7ee <winHeight>,d0
    43ca:	|     |   cmpi.l #256,d0
    43d0:	|  /--|-- beq.s 43f4 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    43d2:	|  |  \-> pea 1835c <PutChar+0x6d8>
    43d8:	|  |      jsr 171b0 <KPrintF>
    43de:	|  |      addq.l #4,sp
		winWidth = 320;
    43e0:	|  |      move.l #320,1c7ea <winWidth>
		winHeight = 256;
    43ea:	|  |      move.l #256,1c7ee <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    43f4:	|  \----> pea 183d9 <PutChar+0x755>
    43fa:	|         jsr 171b0 <KPrintF>
    4400:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4402:	|         move.l 1c7ee <winHeight>,d0
    4408:	|         move.l d0,d1
    440a:	|         move.l 1c7ea <winWidth>,d0
    4410:	|         move.l d1,-(sp)
    4412:	|         move.l d0,-(sp)
    4414:	|         jsr d3d0 <resizeBackdrop>
    441a:	|         addq.l #8,sp
    441c:	|         tst.w d0
    441e:	|     /-- bne.s 4434 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4420:	|     |   pea 183ec <PutChar+0x768>
    4426:	|     |   jsr 171b0 <KPrintF>
    442c:	|     |   addq.l #4,sp
		return FALSE;
    442e:	|     |   moveq #0,d0
    4430:	+-----|-- bra.w 457e <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    4434:	|     \-> pea 18412 <PutChar+0x78e>
    443a:	|         jsr 171b0 <KPrintF>
    4440:	|         addq.l #4,sp
	if (! initPeople ())
    4442:	|         jsr a9bc <initPeople>
    4448:	|         tst.w d0
    444a:	|     /-- bne.s 4460 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    444c:	|     |   pea 1841f <PutChar+0x79b>
    4452:	|     |   jsr 171b0 <KPrintF>
    4458:	|     |   addq.l #4,sp
		return FALSE;
    445a:	|     |   moveq #0,d0
    445c:	+-----|-- bra.w 457e <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    4460:	|     \-> pea 18440 <PutChar+0x7bc>
    4466:	|         jsr 171b0 <KPrintF>
    446c:	|         addq.l #4,sp
	if (! initFloor ())
    446e:	|         jsr 16566 <initFloor>
    4474:	|         tst.w d0
    4476:	|     /-- bne.s 448c <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4478:	|     |   pea 1844c <PutChar+0x7c8>
    447e:	|     |   jsr 171b0 <KPrintF>
    4484:	|     |   addq.l #4,sp
		
		return FALSE;
    4486:	|     |   moveq #0,d0
    4488:	+-----|-- bra.w 457e <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    448c:	|     \-> pea 1846c <PutChar+0x7e8>
    4492:	|         jsr 171b0 <KPrintF>
    4498:	|         addq.l #4,sp
	if (! initObjectTypes ())
    449a:	|         jsr d58c <initObjectTypes>
    44a0:	|         tst.w d0
    44a2:	|     /-- bne.s 44b8 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    44a4:	|     |   pea 1847d <PutChar+0x7f9>
    44aa:	|     |   jsr 171b0 <KPrintF>
    44b0:	|     |   addq.l #4,sp
		return FALSE;
    44b2:	|     |   moveq #0,d0
    44b4:	+-----|-- bra.w 457e <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    44b8:	|     \-> pea 184a3 <PutChar+0x81f>
    44be:	|         jsr 171b0 <KPrintF>
    44c4:	|         addq.l #4,sp
	initSpeech ();
    44c6:	|         jsr 7f58 <initSpeech>
	KPrintF("Init status bar\n");
    44cc:	|         pea 184b0 <PutChar+0x82c>
    44d2:	|         jsr 171b0 <KPrintF>
    44d8:	|         addq.l #4,sp
	initStatusBar ();
    44da:	|         jsr 7a1c <initStatusBar>

	KPrintF("Get numbered string\n");
    44e0:	|         pea 184c1 <PutChar+0x83d>
    44e6:	|         jsr 171b0 <KPrintF>
    44ec:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    44ee:	|         pea 1 <_start+0x1>
    44f2:	|         jsr 6d2c <getNumberedString>
    44f8:	|         addq.l #4,sp
    44fa:	|         move.l d0,1c7fa <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4500:	|         pea 184d6 <PutChar+0x852>
    4506:	|         jsr 171b0 <KPrintF>
    450c:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    450e:	|         move.l 1c866 <noStack>,d0
    4514:	|         pea 1 <_start+0x1>
    4518:	|         move.l d0,-(sp)
    451a:	|         clr.l -(sp)
    451c:	|         clr.l -(sp)
    451e:	|         clr.l -(sp)
    4520:	|         jsr 6b82 <startNewFunctionNum>
    4526:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    452a:	|         pea 184ee <PutChar+0x86a>
    4530:	|         jsr 171b0 <KPrintF>
    4536:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4538:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4540:	|         clr.l 1c806 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4546:	|     /-- bra.s 4560 <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4548:	|  /--|-> jsr 6b12 <sludgeDisplay>
		CsiCheckInput();
    454e:	|  |  |   jsr cf04 <CsiCheckInput>
		handleInput();
    4554:	|  |  |   jsr 58d0 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    455a:	|  |  |   jsr 170e4 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4560:	|  |  \-> move.l 1c806 <weAreDoneSoQuit>,d0
    4566:	|  \----- beq.s 4548 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    4568:	|         move.l 52(sp),32(sp)
    456e:	|         move.l 1c896 <SysBase>,d0
    4574:	|         movea.l d0,a6
    4576:	|         movea.l 32(sp),a1
    457a:	|         jsr -690(a6)
}
    457e:	\-------> movem.l (sp)+,d2-d3/a6
    4582:	          lea 44(sp),sp
    4586:	          rts

00004588 <setGameFilePath>:

void setGameFilePath (char * f) {
    4588:	          lea -1104(sp),sp
    458c:	          move.l a6,-(sp)
    458e:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4590:	          move.l #1112,d0
    4596:	          add.l sp,d0
    4598:	          addi.l #-1102,d0
    459e:	          move.l d0,1100(sp)
    45a2:	          move.l #998,1096(sp)
    45aa:	          move.l 1c89e <DOSBase>,d0
    45b0:	          movea.l d0,a6
    45b2:	          move.l 1100(sp),d1
    45b6:	          move.l 1096(sp),d2
    45ba:	          jsr -564(a6)
    45be:	          move.w d0,1094(sp)
    45c2:	          move.w 1094(sp),d0
    45c6:	      /-- bne.s 45d6 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    45c8:	      |   pea 18501 <PutChar+0x87d>
    45ce:	      |   jsr 171b0 <KPrintF>
    45d4:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    45d6:	      \-> moveq #-1,d0
    45d8:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    45dc:	          clr.l 1104(sp)
    45e0:	   /----- bra.s 45fe <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    45e2:	/--|----> move.l 1104(sp),d0
    45e6:	|  |      movea.l 1116(sp),a0
    45ea:	|  |      adda.l d0,a0
    45ec:	|  |      move.b (a0),d0
    45ee:	|  |      cmpi.b #47,d0
    45f2:	|  |  /-- bne.s 45fa <setGameFilePath+0x72>
    45f4:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    45fa:	|  |  \-> addq.l #1,1104(sp)
    45fe:	|  \----> move.l 1104(sp),d0
    4602:	|         movea.l 1116(sp),a0
    4606:	|         adda.l d0,a0
    4608:	|         move.b (a0),d0
    460a:	\-------- bne.s 45e2 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    460c:	          moveq #-1,d0
    460e:	          cmp.l 1108(sp),d0
    4612:	   /----- beq.s 468c <setGameFilePath+0x104>
		f[got] = 0;	
    4614:	   |      move.l 1108(sp),d0
    4618:	   |      movea.l 1116(sp),a0
    461c:	   |      adda.l d0,a0
    461e:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4620:	   |      move.l 1116(sp),1090(sp)
    4626:	   |      moveq #-2,d0
    4628:	   |      move.l d0,1086(sp)
    462c:	   |      move.l 1c89e <DOSBase>,d0
    4632:	   |      movea.l d0,a6
    4634:	   |      move.l 1090(sp),d1
    4638:	   |      move.l 1086(sp),d2
    463c:	   |      jsr -84(a6)
    4640:	   |      move.l d0,1082(sp)
    4644:	   |      move.l 1082(sp),d0
    4648:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    464c:	   |      move.l 1078(sp),1074(sp)
    4652:	   |      move.l 1c89e <DOSBase>,d0
    4658:	   |      movea.l d0,a6
    465a:	   |      move.l 1074(sp),d1
    465e:	   |      jsr -126(a6)
    4662:	   |      move.l d0,1070(sp)
    4666:	   |      move.l 1070(sp),d0
    466a:	   |  /-- bne.s 467e <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    466c:	   |  |   move.l 1116(sp),-(sp)
    4670:	   |  |   pea 18527 <PutChar+0x8a3>
    4676:	   |  |   jsr 171b0 <KPrintF>
    467c:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    467e:	   |  \-> move.l 1108(sp),d0
    4682:	   |      movea.l 1116(sp),a0
    4686:	   |      adda.l d0,a0
    4688:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    468c:	   \----> move.l #400,1066(sp)
    4694:	          clr.l 1062(sp)
    4698:	          move.l 1c896 <SysBase>,d0
    469e:	          movea.l d0,a6
    46a0:	          move.l 1066(sp),d0
    46a4:	          move.l 1062(sp),d1
    46a8:	          jsr -684(a6)
    46ac:	          move.l d0,1058(sp)
    46b0:	          move.l 1058(sp),d0
    46b4:	          move.l d0,1c7fe <gamePath>
	if (gamePath==0) {
    46ba:	          move.l 1c7fe <gamePath>,d0
    46c0:	      /-- bne.s 46d4 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    46c2:	      |   pea 1855a <PutChar+0x8d6>
    46c8:	      |   jsr 171b0 <KPrintF>
    46ce:	      |   addq.l #4,sp
    46d0:	   /--|-- bra.w 47bc <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    46d4:	   |  \-> move.l 1c7fe <gamePath>,1054(sp)
    46dc:	   |      moveq #-2,d0
    46de:	   |      move.l d0,1050(sp)
    46e2:	   |      move.l 1c89e <DOSBase>,d0
    46e8:	   |      movea.l d0,a6
    46ea:	   |      move.l 1054(sp),d1
    46ee:	   |      move.l 1050(sp),d2
    46f2:	   |      jsr -84(a6)
    46f6:	   |      move.l d0,1046(sp)
    46fa:	   |      move.l 1046(sp),d0
    46fe:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4702:	   |      move.l 1042(sp),1038(sp)
    4708:	   |      move.l 1c89e <DOSBase>,d0
    470e:	   |      movea.l d0,a6
    4710:	   |      move.l 1038(sp),d1
    4714:	   |      jsr -126(a6)
    4718:	   |      move.l d0,1034(sp)
    471c:	   |      move.l 1034(sp),d0
    4720:	   |  /-- bne.s 4730 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4722:	   |  |   pea 18595 <PutChar+0x911>
    4728:	   |  |   jsr 171b0 <KPrintF>
    472e:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4730:	   |  \-> move.l #1112,d0
    4736:	   |      add.l sp,d0
    4738:	   |      addi.l #-1102,d0
    473e:	   |      move.l d0,1030(sp)
    4742:	   |      moveq #-2,d0
    4744:	   |      move.l d0,1026(sp)
    4748:	   |      move.l 1c89e <DOSBase>,d0
    474e:	   |      movea.l d0,a6
    4750:	   |      move.l 1030(sp),d1
    4754:	   |      move.l 1026(sp),d2
    4758:	   |      jsr -84(a6)
    475c:	   |      move.l d0,1022(sp)
    4760:	   |      move.l 1022(sp),d0
    4764:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    4768:	   |      move.l 1042(sp),1018(sp)
    476e:	   |      move.l 1c89e <DOSBase>,d0
    4774:	   |      movea.l d0,a6
    4776:	   |      move.l 1018(sp),d1
    477a:	   |      jsr -126(a6)
    477e:	   |      move.l d0,1014(sp)
    4782:	   |      move.l 1014(sp),d0
    4786:	   |  /-- bne.s 479c <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    4788:	   |  |   moveq #10,d0
    478a:	   |  |   add.l sp,d0
    478c:	   |  |   move.l d0,-(sp)
    478e:	   |  |   pea 185c1 <PutChar+0x93d>
    4794:	   |  |   jsr 171b0 <KPrintF>
    479a:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    479c:	   |  \-> move.l 1c7fe <gamePath>,d0
    47a2:	   +----- beq.s 47bc <setGameFilePath+0x234>
    47a4:	   |      move.l 1c7fe <gamePath>,1010(sp)
    47ac:	   |      move.l 1c896 <SysBase>,d0
    47b2:	   |      movea.l d0,a6
    47b4:	   |      movea.l 1010(sp),a1
    47b8:	   |      jsr -690(a6)
}
    47bc:	   \----> move.l (sp)+,d2
    47be:	          movea.l (sp)+,a6
    47c0:	          lea 1104(sp),sp
    47c4:	          rts

000047c6 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    47c6:	/-------> lea -16(sp),sp
    47ca:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    47cc:	|         move.l 24(sp),-(sp)
    47d0:	|         jsr 68f4 <pauseFunction>
    47d6:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    47d8:	|     /-- bra.s 47ea <abortFunction+0x24>
    47da:	|  /--|-> moveq #24,d0
    47dc:	|  |  |   add.l 24(sp),d0
    47e0:	|  |  |   move.l d0,-(sp)
    47e2:	|  |  |   jsr 1510c <trimStack>
    47e8:	|  |  |   addq.l #4,sp
    47ea:	|  |  \-> movea.l 24(sp),a0
    47ee:	|  |      move.l 24(a0),d0
    47f2:	|  \----- bne.s 47da <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    47f4:	|         movea.l 24(sp),a0
    47f8:	|         move.l 4(a0),12(sp)
    47fe:	|         move.l 1c896 <SysBase>,d0
    4804:	|         movea.l d0,a6
    4806:	|         movea.l 12(sp),a1
    480a:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    480e:	|         clr.l 16(sp)
    4812:	|     /-- bra.s 4832 <abortFunction+0x6c>
    4814:	|  /--|-> movea.l 24(sp),a0
    4818:	|  |  |   move.l 20(a0),d1
    481c:	|  |  |   move.l 16(sp),d0
    4820:	|  |  |   lsl.l #3,d0
    4822:	|  |  |   add.l d1,d0
    4824:	|  |  |   move.l d0,-(sp)
    4826:	|  |  |   jsr 149d6 <unlinkVar>
    482c:	|  |  |   addq.l #4,sp
    482e:	|  |  |   addq.l #1,16(sp)
    4832:	|  |  \-> movea.l 24(sp),a0
    4836:	|  |      move.l 8(a0),d0
    483a:	|  |      cmp.l 16(sp),d0
    483e:	|  \----- bgt.s 4814 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    4840:	|         movea.l 24(sp),a0
    4844:	|         move.l 20(a0),8(sp)
    484a:	|         move.l 1c896 <SysBase>,d0
    4850:	|         movea.l d0,a6
    4852:	|         movea.l 8(sp),a1
    4856:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    485a:	|         moveq #28,d0
    485c:	|         add.l 24(sp),d0
    4860:	|         move.l d0,-(sp)
    4862:	|         jsr 149d6 <unlinkVar>
    4868:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    486a:	|         movea.l 24(sp),a0
    486e:	|         move.l 40(a0),d0
    4872:	|     /-- beq.s 4884 <abortFunction+0xbe>
    4874:	|     |   movea.l 24(sp),a0
    4878:	|     |   move.l 40(a0),d0
    487c:	|     |   move.l d0,-(sp)
    487e:	\-----|-- jsr 47c6 <abortFunction>(pc)
    4882:	      |   addq.l #4,sp
	FreeVec(fun);
    4884:	      \-> move.l 24(sp),4(sp)
    488a:	          move.l 1c896 <SysBase>,d0
    4890:	          movea.l d0,a6
    4892:	          movea.l 4(sp),a1
    4896:	          jsr -690(a6)
	fun = NULL;
    489a:	          clr.l 24(sp)
}
    489e:	          nop
    48a0:	          movea.l (sp)+,a6
    48a2:	          lea 16(sp),sp
    48a6:	          rts

000048a8 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    48a8:	          subq.l #8,sp
	int n = 0;
    48aa:	          clr.l 4(sp)
	*killedMyself = FALSE;
    48ae:	          movea.l 20(sp),a0
    48b2:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    48b4:	          move.l 1c82e <allRunningFunctions>,(sp)
	while (fun) {
    48ba:	   /----- bra.s 48e8 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    48bc:	/--|----> movea.l (sp),a0
    48be:	|  |      move.l (a0),d0
    48c0:	|  |      cmp.l 12(sp),d0
    48c4:	|  |  /-- bne.s 48e2 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    48c6:	|  |  |   movea.l (sp),a0
    48c8:	|  |  |   move.w #1,54(a0)
			n++;
    48ce:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    48d2:	|  |  |   move.l (sp),d0
    48d4:	|  |  |   cmp.l 16(sp),d0
    48d8:	|  |  +-- bne.s 48e2 <cancelAFunction+0x3a>
    48da:	|  |  |   movea.l 20(sp),a0
    48de:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    48e2:	|  |  \-> movea.l (sp),a0
    48e4:	|  |      move.l 44(a0),(sp)
	while (fun) {
    48e8:	|  \----> tst.l (sp)
    48ea:	\-------- bne.s 48bc <cancelAFunction+0x14>
	}
	return n;
    48ec:	          move.l 4(sp),d0
}
    48f0:	          addq.l #8,sp
    48f2:	          rts

000048f4 <completeTimers>:


void completeTimers () {
    48f4:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    48f6:	          move.l 1c82e <allRunningFunctions>,(sp)

	while (thisFunction) {
    48fc:	   /----- bra.s 4912 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    48fe:	/--|----> movea.l (sp),a0
    4900:	|  |      move.b 56(a0),d0
    4904:	|  |  /-- bne.s 490c <completeTimers+0x18>
    4906:	|  |  |   movea.l (sp),a0
    4908:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    490c:	|  |  \-> movea.l (sp),a0
    490e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4912:	|  \----> tst.l (sp)
    4914:	\-------- bne.s 48fe <completeTimers+0xa>
	}
}
    4916:	          nop
    4918:	          nop
    491a:	          addq.l #4,sp
    491c:	          rts

0000491e <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    491e:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    4922:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    4928:	                                                             movea.l 80(sp),a0
    492c:	                                                             move.w 54(a0),d0
    4930:	/----------------------------------------------------------- beq.w 57be <continueFunction+0xea0>
		abortFunction (fun);
    4934:	|                                                            move.l 80(sp),-(sp)
    4938:	|                                                            jsr 47c6 <abortFunction>
    493e:	|                                                            addq.l #4,sp
		return TRUE;
    4940:	|                                                            moveq #1,d0
    4942:	|  /-------------------------------------------------------- bra.w 57c8 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    4946:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    494c:	|  |  |                                                      movea.l 80(sp),a0
    4950:	|  |  |                                                      move.l 4(a0),d1
    4954:	|  |  |                                                      movea.l 80(sp),a0
    4958:	|  |  |                                                      move.l 36(a0),d0
    495c:	|  |  |                                                      lsl.l #3,d0
    495e:	|  |  |                                                      movea.l d1,a0
    4960:	|  |  |                                                      adda.l d0,a0
    4962:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    4968:	|  |  |                                                      movea.l 80(sp),a0
    496c:	|  |  |                                                      move.l 4(a0),d1
    4970:	|  |  |                                                      movea.l 80(sp),a0
    4974:	|  |  |                                                      move.l 36(a0),d0
    4978:	|  |  |                                                      lsl.l #3,d0
    497a:	|  |  |                                                      movea.l d1,a0
    497c:	|  |  |                                                      adda.l d0,a0
    497e:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    4982:	|  |  |                                                      moveq #41,d0
    4984:	|  |  |                                                      cmp.l 64(sp),d0
    4988:	|  |  |  /-------------------------------------------------- bcs.w 5772 <continueFunction+0xe54>
    498c:	|  |  |  |                                                   move.l 64(sp),d0
    4990:	|  |  |  |                                                   add.l d0,d0
    4992:	|  |  |  |                                                   movea.l d0,a0
    4994:	|  |  |  |                                                   adda.l #18848,a0
    499a:	|  |  |  |                                                   move.w (a0),d0
    499c:	|  |  |  |                                                   jmp (49a0 <continueFunction+0x82>,pc,d0.w)
    49a0:	|  |  |  |                                                   bset d6,(a2)
    49a2:	|  |  |  |                                                   ori.w #2670,(a4)
    49a6:	|  |  |  |                                                   eori.w #2416,d6
    49aa:	|  |  |  |                                                   bchg d4,d2
    49ac:	|  |  |  |                                                   bclr d4,(a4)+
    49ae:	|  |  |  |                                                   andi.l #181013194,d4
    49b4:	|  |  |  |                                                   .short 0x0aca
    49b6:	|  |  |  |                                                   .short 0x0aca
    49b8:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    49c0:	|  |  |  |                                                   .short 0x0aca
    49c2:	|  |  |  |                                                   andi.w #906,-(a4)
    49c6:	|  |  |  |                                                   bchg d1,196(a2)
    49ca:	|  |  |  |                                                   bset d1,580(a4)
    49ce:	|  |  |  |                                                   bclr d1,2576(a2)
    49d2:	|  |  |  |                                                   andi.b #-56,2762(a2)
    49d8:	|  |  |  |                                                   .short 0x0aca
    49da:	|  |  |  |                                                   eori.l #63572682,d0
    49e0:	|  |  |  |                                                   .short 0x0aca
    49e2:	|  |  |  |                                                   bchg d3,-(a2)
    49e4:	|  |  |  |                                                   bchg #-36,(a2)
    49e8:	|  |  |  |                                                   .short 0x08cc
    49ea:	|  |  |  |                                                   addi.b #14,1038(a0)
    49f0:	|  |  |  |                                                   .short 0x040e
    49f2:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    49f6:	|  |  |  |                                                   ori.w #8232,(a0)
    49fa:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    4a00:	|  |  |  |                                                   ori.w #12136,(a0)
    4a04:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    4a0a:	|  |  |  |                                                   ori.w #12328,(a0)
    4a0e:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    4a14:	|  |  |  |                                                   add.l 44(sp),d1
    4a18:	|  |  |  |                                                   moveq #28,d0
    4a1a:	|  |  |  |                                                   add.l 80(sp),d0
    4a1e:	|  |  |  |                                                   move.l d1,-(sp)
    4a20:	|  |  |  |                                                   move.l d0,-(sp)
    4a22:	|  |  |  |                                                   jsr 14c42 <copyVariable>
    4a28:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    4a2a:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4a2e:	|  |  |  |                                                   jsr 57ce <finishFunction>
    4a34:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    4a36:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    4a3c:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4a40:	|  |  |  |                                                   jsr 6936 <restartFunction>
    4a46:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    4a48:	|  |  |  |  /----------------------------------------------- bra.w 57a6 <continueFunction+0xe88>
				finishFunction (fun);
    4a4c:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    4a50:	|  |  |  |  |                                                jsr 57ce <finishFunction>
    4a56:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4a58:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    4a5c:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    4a60:	|  |  |  |  +----------------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    4a64:	|  |  |  |  |                                                movea.l 80(sp),a0
    4a68:	|  |  |  |  |                                                move.l 28(a0),d0
    4a6c:	|  |  |  |  |                                                moveq #2,d1
    4a6e:	|  |  |  |  |                                                cmp.l d0,d1
    4a70:	|  |  |  |  |                                            /-- beq.s 4a7c <continueFunction+0x15e>
    4a72:	|  |  |  |  |                                            |   moveq #4,d1
    4a74:	|  |  |  |  |                                            |   cmp.l d0,d1
    4a76:	|  |  |  |  |                                         /--|-- beq.s 4aca <continueFunction+0x1ac>
    4a78:	|  |  |  |  |                                /--------|--|-- bra.w 4bb2 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    4a7c:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    4a80:	|  |  |  |  |                                |        |      jsr 68f4 <pauseFunction>
    4a86:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    4a88:	|  |  |  |  |                                |        |      moveq #24,d0
    4a8a:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    4a8e:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    4a92:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    4a96:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    4a9a:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    4a9c:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    4aa0:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    4aa4:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    4aa6:	|  |  |  |  |                                |        |      jsr 6b82 <startNewFunctionNum>
    4aac:	|  |  |  |  |                                |        |      lea 20(sp),sp
    4ab0:	|  |  |  |  |                                |        |      tst.l d0
    4ab2:	|  |  |  |  |                                |        |  /-- bne.s 4aba <continueFunction+0x19c>
    4ab4:	|  |  |  |  |                                |        |  |   clr.w d0
    4ab6:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 57c8 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    4aba:	|  |  |  |  |                                |        |  \-> move.l 1c82e <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4ac2:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    4ac6:	|  |  |  |  |                                |  /-----|----- bra.w 4bc6 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    4aca:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    4ace:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4ad2:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4ad6:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4ada:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    4adc:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    4ade:	|  |  |  |  |                                |  |            jsr 1346a <callBuiltIn>
    4ae4:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4ae8:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    4aec:	|  |  |  |  |                                |  |            moveq #5,d0
    4aee:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4af2:	|  |  |  |  |                                |  |  /-------- bcs.w 4bae <continueFunction+0x290>
    4af6:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4afa:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4afc:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    4afe:	|  |  |  |  |                                |  |  |         adda.l #19210,a0
    4b04:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4b06:	|  |  |  |  |                                |  |  |         jmp (4b0a <continueFunction+0x1ec>,pc,d0.w)
    4b0a:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4b10:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4b14:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4b1a:	|  |  |  |  |                                |  |  |         .short 0x86c9
    4b1c:	|  |  |  |  |                                |  |  |         jsr 171b0 <KPrintF>
    4b22:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4b24:	|  |  |  |  |                                |  |  |         clr.w d0
    4b26:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 57c8 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4b2a:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    4b2e:	|  |  |  |  |                                |  |  |         jsr 68f4 <pauseFunction>
    4b34:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4b36:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4b3a:	|  |  |  |  |                                |  |  |  /----- bra.s 4bb0 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4b3c:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4b40:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4b44:	|  |  |  |  |                                |  |  |  +----- bra.s 4bb0 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4b46:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4b4a:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4b50:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4b52:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4b56:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4b5a:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4b5e:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4b60:	|  |  |  |  |                                |  |  |  |      jsr 1507a <setVariable>
    4b66:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4b6a:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    4b6e:	|  |  |  |  |                                |  |  |  |      jsr 68f4 <pauseFunction>
    4b74:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    4b76:	|  |  |  |  |                                |  |  |  |      move.l 1c866 <noStack>,d1
    4b7c:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4b80:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4b82:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4b84:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4b88:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4b8a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4b8c:	|  |  |  |  |                                |  |  |  |      jsr 6b82 <startNewFunctionNum>
    4b92:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    4b96:	|  |  |  |  |                                |  |  |  |      tst.l d0
    4b98:	|  |  |  |  |                                |  |  |  |  /-- bne.s 4ba0 <continueFunction+0x282>
    4b9a:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    4b9c:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 57c8 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4ba0:	|  |  |  |  |                                |  |  |  |  \-> move.l 1c82e <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    4ba8:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    4bac:	|  |  |  |  |                                |  |  |  +----- bra.s 4bb0 <continueFunction+0x292>

						default:
						break;
    4bae:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    4bb0:	|  |  |  |  |                                |  +-----\----X bra.s 4bc6 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    4bb2:	|  |  |  |  |                                \--|----------> pea 18714 <PutChar+0xa90>
    4bb8:	|  |  |  |  |                                   |            jsr 171b0 <KPrintF>
    4bbe:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    4bc0:	|  |  |  |  |                                   |            clr.w d0
    4bc2:	|  +--|--|--|-----------------------------------|----------- bra.w 57c8 <continueFunction+0xeaa>
			}
			break;
    4bc6:	|  |  |  |  +-----------------------------------\----------X bra.w 57a6 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    4bca:	|  |  |  |  |                                                moveq #28,d0
    4bcc:	|  |  |  |  |                                                add.l 80(sp),d0
    4bd0:	|  |  |  |  |                                                clr.l -(sp)
    4bd2:	|  |  |  |  |                                                clr.l -(sp)
    4bd4:	|  |  |  |  |                                                move.l d0,-(sp)
    4bd6:	|  |  |  |  |                                                jsr 1507a <setVariable>
    4bdc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4be0:	|  |  |  |  +----------------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4be4:	|  |  |  |  |                                                move.l 68(sp),d1
    4be8:	|  |  |  |  |                                                moveq #28,d0
    4bea:	|  |  |  |  |                                                add.l 80(sp),d0
    4bee:	|  |  |  |  |                                                move.l d1,-(sp)
    4bf0:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4bf4:	|  |  |  |  |                                                move.l d0,-(sp)
    4bf6:	|  |  |  |  |                                                jsr 1507a <setVariable>
    4bfc:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4c00:	|  |  |  |  +----------------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4c04:	|  |  |  |  |                                                move.l 68(sp),d1
    4c08:	|  |  |  |  |                                                moveq #28,d0
    4c0a:	|  |  |  |  |                                                add.l 80(sp),d0
    4c0e:	|  |  |  |  |                                                move.l d1,-(sp)
    4c10:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4c14:	|  |  |  |  |                                                move.l d0,-(sp)
    4c16:	|  |  |  |  |                                                jsr 1507a <setVariable>
    4c1c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4c20:	|  |  |  |  +----------------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4c24:	|  |  |  |  |                                                moveq #28,d0
    4c26:	|  |  |  |  |                                                add.l 80(sp),d0
    4c2a:	|  |  |  |  |                                                movea.l 80(sp),a0
    4c2e:	|  |  |  |  |                                                movea.l 20(a0),a0
    4c32:	|  |  |  |  |                                                move.l 68(sp),d1
    4c36:	|  |  |  |  |                                                lsl.l #3,d1
    4c38:	|  |  |  |  |                                                add.l a0,d1
    4c3a:	|  |  |  |  |                                                move.l d0,-(sp)
    4c3c:	|  |  |  |  |                                                move.l d1,-(sp)
    4c3e:	|  |  |  |  |                                                jsr 14c42 <copyVariable>
    4c44:	|  |  |  |  |                                                addq.l #8,sp
    4c46:	|  |  |  |  |                                                tst.w d0
    4c48:	|  |  |  |  |  /-------------------------------------------- bne.w 5784 <continueFunction+0xe66>
    4c4c:	|  |  |  |  |  |                                             clr.w d0
    4c4e:	|  +--|--|--|--|-------------------------------------------- bra.w 57c8 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4c52:	|  |  |  |  |  |                                             moveq #28,d0
    4c54:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c58:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c5a:	|  |  |  |  |  |                                             jsr 14cc8 <getBoolean>
    4c60:	|  |  |  |  |  |                                             addq.l #4,sp
    4c62:	|  |  |  |  |  |                                             tst.w d0
    4c64:	|  |  |  |  |  |                                      /----- beq.s 4c80 <continueFunction+0x362>
    4c66:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4c6a:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4c6e:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4c70:	|  |  |  |  |  |                                      |      jsr 14cc8 <getBoolean>
    4c76:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4c78:	|  |  |  |  |  |                                      |      tst.w d0
    4c7a:	|  |  |  |  |  |                                      +----- beq.s 4c80 <continueFunction+0x362>
    4c7c:	|  |  |  |  |  |                                      |      moveq #1,d0
    4c7e:	|  |  |  |  |  |                                      |  /-- bra.s 4c82 <continueFunction+0x364>
    4c80:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4c82:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4c84:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4c88:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c8a:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4c8e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c90:	|  |  |  |  |  |                                             jsr 1507a <setVariable>
    4c96:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4c9a:	|  |  |  |  |  |                                             moveq #24,d0
    4c9c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4ca0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ca2:	|  |  |  |  |  |                                             jsr 1510c <trimStack>
    4ca8:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4caa:	|  |  |  |  +--|-------------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    4cae:	|  |  |  |  |  |                                             moveq #28,d0
    4cb0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4cb4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4cb6:	|  |  |  |  |  |                                             jsr 14cc8 <getBoolean>
    4cbc:	|  |  |  |  |  |                                             addq.l #4,sp
    4cbe:	|  |  |  |  |  |                                             tst.w d0
    4cc0:	|  |  |  |  |  |                                         /-- bne.s 4cd8 <continueFunction+0x3ba>
    4cc2:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    4cc6:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    4cca:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    4ccc:	|  |  |  |  |  |                                         |   jsr 14cc8 <getBoolean>
    4cd2:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4cd4:	|  |  |  |  |  |                                         |   tst.w d0
    4cd6:	|  |  |  |  |  |                                      /--|-- beq.s 4cdc <continueFunction+0x3be>
    4cd8:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4cda:	|  |  |  |  |  |                                      |  /-- bra.s 4cde <continueFunction+0x3c0>
    4cdc:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4cde:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4ce0:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4ce4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ce6:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4cea:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4cec:	|  |  |  |  |  |                                             jsr 1507a <setVariable>
    4cf2:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4cf6:	|  |  |  |  |  |                                             moveq #24,d0
    4cf8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4cfc:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4cfe:	|  |  |  |  |  |                                             jsr 1510c <trimStack>
    4d04:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4d06:	|  |  |  |  +--|-------------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4d0a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4d0e:	|  |  |  |  |  |                                             moveq #28,d0
    4d10:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d14:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d16:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4d1a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d1c:	|  |  |  |  |  |                                             jsr 1507a <setVariable>
    4d22:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4d26:	|  |  |  |  +--|-------------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4d2a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4d2e:	|  |  |  |  |  |                                             moveq #28,d0
    4d30:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d34:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d36:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4d3a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d3c:	|  |  |  |  |  |                                             jsr 1507a <setVariable>
    4d42:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4d46:	|  |  |  |  +--|-------------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4d4a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4d4e:	|  |  |  |  |  |                                             moveq #28,d0
    4d50:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d54:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d56:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4d5a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d5c:	|  |  |  |  |  |                                             jsr 1507a <setVariable>
    4d62:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4d66:	|  |  |  |  +--|-------------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4d6a:	|  |  |  |  |  |                                             move.l 1c7f6 <dialogValue>,d0
    4d70:	|  |  |  |  |  |                                             moveq #1,d1
    4d72:	|  |  |  |  |  |                                             cmp.l d0,d1
    4d74:	|  |  |  |  |  |  /----------------------------------------- beq.w 5788 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4d78:	|  |  |  |  |  |  |                                          pea 18729 <PutChar+0xaa5>
    4d7e:	|  |  |  |  |  |  |                                          jsr 171b0 <KPrintF>
    4d84:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4d86:	|  |  |  |  |  |  |                                          clr.w d0
    4d88:	|  +--|--|--|--|--|----------------------------------------- bra.w 57c8 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4d8c:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4d90:	|  |  |  |  |  |  |                                          moveq #28,d0
    4d92:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4d96:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4d98:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4d9a:	|  |  |  |  |  |  |                                          jsr 1480c <loadStringToVar>
    4da0:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4da2:	|  |  |  |  |  |  |                                          tst.w d0
    4da4:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 578c <continueFunction+0xe6e>
					return FALSE;
    4da8:	|  |  |  |  |  |  |  |                                       clr.w d0
    4daa:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 57c8 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4dae:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4db2:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4db6:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4db8:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4dba:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4dbc:	|  |  |  |  |  |  |  |                                /----- beq.s 4e1a <continueFunction+0x4fc>
    4dbe:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4dc0:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4dc2:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 4fae <continueFunction+0x690>
    4dc6:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4dc8:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4dd4 <continueFunction+0x4b6>
    4dca:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4dcc:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4dce:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4e1a <continueFunction+0x4fc>
    4dd0:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4fae <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4dd4:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4dd6:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4dda:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4e06 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4ddc:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4dde:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4de2:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4de4:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4de6:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4de8:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1507a <setVariable>
    4dee:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4df2:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4df4:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4df8:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4dfa:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1510c <trimStack>
    4e00:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4e02:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 4fc4 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4e06:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1876a <PutChar+0xae6>
    4e0c:	|  |  |  |  |  |  |  |              |  |              |      jsr 171b0 <KPrintF>
    4e12:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4e14:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4e16:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 57c8 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4e1a:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4e1e:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4e22:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4e26:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4e28:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e3e <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4e2a:	|  |  |  |  |  |  |  |              |  |                 |   pea 187a6 <PutChar+0xb22>
    4e30:	|  |  |  |  |  |  |  |              |  |                 |   jsr 171b0 <KPrintF>
    4e36:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4e38:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4e3a:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 57c8 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4e3e:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4e40:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4e44:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4e46:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4e4a:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4e4e:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4e50:	|  |  |  |  |  |  |  |              |  |                     jsr 14788 <getValueType>
    4e56:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4e5a:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4e5c:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e64 <continueFunction+0x546>
    4e5e:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4e60:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 57c8 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4e64:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4e68:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4e6c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4e6e:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4e70:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4e72:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e94 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4e74:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4e78:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4e7a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4e7e:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4e82:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4e86:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4e88:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4e8a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14412 <fastArrayGetByIndex>
    4e90:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4e92:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4eb4 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4e94:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4e98:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4e9a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4e9e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4ea2:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4ea6:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4ea8:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4eaa:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4eac:	|  |  |  |  |  |  |  |              |  |              |      jsr 1509c <stackGetByIndex>
    4eb2:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4eb4:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4eb8:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4eba:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4ebe:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4ec0:	|  |  |  |  |  |  |  |              |  |                     jsr 1510c <trimStack>
    4ec6:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4ec8:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4ecc:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4ee8 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4ece:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4ed0:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4ed4:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4ed6:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4ed8:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4eda:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1507a <setVariable>
    4ee0:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4ee4:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 4fc2 <continueFunction+0x6a4>
    4ee8:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4eea:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4eee:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4efc <continueFunction+0x5de>
    4ef0:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4ef2:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4ef6:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4f46 <continueFunction+0x628>
    4ef8:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 4f8e <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4efc:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4f00:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4f04:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4f08:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4f0a:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14788 <getValueType>
    4f10:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4f14:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4f16:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4f1e <continueFunction+0x600>
    4f18:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4f1a:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 4fa8 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4f1e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4f20:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4f22:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4f26:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4f28:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4f2c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4f2e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 1507a <setVariable>
    4f34:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4f38:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4f3a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4f3c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4f40:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4f44:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 4fac <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4f46:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4f4a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4f4e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4f52:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4f54:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14788 <getValueType>
    4f5a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4f5e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4f60:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4f66 <continueFunction+0x648>
    4f62:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4f64:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4fa8 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4f66:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4f68:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4f6a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4f6e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4f70:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4f74:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4f76:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1507a <setVariable>
    4f7c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4f80:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4f82:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4f84:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4f88:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4f8c:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4fac <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4f8e:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    4f90:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4f94:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4f96:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4f9a:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14c42 <copyVariable>
    4fa0:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4fa2:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4fa4:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4fc2 <continueFunction+0x6a4>
    4fa6:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4fa8:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 57c8 <continueFunction+0xeaa>
				break;
    4fac:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 4fc2 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4fae:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 187c4 <PutChar+0xb40>
    4fb4:	|  |  |  |  |  |  |  |                 |  |                  jsr 171b0 <KPrintF>
    4fba:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4fbc:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4fbe:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 57c8 <continueFunction+0xeaa>
				break;
    4fc2:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    4fc4:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 57a6 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4fc8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4fcc:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4fd0:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4fd2:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4fd4:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4fd6:	|  |  |  |  |  |  |  |                                   /-- beq.s 4fe4 <continueFunction+0x6c6>
    4fd8:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4fda:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4fdc:	|  |  |  |  |  |  |  |                                /--|-- beq.w 5090 <continueFunction+0x772>
    4fe0:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 50ee <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4fe4:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4fe8:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4fec:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4ff0:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4ff2:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 5008 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4ff4:	|  |  |  |  |  |  |  |                             |  |  |   pea 187a6 <PutChar+0xb22>
    4ffa:	|  |  |  |  |  |  |  |                             |  |  |   jsr 171b0 <KPrintF>
    5000:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5002:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5004:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 57c8 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5008:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    500a:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    500e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5010:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5014:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5018:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    501a:	|  |  |  |  |  |  |  |                             |  |      jsr 14788 <getValueType>
    5020:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5024:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5026:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 502e <continueFunction+0x710>
    5028:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    502a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 57c8 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    502e:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    5032:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5036:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    503a:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    503c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5040:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5042:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    5046:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    504a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    504e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5050:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5052:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5054:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5056:	|  |  |  |  |  |  |  |                             |  |      jsr 6b3e <stackSetByIndex>
    505c:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5060:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5062:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 506a <continueFunction+0x74c>
						return FALSE;
    5064:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5066:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 57c8 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    506a:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    506c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5070:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5072:	|  |  |  |  |  |  |  |                             |  |      jsr 1510c <trimStack>
    5078:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    507a:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    507c:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5080:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5082:	|  |  |  |  |  |  |  |                             |  |      jsr 1510c <trimStack>
    5088:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    508a:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    508c:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 57a6 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5090:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    5092:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5096:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5098:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    509c:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    50a0:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    50a2:	|  |  |  |  |  |  |  |                             |         jsr 14788 <getValueType>
    50a8:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    50ac:	|  |  |  |  |  |  |  |                             |         tst.w d0
    50ae:	|  |  |  |  |  |  |  |                             |     /-- bne.s 50b6 <continueFunction+0x798>
    50b0:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    50b2:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 57c8 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    50b6:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    50ba:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    50bc:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    50c0:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    50c4:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    50c8:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    50ca:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    50cc:	|  |  |  |  |  |  |  |                             |         jsr 14412 <fastArrayGetByIndex>
    50d2:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    50d4:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    50d8:	|  |  |  |  |  |  |  |                             |     /-- bne.s 50e8 <continueFunction+0x7ca>
    50da:	|  |  |  |  |  |  |  |                             |     |   pea 187e8 <PutChar+0xb64>
    50e0:	|  |  |  |  |  |  |  |                             |     |   jsr 171b0 <KPrintF>
    50e6:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    50e8:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    50ea:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 57c8 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    50ee:	|  |  |  |  |  |  |  |                             \-------> pea 187c4 <PutChar+0xb40>
    50f4:	|  |  |  |  |  |  |  |                                       jsr 171b0 <KPrintF>
    50fa:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    50fc:	|  |  |  |  |  |  |  |                                       clr.w d0
    50fe:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 57c8 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5102:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5106:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    510a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    510e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5110:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5112:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5114:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5118:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    511c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    511e:	|  |  |  |  |  |  |  |                                       jsr 14788 <getValueType>
    5124:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5128:	|  |  |  |  |  |  |  |                                       tst.w d0
    512a:	|  |  |  |  |  |  |  |                                   /-- bne.s 5132 <continueFunction+0x814>
    512c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    512e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 57c8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5132:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    5136:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5138:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    513c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    513e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5142:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5144:	|  |  |  |  |  |  |  |                                       jsr 1507a <setVariable>
    514a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    514e:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5152:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5154:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5156:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    515a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    515e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5162:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5164:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5166:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5168:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    516c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    516e:	|  |  |  |  |  |  |  |                                       jsr 1507a <setVariable>
    5174:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5178:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    517c:	|  |  |  |  |  |  |  |                                       move.l 1c844 <globalVars>,d1
    5182:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5186:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5188:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    518a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    518c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5190:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5194:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5196:	|  |  |  |  |  |  |  |                                       jsr 14788 <getValueType>
    519c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    51a0:	|  |  |  |  |  |  |  |                                       tst.w d0
    51a2:	|  |  |  |  |  |  |  |                                   /-- bne.s 51aa <continueFunction+0x88c>
    51a4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    51a6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 57c8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    51aa:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    51ae:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    51b0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    51b4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51b6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51ba:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51bc:	|  |  |  |  |  |  |  |                                       jsr 1507a <setVariable>
    51c2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    51c6:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    51ca:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    51cc:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    51ce:	|  |  |  |  |  |  |  |                                       movea.l 1c844 <globalVars>,a0
    51d4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51d8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51da:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    51dc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51de:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51e2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51e4:	|  |  |  |  |  |  |  |                                       jsr 1507a <setVariable>
    51ea:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    51ee:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    51f2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    51f6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    51fa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51fe:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5200:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5202:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5204:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5208:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    520c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    520e:	|  |  |  |  |  |  |  |                                       jsr 14788 <getValueType>
    5214:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5218:	|  |  |  |  |  |  |  |                                       tst.w d0
    521a:	|  |  |  |  |  |  |  |                                   /-- bne.s 5222 <continueFunction+0x904>
    521c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    521e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 57c8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5222:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    5226:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5228:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    522c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    522e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5232:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5234:	|  |  |  |  |  |  |  |                                       jsr 1507a <setVariable>
    523a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    523e:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5242:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5244:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5246:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    524a:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    524e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5252:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5254:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5256:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5258:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    525c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    525e:	|  |  |  |  |  |  |  |                                       jsr 1507a <setVariable>
    5264:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5268:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    526c:	|  |  |  |  |  |  |  |                                       move.l 1c844 <globalVars>,d1
    5272:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5276:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5278:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    527a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    527c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5280:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5284:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5286:	|  |  |  |  |  |  |  |                                       jsr 14788 <getValueType>
    528c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5290:	|  |  |  |  |  |  |  |                                       tst.w d0
    5292:	|  |  |  |  |  |  |  |                                   /-- bne.s 529a <continueFunction+0x97c>
    5294:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5296:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 57c8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    529a:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    529e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    52a0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    52a4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    52a6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    52aa:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    52ac:	|  |  |  |  |  |  |  |                                       jsr 1507a <setVariable>
    52b2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    52b6:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    52ba:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    52bc:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    52be:	|  |  |  |  |  |  |  |                                       movea.l 1c844 <globalVars>,a0
    52c4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    52c8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    52ca:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    52cc:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    52ce:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    52d2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    52d4:	|  |  |  |  |  |  |  |                                       jsr 1507a <setVariable>
    52da:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    52de:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    52e2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    52e6:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    52ea:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    52ee:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    52f0:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    52f2:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    52f4:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    52f8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    52fa:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    52fc:	|  |  |  |  |  |  |  |                                       jsr 14c42 <copyVariable>
    5302:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5304:	|  |  |  |  |  |  |  |                                       tst.w d0
    5306:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 5790 <continueFunction+0xe72>
    530a:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    530c:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 57c8 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5310:	|  |  |  |  |  |  |  |  |                                    move.l 1c844 <globalVars>,d1
    5316:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    531a:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    531c:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    531e:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5320:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5324:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5326:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5328:	|  |  |  |  |  |  |  |  |                                    jsr 14c42 <copyVariable>
    532e:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5330:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5332:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 5794 <continueFunction+0xe76>
    5336:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5338:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 57c8 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    533c:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    533e:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5342:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c844 <globalVars>,a0
    5348:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    534c:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    534e:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5350:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5352:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5354:	|  |  |  |  |  |  |  |  |  |                                 jsr 14c42 <copyVariable>
    535a:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    535c:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    535e:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 5798 <continueFunction+0xe7a>
    5362:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5364:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 57c8 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5368:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    536a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    536e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5370:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5374:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5376:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5378:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13fc4 <addVarToStack>
    537e:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5380:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5382:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 579c <continueFunction+0xe7e>
    5386:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5388:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 57c8 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    538c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    538e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5392:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5394:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5398:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    539a:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    539c:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 1404a <addVarToStackQuick>
    53a2:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    53a4:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    53a6:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 57a0 <continueFunction+0xe82>
    53aa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    53ac:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 57c8 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    53b0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    53b2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    53b6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    53b8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14cc8 <getBoolean>
    53be:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    53c0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    53c2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    53c4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    53c6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    53c8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    53ca:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    53cc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    53d0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    53d2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    53d6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    53d8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1507a <setVariable>
    53de:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    53e2:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    53e6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    53e8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    53ec:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    53ee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14cc8 <getBoolean>
    53f4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    53f6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    53f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 57a4 <continueFunction+0xe86>
				advanceNow = FALSE;
    53fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    540a:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 57a4 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    540e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    541c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 57a6 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5428:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    542c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14788 <getValueType>
    5438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    543c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    543e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 5446 <continueFunction+0xb28>
    5440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5442:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 57c8 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    544a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    544c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    544e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    5456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    545a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    545c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1507a <setVariable>
    5462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    5466:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 57a6 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    546a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    546e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 575c <continueFunction+0xe3e>
    5476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    547c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 54f8 <continueFunction+0xbda>
    547e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 5542 <continueFunction+0xc24>
    5488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    548a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    548e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 549c <continueFunction+0xb7e>
    5490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    5496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 54ca <continueFunction+0xbac>
    5498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5542 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    549c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    549e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    54a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    54a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    54aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    54ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    54ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 140be <addVariablesInSecond>
    54b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    54b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    54b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    54bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    54be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1510c <trimStack>
    54c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    54c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 5770 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    54ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    54cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    54d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    54d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    54d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    54da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    54dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1417c <compareVariablesInSecond>
    54e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    54e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    54e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    54ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    54ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1510c <trimStack>
    54f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    54f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 5770 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    54f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    54fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    54fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    550a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1417c <compareVariablesInSecond>
    5510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    551a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1510c <trimStack>
    5520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5526:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    552a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    552c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    552e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    553a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    553e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 5770 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    5546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    554a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    554c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14788 <getValueType>
    555c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 556a <continueFunction+0xc4c>
    5564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5566:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 57c8 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    556a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    556c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    557a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    557c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14788 <getValueType>
    5582:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 5590 <continueFunction+0xc72>
    558a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    558c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 57c8 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    5592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1510c <trimStack>
    559e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    55a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    55a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    55a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    55a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    55aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 576e <continueFunction+0xe50>
    55ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    55b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    55b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #21950,a0
    55b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    55ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (55be <continueFunction+0xca0>,pc,d0.w)
    55be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    55c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    55c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    55cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    55ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    55d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    55de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    55e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    55ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    55f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    55f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17b6e <__mulsi3>
    5600:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5606:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    560a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    560c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5612:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1507a <setVariable>
    5618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    561c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5770 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5620:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5628:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    562a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    562c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1507a <setVariable>
    563e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5770 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5646:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    564a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    564e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5652:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17c1a <__modsi3>
    5658:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    565a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    565c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    565e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5668:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    566a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1507a <setVariable>
    5670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5770 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    5678:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    567c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5684:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17bec <__divsi3>
    568a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    568c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    568e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5694:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    569a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    569c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1507a <setVariable>
    56a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5770 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    56aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    56ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    56b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    56b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    56b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    56ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    56bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1507a <setVariable>
    56d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5770 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    56d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    56dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    56e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    56e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    56e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    56e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    56ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1507a <setVariable>
    56fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5770 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5704:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    570c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    570e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5710:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5712:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5714:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5716:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5718:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    571c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    571e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5722:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5724:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1507a <setVariable>
    572a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    572e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5770 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5730:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5734:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5738:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    573a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    573c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    573e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5740:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5742:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5744:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5748:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    574a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    574e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5750:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1507a <setVariable>
    5756:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    575a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5770 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    575c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 18809 <PutChar+0xb85>
    5762:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 171b0 <KPrintF>
    5768:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    576a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    576c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 57c8 <continueFunction+0xeaa>
						break;
    576e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    5770:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 57a6 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    5772:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 18821 <PutChar+0xb9d>
    5778:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 171b0 <KPrintF>
    577e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5780:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5782:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 57c8 <continueFunction+0xeaa>
			break;
    5784:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    5786:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 57a6 <continueFunction+0xe88>
			break;
    5788:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    578a:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 57a6 <continueFunction+0xe88>
			break;
    578c:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    578e:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 57a6 <continueFunction+0xe88>
			break;
    5790:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    5792:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 57a6 <continueFunction+0xe88>
			break;
    5794:	|  |  |     |              \--|--|--|--|-------------------> nop
    5796:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 57a6 <continueFunction+0xe88>
			break;
    5798:	|  |  |     |                 \--|--|--|-------------------> nop
    579a:	|  |  |     +--------------------|--|--|-------------------- bra.s 57a6 <continueFunction+0xe88>
			break;
    579c:	|  |  |     |                    \--|--|-------------------> nop
    579e:	|  |  |     +-----------------------|--|-------------------- bra.s 57a6 <continueFunction+0xe88>
			break;
    57a0:	|  |  |     |                       \--|-------------------> nop
    57a2:	|  |  |     +--------------------------|-------------------- bra.s 57a6 <continueFunction+0xe88>
			break;
    57a4:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    57a6:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    57aa:	+--|--|----------------------------------------------------- beq.s 57be <continueFunction+0xea0>
    57ac:	|  |  |                                                      movea.l 80(sp),a0
    57b0:	|  |  |                                                      move.l 36(a0),d0
    57b4:	|  |  |                                                      addq.l #1,d0
    57b6:	|  |  |                                                      movea.l 80(sp),a0
    57ba:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    57be:	\--|--|----------------------------------------------------> tst.w 74(sp)
    57c2:	   |  \----------------------------------------------------- bne.w 4946 <continueFunction+0x28>

	}
	return TRUE;
    57c6:	   |                                                         moveq #1,d0
}
    57c8:	   \-------------------------------------------------------> lea 76(sp),sp
    57cc:	                                                             rts

000057ce <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    57ce:	          lea -16(sp),sp
    57d2:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    57d4:	          move.l 24(sp),-(sp)
    57d8:	          jsr 68f4 <pauseFunction>
    57de:	          addq.l #4,sp
	if (fun -> stack) 
    57e0:	          movea.l 24(sp),a0
    57e4:	          move.l 24(a0),d0
    57e8:	      /-- beq.s 57fc <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    57ea:	      |   pea 1884d <PutChar+0xbc9>
    57f0:	      |   jsr 171b0 <KPrintF>
    57f6:	      |   addq.l #4,sp
		return;
    57f8:	/-----|-- bra.w 5896 <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    57fc:	|     \-> movea.l 24(sp),a0
    5800:	|         move.l 4(a0),12(sp)
    5806:	|         move.l 1c896 <SysBase>,d0
    580c:	|         movea.l d0,a6
    580e:	|         movea.l 12(sp),a1
    5812:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5816:	|         clr.l 16(sp)
    581a:	|     /-- bra.s 583a <finishFunction+0x6c>
    581c:	|  /--|-> movea.l 24(sp),a0
    5820:	|  |  |   move.l 20(a0),d1
    5824:	|  |  |   move.l 16(sp),d0
    5828:	|  |  |   lsl.l #3,d0
    582a:	|  |  |   add.l d1,d0
    582c:	|  |  |   move.l d0,-(sp)
    582e:	|  |  |   jsr 149d6 <unlinkVar>
    5834:	|  |  |   addq.l #4,sp
    5836:	|  |  |   addq.l #1,16(sp)
    583a:	|  |  \-> movea.l 24(sp),a0
    583e:	|  |      move.l 8(a0),d0
    5842:	|  |      cmp.l 16(sp),d0
    5846:	|  \----- bgt.s 581c <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    5848:	|         movea.l 24(sp),a0
    584c:	|         move.l 8(a0),d0
    5850:	|     /-- ble.s 586c <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    5852:	|     |   movea.l 24(sp),a0
    5856:	|     |   move.l 20(a0),8(sp)
    585c:	|     |   move.l 1c896 <SysBase>,d0
    5862:	|     |   movea.l d0,a6
    5864:	|     |   movea.l 8(sp),a1
    5868:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    586c:	|     \-> moveq #28,d0
    586e:	|         add.l 24(sp),d0
    5872:	|         move.l d0,-(sp)
    5874:	|         jsr 149d6 <unlinkVar>
    587a:	|         addq.l #4,sp
	FreeVec(fun);
    587c:	|         move.l 24(sp),4(sp)
    5882:	|         move.l 1c896 <SysBase>,d0
    5888:	|         movea.l d0,a6
    588a:	|         movea.l 4(sp),a1
    588e:	|         jsr -690(a6)
	fun = NULL;
    5892:	|         clr.l 24(sp)
}
    5896:	\-------> movea.l (sp)+,a6
    5898:	          lea 16(sp),sp
    589c:	          rts

0000589e <freezeSubs>:

void freezeSubs () {
    589e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    58a0:	          move.l 1c82e <allRunningFunctions>,(sp)

	while (thisFunction) {
    58a6:	   /----- bra.s 58c4 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    58a8:	/--|----> movea.l (sp),a0
    58aa:	|  |      move.w 52(a0),d0
    58ae:	|  |  /-- bne.s 58be <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    58b0:	|  |  |   movea.l (sp),a0
    58b2:	|  |  |   move.b 56(a0),d0
    58b6:	|  |  |   addq.b #1,d0
    58b8:	|  |  |   movea.l (sp),a0
    58ba:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    58be:	|  |  \-> movea.l (sp),a0
    58c0:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    58c4:	|  \----> tst.l (sp)
    58c6:	\-------- bne.s 58a8 <freezeSubs+0xa>
	}
}
    58c8:	          nop
    58ca:	          nop
    58cc:	          addq.l #4,sp
    58ce:	          rts

000058d0 <handleInput>:

BOOL handleInput () {
    58d0:	             lea -16(sp),sp
    58d4:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    58d6:	             move.l 1c9aa <overRegion>,d0
    58dc:	         /-- bne.s 58e4 <handleInput+0x14>
    58de:	         |   jsr 1594c <getOverRegion>

	if (input.justMoved) {
    58e4:	         \-> move.w 1c84c <input+0x4>,d0
    58ea:	         /-- beq.s 5928 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    58ec:	         |   movea.l 1c20e <currentEvents>,a0
    58f2:	         |   move.l 16(a0),d0
    58f6:	         +-- beq.s 5928 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    58f8:	         |   move.l 1c866 <noStack>,d1
    58fe:	         |   movea.l 1c20e <currentEvents>,a0
    5904:	         |   move.l 16(a0),d0
    5908:	         |   pea 1 <_start+0x1>
    590c:	         |   move.l d1,-(sp)
    590e:	         |   clr.l -(sp)
    5910:	         |   clr.l -(sp)
    5912:	         |   move.l d0,-(sp)
    5914:	         |   jsr 6b82 <startNewFunctionNum>
    591a:	         |   lea 20(sp),sp
    591e:	         |   tst.l d0
    5920:	         +-- bne.s 5928 <handleInput+0x58>
    5922:	         |   clr.w d0
    5924:	/--------|-- bra.w 5b2e <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    5928:	|        \-> clr.w 1c84c <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    592e:	|            move.l 1c85e <lastRegion>,d1
    5934:	|            move.l 1c9aa <overRegion>,d0
    593a:	|            cmp.l d1,d0
    593c:	|  /-------- beq.w 5a14 <handleInput+0x144>
    5940:	|  |         movea.l 1c20e <currentEvents>,a0
    5946:	|  |         move.l 20(a0),d0
    594a:	|  +-------- beq.w 5a14 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    594e:	|  |         moveq #12,d0
    5950:	|  |         move.l d0,16(sp)
    5954:	|  |         clr.l 12(sp)
    5958:	|  |         move.l 1c896 <SysBase>,d0
    595e:	|  |         movea.l d0,a6
    5960:	|  |         move.l 16(sp),d0
    5964:	|  |         move.l 12(sp),d1
    5968:	|  |         jsr -684(a6)
    596c:	|  |         move.l d0,8(sp)
    5970:	|  |         move.l 8(sp),d0
    5974:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    5978:	|  |         move.l 4(sp),d0
    597c:	|  |     /-- bne.s 5992 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    597e:	|  |     |   pea 18873 <PutChar+0xbef>
    5984:	|  |     |   jsr 171b0 <KPrintF>
    598a:	|  |     |   addq.l #4,sp
			return FALSE;
    598c:	|  |     |   clr.w d0
    598e:	+--|-----|-- bra.w 5b2e <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    5992:	|  |     \-> movea.l 4(sp),a0
    5996:	|  |         clr.l (a0)
		if (overRegion) {
    5998:	|  |         move.l 1c9aa <overRegion>,d0
    599e:	|  |  /----- beq.s 59c6 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    59a0:	|  |  |      movea.l 1c9aa <overRegion>,a0
    59a6:	|  |  |      movea.l 28(a0),a0
    59aa:	|  |  |      move.l 4(a0),d1
    59ae:	|  |  |      move.l 4(sp),d0
    59b2:	|  |  |      move.l d1,-(sp)
    59b4:	|  |  |      pea 7 <_start+0x7>
    59b8:	|  |  |      move.l d0,-(sp)
    59ba:	|  |  |      jsr 1507a <setVariable>
    59c0:	|  |  |      lea 12(sp),sp
    59c4:	|  |  |  /-- bra.s 59dc <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    59c6:	|  |  \--|-> move.l 4(sp),d0
    59ca:	|  |     |   clr.l -(sp)
    59cc:	|  |     |   pea 1 <_start+0x1>
    59d0:	|  |     |   move.l d0,-(sp)
    59d2:	|  |     |   jsr 1507a <setVariable>
    59d8:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    59dc:	|  |     \-> movea.l 4(sp),a0
    59e0:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    59e4:	|  |         movea.l 1c20e <currentEvents>,a0
    59ea:	|  |         move.l 20(a0),d0
    59ee:	|  |         pea 1 <_start+0x1>
    59f2:	|  |         lea 8(sp),a0
    59f6:	|  |         move.l a0,-(sp)
    59f8:	|  |         clr.l -(sp)
    59fa:	|  |         pea 1 <_start+0x1>
    59fe:	|  |         move.l d0,-(sp)
    5a00:	|  |         jsr 6b82 <startNewFunctionNum>
    5a06:	|  |         lea 20(sp),sp
    5a0a:	|  |         tst.l d0
    5a0c:	|  +-------- bne.s 5a14 <handleInput+0x144>
    5a0e:	|  |         clr.w d0
    5a10:	+--|-------- bra.w 5b2e <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    5a14:	|  \-------> move.w 1c84e <input+0x6>,d0
    5a1a:	|        /-- beq.s 5a58 <handleInput+0x188>
    5a1c:	|        |   movea.l 1c20e <currentEvents>,a0
    5a22:	|        |   move.l 4(a0),d0
    5a26:	|        +-- beq.s 5a58 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a28:	|        |   move.l 1c866 <noStack>,d1
    5a2e:	|        |   movea.l 1c20e <currentEvents>,a0
    5a34:	|        |   move.l 4(a0),d0
    5a38:	|        |   pea 1 <_start+0x1>
    5a3c:	|        |   move.l d1,-(sp)
    5a3e:	|        |   clr.l -(sp)
    5a40:	|        |   clr.l -(sp)
    5a42:	|        |   move.l d0,-(sp)
    5a44:	|        |   jsr 6b82 <startNewFunctionNum>
    5a4a:	|        |   lea 20(sp),sp
    5a4e:	|        |   tst.l d0
    5a50:	|        +-- bne.s 5a58 <handleInput+0x188>
    5a52:	|        |   clr.w d0
    5a54:	+--------|-- bra.w 5b2e <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    5a58:	|        \-> move.w 1c850 <input+0x8>,d0
    5a5e:	|        /-- beq.s 5a9c <handleInput+0x1cc>
    5a60:	|        |   movea.l 1c20e <currentEvents>,a0
    5a66:	|        |   move.l 12(a0),d0
    5a6a:	|        +-- beq.s 5a9c <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a6c:	|        |   move.l 1c866 <noStack>,d1
    5a72:	|        |   movea.l 1c20e <currentEvents>,a0
    5a78:	|        |   move.l 12(a0),d0
    5a7c:	|        |   pea 1 <_start+0x1>
    5a80:	|        |   move.l d1,-(sp)
    5a82:	|        |   clr.l -(sp)
    5a84:	|        |   clr.l -(sp)
    5a86:	|        |   move.l d0,-(sp)
    5a88:	|        |   jsr 6b82 <startNewFunctionNum>
    5a8e:	|        |   lea 20(sp),sp
    5a92:	|        |   tst.l d0
    5a94:	|        +-- bne.s 5a9c <handleInput+0x1cc>
    5a96:	|        |   clr.w d0
    5a98:	+--------|-- bra.w 5b2e <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    5a9c:	|        \-> move.w 1c848 <input>,d0
    5aa2:	|        /-- beq.s 5ada <handleInput+0x20a>
    5aa4:	|        |   movea.l 1c20e <currentEvents>,a0
    5aaa:	|        |   move.l (a0),d0
    5aac:	|        +-- beq.s 5ada <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5aae:	|        |   move.l 1c866 <noStack>,d1
    5ab4:	|        |   movea.l 1c20e <currentEvents>,a0
    5aba:	|        |   move.l (a0),d0
    5abc:	|        |   pea 1 <_start+0x1>
    5ac0:	|        |   move.l d1,-(sp)
    5ac2:	|        |   clr.l -(sp)
    5ac4:	|        |   clr.l -(sp)
    5ac6:	|        |   move.l d0,-(sp)
    5ac8:	|        |   jsr 6b82 <startNewFunctionNum>
    5ace:	|        |   lea 20(sp),sp
    5ad2:	|        |   tst.l d0
    5ad4:	|        +-- bne.s 5ada <handleInput+0x20a>
    5ad6:	|        |   clr.w d0
    5ad8:	+--------|-- bra.s 5b2e <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5ada:	|        \-> move.w 1c84a <input+0x2>,d0
    5ae0:	|        /-- beq.s 5b1c <handleInput+0x24c>
    5ae2:	|        |   movea.l 1c20e <currentEvents>,a0
    5ae8:	|        |   move.l 8(a0),d0
    5aec:	|        +-- beq.s 5b1c <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5aee:	|        |   move.l 1c866 <noStack>,d1
    5af4:	|        |   movea.l 1c20e <currentEvents>,a0
    5afa:	|        |   move.l 8(a0),d0
    5afe:	|        |   pea 1 <_start+0x1>
    5b02:	|        |   move.l d1,-(sp)
    5b04:	|        |   clr.l -(sp)
    5b06:	|        |   clr.l -(sp)
    5b08:	|        |   move.l d0,-(sp)
    5b0a:	|        |   jsr 6b82 <startNewFunctionNum>
    5b10:	|        |   lea 20(sp),sp
    5b14:	|        |   tst.l d0
    5b16:	|        +-- bne.s 5b1c <handleInput+0x24c>
    5b18:	|        |   clr.w d0
    5b1a:	+--------|-- bra.s 5b2e <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5b1c:	|        \-> move.l 1c9aa <overRegion>,d0
    5b22:	|            move.l d0,1c85e <lastRegion>
	return runSludge ();
    5b28:	|            jsr 6950 <runSludge>
}
    5b2e:	\----------> movea.l (sp)+,a6
    5b30:	             lea 16(sp),sp
    5b34:	             rts

00005b36 <initSludge>:

BOOL initSludge (char * filename) {
    5b36:	             lea -292(sp),sp
    5b3a:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    5b3e:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5b42:	             jsr ad62 <makeNullAnim>
    5b48:	             move.l d0,1c79c <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    5b4e:	             pea 1c840 <gameVersion>
    5b54:	             pea 188a9 <PutChar+0xc25>
    5b5a:	             pea 45 <_start+0x45>
    5b5e:	             pea 47 <_start+0x47>
    5b62:	             move.l 332(sp),-(sp)
    5b66:	             jsr 6584 <openAndVerify>
    5b6c:	             lea 20(sp),sp
    5b70:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5b74:	         /-- bne.s 5b7c <initSludge+0x46>
    5b76:	         |   clr.w d0
    5b78:	/--------|-- bra.w 62a4 <initSludge+0x76e>
	if (FGetC (fp)) {
    5b7c:	|        \-> move.l 288(sp),284(sp)
    5b82:	|            move.l 1c89e <DOSBase>,d0
    5b88:	|            movea.l d0,a6
    5b8a:	|            move.l 284(sp),d1
    5b8e:	|            jsr -306(a6)
    5b92:	|            move.l d0,280(sp)
    5b96:	|            move.l 280(sp),d0
    5b9a:	|  /-------- beq.w 5d44 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    5b9e:	|  |         move.l 288(sp),-(sp)
    5ba2:	|  |         jsr 6bc <get2bytes>
    5ba8:	|  |         addq.l #4,sp
    5baa:	|  |         move.l d0,1c86a <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    5bb0:	|  |         move.l 1c86a <numBIFNames>,d0
    5bb6:	|  |         move.l d0,276(sp)
    5bba:	|  |         clr.l 272(sp)
    5bbe:	|  |         move.l 1c896 <SysBase>,d0
    5bc4:	|  |         movea.l d0,a6
    5bc6:	|  |         move.l 276(sp),d0
    5bca:	|  |         move.l 272(sp),d1
    5bce:	|  |         jsr -684(a6)
    5bd2:	|  |         move.l d0,268(sp)
    5bd6:	|  |         move.l 268(sp),d0
    5bda:	|  |         move.l d0,1c826 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    5be0:	|  |         move.l 1c826 <allBIFNames>,d0
    5be6:	|  |     /-- bne.s 5bee <initSludge+0xb8>
    5be8:	|  |     |   clr.w d0
    5bea:	+--|-----|-- bra.w 62a4 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5bee:	|  |     \-> clr.l 304(sp)
    5bf2:	|  |     /-- bra.s 5c18 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5bf4:	|  |  /--|-> move.l 1c826 <allBIFNames>,d1
    5bfa:	|  |  |  |   move.l 304(sp),d0
    5bfe:	|  |  |  |   add.l d0,d0
    5c00:	|  |  |  |   add.l d0,d0
    5c02:	|  |  |  |   movea.l d1,a2
    5c04:	|  |  |  |   adda.l d0,a2
    5c06:	|  |  |  |   move.l 288(sp),-(sp)
    5c0a:	|  |  |  |   jsr b02 <readString>
    5c10:	|  |  |  |   addq.l #4,sp
    5c12:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5c14:	|  |  |  |   addq.l #1,304(sp)
    5c18:	|  |  |  \-> move.l 1c86a <numBIFNames>,d0
    5c1e:	|  |  |      cmp.l 304(sp),d0
    5c22:	|  |  \----- bgt.s 5bf4 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5c24:	|  |         move.l 288(sp),-(sp)
    5c28:	|  |         jsr 6bc <get2bytes>
    5c2e:	|  |         addq.l #4,sp
    5c30:	|  |         move.l d0,1c876 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5c36:	|  |         move.l 1c876 <numUserFunc>,d0
    5c3c:	|  |         move.l d0,264(sp)
    5c40:	|  |         clr.l 260(sp)
    5c44:	|  |         move.l 1c896 <SysBase>,d0
    5c4a:	|  |         movea.l d0,a6
    5c4c:	|  |         move.l 264(sp),d0
    5c50:	|  |         move.l 260(sp),d1
    5c54:	|  |         jsr -684(a6)
    5c58:	|  |         move.l d0,256(sp)
    5c5c:	|  |         move.l 256(sp),d0
    5c60:	|  |         move.l d0,1c832 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5c66:	|  |         move.l 1c832 <allUserFunc>,d0
    5c6c:	|  |     /-- bne.s 5c74 <initSludge+0x13e>
    5c6e:	|  |     |   clr.w d0
    5c70:	+--|-----|-- bra.w 62a4 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5c74:	|  |     \-> clr.l 300(sp)
    5c78:	|  |     /-- bra.s 5c9e <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5c7a:	|  |  /--|-> move.l 1c832 <allUserFunc>,d1
    5c80:	|  |  |  |   move.l 300(sp),d0
    5c84:	|  |  |  |   add.l d0,d0
    5c86:	|  |  |  |   add.l d0,d0
    5c88:	|  |  |  |   movea.l d1,a2
    5c8a:	|  |  |  |   adda.l d0,a2
    5c8c:	|  |  |  |   move.l 288(sp),-(sp)
    5c90:	|  |  |  |   jsr b02 <readString>
    5c96:	|  |  |  |   addq.l #4,sp
    5c98:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5c9a:	|  |  |  |   addq.l #1,300(sp)
    5c9e:	|  |  |  \-> move.l 1c876 <numUserFunc>,d0
    5ca4:	|  |  |      cmp.l 300(sp),d0
    5ca8:	|  |  \----- bgt.s 5c7a <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    5caa:	|  |         move.l 1c840 <gameVersion>,d0
    5cb0:	|  |         cmpi.l #258,d0
    5cb6:	|  +-------- ble.w 5d44 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    5cba:	|  |         move.l 288(sp),-(sp)
    5cbe:	|  |         jsr 6bc <get2bytes>
    5cc4:	|  |         addq.l #4,sp
    5cc6:	|  |         move.l d0,1c872 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    5ccc:	|  |         move.l 1c872 <numResourceNames>,d0
    5cd2:	|  |         add.l d0,d0
    5cd4:	|  |         add.l d0,d0
    5cd6:	|  |         move.l d0,252(sp)
    5cda:	|  |         clr.l 248(sp)
    5cde:	|  |         move.l 1c896 <SysBase>,d0
    5ce4:	|  |         movea.l d0,a6
    5ce6:	|  |         move.l 252(sp),d0
    5cea:	|  |         move.l 248(sp),d1
    5cee:	|  |         jsr -684(a6)
    5cf2:	|  |         move.l d0,244(sp)
    5cf6:	|  |         move.l 244(sp),d0
    5cfa:	|  |         move.l d0,1c82a <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5d00:	|  |         move.l 1c82a <allResourceNames>,d0
    5d06:	|  |     /-- bne.s 5d0e <initSludge+0x1d8>
    5d08:	|  |     |   clr.w d0
    5d0a:	+--|-----|-- bra.w 62a4 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5d0e:	|  |     \-> clr.l 296(sp)
    5d12:	|  |     /-- bra.s 5d38 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5d14:	|  |  /--|-> move.l 1c82a <allResourceNames>,d1
    5d1a:	|  |  |  |   move.l 296(sp),d0
    5d1e:	|  |  |  |   add.l d0,d0
    5d20:	|  |  |  |   add.l d0,d0
    5d22:	|  |  |  |   movea.l d1,a2
    5d24:	|  |  |  |   adda.l d0,a2
    5d26:	|  |  |  |   move.l 288(sp),-(sp)
    5d2a:	|  |  |  |   jsr b02 <readString>
    5d30:	|  |  |  |   addq.l #4,sp
    5d32:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5d34:	|  |  |  |   addq.l #1,296(sp)
    5d38:	|  |  |  \-> move.l 1c872 <numResourceNames>,d0
    5d3e:	|  |  |      cmp.l 296(sp),d0
    5d42:	|  |  \----- bgt.s 5d14 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5d44:	|  \-------> move.l #129,1c852 <input+0xa>
	input.mouseY = 100;
    5d4e:	|            moveq #100,d0
    5d50:	|            move.l d0,1c856 <input+0xe>
	winWidth = get2bytes (fp);
    5d56:	|            move.l 288(sp),-(sp)
    5d5a:	|            jsr 6bc <get2bytes>
    5d60:	|            addq.l #4,sp
    5d62:	|            move.l d0,1c7ea <winWidth>
	winHeight = get2bytes (fp);
    5d68:	|            move.l 288(sp),-(sp)
    5d6c:	|            jsr 6bc <get2bytes>
    5d72:	|            addq.l #4,sp
    5d74:	|            move.l d0,1c7ee <winHeight>
	specialSettings = FGetC (fp);
    5d7a:	|            move.l 288(sp),240(sp)
    5d80:	|            move.l 1c89e <DOSBase>,d0
    5d86:	|            movea.l d0,a6
    5d88:	|            move.l 240(sp),d1
    5d8c:	|            jsr -306(a6)
    5d90:	|            move.l d0,236(sp)
    5d94:	|            move.l 236(sp),d0
    5d98:	|            move.l d0,1c87a <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5d9e:	|            move.l 288(sp),232(sp)
    5da4:	|            move.l 1c89e <DOSBase>,d0
    5daa:	|            movea.l d0,a6
    5dac:	|            move.l 232(sp),d1
    5db0:	|            jsr -306(a6)
    5db4:	|            move.l d0,228(sp)
    5db8:	|            move.l 228(sp),d0
    5dbc:	|            move.l d0,-(sp)
    5dbe:	|            pea 3e8 <encodeFilename+0xea>
    5dc2:	|            jsr 17bec <__divsi3>
    5dc8:	|            addq.l #8,sp
    5dca:	|            move.l d0,1c224 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5dd0:	|            move.l 288(sp),-(sp)
    5dd4:	|            jsr b02 <readString>
    5dda:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5ddc:	|            move.l 288(sp),224(sp)
    5de2:	|            move.l #116792,220(sp)
    5dea:	|            moveq #8,d1
    5dec:	|            move.l d1,216(sp)
    5df0:	|            moveq #1,d0
    5df2:	|            move.l d0,212(sp)
    5df6:	|            move.l 1c89e <DOSBase>,d0
    5dfc:	|            movea.l d0,a6
    5dfe:	|            move.l 224(sp),d1
    5e02:	|            move.l 220(sp),d2
    5e06:	|            move.l 216(sp),d3
    5e0a:	|            move.l 212(sp),d4
    5e0e:	|            jsr -324(a6)
    5e12:	|            move.l d0,208(sp)
    5e16:	|            move.l 208(sp),d0
    5e1a:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5e1e:	|            moveq #1,d1
    5e20:	|            cmp.l 204(sp),d1
    5e24:	|        /-- beq.s 5e34 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5e26:	|        |   pea 188e2 <PutChar+0xc5e>
    5e2c:	|        |   jsr 171b0 <KPrintF>
    5e32:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5e34:	|        \-> move.l 1c840 <gameVersion>,d0
    5e3a:	|            cmpi.l #258,d0
    5e40:	|        /-- ble.s 5e50 <initSludge+0x31a>
    5e42:	|        |   move.l 288(sp),-(sp)
    5e46:	|        |   jsr b02 <readString>
    5e4c:	|        |   addq.l #4,sp
    5e4e:	|     /--|-- bra.s 5e64 <initSludge+0x32e>
    5e50:	|     |  \-> pea 18900 <PutChar+0xc7c>
    5e56:	|     |      pea 18900 <PutChar+0xc7c>
    5e5c:	|     |      jsr 13cb4 <joinStrings>
    5e62:	|     |      addq.l #8,sp
    5e64:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5e68:	|            move.l 1c840 <gameVersion>,d0
    5e6e:	|            cmpi.l #258,d0
    5e74:	|     /----- ble.s 5e96 <initSludge+0x360>
    5e76:	|     |      move.l 288(sp),196(sp)
    5e7c:	|     |      move.l 1c89e <DOSBase>,d0
    5e82:	|     |      movea.l d0,a6
    5e84:	|     |      move.l 196(sp),d1
    5e88:	|     |      jsr -306(a6)
    5e8c:	|     |      move.l d0,192(sp)
    5e90:	|     |      move.l 192(sp),d0
    5e94:	|     |  /-- bra.s 5e98 <initSludge+0x362>
    5e96:	|     \--|-> moveq #0,d0
    5e98:	|        \-> move.l d0,1c976 <gameSettings+0x4>
	makeLanguageTable (fp);
    5e9e:	|            move.l 288(sp),-(sp)
    5ea2:	|            jsr 1366a <makeLanguageTable>
    5ea8:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5eaa:	|            move.l 1c840 <gameVersion>,d0
    5eb0:	|            cmpi.l #261,d0
    5eb6:	|        /-- ble.s 5f04 <initSludge+0x3ce>
	{
		FGetC(fp);
    5eb8:	|        |   move.l 288(sp),188(sp)
    5ebe:	|        |   move.l 1c89e <DOSBase>,d0
    5ec4:	|        |   movea.l d0,a6
    5ec6:	|        |   move.l 188(sp),d1
    5eca:	|        |   jsr -306(a6)
    5ece:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5ed2:	|        |   move.l 288(sp),180(sp)
    5ed8:	|        |   move.l 1c89e <DOSBase>,d0
    5ede:	|        |   movea.l d0,a6
    5ee0:	|        |   move.l 180(sp),d1
    5ee4:	|        |   jsr -306(a6)
    5ee8:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5eec:	|        |   move.l 288(sp),-(sp)
    5ef0:	|        |   jsr 7d8 <getFloat>
    5ef6:	|        |   addq.l #4,sp
		getFloat (fp);
    5ef8:	|        |   move.l 288(sp),-(sp)
    5efc:	|        |   jsr 7d8 <getFloat>
    5f02:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5f04:	|        \-> move.l 288(sp),-(sp)
    5f08:	|            jsr b02 <readString>
    5f0e:	|            addq.l #4,sp
    5f10:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5f14:	|            pea 18901 <PutChar+0xc7d>
    5f1a:	|            move.l 176(sp),-(sp)
    5f1e:	|            jsr 13c34 <strcmp>
    5f24:	|            addq.l #8,sp
    5f26:	|            tst.l d0
    5f28:	|        /-- beq.s 5f30 <initSludge+0x3fa>
		return FALSE;
    5f2a:	|        |   clr.w d0
    5f2c:	+--------|-- bra.w 62a4 <initSludge+0x76e>
	}
	FreeVec( checker);
    5f30:	|        \-> move.l 172(sp),168(sp)
    5f36:	|            move.l 1c896 <SysBase>,d0
    5f3c:	|            movea.l d0,a6
    5f3e:	|            movea.l 168(sp),a1
    5f42:	|            jsr -690(a6)
	checker = NULL;
    5f46:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5f4a:	|            move.l 288(sp),164(sp)
    5f50:	|            move.l 1c89e <DOSBase>,d0
    5f56:	|            movea.l d0,a6
    5f58:	|            move.l 164(sp),d1
    5f5c:	|            jsr -306(a6)
    5f60:	|            move.l d0,160(sp)
    5f64:	|            move.l 160(sp),d0
    5f68:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5f6c:	|            moveq #0,d0
    5f6e:	|            move.b 159(sp),d0
    5f72:	|            moveq #1,d1
    5f74:	|            and.l d1,d0
    5f76:	|        /-- beq.s 5fce <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5f78:	|        |   move.l 1c89e <DOSBase>,d0
    5f7e:	|        |   movea.l d0,a6
    5f80:	|        |   jsr -60(a6)
    5f84:	|        |   move.l d0,38(sp)
    5f88:	|        |   move.l 38(sp),d0
    5f8c:	|        |   move.l d0,34(sp)
    5f90:	|        |   move.l #100617,30(sp)
    5f98:	|        |   moveq #54,d0
    5f9a:	|        |   move.l d0,26(sp)
    5f9e:	|        |   move.l 1c89e <DOSBase>,d0
    5fa4:	|        |   movea.l d0,a6
    5fa6:	|        |   move.l 34(sp),d1
    5faa:	|        |   move.l 30(sp),d2
    5fae:	|        |   move.l 26(sp),d3
    5fb2:	|        |   jsr -48(a6)
    5fb6:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5fba:	|        |   pea 18940 <PutChar+0xcbc>
    5fc0:	|        |   jsr 171b0 <KPrintF>
    5fc6:	|        |   addq.l #4,sp
		return FALSE;
    5fc8:	|        |   clr.w d0
    5fca:	+--------|-- bra.w 62a4 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5fce:	|        \-> move.l 288(sp),-(sp)
    5fd2:	|            jsr 6bc <get2bytes>
    5fd8:	|            addq.l #4,sp
    5fda:	|            move.l d0,1c86e <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5fe0:	|            move.l 1c86e <numGlobals>,d0
    5fe6:	|            lsl.l #3,d0
    5fe8:	|            move.l d0,154(sp)
    5fec:	|            clr.l 150(sp)
    5ff0:	|            move.l 1c896 <SysBase>,d0
    5ff6:	|            movea.l d0,a6
    5ff8:	|            move.l 154(sp),d0
    5ffc:	|            move.l 150(sp),d1
    6000:	|            jsr -684(a6)
    6004:	|            move.l d0,146(sp)
    6008:	|            move.l 146(sp),d0
    600c:	|            move.l d0,1c844 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6012:	|            move.l 1c844 <globalVars>,d0
    6018:	|        /-- bne.s 6036 <initSludge+0x500>
    601a:	|        |   move.l 1c86e <numGlobals>,d0
    6020:	|        +-- ble.s 6036 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6022:	|        |   pea 18978 <PutChar+0xcf4>
    6028:	|        |   jsr 171b0 <KPrintF>
    602e:	|        |   addq.l #4,sp
		return FALSE;
    6030:	|        |   clr.w d0
    6032:	+--------|-- bra.w 62a4 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6036:	|        \-> clr.l 308(sp)
    603a:	|        /-- bra.s 6052 <initSludge+0x51c>
    603c:	|     /--|-> move.l 1c844 <globalVars>,d1
    6042:	|     |  |   move.l 308(sp),d0
    6046:	|     |  |   lsl.l #3,d0
    6048:	|     |  |   movea.l d1,a0
    604a:	|     |  |   adda.l d0,a0
    604c:	|     |  |   clr.l (a0)
    604e:	|     |  |   addq.l #1,308(sp)
    6052:	|     |  \-> move.l 1c86e <numGlobals>,d0
    6058:	|     |      cmp.l 308(sp),d0
    605c:	|     \----- bgt.s 603c <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    605e:	|            move.l 1c976 <gameSettings+0x4>,d0
    6064:	|            clr.l -(sp)
    6066:	|            move.l d0,-(sp)
    6068:	|            move.l 296(sp),-(sp)
    606c:	|            jsr 7072 <setFileIndices>
    6072:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6076:	|            pea 1 <_start+0x1>
    607a:	|            jsr 6d2c <getNumberedString>
    6080:	|            addq.l #4,sp
    6082:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6086:	|            move.l 142(sp),-(sp)
    608a:	|            jsr 2fe <encodeFilename>
    6090:	|            addq.l #4,sp
    6092:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6096:	|            move.l 142(sp),134(sp)
    609c:	|            move.l 1c896 <SysBase>,d0
    60a2:	|            movea.l d0,a6
    60a4:	|            movea.l 134(sp),a1
    60a8:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    60ac:	|            move.l 138(sp),130(sp)
    60b2:	|            move.l 1c89e <DOSBase>,d0
    60b8:	|            movea.l d0,a6
    60ba:	|            move.l 130(sp),d1
    60be:	|            jsr -120(a6)
    60c2:	|            move.l d0,126(sp)
    60c6:	|            move.l 126(sp),d0
    60ca:	|            move.l d0,292(sp)
	if(lock == 0) {
    60ce:	|        /-- bne.s 60fc <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    60d0:	|        |   move.l 138(sp),122(sp)
    60d6:	|        |   moveq #-2,d1
    60d8:	|        |   move.l d1,118(sp)
    60dc:	|        |   move.l 1c89e <DOSBase>,d0
    60e2:	|        |   movea.l d0,a6
    60e4:	|        |   move.l 122(sp),d1
    60e8:	|        |   move.l 118(sp),d2
    60ec:	|        |   jsr -84(a6)
    60f0:	|        |   move.l d0,114(sp)
    60f4:	|        |   move.l 114(sp),d0
    60f8:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    60fc:	|        \-> move.l 292(sp),110(sp)
    6102:	|            move.l 1c89e <DOSBase>,d0
    6108:	|            movea.l d0,a6
    610a:	|            move.l 110(sp),d1
    610e:	|            jsr -126(a6)
    6112:	|            move.l d0,106(sp)
    6116:	|            move.l 106(sp),d0
    611a:	|        /-- bne.s 6176 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    611c:	|        |   move.l 138(sp),-(sp)
    6120:	|        |   pea 189ab <PutChar+0xd27>
    6126:	|        |   jsr 171b0 <KPrintF>
    612c:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    612e:	|        |   move.l 1c89e <DOSBase>,d0
    6134:	|        |   movea.l d0,a6
    6136:	|        |   jsr -60(a6)
    613a:	|        |   move.l d0,58(sp)
    613e:	|        |   move.l 58(sp),d0
    6142:	|        |   move.l d0,54(sp)
    6146:	|        |   move.l #100824,50(sp)
    614e:	|        |   moveq #40,d0
    6150:	|        |   move.l d0,46(sp)
    6154:	|        |   move.l 1c89e <DOSBase>,d0
    615a:	|        |   movea.l d0,a6
    615c:	|        |   move.l 54(sp),d1
    6160:	|        |   move.l 50(sp),d2
    6164:	|        |   move.l 46(sp),d3
    6168:	|        |   jsr -48(a6)
    616c:	|        |   move.l d0,42(sp)
		return FALSE;
    6170:	|        |   clr.w d0
    6172:	+--------|-- bra.w 62a4 <initSludge+0x76e>
	}

	FreeVec(gameName);
    6176:	|        \-> move.l 138(sp),102(sp)
    617c:	|            move.l 1c896 <SysBase>,d0
    6182:	|            movea.l d0,a6
    6184:	|            movea.l 102(sp),a1
    6188:	|            jsr -690(a6)

	readIniFile (filename);
    618c:	|            move.l 316(sp),-(sp)
    6190:	|            jsr 1379e <readIniFile>
    6196:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6198:	|            jsr 13570 <getLanguageForFileB>
    619e:	|            move.l d0,1c212 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    61a4:	|            move.l 1c212 <languageNum>,d0
    61aa:	|        /-- bpl.s 61ba <initSludge+0x684>
    61ac:	|        |   pea 18a01 <PutChar+0xd7d>
    61b2:	|        |   jsr 171b0 <KPrintF>
    61b8:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    61ba:	|        \-> move.l 1c212 <languageNum>,d0
    61c0:	|            move.l d0,d1
    61c2:	|            move.l 1c976 <gameSettings+0x4>,d0
    61c8:	|            move.l d1,-(sp)
    61ca:	|            move.l d0,-(sp)
    61cc:	|            clr.l -(sp)
    61ce:	|            jsr 7072 <setFileIndices>
    61d4:	|            lea 12(sp),sp

	if (dataFol[0]) {
    61d8:	|            movea.l 200(sp),a0
    61dc:	|            move.b (a0),d0
    61de:	|     /----- beq.w 6288 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    61e2:	|     |      move.l 200(sp),-(sp)
    61e6:	|     |      jsr 2fe <encodeFilename>
    61ec:	|     |      addq.l #4,sp
    61ee:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    61f2:	|     |      move.l 98(sp),94(sp)
    61f8:	|     |      move.l 1c89e <DOSBase>,d0
    61fe:	|     |      movea.l d0,a6
    6200:	|     |      move.l 94(sp),d1
    6204:	|     |      jsr -120(a6)
    6208:	|     |      move.l d0,90(sp)
    620c:	|     |      move.l 90(sp),d0
    6210:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6214:	|     |  /-- bne.s 6242 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6216:	|     |  |   move.l 98(sp),86(sp)
    621c:	|     |  |   moveq #-2,d1
    621e:	|     |  |   move.l d1,82(sp)
    6222:	|     |  |   move.l 1c89e <DOSBase>,d0
    6228:	|     |  |   movea.l d0,a6
    622a:	|     |  |   move.l 86(sp),d1
    622e:	|     |  |   move.l 82(sp),d2
    6232:	|     |  |   jsr -84(a6)
    6236:	|     |  |   move.l d0,78(sp)
    623a:	|     |  |   move.l 78(sp),d0
    623e:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6242:	|     |  \-> move.l 292(sp),74(sp)
    6248:	|     |      move.l 1c89e <DOSBase>,d0
    624e:	|     |      movea.l d0,a6
    6250:	|     |      move.l 74(sp),d1
    6254:	|     |      jsr -126(a6)
    6258:	|     |      move.l d0,70(sp)
    625c:	|     |      move.l 70(sp),d0
    6260:	|     |  /-- bne.s 6272 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6262:	|     |  |   move.l 1c89e <DOSBase>,d0
    6268:	|     |  |   movea.l d0,a6
    626a:	|     |  |   jsr -60(a6)
    626e:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6272:	|     |  \-> move.l 98(sp),62(sp)
    6278:	|     |      move.l 1c896 <SysBase>,d0
    627e:	|     |      movea.l d0,a6
    6280:	|     |      movea.l 62(sp),a1
    6284:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6288:	|     \----> movea.l 1c7ee <winHeight>,a0
    628e:	|            lea -15(a0),a0
    6292:	|            move.l a0,d0
    6294:	|            move.l d0,-(sp)
    6296:	|            pea a <_start+0xa>
    629a:	|            jsr 7ab2 <positionStatus>
    62a0:	|            addq.l #8,sp

	return TRUE;
    62a2:	|            moveq #1,d0
}
    62a4:	\----------> movem.l (sp)+,d2-d4/a2/a6
    62a8:	             lea 292(sp),sp
    62ac:	             rts

000062ae <killSpeechTimers>:

void killSpeechTimers () {
    62ae:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    62b0:	          move.l 1c82e <allRunningFunctions>,(sp)

	while (thisFunction) {
    62b6:	   /----- bra.s 62e2 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    62b8:	/--|----> movea.l (sp),a0
    62ba:	|  |      move.b 56(a0),d0
    62be:	|  |  /-- bne.s 62dc <killSpeechTimers+0x2e>
    62c0:	|  |  |   movea.l (sp),a0
    62c2:	|  |  |   move.w 50(a0),d0
    62c6:	|  |  +-- beq.s 62dc <killSpeechTimers+0x2e>
    62c8:	|  |  |   movea.l (sp),a0
    62ca:	|  |  |   move.l 12(a0),d0
    62ce:	|  |  +-- beq.s 62dc <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    62d0:	|  |  |   movea.l (sp),a0
    62d2:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    62d6:	|  |  |   movea.l (sp),a0
    62d8:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    62dc:	|  |  \-> movea.l (sp),a0
    62de:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    62e2:	|  \----> tst.l (sp)
    62e4:	\-------- bne.s 62b8 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    62e6:	          jsr 7ff0 <killAllSpeech>
}
    62ec:	          nop
    62ee:	          addq.l #4,sp
    62f0:	          rts

000062f2 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    62f2:	             lea -52(sp),sp
    62f6:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    62f8:	             movea.l 60(sp),a0
    62fc:	             move.l (a0),d0
    62fe:	             move.l d0,-(sp)
    6300:	             jsr 6fb2 <openSubSlice>
    6306:	             addq.l #4,sp
    6308:	             tst.w d0
    630a:	         /-- bne.s 6312 <loadFunctionCode+0x20>
    630c:	         |   clr.w d0
    630e:	/--------|-- bra.w 64dc <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6312:	|        \-> move.l 1c87e <bigDataFile>,44(sp)
    631a:	|            move.l 1c89e <DOSBase>,d0
    6320:	|            movea.l d0,a6
    6322:	|            move.l 44(sp),d1
    6326:	|            jsr -306(a6)
    632a:	|            move.l d0,40(sp)
    632e:	|            move.l 40(sp),d0
    6332:	|            move.l d0,d0
    6334:	|            movea.l 60(sp),a0
    6338:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    633c:	|            move.l 1c87e <bigDataFile>,d0
    6342:	|            move.l d0,-(sp)
    6344:	|            jsr 6bc <get2bytes>
    634a:	|            addq.l #4,sp
    634c:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6350:	|            move.l 1c87e <bigDataFile>,d0
    6356:	|            move.l d0,-(sp)
    6358:	|            jsr 6bc <get2bytes>
    635e:	|            addq.l #4,sp
    6360:	|            movea.l 60(sp),a0
    6364:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6368:	|            move.l 1c87e <bigDataFile>,d0
    636e:	|            move.l d0,-(sp)
    6370:	|            jsr 6bc <get2bytes>
    6376:	|            addq.l #4,sp
    6378:	|            movea.l 60(sp),a0
    637c:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6380:	|            move.l 36(sp),d0
    6384:	|            lsl.l #3,d0
    6386:	|            move.l d0,32(sp)
    638a:	|            clr.l 28(sp)
    638e:	|            move.l 1c896 <SysBase>,d0
    6394:	|            movea.l d0,a6
    6396:	|            move.l 32(sp),d0
    639a:	|            move.l 28(sp),d1
    639e:	|            jsr -684(a6)
    63a2:	|            move.l d0,24(sp)
    63a6:	|            move.l 24(sp),d0
    63aa:	|            movea.l 60(sp),a0
    63ae:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    63b2:	|            movea.l 60(sp),a0
    63b6:	|            move.l 4(a0),d0
    63ba:	|        /-- bne.s 63d0 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    63bc:	|        |   pea 18a2c <PutChar+0xda8>
    63c2:	|        |   jsr 171b0 <KPrintF>
    63c8:	|        |   addq.l #4,sp
		return FALSE;
    63ca:	|        |   clr.w d0
    63cc:	+--------|-- bra.w 64dc <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    63d0:	|        \-> clr.l 52(sp)
    63d4:	|        /-- bra.s 6436 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    63d6:	|     /--|-> move.l 1c87e <bigDataFile>,8(sp)
    63de:	|     |  |   move.l 1c89e <DOSBase>,d0
    63e4:	|     |  |   movea.l d0,a6
    63e6:	|     |  |   move.l 8(sp),d1
    63ea:	|     |  |   jsr -306(a6)
    63ee:	|     |  |   move.l d0,4(sp)
    63f2:	|     |  |   move.l 4(sp),d1
    63f6:	|     |  |   movea.l 60(sp),a0
    63fa:	|     |  |   movea.l 4(a0),a0
    63fe:	|     |  |   move.l 52(sp),d0
    6402:	|     |  |   lsl.l #3,d0
    6404:	|     |  |   adda.l d0,a0
    6406:	|     |  |   move.l d1,d0
    6408:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    640a:	|     |  |   move.l 1c87e <bigDataFile>,d0
    6410:	|     |  |   move.l d0,-(sp)
    6412:	|     |  |   jsr 6bc <get2bytes>
    6418:	|     |  |   addq.l #4,sp
    641a:	|     |  |   move.l d0,d1
    641c:	|     |  |   movea.l 60(sp),a0
    6420:	|     |  |   movea.l 4(a0),a0
    6424:	|     |  |   move.l 52(sp),d0
    6428:	|     |  |   lsl.l #3,d0
    642a:	|     |  |   adda.l d0,a0
    642c:	|     |  |   move.l d1,d0
    642e:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6432:	|     |  |   addq.l #1,52(sp)
    6436:	|     |  \-> move.l 52(sp),d0
    643a:	|     |      cmp.l 36(sp),d0
    643e:	|     \----- bcs.s 63d6 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6440:	|            jsr 6d22 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6446:	|            movea.l 60(sp),a0
    644a:	|            move.l 8(a0),d0
    644e:	|  /-------- ble.w 64d2 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6452:	|  |         movea.l 60(sp),a0
    6456:	|  |         move.l 8(a0),d0
    645a:	|  |         lsl.l #3,d0
    645c:	|  |         move.l d0,20(sp)
    6460:	|  |         clr.l 16(sp)
    6464:	|  |         move.l 1c896 <SysBase>,d0
    646a:	|  |         movea.l d0,a6
    646c:	|  |         move.l 20(sp),d0
    6470:	|  |         move.l 16(sp),d1
    6474:	|  |         jsr -684(a6)
    6478:	|  |         move.l d0,12(sp)
    647c:	|  |         move.l 12(sp),d0
    6480:	|  |         movea.l 60(sp),a0
    6484:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6488:	|  |         movea.l 60(sp),a0
    648c:	|  |         move.l 20(a0),d0
    6490:	|  |     /-- bne.s 64a4 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6492:	|  |     |   pea 18a2c <PutChar+0xda8>
    6498:	|  |     |   jsr 171b0 <KPrintF>
    649e:	|  |     |   addq.l #4,sp
			return FALSE;
    64a0:	|  |     |   clr.w d0
    64a2:	+--|-----|-- bra.s 64dc <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    64a4:	|  |     \-> clr.l 48(sp)
    64a8:	|  |     /-- bra.s 64c2 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    64aa:	|  |  /--|-> movea.l 60(sp),a0
    64ae:	|  |  |  |   move.l 20(a0),d1
    64b2:	|  |  |  |   move.l 48(sp),d0
    64b6:	|  |  |  |   lsl.l #3,d0
    64b8:	|  |  |  |   movea.l d1,a0
    64ba:	|  |  |  |   adda.l d0,a0
    64bc:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    64be:	|  |  |  |   addq.l #1,48(sp)
    64c2:	|  |  |  \-> movea.l 60(sp),a0
    64c6:	|  |  |      move.l 8(a0),d0
    64ca:	|  |  |      cmp.l 48(sp),d0
    64ce:	|  |  \----- bgt.s 64aa <loadFunctionCode+0x1b8>
    64d0:	|  |     /-- bra.s 64da <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    64d2:	|  \-----|-> movea.l 60(sp),a0
    64d6:	|        |   clr.l 8(a0)
	}
	return TRUE;
    64da:	|        \-> moveq #1,d0
}
    64dc:	\----------> movea.l (sp)+,a6
    64de:	             lea 52(sp),sp
    64e2:	             rts

000064e4 <loadHandlers>:

void loadHandlers (BPTR fp) {
    64e4:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    64e6:	movea.l 1c20e <currentEvents>,a2
    64ec:	move.l 8(sp),-(sp)
    64f0:	jsr 6bc <get2bytes>
    64f6:	addq.l #4,sp
    64f8:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    64fa:	movea.l 1c20e <currentEvents>,a2
    6500:	move.l 8(sp),-(sp)
    6504:	jsr 6bc <get2bytes>
    650a:	addq.l #4,sp
    650c:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6510:	movea.l 1c20e <currentEvents>,a2
    6516:	move.l 8(sp),-(sp)
    651a:	jsr 6bc <get2bytes>
    6520:	addq.l #4,sp
    6522:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6526:	movea.l 1c20e <currentEvents>,a2
    652c:	move.l 8(sp),-(sp)
    6530:	jsr 6bc <get2bytes>
    6536:	addq.l #4,sp
    6538:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    653c:	movea.l 1c20e <currentEvents>,a2
    6542:	move.l 8(sp),-(sp)
    6546:	jsr 6bc <get2bytes>
    654c:	addq.l #4,sp
    654e:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    6552:	movea.l 1c20e <currentEvents>,a2
    6558:	move.l 8(sp),-(sp)
    655c:	jsr 6bc <get2bytes>
    6562:	addq.l #4,sp
    6564:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    6568:	movea.l 1c20e <currentEvents>,a2
    656e:	move.l 8(sp),-(sp)
    6572:	jsr 6bc <get2bytes>
    6578:	addq.l #4,sp
    657a:	move.l d0,24(a2)
}
    657e:	nop
    6580:	movea.l (sp)+,a2
    6582:	rts

00006584 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6584:	       lea -312(sp),sp
    6588:	       movem.l d2-d3/a6,-(sp)
    658c:	       move.l 332(sp),d1
    6590:	       move.l 336(sp),d0
    6594:	       move.b d1,d1
    6596:	       move.b d1,16(sp)
    659a:	       move.b d0,d0
    659c:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    65a0:	       move.l 328(sp),318(sp)
    65a6:	       move.l #1005,314(sp)
    65ae:	       move.l 1c89e <DOSBase>,d0
    65b4:	       movea.l d0,a6
    65b6:	       move.l 318(sp),d1
    65ba:	       move.l 314(sp),d2
    65be:	       jsr -30(a6)
    65c2:	       move.l d0,310(sp)
    65c6:	       move.l 310(sp),d0
    65ca:	       move.l d0,306(sp)

	if (! fp) {
    65ce:	   /-- bne.s 662a <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    65d0:	   |   move.l 1c89e <DOSBase>,d0
    65d6:	   |   movea.l d0,a6
    65d8:	   |   jsr -60(a6)
    65dc:	   |   move.l d0,154(sp)
    65e0:	   |   move.l 154(sp),d0
    65e4:	   |   move.l d0,150(sp)
    65e8:	   |   move.l #100949,146(sp)
    65f0:	   |   moveq #31,d0
    65f2:	   |   move.l d0,142(sp)
    65f6:	   |   move.l 1c89e <DOSBase>,d0
    65fc:	   |   movea.l d0,a6
    65fe:	   |   move.l 150(sp),d1
    6602:	   |   move.l 146(sp),d2
    6606:	   |   move.l 142(sp),d3
    660a:	   |   jsr -48(a6)
    660e:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6612:	   |   move.l 328(sp),-(sp)
    6616:	   |   pea 18a75 <PutChar+0xdf1>
    661c:	   |   jsr 171b0 <KPrintF>
    6622:	   |   addq.l #8,sp
		return NULL;
    6624:	   |   moveq #0,d0
    6626:	/--|-- bra.w 68ea <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    662a:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    662e:	|      move.l 306(sp),302(sp)
    6634:	|      move.l 1c89e <DOSBase>,d0
    663a:	|      movea.l d0,a6
    663c:	|      move.l 302(sp),d1
    6640:	|      jsr -306(a6)
    6644:	|      move.l d0,298(sp)
    6648:	|      move.l 298(sp),d0
    664c:	|      moveq #83,d1
    664e:	|      cmp.l d0,d1
    6650:	|  /-- beq.s 6658 <openAndVerify+0xd4>
    6652:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    6658:	|  \-> move.l 306(sp),294(sp)
    665e:	|      move.l 1c89e <DOSBase>,d0
    6664:	|      movea.l d0,a6
    6666:	|      move.l 294(sp),d1
    666a:	|      jsr -306(a6)
    666e:	|      move.l d0,290(sp)
    6672:	|      move.l 290(sp),d0
    6676:	|      moveq #76,d1
    6678:	|      cmp.l d0,d1
    667a:	|  /-- beq.s 6682 <openAndVerify+0xfe>
    667c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6682:	|  \-> move.l 306(sp),286(sp)
    6688:	|      move.l 1c89e <DOSBase>,d0
    668e:	|      movea.l d0,a6
    6690:	|      move.l 286(sp),d1
    6694:	|      jsr -306(a6)
    6698:	|      move.l d0,282(sp)
    669c:	|      move.l 282(sp),d0
    66a0:	|      moveq #85,d1
    66a2:	|      cmp.l d0,d1
    66a4:	|  /-- beq.s 66ac <openAndVerify+0x128>
    66a6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    66ac:	|  \-> move.l 306(sp),278(sp)
    66b2:	|      move.l 1c89e <DOSBase>,d0
    66b8:	|      movea.l d0,a6
    66ba:	|      move.l 278(sp),d1
    66be:	|      jsr -306(a6)
    66c2:	|      move.l d0,274(sp)
    66c6:	|      move.l 274(sp),d0
    66ca:	|      moveq #68,d1
    66cc:	|      cmp.l d0,d1
    66ce:	|  /-- beq.s 66d6 <openAndVerify+0x152>
    66d0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    66d6:	|  \-> move.l 306(sp),270(sp)
    66dc:	|      move.l 1c89e <DOSBase>,d0
    66e2:	|      movea.l d0,a6
    66e4:	|      move.l 270(sp),d1
    66e8:	|      jsr -306(a6)
    66ec:	|      move.l d0,266(sp)
    66f0:	|      move.l 266(sp),d1
    66f4:	|      move.b 16(sp),d0
    66f8:	|      ext.w d0
    66fa:	|      movea.w d0,a0
    66fc:	|      cmpa.l d1,a0
    66fe:	|  /-- beq.s 6706 <openAndVerify+0x182>
    6700:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6706:	|  \-> move.l 306(sp),262(sp)
    670c:	|      move.l 1c89e <DOSBase>,d0
    6712:	|      movea.l d0,a6
    6714:	|      move.l 262(sp),d1
    6718:	|      jsr -306(a6)
    671c:	|      move.l d0,258(sp)
    6720:	|      move.l 258(sp),d1
    6724:	|      move.b 14(sp),d0
    6728:	|      ext.w d0
    672a:	|      movea.w d0,a0
    672c:	|      cmpa.l d1,a0
    672e:	|  /-- beq.s 6736 <openAndVerify+0x1b2>
    6730:	|  |   move.w #1,322(sp)
	if (headerBad) {
    6736:	|  \-> tst.w 322(sp)
    673a:	|  /-- beq.s 6792 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    673c:	|  |   move.l 1c89e <DOSBase>,d0
    6742:	|  |   movea.l d0,a6
    6744:	|  |   jsr -60(a6)
    6748:	|  |   move.l d0,174(sp)
    674c:	|  |   move.l 174(sp),d0
    6750:	|  |   move.l d0,170(sp)
    6754:	|  |   move.l #101012,166(sp)
    675c:	|  |   moveq #31,d0
    675e:	|  |   move.l d0,162(sp)
    6762:	|  |   move.l 1c89e <DOSBase>,d0
    6768:	|  |   movea.l d0,a6
    676a:	|  |   move.l 170(sp),d1
    676e:	|  |   move.l 166(sp),d2
    6772:	|  |   move.l 162(sp),d3
    6776:	|  |   jsr -48(a6)
    677a:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    677e:	|  |   pea 18a94 <PutChar+0xe10>
    6784:	|  |   jsr 171b0 <KPrintF>
    678a:	|  |   addq.l #4,sp
		return NULL;
    678c:	|  |   moveq #0,d0
    678e:	+--|-- bra.w 68ea <openAndVerify+0x366>
	}
	FGetC (fp);
    6792:	|  \-> move.l 306(sp),254(sp)
    6798:	|      move.l 1c89e <DOSBase>,d0
    679e:	|      movea.l d0,a6
    67a0:	|      move.l 254(sp),d1
    67a4:	|      jsr -306(a6)
    67a8:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    67ac:	|      nop
    67ae:	|  /-> move.l 306(sp),246(sp)
    67b4:	|  |   move.l 1c89e <DOSBase>,d0
    67ba:	|  |   movea.l d0,a6
    67bc:	|  |   move.l 246(sp),d1
    67c0:	|  |   jsr -306(a6)
    67c4:	|  |   move.l d0,242(sp)
    67c8:	|  |   move.l 242(sp),d0
    67cc:	|  \-- bne.s 67ae <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    67ce:	|      move.l 306(sp),238(sp)
    67d4:	|      move.l 1c89e <DOSBase>,d0
    67da:	|      movea.l d0,a6
    67dc:	|      move.l 238(sp),d1
    67e0:	|      jsr -306(a6)
    67e4:	|      move.l d0,234(sp)
    67e8:	|      move.l 234(sp),d0
    67ec:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    67f0:	|      move.l 306(sp),226(sp)
    67f6:	|      move.l 1c89e <DOSBase>,d0
    67fc:	|      movea.l d0,a6
    67fe:	|      move.l 226(sp),d1
    6802:	|      jsr -306(a6)
    6806:	|      move.l d0,222(sp)
    680a:	|      move.l 222(sp),d0
    680e:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6812:	|      move.l 230(sp),d0
    6816:	|      lsl.l #8,d0
    6818:	|      add.l 218(sp),d0
    681c:	|      movea.l 344(sp),a0
    6820:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6822:	|      movea.l 344(sp),a0
    6826:	|      move.l (a0),d0
    6828:	|      cmpi.l #514,d0
    682e:	|  /-- ble.s 6884 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6830:	|  |   move.l 1c89e <DOSBase>,d0
    6836:	|  |   movea.l d0,a6
    6838:	|  |   jsr -60(a6)
    683c:	|  |   move.l d0,194(sp)
    6840:	|  |   move.l 194(sp),d0
    6844:	|  |   move.l d0,190(sp)
    6848:	|  |   move.l #101039,186(sp)
    6850:	|  |   moveq #100,d1
    6852:	|  |   move.l d1,182(sp)
    6856:	|  |   move.l 1c89e <DOSBase>,d0
    685c:	|  |   movea.l d0,a6
    685e:	|  |   move.l 190(sp),d1
    6862:	|  |   move.l 186(sp),d2
    6866:	|  |   move.l 182(sp),d3
    686a:	|  |   jsr -48(a6)
    686e:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    6872:	|  |   pea 18aaf <PutChar+0xe2b>
    6878:	|  |   jsr 171b0 <KPrintF>
    687e:	|  |   addq.l #4,sp
		return NULL;
    6880:	|  |   moveq #0,d0
    6882:	+--|-- bra.s 68ea <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    6884:	|  \-> movea.l 344(sp),a0
    6888:	|      move.l (a0),d0
    688a:	|      cmpi.l #257,d0
    6890:	|  /-- bgt.s 68e6 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6892:	|  |   move.l 1c89e <DOSBase>,d0
    6898:	|  |   movea.l d0,a6
    689a:	|  |   jsr -60(a6)
    689e:	|  |   move.l d0,214(sp)
    68a2:	|  |   move.l 214(sp),d0
    68a6:	|  |   move.l d0,210(sp)
    68aa:	|  |   move.l #101108,206(sp)
    68b2:	|  |   moveq #100,d0
    68b4:	|  |   move.l d0,202(sp)
    68b8:	|  |   move.l 1c89e <DOSBase>,d0
    68be:	|  |   movea.l d0,a6
    68c0:	|  |   move.l 210(sp),d1
    68c4:	|  |   move.l 206(sp),d2
    68c8:	|  |   move.l 202(sp),d3
    68cc:	|  |   jsr -48(a6)
    68d0:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    68d4:	|  |   pea 18af4 <PutChar+0xe70>
    68da:	|  |   jsr 171b0 <KPrintF>
    68e0:	|  |   addq.l #4,sp
		return NULL;
    68e2:	|  |   moveq #0,d0
    68e4:	+--|-- bra.s 68ea <openAndVerify+0x366>
	}
	return fp;
    68e6:	|  \-> move.l 306(sp),d0
}
    68ea:	\----> movem.l (sp)+,d2-d3/a6
    68ee:	       lea 312(sp),sp
    68f2:	       rts

000068f4 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    68f4:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    68f6:	          move.l #116782,(sp)
	while (* huntAndDestroy) {
    68fc:	   /----- bra.s 6928 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    68fe:	/--|----> movea.l (sp),a0
    6900:	|  |      move.l (a0),d0
    6902:	|  |      cmp.l 8(sp),d0
    6906:	|  |  /-- bne.s 691e <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    6908:	|  |  |   movea.l (sp),a0
    690a:	|  |  |   movea.l (a0),a0
    690c:	|  |  |   move.l 44(a0),d0
    6910:	|  |  |   movea.l (sp),a0
    6912:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    6914:	|  |  |   movea.l 8(sp),a0
    6918:	|  |  |   clr.l 44(a0)
    691c:	|  +--|-- bra.s 6928 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    691e:	|  |  \-> movea.l (sp),a0
    6920:	|  |      move.l (a0),d0
    6922:	|  |      moveq #44,d1
    6924:	|  |      add.l d0,d1
    6926:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    6928:	|  \----> movea.l (sp),a0
    692a:	|         move.l (a0),d0
    692c:	\-------- bne.s 68fe <pauseFunction+0xa>
		}
	}
}
    692e:	          nop
    6930:	          nop
    6932:	          addq.l #4,sp
    6934:	          rts

00006936 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    6936:	move.l 1c82e <allRunningFunctions>,d0
    693c:	movea.l 4(sp),a0
    6940:	move.l d0,44(a0)
	allRunningFunctions = fun;
    6944:	move.l 4(sp),1c82e <allRunningFunctions>
}
    694c:	nop
    694e:	rts

00006950 <runSludge>:

BOOL runSludge () {
    6950:	                   lea -12(sp),sp
    6954:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    6956:	                   move.l 1c82e <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    695e:	      /----------- bra.s 69da <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    6960:	   /--|----------> movea.l 12(sp),a0
    6964:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    696a:	   |  |            movea.l 12(sp),a0
    696e:	   |  |            move.b 56(a0),d0
    6972:	   |  |  /-------- bne.s 69d4 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    6974:	   |  |  |         movea.l 12(sp),a0
    6978:	   |  |  |         move.l 12(a0),d0
    697c:	   |  |  |  /----- beq.s 69a6 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    697e:	   |  |  |  |      movea.l 12(sp),a0
    6982:	   |  |  |  |      move.l 12(a0),d0
    6986:	   |  |  |  |  /-- bpl.s 6992 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    6988:	   |  |  |  |  |   movea.l 12(sp),a0
    698c:	   |  |  |  |  |   clr.l 12(a0)
    6990:	   |  |  +--|--|-- bra.s 69d4 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    6992:	   |  |  |  |  \-> movea.l 12(sp),a0
    6996:	   |  |  |  |      move.l 12(a0),d0
    699a:	   |  |  |  |      subq.l #1,d0
    699c:	   |  |  |  |      movea.l 12(sp),a0
    69a0:	   |  |  |  |      move.l d0,12(a0)
    69a4:	   |  |  +--|----- bra.s 69d4 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    69a6:	   |  |  |  \----> movea.l 12(sp),a0
    69aa:	   |  |  |         move.w 50(a0),d0
    69ae:	   |  |  |     /-- beq.s 69be <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    69b0:	   |  |  |     |   movea.l 12(sp),a0
    69b4:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    69b8:	   |  |  |     |   jsr 7ff0 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    69be:	   |  |  |     \-> move.l 12(sp),-(sp)
    69c2:	   |  |  |         jsr 491e <continueFunction>
    69c8:	   |  |  |         addq.l #4,sp
    69ca:	   |  |  |         tst.w d0
    69cc:	   |  |  +-------- bne.s 69d4 <runSludge+0x84>
					return FALSE;
    69ce:	   |  |  |         clr.w d0
    69d0:	/--|--|--|-------- bra.w 6a60 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    69d4:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    69da:	|  |  \----------> tst.l 12(sp)
    69de:	|  \-------------- bne.s 6960 <runSludge+0x10>
	}

	if (loadNow) {
    69e0:	|                  move.l 1c862 <loadNow>,d0
    69e6:	|        /-------- beq.s 6a5e <runSludge+0x10e>
		if (loadNow[0] == ':') {
    69e8:	|        |         movea.l 1c862 <loadNow>,a0
    69ee:	|        |         move.b (a0),d0
    69f0:	|        |         cmpi.b #58,d0
    69f4:	|        |  /----- bne.s 6a28 <runSludge+0xd8>
			saveGame (loadNow + 1);
    69f6:	|        |  |      move.l 1c862 <loadNow>,d0
    69fc:	|        |  |      addq.l #1,d0
    69fe:	|        |  |      move.l d0,-(sp)
    6a00:	|        |  |      jsr c734 <saveGame>
    6a06:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    6a08:	|        |  |      movea.l 1c960 <saverFunc>,a0
    6a0e:	|        |  |      lea 28(a0),a0
    6a12:	|        |  |      pea 1 <_start+0x1>
    6a16:	|        |  |      pea 1 <_start+0x1>
    6a1a:	|        |  |      move.l a0,-(sp)
    6a1c:	|        |  |      jsr 1507a <setVariable>
    6a22:	|        |  |      lea 12(sp),sp
    6a26:	|        |  |  /-- bra.s 6a40 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    6a28:	|        |  \--|-> move.l 1c862 <loadNow>,d0
    6a2e:	|        |     |   move.l d0,-(sp)
    6a30:	|        |     |   jsr c27c <loadGame>
    6a36:	|        |     |   addq.l #4,sp
    6a38:	|        |     |   tst.w d0
    6a3a:	|        |     +-- bne.s 6a40 <runSludge+0xf0>
    6a3c:	|        |     |   clr.w d0
    6a3e:	+--------|-----|-- bra.s 6a60 <runSludge+0x110>
		}
		FreeVec(loadNow);
    6a40:	|        |     \-> move.l 1c862 <loadNow>,8(sp)
    6a48:	|        |         move.l 1c896 <SysBase>,d0
    6a4e:	|        |         movea.l d0,a6
    6a50:	|        |         movea.l 8(sp),a1
    6a54:	|        |         jsr -690(a6)
		loadNow = NULL;
    6a58:	|        |         clr.l 1c862 <loadNow>
	}

	return TRUE;
    6a5e:	|        \-------> moveq #1,d0
}
    6a60:	\----------------> movea.l (sp)+,a6
    6a62:	                   lea 12(sp),sp
    6a66:	                   rts

00006a68 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    6a68:	movea.l 1c20e <currentEvents>,a0
    6a6e:	move.l (a0),d0
    6a70:	move.l 4(sp),-(sp)
    6a74:	move.l d0,-(sp)
    6a76:	jsr 8d0 <put2bytes>
    6a7c:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    6a7e:	movea.l 1c20e <currentEvents>,a0
    6a84:	move.l 4(a0),d0
    6a88:	move.l 4(sp),-(sp)
    6a8c:	move.l d0,-(sp)
    6a8e:	jsr 8d0 <put2bytes>
    6a94:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    6a96:	movea.l 1c20e <currentEvents>,a0
    6a9c:	move.l 8(a0),d0
    6aa0:	move.l 4(sp),-(sp)
    6aa4:	move.l d0,-(sp)
    6aa6:	jsr 8d0 <put2bytes>
    6aac:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    6aae:	movea.l 1c20e <currentEvents>,a0
    6ab4:	move.l 12(a0),d0
    6ab8:	move.l 4(sp),-(sp)
    6abc:	move.l d0,-(sp)
    6abe:	jsr 8d0 <put2bytes>
    6ac4:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    6ac6:	movea.l 1c20e <currentEvents>,a0
    6acc:	move.l 16(a0),d0
    6ad0:	move.l 4(sp),-(sp)
    6ad4:	move.l d0,-(sp)
    6ad6:	jsr 8d0 <put2bytes>
    6adc:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    6ade:	movea.l 1c20e <currentEvents>,a0
    6ae4:	move.l 20(a0),d0
    6ae8:	move.l 4(sp),-(sp)
    6aec:	move.l d0,-(sp)
    6aee:	jsr 8d0 <put2bytes>
    6af4:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6af6:	movea.l 1c20e <currentEvents>,a0
    6afc:	move.l 24(a0),d0
    6b00:	move.l 4(sp),-(sp)
    6b04:	move.l d0,-(sp)
    6b06:	jsr 8d0 <put2bytes>
    6b0c:	addq.l #8,sp
}
    6b0e:	nop
    6b10:	rts

00006b12 <sludgeDisplay>:

void sludgeDisplay () {					
    6b12:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6b14:	move.l #14675968,(sp)
	displayCursor();
    6b1a:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6b20:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6b26:	jsr 2bb8 <CstRestoreScreen>
	drawPeople();
    6b2c:	jsr a09c <drawPeople>
	CstSwapBuffer();
    6b32:	jsr 38ee <CstSwapBuffer>
}
    6b38:	nop
    6b3a:	addq.l #4,sp
    6b3c:	rts

00006b3e <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    6b3e:	      /-- bra.s 6b5e <stackSetByIndex+0x20>
		vS = vS->next;
    6b40:	/-----|-> movea.l 4(sp),a0
    6b44:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6b4a:	|     +-- bne.s 6b5e <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6b4c:	|     |   pea 18b3b <PutChar+0xeb7>
    6b52:	|     |   jsr 171b0 <KPrintF>
    6b58:	|     |   addq.l #4,sp
			return FALSE;
    6b5a:	|     |   clr.w d0
    6b5c:	|  /--|-- bra.s 6b80 <stackSetByIndex+0x42>
	while (theIndex--) {
    6b5e:	|  |  \-> move.l 8(sp),d0
    6b62:	|  |      move.l d0,d1
    6b64:	|  |      subq.l #1,d1
    6b66:	|  |      move.l d1,8(sp)
    6b6a:	|  |      tst.l d0
    6b6c:	\--|----- bne.s 6b40 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    6b6e:	   |      move.l 4(sp),d0
    6b72:	   |      move.l d0,-(sp)
    6b74:	   |      move.l 16(sp),-(sp)
    6b78:	   |      jsr 14c42 <copyVariable>
    6b7e:	   |      addq.l #8,sp
}
    6b80:	   \----> rts

00006b82 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6b82:	             lea -24(sp),sp
    6b86:	             move.l a6,-(sp)
    6b88:	             move.l 48(sp),d0
    6b8c:	             move.w d0,d0
    6b8e:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6b92:	             moveq #58,d0
    6b94:	             move.l d0,24(sp)
    6b98:	             clr.l 20(sp)
    6b9c:	             move.l 1c896 <SysBase>,d0
    6ba2:	             movea.l d0,a6
    6ba4:	             move.l 24(sp),d0
    6ba8:	             move.l 20(sp),d1
    6bac:	             jsr -684(a6)
    6bb0:	             move.l d0,16(sp)
    6bb4:	             move.l 16(sp),d0
    6bb8:	             move.l d0,12(sp)
	if(!newFunc) {
    6bbc:	         /-- bne.s 6bd2 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    6bbe:	         |   pea 18b54 <PutChar+0xed0>
    6bc4:	         |   jsr 171b0 <KPrintF>
    6bca:	         |   addq.l #4,sp
		return 0;
    6bcc:	         |   moveq #0,d0
    6bce:	/--------|-- bra.w 6ce8 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6bd2:	|        \-> move.l 32(sp),d0
    6bd6:	|            movea.l 12(sp),a0
    6bda:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    6bdc:	|            move.l 12(sp),-(sp)
    6be0:	|            jsr 62f2 <loadFunctionCode>
    6be6:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6be8:	|            movea.l 12(sp),a0
    6bec:	|            move.l 16(a0),d1
    6bf0:	|            move.l 36(sp),d0
    6bf4:	|            cmp.l d1,d0
    6bf6:	|        /-- beq.s 6c0c <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6bf8:	|        |   pea 18b7d <PutChar+0xef9>
    6bfe:	|        |   jsr 171b0 <KPrintF>
    6c04:	|        |   addq.l #4,sp
		return NULL; 
    6c06:	|        |   moveq #0,d0
    6c08:	+--------|-- bra.w 6ce8 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6c0c:	|        \-> movea.l 12(sp),a0
    6c10:	|            move.l 16(a0),d1
    6c14:	|            movea.l 12(sp),a0
    6c18:	|            move.l 8(a0),d0
    6c1c:	|            cmp.l d1,d0
    6c1e:	|  /-------- bge.s 6c88 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6c20:	|  |         pea 18b99 <PutChar+0xf15>
    6c26:	|  |         jsr 171b0 <KPrintF>
    6c2c:	|  |         addq.l #4,sp
		return NULL; 
    6c2e:	|  |         moveq #0,d0
    6c30:	+--|-------- bra.w 6ce8 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6c34:	|  |  /----> movea.l 44(sp),a0
    6c38:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6c3c:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6c40:	|  |  |      movea.l 44(sp),a0
    6c44:	|  |  |      move.l (a0),d0
    6c46:	|  |  |  /-- bne.s 6c5c <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6c48:	|  |  |  |   pea 18bc3 <PutChar+0xf3f>
    6c4e:	|  |  |  |   jsr 171b0 <KPrintF>
    6c54:	|  |  |  |   addq.l #4,sp
			return NULL;
    6c56:	|  |  |  |   moveq #0,d0
    6c58:	+--|--|--|-- bra.w 6ce8 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6c5c:	|  |  |  \-> movea.l 12(sp),a0
    6c60:	|  |  |      move.l 20(a0),d1
    6c64:	|  |  |      move.l 36(sp),d0
    6c68:	|  |  |      lsl.l #3,d0
    6c6a:	|  |  |      add.l d0,d1
    6c6c:	|  |  |      move.l 8(sp),d0
    6c70:	|  |  |      move.l d1,-(sp)
    6c72:	|  |  |      move.l d0,-(sp)
    6c74:	|  |  |      jsr 14c42 <copyVariable>
    6c7a:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6c7c:	|  |  |      move.l 44(sp),-(sp)
    6c80:	|  |  |      jsr 1510c <trimStack>
    6c86:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6c88:	|  \--|----> tst.l 36(sp)
    6c8c:	|     \----- bne.s 6c34 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6c8e:	|            movea.l 12(sp),a0
    6c92:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6c96:	|            movea.l 12(sp),a0
    6c9a:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6c9e:	|            movea.l 12(sp),a0
    6ca2:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6ca8:	|            movea.l 12(sp),a0
    6cac:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6cb2:	|            movea.l 12(sp),a0
    6cb6:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    6cba:	|            movea.l 12(sp),a0
    6cbe:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    6cc2:	|            movea.l 12(sp),a0
    6cc6:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    6cca:	|            movea.l 12(sp),a0
    6cce:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6cd2:	|            movea.l 12(sp),a0
    6cd6:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6cda:	|            move.l 12(sp),-(sp)
    6cde:	|            jsr 6936 <restartFunction>
    6ce4:	|            addq.l #4,sp
	return 1;
    6ce6:	|            moveq #1,d0
}
    6ce8:	\----------> movea.l (sp)+,a6
    6cea:	             lea 24(sp),sp
    6cee:	             rts

00006cf0 <unfreezeSubs>:

void unfreezeSubs () {
    6cf0:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6cf2:	          move.l 1c82e <allRunningFunctions>,(sp)

	while (thisFunction) {
    6cf8:	   /----- bra.s 6d16 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6cfa:	/--|----> movea.l (sp),a0
    6cfc:	|  |      move.b 56(a0),d0
    6d00:	|  |  /-- beq.s 6d10 <unfreezeSubs+0x20>
    6d02:	|  |  |   movea.l (sp),a0
    6d04:	|  |  |   move.b 56(a0),d0
    6d08:	|  |  |   subq.b #1,d0
    6d0a:	|  |  |   movea.l (sp),a0
    6d0c:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6d10:	|  |  \-> movea.l (sp),a0
    6d12:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6d16:	|  \----> tst.l (sp)
    6d18:	\-------- bne.s 6cfa <unfreezeSubs+0xa>
	}
}
    6d1a:	          nop
    6d1c:	          nop
    6d1e:	          addq.l #4,sp
    6d20:	          rts

00006d22 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6d22:	clr.w 1c21a <sliceBusy>
}
    6d28:	nop
    6d2a:	rts

00006d2c <getNumberedString>:

char * getNumberedString (int value) {
    6d2c:	       lea -56(sp),sp
    6d30:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6d34:	       move.w 1c21a <sliceBusy>,d0
    6d3a:	   /-- beq.s 6d84 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6d3c:	   |   move.l 1c89e <DOSBase>,d0
    6d42:	   |   movea.l d0,a6
    6d44:	   |   jsr -60(a6)
    6d48:	   |   move.l d0,28(sp)
    6d4c:	   |   move.l 28(sp),d0
    6d50:	   |   move.l d0,24(sp)
    6d54:	   |   move.l #101390,20(sp)
    6d5c:	   |   moveq #76,d0
    6d5e:	   |   move.l d0,16(sp)
    6d62:	   |   move.l 1c89e <DOSBase>,d0
    6d68:	   |   movea.l d0,a6
    6d6a:	   |   move.l 24(sp),d1
    6d6e:	   |   move.l 20(sp),d2
    6d72:	   |   move.l 16(sp),d3
    6d76:	   |   jsr -48(a6)
    6d7a:	   |   move.l d0,12(sp)
		return NULL;
    6d7e:	   |   moveq #0,d0
    6d80:	/--|-- bra.w 6e20 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6d84:	|  \-> move.l 1c87e <bigDataFile>,64(sp)
    6d8c:	|      move.l 72(sp),d0
    6d90:	|      add.l d0,d0
    6d92:	|      add.l d0,d0
    6d94:	|      move.l d0,d1
    6d96:	|      move.l 1c88a <startOfTextIndex>,d0
    6d9c:	|      add.l d1,d0
    6d9e:	|      move.l d0,60(sp)
    6da2:	|      moveq #-1,d0
    6da4:	|      move.l d0,56(sp)
    6da8:	|      move.l 1c89e <DOSBase>,d0
    6dae:	|      movea.l d0,a6
    6db0:	|      move.l 64(sp),d1
    6db4:	|      move.l 60(sp),d2
    6db8:	|      move.l 56(sp),d3
    6dbc:	|      jsr -66(a6)
    6dc0:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6dc4:	|      move.l 1c87e <bigDataFile>,d0
    6dca:	|      move.l d0,-(sp)
    6dcc:	|      jsr 718 <get4bytes>
    6dd2:	|      addq.l #4,sp
    6dd4:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6dd8:	|      move.l 1c87e <bigDataFile>,48(sp)
    6de0:	|      move.l 72(sp),44(sp)
    6de6:	|      moveq #-1,d0
    6de8:	|      move.l d0,40(sp)
    6dec:	|      move.l 1c89e <DOSBase>,d0
    6df2:	|      movea.l d0,a6
    6df4:	|      move.l 48(sp),d1
    6df8:	|      move.l 44(sp),d2
    6dfc:	|      move.l 40(sp),d3
    6e00:	|      jsr -66(a6)
    6e04:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6e08:	|      move.l 1c87e <bigDataFile>,d0
    6e0e:	|      move.l d0,-(sp)
    6e10:	|      jsr b02 <readString>
    6e16:	|      addq.l #4,sp
    6e18:	|      move.l d0,32(sp)
	
	return s;
    6e1c:	|      move.l 32(sp),d0
}
    6e20:	\----> movem.l (sp)+,d2-d3/a6
    6e24:	       lea 56(sp),sp
    6e28:	       rts

00006e2a <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6e2a:	       lea -32(sp),sp
    6e2e:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6e32:	       move.w 1c21a <sliceBusy>,d0
    6e38:	   /-- beq.s 6e54 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6e3a:	   |   pea 18c5b <PutChar+0xfd7>
    6e40:	   |   pea 18c79 <PutChar+0xff5>
    6e46:	   |   jsr 171b0 <KPrintF>
    6e4c:	   |   addq.l #8,sp
		return 0;
    6e4e:	   |   moveq #0,d0
    6e50:	/--|-- bra.w 6ee8 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6e54:	|  \-> move.l 1c87e <bigDataFile>,40(sp)
    6e5c:	|      move.l 48(sp),d0
    6e60:	|      add.l d0,d0
    6e62:	|      add.l d0,d0
    6e64:	|      move.l d0,d1
    6e66:	|      move.l 1c886 <startOfDataIndex>,d0
    6e6c:	|      add.l d1,d0
    6e6e:	|      move.l d0,36(sp)
    6e72:	|      moveq #-1,d0
    6e74:	|      move.l d0,32(sp)
    6e78:	|      move.l 1c89e <DOSBase>,d0
    6e7e:	|      movea.l d0,a6
    6e80:	|      move.l 40(sp),d1
    6e84:	|      move.l 36(sp),d2
    6e88:	|      move.l 32(sp),d3
    6e8c:	|      jsr -66(a6)
    6e90:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6e94:	|      move.l 1c87e <bigDataFile>,24(sp)
    6e9c:	|      move.l 1c87e <bigDataFile>,d0
    6ea2:	|      move.l d0,-(sp)
    6ea4:	|      jsr 718 <get4bytes>
    6eaa:	|      addq.l #4,sp
    6eac:	|      move.l d0,20(sp)
    6eb0:	|      clr.l 16(sp)
    6eb4:	|      move.l 1c89e <DOSBase>,d0
    6eba:	|      movea.l d0,a6
    6ebc:	|      move.l 24(sp),d1
    6ec0:	|      move.l 20(sp),d2
    6ec4:	|      move.l 16(sp),d3
    6ec8:	|      jsr -66(a6)
    6ecc:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6ed0:	|      move.w #1,1c21a <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6ed8:	|      move.l 1c87e <bigDataFile>,d0
    6ede:	|      move.l d0,-(sp)
    6ee0:	|      jsr 718 <get4bytes>
    6ee6:	|      addq.l #4,sp
}
    6ee8:	\----> movem.l (sp)+,d2-d3/a6
    6eec:	       lea 32(sp),sp
    6ef0:	       rts

00006ef2 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6ef2:	       lea -32(sp),sp
    6ef6:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6efa:	       move.w 1c21a <sliceBusy>,d0
    6f00:	   /-- beq.s 6f1c <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6f02:	   |   pea 18c5b <PutChar+0xfd7>
    6f08:	   |   pea 18c79 <PutChar+0xff5>
    6f0e:	   |   jsr 171b0 <KPrintF>
    6f14:	   |   addq.l #8,sp
        return FALSE;
    6f16:	   |   clr.w d0
    6f18:	/--|-- bra.w 6fa8 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6f1c:	|  \-> move.l 1c87e <bigDataFile>,40(sp)
    6f24:	|      move.l 48(sp),d0
    6f28:	|      add.l d0,d0
    6f2a:	|      add.l d0,d0
    6f2c:	|      move.l d0,d1
    6f2e:	|      move.l 1c892 <startOfObjectIndex>,d0
    6f34:	|      add.l d1,d0
    6f36:	|      move.l d0,36(sp)
    6f3a:	|      moveq #-1,d0
    6f3c:	|      move.l d0,32(sp)
    6f40:	|      move.l 1c89e <DOSBase>,d0
    6f46:	|      movea.l d0,a6
    6f48:	|      move.l 40(sp),d1
    6f4c:	|      move.l 36(sp),d2
    6f50:	|      move.l 32(sp),d3
    6f54:	|      jsr -66(a6)
    6f58:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6f5c:	|      move.l 1c87e <bigDataFile>,24(sp)
    6f64:	|      move.l 1c87e <bigDataFile>,d0
    6f6a:	|      move.l d0,-(sp)
    6f6c:	|      jsr 718 <get4bytes>
    6f72:	|      addq.l #4,sp
    6f74:	|      move.l d0,20(sp)
    6f78:	|      moveq #-1,d0
    6f7a:	|      move.l d0,16(sp)
    6f7e:	|      move.l 1c89e <DOSBase>,d0
    6f84:	|      movea.l d0,a6
    6f86:	|      move.l 24(sp),d1
    6f8a:	|      move.l 20(sp),d2
    6f8e:	|      move.l 16(sp),d3
    6f92:	|      jsr -66(a6)
    6f96:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6f9a:	|      move.w #1,1c21a <sliceBusy>
    6fa2:	|      move.w 1c21a <sliceBusy>,d0
}
    6fa8:	\----> movem.l (sp)+,d2-d3/a6
    6fac:	       lea 32(sp),sp
    6fb0:	       rts

00006fb2 <openSubSlice>:

BOOL openSubSlice (int num) {
    6fb2:	       lea -32(sp),sp
    6fb6:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6fba:	       move.w 1c21a <sliceBusy>,d0
    6fc0:	   /-- beq.s 6fdc <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6fc2:	   |   pea 18c5b <PutChar+0xfd7>
    6fc8:	   |   pea 18c79 <PutChar+0xff5>
    6fce:	   |   jsr 171b0 <KPrintF>
    6fd4:	   |   addq.l #8,sp
		return FALSE;
    6fd6:	   |   clr.w d0
    6fd8:	/--|-- bra.w 7068 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6fdc:	|  \-> move.l 1c87e <bigDataFile>,40(sp)
    6fe4:	|      move.l 48(sp),d0
    6fe8:	|      add.l d0,d0
    6fea:	|      add.l d0,d0
    6fec:	|      move.l d0,d1
    6fee:	|      move.l 1c88e <startOfSubIndex>,d0
    6ff4:	|      add.l d1,d0
    6ff6:	|      move.l d0,36(sp)
    6ffa:	|      moveq #-1,d0
    6ffc:	|      move.l d0,32(sp)
    7000:	|      move.l 1c89e <DOSBase>,d0
    7006:	|      movea.l d0,a6
    7008:	|      move.l 40(sp),d1
    700c:	|      move.l 36(sp),d2
    7010:	|      move.l 32(sp),d3
    7014:	|      jsr -66(a6)
    7018:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    701c:	|      move.l 1c87e <bigDataFile>,24(sp)
    7024:	|      move.l 1c87e <bigDataFile>,d0
    702a:	|      move.l d0,-(sp)
    702c:	|      jsr 718 <get4bytes>
    7032:	|      addq.l #4,sp
    7034:	|      move.l d0,20(sp)
    7038:	|      moveq #-1,d0
    703a:	|      move.l d0,16(sp)
    703e:	|      move.l 1c89e <DOSBase>,d0
    7044:	|      movea.l d0,a6
    7046:	|      move.l 24(sp),d1
    704a:	|      move.l 20(sp),d2
    704e:	|      move.l 16(sp),d3
    7052:	|      jsr -66(a6)
    7056:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    705a:	|      move.w #1,1c21a <sliceBusy>
    7062:	|      move.w 1c21a <sliceBusy>,d0
}
    7068:	\----> movem.l (sp)+,d2-d3/a6
    706c:	       lea 32(sp),sp
    7070:	       rts

00007072 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7072:	       lea -180(sp),sp
    7076:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    707a:	       tst.l 196(sp)
    707e:	/----- beq.s 70be <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7080:	|      move.l 196(sp),1c87e <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7088:	|      move.l 196(sp),168(sp)
    708e:	|      clr.l 164(sp)
    7092:	|      clr.l 160(sp)
    7096:	|      move.l 1c89e <DOSBase>,d0
    709c:	|      movea.l d0,a6
    709e:	|      move.l 168(sp),d1
    70a2:	|      move.l 164(sp),d2
    70a6:	|      move.l 160(sp),d3
    70aa:	|      jsr -66(a6)
    70ae:	|      move.l d0,156(sp)
    70b2:	|      move.l 156(sp),d0
    70b6:	|      move.l d0,1c882 <startIndex>
    70bc:	|  /-- bra.s 70f8 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    70be:	\--|-> move.l 1c87e <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    70c6:	   |   move.l 196(sp),184(sp)
    70cc:	   |   move.l 1c882 <startIndex>,d0
    70d2:	   |   move.l d0,180(sp)
    70d6:	   |   moveq #-1,d0
    70d8:	   |   move.l d0,176(sp)
    70dc:	   |   move.l 1c89e <DOSBase>,d0
    70e2:	   |   movea.l d0,a6
    70e4:	   |   move.l 184(sp),d1
    70e8:	   |   move.l 180(sp),d2
    70ec:	   |   move.l 176(sp),d3
    70f0:	   |   jsr -66(a6)
    70f4:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    70f8:	   \-> clr.w 1c21a <sliceBusy>

	if (skipBefore > numLanguages) {
    70fe:	       move.l 204(sp),d0
    7102:	       cmp.l 200(sp),d0
    7106:	   /-- bls.s 711a <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    7108:	   |   pea 18c93 <PutChar+0x100f>
    710e:	   |   jsr 171b0 <KPrintF>
    7114:	   |   addq.l #4,sp
		skipBefore = 0;
    7116:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    711a:	   \-> move.l 200(sp),d0
    711e:	       sub.l 204(sp),d0
    7122:	       move.l d0,188(sp)
	while (skipBefore) {
    7126:	   /-- bra.s 7164 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    7128:	/--|-> move.l 196(sp),24(sp)
    712e:	|  |   move.l 196(sp),-(sp)
    7132:	|  |   jsr 718 <get4bytes>
    7138:	|  |   addq.l #4,sp
    713a:	|  |   move.l d0,20(sp)
    713e:	|  |   moveq #-1,d0
    7140:	|  |   move.l d0,16(sp)
    7144:	|  |   move.l 1c89e <DOSBase>,d0
    714a:	|  |   movea.l d0,a6
    714c:	|  |   move.l 24(sp),d1
    7150:	|  |   move.l 20(sp),d2
    7154:	|  |   move.l 16(sp),d3
    7158:	|  |   jsr -66(a6)
    715c:	|  |   move.l d0,12(sp)
		skipBefore --;
    7160:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    7164:	|  \-> tst.l 204(sp)
    7168:	\----- bne.s 7128 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    716a:	       move.l 196(sp),152(sp)
    7170:	       clr.l 148(sp)
    7174:	       clr.l 144(sp)
    7178:	       move.l 1c89e <DOSBase>,d0
    717e:	       movea.l d0,a6
    7180:	       move.l 152(sp),d1
    7184:	       move.l 148(sp),d2
    7188:	       move.l 144(sp),d3
    718c:	       jsr -66(a6)
    7190:	       move.l d0,140(sp)
    7194:	       move.l 140(sp),d0
    7198:	       addq.l #4,d0
    719a:	       move.l d0,1c88a <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    71a0:	       move.l 196(sp),136(sp)
    71a6:	       move.l 196(sp),-(sp)
    71aa:	       jsr 718 <get4bytes>
    71b0:	       addq.l #4,sp
    71b2:	       move.l d0,132(sp)
    71b6:	       moveq #-1,d0
    71b8:	       move.l d0,128(sp)
    71bc:	       move.l 1c89e <DOSBase>,d0
    71c2:	       movea.l d0,a6
    71c4:	       move.l 136(sp),d1
    71c8:	       move.l 132(sp),d2
    71cc:	       move.l 128(sp),d3
    71d0:	       jsr -66(a6)
    71d4:	       move.l d0,124(sp)

	while (skipAfter) {
    71d8:	   /-- bra.s 7216 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    71da:	/--|-> move.l 196(sp),40(sp)
    71e0:	|  |   move.l 196(sp),-(sp)
    71e4:	|  |   jsr 718 <get4bytes>
    71ea:	|  |   addq.l #4,sp
    71ec:	|  |   move.l d0,36(sp)
    71f0:	|  |   moveq #-1,d0
    71f2:	|  |   move.l d0,32(sp)
    71f6:	|  |   move.l 1c89e <DOSBase>,d0
    71fc:	|  |   movea.l d0,a6
    71fe:	|  |   move.l 40(sp),d1
    7202:	|  |   move.l 36(sp),d2
    7206:	|  |   move.l 32(sp),d3
    720a:	|  |   jsr -66(a6)
    720e:	|  |   move.l d0,28(sp)
		skipAfter --;
    7212:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7216:	|  \-> tst.l 188(sp)
    721a:	\----- bne.s 71da <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    721c:	       move.l 196(sp),120(sp)
    7222:	       clr.l 116(sp)
    7226:	       clr.l 112(sp)
    722a:	       move.l 1c89e <DOSBase>,d0
    7230:	       movea.l d0,a6
    7232:	       move.l 120(sp),d1
    7236:	       move.l 116(sp),d2
    723a:	       move.l 112(sp),d3
    723e:	       jsr -66(a6)
    7242:	       move.l d0,108(sp)
    7246:	       move.l 108(sp),d0
    724a:	       addq.l #4,d0
    724c:	       move.l d0,1c88e <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7252:	       move.l 196(sp),104(sp)
    7258:	       move.l 196(sp),-(sp)
    725c:	       jsr 718 <get4bytes>
    7262:	       addq.l #4,sp
    7264:	       move.l d0,100(sp)
    7268:	       clr.l 96(sp)
    726c:	       move.l 1c89e <DOSBase>,d0
    7272:	       movea.l d0,a6
    7274:	       move.l 104(sp),d1
    7278:	       move.l 100(sp),d2
    727c:	       move.l 96(sp),d3
    7280:	       jsr -66(a6)
    7284:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7288:	       move.l 196(sp),88(sp)
    728e:	       clr.l 84(sp)
    7292:	       clr.l 80(sp)
    7296:	       move.l 1c89e <DOSBase>,d0
    729c:	       movea.l d0,a6
    729e:	       move.l 88(sp),d1
    72a2:	       move.l 84(sp),d2
    72a6:	       move.l 80(sp),d3
    72aa:	       jsr -66(a6)
    72ae:	       move.l d0,76(sp)
    72b2:	       move.l 76(sp),d0
    72b6:	       addq.l #4,d0
    72b8:	       move.l d0,1c892 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    72be:	       move.l 196(sp),72(sp)
    72c4:	       move.l 196(sp),-(sp)
    72c8:	       jsr 718 <get4bytes>
    72ce:	       addq.l #4,sp
    72d0:	       move.l d0,68(sp)
    72d4:	       clr.l 64(sp)
    72d8:	       move.l 1c89e <DOSBase>,d0
    72de:	       movea.l d0,a6
    72e0:	       move.l 72(sp),d1
    72e4:	       move.l 68(sp),d2
    72e8:	       move.l 64(sp),d3
    72ec:	       jsr -66(a6)
    72f0:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    72f4:	       move.l 196(sp),56(sp)
    72fa:	       clr.l 52(sp)
    72fe:	       clr.l 48(sp)
    7302:	       move.l 1c89e <DOSBase>,d0
    7308:	       movea.l d0,a6
    730a:	       move.l 56(sp),d1
    730e:	       move.l 52(sp),d2
    7312:	       move.l 48(sp),d3
    7316:	       jsr -66(a6)
    731a:	       move.l d0,44(sp)
    731e:	       move.l 44(sp),d0
    7322:	       move.l d0,1c886 <startOfDataIndex>
    7328:	       nop
    732a:	       movem.l (sp)+,d2-d3/a6
    732e:	       lea 180(sp),sp
    7332:	       rts

00007334 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7334:	    lea -20(sp),sp
    7338:	    move.l a6,-(sp)
    733a:	    move.l d7,-(sp)
	APTR vbr = 0;
    733c:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7340:	    move.w #20090,10(sp)
    7346:	    move.w #2049,12(sp)
    734c:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7352:	    movea.l 1c896 <SysBase>,a0
    7358:	    move.w 296(a0),d0
    735c:	    move.w d0,d0
    735e:	    andi.l #65535,d0
    7364:	    moveq #1,d1
    7366:	    and.l d1,d0
    7368:	/-- beq.s 7396 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    736a:	|   lea 28(sp),a0
    736e:	|   lea -18(a0),a0
    7372:	|   move.l a0,20(sp)
    7376:	|   move.l 1c896 <SysBase>,d0
    737c:	|   movea.l d0,a6
    737e:	|   move.l 20(sp),d7
    7382:	|   exg d7,a5
    7384:	|   jsr -30(a6)
    7388:	|   exg d7,a5
    738a:	|   move.l d0,16(sp)
    738e:	|   move.l 16(sp),d0
    7392:	|   move.l d0,24(sp)

	return vbr;
    7396:	\-> move.l 24(sp),d0
}
    739a:	    move.l (sp)+,d7
    739c:	    movea.l (sp)+,a6
    739e:	    lea 20(sp),sp
    73a2:	    rts

000073a4 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    73a4:	movea.l 1c8bc <VBR>,a0
    73aa:	lea 108(a0),a0
    73ae:	move.l 4(sp),(a0)
}
    73b2:	nop
    73b4:	rts

000073b6 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    73b6:	movea.l 1c8bc <VBR>,a0
    73bc:	move.l 108(a0),d0
}
    73c0:	rts

000073c2 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    73c2:	       subq.l #8,sp
    73c4:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    73c6:	       pea 18cdc <PutChar+0x1058>
    73cc:	       jsr 171b0 <KPrintF>
    73d2:	       addq.l #4,sp
	Forbid();
    73d4:	       move.l 1c896 <SysBase>,d0
    73da:	       movea.l d0,a6
    73dc:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    73e0:	       pea 18cf4 <PutChar+0x1070>
    73e6:	       jsr 171b0 <KPrintF>
    73ec:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    73ee:	       movea.l 1c89a <custom>,a0
    73f4:	       move.w 16(a0),d0
    73f8:	       move.w d0,1c8ba <SystemADKCON>
	SystemInts=custom->intenar;
    73fe:	       movea.l 1c89a <custom>,a0
    7404:	       move.w 28(a0),d0
    7408:	       move.w d0,1c8b6 <SystemInts>
	SystemDMA=custom->dmaconr;
    740e:	       movea.l 1c89a <custom>,a0
    7414:	       move.w 2(a0),d0
    7418:	       move.w d0,1c8b8 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    741e:	       movea.l 1c8a2 <GfxBase>,a0
    7424:	       move.l 34(a0),d0
    7428:	       move.l d0,1c8c4 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    742e:	       pea 18d12 <PutChar+0x108e>
    7434:	       jsr 171b0 <KPrintF>
    743a:	       addq.l #4,sp
	LoadView(0);
    743c:	       clr.l 4(sp)
    7440:	       move.l 1c8a2 <GfxBase>,d0
    7446:	       movea.l d0,a6
    7448:	       movea.l 4(sp),a1
    744c:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7450:	       pea 18d28 <PutChar+0x10a4>
    7456:	       jsr 171b0 <KPrintF>
    745c:	       addq.l #4,sp
	WaitTOF();
    745e:	       move.l 1c8a2 <GfxBase>,d0
    7464:	       movea.l d0,a6
    7466:	       jsr -270(a6)
	WaitTOF();
    746a:	       move.l 1c8a2 <GfxBase>,d0
    7470:	       movea.l d0,a6
    7472:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    7476:	       pea 18d3d <PutChar+0x10b9>
    747c:	       jsr 171b0 <KPrintF>
    7482:	       addq.l #4,sp
	WaitVbl();
    7484:	       jsr 170e4 <WaitVbl>
	WaitVbl();
    748a:	       jsr 170e4 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7490:	       pea 18d52 <PutChar+0x10ce>
    7496:	       jsr 171b0 <KPrintF>
    749c:	       addq.l #4,sp
	OwnBlitter();
    749e:	       move.l 1c8a2 <GfxBase>,d0
    74a4:	       movea.l d0,a6
    74a6:	       jsr -456(a6)
	WaitBlit();	
    74aa:	       move.l 1c8a2 <GfxBase>,d0
    74b0:	       movea.l d0,a6
    74b2:	       jsr -228(a6)
	Disable();
    74b6:	       move.l 1c896 <SysBase>,d0
    74bc:	       movea.l d0,a6
    74be:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    74c2:	       pea 18d73 <PutChar+0x10ef>
    74c8:	       jsr 171b0 <KPrintF>
    74ce:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    74d0:	       movea.l 1c89a <custom>,a0
    74d6:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    74dc:	       pea 18d8a <PutChar+0x1106>
    74e2:	       jsr 171b0 <KPrintF>
    74e8:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    74ea:	       clr.l 8(sp)
    74ee:	   /-- bra.s 750c <TakeSystem+0x14a>
		custom->color[a]=0;
    74f0:	/--|-> movea.l 1c89a <custom>,a0
    74f6:	|  |   move.l 8(sp),d0
    74fa:	|  |   addi.l #192,d0
    7500:	|  |   add.l d0,d0
    7502:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7508:	|  |   addq.l #1,8(sp)
    750c:	|  \-> moveq #31,d0
    750e:	|      cmp.l 8(sp),d0
    7512:	\----- bge.s 74f0 <TakeSystem+0x12e>

	WaitVbl();
    7514:	       jsr 170e4 <WaitVbl>
	WaitVbl();
    751a:	       jsr 170e4 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7520:	       pea 18daf <PutChar+0x112b>
    7526:	       jsr 171b0 <KPrintF>
    752c:	       addq.l #4,sp
	VBR=GetVBR();
    752e:	       jsr 7334 <GetVBR>
    7534:	       move.l d0,1c8bc <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    753a:	       jsr 73b6 <GetInterruptHandler>
    7540:	       move.l d0,1c8c0 <SystemIrq>
}
    7546:	       nop
    7548:	       movea.l (sp)+,a6
    754a:	       addq.l #8,sp
    754c:	       rts

0000754e <FreeSystem>:

void FreeSystem() { 
    754e:	subq.l #4,sp
    7550:	move.l a6,-(sp)
	WaitVbl();
    7552:	jsr 170e4 <WaitVbl>
	WaitBlit();
    7558:	move.l 1c8a2 <GfxBase>,d0
    755e:	movea.l d0,a6
    7560:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    7564:	movea.l 1c89a <custom>,a0
    756a:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7570:	movea.l 1c89a <custom>,a0
    7576:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    757c:	movea.l 1c89a <custom>,a0
    7582:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    7588:	move.l 1c8c0 <SystemIrq>,d0
    758e:	move.l d0,-(sp)
    7590:	jsr 73a4 <SetInterruptHandler>
    7596:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    7598:	movea.l 1c8a2 <GfxBase>,a0
    759e:	move.l 38(a0),d0
    75a2:	movea.l 1c89a <custom>,a0
    75a8:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    75ac:	movea.l 1c8a2 <GfxBase>,a0
    75b2:	move.l 50(a0),d0
    75b6:	movea.l 1c89a <custom>,a0
    75bc:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    75c0:	movea.l 1c89a <custom>,a0
    75c6:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    75cc:	move.w 1c8b8 <SystemDMA>,d0
    75d2:	movea.l 1c89a <custom>,a0
    75d8:	ori.w #-32768,d0
    75dc:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    75e0:	move.w 1c8ba <SystemADKCON>,d0
    75e6:	movea.l 1c89a <custom>,a0
    75ec:	ori.w #-32768,d0
    75f0:	move.w d0,158(a0)

	WaitBlit();	
    75f4:	move.l 1c8a2 <GfxBase>,d0
    75fa:	movea.l d0,a6
    75fc:	jsr -228(a6)
	DisownBlitter();
    7600:	move.l 1c8a2 <GfxBase>,d0
    7606:	movea.l d0,a6
    7608:	jsr -462(a6)
	Enable();
    760c:	move.l 1c896 <SysBase>,d0
    7612:	movea.l d0,a6
    7614:	jsr -126(a6)

	LoadView(ActiView);
    7618:	move.l 1c8c4 <ActiView>,4(sp)
    7620:	move.l 1c8a2 <GfxBase>,d0
    7626:	movea.l d0,a6
    7628:	movea.l 4(sp),a1
    762c:	jsr -222(a6)
	WaitTOF();
    7630:	move.l 1c8a2 <GfxBase>,d0
    7636:	movea.l d0,a6
    7638:	jsr -270(a6)
	WaitTOF();
    763c:	move.l 1c8a2 <GfxBase>,d0
    7642:	movea.l d0,a6
    7644:	jsr -270(a6)

	Permit();
    7648:	move.l 1c896 <SysBase>,d0
    764e:	movea.l d0,a6
    7650:	jsr -138(a6)
}
    7654:	nop
    7656:	movea.l (sp)+,a6
    7658:	addq.l #4,sp
    765a:	rts

0000765c <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    765c:	    lea -132(sp),sp
    7660:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    7664:	    move.l #512,140(sp)
  	*bp = 0;
    766c:	    movea.l 140(sp),a0
    7670:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    7672:	    movea.w #4,a0
    7676:	    move.l (a0),d0
    7678:	    move.l d0,1c896 <SysBase>
	custom = (struct Custom*)0xdff000;	
    767e:	    move.l #14675968,1c89a <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    7688:	    move.l #101843,136(sp)
    7690:	    clr.l 132(sp)
    7694:	    move.l 1c896 <SysBase>,d0
    769a:	    movea.l d0,a6
    769c:	    movea.l 136(sp),a1
    76a0:	    move.l 132(sp),d0
    76a4:	    jsr -552(a6)
    76a8:	    move.l d0,128(sp)
    76ac:	    move.l 128(sp),d0
    76b0:	    move.l d0,1c8a2 <GfxBase>
	if (!GfxBase)
    76b6:	    move.l 1c8a2 <GfxBase>,d0
    76bc:	/-- bne.s 76d2 <main+0x76>
		Exit(0);
    76be:	|   clr.l 124(sp)
    76c2:	|   move.l 1c89e <DOSBase>,d0
    76c8:	|   movea.l d0,a6
    76ca:	|   move.l 124(sp),d1
    76ce:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    76d2:	\-> move.l #101860,120(sp)
    76da:	    clr.l 116(sp)
    76de:	    move.l 1c896 <SysBase>,d0
    76e4:	    movea.l d0,a6
    76e6:	    movea.l 120(sp),a1
    76ea:	    move.l 116(sp),d0
    76ee:	    jsr -552(a6)
    76f2:	    move.l d0,112(sp)
    76f6:	    move.l 112(sp),d0
    76fa:	    move.l d0,1c89e <DOSBase>
	if (!DOSBase)
    7700:	    move.l 1c89e <DOSBase>,d0
    7706:	/-- bne.s 771c <main+0xc0>
		Exit(0);
    7708:	|   clr.l 108(sp)
    770c:	|   move.l 1c89e <DOSBase>,d0
    7712:	|   movea.l d0,a6
    7714:	|   move.l 108(sp),d1
    7718:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    771c:	\-> move.l #101872,104(sp)
    7724:	    clr.l 100(sp)
    7728:	    move.l 1c896 <SysBase>,d0
    772e:	    movea.l d0,a6
    7730:	    movea.l 104(sp),a1
    7734:	    move.l 100(sp),d0
    7738:	    jsr -552(a6)
    773c:	    move.l d0,96(sp)
    7740:	    move.l 96(sp),d0
    7744:	    move.l d0,1c8a6 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    774a:	    move.l 1c8a6 <MathIeeeSingBasBase>,d0
    7750:	/-- bne.s 7766 <main+0x10a>
		Exit(0);	
    7752:	|   clr.l 92(sp)
    7756:	|   move.l 1c89e <DOSBase>,d0
    775c:	|   movea.l d0,a6
    775e:	|   move.l 92(sp),d1
    7762:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    7766:	\-> move.l #101896,88(sp)
    776e:	    clr.l 84(sp)
    7772:	    move.l 1c896 <SysBase>,d0
    7778:	    movea.l d0,a6
    777a:	    movea.l 88(sp),a1
    777e:	    move.l 84(sp),d0
    7782:	    jsr -552(a6)
    7786:	    move.l d0,80(sp)
    778a:	    move.l 80(sp),d0
    778e:	    move.l d0,1c8aa <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    7794:	    move.l 1c8aa <MathIeeeSingTransBase>,d0
    779a:	/-- bne.s 77b0 <main+0x154>
		Exit(0);
    779c:	|   clr.l 76(sp)
    77a0:	|   move.l 1c89e <DOSBase>,d0
    77a6:	|   movea.l d0,a6
    77a8:	|   move.l 76(sp),d1
    77ac:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    77b0:	\-> move.l #101922,72(sp)
    77b8:	    clr.l 68(sp)
    77bc:	    move.l 1c896 <SysBase>,d0
    77c2:	    movea.l d0,a6
    77c4:	    movea.l 72(sp),a1
    77c8:	    move.l 68(sp),d0
    77cc:	    jsr -552(a6)
    77d0:	    move.l d0,64(sp)
    77d4:	    move.l 64(sp),d0
    77d8:	    move.l d0,1c8b2 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    77de:	    move.l 1c8b2 <MathIeeeDoubTransBase>,d0
    77e4:	/-- bne.s 77fa <main+0x19e>
		Exit(0);
    77e6:	|   clr.l 60(sp)
    77ea:	|   move.l 1c89e <DOSBase>,d0
    77f0:	|   movea.l d0,a6
    77f2:	|   move.l 60(sp),d1
    77f6:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    77fa:	\-> move.l #101948,56(sp)
    7802:	    clr.l 52(sp)
    7806:	    move.l 1c896 <SysBase>,d0
    780c:	    movea.l d0,a6
    780e:	    movea.l 56(sp),a1
    7812:	    move.l 52(sp),d0
    7816:	    jsr -552(a6)
    781a:	    move.l d0,48(sp)
    781e:	    move.l 48(sp),d0
    7822:	    move.l d0,1c8ae <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    7828:	    move.l 1c8ae <MathIeeeDoubBasBase>,d0
    782e:	/-- bne.s 7844 <main+0x1e8>
		Exit(0);
    7830:	|   clr.l 44(sp)
    7834:	|   move.l 1c89e <DOSBase>,d0
    783a:	|   movea.l d0,a6
    783c:	|   move.l 44(sp),d1
    7840:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 027!\n");
    7844:	\-> pea 18e54 <PutChar+0x11d0>
    784a:	    jsr 171b0 <KPrintF>
    7850:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 027!\n", 25);
    7852:	    move.l 1c89e <DOSBase>,d0
    7858:	    movea.l d0,a6
    785a:	    jsr -60(a6)
    785e:	    move.l d0,40(sp)
    7862:	    move.l 40(sp),d0
    7866:	    move.l d0,36(sp)
    786a:	    move.l #102004,32(sp)
    7872:	    moveq #25,d0
    7874:	    move.l d0,28(sp)
    7878:	    move.l 1c89e <DOSBase>,d0
    787e:	    movea.l d0,a6
    7880:	    move.l 36(sp),d1
    7884:	    move.l 32(sp),d2
    7888:	    move.l 28(sp),d3
    788c:	    jsr -48(a6)
    7890:	    move.l d0,24(sp)
	Delay(50);
    7894:	    moveq #50,d0
    7896:	    move.l d0,20(sp)
    789a:	    move.l 1c89e <DOSBase>,d0
    78a0:	    movea.l d0,a6
    78a2:	    move.l 20(sp),d1
    78a6:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    78aa:	    pea 18e8d <PutChar+0x1209>
    78b0:	    jsr 171b0 <KPrintF>
    78b6:	    addq.l #4,sp
	TakeSystem();
    78b8:	    jsr 73c2 <TakeSystem>
	KPrintF("System Taken\n");
    78be:	    pea 18e9c <PutChar+0x1218>
    78c4:	    jsr 171b0 <KPrintF>
    78ca:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    78cc:	    movea.l 1c89a <custom>,a0
    78d2:	    move.w #-30721,150(a0)
	WaitVbl();
    78d8:	    jsr 170e4 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    78de:	    pea 18eaa <PutChar+0x1226>
    78e4:	    jsr 171b0 <KPrintF>
    78ea:	    addq.l #4,sp
	main_sludge(argc, argv);	
    78ec:	    move.l 152(sp),-(sp)
    78f0:	    move.l 152(sp),-(sp)
    78f4:	    jsr 41f8 <main_sludge>
    78fa:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    78fc:	    jsr 754e <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    7902:	    move.l 1c89e <DOSBase>,16(sp)
    790a:	    move.l 1c896 <SysBase>,d0
    7910:	    movea.l d0,a6
    7912:	    movea.l 16(sp),a1
    7916:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    791a:	    move.l 1c8a2 <GfxBase>,12(sp)
    7922:	    move.l 1c896 <SysBase>,d0
    7928:	    movea.l d0,a6
    792a:	    movea.l 12(sp),a1
    792e:	    jsr -414(a6)
    7932:	    moveq #0,d0
}
    7934:	    movem.l (sp)+,d2-d3/a6
    7938:	    lea 132(sp),sp
    793c:	    rts

0000793e <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    793e:	    lea -16(sp),sp
    7942:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    7944:	    moveq #8,d0
    7946:	    move.l d0,16(sp)
    794a:	    clr.l 12(sp)
    794e:	    move.l 1c896 <SysBase>,d0
    7954:	    movea.l d0,a6
    7956:	    move.l 16(sp),d0
    795a:	    move.l 12(sp),d1
    795e:	    jsr -684(a6)
    7962:	    move.l d0,8(sp)
    7966:	    move.l 8(sp),d0
    796a:	    move.l d0,4(sp)
	if (!newStat) {
    796e:	/-- bne.s 799e <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    7970:	|   movea.l 1c21c <nowStatus>,a0
    7976:	|   move.l (a0),d0
    7978:	|   movea.l 4(sp),a0
    797c:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    7980:	|   pea 18900 <PutChar+0xc7c>
    7986:	|   jsr b8 <copyString>
    798c:	|   addq.l #4,sp
    798e:	|   movea.l 4(sp),a0
    7992:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    7994:	|   movea.l 1c21c <nowStatus>,a0
    799a:	|   move.l 4(sp),(a0)
	}
}
    799e:	\-> nop
    79a0:	    movea.l (sp)+,a6
    79a2:	    lea 16(sp),sp
    79a6:	    rts

000079a8 <clearStatusBar>:

void clearStatusBar () {
    79a8:	       lea -16(sp),sp
    79ac:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    79ae:	       movea.l 1c21c <nowStatus>,a0
    79b4:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    79b8:	       movea.l 1c21c <nowStatus>,a0
    79be:	       moveq #-1,d0
    79c0:	       move.l d0,6(a0)
	while (stat) {
    79c4:	   /-- bra.s 7a04 <clearStatusBar+0x5c>
		kill = stat;
    79c6:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    79cc:	|  |   movea.l 16(sp),a0
    79d0:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    79d6:	|  |   movea.l 12(sp),a0
    79da:	|  |   move.l (a0),8(sp)
    79de:	|  |   move.l 1c896 <SysBase>,d0
    79e4:	|  |   movea.l d0,a6
    79e6:	|  |   movea.l 8(sp),a1
    79ea:	|  |   jsr -690(a6)
		FreeVec(kill);
    79ee:	|  |   move.l 12(sp),4(sp)
    79f4:	|  |   move.l 1c896 <SysBase>,d0
    79fa:	|  |   movea.l d0,a6
    79fc:	|  |   movea.l 4(sp),a1
    7a00:	|  |   jsr -690(a6)
	while (stat) {
    7a04:	|  \-> tst.l 16(sp)
    7a08:	\----- bne.s 79c6 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    7a0a:	       movea.l 1c21c <nowStatus>,a0
    7a10:	       clr.l (a0)
}
    7a12:	       nop
    7a14:	       movea.l (sp)+,a6
    7a16:	       lea 16(sp),sp
    7a1a:	       rts

00007a1c <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    7a1c:	clr.l 1c8c8 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    7a22:	move.w #-1,1c8cc <mainStatus+0x4>
	mainStatus.litStatus = -1;
    7a2a:	moveq #-1,d0
    7a2c:	move.l d0,1c8ce <mainStatus+0x6>
	mainStatus.statusX = 10;
    7a32:	moveq #10,d0
    7a34:	move.l d0,1c8d2 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    7a3a:	movea.l 1c7ee <winHeight>,a0
    7a40:	lea -15(a0),a0
    7a44:	move.l a0,d0
    7a46:	move.l d0,1c8d6 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    7a4c:	nop
    7a4e:	rts

00007a50 <killLastStatus>:

void killLastStatus () {
    7a50:	    lea -12(sp),sp
    7a54:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7a56:	    movea.l 1c21c <nowStatus>,a0
    7a5c:	    move.l (a0),d0
    7a5e:	/-- beq.s 7aa8 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    7a60:	|   movea.l 1c21c <nowStatus>,a0
    7a66:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    7a6a:	|   movea.l 1c21c <nowStatus>,a0
    7a70:	|   movea.l 12(sp),a1
    7a74:	|   move.l 4(a1),d0
    7a78:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    7a7a:	|   movea.l 12(sp),a0
    7a7e:	|   move.l (a0),8(sp)
    7a82:	|   move.l 1c896 <SysBase>,d0
    7a88:	|   movea.l d0,a6
    7a8a:	|   movea.l 8(sp),a1
    7a8e:	|   jsr -690(a6)
		FreeVec(kill);
    7a92:	|   move.l 12(sp),4(sp)
    7a98:	|   move.l 1c896 <SysBase>,d0
    7a9e:	|   movea.l d0,a6
    7aa0:	|   movea.l 4(sp),a1
    7aa4:	|   jsr -690(a6)
	}
}
    7aa8:	\-> nop
    7aaa:	    movea.l (sp)+,a6
    7aac:	    lea 12(sp),sp
    7ab0:	    rts

00007ab2 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    7ab2:	movea.l 1c21c <nowStatus>,a0
    7ab8:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    7abe:	movea.l 1c21c <nowStatus>,a0
    7ac4:	move.l 8(sp),14(a0)
}
    7aca:	nop
    7acc:	rts

00007ace <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    7ace:	       lea -100(sp),sp
    7ad2:	       move.l a6,-(sp)
    7ad4:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    7ad6:	       movea.l 1c21c <nowStatus>,a0
    7adc:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7ae0:	       movea.l 1c21c <nowStatus>,a0
    7ae6:	       move.w 4(a0),d0
    7aea:	       move.w d0,d0
    7aec:	       andi.l #65535,d0
    7af2:	       move.l 112(sp),-(sp)
    7af6:	       move.l d0,-(sp)
    7af8:	       jsr 8d0 <put2bytes>
    7afe:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7b00:	       movea.l 1c21c <nowStatus>,a0
    7b06:	       move.l 6(a0),d0
    7b0a:	       move.l d0,d0
    7b0c:	       movea.w d0,a0
    7b0e:	       move.l 112(sp),-(sp)
    7b12:	       move.l a0,-(sp)
    7b14:	       jsr a9c <putSigned>
    7b1a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7b1c:	       movea.l 1c21c <nowStatus>,a0
    7b22:	       move.l 10(a0),d0
    7b26:	       move.l 112(sp),-(sp)
    7b2a:	       move.l d0,-(sp)
    7b2c:	       jsr 8d0 <put2bytes>
    7b32:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7b34:	       movea.l 1c21c <nowStatus>,a0
    7b3a:	       move.l 14(a0),d0
    7b3e:	       move.l 112(sp),-(sp)
    7b42:	       move.l d0,-(sp)
    7b44:	       jsr 8d0 <put2bytes>
    7b4a:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7b4c:	       move.l 112(sp),100(sp)
    7b52:	       movea.l 1c21c <nowStatus>,a0
    7b58:	       move.l 18(a0),96(sp)
    7b5e:	       move.l 1c89e <DOSBase>,d0
    7b64:	       movea.l d0,a6
    7b66:	       move.l 100(sp),d1
    7b6a:	       move.l 96(sp),d2
    7b6e:	       jsr -312(a6)
    7b72:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7b76:	       move.l 112(sp),88(sp)
    7b7c:	       movea.l 1c21c <nowStatus>,a0
    7b82:	       move.l 22(a0),84(sp)
    7b88:	       move.l 1c89e <DOSBase>,d0
    7b8e:	       movea.l d0,a6
    7b90:	       move.l 88(sp),d1
    7b94:	       move.l 84(sp),d2
    7b98:	       jsr -312(a6)
    7b9c:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    7ba0:	       move.l 112(sp),76(sp)
    7ba6:	       movea.l 1c21c <nowStatus>,a0
    7bac:	       move.l 26(a0),72(sp)
    7bb2:	       move.l 1c89e <DOSBase>,d0
    7bb8:	       movea.l d0,a6
    7bba:	       move.l 76(sp),d1
    7bbe:	       move.l 72(sp),d2
    7bc2:	       jsr -312(a6)
    7bc6:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    7bca:	       move.l 112(sp),64(sp)
    7bd0:	       movea.l 1c21c <nowStatus>,a0
    7bd6:	       move.l 30(a0),60(sp)
    7bdc:	       move.l 1c89e <DOSBase>,d0
    7be2:	       movea.l d0,a6
    7be4:	       move.l 64(sp),d1
    7be8:	       move.l 60(sp),d2
    7bec:	       jsr -312(a6)
    7bf0:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7bf4:	       move.l 112(sp),52(sp)
    7bfa:	       movea.l 1c21c <nowStatus>,a0
    7c00:	       move.l 34(a0),48(sp)
    7c06:	       move.l 1c89e <DOSBase>,d0
    7c0c:	       movea.l d0,a6
    7c0e:	       move.l 52(sp),d1
    7c12:	       move.l 48(sp),d2
    7c16:	       jsr -312(a6)
    7c1a:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7c1e:	       move.l 112(sp),40(sp)
    7c24:	       movea.l 1c21c <nowStatus>,a0
    7c2a:	       move.l 38(a0),36(sp)
    7c30:	       move.l 1c89e <DOSBase>,d0
    7c36:	       movea.l d0,a6
    7c38:	       move.l 40(sp),d1
    7c3c:	       move.l 36(sp),d2
    7c40:	       jsr -312(a6)
    7c44:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7c48:	   /-- bra.s 7c8c <saveStatusBars+0x1be>
		FPutC (fp,1);
    7c4a:	/--|-> move.l 112(sp),16(sp)
    7c50:	|  |   moveq #1,d0
    7c52:	|  |   move.l d0,12(sp)
    7c56:	|  |   move.l 1c89e <DOSBase>,d0
    7c5c:	|  |   movea.l d0,a6
    7c5e:	|  |   move.l 16(sp),d1
    7c62:	|  |   move.l 12(sp),d2
    7c66:	|  |   jsr -312(a6)
    7c6a:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7c6e:	|  |   movea.l 104(sp),a0
    7c72:	|  |   move.l (a0),d0
    7c74:	|  |   move.l 112(sp),-(sp)
    7c78:	|  |   move.l d0,-(sp)
    7c7a:	|  |   jsr bd8 <writeString>
    7c80:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7c82:	|  |   movea.l 104(sp),a0
    7c86:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7c8c:	|  \-> tst.l 104(sp)
    7c90:	\----- bne.s 7c4a <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7c92:	       move.l 112(sp),28(sp)
    7c98:	       clr.l 24(sp)
    7c9c:	       move.l 1c89e <DOSBase>,d0
    7ca2:	       movea.l d0,a6
    7ca4:	       move.l 28(sp),d1
    7ca8:	       move.l 24(sp),d2
    7cac:	       jsr -312(a6)
    7cb0:	       move.l d0,20(sp)
}
    7cb4:	       nop
    7cb6:	       move.l (sp)+,d2
    7cb8:	       movea.l (sp)+,a6
    7cba:	       lea 100(sp),sp
    7cbe:	       rts

00007cc0 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7cc0:	movea.l 1c21c <nowStatus>,a0
    7cc6:	move.l 4(sp),6(a0)
}
    7ccc:	nop
    7cce:	rts

00007cd0 <setStatusBar>:

void setStatusBar (char * txt) {
    7cd0:	    subq.l #4,sp
    7cd2:	    move.l a6,-(sp)
    7cd4:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    7cd6:	    movea.l 1c21c <nowStatus>,a0
    7cdc:	    move.l (a0),d0
    7cde:	/-- beq.s 7d12 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7ce0:	|   movea.l 1c21c <nowStatus>,a0
    7ce6:	|   movea.l (a0),a0
    7ce8:	|   move.l (a0),8(sp)
    7cec:	|   move.l 1c896 <SysBase>,d0
    7cf2:	|   movea.l d0,a6
    7cf4:	|   movea.l 8(sp),a1
    7cf8:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7cfc:	|   movea.l 1c21c <nowStatus>,a0
    7d02:	|   movea.l (a0),a2
    7d04:	|   move.l 16(sp),-(sp)
    7d08:	|   jsr b8 <copyString>
    7d0e:	|   addq.l #4,sp
    7d10:	|   move.l d0,(a2)
	}
}
    7d12:	\-> nop
    7d14:	    movea.l (sp)+,a2
    7d16:	    movea.l (sp)+,a6
    7d18:	    addq.l #4,sp
    7d1a:	    rts

00007d1c <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7d1c:	       movea.l 1c21c <nowStatus>,a0
    7d22:	       move.l (a0),d0
    7d24:	/----- beq.s 7d32 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7d26:	|      movea.l 1c21c <nowStatus>,a0
    7d2c:	|      movea.l (a0),a0
    7d2e:	|      move.l (a0),d0
    7d30:	|  /-- bra.s 7d38 <statusBarText+0x1c>
	} else {
		return "";
    7d32:	\--|-> move.l #100608,d0
	}
    7d38:	   \-> rts

00007d3a <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7d3a:	       lea -28(sp),sp
    7d3e:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7d42:	       move.l 52(sp),-(sp)
    7d46:	       jsr 15872 <stringWidth>
    7d4c:	       addq.l #4,sp
    7d4e:	       asr.l #1,d0
    7d50:	       move.l d0,-(sp)
    7d52:	       jsr 175ec <__floatsisf>
    7d58:	       addq.l #4,sp
    7d5a:	       move.l d0,d1
    7d5c:	       move.l 1c234 <cameraZoom>,d0
    7d62:	       move.l d0,-(sp)
    7d64:	       move.l d1,-(sp)
    7d66:	       jsr 17498 <__divsf3>
    7d6c:	       addq.l #8,sp
    7d6e:	       move.l d0,-(sp)
    7d70:	       jsr 17584 <__fixsfsi>
    7d76:	       addq.l #4,sp
    7d78:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7d7c:	       move.l 56(sp),d0
    7d80:	       sub.l 44(sp),d0
    7d84:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7d88:	       move.l 56(sp),d0
    7d8c:	       add.l 44(sp),d0
    7d90:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7d94:	       moveq #12,d0
    7d96:	       move.l d0,32(sp)
    7d9a:	       clr.l 28(sp)
    7d9e:	       move.l 1c896 <SysBase>,d0
    7da4:	       movea.l d0,a6
    7da6:	       move.l 32(sp),d0
    7daa:	       move.l 28(sp),d1
    7dae:	       jsr -684(a6)
    7db2:	       move.l d0,24(sp)
    7db6:	       move.l 24(sp),d0
    7dba:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7dbe:	       movea.l 1c8f2 <speech>,a0
    7dc4:	       move.l 4(a0),d0
    7dc8:	       movea.l 20(sp),a0
    7dcc:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7dd0:	       move.l 52(sp),-(sp)
    7dd4:	       jsr b8 <copyString>
    7dda:	       addq.l #4,sp
    7ddc:	       movea.l 20(sp),a0
    7de0:	       move.l d0,(a0)
	newLine -> x = xx1;
    7de2:	       movea.l 20(sp),a0
    7de6:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7dec:	       movea.l 1c8f2 <speech>,a0
    7df2:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7df8:	       moveq #4,d0
    7dfa:	       cmp.l 40(sp),d0
    7dfe:	   /-- blt.s 7e20 <addSpeechLine+0xe6>
    7e00:	   |   movea.l 60(sp),a0
    7e04:	   |   move.l (a0),d1
    7e06:	   |   moveq #5,d0
    7e08:	   |   sub.l 40(sp),d0
    7e0c:	   |   cmp.l d1,d0
    7e0e:	   +-- ble.s 7e20 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7e10:	   |   moveq #5,d0
    7e12:	   |   sub.l 40(sp),d0
    7e16:	   |   movea.l 60(sp),a0
    7e1a:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7e1c:	/--|-- bra.w 7f4c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7e20:	|  \-> move.l 36(sp),-(sp)
    7e24:	|      jsr 175ec <__floatsisf>
    7e2a:	|      addq.l #4,sp
    7e2c:	|      move.l d0,d2
    7e2e:	|      move.l 1c7ea <winWidth>,d0
    7e34:	|      move.l d0,-(sp)
    7e36:	|      jsr 17614 <__floatunsisf>
    7e3c:	|      addq.l #4,sp
    7e3e:	|      move.l d0,d1
    7e40:	|      move.l 1c234 <cameraZoom>,d0
    7e46:	|      move.l d0,-(sp)
    7e48:	|      move.l d1,-(sp)
    7e4a:	|      jsr 17498 <__divsf3>
    7e50:	|      addq.l #8,sp
    7e52:	|      move.l #1084227584,-(sp)
    7e58:	|      move.l d0,-(sp)
    7e5a:	|      jsr 178e0 <__subsf3>
    7e60:	|      addq.l #8,sp
    7e62:	|      move.l d0,-(sp)
    7e64:	|      move.l d2,-(sp)
    7e66:	|      jsr 176d4 <__gesf2>
    7e6c:	|      addq.l #8,sp
    7e6e:	|      tst.l d0
    7e70:	|  /-- bge.s 7e76 <addSpeechLine+0x13c>
}
    7e72:	+--|-- bra.w 7f4c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7e76:	|  \-> movea.l 60(sp),a0
    7e7a:	|      move.l (a0),d0
    7e7c:	|      move.l d0,-(sp)
    7e7e:	|      jsr 175ec <__floatsisf>
    7e84:	|      addq.l #4,sp
    7e86:	|      move.l d0,-(sp)
    7e88:	|      jsr 17504 <__extendsfdf2>
    7e8e:	|      addq.l #4,sp
    7e90:	|      move.l d0,d4
    7e92:	|      move.l d1,d5
    7e94:	|      move.l 1c7ea <winWidth>,d0
    7e9a:	|      move.l d0,-(sp)
    7e9c:	|      jsr 17614 <__floatunsisf>
    7ea2:	|      addq.l #4,sp
    7ea4:	|      move.l d0,d1
    7ea6:	|      move.l 1c234 <cameraZoom>,d0
    7eac:	|      move.l d0,-(sp)
    7eae:	|      move.l d1,-(sp)
    7eb0:	|      jsr 17498 <__divsf3>
    7eb6:	|      addq.l #8,sp
    7eb8:	|      move.l d0,-(sp)
    7eba:	|      jsr 17504 <__extendsfdf2>
    7ec0:	|      addq.l #4,sp
    7ec2:	|      clr.l -(sp)
    7ec4:	|      move.l #1075052544,-(sp)
    7eca:	|      move.l d1,-(sp)
    7ecc:	|      move.l d0,-(sp)
    7ece:	|      jsr 1787e <__subdf3>
    7ed4:	|      lea 16(sp),sp
    7ed8:	|      move.l d0,d2
    7eda:	|      move.l d1,d3
    7edc:	|      move.l 36(sp),-(sp)
    7ee0:	|      jsr 175ac <__floatsidf>
    7ee6:	|      addq.l #4,sp
    7ee8:	|      move.l d1,-(sp)
    7eea:	|      move.l d0,-(sp)
    7eec:	|      move.l d3,-(sp)
    7eee:	|      move.l d2,-(sp)
    7ef0:	|      jsr 1787e <__subdf3>
    7ef6:	|      lea 16(sp),sp
    7efa:	|      move.l d1,-(sp)
    7efc:	|      move.l d0,-(sp)
    7efe:	|      move.l d5,-(sp)
    7f00:	|      move.l d4,-(sp)
    7f02:	|      jsr 1770a <__gtdf2>
    7f08:	|      lea 16(sp),sp
    7f0c:	|      tst.l d0
    7f0e:	|  /-- bgt.s 7f12 <addSpeechLine+0x1d8>
}
    7f10:	+--|-- bra.s 7f4c <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7f12:	|  \-> move.l 1c7ea <winWidth>,d0
    7f18:	|      move.l d0,-(sp)
    7f1a:	|      jsr 17614 <__floatunsisf>
    7f20:	|      addq.l #4,sp
    7f22:	|      move.l d0,d1
    7f24:	|      move.l 1c234 <cameraZoom>,d0
    7f2a:	|      move.l d0,-(sp)
    7f2c:	|      move.l d1,-(sp)
    7f2e:	|      jsr 17498 <__divsf3>
    7f34:	|      addq.l #8,sp
    7f36:	|      move.l d0,-(sp)
    7f38:	|      jsr 17584 <__fixsfsi>
    7f3e:	|      addq.l #4,sp
    7f40:	|      subq.l #5,d0
    7f42:	|      sub.l 36(sp),d0
    7f46:	|      movea.l 60(sp),a0
    7f4a:	|      move.l d0,(a0)
}
    7f4c:	\----> nop
    7f4e:	       movem.l (sp)+,d2-d5/a6
    7f52:	       lea 28(sp),sp
    7f56:	       rts

00007f58 <initSpeech>:


void initSpeech () {
    7f58:	       lea -12(sp),sp
    7f5c:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7f5e:	       moveq #20,d0
    7f60:	       move.l d0,12(sp)
    7f64:	       clr.l 8(sp)
    7f68:	       move.l 1c896 <SysBase>,d0
    7f6e:	       movea.l d0,a6
    7f70:	       move.l 12(sp),d0
    7f74:	       move.l 8(sp),d1
    7f78:	       jsr -684(a6)
    7f7c:	       move.l d0,4(sp)
    7f80:	       move.l 4(sp),d0
    7f84:	       move.l d0,1c8f2 <speech>
	if (speech) {
    7f8a:	       move.l 1c8f2 <speech>,d0
    7f90:	/----- beq.s 7fbc <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7f92:	|      movea.l 1c8f2 <speech>,a0
    7f98:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7f9a:	|      movea.l 1c8f2 <speech>,a0
    7fa0:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7fa4:	|      movea.l 1c8f2 <speech>,a0
    7faa:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7fae:	|      movea.l 1c8f2 <speech>,a0
    7fb4:	|      moveq #-1,d0
    7fb6:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7fba:	|  /-- bra.s 7fca <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7fbc:	\--|-> pea 18ee7 <PutChar+0x1263>
    7fc2:	   |   jsr 171b0 <KPrintF>
    7fc8:	   |   addq.l #4,sp
}
    7fca:	   \-> nop
    7fcc:	       movea.l (sp)+,a6
    7fce:	       lea 12(sp),sp
    7fd2:	       rts

00007fd4 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7fd4:	       movea.l 1c8f2 <speech>,a0
    7fda:	       move.l 4(a0),d0
    7fde:	/----- beq.s 7fec <isThereAnySpeechGoingOn+0x18>
    7fe0:	|      movea.l 1c8f2 <speech>,a0
    7fe6:	|      move.l 16(a0),d0
    7fea:	|  /-- bra.s 7fee <isThereAnySpeechGoingOn+0x1a>
    7fec:	\--|-> moveq #-1,d0
}
    7fee:	   \-> rts

00007ff0 <killAllSpeech>:

void killAllSpeech () {
    7ff0:	       lea -12(sp),sp
    7ff4:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7ff6:	       movea.l 1c8f2 <speech>,a0
    7ffc:	       move.l 12(a0),d0
    8000:	       moveq #-1,d1
    8002:	       cmp.l d0,d1
    8004:	   /-- beq.s 8012 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    8006:	   |   movea.l 1c8f2 <speech>,a0
    800c:	   |   moveq #-1,d0
    800e:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    8012:	   \-> movea.l 1c8f2 <speech>,a0
    8018:	       move.l (a0),d0
    801a:	/----- beq.w 80a6 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    801e:	|      movea.l 1c8f2 <speech>,a0
    8024:	|      move.l (a0),d1
    8026:	|      lea -132(sp),sp
    802a:	|      move.l sp,d0
    802c:	|      movea.w #132,a0
    8030:	|      move.l a0,-(sp)
    8032:	|      move.l d1,-(sp)
    8034:	|      move.l d0,-(sp)
    8036:	|      jsr 17164 <memcpy>
    803c:	|      lea 12(sp),sp
    8040:	|      jsr ab96 <makeSilent>
    8046:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    804a:	|      movea.l 1c8f2 <speech>,a0
    8050:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    8052:	+----- bra.s 80a6 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    8054:	|  /-> movea.l 1c8f2 <speech>,a0
    805a:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    8060:	|  |   movea.l 1c8f2 <speech>,a0
    8066:	|  |   movea.l 4(a0),a1
    806a:	|  |   movea.l 1c8f2 <speech>,a0
    8070:	|  |   move.l 4(a1),d0
    8074:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    8078:	|  |   movea.l 12(sp),a0
    807c:	|  |   move.l (a0),8(sp)
    8080:	|  |   move.l 1c896 <SysBase>,d0
    8086:	|  |   movea.l d0,a6
    8088:	|  |   movea.l 8(sp),a1
    808c:	|  |   jsr -690(a6)
		FreeVec(killMe);
    8090:	|  |   move.l 12(sp),4(sp)
    8096:	|  |   move.l 1c896 <SysBase>,d0
    809c:	|  |   movea.l d0,a6
    809e:	|  |   movea.l 4(sp),a1
    80a2:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    80a6:	\--|-> movea.l 1c8f2 <speech>,a0
    80ac:	   |   move.l 4(a0),d0
    80b0:	   \-- bne.s 8054 <killAllSpeech+0x64>
	}
}
    80b2:	       nop
    80b4:	       nop
    80b6:	       movea.l (sp)+,a6
    80b8:	       lea 12(sp),sp
    80bc:	       rts

000080be <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    80be:	pea 2 <_start+0x2>
    80c2:	move.l 8(sp),-(sp)
    80c6:	jsr 821e <setFrames>
    80cc:	addq.l #8,sp
}
    80ce:	nop
    80d0:	rts

000080d2 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    80d2:	       lea -52(sp),sp
    80d6:	       move.l a6,-(sp)
    80d8:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    80da:	       movea.l 64(sp),a0
    80de:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    80e4:	       move.l 1c220 <speechSpeed>,d0
    80ea:	       move.l 68(sp),-(sp)
    80ee:	       move.l d0,-(sp)
    80f0:	       jsr a46 <putFloat>
    80f6:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    80f8:	       movea.l 64(sp),a0
    80fc:	       move.l 8(a0),d0
    8100:	       move.l 68(sp),-(sp)
    8104:	       move.l d0,-(sp)
    8106:	       jsr 8d0 <put2bytes>
    810c:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    810e:	       movea.l 64(sp),a0
    8112:	       move.l 16(a0),d0
    8116:	       move.l 68(sp),-(sp)
    811a:	       move.l d0,-(sp)
    811c:	       jsr 8d0 <put2bytes>
    8122:	       addq.l #8,sp
		if (sS -> currentTalker) {
    8124:	       movea.l 64(sp),a0
    8128:	       move.l (a0),d0
    812a:	   /-- beq.s 816e <saveSpeech+0x9c>
			FPutC (fp, 1);
    812c:	   |   move.l 68(sp),40(sp)
    8132:	   |   moveq #1,d0
    8134:	   |   move.l d0,36(sp)
    8138:	   |   move.l 1c89e <DOSBase>,d0
    813e:	   |   movea.l d0,a6
    8140:	   |   move.l 40(sp),d1
    8144:	   |   move.l 36(sp),d2
    8148:	   |   jsr -312(a6)
    814c:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    8150:	   |   movea.l 64(sp),a0
    8154:	   |   movea.l (a0),a0
    8156:	   |   movea.l 114(a0),a0
    815a:	   |   move.l 4(a0),d0
    815e:	   |   move.l 68(sp),-(sp)
    8162:	   |   move.l d0,-(sp)
    8164:	   |   jsr 8d0 <put2bytes>
    816a:	   |   addq.l #8,sp
    816c:	/--|-- bra.s 81ea <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    816e:	|  \-> move.l 68(sp),52(sp)
    8174:	|      clr.l 48(sp)
    8178:	|      move.l 1c89e <DOSBase>,d0
    817e:	|      movea.l d0,a6
    8180:	|      move.l 52(sp),d1
    8184:	|      move.l 48(sp),d2
    8188:	|      jsr -312(a6)
    818c:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    8190:	+----- bra.s 81ea <saveSpeech+0x118>
			FPutC (fp, 1);
    8192:	|  /-> move.l 68(sp),16(sp)
    8198:	|  |   moveq #1,d0
    819a:	|  |   move.l d0,12(sp)
    819e:	|  |   move.l 1c89e <DOSBase>,d0
    81a4:	|  |   movea.l d0,a6
    81a6:	|  |   move.l 16(sp),d1
    81aa:	|  |   move.l 12(sp),d2
    81ae:	|  |   jsr -312(a6)
    81b2:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    81b6:	|  |   movea.l 56(sp),a0
    81ba:	|  |   move.l (a0),d0
    81bc:	|  |   move.l 68(sp),-(sp)
    81c0:	|  |   move.l d0,-(sp)
    81c2:	|  |   jsr bd8 <writeString>
    81c8:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    81ca:	|  |   movea.l 56(sp),a0
    81ce:	|  |   move.l 8(a0),d0
    81d2:	|  |   move.l 68(sp),-(sp)
    81d6:	|  |   move.l d0,-(sp)
    81d8:	|  |   jsr 8d0 <put2bytes>
    81de:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    81e0:	|  |   movea.l 56(sp),a0
    81e4:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    81ea:	\--|-> tst.l 56(sp)
    81ee:	   \-- bne.s 8192 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    81f0:	       move.l 68(sp),28(sp)
    81f6:	       clr.l 24(sp)
    81fa:	       move.l 1c89e <DOSBase>,d0
    8200:	       movea.l d0,a6
    8202:	       move.l 28(sp),d1
    8206:	       move.l 24(sp),d2
    820a:	       jsr -312(a6)
    820e:	       move.l d0,20(sp)
}
    8212:	       nop
    8214:	       move.l (sp)+,d2
    8216:	       movea.l (sp)+,a6
    8218:	       lea 52(sp),sp
    821c:	       rts

0000821e <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    821e:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    8220:	movea.l 8(sp),a0
    8224:	movea.l 80(a0),a0
    8228:	move.l (a0),d2
    822a:	movea.l 8(sp),a0
    822e:	movea.l 80(a0),a0
    8232:	move.l 4(a0),d0
    8236:	move.l 12(sp),-(sp)
    823a:	move.l d0,-(sp)
    823c:	jsr 17b6e <__mulsi3>
    8242:	addq.l #8,sp
    8244:	move.l d0,d1
    8246:	movea.l 8(sp),a0
    824a:	move.l 106(a0),d0
    824e:	add.l d1,d0
    8250:	add.l d0,d0
    8252:	add.l d0,d0
    8254:	movea.l d2,a0
    8256:	adda.l d0,a0
    8258:	move.l (a0),d0
    825a:	movea.l 8(sp),a0
    825e:	move.l d0,72(a0)
}
    8262:	nop
    8264:	move.l (sp)+,d2
    8266:	rts

00008268 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    8268:	       lea -20(sp),sp
    826c:	       move.l d2,-(sp)
    826e:	       move.l 40(sp),d0
    8272:	       move.w d0,d0
    8274:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    8278:	       movea.l 1c8f2 <speech>,a0
    827e:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    8284:	       move.l 32(sp),-(sp)
    8288:	       jsr a680 <findPerson>
    828e:	       addq.l #4,sp
    8290:	       move.l d0,16(sp)
    if (thisPerson) {
    8294:	   /-- beq.s 82ba <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    8296:	   |   movea.w 6(sp),a0
    829a:	   |   move.l a0,-(sp)
    829c:	   |   move.l 40(sp),-(sp)
    82a0:	   |   move.l 24(sp),-(sp)
    82a4:	   |   move.l 40(sp),-(sp)
    82a8:	   |   jsr 8380 <wrapSpeechPerson>
    82ae:	   |   lea 16(sp),sp
    82b2:	   |   move.l d0,20(sp)
    82b6:	/--|-- bra.w 8374 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    82ba:	|  \-> move.l 32(sp),-(sp)
    82be:	|      jsr 159d2 <getRegionForObject>
    82c4:	|      addq.l #4,sp
    82c6:	|      move.l d0,12(sp)
        if (thisRegion) {
    82ca:	|  /-- beq.s 8336 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    82cc:	|  |   movea.l 12(sp),a0
    82d0:	|  |   movea.l 28(a0),a0
    82d4:	|  |   move.l 28(a0),d0
    82d8:	|  |   movea.l 12(sp),a0
    82dc:	|  |   movea.l 4(a0),a1
    82e0:	|  |   movea.l 12(sp),a0
    82e4:	|  |   movea.l 28(a0),a0
    82e8:	|  |   move.l 20(a0),d1
    82ec:	|  |   movea.l a1,a0
    82ee:	|  |   suba.l d1,a0
    82f0:	|  |   move.l 1c954 <cameraY>,d1
    82f6:	|  |   movea.l a0,a1
    82f8:	|  |   suba.l d1,a1
    82fa:	|  |   movea.l 12(sp),a0
    82fe:	|  |   move.l (a0),d2
    8300:	|  |   movea.l 12(sp),a0
    8304:	|  |   move.l 8(a0),d1
    8308:	|  |   add.l d2,d1
    830a:	|  |   move.l d1,d2
    830c:	|  |   asr.l #1,d2
    830e:	|  |   move.l 1c950 <cameraX>,d1
    8314:	|  |   movea.l d2,a0
    8316:	|  |   suba.l d1,a0
    8318:	|  |   move.l 36(sp),-(sp)
    831c:	|  |   move.l d0,-(sp)
    831e:	|  |   move.l a1,-(sp)
    8320:	|  |   move.l a0,-(sp)
    8322:	|  |   move.l 44(sp),-(sp)
    8326:	|  |   jsr 849e <wrapSpeechXY>
    832c:	|  |   lea 20(sp),sp
    8330:	|  |   move.l d0,20(sp)
    8334:	+--|-- bra.s 8374 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    8336:	|  \-> move.l 32(sp),-(sp)
    833a:	|      jsr d4f2 <findObjectType>
    8340:	|      addq.l #4,sp
    8342:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    8346:	|      movea.l 8(sp),a0
    834a:	|      move.l 28(a0),d1
    834e:	|      move.l 1c7ea <winWidth>,d0
    8354:	|      lsr.l #1,d0
    8356:	|      move.l 36(sp),-(sp)
    835a:	|      move.l d1,-(sp)
    835c:	|      pea a <_start+0xa>
    8360:	|      move.l d0,-(sp)
    8362:	|      move.l 44(sp),-(sp)
    8366:	|      jsr 849e <wrapSpeechXY>
    836c:	|      lea 20(sp),sp
    8370:	|      move.l d0,20(sp)
        }
    }
    return i;
    8374:	\----> move.l 20(sp),d0
}
    8378:	       move.l (sp)+,d2
    837a:	       lea 20(sp),sp
    837e:	       rts

00008380 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    8380:	    subq.l #8,sp
    8382:	    movem.l d2-d4,-(sp)
    8386:	    move.l 36(sp),d0
    838a:	    move.w d0,d0
    838c:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    8390:	    movea.l 28(sp),a0
    8394:	    movea.l 114(a0),a0
    8398:	    move.l 28(a0),d2
    839c:	    movea.l 28(sp),a0
    83a0:	    move.l 4(a0),d3
    83a4:	    move.l 1c954 <cameraY>,d0
    83aa:	    move.l d0,-(sp)
    83ac:	    jsr 175ec <__floatsisf>
    83b2:	    addq.l #4,sp
    83b4:	    move.l d0,-(sp)
    83b6:	    move.l d3,-(sp)
    83b8:	    jsr 178e0 <__subsf3>
    83be:	    addq.l #8,sp
    83c0:	    move.l d0,d3
    83c2:	    movea.l 28(sp),a0
    83c6:	    move.l 32(a0),d4
    83ca:	    movea.l 28(sp),a0
    83ce:	    move.l 20(a0),d1
    83d2:	    movea.l 28(sp),a0
    83d6:	    move.l 24(a0),d0
    83da:	    sub.l d0,d1
    83dc:	    move.l d1,-(sp)
    83de:	    jsr 175ec <__floatsisf>
    83e4:	    addq.l #4,sp
    83e6:	    move.l d0,-(sp)
    83e8:	    move.l d4,-(sp)
    83ea:	    jsr 1769e <__mulsf3>
    83f0:	    addq.l #8,sp
    83f2:	    move.l d0,-(sp)
    83f4:	    move.l d3,-(sp)
    83f6:	    jsr 178e0 <__subsf3>
    83fc:	    addq.l #8,sp
    83fe:	    move.l d0,d3
    8400:	    movea.l 28(sp),a0
    8404:	    movea.l 114(a0),a0
    8408:	    move.l 20(a0),d0
    840c:	    move.l d0,-(sp)
    840e:	    jsr 175ec <__floatsisf>
    8414:	    addq.l #4,sp
    8416:	    move.l d0,-(sp)
    8418:	    move.l d3,-(sp)
    841a:	    jsr 178e0 <__subsf3>
    8420:	    addq.l #8,sp
    8422:	    move.l d0,-(sp)
    8424:	    jsr 17584 <__fixsfsi>
    842a:	    addq.l #4,sp
    842c:	    move.l d0,d4
    842e:	    movea.l 28(sp),a0
    8432:	    move.l (a0),d3
    8434:	    move.l 1c950 <cameraX>,d0
    843a:	    move.l d0,-(sp)
    843c:	    jsr 175ec <__floatsisf>
    8442:	    addq.l #4,sp
    8444:	    move.l d0,-(sp)
    8446:	    move.l d3,-(sp)
    8448:	    jsr 178e0 <__subsf3>
    844e:	    addq.l #8,sp
    8450:	    move.l d0,-(sp)
    8452:	    jsr 17584 <__fixsfsi>
    8458:	    addq.l #4,sp
    845a:	    move.l 32(sp),-(sp)
    845e:	    move.l d2,-(sp)
    8460:	    move.l d4,-(sp)
    8462:	    move.l d0,-(sp)
    8464:	    move.l 40(sp),-(sp)
    8468:	    jsr 849e <wrapSpeechXY>
    846e:	    lea 20(sp),sp
    8472:	    move.l d0,16(sp)
	if (animPerson) {
    8476:	    tst.w 14(sp)
    847a:	/-- beq.s 8492 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    847c:	|   move.l 28(sp),-(sp)
    8480:	|   jsr 80be <makeTalker>
    8486:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    8488:	|   movea.l 1c8f2 <speech>,a0
    848e:	|   move.l 28(sp),(a0)
	}
	return i;
    8492:	\-> move.l 16(sp),d0
}
    8496:	    movem.l (sp)+,d2-d4
    849a:	    addq.l #8,sp
    849c:	    rts

0000849e <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    849e:	                   lea -16(sp),sp
    84a2:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    84a6:	                   clr.l 16(sp)
    killAllSpeech();
    84aa:	                   jsr 7ff0 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    84b0:	                   move.l 36(sp),-(sp)
    84b4:	                   jsr 13c74 <strlen>
    84ba:	                   addq.l #4,sp
    84bc:	                   movea.l d0,a0
    84be:	                   lea 20(a0),a0
    84c2:	                   move.l a0,-(sp)
    84c4:	                   jsr 17614 <__floatunsisf>
    84ca:	                   addq.l #4,sp
    84cc:	                   move.l d0,d1
    84ce:	                   move.l 1c220 <speechSpeed>,d0
    84d4:	                   move.l d0,-(sp)
    84d6:	                   move.l d1,-(sp)
    84d8:	                   jsr 1769e <__mulsf3>
    84de:	                   addq.l #8,sp
    84e0:	                   move.l d0,-(sp)
    84e2:	                   jsr 17584 <__fixsfsi>
    84e8:	                   addq.l #4,sp
    84ea:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    84ee:	               /-- bgt.s 84f6 <wrapSpeechXY+0x58>
    84f0:	               |   moveq #1,d0
    84f2:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    84f6:	               \-> moveq #-1,d1
    84f8:	                   cmp.l 52(sp),d1
    84fc:	               /-- beq.s 853c <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    84fe:	               |   move.l 1c964 <speechMode>,d0
    8504:	               +-- ble.s 853c <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    8506:	               |   clr.l -(sp)
    8508:	               |   move.l 56(sp),-(sp)
    850c:	               |   jsr d1bc <startSound>
    8512:	               |   addq.l #8,sp
    8514:	               |   tst.w d0
    8516:	               +-- beq.s 853c <wrapSpeechXY+0x9e>
                speechTime = -10;
    8518:	               |   moveq #-10,d0
    851a:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    851e:	               |   movea.l 1c8f2 <speech>,a0
    8524:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    852a:	               |   move.l 1c964 <speechMode>,d0
    8530:	               |   moveq #2,d1
    8532:	               |   cmp.l d0,d1
    8534:	               +-- bne.s 853c <wrapSpeechXY+0x9e>
    8536:	               |   moveq #-10,d0
    8538:	/--------------|-- bra.w 87c2 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    853c:	|              \-> movea.l 1c8f2 <speech>,a0
    8542:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    8548:	|     /----------- bra.w 85fc <wrapSpeechXY+0x15e>
        a = wrap;
    854c:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    8552:	|  |  |        /-- bra.s 8562 <wrapSpeechXY+0xc4>
            a--;
    8554:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    8558:	|  |  |  |     +-- bne.s 8562 <wrapSpeechXY+0xc4>
                a = wrap;
    855a:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    8560:	|  |  |  |  /--|-- bra.s 8574 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    8562:	|  |  |  |  |  \-> move.l 28(sp),d0
    8566:	|  |  |  |  |      movea.l 36(sp),a0
    856a:	|  |  |  |  |      adda.l d0,a0
    856c:	|  |  |  |  |      move.b (a0),d0
    856e:	|  |  |  |  |      cmpi.b #32,d0
    8572:	|  |  |  \--|----- bne.s 8554 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    8574:	|  |  |     \----> move.l 28(sp),d0
    8578:	|  |  |            movea.l 36(sp),a0
    857c:	|  |  |            adda.l d0,a0
    857e:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    8580:	|  |  |            lea 16(sp),a0
    8584:	|  |  |            move.l a0,-(sp)
    8586:	|  |  |            move.l 44(sp),-(sp)
    858a:	|  |  |            move.l 44(sp),-(sp)
    858e:	|  |  |            jsr 7d3a <addSpeechLine>
    8594:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    8598:	|  |  |            move.l 28(sp),d0
    859c:	|  |  |            movea.l 36(sp),a0
    85a0:	|  |  |            adda.l d0,a0
    85a2:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    85a6:	|  |  |            move.l 28(sp),d0
    85aa:	|  |  |            addq.l #1,d0
    85ac:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    85b0:	|  |  |            move.l 44(sp),-(sp)
    85b4:	|  |  |            jsr 175ec <__floatsisf>
    85ba:	|  |  |            addq.l #4,sp
    85bc:	|  |  |            move.l d0,d2
    85be:	|  |  |            move.l 1c98e <fontHeight>,d0
    85c4:	|  |  |            move.l d0,-(sp)
    85c6:	|  |  |            jsr 175ec <__floatsisf>
    85cc:	|  |  |            addq.l #4,sp
    85ce:	|  |  |            move.l d0,d1
    85d0:	|  |  |            move.l 1c234 <cameraZoom>,d0
    85d6:	|  |  |            move.l d0,-(sp)
    85d8:	|  |  |            move.l d1,-(sp)
    85da:	|  |  |            jsr 17498 <__divsf3>
    85e0:	|  |  |            addq.l #8,sp
    85e2:	|  |  |            move.l d0,-(sp)
    85e4:	|  |  |            move.l d2,-(sp)
    85e6:	|  |  |            jsr 178e0 <__subsf3>
    85ec:	|  |  |            addq.l #8,sp
    85ee:	|  |  |            move.l d0,-(sp)
    85f0:	|  |  |            jsr 17584 <__fixsfsi>
    85f6:	|  |  |            addq.l #4,sp
    85f8:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    85fc:	|  |  \----------> move.l 36(sp),-(sp)
    8600:	|  |               jsr 13c74 <strlen>
    8606:	|  |               addq.l #4,sp
    8608:	|  |               move.l d0,d1
    860a:	|  |               move.l 48(sp),d0
    860e:	|  |               cmp.l d1,d0
    8610:	|  \-------------- bcs.w 854c <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    8614:	|                  lea 16(sp),a0
    8618:	|                  move.l a0,-(sp)
    861a:	|                  move.l 44(sp),-(sp)
    861e:	|                  move.l 44(sp),-(sp)
    8622:	|                  jsr 7d3a <addSpeechLine>
    8628:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    862c:	|                  move.l 44(sp),-(sp)
    8630:	|                  jsr 175ec <__floatsisf>
    8636:	|                  addq.l #4,sp
    8638:	|                  move.l d0,d2
    863a:	|                  move.l 1c98e <fontHeight>,d0
    8640:	|                  move.l d0,-(sp)
    8642:	|                  jsr 175ec <__floatsisf>
    8648:	|                  addq.l #4,sp
    864a:	|                  move.l d0,d1
    864c:	|                  move.l 1c234 <cameraZoom>,d0
    8652:	|                  move.l d0,-(sp)
    8654:	|                  move.l d1,-(sp)
    8656:	|                  jsr 17498 <__divsf3>
    865c:	|                  addq.l #8,sp
    865e:	|                  move.l d0,-(sp)
    8660:	|                  move.l d2,-(sp)
    8662:	|                  jsr 178e0 <__subsf3>
    8668:	|                  addq.l #8,sp
    866a:	|                  move.l d0,-(sp)
    866c:	|                  jsr 17584 <__fixsfsi>
    8672:	|                  addq.l #4,sp
    8674:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    8678:	|              /-- bpl.s 8696 <wrapSpeechXY+0x1f8>
    867a:	|              |   movea.l 1c8f2 <speech>,a0
    8680:	|              |   move.l 8(a0),d0
    8684:	|              |   movea.l 1c8f2 <speech>,a0
    868a:	|              |   sub.l 44(sp),d0
    868e:	|              |   move.l d0,8(a0)
    8692:	|           /--|-- bra.w 8784 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    8696:	|           |  \-> movea.l 1c8f2 <speech>,a0
    869c:	|           |      move.l 8(a0),d0
    86a0:	|           |      move.l d0,-(sp)
    86a2:	|           |      jsr 175ec <__floatsisf>
    86a8:	|           |      addq.l #4,sp
    86aa:	|           |      move.l d0,d2
    86ac:	|           |      move.l 1c954 <cameraY>,d0
    86b2:	|           |      move.l d0,-(sp)
    86b4:	|           |      jsr 175ec <__floatsisf>
    86ba:	|           |      addq.l #4,sp
    86bc:	|           |      move.l d0,d3
    86be:	|           |      move.l 1c7ee <winHeight>,d4
    86c4:	|           |      move.l 1c98e <fontHeight>,d0
    86ca:	|           |      pea 3 <_start+0x3>
    86ce:	|           |      move.l d0,-(sp)
    86d0:	|           |      jsr 17bec <__divsi3>
    86d6:	|           |      addq.l #8,sp
    86d8:	|           |      move.l d4,d1
    86da:	|           |      sub.l d0,d1
    86dc:	|           |      move.l d1,-(sp)
    86de:	|           |      jsr 17614 <__floatunsisf>
    86e4:	|           |      addq.l #4,sp
    86e6:	|           |      move.l d0,d1
    86e8:	|           |      move.l 1c234 <cameraZoom>,d0
    86ee:	|           |      move.l d0,-(sp)
    86f0:	|           |      move.l d1,-(sp)
    86f2:	|           |      jsr 17498 <__divsf3>
    86f8:	|           |      addq.l #8,sp
    86fa:	|           |      move.l d0,-(sp)
    86fc:	|           |      move.l d3,-(sp)
    86fe:	|           |      jsr 1739e <__addsf3>
    8704:	|           |      addq.l #8,sp
    8706:	|           |      move.l d0,-(sp)
    8708:	|           |      move.l d2,-(sp)
    870a:	|           |      jsr 17758 <__gtsf2>
    8710:	|           |      addq.l #8,sp
    8712:	|           |      tst.l d0
    8714:	|           +----- ble.s 8784 <wrapSpeechXY+0x2e6>
    8716:	|           |      move.l 1c954 <cameraY>,d0
    871c:	|           |      move.l d0,-(sp)
    871e:	|           |      jsr 175ec <__floatsisf>
    8724:	|           |      addq.l #4,sp
    8726:	|           |      move.l d0,d2
    8728:	|           |      move.l 1c7ee <winHeight>,d3
    872e:	|           |      move.l 1c98e <fontHeight>,d0
    8734:	|           |      pea 3 <_start+0x3>
    8738:	|           |      move.l d0,-(sp)
    873a:	|           |      jsr 17bec <__divsi3>
    8740:	|           |      addq.l #8,sp
    8742:	|           |      move.l d3,d1
    8744:	|           |      sub.l d0,d1
    8746:	|           |      move.l d1,-(sp)
    8748:	|           |      jsr 17614 <__floatunsisf>
    874e:	|           |      addq.l #4,sp
    8750:	|           |      move.l d0,d1
    8752:	|           |      move.l 1c234 <cameraZoom>,d0
    8758:	|           |      move.l d0,-(sp)
    875a:	|           |      move.l d1,-(sp)
    875c:	|           |      jsr 17498 <__divsf3>
    8762:	|           |      addq.l #8,sp
    8764:	|           |      move.l d0,-(sp)
    8766:	|           |      move.l d2,-(sp)
    8768:	|           |      jsr 1739e <__addsf3>
    876e:	|           |      addq.l #8,sp
    8770:	|           |      movea.l 1c8f2 <speech>,a2
    8776:	|           |      move.l d0,-(sp)
    8778:	|           |      jsr 17584 <__fixsfsi>
    877e:	|           |      addq.l #4,sp
    8780:	|           |      move.l d0,8(a2)

    if (offset) {
    8784:	|           \----> move.l 16(sp),d0
    8788:	|        /-------- beq.s 87be <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    878a:	|        |         movea.l 1c8f2 <speech>,a0
    8790:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    8796:	|        |     /-- bra.s 87b8 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    8798:	|        |  /--|-> movea.l 20(sp),a0
    879c:	|        |  |  |   move.l 8(a0),d1
    87a0:	|        |  |  |   move.l 16(sp),d0
    87a4:	|        |  |  |   add.l d1,d0
    87a6:	|        |  |  |   movea.l 20(sp),a0
    87aa:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    87ae:	|        |  |  |   movea.l 20(sp),a0
    87b2:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    87b8:	|        |  |  \-> tst.l 20(sp)
    87bc:	|        |  \----- bne.s 8798 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    87be:	|        \-------> move.l 24(sp),d0
}
    87c2:	\----------------> movem.l (sp)+,d2-d4/a2
    87c6:	                   lea 16(sp),sp
    87ca:	                   rts

000087cc <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData *zBuffer;

void killZBuffer () {
    87cc:	       lea -12(sp),sp
    87d0:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    87d2:	       move.l 1c8f6 <zBuffer>,12(sp)

	while(zbuffercursor) {
    87da:	   /-- bra.s 8802 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    87dc:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    87e2:	|  |   movea.l 12(sp),a0
    87e6:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    87ec:	|  |   move.l 8(sp),4(sp)
    87f2:	|  |   move.l 1c896 <SysBase>,d0
    87f8:	|  |   movea.l d0,a6
    87fa:	|  |   movea.l 4(sp),a1
    87fe:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8802:	|  \-> tst.l 12(sp)
    8806:	\----- bne.s 87dc <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8808:	       clr.l 1c8f6 <zBuffer>
}
    880e:	       nop
    8810:	       movea.l (sp)+,a6
    8812:	       lea 12(sp),sp
    8816:	       rts

00008818 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8818:	             lea -304(sp),sp
    881c:	             movem.l d2-d4/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8820:	             clr.l 310(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8824:	             jsr 87cc <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    882a:	             move.l 324(sp),d0
    882e:	             move.l d0,-(sp)
    8830:	             jsr 6e2a <openFileFromNum>
    8836:	             addq.l #4,sp
    8838:	             tst.l d0
    883a:	         /-- bne.s 8842 <setZBuffer+0x2a>
    883c:	         |   clr.w d0
    883e:	/--------|-- bra.w 8ac6 <setZBuffer+0x2ae>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8842:	|        \-> move.l 1c87e <bigDataFile>,306(sp)
    884a:	|            move.l 1c89e <DOSBase>,d0
    8850:	|            movea.l d0,a6
    8852:	|            move.l 306(sp),d1
    8856:	|            jsr -306(a6)
    885a:	|            move.l d0,302(sp)
    885e:	|            move.l 302(sp),d0
    8862:	|            moveq #97,d1
    8864:	|            cmp.l d0,d1
    8866:	|     /----- bne.s 88da <setZBuffer+0xc2>
    8868:	|     |      move.l 1c87e <bigDataFile>,298(sp)
    8870:	|     |      move.l 1c89e <DOSBase>,d0
    8876:	|     |      movea.l d0,a6
    8878:	|     |      move.l 298(sp),d1
    887c:	|     |      jsr -306(a6)
    8880:	|     |      move.l d0,294(sp)
    8884:	|     |      move.l 294(sp),d0
    8888:	|     |      moveq #115,d1
    888a:	|     |      cmp.l d0,d1
    888c:	|     +----- bne.s 88da <setZBuffer+0xc2>
    888e:	|     |      move.l 1c87e <bigDataFile>,290(sp)
    8896:	|     |      move.l 1c89e <DOSBase>,d0
    889c:	|     |      movea.l d0,a6
    889e:	|     |      move.l 290(sp),d1
    88a2:	|     |      jsr -306(a6)
    88a6:	|     |      move.l d0,286(sp)
    88aa:	|     |      move.l 286(sp),d0
    88ae:	|     |      moveq #122,d1
    88b0:	|     |      cmp.l d0,d1
    88b2:	|     +----- bne.s 88da <setZBuffer+0xc2>
    88b4:	|     |      move.l 1c87e <bigDataFile>,282(sp)
    88bc:	|     |      move.l 1c89e <DOSBase>,d0
    88c2:	|     |      movea.l d0,a6
    88c4:	|     |      move.l 282(sp),d1
    88c8:	|     |      jsr -306(a6)
    88cc:	|     |      move.l d0,278(sp)
    88d0:	|     |      move.l 278(sp),d0
    88d4:	|     |      moveq #98,d1
    88d6:	|     |      cmp.l d0,d1
    88d8:	|     |  /-- beq.s 88ee <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    88da:	|     \--|-> pea 18f24 <PutChar+0x12a0>
    88e0:	|        |   jsr 171b0 <KPrintF>
    88e6:	|        |   addq.l #4,sp
		 return FALSE;
    88e8:	|        |   clr.w d0
    88ea:	+--------|-- bra.w 8ac6 <setZBuffer+0x2ae>
	}

	UWORD numelements = FGetC(bigDataFile);
    88ee:	|        \-> move.l 1c87e <bigDataFile>,274(sp)
    88f6:	|            move.l 1c89e <DOSBase>,d0
    88fc:	|            movea.l d0,a6
    88fe:	|            move.l 274(sp),d1
    8902:	|            jsr -306(a6)
    8906:	|            move.l d0,270(sp)
    890a:	|            move.l 270(sp),d0
    890e:	|            move.w d0,318(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8912:	|            moveq #28,d0
    8914:	|            move.l d0,266(sp)
    8918:	|            clr.l 262(sp)
    891c:	|            move.l 1c896 <SysBase>,d0
    8922:	|            movea.l d0,a6
    8924:	|            move.l 266(sp),d0
    8928:	|            move.l 262(sp),d1
    892c:	|            jsr -684(a6)
    8930:	|            move.l d0,258(sp)
    8934:	|            move.l 258(sp),d0
    8938:	|            move.l d0,1c8f6 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    893e:	|            move.l 1c8f6 <zBuffer>,314(sp)

	while(numelements--)
    8946:	|     /----- bra.w 8aac <setZBuffer+0x294>
	{		
		currentitem->width = get2bytes (bigDataFile);
    894a:	|  /--|----> move.l 1c87e <bigDataFile>,d0
    8950:	|  |  |      move.l d0,-(sp)
    8952:	|  |  |      jsr 6bc <get2bytes>
    8958:	|  |  |      addq.l #4,sp
    895a:	|  |  |      movea.l 314(sp),a0
    895e:	|  |  |      move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    8960:	|  |  |      move.l 1c87e <bigDataFile>,d0
    8966:	|  |  |      move.l d0,-(sp)
    8968:	|  |  |      jsr 6bc <get2bytes>
    896e:	|  |  |      addq.l #4,sp
    8970:	|  |  |      movea.l 314(sp),a0
    8974:	|  |  |      move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8978:	|  |  |      move.l 1c87e <bigDataFile>,d0
    897e:	|  |  |      move.l d0,-(sp)
    8980:	|  |  |      jsr 6bc <get2bytes>
    8986:	|  |  |      addq.l #4,sp
    8988:	|  |  |      movea.l 314(sp),a0
    898c:	|  |  |      move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8990:	|  |  |      move.l 1c87e <bigDataFile>,d0
    8996:	|  |  |      move.l d0,-(sp)
    8998:	|  |  |      jsr 6bc <get2bytes>
    899e:	|  |  |      addq.l #4,sp
    89a0:	|  |  |      movea.l 314(sp),a0
    89a4:	|  |  |      move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    89a8:	|  |  |      move.l 1c87e <bigDataFile>,d0
    89ae:	|  |  |      move.l d0,-(sp)
    89b0:	|  |  |      jsr 6bc <get2bytes>
    89b6:	|  |  |      addq.l #4,sp
    89b8:	|  |  |      movea.l 314(sp),a0
    89bc:	|  |  |      move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    89c0:	|  |  |      movea.l 314(sp),a0
    89c4:	|  |  |      move.l (a0),d0
    89c6:	|  |  |      movea.l 314(sp),a0
    89ca:	|  |  |      move.l 4(a0),d1
    89ce:	|  |  |      move.l d1,-(sp)
    89d0:	|  |  |      move.l d0,-(sp)
    89d2:	|  |  |      jsr 17b6e <__mulsi3>
    89d8:	|  |  |      addq.l #8,sp
    89da:	|  |  |      tst.l d0
    89dc:	|  |  |  /-- bge.s 89e0 <setZBuffer+0x1c8>
    89de:	|  |  |  |   addq.l #7,d0
    89e0:	|  |  |  \-> asr.l #3,d0
    89e2:	|  |  |      move.w d0,256(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    89e6:	|  |  |      moveq #0,d0
    89e8:	|  |  |      move.w 256(sp),d0
    89ec:	|  |  |      move.l d0,252(sp)
    89f0:	|  |  |      moveq #2,d1
    89f2:	|  |  |      move.l d1,248(sp)
    89f6:	|  |  |      move.l 1c896 <SysBase>,d0
    89fc:	|  |  |      movea.l d0,a6
    89fe:	|  |  |      move.l 252(sp),d0
    8a02:	|  |  |      move.l 248(sp),d1
    8a06:	|  |  |      jsr -684(a6)
    8a0a:	|  |  |      move.l d0,244(sp)
    8a0e:	|  |  |      move.l 244(sp),d0
    8a12:	|  |  |      movea.l 314(sp),a0
    8a16:	|  |  |      move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8a1a:	|  |  |      move.l 1c87e <bigDataFile>,240(sp)
    8a22:	|  |  |      movea.l 314(sp),a0
    8a26:	|  |  |      move.l 20(a0),236(sp)
    8a2c:	|  |  |      moveq #1,d0
    8a2e:	|  |  |      move.l d0,232(sp)
    8a32:	|  |  |      moveq #0,d0
    8a34:	|  |  |      move.w 256(sp),d0
    8a38:	|  |  |      move.l d0,228(sp)
    8a3c:	|  |  |      move.l 1c89e <DOSBase>,d0
    8a42:	|  |  |      movea.l d0,a6
    8a44:	|  |  |      move.l 240(sp),d1
    8a48:	|  |  |      move.l 236(sp),d2
    8a4c:	|  |  |      move.l 232(sp),d3
    8a50:	|  |  |      move.l 228(sp),d4
    8a54:	|  |  |      jsr -324(a6)
    8a58:	|  |  |      move.l d0,224(sp)
    8a5c:	|  |  |      move.l 224(sp),d0
    8a60:	|  |  |      move.w d0,222(sp)

		if(numelements > 0) {
    8a64:	|  |  |      tst.w 318(sp)
    8a68:	|  |  |  /-- beq.s 8aa4 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8a6a:	|  |  |  |   moveq #28,d1
    8a6c:	|  |  |  |   move.l d1,218(sp)
    8a70:	|  |  |  |   clr.l 214(sp)
    8a74:	|  |  |  |   move.l 1c896 <SysBase>,d0
    8a7a:	|  |  |  |   movea.l d0,a6
    8a7c:	|  |  |  |   move.l 218(sp),d0
    8a80:	|  |  |  |   move.l 214(sp),d1
    8a84:	|  |  |  |   jsr -684(a6)
    8a88:	|  |  |  |   move.l d0,210(sp)
    8a8c:	|  |  |  |   move.l 210(sp),d0
    8a90:	|  |  |  |   movea.l 314(sp),a0
    8a94:	|  |  |  |   move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8a98:	|  |  |  |   movea.l 314(sp),a0
    8a9c:	|  |  |  |   move.l 24(a0),314(sp)
    8aa2:	|  |  +--|-- bra.s 8aac <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8aa4:	|  |  |  \-> movea.l 314(sp),a0
    8aa8:	|  |  |      clr.l 24(a0)
	while(numelements--)
    8aac:	|  |  \----> move.w 318(sp),d0
    8ab0:	|  |         move.w d0,d1
    8ab2:	|  |         subq.w #1,d1
    8ab4:	|  |         move.w d1,318(sp)
    8ab8:	|  |         tst.w d0
    8aba:	|  \-------- bne.w 894a <setZBuffer+0x132>
		}

	}
	
	finishAccess ();
    8abe:	|            jsr 6d22 <finishAccess>
	
	return TRUE;
    8ac4:	|            moveq #1,d0
}
    8ac6:	\----------> movem.l (sp)+,d2-d4/a6
    8aca:	             lea 304(sp),sp
    8ace:	             rts

00008ad0 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8ad0:	          lea -36(sp),sp
    8ad4:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8ad6:	          move.l 44(sp),d0
    8ada:	          addq.l #8,d0
    8adc:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8ae0:	          clr.l 36(sp)
    8ae4:	   /----- bra.s 8b2a <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8ae6:	/--|----> movea.l 28(sp),a0
    8aea:	|  |      movea.l 8(a0),a0
    8aee:	|  |      move.l 36(sp),d1
    8af2:	|  |      move.l d1,d0
    8af4:	|  |      lsl.l #3,d0
    8af6:	|  |      sub.l d1,d0
    8af8:	|  |      add.l d0,d0
    8afa:	|  |      add.l d0,d0
    8afc:	|  |      adda.l d0,a0
    8afe:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8b02:	|  |      movea.l 8(sp),a0
    8b06:	|  |      move.l 24(a0),d0
    8b0a:	|  |  /-- beq.s 8b26 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8b0c:	|  |  |   movea.l 8(sp),a0
    8b10:	|  |  |   move.l 24(a0),4(sp)
    8b16:	|  |  |   move.l 1c896 <SysBase>,d0
    8b1c:	|  |  |   movea.l d0,a6
    8b1e:	|  |  |   movea.l 4(sp),a1
    8b22:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8b26:	|  |  \-> addq.l #1,36(sp)
    8b2a:	|  \----> movea.l 28(sp),a0
    8b2e:	|         move.l (a0),d0
    8b30:	|         cmp.l 36(sp),d0
    8b34:	\-------- bgt.s 8ae6 <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    8b36:	          movea.l 28(sp),a0
    8b3a:	          move.l 8(a0),24(sp)
    8b40:	          move.l 1c896 <SysBase>,d0
    8b46:	          movea.l d0,a6
    8b48:	          movea.l 24(sp),a1
    8b4c:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    8b50:	          move.l 28(sp),20(sp)
    8b56:	          move.l 1c896 <SysBase>,d0
    8b5c:	          movea.l d0,a6
    8b5e:	          movea.l 20(sp),a1
    8b62:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8b66:	          move.l 1c9ae <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b6e:	      /-- bra.s 8b7a <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    8b70:	   /--|-> movea.l 32(sp),a0
    8b74:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b7a:	   |  \-> movea.l 32(sp),a0
    8b7e:	   |      movea.l 22(a0),a0
    8b82:	   |      move.l (a0),d1
    8b84:	   |      movea.l 44(sp),a0
    8b88:	   |      move.l (a0),d0
    8b8a:	   |      cmp.l d1,d0
    8b8c:	   |  /-- beq.s 8b94 <forgetSpriteBank+0xc4>
    8b8e:	   |  |   tst.l 32(sp)
    8b92:	   \--|-- bne.s 8b70 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    8b94:	      \-> tst.l 32(sp)
    8b98:	   /----- beq.s 8bc2 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8b9a:	   |      movea.l 44(sp),a0
    8b9e:	   |      move.l 22(a0),d0
    8ba2:	   |      movea.l 32(sp),a0
    8ba6:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8baa:	   |      move.l 44(sp),12(sp)
    8bb0:	   |      move.l 1c896 <SysBase>,d0
    8bb6:	   |      movea.l d0,a6
    8bb8:	   |      movea.l 12(sp),a1
    8bbc:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8bc0:	   |  /-- bra.s 8be8 <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    8bc2:	   \--|-> movea.l 1c9ae <allLoadedBanks>,a0
    8bc8:	      |   move.l 22(a0),d0
    8bcc:	      |   move.l d0,1c9ae <allLoadedBanks>
		FreeVec( forgetme);
    8bd2:	      |   move.l 44(sp),16(sp)
    8bd8:	      |   move.l 1c896 <SysBase>,d0
    8bde:	      |   movea.l d0,a6
    8be0:	      |   movea.l 16(sp),a1
    8be4:	      |   jsr -690(a6)
}
    8be8:	      \-> nop
    8bea:	          movea.l (sp)+,a6
    8bec:	          lea 36(sp),sp
    8bf0:	          rts

00008bf2 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    8bf2:	                      lea -84(sp),sp
    8bf6:	                      movem.l d2-d4/a2/a6,-(sp)
    8bfa:	                      move.l 116(sp),d0
    8bfe:	                      move.w d0,d0
    8c00:	                      move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8c04:	                      clr.l 94(sp)
    8c08:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8c0c:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8c10:	                      move.l 108(sp),-(sp)
    8c14:	                      jsr 6e2a <openFileFromNum>
    8c1a:	                      addq.l #4,sp
    8c1c:	                      tst.l d0
    8c1e:	                  /-- bne.s 8c34 <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8c20:	                  |   pea 18f38 <PutChar+0x12b4>
    8c26:	                  |   jsr 171b0 <KPrintF>
    8c2c:	                  |   addq.l #4,sp
		return FALSE;
    8c2e:	                  |   clr.w d0
    8c30:	/-----------------|-- bra.w 8ffc <loadSpriteBank+0x40a>
	}

	loadhere->isFont = isFont;
    8c34:	|                 \-> movea.l 112(sp),a0
    8c38:	|                     move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8c3e:	|                     move.l 1c87e <bigDataFile>,d0
    8c44:	|                     move.l d0,-(sp)
    8c46:	|                     jsr 6bc <get2bytes>
    8c4c:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8c4e:	|                     move.l 1c87e <bigDataFile>,82(sp)
    8c56:	|                     move.l 1c89e <DOSBase>,d0
    8c5c:	|                     movea.l d0,a6
    8c5e:	|                     move.l 82(sp),d1
    8c62:	|                     jsr -306(a6)
    8c66:	|                     move.l d0,78(sp)
    8c6a:	|                     move.l 78(sp),d0
    8c6e:	|                     movea.l 112(sp),a0
    8c72:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8c76:	|                     move.l 1c87e <bigDataFile>,d0
    8c7c:	|                     move.l d0,-(sp)
    8c7e:	|                     jsr 6bc <get2bytes>
    8c84:	|                     addq.l #4,sp
    8c86:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8c8a:	|                 /-- bgt.s 8ca0 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8c8c:	|                 |   pea 18f66 <PutChar+0x12e2>
    8c92:	|                 |   jsr 171b0 <KPrintF>
    8c98:	|                 |   addq.l #4,sp
		return FALSE;
    8c9a:	|                 |   clr.w d0
    8c9c:	+-----------------|-- bra.w 8ffc <loadSpriteBank+0x40a>
	}
	if (loadhere->type > 3) {
    8ca0:	|                 \-> movea.l 112(sp),a0
    8ca4:	|                     move.l 4(a0),d0
    8ca8:	|                     moveq #3,d1
    8caa:	|                     cmp.l d0,d1
    8cac:	|                 /-- bge.s 8cc2 <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8cae:	|                 |   pea 18fa6 <PutChar+0x1322>
    8cb4:	|                 |   jsr 171b0 <KPrintF>
    8cba:	|                 |   addq.l #4,sp
		return FALSE;
    8cbc:	|                 |   clr.w d0
    8cbe:	+-----------------|-- bra.w 8ffc <loadSpriteBank+0x40a>
	}

	loadhere->total = total;
    8cc2:	|                 \-> movea.l 112(sp),a0
    8cc6:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8cca:	|                     move.l 74(sp),d1
    8cce:	|                     move.l d1,d0
    8cd0:	|                     lsl.l #3,d0
    8cd2:	|                     sub.l d1,d0
    8cd4:	|                     add.l d0,d0
    8cd6:	|                     add.l d0,d0
    8cd8:	|                     move.l d0,70(sp)
    8cdc:	|                     clr.l 66(sp)
    8ce0:	|                     move.l 1c896 <SysBase>,d0
    8ce6:	|                     movea.l d0,a6
    8ce8:	|                     move.l 70(sp),d0
    8cec:	|                     move.l 66(sp),d1
    8cf0:	|                     jsr -684(a6)
    8cf4:	|                     move.l d0,62(sp)
    8cf8:	|                     move.l 62(sp),d0
    8cfc:	|                     movea.l 112(sp),a0
    8d00:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8d04:	|                     movea.l 112(sp),a0
    8d08:	|                     move.l 8(a0),d0
    8d0c:	|                 /-- bne.s 8d14 <loadSpriteBank+0x122>
    8d0e:	|                 |   clr.w d0
    8d10:	+-----------------|-- bra.w 8ffc <loadSpriteBank+0x40a>
	
	startIndex = 1;
    8d14:	|                 \-> moveq #1,d0
    8d16:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8d1a:	|                     clr.l 100(sp)
    8d1e:	|     /-------------- bra.w 8fe8 <loadSpriteBank+0x3f6>
		UWORD width = get2bytes(bigDataFile);
    8d22:	|  /--|-------------> move.l 1c87e <bigDataFile>,d0
    8d28:	|  |  |               move.l d0,-(sp)
    8d2a:	|  |  |               jsr 6bc <get2bytes>
    8d30:	|  |  |               addq.l #4,sp
    8d32:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8d36:	|  |  |               movea.l 112(sp),a0
    8d3a:	|  |  |               movea.l 8(a0),a0
    8d3e:	|  |  |               move.l 100(sp),d1
    8d42:	|  |  |               move.l d1,d0
    8d44:	|  |  |               lsl.l #3,d0
    8d46:	|  |  |               sub.l d1,d0
    8d48:	|  |  |               add.l d0,d0
    8d4a:	|  |  |               add.l d0,d0
    8d4c:	|  |  |               adda.l d0,a0
    8d4e:	|  |  |               moveq #0,d0
    8d50:	|  |  |               move.w 60(sp),d0
    8d54:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8d56:	|  |  |               movea.l 1c87e <bigDataFile>,a1
    8d5c:	|  |  |               movea.l 112(sp),a0
    8d60:	|  |  |               movea.l 8(a0),a0
    8d64:	|  |  |               move.l 100(sp),d1
    8d68:	|  |  |               move.l d1,d0
    8d6a:	|  |  |               lsl.l #3,d0
    8d6c:	|  |  |               sub.l d1,d0
    8d6e:	|  |  |               add.l d0,d0
    8d70:	|  |  |               add.l d0,d0
    8d72:	|  |  |               lea (0,a0,d0.l),a2
    8d76:	|  |  |               move.l a1,-(sp)
    8d78:	|  |  |               jsr 6bc <get2bytes>
    8d7e:	|  |  |               addq.l #4,sp
    8d80:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8d84:	|  |  |               movea.l 1c87e <bigDataFile>,a1
    8d8a:	|  |  |               movea.l 112(sp),a0
    8d8e:	|  |  |               movea.l 8(a0),a0
    8d92:	|  |  |               move.l 100(sp),d1
    8d96:	|  |  |               move.l d1,d0
    8d98:	|  |  |               lsl.l #3,d0
    8d9a:	|  |  |               sub.l d1,d0
    8d9c:	|  |  |               add.l d0,d0
    8d9e:	|  |  |               add.l d0,d0
    8da0:	|  |  |               lea (0,a0,d0.l),a2
    8da4:	|  |  |               move.l a1,-(sp)
    8da6:	|  |  |               jsr 6bc <get2bytes>
    8dac:	|  |  |               addq.l #4,sp
    8dae:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8db2:	|  |  |               movea.l 1c87e <bigDataFile>,a1
    8db8:	|  |  |               movea.l 112(sp),a0
    8dbc:	|  |  |               movea.l 8(a0),a0
    8dc0:	|  |  |               move.l 100(sp),d1
    8dc4:	|  |  |               move.l d1,d0
    8dc6:	|  |  |               lsl.l #3,d0
    8dc8:	|  |  |               sub.l d1,d0
    8dca:	|  |  |               add.l d0,d0
    8dcc:	|  |  |               add.l d0,d0
    8dce:	|  |  |               lea (0,a0,d0.l),a2
    8dd2:	|  |  |               move.l a1,-(sp)
    8dd4:	|  |  |               jsr 6bc <get2bytes>
    8dda:	|  |  |               addq.l #4,sp
    8ddc:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8de0:	|  |  |               movea.l 112(sp),a0
    8de4:	|  |  |               move.l 4(a0),d0
    8de8:	|  |  |               moveq #3,d1
    8dea:	|  |  |               cmp.l d0,d1
    8dec:	|  |  |     /-------- beq.w 8e88 <loadSpriteBank+0x296>
    8df0:	|  |  |     |         moveq #3,d1
    8df2:	|  |  |     |         cmp.l d0,d1
    8df4:	|  |  |  /--|-------- blt.w 8f20 <loadSpriteBank+0x32e>
    8df8:	|  |  |  |  |         moveq #1,d1
    8dfa:	|  |  |  |  |         cmp.l d0,d1
    8dfc:	|  |  |  |  |     /-- beq.s 8e08 <loadSpriteBank+0x216>
    8dfe:	|  |  |  |  |     |   moveq #2,d1
    8e00:	|  |  |  |  |     |   cmp.l d0,d1
    8e02:	|  |  |  |  |  /--|-- beq.s 8e34 <loadSpriteBank+0x242>
    8e04:	|  |  |  +--|--|--|-- bra.w 8f20 <loadSpriteBank+0x32e>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8e08:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8e0c:	|  |  |  |  |  |      movea.l 8(a0),a0
    8e10:	|  |  |  |  |  |      move.l 100(sp),d1
    8e14:	|  |  |  |  |  |      move.l d1,d0
    8e16:	|  |  |  |  |  |      lsl.l #3,d0
    8e18:	|  |  |  |  |  |      sub.l d1,d0
    8e1a:	|  |  |  |  |  |      add.l d0,d0
    8e1c:	|  |  |  |  |  |      add.l d0,d0
    8e1e:	|  |  |  |  |  |      adda.l d0,a0
    8e20:	|  |  |  |  |  |      move.l 4(a0),d0
    8e24:	|  |  |  |  |  |      addq.l #2,d0
    8e26:	|  |  |  |  |  |      move.l d0,d0
    8e28:	|  |  |  |  |  |      add.w d0,d0
    8e2a:	|  |  |  |  |  |      add.w d0,d0
    8e2c:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8e30:	|  |  |  +--|--|----- bra.w 8f20 <loadSpriteBank+0x32e>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8e34:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8e38:	|  |  |  |  |         movea.l 8(a0),a0
    8e3c:	|  |  |  |  |         move.l 100(sp),d1
    8e40:	|  |  |  |  |         move.l d1,d0
    8e42:	|  |  |  |  |         lsl.l #3,d0
    8e44:	|  |  |  |  |         sub.l d1,d0
    8e46:	|  |  |  |  |         add.l d0,d0
    8e48:	|  |  |  |  |         add.l d0,d0
    8e4a:	|  |  |  |  |         adda.l d0,a0
    8e4c:	|  |  |  |  |         move.l (a0),d0
    8e4e:	|  |  |  |  |     /-- bpl.s 8e52 <loadSpriteBank+0x260>
    8e50:	|  |  |  |  |     |   addq.l #7,d0
    8e52:	|  |  |  |  |     \-> asr.l #3,d0
    8e54:	|  |  |  |  |         move.l d0,d2
    8e56:	|  |  |  |  |         movea.l 112(sp),a0
    8e5a:	|  |  |  |  |         movea.l 8(a0),a0
    8e5e:	|  |  |  |  |         move.l 100(sp),d1
    8e62:	|  |  |  |  |         move.l d1,d0
    8e64:	|  |  |  |  |         lsl.l #3,d0
    8e66:	|  |  |  |  |         sub.l d1,d0
    8e68:	|  |  |  |  |         add.l d0,d0
    8e6a:	|  |  |  |  |         add.l d0,d0
    8e6c:	|  |  |  |  |         adda.l d0,a0
    8e6e:	|  |  |  |  |         move.l 4(a0),d0
    8e72:	|  |  |  |  |         move.l d0,d0
    8e74:	|  |  |  |  |         move.w d2,d1
    8e76:	|  |  |  |  |         muls.w d0,d1
    8e78:	|  |  |  |  |         move.w d1,d0
    8e7a:	|  |  |  |  |         add.w d0,d0
    8e7c:	|  |  |  |  |         add.w d1,d0
    8e7e:	|  |  |  |  |         add.w d0,d0
    8e80:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8e84:	|  |  |  +--|-------- bra.w 8f20 <loadSpriteBank+0x32e>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8e88:	|  |  |  |  \-------> movea.l 112(sp),a0
    8e8c:	|  |  |  |            movea.l 8(a0),a0
    8e90:	|  |  |  |            move.l 100(sp),d1
    8e94:	|  |  |  |            move.l d1,d0
    8e96:	|  |  |  |            lsl.l #3,d0
    8e98:	|  |  |  |            sub.l d1,d0
    8e9a:	|  |  |  |            add.l d0,d0
    8e9c:	|  |  |  |            add.l d0,d0
    8e9e:	|  |  |  |            adda.l d0,a0
    8ea0:	|  |  |  |            move.l (a0),d0
    8ea2:	|  |  |  |            andi.l #-2147483633,d0
    8ea8:	|  |  |  |        /-- bpl.s 8eb2 <loadSpriteBank+0x2c0>
    8eaa:	|  |  |  |        |   subq.l #1,d0
    8eac:	|  |  |  |        |   moveq #-16,d1
    8eae:	|  |  |  |        |   or.l d1,d0
    8eb0:	|  |  |  |        |   addq.l #1,d0
    8eb2:	|  |  |  |        \-> tst.l d0
    8eb4:	|  |  |  |     /----- ble.s 8eba <loadSpriteBank+0x2c8>
    8eb6:	|  |  |  |     |      moveq #2,d0
    8eb8:	|  |  |  |     |  /-- bra.s 8ebc <loadSpriteBank+0x2ca>
    8eba:	|  |  |  |     \--|-> clr.w d0
    8ebc:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8ec0:	|  |  |  |            movea.l 112(sp),a0
    8ec4:	|  |  |  |            movea.l 8(a0),a0
    8ec8:	|  |  |  |            move.l 100(sp),d1
    8ecc:	|  |  |  |            move.l d1,d0
    8ece:	|  |  |  |            lsl.l #3,d0
    8ed0:	|  |  |  |            sub.l d1,d0
    8ed2:	|  |  |  |            add.l d0,d0
    8ed4:	|  |  |  |            add.l d0,d0
    8ed6:	|  |  |  |            adda.l d0,a0
    8ed8:	|  |  |  |            move.l (a0),d0
    8eda:	|  |  |  |            movea.l d0,a0
    8edc:	|  |  |  |            cmpa.w #0,a0
    8ee0:	|  |  |  |        /-- bge.s 8ee6 <loadSpriteBank+0x2f4>
    8ee2:	|  |  |  |        |   lea 15(a0),a0
    8ee6:	|  |  |  |        \-> move.l a0,d0
    8ee8:	|  |  |  |            asr.l #4,d0
    8eea:	|  |  |  |            add.l d0,d0
    8eec:	|  |  |  |            move.l d0,d1
    8eee:	|  |  |  |            moveq #0,d0
    8ef0:	|  |  |  |            move.w 58(sp),d0
    8ef4:	|  |  |  |            add.l d1,d0
    8ef6:	|  |  |  |            move.l d0,d2
    8ef8:	|  |  |  |            movea.l 112(sp),a0
    8efc:	|  |  |  |            movea.l 8(a0),a0
    8f00:	|  |  |  |            move.l 100(sp),d1
    8f04:	|  |  |  |            move.l d1,d0
    8f06:	|  |  |  |            lsl.l #3,d0
    8f08:	|  |  |  |            sub.l d1,d0
    8f0a:	|  |  |  |            add.l d0,d0
    8f0c:	|  |  |  |            add.l d0,d0
    8f0e:	|  |  |  |            adda.l d0,a0
    8f10:	|  |  |  |            move.l 4(a0),d0
    8f14:	|  |  |  |            move.l d0,d0
    8f16:	|  |  |  |            move.w d2,d1
    8f18:	|  |  |  |            muls.w d0,d1
    8f1a:	|  |  |  |            move.w d1,98(sp)
				break;
    8f1e:	|  |  |  |            nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8f20:	|  |  |  \----------> moveq #0,d0
    8f22:	|  |  |               move.w 98(sp),d0
    8f26:	|  |  |               add.l d0,d0
    8f28:	|  |  |               move.l d0,54(sp)
    8f2c:	|  |  |               moveq #2,d0
    8f2e:	|  |  |               move.l d0,50(sp)
    8f32:	|  |  |               move.l 1c896 <SysBase>,d0
    8f38:	|  |  |               movea.l d0,a6
    8f3a:	|  |  |               move.l 54(sp),d0
    8f3e:	|  |  |               move.l 50(sp),d1
    8f42:	|  |  |               jsr -684(a6)
    8f46:	|  |  |               move.l d0,46(sp)
    8f4a:	|  |  |               movea.l 46(sp),a1
    8f4e:	|  |  |               movea.l 112(sp),a0
    8f52:	|  |  |               movea.l 8(a0),a0
    8f56:	|  |  |               move.l 100(sp),d1
    8f5a:	|  |  |               move.l d1,d0
    8f5c:	|  |  |               lsl.l #3,d0
    8f5e:	|  |  |               sub.l d1,d0
    8f60:	|  |  |               add.l d0,d0
    8f62:	|  |  |               add.l d0,d0
    8f64:	|  |  |               adda.l d0,a0
    8f66:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8f6a:	|  |  |               move.l 1c87e <bigDataFile>,42(sp)
    8f72:	|  |  |               movea.l 112(sp),a0
    8f76:	|  |  |               movea.l 8(a0),a0
    8f7a:	|  |  |               move.l 100(sp),d1
    8f7e:	|  |  |               move.l d1,d0
    8f80:	|  |  |               lsl.l #3,d0
    8f82:	|  |  |               sub.l d1,d0
    8f84:	|  |  |               add.l d0,d0
    8f86:	|  |  |               add.l d0,d0
    8f88:	|  |  |               adda.l d0,a0
    8f8a:	|  |  |               move.l 24(a0),38(sp)
    8f90:	|  |  |               moveq #2,d1
    8f92:	|  |  |               move.l d1,34(sp)
    8f96:	|  |  |               move.w 98(sp),d0
    8f9a:	|  |  |               lsr.w #1,d0
    8f9c:	|  |  |               move.w d0,d0
    8f9e:	|  |  |               andi.l #65535,d0
    8fa4:	|  |  |               move.l d0,30(sp)
    8fa8:	|  |  |               move.l 1c89e <DOSBase>,d0
    8fae:	|  |  |               movea.l d0,a6
    8fb0:	|  |  |               move.l 42(sp),d1
    8fb4:	|  |  |               move.l 38(sp),d2
    8fb8:	|  |  |               move.l 34(sp),d3
    8fbc:	|  |  |               move.l 30(sp),d4
    8fc0:	|  |  |               jsr -324(a6)
    8fc4:	|  |  |               move.l d0,26(sp)
    8fc8:	|  |  |               move.l 26(sp),d0
    8fcc:	|  |  |               move.w d0,24(sp)
		if (!count) {
    8fd0:	|  |  |           /-- bne.s 8fe4 <loadSpriteBank+0x3f2>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8fd2:	|  |  |           |   pea 18fdb <PutChar+0x1357>
    8fd8:	|  |  |           |   jsr 171b0 <KPrintF>
    8fde:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8fe0:	|  |  |           |   clr.w d0
    8fe2:	+--|--|-----------|-- bra.s 8ffc <loadSpriteBank+0x40a>
	for (i = 0; i < total; i++) {
    8fe4:	|  |  |           \-> addq.l #1,100(sp)
    8fe8:	|  |  \-------------> move.l 100(sp),d0
    8fec:	|  |                  cmp.l 74(sp),d0
    8ff0:	|  \----------------- blt.w 8d22 <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    8ff4:	|                     jsr 6d22 <finishAccess>

	return TRUE;
    8ffa:	|                     moveq #1,d0
}
    8ffc:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    9000:	                      lea 84(sp),sp
    9004:	                      rts

00009006 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    9006:	                   lea -16(sp),sp
    900a:	                   move.l 28(sp),d0
    900e:	                   move.w d0,d0
    9010:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    9014:	                   movea.l 24(sp),a0
    9018:	                   move.l (a0),d0
    901a:	                   move.l d0,-(sp)
    901c:	                   jsr 1794c <__fixunssfsi>
    9022:	                   addq.l #4,sp
    9024:	                   move.l d0,d0
    9026:	                   movea.l 20(sp),a0
    902a:	                   move.l 8(a0),d1
    902e:	                   move.l d1,d1
    9030:	                   movea.w d0,a0
    9032:	                   suba.w d1,a0
    9034:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    9038:	                   movea.l 24(sp),a0
    903c:	                   move.l 4(a0),d0
    9040:	                   move.l d0,-(sp)
    9042:	                   jsr 1794c <__fixunssfsi>
    9048:	                   addq.l #4,sp
    904a:	                   move.l d0,d0
    904c:	                   movea.l 20(sp),a0
    9050:	                   move.l 12(a0),d1
    9054:	                   move.l d1,d1
    9056:	                   movea.w d0,a0
    9058:	                   suba.w d1,a0
    905a:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    905e:	                   move.w 4(sp),d0
    9062:	                   movea.w d0,a1
    9064:	                   move.w 6(sp),d0
    9068:	                   movea.w d0,a0
    906a:	                   pea 1 <_start+0x1>
    906e:	                   move.l a1,-(sp)
    9070:	                   move.l a0,-(sp)
    9072:	                   move.l 36(sp),-(sp)
    9076:	                   move.l 36(sp),-(sp)
    907a:	                   jsr 2de2 <CstScaleSprite>
    9080:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    9084:	                   movea.l 24(sp),a0
    9088:	                   move.l 118(a0),d0
    908c:	                   moveq #8,d1
    908e:	                   and.l d1,d0
    9090:	   /-------------- beq.w 9152 <scaleSprite+0x14c>
		if (single->xhot < 0)
    9094:	   |               movea.l 20(sp),a0
    9098:	   |               move.l 8(a0),d0
    909c:	   |  /----------- bpl.s 90d4 <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    909e:	   |  |            tst.w 2(sp)
    90a2:	   |  |     /----- beq.s 90ba <scaleSprite+0xb4>
    90a4:	   |  |     |      movea.l 20(sp),a0
    90a8:	   |  |     |      move.l (a0),d0
    90aa:	   |  |     |      move.l d0,d1
    90ac:	   |  |     |      movea.l 20(sp),a0
    90b0:	   |  |     |      move.l 8(a0),d0
    90b4:	   |  |     |      move.l d0,d0
    90b6:	   |  |     |      sub.w d0,d1
    90b8:	   |  |     |  /-- bra.s 90c8 <scaleSprite+0xc2>
    90ba:	   |  |     \--|-> movea.l 20(sp),a0
    90be:	   |  |        |   move.l 8(a0),d0
    90c2:	   |  |        |   move.l d0,d0
    90c4:	   |  |        |   move.w d0,d1
    90c6:	   |  |        |   addq.w #1,d1
    90c8:	   |  |        \-> movea.w 6(sp),a0
    90cc:	   |  |            suba.w d1,a0
    90ce:	   |  |            move.w a0,14(sp)
    90d2:	   |  |  /-------- bra.s 9108 <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    90d4:	   |  \--|-------> tst.w 2(sp)
    90d8:	   |     |  /----- beq.s 90f4 <scaleSprite+0xee>
    90da:	   |     |  |      movea.l 20(sp),a0
    90de:	   |     |  |      move.l (a0),d0
    90e0:	   |     |  |      move.l d0,d1
    90e2:	   |     |  |      movea.l 20(sp),a0
    90e6:	   |     |  |      move.l 8(a0),d0
    90ea:	   |     |  |      move.l d0,d0
    90ec:	   |     |  |      sub.w d0,d1
    90ee:	   |     |  |      move.w d1,d0
    90f0:	   |     |  |      subq.w #1,d0
    90f2:	   |     |  |  /-- bra.s 90fe <scaleSprite+0xf8>
    90f4:	   |     |  \--|-> movea.l 20(sp),a0
    90f8:	   |     |     |   move.l 8(a0),d0
    90fc:	   |     |     |   move.l d0,d0
    90fe:	   |     |     \-> move.w 6(sp),d1
    9102:	   |     |         sub.w d0,d1
    9104:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9108:	   |     \-------> movea.l 24(sp),a0
    910c:	   |               move.l 24(a0),d0
    9110:	   |               move.l d0,d1
    9112:	   |               movea.l 20(sp),a0
    9116:	   |               move.l 12(a0),d0
    911a:	   |               move.l d0,d0
    911c:	   |               sub.w d0,d1
    911e:	   |               movea.w 4(sp),a0
    9122:	   |               adda.w d1,a0
    9124:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    9128:	   |               movea.l 20(sp),a0
    912c:	   |               move.l (a0),d0
    912e:	   |               move.l d0,d0
    9130:	   |               move.w 14(sp),d1
    9134:	   |               add.w d0,d1
    9136:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    913a:	   |               movea.l 20(sp),a0
    913e:	   |               move.l 4(a0),d0
    9142:	   |               move.l d0,d0
    9144:	   |               movea.w 12(sp),a0
    9148:	   |               adda.w d0,a0
    914a:	   |               move.w a0,8(sp)
    914e:	/--|-------------- bra.w 9224 <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    9152:	|  \-------------> move.l 1c950 <cameraX>,d0
    9158:	|                  move.l d0,d0
    915a:	|                  sub.w d0,6(sp)
		y -= cameraY;
    915e:	|                  move.l 1c954 <cameraY>,d0
    9164:	|                  move.l d0,d0
    9166:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    916a:	|                  movea.l 20(sp),a0
    916e:	|                  move.l 8(a0),d0
    9172:	|     /----------- bpl.s 91aa <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9174:	|     |            tst.w 2(sp)
    9178:	|     |     /----- beq.s 9190 <scaleSprite+0x18a>
    917a:	|     |     |      movea.l 20(sp),a0
    917e:	|     |     |      move.l (a0),d0
    9180:	|     |     |      move.l d0,d1
    9182:	|     |     |      movea.l 20(sp),a0
    9186:	|     |     |      move.l 8(a0),d0
    918a:	|     |     |      move.l d0,d0
    918c:	|     |     |      sub.w d0,d1
    918e:	|     |     |  /-- bra.s 919e <scaleSprite+0x198>
    9190:	|     |     \--|-> movea.l 20(sp),a0
    9194:	|     |        |   move.l 8(a0),d0
    9198:	|     |        |   move.l d0,d0
    919a:	|     |        |   move.w d0,d1
    919c:	|     |        |   addq.w #1,d1
    919e:	|     |        \-> move.w 6(sp),d0
    91a2:	|     |            sub.w d1,d0
    91a4:	|     |            move.w d0,14(sp)
    91a8:	|     |  /-------- bra.s 91de <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    91aa:	|     \--|-------> tst.w 2(sp)
    91ae:	|        |  /----- beq.s 91ca <scaleSprite+0x1c4>
    91b0:	|        |  |      movea.l 20(sp),a0
    91b4:	|        |  |      move.l (a0),d0
    91b6:	|        |  |      move.l d0,d1
    91b8:	|        |  |      movea.l 20(sp),a0
    91bc:	|        |  |      move.l 8(a0),d0
    91c0:	|        |  |      move.l d0,d0
    91c2:	|        |  |      sub.w d0,d1
    91c4:	|        |  |      move.w d1,d0
    91c6:	|        |  |      subq.w #1,d0
    91c8:	|        |  |  /-- bra.s 91d4 <scaleSprite+0x1ce>
    91ca:	|        |  \--|-> movea.l 20(sp),a0
    91ce:	|        |     |   move.l 8(a0),d0
    91d2:	|        |     |   move.l d0,d0
    91d4:	|        |     \-> move.w 6(sp),d1
    91d8:	|        |         sub.w d0,d1
    91da:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    91de:	|        \-------> movea.l 24(sp),a0
    91e2:	|                  move.l 24(a0),d0
    91e6:	|                  move.l d0,d1
    91e8:	|                  movea.l 20(sp),a0
    91ec:	|                  move.l 12(a0),d0
    91f0:	|                  move.l d0,d0
    91f2:	|                  sub.w d0,d1
    91f4:	|                  movea.w 4(sp),a0
    91f8:	|                  adda.w d1,a0
    91fa:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    91fe:	|                  movea.l 20(sp),a0
    9202:	|                  move.l (a0),d0
    9204:	|                  move.l d0,d0
    9206:	|                  move.w 14(sp),d1
    920a:	|                  add.w d0,d1
    920c:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    9210:	|                  movea.l 20(sp),a0
    9214:	|                  move.l 4(a0),d0
    9218:	|                  move.l d0,d0
    921a:	|                  movea.w 12(sp),a0
    921e:	|                  adda.w d0,a0
    9220:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9224:	\----------------> move.l 1c852 <input+0xa>,d1
    922a:	                   moveq #0,d0
    922c:	                   move.w 14(sp),d0
    9230:	                   cmp.l d1,d0
    9232:	            /----- bgt.s 9268 <scaleSprite+0x262>
    9234:	            |      move.l 1c852 <input+0xa>,d1
    923a:	            |      moveq #0,d0
    923c:	            |      move.w 10(sp),d0
    9240:	            |      cmp.l d1,d0
    9242:	            +----- blt.s 9268 <scaleSprite+0x262>
    9244:	            |      move.l 1c856 <input+0xe>,d1
    924a:	            |      moveq #0,d0
    924c:	            |      move.w 12(sp),d0
    9250:	            |      cmp.l d1,d0
    9252:	            +----- bgt.s 9268 <scaleSprite+0x262>
    9254:	            |      move.l 1c856 <input+0xe>,d1
    925a:	            |      moveq #0,d0
    925c:	            |      move.w 8(sp),d0
    9260:	            |      cmp.l d1,d0
    9262:	            +----- blt.s 9268 <scaleSprite+0x262>
		return TRUE;
    9264:	            |      moveq #1,d0
    9266:	            |  /-- bra.s 926a <scaleSprite+0x264>
	}
	return FALSE;
    9268:	            \--|-> clr.w d0
    926a:	               \-> lea 16(sp),sp
    926e:	                   rts

00009270 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9270:	    move.l 4(sp),d0
    9274:	/-- bpl.s 9278 <TF_abs+0x8>
    9276:	|   neg.l d0
}
    9278:	\-> rts

0000927a <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    927a:	             lea -28(sp),sp
    927e:	             move.l a6,-(sp)
    9280:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9282:	             move.l #132,28(sp)
    928a:	             clr.l 24(sp)
    928e:	             move.l 1c896 <SysBase>,d0
    9294:	             movea.l d0,a6
    9296:	             move.l 28(sp),d0
    929a:	             move.l 24(sp),d1
    929e:	             jsr -684(a6)
    92a2:	             move.l d0,20(sp)
    92a6:	             move.l 20(sp),d0
    92aa:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    92ae:	         /-- bne.s 92b6 <addPerson+0x3c>
    92b0:	         |   clr.w d0
    92b2:	/--------|-- bra.w 94e6 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    92b6:	|        \-> move.l 48(sp),-(sp)
    92ba:	|            jsr d5e2 <loadObjectType>
    92c0:	|            addq.l #4,sp
    92c2:	|            movea.l 16(sp),a0
    92c6:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    92ca:	|            movea.l 16(sp),a0
    92ce:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    92d6:	|            movea.l 16(sp),a0
    92da:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    92de:	|            movea.l 16(sp),a0
    92e2:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    92e6:	|            move.l 44(sp),-(sp)
    92ea:	|            jsr 175ec <__floatsisf>
    92f0:	|            addq.l #4,sp
    92f2:	|            move.l d0,d2
    92f4:	|            move.l 40(sp),-(sp)
    92f8:	|            jsr 175ec <__floatsisf>
    92fe:	|            addq.l #4,sp
    9300:	|            move.l d2,-(sp)
    9302:	|            move.l d0,-(sp)
    9304:	|            move.l 24(sp),-(sp)
    9308:	|            jsr adc8 <moveAndScale>
    930e:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9312:	|            movea.l 16(sp),a0
    9316:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    931a:	|            movea.l 16(sp),a0
    931e:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9324:	|            movea.l 16(sp),a0
    9328:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    932e:	|            movea.l 16(sp),a0
    9332:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9336:	|            movea.l 16(sp),a0
    933a:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    933e:	|            movea.l 16(sp),a0
    9342:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    9348:	|            movea.l 16(sp),a0
    934c:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9350:	|            movea.l 16(sp),a0
    9354:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    935c:	|            movea.l 16(sp),a0
    9360:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9368:	|            movea.l 16(sp),a0
    936c:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9370:	|            movea.l 16(sp),a0
    9374:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9378:	|            movea.l 16(sp),a0
    937c:	|            movea.l 114(a0),a0
    9380:	|            move.l 24(a0),d0
    9384:	|            movea.l 16(sp),a0
    9388:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    938c:	|            movea.l 16(sp),a0
    9390:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9394:	|            movea.l 16(sp),a0
    9398:	|            movea.l 114(a0),a0
    939c:	|            move.l 32(a0),d0
    93a0:	|            movea.l 16(sp),a0
    93a4:	|            move.l d0,122(a0)
    newPerson->r = 0;
    93a8:	|            movea.l 16(sp),a0
    93ac:	|            clr.b 126(a0)
    newPerson->g = 0;
    93b0:	|            movea.l 16(sp),a0
    93b4:	|            clr.b 127(a0)
    newPerson->b = 0;
    93b8:	|            movea.l 16(sp),a0
    93bc:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    93c0:	|            movea.l 16(sp),a0
    93c4:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    93c8:	|            movea.l 16(sp),a0
    93cc:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    93d0:	|            movea.l 16(sp),a0
    93d4:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    93da:	|            clr.l -(sp)
    93dc:	|            move.l 20(sp),-(sp)
    93e0:	|            jsr 821e <setFrames>
    93e6:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    93e8:	|            movea.l 52(sp),a0
    93ec:	|            movea.l (a0),a0
    93ee:	|            movea.l (a0),a0
    93f0:	|            movea.l 4(a0),a0
    93f4:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    93f8:	|     /----- bpl.s 9402 <addPerson+0x188>
    93fa:	|     |      move.l 12(sp),d0
    93fe:	|     |      neg.l d0
    9400:	|     |  /-- bra.s 9404 <addPerson+0x18a>
    9402:	|     \--|-> moveq #1,d0
    9404:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    9408:	|            movea.l 52(sp),a0
    940c:	|            movea.l (a0),a0
    940e:	|            movea.l (a0),a0
    9410:	|            movea.l (a0),a0
    9412:	|            move.l 8(a0),d0
    9416:	|            cmp.l 8(sp),d0
    941a:	|     /----- bgt.s 944c <addPerson+0x1d2>
        if (fNumSigned < 0) {
    941c:	|     |      tst.l 12(sp)
    9420:	|     |  /-- bge.s 942e <addPerson+0x1b4>
            newPerson->height = 5;
    9422:	|     |  |   movea.l 16(sp),a0
    9426:	|     |  |   moveq #5,d0
    9428:	|     |  |   move.l d0,20(a0)
    942c:	|  /--|--|-- bra.s 9478 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    942e:	|  |  |  \-> movea.l 52(sp),a0
    9432:	|  |  |      movea.l (a0),a0
    9434:	|  |  |      movea.l (a0),a0
    9436:	|  |  |      movea.l (a0),a0
    9438:	|  |  |      movea.l 16(a0),a0
    943c:	|  |  |      move.l 12(a0),d0
    9440:	|  |  |      addq.l #5,d0
    9442:	|  |  |      movea.l 16(sp),a0
    9446:	|  |  |      move.l d0,20(a0)
    944a:	|  +--|----- bra.s 9478 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    944c:	|  |  \----> movea.l 52(sp),a0
    9450:	|  |         movea.l (a0),a0
    9452:	|  |         movea.l (a0),a0
    9454:	|  |         movea.l (a0),a0
    9456:	|  |         movea.l 16(a0),a0
    945a:	|  |         move.l 8(sp),d1
    945e:	|  |         move.l d1,d0
    9460:	|  |         lsl.l #3,d0
    9462:	|  |         sub.l d1,d0
    9464:	|  |         add.l d0,d0
    9466:	|  |         add.l d0,d0
    9468:	|  |         adda.l d0,a0
    946a:	|  |         move.l 12(a0),d0
    946e:	|  |         addq.l #5,d0
    9470:	|  |         movea.l 16(sp),a0
    9474:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9478:	|  \-------> move.l #116986,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9480:	|        /-- bra.s 9490 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9482:	|     /--|-> movea.l 32(sp),a0
    9486:	|     |  |   move.l (a0),d0
    9488:	|     |  |   moveq #36,d1
    948a:	|     |  |   add.l d0,d1
    948c:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9490:	|     |  \-> movea.l 32(sp),a0
    9494:	|     |      move.l (a0),d0
    9496:	|     |  /-- beq.s 94be <addPerson+0x244>
    9498:	|     |  |   movea.l 32(sp),a0
    949c:	|     |  |   movea.l (a0),a0
    949e:	|     |  |   move.l 4(a0),d2
    94a2:	|     |  |   move.l 44(sp),-(sp)
    94a6:	|     |  |   jsr 175ec <__floatsisf>
    94ac:	|     |  |   addq.l #4,sp
    94ae:	|     |  |   move.l d0,-(sp)
    94b0:	|     |  |   move.l d2,-(sp)
    94b2:	|     |  |   jsr 17812 <__ltsf2>
    94b8:	|     |  |   addq.l #8,sp
    94ba:	|     |  |   tst.l d0
    94bc:	|     \--|-- blt.s 9482 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    94be:	|        \-> movea.l 32(sp),a0
    94c2:	|            move.l (a0),d0
    94c4:	|            movea.l 16(sp),a0
    94c8:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    94cc:	|            movea.l 32(sp),a0
    94d0:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    94d4:	|            movea.l 16(sp),a0
    94d8:	|            move.l 114(a0),d0
    94dc:	|            sne d0
    94de:	|            neg.b d0
    94e0:	|            move.b d0,d0
    94e2:	|            andi.w #255,d0
}
    94e6:	\----------> move.l (sp)+,d2
    94e8:	             movea.l (sp)+,a6
    94ea:	             lea 28(sp),sp
    94ee:	             rts

000094f0 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    94f0:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    94f2:	       move.l 8(sp),-(sp)
    94f6:	       jsr a680 <findPerson>
    94fc:	       addq.l #4,sp
    94fe:	       move.l d0,(sp)
    if (moveMe) {
    9500:	/----- beq.s 9534 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9502:	|      movea.l (sp),a0
    9504:	|      move.l 68(a0),d0
    9508:	|  /-- beq.s 951a <animatePerson+0x2a>
    950a:	|  |   movea.l (sp),a0
    950c:	|  |   move.l 68(a0),d0
    9510:	|  |   move.l d0,-(sp)
    9512:	|  |   jsr 47c6 <abortFunction>
    9518:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    951a:	|  \-> movea.l (sp),a0
    951c:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9520:	|      movea.l (sp),a0
    9522:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9526:	|      movea.l (sp),a0
    9528:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    952c:	|      movea.l (sp),a0
    952e:	|      move.l 12(sp),72(a0)
    }
}
    9534:	\----> nop
    9536:	       addq.l #4,sp
    9538:	       rts

0000953a <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    953a:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    953c:	       move.l 8(sp),-(sp)
    9540:	       jsr a680 <findPerson>
    9546:	       addq.l #4,sp
    9548:	       move.l d0,(sp)
    if (moveMe) {
    954a:	/----- beq.s 958c <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    954c:	|      movea.l (sp),a0
    954e:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9552:	|      movea.l (sp),a0
    9554:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    955a:	|      move.l (sp),-(sp)
    955c:	|      jsr af56 <rethinkAngle>
    9562:	|      addq.l #4,sp
        if (moveMe->walking) {
    9564:	|      movea.l (sp),a0
    9566:	|      move.w 64(a0),d0
    956a:	|  /-- beq.s 957e <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    956c:	|  |   pea 1 <_start+0x1>
    9570:	|  |   move.l 4(sp),-(sp)
    9574:	|  |   jsr 821e <setFrames>
    957a:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    957c:	+--|-- bra.s 958c <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    957e:	|  \-> clr.l -(sp)
    9580:	|      move.l 4(sp),-(sp)
    9584:	|      jsr 821e <setFrames>
    958a:	|      addq.l #8,sp
}
    958c:	\----> nop
    958e:	       addq.l #4,sp
    9590:	       rts

00009592 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9592:	             lea -36(sp),sp
    9596:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9598:	             movea.l 44(sp),a0
    959c:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    95a2:	             moveq #12,d0
    95a4:	             move.l d0,28(sp)
    95a8:	             clr.l 24(sp)
    95ac:	             move.l 1c896 <SysBase>,d0
    95b2:	             movea.l d0,a6
    95b4:	             move.l 28(sp),d0
    95b8:	             move.l 24(sp),d1
    95bc:	             jsr -684(a6)
    95c0:	             move.l d0,20(sp)
    95c4:	             move.l 20(sp),d0
    95c8:	             move.l d0,16(sp)
	if (!(newAnim)) {
    95cc:	         /-- bne.s 95e2 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    95ce:	         |   pea 1900e <PutChar+0x138a>
    95d4:	         |   jsr 171b0 <KPrintF>
    95da:	         |   addq.l #4,sp
		return NULL;
    95dc:	         |   moveq #0,d0
    95de:	/--------|-- bra.w 9734 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    95e2:	|        \-> movea.l 44(sp),a0
    95e6:	|            move.l (a0),d0
    95e8:	|            movea.l 16(sp),a0
    95ec:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    95ee:	|            movea.l 16(sp),a0
    95f2:	|            movea.l (a0),a0
    95f4:	|            move.l 4(a0),d0
    95f8:	|            addq.l #1,d0
    95fa:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    95fe:	|            movea.l 16(sp),a0
    9602:	|            move.l 32(sp),8(a0)

	if (num) {
    9608:	|  /-------- beq.w 9728 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    960c:	|  |         move.l 32(sp),d1
    9610:	|  |         move.l d1,d0
    9612:	|  |         add.l d0,d0
    9614:	|  |         add.l d1,d0
    9616:	|  |         add.l d0,d0
    9618:	|  |         add.l d0,d0
    961a:	|  |         move.l d0,12(sp)
    961e:	|  |         clr.l 8(sp)
    9622:	|  |         move.l 1c896 <SysBase>,d0
    9628:	|  |         movea.l d0,a6
    962a:	|  |         move.l 12(sp),d0
    962e:	|  |         move.l 8(sp),d1
    9632:	|  |         jsr -684(a6)
    9636:	|  |         move.l d0,4(sp)
    963a:	|  |         move.l 4(sp),d0
    963e:	|  |         movea.l 16(sp),a0
    9642:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9646:	|  |         movea.l 16(sp),a0
    964a:	|  |         move.l 4(a0),d0
    964e:	|  |     /-- bne.s 9664 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9650:	|  |     |   pea 1900e <PutChar+0x138a>
    9656:	|  |     |   jsr 171b0 <KPrintF>
    965c:	|  |     |   addq.l #4,sp
			return NULL;
    965e:	|  |     |   moveq #0,d0
    9660:	+--|-----|-- bra.w 9734 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9664:	|  |     \-> clr.l 36(sp)
    9668:	|  |     /-- bra.w 971a <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    966c:	|  |  /--|-> movea.l 44(sp),a0
    9670:	|  |  |  |   movea.l 4(a0),a0
    9674:	|  |  |  |   move.l 36(sp),d1
    9678:	|  |  |  |   move.l d1,d0
    967a:	|  |  |  |   add.l d0,d0
    967c:	|  |  |  |   add.l d1,d0
    967e:	|  |  |  |   add.l d0,d0
    9680:	|  |  |  |   add.l d0,d0
    9682:	|  |  |  |   lea (0,a0,d0.l),a1
    9686:	|  |  |  |   movea.l 16(sp),a0
    968a:	|  |  |  |   movea.l 4(a0),a0
    968e:	|  |  |  |   move.l 36(sp),d1
    9692:	|  |  |  |   move.l d1,d0
    9694:	|  |  |  |   add.l d0,d0
    9696:	|  |  |  |   add.l d1,d0
    9698:	|  |  |  |   add.l d0,d0
    969a:	|  |  |  |   add.l d0,d0
    969c:	|  |  |  |   adda.l d0,a0
    969e:	|  |  |  |   move.l (a1),d0
    96a0:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    96a2:	|  |  |  |   movea.l 44(sp),a0
    96a6:	|  |  |  |   movea.l 4(a0),a0
    96aa:	|  |  |  |   move.l 36(sp),d1
    96ae:	|  |  |  |   move.l d1,d0
    96b0:	|  |  |  |   add.l d0,d0
    96b2:	|  |  |  |   add.l d1,d0
    96b4:	|  |  |  |   add.l d0,d0
    96b6:	|  |  |  |   add.l d0,d0
    96b8:	|  |  |  |   lea (0,a0,d0.l),a1
    96bc:	|  |  |  |   movea.l 16(sp),a0
    96c0:	|  |  |  |   movea.l 4(a0),a0
    96c4:	|  |  |  |   move.l 36(sp),d1
    96c8:	|  |  |  |   move.l d1,d0
    96ca:	|  |  |  |   add.l d0,d0
    96cc:	|  |  |  |   add.l d1,d0
    96ce:	|  |  |  |   add.l d0,d0
    96d0:	|  |  |  |   add.l d0,d0
    96d2:	|  |  |  |   adda.l d0,a0
    96d4:	|  |  |  |   move.l 4(a1),d0
    96d8:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    96dc:	|  |  |  |   movea.l 44(sp),a0
    96e0:	|  |  |  |   movea.l 4(a0),a0
    96e4:	|  |  |  |   move.l 36(sp),d1
    96e8:	|  |  |  |   move.l d1,d0
    96ea:	|  |  |  |   add.l d0,d0
    96ec:	|  |  |  |   add.l d1,d0
    96ee:	|  |  |  |   add.l d0,d0
    96f0:	|  |  |  |   add.l d0,d0
    96f2:	|  |  |  |   lea (0,a0,d0.l),a1
    96f6:	|  |  |  |   movea.l 16(sp),a0
    96fa:	|  |  |  |   movea.l 4(a0),a0
    96fe:	|  |  |  |   move.l 36(sp),d1
    9702:	|  |  |  |   move.l d1,d0
    9704:	|  |  |  |   add.l d0,d0
    9706:	|  |  |  |   add.l d1,d0
    9708:	|  |  |  |   add.l d0,d0
    970a:	|  |  |  |   add.l d0,d0
    970c:	|  |  |  |   adda.l d0,a0
    970e:	|  |  |  |   move.l 8(a1),d0
    9712:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    9716:	|  |  |  |   addq.l #1,36(sp)
    971a:	|  |  |  \-> move.l 36(sp),d0
    971e:	|  |  |      cmp.l 32(sp),d0
    9722:	|  |  \----- blt.w 966c <copyAnim+0xda>
    9726:	|  |     /-- bra.s 9730 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9728:	|  \-----|-> movea.l 16(sp),a0
    972c:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9730:	|        \-> move.l 16(sp),d0
}
    9734:	\----------> movea.l (sp)+,a6
    9736:	             lea 36(sp),sp
    973a:	             rts

0000973c <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    973c:	                lea -44(sp),sp
    9740:	                move.l a6,-(sp)
    9742:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9744:	                moveq #12,d0
    9746:	                move.l d0,40(sp)
    974a:	                clr.l 36(sp)
    974e:	                move.l 1c896 <SysBase>,d0
    9754:	                movea.l d0,a6
    9756:	                move.l 40(sp),d0
    975a:	                move.l 36(sp),d1
    975e:	                jsr -684(a6)
    9762:	                move.l d0,32(sp)
    9766:	                move.l 32(sp),d0
    976a:	                move.l d0,28(sp)
	if( !newP) {
    976e:	            /-- bne.s 9784 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9770:	            |   pea 1902f <PutChar+0x13ab>
    9776:	            |   jsr 171b0 <KPrintF>
    977c:	            |   addq.l #4,sp
		return NULL;
    977e:	            |   moveq #0,d0
    9780:	/-----------|-- bra.w 9954 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9784:	|           \-> movea.l 28(sp),a0
    9788:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    978e:	|               move.l 56(sp),d1
    9792:	|               move.l d1,d0
    9794:	|               add.l d0,d0
    9796:	|               add.l d1,d0
    9798:	|               add.l d0,d0
    979a:	|               add.l d0,d0
    979c:	|               move.l d0,24(sp)
    97a0:	|               clr.l 20(sp)
    97a4:	|               move.l 1c896 <SysBase>,d0
    97aa:	|               movea.l d0,a6
    97ac:	|               move.l 24(sp),d0
    97b0:	|               move.l 20(sp),d1
    97b4:	|               jsr -684(a6)
    97b8:	|               move.l d0,16(sp)
    97bc:	|               move.l 16(sp),d0
    97c0:	|               movea.l 28(sp),a0
    97c4:	|               move.l d0,4(a0)
	if( !newP->frames) {
    97c8:	|               movea.l 28(sp),a0
    97cc:	|               move.l 4(a0),d0
    97d0:	|           /-- bne.s 97e6 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    97d2:	|           |   pea 1902f <PutChar+0x13ab>
    97d8:	|           |   jsr 171b0 <KPrintF>
    97de:	|           |   addq.l #4,sp
		return NULL;
    97e0:	|           |   moveq #0,d0
    97e2:	+-----------|-- bra.w 9954 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    97e6:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    97ec:	|               movea.l 60(sp),a0
    97f0:	|               move.l (a0),44(sp)
	while (a) {
    97f4:	|     /-------- bra.w 9948 <createPersonaAnim+0x20c>
		a --;
    97f8:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    97fc:	|  |  |         movea.l 28(sp),a0
    9800:	|  |  |         movea.l 4(a0),a0
    9804:	|  |  |         move.l 48(sp),d1
    9808:	|  |  |         move.l d1,d0
    980a:	|  |  |         add.l d0,d0
    980c:	|  |  |         add.l d1,d0
    980e:	|  |  |         add.l d0,d0
    9810:	|  |  |         add.l d0,d0
    9812:	|  |  |         adda.l d0,a0
    9814:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    9818:	|  |  |         movea.l 44(sp),a0
    981c:	|  |  |         move.l (a0),d0
    981e:	|  |  |         moveq #5,d1
    9820:	|  |  |         cmp.l d0,d1
    9822:	|  |  |     /-- bne.s 984e <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9824:	|  |  |     |   movea.l 28(sp),a0
    9828:	|  |  |     |   movea.l 4(a0),a0
    982c:	|  |  |     |   move.l 48(sp),d1
    9830:	|  |  |     |   move.l d1,d0
    9832:	|  |  |     |   add.l d0,d0
    9834:	|  |  |     |   add.l d1,d0
    9836:	|  |  |     |   add.l d0,d0
    9838:	|  |  |     |   add.l d0,d0
    983a:	|  |  |     |   lea (0,a0,d0.l),a1
    983e:	|  |  |     |   movea.l 44(sp),a0
    9842:	|  |  |     |   move.l 4(a0),d0
    9846:	|  |  |     |   move.l d0,8(a1)
    984a:	|  |  |  /--|-- bra.w 98f6 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    984e:	|  |  |  |  \-> movea.l 44(sp),a0
    9852:	|  |  |  |      move.l (a0),d0
    9854:	|  |  |  |      moveq #2,d1
    9856:	|  |  |  |      cmp.l d0,d1
    9858:	|  |  |  |  /-- bne.s 9884 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    985a:	|  |  |  |  |   movea.l 44(sp),a0
    985e:	|  |  |  |  |   move.l 4(a0),d2
    9862:	|  |  |  |  |   movea.l 28(sp),a0
    9866:	|  |  |  |  |   movea.l 4(a0),a0
    986a:	|  |  |  |  |   move.l 48(sp),d1
    986e:	|  |  |  |  |   move.l d1,d0
    9870:	|  |  |  |  |   add.l d0,d0
    9872:	|  |  |  |  |   add.l d1,d0
    9874:	|  |  |  |  |   add.l d0,d0
    9876:	|  |  |  |  |   add.l d0,d0
    9878:	|  |  |  |  |   adda.l d0,a0
    987a:	|  |  |  |  |   move.l d2,d0
    987c:	|  |  |  |  |   neg.l d0
    987e:	|  |  |  |  |   move.l d0,8(a0)
    9882:	|  |  |  +--|-- bra.s 98f6 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9884:	|  |  |  |  \-> movea.l 44(sp),a0
    9888:	|  |  |  |      move.l (a0),d0
    988a:	|  |  |  |      moveq #6,d1
    988c:	|  |  |  |      cmp.l d0,d1
    988e:	|  |  |  |  /-- bne.s 98d6 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9890:	|  |  |  |  |   movea.l 44(sp),a0
    9894:	|  |  |  |  |   movea.l 4(a0),a0
    9898:	|  |  |  |  |   move.l (a0),d0
    989a:	|  |  |  |  |   move.l d0,-(sp)
    989c:	|  |  |  |  |   pea 1 <_start+0x1>
    98a0:	|  |  |  |  |   lea 20(sp),a0
    98a4:	|  |  |  |  |   move.l a0,-(sp)
    98a6:	|  |  |  |  |   jsr 14788 <getValueType>
    98ac:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    98b0:	|  |  |  |  |   movea.l 44(sp),a0
    98b4:	|  |  |  |  |   movea.l 4(a0),a0
    98b8:	|  |  |  |  |   movea.l (a0),a0
    98ba:	|  |  |  |  |   move.l 8(a0),d0
    98be:	|  |  |  |  |   move.l d0,-(sp)
    98c0:	|  |  |  |  |   pea 1 <_start+0x1>
    98c4:	|  |  |  |  |   lea 16(sp),a0
    98c8:	|  |  |  |  |   move.l a0,-(sp)
    98ca:	|  |  |  |  |   jsr 14788 <getValueType>
    98d0:	|  |  |  |  |   lea 12(sp),sp
    98d4:	|  |  |  +--|-- bra.s 98f6 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    98d6:	|  |  |  |  \-> move.l 44(sp),d0
    98da:	|  |  |  |      move.l d0,-(sp)
    98dc:	|  |  |  |      pea 1 <_start+0x1>
    98e0:	|  |  |  |      lea 20(sp),a0
    98e4:	|  |  |  |      move.l a0,-(sp)
    98e6:	|  |  |  |      jsr 14788 <getValueType>
    98ec:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    98f0:	|  |  |  |      moveq #1,d0
    98f2:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    98f6:	|  |  |  \----> move.l 60(sp),-(sp)
    98fa:	|  |  |         jsr 1510c <trimStack>
    9900:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9902:	|  |  |         movea.l 28(sp),a0
    9906:	|  |  |         movea.l 4(a0),a0
    990a:	|  |  |         move.l 48(sp),d1
    990e:	|  |  |         move.l d1,d0
    9910:	|  |  |         add.l d0,d0
    9912:	|  |  |         add.l d1,d0
    9914:	|  |  |         add.l d0,d0
    9916:	|  |  |         add.l d0,d0
    9918:	|  |  |         adda.l d0,a0
    991a:	|  |  |         move.l 12(sp),d0
    991e:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9920:	|  |  |         movea.l 28(sp),a0
    9924:	|  |  |         movea.l 4(a0),a0
    9928:	|  |  |         move.l 48(sp),d1
    992c:	|  |  |         move.l d1,d0
    992e:	|  |  |         add.l d0,d0
    9930:	|  |  |         add.l d1,d0
    9932:	|  |  |         add.l d0,d0
    9934:	|  |  |         add.l d0,d0
    9936:	|  |  |         adda.l d0,a0
    9938:	|  |  |         move.l 8(sp),d0
    993c:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9940:	|  |  |         movea.l 60(sp),a0
    9944:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9948:	|  |  \-------> tst.l 48(sp)
    994c:	|  \----------- bne.w 97f8 <createPersonaAnim+0xbc>
	}

	return newP;
    9950:	|               move.l 28(sp),d0
}
    9954:	\-------------> move.l (sp)+,d2
    9956:	                movea.l (sp)+,a6
    9958:	                lea 44(sp),sp
    995c:	                rts

0000995e <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    995e:	       lea -12(sp),sp
    9962:	       move.l a6,-(sp)

	if(orig->theSprites)
    9964:	       movea.l 20(sp),a0
    9968:	       move.l (a0),d0
    996a:	   /-- beq.s 9994 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    996c:	   |   movea.l 20(sp),a0
    9970:	   |   movea.l (a0),a0
    9972:	   |   move.l 4(a0),d0
    9976:	   |   subq.l #1,d0
    9978:	   |   move.l d0,4(a0)
    997c:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9982:	   +-- bne.s 9994 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9984:	   |   movea.l 20(sp),a0
    9988:	   |   move.l (a0),d0
    998a:	   |   move.l d0,-(sp)
    998c:	   |   jsr 8ad0 <forgetSpriteBank>
    9992:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9994:	   \-> tst.l 20(sp)
    9998:	/----- beq.s 99d8 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    999a:	|      movea.l 20(sp),a0
    999e:	|      move.l 8(a0),d0
    99a2:	|  /-- beq.s 99be <deleteAnim+0x60>
			FreeVec( orig->frames);
    99a4:	|  |   movea.l 20(sp),a0
    99a8:	|  |   move.l 4(a0),8(sp)
    99ae:	|  |   move.l 1c896 <SysBase>,d0
    99b4:	|  |   movea.l d0,a6
    99b6:	|  |   movea.l 8(sp),a1
    99ba:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    99be:	|  \-> move.l 20(sp),4(sp)
    99c4:	|      move.l 1c896 <SysBase>,d0
    99ca:	|      movea.l d0,a6
    99cc:	|      movea.l 4(sp),a1
    99d0:	|      jsr -690(a6)
		orig = NULL;
    99d4:	|      clr.l 20(sp)
	}	
	
}
    99d8:	\----> nop
    99da:	       movea.l (sp)+,a6
    99dc:	       lea 12(sp),sp
    99e0:	       rts

000099e2 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    99e2:	          lea -124(sp),sp
    99e6:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    99ea:	          movea.l 152(sp),a0
    99ee:	          move.l 56(a0),d1
    99f2:	          movea.l 152(sp),a0
    99f6:	          move.l 60(a0),d0
    99fa:	          cmp.l d1,d0
    99fc:	      /-- bne.s 9a2c <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    99fe:	      |   movea.l 152(sp),a0
    9a02:	      |   moveq #-1,d0
    9a04:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9a08:	      |   movea.l 152(sp),a0
    9a0c:	      |   move.l 40(a0),d0
    9a10:	      |   movea.l 152(sp),a0
    9a14:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9a18:	      |   movea.l 152(sp),a0
    9a1c:	      |   move.l 44(a0),d0
    9a20:	      |   movea.l 152(sp),a0
    9a24:	      |   move.l d0,52(a0)
    9a28:	   /--|-- bra.w 9f92 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9a2c:	   |  \-> movea.l 1c9b2 <currentFloor>,a0
    9a32:	   |      move.l 16(a0),d1
    9a36:	   |      movea.l 152(sp),a0
    9a3a:	   |      move.l 56(a0),d0
    9a3e:	   |      add.l d0,d0
    9a40:	   |      add.l d0,d0
    9a42:	   |      movea.l d1,a0
    9a44:	   |      adda.l d0,a0
    9a46:	   |      move.l (a0),d1
    9a48:	   |      movea.l 152(sp),a0
    9a4c:	   |      move.l 60(a0),d0
    9a50:	   |      add.l d0,d0
    9a52:	   |      add.l d0,d0
    9a54:	   |      movea.l d1,a0
    9a56:	   |      adda.l d0,a0
    9a58:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9a5c:	   |      moveq #-1,d0
    9a5e:	   |      cmp.l 144(sp),d0
    9a62:	   |  /-- bne.s 9a6a <doBorderStuff+0x88>
    9a64:	   |  |   clr.w d0
    9a66:	/--|--|-- bra.w a092 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9a6a:	|  |  \-> movea.l 1c9b2 <currentFloor>,a0
    9a70:	|  |      move.l 12(a0),d1
    9a74:	|  |      move.l 144(sp),d0
    9a78:	|  |      lsl.l #3,d0
    9a7a:	|  |      add.l d0,d1
    9a7c:	|  |      movea.l 1c9b2 <currentFloor>,a0
    9a82:	|  |      movea.l 12(a0),a1
    9a86:	|  |      movea.l 152(sp),a0
    9a8a:	|  |      move.l 56(a0),d0
    9a8e:	|  |      lsl.l #3,d0
    9a90:	|  |      add.l a1,d0
    9a92:	|  |      lea 40(sp),a0
    9a96:	|  |      move.l a0,-(sp)
    9a98:	|  |      lea 48(sp),a0
    9a9c:	|  |      move.l a0,-(sp)
    9a9e:	|  |      move.l d1,-(sp)
    9aa0:	|  |      move.l d0,-(sp)
    9aa2:	|  |      jsr 16432 <getMatchingCorners>
    9aa8:	|  |      lea 16(sp),sp
    9aac:	|  |      tst.w d0
    9aae:	|  |  /-- bne.s 9ac4 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9ab0:	|  |  |   pea 19059 <PutChar+0x13d5>
    9ab6:	|  |  |   jsr 171b0 <KPrintF>
    9abc:	|  |  |   addq.l #4,sp
            return FALSE;
    9abe:	|  |  |   clr.w d0
    9ac0:	+--|--|-- bra.w a092 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9ac4:	|  |  \-> movea.l 152(sp),a0
    9ac8:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9ace:	|  |      movea.l 152(sp),a0
    9ad2:	|  |      move.l (a0),d0
    9ad4:	|  |      move.l d0,-(sp)
    9ad6:	|  |      jsr 17584 <__fixsfsi>
    9adc:	|  |      addq.l #4,sp
    9ade:	|  |      move.l d0,140(sp)
    9ae2:	|  |      movea.l 152(sp),a0
    9ae6:	|  |      move.l 4(a0),d0
    9aea:	|  |      move.l d0,-(sp)
    9aec:	|  |      jsr 17584 <__fixsfsi>
    9af2:	|  |      addq.l #4,sp
    9af4:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9af8:	|  |      movea.l 152(sp),a0
    9afc:	|  |      move.l 40(a0),132(sp)
    9b02:	|  |      movea.l 152(sp),a0
    9b06:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9b0c:	|  |      movea.l 1c9b2 <currentFloor>,a0
    9b12:	|  |      move.l 4(a0),d1
    9b16:	|  |      move.l 44(sp),d0
    9b1a:	|  |      lsl.l #3,d0
    9b1c:	|  |      movea.l d1,a0
    9b1e:	|  |      adda.l d0,a0
    9b20:	|  |      move.l (a0),124(sp)
    9b24:	|  |      movea.l 1c9b2 <currentFloor>,a0
    9b2a:	|  |      move.l 4(a0),d1
    9b2e:	|  |      move.l 44(sp),d0
    9b32:	|  |      lsl.l #3,d0
    9b34:	|  |      movea.l d1,a0
    9b36:	|  |      adda.l d0,a0
    9b38:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9b3e:	|  |      movea.l 1c9b2 <currentFloor>,a0
    9b44:	|  |      move.l 4(a0),d1
    9b48:	|  |      move.l 40(sp),d0
    9b4c:	|  |      lsl.l #3,d0
    9b4e:	|  |      movea.l d1,a0
    9b50:	|  |      adda.l d0,a0
    9b52:	|  |      move.l (a0),116(sp)
    9b56:	|  |      movea.l 1c9b2 <currentFloor>,a0
    9b5c:	|  |      move.l 4(a0),d1
    9b60:	|  |      move.l 40(sp),d0
    9b64:	|  |      lsl.l #3,d0
    9b66:	|  |      movea.l d1,a0
    9b68:	|  |      adda.l d0,a0
    9b6a:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9b70:	|  |      move.l 140(sp),d0
    9b74:	|  |      sub.l 132(sp),d0
    9b78:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9b7c:	|  |      move.l 136(sp),d0
    9b80:	|  |      sub.l 128(sp),d0
    9b84:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9b88:	|  |      move.l 116(sp),d0
    9b8c:	|  |      sub.l 124(sp),d0
    9b90:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9b94:	|  |      move.l 112(sp),d0
    9b98:	|  |      sub.l 120(sp),d0
    9b9c:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9ba0:	|  |      move.l 124(sp),d0
    9ba4:	|  |      sub.l 140(sp),d0
    9ba8:	|  |      move.l 104(sp),-(sp)
    9bac:	|  |      move.l d0,-(sp)
    9bae:	|  |      jsr 17b6e <__mulsi3>
    9bb4:	|  |      addq.l #8,sp
    9bb6:	|  |      move.l d0,d2
    9bb8:	|  |      move.l 120(sp),d0
    9bbc:	|  |      sub.l 136(sp),d0
    9bc0:	|  |      move.l 108(sp),-(sp)
    9bc4:	|  |      move.l d0,-(sp)
    9bc6:	|  |      jsr 17b6e <__mulsi3>
    9bcc:	|  |      addq.l #8,sp
    9bce:	|  |      move.l d2,d1
    9bd0:	|  |      sub.l d0,d1
    9bd2:	|  |      move.l d1,-(sp)
    9bd4:	|  |      jsr 175ac <__floatsidf>
    9bda:	|  |      addq.l #4,sp
    9bdc:	|  |      move.l d0,32(sp)
    9be0:	|  |      move.l d1,36(sp)
    9be4:	|  |      move.l 32(sp),88(sp)
    9bea:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9bf0:	|  |      move.l 96(sp),-(sp)
    9bf4:	|  |      move.l 112(sp),-(sp)
    9bf8:	|  |      jsr 17b6e <__mulsi3>
    9bfe:	|  |      addq.l #8,sp
    9c00:	|  |      move.l d0,d2
    9c02:	|  |      move.l 100(sp),-(sp)
    9c06:	|  |      move.l 108(sp),-(sp)
    9c0a:	|  |      jsr 17b6e <__mulsi3>
    9c10:	|  |      addq.l #8,sp
    9c12:	|  |      move.l d2,d1
    9c14:	|  |      sub.l d0,d1
    9c16:	|  |      move.l d1,-(sp)
    9c18:	|  |      jsr 175ac <__floatsidf>
    9c1e:	|  |      addq.l #4,sp
    9c20:	|  |      move.l d1,-(sp)
    9c22:	|  |      move.l d0,-(sp)
    9c24:	|  |      move.l 100(sp),-(sp)
    9c28:	|  |      move.l 100(sp),-(sp)
    9c2c:	|  |      jsr 17436 <__divdf3>
    9c32:	|  |      lea 16(sp),sp
    9c36:	|  |      move.l d0,24(sp)
    9c3a:	|  |      move.l d1,28(sp)
    9c3e:	|  |      move.l 24(sp),88(sp)
    9c44:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9c4a:	|  |      clr.l -(sp)
    9c4c:	|  |      clr.l -(sp)
    9c4e:	|  |      move.l 100(sp),-(sp)
    9c52:	|  |      move.l 100(sp),-(sp)
    9c56:	|  |      jsr 1770a <__gtdf2>
    9c5c:	|  |      lea 16(sp),sp
    9c60:	|  |      tst.l d0
    9c62:	|  |  /-- ble.w 9d3a <doBorderStuff+0x358>
    9c66:	|  |  |   clr.l -(sp)
    9c68:	|  |  |   move.l #1072693248,-(sp)
    9c6e:	|  |  |   move.l 100(sp),-(sp)
    9c72:	|  |  |   move.l 100(sp),-(sp)
    9c76:	|  |  |   jsr 177c4 <__ltdf2>
    9c7c:	|  |  |   lea 16(sp),sp
    9c80:	|  |  |   tst.l d0
    9c82:	|  |  +-- bge.w 9d3a <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9c86:	|  |  |   move.l 124(sp),-(sp)
    9c8a:	|  |  |   jsr 175ac <__floatsidf>
    9c90:	|  |  |   addq.l #4,sp
    9c92:	|  |  |   move.l d0,d2
    9c94:	|  |  |   move.l d1,d3
    9c96:	|  |  |   move.l 100(sp),-(sp)
    9c9a:	|  |  |   jsr 175ac <__floatsidf>
    9ca0:	|  |  |   addq.l #4,sp
    9ca2:	|  |  |   move.l 92(sp),-(sp)
    9ca6:	|  |  |   move.l 92(sp),-(sp)
    9caa:	|  |  |   move.l d1,-(sp)
    9cac:	|  |  |   move.l d0,-(sp)
    9cae:	|  |  |   jsr 1763c <__muldf3>
    9cb4:	|  |  |   lea 16(sp),sp
    9cb8:	|  |  |   move.l d1,-(sp)
    9cba:	|  |  |   move.l d0,-(sp)
    9cbc:	|  |  |   move.l d3,-(sp)
    9cbe:	|  |  |   move.l d2,-(sp)
    9cc0:	|  |  |   jsr 173d4 <__adddf3>
    9cc6:	|  |  |   lea 16(sp),sp
    9cca:	|  |  |   move.l d1,-(sp)
    9ccc:	|  |  |   move.l d0,-(sp)
    9cce:	|  |  |   jsr 17544 <__fixdfsi>
    9cd4:	|  |  |   addq.l #8,sp
    9cd6:	|  |  |   movea.l 152(sp),a0
    9cda:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9cde:	|  |  |   move.l 120(sp),-(sp)
    9ce2:	|  |  |   jsr 175ac <__floatsidf>
    9ce8:	|  |  |   addq.l #4,sp
    9cea:	|  |  |   move.l d0,d2
    9cec:	|  |  |   move.l d1,d3
    9cee:	|  |  |   move.l 96(sp),-(sp)
    9cf2:	|  |  |   jsr 175ac <__floatsidf>
    9cf8:	|  |  |   addq.l #4,sp
    9cfa:	|  |  |   move.l 92(sp),-(sp)
    9cfe:	|  |  |   move.l 92(sp),-(sp)
    9d02:	|  |  |   move.l d1,-(sp)
    9d04:	|  |  |   move.l d0,-(sp)
    9d06:	|  |  |   jsr 1763c <__muldf3>
    9d0c:	|  |  |   lea 16(sp),sp
    9d10:	|  |  |   move.l d1,-(sp)
    9d12:	|  |  |   move.l d0,-(sp)
    9d14:	|  |  |   move.l d3,-(sp)
    9d16:	|  |  |   move.l d2,-(sp)
    9d18:	|  |  |   jsr 173d4 <__adddf3>
    9d1e:	|  |  |   lea 16(sp),sp
    9d22:	|  |  |   move.l d1,-(sp)
    9d24:	|  |  |   move.l d0,-(sp)
    9d26:	|  |  |   jsr 17544 <__fixdfsi>
    9d2c:	|  |  |   addq.l #8,sp
    9d2e:	|  |  |   movea.l 152(sp),a0
    9d32:	|  |  |   move.l d0,52(a0)
    9d36:	|  +--|-- bra.w 9f92 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9d3a:	|  |  \-> move.l 140(sp),d0
    9d3e:	|  |      sub.l 124(sp),d0
    9d42:	|  |      move.l d0,84(sp)
    9d46:	|  |      move.l 140(sp),d0
    9d4a:	|  |      sub.l 116(sp),d0
    9d4e:	|  |      move.l d0,80(sp)
    9d52:	|  |      move.l 132(sp),d0
    9d56:	|  |      sub.l 124(sp),d0
    9d5a:	|  |      move.l d0,76(sp)
    9d5e:	|  |      move.l 132(sp),d0
    9d62:	|  |      sub.l 116(sp),d0
    9d66:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9d6a:	|  |      move.l 136(sp),d0
    9d6e:	|  |      sub.l 120(sp),d0
    9d72:	|  |      move.l d0,68(sp)
    9d76:	|  |      move.l 136(sp),d0
    9d7a:	|  |      sub.l 112(sp),d0
    9d7e:	|  |      move.l d0,64(sp)
    9d82:	|  |      move.l 128(sp),d0
    9d86:	|  |      sub.l 120(sp),d0
    9d8a:	|  |      move.l d0,60(sp)
    9d8e:	|  |      move.l 128(sp),d0
    9d92:	|  |      sub.l 112(sp),d0
    9d96:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9d9a:	|  |      move.l 84(sp),-(sp)
    9d9e:	|  |      move.l 88(sp),-(sp)
    9da2:	|  |      jsr 17b6e <__mulsi3>
    9da8:	|  |      addq.l #8,sp
    9daa:	|  |      move.l d0,84(sp)
    9dae:	|  |      move.l 80(sp),-(sp)
    9db2:	|  |      move.l 84(sp),-(sp)
    9db6:	|  |      jsr 17b6e <__mulsi3>
    9dbc:	|  |      addq.l #8,sp
    9dbe:	|  |      move.l d0,80(sp)
    9dc2:	|  |      move.l 76(sp),-(sp)
    9dc6:	|  |      move.l 80(sp),-(sp)
    9dca:	|  |      jsr 17b6e <__mulsi3>
    9dd0:	|  |      addq.l #8,sp
    9dd2:	|  |      move.l d0,76(sp)
    9dd6:	|  |      move.l 72(sp),-(sp)
    9dda:	|  |      move.l 76(sp),-(sp)
    9dde:	|  |      jsr 17b6e <__mulsi3>
    9de4:	|  |      addq.l #8,sp
    9de6:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9dea:	|  |      move.l 68(sp),-(sp)
    9dee:	|  |      move.l 72(sp),-(sp)
    9df2:	|  |      jsr 17b6e <__mulsi3>
    9df8:	|  |      addq.l #8,sp
    9dfa:	|  |      move.l d0,68(sp)
    9dfe:	|  |      move.l 64(sp),-(sp)
    9e02:	|  |      move.l 68(sp),-(sp)
    9e06:	|  |      jsr 17b6e <__mulsi3>
    9e0c:	|  |      addq.l #8,sp
    9e0e:	|  |      move.l d0,64(sp)
    9e12:	|  |      move.l 60(sp),-(sp)
    9e16:	|  |      move.l 64(sp),-(sp)
    9e1a:	|  |      jsr 17b6e <__mulsi3>
    9e20:	|  |      addq.l #8,sp
    9e22:	|  |      move.l d0,60(sp)
    9e26:	|  |      move.l 56(sp),-(sp)
    9e2a:	|  |      move.l 60(sp),-(sp)
    9e2e:	|  |      jsr 17b6e <__mulsi3>
    9e34:	|  |      addq.l #8,sp
    9e36:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9e3a:	|  |      move.l 84(sp),-(sp)
    9e3e:	|  |      jsr 175ac <__floatsidf>
    9e44:	|  |      addq.l #4,sp
    9e46:	|  |      move.l d0,d2
    9e48:	|  |      move.l d1,d3
    9e4a:	|  |      move.l 68(sp),-(sp)
    9e4e:	|  |      jsr 175ac <__floatsidf>
    9e54:	|  |      addq.l #4,sp
    9e56:	|  |      move.l d1,-(sp)
    9e58:	|  |      move.l d0,-(sp)
    9e5a:	|  |      move.l d3,-(sp)
    9e5c:	|  |      move.l d2,-(sp)
    9e5e:	|  |      jsr 173d4 <__adddf3>
    9e64:	|  |      lea 16(sp),sp
    9e68:	|  |      move.l d1,-(sp)
    9e6a:	|  |      move.l d0,-(sp)
    9e6c:	|  |      jsr 17b24 <sqrt>
    9e72:	|  |      addq.l #8,sp
    9e74:	|  |      move.l d0,d2
    9e76:	|  |      move.l d1,d3
    9e78:	|  |      move.l 76(sp),-(sp)
    9e7c:	|  |      jsr 175ac <__floatsidf>
    9e82:	|  |      addq.l #4,sp
    9e84:	|  |      move.l d0,d4
    9e86:	|  |      move.l d1,d5
    9e88:	|  |      move.l 60(sp),-(sp)
    9e8c:	|  |      jsr 175ac <__floatsidf>
    9e92:	|  |      addq.l #4,sp
    9e94:	|  |      move.l d1,-(sp)
    9e96:	|  |      move.l d0,-(sp)
    9e98:	|  |      move.l d5,-(sp)
    9e9a:	|  |      move.l d4,-(sp)
    9e9c:	|  |      jsr 173d4 <__adddf3>
    9ea2:	|  |      lea 16(sp),sp
    9ea6:	|  |      move.l d1,-(sp)
    9ea8:	|  |      move.l d0,-(sp)
    9eaa:	|  |      jsr 17b24 <sqrt>
    9eb0:	|  |      addq.l #8,sp
    9eb2:	|  |      move.l d1,-(sp)
    9eb4:	|  |      move.l d0,-(sp)
    9eb6:	|  |      move.l d3,-(sp)
    9eb8:	|  |      move.l d2,-(sp)
    9eba:	|  |      jsr 173d4 <__adddf3>
    9ec0:	|  |      lea 16(sp),sp
    9ec4:	|  |      move.l d0,d2
    9ec6:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9ec8:	|  |      move.l 80(sp),-(sp)
    9ecc:	|  |      jsr 175ac <__floatsidf>
    9ed2:	|  |      addq.l #4,sp
    9ed4:	|  |      move.l d0,d4
    9ed6:	|  |      move.l d1,d5
    9ed8:	|  |      move.l 64(sp),-(sp)
    9edc:	|  |      jsr 175ac <__floatsidf>
    9ee2:	|  |      addq.l #4,sp
    9ee4:	|  |      move.l d1,-(sp)
    9ee6:	|  |      move.l d0,-(sp)
    9ee8:	|  |      move.l d5,-(sp)
    9eea:	|  |      move.l d4,-(sp)
    9eec:	|  |      jsr 173d4 <__adddf3>
    9ef2:	|  |      lea 16(sp),sp
    9ef6:	|  |      move.l d1,-(sp)
    9ef8:	|  |      move.l d0,-(sp)
    9efa:	|  |      jsr 17b24 <sqrt>
    9f00:	|  |      addq.l #8,sp
    9f02:	|  |      move.l d0,d4
    9f04:	|  |      move.l d1,d5
    9f06:	|  |      move.l 72(sp),-(sp)
    9f0a:	|  |      jsr 175ac <__floatsidf>
    9f10:	|  |      addq.l #4,sp
    9f12:	|  |      move.l d0,d6
    9f14:	|  |      move.l d1,d7
    9f16:	|  |      move.l 56(sp),-(sp)
    9f1a:	|  |      jsr 175ac <__floatsidf>
    9f20:	|  |      addq.l #4,sp
    9f22:	|  |      move.l d1,-(sp)
    9f24:	|  |      move.l d0,-(sp)
    9f26:	|  |      move.l d7,-(sp)
    9f28:	|  |      move.l d6,-(sp)
    9f2a:	|  |      jsr 173d4 <__adddf3>
    9f30:	|  |      lea 16(sp),sp
    9f34:	|  |      move.l d1,-(sp)
    9f36:	|  |      move.l d0,-(sp)
    9f38:	|  |      jsr 17b24 <sqrt>
    9f3e:	|  |      addq.l #8,sp
    9f40:	|  |      move.l d1,-(sp)
    9f42:	|  |      move.l d0,-(sp)
    9f44:	|  |      move.l d5,-(sp)
    9f46:	|  |      move.l d4,-(sp)
    9f48:	|  |      jsr 173d4 <__adddf3>
    9f4e:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9f52:	|  |      move.l d1,-(sp)
    9f54:	|  |      move.l d0,-(sp)
    9f56:	|  |      move.l d3,-(sp)
    9f58:	|  |      move.l d2,-(sp)
    9f5a:	|  |      jsr 177c4 <__ltdf2>
    9f60:	|  |      lea 16(sp),sp
    9f64:	|  |      tst.l d0
    9f66:	|  |  /-- bge.s 9f7e <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9f68:	|  |  |   movea.l 152(sp),a0
    9f6c:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9f72:	|  |  |   movea.l 152(sp),a0
    9f76:	|  |  |   move.l 120(sp),52(a0)
    9f7c:	|  +--|-- bra.s 9f92 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9f7e:	|  |  \-> movea.l 152(sp),a0
    9f82:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9f88:	|  |      movea.l 152(sp),a0
    9f8c:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9f92:	|  \----> movea.l 152(sp),a0
    9f96:	|         move.l 52(a0),d0
    9f9a:	|         move.l d0,-(sp)
    9f9c:	|         jsr 175ec <__floatsisf>
    9fa2:	|         addq.l #4,sp
    9fa4:	|         move.l d0,d1
    9fa6:	|         movea.l 152(sp),a0
    9faa:	|         move.l 4(a0),d0
    9fae:	|         move.l d0,-(sp)
    9fb0:	|         move.l d1,-(sp)
    9fb2:	|         jsr 178e0 <__subsf3>
    9fb8:	|         addq.l #8,sp
    9fba:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9fbe:	|         movea.l 152(sp),a0
    9fc2:	|         move.l (a0),d2
    9fc4:	|         movea.l 152(sp),a0
    9fc8:	|         move.l 48(a0),d0
    9fcc:	|         move.l d0,-(sp)
    9fce:	|         jsr 175ec <__floatsisf>
    9fd4:	|         addq.l #4,sp
    9fd6:	|         move.l d0,-(sp)
    9fd8:	|         move.l d2,-(sp)
    9fda:	|         jsr 178e0 <__subsf3>
    9fe0:	|         addq.l #8,sp
    9fe2:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9fe6:	|         clr.l -(sp)
    9fe8:	|         move.l 52(sp),-(sp)
    9fec:	|         jsr 17848 <__nesf2>
    9ff2:	|         addq.l #8,sp
    9ff4:	|         tst.l d0
    9ff6:	|     /-- bne.s a00a <doBorderStuff+0x628>
    9ff8:	|     |   clr.l -(sp)
    9ffa:	|     |   move.l 56(sp),-(sp)
    9ffe:	|     |   jsr 17848 <__nesf2>
    a004:	|     |   addq.l #8,sp
    a006:	|     |   tst.l d0
    a008:	|  /--|-- beq.s a080 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a00a:	|  |  \-> move.l 52(sp),d0
    a00e:	|  |      move.l d0,-(sp)
    a010:	|  |      move.l d0,-(sp)
    a012:	|  |      jsr 1739e <__addsf3>
    a018:	|  |      addq.l #8,sp
    a01a:	|  |      move.l d0,-(sp)
    a01c:	|  |      move.l 52(sp),-(sp)
    a020:	|  |      jsr 17974 <atan2f>
    a026:	|  |      addq.l #8,sp
    a028:	|  |      move.l d0,-(sp)
    a02a:	|  |      jsr 17504 <__extendsfdf2>
    a030:	|  |      addq.l #4,sp
    a032:	|  |      move.l #-1540411785,-(sp)
    a038:	|  |      move.l #1078765033,-(sp)
    a03e:	|  |      move.l d1,-(sp)
    a040:	|  |      move.l d0,-(sp)
    a042:	|  |      jsr 1763c <__muldf3>
    a048:	|  |      lea 16(sp),sp
    a04c:	|  |      clr.l -(sp)
    a04e:	|  |      move.l #1080459264,-(sp)
    a054:	|  |      move.l d1,-(sp)
    a056:	|  |      move.l d0,-(sp)
    a058:	|  |      jsr 173d4 <__adddf3>
    a05e:	|  |      lea 16(sp),sp
    a062:	|  |      move.l d1,-(sp)
    a064:	|  |      move.l d0,-(sp)
    a066:	|  |      jsr 17544 <__fixdfsi>
    a06c:	|  |      addq.l #8,sp
    a06e:	|  |      movea.l 152(sp),a0
    a072:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a076:	|  |      movea.l 152(sp),a0
    a07a:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a080:	|  \----> pea 1 <_start+0x1>
    a084:	|         move.l 156(sp),-(sp)
    a088:	|         jsr 821e <setFrames>
    a08e:	|         addq.l #8,sp
    return TRUE;
    a090:	|         moveq #1,d0
}
    a092:	\-------> movem.l (sp)+,d2-d7
    a096:	          lea 124(sp),sp
    a09a:	          rts

0000a09c <drawPeople>:

void drawPeople () {
    a09c:	                   lea -24(sp),sp
    a0a0:	                   move.l d2,-(sp)

	shufflePeople ();
    a0a2:	                   jsr bb38 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a0a8:	                   move.l 1c8fa <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a0b0:	                   clr.l 20(sp)
	overRegion = NULL;
    a0b4:	                   clr.l 1c9aa <overRegion>

	while (thisPerson) {
    a0ba:	   /-------------- bra.w a66c <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a0be:	/--|-------------> movea.l 24(sp),a0
    a0c2:	|  |               move.w 104(a0),d0
    a0c6:	|  |  /----------- beq.w a420 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a0ca:	|  |  |            movea.l 24(sp),a0
    a0ce:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a0d4:	|  |  |            movea.l 24(sp),a0
    a0d8:	|  |  |            move.l 76(a0),d0
    a0dc:	|  |  |            cmp.l 20(sp),d0
    a0e0:	|  |  |  /-------- beq.w a2ae <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a0e4:	|  |  |  |         movea.l 24(sp),a0
    a0e8:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a0ec:	|  |  |  |         movea.l 24(sp),a0
    a0f0:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a0f6:	|  |  |  |         movea.l 24(sp),a0
    a0fa:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a0fe:	|  |  |  |         movea.l 20(sp),a0
    a102:	|  |  |  |         movea.l 4(a0),a0
    a106:	|  |  |  |         move.l 4(a0),d0
    a10a:	|  |  |  |         movea.l 24(sp),a0
    a10e:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a112:	|  |  |  |         movea.l 20(sp),a0
    a116:	|  |  |  |         movea.l 4(a0),a1
    a11a:	|  |  |  |         movea.l 24(sp),a0
    a11e:	|  |  |  |         move.l 84(a0),d0
    a122:	|  |  |  |         move.l d0,d1
    a124:	|  |  |  |         move.l d1,d0
    a126:	|  |  |  |         add.l d0,d0
    a128:	|  |  |  |         add.l d1,d0
    a12a:	|  |  |  |         add.l d0,d0
    a12c:	|  |  |  |         add.l d0,d0
    a12e:	|  |  |  |         lea (0,a1,d0.l),a0
    a132:	|  |  |  |         move.l 8(a0),d0
    a136:	|  |  |  |     /-- ble.w a1d8 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a13a:	|  |  |  |     |   movea.l 20(sp),a0
    a13e:	|  |  |  |     |   movea.l 4(a0),a1
    a142:	|  |  |  |     |   movea.l 24(sp),a0
    a146:	|  |  |  |     |   move.l 84(a0),d0
    a14a:	|  |  |  |     |   move.l d0,d1
    a14c:	|  |  |  |     |   move.l d1,d0
    a14e:	|  |  |  |     |   add.l d0,d0
    a150:	|  |  |  |     |   add.l d1,d0
    a152:	|  |  |  |     |   add.l d0,d0
    a154:	|  |  |  |     |   add.l d0,d0
    a156:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a15a:	|  |  |  |     |   move.l 8(a0),d0
    a15e:	|  |  |  |     |   clr.l -(sp)
    a160:	|  |  |  |     |   move.l d0,-(sp)
    a162:	|  |  |  |     |   jsr d1bc <startSound>
    a168:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a16a:	|  |  |  |     |   movea.l 24(sp),a0
    a16e:	|  |  |  |     |   move.l 84(a0),d0
    a172:	|  |  |  |     |   addq.l #1,d0
    a174:	|  |  |  |     |   movea.l 24(sp),a0
    a178:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a17c:	|  |  |  |     |   movea.l 24(sp),a0
    a180:	|  |  |  |     |   move.l 84(a0),d0
    a184:	|  |  |  |     |   movea.l 24(sp),a0
    a188:	|  |  |  |     |   movea.l 72(a0),a0
    a18c:	|  |  |  |     |   move.l 8(a0),d1
    a190:	|  |  |  |     |   move.l d1,-(sp)
    a192:	|  |  |  |     |   move.l d0,-(sp)
    a194:	|  |  |  |     |   jsr 17c1a <__modsi3>
    a19a:	|  |  |  |     |   addq.l #8,sp
    a19c:	|  |  |  |     |   movea.l 24(sp),a0
    a1a0:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a1a4:	|  |  |  |     |   movea.l 24(sp),a0
    a1a8:	|  |  |  |     |   movea.l 72(a0),a0
    a1ac:	|  |  |  |     |   movea.l 4(a0),a1
    a1b0:	|  |  |  |     |   movea.l 24(sp),a0
    a1b4:	|  |  |  |     |   move.l 84(a0),d0
    a1b8:	|  |  |  |     |   move.l d0,d1
    a1ba:	|  |  |  |     |   move.l d1,d0
    a1bc:	|  |  |  |     |   add.l d0,d0
    a1be:	|  |  |  |     |   add.l d1,d0
    a1c0:	|  |  |  |     |   add.l d0,d0
    a1c2:	|  |  |  |     |   add.l d0,d0
    a1c4:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a1c8:	|  |  |  |     |   move.l 4(a0),d0
    a1cc:	|  |  |  |     |   movea.l 24(sp),a0
    a1d0:	|  |  |  |     |   move.l d0,88(a0)
    a1d4:	|  |  |  |  /--|-- bra.w a316 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a1d8:	|  |  |  |  |  \-> movea.l 20(sp),a0
    a1dc:	|  |  |  |  |      movea.l 4(a0),a1
    a1e0:	|  |  |  |  |      movea.l 24(sp),a0
    a1e4:	|  |  |  |  |      move.l 84(a0),d0
    a1e8:	|  |  |  |  |      move.l d0,d1
    a1ea:	|  |  |  |  |      move.l d1,d0
    a1ec:	|  |  |  |  |      add.l d0,d0
    a1ee:	|  |  |  |  |      add.l d1,d0
    a1f0:	|  |  |  |  |      add.l d0,d0
    a1f2:	|  |  |  |  |      add.l d0,d0
    a1f4:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a1f8:	|  |  |  |  |      move.l 8(a0),d0
    a1fc:	|  |  |  |  +----- beq.w a316 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a200:	|  |  |  |  |      movea.l 1c866 <noStack>,a1
    a206:	|  |  |  |  |      movea.l 20(sp),a0
    a20a:	|  |  |  |  |      move.l 4(a0),d2
    a20e:	|  |  |  |  |      movea.l 24(sp),a0
    a212:	|  |  |  |  |      move.l 84(a0),d0
    a216:	|  |  |  |  |      move.l d0,d1
    a218:	|  |  |  |  |      move.l d1,d0
    a21a:	|  |  |  |  |      add.l d0,d0
    a21c:	|  |  |  |  |      add.l d1,d0
    a21e:	|  |  |  |  |      add.l d0,d0
    a220:	|  |  |  |  |      add.l d0,d0
    a222:	|  |  |  |  |      movea.l d2,a0
    a224:	|  |  |  |  |      adda.l d0,a0
    a226:	|  |  |  |  |      move.l 8(a0),d0
    a22a:	|  |  |  |  |      neg.l d0
    a22c:	|  |  |  |  |      pea 1 <_start+0x1>
    a230:	|  |  |  |  |      move.l a1,-(sp)
    a232:	|  |  |  |  |      clr.l -(sp)
    a234:	|  |  |  |  |      clr.l -(sp)
    a236:	|  |  |  |  |      move.l d0,-(sp)
    a238:	|  |  |  |  |      jsr 6b82 <startNewFunctionNum>
    a23e:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a242:	|  |  |  |  |      movea.l 24(sp),a0
    a246:	|  |  |  |  |      move.l 84(a0),d0
    a24a:	|  |  |  |  |      addq.l #1,d0
    a24c:	|  |  |  |  |      movea.l 24(sp),a0
    a250:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a254:	|  |  |  |  |      movea.l 24(sp),a0
    a258:	|  |  |  |  |      move.l 84(a0),d0
    a25c:	|  |  |  |  |      movea.l 24(sp),a0
    a260:	|  |  |  |  |      movea.l 72(a0),a0
    a264:	|  |  |  |  |      move.l 8(a0),d1
    a268:	|  |  |  |  |      move.l d1,-(sp)
    a26a:	|  |  |  |  |      move.l d0,-(sp)
    a26c:	|  |  |  |  |      jsr 17c1a <__modsi3>
    a272:	|  |  |  |  |      addq.l #8,sp
    a274:	|  |  |  |  |      movea.l 24(sp),a0
    a278:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a27c:	|  |  |  |  |      movea.l 24(sp),a0
    a280:	|  |  |  |  |      movea.l 72(a0),a0
    a284:	|  |  |  |  |      movea.l 4(a0),a1
    a288:	|  |  |  |  |      movea.l 24(sp),a0
    a28c:	|  |  |  |  |      move.l 84(a0),d0
    a290:	|  |  |  |  |      move.l d0,d1
    a292:	|  |  |  |  |      move.l d1,d0
    a294:	|  |  |  |  |      add.l d0,d0
    a296:	|  |  |  |  |      add.l d1,d0
    a298:	|  |  |  |  |      add.l d0,d0
    a29a:	|  |  |  |  |      add.l d0,d0
    a29c:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a2a0:	|  |  |  |  |      move.l 4(a0),d0
    a2a4:	|  |  |  |  |      movea.l 24(sp),a0
    a2a8:	|  |  |  |  |      move.l d0,88(a0)
    a2ac:	|  |  |  |  +----- bra.s a316 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a2ae:	|  |  |  \--|----> movea.l 24(sp),a0
    a2b2:	|  |  |     |      move.l (a0),d0
    a2b4:	|  |  |     |      movea.l 24(sp),a0
    a2b8:	|  |  |     |      move.l 8(a0),d1
    a2bc:	|  |  |     |      move.l d1,-(sp)
    a2be:	|  |  |     |      move.l d0,-(sp)
    a2c0:	|  |  |     |      jsr 174ce <__eqsf2>
    a2c6:	|  |  |     |      addq.l #8,sp
    a2c8:	|  |  |     |      tst.l d0
    a2ca:	|  |  |     |  /-- bne.s a30e <drawPeople+0x272>
    a2cc:	|  |  |     |  |   movea.l 24(sp),a0
    a2d0:	|  |  |     |  |   move.l 4(a0),d0
    a2d4:	|  |  |     |  |   movea.l 24(sp),a0
    a2d8:	|  |  |     |  |   move.l 12(a0),d1
    a2dc:	|  |  |     |  |   move.l d1,-(sp)
    a2de:	|  |  |     |  |   move.l d0,-(sp)
    a2e0:	|  |  |     |  |   jsr 174ce <__eqsf2>
    a2e6:	|  |  |     |  |   addq.l #8,sp
    a2e8:	|  |  |     |  |   tst.l d0
    a2ea:	|  |  |     |  +-- bne.s a30e <drawPeople+0x272>
    a2ec:	|  |  |     |  |   movea.l 20(sp),a0
    a2f0:	|  |  |     |  |   move.l 8(a0),d0
    a2f4:	|  |  |     |  |   moveq #1,d1
    a2f6:	|  |  |     |  |   cmp.l d0,d1
    a2f8:	|  |  |     |  +-- bne.s a30e <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a2fa:	|  |  |     |  |   movea.l 24(sp),a0
    a2fe:	|  |  |     |  |   move.l 16(a0),d0
    a302:	|  |  |     |  |   addq.l #1,d0
    a304:	|  |  |     |  |   movea.l 24(sp),a0
    a308:	|  |  |     |  |   move.l d0,16(a0)
    a30c:	|  |  |     +--|-- bra.s a316 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a30e:	|  |  |     |  \-> movea.l 24(sp),a0
    a312:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a316:	|  |  |     \----> movea.l 24(sp),a0
    a31a:	|  |  |            move.l (a0),d0
    a31c:	|  |  |            movea.l 24(sp),a0
    a320:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a324:	|  |  |            movea.l 24(sp),a0
    a328:	|  |  |            move.l 4(a0),d0
    a32c:	|  |  |            movea.l 24(sp),a0
    a330:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a334:	|  |  |            movea.l 20(sp),a0
    a338:	|  |  |            movea.l 4(a0),a1
    a33c:	|  |  |            movea.l 24(sp),a0
    a340:	|  |  |            move.l 84(a0),d0
    a344:	|  |  |            move.l d0,d1
    a346:	|  |  |            move.l d1,d0
    a348:	|  |  |            add.l d0,d0
    a34a:	|  |  |            add.l d1,d0
    a34c:	|  |  |            add.l d0,d0
    a34e:	|  |  |            add.l d0,d0
    a350:	|  |  |            lea (0,a1,d0.l),a0
    a354:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a358:	|  |  |            move.l 8(sp),d0
    a35c:	|  |  |            add.l d0,d0
    a35e:	|  |  |            subx.l d0,d0
    a360:	|  |  |            neg.l d0
    a362:	|  |  |            move.b d0,d0
    a364:	|  |  |            move.b d0,d0
    a366:	|  |  |            andi.l #255,d0
    a36c:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a370:	|  |  |            move.l 8(sp),-(sp)
    a374:	|  |  |            jsr 9270 <TF_abs>
    a37a:	|  |  |            addq.l #4,sp
    a37c:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a380:	|  |  |            movea.l 20(sp),a0
    a384:	|  |  |            movea.l (a0),a0
    a386:	|  |  |            move.l 8(a0),d0
    a38a:	|  |  |            cmp.l 12(sp),d0
    a38e:	|  |  |        /-- bgt.s a39e <drawPeople+0x302>
				fNum = 0;
    a390:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a394:	|  |  |        |   moveq #2,d0
    a396:	|  |  |        |   sub.l 16(sp),d0
    a39a:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a39e:	|  |  |        \-> moveq #2,d1
    a3a0:	|  |  |            cmp.l 16(sp),d1
    a3a4:	|  |  +----------- beq.s a420 <drawPeople+0x384>
				BOOL r = FALSE;
    a3a6:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a3aa:	|  |  |            move.l 16(sp),d0
    a3ae:	|  |  |            movea.w d0,a0
    a3b0:	|  |  |            movea.l 20(sp),a1
    a3b4:	|  |  |            movea.l (a1),a1
    a3b6:	|  |  |            movea.l 16(a1),a1
    a3ba:	|  |  |            move.l 12(sp),d1
    a3be:	|  |  |            move.l d1,d0
    a3c0:	|  |  |            lsl.l #3,d0
    a3c2:	|  |  |            sub.l d1,d0
    a3c4:	|  |  |            add.l d0,d0
    a3c6:	|  |  |            add.l d0,d0
    a3c8:	|  |  |            add.l a1,d0
    a3ca:	|  |  |            move.l a0,-(sp)
    a3cc:	|  |  |            move.l 28(sp),-(sp)
    a3d0:	|  |  |            move.l d0,-(sp)
    a3d2:	|  |  |            jsr 9006 <scaleSprite>
    a3d8:	|  |  |            lea 12(sp),sp
    a3dc:	|  |  |            move.w d0,6(sp)
				if (r) {
    a3e0:	|  |  +----------- beq.s a420 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a3e2:	|  |  |            movea.l 24(sp),a0
    a3e6:	|  |  |            movea.l 114(a0),a0
    a3ea:	|  |  |            movea.l (a0),a0
    a3ec:	|  |  |            move.b (a0),d0
    a3ee:	|  |  +----------- beq.s a420 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a3f0:	|  |  |            move.l 1c91a <personRegion+0x1c>,d1
    a3f6:	|  |  |            movea.l 24(sp),a0
    a3fa:	|  |  |            move.l 114(a0),d0
    a3fe:	|  |  |            cmp.l d1,d0
    a400:	|  |  |        /-- beq.s a408 <drawPeople+0x36c>
    a402:	|  |  |        |   clr.l 1c85e <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a408:	|  |  |        \-> movea.l 24(sp),a0
    a40c:	|  |  |            move.l 114(a0),d0
    a410:	|  |  |            move.l d0,1c91a <personRegion+0x1c>
						overRegion = & personRegion;
    a416:	|  |  |            move.l #116990,1c9aa <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a420:	|  |  \----------> movea.l 24(sp),a0
    a424:	|  |               move.l 88(a0),d0
    a428:	|  |               subq.l #1,d0
    a42a:	|  |               movea.l 24(sp),a0
    a42e:	|  |               move.l d0,88(a0)
    a432:	|  |               movea.l 24(sp),a0
    a436:	|  |               move.l 88(a0),d0
    a43a:	|  |        /----- bne.w a662 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a43e:	|  |        |      movea.l 24(sp),a0
    a442:	|  |        |      move.l 84(a0),d0
    a446:	|  |        |      addq.l #1,d0
    a448:	|  |        |      movea.l 24(sp),a0
    a44c:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a450:	|  |        |      movea.l 24(sp),a0
    a454:	|  |        |      move.l 84(a0),d0
    a458:	|  |        |      movea.l 24(sp),a0
    a45c:	|  |        |      movea.l 72(a0),a0
    a460:	|  |        |      move.l 8(a0),d1
    a464:	|  |        |      move.l d1,-(sp)
    a466:	|  |        |      move.l d0,-(sp)
    a468:	|  |        |      jsr 17c1a <__modsi3>
    a46e:	|  |        |      addq.l #8,sp
    a470:	|  |        |      movea.l 24(sp),a0
    a474:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a478:	|  |        |      movea.l 24(sp),a0
    a47c:	|  |        |      movea.l 72(a0),a0
    a480:	|  |        |      movea.l 4(a0),a1
    a484:	|  |        |      movea.l 24(sp),a0
    a488:	|  |        |      move.l 84(a0),d0
    a48c:	|  |        |      move.l d0,d1
    a48e:	|  |        |      move.l d1,d0
    a490:	|  |        |      add.l d0,d0
    a492:	|  |        |      add.l d1,d0
    a494:	|  |        |      add.l d0,d0
    a496:	|  |        |      add.l d0,d0
    a498:	|  |        |      lea (0,a1,d0.l),a0
    a49c:	|  |        |      move.l 4(a0),d0
    a4a0:	|  |        |      movea.l 24(sp),a0
    a4a4:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a4a8:	|  |        |      movea.l 24(sp),a0
    a4ac:	|  |        |      move.w 104(a0),d0
    a4b0:	|  |        +----- beq.w a662 <drawPeople+0x5c6>
    a4b4:	|  |        |      tst.l 20(sp)
    a4b8:	|  |        +----- beq.w a662 <drawPeople+0x5c6>
    a4bc:	|  |        |      movea.l 20(sp),a0
    a4c0:	|  |        |      move.l 4(a0),d0
    a4c4:	|  |        +----- beq.w a662 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a4c8:	|  |        |      movea.l 20(sp),a0
    a4cc:	|  |        |      movea.l 4(a0),a1
    a4d0:	|  |        |      movea.l 24(sp),a0
    a4d4:	|  |        |      move.l 84(a0),d0
    a4d8:	|  |        |      move.l d0,d1
    a4da:	|  |        |      move.l d1,d0
    a4dc:	|  |        |      add.l d0,d0
    a4de:	|  |        |      add.l d1,d0
    a4e0:	|  |        |      add.l d0,d0
    a4e2:	|  |        |      add.l d0,d0
    a4e4:	|  |        |      lea (0,a1,d0.l),a0
    a4e8:	|  |        |      move.l 8(a0),d0
    a4ec:	|  |        |  /-- ble.w a58e <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a4f0:	|  |        |  |   movea.l 20(sp),a0
    a4f4:	|  |        |  |   movea.l 4(a0),a1
    a4f8:	|  |        |  |   movea.l 24(sp),a0
    a4fc:	|  |        |  |   move.l 84(a0),d0
    a500:	|  |        |  |   move.l d0,d1
    a502:	|  |        |  |   move.l d1,d0
    a504:	|  |        |  |   add.l d0,d0
    a506:	|  |        |  |   add.l d1,d0
    a508:	|  |        |  |   add.l d0,d0
    a50a:	|  |        |  |   add.l d0,d0
    a50c:	|  |        |  |   lea (0,a1,d0.l),a0
    a510:	|  |        |  |   move.l 8(a0),d0
    a514:	|  |        |  |   clr.l -(sp)
    a516:	|  |        |  |   move.l d0,-(sp)
    a518:	|  |        |  |   jsr d1bc <startSound>
    a51e:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a520:	|  |        |  |   movea.l 24(sp),a0
    a524:	|  |        |  |   move.l 84(a0),d0
    a528:	|  |        |  |   addq.l #1,d0
    a52a:	|  |        |  |   movea.l 24(sp),a0
    a52e:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a532:	|  |        |  |   movea.l 24(sp),a0
    a536:	|  |        |  |   move.l 84(a0),d0
    a53a:	|  |        |  |   movea.l 24(sp),a0
    a53e:	|  |        |  |   movea.l 72(a0),a0
    a542:	|  |        |  |   move.l 8(a0),d1
    a546:	|  |        |  |   move.l d1,-(sp)
    a548:	|  |        |  |   move.l d0,-(sp)
    a54a:	|  |        |  |   jsr 17c1a <__modsi3>
    a550:	|  |        |  |   addq.l #8,sp
    a552:	|  |        |  |   movea.l 24(sp),a0
    a556:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a55a:	|  |        |  |   movea.l 24(sp),a0
    a55e:	|  |        |  |   movea.l 72(a0),a0
    a562:	|  |        |  |   movea.l 4(a0),a1
    a566:	|  |        |  |   movea.l 24(sp),a0
    a56a:	|  |        |  |   move.l 84(a0),d0
    a56e:	|  |        |  |   move.l d0,d1
    a570:	|  |        |  |   move.l d1,d0
    a572:	|  |        |  |   add.l d0,d0
    a574:	|  |        |  |   add.l d1,d0
    a576:	|  |        |  |   add.l d0,d0
    a578:	|  |        |  |   add.l d0,d0
    a57a:	|  |        |  |   lea (0,a1,d0.l),a0
    a57e:	|  |        |  |   move.l 4(a0),d0
    a582:	|  |        |  |   movea.l 24(sp),a0
    a586:	|  |        |  |   move.l d0,88(a0)
    a58a:	|  |        +--|-- bra.w a662 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a58e:	|  |        |  \-> movea.l 20(sp),a0
    a592:	|  |        |      movea.l 4(a0),a1
    a596:	|  |        |      movea.l 24(sp),a0
    a59a:	|  |        |      move.l 84(a0),d0
    a59e:	|  |        |      move.l d0,d1
    a5a0:	|  |        |      move.l d1,d0
    a5a2:	|  |        |      add.l d0,d0
    a5a4:	|  |        |      add.l d1,d0
    a5a6:	|  |        |      add.l d0,d0
    a5a8:	|  |        |      add.l d0,d0
    a5aa:	|  |        |      lea (0,a1,d0.l),a0
    a5ae:	|  |        |      move.l 8(a0),d0
    a5b2:	|  |        +----- beq.w a662 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a5b6:	|  |        |      movea.l 1c866 <noStack>,a1
    a5bc:	|  |        |      movea.l 20(sp),a0
    a5c0:	|  |        |      move.l 4(a0),d2
    a5c4:	|  |        |      movea.l 24(sp),a0
    a5c8:	|  |        |      move.l 84(a0),d0
    a5cc:	|  |        |      move.l d0,d1
    a5ce:	|  |        |      move.l d1,d0
    a5d0:	|  |        |      add.l d0,d0
    a5d2:	|  |        |      add.l d1,d0
    a5d4:	|  |        |      add.l d0,d0
    a5d6:	|  |        |      add.l d0,d0
    a5d8:	|  |        |      movea.l d2,a0
    a5da:	|  |        |      adda.l d0,a0
    a5dc:	|  |        |      move.l 8(a0),d0
    a5e0:	|  |        |      neg.l d0
    a5e2:	|  |        |      pea 1 <_start+0x1>
    a5e6:	|  |        |      move.l a1,-(sp)
    a5e8:	|  |        |      clr.l -(sp)
    a5ea:	|  |        |      clr.l -(sp)
    a5ec:	|  |        |      move.l d0,-(sp)
    a5ee:	|  |        |      jsr 6b82 <startNewFunctionNum>
    a5f4:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a5f8:	|  |        |      movea.l 24(sp),a0
    a5fc:	|  |        |      move.l 84(a0),d0
    a600:	|  |        |      addq.l #1,d0
    a602:	|  |        |      movea.l 24(sp),a0
    a606:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a60a:	|  |        |      movea.l 24(sp),a0
    a60e:	|  |        |      move.l 84(a0),d0
    a612:	|  |        |      movea.l 24(sp),a0
    a616:	|  |        |      movea.l 72(a0),a0
    a61a:	|  |        |      move.l 8(a0),d1
    a61e:	|  |        |      move.l d1,-(sp)
    a620:	|  |        |      move.l d0,-(sp)
    a622:	|  |        |      jsr 17c1a <__modsi3>
    a628:	|  |        |      addq.l #8,sp
    a62a:	|  |        |      movea.l 24(sp),a0
    a62e:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a632:	|  |        |      movea.l 24(sp),a0
    a636:	|  |        |      movea.l 72(a0),a0
    a63a:	|  |        |      movea.l 4(a0),a1
    a63e:	|  |        |      movea.l 24(sp),a0
    a642:	|  |        |      move.l 84(a0),d0
    a646:	|  |        |      move.l d0,d1
    a648:	|  |        |      move.l d1,d0
    a64a:	|  |        |      add.l d0,d0
    a64c:	|  |        |      add.l d1,d0
    a64e:	|  |        |      add.l d0,d0
    a650:	|  |        |      add.l d0,d0
    a652:	|  |        |      lea (0,a1,d0.l),a0
    a656:	|  |        |      move.l 4(a0),d0
    a65a:	|  |        |      movea.l 24(sp),a0
    a65e:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a662:	|  |        \----> movea.l 24(sp),a0
    a666:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a66c:	|  \-------------> tst.l 24(sp)
    a670:	\----------------- bne.w a0be <drawPeople+0x22>
	}
}
    a674:	                   nop
    a676:	                   nop
    a678:	                   move.l (sp)+,d2
    a67a:	                   lea 24(sp),sp
    a67e:	                   rts

0000a680 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a680:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a682:	          move.l 1c8fa <allPeople>,(sp)
	while (thisPerson) {
    a688:	      /-- bra.s a6a0 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a68a:	/-----|-> movea.l (sp),a0
    a68c:	|     |   movea.l 114(a0),a0
    a690:	|     |   move.l 4(a0),d0
    a694:	|     |   cmp.l 8(sp),d0
    a698:	|  /--|-- beq.s a6a6 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a69a:	|  |  |   movea.l (sp),a0
    a69c:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a6a0:	|  |  \-> tst.l (sp)
    a6a2:	\--|----- bne.s a68a <findPerson+0xa>
    a6a4:	   |  /-- bra.s a6a8 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a6a6:	   \--|-> nop
	}
	return thisPerson;
    a6a8:	      \-> move.l (sp),d0
}
    a6aa:	          addq.l #4,sp
    a6ac:	          rts

0000a6ae <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a6ae:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a6b0:	       move.l 12(sp),-(sp)
    a6b4:	       jsr a680 <findPerson>
    a6ba:	       addq.l #4,sp
    a6bc:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a6be:	   /-- bne.s a6c4 <floatCharacter+0x16>
    a6c0:	   |   clr.w d0
    a6c2:	/--|-- bra.s a6ce <floatCharacter+0x20>
	moveMe -> floaty = f;
    a6c4:	|  \-> movea.l (sp),a0
    a6c6:	|      move.l 8(sp),24(a0)
	return TRUE;
    a6cc:	|      moveq #1,d0
}
    a6ce:	\----> addq.l #4,sp
    a6d0:	       rts

0000a6d2 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a6d2:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a6d4:	          tst.l 8(sp)
    a6d8:	      /-- bne.s a6e6 <forceWalkingPerson+0x14>
    a6da:	      |   tst.l 12(sp)
    a6de:	      +-- bne.s a6e6 <forceWalkingPerson+0x14>
    a6e0:	      |   clr.w d0
    a6e2:	/-----|-- bra.w a778 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a6e6:	|     \-> move.l 16(sp),-(sp)
    a6ea:	|         jsr a680 <findPerson>
    a6f0:	|         addq.l #4,sp
    a6f2:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a6f4:	|     /-- bne.s a6fa <forceWalkingPerson+0x28>
    a6f6:	|     |   clr.w d0
    a6f8:	+-----|-- bra.s a778 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a6fa:	|     \-> movea.l (sp),a0
    a6fc:	|         move.l 68(a0),d0
    a700:	|     /-- beq.s a712 <forceWalkingPerson+0x40>
    a702:	|     |   movea.l (sp),a0
    a704:	|     |   move.l 68(a0),d0
    a708:	|     |   move.l d0,-(sp)
    a70a:	|     |   jsr 47c6 <abortFunction>
    a710:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a712:	|     \-> movea.l (sp),a0
    a714:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a71a:	|         movea.l (sp),a0
    a71c:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a720:	|         movea.l (sp),a0
    a722:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a728:	|         movea.l (sp),a0
    a72a:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a730:	|         movea.l (sp),a0
    a732:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a738:	|         movea.l (sp),a0
    a73a:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a73e:	|         movea.l (sp),a0
    a740:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a744:	|         move.l (sp),-(sp)
    a746:	|         jsr 99e2 <doBorderStuff>
    a74c:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a74e:	|         pea 1 <_start+0x1>
    a752:	|         move.l 4(sp),-(sp)
    a756:	|         jsr bf42 <walkMe>
    a75c:	|         addq.l #8,sp
    a75e:	|         tst.w d0
    a760:	|     /-- bne.s a76a <forceWalkingPerson+0x98>
    a762:	|     |   movea.l (sp),a0
    a764:	|     |   move.w 66(a0),d0
    a768:	|  /--|-- beq.s a776 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a76a:	|  |  \-> movea.l (sp),a0
    a76c:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a772:	|  |      moveq #1,d0
    a774:	+--|----- bra.s a778 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a776:	|  \----> clr.w d0
    }
}
    a778:	\-------> addq.l #4,sp
    a77a:	          rts

0000a77c <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a77c:	                lea -56(sp),sp
    a780:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a782:	                move.l #320,56(sp)
    a78a:	                move.l #200,52(sp)
    a792:	                moveq #-1,d0
    a794:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a798:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a7a0:	                clr.l 44(sp)
    a7a4:	   /----------- bra.w a97c <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a7a8:	/--|----------> movea.l 1c9b2 <currentFloor>,a0
    a7ae:	|  |            move.l 12(a0),d1
    a7b2:	|  |            move.l 44(sp),d0
    a7b6:	|  |            lsl.l #3,d0
    a7b8:	|  |            movea.l d1,a0
    a7ba:	|  |            adda.l d0,a0
    a7bc:	|  |            move.l (a0),d0
    a7be:	|  |            move.l d0,d1
    a7c0:	|  |            subq.l #1,d1
    a7c2:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a7c6:	|  |            clr.l 40(sp)
    a7ca:	|  |     /----- bra.w a95a <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a7ce:	|  |  /--|----> movea.l 1c9b2 <currentFloor>,a0
    a7d4:	|  |  |  |      move.l 4(a0),d1
    a7d8:	|  |  |  |      movea.l 1c9b2 <currentFloor>,a0
    a7de:	|  |  |  |      movea.l 12(a0),a0
    a7e2:	|  |  |  |      move.l 44(sp),d0
    a7e6:	|  |  |  |      lsl.l #3,d0
    a7e8:	|  |  |  |      adda.l d0,a0
    a7ea:	|  |  |  |      movea.l 4(a0),a0
    a7ee:	|  |  |  |      move.l 40(sp),d0
    a7f2:	|  |  |  |      add.l d0,d0
    a7f4:	|  |  |  |      add.l d0,d0
    a7f6:	|  |  |  |      adda.l d0,a0
    a7f8:	|  |  |  |      move.l (a0),d0
    a7fa:	|  |  |  |      lsl.l #3,d0
    a7fc:	|  |  |  |      movea.l d1,a0
    a7fe:	|  |  |  |      adda.l d0,a0
    a800:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a804:	|  |  |  |      movea.l 1c9b2 <currentFloor>,a0
    a80a:	|  |  |  |      move.l 4(a0),d1
    a80e:	|  |  |  |      movea.l 1c9b2 <currentFloor>,a0
    a814:	|  |  |  |      movea.l 12(a0),a0
    a818:	|  |  |  |      move.l 44(sp),d0
    a81c:	|  |  |  |      lsl.l #3,d0
    a81e:	|  |  |  |      adda.l d0,a0
    a820:	|  |  |  |      movea.l 4(a0),a0
    a824:	|  |  |  |      move.l 40(sp),d0
    a828:	|  |  |  |      add.l d0,d0
    a82a:	|  |  |  |      add.l d0,d0
    a82c:	|  |  |  |      adda.l d0,a0
    a82e:	|  |  |  |      move.l (a0),d0
    a830:	|  |  |  |      lsl.l #3,d0
    a832:	|  |  |  |      movea.l d1,a0
    a834:	|  |  |  |      adda.l d0,a0
    a836:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a83c:	|  |  |  |      movea.l 1c9b2 <currentFloor>,a0
    a842:	|  |  |  |      move.l 4(a0),d1
    a846:	|  |  |  |      movea.l 1c9b2 <currentFloor>,a0
    a84c:	|  |  |  |      movea.l 12(a0),a0
    a850:	|  |  |  |      move.l 44(sp),d0
    a854:	|  |  |  |      lsl.l #3,d0
    a856:	|  |  |  |      adda.l d0,a0
    a858:	|  |  |  |      movea.l 4(a0),a0
    a85c:	|  |  |  |      move.l 36(sp),d0
    a860:	|  |  |  |      add.l d0,d0
    a862:	|  |  |  |      add.l d0,d0
    a864:	|  |  |  |      adda.l d0,a0
    a866:	|  |  |  |      move.l (a0),d0
    a868:	|  |  |  |      lsl.l #3,d0
    a86a:	|  |  |  |      movea.l d1,a0
    a86c:	|  |  |  |      adda.l d0,a0
    a86e:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a872:	|  |  |  |      movea.l 1c9b2 <currentFloor>,a0
    a878:	|  |  |  |      move.l 4(a0),d1
    a87c:	|  |  |  |      movea.l 1c9b2 <currentFloor>,a0
    a882:	|  |  |  |      movea.l 12(a0),a0
    a886:	|  |  |  |      move.l 44(sp),d0
    a88a:	|  |  |  |      lsl.l #3,d0
    a88c:	|  |  |  |      adda.l d0,a0
    a88e:	|  |  |  |      movea.l 4(a0),a0
    a892:	|  |  |  |      move.l 36(sp),d0
    a896:	|  |  |  |      add.l d0,d0
    a898:	|  |  |  |      add.l d0,d0
    a89a:	|  |  |  |      adda.l d0,a0
    a89c:	|  |  |  |      move.l (a0),d0
    a89e:	|  |  |  |      lsl.l #3,d0
    a8a0:	|  |  |  |      movea.l d1,a0
    a8a2:	|  |  |  |      adda.l d0,a0
    a8a4:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a8aa:	|  |  |  |      movea.l 68(sp),a0
    a8ae:	|  |  |  |      move.l (a0),d1
    a8b0:	|  |  |  |      movea.l 64(sp),a0
    a8b4:	|  |  |  |      move.l (a0),d0
    a8b6:	|  |  |  |      move.l d1,-(sp)
    a8b8:	|  |  |  |      move.l d0,-(sp)
    a8ba:	|  |  |  |      move.l 24(sp),-(sp)
    a8be:	|  |  |  |      move.l 32(sp),-(sp)
    a8c2:	|  |  |  |      move.l 40(sp),-(sp)
    a8c6:	|  |  |  |      move.l 48(sp),-(sp)
    a8ca:	|  |  |  |      lea 28(sp),a0
    a8ce:	|  |  |  |      move.l a0,-(sp)
    a8d0:	|  |  |  |      lea 36(sp),a0
    a8d4:	|  |  |  |      move.l a0,-(sp)
    a8d6:	|  |  |  |      jsr 16010 <closestPointOnLine>
    a8dc:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a8e0:	|  |  |  |      movea.l 64(sp),a0
    a8e4:	|  |  |  |      move.l (a0),d0
    a8e6:	|  |  |  |      move.l 8(sp),d1
    a8ea:	|  |  |  |      move.l d0,d2
    a8ec:	|  |  |  |      sub.l d1,d2
    a8ee:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a8f2:	|  |  |  |      movea.l 68(sp),a0
    a8f6:	|  |  |  |      move.l (a0),d0
    a8f8:	|  |  |  |      move.l 4(sp),d1
    a8fc:	|  |  |  |      move.l d0,d2
    a8fe:	|  |  |  |      sub.l d1,d2
    a900:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a904:	|  |  |  |      move.l 28(sp),-(sp)
    a908:	|  |  |  |      move.l 32(sp),-(sp)
    a90c:	|  |  |  |      jsr 17b6e <__mulsi3>
    a912:	|  |  |  |      addq.l #8,sp
    a914:	|  |  |  |      move.l d0,d2
    a916:	|  |  |  |      move.l 24(sp),-(sp)
    a91a:	|  |  |  |      move.l 28(sp),-(sp)
    a91e:	|  |  |  |      jsr 17b6e <__mulsi3>
    a924:	|  |  |  |      addq.l #8,sp
    a926:	|  |  |  |      move.l d2,d1
    a928:	|  |  |  |      add.l d0,d1
    a92a:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a92e:	|  |  |  |      move.l 12(sp),d2
    a932:	|  |  |  |      cmp.l 32(sp),d2
    a936:	|  |  |  |  /-- bge.s a950 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a938:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a93e:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a944:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a94a:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a950:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a956:	|  |  |  |      addq.l #1,40(sp)
    a95a:	|  |  |  \----> movea.l 1c9b2 <currentFloor>,a0
    a960:	|  |  |         move.l 12(a0),d1
    a964:	|  |  |         move.l 44(sp),d0
    a968:	|  |  |         lsl.l #3,d0
    a96a:	|  |  |         movea.l d1,a0
    a96c:	|  |  |         adda.l d0,a0
    a96e:	|  |  |         move.l (a0),d0
    a970:	|  |  |         cmp.l 40(sp),d0
    a974:	|  |  \-------- bgt.w a7ce <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a978:	|  |            addq.l #1,44(sp)
    a97c:	|  \----------> movea.l 1c9b2 <currentFloor>,a0
    a982:	|               move.l 8(a0),d0
    a986:	|               cmp.l 44(sp),d0
    a98a:	\-------------- bgt.w a7a8 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a98e:	                moveq #-1,d0
    a990:	                cmp.l 48(sp),d0
    a994:	            /-- bne.s a99a <handleClosestPoint+0x21e>
    a996:	            |   clr.w d0
    a998:	         /--|-- bra.s a9b4 <handleClosestPoint+0x238>
	*setX = gotX;
    a99a:	         |  \-> movea.l 64(sp),a0
    a99e:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a9a2:	         |      movea.l 68(sp),a0
    a9a6:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a9aa:	         |      movea.l 72(sp),a0
    a9ae:	         |      move.l 48(sp),(a0)

	return TRUE;
    a9b2:	         |      moveq #1,d0
}
    a9b4:	         \----> move.l (sp)+,d2
    a9b6:	                lea 56(sp),sp
    a9ba:	                rts

0000a9bc <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a9bc:	clr.l 1c90e <personRegion+0x10>
	personRegion.sY = 0;
    a9c2:	clr.l 1c912 <personRegion+0x14>
	personRegion.di = -1;
    a9c8:	moveq #-1,d0
    a9ca:	move.l d0,1c916 <personRegion+0x18>
	allScreenRegions = NULL;
    a9d0:	clr.l 1c9a6 <allScreenRegions>

	return TRUE;
    a9d6:	moveq #1,d0
}
    a9d8:	rts

0000a9da <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a9da:	          subq.l #4,sp
    a9dc:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a9de:	          tst.l 12(sp)
    a9e2:	      /-- bne.s a9ea <jumpPerson+0x10>
    a9e4:	      |   tst.l 16(sp)
    a9e8:	/-----|-- beq.s aa5e <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a9ea:	|     \-> move.l 20(sp),-(sp)
    a9ee:	|         jsr a680 <findPerson>
    a9f4:	|         addq.l #4,sp
    a9f6:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a9fa:	|  /----- beq.s aa62 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a9fc:	|  |      movea.l 4(sp),a0
    aa00:	|  |      move.l 68(a0),d0
    aa04:	|  |  /-- beq.s aa18 <jumpPerson+0x3e>
    aa06:	|  |  |   movea.l 4(sp),a0
    aa0a:	|  |  |   move.l 68(a0),d0
    aa0e:	|  |  |   move.l d0,-(sp)
    aa10:	|  |  |   jsr 47c6 <abortFunction>
    aa16:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    aa18:	|  |  \-> movea.l 4(sp),a0
    aa1c:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    aa20:	|  |      movea.l 4(sp),a0
    aa24:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    aa28:	|  |      movea.l 4(sp),a0
    aa2c:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    aa30:	|  |      move.l 16(sp),-(sp)
    aa34:	|  |      jsr 175ec <__floatsisf>
    aa3a:	|  |      addq.l #4,sp
    aa3c:	|  |      move.l d0,d2
    aa3e:	|  |      move.l 12(sp),-(sp)
    aa42:	|  |      jsr 175ec <__floatsisf>
    aa48:	|  |      addq.l #4,sp
    aa4a:	|  |      move.l d2,-(sp)
    aa4c:	|  |      move.l d0,-(sp)
    aa4e:	|  |      move.l 12(sp),-(sp)
    aa52:	|  |      jsr adc8 <moveAndScale>
    aa58:	|  |      lea 12(sp),sp
    aa5c:	|  |  /-- bra.s aa64 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    aa5e:	\--|--|-> nop
    aa60:	   |  +-- bra.s aa64 <jumpPerson+0x8a>
    if (!moveMe) return;
    aa62:	   \--|-> nop
}
    aa64:	      \-> move.l (sp)+,d2
    aa66:	          addq.l #4,sp
    aa68:	          rts

0000aa6a <killAllPeople>:


void killAllPeople () {
    aa6a:	          subq.l #8,sp
    aa6c:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    aa6e:	   /----- bra.s aada <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    aa70:	/--|----> movea.l 1c8fa <allPeople>,a0
    aa76:	|  |      move.l 68(a0),d0
    aa7a:	|  |  /-- beq.s aa90 <killAllPeople+0x26>
    aa7c:	|  |  |   movea.l 1c8fa <allPeople>,a0
    aa82:	|  |  |   move.l 68(a0),d0
    aa86:	|  |  |   move.l d0,-(sp)
    aa88:	|  |  |   jsr 47c6 <abortFunction>
    aa8e:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    aa90:	|  |  \-> movea.l 1c8fa <allPeople>,a0
    aa96:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    aa9a:	|  |      move.l 1c8fa <allPeople>,8(sp)
		allPeople = allPeople -> next;
    aaa2:	|  |      movea.l 1c8fa <allPeople>,a0
    aaa8:	|  |      move.l 36(a0),d0
    aaac:	|  |      move.l d0,1c8fa <allPeople>
		removeObjectType (killPeople -> thisType);
    aab2:	|  |      movea.l 8(sp),a0
    aab6:	|  |      move.l 114(a0),d0
    aaba:	|  |      move.l d0,-(sp)
    aabc:	|  |      jsr d89a <removeObjectType>
    aac2:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    aac4:	|  |      move.l 8(sp),4(sp)
    aaca:	|  |      move.l 1c896 <SysBase>,d0
    aad0:	|  |      movea.l d0,a6
    aad2:	|  |      movea.l 4(sp),a1
    aad6:	|  |      jsr -690(a6)
	while (allPeople) {
    aada:	|  \----> move.l 1c8fa <allPeople>,d0
    aae0:	\-------- bne.s aa70 <killAllPeople+0x6>
	}
}
    aae2:	          nop
    aae4:	          nop
    aae6:	          movea.l (sp)+,a6
    aae8:	          addq.l #8,sp
    aaea:	          rts

0000aaec <killMostPeople>:

void killMostPeople() {
    aaec:	          lea -12(sp),sp
    aaf0:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    aaf2:	          move.l #116986,12(sp)

    while (*lookyHere) {
    aafa:	   /----- bra.w ab80 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    aafe:	/--|----> movea.l 12(sp),a0
    ab02:	|  |      movea.l (a0),a0
    ab04:	|  |      move.l 118(a0),d0
    ab08:	|  |      moveq #32,d1
    ab0a:	|  |      and.l d1,d0
    ab0c:	|  |  /-- beq.s ab1e <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    ab0e:	|  |  |   movea.l 12(sp),a0
    ab12:	|  |  |   move.l (a0),d0
    ab14:	|  |  |   moveq #36,d1
    ab16:	|  |  |   add.l d0,d1
    ab18:	|  |  |   move.l d1,12(sp)
    ab1c:	|  +--|-- bra.s ab80 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    ab1e:	|  |  \-> movea.l 12(sp),a0
    ab22:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    ab26:	|  |      movea.l 8(sp),a0
    ab2a:	|  |      move.l 36(a0),d0
    ab2e:	|  |      movea.l 12(sp),a0
    ab32:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    ab34:	|  |      movea.l 8(sp),a0
    ab38:	|  |      move.l 68(a0),d0
    ab3c:	|  |  /-- beq.s ab50 <killMostPeople+0x64>
    ab3e:	|  |  |   movea.l 8(sp),a0
    ab42:	|  |  |   move.l 68(a0),d0
    ab46:	|  |  |   move.l d0,-(sp)
    ab48:	|  |  |   jsr 47c6 <abortFunction>
    ab4e:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    ab50:	|  |  \-> movea.l 8(sp),a0
    ab54:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ab58:	|  |      movea.l 8(sp),a0
    ab5c:	|  |      move.l 114(a0),d0
    ab60:	|  |      move.l d0,-(sp)
    ab62:	|  |      jsr d89a <removeObjectType>
    ab68:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ab6a:	|  |      move.l 8(sp),4(sp)
    ab70:	|  |      move.l 1c896 <SysBase>,d0
    ab76:	|  |      movea.l d0,a6
    ab78:	|  |      movea.l 4(sp),a1
    ab7c:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ab80:	|  \----> movea.l 12(sp),a0
    ab84:	|         move.l (a0),d0
    ab86:	\-------- bne.w aafe <killMostPeople+0x12>
        }
    }
}
    ab8a:	          nop
    ab8c:	          nop
    ab8e:	          movea.l (sp)+,a6
    ab90:	          lea 12(sp),sp
    ab94:	          rts

0000ab96 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ab96:	clr.l -(sp)
    ab98:	move.l sp,d0
    ab9a:	addq.l #8,d0
    ab9c:	move.l d0,-(sp)
    ab9e:	jsr 821e <setFrames>
    aba4:	addq.l #8,sp
}
    aba6:	nop
    aba8:	rts

0000abaa <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    abaa:	          lea -12(sp),sp
    abae:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    abb0:	          tst.l 20(sp)
    abb4:	      /-- bne.s abc2 <makeWalkingPerson+0x18>
    abb6:	      |   tst.l 24(sp)
    abba:	      +-- bne.s abc2 <makeWalkingPerson+0x18>
    abbc:	      |   clr.w d0
    abbe:	/-----|-- bra.w ad5a <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    abc2:	|     \-> movea.l 1c9b2 <currentFloor>,a0
    abc8:	|         move.l 8(a0),d0
    abcc:	|     /-- bne.s abd4 <makeWalkingPerson+0x2a>
    abce:	|     |   clr.w d0
    abd0:	+-----|-- bra.w ad5a <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    abd4:	|     \-> move.l 28(sp),-(sp)
    abd8:	|         jsr a680 <findPerson>
    abde:	|         addq.l #4,sp
    abe0:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    abe4:	|     /-- bne.s abec <makeWalkingPerson+0x42>
    abe6:	|     |   clr.w d0
    abe8:	+-----|-- bra.w ad5a <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    abec:	|     \-> movea.l 12(sp),a0
    abf0:	|         move.l 68(a0),d0
    abf4:	|     /-- beq.s ac08 <makeWalkingPerson+0x5e>
    abf6:	|     |   movea.l 12(sp),a0
    abfa:	|     |   move.l 68(a0),d0
    abfe:	|     |   move.l d0,-(sp)
    ac00:	|     |   jsr 47c6 <abortFunction>
    ac06:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    ac08:	|     \-> movea.l 12(sp),a0
    ac0c:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    ac10:	|         movea.l 12(sp),a0
    ac14:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    ac1a:	|         movea.l 12(sp),a0
    ac1e:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    ac24:	|         movea.l 12(sp),a0
    ac28:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    ac2e:	|         movea.l 12(sp),a0
    ac32:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    ac38:	|         move.l 24(sp),-(sp)
    ac3c:	|         move.l 24(sp),-(sp)
    ac40:	|         jsr 16512 <inFloor>
    ac46:	|         addq.l #8,sp
    ac48:	|         movea.l 12(sp),a0
    ac4c:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    ac50:	|         movea.l 12(sp),a0
    ac54:	|         move.l 60(a0),d0
    ac58:	|         moveq #-1,d1
    ac5a:	|         cmp.l d0,d1
    ac5c:	|     /-- bne.s ac8c <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ac5e:	|     |   movea.w #60,a0
    ac62:	|     |   adda.l 12(sp),a0
    ac66:	|     |   moveq #44,d1
    ac68:	|     |   add.l 12(sp),d1
    ac6c:	|     |   moveq #40,d0
    ac6e:	|     |   add.l 12(sp),d0
    ac72:	|     |   move.l a0,-(sp)
    ac74:	|     |   move.l d1,-(sp)
    ac76:	|     |   move.l d0,-(sp)
    ac78:	|     |   jsr a77c <handleClosestPoint>
    ac7e:	|     |   lea 12(sp),sp
    ac82:	|     |   tst.w d0
    ac84:	|     +-- bne.s ac8c <makeWalkingPerson+0xe2>
    ac86:	|     |   clr.w d0
    ac88:	+-----|-- bra.w ad5a <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ac8c:	|     \-> movea.l 12(sp),a0
    ac90:	|         move.l 4(a0),d0
    ac94:	|         move.l d0,-(sp)
    ac96:	|         jsr 17584 <__fixsfsi>
    ac9c:	|         addq.l #4,sp
    ac9e:	|         move.l d0,d2
    aca0:	|         movea.l 12(sp),a0
    aca4:	|         move.l (a0),d0
    aca6:	|         move.l d0,-(sp)
    aca8:	|         jsr 17584 <__fixsfsi>
    acae:	|         addq.l #4,sp
    acb0:	|         move.l d2,-(sp)
    acb2:	|         move.l d0,-(sp)
    acb4:	|         jsr 16512 <inFloor>
    acba:	|         addq.l #8,sp
    acbc:	|         movea.l 12(sp),a0
    acc0:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    acc4:	|         movea.l 12(sp),a0
    acc8:	|         move.l 56(a0),d0
    accc:	|         moveq #-1,d1
    acce:	|         cmp.l d0,d1
    acd0:	|     /-- bne.s ad22 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    acd2:	|     |   movea.l 12(sp),a0
    acd6:	|     |   move.l (a0),d0
    acd8:	|     |   move.l d0,-(sp)
    acda:	|     |   jsr 17584 <__fixsfsi>
    ace0:	|     |   addq.l #4,sp
    ace2:	|     |   move.l d0,8(sp)
    ace6:	|     |   movea.l 12(sp),a0
    acea:	|     |   move.l 4(a0),d0
    acee:	|     |   move.l d0,-(sp)
    acf0:	|     |   jsr 17584 <__fixsfsi>
    acf6:	|     |   addq.l #4,sp
    acf8:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    acfc:	|     |   moveq #56,d0
    acfe:	|     |   add.l 12(sp),d0
    ad02:	|     |   move.l d0,-(sp)
    ad04:	|     |   lea 8(sp),a0
    ad08:	|     |   move.l a0,-(sp)
    ad0a:	|     |   moveq #16,d0
    ad0c:	|     |   add.l sp,d0
    ad0e:	|     |   move.l d0,-(sp)
    ad10:	|     |   jsr a77c <handleClosestPoint>
    ad16:	|     |   lea 12(sp),sp
    ad1a:	|     |   tst.w d0
    ad1c:	|     +-- bne.s ad22 <makeWalkingPerson+0x178>
    ad1e:	|     |   clr.w d0
    ad20:	+-----|-- bra.s ad5a <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    ad22:	|     \-> move.l 12(sp),-(sp)
    ad26:	|         jsr 99e2 <doBorderStuff>
    ad2c:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    ad2e:	|         clr.l -(sp)
    ad30:	|         move.l 16(sp),-(sp)
    ad34:	|         jsr bf42 <walkMe>
    ad3a:	|         addq.l #8,sp
    ad3c:	|         tst.w d0
    ad3e:	|     /-- bne.s ad4a <makeWalkingPerson+0x1a0>
    ad40:	|     |   movea.l 12(sp),a0
    ad44:	|     |   move.w 66(a0),d0
    ad48:	|  /--|-- beq.s ad58 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    ad4a:	|  |  \-> movea.l 12(sp),a0
    ad4e:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ad54:	|  |      moveq #1,d0
    ad56:	+--|----- bra.s ad5a <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ad58:	|  \----> clr.w d0
	}
}
    ad5a:	\-------> move.l (sp)+,d2
    ad5c:	          lea 12(sp),sp
    ad60:	          rts

0000ad62 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ad62:	       lea -16(sp),sp
    ad66:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ad68:	       moveq #12,d0
    ad6a:	       move.l d0,16(sp)
    ad6e:	       clr.l 12(sp)
    ad72:	       move.l 1c896 <SysBase>,d0
    ad78:	       movea.l d0,a6
    ad7a:	       move.l 16(sp),d0
    ad7e:	       move.l 12(sp),d1
    ad82:	       jsr -684(a6)
    ad86:	       move.l d0,8(sp)
    ad8a:	       move.l 8(sp),d0
    ad8e:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ad92:	   /-- bne.s ada6 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ad94:	   |   pea 190d9 <PutChar+0x1455>
    ad9a:	   |   jsr 171b0 <KPrintF>
    ada0:	   |   addq.l #4,sp
        return NULL;    
    ada2:	   |   moveq #0,d0
    ada4:	/--|-- bra.s adc0 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ada6:	|  \-> movea.l 4(sp),a0
    adaa:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    adac:	|      movea.l 4(sp),a0
    adb0:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    adb4:	|      movea.l 4(sp),a0
    adb8:	|      clr.l 4(a0)
	return newAnim;
    adbc:	|      move.l 4(sp),d0
}
    adc0:	\----> movea.l (sp)+,a6
    adc2:	       lea 16(sp),sp
    adc6:	       rts

0000adc8 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    adc8:	    move.l d2,-(sp)
	me->x = x;
    adca:	    movea.l 8(sp),a0
    adce:	    move.l 12(sp),(a0)
	me->y = y;
    add2:	    movea.l 8(sp),a0
    add6:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    addc:	    movea.l 8(sp),a0
    ade0:	    clr.l 8(a0)
	me->oldy = 0;
    ade4:	    movea.l 8(sp),a0
    ade8:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    adec:	    movea.l 8(sp),a0
    adf0:	    move.l 118(a0),d0
    adf4:	    moveq #2,d1
    adf6:	    and.l d1,d0
    adf8:	/-- bne.s ae50 <moveAndScale+0x88>
    adfa:	|   move.w 1c22a <scaleDivide>,d0
    ae00:	+-- beq.s ae50 <moveAndScale+0x88>
    ae02:	|   movea.l 8(sp),a0
    ae06:	|   move.l 4(a0),d2
    ae0a:	|   move.w 1c228 <scaleHorizon>,d0
    ae10:	|   movea.w d0,a0
    ae12:	|   move.l a0,-(sp)
    ae14:	|   jsr 175ec <__floatsisf>
    ae1a:	|   addq.l #4,sp
    ae1c:	|   move.l d0,-(sp)
    ae1e:	|   move.l d2,-(sp)
    ae20:	|   jsr 178e0 <__subsf3>
    ae26:	|   addq.l #8,sp
    ae28:	|   move.l d0,d2
    ae2a:	|   move.w 1c22a <scaleDivide>,d0
    ae30:	|   movea.w d0,a0
    ae32:	|   move.l a0,-(sp)
    ae34:	|   jsr 175ec <__floatsisf>
    ae3a:	|   addq.l #4,sp
    ae3c:	|   move.l d0,-(sp)
    ae3e:	|   move.l d2,-(sp)
    ae40:	|   jsr 17498 <__divsf3>
    ae46:	|   addq.l #8,sp
    ae48:	|   movea.l 8(sp),a0
    ae4c:	|   move.l d0,32(a0)
}
    ae50:	\-> nop
    ae52:	    move.l (sp)+,d2
    ae54:	    rts

0000ae56 <removeOneCharacter>:

void removeOneCharacter (int i) {
    ae56:	          lea -16(sp),sp
    ae5a:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ae5c:	          move.l 24(sp),-(sp)
    ae60:	          jsr a680 <findPerson>
    ae66:	          addq.l #4,sp
    ae68:	          move.l d0,8(sp)

    if (p) {
    ae6c:	/-------- beq.w af4c <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ae70:	|         move.l 1c9aa <overRegion>,d0
    ae76:	|         cmpi.l #116990,d0
    ae7c:	|     /-- bne.s ae9a <removeOneCharacter+0x44>
    ae7e:	|     |   movea.l 1c9aa <overRegion>,a0
    ae84:	|     |   move.l 28(a0),d1
    ae88:	|     |   movea.l 8(sp),a0
    ae8c:	|     |   move.l 114(a0),d0
    ae90:	|     |   cmp.l d1,d0
    ae92:	|     +-- bne.s ae9a <removeOneCharacter+0x44>
            overRegion = NULL;
    ae94:	|     |   clr.l 1c9aa <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ae9a:	|     \-> movea.l 8(sp),a0
    ae9e:	|         move.l 68(a0),d0
    aea2:	|     /-- beq.s aeb6 <removeOneCharacter+0x60>
    aea4:	|     |   movea.l 8(sp),a0
    aea8:	|     |   move.l 68(a0),d0
    aeac:	|     |   move.l d0,-(sp)
    aeae:	|     |   jsr 47c6 <abortFunction>
    aeb4:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    aeb6:	|     \-> movea.l 8(sp),a0
    aeba:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    aebe:	|         clr.l 12(sp)
    aec2:	|     /-- bra.s aeea <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    aec4:	|  /--|-> movea.l 8(sp),a0
    aec8:	|  |  |   movea.l 80(a0),a0
    aecc:	|  |  |   move.l (a0),d1
    aece:	|  |  |   move.l 12(sp),d0
    aed2:	|  |  |   add.l d0,d0
    aed4:	|  |  |   add.l d0,d0
    aed6:	|  |  |   movea.l d1,a0
    aed8:	|  |  |   adda.l d0,a0
    aeda:	|  |  |   move.l (a0),d0
    aedc:	|  |  |   move.l d0,-(sp)
    aede:	|  |  |   jsr 995e <deleteAnim>
    aee4:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    aee6:	|  |  |   addq.l #1,12(sp)
    aeea:	|  |  \-> moveq #2,d0
    aeec:	|  |      cmp.l 12(sp),d0
    aef0:	|  \----- bge.s aec4 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    aef2:	|         move.l #116986,16(sp)
    aefa:	|     /-- bra.s af0a <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    aefc:	|  /--|-> movea.l 16(sp),a0
    af00:	|  |  |   move.l (a0),d0
    af02:	|  |  |   moveq #36,d1
    af04:	|  |  |   add.l d0,d1
    af06:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    af0a:	|  |  \-> movea.l 16(sp),a0
    af0e:	|  |      move.l (a0),d0
    af10:	|  |      cmp.l 8(sp),d0
    af14:	|  \----- bne.s aefc <removeOneCharacter+0xa6>

        *killPeople = p->next;
    af16:	|         movea.l 8(sp),a0
    af1a:	|         move.l 36(a0),d0
    af1e:	|         movea.l 16(sp),a0
    af22:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    af24:	|         movea.l 8(sp),a0
    af28:	|         move.l 114(a0),d0
    af2c:	|         move.l d0,-(sp)
    af2e:	|         jsr d89a <removeObjectType>
    af34:	|         addq.l #4,sp
        FreeVec(p);
    af36:	|         move.l 8(sp),4(sp)
    af3c:	|         move.l 1c896 <SysBase>,d0
    af42:	|         movea.l d0,a6
    af44:	|         movea.l 4(sp),a1
    af48:	|         jsr -690(a6)
    }
}
    af4c:	\-------> nop
    af4e:	          movea.l (sp)+,a6
    af50:	          lea 16(sp),sp
    af54:	          rts

0000af56 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    af56:	       subq.l #8,sp
    af58:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    af5a:	       movea.l 16(sp),a0
    af5e:	       movea.l 80(a0),a0
    af62:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    af68:	       movea.l 16(sp),a0
    af6c:	       move.l 92(a0),d2
    af70:	       move.l 4(sp),-(sp)
    af74:	       pea b4 <_start+0xb4>
    af78:	       jsr 17bec <__divsi3>
    af7e:	       addq.l #8,sp
    af80:	       add.l d2,d0
    af82:	       move.l d0,d1
    af84:	       addi.l #180,d1
    af8a:	       movea.l 16(sp),a0
    af8e:	       move.l 100(a0),d0
    af92:	       move.l d1,d2
    af94:	       add.l d0,d2
    af96:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    af9a:	   /-- bra.s afa4 <rethinkAngle+0x4e>
    af9c:	/--|-> addi.l #-360,8(sp)
    afa4:	|  \-> cmpi.l #359,8(sp)
    afac:	\----- bgt.s af9c <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    afae:	       move.l 4(sp),-(sp)
    afb2:	       move.l 12(sp),-(sp)
    afb6:	       jsr 17b6e <__mulsi3>
    afbc:	       addq.l #8,sp
    afbe:	       pea 168 <decodeFilename+0x50>
    afc2:	       move.l d0,-(sp)
    afc4:	       jsr 17bec <__divsi3>
    afca:	       addq.l #8,sp
    afcc:	       movea.l 16(sp),a0
    afd0:	       move.l d0,106(a0)
}
    afd4:	       nop
    afd6:	       move.l (sp)+,d2
    afd8:	       addq.l #8,sp
    afda:	       rts

0000afdc <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    afdc:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    afde:	          movea.l 8(sp),a0
    afe2:	          move.l 8(a0),d0
    afe6:	          move.l 12(sp),-(sp)
    afea:	          move.l d0,-(sp)
    afec:	          jsr 8d0 <put2bytes>
    aff2:	          addq.l #8,sp
	if (p -> numFrames) {
    aff4:	          movea.l 8(sp),a0
    aff8:	          move.l 8(a0),d0
    affc:	/-------- beq.w b0a0 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b000:	|         movea.l 8(sp),a0
    b004:	|         movea.l (a0),a0
    b006:	|         move.l (a0),d0
    b008:	|         move.l 12(sp),-(sp)
    b00c:	|         move.l d0,-(sp)
    b00e:	|         jsr 958 <put4bytes>
    b014:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b016:	|         clr.l (sp)
    b018:	|     /-- bra.s b092 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b01a:	|  /--|-> movea.l 8(sp),a0
    b01e:	|  |  |   movea.l 4(a0),a0
    b022:	|  |  |   move.l (sp),d1
    b024:	|  |  |   move.l d1,d0
    b026:	|  |  |   add.l d0,d0
    b028:	|  |  |   add.l d1,d0
    b02a:	|  |  |   add.l d0,d0
    b02c:	|  |  |   add.l d0,d0
    b02e:	|  |  |   adda.l d0,a0
    b030:	|  |  |   move.l (a0),d0
    b032:	|  |  |   move.l 12(sp),-(sp)
    b036:	|  |  |   move.l d0,-(sp)
    b038:	|  |  |   jsr 958 <put4bytes>
    b03e:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b040:	|  |  |   movea.l 8(sp),a0
    b044:	|  |  |   movea.l 4(a0),a0
    b048:	|  |  |   move.l (sp),d1
    b04a:	|  |  |   move.l d1,d0
    b04c:	|  |  |   add.l d0,d0
    b04e:	|  |  |   add.l d1,d0
    b050:	|  |  |   add.l d0,d0
    b052:	|  |  |   add.l d0,d0
    b054:	|  |  |   adda.l d0,a0
    b056:	|  |  |   move.l 4(a0),d0
    b05a:	|  |  |   move.l 12(sp),-(sp)
    b05e:	|  |  |   move.l d0,-(sp)
    b060:	|  |  |   jsr 958 <put4bytes>
    b066:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b068:	|  |  |   movea.l 8(sp),a0
    b06c:	|  |  |   movea.l 4(a0),a0
    b070:	|  |  |   move.l (sp),d1
    b072:	|  |  |   move.l d1,d0
    b074:	|  |  |   add.l d0,d0
    b076:	|  |  |   add.l d1,d0
    b078:	|  |  |   add.l d0,d0
    b07a:	|  |  |   add.l d0,d0
    b07c:	|  |  |   adda.l d0,a0
    b07e:	|  |  |   move.l 8(a0),d0
    b082:	|  |  |   move.l 12(sp),-(sp)
    b086:	|  |  |   move.l d0,-(sp)
    b088:	|  |  |   jsr 958 <put4bytes>
    b08e:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b090:	|  |  |   addq.l #1,(sp)
    b092:	|  |  \-> movea.l 8(sp),a0
    b096:	|  |      move.l 8(a0),d0
    b09a:	|  |      cmp.l (sp),d0
    b09c:	|  \----- bgt.w b01a <saveAnim+0x3e>
		}
	}
	return TRUE;
    b0a0:	\-------> moveq #1,d0
}
    b0a2:	          addq.l #4,sp
    b0a4:	          rts

0000b0a6 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b0a6:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b0a8:	             movea.l 8(sp),a0
    b0ac:	             move.l 4(a0),d0
    b0b0:	             move.l 12(sp),-(sp)
    b0b4:	             move.l d0,-(sp)
    b0b6:	             jsr 8d0 <put2bytes>
    b0bc:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b0be:	             clr.l (sp)
    b0c0:	   /-------- bra.s b0ec <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b0c2:	/--|-------> movea.l 8(sp),a0
    b0c6:	|  |         move.l (a0),d1
    b0c8:	|  |         move.l (sp),d0
    b0ca:	|  |         add.l d0,d0
    b0cc:	|  |         add.l d0,d0
    b0ce:	|  |         movea.l d1,a0
    b0d0:	|  |         adda.l d0,a0
    b0d2:	|  |         move.l (a0),d0
    b0d4:	|  |         move.l 12(sp),-(sp)
    b0d8:	|  |         move.l d0,-(sp)
    b0da:	|  |         jsr afdc <saveAnim>
    b0e0:	|  |         addq.l #8,sp
    b0e2:	|  |         tst.w d0
    b0e4:	|  |     /-- bne.s b0ea <saveCostume+0x44>
    b0e6:	|  |     |   clr.w d0
    b0e8:	|  |  /--|-- bra.s b100 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b0ea:	|  |  |  \-> addq.l #1,(sp)
    b0ec:	|  \--|----> movea.l 8(sp),a0
    b0f0:	|     |      move.l 4(a0),d1
    b0f4:	|     |      move.l d1,d0
    b0f6:	|     |      add.l d0,d0
    b0f8:	|     |      add.l d1,d0
    b0fa:	|     |      cmp.l (sp),d0
    b0fc:	\-----|----- bgt.s b0c2 <saveCostume+0x1c>
	}

	return TRUE;
    b0fe:	      |      moveq #1,d0
}
    b100:	      \----> addq.l #4,sp
    b102:	             rts

0000b104 <savePeople>:

BOOL savePeople (BPTR fp) {
    b104:	             lea -144(sp),sp
    b108:	             move.l a6,-(sp)
    b10a:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b10c:	             move.l 1c8fa <allPeople>,148(sp)
	int countPeople = 0, a;
    b114:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b118:	             move.w 1c228 <scaleHorizon>,d0
    b11e:	             movea.w d0,a0
    b120:	             move.l 156(sp),-(sp)
    b124:	             move.l a0,-(sp)
    b126:	             jsr a9c <putSigned>
    b12c:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b12e:	             move.w 1c22a <scaleDivide>,d0
    b134:	             movea.w d0,a0
    b136:	             move.l 156(sp),-(sp)
    b13a:	             move.l a0,-(sp)
    b13c:	             jsr a9c <putSigned>
    b142:	             addq.l #8,sp

	while (me) {
    b144:	         /-- bra.s b154 <savePeople+0x50>
		countPeople ++;
    b146:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    b14a:	      |  |   movea.l 148(sp),a0
    b14e:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b154:	      |  \-> tst.l 148(sp)
    b158:	      \----- bne.s b146 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b15a:	             move.l 156(sp),-(sp)
    b15e:	             move.l 148(sp),-(sp)
    b162:	             jsr 8d0 <put2bytes>
    b168:	             addq.l #8,sp

	me = allPeople;
    b16a:	             move.l 1c8fa <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b172:	             clr.l 140(sp)
    b176:	   /-------- bra.w b5ce <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b17a:	/--|-------> movea.l 148(sp),a0
    b17e:	|  |         move.l (a0),d0
    b180:	|  |         move.l 156(sp),-(sp)
    b184:	|  |         move.l d0,-(sp)
    b186:	|  |         jsr a46 <putFloat>
    b18c:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b18e:	|  |         movea.l 148(sp),a0
    b192:	|  |         move.l 4(a0),d0
    b196:	|  |         move.l 156(sp),-(sp)
    b19a:	|  |         move.l d0,-(sp)
    b19c:	|  |         jsr a46 <putFloat>
    b1a2:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b1a4:	|  |         movea.l 148(sp),a0
    b1a8:	|  |         move.l 80(a0),d0
    b1ac:	|  |         move.l 156(sp),-(sp)
    b1b0:	|  |         move.l d0,-(sp)
    b1b2:	|  |         jsr b0a6 <saveCostume>
    b1b8:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b1ba:	|  |         movea.l 148(sp),a0
    b1be:	|  |         move.l 72(a0),d0
    b1c2:	|  |         move.l 156(sp),-(sp)
    b1c6:	|  |         move.l d0,-(sp)
    b1c8:	|  |         jsr afdc <saveAnim>
    b1ce:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b1d0:	|  |         move.l 156(sp),136(sp)
    b1d6:	|  |         movea.l 148(sp),a0
    b1da:	|  |         move.l 72(a0),d1
    b1de:	|  |         movea.l 148(sp),a0
    b1e2:	|  |         move.l 76(a0),d0
    b1e6:	|  |         cmp.l d1,d0
    b1e8:	|  |         seq d0
    b1ea:	|  |         neg.b d0
    b1ec:	|  |         move.b d0,d0
    b1ee:	|  |         andi.l #255,d0
    b1f4:	|  |         move.l d0,132(sp)
    b1f8:	|  |         move.l 1c89e <DOSBase>,d0
    b1fe:	|  |         movea.l d0,a6
    b200:	|  |         move.l 136(sp),d1
    b204:	|  |         move.l 132(sp),d2
    b208:	|  |         jsr -312(a6)
    b20c:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b210:	|  |         movea.l 148(sp),a0
    b214:	|  |         move.l 32(a0),d0
    b218:	|  |         move.l 156(sp),-(sp)
    b21c:	|  |         move.l d0,-(sp)
    b21e:	|  |         jsr a46 <putFloat>
    b224:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b226:	|  |         movea.l 148(sp),a0
    b22a:	|  |         move.l 118(a0),d0
    b22e:	|  |         move.l 156(sp),-(sp)
    b232:	|  |         move.l d0,-(sp)
    b234:	|  |         jsr 8d0 <put2bytes>
    b23a:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b23c:	|  |         movea.l 148(sp),a0
    b240:	|  |         move.l 20(a0),d0
    b244:	|  |         move.l 156(sp),-(sp)
    b248:	|  |         move.l d0,-(sp)
    b24a:	|  |         jsr 8d0 <put2bytes>
    b250:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b252:	|  |         movea.l 148(sp),a0
    b256:	|  |         move.l 40(a0),d0
    b25a:	|  |         move.l 156(sp),-(sp)
    b25e:	|  |         move.l d0,-(sp)
    b260:	|  |         jsr 8d0 <put2bytes>
    b266:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b268:	|  |         movea.l 148(sp),a0
    b26c:	|  |         move.l 44(a0),d0
    b270:	|  |         move.l 156(sp),-(sp)
    b274:	|  |         move.l d0,-(sp)
    b276:	|  |         jsr 8d0 <put2bytes>
    b27c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b27e:	|  |         movea.l 148(sp),a0
    b282:	|  |         move.l 48(a0),d0
    b286:	|  |         move.l 156(sp),-(sp)
    b28a:	|  |         move.l d0,-(sp)
    b28c:	|  |         jsr 8d0 <put2bytes>
    b292:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b294:	|  |         movea.l 148(sp),a0
    b298:	|  |         move.l 52(a0),d0
    b29c:	|  |         move.l 156(sp),-(sp)
    b2a0:	|  |         move.l d0,-(sp)
    b2a2:	|  |         jsr 8d0 <put2bytes>
    b2a8:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b2aa:	|  |         movea.l 148(sp),a0
    b2ae:	|  |         move.l 84(a0),d0
    b2b2:	|  |         move.l 156(sp),-(sp)
    b2b6:	|  |         move.l d0,-(sp)
    b2b8:	|  |         jsr 8d0 <put2bytes>
    b2be:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b2c0:	|  |         movea.l 148(sp),a0
    b2c4:	|  |         move.l 88(a0),d0
    b2c8:	|  |         move.l 156(sp),-(sp)
    b2cc:	|  |         move.l d0,-(sp)
    b2ce:	|  |         jsr 8d0 <put2bytes>
    b2d4:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b2d6:	|  |         movea.l 148(sp),a0
    b2da:	|  |         move.l 28(a0),d0
    b2de:	|  |         move.l 156(sp),-(sp)
    b2e2:	|  |         move.l d0,-(sp)
    b2e4:	|  |         jsr 8d0 <put2bytes>
    b2ea:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b2ec:	|  |         movea.l 148(sp),a0
    b2f0:	|  |         move.l 122(a0),d0
    b2f4:	|  |         move.l 156(sp),-(sp)
    b2f8:	|  |         move.l d0,-(sp)
    b2fa:	|  |         jsr 8d0 <put2bytes>
    b300:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b302:	|  |         movea.l 148(sp),a0
    b306:	|  |         move.l 24(a0),d0
    b30a:	|  |         move.l d0,d0
    b30c:	|  |         movea.w d0,a0
    b30e:	|  |         move.l 156(sp),-(sp)
    b312:	|  |         move.l a0,-(sp)
    b314:	|  |         jsr a9c <putSigned>
    b31a:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b31c:	|  |         move.l 156(sp),124(sp)
    b322:	|  |         movea.l 148(sp),a0
    b326:	|  |         move.w 104(a0),d0
    b32a:	|  |         movea.w d0,a0
    b32c:	|  |         move.l a0,120(sp)
    b330:	|  |         move.l 1c89e <DOSBase>,d0
    b336:	|  |         movea.l d0,a6
    b338:	|  |         move.l 124(sp),d1
    b33c:	|  |         move.l 120(sp),d2
    b340:	|  |         jsr -312(a6)
    b344:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b348:	|  |         move.l 156(sp),112(sp)
    b34e:	|  |         movea.l 148(sp),a0
    b352:	|  |         move.w 64(a0),d0
    b356:	|  |         movea.w d0,a0
    b358:	|  |         move.l a0,108(sp)
    b35c:	|  |         move.l 1c89e <DOSBase>,d0
    b362:	|  |         movea.l d0,a6
    b364:	|  |         move.l 112(sp),d1
    b368:	|  |         move.l 108(sp),d2
    b36c:	|  |         jsr -312(a6)
    b370:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b374:	|  |         move.l 156(sp),100(sp)
    b37a:	|  |         movea.l 148(sp),a0
    b37e:	|  |         move.w 66(a0),d0
    b382:	|  |         movea.w d0,a0
    b384:	|  |         move.l a0,96(sp)
    b388:	|  |         move.l 1c89e <DOSBase>,d0
    b38e:	|  |         movea.l d0,a6
    b390:	|  |         move.l 100(sp),d1
    b394:	|  |         move.l 96(sp),d2
    b398:	|  |         jsr -312(a6)
    b39c:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b3a0:	|  |         movea.l 148(sp),a0
    b3a4:	|  |         move.l 68(a0),d0
    b3a8:	|  |  /----- beq.s b3e6 <savePeople+0x2e2>
			FPutC (fp, 1);
    b3aa:	|  |  |      move.l 156(sp),76(sp)
    b3b0:	|  |  |      moveq #1,d0
    b3b2:	|  |  |      move.l d0,72(sp)
    b3b6:	|  |  |      move.l 1c89e <DOSBase>,d0
    b3bc:	|  |  |      movea.l d0,a6
    b3be:	|  |  |      move.l 76(sp),d1
    b3c2:	|  |  |      move.l 72(sp),d2
    b3c6:	|  |  |      jsr -312(a6)
    b3ca:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b3ce:	|  |  |      movea.l 148(sp),a0
    b3d2:	|  |  |      move.l 68(a0),d0
    b3d6:	|  |  |      move.l 156(sp),-(sp)
    b3da:	|  |  |      move.l d0,-(sp)
    b3dc:	|  |  |      jsr c57c <saveFunction>
    b3e2:	|  |  |      addq.l #8,sp
    b3e4:	|  |  |  /-- bra.s b40a <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b3e6:	|  |  \--|-> move.l 156(sp),88(sp)
    b3ec:	|  |     |   moveq #1,d0
    b3ee:	|  |     |   move.l d0,84(sp)
    b3f2:	|  |     |   move.l 1c89e <DOSBase>,d0
    b3f8:	|  |     |   movea.l d0,a6
    b3fa:	|  |     |   move.l 88(sp),d1
    b3fe:	|  |     |   move.l 84(sp),d2
    b402:	|  |     |   jsr -312(a6)
    b406:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b40a:	|  |     \-> movea.l 148(sp),a0
    b40e:	|  |         move.l 106(a0),d0
    b412:	|  |         move.l 156(sp),-(sp)
    b416:	|  |         move.l d0,-(sp)
    b418:	|  |         jsr 8d0 <put2bytes>
    b41e:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b420:	|  |         movea.l 148(sp),a0
    b424:	|  |         move.l 92(a0),d0
    b428:	|  |         move.l 156(sp),-(sp)
    b42c:	|  |         move.l d0,-(sp)
    b42e:	|  |         jsr 8d0 <put2bytes>
    b434:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b436:	|  |         movea.l 148(sp),a0
    b43a:	|  |         move.l 100(a0),d0
    b43e:	|  |         move.l 156(sp),-(sp)
    b442:	|  |         move.l d0,-(sp)
    b444:	|  |         jsr 8d0 <put2bytes>
    b44a:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b44c:	|  |         movea.l 148(sp),a0
    b450:	|  |         move.l 96(a0),d0
    b454:	|  |         move.l 156(sp),-(sp)
    b458:	|  |         move.l d0,-(sp)
    b45a:	|  |         jsr 8d0 <put2bytes>
    b460:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b462:	|  |         movea.l 148(sp),a0
    b466:	|  |         move.l 110(a0),d0
    b46a:	|  |         move.l d0,d0
    b46c:	|  |         movea.w d0,a0
    b46e:	|  |         move.l 156(sp),-(sp)
    b472:	|  |         move.l a0,-(sp)
    b474:	|  |         jsr a9c <putSigned>
    b47a:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b47c:	|  |         movea.l 148(sp),a0
    b480:	|  |         move.l 56(a0),d0
    b484:	|  |         move.l d0,d0
    b486:	|  |         movea.w d0,a0
    b488:	|  |         move.l 156(sp),-(sp)
    b48c:	|  |         move.l a0,-(sp)
    b48e:	|  |         jsr a9c <putSigned>
    b494:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b496:	|  |         movea.l 148(sp),a0
    b49a:	|  |         move.l 60(a0),d0
    b49e:	|  |         move.l d0,d0
    b4a0:	|  |         movea.w d0,a0
    b4a2:	|  |         move.l 156(sp),-(sp)
    b4a6:	|  |         move.l a0,-(sp)
    b4a8:	|  |         jsr a9c <putSigned>
    b4ae:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b4b0:	|  |         move.l 156(sp),64(sp)
    b4b6:	|  |         movea.l 148(sp),a0
    b4ba:	|  |         move.b 126(a0),d0
    b4be:	|  |         move.b d0,d0
    b4c0:	|  |         andi.l #255,d0
    b4c6:	|  |         move.l d0,60(sp)
    b4ca:	|  |         move.l 1c89e <DOSBase>,d0
    b4d0:	|  |         movea.l d0,a6
    b4d2:	|  |         move.l 64(sp),d1
    b4d6:	|  |         move.l 60(sp),d2
    b4da:	|  |         jsr -312(a6)
    b4de:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b4e2:	|  |         move.l 156(sp),52(sp)
    b4e8:	|  |         movea.l 148(sp),a0
    b4ec:	|  |         move.b 127(a0),d0
    b4f0:	|  |         move.b d0,d0
    b4f2:	|  |         andi.l #255,d0
    b4f8:	|  |         move.l d0,48(sp)
    b4fc:	|  |         move.l 1c89e <DOSBase>,d0
    b502:	|  |         movea.l d0,a6
    b504:	|  |         move.l 52(sp),d1
    b508:	|  |         move.l 48(sp),d2
    b50c:	|  |         jsr -312(a6)
    b510:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b514:	|  |         move.l 156(sp),40(sp)
    b51a:	|  |         movea.l 148(sp),a0
    b51e:	|  |         move.b 128(a0),d0
    b522:	|  |         move.b d0,d0
    b524:	|  |         andi.l #255,d0
    b52a:	|  |         move.l d0,36(sp)
    b52e:	|  |         move.l 1c89e <DOSBase>,d0
    b534:	|  |         movea.l d0,a6
    b536:	|  |         move.l 40(sp),d1
    b53a:	|  |         move.l 36(sp),d2
    b53e:	|  |         jsr -312(a6)
    b542:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b546:	|  |         move.l 156(sp),28(sp)
    b54c:	|  |         movea.l 148(sp),a0
    b550:	|  |         move.b 129(a0),d0
    b554:	|  |         move.b d0,d0
    b556:	|  |         andi.l #255,d0
    b55c:	|  |         move.l d0,24(sp)
    b560:	|  |         move.l 1c89e <DOSBase>,d0
    b566:	|  |         movea.l d0,a6
    b568:	|  |         move.l 28(sp),d1
    b56c:	|  |         move.l 24(sp),d2
    b570:	|  |         jsr -312(a6)
    b574:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b578:	|  |         move.l 156(sp),16(sp)
    b57e:	|  |         movea.l 148(sp),a0
    b582:	|  |         move.b 130(a0),d0
    b586:	|  |         move.b d0,d0
    b588:	|  |         andi.l #255,d0
    b58e:	|  |         move.l d0,12(sp)
    b592:	|  |         move.l 1c89e <DOSBase>,d0
    b598:	|  |         movea.l d0,a6
    b59a:	|  |         move.l 16(sp),d1
    b59e:	|  |         move.l 12(sp),d2
    b5a2:	|  |         jsr -312(a6)
    b5a6:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b5aa:	|  |         movea.l 148(sp),a0
    b5ae:	|  |         move.l 114(a0),d0
    b5b2:	|  |         move.l 156(sp),-(sp)
    b5b6:	|  |         move.l d0,-(sp)
    b5b8:	|  |         jsr d93a <saveObjectRef>
    b5be:	|  |         addq.l #8,sp

		me = me -> next;
    b5c0:	|  |         movea.l 148(sp),a0
    b5c4:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b5ca:	|  |         addq.l #1,140(sp)
    b5ce:	|  \-------> movea.l 140(sp),a0
    b5d2:	|            cmpa.l 144(sp),a0
    b5d6:	\----------- blt.w b17a <savePeople+0x76>
	}
	return TRUE;
    b5da:	             moveq #1,d0
}
    b5dc:	             move.l (sp)+,d2
    b5de:	             movea.l (sp)+,a6
    b5e0:	             lea 144(sp),sp
    b5e4:	             rts

0000b5e6 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b5e6:	movea.l 4(sp),a0
    b5ea:	move.l 8(sp),(a0)
}
    b5ee:	nop
    b5f0:	rts

0000b5f2 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b5f2:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b5f4:	       move.l 12(sp),-(sp)
    b5f8:	       jsr a680 <findPerson>
    b5fe:	       addq.l #4,sp
    b600:	       move.l d0,(sp)
	if (! moveMe) return;
    b602:	/----- beq.s b616 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b604:	|      move.l 8(sp),-(sp)
    b608:	|      move.l 4(sp),-(sp)
    b60c:	|      jsr b61c <setMyDrawMode>
    b612:	|      addq.l #8,sp
    b614:	|  /-- bra.s b618 <setDrawMode+0x26>
	if (! moveMe) return;
    b616:	\--|-> nop
}
    b618:	   \-> addq.l #4,sp
    b61a:	       rts

0000b61c <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b61c:	       moveq #19,d0
    b61e:	       cmp.l 8(sp),d0
    b622:	/----- bcs.w bafa <setMyDrawMode+0x4de>
    b626:	|      move.l 8(sp),d0
    b62a:	|      add.l d0,d0
    b62c:	|      movea.l d0,a0
    b62e:	|      adda.l #46650,a0
    b634:	|      move.w (a0),d0
    b636:	|      jmp (b63a <setMyDrawMode+0x1e>,pc,d0.w)
    b63a:	|      .short 0x04c0
    b63c:	|      ori.l #6684712,-(a4)
    b642:	|      btst d0,-(a0)
    b644:	|      bchg d0,(a6)+
    b646:	|      bclr d0,(a4)+
    b648:	|      bset d0,(a2)+
    b64a:	|      andi.b #84,(a6)
    b64e:	|      andi.l #55575312,(a2)
    b654:	|      .short 0x02d0
    b656:	|      bclr d1,(a0)
    b658:	|      .short 0x044a
    b65a:	|      .short 0x040c
    b65c:	|      movep.l d1,1158(a6)
    b660:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b662:	|      movea.l 4(sp),a0
    b666:	|      clr.b 128(a0)
    b66a:	|      movea.l 4(sp),a0
    b66e:	|      move.b 128(a0),d0
    b672:	|      movea.l 4(sp),a0
    b676:	|      move.b d0,127(a0)
    b67a:	|      movea.l 4(sp),a0
    b67e:	|      move.b 127(a0),d0
    b682:	|      movea.l 4(sp),a0
    b686:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b68a:	|      movea.l 4(sp),a0
    b68e:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b692:	|      movea.l 4(sp),a0
    b696:	|      move.b #64,130(a0)
			break;
    b69c:	|  /-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6a0:	|  |   movea.l 4(sp),a0
    b6a4:	|  |   clr.b 128(a0)
    b6a8:	|  |   movea.l 4(sp),a0
    b6ac:	|  |   move.b 128(a0),d0
    b6b0:	|  |   movea.l 4(sp),a0
    b6b4:	|  |   move.b d0,127(a0)
    b6b8:	|  |   movea.l 4(sp),a0
    b6bc:	|  |   move.b 127(a0),d0
    b6c0:	|  |   movea.l 4(sp),a0
    b6c4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b6c8:	|  |   movea.l 4(sp),a0
    b6cc:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b6d0:	|  |   movea.l 4(sp),a0
    b6d4:	|  |   move.b #-128,130(a0)
			break;
    b6da:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6de:	|  |   movea.l 4(sp),a0
    b6e2:	|  |   clr.b 128(a0)
    b6e6:	|  |   movea.l 4(sp),a0
    b6ea:	|  |   move.b 128(a0),d0
    b6ee:	|  |   movea.l 4(sp),a0
    b6f2:	|  |   move.b d0,127(a0)
    b6f6:	|  |   movea.l 4(sp),a0
    b6fa:	|  |   move.b 127(a0),d0
    b6fe:	|  |   movea.l 4(sp),a0
    b702:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b706:	|  |   movea.l 4(sp),a0
    b70a:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b70e:	|  |   movea.l 4(sp),a0
    b712:	|  |   move.b #-64,130(a0)
			break;
    b718:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b71c:	|  |   movea.l 4(sp),a0
    b720:	|  |   clr.b 128(a0)
    b724:	|  |   movea.l 4(sp),a0
    b728:	|  |   move.b 128(a0),d0
    b72c:	|  |   movea.l 4(sp),a0
    b730:	|  |   move.b d0,127(a0)
    b734:	|  |   movea.l 4(sp),a0
    b738:	|  |   move.b 127(a0),d0
    b73c:	|  |   movea.l 4(sp),a0
    b740:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b744:	|  |   movea.l 4(sp),a0
    b748:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b74c:	|  |   movea.l 4(sp),a0
    b750:	|  |   move.b #-2,130(a0)
			break;
    b756:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b75a:	|  |   movea.l 4(sp),a0
    b75e:	|  |   clr.b 128(a0)
    b762:	|  |   movea.l 4(sp),a0
    b766:	|  |   move.b 128(a0),d0
    b76a:	|  |   movea.l 4(sp),a0
    b76e:	|  |   move.b d0,127(a0)
    b772:	|  |   movea.l 4(sp),a0
    b776:	|  |   move.b 127(a0),d0
    b77a:	|  |   movea.l 4(sp),a0
    b77e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b782:	|  |   movea.l 4(sp),a0
    b786:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b78c:	|  |   movea.l 4(sp),a0
    b790:	|  |   clr.b 130(a0)
			break;
    b794:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b798:	|  |   movea.l 4(sp),a0
    b79c:	|  |   clr.b 128(a0)
    b7a0:	|  |   movea.l 4(sp),a0
    b7a4:	|  |   move.b 128(a0),d0
    b7a8:	|  |   movea.l 4(sp),a0
    b7ac:	|  |   move.b d0,127(a0)
    b7b0:	|  |   movea.l 4(sp),a0
    b7b4:	|  |   move.b 127(a0),d0
    b7b8:	|  |   movea.l 4(sp),a0
    b7bc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b7c0:	|  |   movea.l 4(sp),a0
    b7c4:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b7ca:	|  |   movea.l 4(sp),a0
    b7ce:	|  |   clr.b 130(a0)
			break;
    b7d2:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7d6:	|  |   movea.l 4(sp),a0
    b7da:	|  |   clr.b 128(a0)
    b7de:	|  |   movea.l 4(sp),a0
    b7e2:	|  |   move.b 128(a0),d0
    b7e6:	|  |   movea.l 4(sp),a0
    b7ea:	|  |   move.b d0,127(a0)
    b7ee:	|  |   movea.l 4(sp),a0
    b7f2:	|  |   move.b 127(a0),d0
    b7f6:	|  |   movea.l 4(sp),a0
    b7fa:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b7fe:	|  |   movea.l 4(sp),a0
    b802:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b808:	|  |   movea.l 4(sp),a0
    b80c:	|  |   clr.b 130(a0)
			break;
    b810:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b814:	|  |   movea.l 4(sp),a0
    b818:	|  |   clr.b 128(a0)
    b81c:	|  |   movea.l 4(sp),a0
    b820:	|  |   move.b 128(a0),d0
    b824:	|  |   movea.l 4(sp),a0
    b828:	|  |   move.b d0,127(a0)
    b82c:	|  |   movea.l 4(sp),a0
    b830:	|  |   move.b 127(a0),d0
    b834:	|  |   movea.l 4(sp),a0
    b838:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b83c:	|  |   movea.l 4(sp),a0
    b840:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b844:	|  |   movea.l 4(sp),a0
    b848:	|  |   clr.b 130(a0)
			break;
    b84c:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b850:	|  |   movea.l 4(sp),a0
    b854:	|  |   clr.b 128(a0)
    b858:	|  |   movea.l 4(sp),a0
    b85c:	|  |   move.b 128(a0),d0
    b860:	|  |   movea.l 4(sp),a0
    b864:	|  |   move.b d0,127(a0)
    b868:	|  |   movea.l 4(sp),a0
    b86c:	|  |   move.b 127(a0),d0
    b870:	|  |   movea.l 4(sp),a0
    b874:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b878:	|  |   movea.l 4(sp),a0
    b87c:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b880:	|  |   movea.l 4(sp),a0
    b884:	|  |   move.b #64,130(a0)
			break;
    b88a:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b88e:	|  |   movea.l 4(sp),a0
    b892:	|  |   clr.b 128(a0)
    b896:	|  |   movea.l 4(sp),a0
    b89a:	|  |   move.b 128(a0),d0
    b89e:	|  |   movea.l 4(sp),a0
    b8a2:	|  |   move.b d0,127(a0)
    b8a6:	|  |   movea.l 4(sp),a0
    b8aa:	|  |   move.b 127(a0),d0
    b8ae:	|  |   movea.l 4(sp),a0
    b8b2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b8b6:	|  |   movea.l 4(sp),a0
    b8ba:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b8be:	|  |   movea.l 4(sp),a0
    b8c2:	|  |   move.b #-128,130(a0)
			break;
    b8c8:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8cc:	|  |   movea.l 4(sp),a0
    b8d0:	|  |   clr.b 128(a0)
    b8d4:	|  |   movea.l 4(sp),a0
    b8d8:	|  |   move.b 128(a0),d0
    b8dc:	|  |   movea.l 4(sp),a0
    b8e0:	|  |   move.b d0,127(a0)
    b8e4:	|  |   movea.l 4(sp),a0
    b8e8:	|  |   move.b 127(a0),d0
    b8ec:	|  |   movea.l 4(sp),a0
    b8f0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b8f4:	|  |   movea.l 4(sp),a0
    b8f8:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b8fc:	|  |   movea.l 4(sp),a0
    b900:	|  |   move.b #-64,130(a0)
			break;
    b906:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b90a:	|  |   movea.l 4(sp),a0
    b90e:	|  |   move.b #-128,128(a0)
    b914:	|  |   movea.l 4(sp),a0
    b918:	|  |   move.b 128(a0),d0
    b91c:	|  |   movea.l 4(sp),a0
    b920:	|  |   move.b d0,127(a0)
    b924:	|  |   movea.l 4(sp),a0
    b928:	|  |   move.b 127(a0),d0
    b92c:	|  |   movea.l 4(sp),a0
    b930:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b934:	|  |   movea.l 4(sp),a0
    b938:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b93e:	|  |   movea.l 4(sp),a0
    b942:	|  |   clr.b 130(a0)
			break;
    b946:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b94a:	|  |   movea.l 4(sp),a0
    b94e:	|  |   move.b #-128,128(a0)
    b954:	|  |   movea.l 4(sp),a0
    b958:	|  |   move.b 128(a0),d0
    b95c:	|  |   movea.l 4(sp),a0
    b960:	|  |   move.b d0,127(a0)
    b964:	|  |   movea.l 4(sp),a0
    b968:	|  |   move.b 127(a0),d0
    b96c:	|  |   movea.l 4(sp),a0
    b970:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b974:	|  |   movea.l 4(sp),a0
    b978:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b97e:	|  |   movea.l 4(sp),a0
    b982:	|  |   clr.b 130(a0)
			break;
    b986:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b98a:	|  |   movea.l 4(sp),a0
    b98e:	|  |   move.b #-128,128(a0)
    b994:	|  |   movea.l 4(sp),a0
    b998:	|  |   move.b 128(a0),d0
    b99c:	|  |   movea.l 4(sp),a0
    b9a0:	|  |   move.b d0,127(a0)
    b9a4:	|  |   movea.l 4(sp),a0
    b9a8:	|  |   move.b 127(a0),d0
    b9ac:	|  |   movea.l 4(sp),a0
    b9b0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b9b4:	|  |   movea.l 4(sp),a0
    b9b8:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b9be:	|  |   movea.l 4(sp),a0
    b9c2:	|  |   clr.b 130(a0)
			break;
    b9c6:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b9ca:	|  |   movea.l 4(sp),a0
    b9ce:	|  |   move.b #-128,128(a0)
    b9d4:	|  |   movea.l 4(sp),a0
    b9d8:	|  |   move.b 128(a0),d0
    b9dc:	|  |   movea.l 4(sp),a0
    b9e0:	|  |   move.b d0,127(a0)
    b9e4:	|  |   movea.l 4(sp),a0
    b9e8:	|  |   move.b 127(a0),d0
    b9ec:	|  |   movea.l 4(sp),a0
    b9f0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9f4:	|  |   movea.l 4(sp),a0
    b9f8:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b9fc:	|  |   movea.l 4(sp),a0
    ba00:	|  |   clr.b 130(a0)
			break;
    ba04:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba08:	|  |   movea.l 4(sp),a0
    ba0c:	|  |   st 128(a0)
    ba10:	|  |   movea.l 4(sp),a0
    ba14:	|  |   move.b 128(a0),d0
    ba18:	|  |   movea.l 4(sp),a0
    ba1c:	|  |   move.b d0,127(a0)
    ba20:	|  |   movea.l 4(sp),a0
    ba24:	|  |   move.b 127(a0),d0
    ba28:	|  |   movea.l 4(sp),a0
    ba2c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    ba30:	|  |   movea.l 4(sp),a0
    ba34:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ba3a:	|  |   movea.l 4(sp),a0
    ba3e:	|  |   clr.b 130(a0)
			break;
    ba42:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba46:	|  |   movea.l 4(sp),a0
    ba4a:	|  |   st 128(a0)
    ba4e:	|  |   movea.l 4(sp),a0
    ba52:	|  |   move.b 128(a0),d0
    ba56:	|  |   movea.l 4(sp),a0
    ba5a:	|  |   move.b d0,127(a0)
    ba5e:	|  |   movea.l 4(sp),a0
    ba62:	|  |   move.b 127(a0),d0
    ba66:	|  |   movea.l 4(sp),a0
    ba6a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba6e:	|  |   movea.l 4(sp),a0
    ba72:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba78:	|  |   movea.l 4(sp),a0
    ba7c:	|  |   clr.b 130(a0)
			break;
    ba80:	|  +-- bra.w bb34 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    ba84:	|  |   movea.l 4(sp),a0
    ba88:	|  |   st 128(a0)
    ba8c:	|  |   movea.l 4(sp),a0
    ba90:	|  |   move.b 128(a0),d0
    ba94:	|  |   movea.l 4(sp),a0
    ba98:	|  |   move.b d0,127(a0)
    ba9c:	|  |   movea.l 4(sp),a0
    baa0:	|  |   move.b 127(a0),d0
    baa4:	|  |   movea.l 4(sp),a0
    baa8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    baac:	|  |   movea.l 4(sp),a0
    bab0:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bab6:	|  |   movea.l 4(sp),a0
    baba:	|  |   clr.b 130(a0)
			break;
    babe:	|  +-- bra.s bb34 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bac0:	|  |   movea.l 4(sp),a0
    bac4:	|  |   st 128(a0)
    bac8:	|  |   movea.l 4(sp),a0
    bacc:	|  |   move.b 128(a0),d0
    bad0:	|  |   movea.l 4(sp),a0
    bad4:	|  |   move.b d0,127(a0)
    bad8:	|  |   movea.l 4(sp),a0
    badc:	|  |   move.b 127(a0),d0
    bae0:	|  |   movea.l 4(sp),a0
    bae4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bae8:	|  |   movea.l 4(sp),a0
    baec:	|  |   st 129(a0)
			moveMe->transparency = 0;
    baf0:	|  |   movea.l 4(sp),a0
    baf4:	|  |   clr.b 130(a0)
			break;
    baf8:	|  +-- bra.s bb34 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bafa:	\--|-> movea.l 4(sp),a0
    bafe:	   |   clr.b 128(a0)
    bb02:	   |   movea.l 4(sp),a0
    bb06:	   |   move.b 128(a0),d0
    bb0a:	   |   movea.l 4(sp),a0
    bb0e:	   |   move.b d0,127(a0)
    bb12:	   |   movea.l 4(sp),a0
    bb16:	   |   move.b 127(a0),d0
    bb1a:	   |   movea.l 4(sp),a0
    bb1e:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bb22:	   |   movea.l 4(sp),a0
    bb26:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    bb2a:	   |   movea.l 4(sp),a0
    bb2e:	   |   clr.b 130(a0)
			break;
    bb32:	   |   nop
	}
}
    bb34:	   \-> nop
    bb36:	       rts

0000bb38 <shufflePeople>:

void shufflePeople () {
    bb38:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bb3c:	             move.l #116986,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bb44:	             move.l 1c8fa <allPeople>,d0
    bb4a:	/----------- beq.w bc20 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bb4e:	|     /----- bra.w bc10 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bb52:	|  /--|----> movea.l 16(sp),a0
    bb56:	|  |  |      movea.l (a0),a0
    bb58:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bb5e:	|  |  |      movea.l 16(sp),a0
    bb62:	|  |  |      movea.l (a0),a0
    bb64:	|  |  |      move.l 118(a0),d0
    bb68:	|  |  |      moveq #1,d1
    bb6a:	|  |  |      and.l d1,d0
    bb6c:	|  |  |  /-- beq.s bb84 <shufflePeople+0x4c>
    bb6e:	|  |  |  |   move.l #1148846080,-(sp)
    bb74:	|  |  |  |   move.l 16(sp),-(sp)
    bb78:	|  |  |  |   jsr 1739e <__addsf3>
    bb7e:	|  |  |  |   addq.l #8,sp
    bb80:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bb84:	|  |  |  \-> movea.l 16(sp),a0
    bb88:	|  |  |      movea.l (a0),a0
    bb8a:	|  |  |      movea.l 36(a0),a0
    bb8e:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bb94:	|  |  |      movea.l 16(sp),a0
    bb98:	|  |  |      movea.l (a0),a0
    bb9a:	|  |  |      movea.l 36(a0),a0
    bb9e:	|  |  |      move.l 118(a0),d0
    bba2:	|  |  |      moveq #1,d1
    bba4:	|  |  |      and.l d1,d0
    bba6:	|  |  |  /-- beq.s bbbe <shufflePeople+0x86>
    bba8:	|  |  |  |   move.l #1148846080,-(sp)
    bbae:	|  |  |  |   move.l 12(sp),-(sp)
    bbb2:	|  |  |  |   jsr 1739e <__addsf3>
    bbb8:	|  |  |  |   addq.l #8,sp
    bbba:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bbbe:	|  |  |  \-> move.l 8(sp),-(sp)
    bbc2:	|  |  |      move.l 16(sp),-(sp)
    bbc6:	|  |  |      jsr 17758 <__gtsf2>
    bbcc:	|  |  |      addq.l #8,sp
    bbce:	|  |  |      tst.l d0
    bbd0:	|  |  |  /-- ble.s bc02 <shufflePeople+0xca>
			A = (*thisReference);
    bbd2:	|  |  |  |   movea.l 16(sp),a0
    bbd6:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bbda:	|  |  |  |   movea.l 16(sp),a0
    bbde:	|  |  |  |   movea.l (a0),a0
    bbe0:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bbe4:	|  |  |  |   movea.l (sp),a0
    bbe6:	|  |  |  |   move.l 36(a0),d0
    bbea:	|  |  |  |   movea.l 4(sp),a0
    bbee:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bbf2:	|  |  |  |   movea.l (sp),a0
    bbf4:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bbfa:	|  |  |  |   movea.l 16(sp),a0
    bbfe:	|  |  |  |   move.l (sp),(a0)
    bc00:	|  |  +--|-- bra.s bc10 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bc02:	|  |  |  \-> movea.l 16(sp),a0
    bc06:	|  |  |      move.l (a0),d0
    bc08:	|  |  |      moveq #36,d1
    bc0a:	|  |  |      add.l d0,d1
    bc0c:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bc10:	|  |  \----> movea.l 16(sp),a0
    bc14:	|  |         movea.l (a0),a0
    bc16:	|  |         move.l 36(a0),d0
    bc1a:	|  \-------- bne.w bb52 <shufflePeople+0x1a>
    bc1e:	|        /-- bra.s bc22 <shufflePeople+0xea>
	if (!allPeople) return;
    bc20:	\--------|-> nop
		}
	}
}
    bc22:	         \-> lea 20(sp),sp
    bc26:	             rts

0000bc28 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bc28:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bc2a:	       tst.l 8(sp)
    bc2e:	   /-- bgt.s bc34 <setCharacterWalkSpeed+0xc>
    bc30:	   |   clr.w d0
    bc32:	/--|-- bra.s bc52 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bc34:	|  \-> move.l 12(sp),-(sp)
    bc38:	|      jsr a680 <findPerson>
    bc3e:	|      addq.l #4,sp
    bc40:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bc42:	|  /-- bne.s bc48 <setCharacterWalkSpeed+0x20>
    bc44:	|  |   clr.w d0
    bc46:	+--|-- bra.s bc52 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bc48:	|  \-> movea.l (sp),a0
    bc4a:	|      move.l 8(sp),28(a0)
	return TRUE;
    bc50:	|      moveq #1,d0
}
    bc52:	\----> addq.l #4,sp
    bc54:	       rts

0000bc56 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bc56:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bc58:	       move.l 8(sp),-(sp)
    bc5c:	       jsr a680 <findPerson>
    bc62:	       addq.l #4,sp
    bc64:	       move.l d0,(sp)
    if (thisPerson) {
    bc66:	/----- beq.s bc86 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bc68:	|      movea.l (sp),a0
    bc6a:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bc70:	|      moveq #2,d0
    bc72:	|      and.l 12(sp),d0
    bc76:	|  /-- beq.s bc82 <setPersonExtra+0x2c>
    bc78:	|  |   movea.l (sp),a0
    bc7a:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bc82:	|  \-> moveq #1,d0
    bc84:	|  /-- bra.s bc88 <setPersonExtra+0x32>
    }
    return FALSE;
    bc86:	\--|-> clr.w d0
}
    bc88:	   \-> addq.l #4,sp
    bc8a:	       rts

0000bc8c <setScale>:


void setScale (short int h, short int d) {
    bc8c:	subq.l #4,sp
    bc8e:	move.l 8(sp),d1
    bc92:	move.l 12(sp),d0
    bc96:	move.w d1,d1
    bc98:	move.w d1,2(sp)
    bc9c:	move.w d0,d0
    bc9e:	move.w d0,(sp)
	scaleHorizon = h;
    bca0:	move.w 2(sp),1c228 <scaleHorizon>
	scaleDivide = d;
    bca8:	move.w (sp),1c22a <scaleDivide>
}
    bcae:	nop
    bcb0:	addq.l #4,sp
    bcb2:	rts

0000bcb4 <setShown>:

void setShown (BOOL h, int ob) {
    bcb4:	    subq.l #8,sp
    bcb6:	    move.l 12(sp),d0
    bcba:	    move.w d0,d0
    bcbc:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bcc0:	    move.l 16(sp),-(sp)
    bcc4:	    jsr a680 <findPerson>
    bcca:	    addq.l #4,sp
    bccc:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bcd0:	/-- beq.s bcdc <setShown+0x28>
    bcd2:	|   movea.l 4(sp),a0
    bcd6:	|   move.w 2(sp),104(a0)
}
    bcdc:	\-> nop
    bcde:	    addq.l #8,sp
    bce0:	    rts

0000bce2 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bce2:	       subq.l #8,sp
    bce4:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bce6:	       movea.l 16(sp),a0
    bcea:	       move.l 92(a0),d0
    bcee:	       move.l d0,d1
    bcf0:	       addi.l #360,d1
    bcf6:	       movea.l 16(sp),a0
    bcfa:	       move.l 96(a0),d0
    bcfe:	       move.l d1,d2
    bd00:	       sub.l d0,d2
    bd02:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bd06:	       movea.l 16(sp),a0
    bd0a:	       move.l 122(a0),d0
    bd0e:	   /-- beq.s bd1a <spinStep+0x38>
    bd10:	   |   movea.l 16(sp),a0
    bd14:	   |   move.l 122(a0),d0
    bd18:	/--|-- bra.s bd34 <spinStep+0x52>
    bd1a:	|  \-> movea.l 16(sp),a0
    bd1e:	|      movea.l 80(a0),a0
    bd22:	|      move.l 4(a0),d0
    bd26:	|      move.l d0,-(sp)
    bd28:	|      pea 168 <decodeFilename+0x50>
    bd2c:	|      jsr 17bec <__divsi3>
    bd32:	|      addq.l #8,sp
    bd34:	\----> move.l d0,4(sp)
	while (diff > 180) {
    bd38:	   /-- bra.s bd42 <spinStep+0x60>
		diff -= 360;
    bd3a:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bd42:	|  \-> cmpi.l #180,8(sp)
    bd4a:	\----- bgt.s bd3a <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bd4c:	       move.l 8(sp),d0
    bd50:	       cmp.l 4(sp),d0
    bd54:	   /-- blt.s bd72 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bd56:	   |   movea.l 16(sp),a0
    bd5a:	   |   move.l 92(a0),d0
    bd5e:	   |   sub.l 4(sp),d0
    bd62:	   |   move.l d0,-(sp)
    bd64:	   |   move.l 20(sp),-(sp)
    bd68:	   |   jsr be52 <turnMeAngle>
    bd6e:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bd70:	/--|-- bra.s bdb8 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bd72:	|  \-> move.l 4(sp),d0
    bd76:	|      neg.l d0
    bd78:	|      cmp.l 8(sp),d0
    bd7c:	|  /-- blt.s bd9a <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bd7e:	|  |   movea.l 16(sp),a0
    bd82:	|  |   move.l 92(a0),d0
    bd86:	|  |   add.l 4(sp),d0
    bd8a:	|  |   move.l d0,-(sp)
    bd8c:	|  |   move.l 20(sp),-(sp)
    bd90:	|  |   jsr be52 <turnMeAngle>
    bd96:	|  |   addq.l #8,sp
}
    bd98:	+--|-- bra.s bdb8 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bd9a:	|  \-> movea.l 16(sp),a0
    bd9e:	|      move.l 96(a0),d0
    bda2:	|      move.l d0,-(sp)
    bda4:	|      move.l 20(sp),-(sp)
    bda8:	|      jsr be52 <turnMeAngle>
    bdae:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bdb0:	|      movea.l 16(sp),a0
    bdb4:	|      clr.w 66(a0)
}
    bdb8:	\----> nop
    bdba:	       move.l (sp)+,d2
    bdbc:	       addq.l #8,sp
    bdbe:	       rts

0000bdc0 <stopPerson>:


BOOL stopPerson (int o) {
    bdc0:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bdc2:	       move.l 8(sp),-(sp)
    bdc6:	       jsr a680 <findPerson>
    bdcc:	       addq.l #4,sp
    bdce:	       move.l d0,(sp)
    if (moveMe)
    bdd0:	/----- beq.s be0e <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bdd2:	|      movea.l (sp),a0
    bdd4:	|      move.l 68(a0),d0
    bdd8:	+----- beq.s be0e <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bdda:	|      movea.l (sp),a0
    bddc:	|      move.l 68(a0),d0
    bde0:	|      move.l d0,-(sp)
    bde2:	|      jsr 47c6 <abortFunction>
    bde8:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bdea:	|      movea.l (sp),a0
    bdec:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bdf0:	|      movea.l (sp),a0
    bdf2:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bdf6:	|      movea.l (sp),a0
    bdf8:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bdfc:	|      clr.l -(sp)
    bdfe:	|      move.l 4(sp),-(sp)
    be02:	|      jsr 821e <setFrames>
    be08:	|      addq.l #8,sp
            return TRUE;
    be0a:	|      moveq #1,d0
    be0c:	|  /-- bra.s be10 <stopPerson+0x50>
        }
    return FALSE;
    be0e:	\--|-> clr.w d0
}
    be10:	   \-> addq.l #4,sp
    be12:	       rts

0000be14 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    be14:	       subq.l #8,sp
	int total = 0;
    be16:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    be1a:	       clr.l (sp)
    be1c:	   /-- bra.s be3e <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    be1e:	/--|-> movea.l 12(sp),a0
    be22:	|  |   movea.l 4(a0),a0
    be26:	|  |   move.l (sp),d1
    be28:	|  |   move.l d1,d0
    be2a:	|  |   add.l d0,d0
    be2c:	|  |   add.l d1,d0
    be2e:	|  |   add.l d0,d0
    be30:	|  |   add.l d0,d0
    be32:	|  |   adda.l d0,a0
    be34:	|  |   move.l 4(a0),d0
    be38:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    be3c:	|  |   addq.l #1,(sp)
    be3e:	|  \-> movea.l 12(sp),a0
    be42:	|      move.l 8(a0),d0
    be46:	|      cmp.l (sp),d0
    be48:	\----- bgt.s be1e <timeForAnim+0xa>
	}
	return total;
    be4a:	       move.l 4(sp),d0
}
    be4e:	       addq.l #8,sp
    be50:	       rts

0000be52 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    be52:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    be54:	       movea.l 8(sp),a0
    be58:	       movea.l 80(a0),a0
    be5c:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    be60:	       movea.l 8(sp),a0
    be64:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    be6a:	       move.l (sp),-(sp)
    be6c:	       pea b4 <_start+0xb4>
    be70:	       jsr 17bec <__divsi3>
    be76:	       addq.l #8,sp
    be78:	       move.l d0,d1
    be7a:	       addi.l #180,d1
    be80:	       movea.l 8(sp),a0
    be84:	       move.l 100(a0),d0
    be88:	       add.l d1,d0
    be8a:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    be8e:	   /-- bra.s be98 <turnMeAngle+0x46>
    be90:	/--|-> addi.l #-360,12(sp)
    be98:	|  \-> cmpi.l #359,12(sp)
    bea0:	\----- bgt.s be90 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bea2:	       move.l (sp),-(sp)
    bea4:	       move.l 16(sp),-(sp)
    bea8:	       jsr 17b6e <__mulsi3>
    beae:	       addq.l #8,sp
    beb0:	       pea 168 <decodeFilename+0x50>
    beb4:	       move.l d0,-(sp)
    beb6:	       jsr 17bec <__divsi3>
    bebc:	       addq.l #8,sp
    bebe:	       movea.l 8(sp),a0
    bec2:	       move.l d0,106(a0)
}
    bec6:	       nop
    bec8:	       addq.l #4,sp
    beca:	       rts

0000becc <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    becc:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bece:	          move.l 8(sp),-(sp)
    bed2:	          jsr a680 <findPerson>
    bed8:	          addq.l #4,sp
    beda:	          move.l d0,(sp)
    if (thisPerson) {
    bedc:	/-------- beq.s bf3c <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bede:	|         movea.l (sp),a0
    bee0:	|         move.l 68(a0),d0
    bee4:	|     /-- beq.s bef6 <turnPersonToFace+0x2a>
    bee6:	|     |   movea.l (sp),a0
    bee8:	|     |   move.l 68(a0),d0
    beec:	|     |   move.l d0,-(sp)
    beee:	|     |   jsr 47c6 <abortFunction>
    bef4:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bef6:	|     \-> movea.l (sp),a0
    bef8:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    befc:	|         movea.l (sp),a0
    befe:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bf02:	|         movea.l (sp),a0
    bf04:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bf08:	|         move.l 12(sp),-(sp)
    bf0c:	|         move.l 4(sp),-(sp)
    bf10:	|         jsr be52 <turnMeAngle>
    bf16:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bf18:	|         movea.l 1c8f2 <speech>,a0
    bf1e:	|         move.l (a0),d0
    bf20:	|         cmp.l (sp),d0
    bf22:	|  /----- bne.s bf28 <turnPersonToFace+0x5c>
    bf24:	|  |      moveq #2,d0
    bf26:	|  |  /-- bra.s bf2a <turnPersonToFace+0x5e>
    bf28:	|  \--|-> moveq #0,d0
    bf2a:	|     \-> move.l d0,-(sp)
    bf2c:	|         move.l 4(sp),-(sp)
    bf30:	|         jsr 821e <setFrames>
    bf36:	|         addq.l #8,sp
        return TRUE;
    bf38:	|         moveq #1,d0
    bf3a:	|     /-- bra.s bf3e <turnPersonToFace+0x72>
    }
    return FALSE;
    bf3c:	\-----|-> clr.w d0
}
    bf3e:	      \-> addq.l #4,sp
    bf40:	          rts

0000bf42 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bf42:	                lea -20(sp),sp
    bf46:	                move.l d3,-(sp)
    bf48:	                move.l d2,-(sp)
    bf4a:	                move.l 36(sp),d0
    bf4e:	                move.w d0,d0
    bf50:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bf54:	                cmpi.w #-1,10(sp)
    bf5a:	/-------------- bne.s bf62 <walkMe+0x20>
    bf5c:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bf62:	>-------------> movea.l 32(sp),a0
    bf66:	|               move.l 48(a0),d0
    bf6a:	|               move.l d0,-(sp)
    bf6c:	|               jsr 175ec <__floatsisf>
    bf72:	|               addq.l #4,sp
    bf74:	|               move.l d0,d1
    bf76:	|               movea.l 32(sp),a0
    bf7a:	|               move.l (a0),d0
    bf7c:	|               move.l d0,-(sp)
    bf7e:	|               move.l d1,-(sp)
    bf80:	|               jsr 178e0 <__subsf3>
    bf86:	|               addq.l #8,sp
    bf88:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    bf8c:	|               movea.l 32(sp),a0
    bf90:	|               move.l 52(a0),d0
    bf94:	|               move.l d0,-(sp)
    bf96:	|               jsr 175ec <__floatsisf>
    bf9c:	|               addq.l #4,sp
    bf9e:	|               move.l d0,d1
    bfa0:	|               movea.l 32(sp),a0
    bfa4:	|               move.l 4(a0),d0
    bfa8:	|               move.l d0,-(sp)
    bfaa:	|               move.l d1,-(sp)
    bfac:	|               jsr 178e0 <__subsf3>
    bfb2:	|               addq.l #8,sp
    bfb4:	|               move.l d0,-(sp)
    bfb6:	|               move.l d0,-(sp)
    bfb8:	|               jsr 1739e <__addsf3>
    bfbe:	|               addq.l #8,sp
    bfc0:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    bfc4:	|               movea.l 32(sp),a0
    bfc8:	|               move.l 32(a0),d2
    bfcc:	|               movea.l 32(sp),a0
    bfd0:	|               move.l 28(a0),d0
    bfd4:	|               move.l d0,-(sp)
    bfd6:	|               jsr 175ec <__floatsisf>
    bfdc:	|               addq.l #4,sp
    bfde:	|               move.l d0,-(sp)
    bfe0:	|               move.l d2,-(sp)
    bfe2:	|               jsr 1769e <__mulsf3>
    bfe8:	|               addq.l #8,sp
    bfea:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    bfee:	|               move.l 24(sp),-(sp)
    bff2:	|               jsr 17504 <__extendsfdf2>
    bff8:	|               addq.l #4,sp
    bffa:	|               move.l #-1717986918,-(sp)
    c000:	|               move.l #1070176665,-(sp)
    c006:	|               move.l d1,-(sp)
    c008:	|               move.l d0,-(sp)
    c00a:	|               jsr 177c4 <__ltdf2>
    c010:	|               lea 16(sp),sp
    c014:	|               tst.l d0
    c016:	|           /-- bge.s c020 <walkMe+0xde>
    c018:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c020:	|           \-> move.l 20(sp),-(sp)
    c024:	|               jsr 17584 <__fixsfsi>
    c02a:	|               addq.l #4,sp
    c02c:	|               move.l d0,-(sp)
    c02e:	|               jsr 9270 <TF_abs>
    c034:	|               addq.l #4,sp
    c036:	|               move.l d0,d2
    c038:	|               move.l 16(sp),-(sp)
    c03c:	|               jsr 17584 <__fixsfsi>
    c042:	|               addq.l #4,sp
    c044:	|               move.l d0,-(sp)
    c046:	|               jsr 9270 <TF_abs>
    c04c:	|               addq.l #4,sp
    c04e:	|               cmp.l d2,d0
    c050:	|        /----- bgt.s c074 <walkMe+0x132>
    c052:	|        |      move.l 20(sp),-(sp)
    c056:	|        |      jsr 17584 <__fixsfsi>
    c05c:	|        |      addq.l #4,sp
    c05e:	|        |      move.l d0,-(sp)
    c060:	|        |      jsr 9270 <TF_abs>
    c066:	|        |      addq.l #4,sp
    c068:	|        |      move.l d0,-(sp)
    c06a:	|        |      jsr 175ec <__floatsisf>
    c070:	|        |      addq.l #4,sp
    c072:	|        |  /-- bra.s c094 <walkMe+0x152>
    c074:	|        \--|-> move.l 16(sp),-(sp)
    c078:	|           |   jsr 17584 <__fixsfsi>
    c07e:	|           |   addq.l #4,sp
    c080:	|           |   move.l d0,-(sp)
    c082:	|           |   jsr 9270 <TF_abs>
    c088:	|           |   addq.l #4,sp
    c08a:	|           |   move.l d0,-(sp)
    c08c:	|           |   jsr 175ec <__floatsisf>
    c092:	|           |   addq.l #4,sp
    c094:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c098:	|               move.l 12(sp),-(sp)
    c09c:	|               jsr 17584 <__fixsfsi>
    c0a2:	|               addq.l #4,sp
    c0a4:	|               move.l d0,-(sp)
    c0a6:	|               jsr 9270 <TF_abs>
    c0ac:	|               addq.l #4,sp
    c0ae:	|               move.l d0,-(sp)
    c0b0:	|               jsr 175ec <__floatsisf>
    c0b6:	|               addq.l #4,sp
    c0b8:	|               move.l d0,-(sp)
    c0ba:	|               move.l 28(sp),-(sp)
    c0be:	|               jsr 17812 <__ltsf2>
    c0c4:	|               addq.l #8,sp
    c0c6:	|               tst.l d0
    c0c8:	|        /----- bge.w c17a <walkMe+0x238>
			if (thisPerson->spinning) {
    c0cc:	|        |      movea.l 32(sp),a0
    c0d0:	|        |      move.w 66(a0),d0
    c0d4:	|        |  /-- beq.s c0f2 <walkMe+0x1b0>
				spinStep(thisPerson);
    c0d6:	|        |  |   move.l 32(sp),-(sp)
    c0da:	|        |  |   jsr bce2 <spinStep>
    c0e0:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c0e2:	|        |  |   pea 1 <_start+0x1>
    c0e6:	|        |  |   move.l 36(sp),-(sp)
    c0ea:	|        |  |   jsr 821e <setFrames>
    c0f0:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c0f2:	|        |  \-> move.l 24(sp),-(sp)
    c0f6:	|        |      move.l 16(sp),-(sp)
    c0fa:	|        |      jsr 17498 <__divsf3>
    c100:	|        |      addq.l #8,sp
    c102:	|        |      move.l d0,24(sp)
			if (move)
    c106:	|        |      tst.w 10(sp)
    c10a:	|        |  /-- beq.s c174 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c10c:	|        |  |   movea.l 32(sp),a0
    c110:	|        |  |   move.l 4(a0),d2
    c114:	|        |  |   move.l 24(sp),d0
    c118:	|        |  |   move.l d0,-(sp)
    c11a:	|        |  |   move.l d0,-(sp)
    c11c:	|        |  |   jsr 1739e <__addsf3>
    c122:	|        |  |   addq.l #8,sp
    c124:	|        |  |   move.l d0,-(sp)
    c126:	|        |  |   move.l 20(sp),-(sp)
    c12a:	|        |  |   jsr 17498 <__divsf3>
    c130:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c132:	|        |  |   move.l d0,-(sp)
    c134:	|        |  |   move.l d2,-(sp)
    c136:	|        |  |   jsr 1739e <__addsf3>
    c13c:	|        |  |   addq.l #8,sp
    c13e:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c140:	|        |  |   movea.l 32(sp),a0
    c144:	|        |  |   move.l (a0),d3
    c146:	|        |  |   move.l 24(sp),-(sp)
    c14a:	|        |  |   move.l 24(sp),-(sp)
    c14e:	|        |  |   jsr 17498 <__divsf3>
    c154:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c156:	|        |  |   move.l d0,-(sp)
    c158:	|        |  |   move.l d3,-(sp)
    c15a:	|        |  |   jsr 1739e <__addsf3>
    c160:	|        |  |   addq.l #8,sp
    c162:	|        |  |   move.l d2,-(sp)
    c164:	|        |  |   move.l d0,-(sp)
    c166:	|        |  |   move.l 40(sp),-(sp)
    c16a:	|        |  |   jsr adc8 <moveAndScale>
    c170:	|        |  |   lea 12(sp),sp
			return TRUE;
    c174:	|        |  \-> moveq #1,d0
    c176:	|  /-----|----- bra.w c228 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c17a:	|  |     \----> movea.l 32(sp),a0
    c17e:	|  |            move.l 56(a0),d0
    c182:	|  |            moveq #-1,d1
    c184:	|  |            cmp.l d0,d1
    c186:	|  |        /-- bne.s c1be <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c188:	|  |        |   movea.l 32(sp),a0
    c18c:	|  |        |   move.l 110(a0),d0
    c190:	|  |        |   moveq #-1,d1
    c192:	|  |        |   cmp.l d0,d1
    c194:	|  |  /-----|-- beq.s c1d2 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c196:	|  |  |     |   movea.l 32(sp),a0
    c19a:	|  |  |     |   move.l 110(a0),d0
    c19e:	|  |  |     |   movea.l 32(sp),a0
    c1a2:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c1a6:	|  |  |     |   movea.l 32(sp),a0
    c1aa:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c1b0:	|  |  |     |   move.l 32(sp),-(sp)
    c1b4:	|  |  |     |   jsr bce2 <spinStep>
    c1ba:	|  |  |     |   addq.l #4,sp
			}
			break;
    c1bc:	|  |  +-----|-- bra.s c1d2 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c1be:	|  |  |     \-> move.l 32(sp),-(sp)
    c1c2:	|  |  |         jsr 99e2 <doBorderStuff>
    c1c8:	|  |  |         addq.l #4,sp
    c1ca:	|  |  |         tst.w d0
    c1cc:	|  |  |  /----- beq.s c1d6 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c1ce:	\--|--|--|----- bra.w bf62 <walkMe+0x20>
			break;
    c1d2:	   |  \--|----> nop
    c1d4:	   |     |  /-- bra.s c1d8 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c1d6:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c1d8:	   |        \-> movea.l 32(sp),a0
    c1dc:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c1e0:	   |            clr.l -(sp)
    c1e2:	   |            move.l 36(sp),-(sp)
    c1e6:	   |            jsr 821e <setFrames>
    c1ec:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c1ee:	   |            movea.l 32(sp),a0
    c1f2:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c1f6:	   |            move.l d0,-(sp)
    c1f8:	   |            jsr 175ec <__floatsisf>
    c1fe:	   |            addq.l #4,sp
    c200:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c202:	   |            movea.l 32(sp),a0
    c206:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c20a:	   |            move.l d0,-(sp)
    c20c:	   |            jsr 175ec <__floatsisf>
    c212:	   |            addq.l #4,sp
    c214:	   |            move.l d2,-(sp)
    c216:	   |            move.l d0,-(sp)
    c218:	   |            move.l 40(sp),-(sp)
    c21c:	   |            jsr adc8 <moveAndScale>
    c222:	   |            lea 12(sp),sp
	return FALSE;
    c226:	   |            clr.w d0
}
    c228:	   \----------> move.l (sp)+,d2
    c22a:	                move.l (sp)+,d3
    c22c:	                lea 20(sp),sp
    c230:	                rts

0000c232 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c232:	       subq.l #8,sp
    c234:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c236:	   /-- bra.s c266 <clearStackLib+0x34>
		k = stackLib;
    c238:	/--|-> move.l 1c926 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c240:	|  |   movea.l 1c926 <stackLib>,a0
    c246:	|  |   move.l 4(a0),d0
    c24a:	|  |   move.l d0,1c926 <stackLib>
		FreeVec(k);
    c250:	|  |   move.l 8(sp),4(sp)
    c256:	|  |   move.l 1c896 <SysBase>,d0
    c25c:	|  |   movea.l d0,a6
    c25e:	|  |   movea.l 4(sp),a1
    c262:	|  |   jsr -690(a6)
	while (stackLib) {
    c266:	|  \-> move.l 1c926 <stackLib>,d0
    c26c:	\----- bne.s c238 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c26e:	       clr.l 1c922 <stackLibTotal>
}
    c274:	       nop
    c276:	       movea.l (sp)+,a6
    c278:	       addq.l #8,sp
    c27a:	       rts

0000c27c <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c27c:	          lea -128(sp),sp
    c280:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c284:	      /-- bra.s c296 <loadGame+0x1a>
    c286:	   /--|-> move.l 1c82e <allRunningFunctions>,d0
    c28c:	   |  |   move.l d0,-(sp)
    c28e:	   |  |   jsr 57ce <finishFunction>
    c294:	   |  |   addq.l #4,sp
    c296:	   |  \-> move.l 1c82e <allRunningFunctions>,d0
    c29c:	   \----- bne.s c286 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c29e:	          pea 1c92a <ssgVersion>
    c2a4:	          pea 19122 <PutChar+0x149e>
    c2aa:	          pea 41 <_start+0x41>
    c2ae:	          pea 53 <_start+0x53>
    c2b2:	          move.l 160(sp),-(sp)
    c2b6:	          jsr 6584 <openAndVerify>
    c2bc:	          lea 20(sp),sp
    c2c0:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c2c4:	      /-- bne.s c2cc <loadGame+0x50>
    c2c6:	      |   clr.w d0
    c2c8:	/-----|-- bra.w c572 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c2cc:	|     \-> move.l 112(sp),108(sp)
    c2d2:	|         lea 140(sp),a0
    c2d6:	|         lea -126(a0),a0
    c2da:	|         move.l a0,120(sp)
    c2de:	|         moveq #8,d0
    c2e0:	|         move.l d0,116(sp)
    c2e4:	|         move.l 1c89e <DOSBase>,d0
    c2ea:	|         movea.l d0,a6
    c2ec:	|         move.l 108(sp),d1
    c2f0:	|         move.l 120(sp),d2
    c2f4:	|         move.l 116(sp),d3
    c2f8:	|         jsr -42(a6)
    c2fc:	|         move.l d0,132(sp)
    c300:	|         move.l 132(sp),d0
    c304:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c308:	|         moveq #8,d0
    c30a:	|         cmp.l 128(sp),d0
    c30e:	|     /-- beq.s c31e <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c310:	|     |   pea 19143 <PutChar+0x14bf>
    c316:	|     |   jsr 171b0 <KPrintF>
    c31c:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c31e:	|     \-> move.l 14(sp),d1
    c322:	|         move.l 1c838 <fileTime>,d0
    c328:	|         cmp.l d1,d0
    c32a:	|     /-- bne.s c33a <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c32c:	|     |   move.l 18(sp),d1
    c330:	|     |   move.l 1c83c <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c336:	|     |   cmp.l d1,d0
    c338:	|  /--|-- beq.s c35a <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c33a:	|  |  \-> move.l 144(sp),-(sp)
    c33e:	|  |      pea 1915f <PutChar+0x14db>
    c344:	|  |      pea 19226 <PutChar+0x15a2>
    c34a:	|  |      jsr 171b0 <KPrintF>
    c350:	|  |      lea 12(sp),sp
		return FALSE; 
    c354:	|  |      clr.w d0
    c356:	+--|----- bra.w c572 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c35a:	|  \----> move.l 112(sp),124(sp)
    c360:	|         move.l 1c89e <DOSBase>,d0
    c366:	|         movea.l d0,a6
    c368:	|         move.l 124(sp),d1
    c36c:	|         jsr -306(a6)
    c370:	|         move.l d0,136(sp)
    c374:	|         move.l 136(sp),d0
    c378:	|         move.l d0,d0
    c37a:	|         move.w d0,1c0f2 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c380:	|         move.l 112(sp),100(sp)
    c386:	|         move.l 1c89e <DOSBase>,d0
    c38c:	|         movea.l d0,a6
    c38e:	|         move.l 100(sp),d1
    c392:	|         jsr -306(a6)
    c396:	|         move.l d0,96(sp)
    c39a:	|         move.l 96(sp),d0
    c39e:	|         move.l d0,d0
    c3a0:	|         move.w d0,1c836 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c3a6:	|         move.l 112(sp),92(sp)
    c3ac:	|         move.l 1c89e <DOSBase>,d0
    c3b2:	|         movea.l d0,a6
    c3b4:	|         move.l 92(sp),d1
    c3b8:	|         jsr -306(a6)
    c3bc:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c3c0:	|         move.l 112(sp),84(sp)
    c3c6:	|         move.l 1c89e <DOSBase>,d0
    c3cc:	|         movea.l d0,a6
    c3ce:	|         move.l 84(sp),d1
    c3d2:	|         jsr -306(a6)
    c3d6:	|         move.l d0,80(sp)
    c3da:	|         move.l 80(sp),d0
    c3de:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c3e2:	|     /-- beq.s c416 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c3e4:	|     |   move.l 112(sp),-(sp)
    c3e8:	|     |   jsr 6bc <get2bytes>
    c3ee:	|     |   addq.l #4,sp
    c3f0:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c3f4:	|     |   move.l 112(sp),-(sp)
    c3f8:	|     |   jsr 6bc <get2bytes>
    c3fe:	|     |   addq.l #4,sp
    c400:	|     |   move.l d0,1c98e <fontHeight>
		charOrder = readString(fp);		
    c406:	|     |   move.l 112(sp),-(sp)
    c40a:	|     |   jsr b02 <readString>
    c410:	|     |   addq.l #4,sp
    c412:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c416:	|     \-> move.l 104(sp),70(sp)
    c41c:	|         move.l 1c896 <SysBase>,d0
    c422:	|         movea.l d0,a6
    c424:	|         movea.l 70(sp),a1
    c428:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c42c:	|         move.l 112(sp),-(sp)
    c430:	|         jsr 854 <getSigned>
    c436:	|         addq.l #4,sp
    c438:	|         move.w d0,1c79a <fontSpace>

	killAllPeople ();
    c43e:	|         jsr aa6a <killAllPeople>
	killAllRegions ();
    c444:	|         jsr 15a00 <killAllRegions>

	int camerX = get2bytes (fp);
    c44a:	|         move.l 112(sp),-(sp)
    c44e:	|         jsr 6bc <get2bytes>
    c454:	|         addq.l #4,sp
    c456:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c45a:	|         move.l 112(sp),-(sp)
    c45e:	|         jsr 6bc <get2bytes>
    c464:	|         addq.l #4,sp
    c466:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c46a:	|         move.l 112(sp),-(sp)
    c46e:	|         jsr 7d8 <getFloat>
    c474:	|         addq.l #4,sp
    c476:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c47a:	|         move.l 112(sp),54(sp)
    c480:	|         move.l 1c89e <DOSBase>,d0
    c486:	|         movea.l d0,a6
    c488:	|         move.l 54(sp),d1
    c48c:	|         jsr -306(a6)
    c490:	|         move.l d0,50(sp)
    c494:	|         move.l 50(sp),d0
    c498:	|         move.l d0,d0
    c49a:	|         move.b d0,1c20c <brightnessLevel>

	loadHandlers (fp);
    c4a0:	|         move.l 112(sp),-(sp)
    c4a4:	|         jsr 64e4 <loadHandlers>
    c4aa:	|         addq.l #4,sp
	loadRegions (fp);
    c4ac:	|         move.l 112(sp),-(sp)
    c4b0:	|         jsr 15a5c <loadRegions>
    c4b6:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c4b8:	|         moveq #12,d0
    c4ba:	|         move.l d0,46(sp)
    c4be:	|         clr.l 42(sp)
    c4c2:	|         move.l 1c896 <SysBase>,d0
    c4c8:	|         movea.l d0,a6
    c4ca:	|         move.l 46(sp),d0
    c4ce:	|         move.l 42(sp),d1
    c4d2:	|         jsr -684(a6)
    c4d6:	|         move.l d0,38(sp)
    c4da:	|         move.l 38(sp),d0
    c4de:	|         move.l d0,1c79c <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c4e4:	|         move.l 1c79c <mouseCursorAnim>,d0
    c4ea:	|     /-- bne.s c4fe <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c4ec:	|     |   pea 19230 <PutChar+0x15ac>
    c4f2:	|     |   jsr 171b0 <KPrintF>
    c4f8:	|     |   addq.l #4,sp
		return FALSE;
    c4fa:	|     |   clr.w d0
    c4fc:	+-----|-- bra.s c572 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c4fe:	|     \-> jsr d38c <nosnapshot>
	if (FGetC (fp)) {
    c504:	|         move.l 112(sp),34(sp)
    c50a:	|         move.l 1c89e <DOSBase>,d0
    c510:	|         movea.l d0,a6
    c512:	|         move.l 34(sp),d1
    c516:	|         jsr -306(a6)
    c51a:	|         move.l d0,30(sp)
    c51e:	|         move.l 30(sp),d0
    c522:	|     /-- beq.s c538 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c524:	|     |   move.l 112(sp),-(sp)
    c528:	|     |   jsr d40c <restoreSnapshot>
    c52e:	|     |   addq.l #4,sp
    c530:	|     |   tst.w d0
    c532:	|     +-- bne.s c538 <loadGame+0x2bc>
    c534:	|     |   clr.w d0
    c536:	+-----|-- bra.s c572 <loadGame+0x2f6>
	}

	Close (fp);
    c538:	|     \-> move.l 112(sp),26(sp)
    c53e:	|         move.l 1c89e <DOSBase>,d0
    c544:	|         movea.l d0,a6
    c546:	|         move.l 26(sp),d1
    c54a:	|         jsr -36(a6)
    c54e:	|         move.l d0,22(sp)
	clearStackLib ();
    c552:	|         jsr c232 <clearStackLib>

	cameraX = camerX;
    c558:	|         move.l 66(sp),1c950 <cameraX>
	cameraY = camerY;
    c560:	|         move.l 62(sp),1c954 <cameraY>
	cameraZoom = camerZ;
    c568:	|         move.l 58(sp),1c234 <cameraZoom>

	return TRUE;
    c570:	|         moveq #1,d0
}
    c572:	\-------> movem.l (sp)+,d2-d3/a6
    c576:	          lea 128(sp),sp
    c57a:	          rts

0000c57c <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c57c:	   /-> lea -64(sp),sp
    c580:	   |   move.l a6,-(sp)
    c582:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c584:	   |   movea.l 76(sp),a0
    c588:	   |   move.l (a0),d0
    c58a:	   |   move.l 80(sp),-(sp)
    c58e:	   |   move.l d0,-(sp)
    c590:	   |   jsr 8d0 <put2bytes>
    c596:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c598:	   |   movea.l 76(sp),a0
    c59c:	   |   move.l 40(a0),d0
    c5a0:	/--|-- beq.s c5dc <saveFunction+0x60>
		FPutC (fp, 1);
    c5a2:	|  |   move.l 80(sp),52(sp)
    c5a8:	|  |   moveq #1,d0
    c5aa:	|  |   move.l d0,48(sp)
    c5ae:	|  |   move.l 1c89e <DOSBase>,d0
    c5b4:	|  |   movea.l d0,a6
    c5b6:	|  |   move.l 52(sp),d1
    c5ba:	|  |   move.l 48(sp),d2
    c5be:	|  |   jsr -312(a6)
    c5c2:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c5c6:	|  |   movea.l 76(sp),a0
    c5ca:	|  |   move.l 40(a0),d0
    c5ce:	|  |   move.l 80(sp),-(sp)
    c5d2:	|  |   move.l d0,-(sp)
    c5d4:	|  \-- jsr c57c <saveFunction>(pc)
    c5d8:	|      addq.l #8,sp
    c5da:	|  /-- bra.s c5fe <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c5dc:	\--|-> move.l 80(sp),64(sp)
    c5e2:	   |   clr.l 60(sp)
    c5e6:	   |   move.l 1c89e <DOSBase>,d0
    c5ec:	   |   movea.l d0,a6
    c5ee:	   |   move.l 64(sp),d1
    c5f2:	   |   move.l 60(sp),d2
    c5f6:	   |   jsr -312(a6)
    c5fa:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c5fe:	   \-> movea.l 76(sp),a0
    c602:	       move.l 12(a0),d0
    c606:	       move.l 80(sp),-(sp)
    c60a:	       move.l d0,-(sp)
    c60c:	       jsr 958 <put4bytes>
    c612:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c614:	       movea.l 76(sp),a0
    c618:	       move.l 36(a0),d0
    c61c:	       move.l 80(sp),-(sp)
    c620:	       move.l d0,-(sp)
    c622:	       jsr 8d0 <put2bytes>
    c628:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c62a:	       move.l 80(sp),40(sp)
    c630:	       movea.l 76(sp),a0
    c634:	       move.w 54(a0),d0
    c638:	       movea.w d0,a0
    c63a:	       move.l a0,36(sp)
    c63e:	       move.l 1c89e <DOSBase>,d0
    c644:	       movea.l d0,a6
    c646:	       move.l 40(sp),d1
    c64a:	       move.l 36(sp),d2
    c64e:	       jsr -312(a6)
    c652:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c656:	       move.l 80(sp),28(sp)
    c65c:	       movea.l 76(sp),a0
    c660:	       move.w 48(a0),d0
    c664:	       movea.w d0,a0
    c666:	       move.l a0,24(sp)
    c66a:	       move.l 1c89e <DOSBase>,d0
    c670:	       movea.l d0,a6
    c672:	       move.l 28(sp),d1
    c676:	       move.l 24(sp),d2
    c67a:	       jsr -312(a6)
    c67e:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c682:	       move.l 80(sp),16(sp)
    c688:	       movea.l 76(sp),a0
    c68c:	       move.w 50(a0),d0
    c690:	       movea.w d0,a0
    c692:	       move.l a0,12(sp)
    c696:	       move.l 1c89e <DOSBase>,d0
    c69c:	       movea.l d0,a6
    c69e:	       move.l 16(sp),d1
    c6a2:	       move.l 12(sp),d2
    c6a6:	       jsr -312(a6)
    c6aa:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c6ae:	       moveq #28,d0
    c6b0:	       add.l 76(sp),d0
    c6b4:	       move.l 80(sp),-(sp)
    c6b8:	       move.l d0,-(sp)
    c6ba:	       jsr cdd4 <saveVariable>
    c6c0:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c6c2:	       movea.l 76(sp),a0
    c6c6:	       move.b 56(a0),d0
    c6ca:	   /-- beq.s c6da <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c6cc:	   |   pea 19251 <PutChar+0x15cd>
    c6d2:	   |   jsr 171b0 <KPrintF>
    c6d8:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c6da:	   \-> movea.l 76(sp),a0
    c6de:	       move.l 24(a0),d0
    c6e2:	       move.l 80(sp),-(sp)
    c6e6:	       move.l d0,-(sp)
    c6e8:	       jsr cc48 <saveStack>
    c6ee:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c6f0:	       clr.l 68(sp)
    c6f4:	   /-- bra.s c718 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c6f6:	/--|-> movea.l 76(sp),a0
    c6fa:	|  |   move.l 20(a0),d1
    c6fe:	|  |   move.l 68(sp),d0
    c702:	|  |   lsl.l #3,d0
    c704:	|  |   add.l d1,d0
    c706:	|  |   move.l 80(sp),-(sp)
    c70a:	|  |   move.l d0,-(sp)
    c70c:	|  |   jsr cdd4 <saveVariable>
    c712:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c714:	|  |   addq.l #1,68(sp)
    c718:	|  \-> movea.l 76(sp),a0
    c71c:	|      move.l 8(a0),d0
    c720:	|      cmp.l 68(sp),d0
    c724:	\----- bgt.s c6f6 <saveFunction+0x17a>
	}
}
    c726:	       nop
    c728:	       nop
    c72a:	       move.l (sp)+,d2
    c72c:	       movea.l (sp)+,a6
    c72e:	       lea 64(sp),sp
    c732:	       rts

0000c734 <saveGame>:

BOOL saveGame (char * fname) {
    c734:	          lea -248(sp),sp
    c738:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c73c:	          move.l 264(sp),244(sp)
    c742:	          move.l #1006,240(sp)
    c74a:	          move.l 1c89e <DOSBase>,d0
    c750:	          movea.l d0,a6
    c752:	          move.l 244(sp),d1
    c756:	          move.l 240(sp),d2
    c75a:	          jsr -30(a6)
    c75e:	          move.l d0,236(sp)
    c762:	          move.l 236(sp),d0
    c766:	          move.l d0,232(sp)
	if (fp == NULL) {
    c76a:	      /-- bne.s c780 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c76c:	      |   pea 19273 <PutChar+0x15ef>
    c772:	      |   jsr 171b0 <KPrintF>
    c778:	      |   addq.l #4,sp
		return FALSE;
    c77a:	      |   clr.w d0
    c77c:	/-----|-- bra.w cc3e <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c780:	|     \-> move.l 232(sp),228(sp)
    c786:	|         move.l #103056,224(sp)
    c78e:	|         moveq #6,d0
    c790:	|         move.l d0,220(sp)
    c794:	|         move.l 1c89e <DOSBase>,d0
    c79a:	|         movea.l d0,a6
    c79c:	|         move.l 228(sp),d1
    c7a0:	|         move.l 224(sp),d2
    c7a4:	|         move.l 220(sp),d3
    c7a8:	|         jsr -48(a6)
    c7ac:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c7b0:	|         move.l 232(sp),212(sp)
    c7b6:	|         clr.l 208(sp)
    c7ba:	|         move.l 1c89e <DOSBase>,d0
    c7c0:	|         movea.l d0,a6
    c7c2:	|         move.l 212(sp),d1
    c7c6:	|         move.l 208(sp),d2
    c7ca:	|         jsr -312(a6)
    c7ce:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c7d2:	|         move.l 232(sp),200(sp)
    c7d8:	|         clr.l 196(sp)
    c7dc:	|         move.l 1c89e <DOSBase>,d0
    c7e2:	|         movea.l d0,a6
    c7e4:	|         move.l 200(sp),d1
    c7e8:	|         move.l 196(sp),d2
    c7ec:	|         jsr -312(a6)
    c7f0:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c7f4:	|         move.l 232(sp),188(sp)
    c7fa:	|         moveq #2,d0
    c7fc:	|         move.l d0,184(sp)
    c800:	|         move.l 1c89e <DOSBase>,d0
    c806:	|         movea.l d0,a6
    c808:	|         move.l 188(sp),d1
    c80c:	|         move.l 184(sp),d2
    c810:	|         jsr -312(a6)
    c814:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c818:	|         move.l 232(sp),176(sp)
    c81e:	|         moveq #2,d0
    c820:	|         move.l d0,172(sp)
    c824:	|         move.l 1c89e <DOSBase>,d0
    c82a:	|         movea.l d0,a6
    c82c:	|         move.l 176(sp),d1
    c830:	|         move.l 172(sp),d2
    c834:	|         jsr -312(a6)
    c838:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c83c:	|         move.l 232(sp),164(sp)
    c842:	|         move.l #116792,160(sp)
    c84a:	|         moveq #8,d0
    c84c:	|         move.l d0,156(sp)
    c850:	|         move.l 1c89e <DOSBase>,d0
    c856:	|         movea.l d0,a6
    c858:	|         move.l 164(sp),d1
    c85c:	|         move.l 160(sp),d2
    c860:	|         move.l 156(sp),d3
    c864:	|         jsr -48(a6)
    c868:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c86c:	|         move.l 232(sp),148(sp)
    c872:	|         move.w 1c0f2 <allowAnyFilename>,d0
    c878:	|         movea.w d0,a0
    c87a:	|         move.l a0,144(sp)
    c87e:	|         move.l 1c89e <DOSBase>,d0
    c884:	|         movea.l d0,a6
    c886:	|         move.l 148(sp),d1
    c88a:	|         move.l 144(sp),d2
    c88e:	|         jsr -312(a6)
    c892:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c896:	|         move.l 232(sp),136(sp)
    c89c:	|         move.w 1c836 <captureAllKeys>,d0
    c8a2:	|         movea.w d0,a0
    c8a4:	|         move.l a0,132(sp)
    c8a8:	|         move.l 1c89e <DOSBase>,d0
    c8ae:	|         movea.l d0,a6
    c8b0:	|         move.l 136(sp),d1
    c8b4:	|         move.l 132(sp),d2
    c8b8:	|         jsr -312(a6)
    c8bc:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c8c0:	|         move.l 232(sp),124(sp)
    c8c6:	|         moveq #1,d0
    c8c8:	|         move.l d0,120(sp)
    c8cc:	|         move.l 1c89e <DOSBase>,d0
    c8d2:	|         movea.l d0,a6
    c8d4:	|         move.l 124(sp),d1
    c8d8:	|         move.l 120(sp),d2
    c8dc:	|         jsr -312(a6)
    c8e0:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c8e4:	|         move.l 232(sp),112(sp)
    c8ea:	|         move.l 1c99e <fontTableSize>,d0
    c8f0:	|         sgt d0
    c8f2:	|         neg.b d0
    c8f4:	|         move.b d0,d0
    c8f6:	|         andi.l #255,d0
    c8fc:	|         move.l d0,108(sp)
    c900:	|         move.l 1c89e <DOSBase>,d0
    c906:	|         movea.l d0,a6
    c908:	|         move.l 112(sp),d1
    c90c:	|         move.l 108(sp),d2
    c910:	|         jsr -312(a6)
    c914:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c918:	|         move.l 1c99e <fontTableSize>,d0
    c91e:	|     /-- ble.s c95c <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c920:	|     |   move.l 1c992 <loadedFontNum>,d0
    c926:	|     |   move.l 232(sp),-(sp)
    c92a:	|     |   move.l d0,-(sp)
    c92c:	|     |   jsr 8d0 <put2bytes>
    c932:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c934:	|     |   move.l 1c98e <fontHeight>,d0
    c93a:	|     |   move.l 232(sp),-(sp)
    c93e:	|     |   move.l d0,-(sp)
    c940:	|     |   jsr 8d0 <put2bytes>
    c946:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c948:	|     |   move.l 1c996 <fontOrderString>,d0
    c94e:	|     |   move.l 232(sp),-(sp)
    c952:	|     |   move.l d0,-(sp)
    c954:	|     |   jsr bd8 <writeString>
    c95a:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c95c:	|     \-> move.w 1c79a <fontSpace>,d0
    c962:	|         movea.w d0,a0
    c964:	|         move.l 232(sp),-(sp)
    c968:	|         move.l a0,-(sp)
    c96a:	|         jsr a9c <putSigned>
    c970:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c972:	|         move.l 1c950 <cameraX>,d0
    c978:	|         move.l 232(sp),-(sp)
    c97c:	|         move.l d0,-(sp)
    c97e:	|         jsr 8d0 <put2bytes>
    c984:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c986:	|         move.l 1c954 <cameraY>,d0
    c98c:	|         move.l 232(sp),-(sp)
    c990:	|         move.l d0,-(sp)
    c992:	|         jsr 8d0 <put2bytes>
    c998:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c99a:	|         move.l 1c234 <cameraZoom>,d0
    c9a0:	|         move.l 232(sp),-(sp)
    c9a4:	|         move.l d0,-(sp)
    c9a6:	|         jsr a46 <putFloat>
    c9ac:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c9ae:	|         move.l 232(sp),100(sp)
    c9b4:	|         move.b 1c20c <brightnessLevel>,d0
    c9ba:	|         move.b d0,d0
    c9bc:	|         andi.l #255,d0
    c9c2:	|         move.l d0,96(sp)
    c9c6:	|         move.l 1c89e <DOSBase>,d0
    c9cc:	|         movea.l d0,a6
    c9ce:	|         move.l 100(sp),d1
    c9d2:	|         move.l 96(sp),d2
    c9d6:	|         jsr -312(a6)
    c9da:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c9de:	|         move.l 232(sp),-(sp)
    c9e2:	|         jsr 6a68 <saveHandlers>
    c9e8:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c9ea:	|         move.l 232(sp),-(sp)
    c9ee:	|         jsr 15c16 <saveRegions>
    c9f4:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c9f6:	|         move.l 1c79c <mouseCursorAnim>,d0
    c9fc:	|         move.l 232(sp),-(sp)
    ca00:	|         move.l d0,-(sp)
    ca02:	|         jsr afdc <saveAnim>
    ca08:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    ca0a:	|         move.l 1c7a0 <mouseCursorFrameNum>,d0
    ca10:	|         move.l 232(sp),-(sp)
    ca14:	|         move.l d0,-(sp)
    ca16:	|         jsr 8d0 <put2bytes>
    ca1c:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    ca1e:	|         move.l 1c82e <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    ca26:	|         clr.l 248(sp)
	while (thisFunction) {
    ca2a:	|     /-- bra.s ca3a <saveGame+0x306>
		countFunctions ++;
    ca2c:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    ca30:	|  |  |   movea.l 252(sp),a0
    ca34:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca3a:	|  |  \-> tst.l 252(sp)
    ca3e:	|  \----- bne.s ca2c <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    ca40:	|         move.l 232(sp),-(sp)
    ca44:	|         move.l 252(sp),-(sp)
    ca48:	|         jsr 8d0 <put2bytes>
    ca4e:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    ca50:	|         move.l 1c82e <allRunningFunctions>,252(sp)
	while (thisFunction) {
    ca58:	|     /-- bra.s ca74 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    ca5a:	|  /--|-> move.l 232(sp),-(sp)
    ca5e:	|  |  |   move.l 256(sp),-(sp)
    ca62:	|  |  |   jsr c57c <saveFunction>
    ca68:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ca6a:	|  |  |   movea.l 252(sp),a0
    ca6e:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ca74:	|  |  \-> tst.l 252(sp)
    ca78:	|  \----- bne.s ca5a <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    ca7a:	|         clr.l 256(sp)
    ca7e:	|     /-- bra.s caa0 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    ca80:	|  /--|-> move.l 1c844 <globalVars>,d1
    ca86:	|  |  |   move.l 256(sp),d0
    ca8a:	|  |  |   lsl.l #3,d0
    ca8c:	|  |  |   add.l d1,d0
    ca8e:	|  |  |   move.l 232(sp),-(sp)
    ca92:	|  |  |   move.l d0,-(sp)
    ca94:	|  |  |   jsr cdd4 <saveVariable>
    ca9a:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    ca9c:	|  |  |   addq.l #1,256(sp)
    caa0:	|  |  \-> move.l 1c86e <numGlobals>,d0
    caa6:	|  |      cmp.l 256(sp),d0
    caaa:	|  \----- bgt.s ca80 <saveGame+0x34c>
	}

	savePeople (fp);
    caac:	|         move.l 232(sp),-(sp)
    cab0:	|         jsr b104 <savePeople>
    cab6:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    cab8:	|         movea.l 1c9b2 <currentFloor>,a0
    cabe:	|         move.l 8(a0),d0
    cac2:	|  /----- beq.s cb00 <saveGame+0x3cc>
		FPutC (fp, 1);
    cac4:	|  |      move.l 232(sp),76(sp)
    caca:	|  |      moveq #1,d0
    cacc:	|  |      move.l d0,72(sp)
    cad0:	|  |      move.l 1c89e <DOSBase>,d0
    cad6:	|  |      movea.l d0,a6
    cad8:	|  |      move.l 76(sp),d1
    cadc:	|  |      move.l 72(sp),d2
    cae0:	|  |      jsr -312(a6)
    cae4:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cae8:	|  |      movea.l 1c9b2 <currentFloor>,a0
    caee:	|  |      move.l (a0),d0
    caf0:	|  |      move.l 232(sp),-(sp)
    caf4:	|  |      move.l d0,-(sp)
    caf6:	|  |      jsr 8d0 <put2bytes>
    cafc:	|  |      addq.l #8,sp
    cafe:	|  |  /-- bra.s cb22 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cb00:	|  \--|-> move.l 232(sp),88(sp)
    cb06:	|     |   clr.l 84(sp)
    cb0a:	|     |   move.l 1c89e <DOSBase>,d0
    cb10:	|     |   movea.l d0,a6
    cb12:	|     |   move.l 88(sp),d1
    cb16:	|     |   move.l 84(sp),d2
    cb1a:	|     |   jsr -312(a6)
    cb1e:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cb22:	|     \-> move.l 232(sp),64(sp)
    cb28:	|         move.l 1c964 <speechMode>,60(sp)
    cb30:	|         move.l 1c89e <DOSBase>,d0
    cb36:	|         movea.l d0,a6
    cb38:	|         move.l 64(sp),d1
    cb3c:	|         move.l 60(sp),d2
    cb40:	|         jsr -312(a6)
    cb44:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cb48:	|         move.b 1c770 <fadeMode>,d0
    cb4e:	|         move.b d0,d0
    cb50:	|         andi.l #255,d0
    cb56:	|         move.l d0,52(sp)
    cb5a:	|         move.l 232(sp),48(sp)
    cb60:	|         move.l 1c89e <DOSBase>,d0
    cb66:	|         movea.l d0,a6
    cb68:	|         move.l 52(sp),d1
    cb6c:	|         move.l 48(sp),d2
    cb70:	|         jsr -312(a6)
    cb74:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cb78:	|         move.l 1c8f2 <speech>,d0
    cb7e:	|         move.l 232(sp),-(sp)
    cb82:	|         move.l d0,-(sp)
    cb84:	|         jsr 80d2 <saveSpeech>
    cb8a:	|         addq.l #8,sp
	saveStatusBars (fp);
    cb8c:	|         move.l 232(sp),-(sp)
    cb90:	|         jsr 7ace <saveStatusBars>
    cb96:	|         addq.l #4,sp
	saveSounds (fp);
    cb98:	|         move.l 232(sp),-(sp)
    cb9c:	|         jsr d13a <saveSounds>
    cba2:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cba4:	|         move.w 1c94e <saveEncoding>,d0
    cbaa:	|         move.w d0,d0
    cbac:	|         andi.l #65535,d0
    cbb2:	|         move.l 232(sp),-(sp)
    cbb6:	|         move.l d0,-(sp)
    cbb8:	|         jsr 8d0 <put2bytes>
    cbbe:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cbc0:	|         move.l 1c940 <parallaxStuff>,d0
    cbc6:	|         move.l 232(sp),-(sp)
    cbca:	|         move.l d0,-(sp)
    cbcc:	|         jsr d432 <saveParallaxRecursive>
    cbd2:	|         addq.l #8,sp
	FPutC (fp, 0);
    cbd4:	|         move.l 232(sp),40(sp)
    cbda:	|         clr.l 36(sp)
    cbde:	|         move.l 1c89e <DOSBase>,d0
    cbe4:	|         movea.l d0,a6
    cbe6:	|         move.l 40(sp),d1
    cbea:	|         move.l 36(sp),d2
    cbee:	|         jsr -312(a6)
    cbf2:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cbf6:	|         move.l 232(sp),28(sp)
    cbfc:	|         move.l 1c212 <languageNum>,24(sp)
    cc04:	|         move.l 1c89e <DOSBase>,d0
    cc0a:	|         movea.l d0,a6
    cc0c:	|         move.l 28(sp),d1
    cc10:	|         move.l 24(sp),d2
    cc14:	|         jsr -312(a6)
    cc18:	|         move.l d0,20(sp)

	Close(fp);
    cc1c:	|         move.l 232(sp),16(sp)
    cc22:	|         move.l 1c89e <DOSBase>,d0
    cc28:	|         movea.l d0,a6
    cc2a:	|         move.l 16(sp),d1
    cc2e:	|         jsr -36(a6)
    cc32:	|         move.l d0,12(sp)
	clearStackLib ();
    cc36:	|         jsr c232 <clearStackLib>
	return TRUE;
    cc3c:	|         moveq #1,d0
}
    cc3e:	\-------> movem.l (sp)+,d2-d3/a6
    cc42:	          lea 248(sp),sp
    cc46:	          rts

0000cc48 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cc48:	       lea -12(sp),sp
	int elements = 0;
    cc4c:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cc50:	       move.l 16(sp),(sp)
	while (search) {
    cc54:	   /-- bra.s cc60 <saveStack+0x18>
		elements ++;
    cc56:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cc5a:	|  |   movea.l (sp),a0
    cc5c:	|  |   move.l 8(a0),(sp)
	while (search) {
    cc60:	|  \-> tst.l (sp)
    cc62:	\----- bne.s cc56 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cc64:	       move.l 20(sp),-(sp)
    cc68:	       move.l 12(sp),-(sp)
    cc6c:	       jsr 8d0 <put2bytes>
    cc72:	       addq.l #8,sp
	search = vs;
    cc74:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cc78:	       clr.l 4(sp)
    cc7c:	   /-- bra.s cc98 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cc7e:	/--|-> move.l (sp),d0
    cc80:	|  |   move.l 20(sp),-(sp)
    cc84:	|  |   move.l d0,-(sp)
    cc86:	|  |   jsr cdd4 <saveVariable>
    cc8c:	|  |   addq.l #8,sp
		search = search -> next;
    cc8e:	|  |   movea.l (sp),a0
    cc90:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cc94:	|  |   addq.l #1,4(sp)
    cc98:	|  \-> move.l 4(sp),d0
    cc9c:	|      cmp.l 8(sp),d0
    cca0:	\----- blt.s cc7e <saveStack+0x36>
	}
}
    cca2:	       nop
    cca4:	       nop
    cca6:	       lea 12(sp),sp
    ccaa:	       rts

0000ccac <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    ccac:	             lea -44(sp),sp
    ccb0:	             move.l a6,-(sp)
    ccb2:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    ccb4:	             move.l 1c926 <stackLib>,48(sp)
	int a = 0;
    ccbc:	             clr.l 44(sp)
	while (s) {
    ccc0:	      /----- bra.s cd1e <saveStackRef+0x72>
		if (s -> stack == vs) {
    ccc2:	   /--|----> movea.l 48(sp),a0
    ccc6:	   |  |      move.l (a0),d0
    ccc8:	   |  |      cmp.l 56(sp),d0
    cccc:	   |  |  /-- bne.s cd10 <saveStackRef+0x64>
			FPutC (fp, 1);
    ccce:	   |  |  |   move.l 60(sp),16(sp)
    ccd4:	   |  |  |   moveq #1,d0
    ccd6:	   |  |  |   move.l d0,12(sp)
    ccda:	   |  |  |   move.l 1c89e <DOSBase>,d0
    cce0:	   |  |  |   movea.l d0,a6
    cce2:	   |  |  |   move.l 16(sp),d1
    cce6:	   |  |  |   move.l 12(sp),d2
    ccea:	   |  |  |   jsr -312(a6)
    ccee:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    ccf2:	   |  |  |   move.l 1c922 <stackLibTotal>,d0
    ccf8:	   |  |  |   sub.l 44(sp),d0
    ccfc:	   |  |  |   move.l 60(sp),-(sp)
    cd00:	   |  |  |   move.l d0,-(sp)
    cd02:	   |  |  |   jsr 8d0 <put2bytes>
    cd08:	   |  |  |   addq.l #8,sp
			return TRUE;
    cd0a:	   |  |  |   moveq #1,d0
    cd0c:	/--|--|--|-- bra.w cdca <saveStackRef+0x11e>
		}
		s = s -> next;
    cd10:	|  |  |  \-> movea.l 48(sp),a0
    cd14:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cd1a:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cd1e:	|  |  \----> tst.l 48(sp)
    cd22:	|  \-------- bne.s ccc2 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cd24:	|            move.l 60(sp),40(sp)
    cd2a:	|            clr.l 36(sp)
    cd2e:	|            move.l 1c89e <DOSBase>,d0
    cd34:	|            movea.l d0,a6
    cd36:	|            move.l 40(sp),d1
    cd3a:	|            move.l 36(sp),d2
    cd3e:	|            jsr -312(a6)
    cd42:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cd46:	|            movea.l 56(sp),a0
    cd4a:	|            move.l (a0),d0
    cd4c:	|            move.l 60(sp),-(sp)
    cd50:	|            move.l d0,-(sp)
    cd52:	|            jsr cc48 <saveStack>
    cd58:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cd5a:	|            moveq #8,d0
    cd5c:	|            move.l d0,28(sp)
    cd60:	|            clr.l 24(sp)
    cd64:	|            move.l 1c896 <SysBase>,d0
    cd6a:	|            movea.l d0,a6
    cd6c:	|            move.l 28(sp),d0
    cd70:	|            move.l 24(sp),d1
    cd74:	|            jsr -684(a6)
    cd78:	|            move.l d0,20(sp)
    cd7c:	|            move.l 20(sp),d0
    cd80:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cd84:	|            move.l 1c922 <stackLibTotal>,d0
    cd8a:	|            addq.l #1,d0
    cd8c:	|            move.l d0,1c922 <stackLibTotal>
	if (! s) {
    cd92:	|            tst.l 48(sp)
    cd96:	|        /-- bne.s cdaa <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cd98:	|        |   pea 192bf <PutChar+0x163b>
    cd9e:	|        |   jsr 171b0 <KPrintF>
    cda4:	|        |   addq.l #4,sp
		return FALSE;
    cda6:	|        |   clr.w d0
    cda8:	+--------|-- bra.s cdca <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cdaa:	|        \-> move.l 1c926 <stackLib>,d0
    cdb0:	|            movea.l 48(sp),a0
    cdb4:	|            move.l d0,4(a0)
	s -> stack = vs;
    cdb8:	|            movea.l 48(sp),a0
    cdbc:	|            move.l 56(sp),(a0)
	stackLib = s;
    cdc0:	|            move.l 48(sp),1c926 <stackLib>
	return TRUE;
    cdc8:	|            moveq #1,d0
}
    cdca:	\----------> move.l (sp)+,d2
    cdcc:	             movea.l (sp)+,a6
    cdce:	             lea 44(sp),sp
    cdd2:	             rts

0000cdd4 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cdd4:	          lea -12(sp),sp
    cdd8:	          move.l a6,-(sp)
    cdda:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cddc:	          move.l 28(sp),16(sp)
    cde2:	          movea.l 24(sp),a0
    cde6:	          move.l (a0),d0
    cde8:	          move.l d0,12(sp)
    cdec:	          move.l 1c89e <DOSBase>,d0
    cdf2:	          movea.l d0,a6
    cdf4:	          move.l 16(sp),d1
    cdf8:	          move.l 12(sp),d2
    cdfc:	          jsr -312(a6)
    ce00:	          move.l d0,8(sp)
	switch (from -> varType) {
    ce04:	          movea.l 24(sp),a0
    ce08:	          move.l (a0),d0
    ce0a:	          moveq #9,d1
    ce0c:	          cmp.l d0,d1
    ce0e:	      /-- bcs.w cebe <saveVariable+0xea>
    ce12:	      |   add.l d0,d0
    ce14:	      |   movea.l d0,a0
    ce16:	      |   adda.l #52770,a0
    ce1c:	      |   move.w (a0),d0
    ce1e:	      |   jmp (ce22 <saveVariable+0x4e>,pc,d0.w)
    ce22:	      |   ori.l #1310740,(a0)+
    ce28:	      |   ori.b #20,(20,a0,d0.w)
    ce2e:	      |   .short 0x004c
    ce30:	      |   ori.b #126,(a4)
    ce34:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    ce38:	      |   ori.b #40,(a0)+
    ce3c:	      |   ori.b #47,d4
    ce40:	      |   ori.b #0,(a4)+
    ce44:	      |   jsr 958 <put4bytes>
    ce4a:	      |   addq.l #8,sp
		return TRUE;
    ce4c:	      |   moveq #1,d0
    ce4e:	/-----|-- bra.w cefa <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ce52:	|     |   movea.l 24(sp),a0
    ce56:	|     |   move.l 4(a0),d0
    ce5a:	|     |   move.l 28(sp),-(sp)
    ce5e:	|     |   move.l d0,-(sp)
    ce60:	|     |   jsr bd8 <writeString>
    ce66:	|     |   addq.l #8,sp
		return TRUE;
    ce68:	|     |   moveq #1,d0
    ce6a:	+-----|-- bra.w cefa <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    ce6e:	|     |   movea.l 24(sp),a0
    ce72:	|     |   move.l 4(a0),d0
    ce76:	|     |   move.l 28(sp),-(sp)
    ce7a:	|     |   move.l d0,-(sp)
    ce7c:	|     |   jsr ccac <saveStackRef>
    ce82:	|     |   addq.l #8,sp
    ce84:	+-----|-- bra.s cefa <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    ce86:	|     |   movea.l 24(sp),a0
    ce8a:	|     |   move.l 4(a0),d0
    ce8e:	|     |   move.l 28(sp),-(sp)
    ce92:	|     |   move.l d0,-(sp)
    ce94:	|     |   jsr b0a6 <saveCostume>
    ce9a:	|     |   addq.l #8,sp
		return FALSE;
    ce9c:	|     |   clr.w d0
    ce9e:	+-----|-- bra.s cefa <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cea0:	|     |   movea.l 24(sp),a0
    cea4:	|     |   move.l 4(a0),d0
    cea8:	|     |   move.l 28(sp),-(sp)
    ceac:	|     |   move.l d0,-(sp)
    ceae:	|     |   jsr afdc <saveAnim>
    ceb4:	|     |   addq.l #8,sp
		return FALSE;
    ceb6:	|     |   clr.w d0
    ceb8:	+-----|-- bra.s cefa <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    ceba:	|     |   clr.w d0
    cebc:	+-----|-- bra.s cefa <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cebe:	|     \-> movea.l 24(sp),a0
    cec2:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cec4:	|         moveq #10,d1
    cec6:	|         cmp.l d0,d1
    cec8:	|  /----- bcs.s cee2 <saveVariable+0x10e>
						typeName[from->varType] :
    ceca:	|  |      movea.l 24(sp),a0
    cece:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    ced0:	|  |      add.l d0,d0
    ced2:	|  |      movea.l d0,a1
    ced4:	|  |      adda.l d0,a1
    ced6:	|  |      lea 1c772 <typeName>,a0
    cedc:	|  |      move.l (0,a1,a0.l),d0
    cee0:	|  |  /-- bra.s cee8 <saveVariable+0x114>
    cee2:	|  \--|-> move.l #103140,d0
    cee8:	|     \-> move.l d0,-(sp)
    ceea:	|         pea 192eb <PutChar+0x1667>
    cef0:	|         jsr 171b0 <KPrintF>
    cef6:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cef8:	|         moveq #1,d0
    cefa:	\-------> move.l (sp)+,d2
    cefc:	          movea.l (sp)+,a6
    cefe:	          lea 12(sp),sp
    cf02:	          rts

0000cf04 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cf04:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cf08:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cf10:	          movea.l 4(sp),a0
    cf14:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cf1a:	          movea.l 4(sp),a0
    cf1e:	          move.w 10(a0),d0
    cf22:	          lsr.w #8,d0
    cf24:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cf28:	          movea.l 4(sp),a0
    cf2c:	          move.w 10(a0),d0
    cf30:	          move.b d0,(sp)

    if(counterx_new)
    cf32:	/-------- beq.w cfd8 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cf36:	|         clr.w d1
    cf38:	|         move.b (sp),d1
    cf3a:	|         move.w 1c92e <counterx_old>,d0
    cf40:	|         sub.w d0,d1
    cf42:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cf46:	|         cmpi.w #128,10(sp)
    cf4c:	|     /-- blt.s cf64 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cf4e:	|     |   move.w #1,1c84c <input+0x4>
            counterx_diff -= 256;    
    cf56:	|     |   move.w 10(sp),d0
    cf5a:	|     |   addi.w #-256,d0
    cf5e:	|     |   move.w d0,10(sp)
    cf62:	|  /--|-- bra.s cf90 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cf64:	|  |  \-> cmpi.w #-129,10(sp)
    cf6a:	|  |  /-- bgt.s cf82 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cf6c:	|  |  |   move.w 10(sp),d0
    cf70:	|  |  |   addi.w #256,d0
    cf74:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cf78:	|  |  |   move.w #1,1c84c <input+0x4>
    cf80:	|  +--|-- bra.s cf90 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cf82:	|  |  \-> tst.w 10(sp)
    cf86:	|  +----- beq.s cf90 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    cf88:	|  |      move.w #1,1c84c <input+0x4>
        }

        input.mouseX += counterx_diff;
    cf90:	|  \----> move.l 1c852 <input+0xa>,d0
    cf96:	|         movea.w 10(sp),a0
    cf9a:	|         add.l a0,d0
    cf9c:	|         move.l d0,1c852 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    cfa2:	|         move.l 1c852 <input+0xa>,d1
    cfa8:	|         move.l 1c7ea <winWidth>,d0
    cfae:	|         cmp.l d1,d0
    cfb0:	|     /-- bge.s cfc0 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    cfb2:	|     |   move.l 1c7ea <winWidth>,d0
    cfb8:	|     |   move.l d0,1c852 <input+0xa>
    cfbe:	|  /--|-- bra.s cfce <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    cfc0:	|  |  \-> move.l 1c852 <input+0xa>,d0
    cfc6:	|  +----- bpl.s cfce <CsiCheckInput+0xca>
            input.mouseX = 0;
    cfc8:	|  |      clr.l 1c852 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    cfce:	|  \----> clr.w d0
    cfd0:	|         move.b (sp),d0
    cfd2:	|         move.w d0,1c92e <counterx_old>
    }    

    if(countery_new)
    cfd8:	\-------> tst.b 1(sp)
    cfdc:	/-------- beq.w d086 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    cfe0:	|         clr.w d1
    cfe2:	|         move.b 1(sp),d1
    cfe6:	|         move.w 1c930 <countery_old>,d0
    cfec:	|         sub.w d0,d1
    cfee:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    cff2:	|         cmpi.w #128,8(sp)
    cff8:	|     /-- blt.s d010 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    cffa:	|     |   move.w #1,1c84c <input+0x4>
            countery_diff -= 256;    
    d002:	|     |   move.w 8(sp),d0
    d006:	|     |   addi.w #-256,d0
    d00a:	|     |   move.w d0,8(sp)
    d00e:	|  /--|-- bra.s d03c <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d010:	|  |  \-> cmpi.w #-129,8(sp)
    d016:	|  |  /-- bgt.s d02e <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d018:	|  |  |   move.w #1,1c84c <input+0x4>
            countery_diff += 256;
    d020:	|  |  |   move.w 8(sp),d0
    d024:	|  |  |   addi.w #256,d0
    d028:	|  |  |   move.w d0,8(sp)
    d02c:	|  +--|-- bra.s d03c <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d02e:	|  |  \-> tst.w 8(sp)
    d032:	|  +----- beq.s d03c <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d034:	|  |      move.w #1,1c84c <input+0x4>
        }

        input.mouseY += countery_diff;
    d03c:	|  \----> move.l 1c856 <input+0xe>,d0
    d042:	|         movea.w 8(sp),a0
    d046:	|         add.l a0,d0
    d048:	|         move.l d0,1c856 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d04e:	|         move.l 1c856 <input+0xe>,d1
    d054:	|         move.l 1c7ee <winHeight>,d0
    d05a:	|         cmp.l d1,d0
    d05c:	|     /-- bge.s d06c <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d05e:	|     |   move.l 1c7ee <winHeight>,d0
    d064:	|     |   move.l d0,1c856 <input+0xe>
    d06a:	|  /--|-- bra.s d07a <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d06c:	|  |  \-> move.l 1c856 <input+0xe>,d0
    d072:	|  +----- bpl.s d07a <CsiCheckInput+0x176>
            input.mouseY = 0;
    d074:	|  |      clr.l 1c856 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d07a:	|  \----> clr.w d0
    d07c:	|         move.b 1(sp),d0
    d080:	|         move.w d0,1c930 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d086:	\-------> move.w 1c848 <input>,d0
    d08c:	      /-- beq.s d0b2 <CsiCheckInput+0x1ae>
    d08e:	      |   movea.l #12574721,a0
    d094:	      |   move.b (a0),d0
    d096:	      |   move.b d0,d0
    d098:	      |   andi.l #255,d0
    d09e:	      |   moveq #64,d1
    d0a0:	      |   and.l d1,d0
    d0a2:	      +-- beq.s d0b2 <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    d0a4:	      |   clr.w 1c848 <input>
        input.leftRelease = TRUE;
    d0aa:	      |   move.w #1,1c84e <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d0b2:	      \-> move.w 1c84a <input+0x2>,d0
    d0b8:	      /-- beq.s d0e0 <CsiCheckInput+0x1dc>
    d0ba:	      |   movea.l #14675990,a0
    d0c0:	      |   move.w (a0),d0
    d0c2:	      |   move.w d0,d0
    d0c4:	      |   andi.l #65535,d0
    d0ca:	      |   andi.l #1024,d0
    d0d0:	      +-- beq.s d0e0 <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    d0d2:	      |   clr.w 1c84a <input+0x2>
        input.rightRelease = TRUE;
    d0d8:	      |   move.w #1,1c850 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d0e0:	      \-> movea.l #12574721,a0
    d0e6:	          move.b (a0),d0
    d0e8:	          move.b d0,d0
    d0ea:	          andi.l #255,d0
    d0f0:	          moveq #64,d1
    d0f2:	          and.l d1,d0
    d0f4:	      /-- bne.s d0fe <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    d0f6:	      |   move.w #1,1c848 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d0fe:	      \-> movea.l #14675990,a0
    d104:	          move.w (a0),d0
    d106:	          move.w d0,d0
    d108:	          andi.l #65535,d0
    d10e:	          andi.l #1024,d0
    d114:	      /-- bne.s d11e <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    d116:	      |   move.w #1,1c84a <input+0x2>
    }

    d11e:	      \-> nop
    d120:	          lea 12(sp),sp
    d124:	          rts

0000d126 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d126:	moveq #0,d0
}
    d128:	rts

0000d12a <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d12a:	nop
    d12c:	rts

0000d12e <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d12e:	nop
    d130:	rts

0000d132 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d132:	moveq #1,d0
}
    d134:	rts

0000d136 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d136:	nop
    d138:	rts

0000d13a <saveSounds>:

void saveSounds (BPTR fp) {
    d13a:	lea -12(sp),sp
    d13e:	move.l a6,-(sp)
    d140:	move.l d2,-(sp)
	FPutC (fp,0);
    d142:	move.l 24(sp),16(sp)
    d148:	clr.l 12(sp)
    d14c:	move.l 1c89e <DOSBase>,d0
    d152:	movea.l d0,a6
    d154:	move.l 16(sp),d1
    d158:	move.l 12(sp),d2
    d15c:	jsr -312(a6)
    d160:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d164:	move.l 1c230 <defSoundVol>,d0
    d16a:	move.l 24(sp),-(sp)
    d16e:	move.l d0,-(sp)
    d170:	jsr 8d0 <put2bytes>
    d176:	addq.l #8,sp
	put2bytes (defVol, fp);
    d178:	move.l 1c22c <defVol>,d0
    d17e:	move.l 24(sp),-(sp)
    d182:	move.l d0,-(sp)
    d184:	jsr 8d0 <put2bytes>
    d18a:	addq.l #8,sp
}
    d18c:	nop
    d18e:	move.l (sp)+,d2
    d190:	movea.l (sp)+,a6
    d192:	lea 12(sp),sp
    d196:	rts

0000d198 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d198:	move.l 4(sp),1c22c <defVol>
}
    d1a0:	nop
    d1a2:	rts

0000d1a4 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d1a4:	move.l 4(sp),1c230 <defSoundVol>
}
    d1ac:	nop
    d1ae:	rts

0000d1b0 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d1b0:	nop
    d1b2:	rts

0000d1b4 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d1b4:	nop
    d1b6:	rts

0000d1b8 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d1b8:	nop
    d1ba:	rts

0000d1bc <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d1bc:	subq.l #4,sp
    d1be:	move.l 12(sp),d0
    d1c2:	move.w d0,d0
    d1c4:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d1c8:	moveq #1,d0
}
    d1ca:	addq.l #4,sp
    d1cc:	rts

0000d1ce <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d1ce:	nop
    d1d0:	rts

0000d1d2 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d1d2:	move.l 16(sp),-(sp)
    d1d6:	move.l 16(sp),-(sp)
    d1da:	jsr e0e <CstBlankScreen>
    d1e0:	addq.l #8,sp
}
    d1e2:	nop
    d1e4:	rts

0000d1e6 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d1e6:	pea 1930e <PutChar+0x168a>
    d1ec:	jsr 171b0 <KPrintF>
    d1f2:	addq.l #4,sp
}
    d1f4:	nop
    d1f6:	rts

0000d1f8 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d1f8:	movea.l 8(sp),a1
    d1fc:	movea.l 12(sp),a0
    d200:	move.l 8(sp),d1
    d204:	move.l 4(sp),d0
    d208:	move.l a1,-(sp)
    d20a:	move.l a0,-(sp)
    d20c:	move.l d1,-(sp)
    d20e:	move.l d0,-(sp)
    d210:	jsr 3f1c <drawLine>
    d216:	lea 16(sp),sp
}
    d21a:	nop
    d21c:	rts

0000d21e <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d21e:	movea.l 12(sp),a1
    d222:	movea.l 4(sp),a0
    d226:	move.l 8(sp),d1
    d22a:	move.l 4(sp),d0
    d22e:	move.l a1,-(sp)
    d230:	move.l a0,-(sp)
    d232:	move.l d1,-(sp)
    d234:	move.l d0,-(sp)
    d236:	jsr 3f1c <drawLine>
    d23c:	lea 16(sp),sp
}
    d240:	nop
    d242:	rts

0000d244 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d244:	pea 19347 <PutChar+0x16c3>
    d24a:	jsr 171b0 <KPrintF>
    d250:	addq.l #4,sp
}
    d252:	nop
    d254:	rts

0000d256 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d256:	jsr 1d06 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d25c:	pea 1c93a <backdropTextureName>
    d262:	pea 1 <_start+0x1>
    d266:	jsr 409e <deleteTextures>
    d26c:	addq.l #8,sp
	backdropTextureName = 0;
    d26e:	clr.l 1c93a <backdropTextureName>
	backdropExists = FALSE;
    d274:	clr.w 1c93e <backdropExists>
}
    d27a:	nop
    d27c:	rts

0000d27e <killParallax>:

void killParallax () {
    d27e:	          lea -12(sp),sp
    d282:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d284:	   /----- bra.s d2f0 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d286:	/--|----> move.l 1c940 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d28e:	|  |      movea.l 12(sp),a0
    d292:	|  |      move.l 42(a0),d0
    d296:	|  |      move.l d0,1c940 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d29c:	|  |      move.l 12(sp),d0
    d2a0:	|  |      addq.l #4,d0
    d2a2:	|  |      move.l d0,-(sp)
    d2a4:	|  |      pea 1 <_start+0x1>
    d2a8:	|  |      jsr 409e <deleteTextures>
    d2ae:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d2b0:	|  |      movea.l 12(sp),a0
    d2b4:	|  |      move.l (a0),d0
    d2b6:	|  |  /-- beq.s d2d0 <killParallax+0x52>
    d2b8:	|  |  |   movea.l 12(sp),a0
    d2bc:	|  |  |   move.l (a0),8(sp)
    d2c0:	|  |  |   move.l 1c896 <SysBase>,d0
    d2c6:	|  |  |   movea.l d0,a6
    d2c8:	|  |  |   movea.l 8(sp),a1
    d2cc:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d2d0:	|  |  \-> tst.l 12(sp)
    d2d4:	|  |  /-- beq.s d2ec <killParallax+0x6e>
    d2d6:	|  |  |   move.l 12(sp),4(sp)
    d2dc:	|  |  |   move.l 1c896 <SysBase>,d0
    d2e2:	|  |  |   movea.l d0,a6
    d2e4:	|  |  |   movea.l 4(sp),a1
    d2e8:	|  |  |   jsr -690(a6)
		k = NULL;
    d2ec:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d2f0:	|  \----> move.l 1c940 <parallaxStuff>,d0
    d2f6:	\-------- bne.s d286 <killParallax+0x8>
	}
}
    d2f8:	          nop
    d2fa:	          nop
    d2fc:	          movea.l (sp)+,a6
    d2fe:	          lea 12(sp),sp
    d302:	          rts

0000d304 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d304:	       move.l 4(sp),-(sp)
    d308:	       jsr 6e2a <openFileFromNum>
    d30e:	       addq.l #4,sp
    d310:	       tst.l d0
    d312:	   /-- bne.s d324 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d314:	   |   pea 19368 <PutChar+0x16e4>
    d31a:	   |   jsr 171b0 <KPrintF>
    d320:	   |   addq.l #4,sp
		return;
    d322:	/--|-- bra.s d344 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d324:	|  \-> move.l 1c87e <bigDataFile>,d0
    d32a:	|      move.l 12(sp),-(sp)
    d32e:	|      move.l 12(sp),-(sp)
    d332:	|      move.l d0,-(sp)
    d334:	|      jsr 1fb4 <CstLoadBackdrop>
    d33a:	|      lea 12(sp),sp
	finishAccess ();
    d33e:	|      jsr 6d22 <finishAccess>
	
}
    d344:	\----> rts

0000d346 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d346:	subq.l #8,sp
    d348:	movea.l 12(sp),a0
    d34c:	move.l 16(sp),d1
    d350:	move.l 20(sp),d0
    d354:	movea.w a0,a0
    d356:	move.w a0,6(sp)
    d35a:	move.w d1,d1
    d35c:	move.w d1,4(sp)
    d360:	move.w d0,d0
    d362:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d366:	pea 193b7 <PutChar+0x1733>
    d36c:	jsr 171b0 <KPrintF>
    d372:	addq.l #4,sp

}
    d374:	nop
    d376:	addq.l #8,sp
    d378:	rts

0000d37a <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d37a:	pea 193da <PutChar+0x1756>
    d380:	jsr 171b0 <KPrintF>
    d386:	addq.l #4,sp
}
    d388:	nop
    d38a:	rts

0000d38c <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d38c:	pea 1c944 <snapshotTextureName>
    d392:	pea 1 <_start+0x1>
    d396:	jsr 409e <deleteTextures>
    d39c:	addq.l #8,sp
	snapshotTextureName = 0;
    d39e:	clr.l 1c944 <snapshotTextureName>
}
    d3a4:	nop
    d3a6:	rts

0000d3a8 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d3a8:	clr.l 1c950 <cameraX>
	cameraY = 0;
    d3ae:	clr.l 1c954 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d3b4:	move.l 1c936 <sceneHeight>,d0
    d3ba:	move.l d0,d1
    d3bc:	move.l 1c932 <sceneWidth>,d0
    d3c2:	move.l d1,-(sp)
    d3c4:	move.l d0,-(sp)
    d3c6:	jsr 3a22 <CstReserveBackdrop>
    d3cc:	addq.l #8,sp
}
    d3ce:	rts

0000d3d0 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d3d0:	jsr d256 <killBackDrop>
	killParallax ();
    d3d6:	jsr d27e <killParallax>
	killZBuffer ();
    d3dc:	jsr 87cc <killZBuffer>
	sceneWidth = x;
    d3e2:	move.l 4(sp),d0
    d3e6:	move.l d0,1c932 <sceneWidth>
	sceneHeight = y;
    d3ec:	move.l 8(sp),d0
    d3f0:	move.l d0,1c936 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d3f6:	pea 19413 <PutChar+0x178f>
    d3fc:	jsr 171b0 <KPrintF>
    d402:	addq.l #4,sp
	return reserveBackdrop();
    d404:	jsr d3a8 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d40a:	rts

0000d40c <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d40c:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d40e:	move.l 12(sp),-(sp)
    d412:	jsr 6bc <get2bytes>
    d418:	addq.l #4,sp
    d41a:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d41e:	move.l 12(sp),-(sp)
    d422:	jsr 6bc <get2bytes>
    d428:	addq.l #4,sp
    d42a:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d42c:	moveq #1,d0
}
    d42e:	addq.l #8,sp
    d430:	rts

0000d432 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d432:	   /-> lea -12(sp),sp
    d436:	   |   move.l a6,-(sp)
    d438:	   |   move.l d2,-(sp)
	if (me) {
    d43a:	   |   tst.l 24(sp)
    d43e:	/--|-- beq.w d4d4 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d442:	|  |   movea.l 24(sp),a0
    d446:	|  |   move.l 42(a0),d0
    d44a:	|  |   move.l 28(sp),-(sp)
    d44e:	|  |   move.l d0,-(sp)
    d450:	|  \-- jsr d432 <saveParallaxRecursive>(pc)
    d454:	|      addq.l #8,sp
		FPutC (fp, 1);
    d456:	|      move.l 28(sp),16(sp)
    d45c:	|      moveq #1,d0
    d45e:	|      move.l d0,12(sp)
    d462:	|      move.l 1c89e <DOSBase>,d0
    d468:	|      movea.l d0,a6
    d46a:	|      move.l 16(sp),d1
    d46e:	|      move.l 12(sp),d2
    d472:	|      jsr -312(a6)
    d476:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d47a:	|      movea.l 24(sp),a0
    d47e:	|      move.w 28(a0),d0
    d482:	|      move.w d0,d0
    d484:	|      andi.l #65535,d0
    d48a:	|      move.l 28(sp),-(sp)
    d48e:	|      move.l d0,-(sp)
    d490:	|      jsr 8d0 <put2bytes>
    d496:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d498:	|      movea.l 24(sp),a0
    d49c:	|      move.w 30(a0),d0
    d4a0:	|      move.w d0,d0
    d4a2:	|      andi.l #65535,d0
    d4a8:	|      move.l 28(sp),-(sp)
    d4ac:	|      move.l d0,-(sp)
    d4ae:	|      jsr 8d0 <put2bytes>
    d4b4:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d4b6:	|      movea.l 24(sp),a0
    d4ba:	|      move.w 32(a0),d0
    d4be:	|      move.w d0,d0
    d4c0:	|      andi.l #65535,d0
    d4c6:	|      move.l 28(sp),-(sp)
    d4ca:	|      move.l d0,-(sp)
    d4cc:	|      jsr 8d0 <put2bytes>
    d4d2:	|      addq.l #8,sp
	}
}
    d4d4:	\----> nop
    d4d6:	       move.l (sp)+,d2
    d4d8:	       movea.l (sp)+,a6
    d4da:	       lea 12(sp),sp
    d4de:	       rts

0000d4e0 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d4e0:	pea 1943a <PutChar+0x17b6>
    d4e6:	jsr 171b0 <KPrintF>
    d4ec:	addq.l #4,sp
	return TRUE;
    d4ee:	moveq #1,d0
    d4f0:	rts

0000d4f2 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d4f2:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d4f4:	             move.l 1c948 <allObjectTypes>,(sp)

	while (huntType) {
    d4fa:	      /----- bra.s d512 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d4fc:	   /--|----> movea.l (sp),a0
    d4fe:	   |  |      move.l 4(a0),d0
    d502:	   |  |      cmp.l 8(sp),d0
    d506:	   |  |  /-- bne.s d50c <findObjectType+0x1a>
    d508:	   |  |  |   move.l (sp),d0
    d50a:	/--|--|--|-- bra.s d522 <findObjectType+0x30>
		huntType = huntType -> next;
    d50c:	|  |  |  \-> movea.l (sp),a0
    d50e:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d512:	|  |  \----> tst.l (sp)
    d514:	|  \-------- bne.s d4fc <findObjectType+0xa>
	}

	return loadObjectType (i);
    d516:	|            move.l 8(sp),-(sp)
    d51a:	|            jsr d5e2 <loadObjectType>
    d520:	|            addq.l #4,sp
}
    d522:	\----------> addq.l #4,sp
    d524:	             rts

0000d526 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d526:	             lea -12(sp),sp
	int i, num = 0;
    d52a:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d52e:	             move.l 20(sp),-(sp)
    d532:	             jsr d4f2 <findObjectType>
    d538:	             addq.l #4,sp
    d53a:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d53c:	             clr.l 8(sp)
    d540:	   /-------- bra.s d576 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d542:	/--|-------> movea.l (sp),a0
    d544:	|  |         move.l 38(a0),d1
    d548:	|  |         move.l 8(sp),d0
    d54c:	|  |         lsl.l #3,d0
    d54e:	|  |         movea.l d1,a0
    d550:	|  |         adda.l d0,a0
    d552:	|  |         move.l (a0),d0
    d554:	|  |         cmp.l 16(sp),d0
    d558:	|  |  /----- bne.s d572 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d55a:	|  |  |      movea.l (sp),a0
    d55c:	|  |  |      move.l 38(a0),d1
    d560:	|  |  |      move.l 8(sp),d0
    d564:	|  |  |      lsl.l #3,d0
    d566:	|  |  |      movea.l d1,a0
    d568:	|  |  |      adda.l d0,a0
    d56a:	|  |  |      move.l 4(a0),4(sp)
			break;
    d570:	|  |  |  /-- bra.s d582 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d572:	|  |  \--|-> addq.l #1,8(sp)
    d576:	|  \-----|-> movea.l (sp),a0
    d578:	|        |   move.l 16(a0),d0
    d57c:	|        |   cmp.l 8(sp),d0
    d580:	\--------|-- bgt.s d542 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d582:	         \-> move.l 4(sp),d0
}
    d586:	             lea 12(sp),sp
    d58a:	             rts

0000d58c <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d58c:	moveq #1,d0
}
    d58e:	rts

0000d590 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d590:	subq.l #8,sp
    d592:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d594:	move.l 16(sp),-(sp)
    d598:	jsr 6bc <get2bytes>
    d59e:	addq.l #4,sp
    d5a0:	move.l d0,-(sp)
    d5a2:	jsr d5e2 <loadObjectType>
    d5a8:	addq.l #4,sp
    d5aa:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d5ae:	movea.l 8(sp),a0
    d5b2:	move.l (a0),4(sp)
    d5b6:	move.l 1c896 <SysBase>,d0
    d5bc:	movea.l d0,a6
    d5be:	movea.l 4(sp),a1
    d5c2:	jsr -690(a6)
	r -> screenName = readString (fp);
    d5c6:	move.l 16(sp),-(sp)
    d5ca:	jsr b02 <readString>
    d5d0:	addq.l #4,sp
    d5d2:	movea.l 8(sp),a0
    d5d6:	move.l d0,(a0)
	return r;
    d5d8:	move.l 8(sp),d0
}
    d5dc:	movea.l (sp)+,a6
    d5de:	addq.l #8,sp
    d5e0:	rts

0000d5e2 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d5e2:	          lea -84(sp),sp
    d5e6:	          move.l a6,-(sp)
    d5e8:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d5ea:	          moveq #42,d0
    d5ec:	          move.l d0,84(sp)
    d5f0:	          clr.l 80(sp)
    d5f4:	          move.l 1c896 <SysBase>,d0
    d5fa:	          movea.l d0,a6
    d5fc:	          move.l 84(sp),d0
    d600:	          move.l 80(sp),d1
    d604:	          jsr -684(a6)
    d608:	          move.l d0,76(sp)
    d60c:	          move.l 76(sp),d0
    d610:	          move.l d0,72(sp)

    if (newType) {
    d614:	/-------- beq.w d88e <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d618:	|         move.l 96(sp),-(sp)
    d61c:	|         jsr 6ef2 <openObjectSlice>
    d622:	|         addq.l #4,sp
    d624:	|         tst.w d0
    d626:	+-------- beq.w d88e <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d62a:	|         move.l 1c87e <bigDataFile>,d0
    d630:	|         move.l d0,-(sp)
    d632:	|         jsr 6bc <get2bytes>
    d638:	|         addq.l #4,sp
    d63a:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d63e:	|         move.l 1c87e <bigDataFile>,64(sp)
    d646:	|         move.l 1c89e <DOSBase>,d0
    d64c:	|         movea.l d0,a6
    d64e:	|         move.l 64(sp),d1
    d652:	|         jsr -306(a6)
    d656:	|         move.l d0,60(sp)
    d65a:	|         move.l 60(sp),d0
    d65e:	|         move.l d0,d0
    d660:	|         movea.l 72(sp),a0
    d664:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d668:	|         move.l 1c87e <bigDataFile>,56(sp)
    d670:	|         move.l 1c89e <DOSBase>,d0
    d676:	|         movea.l d0,a6
    d678:	|         move.l 56(sp),d1
    d67c:	|         jsr -306(a6)
    d680:	|         move.l d0,52(sp)
    d684:	|         move.l 52(sp),d0
    d688:	|         move.l d0,d0
    d68a:	|         movea.l 72(sp),a0
    d68e:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d692:	|         move.l 1c87e <bigDataFile>,48(sp)
    d69a:	|         move.l 1c89e <DOSBase>,d0
    d6a0:	|         movea.l d0,a6
    d6a2:	|         move.l 48(sp),d1
    d6a6:	|         jsr -306(a6)
    d6aa:	|         move.l d0,44(sp)
    d6ae:	|         move.l 44(sp),d0
    d6b2:	|         move.l d0,d0
    d6b4:	|         movea.l 72(sp),a0
    d6b8:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d6bc:	|         move.l 1c87e <bigDataFile>,40(sp)
    d6c4:	|         move.l 1c89e <DOSBase>,d0
    d6ca:	|         movea.l d0,a6
    d6cc:	|         move.l 40(sp),d1
    d6d0:	|         jsr -306(a6)
    d6d4:	|         move.l d0,36(sp)
    d6d8:	|         move.l 36(sp),d0
    d6dc:	|         movea.l 72(sp),a0
    d6e0:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d6e4:	|         move.l 1c87e <bigDataFile>,32(sp)
    d6ec:	|         move.l 1c89e <DOSBase>,d0
    d6f2:	|         movea.l d0,a6
    d6f4:	|         move.l 32(sp),d1
    d6f8:	|         jsr -306(a6)
    d6fc:	|         move.l d0,28(sp)
    d700:	|         move.l 28(sp),d0
    d704:	|         movea.l 72(sp),a0
    d708:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d70c:	|         move.l 1c87e <bigDataFile>,d0
    d712:	|         move.l d0,-(sp)
    d714:	|         jsr 718 <get4bytes>
    d71a:	|         addq.l #4,sp
    d71c:	|         movea.l 72(sp),a0
    d720:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d724:	|         move.l 1c87e <bigDataFile>,d0
    d72a:	|         move.l d0,-(sp)
    d72c:	|         jsr 6bc <get2bytes>
    d732:	|         addq.l #4,sp
    d734:	|         movea.l 72(sp),a0
    d738:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d73c:	|         move.l 1c87e <bigDataFile>,24(sp)
    d744:	|         move.l 1c89e <DOSBase>,d0
    d74a:	|         movea.l d0,a6
    d74c:	|         move.l 24(sp),d1
    d750:	|         jsr -306(a6)
    d754:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d758:	|         move.l 1c87e <bigDataFile>,d0
    d75e:	|         move.l d0,-(sp)
    d760:	|         jsr 7d8 <getFloat>
    d766:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d768:	|         move.l 1c87e <bigDataFile>,d0
    d76e:	|         move.l d0,-(sp)
    d770:	|         jsr 7d8 <getFloat>
    d776:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d778:	|         move.l 1c87e <bigDataFile>,d0
    d77e:	|         move.l d0,-(sp)
    d780:	|         jsr 6bc <get2bytes>
    d786:	|         addq.l #4,sp
    d788:	|         move.l d0,d0
    d78a:	|         movea.l 72(sp),a0
    d78e:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d792:	|         move.l 1c87e <bigDataFile>,d0
    d798:	|         move.l d0,-(sp)
    d79a:	|         jsr 6bc <get2bytes>
    d7a0:	|         addq.l #4,sp
    d7a2:	|         movea.l 72(sp),a0
    d7a6:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d7aa:	|         movea.l 72(sp),a0
    d7ae:	|         move.l 16(a0),d0
    d7b2:	|  /----- beq.s d7e4 <loadObjectType+0x202>
    d7b4:	|  |      movea.l 72(sp),a0
    d7b8:	|  |      move.l 16(a0),d0
    d7bc:	|  |      lsl.l #3,d0
    d7be:	|  |      move.l d0,16(sp)
    d7c2:	|  |      clr.l 12(sp)
    d7c6:	|  |      move.l 1c896 <SysBase>,d0
    d7cc:	|  |      movea.l d0,a6
    d7ce:	|  |      move.l 16(sp),d0
    d7d2:	|  |      move.l 12(sp),d1
    d7d6:	|  |      jsr -684(a6)
    d7da:	|  |      move.l d0,8(sp)
    d7de:	|  |      move.l 8(sp),d0
    d7e2:	|  |  /-- bra.s d7e6 <loadObjectType+0x204>
    d7e4:	|  \--|-> moveq #0,d0
    d7e6:	|     \-> movea.l 72(sp),a0
    d7ea:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d7ee:	|         clr.l 88(sp)
    d7f2:	|     /-- bra.s d842 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d7f4:	|  /--|-> move.l 1c87e <bigDataFile>,d1
    d7fa:	|  |  |   movea.l 72(sp),a0
    d7fe:	|  |  |   movea.l 38(a0),a0
    d802:	|  |  |   move.l 88(sp),d0
    d806:	|  |  |   lsl.l #3,d0
    d808:	|  |  |   lea (0,a0,d0.l),a2
    d80c:	|  |  |   move.l d1,-(sp)
    d80e:	|  |  |   jsr 6bc <get2bytes>
    d814:	|  |  |   addq.l #4,sp
    d816:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d818:	|  |  |   move.l 1c87e <bigDataFile>,d1
    d81e:	|  |  |   movea.l 72(sp),a0
    d822:	|  |  |   movea.l 38(a0),a0
    d826:	|  |  |   move.l 88(sp),d0
    d82a:	|  |  |   lsl.l #3,d0
    d82c:	|  |  |   lea (0,a0,d0.l),a2
    d830:	|  |  |   move.l d1,-(sp)
    d832:	|  |  |   jsr 6bc <get2bytes>
    d838:	|  |  |   addq.l #4,sp
    d83a:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d83e:	|  |  |   addq.l #1,88(sp)
    d842:	|  |  \-> movea.l 72(sp),a0
    d846:	|  |      move.l 16(a0),d0
    d84a:	|  |      cmp.l 88(sp),d0
    d84e:	|  \----- bgt.s d7f4 <loadObjectType+0x212>
            }
            finishAccess();
    d850:	|         jsr 6d22 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d856:	|         move.l 68(sp),-(sp)
    d85a:	|         jsr 6d2c <getNumberedString>
    d860:	|         addq.l #4,sp
    d862:	|         movea.l 72(sp),a0
    d866:	|         move.l d0,(a0)
            newType->objectNum = i;
    d868:	|         movea.l 72(sp),a0
    d86c:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d872:	|         move.l 1c948 <allObjectTypes>,d0
    d878:	|         movea.l 72(sp),a0
    d87c:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d880:	|         move.l 72(sp),1c948 <allObjectTypes>
            return newType;
    d888:	|         move.l 72(sp),d0
    d88c:	|     /-- bra.s d890 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d88e:	\-----|-> moveq #0,d0
}
    d890:	      \-> movea.l (sp)+,a2
    d892:	          movea.l (sp)+,a6
    d894:	          lea 84(sp),sp
    d898:	          rts

0000d89a <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d89a:	             lea -16(sp),sp
    d89e:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d8a0:	             move.l #117064,16(sp)

	while (* huntRegion) {
    d8a8:	   /-------- bra.s d91c <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d8aa:	/--|-------> movea.l 16(sp),a0
    d8ae:	|  |         move.l (a0),d0
    d8b0:	|  |         cmp.l 24(sp),d0
    d8b4:	|  |  /----- bne.s d90e <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d8b6:	|  |  |      movea.l 24(sp),a0
    d8ba:	|  |  |      move.l 8(a0),d0
    d8be:	|  |  |      movea.l 16(sp),a0
    d8c2:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d8c4:	|  |  |      movea.l 24(sp),a0
    d8c8:	|  |  |      move.l 38(a0),12(sp)
    d8ce:	|  |  |      move.l 1c896 <SysBase>,d0
    d8d4:	|  |  |      movea.l d0,a6
    d8d6:	|  |  |      movea.l 12(sp),a1
    d8da:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d8de:	|  |  |      movea.l 24(sp),a0
    d8e2:	|  |  |      move.l (a0),8(sp)
    d8e6:	|  |  |      move.l 1c896 <SysBase>,d0
    d8ec:	|  |  |      movea.l d0,a6
    d8ee:	|  |  |      movea.l 8(sp),a1
    d8f2:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d8f6:	|  |  |      move.l 24(sp),4(sp)
    d8fc:	|  |  |      move.l 1c896 <SysBase>,d0
    d902:	|  |  |      movea.l d0,a6
    d904:	|  |  |      movea.l 4(sp),a1
    d908:	|  |  |      jsr -690(a6)
			return;
    d90c:	|  |  |  /-- bra.s d932 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d90e:	|  |  \--|-> movea.l 16(sp),a0
    d912:	|  |     |   move.l (a0),d0
    d914:	|  |     |   move.l d0,d1
    d916:	|  |     |   addq.l #8,d1
    d918:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d91c:	|  \-----|-> movea.l 16(sp),a0
    d920:	|        |   move.l (a0),d0
    d922:	\--------|-- bne.s d8aa <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d924:	         |   pea 19461 <PutChar+0x17dd>
    d92a:	         |   jsr 171b0 <KPrintF>
    d930:	         |   addq.l #4,sp
}
    d932:	         \-> movea.l (sp)+,a6
    d934:	             lea 16(sp),sp
    d938:	             rts

0000d93a <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d93a:	movea.l 4(sp),a0
    d93e:	move.l 4(a0),d0
    d942:	move.l 8(sp),-(sp)
    d946:	move.l d0,-(sp)
    d948:	jsr 8d0 <put2bytes>
    d94e:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d950:	movea.l 4(sp),a0
    d954:	move.l (a0),d0
    d956:	move.l 8(sp),-(sp)
    d95a:	move.l d0,-(sp)
    d95c:	jsr bd8 <writeString>
    d962:	addq.l #8,sp
    d964:	nop
    d966:	rts

0000d968 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d968:	                         lea -112(sp),sp
    d96c:	                         move.l a6,-(sp)
    d96e:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d970:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d974:	                         move.w 1c94e <saveEncoding>,d0
    d97a:	                  /----- beq.s d984 <fileToStack+0x1c>
    d97c:	                  |      move.l #103559,d0
    d982:	                  |  /-- bra.s d98a <fileToStack+0x22>
    d984:	                  \--|-> move.l #103585,d0
    d98a:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d98e:	                         move.l 124(sp),112(sp)
    d994:	                         move.l #1005,108(sp)
    d99c:	                         move.l 1c89e <DOSBase>,d0
    d9a2:	                         movea.l d0,a6
    d9a4:	                         move.l 112(sp),d1
    d9a8:	                         move.l 108(sp),d2
    d9ac:	                         jsr -30(a6)
    d9b0:	                         move.l d0,104(sp)
    d9b4:	                         move.l 104(sp),d0
    d9b8:	                         move.l d0,100(sp)
    if (!fp) {
    d9bc:	                     /-- bne.s d9d6 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d9be:	                     |   move.l 124(sp),-(sp)
    d9c2:	                     |   pea 194b8 <PutChar+0x1834>
    d9c8:	                     |   jsr 171b0 <KPrintF>
    d9ce:	                     |   addq.l #8,sp
        return FALSE;
    d9d0:	                     |   clr.w d0
    d9d2:	/--------------------|-- bra.w dccc <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d9d6:	|                    \-> move.w 1c94e <saveEncoding>,d0
    d9dc:	|                        move.l d0,d0
    d9de:	|                        move.b d0,1c94c <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d9e4:	|                        move.w 1c94e <saveEncoding>,d0
    d9ea:	|                        lsr.w #8,d0
    d9ec:	|                        move.l d0,d0
    d9ee:	|                        move.b d0,1c94d <encode2>

    while (*checker) {
    d9f4:	|                 /----- bra.s da58 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d9f6:	|              /--|----> move.l 100(sp),30(sp)
    d9fc:	|              |  |      move.l 1c89e <DOSBase>,d0
    da02:	|              |  |      movea.l d0,a6
    da04:	|              |  |      move.l 30(sp),d1
    da08:	|              |  |      jsr -306(a6)
    da0c:	|              |  |      move.l d0,26(sp)
    da10:	|              |  |      move.l 26(sp),d1
    da14:	|              |  |      movea.l 116(sp),a0
    da18:	|              |  |      move.b (a0),d0
    da1a:	|              |  |      ext.w d0
    da1c:	|              |  |      movea.w d0,a0
    da1e:	|              |  |      cmpa.l d1,a0
    da20:	|              |  |  /-- beq.s da54 <fileToStack+0xec>
            Close(fp);
    da22:	|              |  |  |   move.l 100(sp),22(sp)
    da28:	|              |  |  |   move.l 1c89e <DOSBase>,d0
    da2e:	|              |  |  |   movea.l d0,a6
    da30:	|              |  |  |   move.l 22(sp),d1
    da34:	|              |  |  |   jsr -36(a6)
    da38:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    da3c:	|              |  |  |   move.l 124(sp),-(sp)
    da40:	|              |  |  |   pea 194c5 <PutChar+0x1841>
    da46:	|              |  |  |   jsr 171b0 <KPrintF>
    da4c:	|              |  |  |   addq.l #8,sp
            return FALSE;
    da4e:	|              |  |  |   clr.w d0
    da50:	+--------------|--|--|-- bra.w dccc <fileToStack+0x364>
        }
        checker++;
    da54:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    da58:	|              |  \----> movea.l 116(sp),a0
    da5c:	|              |         move.b (a0),d0
    da5e:	|              \-------- bne.s d9f6 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    da60:	|                        move.w 1c94e <saveEncoding>,d0
    da66:	|  /-------------------- beq.s dada <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    da68:	|  |                     move.l 100(sp),-(sp)
    da6c:	|  |                     jsr dcd6 <readStringEncoded>
    da72:	|  |                     addq.l #4,sp
    da74:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    da78:	|  |                     pea 19506 <PutChar+0x1882>
    da7e:	|  |                     move.l 100(sp),-(sp)
    da82:	|  |                     jsr 13c34 <strcmp>
    da88:	|  |                     addq.l #8,sp
    da8a:	|  |                     tst.l d0
    da8c:	|  |                 /-- beq.s dac0 <fileToStack+0x158>
            Close(fp);
    da8e:	|  |                 |   move.l 100(sp),88(sp)
    da94:	|  |                 |   move.l 1c89e <DOSBase>,d0
    da9a:	|  |                 |   movea.l d0,a6
    da9c:	|  |                 |   move.l 88(sp),d1
    daa0:	|  |                 |   jsr -36(a6)
    daa4:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    daa8:	|  |                 |   move.l 124(sp),-(sp)
    daac:	|  |                 |   pea 19515 <PutChar+0x1891>
    dab2:	|  |                 |   jsr 171b0 <KPrintF>
    dab8:	|  |                 |   addq.l #8,sp
            return FALSE;
    daba:	|  |                 |   clr.w d0
    dabc:	+--|-----------------|-- bra.w dccc <fileToStack+0x364>
        }
        FreeVec(checker);
    dac0:	|  |                 \-> move.l 96(sp),92(sp)
    dac6:	|  |                     move.l 1c896 <SysBase>,d0
    dacc:	|  |                     movea.l d0,a6
    dace:	|  |                     movea.l 92(sp),a1
    dad2:	|  |                     jsr -690(a6)
        checker = NULL;
    dad6:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    dada:	|  >-------------------> move.w 1c94e <saveEncoding>,d0
    dae0:	|  |     /-------------- beq.w dc14 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    dae4:	|  |     |               move.l 100(sp),76(sp)
    daea:	|  |     |               move.l 1c89e <DOSBase>,d0
    daf0:	|  |     |               movea.l d0,a6
    daf2:	|  |     |               move.l 76(sp),d1
    daf6:	|  |     |               jsr -306(a6)
    dafa:	|  |     |               move.l d0,72(sp)
    dafe:	|  |     |               move.l 72(sp),d0
    db02:	|  |     |               move.b 1c94c <encode1>,d1
    db08:	|  |     |               ext.w d1
    db0a:	|  |     |               ext.l d1
    db0c:	|  |     |               move.l d0,d2
    db0e:	|  |     |               eor.l d1,d2
    db10:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    db14:	|  |     |               moveq #-1,d0
    db16:	|  |     |               cmp.l 68(sp),d0
    db1a:	|  |  /--|-------------- beq.w dcaa <fileToStack+0x342>

            char i = (char) tmp;
    db1e:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    db24:	|  |  |  |               move.b 67(sp),d0
    db28:	|  |  |  |               ext.w d0
    db2a:	|  |  |  |               movea.w d0,a0
    db2c:	|  |  |  |               moveq #2,d2
    db2e:	|  |  |  |               cmp.l a0,d2
    db30:	|  |  |  |     /-------- beq.s dbac <fileToStack+0x244>
    db32:	|  |  |  |     |         moveq #2,d0
    db34:	|  |  |  |     |         cmp.l a0,d0
    db36:	|  |  |  |  /--|-------- blt.w dbe2 <fileToStack+0x27a>
    db3a:	|  |  |  |  |  |         cmpa.w #0,a0
    db3e:	|  |  |  |  |  |     /-- beq.s db4a <fileToStack+0x1e2>
    db40:	|  |  |  |  |  |     |   moveq #1,d2
    db42:	|  |  |  |  |  |     |   cmp.l a0,d2
    db44:	|  |  |  |  |  |  /--|-- beq.s db86 <fileToStack+0x21e>
    db46:	|  |  |  |  +--|--|--|-- bra.w dbe2 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    db4a:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    db4e:	|  |  |  |  |  |  |      jsr dcd6 <readStringEncoded>
    db54:	|  |  |  |  |  |  |      addq.l #4,sp
    db56:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    db5a:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    db5e:	|  |  |  |  |  |  |      lea 14(sp),a0
    db62:	|  |  |  |  |  |  |      move.l a0,-(sp)
    db64:	|  |  |  |  |  |  |      jsr 149aa <makeTextVar>
    db6a:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    db6c:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    db72:	|  |  |  |  |  |  |      move.l 1c896 <SysBase>,d0
    db78:	|  |  |  |  |  |  |      movea.l d0,a6
    db7a:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    db7e:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    db82:	|  |  |  |  |  |  |  /-- bra.w dc3a <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    db86:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    db8a:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    db90:	|  |  |  |  |  |     |   addq.l #4,sp
    db92:	|  |  |  |  |  |     |   move.l d0,-(sp)
    db94:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    db98:	|  |  |  |  |  |     |   lea 18(sp),a0
    db9c:	|  |  |  |  |  |     |   move.l a0,-(sp)
    db9e:	|  |  |  |  |  |     |   jsr 1507a <setVariable>
    dba4:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    dba8:	|  |  |  |  |  |     +-- bra.w dc3a <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    dbac:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    dbb2:	|  |  |  |  |        |   move.l 1c89e <DOSBase>,d0
    dbb8:	|  |  |  |  |        |   movea.l d0,a6
    dbba:	|  |  |  |  |        |   move.l 62(sp),d1
    dbbe:	|  |  |  |  |        |   jsr -306(a6)
    dbc2:	|  |  |  |  |        |   move.l d0,58(sp)
    dbc6:	|  |  |  |  |        |   move.l 58(sp),d0
    dbca:	|  |  |  |  |        |   move.l d0,-(sp)
    dbcc:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dbd0:	|  |  |  |  |        |   lea 18(sp),a0
    dbd4:	|  |  |  |  |        |   move.l a0,-(sp)
    dbd6:	|  |  |  |  |        |   jsr 1507a <setVariable>
    dbdc:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dbe0:	|  |  |  |  |        +-- bra.s dc3a <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dbe2:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    dbe6:	|  |  |  |           |   pea 19597 <PutChar+0x1913>
    dbec:	|  |  |  |           |   jsr 171b0 <KPrintF>
    dbf2:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dbf4:	|  |  |  |           |   move.l 100(sp),46(sp)
    dbfa:	|  |  |  |           |   move.l 1c89e <DOSBase>,d0
    dc00:	|  |  |  |           |   movea.l d0,a6
    dc02:	|  |  |  |           |   move.l 46(sp),d1
    dc06:	|  |  |  |           |   jsr -36(a6)
    dc0a:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dc0e:	|  |  |  |           |   clr.w d0
    dc10:	+--|--|--|-----------|-- bra.w dccc <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dc14:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    dc18:	|  |  |              |   jsr dd9c <readTextPlain>
    dc1e:	|  |  |              |   addq.l #4,sp
    dc20:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dc24:	|  |  |        /-----|-- beq.w dcae <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dc28:	|  |  |        |     |   move.l 80(sp),-(sp)
    dc2c:	|  |  |        |     |   lea 14(sp),a0
    dc30:	|  |  |        |     |   move.l a0,-(sp)
    dc32:	|  |  |        |     |   jsr 149aa <makeTextVar>
    dc38:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dc3a:	|  |  |        |     \-> movea.l 128(sp),a0
    dc3e:	|  |  |        |         move.l (a0),d0
    dc40:	|  |  |        |  /----- bne.s dc70 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dc42:	|  |  |        |  |      move.l 128(sp),d0
    dc46:	|  |  |        |  |      move.l d0,-(sp)
    dc48:	|  |  |        |  |      lea 14(sp),a0
    dc4c:	|  |  |        |  |      move.l a0,-(sp)
    dc4e:	|  |  |        |  |      jsr 1404a <addVarToStackQuick>
    dc54:	|  |  |        |  |      addq.l #8,sp
    dc56:	|  |  |        |  |      tst.w d0
    dc58:	|  |  |        |  |  /-- bne.s dc5e <fileToStack+0x2f6>
    dc5a:	|  |  |        |  |  |   clr.w d0
    dc5c:	+--|--|--------|--|--|-- bra.s dccc <fileToStack+0x364>
            sH->last = sH->first;
    dc5e:	|  |  |        |  |  \-> movea.l 128(sp),a0
    dc62:	|  |  |        |  |      move.l (a0),d0
    dc64:	|  |  |        |  |      movea.l 128(sp),a0
    dc68:	|  |  |        |  |      move.l d0,4(a0)
    dc6c:	|  +--|--------|--|----- bra.w dada <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dc70:	|  |  |        |  \----> movea.l 128(sp),a0
    dc74:	|  |  |        |         move.l 4(a0),d0
    dc78:	|  |  |        |         addq.l #8,d0
    dc7a:	|  |  |        |         move.l d0,-(sp)
    dc7c:	|  |  |        |         lea 14(sp),a0
    dc80:	|  |  |        |         move.l a0,-(sp)
    dc82:	|  |  |        |         jsr 1404a <addVarToStackQuick>
    dc88:	|  |  |        |         addq.l #8,sp
    dc8a:	|  |  |        |         tst.w d0
    dc8c:	|  |  |        |     /-- bne.s dc92 <fileToStack+0x32a>
    dc8e:	|  |  |        |     |   clr.w d0
    dc90:	+--|--|--------|-----|-- bra.s dccc <fileToStack+0x364>
            sH->last = sH->last->next;
    dc92:	|  |  |        |     \-> movea.l 128(sp),a0
    dc96:	|  |  |        |         movea.l 4(a0),a0
    dc9a:	|  |  |        |         move.l 8(a0),d0
    dc9e:	|  |  |        |         movea.l 128(sp),a0
    dca2:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    dca6:	|  \--|--------|-------- bra.w dada <fileToStack+0x172>
            if (tmp == -1) break;
    dcaa:	|     \--------|-------> nop
    dcac:	|              |     /-- bra.s dcb0 <fileToStack+0x348>
            if (!line) break;
    dcae:	|              \-----|-> nop
        }
    }
    Close(fp);
    dcb0:	|                    \-> move.l 100(sp),38(sp)
    dcb6:	|                        move.l 1c89e <DOSBase>,d0
    dcbc:	|                        movea.l d0,a6
    dcbe:	|                        move.l 38(sp),d1
    dcc2:	|                        jsr -36(a6)
    dcc6:	|                        move.l d0,34(sp)
    return TRUE;
    dcca:	|                        moveq #1,d0
}
    dccc:	\----------------------> move.l (sp)+,d2
    dcce:	                         movea.l (sp)+,a6
    dcd0:	                         lea 112(sp),sp
    dcd4:	                         rts

0000dcd6 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    dcd6:	          lea -32(sp),sp
    dcda:	          move.l a6,-(sp)
    dcdc:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    dcde:	          move.l 44(sp),-(sp)
    dce2:	          jsr 6bc <get2bytes>
    dce8:	          addq.l #4,sp
    dcea:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    dcee:	          move.l 32(sp),d0
    dcf2:	          addq.l #1,d0
    dcf4:	          move.l d0,28(sp)
    dcf8:	          clr.l 24(sp)
    dcfc:	          move.l 1c896 <SysBase>,d0
    dd02:	          movea.l d0,a6
    dd04:	          move.l 28(sp),d0
    dd08:	          move.l 24(sp),d1
    dd0c:	          jsr -684(a6)
    dd10:	          move.l d0,20(sp)
    dd14:	          move.l 20(sp),d0
    dd18:	          move.l d0,16(sp)
    if (!s) return NULL;
    dd1c:	      /-- bne.s dd22 <readStringEncoded+0x4c>
    dd1e:	      |   moveq #0,d0
    dd20:	/-----|-- bra.s dd92 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dd22:	|     \-> clr.l 36(sp)
    dd26:	|     /-- bra.s dd78 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dd28:	|  /--|-> move.l 44(sp),12(sp)
    dd2e:	|  |  |   move.l 1c89e <DOSBase>,d0
    dd34:	|  |  |   movea.l d0,a6
    dd36:	|  |  |   move.l 12(sp),d1
    dd3a:	|  |  |   jsr -306(a6)
    dd3e:	|  |  |   move.l d0,8(sp)
    dd42:	|  |  |   move.l 8(sp),d0
    dd46:	|  |  |   move.l d0,d1
    dd48:	|  |  |   move.b 1c94c <encode1>,d2
    dd4e:	|  |  |   move.l 36(sp),d0
    dd52:	|  |  |   movea.l 16(sp),a0
    dd56:	|  |  |   adda.l d0,a0
    dd58:	|  |  |   move.b d1,d0
    dd5a:	|  |  |   eor.b d2,d0
    dd5c:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dd5e:	|  |  |   move.b 1c94c <encode1>,d0
    dd64:	|  |  |   move.b d0,d1
    dd66:	|  |  |   move.b 1c94d <encode2>,d0
    dd6c:	|  |  |   add.b d1,d0
    dd6e:	|  |  |   move.b d0,1c94c <encode1>
    for (a = 0; a < len; a++) {
    dd74:	|  |  |   addq.l #1,36(sp)
    dd78:	|  |  \-> move.l 36(sp),d0
    dd7c:	|  |      cmp.l 32(sp),d0
    dd80:	|  \----- blt.s dd28 <readStringEncoded+0x52>
    }
    s[len] = 0;
    dd82:	|         move.l 32(sp),d0
    dd86:	|         movea.l 16(sp),a0
    dd8a:	|         adda.l d0,a0
    dd8c:	|         clr.b (a0)
    return s;
    dd8e:	|         move.l 16(sp),d0
}
    dd92:	\-------> move.l (sp)+,d2
    dd94:	          movea.l (sp)+,a6
    dd96:	          lea 32(sp),sp
    dd9a:	          rts

0000dd9c <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dd9c:	             lea -104(sp),sp
    dda0:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    dda4:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    dda8:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    ddae:	             move.l 124(sp),106(sp)
    ddb4:	             clr.l 102(sp)
    ddb8:	             clr.l 98(sp)
    ddbc:	             move.l 1c89e <DOSBase>,d0
    ddc2:	             movea.l d0,a6
    ddc4:	             move.l 106(sp),d1
    ddc8:	             move.l 102(sp),d2
    ddcc:	             move.l 98(sp),d3
    ddd0:	             jsr -66(a6)
    ddd4:	             move.l d0,94(sp)
    ddd8:	             move.l 94(sp),d0
    dddc:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    dde0:	   /-------- bra.s de24 <readTextPlain+0x88>
        tmp = FGetC(fp);
    dde2:	/--|-------> move.l 124(sp),22(sp)
    dde8:	|  |         move.l 1c89e <DOSBase>,d0
    ddee:	|  |         movea.l d0,a6
    ddf0:	|  |         move.l 22(sp),d1
    ddf4:	|  |         jsr -306(a6)
    ddf8:	|  |         move.l d0,18(sp)
    ddfc:	|  |         move.l 18(sp),d0
    de00:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    de04:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    de0a:	|  |         cmpi.b #10,17(sp)
    de10:	|  |  /----- beq.s de1a <readTextPlain+0x7e>
    de12:	|  |  |      moveq #-1,d0
    de14:	|  |  |      cmp.l 110(sp),d0
    de18:	|  |  |  /-- bne.s de20 <readTextPlain+0x84>
            keepGoing = FALSE;
    de1a:	|  |  \--|-> clr.w 114(sp)
    de1e:	|  +-----|-- bra.s de24 <readTextPlain+0x88>
        } else {
            stringSize++;
    de20:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    de24:	|  \-------> tst.w 114(sp)
    de28:	\----------- bne.s dde2 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    de2a:	             tst.l 116(sp)
    de2e:	         /-- bne.s de3e <readTextPlain+0xa2>
    de30:	         |   moveq #-1,d0
    de32:	         |   cmp.l 110(sp),d0
    de36:	         +-- bne.s de3e <readTextPlain+0xa2>
        return NULL;
    de38:	         |   moveq #0,d0
    de3a:	      /--|-- bra.w df24 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    de3e:	      |  \-> move.l 124(sp),86(sp)
    de44:	      |      move.l 90(sp),82(sp)
    de4a:	      |      moveq #-1,d0
    de4c:	      |      move.l d0,78(sp)
    de50:	      |      move.l 1c89e <DOSBase>,d0
    de56:	      |      movea.l d0,a6
    de58:	      |      move.l 86(sp),d1
    de5c:	      |      move.l 82(sp),d2
    de60:	      |      move.l 78(sp),d3
    de64:	      |      jsr -66(a6)
    de68:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    de6c:	      |      move.l 116(sp),d0
    de70:	      |      addq.l #1,d0
    de72:	      |      move.l d0,70(sp)
    de76:	      |      clr.l 66(sp)
    de7a:	      |      move.l 1c896 <SysBase>,d0
    de80:	      |      movea.l d0,a6
    de82:	      |      move.l 70(sp),d0
    de86:	      |      move.l 66(sp),d1
    de8a:	      |      jsr -684(a6)
    de8e:	      |      move.l d0,62(sp)
    de92:	      |      move.l 62(sp),d0
    de96:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    de9a:	      |  /-- bne.s dea2 <readTextPlain+0x106>
    de9c:	      |  |   moveq #0,d0
    de9e:	      +--|-- bra.w df24 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dea2:	      |  \-> move.l 124(sp),54(sp)
    dea8:	      |      move.l 58(sp),50(sp)
    deae:	      |      moveq #1,d0
    deb0:	      |      move.l d0,46(sp)
    deb4:	      |      move.l 116(sp),42(sp)
    deba:	      |      move.l 1c89e <DOSBase>,d0
    dec0:	      |      movea.l d0,a6
    dec2:	      |      move.l 54(sp),d1
    dec6:	      |      move.l 50(sp),d2
    deca:	      |      move.l 46(sp),d3
    dece:	      |      move.l 42(sp),d4
    ded2:	      |      jsr -324(a6)
    ded6:	      |      move.l d0,38(sp)
    deda:	      |      move.l 38(sp),d0
    dede:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dee2:	      |      move.l 34(sp),d0
    dee6:	      |      cmp.l 116(sp),d0
    deea:	      |  /-- beq.s defa <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    deec:	      |  |   pea 195cc <PutChar+0x1948>
    def2:	      |  |   jsr 171b0 <KPrintF>
    def8:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    defa:	      |  \-> move.l 124(sp),30(sp)
    df00:	      |      move.l 1c89e <DOSBase>,d0
    df06:	      |      movea.l d0,a6
    df08:	      |      move.l 30(sp),d1
    df0c:	      |      jsr -306(a6)
    df10:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    df14:	      |      move.l 116(sp),d0
    df18:	      |      movea.l 58(sp),a0
    df1c:	      |      adda.l d0,a0
    df1e:	      |      clr.b (a0)
    }

    return reply;
    df20:	      |      move.l 58(sp),d0
}
    df24:	      \----> movem.l (sp)+,d2-d4/a6
    df28:	             lea 104(sp),sp
    df2c:	             rts

0000df2e <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    df2e:	                      lea -144(sp),sp
    df32:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    df36:	                      move.l 160(sp),148(sp)
    df3c:	                      move.l #1006,144(sp)
    df44:	                      move.l 1c89e <DOSBase>,d0
    df4a:	                      movea.l d0,a6
    df4c:	                      move.l 148(sp),d1
    df50:	                      move.l 144(sp),d2
    df54:	                      jsr -30(a6)
    df58:	                      move.l d0,140(sp)
    df5c:	                      move.l 140(sp),d0
    df60:	                      move.l d0,136(sp)

    if (!fp) {
    df64:	                  /-- bne.s df7e <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    df66:	                  |   move.l 160(sp),-(sp)
    df6a:	                  |   pea 195ed <PutChar+0x1969>
    df70:	                  |   jsr 171b0 <KPrintF>
    df76:	                  |   addq.l #8,sp
        return FALSE;
    df78:	                  |   clr.w d0
    df7a:	/-----------------|-- bra.w e23a <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    df7e:	|                 \-> movea.l 164(sp),a0
    df82:	|                     movea.l 4(a0),a0
    df86:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    df8a:	|                     move.w 1c94e <saveEncoding>,d0
    df90:	|                     move.l d0,d0
    df92:	|                     move.b d0,1c94c <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    df98:	|                     move.w 1c94e <saveEncoding>,d0
    df9e:	|                     lsr.w #8,d0
    dfa0:	|                     move.l d0,d0
    dfa2:	|                     move.b d0,1c94d <encode2>

    if (saveEncoding) {
    dfa8:	|                     move.w 1c94e <saveEncoding>,d0
    dfae:	|                 /-- beq.s e000 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    dfb0:	|                 |   move.l 136(sp),116(sp)
    dfb6:	|                 |   move.l #103559,112(sp)
    dfbe:	|                 |   moveq #99,d0
    dfc0:	|                 |   not.b d0
    dfc2:	|                 |   add.l sp,d0
    dfc4:	|                 |   addi.l #-144,d0
    dfca:	|                 |   move.l d0,108(sp)
    dfce:	|                 |   move.l 1c89e <DOSBase>,d0
    dfd4:	|                 |   movea.l d0,a6
    dfd6:	|                 |   move.l 116(sp),d1
    dfda:	|                 |   move.l 112(sp),d2
    dfde:	|                 |   move.l 108(sp),d3
    dfe2:	|                 |   jsr -354(a6)
    dfe6:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    dfea:	|                 |   move.l 136(sp),-(sp)
    dfee:	|                 |   pea 19506 <PutChar+0x1882>
    dff4:	|                 |   jsr e244 <writeStringEncoded>
    dffa:	|                 |   addq.l #8,sp
    dffc:	|  /--------------|-- bra.w e212 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e000:	|  |              \-> move.l 136(sp),132(sp)
    e006:	|  |                  move.l #103585,128(sp)
    e00e:	|  |                  moveq #99,d1
    e010:	|  |                  not.b d1
    e012:	|  |                  add.l sp,d1
    e014:	|  |                  addi.l #-144,d1
    e01a:	|  |                  move.l d1,124(sp)
    e01e:	|  |                  move.l 1c89e <DOSBase>,d0
    e024:	|  |                  movea.l d0,a6
    e026:	|  |                  move.l 132(sp),d1
    e02a:	|  |                  move.l 128(sp),d2
    e02e:	|  |                  move.l 124(sp),d3
    e032:	|  |                  jsr -354(a6)
    e036:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e03a:	|  +----------------- bra.w e212 <stackToFile+0x2e4>
        if (saveEncoding) {
    e03e:	|  |  /-------------> move.w 1c94e <saveEncoding>,d0
    e044:	|  |  |     /-------- beq.w e196 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e048:	|  |  |     |         movea.l 152(sp),a0
    e04c:	|  |  |     |         move.l (a0),d0
    e04e:	|  |  |     |         moveq #1,d1
    e050:	|  |  |     |         cmp.l d0,d1
    e052:	|  |  |     |     /-- beq.s e0a2 <stackToFile+0x174>
    e054:	|  |  |     |     |   moveq #3,d1
    e056:	|  |  |     |     |   cmp.l d0,d1
    e058:	|  |  |     |  /--|-- bne.w e164 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e05c:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e062:	|  |  |     |  |  |   move.b 1c94c <encode1>,d0
    e068:	|  |  |     |  |  |   ext.w d0
    e06a:	|  |  |     |  |  |   movea.w d0,a0
    e06c:	|  |  |     |  |  |   move.l a0,72(sp)
    e070:	|  |  |     |  |  |   move.l 1c89e <DOSBase>,d0
    e076:	|  |  |     |  |  |   movea.l d0,a6
    e078:	|  |  |     |  |  |   move.l 76(sp),d1
    e07c:	|  |  |     |  |  |   move.l 72(sp),d2
    e080:	|  |  |     |  |  |   jsr -312(a6)
    e084:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e088:	|  |  |     |  |  |   movea.l 152(sp),a0
    e08c:	|  |  |     |  |  |   move.l 4(a0),d0
    e090:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e094:	|  |  |     |  |  |   move.l d0,-(sp)
    e096:	|  |  |     |  |  |   jsr e244 <writeStringEncoded>
    e09c:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e09e:	|  |  |  /--|--|--|-- bra.w e208 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e0a2:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    e0a6:	|  |  |  |  |  |      move.l 4(a0),d0
    e0aa:	|  |  |  |  |  |  /-- bmi.s e11a <stackToFile+0x1ec>
    e0ac:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e0b0:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e0b4:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e0ba:	|  |  |  |  |  |  +-- bgt.s e11a <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e0bc:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e0c2:	|  |  |  |  |  |  |   move.b 1c94c <encode1>,d0
    e0c8:	|  |  |  |  |  |  |   eori.b #2,d0
    e0cc:	|  |  |  |  |  |  |   ext.w d0
    e0ce:	|  |  |  |  |  |  |   movea.w d0,a0
    e0d0:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e0d4:	|  |  |  |  |  |  |   move.l 1c89e <DOSBase>,d0
    e0da:	|  |  |  |  |  |  |   movea.l d0,a6
    e0dc:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e0e0:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e0e4:	|  |  |  |  |  |  |   jsr -312(a6)
    e0e8:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e0ec:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e0f2:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e0f6:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e0fc:	|  |  |  |  |  |  |   move.l 1c89e <DOSBase>,d0
    e102:	|  |  |  |  |  |  |   movea.l d0,a6
    e104:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e108:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e10c:	|  |  |  |  |  |  |   jsr -312(a6)
    e110:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e114:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e116:	|  |  |  +--|--|--|-- bra.w e208 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e11a:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    e120:	|  |  |  |  |  |      move.b 1c94c <encode1>,d0
    e126:	|  |  |  |  |  |      eori.b #1,d0
    e12a:	|  |  |  |  |  |      ext.w d0
    e12c:	|  |  |  |  |  |      movea.w d0,a0
    e12e:	|  |  |  |  |  |      move.l a0,36(sp)
    e132:	|  |  |  |  |  |      move.l 1c89e <DOSBase>,d0
    e138:	|  |  |  |  |  |      movea.l d0,a6
    e13a:	|  |  |  |  |  |      move.l 40(sp),d1
    e13e:	|  |  |  |  |  |      move.l 36(sp),d2
    e142:	|  |  |  |  |  |      jsr -312(a6)
    e146:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e14a:	|  |  |  |  |  |      movea.l 152(sp),a0
    e14e:	|  |  |  |  |  |      move.l 4(a0),d0
    e152:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e156:	|  |  |  |  |  |      move.l d0,-(sp)
    e158:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e15e:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e160:	|  |  |  +--|--|----- bra.w e208 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e164:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    e168:	|  |  |  |  |         pea 195ff <PutChar+0x197b>
    e16e:	|  |  |  |  |         jsr 171b0 <KPrintF>
    e174:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e176:	|  |  |  |  |         move.l 136(sp),28(sp)
    e17c:	|  |  |  |  |         move.l 1c89e <DOSBase>,d0
    e182:	|  |  |  |  |         movea.l d0,a6
    e184:	|  |  |  |  |         move.l 28(sp),d1
    e188:	|  |  |  |  |         jsr -36(a6)
    e18c:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e190:	|  |  |  |  |         clr.w d0
    e192:	+--|--|--|--|-------- bra.w e23a <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e196:	|  |  |  |  \-------> move.l 152(sp),d0
    e19a:	|  |  |  |            move.l d0,-(sp)
    e19c:	|  |  |  |            jsr 14d5e <getTextFromAnyVar>
    e1a2:	|  |  |  |            addq.l #4,sp
    e1a4:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e1a8:	|  |  |  |     /----- beq.s e21c <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e1aa:	|  |  |  |     |      movea.l 100(sp),a0
    e1ae:	|  |  |  |     |      move.b (a0),d0
    e1b0:	|  |  |  |     |      ext.w d0
    e1b2:	|  |  |  |     |      movea.w d0,a0
    e1b4:	|  |  |  |     |      move.l a0,12(sp)
    e1b8:	|  |  |  |     |      move.l 136(sp),96(sp)
    e1be:	|  |  |  |     |      move.l #104027,92(sp)
    e1c6:	|  |  |  |     |      moveq #99,d0
    e1c8:	|  |  |  |     |      not.b d0
    e1ca:	|  |  |  |     |      add.l sp,d0
    e1cc:	|  |  |  |     |      addi.l #-144,d0
    e1d2:	|  |  |  |     |      move.l d0,88(sp)
    e1d6:	|  |  |  |     |      move.l 1c89e <DOSBase>,d0
    e1dc:	|  |  |  |     |      movea.l d0,a6
    e1de:	|  |  |  |     |      move.l 96(sp),d1
    e1e2:	|  |  |  |     |      move.l 92(sp),d2
    e1e6:	|  |  |  |     |      move.l 88(sp),d3
    e1ea:	|  |  |  |     |      jsr -354(a6)
    e1ee:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e1f2:	|  |  |  |     |      move.l 100(sp),80(sp)
    e1f8:	|  |  |  |     |      move.l 1c896 <SysBase>,d0
    e1fe:	|  |  |  |     |      movea.l d0,a6
    e200:	|  |  |  |     |      movea.l 80(sp),a1
    e204:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e208:	|  |  |  \-----|----> movea.l 152(sp),a0
    e20c:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e212:	|  \--|--------|----> tst.l 152(sp)
    e216:	|     \--------|----- bne.w e03e <stackToFile+0x110>
    e21a:	|              |  /-- bra.s e21e <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e21c:	|              \--|-> nop
    }
    Close(fp);
    e21e:	|                 \-> move.l 136(sp),20(sp)
    e224:	|                     move.l 1c89e <DOSBase>,d0
    e22a:	|                     movea.l d0,a6
    e22c:	|                     move.l 20(sp),d1
    e230:	|                     jsr -36(a6)
    e234:	|                     move.l d0,16(sp)
    return TRUE;
    e238:	|                     moveq #1,d0
}
    e23a:	\-------------------> movem.l (sp)+,d2-d3/a6
    e23e:	                      lea 144(sp),sp
    e242:	                      rts

0000e244 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e244:	       lea -20(sp),sp
    e248:	       move.l a6,-(sp)
    e24a:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e24c:	       move.l 32(sp),-(sp)
    e250:	       jsr 13c74 <strlen>
    e256:	       addq.l #4,sp
    e258:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e25c:	       move.l 36(sp),-(sp)
    e260:	       move.l 24(sp),-(sp)
    e264:	       jsr 8d0 <put2bytes>
    e26a:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e26c:	       clr.l 24(sp)
    e270:	   /-- bra.s e2c6 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e272:	/--|-> move.l 36(sp),16(sp)
    e278:	|  |   move.l 24(sp),d0
    e27c:	|  |   movea.l 32(sp),a0
    e280:	|  |   adda.l d0,a0
    e282:	|  |   move.b (a0),d1
    e284:	|  |   move.b 1c94c <encode1>,d0
    e28a:	|  |   eor.b d1,d0
    e28c:	|  |   ext.w d0
    e28e:	|  |   movea.w d0,a0
    e290:	|  |   move.l a0,12(sp)
    e294:	|  |   move.l 1c89e <DOSBase>,d0
    e29a:	|  |   movea.l d0,a6
    e29c:	|  |   move.l 16(sp),d1
    e2a0:	|  |   move.l 12(sp),d2
    e2a4:	|  |   jsr -312(a6)
    e2a8:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e2ac:	|  |   move.b 1c94c <encode1>,d0
    e2b2:	|  |   move.b d0,d1
    e2b4:	|  |   move.b 1c94d <encode2>,d0
    e2ba:	|  |   add.b d1,d0
    e2bc:	|  |   move.b d0,1c94c <encode1>
	for (a = 0; a < len; a ++) {
    e2c2:	|  |   addq.l #1,24(sp)
    e2c6:	|  \-> move.l 24(sp),d0
    e2ca:	|      cmp.l 20(sp),d0
    e2ce:	\----- blt.s e272 <writeStringEncoded+0x2e>
	}
}
    e2d0:	       nop
    e2d2:	       nop
    e2d4:	       move.l (sp)+,d2
    e2d6:	       movea.l (sp)+,a6
    e2d8:	       lea 20(sp),sp
    e2dc:	       rts

0000e2de <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e2de:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e2e0:	                   tst.l 8(sp)
    e2e4:	               /-- bne.s e2ea <failSecurityCheck+0xc>
    e2e6:	               |   moveq #1,d0
    e2e8:	/--------------|-- bra.s e368 <failSecurityCheck+0x8a>

	int a = 0;
    e2ea:	|              \-> clr.l (sp)

	while (fn[a]) {
    e2ec:	|     /----------- bra.s e35a <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e2ee:	|  /--|----------> move.l (sp),d0
    e2f0:	|  |  |            movea.l 8(sp),a0
    e2f4:	|  |  |            adda.l d0,a0
    e2f6:	|  |  |            move.b (a0),d0
    e2f8:	|  |  |            ext.w d0
    e2fa:	|  |  |            movea.w d0,a0
    e2fc:	|  |  |            moveq #124,d0
    e2fe:	|  |  |            cmp.l a0,d0
    e300:	|  |  |     /----- beq.s e342 <failSecurityCheck+0x64>
    e302:	|  |  |     |      moveq #124,d1
    e304:	|  |  |     |      cmp.l a0,d1
    e306:	|  |  |  /--|----- blt.s e358 <failSecurityCheck+0x7a>
    e308:	|  |  |  |  |      moveq #92,d0
    e30a:	|  |  |  |  |      cmp.l a0,d0
    e30c:	|  |  |  |  +----- beq.s e342 <failSecurityCheck+0x64>
    e30e:	|  |  |  |  |      moveq #92,d1
    e310:	|  |  |  |  |      cmp.l a0,d1
    e312:	|  |  |  +--|----- blt.s e358 <failSecurityCheck+0x7a>
    e314:	|  |  |  |  |      moveq #60,d0
    e316:	|  |  |  |  |      cmp.l a0,d0
    e318:	|  |  |  |  |  /-- blt.s e338 <failSecurityCheck+0x5a>
    e31a:	|  |  |  |  |  |   moveq #34,d1
    e31c:	|  |  |  |  |  |   cmp.l a0,d1
    e31e:	|  |  |  +--|--|-- bgt.s e358 <failSecurityCheck+0x7a>
    e320:	|  |  |  |  |  |   moveq #-34,d1
    e322:	|  |  |  |  |  |   add.l a0,d1
    e324:	|  |  |  |  |  |   move.l #83894529,d0
    e32a:	|  |  |  |  |  |   lsr.l d1,d0
    e32c:	|  |  |  |  |  |   moveq #1,d1
    e32e:	|  |  |  |  |  |   and.l d1,d0
    e330:	|  |  |  |  |  |   sne d0
    e332:	|  |  |  |  |  |   neg.b d0
    e334:	|  |  |  |  +--|-- bne.s e342 <failSecurityCheck+0x64>
    e336:	|  |  |  +--|--|-- bra.s e358 <failSecurityCheck+0x7a>
    e338:	|  |  |  |  |  \-> lea -62(a0),a0
    e33c:	|  |  |  |  |      moveq #1,d0
    e33e:	|  |  |  |  |      cmp.l a0,d0
    e340:	|  |  |  +--|----- bcs.s e358 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e342:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e346:	|  |  |  |         pea 1965f <PutChar+0x19db>
    e34c:	|  |  |  |         jsr 171b0 <KPrintF>
    e352:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e354:	|  |  |  |         moveq #1,d0
    e356:	+--|--|--|-------- bra.s e368 <failSecurityCheck+0x8a>
		}
		a++;
    e358:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e35a:	|  |  \----------> move.l (sp),d0
    e35c:	|  |               movea.l 8(sp),a0
    e360:	|  |               adda.l d0,a0
    e362:	|  |               move.b (a0),d0
    e364:	|  \-------------- bne.s e2ee <failSecurityCheck+0x10>
	}
	return FALSE;
    e366:	|                  clr.w d0
}
    e368:	\----------------> addq.l #4,sp
    e36a:	                   rts

0000e36c <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e36c:	             lea -24(sp),sp
    e370:	             move.l a6,-(sp)
    e372:	             move.l 40(sp),d0
    e376:	             move.w d0,d0
    e378:	             move.w d0,6(sp)
	int fileNum = -1;
    e37c:	             moveq #-1,d0
    e37e:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e382:	             jsr 62ae <killSpeechTimers>

	switch (numParams) {
    e388:	             moveq #2,d0
    e38a:	             cmp.l 32(sp),d0
    e38e:	      /----- beq.s e3d2 <sayCore+0x66>
    e390:	      |      moveq #3,d0
    e392:	      |      cmp.l 32(sp),d0
    e396:	/-----|----- bne.w e4b4 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e39a:	|     |      movea.l 36(sp),a0
    e39e:	|     |      move.l 24(a0),d0
    e3a2:	|     |      move.l d0,-(sp)
    e3a4:	|     |      pea 5 <_start+0x5>
    e3a8:	|     |      lea 20(sp),a0
    e3ac:	|     |      move.l a0,-(sp)
    e3ae:	|     |      jsr 14788 <getValueType>
    e3b4:	|     |      lea 12(sp),sp
    e3b8:	|     |      tst.w d0
    e3ba:	|     |  /-- bne.s e3c2 <sayCore+0x56>
    e3bc:	|     |  |   moveq #1,d0
    e3be:	|  /--|--|-- bra.w e4c4 <sayCore+0x158>
			trimStack (&fun -> stack);
    e3c2:	|  |  |  \-> moveq #24,d0
    e3c4:	|  |  |      add.l 36(sp),d0
    e3c8:	|  |  |      move.l d0,-(sp)
    e3ca:	|  |  |      jsr 1510c <trimStack>
    e3d0:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e3d2:	|  |  \----> movea.l 36(sp),a0
    e3d6:	|  |         move.l 24(a0),d0
    e3da:	|  |         move.l d0,-(sp)
    e3dc:	|  |         jsr 14d5e <getTextFromAnyVar>
    e3e2:	|  |         addq.l #4,sp
    e3e4:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e3e8:	|  |     /-- bne.s e3f0 <sayCore+0x84>
    e3ea:	|  |     |   moveq #1,d0
    e3ec:	|  +-----|-- bra.w e4c4 <sayCore+0x158>
			trimStack (&fun -> stack);
    e3f0:	|  |     \-> moveq #24,d0
    e3f2:	|  |         add.l 36(sp),d0
    e3f6:	|  |         move.l d0,-(sp)
    e3f8:	|  |         jsr 1510c <trimStack>
    e3fe:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e400:	|  |         movea.l 36(sp),a0
    e404:	|  |         move.l 24(a0),d0
    e408:	|  |         move.l d0,-(sp)
    e40a:	|  |         pea 7 <_start+0x7>
    e40e:	|  |         lea 16(sp),a0
    e412:	|  |         move.l a0,-(sp)
    e414:	|  |         jsr 14788 <getValueType>
    e41a:	|  |         lea 12(sp),sp
    e41e:	|  |         tst.w d0
    e420:	|  |     /-- bne.s e428 <sayCore+0xbc>
    e422:	|  |     |   moveq #1,d0
    e424:	|  +-----|-- bra.w e4c4 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e428:	|  |     \-> movea.l 36(sp),a0
    e42c:	|  |         move.l 24(a0),d0
    e430:	|  |         move.l d0,-(sp)
    e432:	|  |         pea 7 <_start+0x7>
    e436:	|  |         lea 16(sp),a0
    e43a:	|  |         move.l a0,-(sp)
    e43c:	|  |         jsr 14788 <getValueType>
    e442:	|  |         lea 12(sp),sp
    e446:	|  |         tst.w d0
    e448:	|  |     /-- bne.s e44e <sayCore+0xe2>
    e44a:	|  |     |   moveq #1,d0
    e44c:	|  +-----|-- bra.s e4c4 <sayCore+0x158>
			trimStack (&fun -> stack);
    e44e:	|  |     \-> moveq #24,d0
    e450:	|  |         add.l 36(sp),d0
    e454:	|  |         move.l d0,-(sp)
    e456:	|  |         jsr 1510c <trimStack>
    e45c:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e45e:	|  |         movea.w 6(sp),a0
    e462:	|  |         move.l 12(sp),d1
    e466:	|  |         move.l 8(sp),d0
    e46a:	|  |         move.l a0,-(sp)
    e46c:	|  |         move.l d1,-(sp)
    e46e:	|  |         move.l d0,-(sp)
    e470:	|  |         move.l 36(sp),-(sp)
    e474:	|  |         jsr 8268 <wrapSpeech>
    e47a:	|  |         lea 16(sp),sp
    e47e:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e482:	|  |         movea.l 36(sp),a0
    e486:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e48c:	|  |         movea.l 36(sp),a0
    e490:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e496:	|  |         move.l 24(sp),16(sp)
    e49c:	|  |         move.l 1c896 <SysBase>,d0
    e4a2:	|  |         movea.l d0,a6
    e4a4:	|  |         movea.l 16(sp),a1
    e4a8:	|  |         jsr -690(a6)
			newText = NULL;
    e4ac:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e4b0:	|  |         moveq #0,d0
    e4b2:	|  +-------- bra.s e4c4 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e4b4:	\--|-------> pea 196e5 <PutChar+0x1a61>
    e4ba:	   |         jsr 171b0 <KPrintF>
    e4c0:	   |         addq.l #4,sp
	return BR_ERROR;
    e4c2:	   |         moveq #1,d0
}
    e4c4:	   \-------> movea.l (sp)+,a6
    e4c6:	             lea 24(sp),sp
    e4ca:	             rts

0000e4cc <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e4cc:	pea 1 <_start+0x1>
    e4d0:	move.l 12(sp),-(sp)
    e4d4:	move.l 12(sp),-(sp)
    e4d8:	jsr e36c <sayCore>
    e4de:	lea 12(sp),sp
}
    e4e2:	rts

0000e4e4 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e4e4:	clr.l -(sp)
    e4e6:	move.l 12(sp),-(sp)
    e4ea:	move.l 12(sp),-(sp)
    e4ee:	jsr e36c <sayCore>
    e4f4:	lea 12(sp),sp
}
    e4f8:	rts

0000e4fa <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e4fa:	jsr 15154 <freeze>
	freezeSubs (); 
    e500:	jsr 589e <freezeSubs>
	fun -> freezerLevel = 0;
    e506:	movea.l 8(sp),a0
    e50a:	clr.b 56(a0)
	return BR_CONTINUE;
    e50e:	moveq #2,d0
}
    e510:	rts

0000e512 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e512:	jsr 1532c <unfreeze>
	unfreezeSubs (); 
    e518:	jsr 6cf0 <unfreezeSubs>
	return BR_CONTINUE;
    e51e:	moveq #2,d0
}
    e520:	rts

0000e522 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    e522:	nop
    e524:	rts

0000e526 <builtIn_setCursor>:

builtIn(setCursor)
{
    e526:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e528:	movea.l 12(sp),a0
    e52c:	move.l 24(a0),d0
    e530:	move.l d0,-(sp)
    e532:	jsr 14c60 <getAnimationFromVar>
    e538:	addq.l #4,sp
    e53a:	move.l d0,(sp)
	pickAnimCursor (aa);
    e53c:	move.l (sp),-(sp)
    e53e:	jsr d6c <pickAnimCursor>
    e544:	addq.l #4,sp
	trimStack (&fun -> stack);
    e546:	moveq #24,d0
    e548:	add.l 12(sp),d0
    e54c:	move.l d0,-(sp)
    e54e:	jsr 1510c <trimStack>
    e554:	addq.l #4,sp
	return BR_CONTINUE;
    e556:	moveq #2,d0
}
    e558:	addq.l #4,sp
    e55a:	rts

0000e55c <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e55c:	move.l 1c852 <input+0xa>,d1
    e562:	move.l 1c950 <cameraX>,d0
    e568:	add.l d0,d1
    e56a:	moveq #28,d0
    e56c:	add.l 8(sp),d0
    e570:	move.l d1,-(sp)
    e572:	pea 1 <_start+0x1>
    e576:	move.l d0,-(sp)
    e578:	jsr 1507a <setVariable>
    e57e:	lea 12(sp),sp
	return BR_CONTINUE;
    e582:	moveq #2,d0
}
    e584:	rts

0000e586 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e586:	move.l 1c856 <input+0xe>,d1
    e58c:	move.l 1c954 <cameraY>,d0
    e592:	add.l d0,d1
    e594:	moveq #28,d0
    e596:	add.l 8(sp),d0
    e59a:	move.l d1,-(sp)
    e59c:	pea 1 <_start+0x1>
    e5a0:	move.l d0,-(sp)
    e5a2:	jsr 1507a <setVariable>
    e5a8:	lea 12(sp),sp
	return BR_CONTINUE;
    e5ac:	moveq #2,d0
}
    e5ae:	rts

0000e5b0 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e5b0:	move.l 1c852 <input+0xa>,d0
    e5b6:	move.l d0,-(sp)
    e5b8:	jsr 175ec <__floatsisf>
    e5be:	addq.l #4,sp
    e5c0:	move.l d0,d1
    e5c2:	move.l 1c234 <cameraZoom>,d0
    e5c8:	move.l d0,-(sp)
    e5ca:	move.l d1,-(sp)
    e5cc:	jsr 1769e <__mulsf3>
    e5d2:	addq.l #8,sp
    e5d4:	move.l d0,-(sp)
    e5d6:	jsr 17584 <__fixsfsi>
    e5dc:	addq.l #4,sp
    e5de:	move.l d0,d1
    e5e0:	moveq #28,d0
    e5e2:	add.l 8(sp),d0
    e5e6:	move.l d1,-(sp)
    e5e8:	pea 1 <_start+0x1>
    e5ec:	move.l d0,-(sp)
    e5ee:	jsr 1507a <setVariable>
    e5f4:	lea 12(sp),sp
	return BR_CONTINUE;
    e5f8:	moveq #2,d0
}
    e5fa:	rts

0000e5fc <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e5fc:	move.l 1c856 <input+0xe>,d0
    e602:	move.l d0,-(sp)
    e604:	jsr 175ec <__floatsisf>
    e60a:	addq.l #4,sp
    e60c:	move.l d0,d1
    e60e:	move.l 1c234 <cameraZoom>,d0
    e614:	move.l d0,-(sp)
    e616:	move.l d1,-(sp)
    e618:	jsr 1769e <__mulsf3>
    e61e:	addq.l #8,sp
    e620:	move.l d0,-(sp)
    e622:	jsr 17584 <__fixsfsi>
    e628:	addq.l #4,sp
    e62a:	move.l d0,d1
    e62c:	moveq #28,d0
    e62e:	add.l 8(sp),d0
    e632:	move.l d1,-(sp)
    e634:	pea 1 <_start+0x1>
    e638:	move.l d0,-(sp)
    e63a:	jsr 1507a <setVariable>
    e640:	lea 12(sp),sp
	return BR_CONTINUE;
    e644:	moveq #2,d0
}
    e646:	rts

0000e648 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e648:	jsr 7d1c <statusBarText>
    e64e:	move.l d0,d1
    e650:	moveq #28,d0
    e652:	add.l 8(sp),d0
    e656:	move.l d1,-(sp)
    e658:	move.l d0,-(sp)
    e65a:	jsr 149aa <makeTextVar>
    e660:	addq.l #8,sp
	return BR_CONTINUE;
    e662:	moveq #2,d0
}
    e664:	rts

0000e666 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e666:	       lea -20(sp),sp
    e66a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e66c:	       movea.l 32(sp),a0
    e670:	       move.l 24(a0),d0
    e674:	       move.l d0,-(sp)
    e676:	       jsr 14d5e <getTextFromAnyVar>
    e67c:	       addq.l #4,sp
    e67e:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e682:	   /-- bne.s e68a <builtIn_getMatchingFiles+0x24>
    e684:	   |   moveq #1,d0
    e686:	/--|-- bra.w e74c <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e68a:	|  \-> moveq #24,d0
    e68c:	|      add.l 32(sp),d0
    e690:	|      move.l d0,-(sp)
    e692:	|      jsr 1510c <trimStack>
    e698:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e69a:	|      moveq #28,d0
    e69c:	|      add.l 32(sp),d0
    e6a0:	|      move.l d0,-(sp)
    e6a2:	|      jsr 149d6 <unlinkVar>
    e6a8:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e6aa:	|      movea.l 32(sp),a0
    e6ae:	|      moveq #6,d0
    e6b0:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e6b4:	|      moveq #12,d0
    e6b6:	|      move.l d0,16(sp)
    e6ba:	|      clr.l 12(sp)
    e6be:	|      move.l 1c896 <SysBase>,d0
    e6c4:	|      movea.l d0,a6
    e6c6:	|      move.l 16(sp),d0
    e6ca:	|      move.l 12(sp),d1
    e6ce:	|      jsr -684(a6)
    e6d2:	|      move.l d0,8(sp)
    e6d6:	|      move.l 8(sp),d0
    e6da:	|      movea.l 32(sp),a0
    e6de:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e6e2:	|      moveq #32,d0
    e6e4:	|      add.l 32(sp),d0
    e6e8:	|  /-- bne.s e6ee <builtIn_getMatchingFiles+0x88>
    e6ea:	|  |   moveq #1,d0
    e6ec:	+--|-- bra.s e74c <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e6ee:	|  \-> movea.l 32(sp),a0
    e6f2:	|      movea.l 32(a0),a0
    e6f6:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e6f8:	|      movea.l 32(sp),a0
    e6fc:	|      movea.l 32(a0),a0
    e700:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e704:	|      movea.l 32(sp),a0
    e708:	|      movea.l 32(a0),a0
    e70c:	|      moveq #1,d0
    e70e:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e712:	|      movea.l 32(sp),a0
    e716:	|      move.l 32(a0),d0
    e71a:	|      move.l 20(sp),-(sp)
    e71e:	|      move.l d0,-(sp)
    e720:	|      jsr 14544 <getSavedGamesStack>
    e726:	|      addq.l #8,sp
    e728:	|      tst.w d0
    e72a:	|  /-- bne.s e730 <builtIn_getMatchingFiles+0xca>
    e72c:	|  |   moveq #1,d0
    e72e:	+--|-- bra.s e74c <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e730:	|  \-> move.l 20(sp),4(sp)
    e736:	|      move.l 1c896 <SysBase>,d0
    e73c:	|      movea.l d0,a6
    e73e:	|      movea.l 4(sp),a1
    e742:	|      jsr -690(a6)
	newText = NULL;
    e746:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e74a:	|      moveq #2,d0
}
    e74c:	\----> movea.l (sp)+,a6
    e74e:	       lea 20(sp),sp
    e752:	       rts

0000e754 <builtIn_saveGame>:

builtIn(saveGame)
{
    e754:	       lea -12(sp),sp
    e758:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e75a:	       movea.l 24(sp),a0
    e75e:	       move.l 24(a0),d0
    e762:	       move.l d0,-(sp)
    e764:	       jsr 14d5e <getTextFromAnyVar>
    e76a:	       addq.l #4,sp
    e76c:	       move.l d0,1c862 <loadNow>
    trimStack(&fun->stack);
    e772:	       moveq #24,d0
    e774:	       add.l 24(sp),d0
    e778:	       move.l d0,-(sp)
    e77a:	       jsr 1510c <trimStack>
    e780:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e782:	       move.l 1c862 <loadNow>,d0
    e788:	       move.l d0,-(sp)
    e78a:	       jsr 2fe <encodeFilename>
    e790:	       addq.l #4,sp
    e792:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e796:	       move.l 1c862 <loadNow>,8(sp)
    e79e:	       move.l 1c896 <SysBase>,d0
    e7a4:	       movea.l d0,a6
    e7a6:	       movea.l 8(sp),a1
    e7aa:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e7ae:	       move.l 12(sp),-(sp)
    e7b2:	       jsr e2de <failSecurityCheck>
    e7b8:	       addq.l #4,sp
    e7ba:	       tst.w d0
    e7bc:	   /-- beq.s e7c2 <builtIn_saveGame+0x6e>
    e7be:	   |   moveq #1,d0
    e7c0:	/--|-- bra.s e812 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e7c2:	|  \-> move.l 12(sp),-(sp)
    e7c6:	|      pea 19713 <PutChar+0x1a8f>
    e7cc:	|      jsr 13cb4 <joinStrings>
    e7d2:	|      addq.l #8,sp
    e7d4:	|      move.l d0,1c862 <loadNow>
    FreeVec(aaaaa);
    e7da:	|      move.l 12(sp),4(sp)
    e7e0:	|      move.l 1c896 <SysBase>,d0
    e7e6:	|      movea.l d0,a6
    e7e8:	|      movea.l 4(sp),a1
    e7ec:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e7f0:	|      moveq #28,d0
    e7f2:	|      add.l 24(sp),d0
    e7f6:	|      clr.l -(sp)
    e7f8:	|      pea 1 <_start+0x1>
    e7fc:	|      move.l d0,-(sp)
    e7fe:	|      jsr 1507a <setVariable>
    e804:	|      lea 12(sp),sp
    saverFunc = fun;
    e808:	|      move.l 24(sp),1c960 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e810:	|      moveq #0,d0
}
    e812:	\----> movea.l (sp)+,a6
    e814:	       lea 12(sp),sp
    e818:	       rts

0000e81a <builtIn_fileExists>:

builtIn(fileExists)
{
    e81a:	       lea -36(sp),sp
    e81e:	       move.l a6,-(sp)
    e820:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e822:	       movea.l 52(sp),a0
    e826:	       move.l 24(a0),d0
    e82a:	       move.l d0,-(sp)
    e82c:	       jsr 14d5e <getTextFromAnyVar>
    e832:	       addq.l #4,sp
    e834:	       move.l d0,1c862 <loadNow>
    trimStack(&fun->stack);
    e83a:	       moveq #24,d0
    e83c:	       add.l 52(sp),d0
    e840:	       move.l d0,-(sp)
    e842:	       jsr 1510c <trimStack>
    e848:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e84a:	       move.l 1c862 <loadNow>,d0
    e850:	       move.l d0,-(sp)
    e852:	       jsr 2fe <encodeFilename>
    e858:	       addq.l #4,sp
    e85a:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e85e:	       move.l 1c862 <loadNow>,36(sp)
    e866:	       move.l 1c896 <SysBase>,d0
    e86c:	       movea.l d0,a6
    e86e:	       movea.l 36(sp),a1
    e872:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e876:	       move.l 40(sp),-(sp)
    e87a:	       jsr e2de <failSecurityCheck>
    e880:	       addq.l #4,sp
    e882:	       tst.w d0
    e884:	   /-- beq.s e88c <builtIn_fileExists+0x72>
    e886:	   |   moveq #1,d0
    e888:	/--|-- bra.w e92c <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e88c:	|  \-> move.l 40(sp),32(sp)
    e892:	|      move.l #1005,28(sp)
    e89a:	|      move.l 1c89e <DOSBase>,d0
    e8a0:	|      movea.l d0,a6
    e8a2:	|      move.l 32(sp),d1
    e8a6:	|      move.l 28(sp),d2
    e8aa:	|      jsr -30(a6)
    e8ae:	|      move.l d0,24(sp)
    e8b2:	|      move.l 24(sp),d0
    e8b6:	|      move.l d0,20(sp)
    if (!fp) {        
    e8ba:	|  /-- bne.s e8ca <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e8bc:	|  |   pea 19715 <PutChar+0x1a91>
    e8c2:	|  |   jsr 171b0 <KPrintF>
    e8c8:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e8ca:	|  \-> tst.l 20(sp)
    e8ce:	|      sne d0
    e8d0:	|      neg.b d0
    e8d2:	|      moveq #0,d1
    e8d4:	|      move.b d0,d1
    e8d6:	|      moveq #28,d0
    e8d8:	|      add.l 52(sp),d0
    e8dc:	|      move.l d1,-(sp)
    e8de:	|      pea 1 <_start+0x1>
    e8e2:	|      move.l d0,-(sp)
    e8e4:	|      jsr 1507a <setVariable>
    e8ea:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e8ee:	|      tst.l 20(sp)
    e8f2:	|  /-- beq.s e90e <builtIn_fileExists+0xf4>
    e8f4:	|  |   move.l 20(sp),16(sp)
    e8fa:	|  |   move.l 1c89e <DOSBase>,d0
    e900:	|  |   movea.l d0,a6
    e902:	|  |   move.l 16(sp),d1
    e906:	|  |   jsr -36(a6)
    e90a:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e90e:	|  \-> move.l 40(sp),8(sp)
    e914:	|      move.l 1c896 <SysBase>,d0
    e91a:	|      movea.l d0,a6
    e91c:	|      movea.l 8(sp),a1
    e920:	|      jsr -690(a6)
    loadNow = NULL;
    e924:	|      clr.l 1c862 <loadNow>
    return BR_CONTINUE;
    e92a:	|      moveq #2,d0
}
    e92c:	\----> move.l (sp)+,d2
    e92e:	       movea.l (sp)+,a6
    e930:	       lea 36(sp),sp
    e934:	       rts

0000e936 <builtIn_loadGame>:

builtIn(loadGame)
{
    e936:	       lea -36(sp),sp
    e93a:	       move.l a6,-(sp)
    e93c:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e93e:	       movea.l 52(sp),a0
    e942:	       move.l 24(a0),d0
    e946:	       move.l d0,-(sp)
    e948:	       jsr 14d5e <getTextFromAnyVar>
    e94e:	       addq.l #4,sp
    e950:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e954:	       moveq #24,d0
    e956:	       add.l 52(sp),d0
    e95a:	       move.l d0,-(sp)
    e95c:	       jsr 1510c <trimStack>
    e962:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e964:	       move.l 40(sp),-(sp)
    e968:	       jsr 2fe <encodeFilename>
    e96e:	       addq.l #4,sp
    e970:	       move.l d0,1c862 <loadNow>
    FreeVec(aaaaa);
    e976:	       move.l 40(sp),36(sp)
    e97c:	       move.l 1c896 <SysBase>,d0
    e982:	       movea.l d0,a6
    e984:	       movea.l 36(sp),a1
    e988:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e98c:	       move.l 1c862 <loadNow>,d0
    e992:	       move.l d0,-(sp)
    e994:	       jsr e2de <failSecurityCheck>
    e99a:	       addq.l #4,sp
    e99c:	       tst.w d0
    e99e:	   /-- beq.s e9a4 <builtIn_loadGame+0x6e>
    e9a0:	   |   moveq #1,d0
    e9a2:	/--|-- bra.s ea14 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e9a4:	|  \-> move.l 1c862 <loadNow>,32(sp)
    e9ac:	|      move.l #1005,28(sp)
    e9b4:	|      move.l 1c89e <DOSBase>,d0
    e9ba:	|      movea.l d0,a6
    e9bc:	|      move.l 32(sp),d1
    e9c0:	|      move.l 28(sp),d2
    e9c4:	|      jsr -30(a6)
    e9c8:	|      move.l d0,24(sp)
    e9cc:	|      move.l 24(sp),d0
    e9d0:	|      move.l d0,20(sp)
    if (fp) {
    e9d4:	|  /-- beq.s e9f4 <builtIn_loadGame+0xbe>
        Close(fp);
    e9d6:	|  |   move.l 20(sp),12(sp)
    e9dc:	|  |   move.l 1c89e <DOSBase>,d0
    e9e2:	|  |   movea.l d0,a6
    e9e4:	|  |   move.l 12(sp),d1
    e9e8:	|  |   jsr -36(a6)
    e9ec:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e9f0:	|  |   moveq #0,d0
    e9f2:	+--|-- bra.s ea14 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e9f4:	|  \-> move.l 1c862 <loadNow>,16(sp)
    e9fc:	|      move.l 1c896 <SysBase>,d0
    ea02:	|      movea.l d0,a6
    ea04:	|      movea.l 16(sp),a1
    ea08:	|      jsr -690(a6)
    loadNow = NULL;
    ea0c:	|      clr.l 1c862 <loadNow>
    return BR_CONTINUE;
    ea12:	|      moveq #2,d0
}
    ea14:	\----> move.l (sp)+,d2
    ea16:	       movea.l (sp)+,a6
    ea18:	       lea 36(sp),sp
    ea1c:	       rts

0000ea1e <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ea1e:	move.l 1c936 <sceneHeight>,d0
    ea24:	move.l d0,d1
    ea26:	move.l 1c932 <sceneWidth>,d0
    ea2c:	move.l d1,-(sp)
    ea2e:	move.l d0,-(sp)
    ea30:	clr.l -(sp)
    ea32:	clr.l -(sp)
    ea34:	jsr d1d2 <blankScreen>
    ea3a:	lea 16(sp),sp
	return BR_CONTINUE;
    ea3e:	moveq #2,d0
}
    ea40:	rts

0000ea42 <builtIn_blankArea>:

builtIn(blankArea)
{
    ea42:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea46:	       movea.l 24(sp),a0
    ea4a:	       move.l 24(a0),d0
    ea4e:	       move.l d0,-(sp)
    ea50:	       pea 1 <_start+0x1>
    ea54:	       lea 8(sp),a0
    ea58:	       move.l a0,-(sp)
    ea5a:	       jsr 14788 <getValueType>
    ea60:	       lea 12(sp),sp
    ea64:	       tst.w d0
    ea66:	   /-- bne.s ea6e <builtIn_blankArea+0x2c>
    ea68:	   |   moveq #1,d0
    ea6a:	/--|-- bra.w eb44 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ea6e:	|  \-> moveq #24,d0
    ea70:	|      add.l 24(sp),d0
    ea74:	|      move.l d0,-(sp)
    ea76:	|      jsr 1510c <trimStack>
    ea7c:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ea7e:	|      movea.l 24(sp),a0
    ea82:	|      move.l 24(a0),d0
    ea86:	|      move.l d0,-(sp)
    ea88:	|      pea 1 <_start+0x1>
    ea8c:	|      lea 12(sp),a0
    ea90:	|      move.l a0,-(sp)
    ea92:	|      jsr 14788 <getValueType>
    ea98:	|      lea 12(sp),sp
    ea9c:	|      tst.w d0
    ea9e:	|  /-- bne.s eaa6 <builtIn_blankArea+0x64>
    eaa0:	|  |   moveq #1,d0
    eaa2:	+--|-- bra.w eb44 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eaa6:	|  \-> moveq #24,d0
    eaa8:	|      add.l 24(sp),d0
    eaac:	|      move.l d0,-(sp)
    eaae:	|      jsr 1510c <trimStack>
    eab4:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eab6:	|      movea.l 24(sp),a0
    eaba:	|      move.l 24(a0),d0
    eabe:	|      move.l d0,-(sp)
    eac0:	|      pea 1 <_start+0x1>
    eac4:	|      moveq #16,d0
    eac6:	|      add.l sp,d0
    eac8:	|      move.l d0,-(sp)
    eaca:	|      jsr 14788 <getValueType>
    ead0:	|      lea 12(sp),sp
    ead4:	|      tst.w d0
    ead6:	|  /-- bne.s eadc <builtIn_blankArea+0x9a>
    ead8:	|  |   moveq #1,d0
    eada:	+--|-- bra.s eb44 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eadc:	|  \-> moveq #24,d0
    eade:	|      add.l 24(sp),d0
    eae2:	|      move.l d0,-(sp)
    eae4:	|      jsr 1510c <trimStack>
    eaea:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eaec:	|      movea.l 24(sp),a0
    eaf0:	|      move.l 24(a0),d0
    eaf4:	|      move.l d0,-(sp)
    eaf6:	|      pea 1 <_start+0x1>
    eafa:	|      moveq #20,d0
    eafc:	|      add.l sp,d0
    eafe:	|      move.l d0,-(sp)
    eb00:	|      jsr 14788 <getValueType>
    eb06:	|      lea 12(sp),sp
    eb0a:	|      tst.w d0
    eb0c:	|  /-- bne.s eb12 <builtIn_blankArea+0xd0>
    eb0e:	|  |   moveq #1,d0
    eb10:	+--|-- bra.s eb44 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eb12:	|  \-> moveq #24,d0
    eb14:	|      add.l 24(sp),d0
    eb18:	|      move.l d0,-(sp)
    eb1a:	|      jsr 1510c <trimStack>
    eb20:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    eb22:	|      movea.l (sp),a1
    eb24:	|      movea.l 4(sp),a0
    eb28:	|      move.l 8(sp),d1
    eb2c:	|      move.l 12(sp),d0
    eb30:	|      move.l a1,-(sp)
    eb32:	|      move.l a0,-(sp)
    eb34:	|      move.l d1,-(sp)
    eb36:	|      move.l d0,-(sp)
    eb38:	|      jsr d1d2 <blankScreen>
    eb3e:	|      lea 16(sp),sp
	return BR_CONTINUE;
    eb42:	|      moveq #2,d0
}
    eb44:	\----> lea 16(sp),sp
    eb48:	       rts

0000eb4a <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    eb4a:	jsr d1e6 <darkScreen>
	return BR_CONTINUE;
    eb50:	moveq #2,d0
}
    eb52:	rts

0000eb54 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    eb54:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb58:	       movea.l 20(sp),a0
    eb5c:	       move.l 24(a0),d0
    eb60:	       move.l d0,-(sp)
    eb62:	       pea 1 <_start+0x1>
    eb66:	       lea 8(sp),a0
    eb6a:	       move.l a0,-(sp)
    eb6c:	       jsr 14788 <getValueType>
    eb72:	       lea 12(sp),sp
    eb76:	       tst.w d0
    eb78:	   /-- bne.s eb80 <builtIn_addOverlay+0x2c>
    eb7a:	   |   moveq #1,d0
    eb7c:	/--|-- bra.w ec18 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    eb80:	|  \-> moveq #24,d0
    eb82:	|      add.l 20(sp),d0
    eb86:	|      move.l d0,-(sp)
    eb88:	|      jsr 1510c <trimStack>
    eb8e:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb90:	|      movea.l 20(sp),a0
    eb94:	|      move.l 24(a0),d0
    eb98:	|      move.l d0,-(sp)
    eb9a:	|      pea 1 <_start+0x1>
    eb9e:	|      moveq #12,d0
    eba0:	|      add.l sp,d0
    eba2:	|      move.l d0,-(sp)
    eba4:	|      jsr 14788 <getValueType>
    ebaa:	|      lea 12(sp),sp
    ebae:	|      tst.w d0
    ebb0:	|  /-- bne.s ebb6 <builtIn_addOverlay+0x62>
    ebb2:	|  |   moveq #1,d0
    ebb4:	+--|-- bra.s ec18 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ebb6:	|  \-> moveq #24,d0
    ebb8:	|      add.l 20(sp),d0
    ebbc:	|      move.l d0,-(sp)
    ebbe:	|      jsr 1510c <trimStack>
    ebc4:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ebc6:	|      movea.l 20(sp),a0
    ebca:	|      move.l 24(a0),d0
    ebce:	|      move.l d0,-(sp)
    ebd0:	|      pea 5 <_start+0x5>
    ebd4:	|      moveq #16,d0
    ebd6:	|      add.l sp,d0
    ebd8:	|      move.l d0,-(sp)
    ebda:	|      jsr 14788 <getValueType>
    ebe0:	|      lea 12(sp),sp
    ebe4:	|      tst.w d0
    ebe6:	|  /-- bne.s ebec <builtIn_addOverlay+0x98>
    ebe8:	|  |   moveq #1,d0
    ebea:	+--|-- bra.s ec18 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ebec:	|  \-> moveq #24,d0
    ebee:	|      add.l 20(sp),d0
    ebf2:	|      move.l d0,-(sp)
    ebf4:	|      jsr 1510c <trimStack>
    ebfa:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ebfc:	|      movea.l (sp),a0
    ebfe:	|      move.l 4(sp),d1
    ec02:	|      move.l 8(sp),d0
    ec06:	|      move.l a0,-(sp)
    ec08:	|      move.l d1,-(sp)
    ec0a:	|      move.l d0,-(sp)
    ec0c:	|      jsr d304 <loadBackDrop>
    ec12:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ec16:	|      moveq #2,d0
}
    ec18:	\----> lea 12(sp),sp
    ec1c:	       rts

0000ec1e <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ec1e:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec22:	       movea.l 20(sp),a0
    ec26:	       move.l 24(a0),d0
    ec2a:	       move.l d0,-(sp)
    ec2c:	       pea 1 <_start+0x1>
    ec30:	       lea 8(sp),a0
    ec34:	       move.l a0,-(sp)
    ec36:	       jsr 14788 <getValueType>
    ec3c:	       lea 12(sp),sp
    ec40:	       tst.w d0
    ec42:	   /-- bne.s ec4a <builtIn_mixOverlay+0x2c>
    ec44:	   |   moveq #1,d0
    ec46:	/--|-- bra.w ece2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec4a:	|  \-> moveq #24,d0
    ec4c:	|      add.l 20(sp),d0
    ec50:	|      move.l d0,-(sp)
    ec52:	|      jsr 1510c <trimStack>
    ec58:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec5a:	|      movea.l 20(sp),a0
    ec5e:	|      move.l 24(a0),d0
    ec62:	|      move.l d0,-(sp)
    ec64:	|      pea 1 <_start+0x1>
    ec68:	|      moveq #12,d0
    ec6a:	|      add.l sp,d0
    ec6c:	|      move.l d0,-(sp)
    ec6e:	|      jsr 14788 <getValueType>
    ec74:	|      lea 12(sp),sp
    ec78:	|      tst.w d0
    ec7a:	|  /-- bne.s ec80 <builtIn_mixOverlay+0x62>
    ec7c:	|  |   moveq #1,d0
    ec7e:	+--|-- bra.s ece2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ec80:	|  \-> moveq #24,d0
    ec82:	|      add.l 20(sp),d0
    ec86:	|      move.l d0,-(sp)
    ec88:	|      jsr 1510c <trimStack>
    ec8e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ec90:	|      movea.l 20(sp),a0
    ec94:	|      move.l 24(a0),d0
    ec98:	|      move.l d0,-(sp)
    ec9a:	|      pea 5 <_start+0x5>
    ec9e:	|      moveq #16,d0
    eca0:	|      add.l sp,d0
    eca2:	|      move.l d0,-(sp)
    eca4:	|      jsr 14788 <getValueType>
    ecaa:	|      lea 12(sp),sp
    ecae:	|      tst.w d0
    ecb0:	|  /-- bne.s ecb6 <builtIn_mixOverlay+0x98>
    ecb2:	|  |   moveq #1,d0
    ecb4:	+--|-- bra.s ece2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ecb6:	|  \-> moveq #24,d0
    ecb8:	|      add.l 20(sp),d0
    ecbc:	|      move.l d0,-(sp)
    ecbe:	|      jsr 1510c <trimStack>
    ecc4:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ecc6:	|      movea.l (sp),a0
    ecc8:	|      move.l 4(sp),d1
    eccc:	|      move.l 8(sp),d0
    ecd0:	|      move.l a0,-(sp)
    ecd2:	|      move.l d1,-(sp)
    ecd4:	|      move.l d0,-(sp)
    ecd6:	|      jsr d37a <mixBackDrop>
    ecdc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ece0:	|      moveq #2,d0
}
    ece2:	\----> lea 12(sp),sp
    ece6:	       rts

0000ece8 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ece8:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    ecec:	       pea 19733 <PutChar+0x1aaf>
    ecf2:	       jsr 171b0 <KPrintF>
    ecf8:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecfa:	       movea.l 20(sp),a0
    ecfe:	       move.l 24(a0),d0
    ed02:	       move.l d0,-(sp)
    ed04:	       pea 1 <_start+0x1>
    ed08:	       lea 8(sp),a0
    ed0c:	       move.l a0,-(sp)
    ed0e:	       jsr 14788 <getValueType>
    ed14:	       lea 12(sp),sp
    ed18:	       tst.w d0
    ed1a:	   /-- bne.s ed22 <builtIn_pasteImage+0x3a>
    ed1c:	   |   moveq #1,d0
    ed1e:	/--|-- bra.w edc0 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ed22:	|  \-> moveq #24,d0
    ed24:	|      add.l 20(sp),d0
    ed28:	|      move.l d0,-(sp)
    ed2a:	|      jsr 1510c <trimStack>
    ed30:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed32:	|      movea.l 20(sp),a0
    ed36:	|      move.l 24(a0),d0
    ed3a:	|      move.l d0,-(sp)
    ed3c:	|      pea 1 <_start+0x1>
    ed40:	|      moveq #12,d0
    ed42:	|      add.l sp,d0
    ed44:	|      move.l d0,-(sp)
    ed46:	|      jsr 14788 <getValueType>
    ed4c:	|      lea 12(sp),sp
    ed50:	|      tst.w d0
    ed52:	|  /-- bne.s ed58 <builtIn_pasteImage+0x70>
    ed54:	|  |   moveq #1,d0
    ed56:	+--|-- bra.s edc0 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ed58:	|  \-> moveq #24,d0
    ed5a:	|      add.l 20(sp),d0
    ed5e:	|      move.l d0,-(sp)
    ed60:	|      jsr 1510c <trimStack>
    ed66:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ed68:	|      movea.l 20(sp),a0
    ed6c:	|      move.l 24(a0),d0
    ed70:	|      move.l d0,-(sp)
    ed72:	|      jsr 14c60 <getAnimationFromVar>
    ed78:	|      addq.l #4,sp
    ed7a:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ed7e:	|      moveq #24,d0
    ed80:	|      add.l 20(sp),d0
    ed84:	|      move.l d0,-(sp)
    ed86:	|      jsr 1510c <trimStack>
    ed8c:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ed8e:	|      tst.l 8(sp)
    ed92:	|  /-- bne.s ed98 <builtIn_pasteImage+0xb0>
    ed94:	|  |   moveq #2,d0
    ed96:	+--|-- bra.s edc0 <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    ed98:	|  \-> move.l (sp),d1
    ed9a:	|      move.l 4(sp),d0
    ed9e:	|      move.l 8(sp),-(sp)
    eda2:	|      move.l d1,-(sp)
    eda4:	|      move.l d0,-(sp)
    eda6:	|      jsr d94 <pasteCursor>
    edac:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    edb0:	|      pea 19748 <PutChar+0x1ac4>
    edb6:	|      jsr 171b0 <KPrintF>
    edbc:	|      addq.l #4,sp
	return BR_CONTINUE;	
    edbe:	|      moveq #2,d0
}
    edc0:	\----> lea 12(sp),sp
    edc4:	       rts

0000edc6 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    edc6:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edc8:	       movea.l 16(sp),a0
    edcc:	       move.l 24(a0),d0
    edd0:	       move.l d0,-(sp)
    edd2:	       pea 1 <_start+0x1>
    edd6:	       move.l sp,d0
    edd8:	       addq.l #8,d0
    edda:	       move.l d0,-(sp)
    eddc:	       jsr 14788 <getValueType>
    ede2:	       lea 12(sp),sp
    ede6:	       tst.w d0
    ede8:	   /-- bne.s edf0 <builtIn_setSceneDimensions+0x2a>
    edea:	   |   moveq #1,d0
    edec:	/--|-- bra.w ee78 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    edf0:	|  \-> moveq #24,d0
    edf2:	|      add.l 16(sp),d0
    edf6:	|      move.l d0,-(sp)
    edf8:	|      jsr 1510c <trimStack>
    edfe:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee00:	|      movea.l 16(sp),a0
    ee04:	|      move.l 24(a0),d0
    ee08:	|      move.l d0,-(sp)
    ee0a:	|      pea 1 <_start+0x1>
    ee0e:	|      moveq #12,d0
    ee10:	|      add.l sp,d0
    ee12:	|      move.l d0,-(sp)
    ee14:	|      jsr 14788 <getValueType>
    ee1a:	|      lea 12(sp),sp
    ee1e:	|      tst.w d0
    ee20:	|  /-- bne.s ee26 <builtIn_setSceneDimensions+0x60>
    ee22:	|  |   moveq #1,d0
    ee24:	+--|-- bra.s ee78 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ee26:	|  \-> moveq #24,d0
    ee28:	|      add.l 16(sp),d0
    ee2c:	|      move.l d0,-(sp)
    ee2e:	|      jsr 1510c <trimStack>
    ee34:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ee36:	|      move.l (sp),d1
    ee38:	|      move.l 4(sp),d0
    ee3c:	|      move.l d1,-(sp)
    ee3e:	|      move.l d0,-(sp)
    ee40:	|      jsr d3d0 <resizeBackdrop>
    ee46:	|      addq.l #8,sp
    ee48:	|      tst.w d0
    ee4a:	|  /-- beq.s ee68 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ee4c:	|  |   move.l (sp),d1
    ee4e:	|  |   move.l 4(sp),d0
    ee52:	|  |   move.l d1,-(sp)
    ee54:	|  |   move.l d0,-(sp)
    ee56:	|  |   clr.l -(sp)
    ee58:	|  |   clr.l -(sp)
    ee5a:	|  |   jsr d1d2 <blankScreen>
    ee60:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ee64:	|  |   moveq #2,d0
    ee66:	+--|-- bra.s ee78 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ee68:	|  \-> pea 1975e <PutChar+0x1ada>
    ee6e:	|      jsr 171b0 <KPrintF>
    ee74:	|      addq.l #4,sp
	return BR_ERROR;
    ee76:	|      moveq #1,d0
}
    ee78:	\----> addq.l #8,sp
    ee7a:	       rts

0000ee7c <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ee7c:	          move.l d3,-(sp)
    ee7e:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee80:	          movea.l 16(sp),a0
    ee84:	          move.l 24(a0),d0
    ee88:	          move.l d0,-(sp)
    ee8a:	          pea 1 <_start+0x1>
    ee8e:	          pea 1c954 <cameraY>
    ee94:	          jsr 14788 <getValueType>
    ee9a:	          lea 12(sp),sp
    ee9e:	          tst.w d0
    eea0:	      /-- bne.s eea8 <builtIn_aimCamera+0x2c>
    eea2:	      |   moveq #1,d0
    eea4:	/-----|-- bra.w f12a <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    eea8:	|     \-> moveq #24,d0
    eeaa:	|         add.l 16(sp),d0
    eeae:	|         move.l d0,-(sp)
    eeb0:	|         jsr 1510c <trimStack>
    eeb6:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eeb8:	|         movea.l 16(sp),a0
    eebc:	|         move.l 24(a0),d0
    eec0:	|         move.l d0,-(sp)
    eec2:	|         pea 1 <_start+0x1>
    eec6:	|         pea 1c950 <cameraX>
    eecc:	|         jsr 14788 <getValueType>
    eed2:	|         lea 12(sp),sp
    eed6:	|         tst.w d0
    eed8:	|     /-- bne.s eee0 <builtIn_aimCamera+0x64>
    eeda:	|     |   moveq #1,d0
    eedc:	+-----|-- bra.w f12a <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    eee0:	|     \-> moveq #24,d0
    eee2:	|         add.l 16(sp),d0
    eee6:	|         move.l d0,-(sp)
    eee8:	|         jsr 1510c <trimStack>
    eeee:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    eef0:	|         move.l 1c950 <cameraX>,d0
    eef6:	|         move.l d0,-(sp)
    eef8:	|         jsr 175ec <__floatsisf>
    eefe:	|         addq.l #4,sp
    ef00:	|         move.l d0,d2
    ef02:	|         move.l 1c7ea <winWidth>,d0
    ef08:	|         lsr.l #1,d0
    ef0a:	|         move.l d0,-(sp)
    ef0c:	|         jsr 17614 <__floatunsisf>
    ef12:	|         addq.l #4,sp
    ef14:	|         move.l d0,d1
    ef16:	|         move.l 1c234 <cameraZoom>,d0
    ef1c:	|         move.l d0,-(sp)
    ef1e:	|         move.l d1,-(sp)
    ef20:	|         jsr 17498 <__divsf3>
    ef26:	|         addq.l #8,sp
    ef28:	|         move.l d0,-(sp)
    ef2a:	|         move.l d2,-(sp)
    ef2c:	|         jsr 178e0 <__subsf3>
    ef32:	|         addq.l #8,sp
    ef34:	|         move.l d0,-(sp)
    ef36:	|         jsr 17584 <__fixsfsi>
    ef3c:	|         addq.l #4,sp
    ef3e:	|         move.l d0,1c950 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ef44:	|         move.l 1c954 <cameraY>,d0
    ef4a:	|         move.l d0,-(sp)
    ef4c:	|         jsr 175ec <__floatsisf>
    ef52:	|         addq.l #4,sp
    ef54:	|         move.l d0,d2
    ef56:	|         move.l 1c7ee <winHeight>,d0
    ef5c:	|         lsr.l #1,d0
    ef5e:	|         move.l d0,-(sp)
    ef60:	|         jsr 17614 <__floatunsisf>
    ef66:	|         addq.l #4,sp
    ef68:	|         move.l d0,d1
    ef6a:	|         move.l 1c234 <cameraZoom>,d0
    ef70:	|         move.l d0,-(sp)
    ef72:	|         move.l d1,-(sp)
    ef74:	|         jsr 17498 <__divsf3>
    ef7a:	|         addq.l #8,sp
    ef7c:	|         move.l d0,-(sp)
    ef7e:	|         move.l d2,-(sp)
    ef80:	|         jsr 178e0 <__subsf3>
    ef86:	|         addq.l #8,sp
    ef88:	|         move.l d0,-(sp)
    ef8a:	|         jsr 17584 <__fixsfsi>
    ef90:	|         addq.l #4,sp
    ef92:	|         move.l d0,1c954 <cameraY>

	if (cameraX < 0) cameraX = 0;
    ef98:	|         move.l 1c950 <cameraX>,d0
    ef9e:	|     /-- bpl.s efaa <builtIn_aimCamera+0x12e>
    efa0:	|     |   clr.l 1c950 <cameraX>
    efa6:	|  /--|-- bra.w f060 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    efaa:	|  |  \-> move.l 1c950 <cameraX>,d0
    efb0:	|  |      move.l d0,-(sp)
    efb2:	|  |      jsr 175ec <__floatsisf>
    efb8:	|  |      addq.l #4,sp
    efba:	|  |      move.l d0,d2
    efbc:	|  |      move.l 1c932 <sceneWidth>,d0
    efc2:	|  |      move.l d0,-(sp)
    efc4:	|  |      jsr 17614 <__floatunsisf>
    efca:	|  |      addq.l #4,sp
    efcc:	|  |      move.l d0,d3
    efce:	|  |      move.l 1c7ea <winWidth>,d0
    efd4:	|  |      move.l d0,-(sp)
    efd6:	|  |      jsr 17614 <__floatunsisf>
    efdc:	|  |      addq.l #4,sp
    efde:	|  |      move.l d0,d1
    efe0:	|  |      move.l 1c234 <cameraZoom>,d0
    efe6:	|  |      move.l d0,-(sp)
    efe8:	|  |      move.l d1,-(sp)
    efea:	|  |      jsr 17498 <__divsf3>
    eff0:	|  |      addq.l #8,sp
    eff2:	|  |      move.l d0,-(sp)
    eff4:	|  |      move.l d3,-(sp)
    eff6:	|  |      jsr 178e0 <__subsf3>
    effc:	|  |      addq.l #8,sp
    effe:	|  |      move.l d0,-(sp)
    f000:	|  |      move.l d2,-(sp)
    f002:	|  |      jsr 17758 <__gtsf2>
    f008:	|  |      addq.l #8,sp
    f00a:	|  |      tst.l d0
    f00c:	|  +----- ble.s f060 <builtIn_aimCamera+0x1e4>
    f00e:	|  |      move.l 1c932 <sceneWidth>,d0
    f014:	|  |      move.l d0,-(sp)
    f016:	|  |      jsr 17614 <__floatunsisf>
    f01c:	|  |      addq.l #4,sp
    f01e:	|  |      move.l d0,d2
    f020:	|  |      move.l 1c7ea <winWidth>,d0
    f026:	|  |      move.l d0,-(sp)
    f028:	|  |      jsr 17614 <__floatunsisf>
    f02e:	|  |      addq.l #4,sp
    f030:	|  |      move.l d0,d1
    f032:	|  |      move.l 1c234 <cameraZoom>,d0
    f038:	|  |      move.l d0,-(sp)
    f03a:	|  |      move.l d1,-(sp)
    f03c:	|  |      jsr 17498 <__divsf3>
    f042:	|  |      addq.l #8,sp
    f044:	|  |      move.l d0,-(sp)
    f046:	|  |      move.l d2,-(sp)
    f048:	|  |      jsr 178e0 <__subsf3>
    f04e:	|  |      addq.l #8,sp
    f050:	|  |      move.l d0,-(sp)
    f052:	|  |      jsr 17584 <__fixsfsi>
    f058:	|  |      addq.l #4,sp
    f05a:	|  |      move.l d0,1c950 <cameraX>
	if (cameraY < 0) cameraY = 0;
    f060:	|  \----> move.l 1c954 <cameraY>,d0
    f066:	|     /-- bpl.s f072 <builtIn_aimCamera+0x1f6>
    f068:	|     |   clr.l 1c954 <cameraY>
    f06e:	|  /--|-- bra.w f128 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f072:	|  |  \-> move.l 1c954 <cameraY>,d0
    f078:	|  |      move.l d0,-(sp)
    f07a:	|  |      jsr 175ec <__floatsisf>
    f080:	|  |      addq.l #4,sp
    f082:	|  |      move.l d0,d2
    f084:	|  |      move.l 1c936 <sceneHeight>,d0
    f08a:	|  |      move.l d0,-(sp)
    f08c:	|  |      jsr 17614 <__floatunsisf>
    f092:	|  |      addq.l #4,sp
    f094:	|  |      move.l d0,d3
    f096:	|  |      move.l 1c7ee <winHeight>,d0
    f09c:	|  |      move.l d0,-(sp)
    f09e:	|  |      jsr 17614 <__floatunsisf>
    f0a4:	|  |      addq.l #4,sp
    f0a6:	|  |      move.l d0,d1
    f0a8:	|  |      move.l 1c234 <cameraZoom>,d0
    f0ae:	|  |      move.l d0,-(sp)
    f0b0:	|  |      move.l d1,-(sp)
    f0b2:	|  |      jsr 17498 <__divsf3>
    f0b8:	|  |      addq.l #8,sp
    f0ba:	|  |      move.l d0,-(sp)
    f0bc:	|  |      move.l d3,-(sp)
    f0be:	|  |      jsr 178e0 <__subsf3>
    f0c4:	|  |      addq.l #8,sp
    f0c6:	|  |      move.l d0,-(sp)
    f0c8:	|  |      move.l d2,-(sp)
    f0ca:	|  |      jsr 17758 <__gtsf2>
    f0d0:	|  |      addq.l #8,sp
    f0d2:	|  |      tst.l d0
    f0d4:	|  +----- ble.s f128 <builtIn_aimCamera+0x2ac>
    f0d6:	|  |      move.l 1c936 <sceneHeight>,d0
    f0dc:	|  |      move.l d0,-(sp)
    f0de:	|  |      jsr 17614 <__floatunsisf>
    f0e4:	|  |      addq.l #4,sp
    f0e6:	|  |      move.l d0,d2
    f0e8:	|  |      move.l 1c7ee <winHeight>,d0
    f0ee:	|  |      move.l d0,-(sp)
    f0f0:	|  |      jsr 17614 <__floatunsisf>
    f0f6:	|  |      addq.l #4,sp
    f0f8:	|  |      move.l d0,d1
    f0fa:	|  |      move.l 1c234 <cameraZoom>,d0
    f100:	|  |      move.l d0,-(sp)
    f102:	|  |      move.l d1,-(sp)
    f104:	|  |      jsr 17498 <__divsf3>
    f10a:	|  |      addq.l #8,sp
    f10c:	|  |      move.l d0,-(sp)
    f10e:	|  |      move.l d2,-(sp)
    f110:	|  |      jsr 178e0 <__subsf3>
    f116:	|  |      addq.l #8,sp
    f118:	|  |      move.l d0,-(sp)
    f11a:	|  |      jsr 17584 <__fixsfsi>
    f120:	|  |      addq.l #4,sp
    f122:	|  |      move.l d0,1c954 <cameraY>
	return BR_CONTINUE;
    f128:	|  \----> moveq #2,d0
}
    f12a:	\-------> move.l (sp)+,d2
    f12c:	          move.l (sp)+,d3
    f12e:	          rts

0000f130 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f130:	       subq.l #4,sp
    f132:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f134:	       movea.l 16(sp),a0
    f138:	       move.l 24(a0),d0
    f13c:	       move.l d0,-(sp)
    f13e:	       pea 1 <_start+0x1>
    f142:	       moveq #12,d0
    f144:	       add.l sp,d0
    f146:	       move.l d0,-(sp)
    f148:	       jsr 14788 <getValueType>
    f14e:	       lea 12(sp),sp
    f152:	       tst.w d0
    f154:	   /-- bne.s f15c <builtIn_zoomCamera+0x2c>
    f156:	   |   moveq #1,d0
    f158:	/--|-- bra.w f356 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f15c:	|  \-> moveq #24,d0
    f15e:	|      add.l 16(sp),d0
    f162:	|      move.l d0,-(sp)
    f164:	|      jsr 1510c <trimStack>
    f16a:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f16c:	|      move.l 1c852 <input+0xa>,d0
    f172:	|      move.l d0,-(sp)
    f174:	|      jsr 175ec <__floatsisf>
    f17a:	|      addq.l #4,sp
    f17c:	|      move.l d0,d1
    f17e:	|      move.l 1c234 <cameraZoom>,d0
    f184:	|      move.l d0,-(sp)
    f186:	|      move.l d1,-(sp)
    f188:	|      jsr 1769e <__mulsf3>
    f18e:	|      addq.l #8,sp
    f190:	|      move.l d0,-(sp)
    f192:	|      jsr 17584 <__fixsfsi>
    f198:	|      addq.l #4,sp
    f19a:	|      move.l d0,1c852 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f1a0:	|      move.l 1c856 <input+0xe>,d0
    f1a6:	|      move.l d0,-(sp)
    f1a8:	|      jsr 175ec <__floatsisf>
    f1ae:	|      addq.l #4,sp
    f1b0:	|      move.l d0,d1
    f1b2:	|      move.l 1c234 <cameraZoom>,d0
    f1b8:	|      move.l d0,-(sp)
    f1ba:	|      move.l d1,-(sp)
    f1bc:	|      jsr 1769e <__mulsf3>
    f1c2:	|      addq.l #8,sp
    f1c4:	|      move.l d0,-(sp)
    f1c6:	|      jsr 17584 <__fixsfsi>
    f1cc:	|      addq.l #4,sp
    f1ce:	|      move.l d0,1c856 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f1d4:	|      move.l 4(sp),d0
    f1d8:	|      move.l d0,-(sp)
    f1da:	|      jsr 175ec <__floatsisf>
    f1e0:	|      addq.l #4,sp
    f1e2:	|      move.l #1008981770,-(sp)
    f1e8:	|      move.l d0,-(sp)
    f1ea:	|      jsr 1769e <__mulsf3>
    f1f0:	|      addq.l #8,sp
    f1f2:	|      move.l d0,1c234 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f1f8:	|      move.l 1c7ea <winWidth>,d0
    f1fe:	|      move.l d0,-(sp)
    f200:	|      jsr 17614 <__floatunsisf>
    f206:	|      addq.l #4,sp
    f208:	|      move.l d0,d1
    f20a:	|      move.l 1c234 <cameraZoom>,d0
    f210:	|      move.l d0,-(sp)
    f212:	|      move.l d1,-(sp)
    f214:	|      jsr 17498 <__divsf3>
    f21a:	|      addq.l #8,sp
    f21c:	|      move.l d0,d2
    f21e:	|      move.l 1c932 <sceneWidth>,d0
    f224:	|      move.l d0,-(sp)
    f226:	|      jsr 17614 <__floatunsisf>
    f22c:	|      addq.l #4,sp
    f22e:	|      move.l d0,-(sp)
    f230:	|      move.l d2,-(sp)
    f232:	|      jsr 17758 <__gtsf2>
    f238:	|      addq.l #8,sp
    f23a:	|      tst.l d0
    f23c:	|  /-- ble.s f272 <builtIn_zoomCamera+0x142>
    f23e:	|  |   move.l 1c7ea <winWidth>,d0
    f244:	|  |   move.l d0,-(sp)
    f246:	|  |   jsr 17614 <__floatunsisf>
    f24c:	|  |   addq.l #4,sp
    f24e:	|  |   move.l d0,d2
    f250:	|  |   move.l 1c932 <sceneWidth>,d0
    f256:	|  |   move.l d0,-(sp)
    f258:	|  |   jsr 17614 <__floatunsisf>
    f25e:	|  |   addq.l #4,sp
    f260:	|  |   move.l d0,-(sp)
    f262:	|  |   move.l d2,-(sp)
    f264:	|  |   jsr 17498 <__divsf3>
    f26a:	|  |   addq.l #8,sp
    f26c:	|  |   move.l d0,1c234 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f272:	|  \-> move.l 1c7ee <winHeight>,d0
    f278:	|      move.l d0,-(sp)
    f27a:	|      jsr 17614 <__floatunsisf>
    f280:	|      addq.l #4,sp
    f282:	|      move.l d0,d1
    f284:	|      move.l 1c234 <cameraZoom>,d0
    f28a:	|      move.l d0,-(sp)
    f28c:	|      move.l d1,-(sp)
    f28e:	|      jsr 17498 <__divsf3>
    f294:	|      addq.l #8,sp
    f296:	|      move.l d0,d2
    f298:	|      move.l 1c936 <sceneHeight>,d0
    f29e:	|      move.l d0,-(sp)
    f2a0:	|      jsr 17614 <__floatunsisf>
    f2a6:	|      addq.l #4,sp
    f2a8:	|      move.l d0,-(sp)
    f2aa:	|      move.l d2,-(sp)
    f2ac:	|      jsr 17758 <__gtsf2>
    f2b2:	|      addq.l #8,sp
    f2b4:	|      tst.l d0
    f2b6:	|  /-- ble.s f2ec <builtIn_zoomCamera+0x1bc>
    f2b8:	|  |   move.l 1c7ee <winHeight>,d0
    f2be:	|  |   move.l d0,-(sp)
    f2c0:	|  |   jsr 17614 <__floatunsisf>
    f2c6:	|  |   addq.l #4,sp
    f2c8:	|  |   move.l d0,d2
    f2ca:	|  |   move.l 1c936 <sceneHeight>,d0
    f2d0:	|  |   move.l d0,-(sp)
    f2d2:	|  |   jsr 17614 <__floatunsisf>
    f2d8:	|  |   addq.l #4,sp
    f2da:	|  |   move.l d0,-(sp)
    f2dc:	|  |   move.l d2,-(sp)
    f2de:	|  |   jsr 17498 <__divsf3>
    f2e4:	|  |   addq.l #8,sp
    f2e6:	|  |   move.l d0,1c234 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f2ec:	|  \-> move.l 1c852 <input+0xa>,d0
    f2f2:	|      move.l d0,-(sp)
    f2f4:	|      jsr 175ec <__floatsisf>
    f2fa:	|      addq.l #4,sp
    f2fc:	|      move.l d0,d1
    f2fe:	|      move.l 1c234 <cameraZoom>,d0
    f304:	|      move.l d0,-(sp)
    f306:	|      move.l d1,-(sp)
    f308:	|      jsr 17498 <__divsf3>
    f30e:	|      addq.l #8,sp
    f310:	|      move.l d0,-(sp)
    f312:	|      jsr 17584 <__fixsfsi>
    f318:	|      addq.l #4,sp
    f31a:	|      move.l d0,1c852 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f320:	|      move.l 1c856 <input+0xe>,d0
    f326:	|      move.l d0,-(sp)
    f328:	|      jsr 175ec <__floatsisf>
    f32e:	|      addq.l #4,sp
    f330:	|      move.l d0,d1
    f332:	|      move.l 1c234 <cameraZoom>,d0
    f338:	|      move.l d0,-(sp)
    f33a:	|      move.l d1,-(sp)
    f33c:	|      jsr 17498 <__divsf3>
    f342:	|      addq.l #8,sp
    f344:	|      move.l d0,-(sp)
    f346:	|      jsr 17584 <__fixsfsi>
    f34c:	|      addq.l #4,sp
    f34e:	|      move.l d0,1c856 <input+0xe>

	return BR_CONTINUE;
    f354:	|      moveq #2,d0
}
    f356:	\----> move.l (sp)+,d2
    f358:	       addq.l #4,sp
    f35a:	       rts

0000f35c <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f35c:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f35e:	             tst.l 8(sp)
    f362:	         /-- bne.s f376 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f364:	         |   pea 19783 <PutChar+0x1aff>
    f36a:	         |   jsr 171b0 <KPrintF>
    f370:	         |   addq.l #4,sp
		return BR_ERROR;
    f372:	         |   moveq #1,d0
    f374:	/--------|-- bra.s f3d6 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f376:	|        \-> jsr 15db0 <rand>
    f37c:	|            move.l d0,d1
    f37e:	|            move.l 8(sp),d0
    f382:	|            move.l d0,-(sp)
    f384:	|            move.l d1,-(sp)
    f386:	|            jsr 17c48 <__umodsi3>
    f38c:	|            addq.l #8,sp
    f38e:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f390:	|     /----- bra.s f3c4 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f392:	|  /--|----> move.l (sp),d0
    f394:	|  |  |      cmp.l 8(sp),d0
    f398:	|  |  |  /-- bne.s f3b4 <builtIn_pickOne+0x58>
    f39a:	|  |  |  |   moveq #28,d0
    f39c:	|  |  |  |   add.l 12(sp),d0
    f3a0:	|  |  |  |   movea.l 12(sp),a0
    f3a4:	|  |  |  |   move.l 24(a0),d1
    f3a8:	|  |  |  |   move.l d0,-(sp)
    f3aa:	|  |  |  |   move.l d1,-(sp)
    f3ac:	|  |  |  |   jsr 14c42 <copyVariable>
    f3b2:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f3b4:	|  |  |  \-> moveq #24,d0
    f3b6:	|  |  |      add.l 12(sp),d0
    f3ba:	|  |  |      move.l d0,-(sp)
    f3bc:	|  |  |      jsr 1510c <trimStack>
    f3c2:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f3c4:	|  |  \----> move.l 8(sp),d0
    f3c8:	|  |         move.l d0,d1
    f3ca:	|  |         subq.l #1,d1
    f3cc:	|  |         move.l d1,8(sp)
    f3d0:	|  |         tst.l d0
    f3d2:	|  \-------- bne.s f392 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f3d4:	|            moveq #2,d0
}
    f3d6:	\----------> addq.l #4,sp
    f3d8:	             rts

0000f3da <builtIn_substring>:

builtIn(substring)
{
    f3da:	       lea -40(sp),sp
    f3de:	       move.l a6,-(sp)
    f3e0:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f3e2:	       movea.l 56(sp),a0
    f3e6:	       move.l 24(a0),d0
    f3ea:	       move.l d0,-(sp)
    f3ec:	       pea 1 <_start+0x1>
    f3f0:	       lea 16(sp),a0
    f3f4:	       move.l a0,-(sp)
    f3f6:	       jsr 14788 <getValueType>
    f3fc:	       lea 12(sp),sp
    f400:	       tst.w d0
    f402:	   /-- bne.s f40a <builtIn_substring+0x30>
    f404:	   |   moveq #1,d0
    f406:	/--|-- bra.w f582 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f40a:	|  \-> moveq #24,d0
    f40c:	|      add.l 56(sp),d0
    f410:	|      move.l d0,-(sp)
    f412:	|      jsr 1510c <trimStack>
    f418:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f41a:	|      movea.l 56(sp),a0
    f41e:	|      move.l 24(a0),d0
    f422:	|      move.l d0,-(sp)
    f424:	|      pea 1 <_start+0x1>
    f428:	|      lea 20(sp),a0
    f42c:	|      move.l a0,-(sp)
    f42e:	|      jsr 14788 <getValueType>
    f434:	|      lea 12(sp),sp
    f438:	|      tst.w d0
    f43a:	|  /-- bne.s f442 <builtIn_substring+0x68>
    f43c:	|  |   moveq #1,d0
    f43e:	+--|-- bra.w f582 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f442:	|  \-> moveq #24,d0
    f444:	|      add.l 56(sp),d0
    f448:	|      move.l d0,-(sp)
    f44a:	|      jsr 1510c <trimStack>
    f450:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f452:	|      movea.l 56(sp),a0
    f456:	|      move.l 24(a0),d0
    f45a:	|      move.l d0,-(sp)
    f45c:	|      jsr 14d5e <getTextFromAnyVar>
    f462:	|      addq.l #4,sp
    f464:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f468:	|      moveq #24,d0
    f46a:	|      add.l 56(sp),d0
    f46e:	|      move.l d0,-(sp)
    f470:	|      jsr 1510c <trimStack>
    f476:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f478:	|      move.l 44(sp),-(sp)
    f47c:	|      jsr 13c74 <strlen>
    f482:	|      addq.l #4,sp
    f484:	|      move.l d0,d1
    f486:	|      move.l 12(sp),d0
    f48a:	|      movea.l d0,a0
    f48c:	|      move.l 8(sp),d0
    f490:	|      add.l a0,d0
    f492:	|      cmp.l d1,d0
    f494:	|  /-- bls.s f4ca <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f496:	|  |   move.l 44(sp),-(sp)
    f49a:	|  |   jsr 13c74 <strlen>
    f4a0:	|  |   addq.l #4,sp
    f4a2:	|  |   move.l d0,d1
    f4a4:	|  |   move.l 12(sp),d0
    f4a8:	|  |   sub.l d0,d1
    f4aa:	|  |   move.l d1,d0
    f4ac:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f4b0:	|  |   move.l 44(sp),-(sp)
    f4b4:	|  |   jsr 13c74 <strlen>
    f4ba:	|  |   addq.l #4,sp
    f4bc:	|  |   move.l d0,d1
    f4be:	|  |   move.l 12(sp),d0
    f4c2:	|  |   cmp.l d1,d0
    f4c4:	|  +-- bls.s f4ca <builtIn_substring+0xf0>
            start = 0;
    f4c6:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f4ca:	|  \-> move.l 8(sp),d0
    f4ce:	|  /-- bpl.s f4d4 <builtIn_substring+0xfa>
        length = 0;
    f4d0:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f4d4:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f4da:	|      move.l 12(sp),d1
    f4de:	|      move.l 8(sp),d0
    f4e2:	|      move.l d1,d2
    f4e4:	|      add.l d0,d2
    f4e6:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f4ea:	|      move.l 36(sp),d0
    f4ee:	|      sub.l 40(sp),d0
    f4f2:	|      addq.l #1,d0
    f4f4:	|      move.l d0,32(sp)
    f4f8:	|      clr.l 28(sp)
    f4fc:	|      move.l 1c896 <SysBase>,d0
    f502:	|      movea.l d0,a6
    f504:	|      move.l 32(sp),d0
    f508:	|      move.l 28(sp),d1
    f50c:	|      jsr -684(a6)
    f510:	|      move.l d0,24(sp)
    f514:	|      move.l 24(sp),d0
    f518:	|      move.l d0,20(sp)
    if (!newString) {
    f51c:	|  /-- bne.s f522 <builtIn_substring+0x148>
        return BR_ERROR;
    f51e:	|  |   moveq #1,d0
    f520:	+--|-- bra.s f582 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f522:	|  \-> move.l 36(sp),d0
    f526:	|      sub.l 40(sp),d0
    f52a:	|      move.l d0,d1
    f52c:	|      move.l 40(sp),d0
    f530:	|      add.l 44(sp),d0
    f534:	|      move.l d1,-(sp)
    f536:	|      move.l d0,-(sp)
    f538:	|      move.l 28(sp),-(sp)
    f53c:	|      jsr 17164 <memcpy>
    f542:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f546:	|      move.l 36(sp),d0
    f54a:	|      sub.l 40(sp),d0
    f54e:	|      movea.l 20(sp),a0
    f552:	|      adda.l d0,a0
    f554:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f556:	|      moveq #28,d0
    f558:	|      add.l 56(sp),d0
    f55c:	|      move.l 20(sp),-(sp)
    f560:	|      move.l d0,-(sp)
    f562:	|      jsr 149aa <makeTextVar>
    f568:	|      addq.l #8,sp
    FreeVec(newString);
    f56a:	|      move.l 20(sp),16(sp)
    f570:	|      move.l 1c896 <SysBase>,d0
    f576:	|      movea.l d0,a6
    f578:	|      movea.l 16(sp),a1
    f57c:	|      jsr -690(a6)
    return BR_CONTINUE;
    f580:	|      moveq #2,d0
}
    f582:	\----> move.l (sp)+,d2
    f584:	       movea.l (sp)+,a6
    f586:	       lea 40(sp),sp
    f58a:	       rts

0000f58c <builtIn_stringLength>:

builtIn(stringLength)
{
    f58c:	subq.l #8,sp
    f58e:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f590:	movea.l 20(sp),a0
    f594:	move.l 24(a0),d0
    f598:	move.l d0,-(sp)
    f59a:	jsr 14d5e <getTextFromAnyVar>
    f5a0:	addq.l #4,sp
    f5a2:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f5a6:	moveq #24,d0
    f5a8:	add.l 20(sp),d0
    f5ac:	move.l d0,-(sp)
    f5ae:	jsr 1510c <trimStack>
    f5b4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f5b6:	move.l 8(sp),-(sp)
    f5ba:	jsr 13c74 <strlen>
    f5c0:	addq.l #4,sp
    f5c2:	move.l d0,d1
    f5c4:	moveq #28,d0
    f5c6:	add.l 20(sp),d0
    f5ca:	move.l d1,-(sp)
    f5cc:	pea 1 <_start+0x1>
    f5d0:	move.l d0,-(sp)
    f5d2:	jsr 1507a <setVariable>
    f5d8:	lea 12(sp),sp
	FreeVec(newText);
    f5dc:	move.l 8(sp),4(sp)
    f5e2:	move.l 1c896 <SysBase>,d0
    f5e8:	movea.l d0,a6
    f5ea:	movea.l 4(sp),a1
    f5ee:	jsr -690(a6)
	return BR_CONTINUE;
    f5f2:	moveq #2,d0
}
    f5f4:	movea.l (sp)+,a6
    f5f6:	addq.l #8,sp
    f5f8:	rts

0000f5fa <builtIn_newStack>:

builtIn(newStack)
{
    f5fa:	             lea -12(sp),sp
    f5fe:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f600:	             moveq #28,d0
    f602:	             add.l 24(sp),d0
    f606:	             move.l d0,-(sp)
    f608:	             jsr 149d6 <unlinkVar>
    f60e:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f610:	             movea.l 24(sp),a0
    f614:	             moveq #6,d0
    f616:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f61a:	             moveq #12,d1
    f61c:	             move.l d1,12(sp)
    f620:	             clr.l 8(sp)
    f624:	             move.l 1c896 <SysBase>,d0
    f62a:	             movea.l d0,a6
    f62c:	             move.l 12(sp),d0
    f630:	             move.l 8(sp),d1
    f634:	             jsr -684(a6)
    f638:	             move.l d0,4(sp)
    f63c:	             move.l 4(sp),d0
    f640:	             movea.l 24(sp),a0
    f644:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f648:	             movea.l 24(sp),a0
    f64c:	             move.l 32(a0),d0
    f650:	         /-- bne.s f658 <builtIn_newStack+0x5e>
    f652:	         |   moveq #1,d0
    f654:	/--------|-- bra.w f6ea <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f658:	|        \-> movea.l 24(sp),a0
    f65c:	|            movea.l 32(a0),a0
    f660:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f662:	|            movea.l 24(sp),a0
    f666:	|            movea.l 32(a0),a0
    f66a:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f66e:	|            movea.l 24(sp),a0
    f672:	|            movea.l 32(a0),a0
    f676:	|            moveq #1,d0
    f678:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f67c:	|     /----- bra.s f6d8 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f67e:	|  /--|----> movea.l 24(sp),a0
    f682:	|  |  |      move.l 32(a0),d0
    f686:	|  |  |      move.l d0,d1
    f688:	|  |  |      movea.l 24(sp),a0
    f68c:	|  |  |      move.l 24(a0),d0
    f690:	|  |  |      move.l d1,-(sp)
    f692:	|  |  |      move.l d0,-(sp)
    f694:	|  |  |      jsr 13fc4 <addVarToStack>
    f69a:	|  |  |      addq.l #8,sp
    f69c:	|  |  |      tst.w d0
    f69e:	|  |  |  /-- bne.s f6a4 <builtIn_newStack+0xaa>
    f6a0:	|  |  |  |   moveq #1,d0
    f6a2:	+--|--|--|-- bra.s f6ea <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f6a4:	|  |  |  \-> movea.l 24(sp),a0
    f6a8:	|  |  |      movea.l 32(a0),a0
    f6ac:	|  |  |      move.l 4(a0),d0
    f6b0:	|  |  |  /-- bne.s f6c8 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f6b2:	|  |  |  |   movea.l 24(sp),a0
    f6b6:	|  |  |  |   movea.l 32(a0),a1
    f6ba:	|  |  |  |   movea.l 24(sp),a0
    f6be:	|  |  |  |   movea.l 32(a0),a0
    f6c2:	|  |  |  |   move.l (a1),d0
    f6c4:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f6c8:	|  |  |  \-> moveq #24,d0
    f6ca:	|  |  |      add.l 24(sp),d0
    f6ce:	|  |  |      move.l d0,-(sp)
    f6d0:	|  |  |      jsr 1510c <trimStack>
    f6d6:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f6d8:	|  |  \----> move.l 20(sp),d0
    f6dc:	|  |         move.l d0,d1
    f6de:	|  |         subq.l #1,d1
    f6e0:	|  |         move.l d1,20(sp)
    f6e4:	|  |         tst.l d0
    f6e6:	|  \-------- bne.s f67e <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f6e8:	|            moveq #2,d0
}
    f6ea:	\----------> movea.l (sp)+,a6
    f6ec:	             lea 12(sp),sp
    f6f0:	             rts

0000f6f2 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f6f2:	          movea.l 8(sp),a0
    f6f6:	          movea.l 24(a0),a0
    f6fa:	          move.l (a0),d0
    f6fc:	          moveq #6,d1
    f6fe:	          cmp.l d0,d1
    f700:	      /-- beq.s f71c <builtIn_stackSize+0x2a>
    f702:	      |   moveq #10,d1
    f704:	      |   cmp.l d0,d1
    f706:	   /--|-- beq.s f760 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f708:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f70a:	   |  |   pea 197b6 <PutChar+0x1b32>
    f710:	   |  |   jsr 171b0 <KPrintF>
    f716:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f718:	   |  |   moveq #1,d0
    f71a:	/--|--|-- bra.s f79a <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f71c:	|  |  \-> movea.l 8(sp),a0
    f720:	|  |      movea.l 24(a0),a0
    f724:	|  |      move.l 4(a0),d0
    f728:	|  |      move.l d0,-(sp)
    f72a:	|  |      jsr 150e8 <stackSize>
    f730:	|  |      addq.l #4,sp
    f732:	|  |      move.l d0,d1
    f734:	|  |      moveq #28,d0
    f736:	|  |      add.l 8(sp),d0
    f73a:	|  |      move.l d1,-(sp)
    f73c:	|  |      pea 1 <_start+0x1>
    f740:	|  |      move.l d0,-(sp)
    f742:	|  |      jsr 1507a <setVariable>
    f748:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f74c:	|  |      moveq #24,d0
    f74e:	|  |      add.l 8(sp),d0
    f752:	|  |      move.l d0,-(sp)
    f754:	|  |      jsr 1510c <trimStack>
    f75a:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f75c:	|  |      moveq #2,d0
    f75e:	+--|----- bra.s f79a <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f760:	|  \----> movea.l 8(sp),a0
    f764:	|         movea.l 24(a0),a0
    f768:	|         movea.l 4(a0),a0
    f76c:	|         move.l 4(a0),d1
    f770:	|         moveq #28,d0
    f772:	|         add.l 8(sp),d0
    f776:	|         move.l d1,-(sp)
    f778:	|         pea 1 <_start+0x1>
    f77c:	|         move.l d0,-(sp)
    f77e:	|         jsr 1507a <setVariable>
    f784:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f788:	|         moveq #24,d0
    f78a:	|         add.l 8(sp),d0
    f78e:	|         move.l d0,-(sp)
    f790:	|         jsr 1510c <trimStack>
    f796:	|         addq.l #4,sp
			return BR_CONTINUE;
    f798:	|         moveq #2,d0
}
    f79a:	\-------> rts

0000f79c <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f79c:	       movea.l 8(sp),a0
    f7a0:	       movea.l 24(a0),a0
    f7a4:	       move.l (a0),d0
    f7a6:	       moveq #6,d1
    f7a8:	       cmp.l d0,d1
    f7aa:	   /-- beq.s f7be <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f7ac:	   |   pea 197df <PutChar+0x1b5b>
    f7b2:	   |   jsr 171b0 <KPrintF>
    f7b8:	   |   addq.l #4,sp
		return BR_ERROR;
    f7ba:	   |   moveq #1,d0
    f7bc:	/--|-- bra.s f7f2 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f7be:	|  \-> moveq #28,d0
    f7c0:	|      add.l 8(sp),d0
    f7c4:	|      movea.l 8(sp),a0
    f7c8:	|      move.l 24(a0),d1
    f7cc:	|      move.l d0,-(sp)
    f7ce:	|      move.l d1,-(sp)
    f7d0:	|      jsr 1428e <copyStack>
    f7d6:	|      addq.l #8,sp
    f7d8:	|      tst.w d0
    f7da:	|  /-- bne.s f7e0 <builtIn_copyStack+0x44>
    f7dc:	|  |   moveq #1,d0
    f7de:	+--|-- bra.s f7f2 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f7e0:	|  \-> moveq #24,d0
    f7e2:	|      add.l 8(sp),d0
    f7e6:	|      move.l d0,-(sp)
    f7e8:	|      jsr 1510c <trimStack>
    f7ee:	|      addq.l #4,sp
	return BR_CONTINUE;
    f7f0:	|      moveq #2,d0
}
    f7f2:	\----> rts

0000f7f4 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f7f4:	       movea.l 8(sp),a0
    f7f8:	       movea.l 24(a0),a0
    f7fc:	       movea.l 8(a0),a0
    f800:	       move.l (a0),d0
    f802:	       moveq #6,d1
    f804:	       cmp.l d0,d1
    f806:	   /-- beq.s f81c <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f808:	   |   pea 197f8 <PutChar+0x1b74>
    f80e:	   |   jsr 171b0 <KPrintF>
    f814:	   |   addq.l #4,sp
		return BR_ERROR;
    f816:	   |   moveq #1,d0
    f818:	/--|-- bra.w f8aa <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f81c:	|  \-> movea.l 8(sp),a0
    f820:	|      movea.l 24(a0),a0
    f824:	|      movea.l 8(a0),a0
    f828:	|      move.l 4(a0),d0
    f82c:	|      move.l d0,d1
    f82e:	|      movea.l 8(sp),a0
    f832:	|      move.l 24(a0),d0
    f836:	|      move.l d1,-(sp)
    f838:	|      move.l d0,-(sp)
    f83a:	|      jsr 13fc4 <addVarToStack>
    f840:	|      addq.l #8,sp
    f842:	|      tst.w d0
    f844:	|  /-- bne.s f84a <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f846:	|  |   moveq #1,d0
    f848:	+--|-- bra.s f8aa <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f84a:	|  \-> movea.l 8(sp),a0
    f84e:	|      movea.l 24(a0),a0
    f852:	|      movea.l 8(a0),a0
    f856:	|      movea.l 4(a0),a0
    f85a:	|      movea.l (a0),a0
    f85c:	|      move.l 8(a0),d0
    f860:	|  /-- bne.s f888 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f862:	|  |   movea.l 8(sp),a0
    f866:	|  |   movea.l 24(a0),a0
    f86a:	|  |   movea.l 8(a0),a0
    f86e:	|  |   movea.l 4(a0),a1
    f872:	|  |   movea.l 8(sp),a0
    f876:	|  |   movea.l 24(a0),a0
    f87a:	|  |   movea.l 8(a0),a0
    f87e:	|  |   movea.l 4(a0),a0
    f882:	|  |   move.l (a1),d0
    f884:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f888:	|  \-> moveq #24,d0
    f88a:	|      add.l 8(sp),d0
    f88e:	|      move.l d0,-(sp)
    f890:	|      jsr 1510c <trimStack>
    f896:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f898:	|      moveq #24,d0
    f89a:	|      add.l 8(sp),d0
    f89e:	|      move.l d0,-(sp)
    f8a0:	|      jsr 1510c <trimStack>
    f8a6:	|      addq.l #4,sp
	return BR_CONTINUE;
    f8a8:	|      moveq #2,d0
}
    f8aa:	\----> rts

0000f8ac <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f8ac:	             movea.l 8(sp),a0
    f8b0:	             movea.l 24(a0),a0
    f8b4:	             movea.l 8(a0),a0
    f8b8:	             move.l (a0),d0
    f8ba:	             moveq #6,d1
    f8bc:	             cmp.l d0,d1
    f8be:	         /-- beq.s f8d4 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f8c0:	         |   pea 197f8 <PutChar+0x1b74>
    f8c6:	         |   jsr 171b0 <KPrintF>
    f8cc:	         |   addq.l #4,sp
		return BR_ERROR;
    f8ce:	         |   moveq #1,d0
    f8d0:	/--------|-- bra.w f9c2 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f8d4:	|        \-> movea.l 8(sp),a0
    f8d8:	|            movea.l 24(a0),a0
    f8dc:	|            movea.l 8(a0),a0
    f8e0:	|            movea.l 4(a0),a0
    f8e4:	|            move.l (a0),d0
    f8e6:	|     /----- bne.s f940 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f8e8:	|     |      movea.l 8(sp),a0
    f8ec:	|     |      movea.l 24(a0),a0
    f8f0:	|     |      movea.l 8(a0),a0
    f8f4:	|     |      move.l 4(a0),d0
    f8f8:	|     |      move.l d0,d1
    f8fa:	|     |      movea.l 8(sp),a0
    f8fe:	|     |      move.l 24(a0),d0
    f902:	|     |      move.l d1,-(sp)
    f904:	|     |      move.l d0,-(sp)
    f906:	|     |      jsr 13fc4 <addVarToStack>
    f90c:	|     |      addq.l #8,sp
    f90e:	|     |      tst.w d0
    f910:	|     |  /-- bne.s f918 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f912:	|     |  |   moveq #1,d0
    f914:	+-----|--|-- bra.w f9c2 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f918:	|     |  \-> movea.l 8(sp),a0
    f91c:	|     |      movea.l 24(a0),a0
    f920:	|     |      movea.l 8(a0),a0
    f924:	|     |      movea.l 4(a0),a1
    f928:	|     |      movea.l 8(sp),a0
    f92c:	|     |      movea.l 24(a0),a0
    f930:	|     |      movea.l 8(a0),a0
    f934:	|     |      movea.l 4(a0),a0
    f938:	|     |      move.l (a1),d0
    f93a:	|     |      move.l d0,4(a0)
    f93e:	|  /--|----- bra.s f9a0 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f940:	|  |  \----> movea.l 8(sp),a0
    f944:	|  |         movea.l 24(a0),a0
    f948:	|  |         movea.l 8(a0),a0
    f94c:	|  |         movea.l 4(a0),a0
    f950:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f954:	|  |         move.l d0,d1
    f956:	|  |         addq.l #8,d1
    f958:	|  |         movea.l 8(sp),a0
    f95c:	|  |         move.l 24(a0),d0
    f960:	|  |         move.l d1,-(sp)
    f962:	|  |         move.l d0,-(sp)
    f964:	|  |         jsr 13fc4 <addVarToStack>
    f96a:	|  |         addq.l #8,sp
    f96c:	|  |         tst.w d0
    f96e:	|  |     /-- bne.s f974 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f970:	|  |     |   moveq #1,d0
    f972:	+--|-----|-- bra.s f9c2 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f974:	|  |     \-> movea.l 8(sp),a0
    f978:	|  |         movea.l 24(a0),a0
    f97c:	|  |         movea.l 8(a0),a0
    f980:	|  |         movea.l 4(a0),a0
    f984:	|  |         movea.l 4(a0),a1
    f988:	|  |         movea.l 8(sp),a0
    f98c:	|  |         movea.l 24(a0),a0
    f990:	|  |         movea.l 8(a0),a0
    f994:	|  |         movea.l 4(a0),a0
    f998:	|  |         move.l 8(a1),d0
    f99c:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f9a0:	|  \-------> moveq #24,d0
    f9a2:	|            add.l 8(sp),d0
    f9a6:	|            move.l d0,-(sp)
    f9a8:	|            jsr 1510c <trimStack>
    f9ae:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f9b0:	|            moveq #24,d0
    f9b2:	|            add.l 8(sp),d0
    f9b6:	|            move.l d0,-(sp)
    f9b8:	|            jsr 1510c <trimStack>
    f9be:	|            addq.l #4,sp
	return BR_CONTINUE;
    f9c0:	|            moveq #2,d0
}
    f9c2:	\----------> rts

0000f9c4 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f9c4:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f9c6:	       movea.l 12(sp),a0
    f9ca:	       movea.l 24(a0),a0
    f9ce:	       movea.l 8(a0),a0
    f9d2:	       move.l (a0),d0
    f9d4:	       moveq #6,d1
    f9d6:	       cmp.l d0,d1
    f9d8:	   /-- beq.s f9ee <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f9da:	   |   pea 197df <PutChar+0x1b5b>
    f9e0:	   |   jsr 171b0 <KPrintF>
    f9e6:	   |   addq.l #4,sp
		return BR_ERROR;
    f9e8:	   |   moveq #1,d0
    f9ea:	/--|-- bra.w fa84 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f9ee:	|  \-> movea.l 12(sp),a0
    f9f2:	|      movea.l 24(a0),a0
    f9f6:	|      movea.l 8(a0),a0
    f9fa:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f9fe:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fa00:	|      movea.l 12(sp),a0
    fa04:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fa08:	|      clr.l -(sp)
    fa0a:	|      move.l d1,-(sp)
    fa0c:	|      move.l d0,-(sp)
    fa0e:	|      jsr 14364 <deleteVarFromStack>
    fa14:	|      lea 12(sp),sp
    fa18:	|      move.l d0,d1
    fa1a:	|      moveq #28,d0
    fa1c:	|      add.l 12(sp),d0
    fa20:	|      move.l d1,-(sp)
    fa22:	|      pea 1 <_start+0x1>
    fa26:	|      move.l d0,-(sp)
    fa28:	|      jsr 1507a <setVariable>
    fa2e:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fa32:	|      movea.l 12(sp),a0
    fa36:	|      movea.l 24(a0),a0
    fa3a:	|      movea.l 8(a0),a0
    fa3e:	|      movea.l 4(a0),a0
    fa42:	|      move.l (a0),d0
    fa44:	|      movea.l 12(sp),a0
    fa48:	|      movea.l 24(a0),a0
    fa4c:	|      movea.l 8(a0),a0
    fa50:	|      movea.l 4(a0),a2
    fa54:	|      move.l d0,-(sp)
    fa56:	|      jsr 150c4 <stackFindLast>
    fa5c:	|      addq.l #4,sp
    fa5e:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fa62:	|      moveq #24,d0
    fa64:	|      add.l 12(sp),d0
    fa68:	|      move.l d0,-(sp)
    fa6a:	|      jsr 1510c <trimStack>
    fa70:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fa72:	|      moveq #24,d0
    fa74:	|      add.l 12(sp),d0
    fa78:	|      move.l d0,-(sp)
    fa7a:	|      jsr 1510c <trimStack>
    fa80:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa82:	|      moveq #2,d0
}
    fa84:	\----> movea.l (sp)+,a2
    fa86:	       rts

0000fa88 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fa88:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa8a:	       movea.l 12(sp),a0
    fa8e:	       movea.l 24(a0),a0
    fa92:	       movea.l 8(a0),a0
    fa96:	       move.l (a0),d0
    fa98:	       moveq #6,d1
    fa9a:	       cmp.l d0,d1
    fa9c:	   /-- beq.s fab2 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fa9e:	   |   pea 197df <PutChar+0x1b5b>
    faa4:	   |   jsr 171b0 <KPrintF>
    faaa:	   |   addq.l #4,sp
		return BR_ERROR;
    faac:	   |   moveq #1,d0
    faae:	/--|-- bra.w fb4a <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fab2:	|  \-> movea.l 12(sp),a0
    fab6:	|      movea.l 24(a0),a0
    faba:	|      movea.l 8(a0),a0
    fabe:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fac2:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fac4:	|      movea.l 12(sp),a0
    fac8:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    facc:	|      pea 1 <_start+0x1>
    fad0:	|      move.l d1,-(sp)
    fad2:	|      move.l d0,-(sp)
    fad4:	|      jsr 14364 <deleteVarFromStack>
    fada:	|      lea 12(sp),sp
    fade:	|      move.l d0,d1
    fae0:	|      moveq #28,d0
    fae2:	|      add.l 12(sp),d0
    fae6:	|      move.l d1,-(sp)
    fae8:	|      pea 1 <_start+0x1>
    faec:	|      move.l d0,-(sp)
    faee:	|      jsr 1507a <setVariable>
    faf4:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    faf8:	|      movea.l 12(sp),a0
    fafc:	|      movea.l 24(a0),a0
    fb00:	|      movea.l 8(a0),a0
    fb04:	|      movea.l 4(a0),a0
    fb08:	|      move.l (a0),d0
    fb0a:	|      movea.l 12(sp),a0
    fb0e:	|      movea.l 24(a0),a0
    fb12:	|      movea.l 8(a0),a0
    fb16:	|      movea.l 4(a0),a2
    fb1a:	|      move.l d0,-(sp)
    fb1c:	|      jsr 150c4 <stackFindLast>
    fb22:	|      addq.l #4,sp
    fb24:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fb28:	|      moveq #24,d0
    fb2a:	|      add.l 12(sp),d0
    fb2e:	|      move.l d0,-(sp)
    fb30:	|      jsr 1510c <trimStack>
    fb36:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fb38:	|      moveq #24,d0
    fb3a:	|      add.l 12(sp),d0
    fb3e:	|      move.l d0,-(sp)
    fb40:	|      jsr 1510c <trimStack>
    fb46:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb48:	|      moveq #2,d0
}
    fb4a:	\----> movea.l (sp)+,a2
    fb4c:	       rts

0000fb4e <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fb4e:	       movea.l 8(sp),a0
    fb52:	       movea.l 24(a0),a0
    fb56:	       move.l (a0),d0
    fb58:	       moveq #6,d1
    fb5a:	       cmp.l d0,d1
    fb5c:	   /-- beq.s fb70 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fb5e:	   |   pea 197df <PutChar+0x1b5b>
    fb64:	   |   jsr 171b0 <KPrintF>
    fb6a:	   |   addq.l #4,sp
		return BR_ERROR;
    fb6c:	   |   moveq #1,d0
    fb6e:	/--|-- bra.s fbda <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fb70:	|  \-> movea.l 8(sp),a0
    fb74:	|      movea.l 24(a0),a0
    fb78:	|      movea.l 4(a0),a0
    fb7c:	|      move.l (a0),d0
    fb7e:	|  /-- bne.s fb92 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fb80:	|  |   pea 19810 <PutChar+0x1b8c>
    fb86:	|  |   jsr 171b0 <KPrintF>
    fb8c:	|  |   addq.l #4,sp
		return BR_ERROR;
    fb8e:	|  |   moveq #1,d0
    fb90:	+--|-- bra.s fbda <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fb92:	|  \-> moveq #28,d0
    fb94:	|      add.l 8(sp),d0
    fb98:	|      movea.l 8(sp),a0
    fb9c:	|      movea.l 24(a0),a0
    fba0:	|      movea.l 4(a0),a0
    fba4:	|      move.l (a0),d1
    fba6:	|      move.l d0,-(sp)
    fba8:	|      move.l d1,-(sp)
    fbaa:	|      jsr 14c42 <copyVariable>
    fbb0:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fbb2:	|      movea.l 8(sp),a0
    fbb6:	|      movea.l 24(a0),a0
    fbba:	|      move.l 4(a0),d0
    fbbe:	|      move.l d0,-(sp)
    fbc0:	|      jsr 1510c <trimStack>
    fbc6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fbc8:	|      moveq #24,d0
    fbca:	|      add.l 8(sp),d0
    fbce:	|      move.l d0,-(sp)
    fbd0:	|      jsr 1510c <trimStack>
    fbd6:	|      addq.l #4,sp
	return BR_CONTINUE;
    fbd8:	|      moveq #2,d0
}
    fbda:	\----> rts

0000fbdc <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fbdc:	       movea.l 8(sp),a0
    fbe0:	       movea.l 24(a0),a0
    fbe4:	       move.l (a0),d0
    fbe6:	       moveq #6,d1
    fbe8:	       cmp.l d0,d1
    fbea:	   /-- beq.s fbfe <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fbec:	   |   pea 197df <PutChar+0x1b5b>
    fbf2:	   |   jsr 171b0 <KPrintF>
    fbf8:	   |   addq.l #4,sp
		return BR_ERROR;
    fbfa:	   |   moveq #1,d0
    fbfc:	/--|-- bra.s fc52 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fbfe:	|  \-> movea.l 8(sp),a0
    fc02:	|      movea.l 24(a0),a0
    fc06:	|      movea.l 4(a0),a0
    fc0a:	|      move.l (a0),d0
    fc0c:	|  /-- bne.s fc20 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fc0e:	|  |   pea 19810 <PutChar+0x1b8c>
    fc14:	|  |   jsr 171b0 <KPrintF>
    fc1a:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc1c:	|  |   moveq #1,d0
    fc1e:	+--|-- bra.s fc52 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fc20:	|  \-> moveq #28,d0
    fc22:	|      add.l 8(sp),d0
    fc26:	|      movea.l 8(sp),a0
    fc2a:	|      movea.l 24(a0),a0
    fc2e:	|      movea.l 4(a0),a0
    fc32:	|      move.l (a0),d1
    fc34:	|      move.l d0,-(sp)
    fc36:	|      move.l d1,-(sp)
    fc38:	|      jsr 14c42 <copyVariable>
    fc3e:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fc40:	|      moveq #24,d0
    fc42:	|      add.l 8(sp),d0
    fc46:	|      move.l d0,-(sp)
    fc48:	|      jsr 1510c <trimStack>
    fc4e:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc50:	|      moveq #2,d0
}
    fc52:	\----> rts

0000fc54 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fc54:	       movea.l 8(sp),a0
    fc58:	       movea.l 24(a0),a0
    fc5c:	       move.l (a0),d0
    fc5e:	       moveq #6,d1
    fc60:	       cmp.l d0,d1
    fc62:	   /-- beq.s fc76 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fc64:	   |   pea 197df <PutChar+0x1b5b>
    fc6a:	   |   jsr 171b0 <KPrintF>
    fc70:	   |   addq.l #4,sp
		return BR_ERROR;
    fc72:	   |   moveq #1,d0
    fc74:	/--|-- bra.s fccc <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fc76:	|  \-> movea.l 8(sp),a0
    fc7a:	|      movea.l 24(a0),a0
    fc7e:	|      movea.l 4(a0),a0
    fc82:	|      move.l (a0),d0
    fc84:	|  /-- bne.s fc98 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fc86:	|  |   pea 19810 <PutChar+0x1b8c>
    fc8c:	|  |   jsr 171b0 <KPrintF>
    fc92:	|  |   addq.l #4,sp
		return BR_ERROR;
    fc94:	|  |   moveq #1,d0
    fc96:	+--|-- bra.s fccc <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fc98:	|  \-> moveq #28,d0
    fc9a:	|      add.l 8(sp),d0
    fc9e:	|      movea.l 8(sp),a0
    fca2:	|      movea.l 24(a0),a0
    fca6:	|      movea.l 4(a0),a0
    fcaa:	|      move.l 4(a0),d1
    fcae:	|      move.l d0,-(sp)
    fcb0:	|      move.l d1,-(sp)
    fcb2:	|      jsr 14c42 <copyVariable>
    fcb8:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fcba:	|      moveq #24,d0
    fcbc:	|      add.l 8(sp),d0
    fcc0:	|      move.l d0,-(sp)
    fcc2:	|      jsr 1510c <trimStack>
    fcc8:	|      addq.l #4,sp
	return BR_CONTINUE;
    fcca:	|      moveq #2,d0
}
    fccc:	\----> rts

0000fcce <builtIn_random>:

builtIn(random)
{
    fcce:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fcd0:	       movea.l 12(sp),a0
    fcd4:	       move.l 24(a0),d0
    fcd8:	       move.l d0,-(sp)
    fcda:	       pea 1 <_start+0x1>
    fcde:	       move.l sp,d0
    fce0:	       addq.l #8,d0
    fce2:	       move.l d0,-(sp)
    fce4:	       jsr 14788 <getValueType>
    fcea:	       lea 12(sp),sp
    fcee:	       tst.w d0
    fcf0:	   /-- bne.s fcf6 <builtIn_random+0x28>
		return BR_ERROR;
    fcf2:	   |   moveq #1,d0
    fcf4:	/--|-- bra.s fd40 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fcf6:	|  \-> moveq #24,d0
    fcf8:	|      add.l 12(sp),d0
    fcfc:	|      move.l d0,-(sp)
    fcfe:	|      jsr 1510c <trimStack>
    fd04:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fd06:	|      move.l (sp),d0
    fd08:	|  /-- bgt.s fd0e <builtIn_random+0x40>
    fd0a:	|  |   moveq #1,d0
    fd0c:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fd0e:	|  \-> jsr 15db0 <rand>
    fd14:	|      move.l d0,d1
    fd16:	|      move.l (sp),d0
    fd18:	|      move.l d0,-(sp)
    fd1a:	|      move.l d1,-(sp)
    fd1c:	|      jsr 17c48 <__umodsi3>
    fd22:	|      addq.l #8,sp
    fd24:	|      move.l d0,d1
    fd26:	|      moveq #28,d0
    fd28:	|      add.l 12(sp),d0
    fd2c:	|      move.l d1,-(sp)
    fd2e:	|      pea 1 <_start+0x1>
    fd32:	|      move.l d0,-(sp)
    fd34:	|      jsr 1507a <setVariable>
    fd3a:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd3e:	|      moveq #2,d0
}
    fd40:	\----> addq.l #4,sp
    fd42:	       rts

0000fd44 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fd44:	nop
    fd46:	rts

0000fd48 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fd48:	moveq #2,d0
}
    fd4a:	rts

0000fd4c <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fd4c:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fd4e:	       movea.l 12(sp),a0
    fd52:	       move.l 24(a0),d0
    fd56:	       move.l d0,-(sp)
    fd58:	       pea 1 <_start+0x1>
    fd5c:	       move.l sp,d0
    fd5e:	       addq.l #8,d0
    fd60:	       move.l d0,-(sp)
    fd62:	       jsr 14788 <getValueType>
    fd68:	       lea 12(sp),sp
    fd6c:	       tst.w d0
    fd6e:	   /-- bne.s fd82 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fd70:	   |   pea 19823 <PutChar+0x1b9f>
    fd76:	   |   jsr 171b0 <KPrintF>
    fd7c:	   |   addq.l #4,sp
		return BR_ERROR;
    fd7e:	   |   moveq #1,d0
    fd80:	/--|-- bra.s fdc2 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fd82:	|  \-> moveq #24,d0
    fd84:	|      add.l 12(sp),d0
    fd88:	|      move.l d0,-(sp)
    fd8a:	|      jsr 1510c <trimStack>
    fd90:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fd92:	|      move.l (sp),d0
    fd94:	|      move.l d0,d0
    fd96:	|      move.w d0,1c7b0 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fd9c:	|      move.w 1c7b0 <textPaletteIndex>,d0
    fda2:	|      cmpi.w #31,d0
    fda6:	|  /-- bls.s fdc0 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fda8:	|  |   pea 1984a <PutChar+0x1bc6>
    fdae:	|  |   jsr 171b0 <KPrintF>
    fdb4:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fdb6:	|  |   clr.w 1c7b0 <textPaletteIndex>
		return BR_ERROR;
    fdbc:	|  |   moveq #1,d0
    fdbe:	+--|-- bra.s fdc2 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fdc0:	|  \-> moveq #2,d0
}
    fdc2:	\----> addq.l #4,sp
    fdc4:	       rts

0000fdc6 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fdc6:	moveq #2,d0
}
    fdc8:	rts

0000fdca <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fdca:	moveq #2,d0
}
    fdcc:	rts

0000fdce <builtIn_setFont>:


builtIn(setFont)
{
    fdce:	       lea -16(sp),sp
    fdd2:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fdd4:	       movea.l 28(sp),a0
    fdd8:	       move.l 24(a0),d0
    fddc:	       move.l d0,-(sp)
    fdde:	       pea 1 <_start+0x1>
    fde2:	       lea 12(sp),a0
    fde6:	       move.l a0,-(sp)
    fde8:	       jsr 14788 <getValueType>
    fdee:	       lea 12(sp),sp
    fdf2:	       tst.w d0
    fdf4:	   /-- bne.s fdfc <builtIn_setFont+0x2e>
    fdf6:	   |   moveq #1,d0
    fdf8:	/--|-- bra.w feaa <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fdfc:	|  \-> moveq #24,d0
    fdfe:	|      add.l 28(sp),d0
    fe02:	|      move.l d0,-(sp)
    fe04:	|      jsr 1510c <trimStack>
    fe0a:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fe0c:	|      movea.l 28(sp),a0
    fe10:	|      move.l 24(a0),d0
    fe14:	|      move.l d0,-(sp)
    fe16:	|      jsr 14d5e <getTextFromAnyVar>
    fe1c:	|      addq.l #4,sp
    fe1e:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fe22:	|  /-- bne.s fe2a <builtIn_setFont+0x5c>
    fe24:	|  |   moveq #1,d0
    fe26:	+--|-- bra.w feaa <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fe2a:	|  \-> moveq #24,d0
    fe2c:	|      add.l 28(sp),d0
    fe30:	|      move.l d0,-(sp)
    fe32:	|      jsr 1510c <trimStack>
    fe38:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fe3a:	|      movea.l 28(sp),a0
    fe3e:	|      move.l 24(a0),d0
    fe42:	|      move.l d0,-(sp)
    fe44:	|      pea 5 <_start+0x5>
    fe48:	|      lea 16(sp),a0
    fe4c:	|      move.l a0,-(sp)
    fe4e:	|      jsr 14788 <getValueType>
    fe54:	|      lea 12(sp),sp
    fe58:	|      tst.w d0
    fe5a:	|  /-- bne.s fe60 <builtIn_setFont+0x92>
    fe5c:	|  |   moveq #1,d0
    fe5e:	+--|-- bra.s feaa <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fe60:	|  \-> moveq #24,d0
    fe62:	|      add.l 28(sp),d0
    fe66:	|      move.l d0,-(sp)
    fe68:	|      jsr 1510c <trimStack>
    fe6e:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fe70:	|      move.l 4(sp),d1
    fe74:	|      move.l 8(sp),d0
    fe78:	|      move.l d1,-(sp)
    fe7a:	|      move.l 20(sp),-(sp)
    fe7e:	|      move.l d0,-(sp)
    fe80:	|      jsr 15594 <loadFont>
    fe86:	|      lea 12(sp),sp
    fe8a:	|      tst.w d0
    fe8c:	|  /-- bne.s fe92 <builtIn_setFont+0xc4>
    fe8e:	|  |   moveq #1,d0
    fe90:	+--|-- bra.s feaa <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fe92:	|  \-> move.l 16(sp),12(sp)
    fe98:	|      move.l 1c896 <SysBase>,d0
    fe9e:	|      movea.l d0,a6
    fea0:	|      movea.l 12(sp),a1
    fea4:	|      jsr -690(a6)

    return BR_CONTINUE;
    fea8:	|      moveq #2,d0
}
    feaa:	\----> movea.l (sp)+,a6
    feac:	       lea 16(sp),sp
    feb0:	       rts

0000feb2 <builtIn_inFont>:

builtIn(inFont)
{
    feb2:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    feb4:	       movea.l 12(sp),a0
    feb8:	       move.l 24(a0),d0
    febc:	       move.l d0,-(sp)
    febe:	       jsr 14d5e <getTextFromAnyVar>
    fec4:	       addq.l #4,sp
    fec6:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fec8:	   /-- bne.s fece <builtIn_inFont+0x1c>
    feca:	   |   moveq #1,d0
    fecc:	/--|-- bra.s ff04 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fece:	|  \-> moveq #24,d0
    fed0:	|      add.l 12(sp),d0
    fed4:	|      move.l d0,-(sp)
    fed6:	|      jsr 1510c <trimStack>
    fedc:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fede:	|      move.l (sp),-(sp)
    fee0:	|      jsr 15582 <isInFont>
    fee6:	|      addq.l #4,sp
    fee8:	|      movea.w d0,a0
    feea:	|      moveq #28,d0
    feec:	|      add.l 12(sp),d0
    fef0:	|      move.l a0,-(sp)
    fef2:	|      pea 1 <_start+0x1>
    fef6:	|      move.l d0,-(sp)
    fef8:	|      jsr 1507a <setVariable>
    fefe:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ff02:	|      moveq #2,d0
}
    ff04:	\----> addq.l #4,sp
    ff06:	       rts

0000ff08 <builtIn_pasteString>:

builtIn(pasteString)
{
    ff08:	       lea -16(sp),sp
    ff0c:	       move.l a6,-(sp)
    ff0e:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ff10:	       movea.l 32(sp),a0
    ff14:	       move.l 24(a0),d0
    ff18:	       move.l d0,-(sp)
    ff1a:	       jsr 14d5e <getTextFromAnyVar>
    ff20:	       addq.l #4,sp
    ff22:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    ff26:	       moveq #24,d0
    ff28:	       add.l 32(sp),d0
    ff2c:	       move.l d0,-(sp)
    ff2e:	       jsr 1510c <trimStack>
    ff34:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff36:	       movea.l 32(sp),a0
    ff3a:	       move.l 24(a0),d0
    ff3e:	       move.l d0,-(sp)
    ff40:	       pea 1 <_start+0x1>
    ff44:	       lea 20(sp),a0
    ff48:	       move.l a0,-(sp)
    ff4a:	       jsr 14788 <getValueType>
    ff50:	       lea 12(sp),sp
    ff54:	       tst.w d0
    ff56:	   /-- bne.s ff5e <builtIn_pasteString+0x56>
    ff58:	   |   moveq #1,d0
    ff5a:	/--|-- bra.w 10000 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ff5e:	|  \-> moveq #24,d0
    ff60:	|      add.l 32(sp),d0
    ff64:	|      move.l d0,-(sp)
    ff66:	|      jsr 1510c <trimStack>
    ff6c:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff6e:	|      movea.l 32(sp),a0
    ff72:	|      move.l 24(a0),d0
    ff76:	|      move.l d0,-(sp)
    ff78:	|      pea 1 <_start+0x1>
    ff7c:	|      lea 16(sp),a0
    ff80:	|      move.l a0,-(sp)
    ff82:	|      jsr 14788 <getValueType>
    ff88:	|      lea 12(sp),sp
    ff8c:	|      tst.w d0
    ff8e:	|  /-- bne.s ff94 <builtIn_pasteString+0x8c>
    ff90:	|  |   moveq #1,d0
    ff92:	+--|-- bra.s 10000 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    ff94:	|  \-> moveq #24,d0
    ff96:	|      add.l 32(sp),d0
    ff9a:	|      move.l d0,-(sp)
    ff9c:	|      jsr 1510c <trimStack>
    ffa2:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    ffa4:	|      move.l 8(sp),d0
    ffa8:	|      cmpi.l #65535,d0
    ffae:	|  /-- bne.s ffce <builtIn_pasteString+0xc6>
    ffb0:	|  |   move.l 1c7ea <winWidth>,d2
    ffb6:	|  |   move.l 20(sp),-(sp)
    ffba:	|  |   jsr 15872 <stringWidth>
    ffc0:	|  |   addq.l #4,sp
    ffc2:	|  |   move.l d2,d1
    ffc4:	|  |   sub.l d0,d1
    ffc6:	|  |   move.l d1,d0
    ffc8:	|  |   lsr.l #1,d0
    ffca:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    ffce:	|  \-> move.l 12(sp),d1
    ffd2:	|      move.l 8(sp),d0
    ffd6:	|      move.l d1,-(sp)
    ffd8:	|      move.l d0,-(sp)
    ffda:	|      move.l 28(sp),-(sp)
    ffde:	|      jsr 15794 <pasteStringToBackdrop>
    ffe4:	|      lea 12(sp),sp
    FreeVec(newText); 
    ffe8:	|      move.l 20(sp),16(sp)
    ffee:	|      move.l 1c896 <SysBase>,d0
    fff4:	|      movea.l d0,a6
    fff6:	|      movea.l 16(sp),a1
    fffa:	|      jsr -690(a6)
    return BR_CONTINUE;
    fffe:	|      moveq #2,d0
}
   10000:	\----> move.l (sp)+,d2
   10002:	       movea.l (sp)+,a6
   10004:	       lea 16(sp),sp
   10008:	       rts

0001000a <builtIn_anim>:

builtIn(anim)
{
   1000a:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   1000e:	       moveq #1,d0
   10010:	       cmp.l 16(sp),d0
   10014:	   /-- blt.s 1002a <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10016:	   |   pea 19874 <PutChar+0x1bf0>
   1001c:	   |   jsr 171b0 <KPrintF>
   10022:	   |   addq.l #4,sp
		return BR_ERROR;
   10024:	   |   moveq #1,d0
   10026:	/--|-- bra.w 100b8 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   1002a:	|  \-> moveq #24,d1
   1002c:	|      add.l 20(sp),d1
   10030:	|      move.l 16(sp),d0
   10034:	|      subq.l #1,d0
   10036:	|      move.l d1,-(sp)
   10038:	|      move.l d0,-(sp)
   1003a:	|      jsr 973c <createPersonaAnim>
   10040:	|      addq.l #8,sp
   10042:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10046:	|      movea.l 20(sp),a0
   1004a:	|      move.l 24(a0),d0
   1004e:	|      move.l d0,-(sp)
   10050:	|      pea 5 <_start+0x5>
   10054:	|      lea 8(sp),a0
   10058:	|      move.l a0,-(sp)
   1005a:	|      jsr 14788 <getValueType>
   10060:	|      lea 12(sp),sp
   10064:	|      tst.w d0
   10066:	|  /-- bne.s 1006c <builtIn_anim+0x62>
   10068:	|  |   moveq #1,d0
   1006a:	+--|-- bra.s 100b8 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   1006c:	|  \-> moveq #24,d0
   1006e:	|      add.l 20(sp),d0
   10072:	|      move.l d0,-(sp)
   10074:	|      jsr 1510c <trimStack>
   1007a:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   1007c:	|      move.l (sp),d0
   1007e:	|      move.l d0,-(sp)
   10080:	|      jsr 15f12 <loadBankForAnim>
   10086:	|      addq.l #4,sp
   10088:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   1008c:	|  /-- bne.s 10092 <builtIn_anim+0x88>
   1008e:	|  |   moveq #1,d0
   10090:	+--|-- bra.s 100b8 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   10092:	|  \-> move.l 4(sp),-(sp)
   10096:	|      move.l 12(sp),-(sp)
   1009a:	|      jsr b5e6 <setBankFile>
   100a0:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   100a2:	|      moveq #28,d0
   100a4:	|      add.l 20(sp),d0
   100a8:	|      move.l 8(sp),-(sp)
   100ac:	|      move.l d0,-(sp)
   100ae:	|      jsr 15036 <newAnimationVariable>
   100b4:	|      addq.l #8,sp
	return BR_CONTINUE;
   100b6:	|      moveq #2,d0
}
   100b8:	\----> lea 12(sp),sp
   100bc:	       rts

000100be <builtIn_costume>:

builtIn(costume)
{
   100be:	          lea -32(sp),sp
   100c2:	          move.l a6,-(sp)
   100c4:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   100c6:	          moveq #8,d0
   100c8:	          move.l d0,32(sp)
   100cc:	          clr.l 28(sp)
   100d0:	          move.l 1c896 <SysBase>,d0
   100d6:	          movea.l d0,a6
   100d8:	          move.l 32(sp),d0
   100dc:	          move.l 28(sp),d1
   100e0:	          jsr -684(a6)
   100e4:	          move.l d0,24(sp)
   100e8:	          move.l 24(sp),d0
   100ec:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   100f0:	      /-- bne.s 100f8 <builtIn_costume+0x3a>
   100f2:	      |   moveq #1,d0
   100f4:	/-----|-- bra.w 101e0 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   100f8:	|     \-> move.l 44(sp),d0
   100fc:	|         pea 3 <_start+0x3>
   10100:	|         move.l d0,-(sp)
   10102:	|         jsr 17bec <__divsi3>
   10108:	|         addq.l #8,sp
   1010a:	|         movea.l 20(sp),a0
   1010e:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10112:	|         tst.l 44(sp)
   10116:	|     /-- beq.s 1012c <builtIn_costume+0x6e>
   10118:	|     |   movea.l 20(sp),a0
   1011c:	|     |   move.l 4(a0),d1
   10120:	|     |   move.l d1,d0
   10122:	|     |   add.l d0,d0
   10124:	|     |   add.l d1,d0
   10126:	|     |   cmp.l 44(sp),d0
   1012a:	|  /--|-- beq.s 10140 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   1012c:	|  |  \-> pea 198ae <PutChar+0x1c2a>
   10132:	|  |      jsr 171b0 <KPrintF>
   10138:	|  |      addq.l #4,sp
        return BR_ERROR;
   1013a:	|  |      moveq #1,d0
   1013c:	+--|----- bra.w 101e0 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10140:	|  \----> move.l 44(sp),d0
   10144:	|         add.l d0,d0
   10146:	|         add.l d0,d0
   10148:	|         move.l d0,16(sp)
   1014c:	|         clr.l 12(sp)
   10150:	|         move.l 1c896 <SysBase>,d0
   10156:	|         movea.l d0,a6
   10158:	|         move.l 16(sp),d0
   1015c:	|         move.l 12(sp),d1
   10160:	|         jsr -684(a6)
   10164:	|         move.l d0,8(sp)
   10168:	|         move.l 8(sp),d0
   1016c:	|         movea.l 20(sp),a0
   10170:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10172:	|         movea.l 20(sp),a0
   10176:	|         move.l (a0),d0
   10178:	|     /-- bne.s 1017e <builtIn_costume+0xc0>
   1017a:	|     |   moveq #1,d0
   1017c:	+-----|-- bra.s 101e0 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   1017e:	|     \-> move.l 44(sp),d0
   10182:	|         subq.l #1,d0
   10184:	|         move.l d0,36(sp)
   10188:	|     /-- bra.s 101c4 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   1018a:	|  /--|-> movea.l 48(sp),a0
   1018e:	|  |  |   move.l 24(a0),d0
   10192:	|  |  |   movea.l 20(sp),a0
   10196:	|  |  |   movea.l (a0),a0
   10198:	|  |  |   move.l 36(sp),d1
   1019c:	|  |  |   add.l d1,d1
   1019e:	|  |  |   add.l d1,d1
   101a0:	|  |  |   lea (0,a0,d1.l),a2
   101a4:	|  |  |   move.l d0,-(sp)
   101a6:	|  |  |   jsr 14c60 <getAnimationFromVar>
   101ac:	|  |  |   addq.l #4,sp
   101ae:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   101b0:	|  |  |   moveq #24,d0
   101b2:	|  |  |   add.l 48(sp),d0
   101b6:	|  |  |   move.l d0,-(sp)
   101b8:	|  |  |   jsr 1510c <trimStack>
   101be:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   101c0:	|  |  |   subq.l #1,36(sp)
   101c4:	|  |  \-> tst.l 36(sp)
   101c8:	|  \----- bge.s 1018a <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   101ca:	|         moveq #28,d0
   101cc:	|         add.l 48(sp),d0
   101d0:	|         move.l 20(sp),-(sp)
   101d4:	|         move.l d0,-(sp)
   101d6:	|         jsr 15058 <newCostumeVariable>
   101dc:	|         addq.l #8,sp
    return BR_CONTINUE;
   101de:	|         moveq #2,d0
}
   101e0:	\-------> movea.l (sp)+,a2
   101e2:	          movea.l (sp)+,a6
   101e4:	          lea 32(sp),sp
   101e8:	          rts

000101ea <builtIn_launch>:

builtIn(launch)
{
   101ea:	          lea -20(sp),sp
   101ee:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   101f0:	          movea.l 32(sp),a0
   101f4:	          move.l 24(a0),d0
   101f8:	          move.l d0,-(sp)
   101fa:	          jsr 14d5e <getTextFromAnyVar>
   10200:	          addq.l #4,sp
   10202:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10206:	      /-- bne.s 1020e <builtIn_launch+0x24>
   10208:	      |   moveq #1,d0
   1020a:	/-----|-- bra.w 1033c <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   1020e:	|     \-> move.l 20(sp),-(sp)
   10212:	|         jsr 2fe <encodeFilename>
   10218:	|         addq.l #4,sp
   1021a:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   1021e:	|         moveq #24,d0
   10220:	|         add.l 32(sp),d0
   10224:	|         move.l d0,-(sp)
   10226:	|         jsr 1510c <trimStack>
   1022c:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   1022e:	|         movea.l 20(sp),a0
   10232:	|         move.b (a0),d0
   10234:	|         cmpi.b #104,d0
   10238:	|  /----- bne.s 102a2 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   1023a:	|  |      movea.l 20(sp),a0
   1023e:	|  |      addq.l #1,a0
   10240:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10242:	|  |      cmpi.b #116,d0
   10246:	|  +----- bne.s 102a2 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   10248:	|  |      movea.l 20(sp),a0
   1024c:	|  |      addq.l #2,a0
   1024e:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   10250:	|  |      cmpi.b #116,d0
   10254:	|  +----- bne.s 102a2 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   10256:	|  |      movea.l 20(sp),a0
   1025a:	|  |      addq.l #3,a0
   1025c:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   1025e:	|  |      cmpi.b #112,d0
   10262:	|  +----- bne.s 102a2 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10264:	|  |      movea.l 20(sp),a0
   10268:	|  |      addq.l #4,a0
   1026a:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   1026c:	|  |      cmpi.b #58,d0
   10270:	|  |  /-- beq.s 1028e <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10272:	|  |  |   movea.l 20(sp),a0
   10276:	|  |  |   addq.l #4,a0
   10278:	|  |  |   move.b (a0),d0
   1027a:	|  |  |   cmpi.b #115,d0
   1027e:	|  +--|-- bne.s 102a2 <builtIn_launch+0xb8>
   10280:	|  |  |   movea.l 20(sp),a0
   10284:	|  |  |   addq.l #5,a0
   10286:	|  |  |   move.b (a0),d0
   10288:	|  |  |   cmpi.b #58,d0
   1028c:	|  +--|-- bne.s 102a2 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   1028e:	|  |  \-> move.l 20(sp),-(sp)
   10292:	|  |      jsr b8 <copyString>
   10298:	|  |      addq.l #4,sp
   1029a:	|  |      move.l d0,1c958 <launchMe>
   102a0:	|  |  /-- bra.s 102f4 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   102a2:	|  \--|-> move.l 1c7fe <gamePath>,d0
   102a8:	|     |   pea 198f9 <PutChar+0x1c75>
   102ae:	|     |   move.l d0,-(sp)
   102b0:	|     |   jsr 13cb4 <joinStrings>
   102b6:	|     |   addq.l #8,sp
   102b8:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   102bc:	|     |   move.l 16(sp),-(sp)
   102c0:	|     |   move.l 16(sp),-(sp)
   102c4:	|     |   jsr 13cb4 <joinStrings>
   102ca:	|     |   addq.l #8,sp
   102cc:	|     |   move.l d0,1c958 <launchMe>
        FreeVec(newText);
   102d2:	|     |   move.l 16(sp),8(sp)
   102d8:	|     |   move.l 1c896 <SysBase>,d0
   102de:	|     |   movea.l d0,a6
   102e0:	|     |   movea.l 8(sp),a1
   102e4:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   102e8:	|     |   move.l 1c958 <launchMe>,d0
   102ee:	|     +-- bne.s 102f4 <builtIn_launch+0x10a>
   102f0:	|     |   moveq #1,d0
   102f2:	+-----|-- bra.s 1033c <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   102f4:	|     \-> move.l 20(sp),4(sp)
   102fa:	|         move.l 1c896 <SysBase>,d0
   10300:	|         movea.l d0,a6
   10302:	|         movea.l 4(sp),a1
   10306:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   1030a:	|         clr.l -(sp)
   1030c:	|         jsr 4192 <setGraphicsWindow>
   10312:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10314:	|         moveq #28,d0
   10316:	|         add.l 32(sp),d0
   1031a:	|         pea 1 <_start+0x1>
   1031e:	|         pea 1 <_start+0x1>
   10322:	|         move.l d0,-(sp)
   10324:	|         jsr 1507a <setVariable>
   1032a:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   1032e:	|         moveq #28,d0
   10330:	|         add.l 32(sp),d0
   10334:	|         move.l d0,1c95c <launchResult>

    return BR_KEEP_AND_PAUSE;
   1033a:	|         moveq #0,d0
}
   1033c:	\-------> movea.l (sp)+,a6
   1033e:	          lea 20(sp),sp
   10342:	          rts

00010344 <builtIn_pause>:

builtIn(pause)
{
   10344:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10346:	       movea.l 12(sp),a0
   1034a:	       move.l 24(a0),d0
   1034e:	       move.l d0,-(sp)
   10350:	       pea 1 <_start+0x1>
   10354:	       move.l sp,d0
   10356:	       addq.l #8,d0
   10358:	       move.l d0,-(sp)
   1035a:	       jsr 14788 <getValueType>
   10360:	       lea 12(sp),sp
   10364:	       tst.w d0
   10366:	   /-- bne.s 1036c <builtIn_pause+0x28>
   10368:	   |   moveq #1,d0
   1036a:	/--|-- bra.s 1039a <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   1036c:	|  \-> moveq #24,d0
   1036e:	|      add.l 12(sp),d0
   10372:	|      move.l d0,-(sp)
   10374:	|      jsr 1510c <trimStack>
   1037a:	|      addq.l #4,sp
	if (theTime > 0) {
   1037c:	|      move.l (sp),d0
   1037e:	|  /-- ble.s 10398 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   10380:	|  |   move.l (sp),d0
   10382:	|  |   subq.l #1,d0
   10384:	|  |   movea.l 12(sp),a0
   10388:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   1038c:	|  |   movea.l 12(sp),a0
   10390:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10394:	|  |   moveq #0,d0
   10396:	+--|-- bra.s 1039a <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10398:	|  \-> moveq #2,d0
}
   1039a:	\----> addq.l #4,sp
   1039c:	       rts

0001039e <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   1039e:	jsr 48f4 <completeTimers>
	return BR_CONTINUE;
   103a4:	moveq #2,d0
}
   103a6:	rts

000103a8 <builtIn_callEvent>:

builtIn(callEvent)
{
   103a8:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103ac:	       movea.l 20(sp),a0
   103b0:	       move.l 24(a0),d0
   103b4:	       move.l d0,-(sp)
   103b6:	       pea 7 <_start+0x7>
   103ba:	       lea 8(sp),a0
   103be:	       move.l a0,-(sp)
   103c0:	       jsr 14788 <getValueType>
   103c6:	       lea 12(sp),sp
   103ca:	       tst.w d0
   103cc:	   /-- bne.s 103d4 <builtIn_callEvent+0x2c>
   103ce:	   |   moveq #1,d0
   103d0:	/--|-- bra.w 1046a <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   103d4:	|  \-> moveq #24,d0
   103d6:	|      add.l 20(sp),d0
   103da:	|      move.l d0,-(sp)
   103dc:	|      jsr 1510c <trimStack>
   103e2:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   103e4:	|      movea.l 20(sp),a0
   103e8:	|      move.l 24(a0),d0
   103ec:	|      move.l d0,-(sp)
   103ee:	|      pea 7 <_start+0x7>
   103f2:	|      moveq #12,d0
   103f4:	|      add.l sp,d0
   103f6:	|      move.l d0,-(sp)
   103f8:	|      jsr 14788 <getValueType>
   103fe:	|      lea 12(sp),sp
   10402:	|      tst.w d0
   10404:	|  /-- bne.s 1040a <builtIn_callEvent+0x62>
   10406:	|  |   moveq #1,d0
   10408:	+--|-- bra.s 1046a <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1040a:	|  \-> moveq #24,d0
   1040c:	|      add.l 20(sp),d0
   10410:	|      move.l d0,-(sp)
   10412:	|      jsr 1510c <trimStack>
   10418:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1041a:	|      move.l (sp),d1
   1041c:	|      move.l 4(sp),d0
   10420:	|      move.l d1,-(sp)
   10422:	|      move.l d0,-(sp)
   10424:	|      jsr d526 <getCombinationFunction>
   1042a:	|      addq.l #8,sp
   1042c:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   10430:	|  /-- beq.s 10450 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   10432:	|  |   moveq #28,d0
   10434:	|  |   add.l 20(sp),d0
   10438:	|  |   move.l 8(sp),-(sp)
   1043c:	|  |   pea 2 <_start+0x2>
   10440:	|  |   move.l d0,-(sp)
   10442:	|  |   jsr 1507a <setVariable>
   10448:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   1044c:	|  |   moveq #4,d0
   1044e:	+--|-- bra.s 1046a <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   10450:	|  \-> moveq #28,d0
   10452:	|      add.l 20(sp),d0
   10456:	|      clr.l -(sp)
   10458:	|      pea 1 <_start+0x1>
   1045c:	|      move.l d0,-(sp)
   1045e:	|      jsr 1507a <setVariable>
   10464:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10468:	|      moveq #2,d0
}
   1046a:	\----> lea 12(sp),sp
   1046e:	       rts

00010470 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   10470:	move.w #1,1c968 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   10478:	moveq #2,d0
}
   1047a:	rts

0001047c <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1047c:	moveq #24,d0
   1047e:	add.l 8(sp),d0
   10482:	move.l d0,-(sp)
   10484:	jsr 1510c <trimStack>
   1048a:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   1048c:	pea 198fb <PutChar+0x1c77>
   10492:	jsr 171b0 <KPrintF>
   10498:	addq.l #4,sp
	return BR_CONTINUE;
   1049a:	moveq #2,d0
}
   1049c:	rts

0001049e <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   1049e:	pea 198fb <PutChar+0x1c77>
   104a4:	jsr 171b0 <KPrintF>
   104aa:	addq.l #4,sp
	return BR_CONTINUE;
   104ac:	moveq #2,d0
}
   104ae:	rts

000104b0 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   104b0:	pea 198fb <PutChar+0x1c77>
   104b6:	jsr 171b0 <KPrintF>
   104bc:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   104be:	moveq #2,d0
}
   104c0:	rts

000104c2 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   104c2:	pea 198fb <PutChar+0x1c77>
   104c8:	jsr 171b0 <KPrintF>
   104ce:	addq.l #4,sp
	return BR_CONTINUE;
   104d0:	moveq #2,d0
}
   104d2:	rts

000104d4 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   104d4:	pea 198fb <PutChar+0x1c77>
   104da:	jsr 171b0 <KPrintF>
   104e0:	addq.l #4,sp
	return BR_CONTINUE;
   104e2:	moveq #2,d0
}
   104e4:	rts

000104e6 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   104e6:	pea 198fb <PutChar+0x1c77>
   104ec:	jsr 171b0 <KPrintF>
   104f2:	addq.l #4,sp
	return BR_CONTINUE;
   104f4:	moveq #2,d0
}
   104f6:	rts

000104f8 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   104f8:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104fc:	       movea.l 20(sp),a0
   10500:	       move.l 24(a0),d0
   10504:	       move.l d0,-(sp)
   10506:	       pea 1 <_start+0x1>
   1050a:	       moveq #16,d0
   1050c:	       add.l sp,d0
   1050e:	       move.l d0,-(sp)
   10510:	       jsr 14788 <getValueType>
   10516:	       lea 12(sp),sp
   1051a:	       tst.w d0
   1051c:	   /-- bne.s 10524 <builtIn_startMusic+0x2c>
   1051e:	   |   moveq #1,d0
   10520:	/--|-- bra.w 105c4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10524:	|  \-> moveq #24,d0
   10526:	|      add.l 20(sp),d0
   1052a:	|      move.l d0,-(sp)
   1052c:	|      jsr 1510c <trimStack>
   10532:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10534:	|      movea.l 20(sp),a0
   10538:	|      move.l 24(a0),d0
   1053c:	|      move.l d0,-(sp)
   1053e:	|      pea 1 <_start+0x1>
   10542:	|      moveq #12,d0
   10544:	|      add.l sp,d0
   10546:	|      move.l d0,-(sp)
   10548:	|      jsr 14788 <getValueType>
   1054e:	|      lea 12(sp),sp
   10552:	|      tst.w d0
   10554:	|  /-- bne.s 1055a <builtIn_startMusic+0x62>
   10556:	|  |   moveq #1,d0
   10558:	+--|-- bra.s 105c4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1055a:	|  \-> moveq #24,d0
   1055c:	|      add.l 20(sp),d0
   10560:	|      move.l d0,-(sp)
   10562:	|      jsr 1510c <trimStack>
   10568:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1056a:	|      movea.l 20(sp),a0
   1056e:	|      move.l 24(a0),d0
   10572:	|      move.l d0,-(sp)
   10574:	|      pea 5 <_start+0x5>
   10578:	|      lea 8(sp),a0
   1057c:	|      move.l a0,-(sp)
   1057e:	|      jsr 14788 <getValueType>
   10584:	|      lea 12(sp),sp
   10588:	|      tst.w d0
   1058a:	|  /-- bne.s 10590 <builtIn_startMusic+0x98>
   1058c:	|  |   moveq #1,d0
   1058e:	+--|-- bra.s 105c4 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10590:	|  \-> moveq #24,d0
   10592:	|      add.l 20(sp),d0
   10596:	|      move.l d0,-(sp)
   10598:	|      jsr 1510c <trimStack>
   1059e:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   105a0:	|      movea.l 8(sp),a0
   105a4:	|      move.l 4(sp),d1
   105a8:	|      move.l (sp),d0
   105aa:	|      move.l a0,-(sp)
   105ac:	|      move.l d1,-(sp)
   105ae:	|      move.l d0,-(sp)
   105b0:	|      jsr d132 <playMOD>
   105b6:	|      lea 12(sp),sp
   105ba:	|      tst.w d0
   105bc:	|  /-- bne.s 105c2 <builtIn_startMusic+0xca>
   105be:	|  |   moveq #2,d0
   105c0:	+--|-- bra.s 105c4 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   105c2:	|  \-> moveq #2,d0
}
   105c4:	\----> lea 12(sp),sp
   105c8:	       rts

000105ca <builtIn_stopMusic>:

builtIn(stopMusic)
{
   105ca:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105cc:	       movea.l 12(sp),a0
   105d0:	       move.l 24(a0),d0
   105d4:	       move.l d0,-(sp)
   105d6:	       pea 1 <_start+0x1>
   105da:	       move.l sp,d0
   105dc:	       addq.l #8,d0
   105de:	       move.l d0,-(sp)
   105e0:	       jsr 14788 <getValueType>
   105e6:	       lea 12(sp),sp
   105ea:	       tst.w d0
   105ec:	   /-- bne.s 105f2 <builtIn_stopMusic+0x28>
   105ee:	   |   moveq #1,d0
   105f0:	/--|-- bra.s 10610 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   105f2:	|  \-> moveq #24,d0
   105f4:	|      add.l 12(sp),d0
   105f8:	|      move.l d0,-(sp)
   105fa:	|      jsr 1510c <trimStack>
   10600:	|      addq.l #4,sp
	stopMOD (v);
   10602:	|      move.l (sp),d0
   10604:	|      move.l d0,-(sp)
   10606:	|      jsr d1ce <stopMOD>
   1060c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1060e:	|      moveq #2,d0
}
   10610:	\----> addq.l #4,sp
   10612:	       rts

00010614 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10614:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10616:	       movea.l 16(sp),a0
   1061a:	       move.l 24(a0),d0
   1061e:	       move.l d0,-(sp)
   10620:	       pea 1 <_start+0x1>
   10624:	       move.l sp,d0
   10626:	       addq.l #8,d0
   10628:	       move.l d0,-(sp)
   1062a:	       jsr 14788 <getValueType>
   10630:	       lea 12(sp),sp
   10634:	       tst.w d0
   10636:	   /-- bne.s 1063c <builtIn_setMusicVolume+0x28>
   10638:	   |   moveq #1,d0
   1063a:	/--|-- bra.s 10696 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   1063c:	|  \-> moveq #24,d0
   1063e:	|      add.l 16(sp),d0
   10642:	|      move.l d0,-(sp)
   10644:	|      jsr 1510c <trimStack>
   1064a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1064c:	|      movea.l 16(sp),a0
   10650:	|      move.l 24(a0),d0
   10654:	|      move.l d0,-(sp)
   10656:	|      pea 1 <_start+0x1>
   1065a:	|      moveq #12,d0
   1065c:	|      add.l sp,d0
   1065e:	|      move.l d0,-(sp)
   10660:	|      jsr 14788 <getValueType>
   10666:	|      lea 12(sp),sp
   1066a:	|      tst.w d0
   1066c:	|  /-- bne.s 10672 <builtIn_setMusicVolume+0x5e>
   1066e:	|  |   moveq #1,d0
   10670:	+--|-- bra.s 10696 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10672:	|  \-> moveq #24,d0
   10674:	|      add.l 16(sp),d0
   10678:	|      move.l d0,-(sp)
   1067a:	|      jsr 1510c <trimStack>
   10680:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10682:	|      move.l (sp),d1
   10684:	|      move.l 4(sp),d0
   10688:	|      move.l d1,-(sp)
   1068a:	|      move.l d0,-(sp)
   1068c:	|      jsr d1b4 <setMusicVolume>
   10692:	|      addq.l #8,sp
	return BR_CONTINUE;
   10694:	|      moveq #2,d0
}
   10696:	\----> addq.l #8,sp
   10698:	       rts

0001069a <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   1069a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1069c:	       movea.l 12(sp),a0
   106a0:	       move.l 24(a0),d0
   106a4:	       move.l d0,-(sp)
   106a6:	       pea 1 <_start+0x1>
   106aa:	       move.l sp,d0
   106ac:	       addq.l #8,d0
   106ae:	       move.l d0,-(sp)
   106b0:	       jsr 14788 <getValueType>
   106b6:	       lea 12(sp),sp
   106ba:	       tst.w d0
   106bc:	   /-- bne.s 106c2 <builtIn_setDefaultMusicVolume+0x28>
   106be:	   |   moveq #1,d0
   106c0:	/--|-- bra.s 106e0 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   106c2:	|  \-> moveq #24,d0
   106c4:	|      add.l 12(sp),d0
   106c8:	|      move.l d0,-(sp)
   106ca:	|      jsr 1510c <trimStack>
   106d0:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   106d2:	|      move.l (sp),d0
   106d4:	|      move.l d0,-(sp)
   106d6:	|      jsr d198 <setDefaultMusicVolume>
   106dc:	|      addq.l #4,sp
	return BR_CONTINUE;
   106de:	|      moveq #2,d0
}
   106e0:	\----> addq.l #4,sp
   106e2:	       rts

000106e4 <builtIn_playSound>:

builtIn(playSound)
{
   106e4:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   106e6:	       movea.l 12(sp),a0
   106ea:	       move.l 24(a0),d0
   106ee:	       move.l d0,-(sp)
   106f0:	       pea 5 <_start+0x5>
   106f4:	       move.l sp,d0
   106f6:	       addq.l #8,d0
   106f8:	       move.l d0,-(sp)
   106fa:	       jsr 14788 <getValueType>
   10700:	       lea 12(sp),sp
   10704:	       tst.w d0
   10706:	   /-- bne.s 1070c <builtIn_playSound+0x28>
   10708:	   |   moveq #1,d0
   1070a:	/--|-- bra.s 10734 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   1070c:	|  \-> moveq #24,d0
   1070e:	|      add.l 12(sp),d0
   10712:	|      move.l d0,-(sp)
   10714:	|      jsr 1510c <trimStack>
   1071a:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   1071c:	|      move.l (sp),d0
   1071e:	|      clr.l -(sp)
   10720:	|      move.l d0,-(sp)
   10722:	|      jsr d1bc <startSound>
   10728:	|      addq.l #8,sp
   1072a:	|      tst.w d0
   1072c:	|  /-- bne.s 10732 <builtIn_playSound+0x4e>
   1072e:	|  |   moveq #2,d0
   10730:	+--|-- bra.s 10734 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10732:	|  \-> moveq #2,d0
}
   10734:	\----> addq.l #4,sp
   10736:	       rts

00010738 <builtIn_loopSound>:

builtIn(loopSound)
{
   10738:	             lea -28(sp),sp
   1073c:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   1073e:	             tst.l 36(sp)
   10742:	         /-- bgt.s 10758 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10744:	         |   pea 1991e <PutChar+0x1c9a>
   1074a:	         |   jsr 171b0 <KPrintF>
   10750:	         |   addq.l #4,sp
		return BR_ERROR;
   10752:	         |   moveq #1,d0
   10754:	/--------|-- bra.w 10914 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10758:	|        \-> moveq #1,d0
   1075a:	|            cmp.l 36(sp),d0
   1075e:	|     /----- blt.s 107ba <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10760:	|     |      movea.l 40(sp),a0
   10764:	|     |      move.l 24(a0),d0
   10768:	|     |      move.l d0,-(sp)
   1076a:	|     |      pea 5 <_start+0x5>
   1076e:	|     |      lea 16(sp),a0
   10772:	|     |      move.l a0,-(sp)
   10774:	|     |      jsr 14788 <getValueType>
   1077a:	|     |      lea 12(sp),sp
   1077e:	|     |      tst.w d0
   10780:	|     |  /-- bne.s 10788 <builtIn_loopSound+0x50>
   10782:	|     |  |   moveq #1,d0
   10784:	+-----|--|-- bra.w 10914 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10788:	|     |  \-> moveq #24,d0
   1078a:	|     |      add.l 40(sp),d0
   1078e:	|     |      move.l d0,-(sp)
   10790:	|     |      jsr 1510c <trimStack>
   10796:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10798:	|     |      move.l 8(sp),d0
   1079c:	|     |      pea 1 <_start+0x1>
   107a0:	|     |      move.l d0,-(sp)
   107a2:	|     |      jsr d1bc <startSound>
   107a8:	|     |      addq.l #8,sp
   107aa:	|     |      tst.w d0
   107ac:	|     |  /-- bne.s 107b4 <builtIn_loopSound+0x7c>
   107ae:	|     |  |   moveq #2,d0
   107b0:	+-----|--|-- bra.w 10914 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   107b4:	|     |  \-> moveq #2,d0
   107b6:	+-----|----- bra.w 10914 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   107ba:	|     \----> moveq #2,d1
   107bc:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   107c0:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   107c4:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   107c8:	|            movea.l 40(sp),a0
   107cc:	|            movea.l 24(a0),a0
   107d0:	|            move.l (a0),d0
   107d2:	|            moveq #5,d1
   107d4:	|            cmp.l d0,d1
   107d6:	|  /-------- beq.w 108ae <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   107da:	|  |         movea.l 40(sp),a0
   107de:	|  |         move.l 24(a0),d0
   107e2:	|  |         move.l d0,-(sp)
   107e4:	|  |         pea 1 <_start+0x1>
   107e8:	|  |         lea 12(sp),a0
   107ec:	|  |         move.l a0,-(sp)
   107ee:	|  |         jsr 14788 <getValueType>
   107f4:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   107f8:	|  |         moveq #24,d0
   107fa:	|  |         add.l 40(sp),d0
   107fe:	|  |         move.l d0,-(sp)
   10800:	|  |         jsr 1510c <trimStack>
   10806:	|  |         addq.l #4,sp
			numParams--;
   10808:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   1080c:	|  +-------- bra.w 108ae <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10810:	|  |  /----> movea.l 40(sp),a0
   10814:	|  |  |      move.l 24(a0),d0
   10818:	|  |  |      move.l d0,-(sp)
   1081a:	|  |  |      pea 5 <_start+0x5>
   1081e:	|  |  |      lea 16(sp),a0
   10822:	|  |  |      move.l a0,-(sp)
   10824:	|  |  |      jsr 14788 <getValueType>
   1082a:	|  |  |      lea 12(sp),sp
   1082e:	|  |  |      tst.w d0
   10830:	|  |  |  /-- bne.s 10846 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10832:	|  |  |  |   pea 1995c <PutChar+0x1cd8>
   10838:	|  |  |  |   jsr 171b0 <KPrintF>
   1083e:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10840:	|  |  |  |   moveq #1,d0
   10842:	+--|--|--|-- bra.w 10914 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10846:	|  |  |  \-> moveq #20,d0
   10848:	|  |  |      move.l d0,20(sp)
   1084c:	|  |  |      clr.l 16(sp)
   10850:	|  |  |      move.l 1c896 <SysBase>,d0
   10856:	|  |  |      movea.l d0,a6
   10858:	|  |  |      move.l 20(sp),d0
   1085c:	|  |  |      move.l 16(sp),d1
   10860:	|  |  |      jsr -684(a6)
   10864:	|  |  |      move.l d0,12(sp)
   10868:	|  |  |      move.l 12(sp),d0
   1086c:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10870:	|  |  |  /-- bne.s 10878 <builtIn_loopSound+0x140>
   10872:	|  |  |  |   moveq #1,d0
   10874:	+--|--|--|-- bra.w 10914 <builtIn_loopSound+0x1dc>

			s->next = old;
   10878:	|  |  |  \-> movea.l 28(sp),a0
   1087c:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10882:	|  |  |      movea.l 28(sp),a0
   10886:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   1088a:	|  |  |      move.l 8(sp),d0
   1088e:	|  |  |      movea.l 28(sp),a0
   10892:	|  |  |      move.l d0,(a0)
			old = s;
   10894:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   1089a:	|  |  |      moveq #24,d0
   1089c:	|  |  |      add.l 40(sp),d0
   108a0:	|  |  |      move.l d0,-(sp)
   108a2:	|  |  |      jsr 1510c <trimStack>
   108a8:	|  |  |      addq.l #4,sp
			numParams--;
   108aa:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   108ae:	|  \--|----> tst.l 36(sp)
   108b2:	|     \----- bne.w 10810 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   108b6:	|        /-- bra.s 108c2 <builtIn_loopSound+0x18a>
   108b8:	|     /--|-> movea.l 28(sp),a0
   108bc:	|     |  |   move.l 4(a0),28(sp)
   108c2:	|     |  \-> movea.l 28(sp),a0
   108c6:	|     |      move.l 4(a0),d0
   108ca:	|     \----- bne.s 108b8 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   108cc:	|            move.l 4(sp),d0
   108d0:	|            moveq #1,d1
   108d2:	|            cmp.l d0,d1
   108d4:	|     /----- bge.s 108ec <builtIn_loopSound+0x1b4>
			s->next = old;
   108d6:	|     |      movea.l 28(sp),a0
   108da:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   108e0:	|     |      movea.l 24(sp),a0
   108e4:	|     |      move.l 28(sp),8(a0)
   108ea:	|     |  /-- bra.s 108fc <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   108ec:	|     \--|-> move.l 4(sp),d0
   108f0:	|        +-- beq.s 108fc <builtIn_loopSound+0x1c4>
			s->next = s;
   108f2:	|        |   movea.l 28(sp),a0
   108f6:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   108fc:	|        \-> movea.l 24(sp),a0
   10900:	|            moveq #-1,d0
   10902:	|            move.l d0,16(a0)
		playSoundList(old);
   10906:	|            move.l 24(sp),-(sp)
   1090a:	|            jsr d136 <playSoundList>
   10910:	|            addq.l #4,sp
		return BR_CONTINUE;
   10912:	|            moveq #2,d0
	}
}
   10914:	\----------> movea.l (sp)+,a6
   10916:	             lea 28(sp),sp
   1091a:	             rts

0001091c <builtIn_stopSound>:

builtIn(stopSound)
{
   1091c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1091e:	       movea.l 12(sp),a0
   10922:	       move.l 24(a0),d0
   10926:	       move.l d0,-(sp)
   10928:	       pea 5 <_start+0x5>
   1092c:	       move.l sp,d0
   1092e:	       addq.l #8,d0
   10930:	       move.l d0,-(sp)
   10932:	       jsr 14788 <getValueType>
   10938:	       lea 12(sp),sp
   1093c:	       tst.w d0
   1093e:	   /-- bne.s 10944 <builtIn_stopSound+0x28>
   10940:	   |   moveq #1,d0
   10942:	/--|-- bra.s 10962 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10944:	|  \-> moveq #24,d0
   10946:	|      add.l 12(sp),d0
   1094a:	|      move.l d0,-(sp)
   1094c:	|      jsr 1510c <trimStack>
   10952:	|      addq.l #4,sp
	huntKillSound (v);
   10954:	|      move.l (sp),d0
   10956:	|      move.l d0,-(sp)
   10958:	|      jsr d12e <huntKillSound>
   1095e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10960:	|      moveq #2,d0
}
   10962:	\----> addq.l #4,sp
   10964:	       rts

00010966 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10966:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10968:	       movea.l 12(sp),a0
   1096c:	       move.l 24(a0),d0
   10970:	       move.l d0,-(sp)
   10972:	       pea 1 <_start+0x1>
   10976:	       move.l sp,d0
   10978:	       addq.l #8,d0
   1097a:	       move.l d0,-(sp)
   1097c:	       jsr 14788 <getValueType>
   10982:	       lea 12(sp),sp
   10986:	       tst.w d0
   10988:	   /-- bne.s 1098e <builtIn_setDefaultSoundVolume+0x28>
   1098a:	   |   moveq #1,d0
   1098c:	/--|-- bra.s 109ac <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   1098e:	|  \-> moveq #24,d0
   10990:	|      add.l 12(sp),d0
   10994:	|      move.l d0,-(sp)
   10996:	|      jsr 1510c <trimStack>
   1099c:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   1099e:	|      move.l (sp),d0
   109a0:	|      move.l d0,-(sp)
   109a2:	|      jsr d1a4 <setDefaultSoundVolume>
   109a8:	|      addq.l #4,sp
	return BR_CONTINUE;
   109aa:	|      moveq #2,d0
}
   109ac:	\----> addq.l #4,sp
   109ae:	       rts

000109b0 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   109b0:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109b2:	       movea.l 16(sp),a0
   109b6:	       move.l 24(a0),d0
   109ba:	       move.l d0,-(sp)
   109bc:	       pea 1 <_start+0x1>
   109c0:	       move.l sp,d0
   109c2:	       addq.l #8,d0
   109c4:	       move.l d0,-(sp)
   109c6:	       jsr 14788 <getValueType>
   109cc:	       lea 12(sp),sp
   109d0:	       tst.w d0
   109d2:	   /-- bne.s 109d8 <builtIn_setSoundVolume+0x28>
   109d4:	   |   moveq #1,d0
   109d6:	/--|-- bra.s 10a32 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   109d8:	|  \-> moveq #24,d0
   109da:	|      add.l 16(sp),d0
   109de:	|      move.l d0,-(sp)
   109e0:	|      jsr 1510c <trimStack>
   109e6:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   109e8:	|      movea.l 16(sp),a0
   109ec:	|      move.l 24(a0),d0
   109f0:	|      move.l d0,-(sp)
   109f2:	|      pea 5 <_start+0x5>
   109f6:	|      moveq #12,d0
   109f8:	|      add.l sp,d0
   109fa:	|      move.l d0,-(sp)
   109fc:	|      jsr 14788 <getValueType>
   10a02:	|      lea 12(sp),sp
   10a06:	|      tst.w d0
   10a08:	|  /-- bne.s 10a0e <builtIn_setSoundVolume+0x5e>
   10a0a:	|  |   moveq #1,d0
   10a0c:	+--|-- bra.s 10a32 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10a0e:	|  \-> moveq #24,d0
   10a10:	|      add.l 16(sp),d0
   10a14:	|      move.l d0,-(sp)
   10a16:	|      jsr 1510c <trimStack>
   10a1c:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10a1e:	|      move.l (sp),d1
   10a20:	|      move.l 4(sp),d0
   10a24:	|      move.l d1,-(sp)
   10a26:	|      move.l d0,-(sp)
   10a28:	|      jsr d1b8 <setSoundVolume>
   10a2e:	|      addq.l #8,sp
	return BR_CONTINUE;
   10a30:	|      moveq #2,d0
}
   10a32:	\----> addq.l #8,sp
   10a34:	       rts

00010a36 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10a36:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a3a:	       movea.l 20(sp),a0
   10a3e:	       move.l 24(a0),d0
   10a42:	       move.l d0,-(sp)
   10a44:	       pea 1 <_start+0x1>
   10a48:	       moveq #12,d0
   10a4a:	       add.l sp,d0
   10a4c:	       move.l d0,-(sp)
   10a4e:	       jsr 14788 <getValueType>
   10a54:	       lea 12(sp),sp
   10a58:	       tst.w d0
   10a5a:	   /-- bne.s 10a62 <builtIn_setSoundLoopPoints+0x2c>
   10a5c:	   |   moveq #1,d0
   10a5e:	/--|-- bra.w 10afa <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a62:	|  \-> moveq #24,d0
   10a64:	|      add.l 20(sp),d0
   10a68:	|      move.l d0,-(sp)
   10a6a:	|      jsr 1510c <trimStack>
   10a70:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a72:	|      movea.l 20(sp),a0
   10a76:	|      move.l 24(a0),d0
   10a7a:	|      move.l d0,-(sp)
   10a7c:	|      pea 1 <_start+0x1>
   10a80:	|      lea 8(sp),a0
   10a84:	|      move.l a0,-(sp)
   10a86:	|      jsr 14788 <getValueType>
   10a8c:	|      lea 12(sp),sp
   10a90:	|      tst.w d0
   10a92:	|  /-- bne.s 10a98 <builtIn_setSoundLoopPoints+0x62>
   10a94:	|  |   moveq #1,d0
   10a96:	+--|-- bra.s 10afa <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10a98:	|  \-> moveq #24,d0
   10a9a:	|      add.l 20(sp),d0
   10a9e:	|      move.l d0,-(sp)
   10aa0:	|      jsr 1510c <trimStack>
   10aa6:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10aa8:	|      movea.l 20(sp),a0
   10aac:	|      move.l 24(a0),d0
   10ab0:	|      move.l d0,-(sp)
   10ab2:	|      pea 5 <_start+0x5>
   10ab6:	|      moveq #16,d0
   10ab8:	|      add.l sp,d0
   10aba:	|      move.l d0,-(sp)
   10abc:	|      jsr 14788 <getValueType>
   10ac2:	|      lea 12(sp),sp
   10ac6:	|      tst.w d0
   10ac8:	|  /-- bne.s 10ace <builtIn_setSoundLoopPoints+0x98>
   10aca:	|  |   moveq #1,d0
   10acc:	+--|-- bra.s 10afa <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10ace:	|  \-> moveq #24,d0
   10ad0:	|      add.l 20(sp),d0
   10ad4:	|      move.l d0,-(sp)
   10ad6:	|      jsr 1510c <trimStack>
   10adc:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10ade:	|      movea.l 4(sp),a0
   10ae2:	|      move.l (sp),d1
   10ae4:	|      move.l 8(sp),d0
   10ae8:	|      move.l a0,-(sp)
   10aea:	|      move.l d1,-(sp)
   10aec:	|      move.l d0,-(sp)
   10aee:	|      jsr d1b0 <setSoundLoop>
   10af4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10af8:	|      moveq #2,d0
}
   10afa:	\----> lea 12(sp),sp
   10afe:	       rts

00010b00 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10b00:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10b02:	          movea.l 12(sp),a0
   10b06:	          movea.l 24(a0),a0
   10b0a:	          move.l (a0),d0
   10b0c:	          moveq #5,d1
   10b0e:	          cmp.l d0,d1
   10b10:	/-------- bne.s 10b54 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10b12:	|         movea.l 12(sp),a0
   10b16:	|         move.l 24(a0),d0
   10b1a:	|         move.l d0,-(sp)
   10b1c:	|         pea 5 <_start+0x5>
   10b20:	|         move.l sp,d0
   10b22:	|         addq.l #8,d0
   10b24:	|         move.l d0,-(sp)
   10b26:	|         jsr 14788 <getValueType>
   10b2c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10b30:	|         moveq #24,d0
   10b32:	|         add.l 12(sp),d0
   10b36:	|         move.l d0,-(sp)
   10b38:	|         jsr 1510c <trimStack>
   10b3e:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10b40:	|         move.l (sp),d0
   10b42:	|         move.l d0,-(sp)
   10b44:	|         jsr 1695a <setFloor>
   10b4a:	|         addq.l #4,sp
   10b4c:	|         tst.w d0
   10b4e:	|  /----- bne.s 10b6a <builtIn_setFloor+0x6a>
   10b50:	|  |      moveq #1,d0
   10b52:	|  |  /-- bra.s 10b6c <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10b54:	\--|--|-> moveq #24,d0
   10b56:	   |  |   add.l 12(sp),d0
   10b5a:	   |  |   move.l d0,-(sp)
   10b5c:	   |  |   jsr 1510c <trimStack>
   10b62:	   |  |   addq.l #4,sp
		setFloorNull ();
   10b64:	   |  |   jsr 170d4 <setFloorNull>
	}
	return BR_CONTINUE;
   10b6a:	   \--|-> moveq #2,d0
}
   10b6c:	      \-> addq.l #4,sp
   10b6e:	          rts

00010b70 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10b70:	jsr 161f2 <drawFloor>
	return BR_CONTINUE;
   10b76:	moveq #2,d0
}
   10b78:	rts

00010b7a <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10b7a:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10b7c:	          movea.l 12(sp),a0
   10b80:	          movea.l 24(a0),a0
   10b84:	          move.l (a0),d0
   10b86:	          moveq #5,d1
   10b88:	          cmp.l d0,d1
   10b8a:	/-------- bne.s 10bce <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10b8c:	|         movea.l 12(sp),a0
   10b90:	|         move.l 24(a0),d0
   10b94:	|         move.l d0,-(sp)
   10b96:	|         pea 5 <_start+0x5>
   10b9a:	|         move.l sp,d0
   10b9c:	|         addq.l #8,d0
   10b9e:	|         move.l d0,-(sp)
   10ba0:	|         jsr 14788 <getValueType>
   10ba6:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10baa:	|         moveq #24,d0
   10bac:	|         add.l 12(sp),d0
   10bb0:	|         move.l d0,-(sp)
   10bb2:	|         jsr 1510c <trimStack>
   10bb8:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10bba:	|         move.l (sp),d0
   10bbc:	|         move.l d0,-(sp)
   10bbe:	|         jsr 8818 <setZBuffer>
   10bc4:	|         addq.l #4,sp
   10bc6:	|         tst.w d0
   10bc8:	|  /----- bne.s 10be4 <builtIn_setZBuffer+0x6a>
   10bca:	|  |      moveq #1,d0
   10bcc:	|  |  /-- bra.s 10be6 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10bce:	\--|--|-> moveq #24,d0
   10bd0:	   |  |   add.l 12(sp),d0
   10bd4:	   |  |   move.l d0,-(sp)
   10bd6:	   |  |   jsr 1510c <trimStack>
   10bdc:	   |  |   addq.l #4,sp
		killZBuffer ();
   10bde:	   |  |   jsr 87cc <killZBuffer>
	}
	return BR_CONTINUE;
   10be4:	   \--|-> moveq #2,d0
}
   10be6:	      \-> addq.l #4,sp
   10be8:	          rts

00010bea <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10bea:	pea 19993 <PutChar+0x1d0f>
   10bf0:	jsr 171b0 <KPrintF>
   10bf6:	addq.l #4,sp
	return BR_CONTINUE;
   10bf8:	moveq #2,d0
}
   10bfa:	rts

00010bfc <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bfc:	          movea.l 8(sp),a0
   10c00:	          move.l 24(a0),d0
   10c04:	          move.l d0,-(sp)
   10c06:	          pea 1 <_start+0x1>
   10c0a:	          pea 1c964 <speechMode>
   10c10:	          jsr 14788 <getValueType>
   10c16:	          lea 12(sp),sp
   10c1a:	          tst.w d0
   10c1c:	      /-- bne.s 10c22 <builtIn_setSpeechMode+0x26>
   10c1e:	      |   moveq #1,d0
   10c20:	/-----|-- bra.s 10c5a <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10c22:	|     \-> moveq #24,d0
   10c24:	|         add.l 8(sp),d0
   10c28:	|         move.l d0,-(sp)
   10c2a:	|         jsr 1510c <trimStack>
   10c30:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10c32:	|         move.l 1c964 <speechMode>,d0
   10c38:	|     /-- bmi.s 10c46 <builtIn_setSpeechMode+0x4a>
   10c3a:	|     |   move.l 1c964 <speechMode>,d0
   10c40:	|     |   moveq #2,d1
   10c42:	|     |   cmp.l d0,d1
   10c44:	|  /--|-- bge.s 10c58 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10c46:	|  |  \-> pea 199ac <PutChar+0x1d28>
   10c4c:	|  |      jsr 171b0 <KPrintF>
   10c52:	|  |      addq.l #4,sp
		return BR_ERROR;
   10c54:	|  |      moveq #1,d0
   10c56:	+--|----- bra.s 10c5a <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10c58:	|  \----> moveq #2,d0
}
   10c5a:	\-------> rts

00010c5c <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10c5c:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10c5e:	       jsr 7fd4 <isThereAnySpeechGoingOn>
   10c64:	       move.l d0,(sp)
	if (i == -1) {
   10c66:	       moveq #-1,d0
   10c68:	       cmp.l (sp),d0
   10c6a:	/----- bne.s 10c86 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10c6c:	|      moveq #28,d0
   10c6e:	|      add.l 12(sp),d0
   10c72:	|      clr.l -(sp)
   10c74:	|      pea 1 <_start+0x1>
   10c78:	|      move.l d0,-(sp)
   10c7a:	|      jsr 1507a <setVariable>
   10c80:	|      lea 12(sp),sp
   10c84:	|  /-- bra.s 10c9e <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10c86:	\--|-> moveq #28,d0
   10c88:	   |   add.l 12(sp),d0
   10c8c:	   |   move.l (sp),-(sp)
   10c8e:	   |   pea 7 <_start+0x7>
   10c92:	   |   move.l d0,-(sp)
   10c94:	   |   jsr 1507a <setVariable>
   10c9a:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10c9e:	   \-> moveq #2,d0
}
   10ca0:	       addq.l #4,sp
   10ca2:	       rts

00010ca4 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10ca4:	jsr 62ae <killSpeechTimers>
	return BR_CONTINUE;
   10caa:	moveq #2,d0
}
   10cac:	rts

00010cae <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10cae:	       move.l 1c9aa <overRegion>,d0
   10cb4:	/----- beq.s 10cde <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10cb6:	|      movea.l 1c9aa <overRegion>,a0
   10cbc:	|      movea.l 28(a0),a0
   10cc0:	|      move.l 4(a0),d1
   10cc4:	|      moveq #28,d0
   10cc6:	|      add.l 8(sp),d0
   10cca:	|      move.l d1,-(sp)
   10ccc:	|      pea 7 <_start+0x7>
   10cd0:	|      move.l d0,-(sp)
   10cd2:	|      jsr 1507a <setVariable>
   10cd8:	|      lea 12(sp),sp
   10cdc:	|  /-- bra.s 10cf6 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10cde:	\--|-> moveq #28,d0
   10ce0:	   |   add.l 8(sp),d0
   10ce4:	   |   clr.l -(sp)
   10ce6:	   |   pea 1 <_start+0x1>
   10cea:	   |   move.l d0,-(sp)
   10cec:	   |   jsr 1507a <setVariable>
   10cf2:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10cf6:	   \-> moveq #2,d0
}
   10cf8:	       rts

00010cfa <builtIn_rename>:

builtIn(rename)
{
   10cfa:	       lea -16(sp),sp
   10cfe:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10d00:	       movea.l 28(sp),a0
   10d04:	       move.l 24(a0),d0
   10d08:	       move.l d0,-(sp)
   10d0a:	       jsr 14d5e <getTextFromAnyVar>
   10d10:	       addq.l #4,sp
   10d12:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10d16:	   /-- bne.s 10d1c <builtIn_rename+0x22>
   10d18:	   |   moveq #1,d0
   10d1a:	/--|-- bra.s 10d96 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d1c:	|  \-> moveq #24,d0
   10d1e:	|      add.l 28(sp),d0
   10d22:	|      move.l d0,-(sp)
   10d24:	|      jsr 1510c <trimStack>
   10d2a:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10d2c:	|      movea.l 28(sp),a0
   10d30:	|      move.l 24(a0),d0
   10d34:	|      move.l d0,-(sp)
   10d36:	|      pea 7 <_start+0x7>
   10d3a:	|      lea 12(sp),a0
   10d3e:	|      move.l a0,-(sp)
   10d40:	|      jsr 14788 <getValueType>
   10d46:	|      lea 12(sp),sp
   10d4a:	|      tst.w d0
   10d4c:	|  /-- bne.s 10d52 <builtIn_rename+0x58>
   10d4e:	|  |   moveq #1,d0
   10d50:	+--|-- bra.s 10d96 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10d52:	|  \-> moveq #24,d0
   10d54:	|      add.l 28(sp),d0
   10d58:	|      move.l d0,-(sp)
   10d5a:	|      jsr 1510c <trimStack>
   10d60:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10d62:	|      move.l 4(sp),d0
   10d66:	|      move.l d0,-(sp)
   10d68:	|      jsr d4f2 <findObjectType>
   10d6e:	|      addq.l #4,sp
   10d70:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10d74:	|      movea.l 12(sp),a0
   10d78:	|      move.l (a0),8(sp)
   10d7c:	|      move.l 1c896 <SysBase>,d0
   10d82:	|      movea.l d0,a6
   10d84:	|      movea.l 8(sp),a1
   10d88:	|      jsr -690(a6)
	o->screenName = newText;
   10d8c:	|      movea.l 12(sp),a0
   10d90:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10d94:	|      moveq #2,d0
}
   10d96:	\----> movea.l (sp)+,a6
   10d98:	       lea 16(sp),sp
   10d9c:	       rts

00010d9e <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10d9e:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10da2:	          movea.l 20(sp),a0
   10da6:	          move.l 24(a0),d0
   10daa:	          move.l d0,-(sp)
   10dac:	          pea 7 <_start+0x7>
   10db0:	          lea 8(sp),a0
   10db4:	          move.l a0,-(sp)
   10db6:	          jsr 14788 <getValueType>
   10dbc:	          lea 12(sp),sp
   10dc0:	          tst.w d0
   10dc2:	      /-- bne.s 10dca <builtIn_getObjectX+0x2c>
   10dc4:	      |   moveq #1,d0
   10dc6:	/-----|-- bra.w 10e66 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10dca:	|     \-> moveq #24,d0
   10dcc:	|         add.l 20(sp),d0
   10dd0:	|         move.l d0,-(sp)
   10dd2:	|         jsr 1510c <trimStack>
   10dd8:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10dda:	|         move.l (sp),d0
   10ddc:	|         move.l d0,-(sp)
   10dde:	|         jsr a680 <findPerson>
   10de4:	|         addq.l #4,sp
   10de6:	|         move.l d0,8(sp)
	if (pers) {
   10dea:	|     /-- beq.s 10e18 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10dec:	|     |   movea.l 8(sp),a0
   10df0:	|     |   move.l (a0),d0
   10df2:	|     |   move.l d0,-(sp)
   10df4:	|     |   jsr 17584 <__fixsfsi>
   10dfa:	|     |   addq.l #4,sp
   10dfc:	|     |   move.l d0,d1
   10dfe:	|     |   moveq #28,d0
   10e00:	|     |   add.l 20(sp),d0
   10e04:	|     |   move.l d1,-(sp)
   10e06:	|     |   pea 1 <_start+0x1>
   10e0a:	|     |   move.l d0,-(sp)
   10e0c:	|     |   jsr 1507a <setVariable>
   10e12:	|     |   lea 12(sp),sp
   10e16:	|  /--|-- bra.s 10e64 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10e18:	|  |  \-> move.l (sp),d0
   10e1a:	|  |      move.l d0,-(sp)
   10e1c:	|  |      jsr 159d2 <getRegionForObject>
   10e22:	|  |      addq.l #4,sp
   10e24:	|  |      move.l d0,4(sp)
		if (la) {
   10e28:	|  |  /-- beq.s 10e4c <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10e2a:	|  |  |   movea.l 4(sp),a0
   10e2e:	|  |  |   move.l 16(a0),d1
   10e32:	|  |  |   moveq #28,d0
   10e34:	|  |  |   add.l 20(sp),d0
   10e38:	|  |  |   move.l d1,-(sp)
   10e3a:	|  |  |   pea 1 <_start+0x1>
   10e3e:	|  |  |   move.l d0,-(sp)
   10e40:	|  |  |   jsr 1507a <setVariable>
   10e46:	|  |  |   lea 12(sp),sp
   10e4a:	|  +--|-- bra.s 10e64 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10e4c:	|  |  \-> moveq #28,d0
   10e4e:	|  |      add.l 20(sp),d0
   10e52:	|  |      clr.l -(sp)
   10e54:	|  |      pea 1 <_start+0x1>
   10e58:	|  |      move.l d0,-(sp)
   10e5a:	|  |      jsr 1507a <setVariable>
   10e60:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10e64:	|  \----> moveq #2,d0
}
   10e66:	\-------> lea 12(sp),sp
   10e6a:	          rts

00010e6c <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10e6c:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e70:	          movea.l 20(sp),a0
   10e74:	          move.l 24(a0),d0
   10e78:	          move.l d0,-(sp)
   10e7a:	          pea 7 <_start+0x7>
   10e7e:	          lea 8(sp),a0
   10e82:	          move.l a0,-(sp)
   10e84:	          jsr 14788 <getValueType>
   10e8a:	          lea 12(sp),sp
   10e8e:	          tst.w d0
   10e90:	      /-- bne.s 10e98 <builtIn_getObjectY+0x2c>
   10e92:	      |   moveq #1,d0
   10e94:	/-----|-- bra.w 10f36 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10e98:	|     \-> moveq #24,d0
   10e9a:	|         add.l 20(sp),d0
   10e9e:	|         move.l d0,-(sp)
   10ea0:	|         jsr 1510c <trimStack>
   10ea6:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10ea8:	|         move.l (sp),d0
   10eaa:	|         move.l d0,-(sp)
   10eac:	|         jsr a680 <findPerson>
   10eb2:	|         addq.l #4,sp
   10eb4:	|         move.l d0,8(sp)
	if (pers) {
   10eb8:	|     /-- beq.s 10ee8 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10eba:	|     |   movea.l 8(sp),a0
   10ebe:	|     |   move.l 4(a0),d0
   10ec2:	|     |   move.l d0,-(sp)
   10ec4:	|     |   jsr 17584 <__fixsfsi>
   10eca:	|     |   addq.l #4,sp
   10ecc:	|     |   move.l d0,d1
   10ece:	|     |   moveq #28,d0
   10ed0:	|     |   add.l 20(sp),d0
   10ed4:	|     |   move.l d1,-(sp)
   10ed6:	|     |   pea 1 <_start+0x1>
   10eda:	|     |   move.l d0,-(sp)
   10edc:	|     |   jsr 1507a <setVariable>
   10ee2:	|     |   lea 12(sp),sp
   10ee6:	|  /--|-- bra.s 10f34 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10ee8:	|  |  \-> move.l (sp),d0
   10eea:	|  |      move.l d0,-(sp)
   10eec:	|  |      jsr 159d2 <getRegionForObject>
   10ef2:	|  |      addq.l #4,sp
   10ef4:	|  |      move.l d0,4(sp)
		if (la) {
   10ef8:	|  |  /-- beq.s 10f1c <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10efa:	|  |  |   movea.l 4(sp),a0
   10efe:	|  |  |   move.l 20(a0),d1
   10f02:	|  |  |   moveq #28,d0
   10f04:	|  |  |   add.l 20(sp),d0
   10f08:	|  |  |   move.l d1,-(sp)
   10f0a:	|  |  |   pea 1 <_start+0x1>
   10f0e:	|  |  |   move.l d0,-(sp)
   10f10:	|  |  |   jsr 1507a <setVariable>
   10f16:	|  |  |   lea 12(sp),sp
   10f1a:	|  +--|-- bra.s 10f34 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10f1c:	|  |  \-> moveq #28,d0
   10f1e:	|  |      add.l 20(sp),d0
   10f22:	|  |      clr.l -(sp)
   10f24:	|  |      pea 1 <_start+0x1>
   10f28:	|  |      move.l d0,-(sp)
   10f2a:	|  |      jsr 1507a <setVariable>
   10f30:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10f34:	|  \----> moveq #2,d0
}
   10f36:	\-------> lea 12(sp),sp
   10f3a:	          rts

00010f3c <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10f3c:	       lea -32(sp),sp
   10f40:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f44:	       movea.l 56(sp),a0
   10f48:	       move.l 24(a0),d0
   10f4c:	       move.l d0,-(sp)
   10f4e:	       pea 1 <_start+0x1>
   10f52:	       lea 28(sp),a0
   10f56:	       move.l a0,-(sp)
   10f58:	       jsr 14788 <getValueType>
   10f5e:	       lea 12(sp),sp
   10f62:	       tst.w d0
   10f64:	   /-- bne.s 10f6c <builtIn_addScreenRegion+0x30>
   10f66:	   |   moveq #1,d0
   10f68:	/--|-- bra.w 11146 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f6c:	|  \-> moveq #24,d0
   10f6e:	|      add.l 56(sp),d0
   10f72:	|      move.l d0,-(sp)
   10f74:	|      jsr 1510c <trimStack>
   10f7a:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f7c:	|      movea.l 56(sp),a0
   10f80:	|      move.l 24(a0),d0
   10f84:	|      move.l d0,-(sp)
   10f86:	|      pea 1 <_start+0x1>
   10f8a:	|      moveq #48,d0
   10f8c:	|      add.l sp,d0
   10f8e:	|      move.l d0,-(sp)
   10f90:	|      jsr 14788 <getValueType>
   10f96:	|      lea 12(sp),sp
   10f9a:	|      tst.w d0
   10f9c:	|  /-- bne.s 10fa4 <builtIn_addScreenRegion+0x68>
   10f9e:	|  |   moveq #1,d0
   10fa0:	+--|-- bra.w 11146 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fa4:	|  \-> moveq #24,d0
   10fa6:	|      add.l 56(sp),d0
   10faa:	|      move.l d0,-(sp)
   10fac:	|      jsr 1510c <trimStack>
   10fb2:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fb4:	|      movea.l 56(sp),a0
   10fb8:	|      move.l 24(a0),d0
   10fbc:	|      move.l d0,-(sp)
   10fbe:	|      pea 1 <_start+0x1>
   10fc2:	|      moveq #52,d0
   10fc4:	|      add.l sp,d0
   10fc6:	|      move.l d0,-(sp)
   10fc8:	|      jsr 14788 <getValueType>
   10fce:	|      lea 12(sp),sp
   10fd2:	|      tst.w d0
   10fd4:	|  /-- bne.s 10fdc <builtIn_addScreenRegion+0xa0>
   10fd6:	|  |   moveq #1,d0
   10fd8:	+--|-- bra.w 11146 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10fdc:	|  \-> moveq #24,d0
   10fde:	|      add.l 56(sp),d0
   10fe2:	|      move.l d0,-(sp)
   10fe4:	|      jsr 1510c <trimStack>
   10fea:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fec:	|      movea.l 56(sp),a0
   10ff0:	|      move.l 24(a0),d0
   10ff4:	|      move.l d0,-(sp)
   10ff6:	|      pea 1 <_start+0x1>
   10ffa:	|      lea 32(sp),a0
   10ffe:	|      move.l a0,-(sp)
   11000:	|      jsr 14788 <getValueType>
   11006:	|      lea 12(sp),sp
   1100a:	|      tst.w d0
   1100c:	|  /-- bne.s 11014 <builtIn_addScreenRegion+0xd8>
   1100e:	|  |   moveq #1,d0
   11010:	+--|-- bra.w 11146 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11014:	|  \-> moveq #24,d0
   11016:	|      add.l 56(sp),d0
   1101a:	|      move.l d0,-(sp)
   1101c:	|      jsr 1510c <trimStack>
   11022:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11024:	|      movea.l 56(sp),a0
   11028:	|      move.l 24(a0),d0
   1102c:	|      move.l d0,-(sp)
   1102e:	|      pea 1 <_start+0x1>
   11032:	|      lea 36(sp),a0
   11036:	|      move.l a0,-(sp)
   11038:	|      jsr 14788 <getValueType>
   1103e:	|      lea 12(sp),sp
   11042:	|      tst.w d0
   11044:	|  /-- bne.s 1104c <builtIn_addScreenRegion+0x110>
   11046:	|  |   moveq #1,d0
   11048:	+--|-- bra.w 11146 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1104c:	|  \-> moveq #24,d0
   1104e:	|      add.l 56(sp),d0
   11052:	|      move.l d0,-(sp)
   11054:	|      jsr 1510c <trimStack>
   1105a:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1105c:	|      movea.l 56(sp),a0
   11060:	|      move.l 24(a0),d0
   11064:	|      move.l d0,-(sp)
   11066:	|      pea 1 <_start+0x1>
   1106a:	|      lea 40(sp),a0
   1106e:	|      move.l a0,-(sp)
   11070:	|      jsr 14788 <getValueType>
   11076:	|      lea 12(sp),sp
   1107a:	|      tst.w d0
   1107c:	|  /-- bne.s 11084 <builtIn_addScreenRegion+0x148>
   1107e:	|  |   moveq #1,d0
   11080:	+--|-- bra.w 11146 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11084:	|  \-> moveq #24,d0
   11086:	|      add.l 56(sp),d0
   1108a:	|      move.l d0,-(sp)
   1108c:	|      jsr 1510c <trimStack>
   11092:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11094:	|      movea.l 56(sp),a0
   11098:	|      move.l 24(a0),d0
   1109c:	|      move.l d0,-(sp)
   1109e:	|      pea 1 <_start+0x1>
   110a2:	|      lea 44(sp),a0
   110a6:	|      move.l a0,-(sp)
   110a8:	|      jsr 14788 <getValueType>
   110ae:	|      lea 12(sp),sp
   110b2:	|      tst.w d0
   110b4:	|  /-- bne.s 110bc <builtIn_addScreenRegion+0x180>
   110b6:	|  |   moveq #1,d0
   110b8:	+--|-- bra.w 11146 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110bc:	|  \-> moveq #24,d0
   110be:	|      add.l 56(sp),d0
   110c2:	|      move.l d0,-(sp)
   110c4:	|      jsr 1510c <trimStack>
   110ca:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110cc:	|      movea.l 56(sp),a0
   110d0:	|      move.l 24(a0),d0
   110d4:	|      move.l d0,-(sp)
   110d6:	|      pea 7 <_start+0x7>
   110da:	|      lea 24(sp),a0
   110de:	|      move.l a0,-(sp)
   110e0:	|      jsr 14788 <getValueType>
   110e6:	|      lea 12(sp),sp
   110ea:	|      tst.w d0
   110ec:	|  /-- bne.s 110f2 <builtIn_addScreenRegion+0x1b6>
   110ee:	|  |   moveq #1,d0
   110f0:	+--|-- bra.s 11146 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110f2:	|  \-> moveq #24,d0
   110f4:	|      add.l 56(sp),d0
   110f8:	|      move.l d0,-(sp)
   110fa:	|      jsr 1510c <trimStack>
   11100:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   11102:	|      move.l 16(sp),d5
   11106:	|      move.l 20(sp),d4
   1110a:	|      move.l 40(sp),d3
   1110e:	|      move.l 44(sp),d2
   11112:	|      movea.l 24(sp),a1
   11116:	|      movea.l 28(sp),a0
   1111a:	|      move.l 32(sp),d1
   1111e:	|      move.l 36(sp),d0
   11122:	|      move.l d5,-(sp)
   11124:	|      move.l d4,-(sp)
   11126:	|      move.l d3,-(sp)
   11128:	|      move.l d2,-(sp)
   1112a:	|      move.l a1,-(sp)
   1112c:	|      move.l a0,-(sp)
   1112e:	|      move.l d1,-(sp)
   11130:	|      move.l d0,-(sp)
   11132:	|      jsr 1588c <addScreenRegion>
   11138:	|      lea 32(sp),sp
   1113c:	|      tst.w d0
   1113e:	|  /-- beq.s 11144 <builtIn_addScreenRegion+0x208>
   11140:	|  |   moveq #2,d0
   11142:	+--|-- bra.s 11146 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   11144:	|  \-> moveq #1,d0

}
   11146:	\----> movem.l (sp)+,d2-d5
   1114a:	       lea 32(sp),sp
   1114e:	       rts

00011150 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   11150:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11152:	       movea.l 12(sp),a0
   11156:	       move.l 24(a0),d0
   1115a:	       move.l d0,-(sp)
   1115c:	       pea 7 <_start+0x7>
   11160:	       move.l sp,d0
   11162:	       addq.l #8,d0
   11164:	       move.l d0,-(sp)
   11166:	       jsr 14788 <getValueType>
   1116c:	       lea 12(sp),sp
   11170:	       tst.w d0
   11172:	   /-- bne.s 11178 <builtIn_removeScreenRegion+0x28>
   11174:	   |   moveq #1,d0
   11176:	/--|-- bra.s 11196 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   11178:	|  \-> moveq #24,d0
   1117a:	|      add.l 12(sp),d0
   1117e:	|      move.l d0,-(sp)
   11180:	|      jsr 1510c <trimStack>
   11186:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11188:	|      move.l (sp),d0
   1118a:	|      move.l d0,-(sp)
   1118c:	|      jsr 15b7a <removeScreenRegion>
   11192:	|      addq.l #4,sp
	return BR_CONTINUE;
   11194:	|      moveq #2,d0
}
   11196:	\----> addq.l #4,sp
   11198:	       rts

0001119a <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   1119a:	jsr 15cfe <showBoxes>
	return BR_CONTINUE;
   111a0:	moveq #2,d0
}
   111a2:	rts

000111a4 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   111a4:	jsr 15a00 <killAllRegions>
	return BR_CONTINUE;
   111aa:	moveq #2,d0
}
   111ac:	rts

000111ae <builtIn_addCharacter>:

builtIn(addCharacter)
{
   111ae:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   111b2:	       movea.l 24(sp),a0
   111b6:	       move.l 24(a0),d0
   111ba:	       move.l d0,-(sp)
   111bc:	       jsr 14434 <getCostumeFromVar>
   111c2:	       addq.l #4,sp
   111c4:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   111c8:	   /-- bne.s 111d0 <builtIn_addCharacter+0x22>
   111ca:	   |   moveq #1,d0
   111cc:	/--|-- bra.w 112ac <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   111d0:	|  \-> moveq #24,d0
   111d2:	|      add.l 24(sp),d0
   111d6:	|      move.l d0,-(sp)
   111d8:	|      jsr 1510c <trimStack>
   111de:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111e0:	|      movea.l 24(sp),a0
   111e4:	|      move.l 24(a0),d0
   111e8:	|      move.l d0,-(sp)
   111ea:	|      pea 1 <_start+0x1>
   111ee:	|      lea 12(sp),a0
   111f2:	|      move.l a0,-(sp)
   111f4:	|      jsr 14788 <getValueType>
   111fa:	|      lea 12(sp),sp
   111fe:	|      tst.w d0
   11200:	|  /-- bne.s 11208 <builtIn_addCharacter+0x5a>
   11202:	|  |   moveq #1,d0
   11204:	+--|-- bra.w 112ac <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11208:	|  \-> moveq #24,d0
   1120a:	|      add.l 24(sp),d0
   1120e:	|      move.l d0,-(sp)
   11210:	|      jsr 1510c <trimStack>
   11216:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11218:	|      movea.l 24(sp),a0
   1121c:	|      move.l 24(a0),d0
   11220:	|      move.l d0,-(sp)
   11222:	|      pea 1 <_start+0x1>
   11226:	|      moveq #16,d0
   11228:	|      add.l sp,d0
   1122a:	|      move.l d0,-(sp)
   1122c:	|      jsr 14788 <getValueType>
   11232:	|      lea 12(sp),sp
   11236:	|      tst.w d0
   11238:	|  /-- bne.s 1123e <builtIn_addCharacter+0x90>
   1123a:	|  |   moveq #1,d0
   1123c:	+--|-- bra.s 112ac <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1123e:	|  \-> moveq #24,d0
   11240:	|      add.l 24(sp),d0
   11244:	|      move.l d0,-(sp)
   11246:	|      jsr 1510c <trimStack>
   1124c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1124e:	|      movea.l 24(sp),a0
   11252:	|      move.l 24(a0),d0
   11256:	|      move.l d0,-(sp)
   11258:	|      pea 7 <_start+0x7>
   1125c:	|      lea 8(sp),a0
   11260:	|      move.l a0,-(sp)
   11262:	|      jsr 14788 <getValueType>
   11268:	|      lea 12(sp),sp
   1126c:	|      tst.w d0
   1126e:	|  /-- bne.s 11274 <builtIn_addCharacter+0xc6>
   11270:	|  |   moveq #1,d0
   11272:	+--|-- bra.s 112ac <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11274:	|  \-> moveq #24,d0
   11276:	|      add.l 24(sp),d0
   1127a:	|      move.l d0,-(sp)
   1127c:	|      jsr 1510c <trimStack>
   11282:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11284:	|      movea.l (sp),a0
   11286:	|      move.l 4(sp),d1
   1128a:	|      move.l 8(sp),d0
   1128e:	|      move.l 12(sp),-(sp)
   11292:	|      move.l a0,-(sp)
   11294:	|      move.l d1,-(sp)
   11296:	|      move.l d0,-(sp)
   11298:	|      jsr 927a <addPerson>
   1129e:	|      lea 16(sp),sp
   112a2:	|      tst.w d0
   112a4:	|  /-- beq.s 112aa <builtIn_addCharacter+0xfc>
   112a6:	|  |   moveq #2,d0
   112a8:	+--|-- bra.s 112ac <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   112aa:	|  \-> moveq #1,d0
}
   112ac:	\----> lea 16(sp),sp
   112b0:	       rts

000112b2 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   112b2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112b4:	       movea.l 12(sp),a0
   112b8:	       move.l 24(a0),d0
   112bc:	       move.l d0,-(sp)
   112be:	       pea 7 <_start+0x7>
   112c2:	       move.l sp,d0
   112c4:	       addq.l #8,d0
   112c6:	       move.l d0,-(sp)
   112c8:	       jsr 14788 <getValueType>
   112ce:	       lea 12(sp),sp
   112d2:	       tst.w d0
   112d4:	   /-- bne.s 112da <builtIn_hideCharacter+0x28>
   112d6:	   |   moveq #1,d0
   112d8:	/--|-- bra.s 112fa <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   112da:	|  \-> moveq #24,d0
   112dc:	|      add.l 12(sp),d0
   112e0:	|      move.l d0,-(sp)
   112e2:	|      jsr 1510c <trimStack>
   112e8:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   112ea:	|      move.l (sp),d0
   112ec:	|      move.l d0,-(sp)
   112ee:	|      clr.l -(sp)
   112f0:	|      jsr bcb4 <setShown>
   112f6:	|      addq.l #8,sp
	return BR_CONTINUE;
   112f8:	|      moveq #2,d0
}
   112fa:	\----> addq.l #4,sp
   112fc:	       rts

000112fe <builtIn_showCharacter>:

builtIn(showCharacter)
{
   112fe:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11300:	       movea.l 12(sp),a0
   11304:	       move.l 24(a0),d0
   11308:	       move.l d0,-(sp)
   1130a:	       pea 7 <_start+0x7>
   1130e:	       move.l sp,d0
   11310:	       addq.l #8,d0
   11312:	       move.l d0,-(sp)
   11314:	       jsr 14788 <getValueType>
   1131a:	       lea 12(sp),sp
   1131e:	       tst.w d0
   11320:	   /-- bne.s 11326 <builtIn_showCharacter+0x28>
   11322:	   |   moveq #1,d0
   11324:	/--|-- bra.s 11348 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11326:	|  \-> moveq #24,d0
   11328:	|      add.l 12(sp),d0
   1132c:	|      move.l d0,-(sp)
   1132e:	|      jsr 1510c <trimStack>
   11334:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   11336:	|      move.l (sp),d0
   11338:	|      move.l d0,-(sp)
   1133a:	|      pea 1 <_start+0x1>
   1133e:	|      jsr bcb4 <setShown>
   11344:	|      addq.l #8,sp
	return BR_CONTINUE;
   11346:	|      moveq #2,d0
}
   11348:	\----> addq.l #4,sp
   1134a:	       rts

0001134c <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   1134c:	jsr 62ae <killSpeechTimers>
	killMostPeople ();
   11352:	jsr aaec <killMostPeople>
	return BR_CONTINUE;
   11358:	moveq #2,d0
}
   1135a:	rts

0001135c <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   1135c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1135e:	       movea.l 16(sp),a0
   11362:	       move.l 24(a0),d0
   11366:	       move.l d0,-(sp)
   11368:	       pea 1 <_start+0x1>
   1136c:	       move.l sp,d0
   1136e:	       addq.l #8,d0
   11370:	       move.l d0,-(sp)
   11372:	       jsr 14788 <getValueType>
   11378:	       lea 12(sp),sp
   1137c:	       tst.w d0
   1137e:	   /-- bne.s 11384 <builtIn_setCharacterDrawMode+0x28>
   11380:	   |   moveq #1,d0
   11382:	/--|-- bra.s 113de <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11384:	|  \-> moveq #24,d0
   11386:	|      add.l 16(sp),d0
   1138a:	|      move.l d0,-(sp)
   1138c:	|      jsr 1510c <trimStack>
   11392:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11394:	|      movea.l 16(sp),a0
   11398:	|      move.l 24(a0),d0
   1139c:	|      move.l d0,-(sp)
   1139e:	|      pea 7 <_start+0x7>
   113a2:	|      moveq #12,d0
   113a4:	|      add.l sp,d0
   113a6:	|      move.l d0,-(sp)
   113a8:	|      jsr 14788 <getValueType>
   113ae:	|      lea 12(sp),sp
   113b2:	|      tst.w d0
   113b4:	|  /-- bne.s 113ba <builtIn_setCharacterDrawMode+0x5e>
   113b6:	|  |   moveq #1,d0
   113b8:	+--|-- bra.s 113de <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   113ba:	|  \-> moveq #24,d0
   113bc:	|      add.l 16(sp),d0
   113c0:	|      move.l d0,-(sp)
   113c2:	|      jsr 1510c <trimStack>
   113c8:	|      addq.l #4,sp
	setDrawMode (di, obj);
   113ca:	|      move.l 4(sp),d1
   113ce:	|      move.l (sp),d0
   113d0:	|      move.l d1,-(sp)
   113d2:	|      move.l d0,-(sp)
   113d4:	|      jsr b5f2 <setDrawMode>
   113da:	|      addq.l #8,sp
	return BR_CONTINUE;
   113dc:	|      moveq #2,d0
}
   113de:	\----> addq.l #8,sp
   113e0:	       rts

000113e2 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   113e2:	pea 199ea <PutChar+0x1d66>
   113e8:	jsr 171b0 <KPrintF>
   113ee:	addq.l #4,sp
	return BR_CONTINUE;
   113f0:	moveq #2,d0
}
   113f2:	rts

000113f4 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   113f4:	pea 19a1d <PutChar+0x1d99>
   113fa:	jsr 171b0 <KPrintF>
   11400:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   11402:	moveq #2,d0
}
   11404:	rts

00011406 <builtIn_setScale>:

builtIn(setScale)
{
   11406:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11408:	       movea.l 16(sp),a0
   1140c:	       move.l 24(a0),d0
   11410:	       move.l d0,-(sp)
   11412:	       pea 1 <_start+0x1>
   11416:	       move.l sp,d0
   11418:	       addq.l #8,d0
   1141a:	       move.l d0,-(sp)
   1141c:	       jsr 14788 <getValueType>
   11422:	       lea 12(sp),sp
   11426:	       tst.w d0
   11428:	   /-- bne.s 1142e <builtIn_setScale+0x28>
   1142a:	   |   moveq #1,d0
   1142c:	/--|-- bra.s 11490 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1142e:	|  \-> moveq #24,d0
   11430:	|      add.l 16(sp),d0
   11434:	|      move.l d0,-(sp)
   11436:	|      jsr 1510c <trimStack>
   1143c:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1143e:	|      movea.l 16(sp),a0
   11442:	|      move.l 24(a0),d0
   11446:	|      move.l d0,-(sp)
   11448:	|      pea 1 <_start+0x1>
   1144c:	|      moveq #12,d0
   1144e:	|      add.l sp,d0
   11450:	|      move.l d0,-(sp)
   11452:	|      jsr 14788 <getValueType>
   11458:	|      lea 12(sp),sp
   1145c:	|      tst.w d0
   1145e:	|  /-- bne.s 11464 <builtIn_setScale+0x5e>
   11460:	|  |   moveq #1,d0
   11462:	+--|-- bra.s 11490 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11464:	|  \-> moveq #24,d0
   11466:	|      add.l 16(sp),d0
   1146a:	|      move.l d0,-(sp)
   1146c:	|      jsr 1510c <trimStack>
   11472:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11474:	|      move.l (sp),d0
   11476:	|      move.l d0,d0
   11478:	|      movea.w d0,a1
   1147a:	|      move.l 4(sp),d0
   1147e:	|      move.l d0,d0
   11480:	|      movea.w d0,a0
   11482:	|      move.l a1,-(sp)
   11484:	|      move.l a0,-(sp)
   11486:	|      jsr bc8c <setScale>
   1148c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1148e:	|      moveq #2,d0
}
   11490:	\----> addq.l #8,sp
   11492:	       rts

00011494 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11494:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11496:	       movea.l 12(sp),a0
   1149a:	       move.l 24(a0),d0
   1149e:	       move.l d0,-(sp)
   114a0:	       pea 7 <_start+0x7>
   114a4:	       move.l sp,d0
   114a6:	       addq.l #8,d0
   114a8:	       move.l d0,-(sp)
   114aa:	       jsr 14788 <getValueType>
   114b0:	       lea 12(sp),sp
   114b4:	       tst.w d0
   114b6:	   /-- bne.s 114bc <builtIn_stopCharacter+0x28>
   114b8:	   |   moveq #1,d0
   114ba:	/--|-- bra.s 114f4 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   114bc:	|  \-> moveq #24,d0
   114be:	|      add.l 12(sp),d0
   114c2:	|      move.l d0,-(sp)
   114c4:	|      jsr 1510c <trimStack>
   114ca:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   114cc:	|      move.l (sp),d0
   114ce:	|      move.l d0,-(sp)
   114d0:	|      jsr bdc0 <stopPerson>
   114d6:	|      addq.l #4,sp
   114d8:	|      movea.w d0,a0
   114da:	|      moveq #28,d0
   114dc:	|      add.l 12(sp),d0
   114e0:	|      move.l a0,-(sp)
   114e2:	|      pea 1 <_start+0x1>
   114e6:	|      move.l d0,-(sp)
   114e8:	|      jsr 1507a <setVariable>
   114ee:	|      lea 12(sp),sp
	return BR_CONTINUE;
   114f2:	|      moveq #2,d0
}
   114f4:	\----> addq.l #4,sp
   114f6:	       rts

000114f8 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   114f8:	pea 19a57 <line.c.05397aaf+0x2>
   114fe:	jsr 171b0 <KPrintF>
   11504:	addq.l #4,sp
	return BR_CONTINUE;
   11506:	moveq #2,d0
}
   11508:	rts

0001150a <builtIn_animate>:

builtIn(animate)
{
   1150a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   1150c:	       movea.l 16(sp),a0
   11510:	       move.l 24(a0),d0
   11514:	       move.l d0,-(sp)
   11516:	       jsr 14c60 <getAnimationFromVar>
   1151c:	       addq.l #4,sp
   1151e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11522:	   /-- bne.s 11528 <builtIn_animate+0x1e>
   11524:	   |   moveq #1,d0
   11526:	/--|-- bra.s 115a6 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11528:	|  \-> moveq #24,d0
   1152a:	|      add.l 16(sp),d0
   1152e:	|      move.l d0,-(sp)
   11530:	|      jsr 1510c <trimStack>
   11536:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11538:	|      movea.l 16(sp),a0
   1153c:	|      move.l 24(a0),d0
   11540:	|      move.l d0,-(sp)
   11542:	|      pea 7 <_start+0x7>
   11546:	|      move.l sp,d0
   11548:	|      addq.l #8,d0
   1154a:	|      move.l d0,-(sp)
   1154c:	|      jsr 14788 <getValueType>
   11552:	|      lea 12(sp),sp
   11556:	|      tst.w d0
   11558:	|  /-- bne.s 1155e <builtIn_animate+0x54>
   1155a:	|  |   moveq #1,d0
   1155c:	+--|-- bra.s 115a6 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1155e:	|  \-> moveq #24,d0
   11560:	|      add.l 16(sp),d0
   11564:	|      move.l d0,-(sp)
   11566:	|      jsr 1510c <trimStack>
   1156c:	|      addq.l #4,sp
	animatePerson (obj, pp);
   1156e:	|      move.l (sp),d0
   11570:	|      move.l 4(sp),-(sp)
   11574:	|      move.l d0,-(sp)
   11576:	|      jsr 94f0 <animatePerson>
   1157c:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   1157e:	|      move.l 4(sp),-(sp)
   11582:	|      jsr be14 <timeForAnim>
   11588:	|      addq.l #4,sp
   1158a:	|      move.l d0,d1
   1158c:	|      moveq #28,d0
   1158e:	|      add.l 16(sp),d0
   11592:	|      move.l d1,-(sp)
   11594:	|      pea 1 <_start+0x1>
   11598:	|      move.l d0,-(sp)
   1159a:	|      jsr 1507a <setVariable>
   115a0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115a4:	|      moveq #2,d0
}
   115a6:	\----> addq.l #8,sp
   115a8:	       rts

000115aa <builtIn_setCostume>:

builtIn(setCostume)
{
   115aa:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   115ac:	       movea.l 16(sp),a0
   115b0:	       move.l 24(a0),d0
   115b4:	       move.l d0,-(sp)
   115b6:	       jsr 14434 <getCostumeFromVar>
   115bc:	       addq.l #4,sp
   115be:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   115c2:	   /-- bne.s 115c8 <builtIn_setCostume+0x1e>
   115c4:	   |   moveq #1,d0
   115c6:	/--|-- bra.s 11620 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   115c8:	|  \-> moveq #24,d0
   115ca:	|      add.l 16(sp),d0
   115ce:	|      move.l d0,-(sp)
   115d0:	|      jsr 1510c <trimStack>
   115d6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115d8:	|      movea.l 16(sp),a0
   115dc:	|      move.l 24(a0),d0
   115e0:	|      move.l d0,-(sp)
   115e2:	|      pea 7 <_start+0x7>
   115e6:	|      move.l sp,d0
   115e8:	|      addq.l #8,d0
   115ea:	|      move.l d0,-(sp)
   115ec:	|      jsr 14788 <getValueType>
   115f2:	|      lea 12(sp),sp
   115f6:	|      tst.w d0
   115f8:	|  /-- bne.s 115fe <builtIn_setCostume+0x54>
   115fa:	|  |   moveq #1,d0
   115fc:	+--|-- bra.s 11620 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   115fe:	|  \-> moveq #24,d0
   11600:	|      add.l 16(sp),d0
   11604:	|      move.l d0,-(sp)
   11606:	|      jsr 1510c <trimStack>
   1160c:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   1160e:	|      move.l (sp),d0
   11610:	|      move.l 4(sp),-(sp)
   11614:	|      move.l d0,-(sp)
   11616:	|      jsr 953a <animatePersonUsingPersona>
   1161c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1161e:	|      moveq #2,d0
}
   11620:	\----> addq.l #8,sp
   11622:	       rts

00011624 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11624:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11626:	       movea.l 16(sp),a0
   1162a:	       move.l 24(a0),d0
   1162e:	       move.l d0,-(sp)
   11630:	       pea 1 <_start+0x1>
   11634:	       move.l sp,d0
   11636:	       addq.l #8,d0
   11638:	       move.l d0,-(sp)
   1163a:	       jsr 14788 <getValueType>
   11640:	       lea 12(sp),sp
   11644:	       tst.w d0
   11646:	   /-- bne.s 1164c <builtIn_floatCharacter+0x28>
   11648:	   |   moveq #1,d0
   1164a:	/--|-- bra.s 116c0 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1164c:	|  \-> moveq #24,d0
   1164e:	|      add.l 16(sp),d0
   11652:	|      move.l d0,-(sp)
   11654:	|      jsr 1510c <trimStack>
   1165a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1165c:	|      movea.l 16(sp),a0
   11660:	|      move.l 24(a0),d0
   11664:	|      move.l d0,-(sp)
   11666:	|      pea 7 <_start+0x7>
   1166a:	|      moveq #12,d0
   1166c:	|      add.l sp,d0
   1166e:	|      move.l d0,-(sp)
   11670:	|      jsr 14788 <getValueType>
   11676:	|      lea 12(sp),sp
   1167a:	|      tst.w d0
   1167c:	|  /-- bne.s 11682 <builtIn_floatCharacter+0x5e>
   1167e:	|  |   moveq #1,d0
   11680:	+--|-- bra.s 116c0 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11682:	|  \-> moveq #24,d0
   11684:	|      add.l 16(sp),d0
   11688:	|      move.l d0,-(sp)
   1168a:	|      jsr 1510c <trimStack>
   11690:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11692:	|      move.l 4(sp),d1
   11696:	|      move.l (sp),d0
   11698:	|      move.l d1,-(sp)
   1169a:	|      move.l d0,-(sp)
   1169c:	|      jsr a6ae <floatCharacter>
   116a2:	|      addq.l #8,sp
   116a4:	|      movea.w d0,a0
   116a6:	|      moveq #28,d0
   116a8:	|      add.l 16(sp),d0
   116ac:	|      move.l a0,-(sp)
   116ae:	|      pea 1 <_start+0x1>
   116b2:	|      move.l d0,-(sp)
   116b4:	|      jsr 1507a <setVariable>
   116ba:	|      lea 12(sp),sp
	return BR_CONTINUE;
   116be:	|      moveq #2,d0
}
   116c0:	\----> addq.l #8,sp
   116c2:	       rts

000116c4 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   116c4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116c6:	       movea.l 16(sp),a0
   116ca:	       move.l 24(a0),d0
   116ce:	       move.l d0,-(sp)
   116d0:	       pea 1 <_start+0x1>
   116d4:	       move.l sp,d0
   116d6:	       addq.l #8,d0
   116d8:	       move.l d0,-(sp)
   116da:	       jsr 14788 <getValueType>
   116e0:	       lea 12(sp),sp
   116e4:	       tst.w d0
   116e6:	   /-- bne.s 116ec <builtIn_setCharacterWalkSpeed+0x28>
   116e8:	   |   moveq #1,d0
   116ea:	/--|-- bra.s 11760 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   116ec:	|  \-> moveq #24,d0
   116ee:	|      add.l 16(sp),d0
   116f2:	|      move.l d0,-(sp)
   116f4:	|      jsr 1510c <trimStack>
   116fa:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116fc:	|      movea.l 16(sp),a0
   11700:	|      move.l 24(a0),d0
   11704:	|      move.l d0,-(sp)
   11706:	|      pea 7 <_start+0x7>
   1170a:	|      moveq #12,d0
   1170c:	|      add.l sp,d0
   1170e:	|      move.l d0,-(sp)
   11710:	|      jsr 14788 <getValueType>
   11716:	|      lea 12(sp),sp
   1171a:	|      tst.w d0
   1171c:	|  /-- bne.s 11722 <builtIn_setCharacterWalkSpeed+0x5e>
   1171e:	|  |   moveq #1,d0
   11720:	+--|-- bra.s 11760 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11722:	|  \-> moveq #24,d0
   11724:	|      add.l 16(sp),d0
   11728:	|      move.l d0,-(sp)
   1172a:	|      jsr 1510c <trimStack>
   11730:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11732:	|      move.l 4(sp),d1
   11736:	|      move.l (sp),d0
   11738:	|      move.l d1,-(sp)
   1173a:	|      move.l d0,-(sp)
   1173c:	|      jsr bc28 <setCharacterWalkSpeed>
   11742:	|      addq.l #8,sp
   11744:	|      movea.w d0,a0
   11746:	|      moveq #28,d0
   11748:	|      add.l 16(sp),d0
   1174c:	|      move.l a0,-(sp)
   1174e:	|      pea 1 <_start+0x1>
   11752:	|      move.l d0,-(sp)
   11754:	|      jsr 1507a <setVariable>
   1175a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1175e:	|      moveq #2,d0
}
   11760:	\----> addq.l #8,sp
   11762:	       rts

00011764 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11764:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11766:	       movea.l 16(sp),a0
   1176a:	       move.l 24(a0),d0
   1176e:	       move.l d0,-(sp)
   11770:	       pea 1 <_start+0x1>
   11774:	       move.l sp,d0
   11776:	       addq.l #8,d0
   11778:	       move.l d0,-(sp)
   1177a:	       jsr 14788 <getValueType>
   11780:	       lea 12(sp),sp
   11784:	       tst.w d0
   11786:	   /-- bne.s 1178c <builtIn_turnCharacter+0x28>
   11788:	   |   moveq #1,d0
   1178a:	/--|-- bra.s 11800 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1178c:	|  \-> moveq #24,d0
   1178e:	|      add.l 16(sp),d0
   11792:	|      move.l d0,-(sp)
   11794:	|      jsr 1510c <trimStack>
   1179a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1179c:	|      movea.l 16(sp),a0
   117a0:	|      move.l 24(a0),d0
   117a4:	|      move.l d0,-(sp)
   117a6:	|      pea 7 <_start+0x7>
   117aa:	|      moveq #12,d0
   117ac:	|      add.l sp,d0
   117ae:	|      move.l d0,-(sp)
   117b0:	|      jsr 14788 <getValueType>
   117b6:	|      lea 12(sp),sp
   117ba:	|      tst.w d0
   117bc:	|  /-- bne.s 117c2 <builtIn_turnCharacter+0x5e>
   117be:	|  |   moveq #1,d0
   117c0:	+--|-- bra.s 11800 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   117c2:	|  \-> moveq #24,d0
   117c4:	|      add.l 16(sp),d0
   117c8:	|      move.l d0,-(sp)
   117ca:	|      jsr 1510c <trimStack>
   117d0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   117d2:	|      move.l (sp),d1
   117d4:	|      move.l 4(sp),d0
   117d8:	|      move.l d1,-(sp)
   117da:	|      move.l d0,-(sp)
   117dc:	|      jsr becc <turnPersonToFace>
   117e2:	|      addq.l #8,sp
   117e4:	|      movea.w d0,a0
   117e6:	|      moveq #28,d0
   117e8:	|      add.l 16(sp),d0
   117ec:	|      move.l a0,-(sp)
   117ee:	|      pea 1 <_start+0x1>
   117f2:	|      move.l d0,-(sp)
   117f4:	|      jsr 1507a <setVariable>
   117fa:	|      lea 12(sp),sp
	return BR_CONTINUE;
   117fe:	|      moveq #2,d0
}
   11800:	\----> addq.l #8,sp
   11802:	       rts

00011804 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11804:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11806:	       movea.l 16(sp),a0
   1180a:	       move.l 24(a0),d0
   1180e:	       move.l d0,-(sp)
   11810:	       pea 1 <_start+0x1>
   11814:	       move.l sp,d0
   11816:	       addq.l #8,d0
   11818:	       move.l d0,-(sp)
   1181a:	       jsr 14788 <getValueType>
   11820:	       lea 12(sp),sp
   11824:	       tst.w d0
   11826:	   /-- bne.s 1182c <builtIn_setCharacterExtra+0x28>
   11828:	   |   moveq #1,d0
   1182a:	/--|-- bra.s 118a0 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1182c:	|  \-> moveq #24,d0
   1182e:	|      add.l 16(sp),d0
   11832:	|      move.l d0,-(sp)
   11834:	|      jsr 1510c <trimStack>
   1183a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1183c:	|      movea.l 16(sp),a0
   11840:	|      move.l 24(a0),d0
   11844:	|      move.l d0,-(sp)
   11846:	|      pea 7 <_start+0x7>
   1184a:	|      moveq #12,d0
   1184c:	|      add.l sp,d0
   1184e:	|      move.l d0,-(sp)
   11850:	|      jsr 14788 <getValueType>
   11856:	|      lea 12(sp),sp
   1185a:	|      tst.w d0
   1185c:	|  /-- bne.s 11862 <builtIn_setCharacterExtra+0x5e>
   1185e:	|  |   moveq #1,d0
   11860:	+--|-- bra.s 118a0 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11862:	|  \-> moveq #24,d0
   11864:	|      add.l 16(sp),d0
   11868:	|      move.l d0,-(sp)
   1186a:	|      jsr 1510c <trimStack>
   11870:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11872:	|      move.l (sp),d1
   11874:	|      move.l 4(sp),d0
   11878:	|      move.l d1,-(sp)
   1187a:	|      move.l d0,-(sp)
   1187c:	|      jsr bc56 <setPersonExtra>
   11882:	|      addq.l #8,sp
   11884:	|      movea.w d0,a0
   11886:	|      moveq #28,d0
   11888:	|      add.l 16(sp),d0
   1188c:	|      move.l a0,-(sp)
   1188e:	|      pea 1 <_start+0x1>
   11892:	|      move.l d0,-(sp)
   11894:	|      jsr 1507a <setVariable>
   1189a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1189e:	|      moveq #2,d0
}
   118a0:	\----> addq.l #8,sp
   118a2:	       rts

000118a4 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   118a4:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118a6:	       movea.l 12(sp),a0
   118aa:	       move.l 24(a0),d0
   118ae:	       move.l d0,-(sp)
   118b0:	       pea 7 <_start+0x7>
   118b4:	       move.l sp,d0
   118b6:	       addq.l #8,d0
   118b8:	       move.l d0,-(sp)
   118ba:	       jsr 14788 <getValueType>
   118c0:	       lea 12(sp),sp
   118c4:	       tst.w d0
   118c6:	   /-- bne.s 118cc <builtIn_removeCharacter+0x28>
   118c8:	   |   moveq #1,d0
   118ca:	/--|-- bra.s 118ea <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   118cc:	|  \-> moveq #24,d0
   118ce:	|      add.l 12(sp),d0
   118d2:	|      move.l d0,-(sp)
   118d4:	|      jsr 1510c <trimStack>
   118da:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   118dc:	|      move.l (sp),d0
   118de:	|      move.l d0,-(sp)
   118e0:	|      jsr ae56 <removeOneCharacter>
   118e6:	|      addq.l #4,sp
	return BR_CONTINUE;
   118e8:	|      moveq #2,d0
}
   118ea:	\----> addq.l #4,sp
   118ec:	       rts

000118ee <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   118ee:	                lea -28(sp),sp
   118f2:	                move.l d2,-(sp)
   118f4:	                move.l 44(sp),d1
   118f8:	                move.l 48(sp),d0
   118fc:	                move.w d1,d1
   118fe:	                move.w d1,6(sp)
   11902:	                move.w d0,d0
   11904:	                move.w d0,4(sp)
	switch (numParams) {
   11908:	                moveq #2,d0
   1190a:	                cmp.l 36(sp),d0
   1190e:	      /-------- beq.w 11a50 <moveChr+0x162>
   11912:	      |         moveq #3,d0
   11914:	      |         cmp.l 36(sp),d0
   11918:	/-----|-------- bne.w 11b84 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1191c:	|     |         movea.l 40(sp),a0
   11920:	|     |         move.l 24(a0),d0
   11924:	|     |         move.l d0,-(sp)
   11926:	|     |         pea 1 <_start+0x1>
   1192a:	|     |         lea 20(sp),a0
   1192e:	|     |         move.l a0,-(sp)
   11930:	|     |         jsr 14788 <getValueType>
   11936:	|     |         lea 12(sp),sp
   1193a:	|     |         tst.w d0
   1193c:	|     |     /-- bne.s 11944 <moveChr+0x56>
   1193e:	|     |     |   moveq #1,d0
   11940:	|  /--|-----|-- bra.w 11b94 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11944:	|  |  |     \-> moveq #24,d0
   11946:	|  |  |         add.l 40(sp),d0
   1194a:	|  |  |         move.l d0,-(sp)
   1194c:	|  |  |         jsr 1510c <trimStack>
   11952:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11954:	|  |  |         movea.l 40(sp),a0
   11958:	|  |  |         move.l 24(a0),d0
   1195c:	|  |  |         move.l d0,-(sp)
   1195e:	|  |  |         pea 1 <_start+0x1>
   11962:	|  |  |         lea 24(sp),a0
   11966:	|  |  |         move.l a0,-(sp)
   11968:	|  |  |         jsr 14788 <getValueType>
   1196e:	|  |  |         lea 12(sp),sp
   11972:	|  |  |         tst.w d0
   11974:	|  |  |     /-- bne.s 1197c <moveChr+0x8e>
   11976:	|  |  |     |   moveq #1,d0
   11978:	|  +--|-----|-- bra.w 11b94 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1197c:	|  |  |     \-> moveq #24,d0
   1197e:	|  |  |         add.l 40(sp),d0
   11982:	|  |  |         move.l d0,-(sp)
   11984:	|  |  |         jsr 1510c <trimStack>
   1198a:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1198c:	|  |  |         movea.l 40(sp),a0
   11990:	|  |  |         move.l 24(a0),d0
   11994:	|  |  |         move.l d0,-(sp)
   11996:	|  |  |         pea 7 <_start+0x7>
   1199a:	|  |  |         lea 16(sp),a0
   1199e:	|  |  |         move.l a0,-(sp)
   119a0:	|  |  |         jsr 14788 <getValueType>
   119a6:	|  |  |         lea 12(sp),sp
   119aa:	|  |  |         tst.w d0
   119ac:	|  |  |     /-- bne.s 119b4 <moveChr+0xc6>
   119ae:	|  |  |     |   moveq #1,d0
   119b0:	|  +--|-----|-- bra.w 11b94 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   119b4:	|  |  |     \-> moveq #24,d0
   119b6:	|  |  |         add.l 40(sp),d0
   119ba:	|  |  |         move.l d0,-(sp)
   119bc:	|  |  |         jsr 1510c <trimStack>
   119c2:	|  |  |         addq.l #4,sp

			if (force) {
   119c4:	|  |  |         tst.w 6(sp)
   119c8:	|  |  |     /-- beq.s 119f8 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   119ca:	|  |  |     |   movea.l 8(sp),a0
   119ce:	|  |  |     |   move.l 12(sp),d1
   119d2:	|  |  |     |   move.l 16(sp),d0
   119d6:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb4d06>
   119da:	|  |  |     |   move.l 44(sp),-(sp)
   119de:	|  |  |     |   move.l a0,-(sp)
   119e0:	|  |  |     |   move.l d1,-(sp)
   119e2:	|  |  |     |   move.l d0,-(sp)
   119e4:	|  |  |     |   jsr a6d2 <forceWalkingPerson>
   119ea:	|  |  |     |   lea 20(sp),sp
   119ee:	|  |  |     |   tst.w d0
   119f0:	|  |  |  /--|-- beq.s 11a4a <moveChr+0x15c>
   119f2:	|  |  |  |  |   moveq #3,d0
   119f4:	|  +--|--|--|-- bra.w 11b94 <moveChr+0x2a6>
			} else if (immediate) {
   119f8:	|  |  |  |  \-> tst.w 4(sp)
   119fc:	|  |  |  |  /-- beq.s 11a1c <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   119fe:	|  |  |  |  |   movea.l 8(sp),a0
   11a02:	|  |  |  |  |   move.l 12(sp),d1
   11a06:	|  |  |  |  |   move.l 16(sp),d0
   11a0a:	|  |  |  |  |   move.l a0,-(sp)
   11a0c:	|  |  |  |  |   move.l d1,-(sp)
   11a0e:	|  |  |  |  |   move.l d0,-(sp)
   11a10:	|  |  |  |  |   jsr a9da <jumpPerson>
   11a16:	|  |  |  |  |   lea 12(sp),sp
   11a1a:	|  |  |  +--|-- bra.s 11a4a <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11a1c:	|  |  |  |  \-> movea.l 8(sp),a0
   11a20:	|  |  |  |      move.l 12(sp),d1
   11a24:	|  |  |  |      move.l 16(sp),d0
   11a28:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb4d06>
   11a2c:	|  |  |  |      move.l 44(sp),-(sp)
   11a30:	|  |  |  |      move.l a0,-(sp)
   11a32:	|  |  |  |      move.l d1,-(sp)
   11a34:	|  |  |  |      move.l d0,-(sp)
   11a36:	|  |  |  |      jsr abaa <makeWalkingPerson>
   11a3c:	|  |  |  |      lea 20(sp),sp
   11a40:	|  |  |  |      tst.w d0
   11a42:	|  |  |  +----- beq.s 11a4a <moveChr+0x15c>
   11a44:	|  |  |  |      moveq #3,d0
   11a46:	|  +--|--|----- bra.w 11b94 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11a4a:	|  |  |  \----> moveq #2,d0
   11a4c:	|  +--|-------- bra.w 11b94 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a50:	|  |  \-------> movea.l 40(sp),a0
   11a54:	|  |            move.l 24(a0),d0
   11a58:	|  |            move.l d0,-(sp)
   11a5a:	|  |            pea 7 <_start+0x7>
   11a5e:	|  |            moveq #32,d0
   11a60:	|  |            add.l sp,d0
   11a62:	|  |            move.l d0,-(sp)
   11a64:	|  |            jsr 14788 <getValueType>
   11a6a:	|  |            lea 12(sp),sp
   11a6e:	|  |            tst.w d0
   11a70:	|  |        /-- bne.s 11a78 <moveChr+0x18a>
   11a72:	|  |        |   moveq #1,d0
   11a74:	|  +--------|-- bra.w 11b94 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a78:	|  |        \-> moveq #24,d0
   11a7a:	|  |            add.l 40(sp),d0
   11a7e:	|  |            move.l d0,-(sp)
   11a80:	|  |            jsr 1510c <trimStack>
   11a86:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a88:	|  |            movea.l 40(sp),a0
   11a8c:	|  |            move.l 24(a0),d0
   11a90:	|  |            move.l d0,-(sp)
   11a92:	|  |            pea 7 <_start+0x7>
   11a96:	|  |            lea 28(sp),a0
   11a9a:	|  |            move.l a0,-(sp)
   11a9c:	|  |            jsr 14788 <getValueType>
   11aa2:	|  |            lea 12(sp),sp
   11aa6:	|  |            tst.w d0
   11aa8:	|  |        /-- bne.s 11ab0 <moveChr+0x1c2>
   11aaa:	|  |        |   moveq #1,d0
   11aac:	|  +--------|-- bra.w 11b94 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ab0:	|  |        \-> moveq #24,d0
   11ab2:	|  |            add.l 40(sp),d0
   11ab6:	|  |            move.l d0,-(sp)
   11ab8:	|  |            jsr 1510c <trimStack>
   11abe:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11ac0:	|  |            move.l 24(sp),d0
   11ac4:	|  |            move.l d0,-(sp)
   11ac6:	|  |            jsr 159d2 <getRegionForObject>
   11acc:	|  |            addq.l #4,sp
   11ace:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11ad2:	|  |        /-- bne.s 11ada <moveChr+0x1ec>
   11ad4:	|  |        |   moveq #2,d0
   11ad6:	|  +--------|-- bra.w 11b94 <moveChr+0x2a6>

			if (force)
   11ada:	|  |        \-> tst.w 6(sp)
   11ade:	|  |        /-- beq.s 11b1a <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11ae0:	|  |        |   movea.l 28(sp),a0
   11ae4:	|  |        |   move.l 24(a0),d2
   11ae8:	|  |        |   movea.l 20(sp),a1
   11aec:	|  |        |   movea.l 28(sp),a0
   11af0:	|  |        |   move.l 20(a0),d1
   11af4:	|  |        |   movea.l 28(sp),a0
   11af8:	|  |        |   move.l 16(a0),d0
   11afc:	|  |        |   move.l d2,-(sp)
   11afe:	|  |        |   move.l 44(sp),-(sp)
   11b02:	|  |        |   move.l a1,-(sp)
   11b04:	|  |        |   move.l d1,-(sp)
   11b06:	|  |        |   move.l d0,-(sp)
   11b08:	|  |        |   jsr a6d2 <forceWalkingPerson>
   11b0e:	|  |        |   lea 20(sp),sp
   11b12:	|  |        |   tst.w d0
   11b14:	|  |     /--|-- beq.s 11b80 <moveChr+0x292>
   11b16:	|  |     |  |   moveq #3,d0
   11b18:	|  +-----|--|-- bra.s 11b94 <moveChr+0x2a6>
			}
			else if (immediate)
   11b1a:	|  |     |  \-> tst.w 4(sp)
   11b1e:	|  |     |  /-- beq.s 11b46 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11b20:	|  |     |  |   movea.l 20(sp),a1
   11b24:	|  |     |  |   movea.l 28(sp),a0
   11b28:	|  |     |  |   move.l 20(a0),d1
   11b2c:	|  |     |  |   movea.l 28(sp),a0
   11b30:	|  |     |  |   move.l 16(a0),d0
   11b34:	|  |     |  |   move.l a1,-(sp)
   11b36:	|  |     |  |   move.l d1,-(sp)
   11b38:	|  |     |  |   move.l d0,-(sp)
   11b3a:	|  |     |  |   jsr a9da <jumpPerson>
   11b40:	|  |     |  |   lea 12(sp),sp
   11b44:	|  |     +--|-- bra.s 11b80 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11b46:	|  |     |  \-> movea.l 28(sp),a0
   11b4a:	|  |     |      move.l 24(a0),d2
   11b4e:	|  |     |      movea.l 20(sp),a1
   11b52:	|  |     |      movea.l 28(sp),a0
   11b56:	|  |     |      move.l 20(a0),d1
   11b5a:	|  |     |      movea.l 28(sp),a0
   11b5e:	|  |     |      move.l 16(a0),d0
   11b62:	|  |     |      move.l d2,-(sp)
   11b64:	|  |     |      move.l 44(sp),-(sp)
   11b68:	|  |     |      move.l a1,-(sp)
   11b6a:	|  |     |      move.l d1,-(sp)
   11b6c:	|  |     |      move.l d0,-(sp)
   11b6e:	|  |     |      jsr abaa <makeWalkingPerson>
   11b74:	|  |     |      lea 20(sp),sp
   11b78:	|  |     |      tst.w d0
   11b7a:	|  |     +----- beq.s 11b80 <moveChr+0x292>
   11b7c:	|  |     |      moveq #3,d0
   11b7e:	|  +-----|----- bra.s 11b94 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11b80:	|  |     \----> moveq #2,d0
   11b82:	|  +----------- bra.s 11b94 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11b84:	\--|----------> pea 19a75 <line.c.05397aaf+0x20>
   11b8a:	   |            jsr 171b0 <KPrintF>
   11b90:	   |            addq.l #4,sp
			return BR_ERROR;
   11b92:	   |            moveq #1,d0
	}
}
   11b94:	   \----------> move.l (sp)+,d2
   11b96:	                lea 28(sp),sp
   11b9a:	                rts

00011b9c <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11b9c:	clr.l -(sp)
   11b9e:	clr.l -(sp)
   11ba0:	move.l 16(sp),-(sp)
   11ba4:	move.l 16(sp),-(sp)
   11ba8:	jsr 118ee <moveChr>
   11bae:	lea 16(sp),sp
}
   11bb2:	rts

00011bb4 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11bb4:	clr.l -(sp)
   11bb6:	pea 1 <_start+0x1>
   11bba:	move.l 16(sp),-(sp)
   11bbe:	move.l 16(sp),-(sp)
   11bc2:	jsr 118ee <moveChr>
   11bc8:	lea 16(sp),sp
}
   11bcc:	rts

00011bce <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11bce:	pea 1 <_start+0x1>
   11bd2:	clr.l -(sp)
   11bd4:	move.l 16(sp),-(sp)
   11bd8:	move.l 16(sp),-(sp)
   11bdc:	jsr 118ee <moveChr>
   11be2:	lea 16(sp),sp
}
   11be6:	rts

00011be8 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11be8:	jsr 79a8 <clearStatusBar>
	return BR_CONTINUE;
   11bee:	moveq #2,d0
}
   11bf0:	rts

00011bf2 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11bf2:	jsr 7a50 <killLastStatus>
	return BR_CONTINUE;
   11bf8:	moveq #2,d0
}
   11bfa:	rts

00011bfc <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11bfc:	jsr 793e <addStatusBar>
	return BR_CONTINUE;
   11c02:	moveq #2,d0
}
   11c04:	rts

00011c06 <builtIn_statusText>:

builtIn(statusText)
{
   11c06:	       subq.l #8,sp
   11c08:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11c0a:	       movea.l 20(sp),a0
   11c0e:	       move.l 24(a0),d0
   11c12:	       move.l d0,-(sp)
   11c14:	       jsr 14d5e <getTextFromAnyVar>
   11c1a:	       addq.l #4,sp
   11c1c:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11c20:	   /-- bne.s 11c26 <builtIn_statusText+0x20>
   11c22:	   |   moveq #1,d0
   11c24:	/--|-- bra.s 11c5a <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11c26:	|  \-> moveq #24,d0
   11c28:	|      add.l 20(sp),d0
   11c2c:	|      move.l d0,-(sp)
   11c2e:	|      jsr 1510c <trimStack>
   11c34:	|      addq.l #4,sp
	setStatusBar(newText);
   11c36:	|      move.l 8(sp),-(sp)
   11c3a:	|      jsr 7cd0 <setStatusBar>
   11c40:	|      addq.l #4,sp
	FreeVec(newText);
   11c42:	|      move.l 8(sp),4(sp)
   11c48:	|      move.l 1c896 <SysBase>,d0
   11c4e:	|      movea.l d0,a6
   11c50:	|      movea.l 4(sp),a1
   11c54:	|      jsr -690(a6)
	return BR_CONTINUE;
   11c58:	|      moveq #2,d0
}
   11c5a:	\----> movea.l (sp)+,a6
   11c5c:	       addq.l #8,sp
   11c5e:	       rts

00011c60 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11c60:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c62:	       movea.l 12(sp),a0
   11c66:	       move.l 24(a0),d0
   11c6a:	       move.l d0,-(sp)
   11c6c:	       pea 1 <_start+0x1>
   11c70:	       move.l sp,d0
   11c72:	       addq.l #8,d0
   11c74:	       move.l d0,-(sp)
   11c76:	       jsr 14788 <getValueType>
   11c7c:	       lea 12(sp),sp
   11c80:	       tst.w d0
   11c82:	   /-- bne.s 11c88 <builtIn_lightStatus+0x28>
   11c84:	   |   moveq #1,d0
   11c86:	/--|-- bra.s 11ca6 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11c88:	|  \-> moveq #24,d0
   11c8a:	|      add.l 12(sp),d0
   11c8e:	|      move.l d0,-(sp)
   11c90:	|      jsr 1510c <trimStack>
   11c96:	|      addq.l #4,sp
	setLitStatus (val);
   11c98:	|      move.l (sp),d0
   11c9a:	|      move.l d0,-(sp)
   11c9c:	|      jsr 7cc0 <setLitStatus>
   11ca2:	|      addq.l #4,sp
	return BR_CONTINUE;
   11ca4:	|      moveq #2,d0
}
   11ca6:	\----> addq.l #4,sp
   11ca8:	       rts

00011caa <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11caa:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cac:	       movea.l 16(sp),a0
   11cb0:	       move.l 24(a0),d0
   11cb4:	       move.l d0,-(sp)
   11cb6:	       pea 1 <_start+0x1>
   11cba:	       move.l sp,d0
   11cbc:	       addq.l #8,d0
   11cbe:	       move.l d0,-(sp)
   11cc0:	       jsr 14788 <getValueType>
   11cc6:	       lea 12(sp),sp
   11cca:	       tst.w d0
   11ccc:	   /-- bne.s 11cd2 <builtIn_positionStatus+0x28>
   11cce:	   |   moveq #1,d0
   11cd0:	/--|-- bra.s 11d2c <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11cd2:	|  \-> moveq #24,d0
   11cd4:	|      add.l 16(sp),d0
   11cd8:	|      move.l d0,-(sp)
   11cda:	|      jsr 1510c <trimStack>
   11ce0:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ce2:	|      movea.l 16(sp),a0
   11ce6:	|      move.l 24(a0),d0
   11cea:	|      move.l d0,-(sp)
   11cec:	|      pea 1 <_start+0x1>
   11cf0:	|      moveq #12,d0
   11cf2:	|      add.l sp,d0
   11cf4:	|      move.l d0,-(sp)
   11cf6:	|      jsr 14788 <getValueType>
   11cfc:	|      lea 12(sp),sp
   11d00:	|      tst.w d0
   11d02:	|  /-- bne.s 11d08 <builtIn_positionStatus+0x5e>
   11d04:	|  |   moveq #1,d0
   11d06:	+--|-- bra.s 11d2c <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11d08:	|  \-> moveq #24,d0
   11d0a:	|      add.l 16(sp),d0
   11d0e:	|      move.l d0,-(sp)
   11d10:	|      jsr 1510c <trimStack>
   11d16:	|      addq.l #4,sp
	positionStatus (x, y);
   11d18:	|      move.l (sp),d1
   11d1a:	|      move.l 4(sp),d0
   11d1e:	|      move.l d1,-(sp)
   11d20:	|      move.l d0,-(sp)
   11d22:	|      jsr 7ab2 <positionStatus>
   11d28:	|      addq.l #8,sp
	return BR_CONTINUE;
   11d2a:	|      moveq #2,d0
}
   11d2c:	\----> addq.l #8,sp
   11d2e:	       rts

00011d30 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11d30:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d32:	       movea.l 12(sp),a0
   11d36:	       move.l 24(a0),d0
   11d3a:	       move.l d0,-(sp)
   11d3c:	       pea 1 <_start+0x1>
   11d40:	       move.l sp,d0
   11d42:	       addq.l #8,d0
   11d44:	       move.l d0,-(sp)
   11d46:	       jsr 14788 <getValueType>
   11d4c:	       lea 12(sp),sp
   11d50:	       tst.w d0
   11d52:	   /-- bne.s 11d58 <builtIn_alignStatus+0x28>
   11d54:	   |   moveq #1,d0
   11d56:	/--|-- bra.s 11d78 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11d58:	|  \-> moveq #24,d0
   11d5a:	|      add.l 12(sp),d0
   11d5e:	|      move.l d0,-(sp)
   11d60:	|      jsr 1510c <trimStack>
   11d66:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11d68:	|      move.l (sp),d0
   11d6a:	|      movea.l 1c21c <nowStatus>,a0
   11d70:	|      move.l d0,d0
   11d72:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11d76:	|      moveq #2,d0
}
   11d78:	\----> addq.l #4,sp
   11d7a:	       rts

00011d7c <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11d7c:	             tst.l 4(sp)
   11d80:	      /----- beq.s 11d8c <getFuncNumForCallback+0x10>
   11d82:	      |      moveq #1,d0
   11d84:	      |      cmp.l 4(sp),d0
   11d88:	      |  /-- beq.s 11d92 <getFuncNumForCallback+0x16>
   11d8a:	   /--|--|-- bra.s 11dc8 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11d8c:	   |  \--|-> clr.l 12(sp)
			break;
   11d90:	/--|-----|-- bra.s 11dda <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11d92:	|  |     \-> movea.l 8(sp),a0
   11d96:	|  |         move.l 24(a0),d0
   11d9a:	|  |         move.l d0,-(sp)
   11d9c:	|  |         pea 2 <_start+0x2>
   11da0:	|  |         move.l 20(sp),-(sp)
   11da4:	|  |         jsr 14788 <getValueType>
   11daa:	|  |         lea 12(sp),sp
   11dae:	|  |         tst.w d0
   11db0:	|  |     /-- bne.s 11db6 <getFuncNumForCallback+0x3a>
   11db2:	|  |     |   clr.w d0
   11db4:	|  |  /--|-- bra.s 11ddc <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11db6:	|  |  |  \-> moveq #24,d0
   11db8:	|  |  |      add.l 8(sp),d0
   11dbc:	|  |  |      move.l d0,-(sp)
   11dbe:	|  |  |      jsr 1510c <trimStack>
   11dc4:	|  |  |      addq.l #4,sp
			break;
   11dc6:	+--|--|----- bra.s 11dda <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11dc8:	|  \--|----> pea 19aab <line.c.05397aaf+0x56>
   11dce:	|     |      jsr 171b0 <KPrintF>
   11dd4:	|     |      addq.l #4,sp
			return FALSE;
   11dd6:	|     |      clr.w d0
   11dd8:	|     +----- bra.s 11ddc <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11dda:	\-----|----> moveq #1,d0
}
   11ddc:	      \----> rts

00011dde <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11dde:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11de0:	       move.l sp,d0
   11de2:	       move.l d0,-(sp)
   11de4:	       move.l 16(sp),-(sp)
   11de8:	       move.l 16(sp),-(sp)
   11dec:	       jsr 11d7c <getFuncNumForCallback>
   11df2:	       lea 12(sp),sp
   11df6:	       tst.w d0
   11df8:	/----- beq.s 11e08 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11dfa:	|      movea.l 1c20e <currentEvents>,a0
   11e00:	|      move.l (sp),d0
   11e02:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11e04:	|      moveq #2,d0
   11e06:	|  /-- bra.s 11e0a <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11e08:	\--|-> moveq #1,d0
}
   11e0a:	   \-> addq.l #4,sp
   11e0c:	       rts

00011e0e <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11e0e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e10:	       move.l sp,d0
   11e12:	       move.l d0,-(sp)
   11e14:	       move.l 16(sp),-(sp)
   11e18:	       move.l 16(sp),-(sp)
   11e1c:	       jsr 11d7c <getFuncNumForCallback>
   11e22:	       lea 12(sp),sp
   11e26:	       tst.w d0
   11e28:	/----- beq.s 11e3a <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11e2a:	|      movea.l 1c20e <currentEvents>,a0
   11e30:	|      move.l (sp),d0
   11e32:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11e36:	|      moveq #2,d0
   11e38:	|  /-- bra.s 11e3c <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11e3a:	\--|-> moveq #1,d0
}
   11e3c:	   \-> addq.l #4,sp
   11e3e:	       rts

00011e40 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11e40:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e42:	       move.l sp,d0
   11e44:	       move.l d0,-(sp)
   11e46:	       move.l 16(sp),-(sp)
   11e4a:	       move.l 16(sp),-(sp)
   11e4e:	       jsr 11d7c <getFuncNumForCallback>
   11e54:	       lea 12(sp),sp
   11e58:	       tst.w d0
   11e5a:	/----- beq.s 11e6c <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11e5c:	|      movea.l 1c20e <currentEvents>,a0
   11e62:	|      move.l (sp),d0
   11e64:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11e68:	|      moveq #2,d0
   11e6a:	|  /-- bra.s 11e6e <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11e6c:	\--|-> moveq #1,d0
}
   11e6e:	   \-> addq.l #4,sp
   11e70:	       rts

00011e72 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11e72:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e74:	       move.l sp,d0
   11e76:	       move.l d0,-(sp)
   11e78:	       move.l 16(sp),-(sp)
   11e7c:	       move.l 16(sp),-(sp)
   11e80:	       jsr 11d7c <getFuncNumForCallback>
   11e86:	       lea 12(sp),sp
   11e8a:	       tst.w d0
   11e8c:	/----- beq.s 11e9e <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11e8e:	|      movea.l 1c20e <currentEvents>,a0
   11e94:	|      move.l (sp),d0
   11e96:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11e9a:	|      moveq #2,d0
   11e9c:	|  /-- bra.s 11ea0 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11e9e:	\--|-> moveq #1,d0
}
   11ea0:	   \-> addq.l #4,sp
   11ea2:	       rts

00011ea4 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11ea4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ea6:	       move.l sp,d0
   11ea8:	       move.l d0,-(sp)
   11eaa:	       move.l 16(sp),-(sp)
   11eae:	       move.l 16(sp),-(sp)
   11eb2:	       jsr 11d7c <getFuncNumForCallback>
   11eb8:	       lea 12(sp),sp
   11ebc:	       tst.w d0
   11ebe:	/----- beq.s 11ed0 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11ec0:	|      movea.l 1c20e <currentEvents>,a0
   11ec6:	|      move.l (sp),d0
   11ec8:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11ecc:	|      moveq #2,d0
   11ece:	|  /-- bra.s 11ed2 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11ed0:	\--|-> moveq #1,d0
}
   11ed2:	   \-> addq.l #4,sp
   11ed4:	       rts

00011ed6 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11ed6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ed8:	       move.l sp,d0
   11eda:	       move.l d0,-(sp)
   11edc:	       move.l 16(sp),-(sp)
   11ee0:	       move.l 16(sp),-(sp)
   11ee4:	       jsr 11d7c <getFuncNumForCallback>
   11eea:	       lea 12(sp),sp
   11eee:	       tst.w d0
   11ef0:	/----- beq.s 11f02 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11ef2:	|      movea.l 1c20e <currentEvents>,a0
   11ef8:	|      move.l (sp),d0
   11efa:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11efe:	|      moveq #2,d0
   11f00:	|  /-- bra.s 11f04 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11f02:	\--|-> moveq #1,d0
}
   11f04:	   \-> addq.l #4,sp
   11f06:	       rts

00011f08 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11f08:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f0a:	       move.l sp,d0
   11f0c:	       move.l d0,-(sp)
   11f0e:	       move.l 16(sp),-(sp)
   11f12:	       move.l 16(sp),-(sp)
   11f16:	       jsr 11d7c <getFuncNumForCallback>
   11f1c:	       lea 12(sp),sp
   11f20:	       tst.w d0
   11f22:	/----- beq.s 11f34 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11f24:	|      movea.l 1c20e <currentEvents>,a0
   11f2a:	|      move.l (sp),d0
   11f2c:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11f30:	|      moveq #2,d0
   11f32:	|  /-- bra.s 11f36 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11f34:	\--|-> moveq #1,d0
}
   11f36:	   \-> addq.l #4,sp
   11f38:	       rts

00011f3a <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11f3a:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f3c:	          move.l sp,d0
   11f3e:	          move.l d0,-(sp)
   11f40:	          move.l 16(sp),-(sp)
   11f44:	          move.l 16(sp),-(sp)
   11f48:	          jsr 11d7c <getFuncNumForCallback>
   11f4e:	          lea 12(sp),sp
   11f52:	          tst.w d0
   11f54:	/-------- beq.s 11f80 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11f56:	|         move.l 1c866 <noStack>,d1
   11f5c:	|         move.l (sp),d0
   11f5e:	|         pea 1 <_start+0x1>
   11f62:	|         move.l d1,-(sp)
   11f64:	|         clr.l -(sp)
   11f66:	|         clr.l -(sp)
   11f68:	|         move.l d0,-(sp)
   11f6a:	|         jsr 6b82 <startNewFunctionNum>
   11f70:	|         lea 20(sp),sp
   11f74:	|         tst.l d0
   11f76:	|     /-- bne.s 11f7c <builtIn_spawnSub+0x42>
   11f78:	|     |   moveq #1,d0
   11f7a:	|  /--|-- bra.s 11f82 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11f7c:	|  |  \-> moveq #2,d0
   11f7e:	|  +----- bra.s 11f82 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11f80:	\--|----> moveq #1,d0
}
   11f82:	   \----> addq.l #4,sp
   11f84:	          rts

00011f86 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11f86:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f88:	          move.l sp,d0
   11f8a:	          addq.l #4,d0
   11f8c:	          move.l d0,-(sp)
   11f8e:	          move.l 20(sp),-(sp)
   11f92:	          move.l 20(sp),-(sp)
   11f96:	          jsr 11d7c <getFuncNumForCallback>
   11f9c:	          lea 12(sp),sp
   11fa0:	          tst.w d0
   11fa2:	/-------- beq.s 11fd8 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11fa4:	|         move.l 4(sp),d1
   11fa8:	|         move.l sp,d0
   11faa:	|         addq.l #2,d0
   11fac:	|         move.l d0,-(sp)
   11fae:	|         move.l 20(sp),-(sp)
   11fb2:	|         move.l d1,-(sp)
   11fb4:	|         jsr 48a8 <cancelAFunction>
   11fba:	|         lea 12(sp),sp
		if (killedMyself) {
   11fbe:	|         move.w 2(sp),d0
   11fc2:	|  /----- beq.s 11fd4 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11fc4:	|  |      move.l 16(sp),-(sp)
   11fc8:	|  |      jsr 47c6 <abortFunction>
   11fce:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11fd0:	|  |      moveq #5,d0
   11fd2:	|  |  /-- bra.s 11fda <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11fd4:	|  \--|-> moveq #2,d0
   11fd6:	|     +-- bra.s 11fda <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11fd8:	\-----|-> moveq #1,d0
}
   11fda:	      \-> addq.l #8,sp
   11fdc:	          rts

00011fde <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11fde:	       subq.l #8,sp
   11fe0:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11fe2:	       movea.l 20(sp),a0
   11fe6:	       move.l 24(a0),d0
   11fea:	       move.l d0,-(sp)
   11fec:	       jsr 14d5e <getTextFromAnyVar>
   11ff2:	       addq.l #4,sp
   11ff4:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11ff8:	   /-- bne.s 11ffe <builtIn_stringWidth+0x20>
   11ffa:	   |   moveq #1,d0
   11ffc:	/--|-- bra.s 1204c <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11ffe:	|  \-> moveq #24,d0
   12000:	|      add.l 20(sp),d0
   12004:	|      move.l d0,-(sp)
   12006:	|      jsr 1510c <trimStack>
   1200c:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   1200e:	|      move.l 8(sp),-(sp)
   12012:	|      jsr 15872 <stringWidth>
   12018:	|      addq.l #4,sp
   1201a:	|      move.l d0,d1
   1201c:	|      moveq #28,d0
   1201e:	|      add.l 20(sp),d0
   12022:	|      move.l d1,-(sp)
   12024:	|      pea 1 <_start+0x1>
   12028:	|      move.l d0,-(sp)
   1202a:	|      jsr 1507a <setVariable>
   12030:	|      lea 12(sp),sp
	FreeVec(theText);
   12034:	|      move.l 8(sp),4(sp)
   1203a:	|      move.l 1c896 <SysBase>,d0
   12040:	|      movea.l d0,a6
   12042:	|      movea.l 4(sp),a1
   12046:	|      jsr -690(a6)
	return BR_CONTINUE;
   1204a:	|      moveq #2,d0
}
   1204c:	\----> movea.l (sp)+,a6
   1204e:	       addq.l #8,sp
   12050:	       rts

00012052 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   12052:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12054:	       movea.l 12(sp),a0
   12058:	       move.l 24(a0),d0
   1205c:	       move.l d0,-(sp)
   1205e:	       pea 1 <_start+0x1>
   12062:	       move.l sp,d0
   12064:	       addq.l #8,d0
   12066:	       move.l d0,-(sp)
   12068:	       jsr 14788 <getValueType>
   1206e:	       lea 12(sp),sp
   12072:	       tst.w d0
   12074:	   /-- bne.s 1207a <builtIn_hardScroll+0x28>
   12076:	   |   moveq #1,d0
   12078:	/--|-- bra.s 12098 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   1207a:	|  \-> moveq #24,d0
   1207c:	|      add.l 12(sp),d0
   12080:	|      move.l d0,-(sp)
   12082:	|      jsr 1510c <trimStack>
   12088:	|      addq.l #4,sp
	hardScroll (v);
   1208a:	|      move.l (sp),d0
   1208c:	|      move.l d0,-(sp)
   1208e:	|      jsr d244 <hardScroll>
   12094:	|      addq.l #4,sp
	return BR_CONTINUE;
   12096:	|      moveq #2,d0
}
   12098:	\----> addq.l #4,sp
   1209a:	       rts

0001209c <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   1209c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1209e:	       movea.l 12(sp),a0
   120a2:	       move.l 24(a0),d0
   120a6:	       move.l d0,-(sp)
   120a8:	       pea 7 <_start+0x7>
   120ac:	       move.l sp,d0
   120ae:	       addq.l #8,d0
   120b0:	       move.l d0,-(sp)
   120b2:	       jsr 14788 <getValueType>
   120b8:	       lea 12(sp),sp
   120bc:	       tst.w d0
   120be:	   /-- bne.s 120c4 <builtIn_isScreenRegion+0x28>
   120c0:	   |   moveq #1,d0
   120c2:	/--|-- bra.s 12104 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   120c4:	|  \-> moveq #24,d0
   120c6:	|      add.l 12(sp),d0
   120ca:	|      move.l d0,-(sp)
   120cc:	|      jsr 1510c <trimStack>
   120d2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   120d4:	|      move.l (sp),d0
   120d6:	|      move.l d0,-(sp)
   120d8:	|      jsr 159d2 <getRegionForObject>
   120de:	|      addq.l #4,sp
   120e0:	|      tst.l d0
   120e2:	|      sne d0
   120e4:	|      neg.b d0
   120e6:	|      moveq #0,d1
   120e8:	|      move.b d0,d1
   120ea:	|      moveq #28,d0
   120ec:	|      add.l 12(sp),d0
   120f0:	|      move.l d1,-(sp)
   120f2:	|      pea 1 <_start+0x1>
   120f6:	|      move.l d0,-(sp)
   120f8:	|      jsr 1507a <setVariable>
   120fe:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12102:	|      moveq #2,d0
}
   12104:	\----> addq.l #4,sp
   12106:	       rts

00012108 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   12108:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1210a:	       movea.l 12(sp),a0
   1210e:	       move.l 24(a0),d0
   12112:	       move.l d0,-(sp)
   12114:	       pea 1 <_start+0x1>
   12118:	       move.l sp,d0
   1211a:	       addq.l #8,d0
   1211c:	       move.l d0,-(sp)
   1211e:	       jsr 14788 <getValueType>
   12124:	       lea 12(sp),sp
   12128:	       tst.w d0
   1212a:	   /-- bne.s 12130 <builtIn_setSpeechSpeed+0x28>
   1212c:	   |   moveq #1,d0
   1212e:	/--|-- bra.s 1217e <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   12130:	|  \-> moveq #24,d0
   12132:	|      add.l 12(sp),d0
   12136:	|      move.l d0,-(sp)
   12138:	|      jsr 1510c <trimStack>
   1213e:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12140:	|      move.l (sp),d0
   12142:	|      move.l d0,-(sp)
   12144:	|      jsr 175ec <__floatsisf>
   1214a:	|      addq.l #4,sp
   1214c:	|      move.l #1008981770,-(sp)
   12152:	|      move.l d0,-(sp)
   12154:	|      jsr 1769e <__mulsf3>
   1215a:	|      addq.l #8,sp
   1215c:	|      move.l d0,1c220 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   12162:	|      moveq #28,d0
   12164:	|      add.l 12(sp),d0
   12168:	|      pea 1 <_start+0x1>
   1216c:	|      pea 1 <_start+0x1>
   12170:	|      move.l d0,-(sp)
   12172:	|      jsr 1507a <setVariable>
   12178:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1217c:	|      moveq #2,d0
}
   1217e:	\----> addq.l #4,sp
   12180:	       rts

00012182 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12182:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12184:	       movea.l 12(sp),a0
   12188:	       move.l 24(a0),d0
   1218c:	       move.l d0,-(sp)
   1218e:	       pea 1 <_start+0x1>
   12192:	       move.l sp,d0
   12194:	       addq.l #8,d0
   12196:	       move.l d0,-(sp)
   12198:	       jsr 14788 <getValueType>
   1219e:	       lea 12(sp),sp
   121a2:	       tst.w d0
   121a4:	   /-- bne.s 121aa <builtIn_setFontSpacing+0x28>
   121a6:	   |   moveq #1,d0
   121a8:	/--|-- bra.s 121e0 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   121aa:	|  \-> move.l (sp),d0
   121ac:	|      move.l d0,d0
   121ae:	|      move.w d0,1c79a <fontSpace>
	trimStack (&fun -> stack);
   121b4:	|      moveq #24,d0
   121b6:	|      add.l 12(sp),d0
   121ba:	|      move.l d0,-(sp)
   121bc:	|      jsr 1510c <trimStack>
   121c2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   121c4:	|      moveq #28,d0
   121c6:	|      add.l 12(sp),d0
   121ca:	|      pea 1 <_start+0x1>
   121ce:	|      pea 1 <_start+0x1>
   121d2:	|      move.l d0,-(sp)
   121d4:	|      jsr 1507a <setVariable>
   121da:	|      lea 12(sp),sp
	return BR_CONTINUE;
   121de:	|      moveq #2,d0
}
   121e0:	\----> addq.l #4,sp
   121e2:	       rts

000121e4 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   121e4:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121e6:	          movea.l 12(sp),a0
   121ea:	          move.l 24(a0),d0
   121ee:	          move.l d0,-(sp)
   121f0:	          pea 1 <_start+0x1>
   121f4:	          move.l sp,d0
   121f6:	          addq.l #8,d0
   121f8:	          move.l d0,-(sp)
   121fa:	          jsr 14788 <getValueType>
   12200:	          lea 12(sp),sp
   12204:	          tst.w d0
   12206:	      /-- bne.s 1220c <builtIn_transitionLevel+0x28>
   12208:	      |   moveq #1,d0
   1220a:	/-----|-- bra.s 12260 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1220c:	|     \-> moveq #24,d0
   1220e:	|         add.l 12(sp),d0
   12212:	|         move.l d0,-(sp)
   12214:	|         jsr 1510c <trimStack>
   1221a:	|         addq.l #4,sp

	if (number < 0)
   1221c:	|         move.l (sp),d0
   1221e:	|     /-- bpl.s 12228 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   12220:	|     |   clr.b 1c20c <brightnessLevel>
   12226:	|  /--|-- bra.s 12244 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12228:	|  |  \-> move.l (sp),d0
   1222a:	|  |      cmpi.l #255,d0
   12230:	|  |  /-- ble.s 1223a <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   12232:	|  |  |   st 1c20c <brightnessLevel>
   12238:	|  +--|-- bra.s 12244 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1223a:	|  |  \-> move.l (sp),d0
   1223c:	|  |      move.l d0,d0
   1223e:	|  |      move.b d0,1c20c <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12244:	|  \----> moveq #28,d0
   12246:	|         add.l 12(sp),d0
   1224a:	|         pea 1 <_start+0x1>
   1224e:	|         pea 1 <_start+0x1>
   12252:	|         move.l d0,-(sp)
   12254:	|         jsr 1507a <setVariable>
   1225a:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1225e:	|         moveq #2,d0
}
   12260:	\-------> addq.l #4,sp
   12262:	          rts

00012264 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   12264:	movea.l 8(sp),a0
   12268:	move.l 24(a0),d0
   1226c:	move.l d0,-(sp)
   1226e:	jsr 14cc8 <getBoolean>
   12274:	addq.l #4,sp
   12276:	move.w d0,1c836 <captureAllKeys>
	trimStack (&fun -> stack);
   1227c:	moveq #24,d0
   1227e:	add.l 8(sp),d0
   12282:	move.l d0,-(sp)
   12284:	jsr 1510c <trimStack>
   1228a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   1228c:	move.w 1c836 <captureAllKeys>,d0
   12292:	movea.w d0,a0
   12294:	moveq #28,d0
   12296:	add.l 8(sp),d0
   1229a:	move.l a0,-(sp)
   1229c:	pea 1 <_start+0x1>
   122a0:	move.l d0,-(sp)
   122a2:	jsr 1507a <setVariable>
   122a8:	lea 12(sp),sp
	return BR_CONTINUE;
   122ac:	moveq #2,d0
}
   122ae:	rts

000122b0 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   122b0:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122b4:	       movea.l 20(sp),a0
   122b8:	       move.l 24(a0),d0
   122bc:	       move.l d0,-(sp)
   122be:	       pea 1 <_start+0x1>
   122c2:	       moveq #12,d0
   122c4:	       add.l sp,d0
   122c6:	       move.l d0,-(sp)
   122c8:	       jsr 14788 <getValueType>
   122ce:	       lea 12(sp),sp
   122d2:	       tst.w d0
   122d4:	   /-- bne.s 122dc <builtIn_spinCharacter+0x2c>
   122d6:	   |   moveq #1,d0
   122d8:	/--|-- bra.w 1238c <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   122dc:	|  \-> moveq #24,d0
   122de:	|      add.l 20(sp),d0
   122e2:	|      move.l d0,-(sp)
   122e4:	|      jsr 1510c <trimStack>
   122ea:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   122ec:	|      movea.l 20(sp),a0
   122f0:	|      move.l 24(a0),d0
   122f4:	|      move.l d0,-(sp)
   122f6:	|      pea 7 <_start+0x7>
   122fa:	|      lea 8(sp),a0
   122fe:	|      move.l a0,-(sp)
   12300:	|      jsr 14788 <getValueType>
   12306:	|      lea 12(sp),sp
   1230a:	|      tst.w d0
   1230c:	|  /-- bne.s 12312 <builtIn_spinCharacter+0x62>
   1230e:	|  |   moveq #1,d0
   12310:	+--|-- bra.s 1238c <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12312:	|  \-> moveq #24,d0
   12314:	|      add.l 20(sp),d0
   12318:	|      move.l d0,-(sp)
   1231a:	|      jsr 1510c <trimStack>
   12320:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12322:	|      move.l (sp),d0
   12324:	|      move.l d0,-(sp)
   12326:	|      jsr a680 <findPerson>
   1232c:	|      addq.l #4,sp
   1232e:	|      move.l d0,8(sp)
	if (thisPerson) {
   12332:	|  /-- beq.s 12372 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12334:	|  |   move.l 4(sp),d0
   12338:	|  |   movea.l 8(sp),a0
   1233c:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12340:	|  |   movea.l 8(sp),a0
   12344:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   1234a:	|  |   movea.l 8(sp),a0
   1234e:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12354:	|  |   moveq #28,d0
   12356:	|  |   add.l 20(sp),d0
   1235a:	|  |   pea 1 <_start+0x1>
   1235e:	|  |   pea 1 <_start+0x1>
   12362:	|  |   move.l d0,-(sp)
   12364:	|  |   jsr 1507a <setVariable>
   1236a:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1236e:	|  |   moveq #3,d0
   12370:	+--|-- bra.s 1238c <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12372:	|  \-> moveq #28,d0
   12374:	|      add.l 20(sp),d0
   12378:	|      clr.l -(sp)
   1237a:	|      pea 1 <_start+0x1>
   1237e:	|      move.l d0,-(sp)
   12380:	|      jsr 1507a <setVariable>
   12386:	|      lea 12(sp),sp
		return BR_CONTINUE;
   1238a:	|      moveq #2,d0
	}
}
   1238c:	\----> lea 12(sp),sp
   12390:	       rts

00012392 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   12392:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12394:	          movea.l 16(sp),a0
   12398:	          move.l 24(a0),d0
   1239c:	          move.l d0,-(sp)
   1239e:	          pea 7 <_start+0x7>
   123a2:	          move.l sp,d0
   123a4:	          addq.l #8,d0
   123a6:	          move.l d0,-(sp)
   123a8:	          jsr 14788 <getValueType>
   123ae:	          lea 12(sp),sp
   123b2:	          tst.w d0
   123b4:	      /-- bne.s 123ba <builtIn_getCharacterDirection+0x28>
   123b6:	      |   moveq #1,d0
   123b8:	/-----|-- bra.s 12418 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   123ba:	|     \-> moveq #24,d0
   123bc:	|         add.l 16(sp),d0
   123c0:	|         move.l d0,-(sp)
   123c2:	|         jsr 1510c <trimStack>
   123c8:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   123ca:	|         move.l (sp),d0
   123cc:	|         move.l d0,-(sp)
   123ce:	|         jsr a680 <findPerson>
   123d4:	|         addq.l #4,sp
   123d6:	|         move.l d0,4(sp)
	if (thisPerson) {
   123da:	|  /----- beq.s 123fe <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   123dc:	|  |      movea.l 4(sp),a0
   123e0:	|  |      move.l 106(a0),d1
   123e4:	|  |      moveq #28,d0
   123e6:	|  |      add.l 16(sp),d0
   123ea:	|  |      move.l d1,-(sp)
   123ec:	|  |      pea 1 <_start+0x1>
   123f0:	|  |      move.l d0,-(sp)
   123f2:	|  |      jsr 1507a <setVariable>
   123f8:	|  |      lea 12(sp),sp
   123fc:	|  |  /-- bra.s 12416 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   123fe:	|  \--|-> moveq #28,d0
   12400:	|     |   add.l 16(sp),d0
   12404:	|     |   clr.l -(sp)
   12406:	|     |   pea 1 <_start+0x1>
   1240a:	|     |   move.l d0,-(sp)
   1240c:	|     |   jsr 1507a <setVariable>
   12412:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12416:	|     \-> moveq #2,d0
}
   12418:	\-------> addq.l #8,sp
   1241a:	          rts

0001241c <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1241c:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1241e:	       movea.l 16(sp),a0
   12422:	       move.l 24(a0),d0
   12426:	       move.l d0,-(sp)
   12428:	       pea 7 <_start+0x7>
   1242c:	       move.l sp,d0
   1242e:	       addq.l #8,d0
   12430:	       move.l d0,-(sp)
   12432:	       jsr 14788 <getValueType>
   12438:	       lea 12(sp),sp
   1243c:	       tst.w d0
   1243e:	   /-- bne.s 12444 <builtIn_isCharacter+0x28>
   12440:	   |   moveq #1,d0
   12442:	/--|-- bra.s 12486 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12444:	|  \-> moveq #24,d0
   12446:	|      add.l 16(sp),d0
   1244a:	|      move.l d0,-(sp)
   1244c:	|      jsr 1510c <trimStack>
   12452:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12454:	|      move.l (sp),d0
   12456:	|      move.l d0,-(sp)
   12458:	|      jsr a680 <findPerson>
   1245e:	|      addq.l #4,sp
   12460:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   12464:	|      sne d0
   12466:	|      neg.b d0
   12468:	|      moveq #0,d1
   1246a:	|      move.b d0,d1
   1246c:	|      moveq #28,d0
   1246e:	|      add.l 16(sp),d0
   12472:	|      move.l d1,-(sp)
   12474:	|      pea 1 <_start+0x1>
   12478:	|      move.l d0,-(sp)
   1247a:	|      jsr 1507a <setVariable>
   12480:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12484:	|      moveq #2,d0
}
   12486:	\----> addq.l #8,sp
   12488:	       rts

0001248a <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   1248a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1248c:	          movea.l 16(sp),a0
   12490:	          move.l 24(a0),d0
   12494:	          move.l d0,-(sp)
   12496:	          pea 7 <_start+0x7>
   1249a:	          move.l sp,d0
   1249c:	          addq.l #8,d0
   1249e:	          move.l d0,-(sp)
   124a0:	          jsr 14788 <getValueType>
   124a6:	          lea 12(sp),sp
   124aa:	          tst.w d0
   124ac:	      /-- bne.s 124b2 <builtIn_normalCharacter+0x28>
   124ae:	      |   moveq #1,d0
   124b0:	/-----|-- bra.s 1252e <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   124b2:	|     \-> moveq #24,d0
   124b4:	|         add.l 16(sp),d0
   124b8:	|         move.l d0,-(sp)
   124ba:	|         jsr 1510c <trimStack>
   124c0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   124c2:	|         move.l (sp),d0
   124c4:	|         move.l d0,-(sp)
   124c6:	|         jsr a680 <findPerson>
   124cc:	|         addq.l #4,sp
   124ce:	|         move.l d0,4(sp)
	if (thisPerson)
   124d2:	|  /----- beq.s 12514 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   124d4:	|  |      movea.l 4(sp),a0
   124d8:	|  |      movea.l 80(a0),a0
   124dc:	|  |      move.l (a0),d1
   124de:	|  |      movea.l 4(sp),a0
   124e2:	|  |      move.l 106(a0),d0
   124e6:	|  |      add.l d0,d0
   124e8:	|  |      add.l d0,d0
   124ea:	|  |      movea.l d1,a0
   124ec:	|  |      adda.l d0,a0
   124ee:	|  |      move.l (a0),d0
   124f0:	|  |      movea.l 4(sp),a0
   124f4:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   124f8:	|  |      moveq #28,d0
   124fa:	|  |      add.l 16(sp),d0
   124fe:	|  |      pea 1 <_start+0x1>
   12502:	|  |      pea 1 <_start+0x1>
   12506:	|  |      move.l d0,-(sp)
   12508:	|  |      jsr 1507a <setVariable>
   1250e:	|  |      lea 12(sp),sp
   12512:	|  |  /-- bra.s 1252c <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12514:	|  \--|-> moveq #28,d0
   12516:	|     |   add.l 16(sp),d0
   1251a:	|     |   clr.l -(sp)
   1251c:	|     |   pea 1 <_start+0x1>
   12520:	|     |   move.l d0,-(sp)
   12522:	|     |   jsr 1507a <setVariable>
   12528:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1252c:	|     \-> moveq #2,d0
}
   1252e:	\-------> addq.l #8,sp
   12530:	          rts

00012532 <builtIn_isMoving>:

builtIn(isMoving)
{
   12532:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12534:	          movea.l 16(sp),a0
   12538:	          move.l 24(a0),d0
   1253c:	          move.l d0,-(sp)
   1253e:	          pea 7 <_start+0x7>
   12542:	          move.l sp,d0
   12544:	          addq.l #8,d0
   12546:	          move.l d0,-(sp)
   12548:	          jsr 14788 <getValueType>
   1254e:	          lea 12(sp),sp
   12552:	          tst.w d0
   12554:	      /-- bne.s 1255a <builtIn_isMoving+0x28>
   12556:	      |   moveq #1,d0
   12558:	/-----|-- bra.s 125ba <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   1255a:	|     \-> moveq #24,d0
   1255c:	|         add.l 16(sp),d0
   12560:	|         move.l d0,-(sp)
   12562:	|         jsr 1510c <trimStack>
   12568:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1256a:	|         move.l (sp),d0
   1256c:	|         move.l d0,-(sp)
   1256e:	|         jsr a680 <findPerson>
   12574:	|         addq.l #4,sp
   12576:	|         move.l d0,4(sp)
	if (thisPerson)
   1257a:	|  /----- beq.s 125a0 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   1257c:	|  |      movea.l 4(sp),a0
   12580:	|  |      move.w 64(a0),d0
   12584:	|  |      movea.w d0,a0
   12586:	|  |      moveq #28,d0
   12588:	|  |      add.l 16(sp),d0
   1258c:	|  |      move.l a0,-(sp)
   1258e:	|  |      pea 1 <_start+0x1>
   12592:	|  |      move.l d0,-(sp)
   12594:	|  |      jsr 1507a <setVariable>
   1259a:	|  |      lea 12(sp),sp
   1259e:	|  |  /-- bra.s 125b8 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   125a0:	|  \--|-> moveq #28,d0
   125a2:	|     |   add.l 16(sp),d0
   125a6:	|     |   clr.l -(sp)
   125a8:	|     |   pea 1 <_start+0x1>
   125ac:	|     |   move.l d0,-(sp)
   125ae:	|     |   jsr 1507a <setVariable>
   125b4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   125b8:	|     \-> moveq #2,d0
}
   125ba:	\-------> addq.l #8,sp
   125bc:	          rts

000125be <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   125be:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125c2:	          movea.l 20(sp),a0
   125c6:	          move.l 24(a0),d0
   125ca:	          move.l d0,-(sp)
   125cc:	          pea 7 <_start+0x7>
   125d0:	          lea 8(sp),a0
   125d4:	          move.l a0,-(sp)
   125d6:	          jsr 14788 <getValueType>
   125dc:	          lea 12(sp),sp
   125e0:	          tst.w d0
   125e2:	      /-- bne.s 125ea <builtIn_fetchEvent+0x2c>
   125e4:	      |   moveq #1,d0
   125e6:	/-----|-- bra.w 1267e <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   125ea:	|     \-> moveq #24,d0
   125ec:	|         add.l 20(sp),d0
   125f0:	|         move.l d0,-(sp)
   125f2:	|         jsr 1510c <trimStack>
   125f8:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125fa:	|         movea.l 20(sp),a0
   125fe:	|         move.l 24(a0),d0
   12602:	|         move.l d0,-(sp)
   12604:	|         pea 7 <_start+0x7>
   12608:	|         moveq #12,d0
   1260a:	|         add.l sp,d0
   1260c:	|         move.l d0,-(sp)
   1260e:	|         jsr 14788 <getValueType>
   12614:	|         lea 12(sp),sp
   12618:	|         tst.w d0
   1261a:	|     /-- bne.s 12620 <builtIn_fetchEvent+0x62>
   1261c:	|     |   moveq #1,d0
   1261e:	+-----|-- bra.s 1267e <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12620:	|     \-> moveq #24,d0
   12622:	|         add.l 20(sp),d0
   12626:	|         move.l d0,-(sp)
   12628:	|         jsr 1510c <trimStack>
   1262e:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12630:	|         move.l (sp),d1
   12632:	|         move.l 4(sp),d0
   12636:	|         move.l d1,-(sp)
   12638:	|         move.l d0,-(sp)
   1263a:	|         jsr d526 <getCombinationFunction>
   12640:	|         addq.l #8,sp
   12642:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12646:	|  /----- beq.s 12664 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12648:	|  |      moveq #28,d0
   1264a:	|  |      add.l 20(sp),d0
   1264e:	|  |      move.l 8(sp),-(sp)
   12652:	|  |      pea 2 <_start+0x2>
   12656:	|  |      move.l d0,-(sp)
   12658:	|  |      jsr 1507a <setVariable>
   1265e:	|  |      lea 12(sp),sp
   12662:	|  |  /-- bra.s 1267c <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12664:	|  \--|-> moveq #28,d0
   12666:	|     |   add.l 20(sp),d0
   1266a:	|     |   clr.l -(sp)
   1266c:	|     |   pea 1 <_start+0x1>
   12670:	|     |   move.l d0,-(sp)
   12672:	|     |   jsr 1507a <setVariable>
   12678:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1267c:	|     \-> moveq #2,d0
}
   1267e:	\-------> lea 12(sp),sp
   12682:	          rts

00012684 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12684:	       lea -24(sp),sp
   12688:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   1268a:	       movea.l 36(sp),a0
   1268e:	       move.l 24(a0),d0
   12692:	       move.l d0,-(sp)
   12694:	       jsr 14d5e <getTextFromAnyVar>
   1269a:	       addq.l #4,sp
   1269c:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   126a0:	       moveq #24,d0
   126a2:	       add.l 36(sp),d0
   126a6:	       move.l d0,-(sp)
   126a8:	       jsr 1510c <trimStack>
   126ae:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   126b0:	       move.l 24(sp),-(sp)
   126b4:	       jsr 2fe <encodeFilename>
   126ba:	       addq.l #4,sp
   126bc:	       move.l d0,20(sp)
    FreeVec(namNormal);
   126c0:	       move.l 24(sp),16(sp)
   126c6:	       move.l 1c896 <SysBase>,d0
   126cc:	       movea.l d0,a6
   126ce:	       movea.l 16(sp),a1
   126d2:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   126d6:	       move.l 20(sp),-(sp)
   126da:	       jsr e2de <failSecurityCheck>
   126e0:	       addq.l #4,sp
   126e2:	       tst.w d0
   126e4:	   /-- beq.s 126ea <builtIn_deleteFile+0x66>
   126e6:	   |   moveq #1,d0
   126e8:	/--|-- bra.s 12738 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   126ea:	|  \-> move.l 20(sp),12(sp)
   126f0:	|      move.l 1c89e <DOSBase>,d0
   126f6:	|      movea.l d0,a6
   126f8:	|      move.l 12(sp),d1
   126fc:	|      jsr -72(a6)
   12700:	|      move.l d0,8(sp)
   12704:	|      move.l 8(sp),d1
   12708:	|      moveq #28,d0
   1270a:	|      add.l 36(sp),d0
   1270e:	|      move.l d1,-(sp)
   12710:	|      pea 1 <_start+0x1>
   12714:	|      move.l d0,-(sp)
   12716:	|      jsr 1507a <setVariable>
   1271c:	|      lea 12(sp),sp
    FreeVec(nam);
   12720:	|      move.l 20(sp),4(sp)
   12726:	|      move.l 1c896 <SysBase>,d0
   1272c:	|      movea.l d0,a6
   1272e:	|      movea.l 4(sp),a1
   12732:	|      jsr -690(a6)

    return BR_CONTINUE;
   12736:	|      moveq #2,d0
}
   12738:	\----> movea.l (sp)+,a6
   1273a:	       lea 24(sp),sp
   1273e:	       rts

00012740 <builtIn_renameFile>:

builtIn(renameFile)
{
   12740:	       lea -40(sp),sp
   12744:	       move.l a6,-(sp)
   12746:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12748:	       movea.l 56(sp),a0
   1274c:	       move.l 24(a0),d0
   12750:	       move.l d0,-(sp)
   12752:	       jsr 14d5e <getTextFromAnyVar>
   12758:	       addq.l #4,sp
   1275a:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   1275e:	       move.l 44(sp),-(sp)
   12762:	       jsr 2fe <encodeFilename>
   12768:	       addq.l #4,sp
   1276a:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   1276e:	       moveq #24,d0
   12770:	       add.l 56(sp),d0
   12774:	       move.l d0,-(sp)
   12776:	       jsr 1510c <trimStack>
   1277c:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   1277e:	       move.l 40(sp),-(sp)
   12782:	       jsr e2de <failSecurityCheck>
   12788:	       addq.l #4,sp
   1278a:	       tst.w d0
   1278c:	   /-- beq.s 12794 <builtIn_renameFile+0x54>
   1278e:	   |   moveq #1,d0
   12790:	/--|-- bra.w 1287a <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12794:	|  \-> move.l 44(sp),36(sp)
   1279a:	|      move.l 1c896 <SysBase>,d0
   127a0:	|      movea.l d0,a6
   127a2:	|      movea.l 36(sp),a1
   127a6:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   127aa:	|      movea.l 56(sp),a0
   127ae:	|      move.l 24(a0),d0
   127b2:	|      move.l d0,-(sp)
   127b4:	|      jsr 14d5e <getTextFromAnyVar>
   127ba:	|      addq.l #4,sp
   127bc:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   127c0:	|      move.l 44(sp),-(sp)
   127c4:	|      jsr 2fe <encodeFilename>
   127ca:	|      addq.l #4,sp
   127cc:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   127d0:	|      moveq #24,d0
   127d2:	|      add.l 56(sp),d0
   127d6:	|      move.l d0,-(sp)
   127d8:	|      jsr 1510c <trimStack>
   127de:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   127e0:	|      move.l 32(sp),-(sp)
   127e4:	|      jsr e2de <failSecurityCheck>
   127ea:	|      addq.l #4,sp
   127ec:	|      tst.w d0
   127ee:	|  /-- beq.s 127f6 <builtIn_renameFile+0xb6>
   127f0:	|  |   moveq #1,d0
   127f2:	+--|-- bra.w 1287a <builtIn_renameFile+0x13a>
	FreeVec(temp);
   127f6:	|  \-> move.l 44(sp),28(sp)
   127fc:	|      move.l 1c896 <SysBase>,d0
   12802:	|      movea.l d0,a6
   12804:	|      movea.l 28(sp),a1
   12808:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   1280c:	|      move.l 32(sp),24(sp)
   12812:	|      move.l 40(sp),20(sp)
   12818:	|      move.l 1c89e <DOSBase>,d0
   1281e:	|      movea.l d0,a6
   12820:	|      move.l 24(sp),d1
   12824:	|      move.l 20(sp),d2
   12828:	|      jsr -78(a6)
   1282c:	|      move.l d0,16(sp)
   12830:	|      move.l 16(sp),d1
   12834:	|      moveq #28,d0
   12836:	|      add.l 56(sp),d0
   1283a:	|      move.l d1,-(sp)
   1283c:	|      pea 1 <_start+0x1>
   12840:	|      move.l d0,-(sp)
   12842:	|      jsr 1507a <setVariable>
   12848:	|      lea 12(sp),sp
	FreeVec(nam);
   1284c:	|      move.l 32(sp),12(sp)
   12852:	|      move.l 1c896 <SysBase>,d0
   12858:	|      movea.l d0,a6
   1285a:	|      movea.l 12(sp),a1
   1285e:	|      jsr -690(a6)
	FreeVec(newnam);
   12862:	|      move.l 40(sp),8(sp)
   12868:	|      move.l 1c896 <SysBase>,d0
   1286e:	|      movea.l d0,a6
   12870:	|      movea.l 8(sp),a1
   12874:	|      jsr -690(a6)

	return BR_CONTINUE;
   12878:	|      moveq #2,d0
}
   1287a:	\----> move.l (sp)+,d2
   1287c:	       movea.l (sp)+,a6
   1287e:	       lea 40(sp),sp
   12882:	       rts

00012884 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12884:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12886:	       movea.l 12(sp),a0
   1288a:	       move.l 24(a0),d0
   1288e:	       move.l d0,-(sp)
   12890:	       pea 5 <_start+0x5>
   12894:	       move.l sp,d0
   12896:	       addq.l #8,d0
   12898:	       move.l d0,-(sp)
   1289a:	       jsr 14788 <getValueType>
   128a0:	       lea 12(sp),sp
   128a4:	       tst.w d0
   128a6:	   /-- bne.s 128ac <builtIn_cacheSound+0x28>
   128a8:	   |   moveq #1,d0
   128aa:	/--|-- bra.s 128d4 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   128ac:	|  \-> moveq #24,d0
   128ae:	|      add.l 12(sp),d0
   128b2:	|      move.l d0,-(sp)
   128b4:	|      jsr 1510c <trimStack>
   128ba:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   128bc:	|      move.l (sp),d0
   128be:	|      move.l d0,-(sp)
   128c0:	|      jsr d126 <cacheSound>
   128c6:	|      addq.l #4,sp
   128c8:	|      moveq #-1,d1
   128ca:	|      cmp.l d0,d1
   128cc:	|  /-- bne.s 128d2 <builtIn_cacheSound+0x4e>
   128ce:	|  |   moveq #1,d0
   128d0:	+--|-- bra.s 128d4 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   128d2:	|  \-> moveq #2,d0
}
   128d4:	\----> addq.l #4,sp
   128d6:	       rts

000128d8 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   128d8:	pea 19ac0 <line.c.05397aaf+0x6b>
   128de:	jsr 171b0 <KPrintF>
   128e4:	addq.l #4,sp
	return BR_CONTINUE;
   128e6:	moveq #2,d0
}
   128e8:	rts

000128ea <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   128ea:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   128ee:	          movea.l 20(sp),a0
   128f2:	          move.l 24(a0),d0
   128f6:	          move.l d0,-(sp)
   128f8:	          pea 1 <_start+0x1>
   128fc:	          moveq #12,d0
   128fe:	          add.l sp,d0
   12900:	          move.l d0,-(sp)
   12902:	          jsr 14788 <getValueType>
   12908:	          lea 12(sp),sp
   1290c:	          tst.w d0
   1290e:	      /-- bne.s 12916 <builtIn_setCharacterSpinSpeed+0x2c>
   12910:	      |   moveq #1,d0
   12912:	/-----|-- bra.w 129b0 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12916:	|     \-> moveq #24,d0
   12918:	|         add.l 20(sp),d0
   1291c:	|         move.l d0,-(sp)
   1291e:	|         jsr 1510c <trimStack>
   12924:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12926:	|         movea.l 20(sp),a0
   1292a:	|         move.l 24(a0),d0
   1292e:	|         move.l d0,-(sp)
   12930:	|         pea 7 <_start+0x7>
   12934:	|         lea 8(sp),a0
   12938:	|         move.l a0,-(sp)
   1293a:	|         jsr 14788 <getValueType>
   12940:	|         lea 12(sp),sp
   12944:	|         tst.w d0
   12946:	|     /-- bne.s 1294c <builtIn_setCharacterSpinSpeed+0x62>
   12948:	|     |   moveq #1,d0
   1294a:	+-----|-- bra.s 129b0 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1294c:	|     \-> moveq #24,d0
   1294e:	|         add.l 20(sp),d0
   12952:	|         move.l d0,-(sp)
   12954:	|         jsr 1510c <trimStack>
   1295a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1295c:	|         move.l (sp),d0
   1295e:	|         move.l d0,-(sp)
   12960:	|         jsr a680 <findPerson>
   12966:	|         addq.l #4,sp
   12968:	|         move.l d0,8(sp)

	if (thisPerson) {
   1296c:	|  /----- beq.s 12996 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   1296e:	|  |      move.l 4(sp),d0
   12972:	|  |      movea.l 8(sp),a0
   12976:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1297a:	|  |      moveq #28,d0
   1297c:	|  |      add.l 20(sp),d0
   12980:	|  |      pea 1 <_start+0x1>
   12984:	|  |      pea 1 <_start+0x1>
   12988:	|  |      move.l d0,-(sp)
   1298a:	|  |      jsr 1507a <setVariable>
   12990:	|  |      lea 12(sp),sp
   12994:	|  |  /-- bra.s 129ae <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12996:	|  \--|-> moveq #28,d0
   12998:	|     |   add.l 20(sp),d0
   1299c:	|     |   clr.l -(sp)
   1299e:	|     |   pea 1 <_start+0x1>
   129a2:	|     |   move.l d0,-(sp)
   129a4:	|     |   jsr 1507a <setVariable>
   129aa:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   129ae:	|     \-> moveq #2,d0
}
   129b0:	\-------> lea 12(sp),sp
   129b4:	          rts

000129b6 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   129b6:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   129ba:	          movea.l 20(sp),a0
   129be:	          move.l 24(a0),d0
   129c2:	          move.l d0,-(sp)
   129c4:	          pea 1 <_start+0x1>
   129c8:	          moveq #12,d0
   129ca:	          add.l sp,d0
   129cc:	          move.l d0,-(sp)
   129ce:	          jsr 14788 <getValueType>
   129d4:	          lea 12(sp),sp
   129d8:	          tst.w d0
   129da:	      /-- bne.s 129e2 <builtIn_setCharacterAngleOffset+0x2c>
   129dc:	      |   moveq #1,d0
   129de:	/-----|-- bra.w 12a7c <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   129e2:	|     \-> moveq #24,d0
   129e4:	|         add.l 20(sp),d0
   129e8:	|         move.l d0,-(sp)
   129ea:	|         jsr 1510c <trimStack>
   129f0:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   129f2:	|         movea.l 20(sp),a0
   129f6:	|         move.l 24(a0),d0
   129fa:	|         move.l d0,-(sp)
   129fc:	|         pea 7 <_start+0x7>
   12a00:	|         lea 8(sp),a0
   12a04:	|         move.l a0,-(sp)
   12a06:	|         jsr 14788 <getValueType>
   12a0c:	|         lea 12(sp),sp
   12a10:	|         tst.w d0
   12a12:	|     /-- bne.s 12a18 <builtIn_setCharacterAngleOffset+0x62>
   12a14:	|     |   moveq #1,d0
   12a16:	+-----|-- bra.s 12a7c <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12a18:	|     \-> moveq #24,d0
   12a1a:	|         add.l 20(sp),d0
   12a1e:	|         move.l d0,-(sp)
   12a20:	|         jsr 1510c <trimStack>
   12a26:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12a28:	|         move.l (sp),d0
   12a2a:	|         move.l d0,-(sp)
   12a2c:	|         jsr a680 <findPerson>
   12a32:	|         addq.l #4,sp
   12a34:	|         move.l d0,8(sp)

	if (thisPerson) {
   12a38:	|  /----- beq.s 12a62 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12a3a:	|  |      move.l 4(sp),d0
   12a3e:	|  |      movea.l 8(sp),a0
   12a42:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12a46:	|  |      moveq #28,d0
   12a48:	|  |      add.l 20(sp),d0
   12a4c:	|  |      pea 1 <_start+0x1>
   12a50:	|  |      pea 1 <_start+0x1>
   12a54:	|  |      move.l d0,-(sp)
   12a56:	|  |      jsr 1507a <setVariable>
   12a5c:	|  |      lea 12(sp),sp
   12a60:	|  |  /-- bra.s 12a7a <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a62:	|  \--|-> moveq #28,d0
   12a64:	|     |   add.l 20(sp),d0
   12a68:	|     |   clr.l -(sp)
   12a6a:	|     |   pea 1 <_start+0x1>
   12a6e:	|     |   move.l d0,-(sp)
   12a70:	|     |   jsr 1507a <setVariable>
   12a76:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12a7a:	|     \-> moveq #2,d0
}
   12a7c:	\-------> lea 12(sp),sp
   12a80:	          rts

00012a82 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12a82:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a84:	       movea.l 12(sp),a0
   12a88:	       move.l 24(a0),d0
   12a8c:	       move.l d0,-(sp)
   12a8e:	       pea 1 <_start+0x1>
   12a92:	       move.l sp,d0
   12a94:	       addq.l #8,d0
   12a96:	       move.l d0,-(sp)
   12a98:	       jsr 14788 <getValueType>
   12a9e:	       lea 12(sp),sp
   12aa2:	       tst.w d0
   12aa4:	   /-- bne.s 12aaa <builtIn_transitionMode+0x28>
   12aa6:	   |   moveq #1,d0
   12aa8:	/--|-- bra.s 12ae0 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12aaa:	|  \-> move.l (sp),d0
   12aac:	|      move.l d0,d0
   12aae:	|      move.b d0,1c770 <fadeMode>
	trimStack (&fun -> stack);
   12ab4:	|      moveq #24,d0
   12ab6:	|      add.l 12(sp),d0
   12aba:	|      move.l d0,-(sp)
   12abc:	|      jsr 1510c <trimStack>
   12ac2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12ac4:	|      moveq #28,d0
   12ac6:	|      add.l 12(sp),d0
   12aca:	|      pea 1 <_start+0x1>
   12ace:	|      pea 1 <_start+0x1>
   12ad2:	|      move.l d0,-(sp)
   12ad4:	|      jsr 1507a <setVariable>
   12ada:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12ade:	|      moveq #2,d0
}
   12ae0:	\----> addq.l #4,sp
   12ae2:	       rts

00012ae4 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12ae4:	moveq #24,d0
   12ae6:	add.l 8(sp),d0
   12aea:	move.l d0,-(sp)
   12aec:	jsr 1510c <trimStack>
   12af2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12af4:	moveq #28,d0
   12af6:	add.l 8(sp),d0
   12afa:	pea 1 <_start+0x1>
   12afe:	pea 1 <_start+0x1>
   12b02:	move.l d0,-(sp)
   12b04:	jsr 1507a <setVariable>
   12b0a:	lea 12(sp),sp
	return BR_CONTINUE;
   12b0e:	moveq #2,d0
}
   12b10:	rts

00012b12 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12b12:	pea 19aea <line.c.05397aaf+0x95>
   12b18:	jsr 171b0 <KPrintF>
   12b1e:	addq.l #4,sp
	return BR_CONTINUE;
   12b20:	moveq #2,d0
}
   12b22:	rts

00012b24 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12b24:	       lea -16(sp),sp
   12b28:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12b2a:	       movea.l 28(sp),a0
   12b2e:	       move.l 24(a0),d0
   12b32:	       move.l d0,-(sp)
   12b34:	       jsr 14d5e <getTextFromAnyVar>
   12b3a:	       addq.l #4,sp
   12b3c:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12b40:	   /-- bne.s 12b48 <builtIn_saveCustomData+0x24>
   12b42:	   |   moveq #1,d0
   12b44:	/--|-- bra.w 12bfa <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12b48:	|  \-> move.l 16(sp),-(sp)
   12b4c:	|      jsr 2fe <encodeFilename>
   12b52:	|      addq.l #4,sp
   12b54:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12b58:	|      move.l 16(sp),8(sp)
   12b5e:	|      move.l 1c896 <SysBase>,d0
   12b64:	|      movea.l d0,a6
   12b66:	|      movea.l 8(sp),a1
   12b6a:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12b6e:	|      move.l 12(sp),-(sp)
   12b72:	|      jsr e2de <failSecurityCheck>
   12b78:	|      addq.l #4,sp
   12b7a:	|      tst.w d0
   12b7c:	|  /-- beq.s 12b82 <builtIn_saveCustomData+0x5e>
   12b7e:	|  |   moveq #1,d0
   12b80:	+--|-- bra.s 12bfa <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12b82:	|  \-> moveq #24,d0
   12b84:	|      add.l 28(sp),d0
   12b88:	|      move.l d0,-(sp)
   12b8a:	|      jsr 1510c <trimStack>
   12b90:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12b92:	|      movea.l 28(sp),a0
   12b96:	|      movea.l 24(a0),a0
   12b9a:	|      move.l (a0),d0
   12b9c:	|      moveq #6,d1
   12b9e:	|      cmp.l d0,d1
   12ba0:	|  /-- beq.s 12bb4 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12ba2:	|  |   pea 19b17 <line.c.05397aaf+0xc2>
   12ba8:	|  |   jsr 171b0 <KPrintF>
   12bae:	|  |   addq.l #4,sp
		return BR_ERROR;
   12bb0:	|  |   moveq #1,d0
   12bb2:	+--|-- bra.s 12bfa <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12bb4:	|  \-> movea.l 28(sp),a0
   12bb8:	|      move.l 24(a0),d0
   12bbc:	|      move.l d0,-(sp)
   12bbe:	|      move.l 16(sp),-(sp)
   12bc2:	|      jsr df2e <stackToFile>
   12bc8:	|      addq.l #8,sp
   12bca:	|      tst.w d0
   12bcc:	|  /-- bne.s 12bd2 <builtIn_saveCustomData+0xae>
   12bce:	|  |   moveq #1,d0
   12bd0:	+--|-- bra.s 12bfa <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12bd2:	|  \-> moveq #24,d0
   12bd4:	|      add.l 28(sp),d0
   12bd8:	|      move.l d0,-(sp)
   12bda:	|      jsr 1510c <trimStack>
   12be0:	|      addq.l #4,sp
	FreeVec(fileName);
   12be2:	|      move.l 12(sp),4(sp)
   12be8:	|      move.l 1c896 <SysBase>,d0
   12bee:	|      movea.l d0,a6
   12bf0:	|      movea.l 4(sp),a1
   12bf4:	|      jsr -690(a6)
	return BR_CONTINUE;
   12bf8:	|      moveq #2,d0
}
   12bfa:	\----> movea.l (sp)+,a6
   12bfc:	       lea 16(sp),sp
   12c00:	       rts

00012c02 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12c02:	       lea -28(sp),sp
   12c06:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12c08:	       movea.l 40(sp),a0
   12c0c:	       move.l 24(a0),d0
   12c10:	       move.l d0,-(sp)
   12c12:	       jsr 14d5e <getTextFromAnyVar>
   12c18:	       addq.l #4,sp
   12c1a:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12c1e:	   /-- bne.s 12c26 <builtIn_loadCustomData+0x24>
   12c20:	   |   moveq #1,d0
   12c22:	/--|-- bra.w 12d22 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12c26:	|  \-> move.l 28(sp),-(sp)
   12c2a:	|      jsr 2fe <encodeFilename>
   12c30:	|      addq.l #4,sp
   12c32:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12c36:	|      move.l 28(sp),20(sp)
   12c3c:	|      move.l 1c896 <SysBase>,d0
   12c42:	|      movea.l d0,a6
   12c44:	|      movea.l 20(sp),a1
   12c48:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12c4c:	|      move.l 24(sp),-(sp)
   12c50:	|      jsr e2de <failSecurityCheck>
   12c56:	|      addq.l #4,sp
   12c58:	|      tst.w d0
   12c5a:	|  /-- beq.s 12c62 <builtIn_loadCustomData+0x60>
   12c5c:	|  |   moveq #1,d0
   12c5e:	+--|-- bra.w 12d22 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12c62:	|  \-> moveq #24,d0
   12c64:	|      add.l 40(sp),d0
   12c68:	|      move.l d0,-(sp)
   12c6a:	|      jsr 1510c <trimStack>
   12c70:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12c72:	|      moveq #28,d0
   12c74:	|      add.l 40(sp),d0
   12c78:	|      move.l d0,-(sp)
   12c7a:	|      jsr 149d6 <unlinkVar>
   12c80:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12c82:	|      movea.l 40(sp),a0
   12c86:	|      moveq #6,d0
   12c88:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12c8c:	|      moveq #12,d0
   12c8e:	|      move.l d0,16(sp)
   12c92:	|      clr.l 12(sp)
   12c96:	|      move.l 1c896 <SysBase>,d0
   12c9c:	|      movea.l d0,a6
   12c9e:	|      move.l 16(sp),d0
   12ca2:	|      move.l 12(sp),d1
   12ca6:	|      jsr -684(a6)
   12caa:	|      move.l d0,8(sp)
   12cae:	|      move.l 8(sp),d0
   12cb2:	|      movea.l 40(sp),a0
   12cb6:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12cba:	|      movea.l 40(sp),a0
   12cbe:	|      move.l 32(a0),d0
   12cc2:	|  /-- bne.s 12cc8 <builtIn_loadCustomData+0xc6>
   12cc4:	|  |   moveq #1,d0
   12cc6:	+--|-- bra.s 12d22 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12cc8:	|  \-> movea.l 40(sp),a0
   12ccc:	|      movea.l 32(a0),a0
   12cd0:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12cd2:	|      movea.l 40(sp),a0
   12cd6:	|      movea.l 32(a0),a0
   12cda:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12cde:	|      movea.l 40(sp),a0
   12ce2:	|      movea.l 32(a0),a0
   12ce6:	|      moveq #1,d0
   12ce8:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12cec:	|      movea.l 40(sp),a0
   12cf0:	|      move.l 32(a0),d0
   12cf4:	|      move.l d0,-(sp)
   12cf6:	|      move.l 28(sp),-(sp)
   12cfa:	|      jsr d968 <fileToStack>
   12d00:	|      addq.l #8,sp
   12d02:	|      tst.w d0
   12d04:	|  /-- bne.s 12d0a <builtIn_loadCustomData+0x108>
   12d06:	|  |   moveq #1,d0
   12d08:	+--|-- bra.s 12d22 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12d0a:	|  \-> move.l 24(sp),4(sp)
   12d10:	|      move.l 1c896 <SysBase>,d0
   12d16:	|      movea.l d0,a6
   12d18:	|      movea.l 4(sp),a1
   12d1c:	|      jsr -690(a6)
	return BR_CONTINUE;
   12d20:	|      moveq #2,d0
}
   12d22:	\----> movea.l (sp)+,a6
   12d24:	       lea 28(sp),sp
   12d28:	       rts

00012d2a <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12d2a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d2c:	       movea.l 12(sp),a0
   12d30:	       move.l 24(a0),d0
   12d34:	       move.l d0,-(sp)
   12d36:	       pea 1 <_start+0x1>
   12d3a:	       move.l sp,d0
   12d3c:	       addq.l #8,d0
   12d3e:	       move.l d0,-(sp)
   12d40:	       jsr 14788 <getValueType>
   12d46:	       lea 12(sp),sp
   12d4a:	       tst.w d0
   12d4c:	   /-- bne.s 12d52 <builtIn_setCustomEncoding+0x28>
   12d4e:	   |   moveq #1,d0
   12d50:	/--|-- bra.s 12d88 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12d52:	|  \-> move.l (sp),d0
   12d54:	|      move.l d0,d0
   12d56:	|      move.w d0,1c94e <saveEncoding>
	trimStack (&fun -> stack);
   12d5c:	|      moveq #24,d0
   12d5e:	|      add.l 12(sp),d0
   12d62:	|      move.l d0,-(sp)
   12d64:	|      jsr 1510c <trimStack>
   12d6a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12d6c:	|      moveq #28,d0
   12d6e:	|      add.l 12(sp),d0
   12d72:	|      pea 1 <_start+0x1>
   12d76:	|      pea 1 <_start+0x1>
   12d7a:	|      move.l d0,-(sp)
   12d7c:	|      jsr 1507a <setVariable>
   12d82:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12d86:	|      moveq #2,d0
}
   12d88:	\----> addq.l #4,sp
   12d8a:	       rts

00012d8c <builtIn_freeSound>:

builtIn(freeSound)
{
   12d8c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12d8e:	       movea.l 12(sp),a0
   12d92:	       move.l 24(a0),d0
   12d96:	       move.l d0,-(sp)
   12d98:	       pea 5 <_start+0x5>
   12d9c:	       move.l sp,d0
   12d9e:	       addq.l #8,d0
   12da0:	       move.l d0,-(sp)
   12da2:	       jsr 14788 <getValueType>
   12da8:	       lea 12(sp),sp
   12dac:	       tst.w d0
   12dae:	   /-- bne.s 12db4 <builtIn_freeSound+0x28>
   12db0:	   |   moveq #1,d0
   12db2:	/--|-- bra.s 12dd2 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12db4:	|  \-> moveq #24,d0
   12db6:	|      add.l 12(sp),d0
   12dba:	|      move.l d0,-(sp)
   12dbc:	|      jsr 1510c <trimStack>
   12dc2:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12dc4:	|      move.l (sp),d0
   12dc6:	|      move.l d0,-(sp)
   12dc8:	|      jsr d12a <huntKillFreeSound>
   12dce:	|      addq.l #4,sp
	return BR_CONTINUE;
   12dd0:	|      moveq #2,d0
}
   12dd2:	\----> addq.l #4,sp
   12dd4:	       rts

00012dd6 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12dd6:	       lea -12(sp),sp
   12dda:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12ddc:	       movea.l 24(sp),a0
   12de0:	       move.l 24(a0),d0
   12de4:	       move.l d0,-(sp)
   12de6:	       pea 1 <_start+0x1>
   12dea:	       moveq #16,d0
   12dec:	       add.l sp,d0
   12dee:	       move.l d0,-(sp)
   12df0:	       jsr 14788 <getValueType>
   12df6:	       lea 12(sp),sp
   12dfa:	       tst.w d0
   12dfc:	   /-- bne.s 12e04 <builtIn_parallaxAdd+0x2e>
   12dfe:	   |   moveq #1,d0
   12e00:	/--|-- bra.w 12ed8 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e04:	|  \-> moveq #24,d0
   12e06:	|      add.l 24(sp),d0
   12e0a:	|      move.l d0,-(sp)
   12e0c:	|      jsr 1510c <trimStack>
   12e12:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e14:	|      movea.l 24(sp),a0
   12e18:	|      move.l 24(a0),d0
   12e1c:	|      move.l d0,-(sp)
   12e1e:	|      pea 1 <_start+0x1>
   12e22:	|      moveq #20,d0
   12e24:	|      add.l sp,d0
   12e26:	|      move.l d0,-(sp)
   12e28:	|      jsr 14788 <getValueType>
   12e2e:	|      lea 12(sp),sp
   12e32:	|      tst.w d0
   12e34:	|  /-- bne.s 12e3c <builtIn_parallaxAdd+0x66>
   12e36:	|  |   moveq #1,d0
   12e38:	+--|-- bra.w 12ed8 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e3c:	|  \-> moveq #24,d0
   12e3e:	|      add.l 24(sp),d0
   12e42:	|      move.l d0,-(sp)
   12e44:	|      jsr 1510c <trimStack>
   12e4a:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e4c:	|      movea.l 24(sp),a0
   12e50:	|      move.l 24(a0),d0
   12e54:	|      move.l d0,-(sp)
   12e56:	|      pea 5 <_start+0x5>
   12e5a:	|      lea 12(sp),a0
   12e5e:	|      move.l a0,-(sp)
   12e60:	|      jsr 14788 <getValueType>
   12e66:	|      lea 12(sp),sp
   12e6a:	|      tst.w d0
   12e6c:	|  /-- bne.s 12e72 <builtIn_parallaxAdd+0x9c>
   12e6e:	|  |   moveq #1,d0
   12e70:	+--|-- bra.s 12ed8 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12e72:	|  \-> moveq #24,d0
   12e74:	|      add.l 24(sp),d0
   12e78:	|      move.l d0,-(sp)
   12e7a:	|      jsr 1510c <trimStack>
   12e80:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12e82:	|      move.l 8(sp),d0
   12e86:	|      move.l d0,d0
   12e88:	|      moveq #0,d2
   12e8a:	|      move.w d0,d2
   12e8c:	|      move.l 12(sp),d0
   12e90:	|      move.l d0,d0
   12e92:	|      moveq #0,d1
   12e94:	|      move.w d0,d1
   12e96:	|      move.l 4(sp),d0
   12e9a:	|      move.l d0,d0
   12e9c:	|      move.w d0,d0
   12e9e:	|      andi.l #65535,d0
   12ea4:	|      move.l d2,-(sp)
   12ea6:	|      move.l d1,-(sp)
   12ea8:	|      move.l d0,-(sp)
   12eaa:	|      jsr d346 <loadParallax>
   12eb0:	|      lea 12(sp),sp
   12eb4:	|      tst.w d0
   12eb6:	|  /-- bne.s 12ebc <builtIn_parallaxAdd+0xe6>
   12eb8:	|  |   moveq #1,d0
   12eba:	+--|-- bra.s 12ed8 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12ebc:	|  \-> moveq #28,d0
   12ebe:	|      add.l 24(sp),d0
   12ec2:	|      pea 1 <_start+0x1>
   12ec6:	|      pea 1 <_start+0x1>
   12eca:	|      move.l d0,-(sp)
   12ecc:	|      jsr 1507a <setVariable>
   12ed2:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12ed6:	|      moveq #2,d0
}
   12ed8:	\----> move.l (sp)+,d2
   12eda:	       lea 12(sp),sp
   12ede:	       rts

00012ee0 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12ee0:	jsr d27e <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12ee6:	moveq #28,d0
   12ee8:	add.l 8(sp),d0
   12eec:	pea 1 <_start+0x1>
   12ef0:	pea 1 <_start+0x1>
   12ef4:	move.l d0,-(sp)
   12ef6:	jsr 1507a <setVariable>
   12efc:	lea 12(sp),sp
	return BR_CONTINUE;
   12f00:	moveq #2,d0
}
   12f02:	rts

00012f04 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12f04:	pea 19b35 <line.c.05397aaf+0xe0>
   12f0a:	jsr 171b0 <KPrintF>
   12f10:	addq.l #4,sp

	return BR_CONTINUE;
   12f12:	moveq #2,d0
}
   12f14:	rts

00012f16 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12f16:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12f18:	             movea.l 16(sp),a0
   12f1c:	             movea.l 24(a0),a0
   12f20:	             move.l (a0),d0
   12f22:	             moveq #1,d1
   12f24:	             cmp.l d0,d1
   12f26:	      /----- beq.s 12f6e <builtIn_makeFastArray+0x58>
   12f28:	      |      moveq #6,d1
   12f2a:	      |      cmp.l d0,d1
   12f2c:	/-----|----- bne.s 12fac <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12f2e:	|     |      movea.l 16(sp),a0
   12f32:	|     |      movea.l 24(a0),a0
   12f36:	|     |      move.l 4(a0),d1
   12f3a:	|     |      moveq #28,d0
   12f3c:	|     |      add.l 16(sp),d0
   12f40:	|     |      move.l d1,-(sp)
   12f42:	|     |      move.l d0,-(sp)
   12f44:	|     |      jsr 1483a <makeFastArrayFromStack>
   12f4a:	|     |      addq.l #8,sp
   12f4c:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12f50:	|     |      moveq #24,d0
   12f52:	|     |      add.l 16(sp),d0
   12f56:	|     |      move.l d0,-(sp)
   12f58:	|     |      jsr 1510c <trimStack>
   12f5e:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12f60:	|     |      tst.w 6(sp)
   12f64:	|     |  /-- beq.s 12f6a <builtIn_makeFastArray+0x54>
   12f66:	|     |  |   moveq #2,d0
   12f68:	|  /--|--|-- bra.s 12fbe <builtIn_makeFastArray+0xa8>
   12f6a:	|  |  |  \-> moveq #1,d0
   12f6c:	|  +--|----- bra.s 12fbe <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12f6e:	|  |  \----> movea.l 16(sp),a0
   12f72:	|  |         movea.l 24(a0),a0
   12f76:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12f7c:	|  |         moveq #24,d0
   12f7e:	|  |         add.l 16(sp),d0
   12f82:	|  |         move.l d0,-(sp)
   12f84:	|  |         jsr 1510c <trimStack>
   12f8a:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12f8c:	|  |         moveq #28,d0
   12f8e:	|  |         add.l 16(sp),d0
   12f92:	|  |         move.l 2(sp),-(sp)
   12f96:	|  |         move.l d0,-(sp)
   12f98:	|  |         jsr 148a4 <makeFastArraySize>
   12f9e:	|  |         addq.l #8,sp
   12fa0:	|  |         tst.w d0
   12fa2:	|  |     /-- beq.s 12fa8 <builtIn_makeFastArray+0x92>
   12fa4:	|  |     |   moveq #2,d0
   12fa6:	|  +-----|-- bra.s 12fbe <builtIn_makeFastArray+0xa8>
   12fa8:	|  |     \-> moveq #1,d0
   12faa:	|  +-------- bra.s 12fbe <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12fac:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12fae:	   |         pea 19b5e <line.c.05397aaf+0x109>
   12fb4:	   |         jsr 171b0 <KPrintF>
   12fba:	   |         addq.l #4,sp
	return BR_ERROR;
   12fbc:	   |         moveq #1,d0
}
   12fbe:	   \-------> addq.l #8,sp
   12fc0:	             rts

00012fc2 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12fc2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12fc4:	          movea.l 16(sp),a0
   12fc8:	          move.l 24(a0),d0
   12fcc:	          move.l d0,-(sp)
   12fce:	          pea 7 <_start+0x7>
   12fd2:	          move.l sp,d0
   12fd4:	          addq.l #8,d0
   12fd6:	          move.l d0,-(sp)
   12fd8:	          jsr 14788 <getValueType>
   12fde:	          lea 12(sp),sp
   12fe2:	          tst.w d0
   12fe4:	      /-- bne.s 12fea <builtIn_getCharacterScale+0x28>
   12fe6:	      |   moveq #1,d0
   12fe8:	/-----|-- bra.s 13064 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12fea:	|     \-> moveq #24,d0
   12fec:	|         add.l 16(sp),d0
   12ff0:	|         move.l d0,-(sp)
   12ff2:	|         jsr 1510c <trimStack>
   12ff8:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12ffa:	|         move.l (sp),d0
   12ffc:	|         move.l d0,-(sp)
   12ffe:	|         jsr a680 <findPerson>
   13004:	|         addq.l #4,sp
   13006:	|         move.l d0,4(sp)
	if (pers) {
   1300a:	|  /----- beq.s 1304a <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1300c:	|  |      movea.l 4(sp),a0
   13010:	|  |      move.l 32(a0),d0
   13014:	|  |      move.l #1120403456,-(sp)
   1301a:	|  |      move.l d0,-(sp)
   1301c:	|  |      jsr 1769e <__mulsf3>
   13022:	|  |      addq.l #8,sp
   13024:	|  |      move.l d0,-(sp)
   13026:	|  |      jsr 17584 <__fixsfsi>
   1302c:	|  |      addq.l #4,sp
   1302e:	|  |      move.l d0,d1
   13030:	|  |      moveq #28,d0
   13032:	|  |      add.l 16(sp),d0
   13036:	|  |      move.l d1,-(sp)
   13038:	|  |      pea 1 <_start+0x1>
   1303c:	|  |      move.l d0,-(sp)
   1303e:	|  |      jsr 1507a <setVariable>
   13044:	|  |      lea 12(sp),sp
   13048:	|  |  /-- bra.s 13062 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1304a:	|  \--|-> moveq #28,d0
   1304c:	|     |   add.l 16(sp),d0
   13050:	|     |   clr.l -(sp)
   13052:	|     |   pea 1 <_start+0x1>
   13056:	|     |   move.l d0,-(sp)
   13058:	|     |   jsr 1507a <setVariable>
   1305e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13062:	|     \-> moveq #2,d0
}
   13064:	\-------> addq.l #8,sp
   13066:	          rts

00013068 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   13068:	move.l 1c972 <gameSettings>,d0
   1306e:	move.l d0,d1
   13070:	moveq #28,d0
   13072:	add.l 8(sp),d0
   13076:	move.l d1,-(sp)
   13078:	pea 1 <_start+0x1>
   1307c:	move.l d0,-(sp)
   1307e:	jsr 1507a <setVariable>
   13084:	lea 12(sp),sp
	return BR_CONTINUE;
   13088:	moveq #2,d0
}
   1308a:	rts

0001308c <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1308c:	moveq #24,d0
   1308e:	add.l 8(sp),d0
   13092:	move.l d0,-(sp)
   13094:	jsr 1510c <trimStack>
   1309a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1309c:	moveq #24,d0
   1309e:	add.l 8(sp),d0
   130a2:	move.l d0,-(sp)
   130a4:	jsr 1510c <trimStack>
   130aa:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   130ac:	moveq #28,d0
   130ae:	add.l 8(sp),d0
   130b2:	clr.l -(sp)
   130b4:	pea 1 <_start+0x1>
   130b8:	move.l d0,-(sp)
   130ba:	jsr 1507a <setVariable>
   130c0:	lea 12(sp),sp

	return BR_CONTINUE;
   130c4:	moveq #2,d0

}
   130c6:	rts

000130c8 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   130c8:	move.l 1c216 <lastFramesPerSecond>,d1
   130ce:	moveq #28,d0
   130d0:	add.l 8(sp),d0
   130d4:	move.l d1,-(sp)
   130d6:	pea 1 <_start+0x1>
   130da:	move.l d0,-(sp)
   130dc:	jsr 1507a <setVariable>
   130e2:	lea 12(sp),sp
	return BR_CONTINUE;
   130e6:	moveq #2,d0
}
   130e8:	rts

000130ea <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   130ea:	moveq #2,d0
}
   130ec:	rts

000130ee <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   130ee:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   130f2:	          movea.l 60(sp),a0
   130f6:	          move.l 24(a0),d0
   130fa:	          move.l d0,-(sp)
   130fc:	          pea 1 <_start+0x1>
   13100:	          pea 1c7ac <thumbHeight>
   13106:	          jsr 14788 <getValueType>
   1310c:	          lea 12(sp),sp
   13110:	          tst.w d0
   13112:	      /-- bne.s 1311a <builtIn_setThumbnailSize+0x2c>
   13114:	      |   moveq #1,d0
   13116:	/-----|-- bra.w 131d6 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1311a:	|     \-> moveq #24,d0
   1311c:	|         add.l 60(sp),d0
   13120:	|         move.l d0,-(sp)
   13122:	|         jsr 1510c <trimStack>
   13128:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1312a:	|         movea.l 60(sp),a0
   1312e:	|         move.l 24(a0),d0
   13132:	|         move.l d0,-(sp)
   13134:	|         pea 1 <_start+0x1>
   13138:	|         pea 1c7a8 <thumbWidth>
   1313e:	|         jsr 14788 <getValueType>
   13144:	|         lea 12(sp),sp
   13148:	|         tst.w d0
   1314a:	|     /-- bne.s 13152 <builtIn_setThumbnailSize+0x64>
   1314c:	|     |   moveq #1,d0
   1314e:	+-----|-- bra.w 131d6 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13152:	|     \-> moveq #24,d0
   13154:	|         add.l 60(sp),d0
   13158:	|         move.l d0,-(sp)
   1315a:	|         jsr 1510c <trimStack>
   13160:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   13162:	|         move.l 1c7a8 <thumbWidth>,d0
   13168:	|     /-- bmi.s 13196 <builtIn_setThumbnailSize+0xa8>
   1316a:	|     |   move.l 1c7ac <thumbHeight>,d0
   13170:	|     +-- bmi.s 13196 <builtIn_setThumbnailSize+0xa8>
   13172:	|     |   move.l 1c7a8 <thumbWidth>,d0
   13178:	|     |   move.l d0,d1
   1317a:	|     |   move.l 1c7ea <winWidth>,d0
   13180:	|     |   cmp.l d1,d0
   13182:	|     +-- bcs.s 13196 <builtIn_setThumbnailSize+0xa8>
   13184:	|     |   move.l 1c7ac <thumbHeight>,d0
   1318a:	|     |   move.l d0,d1
   1318c:	|     |   move.l 1c7ee <winHeight>,d0
   13192:	|     |   cmp.l d1,d0
   13194:	|  /--|-- bcc.s 131d4 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   13196:	|  |  \-> move.l 1c7ac <thumbHeight>,d1
   1319c:	|  |      move.l 1c7a8 <thumbWidth>,d0
   131a2:	|  |      move.l d1,-(sp)
   131a4:	|  |      move.l d0,-(sp)
   131a6:	|  |      pea 19b85 <line.c.05397aaf+0x130>
   131ac:	|  |      lea 14(sp),a0
   131b0:	|  |      move.l a0,-(sp)
   131b2:	|  |      jsr 13f92 <sprintf>
   131b8:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   131bc:	|  |      lea 2(sp),a0
   131c0:	|  |      move.l a0,-(sp)
   131c2:	|  |      pea 19b8d <line.c.05397aaf+0x138>
   131c8:	|  |      jsr 171b0 <KPrintF>
   131ce:	|  |      addq.l #8,sp
		return BR_ERROR;
   131d0:	|  |      moveq #1,d0
   131d2:	+--|----- bra.s 131d6 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   131d4:	|  \----> moveq #2,d0
}
   131d6:	\-------> lea 52(sp),sp
   131da:	          rts

000131dc <builtIn_hasFlag>:

builtIn(hasFlag)
{
   131dc:	       lea -12(sp),sp
   131e0:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   131e2:	       movea.l 24(sp),a0
   131e6:	       move.l 24(a0),d0
   131ea:	       move.l d0,-(sp)
   131ec:	       pea 1 <_start+0x1>
   131f0:	       lea 12(sp),a0
   131f4:	       move.l a0,-(sp)
   131f6:	       jsr 14788 <getValueType>
   131fc:	       lea 12(sp),sp
   13200:	       tst.w d0
   13202:	   /-- bne.s 1320a <builtIn_hasFlag+0x2e>
   13204:	   |   moveq #1,d0
   13206:	/--|-- bra.w 1329a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1320a:	|  \-> moveq #24,d0
   1320c:	|      add.l 24(sp),d0
   13210:	|      move.l d0,-(sp)
   13212:	|      jsr 1510c <trimStack>
   13218:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1321a:	|      movea.l 24(sp),a0
   1321e:	|      move.l 24(a0),d0
   13222:	|      move.l d0,-(sp)
   13224:	|      pea 7 <_start+0x7>
   13228:	|      moveq #16,d0
   1322a:	|      add.l sp,d0
   1322c:	|      move.l d0,-(sp)
   1322e:	|      jsr 14788 <getValueType>
   13234:	|      lea 12(sp),sp
   13238:	|      tst.w d0
   1323a:	|  /-- bne.s 13240 <builtIn_hasFlag+0x64>
   1323c:	|  |   moveq #1,d0
   1323e:	+--|-- bra.s 1329a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13240:	|  \-> moveq #24,d0
   13242:	|      add.l 24(sp),d0
   13246:	|      move.l d0,-(sp)
   13248:	|      jsr 1510c <trimStack>
   1324e:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13250:	|      move.l 8(sp),d0
   13254:	|      move.l d0,-(sp)
   13256:	|      jsr d4f2 <findObjectType>
   1325c:	|      addq.l #4,sp
   1325e:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   13262:	|  /-- bne.s 13268 <builtIn_hasFlag+0x8c>
   13264:	|  |   moveq #1,d0
   13266:	+--|-- bra.s 1329a <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   13268:	|  \-> movea.l 12(sp),a0
   1326c:	|      move.w 36(a0),d0
   13270:	|      moveq #0,d2
   13272:	|      move.w d0,d2
   13274:	|      move.l 4(sp),d1
   13278:	|      moveq #1,d0
   1327a:	|      lsl.l d1,d0
   1327c:	|      move.l d2,d1
   1327e:	|      and.l d0,d1
   13280:	|      moveq #28,d0
   13282:	|      add.l 24(sp),d0
   13286:	|      move.l d1,-(sp)
   13288:	|      pea 1 <_start+0x1>
   1328c:	|      move.l d0,-(sp)
   1328e:	|      jsr 1507a <setVariable>
   13294:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13298:	|      moveq #2,d0
}
   1329a:	\----> move.l (sp)+,d2
   1329c:	       lea 12(sp),sp
   132a0:	       rts

000132a2 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   132a2:	       jsr d4e0 <snapshot>
   132a8:	       tst.w d0
   132aa:	/----- beq.s 132b0 <builtIn_snapshotGrab+0xe>
   132ac:	|      moveq #2,d0
   132ae:	|  /-- bra.s 132b2 <builtIn_snapshotGrab+0x10>
   132b0:	\--|-> moveq #1,d0
}
   132b2:	   \-> rts

000132b4 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   132b4:	jsr d38c <nosnapshot>
	return BR_CONTINUE;
   132ba:	moveq #2,d0
}
   132bc:	rts

000132be <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   132be:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   132c0:	move.w 1c0f2 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   132c8:	movea.l 12(sp),a0
   132cc:	move.l 24(a0),d0
   132d0:	move.l d0,-(sp)
   132d2:	jsr 14cc8 <getBoolean>
   132d8:	addq.l #4,sp
   132da:	move.w d0,1c0f2 <allowAnyFilename>
	trimStack (&fun -> stack);
   132e0:	moveq #24,d0
   132e2:	add.l 12(sp),d0
   132e6:	move.l d0,-(sp)
   132e8:	jsr 1510c <trimStack>
   132ee:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   132f0:	movea.w 2(sp),a0
   132f4:	moveq #28,d0
   132f6:	add.l 12(sp),d0
   132fa:	move.l a0,-(sp)
   132fc:	pea 1 <_start+0x1>
   13300:	move.l d0,-(sp)
   13302:	jsr 1507a <setVariable>
   13308:	lea 12(sp),sp
	return BR_CONTINUE;
   1330c:	moveq #2,d0
}
   1330e:	addq.l #4,sp
   13310:	rts

00013312 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13312:	moveq #24,d0
   13314:	add.l 8(sp),d0
   13318:	move.l d0,-(sp)
   1331a:	jsr 1510c <trimStack>
   13320:	addq.l #4,sp
	trimStack (&fun -> stack);
   13322:	moveq #24,d0
   13324:	add.l 8(sp),d0
   13328:	move.l d0,-(sp)
   1332a:	jsr 1510c <trimStack>
   13330:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13332:	moveq #28,d0
   13334:	add.l 8(sp),d0
   13338:	clr.l -(sp)
   1333a:	pea 1 <_start+0x1>
   1333e:	move.l d0,-(sp)
   13340:	jsr 1507a <setVariable>
   13346:	lea 12(sp),sp

	return BR_CONTINUE;
   1334a:	moveq #2,d0
}
   1334c:	rts

0001334e <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   1334e:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13350:	movea.l 12(sp),a0
   13354:	move.l 24(a0),d0
   13358:	move.l d0,-(sp)
   1335a:	jsr 14d5e <getTextFromAnyVar>
   13360:	addq.l #4,sp
   13362:	move.l d0,(sp)
	trimStack (&fun -> stack);
   13364:	moveq #24,d0
   13366:	add.l 12(sp),d0
   1336a:	move.l d0,-(sp)
   1336c:	jsr 1510c <trimStack>
   13372:	addq.l #4,sp
	KPrintF (mess);
   13374:	move.l (sp),-(sp)
   13376:	jsr 171b0 <KPrintF>
   1337c:	addq.l #4,sp
	return BR_ERROR;
   1337e:	moveq #1,d0
}
   13380:	addq.l #4,sp
   13382:	rts

00013384 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13384:	moveq #24,d0
   13386:	add.l 8(sp),d0
   1338a:	move.l d0,-(sp)
   1338c:	jsr 1510c <trimStack>
   13392:	addq.l #4,sp
	trimStack (&fun -> stack);
   13394:	moveq #24,d0
   13396:	add.l 8(sp),d0
   1339a:	move.l d0,-(sp)
   1339c:	jsr 1510c <trimStack>
   133a2:	addq.l #4,sp
	trimStack (&fun -> stack);
   133a4:	moveq #24,d0
   133a6:	add.l 8(sp),d0
   133aa:	move.l d0,-(sp)
   133ac:	jsr 1510c <trimStack>
   133b2:	addq.l #4,sp
	trimStack (&fun -> stack);
   133b4:	moveq #24,d0
   133b6:	add.l 8(sp),d0
   133ba:	move.l d0,-(sp)
   133bc:	jsr 1510c <trimStack>
   133c2:	addq.l #4,sp

	return BR_CONTINUE;
   133c4:	moveq #2,d0
}
   133c6:	rts

000133c8 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   133c8:	moveq #24,d0
   133ca:	add.l 8(sp),d0
   133ce:	move.l d0,-(sp)
   133d0:	jsr 1510c <trimStack>
   133d6:	addq.l #4,sp
	trimStack (&fun -> stack);
   133d8:	moveq #24,d0
   133da:	add.l 8(sp),d0
   133de:	move.l d0,-(sp)
   133e0:	jsr 1510c <trimStack>
   133e6:	addq.l #4,sp
	trimStack (&fun -> stack);
   133e8:	moveq #24,d0
   133ea:	add.l 8(sp),d0
   133ee:	move.l d0,-(sp)
   133f0:	jsr 1510c <trimStack>
   133f6:	addq.l #4,sp

	return BR_CONTINUE;
   133f8:	moveq #2,d0

}
   133fa:	rts

000133fc <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   133fc:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   133fe:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13404:	sne d0
   13406:	neg.b d0
   13408:	moveq #0,d1
   1340a:	move.b d0,d1
   1340c:	moveq #28,d0
   1340e:	add.l 12(sp),d0
   13412:	move.l d1,-(sp)
   13414:	pea 1 <_start+0x1>
   13418:	move.l d0,-(sp)
   1341a:	jsr 1507a <setVariable>
   13420:	lea 12(sp),sp
	return BR_CONTINUE;
   13424:	moveq #2,d0
}
   13426:	addq.l #4,sp
   13428:	rts

0001342a <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1342a:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1342c:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13432:	pea 19ba4 <line.c.05397aaf+0x14f>
   13438:	jsr 171b0 <KPrintF>
   1343e:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13440:	tst.w 2(sp)
   13444:	sne d0
   13446:	neg.b d0
   13448:	moveq #0,d1
   1344a:	move.b d0,d1
   1344c:	moveq #28,d0
   1344e:	add.l 12(sp),d0
   13452:	move.l d1,-(sp)
   13454:	pea 1 <_start+0x1>
   13458:	move.l d0,-(sp)
   1345a:	jsr 1507a <setVariable>
   13460:	lea 12(sp),sp
	return BR_CONTINUE;
   13464:	moveq #2,d0
}
   13466:	addq.l #4,sp
   13468:	rts

0001346a <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   1346a:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   1346e:	             move.l 104(sp),d0
   13472:	             cmpi.l #166,d0
   13478:	/----------- bhi.w 1355a <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   1347c:	|            move.l 104(sp),d0
   13480:	|            add.l d0,d0
   13482:	|            movea.l d0,a1
   13484:	|            adda.l d0,a1
   13486:	|            lea 1c238 <paramNum>,a0
   1348c:	|            move.l (0,a1,a0.l),d0
   13490:	|            moveq #-1,d1
   13492:	|            cmp.l d0,d1
   13494:	|  /-------- beq.w 13522 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13498:	|  |         move.l 104(sp),d0
   1349c:	|  |         add.l d0,d0
   1349e:	|  |         movea.l d0,a1
   134a0:	|  |         adda.l d0,a1
   134a2:	|  |         lea 1c238 <paramNum>,a0
   134a8:	|  |         move.l (0,a1,a0.l),d0
   134ac:	|  |         cmp.l 108(sp),d0
   134b0:	|  +-------- beq.s 13522 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   134b2:	|  |         move.l 104(sp),d0
   134b6:	|  |         add.l d0,d0
   134b8:	|  |         movea.l d0,a1
   134ba:	|  |         adda.l d0,a1
   134bc:	|  |         lea 1c238 <paramNum>,a0
   134c2:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   134c6:	|  |         moveq #1,d1
   134c8:	|  |         cmp.l d0,d1
   134ca:	|  |  /----- bne.s 134d4 <callBuiltIn+0x6a>
   134cc:	|  |  |      move.l #100608,d0
   134d2:	|  |  |  /-- bra.s 134da <callBuiltIn+0x70>
   134d4:	|  |  \--|-> move.l #105434,d0
   134da:	|  |     \-> move.l 104(sp),d1
   134de:	|  |         add.l d1,d1
   134e0:	|  |         movea.l d1,a1
   134e2:	|  |         adda.l d1,a1
   134e4:	|  |         lea 1c238 <paramNum>,a0
   134ea:	|  |         move.l (0,a1,a0.l),d1
   134ee:	|  |         move.l d0,-(sp)
   134f0:	|  |         move.l d1,-(sp)
   134f2:	|  |         pea 19bdc <line.c.05397aaf+0x187>
   134f8:	|  |         lea 12(sp),a0
   134fc:	|  |         move.l a0,-(sp)
   134fe:	|  |         jsr 13f92 <sprintf>
   13504:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13508:	|  |         movea.l sp,a0
   1350a:	|  |         move.l a0,-(sp)
   1350c:	|  |         jsr b8 <copyString>
   13512:	|  |         addq.l #4,sp
   13514:	|  |         move.l d0,-(sp)
   13516:	|  |         jsr 171b0 <KPrintF>
   1351c:	|  |         addq.l #4,sp
				return BR_ERROR;
   1351e:	|  |         moveq #1,d0
   13520:	|  |     /-- bra.s 1356a <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13522:	|  \-----|-> move.l 104(sp),d0
   13526:	|        |   add.l d0,d0
   13528:	|        |   movea.l d0,a1
   1352a:	|        |   adda.l d0,a1
   1352c:	|        |   lea 1c4d4 <builtInFunctionArray>,a0
   13532:	|        |   move.l (0,a1,a0.l),d0
   13536:	+--------|-- beq.s 1355a <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13538:	|        |   move.l 104(sp),d0
   1353c:	|        |   add.l d0,d0
   1353e:	|        |   movea.l d0,a1
   13540:	|        |   adda.l d0,a1
   13542:	|        |   lea 1c4d4 <builtInFunctionArray>,a0
   13548:	|        |   movea.l (0,a1,a0.l),a0
   1354c:	|        |   move.l 112(sp),-(sp)
   13550:	|        |   move.l 112(sp),-(sp)
   13554:	|        |   jsr (a0)
   13556:	|        |   addq.l #8,sp
   13558:	|        +-- bra.s 1356a <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   1355a:	\--------|-> pea 19c07 <line.c.05397aaf+0x1b2>
   13560:	         |   jsr 171b0 <KPrintF>
   13566:	         |   addq.l #4,sp
	return BR_ERROR;
   13568:	         |   moveq #1,d0
}
   1356a:	         \-> lea 100(sp),sp
   1356e:	             rts

00013570 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13570:	          subq.l #8,sp
	int indexNum = -1;
   13572:	          moveq #-1,d0
   13574:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13578:	          clr.l (sp)
   1357a:	   /----- bra.s 135a0 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   1357c:	/--|----> move.l 1c96a <languageTable>,d1
   13582:	|  |      move.l (sp),d0
   13584:	|  |      add.l d0,d0
   13586:	|  |      add.l d0,d0
   13588:	|  |      movea.l d1,a0
   1358a:	|  |      adda.l d0,a0
   1358c:	|  |      move.l (a0),d0
   1358e:	|  |      move.l d0,d1
   13590:	|  |      move.l 1c972 <gameSettings>,d0
   13596:	|  |      cmp.l d1,d0
   13598:	|  |  /-- bne.s 1359e <getLanguageForFileB+0x2e>
   1359a:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1359e:	|  |  \-> addq.l #1,(sp)
   135a0:	|  \----> move.l 1c976 <gameSettings+0x4>,d0
   135a6:	|         cmp.l (sp),d0
   135a8:	\-------- bcc.s 1357c <getLanguageForFileB+0xc>
	}

	return indexNum;
   135aa:	          move.l 4(sp),d0
}
   135ae:	          addq.l #8,sp
   135b0:	          rts

000135b2 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   135b2:	          lea -20(sp),sp
   135b6:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   135b8:	          move.l 28(sp),-(sp)
   135bc:	          jsr 13c74 <strlen>
   135c2:	          addq.l #4,sp
   135c4:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   135c8:	          moveq #4,d0
   135ca:	          cmp.l 12(sp),d0
   135ce:	      /-- bge.s 135f2 <getPrefsFilename+0x40>
   135d0:	      |   move.l 12(sp),d0
   135d4:	      |   subq.l #4,d0
   135d6:	      |   movea.l 28(sp),a0
   135da:	      |   adda.l d0,a0
   135dc:	      |   move.b (a0),d0
   135de:	      |   cmpi.b #46,d0
   135e2:	      +-- bne.s 135f2 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   135e4:	      |   move.l 12(sp),d0
   135e8:	      |   subq.l #4,d0
   135ea:	      |   movea.l 28(sp),a0
   135ee:	      |   adda.l d0,a0
   135f0:	      |   clr.b (a0)
	}

	char * f = filename;
   135f2:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   135f8:	          clr.l 20(sp)
   135fc:	   /----- bra.s 13624 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   135fe:	/--|----> move.l 20(sp),d0
   13602:	|  |      movea.l 28(sp),a0
   13606:	|  |      adda.l d0,a0
   13608:	|  |      move.b (a0),d0
   1360a:	|  |      cmpi.b #47,d0
   1360e:	|  |  /-- bne.s 13620 <getPrefsFilename+0x6e>
   13610:	|  |  |   move.l 20(sp),d0
   13614:	|  |  |   addq.l #1,d0
   13616:	|  |  |   move.l 28(sp),d1
   1361a:	|  |  |   add.l d0,d1
   1361c:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13620:	|  |  \-> addq.l #1,20(sp)
   13624:	|  \----> move.l 20(sp),d0
   13628:	|         cmp.l 12(sp),d0
   1362c:	\-------- blt.s 135fe <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   1362e:	          pea 19c32 <line.c.05397aaf+0x1dd>
   13634:	          move.l 20(sp),-(sp)
   13638:	          jsr 13cb4 <joinStrings>
   1363e:	          addq.l #8,sp
   13640:	          move.l d0,8(sp)

	FreeVec(filename);
   13644:	          move.l 28(sp),4(sp)
   1364a:	          move.l 1c896 <SysBase>,d0
   13650:	          movea.l d0,a6
   13652:	          movea.l 4(sp),a1
   13656:	          jsr -690(a6)
	filename = NULL;
   1365a:	          clr.l 28(sp)
	return joined;
   1365e:	          move.l 8(sp),d0
}
   13662:	          movea.l (sp)+,a6
   13664:	          lea 20(sp),sp
   13668:	          rts

0001366a <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   1366a:	             lea -28(sp),sp
   1366e:	             move.l a6,-(sp)
   13670:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13672:	             move.l 1c976 <gameSettings+0x4>,d0
   13678:	             move.l d0,d1
   1367a:	             addq.l #1,d1
   1367c:	             move.l d1,28(sp)
   13680:	             clr.l 24(sp)
   13684:	             move.l 1c896 <SysBase>,d0
   1368a:	             movea.l d0,a6
   1368c:	             move.l 28(sp),d0
   13690:	             move.l 24(sp),d1
   13694:	             jsr -684(a6)
   13698:	             move.l d0,20(sp)
   1369c:	             move.l 20(sp),d0
   136a0:	             move.l d0,1c96a <languageTable>
    if( languageTable == 0) {
   136a6:	             move.l 1c96a <languageTable>,d0
   136ac:	         /-- bne.s 136bc <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   136ae:	         |   pea 19c37 <line.c.05397aaf+0x1e2>
   136b4:	         |   jsr 171b0 <KPrintF>
   136ba:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   136bc:	         \-> move.l 1c976 <gameSettings+0x4>,d0
   136c2:	             move.l d0,d1
   136c4:	             addq.l #1,d1
   136c6:	             move.l d1,16(sp)
   136ca:	             clr.l 12(sp)
   136ce:	             move.l 1c896 <SysBase>,d0
   136d4:	             movea.l d0,a6
   136d6:	             move.l 16(sp),d0
   136da:	             move.l 12(sp),d1
   136de:	             jsr -684(a6)
   136e2:	             move.l d0,8(sp)
   136e6:	             move.l 8(sp),d0
   136ea:	             move.l d0,1c96e <languageName>
	if( languageName == 0) {
   136f0:	             move.l 1c96e <languageName>,d0
   136f6:	         /-- bne.s 13706 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   136f8:	         |   pea 19c6d <line.c.05397aaf+0x218>
   136fe:	         |   jsr 171b0 <KPrintF>
   13704:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13706:	         \-> clr.l 32(sp)
   1370a:	   /-------- bra.s 13782 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   1370c:	/--|-------> tst.l 32(sp)
   13710:	|  |  /----- beq.s 13720 <makeLanguageTable+0xb6>
   13712:	|  |  |      move.l 40(sp),-(sp)
   13716:	|  |  |      jsr 6bc <get2bytes>
   1371c:	|  |  |      addq.l #4,sp
   1371e:	|  |  |  /-- bra.s 13722 <makeLanguageTable+0xb8>
   13720:	|  |  \--|-> moveq #0,d0
   13722:	|  |     \-> movea.l 1c96a <languageTable>,a0
   13728:	|  |         move.l 32(sp),d1
   1372c:	|  |         add.l d1,d1
   1372e:	|  |         add.l d1,d1
   13730:	|  |         adda.l d1,a0
   13732:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13734:	|  |         move.l 1c96e <languageName>,d1
   1373a:	|  |         move.l 32(sp),d0
   1373e:	|  |         add.l d0,d0
   13740:	|  |         add.l d0,d0
   13742:	|  |         movea.l d1,a0
   13744:	|  |         adda.l d0,a0
   13746:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13748:	|  |         move.l 1c840 <gameVersion>,d0
   1374e:	|  |         cmpi.l #511,d0
   13754:	|  |     /-- ble.s 1377e <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13756:	|  |     |   move.l 1c976 <gameSettings+0x4>,d0
   1375c:	|  |     +-- beq.s 1377e <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   1375e:	|  |     |   move.l 1c96e <languageName>,d1
   13764:	|  |     |   move.l 32(sp),d0
   13768:	|  |     |   add.l d0,d0
   1376a:	|  |     |   add.l d0,d0
   1376c:	|  |     |   movea.l d1,a2
   1376e:	|  |     |   adda.l d0,a2
   13770:	|  |     |   move.l 40(sp),-(sp)
   13774:	|  |     |   jsr b02 <readString>
   1377a:	|  |     |   addq.l #4,sp
   1377c:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1377e:	|  |     \-> addq.l #1,32(sp)
   13782:	|  \-------> move.l 1c976 <gameSettings+0x4>,d0
   13788:	|            cmp.l 32(sp),d0
   1378c:	\----------- bcc.w 1370c <makeLanguageTable+0xa2>
		}
	}
}
   13790:	             nop
   13792:	             nop
   13794:	             movea.l (sp)+,a2
   13796:	             movea.l (sp)+,a6
   13798:	             lea 28(sp),sp
   1379c:	             rts

0001379e <readIniFile>:

void readIniFile (char * filename) {
   1379e:	                      lea -564(sp),sp
   137a2:	                      move.l a6,-(sp)
   137a4:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   137a6:	                      move.l 576(sp),-(sp)
   137aa:	                      jsr b8 <copyString>
   137b0:	                      addq.l #4,sp
   137b2:	                      move.l d0,-(sp)
   137b4:	                      jsr 135b2 <getPrefsFilename>
   137ba:	                      addq.l #4,sp
   137bc:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   137c0:	                      move.l 562(sp),558(sp)
   137c6:	                      move.l #1005,554(sp)
   137ce:	                      move.l 1c89e <DOSBase>,d0
   137d4:	                      movea.l d0,a6
   137d6:	                      move.l 558(sp),d1
   137da:	                      move.l 554(sp),d2
   137de:	                      jsr -30(a6)
   137e2:	                      move.l d0,550(sp)
   137e6:	                      move.l 550(sp),d0
   137ea:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   137ee:	                      clr.l 1c972 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   137f4:	                      move.w #1,1c97a <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   137fc:	                      clr.l 1c97c <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13802:	                      moveq #1,d0
   13804:	                      move.l d0,1c980 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   1380a:	                      clr.w 1c984 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13810:	                      clr.w 1c986 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13816:	                      clr.w 1c988 <gameSettings+0x16>

	FreeVec(langName);
   1381c:	                      move.l 562(sp),542(sp)
   13822:	                      move.l 1c896 <SysBase>,d0
   13828:	                      movea.l d0,a6
   1382a:	                      movea.l 542(sp),a1
   1382e:	                      jsr -690(a6)
	langName = NULL;
   13832:	                      clr.l 562(sp)

	if (fp) {
   13836:	                      tst.l 546(sp)
   1383a:	/-------------------- beq.w 13b18 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   1383e:	|                     move.l sp,d0
   13840:	|                     addi.l #265,d0
   13846:	|                     move.l #257,d1
   1384c:	|                     move.l d1,-(sp)
   1384e:	|                     clr.l -(sp)
   13850:	|                     move.l d0,-(sp)
   13852:	|                     jsr 17134 <memset>
   13858:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   1385c:	|                     move.l sp,d0
   1385e:	|                     addq.l #8,d0
   13860:	|                     move.l #257,d1
   13866:	|                     move.l d1,-(sp)
   13868:	|                     clr.l -(sp)
   1386a:	|                     move.l d0,-(sp)
   1386c:	|                     jsr 17134 <memset>
   13872:	|                     lea 12(sp),sp
		unsigned char here = 0;
   13876:	|                     clr.b 571(sp)
		char readChar = ' ';
   1387a:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13880:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13886:	|                     clr.w 566(sp)
		LONG tmp = 0;
   1388a:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   1388e:	|  /----------------> move.l 546(sp),534(sp)
   13894:	|  |                  move.l 1c89e <DOSBase>,d0
   1389a:	|  |                  movea.l d0,a6
   1389c:	|  |                  move.l 534(sp),d1
   138a0:	|  |                  jsr -306(a6)
   138a4:	|  |                  move.l d0,530(sp)
   138a8:	|  |                  move.l 530(sp),d0
   138ac:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   138b0:	|  |                  moveq #-1,d1
   138b2:	|  |                  cmp.l 538(sp),d1
   138b6:	|  |           /----- bne.s 138c4 <readIniFile+0x126>
				readChar = '\n';
   138b8:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   138be:	|  |           |      clr.w 568(sp)
   138c2:	|  |           |  /-- bra.s 138ca <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   138c4:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   138ca:	|  |              \-> move.b 570(sp),d0
   138ce:	|  |                  ext.w d0
   138d0:	|  |                  movea.w d0,a0
   138d2:	|  |                  moveq #61,d0
   138d4:	|  |                  cmp.l a0,d0
   138d6:	|  |     /----------- beq.w 13a80 <readIniFile+0x2e2>
   138da:	|  |     |            moveq #61,d1
   138dc:	|  |     |            cmp.l a0,d1
   138de:	|  |  /--|----------- blt.w 13a8c <readIniFile+0x2ee>
   138e2:	|  |  |  |            moveq #10,d0
   138e4:	|  |  |  |            cmp.l a0,d0
   138e6:	|  |  |  |        /-- beq.s 138f0 <readIniFile+0x152>
   138e8:	|  |  |  |        |   moveq #13,d1
   138ea:	|  |  |  |        |   cmp.l a0,d1
   138ec:	|  |  +--|--------|-- bne.w 13a8c <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   138f0:	|  |  |  |        \-> tst.w 566(sp)
   138f4:	|  |  |  |     /----- beq.w 13a6e <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   138f8:	|  |  |  |     |      pea 19ca1 <line.c.05397aaf+0x24c>
   138fe:	|  |  |  |     |      move.l sp,d0
   13900:	|  |  |  |     |      addi.l #269,d0
   13906:	|  |  |  |     |      move.l d0,-(sp)
   13908:	|  |  |  |     |      jsr 13c34 <strcmp>
   1390e:	|  |  |  |     |      addq.l #8,sp
   13910:	|  |  |  |     |      tst.l d0
   13912:	|  |  |  |     |  /-- bne.s 1392c <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13914:	|  |  |  |     |  |   move.l sp,d0
   13916:	|  |  |  |     |  |   addq.l #8,d0
   13918:	|  |  |  |     |  |   move.l d0,-(sp)
   1391a:	|  |  |  |     |  |   jsr 13b24 <stringToInt>
   13920:	|  |  |  |     |  |   addq.l #4,sp
   13922:	|  |  |  |     |  |   move.l d0,1c972 <gameSettings>
   13928:	|  |  |  |     +--|-- bra.w 13a6e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   1392c:	|  |  |  |     |  \-> pea 19caa <line.c.05397aaf+0x255>
   13932:	|  |  |  |     |      move.l sp,d0
   13934:	|  |  |  |     |      addi.l #269,d0
   1393a:	|  |  |  |     |      move.l d0,-(sp)
   1393c:	|  |  |  |     |      jsr 13c34 <strcmp>
   13942:	|  |  |  |     |      addq.l #8,sp
   13944:	|  |  |  |     |      tst.l d0
   13946:	|  |  |  |     |  /-- bne.s 1396c <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13948:	|  |  |  |     |  |   move.l sp,d0
   1394a:	|  |  |  |     |  |   addq.l #8,d0
   1394c:	|  |  |  |     |  |   move.l d0,-(sp)
   1394e:	|  |  |  |     |  |   jsr 13b24 <stringToInt>
   13954:	|  |  |  |     |  |   addq.l #4,sp
   13956:	|  |  |  |     |  |   tst.l d0
   13958:	|  |  |  |     |  |   seq d0
   1395a:	|  |  |  |     |  |   neg.b d0
   1395c:	|  |  |  |     |  |   move.b d0,d0
   1395e:	|  |  |  |     |  |   andi.w #255,d0
   13962:	|  |  |  |     |  |   move.w d0,1c97a <gameSettings+0x8>
   13968:	|  |  |  |     +--|-- bra.w 13a6e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   1396c:	|  |  |  |     |  \-> pea 19cb1 <graphics.c.1c13408a>
   13972:	|  |  |  |     |      move.l sp,d0
   13974:	|  |  |  |     |      addi.l #269,d0
   1397a:	|  |  |  |     |      move.l d0,-(sp)
   1397c:	|  |  |  |     |      jsr 13c34 <strcmp>
   13982:	|  |  |  |     |      addq.l #8,sp
   13984:	|  |  |  |     |      tst.l d0
   13986:	|  |  |  |     |  /-- bne.s 139a0 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13988:	|  |  |  |     |  |   move.l sp,d0
   1398a:	|  |  |  |     |  |   addq.l #8,d0
   1398c:	|  |  |  |     |  |   move.l d0,-(sp)
   1398e:	|  |  |  |     |  |   jsr 13b24 <stringToInt>
   13994:	|  |  |  |     |  |   addq.l #4,sp
   13996:	|  |  |  |     |  |   move.l d0,1c97c <gameSettings+0xa>
   1399c:	|  |  |  |     +--|-- bra.w 13a6e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   139a0:	|  |  |  |     |  \-> pea 19cb9 <graphics.c.1c13408a+0x8>
   139a6:	|  |  |  |     |      move.l sp,d0
   139a8:	|  |  |  |     |      addi.l #269,d0
   139ae:	|  |  |  |     |      move.l d0,-(sp)
   139b0:	|  |  |  |     |      jsr 13c34 <strcmp>
   139b6:	|  |  |  |     |      addq.l #8,sp
   139b8:	|  |  |  |     |      tst.l d0
   139ba:	|  |  |  |     |  /-- bne.s 139d4 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   139bc:	|  |  |  |     |  |   move.l sp,d0
   139be:	|  |  |  |     |  |   addq.l #8,d0
   139c0:	|  |  |  |     |  |   move.l d0,-(sp)
   139c2:	|  |  |  |     |  |   jsr 13b24 <stringToInt>
   139c8:	|  |  |  |     |  |   addq.l #4,sp
   139ca:	|  |  |  |     |  |   move.l d0,1c980 <gameSettings+0xe>
   139d0:	|  |  |  |     +--|-- bra.w 13a6e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   139d4:	|  |  |  |     |  \-> pea 19cc3 <graphics.c.1c13408a+0x12>
   139da:	|  |  |  |     |      move.l sp,d0
   139dc:	|  |  |  |     |      addi.l #269,d0
   139e2:	|  |  |  |     |      move.l d0,-(sp)
   139e4:	|  |  |  |     |      jsr 13c34 <strcmp>
   139ea:	|  |  |  |     |      addq.l #8,sp
   139ec:	|  |  |  |     |      tst.l d0
   139ee:	|  |  |  |     |  /-- bne.s 13a08 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   139f0:	|  |  |  |     |  |   move.l sp,d0
   139f2:	|  |  |  |     |  |   addq.l #8,d0
   139f4:	|  |  |  |     |  |   move.l d0,-(sp)
   139f6:	|  |  |  |     |  |   jsr 13b24 <stringToInt>
   139fc:	|  |  |  |     |  |   addq.l #4,sp
   139fe:	|  |  |  |     |  |   move.l d0,d0
   13a00:	|  |  |  |     |  |   move.w d0,1c984 <gameSettings+0x12>
   13a06:	|  |  |  |     +--|-- bra.s 13a6e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13a08:	|  |  |  |     |  \-> pea 19ccf <graphics.c.1c13408a+0x1e>
   13a0e:	|  |  |  |     |      move.l sp,d0
   13a10:	|  |  |  |     |      addi.l #269,d0
   13a16:	|  |  |  |     |      move.l d0,-(sp)
   13a18:	|  |  |  |     |      jsr 13c34 <strcmp>
   13a1e:	|  |  |  |     |      addq.l #8,sp
   13a20:	|  |  |  |     |      tst.l d0
   13a22:	|  |  |  |     |  /-- bne.s 13a3c <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13a24:	|  |  |  |     |  |   move.l sp,d0
   13a26:	|  |  |  |     |  |   addq.l #8,d0
   13a28:	|  |  |  |     |  |   move.l d0,-(sp)
   13a2a:	|  |  |  |     |  |   jsr 13b24 <stringToInt>
   13a30:	|  |  |  |     |  |   addq.l #4,sp
   13a32:	|  |  |  |     |  |   move.l d0,d0
   13a34:	|  |  |  |     |  |   move.w d0,1c986 <gameSettings+0x14>
   13a3a:	|  |  |  |     +--|-- bra.s 13a6e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13a3c:	|  |  |  |     |  \-> pea 19cdd <graphics.c.1c13408a+0x2c>
   13a42:	|  |  |  |     |      move.l sp,d0
   13a44:	|  |  |  |     |      addi.l #269,d0
   13a4a:	|  |  |  |     |      move.l d0,-(sp)
   13a4c:	|  |  |  |     |      jsr 13c34 <strcmp>
   13a52:	|  |  |  |     |      addq.l #8,sp
   13a54:	|  |  |  |     |      tst.l d0
   13a56:	|  |  |  |     +----- bne.s 13a6e <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13a58:	|  |  |  |     |      move.l sp,d0
   13a5a:	|  |  |  |     |      addq.l #8,d0
   13a5c:	|  |  |  |     |      move.l d0,-(sp)
   13a5e:	|  |  |  |     |      jsr 13b24 <stringToInt>
   13a64:	|  |  |  |     |      addq.l #4,sp
   13a66:	|  |  |  |     |      move.l d0,d0
   13a68:	|  |  |  |     |      move.w d0,1c988 <gameSettings+0x16>
					}
				}
				here = 0;
   13a6e:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13a72:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13a76:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13a7a:	|  |  |  |            clr.b 8(sp)
				break;
   13a7e:	|  |  |  |  /-------- bra.s 13af6 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13a80:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   13a86:	|  |  |     |         clr.b 571(sp)
				break;
   13a8a:	|  |  |     +-------- bra.s 13af6 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13a8c:	|  |  \-----|-------> tst.w 566(sp)
   13a90:	|  |        |  /----- beq.s 13ac4 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13a92:	|  |        |  |      move.b 571(sp),d0
   13a96:	|  |        |  |      move.b d0,d1
   13a98:	|  |        |  |      addq.b #1,d1
   13a9a:	|  |        |  |      move.b d1,571(sp)
   13a9e:	|  |        |  |      move.b d0,d0
   13aa0:	|  |        |  |      andi.l #255,d0
   13aa6:	|  |        |  |      lea 572(sp),a0
   13aaa:	|  |        |  |      adda.l d0,a0
   13aac:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13ab2:	|  |        |  |      moveq #0,d0
   13ab4:	|  |        |  |      move.b 571(sp),d0
   13ab8:	|  |        |  |      lea 572(sp),a0
   13abc:	|  |        |  |      adda.l d0,a0
   13abe:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13ac2:	|  |        |  |  /-- bra.s 13af4 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13ac4:	|  |        |  \--|-> move.b 571(sp),d0
   13ac8:	|  |        |     |   move.b d0,d1
   13aca:	|  |        |     |   addq.b #1,d1
   13acc:	|  |        |     |   move.b d1,571(sp)
   13ad0:	|  |        |     |   move.b d0,d0
   13ad2:	|  |        |     |   andi.l #255,d0
   13ad8:	|  |        |     |   lea 572(sp),a0
   13adc:	|  |        |     |   adda.l d0,a0
   13ade:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13ae4:	|  |        |     |   moveq #0,d0
   13ae6:	|  |        |     |   move.b 571(sp),d0
   13aea:	|  |        |     |   lea 572(sp),a0
   13aee:	|  |        |     |   adda.l d0,a0
   13af0:	|  |        |     |   clr.b -307(a0)
				break;
   13af4:	|  |        |     \-> nop
			}
		} while (keepGoing);
   13af6:	|  |        \-------> tst.w 568(sp)
   13afa:	|  \----------------- bne.w 1388e <readIniFile+0xf0>

		Close(fp);
   13afe:	|                     move.l 546(sp),526(sp)
   13b04:	|                     move.l 1c89e <DOSBase>,d0
   13b0a:	|                     movea.l d0,a6
   13b0c:	|                     move.l 526(sp),d1
   13b10:	|                     jsr -36(a6)
   13b14:	|                     move.l d0,522(sp)
	}
}
   13b18:	\-------------------> nop
   13b1a:	                      move.l (sp)+,d2
   13b1c:	                      movea.l (sp)+,a6
   13b1e:	                      lea 564(sp),sp
   13b22:	                      rts

00013b24 <stringToInt>:

unsigned int stringToInt (char * s) {
   13b24:	             subq.l #8,sp
	int i = 0;
   13b26:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13b2a:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13b2e:	/----------> movea.l 12(sp),a0
   13b32:	|            move.b (a0),d0
   13b34:	|            cmpi.b #47,d0
   13b38:	|        /-- ble.s 13b70 <stringToInt+0x4c>
   13b3a:	|        |   movea.l 12(sp),a0
   13b3e:	|        |   move.b (a0),d0
   13b40:	|        |   cmpi.b #57,d0
   13b44:	|        +-- bgt.s 13b70 <stringToInt+0x4c>
			i *= 10;
   13b46:	|        |   move.l 4(sp),d1
   13b4a:	|        |   move.l d1,d0
   13b4c:	|        |   add.l d0,d0
   13b4e:	|        |   add.l d0,d0
   13b50:	|        |   add.l d1,d0
   13b52:	|        |   add.l d0,d0
   13b54:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13b58:	|        |   movea.l 12(sp),a0
   13b5c:	|        |   move.b (a0),d0
   13b5e:	|        |   ext.w d0
   13b60:	|        |   movea.w d0,a0
   13b62:	|        |   moveq #-48,d0
   13b64:	|        |   add.l a0,d0
   13b66:	|        |   add.l d0,4(sp)
			s ++;
   13b6a:	|        |   addq.l #1,12(sp)
   13b6e:	|  /-----|-- bra.s 13ba8 <stringToInt+0x84>
		} else if (*s == '-') {
   13b70:	|  |     \-> movea.l 12(sp),a0
   13b74:	|  |         move.b (a0),d0
   13b76:	|  |         cmpi.b #45,d0
   13b7a:	|  |     /-- bne.s 13b94 <stringToInt+0x70>
			negative = ! negative;
   13b7c:	|  |     |   tst.w 2(sp)
   13b80:	|  |     |   seq d0
   13b82:	|  |     |   neg.b d0
   13b84:	|  |     |   move.b d0,d0
   13b86:	|  |     |   andi.w #255,d0
   13b8a:	|  |     |   move.w d0,2(sp)
			s++;
   13b8e:	|  |     |   addq.l #1,12(sp)
   13b92:	+--|-----|-- bra.s 13b2e <stringToInt+0xa>
		} else {
			if (negative)
   13b94:	|  |     \-> tst.w 2(sp)
   13b98:	|  |     /-- beq.s 13ba2 <stringToInt+0x7e>
				return -i;
   13b9a:	|  |     |   move.l 4(sp),d0
   13b9e:	|  |     |   neg.l d0
   13ba0:	|  |  /--|-- bra.s 13baa <stringToInt+0x86>
			return i;
   13ba2:	|  |  |  \-> move.l 4(sp),d0
   13ba6:	|  |  +----- bra.s 13baa <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13ba8:	\--\--|----X bra.s 13b2e <stringToInt+0xa>
		}
	}
   13baa:	      \----> addq.l #8,sp
   13bac:	             rts

00013bae <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13bae:	    lea -28(sp),sp
   13bb2:	    move.l a6,-(sp)
   13bb4:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13bb6:	    pea 19ce7 <graphics.c.1c13408a+0x36>
   13bbc:	    jsr 171b0 <KPrintF>
   13bc2:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13bc4:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13bc8:	    move.l 40(sp),30(sp)
   13bce:	    move.l #1005,26(sp)
   13bd6:	    move.l 1c89e <DOSBase>,d0
   13bdc:	    movea.l d0,a6
   13bde:	    move.l 30(sp),d1
   13be2:	    move.l 26(sp),d2
   13be6:	    jsr -30(a6)
   13bea:	    move.l d0,22(sp)
   13bee:	    move.l 22(sp),d0
   13bf2:	    move.l d0,18(sp)
	if (tester) {
   13bf6:	/-- beq.s 13c26 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13bf8:	|   pea 19d01 <graphics.c.1c13408a+0x50>
   13bfe:	|   jsr 171b0 <KPrintF>
   13c04:	|   addq.l #4,sp
		retval = 1;
   13c06:	|   move.b #1,35(sp)
		Close(tester);
   13c0c:	|   move.l 18(sp),14(sp)
   13c12:	|   move.l 1c89e <DOSBase>,d0
   13c18:	|   movea.l d0,a6
   13c1a:	|   move.l 14(sp),d1
   13c1e:	|   jsr -36(a6)
   13c22:	|   move.l d0,10(sp)
	}
	return retval;
   13c26:	\-> move.b 35(sp),d0
   13c2a:	    move.l (sp)+,d2
   13c2c:	    movea.l (sp)+,a6
   13c2e:	    lea 28(sp),sp
   13c32:	    rts

00013c34 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13c34:	   /-- bra.s 13c3e <strcmp+0xa>
    {
        s1++;
   13c36:	/--|-> addq.l #1,4(sp)
        s2++;
   13c3a:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13c3e:	|  \-> movea.l 4(sp),a0
   13c42:	|      move.b (a0),d0
   13c44:	|  /-- beq.s 13c56 <strcmp+0x22>
   13c46:	|  |   movea.l 4(sp),a0
   13c4a:	|  |   move.b (a0),d1
   13c4c:	|  |   movea.l 8(sp),a0
   13c50:	|  |   move.b (a0),d0
   13c52:	|  |   cmp.b d1,d0
   13c54:	\--|-- beq.s 13c36 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13c56:	   \-> movea.l 4(sp),a0
   13c5a:	       move.b (a0),d0
   13c5c:	       moveq #0,d1
   13c5e:	       move.b d0,d1
   13c60:	       movea.l 8(sp),a0
   13c64:	       move.b (a0),d0
   13c66:	       move.b d0,d0
   13c68:	       andi.l #255,d0
   13c6e:	       sub.l d0,d1
   13c70:	       move.l d1,d0
}
   13c72:	       rts

00013c74 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13c74:	       subq.l #4,sp
	long unsigned int i = 0;
   13c76:	       clr.l (sp)
	while(s[i]) i++; 
   13c78:	   /-- bra.s 13c7c <strlen+0x8>
   13c7a:	/--|-> addq.l #1,(sp)
   13c7c:	|  \-> movea.l 8(sp),a0
   13c80:	|      adda.l (sp),a0
   13c82:	|      move.b (a0),d0
   13c84:	\----- bne.s 13c7a <strlen+0x6>
	return(i);
   13c86:	       move.l (sp),d0
}
   13c88:	       addq.l #4,sp
   13c8a:	       rts

00013c8c <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13c8c:	    nop
   13c8e:	/-> move.l 8(sp),d0
   13c92:	|   move.l d0,d1
   13c94:	|   addq.l #1,d1
   13c96:	|   move.l d1,8(sp)
   13c9a:	|   movea.l 4(sp),a0
   13c9e:	|   lea 1(a0),a1
   13ca2:	|   move.l a1,4(sp)
   13ca6:	|   movea.l d0,a1
   13ca8:	|   move.b (a1),d0
   13caa:	|   move.b d0,(a0)
   13cac:	|   move.b (a0),d0
   13cae:	\-- bne.s 13c8e <strcpy+0x2>
}
   13cb0:	    nop
   13cb2:	    rts

00013cb4 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13cb4:	    lea -20(sp),sp
   13cb8:	    move.l a6,-(sp)
   13cba:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13cbc:	    move.l 32(sp),-(sp)
   13cc0:	    jsr 13c74 <strlen>
   13cc6:	    addq.l #4,sp
   13cc8:	    move.l d0,d2
   13cca:	    move.l 36(sp),-(sp)
   13cce:	    jsr 13c74 <strlen>
   13cd4:	    addq.l #4,sp
   13cd6:	    add.l d2,d0
   13cd8:	    move.l d0,d1
   13cda:	    addq.l #1,d1
   13cdc:	    move.l d1,20(sp)
   13ce0:	    clr.l 16(sp)
   13ce4:	    move.l 1c896 <SysBase>,d0
   13cea:	    movea.l d0,a6
   13cec:	    move.l 20(sp),d0
   13cf0:	    move.l 16(sp),d1
   13cf4:	    jsr -684(a6)
   13cf8:	    move.l d0,12(sp)
   13cfc:	    move.l 12(sp),d0
   13d00:	    move.l d0,8(sp)
	char * t = newString;
   13d04:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13d0a:	    nop
   13d0c:	/-> move.l 32(sp),d0
   13d10:	|   move.l d0,d1
   13d12:	|   addq.l #1,d1
   13d14:	|   move.l d1,32(sp)
   13d18:	|   movea.l 24(sp),a0
   13d1c:	|   lea 1(a0),a1
   13d20:	|   move.l a1,24(sp)
   13d24:	|   movea.l d0,a1
   13d26:	|   move.b (a1),d0
   13d28:	|   move.b d0,(a0)
   13d2a:	|   move.b (a0),d0
   13d2c:	\-- bne.s 13d0c <joinStrings+0x58>
	t--;
   13d2e:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13d32:	    nop
   13d34:	/-> move.l 36(sp),d0
   13d38:	|   move.l d0,d1
   13d3a:	|   addq.l #1,d1
   13d3c:	|   move.l d1,36(sp)
   13d40:	|   movea.l 24(sp),a0
   13d44:	|   lea 1(a0),a1
   13d48:	|   move.l a1,24(sp)
   13d4c:	|   movea.l d0,a1
   13d4e:	|   move.b (a1),d0
   13d50:	|   move.b d0,(a0)
   13d52:	|   move.b (a0),d0
   13d54:	\-- bne.s 13d34 <joinStrings+0x80>

	return newString;
   13d56:	    move.l 8(sp),d0
}
   13d5a:	    move.l (sp)+,d2
   13d5c:	    movea.l (sp)+,a6
   13d5e:	    lea 20(sp),sp
   13d62:	    rts

00013d64 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13d64:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13d68:	       moveq #10,d0
   13d6a:	       cmp.l 28(sp),d0
   13d6e:	   /-- bne.s 13d8c <itoa+0x28>
   13d70:	   |   tst.l 20(sp)
   13d74:	   +-- bge.s 13d8c <itoa+0x28>
        *str++ = '-';
   13d76:	   |   move.l 24(sp),d0
   13d7a:	   |   move.l d0,d1
   13d7c:	   |   addq.l #1,d1
   13d7e:	   |   move.l d1,24(sp)
   13d82:	   |   movea.l d0,a0
   13d84:	   |   move.b #45,(a0)
        value *= -1;
   13d88:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13d8c:	   \-> move.l 24(sp),12(sp)
   13d92:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13d98:	   /-> move.l 20(sp),d0
   13d9c:	   |   move.l 28(sp),-(sp)
   13da0:	   |   move.l d0,-(sp)
   13da2:	   |   jsr 17c1a <__modsi3>
   13da8:	   |   addq.l #8,sp
   13daa:	   |   movea.l d0,a1
   13dac:	   |   move.l 12(sp),d0
   13db0:	   |   move.l d0,d1
   13db2:	   |   addq.l #1,d1
   13db4:	   |   move.l d1,12(sp)
   13db8:	   |   lea 19d19 <graphics.c.1c13408a+0x68>,a0
   13dbe:	   |   move.b (0,a1,a0.l),d1
   13dc2:	   |   movea.l d0,a0
   13dc4:	   |   move.b d1,(a0)
        value /= base;
   13dc6:	   |   move.l 28(sp),-(sp)
   13dca:	   |   move.l 24(sp),-(sp)
   13dce:	   |   jsr 17bec <__divsi3>
   13dd4:	   |   addq.l #8,sp
   13dd6:	   |   move.l d0,20(sp)
    } while (value);
   13dda:	   \-- bne.s 13d98 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13ddc:	       move.l 12(sp),d0
   13de0:	       move.l d0,d1
   13de2:	       subq.l #1,d1
   13de4:	       move.l d1,12(sp)
   13de8:	       movea.l d0,a0
   13dea:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13dec:	       move.l 4(sp),8(sp)
   13df2:	   /-- bra.s 13e18 <itoa+0xb4>
        char temp = *low;
   13df4:	/--|-> movea.l 8(sp),a0
   13df8:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13dfc:	|  |   movea.l 12(sp),a0
   13e00:	|  |   move.b (a0),d0
   13e02:	|  |   movea.l 8(sp),a0
   13e06:	|  |   move.b d0,(a0)
        *ptr = temp;
   13e08:	|  |   movea.l 12(sp),a0
   13e0c:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13e10:	|  |   addq.l #1,8(sp)
   13e14:	|  |   subq.l #1,12(sp)
   13e18:	|  \-> move.l 8(sp),d0
   13e1c:	|      cmp.l 12(sp),d0
   13e20:	\----- bcs.s 13df4 <itoa+0x90>
    }
    return rc;
   13e22:	       move.l 4(sp),d0
}
   13e26:	       lea 16(sp),sp
   13e2a:	       rts

00013e2c <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13e2c:	                            lea -40(sp),sp
   13e30:	                            move.l d2,-(sp)
    char* s = str;
   13e32:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13e38:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13e3e:	   /----------------------- bra.w 13f72 <vsprintf2+0x146>
        if (*p == '%') {
   13e42:	/--|----------------------> movea.l 36(sp),a0
   13e46:	|  |                        move.b (a0),d0
   13e48:	|  |                        cmpi.b #37,d0
   13e4c:	|  |  /-------------------- bne.w 13f58 <vsprintf2+0x12c>
            switch (*++p) {
   13e50:	|  |  |                     addq.l #1,36(sp)
   13e54:	|  |  |                     movea.l 36(sp),a0
   13e58:	|  |  |                     move.b (a0),d0
   13e5a:	|  |  |                     ext.w d0
   13e5c:	|  |  |                     movea.w d0,a0
   13e5e:	|  |  |                     moveq #115,d0
   13e60:	|  |  |                     cmp.l a0,d0
   13e62:	|  |  |           /-------- beq.s 13eda <vsprintf2+0xae>
   13e64:	|  |  |           |         moveq #115,d1
   13e66:	|  |  |           |         cmp.l a0,d1
   13e68:	|  |  |  /--------|-------- blt.w 13f40 <vsprintf2+0x114>
   13e6c:	|  |  |  |        |         moveq #99,d2
   13e6e:	|  |  |  |        |         cmp.l a0,d2
   13e70:	|  |  |  |  /-----|-------- beq.w 13f18 <vsprintf2+0xec>
   13e74:	|  |  |  |  |     |         moveq #100,d0
   13e76:	|  |  |  |  |     |         cmp.l a0,d0
   13e78:	|  |  |  +--|-----|-------- bne.w 13f40 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13e7c:	|  |  |  |  |     |         addq.l #4,56(sp)
   13e80:	|  |  |  |  |     |         movea.l 56(sp),a0
   13e84:	|  |  |  |  |     |         move.l (a0),d0
   13e86:	|  |  |  |  |     |         move.l d0,d1
   13e88:	|  |  |  |  |     |         subq.l #1,d1
   13e8a:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13e8e:	|  |  |  |  |     |         pea a <_start+0xa>
   13e92:	|  |  |  |  |     |         lea 8(sp),a0
   13e96:	|  |  |  |  |     |         move.l a0,-(sp)
   13e98:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13e9c:	|  |  |  |  |     |         jsr 13d64 <itoa>
   13ea2:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13ea6:	|  |  |  |  |     |         lea 44(sp),a0
   13eaa:	|  |  |  |  |     |         lea -40(a0),a0
   13eae:	|  |  |  |  |     |         move.l a0,28(sp)
   13eb2:	|  |  |  |  |     |     /-- bra.s 13ece <vsprintf2+0xa2>
                        *s++ = *b;
   13eb4:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13eb8:	|  |  |  |  |     |  |  |   move.l d0,d1
   13eba:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13ebc:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13ec0:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13ec4:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13ec6:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13ec8:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13eca:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13ece:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   13ed2:	|  |  |  |  |     |  |      move.b (a0),d0
   13ed4:	|  |  |  |  |     |  \----- bne.s 13eb4 <vsprintf2+0x88>
                    }
                    break;
   13ed6:	|  |  |  |  |  /--|-------- bra.w 13f6e <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13eda:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   13ede:	|  |  |  |  |  |            movea.l 56(sp),a0
   13ee2:	|  |  |  |  |  |            move.l (a0),d0
   13ee4:	|  |  |  |  |  |            move.l d0,d1
   13ee6:	|  |  |  |  |  |            subq.l #1,d1
   13ee8:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13eec:	|  |  |  |  |  |        /-- bra.s 13f0e <vsprintf2+0xe2>
                        *s++ = *sval++;
   13eee:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   13ef2:	|  |  |  |  |  |     |  |   move.l d1,d2
   13ef4:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13ef6:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13efa:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13efe:	|  |  |  |  |  |     |  |   move.l d0,d2
   13f00:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13f02:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13f06:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13f08:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13f0a:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13f0c:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13f0e:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   13f12:	|  |  |  |  |  |     |      move.b (a0),d0
   13f14:	|  |  |  |  |  |     \----- bne.s 13eee <vsprintf2+0xc2>
                    }
                    break;
   13f16:	|  |  |  |  |  +----------- bra.s 13f6e <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13f18:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   13f1c:	|  |  |  |     |            movea.l 56(sp),a0
   13f20:	|  |  |  |     |            move.l (a0),d0
   13f22:	|  |  |  |     |            move.l d0,d1
   13f24:	|  |  |  |     |            subq.l #1,d1
   13f26:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13f2a:	|  |  |  |     |            move.l 40(sp),d0
   13f2e:	|  |  |  |     |            move.l d0,d2
   13f30:	|  |  |  |     |            addq.l #1,d2
   13f32:	|  |  |  |     |            move.l d2,40(sp)
   13f36:	|  |  |  |     |            move.l 24(sp),d1
   13f3a:	|  |  |  |     |            movea.l d0,a0
   13f3c:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13f3e:	|  |  |  |     +----------- bra.s 13f6e <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13f40:	|  |  |  \-----|----------> move.l 40(sp),d0
   13f44:	|  |  |        |            move.l d0,d1
   13f46:	|  |  |        |            addq.l #1,d1
   13f48:	|  |  |        |            move.l d1,40(sp)
   13f4c:	|  |  |        |            movea.l 36(sp),a0
   13f50:	|  |  |        |            move.b (a0),d1
   13f52:	|  |  |        |            movea.l d0,a0
   13f54:	|  |  |        |            move.b d1,(a0)
                    break;
   13f56:	|  |  |        +----------- bra.s 13f6e <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13f58:	|  |  \--------|----------> move.l 40(sp),d0
   13f5c:	|  |           |            move.l d0,d1
   13f5e:	|  |           |            addq.l #1,d1
   13f60:	|  |           |            move.l d1,40(sp)
   13f64:	|  |           |            movea.l 36(sp),a0
   13f68:	|  |           |            move.b (a0),d1
   13f6a:	|  |           |            movea.l d0,a0
   13f6c:	|  |           |            move.b d1,(a0)
        }
        p++;
   13f6e:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13f72:	|  \----------------------> movea.l 36(sp),a0
   13f76:	|                           move.b (a0),d0
   13f78:	\-------------------------- bne.w 13e42 <vsprintf2+0x16>
    }
    *s = '\0';
   13f7c:	                            movea.l 40(sp),a0
   13f80:	                            clr.b (a0)
    return s - str;
   13f82:	                            move.l 40(sp),d0
   13f86:	                            sub.l 48(sp),d0
}
   13f8a:	                            move.l (sp)+,d2
   13f8c:	                            lea 40(sp),sp
   13f90:	                            rts

00013f92 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13f92:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13f94:	moveq #16,d0
   13f96:	add.l sp,d0
   13f98:	move.l d0,d1
   13f9a:	addq.l #4,d1
   13f9c:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13fa0:	move.l 16(sp),d0
   13fa4:	move.l 4(sp),-(sp)
   13fa8:	move.l d0,-(sp)
   13faa:	move.l 20(sp),-(sp)
   13fae:	jsr 13e2c <vsprintf2>
   13fb4:	lea 12(sp),sp
   13fb8:	move.l d0,(sp)
    va_end(args);
   13fba:	clr.l 4(sp)

    return done;
   13fbe:	move.l (sp),d0
}
   13fc0:	addq.l #8,sp
   13fc2:	rts

00013fc4 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13fc4:	       lea -20(sp),sp
   13fc8:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13fca:	       moveq #12,d0
   13fcc:	       move.l d0,20(sp)
   13fd0:	       clr.l 16(sp)
   13fd4:	       move.l 1c896 <SysBase>,d0
   13fda:	       movea.l d0,a6
   13fdc:	       move.l 20(sp),d0
   13fe0:	       move.l 16(sp),d1
   13fe4:	       jsr -684(a6)
   13fe8:	       move.l d0,12(sp)
   13fec:	       move.l 12(sp),d0
   13ff0:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13ff4:	   /-- bne.s 13ffa <addVarToStack+0x36>
   13ff6:	   |   clr.w d0
   13ff8:	/--|-- bra.s 14042 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13ffa:	|  \-> move.l 8(sp),d0
   13ffe:	|      move.l d0,-(sp)
   14000:	|      move.l 32(sp),-(sp)
   14004:	|      jsr 14b26 <copyMain>
   1400a:	|      addq.l #8,sp
   1400c:	|      tst.w d0
   1400e:	|  /-- bne.s 1402a <addVarToStack+0x66>
        FreeVec(newStack);
   14010:	|  |   move.l 8(sp),4(sp)
   14016:	|  |   move.l 1c896 <SysBase>,d0
   1401c:	|  |   movea.l d0,a6
   1401e:	|  |   movea.l 4(sp),a1
   14022:	|  |   jsr -690(a6)
        return FALSE;
   14026:	|  |   clr.w d0
   14028:	+--|-- bra.s 14042 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   1402a:	|  \-> movea.l 32(sp),a0
   1402e:	|      move.l (a0),d0
   14030:	|      movea.l 8(sp),a0
   14034:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14038:	|      movea.l 32(sp),a0
   1403c:	|      move.l 8(sp),(a0)
    return TRUE;
   14040:	|      moveq #1,d0
}
   14042:	\----> movea.l (sp)+,a6
   14044:	       lea 20(sp),sp
   14048:	       rts

0001404a <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   1404a:	       lea -16(sp),sp
   1404e:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14050:	       moveq #12,d0
   14052:	       move.l d0,16(sp)
   14056:	       clr.l 12(sp)
   1405a:	       move.l 1c896 <SysBase>,d0
   14060:	       movea.l d0,a6
   14062:	       move.l 16(sp),d0
   14066:	       move.l 12(sp),d1
   1406a:	       jsr -684(a6)
   1406e:	       move.l d0,8(sp)
   14072:	       move.l 8(sp),d0
   14076:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   1407a:	   /-- bne.s 14080 <addVarToStackQuick+0x36>
   1407c:	   |   clr.w d0
   1407e:	/--|-- bra.s 140b6 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   14080:	|  \-> move.l 4(sp),d0
   14084:	|      pea 8 <_start+0x8>
   14088:	|      move.l 28(sp),-(sp)
   1408c:	|      move.l d0,-(sp)
   1408e:	|      jsr 17164 <memcpy>
   14094:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   14098:	|      movea.l 24(sp),a0
   1409c:	|      clr.l (a0)

    newStack->next = *thisStack;
   1409e:	|      movea.l 28(sp),a0
   140a2:	|      move.l (a0),d0
   140a4:	|      movea.l 4(sp),a0
   140a8:	|      move.l d0,8(a0)
    *thisStack = newStack;
   140ac:	|      movea.l 28(sp),a0
   140b0:	|      move.l 4(sp),(a0)
    return TRUE;
   140b4:	|      moveq #1,d0
}
   140b6:	\----> movea.l (sp)+,a6
   140b8:	       lea 16(sp),sp
   140bc:	       rts

000140be <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   140be:	       lea -16(sp),sp
   140c2:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   140c4:	       movea.l 24(sp),a0
   140c8:	       move.l (a0),d0
   140ca:	       moveq #1,d1
   140cc:	       cmp.l d0,d1
   140ce:	   /-- bne.s 140f8 <addVariablesInSecond+0x3a>
   140d0:	   |   movea.l 28(sp),a0
   140d4:	   |   move.l (a0),d0
   140d6:	   |   moveq #1,d1
   140d8:	   |   cmp.l d0,d1
   140da:	   +-- bne.s 140f8 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   140dc:	   |   movea.l 28(sp),a0
   140e0:	   |   move.l 4(a0),d1
   140e4:	   |   movea.l 24(sp),a0
   140e8:	   |   move.l 4(a0),d0
   140ec:	   |   add.l d1,d0
   140ee:	   |   movea.l 28(sp),a0
   140f2:	   |   move.l d0,4(a0)
   140f6:	/--|-- bra.s 14172 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   140f8:	|  \-> move.l 24(sp),-(sp)
   140fc:	|      jsr 14d5e <getTextFromAnyVar>
   14102:	|      addq.l #4,sp
   14104:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   14108:	|      move.l 28(sp),-(sp)
   1410c:	|      jsr 14d5e <getTextFromAnyVar>
   14112:	|      addq.l #4,sp
   14114:	|      move.l d0,12(sp)

		unlinkVar(var2);
   14118:	|      move.l 28(sp),-(sp)
   1411c:	|      jsr 149d6 <unlinkVar>
   14122:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14124:	|      move.l 12(sp),-(sp)
   14128:	|      move.l 20(sp),-(sp)
   1412c:	|      jsr 13cb4 <joinStrings>
   14132:	|      addq.l #8,sp
   14134:	|      movea.l 28(sp),a0
   14138:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   1413c:	|      movea.l 28(sp),a0
   14140:	|      moveq #3,d0
   14142:	|      move.l d0,(a0)
		FreeVec(string1);
   14144:	|      move.l 16(sp),8(sp)
   1414a:	|      move.l 1c896 <SysBase>,d0
   14150:	|      movea.l d0,a6
   14152:	|      movea.l 8(sp),a1
   14156:	|      jsr -690(a6)
		FreeVec(string2);
   1415a:	|      move.l 12(sp),4(sp)
   14160:	|      move.l 1c896 <SysBase>,d0
   14166:	|      movea.l d0,a6
   14168:	|      movea.l 4(sp),a1
   1416c:	|      jsr -690(a6)
	}
}
   14170:	|      nop
   14172:	\----> nop
   14174:	       movea.l (sp)+,a6
   14176:	       lea 16(sp),sp
   1417a:	       rts

0001417c <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   1417c:	movea.l 8(sp),a0
   14180:	move.l 4(a0),-(sp)
   14184:	move.l (a0),-(sp)
   14186:	movea.l 12(sp),a0
   1418a:	move.l 4(a0),-(sp)
   1418e:	move.l (a0),-(sp)
   14190:	jsr 141b2 <compareVars>
   14196:	lea 16(sp),sp
   1419a:	move.l d0,-(sp)
   1419c:	pea 1 <_start+0x1>
   141a0:	move.l 16(sp),-(sp)
   141a4:	jsr 1507a <setVariable>
   141aa:	lea 12(sp),sp
}
   141ae:	nop
   141b0:	rts

000141b2 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   141b2:	       subq.l #4,sp
	int re = 0;
   141b4:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   141b6:	       move.l 8(sp),d1
   141ba:	       move.l 16(sp),d0
   141be:	       cmp.l d1,d0
   141c0:	/----- bne.w 14288 <compareVars+0xd6>
		switch (var1.varType) {
   141c4:	|      move.l 8(sp),d0
   141c8:	|      moveq #9,d1
   141ca:	|      cmp.l d0,d1
   141cc:	|  /-- bcs.w 14270 <compareVars+0xbe>
   141d0:	|  |   add.l d0,d0
   141d2:	|  |   movea.l d0,a0
   141d4:	|  |   adda.l #82400,a0
   141da:	|  |   move.w (a0),d0
   141dc:	|  |   jmp (141e0 <compareVars+0x2e>,pc,d0.w)
   141e0:	|  |   ori.b #-112,(a4)
   141e4:	|  |   ori.l #5243024,(a0)
   141ea:	|  |   ori.l #7733392,(a0)
   141f0:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   141f6:	|  |   move.l d0,(sp)
			break;
   141f8:	+--|-- bra.w 14288 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   141fc:	|  |   move.l 12(sp),d1
   14200:	|  |   move.l 20(sp),d0
   14204:	|  |   cmp.l d1,d0
   14206:	|  |   seq d0
   14208:	|  |   neg.b d0
   1420a:	|  |   move.b d0,d0
   1420c:	|  |   andi.l #255,d0
   14212:	|  |   move.l d0,(sp)
			break;
   14214:	+--|-- bra.s 14288 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14216:	|  |   move.l 12(sp),d1
   1421a:	|  |   move.l 20(sp),d0
   1421e:	|  |   cmp.l d1,d0
   14220:	|  |   seq d0
   14222:	|  |   neg.b d0
   14224:	|  |   move.b d0,d0
   14226:	|  |   andi.l #255,d0
   1422c:	|  |   move.l d0,(sp)
			break;
   1422e:	+--|-- bra.s 14288 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14230:	|  |   move.l 20(sp),d1
   14234:	|  |   move.l 12(sp),d0
   14238:	|  |   move.l d1,-(sp)
   1423a:	|  |   move.l d0,-(sp)
   1423c:	|  |   jsr 13c34 <strcmp>
   14242:	|  |   addq.l #8,sp
   14244:	|  |   tst.l d0
   14246:	|  |   seq d0
   14248:	|  |   neg.b d0
   1424a:	|  |   move.b d0,d0
   1424c:	|  |   andi.l #255,d0
   14252:	|  |   move.l d0,(sp)
			break;
   14254:	+--|-- bra.s 14288 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   14256:	|  |   move.l 12(sp),d1
   1425a:	|  |   move.l 20(sp),d0
   1425e:	|  |   cmp.l d1,d0
   14260:	|  |   seq d0
   14262:	|  |   neg.b d0
   14264:	|  |   move.b d0,d0
   14266:	|  |   andi.l #255,d0
   1426c:	|  |   move.l d0,(sp)
			break;
   1426e:	+--|-- bra.s 14288 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   14270:	|  \-> move.l 12(sp),d1
   14274:	|      move.l 20(sp),d0
   14278:	|      cmp.l d1,d0
   1427a:	|      seq d0
   1427c:	|      neg.b d0
   1427e:	|      move.b d0,d0
   14280:	|      andi.l #255,d0
   14286:	|      move.l d0,(sp)
		}
	}
	return re;
   14288:	\----> move.l (sp),d0
}
   1428a:	       addq.l #4,sp
   1428c:	       rts

0001428e <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1428e:	             lea -16(sp),sp
   14292:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   14294:	             movea.l 28(sp),a0
   14298:	             moveq #6,d0
   1429a:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1429c:	             moveq #12,d0
   1429e:	             move.l d0,12(sp)
   142a2:	             clr.l 8(sp)
   142a6:	             move.l 1c896 <SysBase>,d0
   142ac:	             movea.l d0,a6
   142ae:	             move.l 12(sp),d0
   142b2:	             move.l 8(sp),d1
   142b6:	             jsr -684(a6)
   142ba:	             move.l d0,4(sp)
   142be:	             move.l 4(sp),d0
   142c2:	             movea.l 28(sp),a0
   142c6:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   142ca:	             movea.l 28(sp),a0
   142ce:	             move.l 4(a0),d0
   142d2:	         /-- bne.s 142da <copyStack+0x4c>
   142d4:	         |   clr.w d0
   142d6:	/--------|-- bra.w 1435c <copyStack+0xce>
	to->varData.theStack->first = NULL;
   142da:	|        \-> movea.l 28(sp),a0
   142de:	|            movea.l 4(a0),a0
   142e2:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   142e4:	|            movea.l 28(sp),a0
   142e8:	|            movea.l 4(a0),a0
   142ec:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   142f0:	|            movea.l 28(sp),a0
   142f4:	|            movea.l 4(a0),a0
   142f8:	|            moveq #1,d0
   142fa:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   142fe:	|            movea.l 24(sp),a0
   14302:	|            movea.l 4(a0),a0
   14306:	|            move.l (a0),16(sp)

	while (a) {
   1430a:	|     /----- bra.s 14354 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1430c:	|  /--|----> movea.l 28(sp),a0
   14310:	|  |  |      move.l 4(a0),d0
   14314:	|  |  |      move.l d0,d1
   14316:	|  |  |      move.l 16(sp),d0
   1431a:	|  |  |      move.l d1,-(sp)
   1431c:	|  |  |      move.l d0,-(sp)
   1431e:	|  |  |      jsr 13fc4 <addVarToStack>
   14324:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14326:	|  |  |      movea.l 28(sp),a0
   1432a:	|  |  |      movea.l 4(a0),a0
   1432e:	|  |  |      move.l 4(a0),d0
   14332:	|  |  |  /-- bne.s 1434a <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14334:	|  |  |  |   movea.l 28(sp),a0
   14338:	|  |  |  |   movea.l 4(a0),a1
   1433c:	|  |  |  |   movea.l 28(sp),a0
   14340:	|  |  |  |   movea.l 4(a0),a0
   14344:	|  |  |  |   move.l (a1),d0
   14346:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1434a:	|  |  |  \-> movea.l 16(sp),a0
   1434e:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14354:	|  |  \----> tst.l 16(sp)
   14358:	|  \-------- bne.s 1430c <copyStack+0x7e>
	}

	return TRUE;
   1435a:	|            moveq #1,d0
}
   1435c:	\----------> movea.l (sp)+,a6
   1435e:	             lea 16(sp),sp
   14362:	             rts

00014364 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   14364:	                lea -20(sp),sp
   14368:	                move.l a6,-(sp)
   1436a:	                move.l 36(sp),d0
   1436e:	                move.w d0,d0
   14370:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   14374:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   1437a:	                clr.l 16(sp)

    while (*huntVar) {
   1437e:	   /----------- bra.s 143fc <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14380:	/--|----------> movea.l 20(sp),a0
   14384:	|  |            movea.l (a0),a0
   14386:	|  |            movea.l 28(sp),a1
   1438a:	|  |            move.l 4(a1),-(sp)
   1438e:	|  |            move.l (a1),-(sp)
   14390:	|  |            move.l 4(a0),-(sp)
   14394:	|  |            move.l (a0),-(sp)
   14396:	|  |            jsr 141b2 <compareVars>
   1439c:	|  |            lea 16(sp),sp
   143a0:	|  |            tst.l d0
   143a2:	|  |  /-------- beq.s 143ee <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   143a4:	|  |  |         movea.l 20(sp),a0
   143a8:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   143ac:	|  |  |         movea.l 12(sp),a0
   143b0:	|  |  |         move.l 8(a0),d0
   143b4:	|  |  |         movea.l 20(sp),a0
   143b8:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   143ba:	|  |  |         move.l 12(sp),d0
   143be:	|  |  |         move.l d0,-(sp)
   143c0:	|  |  |         jsr 149d6 <unlinkVar>
   143c6:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   143c8:	|  |  |         move.l 12(sp),8(sp)
   143ce:	|  |  |         move.l 1c896 <SysBase>,d0
   143d4:	|  |  |         movea.l d0,a6
   143d6:	|  |  |         movea.l 8(sp),a1
   143da:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   143de:	|  |  |         tst.w 6(sp)
   143e2:	|  |  |     /-- bne.s 143e8 <deleteVarFromStack+0x84>
   143e4:	|  |  |     |   moveq #1,d0
   143e6:	|  |  |  /--|-- bra.s 1440a <deleteVarFromStack+0xa6>
            reply++;
   143e8:	|  |  |  |  \-> addq.l #1,16(sp)
   143ec:	|  +--|--|----- bra.s 143fc <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   143ee:	|  |  \--|----> movea.l 20(sp),a0
   143f2:	|  |     |      move.l (a0),d0
   143f4:	|  |     |      move.l d0,d1
   143f6:	|  |     |      addq.l #8,d1
   143f8:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   143fc:	|  \-----|----> movea.l 20(sp),a0
   14400:	|        |      move.l (a0),d0
   14402:	\--------|----- bne.w 14380 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14406:	         |      move.l 16(sp),d0
}
   1440a:	         \----> movea.l (sp)+,a6
   1440c:	                lea 20(sp),sp
   14410:	                rts

00014412 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14412:	       movea.l 4(sp),a0
   14416:	       move.l 4(a0),d0
   1441a:	       cmp.l 8(sp),d0
   1441e:	   /-- bhi.s 14424 <fastArrayGetByIndex+0x12>
   14420:	   |   moveq #0,d0
   14422:	/--|-- bra.s 14432 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14424:	|  \-> movea.l 4(sp),a0
   14428:	|      move.l (a0),d1
   1442a:	|      move.l 8(sp),d0
   1442e:	|      lsl.l #3,d0
   14430:	|      add.l d1,d0
}
   14432:	\----> rts

00014434 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14434:	                lea -32(sp),sp
   14438:	                move.l a6,-(sp)
   1443a:	                move.l a2,-(sp)
    struct persona *p = NULL;
   1443c:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14440:	                movea.l 44(sp),a0
   14444:	                move.l (a0),d0
   14446:	                moveq #8,d1
   14448:	                cmp.l d0,d1
   1444a:	            /-- beq.s 14458 <getCostumeFromVar+0x24>
   1444c:	            |   moveq #9,d1
   1444e:	            |   cmp.l d0,d1
   14450:	   /--------|-- beq.w 14506 <getCostumeFromVar+0xd2>
   14454:	/--|--------|-- bra.w 14510 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   14458:	|  |        \-> moveq #8,d0
   1445a:	|  |            move.l d0,28(sp)
   1445e:	|  |            clr.l 24(sp)
   14462:	|  |            move.l 1c896 <SysBase>,d0
   14468:	|  |            movea.l d0,a6
   1446a:	|  |            move.l 28(sp),d0
   1446e:	|  |            move.l 24(sp),d1
   14472:	|  |            jsr -684(a6)
   14476:	|  |            move.l d0,20(sp)
   1447a:	|  |            move.l 20(sp),d0
   1447e:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14482:	|  |        /-- bne.s 1448a <getCostumeFromVar+0x56>
   14484:	|  |        |   moveq #0,d0
   14486:	|  |  /-----|-- bra.w 1453a <getCostumeFromVar+0x106>
            p->numDirections = 1;
   1448a:	|  |  |     \-> movea.l 36(sp),a0
   1448e:	|  |  |         moveq #1,d1
   14490:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14494:	|  |  |         moveq #12,d0
   14496:	|  |  |         move.l d0,16(sp)
   1449a:	|  |  |         clr.l 12(sp)
   1449e:	|  |  |         move.l 1c896 <SysBase>,d0
   144a4:	|  |  |         movea.l d0,a6
   144a6:	|  |  |         move.l 16(sp),d0
   144aa:	|  |  |         move.l 12(sp),d1
   144ae:	|  |  |         jsr -684(a6)
   144b2:	|  |  |         move.l d0,8(sp)
   144b6:	|  |  |         move.l 8(sp),d0
   144ba:	|  |  |         movea.l 36(sp),a0
   144be:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   144c0:	|  |  |         movea.l 36(sp),a0
   144c4:	|  |  |         move.l (a0),d0
   144c6:	|  |  |     /-- bne.s 144cc <getCostumeFromVar+0x98>
   144c8:	|  |  |     |   moveq #0,d0
   144ca:	|  |  +-----|-- bra.s 1453a <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   144cc:	|  |  |     \-> clr.l 32(sp)
   144d0:	|  |  |     /-- bra.s 144fc <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   144d2:	|  |  |  /--|-> movea.l 44(sp),a0
   144d6:	|  |  |  |  |   move.l 4(a0),d0
   144da:	|  |  |  |  |   movea.l 36(sp),a0
   144de:	|  |  |  |  |   movea.l (a0),a0
   144e0:	|  |  |  |  |   move.l 32(sp),d1
   144e4:	|  |  |  |  |   add.l d1,d1
   144e6:	|  |  |  |  |   add.l d1,d1
   144e8:	|  |  |  |  |   lea (0,a0,d1.l),a2
   144ec:	|  |  |  |  |   move.l d0,-(sp)
   144ee:	|  |  |  |  |   jsr 9592 <copyAnim>
   144f4:	|  |  |  |  |   addq.l #4,sp
   144f6:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   144f8:	|  |  |  |  |   addq.l #1,32(sp)
   144fc:	|  |  |  |  \-> moveq #2,d1
   144fe:	|  |  |  |      cmp.l 32(sp),d1
   14502:	|  |  |  \----- bge.s 144d2 <getCostumeFromVar+0x9e>
            }
            break;
   14504:	|  |  |     /-- bra.s 14536 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14506:	|  \--|-----|-> movea.l 44(sp),a0
   1450a:	|     |     |   move.l 4(a0),d0
   1450e:	|     +-----|-- bra.s 1453a <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14510:	\-----|-----|-> movea.l 44(sp),a0
   14514:	      |     |   move.l (a0),d0
   14516:	      |     |   add.l d0,d0
   14518:	      |     |   movea.l d0,a1
   1451a:	      |     |   adda.l d0,a1
   1451c:	      |     |   lea 1c772 <typeName>,a0
   14522:	      |     |   move.l (0,a1,a0.l),d0
   14526:	      |     |   move.l d0,-(sp)
   14528:	      |     |   pea 19d8b <graphics.c.1c13408a+0xda>
   1452e:	      |     |   jsr 171b0 <KPrintF>
   14534:	      |     |   addq.l #8,sp
    }

    return p;
   14536:	      |     \-> move.l 36(sp),d0
}
   1453a:	      \-------> movea.l (sp)+,a2
   1453c:	                movea.l (sp)+,a6
   1453e:	                lea 32(sp),sp
   14542:	                rts

00014544 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14544:	                lea -96(sp),sp
   14548:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   1454c:	                move.l 116(sp),-(sp)
   14550:	                pea 19dc3 <graphics.c.1c13408a+0x112>
   14556:	                jsr 13cb4 <joinStrings>
   1455c:	                addq.l #8,sp
   1455e:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   14562:	            /-- bne.s 1456a <getSavedGamesStack+0x26>
   14564:	            |   clr.w d0
   14566:	/-----------|-- bra.w 1477e <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   1456a:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   1456e:	|               move.l #105925,98(sp)
   14576:	|               moveq #-2,d0
   14578:	|               move.l d0,94(sp)
   1457c:	|               move.l 1c89e <DOSBase>,d0
   14582:	|               movea.l d0,a6
   14584:	|               move.l 98(sp),d1
   14588:	|               move.l 94(sp),d2
   1458c:	|               jsr -84(a6)
   14590:	|               move.l d0,90(sp)
   14594:	|               move.l 90(sp),d0
   14598:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   1459c:	|           /-- bne.s 145a4 <getSavedGamesStack+0x60>
   1459e:	|           |   clr.w d0
   145a0:	+-----------|-- bra.w 1477e <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   145a4:	|           \-> move.l #260,82(sp)
   145ac:	|               move.l #65536,78(sp)
   145b4:	|               move.l 1c896 <SysBase>,d0
   145ba:	|               movea.l d0,a6
   145bc:	|               move.l 82(sp),d0
   145c0:	|               move.l 78(sp),d1
   145c4:	|               jsr -684(a6)
   145c8:	|               move.l d0,74(sp)
   145cc:	|               move.l 74(sp),d0
   145d0:	|               move.l d0,70(sp)
	if (!fib) {
   145d4:	|           /-- bne.s 145f2 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   145d6:	|           |   move.l 86(sp),22(sp)
   145dc:	|           |   move.l 1c89e <DOSBase>,d0
   145e2:	|           |   movea.l d0,a6
   145e4:	|           |   move.l 22(sp),d1
   145e8:	|           |   jsr -90(a6)
		return FALSE;
   145ec:	|           |   clr.w d0
   145ee:	+-----------|-- bra.w 1477e <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   145f2:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   145f6:	|               move.l 86(sp),66(sp)
   145fc:	|               move.l 70(sp),62(sp)
   14602:	|               move.l 1c89e <DOSBase>,d0
   14608:	|               movea.l d0,a6
   1460a:	|               move.l 66(sp),d1
   1460e:	|               move.l 62(sp),d2
   14612:	|               jsr -102(a6)
   14616:	|               move.l d0,58(sp)
   1461a:	|               move.l 58(sp),d0
   1461e:	|  /----------- beq.w 14732 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14622:	|  |        /-- bra.w 146fe <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14626:	|  |  /-----|-> move.l 70(sp),d2
   1462a:	|  |  |     |   addq.l #8,d2
   1462c:	|  |  |     |   move.l 70(sp),d0
   14630:	|  |  |     |   addq.l #8,d0
   14632:	|  |  |     |   move.l d0,-(sp)
   14634:	|  |  |     |   jsr 13c74 <strlen>
   1463a:	|  |  |     |   addq.l #4,sp
   1463c:	|  |  |     |   move.l d0,d3
   1463e:	|  |  |     |   move.l 116(sp),-(sp)
   14642:	|  |  |     |   jsr 13c74 <strlen>
   14648:	|  |  |     |   addq.l #4,sp
   1464a:	|  |  |     |   move.l d3,d1
   1464c:	|  |  |     |   sub.l d0,d1
   1464e:	|  |  |     |   move.l d2,d0
   14650:	|  |  |     |   add.l d1,d0
   14652:	|  |  |     |   move.l 116(sp),-(sp)
   14656:	|  |  |     |   move.l d0,-(sp)
   14658:	|  |  |     |   jsr 13c34 <strcmp>
   1465e:	|  |  |     |   addq.l #8,sp
   14660:	|  |  |     |   tst.l d0
   14662:	|  |  |     +-- bne.w 146fe <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   14666:	|  |  |     |   move.l 70(sp),d0
   1466a:	|  |  |     |   addq.l #8,d0
   1466c:	|  |  |     |   move.l d0,-(sp)
   1466e:	|  |  |     |   jsr 13c74 <strlen>
   14674:	|  |  |     |   addq.l #4,sp
   14676:	|  |  |     |   move.l d0,d2
   14678:	|  |  |     |   move.l 116(sp),-(sp)
   1467c:	|  |  |     |   jsr 13c74 <strlen>
   14682:	|  |  |     |   addq.l #4,sp
   14684:	|  |  |     |   move.l d0,d1
   14686:	|  |  |     |   move.l d2,d0
   14688:	|  |  |     |   sub.l d1,d0
   1468a:	|  |  |     |   movea.l 70(sp),a0
   1468e:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14692:	|  |  |     |   move.l 70(sp),d0
   14696:	|  |  |     |   addq.l #8,d0
   14698:	|  |  |     |   move.l d0,-(sp)
   1469a:	|  |  |     |   jsr 118 <decodeFilename>
   146a0:	|  |  |     |   addq.l #4,sp
   146a2:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   146a6:	|  |  |     |   move.l 42(sp),-(sp)
   146aa:	|  |  |     |   lea 18(sp),a0
   146ae:	|  |  |     |   move.l a0,-(sp)
   146b0:	|  |  |     |   jsr 149aa <makeTextVar>
   146b6:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   146b8:	|  |  |     |   move.l 42(sp),38(sp)
   146be:	|  |  |     |   move.l 1c896 <SysBase>,d0
   146c4:	|  |  |     |   movea.l d0,a6
   146c6:	|  |  |     |   movea.l 38(sp),a1
   146ca:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   146ce:	|  |  |     |   move.l 112(sp),d0
   146d2:	|  |  |     |   move.l d0,-(sp)
   146d4:	|  |  |     |   lea 18(sp),a0
   146d8:	|  |  |     |   move.l a0,-(sp)
   146da:	|  |  |     |   jsr 13fc4 <addVarToStack>
   146e0:	|  |  |     |   addq.l #8,sp
   146e2:	|  |  |     |   tst.w d0
   146e4:	|  |  |  /--|-- beq.s 14736 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   146e6:	|  |  |  |  |   movea.l 112(sp),a0
   146ea:	|  |  |  |  |   move.l 4(a0),d0
   146ee:	|  |  |  |  +-- bne.s 146fe <getSavedGamesStack+0x1ba>
   146f0:	|  |  |  |  |   movea.l 112(sp),a0
   146f4:	|  |  |  |  |   move.l (a0),d0
   146f6:	|  |  |  |  |   movea.l 112(sp),a0
   146fa:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   146fe:	|  |  |  |  \-> move.l 86(sp),54(sp)
   14704:	|  |  |  |      move.l 70(sp),50(sp)
   1470a:	|  |  |  |      move.l 1c89e <DOSBase>,d0
   14710:	|  |  |  |      movea.l d0,a6
   14712:	|  |  |  |      move.l 54(sp),d1
   14716:	|  |  |  |      move.l 50(sp),d2
   1471a:	|  |  |  |      jsr -108(a6)
   1471e:	|  |  |  |      move.l d0,46(sp)
   14722:	|  |  |  |      move.l 46(sp),d0
   14726:	|  |  \--|----- bne.w 14626 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   1472a:	|  |     |      move.w #1,106(sp)
   14730:	|  |     |  /-- bra.s 14738 <getSavedGamesStack+0x1f4>
	}

cleanup:
   14732:	|  \-----|--|-> nop
   14734:	|        |  +-- bra.s 14738 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14736:	|        \--|-> nop
	FreeVec(fib);
   14738:	|           \-> move.l 70(sp),34(sp)
   1473e:	|               move.l 1c896 <SysBase>,d0
   14744:	|               movea.l d0,a6
   14746:	|               movea.l 34(sp),a1
   1474a:	|               jsr -690(a6)
	UnLock(dirLock);
   1474e:	|               move.l 86(sp),30(sp)
   14754:	|               move.l 1c89e <DOSBase>,d0
   1475a:	|               movea.l d0,a6
   1475c:	|               move.l 30(sp),d1
   14760:	|               jsr -90(a6)
	FreeVec(pattern);
   14764:	|               move.l 102(sp),26(sp)
   1476a:	|               move.l 1c896 <SysBase>,d0
   14770:	|               movea.l d0,a6
   14772:	|               movea.l 26(sp),a1
   14776:	|               jsr -690(a6)
	return result;
   1477a:	|               move.w 106(sp),d0
}
   1477e:	\-------------> movem.l (sp)+,d2-d3/a6
   14782:	                lea 96(sp),sp
   14786:	                rts

00014788 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14788:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   1478a:	       movea.l 20(sp),a0
   1478e:	       move.l (a0),d0
   14790:	       cmp.l 16(sp),d0
   14794:	/----- beq.s 147f8 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14796:	|      move.l 16(sp),d0
   1479a:	|      add.l d0,d0
   1479c:	|      movea.l d0,a1
   1479e:	|      adda.l d0,a1
   147a0:	|      lea 1c772 <typeName>,a0
   147a6:	|      move.l (0,a1,a0.l),d0
   147aa:	|      move.l d0,-(sp)
   147ac:	|      pea 19dc7 <graphics.c.1c13408a+0x116>
   147b2:	|      jsr 13cb4 <joinStrings>
   147b8:	|      addq.l #8,sp
   147ba:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   147be:	|      movea.l 20(sp),a0
   147c2:	|      move.l (a0),d0
   147c4:	|      add.l d0,d0
   147c6:	|      movea.l d0,a1
   147c8:	|      adda.l d0,a1
   147ca:	|      lea 1c772 <typeName>,a0
   147d0:	|      move.l (0,a1,a0.l),d0
   147d4:	|      move.l d0,-(sp)
   147d6:	|      pea 19e09 <graphics.c.1c13408a+0x158>
   147dc:	|      jsr 13cb4 <joinStrings>
   147e2:	|      addq.l #8,sp
   147e4:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   147e6:	|      move.l (sp),-(sp)
   147e8:	|      move.l 8(sp),-(sp)
   147ec:	|      jsr 171b0 <KPrintF>
   147f2:	|      addq.l #8,sp

		return FALSE;
   147f4:	|      clr.w d0
   147f6:	|  /-- bra.s 14808 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   147f8:	\--|-> movea.l 20(sp),a0
   147fc:	   |   move.l 4(a0),d0
   14800:	   |   movea.l 12(sp),a0
   14804:	   |   move.l d0,(a0)
	return TRUE;
   14806:	   |   moveq #1,d0
}
   14808:	   \-> addq.l #8,sp
   1480a:	       rts

0001480c <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   1480c:	move.l 8(sp),-(sp)
   14810:	jsr 6d2c <getNumberedString>
   14816:	addq.l #4,sp
   14818:	move.l d0,-(sp)
   1481a:	move.l 8(sp),-(sp)
   1481e:	jsr 149aa <makeTextVar>
   14824:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14826:	movea.l 4(sp),a0
   1482a:	move.l 4(a0),d0
   1482e:	sne d0
   14830:	neg.b d0
   14832:	move.b d0,d0
   14834:	andi.w #255,d0
}
   14838:	rts

0001483a <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   1483a:	          subq.l #8,sp
    int size = stackSize(stacky);
   1483c:	          move.l 16(sp),-(sp)
   14840:	          jsr 150e8 <stackSize>
   14846:	          addq.l #4,sp
   14848:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   1484c:	          move.l 4(sp),-(sp)
   14850:	          move.l 16(sp),-(sp)
   14854:	          jsr 148a4 <makeFastArraySize>
   1485a:	          addq.l #8,sp
   1485c:	          tst.w d0
   1485e:	      /-- bne.s 14864 <makeFastArrayFromStack+0x2a>
   14860:	      |   clr.w d0
   14862:	/-----|-- bra.s 148a0 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14864:	|     \-> movea.l 16(sp),a0
   14868:	|         move.l (a0),(sp)
    size = 0;
   1486a:	|         clr.l 4(sp)
    while (allV) {
   1486e:	|     /-- bra.s 1489a <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14870:	|  /--|-> movea.l 12(sp),a0
   14874:	|  |  |   movea.l 4(a0),a0
   14878:	|  |  |   move.l (a0),d1
   1487a:	|  |  |   move.l 4(sp),d0
   1487e:	|  |  |   lsl.l #3,d0
   14880:	|  |  |   add.l d0,d1
   14882:	|  |  |   move.l (sp),d0
   14884:	|  |  |   move.l d1,-(sp)
   14886:	|  |  |   move.l d0,-(sp)
   14888:	|  |  |   jsr 14b26 <copyMain>
   1488e:	|  |  |   addq.l #8,sp
        size++;
   14890:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14894:	|  |  |   movea.l (sp),a0
   14896:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   1489a:	|  |  \-> tst.l (sp)
   1489c:	|  \----- bne.s 14870 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   1489e:	|         moveq #1,d0
}
   148a0:	\-------> addq.l #8,sp
   148a2:	          rts

000148a4 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   148a4:	          lea -28(sp),sp
   148a8:	          move.l a6,-(sp)
    if (size < 0) {
   148aa:	          tst.l 40(sp)
   148ae:	      /-- bge.s 148c4 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   148b0:	      |   pea 19e4e <graphics.c.1c13408a+0x19d>
   148b6:	      |   jsr 171b0 <KPrintF>
   148bc:	      |   addq.l #4,sp
		return FALSE;
   148be:	      |   clr.w d0
   148c0:	/-----|-- bra.w 149a2 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   148c4:	|     \-> move.l 36(sp),-(sp)
   148c8:	|         jsr 149d6 <unlinkVar>
   148ce:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   148d0:	|         movea.l 36(sp),a0
   148d4:	|         moveq #10,d0
   148d6:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   148d8:	|         moveq #12,d0
   148da:	|         move.l d0,24(sp)
   148de:	|         clr.l 20(sp)
   148e2:	|         move.l 1c896 <SysBase>,d0
   148e8:	|         movea.l d0,a6
   148ea:	|         move.l 24(sp),d0
   148ee:	|         move.l 20(sp),d1
   148f2:	|         jsr -684(a6)
   148f6:	|         move.l d0,16(sp)
   148fa:	|         move.l 16(sp),d0
   148fe:	|         movea.l 36(sp),a0
   14902:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14906:	|         movea.l 36(sp),a0
   1490a:	|         move.l 4(a0),d0
   1490e:	|     /-- bne.s 14916 <makeFastArraySize+0x72>
   14910:	|     |   clr.w d0
   14912:	+-----|-- bra.w 149a2 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14916:	|     \-> move.l 40(sp),d0
   1491a:	|         lsl.l #3,d0
   1491c:	|         move.l d0,12(sp)
   14920:	|         clr.l 8(sp)
   14924:	|         move.l 1c896 <SysBase>,d0
   1492a:	|         movea.l d0,a6
   1492c:	|         move.l 12(sp),d0
   14930:	|         move.l 8(sp),d1
   14934:	|         jsr -684(a6)
   14938:	|         move.l d0,4(sp)
   1493c:	|         move.l 4(sp),d0
   14940:	|         movea.l 36(sp),a0
   14944:	|         movea.l 4(a0),a0
   14948:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   1494a:	|         movea.l 36(sp),a0
   1494e:	|         movea.l 4(a0),a0
   14952:	|         move.l (a0),d0
   14954:	|     /-- bne.s 1495a <makeFastArraySize+0xb6>
   14956:	|     |   clr.w d0
   14958:	+-----|-- bra.s 149a2 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   1495a:	|     \-> clr.l 28(sp)
   1495e:	|     /-- bra.s 1497a <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14960:	|  /--|-> movea.l 36(sp),a0
   14964:	|  |  |   movea.l 4(a0),a0
   14968:	|  |  |   move.l (a0),d1
   1496a:	|  |  |   move.l 28(sp),d0
   1496e:	|  |  |   lsl.l #3,d0
   14970:	|  |  |   movea.l d1,a0
   14972:	|  |  |   adda.l d0,a0
   14974:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14976:	|  |  |   addq.l #1,28(sp)
   1497a:	|  |  \-> move.l 28(sp),d0
   1497e:	|  |      cmp.l 40(sp),d0
   14982:	|  \----- blt.s 14960 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14984:	|         movea.l 36(sp),a0
   14988:	|         movea.l 4(a0),a0
   1498c:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14992:	|         movea.l 36(sp),a0
   14996:	|         movea.l 4(a0),a0
   1499a:	|         moveq #1,d0
   1499c:	|         move.l d0,8(a0)
    return TRUE;
   149a0:	|         moveq #1,d0
}
   149a2:	\-------> movea.l (sp)+,a6
   149a4:	          lea 28(sp),sp
   149a8:	          rts

000149aa <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   149aa:	move.l 4(sp),-(sp)
   149ae:	jsr 149d6 <unlinkVar>
   149b4:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   149b6:	movea.l 4(sp),a0
   149ba:	moveq #3,d0
   149bc:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   149be:	move.l 8(sp),-(sp)
   149c2:	jsr b8 <copyString>
   149c8:	addq.l #4,sp
   149ca:	movea.l 4(sp),a0
   149ce:	move.l d0,4(a0)
}
   149d2:	nop
   149d4:	rts

000149d6 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   149d6:	                      lea -16(sp),sp
   149da:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   149dc:	                      movea.l 24(sp),a0
   149e0:	                      move.l (a0),d0
   149e2:	                      moveq #10,d1
   149e4:	                      cmp.l d0,d1
   149e6:	            /-------- beq.w 14a9e <unlinkVar+0xc8>
   149ea:	            |         moveq #10,d1
   149ec:	            |         cmp.l d0,d1
   149ee:	/-----------|-------- bcs.w 14b12 <unlinkVar+0x13c>
   149f2:	|           |         moveq #8,d1
   149f4:	|           |         cmp.l d0,d1
   149f6:	|  /--------|-------- beq.w 14afe <unlinkVar+0x128>
   149fa:	|  |        |         moveq #8,d1
   149fc:	|  |        |         cmp.l d0,d1
   149fe:	+--|--------|-------- bcs.w 14b12 <unlinkVar+0x13c>
   14a02:	|  |        |         moveq #3,d1
   14a04:	|  |        |         cmp.l d0,d1
   14a06:	|  |        |     /-- beq.s 14a12 <unlinkVar+0x3c>
   14a08:	|  |        |     |   moveq #6,d1
   14a0a:	|  |        |     |   cmp.l d0,d1
   14a0c:	|  |        |  /--|-- beq.s 14a38 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14a0e:	+--|--------|--|--|-- bra.w 14b12 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14a12:	|  |        |  |  \-> movea.l 24(sp),a0
   14a16:	|  |        |  |      move.l 4(a0),4(sp)
   14a1c:	|  |        |  |      move.l 1c896 <SysBase>,d0
   14a22:	|  |        |  |      movea.l d0,a6
   14a24:	|  |        |  |      movea.l 4(sp),a1
   14a28:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14a2c:	|  |        |  |      movea.l 24(sp),a0
   14a30:	|  |        |  |      clr.l 4(a0)
		break;
   14a34:	|  |  /-----|--|----- bra.w 14b1c <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14a38:	|  |  |     |  \----> movea.l 24(sp),a0
   14a3c:	|  |  |     |         movea.l 4(a0),a0
   14a40:	|  |  |     |         move.l 8(a0),d0
   14a44:	|  |  |     |         subq.l #1,d0
   14a46:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14a4a:	|  |  |     |         movea.l 24(sp),a0
   14a4e:	|  |  |     |         movea.l 4(a0),a0
   14a52:	|  |  |     |         move.l 8(a0),d0
   14a56:	|  |  |  /--|-------- bgt.w 14b16 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14a5a:	|  |  |  |  |     /-- bra.s 14a6e <unlinkVar+0x98>
   14a5c:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14a60:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14a64:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14a66:	|  |  |  |  |  |  |   jsr 1510c <trimStack>
   14a6c:	|  |  |  |  |  |  |   addq.l #4,sp
   14a6e:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14a72:	|  |  |  |  |  |      movea.l 4(a0),a0
   14a76:	|  |  |  |  |  |      move.l (a0),d0
   14a78:	|  |  |  |  |  \----- bne.s 14a5c <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14a7a:	|  |  |  |  |         movea.l 24(sp),a0
   14a7e:	|  |  |  |  |         move.l 4(a0),8(sp)
   14a84:	|  |  |  |  |         move.l 1c896 <SysBase>,d0
   14a8a:	|  |  |  |  |         movea.l d0,a6
   14a8c:	|  |  |  |  |         movea.l 8(sp),a1
   14a90:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14a94:	|  |  |  |  |         movea.l 24(sp),a0
   14a98:	|  |  |  |  |         clr.l 4(a0)
		break;
   14a9c:	|  |  |  +--|-------- bra.s 14b16 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14a9e:	|  |  |  |  \-------> movea.l 24(sp),a0
   14aa2:	|  |  |  |            movea.l 4(a0),a0
   14aa6:	|  |  |  |            move.l 8(a0),d0
   14aaa:	|  |  |  |            subq.l #1,d0
   14aac:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14ab0:	|  |  |  |            movea.l 24(sp),a0
   14ab4:	|  |  |  |            movea.l 4(a0),a0
   14ab8:	|  |  |  |            move.l 8(a0),d0
   14abc:	|  |  |  |        /-- bgt.s 14b1a <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14abe:	|  |  |  |        |   movea.l 24(sp),a0
   14ac2:	|  |  |  |        |   movea.l 4(a0),a0
   14ac6:	|  |  |  |        |   move.l (a0),16(sp)
   14aca:	|  |  |  |        |   move.l 1c896 <SysBase>,d0
   14ad0:	|  |  |  |        |   movea.l d0,a6
   14ad2:	|  |  |  |        |   movea.l 16(sp),a1
   14ad6:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14ada:	|  |  |  |        |   movea.l 24(sp),a0
   14ade:	|  |  |  |        |   move.l 4(a0),12(sp)
   14ae4:	|  |  |  |        |   move.l 1c896 <SysBase>,d0
   14aea:	|  |  |  |        |   movea.l d0,a6
   14aec:	|  |  |  |        |   movea.l 12(sp),a1
   14af0:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14af4:	|  |  |  |        |   movea.l 24(sp),a0
   14af8:	|  |  |  |        |   clr.l 4(a0)
		break;
   14afc:	|  |  |  |        +-- bra.s 14b1a <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14afe:	|  \--|--|--------|-> movea.l 24(sp),a0
   14b02:	|     |  |        |   move.l 4(a0),d0
   14b06:	|     |  |        |   move.l d0,-(sp)
   14b08:	|     |  |        |   jsr 995e <deleteAnim>
   14b0e:	|     |  |        |   addq.l #4,sp
		break;
   14b10:	|     +--|--------|-- bra.s 14b1c <unlinkVar+0x146>
		break;
   14b12:	\-----|--|--------|-> nop
   14b14:	      +--|--------|-- bra.s 14b1c <unlinkVar+0x146>
		break;
   14b16:	      |  \--------|-> nop
   14b18:	      +-----------|-- bra.s 14b1c <unlinkVar+0x146>
		break;
   14b1a:	      |           \-> nop
	}
}
   14b1c:	      \-------------> nop
   14b1e:	                      movea.l (sp)+,a6
   14b20:	                      lea 16(sp),sp
   14b24:	                      rts

00014b26 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14b26:	       movea.l 4(sp),a0
   14b2a:	       move.l (a0),d0
   14b2c:	       movea.l 8(sp),a0
   14b30:	       move.l d0,(a0)
	switch (to->varType) {
   14b32:	       movea.l 8(sp),a0
   14b36:	       move.l (a0),d0
   14b38:	       moveq #10,d1
   14b3a:	       cmp.l d0,d1
   14b3c:	/----- bcs.w 14c2e <copyMain+0x108>
   14b40:	|      add.l d0,d0
   14b42:	|      movea.l d0,a0
   14b44:	|      adda.l #84816,a0
   14b4a:	|      move.w (a0),d0
   14b4c:	|      jmp (14b50 <copyMain+0x2a>,pc,d0.w)
   14b50:	|      .short 0x00da
   14b52:	|      ori.b #22,(a6)
   14b56:	|      ori.w #22,(a4)
   14b5a:	|      ori.b #-126,(a6)
   14b5e:	|      ori.b #-68,(a6)
   14b62:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14b6a:	|      move.l 4(a0),d0
   14b6e:	|      movea.l 8(sp),a0
   14b72:	|      move.l d0,4(a0)
		return TRUE;
   14b76:	|      moveq #1,d0
   14b78:	|  /-- bra.w 14c40 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14b7c:	|  |   movea.l 4(sp),a0
   14b80:	|  |   move.l 4(a0),d0
   14b84:	|  |   movea.l 8(sp),a0
   14b88:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14b8c:	|  |   movea.l 8(sp),a0
   14b90:	|  |   movea.l 4(a0),a0
   14b94:	|  |   move.l 8(a0),d0
   14b98:	|  |   addq.l #1,d0
   14b9a:	|  |   move.l d0,8(a0)
		return TRUE;
   14b9e:	|  |   moveq #1,d0
   14ba0:	|  +-- bra.w 14c40 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14ba4:	|  |   movea.l 4(sp),a0
   14ba8:	|  |   move.l 4(a0),d0
   14bac:	|  |   move.l d0,-(sp)
   14bae:	|  |   jsr b8 <copyString>
   14bb4:	|  |   addq.l #4,sp
   14bb6:	|  |   movea.l 8(sp),a0
   14bba:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14bbe:	|  |   movea.l 8(sp),a0
   14bc2:	|  |   move.l 4(a0),d0
   14bc6:	|  |   sne d0
   14bc8:	|  |   neg.b d0
   14bca:	|  |   move.b d0,d0
   14bcc:	|  |   andi.w #255,d0
   14bd0:	|  +-- bra.s 14c40 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14bd2:	|  |   movea.l 4(sp),a0
   14bd6:	|  |   move.l 4(a0),d0
   14bda:	|  |   movea.l 8(sp),a0
   14bde:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14be2:	|  |   movea.l 8(sp),a0
   14be6:	|  |   movea.l 4(a0),a0
   14bea:	|  |   move.l 8(a0),d0
   14bee:	|  |   addq.l #1,d0
   14bf0:	|  |   move.l d0,8(a0)
		return TRUE;
   14bf4:	|  |   moveq #1,d0
   14bf6:	|  +-- bra.s 14c40 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14bf8:	|  |   movea.l 4(sp),a0
   14bfc:	|  |   move.l 4(a0),d0
   14c00:	|  |   movea.l 8(sp),a0
   14c04:	|  |   move.l d0,4(a0)
		return TRUE;
   14c08:	|  |   moveq #1,d0
   14c0a:	|  +-- bra.s 14c40 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14c0c:	|  |   movea.l 4(sp),a0
   14c10:	|  |   move.l 4(a0),d0
   14c14:	|  |   move.l d0,-(sp)
   14c16:	|  |   jsr 9592 <copyAnim>
   14c1c:	|  |   addq.l #4,sp
   14c1e:	|  |   movea.l 8(sp),a0
   14c22:	|  |   move.l d0,4(a0)
		return TRUE;
   14c26:	|  |   moveq #1,d0
   14c28:	|  +-- bra.s 14c40 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14c2a:	|  |   moveq #1,d0
   14c2c:	|  +-- bra.s 14c40 <copyMain+0x11a>

		default:
		break;
   14c2e:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14c30:	   |   pea 19e9f <graphics.c.1c13408a+0x1ee>
   14c36:	   |   jsr 171b0 <KPrintF>
   14c3c:	   |   addq.l #4,sp
	return FALSE;
   14c3e:	   |   clr.w d0
}
   14c40:	   \-> rts

00014c42 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14c42:	move.l 8(sp),-(sp)
   14c46:	jsr 149d6 <unlinkVar>
   14c4c:	addq.l #4,sp
	return copyMain(from, to);
   14c4e:	move.l 8(sp),-(sp)
   14c52:	move.l 8(sp),-(sp)
   14c56:	jsr 14b26 <copyMain>
   14c5c:	addq.l #8,sp
}
   14c5e:	rts

00014c60 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14c60:	       movea.l 4(sp),a0
   14c64:	       move.l (a0),d0
   14c66:	       moveq #8,d1
   14c68:	       cmp.l d0,d1
   14c6a:	   /-- bne.s 14c80 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14c6c:	   |   movea.l 4(sp),a0
   14c70:	   |   move.l 4(a0),d0
   14c74:	   |   move.l d0,-(sp)
   14c76:	   |   jsr 9592 <copyAnim>
   14c7c:	   |   addq.l #4,sp
   14c7e:	/--|-- bra.s 14cc6 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14c80:	|  \-> movea.l 4(sp),a0
   14c84:	|      move.l (a0),d0
   14c86:	|      moveq #1,d1
   14c88:	|      cmp.l d0,d1
   14c8a:	|  /-- bne.s 14c9e <getAnimationFromVar+0x3e>
   14c8c:	|  |   movea.l 4(sp),a0
   14c90:	|  |   move.l 4(a0),d0
   14c94:	|  +-- bne.s 14c9e <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14c96:	|  |   jsr ad62 <makeNullAnim>
   14c9c:	+--|-- bra.s 14cc6 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14c9e:	|  \-> movea.l 4(sp),a0
   14ca2:	|      move.l (a0),d0
   14ca4:	|      add.l d0,d0
   14ca6:	|      movea.l d0,a1
   14ca8:	|      adda.l d0,a1
   14caa:	|      lea 1c772 <typeName>,a0
   14cb0:	|      move.l (0,a1,a0.l),d0
   14cb4:	|      move.l d0,-(sp)
   14cb6:	|      pea 19d8b <graphics.c.1c13408a+0xda>
   14cbc:	|      jsr 171b0 <KPrintF>
   14cc2:	|      addq.l #8,sp
	return NULL;
   14cc4:	|      moveq #0,d0
}
   14cc6:	\----> rts

00014cc8 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14cc8:	       movea.l 4(sp),a0
   14ccc:	       move.l (a0),d0
   14cce:	       moveq #10,d1
   14cd0:	       cmp.l d0,d1
   14cd2:	/----- bcs.w 14d58 <getBoolean+0x90>
   14cd6:	|      add.l d0,d0
   14cd8:	|      movea.l d0,a0
   14cda:	|      adda.l #85222,a0
   14ce0:	|      move.w (a0),d0
   14ce2:	|      jmp (14ce6 <getBoolean+0x1e>,pc,d0.w)
   14ce6:	|      ori.b #26,(a6)
   14cea:	|      ori.w #68,(114,a2,d0.w)
   14cf0:	|      ori.w #46,(114,a2,d0.w)
   14cf6:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14cfc:	|      clr.w d0
   14cfe:	|  /-- bra.s 14d5c <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14d00:	|  |   movea.l 4(sp),a0
   14d04:	|  |   move.l 4(a0),d0
   14d08:	|  |   sne d0
   14d0a:	|  |   neg.b d0
   14d0c:	|  |   move.b d0,d0
   14d0e:	|  |   andi.w #255,d0
   14d12:	|  +-- bra.s 14d5c <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14d14:	|  |   movea.l 4(sp),a0
   14d18:	|  |   movea.l 4(a0),a0
   14d1c:	|  |   move.l (a0),d0
   14d1e:	|  |   sne d0
   14d20:	|  |   neg.b d0
   14d22:	|  |   move.b d0,d0
   14d24:	|  |   andi.w #255,d0
   14d28:	|  +-- bra.s 14d5c <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14d2a:	|  |   movea.l 4(sp),a0
   14d2e:	|  |   movea.l 4(a0),a0
   14d32:	|  |   move.b (a0),d0
   14d34:	|  |   sne d0
   14d36:	|  |   neg.b d0
   14d38:	|  |   move.b d0,d0
   14d3a:	|  |   andi.w #255,d0
   14d3e:	|  +-- bra.s 14d5c <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14d40:	|  |   movea.l 4(sp),a0
   14d44:	|  |   movea.l 4(a0),a0
   14d48:	|  |   move.l 4(a0),d0
   14d4c:	|  |   sne d0
   14d4e:	|  |   neg.b d0
   14d50:	|  |   move.b d0,d0
   14d52:	|  |   andi.w #255,d0
   14d56:	|  +-- bra.s 14d5c <getBoolean+0x94>

		default:
		break;
   14d58:	\--|-> nop
	}
	return TRUE;
   14d5a:	   |   moveq #1,d0
}
   14d5c:	   \-> rts

00014d5e <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14d5e:	      /----------> lea -76(sp),sp
   14d62:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14d64:	      |            movea.l 84(sp),a0
   14d68:	      |            move.l (a0),d0
   14d6a:	      |            moveq #10,d1
   14d6c:	      |            cmp.l d0,d1
   14d6e:	/-----|----------- bcs.w 1500c <getTextFromAnyVar+0x2ae>
   14d72:	|     |            add.l d0,d0
   14d74:	|     |            movea.l d0,a0
   14d76:	|     |            adda.l #85378,a0
   14d7c:	|     |            move.w (a0),d0
   14d7e:	|     |            jmp (14d82 <getTextFromAnyVar+0x24>,pc,d0.w)
   14d82:	|     |            .short 0x028a
   14d84:	|     |            bset d0,(a0)+
   14d86:	|     |            .short 0x028a
   14d88:	|     |            ori.b #-118,(a6)
   14d8c:	|     |            andi.b #8,ccr
   14d90:	|     |            andi.w #650,-(a0)
   14d94:	|     |            .short 0x028a
   14d96:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14d9c:	|     |            move.l 4(a0),d0
   14da0:	|     |            move.l d0,-(sp)
   14da2:	|     |            jsr b8 <copyString>
   14da8:	|     |            addq.l #4,sp
   14daa:	|  /--|----------- bra.w 1502e <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14dae:	|  |  |            pea 19eb2 <graphics.c.1c13408a+0x201>
   14db4:	|  |  |            jsr b8 <copyString>
   14dba:	|  |  |            addq.l #4,sp
   14dbc:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14dc0:	|  |  |            clr.l 72(sp)
   14dc4:	|  |  |     /----- bra.w 14e6e <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14dc8:	|  |  |  /--|----> pea 19eb8 <graphics.c.1c13408a+0x207>
   14dce:	|  |  |  |  |      move.l 80(sp),-(sp)
   14dd2:	|  |  |  |  |      jsr 13cb4 <joinStrings>
   14dd8:	|  |  |  |  |      addq.l #8,sp
   14dda:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14dde:	|  |  |  |  |  /-- bne.s 14de6 <getTextFromAnyVar+0x88>
   14de0:	|  |  |  |  |  |   moveq #0,d0
   14de2:	|  +--|--|--|--|-- bra.w 1502e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14de6:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14dec:	|  |  |  |  |      move.l 1c896 <SysBase>,d0
   14df2:	|  |  |  |  |      movea.l d0,a6
   14df4:	|  |  |  |  |      movea.l 56(sp),a1
   14df8:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14dfc:	|  |  |  |  |      movea.l 84(sp),a0
   14e00:	|  |  |  |  |      movea.l 4(a0),a0
   14e04:	|  |  |  |  |      move.l (a0),d1
   14e06:	|  |  |  |  |      move.l 72(sp),d0
   14e0a:	|  |  |  |  |      lsl.l #3,d0
   14e0c:	|  |  |  |  |      add.l d1,d0
   14e0e:	|  |  |  |  |      move.l d0,-(sp)
   14e10:	|  |  +--|--|----- jsr 14d5e <getTextFromAnyVar>(pc)
   14e14:	|  |  |  |  |      addq.l #4,sp
   14e16:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14e1a:	|  |  |  |  |      move.l 52(sp),-(sp)
   14e1e:	|  |  |  |  |      move.l 64(sp),-(sp)
   14e22:	|  |  |  |  |      jsr 13cb4 <joinStrings>
   14e28:	|  |  |  |  |      addq.l #8,sp
   14e2a:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14e2e:	|  |  |  |  |  /-- bne.s 14e36 <getTextFromAnyVar+0xd8>
   14e30:	|  |  |  |  |  |   moveq #0,d0
   14e32:	|  +--|--|--|--|-- bra.w 1502e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14e36:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14e3c:	|  |  |  |  |      move.l 1c896 <SysBase>,d0
   14e42:	|  |  |  |  |      movea.l d0,a6
   14e44:	|  |  |  |  |      movea.l 48(sp),a1
   14e48:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14e4c:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14e50:	|  |  |  |  |      move.l 60(sp),44(sp)
   14e56:	|  |  |  |  |      move.l 1c896 <SysBase>,d0
   14e5c:	|  |  |  |  |      movea.l d0,a6
   14e5e:	|  |  |  |  |      movea.l 44(sp),a1
   14e62:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14e66:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14e6a:	|  |  |  |  |      addq.l #1,72(sp)
   14e6e:	|  |  |  |  \----> movea.l 84(sp),a0
   14e72:	|  |  |  |         movea.l 4(a0),a0
   14e76:	|  |  |  |         move.l 4(a0),d0
   14e7a:	|  |  |  |         cmp.l 72(sp),d0
   14e7e:	|  |  |  \-------- bgt.w 14dc8 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14e82:	|  |  |            move.l 76(sp),d0
   14e86:	|  +--|----------- bra.w 1502e <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14e8a:	|  |  |            pea 19eba <graphics.c.1c13408a+0x209>
   14e90:	|  |  |            jsr b8 <copyString>
   14e96:	|  |  |            addq.l #4,sp
   14e98:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14e9c:	|  |  |            movea.l 84(sp),a0
   14ea0:	|  |  |            movea.l 4(a0),a0
   14ea4:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14ea8:	|  |  |     /----- bra.w 14f4a <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14eac:	|  |  |  /--|----> pea 19eb8 <graphics.c.1c13408a+0x207>
   14eb2:	|  |  |  |  |      move.l 72(sp),-(sp)
   14eb6:	|  |  |  |  |      jsr 13cb4 <joinStrings>
   14ebc:	|  |  |  |  |      addq.l #8,sp
   14ebe:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14ec2:	|  |  |  |  |  /-- bne.s 14eca <getTextFromAnyVar+0x16c>
   14ec4:	|  |  |  |  |  |   moveq #0,d0
   14ec6:	|  +--|--|--|--|-- bra.w 1502e <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14eca:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   14ed0:	|  |  |  |  |      move.l 1c896 <SysBase>,d0
   14ed6:	|  |  |  |  |      movea.l d0,a6
   14ed8:	|  |  |  |  |      movea.l 32(sp),a1
   14edc:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14ee0:	|  |  |  |  |      move.l 64(sp),d0
   14ee4:	|  |  |  |  |      move.l d0,-(sp)
   14ee6:	|  |  \--|--|----- jsr 14d5e <getTextFromAnyVar>(pc)
   14eea:	|  |     |  |      addq.l #4,sp
   14eec:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14ef0:	|  |     |  |      move.l 28(sp),-(sp)
   14ef4:	|  |     |  |      move.l 40(sp),-(sp)
   14ef8:	|  |     |  |      jsr 13cb4 <joinStrings>
   14efe:	|  |     |  |      addq.l #8,sp
   14f00:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14f04:	|  |     |  |  /-- bne.s 14f0c <getTextFromAnyVar+0x1ae>
   14f06:	|  |     |  |  |   moveq #0,d0
   14f08:	|  +-----|--|--|-- bra.w 1502e <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14f0c:	|  |     |  |  \-> move.l 28(sp),24(sp)
   14f12:	|  |     |  |      move.l 1c896 <SysBase>,d0
   14f18:	|  |     |  |      movea.l d0,a6
   14f1a:	|  |     |  |      movea.l 24(sp),a1
   14f1e:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14f22:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14f26:	|  |     |  |      move.l 36(sp),20(sp)
   14f2c:	|  |     |  |      move.l 1c896 <SysBase>,d0
   14f32:	|  |     |  |      movea.l d0,a6
   14f34:	|  |     |  |      movea.l 20(sp),a1
   14f38:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14f3c:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14f40:	|  |     |  |      movea.l 64(sp),a0
   14f44:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14f4a:	|  |     |  \----> tst.l 64(sp)
   14f4e:	|  |     \-------- bne.w 14eac <getTextFromAnyVar+0x14e>
			}
			return builder;
   14f52:	|  |               move.l 68(sp),d0
   14f56:	|  +-------------- bra.w 1502e <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14f5a:	|  |               moveq #10,d0
   14f5c:	|  |               move.l d0,16(sp)
   14f60:	|  |               clr.l 12(sp)
   14f64:	|  |               move.l 1c896 <SysBase>,d0
   14f6a:	|  |               movea.l d0,a6
   14f6c:	|  |               move.l 16(sp),d0
   14f70:	|  |               move.l 12(sp),d1
   14f74:	|  |               jsr -684(a6)
   14f78:	|  |               move.l d0,8(sp)
   14f7c:	|  |               move.l 8(sp),d0
   14f80:	|  |               move.l d0,4(sp)
			if (! buff) {
   14f84:	|  |           /-- bne.s 14f9a <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14f86:	|  |           |   pea 19ec1 <graphics.c.1c13408a+0x210>
   14f8c:	|  |           |   jsr 171b0 <KPrintF>
   14f92:	|  |           |   addq.l #4,sp
				return NULL;
   14f94:	|  |           |   moveq #0,d0
   14f96:	|  +-----------|-- bra.w 1502e <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14f9a:	|  |           \-> movea.l 84(sp),a0
   14f9e:	|  |               move.l 4(a0),d0
   14fa2:	|  |               move.l d0,-(sp)
   14fa4:	|  |               pea 19eeb <graphics.c.1c13408a+0x23a>
   14faa:	|  |               move.l 12(sp),-(sp)
   14fae:	|  |               jsr 13f92 <sprintf>
   14fb4:	|  |               lea 12(sp),sp
			return buff;
   14fb8:	|  |               move.l 4(sp),d0
   14fbc:	|  +-------------- bra.s 1502e <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14fbe:	|  |               movea.l 84(sp),a0
   14fc2:	|  |               move.l 4(a0),d0
   14fc6:	|  |               move.l d0,-(sp)
   14fc8:	|  |               jsr 41b2 <resourceNameFromNum>
   14fce:	|  |               addq.l #4,sp
   14fd0:	|  |               move.l d0,-(sp)
   14fd2:	|  |               pea 18900 <PutChar+0xc7c>
   14fd8:	|  |               jsr 13cb4 <joinStrings>
   14fde:	|  |               addq.l #8,sp
   14fe0:	|  +-------------- bra.s 1502e <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14fe2:	|  |               movea.l 84(sp),a0
   14fe6:	|  |               move.l 4(a0),d0
   14fea:	|  |               move.l d0,-(sp)
   14fec:	|  |               jsr d4f2 <findObjectType>
   14ff2:	|  |               addq.l #4,sp
   14ff4:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14ff8:	+--|-------------- beq.s 1500c <getTextFromAnyVar+0x2ae>
   14ffa:	|  |               movea.l 40(sp),a0
   14ffe:	|  |               move.l (a0),d0
   15000:	|  |               move.l d0,-(sp)
   15002:	|  |               jsr b8 <copyString>
   15008:	|  |               addq.l #4,sp
   1500a:	|  +-------------- bra.s 1502e <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   1500c:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   1500e:	   |               movea.l 84(sp),a0
   15012:	   |               move.l (a0),d0
   15014:	   |               add.l d0,d0
   15016:	   |               movea.l d0,a1
   15018:	   |               adda.l d0,a1
   1501a:	   |               lea 1c772 <typeName>,a0
   15020:	   |               move.l (0,a1,a0.l),d0
   15024:	   |               move.l d0,-(sp)
   15026:	   |               jsr b8 <copyString>
   1502c:	   |               addq.l #4,sp
}
   1502e:	   \-------------> movea.l (sp)+,a6
   15030:	                   lea 76(sp),sp
   15034:	                   rts

00015036 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   15036:	move.l 4(sp),-(sp)
   1503a:	jsr 149d6 <unlinkVar>
   15040:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   15042:	movea.l 4(sp),a0
   15046:	moveq #8,d0
   15048:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   1504a:	movea.l 4(sp),a0
   1504e:	move.l 8(sp),4(a0)
}
   15054:	nop
   15056:	rts

00015058 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   15058:	move.l 4(sp),-(sp)
   1505c:	jsr 149d6 <unlinkVar>
   15062:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   15064:	movea.l 4(sp),a0
   15068:	moveq #9,d0
   1506a:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   1506c:	movea.l 4(sp),a0
   15070:	move.l 8(sp),4(a0)
}
   15076:	nop
   15078:	rts

0001507a <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   1507a:	move.l 4(sp),-(sp)
   1507e:	jsr 149d6 <unlinkVar>
   15084:	addq.l #4,sp
	thisVar->varType = vT;
   15086:	movea.l 4(sp),a0
   1508a:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   1508e:	movea.l 4(sp),a0
   15092:	move.l 12(sp),4(a0)
}
   15098:	nop
   1509a:	rts

0001509c <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   1509c:	      /-- bra.s 150ae <stackGetByIndex+0x12>
        vS = vS->next;
   1509e:	/-----|-> movea.l 4(sp),a0
   150a2:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   150a8:	|     +-- bne.s 150ae <stackGetByIndex+0x12>
            return NULL;
   150aa:	|     |   moveq #0,d0
   150ac:	|  /--|-- bra.s 150c2 <stackGetByIndex+0x26>
    while (theIndex--) {
   150ae:	|  |  \-> move.l 8(sp),d0
   150b2:	|  |      move.l d0,d1
   150b4:	|  |      subq.l #1,d1
   150b6:	|  |      move.l d1,8(sp)
   150ba:	|  |      tst.l d0
   150bc:	\--|----- bne.s 1509e <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   150be:	   |      move.l 4(sp),d0
}
   150c2:	   \----> rts

000150c4 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   150c4:	          tst.l 4(sp)
   150c8:	      /-- bne.s 150d8 <stackFindLast+0x14>
		return NULL;
   150ca:	      |   moveq #0,d0
   150cc:	/-----|-- bra.s 150e6 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   150ce:	|  /--|-> movea.l 4(sp),a0
   150d2:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   150d8:	|  |  \-> movea.l 4(sp),a0
   150dc:	|  |      move.l 8(a0),d0
   150e0:	|  \----- bne.s 150ce <stackFindLast+0xa>

	return hunt;
   150e2:	|         move.l 4(sp),d0
}
   150e6:	\-------> rts

000150e8 <stackSize>:

int stackSize (const struct stackHandler * me) {
   150e8:	       subq.l #8,sp
	int r = 0;
   150ea:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   150ee:	       movea.l 12(sp),a0
   150f2:	       move.l (a0),(sp)
	while (a) {
   150f4:	   /-- bra.s 15100 <stackSize+0x18>
		r ++;
   150f6:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   150fa:	|  |   movea.l (sp),a0
   150fc:	|  |   move.l 8(a0),(sp)
	while (a) {
   15100:	|  \-> tst.l (sp)
   15102:	\----- bne.s 150f6 <stackSize+0xe>
	}
	return r;
   15104:	       move.l 4(sp),d0
}
   15108:	       addq.l #8,sp
   1510a:	       rts

0001510c <trimStack>:

void trimStack (struct variableStack ** stack) {
   1510c:	subq.l #8,sp
   1510e:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   15110:	movea.l 16(sp),a0
   15114:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   15118:	movea.l 16(sp),a0
   1511c:	movea.l (a0),a0
   1511e:	move.l 8(a0),d0
   15122:	movea.l 16(sp),a0
   15126:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15128:	move.l 8(sp),d0
   1512c:	move.l d0,-(sp)
   1512e:	jsr 149d6 <unlinkVar>
   15134:	addq.l #4,sp
	FreeVec(killMe);
   15136:	move.l 8(sp),4(sp)
   1513c:	move.l 1c896 <SysBase>,d0
   15142:	movea.l d0,a6
   15144:	movea.l 4(sp),a1
   15148:	jsr -690(a6)
   1514c:	nop
   1514e:	movea.l (sp)+,a6
   15150:	addq.l #8,sp
   15152:	rts

00015154 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15154:	       lea -52(sp),sp
   15158:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   1515a:	       pea 19eee <graphics.c.1c13408a+0x23d>
   15160:	       jsr 171b0 <KPrintF>
   15166:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   15168:	       moveq #68,d0
   1516a:	       move.l d0,52(sp)
   1516e:	       clr.l 48(sp)
   15172:	       move.l 1c896 <SysBase>,d0
   15178:	       movea.l d0,a6
   1517a:	       move.l 52(sp),d0
   1517e:	       move.l 48(sp),d1
   15182:	       jsr -684(a6)
   15186:	       move.l d0,44(sp)
   1518a:	       move.l 44(sp),d0
   1518e:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   15192:	   /-- bne.s 1519a <freeze+0x46>
   15194:	   |   clr.w d0
   15196:	/--|-- bra.w 15324 <freeze+0x1d0>

	CstFreeze();
   1519a:	|  \-> jsr 1dce <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   151a0:	|      move.l 1c932 <sceneWidth>,d0
   151a6:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   151aa:	|      move.l 1c936 <sceneHeight>,d0
   151b0:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   151b4:	|      move.l 1c932 <sceneWidth>,d0
   151ba:	|      movea.l 40(sp),a0
   151be:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   151c2:	|      move.l 1c936 <sceneHeight>,d0
   151c8:	|      movea.l 40(sp),a0
   151cc:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   151d0:	|      move.l 1c950 <cameraX>,d0
   151d6:	|      movea.l 40(sp),a0
   151da:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   151de:	|      move.l 1c954 <cameraY>,d0
   151e4:	|      movea.l 40(sp),a0
   151e8:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   151ec:	|      move.l 1c234 <cameraZoom>,d0
   151f2:	|      movea.l 40(sp),a0
   151f6:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   151fa:	|      move.w #1,1c93e <backdropExists>

	newFreezer -> allPeople = allPeople;
   15202:	|      move.l 1c8fa <allPeople>,d0
   15208:	|      movea.l 40(sp),a0
   1520c:	|      move.l d0,(a0)
	allPeople = NULL;
   1520e:	|      clr.l 1c8fa <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15214:	|      moveq #42,d0
   15216:	|      move.l d0,28(sp)
   1521a:	|      clr.l 24(sp)
   1521e:	|      move.l 1c896 <SysBase>,d0
   15224:	|      movea.l d0,a6
   15226:	|      move.l 28(sp),d0
   1522a:	|      move.l 24(sp),d1
   1522e:	|      jsr -684(a6)
   15232:	|      move.l d0,20(sp)
   15236:	|      move.l 20(sp),d0
   1523a:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   1523e:	|  /-- bne.s 15246 <freeze+0xf2>
   15240:	|  |   clr.w d0
   15242:	+--|-- bra.w 15324 <freeze+0x1d0>

	newFreezer -> allScreenRegions = allScreenRegions;
   15246:	|  \-> move.l 1c9a6 <allScreenRegions>,d0
   1524c:	|      movea.l 40(sp),a0
   15250:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15254:	|      clr.l 1c9a6 <allScreenRegions>
	overRegion = NULL;
   1525a:	|      clr.l 1c9aa <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   15260:	|      move.l 1c79c <mouseCursorAnim>,d0
   15266:	|      movea.l 40(sp),a0
   1526a:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1526e:	|      move.l 1c7a0 <mouseCursorFrameNum>,d0
   15274:	|      movea.l 40(sp),a0
   15278:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   1527c:	|      jsr ad62 <makeNullAnim>
   15282:	|      move.l d0,1c79c <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   15288:	|      clr.l 1c7a0 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   1528e:	|      move.l 1c8f6 <zBuffer>,d0
   15294:	|      movea.l 40(sp),a0
   15298:	|      move.l d0,60(a0)
	zBuffer = NULL;
   1529c:	|      clr.l 1c8f6 <zBuffer>

	newFreezer -> speech = speech;
   152a2:	|      move.l 1c8f2 <speech>,d0
   152a8:	|      movea.l 40(sp),a0
   152ac:	|      move.l d0,20(a0)
	initSpeech ();
   152b0:	|      jsr 7f58 <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   152b6:	|      moveq #28,d0
   152b8:	|      move.l d0,12(sp)
   152bc:	|      clr.l 8(sp)
   152c0:	|      move.l 1c896 <SysBase>,d0
   152c6:	|      movea.l d0,a6
   152c8:	|      move.l 12(sp),d0
   152cc:	|      move.l 8(sp),d1
   152d0:	|      jsr -684(a6)
   152d4:	|      move.l d0,4(sp)
   152d8:	|      move.l 4(sp),d0
   152dc:	|      movea.l 40(sp),a0
   152e0:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   152e4:	|      movea.l 40(sp),a0
   152e8:	|      move.l 28(a0),d0
   152ec:	|  /-- bne.s 152f2 <freeze+0x19e>
   152ee:	|  |   clr.w d0
   152f0:	+--|-- bra.s 15324 <freeze+0x1d0>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   152f2:	|  \-> movea.l 40(sp),a0
   152f6:	|      move.l 28(a0),d0
   152fa:	|      pea 1c <_start+0x1c>
   152fe:	|      clr.l -(sp)
   15300:	|      move.l d0,-(sp)
   15302:	|      jsr 17134 <memset>
   15308:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1530c:	|      move.l 1c98a <frozenStuff>,d0
   15312:	|      movea.l 40(sp),a0
   15316:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   1531a:	|      move.l 40(sp),1c98a <frozenStuff>

	return TRUE;
   15322:	|      moveq #1,d0
}
   15324:	\----> movea.l (sp)+,a6
   15326:	       lea 52(sp),sp
   1532a:	       rts

0001532c <unfreeze>:

void unfreeze () {
   1532c:	       lea -16(sp),sp
   15330:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   15332:	       move.l 1c98a <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   1533a:	       move.l 1c98a <frozenStuff>,d0
   15340:	/----- beq.w 15578 <unfreeze+0x24c>

	CstUnfreeze();
   15344:	|      jsr 3daa <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   1534a:	|      movea.l 1c98a <frozenStuff>,a0
   15350:	|      move.l 48(a0),d0
   15354:	|      move.l d0,1c932 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   1535a:	|      movea.l 1c98a <frozenStuff>,a0
   15360:	|      move.l 52(a0),d0
   15364:	|      move.l d0,1c936 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   1536a:	|      movea.l 1c98a <frozenStuff>,a0
   15370:	|      move.l 40(a0),d0
   15374:	|      move.l d0,1c950 <cameraX>
	cameraY = frozenStuff -> cameraY;
   1537a:	|      movea.l 1c98a <frozenStuff>,a0
   15380:	|      move.l 44(a0),d0
   15384:	|      move.l d0,1c954 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1538a:	|      move.l 1c852 <input+0xa>,d0
   15390:	|      move.l d0,-(sp)
   15392:	|      jsr 175ec <__floatsisf>
   15398:	|      addq.l #4,sp
   1539a:	|      move.l d0,d1
   1539c:	|      move.l 1c234 <cameraZoom>,d0
   153a2:	|      move.l d0,-(sp)
   153a4:	|      move.l d1,-(sp)
   153a6:	|      jsr 1769e <__mulsf3>
   153ac:	|      addq.l #8,sp
   153ae:	|      move.l d0,-(sp)
   153b0:	|      jsr 17584 <__fixsfsi>
   153b6:	|      addq.l #4,sp
   153b8:	|      move.l d0,1c852 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   153be:	|      move.l 1c856 <input+0xe>,d0
   153c4:	|      move.l d0,-(sp)
   153c6:	|      jsr 175ec <__floatsisf>
   153cc:	|      addq.l #4,sp
   153ce:	|      move.l d0,d1
   153d0:	|      move.l 1c234 <cameraZoom>,d0
   153d6:	|      move.l d0,-(sp)
   153d8:	|      move.l d1,-(sp)
   153da:	|      jsr 1769e <__mulsf3>
   153e0:	|      addq.l #8,sp
   153e2:	|      move.l d0,-(sp)
   153e4:	|      jsr 17584 <__fixsfsi>
   153ea:	|      addq.l #4,sp
   153ec:	|      move.l d0,1c856 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   153f2:	|      movea.l 1c98a <frozenStuff>,a0
   153f8:	|      move.l 56(a0),d0
   153fc:	|      move.l d0,1c234 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15402:	|      move.l 1c852 <input+0xa>,d0
   15408:	|      move.l d0,-(sp)
   1540a:	|      jsr 175ec <__floatsisf>
   15410:	|      addq.l #4,sp
   15412:	|      move.l d0,d1
   15414:	|      move.l 1c234 <cameraZoom>,d0
   1541a:	|      move.l d0,-(sp)
   1541c:	|      move.l d1,-(sp)
   1541e:	|      jsr 17498 <__divsf3>
   15424:	|      addq.l #8,sp
   15426:	|      move.l d0,-(sp)
   15428:	|      jsr 17584 <__fixsfsi>
   1542e:	|      addq.l #4,sp
   15430:	|      move.l d0,1c852 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   15436:	|      move.l 1c856 <input+0xe>,d0
   1543c:	|      move.l d0,-(sp)
   1543e:	|      jsr 175ec <__floatsisf>
   15444:	|      addq.l #4,sp
   15446:	|      move.l d0,d1
   15448:	|      move.l 1c234 <cameraZoom>,d0
   1544e:	|      move.l d0,-(sp)
   15450:	|      move.l d1,-(sp)
   15452:	|      jsr 17498 <__divsf3>
   15458:	|      addq.l #8,sp
   1545a:	|      move.l d0,-(sp)
   1545c:	|      jsr 17584 <__fixsfsi>
   15462:	|      addq.l #4,sp
   15464:	|      move.l d0,1c856 <input+0xe>

	killAllPeople ();
   1546a:	|      jsr aa6a <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15470:	|      movea.l 1c98a <frozenStuff>,a0
   15476:	|      move.l (a0),d0
   15478:	|      move.l d0,1c8fa <allPeople>

	killAllRegions ();
   1547e:	|      jsr 15a00 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15484:	|      movea.l 1c98a <frozenStuff>,a0
   1548a:	|      move.l 4(a0),d0
   1548e:	|      move.l d0,1c9a6 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15494:	|      move.l 1c79c <mouseCursorAnim>,d0
   1549a:	|      move.l d0,-(sp)
   1549c:	|      jsr 995e <deleteAnim>
   154a2:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   154a4:	|      movea.l 1c98a <frozenStuff>,a0
   154aa:	|      move.l 32(a0),d0
   154ae:	|      move.l d0,1c79c <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   154b4:	|      movea.l 1c98a <frozenStuff>,a0
   154ba:	|      move.l 36(a0),d0
   154be:	|      move.l d0,1c7a0 <mouseCursorFrameNum>

	killZBuffer ();
   154c4:	|      jsr 87cc <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   154ca:	|      movea.l 1c98a <frozenStuff>,a0
   154d0:	|      move.l 60(a0),d0
   154d4:	|      move.l d0,1c8f6 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   154da:	|      move.l 1c20e <currentEvents>,d0
   154e0:	|  /-- beq.s 154fa <unfreeze+0x1ce>
   154e2:	|  |   move.l 1c20e <currentEvents>,12(sp)
   154ea:	|  |   move.l 1c896 <SysBase>,d0
   154f0:	|  |   movea.l d0,a6
   154f2:	|  |   movea.l 12(sp),a1
   154f6:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   154fa:	|  \-> movea.l 1c98a <frozenStuff>,a0
   15500:	|      move.l 28(a0),d0
   15504:	|      move.l d0,1c20e <currentEvents>

	killAllSpeech ();
   1550a:	|      jsr 7ff0 <killAllSpeech>
	if (speech) FreeVec(speech);
   15510:	|      move.l 1c8f2 <speech>,d0
   15516:	|  /-- beq.s 15530 <unfreeze+0x204>
   15518:	|  |   move.l 1c8f2 <speech>,8(sp)
   15520:	|  |   move.l 1c896 <SysBase>,d0
   15526:	|  |   movea.l d0,a6
   15528:	|  |   movea.l 8(sp),a1
   1552c:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   15530:	|  \-> movea.l 1c98a <frozenStuff>,a0
   15536:	|      move.l 20(a0),d0
   1553a:	|      move.l d0,1c8f2 <speech>

	frozenStuff = frozenStuff -> next;
   15540:	|      movea.l 1c98a <frozenStuff>,a0
   15546:	|      move.l 64(a0),d0
   1554a:	|      move.l d0,1c98a <frozenStuff>

	overRegion = NULL;
   15550:	|      clr.l 1c9aa <overRegion>
	if (killMe) FreeVec(killMe);
   15556:	|      tst.l 16(sp)
   1555a:	|  /-- beq.s 15572 <unfreeze+0x246>
   1555c:	|  |   move.l 16(sp),4(sp)
   15562:	|  |   move.l 1c896 <SysBase>,d0
   15568:	|  |   movea.l d0,a6
   1556a:	|  |   movea.l 4(sp),a1
   1556e:	|  |   jsr -690(a6)
	killMe = NULL;
   15572:	|  \-> clr.l 16(sp)
   15576:	|  /-- bra.s 1557a <unfreeze+0x24e>
	if (! frozenStuff) return;
   15578:	\--|-> nop
}
   1557a:	   \-> movea.l (sp)+,a6
   1557c:	       lea 16(sp),sp
   15580:	       rts

00015582 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15582:	pea 19f00 <graphics.c.1c13408a+0x24f>
   15588:	jsr 171b0 <KPrintF>
   1558e:	addq.l #4,sp
	return FALSE;
   15590:	clr.w d0
}
   15592:	rts

00015594 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15594:	          lea -44(sp),sp
   15598:	          move.l a6,-(sp)
   1559a:	          move.l d2,-(sp)
	unsigned int a = 0;
   1559c:	          clr.l 48(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   155a0:	          move.l 1c996 <fontOrderString>,d0
   155a6:	      /-- beq.s 155c0 <loadFont+0x2c>
   155a8:	      |   move.l 1c996 <fontOrderString>,36(sp)
   155b0:	      |   move.l 1c896 <SysBase>,d0
   155b6:	      |   movea.l d0,a6
   155b8:	      |   movea.l 36(sp),a1
   155bc:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   155c0:	      \-> move.l 60(sp),-(sp)
   155c4:	          jsr b8 <copyString>
   155ca:	          addq.l #4,sp
   155cc:	          move.l d0,1c996 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);
   155d2:	          move.l 1c9a2 <theFont>,d0
   155d8:	      /-- beq.s 155ea <loadFont+0x56>
   155da:	      |   move.l 1c9a2 <theFont>,d0
   155e0:	      |   move.l d0,-(sp)
   155e2:	      |   jsr 8ad0 <forgetSpriteBank>
   155e8:	      |   addq.l #4,sp
	theFont = AllocVec( sizeof(struct loadedSpriteBank), MEMF_ANY );
   155ea:	      \-> moveq #26,d0
   155ec:	          move.l d0,32(sp)
   155f0:	          clr.l 28(sp)
   155f4:	          move.l 1c896 <SysBase>,d0
   155fa:	          movea.l d0,a6
   155fc:	          move.l 32(sp),d0
   15600:	          move.l 28(sp),d1
   15604:	          jsr -684(a6)
   15608:	          move.l d0,24(sp)
   1560c:	          move.l 24(sp),d0
   15610:	          move.l d0,1c9a2 <theFont>

	loadedFontNum = filenum;
   15616:	          move.l 56(sp),1c992 <loadedFontNum>

	fontTableSize = 0;
   1561e:	          clr.l 1c99e <fontTableSize>
	char *tmp = charOrder;
   15624:	          move.l 60(sp),44(sp)
	while (*tmp) {        
   1562a:	   /----- bra.s 15666 <loadFont+0xd2>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   1562c:	/--|----> movea.l 44(sp),a0
   15630:	|  |      move.b (a0),d0
   15632:	|  |      ext.w d0
   15634:	|  |      movea.w d0,a0
   15636:	|  |      move.l 1c99e <fontTableSize>,d0
   1563c:	|  |      move.l d0,d0
   1563e:	|  |      move.b d0,d0
   15640:	|  |      andi.l #255,d0
   15646:	|  |      cmp.l a0,d0
   15648:	|  |  /-- bge.s 1565a <loadFont+0xc6>
   1564a:	|  |  |   movea.l 44(sp),a0
   1564e:	|  |  |   move.b (a0),d0
   15650:	|  |  |   ext.w d0
   15652:	|  |  |   movea.w d0,a0
   15654:	|  |  |   move.l a0,1c99e <fontTableSize>
		*tmp++;
   1565a:	|  |  \-> move.l 44(sp),d0
   1565e:	|  |      move.l d0,d1
   15660:	|  |      addq.l #1,d1
   15662:	|  |      move.l d1,44(sp)
	while (*tmp) {        
   15666:	|  \----> movea.l 44(sp),a0
   1566a:	|         move.b (a0),d0
   1566c:	\-------- bne.s 1562c <loadFont+0x98>
	}
	fontTableSize++;
   1566e:	          move.l 1c99e <fontTableSize>,d0
   15674:	          addq.l #1,d0
   15676:	          move.l d0,1c99e <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   1567c:	          move.l 1c99a <fontTable>,d0
   15682:	      /-- beq.s 1569c <loadFont+0x108>
   15684:	      |   move.l 1c99a <fontTable>,20(sp)
   1568c:	      |   move.l 1c896 <SysBase>,d0
   15692:	      |   movea.l d0,a6
   15694:	      |   movea.l 20(sp),a1
   15698:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   1569c:	      \-> move.l 1c99e <fontTableSize>,d0
   156a2:	          add.l d0,d0
   156a4:	          add.l d0,d0
   156a6:	          move.l d0,16(sp)
   156aa:	          clr.l 12(sp)
   156ae:	          move.l 1c896 <SysBase>,d0
   156b4:	          movea.l d0,a6
   156b6:	          move.l 16(sp),d0
   156ba:	          move.l 12(sp),d1
   156be:	          jsr -684(a6)
   156c2:	          move.l d0,8(sp)
   156c6:	          move.l 8(sp),d0
   156ca:	          move.l d0,1c99a <fontTable>
	if (!fontTable) return FALSE;
   156d0:	          move.l 1c99a <fontTable>,d0
   156d6:	      /-- bne.s 156de <loadFont+0x14a>
   156d8:	      |   clr.w d0
   156da:	/-----|-- bra.w 1578a <loadFont+0x1f6>

	for (a = 0;  a < fontTableSize; a++) {
   156de:	|     \-> clr.l 48(sp)
   156e2:	|     /-- bra.s 156fc <loadFont+0x168>
		fontTable[a] = 0;
   156e4:	|  /--|-> move.l 1c99a <fontTable>,d1
   156ea:	|  |  |   move.l 48(sp),d0
   156ee:	|  |  |   add.l d0,d0
   156f0:	|  |  |   add.l d0,d0
   156f2:	|  |  |   movea.l d1,a0
   156f4:	|  |  |   adda.l d0,a0
   156f6:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   156f8:	|  |  |   addq.l #1,48(sp)
   156fc:	|  |  \-> move.l 1c99e <fontTableSize>,d0
   15702:	|  |      cmp.l 48(sp),d0
   15706:	|  \----- bhi.s 156e4 <loadFont+0x150>
	}
	a = 0;
   15708:	|         clr.l 48(sp)
	int i = 0;
   1570c:	|         clr.l 40(sp)
	tmp = charOrder;
   15710:	|         move.l 60(sp),44(sp)
	while (*tmp) {
   15716:	|     /-- bra.s 15746 <loadFont+0x1b2>
		fontTable[*tmp++] = i;
   15718:	|  /--|-> move.l 1c99a <fontTable>,d1
   1571e:	|  |  |   move.l 44(sp),d0
   15722:	|  |  |   move.l d0,d2
   15724:	|  |  |   addq.l #1,d2
   15726:	|  |  |   move.l d2,44(sp)
   1572a:	|  |  |   movea.l d0,a0
   1572c:	|  |  |   move.b (a0),d0
   1572e:	|  |  |   ext.w d0
   15730:	|  |  |   movea.w d0,a0
   15732:	|  |  |   move.l a0,d0
   15734:	|  |  |   add.l a0,d0
   15736:	|  |  |   add.l d0,d0
   15738:	|  |  |   movea.l d1,a0
   1573a:	|  |  |   adda.l d0,a0
   1573c:	|  |  |   move.l 40(sp),d0
   15740:	|  |  |   move.l d0,(a0)
		i++;
   15742:	|  |  |   addq.l #1,40(sp)
	while (*tmp) {
   15746:	|  |  \-> movea.l 44(sp),a0
   1574a:	|  |      move.b (a0),d0
   1574c:	|  \----- bne.s 15718 <loadFont+0x184>
	}

	if (!loadSpriteBank(filenum, &theFont->bank, TRUE)) {
   1574e:	|         move.l 1c9a2 <theFont>,d0
   15754:	|         addq.l #8,d0
   15756:	|         pea 1 <_start+0x1>
   1575a:	|         move.l d0,-(sp)
   1575c:	|         move.l 64(sp),-(sp)
   15760:	|         jsr 8bf2 <loadSpriteBank>
   15766:	|         lea 12(sp),sp
   1576a:	|         tst.w d0
   1576c:	|     /-- bne.s 15780 <loadFont+0x1ec>
		KPrintF("loadFont: Can't load font");
   1576e:	|     |   pea 19f27 <graphics.c.1c13408a+0x276>
   15774:	|     |   jsr 171b0 <KPrintF>
   1577a:	|     |   addq.l #4,sp
		return FALSE;
   1577c:	|     |   clr.w d0
   1577e:	+-----|-- bra.s 1578a <loadFont+0x1f6>
	}
	fontHeight = h;
   15780:	|     \-> move.l 64(sp),1c98e <fontHeight>
	return TRUE;
   15788:	|         moveq #1,d0
}
   1578a:	\-------> move.l (sp)+,d2
   1578c:	          movea.l (sp)+,a6
   1578e:	          lea 44(sp),sp
   15792:	          rts

00015794 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15794:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15798:	                clr.l 4(sp)

    if (!fontTableSize) return;
   1579c:	                move.l 1c99e <fontTableSize>,d0
   157a2:	/-------------- beq.w 1586a <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   157a6:	|               move.w 1c79a <fontSpace>,d0
   157ac:	|               asr.w #1,d0
   157ae:	|               ext.l d0
   157b0:	|               add.l d0,20(sp)
	char *tmp = theText;
   157b4:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   157ba:	|     /-------- bra.w 1585e <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   157be:	|  /--|-------> movea.l 1c9a2 <theFont>,a0
   157c4:	|  |  |         movea.l 16(a0),a0
   157c8:	|  |  |         movea.l 8(sp),a1
   157cc:	|  |  |         move.b (a1),d0
   157ce:	|  |  |         move.b d0,d0
   157d0:	|  |  |         andi.l #255,d0
   157d6:	|  |  |         move.l 1c99e <fontTableSize>,d1
   157dc:	|  |  |         cmp.l d0,d1
   157de:	|  |  |  /----- bls.s 1580a <pasteStringToBackdrop+0x76>
   157e0:	|  |  |  |      move.l 1c99a <fontTable>,d1
   157e6:	|  |  |  |      movea.l 8(sp),a1
   157ea:	|  |  |  |      move.b (a1),d0
   157ec:	|  |  |  |      move.b d0,d0
   157ee:	|  |  |  |      andi.l #255,d0
   157f4:	|  |  |  |      add.l d0,d0
   157f6:	|  |  |  |      add.l d0,d0
   157f8:	|  |  |  |      movea.l d1,a1
   157fa:	|  |  |  |      adda.l d0,a1
   157fc:	|  |  |  |      move.l (a1),d1
   157fe:	|  |  |  |      move.l d1,d0
   15800:	|  |  |  |      lsl.l #3,d0
   15802:	|  |  |  |      sub.l d1,d0
   15804:	|  |  |  |      add.l d0,d0
   15806:	|  |  |  |      add.l d0,d0
   15808:	|  |  |  |  /-- bra.s 1580c <pasteStringToBackdrop+0x78>
   1580a:	|  |  |  \--|-> moveq #0,d0
   1580c:	|  |  |     \-> adda.l d0,a0
   1580e:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15810:	|  |  |         move.l 24(sp),d1
   15814:	|  |  |         movea.l (sp),a0
   15816:	|  |  |         move.l 12(a0),d0
   1581a:	|  |  |         move.l d0,d0
   1581c:	|  |  |         sub.w d0,d1
   1581e:	|  |  |         move.w d1,d0
   15820:	|  |  |         movea.w d0,a1
   15822:	|  |  |         move.l 20(sp),d1
   15826:	|  |  |         movea.l (sp),a0
   15828:	|  |  |         move.l 8(a0),d0
   1582c:	|  |  |         move.l d0,d0
   1582e:	|  |  |         sub.w d0,d1
   15830:	|  |  |         move.w d1,d0
   15832:	|  |  |         movea.w d0,a0
   15834:	|  |  |         move.l a1,-(sp)
   15836:	|  |  |         move.l a0,-(sp)
   15838:	|  |  |         move.l 8(sp),-(sp)
   1583c:	|  |  |         jsr 2470 <CstPasteChar>
   15842:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15846:	|  |  |         movea.l (sp),a0
   15848:	|  |  |         move.l (a0),d1
   1584a:	|  |  |         move.w 1c79a <fontSpace>,d0
   15850:	|  |  |         movea.w d0,a0
   15852:	|  |  |         move.l d1,d0
   15854:	|  |  |         add.l a0,d0
   15856:	|  |  |         add.l d0,20(sp)
		tmp++;
   1585a:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   1585e:	|  |  \-------> movea.l 8(sp),a0
   15862:	|  |            move.b (a0),d0
   15864:	|  \----------- bne.w 157be <pasteStringToBackdrop+0x2a>
   15868:	|           /-- bra.s 1586c <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   1586a:	\-----------|-> nop
    }
}
   1586c:	            \-> lea 12(sp),sp
   15870:	                rts

00015872 <stringWidth>:


int stringWidth (char * theText) {
   15872:	       subq.l #8,sp
	int a = 0;
   15874:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15878:	       clr.l (sp)

	if (! fontTableSize) return 0;
   1587a:	       move.l 1c99e <fontTableSize>,d0
   15880:	/----- bne.s 15886 <stringWidth+0x14>
   15882:	|      moveq #0,d0
   15884:	|  /-- bra.s 15888 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   15886:	\--|-> move.l (sp),d0
}
   15888:	   \-> addq.l #8,sp
   1588a:	       rts

0001588c <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   1588c:	       lea -16(sp),sp
   15890:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15892:	       moveq #36,d0
   15894:	       move.l d0,16(sp)
   15898:	       clr.l 12(sp)
   1589c:	       move.l 1c896 <SysBase>,d0
   158a2:	       movea.l d0,a6
   158a4:	       move.l 16(sp),d0
   158a8:	       move.l 12(sp),d1
   158ac:	       jsr -684(a6)
   158b0:	       move.l d0,8(sp)
   158b4:	       move.l 8(sp),d0
   158b8:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   158bc:	   /-- bne.s 158c4 <addScreenRegion+0x38>
   158be:	   |   clr.w d0
   158c0:	/--|-- bra.w 15944 <addScreenRegion+0xb8>
    newRegion->di = di;
   158c4:	|  \-> movea.l 4(sp),a0
   158c8:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   158ce:	|      movea.l 4(sp),a0
   158d2:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   158d6:	|      movea.l 4(sp),a0
   158da:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   158e0:	|      movea.l 4(sp),a0
   158e4:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   158ea:	|      movea.l 4(sp),a0
   158ee:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   158f4:	|      movea.l 4(sp),a0
   158f8:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   158fe:	|      movea.l 4(sp),a0
   15902:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15908:	|      move.l 52(sp),-(sp)
   1590c:	|      jsr d5e2 <loadObjectType>
   15912:	|      addq.l #4,sp
   15914:	|      movea.l 4(sp),a0
   15918:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   1591c:	|      move.l 1c9a6 <allScreenRegions>,d0
   15922:	|      movea.l 4(sp),a0
   15926:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   1592a:	|      move.l 4(sp),1c9a6 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15932:	|      movea.l 4(sp),a0
   15936:	|      move.l 28(a0),d0
   1593a:	|      sne d0
   1593c:	|      neg.b d0
   1593e:	|      move.b d0,d0
   15940:	|      andi.w #255,d0
}
   15944:	\----> movea.l (sp)+,a6
   15946:	       lea 16(sp),sp
   1594a:	       rts

0001594c <getOverRegion>:

void getOverRegion () {
   1594c:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1594e:	             move.l 1c9a6 <allScreenRegions>,(sp)
	while (thisRegion) {
   15954:	   /-------- bra.s 159c2 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15956:	/--|-------> move.l 1c852 <input+0xa>,d0
   1595c:	|  |         movea.l (sp),a0
   1595e:	|  |         movea.l (a0),a0
   15960:	|  |         move.l 1c950 <cameraX>,d1
   15966:	|  |         suba.l d1,a0
   15968:	|  |         cmpa.l d0,a0
   1596a:	|  |  /----- bgt.s 159bc <getOverRegion+0x70>
   1596c:	|  |  |      move.l 1c856 <input+0xe>,d0
   15972:	|  |  |      movea.l (sp),a0
   15974:	|  |  |      movea.l 4(a0),a0
   15978:	|  |  |      move.l 1c954 <cameraY>,d1
   1597e:	|  |  |      suba.l d1,a0
   15980:	|  |  |      cmpa.l d0,a0
   15982:	|  |  +----- bgt.s 159bc <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15984:	|  |  |      move.l 1c852 <input+0xa>,d0
   1598a:	|  |  |      movea.l (sp),a0
   1598c:	|  |  |      movea.l 8(a0),a0
   15990:	|  |  |      move.l 1c950 <cameraX>,d1
   15996:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15998:	|  |  |      cmpa.l d0,a0
   1599a:	|  |  +----- blt.s 159bc <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   1599c:	|  |  |      move.l 1c856 <input+0xe>,d0
   159a2:	|  |  |      movea.l (sp),a0
   159a4:	|  |  |      movea.l 12(a0),a0
   159a8:	|  |  |      move.l 1c954 <cameraY>,d1
   159ae:	|  |  |      suba.l d1,a0
   159b0:	|  |  |      cmpa.l d0,a0
   159b2:	|  |  +----- blt.s 159bc <getOverRegion+0x70>
			overRegion = thisRegion;
   159b4:	|  |  |      move.l (sp),1c9aa <overRegion>
			return;
   159ba:	|  |  |  /-- bra.s 159ce <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   159bc:	|  |  \--|-> movea.l (sp),a0
   159be:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   159c2:	|  \-----|-> tst.l (sp)
   159c4:	\--------|-- bne.s 15956 <getOverRegion+0xa>
	}
	overRegion = NULL;
   159c6:	         |   clr.l 1c9aa <overRegion>
	return;
   159cc:	         |   nop
}
   159ce:	         \-> addq.l #4,sp
   159d0:	             rts

000159d2 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   159d2:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   159d4:	             move.l 1c9a6 <allScreenRegions>,(sp)

	while (thisRegion) {
   159da:	   /-------- bra.s 159f6 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   159dc:	/--|-------> movea.l (sp),a0
   159de:	|  |         movea.l 28(a0),a0
   159e2:	|  |         move.l 4(a0),d0
   159e6:	|  |         cmp.l 8(sp),d0
   159ea:	|  |     /-- bne.s 159f0 <getRegionForObject+0x1e>
			return thisRegion;
   159ec:	|  |     |   move.l (sp),d0
   159ee:	|  |  /--|-- bra.s 159fc <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   159f0:	|  |  |  \-> movea.l (sp),a0
   159f2:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   159f6:	|  \--|----> tst.l (sp)
   159f8:	\-----|----- bne.s 159dc <getRegionForObject+0xa>
	}

	return NULL;
   159fa:	      |      moveq #0,d0
}
   159fc:	      \----> addq.l #4,sp
   159fe:	             rts

00015a00 <killAllRegions>:

void killAllRegions () {
   15a00:	       subq.l #8,sp
   15a02:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15a04:	   /-- bra.s 15a46 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15a06:	/--|-> move.l 1c9a6 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15a0e:	|  |   movea.l 1c9a6 <allScreenRegions>,a0
   15a14:	|  |   move.l 32(a0),d0
   15a18:	|  |   move.l d0,1c9a6 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15a1e:	|  |   movea.l 8(sp),a0
   15a22:	|  |   move.l 28(a0),d0
   15a26:	|  |   move.l d0,-(sp)
   15a28:	|  |   jsr d89a <removeObjectType>
   15a2e:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15a30:	|  |   move.l 8(sp),4(sp)
   15a36:	|  |   move.l 1c896 <SysBase>,d0
   15a3c:	|  |   movea.l d0,a6
   15a3e:	|  |   movea.l 4(sp),a1
   15a42:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15a46:	|  \-> move.l 1c9a6 <allScreenRegions>,d0
   15a4c:	\----- bne.s 15a06 <killAllRegions+0x6>
	}
	overRegion = NULL;
   15a4e:	       clr.l 1c9aa <overRegion>
}
   15a54:	       nop
   15a56:	       movea.l (sp)+,a6
   15a58:	       addq.l #8,sp
   15a5a:	       rts

00015a5c <loadRegions>:

void loadRegions (BPTR fp) {
   15a5c:	       lea -24(sp),sp
   15a60:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15a62:	       move.l 32(sp),-(sp)
   15a66:	       jsr 6bc <get2bytes>
   15a6c:	       addq.l #4,sp
   15a6e:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15a72:	       move.l #117158,20(sp)

	while (numRegions --) {
   15a7a:	   /-- bra.w 15b58 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15a7e:	/--|-> moveq #36,d0
   15a80:	|  |   move.l d0,16(sp)
   15a84:	|  |   clr.l 12(sp)
   15a88:	|  |   move.l 1c896 <SysBase>,d0
   15a8e:	|  |   movea.l d0,a6
   15a90:	|  |   move.l 16(sp),d0
   15a94:	|  |   move.l 12(sp),d1
   15a98:	|  |   jsr -684(a6)
   15a9c:	|  |   move.l d0,8(sp)
   15aa0:	|  |   move.l 8(sp),d0
   15aa4:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15aa8:	|  |   movea.l 20(sp),a0
   15aac:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15ab0:	|  |   moveq #32,d1
   15ab2:	|  |   add.l 4(sp),d1
   15ab6:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15aba:	|  |   move.l 32(sp),-(sp)
   15abe:	|  |   jsr 6bc <get2bytes>
   15ac4:	|  |   addq.l #4,sp
   15ac6:	|  |   movea.l 4(sp),a0
   15aca:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15acc:	|  |   move.l 32(sp),-(sp)
   15ad0:	|  |   jsr 6bc <get2bytes>
   15ad6:	|  |   addq.l #4,sp
   15ad8:	|  |   movea.l 4(sp),a0
   15adc:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15ae0:	|  |   move.l 32(sp),-(sp)
   15ae4:	|  |   jsr 6bc <get2bytes>
   15aea:	|  |   addq.l #4,sp
   15aec:	|  |   movea.l 4(sp),a0
   15af0:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15af4:	|  |   move.l 32(sp),-(sp)
   15af8:	|  |   jsr 6bc <get2bytes>
   15afe:	|  |   addq.l #4,sp
   15b00:	|  |   movea.l 4(sp),a0
   15b04:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15b08:	|  |   move.l 32(sp),-(sp)
   15b0c:	|  |   jsr 6bc <get2bytes>
   15b12:	|  |   addq.l #4,sp
   15b14:	|  |   movea.l 4(sp),a0
   15b18:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15b1c:	|  |   move.l 32(sp),-(sp)
   15b20:	|  |   jsr 6bc <get2bytes>
   15b26:	|  |   addq.l #4,sp
   15b28:	|  |   movea.l 4(sp),a0
   15b2c:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15b30:	|  |   move.l 32(sp),-(sp)
   15b34:	|  |   jsr 6bc <get2bytes>
   15b3a:	|  |   addq.l #4,sp
   15b3c:	|  |   movea.l 4(sp),a0
   15b40:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15b44:	|  |   move.l 32(sp),-(sp)
   15b48:	|  |   jsr d590 <loadObjectRef>
   15b4e:	|  |   addq.l #4,sp
   15b50:	|  |   movea.l 4(sp),a0
   15b54:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15b58:	|  \-> move.l 24(sp),d0
   15b5c:	|      move.l d0,d1
   15b5e:	|      subq.l #1,d1
   15b60:	|      move.l d1,24(sp)
   15b64:	|      tst.l d0
   15b66:	\----- bne.w 15a7e <loadRegions+0x22>
	}
	* pointy = NULL;
   15b6a:	       movea.l 20(sp),a0
   15b6e:	       clr.l (a0)
}
   15b70:	       nop
   15b72:	       movea.l (sp)+,a6
   15b74:	       lea 24(sp),sp
   15b78:	       rts

00015b7a <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15b7a:	             lea -12(sp),sp
   15b7e:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15b80:	             move.l #117158,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15b88:	   /-------- bra.s 15c02 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15b8a:	/--|-------> movea.l 12(sp),a0
   15b8e:	|  |         movea.l (a0),a0
   15b90:	|  |         movea.l 28(a0),a0
   15b94:	|  |         move.l 4(a0),d0
   15b98:	|  |         cmp.l 20(sp),d0
   15b9c:	|  |  /----- bne.s 15bf4 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15b9e:	|  |  |      movea.l 12(sp),a0
   15ba2:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15ba6:	|  |  |      movea.l 8(sp),a0
   15baa:	|  |  |      move.l 32(a0),d0
   15bae:	|  |  |      movea.l 12(sp),a0
   15bb2:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15bb4:	|  |  |      movea.l 8(sp),a0
   15bb8:	|  |  |      move.l 28(a0),d0
   15bbc:	|  |  |      move.l d0,-(sp)
   15bbe:	|  |  |      jsr d89a <removeObjectType>
   15bc4:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15bc6:	|  |  |      move.l 1c9aa <overRegion>,d0
   15bcc:	|  |  |      cmp.l 8(sp),d0
   15bd0:	|  |  |  /-- bne.s 15bd8 <removeScreenRegion+0x5e>
   15bd2:	|  |  |  |   clr.l 1c9aa <overRegion>
            FreeVec(killMe);
   15bd8:	|  |  |  \-> move.l 8(sp),4(sp)
   15bde:	|  |  |      move.l 1c896 <SysBase>,d0
   15be4:	|  |  |      movea.l d0,a6
   15be6:	|  |  |      movea.l 4(sp),a1
   15bea:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15bee:	|  |  |      clr.l 8(sp)
   15bf2:	|  +--|----- bra.s 15c02 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15bf4:	|  |  \----> movea.l 12(sp),a0
   15bf8:	|  |         move.l (a0),d0
   15bfa:	|  |         moveq #32,d1
   15bfc:	|  |         add.l d0,d1
   15bfe:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15c02:	|  \-------> movea.l 12(sp),a0
   15c06:	|            move.l (a0),d0
   15c08:	\----------- bne.s 15b8a <removeScreenRegion+0x10>
        }
    }
}
   15c0a:	             nop
   15c0c:	             nop
   15c0e:	             movea.l (sp)+,a6
   15c10:	             lea 12(sp),sp
   15c14:	             rts

00015c16 <saveRegions>:

void saveRegions (BPTR fp) {
   15c16:	       subq.l #8,sp
	int numRegions = 0;
   15c18:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15c1c:	       move.l 1c9a6 <allScreenRegions>,(sp)
	while (thisRegion) {
   15c22:	   /-- bra.s 15c2e <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15c24:	/--|-> movea.l (sp),a0
   15c26:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15c2a:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15c2e:	|  \-> tst.l (sp)
   15c30:	\----- bne.s 15c24 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15c32:	       move.l 12(sp),-(sp)
   15c36:	       move.l 8(sp),-(sp)
   15c3a:	       jsr 8d0 <put2bytes>
   15c40:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15c42:	       move.l 1c9a6 <allScreenRegions>,(sp)
	while (thisRegion) {
   15c48:	/----- bra.w 15cf0 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15c4c:	|  /-> movea.l (sp),a0
   15c4e:	|  |   move.l (a0),d0
   15c50:	|  |   move.l 12(sp),-(sp)
   15c54:	|  |   move.l d0,-(sp)
   15c56:	|  |   jsr 8d0 <put2bytes>
   15c5c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15c5e:	|  |   movea.l (sp),a0
   15c60:	|  |   move.l 4(a0),d0
   15c64:	|  |   move.l 12(sp),-(sp)
   15c68:	|  |   move.l d0,-(sp)
   15c6a:	|  |   jsr 8d0 <put2bytes>
   15c70:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15c72:	|  |   movea.l (sp),a0
   15c74:	|  |   move.l 8(a0),d0
   15c78:	|  |   move.l 12(sp),-(sp)
   15c7c:	|  |   move.l d0,-(sp)
   15c7e:	|  |   jsr 8d0 <put2bytes>
   15c84:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15c86:	|  |   movea.l (sp),a0
   15c88:	|  |   move.l 12(a0),d0
   15c8c:	|  |   move.l 12(sp),-(sp)
   15c90:	|  |   move.l d0,-(sp)
   15c92:	|  |   jsr 8d0 <put2bytes>
   15c98:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15c9a:	|  |   movea.l (sp),a0
   15c9c:	|  |   move.l 16(a0),d0
   15ca0:	|  |   move.l 12(sp),-(sp)
   15ca4:	|  |   move.l d0,-(sp)
   15ca6:	|  |   jsr 8d0 <put2bytes>
   15cac:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15cae:	|  |   movea.l (sp),a0
   15cb0:	|  |   move.l 20(a0),d0
   15cb4:	|  |   move.l 12(sp),-(sp)
   15cb8:	|  |   move.l d0,-(sp)
   15cba:	|  |   jsr 8d0 <put2bytes>
   15cc0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15cc2:	|  |   movea.l (sp),a0
   15cc4:	|  |   move.l 24(a0),d0
   15cc8:	|  |   move.l 12(sp),-(sp)
   15ccc:	|  |   move.l d0,-(sp)
   15cce:	|  |   jsr 8d0 <put2bytes>
   15cd4:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15cd6:	|  |   movea.l (sp),a0
   15cd8:	|  |   move.l 28(a0),d0
   15cdc:	|  |   move.l 12(sp),-(sp)
   15ce0:	|  |   move.l d0,-(sp)
   15ce2:	|  |   jsr d93a <saveObjectRef>
   15ce8:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15cea:	|  |   movea.l (sp),a0
   15cec:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15cf0:	\--|-> tst.l (sp)
   15cf2:	   \-- bne.w 15c4c <saveRegions+0x36>
	}
}
   15cf6:	       nop
   15cf8:	       nop
   15cfa:	       addq.l #8,sp
   15cfc:	       rts

00015cfe <showBoxes>:

void showBoxes () {
   15cfe:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15d00:	       move.l 1c9a6 <allScreenRegions>,(sp)

	while (huntRegion) {
   15d06:	/----- bra.w 15da2 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15d0a:	|  /-> movea.l (sp),a0
   15d0c:	|  |   move.l 12(a0),d0
   15d10:	|  |   movea.l d0,a1
   15d12:	|  |   movea.l (sp),a0
   15d14:	|  |   move.l 4(a0),d0
   15d18:	|  |   move.l d0,d1
   15d1a:	|  |   movea.l (sp),a0
   15d1c:	|  |   move.l (a0),d0
   15d1e:	|  |   move.l a1,-(sp)
   15d20:	|  |   move.l d1,-(sp)
   15d22:	|  |   move.l d0,-(sp)
   15d24:	|  |   jsr d21e <drawVerticalLine>
   15d2a:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15d2e:	|  |   movea.l (sp),a0
   15d30:	|  |   move.l 12(a0),d0
   15d34:	|  |   movea.l d0,a1
   15d36:	|  |   movea.l (sp),a0
   15d38:	|  |   move.l 4(a0),d0
   15d3c:	|  |   move.l d0,d1
   15d3e:	|  |   movea.l (sp),a0
   15d40:	|  |   move.l 8(a0),d0
   15d44:	|  |   move.l a1,-(sp)
   15d46:	|  |   move.l d1,-(sp)
   15d48:	|  |   move.l d0,-(sp)
   15d4a:	|  |   jsr d21e <drawVerticalLine>
   15d50:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15d54:	|  |   movea.l (sp),a0
   15d56:	|  |   move.l 8(a0),d0
   15d5a:	|  |   movea.l d0,a1
   15d5c:	|  |   movea.l (sp),a0
   15d5e:	|  |   move.l 4(a0),d0
   15d62:	|  |   move.l d0,d1
   15d64:	|  |   movea.l (sp),a0
   15d66:	|  |   move.l (a0),d0
   15d68:	|  |   move.l a1,-(sp)
   15d6a:	|  |   move.l d1,-(sp)
   15d6c:	|  |   move.l d0,-(sp)
   15d6e:	|  |   jsr d1f8 <drawHorizontalLine>
   15d74:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15d78:	|  |   movea.l (sp),a0
   15d7a:	|  |   move.l 8(a0),d0
   15d7e:	|  |   movea.l d0,a1
   15d80:	|  |   movea.l (sp),a0
   15d82:	|  |   move.l 12(a0),d0
   15d86:	|  |   move.l d0,d1
   15d88:	|  |   movea.l (sp),a0
   15d8a:	|  |   move.l (a0),d0
   15d8c:	|  |   move.l a1,-(sp)
   15d8e:	|  |   move.l d1,-(sp)
   15d90:	|  |   move.l d0,-(sp)
   15d92:	|  |   jsr d1f8 <drawHorizontalLine>
   15d98:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15d9c:	|  |   movea.l (sp),a0
   15d9e:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15da2:	\--|-> tst.l (sp)
   15da4:	   \-- bne.w 15d0a <showBoxes+0xc>
	}
   15da8:	       nop
   15daa:	       nop
   15dac:	       addq.l #4,sp
   15dae:	       rts

00015db0 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15db0:	       lea -88(sp),sp
   15db4:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15db6:	       move.l 1c896 <SysBase>,d0
   15dbc:	       movea.l d0,a6
   15dbe:	       jsr -666(a6)
   15dc2:	       move.l d0,88(sp)
   15dc6:	       move.l 88(sp),d0
   15dca:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15dce:	       move.l 84(sp),80(sp)
   15dd4:	       moveq #40,d0
   15dd6:	       move.l d0,76(sp)
   15dda:	       move.l 1c896 <SysBase>,d0
   15de0:	       movea.l d0,a6
   15de2:	       movea.l 80(sp),a0
   15de6:	       move.l 76(sp),d0
   15dea:	       jsr -654(a6)
   15dee:	       move.l d0,72(sp)
   15df2:	       move.l 72(sp),d0
   15df6:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15dfa:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15e00:	       move.l #106305,60(sp)
   15e08:	       clr.l 56(sp)
   15e0c:	       move.l 64(sp),52(sp)
   15e12:	       clr.l 48(sp)
   15e16:	       move.l 1c896 <SysBase>,d0
   15e1c:	       movea.l d0,a6
   15e1e:	       movea.l 60(sp),a0
   15e22:	       move.l 56(sp),d0
   15e26:	       movea.l 52(sp),a1
   15e2a:	       move.l 48(sp),d1
   15e2e:	       jsr -444(a6)
   15e32:	       move.b d0,47(sp)
   15e36:	       move.b 47(sp),d0
   15e3a:	   /-- beq.s 15e50 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15e3c:	   |   pea 19f4e <graphics.c.1c13408a+0x29d>
   15e42:	   |   jsr 171b0 <KPrintF>
   15e48:	   |   addq.l #4,sp
        return 0;
   15e4a:	   |   moveq #0,d0
   15e4c:	/--|-- bra.w 15f0a <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15e50:	|  \-> movea.l 64(sp),a0
   15e54:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15e5a:	|      lea 92(sp),a0
   15e5e:	|      lea -86(a0),a0
   15e62:	|      move.l a0,38(sp)
   15e66:	|      movea.l 42(sp),a6
   15e6a:	|      movea.l 38(sp),a0
   15e6e:	|      jsr -60(a6)
   15e72:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15e76:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15e7c:	|      move.l #1103515245,-(sp)
   15e82:	|      move.l 34(sp),-(sp)
   15e86:	|      jsr 17b6e <__mulsi3>
   15e8c:	|      addq.l #8,sp
   15e8e:	|      addi.l #12345,d0
   15e94:	|      move.l d0,d1
   15e96:	|      bclr #31,d1
   15e9a:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15e9e:	|      move.l 30(sp),d0
   15ea2:	|      pea 64 <_start+0x64>
   15ea6:	|      move.l d0,-(sp)
   15ea8:	|      jsr 17c48 <__umodsi3>
   15eae:	|      addq.l #8,sp
   15eb0:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15eb4:	|      move.l 26(sp),-(sp)
   15eb8:	|      pea 19f6b <graphics.c.1c13408a+0x2ba>
   15ebe:	|      jsr 171b0 <KPrintF>
   15ec4:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15ec6:	|      move.l 64(sp),22(sp)
   15ecc:	|      move.l 1c896 <SysBase>,d0
   15ed2:	|      movea.l d0,a6
   15ed4:	|      movea.l 22(sp),a1
   15ed8:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15edc:	|      move.l 64(sp),18(sp)
   15ee2:	|      move.l 1c896 <SysBase>,d0
   15ee8:	|      movea.l d0,a6
   15eea:	|      movea.l 18(sp),a0
   15eee:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15ef2:	|      move.l 84(sp),14(sp)
   15ef8:	|      move.l 1c896 <SysBase>,d0
   15efe:	|      movea.l d0,a6
   15f00:	|      movea.l 14(sp),a0
   15f04:	|      jsr -672(a6)
    return 0;
   15f08:	|      moveq #0,d0
   15f0a:	\----> movea.l (sp)+,a6
   15f0c:	       lea 88(sp),sp
   15f10:	       rts

00015f12 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15f12:	             lea -20(sp),sp
   15f16:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15f18:	             move.l 1c9ae <allLoadedBanks>,20(sp)
	while (returnMe) {
   15f20:	      /----- bra.s 15f52 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15f22:	   /--|----> movea.l 20(sp),a0
   15f26:	   |  |      move.l (a0),d0
   15f28:	   |  |      cmp.l 28(sp),d0
   15f2c:	   |  |  /-- bne.s 15f48 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15f2e:	   |  |  |   movea.l 20(sp),a0
   15f32:	   |  |  |   move.l 4(a0),d0
   15f36:	   |  |  |   addq.l #1,d0
   15f38:	   |  |  |   movea.l 20(sp),a0
   15f3c:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15f40:	   |  |  |   move.l 20(sp),d0
   15f44:	/--|--|--|-- bra.w 16008 <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   15f48:	|  |  |  \-> movea.l 20(sp),a0
   15f4c:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15f52:	|  |  \----> tst.l 20(sp)
   15f56:	|  \-------- bne.s 15f22 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15f58:	|            moveq #26,d0
   15f5a:	|            move.l d0,16(sp)
   15f5e:	|            clr.l 12(sp)
   15f62:	|            move.l 1c896 <SysBase>,d0
   15f68:	|            movea.l d0,a6
   15f6a:	|            move.l 16(sp),d0
   15f6e:	|            move.l 12(sp),d1
   15f72:	|            jsr -684(a6)
   15f76:	|            move.l d0,8(sp)
   15f7a:	|            move.l 8(sp),d0
   15f7e:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15f82:	|     /----- beq.w 16006 <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   15f86:	|     |      movea.l 20(sp),a0
   15f8a:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   15f8e:	|     |      move.l 20(sp),d0
   15f92:	|     |      addq.l #8,d0
   15f94:	|     |      clr.l -(sp)
   15f96:	|     |      move.l d0,-(sp)
   15f98:	|     |      move.l 36(sp),-(sp)
   15f9c:	|     |      jsr 8bf2 <loadSpriteBank>
   15fa2:	|     |      lea 12(sp),sp
   15fa6:	|     |      tst.w d0
   15fa8:	|     |  /-- beq.s 15fde <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   15faa:	|     |  |   movea.l 20(sp),a0
   15fae:	|     |  |   moveq #1,d0
   15fb0:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15fb4:	|     |  |   move.l 1c9ae <allLoadedBanks>,d0
   15fba:	|     |  |   movea.l 20(sp),a0
   15fbe:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15fc2:	|     |  |   move.l 20(sp),1c9ae <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   15fca:	|     |  |   pea 19f7e <graphics.c.1c13408a+0x2cd>
   15fd0:	|     |  |   jsr 171b0 <KPrintF>
   15fd6:	|     |  |   addq.l #4,sp
			return returnMe;
   15fd8:	|     |  |   move.l 20(sp),d0
   15fdc:	+-----|--|-- bra.s 16008 <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   15fde:	|     |  \-> pea 19fab <graphics.c.1c13408a+0x2fa>
   15fe4:	|     |      jsr 171b0 <KPrintF>
   15fea:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   15fec:	|     |      move.l 20(sp),4(sp)
   15ff2:	|     |      move.l 1c896 <SysBase>,d0
   15ff8:	|     |      movea.l d0,a6
   15ffa:	|     |      movea.l 4(sp),a1
   15ffe:	|     |      jsr -690(a6)
			return NULL;
   16002:	|     |      moveq #0,d0
   16004:	+-----|----- bra.s 16008 <loadBankForAnim+0xf6>
		}
	} else return NULL;
   16006:	|     \----> moveq #0,d0
}
   16008:	\----------> movea.l (sp)+,a6
   1600a:	             lea 20(sp),sp
   1600e:	             rts

00016010 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   16010:	       lea -32(sp),sp
   16014:	       move.l d3,-(sp)
   16016:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   16018:	       move.l 60(sp),d0
   1601c:	       sub.l 52(sp),d0
   16020:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   16024:	       move.l 64(sp),d0
   16028:	       sub.l 56(sp),d0
   1602c:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   16030:	       move.l 68(sp),d0
   16034:	       sub.l 52(sp),d0
   16038:	       move.l 36(sp),-(sp)
   1603c:	       move.l d0,-(sp)
   1603e:	       jsr 17b6e <__mulsi3>
   16044:	       addq.l #8,sp
   16046:	       move.l d0,d2
   16048:	       move.l 72(sp),d0
   1604c:	       sub.l 56(sp),d0
   16050:	       move.l 32(sp),-(sp)
   16054:	       move.l d0,-(sp)
   16056:	       jsr 17b6e <__mulsi3>
   1605c:	       addq.l #8,sp
   1605e:	       add.l d2,d0
   16060:	       move.l d0,-(sp)
   16062:	       jsr 175ac <__floatsidf>
   16068:	       addq.l #4,sp
   1606a:	       move.l d0,16(sp)
   1606e:	       move.l d1,20(sp)
   16072:	       move.l 16(sp),24(sp)
   16078:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   1607e:	       move.l 36(sp),-(sp)
   16082:	       move.l 40(sp),-(sp)
   16086:	       jsr 17b6e <__mulsi3>
   1608c:	       addq.l #8,sp
   1608e:	       move.l d0,d2
   16090:	       move.l 32(sp),-(sp)
   16094:	       move.l 36(sp),-(sp)
   16098:	       jsr 17b6e <__mulsi3>
   1609e:	       addq.l #8,sp
   160a0:	       add.l d2,d0
   160a2:	       move.l d0,-(sp)
   160a4:	       jsr 175ac <__floatsidf>
   160aa:	       addq.l #4,sp
   160ac:	       move.l d1,-(sp)
   160ae:	       move.l d0,-(sp)
   160b0:	       move.l 36(sp),-(sp)
   160b4:	       move.l 36(sp),-(sp)
   160b8:	       jsr 17436 <__divdf3>
   160be:	       lea 16(sp),sp
   160c2:	       move.l d0,8(sp)
   160c6:	       move.l d1,12(sp)
   160ca:	       move.l 8(sp),24(sp)
   160d0:	       move.l 12(sp),28(sp)

	if (m < 0) {
   160d6:	       clr.l -(sp)
   160d8:	       clr.l -(sp)
   160da:	       move.l 36(sp),-(sp)
   160de:	       move.l 36(sp),-(sp)
   160e2:	       jsr 177c4 <__ltdf2>
   160e8:	       lea 16(sp),sp
   160ec:	       tst.l d0
   160ee:	   /-- bge.s 16104 <closestPointOnLine+0xf4>
		*closestX = x1;
   160f0:	   |   movea.l 44(sp),a0
   160f4:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   160f8:	   |   movea.l 48(sp),a0
   160fc:	   |   move.l 56(sp),(a0)
   16100:	/--|-- bra.w 161e6 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   16104:	|  \-> clr.l -(sp)
   16106:	|      move.l #1072693248,-(sp)
   1610c:	|      move.l 36(sp),-(sp)
   16110:	|      move.l 36(sp),-(sp)
   16114:	|      jsr 1770a <__gtdf2>
   1611a:	|      lea 16(sp),sp
   1611e:	|      tst.l d0
   16120:	|  /-- ble.s 16136 <closestPointOnLine+0x126>
		*closestX = x2;
   16122:	|  |   movea.l 44(sp),a0
   16126:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   1612a:	|  |   movea.l 48(sp),a0
   1612e:	|  |   move.l 64(sp),(a0)
   16132:	+--|-- bra.w 161e6 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   16136:	|  \-> move.l 52(sp),-(sp)
   1613a:	|      jsr 175ac <__floatsidf>
   16140:	|      addq.l #4,sp
   16142:	|      move.l d0,d2
   16144:	|      move.l d1,d3
   16146:	|      move.l 36(sp),-(sp)
   1614a:	|      jsr 175ac <__floatsidf>
   16150:	|      addq.l #4,sp
   16152:	|      move.l 28(sp),-(sp)
   16156:	|      move.l 28(sp),-(sp)
   1615a:	|      move.l d1,-(sp)
   1615c:	|      move.l d0,-(sp)
   1615e:	|      jsr 1763c <__muldf3>
   16164:	|      lea 16(sp),sp
   16168:	|      move.l d1,-(sp)
   1616a:	|      move.l d0,-(sp)
   1616c:	|      move.l d3,-(sp)
   1616e:	|      move.l d2,-(sp)
   16170:	|      jsr 173d4 <__adddf3>
   16176:	|      lea 16(sp),sp
   1617a:	|      move.l d1,-(sp)
   1617c:	|      move.l d0,-(sp)
   1617e:	|      jsr 17544 <__fixdfsi>
   16184:	|      addq.l #8,sp
   16186:	|      movea.l 44(sp),a0
   1618a:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   1618c:	|      move.l 56(sp),-(sp)
   16190:	|      jsr 175ac <__floatsidf>
   16196:	|      addq.l #4,sp
   16198:	|      move.l d0,d2
   1619a:	|      move.l d1,d3
   1619c:	|      move.l 32(sp),-(sp)
   161a0:	|      jsr 175ac <__floatsidf>
   161a6:	|      addq.l #4,sp
   161a8:	|      move.l 28(sp),-(sp)
   161ac:	|      move.l 28(sp),-(sp)
   161b0:	|      move.l d1,-(sp)
   161b2:	|      move.l d0,-(sp)
   161b4:	|      jsr 1763c <__muldf3>
   161ba:	|      lea 16(sp),sp
   161be:	|      move.l d1,-(sp)
   161c0:	|      move.l d0,-(sp)
   161c2:	|      move.l d3,-(sp)
   161c4:	|      move.l d2,-(sp)
   161c6:	|      jsr 173d4 <__adddf3>
   161cc:	|      lea 16(sp),sp
   161d0:	|      move.l d1,-(sp)
   161d2:	|      move.l d0,-(sp)
   161d4:	|      jsr 17544 <__fixdfsi>
   161da:	|      addq.l #8,sp
   161dc:	|      movea.l 48(sp),a0
   161e0:	|      move.l d0,(a0)
		return TRUE;
   161e2:	|      moveq #1,d0
   161e4:	|  /-- bra.s 161e8 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   161e6:	\--|-> clr.w d0
}
   161e8:	   \-> move.l (sp)+,d2
   161ea:	       move.l (sp)+,d3
   161ec:	       lea 32(sp),sp
   161f0:	       rts

000161f2 <drawFloor>:

void drawFloor() {
   161f2:	                lea -12(sp),sp
   161f6:	                move.l d3,-(sp)
   161f8:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   161fa:	                clr.l 16(sp)
   161fe:	   /----------- bra.w 16412 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   16202:	/--|----------> movea.l 1c9b2 <currentFloor>,a0
   16208:	|  |            move.l 12(a0),d1
   1620c:	|  |            move.l 16(sp),d0
   16210:	|  |            lsl.l #3,d0
   16212:	|  |            movea.l d1,a0
   16214:	|  |            adda.l d0,a0
   16216:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   1621a:	|  |            moveq #1,d0
   1621c:	|  |            cmp.l 8(sp),d0
   16220:	|  |  /-------- bge.w 1640e <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16224:	|  |  |         moveq #1,d0
   16226:	|  |  |         move.l d0,12(sp)
   1622a:	|  |  |     /-- bra.w 16324 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   1622e:	|  |  |  /--|-> movea.l 1c9b2 <currentFloor>,a0
   16234:	|  |  |  |  |   move.l 4(a0),d1
   16238:	|  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   1623e:	|  |  |  |  |   movea.l 12(a0),a0
   16242:	|  |  |  |  |   move.l 16(sp),d0
   16246:	|  |  |  |  |   lsl.l #3,d0
   16248:	|  |  |  |  |   adda.l d0,a0
   1624a:	|  |  |  |  |   movea.l 4(a0),a0
   1624e:	|  |  |  |  |   move.l 12(sp),d0
   16252:	|  |  |  |  |   add.l d0,d0
   16254:	|  |  |  |  |   add.l d0,d0
   16256:	|  |  |  |  |   adda.l d0,a0
   16258:	|  |  |  |  |   move.l (a0),d0
   1625a:	|  |  |  |  |   lsl.l #3,d0
   1625c:	|  |  |  |  |   movea.l d1,a0
   1625e:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16260:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16264:	|  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   1626a:	|  |  |  |  |   move.l 4(a0),d1
   1626e:	|  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   16274:	|  |  |  |  |   movea.l 12(a0),a0
   16278:	|  |  |  |  |   move.l 16(sp),d0
   1627c:	|  |  |  |  |   lsl.l #3,d0
   1627e:	|  |  |  |  |   adda.l d0,a0
   16280:	|  |  |  |  |   movea.l 4(a0),a0
   16284:	|  |  |  |  |   move.l 12(sp),d0
   16288:	|  |  |  |  |   add.l d0,d0
   1628a:	|  |  |  |  |   add.l d0,d0
   1628c:	|  |  |  |  |   adda.l d0,a0
   1628e:	|  |  |  |  |   move.l (a0),d0
   16290:	|  |  |  |  |   lsl.l #3,d0
   16292:	|  |  |  |  |   movea.l d1,a0
   16294:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16296:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16298:	|  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   1629e:	|  |  |  |  |   move.l 4(a0),d1
   162a2:	|  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   162a8:	|  |  |  |  |   movea.l 12(a0),a0
   162ac:	|  |  |  |  |   move.l 16(sp),d0
   162b0:	|  |  |  |  |   lsl.l #3,d0
   162b2:	|  |  |  |  |   adda.l d0,a0
   162b4:	|  |  |  |  |   movea.l 4(a0),a0
   162b8:	|  |  |  |  |   move.l 12(sp),d0
   162bc:	|  |  |  |  |   addi.l #1073741823,d0
   162c2:	|  |  |  |  |   add.l d0,d0
   162c4:	|  |  |  |  |   add.l d0,d0
   162c6:	|  |  |  |  |   adda.l d0,a0
   162c8:	|  |  |  |  |   move.l (a0),d0
   162ca:	|  |  |  |  |   lsl.l #3,d0
   162cc:	|  |  |  |  |   movea.l d1,a0
   162ce:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   162d0:	|  |  |  |  |   move.l 4(a0),d1
   162d4:	|  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   162da:	|  |  |  |  |   move.l 4(a0),d3
   162de:	|  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   162e4:	|  |  |  |  |   movea.l 12(a0),a0
   162e8:	|  |  |  |  |   move.l 16(sp),d0
   162ec:	|  |  |  |  |   lsl.l #3,d0
   162ee:	|  |  |  |  |   adda.l d0,a0
   162f0:	|  |  |  |  |   movea.l 4(a0),a0
   162f4:	|  |  |  |  |   move.l 12(sp),d0
   162f8:	|  |  |  |  |   addi.l #1073741823,d0
   162fe:	|  |  |  |  |   add.l d0,d0
   16300:	|  |  |  |  |   add.l d0,d0
   16302:	|  |  |  |  |   adda.l d0,a0
   16304:	|  |  |  |  |   move.l (a0),d0
   16306:	|  |  |  |  |   lsl.l #3,d0
   16308:	|  |  |  |  |   movea.l d3,a0
   1630a:	|  |  |  |  |   adda.l d0,a0
   1630c:	|  |  |  |  |   move.l (a0),d0
   1630e:	|  |  |  |  |   move.l d2,-(sp)
   16310:	|  |  |  |  |   move.l a1,-(sp)
   16312:	|  |  |  |  |   move.l d1,-(sp)
   16314:	|  |  |  |  |   move.l d0,-(sp)
   16316:	|  |  |  |  |   jsr 3f1c <drawLine>
   1631c:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   16320:	|  |  |  |  |   addq.l #1,12(sp)
   16324:	|  |  |  |  \-> move.l 12(sp),d0
   16328:	|  |  |  |      cmp.l 8(sp),d0
   1632c:	|  |  |  \----- blt.w 1622e <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   16330:	|  |  |         movea.l 1c9b2 <currentFloor>,a0
   16336:	|  |  |         move.l 4(a0),d1
   1633a:	|  |  |         movea.l 1c9b2 <currentFloor>,a0
   16340:	|  |  |         movea.l 12(a0),a0
   16344:	|  |  |         move.l 16(sp),d0
   16348:	|  |  |         lsl.l #3,d0
   1634a:	|  |  |         adda.l d0,a0
   1634c:	|  |  |         movea.l 4(a0),a0
   16350:	|  |  |         move.l 8(sp),d0
   16354:	|  |  |         addi.l #1073741823,d0
   1635a:	|  |  |         add.l d0,d0
   1635c:	|  |  |         add.l d0,d0
   1635e:	|  |  |         adda.l d0,a0
   16360:	|  |  |         move.l (a0),d0
   16362:	|  |  |         lsl.l #3,d0
   16364:	|  |  |         movea.l d1,a0
   16366:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16368:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   1636c:	|  |  |         movea.l 1c9b2 <currentFloor>,a0
   16372:	|  |  |         move.l 4(a0),d1
   16376:	|  |  |         movea.l 1c9b2 <currentFloor>,a0
   1637c:	|  |  |         movea.l 12(a0),a0
   16380:	|  |  |         move.l 16(sp),d0
   16384:	|  |  |         lsl.l #3,d0
   16386:	|  |  |         adda.l d0,a0
   16388:	|  |  |         movea.l 4(a0),a0
   1638c:	|  |  |         move.l 8(sp),d0
   16390:	|  |  |         addi.l #1073741823,d0
   16396:	|  |  |         add.l d0,d0
   16398:	|  |  |         add.l d0,d0
   1639a:	|  |  |         adda.l d0,a0
   1639c:	|  |  |         move.l (a0),d0
   1639e:	|  |  |         lsl.l #3,d0
   163a0:	|  |  |         movea.l d1,a0
   163a2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   163a4:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   163a6:	|  |  |         movea.l 1c9b2 <currentFloor>,a0
   163ac:	|  |  |         move.l 4(a0),d1
   163b0:	|  |  |         movea.l 1c9b2 <currentFloor>,a0
   163b6:	|  |  |         movea.l 12(a0),a0
   163ba:	|  |  |         move.l 16(sp),d0
   163be:	|  |  |         lsl.l #3,d0
   163c0:	|  |  |         adda.l d0,a0
   163c2:	|  |  |         movea.l 4(a0),a0
   163c6:	|  |  |         move.l (a0),d0
   163c8:	|  |  |         lsl.l #3,d0
   163ca:	|  |  |         movea.l d1,a0
   163cc:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   163ce:	|  |  |         move.l 4(a0),d1
   163d2:	|  |  |         movea.l 1c9b2 <currentFloor>,a0
   163d8:	|  |  |         move.l 4(a0),d3
   163dc:	|  |  |         movea.l 1c9b2 <currentFloor>,a0
   163e2:	|  |  |         movea.l 12(a0),a0
   163e6:	|  |  |         move.l 16(sp),d0
   163ea:	|  |  |         lsl.l #3,d0
   163ec:	|  |  |         adda.l d0,a0
   163ee:	|  |  |         movea.l 4(a0),a0
   163f2:	|  |  |         move.l (a0),d0
   163f4:	|  |  |         lsl.l #3,d0
   163f6:	|  |  |         movea.l d3,a0
   163f8:	|  |  |         adda.l d0,a0
   163fa:	|  |  |         move.l (a0),d0
   163fc:	|  |  |         move.l d2,-(sp)
   163fe:	|  |  |         move.l a1,-(sp)
   16400:	|  |  |         move.l d1,-(sp)
   16402:	|  |  |         move.l d0,-(sp)
   16404:	|  |  |         jsr 3f1c <drawLine>
   1640a:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1640e:	|  |  \-------> addq.l #1,16(sp)
   16412:	|  \----------> movea.l 1c9b2 <currentFloor>,a0
   16418:	|               move.l 8(a0),d0
   1641c:	|               cmp.l 16(sp),d0
   16420:	\-------------- bgt.w 16202 <drawFloor+0x10>
        }
    }
}
   16424:	                nop
   16426:	                nop
   16428:	                move.l (sp)+,d2
   1642a:	                move.l (sp)+,d3
   1642c:	                lea 12(sp),sp
   16430:	                rts

00016432 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   16432:	                      lea -12(sp),sp
    int sharedVertices = 0;
   16436:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   1643a:	                      clr.l 4(sp)
   1643e:	   /----------------- bra.w 164d0 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   16442:	/--|----------------> clr.l (sp)
   16444:	|  |     /----------- bra.s 164c0 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   16446:	|  |  /--|----------> movea.l 16(sp),a0
   1644a:	|  |  |  |            move.l 4(a0),d1
   1644e:	|  |  |  |            move.l 4(sp),d0
   16452:	|  |  |  |            add.l d0,d0
   16454:	|  |  |  |            add.l d0,d0
   16456:	|  |  |  |            movea.l d1,a0
   16458:	|  |  |  |            adda.l d0,a0
   1645a:	|  |  |  |            move.l (a0),d1
   1645c:	|  |  |  |            movea.l 20(sp),a0
   16460:	|  |  |  |            movea.l 4(a0),a0
   16464:	|  |  |  |            move.l (sp),d0
   16466:	|  |  |  |            add.l d0,d0
   16468:	|  |  |  |            add.l d0,d0
   1646a:	|  |  |  |            adda.l d0,a0
   1646c:	|  |  |  |            move.l (a0),d0
   1646e:	|  |  |  |            cmp.l d1,d0
   16470:	|  |  |  |  /-------- bne.s 164be <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16472:	|  |  |  |  |         move.l 8(sp),d0
   16476:	|  |  |  |  |         move.l d0,d1
   16478:	|  |  |  |  |         addq.l #1,d1
   1647a:	|  |  |  |  |         move.l d1,8(sp)
   1647e:	|  |  |  |  |         tst.l d0
   16480:	|  |  |  |  |     /-- beq.s 164a2 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16482:	|  |  |  |  |     |   movea.l 16(sp),a0
   16486:	|  |  |  |  |     |   move.l 4(a0),d1
   1648a:	|  |  |  |  |     |   move.l 4(sp),d0
   1648e:	|  |  |  |  |     |   add.l d0,d0
   16490:	|  |  |  |  |     |   add.l d0,d0
   16492:	|  |  |  |  |     |   movea.l d1,a0
   16494:	|  |  |  |  |     |   adda.l d0,a0
   16496:	|  |  |  |  |     |   move.l (a0),d0
   16498:	|  |  |  |  |     |   movea.l 28(sp),a0
   1649c:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   1649e:	|  |  |  |  |     |   moveq #1,d0
   164a0:	|  |  |  |  |  /--|-- bra.s 164e0 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   164a2:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   164a6:	|  |  |  |  |  |      move.l 4(a0),d1
   164aa:	|  |  |  |  |  |      move.l 4(sp),d0
   164ae:	|  |  |  |  |  |      add.l d0,d0
   164b0:	|  |  |  |  |  |      add.l d0,d0
   164b2:	|  |  |  |  |  |      movea.l d1,a0
   164b4:	|  |  |  |  |  |      adda.l d0,a0
   164b6:	|  |  |  |  |  |      move.l (a0),d0
   164b8:	|  |  |  |  |  |      movea.l 24(sp),a0
   164bc:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   164be:	|  |  |  |  \--|----> addq.l #1,(sp)
   164c0:	|  |  |  \-----|----> movea.l 20(sp),a0
   164c4:	|  |  |        |      move.l (a0),d0
   164c6:	|  |  |        |      cmp.l (sp),d0
   164c8:	|  |  \--------|----- bgt.w 16446 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   164cc:	|  |           |      addq.l #1,4(sp)
   164d0:	|  \-----------|----> movea.l 16(sp),a0
   164d4:	|              |      move.l (a0),d0
   164d6:	|              |      cmp.l 4(sp),d0
   164da:	\--------------|----- bgt.w 16442 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   164de:	               |      clr.w d0
}
   164e0:	               \----> lea 12(sp),sp
   164e4:	                      rts

000164e6 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   164e6:	movea.l 1c9b2 <currentFloor>,a0
   164ec:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   164f0:	movea.l 1c9b2 <currentFloor>,a0
   164f6:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   164fa:	movea.l 1c9b2 <currentFloor>,a0
   16500:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16504:	movea.l 1c9b2 <currentFloor>,a0
   1650a:	clr.l 16(a0)
}
   1650e:	nop
   16510:	rts

00016512 <inFloor>:

int inFloor (int x, int y) {
   16512:	          subq.l #8,sp
	int i, r = -1;
   16514:	          moveq #-1,d0
   16516:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16518:	          clr.l 4(sp)
   1651c:	   /----- bra.s 16550 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   1651e:	/--|----> movea.l 1c9b2 <currentFloor>,a0
   16524:	|  |      move.l 12(a0),d1
   16528:	|  |      move.l 4(sp),d0
   1652c:	|  |      lsl.l #3,d0
   1652e:	|  |      add.l d1,d0
   16530:	|  |      move.l 16(sp),-(sp)
   16534:	|  |      move.l 16(sp),-(sp)
   16538:	|  |      move.l d0,-(sp)
   1653a:	|  |      jsr 1671c <pointInFloorPolygon>
   16540:	|  |      lea 12(sp),sp
   16544:	|  |      tst.w d0
   16546:	|  |  /-- beq.s 1654c <inFloor+0x3a>
			r = i;
   16548:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1654c:	|  |  \-> addq.l #1,4(sp)
   16550:	|  \----> movea.l 1c9b2 <currentFloor>,a0
   16556:	|         move.l 8(a0),d0
   1655a:	|         cmp.l 4(sp),d0
   1655e:	\-------- bgt.s 1651e <inFloor+0xc>

	return r;
   16560:	          move.l (sp),d0
}
   16562:	          addq.l #8,sp
   16564:	          rts

00016566 <initFloor>:

BOOL initFloor () {
   16566:	       lea -12(sp),sp
   1656a:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   1656c:	       moveq #20,d0
   1656e:	       move.l d0,12(sp)
   16572:	       clr.l 8(sp)
   16576:	       move.l 1c896 <SysBase>,d0
   1657c:	       movea.l d0,a6
   1657e:	       move.l 12(sp),d0
   16582:	       move.l 8(sp),d1
   16586:	       jsr -684(a6)
   1658a:	       move.l d0,4(sp)
   1658e:	       move.l 4(sp),d0
   16592:	       move.l d0,1c9b2 <currentFloor>

    if(currentFloor == 0) {
   16598:	       move.l 1c9b2 <currentFloor>,d0
   1659e:	/----- bne.s 165b2 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   165a0:	|      pea 19fe4 <graphics.c.1c13408a+0x333>
   165a6:	|      jsr 171b0 <KPrintF>
   165ac:	|      addq.l #4,sp
        return FALSE;
   165ae:	|      clr.w d0
   165b0:	|  /-- bra.s 165ba <initFloor+0x54>
    }

	noFloor ();
   165b2:	\--|-> jsr 164e6 <noFloor>
	return TRUE;
   165b8:	   |   moveq #1,d0
}
   165ba:	   \-> movea.l (sp)+,a6
   165bc:	       lea 12(sp),sp
   165c0:	       rts

000165c2 <killFloor>:

void killFloor () {
   165c2:	       lea -24(sp),sp
   165c6:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   165c8:	       clr.l 24(sp)
   165cc:	   /-- bra.s 16626 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   165ce:	/--|-> movea.l 1c9b2 <currentFloor>,a0
   165d4:	|  |   move.l 12(a0),d1
   165d8:	|  |   move.l 24(sp),d0
   165dc:	|  |   lsl.l #3,d0
   165de:	|  |   movea.l d1,a0
   165e0:	|  |   adda.l d0,a0
   165e2:	|  |   move.l 4(a0),8(sp)
   165e8:	|  |   move.l 1c896 <SysBase>,d0
   165ee:	|  |   movea.l d0,a6
   165f0:	|  |   movea.l 8(sp),a1
   165f4:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   165f8:	|  |   movea.l 1c9b2 <currentFloor>,a0
   165fe:	|  |   move.l 16(a0),d1
   16602:	|  |   move.l 24(sp),d0
   16606:	|  |   add.l d0,d0
   16608:	|  |   add.l d0,d0
   1660a:	|  |   movea.l d1,a0
   1660c:	|  |   adda.l d0,a0
   1660e:	|  |   move.l (a0),4(sp)
   16612:	|  |   move.l 1c896 <SysBase>,d0
   16618:	|  |   movea.l d0,a6
   1661a:	|  |   movea.l 4(sp),a1
   1661e:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16622:	|  |   addq.l #1,24(sp)
   16626:	|  \-> movea.l 1c9b2 <currentFloor>,a0
   1662c:	|      move.l 8(a0),d0
   16630:	|      cmp.l 24(sp),d0
   16634:	\----- bgt.s 165ce <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16636:	       movea.l 1c9b2 <currentFloor>,a0
   1663c:	       move.l 12(a0),20(sp)
   16642:	       move.l 1c896 <SysBase>,d0
   16648:	       movea.l d0,a6
   1664a:	       movea.l 20(sp),a1
   1664e:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16652:	       movea.l 1c9b2 <currentFloor>,a0
   16658:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   1665c:	       movea.l 1c9b2 <currentFloor>,a0
   16662:	       move.l 4(a0),16(sp)
   16668:	       move.l 1c896 <SysBase>,d0
   1666e:	       movea.l d0,a6
   16670:	       movea.l 16(sp),a1
   16674:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16678:	       movea.l 1c9b2 <currentFloor>,a0
   1667e:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16682:	       movea.l 1c9b2 <currentFloor>,a0
   16688:	       move.l 16(a0),12(sp)
   1668e:	       move.l 1c896 <SysBase>,d0
   16694:	       movea.l d0,a6
   16696:	       movea.l 12(sp),a1
   1669a:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   1669e:	       movea.l 1c9b2 <currentFloor>,a0
   166a4:	       clr.l 16(a0)
}
   166a8:	       nop
   166aa:	       movea.l (sp)+,a6
   166ac:	       lea 24(sp),sp
   166b0:	       rts

000166b2 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   166b2:	                   lea -12(sp),sp
	int sharedVertices = 0;
   166b6:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   166ba:	                   clr.l 4(sp)
   166be:	   /-------------- bra.s 1670a <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   166c0:	/--|-------------> clr.l (sp)
   166c2:	|  |     /-------- bra.s 166fe <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   166c4:	|  |  /--|-------> move.l 20(sp),d1
   166c8:	|  |  |  |         move.l 4(sp),d0
   166cc:	|  |  |  |         add.l d0,d0
   166ce:	|  |  |  |         add.l d0,d0
   166d0:	|  |  |  |         movea.l d1,a0
   166d2:	|  |  |  |         adda.l d0,a0
   166d4:	|  |  |  |         move.l (a0),d1
   166d6:	|  |  |  |         movea.l 28(sp),a0
   166da:	|  |  |  |         move.l (sp),d0
   166dc:	|  |  |  |         add.l d0,d0
   166de:	|  |  |  |         add.l d0,d0
   166e0:	|  |  |  |         adda.l d0,a0
   166e2:	|  |  |  |         move.l (a0),d0
   166e4:	|  |  |  |         cmp.l d1,d0
   166e6:	|  |  |  |     /-- bne.s 166fc <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   166e8:	|  |  |  |     |   move.l 8(sp),d0
   166ec:	|  |  |  |     |   move.l d0,d1
   166ee:	|  |  |  |     |   addq.l #1,d1
   166f0:	|  |  |  |     |   move.l d1,8(sp)
   166f4:	|  |  |  |     |   tst.l d0
   166f6:	|  |  |  |     +-- beq.s 166fc <polysShareSide+0x4a>
   166f8:	|  |  |  |     |   moveq #1,d0
   166fa:	|  |  |  |  /--|-- bra.s 16716 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   166fc:	|  |  |  |  |  \-> addq.l #1,(sp)
   166fe:	|  |  |  \--|----> move.l 24(sp),d0
   16702:	|  |  |     |      cmp.l (sp),d0
   16704:	|  |  \-----|----- bgt.s 166c4 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16706:	|  |        |      addq.l #1,4(sp)
   1670a:	|  \--------|----> move.l 16(sp),d0
   1670e:	|           |      cmp.l 4(sp),d0
   16712:	\-----------|----- bgt.s 166c0 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16714:	            |      clr.w d0
}
   16716:	            \----> lea 12(sp),sp
   1671a:	                   rts

0001671c <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   1671c:	             lea -28(sp),sp
   16720:	             move.l d3,-(sp)
   16722:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16724:	             clr.l 32(sp)
   16728:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   1672c:	             movea.l 40(sp),a0
   16730:	             move.l (a0),d0
   16732:	             move.l d0,d1
   16734:	             subq.l #1,d1
   16736:	             move.l d1,28(sp)
   1673a:	   /-------- bra.w 16934 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   1673e:	/--|-------> movea.l 1c9b2 <currentFloor>,a0
   16744:	|  |         move.l 4(a0),d1
   16748:	|  |         movea.l 40(sp),a0
   1674c:	|  |         movea.l 4(a0),a0
   16750:	|  |         move.l 32(sp),d0
   16754:	|  |         add.l d0,d0
   16756:	|  |         add.l d0,d0
   16758:	|  |         adda.l d0,a0
   1675a:	|  |         move.l (a0),d0
   1675c:	|  |         lsl.l #3,d0
   1675e:	|  |         movea.l d1,a0
   16760:	|  |         adda.l d0,a0
   16762:	|  |         move.l (a0),d0
   16764:	|  |         move.l d0,-(sp)
   16766:	|  |         jsr 175ec <__floatsisf>
   1676c:	|  |         addq.l #4,sp
   1676e:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16772:	|  |         movea.l 1c9b2 <currentFloor>,a0
   16778:	|  |         move.l 4(a0),d1
   1677c:	|  |         movea.l 40(sp),a0
   16780:	|  |         movea.l 4(a0),a0
   16784:	|  |         move.l 32(sp),d0
   16788:	|  |         add.l d0,d0
   1678a:	|  |         add.l d0,d0
   1678c:	|  |         adda.l d0,a0
   1678e:	|  |         move.l (a0),d0
   16790:	|  |         lsl.l #3,d0
   16792:	|  |         movea.l d1,a0
   16794:	|  |         adda.l d0,a0
   16796:	|  |         move.l 4(a0),d0
   1679a:	|  |         move.l d0,-(sp)
   1679c:	|  |         jsr 175ec <__floatsisf>
   167a2:	|  |         addq.l #4,sp
   167a4:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   167a8:	|  |         movea.l 1c9b2 <currentFloor>,a0
   167ae:	|  |         move.l 4(a0),d1
   167b2:	|  |         movea.l 40(sp),a0
   167b6:	|  |         movea.l 4(a0),a0
   167ba:	|  |         move.l 28(sp),d0
   167be:	|  |         add.l d0,d0
   167c0:	|  |         add.l d0,d0
   167c2:	|  |         adda.l d0,a0
   167c4:	|  |         move.l (a0),d0
   167c6:	|  |         lsl.l #3,d0
   167c8:	|  |         movea.l d1,a0
   167ca:	|  |         adda.l d0,a0
   167cc:	|  |         move.l (a0),d0
   167ce:	|  |         move.l d0,-(sp)
   167d0:	|  |         jsr 175ec <__floatsisf>
   167d6:	|  |         addq.l #4,sp
   167d8:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   167dc:	|  |         movea.l 1c9b2 <currentFloor>,a0
   167e2:	|  |         move.l 4(a0),d1
   167e6:	|  |         movea.l 40(sp),a0
   167ea:	|  |         movea.l 4(a0),a0
   167ee:	|  |         move.l 28(sp),d0
   167f2:	|  |         add.l d0,d0
   167f4:	|  |         add.l d0,d0
   167f6:	|  |         adda.l d0,a0
   167f8:	|  |         move.l (a0),d0
   167fa:	|  |         lsl.l #3,d0
   167fc:	|  |         movea.l d1,a0
   167fe:	|  |         adda.l d0,a0
   16800:	|  |         move.l 4(a0),d0
   16804:	|  |         move.l d0,-(sp)
   16806:	|  |         jsr 175ec <__floatsisf>
   1680c:	|  |         addq.l #4,sp
   1680e:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16812:	|  |         move.l 48(sp),-(sp)
   16816:	|  |         jsr 175ec <__floatsisf>
   1681c:	|  |         addq.l #4,sp
   1681e:	|  |         move.l d0,-(sp)
   16820:	|  |         move.l 20(sp),-(sp)
   16824:	|  |         jsr 1778e <__lesf2>
   1682a:	|  |         addq.l #8,sp
   1682c:	|  |         tst.l d0
   1682e:	|  |     /-- bgt.s 1684e <pointInFloorPolygon+0x132>
   16830:	|  |     |   move.l 48(sp),-(sp)
   16834:	|  |     |   jsr 175ec <__floatsisf>
   1683a:	|  |     |   addq.l #4,sp
   1683c:	|  |     |   move.l d0,-(sp)
   1683e:	|  |     |   move.l 12(sp),-(sp)
   16842:	|  |     |   jsr 17758 <__gtsf2>
   16848:	|  |     |   addq.l #8,sp
   1684a:	|  |     |   tst.l d0
   1684c:	|  |  /--|-- bgt.s 1688e <pointInFloorPolygon+0x172>
   1684e:	|  |  |  \-> move.l 48(sp),-(sp)
   16852:	|  |  |      jsr 175ec <__floatsisf>
   16858:	|  |  |      addq.l #4,sp
   1685a:	|  |  |      move.l d0,-(sp)
   1685c:	|  |  |      move.l 12(sp),-(sp)
   16860:	|  |  |      jsr 1778e <__lesf2>
   16866:	|  |  |      addq.l #8,sp
   16868:	|  |  |      tst.l d0
   1686a:	|  |  |  /-- bgt.w 16924 <pointInFloorPolygon+0x208>
   1686e:	|  |  |  |   move.l 48(sp),-(sp)
   16872:	|  |  |  |   jsr 175ec <__floatsisf>
   16878:	|  |  |  |   addq.l #4,sp
   1687a:	|  |  |  |   move.l d0,-(sp)
   1687c:	|  |  |  |   move.l 20(sp),-(sp)
   16880:	|  |  |  |   jsr 17758 <__gtsf2>
   16886:	|  |  |  |   addq.l #8,sp
   16888:	|  |  |  |   tst.l d0
   1688a:	|  |  |  +-- ble.w 16924 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   1688e:	|  |  \--|-> move.l 44(sp),-(sp)
   16892:	|  |     |   jsr 175ec <__floatsisf>
   16898:	|  |     |   addq.l #4,sp
   1689a:	|  |     |   move.l d0,d3
   1689c:	|  |     |   move.l 20(sp),-(sp)
   168a0:	|  |     |   move.l 16(sp),-(sp)
   168a4:	|  |     |   jsr 178e0 <__subsf3>
   168aa:	|  |     |   addq.l #8,sp
   168ac:	|  |     |   move.l d0,d2
   168ae:	|  |     |   move.l 48(sp),-(sp)
   168b2:	|  |     |   jsr 175ec <__floatsisf>
   168b8:	|  |     |   addq.l #4,sp
   168ba:	|  |     |   move.l 16(sp),-(sp)
   168be:	|  |     |   move.l d0,-(sp)
   168c0:	|  |     |   jsr 178e0 <__subsf3>
   168c6:	|  |     |   addq.l #8,sp
   168c8:	|  |     |   move.l d0,-(sp)
   168ca:	|  |     |   move.l d2,-(sp)
   168cc:	|  |     |   jsr 1769e <__mulsf3>
   168d2:	|  |     |   addq.l #8,sp
   168d4:	|  |     |   move.l d0,d2
   168d6:	|  |     |   move.l 16(sp),-(sp)
   168da:	|  |     |   move.l 12(sp),-(sp)
   168de:	|  |     |   jsr 178e0 <__subsf3>
   168e4:	|  |     |   addq.l #8,sp
   168e6:	|  |     |   move.l d0,-(sp)
   168e8:	|  |     |   move.l d2,-(sp)
   168ea:	|  |     |   jsr 17498 <__divsf3>
   168f0:	|  |     |   addq.l #8,sp
   168f2:	|  |     |   move.l 20(sp),-(sp)
   168f6:	|  |     |   move.l d0,-(sp)
   168f8:	|  |     |   jsr 1739e <__addsf3>
   168fe:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16900:	|  |     |   move.l d0,-(sp)
   16902:	|  |     |   move.l d3,-(sp)
   16904:	|  |     |   jsr 17812 <__ltsf2>
   1690a:	|  |     |   addq.l #8,sp
   1690c:	|  |     |   tst.l d0
   1690e:	|  |     +-- bge.s 16924 <pointInFloorPolygon+0x208>

			c = !c;
   16910:	|  |     |   tst.l 24(sp)
   16914:	|  |     |   seq d0
   16916:	|  |     |   neg.b d0
   16918:	|  |     |   move.b d0,d0
   1691a:	|  |     |   andi.l #255,d0
   16920:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16924:	|  |     \-> move.l 32(sp),d0
   16928:	|  |         move.l d0,d1
   1692a:	|  |         addq.l #1,d1
   1692c:	|  |         move.l d1,32(sp)
   16930:	|  |         move.l d0,28(sp)
   16934:	|  \-------> movea.l 40(sp),a0
   16938:	|            move.l (a0),d0
   1693a:	|            cmp.l 32(sp),d0
   1693e:	\----------- bgt.w 1673e <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16942:	             tst.l 24(sp)
   16946:	             sne d0
   16948:	             neg.b d0
   1694a:	             move.b d0,d0
   1694c:	             andi.w #255,d0
}
   16950:	             move.l (sp)+,d2
   16952:	             move.l (sp)+,d3
   16954:	             lea 28(sp),sp
   16958:	             rts

0001695a <setFloor>:

BOOL setFloor (int fileNum) {
   1695a:	                               lea -132(sp),sp
   1695e:	                               move.l a6,-(sp)
   16960:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16962:	                               jsr 165c2 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16968:	                               move.l 144(sp),-(sp)
   1696c:	                               jsr 6e2a <openFileFromNum>
   16972:	                               addq.l #4,sp
   16974:	                               tst.l d0
   16976:	                           /-- bne.s 1697e <setFloor+0x24>
   16978:	                           |   clr.w d0
   1697a:	/--------------------------|-- bra.w 170ca <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   1697e:	|                          \-> movea.l 1c9b2 <currentFloor>,a0
   16984:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16988:	|                              move.l 1c87e <bigDataFile>,118(sp)
   16990:	|                              move.l 1c89e <DOSBase>,d0
   16996:	|                              movea.l d0,a6
   16998:	|                              move.l 118(sp),d1
   1699c:	|                              jsr -306(a6)
   169a0:	|                              move.l d0,114(sp)
   169a4:	|                              move.l 114(sp),d0
   169a8:	|                              movea.l 1c9b2 <currentFloor>,a0
   169ae:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   169b2:	|                              movea.l 1c9b2 <currentFloor>,a0
   169b8:	|                              move.l 8(a0),d0
   169bc:	|                              lsl.l #3,d0
   169be:	|                              move.l d0,110(sp)
   169c2:	|                              clr.l 106(sp)
   169c6:	|                              move.l 1c896 <SysBase>,d0
   169cc:	|                              movea.l d0,a6
   169ce:	|                              move.l 110(sp),d0
   169d2:	|                              move.l 106(sp),d1
   169d6:	|                              jsr -684(a6)
   169da:	|                              move.l d0,102(sp)
   169de:	|                              move.l 102(sp),d0
   169e2:	|                              movea.l 1c9b2 <currentFloor>,a0
   169e8:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   169ec:	|                              movea.l 1c9b2 <currentFloor>,a0
   169f2:	|                              move.l 12(a0),d0
   169f6:	|                          /-- bne.s 16a0c <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   169f8:	|                          |   pea 1a008 <graphics.c.1c13408a+0x357>
   169fe:	|                          |   jsr 171b0 <KPrintF>
   16a04:	|                          |   addq.l #4,sp
		return FALSE;
   16a06:	|                          |   clr.w d0
   16a08:	+--------------------------|-- bra.w 170ca <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a0c:	|                          \-> clr.l 136(sp)
   16a10:	|                    /-------- bra.w 16b28 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16a14:	|                 /--|-------> move.l 1c87e <bigDataFile>,26(sp)
   16a1c:	|                 |  |         move.l 1c89e <DOSBase>,d0
   16a22:	|                 |  |         movea.l d0,a6
   16a24:	|                 |  |         move.l 26(sp),d1
   16a28:	|                 |  |         jsr -306(a6)
   16a2c:	|                 |  |         move.l d0,22(sp)
   16a30:	|                 |  |         move.l 22(sp),d1
   16a34:	|                 |  |         movea.l 1c9b2 <currentFloor>,a0
   16a3a:	|                 |  |         movea.l 12(a0),a0
   16a3e:	|                 |  |         move.l 136(sp),d0
   16a42:	|                 |  |         lsl.l #3,d0
   16a44:	|                 |  |         adda.l d0,a0
   16a46:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16a48:	|                 |  |         movea.l 1c9b2 <currentFloor>,a0
   16a4e:	|                 |  |         move.l 12(a0),d1
   16a52:	|                 |  |         move.l 136(sp),d0
   16a56:	|                 |  |         lsl.l #3,d0
   16a58:	|                 |  |         movea.l d1,a0
   16a5a:	|                 |  |         adda.l d0,a0
   16a5c:	|                 |  |         move.l (a0),d0
   16a5e:	|                 |  |         add.l d0,d0
   16a60:	|                 |  |         add.l d0,d0
   16a62:	|                 |  |         move.l d0,18(sp)
   16a66:	|                 |  |         clr.l 14(sp)
   16a6a:	|                 |  |         move.l 1c896 <SysBase>,d0
   16a70:	|                 |  |         movea.l d0,a6
   16a72:	|                 |  |         move.l 18(sp),d0
   16a76:	|                 |  |         move.l 14(sp),d1
   16a7a:	|                 |  |         jsr -684(a6)
   16a7e:	|                 |  |         move.l d0,10(sp)
   16a82:	|                 |  |         move.l 10(sp),d1
   16a86:	|                 |  |         movea.l 1c9b2 <currentFloor>,a0
   16a8c:	|                 |  |         movea.l 12(a0),a0
   16a90:	|                 |  |         move.l 136(sp),d0
   16a94:	|                 |  |         lsl.l #3,d0
   16a96:	|                 |  |         adda.l d0,a0
   16a98:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16a9c:	|                 |  |         movea.l 1c9b2 <currentFloor>,a0
   16aa2:	|                 |  |         move.l 12(a0),d1
   16aa6:	|                 |  |         move.l 136(sp),d0
   16aaa:	|                 |  |         lsl.l #3,d0
   16aac:	|                 |  |         movea.l d1,a0
   16aae:	|                 |  |         adda.l d0,a0
   16ab0:	|                 |  |         move.l 4(a0),d0
   16ab4:	|                 |  |     /-- bne.s 16aca <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16ab6:	|                 |  |     |   pea 1a008 <graphics.c.1c13408a+0x357>
   16abc:	|                 |  |     |   jsr 171b0 <KPrintF>
   16ac2:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16ac4:	|                 |  |     |   clr.w d0
   16ac6:	+-----------------|--|-----|-- bra.w 170ca <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16aca:	|                 |  |     \-> clr.l 132(sp)
   16ace:	|                 |  |     /-- bra.s 16b08 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16ad0:	|                 |  |  /--|-> move.l 1c87e <bigDataFile>,d1
   16ad6:	|                 |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   16adc:	|                 |  |  |  |   movea.l 12(a0),a0
   16ae0:	|                 |  |  |  |   move.l 136(sp),d0
   16ae4:	|                 |  |  |  |   lsl.l #3,d0
   16ae6:	|                 |  |  |  |   adda.l d0,a0
   16ae8:	|                 |  |  |  |   movea.l 4(a0),a0
   16aec:	|                 |  |  |  |   move.l 132(sp),d0
   16af0:	|                 |  |  |  |   add.l d0,d0
   16af2:	|                 |  |  |  |   add.l d0,d0
   16af4:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16af8:	|                 |  |  |  |   move.l d1,-(sp)
   16afa:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16b00:	|                 |  |  |  |   addq.l #4,sp
   16b02:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16b04:	|                 |  |  |  |   addq.l #1,132(sp)
   16b08:	|                 |  |  |  \-> movea.l 1c9b2 <currentFloor>,a0
   16b0e:	|                 |  |  |      move.l 12(a0),d1
   16b12:	|                 |  |  |      move.l 136(sp),d0
   16b16:	|                 |  |  |      lsl.l #3,d0
   16b18:	|                 |  |  |      movea.l d1,a0
   16b1a:	|                 |  |  |      adda.l d0,a0
   16b1c:	|                 |  |  |      move.l (a0),d0
   16b1e:	|                 |  |  |      cmp.l 132(sp),d0
   16b22:	|                 |  |  \----- bgt.s 16ad0 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b24:	|                 |  |         addq.l #1,136(sp)
   16b28:	|                 |  \-------> movea.l 1c9b2 <currentFloor>,a0
   16b2e:	|                 |            move.l 8(a0),d0
   16b32:	|                 |            cmp.l 136(sp),d0
   16b36:	|                 \----------- bgt.w 16a14 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16b3a:	|                              move.l 1c87e <bigDataFile>,d0
   16b40:	|                              move.l d0,-(sp)
   16b42:	|                              jsr 6bc <get2bytes>
   16b48:	|                              addq.l #4,sp
   16b4a:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16b4e:	|                              move.l 136(sp),d0
   16b52:	|                              lsl.l #3,d0
   16b54:	|                              move.l d0,98(sp)
   16b58:	|                              clr.l 94(sp)
   16b5c:	|                              move.l 1c896 <SysBase>,d0
   16b62:	|                              movea.l d0,a6
   16b64:	|                              move.l 98(sp),d0
   16b68:	|                              move.l 94(sp),d1
   16b6c:	|                              jsr -684(a6)
   16b70:	|                              move.l d0,90(sp)
   16b74:	|                              move.l 90(sp),d0
   16b78:	|                              movea.l 1c9b2 <currentFloor>,a0
   16b7e:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16b82:	|                              movea.l 1c9b2 <currentFloor>,a0
   16b88:	|                              move.l 4(a0),d0
   16b8c:	|                          /-- bne.s 16ba2 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16b8e:	|                          |   pea 1a008 <graphics.c.1c13408a+0x357>
   16b94:	|                          |   jsr 171b0 <KPrintF>
   16b9a:	|                          |   addq.l #4,sp
		return FALSE;
   16b9c:	|                          |   clr.w d0
   16b9e:	+--------------------------|-- bra.w 170ca <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16ba2:	|                          \-> clr.l 132(sp)
   16ba6:	|                          /-- bra.s 16bfa <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16ba8:	|                       /--|-> move.l 1c87e <bigDataFile>,d1
   16bae:	|                       |  |   movea.l 1c9b2 <currentFloor>,a0
   16bb4:	|                       |  |   movea.l 4(a0),a0
   16bb8:	|                       |  |   move.l 132(sp),d0
   16bbc:	|                       |  |   lsl.l #3,d0
   16bbe:	|                       |  |   lea (0,a0,d0.l),a2
   16bc2:	|                       |  |   move.l d1,-(sp)
   16bc4:	|                       |  |   jsr 6bc <get2bytes>
   16bca:	|                       |  |   addq.l #4,sp
   16bcc:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16bce:	|                       |  |   move.l 1c87e <bigDataFile>,d1
   16bd4:	|                       |  |   movea.l 1c9b2 <currentFloor>,a0
   16bda:	|                       |  |   movea.l 4(a0),a0
   16bde:	|                       |  |   move.l 132(sp),d0
   16be2:	|                       |  |   lsl.l #3,d0
   16be4:	|                       |  |   lea (0,a0,d0.l),a2
   16be8:	|                       |  |   move.l d1,-(sp)
   16bea:	|                       |  |   jsr 6bc <get2bytes>
   16bf0:	|                       |  |   addq.l #4,sp
   16bf2:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16bf6:	|                       |  |   addq.l #1,132(sp)
   16bfa:	|                       |  \-> move.l 132(sp),d0
   16bfe:	|                       |      cmp.l 136(sp),d0
   16c02:	|                       \----- blt.s 16ba8 <setFloor+0x24e>
	}

	finishAccess ();
   16c04:	|                              jsr 6d22 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16c0a:	|                              movea.l 1c9b2 <currentFloor>,a0
   16c10:	|                              move.l 8(a0),d0
   16c14:	|                              add.l d0,d0
   16c16:	|                              add.l d0,d0
   16c18:	|                              move.l d0,86(sp)
   16c1c:	|                              clr.l 82(sp)
   16c20:	|                              move.l 1c896 <SysBase>,d0
   16c26:	|                              movea.l d0,a6
   16c28:	|                              move.l 86(sp),d0
   16c2c:	|                              move.l 82(sp),d1
   16c30:	|                              jsr -684(a6)
   16c34:	|                              move.l d0,78(sp)
   16c38:	|                              move.l 78(sp),d0
   16c3c:	|                              movea.l 1c9b2 <currentFloor>,a0
   16c42:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16c46:	|                              movea.l 1c9b2 <currentFloor>,a0
   16c4c:	|                              move.l 8(a0),d0
   16c50:	|                              add.l d0,d0
   16c52:	|                              add.l d0,d0
   16c54:	|                              move.l d0,74(sp)
   16c58:	|                              clr.l 70(sp)
   16c5c:	|                              move.l 1c896 <SysBase>,d0
   16c62:	|                              movea.l d0,a6
   16c64:	|                              move.l 74(sp),d0
   16c68:	|                              move.l 70(sp),d1
   16c6c:	|                              jsr -684(a6)
   16c70:	|                              move.l d0,66(sp)
   16c74:	|                              move.l 66(sp),d0
   16c78:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16c7c:	|                              movea.l 1c9b2 <currentFloor>,a0
   16c82:	|                              move.l 16(a0),d0
   16c86:	|                          /-- bne.s 16c9c <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16c88:	|                          |   pea 1a008 <graphics.c.1c13408a+0x357>
   16c8e:	|                          |   jsr 171b0 <KPrintF>
   16c94:	|                          |   addq.l #4,sp
		return FALSE;
   16c96:	|                          |   clr.w d0
   16c98:	+--------------------------|-- bra.w 170ca <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16c9c:	|                          \-> clr.l 136(sp)
   16ca0:	|                    /-------- bra.w 16dc4 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16ca4:	|                 /--|-------> movea.l 1c9b2 <currentFloor>,a0
   16caa:	|                 |  |         move.l 8(a0),d0
   16cae:	|                 |  |         add.l d0,d0
   16cb0:	|                 |  |         add.l d0,d0
   16cb2:	|                 |  |         move.l d0,50(sp)
   16cb6:	|                 |  |         clr.l 46(sp)
   16cba:	|                 |  |         move.l 1c896 <SysBase>,d0
   16cc0:	|                 |  |         movea.l d0,a6
   16cc2:	|                 |  |         move.l 50(sp),d0
   16cc6:	|                 |  |         move.l 46(sp),d1
   16cca:	|                 |  |         jsr -684(a6)
   16cce:	|                 |  |         move.l d0,42(sp)
   16cd2:	|                 |  |         move.l 42(sp),d0
   16cd6:	|                 |  |         movea.l 1c9b2 <currentFloor>,a0
   16cdc:	|                 |  |         movea.l 16(a0),a0
   16ce0:	|                 |  |         move.l 136(sp),d1
   16ce4:	|                 |  |         add.l d1,d1
   16ce6:	|                 |  |         add.l d1,d1
   16ce8:	|                 |  |         adda.l d1,a0
   16cea:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16cec:	|                 |  |         movea.l 1c9b2 <currentFloor>,a0
   16cf2:	|                 |  |         move.l 8(a0),d0
   16cf6:	|                 |  |         add.l d0,d0
   16cf8:	|                 |  |         add.l d0,d0
   16cfa:	|                 |  |         move.l d0,38(sp)
   16cfe:	|                 |  |         clr.l 34(sp)
   16d02:	|                 |  |         move.l 1c896 <SysBase>,d0
   16d08:	|                 |  |         movea.l d0,a6
   16d0a:	|                 |  |         move.l 38(sp),d0
   16d0e:	|                 |  |         move.l 34(sp),d1
   16d12:	|                 |  |         jsr -684(a6)
   16d16:	|                 |  |         move.l d0,30(sp)
   16d1a:	|                 |  |         move.l 30(sp),d1
   16d1e:	|                 |  |         move.l 136(sp),d0
   16d22:	|                 |  |         add.l d0,d0
   16d24:	|                 |  |         add.l d0,d0
   16d26:	|                 |  |         movea.l 62(sp),a0
   16d2a:	|                 |  |         adda.l d0,a0
   16d2c:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16d2e:	|                 |  |         movea.l 1c9b2 <currentFloor>,a0
   16d34:	|                 |  |         move.l 16(a0),d1
   16d38:	|                 |  |         move.l 136(sp),d0
   16d3c:	|                 |  |         add.l d0,d0
   16d3e:	|                 |  |         add.l d0,d0
   16d40:	|                 |  |         movea.l d1,a0
   16d42:	|                 |  |         adda.l d0,a0
   16d44:	|                 |  |         move.l (a0),d0
   16d46:	|                 |  |     /-- bne.s 16d5c <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16d48:	|                 |  |     |   pea 1a008 <graphics.c.1c13408a+0x357>
   16d4e:	|                 |  |     |   jsr 171b0 <KPrintF>
   16d54:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16d56:	|                 |  |     |   clr.w d0
   16d58:	+-----------------|--|-----|-- bra.w 170ca <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d5c:	|                 |  |     \-> clr.l 132(sp)
   16d60:	|                 |  |     /-- bra.s 16db0 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16d62:	|                 |  |  /--|-> movea.l 1c9b2 <currentFloor>,a0
   16d68:	|                 |  |  |  |   move.l 16(a0),d1
   16d6c:	|                 |  |  |  |   move.l 136(sp),d0
   16d70:	|                 |  |  |  |   add.l d0,d0
   16d72:	|                 |  |  |  |   add.l d0,d0
   16d74:	|                 |  |  |  |   movea.l d1,a0
   16d76:	|                 |  |  |  |   adda.l d0,a0
   16d78:	|                 |  |  |  |   move.l (a0),d1
   16d7a:	|                 |  |  |  |   move.l 132(sp),d0
   16d7e:	|                 |  |  |  |   add.l d0,d0
   16d80:	|                 |  |  |  |   add.l d0,d0
   16d82:	|                 |  |  |  |   movea.l d1,a0
   16d84:	|                 |  |  |  |   adda.l d0,a0
   16d86:	|                 |  |  |  |   moveq #-1,d1
   16d88:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16d8a:	|                 |  |  |  |   move.l 136(sp),d0
   16d8e:	|                 |  |  |  |   add.l d0,d0
   16d90:	|                 |  |  |  |   add.l d0,d0
   16d92:	|                 |  |  |  |   movea.l 62(sp),a0
   16d96:	|                 |  |  |  |   adda.l d0,a0
   16d98:	|                 |  |  |  |   move.l (a0),d1
   16d9a:	|                 |  |  |  |   move.l 132(sp),d0
   16d9e:	|                 |  |  |  |   add.l d0,d0
   16da0:	|                 |  |  |  |   add.l d0,d0
   16da2:	|                 |  |  |  |   movea.l d1,a0
   16da4:	|                 |  |  |  |   adda.l d0,a0
   16da6:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16dac:	|                 |  |  |  |   addq.l #1,132(sp)
   16db0:	|                 |  |  |  \-> movea.l 1c9b2 <currentFloor>,a0
   16db6:	|                 |  |  |      move.l 8(a0),d0
   16dba:	|                 |  |  |      cmp.l 132(sp),d0
   16dbe:	|                 |  |  \----- bgt.s 16d62 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16dc0:	|                 |  |         addq.l #1,136(sp)
   16dc4:	|                 |  \-------> movea.l 1c9b2 <currentFloor>,a0
   16dca:	|                 |            move.l 8(a0),d0
   16dce:	|                 |            cmp.l 136(sp),d0
   16dd2:	|                 \----------- bgt.w 16ca4 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16dd6:	|                              clr.l 136(sp)
   16dda:	|              /-------------- bra.w 16ee0 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16dde:	|           /--|-------------> clr.l 132(sp)
   16de2:	|           |  |     /-------- bra.w 16eca <setFloor+0x570>
			if (i != j) {
   16de6:	|           |  |  /--|-------> move.l 136(sp),d0
   16dea:	|           |  |  |  |         cmp.l 132(sp),d0
   16dee:	|           |  |  |  |     /-- beq.w 16e80 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16df2:	|           |  |  |  |     |   movea.l 1c9b2 <currentFloor>,a0
   16df8:	|           |  |  |  |     |   move.l 12(a0),d1
   16dfc:	|           |  |  |  |     |   move.l 132(sp),d0
   16e00:	|           |  |  |  |     |   lsl.l #3,d0
   16e02:	|           |  |  |  |     |   movea.l d1,a1
   16e04:	|           |  |  |  |     |   adda.l d0,a1
   16e06:	|           |  |  |  |     |   movea.l 1c9b2 <currentFloor>,a0
   16e0c:	|           |  |  |  |     |   move.l 12(a0),d1
   16e10:	|           |  |  |  |     |   move.l 136(sp),d0
   16e14:	|           |  |  |  |     |   lsl.l #3,d0
   16e16:	|           |  |  |  |     |   movea.l d1,a0
   16e18:	|           |  |  |  |     |   adda.l d0,a0
   16e1a:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16e1e:	|           |  |  |  |     |   move.l (a1),-(sp)
   16e20:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16e24:	|           |  |  |  |     |   move.l (a0),-(sp)
   16e26:	|           |  |  |  |     |   jsr 166b2 <polysShareSide>
   16e2c:	|           |  |  |  |     |   lea 16(sp),sp
   16e30:	|           |  |  |  |     |   tst.w d0
   16e32:	|           |  |  |  |  /--|-- beq.w 16ec6 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16e36:	|           |  |  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   16e3c:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16e40:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16e44:	|           |  |  |  |  |  |   add.l d0,d0
   16e46:	|           |  |  |  |  |  |   add.l d0,d0
   16e48:	|           |  |  |  |  |  |   movea.l d1,a0
   16e4a:	|           |  |  |  |  |  |   adda.l d0,a0
   16e4c:	|           |  |  |  |  |  |   move.l (a0),d1
   16e4e:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16e52:	|           |  |  |  |  |  |   add.l d0,d0
   16e54:	|           |  |  |  |  |  |   add.l d0,d0
   16e56:	|           |  |  |  |  |  |   movea.l d1,a0
   16e58:	|           |  |  |  |  |  |   adda.l d0,a0
   16e5a:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16e5e:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16e62:	|           |  |  |  |  |  |   add.l d0,d0
   16e64:	|           |  |  |  |  |  |   add.l d0,d0
   16e66:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16e6a:	|           |  |  |  |  |  |   adda.l d0,a0
   16e6c:	|           |  |  |  |  |  |   move.l (a0),d1
   16e6e:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16e72:	|           |  |  |  |  |  |   add.l d0,d0
   16e74:	|           |  |  |  |  |  |   add.l d0,d0
   16e76:	|           |  |  |  |  |  |   movea.l d1,a0
   16e78:	|           |  |  |  |  |  |   adda.l d0,a0
   16e7a:	|           |  |  |  |  |  |   moveq #1,d1
   16e7c:	|           |  |  |  |  |  |   move.l d1,(a0)
   16e7e:	|           |  |  |  |  +--|-- bra.s 16ec6 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16e80:	|           |  |  |  |  |  \-> movea.l 1c9b2 <currentFloor>,a0
   16e86:	|           |  |  |  |  |      move.l 16(a0),d1
   16e8a:	|           |  |  |  |  |      move.l 136(sp),d0
   16e8e:	|           |  |  |  |  |      add.l d0,d0
   16e90:	|           |  |  |  |  |      add.l d0,d0
   16e92:	|           |  |  |  |  |      movea.l d1,a0
   16e94:	|           |  |  |  |  |      adda.l d0,a0
   16e96:	|           |  |  |  |  |      move.l (a0),d1
   16e98:	|           |  |  |  |  |      move.l 132(sp),d0
   16e9c:	|           |  |  |  |  |      add.l d0,d0
   16e9e:	|           |  |  |  |  |      add.l d0,d0
   16ea0:	|           |  |  |  |  |      movea.l d1,a0
   16ea2:	|           |  |  |  |  |      adda.l d0,a0
   16ea4:	|           |  |  |  |  |      moveq #-2,d0
   16ea6:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16ea8:	|           |  |  |  |  |      move.l 136(sp),d0
   16eac:	|           |  |  |  |  |      add.l d0,d0
   16eae:	|           |  |  |  |  |      add.l d0,d0
   16eb0:	|           |  |  |  |  |      movea.l 62(sp),a0
   16eb4:	|           |  |  |  |  |      adda.l d0,a0
   16eb6:	|           |  |  |  |  |      move.l (a0),d1
   16eb8:	|           |  |  |  |  |      move.l 132(sp),d0
   16ebc:	|           |  |  |  |  |      add.l d0,d0
   16ebe:	|           |  |  |  |  |      add.l d0,d0
   16ec0:	|           |  |  |  |  |      movea.l d1,a0
   16ec2:	|           |  |  |  |  |      adda.l d0,a0
   16ec4:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ec6:	|           |  |  |  |  \----> addq.l #1,132(sp)
   16eca:	|           |  |  |  \-------> movea.l 1c9b2 <currentFloor>,a0
   16ed0:	|           |  |  |            move.l 8(a0),d0
   16ed4:	|           |  |  |            cmp.l 132(sp),d0
   16ed8:	|           |  |  \----------- bgt.w 16de6 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16edc:	|           |  |               addq.l #1,136(sp)
   16ee0:	|           |  \-------------> movea.l 1c9b2 <currentFloor>,a0
   16ee6:	|           |                  move.l 8(a0),d0
   16eea:	|           |                  cmp.l 136(sp),d0
   16eee:	|           \----------------- bgt.w 16dde <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16ef2:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16ef6:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16efa:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16efe:	|  |                           clr.l 136(sp)
   16f02:	|  |     /-------------------- bra.w 17058 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f06:	|  |  /--|-------------------> clr.l 132(sp)
   16f0a:	|  |  |  |     /-------------- bra.w 17042 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16f0e:	|  |  |  |  /--|-------------> movea.l 1c9b2 <currentFloor>,a0
   16f14:	|  |  |  |  |  |               move.l 16(a0),d1
   16f18:	|  |  |  |  |  |               move.l 136(sp),d0
   16f1c:	|  |  |  |  |  |               add.l d0,d0
   16f1e:	|  |  |  |  |  |               add.l d0,d0
   16f20:	|  |  |  |  |  |               movea.l d1,a0
   16f22:	|  |  |  |  |  |               adda.l d0,a0
   16f24:	|  |  |  |  |  |               move.l (a0),d1
   16f26:	|  |  |  |  |  |               move.l 132(sp),d0
   16f2a:	|  |  |  |  |  |               add.l d0,d0
   16f2c:	|  |  |  |  |  |               add.l d0,d0
   16f2e:	|  |  |  |  |  |               movea.l d1,a0
   16f30:	|  |  |  |  |  |               adda.l d0,a0
   16f32:	|  |  |  |  |  |               move.l (a0),d0
   16f34:	|  |  |  |  |  |               moveq #-1,d1
   16f36:	|  |  |  |  |  |               cmp.l d0,d1
   16f38:	|  |  |  |  |  |  /----------- bne.w 1703e <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16f3c:	|  |  |  |  |  |  |            clr.l 122(sp)
   16f40:	|  |  |  |  |  |  |     /----- bra.w 1702c <setFloor+0x6d2>
						if (d != i && d != j) {
   16f44:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   16f48:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16f4c:	|  |  |  |  |  |  |  |  |  /-- beq.w 17028 <setFloor+0x6ce>
   16f50:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16f54:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16f58:	|  |  |  |  |  |  |  |  |  +-- beq.w 17028 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16f5c:	|  |  |  |  |  |  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   16f62:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16f66:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16f6a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f6c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f6e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f70:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f72:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f74:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16f78:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f7a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f7c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f7e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f80:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16f82:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16f86:	|  |  |  |  |  |  |  |  |  +-- bne.w 17028 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16f8a:	|  |  |  |  |  |  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   16f90:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16f94:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16f98:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f9a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f9c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f9e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fa0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16fa2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16fa6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fa8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16faa:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16fac:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fae:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16fb0:	|  |  |  |  |  |  |  |  |  +-- bmi.s 17028 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16fb2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16fb6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fb8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fba:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16fbe:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fc0:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16fc2:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16fc6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fc8:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fca:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16fcc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fce:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16fd0:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16fd4:	|  |  |  |  |  |  |  |  |  +-- bgt.s 17028 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16fd6:	|  |  |  |  |  |  |  |  |  |   movea.l 1c9b2 <currentFloor>,a0
   16fdc:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16fe0:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16fe4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fe6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16fe8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16fea:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16fec:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16fee:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16ff2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ff4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ff6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ff8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ffa:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   16ffe:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17002:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17004:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17006:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1700a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1700c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1700e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17012:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17014:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17016:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17018:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1701a:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   1701e:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   17020:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   17022:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17028:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   1702c:	|  |  |  |  |  |  |  |  \----> movea.l 1c9b2 <currentFloor>,a0
   17032:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   17036:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   1703a:	|  |  |  |  |  |  |  \-------- bgt.w 16f44 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1703e:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   17042:	|  |  |  |  |  \-------------> movea.l 1c9b2 <currentFloor>,a0
   17048:	|  |  |  |  |                  move.l 8(a0),d0
   1704c:	|  |  |  |  |                  cmp.l 132(sp),d0
   17050:	|  |  |  |  \----------------- bgt.w 16f0e <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17054:	|  |  |  |                     addq.l #1,136(sp)
   17058:	|  |  |  \-------------------> movea.l 1c9b2 <currentFloor>,a0
   1705e:	|  |  |                        move.l 8(a0),d0
   17062:	|  |  |                        cmp.l 136(sp),d0
   17066:	|  |  \----------------------- bgt.w 16f06 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   1706a:	|  |                           tst.w 130(sp)
   1706e:	|  \-------------------------- bne.w 16ef6 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17072:	|                              clr.l 136(sp)
   17076:	|                          /-- bra.s 1709e <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   17078:	|                       /--|-> move.l 136(sp),d0
   1707c:	|                       |  |   add.l d0,d0
   1707e:	|                       |  |   add.l d0,d0
   17080:	|                       |  |   movea.l 62(sp),a0
   17084:	|                       |  |   adda.l d0,a0
   17086:	|                       |  |   move.l (a0),54(sp)
   1708a:	|                       |  |   move.l 1c896 <SysBase>,d0
   17090:	|                       |  |   movea.l d0,a6
   17092:	|                       |  |   movea.l 54(sp),a1
   17096:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1709a:	|                       |  |   addq.l #1,136(sp)
   1709e:	|                       |  \-> movea.l 1c9b2 <currentFloor>,a0
   170a4:	|                       |      move.l 8(a0),d0
   170a8:	|                       |      cmp.l 136(sp),d0
   170ac:	|                       \----- bgt.s 17078 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   170ae:	|                              move.l 62(sp),58(sp)
   170b4:	|                              move.l 1c896 <SysBase>,d0
   170ba:	|                              movea.l d0,a6
   170bc:	|                              movea.l 58(sp),a1
   170c0:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   170c4:	|                              clr.l 62(sp)

	return TRUE;
   170c8:	|                              moveq #1,d0
}
   170ca:	\----------------------------> movea.l (sp)+,a2
   170cc:	                               movea.l (sp)+,a6
   170ce:	                               lea 132(sp),sp
   170d2:	                               rts

000170d4 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   170d4:	jsr 165c2 <killFloor>
	noFloor ();
   170da:	jsr 164e6 <noFloor>
   170e0:	nop
   170e2:	rts

000170e4 <WaitVbl>:
void WaitVbl() {
   170e4:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   170e6:	   /-> movea.l #14675972,a0
   170ec:	   |   move.l (a0),d0
   170ee:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   170f0:	   |   move.l (sp),d0
   170f2:	   |   andi.l #130816,d0
   170f8:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   170fa:	   |   move.l (sp),d0
   170fc:	   |   cmpi.l #76800,d0
   17102:	   \-- beq.s 170e6 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17104:	/----> movea.l #14675972,a0
   1710a:	|      move.l (a0),d0
   1710c:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   17110:	|      move.l 4(sp),d0
   17114:	|      andi.l #130816,d0
   1711a:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   1711e:	|      move.l 4(sp),d0
   17122:	|      cmpi.l #76800,d0
   17128:	|  /-- beq.s 1712c <WaitVbl+0x48>
	while (1) {
   1712a:	\--|-- bra.s 17104 <WaitVbl+0x20>
			break;
   1712c:	   \-> nop
}
   1712e:	       nop
   17130:	       addq.l #8,sp
   17132:	       rts

00017134 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   17134:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   17136:	       move.l 8(sp),(sp)
	while(len-- > 0)
   1713a:	   /-- bra.s 1714c <memset+0x18>
		*ptr++ = val;
   1713c:	/--|-> move.l (sp),d0
   1713e:	|  |   move.l d0,d1
   17140:	|  |   addq.l #1,d1
   17142:	|  |   move.l d1,(sp)
   17144:	|  |   move.l 12(sp),d1
   17148:	|  |   movea.l d0,a0
   1714a:	|  |   move.b d1,(a0)
	while(len-- > 0)
   1714c:	|  \-> move.l 16(sp),d0
   17150:	|      move.l d0,d1
   17152:	|      subq.l #1,d1
   17154:	|      move.l d1,16(sp)
   17158:	|      tst.l d0
   1715a:	\----- bne.s 1713c <memset+0x8>
	return dest;
   1715c:	       move.l 8(sp),d0
}
   17160:	       addq.l #4,sp
   17162:	       rts

00017164 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   17164:	       subq.l #8,sp
   17166:	       move.l d2,-(sp)
	char *d = (char *)dest;
   17168:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   1716e:	       move.l 20(sp),4(sp)
	while(len--)
   17174:	   /-- bra.s 17196 <memcpy+0x32>
		*d++ = *s++;
   17176:	/--|-> move.l 4(sp),d1
   1717a:	|  |   move.l d1,d0
   1717c:	|  |   addq.l #1,d0
   1717e:	|  |   move.l d0,4(sp)
   17182:	|  |   move.l 8(sp),d0
   17186:	|  |   move.l d0,d2
   17188:	|  |   addq.l #1,d2
   1718a:	|  |   move.l d2,8(sp)
   1718e:	|  |   movea.l d1,a0
   17190:	|  |   move.b (a0),d1
   17192:	|  |   movea.l d0,a0
   17194:	|  |   move.b d1,(a0)
	while(len--)
   17196:	|  \-> move.l 24(sp),d0
   1719a:	|      move.l d0,d1
   1719c:	|      subq.l #1,d1
   1719e:	|      move.l d1,24(sp)
   171a2:	|      tst.l d0
   171a4:	\----- bne.s 17176 <memcpy+0x12>
	return dest;
   171a6:	       move.l 16(sp),d0
}
   171aa:	       move.l (sp)+,d2
   171ac:	       addq.l #8,sp
   171ae:	       rts

000171b0 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   171b0:	       lea -128(sp),sp
   171b4:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   171b8:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec4c67>,d0
   171be:	       cmpi.w #20153,d0
   171c2:	   /-- beq.s 171e6 <KPrintF+0x36>
   171c4:	   |   cmpi.w #-24562,d0
   171c8:	   +-- beq.s 171e6 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   171ca:	   |   movea.l 1c896 <SysBase>,a6
   171d0:	   |   movea.l 144(sp),a0
   171d4:	   |   lea 148(sp),a1
   171d8:	   |   lea 17c76 <KPutCharX>,a2
   171de:	   |   suba.l a3,a3
   171e0:	   |   jsr -522(a6)
}
   171e4:	/--|-- bra.s 17210 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   171e6:	|  \-> movea.l 1c896 <SysBase>,a6
   171ec:	|      movea.l 144(sp),a0
   171f0:	|      lea 148(sp),a1
   171f4:	|      lea 17c84 <PutChar>,a2
   171fa:	|      lea 12(sp),a3
   171fe:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   17202:	|      move.l a3,-(sp)
   17204:	|      pea 56 <_start+0x56>
   17208:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec4c67>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1720e:	|      addq.l #8,sp
}
   17210:	\----> movem.l (sp)+,a2-a3/a6
   17214:	       lea 128(sp),sp
   17218:	       rts

0001721a <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   1721a:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   1721c:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   17222:	       movea.l (sp),a0
   17224:	       move.w (a0),d0
   17226:	       cmpi.w #20153,d0
   1722a:	   /-- beq.s 17236 <debug_cmd+0x1c>
   1722c:	   |   movea.l (sp),a0
   1722e:	   |   move.w (a0),d0
   17230:	   |   cmpi.w #-24562,d0
   17234:	/--|-- bne.s 17254 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   17236:	|  \-> move.l 20(sp),-(sp)
   1723a:	|      move.l 20(sp),-(sp)
   1723e:	|      move.l 20(sp),-(sp)
   17242:	|      move.l 20(sp),-(sp)
   17246:	|      pea 58 <_start+0x58>
   1724a:	|      movea.l 20(sp),a0
   1724e:	|      jsr (a0)
   17250:	|      lea 20(sp),sp
	}
}
   17254:	\----> nop
   17256:	       addq.l #4,sp
   17258:	       rts

0001725a <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   1725a:	       move.l d2,-(sp)
	while(*source && --num > 0)
   1725c:	   /-- bra.s 1727e <my_strncpy+0x24>
		*destination++ = *source++;
   1725e:	/--|-> move.l 12(sp),d1
   17262:	|  |   move.l d1,d0
   17264:	|  |   addq.l #1,d0
   17266:	|  |   move.l d0,12(sp)
   1726a:	|  |   move.l 8(sp),d0
   1726e:	|  |   move.l d0,d2
   17270:	|  |   addq.l #1,d2
   17272:	|  |   move.l d2,8(sp)
   17276:	|  |   movea.l d1,a0
   17278:	|  |   move.b (a0),d1
   1727a:	|  |   movea.l d0,a0
   1727c:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   1727e:	|  \-> movea.l 12(sp),a0
   17282:	|      move.b (a0),d0
   17284:	|  /-- beq.s 1728c <my_strncpy+0x32>
   17286:	|  |   subq.l #1,16(sp)
   1728a:	\--|-- bne.s 1725e <my_strncpy+0x4>
	*destination = '\0';
   1728c:	   \-> movea.l 8(sp),a0
   17290:	       clr.b (a0)
}
   17292:	       nop
   17294:	       move.l (sp)+,d2
   17296:	       rts

00017298 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17298:	    lea -60(sp),sp
   1729c:	    movea.l 72(sp),a1
   172a0:	    movea.l 76(sp),a0
   172a4:	    move.l 80(sp),d1
   172a8:	    move.l 84(sp),d0
   172ac:	    movea.w a1,a1
   172ae:	    move.w a1,8(sp)
   172b2:	    movea.w a0,a0
   172b4:	    move.w a0,6(sp)
   172b8:	    move.w d1,d1
   172ba:	    move.w d1,4(sp)
   172be:	    move.w d0,d0
   172c0:	    move.w d0,2(sp)
	struct debug_resource resource = {
   172c4:	    lea 10(sp),a0
   172c8:	    clr.l (a0)
   172ca:	    addq.l #4,a0
   172cc:	    clr.l (a0)
   172ce:	    addq.l #4,a0
   172d0:	    clr.l (a0)
   172d2:	    addq.l #4,a0
   172d4:	    clr.l (a0)
   172d6:	    addq.l #4,a0
   172d8:	    clr.l (a0)
   172da:	    addq.l #4,a0
   172dc:	    clr.l (a0)
   172de:	    addq.l #4,a0
   172e0:	    clr.l (a0)
   172e2:	    addq.l #4,a0
   172e4:	    clr.l (a0)
   172e6:	    addq.l #4,a0
   172e8:	    clr.l (a0)
   172ea:	    addq.l #4,a0
   172ec:	    clr.l (a0)
   172ee:	    addq.l #4,a0
   172f0:	    clr.l (a0)
   172f2:	    addq.l #4,a0
   172f4:	    clr.l (a0)
   172f6:	    addq.l #4,a0
   172f8:	    clr.w (a0)
   172fa:	    addq.l #2,a0
		.address = (unsigned int)addr,
   172fc:	    move.l 64(sp),d0
	struct debug_resource resource = {
   17300:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   17304:	    move.w 8(sp),d0
   17308:	/-- bpl.s 1730c <debug_register_bitmap+0x74>
   1730a:	|   addq.w #7,d0
   1730c:	\-> asr.w #3,d0
   1730e:	    movea.w d0,a0
   17310:	    movea.w 6(sp),a1
   17314:	    move.l a1,-(sp)
   17316:	    move.l a0,-(sp)
   17318:	    jsr 17b6e <__mulsi3>
   1731e:	    addq.l #8,sp
   17320:	    movea.w 4(sp),a0
   17324:	    move.l a0,-(sp)
   17326:	    move.l d0,-(sp)
   17328:	    jsr 17b6e <__mulsi3>
   1732e:	    addq.l #8,sp
	struct debug_resource resource = {
   17330:	    move.l d0,14(sp)
   17334:	    move.w 2(sp),52(sp)
   1733a:	    move.w 8(sp),54(sp)
   17340:	    move.w 6(sp),56(sp)
   17346:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   1734c:	    moveq #0,d0
   1734e:	    move.w 2(sp),d0
   17352:	    moveq #2,d1
   17354:	    and.l d1,d0
   17356:	/-- beq.s 17362 <debug_register_bitmap+0xca>
		resource.size *= 2;
   17358:	|   move.l 14(sp),d0
   1735c:	|   add.l d0,d0
   1735e:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17362:	\-> pea 20 <_start+0x20>
   17366:	    move.l 72(sp),-(sp)
   1736a:	    lea 18(sp),a0
   1736e:	    move.l a0,d0
   17370:	    addq.l #8,d0
   17372:	    move.l d0,-(sp)
   17374:	    jsr 1725a <my_strncpy>
   1737a:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   1737e:	    lea 10(sp),a0
   17382:	    clr.l -(sp)
   17384:	    clr.l -(sp)
   17386:	    move.l a0,-(sp)
   17388:	    pea 4 <_start+0x4>
   1738c:	    jsr 1721a <debug_cmd>
   17392:	    lea 16(sp),sp
}
   17396:	    nop
   17398:	    lea 60(sp),sp
   1739c:	    rts

0001739e <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1739e:	lea -12(sp),sp
   173a2:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   173a4:	move.l 20(sp),12(sp)
   173aa:	move.l 24(sp),8(sp)
   173b0:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   173b6:	movea.l d0,a6
   173b8:	move.l 12(sp),d0
   173bc:	move.l 8(sp),d1
   173c0:	jsr -66(a6)
   173c4:	move.l d0,4(sp)
   173c8:	move.l 4(sp),d0
}
   173cc:	movea.l (sp)+,a6
   173ce:	lea 12(sp),sp
   173d2:	rts

000173d4 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   173d4:	lea -32(sp),sp
   173d8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   173dc:	move.l 48(sp),36(sp)
   173e2:	move.l 52(sp),40(sp)
   173e8:	move.l 56(sp),28(sp)
   173ee:	move.l 60(sp),32(sp)
   173f4:	move.l 1c8ae <MathIeeeDoubBasBase>,d0
   173fa:	movea.l d0,a6
   173fc:	move.l 36(sp),d0
   17400:	move.l 40(sp),d1
   17404:	move.l 28(sp),d2
   17408:	move.l 32(sp),d3
   1740c:	jsr -66(a6)
   17410:	move.l d0,12(sp)
   17414:	move.l d1,16(sp)
   17418:	move.l 12(sp),20(sp)
   1741e:	move.l 16(sp),24(sp)
   17424:	move.l 20(sp),d0
   17428:	move.l 24(sp),d1
}
   1742c:	movem.l (sp)+,d2-d3/a6
   17430:	lea 32(sp),sp
   17434:	rts

00017436 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   17436:	lea -32(sp),sp
   1743a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   1743e:	move.l 48(sp),36(sp)
   17444:	move.l 52(sp),40(sp)
   1744a:	move.l 56(sp),28(sp)
   17450:	move.l 60(sp),32(sp)
   17456:	move.l 1c8ae <MathIeeeDoubBasBase>,d0
   1745c:	movea.l d0,a6
   1745e:	move.l 36(sp),d0
   17462:	move.l 40(sp),d1
   17466:	move.l 28(sp),d2
   1746a:	move.l 32(sp),d3
   1746e:	jsr -84(a6)
   17472:	move.l d0,12(sp)
   17476:	move.l d1,16(sp)
   1747a:	move.l 12(sp),20(sp)
   17480:	move.l 16(sp),24(sp)
   17486:	move.l 20(sp),d0
   1748a:	move.l 24(sp),d1
}
   1748e:	movem.l (sp)+,d2-d3/a6
   17492:	lea 32(sp),sp
   17496:	rts

00017498 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17498:	lea -12(sp),sp
   1749c:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1749e:	move.l 20(sp),12(sp)
   174a4:	move.l 24(sp),8(sp)
   174aa:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   174b0:	movea.l d0,a6
   174b2:	move.l 12(sp),d0
   174b6:	move.l 8(sp),d1
   174ba:	jsr -84(a6)
   174be:	move.l d0,4(sp)
   174c2:	move.l 4(sp),d0
}
   174c6:	movea.l (sp)+,a6
   174c8:	lea 12(sp),sp
   174cc:	rts

000174ce <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   174ce:	lea -12(sp),sp
   174d2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   174d4:	move.l 20(sp),12(sp)
   174da:	move.l 24(sp),8(sp)
   174e0:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   174e6:	movea.l d0,a6
   174e8:	move.l 12(sp),d0
   174ec:	move.l 8(sp),d1
   174f0:	jsr -42(a6)
   174f4:	move.l d0,4(sp)
   174f8:	move.l 4(sp),d0
}
   174fc:	movea.l (sp)+,a6
   174fe:	lea 12(sp),sp
   17502:	rts

00017504 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17504:	lea -20(sp),sp
   17508:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1750a:	move.l 28(sp),20(sp)
   17510:	move.l 1c8b2 <MathIeeeDoubTransBase>,d0
   17516:	movea.l d0,a6
   17518:	move.l 20(sp),d0
   1751c:	jsr -108(a6)
   17520:	move.l d0,4(sp)
   17524:	move.l d1,8(sp)
   17528:	move.l 4(sp),12(sp)
   1752e:	move.l 8(sp),16(sp)
   17534:	move.l 12(sp),d0
   17538:	move.l 16(sp),d1
}
   1753c:	movea.l (sp)+,a6
   1753e:	lea 20(sp),sp
   17542:	rts

00017544 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   17544:	lea -12(sp),sp
   17548:	move.l a6,-(sp)
	return IEEEDPFix(value);
   1754a:	move.l 20(sp),8(sp)
   17550:	move.l 24(sp),12(sp)
   17556:	move.l 1c8ae <MathIeeeDoubBasBase>,d0
   1755c:	movea.l d0,a6
   1755e:	move.l 8(sp),d0
   17562:	move.l 12(sp),d1
   17566:	jsr -30(a6)
   1756a:	move.l d0,4(sp)
   1756e:	move.l 4(sp),d0
   17572:	move.l d0,-(sp)
   17574:	jsr 175ac <__floatsidf>
   1757a:	addq.l #4,sp
}
   1757c:	movea.l (sp)+,a6
   1757e:	lea 12(sp),sp
   17582:	rts

00017584 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17584:	subq.l #8,sp
   17586:	move.l a6,-(sp)
	return IEEESPFix(value);
   17588:	move.l 16(sp),8(sp)
   1758e:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   17594:	movea.l d0,a6
   17596:	move.l 8(sp),d0
   1759a:	jsr -30(a6)
   1759e:	move.l d0,4(sp)
   175a2:	move.l 4(sp),d0
}
   175a6:	movea.l (sp)+,a6
   175a8:	addq.l #8,sp
   175aa:	rts

000175ac <__floatsidf>:


DOUBLE __floatsidf (int i) {
   175ac:	lea -20(sp),sp
   175b0:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   175b2:	move.l 28(sp),20(sp)
   175b8:	move.l 1c8ae <MathIeeeDoubBasBase>,d0
   175be:	movea.l d0,a6
   175c0:	move.l 20(sp),d0
   175c4:	jsr -36(a6)
   175c8:	move.l d0,4(sp)
   175cc:	move.l d1,8(sp)
   175d0:	move.l 4(sp),12(sp)
   175d6:	move.l 8(sp),16(sp)
   175dc:	move.l 12(sp),d0
   175e0:	move.l 16(sp),d1
}
   175e4:	movea.l (sp)+,a6
   175e6:	lea 20(sp),sp
   175ea:	rts

000175ec <__floatsisf>:

FLOAT __floatsisf(int i) {
   175ec:	subq.l #8,sp
   175ee:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   175f0:	move.l 16(sp),8(sp)
   175f6:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   175fc:	movea.l d0,a6
   175fe:	move.l 8(sp),d0
   17602:	jsr -36(a6)
   17606:	move.l d0,4(sp)
   1760a:	move.l 4(sp),d0
}
   1760e:	movea.l (sp)+,a6
   17610:	addq.l #8,sp
   17612:	rts

00017614 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17614:	subq.l #8,sp
   17616:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17618:	move.l 16(sp),8(sp)
   1761e:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   17624:	movea.l d0,a6
   17626:	move.l 8(sp),d0
   1762a:	jsr -36(a6)
   1762e:	move.l d0,4(sp)
   17632:	move.l 4(sp),d0
}
   17636:	movea.l (sp)+,a6
   17638:	addq.l #8,sp
   1763a:	rts

0001763c <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   1763c:	lea -32(sp),sp
   17640:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17644:	move.l 48(sp),36(sp)
   1764a:	move.l 52(sp),40(sp)
   17650:	move.l 56(sp),28(sp)
   17656:	move.l 60(sp),32(sp)
   1765c:	move.l 1c8ae <MathIeeeDoubBasBase>,d0
   17662:	movea.l d0,a6
   17664:	move.l 36(sp),d0
   17668:	move.l 40(sp),d1
   1766c:	move.l 28(sp),d2
   17670:	move.l 32(sp),d3
   17674:	jsr -78(a6)
   17678:	move.l d0,12(sp)
   1767c:	move.l d1,16(sp)
   17680:	move.l 12(sp),20(sp)
   17686:	move.l 16(sp),24(sp)
   1768c:	move.l 20(sp),d0
   17690:	move.l 24(sp),d1
}
   17694:	movem.l (sp)+,d2-d3/a6
   17698:	lea 32(sp),sp
   1769c:	rts

0001769e <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1769e:	lea -12(sp),sp
   176a2:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   176a4:	move.l 20(sp),12(sp)
   176aa:	move.l 24(sp),8(sp)
   176b0:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   176b6:	movea.l d0,a6
   176b8:	move.l 12(sp),d0
   176bc:	move.l 8(sp),d1
   176c0:	jsr -78(a6)
   176c4:	move.l d0,4(sp)
   176c8:	move.l 4(sp),d0
}
   176cc:	movea.l (sp)+,a6
   176ce:	lea 12(sp),sp
   176d2:	rts

000176d4 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   176d4:	lea -12(sp),sp
   176d8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   176da:	move.l 20(sp),12(sp)
   176e0:	move.l 24(sp),8(sp)
   176e6:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   176ec:	movea.l d0,a6
   176ee:	move.l 12(sp),d0
   176f2:	move.l 8(sp),d1
   176f6:	jsr -42(a6)
   176fa:	move.l d0,4(sp)
   176fe:	move.l 4(sp),d0
}
   17702:	movea.l (sp)+,a6
   17704:	lea 12(sp),sp
   17708:	rts

0001770a <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1770a:	lea -20(sp),sp
   1770e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17712:	move.l 36(sp),24(sp)
   17718:	move.l 40(sp),28(sp)
   1771e:	move.l 44(sp),16(sp)
   17724:	move.l 48(sp),20(sp)
   1772a:	move.l 1c8ae <MathIeeeDoubBasBase>,d0
   17730:	movea.l d0,a6
   17732:	move.l 24(sp),d0
   17736:	move.l 28(sp),d1
   1773a:	move.l 16(sp),d2
   1773e:	move.l 20(sp),d3
   17742:	jsr -42(a6)
   17746:	move.l d0,12(sp)
   1774a:	move.l 12(sp),d0
}
   1774e:	movem.l (sp)+,d2-d3/a6
   17752:	lea 20(sp),sp
   17756:	rts

00017758 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17758:	lea -12(sp),sp
   1775c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1775e:	move.l 20(sp),12(sp)
   17764:	move.l 24(sp),8(sp)
   1776a:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   17770:	movea.l d0,a6
   17772:	move.l 12(sp),d0
   17776:	move.l 8(sp),d1
   1777a:	jsr -42(a6)
   1777e:	move.l d0,4(sp)
   17782:	move.l 4(sp),d0
}
   17786:	movea.l (sp)+,a6
   17788:	lea 12(sp),sp
   1778c:	rts

0001778e <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1778e:	lea -12(sp),sp
   17792:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17794:	move.l 20(sp),12(sp)
   1779a:	move.l 24(sp),8(sp)
   177a0:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   177a6:	movea.l d0,a6
   177a8:	move.l 12(sp),d0
   177ac:	move.l 8(sp),d1
   177b0:	jsr -42(a6)
   177b4:	move.l d0,4(sp)
   177b8:	move.l 4(sp),d0
}
   177bc:	movea.l (sp)+,a6
   177be:	lea 12(sp),sp
   177c2:	rts

000177c4 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   177c4:	lea -20(sp),sp
   177c8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   177cc:	move.l 36(sp),24(sp)
   177d2:	move.l 40(sp),28(sp)
   177d8:	move.l 44(sp),16(sp)
   177de:	move.l 48(sp),20(sp)
   177e4:	move.l 1c8ae <MathIeeeDoubBasBase>,d0
   177ea:	movea.l d0,a6
   177ec:	move.l 24(sp),d0
   177f0:	move.l 28(sp),d1
   177f4:	move.l 16(sp),d2
   177f8:	move.l 20(sp),d3
   177fc:	jsr -42(a6)
   17800:	move.l d0,12(sp)
   17804:	move.l 12(sp),d0
}
   17808:	movem.l (sp)+,d2-d3/a6
   1780c:	lea 20(sp),sp
   17810:	rts

00017812 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17812:	lea -12(sp),sp
   17816:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17818:	move.l 20(sp),12(sp)
   1781e:	move.l 24(sp),8(sp)
   17824:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   1782a:	movea.l d0,a6
   1782c:	move.l 12(sp),d0
   17830:	move.l 8(sp),d1
   17834:	jsr -42(a6)
   17838:	move.l d0,4(sp)
   1783c:	move.l 4(sp),d0
}
   17840:	movea.l (sp)+,a6
   17842:	lea 12(sp),sp
   17846:	rts

00017848 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17848:	lea -12(sp),sp
   1784c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1784e:	move.l 20(sp),12(sp)
   17854:	move.l 24(sp),8(sp)
   1785a:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   17860:	movea.l d0,a6
   17862:	move.l 12(sp),d0
   17866:	move.l 8(sp),d1
   1786a:	jsr -42(a6)
   1786e:	move.l d0,4(sp)
   17872:	move.l 4(sp),d0
}
   17876:	movea.l (sp)+,a6
   17878:	lea 12(sp),sp
   1787c:	rts

0001787e <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   1787e:	lea -32(sp),sp
   17882:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17886:	move.l 48(sp),36(sp)
   1788c:	move.l 52(sp),40(sp)
   17892:	move.l 56(sp),28(sp)
   17898:	move.l 60(sp),32(sp)
   1789e:	move.l 1c8ae <MathIeeeDoubBasBase>,d0
   178a4:	movea.l d0,a6
   178a6:	move.l 36(sp),d0
   178aa:	move.l 40(sp),d1
   178ae:	move.l 28(sp),d2
   178b2:	move.l 32(sp),d3
   178b6:	jsr -72(a6)
   178ba:	move.l d0,12(sp)
   178be:	move.l d1,16(sp)
   178c2:	move.l 12(sp),20(sp)
   178c8:	move.l 16(sp),24(sp)
   178ce:	move.l 20(sp),d0
   178d2:	move.l 24(sp),d1
}
   178d6:	movem.l (sp)+,d2-d3/a6
   178da:	lea 32(sp),sp
   178de:	rts

000178e0 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   178e0:	lea -12(sp),sp
   178e4:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   178e6:	move.l 20(sp),12(sp)
   178ec:	move.l 24(sp),8(sp)
   178f2:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   178f8:	movea.l d0,a6
   178fa:	move.l 12(sp),d0
   178fe:	move.l 8(sp),d1
   17902:	jsr -72(a6)
   17906:	move.l d0,4(sp)
   1790a:	move.l 4(sp),d0
}
   1790e:	movea.l (sp)+,a6
   17910:	lea 12(sp),sp
   17914:	rts

00017916 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17916:	lea -12(sp),sp
   1791a:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1791c:	move.l 20(sp),8(sp)
   17922:	move.l 24(sp),12(sp)
   17928:	move.l 1c8b2 <MathIeeeDoubTransBase>,d0
   1792e:	movea.l d0,a6
   17930:	move.l 8(sp),d0
   17934:	move.l 12(sp),d1
   17938:	jsr -102(a6)
   1793c:	move.l d0,4(sp)
   17940:	move.l 4(sp),d0
}
   17944:	movea.l (sp)+,a6
   17946:	lea 12(sp),sp
   1794a:	rts

0001794c <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   1794c:	subq.l #8,sp
   1794e:	move.l a6,-(sp)
	return IEEESPFix(a);
   17950:	move.l 16(sp),8(sp)
   17956:	move.l 1c8a6 <MathIeeeSingBasBase>,d0
   1795c:	movea.l d0,a6
   1795e:	move.l 8(sp),d0
   17962:	jsr -30(a6)
   17966:	move.l d0,4(sp)
   1796a:	move.l 4(sp),d0
}
   1796e:	movea.l (sp)+,a6
   17970:	addq.l #8,sp
   17972:	rts

00017974 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   17974:	       lea -24(sp),sp
   17978:	       move.l a6,-(sp)
    if (x > 0) {
   1797a:	       clr.l -(sp)
   1797c:	       move.l 40(sp),-(sp)
   17980:	       jsr 17758 <__gtsf2>
   17986:	       addq.l #8,sp
   17988:	       tst.l d0
   1798a:	   /-- ble.s 179bc <atan2f+0x48>
        return IEEESPAtan(y / x);
   1798c:	   |   move.l 36(sp),-(sp)
   17990:	   |   move.l 36(sp),-(sp)
   17994:	   |   jsr 17498 <__divsf3>
   1799a:	   |   addq.l #8,sp
   1799c:	   |   move.l d0,8(sp)
   179a0:	   |   move.l 1c8aa <MathIeeeSingTransBase>,d0
   179a6:	   |   movea.l d0,a6
   179a8:	   |   move.l 8(sp),d0
   179ac:	   |   jsr -30(a6)
   179b0:	   |   move.l d0,4(sp)
   179b4:	   |   move.l 4(sp),d0
   179b8:	/--|-- bra.w 17b1c <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   179bc:	|  \-> clr.l -(sp)
   179be:	|      move.l 40(sp),-(sp)
   179c2:	|      jsr 17812 <__ltsf2>
   179c8:	|      addq.l #8,sp
   179ca:	|      tst.l d0
   179cc:	|  /-- bge.s 17a40 <atan2f+0xcc>
   179ce:	|  |   clr.l -(sp)
   179d0:	|  |   move.l 36(sp),-(sp)
   179d4:	|  |   jsr 176d4 <__gesf2>
   179da:	|  |   addq.l #8,sp
   179dc:	|  |   tst.l d0
   179de:	|  +-- blt.s 17a40 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   179e0:	|  |   move.l 36(sp),-(sp)
   179e4:	|  |   move.l 36(sp),-(sp)
   179e8:	|  |   jsr 17498 <__divsf3>
   179ee:	|  |   addq.l #8,sp
   179f0:	|  |   move.l d0,24(sp)
   179f4:	|  |   move.l 1c8aa <MathIeeeSingTransBase>,d0
   179fa:	|  |   movea.l d0,a6
   179fc:	|  |   move.l 24(sp),d0
   17a00:	|  |   jsr -30(a6)
   17a04:	|  |   move.l d0,20(sp)
   17a08:	|  |   move.l 20(sp),d0
   17a0c:	|  |   move.l d0,-(sp)
   17a0e:	|  |   jsr 17504 <__extendsfdf2>
   17a14:	|  |   addq.l #4,sp
   17a16:	|  |   move.l #1413754136,-(sp)
   17a1c:	|  |   move.l #1074340347,-(sp)
   17a22:	|  |   move.l d1,-(sp)
   17a24:	|  |   move.l d0,-(sp)
   17a26:	|  |   jsr 173d4 <__adddf3>
   17a2c:	|  |   lea 16(sp),sp
   17a30:	|  |   move.l d1,-(sp)
   17a32:	|  |   move.l d0,-(sp)
   17a34:	|  |   jsr 17916 <__truncdfsf2>
   17a3a:	|  |   addq.l #8,sp
   17a3c:	+--|-- bra.w 17b1c <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17a40:	|  \-> clr.l -(sp)
   17a42:	|      move.l 40(sp),-(sp)
   17a46:	|      jsr 17812 <__ltsf2>
   17a4c:	|      addq.l #8,sp
   17a4e:	|      tst.l d0
   17a50:	|  /-- bge.s 17ac2 <atan2f+0x14e>
   17a52:	|  |   clr.l -(sp)
   17a54:	|  |   move.l 36(sp),-(sp)
   17a58:	|  |   jsr 17812 <__ltsf2>
   17a5e:	|  |   addq.l #8,sp
   17a60:	|  |   tst.l d0
   17a62:	|  +-- bge.s 17ac2 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17a64:	|  |   move.l 36(sp),-(sp)
   17a68:	|  |   move.l 36(sp),-(sp)
   17a6c:	|  |   jsr 17498 <__divsf3>
   17a72:	|  |   addq.l #8,sp
   17a74:	|  |   move.l d0,16(sp)
   17a78:	|  |   move.l 1c8aa <MathIeeeSingTransBase>,d0
   17a7e:	|  |   movea.l d0,a6
   17a80:	|  |   move.l 16(sp),d0
   17a84:	|  |   jsr -30(a6)
   17a88:	|  |   move.l d0,12(sp)
   17a8c:	|  |   move.l 12(sp),d0
   17a90:	|  |   move.l d0,-(sp)
   17a92:	|  |   jsr 17504 <__extendsfdf2>
   17a98:	|  |   addq.l #4,sp
   17a9a:	|  |   move.l #1413754136,-(sp)
   17aa0:	|  |   move.l #1074340347,-(sp)
   17aa6:	|  |   move.l d1,-(sp)
   17aa8:	|  |   move.l d0,-(sp)
   17aaa:	|  |   jsr 1787e <__subdf3>
   17ab0:	|  |   lea 16(sp),sp
   17ab4:	|  |   move.l d1,-(sp)
   17ab6:	|  |   move.l d0,-(sp)
   17ab8:	|  |   jsr 17916 <__truncdfsf2>
   17abe:	|  |   addq.l #8,sp
   17ac0:	+--|-- bra.s 17b1c <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17ac2:	|  \-> clr.l -(sp)
   17ac4:	|      move.l 40(sp),-(sp)
   17ac8:	|      jsr 174ce <__eqsf2>
   17ace:	|      addq.l #8,sp
   17ad0:	|      tst.l d0
   17ad2:	|  /-- bne.s 17aee <atan2f+0x17a>
   17ad4:	|  |   clr.l -(sp)
   17ad6:	|  |   move.l 36(sp),-(sp)
   17ada:	|  |   jsr 17758 <__gtsf2>
   17ae0:	|  |   addq.l #8,sp
   17ae2:	|  |   tst.l d0
   17ae4:	|  +-- ble.s 17aee <atan2f+0x17a>
        return PI / 2;
   17ae6:	|  |   move.l #1070141403,d0
   17aec:	+--|-- bra.s 17b1c <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17aee:	|  \-> clr.l -(sp)
   17af0:	|      move.l 40(sp),-(sp)
   17af4:	|      jsr 174ce <__eqsf2>
   17afa:	|      addq.l #8,sp
   17afc:	|      tst.l d0
   17afe:	|  /-- bne.s 17b1a <atan2f+0x1a6>
   17b00:	|  |   clr.l -(sp)
   17b02:	|  |   move.l 36(sp),-(sp)
   17b06:	|  |   jsr 17812 <__ltsf2>
   17b0c:	|  |   addq.l #8,sp
   17b0e:	|  |   tst.l d0
   17b10:	|  +-- bge.s 17b1a <atan2f+0x1a6>
        return -PI / 2;
   17b12:	|  |   move.l #-1077342245,d0
   17b18:	+--|-- bra.s 17b1c <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17b1a:	|  \-> moveq #0,d0
    }
}
   17b1c:	\----> movea.l (sp)+,a6
   17b1e:	       lea 24(sp),sp
   17b22:	       rts

00017b24 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17b24:	lea -24(sp),sp
   17b28:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17b2a:	move.l 32(sp),20(sp)
   17b30:	move.l 36(sp),24(sp)
   17b36:	move.l 1c8b2 <MathIeeeDoubTransBase>,d0
   17b3c:	movea.l d0,a6
   17b3e:	move.l 20(sp),d0
   17b42:	move.l 24(sp),d1
   17b46:	jsr -96(a6)
   17b4a:	move.l d0,4(sp)
   17b4e:	move.l d1,8(sp)
   17b52:	move.l 4(sp),12(sp)
   17b58:	move.l 8(sp),16(sp)
   17b5e:	move.l 12(sp),d0
   17b62:	move.l 16(sp),d1
}
   17b66:	movea.l (sp)+,a6
   17b68:	lea 24(sp),sp
   17b6c:	rts

00017b6e <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17b6e:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17b72:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17b76:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17b7a:	mulu.w 8(sp),d1
	addw	d1, d0
   17b7e:	add.w d1,d0
	swap	d0
   17b80:	swap d0
	clrw	d0
   17b82:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17b84:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17b88:	mulu.w 10(sp),d1
	addl	d1, d0
   17b8c:	add.l d1,d0
	rts
   17b8e:	rts

00017b90 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17b90:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17b92:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17b96:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17b9a:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17ba0:	   /-- bcc.s 17bb8 <__udivsi3+0x28>
	movel	d0, d2
   17ba2:	   |   move.l d0,d2
	clrw	d2
   17ba4:	   |   clr.w d2
	swap	d2
   17ba6:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17ba8:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17baa:	   |   move.w d2,d0
	swap	d0
   17bac:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17bae:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17bb2:	   |   divu.w d1,d2
	movew	d2, d0
   17bb4:	   |   move.w d2,d0
	jra	6f
   17bb6:	/--|-- bra.s 17be8 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17bb8:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17bba:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17bbc:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17bbe:	|  |   cmpi.l #65536,d1
	jcc	4b
   17bc4:	|  \-- bcc.s 17bba <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17bc6:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17bc8:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17bce:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17bd0:	|      mulu.w d0,d1
	swap	d2
   17bd2:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17bd4:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17bd6:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17bd8:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17bda:	|  /-- bne.s 17be6 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17bdc:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17bde:	|  +-- bcs.s 17be6 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17be0:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17be4:	+--|-- bls.s 17be8 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17be6:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17be8:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17bea:	       rts

00017bec <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17bec:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17bee:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17bf0:	    move.l 12(sp),d1
	jpl	1f
   17bf4:	/-- bpl.s 17bfa <__divsi3+0xe>
	negl	d1
   17bf6:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17bf8:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17bfa:	\-> move.l 8(sp),d0
	jpl	2f
   17bfe:	/-- bpl.s 17c04 <__divsi3+0x18>
	negl	d0
   17c00:	|   neg.l d0
	negb	d2
   17c02:	|   neg.b d2

2:	movel	d1, sp@-
   17c04:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c06:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17c08:	    jsr 17b90 <__udivsi3>
	addql	#8, sp
   17c0e:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17c10:	    tst.b d2
	jpl	3f
   17c12:	/-- bpl.s 17c16 <__divsi3+0x2a>
	negl	d0
   17c14:	|   neg.l d0

3:	movel	sp@+, d2
   17c16:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17c18:	    rts

00017c1a <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17c1a:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17c1e:	move.l 4(sp),d0
	movel	d1, sp@-
   17c22:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c24:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17c26:	jsr 17bec <__divsi3>
	addql	#8, sp
   17c2c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17c2e:	move.l 8(sp),d1
	movel	d1, sp@-
   17c32:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c34:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17c36:	jsr 17b6e <__mulsi3>
	addql	#8, sp
   17c3c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17c3e:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17c42:	sub.l d0,d1
	movel	d1, d0
   17c44:	move.l d1,d0
	rts
   17c46:	rts

00017c48 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17c48:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17c4c:	move.l 4(sp),d0
	movel	d1, sp@-
   17c50:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c52:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17c54:	jsr 17b90 <__udivsi3>
	addql	#8, sp
   17c5a:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17c5c:	move.l 8(sp),d1
	movel	d1, sp@-
   17c60:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17c62:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17c64:	jsr 17b6e <__mulsi3>
	addql	#8, sp
   17c6a:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17c6c:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17c70:	sub.l d0,d1
	movel	d1, d0
   17c72:	move.l d1,d0
	rts
   17c74:	rts

00017c76 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17c76:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17c78:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17c7c:	jsr -516(a6)
    move.l (sp)+, a6
   17c80:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17c82:	rts

00017c84 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17c84:	move.b d0,(a3)+
	rts
   17c86:	rts
