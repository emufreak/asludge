
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #114727,d0
       8:	       subi.l #114727,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c027 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #114727,d0
      40:	       subi.l #114727,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c027 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7e14 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #114727,d0
      7e:	       subi.l #114727,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c027 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13afc <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1c7d8 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13b14 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c028 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13afc <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1c7d8 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c028 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13afc <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1c7d8 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17b7a <PutChar+0x4>
     35c:	|  |              |   jsr 170d4 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1c7e0 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1c7e0 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1c7e0 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1c7e0 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1c7e0 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1c7e0 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1c7e0 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17ba4 <PutChar+0x2e>
     834:	|   jsr 170d4 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1c7e0 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17bc0 <PutChar+0x4a>
     8a6:	|   jsr 170d4 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1c7e0 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1c7e0 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1c7e0 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1c7e0 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1c7e0 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1c7e0 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1c7e0 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1c7e0 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1c7d8 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1c7e0 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13afc <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1c7e0 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c6d2 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c6d2 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c6d2 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c6d2 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c6d2 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1c798 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c6d2 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c6d2 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1c794 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c6d2 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c6d2 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c6d2 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9752 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c6d2 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c6d6 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c6da <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2be4 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17be8 <PutChar+0x72>
     e1a:	          jsr 170d4 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c6ee <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17c01 <PutChar+0x8b>
     e30:	      |   jsr 170d4 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1c6e8 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     ,-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     '-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1c7e4 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1c6ee <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17c2f <PutChar+0xb9>
     ef0:	|         jsr 170d4 <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     ,-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  ,--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1c7e4 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  '-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  '----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17c4f <PutChar+0xd9>
     f3c:	|         jsr 170d4 <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1c6fa <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1c72c <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1c710 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1c730 <winHeight>,d0
     f6e:	|         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1c710 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1c710 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1c710 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1c710 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17c6f <PutChar+0xf9>
     fbe:	|         jsr 170d4 <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	'-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1c7d8 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   ,-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17c84 <PutChar+0x10e>
    1010:	   |   jsr 170d4 <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1c7e0 <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1c71c <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #114730,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   ,-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	,--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  '-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	'----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #114794,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   ,-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	,--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  '-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	'----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #114842,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   ,-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	,--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  '-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	'----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #114882,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1c714 <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   ,-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	,--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  '-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	'----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   ,-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   '-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17cbf <PutChar+0x149>
    11c6:	                jsr 170d4 <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1c70c <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1c710 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1c70c <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	,-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1c700 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1c7e4 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     ,-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  ,--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1c72c <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1c72c <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1c72c <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17a60 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1c6ee <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1c72c <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17a60 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1c700 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     ,-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  ,--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1c72c <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1c730 <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17a60 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1c72c <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1c730 <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17a60 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1c7e4 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  '-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  '----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  '-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  '----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1c718 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1c714 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           ,-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        ,--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  '-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        '----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           ,-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	'-----------|-> nop
  }
}
    13e4:	            '-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1c71c <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1c71c <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1c6fa <CstApplyBackDropCounter>,d0
    14ce:	,-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1c6fa <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1c6fa <CstApplyBackDropCounter>
  }    
}
    14e4:	'-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    14e8:	                                                             subq.l #8,sp
    14ea:	                                                             movem.l d2-d7/a2-a6,-(sp)
    14ee:	                                                             movea.l 56(sp),a3
    14f2:	                                                             movea.l 60(sp),a2
    14f6:	                                                             move.l 64(sp),d2
    14fa:	                                                             move.l 68(sp),d7
    14fe:	                                                             movea.w d2,a4
    1500:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1504:	                                                             clr.l -(sp)
    1506:	                                                             pea 1 <_start+0x1>
    150a:	                                                             movea.w 6(a3),a0
    150e:	                                                             move.l a0,-(sp)
    1510:	                                                             movea.w 2(a3),a0
    1514:	                                                             move.l a0,-(sp)
    1516:	                                                             pea 17cdb <PutChar+0x165>
    151c:	                                                             move.l 1c720 <CstZBufferResult>,-(sp)
    1522:	                                                             lea 171bc <debug_register_bitmap>,a5
    1528:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    152a:	                                                             clr.l -(sp)
    152c:	                                                             pea 1 <_start+0x1>
    1530:	                                                             movea.w 6(a3),a0
    1534:	                                                             move.l a0,-(sp)
    1536:	                                                             move.w 2(a3),d0
    153a:	                                                             addi.w #16,d0
    153e:	                                                             movea.w d0,a0
    1540:	                                                             move.l a0,-(sp)
    1542:	                                                             pea 17ce6 <PutChar+0x170>
    1548:	                                                             move.l 1c724 <CstZBufferWork>,-(sp)
    154e:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    1550:	                                                             lea 48(sp),sp
    1554:	                                                             cmpa.w #0,a2
    1558:	,----------------------------------------------------------- beq.w 19f4 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    155c:	|                                                            move.w d2,48(sp)
    1560:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1562:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1566:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1568:	|                       ,----------------------------------> move.w a5,d3
    156a:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    156c:	|                       |                                    andi.l #65535,d3
    1572:	|                       |                                    cmp.l 16(a2),d3
    1576:	|                       |  ,-------------------------------- bge.w 1710 <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    157a:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    157e:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    1582:	|                       |  |                                 move.w d6,d0
    1584:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1588:	|                       |  |                                 move.w 6(a2),d4
    158c:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    158e:	|                       |  |                                 cmp.w a4,d6
    1590:	|                    ,--|--|-------------------------------- bge.w 1888 <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1594:	|                    |  |  |                                 cmp.w a4,d0
    1596:	|        ,-----------|--|--|-------------------------------- ble.w 170e <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    159a:	|        |           |  |  |                                 move.w 50(sp),d0
    159e:	|        |           |  |  |                                 cmp.w d0,d5
    15a0:	|        |     ,-----|--|--|-------------------------------- blt.w 19d4 <CstDrawZBuffer+0x4ec>
    15a4:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    15a6:	|        |     |     |  |  |                                 cmpa.l d3,a0
    15a8:	|        +-----|-----|--|--|-------------------------------- bge.w 170e <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    15ac:	|        |     |     |  |  |                                 move.w 48(sp),d0
    15b0:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    15b2:	|        |     |     |  |  |                                 move.w d0,d6
    15b4:	|        |     |     |  |  |                                 andi.w #15,d6
    15b8:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    15ba:	|        |     |     |  |  |                                 tst.l d2
    15bc:	|        |  ,--|-----|--|--|-------------------------------- blt.w 1730 <CstDrawZBuffer+0x248>
    15c0:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    15c2:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    15c4:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e5b>
          custom->bltalwm = 0xffff;                      
    15cc:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e5d>
          custom->bltcon1 = 0;          
    15d4:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e59>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    15dc:	|        |  |  |  |  |  |  |                                 lea 1c7e4 <GfxBase>,a0
    15e2:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    15e4:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    15e6:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    15e8:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    15ea:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    15f0:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    15f4:	|        |  |  |  |  |  |  |                                 clr.w d0
    15f6:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    15f8:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 1770 <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    15fc:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    15fe:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    1602:	|        |  |  |  |  |  |  |           |     |               move.l 1c724 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    160c:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    160e:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    1610:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    1612:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    1616:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    1618:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e57>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    161e:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    1620:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    1622:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 1a8e <CstDrawZBuffer+0x5a6>
    1626:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    1628:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    162a:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
            custom->bltdmod = 0;                                                            
    1630:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1638:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    163a:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    163c:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    163e:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    1640:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 17b0 <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    1644:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1648:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    164a:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    164c:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    164e:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 17a60 <__mulsi3>
    1654:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    1656:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    1658:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 17c6 <CstDrawZBuffer+0x2de>
    165c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    165e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    1660:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
        UWORD bltsize =  height*64+bytewidth/2;          
    1666:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1668:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    166a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    166c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
       
        WaitBlit();
    1672:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1c7e4 <GfxBase>,a0
    1678:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    167a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    167e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e5b>
        custom->bltalwm = 0xffff;
    1686:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e5d>
        custom->bltamod = 2;
    168e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
        custom->bltbmod = 0;
    1696:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e79>
        custom->bltdmod = 0;
    169e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16a6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e57>
        custom->bltcon1 = 0;        
    16ae:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e59>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    16b6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1c724 <CstZBufferWork>,d0
    16bc:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    16be:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16c4:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    16c6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    16ca:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    16cc:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 1850 <CstDrawZBuffer+0x368>
    16d0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    16d2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    16d4:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    16d6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 17a60 <__mulsi3>
    16dc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    16de:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    16e0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    16e2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    16e4:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    16e6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    16ea:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
        custom->bltdpt = (APTR) CstZBufferResult;
    16f0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1c720 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    16fa:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    16fc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    16fe:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    1700:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 183e <CstDrawZBuffer+0x356>
    1704:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1706:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
      zbufferset = 1;
    170e:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    1710:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1714:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1718:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1568 <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    171c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    171e:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 19f4 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    1722:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1c720 <CstZBufferResult>,d0

}
    1728:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    172c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    172e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    1730:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    1732:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1734:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1736:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1738:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e5b>
          custom->bltalwm = 0xffff;                      
    1740:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e5d>
          custom->bltcon1 = 0;          
    1748:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e59>
            WaitBlit();   
    1750:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1c7e4 <GfxBase>,a0
    1756:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1758:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    175a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    175c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    175e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1764:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1768:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    176a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    176c:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 15fc <CstDrawZBuffer+0x114>
            WaitBlit();         
    1770:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1774:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1c724 <CstZBufferWork>,d0
    177a:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    177c:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
            custom->bltcon0 = 4096 + 0x9f0;              
    1782:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e57>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    178a:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    178c:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    178e:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1aa6 <CstDrawZBuffer+0x5be>
    1792:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    1794:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    1796:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
            custom->bltdmod = 2;                                                            
    179c:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    17a4:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    17a6:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    17a8:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    17aa:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    17ac:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 1644 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    17b0:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    17b2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    17b4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    17b6:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    17b8:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 17a60 <__mulsi3>
    17be:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    17c0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    17c2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 165c <CstDrawZBuffer+0x174>
    17c6:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    17c8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    17ca:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    17cc:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
        UWORD bltsize =  height*64+bytewidth/2;          
    17d2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    17d4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    17d6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    17d8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
        WaitBlit();
    17de:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1c7e4 <GfxBase>,a0
    17e4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    17e6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    17ea:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e5b>
        custom->bltalwm = 0xffff;
    17f2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e5d>
        custom->bltamod = 2;
    17fa:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
        custom->bltbmod = 0;
    1802:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e79>
        custom->bltdmod = 0;
    180a:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1812:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e57>
        custom->bltcon1 = 0;        
    181a:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e59>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    1822:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1c724 <CstZBufferWork>,d0
    1828:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    182a:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1830:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    1832:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    1836:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    1838:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 16d0 <CstDrawZBuffer+0x1e8>
    183c:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 1850 <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    183e:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    1840:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    1842:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1844:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    1846:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    184c:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 170e <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1850:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    1852:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1854:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    1856:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    1858:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 17a60 <__mulsi3>
    185e:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    1860:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    1862:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1864:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1866:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1868:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    186c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
        custom->bltdpt = (APTR) CstZBufferResult;
    1872:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1c720 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    187c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    187e:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    1880:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    1882:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1704 <CstDrawZBuffer+0x21c>
    1886:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 183e <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1888:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    188c:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    188e:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1894:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    1896:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    1898:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    189a:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 170e <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    189e:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    18a2:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    18a4:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 19b0 <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    18a8:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    18ac:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 170e <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    18b0:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    18b4:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    18b6:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    18b8:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    18ba:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    18be:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    18c2:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    18c4:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 194e <CstDrawZBuffer+0x466>
    18c8:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    18ca:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    18cc:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    18ce:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    18d0:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    18d2:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 1960 <CstDrawZBuffer+0x478>
            WaitBlit();  
    18d6:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1c7e4 <GfxBase>,a0
    18dc:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    18de:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    18e2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e5b>
            custom->bltalwm = 0xffff;          
    18ea:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e5d>
            custom->bltdpt = CstZBufferWork;        
    18f2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1c724 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
            custom->bltcon1 = 0;               
    18fc:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e59>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1904:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1908:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    190a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    190c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 1978 <CstDrawZBuffer+0x490>
    190e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    1910:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    1912:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    1914:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    1918:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 1986 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    191a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    191e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    1920:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    1922:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    1926:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e57>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    192c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
              custom->bltdmod = 0;                                                            
    1932:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
              xdiffbyte += 2;                 
    193a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    193c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    193e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1940:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    1946:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    1948:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    194a:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 1638 <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    194e:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    1950:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    1952:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1954:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1956:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1958:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    195a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    195c:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 18d6 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    1960:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 17cf0 <PutChar+0x17a>
    1966:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 170d4 <KPrintF>
              return FALSE;
    196c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    196e:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    1970:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1974:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1976:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1978:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    197a:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    197c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    197e:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    1980:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    1984:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 191a <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    1986:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e57>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    198e:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
              custom->bltdmod = 0;                                                            
    1994:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
              xdiffbyte += 2;                 
    199c:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    199e:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    19a0:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    19a2:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    19a8:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    19aa:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    19ac:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 1638 <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    19b0:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19b2:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    19b4:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 170e <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19b8:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    19bc:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    19be:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    19c0:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19c2:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    19c6:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    19ca:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    19cc:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 18c8 <CstDrawZBuffer+0x3e0>
    19d0:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 194e <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19d4:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    19d8:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 170e <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    19dc:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    19e0:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    19e2:	|  |  |     |     |     |  |                                 move.w d0,d6
    19e4:	|  |  |     |     |     |  |                                 andi.w #15,d6
    19e8:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    19ea:	|  |  |     |     |     |  |                                 tst.l d2
    19ec:	|  |  |     |     '-----|--|-------------------------------- bge.w 15c0 <CstDrawZBuffer+0xd8>
    19f0:	|  |  |     '-----------|--|-------------------------------- bra.w 1730 <CstDrawZBuffer+0x248>
    WaitBlit();
    19f4:	'--|--|-----------------|--|-------------------------------> movea.l 1c7e4 <GfxBase>,a6
    19fa:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    19fe:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e5b>
    custom->bltalwm = 0xffff;
    1a06:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e5d>
    custom->bltamod = 0;
    1a0e:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
    custom->bltbmod = 0;
    1a16:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e79>
    custom->bltcmod = 0;
    1a1e:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e77>
    custom->bltdmod = 0;
    1a26:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1a2e:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e57>
    custom->bltcon1 = 0;        
    1a36:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e59>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1a3e:	   |  |                 |  |                                 move.l (a3),d2
    1a40:	   |  |                 |  |                                 move.l 4(a3),d3
    1a44:	   |  |                 |  |                                 move.l d2,d0
    1a46:	   |  |                 |  |                       ,-------- bmi.w 1ace <CstDrawZBuffer+0x5e6>
    1a4a:	   |  |                 |  |                       |         asr.l #3,d0
    1a4c:	   |  |                 |  |                       |         move.l d3,-(sp)
    1a4e:	   |  |                 |  |                       |         move.l d0,-(sp)
    1a50:	   |  |                 |  |                       |         jsr 17a60 <__mulsi3>
    1a56:	   |  |                 |  |                       |         addq.l #8,sp
    1a58:	   |  |                 |  |                       |         move.l d0,d1
    1a5a:	   |  |                 |  |                       |         add.l d0,d1
    1a5c:	   |  |                 |  |                       |         add.l d1,d1
    1a5e:	   |  |                 |  |                       |         add.l d1,d0
    1a60:	   |  |                 |  |                       |         add.l 24(a3),d0
    1a64:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltdpt = (APTR) CstZBufferResult;
    1a6a:	   |  |                 |  |                       |         move.l 1c720 <CstZBufferResult>,d0
    1a70:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1a76:	   |  |                 |  |                       |         lsl.w #6,d3
    1a78:	   |  |                 |  |                       |         tst.l d2
    1a7a:	   |  |                 |  |                    ,--|-------- blt.s 1abe <CstDrawZBuffer+0x5d6>
    1a7c:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    1a7e:	   |  |                 |  |                    |  |  |      add.w d2,d3
    1a80:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
}
    1a86:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1a8a:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    1a8c:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1a8e:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    1a90:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1a92:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1a94:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
            custom->bltdmod = 0;                                                            
    1a9a:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
    1aa2:	      '-----------------|--|--------------------|--|--|--|-- bra.w 1638 <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1aa6:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1aa8:	                           |                    |  |  |  |   asr.l #3,d1
    1aaa:	                           |                    |  |  |  |   sub.w d2,d1
    1aac:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
            custom->bltdmod = 2;                                                            
    1ab2:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
    1aba:	                           '--------------------|--|--|--|-- bra.w 17a4 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1abe:	                                                >--|--|--|-> moveq #15,d1
    1ac0:	                                                |  |  |  |   add.l d1,d2
    1ac2:	                                                |  |  |  |   asr.l #4,d2
    1ac4:	                                                |  |  |  |   add.w d2,d3
    1ac6:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
  return CstZBufferResult;
    1acc:	                                                |  |  |  '-- bra.s 1a86 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1ace:	                                                |  '--|----> addq.l #7,d0
    1ad0:	                                                |     |      asr.l #3,d0
    1ad2:	                                                |     |      move.l d3,-(sp)
    1ad4:	                                                |     |      move.l d0,-(sp)
    1ad6:	                                                |     |      jsr 17a60 <__mulsi3>
    1adc:	                                                |     |      addq.l #8,sp
    1ade:	                                                |     |      move.l d0,d1
    1ae0:	                                                |     |      add.l d0,d1
    1ae2:	                                                |     |      add.l d1,d1
    1ae4:	                                                |     |      add.l d1,d0
    1ae6:	                                                |     |      add.l 24(a3),d0
    1aea:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltdpt = (APTR) CstZBufferResult;
    1af0:	                                                |     |      move.l 1c720 <CstZBufferResult>,d0
    1af6:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1afc:	                                                |     |      lsl.w #6,d3
    1afe:	                                                |     |      tst.l d2
    1b00:	                                                |     '----- bge.w 1a7c <CstDrawZBuffer+0x594>
    1b04:	                                                '----------- bra.s 1abe <CstDrawZBuffer+0x5d6>

00001b06 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1b06:	    lea -20(sp),sp
    1b0a:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1b0c:	    move.l 1c700 <CstDrawBuffer>,d0
    1b12:	,-- beq.s 1b2c <CstFreeBuffer+0x26>
    1b14:	|   move.l 1c700 <CstDrawBuffer>,20(sp)
    1b1c:	|   move.l 1c7d8 <SysBase>,d0
    1b22:	|   movea.l d0,a6
    1b24:	|   movea.l 20(sp),a1
    1b28:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1b2c:	'-> move.l 1c6fc <CstViewBuffer>,d0
    1b32:	,-- beq.s 1b4c <CstFreeBuffer+0x46>
    1b34:	|   move.l 1c6fc <CstViewBuffer>,16(sp)
    1b3c:	|   move.l 1c7d8 <SysBase>,d0
    1b42:	|   movea.l d0,a6
    1b44:	|   movea.l 16(sp),a1
    1b48:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1b4c:	'-> move.l 1c6f6 <CstCopperList>,d0
    1b52:	,-- beq.s 1b6c <CstFreeBuffer+0x66>
    1b54:	|   move.l 1c6f6 <CstCopperList>,12(sp)
    1b5c:	|   move.l 1c7d8 <SysBase>,d0
    1b62:	|   movea.l d0,a6
    1b64:	|   movea.l 12(sp),a1
    1b68:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1b6c:	'-> move.l 1c6ee <CstBackDrop>,d0
    1b72:	,-- beq.s 1b8c <CstFreeBuffer+0x86>
    1b74:	|   move.l 1c6ee <CstBackDrop>,8(sp)
    1b7c:	|   move.l 1c7d8 <SysBase>,d0
    1b82:	|   movea.l d0,a6
    1b84:	|   movea.l 8(sp),a1
    1b88:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1b8c:	'-> move.l 1c6f2 <CstBackDropBackup>,d0
    1b92:	,-- beq.s 1bac <CstFreeBuffer+0xa6>
    1b94:	|   move.l 1c6f2 <CstBackDropBackup>,4(sp)
    1b9c:	|   move.l 1c7d8 <SysBase>,d0
    1ba2:	|   movea.l d0,a6
    1ba4:	|   movea.l 4(sp),a1
    1ba8:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1bac:	'-> clr.l 1c700 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1bb2:	    clr.l 1c6fc <CstViewBuffer>
  CstCopperList = NULL;
    1bb8:	    clr.l 1c6f6 <CstCopperList>
  CstBackDrop = NULL;
    1bbe:	    clr.l 1c6ee <CstBackDrop>

}
    1bc4:	    nop
    1bc6:	    movea.l (sp)+,a6
    1bc8:	    lea 20(sp),sp
    1bcc:	    rts

00001bce <CstFreeze>:



void CstFreeze( ) {
    1bce:	       lea -36(sp),sp
    1bd2:	       move.l a6,-(sp)
    1bd4:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1bd6:	       pea 17d40 <PutChar+0x1ca>
    1bdc:	       jsr 170d4 <KPrintF>
    1be2:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1be4:	       move.l 1c72c <winWidth>,d0
    1bea:	       lsr.l #3,d0
    1bec:	       move.l d0,d1
    1bee:	       move.l 1c730 <winHeight>,d0
    1bf4:	       move.l d0,d0
    1bf6:	       muls.w d0,d1
    1bf8:	       move.w d1,d0
    1bfa:	       add.w d0,d0
    1bfc:	       add.w d0,d0
    1bfe:	       move.w d0,d2
    1c00:	       add.w d1,d2
    1c02:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1c06:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1c0e:	       moveq #0,d0
    1c10:	       move.w 26(sp),d0
    1c14:	       move.l d0,18(sp)
    1c18:	       clr.l 14(sp)
    1c1c:	       move.l 1c7d8 <SysBase>,d0
    1c22:	       movea.l d0,a6
    1c24:	       move.l 18(sp),d0
    1c28:	       move.l 14(sp),d1
    1c2c:	       jsr -684(a6)
    1c30:	       move.l d0,10(sp)
    1c34:	       move.l 10(sp),d0
    1c38:	       move.l d0,1c6f2 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1c3e:	       move.l 1c6f2 <CstBackDropBackup>,d0
    1c44:	   ,-- bne.s 1c54 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1c46:	   |   pea 17d67 <PutChar+0x1f1>
    1c4c:	   |   jsr 170d4 <KPrintF>
    1c52:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1c54:	   '-> move.l 1c730 <winHeight>,d0
    1c5a:	       move.l d0,d0
    1c5c:	       movea.w d0,a1
    1c5e:	       move.l 1c72c <winWidth>,d0
    1c64:	       move.l d0,d0
    1c66:	       movea.w d0,a0
    1c68:	       move.l 1c6f2 <CstBackDropBackup>,d0
    1c6e:	       clr.l -(sp)
    1c70:	       pea 5 <_start+0x5>
    1c74:	       move.l a1,-(sp)
    1c76:	       move.l a0,-(sp)
    1c78:	       pea 17d9f <PutChar+0x229>
    1c7e:	       move.l d0,-(sp)
    1c80:	       jsr 171bc <debug_register_bitmap>
    1c86:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1c8a:	       move.l 1c6ee <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1c92:	       move.l 1c6f2 <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1c9a:	       clr.l 32(sp)
    1c9e:	   ,-- bra.s 1cc4 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1ca0:	,--|-> move.l 40(sp),d1
    1ca4:	|  |   move.l d1,d0
    1ca6:	|  |   addq.l #4,d0
    1ca8:	|  |   move.l d0,40(sp)
    1cac:	|  |   move.l 36(sp),d0
    1cb0:	|  |   move.l d0,d2
    1cb2:	|  |   addq.l #4,d2
    1cb4:	|  |   move.l d2,36(sp)
    1cb8:	|  |   movea.l d1,a0
    1cba:	|  |   move.l (a0),d1
    1cbc:	|  |   movea.l d0,a0
    1cbe:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1cc0:	|  |   addq.l #1,32(sp)
    1cc4:	|  '-> move.w 26(sp),d0
    1cc8:	|      lsr.w #2,d0
    1cca:	|      move.w d0,d0
    1ccc:	|      andi.l #65535,d0
    1cd2:	|      cmp.l 32(sp),d0
    1cd6:	'----- bgt.s 1ca0 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1cd8:	       move.l 1c6fc <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1ce0:	       move.l 1c6ee <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1ce8:	       clr.l 28(sp)
    1cec:	   ,-- bra.s 1d12 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1cee:	,--|-> move.l 40(sp),d1
    1cf2:	|  |   move.l d1,d0
    1cf4:	|  |   addq.l #4,d0
    1cf6:	|  |   move.l d0,40(sp)
    1cfa:	|  |   move.l 36(sp),d0
    1cfe:	|  |   move.l d0,d2
    1d00:	|  |   addq.l #4,d2
    1d02:	|  |   move.l d2,36(sp)
    1d06:	|  |   movea.l d1,a0
    1d08:	|  |   move.l (a0),d1
    1d0a:	|  |   movea.l d0,a0
    1d0c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1d0e:	|  |   addq.l #1,28(sp)
    1d12:	|  '-> move.w 26(sp),d0
    1d16:	|      lsr.w #2,d0
    1d18:	|      move.w d0,d0
    1d1a:	|      andi.l #65535,d0
    1d20:	|      cmp.l 28(sp),d0
    1d24:	'----- bgt.s 1cee <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1d26:	       move.w #2,1c6fa <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1d2e:	       move.l 1c72c <winWidth>,d0
    1d34:	       lsr.l #4,d0
    1d36:	       movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    1d3c:	       move.l a0,d1
    1d3e:	       addq.l #2,d1
    1d40:	       move.l d1,1c710 <CstBackDropBufferApplyCursor>
    1d46:	       move.l d0,d0
    1d48:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1d4a:	       move.l 1c730 <winHeight>,d0
    1d50:	       movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    1d56:	       move.l a0,d1
    1d58:	       addq.l #2,d1
    1d5a:	       move.l d1,1c710 <CstBackDropBufferApplyCursor>
    1d60:	       move.l d0,d0
    1d62:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d64:	       movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    1d6a:	       move.l a0,d0
    1d6c:	       addq.l #2,d0
    1d6e:	       move.l d0,1c710 <CstBackDropBufferApplyCursor>
    1d74:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d76:	       movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    1d7c:	       move.l a0,d0
    1d7e:	       addq.l #2,d0
    1d80:	       move.l d0,1c710 <CstBackDropBufferApplyCursor>
    1d86:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1d88:	       movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    1d8e:	       move.l a0,d0
    1d90:	       addq.l #2,d0
    1d92:	       move.l d0,1c710 <CstBackDropBufferApplyCursor>
    1d98:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1d9a:	       pea 17dae <PutChar+0x238>
    1da0:	       jsr 170d4 <KPrintF>
    1da6:	       addq.l #4,sp

}  
    1da8:	       nop
    1daa:	       move.l (sp)+,d2
    1dac:	       movea.l (sp)+,a6
    1dae:	       lea 36(sp),sp
    1db2:	       rts

00001db4 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1db4:	             lea -144(sp),sp
    1db8:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1dbc:	             pea 17dc2 <PutChar+0x24c>
    1dc2:	             jsr 170d4 <KPrintF>
    1dc8:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1dca:	             move.l 164(sp),-(sp)
    1dce:	             jsr 6bc <get2bytes>
    1dd4:	             addq.l #4,sp
    1dd6:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1dda:	             move.l 164(sp),-(sp)
    1dde:	             jsr 6bc <get2bytes>
    1de4:	             addq.l #4,sp
    1de6:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1dea:	             move.w 134(sp),d0
    1dee:	             lsr.w #3,d0
    1df0:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1df4:	             move.w 130(sp),d0
    1df8:	             lsr.w #1,d0
    1dfa:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1dfe:	             move.l 1c72c <winWidth>,d0
    1e04:	             lsr.l #3,d0
    1e06:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1e0a:	             move.w 130(sp),d0
    1e0e:	             muls.w 132(sp),d0
    1e12:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1e16:	             move.w 124(sp),d1
    1e1a:	             move.w d1,d0
    1e1c:	             add.w d0,d0
    1e1e:	             add.w d0,d0
    1e20:	             move.w d0,d2
    1e22:	             add.w d1,d2
    1e24:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1e28:	             move.w 1c6e8 <CstPaletteLoaded>,d0
    1e2e:	,----------- bne.w 1ec8 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1e32:	|            move.w #384,120(sp)

    if(CstPalette) {
    1e38:	|            move.l 1c718 <CstPalette>,d0
    1e3e:	|        ,-- beq.s 1e58 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1e40:	|        |   move.l 1c718 <CstPalette>,116(sp)
    1e48:	|        |   move.l 1c7d8 <SysBase>,d0
    1e4e:	|        |   movea.l d0,a6
    1e50:	|        |   movea.l 116(sp),a1
    1e54:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1e58:	|        '-> moveq #64,d0
    1e5a:	|            move.l d0,112(sp)
    1e5e:	|            clr.l 108(sp)
    1e62:	|            move.l 1c7d8 <SysBase>,d0
    1e68:	|            movea.l d0,a6
    1e6a:	|            move.l 112(sp),d0
    1e6e:	|            move.l 108(sp),d1
    1e72:	|            jsr -684(a6)
    1e76:	|            move.l d0,104(sp)
    1e7a:	|            move.l 104(sp),d0
    1e7e:	|            move.l d0,1c718 <CstPalette>
    CstPaletteLoaded = 1;
    1e84:	|            move.w #1,1c6e8 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1e8c:	|            move.l 1c718 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e94:	|            clr.l 152(sp)
    1e98:	|        ,-- bra.s 1ebe <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1e9a:	|     ,--|-> move.l 164(sp),-(sp)
    1e9e:	|     |  |   jsr 6bc <get2bytes>
    1ea4:	|     |  |   addq.l #4,sp
    1ea6:	|     |  |   move.l d0,d1
    1ea8:	|     |  |   move.l 156(sp),d0
    1eac:	|     |  |   move.l d0,d2
    1eae:	|     |  |   addq.l #2,d2
    1eb0:	|     |  |   move.l d2,156(sp)
    1eb4:	|     |  |   move.l d1,d1
    1eb6:	|     |  |   movea.l d0,a0
    1eb8:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1eba:	|     |  |   addq.l #1,152(sp)
    1ebe:	|     |  '-> moveq #31,d0
    1ec0:	|     |      cmp.l 152(sp),d0
    1ec4:	|     '----- bge.s 1e9a <CstLoadBackdrop+0xe6>
    1ec6:	|  ,-------- bra.s 1ee6 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1ec8:	'--|-------> clr.l 148(sp)
    1ecc:	   |     ,-- bra.s 1ede <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1ece:	   |  ,--|-> move.l 164(sp),-(sp)
    1ed2:	   |  |  |   jsr 6bc <get2bytes>
    1ed8:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1eda:	   |  |  |   addq.l #1,148(sp)
    1ede:	   |  |  '-> moveq #31,d2
    1ee0:	   |  |      cmp.l 148(sp),d2
    1ee4:	   |  '----- bge.s 1ece <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1ee6:	   '-------> moveq #0,d0
    1ee8:	             move.w 122(sp),d0
    1eec:	             move.l d0,100(sp)
    1ef0:	             moveq #2,d0
    1ef2:	             move.l d0,96(sp)
    1ef6:	             move.l 1c7d8 <SysBase>,d0
    1efc:	             movea.l d0,a6
    1efe:	             move.l 100(sp),d0
    1f02:	             move.l 96(sp),d1
    1f06:	             jsr -684(a6)
    1f0a:	             move.l d0,92(sp)
    1f0e:	             move.l 92(sp),d0
    1f12:	             move.l d0,88(sp)
  if( !tmpbuffer)
    1f16:	         ,-- bne.s 1f26 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1f18:	         |   pea 17df1 <PutChar+0x27b>
    1f1e:	         |   jsr 170d4 <KPrintF>
    1f24:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1f26:	         '-> moveq #0,d0
    1f28:	             move.w 124(sp),d0
    1f2c:	             move.l d0,84(sp)
    1f30:	             moveq #2,d2
    1f32:	             move.l d2,80(sp)
    1f36:	             move.l 1c7d8 <SysBase>,d0
    1f3c:	             movea.l d0,a6
    1f3e:	             move.l 84(sp),d0
    1f42:	             move.l 80(sp),d1
    1f46:	             jsr -684(a6)
    1f4a:	             move.l d0,76(sp)
    1f4e:	             move.l 76(sp),d0
    1f52:	             move.l d0,72(sp)
  if( !tmpmask)
    1f56:	         ,-- bne.s 1f66 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1f58:	         |   pea 17e27 <PutChar+0x2b1>
    1f5e:	         |   jsr 170d4 <KPrintF>
    1f64:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1f66:	         '-> move.w 132(sp),d0
    1f6a:	             movea.w d0,a1
    1f6c:	             move.w 134(sp),d0
    1f70:	             movea.w d0,a0
    1f72:	             clr.l -(sp)
    1f74:	             pea 5 <_start+0x5>
    1f78:	             move.l a1,-(sp)
    1f7a:	             move.l a0,-(sp)
    1f7c:	             pea 17e5b <PutChar+0x2e5>
    1f82:	             move.l 108(sp),-(sp)
    1f86:	             jsr 171bc <debug_register_bitmap>
    1f8c:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1f90:	             move.w 132(sp),d0
    1f94:	             movea.w d0,a1
    1f96:	             move.w 134(sp),d0
    1f9a:	             movea.w d0,a0
    1f9c:	             clr.l -(sp)
    1f9e:	             pea 1 <_start+0x1>
    1fa2:	             move.l a1,-(sp)
    1fa4:	             move.l a0,-(sp)
    1fa6:	             pea 17e69 <PutChar+0x2f3>
    1fac:	             move.l 108(sp),-(sp)
    1fb0:	             jsr 171bc <debug_register_bitmap>
    1fb6:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1fba:	             move.l 164(sp),68(sp)
    1fc0:	             move.l 88(sp),64(sp)
    1fc6:	             moveq #2,d0
    1fc8:	             move.l d0,60(sp)
    1fcc:	             move.w 122(sp),d0
    1fd0:	             lsr.w #1,d0
    1fd2:	             move.w d0,d0
    1fd4:	             andi.l #65535,d0
    1fda:	             move.l d0,56(sp)
    1fde:	             move.l 1c7e0 <DOSBase>,d0
    1fe4:	             movea.l d0,a6
    1fe6:	             move.l 68(sp),d1
    1fea:	             move.l 64(sp),d2
    1fee:	             move.l 60(sp),d3
    1ff2:	             move.l 56(sp),d4
    1ff6:	             jsr -324(a6)
    1ffa:	             move.l d0,52(sp)
    1ffe:	             move.l 52(sp),d0
    2002:	             move.w d0,50(sp)
  if(!count) {
    2006:	         ,-- bne.s 201a <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2008:	         |   pea 17e75 <PutChar+0x2ff>
    200e:	         |   jsr 170d4 <KPrintF>
    2014:	         |   addq.l #4,sp
    return;
    2016:	   ,-----|-- bra.w 2266 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    201a:	   |     '-> move.l 164(sp),46(sp)
    2020:	   |         move.l 72(sp),42(sp)
    2026:	   |         moveq #2,d2
    2028:	   |         move.l d2,38(sp)
    202c:	   |         move.w 124(sp),d0
    2030:	   |         lsr.w #1,d0
    2032:	   |         move.w d0,d0
    2034:	   |         andi.l #65535,d0
    203a:	   |         move.l d0,34(sp)
    203e:	   |         move.l 1c7e0 <DOSBase>,d0
    2044:	   |         movea.l d0,a6
    2046:	   |         move.l 46(sp),d1
    204a:	   |         move.l 42(sp),d2
    204e:	   |         move.l 38(sp),d3
    2052:	   |         move.l 34(sp),d4
    2056:	   |         jsr -324(a6)
    205a:	   |         move.l d0,30(sp)
    205e:	   |         move.l 30(sp),d0
    2062:	   |         move.w d0,50(sp)
   

  if(!count) {
    2066:	   |     ,-- bne.s 207a <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    2068:	   |     |   pea 17e75 <PutChar+0x2ff>
    206e:	   |     |   jsr 170d4 <KPrintF>
    2074:	   |     |   addq.l #4,sp
    return;
    2076:	   +-----|-- bra.w 2266 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    207a:	   |     '-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2082:	   |         move.l 1c6ee <CstBackDrop>,d0
    2088:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    208c:	   |         move.l 172(sp),d0
    2090:	   |         move.w d0,d1
    2092:	   |         muls.w 126(sp),d1
    2096:	   |         move.l 168(sp),d0
    209a:	   |     ,-- bpl.s 209e <CstLoadBackdrop+0x2ea>
    209c:	   |     |   addq.l #7,d0
    209e:	   |     '-> asr.l #3,d0
    20a0:	   |         move.l d0,d0
    20a2:	   |         movea.w d1,a0
    20a4:	   |         adda.w d0,a0
    20a6:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    20aa:	   |         moveq #0,d0
    20ac:	   |         move.w 24(sp),d0
    20b0:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    20b4:	   |         pea 17e90 <PutChar+0x31a>
    20ba:	   |         jsr 170d4 <KPrintF>
    20c0:	   |         addq.l #4,sp


  WaitBlit();
    20c2:	   |         move.l 1c7e4 <GfxBase>,d0
    20c8:	   |         movea.l d0,a6
    20ca:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    20ce:	   |         movea.l 26(sp),a0
    20d2:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    20d8:	   |         movea.l 26(sp),a0
    20dc:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    20e2:	   |         movea.l 26(sp),a0
    20e6:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    20ec:	   |         movea.l 26(sp),a0
    20f0:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    20f6:	   |         move.w 126(sp),d0
    20fa:	   |         sub.w 130(sp),d0
    20fe:	   |         movea.l 26(sp),a0
    2102:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2106:	   |         move.w 126(sp),d0
    210a:	   |         sub.w 130(sp),d0
    210e:	   |         movea.l 26(sp),a0
    2112:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2116:	   |         movea.l 26(sp),a0
    211a:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2120:	   |         movea.l 26(sp),a0
    2124:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    212a:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2130:	   |         clr.l 136(sp)
    2134:	   |     ,-- bra.s 2196 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    2136:	   |  ,--|-> movea.l 26(sp),a0
    213a:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2140:	   |  |  |   move.l 140(sp),d0
    2144:	   |  |  |   movea.l 26(sp),a0
    2148:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    214c:	   |  |  |   move.l 144(sp),d0
    2150:	   |  |  |   movea.l 26(sp),a0
    2154:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    2158:	   |  |  |   move.l 144(sp),d0
    215c:	   |  |  |   movea.l 26(sp),a0
    2160:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2164:	   |  |  |   move.w 132(sp),d0
    2168:	   |  |  |   lsl.w #6,d0
    216a:	   |  |  |   add.w 128(sp),d0
    216e:	   |  |  |   movea.l 26(sp),a0
    2172:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    2176:	   |  |  |   moveq #0,d0
    2178:	   |  |  |   move.w 124(sp),d0
    217c:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    2180:	   |  |  |   move.w 1c6ec <CstBackdropSizePlane>,d0
    2186:	   |  |  |   move.w d0,d0
    2188:	   |  |  |   andi.l #65535,d0
    218e:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2192:	   |  |  |   addq.l #1,136(sp)
    2196:	   |  |  '-> moveq #4,d0
    2198:	   |  |      cmp.l 136(sp),d0
    219c:	   |  '----- bge.s 2136 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    219e:	   |         move.l 1c7e4 <GfxBase>,d0
    21a4:	   |         movea.l d0,a6
    21a6:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    21aa:	   |         pea 17eaf <PutChar+0x339>
    21b0:	   |         jsr 170d4 <KPrintF>
    21b6:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    21b8:	   |         move.l 88(sp),20(sp)
    21be:	   |         move.l 1c7d8 <SysBase>,d0
    21c4:	   |         movea.l d0,a6
    21c6:	   |         movea.l 20(sp),a1
    21ca:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    21ce:	   |         move.l 72(sp),16(sp)
    21d4:	   |         move.l 1c7d8 <SysBase>,d0
    21da:	   |         movea.l d0,a6
    21dc:	   |         movea.l 16(sp),a1
    21e0:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    21e4:	   |         move.w #2,1c6fa <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    21ec:	   |         move.l 1c72c <winWidth>,d0
    21f2:	   |         lsr.l #4,d0
    21f4:	   |         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    21fa:	   |         move.l a0,d1
    21fc:	   |         addq.l #2,d1
    21fe:	   |         move.l d1,1c710 <CstBackDropBufferApplyCursor>
    2204:	   |         move.l d0,d0
    2206:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2208:	   |         move.l 1c730 <winHeight>,d0
    220e:	   |         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    2214:	   |         move.l a0,d1
    2216:	   |         addq.l #2,d1
    2218:	   |         move.l d1,1c710 <CstBackDropBufferApplyCursor>
    221e:	   |         move.l d0,d0
    2220:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2222:	   |         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    2228:	   |         move.l a0,d0
    222a:	   |         addq.l #2,d0
    222c:	   |         move.l d0,1c710 <CstBackDropBufferApplyCursor>
    2232:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2234:	   |         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    223a:	   |         move.l a0,d0
    223c:	   |         addq.l #2,d0
    223e:	   |         move.l d0,1c710 <CstBackDropBufferApplyCursor>
    2244:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    2246:	   |         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    224c:	   |         move.l a0,d0
    224e:	   |         addq.l #2,d0
    2250:	   |         move.l d0,1c710 <CstBackDropBufferApplyCursor>
    2256:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    2258:	   |         pea 17ecf <PutChar+0x359>
    225e:	   |         jsr 170d4 <KPrintF>
    2264:	   |         addq.l #4,sp

}
    2266:	   '-------> movem.l (sp)+,d2-d4/a6
    226a:	             lea 144(sp),sp
    226e:	             rts

00002270 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    2270:	                lea -72(sp),sp
    2274:	                move.l a6,-(sp)
    2276:	                move.l d2,-(sp)
    2278:	                move.l 88(sp),d1
    227c:	                move.l 92(sp),d0
    2280:	                move.w d1,d1
    2282:	                move.w d1,10(sp)
    2286:	                move.w d0,d0
    2288:	                move.w d0,8(sp)
  UWORD *destination = 0;
    228c:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    2290:	                move.w #2,1c6fa <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2298:	                move.l 1c6ee <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    22a0:	                clr.l 56(sp)

  blitwidth = single->width/16;
    22a4:	                movea.l 84(sp),a0
    22a8:	                move.l (a0),d0
    22aa:	                movea.l d0,a0
    22ac:	                cmpa.w #0,a0
    22b0:	            ,-- bge.s 22b6 <CstPasteChar+0x46>
    22b2:	            |   lea 15(a0),a0
    22b6:	            '-> move.l a0,d0
    22b8:	                asr.l #4,d0
    22ba:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    22be:	            ,-- bne.s 22c6 <CstPasteChar+0x56>
    22c0:	            |   moveq #1,d0
    22c2:	            |   move.l d0,40(sp)

  if( y < 0) {
    22c6:	            '-> tst.w 8(sp)
    22ca:	         ,----- bge.s 2314 <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    22cc:	         |      movea.w 8(sp),a1
    22d0:	         |      movea.l 84(sp),a0
    22d4:	         |      move.l 4(a0),d0
    22d8:	         |      add.l a1,d0
    22da:	         |  ,-- bpl.s 22ee <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    22dc:	         |  |   pea 17ee9 <PutChar+0x373>
    22e2:	         |  |   jsr 170d4 <KPrintF>
    22e8:	         |  |   addq.l #4,sp
      return;
    22ea:	,--------|--|-- bra.w 29b0 <CstPasteChar+0x740>
    }
    ystartdst = 0;
    22ee:	|        |  '-> clr.l 52(sp)
    ystartsrc = y*-1;
    22f2:	|        |      move.w 8(sp),d0
    22f6:	|        |      ext.l d0
    22f8:	|        |      move.l d0,d1
    22fa:	|        |      neg.l d1
    22fc:	|        |      move.l d1,48(sp)
    blitheight = single->height+y;
    2300:	|        |      movea.l 84(sp),a0
    2304:	|        |      move.l 4(a0),d0
    2308:	|        |      movea.w 8(sp),a0
    230c:	|        |      add.l a0,d0
    230e:	|        |      move.l d0,44(sp)
    2312:	|     ,--|----- bra.s 2386 <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    2314:	|     |  '----> movea.w 8(sp),a1
    2318:	|     |         movea.l 84(sp),a0
    231c:	|     |         move.l 4(a0),d0
    2320:	|     |         move.l a1,d1
    2322:	|     |         add.l d0,d1
    2324:	|     |         move.l 1c730 <winHeight>,d0
    232a:	|     |         cmp.l d1,d0
    232c:	|     |  ,----- bge.s 236e <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    232e:	|     |  |      movea.w 8(sp),a0
    2332:	|     |  |      move.l 1c730 <winHeight>,d0
    2338:	|     |  |      cmp.l a0,d0
    233a:	|     |  |  ,-- bge.s 234e <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    233c:	|     |  |  |   pea 17ee9 <PutChar+0x373>
    2342:	|     |  |  |   jsr 170d4 <KPrintF>
    2348:	|     |  |  |   addq.l #4,sp
      return;
    234a:	+-----|--|--|-- bra.w 29b0 <CstPasteChar+0x740>
    }
    ystartdst = y;
    234e:	|     |  |  '-> movea.w 8(sp),a0
    2352:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    2356:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    235a:	|     |  |      move.l 1c730 <winHeight>,d0
    2360:	|     |  |      movea.w 8(sp),a0
    2364:	|     |  |      move.l d0,d1
    2366:	|     |  |      sub.l a0,d1
    2368:	|     |  |      move.l d1,44(sp)
    236c:	|     +--|----- bra.s 2386 <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    236e:	|     |  '----> movea.w 8(sp),a0
    2372:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    2376:	|     |         clr.l 48(sp)
    blitheight = single->height;
    237a:	|     |         movea.l 84(sp),a0
    237e:	|     |         move.l 4(a0),d0
    2382:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    2386:	|     '-------> tst.w 10(sp)
    238a:	|        ,----- bge.w 24fc <CstPasteChar+0x28c>
    if(x + single->width < 0) {
    238e:	|        |      movea.w 10(sp),a1
    2392:	|        |      movea.l 84(sp),a0
    2396:	|        |      move.l (a0),d0
    2398:	|        |      add.l a1,d0
    239a:	|        |  ,-- bpl.s 23ae <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    239c:	|        |  |   pea 17ee9 <PutChar+0x373>
    23a2:	|        |  |   jsr 170d4 <KPrintF>
    23a8:	|        |  |   addq.l #4,sp
      return;
    23aa:	+--------|--|-- bra.w 29b0 <CstPasteChar+0x740>

    }
    
    extrawords = 1;
    23ae:	|        |  '-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    23b4:	|        |      move.w 10(sp),d0
    23b8:	|        |  ,-- bpl.s 23be <CstPasteChar+0x14e>
    23ba:	|        |  |   addi.w #15,d0
    23be:	|        |  '-> asr.w #4,d0
    23c0:	|        |      neg.w d0
    23c2:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    23c6:	|        |      move.w 10(sp),d0
    23ca:	|        |      ext.l d0
    23cc:	|        |      neg.l d0
    23ce:	|        |      andi.l #-2147483633,d0
    23d4:	|        |  ,-- bpl.s 23de <CstPasteChar+0x16e>
    23d6:	|        |  |   subq.l #1,d0
    23d8:	|        |  |   moveq #-16,d1
    23da:	|        |  |   or.l d1,d0
    23dc:	|        |  |   addq.l #1,d0
    23de:	|        |  '-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    23e2:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    23e6:	|        |      movea.l 84(sp),a0
    23ea:	|        |      move.l 24(a0),d0
    23ee:	|        |      move.l d0,d1
    23f0:	|        |      moveq #0,d0
    23f2:	|        |      move.w 76(sp),d0
    23f6:	|        |      add.l d0,d0
    23f8:	|        |      move.l d1,d2
    23fa:	|        |      add.l d0,d2
    23fc:	|        |      movea.l 84(sp),a0
    2400:	|        |      move.l (a0),d0
    2402:	|        |      move.l 48(sp),-(sp)
    2406:	|        |      move.l d0,-(sp)
    2408:	|        |      jsr 17a60 <__mulsi3>
    240e:	|        |      addq.l #8,sp
    2410:	|        |      lsr.l #3,d0
    2412:	|        |      move.l d2,d1
    2414:	|        |      add.l d0,d1
    2416:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    241a:	|        |      move.l 1c72c <winWidth>,d0
    2420:	|        |      move.l 52(sp),-(sp)
    2424:	|        |      move.l d0,-(sp)
    2426:	|        |      jsr 17a60 <__mulsi3>
    242c:	|        |      addq.l #8,sp
    242e:	|        |      lsr.l #3,d0
    2430:	|        |      move.l 28(sp),d1
    2434:	|        |      add.l d1,d0
    2436:	|        |      move.l d0,d2
    2438:	|        |      subq.l #2,d2
    243a:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    243e:	|        |      move.l 1c72c <winWidth>,d0
    2444:	|        |      move.l 52(sp),-(sp)
    2448:	|        |      move.l d0,-(sp)
    244a:	|        |      jsr 17a60 <__mulsi3>
    2450:	|        |      addq.l #8,sp
    2452:	|        |      lsr.l #3,d0
    2454:	|        |      move.l 28(sp),d1
    2458:	|        |      add.l d1,d0
    245a:	|        |      move.l d0,d1
    245c:	|        |      subq.l #2,d1
    245e:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    2462:	|        |      moveq #0,d0
    2464:	|        |      move.w 74(sp),d0
    2468:	|        |      moveq #16,d1
    246a:	|        |      sub.l d0,d1
    246c:	|        |      move.l d1,d0
    246e:	|        |      moveq #12,d2
    2470:	|        |      lsl.l d2,d0
    2472:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2476:	|        |      movea.l 84(sp),a0
    247a:	|        |      move.l (a0),d0
    247c:	|        |      movea.l d0,a0
    247e:	|        |      cmpa.w #0,a0
    2482:	|        |  ,-- bge.s 2488 <CstPasteChar+0x218>
    2484:	|        |  |   lea 15(a0),a0
    2488:	|        |  '-> move.l a0,d0
    248a:	|        |      asr.l #4,d0
    248c:	|        |      move.l d0,d0
    248e:	|        |      add.w 76(sp),d0
    2492:	|        |      movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    2498:	|        |      move.l a0,d1
    249a:	|        |      addq.l #2,d1
    249c:	|        |      move.l d1,1c710 <CstBackDropBufferApplyCursor>
    24a2:	|        |      add.w 78(sp),d0
    24a6:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    24a8:	|        |      movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    24ae:	|        |      move.l a0,d0
    24b0:	|        |      addq.l #2,d0
    24b2:	|        |      move.l d0,1c710 <CstBackDropBufferApplyCursor>
    24b8:	|        |      move.l 44(sp),d0
    24bc:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    24be:	|        |      movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    24c4:	|        |      move.l a0,d0
    24c6:	|        |      addq.l #2,d0
    24c8:	|        |      move.l d0,1c710 <CstBackDropBufferApplyCursor>
    24ce:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    24d0:	|        |      movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    24d6:	|        |      move.l a0,d0
    24d8:	|        |      addq.l #2,d0
    24da:	|        |      move.l d0,1c710 <CstBackDropBufferApplyCursor>
    24e0:	|        |      move.l 52(sp),d0
    24e4:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    24e6:	|        |      movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    24ec:	|        |      move.l a0,d0
    24ee:	|        |      addq.l #2,d0
    24f0:	|        |      move.l d0,1c710 <CstBackDropBufferApplyCursor>
    24f6:	|        |      clr.w (a0)
    24f8:	|     ,--|----- bra.w 2810 <CstPasteChar+0x5a0>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    24fc:	|     |  '----> movea.w 10(sp),a1
    2500:	|     |         movea.l 84(sp),a0
    2504:	|     |         move.l (a0),d0
    2506:	|     |         move.l a1,d1
    2508:	|     |         add.l d0,d1
    250a:	|     |         move.l 1c72c <winWidth>,d0
    2510:	|     |         cmp.l d1,d0
    2512:	|     |  ,----- bge.w 26ae <CstPasteChar+0x43e>

    if(x - single->width > (int) winWidth)
    2516:	|     |  |      movea.w 10(sp),a1
    251a:	|     |  |      movea.l 84(sp),a0
    251e:	|     |  |      move.l (a0),d0
    2520:	|     |  |      move.l a1,d1
    2522:	|     |  |      sub.l d0,d1
    2524:	|     |  |      move.l 1c72c <winWidth>,d0
    252a:	|     |  |      cmp.l d1,d0
    252c:	|     |  |  ,-- bge.s 2540 <CstPasteChar+0x2d0>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    252e:	|     |  |  |   pea 17ee9 <PutChar+0x373>
    2534:	|     |  |  |   jsr 170d4 <KPrintF>
    253a:	|     |  |  |   addq.l #4,sp
      return;
    253c:	+-----|--|--|-- bra.w 29b0 <CstPasteChar+0x740>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2540:	|     |  |  '-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2544:	|     |  |      movea.w 10(sp),a1
    2548:	|     |  |      movea.l 84(sp),a0
    254c:	|     |  |      move.l (a0),d0
    254e:	|     |  |      add.l a1,d0
    2550:	|     |  |      move.l d0,d1
    2552:	|     |  |      move.l 1c72c <winWidth>,d0
    2558:	|     |  |      sub.l d0,d1
    255a:	|     |  |      move.l d1,d0
    255c:	|     |  |      lsr.l #4,d0
    255e:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    2562:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2566:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    256c:	|     |  |      movea.l 84(sp),a0
    2570:	|     |  |      move.l 24(a0),d0
    2574:	|     |  |      move.l d0,d2
    2576:	|     |  |      movea.l 84(sp),a0
    257a:	|     |  |      move.l (a0),d0
    257c:	|     |  |      move.l 48(sp),-(sp)
    2580:	|     |  |      move.l d0,-(sp)
    2582:	|     |  |      jsr 17a60 <__mulsi3>
    2588:	|     |  |      addq.l #8,sp
    258a:	|     |  |      lsr.l #3,d0
    258c:	|     |  |      move.l d2,d1
    258e:	|     |  |      add.l d0,d1
    2590:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2594:	|     |  |      move.l 1c72c <winWidth>,d0
    259a:	|     |  |      move.l 52(sp),-(sp)
    259e:	|     |  |      move.l d0,-(sp)
    25a0:	|     |  |      jsr 17a60 <__mulsi3>
    25a6:	|     |  |      addq.l #8,sp
    25a8:	|     |  |      lsr.l #3,d0
    25aa:	|     |  |      move.l 28(sp),d1
    25ae:	|     |  |      add.l d0,d1
    25b0:	|     |  |      move.w 10(sp),d0
    25b4:	|     |  |  ,-- bpl.s 25ba <CstPasteChar+0x34a>
    25b6:	|     |  |  |   addi.w #15,d0
    25ba:	|     |  |  '-> asr.w #4,d0
    25bc:	|     |  |      movea.w d0,a0
    25be:	|     |  |      move.l a0,d0
    25c0:	|     |  |      add.l a0,d0
    25c2:	|     |  |      move.l d1,d2
    25c4:	|     |  |      add.l d0,d2
    25c6:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    25ca:	|     |  |      move.l 1c72c <winWidth>,d0
    25d0:	|     |  |      move.l 52(sp),-(sp)
    25d4:	|     |  |      move.l d0,-(sp)
    25d6:	|     |  |      jsr 17a60 <__mulsi3>
    25dc:	|     |  |      addq.l #8,sp
    25de:	|     |  |      lsr.l #3,d0
    25e0:	|     |  |      move.l 28(sp),d1
    25e4:	|     |  |      add.l d0,d1
    25e6:	|     |  |      move.w 10(sp),d0
    25ea:	|     |  |  ,-- bpl.s 25f0 <CstPasteChar+0x380>
    25ec:	|     |  |  |   addi.w #15,d0
    25f0:	|     |  |  '-> asr.w #4,d0
    25f2:	|     |  |      movea.w d0,a0
    25f4:	|     |  |      move.l a0,d0
    25f6:	|     |  |      add.l a0,d0
    25f8:	|     |  |      move.l d1,d2
    25fa:	|     |  |      add.l d0,d2
    25fc:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    2600:	|     |  |      movea.l 84(sp),a0
    2604:	|     |  |      move.l (a0),d0
    2606:	|     |  |      andi.l #-2147483633,d0
    260c:	|     |  |  ,-- bpl.s 2616 <CstPasteChar+0x3a6>
    260e:	|     |  |  |   subq.l #1,d0
    2610:	|     |  |  |   moveq #-16,d1
    2612:	|     |  |  |   or.l d1,d0
    2614:	|     |  |  |   addq.l #1,d0
    2616:	|     |  |  '-> moveq #12,d2
    2618:	|     |  |      lsl.l d2,d0
    261a:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    261e:	|     |  |      movea.l 84(sp),a0
    2622:	|     |  |      move.l (a0),d0
    2624:	|     |  |      movea.l d0,a0
    2626:	|     |  |      cmpa.w #0,a0
    262a:	|     |  |  ,-- bge.s 2630 <CstPasteChar+0x3c0>
    262c:	|     |  |  |   lea 15(a0),a0
    2630:	|     |  |  '-> move.l a0,d0
    2632:	|     |  |      asr.l #4,d0
    2634:	|     |  |      move.l d0,d0
    2636:	|     |  |      movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    263c:	|     |  |      move.l a0,d1
    263e:	|     |  |      addq.l #2,d1
    2640:	|     |  |      move.l d1,1c710 <CstBackDropBufferApplyCursor>
    2646:	|     |  |      add.w 76(sp),d0
    264a:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    264c:	|     |  |      movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    2652:	|     |  |      move.l a0,d0
    2654:	|     |  |      addq.l #2,d0
    2656:	|     |  |      move.l d0,1c710 <CstBackDropBufferApplyCursor>
    265c:	|     |  |      move.l 44(sp),d0
    2660:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2662:	|     |  |      move.w 10(sp),d0
    2666:	|     |  |  ,-- bpl.s 266c <CstPasteChar+0x3fc>
    2668:	|     |  |  |   addi.w #15,d0
    266c:	|     |  |  '-> asr.w #4,d0
    266e:	|     |  |      movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    2674:	|     |  |      move.l a0,d1
    2676:	|     |  |      addq.l #2,d1
    2678:	|     |  |      move.l d1,1c710 <CstBackDropBufferApplyCursor>
    267e:	|     |  |      add.w d0,d0
    2680:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2682:	|     |  |      movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    2688:	|     |  |      move.l a0,d0
    268a:	|     |  |      addq.l #2,d0
    268c:	|     |  |      move.l d0,1c710 <CstBackDropBufferApplyCursor>
    2692:	|     |  |      move.l 52(sp),d0
    2696:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2698:	|     |  |      movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    269e:	|     |  |      move.l a0,d0
    26a0:	|     |  |      addq.l #2,d0
    26a2:	|     |  |      move.l d0,1c710 <CstBackDropBufferApplyCursor>
    26a8:	|     |  |      clr.w (a0)
    26aa:	|     +--|----- bra.w 2810 <CstPasteChar+0x5a0>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    26ae:	|     |  '----> move.w #1,78(sp)
    cutwordssource = 0;
    26b4:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    26b8:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    26bc:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    26c0:	|     |         movea.l 84(sp),a0
    26c4:	|     |         move.l 24(a0),d0
    26c8:	|     |         move.l d0,d2
    26ca:	|     |         movea.l 84(sp),a0
    26ce:	|     |         move.l (a0),d0
    26d0:	|     |         movea.l d0,a0
    26d2:	|     |         cmpa.w #0,a0
    26d6:	|     |     ,-- bge.s 26dc <CstPasteChar+0x46c>
    26d8:	|     |     |   lea 15(a0),a0
    26dc:	|     |     '-> move.l a0,d0
    26de:	|     |         asr.l #4,d0
    26e0:	|     |         move.l 48(sp),-(sp)
    26e4:	|     |         move.l d0,-(sp)
    26e6:	|     |         jsr 17a60 <__mulsi3>
    26ec:	|     |         addq.l #8,sp
    26ee:	|     |         add.l d0,d0
    26f0:	|     |         move.l d2,d1
    26f2:	|     |         add.l d0,d1
    26f4:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26f8:	|     |         move.l 1c72c <winWidth>,d0
    26fe:	|     |         move.l 52(sp),-(sp)
    2702:	|     |         move.l d0,-(sp)
    2704:	|     |         jsr 17a60 <__mulsi3>
    270a:	|     |         addq.l #8,sp
    270c:	|     |         lsr.l #3,d0
    270e:	|     |         move.l 28(sp),d1
    2712:	|     |         add.l d0,d1
    2714:	|     |         move.w 10(sp),d0
    2718:	|     |     ,-- bpl.s 271e <CstPasteChar+0x4ae>
    271a:	|     |     |   addi.w #15,d0
    271e:	|     |     '-> asr.w #4,d0
    2720:	|     |         movea.w d0,a0
    2722:	|     |         move.l a0,d0
    2724:	|     |         add.l a0,d0
    2726:	|     |         move.l d1,d2
    2728:	|     |         add.l d0,d2
    272a:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    272e:	|     |         move.l 1c72c <winWidth>,d0
    2734:	|     |         move.l 52(sp),-(sp)
    2738:	|     |         move.l d0,-(sp)
    273a:	|     |         jsr 17a60 <__mulsi3>
    2740:	|     |         addq.l #8,sp
    2742:	|     |         lsr.l #3,d0
    2744:	|     |         move.l 28(sp),d1
    2748:	|     |         add.l d0,d1
    274a:	|     |         move.w 10(sp),d0
    274e:	|     |     ,-- bpl.s 2754 <CstPasteChar+0x4e4>
    2750:	|     |     |   addi.w #15,d0
    2754:	|     |     '-> asr.w #4,d0
    2756:	|     |         movea.w d0,a0
    2758:	|     |         move.l a0,d0
    275a:	|     |         add.l a0,d0
    275c:	|     |         move.l d1,d2
    275e:	|     |         add.l d0,d2
    2760:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2764:	|     |         move.w 10(sp),d0
    2768:	|     |         andi.w #-32753,d0
    276c:	|     |     ,-- bpl.s 2776 <CstPasteChar+0x506>
    276e:	|     |     |   subq.w #1,d0
    2770:	|     |     |   ori.w #-16,d0
    2774:	|     |     |   addq.w #1,d0
    2776:	|     |     '-> ext.l d0
    2778:	|     |         moveq #12,d1
    277a:	|     |         lsl.l d1,d0
    277c:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2780:	|     |         movea.l 84(sp),a0
    2784:	|     |         move.l (a0),d0
    2786:	|     |         movea.l d0,a0
    2788:	|     |         cmpa.w #0,a0
    278c:	|     |     ,-- bge.s 2792 <CstPasteChar+0x522>
    278e:	|     |     |   lea 15(a0),a0
    2792:	|     |     '-> move.l a0,d0
    2794:	|     |         asr.l #4,d0
    2796:	|     |         move.l d0,d0
    2798:	|     |         add.w 76(sp),d0
    279c:	|     |         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    27a2:	|     |         move.l a0,d1
    27a4:	|     |         addq.l #2,d1
    27a6:	|     |         move.l d1,1c710 <CstBackDropBufferApplyCursor>
    27ac:	|     |         add.w 78(sp),d0
    27b0:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    27b2:	|     |         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    27b8:	|     |         move.l a0,d0
    27ba:	|     |         addq.l #2,d0
    27bc:	|     |         move.l d0,1c710 <CstBackDropBufferApplyCursor>
    27c2:	|     |         move.l 44(sp),d0
    27c6:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    27c8:	|     |         move.w 10(sp),d0
    27cc:	|     |     ,-- bpl.s 27d2 <CstPasteChar+0x562>
    27ce:	|     |     |   addi.w #15,d0
    27d2:	|     |     '-> asr.w #4,d0
    27d4:	|     |         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    27da:	|     |         move.l a0,d1
    27dc:	|     |         addq.l #2,d1
    27de:	|     |         move.l d1,1c710 <CstBackDropBufferApplyCursor>
    27e4:	|     |         add.w d0,d0
    27e6:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    27e8:	|     |         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    27ee:	|     |         move.l a0,d0
    27f0:	|     |         addq.l #2,d0
    27f2:	|     |         move.l d0,1c710 <CstBackDropBufferApplyCursor>
    27f8:	|     |         move.l 52(sp),d0
    27fc:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    27fe:	|     |         movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    2804:	|     |         move.l a0,d0
    2806:	|     |         addq.l #2,d0
    2808:	|     |         move.l d0,1c710 <CstBackDropBufferApplyCursor>
    280e:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2810:	|     '-------> moveq #0,d0
    2812:	|               move.w 74(sp),d0
    2816:	|               moveq #0,d1
    2818:	|               not.w d1
    281a:	|               asr.l d0,d1
    281c:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2820:	|               moveq #0,d1
    2822:	|               move.w 76(sp),d1
    2826:	|               moveq #0,d0
    2828:	|               move.w 78(sp),d0
    282c:	|               sub.l d0,d1
    282e:	|               move.l d1,d0
    2830:	|               add.w d0,d0
    2832:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2836:	|               move.l 1c72c <winWidth>,d0
    283c:	|               lsr.l #3,d0
    283e:	|               move.l d0,d2
    2840:	|               move.w 76(sp),d1
    2844:	|               sub.w 78(sp),d1
    2848:	|               move.l 40(sp),d0
    284c:	|               sub.w d0,d1
    284e:	|               move.w d1,d0
    2850:	|               add.w d1,d0
    2852:	|               add.w d2,d0
    2854:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2858:	|               move.l 1c72c <winWidth>,d0
    285e:	|               lsr.l #3,d0
    2860:	|               move.l d0,d2
    2862:	|               move.w 76(sp),d1
    2866:	|               sub.w 78(sp),d1
    286a:	|               move.l 40(sp),d0
    286e:	|               sub.w d0,d1
    2870:	|               move.w d1,d0
    2872:	|               add.w d1,d0
    2874:	|               add.w d2,d0
    2876:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    287a:	|               move.l #14675968,16(sp)
  WaitBlit();
    2882:	|               move.l 1c7e4 <GfxBase>,d0
    2888:	|               movea.l d0,a6
    288a:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    288e:	|               movea.l 16(sp),a0
    2892:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2898:	|               movea.l 16(sp),a0
    289c:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    28a2:	|               move.w 24(sp),d0
    28a6:	|               movea.l 16(sp),a0
    28aa:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    28ae:	|               move.w 22(sp),d0
    28b2:	|               movea.l 16(sp),a0
    28b6:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    28ba:	|               move.w 20(sp),d0
    28be:	|               movea.l 16(sp),a0
    28c2:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    28c6:	|               move.l 1c72c <winWidth>,d0
    28cc:	|               lsr.l #3,d0
    28ce:	|               move.l d0,d1
    28d0:	|               move.l 1c730 <winHeight>,d0
    28d6:	|               move.l d0,d0
    28d8:	|               move.w d1,d2
    28da:	|               muls.w d0,d2
    28dc:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    28e0:	|               move.w 1c6e6 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    28e8:	|               move.w 38(sp),d0
    28ec:	|               andi.w #1,d0
    28f0:	|               move.w d0,12(sp)
  if(tmp2) {
    28f4:	|        ,----- beq.s 28fe <CstPasteChar+0x68e>
    minterm = 0xbfa;
    28f6:	|        |      move.w #3066,36(sp)
    28fc:	|        |  ,-- bra.s 2904 <CstPasteChar+0x694>
  } else {
    minterm = 0xb0a;
    28fe:	|        '--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2904:	|           '-> clr.l 32(sp)
    2908:	|     ,-------- bra.w 29a6 <CstPasteChar+0x736>
  {

    custom->bltcon0 = bltcon0 + minterm;
    290c:	|  ,--|-------> move.l 56(sp),d0
    2910:	|  |  |         add.w 36(sp),d0
    2914:	|  |  |         movea.l 16(sp),a0
    2918:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    291c:	|  |  |         move.l 68(sp),d0
    2920:	|  |  |         movea.l 16(sp),a0
    2924:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2928:	|  |  |         move.l 64(sp),d0
    292c:	|  |  |         movea.l 16(sp),a0
    2930:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2934:	|  |  |         move.l 60(sp),d0
    2938:	|  |  |         movea.l 16(sp),a0
    293c:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2940:	|  |  |         move.l 44(sp),d0
    2944:	|  |  |         lsl.w #6,d0
    2946:	|  |  |         move.l 40(sp),d1
    294a:	|  |  |         add.w d1,d0
    294c:	|  |  |         sub.w 76(sp),d0
    2950:	|  |  |         add.w 78(sp),d0
    2954:	|  |  |         movea.l 16(sp),a0
    2958:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    295c:	|  |  |         moveq #0,d0
    295e:	|  |  |         move.w 14(sp),d0
    2962:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2966:	|  |  |         moveq #0,d0
    2968:	|  |  |         move.w 14(sp),d0
    296c:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2970:	|  |  |         move.w 38(sp),d0
    2974:	|  |  |         lsr.w #1,d0
    2976:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    297a:	|  |  |         move.w 38(sp),d1
    297e:	|  |  |         andi.w #1,d1
    2982:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2986:	|  |  |  ,----- beq.s 2990 <CstPasteChar+0x720>
      minterm = 0xbfa;
    2988:	|  |  |  |      move.w #3066,36(sp)
    298e:	|  |  |  |  ,-- bra.s 2996 <CstPasteChar+0x726>
    } else {
      minterm = 0xb0a;
    2990:	|  |  |  '--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2996:	|  |  |     '-> move.l 1c7e4 <GfxBase>,d0
    299c:	|  |  |         movea.l d0,a6
    299e:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    29a2:	|  |  |         addq.l #1,32(sp)
    29a6:	|  |  '-------> moveq #4,d2
    29a8:	|  |            cmp.l 32(sp),d2
    29ac:	|  '----------- bge.w 290c <CstPasteChar+0x69c>
 
  }   
}
    29b0:	'-------------> move.l (sp)+,d2
    29b2:	                movea.l (sp)+,a6
    29b4:	                lea 72(sp),sp
    29b8:	                rts

000029ba <CstRestoreScreen>:


void CstRestoreScreen()
{
    29ba:	                   lea -24(sp),sp
    29be:	                   move.l a6,-(sp)
    29c0:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    29c2:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    29ca:	                   move.l 1c708 <CstCleanupQueueDrawBuffer>,d0
    29d0:	,----------------- beq.w 2bd8 <CstRestoreScreen+0x21e>
    29d4:	|                  move.l 1c700 <CstDrawBuffer>,d0
    29da:	+----------------- beq.w 2bd8 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    29de:	|                  move.l 1c7e4 <GfxBase>,d0
    29e4:	|                  movea.l d0,a6
    29e6:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    29ea:	|                  movea.l 16(sp),a0
    29ee:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    29f4:	|                  movea.l 16(sp),a0
    29f8:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    29fe:	|                  movea.l 16(sp),a0
    2a02:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2a08:	|     ,----------- bra.w 2bcc <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2a0c:	|  ,--|----------> movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2a12:	|  |  |            move.l 4(a0),d0
    2a16:	|  |  |  ,-------- beq.w 2b9a <CstRestoreScreen+0x1e0>
    2a1a:	|  |  |  |         movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2a20:	|  |  |  |         movea.l 4(a0),a0
    2a24:	|  |  |  |         move.l 16(a0),d0
    2a28:	|  |  |  |         moveq #2,d1
    2a2a:	|  |  |  |         cmp.l d0,d1
    2a2c:	|  |  |  +-------- blt.w 2b9a <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a30:	|  |  |  |         move.l 1c72c <winWidth>,d0
    2a36:	|  |  |  |         lsr.l #3,d0
    2a38:	|  |  |  |         move.l d0,d1
    2a3a:	|  |  |  |         movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2a40:	|  |  |  |         move.w 8(a0),d0
    2a44:	|  |  |  |         add.w d0,d0
    2a46:	|  |  |  |         sub.w d0,d1
    2a48:	|  |  |  |         movea.l 16(sp),a0
    2a4c:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2a50:	|  |  |  |         move.l 1c72c <winWidth>,d0
    2a56:	|  |  |  |         lsr.l #3,d0
    2a58:	|  |  |  |         move.l d0,d1
    2a5a:	|  |  |  |         movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2a60:	|  |  |  |         move.w 8(a0),d0
    2a64:	|  |  |  |         add.w d0,d0
    2a66:	|  |  |  |         sub.w d0,d1
    2a68:	|  |  |  |         movea.l 16(sp),a0
    2a6c:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2a70:	|  |  |  |         movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2a76:	|  |  |  |         move.w 14(a0),d0
    2a7a:	|  |  |  |         move.w d0,d0
    2a7c:	|  |  |  |         andi.l #65535,d0
    2a82:	|  |  |  |         move.l 1c72c <winWidth>,d1
    2a88:	|  |  |  |         move.l d1,-(sp)
    2a8a:	|  |  |  |         move.l d0,-(sp)
    2a8c:	|  |  |  |         jsr 17a60 <__mulsi3>
    2a92:	|  |  |  |         addq.l #8,sp
    2a94:	|  |  |  |         move.l d0,d1
    2a96:	|  |  |  |         lsr.l #3,d1
    2a98:	|  |  |  |         move.l 1c6ee <CstBackDrop>,d0
    2a9e:	|  |  |  |         add.l d0,d1
    2aa0:	|  |  |  |         movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2aa6:	|  |  |  |         move.w 12(a0),d0
    2aaa:	|  |  |  |         move.w d0,d0
    2aac:	|  |  |  |         andi.l #65535,d0
    2ab2:	|  |  |  |         move.l d1,d2
    2ab4:	|  |  |  |         add.l d0,d2
    2ab6:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2aba:	|  |  |  |         movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2ac0:	|  |  |  |         move.w 14(a0),d0
    2ac4:	|  |  |  |         move.w d0,d0
    2ac6:	|  |  |  |         andi.l #65535,d0
    2acc:	|  |  |  |         move.l 1c72c <winWidth>,d1
    2ad2:	|  |  |  |         move.l d1,-(sp)
    2ad4:	|  |  |  |         move.l d0,-(sp)
    2ad6:	|  |  |  |         jsr 17a60 <__mulsi3>
    2adc:	|  |  |  |         addq.l #8,sp
    2ade:	|  |  |  |         move.l d0,d1
    2ae0:	|  |  |  |         lsr.l #3,d1
    2ae2:	|  |  |  |         move.l 1c700 <CstDrawBuffer>,d0
    2ae8:	|  |  |  |         add.l d0,d1
    2aea:	|  |  |  |         movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2af0:	|  |  |  |         move.w 12(a0),d0
    2af4:	|  |  |  |         move.w d0,d0
    2af6:	|  |  |  |         andi.l #65535,d0
    2afc:	|  |  |  |         move.l d1,d2
    2afe:	|  |  |  |         add.l d0,d2
    2b00:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b04:	|  |  |  |         clr.l 20(sp)
    2b08:	|  |  |  |     ,-- bra.w 2b90 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2b0c:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2b10:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b14:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2b18:	|  |  |  |  |  |   move.l 24(sp),d0
    2b1c:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b20:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2b24:	|  |  |  |  |  |   movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2b2a:	|  |  |  |  |  |   move.w 10(a0),d0
    2b2e:	|  |  |  |  |  |   lsl.w #6,d0
    2b30:	|  |  |  |  |  |   movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2b36:	|  |  |  |  |  |   move.w 8(a0),d1
    2b3a:	|  |  |  |  |  |   add.w d1,d0
    2b3c:	|  |  |  |  |  |   movea.l 16(sp),a0
    2b40:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2b44:	|  |  |  |  |  |   move.l 1c72c <winWidth>,d0
    2b4a:	|  |  |  |  |  |   lsr.l #3,d0
    2b4c:	|  |  |  |  |  |   move.l 1c730 <winHeight>,d1
    2b52:	|  |  |  |  |  |   move.l d1,-(sp)
    2b54:	|  |  |  |  |  |   move.l d0,-(sp)
    2b56:	|  |  |  |  |  |   jsr 17a60 <__mulsi3>
    2b5c:	|  |  |  |  |  |   addq.l #8,sp
    2b5e:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2b62:	|  |  |  |  |  |   move.l 1c72c <winWidth>,d0
    2b68:	|  |  |  |  |  |   lsr.l #3,d0
    2b6a:	|  |  |  |  |  |   move.l 1c730 <winHeight>,d1
    2b70:	|  |  |  |  |  |   move.l d1,-(sp)
    2b72:	|  |  |  |  |  |   move.l d0,-(sp)
    2b74:	|  |  |  |  |  |   jsr 17a60 <__mulsi3>
    2b7a:	|  |  |  |  |  |   addq.l #8,sp
    2b7c:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2b80:	|  |  |  |  |  |   move.l 1c7e4 <GfxBase>,d0
    2b86:	|  |  |  |  |  |   movea.l d0,a6
    2b88:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b8c:	|  |  |  |  |  |   addq.l #1,20(sp)
    2b90:	|  |  |  |  |  '-> moveq #4,d0
    2b92:	|  |  |  |  |      cmp.l 20(sp),d0
    2b96:	|  |  |  |  '----- bge.w 2b0c <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2b9a:	|  |  |  '-------> move.l 1c708 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2ba2:	|  |  |            movea.l 1c708 <CstCleanupQueueDrawBuffer>,a0
    2ba8:	|  |  |            move.l 16(a0),d0
    2bac:	|  |  |            move.l d0,1c708 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2bb2:	|  |  |            move.l 12(sp),8(sp)
    2bb8:	|  |  |            move.l 1c7d8 <SysBase>,d0
    2bbe:	|  |  |            movea.l d0,a6
    2bc0:	|  |  |            movea.l 8(sp),a1
    2bc4:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2bc8:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2bcc:	|  |  '----------> move.l 1c708 <CstCleanupQueueDrawBuffer>,d0
    2bd2:	|  '-------------- bne.w 2a0c <CstRestoreScreen+0x52>
    2bd6:	|              ,-- bra.s 2bda <CstRestoreScreen+0x220>
    return;
    2bd8:	'--------------|-> nop
  }
  
}
    2bda:	               '-> move.l (sp)+,d2
    2bdc:	                   movea.l (sp)+,a6
    2bde:	                   lea 24(sp),sp
    2be2:	                   rts

00002be4 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2be4:	                                                                               lea -44(sp),sp
    2be8:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2bec:	                                                                               movea.l 92(sp),a2
    2bf0:	                                                                               move.l 96(sp),80(sp)
    2bf6:	                                                                               move.l 100(sp),d4
    2bfa:	                                                                               move.l 104(sp),56(sp)
    2c00:	                                                                               move.l 108(sp),d2
    2c04:	                                                                               move.w d4,d3
    2c06:	                                                                               move.w 58(sp),d6
    2c0a:	                                                                               movea.w d2,a6
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2c0c:	                                                                               movea.w d6,a5
    2c0e:	                                                                               movea.w d4,a4
    2c10:	                                                                               move.l a5,-(sp)
    2c12:	                                                                               move.l a4,-(sp)
    2c14:	                                                                               move.l 1c834 <zBuffer>,-(sp)
    2c1a:	                                                                               move.l a2,-(sp)
    2c1c:	                                                                               jsr 14e8 <CstDrawZBuffer>
    2c22:	                                                                               move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2c24:	                                                                               lea 16(sp),sp
    2c28:	                                                                               moveq #1,d0
    2c2a:	                                                                               cmp.w d2,d0
    2c2c:	                                                ,----------------------------- beq.w 303e <CstScaleSprite+0x45a>
    2c30:	                                                |                              moveq #2,d1
    2c32:	                                                |                              cmp.w d2,d1
    2c34:	                                                |                       ,----- beq.w 2ef8 <CstScaleSprite+0x314>
    2c38:	                                                |                       |      suba.l a3,a3
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2c3a:	                                                |  ,--------------------|----> move.l 4(a2),d1
    2c3e:	                                                |  |                    |      move.l a5,d0
    2c40:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2c42:	                                                |  |                    |      tst.w d6
    2c44:	                                                |  |           ,--------|----- blt.w 2f14 <CstScaleSprite+0x330>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2c48:	                                                |  |           |  ,-----|----> movea.l 1c730 <winHeight>,a0
    2c4e:	                                                |  |           |  |     |      cmp.l a0,d0
    2c50:	                                                |  |  ,--------|--|-----|----- ble.w 3048 <CstScaleSprite+0x464>
    if(y  > (int) winHeight) {
    2c54:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2c56:	                     ,--------------------------|--|--|--------|--|-----|----- blt.w 310a <CstScaleSprite+0x526>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2c5a:	                     |                          |  |  |        |  |     |      move.l a5,44(sp)
    ystartsrc = 0;
    blitheight = winHeight-y;
    2c5e:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2c60:	                     |                          |  |  |        |  |     |      move.l a0,66(sp)
    ystartsrc = 0;
    2c64:	                     |                          |  |  |        |  |     |      suba.l a1,a1


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2c66:	                     |                          |  |  |  ,-----|--|-----|----> move.l (a2),d1
    2c68:	                     |                          |  |  |  |     |  |     |      move.l a4,d0
    2c6a:	                     |                          |  |  |  |     |  |     |      add.l d1,d0
  if( x < 0) 
    2c6c:	                     |                          |  |  |  |     |  |     |      tst.w d3
    2c6e:	                     |                          |  |  |  |     |  |  ,--|----- blt.w 2f34 <CstScaleSprite+0x350>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor++ = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2c72:	                     |                          |  |  |  |     |  |  |  |  ,-> move.l 1c72c <winWidth>,d3
    2c78:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d3,d0
    2c7a:	                     |                          |  |  |  |  ,--|--|--|--|--|-- ble.w 3056 <CstScaleSprite+0x472>

    if(x - single->width > (int) winWidth)
    2c7e:	                     |                          |  |  |  |  |  |  |  |  |  |   suba.l d1,a4
    2c80:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpa.l d3,a4
    2c82:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 310a <CstScaleSprite+0x526>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2c86:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d2
    2c88:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d2
    2c8a:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d2
    2c8c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2c8e:	                     |                          |  |  |  |  |  |  |  |  |  |   lea 17a60 <__mulsi3>,a4
    2c94:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a1,-(sp)
    2c96:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2c98:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,56(sp)
    2c9c:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2c9e:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2ca0:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2ca2:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2ca4:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2ca8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2cac:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 44(sp),-(sp)
    2cb0:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2cb2:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2cb4:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2cb6:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2cb8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2cba:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    2cbc:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    2cbe:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a1
    2cc0:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a1
    2cc2:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a3
    2cc4:	                     |                          |  |  |  |  |  |  |  |  |  |   lea (0,a3,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2cc8:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2cca:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2ccc:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    2cd2:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a4,d7
    2cd4:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d7
    2cd6:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d7,a4
      CstCleanupQueueDrawBuffer->height = blitheight;
    2cd8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2cde:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w a0,a0
    2ce0:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w a0,66(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2ce4:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 46(sp),44(sp)
      *CstBackDropBufferApplyCursor++ = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2cea:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d2,a3
    2cec:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w d2,a3
    bltcon0 = 0xfca + ((x%16) << 12);
    2cee:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d7
    2cf0:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d7,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2cf2:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2cf6:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    2cfa:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2cfc:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    2cfe:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    2d00:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d7,72(sp)
    if( destinationtype == SCREEN)
    2d04:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 48(sp),d1
    2d08:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #1,d7
    2d0a:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.w a6,d7
    2d0c:	            ,--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 341e <CstScaleSprite+0x83a>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2d10:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    2d16:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    2d18:	   ,--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 34c6 <CstScaleSprite+0x8e2>
    2d1c:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2d1e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2d20:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2d22:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2d28:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2d2e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2d34:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 10(a0),a1
    2d38:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1c710 <CstBackDropBufferApplyCursor>
    2d3e:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2d42:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2d48:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2d4a:	,--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d3
    2d4c:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,d4
    2d4e:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d3,d4
    2d50:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d1
    2d52:	|  |  ,-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3314 <CstScaleSprite+0x730>
    2d56:	|  |  |  ,--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    2d58:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    2d5a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l #116708,d3
    2d60:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2d62:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2d64:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2d68:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e5b>
  custom->bltalwm = bltalwm;
    2d70:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e5d>
  custom->bltamod = bltamod;
    2d76:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
  custom->bltbmod = bltbmod;
    2d7c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e79>
  custom->bltcmod = bltcmod;
    2d82:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e77>
  custom->bltdmod = bltdmod;
    2d88:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
  custom->bltcon0 = bltcon0;
    2d8e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e57>
  custom->bltcon1 = bltcon1;  
    2d96:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e59>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    2d9e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2da0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),d7
    2da4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    2da6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    2da8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d1
    2daa:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d1
    bltbpt += bltbptplus;
    2dae:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d1
    2db4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    2db6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1c72c <winWidth>,d4
    2dbc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    2dbe:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1c732 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    2dc4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    2dca:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltbpt = (APTR) bltbpt;
    2dd0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
    custom->bltcpt = (APTR) bltcpt;
    2dd8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e5f>
    custom->bltdpt = (APTR) bltdpt;
    2dde:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2de4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2de6:	|  |  |  |  |  ,-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3212 <CstScaleSprite+0x62e>
    2dea:	|  |  |  |  |  |  ,--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2dec:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2dee:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2df0:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2df2:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    bltbpt += bltbptplus;
    2df8:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a4
    2dfc:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2dfe:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    2e00:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e02:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e04:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e08:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e0a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltbpt = (APTR) bltbpt;
    2e10:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
    custom->bltcpt = (APTR) bltcpt;
    2e16:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e5f>
    custom->bltdpt = (APTR) bltdpt;
    2e1c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e22:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e24:	|  |  |  |  |  |  |  |                 ,--------|--|--|--|--|--|--|--|--|--|-- blt.w 3254 <CstScaleSprite+0x670>
    2e28:	|  |  |  |  |  |  |  |                 |     ,--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e2a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e2c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e2e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e30:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    bltbpt += bltbptplus;
    2e36:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2e38:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2e3a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e3c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e3e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e42:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e44:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltbpt = (APTR) bltbpt;
    2e4a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
    custom->bltcpt = (APTR) bltcpt;
    2e50:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e5f>
    custom->bltdpt = (APTR) bltdpt;
    2e56:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e5c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e5e:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 3292 <CstScaleSprite+0x6ae>
    2e62:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e64:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2e66:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2e68:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2e6a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    bltbpt += bltbptplus;
    2e70:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    2e72:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    2e74:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2e76:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2e78:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e7c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2e7e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltbpt = (APTR) bltbpt;
    2e84:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
    custom->bltcpt = (APTR) bltcpt;
    2e8a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e5f>
    custom->bltdpt = (APTR) bltdpt;
    2e90:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2e96:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2e98:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 32d0 <CstScaleSprite+0x6ec>
    2e9c:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2e9e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    2ea0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    2ea2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    2ea4:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    bltbpt += bltbptplus;
    2eaa:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    2eae:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    2eb0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2eb2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2eb4:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2eb8:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    2eba:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltbpt = (APTR) bltbpt;
    2ec0:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
    custom->bltcpt = (APTR) bltcpt;
    2ec6:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e5f>
    custom->bltdpt = (APTR) bltdpt;
    2ecc:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    2ed2:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    2ed4:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 31ee <CstScaleSprite+0x60a>
    2ed8:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    2eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d2
    2ede:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    2ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    WaitBlit();
    2ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    2eee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    2ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    2ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    2ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-> move.w #2,1c6fa <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1c6ee <CstBackDrop>,a3
    if(y + single->height < 0) {
    2f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    2f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    2f0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    2f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d6
    2f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----|-- bge.w 2c48 <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    2f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-----|-----|-> tst.l d0
    2f16:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 310a <CstScaleSprite+0x526>
    ystartsrc = y*-1;
    2f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    2f1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    2f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   movea.l d7,a1
    blitheight = single->height+y;
    2f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,66(sp)
    ystartdst = 0;
    2f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   clr.l 44(sp)
    if(x + single->width < 0) {
    2f28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d1
    2f2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a4,d0
    2f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d1,d0
  if( x < 0) 
    2f2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d3
    2f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     '-- bge.w 2c72 <CstScaleSprite+0x8e>
    if(x + single->width < 0) {
    2f34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '-------> tst.l d0
    2f36:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 310a <CstScaleSprite+0x526>
    cutwordssource = (x*-1)/16; 
    2f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,d0
    2f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    2f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    2f42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    2f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,78(sp)
    2f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    2f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a4,d0
    2f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d0
    2f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d2
    2f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d2
    2f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d2,84(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1c72c <winWidth>,d3
    2f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 17a60 <__mulsi3>,a4
    2f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d3,-(sp)
    2f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),-(sp)
    2f68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d1,56(sp)
    2f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a1,60(sp)
    2f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a4)
    2f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    2f74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    2f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),d1
    2f7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 52(sp),a1
    2f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d2
    2f80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.w 3120 <CstScaleSprite+0x53c>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a3,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a0
    2f8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,a0
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #16,d7
    2f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         sub.l d2,d7
    2f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,d2
    2f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    2f96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    2f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    2f9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,70(sp)
  custom->bltcon1 = bltcon1;  
    2fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d2
    2fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d2,d7
    2fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d7,72(sp)
      extrawords = 1;
    2fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2faa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a3
    2fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a3,a3
    2fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,-(sp)
    2fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,-(sp)
    2fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,56(sp)
    2fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,60(sp)
    2fbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a4)
    2fbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    2fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    2fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d5
    2fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a3
    2fca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d0
    2fcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    2fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    2fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    2fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 84(sp),d7
    2fe2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d7,d0
    2fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 52(sp),a0
    2fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w a0,a3
    2fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.w a0,a3
    if( destinationtype == SCREEN)
    2ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 48(sp),d1
    2ff4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d0
    2ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.w a6,d0
    2ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  ,----- beq.w 3186 <CstScaleSprite+0x5a2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,-> movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    3002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d1,d0
    3004:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    3006:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 78(sp),d0
    300a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    300c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    300e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 68(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 46(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    301e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 10(a0),a1
    3022:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1c710 <CstBackDropBufferApplyCursor>
    3028:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    302c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    302e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d3
    3030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a3,d4
    3032:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d3,d4
    3034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d1
    3036:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2d56 <CstScaleSprite+0x172>
    303a:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 3314 <CstScaleSprite+0x730>
      destination = (UWORD *) CstDrawBuffer;      
    303e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--------|--|--|-> movea.l 1c700 <CstDrawBuffer>,a3
      break;
    3044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--------|--|--|-- bra.w 2c3a <CstScaleSprite+0x56>
    ystartdst = y;
    3048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--------|--|--|-> move.l a5,44(sp)
    blitheight = single->height;
    304c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   move.l d1,66(sp)
    ystartsrc = 0;
    3050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   suba.l a1,a1
    3052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--------|--|--|-- bra.w 2c66 <CstScaleSprite+0x82>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3056:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--------|--|--|-> lea 17a60 <__mulsi3>,a4
    305c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a1,-(sp)
    305e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,-(sp)
    3060:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,56(sp)
    3064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    3066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    3068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    306a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    306c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    3070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3074:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 44(sp),-(sp)
    3078:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    307a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    307c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    307e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    3080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d6
    3082:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d6
    3084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d6,a0
    3086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    3088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a3
    308a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lea (0,a3,d0.l),a5
      CstCleanupQueueDrawBuffer->height = blitheight;
    308e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3094:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d6,d6
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w 46(sp),a3
    bltcon0 = 0xfca + ((x%16) << 12);
    309a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    309c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d7
    309e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
  custom->bltcon0 = bltcon0;
    30a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    30a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    30a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    30aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
    30ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,72(sp)
    if( destinationtype == SCREEN)
    30b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 48(sp),d1
    30b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #1,d7
    30b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmp.w a6,d7
    30b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    ,--|--|--|-- beq.w 33ae <CstScaleSprite+0x7ca>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    30bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    30c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d1,d0
    30c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,--------|--|--|--|-- bmi.w 348c <CstScaleSprite+0x8a8>
    30c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    30ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    30cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    30ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    30d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    30d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    30dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 10(a0),a1
    30e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1c710 <CstBackDropBufferApplyCursor>
    30e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    30ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,76(sp)
    30f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    30f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    30f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w d6
    extrawords = 1;
    30f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    30fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|--------|--|--|--|-> lsr.l #3,d3
    30fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   move.w a3,d4
    30fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d3,d4
    3100:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d1
    3102:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2d56 <CstScaleSprite+0x172>
    3106:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 3314 <CstScaleSprite+0x730>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    310a:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #98025,92(sp)
}
    3112:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3116:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    311a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 170d4 <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3120:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  '--|--|-> lea (0,a3,d0.l),a5
    3124:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a0
    3128:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 72(sp)
    312c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,70(sp)
      extrawords = 0;
    3132:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3134:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a3
    3138:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a3,a3
    313a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a1,-(sp)
    313c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,-(sp)
    313e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,56(sp)
    3142:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,60(sp)
    3146:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a4)
    3148:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    314a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    314c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d5
    314e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3150:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a3
    3154:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d0
    3156:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    315a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3160:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3164:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    3166:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    3168:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 84(sp),d7
    316c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d7,d0
    316e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3172:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 52(sp),a0
    3176:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w a0,a3
    3178:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.w a0,a3
    if( destinationtype == SCREEN)
    317a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 48(sp),d1
    317e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #1,d0
    3180:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmp.w a6,d0
    3182:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  '-- bne.w 2ffc <CstScaleSprite+0x418>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3186:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     '----> move.l 1c708 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    318c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l 1c7d8 <SysBase>,a6
    3192:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    3194:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    3196:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    319a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    319c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1c708 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    31a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    31a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    31a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    31ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    31b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d1
    31b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d1,d0
    31b8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     ,--|----------- bmi.w 34fc <CstScaleSprite+0x918>
    31bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    31be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 78(sp),d0
    31c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    31c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    31c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    31ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    31d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    31d6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1c72c <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    31dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    31de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  ,--|--|----------> lsr.l #3,d3
    31e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w a3,d4
    31e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d3,d4
    31e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d1
    31e6:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2d56 <CstScaleSprite+0x172>
    31ea:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 3314 <CstScaleSprite+0x730>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31ee:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    31f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    31f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    31f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    31f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d2
    31f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d2
    31fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    WaitBlit();
    3200:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    3202:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3204:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
}
    3208:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    320c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    3210:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3212:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    3214:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    3216:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3218:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    321a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d0
    321c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d0
    321e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    bltbpt += bltbptplus;
    3224:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 62(sp),a4
    3228:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    322a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    322c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    322e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3230:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3234:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3236:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltbpt = (APTR) bltbpt;
    323c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
    custom->bltcpt = (APTR) bltcpt;
    3242:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e5f>
    custom->bltdpt = (APTR) bltdpt;
    3248:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    324e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    3250:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--------|--|--|--|--|----------- bge.w 2e28 <CstScaleSprite+0x244>
    3254:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|----------> moveq #15,d1
    3256:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    3258:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    325a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    325c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d7,d0
    325e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w d6,d0
    3260:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    bltbpt += bltbptplus;
    3266:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    3268:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    326a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l d3,a0
    326c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a0),a6
    326e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3272:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3274:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltbpt = (APTR) bltbpt;
    327a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
    custom->bltcpt = (APTR) bltcpt;
    3280:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e5f>
    custom->bltdpt = (APTR) bltdpt;
    3286:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    328c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    328e:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|----------- bge.w 2e62 <CstScaleSprite+0x27e>
    3292:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|----------> moveq #15,d1
    3294:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    3296:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    3298:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    329a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d7,d0
    329c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w d6,d0
    329e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    bltbpt += bltbptplus;
    32a4:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    32a6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    32a8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l d3,a0
    32aa:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a0),a6
    32ac:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32b0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32b2:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltbpt = (APTR) bltbpt;
    32b8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
    custom->bltcpt = (APTR) bltcpt;
    32be:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e5f>
    custom->bltdpt = (APTR) bltdpt;
    32c4:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32ca:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    32cc:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|----------- bge.w 2e9c <CstScaleSprite+0x2b8>
    32d0:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|----------> moveq #15,d1
    32d2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    32d4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    32d6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    32d8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d7,d0
    32da:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w d6,d0
    32dc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb3e6f>
    bltbpt += bltbptplus;
    32e2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    32e6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    WaitBlit();
    32e8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l d3,a0
    32ea:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a0),a6
    32ec:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    32f0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    32f2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltbpt = (APTR) bltbpt;
    32f8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
    custom->bltcpt = (APTR) bltcpt;
    32fe:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e5f>
    custom->bltdpt = (APTR) bltdpt;
    3304:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    330a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    330c:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|----------- bge.w 2ed8 <CstScaleSprite+0x2f4>
    3310:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|----------- bra.w 31ee <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3314:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d1
    3316:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    3318:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d1,d4
  WaitBlit();
    331a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l #116708,d3
    3320:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d3,a0
    3322:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a0),a6
    3324:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    3328:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb3e5b>
  custom->bltalwm = bltalwm;
    3330:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb3e5d>
  custom->bltamod = bltamod;
    3336:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3e7b>
  custom->bltbmod = bltbmod;
    333c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3e79>
  custom->bltcmod = bltcmod;
    3342:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3e77>
  custom->bltdmod = bltdmod;
    3348:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb3e7d>
  custom->bltcon0 = bltcon0;
    334e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb3e57>
  custom->bltcon1 = bltcon1;  
    3356:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb3e59>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    335e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3360:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 60(sp),d7
    3364:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3366:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d1
    3368:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    336a:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d1
    bltbpt += bltbptplus;
    336e:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d1
    3374:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    3376:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1c72c <winWidth>,d4
    337c:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d4
    337e:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1c732 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    3384:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    338a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb3e67>
    custom->bltbpt = (APTR) bltbpt;
    3390:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb3e63>
    custom->bltcpt = (APTR) bltcpt;
    3398:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb3e5f>
    custom->bltdpt = (APTR) bltdpt;
    339e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb3e6b>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33a4:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    33a6:	|  |  |  |  |  |  '-----------------------------------|--|--|--|--|----------- bge.w 2dea <CstScaleSprite+0x206>
    33aa:	|  |  |  |  |  '--------------------------------------|--|--|--|--|----------- bra.w 3212 <CstScaleSprite+0x62e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    33ae:	|  |  |  |  |                                         |  |  |  |  '----------> move.l 1c708 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33b4:	|  |  |  |  |                                         |  |  |  |               movea.l 1c7d8 <SysBase>,a6
    33ba:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    33bc:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    33be:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    33c2:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    33c4:	|  |  |  |  |                                         |  |  |  |               move.l d0,1c708 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    33ca:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    33ce:	|  |  |  |  |                                         |  |  |  |               move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    33d0:	|  |  |  |  |                                         |  |  |  |               move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    33d6:	|  |  |  |  |                                         |  |  |  |               move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    33dc:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d1
    33de:	|  |  |  |  |                                         |  |  |  |               move.l d1,d0
    33e0:	|  |  |  |  |                                         |  |  |  |     ,-------- bmi.w 3526 <CstScaleSprite+0x942>
    33e4:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    33e6:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    33e8:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    33ec:	|  |  |  |  |                                         |  |  |  |     |         move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    33f2:	|  |  |  |  |                                         |  |  |  |     |         move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    33f6:	|  |  |  |  |                                         |  |  |  |     |         move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    33fa:	|  |  |  |  |                                         |  |  |  |     |         move.l 1c72c <winWidth>,d3
    3400:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,76(sp)
    3406:	|  |  |  |  |                                         |  |  |  |     |         movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    340a:	|  |  |  |  |                                         |  |  |  |     |         suba.l a4,a4
    cutwordssource = 0;
    340c:	|  |  |  |  |                                         |  |  |  |     |         clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    340e:	|  |  |  |  |                                         |  |  |  |  ,--|-------> lsr.l #3,d3
    3410:	|  |  |  |  |                                         |  |  |  |  |  |         move.w a3,d4
    3412:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d3,d4
    3414:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d1
    3416:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2d56 <CstScaleSprite+0x172>
    341a:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 3314 <CstScaleSprite+0x730>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    341e:	|  |  |  |  '-----------------------------------------|--|--|--|--|--|-------> move.l 1c708 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3424:	|  |  |  |                                            |  |  |  |  |  |         movea.l 1c7d8 <SysBase>,a6
    342a:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    342c:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    342e:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    3432:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    3434:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1c708 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    343a:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    343e:	|  |  |  |                                            |  |  |  |  |  |         move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3440:	|  |  |  |                                            |  |  |  |  |  |         move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    3446:	|  |  |  |                                            |  |  |  |  |  |         move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    344c:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d1
    344e:	|  |  |  |                                            |  |  |  |  |  |         move.l d1,d0
    3450:	|  |  |  |                                            |  |  |  |  |  |     ,-- bmi.w 3558 <CstScaleSprite+0x974>
    3454:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    3456:	|  |  |  |                                            |  |  |  |  |  |     |   add.w d0,d2
    3458:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    345c:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3462:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3468:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    346e:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1c72c <winWidth>,d3
    3474:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    347a:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    347c:	|  |  |  |                                            |  |  |  |  |  |  ,--|-> lsr.l #3,d3
    347e:	|  |  |  |                                            |  |  |  |  |  |  |  |   move.w a3,d4
    3480:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d3,d4
    3482:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d1
    3484:	|  |  |  '--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2d56 <CstScaleSprite+0x172>
    3488:	|  |  '-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 3314 <CstScaleSprite+0x730>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    348c:	|  |                                                  |  '--|--|--|--|--|--|-> moveq #15,d0
    348e:	|  |                                                  |     |  |  |  |  |  |   add.l d1,d0
    3490:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    3492:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    3494:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3496:	|  |                                                  |     |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    349c:	|  |                                                  |     |  |  |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    34a0:	|  |                                                  |     |  |  |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    34a4:	|  |                                                  |     |  |  |  |  |  |   lea 10(a0),a1
    34a8:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1c710 <CstBackDropBufferApplyCursor>
    34ae:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    34b2:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,76(sp)
    34b8:	|  |                                                  |     |  |  |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    34bc:	|  |                                                  |     |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    34be:	|  |                                                  |     |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    34c0:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    34c2:	|  |                                                  '-----|--|--|--|--|--|-- bra.w 30fa <CstScaleSprite+0x516>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    34c6:	|  '--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    34c8:	|                                                           |  |  |  |  |  |   add.l d1,d0
    34ca:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    34cc:	|                                                           |  |  |  |  |  |   add.w d0,d2
    34ce:	|                                                           |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    34d0:	|                                                           |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    34d6:	|                                                           |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    34dc:	|                                                           |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    34e2:	|                                                           |  |  |  |  |  |   lea 10(a0),a1
    34e6:	|                                                           |  |  |  |  |  |   move.l a1,1c710 <CstBackDropBufferApplyCursor>
    34ec:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    34f0:	|                                                           |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    34f6:	|                                                           |  |  |  |  |  |   clr.w d2
    34f8:	'-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2d4a <CstScaleSprite+0x166>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    34fc:	                                                            |  '--|--|--|--|-> moveq #15,d0
    34fe:	                                                            |     |  |  |  |   add.l d1,d0
    3500:	                                                            |     |  |  |  |   asr.l #4,d0
    3502:	                                                            |     |  |  |  |   add.w 78(sp),d0
    3506:	                                                            |     |  |  |  |   add.w d2,d0
    3508:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    350c:	                                                            |     |  |  |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3512:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3516:	                                                            |     |  |  |  |   move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    351a:	                                                            |     |  |  |  |   move.l 1c72c <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    3520:	                                                            |     |  |  |  |   suba.l a4,a4
    3522:	                                                            '-----|--|--|--|-- bra.w 31de <CstScaleSprite+0x5fa>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3526:	                                                                  |  '--|--|-> moveq #15,d0
    3528:	                                                                  |     |  |   add.l d1,d0
    352a:	                                                                  |     |  |   asr.l #4,d0
    352c:	                                                                  |     |  |   addq.w #1,d0
    352e:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3532:	                                                                  |     |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3538:	                                                                  |     |  |   move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    353c:	                                                                  |     |  |   move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3540:	                                                                  |     |  |   move.l 1c72c <winWidth>,d3
    3546:	                                                                  |     |  |   move.w #-1,76(sp)
    354c:	                                                                  |     |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3550:	                                                                  |     |  |   suba.l a4,a4
    cutwordssource = 0;
    3552:	                                                                  |     |  |   clr.w d6
    3554:	                                                                  '-----|--|-- bra.w 340e <CstScaleSprite+0x82a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3558:	                                                                        |  '-> moveq #15,d0
    355a:	                                                                        |      add.l d1,d0
    355c:	                                                                        |      asr.l #4,d0
    355e:	                                                                        |      add.w d0,d2
    3560:	                                                                        |      move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3564:	                                                                        |      move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    356a:	                                                                        |      move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3570:	                                                                        |      move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3576:	                                                                        |      move.l 1c72c <winWidth>,d3
    357c:	                                                                        |      move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3582:	                                                                        |      clr.w d2
    3584:	                                                                        '----- bra.w 347c <CstScaleSprite+0x898>

00003588 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3588:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    358a:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3590:	move.l 8(sp),d0
    3594:	movea.l (sp),a0
    3596:	move.l d0,128(a0)
}
    359a:	nop
    359c:	addq.l #4,sp
    359e:	rts

000035a0 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    35a0:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    35a4:	move.l 1c6fc <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    35ac:	move.l 1c700 <CstDrawBuffer>,d0
    35b2:	move.l d0,1c6fc <CstViewBuffer>
  CstDrawBuffer = tmp;
    35b8:	move.l 16(sp),1c700 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    35c0:	move.l 1c704 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    35c8:	move.l 1c708 <CstCleanupQueueDrawBuffer>,d0
    35ce:	move.l d0,1c704 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    35d4:	move.l 12(sp),1c708 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    35dc:	move.l 1c6f6 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    35e4:	move.l 1c6fc <CstViewBuffer>,d0
    35ea:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    35ee:	move.l 4(sp),d0
    35f2:	clr.w d0
    35f4:	swap d0
    35f6:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    35fa:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    35fe:	movea.w #118,a0
    3602:	adda.l 8(sp),a0
    3606:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3608:	movea.w #114,a0
    360c:	adda.l 8(sp),a0
    3610:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3614:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    361c:	move.l 4(sp),d0
    3620:	clr.w d0
    3622:	swap d0
    3624:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3628:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    362c:	movea.w #126,a0
    3630:	adda.l 8(sp),a0
    3634:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3636:	movea.w #122,a0
    363a:	adda.l 8(sp),a0
    363e:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3642:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    364a:	move.l 4(sp),d0
    364e:	clr.w d0
    3650:	swap d0
    3652:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3656:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    365a:	movea.l 8(sp),a0
    365e:	lea 134(a0),a0
    3662:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3664:	movea.l 8(sp),a0
    3668:	lea 130(a0),a0
    366c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3670:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3678:	move.l 4(sp),d0
    367c:	clr.w d0
    367e:	swap d0
    3680:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3684:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3688:	movea.l 8(sp),a0
    368c:	lea 142(a0),a0
    3690:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3692:	movea.l 8(sp),a0
    3696:	lea 138(a0),a0
    369a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    369e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    36a6:	move.l 4(sp),d0
    36aa:	clr.w d0
    36ac:	swap d0
    36ae:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    36b2:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    36b6:	movea.l 8(sp),a0
    36ba:	lea 150(a0),a0
    36be:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    36c0:	movea.l 8(sp),a0
    36c4:	lea 146(a0),a0
    36c8:	move.w 2(sp),(a0)

}
    36cc:	nop
    36ce:	lea 20(sp),sp
    36d2:	rts

000036d4 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    36d4:	          lea -80(sp),sp
    36d8:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    36da:	          pea 17f1c <PutChar+0x3a6>
    36e0:	          jsr 170d4 <KPrintF>
    36e6:	          addq.l #4,sp

  width = width / 8;
    36e8:	          move.l 88(sp),d0
    36ec:	      ,-- bpl.s 36f0 <CstReserveBackdrop+0x1c>
    36ee:	      |   addq.l #7,d0
    36f0:	      '-> asr.l #3,d0
    36f2:	          move.l d0,88(sp)

  if( width < 40) 
    36f6:	          moveq #39,d0
    36f8:	          cmp.l 88(sp),d0
    36fc:	      ,-- blt.s 3712 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    36fe:	      |   pea 17f36 <PutChar+0x3c0>
    3704:	      |   jsr 170d4 <KPrintF>
    370a:	      |   addq.l #4,sp
    return FALSE;
    370c:	      |   clr.w d0
    370e:	,-----|-- bra.w 3ab4 <CstReserveBackdrop+0x3e0>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3712:	|     '-> pea 17f74 <PutChar+0x3fe>
    3718:	|         jsr 170d4 <KPrintF>
    371e:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3720:	|         move.l 88(sp),-(sp)
    3724:	|         jsr fce <CstCreateCopperlist>
    372a:	|         addq.l #4,sp
    372c:	|         move.l d0,1c6f6 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3732:	|         pea 17f94 <PutChar+0x41e>
    3738:	|         jsr 170d4 <KPrintF>
    373e:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3740:	|         move.l 88(sp),d1
    3744:	|         move.l 92(sp),d0
    3748:	|         muls.w d1,d0
    374a:	|         move.w d0,1c6ec <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3750:	|         move.w 1c6ec <CstBackdropSizePlane>,d1
    3756:	|         move.w d1,d0
    3758:	|         add.w d0,d0
    375a:	|         add.w d0,d0
    375c:	|         add.w d1,d0
    375e:	|         move.w d0,1c6ea <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3764:	|         move.w 1c6ea <CstBackdropSize>,d0
    376a:	|         move.w d0,d0
    376c:	|         andi.l #65535,d0
    3772:	|         move.l d0,72(sp)
    3776:	|         moveq #2,d1
    3778:	|         move.l d1,68(sp)
    377c:	|         move.l 1c7d8 <SysBase>,d0
    3782:	|         movea.l d0,a6
    3784:	|         move.l 72(sp),d0
    3788:	|         move.l 68(sp),d1
    378c:	|         jsr -684(a6)
    3790:	|         move.l d0,64(sp)
    3794:	|         move.l 64(sp),d0
    3798:	|         move.l d0,1c6ee <CstBackDrop>
  if( !CstBackDrop)
    379e:	|         move.l 1c6ee <CstBackDrop>,d0
    37a4:	|     ,-- bne.s 37ba <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    37a6:	|     |   pea 17fbb <PutChar+0x445>
    37ac:	|     |   jsr 170d4 <KPrintF>
    37b2:	|     |   addq.l #4,sp
    return FALSE;  
    37b4:	|     |   clr.w d0
    37b6:	+-----|-- bra.w 3ab4 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    37ba:	|     '-> pea 17ff3 <PutChar+0x47d>
    37c0:	|         jsr 170d4 <KPrintF>
    37c6:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    37c8:	|         move.l 1c6ee <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    37d0:	|         clr.l 76(sp)
    37d4:	|     ,-- bra.s 37ea <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    37d6:	|  ,--|-> move.l 80(sp),d0
    37da:	|  |  |   move.l d0,d1
    37dc:	|  |  |   addq.l #4,d1
    37de:	|  |  |   move.l d1,80(sp)
    37e2:	|  |  |   movea.l d0,a0
    37e4:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    37e6:	|  |  |   addq.l #1,76(sp)
    37ea:	|  |  '-> move.w 1c6ea <CstBackdropSize>,d0
    37f0:	|  |      lsr.w #2,d0
    37f2:	|  |      move.w d0,d0
    37f4:	|  |      andi.l #65535,d0
    37fa:	|  |      cmp.l 76(sp),d0
    37fe:	|  '----- bgt.s 37d6 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3800:	|         move.w 1c6ea <CstBackdropSize>,d0
    3806:	|         move.w d0,d0
    3808:	|         andi.l #65535,d0
    380e:	|         move.l 88(sp),d1
    3812:	|         add.l d1,d1
    3814:	|         add.l d1,d0
    3816:	|         move.l d0,60(sp)
    381a:	|         moveq #2,d0
    381c:	|         move.l d0,56(sp)
    3820:	|         move.l 1c7d8 <SysBase>,d0
    3826:	|         movea.l d0,a6
    3828:	|         move.l 60(sp),d0
    382c:	|         move.l 56(sp),d1
    3830:	|         jsr -684(a6)
    3834:	|         move.l d0,52(sp)
    3838:	|         move.l 52(sp),d0
    383c:	|         move.l d0,1c700 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3842:	|         move.l 1c700 <CstDrawBuffer>,d0
    3848:	|     ,-- bne.s 385e <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    384a:	|     |   pea 18019 <PutChar+0x4a3>
    3850:	|     |   jsr 170d4 <KPrintF>
    3856:	|     |   addq.l #4,sp
    return FALSE;  
    3858:	|     |   clr.w d0
    385a:	+-----|-- bra.w 3ab4 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    385e:	|     '-> pea 18053 <PutChar+0x4dd>
    3864:	|         jsr 170d4 <KPrintF>
    386a:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    386c:	|         move.l #10000,48(sp)
    3874:	|         clr.l 44(sp)
    3878:	|         move.l 1c7d8 <SysBase>,d0
    387e:	|         movea.l d0,a6
    3880:	|         move.l 48(sp),d0
    3884:	|         move.l 44(sp),d1
    3888:	|         jsr -684(a6)
    388c:	|         move.l d0,40(sp)
    3890:	|         move.l 40(sp),d0
    3894:	|         move.l d0,1c70c <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    389a:	|         move.l 1c70c <CstBackDropBufferApplyStart>,d0
    38a0:	|     ,-- bne.s 38b6 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    38a2:	|     |   pea 1807b <PutChar+0x505>
    38a8:	|     |   jsr 170d4 <KPrintF>
    38ae:	|     |   addq.l #4,sp
    return FALSE;  
    38b0:	|     |   clr.w d0
    38b2:	+-----|-- bra.w 3ab4 <CstReserveBackdrop+0x3e0>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    38b6:	|     '-> move.l 1c70c <CstBackDropBufferApplyStart>,d0
    38bc:	|         move.l d0,1c710 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    38c2:	|         movea.l 1c70c <CstBackDropBufferApplyStart>,a0
    38c8:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    38ca:	|         movea.l 1c70c <CstBackDropBufferApplyStart>,a0
    38d0:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    38d2:	|         move.w 1c6ea <CstBackdropSize>,d0
    38d8:	|         move.w d0,d0
    38da:	|         andi.l #65535,d0
    38e0:	|         move.l 88(sp),d1
    38e4:	|         add.l d1,d1
    38e6:	|         add.l d1,d0
    38e8:	|         move.l d0,36(sp)
    38ec:	|         moveq #2,d1
    38ee:	|         move.l d1,32(sp)
    38f2:	|         move.l 1c7d8 <SysBase>,d0
    38f8:	|         movea.l d0,a6
    38fa:	|         move.l 36(sp),d0
    38fe:	|         move.l 32(sp),d1
    3902:	|         jsr -684(a6)
    3906:	|         move.l d0,28(sp)
    390a:	|         move.l 28(sp),d0
    390e:	|         move.l d0,1c6fc <CstViewBuffer>
  if( !CstViewBuffer)
    3914:	|         move.l 1c6fc <CstViewBuffer>,d0
    391a:	|     ,-- bne.s 3930 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    391c:	|     |   pea 180c6 <PutChar+0x550>
    3922:	|     |   jsr 170d4 <KPrintF>
    3928:	|     |   addq.l #4,sp
    return FALSE;  
    392a:	|     |   clr.w d0
    392c:	+-----|-- bra.w 3ab4 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3930:	|     '-> pea 18100 <PutChar+0x58a>
    3936:	|         jsr 170d4 <KPrintF>
    393c:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    393e:	|         move.l 1c700 <CstDrawBuffer>,d1
    3944:	|         move.l 88(sp),d0
    3948:	|     ,-- bpl.s 394c <CstReserveBackdrop+0x278>
    394a:	|     |   addq.l #3,d0
    394c:	|     '-> asr.l #2,d0
    394e:	|         add.l d0,d0
    3950:	|         add.l d0,d0
    3952:	|         add.l d1,d0
    3954:	|         move.l d0,1c700 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    395a:	|         move.l 1c6fc <CstViewBuffer>,d1
    3960:	|         move.l 88(sp),d0
    3964:	|     ,-- bpl.s 3968 <CstReserveBackdrop+0x294>
    3966:	|     |   addq.l #3,d0
    3968:	|     '-> asr.l #2,d0
    396a:	|         add.l d0,d0
    396c:	|         add.l d0,d0
    396e:	|         add.l d1,d0
    3970:	|         move.l d0,1c6fc <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3976:	|         move.l #5200,24(sp)
    397e:	|         moveq #2,d0
    3980:	|         move.l d0,20(sp)
    3984:	|         move.l 1c7d8 <SysBase>,d0
    398a:	|         movea.l d0,a6
    398c:	|         move.l 24(sp),d0
    3990:	|         move.l 20(sp),d1
    3994:	|         jsr -684(a6)
    3998:	|         move.l d0,16(sp)
    399c:	|         move.l 16(sp),d0
    39a0:	|         move.l d0,1c720 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    39a6:	|         move.l #5600,12(sp)
    39ae:	|         moveq #2,d1
    39b0:	|         move.l d1,8(sp)
    39b4:	|         move.l 1c7d8 <SysBase>,d0
    39ba:	|         movea.l d0,a6
    39bc:	|         move.l 12(sp),d0
    39c0:	|         move.l 8(sp),d1
    39c4:	|         jsr -684(a6)
    39c8:	|         move.l d0,4(sp)
    39cc:	|         move.l 4(sp),d0
    39d0:	|         move.l d0,1c724 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    39d6:	|         move.l 1c6ee <CstBackDrop>,d0
    39dc:	|         clr.l -(sp)
    39de:	|         pea 5 <_start+0x5>
    39e2:	|         pea 100 <copyString+0x48>
    39e6:	|         pea 140 <decodeFilename+0x28>
    39ea:	|         pea 18128 <PutChar+0x5b2>
    39f0:	|         move.l d0,-(sp)
    39f2:	|         jsr 171bc <debug_register_bitmap>
    39f8:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    39fc:	|         move.l 92(sp),d0
    3a00:	|         movea.w d0,a1
    3a02:	|         move.l 88(sp),d0
    3a06:	|         lsl.w #3,d0
    3a08:	|         movea.w d0,a0
    3a0a:	|         move.l 1c700 <CstDrawBuffer>,d0
    3a10:	|         clr.l -(sp)
    3a12:	|         pea 5 <_start+0x5>
    3a16:	|         move.l a1,-(sp)
    3a18:	|         move.l a0,-(sp)
    3a1a:	|         pea 18138 <PutChar+0x5c2>
    3a20:	|         move.l d0,-(sp)
    3a22:	|         jsr 171bc <debug_register_bitmap>
    3a28:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3a2c:	|         move.l 92(sp),d0
    3a30:	|         movea.w d0,a1
    3a32:	|         move.l 88(sp),d0
    3a36:	|         lsl.w #3,d0
    3a38:	|         movea.w d0,a0
    3a3a:	|         move.l 1c6fc <CstViewBuffer>,d0
    3a40:	|         clr.l -(sp)
    3a42:	|         pea 5 <_start+0x5>
    3a46:	|         move.l a1,-(sp)
    3a48:	|         move.l a0,-(sp)
    3a4a:	|         pea 18147 <PutChar+0x5d1>
    3a50:	|         move.l d0,-(sp)
    3a52:	|         jsr 171bc <debug_register_bitmap>
    3a58:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3a5c:	|         move.l 1c6f6 <CstCopperList>,d0
    3a62:	|     ,-- beq.s 3a74 <CstReserveBackdrop+0x3a0>
    3a64:	|     |   move.l 1c700 <CstDrawBuffer>,d0
    3a6a:	|     +-- beq.s 3a74 <CstReserveBackdrop+0x3a0>
    3a6c:	|     |   move.l 1c6fc <CstViewBuffer>,d0
    3a72:	|  ,--|-- bne.s 3a86 <CstReserveBackdrop+0x3b2>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3a74:	|  |  '-> pea 18156 <PutChar+0x5e0>
    3a7a:	|  |      jsr 170d4 <KPrintF>
    3a80:	|  |      addq.l #4,sp
    return FALSE;
    3a82:	|  |      clr.w d0
    3a84:	+--|----- bra.s 3ab4 <CstReserveBackdrop+0x3e0>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3a86:	|  '----> pea 18183 <PutChar+0x60d>
    3a8c:	|         jsr 170d4 <KPrintF>
    3a92:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3a94:	|         move.l 1c6f6 <CstCopperList>,d0
    3a9a:	|         move.l d0,-(sp)
    3a9c:	|         jsr 3588 <CstSetCl>
    3aa2:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3aa4:	|         pea 181aa <PutChar+0x634>
    3aaa:	|         jsr 170d4 <KPrintF>
    3ab0:	|         addq.l #4,sp
  return TRUE;
    3ab2:	|         moveq #1,d0

}
    3ab4:	'-------> movea.l (sp)+,a6
    3ab6:	          lea 80(sp),sp
    3aba:	          rts

00003abc <CstUnfreeze>:

void CstUnfreeze() {
    3abc:	       lea -24(sp),sp
    3ac0:	       move.l a6,-(sp)
    3ac2:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3ac4:	       pea 181cd <PutChar+0x657>
    3aca:	       jsr 170d4 <KPrintF>
    3ad0:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3ad2:	       move.l 1c72c <winWidth>,d0
    3ad8:	       lsr.l #3,d0
    3ada:	       move.l d0,d1
    3adc:	       move.l 1c730 <winHeight>,d0
    3ae2:	       move.l d0,d0
    3ae4:	       muls.w d0,d1
    3ae6:	       move.w d1,d0
    3ae8:	       add.w d0,d0
    3aea:	       add.w d0,d0
    3aec:	       move.w d0,d2
    3aee:	       add.w d1,d2
    3af0:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3af4:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3afc:	       move.l 1c730 <winHeight>,d0
    3b02:	       move.l d0,d0
    3b04:	       movea.w d0,a1
    3b06:	       move.l 1c72c <winWidth>,d0
    3b0c:	       move.l d0,d0
    3b0e:	       movea.w d0,a0
    3b10:	       move.l 1c6f2 <CstBackDropBackup>,d0
    3b16:	       clr.l -(sp)
    3b18:	       pea 5 <_start+0x5>
    3b1c:	       move.l a1,-(sp)
    3b1e:	       move.l a0,-(sp)
    3b20:	       pea 17d9f <PutChar+0x229>
    3b26:	       move.l d0,-(sp)
    3b28:	       jsr 171bc <debug_register_bitmap>
    3b2e:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3b32:	       move.l 1c6f2 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3b3a:	       move.l 1c6ee <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3b42:	       clr.l 20(sp)
    3b46:	   ,-- bra.s 3b6c <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3b48:	,--|-> move.l 28(sp),d1
    3b4c:	|  |   move.l d1,d0
    3b4e:	|  |   addq.l #4,d0
    3b50:	|  |   move.l d0,28(sp)
    3b54:	|  |   move.l 24(sp),d0
    3b58:	|  |   move.l d0,d2
    3b5a:	|  |   addq.l #4,d2
    3b5c:	|  |   move.l d2,24(sp)
    3b60:	|  |   movea.l d1,a0
    3b62:	|  |   move.l (a0),d1
    3b64:	|  |   movea.l d0,a0
    3b66:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3b68:	|  |   addq.l #1,20(sp)
    3b6c:	|  '-> move.w 18(sp),d0
    3b70:	|      lsr.w #2,d0
    3b72:	|      move.w d0,d0
    3b74:	|      andi.l #65535,d0
    3b7a:	|      cmp.l 20(sp),d0
    3b7e:	'----- bgt.s 3b48 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3b80:	       move.w #2,1c6fa <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3b88:	       move.l 1c72c <winWidth>,d0
    3b8e:	       lsr.l #4,d0
    3b90:	       movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    3b96:	       move.l a0,d1
    3b98:	       addq.l #2,d1
    3b9a:	       move.l d1,1c710 <CstBackDropBufferApplyCursor>
    3ba0:	       move.l d0,d0
    3ba2:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3ba4:	       move.l 1c730 <winHeight>,d0
    3baa:	       movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    3bb0:	       move.l a0,d1
    3bb2:	       addq.l #2,d1
    3bb4:	       move.l d1,1c710 <CstBackDropBufferApplyCursor>
    3bba:	       move.l d0,d0
    3bbc:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bbe:	       movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    3bc4:	       move.l a0,d0
    3bc6:	       addq.l #2,d0
    3bc8:	       move.l d0,1c710 <CstBackDropBufferApplyCursor>
    3bce:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3bd0:	       movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    3bd6:	       move.l a0,d0
    3bd8:	       addq.l #2,d0
    3bda:	       move.l d0,1c710 <CstBackDropBufferApplyCursor>
    3be0:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3be2:	       movea.l 1c710 <CstBackDropBufferApplyCursor>,a0
    3be8:	       move.l a0,d0
    3bea:	       addq.l #2,d0
    3bec:	       move.l d0,1c710 <CstBackDropBufferApplyCursor>
    3bf2:	       clr.w (a0)
  
  if( CstBackDropBackup) {
    3bf4:	       move.l 1c6f2 <CstBackDropBackup>,d0
    3bfa:	   ,-- beq.s 3c22 <CstUnfreeze+0x166>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3bfc:	   |   pea 181f8 <PutChar+0x682>
    3c02:	   |   jsr 170d4 <KPrintF>
    3c08:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    3c0a:	   |   move.l 1c6f2 <CstBackDropBackup>,10(sp)
    3c12:	   |   move.l 1c7d8 <SysBase>,d0
    3c18:	   |   movea.l d0,a6
    3c1a:	   |   movea.l 10(sp),a1
    3c1e:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    3c22:	   '-> pea 1821c <PutChar+0x6a6>
    3c28:	       jsr 170d4 <KPrintF>
    3c2e:	       addq.l #4,sp

}
    3c30:	       nop
    3c32:	       move.l (sp)+,d2
    3c34:	       movea.l (sp)+,a6
    3c36:	       lea 24(sp),sp
    3c3a:	       rts

00003c3c <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    3c3c:	       lea -28(sp),sp
    3c40:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    3c44:	       move.l 52(sp),-(sp)
    3c48:	       jsr 156fa <stringWidth>
    3c4e:	       addq.l #4,sp
    3c50:	       asr.l #1,d0
    3c52:	       move.l d0,-(sp)
    3c54:	       jsr 17506 <__floatsisf>
    3c5a:	       addq.l #4,sp
    3c5c:	       move.l d0,d1
    3c5e:	       move.l 1c16a <cameraZoom>,d0
    3c64:	       move.l d0,-(sp)
    3c66:	       move.l d1,-(sp)
    3c68:	       jsr 173bc <__divsf3>
    3c6e:	       addq.l #8,sp
    3c70:	       move.l d0,-(sp)
    3c72:	       jsr 1749e <__fixsfsi>
    3c78:	       addq.l #4,sp
    3c7a:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    3c7e:	       move.l 56(sp),d0
    3c82:	       sub.l 44(sp),d0
    3c86:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    3c8a:	       move.l 56(sp),d0
    3c8e:	       add.l 44(sp),d0
    3c92:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    3c96:	       moveq #12,d0
    3c98:	       move.l d0,32(sp)
    3c9c:	       clr.l 28(sp)
    3ca0:	       move.l 1c7d8 <SysBase>,d0
    3ca6:	       movea.l d0,a6
    3ca8:	       move.l 32(sp),d0
    3cac:	       move.l 28(sp),d1
    3cb0:	       jsr -684(a6)
    3cb4:	       move.l d0,24(sp)
    3cb8:	       move.l 24(sp),d0
    3cbc:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    3cc0:	       movea.l 1c728 <speech>,a0
    3cc6:	       move.l 4(a0),d0
    3cca:	       movea.l 20(sp),a0
    3cce:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    3cd2:	       move.l 52(sp),-(sp)
    3cd6:	       jsr b8 <copyString>
    3cdc:	       addq.l #4,sp
    3cde:	       movea.l 20(sp),a0
    3ce2:	       move.l d0,(a0)
	newLine -> x = xx1;
    3ce4:	       movea.l 20(sp),a0
    3ce8:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    3cee:	       movea.l 1c728 <speech>,a0
    3cf4:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    3cfa:	       moveq #4,d0
    3cfc:	       cmp.l 40(sp),d0
    3d00:	   ,-- blt.s 3d22 <addSpeechLine+0xe6>
    3d02:	   |   movea.l 60(sp),a0
    3d06:	   |   move.l (a0),d1
    3d08:	   |   moveq #5,d0
    3d0a:	   |   sub.l 40(sp),d0
    3d0e:	   |   cmp.l d1,d0
    3d10:	   +-- ble.s 3d22 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    3d12:	   |   moveq #5,d0
    3d14:	   |   sub.l 40(sp),d0
    3d18:	   |   movea.l 60(sp),a0
    3d1c:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    3d1e:	,--|-- bra.w 3e4e <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3d22:	|  '-> move.l 36(sp),-(sp)
    3d26:	|      jsr 17506 <__floatsisf>
    3d2c:	|      addq.l #4,sp
    3d2e:	|      move.l d0,d2
    3d30:	|      move.l 1c72c <winWidth>,d0
    3d36:	|      move.l d0,-(sp)
    3d38:	|      jsr 1752e <__floatunsisf>
    3d3e:	|      addq.l #4,sp
    3d40:	|      move.l d0,d1
    3d42:	|      move.l 1c16a <cameraZoom>,d0
    3d48:	|      move.l d0,-(sp)
    3d4a:	|      move.l d1,-(sp)
    3d4c:	|      jsr 173bc <__divsf3>
    3d52:	|      addq.l #8,sp
    3d54:	|      move.l #1084227584,-(sp)
    3d5a:	|      move.l d0,-(sp)
    3d5c:	|      jsr 177fa <__subsf3>
    3d62:	|      addq.l #8,sp
    3d64:	|      move.l d0,-(sp)
    3d66:	|      move.l d2,-(sp)
    3d68:	|      jsr 175ee <__gesf2>
    3d6e:	|      addq.l #8,sp
    3d70:	|      tst.l d0
    3d72:	|  ,-- bge.s 3d78 <addSpeechLine+0x13c>
}
    3d74:	+--|-- bra.w 3e4e <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3d78:	|  '-> movea.l 60(sp),a0
    3d7c:	|      move.l (a0),d0
    3d7e:	|      move.l d0,-(sp)
    3d80:	|      jsr 17506 <__floatsisf>
    3d86:	|      addq.l #4,sp
    3d88:	|      move.l d0,-(sp)
    3d8a:	|      jsr 17428 <__extendsfdf2>
    3d90:	|      addq.l #4,sp
    3d92:	|      move.l d0,d4
    3d94:	|      move.l d1,d5
    3d96:	|      move.l 1c72c <winWidth>,d0
    3d9c:	|      move.l d0,-(sp)
    3d9e:	|      jsr 1752e <__floatunsisf>
    3da4:	|      addq.l #4,sp
    3da6:	|      move.l d0,d1
    3da8:	|      move.l 1c16a <cameraZoom>,d0
    3dae:	|      move.l d0,-(sp)
    3db0:	|      move.l d1,-(sp)
    3db2:	|      jsr 173bc <__divsf3>
    3db8:	|      addq.l #8,sp
    3dba:	|      move.l d0,-(sp)
    3dbc:	|      jsr 17428 <__extendsfdf2>
    3dc2:	|      addq.l #4,sp
    3dc4:	|      clr.l -(sp)
    3dc6:	|      move.l #1075052544,-(sp)
    3dcc:	|      move.l d1,-(sp)
    3dce:	|      move.l d0,-(sp)
    3dd0:	|      jsr 17798 <__subdf3>
    3dd6:	|      lea 16(sp),sp
    3dda:	|      move.l d0,d2
    3ddc:	|      move.l d1,d3
    3dde:	|      move.l 36(sp),-(sp)
    3de2:	|      jsr 174c6 <__floatsidf>
    3de8:	|      addq.l #4,sp
    3dea:	|      move.l d1,-(sp)
    3dec:	|      move.l d0,-(sp)
    3dee:	|      move.l d3,-(sp)
    3df0:	|      move.l d2,-(sp)
    3df2:	|      jsr 17798 <__subdf3>
    3df8:	|      lea 16(sp),sp
    3dfc:	|      move.l d1,-(sp)
    3dfe:	|      move.l d0,-(sp)
    3e00:	|      move.l d5,-(sp)
    3e02:	|      move.l d4,-(sp)
    3e04:	|      jsr 17624 <__gtdf2>
    3e0a:	|      lea 16(sp),sp
    3e0e:	|      tst.l d0
    3e10:	|  ,-- bgt.s 3e14 <addSpeechLine+0x1d8>
}
    3e12:	+--|-- bra.s 3e4e <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    3e14:	|  '-> move.l 1c72c <winWidth>,d0
    3e1a:	|      move.l d0,-(sp)
    3e1c:	|      jsr 1752e <__floatunsisf>
    3e22:	|      addq.l #4,sp
    3e24:	|      move.l d0,d1
    3e26:	|      move.l 1c16a <cameraZoom>,d0
    3e2c:	|      move.l d0,-(sp)
    3e2e:	|      move.l d1,-(sp)
    3e30:	|      jsr 173bc <__divsf3>
    3e36:	|      addq.l #8,sp
    3e38:	|      move.l d0,-(sp)
    3e3a:	|      jsr 1749e <__fixsfsi>
    3e40:	|      addq.l #4,sp
    3e42:	|      subq.l #5,d0
    3e44:	|      sub.l 36(sp),d0
    3e48:	|      movea.l 60(sp),a0
    3e4c:	|      move.l d0,(a0)
}
    3e4e:	'----> nop
    3e50:	       movem.l (sp)+,d2-d5/a6
    3e54:	       lea 28(sp),sp
    3e58:	       rts

00003e5a <initSpeech>:


void initSpeech () {
    3e5a:	       lea -12(sp),sp
    3e5e:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    3e60:	       moveq #20,d0
    3e62:	       move.l d0,12(sp)
    3e66:	       clr.l 8(sp)
    3e6a:	       move.l 1c7d8 <SysBase>,d0
    3e70:	       movea.l d0,a6
    3e72:	       move.l 12(sp),d0
    3e76:	       move.l 8(sp),d1
    3e7a:	       jsr -684(a6)
    3e7e:	       move.l d0,4(sp)
    3e82:	       move.l 4(sp),d0
    3e86:	       move.l d0,1c728 <speech>
	if (speech) {
    3e8c:	       move.l 1c728 <speech>,d0
    3e92:	,----- beq.s 3ebe <initSpeech+0x64>
		speech -> currentTalker = NULL;
    3e94:	|      movea.l 1c728 <speech>,a0
    3e9a:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    3e9c:	|      movea.l 1c728 <speech>,a0
    3ea2:	|      clr.l 4(a0)
		speech -> speechY = 0;
    3ea6:	|      movea.l 1c728 <speech>,a0
    3eac:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    3eb0:	|      movea.l 1c728 <speech>,a0
    3eb6:	|      moveq #-1,d0
    3eb8:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    3ebc:	|  ,-- bra.s 3ecc <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    3ebe:	'--|-> pea 18232 <PutChar+0x6bc>
    3ec4:	   |   jsr 170d4 <KPrintF>
    3eca:	   |   addq.l #4,sp
}
    3ecc:	   '-> nop
    3ece:	       movea.l (sp)+,a6
    3ed0:	       lea 12(sp),sp
    3ed4:	       rts

00003ed6 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    3ed6:	       movea.l 1c728 <speech>,a0
    3edc:	       move.l 4(a0),d0
    3ee0:	,----- beq.s 3eee <isThereAnySpeechGoingOn+0x18>
    3ee2:	|      movea.l 1c728 <speech>,a0
    3ee8:	|      move.l 16(a0),d0
    3eec:	|  ,-- bra.s 3ef0 <isThereAnySpeechGoingOn+0x1a>
    3eee:	'--|-> moveq #-1,d0
}
    3ef0:	   '-> rts

00003ef2 <killAllSpeech>:

void killAllSpeech () {
    3ef2:	       lea -12(sp),sp
    3ef6:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    3ef8:	       movea.l 1c728 <speech>,a0
    3efe:	       move.l 12(a0),d0
    3f02:	       moveq #-1,d1
    3f04:	       cmp.l d0,d1
    3f06:	   ,-- beq.s 3f14 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    3f08:	   |   movea.l 1c728 <speech>,a0
    3f0e:	   |   moveq #-1,d0
    3f10:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    3f14:	   '-> movea.l 1c728 <speech>,a0
    3f1a:	       move.l (a0),d0
    3f1c:	,----- beq.w 3fa8 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    3f20:	|      movea.l 1c728 <speech>,a0
    3f26:	|      move.l (a0),d1
    3f28:	|      lea -132(sp),sp
    3f2c:	|      move.l sp,d0
    3f2e:	|      movea.w #132,a0
    3f32:	|      move.l a0,-(sp)
    3f34:	|      move.l d1,-(sp)
    3f36:	|      move.l d0,-(sp)
    3f38:	|      jsr 17088 <memcpy>
    3f3e:	|      lea 12(sp),sp
    3f42:	|      jsr a98a <makeSilent>
    3f48:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    3f4c:	|      movea.l 1c728 <speech>,a0
    3f52:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    3f54:	+----- bra.s 3fa8 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    3f56:	|  ,-> movea.l 1c728 <speech>,a0
    3f5c:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    3f62:	|  |   movea.l 1c728 <speech>,a0
    3f68:	|  |   movea.l 4(a0),a1
    3f6c:	|  |   movea.l 1c728 <speech>,a0
    3f72:	|  |   move.l 4(a1),d0
    3f76:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    3f7a:	|  |   movea.l 12(sp),a0
    3f7e:	|  |   move.l (a0),8(sp)
    3f82:	|  |   move.l 1c7d8 <SysBase>,d0
    3f88:	|  |   movea.l d0,a6
    3f8a:	|  |   movea.l 8(sp),a1
    3f8e:	|  |   jsr -690(a6)
		FreeVec(killMe);
    3f92:	|  |   move.l 12(sp),4(sp)
    3f98:	|  |   move.l 1c7d8 <SysBase>,d0
    3f9e:	|  |   movea.l d0,a6
    3fa0:	|  |   movea.l 4(sp),a1
    3fa4:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    3fa8:	'--|-> movea.l 1c728 <speech>,a0
    3fae:	   |   move.l 4(a0),d0
    3fb2:	   '-- bne.s 3f56 <killAllSpeech+0x64>
	}
}
    3fb4:	       nop
    3fb6:	       nop
    3fb8:	       movea.l (sp)+,a6
    3fba:	       lea 12(sp),sp
    3fbe:	       rts

00003fc0 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    3fc0:	pea 2 <_start+0x2>
    3fc4:	move.l 8(sp),-(sp)
    3fc8:	jsr 4120 <setFrames>
    3fce:	addq.l #8,sp
}
    3fd0:	nop
    3fd2:	rts

00003fd4 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    3fd4:	       lea -52(sp),sp
    3fd8:	       move.l a6,-(sp)
    3fda:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    3fdc:	       movea.l 64(sp),a0
    3fe0:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    3fe6:	       move.l 1c142 <speechSpeed>,d0
    3fec:	       move.l 68(sp),-(sp)
    3ff0:	       move.l d0,-(sp)
    3ff2:	       jsr a46 <putFloat>
    3ff8:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    3ffa:	       movea.l 64(sp),a0
    3ffe:	       move.l 8(a0),d0
    4002:	       move.l 68(sp),-(sp)
    4006:	       move.l d0,-(sp)
    4008:	       jsr 8d0 <put2bytes>
    400e:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    4010:	       movea.l 64(sp),a0
    4014:	       move.l 16(a0),d0
    4018:	       move.l 68(sp),-(sp)
    401c:	       move.l d0,-(sp)
    401e:	       jsr 8d0 <put2bytes>
    4024:	       addq.l #8,sp
		if (sS -> currentTalker) {
    4026:	       movea.l 64(sp),a0
    402a:	       move.l (a0),d0
    402c:	   ,-- beq.s 4070 <saveSpeech+0x9c>
			FPutC (fp, 1);
    402e:	   |   move.l 68(sp),40(sp)
    4034:	   |   moveq #1,d0
    4036:	   |   move.l d0,36(sp)
    403a:	   |   move.l 1c7e0 <DOSBase>,d0
    4040:	   |   movea.l d0,a6
    4042:	   |   move.l 40(sp),d1
    4046:	   |   move.l 36(sp),d2
    404a:	   |   jsr -312(a6)
    404e:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4052:	   |   movea.l 64(sp),a0
    4056:	   |   movea.l (a0),a0
    4058:	   |   movea.l 114(a0),a0
    405c:	   |   move.l 4(a0),d0
    4060:	   |   move.l 68(sp),-(sp)
    4064:	   |   move.l d0,-(sp)
    4066:	   |   jsr 8d0 <put2bytes>
    406c:	   |   addq.l #8,sp
    406e:	,--|-- bra.s 40ec <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4070:	|  '-> move.l 68(sp),52(sp)
    4076:	|      clr.l 48(sp)
    407a:	|      move.l 1c7e0 <DOSBase>,d0
    4080:	|      movea.l d0,a6
    4082:	|      move.l 52(sp),d1
    4086:	|      move.l 48(sp),d2
    408a:	|      jsr -312(a6)
    408e:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4092:	+----- bra.s 40ec <saveSpeech+0x118>
			FPutC (fp, 1);
    4094:	|  ,-> move.l 68(sp),16(sp)
    409a:	|  |   moveq #1,d0
    409c:	|  |   move.l d0,12(sp)
    40a0:	|  |   move.l 1c7e0 <DOSBase>,d0
    40a6:	|  |   movea.l d0,a6
    40a8:	|  |   move.l 16(sp),d1
    40ac:	|  |   move.l 12(sp),d2
    40b0:	|  |   jsr -312(a6)
    40b4:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    40b8:	|  |   movea.l 56(sp),a0
    40bc:	|  |   move.l (a0),d0
    40be:	|  |   move.l 68(sp),-(sp)
    40c2:	|  |   move.l d0,-(sp)
    40c4:	|  |   jsr bd8 <writeString>
    40ca:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    40cc:	|  |   movea.l 56(sp),a0
    40d0:	|  |   move.l 8(a0),d0
    40d4:	|  |   move.l 68(sp),-(sp)
    40d8:	|  |   move.l d0,-(sp)
    40da:	|  |   jsr 8d0 <put2bytes>
    40e0:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    40e2:	|  |   movea.l 56(sp),a0
    40e6:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    40ec:	'--|-> tst.l 56(sp)
    40f0:	   '-- bne.s 4094 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    40f2:	       move.l 68(sp),28(sp)
    40f8:	       clr.l 24(sp)
    40fc:	       move.l 1c7e0 <DOSBase>,d0
    4102:	       movea.l d0,a6
    4104:	       move.l 28(sp),d1
    4108:	       move.l 24(sp),d2
    410c:	       jsr -312(a6)
    4110:	       move.l d0,20(sp)
}
    4114:	       nop
    4116:	       move.l (sp)+,d2
    4118:	       movea.l (sp)+,a6
    411a:	       lea 52(sp),sp
    411e:	       rts

00004120 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    4120:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    4122:	movea.l 8(sp),a0
    4126:	movea.l 80(a0),a0
    412a:	move.l (a0),d2
    412c:	movea.l 8(sp),a0
    4130:	movea.l 80(a0),a0
    4134:	move.l 4(a0),d0
    4138:	move.l 12(sp),-(sp)
    413c:	move.l d0,-(sp)
    413e:	jsr 17a60 <__mulsi3>
    4144:	addq.l #8,sp
    4146:	move.l d0,d1
    4148:	movea.l 8(sp),a0
    414c:	move.l 106(a0),d0
    4150:	add.l d1,d0
    4152:	add.l d0,d0
    4154:	add.l d0,d0
    4156:	movea.l d2,a0
    4158:	adda.l d0,a0
    415a:	move.l (a0),d0
    415c:	movea.l 8(sp),a0
    4160:	move.l d0,72(a0)
}
    4164:	nop
    4166:	move.l (sp)+,d2
    4168:	rts

0000416a <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    416a:	       lea -20(sp),sp
    416e:	       move.l d2,-(sp)
    4170:	       move.l 40(sp),d0
    4174:	       move.w d0,d0
    4176:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    417a:	       movea.l 1c728 <speech>,a0
    4180:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    4186:	       move.l 32(sp),-(sp)
    418a:	       jsr a474 <findPerson>
    4190:	       addq.l #4,sp
    4192:	       move.l d0,16(sp)
    if (thisPerson) {
    4196:	   ,-- beq.s 41bc <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    4198:	   |   movea.w 6(sp),a0
    419c:	   |   move.l a0,-(sp)
    419e:	   |   move.l 40(sp),-(sp)
    41a2:	   |   move.l 24(sp),-(sp)
    41a6:	   |   move.l 40(sp),-(sp)
    41aa:	   |   jsr 4282 <wrapSpeechPerson>
    41b0:	   |   lea 16(sp),sp
    41b4:	   |   move.l d0,20(sp)
    41b8:	,--|-- bra.w 4276 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    41bc:	|  '-> move.l 32(sp),-(sp)
    41c0:	|      jsr 158d2 <getRegionForObject>
    41c6:	|      addq.l #4,sp
    41c8:	|      move.l d0,12(sp)
        if (thisRegion) {
    41cc:	|  ,-- beq.s 4238 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    41ce:	|  |   movea.l 12(sp),a0
    41d2:	|  |   movea.l 28(a0),a0
    41d6:	|  |   move.l 28(a0),d0
    41da:	|  |   movea.l 12(sp),a0
    41de:	|  |   movea.l 4(a0),a1
    41e2:	|  |   movea.l 12(sp),a0
    41e6:	|  |   movea.l 28(a0),a0
    41ea:	|  |   move.l 20(a0),d1
    41ee:	|  |   movea.l a1,a0
    41f0:	|  |   suba.l d1,a0
    41f2:	|  |   move.l 1c892 <cameraY>,d1
    41f8:	|  |   movea.l a0,a1
    41fa:	|  |   suba.l d1,a1
    41fc:	|  |   movea.l 12(sp),a0
    4200:	|  |   move.l (a0),d2
    4202:	|  |   movea.l 12(sp),a0
    4206:	|  |   move.l 8(a0),d1
    420a:	|  |   add.l d2,d1
    420c:	|  |   move.l d1,d2
    420e:	|  |   asr.l #1,d2
    4210:	|  |   move.l 1c88e <cameraX>,d1
    4216:	|  |   movea.l d2,a0
    4218:	|  |   suba.l d1,a0
    421a:	|  |   move.l 36(sp),-(sp)
    421e:	|  |   move.l d0,-(sp)
    4220:	|  |   move.l a1,-(sp)
    4222:	|  |   move.l a0,-(sp)
    4224:	|  |   move.l 44(sp),-(sp)
    4228:	|  |   jsr 43a0 <wrapSpeechXY>
    422e:	|  |   lea 20(sp),sp
    4232:	|  |   move.l d0,20(sp)
    4236:	+--|-- bra.s 4276 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    4238:	|  '-> move.l 32(sp),-(sp)
    423c:	|      jsr d376 <findObjectType>
    4242:	|      addq.l #4,sp
    4244:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    4248:	|      movea.l 8(sp),a0
    424c:	|      move.l 28(a0),d1
    4250:	|      move.l 1c72c <winWidth>,d0
    4256:	|      lsr.l #1,d0
    4258:	|      move.l 36(sp),-(sp)
    425c:	|      move.l d1,-(sp)
    425e:	|      pea a <_start+0xa>
    4262:	|      move.l d0,-(sp)
    4264:	|      move.l 44(sp),-(sp)
    4268:	|      jsr 43a0 <wrapSpeechXY>
    426e:	|      lea 20(sp),sp
    4272:	|      move.l d0,20(sp)
        }
    }
    return i;
    4276:	'----> move.l 20(sp),d0
}
    427a:	       move.l (sp)+,d2
    427c:	       lea 20(sp),sp
    4280:	       rts

00004282 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    4282:	    subq.l #8,sp
    4284:	    movem.l d2-d4,-(sp)
    4288:	    move.l 36(sp),d0
    428c:	    move.w d0,d0
    428e:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    4292:	    movea.l 28(sp),a0
    4296:	    movea.l 114(a0),a0
    429a:	    move.l 28(a0),d2
    429e:	    movea.l 28(sp),a0
    42a2:	    move.l 4(a0),d3
    42a6:	    move.l 1c892 <cameraY>,d0
    42ac:	    move.l d0,-(sp)
    42ae:	    jsr 17506 <__floatsisf>
    42b4:	    addq.l #4,sp
    42b6:	    move.l d0,-(sp)
    42b8:	    move.l d3,-(sp)
    42ba:	    jsr 177fa <__subsf3>
    42c0:	    addq.l #8,sp
    42c2:	    move.l d0,d3
    42c4:	    movea.l 28(sp),a0
    42c8:	    move.l 32(a0),d4
    42cc:	    movea.l 28(sp),a0
    42d0:	    move.l 20(a0),d1
    42d4:	    movea.l 28(sp),a0
    42d8:	    move.l 24(a0),d0
    42dc:	    sub.l d0,d1
    42de:	    move.l d1,-(sp)
    42e0:	    jsr 17506 <__floatsisf>
    42e6:	    addq.l #4,sp
    42e8:	    move.l d0,-(sp)
    42ea:	    move.l d4,-(sp)
    42ec:	    jsr 175b8 <__mulsf3>
    42f2:	    addq.l #8,sp
    42f4:	    move.l d0,-(sp)
    42f6:	    move.l d3,-(sp)
    42f8:	    jsr 177fa <__subsf3>
    42fe:	    addq.l #8,sp
    4300:	    move.l d0,d3
    4302:	    movea.l 28(sp),a0
    4306:	    movea.l 114(a0),a0
    430a:	    move.l 20(a0),d0
    430e:	    move.l d0,-(sp)
    4310:	    jsr 17506 <__floatsisf>
    4316:	    addq.l #4,sp
    4318:	    move.l d0,-(sp)
    431a:	    move.l d3,-(sp)
    431c:	    jsr 177fa <__subsf3>
    4322:	    addq.l #8,sp
    4324:	    move.l d0,-(sp)
    4326:	    jsr 1749e <__fixsfsi>
    432c:	    addq.l #4,sp
    432e:	    move.l d0,d4
    4330:	    movea.l 28(sp),a0
    4334:	    move.l (a0),d3
    4336:	    move.l 1c88e <cameraX>,d0
    433c:	    move.l d0,-(sp)
    433e:	    jsr 17506 <__floatsisf>
    4344:	    addq.l #4,sp
    4346:	    move.l d0,-(sp)
    4348:	    move.l d3,-(sp)
    434a:	    jsr 177fa <__subsf3>
    4350:	    addq.l #8,sp
    4352:	    move.l d0,-(sp)
    4354:	    jsr 1749e <__fixsfsi>
    435a:	    addq.l #4,sp
    435c:	    move.l 32(sp),-(sp)
    4360:	    move.l d2,-(sp)
    4362:	    move.l d4,-(sp)
    4364:	    move.l d0,-(sp)
    4366:	    move.l 40(sp),-(sp)
    436a:	    jsr 43a0 <wrapSpeechXY>
    4370:	    lea 20(sp),sp
    4374:	    move.l d0,16(sp)
	if (animPerson) {
    4378:	    tst.w 14(sp)
    437c:	,-- beq.s 4394 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    437e:	|   move.l 28(sp),-(sp)
    4382:	|   jsr 3fc0 <makeTalker>
    4388:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    438a:	|   movea.l 1c728 <speech>,a0
    4390:	|   move.l 28(sp),(a0)
	}
	return i;
    4394:	'-> move.l 16(sp),d0
}
    4398:	    movem.l (sp)+,d2-d4
    439c:	    addq.l #8,sp
    439e:	    rts

000043a0 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    43a0:	                   lea -16(sp),sp
    43a4:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    43a8:	                   clr.l 16(sp)
    killAllSpeech();
    43ac:	                   jsr 3ef2 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    43b2:	                   move.l 36(sp),-(sp)
    43b6:	                   jsr 13afc <strlen>
    43bc:	                   addq.l #4,sp
    43be:	                   movea.l d0,a0
    43c0:	                   lea 20(a0),a0
    43c4:	                   move.l a0,-(sp)
    43c6:	                   jsr 1752e <__floatunsisf>
    43cc:	                   addq.l #4,sp
    43ce:	                   move.l d0,d1
    43d0:	                   move.l 1c142 <speechSpeed>,d0
    43d6:	                   move.l d0,-(sp)
    43d8:	                   move.l d1,-(sp)
    43da:	                   jsr 175b8 <__mulsf3>
    43e0:	                   addq.l #8,sp
    43e2:	                   move.l d0,-(sp)
    43e4:	                   jsr 1749e <__fixsfsi>
    43ea:	                   addq.l #4,sp
    43ec:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    43f0:	               ,-- bgt.s 43f8 <wrapSpeechXY+0x58>
    43f2:	               |   moveq #1,d0
    43f4:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    43f8:	               '-> moveq #-1,d1
    43fa:	                   cmp.l 52(sp),d1
    43fe:	               ,-- beq.s 443e <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    4400:	               |   move.l 1c8a2 <speechMode>,d0
    4406:	               +-- ble.s 443e <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    4408:	               |   clr.l -(sp)
    440a:	               |   move.l 56(sp),-(sp)
    440e:	               |   jsr d040 <startSound>
    4414:	               |   addq.l #8,sp
    4416:	               |   tst.w d0
    4418:	               +-- beq.s 443e <wrapSpeechXY+0x9e>
                speechTime = -10;
    441a:	               |   moveq #-10,d0
    441c:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    4420:	               |   movea.l 1c728 <speech>,a0
    4426:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    442c:	               |   move.l 1c8a2 <speechMode>,d0
    4432:	               |   moveq #2,d1
    4434:	               |   cmp.l d0,d1
    4436:	               +-- bne.s 443e <wrapSpeechXY+0x9e>
    4438:	               |   moveq #-10,d0
    443a:	,--------------|-- bra.w 46c4 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    443e:	|              '-> movea.l 1c728 <speech>,a0
    4444:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    444a:	|     ,----------- bra.w 44fe <wrapSpeechXY+0x15e>
        a = wrap;
    444e:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    4454:	|  |  |        ,-- bra.s 4464 <wrapSpeechXY+0xc4>
            a--;
    4456:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    445a:	|  |  |  |     +-- bne.s 4464 <wrapSpeechXY+0xc4>
                a = wrap;
    445c:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4462:	|  |  |  |  ,--|-- bra.s 4476 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    4464:	|  |  |  |  |  '-> move.l 28(sp),d0
    4468:	|  |  |  |  |      movea.l 36(sp),a0
    446c:	|  |  |  |  |      adda.l d0,a0
    446e:	|  |  |  |  |      move.b (a0),d0
    4470:	|  |  |  |  |      cmpi.b #32,d0
    4474:	|  |  |  '--|----- bne.s 4456 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    4476:	|  |  |     '----> move.l 28(sp),d0
    447a:	|  |  |            movea.l 36(sp),a0
    447e:	|  |  |            adda.l d0,a0
    4480:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4482:	|  |  |            lea 16(sp),a0
    4486:	|  |  |            move.l a0,-(sp)
    4488:	|  |  |            move.l 44(sp),-(sp)
    448c:	|  |  |            move.l 44(sp),-(sp)
    4490:	|  |  |            jsr 3c3c <addSpeechLine>
    4496:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    449a:	|  |  |            move.l 28(sp),d0
    449e:	|  |  |            movea.l 36(sp),a0
    44a2:	|  |  |            adda.l d0,a0
    44a4:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    44a8:	|  |  |            move.l 28(sp),d0
    44ac:	|  |  |            addq.l #1,d0
    44ae:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    44b2:	|  |  |            move.l 44(sp),-(sp)
    44b6:	|  |  |            jsr 17506 <__floatsisf>
    44bc:	|  |  |            addq.l #4,sp
    44be:	|  |  |            move.l d0,d2
    44c0:	|  |  |            move.l 1c8cc <fontHeight>,d0
    44c6:	|  |  |            move.l d0,-(sp)
    44c8:	|  |  |            jsr 17506 <__floatsisf>
    44ce:	|  |  |            addq.l #4,sp
    44d0:	|  |  |            move.l d0,d1
    44d2:	|  |  |            move.l 1c16a <cameraZoom>,d0
    44d8:	|  |  |            move.l d0,-(sp)
    44da:	|  |  |            move.l d1,-(sp)
    44dc:	|  |  |            jsr 173bc <__divsf3>
    44e2:	|  |  |            addq.l #8,sp
    44e4:	|  |  |            move.l d0,-(sp)
    44e6:	|  |  |            move.l d2,-(sp)
    44e8:	|  |  |            jsr 177fa <__subsf3>
    44ee:	|  |  |            addq.l #8,sp
    44f0:	|  |  |            move.l d0,-(sp)
    44f2:	|  |  |            jsr 1749e <__fixsfsi>
    44f8:	|  |  |            addq.l #4,sp
    44fa:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    44fe:	|  |  '----------> move.l 36(sp),-(sp)
    4502:	|  |               jsr 13afc <strlen>
    4508:	|  |               addq.l #4,sp
    450a:	|  |               move.l d0,d1
    450c:	|  |               move.l 48(sp),d0
    4510:	|  |               cmp.l d1,d0
    4512:	|  '-------------- bcs.w 444e <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    4516:	|                  lea 16(sp),a0
    451a:	|                  move.l a0,-(sp)
    451c:	|                  move.l 44(sp),-(sp)
    4520:	|                  move.l 44(sp),-(sp)
    4524:	|                  jsr 3c3c <addSpeechLine>
    452a:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    452e:	|                  move.l 44(sp),-(sp)
    4532:	|                  jsr 17506 <__floatsisf>
    4538:	|                  addq.l #4,sp
    453a:	|                  move.l d0,d2
    453c:	|                  move.l 1c8cc <fontHeight>,d0
    4542:	|                  move.l d0,-(sp)
    4544:	|                  jsr 17506 <__floatsisf>
    454a:	|                  addq.l #4,sp
    454c:	|                  move.l d0,d1
    454e:	|                  move.l 1c16a <cameraZoom>,d0
    4554:	|                  move.l d0,-(sp)
    4556:	|                  move.l d1,-(sp)
    4558:	|                  jsr 173bc <__divsf3>
    455e:	|                  addq.l #8,sp
    4560:	|                  move.l d0,-(sp)
    4562:	|                  move.l d2,-(sp)
    4564:	|                  jsr 177fa <__subsf3>
    456a:	|                  addq.l #8,sp
    456c:	|                  move.l d0,-(sp)
    456e:	|                  jsr 1749e <__fixsfsi>
    4574:	|                  addq.l #4,sp
    4576:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    457a:	|              ,-- bpl.s 4598 <wrapSpeechXY+0x1f8>
    457c:	|              |   movea.l 1c728 <speech>,a0
    4582:	|              |   move.l 8(a0),d0
    4586:	|              |   movea.l 1c728 <speech>,a0
    458c:	|              |   sub.l 44(sp),d0
    4590:	|              |   move.l d0,8(a0)
    4594:	|           ,--|-- bra.w 4686 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    4598:	|           |  '-> movea.l 1c728 <speech>,a0
    459e:	|           |      move.l 8(a0),d0
    45a2:	|           |      move.l d0,-(sp)
    45a4:	|           |      jsr 17506 <__floatsisf>
    45aa:	|           |      addq.l #4,sp
    45ac:	|           |      move.l d0,d2
    45ae:	|           |      move.l 1c892 <cameraY>,d0
    45b4:	|           |      move.l d0,-(sp)
    45b6:	|           |      jsr 17506 <__floatsisf>
    45bc:	|           |      addq.l #4,sp
    45be:	|           |      move.l d0,d3
    45c0:	|           |      move.l 1c730 <winHeight>,d4
    45c6:	|           |      move.l 1c8cc <fontHeight>,d0
    45cc:	|           |      pea 3 <_start+0x3>
    45d0:	|           |      move.l d0,-(sp)
    45d2:	|           |      jsr 17ade <__divsi3>
    45d8:	|           |      addq.l #8,sp
    45da:	|           |      move.l d4,d1
    45dc:	|           |      sub.l d0,d1
    45de:	|           |      move.l d1,-(sp)
    45e0:	|           |      jsr 1752e <__floatunsisf>
    45e6:	|           |      addq.l #4,sp
    45e8:	|           |      move.l d0,d1
    45ea:	|           |      move.l 1c16a <cameraZoom>,d0
    45f0:	|           |      move.l d0,-(sp)
    45f2:	|           |      move.l d1,-(sp)
    45f4:	|           |      jsr 173bc <__divsf3>
    45fa:	|           |      addq.l #8,sp
    45fc:	|           |      move.l d0,-(sp)
    45fe:	|           |      move.l d3,-(sp)
    4600:	|           |      jsr 172c2 <__addsf3>
    4606:	|           |      addq.l #8,sp
    4608:	|           |      move.l d0,-(sp)
    460a:	|           |      move.l d2,-(sp)
    460c:	|           |      jsr 17672 <__gtsf2>
    4612:	|           |      addq.l #8,sp
    4614:	|           |      tst.l d0
    4616:	|           +----- ble.s 4686 <wrapSpeechXY+0x2e6>
    4618:	|           |      move.l 1c892 <cameraY>,d0
    461e:	|           |      move.l d0,-(sp)
    4620:	|           |      jsr 17506 <__floatsisf>
    4626:	|           |      addq.l #4,sp
    4628:	|           |      move.l d0,d2
    462a:	|           |      move.l 1c730 <winHeight>,d3
    4630:	|           |      move.l 1c8cc <fontHeight>,d0
    4636:	|           |      pea 3 <_start+0x3>
    463a:	|           |      move.l d0,-(sp)
    463c:	|           |      jsr 17ade <__divsi3>
    4642:	|           |      addq.l #8,sp
    4644:	|           |      move.l d3,d1
    4646:	|           |      sub.l d0,d1
    4648:	|           |      move.l d1,-(sp)
    464a:	|           |      jsr 1752e <__floatunsisf>
    4650:	|           |      addq.l #4,sp
    4652:	|           |      move.l d0,d1
    4654:	|           |      move.l 1c16a <cameraZoom>,d0
    465a:	|           |      move.l d0,-(sp)
    465c:	|           |      move.l d1,-(sp)
    465e:	|           |      jsr 173bc <__divsf3>
    4664:	|           |      addq.l #8,sp
    4666:	|           |      move.l d0,-(sp)
    4668:	|           |      move.l d2,-(sp)
    466a:	|           |      jsr 172c2 <__addsf3>
    4670:	|           |      addq.l #8,sp
    4672:	|           |      movea.l 1c728 <speech>,a2
    4678:	|           |      move.l d0,-(sp)
    467a:	|           |      jsr 1749e <__fixsfsi>
    4680:	|           |      addq.l #4,sp
    4682:	|           |      move.l d0,8(a2)

    if (offset) {
    4686:	|           '----> move.l 16(sp),d0
    468a:	|        ,-------- beq.s 46c0 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    468c:	|        |         movea.l 1c728 <speech>,a0
    4692:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4698:	|        |     ,-- bra.s 46ba <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    469a:	|        |  ,--|-> movea.l 20(sp),a0
    469e:	|        |  |  |   move.l 8(a0),d1
    46a2:	|        |  |  |   move.l 16(sp),d0
    46a6:	|        |  |  |   add.l d1,d0
    46a8:	|        |  |  |   movea.l 20(sp),a0
    46ac:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    46b0:	|        |  |  |   movea.l 20(sp),a0
    46b4:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    46ba:	|        |  |  '-> tst.l 20(sp)
    46be:	|        |  '----- bne.s 469a <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    46c0:	|        '-------> move.l 24(sp),d0
}
    46c4:	'----------------> movem.l (sp)+,d2-d4/a2
    46c8:	                   lea 16(sp),sp
    46cc:	                   rts

000046ce <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    46ce:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    46d2:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    46d6:	       tst.l 24(sp)
    46da:	   ,-- bge.s 46e0 <drawLine+0x12>
    46dc:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    46e0:	   '-> tst.l 28(sp)
    46e4:	   ,-- bge.s 46ea <drawLine+0x1c>
    46e6:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    46ea:	   '-> tst.l 32(sp)
    46ee:	   ,-- bge.s 46f4 <drawLine+0x26>
    46f0:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    46f4:	   '-> tst.l 36(sp)
    46f8:	   ,-- bge.s 46fe <drawLine+0x30>
    46fa:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    46fe:	   '-> move.l 1c870 <sceneWidth>,d0
    4704:	       cmp.l 24(sp),d0
    4708:	   ,-- bge.s 4718 <drawLine+0x4a>
    470a:	   |   move.l 1c870 <sceneWidth>,d0
    4710:	   |   move.l d0,d1
    4712:	   |   subq.l #1,d1
    4714:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4718:	   '-> move.l 1c870 <sceneWidth>,d0
    471e:	       cmp.l 32(sp),d0
    4722:	   ,-- bge.s 4732 <drawLine+0x64>
    4724:	   |   move.l 1c870 <sceneWidth>,d0
    472a:	   |   move.l d0,d1
    472c:	   |   subq.l #1,d1
    472e:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4732:	   '-> move.l 1c874 <sceneHeight>,d0
    4738:	       cmp.l 28(sp),d0
    473c:	   ,-- bge.s 474c <drawLine+0x7e>
    473e:	   |   move.l 1c874 <sceneHeight>,d0
    4744:	   |   move.l d0,d1
    4746:	   |   subq.l #1,d1
    4748:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    474c:	   '-> move.l 1c874 <sceneHeight>,d0
    4752:	       cmp.l 36(sp),d0
    4756:	   ,-- bge.s 4766 <drawLine+0x98>
    4758:	   |   move.l 1c874 <sceneHeight>,d0
    475e:	   |   move.l d0,d1
    4760:	   |   subq.l #1,d1
    4762:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4766:	   '-> move.l 24(sp),d0
    476a:	       cmp.l 32(sp),d0
    476e:	,----- ble.s 478a <drawLine+0xbc>
		x = x2; 
    4770:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4776:	|      tst.w 10(sp)
    477a:	|      seq d0
    477c:	|      neg.b d0
    477e:	|      move.b d0,d0
    4780:	|      andi.w #255,d0
    4784:	|      move.w d0,10(sp)
    4788:	|  ,-- bra.s 4790 <drawLine+0xc2>
	} else x = x1;
    478a:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4790:	   '-> move.l 28(sp),d1
    4794:	       cmp.l 36(sp),d1
    4798:	,----- ble.s 47b4 <drawLine+0xe6>
		y = y2; 
    479a:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    47a0:	|      tst.w 10(sp)
    47a4:	|      seq d0
    47a6:	|      neg.b d0
    47a8:	|      move.b d0,d0
    47aa:	|      andi.w #255,d0
    47ae:	|      move.w d0,10(sp)
    47b2:	|  ,-- bra.s 47ba <drawLine+0xec>
	} else y = y1;	
    47b4:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    47ba:	   '-> move.l 32(sp),d0
    47be:	       sub.l 24(sp),d0
    47c2:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    47c6:	       move.l 6(sp),d0
    47ca:	   ,-- bpl.s 47ce <drawLine+0x100>
    47cc:	   |   neg.l d0
    47ce:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    47d2:	       move.l 36(sp),d1
    47d6:	       sub.l 28(sp),d1
    47da:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    47de:	       move.l 2(sp),d0
    47e2:	   ,-- bpl.s 47e6 <drawLine+0x118>
    47e4:	   |   neg.l d0
    47e6:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    47ea:	       tst.l 6(sp)
    47ee:	   ,-- bne.s 4812 <drawLine+0x144>
		diffX = 1;
    47f0:	   |   moveq #1,d0
    47f2:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    47f6:	   |   move.l 1c870 <sceneWidth>,d0
    47fc:	   |   subq.l #1,d0
    47fe:	   |   cmp.l 16(sp),d0
    4802:	   +-- bne.s 4812 <drawLine+0x144>
    4804:	   |   move.l 1c870 <sceneWidth>,d0
    480a:	   |   move.l d0,d1
    480c:	   |   subq.l #2,d1
    480e:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4812:	   '-> tst.l 2(sp)
    4816:	   ,-- bne.s 483a <drawLine+0x16c>
		diffY = 1;
    4818:	   |   moveq #1,d0
    481a:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    481e:	   |   move.l 1c874 <sceneHeight>,d0
    4824:	   |   subq.l #1,d0
    4826:	   |   cmp.l 12(sp),d0
    482a:	   +-- bne.s 483a <drawLine+0x16c>
    482c:	   |   move.l 1c874 <sceneHeight>,d0
    4832:	   |   move.l d0,d1
    4834:	   |   subq.l #2,d1
    4836:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    483a:	   '-> pea 1826f <PutChar+0x6f9>
    4840:	       jsr 170d4 <KPrintF>
    4846:	       addq.l #4,sp
	
}
    4848:	       nop
    484a:	       lea 20(sp),sp
    484e:	       rts

00004850 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4850:	                      lea -24(sp),sp
    4854:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4856:	                      move.l 1c734 <firstTexture>,d0
    485c:	,-------------------- beq.w 493a <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4860:	|                     clr.l 24(sp)
    4864:	|     ,-------------- bra.w 492e <deleteTextures+0xde>
			BOOL found = FALSE;
    4868:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    486c:	|  |  |               move.l 1c734 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4874:	|  |  |               movea.l 20(sp),a0
    4878:	|  |  |               move.l (a0),d1
    487a:	|  |  |               move.l 24(sp),d0
    487e:	|  |  |               add.l d0,d0
    4880:	|  |  |               add.l d0,d0
    4882:	|  |  |               movea.l 36(sp),a0
    4886:	|  |  |               adda.l d0,a0
    4888:	|  |  |               move.l (a0),d0
    488a:	|  |  |               cmp.l d1,d0
    488c:	|  |  |  ,----------- bne.w 4920 <deleteTextures+0xd0>
				found = TRUE;
    4890:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4896:	|  |  |  |            movea.l 20(sp),a0
    489a:	|  |  |  |            move.l 12(a0),d0
    489e:	|  |  |  |            move.l d0,1c734 <firstTexture>
				FreeVec(list);
    48a4:	|  |  |  |            move.l 20(sp),6(sp)
    48aa:	|  |  |  |            move.l 1c7d8 <SysBase>,d0
    48b0:	|  |  |  |            movea.l d0,a6
    48b2:	|  |  |  |            movea.l 6(sp),a1
    48b6:	|  |  |  |            jsr -690(a6)
				continue;
    48ba:	|  |  |  |  ,-------- bra.s 492a <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    48bc:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    48c0:	|  |  |  |  |  |      movea.l 12(a0),a0
    48c4:	|  |  |  |  |  |      move.l (a0),d1
    48c6:	|  |  |  |  |  |      move.l 24(sp),d0
    48ca:	|  |  |  |  |  |      add.l d0,d0
    48cc:	|  |  |  |  |  |      add.l d0,d0
    48ce:	|  |  |  |  |  |      movea.l 36(sp),a0
    48d2:	|  |  |  |  |  |      adda.l d0,a0
    48d4:	|  |  |  |  |  |      move.l (a0),d0
    48d6:	|  |  |  |  |  |      cmp.l d1,d0
    48d8:	|  |  |  |  |  |  ,-- bne.s 4916 <deleteTextures+0xc6>
					found = TRUE;
    48da:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    48e0:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    48e4:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    48ea:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    48ee:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    48f2:	|  |  |  |  |  |  |   move.l 12(a0),d0
    48f6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    48fa:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    48fe:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4904:	|  |  |  |  |  |  |   move.l 1c7d8 <SysBase>,d0
    490a:	|  |  |  |  |  |  |   movea.l d0,a6
    490c:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4910:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4914:	|  |  |  |  +--|--|-- bra.s 492a <deleteTextures+0xda>
				}
				list = list->next;
    4916:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    491a:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4920:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4924:	|  |  |     |  |      move.l 12(a0),d0
    4928:	|  |  |     |  '----- bne.s 48bc <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    492a:	|  |  |     '-------> addq.l #1,24(sp)
    492e:	|  |  '-------------> move.l 24(sp),d0
    4932:	|  |                  cmp.l 32(sp),d0
    4936:	|  '----------------- bcs.w 4868 <deleteTextures+0x18>
			}
		}
	}
}
    493a:	'-------------------> nop
    493c:	                      movea.l (sp)+,a6
    493e:	                      lea 24(sp),sp
    4942:	                      rts

00004944 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4944:	subq.l #4,sp
    4946:	move.l 8(sp),d0
    494a:	move.w d0,d0
    494c:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4950:	pea 18292 <PutChar+0x71c>
    4956:	jsr 170d4 <KPrintF>
    495c:	addq.l #4,sp
}
    495e:	nop
    4960:	addq.l #4,sp
    4962:	rts

00004964 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4964:	       moveq #-1,d0
    4966:	       cmp.l 4(sp),d0
    496a:	   ,-- bne.s 4970 <resourceNameFromNum+0xc>
    496c:	   |   moveq #0,d0
    496e:	,--|-- bra.s 49a8 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4970:	|  '-> move.l 1c7b4 <numResourceNames>,d0
    4976:	|  ,-- bne.s 4980 <resourceNameFromNum+0x1c>
    4978:	|  |   move.l #99010,d0
    497e:	+--|-- bra.s 49a8 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4980:	|  '-> move.l 1c7b4 <numResourceNames>,d0
    4986:	|      cmp.l 4(sp),d0
    498a:	|  ,-- ble.s 49a2 <resourceNameFromNum+0x3e>
    498c:	|  |   move.l 1c76c <allResourceNames>,d1
    4992:	|  |   move.l 4(sp),d0
    4996:	|  |   add.l d0,d0
    4998:	|  |   add.l d0,d0
    499a:	|  |   movea.l d1,a0
    499c:	|  |   adda.l d0,a0
    499e:	|  |   move.l (a0),d0
    49a0:	+--|-- bra.s 49a8 <resourceNameFromNum+0x44>
	return "Unknown resource";
    49a2:	|  '-> move.l #99019,d0
    49a8:	'----> rts

000049aa <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    49aa:	          lea -44(sp),sp
    49ae:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    49b2:	          move.l #320,1c72c <winWidth>
    winHeight = 256;
    49bc:	          move.l #256,1c730 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    49c6:	          tst.l 60(sp)
    49ca:	      ,-- bne.s 49e2 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    49cc:	      |   pea 182dc <PutChar+0x766>
    49d2:	      |   jsr b8 <copyString>
    49d8:	      |   addq.l #4,sp
    49da:	      |   move.l d0,1c744 <bundleFolder>
    49e0:	   ,--|-- bra.s 49f8 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    49e2:	   |  '-> movea.l 64(sp),a0
    49e6:	   |      move.l (a0),d0
    49e8:	   |      move.l d0,-(sp)
    49ea:	   |      jsr b8 <copyString>
    49f0:	   |      addq.l #4,sp
    49f2:	   |      move.l d0,1c744 <bundleFolder>
	}
    
	int lastSlash = -1;
    49f8:	   '----> moveq #-1,d0
    49fa:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    49fe:	          clr.l 44(sp)
    4a02:	   ,----- bra.s 4a24 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4a04:	,--|----> move.l 1c744 <bundleFolder>,d1
    4a0a:	|  |      move.l 44(sp),d0
    4a0e:	|  |      movea.l d1,a0
    4a10:	|  |      adda.l d0,a0
    4a12:	|  |      move.b (a0),d0
    4a14:	|  |      cmpi.b #47,d0
    4a18:	|  |  ,-- bne.s 4a20 <main_sludge+0x76>
    4a1a:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4a20:	|  |  '-> addq.l #1,44(sp)
    4a24:	|  '----> move.l 1c744 <bundleFolder>,d1
    4a2a:	|         move.l 44(sp),d0
    4a2e:	|         movea.l d1,a0
    4a30:	|         adda.l d0,a0
    4a32:	|         move.b (a0),d0
    4a34:	'-------- bne.s 4a04 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4a36:	          move.l 1c744 <bundleFolder>,d0
    4a3c:	          move.l 48(sp),d1
    4a40:	          addq.l #1,d1
    4a42:	          movea.l d0,a0
    4a44:	          adda.l d1,a0
    4a46:	          clr.b (a0)

	if (argc > 1) {
    4a48:	          moveq #1,d0
    4a4a:	          cmp.l 60(sp),d0
    4a4e:	      ,-- bge.s 4a6a <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4a50:	      |   move.l 60(sp),d0
    4a54:	      |   addi.l #1073741823,d0
    4a5a:	      |   add.l d0,d0
    4a5c:	      |   add.l d0,d0
    4a5e:	      |   movea.l 64(sp),a0
    4a62:	      |   adda.l d0,a0
    4a64:	      |   move.l (a0),52(sp)
    4a68:	   ,--|-- bra.s 4ac4 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4a6a:	   |  '-> move.l 1c744 <bundleFolder>,d0
    4a70:	   |      pea 182e2 <PutChar+0x76c>
    4a76:	   |      move.l d0,-(sp)
    4a78:	   |      jsr 13b3c <joinStrings>
    4a7e:	   |      addq.l #8,sp
    4a80:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4a84:	   |      move.l 52(sp),-(sp)
    4a88:	   |      jsr 13a36 <fileExists>
    4a8e:	   |      addq.l #4,sp
    4a90:	   |      tst.b d0
    4a92:	   +----- bne.s 4ac4 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4a94:	   |      move.l 52(sp),40(sp)
    4a9a:	   |      move.l 1c7d8 <SysBase>,d0
    4aa0:	   |      movea.l d0,a6
    4aa2:	   |      movea.l 40(sp),a1
    4aa6:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4aaa:	   |      move.l 1c744 <bundleFolder>,d0
    4ab0:	   |      pea 182ef <PutChar+0x779>
    4ab6:	   |      move.l d0,-(sp)
    4ab8:	   |      jsr 13b3c <joinStrings>
    4abe:	   |      addq.l #8,sp
    4ac0:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4ac4:	   '----> pea 182f8 <PutChar+0x782>
    4aca:	          jsr 170d4 <KPrintF>
    4ad0:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4ad2:	          move.l 52(sp),-(sp)
    4ad6:	          jsr 13a36 <fileExists>
    4adc:	          addq.l #4,sp
    4ade:	          tst.b d0
    4ae0:	      ,-- bne.s 4b38 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4ae2:	      |   move.l 1c7e0 <DOSBase>,d0
    4ae8:	      |   movea.l d0,a6
    4aea:	      |   jsr -60(a6)
    4aee:	      |   move.l d0,28(sp)
    4af2:	      |   move.l 28(sp),d0
    4af6:	      |   move.l d0,24(sp)
    4afa:	      |   move.l #99064,20(sp)
    4b02:	      |   moveq #21,d0
    4b04:	      |   move.l d0,16(sp)
    4b08:	      |   move.l 1c7e0 <DOSBase>,d0
    4b0e:	      |   movea.l d0,a6
    4b10:	      |   move.l 24(sp),d1
    4b14:	      |   move.l 20(sp),d2
    4b18:	      |   move.l 16(sp),d3
    4b1c:	      |   jsr -48(a6)
    4b20:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4b24:	      |   pea 182f8 <PutChar+0x782>
    4b2a:	      |   jsr 170d4 <KPrintF>
    4b30:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4b32:	      |   moveq #0,d0
    4b34:	,-----|-- bra.w 4d36 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4b38:	|     '-> pea 1830e <PutChar+0x798>
    4b3e:	|         jsr 170d4 <KPrintF>
    4b44:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4b46:	|         move.l 52(sp),-(sp)
    4b4a:	|         jsr 4d40 <setGameFilePath>
    4b50:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4b52:	|         move.l 52(sp),-(sp)
    4b56:	|         jsr 62ee <initSludge>
    4b5c:	|         addq.l #4,sp
    4b5e:	|         tst.w d0
    4b60:	|     ,-- bne.s 4b68 <main_sludge+0x1be>
    4b62:	|     |   moveq #0,d0
    4b64:	+-----|-- bra.w 4d36 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4b68:	|     '-> move.l 1c72c <winWidth>,d0
    4b6e:	|         cmpi.l #320,d0
    4b74:	|     ,-- bne.s 4b84 <main_sludge+0x1da>
    4b76:	|     |   move.l 1c730 <winHeight>,d0
    4b7c:	|     |   cmpi.l #256,d0
    4b82:	|  ,--|-- beq.s 4ba6 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4b84:	|  |  '-> pea 1831f <PutChar+0x7a9>
    4b8a:	|  |      jsr 170d4 <KPrintF>
    4b90:	|  |      addq.l #4,sp
		winWidth = 320;
    4b92:	|  |      move.l #320,1c72c <winWidth>
		winHeight = 256;
    4b9c:	|  |      move.l #256,1c730 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4ba6:	|  '----> pea 1839c <PutChar+0x826>
    4bac:	|         jsr 170d4 <KPrintF>
    4bb2:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4bb4:	|         move.l 1c730 <winHeight>,d0
    4bba:	|         move.l d0,d1
    4bbc:	|         move.l 1c72c <winWidth>,d0
    4bc2:	|         move.l d1,-(sp)
    4bc4:	|         move.l d0,-(sp)
    4bc6:	|         jsr d254 <resizeBackdrop>
    4bcc:	|         addq.l #8,sp
    4bce:	|         tst.w d0
    4bd0:	|     ,-- bne.s 4be6 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4bd2:	|     |   pea 183af <PutChar+0x839>
    4bd8:	|     |   jsr 170d4 <KPrintF>
    4bde:	|     |   addq.l #4,sp
		return FALSE;
    4be0:	|     |   moveq #0,d0
    4be2:	+-----|-- bra.w 4d36 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4be6:	|     '-> pea 183d5 <PutChar+0x85f>
    4bec:	|         jsr 170d4 <KPrintF>
    4bf2:	|         addq.l #4,sp
	if (! initPeople ())
    4bf4:	|         jsr a7b0 <initPeople>
    4bfa:	|         tst.w d0
    4bfc:	|     ,-- bne.s 4c12 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4bfe:	|     |   pea 183e2 <PutChar+0x86c>
    4c04:	|     |   jsr 170d4 <KPrintF>
    4c0a:	|     |   addq.l #4,sp
		return FALSE;
    4c0c:	|     |   moveq #0,d0
    4c0e:	+-----|-- bra.w 4d36 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4c12:	|     '-> pea 18403 <PutChar+0x88d>
    4c18:	|         jsr 170d4 <KPrintF>
    4c1e:	|         addq.l #4,sp
	if (! initFloor ())
    4c20:	|         jsr 1648a <initFloor>
    4c26:	|         tst.w d0
    4c28:	|     ,-- bne.s 4c3e <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4c2a:	|     |   pea 1840f <PutChar+0x899>
    4c30:	|     |   jsr 170d4 <KPrintF>
    4c36:	|     |   addq.l #4,sp
		
		return FALSE;
    4c38:	|     |   moveq #0,d0
    4c3a:	+-----|-- bra.w 4d36 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    4c3e:	|     '-> pea 1842f <PutChar+0x8b9>
    4c44:	|         jsr 170d4 <KPrintF>
    4c4a:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4c4c:	|         jsr d410 <initObjectTypes>
    4c52:	|         tst.w d0
    4c54:	|     ,-- bne.s 4c6a <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4c56:	|     |   pea 18440 <PutChar+0x8ca>
    4c5c:	|     |   jsr 170d4 <KPrintF>
    4c62:	|     |   addq.l #4,sp
		return FALSE;
    4c64:	|     |   moveq #0,d0
    4c66:	+-----|-- bra.w 4d36 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4c6a:	|     '-> pea 18466 <PutChar+0x8f0>
    4c70:	|         jsr 170d4 <KPrintF>
    4c76:	|         addq.l #4,sp
	initSpeech ();
    4c78:	|         jsr 3e5a <initSpeech>
	KPrintF("Init status bar\n");
    4c7e:	|         pea 18473 <PutChar+0x8fd>
    4c84:	|         jsr 170d4 <KPrintF>
    4c8a:	|         addq.l #4,sp
	initStatusBar ();
    4c8c:	|         jsr 81da <initStatusBar>

	KPrintF("Get numbered string\n");
    4c92:	|         pea 18484 <PutChar+0x90e>
    4c98:	|         jsr 170d4 <KPrintF>
    4c9e:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4ca0:	|         pea 1 <_start+0x1>
    4ca4:	|         jsr 74e4 <getNumberedString>
    4caa:	|         addq.l #4,sp
    4cac:	|         move.l d0,1c73c <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4cb2:	|         pea 18499 <PutChar+0x923>
    4cb8:	|         jsr 170d4 <KPrintF>
    4cbe:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4cc0:	|         move.l 1c7a8 <noStack>,d0
    4cc6:	|         pea 1 <_start+0x1>
    4cca:	|         move.l d0,-(sp)
    4ccc:	|         clr.l -(sp)
    4cce:	|         clr.l -(sp)
    4cd0:	|         clr.l -(sp)
    4cd2:	|         jsr 733a <startNewFunctionNum>
    4cd8:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4cdc:	|         pea 184b1 <PutChar+0x93b>
    4ce2:	|         jsr 170d4 <KPrintF>
    4ce8:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4cea:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4cf2:	|         clr.l 1c748 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4cf8:	|     ,-- bra.s 4d18 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4cfa:	|  ,--|-> jsr 72ca <sludgeDisplay>
		CsiCheckInput();
    4d00:	|  |  |   jsr cd7c <CsiCheckInput>
		walkAllPeople();
    4d06:	|  |  |   jsr bd36 <walkAllPeople>
		handleInput();
    4d0c:	|  |  |   jsr 6088 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4d12:	|  |  |   jsr 17008 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4d18:	|  |  '-> move.l 1c748 <weAreDoneSoQuit>,d0
    4d1e:	|  '----- beq.s 4cfa <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    4d20:	|         move.l 52(sp),32(sp)
    4d26:	|         move.l 1c7d8 <SysBase>,d0
    4d2c:	|         movea.l d0,a6
    4d2e:	|         movea.l 32(sp),a1
    4d32:	|         jsr -690(a6)
}
    4d36:	'-------> movem.l (sp)+,d2-d3/a6
    4d3a:	          lea 44(sp),sp
    4d3e:	          rts

00004d40 <setGameFilePath>:

void setGameFilePath (char * f) {
    4d40:	          lea -1104(sp),sp
    4d44:	          move.l a6,-(sp)
    4d46:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4d48:	          move.l #1112,d0
    4d4e:	          add.l sp,d0
    4d50:	          addi.l #-1102,d0
    4d56:	          move.l d0,1100(sp)
    4d5a:	          move.l #998,1096(sp)
    4d62:	          move.l 1c7e0 <DOSBase>,d0
    4d68:	          movea.l d0,a6
    4d6a:	          move.l 1100(sp),d1
    4d6e:	          move.l 1096(sp),d2
    4d72:	          jsr -564(a6)
    4d76:	          move.w d0,1094(sp)
    4d7a:	          move.w 1094(sp),d0
    4d7e:	      ,-- bne.s 4d8e <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4d80:	      |   pea 184c4 <PutChar+0x94e>
    4d86:	      |   jsr 170d4 <KPrintF>
    4d8c:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    4d8e:	      '-> moveq #-1,d0
    4d90:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4d94:	          clr.l 1104(sp)
    4d98:	   ,----- bra.s 4db6 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4d9a:	,--|----> move.l 1104(sp),d0
    4d9e:	|  |      movea.l 1116(sp),a0
    4da2:	|  |      adda.l d0,a0
    4da4:	|  |      move.b (a0),d0
    4da6:	|  |      cmpi.b #47,d0
    4daa:	|  |  ,-- bne.s 4db2 <setGameFilePath+0x72>
    4dac:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    4db2:	|  |  '-> addq.l #1,1104(sp)
    4db6:	|  '----> move.l 1104(sp),d0
    4dba:	|         movea.l 1116(sp),a0
    4dbe:	|         adda.l d0,a0
    4dc0:	|         move.b (a0),d0
    4dc2:	'-------- bne.s 4d9a <setGameFilePath+0x5a>
	}

	if (got != -1) {
    4dc4:	          moveq #-1,d0
    4dc6:	          cmp.l 1108(sp),d0
    4dca:	   ,----- beq.s 4e44 <setGameFilePath+0x104>
		f[got] = 0;	
    4dcc:	   |      move.l 1108(sp),d0
    4dd0:	   |      movea.l 1116(sp),a0
    4dd4:	   |      adda.l d0,a0
    4dd6:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4dd8:	   |      move.l 1116(sp),1090(sp)
    4dde:	   |      moveq #-2,d0
    4de0:	   |      move.l d0,1086(sp)
    4de4:	   |      move.l 1c7e0 <DOSBase>,d0
    4dea:	   |      movea.l d0,a6
    4dec:	   |      move.l 1090(sp),d1
    4df0:	   |      move.l 1086(sp),d2
    4df4:	   |      jsr -84(a6)
    4df8:	   |      move.l d0,1082(sp)
    4dfc:	   |      move.l 1082(sp),d0
    4e00:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4e04:	   |      move.l 1078(sp),1074(sp)
    4e0a:	   |      move.l 1c7e0 <DOSBase>,d0
    4e10:	   |      movea.l d0,a6
    4e12:	   |      move.l 1074(sp),d1
    4e16:	   |      jsr -126(a6)
    4e1a:	   |      move.l d0,1070(sp)
    4e1e:	   |      move.l 1070(sp),d0
    4e22:	   |  ,-- bne.s 4e36 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4e24:	   |  |   move.l 1116(sp),-(sp)
    4e28:	   |  |   pea 184ea <PutChar+0x974>
    4e2e:	   |  |   jsr 170d4 <KPrintF>
    4e34:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4e36:	   |  '-> move.l 1108(sp),d0
    4e3a:	   |      movea.l 1116(sp),a0
    4e3e:	   |      adda.l d0,a0
    4e40:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4e44:	   '----> move.l #400,1066(sp)
    4e4c:	          clr.l 1062(sp)
    4e50:	          move.l 1c7d8 <SysBase>,d0
    4e56:	          movea.l d0,a6
    4e58:	          move.l 1066(sp),d0
    4e5c:	          move.l 1062(sp),d1
    4e60:	          jsr -684(a6)
    4e64:	          move.l d0,1058(sp)
    4e68:	          move.l 1058(sp),d0
    4e6c:	          move.l d0,1c740 <gamePath>
	if (gamePath==0) {
    4e72:	          move.l 1c740 <gamePath>,d0
    4e78:	      ,-- bne.s 4e8c <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    4e7a:	      |   pea 1851d <PutChar+0x9a7>
    4e80:	      |   jsr 170d4 <KPrintF>
    4e86:	      |   addq.l #4,sp
    4e88:	   ,--|-- bra.w 4f74 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    4e8c:	   |  '-> move.l 1c740 <gamePath>,1054(sp)
    4e94:	   |      moveq #-2,d0
    4e96:	   |      move.l d0,1050(sp)
    4e9a:	   |      move.l 1c7e0 <DOSBase>,d0
    4ea0:	   |      movea.l d0,a6
    4ea2:	   |      move.l 1054(sp),d1
    4ea6:	   |      move.l 1050(sp),d2
    4eaa:	   |      jsr -84(a6)
    4eae:	   |      move.l d0,1046(sp)
    4eb2:	   |      move.l 1046(sp),d0
    4eb6:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    4eba:	   |      move.l 1042(sp),1038(sp)
    4ec0:	   |      move.l 1c7e0 <DOSBase>,d0
    4ec6:	   |      movea.l d0,a6
    4ec8:	   |      move.l 1038(sp),d1
    4ecc:	   |      jsr -126(a6)
    4ed0:	   |      move.l d0,1034(sp)
    4ed4:	   |      move.l 1034(sp),d0
    4ed8:	   |  ,-- bne.s 4ee8 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4eda:	   |  |   pea 18558 <PutChar+0x9e2>
    4ee0:	   |  |   jsr 170d4 <KPrintF>
    4ee6:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4ee8:	   |  '-> move.l #1112,d0
    4eee:	   |      add.l sp,d0
    4ef0:	   |      addi.l #-1102,d0
    4ef6:	   |      move.l d0,1030(sp)
    4efa:	   |      moveq #-2,d0
    4efc:	   |      move.l d0,1026(sp)
    4f00:	   |      move.l 1c7e0 <DOSBase>,d0
    4f06:	   |      movea.l d0,a6
    4f08:	   |      move.l 1030(sp),d1
    4f0c:	   |      move.l 1026(sp),d2
    4f10:	   |      jsr -84(a6)
    4f14:	   |      move.l d0,1022(sp)
    4f18:	   |      move.l 1022(sp),d0
    4f1c:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    4f20:	   |      move.l 1042(sp),1018(sp)
    4f26:	   |      move.l 1c7e0 <DOSBase>,d0
    4f2c:	   |      movea.l d0,a6
    4f2e:	   |      move.l 1018(sp),d1
    4f32:	   |      jsr -126(a6)
    4f36:	   |      move.l d0,1014(sp)
    4f3a:	   |      move.l 1014(sp),d0
    4f3e:	   |  ,-- bne.s 4f54 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    4f40:	   |  |   moveq #10,d0
    4f42:	   |  |   add.l sp,d0
    4f44:	   |  |   move.l d0,-(sp)
    4f46:	   |  |   pea 18584 <PutChar+0xa0e>
    4f4c:	   |  |   jsr 170d4 <KPrintF>
    4f52:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4f54:	   |  '-> move.l 1c740 <gamePath>,d0
    4f5a:	   +----- beq.s 4f74 <setGameFilePath+0x234>
    4f5c:	   |      move.l 1c740 <gamePath>,1010(sp)
    4f64:	   |      move.l 1c7d8 <SysBase>,d0
    4f6a:	   |      movea.l d0,a6
    4f6c:	   |      movea.l 1010(sp),a1
    4f70:	   |      jsr -690(a6)
}
    4f74:	   '----> move.l (sp)+,d2
    4f76:	          movea.l (sp)+,a6
    4f78:	          lea 1104(sp),sp
    4f7c:	          rts

00004f7e <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    4f7e:	,-------> lea -16(sp),sp
    4f82:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    4f84:	|         move.l 24(sp),-(sp)
    4f88:	|         jsr 70ac <pauseFunction>
    4f8e:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    4f90:	|     ,-- bra.s 4fa2 <abortFunction+0x24>
    4f92:	|  ,--|-> moveq #24,d0
    4f94:	|  |  |   add.l 24(sp),d0
    4f98:	|  |  |   move.l d0,-(sp)
    4f9a:	|  |  |   jsr 14f94 <trimStack>
    4fa0:	|  |  |   addq.l #4,sp
    4fa2:	|  |  '-> movea.l 24(sp),a0
    4fa6:	|  |      move.l 24(a0),d0
    4faa:	|  '----- bne.s 4f92 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    4fac:	|         movea.l 24(sp),a0
    4fb0:	|         move.l 4(a0),12(sp)
    4fb6:	|         move.l 1c7d8 <SysBase>,d0
    4fbc:	|         movea.l d0,a6
    4fbe:	|         movea.l 12(sp),a1
    4fc2:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    4fc6:	|         clr.l 16(sp)
    4fca:	|     ,-- bra.s 4fea <abortFunction+0x6c>
    4fcc:	|  ,--|-> movea.l 24(sp),a0
    4fd0:	|  |  |   move.l 20(a0),d1
    4fd4:	|  |  |   move.l 16(sp),d0
    4fd8:	|  |  |   lsl.l #3,d0
    4fda:	|  |  |   add.l d1,d0
    4fdc:	|  |  |   move.l d0,-(sp)
    4fde:	|  |  |   jsr 1485e <unlinkVar>
    4fe4:	|  |  |   addq.l #4,sp
    4fe6:	|  |  |   addq.l #1,16(sp)
    4fea:	|  |  '-> movea.l 24(sp),a0
    4fee:	|  |      move.l 8(a0),d0
    4ff2:	|  |      cmp.l 16(sp),d0
    4ff6:	|  '----- bgt.s 4fcc <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    4ff8:	|         movea.l 24(sp),a0
    4ffc:	|         move.l 20(a0),8(sp)
    5002:	|         move.l 1c7d8 <SysBase>,d0
    5008:	|         movea.l d0,a6
    500a:	|         movea.l 8(sp),a1
    500e:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    5012:	|         moveq #28,d0
    5014:	|         add.l 24(sp),d0
    5018:	|         move.l d0,-(sp)
    501a:	|         jsr 1485e <unlinkVar>
    5020:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    5022:	|         movea.l 24(sp),a0
    5026:	|         move.l 40(a0),d0
    502a:	|     ,-- beq.s 503c <abortFunction+0xbe>
    502c:	|     |   movea.l 24(sp),a0
    5030:	|     |   move.l 40(a0),d0
    5034:	|     |   move.l d0,-(sp)
    5036:	'-----|-- jsr 4f7e <abortFunction>(pc)
    503a:	      |   addq.l #4,sp
	FreeVec(fun);
    503c:	      '-> move.l 24(sp),4(sp)
    5042:	          move.l 1c7d8 <SysBase>,d0
    5048:	          movea.l d0,a6
    504a:	          movea.l 4(sp),a1
    504e:	          jsr -690(a6)
	fun = NULL;
    5052:	          clr.l 24(sp)
}
    5056:	          nop
    5058:	          movea.l (sp)+,a6
    505a:	          lea 16(sp),sp
    505e:	          rts

00005060 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    5060:	          subq.l #8,sp
	int n = 0;
    5062:	          clr.l 4(sp)
	*killedMyself = FALSE;
    5066:	          movea.l 20(sp),a0
    506a:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    506c:	          move.l 1c770 <allRunningFunctions>,(sp)
	while (fun) {
    5072:	   ,----- bra.s 50a0 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    5074:	,--|----> movea.l (sp),a0
    5076:	|  |      move.l (a0),d0
    5078:	|  |      cmp.l 12(sp),d0
    507c:	|  |  ,-- bne.s 509a <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    507e:	|  |  |   movea.l (sp),a0
    5080:	|  |  |   move.w #1,54(a0)
			n++;
    5086:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    508a:	|  |  |   move.l (sp),d0
    508c:	|  |  |   cmp.l 16(sp),d0
    5090:	|  |  +-- bne.s 509a <cancelAFunction+0x3a>
    5092:	|  |  |   movea.l 20(sp),a0
    5096:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    509a:	|  |  '-> movea.l (sp),a0
    509c:	|  |      move.l 44(a0),(sp)
	while (fun) {
    50a0:	|  '----> tst.l (sp)
    50a2:	'-------- bne.s 5074 <cancelAFunction+0x14>
	}
	return n;
    50a4:	          move.l 4(sp),d0
}
    50a8:	          addq.l #8,sp
    50aa:	          rts

000050ac <completeTimers>:


void completeTimers () {
    50ac:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    50ae:	          move.l 1c770 <allRunningFunctions>,(sp)

	while (thisFunction) {
    50b4:	   ,----- bra.s 50ca <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    50b6:	,--|----> movea.l (sp),a0
    50b8:	|  |      move.b 56(a0),d0
    50bc:	|  |  ,-- bne.s 50c4 <completeTimers+0x18>
    50be:	|  |  |   movea.l (sp),a0
    50c0:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    50c4:	|  |  '-> movea.l (sp),a0
    50c6:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    50ca:	|  '----> tst.l (sp)
    50cc:	'-------- bne.s 50b6 <completeTimers+0xa>
	}
}
    50ce:	          nop
    50d0:	          nop
    50d2:	          addq.l #4,sp
    50d4:	          rts

000050d6 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    50d6:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    50da:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    50e0:	                                                             movea.l 80(sp),a0
    50e4:	                                                             move.w 54(a0),d0
    50e8:	,----------------------------------------------------------- beq.w 5f76 <continueFunction+0xea0>
		abortFunction (fun);
    50ec:	|                                                            move.l 80(sp),-(sp)
    50f0:	|                                                            jsr 4f7e <abortFunction>
    50f6:	|                                                            addq.l #4,sp
		return TRUE;
    50f8:	|                                                            moveq #1,d0
    50fa:	|  ,-------------------------------------------------------- bra.w 5f80 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    50fe:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    5104:	|  |  |                                                      movea.l 80(sp),a0
    5108:	|  |  |                                                      move.l 4(a0),d1
    510c:	|  |  |                                                      movea.l 80(sp),a0
    5110:	|  |  |                                                      move.l 36(a0),d0
    5114:	|  |  |                                                      lsl.l #3,d0
    5116:	|  |  |                                                      movea.l d1,a0
    5118:	|  |  |                                                      adda.l d0,a0
    511a:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    5120:	|  |  |                                                      movea.l 80(sp),a0
    5124:	|  |  |                                                      move.l 4(a0),d1
    5128:	|  |  |                                                      movea.l 80(sp),a0
    512c:	|  |  |                                                      move.l 36(a0),d0
    5130:	|  |  |                                                      lsl.l #3,d0
    5132:	|  |  |                                                      movea.l d1,a0
    5134:	|  |  |                                                      adda.l d0,a0
    5136:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    513a:	|  |  |                                                      moveq #41,d0
    513c:	|  |  |                                                      cmp.l 64(sp),d0
    5140:	|  |  |  ,-------------------------------------------------- bcs.w 5f2a <continueFunction+0xe54>
    5144:	|  |  |  |                                                   move.l 64(sp),d0
    5148:	|  |  |  |                                                   add.l d0,d0
    514a:	|  |  |  |                                                   movea.l d0,a0
    514c:	|  |  |  |                                                   adda.l #20824,a0
    5152:	|  |  |  |                                                   move.w (a0),d0
    5154:	|  |  |  |                                                   jmp (5158 <continueFunction+0x82>,pc,d0.w)
    5158:	|  |  |  |                                                   bset d6,(a2)
    515a:	|  |  |  |                                                   ori.w #2670,(a4)
    515e:	|  |  |  |                                                   eori.w #2416,d6
    5162:	|  |  |  |                                                   bchg d4,d2
    5164:	|  |  |  |                                                   bclr d4,(a4)+
    5166:	|  |  |  |                                                   andi.l #181013194,d4
    516c:	|  |  |  |                                                   .short 0x0aca
    516e:	|  |  |  |                                                   .short 0x0aca
    5170:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    5178:	|  |  |  |                                                   .short 0x0aca
    517a:	|  |  |  |                                                   andi.w #906,-(a4)
    517e:	|  |  |  |                                                   bchg d1,196(a2)
    5182:	|  |  |  |                                                   bset d1,580(a4)
    5186:	|  |  |  |                                                   bclr d1,2576(a2)
    518a:	|  |  |  |                                                   andi.b #-56,2762(a2)
    5190:	|  |  |  |                                                   .short 0x0aca
    5192:	|  |  |  |                                                   eori.l #63572682,d0
    5198:	|  |  |  |                                                   .short 0x0aca
    519a:	|  |  |  |                                                   bchg d3,-(a2)
    519c:	|  |  |  |                                                   bchg #-36,(a2)
    51a0:	|  |  |  |                                                   .short 0x08cc
    51a2:	|  |  |  |                                                   addi.b #14,1038(a0)
    51a8:	|  |  |  |                                                   .short 0x040e
    51aa:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    51ae:	|  |  |  |                                                   ori.w #8232,(a0)
    51b2:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    51b8:	|  |  |  |                                                   ori.w #12136,(a0)
    51bc:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    51c2:	|  |  |  |                                                   ori.w #12328,(a0)
    51c6:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    51cc:	|  |  |  |                                                   add.l 44(sp),d1
    51d0:	|  |  |  |                                                   moveq #28,d0
    51d2:	|  |  |  |                                                   add.l 80(sp),d0
    51d6:	|  |  |  |                                                   move.l d1,-(sp)
    51d8:	|  |  |  |                                                   move.l d0,-(sp)
    51da:	|  |  |  |                                                   jsr 14aca <copyVariable>
    51e0:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    51e2:	|  |  |  |                                                   move.l 80(sp),-(sp)
    51e6:	|  |  |  |                                                   jsr 5f86 <finishFunction>
    51ec:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    51ee:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    51f4:	|  |  |  |                                                   move.l 80(sp),-(sp)
    51f8:	|  |  |  |                                                   jsr 70ee <restartFunction>
    51fe:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    5200:	|  |  |  |  ,----------------------------------------------- bra.w 5f5e <continueFunction+0xe88>
				finishFunction (fun);
    5204:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    5208:	|  |  |  |  |                                                jsr 5f86 <finishFunction>
    520e:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5210:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    5214:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    5218:	|  |  |  |  +----------------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    521c:	|  |  |  |  |                                                movea.l 80(sp),a0
    5220:	|  |  |  |  |                                                move.l 28(a0),d0
    5224:	|  |  |  |  |                                                moveq #2,d1
    5226:	|  |  |  |  |                                                cmp.l d0,d1
    5228:	|  |  |  |  |                                            ,-- beq.s 5234 <continueFunction+0x15e>
    522a:	|  |  |  |  |                                            |   moveq #4,d1
    522c:	|  |  |  |  |                                            |   cmp.l d0,d1
    522e:	|  |  |  |  |                                         ,--|-- beq.s 5282 <continueFunction+0x1ac>
    5230:	|  |  |  |  |                                ,--------|--|-- bra.w 536a <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    5234:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    5238:	|  |  |  |  |                                |        |      jsr 70ac <pauseFunction>
    523e:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5240:	|  |  |  |  |                                |        |      moveq #24,d0
    5242:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    5246:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    524a:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    524e:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5252:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    5254:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    5258:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    525c:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    525e:	|  |  |  |  |                                |        |      jsr 733a <startNewFunctionNum>
    5264:	|  |  |  |  |                                |        |      lea 20(sp),sp
    5268:	|  |  |  |  |                                |        |      tst.l d0
    526a:	|  |  |  |  |                                |        |  ,-- bne.s 5272 <continueFunction+0x19c>
    526c:	|  |  |  |  |                                |        |  |   clr.w d0
    526e:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 5f80 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    5272:	|  |  |  |  |                                |        |  '-> move.l 1c770 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    527a:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    527e:	|  |  |  |  |                                |  ,-----|----- bra.w 537e <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    5282:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    5286:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    528a:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    528e:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    5292:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    5294:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    5296:	|  |  |  |  |                                |  |            jsr 132f2 <callBuiltIn>
    529c:	|  |  |  |  |                                |  |            lea 12(sp),sp
    52a0:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    52a4:	|  |  |  |  |                                |  |            moveq #5,d0
    52a6:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    52aa:	|  |  |  |  |                                |  |  ,-------- bcs.w 5366 <continueFunction+0x290>
    52ae:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    52b2:	|  |  |  |  |                                |  |  |         add.l d0,d0
    52b4:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    52b6:	|  |  |  |  |                                |  |  |         adda.l #21186,a0
    52bc:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    52be:	|  |  |  |  |                                |  |  |         jmp (52c2 <continueFunction+0x1ec>,pc,d0.w)
    52c2:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    52c8:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    52cc:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    52d2:	|  |  |  |  |                                |  |  |         .short 0x868c
    52d4:	|  |  |  |  |                                |  |  |         jsr 170d4 <KPrintF>
    52da:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    52dc:	|  |  |  |  |                                |  |  |         clr.w d0
    52de:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 5f80 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    52e2:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    52e6:	|  |  |  |  |                                |  |  |         jsr 70ac <pauseFunction>
    52ec:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    52ee:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    52f2:	|  |  |  |  |                                |  |  |  ,----- bra.s 5368 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    52f4:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    52f8:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    52fc:	|  |  |  |  |                                |  |  |  +----- bra.s 5368 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    52fe:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    5302:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    5308:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    530a:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    530e:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5312:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5316:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5318:	|  |  |  |  |                                |  |  |  |      jsr 14f02 <setVariable>
    531e:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    5322:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    5326:	|  |  |  |  |                                |  |  |  |      jsr 70ac <pauseFunction>
    532c:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    532e:	|  |  |  |  |                                |  |  |  |      move.l 1c7a8 <noStack>,d1
    5334:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    5338:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    533a:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    533c:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    5340:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5342:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5344:	|  |  |  |  |                                |  |  |  |      jsr 733a <startNewFunctionNum>
    534a:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    534e:	|  |  |  |  |                                |  |  |  |      tst.l d0
    5350:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 5358 <continueFunction+0x282>
    5352:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    5354:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 5f80 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    5358:	|  |  |  |  |                                |  |  |  |  '-> move.l 1c770 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5360:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    5364:	|  |  |  |  |                                |  |  |  +----- bra.s 5368 <continueFunction+0x292>

						default:
						break;
    5366:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    5368:	|  |  |  |  |                                |  +-----'----X bra.s 537e <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    536a:	|  |  |  |  |                                '--|----------> pea 186d7 <PutChar+0xb61>
    5370:	|  |  |  |  |                                   |            jsr 170d4 <KPrintF>
    5376:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    5378:	|  |  |  |  |                                   |            clr.w d0
    537a:	|  +--|--|--|-----------------------------------|----------- bra.w 5f80 <continueFunction+0xeaa>
			}
			break;
    537e:	|  |  |  |  +-----------------------------------'----------X bra.w 5f5e <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    5382:	|  |  |  |  |                                                moveq #28,d0
    5384:	|  |  |  |  |                                                add.l 80(sp),d0
    5388:	|  |  |  |  |                                                clr.l -(sp)
    538a:	|  |  |  |  |                                                clr.l -(sp)
    538c:	|  |  |  |  |                                                move.l d0,-(sp)
    538e:	|  |  |  |  |                                                jsr 14f02 <setVariable>
    5394:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5398:	|  |  |  |  +----------------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    539c:	|  |  |  |  |                                                move.l 68(sp),d1
    53a0:	|  |  |  |  |                                                moveq #28,d0
    53a2:	|  |  |  |  |                                                add.l 80(sp),d0
    53a6:	|  |  |  |  |                                                move.l d1,-(sp)
    53a8:	|  |  |  |  |                                                pea 5 <_start+0x5>
    53ac:	|  |  |  |  |                                                move.l d0,-(sp)
    53ae:	|  |  |  |  |                                                jsr 14f02 <setVariable>
    53b4:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    53b8:	|  |  |  |  +----------------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    53bc:	|  |  |  |  |                                                move.l 68(sp),d1
    53c0:	|  |  |  |  |                                                moveq #28,d0
    53c2:	|  |  |  |  |                                                add.l 80(sp),d0
    53c6:	|  |  |  |  |                                                move.l d1,-(sp)
    53c8:	|  |  |  |  |                                                pea 1 <_start+0x1>
    53cc:	|  |  |  |  |                                                move.l d0,-(sp)
    53ce:	|  |  |  |  |                                                jsr 14f02 <setVariable>
    53d4:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    53d8:	|  |  |  |  +----------------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    53dc:	|  |  |  |  |                                                moveq #28,d0
    53de:	|  |  |  |  |                                                add.l 80(sp),d0
    53e2:	|  |  |  |  |                                                movea.l 80(sp),a0
    53e6:	|  |  |  |  |                                                movea.l 20(a0),a0
    53ea:	|  |  |  |  |                                                move.l 68(sp),d1
    53ee:	|  |  |  |  |                                                lsl.l #3,d1
    53f0:	|  |  |  |  |                                                add.l a0,d1
    53f2:	|  |  |  |  |                                                move.l d0,-(sp)
    53f4:	|  |  |  |  |                                                move.l d1,-(sp)
    53f6:	|  |  |  |  |                                                jsr 14aca <copyVariable>
    53fc:	|  |  |  |  |                                                addq.l #8,sp
    53fe:	|  |  |  |  |                                                tst.w d0
    5400:	|  |  |  |  |  ,-------------------------------------------- bne.w 5f3c <continueFunction+0xe66>
    5404:	|  |  |  |  |  |                                             clr.w d0
    5406:	|  +--|--|--|--|-------------------------------------------- bra.w 5f80 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    540a:	|  |  |  |  |  |                                             moveq #28,d0
    540c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5410:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5412:	|  |  |  |  |  |                                             jsr 14b50 <getBoolean>
    5418:	|  |  |  |  |  |                                             addq.l #4,sp
    541a:	|  |  |  |  |  |                                             tst.w d0
    541c:	|  |  |  |  |  |                                      ,----- beq.s 5438 <continueFunction+0x362>
    541e:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    5422:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5426:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    5428:	|  |  |  |  |  |                                      |      jsr 14b50 <getBoolean>
    542e:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5430:	|  |  |  |  |  |                                      |      tst.w d0
    5432:	|  |  |  |  |  |                                      +----- beq.s 5438 <continueFunction+0x362>
    5434:	|  |  |  |  |  |                                      |      moveq #1,d0
    5436:	|  |  |  |  |  |                                      |  ,-- bra.s 543a <continueFunction+0x364>
    5438:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    543a:	|  |  |  |  |  |                                         '-> moveq #28,d1
    543c:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5440:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5442:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5446:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5448:	|  |  |  |  |  |                                             jsr 14f02 <setVariable>
    544e:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5452:	|  |  |  |  |  |                                             moveq #24,d0
    5454:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5458:	|  |  |  |  |  |                                             move.l d0,-(sp)
    545a:	|  |  |  |  |  |                                             jsr 14f94 <trimStack>
    5460:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5462:	|  |  |  |  +--|-------------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5466:	|  |  |  |  |  |                                             moveq #28,d0
    5468:	|  |  |  |  |  |                                             add.l 80(sp),d0
    546c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    546e:	|  |  |  |  |  |                                             jsr 14b50 <getBoolean>
    5474:	|  |  |  |  |  |                                             addq.l #4,sp
    5476:	|  |  |  |  |  |                                             tst.w d0
    5478:	|  |  |  |  |  |                                         ,-- bne.s 5490 <continueFunction+0x3ba>
    547a:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    547e:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5482:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5484:	|  |  |  |  |  |                                         |   jsr 14b50 <getBoolean>
    548a:	|  |  |  |  |  |                                         |   addq.l #4,sp
    548c:	|  |  |  |  |  |                                         |   tst.w d0
    548e:	|  |  |  |  |  |                                      ,--|-- beq.s 5494 <continueFunction+0x3be>
    5490:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5492:	|  |  |  |  |  |                                      |  ,-- bra.s 5496 <continueFunction+0x3c0>
    5494:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5496:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5498:	|  |  |  |  |  |                                             add.l 80(sp),d1
    549c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    549e:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    54a2:	|  |  |  |  |  |                                             move.l d1,-(sp)
    54a4:	|  |  |  |  |  |                                             jsr 14f02 <setVariable>
    54aa:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    54ae:	|  |  |  |  |  |                                             moveq #24,d0
    54b0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54b4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54b6:	|  |  |  |  |  |                                             jsr 14f94 <trimStack>
    54bc:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    54be:	|  |  |  |  +--|-------------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    54c2:	|  |  |  |  |  |                                             move.l 68(sp),d1
    54c6:	|  |  |  |  |  |                                             moveq #28,d0
    54c8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54cc:	|  |  |  |  |  |                                             move.l d1,-(sp)
    54ce:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    54d2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54d4:	|  |  |  |  |  |                                             jsr 14f02 <setVariable>
    54da:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    54de:	|  |  |  |  +--|-------------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    54e2:	|  |  |  |  |  |                                             move.l 68(sp),d1
    54e6:	|  |  |  |  |  |                                             moveq #28,d0
    54e8:	|  |  |  |  |  |                                             add.l 80(sp),d0
    54ec:	|  |  |  |  |  |                                             move.l d1,-(sp)
    54ee:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    54f2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    54f4:	|  |  |  |  |  |                                             jsr 14f02 <setVariable>
    54fa:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    54fe:	|  |  |  |  +--|-------------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5502:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5506:	|  |  |  |  |  |                                             moveq #28,d0
    5508:	|  |  |  |  |  |                                             add.l 80(sp),d0
    550c:	|  |  |  |  |  |                                             move.l d1,-(sp)
    550e:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5512:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5514:	|  |  |  |  |  |                                             jsr 14f02 <setVariable>
    551a:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    551e:	|  |  |  |  +--|-------------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5522:	|  |  |  |  |  |                                             move.l 1c738 <dialogValue>,d0
    5528:	|  |  |  |  |  |                                             moveq #1,d1
    552a:	|  |  |  |  |  |                                             cmp.l d0,d1
    552c:	|  |  |  |  |  |  ,----------------------------------------- beq.w 5f40 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    5530:	|  |  |  |  |  |  |                                          pea 186ec <PutChar+0xb76>
    5536:	|  |  |  |  |  |  |                                          jsr 170d4 <KPrintF>
    553c:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    553e:	|  |  |  |  |  |  |                                          clr.w d0
    5540:	|  +--|--|--|--|--|----------------------------------------- bra.w 5f80 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5544:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    5548:	|  |  |  |  |  |  |                                          moveq #28,d0
    554a:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    554e:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5550:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5552:	|  |  |  |  |  |  |                                          jsr 14694 <loadStringToVar>
    5558:	|  |  |  |  |  |  |                                          addq.l #8,sp
    555a:	|  |  |  |  |  |  |                                          tst.w d0
    555c:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 5f44 <continueFunction+0xe6e>
					return FALSE;
    5560:	|  |  |  |  |  |  |  |                                       clr.w d0
    5562:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5f80 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5566:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    556a:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    556e:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5570:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5572:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5574:	|  |  |  |  |  |  |  |                                ,----- beq.s 55d2 <continueFunction+0x4fc>
    5576:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    5578:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    557a:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5766 <continueFunction+0x690>
    557e:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5580:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 558c <continueFunction+0x4b6>
    5582:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5584:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    5586:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 55d2 <continueFunction+0x4fc>
    5588:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5766 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    558c:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    558e:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    5592:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 55be <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    5594:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    5596:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    559a:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    559c:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    559e:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    55a0:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14f02 <setVariable>
    55a6:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    55aa:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    55ac:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    55b0:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    55b2:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14f94 <trimStack>
    55b8:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    55ba:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 577c <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    55be:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 1872d <PutChar+0xbb7>
    55c4:	|  |  |  |  |  |  |  |              |  |              |      jsr 170d4 <KPrintF>
    55ca:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    55cc:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    55ce:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 5f80 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    55d2:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    55d6:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    55da:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    55de:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    55e0:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 55f6 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    55e2:	|  |  |  |  |  |  |  |              |  |                 |   pea 18769 <PutChar+0xbf3>
    55e8:	|  |  |  |  |  |  |  |              |  |                 |   jsr 170d4 <KPrintF>
    55ee:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    55f0:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    55f2:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5f80 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    55f6:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    55f8:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    55fc:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    55fe:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5602:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5606:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5608:	|  |  |  |  |  |  |  |              |  |                     jsr 14610 <getValueType>
    560e:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5612:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5614:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 561c <continueFunction+0x546>
    5616:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5618:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 5f80 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    561c:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    5620:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5624:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5626:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5628:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    562a:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 564c <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    562c:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5630:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5632:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    5636:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    563a:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    563e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5640:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5642:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1429a <fastArrayGetByIndex>
    5648:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    564a:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 566c <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    564c:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5650:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5652:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    5656:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    565a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    565e:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5660:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5662:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5664:	|  |  |  |  |  |  |  |              |  |              |      jsr 14f24 <stackGetByIndex>
    566a:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    566c:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    5670:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5672:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5676:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5678:	|  |  |  |  |  |  |  |              |  |                     jsr 14f94 <trimStack>
    567e:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5680:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    5684:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 56a0 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5686:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5688:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    568c:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    568e:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5690:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5692:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14f02 <setVariable>
    5698:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    569c:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 577a <continueFunction+0x6a4>
						switch (com) {
    56a0:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    56a2:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    56a6:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 56b4 <continueFunction+0x5de>
    56a8:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    56aa:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    56ae:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 56fe <continueFunction+0x628>
    56b0:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5746 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    56b4:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    56b8:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    56bc:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    56c0:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    56c2:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14610 <getValueType>
    56c8:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    56cc:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    56ce:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 56d6 <continueFunction+0x600>
    56d0:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    56d2:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5760 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    56d6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    56d8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    56da:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    56de:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    56e0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    56e4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    56e6:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14f02 <setVariable>
    56ec:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    56f0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    56f2:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    56f4:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    56f8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    56fc:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5764 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    56fe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    5702:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5706:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    570a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    570c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14610 <getValueType>
    5712:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5716:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5718:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 571e <continueFunction+0x648>
    571a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    571c:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5760 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    571e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5720:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5722:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    5726:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5728:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    572c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    572e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14f02 <setVariable>
    5734:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5738:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    573a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    573c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5740:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5744:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5764 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5746:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5748:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    574c:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    574e:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5752:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14aca <copyVariable>
    5758:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    575a:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    575c:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 577a <continueFunction+0x6a4>
    575e:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5760:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 5f80 <continueFunction+0xeaa>
				break;
    5764:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 577a <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5766:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18787 <PutChar+0xc11>
    576c:	|  |  |  |  |  |  |  |                 |  |                  jsr 170d4 <KPrintF>
    5772:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5774:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5776:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 5f80 <continueFunction+0xeaa>
				break;
    577a:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    577c:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 5f5e <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5780:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5784:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5788:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    578a:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    578c:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    578e:	|  |  |  |  |  |  |  |                                   ,-- beq.s 579c <continueFunction+0x6c6>
    5790:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5792:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5794:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5848 <continueFunction+0x772>
    5798:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 58a6 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    579c:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    57a0:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    57a4:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    57a8:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    57aa:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 57c0 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    57ac:	|  |  |  |  |  |  |  |                             |  |  |   pea 18769 <PutChar+0xbf3>
    57b2:	|  |  |  |  |  |  |  |                             |  |  |   jsr 170d4 <KPrintF>
    57b8:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    57ba:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    57bc:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5f80 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    57c0:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    57c2:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    57c6:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    57c8:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    57cc:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    57d0:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    57d2:	|  |  |  |  |  |  |  |                             |  |      jsr 14610 <getValueType>
    57d8:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    57dc:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    57de:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 57e6 <continueFunction+0x710>
    57e0:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    57e2:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5f80 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    57e6:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    57ea:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    57ee:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    57f2:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    57f4:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    57f8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    57fa:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    57fe:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5802:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5806:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5808:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    580a:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    580c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    580e:	|  |  |  |  |  |  |  |                             |  |      jsr 72f6 <stackSetByIndex>
    5814:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5818:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    581a:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5822 <continueFunction+0x74c>
						return FALSE;
    581c:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    581e:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 5f80 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5822:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5824:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5828:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    582a:	|  |  |  |  |  |  |  |                             |  |      jsr 14f94 <trimStack>
    5830:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5832:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5834:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5838:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    583a:	|  |  |  |  |  |  |  |                             |  |      jsr 14f94 <trimStack>
    5840:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5842:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5844:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 5f5e <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5848:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    584a:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    584e:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5850:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5854:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5858:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    585a:	|  |  |  |  |  |  |  |                             |         jsr 14610 <getValueType>
    5860:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5864:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5866:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 586e <continueFunction+0x798>
    5868:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    586a:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 5f80 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    586e:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5872:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5874:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5878:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    587c:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5880:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5882:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5884:	|  |  |  |  |  |  |  |                             |         jsr 1429a <fastArrayGetByIndex>
    588a:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    588c:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5890:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 58a0 <continueFunction+0x7ca>
    5892:	|  |  |  |  |  |  |  |                             |     |   pea 187ab <PutChar+0xc35>
    5898:	|  |  |  |  |  |  |  |                             |     |   jsr 170d4 <KPrintF>
    589e:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    58a0:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    58a2:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 5f80 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    58a6:	|  |  |  |  |  |  |  |                             '-------> pea 18787 <PutChar+0xc11>
    58ac:	|  |  |  |  |  |  |  |                                       jsr 170d4 <KPrintF>
    58b2:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    58b4:	|  |  |  |  |  |  |  |                                       clr.w d0
    58b6:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 5f80 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    58ba:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    58be:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    58c2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    58c6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    58c8:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    58ca:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    58cc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    58d0:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    58d4:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    58d6:	|  |  |  |  |  |  |  |                                       jsr 14610 <getValueType>
    58dc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    58e0:	|  |  |  |  |  |  |  |                                       tst.w d0
    58e2:	|  |  |  |  |  |  |  |                                   ,-- bne.s 58ea <continueFunction+0x814>
    58e4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    58e6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5f80 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    58ea:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    58ee:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    58f0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    58f4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    58f6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    58fa:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    58fc:	|  |  |  |  |  |  |  |                                       jsr 14f02 <setVariable>
    5902:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5906:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    590a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    590c:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    590e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5912:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5916:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    591a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    591c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    591e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5920:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5924:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5926:	|  |  |  |  |  |  |  |                                       jsr 14f02 <setVariable>
    592c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5930:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5934:	|  |  |  |  |  |  |  |                                       move.l 1c786 <globalVars>,d1
    593a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    593e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5940:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5942:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5944:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5948:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    594c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    594e:	|  |  |  |  |  |  |  |                                       jsr 14610 <getValueType>
    5954:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5958:	|  |  |  |  |  |  |  |                                       tst.w d0
    595a:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5962 <continueFunction+0x88c>
    595c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    595e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5f80 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5962:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5966:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5968:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    596c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    596e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5972:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5974:	|  |  |  |  |  |  |  |                                       jsr 14f02 <setVariable>
    597a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    597e:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5982:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5984:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5986:	|  |  |  |  |  |  |  |                                       movea.l 1c786 <globalVars>,a0
    598c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5990:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5992:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5994:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5996:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    599a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    599c:	|  |  |  |  |  |  |  |                                       jsr 14f02 <setVariable>
    59a2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    59a6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    59aa:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    59ae:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    59b2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    59b6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    59b8:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    59ba:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59bc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59c0:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    59c4:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    59c6:	|  |  |  |  |  |  |  |                                       jsr 14610 <getValueType>
    59cc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    59d0:	|  |  |  |  |  |  |  |                                       tst.w d0
    59d2:	|  |  |  |  |  |  |  |                                   ,-- bne.s 59da <continueFunction+0x904>
    59d4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    59d6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5f80 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    59da:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    59de:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    59e0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    59e4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    59e6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    59ea:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    59ec:	|  |  |  |  |  |  |  |                                       jsr 14f02 <setVariable>
    59f2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    59f6:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    59fa:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    59fc:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    59fe:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5a02:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5a06:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a0a:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a0c:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5a0e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a10:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a14:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a16:	|  |  |  |  |  |  |  |                                       jsr 14f02 <setVariable>
    5a1c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5a20:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5a24:	|  |  |  |  |  |  |  |                                       move.l 1c786 <globalVars>,d1
    5a2a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a2e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a30:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5a32:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a34:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a38:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5a3c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5a3e:	|  |  |  |  |  |  |  |                                       jsr 14610 <getValueType>
    5a44:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5a48:	|  |  |  |  |  |  |  |                                       tst.w d0
    5a4a:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5a52 <continueFunction+0x97c>
    5a4c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5a4e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 5f80 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5a52:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5a56:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5a58:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5a5c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a5e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a62:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a64:	|  |  |  |  |  |  |  |                                       jsr 14f02 <setVariable>
    5a6a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5a6e:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5a72:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5a74:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5a76:	|  |  |  |  |  |  |  |                                       movea.l 1c786 <globalVars>,a0
    5a7c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5a80:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5a82:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5a84:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5a86:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5a8a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5a8c:	|  |  |  |  |  |  |  |                                       jsr 14f02 <setVariable>
    5a92:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5a96:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5a9a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5a9e:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5aa2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5aa6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5aa8:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5aaa:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5aac:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ab0:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ab2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ab4:	|  |  |  |  |  |  |  |                                       jsr 14aca <copyVariable>
    5aba:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5abc:	|  |  |  |  |  |  |  |                                       tst.w d0
    5abe:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 5f48 <continueFunction+0xe72>
    5ac2:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5ac4:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 5f80 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5ac8:	|  |  |  |  |  |  |  |  |                                    move.l 1c786 <globalVars>,d1
    5ace:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5ad2:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5ad4:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5ad6:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5ad8:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5adc:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5ade:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5ae0:	|  |  |  |  |  |  |  |  |                                    jsr 14aca <copyVariable>
    5ae6:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5ae8:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5aea:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 5f4c <continueFunction+0xe76>
    5aee:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5af0:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 5f80 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5af4:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5af6:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5afa:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1c786 <globalVars>,a0
    5b00:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5b04:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5b06:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5b08:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5b0a:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5b0c:	|  |  |  |  |  |  |  |  |  |                                 jsr 14aca <copyVariable>
    5b12:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5b14:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5b16:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 5f50 <continueFunction+0xe7a>
    5b1a:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5b1c:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 5f80 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5b20:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5b22:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5b26:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5b28:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5b2c:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5b2e:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5b30:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13e4c <addVarToStack>
    5b36:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5b38:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5b3a:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 5f54 <continueFunction+0xe7e>
    5b3e:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5b40:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 5f80 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5b44:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5b46:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5b4a:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5b4c:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5b50:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5b52:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5b54:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13ed2 <addVarToStackQuick>
    5b5a:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5b5c:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5b5e:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 5f58 <continueFunction+0xe82>
    5b62:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5b64:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 5f80 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5b68:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5b6a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5b6e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5b70:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b50 <getBoolean>
    5b76:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5b78:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5b7a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5b7c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5b7e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5b80:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5b82:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5b84:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5b88:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5b8a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5b8e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5b90:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14f02 <setVariable>
    5b96:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5b9a:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5b9e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5ba0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5ba4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5ba6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b50 <getBoolean>
    5bac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5bae:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5bb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 5f5c <continueFunction+0xe86>
				advanceNow = FALSE;
    5bb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5bb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5bbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5bc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 5f5c <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5bc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5bca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5bce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5bd4:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 5f5e <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5bd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5bda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5bde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5be0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5be4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5be8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5bea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14610 <getValueType>
    5bf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5bf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5bf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 5bfe <continueFunction+0xb28>
    5bf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5bfa:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 5f80 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5bfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    5c02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5c04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5c06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5c08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5c0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    5c0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5c12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5c14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14f02 <setVariable>
    5c1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    5c1e:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 5f5e <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5c22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5c26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5c2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 5f14 <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    5c2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5c30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5c34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 5cb0 <continueFunction+0xbda>
    5c36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5c38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5c3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 5cfa <continueFunction+0xc24>
    5c40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5c42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5c46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 5c54 <continueFunction+0xb7e>
    5c48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5c4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    5c4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 5c82 <continueFunction+0xbac>
    5c50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5cfa <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5c54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    5c56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5c5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    5c5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5c62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5c64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5c66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13f46 <addVariablesInSecond>
    5c6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    5c6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5c70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5c74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5c76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14f94 <trimStack>
    5c7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    5c7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 5f28 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5c82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    5c84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5c88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5c8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5c90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5c92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5c94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14004 <compareVariablesInSecond>
    5c9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5c9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    5c9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5ca2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5ca4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14f94 <trimStack>
    5caa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5cac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 5f28 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5cb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    5cb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5cb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5cba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5cbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5cc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5cc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14004 <compareVariablesInSecond>
    5cc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5cca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5ccc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5cd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5cd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14f94 <trimStack>
    5cd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5cda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5cde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5ce2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5ce4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5ce6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5ce8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5cee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5cf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5cf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 5f28 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5cfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    5cfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5d02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5d08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5d0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5d0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14610 <getValueType>
    5d14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5d18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5d22 <continueFunction+0xc4c>
    5d1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5d1e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5f80 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5d22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    5d24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5d28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5d2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5d32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5d34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14610 <getValueType>
    5d3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5d3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5d40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5d48 <continueFunction+0xc72>
    5d42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5d44:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 5f80 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5d48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    5d4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5d50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14f94 <trimStack>
    5d56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    5d58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    5d5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    5d60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5d62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 5f26 <continueFunction+0xe50>
    5d66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5d68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5d6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #23926,a0
    5d70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5d72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5d76 <continueFunction+0xca0>,pc,d0.w)
    5d76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    5d7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    5d7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5d84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    5d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    5d96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    5d9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    5da6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5daa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5dae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5db0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5db2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17a60 <__mulsi3>
    5db8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5dba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5dbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5dbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5dca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f02 <setVariable>
    5dd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5dd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f28 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5ddc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5de0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5de2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5de4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5de8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5dea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5dee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5df0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f02 <setVariable>
    5df6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5dfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f28 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    5dfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5e02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5e06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17b0c <__modsi3>
    5e10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5e12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5e14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f02 <setVariable>
    5e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f28 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    5e30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17ade <__divsi3>
    5e42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5e44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f02 <setVariable>
    5e5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f28 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5e62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5e6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    5e6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5e72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5e76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5e82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f02 <setVariable>
    5e88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5f28 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    5e90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    5e9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5ea0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5ea4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5eb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f02 <setVariable>
    5eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f28 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    5ebc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5ec0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5ec4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    5ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5ed4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f02 <setVariable>
    5ee2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f28 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5ef0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5f00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14f02 <setVariable>
    5f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5f28 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 187cc <PutChar+0xc56>
    5f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 170d4 <KPrintF>
    5f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    5f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    5f24:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 5f80 <continueFunction+0xeaa>
						break;
    5f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    5f28:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 5f5e <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    5f2a:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 187e4 <PutChar+0xc6e>
    5f30:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 170d4 <KPrintF>
    5f36:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5f38:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5f3a:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 5f80 <continueFunction+0xeaa>
			break;
    5f3c:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    5f3e:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 5f5e <continueFunction+0xe88>
			break;
    5f40:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    5f42:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 5f5e <continueFunction+0xe88>
			break;
    5f44:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    5f46:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 5f5e <continueFunction+0xe88>
			break;
    5f48:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    5f4a:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 5f5e <continueFunction+0xe88>
			break;
    5f4c:	|  |  |     |              '--|--|--|--|-------------------> nop
    5f4e:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 5f5e <continueFunction+0xe88>
			break;
    5f50:	|  |  |     |                 '--|--|--|-------------------> nop
    5f52:	|  |  |     +--------------------|--|--|-------------------- bra.s 5f5e <continueFunction+0xe88>
			break;
    5f54:	|  |  |     |                    '--|--|-------------------> nop
    5f56:	|  |  |     +-----------------------|--|-------------------- bra.s 5f5e <continueFunction+0xe88>
			break;
    5f58:	|  |  |     |                       '--|-------------------> nop
    5f5a:	|  |  |     +--------------------------|-------------------- bra.s 5f5e <continueFunction+0xe88>
			break;
    5f5c:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    5f5e:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    5f62:	+--|--|----------------------------------------------------- beq.s 5f76 <continueFunction+0xea0>
    5f64:	|  |  |                                                      movea.l 80(sp),a0
    5f68:	|  |  |                                                      move.l 36(a0),d0
    5f6c:	|  |  |                                                      addq.l #1,d0
    5f6e:	|  |  |                                                      movea.l 80(sp),a0
    5f72:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    5f76:	'--|--|----------------------------------------------------> tst.w 74(sp)
    5f7a:	   |  '----------------------------------------------------- bne.w 50fe <continueFunction+0x28>

	}
	return TRUE;
    5f7e:	   |                                                         moveq #1,d0
}
    5f80:	   '-------------------------------------------------------> lea 76(sp),sp
    5f84:	                                                             rts

00005f86 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    5f86:	          lea -16(sp),sp
    5f8a:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    5f8c:	          move.l 24(sp),-(sp)
    5f90:	          jsr 70ac <pauseFunction>
    5f96:	          addq.l #4,sp
	if (fun -> stack) 
    5f98:	          movea.l 24(sp),a0
    5f9c:	          move.l 24(a0),d0
    5fa0:	      ,-- beq.s 5fb4 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    5fa2:	      |   pea 18810 <PutChar+0xc9a>
    5fa8:	      |   jsr 170d4 <KPrintF>
    5fae:	      |   addq.l #4,sp
		return;
    5fb0:	,-----|-- bra.w 604e <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    5fb4:	|     '-> movea.l 24(sp),a0
    5fb8:	|         move.l 4(a0),12(sp)
    5fbe:	|         move.l 1c7d8 <SysBase>,d0
    5fc4:	|         movea.l d0,a6
    5fc6:	|         movea.l 12(sp),a1
    5fca:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5fce:	|         clr.l 16(sp)
    5fd2:	|     ,-- bra.s 5ff2 <finishFunction+0x6c>
    5fd4:	|  ,--|-> movea.l 24(sp),a0
    5fd8:	|  |  |   move.l 20(a0),d1
    5fdc:	|  |  |   move.l 16(sp),d0
    5fe0:	|  |  |   lsl.l #3,d0
    5fe2:	|  |  |   add.l d1,d0
    5fe4:	|  |  |   move.l d0,-(sp)
    5fe6:	|  |  |   jsr 1485e <unlinkVar>
    5fec:	|  |  |   addq.l #4,sp
    5fee:	|  |  |   addq.l #1,16(sp)
    5ff2:	|  |  '-> movea.l 24(sp),a0
    5ff6:	|  |      move.l 8(a0),d0
    5ffa:	|  |      cmp.l 16(sp),d0
    5ffe:	|  '----- bgt.s 5fd4 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    6000:	|         movea.l 24(sp),a0
    6004:	|         move.l 8(a0),d0
    6008:	|     ,-- ble.s 6024 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    600a:	|     |   movea.l 24(sp),a0
    600e:	|     |   move.l 20(a0),8(sp)
    6014:	|     |   move.l 1c7d8 <SysBase>,d0
    601a:	|     |   movea.l d0,a6
    601c:	|     |   movea.l 8(sp),a1
    6020:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    6024:	|     '-> moveq #28,d0
    6026:	|         add.l 24(sp),d0
    602a:	|         move.l d0,-(sp)
    602c:	|         jsr 1485e <unlinkVar>
    6032:	|         addq.l #4,sp
	FreeVec(fun);
    6034:	|         move.l 24(sp),4(sp)
    603a:	|         move.l 1c7d8 <SysBase>,d0
    6040:	|         movea.l d0,a6
    6042:	|         movea.l 4(sp),a1
    6046:	|         jsr -690(a6)
	fun = NULL;
    604a:	|         clr.l 24(sp)
}
    604e:	'-------> movea.l (sp)+,a6
    6050:	          lea 16(sp),sp
    6054:	          rts

00006056 <freezeSubs>:

void freezeSubs () {
    6056:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6058:	          move.l 1c770 <allRunningFunctions>,(sp)

	while (thisFunction) {
    605e:	   ,----- bra.s 607c <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    6060:	,--|----> movea.l (sp),a0
    6062:	|  |      move.w 52(a0),d0
    6066:	|  |  ,-- bne.s 6076 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    6068:	|  |  |   movea.l (sp),a0
    606a:	|  |  |   move.b 56(a0),d0
    606e:	|  |  |   addq.b #1,d0
    6070:	|  |  |   movea.l (sp),a0
    6072:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    6076:	|  |  '-> movea.l (sp),a0
    6078:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    607c:	|  '----> tst.l (sp)
    607e:	'-------- bne.s 6060 <freezeSubs+0xa>
	}
}
    6080:	          nop
    6082:	          nop
    6084:	          addq.l #4,sp
    6086:	          rts

00006088 <handleInput>:

BOOL handleInput () {
    6088:	             lea -16(sp),sp
    608c:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    608e:	             move.l 1c8e8 <overRegion>,d0
    6094:	         ,-- bne.s 609c <handleInput+0x14>
    6096:	         |   jsr 1584c <getOverRegion>

	if (input.justMoved) {
    609c:	         '-> move.w 1c78e <input+0x4>,d0
    60a2:	         ,-- beq.s 60e0 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    60a4:	         |   movea.l 1c148 <currentEvents>,a0
    60aa:	         |   move.l 16(a0),d0
    60ae:	         +-- beq.s 60e0 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    60b0:	         |   move.l 1c7a8 <noStack>,d1
    60b6:	         |   movea.l 1c148 <currentEvents>,a0
    60bc:	         |   move.l 16(a0),d0
    60c0:	         |   pea 1 <_start+0x1>
    60c4:	         |   move.l d1,-(sp)
    60c6:	         |   clr.l -(sp)
    60c8:	         |   clr.l -(sp)
    60ca:	         |   move.l d0,-(sp)
    60cc:	         |   jsr 733a <startNewFunctionNum>
    60d2:	         |   lea 20(sp),sp
    60d6:	         |   tst.l d0
    60d8:	         +-- bne.s 60e0 <handleInput+0x58>
    60da:	         |   clr.w d0
    60dc:	,--------|-- bra.w 62e6 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    60e0:	|        '-> clr.w 1c78e <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    60e6:	|            move.l 1c7a0 <lastRegion>,d1
    60ec:	|            move.l 1c8e8 <overRegion>,d0
    60f2:	|            cmp.l d1,d0
    60f4:	|  ,-------- beq.w 61cc <handleInput+0x144>
    60f8:	|  |         movea.l 1c148 <currentEvents>,a0
    60fe:	|  |         move.l 20(a0),d0
    6102:	|  +-------- beq.w 61cc <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    6106:	|  |         moveq #12,d0
    6108:	|  |         move.l d0,16(sp)
    610c:	|  |         clr.l 12(sp)
    6110:	|  |         move.l 1c7d8 <SysBase>,d0
    6116:	|  |         movea.l d0,a6
    6118:	|  |         move.l 16(sp),d0
    611c:	|  |         move.l 12(sp),d1
    6120:	|  |         jsr -684(a6)
    6124:	|  |         move.l d0,8(sp)
    6128:	|  |         move.l 8(sp),d0
    612c:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    6130:	|  |         move.l 4(sp),d0
    6134:	|  |     ,-- bne.s 614a <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    6136:	|  |     |   pea 18836 <PutChar+0xcc0>
    613c:	|  |     |   jsr 170d4 <KPrintF>
    6142:	|  |     |   addq.l #4,sp
			return FALSE;
    6144:	|  |     |   clr.w d0
    6146:	+--|-----|-- bra.w 62e6 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    614a:	|  |     '-> movea.l 4(sp),a0
    614e:	|  |         clr.l (a0)
		if (overRegion) {
    6150:	|  |         move.l 1c8e8 <overRegion>,d0
    6156:	|  |  ,----- beq.s 617e <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    6158:	|  |  |      movea.l 1c8e8 <overRegion>,a0
    615e:	|  |  |      movea.l 28(a0),a0
    6162:	|  |  |      move.l 4(a0),d1
    6166:	|  |  |      move.l 4(sp),d0
    616a:	|  |  |      move.l d1,-(sp)
    616c:	|  |  |      pea 7 <_start+0x7>
    6170:	|  |  |      move.l d0,-(sp)
    6172:	|  |  |      jsr 14f02 <setVariable>
    6178:	|  |  |      lea 12(sp),sp
    617c:	|  |  |  ,-- bra.s 6194 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    617e:	|  |  '--|-> move.l 4(sp),d0
    6182:	|  |     |   clr.l -(sp)
    6184:	|  |     |   pea 1 <_start+0x1>
    6188:	|  |     |   move.l d0,-(sp)
    618a:	|  |     |   jsr 14f02 <setVariable>
    6190:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    6194:	|  |     '-> movea.l 4(sp),a0
    6198:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    619c:	|  |         movea.l 1c148 <currentEvents>,a0
    61a2:	|  |         move.l 20(a0),d0
    61a6:	|  |         pea 1 <_start+0x1>
    61aa:	|  |         lea 8(sp),a0
    61ae:	|  |         move.l a0,-(sp)
    61b0:	|  |         clr.l -(sp)
    61b2:	|  |         pea 1 <_start+0x1>
    61b6:	|  |         move.l d0,-(sp)
    61b8:	|  |         jsr 733a <startNewFunctionNum>
    61be:	|  |         lea 20(sp),sp
    61c2:	|  |         tst.l d0
    61c4:	|  +-------- bne.s 61cc <handleInput+0x144>
    61c6:	|  |         clr.w d0
    61c8:	+--|-------- bra.w 62e6 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    61cc:	|  '-------> move.w 1c790 <input+0x6>,d0
    61d2:	|        ,-- beq.s 6210 <handleInput+0x188>
    61d4:	|        |   movea.l 1c148 <currentEvents>,a0
    61da:	|        |   move.l 4(a0),d0
    61de:	|        +-- beq.s 6210 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    61e0:	|        |   move.l 1c7a8 <noStack>,d1
    61e6:	|        |   movea.l 1c148 <currentEvents>,a0
    61ec:	|        |   move.l 4(a0),d0
    61f0:	|        |   pea 1 <_start+0x1>
    61f4:	|        |   move.l d1,-(sp)
    61f6:	|        |   clr.l -(sp)
    61f8:	|        |   clr.l -(sp)
    61fa:	|        |   move.l d0,-(sp)
    61fc:	|        |   jsr 733a <startNewFunctionNum>
    6202:	|        |   lea 20(sp),sp
    6206:	|        |   tst.l d0
    6208:	|        +-- bne.s 6210 <handleInput+0x188>
    620a:	|        |   clr.w d0
    620c:	+--------|-- bra.w 62e6 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    6210:	|        '-> move.w 1c792 <input+0x8>,d0
    6216:	|        ,-- beq.s 6254 <handleInput+0x1cc>
    6218:	|        |   movea.l 1c148 <currentEvents>,a0
    621e:	|        |   move.l 12(a0),d0
    6222:	|        +-- beq.s 6254 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6224:	|        |   move.l 1c7a8 <noStack>,d1
    622a:	|        |   movea.l 1c148 <currentEvents>,a0
    6230:	|        |   move.l 12(a0),d0
    6234:	|        |   pea 1 <_start+0x1>
    6238:	|        |   move.l d1,-(sp)
    623a:	|        |   clr.l -(sp)
    623c:	|        |   clr.l -(sp)
    623e:	|        |   move.l d0,-(sp)
    6240:	|        |   jsr 733a <startNewFunctionNum>
    6246:	|        |   lea 20(sp),sp
    624a:	|        |   tst.l d0
    624c:	|        +-- bne.s 6254 <handleInput+0x1cc>
    624e:	|        |   clr.w d0
    6250:	+--------|-- bra.w 62e6 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    6254:	|        '-> move.w 1c78a <input>,d0
    625a:	|        ,-- beq.s 6292 <handleInput+0x20a>
    625c:	|        |   movea.l 1c148 <currentEvents>,a0
    6262:	|        |   move.l (a0),d0
    6264:	|        +-- beq.s 6292 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6266:	|        |   move.l 1c7a8 <noStack>,d1
    626c:	|        |   movea.l 1c148 <currentEvents>,a0
    6272:	|        |   move.l (a0),d0
    6274:	|        |   pea 1 <_start+0x1>
    6278:	|        |   move.l d1,-(sp)
    627a:	|        |   clr.l -(sp)
    627c:	|        |   clr.l -(sp)
    627e:	|        |   move.l d0,-(sp)
    6280:	|        |   jsr 733a <startNewFunctionNum>
    6286:	|        |   lea 20(sp),sp
    628a:	|        |   tst.l d0
    628c:	|        +-- bne.s 6292 <handleInput+0x20a>
    628e:	|        |   clr.w d0
    6290:	+--------|-- bra.s 62e6 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    6292:	|        '-> move.w 1c78c <input+0x2>,d0
    6298:	|        ,-- beq.s 62d4 <handleInput+0x24c>
    629a:	|        |   movea.l 1c148 <currentEvents>,a0
    62a0:	|        |   move.l 8(a0),d0
    62a4:	|        +-- beq.s 62d4 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    62a6:	|        |   move.l 1c7a8 <noStack>,d1
    62ac:	|        |   movea.l 1c148 <currentEvents>,a0
    62b2:	|        |   move.l 8(a0),d0
    62b6:	|        |   pea 1 <_start+0x1>
    62ba:	|        |   move.l d1,-(sp)
    62bc:	|        |   clr.l -(sp)
    62be:	|        |   clr.l -(sp)
    62c0:	|        |   move.l d0,-(sp)
    62c2:	|        |   jsr 733a <startNewFunctionNum>
    62c8:	|        |   lea 20(sp),sp
    62cc:	|        |   tst.l d0
    62ce:	|        +-- bne.s 62d4 <handleInput+0x24c>
    62d0:	|        |   clr.w d0
    62d2:	+--------|-- bra.s 62e6 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    62d4:	|        '-> move.l 1c8e8 <overRegion>,d0
    62da:	|            move.l d0,1c7a0 <lastRegion>
	return runSludge ();
    62e0:	|            jsr 7108 <runSludge>
}
    62e6:	'----------> movea.l (sp)+,a6
    62e8:	             lea 16(sp),sp
    62ec:	             rts

000062ee <initSludge>:

BOOL initSludge (char * filename) {
    62ee:	             lea -292(sp),sp
    62f2:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    62f6:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    62fa:	             jsr ab56 <makeNullAnim>
    6300:	             move.l d0,1c6d2 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    6306:	             pea 1c782 <gameVersion>
    630c:	             pea 1886c <PutChar+0xcf6>
    6312:	             pea 45 <_start+0x45>
    6316:	             pea 47 <_start+0x47>
    631a:	             move.l 332(sp),-(sp)
    631e:	             jsr 6d3c <openAndVerify>
    6324:	             lea 20(sp),sp
    6328:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    632c:	         ,-- bne.s 6334 <initSludge+0x46>
    632e:	         |   clr.w d0
    6330:	,--------|-- bra.w 6a5c <initSludge+0x76e>
	if (FGetC (fp)) {
    6334:	|        '-> move.l 288(sp),284(sp)
    633a:	|            move.l 1c7e0 <DOSBase>,d0
    6340:	|            movea.l d0,a6
    6342:	|            move.l 284(sp),d1
    6346:	|            jsr -306(a6)
    634a:	|            move.l d0,280(sp)
    634e:	|            move.l 280(sp),d0
    6352:	|  ,-------- beq.w 64fc <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    6356:	|  |         move.l 288(sp),-(sp)
    635a:	|  |         jsr 6bc <get2bytes>
    6360:	|  |         addq.l #4,sp
    6362:	|  |         move.l d0,1c7ac <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    6368:	|  |         move.l 1c7ac <numBIFNames>,d0
    636e:	|  |         move.l d0,276(sp)
    6372:	|  |         clr.l 272(sp)
    6376:	|  |         move.l 1c7d8 <SysBase>,d0
    637c:	|  |         movea.l d0,a6
    637e:	|  |         move.l 276(sp),d0
    6382:	|  |         move.l 272(sp),d1
    6386:	|  |         jsr -684(a6)
    638a:	|  |         move.l d0,268(sp)
    638e:	|  |         move.l 268(sp),d0
    6392:	|  |         move.l d0,1c768 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    6398:	|  |         move.l 1c768 <allBIFNames>,d0
    639e:	|  |     ,-- bne.s 63a6 <initSludge+0xb8>
    63a0:	|  |     |   clr.w d0
    63a2:	+--|-----|-- bra.w 6a5c <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    63a6:	|  |     '-> clr.l 304(sp)
    63aa:	|  |     ,-- bra.s 63d0 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    63ac:	|  |  ,--|-> move.l 1c768 <allBIFNames>,d1
    63b2:	|  |  |  |   move.l 304(sp),d0
    63b6:	|  |  |  |   add.l d0,d0
    63b8:	|  |  |  |   add.l d0,d0
    63ba:	|  |  |  |   movea.l d1,a2
    63bc:	|  |  |  |   adda.l d0,a2
    63be:	|  |  |  |   move.l 288(sp),-(sp)
    63c2:	|  |  |  |   jsr b02 <readString>
    63c8:	|  |  |  |   addq.l #4,sp
    63ca:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    63cc:	|  |  |  |   addq.l #1,304(sp)
    63d0:	|  |  |  '-> move.l 1c7ac <numBIFNames>,d0
    63d6:	|  |  |      cmp.l 304(sp),d0
    63da:	|  |  '----- bgt.s 63ac <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    63dc:	|  |         move.l 288(sp),-(sp)
    63e0:	|  |         jsr 6bc <get2bytes>
    63e6:	|  |         addq.l #4,sp
    63e8:	|  |         move.l d0,1c7b8 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    63ee:	|  |         move.l 1c7b8 <numUserFunc>,d0
    63f4:	|  |         move.l d0,264(sp)
    63f8:	|  |         clr.l 260(sp)
    63fc:	|  |         move.l 1c7d8 <SysBase>,d0
    6402:	|  |         movea.l d0,a6
    6404:	|  |         move.l 264(sp),d0
    6408:	|  |         move.l 260(sp),d1
    640c:	|  |         jsr -684(a6)
    6410:	|  |         move.l d0,256(sp)
    6414:	|  |         move.l 256(sp),d0
    6418:	|  |         move.l d0,1c774 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    641e:	|  |         move.l 1c774 <allUserFunc>,d0
    6424:	|  |     ,-- bne.s 642c <initSludge+0x13e>
    6426:	|  |     |   clr.w d0
    6428:	+--|-----|-- bra.w 6a5c <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    642c:	|  |     '-> clr.l 300(sp)
    6430:	|  |     ,-- bra.s 6456 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6432:	|  |  ,--|-> move.l 1c774 <allUserFunc>,d1
    6438:	|  |  |  |   move.l 300(sp),d0
    643c:	|  |  |  |   add.l d0,d0
    643e:	|  |  |  |   add.l d0,d0
    6440:	|  |  |  |   movea.l d1,a2
    6442:	|  |  |  |   adda.l d0,a2
    6444:	|  |  |  |   move.l 288(sp),-(sp)
    6448:	|  |  |  |   jsr b02 <readString>
    644e:	|  |  |  |   addq.l #4,sp
    6450:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    6452:	|  |  |  |   addq.l #1,300(sp)
    6456:	|  |  |  '-> move.l 1c7b8 <numUserFunc>,d0
    645c:	|  |  |      cmp.l 300(sp),d0
    6460:	|  |  '----- bgt.s 6432 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    6462:	|  |         move.l 1c782 <gameVersion>,d0
    6468:	|  |         cmpi.l #258,d0
    646e:	|  +-------- ble.w 64fc <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    6472:	|  |         move.l 288(sp),-(sp)
    6476:	|  |         jsr 6bc <get2bytes>
    647c:	|  |         addq.l #4,sp
    647e:	|  |         move.l d0,1c7b4 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    6484:	|  |         move.l 1c7b4 <numResourceNames>,d0
    648a:	|  |         add.l d0,d0
    648c:	|  |         add.l d0,d0
    648e:	|  |         move.l d0,252(sp)
    6492:	|  |         clr.l 248(sp)
    6496:	|  |         move.l 1c7d8 <SysBase>,d0
    649c:	|  |         movea.l d0,a6
    649e:	|  |         move.l 252(sp),d0
    64a2:	|  |         move.l 248(sp),d1
    64a6:	|  |         jsr -684(a6)
    64aa:	|  |         move.l d0,244(sp)
    64ae:	|  |         move.l 244(sp),d0
    64b2:	|  |         move.l d0,1c76c <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    64b8:	|  |         move.l 1c76c <allResourceNames>,d0
    64be:	|  |     ,-- bne.s 64c6 <initSludge+0x1d8>
    64c0:	|  |     |   clr.w d0
    64c2:	+--|-----|-- bra.w 6a5c <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    64c6:	|  |     '-> clr.l 296(sp)
    64ca:	|  |     ,-- bra.s 64f0 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    64cc:	|  |  ,--|-> move.l 1c76c <allResourceNames>,d1
    64d2:	|  |  |  |   move.l 296(sp),d0
    64d6:	|  |  |  |   add.l d0,d0
    64d8:	|  |  |  |   add.l d0,d0
    64da:	|  |  |  |   movea.l d1,a2
    64dc:	|  |  |  |   adda.l d0,a2
    64de:	|  |  |  |   move.l 288(sp),-(sp)
    64e2:	|  |  |  |   jsr b02 <readString>
    64e8:	|  |  |  |   addq.l #4,sp
    64ea:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    64ec:	|  |  |  |   addq.l #1,296(sp)
    64f0:	|  |  |  '-> move.l 1c7b4 <numResourceNames>,d0
    64f6:	|  |  |      cmp.l 296(sp),d0
    64fa:	|  |  '----- bgt.s 64cc <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    64fc:	|  '-------> move.l #129,1c794 <input+0xa>
	input.mouseY = 100;
    6506:	|            moveq #100,d0
    6508:	|            move.l d0,1c798 <input+0xe>
	winWidth = get2bytes (fp);
    650e:	|            move.l 288(sp),-(sp)
    6512:	|            jsr 6bc <get2bytes>
    6518:	|            addq.l #4,sp
    651a:	|            move.l d0,1c72c <winWidth>
	winHeight = get2bytes (fp);
    6520:	|            move.l 288(sp),-(sp)
    6524:	|            jsr 6bc <get2bytes>
    652a:	|            addq.l #4,sp
    652c:	|            move.l d0,1c730 <winHeight>
	specialSettings = FGetC (fp);
    6532:	|            move.l 288(sp),240(sp)
    6538:	|            move.l 1c7e0 <DOSBase>,d0
    653e:	|            movea.l d0,a6
    6540:	|            move.l 240(sp),d1
    6544:	|            jsr -306(a6)
    6548:	|            move.l d0,236(sp)
    654c:	|            move.l 236(sp),d0
    6550:	|            move.l d0,1c7bc <specialSettings>

	desiredfps = 1000/FGetC (fp);
    6556:	|            move.l 288(sp),232(sp)
    655c:	|            move.l 1c7e0 <DOSBase>,d0
    6562:	|            movea.l d0,a6
    6564:	|            move.l 232(sp),d1
    6568:	|            jsr -306(a6)
    656c:	|            move.l d0,228(sp)
    6570:	|            move.l 228(sp),d0
    6574:	|            move.l d0,-(sp)
    6576:	|            pea 3e8 <encodeFilename+0xea>
    657a:	|            jsr 17ade <__divsi3>
    6580:	|            addq.l #8,sp
    6582:	|            move.l d0,1c15a <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    6588:	|            move.l 288(sp),-(sp)
    658c:	|            jsr b02 <readString>
    6592:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    6594:	|            move.l 288(sp),224(sp)
    659a:	|            move.l #116602,220(sp)
    65a2:	|            moveq #8,d1
    65a4:	|            move.l d1,216(sp)
    65a8:	|            moveq #1,d0
    65aa:	|            move.l d0,212(sp)
    65ae:	|            move.l 1c7e0 <DOSBase>,d0
    65b4:	|            movea.l d0,a6
    65b6:	|            move.l 224(sp),d1
    65ba:	|            move.l 220(sp),d2
    65be:	|            move.l 216(sp),d3
    65c2:	|            move.l 212(sp),d4
    65c6:	|            jsr -324(a6)
    65ca:	|            move.l d0,208(sp)
    65ce:	|            move.l 208(sp),d0
    65d2:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    65d6:	|            moveq #1,d1
    65d8:	|            cmp.l 204(sp),d1
    65dc:	|        ,-- beq.s 65ec <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    65de:	|        |   pea 188a5 <PutChar+0xd2f>
    65e4:	|        |   jsr 170d4 <KPrintF>
    65ea:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    65ec:	|        '-> move.l 1c782 <gameVersion>,d0
    65f2:	|            cmpi.l #258,d0
    65f8:	|        ,-- ble.s 6608 <initSludge+0x31a>
    65fa:	|        |   move.l 288(sp),-(sp)
    65fe:	|        |   jsr b02 <readString>
    6604:	|        |   addq.l #4,sp
    6606:	|     ,--|-- bra.s 661c <initSludge+0x32e>
    6608:	|     |  '-> pea 188c3 <PutChar+0xd4d>
    660e:	|     |      pea 188c3 <PutChar+0xd4d>
    6614:	|     |      jsr 13b3c <joinStrings>
    661a:	|     |      addq.l #8,sp
    661c:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    6620:	|            move.l 1c782 <gameVersion>,d0
    6626:	|            cmpi.l #258,d0
    662c:	|     ,----- ble.s 664e <initSludge+0x360>
    662e:	|     |      move.l 288(sp),196(sp)
    6634:	|     |      move.l 1c7e0 <DOSBase>,d0
    663a:	|     |      movea.l d0,a6
    663c:	|     |      move.l 196(sp),d1
    6640:	|     |      jsr -306(a6)
    6644:	|     |      move.l d0,192(sp)
    6648:	|     |      move.l 192(sp),d0
    664c:	|     |  ,-- bra.s 6650 <initSludge+0x362>
    664e:	|     '--|-> moveq #0,d0
    6650:	|        '-> move.l d0,1c8b4 <gameSettings+0x4>
	makeLanguageTable (fp);
    6656:	|            move.l 288(sp),-(sp)
    665a:	|            jsr 134f2 <makeLanguageTable>
    6660:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6662:	|            move.l 1c782 <gameVersion>,d0
    6668:	|            cmpi.l #261,d0
    666e:	|        ,-- ble.s 66bc <initSludge+0x3ce>
	{
		FGetC(fp);
    6670:	|        |   move.l 288(sp),188(sp)
    6676:	|        |   move.l 1c7e0 <DOSBase>,d0
    667c:	|        |   movea.l d0,a6
    667e:	|        |   move.l 188(sp),d1
    6682:	|        |   jsr -306(a6)
    6686:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    668a:	|        |   move.l 288(sp),180(sp)
    6690:	|        |   move.l 1c7e0 <DOSBase>,d0
    6696:	|        |   movea.l d0,a6
    6698:	|        |   move.l 180(sp),d1
    669c:	|        |   jsr -306(a6)
    66a0:	|        |   move.l d0,176(sp)
		getFloat (fp);
    66a4:	|        |   move.l 288(sp),-(sp)
    66a8:	|        |   jsr 7d8 <getFloat>
    66ae:	|        |   addq.l #4,sp
		getFloat (fp);
    66b0:	|        |   move.l 288(sp),-(sp)
    66b4:	|        |   jsr 7d8 <getFloat>
    66ba:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    66bc:	|        '-> move.l 288(sp),-(sp)
    66c0:	|            jsr b02 <readString>
    66c6:	|            addq.l #4,sp
    66c8:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    66cc:	|            pea 188c4 <PutChar+0xd4e>
    66d2:	|            move.l 176(sp),-(sp)
    66d6:	|            jsr 13abc <strcmp>
    66dc:	|            addq.l #8,sp
    66de:	|            tst.l d0
    66e0:	|        ,-- beq.s 66e8 <initSludge+0x3fa>
		return FALSE;
    66e2:	|        |   clr.w d0
    66e4:	+--------|-- bra.w 6a5c <initSludge+0x76e>
	}
	FreeVec( checker);
    66e8:	|        '-> move.l 172(sp),168(sp)
    66ee:	|            move.l 1c7d8 <SysBase>,d0
    66f4:	|            movea.l d0,a6
    66f6:	|            movea.l 168(sp),a1
    66fa:	|            jsr -690(a6)
	checker = NULL;
    66fe:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6702:	|            move.l 288(sp),164(sp)
    6708:	|            move.l 1c7e0 <DOSBase>,d0
    670e:	|            movea.l d0,a6
    6710:	|            move.l 164(sp),d1
    6714:	|            jsr -306(a6)
    6718:	|            move.l d0,160(sp)
    671c:	|            move.l 160(sp),d0
    6720:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6724:	|            moveq #0,d0
    6726:	|            move.b 159(sp),d0
    672a:	|            moveq #1,d1
    672c:	|            and.l d1,d0
    672e:	|        ,-- beq.s 6786 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6730:	|        |   move.l 1c7e0 <DOSBase>,d0
    6736:	|        |   movea.l d0,a6
    6738:	|        |   jsr -60(a6)
    673c:	|        |   move.l d0,38(sp)
    6740:	|        |   move.l 38(sp),d0
    6744:	|        |   move.l d0,34(sp)
    6748:	|        |   move.l #100556,30(sp)
    6750:	|        |   moveq #54,d0
    6752:	|        |   move.l d0,26(sp)
    6756:	|        |   move.l 1c7e0 <DOSBase>,d0
    675c:	|        |   movea.l d0,a6
    675e:	|        |   move.l 34(sp),d1
    6762:	|        |   move.l 30(sp),d2
    6766:	|        |   move.l 26(sp),d3
    676a:	|        |   jsr -48(a6)
    676e:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6772:	|        |   pea 18903 <PutChar+0xd8d>
    6778:	|        |   jsr 170d4 <KPrintF>
    677e:	|        |   addq.l #4,sp
		return FALSE;
    6780:	|        |   clr.w d0
    6782:	+--------|-- bra.w 6a5c <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6786:	|        '-> move.l 288(sp),-(sp)
    678a:	|            jsr 6bc <get2bytes>
    6790:	|            addq.l #4,sp
    6792:	|            move.l d0,1c7b0 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6798:	|            move.l 1c7b0 <numGlobals>,d0
    679e:	|            lsl.l #3,d0
    67a0:	|            move.l d0,154(sp)
    67a4:	|            clr.l 150(sp)
    67a8:	|            move.l 1c7d8 <SysBase>,d0
    67ae:	|            movea.l d0,a6
    67b0:	|            move.l 154(sp),d0
    67b4:	|            move.l 150(sp),d1
    67b8:	|            jsr -684(a6)
    67bc:	|            move.l d0,146(sp)
    67c0:	|            move.l 146(sp),d0
    67c4:	|            move.l d0,1c786 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    67ca:	|            move.l 1c786 <globalVars>,d0
    67d0:	|        ,-- bne.s 67ee <initSludge+0x500>
    67d2:	|        |   move.l 1c7b0 <numGlobals>,d0
    67d8:	|        +-- ble.s 67ee <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    67da:	|        |   pea 1893b <PutChar+0xdc5>
    67e0:	|        |   jsr 170d4 <KPrintF>
    67e6:	|        |   addq.l #4,sp
		return FALSE;
    67e8:	|        |   clr.w d0
    67ea:	+--------|-- bra.w 6a5c <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    67ee:	|        '-> clr.l 308(sp)
    67f2:	|        ,-- bra.s 680a <initSludge+0x51c>
    67f4:	|     ,--|-> move.l 1c786 <globalVars>,d1
    67fa:	|     |  |   move.l 308(sp),d0
    67fe:	|     |  |   lsl.l #3,d0
    6800:	|     |  |   movea.l d1,a0
    6802:	|     |  |   adda.l d0,a0
    6804:	|     |  |   clr.l (a0)
    6806:	|     |  |   addq.l #1,308(sp)
    680a:	|     |  '-> move.l 1c7b0 <numGlobals>,d0
    6810:	|     |      cmp.l 308(sp),d0
    6814:	|     '----- bgt.s 67f4 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6816:	|            move.l 1c8b4 <gameSettings+0x4>,d0
    681c:	|            clr.l -(sp)
    681e:	|            move.l d0,-(sp)
    6820:	|            move.l 296(sp),-(sp)
    6824:	|            jsr 782a <setFileIndices>
    682a:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    682e:	|            pea 1 <_start+0x1>
    6832:	|            jsr 74e4 <getNumberedString>
    6838:	|            addq.l #4,sp
    683a:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    683e:	|            move.l 142(sp),-(sp)
    6842:	|            jsr 2fe <encodeFilename>
    6848:	|            addq.l #4,sp
    684a:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    684e:	|            move.l 142(sp),134(sp)
    6854:	|            move.l 1c7d8 <SysBase>,d0
    685a:	|            movea.l d0,a6
    685c:	|            movea.l 134(sp),a1
    6860:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6864:	|            move.l 138(sp),130(sp)
    686a:	|            move.l 1c7e0 <DOSBase>,d0
    6870:	|            movea.l d0,a6
    6872:	|            move.l 130(sp),d1
    6876:	|            jsr -120(a6)
    687a:	|            move.l d0,126(sp)
    687e:	|            move.l 126(sp),d0
    6882:	|            move.l d0,292(sp)
	if(lock == 0) {
    6886:	|        ,-- bne.s 68b4 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6888:	|        |   move.l 138(sp),122(sp)
    688e:	|        |   moveq #-2,d1
    6890:	|        |   move.l d1,118(sp)
    6894:	|        |   move.l 1c7e0 <DOSBase>,d0
    689a:	|        |   movea.l d0,a6
    689c:	|        |   move.l 122(sp),d1
    68a0:	|        |   move.l 118(sp),d2
    68a4:	|        |   jsr -84(a6)
    68a8:	|        |   move.l d0,114(sp)
    68ac:	|        |   move.l 114(sp),d0
    68b0:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    68b4:	|        '-> move.l 292(sp),110(sp)
    68ba:	|            move.l 1c7e0 <DOSBase>,d0
    68c0:	|            movea.l d0,a6
    68c2:	|            move.l 110(sp),d1
    68c6:	|            jsr -126(a6)
    68ca:	|            move.l d0,106(sp)
    68ce:	|            move.l 106(sp),d0
    68d2:	|        ,-- bne.s 692e <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    68d4:	|        |   move.l 138(sp),-(sp)
    68d8:	|        |   pea 1896e <PutChar+0xdf8>
    68de:	|        |   jsr 170d4 <KPrintF>
    68e4:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    68e6:	|        |   move.l 1c7e0 <DOSBase>,d0
    68ec:	|        |   movea.l d0,a6
    68ee:	|        |   jsr -60(a6)
    68f2:	|        |   move.l d0,58(sp)
    68f6:	|        |   move.l 58(sp),d0
    68fa:	|        |   move.l d0,54(sp)
    68fe:	|        |   move.l #100763,50(sp)
    6906:	|        |   moveq #40,d0
    6908:	|        |   move.l d0,46(sp)
    690c:	|        |   move.l 1c7e0 <DOSBase>,d0
    6912:	|        |   movea.l d0,a6
    6914:	|        |   move.l 54(sp),d1
    6918:	|        |   move.l 50(sp),d2
    691c:	|        |   move.l 46(sp),d3
    6920:	|        |   jsr -48(a6)
    6924:	|        |   move.l d0,42(sp)
		return FALSE;
    6928:	|        |   clr.w d0
    692a:	+--------|-- bra.w 6a5c <initSludge+0x76e>
	}

	FreeVec(gameName);
    692e:	|        '-> move.l 138(sp),102(sp)
    6934:	|            move.l 1c7d8 <SysBase>,d0
    693a:	|            movea.l d0,a6
    693c:	|            movea.l 102(sp),a1
    6940:	|            jsr -690(a6)

	readIniFile (filename);
    6944:	|            move.l 316(sp),-(sp)
    6948:	|            jsr 13626 <readIniFile>
    694e:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6950:	|            jsr 133f8 <getLanguageForFileB>
    6956:	|            move.l d0,1c14c <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    695c:	|            move.l 1c14c <languageNum>,d0
    6962:	|        ,-- bpl.s 6972 <initSludge+0x684>
    6964:	|        |   pea 189c4 <PutChar+0xe4e>
    696a:	|        |   jsr 170d4 <KPrintF>
    6970:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6972:	|        '-> move.l 1c14c <languageNum>,d0
    6978:	|            move.l d0,d1
    697a:	|            move.l 1c8b4 <gameSettings+0x4>,d0
    6980:	|            move.l d1,-(sp)
    6982:	|            move.l d0,-(sp)
    6984:	|            clr.l -(sp)
    6986:	|            jsr 782a <setFileIndices>
    698c:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6990:	|            movea.l 200(sp),a0
    6994:	|            move.b (a0),d0
    6996:	|     ,----- beq.w 6a40 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    699a:	|     |      move.l 200(sp),-(sp)
    699e:	|     |      jsr 2fe <encodeFilename>
    69a4:	|     |      addq.l #4,sp
    69a6:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    69aa:	|     |      move.l 98(sp),94(sp)
    69b0:	|     |      move.l 1c7e0 <DOSBase>,d0
    69b6:	|     |      movea.l d0,a6
    69b8:	|     |      move.l 94(sp),d1
    69bc:	|     |      jsr -120(a6)
    69c0:	|     |      move.l d0,90(sp)
    69c4:	|     |      move.l 90(sp),d0
    69c8:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    69cc:	|     |  ,-- bne.s 69fa <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    69ce:	|     |  |   move.l 98(sp),86(sp)
    69d4:	|     |  |   moveq #-2,d1
    69d6:	|     |  |   move.l d1,82(sp)
    69da:	|     |  |   move.l 1c7e0 <DOSBase>,d0
    69e0:	|     |  |   movea.l d0,a6
    69e2:	|     |  |   move.l 86(sp),d1
    69e6:	|     |  |   move.l 82(sp),d2
    69ea:	|     |  |   jsr -84(a6)
    69ee:	|     |  |   move.l d0,78(sp)
    69f2:	|     |  |   move.l 78(sp),d0
    69f6:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    69fa:	|     |  '-> move.l 292(sp),74(sp)
    6a00:	|     |      move.l 1c7e0 <DOSBase>,d0
    6a06:	|     |      movea.l d0,a6
    6a08:	|     |      move.l 74(sp),d1
    6a0c:	|     |      jsr -126(a6)
    6a10:	|     |      move.l d0,70(sp)
    6a14:	|     |      move.l 70(sp),d0
    6a18:	|     |  ,-- bne.s 6a2a <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6a1a:	|     |  |   move.l 1c7e0 <DOSBase>,d0
    6a20:	|     |  |   movea.l d0,a6
    6a22:	|     |  |   jsr -60(a6)
    6a26:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6a2a:	|     |  '-> move.l 98(sp),62(sp)
    6a30:	|     |      move.l 1c7d8 <SysBase>,d0
    6a36:	|     |      movea.l d0,a6
    6a38:	|     |      movea.l 62(sp),a1
    6a3c:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6a40:	|     '----> movea.l 1c730 <winHeight>,a0
    6a46:	|            lea -15(a0),a0
    6a4a:	|            move.l a0,d0
    6a4c:	|            move.l d0,-(sp)
    6a4e:	|            pea a <_start+0xa>
    6a52:	|            jsr 8270 <positionStatus>
    6a58:	|            addq.l #8,sp

	return TRUE;
    6a5a:	|            moveq #1,d0
}
    6a5c:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6a60:	             lea 292(sp),sp
    6a64:	             rts

00006a66 <killSpeechTimers>:

void killSpeechTimers () {
    6a66:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6a68:	          move.l 1c770 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6a6e:	   ,----- bra.s 6a9a <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6a70:	,--|----> movea.l (sp),a0
    6a72:	|  |      move.b 56(a0),d0
    6a76:	|  |  ,-- bne.s 6a94 <killSpeechTimers+0x2e>
    6a78:	|  |  |   movea.l (sp),a0
    6a7a:	|  |  |   move.w 50(a0),d0
    6a7e:	|  |  +-- beq.s 6a94 <killSpeechTimers+0x2e>
    6a80:	|  |  |   movea.l (sp),a0
    6a82:	|  |  |   move.l 12(a0),d0
    6a86:	|  |  +-- beq.s 6a94 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6a88:	|  |  |   movea.l (sp),a0
    6a8a:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6a8e:	|  |  |   movea.l (sp),a0
    6a90:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6a94:	|  |  '-> movea.l (sp),a0
    6a96:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6a9a:	|  '----> tst.l (sp)
    6a9c:	'-------- bne.s 6a70 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6a9e:	          jsr 3ef2 <killAllSpeech>
}
    6aa4:	          nop
    6aa6:	          addq.l #4,sp
    6aa8:	          rts

00006aaa <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6aaa:	             lea -52(sp),sp
    6aae:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6ab0:	             movea.l 60(sp),a0
    6ab4:	             move.l (a0),d0
    6ab6:	             move.l d0,-(sp)
    6ab8:	             jsr 776a <openSubSlice>
    6abe:	             addq.l #4,sp
    6ac0:	             tst.w d0
    6ac2:	         ,-- bne.s 6aca <loadFunctionCode+0x20>
    6ac4:	         |   clr.w d0
    6ac6:	,--------|-- bra.w 6c94 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6aca:	|        '-> move.l 1c7c0 <bigDataFile>,44(sp)
    6ad2:	|            move.l 1c7e0 <DOSBase>,d0
    6ad8:	|            movea.l d0,a6
    6ada:	|            move.l 44(sp),d1
    6ade:	|            jsr -306(a6)
    6ae2:	|            move.l d0,40(sp)
    6ae6:	|            move.l 40(sp),d0
    6aea:	|            move.l d0,d0
    6aec:	|            movea.l 60(sp),a0
    6af0:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6af4:	|            move.l 1c7c0 <bigDataFile>,d0
    6afa:	|            move.l d0,-(sp)
    6afc:	|            jsr 6bc <get2bytes>
    6b02:	|            addq.l #4,sp
    6b04:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6b08:	|            move.l 1c7c0 <bigDataFile>,d0
    6b0e:	|            move.l d0,-(sp)
    6b10:	|            jsr 6bc <get2bytes>
    6b16:	|            addq.l #4,sp
    6b18:	|            movea.l 60(sp),a0
    6b1c:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6b20:	|            move.l 1c7c0 <bigDataFile>,d0
    6b26:	|            move.l d0,-(sp)
    6b28:	|            jsr 6bc <get2bytes>
    6b2e:	|            addq.l #4,sp
    6b30:	|            movea.l 60(sp),a0
    6b34:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6b38:	|            move.l 36(sp),d0
    6b3c:	|            lsl.l #3,d0
    6b3e:	|            move.l d0,32(sp)
    6b42:	|            clr.l 28(sp)
    6b46:	|            move.l 1c7d8 <SysBase>,d0
    6b4c:	|            movea.l d0,a6
    6b4e:	|            move.l 32(sp),d0
    6b52:	|            move.l 28(sp),d1
    6b56:	|            jsr -684(a6)
    6b5a:	|            move.l d0,24(sp)
    6b5e:	|            move.l 24(sp),d0
    6b62:	|            movea.l 60(sp),a0
    6b66:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6b6a:	|            movea.l 60(sp),a0
    6b6e:	|            move.l 4(a0),d0
    6b72:	|        ,-- bne.s 6b88 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6b74:	|        |   pea 189ef <PutChar+0xe79>
    6b7a:	|        |   jsr 170d4 <KPrintF>
    6b80:	|        |   addq.l #4,sp
		return FALSE;
    6b82:	|        |   clr.w d0
    6b84:	+--------|-- bra.w 6c94 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6b88:	|        '-> clr.l 52(sp)
    6b8c:	|        ,-- bra.s 6bee <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6b8e:	|     ,--|-> move.l 1c7c0 <bigDataFile>,8(sp)
    6b96:	|     |  |   move.l 1c7e0 <DOSBase>,d0
    6b9c:	|     |  |   movea.l d0,a6
    6b9e:	|     |  |   move.l 8(sp),d1
    6ba2:	|     |  |   jsr -306(a6)
    6ba6:	|     |  |   move.l d0,4(sp)
    6baa:	|     |  |   move.l 4(sp),d1
    6bae:	|     |  |   movea.l 60(sp),a0
    6bb2:	|     |  |   movea.l 4(a0),a0
    6bb6:	|     |  |   move.l 52(sp),d0
    6bba:	|     |  |   lsl.l #3,d0
    6bbc:	|     |  |   adda.l d0,a0
    6bbe:	|     |  |   move.l d1,d0
    6bc0:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6bc2:	|     |  |   move.l 1c7c0 <bigDataFile>,d0
    6bc8:	|     |  |   move.l d0,-(sp)
    6bca:	|     |  |   jsr 6bc <get2bytes>
    6bd0:	|     |  |   addq.l #4,sp
    6bd2:	|     |  |   move.l d0,d1
    6bd4:	|     |  |   movea.l 60(sp),a0
    6bd8:	|     |  |   movea.l 4(a0),a0
    6bdc:	|     |  |   move.l 52(sp),d0
    6be0:	|     |  |   lsl.l #3,d0
    6be2:	|     |  |   adda.l d0,a0
    6be4:	|     |  |   move.l d1,d0
    6be6:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6bea:	|     |  |   addq.l #1,52(sp)
    6bee:	|     |  '-> move.l 52(sp),d0
    6bf2:	|     |      cmp.l 36(sp),d0
    6bf6:	|     '----- bcs.s 6b8e <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6bf8:	|            jsr 74da <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6bfe:	|            movea.l 60(sp),a0
    6c02:	|            move.l 8(a0),d0
    6c06:	|  ,-------- ble.w 6c8a <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6c0a:	|  |         movea.l 60(sp),a0
    6c0e:	|  |         move.l 8(a0),d0
    6c12:	|  |         lsl.l #3,d0
    6c14:	|  |         move.l d0,20(sp)
    6c18:	|  |         clr.l 16(sp)
    6c1c:	|  |         move.l 1c7d8 <SysBase>,d0
    6c22:	|  |         movea.l d0,a6
    6c24:	|  |         move.l 20(sp),d0
    6c28:	|  |         move.l 16(sp),d1
    6c2c:	|  |         jsr -684(a6)
    6c30:	|  |         move.l d0,12(sp)
    6c34:	|  |         move.l 12(sp),d0
    6c38:	|  |         movea.l 60(sp),a0
    6c3c:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6c40:	|  |         movea.l 60(sp),a0
    6c44:	|  |         move.l 20(a0),d0
    6c48:	|  |     ,-- bne.s 6c5c <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6c4a:	|  |     |   pea 189ef <PutChar+0xe79>
    6c50:	|  |     |   jsr 170d4 <KPrintF>
    6c56:	|  |     |   addq.l #4,sp
			return FALSE;
    6c58:	|  |     |   clr.w d0
    6c5a:	+--|-----|-- bra.s 6c94 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    6c5c:	|  |     '-> clr.l 48(sp)
    6c60:	|  |     ,-- bra.s 6c7a <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6c62:	|  |  ,--|-> movea.l 60(sp),a0
    6c66:	|  |  |  |   move.l 20(a0),d1
    6c6a:	|  |  |  |   move.l 48(sp),d0
    6c6e:	|  |  |  |   lsl.l #3,d0
    6c70:	|  |  |  |   movea.l d1,a0
    6c72:	|  |  |  |   adda.l d0,a0
    6c74:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6c76:	|  |  |  |   addq.l #1,48(sp)
    6c7a:	|  |  |  '-> movea.l 60(sp),a0
    6c7e:	|  |  |      move.l 8(a0),d0
    6c82:	|  |  |      cmp.l 48(sp),d0
    6c86:	|  |  '----- bgt.s 6c62 <loadFunctionCode+0x1b8>
    6c88:	|  |     ,-- bra.s 6c92 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6c8a:	|  '-----|-> movea.l 60(sp),a0
    6c8e:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6c92:	|        '-> moveq #1,d0
}
    6c94:	'----------> movea.l (sp)+,a6
    6c96:	             lea 52(sp),sp
    6c9a:	             rts

00006c9c <loadHandlers>:

void loadHandlers (BPTR fp) {
    6c9c:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    6c9e:	movea.l 1c148 <currentEvents>,a2
    6ca4:	move.l 8(sp),-(sp)
    6ca8:	jsr 6bc <get2bytes>
    6cae:	addq.l #4,sp
    6cb0:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6cb2:	movea.l 1c148 <currentEvents>,a2
    6cb8:	move.l 8(sp),-(sp)
    6cbc:	jsr 6bc <get2bytes>
    6cc2:	addq.l #4,sp
    6cc4:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6cc8:	movea.l 1c148 <currentEvents>,a2
    6cce:	move.l 8(sp),-(sp)
    6cd2:	jsr 6bc <get2bytes>
    6cd8:	addq.l #4,sp
    6cda:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6cde:	movea.l 1c148 <currentEvents>,a2
    6ce4:	move.l 8(sp),-(sp)
    6ce8:	jsr 6bc <get2bytes>
    6cee:	addq.l #4,sp
    6cf0:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6cf4:	movea.l 1c148 <currentEvents>,a2
    6cfa:	move.l 8(sp),-(sp)
    6cfe:	jsr 6bc <get2bytes>
    6d04:	addq.l #4,sp
    6d06:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    6d0a:	movea.l 1c148 <currentEvents>,a2
    6d10:	move.l 8(sp),-(sp)
    6d14:	jsr 6bc <get2bytes>
    6d1a:	addq.l #4,sp
    6d1c:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    6d20:	movea.l 1c148 <currentEvents>,a2
    6d26:	move.l 8(sp),-(sp)
    6d2a:	jsr 6bc <get2bytes>
    6d30:	addq.l #4,sp
    6d32:	move.l d0,24(a2)
}
    6d36:	nop
    6d38:	movea.l (sp)+,a2
    6d3a:	rts

00006d3c <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6d3c:	       lea -312(sp),sp
    6d40:	       movem.l d2-d3/a6,-(sp)
    6d44:	       move.l 332(sp),d1
    6d48:	       move.l 336(sp),d0
    6d4c:	       move.b d1,d1
    6d4e:	       move.b d1,16(sp)
    6d52:	       move.b d0,d0
    6d54:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6d58:	       move.l 328(sp),318(sp)
    6d5e:	       move.l #1005,314(sp)
    6d66:	       move.l 1c7e0 <DOSBase>,d0
    6d6c:	       movea.l d0,a6
    6d6e:	       move.l 318(sp),d1
    6d72:	       move.l 314(sp),d2
    6d76:	       jsr -30(a6)
    6d7a:	       move.l d0,310(sp)
    6d7e:	       move.l 310(sp),d0
    6d82:	       move.l d0,306(sp)

	if (! fp) {
    6d86:	   ,-- bne.s 6de2 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6d88:	   |   move.l 1c7e0 <DOSBase>,d0
    6d8e:	   |   movea.l d0,a6
    6d90:	   |   jsr -60(a6)
    6d94:	   |   move.l d0,154(sp)
    6d98:	   |   move.l 154(sp),d0
    6d9c:	   |   move.l d0,150(sp)
    6da0:	   |   move.l #100888,146(sp)
    6da8:	   |   moveq #31,d0
    6daa:	   |   move.l d0,142(sp)
    6dae:	   |   move.l 1c7e0 <DOSBase>,d0
    6db4:	   |   movea.l d0,a6
    6db6:	   |   move.l 150(sp),d1
    6dba:	   |   move.l 146(sp),d2
    6dbe:	   |   move.l 142(sp),d3
    6dc2:	   |   jsr -48(a6)
    6dc6:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6dca:	   |   move.l 328(sp),-(sp)
    6dce:	   |   pea 18a38 <PutChar+0xec2>
    6dd4:	   |   jsr 170d4 <KPrintF>
    6dda:	   |   addq.l #8,sp
		return NULL;
    6ddc:	   |   moveq #0,d0
    6dde:	,--|-- bra.w 70a2 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6de2:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6de6:	|      move.l 306(sp),302(sp)
    6dec:	|      move.l 1c7e0 <DOSBase>,d0
    6df2:	|      movea.l d0,a6
    6df4:	|      move.l 302(sp),d1
    6df8:	|      jsr -306(a6)
    6dfc:	|      move.l d0,298(sp)
    6e00:	|      move.l 298(sp),d0
    6e04:	|      moveq #83,d1
    6e06:	|      cmp.l d0,d1
    6e08:	|  ,-- beq.s 6e10 <openAndVerify+0xd4>
    6e0a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    6e10:	|  '-> move.l 306(sp),294(sp)
    6e16:	|      move.l 1c7e0 <DOSBase>,d0
    6e1c:	|      movea.l d0,a6
    6e1e:	|      move.l 294(sp),d1
    6e22:	|      jsr -306(a6)
    6e26:	|      move.l d0,290(sp)
    6e2a:	|      move.l 290(sp),d0
    6e2e:	|      moveq #76,d1
    6e30:	|      cmp.l d0,d1
    6e32:	|  ,-- beq.s 6e3a <openAndVerify+0xfe>
    6e34:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6e3a:	|  '-> move.l 306(sp),286(sp)
    6e40:	|      move.l 1c7e0 <DOSBase>,d0
    6e46:	|      movea.l d0,a6
    6e48:	|      move.l 286(sp),d1
    6e4c:	|      jsr -306(a6)
    6e50:	|      move.l d0,282(sp)
    6e54:	|      move.l 282(sp),d0
    6e58:	|      moveq #85,d1
    6e5a:	|      cmp.l d0,d1
    6e5c:	|  ,-- beq.s 6e64 <openAndVerify+0x128>
    6e5e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6e64:	|  '-> move.l 306(sp),278(sp)
    6e6a:	|      move.l 1c7e0 <DOSBase>,d0
    6e70:	|      movea.l d0,a6
    6e72:	|      move.l 278(sp),d1
    6e76:	|      jsr -306(a6)
    6e7a:	|      move.l d0,274(sp)
    6e7e:	|      move.l 274(sp),d0
    6e82:	|      moveq #68,d1
    6e84:	|      cmp.l d0,d1
    6e86:	|  ,-- beq.s 6e8e <openAndVerify+0x152>
    6e88:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    6e8e:	|  '-> move.l 306(sp),270(sp)
    6e94:	|      move.l 1c7e0 <DOSBase>,d0
    6e9a:	|      movea.l d0,a6
    6e9c:	|      move.l 270(sp),d1
    6ea0:	|      jsr -306(a6)
    6ea4:	|      move.l d0,266(sp)
    6ea8:	|      move.l 266(sp),d1
    6eac:	|      move.b 16(sp),d0
    6eb0:	|      ext.w d0
    6eb2:	|      movea.w d0,a0
    6eb4:	|      cmpa.l d1,a0
    6eb6:	|  ,-- beq.s 6ebe <openAndVerify+0x182>
    6eb8:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    6ebe:	|  '-> move.l 306(sp),262(sp)
    6ec4:	|      move.l 1c7e0 <DOSBase>,d0
    6eca:	|      movea.l d0,a6
    6ecc:	|      move.l 262(sp),d1
    6ed0:	|      jsr -306(a6)
    6ed4:	|      move.l d0,258(sp)
    6ed8:	|      move.l 258(sp),d1
    6edc:	|      move.b 14(sp),d0
    6ee0:	|      ext.w d0
    6ee2:	|      movea.w d0,a0
    6ee4:	|      cmpa.l d1,a0
    6ee6:	|  ,-- beq.s 6eee <openAndVerify+0x1b2>
    6ee8:	|  |   move.w #1,322(sp)
	if (headerBad) {
    6eee:	|  '-> tst.w 322(sp)
    6ef2:	|  ,-- beq.s 6f4a <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6ef4:	|  |   move.l 1c7e0 <DOSBase>,d0
    6efa:	|  |   movea.l d0,a6
    6efc:	|  |   jsr -60(a6)
    6f00:	|  |   move.l d0,174(sp)
    6f04:	|  |   move.l 174(sp),d0
    6f08:	|  |   move.l d0,170(sp)
    6f0c:	|  |   move.l #100951,166(sp)
    6f14:	|  |   moveq #31,d0
    6f16:	|  |   move.l d0,162(sp)
    6f1a:	|  |   move.l 1c7e0 <DOSBase>,d0
    6f20:	|  |   movea.l d0,a6
    6f22:	|  |   move.l 170(sp),d1
    6f26:	|  |   move.l 166(sp),d2
    6f2a:	|  |   move.l 162(sp),d3
    6f2e:	|  |   jsr -48(a6)
    6f32:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6f36:	|  |   pea 18a57 <PutChar+0xee1>
    6f3c:	|  |   jsr 170d4 <KPrintF>
    6f42:	|  |   addq.l #4,sp
		return NULL;
    6f44:	|  |   moveq #0,d0
    6f46:	+--|-- bra.w 70a2 <openAndVerify+0x366>
	}
	FGetC (fp);
    6f4a:	|  '-> move.l 306(sp),254(sp)
    6f50:	|      move.l 1c7e0 <DOSBase>,d0
    6f56:	|      movea.l d0,a6
    6f58:	|      move.l 254(sp),d1
    6f5c:	|      jsr -306(a6)
    6f60:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6f64:	|      nop
    6f66:	|  ,-> move.l 306(sp),246(sp)
    6f6c:	|  |   move.l 1c7e0 <DOSBase>,d0
    6f72:	|  |   movea.l d0,a6
    6f74:	|  |   move.l 246(sp),d1
    6f78:	|  |   jsr -306(a6)
    6f7c:	|  |   move.l d0,242(sp)
    6f80:	|  |   move.l 242(sp),d0
    6f84:	|  '-- bne.s 6f66 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    6f86:	|      move.l 306(sp),238(sp)
    6f8c:	|      move.l 1c7e0 <DOSBase>,d0
    6f92:	|      movea.l d0,a6
    6f94:	|      move.l 238(sp),d1
    6f98:	|      jsr -306(a6)
    6f9c:	|      move.l d0,234(sp)
    6fa0:	|      move.l 234(sp),d0
    6fa4:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    6fa8:	|      move.l 306(sp),226(sp)
    6fae:	|      move.l 1c7e0 <DOSBase>,d0
    6fb4:	|      movea.l d0,a6
    6fb6:	|      move.l 226(sp),d1
    6fba:	|      jsr -306(a6)
    6fbe:	|      move.l d0,222(sp)
    6fc2:	|      move.l 222(sp),d0
    6fc6:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6fca:	|      move.l 230(sp),d0
    6fce:	|      lsl.l #8,d0
    6fd0:	|      add.l 218(sp),d0
    6fd4:	|      movea.l 344(sp),a0
    6fd8:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6fda:	|      movea.l 344(sp),a0
    6fde:	|      move.l (a0),d0
    6fe0:	|      cmpi.l #514,d0
    6fe6:	|  ,-- ble.s 703c <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6fe8:	|  |   move.l 1c7e0 <DOSBase>,d0
    6fee:	|  |   movea.l d0,a6
    6ff0:	|  |   jsr -60(a6)
    6ff4:	|  |   move.l d0,194(sp)
    6ff8:	|  |   move.l 194(sp),d0
    6ffc:	|  |   move.l d0,190(sp)
    7000:	|  |   move.l #100978,186(sp)
    7008:	|  |   moveq #100,d1
    700a:	|  |   move.l d1,182(sp)
    700e:	|  |   move.l 1c7e0 <DOSBase>,d0
    7014:	|  |   movea.l d0,a6
    7016:	|  |   move.l 190(sp),d1
    701a:	|  |   move.l 186(sp),d2
    701e:	|  |   move.l 182(sp),d3
    7022:	|  |   jsr -48(a6)
    7026:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    702a:	|  |   pea 18a72 <PutChar+0xefc>
    7030:	|  |   jsr 170d4 <KPrintF>
    7036:	|  |   addq.l #4,sp
		return NULL;
    7038:	|  |   moveq #0,d0
    703a:	+--|-- bra.s 70a2 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    703c:	|  '-> movea.l 344(sp),a0
    7040:	|      move.l (a0),d0
    7042:	|      cmpi.l #257,d0
    7048:	|  ,-- bgt.s 709e <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    704a:	|  |   move.l 1c7e0 <DOSBase>,d0
    7050:	|  |   movea.l d0,a6
    7052:	|  |   jsr -60(a6)
    7056:	|  |   move.l d0,214(sp)
    705a:	|  |   move.l 214(sp),d0
    705e:	|  |   move.l d0,210(sp)
    7062:	|  |   move.l #101047,206(sp)
    706a:	|  |   moveq #100,d0
    706c:	|  |   move.l d0,202(sp)
    7070:	|  |   move.l 1c7e0 <DOSBase>,d0
    7076:	|  |   movea.l d0,a6
    7078:	|  |   move.l 210(sp),d1
    707c:	|  |   move.l 206(sp),d2
    7080:	|  |   move.l 202(sp),d3
    7084:	|  |   jsr -48(a6)
    7088:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    708c:	|  |   pea 18ab7 <PutChar+0xf41>
    7092:	|  |   jsr 170d4 <KPrintF>
    7098:	|  |   addq.l #4,sp
		return NULL;
    709a:	|  |   moveq #0,d0
    709c:	+--|-- bra.s 70a2 <openAndVerify+0x366>
	}
	return fp;
    709e:	|  '-> move.l 306(sp),d0
}
    70a2:	'----> movem.l (sp)+,d2-d3/a6
    70a6:	       lea 312(sp),sp
    70aa:	       rts

000070ac <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    70ac:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    70ae:	          move.l #116592,(sp)
	while (* huntAndDestroy) {
    70b4:	   ,----- bra.s 70e0 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    70b6:	,--|----> movea.l (sp),a0
    70b8:	|  |      move.l (a0),d0
    70ba:	|  |      cmp.l 8(sp),d0
    70be:	|  |  ,-- bne.s 70d6 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    70c0:	|  |  |   movea.l (sp),a0
    70c2:	|  |  |   movea.l (a0),a0
    70c4:	|  |  |   move.l 44(a0),d0
    70c8:	|  |  |   movea.l (sp),a0
    70ca:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    70cc:	|  |  |   movea.l 8(sp),a0
    70d0:	|  |  |   clr.l 44(a0)
    70d4:	|  +--|-- bra.s 70e0 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    70d6:	|  |  '-> movea.l (sp),a0
    70d8:	|  |      move.l (a0),d0
    70da:	|  |      moveq #44,d1
    70dc:	|  |      add.l d0,d1
    70de:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    70e0:	|  '----> movea.l (sp),a0
    70e2:	|         move.l (a0),d0
    70e4:	'-------- bne.s 70b6 <pauseFunction+0xa>
		}
	}
}
    70e6:	          nop
    70e8:	          nop
    70ea:	          addq.l #4,sp
    70ec:	          rts

000070ee <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    70ee:	move.l 1c770 <allRunningFunctions>,d0
    70f4:	movea.l 4(sp),a0
    70f8:	move.l d0,44(a0)
	allRunningFunctions = fun;
    70fc:	move.l 4(sp),1c770 <allRunningFunctions>
}
    7104:	nop
    7106:	rts

00007108 <runSludge>:

BOOL runSludge () {
    7108:	                   lea -12(sp),sp
    710c:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    710e:	                   move.l 1c770 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    7116:	      ,----------- bra.s 7192 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    7118:	   ,--|----------> movea.l 12(sp),a0
    711c:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    7122:	   |  |            movea.l 12(sp),a0
    7126:	   |  |            move.b 56(a0),d0
    712a:	   |  |  ,-------- bne.s 718c <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    712c:	   |  |  |         movea.l 12(sp),a0
    7130:	   |  |  |         move.l 12(a0),d0
    7134:	   |  |  |  ,----- beq.s 715e <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    7136:	   |  |  |  |      movea.l 12(sp),a0
    713a:	   |  |  |  |      move.l 12(a0),d0
    713e:	   |  |  |  |  ,-- bpl.s 714a <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    7140:	   |  |  |  |  |   movea.l 12(sp),a0
    7144:	   |  |  |  |  |   clr.l 12(a0)
    7148:	   |  |  +--|--|-- bra.s 718c <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    714a:	   |  |  |  |  '-> movea.l 12(sp),a0
    714e:	   |  |  |  |      move.l 12(a0),d0
    7152:	   |  |  |  |      subq.l #1,d0
    7154:	   |  |  |  |      movea.l 12(sp),a0
    7158:	   |  |  |  |      move.l d0,12(a0)
    715c:	   |  |  +--|----- bra.s 718c <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    715e:	   |  |  |  '----> movea.l 12(sp),a0
    7162:	   |  |  |         move.w 50(a0),d0
    7166:	   |  |  |     ,-- beq.s 7176 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7168:	   |  |  |     |   movea.l 12(sp),a0
    716c:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    7170:	   |  |  |     |   jsr 3ef2 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    7176:	   |  |  |     '-> move.l 12(sp),-(sp)
    717a:	   |  |  |         jsr 50d6 <continueFunction>
    7180:	   |  |  |         addq.l #4,sp
    7182:	   |  |  |         tst.w d0
    7184:	   |  |  +-------- bne.s 718c <runSludge+0x84>
					return FALSE;
    7186:	   |  |  |         clr.w d0
    7188:	,--|--|--|-------- bra.w 7218 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    718c:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    7192:	|  |  '----------> tst.l 12(sp)
    7196:	|  '-------------- bne.s 7118 <runSludge+0x10>
	}

	if (loadNow) {
    7198:	|                  move.l 1c7a4 <loadNow>,d0
    719e:	|        ,-------- beq.s 7216 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    71a0:	|        |         movea.l 1c7a4 <loadNow>,a0
    71a6:	|        |         move.b (a0),d0
    71a8:	|        |         cmpi.b #58,d0
    71ac:	|        |  ,----- bne.s 71e0 <runSludge+0xd8>
			saveGame (loadNow + 1);
    71ae:	|        |  |      move.l 1c7a4 <loadNow>,d0
    71b4:	|        |  |      addq.l #1,d0
    71b6:	|        |  |      move.l d0,-(sp)
    71b8:	|        |  |      jsr c5ac <saveGame>
    71be:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    71c0:	|        |  |      movea.l 1c89e <saverFunc>,a0
    71c6:	|        |  |      lea 28(a0),a0
    71ca:	|        |  |      pea 1 <_start+0x1>
    71ce:	|        |  |      pea 1 <_start+0x1>
    71d2:	|        |  |      move.l a0,-(sp)
    71d4:	|        |  |      jsr 14f02 <setVariable>
    71da:	|        |  |      lea 12(sp),sp
    71de:	|        |  |  ,-- bra.s 71f8 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    71e0:	|        |  '--|-> move.l 1c7a4 <loadNow>,d0
    71e6:	|        |     |   move.l d0,-(sp)
    71e8:	|        |     |   jsr c0f4 <loadGame>
    71ee:	|        |     |   addq.l #4,sp
    71f0:	|        |     |   tst.w d0
    71f2:	|        |     +-- bne.s 71f8 <runSludge+0xf0>
    71f4:	|        |     |   clr.w d0
    71f6:	+--------|-----|-- bra.s 7218 <runSludge+0x110>
		}
		FreeVec(loadNow);
    71f8:	|        |     '-> move.l 1c7a4 <loadNow>,8(sp)
    7200:	|        |         move.l 1c7d8 <SysBase>,d0
    7206:	|        |         movea.l d0,a6
    7208:	|        |         movea.l 8(sp),a1
    720c:	|        |         jsr -690(a6)
		loadNow = NULL;
    7210:	|        |         clr.l 1c7a4 <loadNow>
	}

	return TRUE;
    7216:	|        '-------> moveq #1,d0
}
    7218:	'----------------> movea.l (sp)+,a6
    721a:	                   lea 12(sp),sp
    721e:	                   rts

00007220 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    7220:	movea.l 1c148 <currentEvents>,a0
    7226:	move.l (a0),d0
    7228:	move.l 4(sp),-(sp)
    722c:	move.l d0,-(sp)
    722e:	jsr 8d0 <put2bytes>
    7234:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    7236:	movea.l 1c148 <currentEvents>,a0
    723c:	move.l 4(a0),d0
    7240:	move.l 4(sp),-(sp)
    7244:	move.l d0,-(sp)
    7246:	jsr 8d0 <put2bytes>
    724c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    724e:	movea.l 1c148 <currentEvents>,a0
    7254:	move.l 8(a0),d0
    7258:	move.l 4(sp),-(sp)
    725c:	move.l d0,-(sp)
    725e:	jsr 8d0 <put2bytes>
    7264:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7266:	movea.l 1c148 <currentEvents>,a0
    726c:	move.l 12(a0),d0
    7270:	move.l 4(sp),-(sp)
    7274:	move.l d0,-(sp)
    7276:	jsr 8d0 <put2bytes>
    727c:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    727e:	movea.l 1c148 <currentEvents>,a0
    7284:	move.l 16(a0),d0
    7288:	move.l 4(sp),-(sp)
    728c:	move.l d0,-(sp)
    728e:	jsr 8d0 <put2bytes>
    7294:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    7296:	movea.l 1c148 <currentEvents>,a0
    729c:	move.l 20(a0),d0
    72a0:	move.l 4(sp),-(sp)
    72a4:	move.l d0,-(sp)
    72a6:	jsr 8d0 <put2bytes>
    72ac:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    72ae:	movea.l 1c148 <currentEvents>,a0
    72b4:	move.l 24(a0),d0
    72b8:	move.l 4(sp),-(sp)
    72bc:	move.l d0,-(sp)
    72be:	jsr 8d0 <put2bytes>
    72c4:	addq.l #8,sp
}
    72c6:	nop
    72c8:	rts

000072ca <sludgeDisplay>:

void sludgeDisplay () {					
    72ca:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    72cc:	move.l #14675968,(sp)
	displayCursor();
    72d2:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    72d8:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    72de:	jsr 29ba <CstRestoreScreen>
	drawPeople();
    72e4:	jsr 9e90 <drawPeople>
	CstSwapBuffer();
    72ea:	jsr 35a0 <CstSwapBuffer>
}
    72f0:	nop
    72f2:	addq.l #4,sp
    72f4:	rts

000072f6 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    72f6:	      ,-- bra.s 7316 <stackSetByIndex+0x20>
		vS = vS->next;
    72f8:	,-----|-> movea.l 4(sp),a0
    72fc:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    7302:	|     +-- bne.s 7316 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    7304:	|     |   pea 18afe <PutChar+0xf88>
    730a:	|     |   jsr 170d4 <KPrintF>
    7310:	|     |   addq.l #4,sp
			return FALSE;
    7312:	|     |   clr.w d0
    7314:	|  ,--|-- bra.s 7338 <stackSetByIndex+0x42>
	while (theIndex--) {
    7316:	|  |  '-> move.l 8(sp),d0
    731a:	|  |      move.l d0,d1
    731c:	|  |      subq.l #1,d1
    731e:	|  |      move.l d1,8(sp)
    7322:	|  |      tst.l d0
    7324:	'--|----- bne.s 72f8 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    7326:	   |      move.l 4(sp),d0
    732a:	   |      move.l d0,-(sp)
    732c:	   |      move.l 16(sp),-(sp)
    7330:	   |      jsr 14aca <copyVariable>
    7336:	   |      addq.l #8,sp
}
    7338:	   '----> rts

0000733a <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    733a:	             lea -24(sp),sp
    733e:	             move.l a6,-(sp)
    7340:	             move.l 48(sp),d0
    7344:	             move.w d0,d0
    7346:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    734a:	             moveq #58,d0
    734c:	             move.l d0,24(sp)
    7350:	             clr.l 20(sp)
    7354:	             move.l 1c7d8 <SysBase>,d0
    735a:	             movea.l d0,a6
    735c:	             move.l 24(sp),d0
    7360:	             move.l 20(sp),d1
    7364:	             jsr -684(a6)
    7368:	             move.l d0,16(sp)
    736c:	             move.l 16(sp),d0
    7370:	             move.l d0,12(sp)
	if(!newFunc) {
    7374:	         ,-- bne.s 738a <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    7376:	         |   pea 18b17 <PutChar+0xfa1>
    737c:	         |   jsr 170d4 <KPrintF>
    7382:	         |   addq.l #4,sp
		return 0;
    7384:	         |   moveq #0,d0
    7386:	,--------|-- bra.w 74a0 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    738a:	|        '-> move.l 32(sp),d0
    738e:	|            movea.l 12(sp),a0
    7392:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    7394:	|            move.l 12(sp),-(sp)
    7398:	|            jsr 6aaa <loadFunctionCode>
    739e:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    73a0:	|            movea.l 12(sp),a0
    73a4:	|            move.l 16(a0),d1
    73a8:	|            move.l 36(sp),d0
    73ac:	|            cmp.l d1,d0
    73ae:	|        ,-- beq.s 73c4 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    73b0:	|        |   pea 18b40 <PutChar+0xfca>
    73b6:	|        |   jsr 170d4 <KPrintF>
    73bc:	|        |   addq.l #4,sp
		return NULL; 
    73be:	|        |   moveq #0,d0
    73c0:	+--------|-- bra.w 74a0 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    73c4:	|        '-> movea.l 12(sp),a0
    73c8:	|            move.l 16(a0),d1
    73cc:	|            movea.l 12(sp),a0
    73d0:	|            move.l 8(a0),d0
    73d4:	|            cmp.l d1,d0
    73d6:	|  ,-------- bge.s 7440 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    73d8:	|  |         pea 18b5c <PutChar+0xfe6>
    73de:	|  |         jsr 170d4 <KPrintF>
    73e4:	|  |         addq.l #4,sp
		return NULL; 
    73e6:	|  |         moveq #0,d0
    73e8:	+--|-------- bra.w 74a0 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    73ec:	|  |  ,----> movea.l 44(sp),a0
    73f0:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    73f4:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    73f8:	|  |  |      movea.l 44(sp),a0
    73fc:	|  |  |      move.l (a0),d0
    73fe:	|  |  |  ,-- bne.s 7414 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7400:	|  |  |  |   pea 18b86 <PutChar+0x1010>
    7406:	|  |  |  |   jsr 170d4 <KPrintF>
    740c:	|  |  |  |   addq.l #4,sp
			return NULL;
    740e:	|  |  |  |   moveq #0,d0
    7410:	+--|--|--|-- bra.w 74a0 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7414:	|  |  |  '-> movea.l 12(sp),a0
    7418:	|  |  |      move.l 20(a0),d1
    741c:	|  |  |      move.l 36(sp),d0
    7420:	|  |  |      lsl.l #3,d0
    7422:	|  |  |      add.l d0,d1
    7424:	|  |  |      move.l 8(sp),d0
    7428:	|  |  |      move.l d1,-(sp)
    742a:	|  |  |      move.l d0,-(sp)
    742c:	|  |  |      jsr 14aca <copyVariable>
    7432:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7434:	|  |  |      move.l 44(sp),-(sp)
    7438:	|  |  |      jsr 14f94 <trimStack>
    743e:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    7440:	|  '--|----> tst.l 36(sp)
    7444:	|     '----- bne.s 73ec <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    7446:	|            movea.l 12(sp),a0
    744a:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    744e:	|            movea.l 12(sp),a0
    7452:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    7456:	|            movea.l 12(sp),a0
    745a:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    7460:	|            movea.l 12(sp),a0
    7464:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    746a:	|            movea.l 12(sp),a0
    746e:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    7472:	|            movea.l 12(sp),a0
    7476:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    747a:	|            movea.l 12(sp),a0
    747e:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    7482:	|            movea.l 12(sp),a0
    7486:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    748a:	|            movea.l 12(sp),a0
    748e:	|            clr.l 28(a0)

	restartFunction (newFunc);
    7492:	|            move.l 12(sp),-(sp)
    7496:	|            jsr 70ee <restartFunction>
    749c:	|            addq.l #4,sp
	return 1;
    749e:	|            moveq #1,d0
}
    74a0:	'----------> movea.l (sp)+,a6
    74a2:	             lea 24(sp),sp
    74a6:	             rts

000074a8 <unfreezeSubs>:

void unfreezeSubs () {
    74a8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    74aa:	          move.l 1c770 <allRunningFunctions>,(sp)

	while (thisFunction) {
    74b0:	   ,----- bra.s 74ce <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    74b2:	,--|----> movea.l (sp),a0
    74b4:	|  |      move.b 56(a0),d0
    74b8:	|  |  ,-- beq.s 74c8 <unfreezeSubs+0x20>
    74ba:	|  |  |   movea.l (sp),a0
    74bc:	|  |  |   move.b 56(a0),d0
    74c0:	|  |  |   subq.b #1,d0
    74c2:	|  |  |   movea.l (sp),a0
    74c4:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    74c8:	|  |  '-> movea.l (sp),a0
    74ca:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    74ce:	|  '----> tst.l (sp)
    74d0:	'-------- bne.s 74b2 <unfreezeSubs+0xa>
	}
}
    74d2:	          nop
    74d4:	          nop
    74d6:	          addq.l #4,sp
    74d8:	          rts

000074da <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    74da:	clr.w 1c154 <sliceBusy>
}
    74e0:	nop
    74e2:	rts

000074e4 <getNumberedString>:

char * getNumberedString (int value) {
    74e4:	       lea -56(sp),sp
    74e8:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    74ec:	       move.w 1c154 <sliceBusy>,d0
    74f2:	   ,-- beq.s 753c <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    74f4:	   |   move.l 1c7e0 <DOSBase>,d0
    74fa:	   |   movea.l d0,a6
    74fc:	   |   jsr -60(a6)
    7500:	   |   move.l d0,28(sp)
    7504:	   |   move.l 28(sp),d0
    7508:	   |   move.l d0,24(sp)
    750c:	   |   move.l #101329,20(sp)
    7514:	   |   moveq #76,d0
    7516:	   |   move.l d0,16(sp)
    751a:	   |   move.l 1c7e0 <DOSBase>,d0
    7520:	   |   movea.l d0,a6
    7522:	   |   move.l 24(sp),d1
    7526:	   |   move.l 20(sp),d2
    752a:	   |   move.l 16(sp),d3
    752e:	   |   jsr -48(a6)
    7532:	   |   move.l d0,12(sp)
		return NULL;
    7536:	   |   moveq #0,d0
    7538:	,--|-- bra.w 75d8 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    753c:	|  '-> move.l 1c7c0 <bigDataFile>,64(sp)
    7544:	|      move.l 72(sp),d0
    7548:	|      add.l d0,d0
    754a:	|      add.l d0,d0
    754c:	|      move.l d0,d1
    754e:	|      move.l 1c7cc <startOfTextIndex>,d0
    7554:	|      add.l d1,d0
    7556:	|      move.l d0,60(sp)
    755a:	|      moveq #-1,d0
    755c:	|      move.l d0,56(sp)
    7560:	|      move.l 1c7e0 <DOSBase>,d0
    7566:	|      movea.l d0,a6
    7568:	|      move.l 64(sp),d1
    756c:	|      move.l 60(sp),d2
    7570:	|      move.l 56(sp),d3
    7574:	|      jsr -66(a6)
    7578:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    757c:	|      move.l 1c7c0 <bigDataFile>,d0
    7582:	|      move.l d0,-(sp)
    7584:	|      jsr 718 <get4bytes>
    758a:	|      addq.l #4,sp
    758c:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7590:	|      move.l 1c7c0 <bigDataFile>,48(sp)
    7598:	|      move.l 72(sp),44(sp)
    759e:	|      moveq #-1,d0
    75a0:	|      move.l d0,40(sp)
    75a4:	|      move.l 1c7e0 <DOSBase>,d0
    75aa:	|      movea.l d0,a6
    75ac:	|      move.l 48(sp),d1
    75b0:	|      move.l 44(sp),d2
    75b4:	|      move.l 40(sp),d3
    75b8:	|      jsr -66(a6)
    75bc:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    75c0:	|      move.l 1c7c0 <bigDataFile>,d0
    75c6:	|      move.l d0,-(sp)
    75c8:	|      jsr b02 <readString>
    75ce:	|      addq.l #4,sp
    75d0:	|      move.l d0,32(sp)
	
	return s;
    75d4:	|      move.l 32(sp),d0
}
    75d8:	'----> movem.l (sp)+,d2-d3/a6
    75dc:	       lea 56(sp),sp
    75e0:	       rts

000075e2 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    75e2:	       lea -32(sp),sp
    75e6:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    75ea:	       move.w 1c154 <sliceBusy>,d0
    75f0:	   ,-- beq.s 760c <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    75f2:	   |   pea 18c1e <PutChar+0x10a8>
    75f8:	   |   pea 18c3c <PutChar+0x10c6>
    75fe:	   |   jsr 170d4 <KPrintF>
    7604:	   |   addq.l #8,sp
		return 0;
    7606:	   |   moveq #0,d0
    7608:	,--|-- bra.w 76a0 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    760c:	|  '-> move.l 1c7c0 <bigDataFile>,40(sp)
    7614:	|      move.l 48(sp),d0
    7618:	|      add.l d0,d0
    761a:	|      add.l d0,d0
    761c:	|      move.l d0,d1
    761e:	|      move.l 1c7c8 <startOfDataIndex>,d0
    7624:	|      add.l d1,d0
    7626:	|      move.l d0,36(sp)
    762a:	|      moveq #-1,d0
    762c:	|      move.l d0,32(sp)
    7630:	|      move.l 1c7e0 <DOSBase>,d0
    7636:	|      movea.l d0,a6
    7638:	|      move.l 40(sp),d1
    763c:	|      move.l 36(sp),d2
    7640:	|      move.l 32(sp),d3
    7644:	|      jsr -66(a6)
    7648:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    764c:	|      move.l 1c7c0 <bigDataFile>,24(sp)
    7654:	|      move.l 1c7c0 <bigDataFile>,d0
    765a:	|      move.l d0,-(sp)
    765c:	|      jsr 718 <get4bytes>
    7662:	|      addq.l #4,sp
    7664:	|      move.l d0,20(sp)
    7668:	|      clr.l 16(sp)
    766c:	|      move.l 1c7e0 <DOSBase>,d0
    7672:	|      movea.l d0,a6
    7674:	|      move.l 24(sp),d1
    7678:	|      move.l 20(sp),d2
    767c:	|      move.l 16(sp),d3
    7680:	|      jsr -66(a6)
    7684:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7688:	|      move.w #1,1c154 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7690:	|      move.l 1c7c0 <bigDataFile>,d0
    7696:	|      move.l d0,-(sp)
    7698:	|      jsr 718 <get4bytes>
    769e:	|      addq.l #4,sp
}
    76a0:	'----> movem.l (sp)+,d2-d3/a6
    76a4:	       lea 32(sp),sp
    76a8:	       rts

000076aa <openObjectSlice>:

BOOL openObjectSlice (int num) {
    76aa:	       lea -32(sp),sp
    76ae:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    76b2:	       move.w 1c154 <sliceBusy>,d0
    76b8:	   ,-- beq.s 76d4 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    76ba:	   |   pea 18c1e <PutChar+0x10a8>
    76c0:	   |   pea 18c3c <PutChar+0x10c6>
    76c6:	   |   jsr 170d4 <KPrintF>
    76cc:	   |   addq.l #8,sp
        return FALSE;
    76ce:	   |   clr.w d0
    76d0:	,--|-- bra.w 7760 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    76d4:	|  '-> move.l 1c7c0 <bigDataFile>,40(sp)
    76dc:	|      move.l 48(sp),d0
    76e0:	|      add.l d0,d0
    76e2:	|      add.l d0,d0
    76e4:	|      move.l d0,d1
    76e6:	|      move.l 1c7d4 <startOfObjectIndex>,d0
    76ec:	|      add.l d1,d0
    76ee:	|      move.l d0,36(sp)
    76f2:	|      moveq #-1,d0
    76f4:	|      move.l d0,32(sp)
    76f8:	|      move.l 1c7e0 <DOSBase>,d0
    76fe:	|      movea.l d0,a6
    7700:	|      move.l 40(sp),d1
    7704:	|      move.l 36(sp),d2
    7708:	|      move.l 32(sp),d3
    770c:	|      jsr -66(a6)
    7710:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    7714:	|      move.l 1c7c0 <bigDataFile>,24(sp)
    771c:	|      move.l 1c7c0 <bigDataFile>,d0
    7722:	|      move.l d0,-(sp)
    7724:	|      jsr 718 <get4bytes>
    772a:	|      addq.l #4,sp
    772c:	|      move.l d0,20(sp)
    7730:	|      moveq #-1,d0
    7732:	|      move.l d0,16(sp)
    7736:	|      move.l 1c7e0 <DOSBase>,d0
    773c:	|      movea.l d0,a6
    773e:	|      move.l 24(sp),d1
    7742:	|      move.l 20(sp),d2
    7746:	|      move.l 16(sp),d3
    774a:	|      jsr -66(a6)
    774e:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7752:	|      move.w #1,1c154 <sliceBusy>
    775a:	|      move.w 1c154 <sliceBusy>,d0
}
    7760:	'----> movem.l (sp)+,d2-d3/a6
    7764:	       lea 32(sp),sp
    7768:	       rts

0000776a <openSubSlice>:

BOOL openSubSlice (int num) {
    776a:	       lea -32(sp),sp
    776e:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7772:	       move.w 1c154 <sliceBusy>,d0
    7778:	   ,-- beq.s 7794 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    777a:	   |   pea 18c1e <PutChar+0x10a8>
    7780:	   |   pea 18c3c <PutChar+0x10c6>
    7786:	   |   jsr 170d4 <KPrintF>
    778c:	   |   addq.l #8,sp
		return FALSE;
    778e:	   |   clr.w d0
    7790:	,--|-- bra.w 7820 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7794:	|  '-> move.l 1c7c0 <bigDataFile>,40(sp)
    779c:	|      move.l 48(sp),d0
    77a0:	|      add.l d0,d0
    77a2:	|      add.l d0,d0
    77a4:	|      move.l d0,d1
    77a6:	|      move.l 1c7d0 <startOfSubIndex>,d0
    77ac:	|      add.l d1,d0
    77ae:	|      move.l d0,36(sp)
    77b2:	|      moveq #-1,d0
    77b4:	|      move.l d0,32(sp)
    77b8:	|      move.l 1c7e0 <DOSBase>,d0
    77be:	|      movea.l d0,a6
    77c0:	|      move.l 40(sp),d1
    77c4:	|      move.l 36(sp),d2
    77c8:	|      move.l 32(sp),d3
    77cc:	|      jsr -66(a6)
    77d0:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    77d4:	|      move.l 1c7c0 <bigDataFile>,24(sp)
    77dc:	|      move.l 1c7c0 <bigDataFile>,d0
    77e2:	|      move.l d0,-(sp)
    77e4:	|      jsr 718 <get4bytes>
    77ea:	|      addq.l #4,sp
    77ec:	|      move.l d0,20(sp)
    77f0:	|      moveq #-1,d0
    77f2:	|      move.l d0,16(sp)
    77f6:	|      move.l 1c7e0 <DOSBase>,d0
    77fc:	|      movea.l d0,a6
    77fe:	|      move.l 24(sp),d1
    7802:	|      move.l 20(sp),d2
    7806:	|      move.l 16(sp),d3
    780a:	|      jsr -66(a6)
    780e:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7812:	|      move.w #1,1c154 <sliceBusy>
    781a:	|      move.w 1c154 <sliceBusy>,d0
}
    7820:	'----> movem.l (sp)+,d2-d3/a6
    7824:	       lea 32(sp),sp
    7828:	       rts

0000782a <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    782a:	       lea -180(sp),sp
    782e:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7832:	       tst.l 196(sp)
    7836:	,----- beq.s 7876 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7838:	|      move.l 196(sp),1c7c0 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7840:	|      move.l 196(sp),168(sp)
    7846:	|      clr.l 164(sp)
    784a:	|      clr.l 160(sp)
    784e:	|      move.l 1c7e0 <DOSBase>,d0
    7854:	|      movea.l d0,a6
    7856:	|      move.l 168(sp),d1
    785a:	|      move.l 164(sp),d2
    785e:	|      move.l 160(sp),d3
    7862:	|      jsr -66(a6)
    7866:	|      move.l d0,156(sp)
    786a:	|      move.l 156(sp),d0
    786e:	|      move.l d0,1c7c4 <startIndex>
    7874:	|  ,-- bra.s 78b0 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7876:	'--|-> move.l 1c7c0 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    787e:	   |   move.l 196(sp),184(sp)
    7884:	   |   move.l 1c7c4 <startIndex>,d0
    788a:	   |   move.l d0,180(sp)
    788e:	   |   moveq #-1,d0
    7890:	   |   move.l d0,176(sp)
    7894:	   |   move.l 1c7e0 <DOSBase>,d0
    789a:	   |   movea.l d0,a6
    789c:	   |   move.l 184(sp),d1
    78a0:	   |   move.l 180(sp),d2
    78a4:	   |   move.l 176(sp),d3
    78a8:	   |   jsr -66(a6)
    78ac:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    78b0:	   '-> clr.w 1c154 <sliceBusy>

	if (skipBefore > numLanguages) {
    78b6:	       move.l 204(sp),d0
    78ba:	       cmp.l 200(sp),d0
    78be:	   ,-- bls.s 78d2 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    78c0:	   |   pea 18c56 <PutChar+0x10e0>
    78c6:	   |   jsr 170d4 <KPrintF>
    78cc:	   |   addq.l #4,sp
		skipBefore = 0;
    78ce:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    78d2:	   '-> move.l 200(sp),d0
    78d6:	       sub.l 204(sp),d0
    78da:	       move.l d0,188(sp)
	while (skipBefore) {
    78de:	   ,-- bra.s 791c <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    78e0:	,--|-> move.l 196(sp),24(sp)
    78e6:	|  |   move.l 196(sp),-(sp)
    78ea:	|  |   jsr 718 <get4bytes>
    78f0:	|  |   addq.l #4,sp
    78f2:	|  |   move.l d0,20(sp)
    78f6:	|  |   moveq #-1,d0
    78f8:	|  |   move.l d0,16(sp)
    78fc:	|  |   move.l 1c7e0 <DOSBase>,d0
    7902:	|  |   movea.l d0,a6
    7904:	|  |   move.l 24(sp),d1
    7908:	|  |   move.l 20(sp),d2
    790c:	|  |   move.l 16(sp),d3
    7910:	|  |   jsr -66(a6)
    7914:	|  |   move.l d0,12(sp)
		skipBefore --;
    7918:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    791c:	|  '-> tst.l 204(sp)
    7920:	'----- bne.s 78e0 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7922:	       move.l 196(sp),152(sp)
    7928:	       clr.l 148(sp)
    792c:	       clr.l 144(sp)
    7930:	       move.l 1c7e0 <DOSBase>,d0
    7936:	       movea.l d0,a6
    7938:	       move.l 152(sp),d1
    793c:	       move.l 148(sp),d2
    7940:	       move.l 144(sp),d3
    7944:	       jsr -66(a6)
    7948:	       move.l d0,140(sp)
    794c:	       move.l 140(sp),d0
    7950:	       addq.l #4,d0
    7952:	       move.l d0,1c7cc <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7958:	       move.l 196(sp),136(sp)
    795e:	       move.l 196(sp),-(sp)
    7962:	       jsr 718 <get4bytes>
    7968:	       addq.l #4,sp
    796a:	       move.l d0,132(sp)
    796e:	       moveq #-1,d0
    7970:	       move.l d0,128(sp)
    7974:	       move.l 1c7e0 <DOSBase>,d0
    797a:	       movea.l d0,a6
    797c:	       move.l 136(sp),d1
    7980:	       move.l 132(sp),d2
    7984:	       move.l 128(sp),d3
    7988:	       jsr -66(a6)
    798c:	       move.l d0,124(sp)

	while (skipAfter) {
    7990:	   ,-- bra.s 79ce <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7992:	,--|-> move.l 196(sp),40(sp)
    7998:	|  |   move.l 196(sp),-(sp)
    799c:	|  |   jsr 718 <get4bytes>
    79a2:	|  |   addq.l #4,sp
    79a4:	|  |   move.l d0,36(sp)
    79a8:	|  |   moveq #-1,d0
    79aa:	|  |   move.l d0,32(sp)
    79ae:	|  |   move.l 1c7e0 <DOSBase>,d0
    79b4:	|  |   movea.l d0,a6
    79b6:	|  |   move.l 40(sp),d1
    79ba:	|  |   move.l 36(sp),d2
    79be:	|  |   move.l 32(sp),d3
    79c2:	|  |   jsr -66(a6)
    79c6:	|  |   move.l d0,28(sp)
		skipAfter --;
    79ca:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    79ce:	|  '-> tst.l 188(sp)
    79d2:	'----- bne.s 7992 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    79d4:	       move.l 196(sp),120(sp)
    79da:	       clr.l 116(sp)
    79de:	       clr.l 112(sp)
    79e2:	       move.l 1c7e0 <DOSBase>,d0
    79e8:	       movea.l d0,a6
    79ea:	       move.l 120(sp),d1
    79ee:	       move.l 116(sp),d2
    79f2:	       move.l 112(sp),d3
    79f6:	       jsr -66(a6)
    79fa:	       move.l d0,108(sp)
    79fe:	       move.l 108(sp),d0
    7a02:	       addq.l #4,d0
    7a04:	       move.l d0,1c7d0 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7a0a:	       move.l 196(sp),104(sp)
    7a10:	       move.l 196(sp),-(sp)
    7a14:	       jsr 718 <get4bytes>
    7a1a:	       addq.l #4,sp
    7a1c:	       move.l d0,100(sp)
    7a20:	       clr.l 96(sp)
    7a24:	       move.l 1c7e0 <DOSBase>,d0
    7a2a:	       movea.l d0,a6
    7a2c:	       move.l 104(sp),d1
    7a30:	       move.l 100(sp),d2
    7a34:	       move.l 96(sp),d3
    7a38:	       jsr -66(a6)
    7a3c:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7a40:	       move.l 196(sp),88(sp)
    7a46:	       clr.l 84(sp)
    7a4a:	       clr.l 80(sp)
    7a4e:	       move.l 1c7e0 <DOSBase>,d0
    7a54:	       movea.l d0,a6
    7a56:	       move.l 88(sp),d1
    7a5a:	       move.l 84(sp),d2
    7a5e:	       move.l 80(sp),d3
    7a62:	       jsr -66(a6)
    7a66:	       move.l d0,76(sp)
    7a6a:	       move.l 76(sp),d0
    7a6e:	       addq.l #4,d0
    7a70:	       move.l d0,1c7d4 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7a76:	       move.l 196(sp),72(sp)
    7a7c:	       move.l 196(sp),-(sp)
    7a80:	       jsr 718 <get4bytes>
    7a86:	       addq.l #4,sp
    7a88:	       move.l d0,68(sp)
    7a8c:	       clr.l 64(sp)
    7a90:	       move.l 1c7e0 <DOSBase>,d0
    7a96:	       movea.l d0,a6
    7a98:	       move.l 72(sp),d1
    7a9c:	       move.l 68(sp),d2
    7aa0:	       move.l 64(sp),d3
    7aa4:	       jsr -66(a6)
    7aa8:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7aac:	       move.l 196(sp),56(sp)
    7ab2:	       clr.l 52(sp)
    7ab6:	       clr.l 48(sp)
    7aba:	       move.l 1c7e0 <DOSBase>,d0
    7ac0:	       movea.l d0,a6
    7ac2:	       move.l 56(sp),d1
    7ac6:	       move.l 52(sp),d2
    7aca:	       move.l 48(sp),d3
    7ace:	       jsr -66(a6)
    7ad2:	       move.l d0,44(sp)
    7ad6:	       move.l 44(sp),d0
    7ada:	       move.l d0,1c7c8 <startOfDataIndex>
    7ae0:	       nop
    7ae2:	       movem.l (sp)+,d2-d3/a6
    7ae6:	       lea 180(sp),sp
    7aea:	       rts

00007aec <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7aec:	    lea -20(sp),sp
    7af0:	    move.l a6,-(sp)
    7af2:	    move.l d7,-(sp)
	APTR vbr = 0;
    7af4:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7af8:	    move.w #20090,10(sp)
    7afe:	    move.w #2049,12(sp)
    7b04:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7b0a:	    movea.l 1c7d8 <SysBase>,a0
    7b10:	    move.w 296(a0),d0
    7b14:	    move.w d0,d0
    7b16:	    andi.l #65535,d0
    7b1c:	    moveq #1,d1
    7b1e:	    and.l d1,d0
    7b20:	,-- beq.s 7b4e <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7b22:	|   lea 28(sp),a0
    7b26:	|   lea -18(a0),a0
    7b2a:	|   move.l a0,20(sp)
    7b2e:	|   move.l 1c7d8 <SysBase>,d0
    7b34:	|   movea.l d0,a6
    7b36:	|   move.l 20(sp),d7
    7b3a:	|   exg d7,a5
    7b3c:	|   jsr -30(a6)
    7b40:	|   exg d7,a5
    7b42:	|   move.l d0,16(sp)
    7b46:	|   move.l 16(sp),d0
    7b4a:	|   move.l d0,24(sp)

	return vbr;
    7b4e:	'-> move.l 24(sp),d0
}
    7b52:	    move.l (sp)+,d7
    7b54:	    movea.l (sp)+,a6
    7b56:	    lea 20(sp),sp
    7b5a:	    rts

00007b5c <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    7b5c:	movea.l 1c7fe <VBR>,a0
    7b62:	lea 108(a0),a0
    7b66:	move.l 4(sp),(a0)
}
    7b6a:	nop
    7b6c:	rts

00007b6e <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    7b6e:	movea.l 1c7fe <VBR>,a0
    7b74:	move.l 108(a0),d0
}
    7b78:	rts

00007b7a <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7b7a:	       subq.l #8,sp
    7b7c:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    7b7e:	       pea 18c9f <PutChar+0x1129>
    7b84:	       jsr 170d4 <KPrintF>
    7b8a:	       addq.l #4,sp
	Forbid();
    7b8c:	       move.l 1c7d8 <SysBase>,d0
    7b92:	       movea.l d0,a6
    7b94:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7b98:	       pea 18cb7 <PutChar+0x1141>
    7b9e:	       jsr 170d4 <KPrintF>
    7ba4:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7ba6:	       movea.l 1c7dc <custom>,a0
    7bac:	       move.w 16(a0),d0
    7bb0:	       move.w d0,1c7fc <SystemADKCON>
	SystemInts=custom->intenar;
    7bb6:	       movea.l 1c7dc <custom>,a0
    7bbc:	       move.w 28(a0),d0
    7bc0:	       move.w d0,1c7f8 <SystemInts>
	SystemDMA=custom->dmaconr;
    7bc6:	       movea.l 1c7dc <custom>,a0
    7bcc:	       move.w 2(a0),d0
    7bd0:	       move.w d0,1c7fa <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7bd6:	       movea.l 1c7e4 <GfxBase>,a0
    7bdc:	       move.l 34(a0),d0
    7be0:	       move.l d0,1c806 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7be6:	       pea 18cd5 <PutChar+0x115f>
    7bec:	       jsr 170d4 <KPrintF>
    7bf2:	       addq.l #4,sp
	LoadView(0);
    7bf4:	       clr.l 4(sp)
    7bf8:	       move.l 1c7e4 <GfxBase>,d0
    7bfe:	       movea.l d0,a6
    7c00:	       movea.l 4(sp),a1
    7c04:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7c08:	       pea 18ceb <PutChar+0x1175>
    7c0e:	       jsr 170d4 <KPrintF>
    7c14:	       addq.l #4,sp
	WaitTOF();
    7c16:	       move.l 1c7e4 <GfxBase>,d0
    7c1c:	       movea.l d0,a6
    7c1e:	       jsr -270(a6)
	WaitTOF();
    7c22:	       move.l 1c7e4 <GfxBase>,d0
    7c28:	       movea.l d0,a6
    7c2a:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    7c2e:	       pea 18d00 <PutChar+0x118a>
    7c34:	       jsr 170d4 <KPrintF>
    7c3a:	       addq.l #4,sp
	WaitVbl();
    7c3c:	       jsr 17008 <WaitVbl>
	WaitVbl();
    7c42:	       jsr 17008 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7c48:	       pea 18d15 <PutChar+0x119f>
    7c4e:	       jsr 170d4 <KPrintF>
    7c54:	       addq.l #4,sp
	OwnBlitter();
    7c56:	       move.l 1c7e4 <GfxBase>,d0
    7c5c:	       movea.l d0,a6
    7c5e:	       jsr -456(a6)
	WaitBlit();	
    7c62:	       move.l 1c7e4 <GfxBase>,d0
    7c68:	       movea.l d0,a6
    7c6a:	       jsr -228(a6)
	Disable();
    7c6e:	       move.l 1c7d8 <SysBase>,d0
    7c74:	       movea.l d0,a6
    7c76:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7c7a:	       pea 18d36 <PutChar+0x11c0>
    7c80:	       jsr 170d4 <KPrintF>
    7c86:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7c88:	       movea.l 1c7dc <custom>,a0
    7c8e:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7c94:	       pea 18d4d <PutChar+0x11d7>
    7c9a:	       jsr 170d4 <KPrintF>
    7ca0:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    7ca2:	       clr.l 8(sp)
    7ca6:	   ,-- bra.s 7cc4 <TakeSystem+0x14a>
		custom->color[a]=0;
    7ca8:	,--|-> movea.l 1c7dc <custom>,a0
    7cae:	|  |   move.l 8(sp),d0
    7cb2:	|  |   addi.l #192,d0
    7cb8:	|  |   add.l d0,d0
    7cba:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    7cc0:	|  |   addq.l #1,8(sp)
    7cc4:	|  '-> moveq #31,d0
    7cc6:	|      cmp.l 8(sp),d0
    7cca:	'----- bge.s 7ca8 <TakeSystem+0x12e>

	WaitVbl();
    7ccc:	       jsr 17008 <WaitVbl>
	WaitVbl();
    7cd2:	       jsr 17008 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7cd8:	       pea 18d72 <PutChar+0x11fc>
    7cde:	       jsr 170d4 <KPrintF>
    7ce4:	       addq.l #4,sp
	VBR=GetVBR();
    7ce6:	       jsr 7aec <GetVBR>
    7cec:	       move.l d0,1c7fe <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7cf2:	       jsr 7b6e <GetInterruptHandler>
    7cf8:	       move.l d0,1c802 <SystemIrq>
}
    7cfe:	       nop
    7d00:	       movea.l (sp)+,a6
    7d02:	       addq.l #8,sp
    7d04:	       rts

00007d06 <FreeSystem>:

void FreeSystem() { 
    7d06:	subq.l #4,sp
    7d08:	move.l a6,-(sp)
	WaitVbl();
    7d0a:	jsr 17008 <WaitVbl>
	WaitBlit();
    7d10:	move.l 1c7e4 <GfxBase>,d0
    7d16:	movea.l d0,a6
    7d18:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    7d1c:	movea.l 1c7dc <custom>,a0
    7d22:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7d28:	movea.l 1c7dc <custom>,a0
    7d2e:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7d34:	movea.l 1c7dc <custom>,a0
    7d3a:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    7d40:	move.l 1c802 <SystemIrq>,d0
    7d46:	move.l d0,-(sp)
    7d48:	jsr 7b5c <SetInterruptHandler>
    7d4e:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    7d50:	movea.l 1c7e4 <GfxBase>,a0
    7d56:	move.l 38(a0),d0
    7d5a:	movea.l 1c7dc <custom>,a0
    7d60:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7d64:	movea.l 1c7e4 <GfxBase>,a0
    7d6a:	move.l 50(a0),d0
    7d6e:	movea.l 1c7dc <custom>,a0
    7d74:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    7d78:	movea.l 1c7dc <custom>,a0
    7d7e:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    7d84:	move.w 1c7fa <SystemDMA>,d0
    7d8a:	movea.l 1c7dc <custom>,a0
    7d90:	ori.w #-32768,d0
    7d94:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    7d98:	move.w 1c7fc <SystemADKCON>,d0
    7d9e:	movea.l 1c7dc <custom>,a0
    7da4:	ori.w #-32768,d0
    7da8:	move.w d0,158(a0)

	WaitBlit();	
    7dac:	move.l 1c7e4 <GfxBase>,d0
    7db2:	movea.l d0,a6
    7db4:	jsr -228(a6)
	DisownBlitter();
    7db8:	move.l 1c7e4 <GfxBase>,d0
    7dbe:	movea.l d0,a6
    7dc0:	jsr -462(a6)
	Enable();
    7dc4:	move.l 1c7d8 <SysBase>,d0
    7dca:	movea.l d0,a6
    7dcc:	jsr -126(a6)

	LoadView(ActiView);
    7dd0:	move.l 1c806 <ActiView>,4(sp)
    7dd8:	move.l 1c7e4 <GfxBase>,d0
    7dde:	movea.l d0,a6
    7de0:	movea.l 4(sp),a1
    7de4:	jsr -222(a6)
	WaitTOF();
    7de8:	move.l 1c7e4 <GfxBase>,d0
    7dee:	movea.l d0,a6
    7df0:	jsr -270(a6)
	WaitTOF();
    7df4:	move.l 1c7e4 <GfxBase>,d0
    7dfa:	movea.l d0,a6
    7dfc:	jsr -270(a6)

	Permit();
    7e00:	move.l 1c7d8 <SysBase>,d0
    7e06:	movea.l d0,a6
    7e08:	jsr -138(a6)
}
    7e0c:	nop
    7e0e:	movea.l (sp)+,a6
    7e10:	addq.l #4,sp
    7e12:	rts

00007e14 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7e14:	       lea -132(sp),sp
    7e18:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    7e1c:	       clr.l 140(sp)
    7e20:	   ,-- bra.s 7e26 <main+0x12>
    7e22:	,--|-> addq.l #1,140(sp)
    7e26:	|  '-> cmpi.l #999,140(sp)
    7e2e:	'----- ble.s 7e22 <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    7e30:	       movea.w #4,a0
    7e34:	       move.l (a0),d0
    7e36:	       move.l d0,1c7d8 <SysBase>
	custom = (struct Custom*)0xdff000;	
    7e3c:	       move.l #14675968,1c7dc <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    7e46:	       move.l #101782,136(sp)
    7e4e:	       clr.l 132(sp)
    7e52:	       move.l 1c7d8 <SysBase>,d0
    7e58:	       movea.l d0,a6
    7e5a:	       movea.l 136(sp),a1
    7e5e:	       move.l 132(sp),d0
    7e62:	       jsr -552(a6)
    7e66:	       move.l d0,128(sp)
    7e6a:	       move.l 128(sp),d0
    7e6e:	       move.l d0,1c7e4 <GfxBase>
	if (!GfxBase)
    7e74:	       move.l 1c7e4 <GfxBase>,d0
    7e7a:	   ,-- bne.s 7e90 <main+0x7c>
		Exit(0);
    7e7c:	   |   clr.l 124(sp)
    7e80:	   |   move.l 1c7e0 <DOSBase>,d0
    7e86:	   |   movea.l d0,a6
    7e88:	   |   move.l 124(sp),d1
    7e8c:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    7e90:	   '-> move.l #101799,120(sp)
    7e98:	       clr.l 116(sp)
    7e9c:	       move.l 1c7d8 <SysBase>,d0
    7ea2:	       movea.l d0,a6
    7ea4:	       movea.l 120(sp),a1
    7ea8:	       move.l 116(sp),d0
    7eac:	       jsr -552(a6)
    7eb0:	       move.l d0,112(sp)
    7eb4:	       move.l 112(sp),d0
    7eb8:	       move.l d0,1c7e0 <DOSBase>
	if (!DOSBase)
    7ebe:	       move.l 1c7e0 <DOSBase>,d0
    7ec4:	   ,-- bne.s 7eda <main+0xc6>
		Exit(0);
    7ec6:	   |   clr.l 108(sp)
    7eca:	   |   move.l 1c7e0 <DOSBase>,d0
    7ed0:	   |   movea.l d0,a6
    7ed2:	   |   move.l 108(sp),d1
    7ed6:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7eda:	   '-> move.l #101811,104(sp)
    7ee2:	       clr.l 100(sp)
    7ee6:	       move.l 1c7d8 <SysBase>,d0
    7eec:	       movea.l d0,a6
    7eee:	       movea.l 104(sp),a1
    7ef2:	       move.l 100(sp),d0
    7ef6:	       jsr -552(a6)
    7efa:	       move.l d0,96(sp)
    7efe:	       move.l 96(sp),d0
    7f02:	       move.l d0,1c7e8 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    7f08:	       move.l 1c7e8 <MathIeeeSingBasBase>,d0
    7f0e:	   ,-- bne.s 7f24 <main+0x110>
		Exit(0);	
    7f10:	   |   clr.l 92(sp)
    7f14:	   |   move.l 1c7e0 <DOSBase>,d0
    7f1a:	   |   movea.l d0,a6
    7f1c:	   |   move.l 92(sp),d1
    7f20:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    7f24:	   '-> move.l #101835,88(sp)
    7f2c:	       clr.l 84(sp)
    7f30:	       move.l 1c7d8 <SysBase>,d0
    7f36:	       movea.l d0,a6
    7f38:	       movea.l 88(sp),a1
    7f3c:	       move.l 84(sp),d0
    7f40:	       jsr -552(a6)
    7f44:	       move.l d0,80(sp)
    7f48:	       move.l 80(sp),d0
    7f4c:	       move.l d0,1c7ec <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    7f52:	       move.l 1c7ec <MathIeeeSingTransBase>,d0
    7f58:	   ,-- bne.s 7f6e <main+0x15a>
		Exit(0);
    7f5a:	   |   clr.l 76(sp)
    7f5e:	   |   move.l 1c7e0 <DOSBase>,d0
    7f64:	   |   movea.l d0,a6
    7f66:	   |   move.l 76(sp),d1
    7f6a:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7f6e:	   '-> move.l #101861,72(sp)
    7f76:	       clr.l 68(sp)
    7f7a:	       move.l 1c7d8 <SysBase>,d0
    7f80:	       movea.l d0,a6
    7f82:	       movea.l 72(sp),a1
    7f86:	       move.l 68(sp),d0
    7f8a:	       jsr -552(a6)
    7f8e:	       move.l d0,64(sp)
    7f92:	       move.l 64(sp),d0
    7f96:	       move.l d0,1c7f4 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    7f9c:	       move.l 1c7f4 <MathIeeeDoubTransBase>,d0
    7fa2:	   ,-- bne.s 7fb8 <main+0x1a4>
		Exit(0);
    7fa4:	   |   clr.l 60(sp)
    7fa8:	   |   move.l 1c7e0 <DOSBase>,d0
    7fae:	   |   movea.l d0,a6
    7fb0:	   |   move.l 60(sp),d1
    7fb4:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    7fb8:	   '-> move.l #101887,56(sp)
    7fc0:	       clr.l 52(sp)
    7fc4:	       move.l 1c7d8 <SysBase>,d0
    7fca:	       movea.l d0,a6
    7fcc:	       movea.l 56(sp),a1
    7fd0:	       move.l 52(sp),d0
    7fd4:	       jsr -552(a6)
    7fd8:	       move.l d0,48(sp)
    7fdc:	       move.l 48(sp),d0
    7fe0:	       move.l d0,1c7f0 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    7fe6:	       move.l 1c7f0 <MathIeeeDoubBasBase>,d0
    7fec:	   ,-- bne.s 8002 <main+0x1ee>
		Exit(0);
    7fee:	   |   clr.l 44(sp)
    7ff2:	   |   move.l 1c7e0 <DOSBase>,d0
    7ff8:	   |   movea.l d0,a6
    7ffa:	   |   move.l 44(sp),d1
    7ffe:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 034!\n");
    8002:	   '-> pea 18e17 <PutChar+0x12a1>
    8008:	       jsr 170d4 <KPrintF>
    800e:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 034!\n", 25);
    8010:	       move.l 1c7e0 <DOSBase>,d0
    8016:	       movea.l d0,a6
    8018:	       jsr -60(a6)
    801c:	       move.l d0,40(sp)
    8020:	       move.l 40(sp),d0
    8024:	       move.l d0,36(sp)
    8028:	       move.l #101943,32(sp)
    8030:	       moveq #25,d0
    8032:	       move.l d0,28(sp)
    8036:	       move.l 1c7e0 <DOSBase>,d0
    803c:	       movea.l d0,a6
    803e:	       move.l 36(sp),d1
    8042:	       move.l 32(sp),d2
    8046:	       move.l 28(sp),d3
    804a:	       jsr -48(a6)
    804e:	       move.l d0,24(sp)
	Delay(50);
    8052:	       moveq #50,d0
    8054:	       move.l d0,20(sp)
    8058:	       move.l 1c7e0 <DOSBase>,d0
    805e:	       movea.l d0,a6
    8060:	       move.l 20(sp),d1
    8064:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    8068:	       pea 18e50 <PutChar+0x12da>
    806e:	       jsr 170d4 <KPrintF>
    8074:	       addq.l #4,sp
	TakeSystem();
    8076:	       jsr 7b7a <TakeSystem>
	KPrintF("System Taken\n");
    807c:	       pea 18e5f <PutChar+0x12e9>
    8082:	       jsr 170d4 <KPrintF>
    8088:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    808a:	       movea.l 1c7dc <custom>,a0
    8090:	       move.w #-30721,150(a0)
	WaitVbl();
    8096:	       jsr 17008 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    809c:	       pea 18e6d <PutChar+0x12f7>
    80a2:	       jsr 170d4 <KPrintF>
    80a8:	       addq.l #4,sp
	main_sludge(argc, argv);	
    80aa:	       move.l 152(sp),-(sp)
    80ae:	       move.l 152(sp),-(sp)
    80b2:	       jsr 49aa <main_sludge>
    80b8:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    80ba:	       jsr 7d06 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    80c0:	       move.l 1c7e0 <DOSBase>,16(sp)
    80c8:	       move.l 1c7d8 <SysBase>,d0
    80ce:	       movea.l d0,a6
    80d0:	       movea.l 16(sp),a1
    80d4:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    80d8:	       move.l 1c7e4 <GfxBase>,12(sp)
    80e0:	       move.l 1c7d8 <SysBase>,d0
    80e6:	       movea.l d0,a6
    80e8:	       movea.l 12(sp),a1
    80ec:	       jsr -414(a6)
    80f0:	       moveq #0,d0
}
    80f2:	       movem.l (sp)+,d2-d3/a6
    80f6:	       lea 132(sp),sp
    80fa:	       rts

000080fc <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    80fc:	    lea -16(sp),sp
    8100:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    8102:	    moveq #8,d0
    8104:	    move.l d0,16(sp)
    8108:	    clr.l 12(sp)
    810c:	    move.l 1c7d8 <SysBase>,d0
    8112:	    movea.l d0,a6
    8114:	    move.l 16(sp),d0
    8118:	    move.l 12(sp),d1
    811c:	    jsr -684(a6)
    8120:	    move.l d0,8(sp)
    8124:	    move.l 8(sp),d0
    8128:	    move.l d0,4(sp)
	if (!newStat) {
    812c:	,-- bne.s 815c <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    812e:	|   movea.l 1c156 <nowStatus>,a0
    8134:	|   move.l (a0),d0
    8136:	|   movea.l 4(sp),a0
    813a:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    813e:	|   pea 188c3 <PutChar+0xd4d>
    8144:	|   jsr b8 <copyString>
    814a:	|   addq.l #4,sp
    814c:	|   movea.l 4(sp),a0
    8150:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    8152:	|   movea.l 1c156 <nowStatus>,a0
    8158:	|   move.l 4(sp),(a0)
	}
}
    815c:	'-> nop
    815e:	    movea.l (sp)+,a6
    8160:	    lea 16(sp),sp
    8164:	    rts

00008166 <clearStatusBar>:

void clearStatusBar () {
    8166:	       lea -16(sp),sp
    816a:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    816c:	       movea.l 1c156 <nowStatus>,a0
    8172:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8176:	       movea.l 1c156 <nowStatus>,a0
    817c:	       moveq #-1,d0
    817e:	       move.l d0,6(a0)
	while (stat) {
    8182:	   ,-- bra.s 81c2 <clearStatusBar+0x5c>
		kill = stat;
    8184:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    818a:	|  |   movea.l 16(sp),a0
    818e:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    8194:	|  |   movea.l 12(sp),a0
    8198:	|  |   move.l (a0),8(sp)
    819c:	|  |   move.l 1c7d8 <SysBase>,d0
    81a2:	|  |   movea.l d0,a6
    81a4:	|  |   movea.l 8(sp),a1
    81a8:	|  |   jsr -690(a6)
		FreeVec(kill);
    81ac:	|  |   move.l 12(sp),4(sp)
    81b2:	|  |   move.l 1c7d8 <SysBase>,d0
    81b8:	|  |   movea.l d0,a6
    81ba:	|  |   movea.l 4(sp),a1
    81be:	|  |   jsr -690(a6)
	while (stat) {
    81c2:	|  '-> tst.l 16(sp)
    81c6:	'----- bne.s 8184 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    81c8:	       movea.l 1c156 <nowStatus>,a0
    81ce:	       clr.l (a0)
}
    81d0:	       nop
    81d2:	       movea.l (sp)+,a6
    81d4:	       lea 16(sp),sp
    81d8:	       rts

000081da <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    81da:	clr.l 1c80a <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    81e0:	move.w #-1,1c80e <mainStatus+0x4>
	mainStatus.litStatus = -1;
    81e8:	moveq #-1,d0
    81ea:	move.l d0,1c810 <mainStatus+0x6>
	mainStatus.statusX = 10;
    81f0:	moveq #10,d0
    81f2:	move.l d0,1c814 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    81f8:	movea.l 1c730 <winHeight>,a0
    81fe:	lea -15(a0),a0
    8202:	move.l a0,d0
    8204:	move.l d0,1c818 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    820a:	nop
    820c:	rts

0000820e <killLastStatus>:

void killLastStatus () {
    820e:	    lea -12(sp),sp
    8212:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    8214:	    movea.l 1c156 <nowStatus>,a0
    821a:	    move.l (a0),d0
    821c:	,-- beq.s 8266 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    821e:	|   movea.l 1c156 <nowStatus>,a0
    8224:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8228:	|   movea.l 1c156 <nowStatus>,a0
    822e:	|   movea.l 12(sp),a1
    8232:	|   move.l 4(a1),d0
    8236:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8238:	|   movea.l 12(sp),a0
    823c:	|   move.l (a0),8(sp)
    8240:	|   move.l 1c7d8 <SysBase>,d0
    8246:	|   movea.l d0,a6
    8248:	|   movea.l 8(sp),a1
    824c:	|   jsr -690(a6)
		FreeVec(kill);
    8250:	|   move.l 12(sp),4(sp)
    8256:	|   move.l 1c7d8 <SysBase>,d0
    825c:	|   movea.l d0,a6
    825e:	|   movea.l 4(sp),a1
    8262:	|   jsr -690(a6)
	}
}
    8266:	'-> nop
    8268:	    movea.l (sp)+,a6
    826a:	    lea 12(sp),sp
    826e:	    rts

00008270 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    8270:	movea.l 1c156 <nowStatus>,a0
    8276:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    827c:	movea.l 1c156 <nowStatus>,a0
    8282:	move.l 8(sp),14(a0)
}
    8288:	nop
    828a:	rts

0000828c <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    828c:	       lea -100(sp),sp
    8290:	       move.l a6,-(sp)
    8292:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    8294:	       movea.l 1c156 <nowStatus>,a0
    829a:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    829e:	       movea.l 1c156 <nowStatus>,a0
    82a4:	       move.w 4(a0),d0
    82a8:	       move.w d0,d0
    82aa:	       andi.l #65535,d0
    82b0:	       move.l 112(sp),-(sp)
    82b4:	       move.l d0,-(sp)
    82b6:	       jsr 8d0 <put2bytes>
    82bc:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    82be:	       movea.l 1c156 <nowStatus>,a0
    82c4:	       move.l 6(a0),d0
    82c8:	       move.l d0,d0
    82ca:	       movea.w d0,a0
    82cc:	       move.l 112(sp),-(sp)
    82d0:	       move.l a0,-(sp)
    82d2:	       jsr a9c <putSigned>
    82d8:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    82da:	       movea.l 1c156 <nowStatus>,a0
    82e0:	       move.l 10(a0),d0
    82e4:	       move.l 112(sp),-(sp)
    82e8:	       move.l d0,-(sp)
    82ea:	       jsr 8d0 <put2bytes>
    82f0:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    82f2:	       movea.l 1c156 <nowStatus>,a0
    82f8:	       move.l 14(a0),d0
    82fc:	       move.l 112(sp),-(sp)
    8300:	       move.l d0,-(sp)
    8302:	       jsr 8d0 <put2bytes>
    8308:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    830a:	       move.l 112(sp),100(sp)
    8310:	       movea.l 1c156 <nowStatus>,a0
    8316:	       move.l 18(a0),96(sp)
    831c:	       move.l 1c7e0 <DOSBase>,d0
    8322:	       movea.l d0,a6
    8324:	       move.l 100(sp),d1
    8328:	       move.l 96(sp),d2
    832c:	       jsr -312(a6)
    8330:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8334:	       move.l 112(sp),88(sp)
    833a:	       movea.l 1c156 <nowStatus>,a0
    8340:	       move.l 22(a0),84(sp)
    8346:	       move.l 1c7e0 <DOSBase>,d0
    834c:	       movea.l d0,a6
    834e:	       move.l 88(sp),d1
    8352:	       move.l 84(sp),d2
    8356:	       jsr -312(a6)
    835a:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    835e:	       move.l 112(sp),76(sp)
    8364:	       movea.l 1c156 <nowStatus>,a0
    836a:	       move.l 26(a0),72(sp)
    8370:	       move.l 1c7e0 <DOSBase>,d0
    8376:	       movea.l d0,a6
    8378:	       move.l 76(sp),d1
    837c:	       move.l 72(sp),d2
    8380:	       jsr -312(a6)
    8384:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8388:	       move.l 112(sp),64(sp)
    838e:	       movea.l 1c156 <nowStatus>,a0
    8394:	       move.l 30(a0),60(sp)
    839a:	       move.l 1c7e0 <DOSBase>,d0
    83a0:	       movea.l d0,a6
    83a2:	       move.l 64(sp),d1
    83a6:	       move.l 60(sp),d2
    83aa:	       jsr -312(a6)
    83ae:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    83b2:	       move.l 112(sp),52(sp)
    83b8:	       movea.l 1c156 <nowStatus>,a0
    83be:	       move.l 34(a0),48(sp)
    83c4:	       move.l 1c7e0 <DOSBase>,d0
    83ca:	       movea.l d0,a6
    83cc:	       move.l 52(sp),d1
    83d0:	       move.l 48(sp),d2
    83d4:	       jsr -312(a6)
    83d8:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    83dc:	       move.l 112(sp),40(sp)
    83e2:	       movea.l 1c156 <nowStatus>,a0
    83e8:	       move.l 38(a0),36(sp)
    83ee:	       move.l 1c7e0 <DOSBase>,d0
    83f4:	       movea.l d0,a6
    83f6:	       move.l 40(sp),d1
    83fa:	       move.l 36(sp),d2
    83fe:	       jsr -312(a6)
    8402:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8406:	   ,-- bra.s 844a <saveStatusBars+0x1be>
		FPutC (fp,1);
    8408:	,--|-> move.l 112(sp),16(sp)
    840e:	|  |   moveq #1,d0
    8410:	|  |   move.l d0,12(sp)
    8414:	|  |   move.l 1c7e0 <DOSBase>,d0
    841a:	|  |   movea.l d0,a6
    841c:	|  |   move.l 16(sp),d1
    8420:	|  |   move.l 12(sp),d2
    8424:	|  |   jsr -312(a6)
    8428:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    842c:	|  |   movea.l 104(sp),a0
    8430:	|  |   move.l (a0),d0
    8432:	|  |   move.l 112(sp),-(sp)
    8436:	|  |   move.l d0,-(sp)
    8438:	|  |   jsr bd8 <writeString>
    843e:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    8440:	|  |   movea.l 104(sp),a0
    8444:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    844a:	|  '-> tst.l 104(sp)
    844e:	'----- bne.s 8408 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    8450:	       move.l 112(sp),28(sp)
    8456:	       clr.l 24(sp)
    845a:	       move.l 1c7e0 <DOSBase>,d0
    8460:	       movea.l d0,a6
    8462:	       move.l 28(sp),d1
    8466:	       move.l 24(sp),d2
    846a:	       jsr -312(a6)
    846e:	       move.l d0,20(sp)
}
    8472:	       nop
    8474:	       move.l (sp)+,d2
    8476:	       movea.l (sp)+,a6
    8478:	       lea 100(sp),sp
    847c:	       rts

0000847e <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    847e:	movea.l 1c156 <nowStatus>,a0
    8484:	move.l 4(sp),6(a0)
}
    848a:	nop
    848c:	rts

0000848e <setStatusBar>:

void setStatusBar (char * txt) {
    848e:	    subq.l #4,sp
    8490:	    move.l a6,-(sp)
    8492:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8494:	    movea.l 1c156 <nowStatus>,a0
    849a:	    move.l (a0),d0
    849c:	,-- beq.s 84d0 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    849e:	|   movea.l 1c156 <nowStatus>,a0
    84a4:	|   movea.l (a0),a0
    84a6:	|   move.l (a0),8(sp)
    84aa:	|   move.l 1c7d8 <SysBase>,d0
    84b0:	|   movea.l d0,a6
    84b2:	|   movea.l 8(sp),a1
    84b6:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    84ba:	|   movea.l 1c156 <nowStatus>,a0
    84c0:	|   movea.l (a0),a2
    84c2:	|   move.l 16(sp),-(sp)
    84c6:	|   jsr b8 <copyString>
    84cc:	|   addq.l #4,sp
    84ce:	|   move.l d0,(a2)
	}
}
    84d0:	'-> nop
    84d2:	    movea.l (sp)+,a2
    84d4:	    movea.l (sp)+,a6
    84d6:	    addq.l #4,sp
    84d8:	    rts

000084da <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    84da:	       movea.l 1c156 <nowStatus>,a0
    84e0:	       move.l (a0),d0
    84e2:	,----- beq.s 84f0 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    84e4:	|      movea.l 1c156 <nowStatus>,a0
    84ea:	|      movea.l (a0),a0
    84ec:	|      move.l (a0),d0
    84ee:	|  ,-- bra.s 84f6 <statusBarText+0x1c>
	} else {
		return "";
    84f0:	'--|-> move.l #100547,d0
	}
    84f6:	   '-> rts

000084f8 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    84f8:	       lea -12(sp),sp
    84fc:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    84fe:	       move.l 1c834 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8506:	   ,-- bra.s 852e <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8508:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    850e:	|  |   movea.l 12(sp),a0
    8512:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8518:	|  |   move.l 8(sp),4(sp)
    851e:	|  |   move.l 1c7d8 <SysBase>,d0
    8524:	|  |   movea.l d0,a6
    8526:	|  |   movea.l 4(sp),a1
    852a:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    852e:	|  '-> tst.l 12(sp)
    8532:	'----- bne.s 8508 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8534:	       clr.l 1c834 <zBuffer>
}
    853a:	       nop
    853c:	       movea.l (sp)+,a6
    853e:	       lea 12(sp),sp
    8542:	       rts

00008544 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8544:	                lea -304(sp),sp
    8548:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    854c:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8550:	                jsr 84f8 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8556:	                move.l 328(sp),d0
    855a:	                move.l d0,-(sp)
    855c:	                jsr 75e2 <openFileFromNum>
    8562:	                addq.l #4,sp
    8564:	                tst.l d0
    8566:	            ,-- bne.s 856e <setZBuffer+0x2a>
    8568:	            |   clr.w d0
    856a:	,-----------|-- bra.w 882c <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    856e:	|           '-> move.l 1c7c0 <bigDataFile>,310(sp)
    8576:	|               move.l 1c7e0 <DOSBase>,d0
    857c:	|               movea.l d0,a6
    857e:	|               move.l 310(sp),d1
    8582:	|               jsr -306(a6)
    8586:	|               move.l d0,306(sp)
    858a:	|               move.l 306(sp),d0
    858e:	|               moveq #97,d1
    8590:	|               cmp.l d0,d1
    8592:	|        ,----- bne.s 8606 <setZBuffer+0xc2>
    8594:	|        |      move.l 1c7c0 <bigDataFile>,302(sp)
    859c:	|        |      move.l 1c7e0 <DOSBase>,d0
    85a2:	|        |      movea.l d0,a6
    85a4:	|        |      move.l 302(sp),d1
    85a8:	|        |      jsr -306(a6)
    85ac:	|        |      move.l d0,298(sp)
    85b0:	|        |      move.l 298(sp),d0
    85b4:	|        |      moveq #115,d1
    85b6:	|        |      cmp.l d0,d1
    85b8:	|        +----- bne.s 8606 <setZBuffer+0xc2>
    85ba:	|        |      move.l 1c7c0 <bigDataFile>,294(sp)
    85c2:	|        |      move.l 1c7e0 <DOSBase>,d0
    85c8:	|        |      movea.l d0,a6
    85ca:	|        |      move.l 294(sp),d1
    85ce:	|        |      jsr -306(a6)
    85d2:	|        |      move.l d0,290(sp)
    85d6:	|        |      move.l 290(sp),d0
    85da:	|        |      moveq #122,d1
    85dc:	|        |      cmp.l d0,d1
    85de:	|        +----- bne.s 8606 <setZBuffer+0xc2>
    85e0:	|        |      move.l 1c7c0 <bigDataFile>,286(sp)
    85e8:	|        |      move.l 1c7e0 <DOSBase>,d0
    85ee:	|        |      movea.l d0,a6
    85f0:	|        |      move.l 286(sp),d1
    85f4:	|        |      jsr -306(a6)
    85f8:	|        |      move.l d0,282(sp)
    85fc:	|        |      move.l 282(sp),d0
    8600:	|        |      moveq #98,d1
    8602:	|        |      cmp.l d0,d1
    8604:	|        |  ,-- beq.s 861a <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8606:	|        '--|-> pea 18eaa <PutChar+0x1334>
    860c:	|           |   jsr 170d4 <KPrintF>
    8612:	|           |   addq.l #4,sp
		 return FALSE;
    8614:	|           |   clr.w d0
    8616:	+-----------|-- bra.w 882c <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    861a:	|           '-> move.l 1c7c0 <bigDataFile>,278(sp)
    8622:	|               move.l 1c7e0 <DOSBase>,d0
    8628:	|               movea.l d0,a6
    862a:	|               move.l 278(sp),d1
    862e:	|               jsr -306(a6)
    8632:	|               move.l d0,274(sp)
    8636:	|               move.l 274(sp),d0
    863a:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    863e:	|               moveq #28,d0
    8640:	|               move.l d0,270(sp)
    8644:	|               clr.l 266(sp)
    8648:	|               move.l 1c7d8 <SysBase>,d0
    864e:	|               movea.l d0,a6
    8650:	|               move.l 270(sp),d0
    8654:	|               move.l 266(sp),d1
    8658:	|               jsr -684(a6)
    865c:	|               move.l d0,262(sp)
    8660:	|               move.l 262(sp),d0
    8664:	|               move.l d0,1c834 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    866a:	|               move.l 1c834 <zBuffer>,318(sp)

	while(numelements--)
    8672:	|     ,-------- bra.w 8812 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8676:	|  ,--|-------> move.l 1c7c0 <bigDataFile>,d0
    867c:	|  |  |         move.l d0,-(sp)
    867e:	|  |  |         jsr 6bc <get2bytes>
    8684:	|  |  |         addq.l #4,sp
    8686:	|  |  |         movea.l 318(sp),a0
    868a:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    868c:	|  |  |         move.l 1c7c0 <bigDataFile>,d0
    8692:	|  |  |         move.l d0,-(sp)
    8694:	|  |  |         jsr 6bc <get2bytes>
    869a:	|  |  |         addq.l #4,sp
    869c:	|  |  |         movea.l 318(sp),a0
    86a0:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    86a4:	|  |  |         move.l 1c7c0 <bigDataFile>,d0
    86aa:	|  |  |         move.l d0,-(sp)
    86ac:	|  |  |         jsr 6bc <get2bytes>
    86b2:	|  |  |         addq.l #4,sp
    86b4:	|  |  |         movea.l 318(sp),a0
    86b8:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    86bc:	|  |  |         move.l 1c7c0 <bigDataFile>,d0
    86c2:	|  |  |         move.l d0,-(sp)
    86c4:	|  |  |         jsr 6bc <get2bytes>
    86ca:	|  |  |         addq.l #4,sp
    86cc:	|  |  |         movea.l 318(sp),a0
    86d0:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    86d4:	|  |  |         move.l 1c7c0 <bigDataFile>,d0
    86da:	|  |  |         move.l d0,-(sp)
    86dc:	|  |  |         jsr 6bc <get2bytes>
    86e2:	|  |  |         addq.l #4,sp
    86e4:	|  |  |         movea.l 318(sp),a0
    86e8:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    86ec:	|  |  |         movea.l 318(sp),a0
    86f0:	|  |  |         move.l (a0),d0
    86f2:	|  |  |         movea.l 318(sp),a0
    86f6:	|  |  |         move.l 4(a0),d1
    86fa:	|  |  |         move.l d1,-(sp)
    86fc:	|  |  |         move.l d0,-(sp)
    86fe:	|  |  |         jsr 17a60 <__mulsi3>
    8704:	|  |  |         addq.l #8,sp
    8706:	|  |  |         tst.l d0
    8708:	|  |  |     ,-- bge.s 870c <setZBuffer+0x1c8>
    870a:	|  |  |     |   addq.l #7,d0
    870c:	|  |  |     '-> asr.l #3,d0
    870e:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8712:	|  |  |         moveq #0,d0
    8714:	|  |  |         move.w 260(sp),d0
    8718:	|  |  |         move.l d0,256(sp)
    871c:	|  |  |         moveq #2,d1
    871e:	|  |  |         move.l d1,252(sp)
    8722:	|  |  |         move.l 1c7d8 <SysBase>,d0
    8728:	|  |  |         movea.l d0,a6
    872a:	|  |  |         move.l 256(sp),d0
    872e:	|  |  |         move.l 252(sp),d1
    8732:	|  |  |         jsr -684(a6)
    8736:	|  |  |         move.l d0,248(sp)
    873a:	|  |  |         move.l 248(sp),d0
    873e:	|  |  |         movea.l 318(sp),a0
    8742:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8746:	|  |  |         move.l 1c7c0 <bigDataFile>,244(sp)
    874e:	|  |  |         movea.l 318(sp),a0
    8752:	|  |  |         move.l 20(a0),240(sp)
    8758:	|  |  |         moveq #1,d0
    875a:	|  |  |         move.l d0,236(sp)
    875e:	|  |  |         moveq #0,d0
    8760:	|  |  |         move.w 260(sp),d0
    8764:	|  |  |         move.l d0,232(sp)
    8768:	|  |  |         move.l 1c7e0 <DOSBase>,d0
    876e:	|  |  |         movea.l d0,a6
    8770:	|  |  |         move.l 244(sp),d1
    8774:	|  |  |         move.l 240(sp),d2
    8778:	|  |  |         move.l 236(sp),d3
    877c:	|  |  |         move.l 232(sp),d4
    8780:	|  |  |         jsr -324(a6)
    8784:	|  |  |         move.l d0,228(sp)
    8788:	|  |  |         move.l 228(sp),d0
    878c:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8790:	|  |  |         tst.w 322(sp)
    8794:	|  |  |  ,----- beq.s 87d0 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8796:	|  |  |  |      moveq #28,d1
    8798:	|  |  |  |      move.l d1,222(sp)
    879c:	|  |  |  |      clr.l 218(sp)
    87a0:	|  |  |  |      move.l 1c7d8 <SysBase>,d0
    87a6:	|  |  |  |      movea.l d0,a6
    87a8:	|  |  |  |      move.l 222(sp),d0
    87ac:	|  |  |  |      move.l 218(sp),d1
    87b0:	|  |  |  |      jsr -684(a6)
    87b4:	|  |  |  |      move.l d0,214(sp)
    87b8:	|  |  |  |      move.l 214(sp),d0
    87bc:	|  |  |  |      movea.l 318(sp),a0
    87c0:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    87c4:	|  |  |  |      movea.l 318(sp),a0
    87c8:	|  |  |  |      move.l 24(a0),318(sp)
    87ce:	|  |  |  |  ,-- bra.s 87d8 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    87d0:	|  |  |  '--|-> movea.l 318(sp),a0
    87d4:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    87d8:	|  |  |     '-> movea.l 318(sp),a0
    87dc:	|  |  |         move.l 4(a0),d0
    87e0:	|  |  |         move.l d0,d0
    87e2:	|  |  |         movea.w d0,a1
    87e4:	|  |  |         movea.l 318(sp),a0
    87e8:	|  |  |         move.l (a0),d0
    87ea:	|  |  |         move.l d0,d0
    87ec:	|  |  |         movea.w d0,a0
    87ee:	|  |  |         movea.l 318(sp),a2
    87f2:	|  |  |         move.l 20(a2),d0
    87f6:	|  |  |         clr.l -(sp)
    87f8:	|  |  |         pea 1 <_start+0x1>
    87fc:	|  |  |         move.l a1,-(sp)
    87fe:	|  |  |         move.l a0,-(sp)
    8800:	|  |  |         pea 18ebe <PutChar+0x1348>
    8806:	|  |  |         move.l d0,-(sp)
    8808:	|  |  |         jsr 171bc <debug_register_bitmap>
    880e:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8812:	|  |  '-------> move.w 322(sp),d0
    8816:	|  |            move.w d0,d1
    8818:	|  |            subq.w #1,d1
    881a:	|  |            move.w d1,322(sp)
    881e:	|  |            tst.w d0
    8820:	|  '----------- bne.w 8676 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8824:	|               jsr 74da <finishAccess>
	
	return TRUE;
    882a:	|               moveq #1,d0
}
    882c:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    8830:	                lea 304(sp),sp
    8834:	                rts

00008836 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8836:	          lea -32(sp),sp
    883a:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    883c:	          move.l 40(sp),d0
    8840:	          addq.l #8,d0
    8842:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8846:	          clr.l 32(sp)
    884a:	   ,----- bra.s 8890 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    884c:	,--|----> movea.l 24(sp),a0
    8850:	|  |      movea.l 8(a0),a0
    8854:	|  |      move.l 32(sp),d1
    8858:	|  |      move.l d1,d0
    885a:	|  |      lsl.l #3,d0
    885c:	|  |      sub.l d1,d0
    885e:	|  |      add.l d0,d0
    8860:	|  |      add.l d0,d0
    8862:	|  |      adda.l d0,a0
    8864:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8868:	|  |      movea.l 8(sp),a0
    886c:	|  |      move.l 24(a0),d0
    8870:	|  |  ,-- beq.s 888c <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8872:	|  |  |   movea.l 8(sp),a0
    8876:	|  |  |   move.l 24(a0),4(sp)
    887c:	|  |  |   move.l 1c7d8 <SysBase>,d0
    8882:	|  |  |   movea.l d0,a6
    8884:	|  |  |   movea.l 4(sp),a1
    8888:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    888c:	|  |  '-> addq.l #1,32(sp)
    8890:	|  '----> movea.l 24(sp),a0
    8894:	|         move.l (a0),d0
    8896:	|         cmp.l 32(sp),d0
    889a:	'-------- bgt.s 884c <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    889c:	          movea.l 24(sp),a0
    88a0:	          move.l 8(a0),20(sp)
    88a6:	          move.l 1c7d8 <SysBase>,d0
    88ac:	          movea.l d0,a6
    88ae:	          movea.l 20(sp),a1
    88b2:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    88b6:	          move.l 1c8ec <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    88be:	      ,-- bra.s 88ca <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    88c0:	   ,--|-> movea.l 28(sp),a0
    88c4:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    88ca:	   |  '-> movea.l 28(sp),a0
    88ce:	   |      movea.l 22(a0),a0
    88d2:	   |      move.l (a0),d1
    88d4:	   |      movea.l 40(sp),a0
    88d8:	   |      move.l (a0),d0
    88da:	   |      cmp.l d1,d0
    88dc:	   |  ,-- beq.s 88e4 <forgetSpriteBank+0xae>
    88de:	   |  |   tst.l 28(sp)
    88e2:	   '--|-- bne.s 88c0 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    88e4:	      '-> tst.l 28(sp)
    88e8:	   ,----- beq.s 8912 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    88ea:	   |      movea.l 40(sp),a0
    88ee:	   |      move.l 22(a0),d0
    88f2:	   |      movea.l 28(sp),a0
    88f6:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    88fa:	   |      move.l 40(sp),12(sp)
    8900:	   |      move.l 1c7d8 <SysBase>,d0
    8906:	   |      movea.l d0,a6
    8908:	   |      movea.l 12(sp),a1
    890c:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8910:	   |  ,-- bra.s 8938 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8912:	   '--|-> movea.l 1c8ec <allLoadedBanks>,a0
    8918:	      |   move.l 22(a0),d0
    891c:	      |   move.l d0,1c8ec <allLoadedBanks>
		FreeVec( forgetme);
    8922:	      |   move.l 40(sp),16(sp)
    8928:	      |   move.l 1c7d8 <SysBase>,d0
    892e:	      |   movea.l d0,a6
    8930:	      |   movea.l 16(sp),a1
    8934:	      |   jsr -690(a6)
}
    8938:	      '-> nop
    893a:	          movea.l (sp)+,a6
    893c:	          lea 32(sp),sp
    8940:	          rts

00008942 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8942:	                      lea -84(sp),sp
    8946:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    894a:	                      pea 18eca <PutChar+0x1354>
    8950:	                      jsr 170d4 <KPrintF>
    8956:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8958:	                      clr.l 94(sp)
    895c:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8960:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8964:	                      move.l 108(sp),-(sp)
    8968:	                      jsr 75e2 <openFileFromNum>
    896e:	                      addq.l #4,sp
    8970:	                      tst.l d0
    8972:	                  ,-- bne.s 8988 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8974:	                  |   pea 18ee4 <PutChar+0x136e>
    897a:	                  |   jsr 170d4 <KPrintF>
    8980:	                  |   addq.l #4,sp
		return FALSE;
    8982:	                  |   clr.w d0
    8984:	,-----------------|-- bra.w 8d7c <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8988:	|                 '-> move.l 1c7c0 <bigDataFile>,d0
    898e:	|                     move.l d0,-(sp)
    8990:	|                     jsr 6bc <get2bytes>
    8996:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8998:	|                     move.l 1c7c0 <bigDataFile>,82(sp)
    89a0:	|                     move.l 1c7e0 <DOSBase>,d0
    89a6:	|                     movea.l d0,a6
    89a8:	|                     move.l 82(sp),d1
    89ac:	|                     jsr -306(a6)
    89b0:	|                     move.l d0,78(sp)
    89b4:	|                     move.l 78(sp),d0
    89b8:	|                     movea.l 112(sp),a0
    89bc:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    89c0:	|                     move.l 1c7c0 <bigDataFile>,d0
    89c6:	|                     move.l d0,-(sp)
    89c8:	|                     jsr 6bc <get2bytes>
    89ce:	|                     addq.l #4,sp
    89d0:	|                     move.l d0,74(sp)

	if (total <= 0) {
    89d4:	|                 ,-- bgt.s 89ea <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    89d6:	|                 |   pea 18f12 <PutChar+0x139c>
    89dc:	|                 |   jsr 170d4 <KPrintF>
    89e2:	|                 |   addq.l #4,sp
		return FALSE;
    89e4:	|                 |   clr.w d0
    89e6:	+-----------------|-- bra.w 8d7c <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    89ea:	|                 '-> movea.l 112(sp),a0
    89ee:	|                     move.l 4(a0),d0
    89f2:	|                     moveq #3,d1
    89f4:	|                     cmp.l d0,d1
    89f6:	|                 ,-- bne.s 8a04 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    89f8:	|                 |   movea.l 112(sp),a0
    89fc:	|                 |   move.w #1,12(a0)
    8a02:	|              ,--|-- bra.s 8a26 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8a04:	|              |  '-> movea.l 112(sp),a0
    8a08:	|              |      move.l 4(a0),d0
    8a0c:	|              |      moveq #3,d1
    8a0e:	|              |      cmp.l d0,d1
    8a10:	|              +----- bge.s 8a26 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8a12:	|              |      pea 18f52 <PutChar+0x13dc>
    8a18:	|              |      jsr 170d4 <KPrintF>
    8a1e:	|              |      addq.l #4,sp
		return FALSE;
    8a20:	|              |      clr.w d0
    8a22:	+--------------|----- bra.w 8d7c <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8a26:	|              '----> movea.l 112(sp),a0
    8a2a:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8a2e:	|                     move.l 74(sp),d1
    8a32:	|                     move.l d1,d0
    8a34:	|                     lsl.l #3,d0
    8a36:	|                     sub.l d1,d0
    8a38:	|                     add.l d0,d0
    8a3a:	|                     add.l d0,d0
    8a3c:	|                     move.l d0,70(sp)
    8a40:	|                     clr.l 66(sp)
    8a44:	|                     move.l 1c7d8 <SysBase>,d0
    8a4a:	|                     movea.l d0,a6
    8a4c:	|                     move.l 70(sp),d0
    8a50:	|                     move.l 66(sp),d1
    8a54:	|                     jsr -684(a6)
    8a58:	|                     move.l d0,62(sp)
    8a5c:	|                     move.l 62(sp),d0
    8a60:	|                     movea.l 112(sp),a0
    8a64:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8a68:	|                     movea.l 112(sp),a0
    8a6c:	|                     move.l 8(a0),d0
    8a70:	|                 ,-- bne.s 8a78 <loadSpriteBank+0x136>
    8a72:	|                 |   clr.w d0
    8a74:	+-----------------|-- bra.w 8d7c <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8a78:	|                 '-> moveq #1,d0
    8a7a:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8a7e:	|                     clr.l 100(sp)
    8a82:	|     ,-------------- bra.w 8d5a <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8a86:	|  ,--|-------------> move.l 1c7c0 <bigDataFile>,d0
    8a8c:	|  |  |               move.l d0,-(sp)
    8a8e:	|  |  |               jsr 6bc <get2bytes>
    8a94:	|  |  |               addq.l #4,sp
    8a96:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8a9a:	|  |  |               movea.l 112(sp),a0
    8a9e:	|  |  |               movea.l 8(a0),a0
    8aa2:	|  |  |               move.l 100(sp),d1
    8aa6:	|  |  |               move.l d1,d0
    8aa8:	|  |  |               lsl.l #3,d0
    8aaa:	|  |  |               sub.l d1,d0
    8aac:	|  |  |               add.l d0,d0
    8aae:	|  |  |               add.l d0,d0
    8ab0:	|  |  |               adda.l d0,a0
    8ab2:	|  |  |               moveq #0,d0
    8ab4:	|  |  |               move.w 60(sp),d0
    8ab8:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8aba:	|  |  |               movea.l 1c7c0 <bigDataFile>,a1
    8ac0:	|  |  |               movea.l 112(sp),a0
    8ac4:	|  |  |               movea.l 8(a0),a0
    8ac8:	|  |  |               move.l 100(sp),d1
    8acc:	|  |  |               move.l d1,d0
    8ace:	|  |  |               lsl.l #3,d0
    8ad0:	|  |  |               sub.l d1,d0
    8ad2:	|  |  |               add.l d0,d0
    8ad4:	|  |  |               add.l d0,d0
    8ad6:	|  |  |               lea (0,a0,d0.l),a2
    8ada:	|  |  |               move.l a1,-(sp)
    8adc:	|  |  |               jsr 6bc <get2bytes>
    8ae2:	|  |  |               addq.l #4,sp
    8ae4:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8ae8:	|  |  |               movea.l 1c7c0 <bigDataFile>,a1
    8aee:	|  |  |               movea.l 112(sp),a0
    8af2:	|  |  |               movea.l 8(a0),a0
    8af6:	|  |  |               move.l 100(sp),d1
    8afa:	|  |  |               move.l d1,d0
    8afc:	|  |  |               lsl.l #3,d0
    8afe:	|  |  |               sub.l d1,d0
    8b00:	|  |  |               add.l d0,d0
    8b02:	|  |  |               add.l d0,d0
    8b04:	|  |  |               lea (0,a0,d0.l),a2
    8b08:	|  |  |               move.l a1,-(sp)
    8b0a:	|  |  |               jsr 6bc <get2bytes>
    8b10:	|  |  |               addq.l #4,sp
    8b12:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8b16:	|  |  |               movea.l 1c7c0 <bigDataFile>,a1
    8b1c:	|  |  |               movea.l 112(sp),a0
    8b20:	|  |  |               movea.l 8(a0),a0
    8b24:	|  |  |               move.l 100(sp),d1
    8b28:	|  |  |               move.l d1,d0
    8b2a:	|  |  |               lsl.l #3,d0
    8b2c:	|  |  |               sub.l d1,d0
    8b2e:	|  |  |               add.l d0,d0
    8b30:	|  |  |               add.l d0,d0
    8b32:	|  |  |               lea (0,a0,d0.l),a2
    8b36:	|  |  |               move.l a1,-(sp)
    8b38:	|  |  |               jsr 6bc <get2bytes>
    8b3e:	|  |  |               addq.l #4,sp
    8b40:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8b44:	|  |  |               movea.l 112(sp),a0
    8b48:	|  |  |               move.l 4(a0),d0
    8b4c:	|  |  |               moveq #3,d1
    8b4e:	|  |  |               cmp.l d0,d1
    8b50:	|  |  |     ,-------- beq.w 8bec <loadSpriteBank+0x2aa>
    8b54:	|  |  |     |         moveq #3,d1
    8b56:	|  |  |     |         cmp.l d0,d1
    8b58:	|  |  |  ,--|-------- blt.w 8c92 <loadSpriteBank+0x350>
    8b5c:	|  |  |  |  |         moveq #1,d1
    8b5e:	|  |  |  |  |         cmp.l d0,d1
    8b60:	|  |  |  |  |     ,-- beq.s 8b6c <loadSpriteBank+0x22a>
    8b62:	|  |  |  |  |     |   moveq #2,d1
    8b64:	|  |  |  |  |     |   cmp.l d0,d1
    8b66:	|  |  |  |  |  ,--|-- beq.s 8b98 <loadSpriteBank+0x256>
    8b68:	|  |  |  +--|--|--|-- bra.w 8c92 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8b6c:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    8b70:	|  |  |  |  |  |      movea.l 8(a0),a0
    8b74:	|  |  |  |  |  |      move.l 100(sp),d1
    8b78:	|  |  |  |  |  |      move.l d1,d0
    8b7a:	|  |  |  |  |  |      lsl.l #3,d0
    8b7c:	|  |  |  |  |  |      sub.l d1,d0
    8b7e:	|  |  |  |  |  |      add.l d0,d0
    8b80:	|  |  |  |  |  |      add.l d0,d0
    8b82:	|  |  |  |  |  |      adda.l d0,a0
    8b84:	|  |  |  |  |  |      move.l 4(a0),d0
    8b88:	|  |  |  |  |  |      addq.l #2,d0
    8b8a:	|  |  |  |  |  |      move.l d0,d0
    8b8c:	|  |  |  |  |  |      add.w d0,d0
    8b8e:	|  |  |  |  |  |      add.w d0,d0
    8b90:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8b94:	|  |  |  +--|--|----- bra.w 8c92 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8b98:	|  |  |  |  |  '----> movea.l 112(sp),a0
    8b9c:	|  |  |  |  |         movea.l 8(a0),a0
    8ba0:	|  |  |  |  |         move.l 100(sp),d1
    8ba4:	|  |  |  |  |         move.l d1,d0
    8ba6:	|  |  |  |  |         lsl.l #3,d0
    8ba8:	|  |  |  |  |         sub.l d1,d0
    8baa:	|  |  |  |  |         add.l d0,d0
    8bac:	|  |  |  |  |         add.l d0,d0
    8bae:	|  |  |  |  |         adda.l d0,a0
    8bb0:	|  |  |  |  |         move.l (a0),d0
    8bb2:	|  |  |  |  |     ,-- bpl.s 8bb6 <loadSpriteBank+0x274>
    8bb4:	|  |  |  |  |     |   addq.l #7,d0
    8bb6:	|  |  |  |  |     '-> asr.l #3,d0
    8bb8:	|  |  |  |  |         move.l d0,d2
    8bba:	|  |  |  |  |         movea.l 112(sp),a0
    8bbe:	|  |  |  |  |         movea.l 8(a0),a0
    8bc2:	|  |  |  |  |         move.l 100(sp),d1
    8bc6:	|  |  |  |  |         move.l d1,d0
    8bc8:	|  |  |  |  |         lsl.l #3,d0
    8bca:	|  |  |  |  |         sub.l d1,d0
    8bcc:	|  |  |  |  |         add.l d0,d0
    8bce:	|  |  |  |  |         add.l d0,d0
    8bd0:	|  |  |  |  |         adda.l d0,a0
    8bd2:	|  |  |  |  |         move.l 4(a0),d0
    8bd6:	|  |  |  |  |         move.l d0,d0
    8bd8:	|  |  |  |  |         move.w d2,d1
    8bda:	|  |  |  |  |         muls.w d0,d1
    8bdc:	|  |  |  |  |         move.w d1,d0
    8bde:	|  |  |  |  |         add.w d0,d0
    8be0:	|  |  |  |  |         add.w d1,d0
    8be2:	|  |  |  |  |         add.w d0,d0
    8be4:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8be8:	|  |  |  +--|-------- bra.w 8c92 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8bec:	|  |  |  |  '-------> movea.l 112(sp),a0
    8bf0:	|  |  |  |            movea.l 8(a0),a0
    8bf4:	|  |  |  |            move.l 100(sp),d1
    8bf8:	|  |  |  |            move.l d1,d0
    8bfa:	|  |  |  |            lsl.l #3,d0
    8bfc:	|  |  |  |            sub.l d1,d0
    8bfe:	|  |  |  |            add.l d0,d0
    8c00:	|  |  |  |            add.l d0,d0
    8c02:	|  |  |  |            adda.l d0,a0
    8c04:	|  |  |  |            move.l (a0),d0
    8c06:	|  |  |  |            andi.l #-2147483633,d0
    8c0c:	|  |  |  |        ,-- bpl.s 8c16 <loadSpriteBank+0x2d4>
    8c0e:	|  |  |  |        |   subq.l #1,d0
    8c10:	|  |  |  |        |   moveq #-16,d1
    8c12:	|  |  |  |        |   or.l d1,d0
    8c14:	|  |  |  |        |   addq.l #1,d0
    8c16:	|  |  |  |        '-> tst.l d0
    8c18:	|  |  |  |     ,----- ble.s 8c1e <loadSpriteBank+0x2dc>
    8c1a:	|  |  |  |     |      moveq #2,d0
    8c1c:	|  |  |  |     |  ,-- bra.s 8c20 <loadSpriteBank+0x2de>
    8c1e:	|  |  |  |     '--|-> clr.w d0
    8c20:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8c24:	|  |  |  |            movea.l 112(sp),a0
    8c28:	|  |  |  |            movea.l 8(a0),a0
    8c2c:	|  |  |  |            move.l 100(sp),d1
    8c30:	|  |  |  |            move.l d1,d0
    8c32:	|  |  |  |            lsl.l #3,d0
    8c34:	|  |  |  |            sub.l d1,d0
    8c36:	|  |  |  |            add.l d0,d0
    8c38:	|  |  |  |            add.l d0,d0
    8c3a:	|  |  |  |            adda.l d0,a0
    8c3c:	|  |  |  |            move.l (a0),d0
    8c3e:	|  |  |  |            movea.l d0,a0
    8c40:	|  |  |  |            cmpa.w #0,a0
    8c44:	|  |  |  |        ,-- bge.s 8c4a <loadSpriteBank+0x308>
    8c46:	|  |  |  |        |   lea 15(a0),a0
    8c4a:	|  |  |  |        '-> move.l a0,d0
    8c4c:	|  |  |  |            asr.l #4,d0
    8c4e:	|  |  |  |            add.l d0,d0
    8c50:	|  |  |  |            move.l d0,d1
    8c52:	|  |  |  |            moveq #0,d0
    8c54:	|  |  |  |            move.w 58(sp),d0
    8c58:	|  |  |  |            add.l d1,d0
    8c5a:	|  |  |  |            move.l d0,d2
    8c5c:	|  |  |  |            movea.l 112(sp),a0
    8c60:	|  |  |  |            movea.l 8(a0),a0
    8c64:	|  |  |  |            move.l 100(sp),d1
    8c68:	|  |  |  |            move.l d1,d0
    8c6a:	|  |  |  |            lsl.l #3,d0
    8c6c:	|  |  |  |            sub.l d1,d0
    8c6e:	|  |  |  |            add.l d0,d0
    8c70:	|  |  |  |            add.l d0,d0
    8c72:	|  |  |  |            adda.l d0,a0
    8c74:	|  |  |  |            move.l 4(a0),d0
    8c78:	|  |  |  |            move.l d0,d0
    8c7a:	|  |  |  |            move.w d2,d1
    8c7c:	|  |  |  |            muls.w d0,d1
    8c7e:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8c82:	|  |  |  |            cmpi.w #100,98(sp)
    8c88:	|  |  |  |        ,-- bls.s 8c90 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8c8a:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8c90:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8c92:	|  |  |  '----------> moveq #0,d0
    8c94:	|  |  |               move.w 98(sp),d0
    8c98:	|  |  |               add.l d0,d0
    8c9a:	|  |  |               move.l d0,52(sp)
    8c9e:	|  |  |               moveq #2,d0
    8ca0:	|  |  |               move.l d0,48(sp)
    8ca4:	|  |  |               move.l 1c7d8 <SysBase>,d0
    8caa:	|  |  |               movea.l d0,a6
    8cac:	|  |  |               move.l 52(sp),d0
    8cb0:	|  |  |               move.l 48(sp),d1
    8cb4:	|  |  |               jsr -684(a6)
    8cb8:	|  |  |               move.l d0,44(sp)
    8cbc:	|  |  |               movea.l 44(sp),a1
    8cc0:	|  |  |               movea.l 112(sp),a0
    8cc4:	|  |  |               movea.l 8(a0),a0
    8cc8:	|  |  |               move.l 100(sp),d1
    8ccc:	|  |  |               move.l d1,d0
    8cce:	|  |  |               lsl.l #3,d0
    8cd0:	|  |  |               sub.l d1,d0
    8cd2:	|  |  |               add.l d0,d0
    8cd4:	|  |  |               add.l d0,d0
    8cd6:	|  |  |               adda.l d0,a0
    8cd8:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8cdc:	|  |  |               move.l 1c7c0 <bigDataFile>,40(sp)
    8ce4:	|  |  |               movea.l 112(sp),a0
    8ce8:	|  |  |               movea.l 8(a0),a0
    8cec:	|  |  |               move.l 100(sp),d1
    8cf0:	|  |  |               move.l d1,d0
    8cf2:	|  |  |               lsl.l #3,d0
    8cf4:	|  |  |               sub.l d1,d0
    8cf6:	|  |  |               add.l d0,d0
    8cf8:	|  |  |               add.l d0,d0
    8cfa:	|  |  |               adda.l d0,a0
    8cfc:	|  |  |               move.l 24(a0),36(sp)
    8d02:	|  |  |               moveq #2,d1
    8d04:	|  |  |               move.l d1,32(sp)
    8d08:	|  |  |               move.w 98(sp),d0
    8d0c:	|  |  |               lsr.w #1,d0
    8d0e:	|  |  |               move.w d0,d0
    8d10:	|  |  |               andi.l #65535,d0
    8d16:	|  |  |               move.l d0,28(sp)
    8d1a:	|  |  |               move.l 1c7e0 <DOSBase>,d0
    8d20:	|  |  |               movea.l d0,a6
    8d22:	|  |  |               move.l 40(sp),d1
    8d26:	|  |  |               move.l 36(sp),d2
    8d2a:	|  |  |               move.l 32(sp),d3
    8d2e:	|  |  |               move.l 28(sp),d4
    8d32:	|  |  |               jsr -324(a6)
    8d36:	|  |  |               move.l d0,24(sp)
    8d3a:	|  |  |               move.l 24(sp),d0
    8d3e:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8d42:	|  |  |           ,-- bne.s 8d56 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8d44:	|  |  |           |   pea 18f87 <PutChar+0x1411>
    8d4a:	|  |  |           |   jsr 170d4 <KPrintF>
    8d50:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8d52:	|  |  |           |   clr.w d0
    8d54:	+--|--|-----------|-- bra.s 8d7c <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    8d56:	|  |  |           '-> addq.l #1,100(sp)
    8d5a:	|  |  '-------------> move.l 100(sp),d0
    8d5e:	|  |                  cmp.l 74(sp),d0
    8d62:	|  '----------------- blt.w 8a86 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    8d66:	|                     jsr 74da <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    8d6c:	|                     pea 18fba <PutChar+0x1444>
    8d72:	|                     jsr 170d4 <KPrintF>
    8d78:	|                     addq.l #4,sp
	return TRUE;
    8d7a:	|                     moveq #1,d0
}
    8d7c:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    8d80:	                      lea 84(sp),sp
    8d84:	                      rts

00008d86 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8d86:	                   lea -16(sp),sp
    8d8a:	                   move.l d2,-(sp)
    8d8c:	                   move.l 32(sp),d0
    8d90:	                   move.w d0,d0
    8d92:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    8d96:	                   movea.l 28(sp),a0
    8d9a:	                   move.l (a0),d2
    8d9c:	                   movea.l 24(sp),a0
    8da0:	                   move.l 8(a0),d0
    8da4:	                   move.l d0,-(sp)
    8da6:	                   jsr 17506 <__floatsisf>
    8dac:	                   addq.l #4,sp
    8dae:	                   move.l d0,-(sp)
    8db0:	                   move.l d2,-(sp)
    8db2:	                   jsr 177fa <__subsf3>
    8db8:	                   addq.l #8,sp
    8dba:	                   move.l d0,-(sp)
    8dbc:	                   jsr 1749e <__fixsfsi>
    8dc2:	                   addq.l #4,sp
    8dc4:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    8dc8:	                   movea.l 28(sp),a0
    8dcc:	                   move.l 4(a0),d2
    8dd0:	                   movea.l 24(sp),a0
    8dd4:	                   move.l 12(a0),d0
    8dd8:	                   move.l d0,-(sp)
    8dda:	                   jsr 17506 <__floatsisf>
    8de0:	                   addq.l #4,sp
    8de2:	                   move.l d0,-(sp)
    8de4:	                   move.l d2,-(sp)
    8de6:	                   jsr 177fa <__subsf3>
    8dec:	                   addq.l #8,sp
    8dee:	                   move.l d0,-(sp)
    8df0:	                   jsr 1749e <__fixsfsi>
    8df6:	                   addq.l #4,sp
    8df8:	                   move.w d0,8(sp)

	if( x < 0)
    8dfc:	                   tst.w 18(sp)
    8e00:	               ,-- bge.s 8e34 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    8e02:	               |   movea.l 28(sp),a0
    8e06:	               |   move.l (a0),d2
    8e08:	               |   movea.l 24(sp),a0
    8e0c:	               |   move.l 8(a0),d0
    8e10:	               |   move.l d0,-(sp)
    8e12:	               |   jsr 17506 <__floatsisf>
    8e18:	               |   addq.l #4,sp
    8e1a:	               |   move.l d0,-(sp)
    8e1c:	               |   move.l d2,-(sp)
    8e1e:	               |   jsr 177fa <__subsf3>
    8e24:	               |   addq.l #8,sp
    8e26:	               |   move.l d0,-(sp)
    8e28:	               |   jsr 1749e <__fixsfsi>
    8e2e:	               |   addq.l #4,sp
    8e30:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    8e34:	               '-> movea.w 8(sp),a1
    8e38:	                   movea.w 18(sp),a0
    8e3c:	                   pea 1 <_start+0x1>
    8e40:	                   move.l a1,-(sp)
    8e42:	                   move.l a0,-(sp)
    8e44:	                   move.l 40(sp),-(sp)
    8e48:	                   move.l 40(sp),-(sp)
    8e4c:	                   jsr 2be4 <CstScaleSprite>
    8e52:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8e56:	                   movea.l 28(sp),a0
    8e5a:	                   move.l 118(a0),d0
    8e5e:	                   moveq #8,d1
    8e60:	                   and.l d1,d0
    8e62:	   ,-------------- beq.w 8f2e <scaleSprite+0x1a8>
		if (single->xhot < 0)
    8e66:	   |               movea.l 24(sp),a0
    8e6a:	   |               move.l 8(a0),d0
    8e6e:	   |  ,----------- bpl.s 8eaa <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8e70:	   |  |            move.w 18(sp),d0
    8e74:	   |  |            tst.w 6(sp)
    8e78:	   |  |     ,----- beq.s 8e92 <scaleSprite+0x10c>
    8e7a:	   |  |     |      movea.l 24(sp),a0
    8e7e:	   |  |     |      move.l (a0),d1
    8e80:	   |  |     |      move.l d1,d2
    8e82:	   |  |     |      movea.l 24(sp),a0
    8e86:	   |  |     |      move.l 8(a0),d1
    8e8a:	   |  |     |      move.l d1,d1
    8e8c:	   |  |     |      movea.w d2,a0
    8e8e:	   |  |     |      suba.w d1,a0
    8e90:	   |  |     |  ,-- bra.s 8ea0 <scaleSprite+0x11a>
    8e92:	   |  |     '--|-> movea.l 24(sp),a0
    8e96:	   |  |        |   move.l 8(a0),d1
    8e9a:	   |  |        |   move.l d1,d1
    8e9c:	   |  |        |   movea.w d1,a0
    8e9e:	   |  |        |   addq.w #1,a0
    8ea0:	   |  |        '-> move.w d0,d1
    8ea2:	   |  |            sub.w a0,d1
    8ea4:	   |  |            move.w d1,16(sp)
    8ea8:	   |  |  ,-------- bra.s 8ee2 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8eaa:	   |  '--|-------> move.w 18(sp),d1
    8eae:	   |     |         tst.w 6(sp)
    8eb2:	   |     |  ,----- beq.s 8ed0 <scaleSprite+0x14a>
    8eb4:	   |     |  |      movea.l 24(sp),a0
    8eb8:	   |     |  |      move.l (a0),d0
    8eba:	   |     |  |      move.l d0,d2
    8ebc:	   |     |  |      movea.l 24(sp),a0
    8ec0:	   |     |  |      move.l 8(a0),d0
    8ec4:	   |     |  |      move.l d0,d0
    8ec6:	   |     |  |      movea.w d2,a0
    8ec8:	   |     |  |      suba.w d0,a0
    8eca:	   |     |  |      move.w a0,d0
    8ecc:	   |     |  |      subq.w #1,d0
    8ece:	   |     |  |  ,-- bra.s 8eda <scaleSprite+0x154>
    8ed0:	   |     |  '--|-> movea.l 24(sp),a0
    8ed4:	   |     |     |   move.l 8(a0),d0
    8ed8:	   |     |     |   move.l d0,d0
    8eda:	   |     |     '-> movea.w d1,a0
    8edc:	   |     |         suba.w d0,a0
    8ede:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8ee2:	   |     '-------> movea.l 28(sp),a0
    8ee6:	   |               move.l 24(a0),d0
    8eea:	   |               move.l d0,d1
    8eec:	   |               movea.l 24(sp),a0
    8ef0:	   |               move.l 12(a0),d0
    8ef4:	   |               move.l d0,d0
    8ef6:	   |               sub.w d0,d1
    8ef8:	   |               move.w 8(sp),d0
    8efc:	   |               movea.w d1,a0
    8efe:	   |               adda.w d0,a0
    8f00:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    8f04:	   |               movea.l 24(sp),a0
    8f08:	   |               move.l (a0),d0
    8f0a:	   |               move.l d0,d0
    8f0c:	   |               move.w 16(sp),d1
    8f10:	   |               add.w d0,d1
    8f12:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    8f16:	   |               movea.l 24(sp),a0
    8f1a:	   |               move.l 4(a0),d0
    8f1e:	   |               move.l d0,d0
    8f20:	   |               movea.w 14(sp),a0
    8f24:	   |               adda.w d0,a0
    8f26:	   |               move.w a0,10(sp)
    8f2a:	,--|-------------- bra.w 9016 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    8f2e:	|  '-------------> move.w 18(sp),d1
    8f32:	|                  move.l 1c88e <cameraX>,d0
    8f38:	|                  move.l d0,d0
    8f3a:	|                  sub.w d0,d1
    8f3c:	|                  move.w d1,18(sp)
		y -= cameraY;
    8f40:	|                  move.w 8(sp),d1
    8f44:	|                  move.l 1c892 <cameraY>,d0
    8f4a:	|                  move.l d0,d0
    8f4c:	|                  sub.w d0,d1
    8f4e:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    8f52:	|                  movea.l 24(sp),a0
    8f56:	|                  move.l 8(a0),d0
    8f5a:	|     ,----------- bpl.s 8f96 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8f5c:	|     |            move.w 18(sp),d0
    8f60:	|     |            tst.w 6(sp)
    8f64:	|     |     ,----- beq.s 8f7e <scaleSprite+0x1f8>
    8f66:	|     |     |      movea.l 24(sp),a0
    8f6a:	|     |     |      move.l (a0),d1
    8f6c:	|     |     |      move.l d1,d2
    8f6e:	|     |     |      movea.l 24(sp),a0
    8f72:	|     |     |      move.l 8(a0),d1
    8f76:	|     |     |      move.l d1,d1
    8f78:	|     |     |      movea.w d2,a0
    8f7a:	|     |     |      suba.w d1,a0
    8f7c:	|     |     |  ,-- bra.s 8f8c <scaleSprite+0x206>
    8f7e:	|     |     '--|-> movea.l 24(sp),a0
    8f82:	|     |        |   move.l 8(a0),d1
    8f86:	|     |        |   move.l d1,d1
    8f88:	|     |        |   movea.w d1,a0
    8f8a:	|     |        |   addq.w #1,a0
    8f8c:	|     |        '-> move.w d0,d1
    8f8e:	|     |            sub.w a0,d1
    8f90:	|     |            move.w d1,16(sp)
    8f94:	|     |  ,-------- bra.s 8fce <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8f96:	|     '--|-------> move.w 18(sp),d1
    8f9a:	|        |         tst.w 6(sp)
    8f9e:	|        |  ,----- beq.s 8fbc <scaleSprite+0x236>
    8fa0:	|        |  |      movea.l 24(sp),a0
    8fa4:	|        |  |      move.l (a0),d0
    8fa6:	|        |  |      move.l d0,d2
    8fa8:	|        |  |      movea.l 24(sp),a0
    8fac:	|        |  |      move.l 8(a0),d0
    8fb0:	|        |  |      move.l d0,d0
    8fb2:	|        |  |      movea.w d2,a0
    8fb4:	|        |  |      suba.w d0,a0
    8fb6:	|        |  |      move.w a0,d0
    8fb8:	|        |  |      subq.w #1,d0
    8fba:	|        |  |  ,-- bra.s 8fc6 <scaleSprite+0x240>
    8fbc:	|        |  '--|-> movea.l 24(sp),a0
    8fc0:	|        |     |   move.l 8(a0),d0
    8fc4:	|        |     |   move.l d0,d0
    8fc6:	|        |     '-> movea.w d1,a0
    8fc8:	|        |         suba.w d0,a0
    8fca:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8fce:	|        '-------> movea.l 28(sp),a0
    8fd2:	|                  move.l 24(a0),d0
    8fd6:	|                  move.l d0,d1
    8fd8:	|                  movea.l 24(sp),a0
    8fdc:	|                  move.l 12(a0),d0
    8fe0:	|                  move.l d0,d0
    8fe2:	|                  sub.w d0,d1
    8fe4:	|                  move.w 8(sp),d0
    8fe8:	|                  movea.w d1,a0
    8fea:	|                  adda.w d0,a0
    8fec:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    8ff0:	|                  movea.l 24(sp),a0
    8ff4:	|                  move.l (a0),d0
    8ff6:	|                  move.l d0,d0
    8ff8:	|                  move.w 16(sp),d1
    8ffc:	|                  add.w d0,d1
    8ffe:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    9002:	|                  movea.l 24(sp),a0
    9006:	|                  move.l 4(a0),d0
    900a:	|                  move.l d0,d0
    900c:	|                  movea.w 14(sp),a0
    9010:	|                  adda.w d0,a0
    9012:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9016:	'----------------> move.l 1c794 <input+0xa>,d1
    901c:	                   moveq #0,d0
    901e:	                   move.w 16(sp),d0
    9022:	                   cmp.l d1,d0
    9024:	            ,----- bgt.s 905a <scaleSprite+0x2d4>
    9026:	            |      move.l 1c794 <input+0xa>,d1
    902c:	            |      moveq #0,d0
    902e:	            |      move.w 12(sp),d0
    9032:	            |      cmp.l d1,d0
    9034:	            +----- blt.s 905a <scaleSprite+0x2d4>
    9036:	            |      move.l 1c798 <input+0xe>,d1
    903c:	            |      moveq #0,d0
    903e:	            |      move.w 14(sp),d0
    9042:	            |      cmp.l d1,d0
    9044:	            +----- bgt.s 905a <scaleSprite+0x2d4>
    9046:	            |      move.l 1c798 <input+0xe>,d1
    904c:	            |      moveq #0,d0
    904e:	            |      move.w 10(sp),d0
    9052:	            |      cmp.l d1,d0
    9054:	            +----- blt.s 905a <scaleSprite+0x2d4>
		return TRUE;
    9056:	            |      moveq #1,d0
    9058:	            |  ,-- bra.s 905c <scaleSprite+0x2d6>
	}
	return FALSE;
    905a:	            '--|-> clr.w d0
    905c:	               '-> move.l (sp)+,d2
    905e:	                   lea 16(sp),sp
    9062:	                   rts

00009064 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9064:	    move.l 4(sp),d0
    9068:	,-- bpl.s 906c <TF_abs+0x8>
    906a:	|   neg.l d0
}
    906c:	'-> rts

0000906e <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    906e:	             lea -28(sp),sp
    9072:	             move.l a6,-(sp)
    9074:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9076:	             move.l #132,28(sp)
    907e:	             clr.l 24(sp)
    9082:	             move.l 1c7d8 <SysBase>,d0
    9088:	             movea.l d0,a6
    908a:	             move.l 28(sp),d0
    908e:	             move.l 24(sp),d1
    9092:	             jsr -684(a6)
    9096:	             move.l d0,20(sp)
    909a:	             move.l 20(sp),d0
    909e:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    90a2:	         ,-- bne.s 90aa <addPerson+0x3c>
    90a4:	         |   clr.w d0
    90a6:	,--------|-- bra.w 92da <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    90aa:	|        '-> move.l 48(sp),-(sp)
    90ae:	|            jsr d466 <loadObjectType>
    90b4:	|            addq.l #4,sp
    90b6:	|            movea.l 16(sp),a0
    90ba:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    90be:	|            movea.l 16(sp),a0
    90c2:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    90ca:	|            movea.l 16(sp),a0
    90ce:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    90d2:	|            movea.l 16(sp),a0
    90d6:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    90da:	|            move.l 44(sp),-(sp)
    90de:	|            jsr 17506 <__floatsisf>
    90e4:	|            addq.l #4,sp
    90e6:	|            move.l d0,d2
    90e8:	|            move.l 40(sp),-(sp)
    90ec:	|            jsr 17506 <__floatsisf>
    90f2:	|            addq.l #4,sp
    90f4:	|            move.l d2,-(sp)
    90f6:	|            move.l d0,-(sp)
    90f8:	|            move.l 24(sp),-(sp)
    90fc:	|            jsr abbc <moveAndScale>
    9102:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9106:	|            movea.l 16(sp),a0
    910a:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    910e:	|            movea.l 16(sp),a0
    9112:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9118:	|            movea.l 16(sp),a0
    911c:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9122:	|            movea.l 16(sp),a0
    9126:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    912a:	|            movea.l 16(sp),a0
    912e:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9132:	|            movea.l 16(sp),a0
    9136:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    913c:	|            movea.l 16(sp),a0
    9140:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9144:	|            movea.l 16(sp),a0
    9148:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9150:	|            movea.l 16(sp),a0
    9154:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    915c:	|            movea.l 16(sp),a0
    9160:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9164:	|            movea.l 16(sp),a0
    9168:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    916c:	|            movea.l 16(sp),a0
    9170:	|            movea.l 114(a0),a0
    9174:	|            move.l 24(a0),d0
    9178:	|            movea.l 16(sp),a0
    917c:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9180:	|            movea.l 16(sp),a0
    9184:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9188:	|            movea.l 16(sp),a0
    918c:	|            movea.l 114(a0),a0
    9190:	|            move.l 32(a0),d0
    9194:	|            movea.l 16(sp),a0
    9198:	|            move.l d0,122(a0)
    newPerson->r = 0;
    919c:	|            movea.l 16(sp),a0
    91a0:	|            clr.b 126(a0)
    newPerson->g = 0;
    91a4:	|            movea.l 16(sp),a0
    91a8:	|            clr.b 127(a0)
    newPerson->b = 0;
    91ac:	|            movea.l 16(sp),a0
    91b0:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    91b4:	|            movea.l 16(sp),a0
    91b8:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    91bc:	|            movea.l 16(sp),a0
    91c0:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    91c4:	|            movea.l 16(sp),a0
    91c8:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    91ce:	|            clr.l -(sp)
    91d0:	|            move.l 20(sp),-(sp)
    91d4:	|            jsr 4120 <setFrames>
    91da:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    91dc:	|            movea.l 52(sp),a0
    91e0:	|            movea.l (a0),a0
    91e2:	|            movea.l (a0),a0
    91e4:	|            movea.l 4(a0),a0
    91e8:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    91ec:	|     ,----- bpl.s 91f6 <addPerson+0x188>
    91ee:	|     |      move.l 12(sp),d0
    91f2:	|     |      neg.l d0
    91f4:	|     |  ,-- bra.s 91f8 <addPerson+0x18a>
    91f6:	|     '--|-> moveq #1,d0
    91f8:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    91fc:	|            movea.l 52(sp),a0
    9200:	|            movea.l (a0),a0
    9202:	|            movea.l (a0),a0
    9204:	|            movea.l (a0),a0
    9206:	|            move.l 8(a0),d0
    920a:	|            cmp.l 8(sp),d0
    920e:	|     ,----- bgt.s 9240 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    9210:	|     |      tst.l 12(sp)
    9214:	|     |  ,-- bge.s 9222 <addPerson+0x1b4>
            newPerson->height = 5;
    9216:	|     |  |   movea.l 16(sp),a0
    921a:	|     |  |   moveq #5,d0
    921c:	|     |  |   move.l d0,20(a0)
    9220:	|  ,--|--|-- bra.s 926c <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9222:	|  |  |  '-> movea.l 52(sp),a0
    9226:	|  |  |      movea.l (a0),a0
    9228:	|  |  |      movea.l (a0),a0
    922a:	|  |  |      movea.l (a0),a0
    922c:	|  |  |      movea.l 16(a0),a0
    9230:	|  |  |      move.l 12(a0),d0
    9234:	|  |  |      addq.l #5,d0
    9236:	|  |  |      movea.l 16(sp),a0
    923a:	|  |  |      move.l d0,20(a0)
    923e:	|  +--|----- bra.s 926c <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9240:	|  |  '----> movea.l 52(sp),a0
    9244:	|  |         movea.l (a0),a0
    9246:	|  |         movea.l (a0),a0
    9248:	|  |         movea.l (a0),a0
    924a:	|  |         movea.l 16(a0),a0
    924e:	|  |         move.l 8(sp),d1
    9252:	|  |         move.l d1,d0
    9254:	|  |         lsl.l #3,d0
    9256:	|  |         sub.l d1,d0
    9258:	|  |         add.l d0,d0
    925a:	|  |         add.l d0,d0
    925c:	|  |         adda.l d0,a0
    925e:	|  |         move.l 12(a0),d0
    9262:	|  |         addq.l #5,d0
    9264:	|  |         movea.l 16(sp),a0
    9268:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    926c:	|  '-------> move.l #116792,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9274:	|        ,-- bra.s 9284 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9276:	|     ,--|-> movea.l 32(sp),a0
    927a:	|     |  |   move.l (a0),d0
    927c:	|     |  |   moveq #36,d1
    927e:	|     |  |   add.l d0,d1
    9280:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9284:	|     |  '-> movea.l 32(sp),a0
    9288:	|     |      move.l (a0),d0
    928a:	|     |  ,-- beq.s 92b2 <addPerson+0x244>
    928c:	|     |  |   movea.l 32(sp),a0
    9290:	|     |  |   movea.l (a0),a0
    9292:	|     |  |   move.l 4(a0),d2
    9296:	|     |  |   move.l 44(sp),-(sp)
    929a:	|     |  |   jsr 17506 <__floatsisf>
    92a0:	|     |  |   addq.l #4,sp
    92a2:	|     |  |   move.l d0,-(sp)
    92a4:	|     |  |   move.l d2,-(sp)
    92a6:	|     |  |   jsr 1772c <__ltsf2>
    92ac:	|     |  |   addq.l #8,sp
    92ae:	|     |  |   tst.l d0
    92b0:	|     '--|-- blt.s 9276 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    92b2:	|        '-> movea.l 32(sp),a0
    92b6:	|            move.l (a0),d0
    92b8:	|            movea.l 16(sp),a0
    92bc:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    92c0:	|            movea.l 32(sp),a0
    92c4:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    92c8:	|            movea.l 16(sp),a0
    92cc:	|            move.l 114(a0),d0
    92d0:	|            sne d0
    92d2:	|            neg.b d0
    92d4:	|            move.b d0,d0
    92d6:	|            andi.w #255,d0
}
    92da:	'----------> move.l (sp)+,d2
    92dc:	             movea.l (sp)+,a6
    92de:	             lea 28(sp),sp
    92e2:	             rts

000092e4 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    92e4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    92e6:	       move.l 8(sp),-(sp)
    92ea:	       jsr a474 <findPerson>
    92f0:	       addq.l #4,sp
    92f2:	       move.l d0,(sp)
    if (moveMe) {
    92f4:	,----- beq.s 9328 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    92f6:	|      movea.l (sp),a0
    92f8:	|      move.l 68(a0),d0
    92fc:	|  ,-- beq.s 930e <animatePerson+0x2a>
    92fe:	|  |   movea.l (sp),a0
    9300:	|  |   move.l 68(a0),d0
    9304:	|  |   move.l d0,-(sp)
    9306:	|  |   jsr 4f7e <abortFunction>
    930c:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    930e:	|  '-> movea.l (sp),a0
    9310:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9314:	|      movea.l (sp),a0
    9316:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    931a:	|      movea.l (sp),a0
    931c:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9320:	|      movea.l (sp),a0
    9322:	|      move.l 12(sp),72(a0)
    }
}
    9328:	'----> nop
    932a:	       addq.l #4,sp
    932c:	       rts

0000932e <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    932e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9330:	       move.l 8(sp),-(sp)
    9334:	       jsr a474 <findPerson>
    933a:	       addq.l #4,sp
    933c:	       move.l d0,(sp)
    if (moveMe) {
    933e:	,----- beq.s 9380 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9340:	|      movea.l (sp),a0
    9342:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9346:	|      movea.l (sp),a0
    9348:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    934e:	|      move.l (sp),-(sp)
    9350:	|      jsr ad4a <rethinkAngle>
    9356:	|      addq.l #4,sp
        if (moveMe->walking) {
    9358:	|      movea.l (sp),a0
    935a:	|      move.w 64(a0),d0
    935e:	|  ,-- beq.s 9372 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9360:	|  |   pea 1 <_start+0x1>
    9364:	|  |   move.l 4(sp),-(sp)
    9368:	|  |   jsr 4120 <setFrames>
    936e:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9370:	+--|-- bra.s 9380 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9372:	|  '-> clr.l -(sp)
    9374:	|      move.l 4(sp),-(sp)
    9378:	|      jsr 4120 <setFrames>
    937e:	|      addq.l #8,sp
}
    9380:	'----> nop
    9382:	       addq.l #4,sp
    9384:	       rts

00009386 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9386:	             lea -36(sp),sp
    938a:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    938c:	             movea.l 44(sp),a0
    9390:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9396:	             moveq #12,d0
    9398:	             move.l d0,28(sp)
    939c:	             clr.l 24(sp)
    93a0:	             move.l 1c7d8 <SysBase>,d0
    93a6:	             movea.l d0,a6
    93a8:	             move.l 28(sp),d0
    93ac:	             move.l 24(sp),d1
    93b0:	             jsr -684(a6)
    93b4:	             move.l d0,20(sp)
    93b8:	             move.l 20(sp),d0
    93bc:	             move.l d0,16(sp)
	if (!(newAnim)) {
    93c0:	         ,-- bne.s 93d6 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    93c2:	         |   pea 18fd4 <PutChar+0x145e>
    93c8:	         |   jsr 170d4 <KPrintF>
    93ce:	         |   addq.l #4,sp
		return NULL;
    93d0:	         |   moveq #0,d0
    93d2:	,--------|-- bra.w 9528 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    93d6:	|        '-> movea.l 44(sp),a0
    93da:	|            move.l (a0),d0
    93dc:	|            movea.l 16(sp),a0
    93e0:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    93e2:	|            movea.l 16(sp),a0
    93e6:	|            movea.l (a0),a0
    93e8:	|            move.l 4(a0),d0
    93ec:	|            addq.l #1,d0
    93ee:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    93f2:	|            movea.l 16(sp),a0
    93f6:	|            move.l 32(sp),8(a0)

	if (num) {
    93fc:	|  ,-------- beq.w 951c <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9400:	|  |         move.l 32(sp),d1
    9404:	|  |         move.l d1,d0
    9406:	|  |         add.l d0,d0
    9408:	|  |         add.l d1,d0
    940a:	|  |         add.l d0,d0
    940c:	|  |         add.l d0,d0
    940e:	|  |         move.l d0,12(sp)
    9412:	|  |         clr.l 8(sp)
    9416:	|  |         move.l 1c7d8 <SysBase>,d0
    941c:	|  |         movea.l d0,a6
    941e:	|  |         move.l 12(sp),d0
    9422:	|  |         move.l 8(sp),d1
    9426:	|  |         jsr -684(a6)
    942a:	|  |         move.l d0,4(sp)
    942e:	|  |         move.l 4(sp),d0
    9432:	|  |         movea.l 16(sp),a0
    9436:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    943a:	|  |         movea.l 16(sp),a0
    943e:	|  |         move.l 4(a0),d0
    9442:	|  |     ,-- bne.s 9458 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9444:	|  |     |   pea 18fd4 <PutChar+0x145e>
    944a:	|  |     |   jsr 170d4 <KPrintF>
    9450:	|  |     |   addq.l #4,sp
			return NULL;
    9452:	|  |     |   moveq #0,d0
    9454:	+--|-----|-- bra.w 9528 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9458:	|  |     '-> clr.l 36(sp)
    945c:	|  |     ,-- bra.w 950e <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9460:	|  |  ,--|-> movea.l 44(sp),a0
    9464:	|  |  |  |   movea.l 4(a0),a0
    9468:	|  |  |  |   move.l 36(sp),d1
    946c:	|  |  |  |   move.l d1,d0
    946e:	|  |  |  |   add.l d0,d0
    9470:	|  |  |  |   add.l d1,d0
    9472:	|  |  |  |   add.l d0,d0
    9474:	|  |  |  |   add.l d0,d0
    9476:	|  |  |  |   lea (0,a0,d0.l),a1
    947a:	|  |  |  |   movea.l 16(sp),a0
    947e:	|  |  |  |   movea.l 4(a0),a0
    9482:	|  |  |  |   move.l 36(sp),d1
    9486:	|  |  |  |   move.l d1,d0
    9488:	|  |  |  |   add.l d0,d0
    948a:	|  |  |  |   add.l d1,d0
    948c:	|  |  |  |   add.l d0,d0
    948e:	|  |  |  |   add.l d0,d0
    9490:	|  |  |  |   adda.l d0,a0
    9492:	|  |  |  |   move.l (a1),d0
    9494:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9496:	|  |  |  |   movea.l 44(sp),a0
    949a:	|  |  |  |   movea.l 4(a0),a0
    949e:	|  |  |  |   move.l 36(sp),d1
    94a2:	|  |  |  |   move.l d1,d0
    94a4:	|  |  |  |   add.l d0,d0
    94a6:	|  |  |  |   add.l d1,d0
    94a8:	|  |  |  |   add.l d0,d0
    94aa:	|  |  |  |   add.l d0,d0
    94ac:	|  |  |  |   lea (0,a0,d0.l),a1
    94b0:	|  |  |  |   movea.l 16(sp),a0
    94b4:	|  |  |  |   movea.l 4(a0),a0
    94b8:	|  |  |  |   move.l 36(sp),d1
    94bc:	|  |  |  |   move.l d1,d0
    94be:	|  |  |  |   add.l d0,d0
    94c0:	|  |  |  |   add.l d1,d0
    94c2:	|  |  |  |   add.l d0,d0
    94c4:	|  |  |  |   add.l d0,d0
    94c6:	|  |  |  |   adda.l d0,a0
    94c8:	|  |  |  |   move.l 4(a1),d0
    94cc:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    94d0:	|  |  |  |   movea.l 44(sp),a0
    94d4:	|  |  |  |   movea.l 4(a0),a0
    94d8:	|  |  |  |   move.l 36(sp),d1
    94dc:	|  |  |  |   move.l d1,d0
    94de:	|  |  |  |   add.l d0,d0
    94e0:	|  |  |  |   add.l d1,d0
    94e2:	|  |  |  |   add.l d0,d0
    94e4:	|  |  |  |   add.l d0,d0
    94e6:	|  |  |  |   lea (0,a0,d0.l),a1
    94ea:	|  |  |  |   movea.l 16(sp),a0
    94ee:	|  |  |  |   movea.l 4(a0),a0
    94f2:	|  |  |  |   move.l 36(sp),d1
    94f6:	|  |  |  |   move.l d1,d0
    94f8:	|  |  |  |   add.l d0,d0
    94fa:	|  |  |  |   add.l d1,d0
    94fc:	|  |  |  |   add.l d0,d0
    94fe:	|  |  |  |   add.l d0,d0
    9500:	|  |  |  |   adda.l d0,a0
    9502:	|  |  |  |   move.l 8(a1),d0
    9506:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    950a:	|  |  |  |   addq.l #1,36(sp)
    950e:	|  |  |  '-> move.l 36(sp),d0
    9512:	|  |  |      cmp.l 32(sp),d0
    9516:	|  |  '----- blt.w 9460 <copyAnim+0xda>
    951a:	|  |     ,-- bra.s 9524 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    951c:	|  '-----|-> movea.l 16(sp),a0
    9520:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9524:	|        '-> move.l 16(sp),d0
}
    9528:	'----------> movea.l (sp)+,a6
    952a:	             lea 36(sp),sp
    952e:	             rts

00009530 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9530:	                lea -44(sp),sp
    9534:	                move.l a6,-(sp)
    9536:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9538:	                moveq #12,d0
    953a:	                move.l d0,40(sp)
    953e:	                clr.l 36(sp)
    9542:	                move.l 1c7d8 <SysBase>,d0
    9548:	                movea.l d0,a6
    954a:	                move.l 40(sp),d0
    954e:	                move.l 36(sp),d1
    9552:	                jsr -684(a6)
    9556:	                move.l d0,32(sp)
    955a:	                move.l 32(sp),d0
    955e:	                move.l d0,28(sp)
	if( !newP) {
    9562:	            ,-- bne.s 9578 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9564:	            |   pea 18ff5 <PutChar+0x147f>
    956a:	            |   jsr 170d4 <KPrintF>
    9570:	            |   addq.l #4,sp
		return NULL;
    9572:	            |   moveq #0,d0
    9574:	,-----------|-- bra.w 9748 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9578:	|           '-> movea.l 28(sp),a0
    957c:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9582:	|               move.l 56(sp),d1
    9586:	|               move.l d1,d0
    9588:	|               add.l d0,d0
    958a:	|               add.l d1,d0
    958c:	|               add.l d0,d0
    958e:	|               add.l d0,d0
    9590:	|               move.l d0,24(sp)
    9594:	|               clr.l 20(sp)
    9598:	|               move.l 1c7d8 <SysBase>,d0
    959e:	|               movea.l d0,a6
    95a0:	|               move.l 24(sp),d0
    95a4:	|               move.l 20(sp),d1
    95a8:	|               jsr -684(a6)
    95ac:	|               move.l d0,16(sp)
    95b0:	|               move.l 16(sp),d0
    95b4:	|               movea.l 28(sp),a0
    95b8:	|               move.l d0,4(a0)
	if( !newP->frames) {
    95bc:	|               movea.l 28(sp),a0
    95c0:	|               move.l 4(a0),d0
    95c4:	|           ,-- bne.s 95da <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    95c6:	|           |   pea 18ff5 <PutChar+0x147f>
    95cc:	|           |   jsr 170d4 <KPrintF>
    95d2:	|           |   addq.l #4,sp
		return NULL;
    95d4:	|           |   moveq #0,d0
    95d6:	+-----------|-- bra.w 9748 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    95da:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    95e0:	|               movea.l 60(sp),a0
    95e4:	|               move.l (a0),44(sp)
	while (a) {
    95e8:	|     ,-------- bra.w 973c <createPersonaAnim+0x20c>
		a --;
    95ec:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    95f0:	|  |  |         movea.l 28(sp),a0
    95f4:	|  |  |         movea.l 4(a0),a0
    95f8:	|  |  |         move.l 48(sp),d1
    95fc:	|  |  |         move.l d1,d0
    95fe:	|  |  |         add.l d0,d0
    9600:	|  |  |         add.l d1,d0
    9602:	|  |  |         add.l d0,d0
    9604:	|  |  |         add.l d0,d0
    9606:	|  |  |         adda.l d0,a0
    9608:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    960c:	|  |  |         movea.l 44(sp),a0
    9610:	|  |  |         move.l (a0),d0
    9612:	|  |  |         moveq #5,d1
    9614:	|  |  |         cmp.l d0,d1
    9616:	|  |  |     ,-- bne.s 9642 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9618:	|  |  |     |   movea.l 28(sp),a0
    961c:	|  |  |     |   movea.l 4(a0),a0
    9620:	|  |  |     |   move.l 48(sp),d1
    9624:	|  |  |     |   move.l d1,d0
    9626:	|  |  |     |   add.l d0,d0
    9628:	|  |  |     |   add.l d1,d0
    962a:	|  |  |     |   add.l d0,d0
    962c:	|  |  |     |   add.l d0,d0
    962e:	|  |  |     |   lea (0,a0,d0.l),a1
    9632:	|  |  |     |   movea.l 44(sp),a0
    9636:	|  |  |     |   move.l 4(a0),d0
    963a:	|  |  |     |   move.l d0,8(a1)
    963e:	|  |  |  ,--|-- bra.w 96ea <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9642:	|  |  |  |  '-> movea.l 44(sp),a0
    9646:	|  |  |  |      move.l (a0),d0
    9648:	|  |  |  |      moveq #2,d1
    964a:	|  |  |  |      cmp.l d0,d1
    964c:	|  |  |  |  ,-- bne.s 9678 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    964e:	|  |  |  |  |   movea.l 44(sp),a0
    9652:	|  |  |  |  |   move.l 4(a0),d2
    9656:	|  |  |  |  |   movea.l 28(sp),a0
    965a:	|  |  |  |  |   movea.l 4(a0),a0
    965e:	|  |  |  |  |   move.l 48(sp),d1
    9662:	|  |  |  |  |   move.l d1,d0
    9664:	|  |  |  |  |   add.l d0,d0
    9666:	|  |  |  |  |   add.l d1,d0
    9668:	|  |  |  |  |   add.l d0,d0
    966a:	|  |  |  |  |   add.l d0,d0
    966c:	|  |  |  |  |   adda.l d0,a0
    966e:	|  |  |  |  |   move.l d2,d0
    9670:	|  |  |  |  |   neg.l d0
    9672:	|  |  |  |  |   move.l d0,8(a0)
    9676:	|  |  |  +--|-- bra.s 96ea <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9678:	|  |  |  |  '-> movea.l 44(sp),a0
    967c:	|  |  |  |      move.l (a0),d0
    967e:	|  |  |  |      moveq #6,d1
    9680:	|  |  |  |      cmp.l d0,d1
    9682:	|  |  |  |  ,-- bne.s 96ca <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9684:	|  |  |  |  |   movea.l 44(sp),a0
    9688:	|  |  |  |  |   movea.l 4(a0),a0
    968c:	|  |  |  |  |   move.l (a0),d0
    968e:	|  |  |  |  |   move.l d0,-(sp)
    9690:	|  |  |  |  |   pea 1 <_start+0x1>
    9694:	|  |  |  |  |   lea 20(sp),a0
    9698:	|  |  |  |  |   move.l a0,-(sp)
    969a:	|  |  |  |  |   jsr 14610 <getValueType>
    96a0:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    96a4:	|  |  |  |  |   movea.l 44(sp),a0
    96a8:	|  |  |  |  |   movea.l 4(a0),a0
    96ac:	|  |  |  |  |   movea.l (a0),a0
    96ae:	|  |  |  |  |   move.l 8(a0),d0
    96b2:	|  |  |  |  |   move.l d0,-(sp)
    96b4:	|  |  |  |  |   pea 1 <_start+0x1>
    96b8:	|  |  |  |  |   lea 16(sp),a0
    96bc:	|  |  |  |  |   move.l a0,-(sp)
    96be:	|  |  |  |  |   jsr 14610 <getValueType>
    96c4:	|  |  |  |  |   lea 12(sp),sp
    96c8:	|  |  |  +--|-- bra.s 96ea <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    96ca:	|  |  |  |  '-> move.l 44(sp),d0
    96ce:	|  |  |  |      move.l d0,-(sp)
    96d0:	|  |  |  |      pea 1 <_start+0x1>
    96d4:	|  |  |  |      lea 20(sp),a0
    96d8:	|  |  |  |      move.l a0,-(sp)
    96da:	|  |  |  |      jsr 14610 <getValueType>
    96e0:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    96e4:	|  |  |  |      moveq #1,d0
    96e6:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    96ea:	|  |  |  '----> move.l 60(sp),-(sp)
    96ee:	|  |  |         jsr 14f94 <trimStack>
    96f4:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    96f6:	|  |  |         movea.l 28(sp),a0
    96fa:	|  |  |         movea.l 4(a0),a0
    96fe:	|  |  |         move.l 48(sp),d1
    9702:	|  |  |         move.l d1,d0
    9704:	|  |  |         add.l d0,d0
    9706:	|  |  |         add.l d1,d0
    9708:	|  |  |         add.l d0,d0
    970a:	|  |  |         add.l d0,d0
    970c:	|  |  |         adda.l d0,a0
    970e:	|  |  |         move.l 12(sp),d0
    9712:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9714:	|  |  |         movea.l 28(sp),a0
    9718:	|  |  |         movea.l 4(a0),a0
    971c:	|  |  |         move.l 48(sp),d1
    9720:	|  |  |         move.l d1,d0
    9722:	|  |  |         add.l d0,d0
    9724:	|  |  |         add.l d1,d0
    9726:	|  |  |         add.l d0,d0
    9728:	|  |  |         add.l d0,d0
    972a:	|  |  |         adda.l d0,a0
    972c:	|  |  |         move.l 8(sp),d0
    9730:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9734:	|  |  |         movea.l 60(sp),a0
    9738:	|  |  |         move.l (a0),44(sp)
	while (a) {
    973c:	|  |  '-------> tst.l 48(sp)
    9740:	|  '----------- bne.w 95ec <createPersonaAnim+0xbc>
	}

	return newP;
    9744:	|               move.l 28(sp),d0
}
    9748:	'-------------> move.l (sp)+,d2
    974a:	                movea.l (sp)+,a6
    974c:	                lea 44(sp),sp
    9750:	                rts

00009752 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9752:	       lea -12(sp),sp
    9756:	       move.l a6,-(sp)

	if(orig->theSprites)
    9758:	       movea.l 20(sp),a0
    975c:	       move.l (a0),d0
    975e:	   ,-- beq.s 9788 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9760:	   |   movea.l 20(sp),a0
    9764:	   |   movea.l (a0),a0
    9766:	   |   move.l 4(a0),d0
    976a:	   |   subq.l #1,d0
    976c:	   |   move.l d0,4(a0)
    9770:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9776:	   +-- bne.s 9788 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9778:	   |   movea.l 20(sp),a0
    977c:	   |   move.l (a0),d0
    977e:	   |   move.l d0,-(sp)
    9780:	   |   jsr 8836 <forgetSpriteBank>
    9786:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9788:	   '-> tst.l 20(sp)
    978c:	,----- beq.s 97cc <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    978e:	|      movea.l 20(sp),a0
    9792:	|      move.l 8(a0),d0
    9796:	|  ,-- beq.s 97b2 <deleteAnim+0x60>
			FreeVec( orig->frames);
    9798:	|  |   movea.l 20(sp),a0
    979c:	|  |   move.l 4(a0),8(sp)
    97a2:	|  |   move.l 1c7d8 <SysBase>,d0
    97a8:	|  |   movea.l d0,a6
    97aa:	|  |   movea.l 8(sp),a1
    97ae:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    97b2:	|  '-> move.l 20(sp),4(sp)
    97b8:	|      move.l 1c7d8 <SysBase>,d0
    97be:	|      movea.l d0,a6
    97c0:	|      movea.l 4(sp),a1
    97c4:	|      jsr -690(a6)
		orig = NULL;
    97c8:	|      clr.l 20(sp)
	}	
	
}
    97cc:	'----> nop
    97ce:	       movea.l (sp)+,a6
    97d0:	       lea 12(sp),sp
    97d4:	       rts

000097d6 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    97d6:	          lea -124(sp),sp
    97da:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    97de:	          movea.l 152(sp),a0
    97e2:	          move.l 56(a0),d1
    97e6:	          movea.l 152(sp),a0
    97ea:	          move.l 60(a0),d0
    97ee:	          cmp.l d1,d0
    97f0:	      ,-- bne.s 9820 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    97f2:	      |   movea.l 152(sp),a0
    97f6:	      |   moveq #-1,d0
    97f8:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    97fc:	      |   movea.l 152(sp),a0
    9800:	      |   move.l 40(a0),d0
    9804:	      |   movea.l 152(sp),a0
    9808:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    980c:	      |   movea.l 152(sp),a0
    9810:	      |   move.l 44(a0),d0
    9814:	      |   movea.l 152(sp),a0
    9818:	      |   move.l d0,52(a0)
    981c:	   ,--|-- bra.w 9d86 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9820:	   |  '-> movea.l 1c8f0 <currentFloor>,a0
    9826:	   |      move.l 16(a0),d1
    982a:	   |      movea.l 152(sp),a0
    982e:	   |      move.l 56(a0),d0
    9832:	   |      add.l d0,d0
    9834:	   |      add.l d0,d0
    9836:	   |      movea.l d1,a0
    9838:	   |      adda.l d0,a0
    983a:	   |      move.l (a0),d1
    983c:	   |      movea.l 152(sp),a0
    9840:	   |      move.l 60(a0),d0
    9844:	   |      add.l d0,d0
    9846:	   |      add.l d0,d0
    9848:	   |      movea.l d1,a0
    984a:	   |      adda.l d0,a0
    984c:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9850:	   |      moveq #-1,d0
    9852:	   |      cmp.l 144(sp),d0
    9856:	   |  ,-- bne.s 985e <doBorderStuff+0x88>
    9858:	   |  |   clr.w d0
    985a:	,--|--|-- bra.w 9e86 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    985e:	|  |  '-> movea.l 1c8f0 <currentFloor>,a0
    9864:	|  |      move.l 12(a0),d1
    9868:	|  |      move.l 144(sp),d0
    986c:	|  |      lsl.l #3,d0
    986e:	|  |      add.l d0,d1
    9870:	|  |      movea.l 1c8f0 <currentFloor>,a0
    9876:	|  |      movea.l 12(a0),a1
    987a:	|  |      movea.l 152(sp),a0
    987e:	|  |      move.l 56(a0),d0
    9882:	|  |      lsl.l #3,d0
    9884:	|  |      add.l a1,d0
    9886:	|  |      lea 40(sp),a0
    988a:	|  |      move.l a0,-(sp)
    988c:	|  |      lea 48(sp),a0
    9890:	|  |      move.l a0,-(sp)
    9892:	|  |      move.l d1,-(sp)
    9894:	|  |      move.l d0,-(sp)
    9896:	|  |      jsr 16356 <getMatchingCorners>
    989c:	|  |      lea 16(sp),sp
    98a0:	|  |      tst.w d0
    98a2:	|  |  ,-- bne.s 98b8 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    98a4:	|  |  |   pea 1901f <PutChar+0x14a9>
    98aa:	|  |  |   jsr 170d4 <KPrintF>
    98b0:	|  |  |   addq.l #4,sp
            return FALSE;
    98b2:	|  |  |   clr.w d0
    98b4:	+--|--|-- bra.w 9e86 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    98b8:	|  |  '-> movea.l 152(sp),a0
    98bc:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    98c2:	|  |      movea.l 152(sp),a0
    98c6:	|  |      move.l (a0),d0
    98c8:	|  |      move.l d0,-(sp)
    98ca:	|  |      jsr 1749e <__fixsfsi>
    98d0:	|  |      addq.l #4,sp
    98d2:	|  |      move.l d0,140(sp)
    98d6:	|  |      movea.l 152(sp),a0
    98da:	|  |      move.l 4(a0),d0
    98de:	|  |      move.l d0,-(sp)
    98e0:	|  |      jsr 1749e <__fixsfsi>
    98e6:	|  |      addq.l #4,sp
    98e8:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    98ec:	|  |      movea.l 152(sp),a0
    98f0:	|  |      move.l 40(a0),132(sp)
    98f6:	|  |      movea.l 152(sp),a0
    98fa:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9900:	|  |      movea.l 1c8f0 <currentFloor>,a0
    9906:	|  |      move.l 4(a0),d1
    990a:	|  |      move.l 44(sp),d0
    990e:	|  |      lsl.l #3,d0
    9910:	|  |      movea.l d1,a0
    9912:	|  |      adda.l d0,a0
    9914:	|  |      move.l (a0),124(sp)
    9918:	|  |      movea.l 1c8f0 <currentFloor>,a0
    991e:	|  |      move.l 4(a0),d1
    9922:	|  |      move.l 44(sp),d0
    9926:	|  |      lsl.l #3,d0
    9928:	|  |      movea.l d1,a0
    992a:	|  |      adda.l d0,a0
    992c:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9932:	|  |      movea.l 1c8f0 <currentFloor>,a0
    9938:	|  |      move.l 4(a0),d1
    993c:	|  |      move.l 40(sp),d0
    9940:	|  |      lsl.l #3,d0
    9942:	|  |      movea.l d1,a0
    9944:	|  |      adda.l d0,a0
    9946:	|  |      move.l (a0),116(sp)
    994a:	|  |      movea.l 1c8f0 <currentFloor>,a0
    9950:	|  |      move.l 4(a0),d1
    9954:	|  |      move.l 40(sp),d0
    9958:	|  |      lsl.l #3,d0
    995a:	|  |      movea.l d1,a0
    995c:	|  |      adda.l d0,a0
    995e:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9964:	|  |      move.l 140(sp),d0
    9968:	|  |      sub.l 132(sp),d0
    996c:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9970:	|  |      move.l 136(sp),d0
    9974:	|  |      sub.l 128(sp),d0
    9978:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    997c:	|  |      move.l 116(sp),d0
    9980:	|  |      sub.l 124(sp),d0
    9984:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9988:	|  |      move.l 112(sp),d0
    998c:	|  |      sub.l 120(sp),d0
    9990:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9994:	|  |      move.l 124(sp),d0
    9998:	|  |      sub.l 140(sp),d0
    999c:	|  |      move.l 104(sp),-(sp)
    99a0:	|  |      move.l d0,-(sp)
    99a2:	|  |      jsr 17a60 <__mulsi3>
    99a8:	|  |      addq.l #8,sp
    99aa:	|  |      move.l d0,d2
    99ac:	|  |      move.l 120(sp),d0
    99b0:	|  |      sub.l 136(sp),d0
    99b4:	|  |      move.l 108(sp),-(sp)
    99b8:	|  |      move.l d0,-(sp)
    99ba:	|  |      jsr 17a60 <__mulsi3>
    99c0:	|  |      addq.l #8,sp
    99c2:	|  |      move.l d2,d1
    99c4:	|  |      sub.l d0,d1
    99c6:	|  |      move.l d1,-(sp)
    99c8:	|  |      jsr 174c6 <__floatsidf>
    99ce:	|  |      addq.l #4,sp
    99d0:	|  |      move.l d0,32(sp)
    99d4:	|  |      move.l d1,36(sp)
    99d8:	|  |      move.l 32(sp),88(sp)
    99de:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    99e4:	|  |      move.l 96(sp),-(sp)
    99e8:	|  |      move.l 112(sp),-(sp)
    99ec:	|  |      jsr 17a60 <__mulsi3>
    99f2:	|  |      addq.l #8,sp
    99f4:	|  |      move.l d0,d2
    99f6:	|  |      move.l 100(sp),-(sp)
    99fa:	|  |      move.l 108(sp),-(sp)
    99fe:	|  |      jsr 17a60 <__mulsi3>
    9a04:	|  |      addq.l #8,sp
    9a06:	|  |      move.l d2,d1
    9a08:	|  |      sub.l d0,d1
    9a0a:	|  |      move.l d1,-(sp)
    9a0c:	|  |      jsr 174c6 <__floatsidf>
    9a12:	|  |      addq.l #4,sp
    9a14:	|  |      move.l d1,-(sp)
    9a16:	|  |      move.l d0,-(sp)
    9a18:	|  |      move.l 100(sp),-(sp)
    9a1c:	|  |      move.l 100(sp),-(sp)
    9a20:	|  |      jsr 1735a <__divdf3>
    9a26:	|  |      lea 16(sp),sp
    9a2a:	|  |      move.l d0,24(sp)
    9a2e:	|  |      move.l d1,28(sp)
    9a32:	|  |      move.l 24(sp),88(sp)
    9a38:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9a3e:	|  |      clr.l -(sp)
    9a40:	|  |      clr.l -(sp)
    9a42:	|  |      move.l 100(sp),-(sp)
    9a46:	|  |      move.l 100(sp),-(sp)
    9a4a:	|  |      jsr 17624 <__gtdf2>
    9a50:	|  |      lea 16(sp),sp
    9a54:	|  |      tst.l d0
    9a56:	|  |  ,-- ble.w 9b2e <doBorderStuff+0x358>
    9a5a:	|  |  |   clr.l -(sp)
    9a5c:	|  |  |   move.l #1072693248,-(sp)
    9a62:	|  |  |   move.l 100(sp),-(sp)
    9a66:	|  |  |   move.l 100(sp),-(sp)
    9a6a:	|  |  |   jsr 176de <__ltdf2>
    9a70:	|  |  |   lea 16(sp),sp
    9a74:	|  |  |   tst.l d0
    9a76:	|  |  +-- bge.w 9b2e <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9a7a:	|  |  |   move.l 124(sp),-(sp)
    9a7e:	|  |  |   jsr 174c6 <__floatsidf>
    9a84:	|  |  |   addq.l #4,sp
    9a86:	|  |  |   move.l d0,d2
    9a88:	|  |  |   move.l d1,d3
    9a8a:	|  |  |   move.l 100(sp),-(sp)
    9a8e:	|  |  |   jsr 174c6 <__floatsidf>
    9a94:	|  |  |   addq.l #4,sp
    9a96:	|  |  |   move.l 92(sp),-(sp)
    9a9a:	|  |  |   move.l 92(sp),-(sp)
    9a9e:	|  |  |   move.l d1,-(sp)
    9aa0:	|  |  |   move.l d0,-(sp)
    9aa2:	|  |  |   jsr 17556 <__muldf3>
    9aa8:	|  |  |   lea 16(sp),sp
    9aac:	|  |  |   move.l d1,-(sp)
    9aae:	|  |  |   move.l d0,-(sp)
    9ab0:	|  |  |   move.l d3,-(sp)
    9ab2:	|  |  |   move.l d2,-(sp)
    9ab4:	|  |  |   jsr 172f8 <__adddf3>
    9aba:	|  |  |   lea 16(sp),sp
    9abe:	|  |  |   move.l d1,-(sp)
    9ac0:	|  |  |   move.l d0,-(sp)
    9ac2:	|  |  |   jsr 17468 <__fixdfsi>
    9ac8:	|  |  |   addq.l #8,sp
    9aca:	|  |  |   movea.l 152(sp),a0
    9ace:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9ad2:	|  |  |   move.l 120(sp),-(sp)
    9ad6:	|  |  |   jsr 174c6 <__floatsidf>
    9adc:	|  |  |   addq.l #4,sp
    9ade:	|  |  |   move.l d0,d2
    9ae0:	|  |  |   move.l d1,d3
    9ae2:	|  |  |   move.l 96(sp),-(sp)
    9ae6:	|  |  |   jsr 174c6 <__floatsidf>
    9aec:	|  |  |   addq.l #4,sp
    9aee:	|  |  |   move.l 92(sp),-(sp)
    9af2:	|  |  |   move.l 92(sp),-(sp)
    9af6:	|  |  |   move.l d1,-(sp)
    9af8:	|  |  |   move.l d0,-(sp)
    9afa:	|  |  |   jsr 17556 <__muldf3>
    9b00:	|  |  |   lea 16(sp),sp
    9b04:	|  |  |   move.l d1,-(sp)
    9b06:	|  |  |   move.l d0,-(sp)
    9b08:	|  |  |   move.l d3,-(sp)
    9b0a:	|  |  |   move.l d2,-(sp)
    9b0c:	|  |  |   jsr 172f8 <__adddf3>
    9b12:	|  |  |   lea 16(sp),sp
    9b16:	|  |  |   move.l d1,-(sp)
    9b18:	|  |  |   move.l d0,-(sp)
    9b1a:	|  |  |   jsr 17468 <__fixdfsi>
    9b20:	|  |  |   addq.l #8,sp
    9b22:	|  |  |   movea.l 152(sp),a0
    9b26:	|  |  |   move.l d0,52(a0)
    9b2a:	|  +--|-- bra.w 9d86 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9b2e:	|  |  '-> move.l 140(sp),d0
    9b32:	|  |      sub.l 124(sp),d0
    9b36:	|  |      move.l d0,84(sp)
    9b3a:	|  |      move.l 140(sp),d0
    9b3e:	|  |      sub.l 116(sp),d0
    9b42:	|  |      move.l d0,80(sp)
    9b46:	|  |      move.l 132(sp),d0
    9b4a:	|  |      sub.l 124(sp),d0
    9b4e:	|  |      move.l d0,76(sp)
    9b52:	|  |      move.l 132(sp),d0
    9b56:	|  |      sub.l 116(sp),d0
    9b5a:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9b5e:	|  |      move.l 136(sp),d0
    9b62:	|  |      sub.l 120(sp),d0
    9b66:	|  |      move.l d0,68(sp)
    9b6a:	|  |      move.l 136(sp),d0
    9b6e:	|  |      sub.l 112(sp),d0
    9b72:	|  |      move.l d0,64(sp)
    9b76:	|  |      move.l 128(sp),d0
    9b7a:	|  |      sub.l 120(sp),d0
    9b7e:	|  |      move.l d0,60(sp)
    9b82:	|  |      move.l 128(sp),d0
    9b86:	|  |      sub.l 112(sp),d0
    9b8a:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9b8e:	|  |      move.l 84(sp),-(sp)
    9b92:	|  |      move.l 88(sp),-(sp)
    9b96:	|  |      jsr 17a60 <__mulsi3>
    9b9c:	|  |      addq.l #8,sp
    9b9e:	|  |      move.l d0,84(sp)
    9ba2:	|  |      move.l 80(sp),-(sp)
    9ba6:	|  |      move.l 84(sp),-(sp)
    9baa:	|  |      jsr 17a60 <__mulsi3>
    9bb0:	|  |      addq.l #8,sp
    9bb2:	|  |      move.l d0,80(sp)
    9bb6:	|  |      move.l 76(sp),-(sp)
    9bba:	|  |      move.l 80(sp),-(sp)
    9bbe:	|  |      jsr 17a60 <__mulsi3>
    9bc4:	|  |      addq.l #8,sp
    9bc6:	|  |      move.l d0,76(sp)
    9bca:	|  |      move.l 72(sp),-(sp)
    9bce:	|  |      move.l 76(sp),-(sp)
    9bd2:	|  |      jsr 17a60 <__mulsi3>
    9bd8:	|  |      addq.l #8,sp
    9bda:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9bde:	|  |      move.l 68(sp),-(sp)
    9be2:	|  |      move.l 72(sp),-(sp)
    9be6:	|  |      jsr 17a60 <__mulsi3>
    9bec:	|  |      addq.l #8,sp
    9bee:	|  |      move.l d0,68(sp)
    9bf2:	|  |      move.l 64(sp),-(sp)
    9bf6:	|  |      move.l 68(sp),-(sp)
    9bfa:	|  |      jsr 17a60 <__mulsi3>
    9c00:	|  |      addq.l #8,sp
    9c02:	|  |      move.l d0,64(sp)
    9c06:	|  |      move.l 60(sp),-(sp)
    9c0a:	|  |      move.l 64(sp),-(sp)
    9c0e:	|  |      jsr 17a60 <__mulsi3>
    9c14:	|  |      addq.l #8,sp
    9c16:	|  |      move.l d0,60(sp)
    9c1a:	|  |      move.l 56(sp),-(sp)
    9c1e:	|  |      move.l 60(sp),-(sp)
    9c22:	|  |      jsr 17a60 <__mulsi3>
    9c28:	|  |      addq.l #8,sp
    9c2a:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9c2e:	|  |      move.l 84(sp),-(sp)
    9c32:	|  |      jsr 174c6 <__floatsidf>
    9c38:	|  |      addq.l #4,sp
    9c3a:	|  |      move.l d0,d2
    9c3c:	|  |      move.l d1,d3
    9c3e:	|  |      move.l 68(sp),-(sp)
    9c42:	|  |      jsr 174c6 <__floatsidf>
    9c48:	|  |      addq.l #4,sp
    9c4a:	|  |      move.l d1,-(sp)
    9c4c:	|  |      move.l d0,-(sp)
    9c4e:	|  |      move.l d3,-(sp)
    9c50:	|  |      move.l d2,-(sp)
    9c52:	|  |      jsr 172f8 <__adddf3>
    9c58:	|  |      lea 16(sp),sp
    9c5c:	|  |      move.l d1,-(sp)
    9c5e:	|  |      move.l d0,-(sp)
    9c60:	|  |      jsr 17a16 <sqrt>
    9c66:	|  |      addq.l #8,sp
    9c68:	|  |      move.l d0,d2
    9c6a:	|  |      move.l d1,d3
    9c6c:	|  |      move.l 76(sp),-(sp)
    9c70:	|  |      jsr 174c6 <__floatsidf>
    9c76:	|  |      addq.l #4,sp
    9c78:	|  |      move.l d0,d4
    9c7a:	|  |      move.l d1,d5
    9c7c:	|  |      move.l 60(sp),-(sp)
    9c80:	|  |      jsr 174c6 <__floatsidf>
    9c86:	|  |      addq.l #4,sp
    9c88:	|  |      move.l d1,-(sp)
    9c8a:	|  |      move.l d0,-(sp)
    9c8c:	|  |      move.l d5,-(sp)
    9c8e:	|  |      move.l d4,-(sp)
    9c90:	|  |      jsr 172f8 <__adddf3>
    9c96:	|  |      lea 16(sp),sp
    9c9a:	|  |      move.l d1,-(sp)
    9c9c:	|  |      move.l d0,-(sp)
    9c9e:	|  |      jsr 17a16 <sqrt>
    9ca4:	|  |      addq.l #8,sp
    9ca6:	|  |      move.l d1,-(sp)
    9ca8:	|  |      move.l d0,-(sp)
    9caa:	|  |      move.l d3,-(sp)
    9cac:	|  |      move.l d2,-(sp)
    9cae:	|  |      jsr 172f8 <__adddf3>
    9cb4:	|  |      lea 16(sp),sp
    9cb8:	|  |      move.l d0,d2
    9cba:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9cbc:	|  |      move.l 80(sp),-(sp)
    9cc0:	|  |      jsr 174c6 <__floatsidf>
    9cc6:	|  |      addq.l #4,sp
    9cc8:	|  |      move.l d0,d4
    9cca:	|  |      move.l d1,d5
    9ccc:	|  |      move.l 64(sp),-(sp)
    9cd0:	|  |      jsr 174c6 <__floatsidf>
    9cd6:	|  |      addq.l #4,sp
    9cd8:	|  |      move.l d1,-(sp)
    9cda:	|  |      move.l d0,-(sp)
    9cdc:	|  |      move.l d5,-(sp)
    9cde:	|  |      move.l d4,-(sp)
    9ce0:	|  |      jsr 172f8 <__adddf3>
    9ce6:	|  |      lea 16(sp),sp
    9cea:	|  |      move.l d1,-(sp)
    9cec:	|  |      move.l d0,-(sp)
    9cee:	|  |      jsr 17a16 <sqrt>
    9cf4:	|  |      addq.l #8,sp
    9cf6:	|  |      move.l d0,d4
    9cf8:	|  |      move.l d1,d5
    9cfa:	|  |      move.l 72(sp),-(sp)
    9cfe:	|  |      jsr 174c6 <__floatsidf>
    9d04:	|  |      addq.l #4,sp
    9d06:	|  |      move.l d0,d6
    9d08:	|  |      move.l d1,d7
    9d0a:	|  |      move.l 56(sp),-(sp)
    9d0e:	|  |      jsr 174c6 <__floatsidf>
    9d14:	|  |      addq.l #4,sp
    9d16:	|  |      move.l d1,-(sp)
    9d18:	|  |      move.l d0,-(sp)
    9d1a:	|  |      move.l d7,-(sp)
    9d1c:	|  |      move.l d6,-(sp)
    9d1e:	|  |      jsr 172f8 <__adddf3>
    9d24:	|  |      lea 16(sp),sp
    9d28:	|  |      move.l d1,-(sp)
    9d2a:	|  |      move.l d0,-(sp)
    9d2c:	|  |      jsr 17a16 <sqrt>
    9d32:	|  |      addq.l #8,sp
    9d34:	|  |      move.l d1,-(sp)
    9d36:	|  |      move.l d0,-(sp)
    9d38:	|  |      move.l d5,-(sp)
    9d3a:	|  |      move.l d4,-(sp)
    9d3c:	|  |      jsr 172f8 <__adddf3>
    9d42:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9d46:	|  |      move.l d1,-(sp)
    9d48:	|  |      move.l d0,-(sp)
    9d4a:	|  |      move.l d3,-(sp)
    9d4c:	|  |      move.l d2,-(sp)
    9d4e:	|  |      jsr 176de <__ltdf2>
    9d54:	|  |      lea 16(sp),sp
    9d58:	|  |      tst.l d0
    9d5a:	|  |  ,-- bge.s 9d72 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    9d5c:	|  |  |   movea.l 152(sp),a0
    9d60:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    9d66:	|  |  |   movea.l 152(sp),a0
    9d6a:	|  |  |   move.l 120(sp),52(a0)
    9d70:	|  +--|-- bra.s 9d86 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    9d72:	|  |  '-> movea.l 152(sp),a0
    9d76:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    9d7c:	|  |      movea.l 152(sp),a0
    9d80:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9d86:	|  '----> movea.l 152(sp),a0
    9d8a:	|         move.l 52(a0),d0
    9d8e:	|         move.l d0,-(sp)
    9d90:	|         jsr 17506 <__floatsisf>
    9d96:	|         addq.l #4,sp
    9d98:	|         move.l d0,d1
    9d9a:	|         movea.l 152(sp),a0
    9d9e:	|         move.l 4(a0),d0
    9da2:	|         move.l d0,-(sp)
    9da4:	|         move.l d1,-(sp)
    9da6:	|         jsr 177fa <__subsf3>
    9dac:	|         addq.l #8,sp
    9dae:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9db2:	|         movea.l 152(sp),a0
    9db6:	|         move.l (a0),d2
    9db8:	|         movea.l 152(sp),a0
    9dbc:	|         move.l 48(a0),d0
    9dc0:	|         move.l d0,-(sp)
    9dc2:	|         jsr 17506 <__floatsisf>
    9dc8:	|         addq.l #4,sp
    9dca:	|         move.l d0,-(sp)
    9dcc:	|         move.l d2,-(sp)
    9dce:	|         jsr 177fa <__subsf3>
    9dd4:	|         addq.l #8,sp
    9dd6:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9dda:	|         clr.l -(sp)
    9ddc:	|         move.l 52(sp),-(sp)
    9de0:	|         jsr 17762 <__nesf2>
    9de6:	|         addq.l #8,sp
    9de8:	|         tst.l d0
    9dea:	|     ,-- bne.s 9dfe <doBorderStuff+0x628>
    9dec:	|     |   clr.l -(sp)
    9dee:	|     |   move.l 56(sp),-(sp)
    9df2:	|     |   jsr 17762 <__nesf2>
    9df8:	|     |   addq.l #8,sp
    9dfa:	|     |   tst.l d0
    9dfc:	|  ,--|-- beq.s 9e74 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9dfe:	|  |  '-> move.l 52(sp),d0
    9e02:	|  |      move.l d0,-(sp)
    9e04:	|  |      move.l d0,-(sp)
    9e06:	|  |      jsr 172c2 <__addsf3>
    9e0c:	|  |      addq.l #8,sp
    9e0e:	|  |      move.l d0,-(sp)
    9e10:	|  |      move.l 52(sp),-(sp)
    9e14:	|  |      jsr 17866 <atan2f>
    9e1a:	|  |      addq.l #8,sp
    9e1c:	|  |      move.l d0,-(sp)
    9e1e:	|  |      jsr 17428 <__extendsfdf2>
    9e24:	|  |      addq.l #4,sp
    9e26:	|  |      move.l #-1540411785,-(sp)
    9e2c:	|  |      move.l #1078765033,-(sp)
    9e32:	|  |      move.l d1,-(sp)
    9e34:	|  |      move.l d0,-(sp)
    9e36:	|  |      jsr 17556 <__muldf3>
    9e3c:	|  |      lea 16(sp),sp
    9e40:	|  |      clr.l -(sp)
    9e42:	|  |      move.l #1080459264,-(sp)
    9e48:	|  |      move.l d1,-(sp)
    9e4a:	|  |      move.l d0,-(sp)
    9e4c:	|  |      jsr 172f8 <__adddf3>
    9e52:	|  |      lea 16(sp),sp
    9e56:	|  |      move.l d1,-(sp)
    9e58:	|  |      move.l d0,-(sp)
    9e5a:	|  |      jsr 17468 <__fixdfsi>
    9e60:	|  |      addq.l #8,sp
    9e62:	|  |      movea.l 152(sp),a0
    9e66:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9e6a:	|  |      movea.l 152(sp),a0
    9e6e:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9e74:	|  '----> pea 1 <_start+0x1>
    9e78:	|         move.l 156(sp),-(sp)
    9e7c:	|         jsr 4120 <setFrames>
    9e82:	|         addq.l #8,sp
    return TRUE;
    9e84:	|         moveq #1,d0
}
    9e86:	'-------> movem.l (sp)+,d2-d7
    9e8a:	          lea 124(sp),sp
    9e8e:	          rts

00009e90 <drawPeople>:

void drawPeople () {
    9e90:	                   lea -24(sp),sp
    9e94:	                   move.l d2,-(sp)

	shufflePeople ();
    9e96:	                   jsr b92c <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9e9c:	                   move.l 1c838 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9ea4:	                   clr.l 20(sp)
	overRegion = NULL;
    9ea8:	                   clr.l 1c8e8 <overRegion>

	while (thisPerson) {
    9eae:	   ,-------------- bra.w a460 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9eb2:	,--|-------------> movea.l 24(sp),a0
    9eb6:	|  |               move.w 104(a0),d0
    9eba:	|  |  ,----------- beq.w a214 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9ebe:	|  |  |            movea.l 24(sp),a0
    9ec2:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9ec8:	|  |  |            movea.l 24(sp),a0
    9ecc:	|  |  |            move.l 76(a0),d0
    9ed0:	|  |  |            cmp.l 20(sp),d0
    9ed4:	|  |  |  ,-------- beq.w a0a2 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9ed8:	|  |  |  |         movea.l 24(sp),a0
    9edc:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9ee0:	|  |  |  |         movea.l 24(sp),a0
    9ee4:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9eea:	|  |  |  |         movea.l 24(sp),a0
    9eee:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9ef2:	|  |  |  |         movea.l 20(sp),a0
    9ef6:	|  |  |  |         movea.l 4(a0),a0
    9efa:	|  |  |  |         move.l 4(a0),d0
    9efe:	|  |  |  |         movea.l 24(sp),a0
    9f02:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9f06:	|  |  |  |         movea.l 20(sp),a0
    9f0a:	|  |  |  |         movea.l 4(a0),a1
    9f0e:	|  |  |  |         movea.l 24(sp),a0
    9f12:	|  |  |  |         move.l 84(a0),d0
    9f16:	|  |  |  |         move.l d0,d1
    9f18:	|  |  |  |         move.l d1,d0
    9f1a:	|  |  |  |         add.l d0,d0
    9f1c:	|  |  |  |         add.l d1,d0
    9f1e:	|  |  |  |         add.l d0,d0
    9f20:	|  |  |  |         add.l d0,d0
    9f22:	|  |  |  |         lea (0,a1,d0.l),a0
    9f26:	|  |  |  |         move.l 8(a0),d0
    9f2a:	|  |  |  |     ,-- ble.w 9fcc <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9f2e:	|  |  |  |     |   movea.l 20(sp),a0
    9f32:	|  |  |  |     |   movea.l 4(a0),a1
    9f36:	|  |  |  |     |   movea.l 24(sp),a0
    9f3a:	|  |  |  |     |   move.l 84(a0),d0
    9f3e:	|  |  |  |     |   move.l d0,d1
    9f40:	|  |  |  |     |   move.l d1,d0
    9f42:	|  |  |  |     |   add.l d0,d0
    9f44:	|  |  |  |     |   add.l d1,d0
    9f46:	|  |  |  |     |   add.l d0,d0
    9f48:	|  |  |  |     |   add.l d0,d0
    9f4a:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9f4e:	|  |  |  |     |   move.l 8(a0),d0
    9f52:	|  |  |  |     |   clr.l -(sp)
    9f54:	|  |  |  |     |   move.l d0,-(sp)
    9f56:	|  |  |  |     |   jsr d040 <startSound>
    9f5c:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9f5e:	|  |  |  |     |   movea.l 24(sp),a0
    9f62:	|  |  |  |     |   move.l 84(a0),d0
    9f66:	|  |  |  |     |   addq.l #1,d0
    9f68:	|  |  |  |     |   movea.l 24(sp),a0
    9f6c:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9f70:	|  |  |  |     |   movea.l 24(sp),a0
    9f74:	|  |  |  |     |   move.l 84(a0),d0
    9f78:	|  |  |  |     |   movea.l 24(sp),a0
    9f7c:	|  |  |  |     |   movea.l 72(a0),a0
    9f80:	|  |  |  |     |   move.l 8(a0),d1
    9f84:	|  |  |  |     |   move.l d1,-(sp)
    9f86:	|  |  |  |     |   move.l d0,-(sp)
    9f88:	|  |  |  |     |   jsr 17b0c <__modsi3>
    9f8e:	|  |  |  |     |   addq.l #8,sp
    9f90:	|  |  |  |     |   movea.l 24(sp),a0
    9f94:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9f98:	|  |  |  |     |   movea.l 24(sp),a0
    9f9c:	|  |  |  |     |   movea.l 72(a0),a0
    9fa0:	|  |  |  |     |   movea.l 4(a0),a1
    9fa4:	|  |  |  |     |   movea.l 24(sp),a0
    9fa8:	|  |  |  |     |   move.l 84(a0),d0
    9fac:	|  |  |  |     |   move.l d0,d1
    9fae:	|  |  |  |     |   move.l d1,d0
    9fb0:	|  |  |  |     |   add.l d0,d0
    9fb2:	|  |  |  |     |   add.l d1,d0
    9fb4:	|  |  |  |     |   add.l d0,d0
    9fb6:	|  |  |  |     |   add.l d0,d0
    9fb8:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9fbc:	|  |  |  |     |   move.l 4(a0),d0
    9fc0:	|  |  |  |     |   movea.l 24(sp),a0
    9fc4:	|  |  |  |     |   move.l d0,88(a0)
    9fc8:	|  |  |  |  ,--|-- bra.w a10a <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9fcc:	|  |  |  |  |  '-> movea.l 20(sp),a0
    9fd0:	|  |  |  |  |      movea.l 4(a0),a1
    9fd4:	|  |  |  |  |      movea.l 24(sp),a0
    9fd8:	|  |  |  |  |      move.l 84(a0),d0
    9fdc:	|  |  |  |  |      move.l d0,d1
    9fde:	|  |  |  |  |      move.l d1,d0
    9fe0:	|  |  |  |  |      add.l d0,d0
    9fe2:	|  |  |  |  |      add.l d1,d0
    9fe4:	|  |  |  |  |      add.l d0,d0
    9fe6:	|  |  |  |  |      add.l d0,d0
    9fe8:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9fec:	|  |  |  |  |      move.l 8(a0),d0
    9ff0:	|  |  |  |  +----- beq.w a10a <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9ff4:	|  |  |  |  |      movea.l 1c7a8 <noStack>,a1
    9ffa:	|  |  |  |  |      movea.l 20(sp),a0
    9ffe:	|  |  |  |  |      move.l 4(a0),d2
    a002:	|  |  |  |  |      movea.l 24(sp),a0
    a006:	|  |  |  |  |      move.l 84(a0),d0
    a00a:	|  |  |  |  |      move.l d0,d1
    a00c:	|  |  |  |  |      move.l d1,d0
    a00e:	|  |  |  |  |      add.l d0,d0
    a010:	|  |  |  |  |      add.l d1,d0
    a012:	|  |  |  |  |      add.l d0,d0
    a014:	|  |  |  |  |      add.l d0,d0
    a016:	|  |  |  |  |      movea.l d2,a0
    a018:	|  |  |  |  |      adda.l d0,a0
    a01a:	|  |  |  |  |      move.l 8(a0),d0
    a01e:	|  |  |  |  |      neg.l d0
    a020:	|  |  |  |  |      pea 1 <_start+0x1>
    a024:	|  |  |  |  |      move.l a1,-(sp)
    a026:	|  |  |  |  |      clr.l -(sp)
    a028:	|  |  |  |  |      clr.l -(sp)
    a02a:	|  |  |  |  |      move.l d0,-(sp)
    a02c:	|  |  |  |  |      jsr 733a <startNewFunctionNum>
    a032:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a036:	|  |  |  |  |      movea.l 24(sp),a0
    a03a:	|  |  |  |  |      move.l 84(a0),d0
    a03e:	|  |  |  |  |      addq.l #1,d0
    a040:	|  |  |  |  |      movea.l 24(sp),a0
    a044:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a048:	|  |  |  |  |      movea.l 24(sp),a0
    a04c:	|  |  |  |  |      move.l 84(a0),d0
    a050:	|  |  |  |  |      movea.l 24(sp),a0
    a054:	|  |  |  |  |      movea.l 72(a0),a0
    a058:	|  |  |  |  |      move.l 8(a0),d1
    a05c:	|  |  |  |  |      move.l d1,-(sp)
    a05e:	|  |  |  |  |      move.l d0,-(sp)
    a060:	|  |  |  |  |      jsr 17b0c <__modsi3>
    a066:	|  |  |  |  |      addq.l #8,sp
    a068:	|  |  |  |  |      movea.l 24(sp),a0
    a06c:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a070:	|  |  |  |  |      movea.l 24(sp),a0
    a074:	|  |  |  |  |      movea.l 72(a0),a0
    a078:	|  |  |  |  |      movea.l 4(a0),a1
    a07c:	|  |  |  |  |      movea.l 24(sp),a0
    a080:	|  |  |  |  |      move.l 84(a0),d0
    a084:	|  |  |  |  |      move.l d0,d1
    a086:	|  |  |  |  |      move.l d1,d0
    a088:	|  |  |  |  |      add.l d0,d0
    a08a:	|  |  |  |  |      add.l d1,d0
    a08c:	|  |  |  |  |      add.l d0,d0
    a08e:	|  |  |  |  |      add.l d0,d0
    a090:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a094:	|  |  |  |  |      move.l 4(a0),d0
    a098:	|  |  |  |  |      movea.l 24(sp),a0
    a09c:	|  |  |  |  |      move.l d0,88(a0)
    a0a0:	|  |  |  |  +----- bra.s a10a <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a0a2:	|  |  |  '--|----> movea.l 24(sp),a0
    a0a6:	|  |  |     |      move.l (a0),d0
    a0a8:	|  |  |     |      movea.l 24(sp),a0
    a0ac:	|  |  |     |      move.l 8(a0),d1
    a0b0:	|  |  |     |      move.l d1,-(sp)
    a0b2:	|  |  |     |      move.l d0,-(sp)
    a0b4:	|  |  |     |      jsr 173f2 <__eqsf2>
    a0ba:	|  |  |     |      addq.l #8,sp
    a0bc:	|  |  |     |      tst.l d0
    a0be:	|  |  |     |  ,-- bne.s a102 <drawPeople+0x272>
    a0c0:	|  |  |     |  |   movea.l 24(sp),a0
    a0c4:	|  |  |     |  |   move.l 4(a0),d0
    a0c8:	|  |  |     |  |   movea.l 24(sp),a0
    a0cc:	|  |  |     |  |   move.l 12(a0),d1
    a0d0:	|  |  |     |  |   move.l d1,-(sp)
    a0d2:	|  |  |     |  |   move.l d0,-(sp)
    a0d4:	|  |  |     |  |   jsr 173f2 <__eqsf2>
    a0da:	|  |  |     |  |   addq.l #8,sp
    a0dc:	|  |  |     |  |   tst.l d0
    a0de:	|  |  |     |  +-- bne.s a102 <drawPeople+0x272>
    a0e0:	|  |  |     |  |   movea.l 20(sp),a0
    a0e4:	|  |  |     |  |   move.l 8(a0),d0
    a0e8:	|  |  |     |  |   moveq #1,d1
    a0ea:	|  |  |     |  |   cmp.l d0,d1
    a0ec:	|  |  |     |  +-- bne.s a102 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a0ee:	|  |  |     |  |   movea.l 24(sp),a0
    a0f2:	|  |  |     |  |   move.l 16(a0),d0
    a0f6:	|  |  |     |  |   addq.l #1,d0
    a0f8:	|  |  |     |  |   movea.l 24(sp),a0
    a0fc:	|  |  |     |  |   move.l d0,16(a0)
    a100:	|  |  |     +--|-- bra.s a10a <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a102:	|  |  |     |  '-> movea.l 24(sp),a0
    a106:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a10a:	|  |  |     '----> movea.l 24(sp),a0
    a10e:	|  |  |            move.l (a0),d0
    a110:	|  |  |            movea.l 24(sp),a0
    a114:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a118:	|  |  |            movea.l 24(sp),a0
    a11c:	|  |  |            move.l 4(a0),d0
    a120:	|  |  |            movea.l 24(sp),a0
    a124:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a128:	|  |  |            movea.l 20(sp),a0
    a12c:	|  |  |            movea.l 4(a0),a1
    a130:	|  |  |            movea.l 24(sp),a0
    a134:	|  |  |            move.l 84(a0),d0
    a138:	|  |  |            move.l d0,d1
    a13a:	|  |  |            move.l d1,d0
    a13c:	|  |  |            add.l d0,d0
    a13e:	|  |  |            add.l d1,d0
    a140:	|  |  |            add.l d0,d0
    a142:	|  |  |            add.l d0,d0
    a144:	|  |  |            lea (0,a1,d0.l),a0
    a148:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a14c:	|  |  |            move.l 8(sp),d0
    a150:	|  |  |            add.l d0,d0
    a152:	|  |  |            subx.l d0,d0
    a154:	|  |  |            neg.l d0
    a156:	|  |  |            move.b d0,d0
    a158:	|  |  |            move.b d0,d0
    a15a:	|  |  |            andi.l #255,d0
    a160:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a164:	|  |  |            move.l 8(sp),-(sp)
    a168:	|  |  |            jsr 9064 <TF_abs>
    a16e:	|  |  |            addq.l #4,sp
    a170:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a174:	|  |  |            movea.l 20(sp),a0
    a178:	|  |  |            movea.l (a0),a0
    a17a:	|  |  |            move.l 8(a0),d0
    a17e:	|  |  |            cmp.l 12(sp),d0
    a182:	|  |  |        ,-- bgt.s a192 <drawPeople+0x302>
				fNum = 0;
    a184:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a188:	|  |  |        |   moveq #2,d0
    a18a:	|  |  |        |   sub.l 16(sp),d0
    a18e:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a192:	|  |  |        '-> moveq #2,d1
    a194:	|  |  |            cmp.l 16(sp),d1
    a198:	|  |  +----------- beq.s a214 <drawPeople+0x384>
				BOOL r = FALSE;
    a19a:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a19e:	|  |  |            move.l 16(sp),d0
    a1a2:	|  |  |            movea.w d0,a0
    a1a4:	|  |  |            movea.l 20(sp),a1
    a1a8:	|  |  |            movea.l (a1),a1
    a1aa:	|  |  |            movea.l 16(a1),a1
    a1ae:	|  |  |            move.l 12(sp),d1
    a1b2:	|  |  |            move.l d1,d0
    a1b4:	|  |  |            lsl.l #3,d0
    a1b6:	|  |  |            sub.l d1,d0
    a1b8:	|  |  |            add.l d0,d0
    a1ba:	|  |  |            add.l d0,d0
    a1bc:	|  |  |            add.l a1,d0
    a1be:	|  |  |            move.l a0,-(sp)
    a1c0:	|  |  |            move.l 28(sp),-(sp)
    a1c4:	|  |  |            move.l d0,-(sp)
    a1c6:	|  |  |            jsr 8d86 <scaleSprite>
    a1cc:	|  |  |            lea 12(sp),sp
    a1d0:	|  |  |            move.w d0,6(sp)
				if (r) {
    a1d4:	|  |  +----------- beq.s a214 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a1d6:	|  |  |            movea.l 24(sp),a0
    a1da:	|  |  |            movea.l 114(a0),a0
    a1de:	|  |  |            movea.l (a0),a0
    a1e0:	|  |  |            move.b (a0),d0
    a1e2:	|  |  +----------- beq.s a214 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a1e4:	|  |  |            move.l 1c858 <personRegion+0x1c>,d1
    a1ea:	|  |  |            movea.l 24(sp),a0
    a1ee:	|  |  |            move.l 114(a0),d0
    a1f2:	|  |  |            cmp.l d1,d0
    a1f4:	|  |  |        ,-- beq.s a1fc <drawPeople+0x36c>
    a1f6:	|  |  |        |   clr.l 1c7a0 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a1fc:	|  |  |        '-> movea.l 24(sp),a0
    a200:	|  |  |            move.l 114(a0),d0
    a204:	|  |  |            move.l d0,1c858 <personRegion+0x1c>
						overRegion = & personRegion;
    a20a:	|  |  |            move.l #116796,1c8e8 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a214:	|  |  '----------> movea.l 24(sp),a0
    a218:	|  |               move.l 88(a0),d0
    a21c:	|  |               subq.l #1,d0
    a21e:	|  |               movea.l 24(sp),a0
    a222:	|  |               move.l d0,88(a0)
    a226:	|  |               movea.l 24(sp),a0
    a22a:	|  |               move.l 88(a0),d0
    a22e:	|  |        ,----- bne.w a456 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a232:	|  |        |      movea.l 24(sp),a0
    a236:	|  |        |      move.l 84(a0),d0
    a23a:	|  |        |      addq.l #1,d0
    a23c:	|  |        |      movea.l 24(sp),a0
    a240:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a244:	|  |        |      movea.l 24(sp),a0
    a248:	|  |        |      move.l 84(a0),d0
    a24c:	|  |        |      movea.l 24(sp),a0
    a250:	|  |        |      movea.l 72(a0),a0
    a254:	|  |        |      move.l 8(a0),d1
    a258:	|  |        |      move.l d1,-(sp)
    a25a:	|  |        |      move.l d0,-(sp)
    a25c:	|  |        |      jsr 17b0c <__modsi3>
    a262:	|  |        |      addq.l #8,sp
    a264:	|  |        |      movea.l 24(sp),a0
    a268:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a26c:	|  |        |      movea.l 24(sp),a0
    a270:	|  |        |      movea.l 72(a0),a0
    a274:	|  |        |      movea.l 4(a0),a1
    a278:	|  |        |      movea.l 24(sp),a0
    a27c:	|  |        |      move.l 84(a0),d0
    a280:	|  |        |      move.l d0,d1
    a282:	|  |        |      move.l d1,d0
    a284:	|  |        |      add.l d0,d0
    a286:	|  |        |      add.l d1,d0
    a288:	|  |        |      add.l d0,d0
    a28a:	|  |        |      add.l d0,d0
    a28c:	|  |        |      lea (0,a1,d0.l),a0
    a290:	|  |        |      move.l 4(a0),d0
    a294:	|  |        |      movea.l 24(sp),a0
    a298:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a29c:	|  |        |      movea.l 24(sp),a0
    a2a0:	|  |        |      move.w 104(a0),d0
    a2a4:	|  |        +----- beq.w a456 <drawPeople+0x5c6>
    a2a8:	|  |        |      tst.l 20(sp)
    a2ac:	|  |        +----- beq.w a456 <drawPeople+0x5c6>
    a2b0:	|  |        |      movea.l 20(sp),a0
    a2b4:	|  |        |      move.l 4(a0),d0
    a2b8:	|  |        +----- beq.w a456 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a2bc:	|  |        |      movea.l 20(sp),a0
    a2c0:	|  |        |      movea.l 4(a0),a1
    a2c4:	|  |        |      movea.l 24(sp),a0
    a2c8:	|  |        |      move.l 84(a0),d0
    a2cc:	|  |        |      move.l d0,d1
    a2ce:	|  |        |      move.l d1,d0
    a2d0:	|  |        |      add.l d0,d0
    a2d2:	|  |        |      add.l d1,d0
    a2d4:	|  |        |      add.l d0,d0
    a2d6:	|  |        |      add.l d0,d0
    a2d8:	|  |        |      lea (0,a1,d0.l),a0
    a2dc:	|  |        |      move.l 8(a0),d0
    a2e0:	|  |        |  ,-- ble.w a382 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a2e4:	|  |        |  |   movea.l 20(sp),a0
    a2e8:	|  |        |  |   movea.l 4(a0),a1
    a2ec:	|  |        |  |   movea.l 24(sp),a0
    a2f0:	|  |        |  |   move.l 84(a0),d0
    a2f4:	|  |        |  |   move.l d0,d1
    a2f6:	|  |        |  |   move.l d1,d0
    a2f8:	|  |        |  |   add.l d0,d0
    a2fa:	|  |        |  |   add.l d1,d0
    a2fc:	|  |        |  |   add.l d0,d0
    a2fe:	|  |        |  |   add.l d0,d0
    a300:	|  |        |  |   lea (0,a1,d0.l),a0
    a304:	|  |        |  |   move.l 8(a0),d0
    a308:	|  |        |  |   clr.l -(sp)
    a30a:	|  |        |  |   move.l d0,-(sp)
    a30c:	|  |        |  |   jsr d040 <startSound>
    a312:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a314:	|  |        |  |   movea.l 24(sp),a0
    a318:	|  |        |  |   move.l 84(a0),d0
    a31c:	|  |        |  |   addq.l #1,d0
    a31e:	|  |        |  |   movea.l 24(sp),a0
    a322:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a326:	|  |        |  |   movea.l 24(sp),a0
    a32a:	|  |        |  |   move.l 84(a0),d0
    a32e:	|  |        |  |   movea.l 24(sp),a0
    a332:	|  |        |  |   movea.l 72(a0),a0
    a336:	|  |        |  |   move.l 8(a0),d1
    a33a:	|  |        |  |   move.l d1,-(sp)
    a33c:	|  |        |  |   move.l d0,-(sp)
    a33e:	|  |        |  |   jsr 17b0c <__modsi3>
    a344:	|  |        |  |   addq.l #8,sp
    a346:	|  |        |  |   movea.l 24(sp),a0
    a34a:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a34e:	|  |        |  |   movea.l 24(sp),a0
    a352:	|  |        |  |   movea.l 72(a0),a0
    a356:	|  |        |  |   movea.l 4(a0),a1
    a35a:	|  |        |  |   movea.l 24(sp),a0
    a35e:	|  |        |  |   move.l 84(a0),d0
    a362:	|  |        |  |   move.l d0,d1
    a364:	|  |        |  |   move.l d1,d0
    a366:	|  |        |  |   add.l d0,d0
    a368:	|  |        |  |   add.l d1,d0
    a36a:	|  |        |  |   add.l d0,d0
    a36c:	|  |        |  |   add.l d0,d0
    a36e:	|  |        |  |   lea (0,a1,d0.l),a0
    a372:	|  |        |  |   move.l 4(a0),d0
    a376:	|  |        |  |   movea.l 24(sp),a0
    a37a:	|  |        |  |   move.l d0,88(a0)
    a37e:	|  |        +--|-- bra.w a456 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a382:	|  |        |  '-> movea.l 20(sp),a0
    a386:	|  |        |      movea.l 4(a0),a1
    a38a:	|  |        |      movea.l 24(sp),a0
    a38e:	|  |        |      move.l 84(a0),d0
    a392:	|  |        |      move.l d0,d1
    a394:	|  |        |      move.l d1,d0
    a396:	|  |        |      add.l d0,d0
    a398:	|  |        |      add.l d1,d0
    a39a:	|  |        |      add.l d0,d0
    a39c:	|  |        |      add.l d0,d0
    a39e:	|  |        |      lea (0,a1,d0.l),a0
    a3a2:	|  |        |      move.l 8(a0),d0
    a3a6:	|  |        +----- beq.w a456 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a3aa:	|  |        |      movea.l 1c7a8 <noStack>,a1
    a3b0:	|  |        |      movea.l 20(sp),a0
    a3b4:	|  |        |      move.l 4(a0),d2
    a3b8:	|  |        |      movea.l 24(sp),a0
    a3bc:	|  |        |      move.l 84(a0),d0
    a3c0:	|  |        |      move.l d0,d1
    a3c2:	|  |        |      move.l d1,d0
    a3c4:	|  |        |      add.l d0,d0
    a3c6:	|  |        |      add.l d1,d0
    a3c8:	|  |        |      add.l d0,d0
    a3ca:	|  |        |      add.l d0,d0
    a3cc:	|  |        |      movea.l d2,a0
    a3ce:	|  |        |      adda.l d0,a0
    a3d0:	|  |        |      move.l 8(a0),d0
    a3d4:	|  |        |      neg.l d0
    a3d6:	|  |        |      pea 1 <_start+0x1>
    a3da:	|  |        |      move.l a1,-(sp)
    a3dc:	|  |        |      clr.l -(sp)
    a3de:	|  |        |      clr.l -(sp)
    a3e0:	|  |        |      move.l d0,-(sp)
    a3e2:	|  |        |      jsr 733a <startNewFunctionNum>
    a3e8:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a3ec:	|  |        |      movea.l 24(sp),a0
    a3f0:	|  |        |      move.l 84(a0),d0
    a3f4:	|  |        |      addq.l #1,d0
    a3f6:	|  |        |      movea.l 24(sp),a0
    a3fa:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a3fe:	|  |        |      movea.l 24(sp),a0
    a402:	|  |        |      move.l 84(a0),d0
    a406:	|  |        |      movea.l 24(sp),a0
    a40a:	|  |        |      movea.l 72(a0),a0
    a40e:	|  |        |      move.l 8(a0),d1
    a412:	|  |        |      move.l d1,-(sp)
    a414:	|  |        |      move.l d0,-(sp)
    a416:	|  |        |      jsr 17b0c <__modsi3>
    a41c:	|  |        |      addq.l #8,sp
    a41e:	|  |        |      movea.l 24(sp),a0
    a422:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a426:	|  |        |      movea.l 24(sp),a0
    a42a:	|  |        |      movea.l 72(a0),a0
    a42e:	|  |        |      movea.l 4(a0),a1
    a432:	|  |        |      movea.l 24(sp),a0
    a436:	|  |        |      move.l 84(a0),d0
    a43a:	|  |        |      move.l d0,d1
    a43c:	|  |        |      move.l d1,d0
    a43e:	|  |        |      add.l d0,d0
    a440:	|  |        |      add.l d1,d0
    a442:	|  |        |      add.l d0,d0
    a444:	|  |        |      add.l d0,d0
    a446:	|  |        |      lea (0,a1,d0.l),a0
    a44a:	|  |        |      move.l 4(a0),d0
    a44e:	|  |        |      movea.l 24(sp),a0
    a452:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a456:	|  |        '----> movea.l 24(sp),a0
    a45a:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a460:	|  '-------------> tst.l 24(sp)
    a464:	'----------------- bne.w 9eb2 <drawPeople+0x22>
	}
}
    a468:	                   nop
    a46a:	                   nop
    a46c:	                   move.l (sp)+,d2
    a46e:	                   lea 24(sp),sp
    a472:	                   rts

0000a474 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a474:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a476:	          move.l 1c838 <allPeople>,(sp)
	while (thisPerson) {
    a47c:	      ,-- bra.s a494 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a47e:	,-----|-> movea.l (sp),a0
    a480:	|     |   movea.l 114(a0),a0
    a484:	|     |   move.l 4(a0),d0
    a488:	|     |   cmp.l 8(sp),d0
    a48c:	|  ,--|-- beq.s a49a <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a48e:	|  |  |   movea.l (sp),a0
    a490:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a494:	|  |  '-> tst.l (sp)
    a496:	'--|----- bne.s a47e <findPerson+0xa>
    a498:	   |  ,-- bra.s a49c <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a49a:	   '--|-> nop
	}
	return thisPerson;
    a49c:	      '-> move.l (sp),d0
}
    a49e:	          addq.l #4,sp
    a4a0:	          rts

0000a4a2 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a4a2:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a4a4:	       move.l 12(sp),-(sp)
    a4a8:	       jsr a474 <findPerson>
    a4ae:	       addq.l #4,sp
    a4b0:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a4b2:	   ,-- bne.s a4b8 <floatCharacter+0x16>
    a4b4:	   |   clr.w d0
    a4b6:	,--|-- bra.s a4c2 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a4b8:	|  '-> movea.l (sp),a0
    a4ba:	|      move.l 8(sp),24(a0)
	return TRUE;
    a4c0:	|      moveq #1,d0
}
    a4c2:	'----> addq.l #4,sp
    a4c4:	       rts

0000a4c6 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a4c6:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a4c8:	          tst.l 8(sp)
    a4cc:	      ,-- bne.s a4da <forceWalkingPerson+0x14>
    a4ce:	      |   tst.l 12(sp)
    a4d2:	      +-- bne.s a4da <forceWalkingPerson+0x14>
    a4d4:	      |   clr.w d0
    a4d6:	,-----|-- bra.w a56c <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a4da:	|     '-> move.l 16(sp),-(sp)
    a4de:	|         jsr a474 <findPerson>
    a4e4:	|         addq.l #4,sp
    a4e6:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a4e8:	|     ,-- bne.s a4ee <forceWalkingPerson+0x28>
    a4ea:	|     |   clr.w d0
    a4ec:	+-----|-- bra.s a56c <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a4ee:	|     '-> movea.l (sp),a0
    a4f0:	|         move.l 68(a0),d0
    a4f4:	|     ,-- beq.s a506 <forceWalkingPerson+0x40>
    a4f6:	|     |   movea.l (sp),a0
    a4f8:	|     |   move.l 68(a0),d0
    a4fc:	|     |   move.l d0,-(sp)
    a4fe:	|     |   jsr 4f7e <abortFunction>
    a504:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a506:	|     '-> movea.l (sp),a0
    a508:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a50e:	|         movea.l (sp),a0
    a510:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a514:	|         movea.l (sp),a0
    a516:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a51c:	|         movea.l (sp),a0
    a51e:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a524:	|         movea.l (sp),a0
    a526:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a52c:	|         movea.l (sp),a0
    a52e:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a532:	|         movea.l (sp),a0
    a534:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a538:	|         move.l (sp),-(sp)
    a53a:	|         jsr 97d6 <doBorderStuff>
    a540:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a542:	|         pea 1 <_start+0x1>
    a546:	|         move.l 4(sp),-(sp)
    a54a:	|         jsr bdba <walkMe>
    a550:	|         addq.l #8,sp
    a552:	|         tst.w d0
    a554:	|     ,-- bne.s a55e <forceWalkingPerson+0x98>
    a556:	|     |   movea.l (sp),a0
    a558:	|     |   move.w 66(a0),d0
    a55c:	|  ,--|-- beq.s a56a <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a55e:	|  |  '-> movea.l (sp),a0
    a560:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a566:	|  |      moveq #1,d0
    a568:	+--|----- bra.s a56c <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a56a:	|  '----> clr.w d0
    }
}
    a56c:	'-------> addq.l #4,sp
    a56e:	          rts

0000a570 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a570:	                lea -56(sp),sp
    a574:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a576:	                move.l #320,56(sp)
    a57e:	                move.l #200,52(sp)
    a586:	                moveq #-1,d0
    a588:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a58c:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a594:	                clr.l 44(sp)
    a598:	   ,----------- bra.w a770 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a59c:	,--|----------> movea.l 1c8f0 <currentFloor>,a0
    a5a2:	|  |            move.l 12(a0),d1
    a5a6:	|  |            move.l 44(sp),d0
    a5aa:	|  |            lsl.l #3,d0
    a5ac:	|  |            movea.l d1,a0
    a5ae:	|  |            adda.l d0,a0
    a5b0:	|  |            move.l (a0),d0
    a5b2:	|  |            move.l d0,d1
    a5b4:	|  |            subq.l #1,d1
    a5b6:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a5ba:	|  |            clr.l 40(sp)
    a5be:	|  |     ,----- bra.w a74e <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a5c2:	|  |  ,--|----> movea.l 1c8f0 <currentFloor>,a0
    a5c8:	|  |  |  |      move.l 4(a0),d1
    a5cc:	|  |  |  |      movea.l 1c8f0 <currentFloor>,a0
    a5d2:	|  |  |  |      movea.l 12(a0),a0
    a5d6:	|  |  |  |      move.l 44(sp),d0
    a5da:	|  |  |  |      lsl.l #3,d0
    a5dc:	|  |  |  |      adda.l d0,a0
    a5de:	|  |  |  |      movea.l 4(a0),a0
    a5e2:	|  |  |  |      move.l 40(sp),d0
    a5e6:	|  |  |  |      add.l d0,d0
    a5e8:	|  |  |  |      add.l d0,d0
    a5ea:	|  |  |  |      adda.l d0,a0
    a5ec:	|  |  |  |      move.l (a0),d0
    a5ee:	|  |  |  |      lsl.l #3,d0
    a5f0:	|  |  |  |      movea.l d1,a0
    a5f2:	|  |  |  |      adda.l d0,a0
    a5f4:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a5f8:	|  |  |  |      movea.l 1c8f0 <currentFloor>,a0
    a5fe:	|  |  |  |      move.l 4(a0),d1
    a602:	|  |  |  |      movea.l 1c8f0 <currentFloor>,a0
    a608:	|  |  |  |      movea.l 12(a0),a0
    a60c:	|  |  |  |      move.l 44(sp),d0
    a610:	|  |  |  |      lsl.l #3,d0
    a612:	|  |  |  |      adda.l d0,a0
    a614:	|  |  |  |      movea.l 4(a0),a0
    a618:	|  |  |  |      move.l 40(sp),d0
    a61c:	|  |  |  |      add.l d0,d0
    a61e:	|  |  |  |      add.l d0,d0
    a620:	|  |  |  |      adda.l d0,a0
    a622:	|  |  |  |      move.l (a0),d0
    a624:	|  |  |  |      lsl.l #3,d0
    a626:	|  |  |  |      movea.l d1,a0
    a628:	|  |  |  |      adda.l d0,a0
    a62a:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a630:	|  |  |  |      movea.l 1c8f0 <currentFloor>,a0
    a636:	|  |  |  |      move.l 4(a0),d1
    a63a:	|  |  |  |      movea.l 1c8f0 <currentFloor>,a0
    a640:	|  |  |  |      movea.l 12(a0),a0
    a644:	|  |  |  |      move.l 44(sp),d0
    a648:	|  |  |  |      lsl.l #3,d0
    a64a:	|  |  |  |      adda.l d0,a0
    a64c:	|  |  |  |      movea.l 4(a0),a0
    a650:	|  |  |  |      move.l 36(sp),d0
    a654:	|  |  |  |      add.l d0,d0
    a656:	|  |  |  |      add.l d0,d0
    a658:	|  |  |  |      adda.l d0,a0
    a65a:	|  |  |  |      move.l (a0),d0
    a65c:	|  |  |  |      lsl.l #3,d0
    a65e:	|  |  |  |      movea.l d1,a0
    a660:	|  |  |  |      adda.l d0,a0
    a662:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a666:	|  |  |  |      movea.l 1c8f0 <currentFloor>,a0
    a66c:	|  |  |  |      move.l 4(a0),d1
    a670:	|  |  |  |      movea.l 1c8f0 <currentFloor>,a0
    a676:	|  |  |  |      movea.l 12(a0),a0
    a67a:	|  |  |  |      move.l 44(sp),d0
    a67e:	|  |  |  |      lsl.l #3,d0
    a680:	|  |  |  |      adda.l d0,a0
    a682:	|  |  |  |      movea.l 4(a0),a0
    a686:	|  |  |  |      move.l 36(sp),d0
    a68a:	|  |  |  |      add.l d0,d0
    a68c:	|  |  |  |      add.l d0,d0
    a68e:	|  |  |  |      adda.l d0,a0
    a690:	|  |  |  |      move.l (a0),d0
    a692:	|  |  |  |      lsl.l #3,d0
    a694:	|  |  |  |      movea.l d1,a0
    a696:	|  |  |  |      adda.l d0,a0
    a698:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a69e:	|  |  |  |      movea.l 68(sp),a0
    a6a2:	|  |  |  |      move.l (a0),d1
    a6a4:	|  |  |  |      movea.l 64(sp),a0
    a6a8:	|  |  |  |      move.l (a0),d0
    a6aa:	|  |  |  |      move.l d1,-(sp)
    a6ac:	|  |  |  |      move.l d0,-(sp)
    a6ae:	|  |  |  |      move.l 24(sp),-(sp)
    a6b2:	|  |  |  |      move.l 32(sp),-(sp)
    a6b6:	|  |  |  |      move.l 40(sp),-(sp)
    a6ba:	|  |  |  |      move.l 48(sp),-(sp)
    a6be:	|  |  |  |      lea 28(sp),a0
    a6c2:	|  |  |  |      move.l a0,-(sp)
    a6c4:	|  |  |  |      lea 36(sp),a0
    a6c8:	|  |  |  |      move.l a0,-(sp)
    a6ca:	|  |  |  |      jsr 15eee <closestPointOnLine>
    a6d0:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a6d4:	|  |  |  |      movea.l 64(sp),a0
    a6d8:	|  |  |  |      move.l (a0),d0
    a6da:	|  |  |  |      move.l 8(sp),d1
    a6de:	|  |  |  |      move.l d0,d2
    a6e0:	|  |  |  |      sub.l d1,d2
    a6e2:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a6e6:	|  |  |  |      movea.l 68(sp),a0
    a6ea:	|  |  |  |      move.l (a0),d0
    a6ec:	|  |  |  |      move.l 4(sp),d1
    a6f0:	|  |  |  |      move.l d0,d2
    a6f2:	|  |  |  |      sub.l d1,d2
    a6f4:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a6f8:	|  |  |  |      move.l 28(sp),-(sp)
    a6fc:	|  |  |  |      move.l 32(sp),-(sp)
    a700:	|  |  |  |      jsr 17a60 <__mulsi3>
    a706:	|  |  |  |      addq.l #8,sp
    a708:	|  |  |  |      move.l d0,d2
    a70a:	|  |  |  |      move.l 24(sp),-(sp)
    a70e:	|  |  |  |      move.l 28(sp),-(sp)
    a712:	|  |  |  |      jsr 17a60 <__mulsi3>
    a718:	|  |  |  |      addq.l #8,sp
    a71a:	|  |  |  |      move.l d2,d1
    a71c:	|  |  |  |      add.l d0,d1
    a71e:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a722:	|  |  |  |      move.l 12(sp),d2
    a726:	|  |  |  |      cmp.l 32(sp),d2
    a72a:	|  |  |  |  ,-- bge.s a744 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a72c:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a732:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a738:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a73e:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a744:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a74a:	|  |  |  |      addq.l #1,40(sp)
    a74e:	|  |  |  '----> movea.l 1c8f0 <currentFloor>,a0
    a754:	|  |  |         move.l 12(a0),d1
    a758:	|  |  |         move.l 44(sp),d0
    a75c:	|  |  |         lsl.l #3,d0
    a75e:	|  |  |         movea.l d1,a0
    a760:	|  |  |         adda.l d0,a0
    a762:	|  |  |         move.l (a0),d0
    a764:	|  |  |         cmp.l 40(sp),d0
    a768:	|  |  '-------- bgt.w a5c2 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a76c:	|  |            addq.l #1,44(sp)
    a770:	|  '----------> movea.l 1c8f0 <currentFloor>,a0
    a776:	|               move.l 8(a0),d0
    a77a:	|               cmp.l 44(sp),d0
    a77e:	'-------------- bgt.w a59c <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a782:	                moveq #-1,d0
    a784:	                cmp.l 48(sp),d0
    a788:	            ,-- bne.s a78e <handleClosestPoint+0x21e>
    a78a:	            |   clr.w d0
    a78c:	         ,--|-- bra.s a7a8 <handleClosestPoint+0x238>
	*setX = gotX;
    a78e:	         |  '-> movea.l 64(sp),a0
    a792:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a796:	         |      movea.l 68(sp),a0
    a79a:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a79e:	         |      movea.l 72(sp),a0
    a7a2:	         |      move.l 48(sp),(a0)

	return TRUE;
    a7a6:	         |      moveq #1,d0
}
    a7a8:	         '----> move.l (sp)+,d2
    a7aa:	                lea 56(sp),sp
    a7ae:	                rts

0000a7b0 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a7b0:	clr.l 1c84c <personRegion+0x10>
	personRegion.sY = 0;
    a7b6:	clr.l 1c850 <personRegion+0x14>
	personRegion.di = -1;
    a7bc:	moveq #-1,d0
    a7be:	move.l d0,1c854 <personRegion+0x18>
	allScreenRegions = NULL;
    a7c4:	clr.l 1c8e4 <allScreenRegions>

	return TRUE;
    a7ca:	moveq #1,d0
}
    a7cc:	rts

0000a7ce <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a7ce:	          subq.l #4,sp
    a7d0:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a7d2:	          tst.l 12(sp)
    a7d6:	      ,-- bne.s a7de <jumpPerson+0x10>
    a7d8:	      |   tst.l 16(sp)
    a7dc:	,-----|-- beq.s a852 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a7de:	|     '-> move.l 20(sp),-(sp)
    a7e2:	|         jsr a474 <findPerson>
    a7e8:	|         addq.l #4,sp
    a7ea:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a7ee:	|  ,----- beq.s a856 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a7f0:	|  |      movea.l 4(sp),a0
    a7f4:	|  |      move.l 68(a0),d0
    a7f8:	|  |  ,-- beq.s a80c <jumpPerson+0x3e>
    a7fa:	|  |  |   movea.l 4(sp),a0
    a7fe:	|  |  |   move.l 68(a0),d0
    a802:	|  |  |   move.l d0,-(sp)
    a804:	|  |  |   jsr 4f7e <abortFunction>
    a80a:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a80c:	|  |  '-> movea.l 4(sp),a0
    a810:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a814:	|  |      movea.l 4(sp),a0
    a818:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a81c:	|  |      movea.l 4(sp),a0
    a820:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a824:	|  |      move.l 16(sp),-(sp)
    a828:	|  |      jsr 17506 <__floatsisf>
    a82e:	|  |      addq.l #4,sp
    a830:	|  |      move.l d0,d2
    a832:	|  |      move.l 12(sp),-(sp)
    a836:	|  |      jsr 17506 <__floatsisf>
    a83c:	|  |      addq.l #4,sp
    a83e:	|  |      move.l d2,-(sp)
    a840:	|  |      move.l d0,-(sp)
    a842:	|  |      move.l 12(sp),-(sp)
    a846:	|  |      jsr abbc <moveAndScale>
    a84c:	|  |      lea 12(sp),sp
    a850:	|  |  ,-- bra.s a858 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a852:	'--|--|-> nop
    a854:	   |  +-- bra.s a858 <jumpPerson+0x8a>
    if (!moveMe) return;
    a856:	   '--|-> nop
}
    a858:	      '-> move.l (sp)+,d2
    a85a:	          addq.l #4,sp
    a85c:	          rts

0000a85e <killAllPeople>:


void killAllPeople () {
    a85e:	          subq.l #8,sp
    a860:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a862:	   ,----- bra.s a8ce <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a864:	,--|----> movea.l 1c838 <allPeople>,a0
    a86a:	|  |      move.l 68(a0),d0
    a86e:	|  |  ,-- beq.s a884 <killAllPeople+0x26>
    a870:	|  |  |   movea.l 1c838 <allPeople>,a0
    a876:	|  |  |   move.l 68(a0),d0
    a87a:	|  |  |   move.l d0,-(sp)
    a87c:	|  |  |   jsr 4f7e <abortFunction>
    a882:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a884:	|  |  '-> movea.l 1c838 <allPeople>,a0
    a88a:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a88e:	|  |      move.l 1c838 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a896:	|  |      movea.l 1c838 <allPeople>,a0
    a89c:	|  |      move.l 36(a0),d0
    a8a0:	|  |      move.l d0,1c838 <allPeople>
		removeObjectType (killPeople -> thisType);
    a8a6:	|  |      movea.l 8(sp),a0
    a8aa:	|  |      move.l 114(a0),d0
    a8ae:	|  |      move.l d0,-(sp)
    a8b0:	|  |      jsr d71e <removeObjectType>
    a8b6:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a8b8:	|  |      move.l 8(sp),4(sp)
    a8be:	|  |      move.l 1c7d8 <SysBase>,d0
    a8c4:	|  |      movea.l d0,a6
    a8c6:	|  |      movea.l 4(sp),a1
    a8ca:	|  |      jsr -690(a6)
	while (allPeople) {
    a8ce:	|  '----> move.l 1c838 <allPeople>,d0
    a8d4:	'-------- bne.s a864 <killAllPeople+0x6>
	}
}
    a8d6:	          nop
    a8d8:	          nop
    a8da:	          movea.l (sp)+,a6
    a8dc:	          addq.l #8,sp
    a8de:	          rts

0000a8e0 <killMostPeople>:

void killMostPeople() {
    a8e0:	          lea -12(sp),sp
    a8e4:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    a8e6:	          move.l #116792,12(sp)

    while (*lookyHere) {
    a8ee:	   ,----- bra.w a974 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    a8f2:	,--|----> movea.l 12(sp),a0
    a8f6:	|  |      movea.l (a0),a0
    a8f8:	|  |      move.l 118(a0),d0
    a8fc:	|  |      moveq #32,d1
    a8fe:	|  |      and.l d1,d0
    a900:	|  |  ,-- beq.s a912 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    a902:	|  |  |   movea.l 12(sp),a0
    a906:	|  |  |   move.l (a0),d0
    a908:	|  |  |   moveq #36,d1
    a90a:	|  |  |   add.l d0,d1
    a90c:	|  |  |   move.l d1,12(sp)
    a910:	|  +--|-- bra.s a974 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    a912:	|  |  '-> movea.l 12(sp),a0
    a916:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    a91a:	|  |      movea.l 8(sp),a0
    a91e:	|  |      move.l 36(a0),d0
    a922:	|  |      movea.l 12(sp),a0
    a926:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    a928:	|  |      movea.l 8(sp),a0
    a92c:	|  |      move.l 68(a0),d0
    a930:	|  |  ,-- beq.s a944 <killMostPeople+0x64>
    a932:	|  |  |   movea.l 8(sp),a0
    a936:	|  |  |   move.l 68(a0),d0
    a93a:	|  |  |   move.l d0,-(sp)
    a93c:	|  |  |   jsr 4f7e <abortFunction>
    a942:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    a944:	|  |  '-> movea.l 8(sp),a0
    a948:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    a94c:	|  |      movea.l 8(sp),a0
    a950:	|  |      move.l 114(a0),d0
    a954:	|  |      move.l d0,-(sp)
    a956:	|  |      jsr d71e <removeObjectType>
    a95c:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    a95e:	|  |      move.l 8(sp),4(sp)
    a964:	|  |      move.l 1c7d8 <SysBase>,d0
    a96a:	|  |      movea.l d0,a6
    a96c:	|  |      movea.l 4(sp),a1
    a970:	|  |      jsr -690(a6)
    while (*lookyHere) {
    a974:	|  '----> movea.l 12(sp),a0
    a978:	|         move.l (a0),d0
    a97a:	'-------- bne.w a8f2 <killMostPeople+0x12>
        }
    }
}
    a97e:	          nop
    a980:	          nop
    a982:	          movea.l (sp)+,a6
    a984:	          lea 12(sp),sp
    a988:	          rts

0000a98a <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    a98a:	clr.l -(sp)
    a98c:	move.l sp,d0
    a98e:	addq.l #8,d0
    a990:	move.l d0,-(sp)
    a992:	jsr 4120 <setFrames>
    a998:	addq.l #8,sp
}
    a99a:	nop
    a99c:	rts

0000a99e <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a99e:	          lea -12(sp),sp
    a9a2:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    a9a4:	          tst.l 20(sp)
    a9a8:	      ,-- bne.s a9b6 <makeWalkingPerson+0x18>
    a9aa:	      |   tst.l 24(sp)
    a9ae:	      +-- bne.s a9b6 <makeWalkingPerson+0x18>
    a9b0:	      |   clr.w d0
    a9b2:	,-----|-- bra.w ab4e <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    a9b6:	|     '-> movea.l 1c8f0 <currentFloor>,a0
    a9bc:	|         move.l 8(a0),d0
    a9c0:	|     ,-- bne.s a9c8 <makeWalkingPerson+0x2a>
    a9c2:	|     |   clr.w d0
    a9c4:	+-----|-- bra.w ab4e <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    a9c8:	|     '-> move.l 28(sp),-(sp)
    a9cc:	|         jsr a474 <findPerson>
    a9d2:	|         addq.l #4,sp
    a9d4:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    a9d8:	|     ,-- bne.s a9e0 <makeWalkingPerson+0x42>
    a9da:	|     |   clr.w d0
    a9dc:	+-----|-- bra.w ab4e <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    a9e0:	|     '-> movea.l 12(sp),a0
    a9e4:	|         move.l 68(a0),d0
    a9e8:	|     ,-- beq.s a9fc <makeWalkingPerson+0x5e>
    a9ea:	|     |   movea.l 12(sp),a0
    a9ee:	|     |   move.l 68(a0),d0
    a9f2:	|     |   move.l d0,-(sp)
    a9f4:	|     |   jsr 4f7e <abortFunction>
    a9fa:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    a9fc:	|     '-> movea.l 12(sp),a0
    aa00:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    aa04:	|         movea.l 12(sp),a0
    aa08:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    aa0e:	|         movea.l 12(sp),a0
    aa12:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    aa18:	|         movea.l 12(sp),a0
    aa1c:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    aa22:	|         movea.l 12(sp),a0
    aa26:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    aa2c:	|         move.l 24(sp),-(sp)
    aa30:	|         move.l 24(sp),-(sp)
    aa34:	|         jsr 16436 <inFloor>
    aa3a:	|         addq.l #8,sp
    aa3c:	|         movea.l 12(sp),a0
    aa40:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    aa44:	|         movea.l 12(sp),a0
    aa48:	|         move.l 60(a0),d0
    aa4c:	|         moveq #-1,d1
    aa4e:	|         cmp.l d0,d1
    aa50:	|     ,-- bne.s aa80 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    aa52:	|     |   movea.w #60,a0
    aa56:	|     |   adda.l 12(sp),a0
    aa5a:	|     |   moveq #44,d1
    aa5c:	|     |   add.l 12(sp),d1
    aa60:	|     |   moveq #40,d0
    aa62:	|     |   add.l 12(sp),d0
    aa66:	|     |   move.l a0,-(sp)
    aa68:	|     |   move.l d1,-(sp)
    aa6a:	|     |   move.l d0,-(sp)
    aa6c:	|     |   jsr a570 <handleClosestPoint>
    aa72:	|     |   lea 12(sp),sp
    aa76:	|     |   tst.w d0
    aa78:	|     +-- bne.s aa80 <makeWalkingPerson+0xe2>
    aa7a:	|     |   clr.w d0
    aa7c:	+-----|-- bra.w ab4e <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    aa80:	|     '-> movea.l 12(sp),a0
    aa84:	|         move.l 4(a0),d0
    aa88:	|         move.l d0,-(sp)
    aa8a:	|         jsr 1749e <__fixsfsi>
    aa90:	|         addq.l #4,sp
    aa92:	|         move.l d0,d2
    aa94:	|         movea.l 12(sp),a0
    aa98:	|         move.l (a0),d0
    aa9a:	|         move.l d0,-(sp)
    aa9c:	|         jsr 1749e <__fixsfsi>
    aaa2:	|         addq.l #4,sp
    aaa4:	|         move.l d2,-(sp)
    aaa6:	|         move.l d0,-(sp)
    aaa8:	|         jsr 16436 <inFloor>
    aaae:	|         addq.l #8,sp
    aab0:	|         movea.l 12(sp),a0
    aab4:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    aab8:	|         movea.l 12(sp),a0
    aabc:	|         move.l 56(a0),d0
    aac0:	|         moveq #-1,d1
    aac2:	|         cmp.l d0,d1
    aac4:	|     ,-- bne.s ab16 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    aac6:	|     |   movea.l 12(sp),a0
    aaca:	|     |   move.l (a0),d0
    aacc:	|     |   move.l d0,-(sp)
    aace:	|     |   jsr 1749e <__fixsfsi>
    aad4:	|     |   addq.l #4,sp
    aad6:	|     |   move.l d0,8(sp)
    aada:	|     |   movea.l 12(sp),a0
    aade:	|     |   move.l 4(a0),d0
    aae2:	|     |   move.l d0,-(sp)
    aae4:	|     |   jsr 1749e <__fixsfsi>
    aaea:	|     |   addq.l #4,sp
    aaec:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    aaf0:	|     |   moveq #56,d0
    aaf2:	|     |   add.l 12(sp),d0
    aaf6:	|     |   move.l d0,-(sp)
    aaf8:	|     |   lea 8(sp),a0
    aafc:	|     |   move.l a0,-(sp)
    aafe:	|     |   moveq #16,d0
    ab00:	|     |   add.l sp,d0
    ab02:	|     |   move.l d0,-(sp)
    ab04:	|     |   jsr a570 <handleClosestPoint>
    ab0a:	|     |   lea 12(sp),sp
    ab0e:	|     |   tst.w d0
    ab10:	|     +-- bne.s ab16 <makeWalkingPerson+0x178>
    ab12:	|     |   clr.w d0
    ab14:	+-----|-- bra.s ab4e <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    ab16:	|     '-> move.l 12(sp),-(sp)
    ab1a:	|         jsr 97d6 <doBorderStuff>
    ab20:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    ab22:	|         clr.l -(sp)
    ab24:	|         move.l 16(sp),-(sp)
    ab28:	|         jsr bdba <walkMe>
    ab2e:	|         addq.l #8,sp
    ab30:	|         tst.w d0
    ab32:	|     ,-- bne.s ab3e <makeWalkingPerson+0x1a0>
    ab34:	|     |   movea.l 12(sp),a0
    ab38:	|     |   move.w 66(a0),d0
    ab3c:	|  ,--|-- beq.s ab4c <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    ab3e:	|  |  '-> movea.l 12(sp),a0
    ab42:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ab48:	|  |      moveq #1,d0
    ab4a:	+--|----- bra.s ab4e <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ab4c:	|  '----> clr.w d0
	}
}
    ab4e:	'-------> move.l (sp)+,d2
    ab50:	          lea 12(sp),sp
    ab54:	          rts

0000ab56 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ab56:	       lea -16(sp),sp
    ab5a:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ab5c:	       moveq #12,d0
    ab5e:	       move.l d0,16(sp)
    ab62:	       clr.l 12(sp)
    ab66:	       move.l 1c7d8 <SysBase>,d0
    ab6c:	       movea.l d0,a6
    ab6e:	       move.l 16(sp),d0
    ab72:	       move.l 12(sp),d1
    ab76:	       jsr -684(a6)
    ab7a:	       move.l d0,8(sp)
    ab7e:	       move.l 8(sp),d0
    ab82:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ab86:	   ,-- bne.s ab9a <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ab88:	   |   pea 1909f <PutChar+0x1529>
    ab8e:	   |   jsr 170d4 <KPrintF>
    ab94:	   |   addq.l #4,sp
        return NULL;    
    ab96:	   |   moveq #0,d0
    ab98:	,--|-- bra.s abb4 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ab9a:	|  '-> movea.l 4(sp),a0
    ab9e:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    aba0:	|      movea.l 4(sp),a0
    aba4:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    aba8:	|      movea.l 4(sp),a0
    abac:	|      clr.l 4(a0)
	return newAnim;
    abb0:	|      move.l 4(sp),d0
}
    abb4:	'----> movea.l (sp)+,a6
    abb6:	       lea 16(sp),sp
    abba:	       rts

0000abbc <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    abbc:	    move.l d2,-(sp)
	me->x = x;
    abbe:	    movea.l 8(sp),a0
    abc2:	    move.l 12(sp),(a0)
	me->y = y;
    abc6:	    movea.l 8(sp),a0
    abca:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    abd0:	    movea.l 8(sp),a0
    abd4:	    clr.l 8(a0)
	me->oldy = 0;
    abd8:	    movea.l 8(sp),a0
    abdc:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    abe0:	    movea.l 8(sp),a0
    abe4:	    move.l 118(a0),d0
    abe8:	    moveq #2,d1
    abea:	    and.l d1,d0
    abec:	,-- bne.s ac44 <moveAndScale+0x88>
    abee:	|   move.w 1c160 <scaleDivide>,d0
    abf4:	+-- beq.s ac44 <moveAndScale+0x88>
    abf6:	|   movea.l 8(sp),a0
    abfa:	|   move.l 4(a0),d2
    abfe:	|   move.w 1c15e <scaleHorizon>,d0
    ac04:	|   movea.w d0,a0
    ac06:	|   move.l a0,-(sp)
    ac08:	|   jsr 17506 <__floatsisf>
    ac0e:	|   addq.l #4,sp
    ac10:	|   move.l d0,-(sp)
    ac12:	|   move.l d2,-(sp)
    ac14:	|   jsr 177fa <__subsf3>
    ac1a:	|   addq.l #8,sp
    ac1c:	|   move.l d0,d2
    ac1e:	|   move.w 1c160 <scaleDivide>,d0
    ac24:	|   movea.w d0,a0
    ac26:	|   move.l a0,-(sp)
    ac28:	|   jsr 17506 <__floatsisf>
    ac2e:	|   addq.l #4,sp
    ac30:	|   move.l d0,-(sp)
    ac32:	|   move.l d2,-(sp)
    ac34:	|   jsr 173bc <__divsf3>
    ac3a:	|   addq.l #8,sp
    ac3c:	|   movea.l 8(sp),a0
    ac40:	|   move.l d0,32(a0)
}
    ac44:	'-> nop
    ac46:	    move.l (sp)+,d2
    ac48:	    rts

0000ac4a <removeOneCharacter>:

void removeOneCharacter (int i) {
    ac4a:	          lea -16(sp),sp
    ac4e:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    ac50:	          move.l 24(sp),-(sp)
    ac54:	          jsr a474 <findPerson>
    ac5a:	          addq.l #4,sp
    ac5c:	          move.l d0,8(sp)

    if (p) {
    ac60:	,-------- beq.w ad40 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    ac64:	|         move.l 1c8e8 <overRegion>,d0
    ac6a:	|         cmpi.l #116796,d0
    ac70:	|     ,-- bne.s ac8e <removeOneCharacter+0x44>
    ac72:	|     |   movea.l 1c8e8 <overRegion>,a0
    ac78:	|     |   move.l 28(a0),d1
    ac7c:	|     |   movea.l 8(sp),a0
    ac80:	|     |   move.l 114(a0),d0
    ac84:	|     |   cmp.l d1,d0
    ac86:	|     +-- bne.s ac8e <removeOneCharacter+0x44>
            overRegion = NULL;
    ac88:	|     |   clr.l 1c8e8 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    ac8e:	|     '-> movea.l 8(sp),a0
    ac92:	|         move.l 68(a0),d0
    ac96:	|     ,-- beq.s acaa <removeOneCharacter+0x60>
    ac98:	|     |   movea.l 8(sp),a0
    ac9c:	|     |   move.l 68(a0),d0
    aca0:	|     |   move.l d0,-(sp)
    aca2:	|     |   jsr 4f7e <abortFunction>
    aca8:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    acaa:	|     '-> movea.l 8(sp),a0
    acae:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    acb2:	|         clr.l 12(sp)
    acb6:	|     ,-- bra.s acde <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    acb8:	|  ,--|-> movea.l 8(sp),a0
    acbc:	|  |  |   movea.l 80(a0),a0
    acc0:	|  |  |   move.l (a0),d1
    acc2:	|  |  |   move.l 12(sp),d0
    acc6:	|  |  |   add.l d0,d0
    acc8:	|  |  |   add.l d0,d0
    acca:	|  |  |   movea.l d1,a0
    accc:	|  |  |   adda.l d0,a0
    acce:	|  |  |   move.l (a0),d0
    acd0:	|  |  |   move.l d0,-(sp)
    acd2:	|  |  |   jsr 9752 <deleteAnim>
    acd8:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    acda:	|  |  |   addq.l #1,12(sp)
    acde:	|  |  '-> moveq #2,d0
    ace0:	|  |      cmp.l 12(sp),d0
    ace4:	|  '----- bge.s acb8 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    ace6:	|         move.l #116792,16(sp)
    acee:	|     ,-- bra.s acfe <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    acf0:	|  ,--|-> movea.l 16(sp),a0
    acf4:	|  |  |   move.l (a0),d0
    acf6:	|  |  |   moveq #36,d1
    acf8:	|  |  |   add.l d0,d1
    acfa:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    acfe:	|  |  '-> movea.l 16(sp),a0
    ad02:	|  |      move.l (a0),d0
    ad04:	|  |      cmp.l 8(sp),d0
    ad08:	|  '----- bne.s acf0 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    ad0a:	|         movea.l 8(sp),a0
    ad0e:	|         move.l 36(a0),d0
    ad12:	|         movea.l 16(sp),a0
    ad16:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    ad18:	|         movea.l 8(sp),a0
    ad1c:	|         move.l 114(a0),d0
    ad20:	|         move.l d0,-(sp)
    ad22:	|         jsr d71e <removeObjectType>
    ad28:	|         addq.l #4,sp
        FreeVec(p);
    ad2a:	|         move.l 8(sp),4(sp)
    ad30:	|         move.l 1c7d8 <SysBase>,d0
    ad36:	|         movea.l d0,a6
    ad38:	|         movea.l 4(sp),a1
    ad3c:	|         jsr -690(a6)
		
    }
}
    ad40:	'-------> nop
    ad42:	          movea.l (sp)+,a6
    ad44:	          lea 16(sp),sp
    ad48:	          rts

0000ad4a <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    ad4a:	       subq.l #8,sp
    ad4c:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    ad4e:	       movea.l 16(sp),a0
    ad52:	       movea.l 80(a0),a0
    ad56:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    ad5c:	       movea.l 16(sp),a0
    ad60:	       move.l 92(a0),d2
    ad64:	       move.l 4(sp),-(sp)
    ad68:	       pea b4 <_start+0xb4>
    ad6c:	       jsr 17ade <__divsi3>
    ad72:	       addq.l #8,sp
    ad74:	       add.l d2,d0
    ad76:	       move.l d0,d1
    ad78:	       addi.l #180,d1
    ad7e:	       movea.l 16(sp),a0
    ad82:	       move.l 100(a0),d0
    ad86:	       move.l d1,d2
    ad88:	       add.l d0,d2
    ad8a:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    ad8e:	   ,-- bra.s ad98 <rethinkAngle+0x4e>
    ad90:	,--|-> addi.l #-360,8(sp)
    ad98:	|  '-> cmpi.l #359,8(sp)
    ada0:	'----- bgt.s ad90 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    ada2:	       move.l 4(sp),-(sp)
    ada6:	       move.l 12(sp),-(sp)
    adaa:	       jsr 17a60 <__mulsi3>
    adb0:	       addq.l #8,sp
    adb2:	       pea 168 <decodeFilename+0x50>
    adb6:	       move.l d0,-(sp)
    adb8:	       jsr 17ade <__divsi3>
    adbe:	       addq.l #8,sp
    adc0:	       movea.l 16(sp),a0
    adc4:	       move.l d0,106(a0)
}
    adc8:	       nop
    adca:	       move.l (sp)+,d2
    adcc:	       addq.l #8,sp
    adce:	       rts

0000add0 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    add0:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    add2:	          movea.l 8(sp),a0
    add6:	          move.l 8(a0),d0
    adda:	          move.l 12(sp),-(sp)
    adde:	          move.l d0,-(sp)
    ade0:	          jsr 8d0 <put2bytes>
    ade6:	          addq.l #8,sp
	if (p -> numFrames) {
    ade8:	          movea.l 8(sp),a0
    adec:	          move.l 8(a0),d0
    adf0:	,-------- beq.w ae94 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    adf4:	|         movea.l 8(sp),a0
    adf8:	|         movea.l (a0),a0
    adfa:	|         move.l (a0),d0
    adfc:	|         move.l 12(sp),-(sp)
    ae00:	|         move.l d0,-(sp)
    ae02:	|         jsr 958 <put4bytes>
    ae08:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    ae0a:	|         clr.l (sp)
    ae0c:	|     ,-- bra.s ae86 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    ae0e:	|  ,--|-> movea.l 8(sp),a0
    ae12:	|  |  |   movea.l 4(a0),a0
    ae16:	|  |  |   move.l (sp),d1
    ae18:	|  |  |   move.l d1,d0
    ae1a:	|  |  |   add.l d0,d0
    ae1c:	|  |  |   add.l d1,d0
    ae1e:	|  |  |   add.l d0,d0
    ae20:	|  |  |   add.l d0,d0
    ae22:	|  |  |   adda.l d0,a0
    ae24:	|  |  |   move.l (a0),d0
    ae26:	|  |  |   move.l 12(sp),-(sp)
    ae2a:	|  |  |   move.l d0,-(sp)
    ae2c:	|  |  |   jsr 958 <put4bytes>
    ae32:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    ae34:	|  |  |   movea.l 8(sp),a0
    ae38:	|  |  |   movea.l 4(a0),a0
    ae3c:	|  |  |   move.l (sp),d1
    ae3e:	|  |  |   move.l d1,d0
    ae40:	|  |  |   add.l d0,d0
    ae42:	|  |  |   add.l d1,d0
    ae44:	|  |  |   add.l d0,d0
    ae46:	|  |  |   add.l d0,d0
    ae48:	|  |  |   adda.l d0,a0
    ae4a:	|  |  |   move.l 4(a0),d0
    ae4e:	|  |  |   move.l 12(sp),-(sp)
    ae52:	|  |  |   move.l d0,-(sp)
    ae54:	|  |  |   jsr 958 <put4bytes>
    ae5a:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    ae5c:	|  |  |   movea.l 8(sp),a0
    ae60:	|  |  |   movea.l 4(a0),a0
    ae64:	|  |  |   move.l (sp),d1
    ae66:	|  |  |   move.l d1,d0
    ae68:	|  |  |   add.l d0,d0
    ae6a:	|  |  |   add.l d1,d0
    ae6c:	|  |  |   add.l d0,d0
    ae6e:	|  |  |   add.l d0,d0
    ae70:	|  |  |   adda.l d0,a0
    ae72:	|  |  |   move.l 8(a0),d0
    ae76:	|  |  |   move.l 12(sp),-(sp)
    ae7a:	|  |  |   move.l d0,-(sp)
    ae7c:	|  |  |   jsr 958 <put4bytes>
    ae82:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    ae84:	|  |  |   addq.l #1,(sp)
    ae86:	|  |  '-> movea.l 8(sp),a0
    ae8a:	|  |      move.l 8(a0),d0
    ae8e:	|  |      cmp.l (sp),d0
    ae90:	|  '----- bgt.w ae0e <saveAnim+0x3e>
		}
	}
	return TRUE;
    ae94:	'-------> moveq #1,d0
}
    ae96:	          addq.l #4,sp
    ae98:	          rts

0000ae9a <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    ae9a:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    ae9c:	             movea.l 8(sp),a0
    aea0:	             move.l 4(a0),d0
    aea4:	             move.l 12(sp),-(sp)
    aea8:	             move.l d0,-(sp)
    aeaa:	             jsr 8d0 <put2bytes>
    aeb0:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    aeb2:	             clr.l (sp)
    aeb4:	   ,-------- bra.s aee0 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    aeb6:	,--|-------> movea.l 8(sp),a0
    aeba:	|  |         move.l (a0),d1
    aebc:	|  |         move.l (sp),d0
    aebe:	|  |         add.l d0,d0
    aec0:	|  |         add.l d0,d0
    aec2:	|  |         movea.l d1,a0
    aec4:	|  |         adda.l d0,a0
    aec6:	|  |         move.l (a0),d0
    aec8:	|  |         move.l 12(sp),-(sp)
    aecc:	|  |         move.l d0,-(sp)
    aece:	|  |         jsr add0 <saveAnim>
    aed4:	|  |         addq.l #8,sp
    aed6:	|  |         tst.w d0
    aed8:	|  |     ,-- bne.s aede <saveCostume+0x44>
    aeda:	|  |     |   clr.w d0
    aedc:	|  |  ,--|-- bra.s aef4 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    aede:	|  |  |  '-> addq.l #1,(sp)
    aee0:	|  '--|----> movea.l 8(sp),a0
    aee4:	|     |      move.l 4(a0),d1
    aee8:	|     |      move.l d1,d0
    aeea:	|     |      add.l d0,d0
    aeec:	|     |      add.l d1,d0
    aeee:	|     |      cmp.l (sp),d0
    aef0:	'-----|----- bgt.s aeb6 <saveCostume+0x1c>
	}

	return TRUE;
    aef2:	      |      moveq #1,d0
}
    aef4:	      '----> addq.l #4,sp
    aef6:	             rts

0000aef8 <savePeople>:

BOOL savePeople (BPTR fp) {
    aef8:	             lea -144(sp),sp
    aefc:	             move.l a6,-(sp)
    aefe:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    af00:	             move.l 1c838 <allPeople>,148(sp)
	int countPeople = 0, a;
    af08:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    af0c:	             move.w 1c15e <scaleHorizon>,d0
    af12:	             movea.w d0,a0
    af14:	             move.l 156(sp),-(sp)
    af18:	             move.l a0,-(sp)
    af1a:	             jsr a9c <putSigned>
    af20:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    af22:	             move.w 1c160 <scaleDivide>,d0
    af28:	             movea.w d0,a0
    af2a:	             move.l 156(sp),-(sp)
    af2e:	             move.l a0,-(sp)
    af30:	             jsr a9c <putSigned>
    af36:	             addq.l #8,sp

	while (me) {
    af38:	         ,-- bra.s af48 <savePeople+0x50>
		countPeople ++;
    af3a:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    af3e:	      |  |   movea.l 148(sp),a0
    af42:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    af48:	      |  '-> tst.l 148(sp)
    af4c:	      '----- bne.s af3a <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    af4e:	             move.l 156(sp),-(sp)
    af52:	             move.l 148(sp),-(sp)
    af56:	             jsr 8d0 <put2bytes>
    af5c:	             addq.l #8,sp

	me = allPeople;
    af5e:	             move.l 1c838 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    af66:	             clr.l 140(sp)
    af6a:	   ,-------- bra.w b3c2 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    af6e:	,--|-------> movea.l 148(sp),a0
    af72:	|  |         move.l (a0),d0
    af74:	|  |         move.l 156(sp),-(sp)
    af78:	|  |         move.l d0,-(sp)
    af7a:	|  |         jsr a46 <putFloat>
    af80:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    af82:	|  |         movea.l 148(sp),a0
    af86:	|  |         move.l 4(a0),d0
    af8a:	|  |         move.l 156(sp),-(sp)
    af8e:	|  |         move.l d0,-(sp)
    af90:	|  |         jsr a46 <putFloat>
    af96:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    af98:	|  |         movea.l 148(sp),a0
    af9c:	|  |         move.l 80(a0),d0
    afa0:	|  |         move.l 156(sp),-(sp)
    afa4:	|  |         move.l d0,-(sp)
    afa6:	|  |         jsr ae9a <saveCostume>
    afac:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    afae:	|  |         movea.l 148(sp),a0
    afb2:	|  |         move.l 72(a0),d0
    afb6:	|  |         move.l 156(sp),-(sp)
    afba:	|  |         move.l d0,-(sp)
    afbc:	|  |         jsr add0 <saveAnim>
    afc2:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    afc4:	|  |         move.l 156(sp),136(sp)
    afca:	|  |         movea.l 148(sp),a0
    afce:	|  |         move.l 72(a0),d1
    afd2:	|  |         movea.l 148(sp),a0
    afd6:	|  |         move.l 76(a0),d0
    afda:	|  |         cmp.l d1,d0
    afdc:	|  |         seq d0
    afde:	|  |         neg.b d0
    afe0:	|  |         move.b d0,d0
    afe2:	|  |         andi.l #255,d0
    afe8:	|  |         move.l d0,132(sp)
    afec:	|  |         move.l 1c7e0 <DOSBase>,d0
    aff2:	|  |         movea.l d0,a6
    aff4:	|  |         move.l 136(sp),d1
    aff8:	|  |         move.l 132(sp),d2
    affc:	|  |         jsr -312(a6)
    b000:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b004:	|  |         movea.l 148(sp),a0
    b008:	|  |         move.l 32(a0),d0
    b00c:	|  |         move.l 156(sp),-(sp)
    b010:	|  |         move.l d0,-(sp)
    b012:	|  |         jsr a46 <putFloat>
    b018:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b01a:	|  |         movea.l 148(sp),a0
    b01e:	|  |         move.l 118(a0),d0
    b022:	|  |         move.l 156(sp),-(sp)
    b026:	|  |         move.l d0,-(sp)
    b028:	|  |         jsr 8d0 <put2bytes>
    b02e:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b030:	|  |         movea.l 148(sp),a0
    b034:	|  |         move.l 20(a0),d0
    b038:	|  |         move.l 156(sp),-(sp)
    b03c:	|  |         move.l d0,-(sp)
    b03e:	|  |         jsr 8d0 <put2bytes>
    b044:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b046:	|  |         movea.l 148(sp),a0
    b04a:	|  |         move.l 40(a0),d0
    b04e:	|  |         move.l 156(sp),-(sp)
    b052:	|  |         move.l d0,-(sp)
    b054:	|  |         jsr 8d0 <put2bytes>
    b05a:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b05c:	|  |         movea.l 148(sp),a0
    b060:	|  |         move.l 44(a0),d0
    b064:	|  |         move.l 156(sp),-(sp)
    b068:	|  |         move.l d0,-(sp)
    b06a:	|  |         jsr 8d0 <put2bytes>
    b070:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b072:	|  |         movea.l 148(sp),a0
    b076:	|  |         move.l 48(a0),d0
    b07a:	|  |         move.l 156(sp),-(sp)
    b07e:	|  |         move.l d0,-(sp)
    b080:	|  |         jsr 8d0 <put2bytes>
    b086:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b088:	|  |         movea.l 148(sp),a0
    b08c:	|  |         move.l 52(a0),d0
    b090:	|  |         move.l 156(sp),-(sp)
    b094:	|  |         move.l d0,-(sp)
    b096:	|  |         jsr 8d0 <put2bytes>
    b09c:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b09e:	|  |         movea.l 148(sp),a0
    b0a2:	|  |         move.l 84(a0),d0
    b0a6:	|  |         move.l 156(sp),-(sp)
    b0aa:	|  |         move.l d0,-(sp)
    b0ac:	|  |         jsr 8d0 <put2bytes>
    b0b2:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b0b4:	|  |         movea.l 148(sp),a0
    b0b8:	|  |         move.l 88(a0),d0
    b0bc:	|  |         move.l 156(sp),-(sp)
    b0c0:	|  |         move.l d0,-(sp)
    b0c2:	|  |         jsr 8d0 <put2bytes>
    b0c8:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b0ca:	|  |         movea.l 148(sp),a0
    b0ce:	|  |         move.l 28(a0),d0
    b0d2:	|  |         move.l 156(sp),-(sp)
    b0d6:	|  |         move.l d0,-(sp)
    b0d8:	|  |         jsr 8d0 <put2bytes>
    b0de:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b0e0:	|  |         movea.l 148(sp),a0
    b0e4:	|  |         move.l 122(a0),d0
    b0e8:	|  |         move.l 156(sp),-(sp)
    b0ec:	|  |         move.l d0,-(sp)
    b0ee:	|  |         jsr 8d0 <put2bytes>
    b0f4:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b0f6:	|  |         movea.l 148(sp),a0
    b0fa:	|  |         move.l 24(a0),d0
    b0fe:	|  |         move.l d0,d0
    b100:	|  |         movea.w d0,a0
    b102:	|  |         move.l 156(sp),-(sp)
    b106:	|  |         move.l a0,-(sp)
    b108:	|  |         jsr a9c <putSigned>
    b10e:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b110:	|  |         move.l 156(sp),124(sp)
    b116:	|  |         movea.l 148(sp),a0
    b11a:	|  |         move.w 104(a0),d0
    b11e:	|  |         movea.w d0,a0
    b120:	|  |         move.l a0,120(sp)
    b124:	|  |         move.l 1c7e0 <DOSBase>,d0
    b12a:	|  |         movea.l d0,a6
    b12c:	|  |         move.l 124(sp),d1
    b130:	|  |         move.l 120(sp),d2
    b134:	|  |         jsr -312(a6)
    b138:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b13c:	|  |         move.l 156(sp),112(sp)
    b142:	|  |         movea.l 148(sp),a0
    b146:	|  |         move.w 64(a0),d0
    b14a:	|  |         movea.w d0,a0
    b14c:	|  |         move.l a0,108(sp)
    b150:	|  |         move.l 1c7e0 <DOSBase>,d0
    b156:	|  |         movea.l d0,a6
    b158:	|  |         move.l 112(sp),d1
    b15c:	|  |         move.l 108(sp),d2
    b160:	|  |         jsr -312(a6)
    b164:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b168:	|  |         move.l 156(sp),100(sp)
    b16e:	|  |         movea.l 148(sp),a0
    b172:	|  |         move.w 66(a0),d0
    b176:	|  |         movea.w d0,a0
    b178:	|  |         move.l a0,96(sp)
    b17c:	|  |         move.l 1c7e0 <DOSBase>,d0
    b182:	|  |         movea.l d0,a6
    b184:	|  |         move.l 100(sp),d1
    b188:	|  |         move.l 96(sp),d2
    b18c:	|  |         jsr -312(a6)
    b190:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b194:	|  |         movea.l 148(sp),a0
    b198:	|  |         move.l 68(a0),d0
    b19c:	|  |  ,----- beq.s b1da <savePeople+0x2e2>
			FPutC (fp, 1);
    b19e:	|  |  |      move.l 156(sp),76(sp)
    b1a4:	|  |  |      moveq #1,d0
    b1a6:	|  |  |      move.l d0,72(sp)
    b1aa:	|  |  |      move.l 1c7e0 <DOSBase>,d0
    b1b0:	|  |  |      movea.l d0,a6
    b1b2:	|  |  |      move.l 76(sp),d1
    b1b6:	|  |  |      move.l 72(sp),d2
    b1ba:	|  |  |      jsr -312(a6)
    b1be:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b1c2:	|  |  |      movea.l 148(sp),a0
    b1c6:	|  |  |      move.l 68(a0),d0
    b1ca:	|  |  |      move.l 156(sp),-(sp)
    b1ce:	|  |  |      move.l d0,-(sp)
    b1d0:	|  |  |      jsr c3f4 <saveFunction>
    b1d6:	|  |  |      addq.l #8,sp
    b1d8:	|  |  |  ,-- bra.s b1fe <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b1da:	|  |  '--|-> move.l 156(sp),88(sp)
    b1e0:	|  |     |   moveq #1,d0
    b1e2:	|  |     |   move.l d0,84(sp)
    b1e6:	|  |     |   move.l 1c7e0 <DOSBase>,d0
    b1ec:	|  |     |   movea.l d0,a6
    b1ee:	|  |     |   move.l 88(sp),d1
    b1f2:	|  |     |   move.l 84(sp),d2
    b1f6:	|  |     |   jsr -312(a6)
    b1fa:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b1fe:	|  |     '-> movea.l 148(sp),a0
    b202:	|  |         move.l 106(a0),d0
    b206:	|  |         move.l 156(sp),-(sp)
    b20a:	|  |         move.l d0,-(sp)
    b20c:	|  |         jsr 8d0 <put2bytes>
    b212:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b214:	|  |         movea.l 148(sp),a0
    b218:	|  |         move.l 92(a0),d0
    b21c:	|  |         move.l 156(sp),-(sp)
    b220:	|  |         move.l d0,-(sp)
    b222:	|  |         jsr 8d0 <put2bytes>
    b228:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b22a:	|  |         movea.l 148(sp),a0
    b22e:	|  |         move.l 100(a0),d0
    b232:	|  |         move.l 156(sp),-(sp)
    b236:	|  |         move.l d0,-(sp)
    b238:	|  |         jsr 8d0 <put2bytes>
    b23e:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b240:	|  |         movea.l 148(sp),a0
    b244:	|  |         move.l 96(a0),d0
    b248:	|  |         move.l 156(sp),-(sp)
    b24c:	|  |         move.l d0,-(sp)
    b24e:	|  |         jsr 8d0 <put2bytes>
    b254:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b256:	|  |         movea.l 148(sp),a0
    b25a:	|  |         move.l 110(a0),d0
    b25e:	|  |         move.l d0,d0
    b260:	|  |         movea.w d0,a0
    b262:	|  |         move.l 156(sp),-(sp)
    b266:	|  |         move.l a0,-(sp)
    b268:	|  |         jsr a9c <putSigned>
    b26e:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b270:	|  |         movea.l 148(sp),a0
    b274:	|  |         move.l 56(a0),d0
    b278:	|  |         move.l d0,d0
    b27a:	|  |         movea.w d0,a0
    b27c:	|  |         move.l 156(sp),-(sp)
    b280:	|  |         move.l a0,-(sp)
    b282:	|  |         jsr a9c <putSigned>
    b288:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b28a:	|  |         movea.l 148(sp),a0
    b28e:	|  |         move.l 60(a0),d0
    b292:	|  |         move.l d0,d0
    b294:	|  |         movea.w d0,a0
    b296:	|  |         move.l 156(sp),-(sp)
    b29a:	|  |         move.l a0,-(sp)
    b29c:	|  |         jsr a9c <putSigned>
    b2a2:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b2a4:	|  |         move.l 156(sp),64(sp)
    b2aa:	|  |         movea.l 148(sp),a0
    b2ae:	|  |         move.b 126(a0),d0
    b2b2:	|  |         move.b d0,d0
    b2b4:	|  |         andi.l #255,d0
    b2ba:	|  |         move.l d0,60(sp)
    b2be:	|  |         move.l 1c7e0 <DOSBase>,d0
    b2c4:	|  |         movea.l d0,a6
    b2c6:	|  |         move.l 64(sp),d1
    b2ca:	|  |         move.l 60(sp),d2
    b2ce:	|  |         jsr -312(a6)
    b2d2:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b2d6:	|  |         move.l 156(sp),52(sp)
    b2dc:	|  |         movea.l 148(sp),a0
    b2e0:	|  |         move.b 127(a0),d0
    b2e4:	|  |         move.b d0,d0
    b2e6:	|  |         andi.l #255,d0
    b2ec:	|  |         move.l d0,48(sp)
    b2f0:	|  |         move.l 1c7e0 <DOSBase>,d0
    b2f6:	|  |         movea.l d0,a6
    b2f8:	|  |         move.l 52(sp),d1
    b2fc:	|  |         move.l 48(sp),d2
    b300:	|  |         jsr -312(a6)
    b304:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b308:	|  |         move.l 156(sp),40(sp)
    b30e:	|  |         movea.l 148(sp),a0
    b312:	|  |         move.b 128(a0),d0
    b316:	|  |         move.b d0,d0
    b318:	|  |         andi.l #255,d0
    b31e:	|  |         move.l d0,36(sp)
    b322:	|  |         move.l 1c7e0 <DOSBase>,d0
    b328:	|  |         movea.l d0,a6
    b32a:	|  |         move.l 40(sp),d1
    b32e:	|  |         move.l 36(sp),d2
    b332:	|  |         jsr -312(a6)
    b336:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b33a:	|  |         move.l 156(sp),28(sp)
    b340:	|  |         movea.l 148(sp),a0
    b344:	|  |         move.b 129(a0),d0
    b348:	|  |         move.b d0,d0
    b34a:	|  |         andi.l #255,d0
    b350:	|  |         move.l d0,24(sp)
    b354:	|  |         move.l 1c7e0 <DOSBase>,d0
    b35a:	|  |         movea.l d0,a6
    b35c:	|  |         move.l 28(sp),d1
    b360:	|  |         move.l 24(sp),d2
    b364:	|  |         jsr -312(a6)
    b368:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b36c:	|  |         move.l 156(sp),16(sp)
    b372:	|  |         movea.l 148(sp),a0
    b376:	|  |         move.b 130(a0),d0
    b37a:	|  |         move.b d0,d0
    b37c:	|  |         andi.l #255,d0
    b382:	|  |         move.l d0,12(sp)
    b386:	|  |         move.l 1c7e0 <DOSBase>,d0
    b38c:	|  |         movea.l d0,a6
    b38e:	|  |         move.l 16(sp),d1
    b392:	|  |         move.l 12(sp),d2
    b396:	|  |         jsr -312(a6)
    b39a:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b39e:	|  |         movea.l 148(sp),a0
    b3a2:	|  |         move.l 114(a0),d0
    b3a6:	|  |         move.l 156(sp),-(sp)
    b3aa:	|  |         move.l d0,-(sp)
    b3ac:	|  |         jsr d7be <saveObjectRef>
    b3b2:	|  |         addq.l #8,sp

		me = me -> next;
    b3b4:	|  |         movea.l 148(sp),a0
    b3b8:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b3be:	|  |         addq.l #1,140(sp)
    b3c2:	|  '-------> movea.l 140(sp),a0
    b3c6:	|            cmpa.l 144(sp),a0
    b3ca:	'----------- blt.w af6e <savePeople+0x76>
	}
	return TRUE;
    b3ce:	             moveq #1,d0
}
    b3d0:	             move.l (sp)+,d2
    b3d2:	             movea.l (sp)+,a6
    b3d4:	             lea 144(sp),sp
    b3d8:	             rts

0000b3da <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b3da:	movea.l 4(sp),a0
    b3de:	move.l 8(sp),(a0)
}
    b3e2:	nop
    b3e4:	rts

0000b3e6 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b3e6:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b3e8:	       move.l 12(sp),-(sp)
    b3ec:	       jsr a474 <findPerson>
    b3f2:	       addq.l #4,sp
    b3f4:	       move.l d0,(sp)
	if (! moveMe) return;
    b3f6:	,----- beq.s b40a <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b3f8:	|      move.l 8(sp),-(sp)
    b3fc:	|      move.l 4(sp),-(sp)
    b400:	|      jsr b410 <setMyDrawMode>
    b406:	|      addq.l #8,sp
    b408:	|  ,-- bra.s b40c <setDrawMode+0x26>
	if (! moveMe) return;
    b40a:	'--|-> nop
}
    b40c:	   '-> addq.l #4,sp
    b40e:	       rts

0000b410 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b410:	       moveq #19,d0
    b412:	       cmp.l 8(sp),d0
    b416:	,----- bcs.w b8ee <setMyDrawMode+0x4de>
    b41a:	|      move.l 8(sp),d0
    b41e:	|      add.l d0,d0
    b420:	|      movea.l d0,a0
    b422:	|      adda.l #46126,a0
    b428:	|      move.w (a0),d0
    b42a:	|      jmp (b42e <setMyDrawMode+0x1e>,pc,d0.w)
    b42e:	|      .short 0x04c0
    b430:	|      ori.l #6684712,-(a4)
    b436:	|      btst d0,-(a0)
    b438:	|      bchg d0,(a6)+
    b43a:	|      bclr d0,(a4)+
    b43c:	|      bset d0,(a2)+
    b43e:	|      andi.b #84,(a6)
    b442:	|      andi.l #55575312,(a2)
    b448:	|      .short 0x02d0
    b44a:	|      bclr d1,(a0)
    b44c:	|      .short 0x044a
    b44e:	|      .short 0x040c
    b450:	|      movep.l d1,1158(a6)
    b454:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b456:	|      movea.l 4(sp),a0
    b45a:	|      clr.b 128(a0)
    b45e:	|      movea.l 4(sp),a0
    b462:	|      move.b 128(a0),d0
    b466:	|      movea.l 4(sp),a0
    b46a:	|      move.b d0,127(a0)
    b46e:	|      movea.l 4(sp),a0
    b472:	|      move.b 127(a0),d0
    b476:	|      movea.l 4(sp),a0
    b47a:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b47e:	|      movea.l 4(sp),a0
    b482:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b486:	|      movea.l 4(sp),a0
    b48a:	|      move.b #64,130(a0)
			break;
    b490:	|  ,-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b494:	|  |   movea.l 4(sp),a0
    b498:	|  |   clr.b 128(a0)
    b49c:	|  |   movea.l 4(sp),a0
    b4a0:	|  |   move.b 128(a0),d0
    b4a4:	|  |   movea.l 4(sp),a0
    b4a8:	|  |   move.b d0,127(a0)
    b4ac:	|  |   movea.l 4(sp),a0
    b4b0:	|  |   move.b 127(a0),d0
    b4b4:	|  |   movea.l 4(sp),a0
    b4b8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b4bc:	|  |   movea.l 4(sp),a0
    b4c0:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b4c4:	|  |   movea.l 4(sp),a0
    b4c8:	|  |   move.b #-128,130(a0)
			break;
    b4ce:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b4d2:	|  |   movea.l 4(sp),a0
    b4d6:	|  |   clr.b 128(a0)
    b4da:	|  |   movea.l 4(sp),a0
    b4de:	|  |   move.b 128(a0),d0
    b4e2:	|  |   movea.l 4(sp),a0
    b4e6:	|  |   move.b d0,127(a0)
    b4ea:	|  |   movea.l 4(sp),a0
    b4ee:	|  |   move.b 127(a0),d0
    b4f2:	|  |   movea.l 4(sp),a0
    b4f6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b4fa:	|  |   movea.l 4(sp),a0
    b4fe:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b502:	|  |   movea.l 4(sp),a0
    b506:	|  |   move.b #-64,130(a0)
			break;
    b50c:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b510:	|  |   movea.l 4(sp),a0
    b514:	|  |   clr.b 128(a0)
    b518:	|  |   movea.l 4(sp),a0
    b51c:	|  |   move.b 128(a0),d0
    b520:	|  |   movea.l 4(sp),a0
    b524:	|  |   move.b d0,127(a0)
    b528:	|  |   movea.l 4(sp),a0
    b52c:	|  |   move.b 127(a0),d0
    b530:	|  |   movea.l 4(sp),a0
    b534:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b538:	|  |   movea.l 4(sp),a0
    b53c:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b540:	|  |   movea.l 4(sp),a0
    b544:	|  |   move.b #-2,130(a0)
			break;
    b54a:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b54e:	|  |   movea.l 4(sp),a0
    b552:	|  |   clr.b 128(a0)
    b556:	|  |   movea.l 4(sp),a0
    b55a:	|  |   move.b 128(a0),d0
    b55e:	|  |   movea.l 4(sp),a0
    b562:	|  |   move.b d0,127(a0)
    b566:	|  |   movea.l 4(sp),a0
    b56a:	|  |   move.b 127(a0),d0
    b56e:	|  |   movea.l 4(sp),a0
    b572:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b576:	|  |   movea.l 4(sp),a0
    b57a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b580:	|  |   movea.l 4(sp),a0
    b584:	|  |   clr.b 130(a0)
			break;
    b588:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b58c:	|  |   movea.l 4(sp),a0
    b590:	|  |   clr.b 128(a0)
    b594:	|  |   movea.l 4(sp),a0
    b598:	|  |   move.b 128(a0),d0
    b59c:	|  |   movea.l 4(sp),a0
    b5a0:	|  |   move.b d0,127(a0)
    b5a4:	|  |   movea.l 4(sp),a0
    b5a8:	|  |   move.b 127(a0),d0
    b5ac:	|  |   movea.l 4(sp),a0
    b5b0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b5b4:	|  |   movea.l 4(sp),a0
    b5b8:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b5be:	|  |   movea.l 4(sp),a0
    b5c2:	|  |   clr.b 130(a0)
			break;
    b5c6:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b5ca:	|  |   movea.l 4(sp),a0
    b5ce:	|  |   clr.b 128(a0)
    b5d2:	|  |   movea.l 4(sp),a0
    b5d6:	|  |   move.b 128(a0),d0
    b5da:	|  |   movea.l 4(sp),a0
    b5de:	|  |   move.b d0,127(a0)
    b5e2:	|  |   movea.l 4(sp),a0
    b5e6:	|  |   move.b 127(a0),d0
    b5ea:	|  |   movea.l 4(sp),a0
    b5ee:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b5f2:	|  |   movea.l 4(sp),a0
    b5f6:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b5fc:	|  |   movea.l 4(sp),a0
    b600:	|  |   clr.b 130(a0)
			break;
    b604:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b608:	|  |   movea.l 4(sp),a0
    b60c:	|  |   clr.b 128(a0)
    b610:	|  |   movea.l 4(sp),a0
    b614:	|  |   move.b 128(a0),d0
    b618:	|  |   movea.l 4(sp),a0
    b61c:	|  |   move.b d0,127(a0)
    b620:	|  |   movea.l 4(sp),a0
    b624:	|  |   move.b 127(a0),d0
    b628:	|  |   movea.l 4(sp),a0
    b62c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b630:	|  |   movea.l 4(sp),a0
    b634:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b638:	|  |   movea.l 4(sp),a0
    b63c:	|  |   clr.b 130(a0)
			break;
    b640:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b644:	|  |   movea.l 4(sp),a0
    b648:	|  |   clr.b 128(a0)
    b64c:	|  |   movea.l 4(sp),a0
    b650:	|  |   move.b 128(a0),d0
    b654:	|  |   movea.l 4(sp),a0
    b658:	|  |   move.b d0,127(a0)
    b65c:	|  |   movea.l 4(sp),a0
    b660:	|  |   move.b 127(a0),d0
    b664:	|  |   movea.l 4(sp),a0
    b668:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b66c:	|  |   movea.l 4(sp),a0
    b670:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b674:	|  |   movea.l 4(sp),a0
    b678:	|  |   move.b #64,130(a0)
			break;
    b67e:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b682:	|  |   movea.l 4(sp),a0
    b686:	|  |   clr.b 128(a0)
    b68a:	|  |   movea.l 4(sp),a0
    b68e:	|  |   move.b 128(a0),d0
    b692:	|  |   movea.l 4(sp),a0
    b696:	|  |   move.b d0,127(a0)
    b69a:	|  |   movea.l 4(sp),a0
    b69e:	|  |   move.b 127(a0),d0
    b6a2:	|  |   movea.l 4(sp),a0
    b6a6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b6aa:	|  |   movea.l 4(sp),a0
    b6ae:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b6b2:	|  |   movea.l 4(sp),a0
    b6b6:	|  |   move.b #-128,130(a0)
			break;
    b6bc:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b6c0:	|  |   movea.l 4(sp),a0
    b6c4:	|  |   clr.b 128(a0)
    b6c8:	|  |   movea.l 4(sp),a0
    b6cc:	|  |   move.b 128(a0),d0
    b6d0:	|  |   movea.l 4(sp),a0
    b6d4:	|  |   move.b d0,127(a0)
    b6d8:	|  |   movea.l 4(sp),a0
    b6dc:	|  |   move.b 127(a0),d0
    b6e0:	|  |   movea.l 4(sp),a0
    b6e4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b6e8:	|  |   movea.l 4(sp),a0
    b6ec:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b6f0:	|  |   movea.l 4(sp),a0
    b6f4:	|  |   move.b #-64,130(a0)
			break;
    b6fa:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b6fe:	|  |   movea.l 4(sp),a0
    b702:	|  |   move.b #-128,128(a0)
    b708:	|  |   movea.l 4(sp),a0
    b70c:	|  |   move.b 128(a0),d0
    b710:	|  |   movea.l 4(sp),a0
    b714:	|  |   move.b d0,127(a0)
    b718:	|  |   movea.l 4(sp),a0
    b71c:	|  |   move.b 127(a0),d0
    b720:	|  |   movea.l 4(sp),a0
    b724:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b728:	|  |   movea.l 4(sp),a0
    b72c:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b732:	|  |   movea.l 4(sp),a0
    b736:	|  |   clr.b 130(a0)
			break;
    b73a:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b73e:	|  |   movea.l 4(sp),a0
    b742:	|  |   move.b #-128,128(a0)
    b748:	|  |   movea.l 4(sp),a0
    b74c:	|  |   move.b 128(a0),d0
    b750:	|  |   movea.l 4(sp),a0
    b754:	|  |   move.b d0,127(a0)
    b758:	|  |   movea.l 4(sp),a0
    b75c:	|  |   move.b 127(a0),d0
    b760:	|  |   movea.l 4(sp),a0
    b764:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b768:	|  |   movea.l 4(sp),a0
    b76c:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b772:	|  |   movea.l 4(sp),a0
    b776:	|  |   clr.b 130(a0)
			break;
    b77a:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b77e:	|  |   movea.l 4(sp),a0
    b782:	|  |   move.b #-128,128(a0)
    b788:	|  |   movea.l 4(sp),a0
    b78c:	|  |   move.b 128(a0),d0
    b790:	|  |   movea.l 4(sp),a0
    b794:	|  |   move.b d0,127(a0)
    b798:	|  |   movea.l 4(sp),a0
    b79c:	|  |   move.b 127(a0),d0
    b7a0:	|  |   movea.l 4(sp),a0
    b7a4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b7a8:	|  |   movea.l 4(sp),a0
    b7ac:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b7b2:	|  |   movea.l 4(sp),a0
    b7b6:	|  |   clr.b 130(a0)
			break;
    b7ba:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b7be:	|  |   movea.l 4(sp),a0
    b7c2:	|  |   move.b #-128,128(a0)
    b7c8:	|  |   movea.l 4(sp),a0
    b7cc:	|  |   move.b 128(a0),d0
    b7d0:	|  |   movea.l 4(sp),a0
    b7d4:	|  |   move.b d0,127(a0)
    b7d8:	|  |   movea.l 4(sp),a0
    b7dc:	|  |   move.b 127(a0),d0
    b7e0:	|  |   movea.l 4(sp),a0
    b7e4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b7e8:	|  |   movea.l 4(sp),a0
    b7ec:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b7f0:	|  |   movea.l 4(sp),a0
    b7f4:	|  |   clr.b 130(a0)
			break;
    b7f8:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b7fc:	|  |   movea.l 4(sp),a0
    b800:	|  |   st 128(a0)
    b804:	|  |   movea.l 4(sp),a0
    b808:	|  |   move.b 128(a0),d0
    b80c:	|  |   movea.l 4(sp),a0
    b810:	|  |   move.b d0,127(a0)
    b814:	|  |   movea.l 4(sp),a0
    b818:	|  |   move.b 127(a0),d0
    b81c:	|  |   movea.l 4(sp),a0
    b820:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b824:	|  |   movea.l 4(sp),a0
    b828:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b82e:	|  |   movea.l 4(sp),a0
    b832:	|  |   clr.b 130(a0)
			break;
    b836:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b83a:	|  |   movea.l 4(sp),a0
    b83e:	|  |   st 128(a0)
    b842:	|  |   movea.l 4(sp),a0
    b846:	|  |   move.b 128(a0),d0
    b84a:	|  |   movea.l 4(sp),a0
    b84e:	|  |   move.b d0,127(a0)
    b852:	|  |   movea.l 4(sp),a0
    b856:	|  |   move.b 127(a0),d0
    b85a:	|  |   movea.l 4(sp),a0
    b85e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b862:	|  |   movea.l 4(sp),a0
    b866:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b86c:	|  |   movea.l 4(sp),a0
    b870:	|  |   clr.b 130(a0)
			break;
    b874:	|  +-- bra.w b928 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b878:	|  |   movea.l 4(sp),a0
    b87c:	|  |   st 128(a0)
    b880:	|  |   movea.l 4(sp),a0
    b884:	|  |   move.b 128(a0),d0
    b888:	|  |   movea.l 4(sp),a0
    b88c:	|  |   move.b d0,127(a0)
    b890:	|  |   movea.l 4(sp),a0
    b894:	|  |   move.b 127(a0),d0
    b898:	|  |   movea.l 4(sp),a0
    b89c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b8a0:	|  |   movea.l 4(sp),a0
    b8a4:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b8aa:	|  |   movea.l 4(sp),a0
    b8ae:	|  |   clr.b 130(a0)
			break;
    b8b2:	|  +-- bra.s b928 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b8b4:	|  |   movea.l 4(sp),a0
    b8b8:	|  |   st 128(a0)
    b8bc:	|  |   movea.l 4(sp),a0
    b8c0:	|  |   move.b 128(a0),d0
    b8c4:	|  |   movea.l 4(sp),a0
    b8c8:	|  |   move.b d0,127(a0)
    b8cc:	|  |   movea.l 4(sp),a0
    b8d0:	|  |   move.b 127(a0),d0
    b8d4:	|  |   movea.l 4(sp),a0
    b8d8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b8dc:	|  |   movea.l 4(sp),a0
    b8e0:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b8e4:	|  |   movea.l 4(sp),a0
    b8e8:	|  |   clr.b 130(a0)
			break;
    b8ec:	|  +-- bra.s b928 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8ee:	'--|-> movea.l 4(sp),a0
    b8f2:	   |   clr.b 128(a0)
    b8f6:	   |   movea.l 4(sp),a0
    b8fa:	   |   move.b 128(a0),d0
    b8fe:	   |   movea.l 4(sp),a0
    b902:	   |   move.b d0,127(a0)
    b906:	   |   movea.l 4(sp),a0
    b90a:	   |   move.b 127(a0),d0
    b90e:	   |   movea.l 4(sp),a0
    b912:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b916:	   |   movea.l 4(sp),a0
    b91a:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    b91e:	   |   movea.l 4(sp),a0
    b922:	   |   clr.b 130(a0)
			break;
    b926:	   |   nop
	}
}
    b928:	   '-> nop
    b92a:	       rts

0000b92c <shufflePeople>:

void shufflePeople () {
    b92c:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    b930:	             move.l #116792,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    b938:	             move.l 1c838 <allPeople>,d0
    b93e:	,----------- beq.w ba14 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    b942:	|     ,----- bra.w ba04 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    b946:	|  ,--|----> movea.l 16(sp),a0
    b94a:	|  |  |      movea.l (a0),a0
    b94c:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    b952:	|  |  |      movea.l 16(sp),a0
    b956:	|  |  |      movea.l (a0),a0
    b958:	|  |  |      move.l 118(a0),d0
    b95c:	|  |  |      moveq #1,d1
    b95e:	|  |  |      and.l d1,d0
    b960:	|  |  |  ,-- beq.s b978 <shufflePeople+0x4c>
    b962:	|  |  |  |   move.l #1148846080,-(sp)
    b968:	|  |  |  |   move.l 16(sp),-(sp)
    b96c:	|  |  |  |   jsr 172c2 <__addsf3>
    b972:	|  |  |  |   addq.l #8,sp
    b974:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    b978:	|  |  |  '-> movea.l 16(sp),a0
    b97c:	|  |  |      movea.l (a0),a0
    b97e:	|  |  |      movea.l 36(a0),a0
    b982:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    b988:	|  |  |      movea.l 16(sp),a0
    b98c:	|  |  |      movea.l (a0),a0
    b98e:	|  |  |      movea.l 36(a0),a0
    b992:	|  |  |      move.l 118(a0),d0
    b996:	|  |  |      moveq #1,d1
    b998:	|  |  |      and.l d1,d0
    b99a:	|  |  |  ,-- beq.s b9b2 <shufflePeople+0x86>
    b99c:	|  |  |  |   move.l #1148846080,-(sp)
    b9a2:	|  |  |  |   move.l 12(sp),-(sp)
    b9a6:	|  |  |  |   jsr 172c2 <__addsf3>
    b9ac:	|  |  |  |   addq.l #8,sp
    b9ae:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    b9b2:	|  |  |  '-> move.l 8(sp),-(sp)
    b9b6:	|  |  |      move.l 16(sp),-(sp)
    b9ba:	|  |  |      jsr 17672 <__gtsf2>
    b9c0:	|  |  |      addq.l #8,sp
    b9c2:	|  |  |      tst.l d0
    b9c4:	|  |  |  ,-- ble.s b9f6 <shufflePeople+0xca>
			A = (*thisReference);
    b9c6:	|  |  |  |   movea.l 16(sp),a0
    b9ca:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    b9ce:	|  |  |  |   movea.l 16(sp),a0
    b9d2:	|  |  |  |   movea.l (a0),a0
    b9d4:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    b9d8:	|  |  |  |   movea.l (sp),a0
    b9da:	|  |  |  |   move.l 36(a0),d0
    b9de:	|  |  |  |   movea.l 4(sp),a0
    b9e2:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    b9e6:	|  |  |  |   movea.l (sp),a0
    b9e8:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    b9ee:	|  |  |  |   movea.l 16(sp),a0
    b9f2:	|  |  |  |   move.l (sp),(a0)
    b9f4:	|  |  +--|-- bra.s ba04 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    b9f6:	|  |  |  '-> movea.l 16(sp),a0
    b9fa:	|  |  |      move.l (a0),d0
    b9fc:	|  |  |      moveq #36,d1
    b9fe:	|  |  |      add.l d0,d1
    ba00:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    ba04:	|  |  '----> movea.l 16(sp),a0
    ba08:	|  |         movea.l (a0),a0
    ba0a:	|  |         move.l 36(a0),d0
    ba0e:	|  '-------- bne.w b946 <shufflePeople+0x1a>
    ba12:	|        ,-- bra.s ba16 <shufflePeople+0xea>
	if (!allPeople) return;
    ba14:	'--------|-> nop
		}
	}
}
    ba16:	         '-> lea 20(sp),sp
    ba1a:	             rts

0000ba1c <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    ba1c:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    ba1e:	       tst.l 8(sp)
    ba22:	   ,-- bgt.s ba28 <setCharacterWalkSpeed+0xc>
    ba24:	   |   clr.w d0
    ba26:	,--|-- bra.s ba46 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ba28:	|  '-> move.l 12(sp),-(sp)
    ba2c:	|      jsr a474 <findPerson>
    ba32:	|      addq.l #4,sp
    ba34:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    ba36:	|  ,-- bne.s ba3c <setCharacterWalkSpeed+0x20>
    ba38:	|  |   clr.w d0
    ba3a:	+--|-- bra.s ba46 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    ba3c:	|  '-> movea.l (sp),a0
    ba3e:	|      move.l 8(sp),28(a0)
	return TRUE;
    ba44:	|      moveq #1,d0
}
    ba46:	'----> addq.l #4,sp
    ba48:	       rts

0000ba4a <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    ba4a:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    ba4c:	       move.l 8(sp),-(sp)
    ba50:	       jsr a474 <findPerson>
    ba56:	       addq.l #4,sp
    ba58:	       move.l d0,(sp)
    if (thisPerson) {
    ba5a:	,----- beq.s ba7a <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    ba5c:	|      movea.l (sp),a0
    ba5e:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    ba64:	|      moveq #2,d0
    ba66:	|      and.l 12(sp),d0
    ba6a:	|  ,-- beq.s ba76 <setPersonExtra+0x2c>
    ba6c:	|  |   movea.l (sp),a0
    ba6e:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    ba76:	|  '-> moveq #1,d0
    ba78:	|  ,-- bra.s ba7c <setPersonExtra+0x32>
    }
    return FALSE;
    ba7a:	'--|-> clr.w d0
}
    ba7c:	   '-> addq.l #4,sp
    ba7e:	       rts

0000ba80 <setScale>:


void setScale (short int h, short int d) {
    ba80:	subq.l #4,sp
    ba82:	move.l 8(sp),d1
    ba86:	move.l 12(sp),d0
    ba8a:	move.w d1,d1
    ba8c:	move.w d1,2(sp)
    ba90:	move.w d0,d0
    ba92:	move.w d0,(sp)
	scaleHorizon = h;
    ba94:	move.w 2(sp),1c15e <scaleHorizon>
	scaleDivide = d;
    ba9c:	move.w (sp),1c160 <scaleDivide>
}
    baa2:	nop
    baa4:	addq.l #4,sp
    baa6:	rts

0000baa8 <setShown>:

void setShown (BOOL h, int ob) {
    baa8:	    subq.l #8,sp
    baaa:	    move.l 12(sp),d0
    baae:	    move.w d0,d0
    bab0:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bab4:	    move.l 16(sp),-(sp)
    bab8:	    jsr a474 <findPerson>
    babe:	    addq.l #4,sp
    bac0:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bac4:	,-- beq.s bad0 <setShown+0x28>
    bac6:	|   movea.l 4(sp),a0
    baca:	|   move.w 2(sp),104(a0)
}
    bad0:	'-> nop
    bad2:	    addq.l #8,sp
    bad4:	    rts

0000bad6 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bad6:	       subq.l #8,sp
    bad8:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bada:	       movea.l 16(sp),a0
    bade:	       move.l 92(a0),d0
    bae2:	       move.l d0,d1
    bae4:	       addi.l #360,d1
    baea:	       movea.l 16(sp),a0
    baee:	       move.l 96(a0),d0
    baf2:	       move.l d1,d2
    baf4:	       sub.l d0,d2
    baf6:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bafa:	       movea.l 16(sp),a0
    bafe:	       move.l 122(a0),d0
    bb02:	   ,-- beq.s bb0e <spinStep+0x38>
    bb04:	   |   movea.l 16(sp),a0
    bb08:	   |   move.l 122(a0),d0
    bb0c:	,--|-- bra.s bb28 <spinStep+0x52>
    bb0e:	|  '-> movea.l 16(sp),a0
    bb12:	|      movea.l 80(a0),a0
    bb16:	|      move.l 4(a0),d0
    bb1a:	|      move.l d0,-(sp)
    bb1c:	|      pea 168 <decodeFilename+0x50>
    bb20:	|      jsr 17ade <__divsi3>
    bb26:	|      addq.l #8,sp
    bb28:	'----> move.l d0,4(sp)
	while (diff > 180) {
    bb2c:	   ,-- bra.s bb36 <spinStep+0x60>
		diff -= 360;
    bb2e:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bb36:	|  '-> cmpi.l #180,8(sp)
    bb3e:	'----- bgt.s bb2e <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bb40:	       move.l 8(sp),d0
    bb44:	       cmp.l 4(sp),d0
    bb48:	   ,-- blt.s bb66 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bb4a:	   |   movea.l 16(sp),a0
    bb4e:	   |   move.l 92(a0),d0
    bb52:	   |   sub.l 4(sp),d0
    bb56:	   |   move.l d0,-(sp)
    bb58:	   |   move.l 20(sp),-(sp)
    bb5c:	   |   jsr bc46 <turnMeAngle>
    bb62:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bb64:	,--|-- bra.s bbac <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bb66:	|  '-> move.l 4(sp),d0
    bb6a:	|      neg.l d0
    bb6c:	|      cmp.l 8(sp),d0
    bb70:	|  ,-- blt.s bb8e <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bb72:	|  |   movea.l 16(sp),a0
    bb76:	|  |   move.l 92(a0),d0
    bb7a:	|  |   add.l 4(sp),d0
    bb7e:	|  |   move.l d0,-(sp)
    bb80:	|  |   move.l 20(sp),-(sp)
    bb84:	|  |   jsr bc46 <turnMeAngle>
    bb8a:	|  |   addq.l #8,sp
}
    bb8c:	+--|-- bra.s bbac <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bb8e:	|  '-> movea.l 16(sp),a0
    bb92:	|      move.l 96(a0),d0
    bb96:	|      move.l d0,-(sp)
    bb98:	|      move.l 20(sp),-(sp)
    bb9c:	|      jsr bc46 <turnMeAngle>
    bba2:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bba4:	|      movea.l 16(sp),a0
    bba8:	|      clr.w 66(a0)
}
    bbac:	'----> nop
    bbae:	       move.l (sp)+,d2
    bbb0:	       addq.l #8,sp
    bbb2:	       rts

0000bbb4 <stopPerson>:


BOOL stopPerson (int o) {
    bbb4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bbb6:	       move.l 8(sp),-(sp)
    bbba:	       jsr a474 <findPerson>
    bbc0:	       addq.l #4,sp
    bbc2:	       move.l d0,(sp)
    if (moveMe)
    bbc4:	,----- beq.s bc02 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bbc6:	|      movea.l (sp),a0
    bbc8:	|      move.l 68(a0),d0
    bbcc:	+----- beq.s bc02 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bbce:	|      movea.l (sp),a0
    bbd0:	|      move.l 68(a0),d0
    bbd4:	|      move.l d0,-(sp)
    bbd6:	|      jsr 4f7e <abortFunction>
    bbdc:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bbde:	|      movea.l (sp),a0
    bbe0:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bbe4:	|      movea.l (sp),a0
    bbe6:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bbea:	|      movea.l (sp),a0
    bbec:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bbf0:	|      clr.l -(sp)
    bbf2:	|      move.l 4(sp),-(sp)
    bbf6:	|      jsr 4120 <setFrames>
    bbfc:	|      addq.l #8,sp
            return TRUE;
    bbfe:	|      moveq #1,d0
    bc00:	|  ,-- bra.s bc04 <stopPerson+0x50>
        }
    return FALSE;
    bc02:	'--|-> clr.w d0
}
    bc04:	   '-> addq.l #4,sp
    bc06:	       rts

0000bc08 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bc08:	       subq.l #8,sp
	int total = 0;
    bc0a:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bc0e:	       clr.l (sp)
    bc10:	   ,-- bra.s bc32 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bc12:	,--|-> movea.l 12(sp),a0
    bc16:	|  |   movea.l 4(a0),a0
    bc1a:	|  |   move.l (sp),d1
    bc1c:	|  |   move.l d1,d0
    bc1e:	|  |   add.l d0,d0
    bc20:	|  |   add.l d1,d0
    bc22:	|  |   add.l d0,d0
    bc24:	|  |   add.l d0,d0
    bc26:	|  |   adda.l d0,a0
    bc28:	|  |   move.l 4(a0),d0
    bc2c:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bc30:	|  |   addq.l #1,(sp)
    bc32:	|  '-> movea.l 12(sp),a0
    bc36:	|      move.l 8(a0),d0
    bc3a:	|      cmp.l (sp),d0
    bc3c:	'----- bgt.s bc12 <timeForAnim+0xa>
	}
	return total;
    bc3e:	       move.l 4(sp),d0
}
    bc42:	       addq.l #8,sp
    bc44:	       rts

0000bc46 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bc46:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bc48:	       movea.l 8(sp),a0
    bc4c:	       movea.l 80(a0),a0
    bc50:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bc54:	       movea.l 8(sp),a0
    bc58:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bc5e:	       move.l (sp),-(sp)
    bc60:	       pea b4 <_start+0xb4>
    bc64:	       jsr 17ade <__divsi3>
    bc6a:	       addq.l #8,sp
    bc6c:	       move.l d0,d1
    bc6e:	       addi.l #180,d1
    bc74:	       movea.l 8(sp),a0
    bc78:	       move.l 100(a0),d0
    bc7c:	       add.l d1,d0
    bc7e:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bc82:	   ,-- bra.s bc8c <turnMeAngle+0x46>
    bc84:	,--|-> addi.l #-360,12(sp)
    bc8c:	|  '-> cmpi.l #359,12(sp)
    bc94:	'----- bgt.s bc84 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bc96:	       move.l (sp),-(sp)
    bc98:	       move.l 16(sp),-(sp)
    bc9c:	       jsr 17a60 <__mulsi3>
    bca2:	       addq.l #8,sp
    bca4:	       pea 168 <decodeFilename+0x50>
    bca8:	       move.l d0,-(sp)
    bcaa:	       jsr 17ade <__divsi3>
    bcb0:	       addq.l #8,sp
    bcb2:	       movea.l 8(sp),a0
    bcb6:	       move.l d0,106(a0)
}
    bcba:	       nop
    bcbc:	       addq.l #4,sp
    bcbe:	       rts

0000bcc0 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bcc0:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bcc2:	          move.l 8(sp),-(sp)
    bcc6:	          jsr a474 <findPerson>
    bccc:	          addq.l #4,sp
    bcce:	          move.l d0,(sp)
    if (thisPerson) {
    bcd0:	,-------- beq.s bd30 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bcd2:	|         movea.l (sp),a0
    bcd4:	|         move.l 68(a0),d0
    bcd8:	|     ,-- beq.s bcea <turnPersonToFace+0x2a>
    bcda:	|     |   movea.l (sp),a0
    bcdc:	|     |   move.l 68(a0),d0
    bce0:	|     |   move.l d0,-(sp)
    bce2:	|     |   jsr 4f7e <abortFunction>
    bce8:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bcea:	|     '-> movea.l (sp),a0
    bcec:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bcf0:	|         movea.l (sp),a0
    bcf2:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bcf6:	|         movea.l (sp),a0
    bcf8:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bcfc:	|         move.l 12(sp),-(sp)
    bd00:	|         move.l 4(sp),-(sp)
    bd04:	|         jsr bc46 <turnMeAngle>
    bd0a:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bd0c:	|         movea.l 1c728 <speech>,a0
    bd12:	|         move.l (a0),d0
    bd14:	|         cmp.l (sp),d0
    bd16:	|  ,----- bne.s bd1c <turnPersonToFace+0x5c>
    bd18:	|  |      moveq #2,d0
    bd1a:	|  |  ,-- bra.s bd1e <turnPersonToFace+0x5e>
    bd1c:	|  '--|-> moveq #0,d0
    bd1e:	|     '-> move.l d0,-(sp)
    bd20:	|         move.l 4(sp),-(sp)
    bd24:	|         jsr 4120 <setFrames>
    bd2a:	|         addq.l #8,sp
        return TRUE;
    bd2c:	|         moveq #1,d0
    bd2e:	|     ,-- bra.s bd32 <turnPersonToFace+0x72>
    }
    return FALSE;
    bd30:	'-----|-> clr.w d0
}
    bd32:	      '-> addq.l #4,sp
    bd34:	          rts

0000bd36 <walkAllPeople>:

void walkAllPeople() {
    bd36:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bd38:	             move.l 1c838 <allPeople>,(sp)

	while (thisPerson) {
    bd3e:	   ,-------- bra.s bdae <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bd40:	,--|-------> movea.l (sp),a0
    bd42:	|  |         move.w 64(a0),d0
    bd46:	|  |     ,-- beq.s bd5a <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    bd48:	|  |     |   pea 1 <_start+0x1>
    bd4c:	|  |     |   move.l 4(sp),-(sp)
    bd50:	|  |     |   jsr bdba <walkMe>
    bd56:	|  |     |   addq.l #8,sp
    bd58:	|  |  ,--|-- bra.s bd7a <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    bd5a:	|  |  |  '-> movea.l (sp),a0
    bd5c:	|  |  |      move.w 66(a0),d0
    bd60:	|  |  +----- beq.s bd7a <walkAllPeople+0x44>
			spinStep(thisPerson);
    bd62:	|  |  |      move.l (sp),-(sp)
    bd64:	|  |  |      jsr bad6 <spinStep>
    bd6a:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    bd6c:	|  |  |      clr.l -(sp)
    bd6e:	|  |  |      move.l 4(sp),-(sp)
    bd72:	|  |  |      jsr 4120 <setFrames>
    bd78:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    bd7a:	|  |  '----> movea.l (sp),a0
    bd7c:	|  |         move.w 64(a0),d0
    bd80:	|  |     ,-- bne.s bda8 <walkAllPeople+0x72>
    bd82:	|  |     |   movea.l (sp),a0
    bd84:	|  |     |   move.w 66(a0),d0
    bd88:	|  |     +-- bne.s bda8 <walkAllPeople+0x72>
    bd8a:	|  |     |   movea.l (sp),a0
    bd8c:	|  |     |   move.l 68(a0),d0
    bd90:	|  |     +-- beq.s bda8 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    bd92:	|  |     |   movea.l (sp),a0
    bd94:	|  |     |   move.l 68(a0),d0
    bd98:	|  |     |   move.l d0,-(sp)
    bd9a:	|  |     |   jsr 70ee <restartFunction>
    bda0:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    bda2:	|  |     |   movea.l (sp),a0
    bda4:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    bda8:	|  |     '-> movea.l (sp),a0
    bdaa:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    bdae:	|  '-------> tst.l (sp)
    bdb0:	'----------- bne.s bd40 <walkAllPeople+0xa>
	}
}
    bdb2:	             nop
    bdb4:	             nop
    bdb6:	             addq.l #4,sp
    bdb8:	             rts

0000bdba <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    bdba:	                lea -20(sp),sp
    bdbe:	                move.l d3,-(sp)
    bdc0:	                move.l d2,-(sp)
    bdc2:	                move.l 36(sp),d0
    bdc6:	                move.w d0,d0
    bdc8:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    bdcc:	                cmpi.w #-1,10(sp)
    bdd2:	,-------------- bne.s bdda <walkMe+0x20>
    bdd4:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bdda:	>-------------> movea.l 32(sp),a0
    bdde:	|               move.l 48(a0),d0
    bde2:	|               move.l d0,-(sp)
    bde4:	|               jsr 17506 <__floatsisf>
    bdea:	|               addq.l #4,sp
    bdec:	|               move.l d0,d1
    bdee:	|               movea.l 32(sp),a0
    bdf2:	|               move.l (a0),d0
    bdf4:	|               move.l d0,-(sp)
    bdf6:	|               move.l d1,-(sp)
    bdf8:	|               jsr 177fa <__subsf3>
    bdfe:	|               addq.l #8,sp
    be00:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    be04:	|               movea.l 32(sp),a0
    be08:	|               move.l 52(a0),d0
    be0c:	|               move.l d0,-(sp)
    be0e:	|               jsr 17506 <__floatsisf>
    be14:	|               addq.l #4,sp
    be16:	|               move.l d0,d1
    be18:	|               movea.l 32(sp),a0
    be1c:	|               move.l 4(a0),d0
    be20:	|               move.l d0,-(sp)
    be22:	|               move.l d1,-(sp)
    be24:	|               jsr 177fa <__subsf3>
    be2a:	|               addq.l #8,sp
    be2c:	|               move.l d0,-(sp)
    be2e:	|               move.l d0,-(sp)
    be30:	|               jsr 172c2 <__addsf3>
    be36:	|               addq.l #8,sp
    be38:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    be3c:	|               movea.l 32(sp),a0
    be40:	|               move.l 32(a0),d2
    be44:	|               movea.l 32(sp),a0
    be48:	|               move.l 28(a0),d0
    be4c:	|               move.l d0,-(sp)
    be4e:	|               jsr 17506 <__floatsisf>
    be54:	|               addq.l #4,sp
    be56:	|               move.l d0,-(sp)
    be58:	|               move.l d2,-(sp)
    be5a:	|               jsr 175b8 <__mulsf3>
    be60:	|               addq.l #8,sp
    be62:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    be66:	|               move.l 24(sp),-(sp)
    be6a:	|               jsr 17428 <__extendsfdf2>
    be70:	|               addq.l #4,sp
    be72:	|               move.l #-1717986918,-(sp)
    be78:	|               move.l #1070176665,-(sp)
    be7e:	|               move.l d1,-(sp)
    be80:	|               move.l d0,-(sp)
    be82:	|               jsr 176de <__ltdf2>
    be88:	|               lea 16(sp),sp
    be8c:	|               tst.l d0
    be8e:	|           ,-- bge.s be98 <walkMe+0xde>
    be90:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    be98:	|           '-> move.l 20(sp),-(sp)
    be9c:	|               jsr 1749e <__fixsfsi>
    bea2:	|               addq.l #4,sp
    bea4:	|               move.l d0,-(sp)
    bea6:	|               jsr 9064 <TF_abs>
    beac:	|               addq.l #4,sp
    beae:	|               move.l d0,d2
    beb0:	|               move.l 16(sp),-(sp)
    beb4:	|               jsr 1749e <__fixsfsi>
    beba:	|               addq.l #4,sp
    bebc:	|               move.l d0,-(sp)
    bebe:	|               jsr 9064 <TF_abs>
    bec4:	|               addq.l #4,sp
    bec6:	|               cmp.l d2,d0
    bec8:	|        ,----- bgt.s beec <walkMe+0x132>
    beca:	|        |      move.l 20(sp),-(sp)
    bece:	|        |      jsr 1749e <__fixsfsi>
    bed4:	|        |      addq.l #4,sp
    bed6:	|        |      move.l d0,-(sp)
    bed8:	|        |      jsr 9064 <TF_abs>
    bede:	|        |      addq.l #4,sp
    bee0:	|        |      move.l d0,-(sp)
    bee2:	|        |      jsr 17506 <__floatsisf>
    bee8:	|        |      addq.l #4,sp
    beea:	|        |  ,-- bra.s bf0c <walkMe+0x152>
    beec:	|        '--|-> move.l 16(sp),-(sp)
    bef0:	|           |   jsr 1749e <__fixsfsi>
    bef6:	|           |   addq.l #4,sp
    bef8:	|           |   move.l d0,-(sp)
    befa:	|           |   jsr 9064 <TF_abs>
    bf00:	|           |   addq.l #4,sp
    bf02:	|           |   move.l d0,-(sp)
    bf04:	|           |   jsr 17506 <__floatsisf>
    bf0a:	|           |   addq.l #4,sp
    bf0c:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    bf10:	|               move.l 12(sp),-(sp)
    bf14:	|               jsr 1749e <__fixsfsi>
    bf1a:	|               addq.l #4,sp
    bf1c:	|               move.l d0,-(sp)
    bf1e:	|               jsr 9064 <TF_abs>
    bf24:	|               addq.l #4,sp
    bf26:	|               move.l d0,-(sp)
    bf28:	|               jsr 17506 <__floatsisf>
    bf2e:	|               addq.l #4,sp
    bf30:	|               move.l d0,-(sp)
    bf32:	|               move.l 28(sp),-(sp)
    bf36:	|               jsr 1772c <__ltsf2>
    bf3c:	|               addq.l #8,sp
    bf3e:	|               tst.l d0
    bf40:	|        ,----- bge.w bff2 <walkMe+0x238>
			if (thisPerson->spinning) {
    bf44:	|        |      movea.l 32(sp),a0
    bf48:	|        |      move.w 66(a0),d0
    bf4c:	|        |  ,-- beq.s bf6a <walkMe+0x1b0>
				spinStep(thisPerson);
    bf4e:	|        |  |   move.l 32(sp),-(sp)
    bf52:	|        |  |   jsr bad6 <spinStep>
    bf58:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    bf5a:	|        |  |   pea 1 <_start+0x1>
    bf5e:	|        |  |   move.l 36(sp),-(sp)
    bf62:	|        |  |   jsr 4120 <setFrames>
    bf68:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    bf6a:	|        |  '-> move.l 24(sp),-(sp)
    bf6e:	|        |      move.l 16(sp),-(sp)
    bf72:	|        |      jsr 173bc <__divsf3>
    bf78:	|        |      addq.l #8,sp
    bf7a:	|        |      move.l d0,24(sp)
			if (move)
    bf7e:	|        |      tst.w 10(sp)
    bf82:	|        |  ,-- beq.s bfec <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    bf84:	|        |  |   movea.l 32(sp),a0
    bf88:	|        |  |   move.l 4(a0),d2
    bf8c:	|        |  |   move.l 24(sp),d0
    bf90:	|        |  |   move.l d0,-(sp)
    bf92:	|        |  |   move.l d0,-(sp)
    bf94:	|        |  |   jsr 172c2 <__addsf3>
    bf9a:	|        |  |   addq.l #8,sp
    bf9c:	|        |  |   move.l d0,-(sp)
    bf9e:	|        |  |   move.l 20(sp),-(sp)
    bfa2:	|        |  |   jsr 173bc <__divsf3>
    bfa8:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bfaa:	|        |  |   move.l d0,-(sp)
    bfac:	|        |  |   move.l d2,-(sp)
    bfae:	|        |  |   jsr 172c2 <__addsf3>
    bfb4:	|        |  |   addq.l #8,sp
    bfb6:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    bfb8:	|        |  |   movea.l 32(sp),a0
    bfbc:	|        |  |   move.l (a0),d3
    bfbe:	|        |  |   move.l 24(sp),-(sp)
    bfc2:	|        |  |   move.l 24(sp),-(sp)
    bfc6:	|        |  |   jsr 173bc <__divsf3>
    bfcc:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bfce:	|        |  |   move.l d0,-(sp)
    bfd0:	|        |  |   move.l d3,-(sp)
    bfd2:	|        |  |   jsr 172c2 <__addsf3>
    bfd8:	|        |  |   addq.l #8,sp
    bfda:	|        |  |   move.l d2,-(sp)
    bfdc:	|        |  |   move.l d0,-(sp)
    bfde:	|        |  |   move.l 40(sp),-(sp)
    bfe2:	|        |  |   jsr abbc <moveAndScale>
    bfe8:	|        |  |   lea 12(sp),sp
			return TRUE;
    bfec:	|        |  '-> moveq #1,d0
    bfee:	|  ,-----|----- bra.w c0a0 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    bff2:	|  |     '----> movea.l 32(sp),a0
    bff6:	|  |            move.l 56(a0),d0
    bffa:	|  |            moveq #-1,d1
    bffc:	|  |            cmp.l d0,d1
    bffe:	|  |        ,-- bne.s c036 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c000:	|  |        |   movea.l 32(sp),a0
    c004:	|  |        |   move.l 110(a0),d0
    c008:	|  |        |   moveq #-1,d1
    c00a:	|  |        |   cmp.l d0,d1
    c00c:	|  |  ,-----|-- beq.s c04a <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c00e:	|  |  |     |   movea.l 32(sp),a0
    c012:	|  |  |     |   move.l 110(a0),d0
    c016:	|  |  |     |   movea.l 32(sp),a0
    c01a:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c01e:	|  |  |     |   movea.l 32(sp),a0
    c022:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c028:	|  |  |     |   move.l 32(sp),-(sp)
    c02c:	|  |  |     |   jsr bad6 <spinStep>
    c032:	|  |  |     |   addq.l #4,sp
			}
			break;
    c034:	|  |  +-----|-- bra.s c04a <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c036:	|  |  |     '-> move.l 32(sp),-(sp)
    c03a:	|  |  |         jsr 97d6 <doBorderStuff>
    c040:	|  |  |         addq.l #4,sp
    c042:	|  |  |         tst.w d0
    c044:	|  |  |  ,----- beq.s c04e <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c046:	'--|--|--|----- bra.w bdda <walkMe+0x20>
			break;
    c04a:	   |  '--|----> nop
    c04c:	   |     |  ,-- bra.s c050 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c04e:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c050:	   |        '-> movea.l 32(sp),a0
    c054:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c058:	   |            clr.l -(sp)
    c05a:	   |            move.l 36(sp),-(sp)
    c05e:	   |            jsr 4120 <setFrames>
    c064:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c066:	   |            movea.l 32(sp),a0
    c06a:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c06e:	   |            move.l d0,-(sp)
    c070:	   |            jsr 17506 <__floatsisf>
    c076:	   |            addq.l #4,sp
    c078:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c07a:	   |            movea.l 32(sp),a0
    c07e:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c082:	   |            move.l d0,-(sp)
    c084:	   |            jsr 17506 <__floatsisf>
    c08a:	   |            addq.l #4,sp
    c08c:	   |            move.l d2,-(sp)
    c08e:	   |            move.l d0,-(sp)
    c090:	   |            move.l 40(sp),-(sp)
    c094:	   |            jsr abbc <moveAndScale>
    c09a:	   |            lea 12(sp),sp
	return FALSE;
    c09e:	   |            clr.w d0
}
    c0a0:	   '----------> move.l (sp)+,d2
    c0a2:	                move.l (sp)+,d3
    c0a4:	                lea 20(sp),sp
    c0a8:	                rts

0000c0aa <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c0aa:	       subq.l #8,sp
    c0ac:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c0ae:	   ,-- bra.s c0de <clearStackLib+0x34>
		k = stackLib;
    c0b0:	,--|-> move.l 1c864 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c0b8:	|  |   movea.l 1c864 <stackLib>,a0
    c0be:	|  |   move.l 4(a0),d0
    c0c2:	|  |   move.l d0,1c864 <stackLib>
		FreeVec(k);
    c0c8:	|  |   move.l 8(sp),4(sp)
    c0ce:	|  |   move.l 1c7d8 <SysBase>,d0
    c0d4:	|  |   movea.l d0,a6
    c0d6:	|  |   movea.l 4(sp),a1
    c0da:	|  |   jsr -690(a6)
	while (stackLib) {
    c0de:	|  '-> move.l 1c864 <stackLib>,d0
    c0e4:	'----- bne.s c0b0 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c0e6:	       clr.l 1c860 <stackLibTotal>
}
    c0ec:	       nop
    c0ee:	       movea.l (sp)+,a6
    c0f0:	       addq.l #8,sp
    c0f2:	       rts

0000c0f4 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c0f4:	          lea -128(sp),sp
    c0f8:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c0fc:	      ,-- bra.s c10e <loadGame+0x1a>
    c0fe:	   ,--|-> move.l 1c770 <allRunningFunctions>,d0
    c104:	   |  |   move.l d0,-(sp)
    c106:	   |  |   jsr 5f86 <finishFunction>
    c10c:	   |  |   addq.l #4,sp
    c10e:	   |  '-> move.l 1c770 <allRunningFunctions>,d0
    c114:	   '----- bne.s c0fe <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c116:	          pea 1c868 <ssgVersion>
    c11c:	          pea 190e8 <PutChar+0x1572>
    c122:	          pea 41 <_start+0x41>
    c126:	          pea 53 <_start+0x53>
    c12a:	          move.l 160(sp),-(sp)
    c12e:	          jsr 6d3c <openAndVerify>
    c134:	          lea 20(sp),sp
    c138:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c13c:	      ,-- bne.s c144 <loadGame+0x50>
    c13e:	      |   clr.w d0
    c140:	,-----|-- bra.w c3ea <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c144:	|     '-> move.l 112(sp),108(sp)
    c14a:	|         lea 140(sp),a0
    c14e:	|         lea -126(a0),a0
    c152:	|         move.l a0,120(sp)
    c156:	|         moveq #8,d0
    c158:	|         move.l d0,116(sp)
    c15c:	|         move.l 1c7e0 <DOSBase>,d0
    c162:	|         movea.l d0,a6
    c164:	|         move.l 108(sp),d1
    c168:	|         move.l 120(sp),d2
    c16c:	|         move.l 116(sp),d3
    c170:	|         jsr -42(a6)
    c174:	|         move.l d0,132(sp)
    c178:	|         move.l 132(sp),d0
    c17c:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c180:	|         moveq #8,d0
    c182:	|         cmp.l 128(sp),d0
    c186:	|     ,-- beq.s c196 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c188:	|     |   pea 19109 <PutChar+0x1593>
    c18e:	|     |   jsr 170d4 <KPrintF>
    c194:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c196:	|     '-> move.l 14(sp),d1
    c19a:	|         move.l 1c77a <fileTime>,d0
    c1a0:	|         cmp.l d1,d0
    c1a2:	|     ,-- bne.s c1b2 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c1a4:	|     |   move.l 18(sp),d1
    c1a8:	|     |   move.l 1c77e <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c1ae:	|     |   cmp.l d1,d0
    c1b0:	|  ,--|-- beq.s c1d2 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c1b2:	|  |  '-> move.l 144(sp),-(sp)
    c1b6:	|  |      pea 19125 <PutChar+0x15af>
    c1bc:	|  |      pea 191ec <PutChar+0x1676>
    c1c2:	|  |      jsr 170d4 <KPrintF>
    c1c8:	|  |      lea 12(sp),sp
		return FALSE; 
    c1cc:	|  |      clr.w d0
    c1ce:	+--|----- bra.w c3ea <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c1d2:	|  '----> move.l 112(sp),124(sp)
    c1d8:	|         move.l 1c7e0 <DOSBase>,d0
    c1de:	|         movea.l d0,a6
    c1e0:	|         move.l 124(sp),d1
    c1e4:	|         jsr -306(a6)
    c1e8:	|         move.l d0,136(sp)
    c1ec:	|         move.l 136(sp),d0
    c1f0:	|         move.l d0,d0
    c1f2:	|         move.w d0,1c028 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c1f8:	|         move.l 112(sp),100(sp)
    c1fe:	|         move.l 1c7e0 <DOSBase>,d0
    c204:	|         movea.l d0,a6
    c206:	|         move.l 100(sp),d1
    c20a:	|         jsr -306(a6)
    c20e:	|         move.l d0,96(sp)
    c212:	|         move.l 96(sp),d0
    c216:	|         move.l d0,d0
    c218:	|         move.w d0,1c778 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c21e:	|         move.l 112(sp),92(sp)
    c224:	|         move.l 1c7e0 <DOSBase>,d0
    c22a:	|         movea.l d0,a6
    c22c:	|         move.l 92(sp),d1
    c230:	|         jsr -306(a6)
    c234:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c238:	|         move.l 112(sp),84(sp)
    c23e:	|         move.l 1c7e0 <DOSBase>,d0
    c244:	|         movea.l d0,a6
    c246:	|         move.l 84(sp),d1
    c24a:	|         jsr -306(a6)
    c24e:	|         move.l d0,80(sp)
    c252:	|         move.l 80(sp),d0
    c256:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c25a:	|     ,-- beq.s c28e <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c25c:	|     |   move.l 112(sp),-(sp)
    c260:	|     |   jsr 6bc <get2bytes>
    c266:	|     |   addq.l #4,sp
    c268:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c26c:	|     |   move.l 112(sp),-(sp)
    c270:	|     |   jsr 6bc <get2bytes>
    c276:	|     |   addq.l #4,sp
    c278:	|     |   move.l d0,1c8cc <fontHeight>
		charOrder = readString(fp);		
    c27e:	|     |   move.l 112(sp),-(sp)
    c282:	|     |   jsr b02 <readString>
    c288:	|     |   addq.l #4,sp
    c28a:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c28e:	|     '-> move.l 104(sp),70(sp)
    c294:	|         move.l 1c7d8 <SysBase>,d0
    c29a:	|         movea.l d0,a6
    c29c:	|         movea.l 70(sp),a1
    c2a0:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c2a4:	|         move.l 112(sp),-(sp)
    c2a8:	|         jsr 854 <getSigned>
    c2ae:	|         addq.l #4,sp
    c2b0:	|         move.w d0,1c6d0 <fontSpace>

	killAllPeople ();
    c2b6:	|         jsr a85e <killAllPeople>
	killAllRegions ();
    c2bc:	|         jsr 15900 <killAllRegions>

	int camerX = get2bytes (fp);
    c2c2:	|         move.l 112(sp),-(sp)
    c2c6:	|         jsr 6bc <get2bytes>
    c2cc:	|         addq.l #4,sp
    c2ce:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c2d2:	|         move.l 112(sp),-(sp)
    c2d6:	|         jsr 6bc <get2bytes>
    c2dc:	|         addq.l #4,sp
    c2de:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c2e2:	|         move.l 112(sp),-(sp)
    c2e6:	|         jsr 7d8 <getFloat>
    c2ec:	|         addq.l #4,sp
    c2ee:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c2f2:	|         move.l 112(sp),54(sp)
    c2f8:	|         move.l 1c7e0 <DOSBase>,d0
    c2fe:	|         movea.l d0,a6
    c300:	|         move.l 54(sp),d1
    c304:	|         jsr -306(a6)
    c308:	|         move.l d0,50(sp)
    c30c:	|         move.l 50(sp),d0
    c310:	|         move.l d0,d0
    c312:	|         move.b d0,1c146 <brightnessLevel>

	loadHandlers (fp);
    c318:	|         move.l 112(sp),-(sp)
    c31c:	|         jsr 6c9c <loadHandlers>
    c322:	|         addq.l #4,sp
	loadRegions (fp);
    c324:	|         move.l 112(sp),-(sp)
    c328:	|         jsr 1595c <loadRegions>
    c32e:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c330:	|         moveq #12,d0
    c332:	|         move.l d0,46(sp)
    c336:	|         clr.l 42(sp)
    c33a:	|         move.l 1c7d8 <SysBase>,d0
    c340:	|         movea.l d0,a6
    c342:	|         move.l 46(sp),d0
    c346:	|         move.l 42(sp),d1
    c34a:	|         jsr -684(a6)
    c34e:	|         move.l d0,38(sp)
    c352:	|         move.l 38(sp),d0
    c356:	|         move.l d0,1c6d2 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c35c:	|         move.l 1c6d2 <mouseCursorAnim>,d0
    c362:	|     ,-- bne.s c376 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c364:	|     |   pea 191f6 <PutChar+0x1680>
    c36a:	|     |   jsr 170d4 <KPrintF>
    c370:	|     |   addq.l #4,sp
		return FALSE;
    c372:	|     |   clr.w d0
    c374:	+-----|-- bra.s c3ea <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c376:	|     '-> jsr d210 <nosnapshot>
	if (FGetC (fp)) {
    c37c:	|         move.l 112(sp),34(sp)
    c382:	|         move.l 1c7e0 <DOSBase>,d0
    c388:	|         movea.l d0,a6
    c38a:	|         move.l 34(sp),d1
    c38e:	|         jsr -306(a6)
    c392:	|         move.l d0,30(sp)
    c396:	|         move.l 30(sp),d0
    c39a:	|     ,-- beq.s c3b0 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c39c:	|     |   move.l 112(sp),-(sp)
    c3a0:	|     |   jsr d290 <restoreSnapshot>
    c3a6:	|     |   addq.l #4,sp
    c3a8:	|     |   tst.w d0
    c3aa:	|     +-- bne.s c3b0 <loadGame+0x2bc>
    c3ac:	|     |   clr.w d0
    c3ae:	+-----|-- bra.s c3ea <loadGame+0x2f6>
	}

	Close (fp);
    c3b0:	|     '-> move.l 112(sp),26(sp)
    c3b6:	|         move.l 1c7e0 <DOSBase>,d0
    c3bc:	|         movea.l d0,a6
    c3be:	|         move.l 26(sp),d1
    c3c2:	|         jsr -36(a6)
    c3c6:	|         move.l d0,22(sp)
	clearStackLib ();
    c3ca:	|         jsr c0aa <clearStackLib>

	cameraX = camerX;
    c3d0:	|         move.l 66(sp),1c88e <cameraX>
	cameraY = camerY;
    c3d8:	|         move.l 62(sp),1c892 <cameraY>
	cameraZoom = camerZ;
    c3e0:	|         move.l 58(sp),1c16a <cameraZoom>

	return TRUE;
    c3e8:	|         moveq #1,d0
}
    c3ea:	'-------> movem.l (sp)+,d2-d3/a6
    c3ee:	          lea 128(sp),sp
    c3f2:	          rts

0000c3f4 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c3f4:	   ,-> lea -64(sp),sp
    c3f8:	   |   move.l a6,-(sp)
    c3fa:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c3fc:	   |   movea.l 76(sp),a0
    c400:	   |   move.l (a0),d0
    c402:	   |   move.l 80(sp),-(sp)
    c406:	   |   move.l d0,-(sp)
    c408:	   |   jsr 8d0 <put2bytes>
    c40e:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c410:	   |   movea.l 76(sp),a0
    c414:	   |   move.l 40(a0),d0
    c418:	,--|-- beq.s c454 <saveFunction+0x60>
		FPutC (fp, 1);
    c41a:	|  |   move.l 80(sp),52(sp)
    c420:	|  |   moveq #1,d0
    c422:	|  |   move.l d0,48(sp)
    c426:	|  |   move.l 1c7e0 <DOSBase>,d0
    c42c:	|  |   movea.l d0,a6
    c42e:	|  |   move.l 52(sp),d1
    c432:	|  |   move.l 48(sp),d2
    c436:	|  |   jsr -312(a6)
    c43a:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c43e:	|  |   movea.l 76(sp),a0
    c442:	|  |   move.l 40(a0),d0
    c446:	|  |   move.l 80(sp),-(sp)
    c44a:	|  |   move.l d0,-(sp)
    c44c:	|  '-- jsr c3f4 <saveFunction>(pc)
    c450:	|      addq.l #8,sp
    c452:	|  ,-- bra.s c476 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c454:	'--|-> move.l 80(sp),64(sp)
    c45a:	   |   clr.l 60(sp)
    c45e:	   |   move.l 1c7e0 <DOSBase>,d0
    c464:	   |   movea.l d0,a6
    c466:	   |   move.l 64(sp),d1
    c46a:	   |   move.l 60(sp),d2
    c46e:	   |   jsr -312(a6)
    c472:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c476:	   '-> movea.l 76(sp),a0
    c47a:	       move.l 12(a0),d0
    c47e:	       move.l 80(sp),-(sp)
    c482:	       move.l d0,-(sp)
    c484:	       jsr 958 <put4bytes>
    c48a:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c48c:	       movea.l 76(sp),a0
    c490:	       move.l 36(a0),d0
    c494:	       move.l 80(sp),-(sp)
    c498:	       move.l d0,-(sp)
    c49a:	       jsr 8d0 <put2bytes>
    c4a0:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c4a2:	       move.l 80(sp),40(sp)
    c4a8:	       movea.l 76(sp),a0
    c4ac:	       move.w 54(a0),d0
    c4b0:	       movea.w d0,a0
    c4b2:	       move.l a0,36(sp)
    c4b6:	       move.l 1c7e0 <DOSBase>,d0
    c4bc:	       movea.l d0,a6
    c4be:	       move.l 40(sp),d1
    c4c2:	       move.l 36(sp),d2
    c4c6:	       jsr -312(a6)
    c4ca:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c4ce:	       move.l 80(sp),28(sp)
    c4d4:	       movea.l 76(sp),a0
    c4d8:	       move.w 48(a0),d0
    c4dc:	       movea.w d0,a0
    c4de:	       move.l a0,24(sp)
    c4e2:	       move.l 1c7e0 <DOSBase>,d0
    c4e8:	       movea.l d0,a6
    c4ea:	       move.l 28(sp),d1
    c4ee:	       move.l 24(sp),d2
    c4f2:	       jsr -312(a6)
    c4f6:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c4fa:	       move.l 80(sp),16(sp)
    c500:	       movea.l 76(sp),a0
    c504:	       move.w 50(a0),d0
    c508:	       movea.w d0,a0
    c50a:	       move.l a0,12(sp)
    c50e:	       move.l 1c7e0 <DOSBase>,d0
    c514:	       movea.l d0,a6
    c516:	       move.l 16(sp),d1
    c51a:	       move.l 12(sp),d2
    c51e:	       jsr -312(a6)
    c522:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c526:	       moveq #28,d0
    c528:	       add.l 76(sp),d0
    c52c:	       move.l 80(sp),-(sp)
    c530:	       move.l d0,-(sp)
    c532:	       jsr cc4c <saveVariable>
    c538:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c53a:	       movea.l 76(sp),a0
    c53e:	       move.b 56(a0),d0
    c542:	   ,-- beq.s c552 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c544:	   |   pea 19217 <PutChar+0x16a1>
    c54a:	   |   jsr 170d4 <KPrintF>
    c550:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c552:	   '-> movea.l 76(sp),a0
    c556:	       move.l 24(a0),d0
    c55a:	       move.l 80(sp),-(sp)
    c55e:	       move.l d0,-(sp)
    c560:	       jsr cac0 <saveStack>
    c566:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c568:	       clr.l 68(sp)
    c56c:	   ,-- bra.s c590 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c56e:	,--|-> movea.l 76(sp),a0
    c572:	|  |   move.l 20(a0),d1
    c576:	|  |   move.l 68(sp),d0
    c57a:	|  |   lsl.l #3,d0
    c57c:	|  |   add.l d1,d0
    c57e:	|  |   move.l 80(sp),-(sp)
    c582:	|  |   move.l d0,-(sp)
    c584:	|  |   jsr cc4c <saveVariable>
    c58a:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c58c:	|  |   addq.l #1,68(sp)
    c590:	|  '-> movea.l 76(sp),a0
    c594:	|      move.l 8(a0),d0
    c598:	|      cmp.l 68(sp),d0
    c59c:	'----- bgt.s c56e <saveFunction+0x17a>
	}
}
    c59e:	       nop
    c5a0:	       nop
    c5a2:	       move.l (sp)+,d2
    c5a4:	       movea.l (sp)+,a6
    c5a6:	       lea 64(sp),sp
    c5aa:	       rts

0000c5ac <saveGame>:

BOOL saveGame (char * fname) {
    c5ac:	          lea -248(sp),sp
    c5b0:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c5b4:	          move.l 264(sp),244(sp)
    c5ba:	          move.l #1006,240(sp)
    c5c2:	          move.l 1c7e0 <DOSBase>,d0
    c5c8:	          movea.l d0,a6
    c5ca:	          move.l 244(sp),d1
    c5ce:	          move.l 240(sp),d2
    c5d2:	          jsr -30(a6)
    c5d6:	          move.l d0,236(sp)
    c5da:	          move.l 236(sp),d0
    c5de:	          move.l d0,232(sp)
	if (fp == NULL) {
    c5e2:	      ,-- bne.s c5f8 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c5e4:	      |   pea 19239 <PutChar+0x16c3>
    c5ea:	      |   jsr 170d4 <KPrintF>
    c5f0:	      |   addq.l #4,sp
		return FALSE;
    c5f2:	      |   clr.w d0
    c5f4:	,-----|-- bra.w cab6 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c5f8:	|     '-> move.l 232(sp),228(sp)
    c5fe:	|         move.l #102998,224(sp)
    c606:	|         moveq #6,d0
    c608:	|         move.l d0,220(sp)
    c60c:	|         move.l 1c7e0 <DOSBase>,d0
    c612:	|         movea.l d0,a6
    c614:	|         move.l 228(sp),d1
    c618:	|         move.l 224(sp),d2
    c61c:	|         move.l 220(sp),d3
    c620:	|         jsr -48(a6)
    c624:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c628:	|         move.l 232(sp),212(sp)
    c62e:	|         clr.l 208(sp)
    c632:	|         move.l 1c7e0 <DOSBase>,d0
    c638:	|         movea.l d0,a6
    c63a:	|         move.l 212(sp),d1
    c63e:	|         move.l 208(sp),d2
    c642:	|         jsr -312(a6)
    c646:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c64a:	|         move.l 232(sp),200(sp)
    c650:	|         clr.l 196(sp)
    c654:	|         move.l 1c7e0 <DOSBase>,d0
    c65a:	|         movea.l d0,a6
    c65c:	|         move.l 200(sp),d1
    c660:	|         move.l 196(sp),d2
    c664:	|         jsr -312(a6)
    c668:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c66c:	|         move.l 232(sp),188(sp)
    c672:	|         moveq #2,d0
    c674:	|         move.l d0,184(sp)
    c678:	|         move.l 1c7e0 <DOSBase>,d0
    c67e:	|         movea.l d0,a6
    c680:	|         move.l 188(sp),d1
    c684:	|         move.l 184(sp),d2
    c688:	|         jsr -312(a6)
    c68c:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c690:	|         move.l 232(sp),176(sp)
    c696:	|         moveq #2,d0
    c698:	|         move.l d0,172(sp)
    c69c:	|         move.l 1c7e0 <DOSBase>,d0
    c6a2:	|         movea.l d0,a6
    c6a4:	|         move.l 176(sp),d1
    c6a8:	|         move.l 172(sp),d2
    c6ac:	|         jsr -312(a6)
    c6b0:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c6b4:	|         move.l 232(sp),164(sp)
    c6ba:	|         move.l #116602,160(sp)
    c6c2:	|         moveq #8,d0
    c6c4:	|         move.l d0,156(sp)
    c6c8:	|         move.l 1c7e0 <DOSBase>,d0
    c6ce:	|         movea.l d0,a6
    c6d0:	|         move.l 164(sp),d1
    c6d4:	|         move.l 160(sp),d2
    c6d8:	|         move.l 156(sp),d3
    c6dc:	|         jsr -48(a6)
    c6e0:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c6e4:	|         move.l 232(sp),148(sp)
    c6ea:	|         move.w 1c028 <allowAnyFilename>,d0
    c6f0:	|         movea.w d0,a0
    c6f2:	|         move.l a0,144(sp)
    c6f6:	|         move.l 1c7e0 <DOSBase>,d0
    c6fc:	|         movea.l d0,a6
    c6fe:	|         move.l 148(sp),d1
    c702:	|         move.l 144(sp),d2
    c706:	|         jsr -312(a6)
    c70a:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c70e:	|         move.l 232(sp),136(sp)
    c714:	|         move.w 1c778 <captureAllKeys>,d0
    c71a:	|         movea.w d0,a0
    c71c:	|         move.l a0,132(sp)
    c720:	|         move.l 1c7e0 <DOSBase>,d0
    c726:	|         movea.l d0,a6
    c728:	|         move.l 136(sp),d1
    c72c:	|         move.l 132(sp),d2
    c730:	|         jsr -312(a6)
    c734:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c738:	|         move.l 232(sp),124(sp)
    c73e:	|         moveq #1,d0
    c740:	|         move.l d0,120(sp)
    c744:	|         move.l 1c7e0 <DOSBase>,d0
    c74a:	|         movea.l d0,a6
    c74c:	|         move.l 124(sp),d1
    c750:	|         move.l 120(sp),d2
    c754:	|         jsr -312(a6)
    c758:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    c75c:	|         move.l 232(sp),112(sp)
    c762:	|         move.l 1c8dc <fontTableSize>,d0
    c768:	|         sgt d0
    c76a:	|         neg.b d0
    c76c:	|         move.b d0,d0
    c76e:	|         andi.l #255,d0
    c774:	|         move.l d0,108(sp)
    c778:	|         move.l 1c7e0 <DOSBase>,d0
    c77e:	|         movea.l d0,a6
    c780:	|         move.l 112(sp),d1
    c784:	|         move.l 108(sp),d2
    c788:	|         jsr -312(a6)
    c78c:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    c790:	|         move.l 1c8dc <fontTableSize>,d0
    c796:	|     ,-- ble.s c7d4 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c798:	|     |   move.l 1c8d0 <loadedFontNum>,d0
    c79e:	|     |   move.l 232(sp),-(sp)
    c7a2:	|     |   move.l d0,-(sp)
    c7a4:	|     |   jsr 8d0 <put2bytes>
    c7aa:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c7ac:	|     |   move.l 1c8cc <fontHeight>,d0
    c7b2:	|     |   move.l 232(sp),-(sp)
    c7b6:	|     |   move.l d0,-(sp)
    c7b8:	|     |   jsr 8d0 <put2bytes>
    c7be:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c7c0:	|     |   move.l 1c8d4 <fontOrderString>,d0
    c7c6:	|     |   move.l 232(sp),-(sp)
    c7ca:	|     |   move.l d0,-(sp)
    c7cc:	|     |   jsr bd8 <writeString>
    c7d2:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c7d4:	|     '-> move.w 1c6d0 <fontSpace>,d0
    c7da:	|         movea.w d0,a0
    c7dc:	|         move.l 232(sp),-(sp)
    c7e0:	|         move.l a0,-(sp)
    c7e2:	|         jsr a9c <putSigned>
    c7e8:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c7ea:	|         move.l 1c88e <cameraX>,d0
    c7f0:	|         move.l 232(sp),-(sp)
    c7f4:	|         move.l d0,-(sp)
    c7f6:	|         jsr 8d0 <put2bytes>
    c7fc:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c7fe:	|         move.l 1c892 <cameraY>,d0
    c804:	|         move.l 232(sp),-(sp)
    c808:	|         move.l d0,-(sp)
    c80a:	|         jsr 8d0 <put2bytes>
    c810:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c812:	|         move.l 1c16a <cameraZoom>,d0
    c818:	|         move.l 232(sp),-(sp)
    c81c:	|         move.l d0,-(sp)
    c81e:	|         jsr a46 <putFloat>
    c824:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c826:	|         move.l 232(sp),100(sp)
    c82c:	|         move.b 1c146 <brightnessLevel>,d0
    c832:	|         move.b d0,d0
    c834:	|         andi.l #255,d0
    c83a:	|         move.l d0,96(sp)
    c83e:	|         move.l 1c7e0 <DOSBase>,d0
    c844:	|         movea.l d0,a6
    c846:	|         move.l 100(sp),d1
    c84a:	|         move.l 96(sp),d2
    c84e:	|         jsr -312(a6)
    c852:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    c856:	|         move.l 232(sp),-(sp)
    c85a:	|         jsr 7220 <saveHandlers>
    c860:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c862:	|         move.l 232(sp),-(sp)
    c866:	|         jsr 15b16 <saveRegions>
    c86c:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c86e:	|         move.l 1c6d2 <mouseCursorAnim>,d0
    c874:	|         move.l 232(sp),-(sp)
    c878:	|         move.l d0,-(sp)
    c87a:	|         jsr add0 <saveAnim>
    c880:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c882:	|         move.l 1c6d6 <mouseCursorFrameNum>,d0
    c888:	|         move.l 232(sp),-(sp)
    c88c:	|         move.l d0,-(sp)
    c88e:	|         jsr 8d0 <put2bytes>
    c894:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c896:	|         move.l 1c770 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    c89e:	|         clr.l 248(sp)
	while (thisFunction) {
    c8a2:	|     ,-- bra.s c8b2 <saveGame+0x306>
		countFunctions ++;
    c8a4:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    c8a8:	|  |  |   movea.l 252(sp),a0
    c8ac:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c8b2:	|  |  '-> tst.l 252(sp)
    c8b6:	|  '----- bne.s c8a4 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c8b8:	|         move.l 232(sp),-(sp)
    c8bc:	|         move.l 252(sp),-(sp)
    c8c0:	|         jsr 8d0 <put2bytes>
    c8c6:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c8c8:	|         move.l 1c770 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    c8d0:	|     ,-- bra.s c8ec <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c8d2:	|  ,--|-> move.l 232(sp),-(sp)
    c8d6:	|  |  |   move.l 256(sp),-(sp)
    c8da:	|  |  |   jsr c3f4 <saveFunction>
    c8e0:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    c8e2:	|  |  |   movea.l 252(sp),a0
    c8e6:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    c8ec:	|  |  '-> tst.l 252(sp)
    c8f0:	|  '----- bne.s c8d2 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    c8f2:	|         clr.l 256(sp)
    c8f6:	|     ,-- bra.s c918 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    c8f8:	|  ,--|-> move.l 1c786 <globalVars>,d1
    c8fe:	|  |  |   move.l 256(sp),d0
    c902:	|  |  |   lsl.l #3,d0
    c904:	|  |  |   add.l d1,d0
    c906:	|  |  |   move.l 232(sp),-(sp)
    c90a:	|  |  |   move.l d0,-(sp)
    c90c:	|  |  |   jsr cc4c <saveVariable>
    c912:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    c914:	|  |  |   addq.l #1,256(sp)
    c918:	|  |  '-> move.l 1c7b0 <numGlobals>,d0
    c91e:	|  |      cmp.l 256(sp),d0
    c922:	|  '----- bgt.s c8f8 <saveGame+0x34c>
	}

	savePeople (fp);
    c924:	|         move.l 232(sp),-(sp)
    c928:	|         jsr aef8 <savePeople>
    c92e:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    c930:	|         movea.l 1c8f0 <currentFloor>,a0
    c936:	|         move.l 8(a0),d0
    c93a:	|  ,----- beq.s c978 <saveGame+0x3cc>
		FPutC (fp, 1);
    c93c:	|  |      move.l 232(sp),76(sp)
    c942:	|  |      moveq #1,d0
    c944:	|  |      move.l d0,72(sp)
    c948:	|  |      move.l 1c7e0 <DOSBase>,d0
    c94e:	|  |      movea.l d0,a6
    c950:	|  |      move.l 76(sp),d1
    c954:	|  |      move.l 72(sp),d2
    c958:	|  |      jsr -312(a6)
    c95c:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    c960:	|  |      movea.l 1c8f0 <currentFloor>,a0
    c966:	|  |      move.l (a0),d0
    c968:	|  |      move.l 232(sp),-(sp)
    c96c:	|  |      move.l d0,-(sp)
    c96e:	|  |      jsr 8d0 <put2bytes>
    c974:	|  |      addq.l #8,sp
    c976:	|  |  ,-- bra.s c99a <saveGame+0x3ee>
	} else FPutC (fp, 0);
    c978:	|  '--|-> move.l 232(sp),88(sp)
    c97e:	|     |   clr.l 84(sp)
    c982:	|     |   move.l 1c7e0 <DOSBase>,d0
    c988:	|     |   movea.l d0,a6
    c98a:	|     |   move.l 88(sp),d1
    c98e:	|     |   move.l 84(sp),d2
    c992:	|     |   jsr -312(a6)
    c996:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    c99a:	|     '-> move.l 232(sp),64(sp)
    c9a0:	|         move.l 1c8a2 <speechMode>,60(sp)
    c9a8:	|         move.l 1c7e0 <DOSBase>,d0
    c9ae:	|         movea.l d0,a6
    c9b0:	|         move.l 64(sp),d1
    c9b4:	|         move.l 60(sp),d2
    c9b8:	|         jsr -312(a6)
    c9bc:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    c9c0:	|         move.b 1c6a6 <fadeMode>,d0
    c9c6:	|         move.b d0,d0
    c9c8:	|         andi.l #255,d0
    c9ce:	|         move.l d0,52(sp)
    c9d2:	|         move.l 232(sp),48(sp)
    c9d8:	|         move.l 1c7e0 <DOSBase>,d0
    c9de:	|         movea.l d0,a6
    c9e0:	|         move.l 52(sp),d1
    c9e4:	|         move.l 48(sp),d2
    c9e8:	|         jsr -312(a6)
    c9ec:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    c9f0:	|         move.l 1c728 <speech>,d0
    c9f6:	|         move.l 232(sp),-(sp)
    c9fa:	|         move.l d0,-(sp)
    c9fc:	|         jsr 3fd4 <saveSpeech>
    ca02:	|         addq.l #8,sp
	saveStatusBars (fp);
    ca04:	|         move.l 232(sp),-(sp)
    ca08:	|         jsr 828c <saveStatusBars>
    ca0e:	|         addq.l #4,sp
	saveSounds (fp);
    ca10:	|         move.l 232(sp),-(sp)
    ca14:	|         jsr cfbe <saveSounds>
    ca1a:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    ca1c:	|         move.w 1c88c <saveEncoding>,d0
    ca22:	|         move.w d0,d0
    ca24:	|         andi.l #65535,d0
    ca2a:	|         move.l 232(sp),-(sp)
    ca2e:	|         move.l d0,-(sp)
    ca30:	|         jsr 8d0 <put2bytes>
    ca36:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    ca38:	|         move.l 1c87e <parallaxStuff>,d0
    ca3e:	|         move.l 232(sp),-(sp)
    ca42:	|         move.l d0,-(sp)
    ca44:	|         jsr d2b6 <saveParallaxRecursive>
    ca4a:	|         addq.l #8,sp
	FPutC (fp, 0);
    ca4c:	|         move.l 232(sp),40(sp)
    ca52:	|         clr.l 36(sp)
    ca56:	|         move.l 1c7e0 <DOSBase>,d0
    ca5c:	|         movea.l d0,a6
    ca5e:	|         move.l 40(sp),d1
    ca62:	|         move.l 36(sp),d2
    ca66:	|         jsr -312(a6)
    ca6a:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    ca6e:	|         move.l 232(sp),28(sp)
    ca74:	|         move.l 1c14c <languageNum>,24(sp)
    ca7c:	|         move.l 1c7e0 <DOSBase>,d0
    ca82:	|         movea.l d0,a6
    ca84:	|         move.l 28(sp),d1
    ca88:	|         move.l 24(sp),d2
    ca8c:	|         jsr -312(a6)
    ca90:	|         move.l d0,20(sp)

	Close(fp);
    ca94:	|         move.l 232(sp),16(sp)
    ca9a:	|         move.l 1c7e0 <DOSBase>,d0
    caa0:	|         movea.l d0,a6
    caa2:	|         move.l 16(sp),d1
    caa6:	|         jsr -36(a6)
    caaa:	|         move.l d0,12(sp)
	clearStackLib ();
    caae:	|         jsr c0aa <clearStackLib>
	return TRUE;
    cab4:	|         moveq #1,d0
}
    cab6:	'-------> movem.l (sp)+,d2-d3/a6
    caba:	          lea 248(sp),sp
    cabe:	          rts

0000cac0 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cac0:	       lea -12(sp),sp
	int elements = 0;
    cac4:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cac8:	       move.l 16(sp),(sp)
	while (search) {
    cacc:	   ,-- bra.s cad8 <saveStack+0x18>
		elements ++;
    cace:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    cad2:	|  |   movea.l (sp),a0
    cad4:	|  |   move.l 8(a0),(sp)
	while (search) {
    cad8:	|  '-> tst.l (sp)
    cada:	'----- bne.s cace <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cadc:	       move.l 20(sp),-(sp)
    cae0:	       move.l 12(sp),-(sp)
    cae4:	       jsr 8d0 <put2bytes>
    caea:	       addq.l #8,sp
	search = vs;
    caec:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    caf0:	       clr.l 4(sp)
    caf4:	   ,-- bra.s cb10 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    caf6:	,--|-> move.l (sp),d0
    caf8:	|  |   move.l 20(sp),-(sp)
    cafc:	|  |   move.l d0,-(sp)
    cafe:	|  |   jsr cc4c <saveVariable>
    cb04:	|  |   addq.l #8,sp
		search = search -> next;
    cb06:	|  |   movea.l (sp),a0
    cb08:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cb0c:	|  |   addq.l #1,4(sp)
    cb10:	|  '-> move.l 4(sp),d0
    cb14:	|      cmp.l 8(sp),d0
    cb18:	'----- blt.s caf6 <saveStack+0x36>
	}
}
    cb1a:	       nop
    cb1c:	       nop
    cb1e:	       lea 12(sp),sp
    cb22:	       rts

0000cb24 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cb24:	             lea -44(sp),sp
    cb28:	             move.l a6,-(sp)
    cb2a:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cb2c:	             move.l 1c864 <stackLib>,48(sp)
	int a = 0;
    cb34:	             clr.l 44(sp)
	while (s) {
    cb38:	      ,----- bra.s cb96 <saveStackRef+0x72>
		if (s -> stack == vs) {
    cb3a:	   ,--|----> movea.l 48(sp),a0
    cb3e:	   |  |      move.l (a0),d0
    cb40:	   |  |      cmp.l 56(sp),d0
    cb44:	   |  |  ,-- bne.s cb88 <saveStackRef+0x64>
			FPutC (fp, 1);
    cb46:	   |  |  |   move.l 60(sp),16(sp)
    cb4c:	   |  |  |   moveq #1,d0
    cb4e:	   |  |  |   move.l d0,12(sp)
    cb52:	   |  |  |   move.l 1c7e0 <DOSBase>,d0
    cb58:	   |  |  |   movea.l d0,a6
    cb5a:	   |  |  |   move.l 16(sp),d1
    cb5e:	   |  |  |   move.l 12(sp),d2
    cb62:	   |  |  |   jsr -312(a6)
    cb66:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cb6a:	   |  |  |   move.l 1c860 <stackLibTotal>,d0
    cb70:	   |  |  |   sub.l 44(sp),d0
    cb74:	   |  |  |   move.l 60(sp),-(sp)
    cb78:	   |  |  |   move.l d0,-(sp)
    cb7a:	   |  |  |   jsr 8d0 <put2bytes>
    cb80:	   |  |  |   addq.l #8,sp
			return TRUE;
    cb82:	   |  |  |   moveq #1,d0
    cb84:	,--|--|--|-- bra.w cc42 <saveStackRef+0x11e>
		}
		s = s -> next;
    cb88:	|  |  |  '-> movea.l 48(sp),a0
    cb8c:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cb92:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cb96:	|  |  '----> tst.l 48(sp)
    cb9a:	|  '-------- bne.s cb3a <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cb9c:	|            move.l 60(sp),40(sp)
    cba2:	|            clr.l 36(sp)
    cba6:	|            move.l 1c7e0 <DOSBase>,d0
    cbac:	|            movea.l d0,a6
    cbae:	|            move.l 40(sp),d1
    cbb2:	|            move.l 36(sp),d2
    cbb6:	|            jsr -312(a6)
    cbba:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cbbe:	|            movea.l 56(sp),a0
    cbc2:	|            move.l (a0),d0
    cbc4:	|            move.l 60(sp),-(sp)
    cbc8:	|            move.l d0,-(sp)
    cbca:	|            jsr cac0 <saveStack>
    cbd0:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cbd2:	|            moveq #8,d0
    cbd4:	|            move.l d0,28(sp)
    cbd8:	|            clr.l 24(sp)
    cbdc:	|            move.l 1c7d8 <SysBase>,d0
    cbe2:	|            movea.l d0,a6
    cbe4:	|            move.l 28(sp),d0
    cbe8:	|            move.l 24(sp),d1
    cbec:	|            jsr -684(a6)
    cbf0:	|            move.l d0,20(sp)
    cbf4:	|            move.l 20(sp),d0
    cbf8:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cbfc:	|            move.l 1c860 <stackLibTotal>,d0
    cc02:	|            addq.l #1,d0
    cc04:	|            move.l d0,1c860 <stackLibTotal>
	if (! s) {
    cc0a:	|            tst.l 48(sp)
    cc0e:	|        ,-- bne.s cc22 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cc10:	|        |   pea 19285 <PutChar+0x170f>
    cc16:	|        |   jsr 170d4 <KPrintF>
    cc1c:	|        |   addq.l #4,sp
		return FALSE;
    cc1e:	|        |   clr.w d0
    cc20:	+--------|-- bra.s cc42 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cc22:	|        '-> move.l 1c864 <stackLib>,d0
    cc28:	|            movea.l 48(sp),a0
    cc2c:	|            move.l d0,4(a0)
	s -> stack = vs;
    cc30:	|            movea.l 48(sp),a0
    cc34:	|            move.l 56(sp),(a0)
	stackLib = s;
    cc38:	|            move.l 48(sp),1c864 <stackLib>
	return TRUE;
    cc40:	|            moveq #1,d0
}
    cc42:	'----------> move.l (sp)+,d2
    cc44:	             movea.l (sp)+,a6
    cc46:	             lea 44(sp),sp
    cc4a:	             rts

0000cc4c <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cc4c:	          lea -12(sp),sp
    cc50:	          move.l a6,-(sp)
    cc52:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cc54:	          move.l 28(sp),16(sp)
    cc5a:	          movea.l 24(sp),a0
    cc5e:	          move.l (a0),d0
    cc60:	          move.l d0,12(sp)
    cc64:	          move.l 1c7e0 <DOSBase>,d0
    cc6a:	          movea.l d0,a6
    cc6c:	          move.l 16(sp),d1
    cc70:	          move.l 12(sp),d2
    cc74:	          jsr -312(a6)
    cc78:	          move.l d0,8(sp)
	switch (from -> varType) {
    cc7c:	          movea.l 24(sp),a0
    cc80:	          move.l (a0),d0
    cc82:	          moveq #9,d1
    cc84:	          cmp.l d0,d1
    cc86:	      ,-- bcs.w cd36 <saveVariable+0xea>
    cc8a:	      |   add.l d0,d0
    cc8c:	      |   movea.l d0,a0
    cc8e:	      |   adda.l #52378,a0
    cc94:	      |   move.w (a0),d0
    cc96:	      |   jmp (cc9a <saveVariable+0x4e>,pc,d0.w)
    cc9a:	      |   ori.l #1310740,(a0)+
    cca0:	      |   ori.b #20,(20,a0,d0.w)
    cca6:	      |   .short 0x004c
    cca8:	      |   ori.b #126,(a4)
    ccac:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    ccb0:	      |   ori.b #40,(a0)+
    ccb4:	      |   ori.b #47,d4
    ccb8:	      |   ori.b #0,(a4)+
    ccbc:	      |   jsr 958 <put4bytes>
    ccc2:	      |   addq.l #8,sp
		return TRUE;
    ccc4:	      |   moveq #1,d0
    ccc6:	,-----|-- bra.w cd72 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    ccca:	|     |   movea.l 24(sp),a0
    ccce:	|     |   move.l 4(a0),d0
    ccd2:	|     |   move.l 28(sp),-(sp)
    ccd6:	|     |   move.l d0,-(sp)
    ccd8:	|     |   jsr bd8 <writeString>
    ccde:	|     |   addq.l #8,sp
		return TRUE;
    cce0:	|     |   moveq #1,d0
    cce2:	+-----|-- bra.w cd72 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    cce6:	|     |   movea.l 24(sp),a0
    ccea:	|     |   move.l 4(a0),d0
    ccee:	|     |   move.l 28(sp),-(sp)
    ccf2:	|     |   move.l d0,-(sp)
    ccf4:	|     |   jsr cb24 <saveStackRef>
    ccfa:	|     |   addq.l #8,sp
    ccfc:	+-----|-- bra.s cd72 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    ccfe:	|     |   movea.l 24(sp),a0
    cd02:	|     |   move.l 4(a0),d0
    cd06:	|     |   move.l 28(sp),-(sp)
    cd0a:	|     |   move.l d0,-(sp)
    cd0c:	|     |   jsr ae9a <saveCostume>
    cd12:	|     |   addq.l #8,sp
		return FALSE;
    cd14:	|     |   clr.w d0
    cd16:	+-----|-- bra.s cd72 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cd18:	|     |   movea.l 24(sp),a0
    cd1c:	|     |   move.l 4(a0),d0
    cd20:	|     |   move.l 28(sp),-(sp)
    cd24:	|     |   move.l d0,-(sp)
    cd26:	|     |   jsr add0 <saveAnim>
    cd2c:	|     |   addq.l #8,sp
		return FALSE;
    cd2e:	|     |   clr.w d0
    cd30:	+-----|-- bra.s cd72 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cd32:	|     |   clr.w d0
    cd34:	+-----|-- bra.s cd72 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cd36:	|     '-> movea.l 24(sp),a0
    cd3a:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cd3c:	|         moveq #10,d1
    cd3e:	|         cmp.l d0,d1
    cd40:	|  ,----- bcs.s cd5a <saveVariable+0x10e>
						typeName[from->varType] :
    cd42:	|  |      movea.l 24(sp),a0
    cd46:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cd48:	|  |      add.l d0,d0
    cd4a:	|  |      movea.l d0,a1
    cd4c:	|  |      adda.l d0,a1
    cd4e:	|  |      lea 1c6a8 <typeName>,a0
    cd54:	|  |      move.l (0,a1,a0.l),d0
    cd58:	|  |  ,-- bra.s cd60 <saveVariable+0x114>
    cd5a:	|  '--|-> move.l #103082,d0
    cd60:	|     '-> move.l d0,-(sp)
    cd62:	|         pea 192b1 <PutChar+0x173b>
    cd68:	|         jsr 170d4 <KPrintF>
    cd6e:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    cd70:	|         moveq #1,d0
    cd72:	'-------> move.l (sp)+,d2
    cd74:	          movea.l (sp)+,a6
    cd76:	          lea 12(sp),sp
    cd7a:	          rts

0000cd7c <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    cd7c:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    cd80:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    cd88:	          movea.l 4(sp),a0
    cd8c:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    cd92:	          movea.l 4(sp),a0
    cd96:	          move.w 10(a0),d0
    cd9a:	          lsr.w #8,d0
    cd9c:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    cda0:	          movea.l 4(sp),a0
    cda4:	          move.w 10(a0),d0
    cda8:	          move.b d0,(sp)

    if(counterx_new)
    cdaa:	,-------- beq.w ce50 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    cdae:	|         clr.w d1
    cdb0:	|         move.b (sp),d1
    cdb2:	|         move.w 1c86c <counterx_old>,d0
    cdb8:	|         sub.w d0,d1
    cdba:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    cdbe:	|         cmpi.w #128,10(sp)
    cdc4:	|     ,-- blt.s cddc <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    cdc6:	|     |   move.w #1,1c78e <input+0x4>
            counterx_diff -= 256;    
    cdce:	|     |   move.w 10(sp),d0
    cdd2:	|     |   addi.w #-256,d0
    cdd6:	|     |   move.w d0,10(sp)
    cdda:	|  ,--|-- bra.s ce08 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    cddc:	|  |  '-> cmpi.w #-129,10(sp)
    cde2:	|  |  ,-- bgt.s cdfa <CsiCheckInput+0x7e>
            counterx_diff += 256;
    cde4:	|  |  |   move.w 10(sp),d0
    cde8:	|  |  |   addi.w #256,d0
    cdec:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    cdf0:	|  |  |   move.w #1,1c78e <input+0x4>
    cdf8:	|  +--|-- bra.s ce08 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    cdfa:	|  |  '-> tst.w 10(sp)
    cdfe:	|  +----- beq.s ce08 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    ce00:	|  |      move.w #1,1c78e <input+0x4>
        }

        input.mouseX += counterx_diff;
    ce08:	|  '----> move.l 1c794 <input+0xa>,d0
    ce0e:	|         movea.w 10(sp),a0
    ce12:	|         add.l a0,d0
    ce14:	|         move.l d0,1c794 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    ce1a:	|         move.l 1c794 <input+0xa>,d1
    ce20:	|         move.l 1c72c <winWidth>,d0
    ce26:	|         cmp.l d1,d0
    ce28:	|     ,-- bge.s ce38 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    ce2a:	|     |   move.l 1c72c <winWidth>,d0
    ce30:	|     |   move.l d0,1c794 <input+0xa>
    ce36:	|  ,--|-- bra.s ce46 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    ce38:	|  |  '-> move.l 1c794 <input+0xa>,d0
    ce3e:	|  +----- bpl.s ce46 <CsiCheckInput+0xca>
            input.mouseX = 0;
    ce40:	|  |      clr.l 1c794 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    ce46:	|  '----> clr.w d0
    ce48:	|         move.b (sp),d0
    ce4a:	|         move.w d0,1c86c <counterx_old>
    }    

    if(countery_new)
    ce50:	'-------> tst.b 1(sp)
    ce54:	,-------- beq.w cefe <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    ce58:	|         clr.w d1
    ce5a:	|         move.b 1(sp),d1
    ce5e:	|         move.w 1c86e <countery_old>,d0
    ce64:	|         sub.w d0,d1
    ce66:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    ce6a:	|         cmpi.w #128,8(sp)
    ce70:	|     ,-- blt.s ce88 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    ce72:	|     |   move.w #1,1c78e <input+0x4>
            countery_diff -= 256;    
    ce7a:	|     |   move.w 8(sp),d0
    ce7e:	|     |   addi.w #-256,d0
    ce82:	|     |   move.w d0,8(sp)
    ce86:	|  ,--|-- bra.s ceb4 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    ce88:	|  |  '-> cmpi.w #-129,8(sp)
    ce8e:	|  |  ,-- bgt.s cea6 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    ce90:	|  |  |   move.w #1,1c78e <input+0x4>
            countery_diff += 256;
    ce98:	|  |  |   move.w 8(sp),d0
    ce9c:	|  |  |   addi.w #256,d0
    cea0:	|  |  |   move.w d0,8(sp)
    cea4:	|  +--|-- bra.s ceb4 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    cea6:	|  |  '-> tst.w 8(sp)
    ceaa:	|  +----- beq.s ceb4 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    ceac:	|  |      move.w #1,1c78e <input+0x4>
        }

        input.mouseY += countery_diff;
    ceb4:	|  '----> move.l 1c798 <input+0xe>,d0
    ceba:	|         movea.w 8(sp),a0
    cebe:	|         add.l a0,d0
    cec0:	|         move.l d0,1c798 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    cec6:	|         move.l 1c798 <input+0xe>,d1
    cecc:	|         move.l 1c730 <winHeight>,d0
    ced2:	|         cmp.l d1,d0
    ced4:	|     ,-- bge.s cee4 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    ced6:	|     |   move.l 1c730 <winHeight>,d0
    cedc:	|     |   move.l d0,1c798 <input+0xe>
    cee2:	|  ,--|-- bra.s cef2 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    cee4:	|  |  '-> move.l 1c798 <input+0xe>,d0
    ceea:	|  +----- bpl.s cef2 <CsiCheckInput+0x176>
            input.mouseY = 0;
    ceec:	|  |      clr.l 1c798 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    cef2:	|  '----> clr.w d0
    cef4:	|         move.b 1(sp),d0
    cef8:	|         move.w d0,1c86e <countery_old>
    } 

    input.leftRelease = FALSE;
    cefe:	'-------> clr.w 1c790 <input+0x6>
    input.rightRelease = FALSE;
    cf04:	          clr.w 1c792 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    cf0a:	          move.w 1c78a <input>,d0
    cf10:	      ,-- beq.s cf36 <CsiCheckInput+0x1ba>
    cf12:	      |   movea.l #12574721,a0
    cf18:	      |   move.b (a0),d0
    cf1a:	      |   move.b d0,d0
    cf1c:	      |   andi.l #255,d0
    cf22:	      |   moveq #64,d1
    cf24:	      |   and.l d1,d0
    cf26:	      +-- beq.s cf36 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    cf28:	      |   clr.w 1c78a <input>
        input.leftRelease = TRUE;
    cf2e:	      |   move.w #1,1c790 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    cf36:	      '-> move.w 1c78c <input+0x2>,d0
    cf3c:	      ,-- beq.s cf64 <CsiCheckInput+0x1e8>
    cf3e:	      |   movea.l #14675990,a0
    cf44:	      |   move.w (a0),d0
    cf46:	      |   move.w d0,d0
    cf48:	      |   andi.l #65535,d0
    cf4e:	      |   andi.l #1024,d0
    cf54:	      +-- beq.s cf64 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    cf56:	      |   clr.w 1c78c <input+0x2>
        input.rightRelease = TRUE;
    cf5c:	      |   move.w #1,1c792 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    cf64:	      '-> movea.l #12574721,a0
    cf6a:	          move.b (a0),d0
    cf6c:	          move.b d0,d0
    cf6e:	          andi.l #255,d0
    cf74:	          moveq #64,d1
    cf76:	          and.l d1,d0
    cf78:	      ,-- bne.s cf82 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    cf7a:	      |   move.w #1,1c78a <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    cf82:	      '-> movea.l #14675990,a0
    cf88:	          move.w (a0),d0
    cf8a:	          move.w d0,d0
    cf8c:	          andi.l #65535,d0
    cf92:	          andi.l #1024,d0
    cf98:	      ,-- bne.s cfa2 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    cf9a:	      |   move.w #1,1c78c <input+0x2>
    }

    cfa2:	      '-> nop
    cfa4:	          lea 12(sp),sp
    cfa8:	          rts

0000cfaa <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    cfaa:	moveq #0,d0
}
    cfac:	rts

0000cfae <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    cfae:	nop
    cfb0:	rts

0000cfb2 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    cfb2:	nop
    cfb4:	rts

0000cfb6 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    cfb6:	moveq #1,d0
}
    cfb8:	rts

0000cfba <playSoundList>:

void playSoundList(struct soundList *s) {
}
    cfba:	nop
    cfbc:	rts

0000cfbe <saveSounds>:

void saveSounds (BPTR fp) {
    cfbe:	lea -12(sp),sp
    cfc2:	move.l a6,-(sp)
    cfc4:	move.l d2,-(sp)
	FPutC (fp,0);
    cfc6:	move.l 24(sp),16(sp)
    cfcc:	clr.l 12(sp)
    cfd0:	move.l 1c7e0 <DOSBase>,d0
    cfd6:	movea.l d0,a6
    cfd8:	move.l 16(sp),d1
    cfdc:	move.l 12(sp),d2
    cfe0:	jsr -312(a6)
    cfe4:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    cfe8:	move.l 1c166 <defSoundVol>,d0
    cfee:	move.l 24(sp),-(sp)
    cff2:	move.l d0,-(sp)
    cff4:	jsr 8d0 <put2bytes>
    cffa:	addq.l #8,sp
	put2bytes (defVol, fp);
    cffc:	move.l 1c162 <defVol>,d0
    d002:	move.l 24(sp),-(sp)
    d006:	move.l d0,-(sp)
    d008:	jsr 8d0 <put2bytes>
    d00e:	addq.l #8,sp
}
    d010:	nop
    d012:	move.l (sp)+,d2
    d014:	movea.l (sp)+,a6
    d016:	lea 12(sp),sp
    d01a:	rts

0000d01c <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d01c:	move.l 4(sp),1c162 <defVol>
}
    d024:	nop
    d026:	rts

0000d028 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d028:	move.l 4(sp),1c166 <defSoundVol>
}
    d030:	nop
    d032:	rts

0000d034 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d034:	nop
    d036:	rts

0000d038 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d038:	nop
    d03a:	rts

0000d03c <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d03c:	nop
    d03e:	rts

0000d040 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d040:	subq.l #4,sp
    d042:	move.l 12(sp),d0
    d046:	move.w d0,d0
    d048:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d04c:	moveq #1,d0
}
    d04e:	addq.l #4,sp
    d050:	rts

0000d052 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d052:	nop
    d054:	rts

0000d056 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d056:	move.l 16(sp),-(sp)
    d05a:	move.l 16(sp),-(sp)
    d05e:	jsr e0e <CstBlankScreen>
    d064:	addq.l #8,sp
}
    d066:	nop
    d068:	rts

0000d06a <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d06a:	pea 192d4 <PutChar+0x175e>
    d070:	jsr 170d4 <KPrintF>
    d076:	addq.l #4,sp
}
    d078:	nop
    d07a:	rts

0000d07c <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d07c:	movea.l 8(sp),a1
    d080:	movea.l 12(sp),a0
    d084:	move.l 8(sp),d1
    d088:	move.l 4(sp),d0
    d08c:	move.l a1,-(sp)
    d08e:	move.l a0,-(sp)
    d090:	move.l d1,-(sp)
    d092:	move.l d0,-(sp)
    d094:	jsr 46ce <drawLine>
    d09a:	lea 16(sp),sp
}
    d09e:	nop
    d0a0:	rts

0000d0a2 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d0a2:	movea.l 12(sp),a1
    d0a6:	movea.l 4(sp),a0
    d0aa:	move.l 8(sp),d1
    d0ae:	move.l 4(sp),d0
    d0b2:	move.l a1,-(sp)
    d0b4:	move.l a0,-(sp)
    d0b6:	move.l d1,-(sp)
    d0b8:	move.l d0,-(sp)
    d0ba:	jsr 46ce <drawLine>
    d0c0:	lea 16(sp),sp
}
    d0c4:	nop
    d0c6:	rts

0000d0c8 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d0c8:	pea 1930d <PutChar+0x1797>
    d0ce:	jsr 170d4 <KPrintF>
    d0d4:	addq.l #4,sp
}
    d0d6:	nop
    d0d8:	rts

0000d0da <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d0da:	jsr 1b06 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d0e0:	pea 1c878 <backdropTextureName>
    d0e6:	pea 1 <_start+0x1>
    d0ea:	jsr 4850 <deleteTextures>
    d0f0:	addq.l #8,sp
	backdropTextureName = 0;
    d0f2:	clr.l 1c878 <backdropTextureName>
	backdropExists = FALSE;
    d0f8:	clr.w 1c87c <backdropExists>
}
    d0fe:	nop
    d100:	rts

0000d102 <killParallax>:

void killParallax () {
    d102:	          lea -12(sp),sp
    d106:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d108:	   ,----- bra.s d174 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d10a:	,--|----> move.l 1c87e <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d112:	|  |      movea.l 12(sp),a0
    d116:	|  |      move.l 42(a0),d0
    d11a:	|  |      move.l d0,1c87e <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d120:	|  |      move.l 12(sp),d0
    d124:	|  |      addq.l #4,d0
    d126:	|  |      move.l d0,-(sp)
    d128:	|  |      pea 1 <_start+0x1>
    d12c:	|  |      jsr 4850 <deleteTextures>
    d132:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d134:	|  |      movea.l 12(sp),a0
    d138:	|  |      move.l (a0),d0
    d13a:	|  |  ,-- beq.s d154 <killParallax+0x52>
    d13c:	|  |  |   movea.l 12(sp),a0
    d140:	|  |  |   move.l (a0),8(sp)
    d144:	|  |  |   move.l 1c7d8 <SysBase>,d0
    d14a:	|  |  |   movea.l d0,a6
    d14c:	|  |  |   movea.l 8(sp),a1
    d150:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d154:	|  |  '-> tst.l 12(sp)
    d158:	|  |  ,-- beq.s d170 <killParallax+0x6e>
    d15a:	|  |  |   move.l 12(sp),4(sp)
    d160:	|  |  |   move.l 1c7d8 <SysBase>,d0
    d166:	|  |  |   movea.l d0,a6
    d168:	|  |  |   movea.l 4(sp),a1
    d16c:	|  |  |   jsr -690(a6)
		k = NULL;
    d170:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d174:	|  '----> move.l 1c87e <parallaxStuff>,d0
    d17a:	'-------- bne.s d10a <killParallax+0x8>
	}
}
    d17c:	          nop
    d17e:	          nop
    d180:	          movea.l (sp)+,a6
    d182:	          lea 12(sp),sp
    d186:	          rts

0000d188 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d188:	       move.l 4(sp),-(sp)
    d18c:	       jsr 75e2 <openFileFromNum>
    d192:	       addq.l #4,sp
    d194:	       tst.l d0
    d196:	   ,-- bne.s d1a8 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d198:	   |   pea 1932e <PutChar+0x17b8>
    d19e:	   |   jsr 170d4 <KPrintF>
    d1a4:	   |   addq.l #4,sp
		return;
    d1a6:	,--|-- bra.s d1c8 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d1a8:	|  '-> move.l 1c7c0 <bigDataFile>,d0
    d1ae:	|      move.l 12(sp),-(sp)
    d1b2:	|      move.l 12(sp),-(sp)
    d1b6:	|      move.l d0,-(sp)
    d1b8:	|      jsr 1db4 <CstLoadBackdrop>
    d1be:	|      lea 12(sp),sp
	finishAccess ();
    d1c2:	|      jsr 74da <finishAccess>
	
}
    d1c8:	'----> rts

0000d1ca <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d1ca:	subq.l #8,sp
    d1cc:	movea.l 12(sp),a0
    d1d0:	move.l 16(sp),d1
    d1d4:	move.l 20(sp),d0
    d1d8:	movea.w a0,a0
    d1da:	move.w a0,6(sp)
    d1de:	move.w d1,d1
    d1e0:	move.w d1,4(sp)
    d1e4:	move.w d0,d0
    d1e6:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d1ea:	pea 1937d <PutChar+0x1807>
    d1f0:	jsr 170d4 <KPrintF>
    d1f6:	addq.l #4,sp

}
    d1f8:	nop
    d1fa:	addq.l #8,sp
    d1fc:	rts

0000d1fe <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d1fe:	pea 193a0 <PutChar+0x182a>
    d204:	jsr 170d4 <KPrintF>
    d20a:	addq.l #4,sp
}
    d20c:	nop
    d20e:	rts

0000d210 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d210:	pea 1c882 <snapshotTextureName>
    d216:	pea 1 <_start+0x1>
    d21a:	jsr 4850 <deleteTextures>
    d220:	addq.l #8,sp
	snapshotTextureName = 0;
    d222:	clr.l 1c882 <snapshotTextureName>
}
    d228:	nop
    d22a:	rts

0000d22c <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d22c:	clr.l 1c88e <cameraX>
	cameraY = 0;
    d232:	clr.l 1c892 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d238:	move.l 1c874 <sceneHeight>,d0
    d23e:	move.l d0,d1
    d240:	move.l 1c870 <sceneWidth>,d0
    d246:	move.l d1,-(sp)
    d248:	move.l d0,-(sp)
    d24a:	jsr 36d4 <CstReserveBackdrop>
    d250:	addq.l #8,sp
}
    d252:	rts

0000d254 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d254:	jsr d0da <killBackDrop>
	killParallax ();
    d25a:	jsr d102 <killParallax>
	killZBuffer ();
    d260:	jsr 84f8 <killZBuffer>
	sceneWidth = x;
    d266:	move.l 4(sp),d0
    d26a:	move.l d0,1c870 <sceneWidth>
	sceneHeight = y;
    d270:	move.l 8(sp),d0
    d274:	move.l d0,1c874 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d27a:	pea 193d9 <PutChar+0x1863>
    d280:	jsr 170d4 <KPrintF>
    d286:	addq.l #4,sp
	return reserveBackdrop();
    d288:	jsr d22c <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d28e:	rts

0000d290 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d290:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d292:	move.l 12(sp),-(sp)
    d296:	jsr 6bc <get2bytes>
    d29c:	addq.l #4,sp
    d29e:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d2a2:	move.l 12(sp),-(sp)
    d2a6:	jsr 6bc <get2bytes>
    d2ac:	addq.l #4,sp
    d2ae:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d2b0:	moveq #1,d0
}
    d2b2:	addq.l #8,sp
    d2b4:	rts

0000d2b6 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d2b6:	   ,-> lea -12(sp),sp
    d2ba:	   |   move.l a6,-(sp)
    d2bc:	   |   move.l d2,-(sp)
	if (me) {
    d2be:	   |   tst.l 24(sp)
    d2c2:	,--|-- beq.w d358 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d2c6:	|  |   movea.l 24(sp),a0
    d2ca:	|  |   move.l 42(a0),d0
    d2ce:	|  |   move.l 28(sp),-(sp)
    d2d2:	|  |   move.l d0,-(sp)
    d2d4:	|  '-- jsr d2b6 <saveParallaxRecursive>(pc)
    d2d8:	|      addq.l #8,sp
		FPutC (fp, 1);
    d2da:	|      move.l 28(sp),16(sp)
    d2e0:	|      moveq #1,d0
    d2e2:	|      move.l d0,12(sp)
    d2e6:	|      move.l 1c7e0 <DOSBase>,d0
    d2ec:	|      movea.l d0,a6
    d2ee:	|      move.l 16(sp),d1
    d2f2:	|      move.l 12(sp),d2
    d2f6:	|      jsr -312(a6)
    d2fa:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d2fe:	|      movea.l 24(sp),a0
    d302:	|      move.w 28(a0),d0
    d306:	|      move.w d0,d0
    d308:	|      andi.l #65535,d0
    d30e:	|      move.l 28(sp),-(sp)
    d312:	|      move.l d0,-(sp)
    d314:	|      jsr 8d0 <put2bytes>
    d31a:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d31c:	|      movea.l 24(sp),a0
    d320:	|      move.w 30(a0),d0
    d324:	|      move.w d0,d0
    d326:	|      andi.l #65535,d0
    d32c:	|      move.l 28(sp),-(sp)
    d330:	|      move.l d0,-(sp)
    d332:	|      jsr 8d0 <put2bytes>
    d338:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d33a:	|      movea.l 24(sp),a0
    d33e:	|      move.w 32(a0),d0
    d342:	|      move.w d0,d0
    d344:	|      andi.l #65535,d0
    d34a:	|      move.l 28(sp),-(sp)
    d34e:	|      move.l d0,-(sp)
    d350:	|      jsr 8d0 <put2bytes>
    d356:	|      addq.l #8,sp
	}
}
    d358:	'----> nop
    d35a:	       move.l (sp)+,d2
    d35c:	       movea.l (sp)+,a6
    d35e:	       lea 12(sp),sp
    d362:	       rts

0000d364 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d364:	pea 19400 <PutChar+0x188a>
    d36a:	jsr 170d4 <KPrintF>
    d370:	addq.l #4,sp
	return TRUE;
    d372:	moveq #1,d0
    d374:	rts

0000d376 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d376:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d378:	             move.l 1c886 <allObjectTypes>,(sp)

	while (huntType) {
    d37e:	      ,----- bra.s d396 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d380:	   ,--|----> movea.l (sp),a0
    d382:	   |  |      move.l 4(a0),d0
    d386:	   |  |      cmp.l 8(sp),d0
    d38a:	   |  |  ,-- bne.s d390 <findObjectType+0x1a>
    d38c:	   |  |  |   move.l (sp),d0
    d38e:	,--|--|--|-- bra.s d3a6 <findObjectType+0x30>
		huntType = huntType -> next;
    d390:	|  |  |  '-> movea.l (sp),a0
    d392:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d396:	|  |  '----> tst.l (sp)
    d398:	|  '-------- bne.s d380 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d39a:	|            move.l 8(sp),-(sp)
    d39e:	|            jsr d466 <loadObjectType>
    d3a4:	|            addq.l #4,sp
}
    d3a6:	'----------> addq.l #4,sp
    d3a8:	             rts

0000d3aa <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d3aa:	             lea -12(sp),sp
	int i, num = 0;
    d3ae:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d3b2:	             move.l 20(sp),-(sp)
    d3b6:	             jsr d376 <findObjectType>
    d3bc:	             addq.l #4,sp
    d3be:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d3c0:	             clr.l 8(sp)
    d3c4:	   ,-------- bra.s d3fa <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d3c6:	,--|-------> movea.l (sp),a0
    d3c8:	|  |         move.l 38(a0),d1
    d3cc:	|  |         move.l 8(sp),d0
    d3d0:	|  |         lsl.l #3,d0
    d3d2:	|  |         movea.l d1,a0
    d3d4:	|  |         adda.l d0,a0
    d3d6:	|  |         move.l (a0),d0
    d3d8:	|  |         cmp.l 16(sp),d0
    d3dc:	|  |  ,----- bne.s d3f6 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d3de:	|  |  |      movea.l (sp),a0
    d3e0:	|  |  |      move.l 38(a0),d1
    d3e4:	|  |  |      move.l 8(sp),d0
    d3e8:	|  |  |      lsl.l #3,d0
    d3ea:	|  |  |      movea.l d1,a0
    d3ec:	|  |  |      adda.l d0,a0
    d3ee:	|  |  |      move.l 4(a0),4(sp)
			break;
    d3f4:	|  |  |  ,-- bra.s d406 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d3f6:	|  |  '--|-> addq.l #1,8(sp)
    d3fa:	|  '-----|-> movea.l (sp),a0
    d3fc:	|        |   move.l 16(a0),d0
    d400:	|        |   cmp.l 8(sp),d0
    d404:	'--------|-- bgt.s d3c6 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d406:	         '-> move.l 4(sp),d0
}
    d40a:	             lea 12(sp),sp
    d40e:	             rts

0000d410 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d410:	moveq #1,d0
}
    d412:	rts

0000d414 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d414:	subq.l #8,sp
    d416:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d418:	move.l 16(sp),-(sp)
    d41c:	jsr 6bc <get2bytes>
    d422:	addq.l #4,sp
    d424:	move.l d0,-(sp)
    d426:	jsr d466 <loadObjectType>
    d42c:	addq.l #4,sp
    d42e:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d432:	movea.l 8(sp),a0
    d436:	move.l (a0),4(sp)
    d43a:	move.l 1c7d8 <SysBase>,d0
    d440:	movea.l d0,a6
    d442:	movea.l 4(sp),a1
    d446:	jsr -690(a6)
	r -> screenName = readString (fp);
    d44a:	move.l 16(sp),-(sp)
    d44e:	jsr b02 <readString>
    d454:	addq.l #4,sp
    d456:	movea.l 8(sp),a0
    d45a:	move.l d0,(a0)
	return r;
    d45c:	move.l 8(sp),d0
}
    d460:	movea.l (sp)+,a6
    d462:	addq.l #8,sp
    d464:	rts

0000d466 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d466:	          lea -84(sp),sp
    d46a:	          move.l a6,-(sp)
    d46c:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d46e:	          moveq #42,d0
    d470:	          move.l d0,84(sp)
    d474:	          clr.l 80(sp)
    d478:	          move.l 1c7d8 <SysBase>,d0
    d47e:	          movea.l d0,a6
    d480:	          move.l 84(sp),d0
    d484:	          move.l 80(sp),d1
    d488:	          jsr -684(a6)
    d48c:	          move.l d0,76(sp)
    d490:	          move.l 76(sp),d0
    d494:	          move.l d0,72(sp)

    if (newType) {
    d498:	,-------- beq.w d712 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d49c:	|         move.l 96(sp),-(sp)
    d4a0:	|         jsr 76aa <openObjectSlice>
    d4a6:	|         addq.l #4,sp
    d4a8:	|         tst.w d0
    d4aa:	+-------- beq.w d712 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d4ae:	|         move.l 1c7c0 <bigDataFile>,d0
    d4b4:	|         move.l d0,-(sp)
    d4b6:	|         jsr 6bc <get2bytes>
    d4bc:	|         addq.l #4,sp
    d4be:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d4c2:	|         move.l 1c7c0 <bigDataFile>,64(sp)
    d4ca:	|         move.l 1c7e0 <DOSBase>,d0
    d4d0:	|         movea.l d0,a6
    d4d2:	|         move.l 64(sp),d1
    d4d6:	|         jsr -306(a6)
    d4da:	|         move.l d0,60(sp)
    d4de:	|         move.l 60(sp),d0
    d4e2:	|         move.l d0,d0
    d4e4:	|         movea.l 72(sp),a0
    d4e8:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d4ec:	|         move.l 1c7c0 <bigDataFile>,56(sp)
    d4f4:	|         move.l 1c7e0 <DOSBase>,d0
    d4fa:	|         movea.l d0,a6
    d4fc:	|         move.l 56(sp),d1
    d500:	|         jsr -306(a6)
    d504:	|         move.l d0,52(sp)
    d508:	|         move.l 52(sp),d0
    d50c:	|         move.l d0,d0
    d50e:	|         movea.l 72(sp),a0
    d512:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d516:	|         move.l 1c7c0 <bigDataFile>,48(sp)
    d51e:	|         move.l 1c7e0 <DOSBase>,d0
    d524:	|         movea.l d0,a6
    d526:	|         move.l 48(sp),d1
    d52a:	|         jsr -306(a6)
    d52e:	|         move.l d0,44(sp)
    d532:	|         move.l 44(sp),d0
    d536:	|         move.l d0,d0
    d538:	|         movea.l 72(sp),a0
    d53c:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d540:	|         move.l 1c7c0 <bigDataFile>,40(sp)
    d548:	|         move.l 1c7e0 <DOSBase>,d0
    d54e:	|         movea.l d0,a6
    d550:	|         move.l 40(sp),d1
    d554:	|         jsr -306(a6)
    d558:	|         move.l d0,36(sp)
    d55c:	|         move.l 36(sp),d0
    d560:	|         movea.l 72(sp),a0
    d564:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d568:	|         move.l 1c7c0 <bigDataFile>,32(sp)
    d570:	|         move.l 1c7e0 <DOSBase>,d0
    d576:	|         movea.l d0,a6
    d578:	|         move.l 32(sp),d1
    d57c:	|         jsr -306(a6)
    d580:	|         move.l d0,28(sp)
    d584:	|         move.l 28(sp),d0
    d588:	|         movea.l 72(sp),a0
    d58c:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d590:	|         move.l 1c7c0 <bigDataFile>,d0
    d596:	|         move.l d0,-(sp)
    d598:	|         jsr 718 <get4bytes>
    d59e:	|         addq.l #4,sp
    d5a0:	|         movea.l 72(sp),a0
    d5a4:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d5a8:	|         move.l 1c7c0 <bigDataFile>,d0
    d5ae:	|         move.l d0,-(sp)
    d5b0:	|         jsr 6bc <get2bytes>
    d5b6:	|         addq.l #4,sp
    d5b8:	|         movea.l 72(sp),a0
    d5bc:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d5c0:	|         move.l 1c7c0 <bigDataFile>,24(sp)
    d5c8:	|         move.l 1c7e0 <DOSBase>,d0
    d5ce:	|         movea.l d0,a6
    d5d0:	|         move.l 24(sp),d1
    d5d4:	|         jsr -306(a6)
    d5d8:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d5dc:	|         move.l 1c7c0 <bigDataFile>,d0
    d5e2:	|         move.l d0,-(sp)
    d5e4:	|         jsr 7d8 <getFloat>
    d5ea:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d5ec:	|         move.l 1c7c0 <bigDataFile>,d0
    d5f2:	|         move.l d0,-(sp)
    d5f4:	|         jsr 7d8 <getFloat>
    d5fa:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d5fc:	|         move.l 1c7c0 <bigDataFile>,d0
    d602:	|         move.l d0,-(sp)
    d604:	|         jsr 6bc <get2bytes>
    d60a:	|         addq.l #4,sp
    d60c:	|         move.l d0,d0
    d60e:	|         movea.l 72(sp),a0
    d612:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d616:	|         move.l 1c7c0 <bigDataFile>,d0
    d61c:	|         move.l d0,-(sp)
    d61e:	|         jsr 6bc <get2bytes>
    d624:	|         addq.l #4,sp
    d626:	|         movea.l 72(sp),a0
    d62a:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d62e:	|         movea.l 72(sp),a0
    d632:	|         move.l 16(a0),d0
    d636:	|  ,----- beq.s d668 <loadObjectType+0x202>
    d638:	|  |      movea.l 72(sp),a0
    d63c:	|  |      move.l 16(a0),d0
    d640:	|  |      lsl.l #3,d0
    d642:	|  |      move.l d0,16(sp)
    d646:	|  |      clr.l 12(sp)
    d64a:	|  |      move.l 1c7d8 <SysBase>,d0
    d650:	|  |      movea.l d0,a6
    d652:	|  |      move.l 16(sp),d0
    d656:	|  |      move.l 12(sp),d1
    d65a:	|  |      jsr -684(a6)
    d65e:	|  |      move.l d0,8(sp)
    d662:	|  |      move.l 8(sp),d0
    d666:	|  |  ,-- bra.s d66a <loadObjectType+0x204>
    d668:	|  '--|-> moveq #0,d0
    d66a:	|     '-> movea.l 72(sp),a0
    d66e:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d672:	|         clr.l 88(sp)
    d676:	|     ,-- bra.s d6c6 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d678:	|  ,--|-> move.l 1c7c0 <bigDataFile>,d1
    d67e:	|  |  |   movea.l 72(sp),a0
    d682:	|  |  |   movea.l 38(a0),a0
    d686:	|  |  |   move.l 88(sp),d0
    d68a:	|  |  |   lsl.l #3,d0
    d68c:	|  |  |   lea (0,a0,d0.l),a2
    d690:	|  |  |   move.l d1,-(sp)
    d692:	|  |  |   jsr 6bc <get2bytes>
    d698:	|  |  |   addq.l #4,sp
    d69a:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d69c:	|  |  |   move.l 1c7c0 <bigDataFile>,d1
    d6a2:	|  |  |   movea.l 72(sp),a0
    d6a6:	|  |  |   movea.l 38(a0),a0
    d6aa:	|  |  |   move.l 88(sp),d0
    d6ae:	|  |  |   lsl.l #3,d0
    d6b0:	|  |  |   lea (0,a0,d0.l),a2
    d6b4:	|  |  |   move.l d1,-(sp)
    d6b6:	|  |  |   jsr 6bc <get2bytes>
    d6bc:	|  |  |   addq.l #4,sp
    d6be:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d6c2:	|  |  |   addq.l #1,88(sp)
    d6c6:	|  |  '-> movea.l 72(sp),a0
    d6ca:	|  |      move.l 16(a0),d0
    d6ce:	|  |      cmp.l 88(sp),d0
    d6d2:	|  '----- bgt.s d678 <loadObjectType+0x212>
            }
            finishAccess();
    d6d4:	|         jsr 74da <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d6da:	|         move.l 68(sp),-(sp)
    d6de:	|         jsr 74e4 <getNumberedString>
    d6e4:	|         addq.l #4,sp
    d6e6:	|         movea.l 72(sp),a0
    d6ea:	|         move.l d0,(a0)
            newType->objectNum = i;
    d6ec:	|         movea.l 72(sp),a0
    d6f0:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d6f6:	|         move.l 1c886 <allObjectTypes>,d0
    d6fc:	|         movea.l 72(sp),a0
    d700:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d704:	|         move.l 72(sp),1c886 <allObjectTypes>
            return newType;
    d70c:	|         move.l 72(sp),d0
    d710:	|     ,-- bra.s d714 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d712:	'-----|-> moveq #0,d0
}
    d714:	      '-> movea.l (sp)+,a2
    d716:	          movea.l (sp)+,a6
    d718:	          lea 84(sp),sp
    d71c:	          rts

0000d71e <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d71e:	             lea -16(sp),sp
    d722:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d724:	             move.l #116870,16(sp)

	while (* huntRegion) {
    d72c:	   ,-------- bra.s d7a0 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d72e:	,--|-------> movea.l 16(sp),a0
    d732:	|  |         move.l (a0),d0
    d734:	|  |         cmp.l 24(sp),d0
    d738:	|  |  ,----- bne.s d792 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d73a:	|  |  |      movea.l 24(sp),a0
    d73e:	|  |  |      move.l 8(a0),d0
    d742:	|  |  |      movea.l 16(sp),a0
    d746:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d748:	|  |  |      movea.l 24(sp),a0
    d74c:	|  |  |      move.l 38(a0),12(sp)
    d752:	|  |  |      move.l 1c7d8 <SysBase>,d0
    d758:	|  |  |      movea.l d0,a6
    d75a:	|  |  |      movea.l 12(sp),a1
    d75e:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d762:	|  |  |      movea.l 24(sp),a0
    d766:	|  |  |      move.l (a0),8(sp)
    d76a:	|  |  |      move.l 1c7d8 <SysBase>,d0
    d770:	|  |  |      movea.l d0,a6
    d772:	|  |  |      movea.l 8(sp),a1
    d776:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d77a:	|  |  |      move.l 24(sp),4(sp)
    d780:	|  |  |      move.l 1c7d8 <SysBase>,d0
    d786:	|  |  |      movea.l d0,a6
    d788:	|  |  |      movea.l 4(sp),a1
    d78c:	|  |  |      jsr -690(a6)
			return;
    d790:	|  |  |  ,-- bra.s d7b6 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d792:	|  |  '--|-> movea.l 16(sp),a0
    d796:	|  |     |   move.l (a0),d0
    d798:	|  |     |   move.l d0,d1
    d79a:	|  |     |   addq.l #8,d1
    d79c:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d7a0:	|  '-----|-> movea.l 16(sp),a0
    d7a4:	|        |   move.l (a0),d0
    d7a6:	'--------|-- bne.s d72e <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d7a8:	         |   pea 19427 <PutChar+0x18b1>
    d7ae:	         |   jsr 170d4 <KPrintF>
    d7b4:	         |   addq.l #4,sp
}
    d7b6:	         '-> movea.l (sp)+,a6
    d7b8:	             lea 16(sp),sp
    d7bc:	             rts

0000d7be <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d7be:	movea.l 4(sp),a0
    d7c2:	move.l 4(a0),d0
    d7c6:	move.l 8(sp),-(sp)
    d7ca:	move.l d0,-(sp)
    d7cc:	jsr 8d0 <put2bytes>
    d7d2:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d7d4:	movea.l 4(sp),a0
    d7d8:	move.l (a0),d0
    d7da:	move.l 8(sp),-(sp)
    d7de:	move.l d0,-(sp)
    d7e0:	jsr bd8 <writeString>
    d7e6:	addq.l #8,sp
    d7e8:	nop
    d7ea:	rts

0000d7ec <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d7ec:	                         lea -112(sp),sp
    d7f0:	                         move.l a6,-(sp)
    d7f2:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d7f4:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d7f8:	                         move.w 1c88c <saveEncoding>,d0
    d7fe:	                  ,----- beq.s d808 <fileToStack+0x1c>
    d800:	                  |      move.l #103501,d0
    d806:	                  |  ,-- bra.s d80e <fileToStack+0x22>
    d808:	                  '--|-> move.l #103527,d0
    d80e:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d812:	                         move.l 124(sp),112(sp)
    d818:	                         move.l #1005,108(sp)
    d820:	                         move.l 1c7e0 <DOSBase>,d0
    d826:	                         movea.l d0,a6
    d828:	                         move.l 112(sp),d1
    d82c:	                         move.l 108(sp),d2
    d830:	                         jsr -30(a6)
    d834:	                         move.l d0,104(sp)
    d838:	                         move.l 104(sp),d0
    d83c:	                         move.l d0,100(sp)
    if (!fp) {
    d840:	                     ,-- bne.s d85a <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d842:	                     |   move.l 124(sp),-(sp)
    d846:	                     |   pea 1947e <PutChar+0x1908>
    d84c:	                     |   jsr 170d4 <KPrintF>
    d852:	                     |   addq.l #8,sp
        return FALSE;
    d854:	                     |   clr.w d0
    d856:	,--------------------|-- bra.w db50 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d85a:	|                    '-> move.w 1c88c <saveEncoding>,d0
    d860:	|                        move.l d0,d0
    d862:	|                        move.b d0,1c88a <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d868:	|                        move.w 1c88c <saveEncoding>,d0
    d86e:	|                        lsr.w #8,d0
    d870:	|                        move.l d0,d0
    d872:	|                        move.b d0,1c88b <encode2>

    while (*checker) {
    d878:	|                 ,----- bra.s d8dc <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d87a:	|              ,--|----> move.l 100(sp),30(sp)
    d880:	|              |  |      move.l 1c7e0 <DOSBase>,d0
    d886:	|              |  |      movea.l d0,a6
    d888:	|              |  |      move.l 30(sp),d1
    d88c:	|              |  |      jsr -306(a6)
    d890:	|              |  |      move.l d0,26(sp)
    d894:	|              |  |      move.l 26(sp),d1
    d898:	|              |  |      movea.l 116(sp),a0
    d89c:	|              |  |      move.b (a0),d0
    d89e:	|              |  |      ext.w d0
    d8a0:	|              |  |      movea.w d0,a0
    d8a2:	|              |  |      cmpa.l d1,a0
    d8a4:	|              |  |  ,-- beq.s d8d8 <fileToStack+0xec>
            Close(fp);
    d8a6:	|              |  |  |   move.l 100(sp),22(sp)
    d8ac:	|              |  |  |   move.l 1c7e0 <DOSBase>,d0
    d8b2:	|              |  |  |   movea.l d0,a6
    d8b4:	|              |  |  |   move.l 22(sp),d1
    d8b8:	|              |  |  |   jsr -36(a6)
    d8bc:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d8c0:	|              |  |  |   move.l 124(sp),-(sp)
    d8c4:	|              |  |  |   pea 1948b <PutChar+0x1915>
    d8ca:	|              |  |  |   jsr 170d4 <KPrintF>
    d8d0:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d8d2:	|              |  |  |   clr.w d0
    d8d4:	+--------------|--|--|-- bra.w db50 <fileToStack+0x364>
        }
        checker++;
    d8d8:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    d8dc:	|              |  '----> movea.l 116(sp),a0
    d8e0:	|              |         move.b (a0),d0
    d8e2:	|              '-------- bne.s d87a <fileToStack+0x8e>
    }

    if (saveEncoding) {
    d8e4:	|                        move.w 1c88c <saveEncoding>,d0
    d8ea:	|  ,-------------------- beq.s d95e <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    d8ec:	|  |                     move.l 100(sp),-(sp)
    d8f0:	|  |                     jsr db5a <readStringEncoded>
    d8f6:	|  |                     addq.l #4,sp
    d8f8:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    d8fc:	|  |                     pea 194cc <PutChar+0x1956>
    d902:	|  |                     move.l 100(sp),-(sp)
    d906:	|  |                     jsr 13abc <strcmp>
    d90c:	|  |                     addq.l #8,sp
    d90e:	|  |                     tst.l d0
    d910:	|  |                 ,-- beq.s d944 <fileToStack+0x158>
            Close(fp);
    d912:	|  |                 |   move.l 100(sp),88(sp)
    d918:	|  |                 |   move.l 1c7e0 <DOSBase>,d0
    d91e:	|  |                 |   movea.l d0,a6
    d920:	|  |                 |   move.l 88(sp),d1
    d924:	|  |                 |   jsr -36(a6)
    d928:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    d92c:	|  |                 |   move.l 124(sp),-(sp)
    d930:	|  |                 |   pea 194db <PutChar+0x1965>
    d936:	|  |                 |   jsr 170d4 <KPrintF>
    d93c:	|  |                 |   addq.l #8,sp
            return FALSE;
    d93e:	|  |                 |   clr.w d0
    d940:	+--|-----------------|-- bra.w db50 <fileToStack+0x364>
        }
        FreeVec(checker);
    d944:	|  |                 '-> move.l 96(sp),92(sp)
    d94a:	|  |                     move.l 1c7d8 <SysBase>,d0
    d950:	|  |                     movea.l d0,a6
    d952:	|  |                     movea.l 92(sp),a1
    d956:	|  |                     jsr -690(a6)
        checker = NULL;
    d95a:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    d95e:	|  >-------------------> move.w 1c88c <saveEncoding>,d0
    d964:	|  |     ,-------------- beq.w da98 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    d968:	|  |     |               move.l 100(sp),76(sp)
    d96e:	|  |     |               move.l 1c7e0 <DOSBase>,d0
    d974:	|  |     |               movea.l d0,a6
    d976:	|  |     |               move.l 76(sp),d1
    d97a:	|  |     |               jsr -306(a6)
    d97e:	|  |     |               move.l d0,72(sp)
    d982:	|  |     |               move.l 72(sp),d0
    d986:	|  |     |               move.b 1c88a <encode1>,d1
    d98c:	|  |     |               ext.w d1
    d98e:	|  |     |               ext.l d1
    d990:	|  |     |               move.l d0,d2
    d992:	|  |     |               eor.l d1,d2
    d994:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    d998:	|  |     |               moveq #-1,d0
    d99a:	|  |     |               cmp.l 68(sp),d0
    d99e:	|  |  ,--|-------------- beq.w db2e <fileToStack+0x342>

            char i = (char) tmp;
    d9a2:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    d9a8:	|  |  |  |               move.b 67(sp),d0
    d9ac:	|  |  |  |               ext.w d0
    d9ae:	|  |  |  |               movea.w d0,a0
    d9b0:	|  |  |  |               moveq #2,d2
    d9b2:	|  |  |  |               cmp.l a0,d2
    d9b4:	|  |  |  |     ,-------- beq.s da30 <fileToStack+0x244>
    d9b6:	|  |  |  |     |         moveq #2,d0
    d9b8:	|  |  |  |     |         cmp.l a0,d0
    d9ba:	|  |  |  |  ,--|-------- blt.w da66 <fileToStack+0x27a>
    d9be:	|  |  |  |  |  |         cmpa.w #0,a0
    d9c2:	|  |  |  |  |  |     ,-- beq.s d9ce <fileToStack+0x1e2>
    d9c4:	|  |  |  |  |  |     |   moveq #1,d2
    d9c6:	|  |  |  |  |  |     |   cmp.l a0,d2
    d9c8:	|  |  |  |  |  |  ,--|-- beq.s da0a <fileToStack+0x21e>
    d9ca:	|  |  |  |  +--|--|--|-- bra.w da66 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    d9ce:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    d9d2:	|  |  |  |  |  |  |      jsr db5a <readStringEncoded>
    d9d8:	|  |  |  |  |  |  |      addq.l #4,sp
    d9da:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    d9de:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    d9e2:	|  |  |  |  |  |  |      lea 14(sp),a0
    d9e6:	|  |  |  |  |  |  |      move.l a0,-(sp)
    d9e8:	|  |  |  |  |  |  |      jsr 14832 <makeTextVar>
    d9ee:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    d9f0:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    d9f6:	|  |  |  |  |  |  |      move.l 1c7d8 <SysBase>,d0
    d9fc:	|  |  |  |  |  |  |      movea.l d0,a6
    d9fe:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    da02:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    da06:	|  |  |  |  |  |  |  ,-- bra.w dabe <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    da0a:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    da0e:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    da14:	|  |  |  |  |  |     |   addq.l #4,sp
    da16:	|  |  |  |  |  |     |   move.l d0,-(sp)
    da18:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    da1c:	|  |  |  |  |  |     |   lea 18(sp),a0
    da20:	|  |  |  |  |  |     |   move.l a0,-(sp)
    da22:	|  |  |  |  |  |     |   jsr 14f02 <setVariable>
    da28:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    da2c:	|  |  |  |  |  |     +-- bra.w dabe <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    da30:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    da36:	|  |  |  |  |        |   move.l 1c7e0 <DOSBase>,d0
    da3c:	|  |  |  |  |        |   movea.l d0,a6
    da3e:	|  |  |  |  |        |   move.l 62(sp),d1
    da42:	|  |  |  |  |        |   jsr -306(a6)
    da46:	|  |  |  |  |        |   move.l d0,58(sp)
    da4a:	|  |  |  |  |        |   move.l 58(sp),d0
    da4e:	|  |  |  |  |        |   move.l d0,-(sp)
    da50:	|  |  |  |  |        |   pea 1 <_start+0x1>
    da54:	|  |  |  |  |        |   lea 18(sp),a0
    da58:	|  |  |  |  |        |   move.l a0,-(sp)
    da5a:	|  |  |  |  |        |   jsr 14f02 <setVariable>
    da60:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    da64:	|  |  |  |  |        +-- bra.s dabe <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    da66:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    da6a:	|  |  |  |           |   pea 1955d <PutChar+0x19e7>
    da70:	|  |  |  |           |   jsr 170d4 <KPrintF>
    da76:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    da78:	|  |  |  |           |   move.l 100(sp),46(sp)
    da7e:	|  |  |  |           |   move.l 1c7e0 <DOSBase>,d0
    da84:	|  |  |  |           |   movea.l d0,a6
    da86:	|  |  |  |           |   move.l 46(sp),d1
    da8a:	|  |  |  |           |   jsr -36(a6)
    da8e:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    da92:	|  |  |  |           |   clr.w d0
    da94:	+--|--|--|-----------|-- bra.w db50 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    da98:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    da9c:	|  |  |              |   jsr dc20 <readTextPlain>
    daa2:	|  |  |              |   addq.l #4,sp
    daa4:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    daa8:	|  |  |        ,-----|-- beq.w db32 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    daac:	|  |  |        |     |   move.l 80(sp),-(sp)
    dab0:	|  |  |        |     |   lea 14(sp),a0
    dab4:	|  |  |        |     |   move.l a0,-(sp)
    dab6:	|  |  |        |     |   jsr 14832 <makeTextVar>
    dabc:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dabe:	|  |  |        |     '-> movea.l 128(sp),a0
    dac2:	|  |  |        |         move.l (a0),d0
    dac4:	|  |  |        |  ,----- bne.s daf4 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dac6:	|  |  |        |  |      move.l 128(sp),d0
    daca:	|  |  |        |  |      move.l d0,-(sp)
    dacc:	|  |  |        |  |      lea 14(sp),a0
    dad0:	|  |  |        |  |      move.l a0,-(sp)
    dad2:	|  |  |        |  |      jsr 13ed2 <addVarToStackQuick>
    dad8:	|  |  |        |  |      addq.l #8,sp
    dada:	|  |  |        |  |      tst.w d0
    dadc:	|  |  |        |  |  ,-- bne.s dae2 <fileToStack+0x2f6>
    dade:	|  |  |        |  |  |   clr.w d0
    dae0:	+--|--|--------|--|--|-- bra.s db50 <fileToStack+0x364>
            sH->last = sH->first;
    dae2:	|  |  |        |  |  '-> movea.l 128(sp),a0
    dae6:	|  |  |        |  |      move.l (a0),d0
    dae8:	|  |  |        |  |      movea.l 128(sp),a0
    daec:	|  |  |        |  |      move.l d0,4(a0)
    daf0:	|  +--|--------|--|----- bra.w d95e <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    daf4:	|  |  |        |  '----> movea.l 128(sp),a0
    daf8:	|  |  |        |         move.l 4(a0),d0
    dafc:	|  |  |        |         addq.l #8,d0
    dafe:	|  |  |        |         move.l d0,-(sp)
    db00:	|  |  |        |         lea 14(sp),a0
    db04:	|  |  |        |         move.l a0,-(sp)
    db06:	|  |  |        |         jsr 13ed2 <addVarToStackQuick>
    db0c:	|  |  |        |         addq.l #8,sp
    db0e:	|  |  |        |         tst.w d0
    db10:	|  |  |        |     ,-- bne.s db16 <fileToStack+0x32a>
    db12:	|  |  |        |     |   clr.w d0
    db14:	+--|--|--------|-----|-- bra.s db50 <fileToStack+0x364>
            sH->last = sH->last->next;
    db16:	|  |  |        |     '-> movea.l 128(sp),a0
    db1a:	|  |  |        |         movea.l 4(a0),a0
    db1e:	|  |  |        |         move.l 8(a0),d0
    db22:	|  |  |        |         movea.l 128(sp),a0
    db26:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    db2a:	|  '--|--------|-------- bra.w d95e <fileToStack+0x172>
            if (tmp == -1) break;
    db2e:	|     '--------|-------> nop
    db30:	|              |     ,-- bra.s db34 <fileToStack+0x348>
            if (!line) break;
    db32:	|              '-----|-> nop
        }
    }
    Close(fp);
    db34:	|                    '-> move.l 100(sp),38(sp)
    db3a:	|                        move.l 1c7e0 <DOSBase>,d0
    db40:	|                        movea.l d0,a6
    db42:	|                        move.l 38(sp),d1
    db46:	|                        jsr -36(a6)
    db4a:	|                        move.l d0,34(sp)
    return TRUE;
    db4e:	|                        moveq #1,d0
}
    db50:	'----------------------> move.l (sp)+,d2
    db52:	                         movea.l (sp)+,a6
    db54:	                         lea 112(sp),sp
    db58:	                         rts

0000db5a <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    db5a:	          lea -32(sp),sp
    db5e:	          move.l a6,-(sp)
    db60:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    db62:	          move.l 44(sp),-(sp)
    db66:	          jsr 6bc <get2bytes>
    db6c:	          addq.l #4,sp
    db6e:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    db72:	          move.l 32(sp),d0
    db76:	          addq.l #1,d0
    db78:	          move.l d0,28(sp)
    db7c:	          clr.l 24(sp)
    db80:	          move.l 1c7d8 <SysBase>,d0
    db86:	          movea.l d0,a6
    db88:	          move.l 28(sp),d0
    db8c:	          move.l 24(sp),d1
    db90:	          jsr -684(a6)
    db94:	          move.l d0,20(sp)
    db98:	          move.l 20(sp),d0
    db9c:	          move.l d0,16(sp)
    if (!s) return NULL;
    dba0:	      ,-- bne.s dba6 <readStringEncoded+0x4c>
    dba2:	      |   moveq #0,d0
    dba4:	,-----|-- bra.s dc16 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    dba6:	|     '-> clr.l 36(sp)
    dbaa:	|     ,-- bra.s dbfc <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    dbac:	|  ,--|-> move.l 44(sp),12(sp)
    dbb2:	|  |  |   move.l 1c7e0 <DOSBase>,d0
    dbb8:	|  |  |   movea.l d0,a6
    dbba:	|  |  |   move.l 12(sp),d1
    dbbe:	|  |  |   jsr -306(a6)
    dbc2:	|  |  |   move.l d0,8(sp)
    dbc6:	|  |  |   move.l 8(sp),d0
    dbca:	|  |  |   move.l d0,d1
    dbcc:	|  |  |   move.b 1c88a <encode1>,d2
    dbd2:	|  |  |   move.l 36(sp),d0
    dbd6:	|  |  |   movea.l 16(sp),a0
    dbda:	|  |  |   adda.l d0,a0
    dbdc:	|  |  |   move.b d1,d0
    dbde:	|  |  |   eor.b d2,d0
    dbe0:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dbe2:	|  |  |   move.b 1c88a <encode1>,d0
    dbe8:	|  |  |   move.b d0,d1
    dbea:	|  |  |   move.b 1c88b <encode2>,d0
    dbf0:	|  |  |   add.b d1,d0
    dbf2:	|  |  |   move.b d0,1c88a <encode1>
    for (a = 0; a < len; a++) {
    dbf8:	|  |  |   addq.l #1,36(sp)
    dbfc:	|  |  '-> move.l 36(sp),d0
    dc00:	|  |      cmp.l 32(sp),d0
    dc04:	|  '----- blt.s dbac <readStringEncoded+0x52>
    }
    s[len] = 0;
    dc06:	|         move.l 32(sp),d0
    dc0a:	|         movea.l 16(sp),a0
    dc0e:	|         adda.l d0,a0
    dc10:	|         clr.b (a0)
    return s;
    dc12:	|         move.l 16(sp),d0
}
    dc16:	'-------> move.l (sp)+,d2
    dc18:	          movea.l (sp)+,a6
    dc1a:	          lea 32(sp),sp
    dc1e:	          rts

0000dc20 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dc20:	             lea -104(sp),sp
    dc24:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    dc28:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    dc2c:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    dc32:	             move.l 124(sp),106(sp)
    dc38:	             clr.l 102(sp)
    dc3c:	             clr.l 98(sp)
    dc40:	             move.l 1c7e0 <DOSBase>,d0
    dc46:	             movea.l d0,a6
    dc48:	             move.l 106(sp),d1
    dc4c:	             move.l 102(sp),d2
    dc50:	             move.l 98(sp),d3
    dc54:	             jsr -66(a6)
    dc58:	             move.l d0,94(sp)
    dc5c:	             move.l 94(sp),d0
    dc60:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    dc64:	   ,-------- bra.s dca8 <readTextPlain+0x88>
        tmp = FGetC(fp);
    dc66:	,--|-------> move.l 124(sp),22(sp)
    dc6c:	|  |         move.l 1c7e0 <DOSBase>,d0
    dc72:	|  |         movea.l d0,a6
    dc74:	|  |         move.l 22(sp),d1
    dc78:	|  |         jsr -306(a6)
    dc7c:	|  |         move.l d0,18(sp)
    dc80:	|  |         move.l 18(sp),d0
    dc84:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    dc88:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    dc8e:	|  |         cmpi.b #10,17(sp)
    dc94:	|  |  ,----- beq.s dc9e <readTextPlain+0x7e>
    dc96:	|  |  |      moveq #-1,d0
    dc98:	|  |  |      cmp.l 110(sp),d0
    dc9c:	|  |  |  ,-- bne.s dca4 <readTextPlain+0x84>
            keepGoing = FALSE;
    dc9e:	|  |  '--|-> clr.w 114(sp)
    dca2:	|  +-----|-- bra.s dca8 <readTextPlain+0x88>
        } else {
            stringSize++;
    dca4:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    dca8:	|  '-------> tst.w 114(sp)
    dcac:	'----------- bne.s dc66 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    dcae:	             tst.l 116(sp)
    dcb2:	         ,-- bne.s dcc2 <readTextPlain+0xa2>
    dcb4:	         |   moveq #-1,d0
    dcb6:	         |   cmp.l 110(sp),d0
    dcba:	         +-- bne.s dcc2 <readTextPlain+0xa2>
        return NULL;
    dcbc:	         |   moveq #0,d0
    dcbe:	      ,--|-- bra.w dda8 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    dcc2:	      |  '-> move.l 124(sp),86(sp)
    dcc8:	      |      move.l 90(sp),82(sp)
    dcce:	      |      moveq #-1,d0
    dcd0:	      |      move.l d0,78(sp)
    dcd4:	      |      move.l 1c7e0 <DOSBase>,d0
    dcda:	      |      movea.l d0,a6
    dcdc:	      |      move.l 86(sp),d1
    dce0:	      |      move.l 82(sp),d2
    dce4:	      |      move.l 78(sp),d3
    dce8:	      |      jsr -66(a6)
    dcec:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    dcf0:	      |      move.l 116(sp),d0
    dcf4:	      |      addq.l #1,d0
    dcf6:	      |      move.l d0,70(sp)
    dcfa:	      |      clr.l 66(sp)
    dcfe:	      |      move.l 1c7d8 <SysBase>,d0
    dd04:	      |      movea.l d0,a6
    dd06:	      |      move.l 70(sp),d0
    dd0a:	      |      move.l 66(sp),d1
    dd0e:	      |      jsr -684(a6)
    dd12:	      |      move.l d0,62(sp)
    dd16:	      |      move.l 62(sp),d0
    dd1a:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dd1e:	      |  ,-- bne.s dd26 <readTextPlain+0x106>
    dd20:	      |  |   moveq #0,d0
    dd22:	      +--|-- bra.w dda8 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dd26:	      |  '-> move.l 124(sp),54(sp)
    dd2c:	      |      move.l 58(sp),50(sp)
    dd32:	      |      moveq #1,d0
    dd34:	      |      move.l d0,46(sp)
    dd38:	      |      move.l 116(sp),42(sp)
    dd3e:	      |      move.l 1c7e0 <DOSBase>,d0
    dd44:	      |      movea.l d0,a6
    dd46:	      |      move.l 54(sp),d1
    dd4a:	      |      move.l 50(sp),d2
    dd4e:	      |      move.l 46(sp),d3
    dd52:	      |      move.l 42(sp),d4
    dd56:	      |      jsr -324(a6)
    dd5a:	      |      move.l d0,38(sp)
    dd5e:	      |      move.l 38(sp),d0
    dd62:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    dd66:	      |      move.l 34(sp),d0
    dd6a:	      |      cmp.l 116(sp),d0
    dd6e:	      |  ,-- beq.s dd7e <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    dd70:	      |  |   pea 19592 <PutChar+0x1a1c>
    dd76:	      |  |   jsr 170d4 <KPrintF>
    dd7c:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    dd7e:	      |  '-> move.l 124(sp),30(sp)
    dd84:	      |      move.l 1c7e0 <DOSBase>,d0
    dd8a:	      |      movea.l d0,a6
    dd8c:	      |      move.l 30(sp),d1
    dd90:	      |      jsr -306(a6)
    dd94:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    dd98:	      |      move.l 116(sp),d0
    dd9c:	      |      movea.l 58(sp),a0
    dda0:	      |      adda.l d0,a0
    dda2:	      |      clr.b (a0)
    }

    return reply;
    dda4:	      |      move.l 58(sp),d0
}
    dda8:	      '----> movem.l (sp)+,d2-d4/a6
    ddac:	             lea 104(sp),sp
    ddb0:	             rts

0000ddb2 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    ddb2:	                      lea -144(sp),sp
    ddb6:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    ddba:	                      move.l 160(sp),148(sp)
    ddc0:	                      move.l #1006,144(sp)
    ddc8:	                      move.l 1c7e0 <DOSBase>,d0
    ddce:	                      movea.l d0,a6
    ddd0:	                      move.l 148(sp),d1
    ddd4:	                      move.l 144(sp),d2
    ddd8:	                      jsr -30(a6)
    dddc:	                      move.l d0,140(sp)
    dde0:	                      move.l 140(sp),d0
    dde4:	                      move.l d0,136(sp)

    if (!fp) {
    dde8:	                  ,-- bne.s de02 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    ddea:	                  |   move.l 160(sp),-(sp)
    ddee:	                  |   pea 195b3 <PutChar+0x1a3d>
    ddf4:	                  |   jsr 170d4 <KPrintF>
    ddfa:	                  |   addq.l #8,sp
        return FALSE;
    ddfc:	                  |   clr.w d0
    ddfe:	,-----------------|-- bra.w e0be <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    de02:	|                 '-> movea.l 164(sp),a0
    de06:	|                     movea.l 4(a0),a0
    de0a:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    de0e:	|                     move.w 1c88c <saveEncoding>,d0
    de14:	|                     move.l d0,d0
    de16:	|                     move.b d0,1c88a <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    de1c:	|                     move.w 1c88c <saveEncoding>,d0
    de22:	|                     lsr.w #8,d0
    de24:	|                     move.l d0,d0
    de26:	|                     move.b d0,1c88b <encode2>

    if (saveEncoding) {
    de2c:	|                     move.w 1c88c <saveEncoding>,d0
    de32:	|                 ,-- beq.s de84 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    de34:	|                 |   move.l 136(sp),116(sp)
    de3a:	|                 |   move.l #103501,112(sp)
    de42:	|                 |   moveq #99,d0
    de44:	|                 |   not.b d0
    de46:	|                 |   add.l sp,d0
    de48:	|                 |   addi.l #-144,d0
    de4e:	|                 |   move.l d0,108(sp)
    de52:	|                 |   move.l 1c7e0 <DOSBase>,d0
    de58:	|                 |   movea.l d0,a6
    de5a:	|                 |   move.l 116(sp),d1
    de5e:	|                 |   move.l 112(sp),d2
    de62:	|                 |   move.l 108(sp),d3
    de66:	|                 |   jsr -354(a6)
    de6a:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    de6e:	|                 |   move.l 136(sp),-(sp)
    de72:	|                 |   pea 194cc <PutChar+0x1956>
    de78:	|                 |   jsr e0c8 <writeStringEncoded>
    de7e:	|                 |   addq.l #8,sp
    de80:	|  ,--------------|-- bra.w e096 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    de84:	|  |              '-> move.l 136(sp),132(sp)
    de8a:	|  |                  move.l #103527,128(sp)
    de92:	|  |                  moveq #99,d1
    de94:	|  |                  not.b d1
    de96:	|  |                  add.l sp,d1
    de98:	|  |                  addi.l #-144,d1
    de9e:	|  |                  move.l d1,124(sp)
    dea2:	|  |                  move.l 1c7e0 <DOSBase>,d0
    dea8:	|  |                  movea.l d0,a6
    deaa:	|  |                  move.l 132(sp),d1
    deae:	|  |                  move.l 128(sp),d2
    deb2:	|  |                  move.l 124(sp),d3
    deb6:	|  |                  jsr -354(a6)
    deba:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    debe:	|  +----------------- bra.w e096 <stackToFile+0x2e4>
        if (saveEncoding) {
    dec2:	|  |  ,-------------> move.w 1c88c <saveEncoding>,d0
    dec8:	|  |  |     ,-------- beq.w e01a <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    decc:	|  |  |     |         movea.l 152(sp),a0
    ded0:	|  |  |     |         move.l (a0),d0
    ded2:	|  |  |     |         moveq #1,d1
    ded4:	|  |  |     |         cmp.l d0,d1
    ded6:	|  |  |     |     ,-- beq.s df26 <stackToFile+0x174>
    ded8:	|  |  |     |     |   moveq #3,d1
    deda:	|  |  |     |     |   cmp.l d0,d1
    dedc:	|  |  |     |  ,--|-- bne.w dfe8 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    dee0:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    dee6:	|  |  |     |  |  |   move.b 1c88a <encode1>,d0
    deec:	|  |  |     |  |  |   ext.w d0
    deee:	|  |  |     |  |  |   movea.w d0,a0
    def0:	|  |  |     |  |  |   move.l a0,72(sp)
    def4:	|  |  |     |  |  |   move.l 1c7e0 <DOSBase>,d0
    defa:	|  |  |     |  |  |   movea.l d0,a6
    defc:	|  |  |     |  |  |   move.l 76(sp),d1
    df00:	|  |  |     |  |  |   move.l 72(sp),d2
    df04:	|  |  |     |  |  |   jsr -312(a6)
    df08:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    df0c:	|  |  |     |  |  |   movea.l 152(sp),a0
    df10:	|  |  |     |  |  |   move.l 4(a0),d0
    df14:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    df18:	|  |  |     |  |  |   move.l d0,-(sp)
    df1a:	|  |  |     |  |  |   jsr e0c8 <writeStringEncoded>
    df20:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    df22:	|  |  |  ,--|--|--|-- bra.w e08c <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    df26:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    df2a:	|  |  |  |  |  |      move.l 4(a0),d0
    df2e:	|  |  |  |  |  |  ,-- bmi.s df9e <stackToFile+0x1ec>
    df30:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    df34:	|  |  |  |  |  |  |   move.l 4(a0),d0
    df38:	|  |  |  |  |  |  |   cmpi.l #255,d0
    df3e:	|  |  |  |  |  |  +-- bgt.s df9e <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    df40:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    df46:	|  |  |  |  |  |  |   move.b 1c88a <encode1>,d0
    df4c:	|  |  |  |  |  |  |   eori.b #2,d0
    df50:	|  |  |  |  |  |  |   ext.w d0
    df52:	|  |  |  |  |  |  |   movea.w d0,a0
    df54:	|  |  |  |  |  |  |   move.l a0,60(sp)
    df58:	|  |  |  |  |  |  |   move.l 1c7e0 <DOSBase>,d0
    df5e:	|  |  |  |  |  |  |   movea.l d0,a6
    df60:	|  |  |  |  |  |  |   move.l 64(sp),d1
    df64:	|  |  |  |  |  |  |   move.l 60(sp),d2
    df68:	|  |  |  |  |  |  |   jsr -312(a6)
    df6c:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    df70:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    df76:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    df7a:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    df80:	|  |  |  |  |  |  |   move.l 1c7e0 <DOSBase>,d0
    df86:	|  |  |  |  |  |  |   movea.l d0,a6
    df88:	|  |  |  |  |  |  |   move.l 52(sp),d1
    df8c:	|  |  |  |  |  |  |   move.l 48(sp),d2
    df90:	|  |  |  |  |  |  |   jsr -312(a6)
    df94:	|  |  |  |  |  |  |   move.l d0,44(sp)
    df98:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    df9a:	|  |  |  +--|--|--|-- bra.w e08c <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    df9e:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    dfa4:	|  |  |  |  |  |      move.b 1c88a <encode1>,d0
    dfaa:	|  |  |  |  |  |      eori.b #1,d0
    dfae:	|  |  |  |  |  |      ext.w d0
    dfb0:	|  |  |  |  |  |      movea.w d0,a0
    dfb2:	|  |  |  |  |  |      move.l a0,36(sp)
    dfb6:	|  |  |  |  |  |      move.l 1c7e0 <DOSBase>,d0
    dfbc:	|  |  |  |  |  |      movea.l d0,a6
    dfbe:	|  |  |  |  |  |      move.l 40(sp),d1
    dfc2:	|  |  |  |  |  |      move.l 36(sp),d2
    dfc6:	|  |  |  |  |  |      jsr -312(a6)
    dfca:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    dfce:	|  |  |  |  |  |      movea.l 152(sp),a0
    dfd2:	|  |  |  |  |  |      move.l 4(a0),d0
    dfd6:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    dfda:	|  |  |  |  |  |      move.l d0,-(sp)
    dfdc:	|  |  |  |  |  |      jsr 958 <put4bytes>
    dfe2:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    dfe4:	|  |  |  +--|--|----- bra.w e08c <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    dfe8:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    dfec:	|  |  |  |  |         pea 195c5 <PutChar+0x1a4f>
    dff2:	|  |  |  |  |         jsr 170d4 <KPrintF>
    dff8:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    dffa:	|  |  |  |  |         move.l 136(sp),28(sp)
    e000:	|  |  |  |  |         move.l 1c7e0 <DOSBase>,d0
    e006:	|  |  |  |  |         movea.l d0,a6
    e008:	|  |  |  |  |         move.l 28(sp),d1
    e00c:	|  |  |  |  |         jsr -36(a6)
    e010:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e014:	|  |  |  |  |         clr.w d0
    e016:	+--|--|--|--|-------- bra.w e0be <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e01a:	|  |  |  |  '-------> move.l 152(sp),d0
    e01e:	|  |  |  |            move.l d0,-(sp)
    e020:	|  |  |  |            jsr 14be6 <getTextFromAnyVar>
    e026:	|  |  |  |            addq.l #4,sp
    e028:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e02c:	|  |  |  |     ,----- beq.s e0a0 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e02e:	|  |  |  |     |      movea.l 100(sp),a0
    e032:	|  |  |  |     |      move.b (a0),d0
    e034:	|  |  |  |     |      ext.w d0
    e036:	|  |  |  |     |      movea.w d0,a0
    e038:	|  |  |  |     |      move.l a0,12(sp)
    e03c:	|  |  |  |     |      move.l 136(sp),96(sp)
    e042:	|  |  |  |     |      move.l #103969,92(sp)
    e04a:	|  |  |  |     |      moveq #99,d0
    e04c:	|  |  |  |     |      not.b d0
    e04e:	|  |  |  |     |      add.l sp,d0
    e050:	|  |  |  |     |      addi.l #-144,d0
    e056:	|  |  |  |     |      move.l d0,88(sp)
    e05a:	|  |  |  |     |      move.l 1c7e0 <DOSBase>,d0
    e060:	|  |  |  |     |      movea.l d0,a6
    e062:	|  |  |  |     |      move.l 96(sp),d1
    e066:	|  |  |  |     |      move.l 92(sp),d2
    e06a:	|  |  |  |     |      move.l 88(sp),d3
    e06e:	|  |  |  |     |      jsr -354(a6)
    e072:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e076:	|  |  |  |     |      move.l 100(sp),80(sp)
    e07c:	|  |  |  |     |      move.l 1c7d8 <SysBase>,d0
    e082:	|  |  |  |     |      movea.l d0,a6
    e084:	|  |  |  |     |      movea.l 80(sp),a1
    e088:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e08c:	|  |  |  '-----|----> movea.l 152(sp),a0
    e090:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e096:	|  '--|--------|----> tst.l 152(sp)
    e09a:	|     '--------|----- bne.w dec2 <stackToFile+0x110>
    e09e:	|              |  ,-- bra.s e0a2 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e0a0:	|              '--|-> nop
    }
    Close(fp);
    e0a2:	|                 '-> move.l 136(sp),20(sp)
    e0a8:	|                     move.l 1c7e0 <DOSBase>,d0
    e0ae:	|                     movea.l d0,a6
    e0b0:	|                     move.l 20(sp),d1
    e0b4:	|                     jsr -36(a6)
    e0b8:	|                     move.l d0,16(sp)
    return TRUE;
    e0bc:	|                     moveq #1,d0
}
    e0be:	'-------------------> movem.l (sp)+,d2-d3/a6
    e0c2:	                      lea 144(sp),sp
    e0c6:	                      rts

0000e0c8 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e0c8:	       lea -20(sp),sp
    e0cc:	       move.l a6,-(sp)
    e0ce:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e0d0:	       move.l 32(sp),-(sp)
    e0d4:	       jsr 13afc <strlen>
    e0da:	       addq.l #4,sp
    e0dc:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e0e0:	       move.l 36(sp),-(sp)
    e0e4:	       move.l 24(sp),-(sp)
    e0e8:	       jsr 8d0 <put2bytes>
    e0ee:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e0f0:	       clr.l 24(sp)
    e0f4:	   ,-- bra.s e14a <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e0f6:	,--|-> move.l 36(sp),16(sp)
    e0fc:	|  |   move.l 24(sp),d0
    e100:	|  |   movea.l 32(sp),a0
    e104:	|  |   adda.l d0,a0
    e106:	|  |   move.b (a0),d1
    e108:	|  |   move.b 1c88a <encode1>,d0
    e10e:	|  |   eor.b d1,d0
    e110:	|  |   ext.w d0
    e112:	|  |   movea.w d0,a0
    e114:	|  |   move.l a0,12(sp)
    e118:	|  |   move.l 1c7e0 <DOSBase>,d0
    e11e:	|  |   movea.l d0,a6
    e120:	|  |   move.l 16(sp),d1
    e124:	|  |   move.l 12(sp),d2
    e128:	|  |   jsr -312(a6)
    e12c:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e130:	|  |   move.b 1c88a <encode1>,d0
    e136:	|  |   move.b d0,d1
    e138:	|  |   move.b 1c88b <encode2>,d0
    e13e:	|  |   add.b d1,d0
    e140:	|  |   move.b d0,1c88a <encode1>
	for (a = 0; a < len; a ++) {
    e146:	|  |   addq.l #1,24(sp)
    e14a:	|  '-> move.l 24(sp),d0
    e14e:	|      cmp.l 20(sp),d0
    e152:	'----- blt.s e0f6 <writeStringEncoded+0x2e>
	}
}
    e154:	       nop
    e156:	       nop
    e158:	       move.l (sp)+,d2
    e15a:	       movea.l (sp)+,a6
    e15c:	       lea 20(sp),sp
    e160:	       rts

0000e162 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e162:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e164:	                   tst.l 8(sp)
    e168:	               ,-- bne.s e16e <failSecurityCheck+0xc>
    e16a:	               |   moveq #1,d0
    e16c:	,--------------|-- bra.s e1ec <failSecurityCheck+0x8a>

	int a = 0;
    e16e:	|              '-> clr.l (sp)

	while (fn[a]) {
    e170:	|     ,----------- bra.s e1de <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e172:	|  ,--|----------> move.l (sp),d0
    e174:	|  |  |            movea.l 8(sp),a0
    e178:	|  |  |            adda.l d0,a0
    e17a:	|  |  |            move.b (a0),d0
    e17c:	|  |  |            ext.w d0
    e17e:	|  |  |            movea.w d0,a0
    e180:	|  |  |            moveq #124,d0
    e182:	|  |  |            cmp.l a0,d0
    e184:	|  |  |     ,----- beq.s e1c6 <failSecurityCheck+0x64>
    e186:	|  |  |     |      moveq #124,d1
    e188:	|  |  |     |      cmp.l a0,d1
    e18a:	|  |  |  ,--|----- blt.s e1dc <failSecurityCheck+0x7a>
    e18c:	|  |  |  |  |      moveq #92,d0
    e18e:	|  |  |  |  |      cmp.l a0,d0
    e190:	|  |  |  |  +----- beq.s e1c6 <failSecurityCheck+0x64>
    e192:	|  |  |  |  |      moveq #92,d1
    e194:	|  |  |  |  |      cmp.l a0,d1
    e196:	|  |  |  +--|----- blt.s e1dc <failSecurityCheck+0x7a>
    e198:	|  |  |  |  |      moveq #60,d0
    e19a:	|  |  |  |  |      cmp.l a0,d0
    e19c:	|  |  |  |  |  ,-- blt.s e1bc <failSecurityCheck+0x5a>
    e19e:	|  |  |  |  |  |   moveq #34,d1
    e1a0:	|  |  |  |  |  |   cmp.l a0,d1
    e1a2:	|  |  |  +--|--|-- bgt.s e1dc <failSecurityCheck+0x7a>
    e1a4:	|  |  |  |  |  |   moveq #-34,d1
    e1a6:	|  |  |  |  |  |   add.l a0,d1
    e1a8:	|  |  |  |  |  |   move.l #83894529,d0
    e1ae:	|  |  |  |  |  |   lsr.l d1,d0
    e1b0:	|  |  |  |  |  |   moveq #1,d1
    e1b2:	|  |  |  |  |  |   and.l d1,d0
    e1b4:	|  |  |  |  |  |   sne d0
    e1b6:	|  |  |  |  |  |   neg.b d0
    e1b8:	|  |  |  |  +--|-- bne.s e1c6 <failSecurityCheck+0x64>
    e1ba:	|  |  |  +--|--|-- bra.s e1dc <failSecurityCheck+0x7a>
    e1bc:	|  |  |  |  |  '-> lea -62(a0),a0
    e1c0:	|  |  |  |  |      moveq #1,d0
    e1c2:	|  |  |  |  |      cmp.l a0,d0
    e1c4:	|  |  |  +--|----- bcs.s e1dc <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e1c6:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e1ca:	|  |  |  |         pea 19625 <PutChar+0x1aaf>
    e1d0:	|  |  |  |         jsr 170d4 <KPrintF>
    e1d6:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e1d8:	|  |  |  |         moveq #1,d0
    e1da:	+--|--|--|-------- bra.s e1ec <failSecurityCheck+0x8a>
		}
		a++;
    e1dc:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e1de:	|  |  '----------> move.l (sp),d0
    e1e0:	|  |               movea.l 8(sp),a0
    e1e4:	|  |               adda.l d0,a0
    e1e6:	|  |               move.b (a0),d0
    e1e8:	|  '-------------- bne.s e172 <failSecurityCheck+0x10>
	}
	return FALSE;
    e1ea:	|                  clr.w d0
}
    e1ec:	'----------------> addq.l #4,sp
    e1ee:	                   rts

0000e1f0 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e1f0:	             lea -24(sp),sp
    e1f4:	             move.l a6,-(sp)
    e1f6:	             move.l 40(sp),d0
    e1fa:	             move.w d0,d0
    e1fc:	             move.w d0,6(sp)
	int fileNum = -1;
    e200:	             moveq #-1,d0
    e202:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e206:	             jsr 6a66 <killSpeechTimers>

	switch (numParams) {
    e20c:	             moveq #2,d0
    e20e:	             cmp.l 32(sp),d0
    e212:	      ,----- beq.s e256 <sayCore+0x66>
    e214:	      |      moveq #3,d0
    e216:	      |      cmp.l 32(sp),d0
    e21a:	,-----|----- bne.w e338 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e21e:	|     |      movea.l 36(sp),a0
    e222:	|     |      move.l 24(a0),d0
    e226:	|     |      move.l d0,-(sp)
    e228:	|     |      pea 5 <_start+0x5>
    e22c:	|     |      lea 20(sp),a0
    e230:	|     |      move.l a0,-(sp)
    e232:	|     |      jsr 14610 <getValueType>
    e238:	|     |      lea 12(sp),sp
    e23c:	|     |      tst.w d0
    e23e:	|     |  ,-- bne.s e246 <sayCore+0x56>
    e240:	|     |  |   moveq #1,d0
    e242:	|  ,--|--|-- bra.w e348 <sayCore+0x158>
			trimStack (&fun -> stack);
    e246:	|  |  |  '-> moveq #24,d0
    e248:	|  |  |      add.l 36(sp),d0
    e24c:	|  |  |      move.l d0,-(sp)
    e24e:	|  |  |      jsr 14f94 <trimStack>
    e254:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e256:	|  |  '----> movea.l 36(sp),a0
    e25a:	|  |         move.l 24(a0),d0
    e25e:	|  |         move.l d0,-(sp)
    e260:	|  |         jsr 14be6 <getTextFromAnyVar>
    e266:	|  |         addq.l #4,sp
    e268:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e26c:	|  |     ,-- bne.s e274 <sayCore+0x84>
    e26e:	|  |     |   moveq #1,d0
    e270:	|  +-----|-- bra.w e348 <sayCore+0x158>
			trimStack (&fun -> stack);
    e274:	|  |     '-> moveq #24,d0
    e276:	|  |         add.l 36(sp),d0
    e27a:	|  |         move.l d0,-(sp)
    e27c:	|  |         jsr 14f94 <trimStack>
    e282:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e284:	|  |         movea.l 36(sp),a0
    e288:	|  |         move.l 24(a0),d0
    e28c:	|  |         move.l d0,-(sp)
    e28e:	|  |         pea 7 <_start+0x7>
    e292:	|  |         lea 16(sp),a0
    e296:	|  |         move.l a0,-(sp)
    e298:	|  |         jsr 14610 <getValueType>
    e29e:	|  |         lea 12(sp),sp
    e2a2:	|  |         tst.w d0
    e2a4:	|  |     ,-- bne.s e2ac <sayCore+0xbc>
    e2a6:	|  |     |   moveq #1,d0
    e2a8:	|  +-----|-- bra.w e348 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e2ac:	|  |     '-> movea.l 36(sp),a0
    e2b0:	|  |         move.l 24(a0),d0
    e2b4:	|  |         move.l d0,-(sp)
    e2b6:	|  |         pea 7 <_start+0x7>
    e2ba:	|  |         lea 16(sp),a0
    e2be:	|  |         move.l a0,-(sp)
    e2c0:	|  |         jsr 14610 <getValueType>
    e2c6:	|  |         lea 12(sp),sp
    e2ca:	|  |         tst.w d0
    e2cc:	|  |     ,-- bne.s e2d2 <sayCore+0xe2>
    e2ce:	|  |     |   moveq #1,d0
    e2d0:	|  +-----|-- bra.s e348 <sayCore+0x158>
			trimStack (&fun -> stack);
    e2d2:	|  |     '-> moveq #24,d0
    e2d4:	|  |         add.l 36(sp),d0
    e2d8:	|  |         move.l d0,-(sp)
    e2da:	|  |         jsr 14f94 <trimStack>
    e2e0:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e2e2:	|  |         movea.w 6(sp),a0
    e2e6:	|  |         move.l 12(sp),d1
    e2ea:	|  |         move.l 8(sp),d0
    e2ee:	|  |         move.l a0,-(sp)
    e2f0:	|  |         move.l d1,-(sp)
    e2f2:	|  |         move.l d0,-(sp)
    e2f4:	|  |         move.l 36(sp),-(sp)
    e2f8:	|  |         jsr 416a <wrapSpeech>
    e2fe:	|  |         lea 16(sp),sp
    e302:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e306:	|  |         movea.l 36(sp),a0
    e30a:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e310:	|  |         movea.l 36(sp),a0
    e314:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e31a:	|  |         move.l 24(sp),16(sp)
    e320:	|  |         move.l 1c7d8 <SysBase>,d0
    e326:	|  |         movea.l d0,a6
    e328:	|  |         movea.l 16(sp),a1
    e32c:	|  |         jsr -690(a6)
			newText = NULL;
    e330:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e334:	|  |         moveq #0,d0
    e336:	|  +-------- bra.s e348 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e338:	'--|-------> pea 196ab <PutChar+0x1b35>
    e33e:	   |         jsr 170d4 <KPrintF>
    e344:	   |         addq.l #4,sp
	return BR_ERROR;
    e346:	   |         moveq #1,d0
}
    e348:	   '-------> movea.l (sp)+,a6
    e34a:	             lea 24(sp),sp
    e34e:	             rts

0000e350 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e350:	pea 1 <_start+0x1>
    e354:	move.l 12(sp),-(sp)
    e358:	move.l 12(sp),-(sp)
    e35c:	jsr e1f0 <sayCore>
    e362:	lea 12(sp),sp
}
    e366:	rts

0000e368 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e368:	clr.l -(sp)
    e36a:	move.l 12(sp),-(sp)
    e36e:	move.l 12(sp),-(sp)
    e372:	jsr e1f0 <sayCore>
    e378:	lea 12(sp),sp
}
    e37c:	rts

0000e37e <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e37e:	jsr 14fdc <freeze>
	freezeSubs (); 
    e384:	jsr 6056 <freezeSubs>
	fun -> freezerLevel = 0;
    e38a:	movea.l 8(sp),a0
    e38e:	clr.b 56(a0)
	return BR_CONTINUE;
    e392:	moveq #2,d0
}
    e394:	rts

0000e396 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e396:	jsr 151e0 <unfreeze>
	unfreezeSubs (); 
    e39c:	jsr 74a8 <unfreezeSubs>
	return BR_CONTINUE;
    e3a2:	moveq #2,d0
}
    e3a4:	rts

0000e3a6 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e3a6:	jsr 151bc <howFrozen>
    e3ac:	move.l d0,d1
    e3ae:	moveq #28,d0
    e3b0:	add.l 8(sp),d0
    e3b4:	move.l d1,-(sp)
    e3b6:	pea 1 <_start+0x1>
    e3ba:	move.l d0,-(sp)
    e3bc:	jsr 14f02 <setVariable>
    e3c2:	lea 12(sp),sp
	return BR_CONTINUE; 
    e3c6:	moveq #2,d0
}
    e3c8:	rts

0000e3ca <builtIn_setCursor>:

builtIn(setCursor)
{
    e3ca:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e3cc:	movea.l 12(sp),a0
    e3d0:	move.l 24(a0),d0
    e3d4:	move.l d0,-(sp)
    e3d6:	jsr 14ae8 <getAnimationFromVar>
    e3dc:	addq.l #4,sp
    e3de:	move.l d0,(sp)
	pickAnimCursor (aa);
    e3e0:	move.l (sp),-(sp)
    e3e2:	jsr d6c <pickAnimCursor>
    e3e8:	addq.l #4,sp
	trimStack (&fun -> stack);
    e3ea:	moveq #24,d0
    e3ec:	add.l 12(sp),d0
    e3f0:	move.l d0,-(sp)
    e3f2:	jsr 14f94 <trimStack>
    e3f8:	addq.l #4,sp
	return BR_CONTINUE;
    e3fa:	moveq #2,d0
}
    e3fc:	addq.l #4,sp
    e3fe:	rts

0000e400 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e400:	move.l 1c794 <input+0xa>,d1
    e406:	move.l 1c88e <cameraX>,d0
    e40c:	add.l d0,d1
    e40e:	moveq #28,d0
    e410:	add.l 8(sp),d0
    e414:	move.l d1,-(sp)
    e416:	pea 1 <_start+0x1>
    e41a:	move.l d0,-(sp)
    e41c:	jsr 14f02 <setVariable>
    e422:	lea 12(sp),sp
	return BR_CONTINUE;
    e426:	moveq #2,d0
}
    e428:	rts

0000e42a <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e42a:	move.l 1c798 <input+0xe>,d1
    e430:	move.l 1c892 <cameraY>,d0
    e436:	add.l d0,d1
    e438:	moveq #28,d0
    e43a:	add.l 8(sp),d0
    e43e:	move.l d1,-(sp)
    e440:	pea 1 <_start+0x1>
    e444:	move.l d0,-(sp)
    e446:	jsr 14f02 <setVariable>
    e44c:	lea 12(sp),sp
	return BR_CONTINUE;
    e450:	moveq #2,d0
}
    e452:	rts

0000e454 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e454:	move.l 1c794 <input+0xa>,d0
    e45a:	move.l d0,-(sp)
    e45c:	jsr 17506 <__floatsisf>
    e462:	addq.l #4,sp
    e464:	move.l d0,d1
    e466:	move.l 1c16a <cameraZoom>,d0
    e46c:	move.l d0,-(sp)
    e46e:	move.l d1,-(sp)
    e470:	jsr 175b8 <__mulsf3>
    e476:	addq.l #8,sp
    e478:	move.l d0,-(sp)
    e47a:	jsr 1749e <__fixsfsi>
    e480:	addq.l #4,sp
    e482:	move.l d0,d1
    e484:	moveq #28,d0
    e486:	add.l 8(sp),d0
    e48a:	move.l d1,-(sp)
    e48c:	pea 1 <_start+0x1>
    e490:	move.l d0,-(sp)
    e492:	jsr 14f02 <setVariable>
    e498:	lea 12(sp),sp
	return BR_CONTINUE;
    e49c:	moveq #2,d0
}
    e49e:	rts

0000e4a0 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e4a0:	move.l 1c798 <input+0xe>,d0
    e4a6:	move.l d0,-(sp)
    e4a8:	jsr 17506 <__floatsisf>
    e4ae:	addq.l #4,sp
    e4b0:	move.l d0,d1
    e4b2:	move.l 1c16a <cameraZoom>,d0
    e4b8:	move.l d0,-(sp)
    e4ba:	move.l d1,-(sp)
    e4bc:	jsr 175b8 <__mulsf3>
    e4c2:	addq.l #8,sp
    e4c4:	move.l d0,-(sp)
    e4c6:	jsr 1749e <__fixsfsi>
    e4cc:	addq.l #4,sp
    e4ce:	move.l d0,d1
    e4d0:	moveq #28,d0
    e4d2:	add.l 8(sp),d0
    e4d6:	move.l d1,-(sp)
    e4d8:	pea 1 <_start+0x1>
    e4dc:	move.l d0,-(sp)
    e4de:	jsr 14f02 <setVariable>
    e4e4:	lea 12(sp),sp
	return BR_CONTINUE;
    e4e8:	moveq #2,d0
}
    e4ea:	rts

0000e4ec <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e4ec:	jsr 84da <statusBarText>
    e4f2:	move.l d0,d1
    e4f4:	moveq #28,d0
    e4f6:	add.l 8(sp),d0
    e4fa:	move.l d1,-(sp)
    e4fc:	move.l d0,-(sp)
    e4fe:	jsr 14832 <makeTextVar>
    e504:	addq.l #8,sp
	return BR_CONTINUE;
    e506:	moveq #2,d0
}
    e508:	rts

0000e50a <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e50a:	       lea -20(sp),sp
    e50e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e510:	       movea.l 32(sp),a0
    e514:	       move.l 24(a0),d0
    e518:	       move.l d0,-(sp)
    e51a:	       jsr 14be6 <getTextFromAnyVar>
    e520:	       addq.l #4,sp
    e522:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e526:	   ,-- bne.s e52e <builtIn_getMatchingFiles+0x24>
    e528:	   |   moveq #1,d0
    e52a:	,--|-- bra.w e5f0 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e52e:	|  '-> moveq #24,d0
    e530:	|      add.l 32(sp),d0
    e534:	|      move.l d0,-(sp)
    e536:	|      jsr 14f94 <trimStack>
    e53c:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e53e:	|      moveq #28,d0
    e540:	|      add.l 32(sp),d0
    e544:	|      move.l d0,-(sp)
    e546:	|      jsr 1485e <unlinkVar>
    e54c:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e54e:	|      movea.l 32(sp),a0
    e552:	|      moveq #6,d0
    e554:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e558:	|      moveq #12,d0
    e55a:	|      move.l d0,16(sp)
    e55e:	|      clr.l 12(sp)
    e562:	|      move.l 1c7d8 <SysBase>,d0
    e568:	|      movea.l d0,a6
    e56a:	|      move.l 16(sp),d0
    e56e:	|      move.l 12(sp),d1
    e572:	|      jsr -684(a6)
    e576:	|      move.l d0,8(sp)
    e57a:	|      move.l 8(sp),d0
    e57e:	|      movea.l 32(sp),a0
    e582:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e586:	|      moveq #32,d0
    e588:	|      add.l 32(sp),d0
    e58c:	|  ,-- bne.s e592 <builtIn_getMatchingFiles+0x88>
    e58e:	|  |   moveq #1,d0
    e590:	+--|-- bra.s e5f0 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e592:	|  '-> movea.l 32(sp),a0
    e596:	|      movea.l 32(a0),a0
    e59a:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e59c:	|      movea.l 32(sp),a0
    e5a0:	|      movea.l 32(a0),a0
    e5a4:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e5a8:	|      movea.l 32(sp),a0
    e5ac:	|      movea.l 32(a0),a0
    e5b0:	|      moveq #1,d0
    e5b2:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e5b6:	|      movea.l 32(sp),a0
    e5ba:	|      move.l 32(a0),d0
    e5be:	|      move.l 20(sp),-(sp)
    e5c2:	|      move.l d0,-(sp)
    e5c4:	|      jsr 143cc <getSavedGamesStack>
    e5ca:	|      addq.l #8,sp
    e5cc:	|      tst.w d0
    e5ce:	|  ,-- bne.s e5d4 <builtIn_getMatchingFiles+0xca>
    e5d0:	|  |   moveq #1,d0
    e5d2:	+--|-- bra.s e5f0 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e5d4:	|  '-> move.l 20(sp),4(sp)
    e5da:	|      move.l 1c7d8 <SysBase>,d0
    e5e0:	|      movea.l d0,a6
    e5e2:	|      movea.l 4(sp),a1
    e5e6:	|      jsr -690(a6)
	newText = NULL;
    e5ea:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e5ee:	|      moveq #2,d0
}
    e5f0:	'----> movea.l (sp)+,a6
    e5f2:	       lea 20(sp),sp
    e5f6:	       rts

0000e5f8 <builtIn_saveGame>:

builtIn(saveGame)
{
    e5f8:	       lea -12(sp),sp
    e5fc:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e5fe:	       movea.l 24(sp),a0
    e602:	       move.l 24(a0),d0
    e606:	       move.l d0,-(sp)
    e608:	       jsr 14be6 <getTextFromAnyVar>
    e60e:	       addq.l #4,sp
    e610:	       move.l d0,1c7a4 <loadNow>
    trimStack(&fun->stack);
    e616:	       moveq #24,d0
    e618:	       add.l 24(sp),d0
    e61c:	       move.l d0,-(sp)
    e61e:	       jsr 14f94 <trimStack>
    e624:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e626:	       move.l 1c7a4 <loadNow>,d0
    e62c:	       move.l d0,-(sp)
    e62e:	       jsr 2fe <encodeFilename>
    e634:	       addq.l #4,sp
    e636:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e63a:	       move.l 1c7a4 <loadNow>,8(sp)
    e642:	       move.l 1c7d8 <SysBase>,d0
    e648:	       movea.l d0,a6
    e64a:	       movea.l 8(sp),a1
    e64e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e652:	       move.l 12(sp),-(sp)
    e656:	       jsr e162 <failSecurityCheck>
    e65c:	       addq.l #4,sp
    e65e:	       tst.w d0
    e660:	   ,-- beq.s e666 <builtIn_saveGame+0x6e>
    e662:	   |   moveq #1,d0
    e664:	,--|-- bra.s e6b6 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e666:	|  '-> move.l 12(sp),-(sp)
    e66a:	|      pea 196d9 <PutChar+0x1b63>
    e670:	|      jsr 13b3c <joinStrings>
    e676:	|      addq.l #8,sp
    e678:	|      move.l d0,1c7a4 <loadNow>
    FreeVec(aaaaa);
    e67e:	|      move.l 12(sp),4(sp)
    e684:	|      move.l 1c7d8 <SysBase>,d0
    e68a:	|      movea.l d0,a6
    e68c:	|      movea.l 4(sp),a1
    e690:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e694:	|      moveq #28,d0
    e696:	|      add.l 24(sp),d0
    e69a:	|      clr.l -(sp)
    e69c:	|      pea 1 <_start+0x1>
    e6a0:	|      move.l d0,-(sp)
    e6a2:	|      jsr 14f02 <setVariable>
    e6a8:	|      lea 12(sp),sp
    saverFunc = fun;
    e6ac:	|      move.l 24(sp),1c89e <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e6b4:	|      moveq #0,d0
}
    e6b6:	'----> movea.l (sp)+,a6
    e6b8:	       lea 12(sp),sp
    e6bc:	       rts

0000e6be <builtIn_fileExists>:

builtIn(fileExists)
{
    e6be:	       lea -36(sp),sp
    e6c2:	       move.l a6,-(sp)
    e6c4:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e6c6:	       movea.l 52(sp),a0
    e6ca:	       move.l 24(a0),d0
    e6ce:	       move.l d0,-(sp)
    e6d0:	       jsr 14be6 <getTextFromAnyVar>
    e6d6:	       addq.l #4,sp
    e6d8:	       move.l d0,1c7a4 <loadNow>
    trimStack(&fun->stack);
    e6de:	       moveq #24,d0
    e6e0:	       add.l 52(sp),d0
    e6e4:	       move.l d0,-(sp)
    e6e6:	       jsr 14f94 <trimStack>
    e6ec:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e6ee:	       move.l 1c7a4 <loadNow>,d0
    e6f4:	       move.l d0,-(sp)
    e6f6:	       jsr 2fe <encodeFilename>
    e6fc:	       addq.l #4,sp
    e6fe:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e702:	       move.l 1c7a4 <loadNow>,36(sp)
    e70a:	       move.l 1c7d8 <SysBase>,d0
    e710:	       movea.l d0,a6
    e712:	       movea.l 36(sp),a1
    e716:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e71a:	       move.l 40(sp),-(sp)
    e71e:	       jsr e162 <failSecurityCheck>
    e724:	       addq.l #4,sp
    e726:	       tst.w d0
    e728:	   ,-- beq.s e730 <builtIn_fileExists+0x72>
    e72a:	   |   moveq #1,d0
    e72c:	,--|-- bra.w e7d0 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e730:	|  '-> move.l 40(sp),32(sp)
    e736:	|      move.l #1005,28(sp)
    e73e:	|      move.l 1c7e0 <DOSBase>,d0
    e744:	|      movea.l d0,a6
    e746:	|      move.l 32(sp),d1
    e74a:	|      move.l 28(sp),d2
    e74e:	|      jsr -30(a6)
    e752:	|      move.l d0,24(sp)
    e756:	|      move.l 24(sp),d0
    e75a:	|      move.l d0,20(sp)
    if (!fp) {        
    e75e:	|  ,-- bne.s e76e <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e760:	|  |   pea 196db <PutChar+0x1b65>
    e766:	|  |   jsr 170d4 <KPrintF>
    e76c:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e76e:	|  '-> tst.l 20(sp)
    e772:	|      sne d0
    e774:	|      neg.b d0
    e776:	|      moveq #0,d1
    e778:	|      move.b d0,d1
    e77a:	|      moveq #28,d0
    e77c:	|      add.l 52(sp),d0
    e780:	|      move.l d1,-(sp)
    e782:	|      pea 1 <_start+0x1>
    e786:	|      move.l d0,-(sp)
    e788:	|      jsr 14f02 <setVariable>
    e78e:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e792:	|      tst.l 20(sp)
    e796:	|  ,-- beq.s e7b2 <builtIn_fileExists+0xf4>
    e798:	|  |   move.l 20(sp),16(sp)
    e79e:	|  |   move.l 1c7e0 <DOSBase>,d0
    e7a4:	|  |   movea.l d0,a6
    e7a6:	|  |   move.l 16(sp),d1
    e7aa:	|  |   jsr -36(a6)
    e7ae:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e7b2:	|  '-> move.l 40(sp),8(sp)
    e7b8:	|      move.l 1c7d8 <SysBase>,d0
    e7be:	|      movea.l d0,a6
    e7c0:	|      movea.l 8(sp),a1
    e7c4:	|      jsr -690(a6)
    loadNow = NULL;
    e7c8:	|      clr.l 1c7a4 <loadNow>
    return BR_CONTINUE;
    e7ce:	|      moveq #2,d0
}
    e7d0:	'----> move.l (sp)+,d2
    e7d2:	       movea.l (sp)+,a6
    e7d4:	       lea 36(sp),sp
    e7d8:	       rts

0000e7da <builtIn_loadGame>:

builtIn(loadGame)
{
    e7da:	       lea -36(sp),sp
    e7de:	       move.l a6,-(sp)
    e7e0:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e7e2:	       movea.l 52(sp),a0
    e7e6:	       move.l 24(a0),d0
    e7ea:	       move.l d0,-(sp)
    e7ec:	       jsr 14be6 <getTextFromAnyVar>
    e7f2:	       addq.l #4,sp
    e7f4:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e7f8:	       moveq #24,d0
    e7fa:	       add.l 52(sp),d0
    e7fe:	       move.l d0,-(sp)
    e800:	       jsr 14f94 <trimStack>
    e806:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e808:	       move.l 40(sp),-(sp)
    e80c:	       jsr 2fe <encodeFilename>
    e812:	       addq.l #4,sp
    e814:	       move.l d0,1c7a4 <loadNow>
    FreeVec(aaaaa);
    e81a:	       move.l 40(sp),36(sp)
    e820:	       move.l 1c7d8 <SysBase>,d0
    e826:	       movea.l d0,a6
    e828:	       movea.l 36(sp),a1
    e82c:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e830:	       move.l 1c7a4 <loadNow>,d0
    e836:	       move.l d0,-(sp)
    e838:	       jsr e162 <failSecurityCheck>
    e83e:	       addq.l #4,sp
    e840:	       tst.w d0
    e842:	   ,-- beq.s e848 <builtIn_loadGame+0x6e>
    e844:	   |   moveq #1,d0
    e846:	,--|-- bra.s e8b8 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e848:	|  '-> move.l 1c7a4 <loadNow>,32(sp)
    e850:	|      move.l #1005,28(sp)
    e858:	|      move.l 1c7e0 <DOSBase>,d0
    e85e:	|      movea.l d0,a6
    e860:	|      move.l 32(sp),d1
    e864:	|      move.l 28(sp),d2
    e868:	|      jsr -30(a6)
    e86c:	|      move.l d0,24(sp)
    e870:	|      move.l 24(sp),d0
    e874:	|      move.l d0,20(sp)
    if (fp) {
    e878:	|  ,-- beq.s e898 <builtIn_loadGame+0xbe>
        Close(fp);
    e87a:	|  |   move.l 20(sp),12(sp)
    e880:	|  |   move.l 1c7e0 <DOSBase>,d0
    e886:	|  |   movea.l d0,a6
    e888:	|  |   move.l 12(sp),d1
    e88c:	|  |   jsr -36(a6)
    e890:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e894:	|  |   moveq #0,d0
    e896:	+--|-- bra.s e8b8 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e898:	|  '-> move.l 1c7a4 <loadNow>,16(sp)
    e8a0:	|      move.l 1c7d8 <SysBase>,d0
    e8a6:	|      movea.l d0,a6
    e8a8:	|      movea.l 16(sp),a1
    e8ac:	|      jsr -690(a6)
    loadNow = NULL;
    e8b0:	|      clr.l 1c7a4 <loadNow>
    return BR_CONTINUE;
    e8b6:	|      moveq #2,d0
}
    e8b8:	'----> move.l (sp)+,d2
    e8ba:	       movea.l (sp)+,a6
    e8bc:	       lea 36(sp),sp
    e8c0:	       rts

0000e8c2 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e8c2:	move.l 1c874 <sceneHeight>,d0
    e8c8:	move.l d0,d1
    e8ca:	move.l 1c870 <sceneWidth>,d0
    e8d0:	move.l d1,-(sp)
    e8d2:	move.l d0,-(sp)
    e8d4:	clr.l -(sp)
    e8d6:	clr.l -(sp)
    e8d8:	jsr d056 <blankScreen>
    e8de:	lea 16(sp),sp
	return BR_CONTINUE;
    e8e2:	moveq #2,d0
}
    e8e4:	rts

0000e8e6 <builtIn_blankArea>:

builtIn(blankArea)
{
    e8e6:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e8ea:	       movea.l 24(sp),a0
    e8ee:	       move.l 24(a0),d0
    e8f2:	       move.l d0,-(sp)
    e8f4:	       pea 1 <_start+0x1>
    e8f8:	       lea 8(sp),a0
    e8fc:	       move.l a0,-(sp)
    e8fe:	       jsr 14610 <getValueType>
    e904:	       lea 12(sp),sp
    e908:	       tst.w d0
    e90a:	   ,-- bne.s e912 <builtIn_blankArea+0x2c>
    e90c:	   |   moveq #1,d0
    e90e:	,--|-- bra.w e9e8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e912:	|  '-> moveq #24,d0
    e914:	|      add.l 24(sp),d0
    e918:	|      move.l d0,-(sp)
    e91a:	|      jsr 14f94 <trimStack>
    e920:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e922:	|      movea.l 24(sp),a0
    e926:	|      move.l 24(a0),d0
    e92a:	|      move.l d0,-(sp)
    e92c:	|      pea 1 <_start+0x1>
    e930:	|      lea 12(sp),a0
    e934:	|      move.l a0,-(sp)
    e936:	|      jsr 14610 <getValueType>
    e93c:	|      lea 12(sp),sp
    e940:	|      tst.w d0
    e942:	|  ,-- bne.s e94a <builtIn_blankArea+0x64>
    e944:	|  |   moveq #1,d0
    e946:	+--|-- bra.w e9e8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e94a:	|  '-> moveq #24,d0
    e94c:	|      add.l 24(sp),d0
    e950:	|      move.l d0,-(sp)
    e952:	|      jsr 14f94 <trimStack>
    e958:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e95a:	|      movea.l 24(sp),a0
    e95e:	|      move.l 24(a0),d0
    e962:	|      move.l d0,-(sp)
    e964:	|      pea 1 <_start+0x1>
    e968:	|      moveq #16,d0
    e96a:	|      add.l sp,d0
    e96c:	|      move.l d0,-(sp)
    e96e:	|      jsr 14610 <getValueType>
    e974:	|      lea 12(sp),sp
    e978:	|      tst.w d0
    e97a:	|  ,-- bne.s e980 <builtIn_blankArea+0x9a>
    e97c:	|  |   moveq #1,d0
    e97e:	+--|-- bra.s e9e8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e980:	|  '-> moveq #24,d0
    e982:	|      add.l 24(sp),d0
    e986:	|      move.l d0,-(sp)
    e988:	|      jsr 14f94 <trimStack>
    e98e:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e990:	|      movea.l 24(sp),a0
    e994:	|      move.l 24(a0),d0
    e998:	|      move.l d0,-(sp)
    e99a:	|      pea 1 <_start+0x1>
    e99e:	|      moveq #20,d0
    e9a0:	|      add.l sp,d0
    e9a2:	|      move.l d0,-(sp)
    e9a4:	|      jsr 14610 <getValueType>
    e9aa:	|      lea 12(sp),sp
    e9ae:	|      tst.w d0
    e9b0:	|  ,-- bne.s e9b6 <builtIn_blankArea+0xd0>
    e9b2:	|  |   moveq #1,d0
    e9b4:	+--|-- bra.s e9e8 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e9b6:	|  '-> moveq #24,d0
    e9b8:	|      add.l 24(sp),d0
    e9bc:	|      move.l d0,-(sp)
    e9be:	|      jsr 14f94 <trimStack>
    e9c4:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    e9c6:	|      movea.l (sp),a1
    e9c8:	|      movea.l 4(sp),a0
    e9cc:	|      move.l 8(sp),d1
    e9d0:	|      move.l 12(sp),d0
    e9d4:	|      move.l a1,-(sp)
    e9d6:	|      move.l a0,-(sp)
    e9d8:	|      move.l d1,-(sp)
    e9da:	|      move.l d0,-(sp)
    e9dc:	|      jsr d056 <blankScreen>
    e9e2:	|      lea 16(sp),sp
	return BR_CONTINUE;
    e9e6:	|      moveq #2,d0
}
    e9e8:	'----> lea 16(sp),sp
    e9ec:	       rts

0000e9ee <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    e9ee:	jsr d06a <darkScreen>
	return BR_CONTINUE;
    e9f4:	moveq #2,d0
}
    e9f6:	rts

0000e9f8 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    e9f8:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e9fc:	       movea.l 20(sp),a0
    ea00:	       move.l 24(a0),d0
    ea04:	       move.l d0,-(sp)
    ea06:	       pea 1 <_start+0x1>
    ea0a:	       lea 8(sp),a0
    ea0e:	       move.l a0,-(sp)
    ea10:	       jsr 14610 <getValueType>
    ea16:	       lea 12(sp),sp
    ea1a:	       tst.w d0
    ea1c:	   ,-- bne.s ea24 <builtIn_addOverlay+0x2c>
    ea1e:	   |   moveq #1,d0
    ea20:	,--|-- bra.w eabc <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea24:	|  '-> moveq #24,d0
    ea26:	|      add.l 20(sp),d0
    ea2a:	|      move.l d0,-(sp)
    ea2c:	|      jsr 14f94 <trimStack>
    ea32:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea34:	|      movea.l 20(sp),a0
    ea38:	|      move.l 24(a0),d0
    ea3c:	|      move.l d0,-(sp)
    ea3e:	|      pea 1 <_start+0x1>
    ea42:	|      moveq #12,d0
    ea44:	|      add.l sp,d0
    ea46:	|      move.l d0,-(sp)
    ea48:	|      jsr 14610 <getValueType>
    ea4e:	|      lea 12(sp),sp
    ea52:	|      tst.w d0
    ea54:	|  ,-- bne.s ea5a <builtIn_addOverlay+0x62>
    ea56:	|  |   moveq #1,d0
    ea58:	+--|-- bra.s eabc <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea5a:	|  '-> moveq #24,d0
    ea5c:	|      add.l 20(sp),d0
    ea60:	|      move.l d0,-(sp)
    ea62:	|      jsr 14f94 <trimStack>
    ea68:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea6a:	|      movea.l 20(sp),a0
    ea6e:	|      move.l 24(a0),d0
    ea72:	|      move.l d0,-(sp)
    ea74:	|      pea 5 <_start+0x5>
    ea78:	|      moveq #16,d0
    ea7a:	|      add.l sp,d0
    ea7c:	|      move.l d0,-(sp)
    ea7e:	|      jsr 14610 <getValueType>
    ea84:	|      lea 12(sp),sp
    ea88:	|      tst.w d0
    ea8a:	|  ,-- bne.s ea90 <builtIn_addOverlay+0x98>
    ea8c:	|  |   moveq #1,d0
    ea8e:	+--|-- bra.s eabc <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ea90:	|  '-> moveq #24,d0
    ea92:	|      add.l 20(sp),d0
    ea96:	|      move.l d0,-(sp)
    ea98:	|      jsr 14f94 <trimStack>
    ea9e:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    eaa0:	|      movea.l (sp),a0
    eaa2:	|      move.l 4(sp),d1
    eaa6:	|      move.l 8(sp),d0
    eaaa:	|      move.l a0,-(sp)
    eaac:	|      move.l d1,-(sp)
    eaae:	|      move.l d0,-(sp)
    eab0:	|      jsr d188 <loadBackDrop>
    eab6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eaba:	|      moveq #2,d0
}
    eabc:	'----> lea 12(sp),sp
    eac0:	       rts

0000eac2 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    eac2:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eac6:	       movea.l 20(sp),a0
    eaca:	       move.l 24(a0),d0
    eace:	       move.l d0,-(sp)
    ead0:	       pea 1 <_start+0x1>
    ead4:	       lea 8(sp),a0
    ead8:	       move.l a0,-(sp)
    eada:	       jsr 14610 <getValueType>
    eae0:	       lea 12(sp),sp
    eae4:	       tst.w d0
    eae6:	   ,-- bne.s eaee <builtIn_mixOverlay+0x2c>
    eae8:	   |   moveq #1,d0
    eaea:	,--|-- bra.w eb86 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eaee:	|  '-> moveq #24,d0
    eaf0:	|      add.l 20(sp),d0
    eaf4:	|      move.l d0,-(sp)
    eaf6:	|      jsr 14f94 <trimStack>
    eafc:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eafe:	|      movea.l 20(sp),a0
    eb02:	|      move.l 24(a0),d0
    eb06:	|      move.l d0,-(sp)
    eb08:	|      pea 1 <_start+0x1>
    eb0c:	|      moveq #12,d0
    eb0e:	|      add.l sp,d0
    eb10:	|      move.l d0,-(sp)
    eb12:	|      jsr 14610 <getValueType>
    eb18:	|      lea 12(sp),sp
    eb1c:	|      tst.w d0
    eb1e:	|  ,-- bne.s eb24 <builtIn_mixOverlay+0x62>
    eb20:	|  |   moveq #1,d0
    eb22:	+--|-- bra.s eb86 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eb24:	|  '-> moveq #24,d0
    eb26:	|      add.l 20(sp),d0
    eb2a:	|      move.l d0,-(sp)
    eb2c:	|      jsr 14f94 <trimStack>
    eb32:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    eb34:	|      movea.l 20(sp),a0
    eb38:	|      move.l 24(a0),d0
    eb3c:	|      move.l d0,-(sp)
    eb3e:	|      pea 5 <_start+0x5>
    eb42:	|      moveq #16,d0
    eb44:	|      add.l sp,d0
    eb46:	|      move.l d0,-(sp)
    eb48:	|      jsr 14610 <getValueType>
    eb4e:	|      lea 12(sp),sp
    eb52:	|      tst.w d0
    eb54:	|  ,-- bne.s eb5a <builtIn_mixOverlay+0x98>
    eb56:	|  |   moveq #1,d0
    eb58:	+--|-- bra.s eb86 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eb5a:	|  '-> moveq #24,d0
    eb5c:	|      add.l 20(sp),d0
    eb60:	|      move.l d0,-(sp)
    eb62:	|      jsr 14f94 <trimStack>
    eb68:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    eb6a:	|      movea.l (sp),a0
    eb6c:	|      move.l 4(sp),d1
    eb70:	|      move.l 8(sp),d0
    eb74:	|      move.l a0,-(sp)
    eb76:	|      move.l d1,-(sp)
    eb78:	|      move.l d0,-(sp)
    eb7a:	|      jsr d1fe <mixBackDrop>
    eb80:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eb84:	|      moveq #2,d0
}
    eb86:	'----> lea 12(sp),sp
    eb8a:	       rts

0000eb8c <builtIn_pasteImage>:

builtIn(pasteImage)
{
    eb8c:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eb90:	       movea.l 20(sp),a0
    eb94:	       move.l 24(a0),d0
    eb98:	       move.l d0,-(sp)
    eb9a:	       pea 1 <_start+0x1>
    eb9e:	       lea 8(sp),a0
    eba2:	       move.l a0,-(sp)
    eba4:	       jsr 14610 <getValueType>
    ebaa:	       lea 12(sp),sp
    ebae:	       tst.w d0
    ebb0:	   ,-- bne.s ebb8 <builtIn_pasteImage+0x2c>
    ebb2:	   |   moveq #1,d0
    ebb4:	,--|-- bra.w ec48 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ebb8:	|  '-> moveq #24,d0
    ebba:	|      add.l 20(sp),d0
    ebbe:	|      move.l d0,-(sp)
    ebc0:	|      jsr 14f94 <trimStack>
    ebc6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ebc8:	|      movea.l 20(sp),a0
    ebcc:	|      move.l 24(a0),d0
    ebd0:	|      move.l d0,-(sp)
    ebd2:	|      pea 1 <_start+0x1>
    ebd6:	|      moveq #12,d0
    ebd8:	|      add.l sp,d0
    ebda:	|      move.l d0,-(sp)
    ebdc:	|      jsr 14610 <getValueType>
    ebe2:	|      lea 12(sp),sp
    ebe6:	|      tst.w d0
    ebe8:	|  ,-- bne.s ebee <builtIn_pasteImage+0x62>
    ebea:	|  |   moveq #1,d0
    ebec:	+--|-- bra.s ec48 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ebee:	|  '-> moveq #24,d0
    ebf0:	|      add.l 20(sp),d0
    ebf4:	|      move.l d0,-(sp)
    ebf6:	|      jsr 14f94 <trimStack>
    ebfc:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    ebfe:	|      movea.l 20(sp),a0
    ec02:	|      move.l 24(a0),d0
    ec06:	|      move.l d0,-(sp)
    ec08:	|      jsr 14ae8 <getAnimationFromVar>
    ec0e:	|      addq.l #4,sp
    ec10:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ec14:	|      moveq #24,d0
    ec16:	|      add.l 20(sp),d0
    ec1a:	|      move.l d0,-(sp)
    ec1c:	|      jsr 14f94 <trimStack>
    ec22:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ec24:	|      tst.l 8(sp)
    ec28:	|  ,-- bne.s ec2e <builtIn_pasteImage+0xa2>
    ec2a:	|  |   moveq #2,d0
    ec2c:	+--|-- bra.s ec48 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    ec2e:	|  '-> move.l (sp),d1
    ec30:	|      move.l 4(sp),d0
    ec34:	|      move.l 8(sp),-(sp)
    ec38:	|      move.l d1,-(sp)
    ec3a:	|      move.l d0,-(sp)
    ec3c:	|      jsr d94 <pasteCursor>
    ec42:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    ec46:	|      moveq #2,d0
}
    ec48:	'----> lea 12(sp),sp
    ec4c:	       rts

0000ec4e <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ec4e:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec50:	       movea.l 16(sp),a0
    ec54:	       move.l 24(a0),d0
    ec58:	       move.l d0,-(sp)
    ec5a:	       pea 1 <_start+0x1>
    ec5e:	       move.l sp,d0
    ec60:	       addq.l #8,d0
    ec62:	       move.l d0,-(sp)
    ec64:	       jsr 14610 <getValueType>
    ec6a:	       lea 12(sp),sp
    ec6e:	       tst.w d0
    ec70:	   ,-- bne.s ec78 <builtIn_setSceneDimensions+0x2a>
    ec72:	   |   moveq #1,d0
    ec74:	,--|-- bra.w ed00 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ec78:	|  '-> moveq #24,d0
    ec7a:	|      add.l 16(sp),d0
    ec7e:	|      move.l d0,-(sp)
    ec80:	|      jsr 14f94 <trimStack>
    ec86:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec88:	|      movea.l 16(sp),a0
    ec8c:	|      move.l 24(a0),d0
    ec90:	|      move.l d0,-(sp)
    ec92:	|      pea 1 <_start+0x1>
    ec96:	|      moveq #12,d0
    ec98:	|      add.l sp,d0
    ec9a:	|      move.l d0,-(sp)
    ec9c:	|      jsr 14610 <getValueType>
    eca2:	|      lea 12(sp),sp
    eca6:	|      tst.w d0
    eca8:	|  ,-- bne.s ecae <builtIn_setSceneDimensions+0x60>
    ecaa:	|  |   moveq #1,d0
    ecac:	+--|-- bra.s ed00 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ecae:	|  '-> moveq #24,d0
    ecb0:	|      add.l 16(sp),d0
    ecb4:	|      move.l d0,-(sp)
    ecb6:	|      jsr 14f94 <trimStack>
    ecbc:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ecbe:	|      move.l (sp),d1
    ecc0:	|      move.l 4(sp),d0
    ecc4:	|      move.l d1,-(sp)
    ecc6:	|      move.l d0,-(sp)
    ecc8:	|      jsr d254 <resizeBackdrop>
    ecce:	|      addq.l #8,sp
    ecd0:	|      tst.w d0
    ecd2:	|  ,-- beq.s ecf0 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ecd4:	|  |   move.l (sp),d1
    ecd6:	|  |   move.l 4(sp),d0
    ecda:	|  |   move.l d1,-(sp)
    ecdc:	|  |   move.l d0,-(sp)
    ecde:	|  |   clr.l -(sp)
    ece0:	|  |   clr.l -(sp)
    ece2:	|  |   jsr d056 <blankScreen>
    ece8:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    ecec:	|  |   moveq #2,d0
    ecee:	+--|-- bra.s ed00 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    ecf0:	|  '-> pea 196f9 <PutChar+0x1b83>
    ecf6:	|      jsr 170d4 <KPrintF>
    ecfc:	|      addq.l #4,sp
	return BR_ERROR;
    ecfe:	|      moveq #1,d0
}
    ed00:	'----> addq.l #8,sp
    ed02:	       rts

0000ed04 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    ed04:	          move.l d3,-(sp)
    ed06:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed08:	          movea.l 16(sp),a0
    ed0c:	          move.l 24(a0),d0
    ed10:	          move.l d0,-(sp)
    ed12:	          pea 1 <_start+0x1>
    ed16:	          pea 1c892 <cameraY>
    ed1c:	          jsr 14610 <getValueType>
    ed22:	          lea 12(sp),sp
    ed26:	          tst.w d0
    ed28:	      ,-- bne.s ed30 <builtIn_aimCamera+0x2c>
    ed2a:	      |   moveq #1,d0
    ed2c:	,-----|-- bra.w efb2 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ed30:	|     '-> moveq #24,d0
    ed32:	|         add.l 16(sp),d0
    ed36:	|         move.l d0,-(sp)
    ed38:	|         jsr 14f94 <trimStack>
    ed3e:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed40:	|         movea.l 16(sp),a0
    ed44:	|         move.l 24(a0),d0
    ed48:	|         move.l d0,-(sp)
    ed4a:	|         pea 1 <_start+0x1>
    ed4e:	|         pea 1c88e <cameraX>
    ed54:	|         jsr 14610 <getValueType>
    ed5a:	|         lea 12(sp),sp
    ed5e:	|         tst.w d0
    ed60:	|     ,-- bne.s ed68 <builtIn_aimCamera+0x64>
    ed62:	|     |   moveq #1,d0
    ed64:	+-----|-- bra.w efb2 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    ed68:	|     '-> moveq #24,d0
    ed6a:	|         add.l 16(sp),d0
    ed6e:	|         move.l d0,-(sp)
    ed70:	|         jsr 14f94 <trimStack>
    ed76:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    ed78:	|         move.l 1c88e <cameraX>,d0
    ed7e:	|         move.l d0,-(sp)
    ed80:	|         jsr 17506 <__floatsisf>
    ed86:	|         addq.l #4,sp
    ed88:	|         move.l d0,d2
    ed8a:	|         move.l 1c72c <winWidth>,d0
    ed90:	|         lsr.l #1,d0
    ed92:	|         move.l d0,-(sp)
    ed94:	|         jsr 1752e <__floatunsisf>
    ed9a:	|         addq.l #4,sp
    ed9c:	|         move.l d0,d1
    ed9e:	|         move.l 1c16a <cameraZoom>,d0
    eda4:	|         move.l d0,-(sp)
    eda6:	|         move.l d1,-(sp)
    eda8:	|         jsr 173bc <__divsf3>
    edae:	|         addq.l #8,sp
    edb0:	|         move.l d0,-(sp)
    edb2:	|         move.l d2,-(sp)
    edb4:	|         jsr 177fa <__subsf3>
    edba:	|         addq.l #8,sp
    edbc:	|         move.l d0,-(sp)
    edbe:	|         jsr 1749e <__fixsfsi>
    edc4:	|         addq.l #4,sp
    edc6:	|         move.l d0,1c88e <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    edcc:	|         move.l 1c892 <cameraY>,d0
    edd2:	|         move.l d0,-(sp)
    edd4:	|         jsr 17506 <__floatsisf>
    edda:	|         addq.l #4,sp
    eddc:	|         move.l d0,d2
    edde:	|         move.l 1c730 <winHeight>,d0
    ede4:	|         lsr.l #1,d0
    ede6:	|         move.l d0,-(sp)
    ede8:	|         jsr 1752e <__floatunsisf>
    edee:	|         addq.l #4,sp
    edf0:	|         move.l d0,d1
    edf2:	|         move.l 1c16a <cameraZoom>,d0
    edf8:	|         move.l d0,-(sp)
    edfa:	|         move.l d1,-(sp)
    edfc:	|         jsr 173bc <__divsf3>
    ee02:	|         addq.l #8,sp
    ee04:	|         move.l d0,-(sp)
    ee06:	|         move.l d2,-(sp)
    ee08:	|         jsr 177fa <__subsf3>
    ee0e:	|         addq.l #8,sp
    ee10:	|         move.l d0,-(sp)
    ee12:	|         jsr 1749e <__fixsfsi>
    ee18:	|         addq.l #4,sp
    ee1a:	|         move.l d0,1c892 <cameraY>

	if (cameraX < 0) cameraX = 0;
    ee20:	|         move.l 1c88e <cameraX>,d0
    ee26:	|     ,-- bpl.s ee32 <builtIn_aimCamera+0x12e>
    ee28:	|     |   clr.l 1c88e <cameraX>
    ee2e:	|  ,--|-- bra.w eee8 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ee32:	|  |  '-> move.l 1c88e <cameraX>,d0
    ee38:	|  |      move.l d0,-(sp)
    ee3a:	|  |      jsr 17506 <__floatsisf>
    ee40:	|  |      addq.l #4,sp
    ee42:	|  |      move.l d0,d2
    ee44:	|  |      move.l 1c870 <sceneWidth>,d0
    ee4a:	|  |      move.l d0,-(sp)
    ee4c:	|  |      jsr 1752e <__floatunsisf>
    ee52:	|  |      addq.l #4,sp
    ee54:	|  |      move.l d0,d3
    ee56:	|  |      move.l 1c72c <winWidth>,d0
    ee5c:	|  |      move.l d0,-(sp)
    ee5e:	|  |      jsr 1752e <__floatunsisf>
    ee64:	|  |      addq.l #4,sp
    ee66:	|  |      move.l d0,d1
    ee68:	|  |      move.l 1c16a <cameraZoom>,d0
    ee6e:	|  |      move.l d0,-(sp)
    ee70:	|  |      move.l d1,-(sp)
    ee72:	|  |      jsr 173bc <__divsf3>
    ee78:	|  |      addq.l #8,sp
    ee7a:	|  |      move.l d0,-(sp)
    ee7c:	|  |      move.l d3,-(sp)
    ee7e:	|  |      jsr 177fa <__subsf3>
    ee84:	|  |      addq.l #8,sp
    ee86:	|  |      move.l d0,-(sp)
    ee88:	|  |      move.l d2,-(sp)
    ee8a:	|  |      jsr 17672 <__gtsf2>
    ee90:	|  |      addq.l #8,sp
    ee92:	|  |      tst.l d0
    ee94:	|  +----- ble.s eee8 <builtIn_aimCamera+0x1e4>
    ee96:	|  |      move.l 1c870 <sceneWidth>,d0
    ee9c:	|  |      move.l d0,-(sp)
    ee9e:	|  |      jsr 1752e <__floatunsisf>
    eea4:	|  |      addq.l #4,sp
    eea6:	|  |      move.l d0,d2
    eea8:	|  |      move.l 1c72c <winWidth>,d0
    eeae:	|  |      move.l d0,-(sp)
    eeb0:	|  |      jsr 1752e <__floatunsisf>
    eeb6:	|  |      addq.l #4,sp
    eeb8:	|  |      move.l d0,d1
    eeba:	|  |      move.l 1c16a <cameraZoom>,d0
    eec0:	|  |      move.l d0,-(sp)
    eec2:	|  |      move.l d1,-(sp)
    eec4:	|  |      jsr 173bc <__divsf3>
    eeca:	|  |      addq.l #8,sp
    eecc:	|  |      move.l d0,-(sp)
    eece:	|  |      move.l d2,-(sp)
    eed0:	|  |      jsr 177fa <__subsf3>
    eed6:	|  |      addq.l #8,sp
    eed8:	|  |      move.l d0,-(sp)
    eeda:	|  |      jsr 1749e <__fixsfsi>
    eee0:	|  |      addq.l #4,sp
    eee2:	|  |      move.l d0,1c88e <cameraX>
	if (cameraY < 0) cameraY = 0;
    eee8:	|  '----> move.l 1c892 <cameraY>,d0
    eeee:	|     ,-- bpl.s eefa <builtIn_aimCamera+0x1f6>
    eef0:	|     |   clr.l 1c892 <cameraY>
    eef6:	|  ,--|-- bra.w efb0 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    eefa:	|  |  '-> move.l 1c892 <cameraY>,d0
    ef00:	|  |      move.l d0,-(sp)
    ef02:	|  |      jsr 17506 <__floatsisf>
    ef08:	|  |      addq.l #4,sp
    ef0a:	|  |      move.l d0,d2
    ef0c:	|  |      move.l 1c874 <sceneHeight>,d0
    ef12:	|  |      move.l d0,-(sp)
    ef14:	|  |      jsr 1752e <__floatunsisf>
    ef1a:	|  |      addq.l #4,sp
    ef1c:	|  |      move.l d0,d3
    ef1e:	|  |      move.l 1c730 <winHeight>,d0
    ef24:	|  |      move.l d0,-(sp)
    ef26:	|  |      jsr 1752e <__floatunsisf>
    ef2c:	|  |      addq.l #4,sp
    ef2e:	|  |      move.l d0,d1
    ef30:	|  |      move.l 1c16a <cameraZoom>,d0
    ef36:	|  |      move.l d0,-(sp)
    ef38:	|  |      move.l d1,-(sp)
    ef3a:	|  |      jsr 173bc <__divsf3>
    ef40:	|  |      addq.l #8,sp
    ef42:	|  |      move.l d0,-(sp)
    ef44:	|  |      move.l d3,-(sp)
    ef46:	|  |      jsr 177fa <__subsf3>
    ef4c:	|  |      addq.l #8,sp
    ef4e:	|  |      move.l d0,-(sp)
    ef50:	|  |      move.l d2,-(sp)
    ef52:	|  |      jsr 17672 <__gtsf2>
    ef58:	|  |      addq.l #8,sp
    ef5a:	|  |      tst.l d0
    ef5c:	|  +----- ble.s efb0 <builtIn_aimCamera+0x2ac>
    ef5e:	|  |      move.l 1c874 <sceneHeight>,d0
    ef64:	|  |      move.l d0,-(sp)
    ef66:	|  |      jsr 1752e <__floatunsisf>
    ef6c:	|  |      addq.l #4,sp
    ef6e:	|  |      move.l d0,d2
    ef70:	|  |      move.l 1c730 <winHeight>,d0
    ef76:	|  |      move.l d0,-(sp)
    ef78:	|  |      jsr 1752e <__floatunsisf>
    ef7e:	|  |      addq.l #4,sp
    ef80:	|  |      move.l d0,d1
    ef82:	|  |      move.l 1c16a <cameraZoom>,d0
    ef88:	|  |      move.l d0,-(sp)
    ef8a:	|  |      move.l d1,-(sp)
    ef8c:	|  |      jsr 173bc <__divsf3>
    ef92:	|  |      addq.l #8,sp
    ef94:	|  |      move.l d0,-(sp)
    ef96:	|  |      move.l d2,-(sp)
    ef98:	|  |      jsr 177fa <__subsf3>
    ef9e:	|  |      addq.l #8,sp
    efa0:	|  |      move.l d0,-(sp)
    efa2:	|  |      jsr 1749e <__fixsfsi>
    efa8:	|  |      addq.l #4,sp
    efaa:	|  |      move.l d0,1c892 <cameraY>
	return BR_CONTINUE;
    efb0:	|  '----> moveq #2,d0
}
    efb2:	'-------> move.l (sp)+,d2
    efb4:	          move.l (sp)+,d3
    efb6:	          rts

0000efb8 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    efb8:	       subq.l #4,sp
    efba:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    efbc:	       movea.l 16(sp),a0
    efc0:	       move.l 24(a0),d0
    efc4:	       move.l d0,-(sp)
    efc6:	       pea 1 <_start+0x1>
    efca:	       moveq #12,d0
    efcc:	       add.l sp,d0
    efce:	       move.l d0,-(sp)
    efd0:	       jsr 14610 <getValueType>
    efd6:	       lea 12(sp),sp
    efda:	       tst.w d0
    efdc:	   ,-- bne.s efe4 <builtIn_zoomCamera+0x2c>
    efde:	   |   moveq #1,d0
    efe0:	,--|-- bra.w f1de <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    efe4:	|  '-> moveq #24,d0
    efe6:	|      add.l 16(sp),d0
    efea:	|      move.l d0,-(sp)
    efec:	|      jsr 14f94 <trimStack>
    eff2:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    eff4:	|      move.l 1c794 <input+0xa>,d0
    effa:	|      move.l d0,-(sp)
    effc:	|      jsr 17506 <__floatsisf>
    f002:	|      addq.l #4,sp
    f004:	|      move.l d0,d1
    f006:	|      move.l 1c16a <cameraZoom>,d0
    f00c:	|      move.l d0,-(sp)
    f00e:	|      move.l d1,-(sp)
    f010:	|      jsr 175b8 <__mulsf3>
    f016:	|      addq.l #8,sp
    f018:	|      move.l d0,-(sp)
    f01a:	|      jsr 1749e <__fixsfsi>
    f020:	|      addq.l #4,sp
    f022:	|      move.l d0,1c794 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f028:	|      move.l 1c798 <input+0xe>,d0
    f02e:	|      move.l d0,-(sp)
    f030:	|      jsr 17506 <__floatsisf>
    f036:	|      addq.l #4,sp
    f038:	|      move.l d0,d1
    f03a:	|      move.l 1c16a <cameraZoom>,d0
    f040:	|      move.l d0,-(sp)
    f042:	|      move.l d1,-(sp)
    f044:	|      jsr 175b8 <__mulsf3>
    f04a:	|      addq.l #8,sp
    f04c:	|      move.l d0,-(sp)
    f04e:	|      jsr 1749e <__fixsfsi>
    f054:	|      addq.l #4,sp
    f056:	|      move.l d0,1c798 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f05c:	|      move.l 4(sp),d0
    f060:	|      move.l d0,-(sp)
    f062:	|      jsr 17506 <__floatsisf>
    f068:	|      addq.l #4,sp
    f06a:	|      move.l #1008981770,-(sp)
    f070:	|      move.l d0,-(sp)
    f072:	|      jsr 175b8 <__mulsf3>
    f078:	|      addq.l #8,sp
    f07a:	|      move.l d0,1c16a <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f080:	|      move.l 1c72c <winWidth>,d0
    f086:	|      move.l d0,-(sp)
    f088:	|      jsr 1752e <__floatunsisf>
    f08e:	|      addq.l #4,sp
    f090:	|      move.l d0,d1
    f092:	|      move.l 1c16a <cameraZoom>,d0
    f098:	|      move.l d0,-(sp)
    f09a:	|      move.l d1,-(sp)
    f09c:	|      jsr 173bc <__divsf3>
    f0a2:	|      addq.l #8,sp
    f0a4:	|      move.l d0,d2
    f0a6:	|      move.l 1c870 <sceneWidth>,d0
    f0ac:	|      move.l d0,-(sp)
    f0ae:	|      jsr 1752e <__floatunsisf>
    f0b4:	|      addq.l #4,sp
    f0b6:	|      move.l d0,-(sp)
    f0b8:	|      move.l d2,-(sp)
    f0ba:	|      jsr 17672 <__gtsf2>
    f0c0:	|      addq.l #8,sp
    f0c2:	|      tst.l d0
    f0c4:	|  ,-- ble.s f0fa <builtIn_zoomCamera+0x142>
    f0c6:	|  |   move.l 1c72c <winWidth>,d0
    f0cc:	|  |   move.l d0,-(sp)
    f0ce:	|  |   jsr 1752e <__floatunsisf>
    f0d4:	|  |   addq.l #4,sp
    f0d6:	|  |   move.l d0,d2
    f0d8:	|  |   move.l 1c870 <sceneWidth>,d0
    f0de:	|  |   move.l d0,-(sp)
    f0e0:	|  |   jsr 1752e <__floatunsisf>
    f0e6:	|  |   addq.l #4,sp
    f0e8:	|  |   move.l d0,-(sp)
    f0ea:	|  |   move.l d2,-(sp)
    f0ec:	|  |   jsr 173bc <__divsf3>
    f0f2:	|  |   addq.l #8,sp
    f0f4:	|  |   move.l d0,1c16a <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f0fa:	|  '-> move.l 1c730 <winHeight>,d0
    f100:	|      move.l d0,-(sp)
    f102:	|      jsr 1752e <__floatunsisf>
    f108:	|      addq.l #4,sp
    f10a:	|      move.l d0,d1
    f10c:	|      move.l 1c16a <cameraZoom>,d0
    f112:	|      move.l d0,-(sp)
    f114:	|      move.l d1,-(sp)
    f116:	|      jsr 173bc <__divsf3>
    f11c:	|      addq.l #8,sp
    f11e:	|      move.l d0,d2
    f120:	|      move.l 1c874 <sceneHeight>,d0
    f126:	|      move.l d0,-(sp)
    f128:	|      jsr 1752e <__floatunsisf>
    f12e:	|      addq.l #4,sp
    f130:	|      move.l d0,-(sp)
    f132:	|      move.l d2,-(sp)
    f134:	|      jsr 17672 <__gtsf2>
    f13a:	|      addq.l #8,sp
    f13c:	|      tst.l d0
    f13e:	|  ,-- ble.s f174 <builtIn_zoomCamera+0x1bc>
    f140:	|  |   move.l 1c730 <winHeight>,d0
    f146:	|  |   move.l d0,-(sp)
    f148:	|  |   jsr 1752e <__floatunsisf>
    f14e:	|  |   addq.l #4,sp
    f150:	|  |   move.l d0,d2
    f152:	|  |   move.l 1c874 <sceneHeight>,d0
    f158:	|  |   move.l d0,-(sp)
    f15a:	|  |   jsr 1752e <__floatunsisf>
    f160:	|  |   addq.l #4,sp
    f162:	|  |   move.l d0,-(sp)
    f164:	|  |   move.l d2,-(sp)
    f166:	|  |   jsr 173bc <__divsf3>
    f16c:	|  |   addq.l #8,sp
    f16e:	|  |   move.l d0,1c16a <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f174:	|  '-> move.l 1c794 <input+0xa>,d0
    f17a:	|      move.l d0,-(sp)
    f17c:	|      jsr 17506 <__floatsisf>
    f182:	|      addq.l #4,sp
    f184:	|      move.l d0,d1
    f186:	|      move.l 1c16a <cameraZoom>,d0
    f18c:	|      move.l d0,-(sp)
    f18e:	|      move.l d1,-(sp)
    f190:	|      jsr 173bc <__divsf3>
    f196:	|      addq.l #8,sp
    f198:	|      move.l d0,-(sp)
    f19a:	|      jsr 1749e <__fixsfsi>
    f1a0:	|      addq.l #4,sp
    f1a2:	|      move.l d0,1c794 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f1a8:	|      move.l 1c798 <input+0xe>,d0
    f1ae:	|      move.l d0,-(sp)
    f1b0:	|      jsr 17506 <__floatsisf>
    f1b6:	|      addq.l #4,sp
    f1b8:	|      move.l d0,d1
    f1ba:	|      move.l 1c16a <cameraZoom>,d0
    f1c0:	|      move.l d0,-(sp)
    f1c2:	|      move.l d1,-(sp)
    f1c4:	|      jsr 173bc <__divsf3>
    f1ca:	|      addq.l #8,sp
    f1cc:	|      move.l d0,-(sp)
    f1ce:	|      jsr 1749e <__fixsfsi>
    f1d4:	|      addq.l #4,sp
    f1d6:	|      move.l d0,1c798 <input+0xe>

	return BR_CONTINUE;
    f1dc:	|      moveq #2,d0
}
    f1de:	'----> move.l (sp)+,d2
    f1e0:	       addq.l #4,sp
    f1e2:	       rts

0000f1e4 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f1e4:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f1e6:	             tst.l 8(sp)
    f1ea:	         ,-- bne.s f1fe <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f1ec:	         |   pea 1971e <PutChar+0x1ba8>
    f1f2:	         |   jsr 170d4 <KPrintF>
    f1f8:	         |   addq.l #4,sp
		return BR_ERROR;
    f1fa:	         |   moveq #1,d0
    f1fc:	,--------|-- bra.s f25e <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f1fe:	|        '-> jsr 15cb0 <rand>
    f204:	|            move.l d0,d1
    f206:	|            move.l 8(sp),d0
    f20a:	|            move.l d0,-(sp)
    f20c:	|            move.l d1,-(sp)
    f20e:	|            jsr 17b3a <__umodsi3>
    f214:	|            addq.l #8,sp
    f216:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f218:	|     ,----- bra.s f24c <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f21a:	|  ,--|----> move.l (sp),d0
    f21c:	|  |  |      cmp.l 8(sp),d0
    f220:	|  |  |  ,-- bne.s f23c <builtIn_pickOne+0x58>
    f222:	|  |  |  |   moveq #28,d0
    f224:	|  |  |  |   add.l 12(sp),d0
    f228:	|  |  |  |   movea.l 12(sp),a0
    f22c:	|  |  |  |   move.l 24(a0),d1
    f230:	|  |  |  |   move.l d0,-(sp)
    f232:	|  |  |  |   move.l d1,-(sp)
    f234:	|  |  |  |   jsr 14aca <copyVariable>
    f23a:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f23c:	|  |  |  '-> moveq #24,d0
    f23e:	|  |  |      add.l 12(sp),d0
    f242:	|  |  |      move.l d0,-(sp)
    f244:	|  |  |      jsr 14f94 <trimStack>
    f24a:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f24c:	|  |  '----> move.l 8(sp),d0
    f250:	|  |         move.l d0,d1
    f252:	|  |         subq.l #1,d1
    f254:	|  |         move.l d1,8(sp)
    f258:	|  |         tst.l d0
    f25a:	|  '-------- bne.s f21a <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f25c:	|            moveq #2,d0
}
    f25e:	'----------> addq.l #4,sp
    f260:	             rts

0000f262 <builtIn_substring>:

builtIn(substring)
{
    f262:	       lea -40(sp),sp
    f266:	       move.l a6,-(sp)
    f268:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f26a:	       movea.l 56(sp),a0
    f26e:	       move.l 24(a0),d0
    f272:	       move.l d0,-(sp)
    f274:	       pea 1 <_start+0x1>
    f278:	       lea 16(sp),a0
    f27c:	       move.l a0,-(sp)
    f27e:	       jsr 14610 <getValueType>
    f284:	       lea 12(sp),sp
    f288:	       tst.w d0
    f28a:	   ,-- bne.s f292 <builtIn_substring+0x30>
    f28c:	   |   moveq #1,d0
    f28e:	,--|-- bra.w f40a <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f292:	|  '-> moveq #24,d0
    f294:	|      add.l 56(sp),d0
    f298:	|      move.l d0,-(sp)
    f29a:	|      jsr 14f94 <trimStack>
    f2a0:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f2a2:	|      movea.l 56(sp),a0
    f2a6:	|      move.l 24(a0),d0
    f2aa:	|      move.l d0,-(sp)
    f2ac:	|      pea 1 <_start+0x1>
    f2b0:	|      lea 20(sp),a0
    f2b4:	|      move.l a0,-(sp)
    f2b6:	|      jsr 14610 <getValueType>
    f2bc:	|      lea 12(sp),sp
    f2c0:	|      tst.w d0
    f2c2:	|  ,-- bne.s f2ca <builtIn_substring+0x68>
    f2c4:	|  |   moveq #1,d0
    f2c6:	+--|-- bra.w f40a <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f2ca:	|  '-> moveq #24,d0
    f2cc:	|      add.l 56(sp),d0
    f2d0:	|      move.l d0,-(sp)
    f2d2:	|      jsr 14f94 <trimStack>
    f2d8:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f2da:	|      movea.l 56(sp),a0
    f2de:	|      move.l 24(a0),d0
    f2e2:	|      move.l d0,-(sp)
    f2e4:	|      jsr 14be6 <getTextFromAnyVar>
    f2ea:	|      addq.l #4,sp
    f2ec:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f2f0:	|      moveq #24,d0
    f2f2:	|      add.l 56(sp),d0
    f2f6:	|      move.l d0,-(sp)
    f2f8:	|      jsr 14f94 <trimStack>
    f2fe:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f300:	|      move.l 44(sp),-(sp)
    f304:	|      jsr 13afc <strlen>
    f30a:	|      addq.l #4,sp
    f30c:	|      move.l d0,d1
    f30e:	|      move.l 12(sp),d0
    f312:	|      movea.l d0,a0
    f314:	|      move.l 8(sp),d0
    f318:	|      add.l a0,d0
    f31a:	|      cmp.l d1,d0
    f31c:	|  ,-- bls.s f352 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f31e:	|  |   move.l 44(sp),-(sp)
    f322:	|  |   jsr 13afc <strlen>
    f328:	|  |   addq.l #4,sp
    f32a:	|  |   move.l d0,d1
    f32c:	|  |   move.l 12(sp),d0
    f330:	|  |   sub.l d0,d1
    f332:	|  |   move.l d1,d0
    f334:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f338:	|  |   move.l 44(sp),-(sp)
    f33c:	|  |   jsr 13afc <strlen>
    f342:	|  |   addq.l #4,sp
    f344:	|  |   move.l d0,d1
    f346:	|  |   move.l 12(sp),d0
    f34a:	|  |   cmp.l d1,d0
    f34c:	|  +-- bls.s f352 <builtIn_substring+0xf0>
            start = 0;
    f34e:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f352:	|  '-> move.l 8(sp),d0
    f356:	|  ,-- bpl.s f35c <builtIn_substring+0xfa>
        length = 0;
    f358:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f35c:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f362:	|      move.l 12(sp),d1
    f366:	|      move.l 8(sp),d0
    f36a:	|      move.l d1,d2
    f36c:	|      add.l d0,d2
    f36e:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f372:	|      move.l 36(sp),d0
    f376:	|      sub.l 40(sp),d0
    f37a:	|      addq.l #1,d0
    f37c:	|      move.l d0,32(sp)
    f380:	|      clr.l 28(sp)
    f384:	|      move.l 1c7d8 <SysBase>,d0
    f38a:	|      movea.l d0,a6
    f38c:	|      move.l 32(sp),d0
    f390:	|      move.l 28(sp),d1
    f394:	|      jsr -684(a6)
    f398:	|      move.l d0,24(sp)
    f39c:	|      move.l 24(sp),d0
    f3a0:	|      move.l d0,20(sp)
    if (!newString) {
    f3a4:	|  ,-- bne.s f3aa <builtIn_substring+0x148>
        return BR_ERROR;
    f3a6:	|  |   moveq #1,d0
    f3a8:	+--|-- bra.s f40a <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f3aa:	|  '-> move.l 36(sp),d0
    f3ae:	|      sub.l 40(sp),d0
    f3b2:	|      move.l d0,d1
    f3b4:	|      move.l 40(sp),d0
    f3b8:	|      add.l 44(sp),d0
    f3bc:	|      move.l d1,-(sp)
    f3be:	|      move.l d0,-(sp)
    f3c0:	|      move.l 28(sp),-(sp)
    f3c4:	|      jsr 17088 <memcpy>
    f3ca:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f3ce:	|      move.l 36(sp),d0
    f3d2:	|      sub.l 40(sp),d0
    f3d6:	|      movea.l 20(sp),a0
    f3da:	|      adda.l d0,a0
    f3dc:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f3de:	|      moveq #28,d0
    f3e0:	|      add.l 56(sp),d0
    f3e4:	|      move.l 20(sp),-(sp)
    f3e8:	|      move.l d0,-(sp)
    f3ea:	|      jsr 14832 <makeTextVar>
    f3f0:	|      addq.l #8,sp
    FreeVec(newString);
    f3f2:	|      move.l 20(sp),16(sp)
    f3f8:	|      move.l 1c7d8 <SysBase>,d0
    f3fe:	|      movea.l d0,a6
    f400:	|      movea.l 16(sp),a1
    f404:	|      jsr -690(a6)
    return BR_CONTINUE;
    f408:	|      moveq #2,d0
}
    f40a:	'----> move.l (sp)+,d2
    f40c:	       movea.l (sp)+,a6
    f40e:	       lea 40(sp),sp
    f412:	       rts

0000f414 <builtIn_stringLength>:

builtIn(stringLength)
{
    f414:	subq.l #8,sp
    f416:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f418:	movea.l 20(sp),a0
    f41c:	move.l 24(a0),d0
    f420:	move.l d0,-(sp)
    f422:	jsr 14be6 <getTextFromAnyVar>
    f428:	addq.l #4,sp
    f42a:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f42e:	moveq #24,d0
    f430:	add.l 20(sp),d0
    f434:	move.l d0,-(sp)
    f436:	jsr 14f94 <trimStack>
    f43c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f43e:	move.l 8(sp),-(sp)
    f442:	jsr 13afc <strlen>
    f448:	addq.l #4,sp
    f44a:	move.l d0,d1
    f44c:	moveq #28,d0
    f44e:	add.l 20(sp),d0
    f452:	move.l d1,-(sp)
    f454:	pea 1 <_start+0x1>
    f458:	move.l d0,-(sp)
    f45a:	jsr 14f02 <setVariable>
    f460:	lea 12(sp),sp
	FreeVec(newText);
    f464:	move.l 8(sp),4(sp)
    f46a:	move.l 1c7d8 <SysBase>,d0
    f470:	movea.l d0,a6
    f472:	movea.l 4(sp),a1
    f476:	jsr -690(a6)
	return BR_CONTINUE;
    f47a:	moveq #2,d0
}
    f47c:	movea.l (sp)+,a6
    f47e:	addq.l #8,sp
    f480:	rts

0000f482 <builtIn_newStack>:

builtIn(newStack)
{
    f482:	             lea -12(sp),sp
    f486:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f488:	             moveq #28,d0
    f48a:	             add.l 24(sp),d0
    f48e:	             move.l d0,-(sp)
    f490:	             jsr 1485e <unlinkVar>
    f496:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f498:	             movea.l 24(sp),a0
    f49c:	             moveq #6,d0
    f49e:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f4a2:	             moveq #12,d1
    f4a4:	             move.l d1,12(sp)
    f4a8:	             clr.l 8(sp)
    f4ac:	             move.l 1c7d8 <SysBase>,d0
    f4b2:	             movea.l d0,a6
    f4b4:	             move.l 12(sp),d0
    f4b8:	             move.l 8(sp),d1
    f4bc:	             jsr -684(a6)
    f4c0:	             move.l d0,4(sp)
    f4c4:	             move.l 4(sp),d0
    f4c8:	             movea.l 24(sp),a0
    f4cc:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f4d0:	             movea.l 24(sp),a0
    f4d4:	             move.l 32(a0),d0
    f4d8:	         ,-- bne.s f4e0 <builtIn_newStack+0x5e>
    f4da:	         |   moveq #1,d0
    f4dc:	,--------|-- bra.w f572 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f4e0:	|        '-> movea.l 24(sp),a0
    f4e4:	|            movea.l 32(a0),a0
    f4e8:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f4ea:	|            movea.l 24(sp),a0
    f4ee:	|            movea.l 32(a0),a0
    f4f2:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f4f6:	|            movea.l 24(sp),a0
    f4fa:	|            movea.l 32(a0),a0
    f4fe:	|            moveq #1,d0
    f500:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f504:	|     ,----- bra.s f560 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f506:	|  ,--|----> movea.l 24(sp),a0
    f50a:	|  |  |      move.l 32(a0),d0
    f50e:	|  |  |      move.l d0,d1
    f510:	|  |  |      movea.l 24(sp),a0
    f514:	|  |  |      move.l 24(a0),d0
    f518:	|  |  |      move.l d1,-(sp)
    f51a:	|  |  |      move.l d0,-(sp)
    f51c:	|  |  |      jsr 13e4c <addVarToStack>
    f522:	|  |  |      addq.l #8,sp
    f524:	|  |  |      tst.w d0
    f526:	|  |  |  ,-- bne.s f52c <builtIn_newStack+0xaa>
    f528:	|  |  |  |   moveq #1,d0
    f52a:	+--|--|--|-- bra.s f572 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f52c:	|  |  |  '-> movea.l 24(sp),a0
    f530:	|  |  |      movea.l 32(a0),a0
    f534:	|  |  |      move.l 4(a0),d0
    f538:	|  |  |  ,-- bne.s f550 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f53a:	|  |  |  |   movea.l 24(sp),a0
    f53e:	|  |  |  |   movea.l 32(a0),a1
    f542:	|  |  |  |   movea.l 24(sp),a0
    f546:	|  |  |  |   movea.l 32(a0),a0
    f54a:	|  |  |  |   move.l (a1),d0
    f54c:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f550:	|  |  |  '-> moveq #24,d0
    f552:	|  |  |      add.l 24(sp),d0
    f556:	|  |  |      move.l d0,-(sp)
    f558:	|  |  |      jsr 14f94 <trimStack>
    f55e:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f560:	|  |  '----> move.l 20(sp),d0
    f564:	|  |         move.l d0,d1
    f566:	|  |         subq.l #1,d1
    f568:	|  |         move.l d1,20(sp)
    f56c:	|  |         tst.l d0
    f56e:	|  '-------- bne.s f506 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f570:	|            moveq #2,d0
}
    f572:	'----------> movea.l (sp)+,a6
    f574:	             lea 12(sp),sp
    f578:	             rts

0000f57a <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f57a:	          movea.l 8(sp),a0
    f57e:	          movea.l 24(a0),a0
    f582:	          move.l (a0),d0
    f584:	          moveq #6,d1
    f586:	          cmp.l d0,d1
    f588:	      ,-- beq.s f5a4 <builtIn_stackSize+0x2a>
    f58a:	      |   moveq #10,d1
    f58c:	      |   cmp.l d0,d1
    f58e:	   ,--|-- beq.s f5e8 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f590:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f592:	   |  |   pea 19751 <PutChar+0x1bdb>
    f598:	   |  |   jsr 170d4 <KPrintF>
    f59e:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f5a0:	   |  |   moveq #1,d0
    f5a2:	,--|--|-- bra.s f622 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f5a4:	|  |  '-> movea.l 8(sp),a0
    f5a8:	|  |      movea.l 24(a0),a0
    f5ac:	|  |      move.l 4(a0),d0
    f5b0:	|  |      move.l d0,-(sp)
    f5b2:	|  |      jsr 14f70 <stackSize>
    f5b8:	|  |      addq.l #4,sp
    f5ba:	|  |      move.l d0,d1
    f5bc:	|  |      moveq #28,d0
    f5be:	|  |      add.l 8(sp),d0
    f5c2:	|  |      move.l d1,-(sp)
    f5c4:	|  |      pea 1 <_start+0x1>
    f5c8:	|  |      move.l d0,-(sp)
    f5ca:	|  |      jsr 14f02 <setVariable>
    f5d0:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f5d4:	|  |      moveq #24,d0
    f5d6:	|  |      add.l 8(sp),d0
    f5da:	|  |      move.l d0,-(sp)
    f5dc:	|  |      jsr 14f94 <trimStack>
    f5e2:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f5e4:	|  |      moveq #2,d0
    f5e6:	+--|----- bra.s f622 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f5e8:	|  '----> movea.l 8(sp),a0
    f5ec:	|         movea.l 24(a0),a0
    f5f0:	|         movea.l 4(a0),a0
    f5f4:	|         move.l 4(a0),d1
    f5f8:	|         moveq #28,d0
    f5fa:	|         add.l 8(sp),d0
    f5fe:	|         move.l d1,-(sp)
    f600:	|         pea 1 <_start+0x1>
    f604:	|         move.l d0,-(sp)
    f606:	|         jsr 14f02 <setVariable>
    f60c:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f610:	|         moveq #24,d0
    f612:	|         add.l 8(sp),d0
    f616:	|         move.l d0,-(sp)
    f618:	|         jsr 14f94 <trimStack>
    f61e:	|         addq.l #4,sp
			return BR_CONTINUE;
    f620:	|         moveq #2,d0
}
    f622:	'-------> rts

0000f624 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f624:	       movea.l 8(sp),a0
    f628:	       movea.l 24(a0),a0
    f62c:	       move.l (a0),d0
    f62e:	       moveq #6,d1
    f630:	       cmp.l d0,d1
    f632:	   ,-- beq.s f646 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f634:	   |   pea 1977a <PutChar+0x1c04>
    f63a:	   |   jsr 170d4 <KPrintF>
    f640:	   |   addq.l #4,sp
		return BR_ERROR;
    f642:	   |   moveq #1,d0
    f644:	,--|-- bra.s f67a <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f646:	|  '-> moveq #28,d0
    f648:	|      add.l 8(sp),d0
    f64c:	|      movea.l 8(sp),a0
    f650:	|      move.l 24(a0),d1
    f654:	|      move.l d0,-(sp)
    f656:	|      move.l d1,-(sp)
    f658:	|      jsr 14116 <copyStack>
    f65e:	|      addq.l #8,sp
    f660:	|      tst.w d0
    f662:	|  ,-- bne.s f668 <builtIn_copyStack+0x44>
    f664:	|  |   moveq #1,d0
    f666:	+--|-- bra.s f67a <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f668:	|  '-> moveq #24,d0
    f66a:	|      add.l 8(sp),d0
    f66e:	|      move.l d0,-(sp)
    f670:	|      jsr 14f94 <trimStack>
    f676:	|      addq.l #4,sp
	return BR_CONTINUE;
    f678:	|      moveq #2,d0
}
    f67a:	'----> rts

0000f67c <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f67c:	       movea.l 8(sp),a0
    f680:	       movea.l 24(a0),a0
    f684:	       movea.l 8(a0),a0
    f688:	       move.l (a0),d0
    f68a:	       moveq #6,d1
    f68c:	       cmp.l d0,d1
    f68e:	   ,-- beq.s f6a4 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f690:	   |   pea 19793 <PutChar+0x1c1d>
    f696:	   |   jsr 170d4 <KPrintF>
    f69c:	   |   addq.l #4,sp
		return BR_ERROR;
    f69e:	   |   moveq #1,d0
    f6a0:	,--|-- bra.w f732 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f6a4:	|  '-> movea.l 8(sp),a0
    f6a8:	|      movea.l 24(a0),a0
    f6ac:	|      movea.l 8(a0),a0
    f6b0:	|      move.l 4(a0),d0
    f6b4:	|      move.l d0,d1
    f6b6:	|      movea.l 8(sp),a0
    f6ba:	|      move.l 24(a0),d0
    f6be:	|      move.l d1,-(sp)
    f6c0:	|      move.l d0,-(sp)
    f6c2:	|      jsr 13e4c <addVarToStack>
    f6c8:	|      addq.l #8,sp
    f6ca:	|      tst.w d0
    f6cc:	|  ,-- bne.s f6d2 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f6ce:	|  |   moveq #1,d0
    f6d0:	+--|-- bra.s f732 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f6d2:	|  '-> movea.l 8(sp),a0
    f6d6:	|      movea.l 24(a0),a0
    f6da:	|      movea.l 8(a0),a0
    f6de:	|      movea.l 4(a0),a0
    f6e2:	|      movea.l (a0),a0
    f6e4:	|      move.l 8(a0),d0
    f6e8:	|  ,-- bne.s f710 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f6ea:	|  |   movea.l 8(sp),a0
    f6ee:	|  |   movea.l 24(a0),a0
    f6f2:	|  |   movea.l 8(a0),a0
    f6f6:	|  |   movea.l 4(a0),a1
    f6fa:	|  |   movea.l 8(sp),a0
    f6fe:	|  |   movea.l 24(a0),a0
    f702:	|  |   movea.l 8(a0),a0
    f706:	|  |   movea.l 4(a0),a0
    f70a:	|  |   move.l (a1),d0
    f70c:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f710:	|  '-> moveq #24,d0
    f712:	|      add.l 8(sp),d0
    f716:	|      move.l d0,-(sp)
    f718:	|      jsr 14f94 <trimStack>
    f71e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f720:	|      moveq #24,d0
    f722:	|      add.l 8(sp),d0
    f726:	|      move.l d0,-(sp)
    f728:	|      jsr 14f94 <trimStack>
    f72e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f730:	|      moveq #2,d0
}
    f732:	'----> rts

0000f734 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f734:	             movea.l 8(sp),a0
    f738:	             movea.l 24(a0),a0
    f73c:	             movea.l 8(a0),a0
    f740:	             move.l (a0),d0
    f742:	             moveq #6,d1
    f744:	             cmp.l d0,d1
    f746:	         ,-- beq.s f75c <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f748:	         |   pea 19793 <PutChar+0x1c1d>
    f74e:	         |   jsr 170d4 <KPrintF>
    f754:	         |   addq.l #4,sp
		return BR_ERROR;
    f756:	         |   moveq #1,d0
    f758:	,--------|-- bra.w f84a <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f75c:	|        '-> movea.l 8(sp),a0
    f760:	|            movea.l 24(a0),a0
    f764:	|            movea.l 8(a0),a0
    f768:	|            movea.l 4(a0),a0
    f76c:	|            move.l (a0),d0
    f76e:	|     ,----- bne.s f7c8 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f770:	|     |      movea.l 8(sp),a0
    f774:	|     |      movea.l 24(a0),a0
    f778:	|     |      movea.l 8(a0),a0
    f77c:	|     |      move.l 4(a0),d0
    f780:	|     |      move.l d0,d1
    f782:	|     |      movea.l 8(sp),a0
    f786:	|     |      move.l 24(a0),d0
    f78a:	|     |      move.l d1,-(sp)
    f78c:	|     |      move.l d0,-(sp)
    f78e:	|     |      jsr 13e4c <addVarToStack>
    f794:	|     |      addq.l #8,sp
    f796:	|     |      tst.w d0
    f798:	|     |  ,-- bne.s f7a0 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f79a:	|     |  |   moveq #1,d0
    f79c:	+-----|--|-- bra.w f84a <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f7a0:	|     |  '-> movea.l 8(sp),a0
    f7a4:	|     |      movea.l 24(a0),a0
    f7a8:	|     |      movea.l 8(a0),a0
    f7ac:	|     |      movea.l 4(a0),a1
    f7b0:	|     |      movea.l 8(sp),a0
    f7b4:	|     |      movea.l 24(a0),a0
    f7b8:	|     |      movea.l 8(a0),a0
    f7bc:	|     |      movea.l 4(a0),a0
    f7c0:	|     |      move.l (a1),d0
    f7c2:	|     |      move.l d0,4(a0)
    f7c6:	|  ,--|----- bra.s f828 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f7c8:	|  |  '----> movea.l 8(sp),a0
    f7cc:	|  |         movea.l 24(a0),a0
    f7d0:	|  |         movea.l 8(a0),a0
    f7d4:	|  |         movea.l 4(a0),a0
    f7d8:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f7dc:	|  |         move.l d0,d1
    f7de:	|  |         addq.l #8,d1
    f7e0:	|  |         movea.l 8(sp),a0
    f7e4:	|  |         move.l 24(a0),d0
    f7e8:	|  |         move.l d1,-(sp)
    f7ea:	|  |         move.l d0,-(sp)
    f7ec:	|  |         jsr 13e4c <addVarToStack>
    f7f2:	|  |         addq.l #8,sp
    f7f4:	|  |         tst.w d0
    f7f6:	|  |     ,-- bne.s f7fc <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f7f8:	|  |     |   moveq #1,d0
    f7fa:	+--|-----|-- bra.s f84a <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f7fc:	|  |     '-> movea.l 8(sp),a0
    f800:	|  |         movea.l 24(a0),a0
    f804:	|  |         movea.l 8(a0),a0
    f808:	|  |         movea.l 4(a0),a0
    f80c:	|  |         movea.l 4(a0),a1
    f810:	|  |         movea.l 8(sp),a0
    f814:	|  |         movea.l 24(a0),a0
    f818:	|  |         movea.l 8(a0),a0
    f81c:	|  |         movea.l 4(a0),a0
    f820:	|  |         move.l 8(a1),d0
    f824:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f828:	|  '-------> moveq #24,d0
    f82a:	|            add.l 8(sp),d0
    f82e:	|            move.l d0,-(sp)
    f830:	|            jsr 14f94 <trimStack>
    f836:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f838:	|            moveq #24,d0
    f83a:	|            add.l 8(sp),d0
    f83e:	|            move.l d0,-(sp)
    f840:	|            jsr 14f94 <trimStack>
    f846:	|            addq.l #4,sp
	return BR_CONTINUE;
    f848:	|            moveq #2,d0
}
    f84a:	'----------> rts

0000f84c <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f84c:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f84e:	       movea.l 12(sp),a0
    f852:	       movea.l 24(a0),a0
    f856:	       movea.l 8(a0),a0
    f85a:	       move.l (a0),d0
    f85c:	       moveq #6,d1
    f85e:	       cmp.l d0,d1
    f860:	   ,-- beq.s f876 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f862:	   |   pea 1977a <PutChar+0x1c04>
    f868:	   |   jsr 170d4 <KPrintF>
    f86e:	   |   addq.l #4,sp
		return BR_ERROR;
    f870:	   |   moveq #1,d0
    f872:	,--|-- bra.w f90c <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f876:	|  '-> movea.l 12(sp),a0
    f87a:	|      movea.l 24(a0),a0
    f87e:	|      movea.l 8(a0),a0
    f882:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f886:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f888:	|      movea.l 12(sp),a0
    f88c:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f890:	|      clr.l -(sp)
    f892:	|      move.l d1,-(sp)
    f894:	|      move.l d0,-(sp)
    f896:	|      jsr 141ec <deleteVarFromStack>
    f89c:	|      lea 12(sp),sp
    f8a0:	|      move.l d0,d1
    f8a2:	|      moveq #28,d0
    f8a4:	|      add.l 12(sp),d0
    f8a8:	|      move.l d1,-(sp)
    f8aa:	|      pea 1 <_start+0x1>
    f8ae:	|      move.l d0,-(sp)
    f8b0:	|      jsr 14f02 <setVariable>
    f8b6:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f8ba:	|      movea.l 12(sp),a0
    f8be:	|      movea.l 24(a0),a0
    f8c2:	|      movea.l 8(a0),a0
    f8c6:	|      movea.l 4(a0),a0
    f8ca:	|      move.l (a0),d0
    f8cc:	|      movea.l 12(sp),a0
    f8d0:	|      movea.l 24(a0),a0
    f8d4:	|      movea.l 8(a0),a0
    f8d8:	|      movea.l 4(a0),a2
    f8dc:	|      move.l d0,-(sp)
    f8de:	|      jsr 14f4c <stackFindLast>
    f8e4:	|      addq.l #4,sp
    f8e6:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f8ea:	|      moveq #24,d0
    f8ec:	|      add.l 12(sp),d0
    f8f0:	|      move.l d0,-(sp)
    f8f2:	|      jsr 14f94 <trimStack>
    f8f8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f8fa:	|      moveq #24,d0
    f8fc:	|      add.l 12(sp),d0
    f900:	|      move.l d0,-(sp)
    f902:	|      jsr 14f94 <trimStack>
    f908:	|      addq.l #4,sp
	return BR_CONTINUE;
    f90a:	|      moveq #2,d0
}
    f90c:	'----> movea.l (sp)+,a2
    f90e:	       rts

0000f910 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    f910:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f912:	       movea.l 12(sp),a0
    f916:	       movea.l 24(a0),a0
    f91a:	       movea.l 8(a0),a0
    f91e:	       move.l (a0),d0
    f920:	       moveq #6,d1
    f922:	       cmp.l d0,d1
    f924:	   ,-- beq.s f93a <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f926:	   |   pea 1977a <PutChar+0x1c04>
    f92c:	   |   jsr 170d4 <KPrintF>
    f932:	   |   addq.l #4,sp
		return BR_ERROR;
    f934:	   |   moveq #1,d0
    f936:	,--|-- bra.w f9d2 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    f93a:	|  '-> movea.l 12(sp),a0
    f93e:	|      movea.l 24(a0),a0
    f942:	|      movea.l 8(a0),a0
    f946:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f94a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f94c:	|      movea.l 12(sp),a0
    f950:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f954:	|      pea 1 <_start+0x1>
    f958:	|      move.l d1,-(sp)
    f95a:	|      move.l d0,-(sp)
    f95c:	|      jsr 141ec <deleteVarFromStack>
    f962:	|      lea 12(sp),sp
    f966:	|      move.l d0,d1
    f968:	|      moveq #28,d0
    f96a:	|      add.l 12(sp),d0
    f96e:	|      move.l d1,-(sp)
    f970:	|      pea 1 <_start+0x1>
    f974:	|      move.l d0,-(sp)
    f976:	|      jsr 14f02 <setVariable>
    f97c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f980:	|      movea.l 12(sp),a0
    f984:	|      movea.l 24(a0),a0
    f988:	|      movea.l 8(a0),a0
    f98c:	|      movea.l 4(a0),a0
    f990:	|      move.l (a0),d0
    f992:	|      movea.l 12(sp),a0
    f996:	|      movea.l 24(a0),a0
    f99a:	|      movea.l 8(a0),a0
    f99e:	|      movea.l 4(a0),a2
    f9a2:	|      move.l d0,-(sp)
    f9a4:	|      jsr 14f4c <stackFindLast>
    f9aa:	|      addq.l #4,sp
    f9ac:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f9b0:	|      moveq #24,d0
    f9b2:	|      add.l 12(sp),d0
    f9b6:	|      move.l d0,-(sp)
    f9b8:	|      jsr 14f94 <trimStack>
    f9be:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f9c0:	|      moveq #24,d0
    f9c2:	|      add.l 12(sp),d0
    f9c6:	|      move.l d0,-(sp)
    f9c8:	|      jsr 14f94 <trimStack>
    f9ce:	|      addq.l #4,sp
	return BR_CONTINUE;
    f9d0:	|      moveq #2,d0
} 
    f9d2:	'----> movea.l (sp)+,a2
    f9d4:	       rts

0000f9d6 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f9d6:	       movea.l 8(sp),a0
    f9da:	       movea.l 24(a0),a0
    f9de:	       move.l (a0),d0
    f9e0:	       moveq #6,d1
    f9e2:	       cmp.l d0,d1
    f9e4:	   ,-- beq.s f9f8 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f9e6:	   |   pea 1977a <PutChar+0x1c04>
    f9ec:	   |   jsr 170d4 <KPrintF>
    f9f2:	   |   addq.l #4,sp
		return BR_ERROR;
    f9f4:	   |   moveq #1,d0
    f9f6:	,--|-- bra.s fa62 <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f9f8:	|  '-> movea.l 8(sp),a0
    f9fc:	|      movea.l 24(a0),a0
    fa00:	|      movea.l 4(a0),a0
    fa04:	|      move.l (a0),d0
    fa06:	|  ,-- bne.s fa1a <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fa08:	|  |   pea 197ab <PutChar+0x1c35>
    fa0e:	|  |   jsr 170d4 <KPrintF>
    fa14:	|  |   addq.l #4,sp
		return BR_ERROR;
    fa16:	|  |   moveq #1,d0
    fa18:	+--|-- bra.s fa62 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fa1a:	|  '-> moveq #28,d0
    fa1c:	|      add.l 8(sp),d0
    fa20:	|      movea.l 8(sp),a0
    fa24:	|      movea.l 24(a0),a0
    fa28:	|      movea.l 4(a0),a0
    fa2c:	|      move.l (a0),d1
    fa2e:	|      move.l d0,-(sp)
    fa30:	|      move.l d1,-(sp)
    fa32:	|      jsr 14aca <copyVariable>
    fa38:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fa3a:	|      movea.l 8(sp),a0
    fa3e:	|      movea.l 24(a0),a0
    fa42:	|      move.l 4(a0),d0
    fa46:	|      move.l d0,-(sp)
    fa48:	|      jsr 14f94 <trimStack>
    fa4e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fa50:	|      moveq #24,d0
    fa52:	|      add.l 8(sp),d0
    fa56:	|      move.l d0,-(sp)
    fa58:	|      jsr 14f94 <trimStack>
    fa5e:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa60:	|      moveq #2,d0
}
    fa62:	'----> rts

0000fa64 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fa64:	       movea.l 8(sp),a0
    fa68:	       movea.l 24(a0),a0
    fa6c:	       move.l (a0),d0
    fa6e:	       moveq #6,d1
    fa70:	       cmp.l d0,d1
    fa72:	   ,-- beq.s fa86 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fa74:	   |   pea 1977a <PutChar+0x1c04>
    fa7a:	   |   jsr 170d4 <KPrintF>
    fa80:	   |   addq.l #4,sp
		return BR_ERROR;
    fa82:	   |   moveq #1,d0
    fa84:	,--|-- bra.s fada <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fa86:	|  '-> movea.l 8(sp),a0
    fa8a:	|      movea.l 24(a0),a0
    fa8e:	|      movea.l 4(a0),a0
    fa92:	|      move.l (a0),d0
    fa94:	|  ,-- bne.s faa8 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fa96:	|  |   pea 197ab <PutChar+0x1c35>
    fa9c:	|  |   jsr 170d4 <KPrintF>
    faa2:	|  |   addq.l #4,sp
		return BR_ERROR;
    faa4:	|  |   moveq #1,d0
    faa6:	+--|-- bra.s fada <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    faa8:	|  '-> moveq #28,d0
    faaa:	|      add.l 8(sp),d0
    faae:	|      movea.l 8(sp),a0
    fab2:	|      movea.l 24(a0),a0
    fab6:	|      movea.l 4(a0),a0
    faba:	|      move.l (a0),d1
    fabc:	|      move.l d0,-(sp)
    fabe:	|      move.l d1,-(sp)
    fac0:	|      jsr 14aca <copyVariable>
    fac6:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fac8:	|      moveq #24,d0
    faca:	|      add.l 8(sp),d0
    face:	|      move.l d0,-(sp)
    fad0:	|      jsr 14f94 <trimStack>
    fad6:	|      addq.l #4,sp
	return BR_CONTINUE;
    fad8:	|      moveq #2,d0
}
    fada:	'----> rts

0000fadc <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fadc:	       movea.l 8(sp),a0
    fae0:	       movea.l 24(a0),a0
    fae4:	       move.l (a0),d0
    fae6:	       moveq #6,d1
    fae8:	       cmp.l d0,d1
    faea:	   ,-- beq.s fafe <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    faec:	   |   pea 1977a <PutChar+0x1c04>
    faf2:	   |   jsr 170d4 <KPrintF>
    faf8:	   |   addq.l #4,sp
		return BR_ERROR;
    fafa:	   |   moveq #1,d0
    fafc:	,--|-- bra.s fb54 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fafe:	|  '-> movea.l 8(sp),a0
    fb02:	|      movea.l 24(a0),a0
    fb06:	|      movea.l 4(a0),a0
    fb0a:	|      move.l (a0),d0
    fb0c:	|  ,-- bne.s fb20 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fb0e:	|  |   pea 197ab <PutChar+0x1c35>
    fb14:	|  |   jsr 170d4 <KPrintF>
    fb1a:	|  |   addq.l #4,sp
		return BR_ERROR;
    fb1c:	|  |   moveq #1,d0
    fb1e:	+--|-- bra.s fb54 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fb20:	|  '-> moveq #28,d0
    fb22:	|      add.l 8(sp),d0
    fb26:	|      movea.l 8(sp),a0
    fb2a:	|      movea.l 24(a0),a0
    fb2e:	|      movea.l 4(a0),a0
    fb32:	|      move.l 4(a0),d1
    fb36:	|      move.l d0,-(sp)
    fb38:	|      move.l d1,-(sp)
    fb3a:	|      jsr 14aca <copyVariable>
    fb40:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fb42:	|      moveq #24,d0
    fb44:	|      add.l 8(sp),d0
    fb48:	|      move.l d0,-(sp)
    fb4a:	|      jsr 14f94 <trimStack>
    fb50:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb52:	|      moveq #2,d0
}
    fb54:	'----> rts

0000fb56 <builtIn_random>:

builtIn(random)
{
    fb56:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fb58:	       movea.l 12(sp),a0
    fb5c:	       move.l 24(a0),d0
    fb60:	       move.l d0,-(sp)
    fb62:	       pea 1 <_start+0x1>
    fb66:	       move.l sp,d0
    fb68:	       addq.l #8,d0
    fb6a:	       move.l d0,-(sp)
    fb6c:	       jsr 14610 <getValueType>
    fb72:	       lea 12(sp),sp
    fb76:	       tst.w d0
    fb78:	   ,-- bne.s fb7e <builtIn_random+0x28>
		return BR_ERROR;
    fb7a:	   |   moveq #1,d0
    fb7c:	,--|-- bra.s fbc8 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fb7e:	|  '-> moveq #24,d0
    fb80:	|      add.l 12(sp),d0
    fb84:	|      move.l d0,-(sp)
    fb86:	|      jsr 14f94 <trimStack>
    fb8c:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fb8e:	|      move.l (sp),d0
    fb90:	|  ,-- bgt.s fb96 <builtIn_random+0x40>
    fb92:	|  |   moveq #1,d0
    fb94:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fb96:	|  '-> jsr 15cb0 <rand>
    fb9c:	|      move.l d0,d1
    fb9e:	|      move.l (sp),d0
    fba0:	|      move.l d0,-(sp)
    fba2:	|      move.l d1,-(sp)
    fba4:	|      jsr 17b3a <__umodsi3>
    fbaa:	|      addq.l #8,sp
    fbac:	|      move.l d0,d1
    fbae:	|      moveq #28,d0
    fbb0:	|      add.l 12(sp),d0
    fbb4:	|      move.l d1,-(sp)
    fbb6:	|      pea 1 <_start+0x1>
    fbba:	|      move.l d0,-(sp)
    fbbc:	|      jsr 14f02 <setVariable>
    fbc2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fbc6:	|      moveq #2,d0
}
    fbc8:	'----> addq.l #4,sp
    fbca:	       rts

0000fbcc <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fbcc:	nop
    fbce:	rts

0000fbd0 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fbd0:	moveq #2,d0
}
    fbd2:	rts

0000fbd4 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fbd4:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fbd6:	       movea.l 12(sp),a0
    fbda:	       move.l 24(a0),d0
    fbde:	       move.l d0,-(sp)
    fbe0:	       pea 1 <_start+0x1>
    fbe4:	       move.l sp,d0
    fbe6:	       addq.l #8,d0
    fbe8:	       move.l d0,-(sp)
    fbea:	       jsr 14610 <getValueType>
    fbf0:	       lea 12(sp),sp
    fbf4:	       tst.w d0
    fbf6:	   ,-- bne.s fc0a <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fbf8:	   |   pea 197be <PutChar+0x1c48>
    fbfe:	   |   jsr 170d4 <KPrintF>
    fc04:	   |   addq.l #4,sp
		return BR_ERROR;
    fc06:	   |   moveq #1,d0
    fc08:	,--|-- bra.s fc4a <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fc0a:	|  '-> moveq #24,d0
    fc0c:	|      add.l 12(sp),d0
    fc10:	|      move.l d0,-(sp)
    fc12:	|      jsr 14f94 <trimStack>
    fc18:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fc1a:	|      move.l (sp),d0
    fc1c:	|      move.l d0,d0
    fc1e:	|      move.w d0,1c6e6 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fc24:	|      move.w 1c6e6 <textPaletteIndex>,d0
    fc2a:	|      cmpi.w #31,d0
    fc2e:	|  ,-- bls.s fc48 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fc30:	|  |   pea 197e5 <PutChar+0x1c6f>
    fc36:	|  |   jsr 170d4 <KPrintF>
    fc3c:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    fc3e:	|  |   clr.w 1c6e6 <textPaletteIndex>
		return BR_ERROR;
    fc44:	|  |   moveq #1,d0
    fc46:	+--|-- bra.s fc4a <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    fc48:	|  '-> moveq #2,d0
}
    fc4a:	'----> addq.l #4,sp
    fc4c:	       rts

0000fc4e <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fc4e:	moveq #2,d0
}
    fc50:	rts

0000fc52 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    fc52:	moveq #2,d0
}
    fc54:	rts

0000fc56 <builtIn_setFont>:


builtIn(setFont)
{
    fc56:	       lea -16(sp),sp
    fc5a:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fc5c:	       movea.l 28(sp),a0
    fc60:	       move.l 24(a0),d0
    fc64:	       move.l d0,-(sp)
    fc66:	       pea 1 <_start+0x1>
    fc6a:	       lea 12(sp),a0
    fc6e:	       move.l a0,-(sp)
    fc70:	       jsr 14610 <getValueType>
    fc76:	       lea 12(sp),sp
    fc7a:	       tst.w d0
    fc7c:	   ,-- bne.s fc84 <builtIn_setFont+0x2e>
    fc7e:	   |   moveq #1,d0
    fc80:	,--|-- bra.w fd32 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    fc84:	|  '-> moveq #24,d0
    fc86:	|      add.l 28(sp),d0
    fc8a:	|      move.l d0,-(sp)
    fc8c:	|      jsr 14f94 <trimStack>
    fc92:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fc94:	|      movea.l 28(sp),a0
    fc98:	|      move.l 24(a0),d0
    fc9c:	|      move.l d0,-(sp)
    fc9e:	|      jsr 14be6 <getTextFromAnyVar>
    fca4:	|      addq.l #4,sp
    fca6:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    fcaa:	|  ,-- bne.s fcb2 <builtIn_setFont+0x5c>
    fcac:	|  |   moveq #1,d0
    fcae:	+--|-- bra.w fd32 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    fcb2:	|  '-> moveq #24,d0
    fcb4:	|      add.l 28(sp),d0
    fcb8:	|      move.l d0,-(sp)
    fcba:	|      jsr 14f94 <trimStack>
    fcc0:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    fcc2:	|      movea.l 28(sp),a0
    fcc6:	|      move.l 24(a0),d0
    fcca:	|      move.l d0,-(sp)
    fccc:	|      pea 5 <_start+0x5>
    fcd0:	|      lea 16(sp),a0
    fcd4:	|      move.l a0,-(sp)
    fcd6:	|      jsr 14610 <getValueType>
    fcdc:	|      lea 12(sp),sp
    fce0:	|      tst.w d0
    fce2:	|  ,-- bne.s fce8 <builtIn_setFont+0x92>
    fce4:	|  |   moveq #1,d0
    fce6:	+--|-- bra.s fd32 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    fce8:	|  '-> moveq #24,d0
    fcea:	|      add.l 28(sp),d0
    fcee:	|      move.l d0,-(sp)
    fcf0:	|      jsr 14f94 <trimStack>
    fcf6:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    fcf8:	|      move.l 4(sp),d1
    fcfc:	|      move.l 8(sp),d0
    fd00:	|      move.l d1,-(sp)
    fd02:	|      move.l 20(sp),-(sp)
    fd06:	|      move.l d0,-(sp)
    fd08:	|      jsr 15448 <loadFont>
    fd0e:	|      lea 12(sp),sp
    fd12:	|      tst.w d0
    fd14:	|  ,-- bne.s fd1a <builtIn_setFont+0xc4>
    fd16:	|  |   moveq #1,d0
    fd18:	+--|-- bra.s fd32 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    fd1a:	|  '-> move.l 16(sp),12(sp)
    fd20:	|      move.l 1c7d8 <SysBase>,d0
    fd26:	|      movea.l d0,a6
    fd28:	|      movea.l 12(sp),a1
    fd2c:	|      jsr -690(a6)

    return BR_CONTINUE;
    fd30:	|      moveq #2,d0
}
    fd32:	'----> movea.l (sp)+,a6
    fd34:	       lea 16(sp),sp
    fd38:	       rts

0000fd3a <builtIn_inFont>:

builtIn(inFont)
{
    fd3a:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fd3c:	       movea.l 12(sp),a0
    fd40:	       move.l 24(a0),d0
    fd44:	       move.l d0,-(sp)
    fd46:	       jsr 14be6 <getTextFromAnyVar>
    fd4c:	       addq.l #4,sp
    fd4e:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    fd50:	   ,-- bne.s fd56 <builtIn_inFont+0x1c>
    fd52:	   |   moveq #1,d0
    fd54:	,--|-- bra.s fd8c <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    fd56:	|  '-> moveq #24,d0
    fd58:	|      add.l 12(sp),d0
    fd5c:	|      move.l d0,-(sp)
    fd5e:	|      jsr 14f94 <trimStack>
    fd64:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    fd66:	|      move.l (sp),-(sp)
    fd68:	|      jsr 15436 <isInFont>
    fd6e:	|      addq.l #4,sp
    fd70:	|      movea.w d0,a0
    fd72:	|      moveq #28,d0
    fd74:	|      add.l 12(sp),d0
    fd78:	|      move.l a0,-(sp)
    fd7a:	|      pea 1 <_start+0x1>
    fd7e:	|      move.l d0,-(sp)
    fd80:	|      jsr 14f02 <setVariable>
    fd86:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fd8a:	|      moveq #2,d0
}
    fd8c:	'----> addq.l #4,sp
    fd8e:	       rts

0000fd90 <builtIn_pasteString>:

builtIn(pasteString)
{
    fd90:	       lea -16(sp),sp
    fd94:	       move.l a6,-(sp)
    fd96:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    fd98:	       movea.l 32(sp),a0
    fd9c:	       move.l 24(a0),d0
    fda0:	       move.l d0,-(sp)
    fda2:	       jsr 14be6 <getTextFromAnyVar>
    fda8:	       addq.l #4,sp
    fdaa:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    fdae:	       moveq #24,d0
    fdb0:	       add.l 32(sp),d0
    fdb4:	       move.l d0,-(sp)
    fdb6:	       jsr 14f94 <trimStack>
    fdbc:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fdbe:	       movea.l 32(sp),a0
    fdc2:	       move.l 24(a0),d0
    fdc6:	       move.l d0,-(sp)
    fdc8:	       pea 1 <_start+0x1>
    fdcc:	       lea 20(sp),a0
    fdd0:	       move.l a0,-(sp)
    fdd2:	       jsr 14610 <getValueType>
    fdd8:	       lea 12(sp),sp
    fddc:	       tst.w d0
    fdde:	   ,-- bne.s fde6 <builtIn_pasteString+0x56>
    fde0:	   |   moveq #1,d0
    fde2:	,--|-- bra.w fe88 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fde6:	|  '-> moveq #24,d0
    fde8:	|      add.l 32(sp),d0
    fdec:	|      move.l d0,-(sp)
    fdee:	|      jsr 14f94 <trimStack>
    fdf4:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fdf6:	|      movea.l 32(sp),a0
    fdfa:	|      move.l 24(a0),d0
    fdfe:	|      move.l d0,-(sp)
    fe00:	|      pea 1 <_start+0x1>
    fe04:	|      lea 16(sp),a0
    fe08:	|      move.l a0,-(sp)
    fe0a:	|      jsr 14610 <getValueType>
    fe10:	|      lea 12(sp),sp
    fe14:	|      tst.w d0
    fe16:	|  ,-- bne.s fe1c <builtIn_pasteString+0x8c>
    fe18:	|  |   moveq #1,d0
    fe1a:	+--|-- bra.s fe88 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fe1c:	|  '-> moveq #24,d0
    fe1e:	|      add.l 32(sp),d0
    fe22:	|      move.l d0,-(sp)
    fe24:	|      jsr 14f94 <trimStack>
    fe2a:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
    fe2c:	|      move.l 8(sp),d0
    fe30:	|      cmpi.l #65535,d0
    fe36:	|  ,-- bne.s fe56 <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
    fe38:	|  |   move.l 1c72c <winWidth>,d2
    fe3e:	|  |   move.l 20(sp),-(sp)
    fe42:	|  |   jsr 156fa <stringWidth>
    fe48:	|  |   addq.l #4,sp
    fe4a:	|  |   move.l d2,d1
    fe4c:	|  |   sub.l d0,d1
    fe4e:	|  |   move.l d1,d0
    fe50:	|  |   lsr.l #1,d0
    fe52:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    fe56:	|  '-> move.l 12(sp),d1
    fe5a:	|      move.l 8(sp),d0
    fe5e:	|      move.l d1,-(sp)
    fe60:	|      move.l d0,-(sp)
    fe62:	|      move.l 28(sp),-(sp)
    fe66:	|      jsr 1561c <pasteStringToBackdrop>
    fe6c:	|      lea 12(sp),sp
    FreeVec(newText); 
    fe70:	|      move.l 20(sp),16(sp)
    fe76:	|      move.l 1c7d8 <SysBase>,d0
    fe7c:	|      movea.l d0,a6
    fe7e:	|      movea.l 16(sp),a1
    fe82:	|      jsr -690(a6)
    return BR_CONTINUE;
    fe86:	|      moveq #2,d0
}
    fe88:	'----> move.l (sp)+,d2
    fe8a:	       movea.l (sp)+,a6
    fe8c:	       lea 16(sp),sp
    fe90:	       rts

0000fe92 <builtIn_anim>:

builtIn(anim)
{
    fe92:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    fe96:	       moveq #1,d0
    fe98:	       cmp.l 16(sp),d0
    fe9c:	   ,-- blt.s feb2 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    fe9e:	   |   pea 1980f <PutChar+0x1c99>
    fea4:	   |   jsr 170d4 <KPrintF>
    feaa:	   |   addq.l #4,sp
		return BR_ERROR;
    feac:	   |   moveq #1,d0
    feae:	,--|-- bra.w ff40 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    feb2:	|  '-> moveq #24,d1
    feb4:	|      add.l 20(sp),d1
    feb8:	|      move.l 16(sp),d0
    febc:	|      subq.l #1,d0
    febe:	|      move.l d1,-(sp)
    fec0:	|      move.l d0,-(sp)
    fec2:	|      jsr 9530 <createPersonaAnim>
    fec8:	|      addq.l #8,sp
    feca:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fece:	|      movea.l 20(sp),a0
    fed2:	|      move.l 24(a0),d0
    fed6:	|      move.l d0,-(sp)
    fed8:	|      pea 5 <_start+0x5>
    fedc:	|      lea 8(sp),a0
    fee0:	|      move.l a0,-(sp)
    fee2:	|      jsr 14610 <getValueType>
    fee8:	|      lea 12(sp),sp
    feec:	|      tst.w d0
    feee:	|  ,-- bne.s fef4 <builtIn_anim+0x62>
    fef0:	|  |   moveq #1,d0
    fef2:	+--|-- bra.s ff40 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    fef4:	|  '-> moveq #24,d0
    fef6:	|      add.l 20(sp),d0
    fefa:	|      move.l d0,-(sp)
    fefc:	|      jsr 14f94 <trimStack>
    ff02:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    ff04:	|      move.l (sp),d0
    ff06:	|      move.l d0,-(sp)
    ff08:	|      jsr 15e12 <loadBankForAnim>
    ff0e:	|      addq.l #4,sp
    ff10:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    ff14:	|  ,-- bne.s ff1a <builtIn_anim+0x88>
    ff16:	|  |   moveq #1,d0
    ff18:	+--|-- bra.s ff40 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    ff1a:	|  '-> move.l 4(sp),-(sp)
    ff1e:	|      move.l 12(sp),-(sp)
    ff22:	|      jsr b3da <setBankFile>
    ff28:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    ff2a:	|      moveq #28,d0
    ff2c:	|      add.l 20(sp),d0
    ff30:	|      move.l 8(sp),-(sp)
    ff34:	|      move.l d0,-(sp)
    ff36:	|      jsr 14ebe <newAnimationVariable>
    ff3c:	|      addq.l #8,sp
	return BR_CONTINUE;
    ff3e:	|      moveq #2,d0
}
    ff40:	'----> lea 12(sp),sp
    ff44:	       rts

0000ff46 <builtIn_costume>:

builtIn(costume)
{
    ff46:	          lea -32(sp),sp
    ff4a:	          move.l a6,-(sp)
    ff4c:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    ff4e:	          moveq #8,d0
    ff50:	          move.l d0,32(sp)
    ff54:	          clr.l 28(sp)
    ff58:	          move.l 1c7d8 <SysBase>,d0
    ff5e:	          movea.l d0,a6
    ff60:	          move.l 32(sp),d0
    ff64:	          move.l 28(sp),d1
    ff68:	          jsr -684(a6)
    ff6c:	          move.l d0,24(sp)
    ff70:	          move.l 24(sp),d0
    ff74:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    ff78:	      ,-- bne.s ff80 <builtIn_costume+0x3a>
    ff7a:	      |   moveq #1,d0
    ff7c:	,-----|-- bra.w 10068 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    ff80:	|     '-> move.l 44(sp),d0
    ff84:	|         pea 3 <_start+0x3>
    ff88:	|         move.l d0,-(sp)
    ff8a:	|         jsr 17ade <__divsi3>
    ff90:	|         addq.l #8,sp
    ff92:	|         movea.l 20(sp),a0
    ff96:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    ff9a:	|         tst.l 44(sp)
    ff9e:	|     ,-- beq.s ffb4 <builtIn_costume+0x6e>
    ffa0:	|     |   movea.l 20(sp),a0
    ffa4:	|     |   move.l 4(a0),d1
    ffa8:	|     |   move.l d1,d0
    ffaa:	|     |   add.l d0,d0
    ffac:	|     |   add.l d1,d0
    ffae:	|     |   cmp.l 44(sp),d0
    ffb2:	|  ,--|-- beq.s ffc8 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    ffb4:	|  |  '-> pea 19849 <PutChar+0x1cd3>
    ffba:	|  |      jsr 170d4 <KPrintF>
    ffc0:	|  |      addq.l #4,sp
        return BR_ERROR;
    ffc2:	|  |      moveq #1,d0
    ffc4:	+--|----- bra.w 10068 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    ffc8:	|  '----> move.l 44(sp),d0
    ffcc:	|         add.l d0,d0
    ffce:	|         add.l d0,d0
    ffd0:	|         move.l d0,16(sp)
    ffd4:	|         clr.l 12(sp)
    ffd8:	|         move.l 1c7d8 <SysBase>,d0
    ffde:	|         movea.l d0,a6
    ffe0:	|         move.l 16(sp),d0
    ffe4:	|         move.l 12(sp),d1
    ffe8:	|         jsr -684(a6)
    ffec:	|         move.l d0,8(sp)
    fff0:	|         move.l 8(sp),d0
    fff4:	|         movea.l 20(sp),a0
    fff8:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    fffa:	|         movea.l 20(sp),a0
    fffe:	|         move.l (a0),d0
   10000:	|     ,-- bne.s 10006 <builtIn_costume+0xc0>
   10002:	|     |   moveq #1,d0
   10004:	+-----|-- bra.s 10068 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10006:	|     '-> move.l 44(sp),d0
   1000a:	|         subq.l #1,d0
   1000c:	|         move.l d0,36(sp)
   10010:	|     ,-- bra.s 1004c <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10012:	|  ,--|-> movea.l 48(sp),a0
   10016:	|  |  |   move.l 24(a0),d0
   1001a:	|  |  |   movea.l 20(sp),a0
   1001e:	|  |  |   movea.l (a0),a0
   10020:	|  |  |   move.l 36(sp),d1
   10024:	|  |  |   add.l d1,d1
   10026:	|  |  |   add.l d1,d1
   10028:	|  |  |   lea (0,a0,d1.l),a2
   1002c:	|  |  |   move.l d0,-(sp)
   1002e:	|  |  |   jsr 14ae8 <getAnimationFromVar>
   10034:	|  |  |   addq.l #4,sp
   10036:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10038:	|  |  |   moveq #24,d0
   1003a:	|  |  |   add.l 48(sp),d0
   1003e:	|  |  |   move.l d0,-(sp)
   10040:	|  |  |   jsr 14f94 <trimStack>
   10046:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10048:	|  |  |   subq.l #1,36(sp)
   1004c:	|  |  '-> tst.l 36(sp)
   10050:	|  '----- bge.s 10012 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10052:	|         moveq #28,d0
   10054:	|         add.l 48(sp),d0
   10058:	|         move.l 20(sp),-(sp)
   1005c:	|         move.l d0,-(sp)
   1005e:	|         jsr 14ee0 <newCostumeVariable>
   10064:	|         addq.l #8,sp
    return BR_CONTINUE;
   10066:	|         moveq #2,d0
}
   10068:	'-------> movea.l (sp)+,a2
   1006a:	          movea.l (sp)+,a6
   1006c:	          lea 32(sp),sp
   10070:	          rts

00010072 <builtIn_launch>:

builtIn(launch)
{
   10072:	          lea -20(sp),sp
   10076:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10078:	          movea.l 32(sp),a0
   1007c:	          move.l 24(a0),d0
   10080:	          move.l d0,-(sp)
   10082:	          jsr 14be6 <getTextFromAnyVar>
   10088:	          addq.l #4,sp
   1008a:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   1008e:	      ,-- bne.s 10096 <builtIn_launch+0x24>
   10090:	      |   moveq #1,d0
   10092:	,-----|-- bra.w 101c4 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   10096:	|     '-> move.l 20(sp),-(sp)
   1009a:	|         jsr 2fe <encodeFilename>
   100a0:	|         addq.l #4,sp
   100a2:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   100a6:	|         moveq #24,d0
   100a8:	|         add.l 32(sp),d0
   100ac:	|         move.l d0,-(sp)
   100ae:	|         jsr 14f94 <trimStack>
   100b4:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   100b6:	|         movea.l 20(sp),a0
   100ba:	|         move.b (a0),d0
   100bc:	|         cmpi.b #104,d0
   100c0:	|  ,----- bne.s 1012a <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   100c2:	|  |      movea.l 20(sp),a0
   100c6:	|  |      addq.l #1,a0
   100c8:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   100ca:	|  |      cmpi.b #116,d0
   100ce:	|  +----- bne.s 1012a <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   100d0:	|  |      movea.l 20(sp),a0
   100d4:	|  |      addq.l #2,a0
   100d6:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   100d8:	|  |      cmpi.b #116,d0
   100dc:	|  +----- bne.s 1012a <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   100de:	|  |      movea.l 20(sp),a0
   100e2:	|  |      addq.l #3,a0
   100e4:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   100e6:	|  |      cmpi.b #112,d0
   100ea:	|  +----- bne.s 1012a <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   100ec:	|  |      movea.l 20(sp),a0
   100f0:	|  |      addq.l #4,a0
   100f2:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   100f4:	|  |      cmpi.b #58,d0
   100f8:	|  |  ,-- beq.s 10116 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   100fa:	|  |  |   movea.l 20(sp),a0
   100fe:	|  |  |   addq.l #4,a0
   10100:	|  |  |   move.b (a0),d0
   10102:	|  |  |   cmpi.b #115,d0
   10106:	|  +--|-- bne.s 1012a <builtIn_launch+0xb8>
   10108:	|  |  |   movea.l 20(sp),a0
   1010c:	|  |  |   addq.l #5,a0
   1010e:	|  |  |   move.b (a0),d0
   10110:	|  |  |   cmpi.b #58,d0
   10114:	|  +--|-- bne.s 1012a <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   10116:	|  |  '-> move.l 20(sp),-(sp)
   1011a:	|  |      jsr b8 <copyString>
   10120:	|  |      addq.l #4,sp
   10122:	|  |      move.l d0,1c896 <launchMe>
   10128:	|  |  ,-- bra.s 1017c <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   1012a:	|  '--|-> move.l 1c740 <gamePath>,d0
   10130:	|     |   pea 19894 <PutChar+0x1d1e>
   10136:	|     |   move.l d0,-(sp)
   10138:	|     |   jsr 13b3c <joinStrings>
   1013e:	|     |   addq.l #8,sp
   10140:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10144:	|     |   move.l 16(sp),-(sp)
   10148:	|     |   move.l 16(sp),-(sp)
   1014c:	|     |   jsr 13b3c <joinStrings>
   10152:	|     |   addq.l #8,sp
   10154:	|     |   move.l d0,1c896 <launchMe>
        FreeVec(newText);
   1015a:	|     |   move.l 16(sp),8(sp)
   10160:	|     |   move.l 1c7d8 <SysBase>,d0
   10166:	|     |   movea.l d0,a6
   10168:	|     |   movea.l 8(sp),a1
   1016c:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10170:	|     |   move.l 1c896 <launchMe>,d0
   10176:	|     +-- bne.s 1017c <builtIn_launch+0x10a>
   10178:	|     |   moveq #1,d0
   1017a:	+-----|-- bra.s 101c4 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   1017c:	|     '-> move.l 20(sp),4(sp)
   10182:	|         move.l 1c7d8 <SysBase>,d0
   10188:	|         movea.l d0,a6
   1018a:	|         movea.l 4(sp),a1
   1018e:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10192:	|         clr.l -(sp)
   10194:	|         jsr 4944 <setGraphicsWindow>
   1019a:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   1019c:	|         moveq #28,d0
   1019e:	|         add.l 32(sp),d0
   101a2:	|         pea 1 <_start+0x1>
   101a6:	|         pea 1 <_start+0x1>
   101aa:	|         move.l d0,-(sp)
   101ac:	|         jsr 14f02 <setVariable>
   101b2:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   101b6:	|         moveq #28,d0
   101b8:	|         add.l 32(sp),d0
   101bc:	|         move.l d0,1c89a <launchResult>

    return BR_KEEP_AND_PAUSE;
   101c2:	|         moveq #0,d0
}
   101c4:	'-------> movea.l (sp)+,a6
   101c6:	          lea 20(sp),sp
   101ca:	          rts

000101cc <builtIn_pause>:

builtIn(pause)
{
   101cc:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   101ce:	       movea.l 12(sp),a0
   101d2:	       move.l 24(a0),d0
   101d6:	       move.l d0,-(sp)
   101d8:	       pea 1 <_start+0x1>
   101dc:	       move.l sp,d0
   101de:	       addq.l #8,d0
   101e0:	       move.l d0,-(sp)
   101e2:	       jsr 14610 <getValueType>
   101e8:	       lea 12(sp),sp
   101ec:	       tst.w d0
   101ee:	   ,-- bne.s 101f4 <builtIn_pause+0x28>
   101f0:	   |   moveq #1,d0
   101f2:	,--|-- bra.s 10222 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   101f4:	|  '-> moveq #24,d0
   101f6:	|      add.l 12(sp),d0
   101fa:	|      move.l d0,-(sp)
   101fc:	|      jsr 14f94 <trimStack>
   10202:	|      addq.l #4,sp
	if (theTime > 0) {
   10204:	|      move.l (sp),d0
   10206:	|  ,-- ble.s 10220 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   10208:	|  |   move.l (sp),d0
   1020a:	|  |   subq.l #1,d0
   1020c:	|  |   movea.l 12(sp),a0
   10210:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   10214:	|  |   movea.l 12(sp),a0
   10218:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   1021c:	|  |   moveq #0,d0
   1021e:	+--|-- bra.s 10222 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10220:	|  '-> moveq #2,d0
}
   10222:	'----> addq.l #4,sp
   10224:	       rts

00010226 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10226:	jsr 50ac <completeTimers>
	return BR_CONTINUE;
   1022c:	moveq #2,d0
}
   1022e:	rts

00010230 <builtIn_callEvent>:

builtIn(callEvent)
{
   10230:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10234:	       movea.l 20(sp),a0
   10238:	       move.l 24(a0),d0
   1023c:	       move.l d0,-(sp)
   1023e:	       pea 7 <_start+0x7>
   10242:	       lea 8(sp),a0
   10246:	       move.l a0,-(sp)
   10248:	       jsr 14610 <getValueType>
   1024e:	       lea 12(sp),sp
   10252:	       tst.w d0
   10254:	   ,-- bne.s 1025c <builtIn_callEvent+0x2c>
   10256:	   |   moveq #1,d0
   10258:	,--|-- bra.w 102f2 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1025c:	|  '-> moveq #24,d0
   1025e:	|      add.l 20(sp),d0
   10262:	|      move.l d0,-(sp)
   10264:	|      jsr 14f94 <trimStack>
   1026a:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1026c:	|      movea.l 20(sp),a0
   10270:	|      move.l 24(a0),d0
   10274:	|      move.l d0,-(sp)
   10276:	|      pea 7 <_start+0x7>
   1027a:	|      moveq #12,d0
   1027c:	|      add.l sp,d0
   1027e:	|      move.l d0,-(sp)
   10280:	|      jsr 14610 <getValueType>
   10286:	|      lea 12(sp),sp
   1028a:	|      tst.w d0
   1028c:	|  ,-- bne.s 10292 <builtIn_callEvent+0x62>
   1028e:	|  |   moveq #1,d0
   10290:	+--|-- bra.s 102f2 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10292:	|  '-> moveq #24,d0
   10294:	|      add.l 20(sp),d0
   10298:	|      move.l d0,-(sp)
   1029a:	|      jsr 14f94 <trimStack>
   102a0:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   102a2:	|      move.l (sp),d1
   102a4:	|      move.l 4(sp),d0
   102a8:	|      move.l d1,-(sp)
   102aa:	|      move.l d0,-(sp)
   102ac:	|      jsr d3aa <getCombinationFunction>
   102b2:	|      addq.l #8,sp
   102b4:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   102b8:	|  ,-- beq.s 102d8 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   102ba:	|  |   moveq #28,d0
   102bc:	|  |   add.l 20(sp),d0
   102c0:	|  |   move.l 8(sp),-(sp)
   102c4:	|  |   pea 2 <_start+0x2>
   102c8:	|  |   move.l d0,-(sp)
   102ca:	|  |   jsr 14f02 <setVariable>
   102d0:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   102d4:	|  |   moveq #4,d0
   102d6:	+--|-- bra.s 102f2 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   102d8:	|  '-> moveq #28,d0
   102da:	|      add.l 20(sp),d0
   102de:	|      clr.l -(sp)
   102e0:	|      pea 1 <_start+0x1>
   102e4:	|      move.l d0,-(sp)
   102e6:	|      jsr 14f02 <setVariable>
   102ec:	|      lea 12(sp),sp
	return BR_CONTINUE;
   102f0:	|      moveq #2,d0
}
   102f2:	'----> lea 12(sp),sp
   102f6:	       rts

000102f8 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   102f8:	move.w #1,1c8a6 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   10300:	moveq #2,d0
}
   10302:	rts

00010304 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10304:	moveq #24,d0
   10306:	add.l 8(sp),d0
   1030a:	move.l d0,-(sp)
   1030c:	jsr 14f94 <trimStack>
   10312:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10314:	pea 19896 <PutChar+0x1d20>
   1031a:	jsr 170d4 <KPrintF>
   10320:	addq.l #4,sp
	return BR_CONTINUE;
   10322:	moveq #2,d0
}
   10324:	rts

00010326 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10326:	pea 19896 <PutChar+0x1d20>
   1032c:	jsr 170d4 <KPrintF>
   10332:	addq.l #4,sp
	return BR_CONTINUE;
   10334:	moveq #2,d0
}
   10336:	rts

00010338 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10338:	pea 19896 <PutChar+0x1d20>
   1033e:	jsr 170d4 <KPrintF>
   10344:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10346:	moveq #2,d0
}
   10348:	rts

0001034a <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   1034a:	pea 19896 <PutChar+0x1d20>
   10350:	jsr 170d4 <KPrintF>
   10356:	addq.l #4,sp
	return BR_CONTINUE;
   10358:	moveq #2,d0
}
   1035a:	rts

0001035c <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1035c:	pea 19896 <PutChar+0x1d20>
   10362:	jsr 170d4 <KPrintF>
   10368:	addq.l #4,sp
	return BR_CONTINUE;
   1036a:	moveq #2,d0
}
   1036c:	rts

0001036e <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1036e:	pea 19896 <PutChar+0x1d20>
   10374:	jsr 170d4 <KPrintF>
   1037a:	addq.l #4,sp
	return BR_CONTINUE;
   1037c:	moveq #2,d0
}
   1037e:	rts

00010380 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10380:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10384:	       movea.l 20(sp),a0
   10388:	       move.l 24(a0),d0
   1038c:	       move.l d0,-(sp)
   1038e:	       pea 1 <_start+0x1>
   10392:	       moveq #16,d0
   10394:	       add.l sp,d0
   10396:	       move.l d0,-(sp)
   10398:	       jsr 14610 <getValueType>
   1039e:	       lea 12(sp),sp
   103a2:	       tst.w d0
   103a4:	   ,-- bne.s 103ac <builtIn_startMusic+0x2c>
   103a6:	   |   moveq #1,d0
   103a8:	,--|-- bra.w 1044c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   103ac:	|  '-> moveq #24,d0
   103ae:	|      add.l 20(sp),d0
   103b2:	|      move.l d0,-(sp)
   103b4:	|      jsr 14f94 <trimStack>
   103ba:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   103bc:	|      movea.l 20(sp),a0
   103c0:	|      move.l 24(a0),d0
   103c4:	|      move.l d0,-(sp)
   103c6:	|      pea 1 <_start+0x1>
   103ca:	|      moveq #12,d0
   103cc:	|      add.l sp,d0
   103ce:	|      move.l d0,-(sp)
   103d0:	|      jsr 14610 <getValueType>
   103d6:	|      lea 12(sp),sp
   103da:	|      tst.w d0
   103dc:	|  ,-- bne.s 103e2 <builtIn_startMusic+0x62>
   103de:	|  |   moveq #1,d0
   103e0:	+--|-- bra.s 1044c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   103e2:	|  '-> moveq #24,d0
   103e4:	|      add.l 20(sp),d0
   103e8:	|      move.l d0,-(sp)
   103ea:	|      jsr 14f94 <trimStack>
   103f0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   103f2:	|      movea.l 20(sp),a0
   103f6:	|      move.l 24(a0),d0
   103fa:	|      move.l d0,-(sp)
   103fc:	|      pea 5 <_start+0x5>
   10400:	|      lea 8(sp),a0
   10404:	|      move.l a0,-(sp)
   10406:	|      jsr 14610 <getValueType>
   1040c:	|      lea 12(sp),sp
   10410:	|      tst.w d0
   10412:	|  ,-- bne.s 10418 <builtIn_startMusic+0x98>
   10414:	|  |   moveq #1,d0
   10416:	+--|-- bra.s 1044c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10418:	|  '-> moveq #24,d0
   1041a:	|      add.l 20(sp),d0
   1041e:	|      move.l d0,-(sp)
   10420:	|      jsr 14f94 <trimStack>
   10426:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10428:	|      movea.l 8(sp),a0
   1042c:	|      move.l 4(sp),d1
   10430:	|      move.l (sp),d0
   10432:	|      move.l a0,-(sp)
   10434:	|      move.l d1,-(sp)
   10436:	|      move.l d0,-(sp)
   10438:	|      jsr cfb6 <playMOD>
   1043e:	|      lea 12(sp),sp
   10442:	|      tst.w d0
   10444:	|  ,-- bne.s 1044a <builtIn_startMusic+0xca>
   10446:	|  |   moveq #2,d0
   10448:	+--|-- bra.s 1044c <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   1044a:	|  '-> moveq #2,d0
}
   1044c:	'----> lea 12(sp),sp
   10450:	       rts

00010452 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10452:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10454:	       movea.l 12(sp),a0
   10458:	       move.l 24(a0),d0
   1045c:	       move.l d0,-(sp)
   1045e:	       pea 1 <_start+0x1>
   10462:	       move.l sp,d0
   10464:	       addq.l #8,d0
   10466:	       move.l d0,-(sp)
   10468:	       jsr 14610 <getValueType>
   1046e:	       lea 12(sp),sp
   10472:	       tst.w d0
   10474:	   ,-- bne.s 1047a <builtIn_stopMusic+0x28>
   10476:	   |   moveq #1,d0
   10478:	,--|-- bra.s 10498 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   1047a:	|  '-> moveq #24,d0
   1047c:	|      add.l 12(sp),d0
   10480:	|      move.l d0,-(sp)
   10482:	|      jsr 14f94 <trimStack>
   10488:	|      addq.l #4,sp
	stopMOD (v);
   1048a:	|      move.l (sp),d0
   1048c:	|      move.l d0,-(sp)
   1048e:	|      jsr d052 <stopMOD>
   10494:	|      addq.l #4,sp
	return BR_CONTINUE;
   10496:	|      moveq #2,d0
}
   10498:	'----> addq.l #4,sp
   1049a:	       rts

0001049c <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   1049c:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1049e:	       movea.l 16(sp),a0
   104a2:	       move.l 24(a0),d0
   104a6:	       move.l d0,-(sp)
   104a8:	       pea 1 <_start+0x1>
   104ac:	       move.l sp,d0
   104ae:	       addq.l #8,d0
   104b0:	       move.l d0,-(sp)
   104b2:	       jsr 14610 <getValueType>
   104b8:	       lea 12(sp),sp
   104bc:	       tst.w d0
   104be:	   ,-- bne.s 104c4 <builtIn_setMusicVolume+0x28>
   104c0:	   |   moveq #1,d0
   104c2:	,--|-- bra.s 1051e <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   104c4:	|  '-> moveq #24,d0
   104c6:	|      add.l 16(sp),d0
   104ca:	|      move.l d0,-(sp)
   104cc:	|      jsr 14f94 <trimStack>
   104d2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   104d4:	|      movea.l 16(sp),a0
   104d8:	|      move.l 24(a0),d0
   104dc:	|      move.l d0,-(sp)
   104de:	|      pea 1 <_start+0x1>
   104e2:	|      moveq #12,d0
   104e4:	|      add.l sp,d0
   104e6:	|      move.l d0,-(sp)
   104e8:	|      jsr 14610 <getValueType>
   104ee:	|      lea 12(sp),sp
   104f2:	|      tst.w d0
   104f4:	|  ,-- bne.s 104fa <builtIn_setMusicVolume+0x5e>
   104f6:	|  |   moveq #1,d0
   104f8:	+--|-- bra.s 1051e <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   104fa:	|  '-> moveq #24,d0
   104fc:	|      add.l 16(sp),d0
   10500:	|      move.l d0,-(sp)
   10502:	|      jsr 14f94 <trimStack>
   10508:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   1050a:	|      move.l (sp),d1
   1050c:	|      move.l 4(sp),d0
   10510:	|      move.l d1,-(sp)
   10512:	|      move.l d0,-(sp)
   10514:	|      jsr d038 <setMusicVolume>
   1051a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1051c:	|      moveq #2,d0
}
   1051e:	'----> addq.l #8,sp
   10520:	       rts

00010522 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10522:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10524:	       movea.l 12(sp),a0
   10528:	       move.l 24(a0),d0
   1052c:	       move.l d0,-(sp)
   1052e:	       pea 1 <_start+0x1>
   10532:	       move.l sp,d0
   10534:	       addq.l #8,d0
   10536:	       move.l d0,-(sp)
   10538:	       jsr 14610 <getValueType>
   1053e:	       lea 12(sp),sp
   10542:	       tst.w d0
   10544:	   ,-- bne.s 1054a <builtIn_setDefaultMusicVolume+0x28>
   10546:	   |   moveq #1,d0
   10548:	,--|-- bra.s 10568 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   1054a:	|  '-> moveq #24,d0
   1054c:	|      add.l 12(sp),d0
   10550:	|      move.l d0,-(sp)
   10552:	|      jsr 14f94 <trimStack>
   10558:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   1055a:	|      move.l (sp),d0
   1055c:	|      move.l d0,-(sp)
   1055e:	|      jsr d01c <setDefaultMusicVolume>
   10564:	|      addq.l #4,sp
	return BR_CONTINUE;
   10566:	|      moveq #2,d0
}
   10568:	'----> addq.l #4,sp
   1056a:	       rts

0001056c <builtIn_playSound>:

builtIn(playSound)
{
   1056c:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1056e:	       movea.l 12(sp),a0
   10572:	       move.l 24(a0),d0
   10576:	       move.l d0,-(sp)
   10578:	       pea 5 <_start+0x5>
   1057c:	       move.l sp,d0
   1057e:	       addq.l #8,d0
   10580:	       move.l d0,-(sp)
   10582:	       jsr 14610 <getValueType>
   10588:	       lea 12(sp),sp
   1058c:	       tst.w d0
   1058e:	   ,-- bne.s 10594 <builtIn_playSound+0x28>
   10590:	   |   moveq #1,d0
   10592:	,--|-- bra.s 105bc <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10594:	|  '-> moveq #24,d0
   10596:	|      add.l 12(sp),d0
   1059a:	|      move.l d0,-(sp)
   1059c:	|      jsr 14f94 <trimStack>
   105a2:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   105a4:	|      move.l (sp),d0
   105a6:	|      clr.l -(sp)
   105a8:	|      move.l d0,-(sp)
   105aa:	|      jsr d040 <startSound>
   105b0:	|      addq.l #8,sp
   105b2:	|      tst.w d0
   105b4:	|  ,-- bne.s 105ba <builtIn_playSound+0x4e>
   105b6:	|  |   moveq #2,d0
   105b8:	+--|-- bra.s 105bc <builtIn_playSound+0x50>
	return BR_CONTINUE;
   105ba:	|  '-> moveq #2,d0
}
   105bc:	'----> addq.l #4,sp
   105be:	       rts

000105c0 <builtIn_loopSound>:

builtIn(loopSound)
{
   105c0:	             lea -28(sp),sp
   105c4:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   105c6:	             tst.l 36(sp)
   105ca:	         ,-- bgt.s 105e0 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   105cc:	         |   pea 198b9 <PutChar+0x1d43>
   105d2:	         |   jsr 170d4 <KPrintF>
   105d8:	         |   addq.l #4,sp
		return BR_ERROR;
   105da:	         |   moveq #1,d0
   105dc:	,--------|-- bra.w 1079c <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   105e0:	|        '-> moveq #1,d0
   105e2:	|            cmp.l 36(sp),d0
   105e6:	|     ,----- blt.s 10642 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   105e8:	|     |      movea.l 40(sp),a0
   105ec:	|     |      move.l 24(a0),d0
   105f0:	|     |      move.l d0,-(sp)
   105f2:	|     |      pea 5 <_start+0x5>
   105f6:	|     |      lea 16(sp),a0
   105fa:	|     |      move.l a0,-(sp)
   105fc:	|     |      jsr 14610 <getValueType>
   10602:	|     |      lea 12(sp),sp
   10606:	|     |      tst.w d0
   10608:	|     |  ,-- bne.s 10610 <builtIn_loopSound+0x50>
   1060a:	|     |  |   moveq #1,d0
   1060c:	+-----|--|-- bra.w 1079c <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10610:	|     |  '-> moveq #24,d0
   10612:	|     |      add.l 40(sp),d0
   10616:	|     |      move.l d0,-(sp)
   10618:	|     |      jsr 14f94 <trimStack>
   1061e:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10620:	|     |      move.l 8(sp),d0
   10624:	|     |      pea 1 <_start+0x1>
   10628:	|     |      move.l d0,-(sp)
   1062a:	|     |      jsr d040 <startSound>
   10630:	|     |      addq.l #8,sp
   10632:	|     |      tst.w d0
   10634:	|     |  ,-- bne.s 1063c <builtIn_loopSound+0x7c>
   10636:	|     |  |   moveq #2,d0
   10638:	+-----|--|-- bra.w 1079c <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   1063c:	|     |  '-> moveq #2,d0
   1063e:	+-----|----- bra.w 1079c <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10642:	|     '----> moveq #2,d1
   10644:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10648:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   1064c:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10650:	|            movea.l 40(sp),a0
   10654:	|            movea.l 24(a0),a0
   10658:	|            move.l (a0),d0
   1065a:	|            moveq #5,d1
   1065c:	|            cmp.l d0,d1
   1065e:	|  ,-------- beq.w 10736 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10662:	|  |         movea.l 40(sp),a0
   10666:	|  |         move.l 24(a0),d0
   1066a:	|  |         move.l d0,-(sp)
   1066c:	|  |         pea 1 <_start+0x1>
   10670:	|  |         lea 12(sp),a0
   10674:	|  |         move.l a0,-(sp)
   10676:	|  |         jsr 14610 <getValueType>
   1067c:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10680:	|  |         moveq #24,d0
   10682:	|  |         add.l 40(sp),d0
   10686:	|  |         move.l d0,-(sp)
   10688:	|  |         jsr 14f94 <trimStack>
   1068e:	|  |         addq.l #4,sp
			numParams--;
   10690:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10694:	|  +-------- bra.w 10736 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10698:	|  |  ,----> movea.l 40(sp),a0
   1069c:	|  |  |      move.l 24(a0),d0
   106a0:	|  |  |      move.l d0,-(sp)
   106a2:	|  |  |      pea 5 <_start+0x5>
   106a6:	|  |  |      lea 16(sp),a0
   106aa:	|  |  |      move.l a0,-(sp)
   106ac:	|  |  |      jsr 14610 <getValueType>
   106b2:	|  |  |      lea 12(sp),sp
   106b6:	|  |  |      tst.w d0
   106b8:	|  |  |  ,-- bne.s 106ce <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   106ba:	|  |  |  |   pea 198f7 <PutChar+0x1d81>
   106c0:	|  |  |  |   jsr 170d4 <KPrintF>
   106c6:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   106c8:	|  |  |  |   moveq #1,d0
   106ca:	+--|--|--|-- bra.w 1079c <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   106ce:	|  |  |  '-> moveq #20,d0
   106d0:	|  |  |      move.l d0,20(sp)
   106d4:	|  |  |      clr.l 16(sp)
   106d8:	|  |  |      move.l 1c7d8 <SysBase>,d0
   106de:	|  |  |      movea.l d0,a6
   106e0:	|  |  |      move.l 20(sp),d0
   106e4:	|  |  |      move.l 16(sp),d1
   106e8:	|  |  |      jsr -684(a6)
   106ec:	|  |  |      move.l d0,12(sp)
   106f0:	|  |  |      move.l 12(sp),d0
   106f4:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   106f8:	|  |  |  ,-- bne.s 10700 <builtIn_loopSound+0x140>
   106fa:	|  |  |  |   moveq #1,d0
   106fc:	+--|--|--|-- bra.w 1079c <builtIn_loopSound+0x1dc>

			s->next = old;
   10700:	|  |  |  '-> movea.l 28(sp),a0
   10704:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   1070a:	|  |  |      movea.l 28(sp),a0
   1070e:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10712:	|  |  |      move.l 8(sp),d0
   10716:	|  |  |      movea.l 28(sp),a0
   1071a:	|  |  |      move.l d0,(a0)
			old = s;
   1071c:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10722:	|  |  |      moveq #24,d0
   10724:	|  |  |      add.l 40(sp),d0
   10728:	|  |  |      move.l d0,-(sp)
   1072a:	|  |  |      jsr 14f94 <trimStack>
   10730:	|  |  |      addq.l #4,sp
			numParams--;
   10732:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10736:	|  '--|----> tst.l 36(sp)
   1073a:	|     '----- bne.w 10698 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   1073e:	|        ,-- bra.s 1074a <builtIn_loopSound+0x18a>
   10740:	|     ,--|-> movea.l 28(sp),a0
   10744:	|     |  |   move.l 4(a0),28(sp)
   1074a:	|     |  '-> movea.l 28(sp),a0
   1074e:	|     |      move.l 4(a0),d0
   10752:	|     '----- bne.s 10740 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10754:	|            move.l 4(sp),d0
   10758:	|            moveq #1,d1
   1075a:	|            cmp.l d0,d1
   1075c:	|     ,----- bge.s 10774 <builtIn_loopSound+0x1b4>
			s->next = old;
   1075e:	|     |      movea.l 28(sp),a0
   10762:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10768:	|     |      movea.l 24(sp),a0
   1076c:	|     |      move.l 28(sp),8(a0)
   10772:	|     |  ,-- bra.s 10784 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10774:	|     '--|-> move.l 4(sp),d0
   10778:	|        +-- beq.s 10784 <builtIn_loopSound+0x1c4>
			s->next = s;
   1077a:	|        |   movea.l 28(sp),a0
   1077e:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10784:	|        '-> movea.l 24(sp),a0
   10788:	|            moveq #-1,d0
   1078a:	|            move.l d0,16(a0)
		playSoundList(old);
   1078e:	|            move.l 24(sp),-(sp)
   10792:	|            jsr cfba <playSoundList>
   10798:	|            addq.l #4,sp
		return BR_CONTINUE;
   1079a:	|            moveq #2,d0
	}
}
   1079c:	'----------> movea.l (sp)+,a6
   1079e:	             lea 28(sp),sp
   107a2:	             rts

000107a4 <builtIn_stopSound>:

builtIn(stopSound)
{
   107a4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   107a6:	       movea.l 12(sp),a0
   107aa:	       move.l 24(a0),d0
   107ae:	       move.l d0,-(sp)
   107b0:	       pea 5 <_start+0x5>
   107b4:	       move.l sp,d0
   107b6:	       addq.l #8,d0
   107b8:	       move.l d0,-(sp)
   107ba:	       jsr 14610 <getValueType>
   107c0:	       lea 12(sp),sp
   107c4:	       tst.w d0
   107c6:	   ,-- bne.s 107cc <builtIn_stopSound+0x28>
   107c8:	   |   moveq #1,d0
   107ca:	,--|-- bra.s 107ea <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   107cc:	|  '-> moveq #24,d0
   107ce:	|      add.l 12(sp),d0
   107d2:	|      move.l d0,-(sp)
   107d4:	|      jsr 14f94 <trimStack>
   107da:	|      addq.l #4,sp
	huntKillSound (v);
   107dc:	|      move.l (sp),d0
   107de:	|      move.l d0,-(sp)
   107e0:	|      jsr cfb2 <huntKillSound>
   107e6:	|      addq.l #4,sp
	return BR_CONTINUE;
   107e8:	|      moveq #2,d0
}
   107ea:	'----> addq.l #4,sp
   107ec:	       rts

000107ee <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   107ee:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107f0:	       movea.l 12(sp),a0
   107f4:	       move.l 24(a0),d0
   107f8:	       move.l d0,-(sp)
   107fa:	       pea 1 <_start+0x1>
   107fe:	       move.l sp,d0
   10800:	       addq.l #8,d0
   10802:	       move.l d0,-(sp)
   10804:	       jsr 14610 <getValueType>
   1080a:	       lea 12(sp),sp
   1080e:	       tst.w d0
   10810:	   ,-- bne.s 10816 <builtIn_setDefaultSoundVolume+0x28>
   10812:	   |   moveq #1,d0
   10814:	,--|-- bra.s 10834 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10816:	|  '-> moveq #24,d0
   10818:	|      add.l 12(sp),d0
   1081c:	|      move.l d0,-(sp)
   1081e:	|      jsr 14f94 <trimStack>
   10824:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10826:	|      move.l (sp),d0
   10828:	|      move.l d0,-(sp)
   1082a:	|      jsr d028 <setDefaultSoundVolume>
   10830:	|      addq.l #4,sp
	return BR_CONTINUE;
   10832:	|      moveq #2,d0
}
   10834:	'----> addq.l #4,sp
   10836:	       rts

00010838 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10838:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1083a:	       movea.l 16(sp),a0
   1083e:	       move.l 24(a0),d0
   10842:	       move.l d0,-(sp)
   10844:	       pea 1 <_start+0x1>
   10848:	       move.l sp,d0
   1084a:	       addq.l #8,d0
   1084c:	       move.l d0,-(sp)
   1084e:	       jsr 14610 <getValueType>
   10854:	       lea 12(sp),sp
   10858:	       tst.w d0
   1085a:	   ,-- bne.s 10860 <builtIn_setSoundVolume+0x28>
   1085c:	   |   moveq #1,d0
   1085e:	,--|-- bra.s 108ba <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10860:	|  '-> moveq #24,d0
   10862:	|      add.l 16(sp),d0
   10866:	|      move.l d0,-(sp)
   10868:	|      jsr 14f94 <trimStack>
   1086e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10870:	|      movea.l 16(sp),a0
   10874:	|      move.l 24(a0),d0
   10878:	|      move.l d0,-(sp)
   1087a:	|      pea 5 <_start+0x5>
   1087e:	|      moveq #12,d0
   10880:	|      add.l sp,d0
   10882:	|      move.l d0,-(sp)
   10884:	|      jsr 14610 <getValueType>
   1088a:	|      lea 12(sp),sp
   1088e:	|      tst.w d0
   10890:	|  ,-- bne.s 10896 <builtIn_setSoundVolume+0x5e>
   10892:	|  |   moveq #1,d0
   10894:	+--|-- bra.s 108ba <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10896:	|  '-> moveq #24,d0
   10898:	|      add.l 16(sp),d0
   1089c:	|      move.l d0,-(sp)
   1089e:	|      jsr 14f94 <trimStack>
   108a4:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   108a6:	|      move.l (sp),d1
   108a8:	|      move.l 4(sp),d0
   108ac:	|      move.l d1,-(sp)
   108ae:	|      move.l d0,-(sp)
   108b0:	|      jsr d03c <setSoundVolume>
   108b6:	|      addq.l #8,sp
	return BR_CONTINUE;
   108b8:	|      moveq #2,d0
}
   108ba:	'----> addq.l #8,sp
   108bc:	       rts

000108be <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   108be:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108c2:	       movea.l 20(sp),a0
   108c6:	       move.l 24(a0),d0
   108ca:	       move.l d0,-(sp)
   108cc:	       pea 1 <_start+0x1>
   108d0:	       moveq #12,d0
   108d2:	       add.l sp,d0
   108d4:	       move.l d0,-(sp)
   108d6:	       jsr 14610 <getValueType>
   108dc:	       lea 12(sp),sp
   108e0:	       tst.w d0
   108e2:	   ,-- bne.s 108ea <builtIn_setSoundLoopPoints+0x2c>
   108e4:	   |   moveq #1,d0
   108e6:	,--|-- bra.w 10982 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   108ea:	|  '-> moveq #24,d0
   108ec:	|      add.l 20(sp),d0
   108f0:	|      move.l d0,-(sp)
   108f2:	|      jsr 14f94 <trimStack>
   108f8:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108fa:	|      movea.l 20(sp),a0
   108fe:	|      move.l 24(a0),d0
   10902:	|      move.l d0,-(sp)
   10904:	|      pea 1 <_start+0x1>
   10908:	|      lea 8(sp),a0
   1090c:	|      move.l a0,-(sp)
   1090e:	|      jsr 14610 <getValueType>
   10914:	|      lea 12(sp),sp
   10918:	|      tst.w d0
   1091a:	|  ,-- bne.s 10920 <builtIn_setSoundLoopPoints+0x62>
   1091c:	|  |   moveq #1,d0
   1091e:	+--|-- bra.s 10982 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10920:	|  '-> moveq #24,d0
   10922:	|      add.l 20(sp),d0
   10926:	|      move.l d0,-(sp)
   10928:	|      jsr 14f94 <trimStack>
   1092e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10930:	|      movea.l 20(sp),a0
   10934:	|      move.l 24(a0),d0
   10938:	|      move.l d0,-(sp)
   1093a:	|      pea 5 <_start+0x5>
   1093e:	|      moveq #16,d0
   10940:	|      add.l sp,d0
   10942:	|      move.l d0,-(sp)
   10944:	|      jsr 14610 <getValueType>
   1094a:	|      lea 12(sp),sp
   1094e:	|      tst.w d0
   10950:	|  ,-- bne.s 10956 <builtIn_setSoundLoopPoints+0x98>
   10952:	|  |   moveq #1,d0
   10954:	+--|-- bra.s 10982 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10956:	|  '-> moveq #24,d0
   10958:	|      add.l 20(sp),d0
   1095c:	|      move.l d0,-(sp)
   1095e:	|      jsr 14f94 <trimStack>
   10964:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10966:	|      movea.l 4(sp),a0
   1096a:	|      move.l (sp),d1
   1096c:	|      move.l 8(sp),d0
   10970:	|      move.l a0,-(sp)
   10972:	|      move.l d1,-(sp)
   10974:	|      move.l d0,-(sp)
   10976:	|      jsr d034 <setSoundLoop>
   1097c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10980:	|      moveq #2,d0
}
   10982:	'----> lea 12(sp),sp
   10986:	       rts

00010988 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10988:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   1098a:	          movea.l 12(sp),a0
   1098e:	          movea.l 24(a0),a0
   10992:	          move.l (a0),d0
   10994:	          moveq #5,d1
   10996:	          cmp.l d0,d1
   10998:	,-------- bne.s 109dc <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   1099a:	|         movea.l 12(sp),a0
   1099e:	|         move.l 24(a0),d0
   109a2:	|         move.l d0,-(sp)
   109a4:	|         pea 5 <_start+0x5>
   109a8:	|         move.l sp,d0
   109aa:	|         addq.l #8,d0
   109ac:	|         move.l d0,-(sp)
   109ae:	|         jsr 14610 <getValueType>
   109b4:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   109b8:	|         moveq #24,d0
   109ba:	|         add.l 12(sp),d0
   109be:	|         move.l d0,-(sp)
   109c0:	|         jsr 14f94 <trimStack>
   109c6:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   109c8:	|         move.l (sp),d0
   109ca:	|         move.l d0,-(sp)
   109cc:	|         jsr 1687e <setFloor>
   109d2:	|         addq.l #4,sp
   109d4:	|         tst.w d0
   109d6:	|  ,----- bne.s 109f2 <builtIn_setFloor+0x6a>
   109d8:	|  |      moveq #1,d0
   109da:	|  |  ,-- bra.s 109f4 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   109dc:	'--|--|-> moveq #24,d0
   109de:	   |  |   add.l 12(sp),d0
   109e2:	   |  |   move.l d0,-(sp)
   109e4:	   |  |   jsr 14f94 <trimStack>
   109ea:	   |  |   addq.l #4,sp
		setFloorNull ();
   109ec:	   |  |   jsr 16ff8 <setFloorNull>
	}
	return BR_CONTINUE;
   109f2:	   '--|-> moveq #2,d0
}
   109f4:	      '-> addq.l #4,sp
   109f6:	          rts

000109f8 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   109f8:	jsr 16116 <drawFloor>
	return BR_CONTINUE;
   109fe:	moveq #2,d0
}
   10a00:	rts

00010a02 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10a02:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10a04:	          movea.l 12(sp),a0
   10a08:	          movea.l 24(a0),a0
   10a0c:	          move.l (a0),d0
   10a0e:	          moveq #5,d1
   10a10:	          cmp.l d0,d1
   10a12:	,-------- bne.s 10a56 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10a14:	|         movea.l 12(sp),a0
   10a18:	|         move.l 24(a0),d0
   10a1c:	|         move.l d0,-(sp)
   10a1e:	|         pea 5 <_start+0x5>
   10a22:	|         move.l sp,d0
   10a24:	|         addq.l #8,d0
   10a26:	|         move.l d0,-(sp)
   10a28:	|         jsr 14610 <getValueType>
   10a2e:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10a32:	|         moveq #24,d0
   10a34:	|         add.l 12(sp),d0
   10a38:	|         move.l d0,-(sp)
   10a3a:	|         jsr 14f94 <trimStack>
   10a40:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10a42:	|         move.l (sp),d0
   10a44:	|         move.l d0,-(sp)
   10a46:	|         jsr 8544 <setZBuffer>
   10a4c:	|         addq.l #4,sp
   10a4e:	|         tst.w d0
   10a50:	|  ,----- bne.s 10a6c <builtIn_setZBuffer+0x6a>
   10a52:	|  |      moveq #1,d0
   10a54:	|  |  ,-- bra.s 10a6e <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10a56:	'--|--|-> moveq #24,d0
   10a58:	   |  |   add.l 12(sp),d0
   10a5c:	   |  |   move.l d0,-(sp)
   10a5e:	   |  |   jsr 14f94 <trimStack>
   10a64:	   |  |   addq.l #4,sp
		killZBuffer ();
   10a66:	   |  |   jsr 84f8 <killZBuffer>
	}
	return BR_CONTINUE;
   10a6c:	   '--|-> moveq #2,d0
}
   10a6e:	      '-> addq.l #4,sp
   10a70:	          rts

00010a72 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10a72:	pea 1992e <talk.c.490538ff+0x12>
   10a78:	jsr 170d4 <KPrintF>
   10a7e:	addq.l #4,sp
	return BR_CONTINUE;
   10a80:	moveq #2,d0
}
   10a82:	rts

00010a84 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a84:	          movea.l 8(sp),a0
   10a88:	          move.l 24(a0),d0
   10a8c:	          move.l d0,-(sp)
   10a8e:	          pea 1 <_start+0x1>
   10a92:	          pea 1c8a2 <speechMode>
   10a98:	          jsr 14610 <getValueType>
   10a9e:	          lea 12(sp),sp
   10aa2:	          tst.w d0
   10aa4:	      ,-- bne.s 10aaa <builtIn_setSpeechMode+0x26>
   10aa6:	      |   moveq #1,d0
   10aa8:	,-----|-- bra.s 10ae2 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10aaa:	|     '-> moveq #24,d0
   10aac:	|         add.l 8(sp),d0
   10ab0:	|         move.l d0,-(sp)
   10ab2:	|         jsr 14f94 <trimStack>
   10ab8:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10aba:	|         move.l 1c8a2 <speechMode>,d0
   10ac0:	|     ,-- bmi.s 10ace <builtIn_setSpeechMode+0x4a>
   10ac2:	|     |   move.l 1c8a2 <speechMode>,d0
   10ac8:	|     |   moveq #2,d1
   10aca:	|     |   cmp.l d0,d1
   10acc:	|  ,--|-- bge.s 10ae0 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10ace:	|  |  '-> pea 19947 <talk.c.490538ff+0x2b>
   10ad4:	|  |      jsr 170d4 <KPrintF>
   10ada:	|  |      addq.l #4,sp
		return BR_ERROR;
   10adc:	|  |      moveq #1,d0
   10ade:	+--|----- bra.s 10ae2 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10ae0:	|  '----> moveq #2,d0
}
   10ae2:	'-------> rts

00010ae4 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10ae4:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10ae6:	       jsr 3ed6 <isThereAnySpeechGoingOn>
   10aec:	       move.l d0,(sp)
	if (i == -1) {
   10aee:	       moveq #-1,d0
   10af0:	       cmp.l (sp),d0
   10af2:	,----- bne.s 10b0e <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10af4:	|      moveq #28,d0
   10af6:	|      add.l 12(sp),d0
   10afa:	|      clr.l -(sp)
   10afc:	|      pea 1 <_start+0x1>
   10b00:	|      move.l d0,-(sp)
   10b02:	|      jsr 14f02 <setVariable>
   10b08:	|      lea 12(sp),sp
   10b0c:	|  ,-- bra.s 10b26 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10b0e:	'--|-> moveq #28,d0
   10b10:	   |   add.l 12(sp),d0
   10b14:	   |   move.l (sp),-(sp)
   10b16:	   |   pea 7 <_start+0x7>
   10b1a:	   |   move.l d0,-(sp)
   10b1c:	   |   jsr 14f02 <setVariable>
   10b22:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10b26:	   '-> moveq #2,d0
}
   10b28:	       addq.l #4,sp
   10b2a:	       rts

00010b2c <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10b2c:	jsr 6a66 <killSpeechTimers>
	return BR_CONTINUE;
   10b32:	moveq #2,d0
}
   10b34:	rts

00010b36 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10b36:	       move.l 1c8e8 <overRegion>,d0
   10b3c:	,----- beq.s 10b66 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10b3e:	|      movea.l 1c8e8 <overRegion>,a0
   10b44:	|      movea.l 28(a0),a0
   10b48:	|      move.l 4(a0),d1
   10b4c:	|      moveq #28,d0
   10b4e:	|      add.l 8(sp),d0
   10b52:	|      move.l d1,-(sp)
   10b54:	|      pea 7 <_start+0x7>
   10b58:	|      move.l d0,-(sp)
   10b5a:	|      jsr 14f02 <setVariable>
   10b60:	|      lea 12(sp),sp
   10b64:	|  ,-- bra.s 10b7e <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10b66:	'--|-> moveq #28,d0
   10b68:	   |   add.l 8(sp),d0
   10b6c:	   |   clr.l -(sp)
   10b6e:	   |   pea 1 <_start+0x1>
   10b72:	   |   move.l d0,-(sp)
   10b74:	   |   jsr 14f02 <setVariable>
   10b7a:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10b7e:	   '-> moveq #2,d0
}
   10b80:	       rts

00010b82 <builtIn_rename>:

builtIn(rename)
{
   10b82:	       lea -16(sp),sp
   10b86:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10b88:	       movea.l 28(sp),a0
   10b8c:	       move.l 24(a0),d0
   10b90:	       move.l d0,-(sp)
   10b92:	       jsr 14be6 <getTextFromAnyVar>
   10b98:	       addq.l #4,sp
   10b9a:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10b9e:	   ,-- bne.s 10ba4 <builtIn_rename+0x22>
   10ba0:	   |   moveq #1,d0
   10ba2:	,--|-- bra.s 10c1e <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10ba4:	|  '-> moveq #24,d0
   10ba6:	|      add.l 28(sp),d0
   10baa:	|      move.l d0,-(sp)
   10bac:	|      jsr 14f94 <trimStack>
   10bb2:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10bb4:	|      movea.l 28(sp),a0
   10bb8:	|      move.l 24(a0),d0
   10bbc:	|      move.l d0,-(sp)
   10bbe:	|      pea 7 <_start+0x7>
   10bc2:	|      lea 12(sp),a0
   10bc6:	|      move.l a0,-(sp)
   10bc8:	|      jsr 14610 <getValueType>
   10bce:	|      lea 12(sp),sp
   10bd2:	|      tst.w d0
   10bd4:	|  ,-- bne.s 10bda <builtIn_rename+0x58>
   10bd6:	|  |   moveq #1,d0
   10bd8:	+--|-- bra.s 10c1e <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10bda:	|  '-> moveq #24,d0
   10bdc:	|      add.l 28(sp),d0
   10be0:	|      move.l d0,-(sp)
   10be2:	|      jsr 14f94 <trimStack>
   10be8:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10bea:	|      move.l 4(sp),d0
   10bee:	|      move.l d0,-(sp)
   10bf0:	|      jsr d376 <findObjectType>
   10bf6:	|      addq.l #4,sp
   10bf8:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10bfc:	|      movea.l 12(sp),a0
   10c00:	|      move.l (a0),8(sp)
   10c04:	|      move.l 1c7d8 <SysBase>,d0
   10c0a:	|      movea.l d0,a6
   10c0c:	|      movea.l 8(sp),a1
   10c10:	|      jsr -690(a6)
	o->screenName = newText;
   10c14:	|      movea.l 12(sp),a0
   10c18:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10c1c:	|      moveq #2,d0
}
   10c1e:	'----> movea.l (sp)+,a6
   10c20:	       lea 16(sp),sp
   10c24:	       rts

00010c26 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10c26:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c2a:	          movea.l 20(sp),a0
   10c2e:	          move.l 24(a0),d0
   10c32:	          move.l d0,-(sp)
   10c34:	          pea 7 <_start+0x7>
   10c38:	          lea 8(sp),a0
   10c3c:	          move.l a0,-(sp)
   10c3e:	          jsr 14610 <getValueType>
   10c44:	          lea 12(sp),sp
   10c48:	          tst.w d0
   10c4a:	      ,-- bne.s 10c52 <builtIn_getObjectX+0x2c>
   10c4c:	      |   moveq #1,d0
   10c4e:	,-----|-- bra.w 10cee <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10c52:	|     '-> moveq #24,d0
   10c54:	|         add.l 20(sp),d0
   10c58:	|         move.l d0,-(sp)
   10c5a:	|         jsr 14f94 <trimStack>
   10c60:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10c62:	|         move.l (sp),d0
   10c64:	|         move.l d0,-(sp)
   10c66:	|         jsr a474 <findPerson>
   10c6c:	|         addq.l #4,sp
   10c6e:	|         move.l d0,8(sp)
	if (pers) {
   10c72:	|     ,-- beq.s 10ca0 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10c74:	|     |   movea.l 8(sp),a0
   10c78:	|     |   move.l (a0),d0
   10c7a:	|     |   move.l d0,-(sp)
   10c7c:	|     |   jsr 1749e <__fixsfsi>
   10c82:	|     |   addq.l #4,sp
   10c84:	|     |   move.l d0,d1
   10c86:	|     |   moveq #28,d0
   10c88:	|     |   add.l 20(sp),d0
   10c8c:	|     |   move.l d1,-(sp)
   10c8e:	|     |   pea 1 <_start+0x1>
   10c92:	|     |   move.l d0,-(sp)
   10c94:	|     |   jsr 14f02 <setVariable>
   10c9a:	|     |   lea 12(sp),sp
   10c9e:	|  ,--|-- bra.s 10cec <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10ca0:	|  |  '-> move.l (sp),d0
   10ca2:	|  |      move.l d0,-(sp)
   10ca4:	|  |      jsr 158d2 <getRegionForObject>
   10caa:	|  |      addq.l #4,sp
   10cac:	|  |      move.l d0,4(sp)
		if (la) {
   10cb0:	|  |  ,-- beq.s 10cd4 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10cb2:	|  |  |   movea.l 4(sp),a0
   10cb6:	|  |  |   move.l 16(a0),d1
   10cba:	|  |  |   moveq #28,d0
   10cbc:	|  |  |   add.l 20(sp),d0
   10cc0:	|  |  |   move.l d1,-(sp)
   10cc2:	|  |  |   pea 1 <_start+0x1>
   10cc6:	|  |  |   move.l d0,-(sp)
   10cc8:	|  |  |   jsr 14f02 <setVariable>
   10cce:	|  |  |   lea 12(sp),sp
   10cd2:	|  +--|-- bra.s 10cec <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10cd4:	|  |  '-> moveq #28,d0
   10cd6:	|  |      add.l 20(sp),d0
   10cda:	|  |      clr.l -(sp)
   10cdc:	|  |      pea 1 <_start+0x1>
   10ce0:	|  |      move.l d0,-(sp)
   10ce2:	|  |      jsr 14f02 <setVariable>
   10ce8:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10cec:	|  '----> moveq #2,d0
}
   10cee:	'-------> lea 12(sp),sp
   10cf2:	          rts

00010cf4 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10cf4:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10cf8:	          movea.l 20(sp),a0
   10cfc:	          move.l 24(a0),d0
   10d00:	          move.l d0,-(sp)
   10d02:	          pea 7 <_start+0x7>
   10d06:	          lea 8(sp),a0
   10d0a:	          move.l a0,-(sp)
   10d0c:	          jsr 14610 <getValueType>
   10d12:	          lea 12(sp),sp
   10d16:	          tst.w d0
   10d18:	      ,-- bne.s 10d20 <builtIn_getObjectY+0x2c>
   10d1a:	      |   moveq #1,d0
   10d1c:	,-----|-- bra.w 10dbe <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10d20:	|     '-> moveq #24,d0
   10d22:	|         add.l 20(sp),d0
   10d26:	|         move.l d0,-(sp)
   10d28:	|         jsr 14f94 <trimStack>
   10d2e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10d30:	|         move.l (sp),d0
   10d32:	|         move.l d0,-(sp)
   10d34:	|         jsr a474 <findPerson>
   10d3a:	|         addq.l #4,sp
   10d3c:	|         move.l d0,8(sp)
	if (pers) {
   10d40:	|     ,-- beq.s 10d70 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10d42:	|     |   movea.l 8(sp),a0
   10d46:	|     |   move.l 4(a0),d0
   10d4a:	|     |   move.l d0,-(sp)
   10d4c:	|     |   jsr 1749e <__fixsfsi>
   10d52:	|     |   addq.l #4,sp
   10d54:	|     |   move.l d0,d1
   10d56:	|     |   moveq #28,d0
   10d58:	|     |   add.l 20(sp),d0
   10d5c:	|     |   move.l d1,-(sp)
   10d5e:	|     |   pea 1 <_start+0x1>
   10d62:	|     |   move.l d0,-(sp)
   10d64:	|     |   jsr 14f02 <setVariable>
   10d6a:	|     |   lea 12(sp),sp
   10d6e:	|  ,--|-- bra.s 10dbc <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10d70:	|  |  '-> move.l (sp),d0
   10d72:	|  |      move.l d0,-(sp)
   10d74:	|  |      jsr 158d2 <getRegionForObject>
   10d7a:	|  |      addq.l #4,sp
   10d7c:	|  |      move.l d0,4(sp)
		if (la) {
   10d80:	|  |  ,-- beq.s 10da4 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   10d82:	|  |  |   movea.l 4(sp),a0
   10d86:	|  |  |   move.l 20(a0),d1
   10d8a:	|  |  |   moveq #28,d0
   10d8c:	|  |  |   add.l 20(sp),d0
   10d90:	|  |  |   move.l d1,-(sp)
   10d92:	|  |  |   pea 1 <_start+0x1>
   10d96:	|  |  |   move.l d0,-(sp)
   10d98:	|  |  |   jsr 14f02 <setVariable>
   10d9e:	|  |  |   lea 12(sp),sp
   10da2:	|  +--|-- bra.s 10dbc <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10da4:	|  |  '-> moveq #28,d0
   10da6:	|  |      add.l 20(sp),d0
   10daa:	|  |      clr.l -(sp)
   10dac:	|  |      pea 1 <_start+0x1>
   10db0:	|  |      move.l d0,-(sp)
   10db2:	|  |      jsr 14f02 <setVariable>
   10db8:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10dbc:	|  '----> moveq #2,d0
}
   10dbe:	'-------> lea 12(sp),sp
   10dc2:	          rts

00010dc4 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10dc4:	       lea -32(sp),sp
   10dc8:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10dcc:	       movea.l 56(sp),a0
   10dd0:	       move.l 24(a0),d0
   10dd4:	       move.l d0,-(sp)
   10dd6:	       pea 1 <_start+0x1>
   10dda:	       lea 28(sp),a0
   10dde:	       move.l a0,-(sp)
   10de0:	       jsr 14610 <getValueType>
   10de6:	       lea 12(sp),sp
   10dea:	       tst.w d0
   10dec:	   ,-- bne.s 10df4 <builtIn_addScreenRegion+0x30>
   10dee:	   |   moveq #1,d0
   10df0:	,--|-- bra.w 10fce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10df4:	|  '-> moveq #24,d0
   10df6:	|      add.l 56(sp),d0
   10dfa:	|      move.l d0,-(sp)
   10dfc:	|      jsr 14f94 <trimStack>
   10e02:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e04:	|      movea.l 56(sp),a0
   10e08:	|      move.l 24(a0),d0
   10e0c:	|      move.l d0,-(sp)
   10e0e:	|      pea 1 <_start+0x1>
   10e12:	|      moveq #48,d0
   10e14:	|      add.l sp,d0
   10e16:	|      move.l d0,-(sp)
   10e18:	|      jsr 14610 <getValueType>
   10e1e:	|      lea 12(sp),sp
   10e22:	|      tst.w d0
   10e24:	|  ,-- bne.s 10e2c <builtIn_addScreenRegion+0x68>
   10e26:	|  |   moveq #1,d0
   10e28:	+--|-- bra.w 10fce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e2c:	|  '-> moveq #24,d0
   10e2e:	|      add.l 56(sp),d0
   10e32:	|      move.l d0,-(sp)
   10e34:	|      jsr 14f94 <trimStack>
   10e3a:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e3c:	|      movea.l 56(sp),a0
   10e40:	|      move.l 24(a0),d0
   10e44:	|      move.l d0,-(sp)
   10e46:	|      pea 1 <_start+0x1>
   10e4a:	|      moveq #52,d0
   10e4c:	|      add.l sp,d0
   10e4e:	|      move.l d0,-(sp)
   10e50:	|      jsr 14610 <getValueType>
   10e56:	|      lea 12(sp),sp
   10e5a:	|      tst.w d0
   10e5c:	|  ,-- bne.s 10e64 <builtIn_addScreenRegion+0xa0>
   10e5e:	|  |   moveq #1,d0
   10e60:	+--|-- bra.w 10fce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e64:	|  '-> moveq #24,d0
   10e66:	|      add.l 56(sp),d0
   10e6a:	|      move.l d0,-(sp)
   10e6c:	|      jsr 14f94 <trimStack>
   10e72:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e74:	|      movea.l 56(sp),a0
   10e78:	|      move.l 24(a0),d0
   10e7c:	|      move.l d0,-(sp)
   10e7e:	|      pea 1 <_start+0x1>
   10e82:	|      lea 32(sp),a0
   10e86:	|      move.l a0,-(sp)
   10e88:	|      jsr 14610 <getValueType>
   10e8e:	|      lea 12(sp),sp
   10e92:	|      tst.w d0
   10e94:	|  ,-- bne.s 10e9c <builtIn_addScreenRegion+0xd8>
   10e96:	|  |   moveq #1,d0
   10e98:	+--|-- bra.w 10fce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10e9c:	|  '-> moveq #24,d0
   10e9e:	|      add.l 56(sp),d0
   10ea2:	|      move.l d0,-(sp)
   10ea4:	|      jsr 14f94 <trimStack>
   10eaa:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10eac:	|      movea.l 56(sp),a0
   10eb0:	|      move.l 24(a0),d0
   10eb4:	|      move.l d0,-(sp)
   10eb6:	|      pea 1 <_start+0x1>
   10eba:	|      lea 36(sp),a0
   10ebe:	|      move.l a0,-(sp)
   10ec0:	|      jsr 14610 <getValueType>
   10ec6:	|      lea 12(sp),sp
   10eca:	|      tst.w d0
   10ecc:	|  ,-- bne.s 10ed4 <builtIn_addScreenRegion+0x110>
   10ece:	|  |   moveq #1,d0
   10ed0:	+--|-- bra.w 10fce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10ed4:	|  '-> moveq #24,d0
   10ed6:	|      add.l 56(sp),d0
   10eda:	|      move.l d0,-(sp)
   10edc:	|      jsr 14f94 <trimStack>
   10ee2:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ee4:	|      movea.l 56(sp),a0
   10ee8:	|      move.l 24(a0),d0
   10eec:	|      move.l d0,-(sp)
   10eee:	|      pea 1 <_start+0x1>
   10ef2:	|      lea 40(sp),a0
   10ef6:	|      move.l a0,-(sp)
   10ef8:	|      jsr 14610 <getValueType>
   10efe:	|      lea 12(sp),sp
   10f02:	|      tst.w d0
   10f04:	|  ,-- bne.s 10f0c <builtIn_addScreenRegion+0x148>
   10f06:	|  |   moveq #1,d0
   10f08:	+--|-- bra.w 10fce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f0c:	|  '-> moveq #24,d0
   10f0e:	|      add.l 56(sp),d0
   10f12:	|      move.l d0,-(sp)
   10f14:	|      jsr 14f94 <trimStack>
   10f1a:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f1c:	|      movea.l 56(sp),a0
   10f20:	|      move.l 24(a0),d0
   10f24:	|      move.l d0,-(sp)
   10f26:	|      pea 1 <_start+0x1>
   10f2a:	|      lea 44(sp),a0
   10f2e:	|      move.l a0,-(sp)
   10f30:	|      jsr 14610 <getValueType>
   10f36:	|      lea 12(sp),sp
   10f3a:	|      tst.w d0
   10f3c:	|  ,-- bne.s 10f44 <builtIn_addScreenRegion+0x180>
   10f3e:	|  |   moveq #1,d0
   10f40:	+--|-- bra.w 10fce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f44:	|  '-> moveq #24,d0
   10f46:	|      add.l 56(sp),d0
   10f4a:	|      move.l d0,-(sp)
   10f4c:	|      jsr 14f94 <trimStack>
   10f52:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f54:	|      movea.l 56(sp),a0
   10f58:	|      move.l 24(a0),d0
   10f5c:	|      move.l d0,-(sp)
   10f5e:	|      pea 7 <_start+0x7>
   10f62:	|      lea 24(sp),a0
   10f66:	|      move.l a0,-(sp)
   10f68:	|      jsr 14610 <getValueType>
   10f6e:	|      lea 12(sp),sp
   10f72:	|      tst.w d0
   10f74:	|  ,-- bne.s 10f7a <builtIn_addScreenRegion+0x1b6>
   10f76:	|  |   moveq #1,d0
   10f78:	+--|-- bra.s 10fce <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10f7a:	|  '-> moveq #24,d0
   10f7c:	|      add.l 56(sp),d0
   10f80:	|      move.l d0,-(sp)
   10f82:	|      jsr 14f94 <trimStack>
   10f88:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10f8a:	|      move.l 16(sp),d5
   10f8e:	|      move.l 20(sp),d4
   10f92:	|      move.l 40(sp),d3
   10f96:	|      move.l 44(sp),d2
   10f9a:	|      movea.l 24(sp),a1
   10f9e:	|      movea.l 28(sp),a0
   10fa2:	|      move.l 32(sp),d1
   10fa6:	|      move.l 36(sp),d0
   10faa:	|      move.l d5,-(sp)
   10fac:	|      move.l d4,-(sp)
   10fae:	|      move.l d3,-(sp)
   10fb0:	|      move.l d2,-(sp)
   10fb2:	|      move.l a1,-(sp)
   10fb4:	|      move.l a0,-(sp)
   10fb6:	|      move.l d1,-(sp)
   10fb8:	|      move.l d0,-(sp)
   10fba:	|      jsr 1578c <addScreenRegion>
   10fc0:	|      lea 32(sp),sp
   10fc4:	|      tst.w d0
   10fc6:	|  ,-- beq.s 10fcc <builtIn_addScreenRegion+0x208>
   10fc8:	|  |   moveq #2,d0
   10fca:	+--|-- bra.s 10fce <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10fcc:	|  '-> moveq #1,d0

}
   10fce:	'----> movem.l (sp)+,d2-d5
   10fd2:	       lea 32(sp),sp
   10fd6:	       rts

00010fd8 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   10fd8:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10fda:	       movea.l 12(sp),a0
   10fde:	       move.l 24(a0),d0
   10fe2:	       move.l d0,-(sp)
   10fe4:	       pea 7 <_start+0x7>
   10fe8:	       move.l sp,d0
   10fea:	       addq.l #8,d0
   10fec:	       move.l d0,-(sp)
   10fee:	       jsr 14610 <getValueType>
   10ff4:	       lea 12(sp),sp
   10ff8:	       tst.w d0
   10ffa:	   ,-- bne.s 11000 <builtIn_removeScreenRegion+0x28>
   10ffc:	   |   moveq #1,d0
   10ffe:	,--|-- bra.s 1101e <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   11000:	|  '-> moveq #24,d0
   11002:	|      add.l 12(sp),d0
   11006:	|      move.l d0,-(sp)
   11008:	|      jsr 14f94 <trimStack>
   1100e:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11010:	|      move.l (sp),d0
   11012:	|      move.l d0,-(sp)
   11014:	|      jsr 15a7a <removeScreenRegion>
   1101a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1101c:	|      moveq #2,d0
}
   1101e:	'----> addq.l #4,sp
   11020:	       rts

00011022 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11022:	jsr 15bfe <showBoxes>
	return BR_CONTINUE;
   11028:	moveq #2,d0
}
   1102a:	rts

0001102c <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   1102c:	jsr 15900 <killAllRegions>
	return BR_CONTINUE;
   11032:	moveq #2,d0
}
   11034:	rts

00011036 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   11036:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   1103a:	       movea.l 24(sp),a0
   1103e:	       move.l 24(a0),d0
   11042:	       move.l d0,-(sp)
   11044:	       jsr 142bc <getCostumeFromVar>
   1104a:	       addq.l #4,sp
   1104c:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11050:	   ,-- bne.s 11058 <builtIn_addCharacter+0x22>
   11052:	   |   moveq #1,d0
   11054:	,--|-- bra.w 11134 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11058:	|  '-> moveq #24,d0
   1105a:	|      add.l 24(sp),d0
   1105e:	|      move.l d0,-(sp)
   11060:	|      jsr 14f94 <trimStack>
   11066:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11068:	|      movea.l 24(sp),a0
   1106c:	|      move.l 24(a0),d0
   11070:	|      move.l d0,-(sp)
   11072:	|      pea 1 <_start+0x1>
   11076:	|      lea 12(sp),a0
   1107a:	|      move.l a0,-(sp)
   1107c:	|      jsr 14610 <getValueType>
   11082:	|      lea 12(sp),sp
   11086:	|      tst.w d0
   11088:	|  ,-- bne.s 11090 <builtIn_addCharacter+0x5a>
   1108a:	|  |   moveq #1,d0
   1108c:	+--|-- bra.w 11134 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11090:	|  '-> moveq #24,d0
   11092:	|      add.l 24(sp),d0
   11096:	|      move.l d0,-(sp)
   11098:	|      jsr 14f94 <trimStack>
   1109e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110a0:	|      movea.l 24(sp),a0
   110a4:	|      move.l 24(a0),d0
   110a8:	|      move.l d0,-(sp)
   110aa:	|      pea 1 <_start+0x1>
   110ae:	|      moveq #16,d0
   110b0:	|      add.l sp,d0
   110b2:	|      move.l d0,-(sp)
   110b4:	|      jsr 14610 <getValueType>
   110ba:	|      lea 12(sp),sp
   110be:	|      tst.w d0
   110c0:	|  ,-- bne.s 110c6 <builtIn_addCharacter+0x90>
   110c2:	|  |   moveq #1,d0
   110c4:	+--|-- bra.s 11134 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   110c6:	|  '-> moveq #24,d0
   110c8:	|      add.l 24(sp),d0
   110cc:	|      move.l d0,-(sp)
   110ce:	|      jsr 14f94 <trimStack>
   110d4:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110d6:	|      movea.l 24(sp),a0
   110da:	|      move.l 24(a0),d0
   110de:	|      move.l d0,-(sp)
   110e0:	|      pea 7 <_start+0x7>
   110e4:	|      lea 8(sp),a0
   110e8:	|      move.l a0,-(sp)
   110ea:	|      jsr 14610 <getValueType>
   110f0:	|      lea 12(sp),sp
   110f4:	|      tst.w d0
   110f6:	|  ,-- bne.s 110fc <builtIn_addCharacter+0xc6>
   110f8:	|  |   moveq #1,d0
   110fa:	+--|-- bra.s 11134 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   110fc:	|  '-> moveq #24,d0
   110fe:	|      add.l 24(sp),d0
   11102:	|      move.l d0,-(sp)
   11104:	|      jsr 14f94 <trimStack>
   1110a:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   1110c:	|      movea.l (sp),a0
   1110e:	|      move.l 4(sp),d1
   11112:	|      move.l 8(sp),d0
   11116:	|      move.l 12(sp),-(sp)
   1111a:	|      move.l a0,-(sp)
   1111c:	|      move.l d1,-(sp)
   1111e:	|      move.l d0,-(sp)
   11120:	|      jsr 906e <addPerson>
   11126:	|      lea 16(sp),sp
   1112a:	|      tst.w d0
   1112c:	|  ,-- beq.s 11132 <builtIn_addCharacter+0xfc>
   1112e:	|  |   moveq #2,d0
   11130:	+--|-- bra.s 11134 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11132:	|  '-> moveq #1,d0
}
   11134:	'----> lea 16(sp),sp
   11138:	       rts

0001113a <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   1113a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1113c:	       movea.l 12(sp),a0
   11140:	       move.l 24(a0),d0
   11144:	       move.l d0,-(sp)
   11146:	       pea 7 <_start+0x7>
   1114a:	       move.l sp,d0
   1114c:	       addq.l #8,d0
   1114e:	       move.l d0,-(sp)
   11150:	       jsr 14610 <getValueType>
   11156:	       lea 12(sp),sp
   1115a:	       tst.w d0
   1115c:	   ,-- bne.s 11162 <builtIn_hideCharacter+0x28>
   1115e:	   |   moveq #1,d0
   11160:	,--|-- bra.s 11182 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11162:	|  '-> moveq #24,d0
   11164:	|      add.l 12(sp),d0
   11168:	|      move.l d0,-(sp)
   1116a:	|      jsr 14f94 <trimStack>
   11170:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11172:	|      move.l (sp),d0
   11174:	|      move.l d0,-(sp)
   11176:	|      clr.l -(sp)
   11178:	|      jsr baa8 <setShown>
   1117e:	|      addq.l #8,sp
	return BR_CONTINUE;
   11180:	|      moveq #2,d0
}
   11182:	'----> addq.l #4,sp
   11184:	       rts

00011186 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   11186:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11188:	       movea.l 12(sp),a0
   1118c:	       move.l 24(a0),d0
   11190:	       move.l d0,-(sp)
   11192:	       pea 7 <_start+0x7>
   11196:	       move.l sp,d0
   11198:	       addq.l #8,d0
   1119a:	       move.l d0,-(sp)
   1119c:	       jsr 14610 <getValueType>
   111a2:	       lea 12(sp),sp
   111a6:	       tst.w d0
   111a8:	   ,-- bne.s 111ae <builtIn_showCharacter+0x28>
   111aa:	   |   moveq #1,d0
   111ac:	,--|-- bra.s 111d0 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   111ae:	|  '-> moveq #24,d0
   111b0:	|      add.l 12(sp),d0
   111b4:	|      move.l d0,-(sp)
   111b6:	|      jsr 14f94 <trimStack>
   111bc:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   111be:	|      move.l (sp),d0
   111c0:	|      move.l d0,-(sp)
   111c2:	|      pea 1 <_start+0x1>
   111c6:	|      jsr baa8 <setShown>
   111cc:	|      addq.l #8,sp
	return BR_CONTINUE;
   111ce:	|      moveq #2,d0
}
   111d0:	'----> addq.l #4,sp
   111d2:	       rts

000111d4 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   111d4:	jsr 6a66 <killSpeechTimers>
	killMostPeople ();
   111da:	jsr a8e0 <killMostPeople>
	return BR_CONTINUE;
   111e0:	moveq #2,d0
}
   111e2:	rts

000111e4 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   111e4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111e6:	       movea.l 16(sp),a0
   111ea:	       move.l 24(a0),d0
   111ee:	       move.l d0,-(sp)
   111f0:	       pea 1 <_start+0x1>
   111f4:	       move.l sp,d0
   111f6:	       addq.l #8,d0
   111f8:	       move.l d0,-(sp)
   111fa:	       jsr 14610 <getValueType>
   11200:	       lea 12(sp),sp
   11204:	       tst.w d0
   11206:	   ,-- bne.s 1120c <builtIn_setCharacterDrawMode+0x28>
   11208:	   |   moveq #1,d0
   1120a:	,--|-- bra.s 11266 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1120c:	|  '-> moveq #24,d0
   1120e:	|      add.l 16(sp),d0
   11212:	|      move.l d0,-(sp)
   11214:	|      jsr 14f94 <trimStack>
   1121a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1121c:	|      movea.l 16(sp),a0
   11220:	|      move.l 24(a0),d0
   11224:	|      move.l d0,-(sp)
   11226:	|      pea 7 <_start+0x7>
   1122a:	|      moveq #12,d0
   1122c:	|      add.l sp,d0
   1122e:	|      move.l d0,-(sp)
   11230:	|      jsr 14610 <getValueType>
   11236:	|      lea 12(sp),sp
   1123a:	|      tst.w d0
   1123c:	|  ,-- bne.s 11242 <builtIn_setCharacterDrawMode+0x5e>
   1123e:	|  |   moveq #1,d0
   11240:	+--|-- bra.s 11266 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11242:	|  '-> moveq #24,d0
   11244:	|      add.l 16(sp),d0
   11248:	|      move.l d0,-(sp)
   1124a:	|      jsr 14f94 <trimStack>
   11250:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11252:	|      move.l 4(sp),d1
   11256:	|      move.l (sp),d0
   11258:	|      move.l d1,-(sp)
   1125a:	|      move.l d0,-(sp)
   1125c:	|      jsr b3e6 <setDrawMode>
   11262:	|      addq.l #8,sp
	return BR_CONTINUE;
   11264:	|      moveq #2,d0
}
   11266:	'----> addq.l #8,sp
   11268:	       rts

0001126a <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   1126a:	pea 19985 <talk.c.490538ff+0x69>
   11270:	jsr 170d4 <KPrintF>
   11276:	addq.l #4,sp
	return BR_CONTINUE;
   11278:	moveq #2,d0
}
   1127a:	rts

0001127c <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1127c:	pea 199b8 <talk.c.490538ff+0x9c>
   11282:	jsr 170d4 <KPrintF>
   11288:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   1128a:	moveq #2,d0
}
   1128c:	rts

0001128e <builtIn_setScale>:

builtIn(setScale)
{
   1128e:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11290:	       movea.l 16(sp),a0
   11294:	       move.l 24(a0),d0
   11298:	       move.l d0,-(sp)
   1129a:	       pea 1 <_start+0x1>
   1129e:	       move.l sp,d0
   112a0:	       addq.l #8,d0
   112a2:	       move.l d0,-(sp)
   112a4:	       jsr 14610 <getValueType>
   112aa:	       lea 12(sp),sp
   112ae:	       tst.w d0
   112b0:	   ,-- bne.s 112b6 <builtIn_setScale+0x28>
   112b2:	   |   moveq #1,d0
   112b4:	,--|-- bra.s 11318 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   112b6:	|  '-> moveq #24,d0
   112b8:	|      add.l 16(sp),d0
   112bc:	|      move.l d0,-(sp)
   112be:	|      jsr 14f94 <trimStack>
   112c4:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112c6:	|      movea.l 16(sp),a0
   112ca:	|      move.l 24(a0),d0
   112ce:	|      move.l d0,-(sp)
   112d0:	|      pea 1 <_start+0x1>
   112d4:	|      moveq #12,d0
   112d6:	|      add.l sp,d0
   112d8:	|      move.l d0,-(sp)
   112da:	|      jsr 14610 <getValueType>
   112e0:	|      lea 12(sp),sp
   112e4:	|      tst.w d0
   112e6:	|  ,-- bne.s 112ec <builtIn_setScale+0x5e>
   112e8:	|  |   moveq #1,d0
   112ea:	+--|-- bra.s 11318 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   112ec:	|  '-> moveq #24,d0
   112ee:	|      add.l 16(sp),d0
   112f2:	|      move.l d0,-(sp)
   112f4:	|      jsr 14f94 <trimStack>
   112fa:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   112fc:	|      move.l (sp),d0
   112fe:	|      move.l d0,d0
   11300:	|      movea.w d0,a1
   11302:	|      move.l 4(sp),d0
   11306:	|      move.l d0,d0
   11308:	|      movea.w d0,a0
   1130a:	|      move.l a1,-(sp)
   1130c:	|      move.l a0,-(sp)
   1130e:	|      jsr ba80 <setScale>
   11314:	|      addq.l #8,sp
	return BR_CONTINUE;
   11316:	|      moveq #2,d0
}
   11318:	'----> addq.l #8,sp
   1131a:	       rts

0001131c <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   1131c:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1131e:	       movea.l 12(sp),a0
   11322:	       move.l 24(a0),d0
   11326:	       move.l d0,-(sp)
   11328:	       pea 7 <_start+0x7>
   1132c:	       move.l sp,d0
   1132e:	       addq.l #8,d0
   11330:	       move.l d0,-(sp)
   11332:	       jsr 14610 <getValueType>
   11338:	       lea 12(sp),sp
   1133c:	       tst.w d0
   1133e:	   ,-- bne.s 11344 <builtIn_stopCharacter+0x28>
   11340:	   |   moveq #1,d0
   11342:	,--|-- bra.s 1137c <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11344:	|  '-> moveq #24,d0
   11346:	|      add.l 12(sp),d0
   1134a:	|      move.l d0,-(sp)
   1134c:	|      jsr 14f94 <trimStack>
   11352:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11354:	|      move.l (sp),d0
   11356:	|      move.l d0,-(sp)
   11358:	|      jsr bbb4 <stopPerson>
   1135e:	|      addq.l #4,sp
   11360:	|      movea.w d0,a0
   11362:	|      moveq #28,d0
   11364:	|      add.l 12(sp),d0
   11368:	|      move.l a0,-(sp)
   1136a:	|      pea 1 <_start+0x1>
   1136e:	|      move.l d0,-(sp)
   11370:	|      jsr 14f02 <setVariable>
   11376:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1137a:	|      moveq #2,d0
}
   1137c:	'----> addq.l #4,sp
   1137e:	       rts

00011380 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11380:	pea 199f2 <talk.c.490538ff+0xd6>
   11386:	jsr 170d4 <KPrintF>
   1138c:	addq.l #4,sp
	return BR_CONTINUE;
   1138e:	moveq #2,d0
}
   11390:	rts

00011392 <builtIn_animate>:

builtIn(animate)
{
   11392:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11394:	       movea.l 16(sp),a0
   11398:	       move.l 24(a0),d0
   1139c:	       move.l d0,-(sp)
   1139e:	       jsr 14ae8 <getAnimationFromVar>
   113a4:	       addq.l #4,sp
   113a6:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   113aa:	   ,-- bne.s 113b0 <builtIn_animate+0x1e>
   113ac:	   |   moveq #1,d0
   113ae:	,--|-- bra.s 1142e <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   113b0:	|  '-> moveq #24,d0
   113b2:	|      add.l 16(sp),d0
   113b6:	|      move.l d0,-(sp)
   113b8:	|      jsr 14f94 <trimStack>
   113be:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113c0:	|      movea.l 16(sp),a0
   113c4:	|      move.l 24(a0),d0
   113c8:	|      move.l d0,-(sp)
   113ca:	|      pea 7 <_start+0x7>
   113ce:	|      move.l sp,d0
   113d0:	|      addq.l #8,d0
   113d2:	|      move.l d0,-(sp)
   113d4:	|      jsr 14610 <getValueType>
   113da:	|      lea 12(sp),sp
   113de:	|      tst.w d0
   113e0:	|  ,-- bne.s 113e6 <builtIn_animate+0x54>
   113e2:	|  |   moveq #1,d0
   113e4:	+--|-- bra.s 1142e <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   113e6:	|  '-> moveq #24,d0
   113e8:	|      add.l 16(sp),d0
   113ec:	|      move.l d0,-(sp)
   113ee:	|      jsr 14f94 <trimStack>
   113f4:	|      addq.l #4,sp
	animatePerson (obj, pp);
   113f6:	|      move.l (sp),d0
   113f8:	|      move.l 4(sp),-(sp)
   113fc:	|      move.l d0,-(sp)
   113fe:	|      jsr 92e4 <animatePerson>
   11404:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11406:	|      move.l 4(sp),-(sp)
   1140a:	|      jsr bc08 <timeForAnim>
   11410:	|      addq.l #4,sp
   11412:	|      move.l d0,d1
   11414:	|      moveq #28,d0
   11416:	|      add.l 16(sp),d0
   1141a:	|      move.l d1,-(sp)
   1141c:	|      pea 1 <_start+0x1>
   11420:	|      move.l d0,-(sp)
   11422:	|      jsr 14f02 <setVariable>
   11428:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1142c:	|      moveq #2,d0
}
   1142e:	'----> addq.l #8,sp
   11430:	       rts

00011432 <builtIn_setCostume>:

builtIn(setCostume)
{
   11432:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11434:	       movea.l 16(sp),a0
   11438:	       move.l 24(a0),d0
   1143c:	       move.l d0,-(sp)
   1143e:	       jsr 142bc <getCostumeFromVar>
   11444:	       addq.l #4,sp
   11446:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1144a:	   ,-- bne.s 11450 <builtIn_setCostume+0x1e>
   1144c:	   |   moveq #1,d0
   1144e:	,--|-- bra.s 114a8 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11450:	|  '-> moveq #24,d0
   11452:	|      add.l 16(sp),d0
   11456:	|      move.l d0,-(sp)
   11458:	|      jsr 14f94 <trimStack>
   1145e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11460:	|      movea.l 16(sp),a0
   11464:	|      move.l 24(a0),d0
   11468:	|      move.l d0,-(sp)
   1146a:	|      pea 7 <_start+0x7>
   1146e:	|      move.l sp,d0
   11470:	|      addq.l #8,d0
   11472:	|      move.l d0,-(sp)
   11474:	|      jsr 14610 <getValueType>
   1147a:	|      lea 12(sp),sp
   1147e:	|      tst.w d0
   11480:	|  ,-- bne.s 11486 <builtIn_setCostume+0x54>
   11482:	|  |   moveq #1,d0
   11484:	+--|-- bra.s 114a8 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11486:	|  '-> moveq #24,d0
   11488:	|      add.l 16(sp),d0
   1148c:	|      move.l d0,-(sp)
   1148e:	|      jsr 14f94 <trimStack>
   11494:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11496:	|      move.l (sp),d0
   11498:	|      move.l 4(sp),-(sp)
   1149c:	|      move.l d0,-(sp)
   1149e:	|      jsr 932e <animatePersonUsingPersona>
   114a4:	|      addq.l #8,sp
	return BR_CONTINUE;
   114a6:	|      moveq #2,d0
}
   114a8:	'----> addq.l #8,sp
   114aa:	       rts

000114ac <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   114ac:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114ae:	       movea.l 16(sp),a0
   114b2:	       move.l 24(a0),d0
   114b6:	       move.l d0,-(sp)
   114b8:	       pea 1 <_start+0x1>
   114bc:	       move.l sp,d0
   114be:	       addq.l #8,d0
   114c0:	       move.l d0,-(sp)
   114c2:	       jsr 14610 <getValueType>
   114c8:	       lea 12(sp),sp
   114cc:	       tst.w d0
   114ce:	   ,-- bne.s 114d4 <builtIn_floatCharacter+0x28>
   114d0:	   |   moveq #1,d0
   114d2:	,--|-- bra.s 11548 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   114d4:	|  '-> moveq #24,d0
   114d6:	|      add.l 16(sp),d0
   114da:	|      move.l d0,-(sp)
   114dc:	|      jsr 14f94 <trimStack>
   114e2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114e4:	|      movea.l 16(sp),a0
   114e8:	|      move.l 24(a0),d0
   114ec:	|      move.l d0,-(sp)
   114ee:	|      pea 7 <_start+0x7>
   114f2:	|      moveq #12,d0
   114f4:	|      add.l sp,d0
   114f6:	|      move.l d0,-(sp)
   114f8:	|      jsr 14610 <getValueType>
   114fe:	|      lea 12(sp),sp
   11502:	|      tst.w d0
   11504:	|  ,-- bne.s 1150a <builtIn_floatCharacter+0x5e>
   11506:	|  |   moveq #1,d0
   11508:	+--|-- bra.s 11548 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1150a:	|  '-> moveq #24,d0
   1150c:	|      add.l 16(sp),d0
   11510:	|      move.l d0,-(sp)
   11512:	|      jsr 14f94 <trimStack>
   11518:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   1151a:	|      move.l 4(sp),d1
   1151e:	|      move.l (sp),d0
   11520:	|      move.l d1,-(sp)
   11522:	|      move.l d0,-(sp)
   11524:	|      jsr a4a2 <floatCharacter>
   1152a:	|      addq.l #8,sp
   1152c:	|      movea.w d0,a0
   1152e:	|      moveq #28,d0
   11530:	|      add.l 16(sp),d0
   11534:	|      move.l a0,-(sp)
   11536:	|      pea 1 <_start+0x1>
   1153a:	|      move.l d0,-(sp)
   1153c:	|      jsr 14f02 <setVariable>
   11542:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11546:	|      moveq #2,d0
}
   11548:	'----> addq.l #8,sp
   1154a:	       rts

0001154c <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   1154c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1154e:	       movea.l 16(sp),a0
   11552:	       move.l 24(a0),d0
   11556:	       move.l d0,-(sp)
   11558:	       pea 1 <_start+0x1>
   1155c:	       move.l sp,d0
   1155e:	       addq.l #8,d0
   11560:	       move.l d0,-(sp)
   11562:	       jsr 14610 <getValueType>
   11568:	       lea 12(sp),sp
   1156c:	       tst.w d0
   1156e:	   ,-- bne.s 11574 <builtIn_setCharacterWalkSpeed+0x28>
   11570:	   |   moveq #1,d0
   11572:	,--|-- bra.s 115e8 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11574:	|  '-> moveq #24,d0
   11576:	|      add.l 16(sp),d0
   1157a:	|      move.l d0,-(sp)
   1157c:	|      jsr 14f94 <trimStack>
   11582:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11584:	|      movea.l 16(sp),a0
   11588:	|      move.l 24(a0),d0
   1158c:	|      move.l d0,-(sp)
   1158e:	|      pea 7 <_start+0x7>
   11592:	|      moveq #12,d0
   11594:	|      add.l sp,d0
   11596:	|      move.l d0,-(sp)
   11598:	|      jsr 14610 <getValueType>
   1159e:	|      lea 12(sp),sp
   115a2:	|      tst.w d0
   115a4:	|  ,-- bne.s 115aa <builtIn_setCharacterWalkSpeed+0x5e>
   115a6:	|  |   moveq #1,d0
   115a8:	+--|-- bra.s 115e8 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   115aa:	|  '-> moveq #24,d0
   115ac:	|      add.l 16(sp),d0
   115b0:	|      move.l d0,-(sp)
   115b2:	|      jsr 14f94 <trimStack>
   115b8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   115ba:	|      move.l 4(sp),d1
   115be:	|      move.l (sp),d0
   115c0:	|      move.l d1,-(sp)
   115c2:	|      move.l d0,-(sp)
   115c4:	|      jsr ba1c <setCharacterWalkSpeed>
   115ca:	|      addq.l #8,sp
   115cc:	|      movea.w d0,a0
   115ce:	|      moveq #28,d0
   115d0:	|      add.l 16(sp),d0
   115d4:	|      move.l a0,-(sp)
   115d6:	|      pea 1 <_start+0x1>
   115da:	|      move.l d0,-(sp)
   115dc:	|      jsr 14f02 <setVariable>
   115e2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   115e6:	|      moveq #2,d0
}
   115e8:	'----> addq.l #8,sp
   115ea:	       rts

000115ec <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   115ec:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115ee:	       movea.l 16(sp),a0
   115f2:	       move.l 24(a0),d0
   115f6:	       move.l d0,-(sp)
   115f8:	       pea 1 <_start+0x1>
   115fc:	       move.l sp,d0
   115fe:	       addq.l #8,d0
   11600:	       move.l d0,-(sp)
   11602:	       jsr 14610 <getValueType>
   11608:	       lea 12(sp),sp
   1160c:	       tst.w d0
   1160e:	   ,-- bne.s 11614 <builtIn_turnCharacter+0x28>
   11610:	   |   moveq #1,d0
   11612:	,--|-- bra.s 11688 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11614:	|  '-> moveq #24,d0
   11616:	|      add.l 16(sp),d0
   1161a:	|      move.l d0,-(sp)
   1161c:	|      jsr 14f94 <trimStack>
   11622:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11624:	|      movea.l 16(sp),a0
   11628:	|      move.l 24(a0),d0
   1162c:	|      move.l d0,-(sp)
   1162e:	|      pea 7 <_start+0x7>
   11632:	|      moveq #12,d0
   11634:	|      add.l sp,d0
   11636:	|      move.l d0,-(sp)
   11638:	|      jsr 14610 <getValueType>
   1163e:	|      lea 12(sp),sp
   11642:	|      tst.w d0
   11644:	|  ,-- bne.s 1164a <builtIn_turnCharacter+0x5e>
   11646:	|  |   moveq #1,d0
   11648:	+--|-- bra.s 11688 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1164a:	|  '-> moveq #24,d0
   1164c:	|      add.l 16(sp),d0
   11650:	|      move.l d0,-(sp)
   11652:	|      jsr 14f94 <trimStack>
   11658:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   1165a:	|      move.l (sp),d1
   1165c:	|      move.l 4(sp),d0
   11660:	|      move.l d1,-(sp)
   11662:	|      move.l d0,-(sp)
   11664:	|      jsr bcc0 <turnPersonToFace>
   1166a:	|      addq.l #8,sp
   1166c:	|      movea.w d0,a0
   1166e:	|      moveq #28,d0
   11670:	|      add.l 16(sp),d0
   11674:	|      move.l a0,-(sp)
   11676:	|      pea 1 <_start+0x1>
   1167a:	|      move.l d0,-(sp)
   1167c:	|      jsr 14f02 <setVariable>
   11682:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11686:	|      moveq #2,d0
}
   11688:	'----> addq.l #8,sp
   1168a:	       rts

0001168c <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   1168c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1168e:	       movea.l 16(sp),a0
   11692:	       move.l 24(a0),d0
   11696:	       move.l d0,-(sp)
   11698:	       pea 1 <_start+0x1>
   1169c:	       move.l sp,d0
   1169e:	       addq.l #8,d0
   116a0:	       move.l d0,-(sp)
   116a2:	       jsr 14610 <getValueType>
   116a8:	       lea 12(sp),sp
   116ac:	       tst.w d0
   116ae:	   ,-- bne.s 116b4 <builtIn_setCharacterExtra+0x28>
   116b0:	   |   moveq #1,d0
   116b2:	,--|-- bra.s 11728 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   116b4:	|  '-> moveq #24,d0
   116b6:	|      add.l 16(sp),d0
   116ba:	|      move.l d0,-(sp)
   116bc:	|      jsr 14f94 <trimStack>
   116c2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116c4:	|      movea.l 16(sp),a0
   116c8:	|      move.l 24(a0),d0
   116cc:	|      move.l d0,-(sp)
   116ce:	|      pea 7 <_start+0x7>
   116d2:	|      moveq #12,d0
   116d4:	|      add.l sp,d0
   116d6:	|      move.l d0,-(sp)
   116d8:	|      jsr 14610 <getValueType>
   116de:	|      lea 12(sp),sp
   116e2:	|      tst.w d0
   116e4:	|  ,-- bne.s 116ea <builtIn_setCharacterExtra+0x5e>
   116e6:	|  |   moveq #1,d0
   116e8:	+--|-- bra.s 11728 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   116ea:	|  '-> moveq #24,d0
   116ec:	|      add.l 16(sp),d0
   116f0:	|      move.l d0,-(sp)
   116f2:	|      jsr 14f94 <trimStack>
   116f8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   116fa:	|      move.l (sp),d1
   116fc:	|      move.l 4(sp),d0
   11700:	|      move.l d1,-(sp)
   11702:	|      move.l d0,-(sp)
   11704:	|      jsr ba4a <setPersonExtra>
   1170a:	|      addq.l #8,sp
   1170c:	|      movea.w d0,a0
   1170e:	|      moveq #28,d0
   11710:	|      add.l 16(sp),d0
   11714:	|      move.l a0,-(sp)
   11716:	|      pea 1 <_start+0x1>
   1171a:	|      move.l d0,-(sp)
   1171c:	|      jsr 14f02 <setVariable>
   11722:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11726:	|      moveq #2,d0
}
   11728:	'----> addq.l #8,sp
   1172a:	       rts

0001172c <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1172c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1172e:	       movea.l 12(sp),a0
   11732:	       move.l 24(a0),d0
   11736:	       move.l d0,-(sp)
   11738:	       pea 7 <_start+0x7>
   1173c:	       move.l sp,d0
   1173e:	       addq.l #8,d0
   11740:	       move.l d0,-(sp)
   11742:	       jsr 14610 <getValueType>
   11748:	       lea 12(sp),sp
   1174c:	       tst.w d0
   1174e:	   ,-- bne.s 11754 <builtIn_removeCharacter+0x28>
   11750:	   |   moveq #1,d0
   11752:	,--|-- bra.s 11772 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11754:	|  '-> moveq #24,d0
   11756:	|      add.l 12(sp),d0
   1175a:	|      move.l d0,-(sp)
   1175c:	|      jsr 14f94 <trimStack>
   11762:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11764:	|      move.l (sp),d0
   11766:	|      move.l d0,-(sp)
   11768:	|      jsr ac4a <removeOneCharacter>
   1176e:	|      addq.l #4,sp
	return BR_CONTINUE;
   11770:	|      moveq #2,d0
}
   11772:	'----> addq.l #4,sp
   11774:	       rts

00011776 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11776:	                lea -28(sp),sp
   1177a:	                move.l d2,-(sp)
   1177c:	                move.l 44(sp),d1
   11780:	                move.l 48(sp),d0
   11784:	                move.w d1,d1
   11786:	                move.w d1,6(sp)
   1178a:	                move.w d0,d0
   1178c:	                move.w d0,4(sp)
	switch (numParams) {
   11790:	                moveq #2,d0
   11792:	                cmp.l 36(sp),d0
   11796:	      ,-------- beq.w 118d8 <moveChr+0x162>
   1179a:	      |         moveq #3,d0
   1179c:	      |         cmp.l 36(sp),d0
   117a0:	,-----|-------- bne.w 11a0c <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117a4:	|     |         movea.l 40(sp),a0
   117a8:	|     |         move.l 24(a0),d0
   117ac:	|     |         move.l d0,-(sp)
   117ae:	|     |         pea 1 <_start+0x1>
   117b2:	|     |         lea 20(sp),a0
   117b6:	|     |         move.l a0,-(sp)
   117b8:	|     |         jsr 14610 <getValueType>
   117be:	|     |         lea 12(sp),sp
   117c2:	|     |         tst.w d0
   117c4:	|     |     ,-- bne.s 117cc <moveChr+0x56>
   117c6:	|     |     |   moveq #1,d0
   117c8:	|  ,--|-----|-- bra.w 11a1c <moveChr+0x2a6>
			trimStack (&fun -> stack);
   117cc:	|  |  |     '-> moveq #24,d0
   117ce:	|  |  |         add.l 40(sp),d0
   117d2:	|  |  |         move.l d0,-(sp)
   117d4:	|  |  |         jsr 14f94 <trimStack>
   117da:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117dc:	|  |  |         movea.l 40(sp),a0
   117e0:	|  |  |         move.l 24(a0),d0
   117e4:	|  |  |         move.l d0,-(sp)
   117e6:	|  |  |         pea 1 <_start+0x1>
   117ea:	|  |  |         lea 24(sp),a0
   117ee:	|  |  |         move.l a0,-(sp)
   117f0:	|  |  |         jsr 14610 <getValueType>
   117f6:	|  |  |         lea 12(sp),sp
   117fa:	|  |  |         tst.w d0
   117fc:	|  |  |     ,-- bne.s 11804 <moveChr+0x8e>
   117fe:	|  |  |     |   moveq #1,d0
   11800:	|  +--|-----|-- bra.w 11a1c <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11804:	|  |  |     '-> moveq #24,d0
   11806:	|  |  |         add.l 40(sp),d0
   1180a:	|  |  |         move.l d0,-(sp)
   1180c:	|  |  |         jsr 14f94 <trimStack>
   11812:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11814:	|  |  |         movea.l 40(sp),a0
   11818:	|  |  |         move.l 24(a0),d0
   1181c:	|  |  |         move.l d0,-(sp)
   1181e:	|  |  |         pea 7 <_start+0x7>
   11822:	|  |  |         lea 16(sp),a0
   11826:	|  |  |         move.l a0,-(sp)
   11828:	|  |  |         jsr 14610 <getValueType>
   1182e:	|  |  |         lea 12(sp),sp
   11832:	|  |  |         tst.w d0
   11834:	|  |  |     ,-- bne.s 1183c <moveChr+0xc6>
   11836:	|  |  |     |   moveq #1,d0
   11838:	|  +--|-----|-- bra.w 11a1c <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1183c:	|  |  |     '-> moveq #24,d0
   1183e:	|  |  |         add.l 40(sp),d0
   11842:	|  |  |         move.l d0,-(sp)
   11844:	|  |  |         jsr 14f94 <trimStack>
   1184a:	|  |  |         addq.l #4,sp

			if (force) {
   1184c:	|  |  |         tst.w 6(sp)
   11850:	|  |  |     ,-- beq.s 11880 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11852:	|  |  |     |   movea.l 8(sp),a0
   11856:	|  |  |     |   move.l 12(sp),d1
   1185a:	|  |  |     |   move.l 16(sp),d0
   1185e:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4e16>
   11862:	|  |  |     |   move.l 44(sp),-(sp)
   11866:	|  |  |     |   move.l a0,-(sp)
   11868:	|  |  |     |   move.l d1,-(sp)
   1186a:	|  |  |     |   move.l d0,-(sp)
   1186c:	|  |  |     |   jsr a4c6 <forceWalkingPerson>
   11872:	|  |  |     |   lea 20(sp),sp
   11876:	|  |  |     |   tst.w d0
   11878:	|  |  |  ,--|-- beq.s 118d2 <moveChr+0x15c>
   1187a:	|  |  |  |  |   moveq #3,d0
   1187c:	|  +--|--|--|-- bra.w 11a1c <moveChr+0x2a6>
			} else if (immediate) {
   11880:	|  |  |  |  '-> tst.w 4(sp)
   11884:	|  |  |  |  ,-- beq.s 118a4 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11886:	|  |  |  |  |   movea.l 8(sp),a0
   1188a:	|  |  |  |  |   move.l 12(sp),d1
   1188e:	|  |  |  |  |   move.l 16(sp),d0
   11892:	|  |  |  |  |   move.l a0,-(sp)
   11894:	|  |  |  |  |   move.l d1,-(sp)
   11896:	|  |  |  |  |   move.l d0,-(sp)
   11898:	|  |  |  |  |   jsr a7ce <jumpPerson>
   1189e:	|  |  |  |  |   lea 12(sp),sp
   118a2:	|  |  |  +--|-- bra.s 118d2 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   118a4:	|  |  |  |  '-> movea.l 8(sp),a0
   118a8:	|  |  |  |      move.l 12(sp),d1
   118ac:	|  |  |  |      move.l 16(sp),d0
   118b0:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb4e16>
   118b4:	|  |  |  |      move.l 44(sp),-(sp)
   118b8:	|  |  |  |      move.l a0,-(sp)
   118ba:	|  |  |  |      move.l d1,-(sp)
   118bc:	|  |  |  |      move.l d0,-(sp)
   118be:	|  |  |  |      jsr a99e <makeWalkingPerson>
   118c4:	|  |  |  |      lea 20(sp),sp
   118c8:	|  |  |  |      tst.w d0
   118ca:	|  |  |  +----- beq.s 118d2 <moveChr+0x15c>
   118cc:	|  |  |  |      moveq #3,d0
   118ce:	|  +--|--|----- bra.w 11a1c <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   118d2:	|  |  |  '----> moveq #2,d0
   118d4:	|  +--|-------- bra.w 11a1c <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118d8:	|  |  '-------> movea.l 40(sp),a0
   118dc:	|  |            move.l 24(a0),d0
   118e0:	|  |            move.l d0,-(sp)
   118e2:	|  |            pea 7 <_start+0x7>
   118e6:	|  |            moveq #32,d0
   118e8:	|  |            add.l sp,d0
   118ea:	|  |            move.l d0,-(sp)
   118ec:	|  |            jsr 14610 <getValueType>
   118f2:	|  |            lea 12(sp),sp
   118f6:	|  |            tst.w d0
   118f8:	|  |        ,-- bne.s 11900 <moveChr+0x18a>
   118fa:	|  |        |   moveq #1,d0
   118fc:	|  +--------|-- bra.w 11a1c <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11900:	|  |        '-> moveq #24,d0
   11902:	|  |            add.l 40(sp),d0
   11906:	|  |            move.l d0,-(sp)
   11908:	|  |            jsr 14f94 <trimStack>
   1190e:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11910:	|  |            movea.l 40(sp),a0
   11914:	|  |            move.l 24(a0),d0
   11918:	|  |            move.l d0,-(sp)
   1191a:	|  |            pea 7 <_start+0x7>
   1191e:	|  |            lea 28(sp),a0
   11922:	|  |            move.l a0,-(sp)
   11924:	|  |            jsr 14610 <getValueType>
   1192a:	|  |            lea 12(sp),sp
   1192e:	|  |            tst.w d0
   11930:	|  |        ,-- bne.s 11938 <moveChr+0x1c2>
   11932:	|  |        |   moveq #1,d0
   11934:	|  +--------|-- bra.w 11a1c <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11938:	|  |        '-> moveq #24,d0
   1193a:	|  |            add.l 40(sp),d0
   1193e:	|  |            move.l d0,-(sp)
   11940:	|  |            jsr 14f94 <trimStack>
   11946:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11948:	|  |            move.l 24(sp),d0
   1194c:	|  |            move.l d0,-(sp)
   1194e:	|  |            jsr 158d2 <getRegionForObject>
   11954:	|  |            addq.l #4,sp
   11956:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   1195a:	|  |        ,-- bne.s 11962 <moveChr+0x1ec>
   1195c:	|  |        |   moveq #2,d0
   1195e:	|  +--------|-- bra.w 11a1c <moveChr+0x2a6>

			if (force)
   11962:	|  |        '-> tst.w 6(sp)
   11966:	|  |        ,-- beq.s 119a2 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11968:	|  |        |   movea.l 28(sp),a0
   1196c:	|  |        |   move.l 24(a0),d2
   11970:	|  |        |   movea.l 20(sp),a1
   11974:	|  |        |   movea.l 28(sp),a0
   11978:	|  |        |   move.l 20(a0),d1
   1197c:	|  |        |   movea.l 28(sp),a0
   11980:	|  |        |   move.l 16(a0),d0
   11984:	|  |        |   move.l d2,-(sp)
   11986:	|  |        |   move.l 44(sp),-(sp)
   1198a:	|  |        |   move.l a1,-(sp)
   1198c:	|  |        |   move.l d1,-(sp)
   1198e:	|  |        |   move.l d0,-(sp)
   11990:	|  |        |   jsr a4c6 <forceWalkingPerson>
   11996:	|  |        |   lea 20(sp),sp
   1199a:	|  |        |   tst.w d0
   1199c:	|  |     ,--|-- beq.s 11a08 <moveChr+0x292>
   1199e:	|  |     |  |   moveq #3,d0
   119a0:	|  +-----|--|-- bra.s 11a1c <moveChr+0x2a6>
			}
			else if (immediate)
   119a2:	|  |     |  '-> tst.w 4(sp)
   119a6:	|  |     |  ,-- beq.s 119ce <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   119a8:	|  |     |  |   movea.l 20(sp),a1
   119ac:	|  |     |  |   movea.l 28(sp),a0
   119b0:	|  |     |  |   move.l 20(a0),d1
   119b4:	|  |     |  |   movea.l 28(sp),a0
   119b8:	|  |     |  |   move.l 16(a0),d0
   119bc:	|  |     |  |   move.l a1,-(sp)
   119be:	|  |     |  |   move.l d1,-(sp)
   119c0:	|  |     |  |   move.l d0,-(sp)
   119c2:	|  |     |  |   jsr a7ce <jumpPerson>
   119c8:	|  |     |  |   lea 12(sp),sp
   119cc:	|  |     +--|-- bra.s 11a08 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   119ce:	|  |     |  '-> movea.l 28(sp),a0
   119d2:	|  |     |      move.l 24(a0),d2
   119d6:	|  |     |      movea.l 20(sp),a1
   119da:	|  |     |      movea.l 28(sp),a0
   119de:	|  |     |      move.l 20(a0),d1
   119e2:	|  |     |      movea.l 28(sp),a0
   119e6:	|  |     |      move.l 16(a0),d0
   119ea:	|  |     |      move.l d2,-(sp)
   119ec:	|  |     |      move.l 44(sp),-(sp)
   119f0:	|  |     |      move.l a1,-(sp)
   119f2:	|  |     |      move.l d1,-(sp)
   119f4:	|  |     |      move.l d0,-(sp)
   119f6:	|  |     |      jsr a99e <makeWalkingPerson>
   119fc:	|  |     |      lea 20(sp),sp
   11a00:	|  |     |      tst.w d0
   11a02:	|  |     +----- beq.s 11a08 <moveChr+0x292>
   11a04:	|  |     |      moveq #3,d0
   11a06:	|  +-----|----- bra.s 11a1c <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11a08:	|  |     '----> moveq #2,d0
   11a0a:	|  +----------- bra.s 11a1c <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11a0c:	'--|----------> pea 19a10 <talk.c.490538ff+0xf4>
   11a12:	   |            jsr 170d4 <KPrintF>
   11a18:	   |            addq.l #4,sp
			return BR_ERROR;
   11a1a:	   |            moveq #1,d0
	}
}
   11a1c:	   '----------> move.l (sp)+,d2
   11a1e:	                lea 28(sp),sp
   11a22:	                rts

00011a24 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11a24:	clr.l -(sp)
   11a26:	clr.l -(sp)
   11a28:	move.l 16(sp),-(sp)
   11a2c:	move.l 16(sp),-(sp)
   11a30:	jsr 11776 <moveChr>
   11a36:	lea 16(sp),sp
}
   11a3a:	rts

00011a3c <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11a3c:	clr.l -(sp)
   11a3e:	pea 1 <_start+0x1>
   11a42:	move.l 16(sp),-(sp)
   11a46:	move.l 16(sp),-(sp)
   11a4a:	jsr 11776 <moveChr>
   11a50:	lea 16(sp),sp
}
   11a54:	rts

00011a56 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11a56:	pea 1 <_start+0x1>
   11a5a:	clr.l -(sp)
   11a5c:	move.l 16(sp),-(sp)
   11a60:	move.l 16(sp),-(sp)
   11a64:	jsr 11776 <moveChr>
   11a6a:	lea 16(sp),sp
}
   11a6e:	rts

00011a70 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11a70:	jsr 8166 <clearStatusBar>
	return BR_CONTINUE;
   11a76:	moveq #2,d0
}
   11a78:	rts

00011a7a <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11a7a:	jsr 820e <killLastStatus>
	return BR_CONTINUE;
   11a80:	moveq #2,d0
}
   11a82:	rts

00011a84 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11a84:	jsr 80fc <addStatusBar>
	return BR_CONTINUE;
   11a8a:	moveq #2,d0
}
   11a8c:	rts

00011a8e <builtIn_statusText>:

builtIn(statusText)
{
   11a8e:	       subq.l #8,sp
   11a90:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11a92:	       movea.l 20(sp),a0
   11a96:	       move.l 24(a0),d0
   11a9a:	       move.l d0,-(sp)
   11a9c:	       jsr 14be6 <getTextFromAnyVar>
   11aa2:	       addq.l #4,sp
   11aa4:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11aa8:	   ,-- bne.s 11aae <builtIn_statusText+0x20>
   11aaa:	   |   moveq #1,d0
   11aac:	,--|-- bra.s 11ae2 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11aae:	|  '-> moveq #24,d0
   11ab0:	|      add.l 20(sp),d0
   11ab4:	|      move.l d0,-(sp)
   11ab6:	|      jsr 14f94 <trimStack>
   11abc:	|      addq.l #4,sp
	setStatusBar(newText);
   11abe:	|      move.l 8(sp),-(sp)
   11ac2:	|      jsr 848e <setStatusBar>
   11ac8:	|      addq.l #4,sp
	FreeVec(newText);
   11aca:	|      move.l 8(sp),4(sp)
   11ad0:	|      move.l 1c7d8 <SysBase>,d0
   11ad6:	|      movea.l d0,a6
   11ad8:	|      movea.l 4(sp),a1
   11adc:	|      jsr -690(a6)
	return BR_CONTINUE;
   11ae0:	|      moveq #2,d0
}
   11ae2:	'----> movea.l (sp)+,a6
   11ae4:	       addq.l #8,sp
   11ae6:	       rts

00011ae8 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11ae8:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11aea:	       movea.l 12(sp),a0
   11aee:	       move.l 24(a0),d0
   11af2:	       move.l d0,-(sp)
   11af4:	       pea 1 <_start+0x1>
   11af8:	       move.l sp,d0
   11afa:	       addq.l #8,d0
   11afc:	       move.l d0,-(sp)
   11afe:	       jsr 14610 <getValueType>
   11b04:	       lea 12(sp),sp
   11b08:	       tst.w d0
   11b0a:	   ,-- bne.s 11b10 <builtIn_lightStatus+0x28>
   11b0c:	   |   moveq #1,d0
   11b0e:	,--|-- bra.s 11b2e <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11b10:	|  '-> moveq #24,d0
   11b12:	|      add.l 12(sp),d0
   11b16:	|      move.l d0,-(sp)
   11b18:	|      jsr 14f94 <trimStack>
   11b1e:	|      addq.l #4,sp
	setLitStatus (val);
   11b20:	|      move.l (sp),d0
   11b22:	|      move.l d0,-(sp)
   11b24:	|      jsr 847e <setLitStatus>
   11b2a:	|      addq.l #4,sp
	return BR_CONTINUE;
   11b2c:	|      moveq #2,d0
}
   11b2e:	'----> addq.l #4,sp
   11b30:	       rts

00011b32 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11b32:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b34:	       movea.l 16(sp),a0
   11b38:	       move.l 24(a0),d0
   11b3c:	       move.l d0,-(sp)
   11b3e:	       pea 1 <_start+0x1>
   11b42:	       move.l sp,d0
   11b44:	       addq.l #8,d0
   11b46:	       move.l d0,-(sp)
   11b48:	       jsr 14610 <getValueType>
   11b4e:	       lea 12(sp),sp
   11b52:	       tst.w d0
   11b54:	   ,-- bne.s 11b5a <builtIn_positionStatus+0x28>
   11b56:	   |   moveq #1,d0
   11b58:	,--|-- bra.s 11bb4 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11b5a:	|  '-> moveq #24,d0
   11b5c:	|      add.l 16(sp),d0
   11b60:	|      move.l d0,-(sp)
   11b62:	|      jsr 14f94 <trimStack>
   11b68:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b6a:	|      movea.l 16(sp),a0
   11b6e:	|      move.l 24(a0),d0
   11b72:	|      move.l d0,-(sp)
   11b74:	|      pea 1 <_start+0x1>
   11b78:	|      moveq #12,d0
   11b7a:	|      add.l sp,d0
   11b7c:	|      move.l d0,-(sp)
   11b7e:	|      jsr 14610 <getValueType>
   11b84:	|      lea 12(sp),sp
   11b88:	|      tst.w d0
   11b8a:	|  ,-- bne.s 11b90 <builtIn_positionStatus+0x5e>
   11b8c:	|  |   moveq #1,d0
   11b8e:	+--|-- bra.s 11bb4 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11b90:	|  '-> moveq #24,d0
   11b92:	|      add.l 16(sp),d0
   11b96:	|      move.l d0,-(sp)
   11b98:	|      jsr 14f94 <trimStack>
   11b9e:	|      addq.l #4,sp
	positionStatus (x, y);
   11ba0:	|      move.l (sp),d1
   11ba2:	|      move.l 4(sp),d0
   11ba6:	|      move.l d1,-(sp)
   11ba8:	|      move.l d0,-(sp)
   11baa:	|      jsr 8270 <positionStatus>
   11bb0:	|      addq.l #8,sp
	return BR_CONTINUE;
   11bb2:	|      moveq #2,d0
}
   11bb4:	'----> addq.l #8,sp
   11bb6:	       rts

00011bb8 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11bb8:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11bba:	       movea.l 12(sp),a0
   11bbe:	       move.l 24(a0),d0
   11bc2:	       move.l d0,-(sp)
   11bc4:	       pea 1 <_start+0x1>
   11bc8:	       move.l sp,d0
   11bca:	       addq.l #8,d0
   11bcc:	       move.l d0,-(sp)
   11bce:	       jsr 14610 <getValueType>
   11bd4:	       lea 12(sp),sp
   11bd8:	       tst.w d0
   11bda:	   ,-- bne.s 11be0 <builtIn_alignStatus+0x28>
   11bdc:	   |   moveq #1,d0
   11bde:	,--|-- bra.s 11c00 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11be0:	|  '-> moveq #24,d0
   11be2:	|      add.l 12(sp),d0
   11be6:	|      move.l d0,-(sp)
   11be8:	|      jsr 14f94 <trimStack>
   11bee:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11bf0:	|      move.l (sp),d0
   11bf2:	|      movea.l 1c156 <nowStatus>,a0
   11bf8:	|      move.l d0,d0
   11bfa:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11bfe:	|      moveq #2,d0
}
   11c00:	'----> addq.l #4,sp
   11c02:	       rts

00011c04 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11c04:	             tst.l 4(sp)
   11c08:	      ,----- beq.s 11c14 <getFuncNumForCallback+0x10>
   11c0a:	      |      moveq #1,d0
   11c0c:	      |      cmp.l 4(sp),d0
   11c10:	      |  ,-- beq.s 11c1a <getFuncNumForCallback+0x16>
   11c12:	   ,--|--|-- bra.s 11c50 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11c14:	   |  '--|-> clr.l 12(sp)
			break;
   11c18:	,--|-----|-- bra.s 11c62 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11c1a:	|  |     '-> movea.l 8(sp),a0
   11c1e:	|  |         move.l 24(a0),d0
   11c22:	|  |         move.l d0,-(sp)
   11c24:	|  |         pea 2 <_start+0x2>
   11c28:	|  |         move.l 20(sp),-(sp)
   11c2c:	|  |         jsr 14610 <getValueType>
   11c32:	|  |         lea 12(sp),sp
   11c36:	|  |         tst.w d0
   11c38:	|  |     ,-- bne.s 11c3e <getFuncNumForCallback+0x3a>
   11c3a:	|  |     |   clr.w d0
   11c3c:	|  |  ,--|-- bra.s 11c64 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11c3e:	|  |  |  '-> moveq #24,d0
   11c40:	|  |  |      add.l 8(sp),d0
   11c44:	|  |  |      move.l d0,-(sp)
   11c46:	|  |  |      jsr 14f94 <trimStack>
   11c4c:	|  |  |      addq.l #4,sp
			break;
   11c4e:	+--|--|----- bra.s 11c62 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11c50:	|  '--|----> pea 19a46 <talk.c.490538ff+0x12a>
   11c56:	|     |      jsr 170d4 <KPrintF>
   11c5c:	|     |      addq.l #4,sp
			return FALSE;
   11c5e:	|     |      clr.w d0
   11c60:	|     +----- bra.s 11c64 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11c62:	'-----|----> moveq #1,d0
}
   11c64:	      '----> rts

00011c66 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11c66:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c68:	       move.l sp,d0
   11c6a:	       move.l d0,-(sp)
   11c6c:	       move.l 16(sp),-(sp)
   11c70:	       move.l 16(sp),-(sp)
   11c74:	       jsr 11c04 <getFuncNumForCallback>
   11c7a:	       lea 12(sp),sp
   11c7e:	       tst.w d0
   11c80:	,----- beq.s 11c90 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11c82:	|      movea.l 1c148 <currentEvents>,a0
   11c88:	|      move.l (sp),d0
   11c8a:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11c8c:	|      moveq #2,d0
   11c8e:	|  ,-- bra.s 11c92 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11c90:	'--|-> moveq #1,d0
}
   11c92:	   '-> addq.l #4,sp
   11c94:	       rts

00011c96 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11c96:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11c98:	       move.l sp,d0
   11c9a:	       move.l d0,-(sp)
   11c9c:	       move.l 16(sp),-(sp)
   11ca0:	       move.l 16(sp),-(sp)
   11ca4:	       jsr 11c04 <getFuncNumForCallback>
   11caa:	       lea 12(sp),sp
   11cae:	       tst.w d0
   11cb0:	,----- beq.s 11cc2 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11cb2:	|      movea.l 1c148 <currentEvents>,a0
   11cb8:	|      move.l (sp),d0
   11cba:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11cbe:	|      moveq #2,d0
   11cc0:	|  ,-- bra.s 11cc4 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11cc2:	'--|-> moveq #1,d0
}
   11cc4:	   '-> addq.l #4,sp
   11cc6:	       rts

00011cc8 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11cc8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11cca:	       move.l sp,d0
   11ccc:	       move.l d0,-(sp)
   11cce:	       move.l 16(sp),-(sp)
   11cd2:	       move.l 16(sp),-(sp)
   11cd6:	       jsr 11c04 <getFuncNumForCallback>
   11cdc:	       lea 12(sp),sp
   11ce0:	       tst.w d0
   11ce2:	,----- beq.s 11cf4 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11ce4:	|      movea.l 1c148 <currentEvents>,a0
   11cea:	|      move.l (sp),d0
   11cec:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11cf0:	|      moveq #2,d0
   11cf2:	|  ,-- bra.s 11cf6 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11cf4:	'--|-> moveq #1,d0
}
   11cf6:	   '-> addq.l #4,sp
   11cf8:	       rts

00011cfa <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11cfa:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11cfc:	       move.l sp,d0
   11cfe:	       move.l d0,-(sp)
   11d00:	       move.l 16(sp),-(sp)
   11d04:	       move.l 16(sp),-(sp)
   11d08:	       jsr 11c04 <getFuncNumForCallback>
   11d0e:	       lea 12(sp),sp
   11d12:	       tst.w d0
   11d14:	,----- beq.s 11d26 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11d16:	|      movea.l 1c148 <currentEvents>,a0
   11d1c:	|      move.l (sp),d0
   11d1e:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11d22:	|      moveq #2,d0
   11d24:	|  ,-- bra.s 11d28 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11d26:	'--|-> moveq #1,d0
}
   11d28:	   '-> addq.l #4,sp
   11d2a:	       rts

00011d2c <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11d2c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d2e:	       move.l sp,d0
   11d30:	       move.l d0,-(sp)
   11d32:	       move.l 16(sp),-(sp)
   11d36:	       move.l 16(sp),-(sp)
   11d3a:	       jsr 11c04 <getFuncNumForCallback>
   11d40:	       lea 12(sp),sp
   11d44:	       tst.w d0
   11d46:	,----- beq.s 11d58 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11d48:	|      movea.l 1c148 <currentEvents>,a0
   11d4e:	|      move.l (sp),d0
   11d50:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   11d54:	|      moveq #2,d0
   11d56:	|  ,-- bra.s 11d5a <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   11d58:	'--|-> moveq #1,d0
}
   11d5a:	   '-> addq.l #4,sp
   11d5c:	       rts

00011d5e <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   11d5e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d60:	       move.l sp,d0
   11d62:	       move.l d0,-(sp)
   11d64:	       move.l 16(sp),-(sp)
   11d68:	       move.l 16(sp),-(sp)
   11d6c:	       jsr 11c04 <getFuncNumForCallback>
   11d72:	       lea 12(sp),sp
   11d76:	       tst.w d0
   11d78:	,----- beq.s 11d8a <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   11d7a:	|      movea.l 1c148 <currentEvents>,a0
   11d80:	|      move.l (sp),d0
   11d82:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   11d86:	|      moveq #2,d0
   11d88:	|  ,-- bra.s 11d8c <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   11d8a:	'--|-> moveq #1,d0
}
   11d8c:	   '-> addq.l #4,sp
   11d8e:	       rts

00011d90 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   11d90:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11d92:	       move.l sp,d0
   11d94:	       move.l d0,-(sp)
   11d96:	       move.l 16(sp),-(sp)
   11d9a:	       move.l 16(sp),-(sp)
   11d9e:	       jsr 11c04 <getFuncNumForCallback>
   11da4:	       lea 12(sp),sp
   11da8:	       tst.w d0
   11daa:	,----- beq.s 11dbc <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   11dac:	|      movea.l 1c148 <currentEvents>,a0
   11db2:	|      move.l (sp),d0
   11db4:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11db8:	|      moveq #2,d0
   11dba:	|  ,-- bra.s 11dbe <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11dbc:	'--|-> moveq #1,d0
}
   11dbe:	   '-> addq.l #4,sp
   11dc0:	       rts

00011dc2 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11dc2:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11dc4:	          move.l sp,d0
   11dc6:	          move.l d0,-(sp)
   11dc8:	          move.l 16(sp),-(sp)
   11dcc:	          move.l 16(sp),-(sp)
   11dd0:	          jsr 11c04 <getFuncNumForCallback>
   11dd6:	          lea 12(sp),sp
   11dda:	          tst.w d0
   11ddc:	,-------- beq.s 11e08 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11dde:	|         move.l 1c7a8 <noStack>,d1
   11de4:	|         move.l (sp),d0
   11de6:	|         pea 1 <_start+0x1>
   11dea:	|         move.l d1,-(sp)
   11dec:	|         clr.l -(sp)
   11dee:	|         clr.l -(sp)
   11df0:	|         move.l d0,-(sp)
   11df2:	|         jsr 733a <startNewFunctionNum>
   11df8:	|         lea 20(sp),sp
   11dfc:	|         tst.l d0
   11dfe:	|     ,-- bne.s 11e04 <builtIn_spawnSub+0x42>
   11e00:	|     |   moveq #1,d0
   11e02:	|  ,--|-- bra.s 11e0a <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11e04:	|  |  '-> moveq #2,d0
   11e06:	|  +----- bra.s 11e0a <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11e08:	'--|----> moveq #1,d0
}
   11e0a:	   '----> addq.l #4,sp
   11e0c:	          rts

00011e0e <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11e0e:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11e10:	          move.l sp,d0
   11e12:	          addq.l #4,d0
   11e14:	          move.l d0,-(sp)
   11e16:	          move.l 20(sp),-(sp)
   11e1a:	          move.l 20(sp),-(sp)
   11e1e:	          jsr 11c04 <getFuncNumForCallback>
   11e24:	          lea 12(sp),sp
   11e28:	          tst.w d0
   11e2a:	,-------- beq.s 11e60 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11e2c:	|         move.l 4(sp),d1
   11e30:	|         move.l sp,d0
   11e32:	|         addq.l #2,d0
   11e34:	|         move.l d0,-(sp)
   11e36:	|         move.l 20(sp),-(sp)
   11e3a:	|         move.l d1,-(sp)
   11e3c:	|         jsr 5060 <cancelAFunction>
   11e42:	|         lea 12(sp),sp
		if (killedMyself) {
   11e46:	|         move.w 2(sp),d0
   11e4a:	|  ,----- beq.s 11e5c <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11e4c:	|  |      move.l 16(sp),-(sp)
   11e50:	|  |      jsr 4f7e <abortFunction>
   11e56:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11e58:	|  |      moveq #5,d0
   11e5a:	|  |  ,-- bra.s 11e62 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11e5c:	|  '--|-> moveq #2,d0
   11e5e:	|     +-- bra.s 11e62 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11e60:	'-----|-> moveq #1,d0
}
   11e62:	      '-> addq.l #8,sp
   11e64:	          rts

00011e66 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11e66:	       subq.l #8,sp
   11e68:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11e6a:	       movea.l 20(sp),a0
   11e6e:	       move.l 24(a0),d0
   11e72:	       move.l d0,-(sp)
   11e74:	       jsr 14be6 <getTextFromAnyVar>
   11e7a:	       addq.l #4,sp
   11e7c:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11e80:	   ,-- bne.s 11e86 <builtIn_stringWidth+0x20>
   11e82:	   |   moveq #1,d0
   11e84:	,--|-- bra.s 11ed4 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11e86:	|  '-> moveq #24,d0
   11e88:	|      add.l 20(sp),d0
   11e8c:	|      move.l d0,-(sp)
   11e8e:	|      jsr 14f94 <trimStack>
   11e94:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11e96:	|      move.l 8(sp),-(sp)
   11e9a:	|      jsr 156fa <stringWidth>
   11ea0:	|      addq.l #4,sp
   11ea2:	|      move.l d0,d1
   11ea4:	|      moveq #28,d0
   11ea6:	|      add.l 20(sp),d0
   11eaa:	|      move.l d1,-(sp)
   11eac:	|      pea 1 <_start+0x1>
   11eb0:	|      move.l d0,-(sp)
   11eb2:	|      jsr 14f02 <setVariable>
   11eb8:	|      lea 12(sp),sp
	FreeVec(theText);
   11ebc:	|      move.l 8(sp),4(sp)
   11ec2:	|      move.l 1c7d8 <SysBase>,d0
   11ec8:	|      movea.l d0,a6
   11eca:	|      movea.l 4(sp),a1
   11ece:	|      jsr -690(a6)
	return BR_CONTINUE;
   11ed2:	|      moveq #2,d0
}
   11ed4:	'----> movea.l (sp)+,a6
   11ed6:	       addq.l #8,sp
   11ed8:	       rts

00011eda <builtIn_hardScroll>:

builtIn(hardScroll)
{
   11eda:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11edc:	       movea.l 12(sp),a0
   11ee0:	       move.l 24(a0),d0
   11ee4:	       move.l d0,-(sp)
   11ee6:	       pea 1 <_start+0x1>
   11eea:	       move.l sp,d0
   11eec:	       addq.l #8,d0
   11eee:	       move.l d0,-(sp)
   11ef0:	       jsr 14610 <getValueType>
   11ef6:	       lea 12(sp),sp
   11efa:	       tst.w d0
   11efc:	   ,-- bne.s 11f02 <builtIn_hardScroll+0x28>
   11efe:	   |   moveq #1,d0
   11f00:	,--|-- bra.s 11f20 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11f02:	|  '-> moveq #24,d0
   11f04:	|      add.l 12(sp),d0
   11f08:	|      move.l d0,-(sp)
   11f0a:	|      jsr 14f94 <trimStack>
   11f10:	|      addq.l #4,sp
	hardScroll (v);
   11f12:	|      move.l (sp),d0
   11f14:	|      move.l d0,-(sp)
   11f16:	|      jsr d0c8 <hardScroll>
   11f1c:	|      addq.l #4,sp
	return BR_CONTINUE;
   11f1e:	|      moveq #2,d0
}
   11f20:	'----> addq.l #4,sp
   11f22:	       rts

00011f24 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11f24:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f26:	       movea.l 12(sp),a0
   11f2a:	       move.l 24(a0),d0
   11f2e:	       move.l d0,-(sp)
   11f30:	       pea 7 <_start+0x7>
   11f34:	       move.l sp,d0
   11f36:	       addq.l #8,d0
   11f38:	       move.l d0,-(sp)
   11f3a:	       jsr 14610 <getValueType>
   11f40:	       lea 12(sp),sp
   11f44:	       tst.w d0
   11f46:	   ,-- bne.s 11f4c <builtIn_isScreenRegion+0x28>
   11f48:	   |   moveq #1,d0
   11f4a:	,--|-- bra.s 11f8c <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11f4c:	|  '-> moveq #24,d0
   11f4e:	|      add.l 12(sp),d0
   11f52:	|      move.l d0,-(sp)
   11f54:	|      jsr 14f94 <trimStack>
   11f5a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   11f5c:	|      move.l (sp),d0
   11f5e:	|      move.l d0,-(sp)
   11f60:	|      jsr 158d2 <getRegionForObject>
   11f66:	|      addq.l #4,sp
   11f68:	|      tst.l d0
   11f6a:	|      sne d0
   11f6c:	|      neg.b d0
   11f6e:	|      moveq #0,d1
   11f70:	|      move.b d0,d1
   11f72:	|      moveq #28,d0
   11f74:	|      add.l 12(sp),d0
   11f78:	|      move.l d1,-(sp)
   11f7a:	|      pea 1 <_start+0x1>
   11f7e:	|      move.l d0,-(sp)
   11f80:	|      jsr 14f02 <setVariable>
   11f86:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11f8a:	|      moveq #2,d0
}
   11f8c:	'----> addq.l #4,sp
   11f8e:	       rts

00011f90 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11f90:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f92:	       movea.l 12(sp),a0
   11f96:	       move.l 24(a0),d0
   11f9a:	       move.l d0,-(sp)
   11f9c:	       pea 1 <_start+0x1>
   11fa0:	       move.l sp,d0
   11fa2:	       addq.l #8,d0
   11fa4:	       move.l d0,-(sp)
   11fa6:	       jsr 14610 <getValueType>
   11fac:	       lea 12(sp),sp
   11fb0:	       tst.w d0
   11fb2:	   ,-- bne.s 11fb8 <builtIn_setSpeechSpeed+0x28>
   11fb4:	   |   moveq #1,d0
   11fb6:	,--|-- bra.s 12006 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   11fb8:	|  '-> moveq #24,d0
   11fba:	|      add.l 12(sp),d0
   11fbe:	|      move.l d0,-(sp)
   11fc0:	|      jsr 14f94 <trimStack>
   11fc6:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   11fc8:	|      move.l (sp),d0
   11fca:	|      move.l d0,-(sp)
   11fcc:	|      jsr 17506 <__floatsisf>
   11fd2:	|      addq.l #4,sp
   11fd4:	|      move.l #1008981770,-(sp)
   11fda:	|      move.l d0,-(sp)
   11fdc:	|      jsr 175b8 <__mulsf3>
   11fe2:	|      addq.l #8,sp
   11fe4:	|      move.l d0,1c142 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   11fea:	|      moveq #28,d0
   11fec:	|      add.l 12(sp),d0
   11ff0:	|      pea 1 <_start+0x1>
   11ff4:	|      pea 1 <_start+0x1>
   11ff8:	|      move.l d0,-(sp)
   11ffa:	|      jsr 14f02 <setVariable>
   12000:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12004:	|      moveq #2,d0
}
   12006:	'----> addq.l #4,sp
   12008:	       rts

0001200a <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   1200a:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1200c:	       movea.l 12(sp),a0
   12010:	       move.l 24(a0),d0
   12014:	       move.l d0,-(sp)
   12016:	       pea 1 <_start+0x1>
   1201a:	       move.l sp,d0
   1201c:	       addq.l #8,d0
   1201e:	       move.l d0,-(sp)
   12020:	       jsr 14610 <getValueType>
   12026:	       lea 12(sp),sp
   1202a:	       tst.w d0
   1202c:	   ,-- bne.s 12032 <builtIn_setFontSpacing+0x28>
   1202e:	   |   moveq #1,d0
   12030:	,--|-- bra.s 12068 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   12032:	|  '-> move.l (sp),d0
   12034:	|      move.l d0,d0
   12036:	|      move.w d0,1c6d0 <fontSpace>
	trimStack (&fun -> stack);
   1203c:	|      moveq #24,d0
   1203e:	|      add.l 12(sp),d0
   12042:	|      move.l d0,-(sp)
   12044:	|      jsr 14f94 <trimStack>
   1204a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1204c:	|      moveq #28,d0
   1204e:	|      add.l 12(sp),d0
   12052:	|      pea 1 <_start+0x1>
   12056:	|      pea 1 <_start+0x1>
   1205a:	|      move.l d0,-(sp)
   1205c:	|      jsr 14f02 <setVariable>
   12062:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12066:	|      moveq #2,d0
}
   12068:	'----> addq.l #4,sp
   1206a:	       rts

0001206c <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   1206c:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1206e:	          movea.l 12(sp),a0
   12072:	          move.l 24(a0),d0
   12076:	          move.l d0,-(sp)
   12078:	          pea 1 <_start+0x1>
   1207c:	          move.l sp,d0
   1207e:	          addq.l #8,d0
   12080:	          move.l d0,-(sp)
   12082:	          jsr 14610 <getValueType>
   12088:	          lea 12(sp),sp
   1208c:	          tst.w d0
   1208e:	      ,-- bne.s 12094 <builtIn_transitionLevel+0x28>
   12090:	      |   moveq #1,d0
   12092:	,-----|-- bra.s 120e8 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   12094:	|     '-> moveq #24,d0
   12096:	|         add.l 12(sp),d0
   1209a:	|         move.l d0,-(sp)
   1209c:	|         jsr 14f94 <trimStack>
   120a2:	|         addq.l #4,sp

	if (number < 0)
   120a4:	|         move.l (sp),d0
   120a6:	|     ,-- bpl.s 120b0 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   120a8:	|     |   clr.b 1c146 <brightnessLevel>
   120ae:	|  ,--|-- bra.s 120cc <builtIn_transitionLevel+0x60>
	else if (number > 255)
   120b0:	|  |  '-> move.l (sp),d0
   120b2:	|  |      cmpi.l #255,d0
   120b8:	|  |  ,-- ble.s 120c2 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   120ba:	|  |  |   st 1c146 <brightnessLevel>
   120c0:	|  +--|-- bra.s 120cc <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   120c2:	|  |  '-> move.l (sp),d0
   120c4:	|  |      move.l d0,d0
   120c6:	|  |      move.b d0,1c146 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   120cc:	|  '----> moveq #28,d0
   120ce:	|         add.l 12(sp),d0
   120d2:	|         pea 1 <_start+0x1>
   120d6:	|         pea 1 <_start+0x1>
   120da:	|         move.l d0,-(sp)
   120dc:	|         jsr 14f02 <setVariable>
   120e2:	|         lea 12(sp),sp
	return BR_CONTINUE;
   120e6:	|         moveq #2,d0
}
   120e8:	'-------> addq.l #4,sp
   120ea:	          rts

000120ec <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   120ec:	movea.l 8(sp),a0
   120f0:	move.l 24(a0),d0
   120f4:	move.l d0,-(sp)
   120f6:	jsr 14b50 <getBoolean>
   120fc:	addq.l #4,sp
   120fe:	move.w d0,1c778 <captureAllKeys>
	trimStack (&fun -> stack);
   12104:	moveq #24,d0
   12106:	add.l 8(sp),d0
   1210a:	move.l d0,-(sp)
   1210c:	jsr 14f94 <trimStack>
   12112:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   12114:	move.w 1c778 <captureAllKeys>,d0
   1211a:	movea.w d0,a0
   1211c:	moveq #28,d0
   1211e:	add.l 8(sp),d0
   12122:	move.l a0,-(sp)
   12124:	pea 1 <_start+0x1>
   12128:	move.l d0,-(sp)
   1212a:	jsr 14f02 <setVariable>
   12130:	lea 12(sp),sp
	return BR_CONTINUE;
   12134:	moveq #2,d0
}
   12136:	rts

00012138 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12138:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1213c:	       movea.l 20(sp),a0
   12140:	       move.l 24(a0),d0
   12144:	       move.l d0,-(sp)
   12146:	       pea 1 <_start+0x1>
   1214a:	       moveq #12,d0
   1214c:	       add.l sp,d0
   1214e:	       move.l d0,-(sp)
   12150:	       jsr 14610 <getValueType>
   12156:	       lea 12(sp),sp
   1215a:	       tst.w d0
   1215c:	   ,-- bne.s 12164 <builtIn_spinCharacter+0x2c>
   1215e:	   |   moveq #1,d0
   12160:	,--|-- bra.w 12214 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12164:	|  '-> moveq #24,d0
   12166:	|      add.l 20(sp),d0
   1216a:	|      move.l d0,-(sp)
   1216c:	|      jsr 14f94 <trimStack>
   12172:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12174:	|      movea.l 20(sp),a0
   12178:	|      move.l 24(a0),d0
   1217c:	|      move.l d0,-(sp)
   1217e:	|      pea 7 <_start+0x7>
   12182:	|      lea 8(sp),a0
   12186:	|      move.l a0,-(sp)
   12188:	|      jsr 14610 <getValueType>
   1218e:	|      lea 12(sp),sp
   12192:	|      tst.w d0
   12194:	|  ,-- bne.s 1219a <builtIn_spinCharacter+0x62>
   12196:	|  |   moveq #1,d0
   12198:	+--|-- bra.s 12214 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1219a:	|  '-> moveq #24,d0
   1219c:	|      add.l 20(sp),d0
   121a0:	|      move.l d0,-(sp)
   121a2:	|      jsr 14f94 <trimStack>
   121a8:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   121aa:	|      move.l (sp),d0
   121ac:	|      move.l d0,-(sp)
   121ae:	|      jsr a474 <findPerson>
   121b4:	|      addq.l #4,sp
   121b6:	|      move.l d0,8(sp)
	if (thisPerson) {
   121ba:	|  ,-- beq.s 121fa <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   121bc:	|  |   move.l 4(sp),d0
   121c0:	|  |   movea.l 8(sp),a0
   121c4:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   121c8:	|  |   movea.l 8(sp),a0
   121cc:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   121d2:	|  |   movea.l 8(sp),a0
   121d6:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   121dc:	|  |   moveq #28,d0
   121de:	|  |   add.l 20(sp),d0
   121e2:	|  |   pea 1 <_start+0x1>
   121e6:	|  |   pea 1 <_start+0x1>
   121ea:	|  |   move.l d0,-(sp)
   121ec:	|  |   jsr 14f02 <setVariable>
   121f2:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   121f6:	|  |   moveq #3,d0
   121f8:	+--|-- bra.s 12214 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   121fa:	|  '-> moveq #28,d0
   121fc:	|      add.l 20(sp),d0
   12200:	|      clr.l -(sp)
   12202:	|      pea 1 <_start+0x1>
   12206:	|      move.l d0,-(sp)
   12208:	|      jsr 14f02 <setVariable>
   1220e:	|      lea 12(sp),sp
		return BR_CONTINUE;
   12212:	|      moveq #2,d0
	}
}
   12214:	'----> lea 12(sp),sp
   12218:	       rts

0001221a <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   1221a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1221c:	          movea.l 16(sp),a0
   12220:	          move.l 24(a0),d0
   12224:	          move.l d0,-(sp)
   12226:	          pea 7 <_start+0x7>
   1222a:	          move.l sp,d0
   1222c:	          addq.l #8,d0
   1222e:	          move.l d0,-(sp)
   12230:	          jsr 14610 <getValueType>
   12236:	          lea 12(sp),sp
   1223a:	          tst.w d0
   1223c:	      ,-- bne.s 12242 <builtIn_getCharacterDirection+0x28>
   1223e:	      |   moveq #1,d0
   12240:	,-----|-- bra.s 122a0 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12242:	|     '-> moveq #24,d0
   12244:	|         add.l 16(sp),d0
   12248:	|         move.l d0,-(sp)
   1224a:	|         jsr 14f94 <trimStack>
   12250:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12252:	|         move.l (sp),d0
   12254:	|         move.l d0,-(sp)
   12256:	|         jsr a474 <findPerson>
   1225c:	|         addq.l #4,sp
   1225e:	|         move.l d0,4(sp)
	if (thisPerson) {
   12262:	|  ,----- beq.s 12286 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   12264:	|  |      movea.l 4(sp),a0
   12268:	|  |      move.l 106(a0),d1
   1226c:	|  |      moveq #28,d0
   1226e:	|  |      add.l 16(sp),d0
   12272:	|  |      move.l d1,-(sp)
   12274:	|  |      pea 1 <_start+0x1>
   12278:	|  |      move.l d0,-(sp)
   1227a:	|  |      jsr 14f02 <setVariable>
   12280:	|  |      lea 12(sp),sp
   12284:	|  |  ,-- bra.s 1229e <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12286:	|  '--|-> moveq #28,d0
   12288:	|     |   add.l 16(sp),d0
   1228c:	|     |   clr.l -(sp)
   1228e:	|     |   pea 1 <_start+0x1>
   12292:	|     |   move.l d0,-(sp)
   12294:	|     |   jsr 14f02 <setVariable>
   1229a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1229e:	|     '-> moveq #2,d0
}
   122a0:	'-------> addq.l #8,sp
   122a2:	          rts

000122a4 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   122a4:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   122a6:	       movea.l 16(sp),a0
   122aa:	       move.l 24(a0),d0
   122ae:	       move.l d0,-(sp)
   122b0:	       pea 7 <_start+0x7>
   122b4:	       move.l sp,d0
   122b6:	       addq.l #8,d0
   122b8:	       move.l d0,-(sp)
   122ba:	       jsr 14610 <getValueType>
   122c0:	       lea 12(sp),sp
   122c4:	       tst.w d0
   122c6:	   ,-- bne.s 122cc <builtIn_isCharacter+0x28>
   122c8:	   |   moveq #1,d0
   122ca:	,--|-- bra.s 1230e <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   122cc:	|  '-> moveq #24,d0
   122ce:	|      add.l 16(sp),d0
   122d2:	|      move.l d0,-(sp)
   122d4:	|      jsr 14f94 <trimStack>
   122da:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   122dc:	|      move.l (sp),d0
   122de:	|      move.l d0,-(sp)
   122e0:	|      jsr a474 <findPerson>
   122e6:	|      addq.l #4,sp
   122e8:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   122ec:	|      sne d0
   122ee:	|      neg.b d0
   122f0:	|      moveq #0,d1
   122f2:	|      move.b d0,d1
   122f4:	|      moveq #28,d0
   122f6:	|      add.l 16(sp),d0
   122fa:	|      move.l d1,-(sp)
   122fc:	|      pea 1 <_start+0x1>
   12300:	|      move.l d0,-(sp)
   12302:	|      jsr 14f02 <setVariable>
   12308:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1230c:	|      moveq #2,d0
}
   1230e:	'----> addq.l #8,sp
   12310:	       rts

00012312 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   12312:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12314:	          movea.l 16(sp),a0
   12318:	          move.l 24(a0),d0
   1231c:	          move.l d0,-(sp)
   1231e:	          pea 7 <_start+0x7>
   12322:	          move.l sp,d0
   12324:	          addq.l #8,d0
   12326:	          move.l d0,-(sp)
   12328:	          jsr 14610 <getValueType>
   1232e:	          lea 12(sp),sp
   12332:	          tst.w d0
   12334:	      ,-- bne.s 1233a <builtIn_normalCharacter+0x28>
   12336:	      |   moveq #1,d0
   12338:	,-----|-- bra.s 123b6 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   1233a:	|     '-> moveq #24,d0
   1233c:	|         add.l 16(sp),d0
   12340:	|         move.l d0,-(sp)
   12342:	|         jsr 14f94 <trimStack>
   12348:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1234a:	|         move.l (sp),d0
   1234c:	|         move.l d0,-(sp)
   1234e:	|         jsr a474 <findPerson>
   12354:	|         addq.l #4,sp
   12356:	|         move.l d0,4(sp)
	if (thisPerson)
   1235a:	|  ,----- beq.s 1239c <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1235c:	|  |      movea.l 4(sp),a0
   12360:	|  |      movea.l 80(a0),a0
   12364:	|  |      move.l (a0),d1
   12366:	|  |      movea.l 4(sp),a0
   1236a:	|  |      move.l 106(a0),d0
   1236e:	|  |      add.l d0,d0
   12370:	|  |      add.l d0,d0
   12372:	|  |      movea.l d1,a0
   12374:	|  |      adda.l d0,a0
   12376:	|  |      move.l (a0),d0
   12378:	|  |      movea.l 4(sp),a0
   1237c:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12380:	|  |      moveq #28,d0
   12382:	|  |      add.l 16(sp),d0
   12386:	|  |      pea 1 <_start+0x1>
   1238a:	|  |      pea 1 <_start+0x1>
   1238e:	|  |      move.l d0,-(sp)
   12390:	|  |      jsr 14f02 <setVariable>
   12396:	|  |      lea 12(sp),sp
   1239a:	|  |  ,-- bra.s 123b4 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1239c:	|  '--|-> moveq #28,d0
   1239e:	|     |   add.l 16(sp),d0
   123a2:	|     |   clr.l -(sp)
   123a4:	|     |   pea 1 <_start+0x1>
   123a8:	|     |   move.l d0,-(sp)
   123aa:	|     |   jsr 14f02 <setVariable>
   123b0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   123b4:	|     '-> moveq #2,d0
}
   123b6:	'-------> addq.l #8,sp
   123b8:	          rts

000123ba <builtIn_isMoving>:

builtIn(isMoving)
{
   123ba:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123bc:	          movea.l 16(sp),a0
   123c0:	          move.l 24(a0),d0
   123c4:	          move.l d0,-(sp)
   123c6:	          pea 7 <_start+0x7>
   123ca:	          move.l sp,d0
   123cc:	          addq.l #8,d0
   123ce:	          move.l d0,-(sp)
   123d0:	          jsr 14610 <getValueType>
   123d6:	          lea 12(sp),sp
   123da:	          tst.w d0
   123dc:	      ,-- bne.s 123e2 <builtIn_isMoving+0x28>
   123de:	      |   moveq #1,d0
   123e0:	,-----|-- bra.s 12442 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   123e2:	|     '-> moveq #24,d0
   123e4:	|         add.l 16(sp),d0
   123e8:	|         move.l d0,-(sp)
   123ea:	|         jsr 14f94 <trimStack>
   123f0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   123f2:	|         move.l (sp),d0
   123f4:	|         move.l d0,-(sp)
   123f6:	|         jsr a474 <findPerson>
   123fc:	|         addq.l #4,sp
   123fe:	|         move.l d0,4(sp)
	if (thisPerson)
   12402:	|  ,----- beq.s 12428 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12404:	|  |      movea.l 4(sp),a0
   12408:	|  |      move.w 64(a0),d0
   1240c:	|  |      movea.w d0,a0
   1240e:	|  |      moveq #28,d0
   12410:	|  |      add.l 16(sp),d0
   12414:	|  |      move.l a0,-(sp)
   12416:	|  |      pea 1 <_start+0x1>
   1241a:	|  |      move.l d0,-(sp)
   1241c:	|  |      jsr 14f02 <setVariable>
   12422:	|  |      lea 12(sp),sp
   12426:	|  |  ,-- bra.s 12440 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12428:	|  '--|-> moveq #28,d0
   1242a:	|     |   add.l 16(sp),d0
   1242e:	|     |   clr.l -(sp)
   12430:	|     |   pea 1 <_start+0x1>
   12434:	|     |   move.l d0,-(sp)
   12436:	|     |   jsr 14f02 <setVariable>
   1243c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12440:	|     '-> moveq #2,d0
}
   12442:	'-------> addq.l #8,sp
   12444:	          rts

00012446 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12446:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1244a:	          movea.l 20(sp),a0
   1244e:	          move.l 24(a0),d0
   12452:	          move.l d0,-(sp)
   12454:	          pea 7 <_start+0x7>
   12458:	          lea 8(sp),a0
   1245c:	          move.l a0,-(sp)
   1245e:	          jsr 14610 <getValueType>
   12464:	          lea 12(sp),sp
   12468:	          tst.w d0
   1246a:	      ,-- bne.s 12472 <builtIn_fetchEvent+0x2c>
   1246c:	      |   moveq #1,d0
   1246e:	,-----|-- bra.w 12506 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12472:	|     '-> moveq #24,d0
   12474:	|         add.l 20(sp),d0
   12478:	|         move.l d0,-(sp)
   1247a:	|         jsr 14f94 <trimStack>
   12480:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12482:	|         movea.l 20(sp),a0
   12486:	|         move.l 24(a0),d0
   1248a:	|         move.l d0,-(sp)
   1248c:	|         pea 7 <_start+0x7>
   12490:	|         moveq #12,d0
   12492:	|         add.l sp,d0
   12494:	|         move.l d0,-(sp)
   12496:	|         jsr 14610 <getValueType>
   1249c:	|         lea 12(sp),sp
   124a0:	|         tst.w d0
   124a2:	|     ,-- bne.s 124a8 <builtIn_fetchEvent+0x62>
   124a4:	|     |   moveq #1,d0
   124a6:	+-----|-- bra.s 12506 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   124a8:	|     '-> moveq #24,d0
   124aa:	|         add.l 20(sp),d0
   124ae:	|         move.l d0,-(sp)
   124b0:	|         jsr 14f94 <trimStack>
   124b6:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   124b8:	|         move.l (sp),d1
   124ba:	|         move.l 4(sp),d0
   124be:	|         move.l d1,-(sp)
   124c0:	|         move.l d0,-(sp)
   124c2:	|         jsr d3aa <getCombinationFunction>
   124c8:	|         addq.l #8,sp
   124ca:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   124ce:	|  ,----- beq.s 124ec <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   124d0:	|  |      moveq #28,d0
   124d2:	|  |      add.l 20(sp),d0
   124d6:	|  |      move.l 8(sp),-(sp)
   124da:	|  |      pea 2 <_start+0x2>
   124de:	|  |      move.l d0,-(sp)
   124e0:	|  |      jsr 14f02 <setVariable>
   124e6:	|  |      lea 12(sp),sp
   124ea:	|  |  ,-- bra.s 12504 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   124ec:	|  '--|-> moveq #28,d0
   124ee:	|     |   add.l 20(sp),d0
   124f2:	|     |   clr.l -(sp)
   124f4:	|     |   pea 1 <_start+0x1>
   124f8:	|     |   move.l d0,-(sp)
   124fa:	|     |   jsr 14f02 <setVariable>
   12500:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12504:	|     '-> moveq #2,d0
}
   12506:	'-------> lea 12(sp),sp
   1250a:	          rts

0001250c <builtIn_deleteFile>:

builtIn(deleteFile)
{
   1250c:	       lea -24(sp),sp
   12510:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12512:	       movea.l 36(sp),a0
   12516:	       move.l 24(a0),d0
   1251a:	       move.l d0,-(sp)
   1251c:	       jsr 14be6 <getTextFromAnyVar>
   12522:	       addq.l #4,sp
   12524:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12528:	       moveq #24,d0
   1252a:	       add.l 36(sp),d0
   1252e:	       move.l d0,-(sp)
   12530:	       jsr 14f94 <trimStack>
   12536:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12538:	       move.l 24(sp),-(sp)
   1253c:	       jsr 2fe <encodeFilename>
   12542:	       addq.l #4,sp
   12544:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12548:	       move.l 24(sp),16(sp)
   1254e:	       move.l 1c7d8 <SysBase>,d0
   12554:	       movea.l d0,a6
   12556:	       movea.l 16(sp),a1
   1255a:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   1255e:	       move.l 20(sp),-(sp)
   12562:	       jsr e162 <failSecurityCheck>
   12568:	       addq.l #4,sp
   1256a:	       tst.w d0
   1256c:	   ,-- beq.s 12572 <builtIn_deleteFile+0x66>
   1256e:	   |   moveq #1,d0
   12570:	,--|-- bra.s 125c0 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12572:	|  '-> move.l 20(sp),12(sp)
   12578:	|      move.l 1c7e0 <DOSBase>,d0
   1257e:	|      movea.l d0,a6
   12580:	|      move.l 12(sp),d1
   12584:	|      jsr -72(a6)
   12588:	|      move.l d0,8(sp)
   1258c:	|      move.l 8(sp),d1
   12590:	|      moveq #28,d0
   12592:	|      add.l 36(sp),d0
   12596:	|      move.l d1,-(sp)
   12598:	|      pea 1 <_start+0x1>
   1259c:	|      move.l d0,-(sp)
   1259e:	|      jsr 14f02 <setVariable>
   125a4:	|      lea 12(sp),sp
    FreeVec(nam);
   125a8:	|      move.l 20(sp),4(sp)
   125ae:	|      move.l 1c7d8 <SysBase>,d0
   125b4:	|      movea.l d0,a6
   125b6:	|      movea.l 4(sp),a1
   125ba:	|      jsr -690(a6)

    return BR_CONTINUE;
   125be:	|      moveq #2,d0
}
   125c0:	'----> movea.l (sp)+,a6
   125c2:	       lea 24(sp),sp
   125c6:	       rts

000125c8 <builtIn_renameFile>:

builtIn(renameFile)
{
   125c8:	       lea -40(sp),sp
   125cc:	       move.l a6,-(sp)
   125ce:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   125d0:	       movea.l 56(sp),a0
   125d4:	       move.l 24(a0),d0
   125d8:	       move.l d0,-(sp)
   125da:	       jsr 14be6 <getTextFromAnyVar>
   125e0:	       addq.l #4,sp
   125e2:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   125e6:	       move.l 44(sp),-(sp)
   125ea:	       jsr 2fe <encodeFilename>
   125f0:	       addq.l #4,sp
   125f2:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   125f6:	       moveq #24,d0
   125f8:	       add.l 56(sp),d0
   125fc:	       move.l d0,-(sp)
   125fe:	       jsr 14f94 <trimStack>
   12604:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12606:	       move.l 40(sp),-(sp)
   1260a:	       jsr e162 <failSecurityCheck>
   12610:	       addq.l #4,sp
   12612:	       tst.w d0
   12614:	   ,-- beq.s 1261c <builtIn_renameFile+0x54>
   12616:	   |   moveq #1,d0
   12618:	,--|-- bra.w 12702 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1261c:	|  '-> move.l 44(sp),36(sp)
   12622:	|      move.l 1c7d8 <SysBase>,d0
   12628:	|      movea.l d0,a6
   1262a:	|      movea.l 36(sp),a1
   1262e:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12632:	|      movea.l 56(sp),a0
   12636:	|      move.l 24(a0),d0
   1263a:	|      move.l d0,-(sp)
   1263c:	|      jsr 14be6 <getTextFromAnyVar>
   12642:	|      addq.l #4,sp
   12644:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12648:	|      move.l 44(sp),-(sp)
   1264c:	|      jsr 2fe <encodeFilename>
   12652:	|      addq.l #4,sp
   12654:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12658:	|      moveq #24,d0
   1265a:	|      add.l 56(sp),d0
   1265e:	|      move.l d0,-(sp)
   12660:	|      jsr 14f94 <trimStack>
   12666:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12668:	|      move.l 32(sp),-(sp)
   1266c:	|      jsr e162 <failSecurityCheck>
   12672:	|      addq.l #4,sp
   12674:	|      tst.w d0
   12676:	|  ,-- beq.s 1267e <builtIn_renameFile+0xb6>
   12678:	|  |   moveq #1,d0
   1267a:	+--|-- bra.w 12702 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1267e:	|  '-> move.l 44(sp),28(sp)
   12684:	|      move.l 1c7d8 <SysBase>,d0
   1268a:	|      movea.l d0,a6
   1268c:	|      movea.l 28(sp),a1
   12690:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12694:	|      move.l 32(sp),24(sp)
   1269a:	|      move.l 40(sp),20(sp)
   126a0:	|      move.l 1c7e0 <DOSBase>,d0
   126a6:	|      movea.l d0,a6
   126a8:	|      move.l 24(sp),d1
   126ac:	|      move.l 20(sp),d2
   126b0:	|      jsr -78(a6)
   126b4:	|      move.l d0,16(sp)
   126b8:	|      move.l 16(sp),d1
   126bc:	|      moveq #28,d0
   126be:	|      add.l 56(sp),d0
   126c2:	|      move.l d1,-(sp)
   126c4:	|      pea 1 <_start+0x1>
   126c8:	|      move.l d0,-(sp)
   126ca:	|      jsr 14f02 <setVariable>
   126d0:	|      lea 12(sp),sp
	FreeVec(nam);
   126d4:	|      move.l 32(sp),12(sp)
   126da:	|      move.l 1c7d8 <SysBase>,d0
   126e0:	|      movea.l d0,a6
   126e2:	|      movea.l 12(sp),a1
   126e6:	|      jsr -690(a6)
	FreeVec(newnam);
   126ea:	|      move.l 40(sp),8(sp)
   126f0:	|      move.l 1c7d8 <SysBase>,d0
   126f6:	|      movea.l d0,a6
   126f8:	|      movea.l 8(sp),a1
   126fc:	|      jsr -690(a6)

	return BR_CONTINUE;
   12700:	|      moveq #2,d0
}
   12702:	'----> move.l (sp)+,d2
   12704:	       movea.l (sp)+,a6
   12706:	       lea 40(sp),sp
   1270a:	       rts

0001270c <builtIn_cacheSound>:

builtIn(cacheSound)
{
   1270c:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1270e:	       movea.l 12(sp),a0
   12712:	       move.l 24(a0),d0
   12716:	       move.l d0,-(sp)
   12718:	       pea 5 <_start+0x5>
   1271c:	       move.l sp,d0
   1271e:	       addq.l #8,d0
   12720:	       move.l d0,-(sp)
   12722:	       jsr 14610 <getValueType>
   12728:	       lea 12(sp),sp
   1272c:	       tst.w d0
   1272e:	   ,-- bne.s 12734 <builtIn_cacheSound+0x28>
   12730:	   |   moveq #1,d0
   12732:	,--|-- bra.s 1275c <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12734:	|  '-> moveq #24,d0
   12736:	|      add.l 12(sp),d0
   1273a:	|      move.l d0,-(sp)
   1273c:	|      jsr 14f94 <trimStack>
   12742:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12744:	|      move.l (sp),d0
   12746:	|      move.l d0,-(sp)
   12748:	|      jsr cfaa <cacheSound>
   1274e:	|      addq.l #4,sp
   12750:	|      moveq #-1,d1
   12752:	|      cmp.l d0,d1
   12754:	|  ,-- bne.s 1275a <builtIn_cacheSound+0x4e>
   12756:	|  |   moveq #1,d0
   12758:	+--|-- bra.s 1275c <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   1275a:	|  '-> moveq #2,d0
}
   1275c:	'----> addq.l #4,sp
   1275e:	       rts

00012760 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12760:	pea 19a5b <talk.c.490538ff+0x13f>
   12766:	jsr 170d4 <KPrintF>
   1276c:	addq.l #4,sp
	return BR_CONTINUE;
   1276e:	moveq #2,d0
}
   12770:	rts

00012772 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12772:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12776:	          movea.l 20(sp),a0
   1277a:	          move.l 24(a0),d0
   1277e:	          move.l d0,-(sp)
   12780:	          pea 1 <_start+0x1>
   12784:	          moveq #12,d0
   12786:	          add.l sp,d0
   12788:	          move.l d0,-(sp)
   1278a:	          jsr 14610 <getValueType>
   12790:	          lea 12(sp),sp
   12794:	          tst.w d0
   12796:	      ,-- bne.s 1279e <builtIn_setCharacterSpinSpeed+0x2c>
   12798:	      |   moveq #1,d0
   1279a:	,-----|-- bra.w 12838 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1279e:	|     '-> moveq #24,d0
   127a0:	|         add.l 20(sp),d0
   127a4:	|         move.l d0,-(sp)
   127a6:	|         jsr 14f94 <trimStack>
   127ac:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   127ae:	|         movea.l 20(sp),a0
   127b2:	|         move.l 24(a0),d0
   127b6:	|         move.l d0,-(sp)
   127b8:	|         pea 7 <_start+0x7>
   127bc:	|         lea 8(sp),a0
   127c0:	|         move.l a0,-(sp)
   127c2:	|         jsr 14610 <getValueType>
   127c8:	|         lea 12(sp),sp
   127cc:	|         tst.w d0
   127ce:	|     ,-- bne.s 127d4 <builtIn_setCharacterSpinSpeed+0x62>
   127d0:	|     |   moveq #1,d0
   127d2:	+-----|-- bra.s 12838 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   127d4:	|     '-> moveq #24,d0
   127d6:	|         add.l 20(sp),d0
   127da:	|         move.l d0,-(sp)
   127dc:	|         jsr 14f94 <trimStack>
   127e2:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   127e4:	|         move.l (sp),d0
   127e6:	|         move.l d0,-(sp)
   127e8:	|         jsr a474 <findPerson>
   127ee:	|         addq.l #4,sp
   127f0:	|         move.l d0,8(sp)

	if (thisPerson) {
   127f4:	|  ,----- beq.s 1281e <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   127f6:	|  |      move.l 4(sp),d0
   127fa:	|  |      movea.l 8(sp),a0
   127fe:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12802:	|  |      moveq #28,d0
   12804:	|  |      add.l 20(sp),d0
   12808:	|  |      pea 1 <_start+0x1>
   1280c:	|  |      pea 1 <_start+0x1>
   12810:	|  |      move.l d0,-(sp)
   12812:	|  |      jsr 14f02 <setVariable>
   12818:	|  |      lea 12(sp),sp
   1281c:	|  |  ,-- bra.s 12836 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1281e:	|  '--|-> moveq #28,d0
   12820:	|     |   add.l 20(sp),d0
   12824:	|     |   clr.l -(sp)
   12826:	|     |   pea 1 <_start+0x1>
   1282a:	|     |   move.l d0,-(sp)
   1282c:	|     |   jsr 14f02 <setVariable>
   12832:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12836:	|     '-> moveq #2,d0
}
   12838:	'-------> lea 12(sp),sp
   1283c:	          rts

0001283e <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   1283e:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12842:	          movea.l 20(sp),a0
   12846:	          move.l 24(a0),d0
   1284a:	          move.l d0,-(sp)
   1284c:	          pea 1 <_start+0x1>
   12850:	          moveq #12,d0
   12852:	          add.l sp,d0
   12854:	          move.l d0,-(sp)
   12856:	          jsr 14610 <getValueType>
   1285c:	          lea 12(sp),sp
   12860:	          tst.w d0
   12862:	      ,-- bne.s 1286a <builtIn_setCharacterAngleOffset+0x2c>
   12864:	      |   moveq #1,d0
   12866:	,-----|-- bra.w 12904 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   1286a:	|     '-> moveq #24,d0
   1286c:	|         add.l 20(sp),d0
   12870:	|         move.l d0,-(sp)
   12872:	|         jsr 14f94 <trimStack>
   12878:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1287a:	|         movea.l 20(sp),a0
   1287e:	|         move.l 24(a0),d0
   12882:	|         move.l d0,-(sp)
   12884:	|         pea 7 <_start+0x7>
   12888:	|         lea 8(sp),a0
   1288c:	|         move.l a0,-(sp)
   1288e:	|         jsr 14610 <getValueType>
   12894:	|         lea 12(sp),sp
   12898:	|         tst.w d0
   1289a:	|     ,-- bne.s 128a0 <builtIn_setCharacterAngleOffset+0x62>
   1289c:	|     |   moveq #1,d0
   1289e:	+-----|-- bra.s 12904 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   128a0:	|     '-> moveq #24,d0
   128a2:	|         add.l 20(sp),d0
   128a6:	|         move.l d0,-(sp)
   128a8:	|         jsr 14f94 <trimStack>
   128ae:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   128b0:	|         move.l (sp),d0
   128b2:	|         move.l d0,-(sp)
   128b4:	|         jsr a474 <findPerson>
   128ba:	|         addq.l #4,sp
   128bc:	|         move.l d0,8(sp)

	if (thisPerson) {
   128c0:	|  ,----- beq.s 128ea <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   128c2:	|  |      move.l 4(sp),d0
   128c6:	|  |      movea.l 8(sp),a0
   128ca:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   128ce:	|  |      moveq #28,d0
   128d0:	|  |      add.l 20(sp),d0
   128d4:	|  |      pea 1 <_start+0x1>
   128d8:	|  |      pea 1 <_start+0x1>
   128dc:	|  |      move.l d0,-(sp)
   128de:	|  |      jsr 14f02 <setVariable>
   128e4:	|  |      lea 12(sp),sp
   128e8:	|  |  ,-- bra.s 12902 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   128ea:	|  '--|-> moveq #28,d0
   128ec:	|     |   add.l 20(sp),d0
   128f0:	|     |   clr.l -(sp)
   128f2:	|     |   pea 1 <_start+0x1>
   128f6:	|     |   move.l d0,-(sp)
   128f8:	|     |   jsr 14f02 <setVariable>
   128fe:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12902:	|     '-> moveq #2,d0
}
   12904:	'-------> lea 12(sp),sp
   12908:	          rts

0001290a <builtIn_transitionMode>:


builtIn(transitionMode)
{
   1290a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1290c:	       movea.l 12(sp),a0
   12910:	       move.l 24(a0),d0
   12914:	       move.l d0,-(sp)
   12916:	       pea 1 <_start+0x1>
   1291a:	       move.l sp,d0
   1291c:	       addq.l #8,d0
   1291e:	       move.l d0,-(sp)
   12920:	       jsr 14610 <getValueType>
   12926:	       lea 12(sp),sp
   1292a:	       tst.w d0
   1292c:	   ,-- bne.s 12932 <builtIn_transitionMode+0x28>
   1292e:	   |   moveq #1,d0
   12930:	,--|-- bra.s 12968 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12932:	|  '-> move.l (sp),d0
   12934:	|      move.l d0,d0
   12936:	|      move.b d0,1c6a6 <fadeMode>
	trimStack (&fun -> stack);
   1293c:	|      moveq #24,d0
   1293e:	|      add.l 12(sp),d0
   12942:	|      move.l d0,-(sp)
   12944:	|      jsr 14f94 <trimStack>
   1294a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1294c:	|      moveq #28,d0
   1294e:	|      add.l 12(sp),d0
   12952:	|      pea 1 <_start+0x1>
   12956:	|      pea 1 <_start+0x1>
   1295a:	|      move.l d0,-(sp)
   1295c:	|      jsr 14f02 <setVariable>
   12962:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12966:	|      moveq #2,d0
}
   12968:	'----> addq.l #4,sp
   1296a:	       rts

0001296c <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1296c:	moveq #24,d0
   1296e:	add.l 8(sp),d0
   12972:	move.l d0,-(sp)
   12974:	jsr 14f94 <trimStack>
   1297a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   1297c:	moveq #28,d0
   1297e:	add.l 8(sp),d0
   12982:	pea 1 <_start+0x1>
   12986:	pea 1 <_start+0x1>
   1298a:	move.l d0,-(sp)
   1298c:	jsr 14f02 <setVariable>
   12992:	lea 12(sp),sp
	return BR_CONTINUE;
   12996:	moveq #2,d0
}
   12998:	rts

0001299a <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   1299a:	pea 19a85 <talk.c.490538ff+0x169>
   129a0:	jsr 170d4 <KPrintF>
   129a6:	addq.l #4,sp
	return BR_CONTINUE;
   129a8:	moveq #2,d0
}
   129aa:	rts

000129ac <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   129ac:	       lea -16(sp),sp
   129b0:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   129b2:	       movea.l 28(sp),a0
   129b6:	       move.l 24(a0),d0
   129ba:	       move.l d0,-(sp)
   129bc:	       jsr 14be6 <getTextFromAnyVar>
   129c2:	       addq.l #4,sp
   129c4:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   129c8:	   ,-- bne.s 129d0 <builtIn_saveCustomData+0x24>
   129ca:	   |   moveq #1,d0
   129cc:	,--|-- bra.w 12a82 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   129d0:	|  '-> move.l 16(sp),-(sp)
   129d4:	|      jsr 2fe <encodeFilename>
   129da:	|      addq.l #4,sp
   129dc:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   129e0:	|      move.l 16(sp),8(sp)
   129e6:	|      move.l 1c7d8 <SysBase>,d0
   129ec:	|      movea.l d0,a6
   129ee:	|      movea.l 8(sp),a1
   129f2:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   129f6:	|      move.l 12(sp),-(sp)
   129fa:	|      jsr e162 <failSecurityCheck>
   12a00:	|      addq.l #4,sp
   12a02:	|      tst.w d0
   12a04:	|  ,-- beq.s 12a0a <builtIn_saveCustomData+0x5e>
   12a06:	|  |   moveq #1,d0
   12a08:	+--|-- bra.s 12a82 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12a0a:	|  '-> moveq #24,d0
   12a0c:	|      add.l 28(sp),d0
   12a10:	|      move.l d0,-(sp)
   12a12:	|      jsr 14f94 <trimStack>
   12a18:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12a1a:	|      movea.l 28(sp),a0
   12a1e:	|      movea.l 24(a0),a0
   12a22:	|      move.l (a0),d0
   12a24:	|      moveq #6,d1
   12a26:	|      cmp.l d0,d1
   12a28:	|  ,-- beq.s 12a3c <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12a2a:	|  |   pea 19ab2 <talk.c.490538ff+0x196>
   12a30:	|  |   jsr 170d4 <KPrintF>
   12a36:	|  |   addq.l #4,sp
		return BR_ERROR;
   12a38:	|  |   moveq #1,d0
   12a3a:	+--|-- bra.s 12a82 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12a3c:	|  '-> movea.l 28(sp),a0
   12a40:	|      move.l 24(a0),d0
   12a44:	|      move.l d0,-(sp)
   12a46:	|      move.l 16(sp),-(sp)
   12a4a:	|      jsr ddb2 <stackToFile>
   12a50:	|      addq.l #8,sp
   12a52:	|      tst.w d0
   12a54:	|  ,-- bne.s 12a5a <builtIn_saveCustomData+0xae>
   12a56:	|  |   moveq #1,d0
   12a58:	+--|-- bra.s 12a82 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12a5a:	|  '-> moveq #24,d0
   12a5c:	|      add.l 28(sp),d0
   12a60:	|      move.l d0,-(sp)
   12a62:	|      jsr 14f94 <trimStack>
   12a68:	|      addq.l #4,sp
	FreeVec(fileName);
   12a6a:	|      move.l 12(sp),4(sp)
   12a70:	|      move.l 1c7d8 <SysBase>,d0
   12a76:	|      movea.l d0,a6
   12a78:	|      movea.l 4(sp),a1
   12a7c:	|      jsr -690(a6)
	return BR_CONTINUE;
   12a80:	|      moveq #2,d0
}
   12a82:	'----> movea.l (sp)+,a6
   12a84:	       lea 16(sp),sp
   12a88:	       rts

00012a8a <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12a8a:	       lea -28(sp),sp
   12a8e:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12a90:	       movea.l 40(sp),a0
   12a94:	       move.l 24(a0),d0
   12a98:	       move.l d0,-(sp)
   12a9a:	       jsr 14be6 <getTextFromAnyVar>
   12aa0:	       addq.l #4,sp
   12aa2:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12aa6:	   ,-- bne.s 12aae <builtIn_loadCustomData+0x24>
   12aa8:	   |   moveq #1,d0
   12aaa:	,--|-- bra.w 12baa <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12aae:	|  '-> move.l 28(sp),-(sp)
   12ab2:	|      jsr 2fe <encodeFilename>
   12ab8:	|      addq.l #4,sp
   12aba:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12abe:	|      move.l 28(sp),20(sp)
   12ac4:	|      move.l 1c7d8 <SysBase>,d0
   12aca:	|      movea.l d0,a6
   12acc:	|      movea.l 20(sp),a1
   12ad0:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12ad4:	|      move.l 24(sp),-(sp)
   12ad8:	|      jsr e162 <failSecurityCheck>
   12ade:	|      addq.l #4,sp
   12ae0:	|      tst.w d0
   12ae2:	|  ,-- beq.s 12aea <builtIn_loadCustomData+0x60>
   12ae4:	|  |   moveq #1,d0
   12ae6:	+--|-- bra.w 12baa <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12aea:	|  '-> moveq #24,d0
   12aec:	|      add.l 40(sp),d0
   12af0:	|      move.l d0,-(sp)
   12af2:	|      jsr 14f94 <trimStack>
   12af8:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12afa:	|      moveq #28,d0
   12afc:	|      add.l 40(sp),d0
   12b00:	|      move.l d0,-(sp)
   12b02:	|      jsr 1485e <unlinkVar>
   12b08:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12b0a:	|      movea.l 40(sp),a0
   12b0e:	|      moveq #6,d0
   12b10:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12b14:	|      moveq #12,d0
   12b16:	|      move.l d0,16(sp)
   12b1a:	|      clr.l 12(sp)
   12b1e:	|      move.l 1c7d8 <SysBase>,d0
   12b24:	|      movea.l d0,a6
   12b26:	|      move.l 16(sp),d0
   12b2a:	|      move.l 12(sp),d1
   12b2e:	|      jsr -684(a6)
   12b32:	|      move.l d0,8(sp)
   12b36:	|      move.l 8(sp),d0
   12b3a:	|      movea.l 40(sp),a0
   12b3e:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12b42:	|      movea.l 40(sp),a0
   12b46:	|      move.l 32(a0),d0
   12b4a:	|  ,-- bne.s 12b50 <builtIn_loadCustomData+0xc6>
   12b4c:	|  |   moveq #1,d0
   12b4e:	+--|-- bra.s 12baa <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12b50:	|  '-> movea.l 40(sp),a0
   12b54:	|      movea.l 32(a0),a0
   12b58:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12b5a:	|      movea.l 40(sp),a0
   12b5e:	|      movea.l 32(a0),a0
   12b62:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12b66:	|      movea.l 40(sp),a0
   12b6a:	|      movea.l 32(a0),a0
   12b6e:	|      moveq #1,d0
   12b70:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12b74:	|      movea.l 40(sp),a0
   12b78:	|      move.l 32(a0),d0
   12b7c:	|      move.l d0,-(sp)
   12b7e:	|      move.l 28(sp),-(sp)
   12b82:	|      jsr d7ec <fileToStack>
   12b88:	|      addq.l #8,sp
   12b8a:	|      tst.w d0
   12b8c:	|  ,-- bne.s 12b92 <builtIn_loadCustomData+0x108>
   12b8e:	|  |   moveq #1,d0
   12b90:	+--|-- bra.s 12baa <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12b92:	|  '-> move.l 24(sp),4(sp)
   12b98:	|      move.l 1c7d8 <SysBase>,d0
   12b9e:	|      movea.l d0,a6
   12ba0:	|      movea.l 4(sp),a1
   12ba4:	|      jsr -690(a6)
	return BR_CONTINUE;
   12ba8:	|      moveq #2,d0
}
   12baa:	'----> movea.l (sp)+,a6
   12bac:	       lea 28(sp),sp
   12bb0:	       rts

00012bb2 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12bb2:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12bb4:	       movea.l 12(sp),a0
   12bb8:	       move.l 24(a0),d0
   12bbc:	       move.l d0,-(sp)
   12bbe:	       pea 1 <_start+0x1>
   12bc2:	       move.l sp,d0
   12bc4:	       addq.l #8,d0
   12bc6:	       move.l d0,-(sp)
   12bc8:	       jsr 14610 <getValueType>
   12bce:	       lea 12(sp),sp
   12bd2:	       tst.w d0
   12bd4:	   ,-- bne.s 12bda <builtIn_setCustomEncoding+0x28>
   12bd6:	   |   moveq #1,d0
   12bd8:	,--|-- bra.s 12c10 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12bda:	|  '-> move.l (sp),d0
   12bdc:	|      move.l d0,d0
   12bde:	|      move.w d0,1c88c <saveEncoding>
	trimStack (&fun -> stack);
   12be4:	|      moveq #24,d0
   12be6:	|      add.l 12(sp),d0
   12bea:	|      move.l d0,-(sp)
   12bec:	|      jsr 14f94 <trimStack>
   12bf2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12bf4:	|      moveq #28,d0
   12bf6:	|      add.l 12(sp),d0
   12bfa:	|      pea 1 <_start+0x1>
   12bfe:	|      pea 1 <_start+0x1>
   12c02:	|      move.l d0,-(sp)
   12c04:	|      jsr 14f02 <setVariable>
   12c0a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12c0e:	|      moveq #2,d0
}
   12c10:	'----> addq.l #4,sp
   12c12:	       rts

00012c14 <builtIn_freeSound>:

builtIn(freeSound)
{
   12c14:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12c16:	       movea.l 12(sp),a0
   12c1a:	       move.l 24(a0),d0
   12c1e:	       move.l d0,-(sp)
   12c20:	       pea 5 <_start+0x5>
   12c24:	       move.l sp,d0
   12c26:	       addq.l #8,d0
   12c28:	       move.l d0,-(sp)
   12c2a:	       jsr 14610 <getValueType>
   12c30:	       lea 12(sp),sp
   12c34:	       tst.w d0
   12c36:	   ,-- bne.s 12c3c <builtIn_freeSound+0x28>
   12c38:	   |   moveq #1,d0
   12c3a:	,--|-- bra.s 12c5a <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12c3c:	|  '-> moveq #24,d0
   12c3e:	|      add.l 12(sp),d0
   12c42:	|      move.l d0,-(sp)
   12c44:	|      jsr 14f94 <trimStack>
   12c4a:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12c4c:	|      move.l (sp),d0
   12c4e:	|      move.l d0,-(sp)
   12c50:	|      jsr cfae <huntKillFreeSound>
   12c56:	|      addq.l #4,sp
	return BR_CONTINUE;
   12c58:	|      moveq #2,d0
}
   12c5a:	'----> addq.l #4,sp
   12c5c:	       rts

00012c5e <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12c5e:	       lea -12(sp),sp
   12c62:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c64:	       movea.l 24(sp),a0
   12c68:	       move.l 24(a0),d0
   12c6c:	       move.l d0,-(sp)
   12c6e:	       pea 1 <_start+0x1>
   12c72:	       moveq #16,d0
   12c74:	       add.l sp,d0
   12c76:	       move.l d0,-(sp)
   12c78:	       jsr 14610 <getValueType>
   12c7e:	       lea 12(sp),sp
   12c82:	       tst.w d0
   12c84:	   ,-- bne.s 12c8c <builtIn_parallaxAdd+0x2e>
   12c86:	   |   moveq #1,d0
   12c88:	,--|-- bra.w 12d60 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12c8c:	|  '-> moveq #24,d0
   12c8e:	|      add.l 24(sp),d0
   12c92:	|      move.l d0,-(sp)
   12c94:	|      jsr 14f94 <trimStack>
   12c9a:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c9c:	|      movea.l 24(sp),a0
   12ca0:	|      move.l 24(a0),d0
   12ca4:	|      move.l d0,-(sp)
   12ca6:	|      pea 1 <_start+0x1>
   12caa:	|      moveq #20,d0
   12cac:	|      add.l sp,d0
   12cae:	|      move.l d0,-(sp)
   12cb0:	|      jsr 14610 <getValueType>
   12cb6:	|      lea 12(sp),sp
   12cba:	|      tst.w d0
   12cbc:	|  ,-- bne.s 12cc4 <builtIn_parallaxAdd+0x66>
   12cbe:	|  |   moveq #1,d0
   12cc0:	+--|-- bra.w 12d60 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12cc4:	|  '-> moveq #24,d0
   12cc6:	|      add.l 24(sp),d0
   12cca:	|      move.l d0,-(sp)
   12ccc:	|      jsr 14f94 <trimStack>
   12cd2:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12cd4:	|      movea.l 24(sp),a0
   12cd8:	|      move.l 24(a0),d0
   12cdc:	|      move.l d0,-(sp)
   12cde:	|      pea 5 <_start+0x5>
   12ce2:	|      lea 12(sp),a0
   12ce6:	|      move.l a0,-(sp)
   12ce8:	|      jsr 14610 <getValueType>
   12cee:	|      lea 12(sp),sp
   12cf2:	|      tst.w d0
   12cf4:	|  ,-- bne.s 12cfa <builtIn_parallaxAdd+0x9c>
   12cf6:	|  |   moveq #1,d0
   12cf8:	+--|-- bra.s 12d60 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12cfa:	|  '-> moveq #24,d0
   12cfc:	|      add.l 24(sp),d0
   12d00:	|      move.l d0,-(sp)
   12d02:	|      jsr 14f94 <trimStack>
   12d08:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12d0a:	|      move.l 8(sp),d0
   12d0e:	|      move.l d0,d0
   12d10:	|      moveq #0,d2
   12d12:	|      move.w d0,d2
   12d14:	|      move.l 12(sp),d0
   12d18:	|      move.l d0,d0
   12d1a:	|      moveq #0,d1
   12d1c:	|      move.w d0,d1
   12d1e:	|      move.l 4(sp),d0
   12d22:	|      move.l d0,d0
   12d24:	|      move.w d0,d0
   12d26:	|      andi.l #65535,d0
   12d2c:	|      move.l d2,-(sp)
   12d2e:	|      move.l d1,-(sp)
   12d30:	|      move.l d0,-(sp)
   12d32:	|      jsr d1ca <loadParallax>
   12d38:	|      lea 12(sp),sp
   12d3c:	|      tst.w d0
   12d3e:	|  ,-- bne.s 12d44 <builtIn_parallaxAdd+0xe6>
   12d40:	|  |   moveq #1,d0
   12d42:	+--|-- bra.s 12d60 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12d44:	|  '-> moveq #28,d0
   12d46:	|      add.l 24(sp),d0
   12d4a:	|      pea 1 <_start+0x1>
   12d4e:	|      pea 1 <_start+0x1>
   12d52:	|      move.l d0,-(sp)
   12d54:	|      jsr 14f02 <setVariable>
   12d5a:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   12d5e:	|      moveq #2,d0
}
   12d60:	'----> move.l (sp)+,d2
   12d62:	       lea 12(sp),sp
   12d66:	       rts

00012d68 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   12d68:	jsr d102 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   12d6e:	moveq #28,d0
   12d70:	add.l 8(sp),d0
   12d74:	pea 1 <_start+0x1>
   12d78:	pea 1 <_start+0x1>
   12d7c:	move.l d0,-(sp)
   12d7e:	jsr 14f02 <setVariable>
   12d84:	lea 12(sp),sp
	return BR_CONTINUE;
   12d88:	moveq #2,d0
}
   12d8a:	rts

00012d8c <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   12d8c:	pea 19ad0 <talk.c.490538ff+0x1b4>
   12d92:	jsr 170d4 <KPrintF>
   12d98:	addq.l #4,sp

	return BR_CONTINUE;
   12d9a:	moveq #2,d0
}
   12d9c:	rts

00012d9e <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   12d9e:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   12da0:	             movea.l 16(sp),a0
   12da4:	             movea.l 24(a0),a0
   12da8:	             move.l (a0),d0
   12daa:	             moveq #1,d1
   12dac:	             cmp.l d0,d1
   12dae:	      ,----- beq.s 12df6 <builtIn_makeFastArray+0x58>
   12db0:	      |      moveq #6,d1
   12db2:	      |      cmp.l d0,d1
   12db4:	,-----|----- bne.s 12e34 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12db6:	|     |      movea.l 16(sp),a0
   12dba:	|     |      movea.l 24(a0),a0
   12dbe:	|     |      move.l 4(a0),d1
   12dc2:	|     |      moveq #28,d0
   12dc4:	|     |      add.l 16(sp),d0
   12dc8:	|     |      move.l d1,-(sp)
   12dca:	|     |      move.l d0,-(sp)
   12dcc:	|     |      jsr 146c2 <makeFastArrayFromStack>
   12dd2:	|     |      addq.l #8,sp
   12dd4:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12dd8:	|     |      moveq #24,d0
   12dda:	|     |      add.l 16(sp),d0
   12dde:	|     |      move.l d0,-(sp)
   12de0:	|     |      jsr 14f94 <trimStack>
   12de6:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12de8:	|     |      tst.w 6(sp)
   12dec:	|     |  ,-- beq.s 12df2 <builtIn_makeFastArray+0x54>
   12dee:	|     |  |   moveq #2,d0
   12df0:	|  ,--|--|-- bra.s 12e46 <builtIn_makeFastArray+0xa8>
   12df2:	|  |  |  '-> moveq #1,d0
   12df4:	|  +--|----- bra.s 12e46 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12df6:	|  |  '----> movea.l 16(sp),a0
   12dfa:	|  |         movea.l 24(a0),a0
   12dfe:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12e04:	|  |         moveq #24,d0
   12e06:	|  |         add.l 16(sp),d0
   12e0a:	|  |         move.l d0,-(sp)
   12e0c:	|  |         jsr 14f94 <trimStack>
   12e12:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12e14:	|  |         moveq #28,d0
   12e16:	|  |         add.l 16(sp),d0
   12e1a:	|  |         move.l 2(sp),-(sp)
   12e1e:	|  |         move.l d0,-(sp)
   12e20:	|  |         jsr 1472c <makeFastArraySize>
   12e26:	|  |         addq.l #8,sp
   12e28:	|  |         tst.w d0
   12e2a:	|  |     ,-- beq.s 12e30 <builtIn_makeFastArray+0x92>
   12e2c:	|  |     |   moveq #2,d0
   12e2e:	|  +-----|-- bra.s 12e46 <builtIn_makeFastArray+0xa8>
   12e30:	|  |     '-> moveq #1,d0
   12e32:	|  +-------- bra.s 12e46 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12e34:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12e36:	   |         pea 19af9 <talk.c.490538ff+0x1dd>
   12e3c:	   |         jsr 170d4 <KPrintF>
   12e42:	   |         addq.l #4,sp
	return BR_ERROR;
   12e44:	   |         moveq #1,d0
}
   12e46:	   '-------> addq.l #8,sp
   12e48:	             rts

00012e4a <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12e4a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e4c:	          movea.l 16(sp),a0
   12e50:	          move.l 24(a0),d0
   12e54:	          move.l d0,-(sp)
   12e56:	          pea 7 <_start+0x7>
   12e5a:	          move.l sp,d0
   12e5c:	          addq.l #8,d0
   12e5e:	          move.l d0,-(sp)
   12e60:	          jsr 14610 <getValueType>
   12e66:	          lea 12(sp),sp
   12e6a:	          tst.w d0
   12e6c:	      ,-- bne.s 12e72 <builtIn_getCharacterScale+0x28>
   12e6e:	      |   moveq #1,d0
   12e70:	,-----|-- bra.s 12eec <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12e72:	|     '-> moveq #24,d0
   12e74:	|         add.l 16(sp),d0
   12e78:	|         move.l d0,-(sp)
   12e7a:	|         jsr 14f94 <trimStack>
   12e80:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12e82:	|         move.l (sp),d0
   12e84:	|         move.l d0,-(sp)
   12e86:	|         jsr a474 <findPerson>
   12e8c:	|         addq.l #4,sp
   12e8e:	|         move.l d0,4(sp)
	if (pers) {
   12e92:	|  ,----- beq.s 12ed2 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12e94:	|  |      movea.l 4(sp),a0
   12e98:	|  |      move.l 32(a0),d0
   12e9c:	|  |      move.l #1120403456,-(sp)
   12ea2:	|  |      move.l d0,-(sp)
   12ea4:	|  |      jsr 175b8 <__mulsf3>
   12eaa:	|  |      addq.l #8,sp
   12eac:	|  |      move.l d0,-(sp)
   12eae:	|  |      jsr 1749e <__fixsfsi>
   12eb4:	|  |      addq.l #4,sp
   12eb6:	|  |      move.l d0,d1
   12eb8:	|  |      moveq #28,d0
   12eba:	|  |      add.l 16(sp),d0
   12ebe:	|  |      move.l d1,-(sp)
   12ec0:	|  |      pea 1 <_start+0x1>
   12ec4:	|  |      move.l d0,-(sp)
   12ec6:	|  |      jsr 14f02 <setVariable>
   12ecc:	|  |      lea 12(sp),sp
   12ed0:	|  |  ,-- bra.s 12eea <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ed2:	|  '--|-> moveq #28,d0
   12ed4:	|     |   add.l 16(sp),d0
   12ed8:	|     |   clr.l -(sp)
   12eda:	|     |   pea 1 <_start+0x1>
   12ede:	|     |   move.l d0,-(sp)
   12ee0:	|     |   jsr 14f02 <setVariable>
   12ee6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12eea:	|     '-> moveq #2,d0
}
   12eec:	'-------> addq.l #8,sp
   12eee:	          rts

00012ef0 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12ef0:	move.l 1c8b0 <gameSettings>,d0
   12ef6:	move.l d0,d1
   12ef8:	moveq #28,d0
   12efa:	add.l 8(sp),d0
   12efe:	move.l d1,-(sp)
   12f00:	pea 1 <_start+0x1>
   12f04:	move.l d0,-(sp)
   12f06:	jsr 14f02 <setVariable>
   12f0c:	lea 12(sp),sp
	return BR_CONTINUE;
   12f10:	moveq #2,d0
}
   12f12:	rts

00012f14 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12f14:	moveq #24,d0
   12f16:	add.l 8(sp),d0
   12f1a:	move.l d0,-(sp)
   12f1c:	jsr 14f94 <trimStack>
   12f22:	addq.l #4,sp
	trimStack (&fun -> stack);
   12f24:	moveq #24,d0
   12f26:	add.l 8(sp),d0
   12f2a:	move.l d0,-(sp)
   12f2c:	jsr 14f94 <trimStack>
   12f32:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12f34:	moveq #28,d0
   12f36:	add.l 8(sp),d0
   12f3a:	clr.l -(sp)
   12f3c:	pea 1 <_start+0x1>
   12f40:	move.l d0,-(sp)
   12f42:	jsr 14f02 <setVariable>
   12f48:	lea 12(sp),sp

	return BR_CONTINUE;
   12f4c:	moveq #2,d0

}
   12f4e:	rts

00012f50 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12f50:	move.l 1c150 <lastFramesPerSecond>,d1
   12f56:	moveq #28,d0
   12f58:	add.l 8(sp),d0
   12f5c:	move.l d1,-(sp)
   12f5e:	pea 1 <_start+0x1>
   12f62:	move.l d0,-(sp)
   12f64:	jsr 14f02 <setVariable>
   12f6a:	lea 12(sp),sp
	return BR_CONTINUE;
   12f6e:	moveq #2,d0
}
   12f70:	rts

00012f72 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12f72:	moveq #2,d0
}
   12f74:	rts

00012f76 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   12f76:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f7a:	          movea.l 60(sp),a0
   12f7e:	          move.l 24(a0),d0
   12f82:	          move.l d0,-(sp)
   12f84:	          pea 1 <_start+0x1>
   12f88:	          pea 1c6e2 <thumbHeight>
   12f8e:	          jsr 14610 <getValueType>
   12f94:	          lea 12(sp),sp
   12f98:	          tst.w d0
   12f9a:	      ,-- bne.s 12fa2 <builtIn_setThumbnailSize+0x2c>
   12f9c:	      |   moveq #1,d0
   12f9e:	,-----|-- bra.w 1305e <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12fa2:	|     '-> moveq #24,d0
   12fa4:	|         add.l 60(sp),d0
   12fa8:	|         move.l d0,-(sp)
   12faa:	|         jsr 14f94 <trimStack>
   12fb0:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12fb2:	|         movea.l 60(sp),a0
   12fb6:	|         move.l 24(a0),d0
   12fba:	|         move.l d0,-(sp)
   12fbc:	|         pea 1 <_start+0x1>
   12fc0:	|         pea 1c6de <thumbWidth>
   12fc6:	|         jsr 14610 <getValueType>
   12fcc:	|         lea 12(sp),sp
   12fd0:	|         tst.w d0
   12fd2:	|     ,-- bne.s 12fda <builtIn_setThumbnailSize+0x64>
   12fd4:	|     |   moveq #1,d0
   12fd6:	+-----|-- bra.w 1305e <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12fda:	|     '-> moveq #24,d0
   12fdc:	|         add.l 60(sp),d0
   12fe0:	|         move.l d0,-(sp)
   12fe2:	|         jsr 14f94 <trimStack>
   12fe8:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   12fea:	|         move.l 1c6de <thumbWidth>,d0
   12ff0:	|     ,-- bmi.s 1301e <builtIn_setThumbnailSize+0xa8>
   12ff2:	|     |   move.l 1c6e2 <thumbHeight>,d0
   12ff8:	|     +-- bmi.s 1301e <builtIn_setThumbnailSize+0xa8>
   12ffa:	|     |   move.l 1c6de <thumbWidth>,d0
   13000:	|     |   move.l d0,d1
   13002:	|     |   move.l 1c72c <winWidth>,d0
   13008:	|     |   cmp.l d1,d0
   1300a:	|     +-- bcs.s 1301e <builtIn_setThumbnailSize+0xa8>
   1300c:	|     |   move.l 1c6e2 <thumbHeight>,d0
   13012:	|     |   move.l d0,d1
   13014:	|     |   move.l 1c730 <winHeight>,d0
   1301a:	|     |   cmp.l d1,d0
   1301c:	|  ,--|-- bcc.s 1305c <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1301e:	|  |  '-> move.l 1c6e2 <thumbHeight>,d1
   13024:	|  |      move.l 1c6de <thumbWidth>,d0
   1302a:	|  |      move.l d1,-(sp)
   1302c:	|  |      move.l d0,-(sp)
   1302e:	|  |      pea 19b20 <talk.c.490538ff+0x204>
   13034:	|  |      lea 14(sp),a0
   13038:	|  |      move.l a0,-(sp)
   1303a:	|  |      jsr 13e1a <sprintf>
   13040:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   13044:	|  |      lea 2(sp),a0
   13048:	|  |      move.l a0,-(sp)
   1304a:	|  |      pea 19b28 <talk.c.490538ff+0x20c>
   13050:	|  |      jsr 170d4 <KPrintF>
   13056:	|  |      addq.l #8,sp
		return BR_ERROR;
   13058:	|  |      moveq #1,d0
   1305a:	+--|----- bra.s 1305e <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   1305c:	|  '----> moveq #2,d0
}
   1305e:	'-------> lea 52(sp),sp
   13062:	          rts

00013064 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   13064:	       lea -12(sp),sp
   13068:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1306a:	       movea.l 24(sp),a0
   1306e:	       move.l 24(a0),d0
   13072:	       move.l d0,-(sp)
   13074:	       pea 1 <_start+0x1>
   13078:	       lea 12(sp),a0
   1307c:	       move.l a0,-(sp)
   1307e:	       jsr 14610 <getValueType>
   13084:	       lea 12(sp),sp
   13088:	       tst.w d0
   1308a:	   ,-- bne.s 13092 <builtIn_hasFlag+0x2e>
   1308c:	   |   moveq #1,d0
   1308e:	,--|-- bra.w 13122 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13092:	|  '-> moveq #24,d0
   13094:	|      add.l 24(sp),d0
   13098:	|      move.l d0,-(sp)
   1309a:	|      jsr 14f94 <trimStack>
   130a0:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   130a2:	|      movea.l 24(sp),a0
   130a6:	|      move.l 24(a0),d0
   130aa:	|      move.l d0,-(sp)
   130ac:	|      pea 7 <_start+0x7>
   130b0:	|      moveq #16,d0
   130b2:	|      add.l sp,d0
   130b4:	|      move.l d0,-(sp)
   130b6:	|      jsr 14610 <getValueType>
   130bc:	|      lea 12(sp),sp
   130c0:	|      tst.w d0
   130c2:	|  ,-- bne.s 130c8 <builtIn_hasFlag+0x64>
   130c4:	|  |   moveq #1,d0
   130c6:	+--|-- bra.s 13122 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   130c8:	|  '-> moveq #24,d0
   130ca:	|      add.l 24(sp),d0
   130ce:	|      move.l d0,-(sp)
   130d0:	|      jsr 14f94 <trimStack>
   130d6:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   130d8:	|      move.l 8(sp),d0
   130dc:	|      move.l d0,-(sp)
   130de:	|      jsr d376 <findObjectType>
   130e4:	|      addq.l #4,sp
   130e6:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   130ea:	|  ,-- bne.s 130f0 <builtIn_hasFlag+0x8c>
   130ec:	|  |   moveq #1,d0
   130ee:	+--|-- bra.s 13122 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   130f0:	|  '-> movea.l 12(sp),a0
   130f4:	|      move.w 36(a0),d0
   130f8:	|      moveq #0,d2
   130fa:	|      move.w d0,d2
   130fc:	|      move.l 4(sp),d1
   13100:	|      moveq #1,d0
   13102:	|      lsl.l d1,d0
   13104:	|      move.l d2,d1
   13106:	|      and.l d0,d1
   13108:	|      moveq #28,d0
   1310a:	|      add.l 24(sp),d0
   1310e:	|      move.l d1,-(sp)
   13110:	|      pea 1 <_start+0x1>
   13114:	|      move.l d0,-(sp)
   13116:	|      jsr 14f02 <setVariable>
   1311c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13120:	|      moveq #2,d0
}
   13122:	'----> move.l (sp)+,d2
   13124:	       lea 12(sp),sp
   13128:	       rts

0001312a <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   1312a:	       jsr d364 <snapshot>
   13130:	       tst.w d0
   13132:	,----- beq.s 13138 <builtIn_snapshotGrab+0xe>
   13134:	|      moveq #2,d0
   13136:	|  ,-- bra.s 1313a <builtIn_snapshotGrab+0x10>
   13138:	'--|-> moveq #1,d0
}
   1313a:	   '-> rts

0001313c <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1313c:	jsr d210 <nosnapshot>
	return BR_CONTINUE;
   13142:	moveq #2,d0
}
   13144:	rts

00013146 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13146:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13148:	move.w 1c028 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13150:	movea.l 12(sp),a0
   13154:	move.l 24(a0),d0
   13158:	move.l d0,-(sp)
   1315a:	jsr 14b50 <getBoolean>
   13160:	addq.l #4,sp
   13162:	move.w d0,1c028 <allowAnyFilename>
	trimStack (&fun -> stack);
   13168:	moveq #24,d0
   1316a:	add.l 12(sp),d0
   1316e:	move.l d0,-(sp)
   13170:	jsr 14f94 <trimStack>
   13176:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13178:	movea.w 2(sp),a0
   1317c:	moveq #28,d0
   1317e:	add.l 12(sp),d0
   13182:	move.l a0,-(sp)
   13184:	pea 1 <_start+0x1>
   13188:	move.l d0,-(sp)
   1318a:	jsr 14f02 <setVariable>
   13190:	lea 12(sp),sp
	return BR_CONTINUE;
   13194:	moveq #2,d0
}
   13196:	addq.l #4,sp
   13198:	rts

0001319a <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   1319a:	moveq #24,d0
   1319c:	add.l 8(sp),d0
   131a0:	move.l d0,-(sp)
   131a2:	jsr 14f94 <trimStack>
   131a8:	addq.l #4,sp
	trimStack (&fun -> stack);
   131aa:	moveq #24,d0
   131ac:	add.l 8(sp),d0
   131b0:	move.l d0,-(sp)
   131b2:	jsr 14f94 <trimStack>
   131b8:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   131ba:	moveq #28,d0
   131bc:	add.l 8(sp),d0
   131c0:	clr.l -(sp)
   131c2:	pea 1 <_start+0x1>
   131c6:	move.l d0,-(sp)
   131c8:	jsr 14f02 <setVariable>
   131ce:	lea 12(sp),sp

	return BR_CONTINUE;
   131d2:	moveq #2,d0
}
   131d4:	rts

000131d6 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   131d6:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   131d8:	movea.l 12(sp),a0
   131dc:	move.l 24(a0),d0
   131e0:	move.l d0,-(sp)
   131e2:	jsr 14be6 <getTextFromAnyVar>
   131e8:	addq.l #4,sp
   131ea:	move.l d0,(sp)
	trimStack (&fun -> stack);
   131ec:	moveq #24,d0
   131ee:	add.l 12(sp),d0
   131f2:	move.l d0,-(sp)
   131f4:	jsr 14f94 <trimStack>
   131fa:	addq.l #4,sp
	KPrintF (mess);
   131fc:	move.l (sp),-(sp)
   131fe:	jsr 170d4 <KPrintF>
   13204:	addq.l #4,sp
	return BR_ERROR;
   13206:	moveq #1,d0
}
   13208:	addq.l #4,sp
   1320a:	rts

0001320c <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1320c:	moveq #24,d0
   1320e:	add.l 8(sp),d0
   13212:	move.l d0,-(sp)
   13214:	jsr 14f94 <trimStack>
   1321a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1321c:	moveq #24,d0
   1321e:	add.l 8(sp),d0
   13222:	move.l d0,-(sp)
   13224:	jsr 14f94 <trimStack>
   1322a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1322c:	moveq #24,d0
   1322e:	add.l 8(sp),d0
   13232:	move.l d0,-(sp)
   13234:	jsr 14f94 <trimStack>
   1323a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1323c:	moveq #24,d0
   1323e:	add.l 8(sp),d0
   13242:	move.l d0,-(sp)
   13244:	jsr 14f94 <trimStack>
   1324a:	addq.l #4,sp

	return BR_CONTINUE;
   1324c:	moveq #2,d0
}
   1324e:	rts

00013250 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13250:	moveq #24,d0
   13252:	add.l 8(sp),d0
   13256:	move.l d0,-(sp)
   13258:	jsr 14f94 <trimStack>
   1325e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13260:	moveq #24,d0
   13262:	add.l 8(sp),d0
   13266:	move.l d0,-(sp)
   13268:	jsr 14f94 <trimStack>
   1326e:	addq.l #4,sp
	trimStack (&fun -> stack);
   13270:	moveq #24,d0
   13272:	add.l 8(sp),d0
   13276:	move.l d0,-(sp)
   13278:	jsr 14f94 <trimStack>
   1327e:	addq.l #4,sp

	return BR_CONTINUE;
   13280:	moveq #2,d0

}
   13282:	rts

00013284 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13284:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13286:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1328c:	sne d0
   1328e:	neg.b d0
   13290:	moveq #0,d1
   13292:	move.b d0,d1
   13294:	moveq #28,d0
   13296:	add.l 12(sp),d0
   1329a:	move.l d1,-(sp)
   1329c:	pea 1 <_start+0x1>
   132a0:	move.l d0,-(sp)
   132a2:	jsr 14f02 <setVariable>
   132a8:	lea 12(sp),sp
	return BR_CONTINUE;
   132ac:	moveq #2,d0
}
   132ae:	addq.l #4,sp
   132b0:	rts

000132b2 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   132b2:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   132b4:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   132ba:	pea 19b3f <talk.c.490538ff+0x223>
   132c0:	jsr 170d4 <KPrintF>
   132c6:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   132c8:	tst.w 2(sp)
   132cc:	sne d0
   132ce:	neg.b d0
   132d0:	moveq #0,d1
   132d2:	move.b d0,d1
   132d4:	moveq #28,d0
   132d6:	add.l 12(sp),d0
   132da:	move.l d1,-(sp)
   132dc:	pea 1 <_start+0x1>
   132e0:	move.l d0,-(sp)
   132e2:	jsr 14f02 <setVariable>
   132e8:	lea 12(sp),sp
	return BR_CONTINUE;
   132ec:	moveq #2,d0
}
   132ee:	addq.l #4,sp
   132f0:	rts

000132f2 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   132f2:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   132f6:	             move.l 104(sp),d0
   132fa:	             cmpi.l #166,d0
   13300:	,----------- bhi.w 133e2 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   13304:	|            move.l 104(sp),d0
   13308:	|            add.l d0,d0
   1330a:	|            movea.l d0,a1
   1330c:	|            adda.l d0,a1
   1330e:	|            lea 1c16e <paramNum>,a0
   13314:	|            move.l (0,a1,a0.l),d0
   13318:	|            moveq #-1,d1
   1331a:	|            cmp.l d0,d1
   1331c:	|  ,-------- beq.w 133aa <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13320:	|  |         move.l 104(sp),d0
   13324:	|  |         add.l d0,d0
   13326:	|  |         movea.l d0,a1
   13328:	|  |         adda.l d0,a1
   1332a:	|  |         lea 1c16e <paramNum>,a0
   13330:	|  |         move.l (0,a1,a0.l),d0
   13334:	|  |         cmp.l 108(sp),d0
   13338:	|  +-------- beq.s 133aa <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   1333a:	|  |         move.l 104(sp),d0
   1333e:	|  |         add.l d0,d0
   13340:	|  |         movea.l d0,a1
   13342:	|  |         adda.l d0,a1
   13344:	|  |         lea 1c16e <paramNum>,a0
   1334a:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1334e:	|  |         moveq #1,d1
   13350:	|  |         cmp.l d0,d1
   13352:	|  |  ,----- bne.s 1335c <callBuiltIn+0x6a>
   13354:	|  |  |      move.l #100547,d0
   1335a:	|  |  |  ,-- bra.s 13362 <callBuiltIn+0x70>
   1335c:	|  |  '--|-> move.l #105333,d0
   13362:	|  |     '-> move.l 104(sp),d1
   13366:	|  |         add.l d1,d1
   13368:	|  |         movea.l d1,a1
   1336a:	|  |         adda.l d1,a1
   1336c:	|  |         lea 1c16e <paramNum>,a0
   13372:	|  |         move.l (0,a1,a0.l),d1
   13376:	|  |         move.l d0,-(sp)
   13378:	|  |         move.l d1,-(sp)
   1337a:	|  |         pea 19b77 <talk.c.490538ff+0x25b>
   13380:	|  |         lea 12(sp),a0
   13384:	|  |         move.l a0,-(sp)
   13386:	|  |         jsr 13e1a <sprintf>
   1338c:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13390:	|  |         movea.l sp,a0
   13392:	|  |         move.l a0,-(sp)
   13394:	|  |         jsr b8 <copyString>
   1339a:	|  |         addq.l #4,sp
   1339c:	|  |         move.l d0,-(sp)
   1339e:	|  |         jsr 170d4 <KPrintF>
   133a4:	|  |         addq.l #4,sp
				return BR_ERROR;
   133a6:	|  |         moveq #1,d0
   133a8:	|  |     ,-- bra.s 133f2 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   133aa:	|  '-----|-> move.l 104(sp),d0
   133ae:	|        |   add.l d0,d0
   133b0:	|        |   movea.l d0,a1
   133b2:	|        |   adda.l d0,a1
   133b4:	|        |   lea 1c40a <builtInFunctionArray>,a0
   133ba:	|        |   move.l (0,a1,a0.l),d0
   133be:	+--------|-- beq.s 133e2 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   133c0:	|        |   move.l 104(sp),d0
   133c4:	|        |   add.l d0,d0
   133c6:	|        |   movea.l d0,a1
   133c8:	|        |   adda.l d0,a1
   133ca:	|        |   lea 1c40a <builtInFunctionArray>,a0
   133d0:	|        |   movea.l (0,a1,a0.l),a0
   133d4:	|        |   move.l 112(sp),-(sp)
   133d8:	|        |   move.l 112(sp),-(sp)
   133dc:	|        |   jsr (a0)
   133de:	|        |   addq.l #8,sp
   133e0:	|        +-- bra.s 133f2 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   133e2:	'--------|-> pea 19ba2 <talk.c.490538ff+0x286>
   133e8:	         |   jsr 170d4 <KPrintF>
   133ee:	         |   addq.l #4,sp
	return BR_ERROR;
   133f0:	         |   moveq #1,d0
}
   133f2:	         '-> lea 100(sp),sp
   133f6:	             rts

000133f8 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   133f8:	          subq.l #8,sp
	int indexNum = -1;
   133fa:	          moveq #-1,d0
   133fc:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13400:	          clr.l (sp)
   13402:	   ,----- bra.s 13428 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13404:	,--|----> move.l 1c8a8 <languageTable>,d1
   1340a:	|  |      move.l (sp),d0
   1340c:	|  |      add.l d0,d0
   1340e:	|  |      add.l d0,d0
   13410:	|  |      movea.l d1,a0
   13412:	|  |      adda.l d0,a0
   13414:	|  |      move.l (a0),d0
   13416:	|  |      move.l d0,d1
   13418:	|  |      move.l 1c8b0 <gameSettings>,d0
   1341e:	|  |      cmp.l d1,d0
   13420:	|  |  ,-- bne.s 13426 <getLanguageForFileB+0x2e>
   13422:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13426:	|  |  '-> addq.l #1,(sp)
   13428:	|  '----> move.l 1c8b4 <gameSettings+0x4>,d0
   1342e:	|         cmp.l (sp),d0
   13430:	'-------- bcc.s 13404 <getLanguageForFileB+0xc>
	}

	return indexNum;
   13432:	          move.l 4(sp),d0
}
   13436:	          addq.l #8,sp
   13438:	          rts

0001343a <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   1343a:	          lea -20(sp),sp
   1343e:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13440:	          move.l 28(sp),-(sp)
   13444:	          jsr 13afc <strlen>
   1344a:	          addq.l #4,sp
   1344c:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13450:	          moveq #4,d0
   13452:	          cmp.l 12(sp),d0
   13456:	      ,-- bge.s 1347a <getPrefsFilename+0x40>
   13458:	      |   move.l 12(sp),d0
   1345c:	      |   subq.l #4,d0
   1345e:	      |   movea.l 28(sp),a0
   13462:	      |   adda.l d0,a0
   13464:	      |   move.b (a0),d0
   13466:	      |   cmpi.b #46,d0
   1346a:	      +-- bne.s 1347a <getPrefsFilename+0x40>
		filename[n-4] = 0;
   1346c:	      |   move.l 12(sp),d0
   13470:	      |   subq.l #4,d0
   13472:	      |   movea.l 28(sp),a0
   13476:	      |   adda.l d0,a0
   13478:	      |   clr.b (a0)
	}

	char * f = filename;
   1347a:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13480:	          clr.l 20(sp)
   13484:	   ,----- bra.s 134ac <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13486:	,--|----> move.l 20(sp),d0
   1348a:	|  |      movea.l 28(sp),a0
   1348e:	|  |      adda.l d0,a0
   13490:	|  |      move.b (a0),d0
   13492:	|  |      cmpi.b #47,d0
   13496:	|  |  ,-- bne.s 134a8 <getPrefsFilename+0x6e>
   13498:	|  |  |   move.l 20(sp),d0
   1349c:	|  |  |   addq.l #1,d0
   1349e:	|  |  |   move.l 28(sp),d1
   134a2:	|  |  |   add.l d0,d1
   134a4:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   134a8:	|  |  '-> addq.l #1,20(sp)
   134ac:	|  '----> move.l 20(sp),d0
   134b0:	|         cmp.l 12(sp),d0
   134b4:	'-------- blt.s 13486 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   134b6:	          pea 19bcd <talk.c.490538ff+0x2b1>
   134bc:	          move.l 20(sp),-(sp)
   134c0:	          jsr 13b3c <joinStrings>
   134c6:	          addq.l #8,sp
   134c8:	          move.l d0,8(sp)

	FreeVec(filename);
   134cc:	          move.l 28(sp),4(sp)
   134d2:	          move.l 1c7d8 <SysBase>,d0
   134d8:	          movea.l d0,a6
   134da:	          movea.l 4(sp),a1
   134de:	          jsr -690(a6)
	filename = NULL;
   134e2:	          clr.l 28(sp)
	return joined;
   134e6:	          move.l 8(sp),d0
}
   134ea:	          movea.l (sp)+,a6
   134ec:	          lea 20(sp),sp
   134f0:	          rts

000134f2 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   134f2:	             lea -28(sp),sp
   134f6:	             move.l a6,-(sp)
   134f8:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   134fa:	             move.l 1c8b4 <gameSettings+0x4>,d0
   13500:	             move.l d0,d1
   13502:	             addq.l #1,d1
   13504:	             move.l d1,28(sp)
   13508:	             clr.l 24(sp)
   1350c:	             move.l 1c7d8 <SysBase>,d0
   13512:	             movea.l d0,a6
   13514:	             move.l 28(sp),d0
   13518:	             move.l 24(sp),d1
   1351c:	             jsr -684(a6)
   13520:	             move.l d0,20(sp)
   13524:	             move.l 20(sp),d0
   13528:	             move.l d0,1c8a8 <languageTable>
    if( languageTable == 0) {
   1352e:	             move.l 1c8a8 <languageTable>,d0
   13534:	         ,-- bne.s 13544 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13536:	         |   pea 19bd2 <talk.c.490538ff+0x2b6>
   1353c:	         |   jsr 170d4 <KPrintF>
   13542:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13544:	         '-> move.l 1c8b4 <gameSettings+0x4>,d0
   1354a:	             move.l d0,d1
   1354c:	             addq.l #1,d1
   1354e:	             move.l d1,16(sp)
   13552:	             clr.l 12(sp)
   13556:	             move.l 1c7d8 <SysBase>,d0
   1355c:	             movea.l d0,a6
   1355e:	             move.l 16(sp),d0
   13562:	             move.l 12(sp),d1
   13566:	             jsr -684(a6)
   1356a:	             move.l d0,8(sp)
   1356e:	             move.l 8(sp),d0
   13572:	             move.l d0,1c8ac <languageName>
	if( languageName == 0) {
   13578:	             move.l 1c8ac <languageName>,d0
   1357e:	         ,-- bne.s 1358e <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13580:	         |   pea 19c08 <talk.c.490538ff+0x2ec>
   13586:	         |   jsr 170d4 <KPrintF>
   1358c:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1358e:	         '-> clr.l 32(sp)
   13592:	   ,-------- bra.s 1360a <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13594:	,--|-------> tst.l 32(sp)
   13598:	|  |  ,----- beq.s 135a8 <makeLanguageTable+0xb6>
   1359a:	|  |  |      move.l 40(sp),-(sp)
   1359e:	|  |  |      jsr 6bc <get2bytes>
   135a4:	|  |  |      addq.l #4,sp
   135a6:	|  |  |  ,-- bra.s 135aa <makeLanguageTable+0xb8>
   135a8:	|  |  '--|-> moveq #0,d0
   135aa:	|  |     '-> movea.l 1c8a8 <languageTable>,a0
   135b0:	|  |         move.l 32(sp),d1
   135b4:	|  |         add.l d1,d1
   135b6:	|  |         add.l d1,d1
   135b8:	|  |         adda.l d1,a0
   135ba:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   135bc:	|  |         move.l 1c8ac <languageName>,d1
   135c2:	|  |         move.l 32(sp),d0
   135c6:	|  |         add.l d0,d0
   135c8:	|  |         add.l d0,d0
   135ca:	|  |         movea.l d1,a0
   135cc:	|  |         adda.l d0,a0
   135ce:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   135d0:	|  |         move.l 1c782 <gameVersion>,d0
   135d6:	|  |         cmpi.l #511,d0
   135dc:	|  |     ,-- ble.s 13606 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   135de:	|  |     |   move.l 1c8b4 <gameSettings+0x4>,d0
   135e4:	|  |     +-- beq.s 13606 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   135e6:	|  |     |   move.l 1c8ac <languageName>,d1
   135ec:	|  |     |   move.l 32(sp),d0
   135f0:	|  |     |   add.l d0,d0
   135f2:	|  |     |   add.l d0,d0
   135f4:	|  |     |   movea.l d1,a2
   135f6:	|  |     |   adda.l d0,a2
   135f8:	|  |     |   move.l 40(sp),-(sp)
   135fc:	|  |     |   jsr b02 <readString>
   13602:	|  |     |   addq.l #4,sp
   13604:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13606:	|  |     '-> addq.l #1,32(sp)
   1360a:	|  '-------> move.l 1c8b4 <gameSettings+0x4>,d0
   13610:	|            cmp.l 32(sp),d0
   13614:	'----------- bcc.w 13594 <makeLanguageTable+0xa2>
		}
	}
}
   13618:	             nop
   1361a:	             nop
   1361c:	             movea.l (sp)+,a2
   1361e:	             movea.l (sp)+,a6
   13620:	             lea 28(sp),sp
   13624:	             rts

00013626 <readIniFile>:

void readIniFile (char * filename) {
   13626:	                      lea -564(sp),sp
   1362a:	                      move.l a6,-(sp)
   1362c:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1362e:	                      move.l 576(sp),-(sp)
   13632:	                      jsr b8 <copyString>
   13638:	                      addq.l #4,sp
   1363a:	                      move.l d0,-(sp)
   1363c:	                      jsr 1343a <getPrefsFilename>
   13642:	                      addq.l #4,sp
   13644:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13648:	                      move.l 562(sp),558(sp)
   1364e:	                      move.l #1005,554(sp)
   13656:	                      move.l 1c7e0 <DOSBase>,d0
   1365c:	                      movea.l d0,a6
   1365e:	                      move.l 558(sp),d1
   13662:	                      move.l 554(sp),d2
   13666:	                      jsr -30(a6)
   1366a:	                      move.l d0,550(sp)
   1366e:	                      move.l 550(sp),d0
   13672:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13676:	                      clr.l 1c8b0 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   1367c:	                      move.w #1,1c8b8 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13684:	                      clr.l 1c8ba <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   1368a:	                      moveq #1,d0
   1368c:	                      move.l d0,1c8be <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13692:	                      clr.w 1c8c2 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13698:	                      clr.w 1c8c4 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   1369e:	                      clr.w 1c8c6 <gameSettings+0x16>

	FreeVec(langName);
   136a4:	                      move.l 562(sp),542(sp)
   136aa:	                      move.l 1c7d8 <SysBase>,d0
   136b0:	                      movea.l d0,a6
   136b2:	                      movea.l 542(sp),a1
   136b6:	                      jsr -690(a6)
	langName = NULL;
   136ba:	                      clr.l 562(sp)

	if (fp) {
   136be:	                      tst.l 546(sp)
   136c2:	,-------------------- beq.w 139a0 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   136c6:	|                     move.l sp,d0
   136c8:	|                     addi.l #265,d0
   136ce:	|                     move.l #257,d1
   136d4:	|                     move.l d1,-(sp)
   136d6:	|                     clr.l -(sp)
   136d8:	|                     move.l d0,-(sp)
   136da:	|                     jsr 17058 <memset>
   136e0:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   136e4:	|                     move.l sp,d0
   136e6:	|                     addq.l #8,d0
   136e8:	|                     move.l #257,d1
   136ee:	|                     move.l d1,-(sp)
   136f0:	|                     clr.l -(sp)
   136f2:	|                     move.l d0,-(sp)
   136f4:	|                     jsr 17058 <memset>
   136fa:	|                     lea 12(sp),sp
		unsigned char here = 0;
   136fe:	|                     clr.b 571(sp)
		char readChar = ' ';
   13702:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13708:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   1370e:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13712:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13716:	|  ,----------------> move.l 546(sp),534(sp)
   1371c:	|  |                  move.l 1c7e0 <DOSBase>,d0
   13722:	|  |                  movea.l d0,a6
   13724:	|  |                  move.l 534(sp),d1
   13728:	|  |                  jsr -306(a6)
   1372c:	|  |                  move.l d0,530(sp)
   13730:	|  |                  move.l 530(sp),d0
   13734:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13738:	|  |                  moveq #-1,d1
   1373a:	|  |                  cmp.l 538(sp),d1
   1373e:	|  |           ,----- bne.s 1374c <readIniFile+0x126>
				readChar = '\n';
   13740:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13746:	|  |           |      clr.w 568(sp)
   1374a:	|  |           |  ,-- bra.s 13752 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1374c:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13752:	|  |              '-> move.b 570(sp),d0
   13756:	|  |                  ext.w d0
   13758:	|  |                  movea.w d0,a0
   1375a:	|  |                  moveq #61,d0
   1375c:	|  |                  cmp.l a0,d0
   1375e:	|  |     ,----------- beq.w 13908 <readIniFile+0x2e2>
   13762:	|  |     |            moveq #61,d1
   13764:	|  |     |            cmp.l a0,d1
   13766:	|  |  ,--|----------- blt.w 13914 <readIniFile+0x2ee>
   1376a:	|  |  |  |            moveq #10,d0
   1376c:	|  |  |  |            cmp.l a0,d0
   1376e:	|  |  |  |        ,-- beq.s 13778 <readIniFile+0x152>
   13770:	|  |  |  |        |   moveq #13,d1
   13772:	|  |  |  |        |   cmp.l a0,d1
   13774:	|  |  +--|--------|-- bne.w 13914 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13778:	|  |  |  |        '-> tst.w 566(sp)
   1377c:	|  |  |  |     ,----- beq.w 138f6 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13780:	|  |  |  |     |      pea 19c3c <talk.c.490538ff+0x320>
   13786:	|  |  |  |     |      move.l sp,d0
   13788:	|  |  |  |     |      addi.l #269,d0
   1378e:	|  |  |  |     |      move.l d0,-(sp)
   13790:	|  |  |  |     |      jsr 13abc <strcmp>
   13796:	|  |  |  |     |      addq.l #8,sp
   13798:	|  |  |  |     |      tst.l d0
   1379a:	|  |  |  |     |  ,-- bne.s 137b4 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   1379c:	|  |  |  |     |  |   move.l sp,d0
   1379e:	|  |  |  |     |  |   addq.l #8,d0
   137a0:	|  |  |  |     |  |   move.l d0,-(sp)
   137a2:	|  |  |  |     |  |   jsr 139ac <stringToInt>
   137a8:	|  |  |  |     |  |   addq.l #4,sp
   137aa:	|  |  |  |     |  |   move.l d0,1c8b0 <gameSettings>
   137b0:	|  |  |  |     +--|-- bra.w 138f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   137b4:	|  |  |  |     |  '-> pea 19c45 <talk.c.490538ff+0x329>
   137ba:	|  |  |  |     |      move.l sp,d0
   137bc:	|  |  |  |     |      addi.l #269,d0
   137c2:	|  |  |  |     |      move.l d0,-(sp)
   137c4:	|  |  |  |     |      jsr 13abc <strcmp>
   137ca:	|  |  |  |     |      addq.l #8,sp
   137cc:	|  |  |  |     |      tst.l d0
   137ce:	|  |  |  |     |  ,-- bne.s 137f4 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   137d0:	|  |  |  |     |  |   move.l sp,d0
   137d2:	|  |  |  |     |  |   addq.l #8,d0
   137d4:	|  |  |  |     |  |   move.l d0,-(sp)
   137d6:	|  |  |  |     |  |   jsr 139ac <stringToInt>
   137dc:	|  |  |  |     |  |   addq.l #4,sp
   137de:	|  |  |  |     |  |   tst.l d0
   137e0:	|  |  |  |     |  |   seq d0
   137e2:	|  |  |  |     |  |   neg.b d0
   137e4:	|  |  |  |     |  |   move.b d0,d0
   137e6:	|  |  |  |     |  |   andi.w #255,d0
   137ea:	|  |  |  |     |  |   move.w d0,1c8b8 <gameSettings+0x8>
   137f0:	|  |  |  |     +--|-- bra.w 138f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   137f4:	|  |  |  |     |  '-> pea 19c4c <talk.c.490538ff+0x330>
   137fa:	|  |  |  |     |      move.l sp,d0
   137fc:	|  |  |  |     |      addi.l #269,d0
   13802:	|  |  |  |     |      move.l d0,-(sp)
   13804:	|  |  |  |     |      jsr 13abc <strcmp>
   1380a:	|  |  |  |     |      addq.l #8,sp
   1380c:	|  |  |  |     |      tst.l d0
   1380e:	|  |  |  |     |  ,-- bne.s 13828 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13810:	|  |  |  |     |  |   move.l sp,d0
   13812:	|  |  |  |     |  |   addq.l #8,d0
   13814:	|  |  |  |     |  |   move.l d0,-(sp)
   13816:	|  |  |  |     |  |   jsr 139ac <stringToInt>
   1381c:	|  |  |  |     |  |   addq.l #4,sp
   1381e:	|  |  |  |     |  |   move.l d0,1c8ba <gameSettings+0xa>
   13824:	|  |  |  |     +--|-- bra.w 138f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13828:	|  |  |  |     |  '-> pea 19c54 <talk.c.490538ff+0x338>
   1382e:	|  |  |  |     |      move.l sp,d0
   13830:	|  |  |  |     |      addi.l #269,d0
   13836:	|  |  |  |     |      move.l d0,-(sp)
   13838:	|  |  |  |     |      jsr 13abc <strcmp>
   1383e:	|  |  |  |     |      addq.l #8,sp
   13840:	|  |  |  |     |      tst.l d0
   13842:	|  |  |  |     |  ,-- bne.s 1385c <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13844:	|  |  |  |     |  |   move.l sp,d0
   13846:	|  |  |  |     |  |   addq.l #8,d0
   13848:	|  |  |  |     |  |   move.l d0,-(sp)
   1384a:	|  |  |  |     |  |   jsr 139ac <stringToInt>
   13850:	|  |  |  |     |  |   addq.l #4,sp
   13852:	|  |  |  |     |  |   move.l d0,1c8be <gameSettings+0xe>
   13858:	|  |  |  |     +--|-- bra.w 138f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   1385c:	|  |  |  |     |  '-> pea 19c5e <talk.c.490538ff+0x342>
   13862:	|  |  |  |     |      move.l sp,d0
   13864:	|  |  |  |     |      addi.l #269,d0
   1386a:	|  |  |  |     |      move.l d0,-(sp)
   1386c:	|  |  |  |     |      jsr 13abc <strcmp>
   13872:	|  |  |  |     |      addq.l #8,sp
   13874:	|  |  |  |     |      tst.l d0
   13876:	|  |  |  |     |  ,-- bne.s 13890 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13878:	|  |  |  |     |  |   move.l sp,d0
   1387a:	|  |  |  |     |  |   addq.l #8,d0
   1387c:	|  |  |  |     |  |   move.l d0,-(sp)
   1387e:	|  |  |  |     |  |   jsr 139ac <stringToInt>
   13884:	|  |  |  |     |  |   addq.l #4,sp
   13886:	|  |  |  |     |  |   move.l d0,d0
   13888:	|  |  |  |     |  |   move.w d0,1c8c2 <gameSettings+0x12>
   1388e:	|  |  |  |     +--|-- bra.s 138f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13890:	|  |  |  |     |  '-> pea 19c6a <talk.c.490538ff+0x34e>
   13896:	|  |  |  |     |      move.l sp,d0
   13898:	|  |  |  |     |      addi.l #269,d0
   1389e:	|  |  |  |     |      move.l d0,-(sp)
   138a0:	|  |  |  |     |      jsr 13abc <strcmp>
   138a6:	|  |  |  |     |      addq.l #8,sp
   138a8:	|  |  |  |     |      tst.l d0
   138aa:	|  |  |  |     |  ,-- bne.s 138c4 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   138ac:	|  |  |  |     |  |   move.l sp,d0
   138ae:	|  |  |  |     |  |   addq.l #8,d0
   138b0:	|  |  |  |     |  |   move.l d0,-(sp)
   138b2:	|  |  |  |     |  |   jsr 139ac <stringToInt>
   138b8:	|  |  |  |     |  |   addq.l #4,sp
   138ba:	|  |  |  |     |  |   move.l d0,d0
   138bc:	|  |  |  |     |  |   move.w d0,1c8c4 <gameSettings+0x14>
   138c2:	|  |  |  |     +--|-- bra.s 138f6 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   138c4:	|  |  |  |     |  '-> pea 19c78 <talk.c.490538ff+0x35c>
   138ca:	|  |  |  |     |      move.l sp,d0
   138cc:	|  |  |  |     |      addi.l #269,d0
   138d2:	|  |  |  |     |      move.l d0,-(sp)
   138d4:	|  |  |  |     |      jsr 13abc <strcmp>
   138da:	|  |  |  |     |      addq.l #8,sp
   138dc:	|  |  |  |     |      tst.l d0
   138de:	|  |  |  |     +----- bne.s 138f6 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   138e0:	|  |  |  |     |      move.l sp,d0
   138e2:	|  |  |  |     |      addq.l #8,d0
   138e4:	|  |  |  |     |      move.l d0,-(sp)
   138e6:	|  |  |  |     |      jsr 139ac <stringToInt>
   138ec:	|  |  |  |     |      addq.l #4,sp
   138ee:	|  |  |  |     |      move.l d0,d0
   138f0:	|  |  |  |     |      move.w d0,1c8c6 <gameSettings+0x16>
					}
				}
				here = 0;
   138f6:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   138fa:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   138fe:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13902:	|  |  |  |            clr.b 8(sp)
				break;
   13906:	|  |  |  |  ,-------- bra.s 1397e <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13908:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   1390e:	|  |  |     |         clr.b 571(sp)
				break;
   13912:	|  |  |     +-------- bra.s 1397e <readIniFile+0x358>

				default:
				if (doingSecond) {
   13914:	|  |  '-----|-------> tst.w 566(sp)
   13918:	|  |        |  ,----- beq.s 1394c <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   1391a:	|  |        |  |      move.b 571(sp),d0
   1391e:	|  |        |  |      move.b d0,d1
   13920:	|  |        |  |      addq.b #1,d1
   13922:	|  |        |  |      move.b d1,571(sp)
   13926:	|  |        |  |      move.b d0,d0
   13928:	|  |        |  |      andi.l #255,d0
   1392e:	|  |        |  |      lea 572(sp),a0
   13932:	|  |        |  |      adda.l d0,a0
   13934:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   1393a:	|  |        |  |      moveq #0,d0
   1393c:	|  |        |  |      move.b 571(sp),d0
   13940:	|  |        |  |      lea 572(sp),a0
   13944:	|  |        |  |      adda.l d0,a0
   13946:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   1394a:	|  |        |  |  ,-- bra.s 1397c <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   1394c:	|  |        |  '--|-> move.b 571(sp),d0
   13950:	|  |        |     |   move.b d0,d1
   13952:	|  |        |     |   addq.b #1,d1
   13954:	|  |        |     |   move.b d1,571(sp)
   13958:	|  |        |     |   move.b d0,d0
   1395a:	|  |        |     |   andi.l #255,d0
   13960:	|  |        |     |   lea 572(sp),a0
   13964:	|  |        |     |   adda.l d0,a0
   13966:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   1396c:	|  |        |     |   moveq #0,d0
   1396e:	|  |        |     |   move.b 571(sp),d0
   13972:	|  |        |     |   lea 572(sp),a0
   13976:	|  |        |     |   adda.l d0,a0
   13978:	|  |        |     |   clr.b -307(a0)
				break;
   1397c:	|  |        |     '-> nop
			}
		} while (keepGoing);
   1397e:	|  |        '-------> tst.w 568(sp)
   13982:	|  '----------------- bne.w 13716 <readIniFile+0xf0>

		Close(fp);
   13986:	|                     move.l 546(sp),526(sp)
   1398c:	|                     move.l 1c7e0 <DOSBase>,d0
   13992:	|                     movea.l d0,a6
   13994:	|                     move.l 526(sp),d1
   13998:	|                     jsr -36(a6)
   1399c:	|                     move.l d0,522(sp)
	}
}
   139a0:	'-------------------> nop
   139a2:	                      move.l (sp)+,d2
   139a4:	                      movea.l (sp)+,a6
   139a6:	                      lea 564(sp),sp
   139aa:	                      rts

000139ac <stringToInt>:

unsigned int stringToInt (char * s) {
   139ac:	             subq.l #8,sp
	int i = 0;
   139ae:	             clr.l 4(sp)
	BOOL negative = FALSE;
   139b2:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   139b6:	,----------> movea.l 12(sp),a0
   139ba:	|            move.b (a0),d0
   139bc:	|            cmpi.b #47,d0
   139c0:	|        ,-- ble.s 139f8 <stringToInt+0x4c>
   139c2:	|        |   movea.l 12(sp),a0
   139c6:	|        |   move.b (a0),d0
   139c8:	|        |   cmpi.b #57,d0
   139cc:	|        +-- bgt.s 139f8 <stringToInt+0x4c>
			i *= 10;
   139ce:	|        |   move.l 4(sp),d1
   139d2:	|        |   move.l d1,d0
   139d4:	|        |   add.l d0,d0
   139d6:	|        |   add.l d0,d0
   139d8:	|        |   add.l d1,d0
   139da:	|        |   add.l d0,d0
   139dc:	|        |   move.l d0,4(sp)
			i += *s - '0';
   139e0:	|        |   movea.l 12(sp),a0
   139e4:	|        |   move.b (a0),d0
   139e6:	|        |   ext.w d0
   139e8:	|        |   movea.w d0,a0
   139ea:	|        |   moveq #-48,d0
   139ec:	|        |   add.l a0,d0
   139ee:	|        |   add.l d0,4(sp)
			s ++;
   139f2:	|        |   addq.l #1,12(sp)
   139f6:	|  ,-----|-- bra.s 13a30 <stringToInt+0x84>
		} else if (*s == '-') {
   139f8:	|  |     '-> movea.l 12(sp),a0
   139fc:	|  |         move.b (a0),d0
   139fe:	|  |         cmpi.b #45,d0
   13a02:	|  |     ,-- bne.s 13a1c <stringToInt+0x70>
			negative = ! negative;
   13a04:	|  |     |   tst.w 2(sp)
   13a08:	|  |     |   seq d0
   13a0a:	|  |     |   neg.b d0
   13a0c:	|  |     |   move.b d0,d0
   13a0e:	|  |     |   andi.w #255,d0
   13a12:	|  |     |   move.w d0,2(sp)
			s++;
   13a16:	|  |     |   addq.l #1,12(sp)
   13a1a:	+--|-----|-- bra.s 139b6 <stringToInt+0xa>
		} else {
			if (negative)
   13a1c:	|  |     '-> tst.w 2(sp)
   13a20:	|  |     ,-- beq.s 13a2a <stringToInt+0x7e>
				return -i;
   13a22:	|  |     |   move.l 4(sp),d0
   13a26:	|  |     |   neg.l d0
   13a28:	|  |  ,--|-- bra.s 13a32 <stringToInt+0x86>
			return i;
   13a2a:	|  |  |  '-> move.l 4(sp),d0
   13a2e:	|  |  +----- bra.s 13a32 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13a30:	'--'--|----X bra.s 139b6 <stringToInt+0xa>
		}
	}
   13a32:	      '----> addq.l #8,sp
   13a34:	             rts

00013a36 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13a36:	    lea -28(sp),sp
   13a3a:	    move.l a6,-(sp)
   13a3c:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13a3e:	    pea 19c82 <talk.c.490538ff+0x366>
   13a44:	    jsr 170d4 <KPrintF>
   13a4a:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13a4c:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13a50:	    move.l 40(sp),30(sp)
   13a56:	    move.l #1005,26(sp)
   13a5e:	    move.l 1c7e0 <DOSBase>,d0
   13a64:	    movea.l d0,a6
   13a66:	    move.l 30(sp),d1
   13a6a:	    move.l 26(sp),d2
   13a6e:	    jsr -30(a6)
   13a72:	    move.l d0,22(sp)
   13a76:	    move.l 22(sp),d0
   13a7a:	    move.l d0,18(sp)
	if (tester) {
   13a7e:	,-- beq.s 13aae <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13a80:	|   pea 19c9c <talk.c.490538ff+0x380>
   13a86:	|   jsr 170d4 <KPrintF>
   13a8c:	|   addq.l #4,sp
		retval = 1;
   13a8e:	|   move.b #1,35(sp)
		Close(tester);
   13a94:	|   move.l 18(sp),14(sp)
   13a9a:	|   move.l 1c7e0 <DOSBase>,d0
   13aa0:	|   movea.l d0,a6
   13aa2:	|   move.l 14(sp),d1
   13aa6:	|   jsr -36(a6)
   13aaa:	|   move.l d0,10(sp)
	}
	return retval;
   13aae:	'-> move.b 35(sp),d0
   13ab2:	    move.l (sp)+,d2
   13ab4:	    movea.l (sp)+,a6
   13ab6:	    lea 28(sp),sp
   13aba:	    rts

00013abc <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13abc:	   ,-- bra.s 13ac6 <strcmp+0xa>
    {
        s1++;
   13abe:	,--|-> addq.l #1,4(sp)
        s2++;
   13ac2:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13ac6:	|  '-> movea.l 4(sp),a0
   13aca:	|      move.b (a0),d0
   13acc:	|  ,-- beq.s 13ade <strcmp+0x22>
   13ace:	|  |   movea.l 4(sp),a0
   13ad2:	|  |   move.b (a0),d1
   13ad4:	|  |   movea.l 8(sp),a0
   13ad8:	|  |   move.b (a0),d0
   13ada:	|  |   cmp.b d1,d0
   13adc:	'--|-- beq.s 13abe <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13ade:	   '-> movea.l 4(sp),a0
   13ae2:	       move.b (a0),d0
   13ae4:	       moveq #0,d1
   13ae6:	       move.b d0,d1
   13ae8:	       movea.l 8(sp),a0
   13aec:	       move.b (a0),d0
   13aee:	       move.b d0,d0
   13af0:	       andi.l #255,d0
   13af6:	       sub.l d0,d1
   13af8:	       move.l d1,d0
}
   13afa:	       rts

00013afc <strlen>:

long unsigned int strlen (const char *s) 
{  
   13afc:	       subq.l #4,sp
	long unsigned int i = 0;
   13afe:	       clr.l (sp)
	while(s[i]) i++; 
   13b00:	   ,-- bra.s 13b04 <strlen+0x8>
   13b02:	,--|-> addq.l #1,(sp)
   13b04:	|  '-> movea.l 8(sp),a0
   13b08:	|      adda.l (sp),a0
   13b0a:	|      move.b (a0),d0
   13b0c:	'----- bne.s 13b02 <strlen+0x6>
	return(i);
   13b0e:	       move.l (sp),d0
}
   13b10:	       addq.l #4,sp
   13b12:	       rts

00013b14 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13b14:	    nop
   13b16:	,-> move.l 8(sp),d0
   13b1a:	|   move.l d0,d1
   13b1c:	|   addq.l #1,d1
   13b1e:	|   move.l d1,8(sp)
   13b22:	|   movea.l 4(sp),a0
   13b26:	|   lea 1(a0),a1
   13b2a:	|   move.l a1,4(sp)
   13b2e:	|   movea.l d0,a1
   13b30:	|   move.b (a1),d0
   13b32:	|   move.b d0,(a0)
   13b34:	|   move.b (a0),d0
   13b36:	'-- bne.s 13b16 <strcpy+0x2>
}
   13b38:	    nop
   13b3a:	    rts

00013b3c <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13b3c:	    lea -20(sp),sp
   13b40:	    move.l a6,-(sp)
   13b42:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13b44:	    move.l 32(sp),-(sp)
   13b48:	    jsr 13afc <strlen>
   13b4e:	    addq.l #4,sp
   13b50:	    move.l d0,d2
   13b52:	    move.l 36(sp),-(sp)
   13b56:	    jsr 13afc <strlen>
   13b5c:	    addq.l #4,sp
   13b5e:	    add.l d2,d0
   13b60:	    move.l d0,d1
   13b62:	    addq.l #1,d1
   13b64:	    move.l d1,20(sp)
   13b68:	    clr.l 16(sp)
   13b6c:	    move.l 1c7d8 <SysBase>,d0
   13b72:	    movea.l d0,a6
   13b74:	    move.l 20(sp),d0
   13b78:	    move.l 16(sp),d1
   13b7c:	    jsr -684(a6)
   13b80:	    move.l d0,12(sp)
   13b84:	    move.l 12(sp),d0
   13b88:	    move.l d0,8(sp)
	char * t = newString;
   13b8c:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13b92:	    nop
   13b94:	,-> move.l 32(sp),d0
   13b98:	|   move.l d0,d1
   13b9a:	|   addq.l #1,d1
   13b9c:	|   move.l d1,32(sp)
   13ba0:	|   movea.l 24(sp),a0
   13ba4:	|   lea 1(a0),a1
   13ba8:	|   move.l a1,24(sp)
   13bac:	|   movea.l d0,a1
   13bae:	|   move.b (a1),d0
   13bb0:	|   move.b d0,(a0)
   13bb2:	|   move.b (a0),d0
   13bb4:	'-- bne.s 13b94 <joinStrings+0x58>
	t--;
   13bb6:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13bba:	    nop
   13bbc:	,-> move.l 36(sp),d0
   13bc0:	|   move.l d0,d1
   13bc2:	|   addq.l #1,d1
   13bc4:	|   move.l d1,36(sp)
   13bc8:	|   movea.l 24(sp),a0
   13bcc:	|   lea 1(a0),a1
   13bd0:	|   move.l a1,24(sp)
   13bd4:	|   movea.l d0,a1
   13bd6:	|   move.b (a1),d0
   13bd8:	|   move.b d0,(a0)
   13bda:	|   move.b (a0),d0
   13bdc:	'-- bne.s 13bbc <joinStrings+0x80>

	return newString;
   13bde:	    move.l 8(sp),d0
}
   13be2:	    move.l (sp)+,d2
   13be4:	    movea.l (sp)+,a6
   13be6:	    lea 20(sp),sp
   13bea:	    rts

00013bec <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13bec:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13bf0:	       moveq #10,d0
   13bf2:	       cmp.l 28(sp),d0
   13bf6:	   ,-- bne.s 13c14 <itoa+0x28>
   13bf8:	   |   tst.l 20(sp)
   13bfc:	   +-- bge.s 13c14 <itoa+0x28>
        *str++ = '-';
   13bfe:	   |   move.l 24(sp),d0
   13c02:	   |   move.l d0,d1
   13c04:	   |   addq.l #1,d1
   13c06:	   |   move.l d1,24(sp)
   13c0a:	   |   movea.l d0,a0
   13c0c:	   |   move.b #45,(a0)
        value *= -1;
   13c10:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13c14:	   '-> move.l 24(sp),12(sp)
   13c1a:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13c20:	   ,-> move.l 20(sp),d0
   13c24:	   |   move.l 28(sp),-(sp)
   13c28:	   |   move.l d0,-(sp)
   13c2a:	   |   jsr 17b0c <__modsi3>
   13c30:	   |   addq.l #8,sp
   13c32:	   |   movea.l d0,a1
   13c34:	   |   move.l 12(sp),d0
   13c38:	   |   move.l d0,d1
   13c3a:	   |   addq.l #1,d1
   13c3c:	   |   move.l d1,12(sp)
   13c40:	   |   lea 19cb4 <talk.c.490538ff+0x398>,a0
   13c46:	   |   move.b (0,a1,a0.l),d1
   13c4a:	   |   movea.l d0,a0
   13c4c:	   |   move.b d1,(a0)
        value /= base;
   13c4e:	   |   move.l 28(sp),-(sp)
   13c52:	   |   move.l 24(sp),-(sp)
   13c56:	   |   jsr 17ade <__divsi3>
   13c5c:	   |   addq.l #8,sp
   13c5e:	   |   move.l d0,20(sp)
    } while (value);
   13c62:	   '-- bne.s 13c20 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13c64:	       move.l 12(sp),d0
   13c68:	       move.l d0,d1
   13c6a:	       subq.l #1,d1
   13c6c:	       move.l d1,12(sp)
   13c70:	       movea.l d0,a0
   13c72:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13c74:	       move.l 4(sp),8(sp)
   13c7a:	   ,-- bra.s 13ca0 <itoa+0xb4>
        char temp = *low;
   13c7c:	,--|-> movea.l 8(sp),a0
   13c80:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13c84:	|  |   movea.l 12(sp),a0
   13c88:	|  |   move.b (a0),d0
   13c8a:	|  |   movea.l 8(sp),a0
   13c8e:	|  |   move.b d0,(a0)
        *ptr = temp;
   13c90:	|  |   movea.l 12(sp),a0
   13c94:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13c98:	|  |   addq.l #1,8(sp)
   13c9c:	|  |   subq.l #1,12(sp)
   13ca0:	|  '-> move.l 8(sp),d0
   13ca4:	|      cmp.l 12(sp),d0
   13ca8:	'----- bcs.s 13c7c <itoa+0x90>
    }
    return rc;
   13caa:	       move.l 4(sp),d0
}
   13cae:	       lea 16(sp),sp
   13cb2:	       rts

00013cb4 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13cb4:	                            lea -40(sp),sp
   13cb8:	                            move.l d2,-(sp)
    char* s = str;
   13cba:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13cc0:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13cc6:	   ,----------------------- bra.w 13dfa <vsprintf2+0x146>
        if (*p == '%') {
   13cca:	,--|----------------------> movea.l 36(sp),a0
   13cce:	|  |                        move.b (a0),d0
   13cd0:	|  |                        cmpi.b #37,d0
   13cd4:	|  |  ,-------------------- bne.w 13de0 <vsprintf2+0x12c>
            switch (*++p) {
   13cd8:	|  |  |                     addq.l #1,36(sp)
   13cdc:	|  |  |                     movea.l 36(sp),a0
   13ce0:	|  |  |                     move.b (a0),d0
   13ce2:	|  |  |                     ext.w d0
   13ce4:	|  |  |                     movea.w d0,a0
   13ce6:	|  |  |                     moveq #115,d0
   13ce8:	|  |  |                     cmp.l a0,d0
   13cea:	|  |  |           ,-------- beq.s 13d62 <vsprintf2+0xae>
   13cec:	|  |  |           |         moveq #115,d1
   13cee:	|  |  |           |         cmp.l a0,d1
   13cf0:	|  |  |  ,--------|-------- blt.w 13dc8 <vsprintf2+0x114>
   13cf4:	|  |  |  |        |         moveq #99,d2
   13cf6:	|  |  |  |        |         cmp.l a0,d2
   13cf8:	|  |  |  |  ,-----|-------- beq.w 13da0 <vsprintf2+0xec>
   13cfc:	|  |  |  |  |     |         moveq #100,d0
   13cfe:	|  |  |  |  |     |         cmp.l a0,d0
   13d00:	|  |  |  +--|-----|-------- bne.w 13dc8 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13d04:	|  |  |  |  |     |         addq.l #4,56(sp)
   13d08:	|  |  |  |  |     |         movea.l 56(sp),a0
   13d0c:	|  |  |  |  |     |         move.l (a0),d0
   13d0e:	|  |  |  |  |     |         move.l d0,d1
   13d10:	|  |  |  |  |     |         subq.l #1,d1
   13d12:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13d16:	|  |  |  |  |     |         pea a <_start+0xa>
   13d1a:	|  |  |  |  |     |         lea 8(sp),a0
   13d1e:	|  |  |  |  |     |         move.l a0,-(sp)
   13d20:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13d24:	|  |  |  |  |     |         jsr 13bec <itoa>
   13d2a:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13d2e:	|  |  |  |  |     |         lea 44(sp),a0
   13d32:	|  |  |  |  |     |         lea -40(a0),a0
   13d36:	|  |  |  |  |     |         move.l a0,28(sp)
   13d3a:	|  |  |  |  |     |     ,-- bra.s 13d56 <vsprintf2+0xa2>
                        *s++ = *b;
   13d3c:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   13d40:	|  |  |  |  |     |  |  |   move.l d0,d1
   13d42:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13d44:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13d48:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   13d4c:	|  |  |  |  |     |  |  |   move.b (a0),d1
   13d4e:	|  |  |  |  |     |  |  |   movea.l d0,a0
   13d50:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   13d52:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   13d56:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   13d5a:	|  |  |  |  |     |  |      move.b (a0),d0
   13d5c:	|  |  |  |  |     |  '----- bne.s 13d3c <vsprintf2+0x88>
                    }
                    break;
   13d5e:	|  |  |  |  |  ,--|-------- bra.w 13df6 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   13d62:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   13d66:	|  |  |  |  |  |            movea.l 56(sp),a0
   13d6a:	|  |  |  |  |  |            move.l (a0),d0
   13d6c:	|  |  |  |  |  |            move.l d0,d1
   13d6e:	|  |  |  |  |  |            subq.l #1,d1
   13d70:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   13d74:	|  |  |  |  |  |        ,-- bra.s 13d96 <vsprintf2+0xe2>
                        *s++ = *sval++;
   13d76:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   13d7a:	|  |  |  |  |  |     |  |   move.l d1,d2
   13d7c:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13d7e:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   13d82:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   13d86:	|  |  |  |  |  |     |  |   move.l d0,d2
   13d88:	|  |  |  |  |  |     |  |   addq.l #1,d2
   13d8a:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   13d8e:	|  |  |  |  |  |     |  |   movea.l d1,a0
   13d90:	|  |  |  |  |  |     |  |   move.b (a0),d1
   13d92:	|  |  |  |  |  |     |  |   movea.l d0,a0
   13d94:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   13d96:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   13d9a:	|  |  |  |  |  |     |      move.b (a0),d0
   13d9c:	|  |  |  |  |  |     '----- bne.s 13d76 <vsprintf2+0xc2>
                    }
                    break;
   13d9e:	|  |  |  |  |  +----------- bra.s 13df6 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   13da0:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   13da4:	|  |  |  |     |            movea.l 56(sp),a0
   13da8:	|  |  |  |     |            move.l (a0),d0
   13daa:	|  |  |  |     |            move.l d0,d1
   13dac:	|  |  |  |     |            subq.l #1,d1
   13dae:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13db2:	|  |  |  |     |            move.l 40(sp),d0
   13db6:	|  |  |  |     |            move.l d0,d2
   13db8:	|  |  |  |     |            addq.l #1,d2
   13dba:	|  |  |  |     |            move.l d2,40(sp)
   13dbe:	|  |  |  |     |            move.l 24(sp),d1
   13dc2:	|  |  |  |     |            movea.l d0,a0
   13dc4:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13dc6:	|  |  |  |     +----------- bra.s 13df6 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13dc8:	|  |  |  '-----|----------> move.l 40(sp),d0
   13dcc:	|  |  |        |            move.l d0,d1
   13dce:	|  |  |        |            addq.l #1,d1
   13dd0:	|  |  |        |            move.l d1,40(sp)
   13dd4:	|  |  |        |            movea.l 36(sp),a0
   13dd8:	|  |  |        |            move.b (a0),d1
   13dda:	|  |  |        |            movea.l d0,a0
   13ddc:	|  |  |        |            move.b d1,(a0)
                    break;
   13dde:	|  |  |        +----------- bra.s 13df6 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13de0:	|  |  '--------|----------> move.l 40(sp),d0
   13de4:	|  |           |            move.l d0,d1
   13de6:	|  |           |            addq.l #1,d1
   13de8:	|  |           |            move.l d1,40(sp)
   13dec:	|  |           |            movea.l 36(sp),a0
   13df0:	|  |           |            move.b (a0),d1
   13df2:	|  |           |            movea.l d0,a0
   13df4:	|  |           |            move.b d1,(a0)
        }
        p++;
   13df6:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   13dfa:	|  '----------------------> movea.l 36(sp),a0
   13dfe:	|                           move.b (a0),d0
   13e00:	'-------------------------- bne.w 13cca <vsprintf2+0x16>
    }
    *s = '\0';
   13e04:	                            movea.l 40(sp),a0
   13e08:	                            clr.b (a0)
    return s - str;
   13e0a:	                            move.l 40(sp),d0
   13e0e:	                            sub.l 48(sp),d0
}
   13e12:	                            move.l (sp)+,d2
   13e14:	                            lea 40(sp),sp
   13e18:	                            rts

00013e1a <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13e1a:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13e1c:	moveq #16,d0
   13e1e:	add.l sp,d0
   13e20:	move.l d0,d1
   13e22:	addq.l #4,d1
   13e24:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13e28:	move.l 16(sp),d0
   13e2c:	move.l 4(sp),-(sp)
   13e30:	move.l d0,-(sp)
   13e32:	move.l 20(sp),-(sp)
   13e36:	jsr 13cb4 <vsprintf2>
   13e3c:	lea 12(sp),sp
   13e40:	move.l d0,(sp)
    va_end(args);
   13e42:	clr.l 4(sp)

    return done;
   13e46:	move.l (sp),d0
}
   13e48:	addq.l #8,sp
   13e4a:	rts

00013e4c <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13e4c:	       lea -20(sp),sp
   13e50:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13e52:	       moveq #12,d0
   13e54:	       move.l d0,20(sp)
   13e58:	       clr.l 16(sp)
   13e5c:	       move.l 1c7d8 <SysBase>,d0
   13e62:	       movea.l d0,a6
   13e64:	       move.l 20(sp),d0
   13e68:	       move.l 16(sp),d1
   13e6c:	       jsr -684(a6)
   13e70:	       move.l d0,12(sp)
   13e74:	       move.l 12(sp),d0
   13e78:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13e7c:	   ,-- bne.s 13e82 <addVarToStack+0x36>
   13e7e:	   |   clr.w d0
   13e80:	,--|-- bra.s 13eca <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13e82:	|  '-> move.l 8(sp),d0
   13e86:	|      move.l d0,-(sp)
   13e88:	|      move.l 32(sp),-(sp)
   13e8c:	|      jsr 149ae <copyMain>
   13e92:	|      addq.l #8,sp
   13e94:	|      tst.w d0
   13e96:	|  ,-- bne.s 13eb2 <addVarToStack+0x66>
        FreeVec(newStack);
   13e98:	|  |   move.l 8(sp),4(sp)
   13e9e:	|  |   move.l 1c7d8 <SysBase>,d0
   13ea4:	|  |   movea.l d0,a6
   13ea6:	|  |   movea.l 4(sp),a1
   13eaa:	|  |   jsr -690(a6)
        return FALSE;
   13eae:	|  |   clr.w d0
   13eb0:	+--|-- bra.s 13eca <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13eb2:	|  '-> movea.l 32(sp),a0
   13eb6:	|      move.l (a0),d0
   13eb8:	|      movea.l 8(sp),a0
   13ebc:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13ec0:	|      movea.l 32(sp),a0
   13ec4:	|      move.l 8(sp),(a0)
    return TRUE;
   13ec8:	|      moveq #1,d0
}
   13eca:	'----> movea.l (sp)+,a6
   13ecc:	       lea 20(sp),sp
   13ed0:	       rts

00013ed2 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13ed2:	       lea -16(sp),sp
   13ed6:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13ed8:	       moveq #12,d0
   13eda:	       move.l d0,16(sp)
   13ede:	       clr.l 12(sp)
   13ee2:	       move.l 1c7d8 <SysBase>,d0
   13ee8:	       movea.l d0,a6
   13eea:	       move.l 16(sp),d0
   13eee:	       move.l 12(sp),d1
   13ef2:	       jsr -684(a6)
   13ef6:	       move.l d0,8(sp)
   13efa:	       move.l 8(sp),d0
   13efe:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13f02:	   ,-- bne.s 13f08 <addVarToStackQuick+0x36>
   13f04:	   |   clr.w d0
   13f06:	,--|-- bra.s 13f3e <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   13f08:	|  '-> move.l 4(sp),d0
   13f0c:	|      pea 8 <_start+0x8>
   13f10:	|      move.l 28(sp),-(sp)
   13f14:	|      move.l d0,-(sp)
   13f16:	|      jsr 17088 <memcpy>
   13f1c:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13f20:	|      movea.l 24(sp),a0
   13f24:	|      clr.l (a0)

    newStack->next = *thisStack;
   13f26:	|      movea.l 28(sp),a0
   13f2a:	|      move.l (a0),d0
   13f2c:	|      movea.l 4(sp),a0
   13f30:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13f34:	|      movea.l 28(sp),a0
   13f38:	|      move.l 4(sp),(a0)
    return TRUE;
   13f3c:	|      moveq #1,d0
}
   13f3e:	'----> movea.l (sp)+,a6
   13f40:	       lea 16(sp),sp
   13f44:	       rts

00013f46 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   13f46:	       lea -16(sp),sp
   13f4a:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13f4c:	       movea.l 24(sp),a0
   13f50:	       move.l (a0),d0
   13f52:	       moveq #1,d1
   13f54:	       cmp.l d0,d1
   13f56:	   ,-- bne.s 13f80 <addVariablesInSecond+0x3a>
   13f58:	   |   movea.l 28(sp),a0
   13f5c:	   |   move.l (a0),d0
   13f5e:	   |   moveq #1,d1
   13f60:	   |   cmp.l d0,d1
   13f62:	   +-- bne.s 13f80 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13f64:	   |   movea.l 28(sp),a0
   13f68:	   |   move.l 4(a0),d1
   13f6c:	   |   movea.l 24(sp),a0
   13f70:	   |   move.l 4(a0),d0
   13f74:	   |   add.l d1,d0
   13f76:	   |   movea.l 28(sp),a0
   13f7a:	   |   move.l d0,4(a0)
   13f7e:	,--|-- bra.s 13ffa <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13f80:	|  '-> move.l 24(sp),-(sp)
   13f84:	|      jsr 14be6 <getTextFromAnyVar>
   13f8a:	|      addq.l #4,sp
   13f8c:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13f90:	|      move.l 28(sp),-(sp)
   13f94:	|      jsr 14be6 <getTextFromAnyVar>
   13f9a:	|      addq.l #4,sp
   13f9c:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13fa0:	|      move.l 28(sp),-(sp)
   13fa4:	|      jsr 1485e <unlinkVar>
   13faa:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13fac:	|      move.l 12(sp),-(sp)
   13fb0:	|      move.l 20(sp),-(sp)
   13fb4:	|      jsr 13b3c <joinStrings>
   13fba:	|      addq.l #8,sp
   13fbc:	|      movea.l 28(sp),a0
   13fc0:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13fc4:	|      movea.l 28(sp),a0
   13fc8:	|      moveq #3,d0
   13fca:	|      move.l d0,(a0)
		FreeVec(string1);
   13fcc:	|      move.l 16(sp),8(sp)
   13fd2:	|      move.l 1c7d8 <SysBase>,d0
   13fd8:	|      movea.l d0,a6
   13fda:	|      movea.l 8(sp),a1
   13fde:	|      jsr -690(a6)
		FreeVec(string2);
   13fe2:	|      move.l 12(sp),4(sp)
   13fe8:	|      move.l 1c7d8 <SysBase>,d0
   13fee:	|      movea.l d0,a6
   13ff0:	|      movea.l 4(sp),a1
   13ff4:	|      jsr -690(a6)
	}
}
   13ff8:	|      nop
   13ffa:	'----> nop
   13ffc:	       movea.l (sp)+,a6
   13ffe:	       lea 16(sp),sp
   14002:	       rts

00014004 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   14004:	movea.l 8(sp),a0
   14008:	move.l 4(a0),-(sp)
   1400c:	move.l (a0),-(sp)
   1400e:	movea.l 12(sp),a0
   14012:	move.l 4(a0),-(sp)
   14016:	move.l (a0),-(sp)
   14018:	jsr 1403a <compareVars>
   1401e:	lea 16(sp),sp
   14022:	move.l d0,-(sp)
   14024:	pea 1 <_start+0x1>
   14028:	move.l 16(sp),-(sp)
   1402c:	jsr 14f02 <setVariable>
   14032:	lea 12(sp),sp
}
   14036:	nop
   14038:	rts

0001403a <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   1403a:	       subq.l #4,sp
	int re = 0;
   1403c:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1403e:	       move.l 8(sp),d1
   14042:	       move.l 16(sp),d0
   14046:	       cmp.l d1,d0
   14048:	,----- bne.w 14110 <compareVars+0xd6>
		switch (var1.varType) {
   1404c:	|      move.l 8(sp),d0
   14050:	|      moveq #9,d1
   14052:	|      cmp.l d0,d1
   14054:	|  ,-- bcs.w 140f8 <compareVars+0xbe>
   14058:	|  |   add.l d0,d0
   1405a:	|  |   movea.l d0,a0
   1405c:	|  |   adda.l #82024,a0
   14062:	|  |   move.w (a0),d0
   14064:	|  |   jmp (14068 <compareVars+0x2e>,pc,d0.w)
   14068:	|  |   ori.b #-112,(a4)
   1406c:	|  |   ori.l #5243024,(a0)
   14072:	|  |   ori.l #7733392,(a0)
   14078:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1407e:	|  |   move.l d0,(sp)
			break;
   14080:	+--|-- bra.w 14110 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   14084:	|  |   move.l 12(sp),d1
   14088:	|  |   move.l 20(sp),d0
   1408c:	|  |   cmp.l d1,d0
   1408e:	|  |   seq d0
   14090:	|  |   neg.b d0
   14092:	|  |   move.b d0,d0
   14094:	|  |   andi.l #255,d0
   1409a:	|  |   move.l d0,(sp)
			break;
   1409c:	+--|-- bra.s 14110 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   1409e:	|  |   move.l 12(sp),d1
   140a2:	|  |   move.l 20(sp),d0
   140a6:	|  |   cmp.l d1,d0
   140a8:	|  |   seq d0
   140aa:	|  |   neg.b d0
   140ac:	|  |   move.b d0,d0
   140ae:	|  |   andi.l #255,d0
   140b4:	|  |   move.l d0,(sp)
			break;
   140b6:	+--|-- bra.s 14110 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   140b8:	|  |   move.l 20(sp),d1
   140bc:	|  |   move.l 12(sp),d0
   140c0:	|  |   move.l d1,-(sp)
   140c2:	|  |   move.l d0,-(sp)
   140c4:	|  |   jsr 13abc <strcmp>
   140ca:	|  |   addq.l #8,sp
   140cc:	|  |   tst.l d0
   140ce:	|  |   seq d0
   140d0:	|  |   neg.b d0
   140d2:	|  |   move.b d0,d0
   140d4:	|  |   andi.l #255,d0
   140da:	|  |   move.l d0,(sp)
			break;
   140dc:	+--|-- bra.s 14110 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   140de:	|  |   move.l 12(sp),d1
   140e2:	|  |   move.l 20(sp),d0
   140e6:	|  |   cmp.l d1,d0
   140e8:	|  |   seq d0
   140ea:	|  |   neg.b d0
   140ec:	|  |   move.b d0,d0
   140ee:	|  |   andi.l #255,d0
   140f4:	|  |   move.l d0,(sp)
			break;
   140f6:	+--|-- bra.s 14110 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   140f8:	|  '-> move.l 12(sp),d1
   140fc:	|      move.l 20(sp),d0
   14100:	|      cmp.l d1,d0
   14102:	|      seq d0
   14104:	|      neg.b d0
   14106:	|      move.b d0,d0
   14108:	|      andi.l #255,d0
   1410e:	|      move.l d0,(sp)
		}
	}
	return re;
   14110:	'----> move.l (sp),d0
}
   14112:	       addq.l #4,sp
   14114:	       rts

00014116 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   14116:	             lea -16(sp),sp
   1411a:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1411c:	             movea.l 28(sp),a0
   14120:	             moveq #6,d0
   14122:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   14124:	             moveq #12,d0
   14126:	             move.l d0,12(sp)
   1412a:	             clr.l 8(sp)
   1412e:	             move.l 1c7d8 <SysBase>,d0
   14134:	             movea.l d0,a6
   14136:	             move.l 12(sp),d0
   1413a:	             move.l 8(sp),d1
   1413e:	             jsr -684(a6)
   14142:	             move.l d0,4(sp)
   14146:	             move.l 4(sp),d0
   1414a:	             movea.l 28(sp),a0
   1414e:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14152:	             movea.l 28(sp),a0
   14156:	             move.l 4(a0),d0
   1415a:	         ,-- bne.s 14162 <copyStack+0x4c>
   1415c:	         |   clr.w d0
   1415e:	,--------|-- bra.w 141e4 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   14162:	|        '-> movea.l 28(sp),a0
   14166:	|            movea.l 4(a0),a0
   1416a:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1416c:	|            movea.l 28(sp),a0
   14170:	|            movea.l 4(a0),a0
   14174:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14178:	|            movea.l 28(sp),a0
   1417c:	|            movea.l 4(a0),a0
   14180:	|            moveq #1,d0
   14182:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   14186:	|            movea.l 24(sp),a0
   1418a:	|            movea.l 4(a0),a0
   1418e:	|            move.l (a0),16(sp)

	while (a) {
   14192:	|     ,----- bra.s 141dc <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14194:	|  ,--|----> movea.l 28(sp),a0
   14198:	|  |  |      move.l 4(a0),d0
   1419c:	|  |  |      move.l d0,d1
   1419e:	|  |  |      move.l 16(sp),d0
   141a2:	|  |  |      move.l d1,-(sp)
   141a4:	|  |  |      move.l d0,-(sp)
   141a6:	|  |  |      jsr 13e4c <addVarToStack>
   141ac:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   141ae:	|  |  |      movea.l 28(sp),a0
   141b2:	|  |  |      movea.l 4(a0),a0
   141b6:	|  |  |      move.l 4(a0),d0
   141ba:	|  |  |  ,-- bne.s 141d2 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   141bc:	|  |  |  |   movea.l 28(sp),a0
   141c0:	|  |  |  |   movea.l 4(a0),a1
   141c4:	|  |  |  |   movea.l 28(sp),a0
   141c8:	|  |  |  |   movea.l 4(a0),a0
   141cc:	|  |  |  |   move.l (a1),d0
   141ce:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   141d2:	|  |  |  '-> movea.l 16(sp),a0
   141d6:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   141dc:	|  |  '----> tst.l 16(sp)
   141e0:	|  '-------- bne.s 14194 <copyStack+0x7e>
	}

	return TRUE;
   141e2:	|            moveq #1,d0
}
   141e4:	'----------> movea.l (sp)+,a6
   141e6:	             lea 16(sp),sp
   141ea:	             rts

000141ec <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   141ec:	                lea -20(sp),sp
   141f0:	                move.l a6,-(sp)
   141f2:	                move.l 36(sp),d0
   141f6:	                move.w d0,d0
   141f8:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   141fc:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   14202:	                clr.l 16(sp)

    while (*huntVar) {
   14206:	   ,----------- bra.s 14284 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14208:	,--|----------> movea.l 20(sp),a0
   1420c:	|  |            movea.l (a0),a0
   1420e:	|  |            movea.l 28(sp),a1
   14212:	|  |            move.l 4(a1),-(sp)
   14216:	|  |            move.l (a1),-(sp)
   14218:	|  |            move.l 4(a0),-(sp)
   1421c:	|  |            move.l (a0),-(sp)
   1421e:	|  |            jsr 1403a <compareVars>
   14224:	|  |            lea 16(sp),sp
   14228:	|  |            tst.l d0
   1422a:	|  |  ,-------- beq.s 14276 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1422c:	|  |  |         movea.l 20(sp),a0
   14230:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   14234:	|  |  |         movea.l 12(sp),a0
   14238:	|  |  |         move.l 8(a0),d0
   1423c:	|  |  |         movea.l 20(sp),a0
   14240:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14242:	|  |  |         move.l 12(sp),d0
   14246:	|  |  |         move.l d0,-(sp)
   14248:	|  |  |         jsr 1485e <unlinkVar>
   1424e:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14250:	|  |  |         move.l 12(sp),8(sp)
   14256:	|  |  |         move.l 1c7d8 <SysBase>,d0
   1425c:	|  |  |         movea.l d0,a6
   1425e:	|  |  |         movea.l 8(sp),a1
   14262:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   14266:	|  |  |         tst.w 6(sp)
   1426a:	|  |  |     ,-- bne.s 14270 <deleteVarFromStack+0x84>
   1426c:	|  |  |     |   moveq #1,d0
   1426e:	|  |  |  ,--|-- bra.s 14292 <deleteVarFromStack+0xa6>
            reply++;
   14270:	|  |  |  |  '-> addq.l #1,16(sp)
   14274:	|  +--|--|----- bra.s 14284 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14276:	|  |  '--|----> movea.l 20(sp),a0
   1427a:	|  |     |      move.l (a0),d0
   1427c:	|  |     |      move.l d0,d1
   1427e:	|  |     |      addq.l #8,d1
   14280:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14284:	|  '-----|----> movea.l 20(sp),a0
   14288:	|        |      move.l (a0),d0
   1428a:	'--------|----- bne.w 14208 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1428e:	         |      move.l 16(sp),d0
}
   14292:	         '----> movea.l (sp)+,a6
   14294:	                lea 20(sp),sp
   14298:	                rts

0001429a <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   1429a:	       movea.l 4(sp),a0
   1429e:	       move.l 4(a0),d0
   142a2:	       cmp.l 8(sp),d0
   142a6:	   ,-- bhi.s 142ac <fastArrayGetByIndex+0x12>
   142a8:	   |   moveq #0,d0
   142aa:	,--|-- bra.s 142ba <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   142ac:	|  '-> movea.l 4(sp),a0
   142b0:	|      move.l (a0),d1
   142b2:	|      move.l 8(sp),d0
   142b6:	|      lsl.l #3,d0
   142b8:	|      add.l d1,d0
}
   142ba:	'----> rts

000142bc <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   142bc:	                lea -32(sp),sp
   142c0:	                move.l a6,-(sp)
   142c2:	                move.l a2,-(sp)
    struct persona *p = NULL;
   142c4:	                clr.l 36(sp)

    switch (thisVar->varType) {
   142c8:	                movea.l 44(sp),a0
   142cc:	                move.l (a0),d0
   142ce:	                moveq #8,d1
   142d0:	                cmp.l d0,d1
   142d2:	            ,-- beq.s 142e0 <getCostumeFromVar+0x24>
   142d4:	            |   moveq #9,d1
   142d6:	            |   cmp.l d0,d1
   142d8:	   ,--------|-- beq.w 1438e <getCostumeFromVar+0xd2>
   142dc:	,--|--------|-- bra.w 14398 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   142e0:	|  |        '-> moveq #8,d0
   142e2:	|  |            move.l d0,28(sp)
   142e6:	|  |            clr.l 24(sp)
   142ea:	|  |            move.l 1c7d8 <SysBase>,d0
   142f0:	|  |            movea.l d0,a6
   142f2:	|  |            move.l 28(sp),d0
   142f6:	|  |            move.l 24(sp),d1
   142fa:	|  |            jsr -684(a6)
   142fe:	|  |            move.l d0,20(sp)
   14302:	|  |            move.l 20(sp),d0
   14306:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   1430a:	|  |        ,-- bne.s 14312 <getCostumeFromVar+0x56>
   1430c:	|  |        |   moveq #0,d0
   1430e:	|  |  ,-----|-- bra.w 143c2 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   14312:	|  |  |     '-> movea.l 36(sp),a0
   14316:	|  |  |         moveq #1,d1
   14318:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   1431c:	|  |  |         moveq #12,d0
   1431e:	|  |  |         move.l d0,16(sp)
   14322:	|  |  |         clr.l 12(sp)
   14326:	|  |  |         move.l 1c7d8 <SysBase>,d0
   1432c:	|  |  |         movea.l d0,a6
   1432e:	|  |  |         move.l 16(sp),d0
   14332:	|  |  |         move.l 12(sp),d1
   14336:	|  |  |         jsr -684(a6)
   1433a:	|  |  |         move.l d0,8(sp)
   1433e:	|  |  |         move.l 8(sp),d0
   14342:	|  |  |         movea.l 36(sp),a0
   14346:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14348:	|  |  |         movea.l 36(sp),a0
   1434c:	|  |  |         move.l (a0),d0
   1434e:	|  |  |     ,-- bne.s 14354 <getCostumeFromVar+0x98>
   14350:	|  |  |     |   moveq #0,d0
   14352:	|  |  +-----|-- bra.s 143c2 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14354:	|  |  |     '-> clr.l 32(sp)
   14358:	|  |  |     ,-- bra.s 14384 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1435a:	|  |  |  ,--|-> movea.l 44(sp),a0
   1435e:	|  |  |  |  |   move.l 4(a0),d0
   14362:	|  |  |  |  |   movea.l 36(sp),a0
   14366:	|  |  |  |  |   movea.l (a0),a0
   14368:	|  |  |  |  |   move.l 32(sp),d1
   1436c:	|  |  |  |  |   add.l d1,d1
   1436e:	|  |  |  |  |   add.l d1,d1
   14370:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14374:	|  |  |  |  |   move.l d0,-(sp)
   14376:	|  |  |  |  |   jsr 9386 <copyAnim>
   1437c:	|  |  |  |  |   addq.l #4,sp
   1437e:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14380:	|  |  |  |  |   addq.l #1,32(sp)
   14384:	|  |  |  |  '-> moveq #2,d1
   14386:	|  |  |  |      cmp.l 32(sp),d1
   1438a:	|  |  |  '----- bge.s 1435a <getCostumeFromVar+0x9e>
            }
            break;
   1438c:	|  |  |     ,-- bra.s 143be <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1438e:	|  '--|-----|-> movea.l 44(sp),a0
   14392:	|     |     |   move.l 4(a0),d0
   14396:	|     +-----|-- bra.s 143c2 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14398:	'-----|-----|-> movea.l 44(sp),a0
   1439c:	      |     |   move.l (a0),d0
   1439e:	      |     |   add.l d0,d0
   143a0:	      |     |   movea.l d0,a1
   143a2:	      |     |   adda.l d0,a1
   143a4:	      |     |   lea 1c6a8 <typeName>,a0
   143aa:	      |     |   move.l (0,a1,a0.l),d0
   143ae:	      |     |   move.l d0,-(sp)
   143b0:	      |     |   pea 19d26 <talk.c.490538ff+0x40a>
   143b6:	      |     |   jsr 170d4 <KPrintF>
   143bc:	      |     |   addq.l #8,sp
    }

    return p;
   143be:	      |     '-> move.l 36(sp),d0
}
   143c2:	      '-------> movea.l (sp)+,a2
   143c4:	                movea.l (sp)+,a6
   143c6:	                lea 32(sp),sp
   143ca:	                rts

000143cc <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   143cc:	                lea -96(sp),sp
   143d0:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   143d4:	                move.l 116(sp),-(sp)
   143d8:	                pea 19d5e <talk.c.490538ff+0x442>
   143de:	                jsr 13b3c <joinStrings>
   143e4:	                addq.l #8,sp
   143e6:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   143ea:	            ,-- bne.s 143f2 <getSavedGamesStack+0x26>
   143ec:	            |   clr.w d0
   143ee:	,-----------|-- bra.w 14606 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   143f2:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   143f6:	|               move.l #105824,98(sp)
   143fe:	|               moveq #-2,d0
   14400:	|               move.l d0,94(sp)
   14404:	|               move.l 1c7e0 <DOSBase>,d0
   1440a:	|               movea.l d0,a6
   1440c:	|               move.l 98(sp),d1
   14410:	|               move.l 94(sp),d2
   14414:	|               jsr -84(a6)
   14418:	|               move.l d0,90(sp)
   1441c:	|               move.l 90(sp),d0
   14420:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14424:	|           ,-- bne.s 1442c <getSavedGamesStack+0x60>
   14426:	|           |   clr.w d0
   14428:	+-----------|-- bra.w 14606 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1442c:	|           '-> move.l #260,82(sp)
   14434:	|               move.l #65536,78(sp)
   1443c:	|               move.l 1c7d8 <SysBase>,d0
   14442:	|               movea.l d0,a6
   14444:	|               move.l 82(sp),d0
   14448:	|               move.l 78(sp),d1
   1444c:	|               jsr -684(a6)
   14450:	|               move.l d0,74(sp)
   14454:	|               move.l 74(sp),d0
   14458:	|               move.l d0,70(sp)
	if (!fib) {
   1445c:	|           ,-- bne.s 1447a <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1445e:	|           |   move.l 86(sp),22(sp)
   14464:	|           |   move.l 1c7e0 <DOSBase>,d0
   1446a:	|           |   movea.l d0,a6
   1446c:	|           |   move.l 22(sp),d1
   14470:	|           |   jsr -90(a6)
		return FALSE;
   14474:	|           |   clr.w d0
   14476:	+-----------|-- bra.w 14606 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   1447a:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   1447e:	|               move.l 86(sp),66(sp)
   14484:	|               move.l 70(sp),62(sp)
   1448a:	|               move.l 1c7e0 <DOSBase>,d0
   14490:	|               movea.l d0,a6
   14492:	|               move.l 66(sp),d1
   14496:	|               move.l 62(sp),d2
   1449a:	|               jsr -102(a6)
   1449e:	|               move.l d0,58(sp)
   144a2:	|               move.l 58(sp),d0
   144a6:	|  ,----------- beq.w 145ba <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   144aa:	|  |        ,-- bra.w 14586 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   144ae:	|  |  ,-----|-> move.l 70(sp),d2
   144b2:	|  |  |     |   addq.l #8,d2
   144b4:	|  |  |     |   move.l 70(sp),d0
   144b8:	|  |  |     |   addq.l #8,d0
   144ba:	|  |  |     |   move.l d0,-(sp)
   144bc:	|  |  |     |   jsr 13afc <strlen>
   144c2:	|  |  |     |   addq.l #4,sp
   144c4:	|  |  |     |   move.l d0,d3
   144c6:	|  |  |     |   move.l 116(sp),-(sp)
   144ca:	|  |  |     |   jsr 13afc <strlen>
   144d0:	|  |  |     |   addq.l #4,sp
   144d2:	|  |  |     |   move.l d3,d1
   144d4:	|  |  |     |   sub.l d0,d1
   144d6:	|  |  |     |   move.l d2,d0
   144d8:	|  |  |     |   add.l d1,d0
   144da:	|  |  |     |   move.l 116(sp),-(sp)
   144de:	|  |  |     |   move.l d0,-(sp)
   144e0:	|  |  |     |   jsr 13abc <strcmp>
   144e6:	|  |  |     |   addq.l #8,sp
   144e8:	|  |  |     |   tst.l d0
   144ea:	|  |  |     +-- bne.w 14586 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   144ee:	|  |  |     |   move.l 70(sp),d0
   144f2:	|  |  |     |   addq.l #8,d0
   144f4:	|  |  |     |   move.l d0,-(sp)
   144f6:	|  |  |     |   jsr 13afc <strlen>
   144fc:	|  |  |     |   addq.l #4,sp
   144fe:	|  |  |     |   move.l d0,d2
   14500:	|  |  |     |   move.l 116(sp),-(sp)
   14504:	|  |  |     |   jsr 13afc <strlen>
   1450a:	|  |  |     |   addq.l #4,sp
   1450c:	|  |  |     |   move.l d0,d1
   1450e:	|  |  |     |   move.l d2,d0
   14510:	|  |  |     |   sub.l d1,d0
   14512:	|  |  |     |   movea.l 70(sp),a0
   14516:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   1451a:	|  |  |     |   move.l 70(sp),d0
   1451e:	|  |  |     |   addq.l #8,d0
   14520:	|  |  |     |   move.l d0,-(sp)
   14522:	|  |  |     |   jsr 118 <decodeFilename>
   14528:	|  |  |     |   addq.l #4,sp
   1452a:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1452e:	|  |  |     |   move.l 42(sp),-(sp)
   14532:	|  |  |     |   lea 18(sp),a0
   14536:	|  |  |     |   move.l a0,-(sp)
   14538:	|  |  |     |   jsr 14832 <makeTextVar>
   1453e:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14540:	|  |  |     |   move.l 42(sp),38(sp)
   14546:	|  |  |     |   move.l 1c7d8 <SysBase>,d0
   1454c:	|  |  |     |   movea.l d0,a6
   1454e:	|  |  |     |   movea.l 38(sp),a1
   14552:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14556:	|  |  |     |   move.l 112(sp),d0
   1455a:	|  |  |     |   move.l d0,-(sp)
   1455c:	|  |  |     |   lea 18(sp),a0
   14560:	|  |  |     |   move.l a0,-(sp)
   14562:	|  |  |     |   jsr 13e4c <addVarToStack>
   14568:	|  |  |     |   addq.l #8,sp
   1456a:	|  |  |     |   tst.w d0
   1456c:	|  |  |  ,--|-- beq.s 145be <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   1456e:	|  |  |  |  |   movea.l 112(sp),a0
   14572:	|  |  |  |  |   move.l 4(a0),d0
   14576:	|  |  |  |  +-- bne.s 14586 <getSavedGamesStack+0x1ba>
   14578:	|  |  |  |  |   movea.l 112(sp),a0
   1457c:	|  |  |  |  |   move.l (a0),d0
   1457e:	|  |  |  |  |   movea.l 112(sp),a0
   14582:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14586:	|  |  |  |  '-> move.l 86(sp),54(sp)
   1458c:	|  |  |  |      move.l 70(sp),50(sp)
   14592:	|  |  |  |      move.l 1c7e0 <DOSBase>,d0
   14598:	|  |  |  |      movea.l d0,a6
   1459a:	|  |  |  |      move.l 54(sp),d1
   1459e:	|  |  |  |      move.l 50(sp),d2
   145a2:	|  |  |  |      jsr -108(a6)
   145a6:	|  |  |  |      move.l d0,46(sp)
   145aa:	|  |  |  |      move.l 46(sp),d0
   145ae:	|  |  '--|----- bne.w 144ae <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   145b2:	|  |     |      move.w #1,106(sp)
   145b8:	|  |     |  ,-- bra.s 145c0 <getSavedGamesStack+0x1f4>
	}

cleanup:
   145ba:	|  '-----|--|-> nop
   145bc:	|        |  +-- bra.s 145c0 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   145be:	|        '--|-> nop
	FreeVec(fib);
   145c0:	|           '-> move.l 70(sp),34(sp)
   145c6:	|               move.l 1c7d8 <SysBase>,d0
   145cc:	|               movea.l d0,a6
   145ce:	|               movea.l 34(sp),a1
   145d2:	|               jsr -690(a6)
	UnLock(dirLock);
   145d6:	|               move.l 86(sp),30(sp)
   145dc:	|               move.l 1c7e0 <DOSBase>,d0
   145e2:	|               movea.l d0,a6
   145e4:	|               move.l 30(sp),d1
   145e8:	|               jsr -90(a6)
	FreeVec(pattern);
   145ec:	|               move.l 102(sp),26(sp)
   145f2:	|               move.l 1c7d8 <SysBase>,d0
   145f8:	|               movea.l d0,a6
   145fa:	|               movea.l 26(sp),a1
   145fe:	|               jsr -690(a6)
	return result;
   14602:	|               move.w 106(sp),d0
}
   14606:	'-------------> movem.l (sp)+,d2-d3/a6
   1460a:	                lea 96(sp),sp
   1460e:	                rts

00014610 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14610:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14612:	       movea.l 20(sp),a0
   14616:	       move.l (a0),d0
   14618:	       cmp.l 16(sp),d0
   1461c:	,----- beq.s 14680 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   1461e:	|      move.l 16(sp),d0
   14622:	|      add.l d0,d0
   14624:	|      movea.l d0,a1
   14626:	|      adda.l d0,a1
   14628:	|      lea 1c6a8 <typeName>,a0
   1462e:	|      move.l (0,a1,a0.l),d0
   14632:	|      move.l d0,-(sp)
   14634:	|      pea 19d62 <talk.c.490538ff+0x446>
   1463a:	|      jsr 13b3c <joinStrings>
   14640:	|      addq.l #8,sp
   14642:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14646:	|      movea.l 20(sp),a0
   1464a:	|      move.l (a0),d0
   1464c:	|      add.l d0,d0
   1464e:	|      movea.l d0,a1
   14650:	|      adda.l d0,a1
   14652:	|      lea 1c6a8 <typeName>,a0
   14658:	|      move.l (0,a1,a0.l),d0
   1465c:	|      move.l d0,-(sp)
   1465e:	|      pea 19da4 <talk.c.490538ff+0x488>
   14664:	|      jsr 13b3c <joinStrings>
   1466a:	|      addq.l #8,sp
   1466c:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   1466e:	|      move.l (sp),-(sp)
   14670:	|      move.l 8(sp),-(sp)
   14674:	|      jsr 170d4 <KPrintF>
   1467a:	|      addq.l #8,sp

		return FALSE;
   1467c:	|      clr.w d0
   1467e:	|  ,-- bra.s 14690 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14680:	'--|-> movea.l 20(sp),a0
   14684:	   |   move.l 4(a0),d0
   14688:	   |   movea.l 12(sp),a0
   1468c:	   |   move.l d0,(a0)
	return TRUE;
   1468e:	   |   moveq #1,d0
}
   14690:	   '-> addq.l #8,sp
   14692:	       rts

00014694 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14694:	move.l 8(sp),-(sp)
   14698:	jsr 74e4 <getNumberedString>
   1469e:	addq.l #4,sp
   146a0:	move.l d0,-(sp)
   146a2:	move.l 8(sp),-(sp)
   146a6:	jsr 14832 <makeTextVar>
   146ac:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   146ae:	movea.l 4(sp),a0
   146b2:	move.l 4(a0),d0
   146b6:	sne d0
   146b8:	neg.b d0
   146ba:	move.b d0,d0
   146bc:	andi.w #255,d0
}
   146c0:	rts

000146c2 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   146c2:	          subq.l #8,sp
    int size = stackSize(stacky);
   146c4:	          move.l 16(sp),-(sp)
   146c8:	          jsr 14f70 <stackSize>
   146ce:	          addq.l #4,sp
   146d0:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   146d4:	          move.l 4(sp),-(sp)
   146d8:	          move.l 16(sp),-(sp)
   146dc:	          jsr 1472c <makeFastArraySize>
   146e2:	          addq.l #8,sp
   146e4:	          tst.w d0
   146e6:	      ,-- bne.s 146ec <makeFastArrayFromStack+0x2a>
   146e8:	      |   clr.w d0
   146ea:	,-----|-- bra.s 14728 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   146ec:	|     '-> movea.l 16(sp),a0
   146f0:	|         move.l (a0),(sp)
    size = 0;
   146f2:	|         clr.l 4(sp)
    while (allV) {
   146f6:	|     ,-- bra.s 14722 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   146f8:	|  ,--|-> movea.l 12(sp),a0
   146fc:	|  |  |   movea.l 4(a0),a0
   14700:	|  |  |   move.l (a0),d1
   14702:	|  |  |   move.l 4(sp),d0
   14706:	|  |  |   lsl.l #3,d0
   14708:	|  |  |   add.l d0,d1
   1470a:	|  |  |   move.l (sp),d0
   1470c:	|  |  |   move.l d1,-(sp)
   1470e:	|  |  |   move.l d0,-(sp)
   14710:	|  |  |   jsr 149ae <copyMain>
   14716:	|  |  |   addq.l #8,sp
        size++;
   14718:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   1471c:	|  |  |   movea.l (sp),a0
   1471e:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14722:	|  |  '-> tst.l (sp)
   14724:	|  '----- bne.s 146f8 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14726:	|         moveq #1,d0
}
   14728:	'-------> addq.l #8,sp
   1472a:	          rts

0001472c <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   1472c:	          lea -28(sp),sp
   14730:	          move.l a6,-(sp)
    if (size < 0) {
   14732:	          tst.l 40(sp)
   14736:	      ,-- bge.s 1474c <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14738:	      |   pea 19de9 <talk.c.490538ff+0x4cd>
   1473e:	      |   jsr 170d4 <KPrintF>
   14744:	      |   addq.l #4,sp
		return FALSE;
   14746:	      |   clr.w d0
   14748:	,-----|-- bra.w 1482a <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1474c:	|     '-> move.l 36(sp),-(sp)
   14750:	|         jsr 1485e <unlinkVar>
   14756:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14758:	|         movea.l 36(sp),a0
   1475c:	|         moveq #10,d0
   1475e:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14760:	|         moveq #12,d0
   14762:	|         move.l d0,24(sp)
   14766:	|         clr.l 20(sp)
   1476a:	|         move.l 1c7d8 <SysBase>,d0
   14770:	|         movea.l d0,a6
   14772:	|         move.l 24(sp),d0
   14776:	|         move.l 20(sp),d1
   1477a:	|         jsr -684(a6)
   1477e:	|         move.l d0,16(sp)
   14782:	|         move.l 16(sp),d0
   14786:	|         movea.l 36(sp),a0
   1478a:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   1478e:	|         movea.l 36(sp),a0
   14792:	|         move.l 4(a0),d0
   14796:	|     ,-- bne.s 1479e <makeFastArraySize+0x72>
   14798:	|     |   clr.w d0
   1479a:	+-----|-- bra.w 1482a <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   1479e:	|     '-> move.l 40(sp),d0
   147a2:	|         lsl.l #3,d0
   147a4:	|         move.l d0,12(sp)
   147a8:	|         clr.l 8(sp)
   147ac:	|         move.l 1c7d8 <SysBase>,d0
   147b2:	|         movea.l d0,a6
   147b4:	|         move.l 12(sp),d0
   147b8:	|         move.l 8(sp),d1
   147bc:	|         jsr -684(a6)
   147c0:	|         move.l d0,4(sp)
   147c4:	|         move.l 4(sp),d0
   147c8:	|         movea.l 36(sp),a0
   147cc:	|         movea.l 4(a0),a0
   147d0:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   147d2:	|         movea.l 36(sp),a0
   147d6:	|         movea.l 4(a0),a0
   147da:	|         move.l (a0),d0
   147dc:	|     ,-- bne.s 147e2 <makeFastArraySize+0xb6>
   147de:	|     |   clr.w d0
   147e0:	+-----|-- bra.s 1482a <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   147e2:	|     '-> clr.l 28(sp)
   147e6:	|     ,-- bra.s 14802 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   147e8:	|  ,--|-> movea.l 36(sp),a0
   147ec:	|  |  |   movea.l 4(a0),a0
   147f0:	|  |  |   move.l (a0),d1
   147f2:	|  |  |   move.l 28(sp),d0
   147f6:	|  |  |   lsl.l #3,d0
   147f8:	|  |  |   movea.l d1,a0
   147fa:	|  |  |   adda.l d0,a0
   147fc:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   147fe:	|  |  |   addq.l #1,28(sp)
   14802:	|  |  '-> move.l 28(sp),d0
   14806:	|  |      cmp.l 40(sp),d0
   1480a:	|  '----- blt.s 147e8 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   1480c:	|         movea.l 36(sp),a0
   14810:	|         movea.l 4(a0),a0
   14814:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   1481a:	|         movea.l 36(sp),a0
   1481e:	|         movea.l 4(a0),a0
   14822:	|         moveq #1,d0
   14824:	|         move.l d0,8(a0)
    return TRUE;
   14828:	|         moveq #1,d0
}
   1482a:	'-------> movea.l (sp)+,a6
   1482c:	          lea 28(sp),sp
   14830:	          rts

00014832 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14832:	move.l 4(sp),-(sp)
   14836:	jsr 1485e <unlinkVar>
   1483c:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1483e:	movea.l 4(sp),a0
   14842:	moveq #3,d0
   14844:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14846:	move.l 8(sp),-(sp)
   1484a:	jsr b8 <copyString>
   14850:	addq.l #4,sp
   14852:	movea.l 4(sp),a0
   14856:	move.l d0,4(a0)
}
   1485a:	nop
   1485c:	rts

0001485e <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1485e:	                      lea -16(sp),sp
   14862:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14864:	                      movea.l 24(sp),a0
   14868:	                      move.l (a0),d0
   1486a:	                      moveq #10,d1
   1486c:	                      cmp.l d0,d1
   1486e:	            ,-------- beq.w 14926 <unlinkVar+0xc8>
   14872:	            |         moveq #10,d1
   14874:	            |         cmp.l d0,d1
   14876:	,-----------|-------- bcs.w 1499a <unlinkVar+0x13c>
   1487a:	|           |         moveq #8,d1
   1487c:	|           |         cmp.l d0,d1
   1487e:	|  ,--------|-------- beq.w 14986 <unlinkVar+0x128>
   14882:	|  |        |         moveq #8,d1
   14884:	|  |        |         cmp.l d0,d1
   14886:	+--|--------|-------- bcs.w 1499a <unlinkVar+0x13c>
   1488a:	|  |        |         moveq #3,d1
   1488c:	|  |        |         cmp.l d0,d1
   1488e:	|  |        |     ,-- beq.s 1489a <unlinkVar+0x3c>
   14890:	|  |        |     |   moveq #6,d1
   14892:	|  |        |     |   cmp.l d0,d1
   14894:	|  |        |  ,--|-- beq.s 148c0 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14896:	+--|--------|--|--|-- bra.w 1499a <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   1489a:	|  |        |  |  '-> movea.l 24(sp),a0
   1489e:	|  |        |  |      move.l 4(a0),4(sp)
   148a4:	|  |        |  |      move.l 1c7d8 <SysBase>,d0
   148aa:	|  |        |  |      movea.l d0,a6
   148ac:	|  |        |  |      movea.l 4(sp),a1
   148b0:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   148b4:	|  |        |  |      movea.l 24(sp),a0
   148b8:	|  |        |  |      clr.l 4(a0)
		break;
   148bc:	|  |  ,-----|--|----- bra.w 149a4 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   148c0:	|  |  |     |  '----> movea.l 24(sp),a0
   148c4:	|  |  |     |         movea.l 4(a0),a0
   148c8:	|  |  |     |         move.l 8(a0),d0
   148cc:	|  |  |     |         subq.l #1,d0
   148ce:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   148d2:	|  |  |     |         movea.l 24(sp),a0
   148d6:	|  |  |     |         movea.l 4(a0),a0
   148da:	|  |  |     |         move.l 8(a0),d0
   148de:	|  |  |  ,--|-------- bgt.w 1499e <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   148e2:	|  |  |  |  |     ,-- bra.s 148f6 <unlinkVar+0x98>
   148e4:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   148e8:	|  |  |  |  |  |  |   move.l 4(a0),d0
   148ec:	|  |  |  |  |  |  |   move.l d0,-(sp)
   148ee:	|  |  |  |  |  |  |   jsr 14f94 <trimStack>
   148f4:	|  |  |  |  |  |  |   addq.l #4,sp
   148f6:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   148fa:	|  |  |  |  |  |      movea.l 4(a0),a0
   148fe:	|  |  |  |  |  |      move.l (a0),d0
   14900:	|  |  |  |  |  '----- bne.s 148e4 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14902:	|  |  |  |  |         movea.l 24(sp),a0
   14906:	|  |  |  |  |         move.l 4(a0),8(sp)
   1490c:	|  |  |  |  |         move.l 1c7d8 <SysBase>,d0
   14912:	|  |  |  |  |         movea.l d0,a6
   14914:	|  |  |  |  |         movea.l 8(sp),a1
   14918:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   1491c:	|  |  |  |  |         movea.l 24(sp),a0
   14920:	|  |  |  |  |         clr.l 4(a0)
		break;
   14924:	|  |  |  +--|-------- bra.s 1499e <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14926:	|  |  |  |  '-------> movea.l 24(sp),a0
   1492a:	|  |  |  |            movea.l 4(a0),a0
   1492e:	|  |  |  |            move.l 8(a0),d0
   14932:	|  |  |  |            subq.l #1,d0
   14934:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14938:	|  |  |  |            movea.l 24(sp),a0
   1493c:	|  |  |  |            movea.l 4(a0),a0
   14940:	|  |  |  |            move.l 8(a0),d0
   14944:	|  |  |  |        ,-- bgt.s 149a2 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14946:	|  |  |  |        |   movea.l 24(sp),a0
   1494a:	|  |  |  |        |   movea.l 4(a0),a0
   1494e:	|  |  |  |        |   move.l (a0),16(sp)
   14952:	|  |  |  |        |   move.l 1c7d8 <SysBase>,d0
   14958:	|  |  |  |        |   movea.l d0,a6
   1495a:	|  |  |  |        |   movea.l 16(sp),a1
   1495e:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14962:	|  |  |  |        |   movea.l 24(sp),a0
   14966:	|  |  |  |        |   move.l 4(a0),12(sp)
   1496c:	|  |  |  |        |   move.l 1c7d8 <SysBase>,d0
   14972:	|  |  |  |        |   movea.l d0,a6
   14974:	|  |  |  |        |   movea.l 12(sp),a1
   14978:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   1497c:	|  |  |  |        |   movea.l 24(sp),a0
   14980:	|  |  |  |        |   clr.l 4(a0)
		break;
   14984:	|  |  |  |        +-- bra.s 149a2 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14986:	|  '--|--|--------|-> movea.l 24(sp),a0
   1498a:	|     |  |        |   move.l 4(a0),d0
   1498e:	|     |  |        |   move.l d0,-(sp)
   14990:	|     |  |        |   jsr 9752 <deleteAnim>
   14996:	|     |  |        |   addq.l #4,sp
		break;
   14998:	|     +--|--------|-- bra.s 149a4 <unlinkVar+0x146>
		break;
   1499a:	'-----|--|--------|-> nop
   1499c:	      +--|--------|-- bra.s 149a4 <unlinkVar+0x146>
		break;
   1499e:	      |  '--------|-> nop
   149a0:	      +-----------|-- bra.s 149a4 <unlinkVar+0x146>
		break;
   149a2:	      |           '-> nop
	}
}
   149a4:	      '-------------> nop
   149a6:	                      movea.l (sp)+,a6
   149a8:	                      lea 16(sp),sp
   149ac:	                      rts

000149ae <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   149ae:	       movea.l 4(sp),a0
   149b2:	       move.l (a0),d0
   149b4:	       movea.l 8(sp),a0
   149b8:	       move.l d0,(a0)
	switch (to->varType) {
   149ba:	       movea.l 8(sp),a0
   149be:	       move.l (a0),d0
   149c0:	       moveq #10,d1
   149c2:	       cmp.l d0,d1
   149c4:	,----- bcs.w 14ab6 <copyMain+0x108>
   149c8:	|      add.l d0,d0
   149ca:	|      movea.l d0,a0
   149cc:	|      adda.l #84440,a0
   149d2:	|      move.w (a0),d0
   149d4:	|      jmp (149d8 <copyMain+0x2a>,pc,d0.w)
   149d8:	|      .short 0x00da
   149da:	|      ori.b #22,(a6)
   149de:	|      ori.w #22,(a4)
   149e2:	|      ori.b #-126,(a6)
   149e6:	|      ori.b #-68,(a6)
   149ea:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   149f2:	|      move.l 4(a0),d0
   149f6:	|      movea.l 8(sp),a0
   149fa:	|      move.l d0,4(a0)
		return TRUE;
   149fe:	|      moveq #1,d0
   14a00:	|  ,-- bra.w 14ac8 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14a04:	|  |   movea.l 4(sp),a0
   14a08:	|  |   move.l 4(a0),d0
   14a0c:	|  |   movea.l 8(sp),a0
   14a10:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14a14:	|  |   movea.l 8(sp),a0
   14a18:	|  |   movea.l 4(a0),a0
   14a1c:	|  |   move.l 8(a0),d0
   14a20:	|  |   addq.l #1,d0
   14a22:	|  |   move.l d0,8(a0)
		return TRUE;
   14a26:	|  |   moveq #1,d0
   14a28:	|  +-- bra.w 14ac8 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14a2c:	|  |   movea.l 4(sp),a0
   14a30:	|  |   move.l 4(a0),d0
   14a34:	|  |   move.l d0,-(sp)
   14a36:	|  |   jsr b8 <copyString>
   14a3c:	|  |   addq.l #4,sp
   14a3e:	|  |   movea.l 8(sp),a0
   14a42:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14a46:	|  |   movea.l 8(sp),a0
   14a4a:	|  |   move.l 4(a0),d0
   14a4e:	|  |   sne d0
   14a50:	|  |   neg.b d0
   14a52:	|  |   move.b d0,d0
   14a54:	|  |   andi.w #255,d0
   14a58:	|  +-- bra.s 14ac8 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14a5a:	|  |   movea.l 4(sp),a0
   14a5e:	|  |   move.l 4(a0),d0
   14a62:	|  |   movea.l 8(sp),a0
   14a66:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14a6a:	|  |   movea.l 8(sp),a0
   14a6e:	|  |   movea.l 4(a0),a0
   14a72:	|  |   move.l 8(a0),d0
   14a76:	|  |   addq.l #1,d0
   14a78:	|  |   move.l d0,8(a0)
		return TRUE;
   14a7c:	|  |   moveq #1,d0
   14a7e:	|  +-- bra.s 14ac8 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14a80:	|  |   movea.l 4(sp),a0
   14a84:	|  |   move.l 4(a0),d0
   14a88:	|  |   movea.l 8(sp),a0
   14a8c:	|  |   move.l d0,4(a0)
		return TRUE;
   14a90:	|  |   moveq #1,d0
   14a92:	|  +-- bra.s 14ac8 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14a94:	|  |   movea.l 4(sp),a0
   14a98:	|  |   move.l 4(a0),d0
   14a9c:	|  |   move.l d0,-(sp)
   14a9e:	|  |   jsr 9386 <copyAnim>
   14aa4:	|  |   addq.l #4,sp
   14aa6:	|  |   movea.l 8(sp),a0
   14aaa:	|  |   move.l d0,4(a0)
		return TRUE;
   14aae:	|  |   moveq #1,d0
   14ab0:	|  +-- bra.s 14ac8 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14ab2:	|  |   moveq #1,d0
   14ab4:	|  +-- bra.s 14ac8 <copyMain+0x11a>

		default:
		break;
   14ab6:	'--|-> nop
	}
	KPrintF("Unknown value type");
   14ab8:	   |   pea 19e3a <talk.c.490538ff+0x51e>
   14abe:	   |   jsr 170d4 <KPrintF>
   14ac4:	   |   addq.l #4,sp
	return FALSE;
   14ac6:	   |   clr.w d0
}
   14ac8:	   '-> rts

00014aca <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14aca:	move.l 8(sp),-(sp)
   14ace:	jsr 1485e <unlinkVar>
   14ad4:	addq.l #4,sp
	return copyMain(from, to);
   14ad6:	move.l 8(sp),-(sp)
   14ada:	move.l 8(sp),-(sp)
   14ade:	jsr 149ae <copyMain>
   14ae4:	addq.l #8,sp
}
   14ae6:	rts

00014ae8 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14ae8:	       movea.l 4(sp),a0
   14aec:	       move.l (a0),d0
   14aee:	       moveq #8,d1
   14af0:	       cmp.l d0,d1
   14af2:	   ,-- bne.s 14b08 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14af4:	   |   movea.l 4(sp),a0
   14af8:	   |   move.l 4(a0),d0
   14afc:	   |   move.l d0,-(sp)
   14afe:	   |   jsr 9386 <copyAnim>
   14b04:	   |   addq.l #4,sp
   14b06:	,--|-- bra.s 14b4e <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14b08:	|  '-> movea.l 4(sp),a0
   14b0c:	|      move.l (a0),d0
   14b0e:	|      moveq #1,d1
   14b10:	|      cmp.l d0,d1
   14b12:	|  ,-- bne.s 14b26 <getAnimationFromVar+0x3e>
   14b14:	|  |   movea.l 4(sp),a0
   14b18:	|  |   move.l 4(a0),d0
   14b1c:	|  +-- bne.s 14b26 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14b1e:	|  |   jsr ab56 <makeNullAnim>
   14b24:	+--|-- bra.s 14b4e <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14b26:	|  '-> movea.l 4(sp),a0
   14b2a:	|      move.l (a0),d0
   14b2c:	|      add.l d0,d0
   14b2e:	|      movea.l d0,a1
   14b30:	|      adda.l d0,a1
   14b32:	|      lea 1c6a8 <typeName>,a0
   14b38:	|      move.l (0,a1,a0.l),d0
   14b3c:	|      move.l d0,-(sp)
   14b3e:	|      pea 19d26 <talk.c.490538ff+0x40a>
   14b44:	|      jsr 170d4 <KPrintF>
   14b4a:	|      addq.l #8,sp
	return NULL;
   14b4c:	|      moveq #0,d0
}
   14b4e:	'----> rts

00014b50 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14b50:	       movea.l 4(sp),a0
   14b54:	       move.l (a0),d0
   14b56:	       moveq #10,d1
   14b58:	       cmp.l d0,d1
   14b5a:	,----- bcs.w 14be0 <getBoolean+0x90>
   14b5e:	|      add.l d0,d0
   14b60:	|      movea.l d0,a0
   14b62:	|      adda.l #84846,a0
   14b68:	|      move.w (a0),d0
   14b6a:	|      jmp (14b6e <getBoolean+0x1e>,pc,d0.w)
   14b6e:	|      ori.b #26,(a6)
   14b72:	|      ori.w #68,(114,a2,d0.w)
   14b78:	|      ori.w #46,(114,a2,d0.w)
   14b7e:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14b84:	|      clr.w d0
   14b86:	|  ,-- bra.s 14be4 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14b88:	|  |   movea.l 4(sp),a0
   14b8c:	|  |   move.l 4(a0),d0
   14b90:	|  |   sne d0
   14b92:	|  |   neg.b d0
   14b94:	|  |   move.b d0,d0
   14b96:	|  |   andi.w #255,d0
   14b9a:	|  +-- bra.s 14be4 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14b9c:	|  |   movea.l 4(sp),a0
   14ba0:	|  |   movea.l 4(a0),a0
   14ba4:	|  |   move.l (a0),d0
   14ba6:	|  |   sne d0
   14ba8:	|  |   neg.b d0
   14baa:	|  |   move.b d0,d0
   14bac:	|  |   andi.w #255,d0
   14bb0:	|  +-- bra.s 14be4 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14bb2:	|  |   movea.l 4(sp),a0
   14bb6:	|  |   movea.l 4(a0),a0
   14bba:	|  |   move.b (a0),d0
   14bbc:	|  |   sne d0
   14bbe:	|  |   neg.b d0
   14bc0:	|  |   move.b d0,d0
   14bc2:	|  |   andi.w #255,d0
   14bc6:	|  +-- bra.s 14be4 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14bc8:	|  |   movea.l 4(sp),a0
   14bcc:	|  |   movea.l 4(a0),a0
   14bd0:	|  |   move.l 4(a0),d0
   14bd4:	|  |   sne d0
   14bd6:	|  |   neg.b d0
   14bd8:	|  |   move.b d0,d0
   14bda:	|  |   andi.w #255,d0
   14bde:	|  +-- bra.s 14be4 <getBoolean+0x94>

		default:
		break;
   14be0:	'--|-> nop
	}
	return TRUE;
   14be2:	   |   moveq #1,d0
}
   14be4:	   '-> rts

00014be6 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14be6:	      ,----------> lea -76(sp),sp
   14bea:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14bec:	      |            movea.l 84(sp),a0
   14bf0:	      |            move.l (a0),d0
   14bf2:	      |            moveq #10,d1
   14bf4:	      |            cmp.l d0,d1
   14bf6:	,-----|----------- bcs.w 14e94 <getTextFromAnyVar+0x2ae>
   14bfa:	|     |            add.l d0,d0
   14bfc:	|     |            movea.l d0,a0
   14bfe:	|     |            adda.l #85002,a0
   14c04:	|     |            move.w (a0),d0
   14c06:	|     |            jmp (14c0a <getTextFromAnyVar+0x24>,pc,d0.w)
   14c0a:	|     |            .short 0x028a
   14c0c:	|     |            bset d0,(a0)+
   14c0e:	|     |            .short 0x028a
   14c10:	|     |            ori.b #-118,(a6)
   14c14:	|     |            andi.b #8,ccr
   14c18:	|     |            andi.w #650,-(a0)
   14c1c:	|     |            .short 0x028a
   14c1e:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14c24:	|     |            move.l 4(a0),d0
   14c28:	|     |            move.l d0,-(sp)
   14c2a:	|     |            jsr b8 <copyString>
   14c30:	|     |            addq.l #4,sp
   14c32:	|  ,--|----------- bra.w 14eb6 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14c36:	|  |  |            pea 19e4d <talk.c.490538ff+0x531>
   14c3c:	|  |  |            jsr b8 <copyString>
   14c42:	|  |  |            addq.l #4,sp
   14c44:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14c48:	|  |  |            clr.l 72(sp)
   14c4c:	|  |  |     ,----- bra.w 14cf6 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14c50:	|  |  |  ,--|----> pea 19e53 <talk.c.490538ff+0x537>
   14c56:	|  |  |  |  |      move.l 80(sp),-(sp)
   14c5a:	|  |  |  |  |      jsr 13b3c <joinStrings>
   14c60:	|  |  |  |  |      addq.l #8,sp
   14c62:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14c66:	|  |  |  |  |  ,-- bne.s 14c6e <getTextFromAnyVar+0x88>
   14c68:	|  |  |  |  |  |   moveq #0,d0
   14c6a:	|  +--|--|--|--|-- bra.w 14eb6 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14c6e:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   14c74:	|  |  |  |  |      move.l 1c7d8 <SysBase>,d0
   14c7a:	|  |  |  |  |      movea.l d0,a6
   14c7c:	|  |  |  |  |      movea.l 56(sp),a1
   14c80:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14c84:	|  |  |  |  |      movea.l 84(sp),a0
   14c88:	|  |  |  |  |      movea.l 4(a0),a0
   14c8c:	|  |  |  |  |      move.l (a0),d1
   14c8e:	|  |  |  |  |      move.l 72(sp),d0
   14c92:	|  |  |  |  |      lsl.l #3,d0
   14c94:	|  |  |  |  |      add.l d1,d0
   14c96:	|  |  |  |  |      move.l d0,-(sp)
   14c98:	|  |  +--|--|----- jsr 14be6 <getTextFromAnyVar>(pc)
   14c9c:	|  |  |  |  |      addq.l #4,sp
   14c9e:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14ca2:	|  |  |  |  |      move.l 52(sp),-(sp)
   14ca6:	|  |  |  |  |      move.l 64(sp),-(sp)
   14caa:	|  |  |  |  |      jsr 13b3c <joinStrings>
   14cb0:	|  |  |  |  |      addq.l #8,sp
   14cb2:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14cb6:	|  |  |  |  |  ,-- bne.s 14cbe <getTextFromAnyVar+0xd8>
   14cb8:	|  |  |  |  |  |   moveq #0,d0
   14cba:	|  +--|--|--|--|-- bra.w 14eb6 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14cbe:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   14cc4:	|  |  |  |  |      move.l 1c7d8 <SysBase>,d0
   14cca:	|  |  |  |  |      movea.l d0,a6
   14ccc:	|  |  |  |  |      movea.l 48(sp),a1
   14cd0:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14cd4:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14cd8:	|  |  |  |  |      move.l 60(sp),44(sp)
   14cde:	|  |  |  |  |      move.l 1c7d8 <SysBase>,d0
   14ce4:	|  |  |  |  |      movea.l d0,a6
   14ce6:	|  |  |  |  |      movea.l 44(sp),a1
   14cea:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14cee:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14cf2:	|  |  |  |  |      addq.l #1,72(sp)
   14cf6:	|  |  |  |  '----> movea.l 84(sp),a0
   14cfa:	|  |  |  |         movea.l 4(a0),a0
   14cfe:	|  |  |  |         move.l 4(a0),d0
   14d02:	|  |  |  |         cmp.l 72(sp),d0
   14d06:	|  |  |  '-------- bgt.w 14c50 <getTextFromAnyVar+0x6a>
			}
			return builder;
   14d0a:	|  |  |            move.l 76(sp),d0
   14d0e:	|  +--|----------- bra.w 14eb6 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14d12:	|  |  |            pea 19e55 <talk.c.490538ff+0x539>
   14d18:	|  |  |            jsr b8 <copyString>
   14d1e:	|  |  |            addq.l #4,sp
   14d20:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14d24:	|  |  |            movea.l 84(sp),a0
   14d28:	|  |  |            movea.l 4(a0),a0
   14d2c:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14d30:	|  |  |     ,----- bra.w 14dd2 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14d34:	|  |  |  ,--|----> pea 19e53 <talk.c.490538ff+0x537>
   14d3a:	|  |  |  |  |      move.l 72(sp),-(sp)
   14d3e:	|  |  |  |  |      jsr 13b3c <joinStrings>
   14d44:	|  |  |  |  |      addq.l #8,sp
   14d46:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   14d4a:	|  |  |  |  |  ,-- bne.s 14d52 <getTextFromAnyVar+0x16c>
   14d4c:	|  |  |  |  |  |   moveq #0,d0
   14d4e:	|  +--|--|--|--|-- bra.w 14eb6 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14d52:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   14d58:	|  |  |  |  |      move.l 1c7d8 <SysBase>,d0
   14d5e:	|  |  |  |  |      movea.l d0,a6
   14d60:	|  |  |  |  |      movea.l 32(sp),a1
   14d64:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   14d68:	|  |  |  |  |      move.l 64(sp),d0
   14d6c:	|  |  |  |  |      move.l d0,-(sp)
   14d6e:	|  |  '--|--|----- jsr 14be6 <getTextFromAnyVar>(pc)
   14d72:	|  |     |  |      addq.l #4,sp
   14d74:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   14d78:	|  |     |  |      move.l 28(sp),-(sp)
   14d7c:	|  |     |  |      move.l 40(sp),-(sp)
   14d80:	|  |     |  |      jsr 13b3c <joinStrings>
   14d86:	|  |     |  |      addq.l #8,sp
   14d88:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   14d8c:	|  |     |  |  ,-- bne.s 14d94 <getTextFromAnyVar+0x1ae>
   14d8e:	|  |     |  |  |   moveq #0,d0
   14d90:	|  +-----|--|--|-- bra.w 14eb6 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14d94:	|  |     |  |  '-> move.l 28(sp),24(sp)
   14d9a:	|  |     |  |      move.l 1c7d8 <SysBase>,d0
   14da0:	|  |     |  |      movea.l d0,a6
   14da2:	|  |     |  |      movea.l 24(sp),a1
   14da6:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   14daa:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   14dae:	|  |     |  |      move.l 36(sp),20(sp)
   14db4:	|  |     |  |      move.l 1c7d8 <SysBase>,d0
   14dba:	|  |     |  |      movea.l d0,a6
   14dbc:	|  |     |  |      movea.l 20(sp),a1
   14dc0:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14dc4:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14dc8:	|  |     |  |      movea.l 64(sp),a0
   14dcc:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14dd2:	|  |     |  '----> tst.l 64(sp)
   14dd6:	|  |     '-------- bne.w 14d34 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14dda:	|  |               move.l 68(sp),d0
   14dde:	|  +-------------- bra.w 14eb6 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14de2:	|  |               moveq #10,d0
   14de4:	|  |               move.l d0,16(sp)
   14de8:	|  |               clr.l 12(sp)
   14dec:	|  |               move.l 1c7d8 <SysBase>,d0
   14df2:	|  |               movea.l d0,a6
   14df4:	|  |               move.l 16(sp),d0
   14df8:	|  |               move.l 12(sp),d1
   14dfc:	|  |               jsr -684(a6)
   14e00:	|  |               move.l d0,8(sp)
   14e04:	|  |               move.l 8(sp),d0
   14e08:	|  |               move.l d0,4(sp)
			if (! buff) {
   14e0c:	|  |           ,-- bne.s 14e22 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14e0e:	|  |           |   pea 19e5c <talk.c.490538ff+0x540>
   14e14:	|  |           |   jsr 170d4 <KPrintF>
   14e1a:	|  |           |   addq.l #4,sp
				return NULL;
   14e1c:	|  |           |   moveq #0,d0
   14e1e:	|  +-----------|-- bra.w 14eb6 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14e22:	|  |           '-> movea.l 84(sp),a0
   14e26:	|  |               move.l 4(a0),d0
   14e2a:	|  |               move.l d0,-(sp)
   14e2c:	|  |               pea 19e86 <talk.c.490538ff+0x56a>
   14e32:	|  |               move.l 12(sp),-(sp)
   14e36:	|  |               jsr 13e1a <sprintf>
   14e3c:	|  |               lea 12(sp),sp
			return buff;
   14e40:	|  |               move.l 4(sp),d0
   14e44:	|  +-------------- bra.s 14eb6 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14e46:	|  |               movea.l 84(sp),a0
   14e4a:	|  |               move.l 4(a0),d0
   14e4e:	|  |               move.l d0,-(sp)
   14e50:	|  |               jsr 4964 <resourceNameFromNum>
   14e56:	|  |               addq.l #4,sp
   14e58:	|  |               move.l d0,-(sp)
   14e5a:	|  |               pea 188c3 <PutChar+0xd4d>
   14e60:	|  |               jsr 13b3c <joinStrings>
   14e66:	|  |               addq.l #8,sp
   14e68:	|  +-------------- bra.s 14eb6 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14e6a:	|  |               movea.l 84(sp),a0
   14e6e:	|  |               move.l 4(a0),d0
   14e72:	|  |               move.l d0,-(sp)
   14e74:	|  |               jsr d376 <findObjectType>
   14e7a:	|  |               addq.l #4,sp
   14e7c:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14e80:	+--|-------------- beq.s 14e94 <getTextFromAnyVar+0x2ae>
   14e82:	|  |               movea.l 40(sp),a0
   14e86:	|  |               move.l (a0),d0
   14e88:	|  |               move.l d0,-(sp)
   14e8a:	|  |               jsr b8 <copyString>
   14e90:	|  |               addq.l #4,sp
   14e92:	|  +-------------- bra.s 14eb6 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14e94:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14e96:	   |               movea.l 84(sp),a0
   14e9a:	   |               move.l (a0),d0
   14e9c:	   |               add.l d0,d0
   14e9e:	   |               movea.l d0,a1
   14ea0:	   |               adda.l d0,a1
   14ea2:	   |               lea 1c6a8 <typeName>,a0
   14ea8:	   |               move.l (0,a1,a0.l),d0
   14eac:	   |               move.l d0,-(sp)
   14eae:	   |               jsr b8 <copyString>
   14eb4:	   |               addq.l #4,sp
}
   14eb6:	   '-------------> movea.l (sp)+,a6
   14eb8:	                   lea 76(sp),sp
   14ebc:	                   rts

00014ebe <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14ebe:	move.l 4(sp),-(sp)
   14ec2:	jsr 1485e <unlinkVar>
   14ec8:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   14eca:	movea.l 4(sp),a0
   14ece:	moveq #8,d0
   14ed0:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14ed2:	movea.l 4(sp),a0
   14ed6:	move.l 8(sp),4(a0)
}
   14edc:	nop
   14ede:	rts

00014ee0 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14ee0:	move.l 4(sp),-(sp)
   14ee4:	jsr 1485e <unlinkVar>
   14eea:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14eec:	movea.l 4(sp),a0
   14ef0:	moveq #9,d0
   14ef2:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14ef4:	movea.l 4(sp),a0
   14ef8:	move.l 8(sp),4(a0)
}
   14efe:	nop
   14f00:	rts

00014f02 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   14f02:	move.l 4(sp),-(sp)
   14f06:	jsr 1485e <unlinkVar>
   14f0c:	addq.l #4,sp
   14f0e:	movea.l 4(sp),a0
   14f12:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   14f16:	movea.l 4(sp),a0
   14f1a:	move.l 12(sp),4(a0)
   14f20:	nop
   14f22:	rts

00014f24 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14f24:	      ,-- bra.s 14f36 <stackGetByIndex+0x12>
        vS = vS->next;
   14f26:	,-----|-> movea.l 4(sp),a0
   14f2a:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14f30:	|     +-- bne.s 14f36 <stackGetByIndex+0x12>
            return NULL;
   14f32:	|     |   moveq #0,d0
   14f34:	|  ,--|-- bra.s 14f4a <stackGetByIndex+0x26>
    while (theIndex--) {
   14f36:	|  |  '-> move.l 8(sp),d0
   14f3a:	|  |      move.l d0,d1
   14f3c:	|  |      subq.l #1,d1
   14f3e:	|  |      move.l d1,8(sp)
   14f42:	|  |      tst.l d0
   14f44:	'--|----- bne.s 14f26 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   14f46:	   |      move.l 4(sp),d0
}
   14f4a:	   '----> rts

00014f4c <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14f4c:	          tst.l 4(sp)
   14f50:	      ,-- bne.s 14f60 <stackFindLast+0x14>
		return NULL;
   14f52:	      |   moveq #0,d0
   14f54:	,-----|-- bra.s 14f6e <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   14f56:	|  ,--|-> movea.l 4(sp),a0
   14f5a:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   14f60:	|  |  '-> movea.l 4(sp),a0
   14f64:	|  |      move.l 8(a0),d0
   14f68:	|  '----- bne.s 14f56 <stackFindLast+0xa>

	return hunt;
   14f6a:	|         move.l 4(sp),d0
}
   14f6e:	'-------> rts

00014f70 <stackSize>:

int stackSize (const struct stackHandler * me) {
   14f70:	       subq.l #8,sp
	int r = 0;
   14f72:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   14f76:	       movea.l 12(sp),a0
   14f7a:	       move.l (a0),(sp)
	while (a) {
   14f7c:	   ,-- bra.s 14f88 <stackSize+0x18>
		r ++;
   14f7e:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   14f82:	|  |   movea.l (sp),a0
   14f84:	|  |   move.l 8(a0),(sp)
	while (a) {
   14f88:	|  '-> tst.l (sp)
   14f8a:	'----- bne.s 14f7e <stackSize+0xe>
	}
	return r;
   14f8c:	       move.l 4(sp),d0
}
   14f90:	       addq.l #8,sp
   14f92:	       rts

00014f94 <trimStack>:

void trimStack (struct variableStack ** stack) {
   14f94:	subq.l #8,sp
   14f96:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   14f98:	movea.l 16(sp),a0
   14f9c:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14fa0:	movea.l 16(sp),a0
   14fa4:	movea.l (a0),a0
   14fa6:	move.l 8(a0),d0
   14faa:	movea.l 16(sp),a0
   14fae:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14fb0:	move.l 8(sp),d0
   14fb4:	move.l d0,-(sp)
   14fb6:	jsr 1485e <unlinkVar>
   14fbc:	addq.l #4,sp
	FreeVec(killMe);
   14fbe:	move.l 8(sp),4(sp)
   14fc4:	move.l 1c7d8 <SysBase>,d0
   14fca:	movea.l d0,a6
   14fcc:	movea.l 4(sp),a1
   14fd0:	jsr -690(a6)
   14fd4:	nop
   14fd6:	movea.l (sp)+,a6
   14fd8:	addq.l #8,sp
   14fda:	rts

00014fdc <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14fdc:	       lea -52(sp),sp
   14fe0:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14fe2:	       pea 19e89 <talk.c.490538ff+0x56d>
   14fe8:	       jsr 170d4 <KPrintF>
   14fee:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14ff0:	       moveq #68,d0
   14ff2:	       move.l d0,52(sp)
   14ff6:	       clr.l 48(sp)
   14ffa:	       move.l 1c7d8 <SysBase>,d0
   15000:	       movea.l d0,a6
   15002:	       move.l 52(sp),d0
   15006:	       move.l 48(sp),d1
   1500a:	       jsr -684(a6)
   1500e:	       move.l d0,44(sp)
   15012:	       move.l 44(sp),d0
   15016:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   1501a:	   ,-- bne.s 15022 <freeze+0x46>
   1501c:	   |   clr.w d0
   1501e:	,--|-- bra.w 151b4 <freeze+0x1d8>

	CstFreeze();
   15022:	|  '-> jsr 1bce <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15028:	|      move.l 1c870 <sceneWidth>,d0
   1502e:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   15032:	|      move.l 1c874 <sceneHeight>,d0
   15038:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   1503c:	|      move.l 1c870 <sceneWidth>,d0
   15042:	|      movea.l 40(sp),a0
   15046:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   1504a:	|      move.l 1c874 <sceneHeight>,d0
   15050:	|      movea.l 40(sp),a0
   15054:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15058:	|      move.l 1c88e <cameraX>,d0
   1505e:	|      movea.l 40(sp),a0
   15062:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   15066:	|      move.l 1c892 <cameraY>,d0
   1506c:	|      movea.l 40(sp),a0
   15070:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   15074:	|      move.l 1c16a <cameraZoom>,d0
   1507a:	|      movea.l 40(sp),a0
   1507e:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   15082:	|      move.w #1,1c87c <backdropExists>

	newFreezer -> allPeople = allPeople;
   1508a:	|      move.l 1c838 <allPeople>,d0
   15090:	|      movea.l 40(sp),a0
   15094:	|      move.l d0,(a0)
	allPeople = NULL;
   15096:	|      clr.l 1c838 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   1509c:	|      moveq #42,d0
   1509e:	|      move.l d0,28(sp)
   150a2:	|      clr.l 24(sp)
   150a6:	|      move.l 1c7d8 <SysBase>,d0
   150ac:	|      movea.l d0,a6
   150ae:	|      move.l 28(sp),d0
   150b2:	|      move.l 24(sp),d1
   150b6:	|      jsr -684(a6)
   150ba:	|      move.l d0,20(sp)
   150be:	|      move.l 20(sp),d0
   150c2:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   150c6:	|  ,-- bne.s 150ce <freeze+0xf2>
   150c8:	|  |   clr.w d0
   150ca:	+--|-- bra.w 151b4 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   150ce:	|  '-> move.l 1c8e4 <allScreenRegions>,d0
   150d4:	|      movea.l 40(sp),a0
   150d8:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   150dc:	|      clr.l 1c8e4 <allScreenRegions>
	overRegion = NULL;
   150e2:	|      clr.l 1c8e8 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   150e8:	|      move.l 1c6d2 <mouseCursorAnim>,d0
   150ee:	|      movea.l 40(sp),a0
   150f2:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   150f6:	|      move.l 1c6d6 <mouseCursorFrameNum>,d0
   150fc:	|      movea.l 40(sp),a0
   15100:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   15104:	|      jsr ab56 <makeNullAnim>
   1510a:	|      move.l d0,1c6d2 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   15110:	|      clr.l 1c6d6 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   15116:	|      move.l 1c834 <zBuffer>,d0
   1511c:	|      movea.l 40(sp),a0
   15120:	|      move.l d0,60(a0)
	zBuffer = NULL;
   15124:	|      clr.l 1c834 <zBuffer>

	newFreezer -> speech = speech;
   1512a:	|      move.l 1c728 <speech>,d0
   15130:	|      movea.l 40(sp),a0
   15134:	|      move.l d0,20(a0)
	initSpeech ();
   15138:	|      jsr 3e5a <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   1513e:	|      move.l 1c148 <currentEvents>,d0
   15144:	|      movea.l 40(sp),a0
   15148:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1514c:	|      moveq #28,d0
   1514e:	|      move.l d0,12(sp)
   15152:	|      clr.l 8(sp)
   15156:	|      move.l 1c7d8 <SysBase>,d0
   1515c:	|      movea.l d0,a6
   1515e:	|      move.l 12(sp),d0
   15162:	|      move.l 8(sp),d1
   15166:	|      jsr -684(a6)
   1516a:	|      move.l d0,4(sp)
   1516e:	|      move.l 4(sp),d0
   15172:	|      move.l d0,1c148 <currentEvents>
	if (!currentEvents) return FALSE;
   15178:	|      move.l 1c148 <currentEvents>,d0
   1517e:	|  ,-- bne.s 15184 <freeze+0x1a8>
   15180:	|  |   clr.w d0
   15182:	+--|-- bra.s 151b4 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   15184:	|  '-> move.l 1c148 <currentEvents>,d0
   1518a:	|      pea 1c <_start+0x1c>
   1518e:	|      clr.l -(sp)
   15190:	|      move.l d0,-(sp)
   15192:	|      jsr 17058 <memset>
   15198:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1519c:	|      move.l 1c8c8 <frozenStuff>,d0
   151a2:	|      movea.l 40(sp),a0
   151a6:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   151aa:	|      move.l 40(sp),1c8c8 <frozenStuff>

	return TRUE;
   151b2:	|      moveq #1,d0
}
   151b4:	'----> movea.l (sp)+,a6
   151b6:	       lea 52(sp),sp
   151ba:	       rts

000151bc <howFrozen>:

int howFrozen () {
   151bc:	       subq.l #8,sp
	int a = 0;
   151be:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   151c2:	       move.l 1c8c8 <frozenStuff>,(sp)
	while (f) {
   151c8:	   ,-- bra.s 151d4 <howFrozen+0x18>
		a ++;
   151ca:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   151ce:	|  |   movea.l (sp),a0
   151d0:	|  |   move.l 64(a0),(sp)
	while (f) {
   151d4:	|  '-> tst.l (sp)
   151d6:	'----- bne.s 151ca <howFrozen+0xe>
	}
	return a;
   151d8:	       move.l 4(sp),d0
}
   151dc:	       addq.l #8,sp
   151de:	       rts

000151e0 <unfreeze>:

void unfreeze () {
   151e0:	       lea -16(sp),sp
   151e4:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   151e6:	       move.l 1c8c8 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   151ee:	       move.l 1c8c8 <frozenStuff>,d0
   151f4:	,----- beq.w 1542c <unfreeze+0x24c>

	CstUnfreeze();
   151f8:	|      jsr 3abc <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   151fe:	|      movea.l 1c8c8 <frozenStuff>,a0
   15204:	|      move.l 48(a0),d0
   15208:	|      move.l d0,1c870 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   1520e:	|      movea.l 1c8c8 <frozenStuff>,a0
   15214:	|      move.l 52(a0),d0
   15218:	|      move.l d0,1c874 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   1521e:	|      movea.l 1c8c8 <frozenStuff>,a0
   15224:	|      move.l 40(a0),d0
   15228:	|      move.l d0,1c88e <cameraX>
	cameraY = frozenStuff -> cameraY;
   1522e:	|      movea.l 1c8c8 <frozenStuff>,a0
   15234:	|      move.l 44(a0),d0
   15238:	|      move.l d0,1c892 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1523e:	|      move.l 1c794 <input+0xa>,d0
   15244:	|      move.l d0,-(sp)
   15246:	|      jsr 17506 <__floatsisf>
   1524c:	|      addq.l #4,sp
   1524e:	|      move.l d0,d1
   15250:	|      move.l 1c16a <cameraZoom>,d0
   15256:	|      move.l d0,-(sp)
   15258:	|      move.l d1,-(sp)
   1525a:	|      jsr 175b8 <__mulsf3>
   15260:	|      addq.l #8,sp
   15262:	|      move.l d0,-(sp)
   15264:	|      jsr 1749e <__fixsfsi>
   1526a:	|      addq.l #4,sp
   1526c:	|      move.l d0,1c794 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15272:	|      move.l 1c798 <input+0xe>,d0
   15278:	|      move.l d0,-(sp)
   1527a:	|      jsr 17506 <__floatsisf>
   15280:	|      addq.l #4,sp
   15282:	|      move.l d0,d1
   15284:	|      move.l 1c16a <cameraZoom>,d0
   1528a:	|      move.l d0,-(sp)
   1528c:	|      move.l d1,-(sp)
   1528e:	|      jsr 175b8 <__mulsf3>
   15294:	|      addq.l #8,sp
   15296:	|      move.l d0,-(sp)
   15298:	|      jsr 1749e <__fixsfsi>
   1529e:	|      addq.l #4,sp
   152a0:	|      move.l d0,1c798 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   152a6:	|      movea.l 1c8c8 <frozenStuff>,a0
   152ac:	|      move.l 56(a0),d0
   152b0:	|      move.l d0,1c16a <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   152b6:	|      move.l 1c794 <input+0xa>,d0
   152bc:	|      move.l d0,-(sp)
   152be:	|      jsr 17506 <__floatsisf>
   152c4:	|      addq.l #4,sp
   152c6:	|      move.l d0,d1
   152c8:	|      move.l 1c16a <cameraZoom>,d0
   152ce:	|      move.l d0,-(sp)
   152d0:	|      move.l d1,-(sp)
   152d2:	|      jsr 173bc <__divsf3>
   152d8:	|      addq.l #8,sp
   152da:	|      move.l d0,-(sp)
   152dc:	|      jsr 1749e <__fixsfsi>
   152e2:	|      addq.l #4,sp
   152e4:	|      move.l d0,1c794 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   152ea:	|      move.l 1c798 <input+0xe>,d0
   152f0:	|      move.l d0,-(sp)
   152f2:	|      jsr 17506 <__floatsisf>
   152f8:	|      addq.l #4,sp
   152fa:	|      move.l d0,d1
   152fc:	|      move.l 1c16a <cameraZoom>,d0
   15302:	|      move.l d0,-(sp)
   15304:	|      move.l d1,-(sp)
   15306:	|      jsr 173bc <__divsf3>
   1530c:	|      addq.l #8,sp
   1530e:	|      move.l d0,-(sp)
   15310:	|      jsr 1749e <__fixsfsi>
   15316:	|      addq.l #4,sp
   15318:	|      move.l d0,1c798 <input+0xe>

	killAllPeople ();
   1531e:	|      jsr a85e <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15324:	|      movea.l 1c8c8 <frozenStuff>,a0
   1532a:	|      move.l (a0),d0
   1532c:	|      move.l d0,1c838 <allPeople>

	killAllRegions ();
   15332:	|      jsr 15900 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15338:	|      movea.l 1c8c8 <frozenStuff>,a0
   1533e:	|      move.l 4(a0),d0
   15342:	|      move.l d0,1c8e4 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15348:	|      move.l 1c6d2 <mouseCursorAnim>,d0
   1534e:	|      move.l d0,-(sp)
   15350:	|      jsr 9752 <deleteAnim>
   15356:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15358:	|      movea.l 1c8c8 <frozenStuff>,a0
   1535e:	|      move.l 32(a0),d0
   15362:	|      move.l d0,1c6d2 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15368:	|      movea.l 1c8c8 <frozenStuff>,a0
   1536e:	|      move.l 36(a0),d0
   15372:	|      move.l d0,1c6d6 <mouseCursorFrameNum>

	killZBuffer ();
   15378:	|      jsr 84f8 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1537e:	|      movea.l 1c8c8 <frozenStuff>,a0
   15384:	|      move.l 60(a0),d0
   15388:	|      move.l d0,1c834 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1538e:	|      move.l 1c148 <currentEvents>,d0
   15394:	|  ,-- beq.s 153ae <unfreeze+0x1ce>
   15396:	|  |   move.l 1c148 <currentEvents>,12(sp)
   1539e:	|  |   move.l 1c7d8 <SysBase>,d0
   153a4:	|  |   movea.l d0,a6
   153a6:	|  |   movea.l 12(sp),a1
   153aa:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   153ae:	|  '-> movea.l 1c8c8 <frozenStuff>,a0
   153b4:	|      move.l 28(a0),d0
   153b8:	|      move.l d0,1c148 <currentEvents>

	killAllSpeech ();
   153be:	|      jsr 3ef2 <killAllSpeech>
	if (speech) FreeVec(speech);
   153c4:	|      move.l 1c728 <speech>,d0
   153ca:	|  ,-- beq.s 153e4 <unfreeze+0x204>
   153cc:	|  |   move.l 1c728 <speech>,8(sp)
   153d4:	|  |   move.l 1c7d8 <SysBase>,d0
   153da:	|  |   movea.l d0,a6
   153dc:	|  |   movea.l 8(sp),a1
   153e0:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   153e4:	|  '-> movea.l 1c8c8 <frozenStuff>,a0
   153ea:	|      move.l 20(a0),d0
   153ee:	|      move.l d0,1c728 <speech>

	frozenStuff = frozenStuff -> next;
   153f4:	|      movea.l 1c8c8 <frozenStuff>,a0
   153fa:	|      move.l 64(a0),d0
   153fe:	|      move.l d0,1c8c8 <frozenStuff>

	overRegion = NULL;
   15404:	|      clr.l 1c8e8 <overRegion>
	if (killMe) FreeVec(killMe);
   1540a:	|      tst.l 16(sp)
   1540e:	|  ,-- beq.s 15426 <unfreeze+0x246>
   15410:	|  |   move.l 16(sp),4(sp)
   15416:	|  |   move.l 1c7d8 <SysBase>,d0
   1541c:	|  |   movea.l d0,a6
   1541e:	|  |   movea.l 4(sp),a1
   15422:	|  |   jsr -690(a6)
	killMe = NULL;
   15426:	|  '-> clr.l 16(sp)
   1542a:	|  ,-- bra.s 1542e <unfreeze+0x24e>
	if (! frozenStuff) return;
   1542c:	'--|-> nop
}
   1542e:	   '-> movea.l (sp)+,a6
   15430:	       lea 16(sp),sp
   15434:	       rts

00015436 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15436:	pea 19e9b <talk.c.490538ff+0x57f>
   1543c:	jsr 170d4 <KPrintF>
   15442:	addq.l #4,sp
	return FALSE;
   15444:	clr.w d0
}
   15446:	rts

00015448 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15448:	          lea -32(sp),sp
   1544c:	          move.l a6,-(sp)
   1544e:	          move.l d2,-(sp)
	unsigned int a = 0;
   15450:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15454:	          move.l 1c8d4 <fontOrderString>,d0
   1545a:	      ,-- beq.s 15474 <loadFont+0x2c>
   1545c:	      |   move.l 1c8d4 <fontOrderString>,24(sp)
   15464:	      |   move.l 1c7d8 <SysBase>,d0
   1546a:	      |   movea.l d0,a6
   1546c:	      |   movea.l 24(sp),a1
   15470:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15474:	      '-> move.l 48(sp),-(sp)
   15478:	          jsr b8 <copyString>
   1547e:	          addq.l #4,sp
   15480:	          move.l d0,1c8d4 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15486:	          move.l 1c8e0 <theFont>,d0
   1548c:	      ,-- beq.s 1549e <loadFont+0x56>
   1548e:	      |   move.l 1c8e0 <theFont>,d0
   15494:	      |   move.l d0,-(sp)
   15496:	      |   jsr 8836 <forgetSpriteBank>
   1549c:	      |   addq.l #4,sp
	theFont = NULL;
   1549e:	      '-> clr.l 1c8e0 <theFont>

	loadedFontNum = filenum;
   154a4:	          move.l 44(sp),1c8d0 <loadedFontNum>

	fontTableSize = 0;
   154ac:	          clr.l 1c8dc <fontTableSize>
	char *tmp = charOrder;
   154b2:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   154b8:	   ,----- bra.s 154f4 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   154ba:	,--|----> movea.l 32(sp),a0
   154be:	|  |      move.b (a0),d0
   154c0:	|  |      ext.w d0
   154c2:	|  |      movea.w d0,a0
   154c4:	|  |      move.l 1c8dc <fontTableSize>,d0
   154ca:	|  |      move.l d0,d0
   154cc:	|  |      move.b d0,d0
   154ce:	|  |      andi.l #255,d0
   154d4:	|  |      cmp.l a0,d0
   154d6:	|  |  ,-- bge.s 154e8 <loadFont+0xa0>
   154d8:	|  |  |   movea.l 32(sp),a0
   154dc:	|  |  |   move.b (a0),d0
   154de:	|  |  |   ext.w d0
   154e0:	|  |  |   movea.w d0,a0
   154e2:	|  |  |   move.l a0,1c8dc <fontTableSize>
		*tmp++;
   154e8:	|  |  '-> move.l 32(sp),d0
   154ec:	|  |      move.l d0,d1
   154ee:	|  |      addq.l #1,d1
   154f0:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   154f4:	|  '----> movea.l 32(sp),a0
   154f8:	|         move.b (a0),d0
   154fa:	'-------- bne.s 154ba <loadFont+0x72>
	}
	fontTableSize++;
   154fc:	          move.l 1c8dc <fontTableSize>,d0
   15502:	          addq.l #1,d0
   15504:	          move.l d0,1c8dc <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   1550a:	          move.l 1c8d8 <fontTable>,d0
   15510:	      ,-- beq.s 1552a <loadFont+0xe2>
   15512:	      |   move.l 1c8d8 <fontTable>,20(sp)
   1551a:	      |   move.l 1c7d8 <SysBase>,d0
   15520:	      |   movea.l d0,a6
   15522:	      |   movea.l 20(sp),a1
   15526:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   1552a:	      '-> move.l 1c8dc <fontTableSize>,d0
   15530:	          add.l d0,d0
   15532:	          add.l d0,d0
   15534:	          move.l d0,16(sp)
   15538:	          clr.l 12(sp)
   1553c:	          move.l 1c7d8 <SysBase>,d0
   15542:	          movea.l d0,a6
   15544:	          move.l 16(sp),d0
   15548:	          move.l 12(sp),d1
   1554c:	          jsr -684(a6)
   15550:	          move.l d0,8(sp)
   15554:	          move.l 8(sp),d0
   15558:	          move.l d0,1c8d8 <fontTable>
	if (!fontTable) return FALSE;
   1555e:	          move.l 1c8d8 <fontTable>,d0
   15564:	      ,-- bne.s 1556c <loadFont+0x124>
   15566:	      |   clr.w d0
   15568:	,-----|-- bra.w 15612 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   1556c:	|     '-> clr.l 36(sp)
   15570:	|     ,-- bra.s 1558a <loadFont+0x142>
		fontTable[a] = 0;
   15572:	|  ,--|-> move.l 1c8d8 <fontTable>,d1
   15578:	|  |  |   move.l 36(sp),d0
   1557c:	|  |  |   add.l d0,d0
   1557e:	|  |  |   add.l d0,d0
   15580:	|  |  |   movea.l d1,a0
   15582:	|  |  |   adda.l d0,a0
   15584:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15586:	|  |  |   addq.l #1,36(sp)
   1558a:	|  |  '-> move.l 1c8dc <fontTableSize>,d0
   15590:	|  |      cmp.l 36(sp),d0
   15594:	|  '----- bhi.s 15572 <loadFont+0x12a>
	}
	a = 0;
   15596:	|         clr.l 36(sp)
	int i = 0;
   1559a:	|         clr.l 28(sp)
	tmp = charOrder;
   1559e:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   155a4:	|     ,-- bra.s 155d4 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   155a6:	|  ,--|-> move.l 1c8d8 <fontTable>,d1
   155ac:	|  |  |   move.l 32(sp),d0
   155b0:	|  |  |   move.l d0,d2
   155b2:	|  |  |   addq.l #1,d2
   155b4:	|  |  |   move.l d2,32(sp)
   155b8:	|  |  |   movea.l d0,a0
   155ba:	|  |  |   move.b (a0),d0
   155bc:	|  |  |   ext.w d0
   155be:	|  |  |   movea.w d0,a0
   155c0:	|  |  |   move.l a0,d0
   155c2:	|  |  |   add.l a0,d0
   155c4:	|  |  |   add.l d0,d0
   155c6:	|  |  |   movea.l d1,a0
   155c8:	|  |  |   adda.l d0,a0
   155ca:	|  |  |   move.l 28(sp),d0
   155ce:	|  |  |   move.l d0,(a0)
		i++;
   155d0:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   155d4:	|  |  '-> movea.l 32(sp),a0
   155d8:	|  |      move.b (a0),d0
   155da:	|  '----- bne.s 155a6 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   155dc:	|         move.l 44(sp),-(sp)
   155e0:	|         jsr 15e12 <loadBankForAnim>
   155e6:	|         addq.l #4,sp
   155e8:	|         move.l d0,1c8e0 <theFont>
	if (!theFont) {
   155ee:	|         move.l 1c8e0 <theFont>,d0
   155f4:	|     ,-- bne.s 15608 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   155f6:	|     |   pea 19ec2 <talk.c.490538ff+0x5a6>
   155fc:	|     |   jsr 170d4 <KPrintF>
   15602:	|     |   addq.l #4,sp
		return FALSE;
   15604:	|     |   clr.w d0
   15606:	+-----|-- bra.s 15612 <loadFont+0x1ca>
	}
	fontHeight = h;
   15608:	|     '-> move.l 52(sp),1c8cc <fontHeight>
	return TRUE;
   15610:	|         moveq #1,d0
}
   15612:	'-------> move.l (sp)+,d2
   15614:	          movea.l (sp)+,a6
   15616:	          lea 32(sp),sp
   1561a:	          rts

0001561c <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   1561c:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15620:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15624:	                move.l 1c8dc <fontTableSize>,d0
   1562a:	,-------------- beq.w 156f2 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   1562e:	|               move.w 1c6d0 <fontSpace>,d0
   15634:	|               asr.w #1,d0
   15636:	|               ext.l d0
   15638:	|               add.l d0,20(sp)
	char *tmp = theText;
   1563c:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15642:	|     ,-------- bra.w 156e6 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15646:	|  ,--|-------> movea.l 1c8e0 <theFont>,a0
   1564c:	|  |  |         movea.l 16(a0),a0
   15650:	|  |  |         movea.l 8(sp),a1
   15654:	|  |  |         move.b (a1),d0
   15656:	|  |  |         move.b d0,d0
   15658:	|  |  |         andi.l #255,d0
   1565e:	|  |  |         move.l 1c8dc <fontTableSize>,d1
   15664:	|  |  |         cmp.l d0,d1
   15666:	|  |  |  ,----- bls.s 15692 <pasteStringToBackdrop+0x76>
   15668:	|  |  |  |      move.l 1c8d8 <fontTable>,d1
   1566e:	|  |  |  |      movea.l 8(sp),a1
   15672:	|  |  |  |      move.b (a1),d0
   15674:	|  |  |  |      move.b d0,d0
   15676:	|  |  |  |      andi.l #255,d0
   1567c:	|  |  |  |      add.l d0,d0
   1567e:	|  |  |  |      add.l d0,d0
   15680:	|  |  |  |      movea.l d1,a1
   15682:	|  |  |  |      adda.l d0,a1
   15684:	|  |  |  |      move.l (a1),d1
   15686:	|  |  |  |      move.l d1,d0
   15688:	|  |  |  |      lsl.l #3,d0
   1568a:	|  |  |  |      sub.l d1,d0
   1568c:	|  |  |  |      add.l d0,d0
   1568e:	|  |  |  |      add.l d0,d0
   15690:	|  |  |  |  ,-- bra.s 15694 <pasteStringToBackdrop+0x78>
   15692:	|  |  |  '--|-> moveq #0,d0
   15694:	|  |  |     '-> adda.l d0,a0
   15696:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15698:	|  |  |         move.l 24(sp),d1
   1569c:	|  |  |         movea.l (sp),a0
   1569e:	|  |  |         move.l 12(a0),d0
   156a2:	|  |  |         move.l d0,d0
   156a4:	|  |  |         sub.w d0,d1
   156a6:	|  |  |         move.w d1,d0
   156a8:	|  |  |         movea.w d0,a1
   156aa:	|  |  |         move.l 20(sp),d1
   156ae:	|  |  |         movea.l (sp),a0
   156b0:	|  |  |         move.l 8(a0),d0
   156b4:	|  |  |         move.l d0,d0
   156b6:	|  |  |         sub.w d0,d1
   156b8:	|  |  |         move.w d1,d0
   156ba:	|  |  |         movea.w d0,a0
   156bc:	|  |  |         move.l a1,-(sp)
   156be:	|  |  |         move.l a0,-(sp)
   156c0:	|  |  |         move.l 8(sp),-(sp)
   156c4:	|  |  |         jsr 2270 <CstPasteChar>
   156ca:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   156ce:	|  |  |         movea.l (sp),a0
   156d0:	|  |  |         move.l (a0),d1
   156d2:	|  |  |         move.w 1c6d0 <fontSpace>,d0
   156d8:	|  |  |         movea.w d0,a0
   156da:	|  |  |         move.l d1,d0
   156dc:	|  |  |         add.l a0,d0
   156de:	|  |  |         add.l d0,20(sp)
		tmp++;
   156e2:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   156e6:	|  |  '-------> movea.l 8(sp),a0
   156ea:	|  |            move.b (a0),d0
   156ec:	|  '----------- bne.w 15646 <pasteStringToBackdrop+0x2a>
   156f0:	|           ,-- bra.s 156f4 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   156f2:	'-----------|-> nop
    }
}
   156f4:	            '-> lea 12(sp),sp
   156f8:	                rts

000156fa <stringWidth>:


int stringWidth (char * theText) {
   156fa:	                lea -16(sp),sp
	int a = 0;
   156fe:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15702:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   15706:	                move.l 1c8dc <fontTableSize>,d0
   1570c:	            ,-- bne.s 15712 <stringWidth+0x18>
   1570e:	            |   moveq #0,d0
   15710:	,-----------|-- bra.s 15786 <stringWidth+0x8c>

	char *tmp = theText;
   15712:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   15718:	|     ,-------- bra.s 1577a <stringWidth+0x80>
        c = *tmp++;
   1571a:	|  ,--|-------> move.l 8(sp),d0
   1571e:	|  |  |         move.l d0,d1
   15720:	|  |  |         addq.l #1,d1
   15722:	|  |  |         move.l d1,8(sp)
   15726:	|  |  |         movea.l d0,a0
   15728:	|  |  |         move.b (a0),d0
   1572a:	|  |  |         ext.w d0
   1572c:	|  |  |         movea.w d0,a0
   1572e:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   15730:	|  |  |         movea.l 1c8e0 <theFont>,a0
   15736:	|  |  |         movea.l 16(a0),a1
   1573a:	|  |  |         move.l 1c8dc <fontTableSize>,d0
   15740:	|  |  |         cmp.l (sp),d0
   15742:	|  |  |  ,----- bls.s 15762 <stringWidth+0x68>
   15744:	|  |  |  |      move.l 1c8d8 <fontTable>,d1
   1574a:	|  |  |  |      move.l (sp),d0
   1574c:	|  |  |  |      add.l d0,d0
   1574e:	|  |  |  |      add.l d0,d0
   15750:	|  |  |  |      movea.l d1,a0
   15752:	|  |  |  |      adda.l d0,a0
   15754:	|  |  |  |      move.l (a0),d1
   15756:	|  |  |  |      move.l d1,d0
   15758:	|  |  |  |      lsl.l #3,d0
   1575a:	|  |  |  |      sub.l d1,d0
   1575c:	|  |  |  |      add.l d0,d0
   1575e:	|  |  |  |      add.l d0,d0
   15760:	|  |  |  |  ,-- bra.s 15764 <stringWidth+0x6a>
   15762:	|  |  |  '--|-> moveq #0,d0
   15764:	|  |  |     '-> lea (0,a1,d0.l),a0
   15768:	|  |  |         move.l (a0),d1
   1576a:	|  |  |         move.w 1c6d0 <fontSpace>,d0
   15770:	|  |  |         movea.w d0,a0
   15772:	|  |  |         move.l d1,d0
   15774:	|  |  |         add.l a0,d0
   15776:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   1577a:	|  |  '-------> movea.l 8(sp),a0
   1577e:	|  |            move.b (a0),d0
   15780:	|  '----------- bne.s 1571a <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   15782:	|               move.l 12(sp),d0
}
   15786:	'-------------> lea 16(sp),sp
   1578a:	                rts

0001578c <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   1578c:	       lea -16(sp),sp
   15790:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15792:	       moveq #36,d0
   15794:	       move.l d0,16(sp)
   15798:	       clr.l 12(sp)
   1579c:	       move.l 1c7d8 <SysBase>,d0
   157a2:	       movea.l d0,a6
   157a4:	       move.l 16(sp),d0
   157a8:	       move.l 12(sp),d1
   157ac:	       jsr -684(a6)
   157b0:	       move.l d0,8(sp)
   157b4:	       move.l 8(sp),d0
   157b8:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   157bc:	   ,-- bne.s 157c4 <addScreenRegion+0x38>
   157be:	   |   clr.w d0
   157c0:	,--|-- bra.w 15844 <addScreenRegion+0xb8>
    newRegion->di = di;
   157c4:	|  '-> movea.l 4(sp),a0
   157c8:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   157ce:	|      movea.l 4(sp),a0
   157d2:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   157d6:	|      movea.l 4(sp),a0
   157da:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   157e0:	|      movea.l 4(sp),a0
   157e4:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   157ea:	|      movea.l 4(sp),a0
   157ee:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   157f4:	|      movea.l 4(sp),a0
   157f8:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   157fe:	|      movea.l 4(sp),a0
   15802:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15808:	|      move.l 52(sp),-(sp)
   1580c:	|      jsr d466 <loadObjectType>
   15812:	|      addq.l #4,sp
   15814:	|      movea.l 4(sp),a0
   15818:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   1581c:	|      move.l 1c8e4 <allScreenRegions>,d0
   15822:	|      movea.l 4(sp),a0
   15826:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   1582a:	|      move.l 4(sp),1c8e4 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15832:	|      movea.l 4(sp),a0
   15836:	|      move.l 28(a0),d0
   1583a:	|      sne d0
   1583c:	|      neg.b d0
   1583e:	|      move.b d0,d0
   15840:	|      andi.w #255,d0
}
   15844:	'----> movea.l (sp)+,a6
   15846:	       lea 16(sp),sp
   1584a:	       rts

0001584c <getOverRegion>:

void getOverRegion () {
   1584c:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1584e:	             move.l 1c8e4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15854:	   ,-------- bra.s 158c2 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15856:	,--|-------> move.l 1c794 <input+0xa>,d0
   1585c:	|  |         movea.l (sp),a0
   1585e:	|  |         movea.l (a0),a0
   15860:	|  |         move.l 1c88e <cameraX>,d1
   15866:	|  |         suba.l d1,a0
   15868:	|  |         cmpa.l d0,a0
   1586a:	|  |  ,----- bgt.s 158bc <getOverRegion+0x70>
   1586c:	|  |  |      move.l 1c798 <input+0xe>,d0
   15872:	|  |  |      movea.l (sp),a0
   15874:	|  |  |      movea.l 4(a0),a0
   15878:	|  |  |      move.l 1c892 <cameraY>,d1
   1587e:	|  |  |      suba.l d1,a0
   15880:	|  |  |      cmpa.l d0,a0
   15882:	|  |  +----- bgt.s 158bc <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15884:	|  |  |      move.l 1c794 <input+0xa>,d0
   1588a:	|  |  |      movea.l (sp),a0
   1588c:	|  |  |      movea.l 8(a0),a0
   15890:	|  |  |      move.l 1c88e <cameraX>,d1
   15896:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15898:	|  |  |      cmpa.l d0,a0
   1589a:	|  |  +----- blt.s 158bc <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   1589c:	|  |  |      move.l 1c798 <input+0xe>,d0
   158a2:	|  |  |      movea.l (sp),a0
   158a4:	|  |  |      movea.l 12(a0),a0
   158a8:	|  |  |      move.l 1c892 <cameraY>,d1
   158ae:	|  |  |      suba.l d1,a0
   158b0:	|  |  |      cmpa.l d0,a0
   158b2:	|  |  +----- blt.s 158bc <getOverRegion+0x70>
			overRegion = thisRegion;
   158b4:	|  |  |      move.l (sp),1c8e8 <overRegion>
			return;
   158ba:	|  |  |  ,-- bra.s 158ce <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   158bc:	|  |  '--|-> movea.l (sp),a0
   158be:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   158c2:	|  '-----|-> tst.l (sp)
   158c4:	'--------|-- bne.s 15856 <getOverRegion+0xa>
	}
	overRegion = NULL;
   158c6:	         |   clr.l 1c8e8 <overRegion>
	return;
   158cc:	         |   nop
}
   158ce:	         '-> addq.l #4,sp
   158d0:	             rts

000158d2 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   158d2:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   158d4:	             move.l 1c8e4 <allScreenRegions>,(sp)

	while (thisRegion) {
   158da:	   ,-------- bra.s 158f6 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   158dc:	,--|-------> movea.l (sp),a0
   158de:	|  |         movea.l 28(a0),a0
   158e2:	|  |         move.l 4(a0),d0
   158e6:	|  |         cmp.l 8(sp),d0
   158ea:	|  |     ,-- bne.s 158f0 <getRegionForObject+0x1e>
			return thisRegion;
   158ec:	|  |     |   move.l (sp),d0
   158ee:	|  |  ,--|-- bra.s 158fc <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   158f0:	|  |  |  '-> movea.l (sp),a0
   158f2:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   158f6:	|  '--|----> tst.l (sp)
   158f8:	'-----|----- bne.s 158dc <getRegionForObject+0xa>
	}

	return NULL;
   158fa:	      |      moveq #0,d0
}
   158fc:	      '----> addq.l #4,sp
   158fe:	             rts

00015900 <killAllRegions>:

void killAllRegions () {
   15900:	       subq.l #8,sp
   15902:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15904:	   ,-- bra.s 15946 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15906:	,--|-> move.l 1c8e4 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   1590e:	|  |   movea.l 1c8e4 <allScreenRegions>,a0
   15914:	|  |   move.l 32(a0),d0
   15918:	|  |   move.l d0,1c8e4 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   1591e:	|  |   movea.l 8(sp),a0
   15922:	|  |   move.l 28(a0),d0
   15926:	|  |   move.l d0,-(sp)
   15928:	|  |   jsr d71e <removeObjectType>
   1592e:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15930:	|  |   move.l 8(sp),4(sp)
   15936:	|  |   move.l 1c7d8 <SysBase>,d0
   1593c:	|  |   movea.l d0,a6
   1593e:	|  |   movea.l 4(sp),a1
   15942:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15946:	|  '-> move.l 1c8e4 <allScreenRegions>,d0
   1594c:	'----- bne.s 15906 <killAllRegions+0x6>
	}
	overRegion = NULL;
   1594e:	       clr.l 1c8e8 <overRegion>
}
   15954:	       nop
   15956:	       movea.l (sp)+,a6
   15958:	       addq.l #8,sp
   1595a:	       rts

0001595c <loadRegions>:

void loadRegions (BPTR fp) {
   1595c:	       lea -24(sp),sp
   15960:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15962:	       move.l 32(sp),-(sp)
   15966:	       jsr 6bc <get2bytes>
   1596c:	       addq.l #4,sp
   1596e:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15972:	       move.l #116964,20(sp)

	while (numRegions --) {
   1597a:	   ,-- bra.w 15a58 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   1597e:	,--|-> moveq #36,d0
   15980:	|  |   move.l d0,16(sp)
   15984:	|  |   clr.l 12(sp)
   15988:	|  |   move.l 1c7d8 <SysBase>,d0
   1598e:	|  |   movea.l d0,a6
   15990:	|  |   move.l 16(sp),d0
   15994:	|  |   move.l 12(sp),d1
   15998:	|  |   jsr -684(a6)
   1599c:	|  |   move.l d0,8(sp)
   159a0:	|  |   move.l 8(sp),d0
   159a4:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   159a8:	|  |   movea.l 20(sp),a0
   159ac:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   159b0:	|  |   moveq #32,d1
   159b2:	|  |   add.l 4(sp),d1
   159b6:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   159ba:	|  |   move.l 32(sp),-(sp)
   159be:	|  |   jsr 6bc <get2bytes>
   159c4:	|  |   addq.l #4,sp
   159c6:	|  |   movea.l 4(sp),a0
   159ca:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   159cc:	|  |   move.l 32(sp),-(sp)
   159d0:	|  |   jsr 6bc <get2bytes>
   159d6:	|  |   addq.l #4,sp
   159d8:	|  |   movea.l 4(sp),a0
   159dc:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   159e0:	|  |   move.l 32(sp),-(sp)
   159e4:	|  |   jsr 6bc <get2bytes>
   159ea:	|  |   addq.l #4,sp
   159ec:	|  |   movea.l 4(sp),a0
   159f0:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   159f4:	|  |   move.l 32(sp),-(sp)
   159f8:	|  |   jsr 6bc <get2bytes>
   159fe:	|  |   addq.l #4,sp
   15a00:	|  |   movea.l 4(sp),a0
   15a04:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15a08:	|  |   move.l 32(sp),-(sp)
   15a0c:	|  |   jsr 6bc <get2bytes>
   15a12:	|  |   addq.l #4,sp
   15a14:	|  |   movea.l 4(sp),a0
   15a18:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15a1c:	|  |   move.l 32(sp),-(sp)
   15a20:	|  |   jsr 6bc <get2bytes>
   15a26:	|  |   addq.l #4,sp
   15a28:	|  |   movea.l 4(sp),a0
   15a2c:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15a30:	|  |   move.l 32(sp),-(sp)
   15a34:	|  |   jsr 6bc <get2bytes>
   15a3a:	|  |   addq.l #4,sp
   15a3c:	|  |   movea.l 4(sp),a0
   15a40:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15a44:	|  |   move.l 32(sp),-(sp)
   15a48:	|  |   jsr d414 <loadObjectRef>
   15a4e:	|  |   addq.l #4,sp
   15a50:	|  |   movea.l 4(sp),a0
   15a54:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15a58:	|  '-> move.l 24(sp),d0
   15a5c:	|      move.l d0,d1
   15a5e:	|      subq.l #1,d1
   15a60:	|      move.l d1,24(sp)
   15a64:	|      tst.l d0
   15a66:	'----- bne.w 1597e <loadRegions+0x22>
	}
	* pointy = NULL;
   15a6a:	       movea.l 20(sp),a0
   15a6e:	       clr.l (a0)
}
   15a70:	       nop
   15a72:	       movea.l (sp)+,a6
   15a74:	       lea 24(sp),sp
   15a78:	       rts

00015a7a <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15a7a:	             lea -12(sp),sp
   15a7e:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15a80:	             move.l #116964,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15a88:	   ,-------- bra.s 15b02 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15a8a:	,--|-------> movea.l 12(sp),a0
   15a8e:	|  |         movea.l (a0),a0
   15a90:	|  |         movea.l 28(a0),a0
   15a94:	|  |         move.l 4(a0),d0
   15a98:	|  |         cmp.l 20(sp),d0
   15a9c:	|  |  ,----- bne.s 15af4 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15a9e:	|  |  |      movea.l 12(sp),a0
   15aa2:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15aa6:	|  |  |      movea.l 8(sp),a0
   15aaa:	|  |  |      move.l 32(a0),d0
   15aae:	|  |  |      movea.l 12(sp),a0
   15ab2:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15ab4:	|  |  |      movea.l 8(sp),a0
   15ab8:	|  |  |      move.l 28(a0),d0
   15abc:	|  |  |      move.l d0,-(sp)
   15abe:	|  |  |      jsr d71e <removeObjectType>
   15ac4:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15ac6:	|  |  |      move.l 1c8e8 <overRegion>,d0
   15acc:	|  |  |      cmp.l 8(sp),d0
   15ad0:	|  |  |  ,-- bne.s 15ad8 <removeScreenRegion+0x5e>
   15ad2:	|  |  |  |   clr.l 1c8e8 <overRegion>
            FreeVec(killMe);
   15ad8:	|  |  |  '-> move.l 8(sp),4(sp)
   15ade:	|  |  |      move.l 1c7d8 <SysBase>,d0
   15ae4:	|  |  |      movea.l d0,a6
   15ae6:	|  |  |      movea.l 4(sp),a1
   15aea:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15aee:	|  |  |      clr.l 8(sp)
   15af2:	|  +--|----- bra.s 15b02 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15af4:	|  |  '----> movea.l 12(sp),a0
   15af8:	|  |         move.l (a0),d0
   15afa:	|  |         moveq #32,d1
   15afc:	|  |         add.l d0,d1
   15afe:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15b02:	|  '-------> movea.l 12(sp),a0
   15b06:	|            move.l (a0),d0
   15b08:	'----------- bne.s 15a8a <removeScreenRegion+0x10>
        }
    }
}
   15b0a:	             nop
   15b0c:	             nop
   15b0e:	             movea.l (sp)+,a6
   15b10:	             lea 12(sp),sp
   15b14:	             rts

00015b16 <saveRegions>:

void saveRegions (BPTR fp) {
   15b16:	       subq.l #8,sp
	int numRegions = 0;
   15b18:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15b1c:	       move.l 1c8e4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15b22:	   ,-- bra.s 15b2e <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15b24:	,--|-> movea.l (sp),a0
   15b26:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15b2a:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15b2e:	|  '-> tst.l (sp)
   15b30:	'----- bne.s 15b24 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15b32:	       move.l 12(sp),-(sp)
   15b36:	       move.l 8(sp),-(sp)
   15b3a:	       jsr 8d0 <put2bytes>
   15b40:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15b42:	       move.l 1c8e4 <allScreenRegions>,(sp)
	while (thisRegion) {
   15b48:	,----- bra.w 15bf0 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15b4c:	|  ,-> movea.l (sp),a0
   15b4e:	|  |   move.l (a0),d0
   15b50:	|  |   move.l 12(sp),-(sp)
   15b54:	|  |   move.l d0,-(sp)
   15b56:	|  |   jsr 8d0 <put2bytes>
   15b5c:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15b5e:	|  |   movea.l (sp),a0
   15b60:	|  |   move.l 4(a0),d0
   15b64:	|  |   move.l 12(sp),-(sp)
   15b68:	|  |   move.l d0,-(sp)
   15b6a:	|  |   jsr 8d0 <put2bytes>
   15b70:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15b72:	|  |   movea.l (sp),a0
   15b74:	|  |   move.l 8(a0),d0
   15b78:	|  |   move.l 12(sp),-(sp)
   15b7c:	|  |   move.l d0,-(sp)
   15b7e:	|  |   jsr 8d0 <put2bytes>
   15b84:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15b86:	|  |   movea.l (sp),a0
   15b88:	|  |   move.l 12(a0),d0
   15b8c:	|  |   move.l 12(sp),-(sp)
   15b90:	|  |   move.l d0,-(sp)
   15b92:	|  |   jsr 8d0 <put2bytes>
   15b98:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15b9a:	|  |   movea.l (sp),a0
   15b9c:	|  |   move.l 16(a0),d0
   15ba0:	|  |   move.l 12(sp),-(sp)
   15ba4:	|  |   move.l d0,-(sp)
   15ba6:	|  |   jsr 8d0 <put2bytes>
   15bac:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15bae:	|  |   movea.l (sp),a0
   15bb0:	|  |   move.l 20(a0),d0
   15bb4:	|  |   move.l 12(sp),-(sp)
   15bb8:	|  |   move.l d0,-(sp)
   15bba:	|  |   jsr 8d0 <put2bytes>
   15bc0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15bc2:	|  |   movea.l (sp),a0
   15bc4:	|  |   move.l 24(a0),d0
   15bc8:	|  |   move.l 12(sp),-(sp)
   15bcc:	|  |   move.l d0,-(sp)
   15bce:	|  |   jsr 8d0 <put2bytes>
   15bd4:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15bd6:	|  |   movea.l (sp),a0
   15bd8:	|  |   move.l 28(a0),d0
   15bdc:	|  |   move.l 12(sp),-(sp)
   15be0:	|  |   move.l d0,-(sp)
   15be2:	|  |   jsr d7be <saveObjectRef>
   15be8:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15bea:	|  |   movea.l (sp),a0
   15bec:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15bf0:	'--|-> tst.l (sp)
   15bf2:	   '-- bne.w 15b4c <saveRegions+0x36>
	}
}
   15bf6:	       nop
   15bf8:	       nop
   15bfa:	       addq.l #8,sp
   15bfc:	       rts

00015bfe <showBoxes>:

void showBoxes () {
   15bfe:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15c00:	       move.l 1c8e4 <allScreenRegions>,(sp)

	while (huntRegion) {
   15c06:	,----- bra.w 15ca2 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15c0a:	|  ,-> movea.l (sp),a0
   15c0c:	|  |   move.l 12(a0),d0
   15c10:	|  |   movea.l d0,a1
   15c12:	|  |   movea.l (sp),a0
   15c14:	|  |   move.l 4(a0),d0
   15c18:	|  |   move.l d0,d1
   15c1a:	|  |   movea.l (sp),a0
   15c1c:	|  |   move.l (a0),d0
   15c1e:	|  |   move.l a1,-(sp)
   15c20:	|  |   move.l d1,-(sp)
   15c22:	|  |   move.l d0,-(sp)
   15c24:	|  |   jsr d0a2 <drawVerticalLine>
   15c2a:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15c2e:	|  |   movea.l (sp),a0
   15c30:	|  |   move.l 12(a0),d0
   15c34:	|  |   movea.l d0,a1
   15c36:	|  |   movea.l (sp),a0
   15c38:	|  |   move.l 4(a0),d0
   15c3c:	|  |   move.l d0,d1
   15c3e:	|  |   movea.l (sp),a0
   15c40:	|  |   move.l 8(a0),d0
   15c44:	|  |   move.l a1,-(sp)
   15c46:	|  |   move.l d1,-(sp)
   15c48:	|  |   move.l d0,-(sp)
   15c4a:	|  |   jsr d0a2 <drawVerticalLine>
   15c50:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15c54:	|  |   movea.l (sp),a0
   15c56:	|  |   move.l 8(a0),d0
   15c5a:	|  |   movea.l d0,a1
   15c5c:	|  |   movea.l (sp),a0
   15c5e:	|  |   move.l 4(a0),d0
   15c62:	|  |   move.l d0,d1
   15c64:	|  |   movea.l (sp),a0
   15c66:	|  |   move.l (a0),d0
   15c68:	|  |   move.l a1,-(sp)
   15c6a:	|  |   move.l d1,-(sp)
   15c6c:	|  |   move.l d0,-(sp)
   15c6e:	|  |   jsr d07c <drawHorizontalLine>
   15c74:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15c78:	|  |   movea.l (sp),a0
   15c7a:	|  |   move.l 8(a0),d0
   15c7e:	|  |   movea.l d0,a1
   15c80:	|  |   movea.l (sp),a0
   15c82:	|  |   move.l 12(a0),d0
   15c86:	|  |   move.l d0,d1
   15c88:	|  |   movea.l (sp),a0
   15c8a:	|  |   move.l (a0),d0
   15c8c:	|  |   move.l a1,-(sp)
   15c8e:	|  |   move.l d1,-(sp)
   15c90:	|  |   move.l d0,-(sp)
   15c92:	|  |   jsr d07c <drawHorizontalLine>
   15c98:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15c9c:	|  |   movea.l (sp),a0
   15c9e:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15ca2:	'--|-> tst.l (sp)
   15ca4:	   '-- bne.w 15c0a <showBoxes+0xc>
	}
   15ca8:	       nop
   15caa:	       nop
   15cac:	       addq.l #4,sp
   15cae:	       rts

00015cb0 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15cb0:	       lea -88(sp),sp
   15cb4:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15cb6:	       move.l 1c7d8 <SysBase>,d0
   15cbc:	       movea.l d0,a6
   15cbe:	       jsr -666(a6)
   15cc2:	       move.l d0,88(sp)
   15cc6:	       move.l 88(sp),d0
   15cca:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15cce:	       move.l 84(sp),80(sp)
   15cd4:	       moveq #40,d0
   15cd6:	       move.l d0,76(sp)
   15cda:	       move.l 1c7d8 <SysBase>,d0
   15ce0:	       movea.l d0,a6
   15ce2:	       movea.l 80(sp),a0
   15ce6:	       move.l 76(sp),d0
   15cea:	       jsr -654(a6)
   15cee:	       move.l d0,72(sp)
   15cf2:	       move.l 72(sp),d0
   15cf6:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15cfa:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15d00:	       move.l #106204,60(sp)
   15d08:	       clr.l 56(sp)
   15d0c:	       move.l 64(sp),52(sp)
   15d12:	       clr.l 48(sp)
   15d16:	       move.l 1c7d8 <SysBase>,d0
   15d1c:	       movea.l d0,a6
   15d1e:	       movea.l 60(sp),a0
   15d22:	       move.l 56(sp),d0
   15d26:	       movea.l 52(sp),a1
   15d2a:	       move.l 48(sp),d1
   15d2e:	       jsr -444(a6)
   15d32:	       move.b d0,47(sp)
   15d36:	       move.b 47(sp),d0
   15d3a:	   ,-- beq.s 15d50 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15d3c:	   |   pea 19ee9 <talk.c.490538ff+0x5cd>
   15d42:	   |   jsr 170d4 <KPrintF>
   15d48:	   |   addq.l #4,sp
        return 0;
   15d4a:	   |   moveq #0,d0
   15d4c:	,--|-- bra.w 15e0a <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15d50:	|  '-> movea.l 64(sp),a0
   15d54:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15d5a:	|      lea 92(sp),a0
   15d5e:	|      lea -86(a0),a0
   15d62:	|      move.l a0,38(sp)
   15d66:	|      movea.l 42(sp),a6
   15d6a:	|      movea.l 38(sp),a0
   15d6e:	|      jsr -60(a6)
   15d72:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15d76:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15d7c:	|      move.l #1103515245,-(sp)
   15d82:	|      move.l 34(sp),-(sp)
   15d86:	|      jsr 17a60 <__mulsi3>
   15d8c:	|      addq.l #8,sp
   15d8e:	|      addi.l #12345,d0
   15d94:	|      move.l d0,d1
   15d96:	|      bclr #31,d1
   15d9a:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15d9e:	|      move.l 30(sp),d0
   15da2:	|      pea 64 <_start+0x64>
   15da6:	|      move.l d0,-(sp)
   15da8:	|      jsr 17b3a <__umodsi3>
   15dae:	|      addq.l #8,sp
   15db0:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15db4:	|      move.l 26(sp),-(sp)
   15db8:	|      pea 19f06 <talk.c.490538ff+0x5ea>
   15dbe:	|      jsr 170d4 <KPrintF>
   15dc4:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15dc6:	|      move.l 64(sp),22(sp)
   15dcc:	|      move.l 1c7d8 <SysBase>,d0
   15dd2:	|      movea.l d0,a6
   15dd4:	|      movea.l 22(sp),a1
   15dd8:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   15ddc:	|      move.l 64(sp),18(sp)
   15de2:	|      move.l 1c7d8 <SysBase>,d0
   15de8:	|      movea.l d0,a6
   15dea:	|      movea.l 18(sp),a0
   15dee:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   15df2:	|      move.l 84(sp),14(sp)
   15df8:	|      move.l 1c7d8 <SysBase>,d0
   15dfe:	|      movea.l d0,a6
   15e00:	|      movea.l 14(sp),a0
   15e04:	|      jsr -672(a6)
    return 0;
   15e08:	|      moveq #0,d0
   15e0a:	'----> movea.l (sp)+,a6
   15e0c:	       lea 88(sp),sp
   15e10:	       rts

00015e12 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   15e12:	             lea -20(sp),sp
   15e16:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   15e18:	             move.l 1c8ec <allLoadedBanks>,20(sp)
	while (returnMe) {
   15e20:	      ,----- bra.s 15e52 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   15e22:	   ,--|----> movea.l 20(sp),a0
   15e26:	   |  |      move.l (a0),d0
   15e28:	   |  |      cmp.l 28(sp),d0
   15e2c:	   |  |  ,-- bne.s 15e48 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   15e2e:	   |  |  |   movea.l 20(sp),a0
   15e32:	   |  |  |   move.l 4(a0),d0
   15e36:	   |  |  |   addq.l #1,d0
   15e38:	   |  |  |   movea.l 20(sp),a0
   15e3c:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   15e40:	   |  |  |   move.l 20(sp),d0
   15e44:	,--|--|--|-- bra.w 15ee6 <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   15e48:	|  |  |  '-> movea.l 20(sp),a0
   15e4c:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15e52:	|  |  '----> tst.l 20(sp)
   15e56:	|  '-------- bne.s 15e22 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15e58:	|            moveq #26,d0
   15e5a:	|            move.l d0,16(sp)
   15e5e:	|            clr.l 12(sp)
   15e62:	|            move.l 1c7d8 <SysBase>,d0
   15e68:	|            movea.l d0,a6
   15e6a:	|            move.l 16(sp),d0
   15e6e:	|            move.l 12(sp),d1
   15e72:	|            jsr -684(a6)
   15e76:	|            move.l d0,8(sp)
   15e7a:	|            move.l 8(sp),d0
   15e7e:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15e82:	|     ,----- beq.s 15ee4 <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   15e84:	|     |      movea.l 20(sp),a0
   15e88:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   15e8c:	|     |      move.l 20(sp),d0
   15e90:	|     |      addq.l #8,d0
   15e92:	|     |      move.l d0,-(sp)
   15e94:	|     |      move.l 32(sp),-(sp)
   15e98:	|     |      jsr 8942 <loadSpriteBank>
   15e9e:	|     |      addq.l #8,sp
   15ea0:	|     |      tst.w d0
   15ea2:	|     |  ,-- beq.s 15eca <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   15ea4:	|     |  |   movea.l 20(sp),a0
   15ea8:	|     |  |   moveq #1,d0
   15eaa:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15eae:	|     |  |   move.l 1c8ec <allLoadedBanks>,d0
   15eb4:	|     |  |   movea.l 20(sp),a0
   15eb8:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15ebc:	|     |  |   move.l 20(sp),1c8ec <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   15ec4:	|     |  |   move.l 20(sp),d0
   15ec8:	+-----|--|-- bra.s 15ee6 <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   15eca:	|     |  '-> move.l 20(sp),4(sp)
   15ed0:	|     |      move.l 1c7d8 <SysBase>,d0
   15ed6:	|     |      movea.l d0,a6
   15ed8:	|     |      movea.l 4(sp),a1
   15edc:	|     |      jsr -690(a6)
			return NULL;
   15ee0:	|     |      moveq #0,d0
   15ee2:	+-----|----- bra.s 15ee6 <loadBankForAnim+0xd4>
		}
	} else return NULL;
   15ee4:	|     '----> moveq #0,d0
}
   15ee6:	'----------> movea.l (sp)+,a6
   15ee8:	             lea 20(sp),sp
   15eec:	             rts

00015eee <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15eee:	       lea -60(sp),sp
   15ef2:	       move.l d3,-(sp)
   15ef4:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   15ef6:	       move.l 88(sp),d0
   15efa:	       sub.l 80(sp),d0
   15efe:	       move.l d0,-(sp)
   15f00:	       jsr 174c6 <__floatsidf>
   15f06:	       addq.l #4,sp
   15f08:	       move.l d0,32(sp)
   15f0c:	       move.l d1,36(sp)
   15f10:	       move.l 32(sp),60(sp)
   15f16:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   15f1c:	       move.l 92(sp),d0
   15f20:	       sub.l 84(sp),d0
   15f24:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15f28:	       move.l 96(sp),d0
   15f2c:	       sub.l 80(sp),d0
   15f30:	       move.l d0,-(sp)
   15f32:	       jsr 174c6 <__floatsidf>
   15f38:	       addq.l #4,sp
   15f3a:	       move.l 64(sp),-(sp)
   15f3e:	       move.l 64(sp),-(sp)
   15f42:	       move.l d1,-(sp)
   15f44:	       move.l d0,-(sp)
   15f46:	       jsr 17556 <__muldf3>
   15f4c:	       lea 16(sp),sp
   15f50:	       move.l d0,d2
   15f52:	       move.l d1,d3
   15f54:	       move.l 100(sp),d0
   15f58:	       sub.l 84(sp),d0
   15f5c:	       move.l 56(sp),-(sp)
   15f60:	       move.l d0,-(sp)
   15f62:	       jsr 17a60 <__mulsi3>
   15f68:	       addq.l #8,sp
   15f6a:	       move.l d0,-(sp)
   15f6c:	       jsr 174c6 <__floatsidf>
   15f72:	       addq.l #4,sp
   15f74:	       move.l d1,-(sp)
   15f76:	       move.l d0,-(sp)
   15f78:	       move.l d3,-(sp)
   15f7a:	       move.l d2,-(sp)
   15f7c:	       jsr 172f8 <__adddf3>
   15f82:	       lea 16(sp),sp
   15f86:	       move.l d0,24(sp)
   15f8a:	       move.l d1,28(sp)
   15f8e:	       move.l 24(sp),48(sp)
   15f94:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15f9a:	       move.l 64(sp),-(sp)
   15f9e:	       move.l 64(sp),-(sp)
   15fa2:	       move.l 72(sp),-(sp)
   15fa6:	       move.l 72(sp),-(sp)
   15faa:	       jsr 17556 <__muldf3>
   15fb0:	       lea 16(sp),sp
   15fb4:	       move.l d0,d2
   15fb6:	       move.l d1,d3
   15fb8:	       move.l 56(sp),-(sp)
   15fbc:	       move.l 60(sp),-(sp)
   15fc0:	       jsr 17a60 <__mulsi3>
   15fc6:	       addq.l #8,sp
   15fc8:	       move.l d0,-(sp)
   15fca:	       jsr 174c6 <__floatsidf>
   15fd0:	       addq.l #4,sp
   15fd2:	       move.l d1,-(sp)
   15fd4:	       move.l d0,-(sp)
   15fd6:	       move.l d3,-(sp)
   15fd8:	       move.l d2,-(sp)
   15fda:	       jsr 172f8 <__adddf3>
   15fe0:	       lea 16(sp),sp
   15fe4:	       move.l d1,-(sp)
   15fe6:	       move.l d0,-(sp)
   15fe8:	       move.l 60(sp),-(sp)
   15fec:	       move.l 60(sp),-(sp)
   15ff0:	       jsr 1735a <__divdf3>
   15ff6:	       lea 16(sp),sp
   15ffa:	       move.l d0,16(sp)
   15ffe:	       move.l d1,20(sp)
   16002:	       move.l 16(sp),48(sp)
   16008:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   1600e:	       clr.l -(sp)
   16010:	       clr.l -(sp)
   16012:	       move.l 60(sp),-(sp)
   16016:	       move.l 60(sp),-(sp)
   1601a:	       jsr 176de <__ltdf2>
   16020:	       lea 16(sp),sp
   16024:	       tst.l d0
   16026:	   ,-- bge.s 1603c <closestPointOnLine+0x14e>
		*closestX = x1;
   16028:	   |   movea.l 72(sp),a0
   1602c:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   16030:	   |   movea.l 76(sp),a0
   16034:	   |   move.l 84(sp),(a0)
   16038:	,--|-- bra.w 1610a <closestPointOnLine+0x21c>
	} else if (m > 1) {
   1603c:	|  '-> clr.l -(sp)
   1603e:	|      move.l #1072693248,-(sp)
   16044:	|      move.l 60(sp),-(sp)
   16048:	|      move.l 60(sp),-(sp)
   1604c:	|      jsr 17624 <__gtdf2>
   16052:	|      lea 16(sp),sp
   16056:	|      tst.l d0
   16058:	|  ,-- ble.s 1606e <closestPointOnLine+0x180>
		*closestX = x2;
   1605a:	|  |   movea.l 72(sp),a0
   1605e:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   16062:	|  |   movea.l 76(sp),a0
   16066:	|  |   move.l 92(sp),(a0)
   1606a:	+--|-- bra.w 1610a <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   1606e:	|  '-> move.l 64(sp),-(sp)
   16072:	|      move.l 64(sp),-(sp)
   16076:	|      move.l 60(sp),-(sp)
   1607a:	|      move.l 60(sp),-(sp)
   1607e:	|      jsr 17556 <__muldf3>
   16084:	|      lea 16(sp),sp
   16088:	|      move.l d0,8(sp)
   1608c:	|      move.l d1,12(sp)
   16090:	|      move.l 8(sp),40(sp)
   16096:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   1609c:	|      move.l 44(sp),-(sp)
   160a0:	|      move.l 44(sp),-(sp)
   160a4:	|      jsr 17468 <__fixdfsi>
   160aa:	|      addq.l #8,sp
   160ac:	|      movea.l 72(sp),a0
   160b0:	|      move.l d0,(a0)
		*closestX += x1;
   160b2:	|      movea.l 72(sp),a0
   160b6:	|      move.l (a0),d0
   160b8:	|      add.l 80(sp),d0
   160bc:	|      movea.l 72(sp),a0
   160c0:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   160c2:	|      move.l 56(sp),-(sp)
   160c6:	|      jsr 174c6 <__floatsidf>
   160cc:	|      addq.l #4,sp
   160ce:	|      move.l 52(sp),-(sp)
   160d2:	|      move.l 52(sp),-(sp)
   160d6:	|      move.l d1,-(sp)
   160d8:	|      move.l d0,-(sp)
   160da:	|      jsr 17556 <__muldf3>
   160e0:	|      lea 16(sp),sp
   160e4:	|      move.l d1,-(sp)
   160e6:	|      move.l d0,-(sp)
   160e8:	|      jsr 17468 <__fixdfsi>
   160ee:	|      addq.l #8,sp
   160f0:	|      movea.l 76(sp),a0
   160f4:	|      move.l d0,(a0)
		*closestY += y1;
   160f6:	|      movea.l 76(sp),a0
   160fa:	|      move.l (a0),d0
   160fc:	|      add.l 84(sp),d0
   16100:	|      movea.l 76(sp),a0
   16104:	|      move.l d0,(a0)
		return TRUE;
   16106:	|      moveq #1,d0
   16108:	|  ,-- bra.s 1610c <closestPointOnLine+0x21e>
	}
	return FALSE;
   1610a:	'--|-> clr.w d0
}
   1610c:	   '-> move.l (sp)+,d2
   1610e:	       move.l (sp)+,d3
   16110:	       lea 60(sp),sp
   16114:	       rts

00016116 <drawFloor>:

void drawFloor() {
   16116:	                lea -12(sp),sp
   1611a:	                move.l d3,-(sp)
   1611c:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1611e:	                clr.l 16(sp)
   16122:	   ,----------- bra.w 16336 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   16126:	,--|----------> movea.l 1c8f0 <currentFloor>,a0
   1612c:	|  |            move.l 12(a0),d1
   16130:	|  |            move.l 16(sp),d0
   16134:	|  |            lsl.l #3,d0
   16136:	|  |            movea.l d1,a0
   16138:	|  |            adda.l d0,a0
   1613a:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   1613e:	|  |            moveq #1,d0
   16140:	|  |            cmp.l 8(sp),d0
   16144:	|  |  ,-------- bge.w 16332 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16148:	|  |  |         moveq #1,d0
   1614a:	|  |  |         move.l d0,12(sp)
   1614e:	|  |  |     ,-- bra.w 16248 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   16152:	|  |  |  ,--|-> movea.l 1c8f0 <currentFloor>,a0
   16158:	|  |  |  |  |   move.l 4(a0),d1
   1615c:	|  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   16162:	|  |  |  |  |   movea.l 12(a0),a0
   16166:	|  |  |  |  |   move.l 16(sp),d0
   1616a:	|  |  |  |  |   lsl.l #3,d0
   1616c:	|  |  |  |  |   adda.l d0,a0
   1616e:	|  |  |  |  |   movea.l 4(a0),a0
   16172:	|  |  |  |  |   move.l 12(sp),d0
   16176:	|  |  |  |  |   add.l d0,d0
   16178:	|  |  |  |  |   add.l d0,d0
   1617a:	|  |  |  |  |   adda.l d0,a0
   1617c:	|  |  |  |  |   move.l (a0),d0
   1617e:	|  |  |  |  |   lsl.l #3,d0
   16180:	|  |  |  |  |   movea.l d1,a0
   16182:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16184:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16188:	|  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   1618e:	|  |  |  |  |   move.l 4(a0),d1
   16192:	|  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   16198:	|  |  |  |  |   movea.l 12(a0),a0
   1619c:	|  |  |  |  |   move.l 16(sp),d0
   161a0:	|  |  |  |  |   lsl.l #3,d0
   161a2:	|  |  |  |  |   adda.l d0,a0
   161a4:	|  |  |  |  |   movea.l 4(a0),a0
   161a8:	|  |  |  |  |   move.l 12(sp),d0
   161ac:	|  |  |  |  |   add.l d0,d0
   161ae:	|  |  |  |  |   add.l d0,d0
   161b0:	|  |  |  |  |   adda.l d0,a0
   161b2:	|  |  |  |  |   move.l (a0),d0
   161b4:	|  |  |  |  |   lsl.l #3,d0
   161b6:	|  |  |  |  |   movea.l d1,a0
   161b8:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   161ba:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   161bc:	|  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   161c2:	|  |  |  |  |   move.l 4(a0),d1
   161c6:	|  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   161cc:	|  |  |  |  |   movea.l 12(a0),a0
   161d0:	|  |  |  |  |   move.l 16(sp),d0
   161d4:	|  |  |  |  |   lsl.l #3,d0
   161d6:	|  |  |  |  |   adda.l d0,a0
   161d8:	|  |  |  |  |   movea.l 4(a0),a0
   161dc:	|  |  |  |  |   move.l 12(sp),d0
   161e0:	|  |  |  |  |   addi.l #1073741823,d0
   161e6:	|  |  |  |  |   add.l d0,d0
   161e8:	|  |  |  |  |   add.l d0,d0
   161ea:	|  |  |  |  |   adda.l d0,a0
   161ec:	|  |  |  |  |   move.l (a0),d0
   161ee:	|  |  |  |  |   lsl.l #3,d0
   161f0:	|  |  |  |  |   movea.l d1,a0
   161f2:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   161f4:	|  |  |  |  |   move.l 4(a0),d1
   161f8:	|  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   161fe:	|  |  |  |  |   move.l 4(a0),d3
   16202:	|  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   16208:	|  |  |  |  |   movea.l 12(a0),a0
   1620c:	|  |  |  |  |   move.l 16(sp),d0
   16210:	|  |  |  |  |   lsl.l #3,d0
   16212:	|  |  |  |  |   adda.l d0,a0
   16214:	|  |  |  |  |   movea.l 4(a0),a0
   16218:	|  |  |  |  |   move.l 12(sp),d0
   1621c:	|  |  |  |  |   addi.l #1073741823,d0
   16222:	|  |  |  |  |   add.l d0,d0
   16224:	|  |  |  |  |   add.l d0,d0
   16226:	|  |  |  |  |   adda.l d0,a0
   16228:	|  |  |  |  |   move.l (a0),d0
   1622a:	|  |  |  |  |   lsl.l #3,d0
   1622c:	|  |  |  |  |   movea.l d3,a0
   1622e:	|  |  |  |  |   adda.l d0,a0
   16230:	|  |  |  |  |   move.l (a0),d0
   16232:	|  |  |  |  |   move.l d2,-(sp)
   16234:	|  |  |  |  |   move.l a1,-(sp)
   16236:	|  |  |  |  |   move.l d1,-(sp)
   16238:	|  |  |  |  |   move.l d0,-(sp)
   1623a:	|  |  |  |  |   jsr 46ce <drawLine>
   16240:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   16244:	|  |  |  |  |   addq.l #1,12(sp)
   16248:	|  |  |  |  '-> move.l 12(sp),d0
   1624c:	|  |  |  |      cmp.l 8(sp),d0
   16250:	|  |  |  '----- blt.w 16152 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   16254:	|  |  |         movea.l 1c8f0 <currentFloor>,a0
   1625a:	|  |  |         move.l 4(a0),d1
   1625e:	|  |  |         movea.l 1c8f0 <currentFloor>,a0
   16264:	|  |  |         movea.l 12(a0),a0
   16268:	|  |  |         move.l 16(sp),d0
   1626c:	|  |  |         lsl.l #3,d0
   1626e:	|  |  |         adda.l d0,a0
   16270:	|  |  |         movea.l 4(a0),a0
   16274:	|  |  |         move.l 8(sp),d0
   16278:	|  |  |         addi.l #1073741823,d0
   1627e:	|  |  |         add.l d0,d0
   16280:	|  |  |         add.l d0,d0
   16282:	|  |  |         adda.l d0,a0
   16284:	|  |  |         move.l (a0),d0
   16286:	|  |  |         lsl.l #3,d0
   16288:	|  |  |         movea.l d1,a0
   1628a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1628c:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16290:	|  |  |         movea.l 1c8f0 <currentFloor>,a0
   16296:	|  |  |         move.l 4(a0),d1
   1629a:	|  |  |         movea.l 1c8f0 <currentFloor>,a0
   162a0:	|  |  |         movea.l 12(a0),a0
   162a4:	|  |  |         move.l 16(sp),d0
   162a8:	|  |  |         lsl.l #3,d0
   162aa:	|  |  |         adda.l d0,a0
   162ac:	|  |  |         movea.l 4(a0),a0
   162b0:	|  |  |         move.l 8(sp),d0
   162b4:	|  |  |         addi.l #1073741823,d0
   162ba:	|  |  |         add.l d0,d0
   162bc:	|  |  |         add.l d0,d0
   162be:	|  |  |         adda.l d0,a0
   162c0:	|  |  |         move.l (a0),d0
   162c2:	|  |  |         lsl.l #3,d0
   162c4:	|  |  |         movea.l d1,a0
   162c6:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   162c8:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   162ca:	|  |  |         movea.l 1c8f0 <currentFloor>,a0
   162d0:	|  |  |         move.l 4(a0),d1
   162d4:	|  |  |         movea.l 1c8f0 <currentFloor>,a0
   162da:	|  |  |         movea.l 12(a0),a0
   162de:	|  |  |         move.l 16(sp),d0
   162e2:	|  |  |         lsl.l #3,d0
   162e4:	|  |  |         adda.l d0,a0
   162e6:	|  |  |         movea.l 4(a0),a0
   162ea:	|  |  |         move.l (a0),d0
   162ec:	|  |  |         lsl.l #3,d0
   162ee:	|  |  |         movea.l d1,a0
   162f0:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   162f2:	|  |  |         move.l 4(a0),d1
   162f6:	|  |  |         movea.l 1c8f0 <currentFloor>,a0
   162fc:	|  |  |         move.l 4(a0),d3
   16300:	|  |  |         movea.l 1c8f0 <currentFloor>,a0
   16306:	|  |  |         movea.l 12(a0),a0
   1630a:	|  |  |         move.l 16(sp),d0
   1630e:	|  |  |         lsl.l #3,d0
   16310:	|  |  |         adda.l d0,a0
   16312:	|  |  |         movea.l 4(a0),a0
   16316:	|  |  |         move.l (a0),d0
   16318:	|  |  |         lsl.l #3,d0
   1631a:	|  |  |         movea.l d3,a0
   1631c:	|  |  |         adda.l d0,a0
   1631e:	|  |  |         move.l (a0),d0
   16320:	|  |  |         move.l d2,-(sp)
   16322:	|  |  |         move.l a1,-(sp)
   16324:	|  |  |         move.l d1,-(sp)
   16326:	|  |  |         move.l d0,-(sp)
   16328:	|  |  |         jsr 46ce <drawLine>
   1632e:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16332:	|  |  '-------> addq.l #1,16(sp)
   16336:	|  '----------> movea.l 1c8f0 <currentFloor>,a0
   1633c:	|               move.l 8(a0),d0
   16340:	|               cmp.l 16(sp),d0
   16344:	'-------------- bgt.w 16126 <drawFloor+0x10>
        }
    }
}
   16348:	                nop
   1634a:	                nop
   1634c:	                move.l (sp)+,d2
   1634e:	                move.l (sp)+,d3
   16350:	                lea 12(sp),sp
   16354:	                rts

00016356 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   16356:	                      lea -12(sp),sp
    int sharedVertices = 0;
   1635a:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   1635e:	                      clr.l 4(sp)
   16362:	   ,----------------- bra.w 163f4 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   16366:	,--|----------------> clr.l (sp)
   16368:	|  |     ,----------- bra.s 163e4 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   1636a:	|  |  ,--|----------> movea.l 16(sp),a0
   1636e:	|  |  |  |            move.l 4(a0),d1
   16372:	|  |  |  |            move.l 4(sp),d0
   16376:	|  |  |  |            add.l d0,d0
   16378:	|  |  |  |            add.l d0,d0
   1637a:	|  |  |  |            movea.l d1,a0
   1637c:	|  |  |  |            adda.l d0,a0
   1637e:	|  |  |  |            move.l (a0),d1
   16380:	|  |  |  |            movea.l 20(sp),a0
   16384:	|  |  |  |            movea.l 4(a0),a0
   16388:	|  |  |  |            move.l (sp),d0
   1638a:	|  |  |  |            add.l d0,d0
   1638c:	|  |  |  |            add.l d0,d0
   1638e:	|  |  |  |            adda.l d0,a0
   16390:	|  |  |  |            move.l (a0),d0
   16392:	|  |  |  |            cmp.l d1,d0
   16394:	|  |  |  |  ,-------- bne.s 163e2 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16396:	|  |  |  |  |         move.l 8(sp),d0
   1639a:	|  |  |  |  |         move.l d0,d1
   1639c:	|  |  |  |  |         addq.l #1,d1
   1639e:	|  |  |  |  |         move.l d1,8(sp)
   163a2:	|  |  |  |  |         tst.l d0
   163a4:	|  |  |  |  |     ,-- beq.s 163c6 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   163a6:	|  |  |  |  |     |   movea.l 16(sp),a0
   163aa:	|  |  |  |  |     |   move.l 4(a0),d1
   163ae:	|  |  |  |  |     |   move.l 4(sp),d0
   163b2:	|  |  |  |  |     |   add.l d0,d0
   163b4:	|  |  |  |  |     |   add.l d0,d0
   163b6:	|  |  |  |  |     |   movea.l d1,a0
   163b8:	|  |  |  |  |     |   adda.l d0,a0
   163ba:	|  |  |  |  |     |   move.l (a0),d0
   163bc:	|  |  |  |  |     |   movea.l 28(sp),a0
   163c0:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   163c2:	|  |  |  |  |     |   moveq #1,d0
   163c4:	|  |  |  |  |  ,--|-- bra.s 16404 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   163c6:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   163ca:	|  |  |  |  |  |      move.l 4(a0),d1
   163ce:	|  |  |  |  |  |      move.l 4(sp),d0
   163d2:	|  |  |  |  |  |      add.l d0,d0
   163d4:	|  |  |  |  |  |      add.l d0,d0
   163d6:	|  |  |  |  |  |      movea.l d1,a0
   163d8:	|  |  |  |  |  |      adda.l d0,a0
   163da:	|  |  |  |  |  |      move.l (a0),d0
   163dc:	|  |  |  |  |  |      movea.l 24(sp),a0
   163e0:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   163e2:	|  |  |  |  '--|----> addq.l #1,(sp)
   163e4:	|  |  |  '-----|----> movea.l 20(sp),a0
   163e8:	|  |  |        |      move.l (a0),d0
   163ea:	|  |  |        |      cmp.l (sp),d0
   163ec:	|  |  '--------|----- bgt.w 1636a <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   163f0:	|  |           |      addq.l #1,4(sp)
   163f4:	|  '-----------|----> movea.l 16(sp),a0
   163f8:	|              |      move.l (a0),d0
   163fa:	|              |      cmp.l 4(sp),d0
   163fe:	'--------------|----- bgt.w 16366 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16402:	               |      clr.w d0
}
   16404:	               '----> lea 12(sp),sp
   16408:	                      rts

0001640a <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1640a:	movea.l 1c8f0 <currentFloor>,a0
   16410:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   16414:	movea.l 1c8f0 <currentFloor>,a0
   1641a:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   1641e:	movea.l 1c8f0 <currentFloor>,a0
   16424:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16428:	movea.l 1c8f0 <currentFloor>,a0
   1642e:	clr.l 16(a0)
}
   16432:	nop
   16434:	rts

00016436 <inFloor>:

int inFloor (int x, int y) {
   16436:	          subq.l #8,sp
	int i, r = -1;
   16438:	          moveq #-1,d0
   1643a:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1643c:	          clr.l 4(sp)
   16440:	   ,----- bra.s 16474 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   16442:	,--|----> movea.l 1c8f0 <currentFloor>,a0
   16448:	|  |      move.l 12(a0),d1
   1644c:	|  |      move.l 4(sp),d0
   16450:	|  |      lsl.l #3,d0
   16452:	|  |      add.l d1,d0
   16454:	|  |      move.l 16(sp),-(sp)
   16458:	|  |      move.l 16(sp),-(sp)
   1645c:	|  |      move.l d0,-(sp)
   1645e:	|  |      jsr 16640 <pointInFloorPolygon>
   16464:	|  |      lea 12(sp),sp
   16468:	|  |      tst.w d0
   1646a:	|  |  ,-- beq.s 16470 <inFloor+0x3a>
			r = i;
   1646c:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16470:	|  |  '-> addq.l #1,4(sp)
   16474:	|  '----> movea.l 1c8f0 <currentFloor>,a0
   1647a:	|         move.l 8(a0),d0
   1647e:	|         cmp.l 4(sp),d0
   16482:	'-------- bgt.s 16442 <inFloor+0xc>

	return r;
   16484:	          move.l (sp),d0
}
   16486:	          addq.l #8,sp
   16488:	          rts

0001648a <initFloor>:

BOOL initFloor () {
   1648a:	       lea -12(sp),sp
   1648e:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16490:	       moveq #20,d0
   16492:	       move.l d0,12(sp)
   16496:	       clr.l 8(sp)
   1649a:	       move.l 1c7d8 <SysBase>,d0
   164a0:	       movea.l d0,a6
   164a2:	       move.l 12(sp),d0
   164a6:	       move.l 8(sp),d1
   164aa:	       jsr -684(a6)
   164ae:	       move.l d0,4(sp)
   164b2:	       move.l 4(sp),d0
   164b6:	       move.l d0,1c8f0 <currentFloor>

    if(currentFloor == 0) {
   164bc:	       move.l 1c8f0 <currentFloor>,d0
   164c2:	,----- bne.s 164d6 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   164c4:	|      pea 19f19 <talk.c.490538ff+0x5fd>
   164ca:	|      jsr 170d4 <KPrintF>
   164d0:	|      addq.l #4,sp
        return FALSE;
   164d2:	|      clr.w d0
   164d4:	|  ,-- bra.s 164de <initFloor+0x54>
    }

	noFloor ();
   164d6:	'--|-> jsr 1640a <noFloor>
	return TRUE;
   164dc:	   |   moveq #1,d0
}
   164de:	   '-> movea.l (sp)+,a6
   164e0:	       lea 12(sp),sp
   164e4:	       rts

000164e6 <killFloor>:

void killFloor () {
   164e6:	       lea -24(sp),sp
   164ea:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   164ec:	       clr.l 24(sp)
   164f0:	   ,-- bra.s 1654a <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   164f2:	,--|-> movea.l 1c8f0 <currentFloor>,a0
   164f8:	|  |   move.l 12(a0),d1
   164fc:	|  |   move.l 24(sp),d0
   16500:	|  |   lsl.l #3,d0
   16502:	|  |   movea.l d1,a0
   16504:	|  |   adda.l d0,a0
   16506:	|  |   move.l 4(a0),8(sp)
   1650c:	|  |   move.l 1c7d8 <SysBase>,d0
   16512:	|  |   movea.l d0,a6
   16514:	|  |   movea.l 8(sp),a1
   16518:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   1651c:	|  |   movea.l 1c8f0 <currentFloor>,a0
   16522:	|  |   move.l 16(a0),d1
   16526:	|  |   move.l 24(sp),d0
   1652a:	|  |   add.l d0,d0
   1652c:	|  |   add.l d0,d0
   1652e:	|  |   movea.l d1,a0
   16530:	|  |   adda.l d0,a0
   16532:	|  |   move.l (a0),4(sp)
   16536:	|  |   move.l 1c7d8 <SysBase>,d0
   1653c:	|  |   movea.l d0,a6
   1653e:	|  |   movea.l 4(sp),a1
   16542:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16546:	|  |   addq.l #1,24(sp)
   1654a:	|  '-> movea.l 1c8f0 <currentFloor>,a0
   16550:	|      move.l 8(a0),d0
   16554:	|      cmp.l 24(sp),d0
   16558:	'----- bgt.s 164f2 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   1655a:	       movea.l 1c8f0 <currentFloor>,a0
   16560:	       move.l 12(a0),20(sp)
   16566:	       move.l 1c7d8 <SysBase>,d0
   1656c:	       movea.l d0,a6
   1656e:	       movea.l 20(sp),a1
   16572:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16576:	       movea.l 1c8f0 <currentFloor>,a0
   1657c:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16580:	       movea.l 1c8f0 <currentFloor>,a0
   16586:	       move.l 4(a0),16(sp)
   1658c:	       move.l 1c7d8 <SysBase>,d0
   16592:	       movea.l d0,a6
   16594:	       movea.l 16(sp),a1
   16598:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   1659c:	       movea.l 1c8f0 <currentFloor>,a0
   165a2:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   165a6:	       movea.l 1c8f0 <currentFloor>,a0
   165ac:	       move.l 16(a0),12(sp)
   165b2:	       move.l 1c7d8 <SysBase>,d0
   165b8:	       movea.l d0,a6
   165ba:	       movea.l 12(sp),a1
   165be:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   165c2:	       movea.l 1c8f0 <currentFloor>,a0
   165c8:	       clr.l 16(a0)
}
   165cc:	       nop
   165ce:	       movea.l (sp)+,a6
   165d0:	       lea 24(sp),sp
   165d4:	       rts

000165d6 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   165d6:	                   lea -12(sp),sp
	int sharedVertices = 0;
   165da:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   165de:	                   clr.l 4(sp)
   165e2:	   ,-------------- bra.s 1662e <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   165e4:	,--|-------------> clr.l (sp)
   165e6:	|  |     ,-------- bra.s 16622 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   165e8:	|  |  ,--|-------> move.l 20(sp),d1
   165ec:	|  |  |  |         move.l 4(sp),d0
   165f0:	|  |  |  |         add.l d0,d0
   165f2:	|  |  |  |         add.l d0,d0
   165f4:	|  |  |  |         movea.l d1,a0
   165f6:	|  |  |  |         adda.l d0,a0
   165f8:	|  |  |  |         move.l (a0),d1
   165fa:	|  |  |  |         movea.l 28(sp),a0
   165fe:	|  |  |  |         move.l (sp),d0
   16600:	|  |  |  |         add.l d0,d0
   16602:	|  |  |  |         add.l d0,d0
   16604:	|  |  |  |         adda.l d0,a0
   16606:	|  |  |  |         move.l (a0),d0
   16608:	|  |  |  |         cmp.l d1,d0
   1660a:	|  |  |  |     ,-- bne.s 16620 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   1660c:	|  |  |  |     |   move.l 8(sp),d0
   16610:	|  |  |  |     |   move.l d0,d1
   16612:	|  |  |  |     |   addq.l #1,d1
   16614:	|  |  |  |     |   move.l d1,8(sp)
   16618:	|  |  |  |     |   tst.l d0
   1661a:	|  |  |  |     +-- beq.s 16620 <polysShareSide+0x4a>
   1661c:	|  |  |  |     |   moveq #1,d0
   1661e:	|  |  |  |  ,--|-- bra.s 1663a <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16620:	|  |  |  |  |  '-> addq.l #1,(sp)
   16622:	|  |  |  '--|----> move.l 24(sp),d0
   16626:	|  |  |     |      cmp.l (sp),d0
   16628:	|  |  '-----|----- bgt.s 165e8 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   1662a:	|  |        |      addq.l #1,4(sp)
   1662e:	|  '--------|----> move.l 16(sp),d0
   16632:	|           |      cmp.l 4(sp),d0
   16636:	'-----------|----- bgt.s 165e4 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16638:	            |      clr.w d0
}
   1663a:	            '----> lea 12(sp),sp
   1663e:	                   rts

00016640 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16640:	             lea -28(sp),sp
   16644:	             move.l d3,-(sp)
   16646:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16648:	             clr.l 32(sp)
   1664c:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16650:	             movea.l 40(sp),a0
   16654:	             move.l (a0),d0
   16656:	             move.l d0,d1
   16658:	             subq.l #1,d1
   1665a:	             move.l d1,28(sp)
   1665e:	   ,-------- bra.w 16858 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16662:	,--|-------> movea.l 1c8f0 <currentFloor>,a0
   16668:	|  |         move.l 4(a0),d1
   1666c:	|  |         movea.l 40(sp),a0
   16670:	|  |         movea.l 4(a0),a0
   16674:	|  |         move.l 32(sp),d0
   16678:	|  |         add.l d0,d0
   1667a:	|  |         add.l d0,d0
   1667c:	|  |         adda.l d0,a0
   1667e:	|  |         move.l (a0),d0
   16680:	|  |         lsl.l #3,d0
   16682:	|  |         movea.l d1,a0
   16684:	|  |         adda.l d0,a0
   16686:	|  |         move.l (a0),d0
   16688:	|  |         move.l d0,-(sp)
   1668a:	|  |         jsr 17506 <__floatsisf>
   16690:	|  |         addq.l #4,sp
   16692:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16696:	|  |         movea.l 1c8f0 <currentFloor>,a0
   1669c:	|  |         move.l 4(a0),d1
   166a0:	|  |         movea.l 40(sp),a0
   166a4:	|  |         movea.l 4(a0),a0
   166a8:	|  |         move.l 32(sp),d0
   166ac:	|  |         add.l d0,d0
   166ae:	|  |         add.l d0,d0
   166b0:	|  |         adda.l d0,a0
   166b2:	|  |         move.l (a0),d0
   166b4:	|  |         lsl.l #3,d0
   166b6:	|  |         movea.l d1,a0
   166b8:	|  |         adda.l d0,a0
   166ba:	|  |         move.l 4(a0),d0
   166be:	|  |         move.l d0,-(sp)
   166c0:	|  |         jsr 17506 <__floatsisf>
   166c6:	|  |         addq.l #4,sp
   166c8:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   166cc:	|  |         movea.l 1c8f0 <currentFloor>,a0
   166d2:	|  |         move.l 4(a0),d1
   166d6:	|  |         movea.l 40(sp),a0
   166da:	|  |         movea.l 4(a0),a0
   166de:	|  |         move.l 28(sp),d0
   166e2:	|  |         add.l d0,d0
   166e4:	|  |         add.l d0,d0
   166e6:	|  |         adda.l d0,a0
   166e8:	|  |         move.l (a0),d0
   166ea:	|  |         lsl.l #3,d0
   166ec:	|  |         movea.l d1,a0
   166ee:	|  |         adda.l d0,a0
   166f0:	|  |         move.l (a0),d0
   166f2:	|  |         move.l d0,-(sp)
   166f4:	|  |         jsr 17506 <__floatsisf>
   166fa:	|  |         addq.l #4,sp
   166fc:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16700:	|  |         movea.l 1c8f0 <currentFloor>,a0
   16706:	|  |         move.l 4(a0),d1
   1670a:	|  |         movea.l 40(sp),a0
   1670e:	|  |         movea.l 4(a0),a0
   16712:	|  |         move.l 28(sp),d0
   16716:	|  |         add.l d0,d0
   16718:	|  |         add.l d0,d0
   1671a:	|  |         adda.l d0,a0
   1671c:	|  |         move.l (a0),d0
   1671e:	|  |         lsl.l #3,d0
   16720:	|  |         movea.l d1,a0
   16722:	|  |         adda.l d0,a0
   16724:	|  |         move.l 4(a0),d0
   16728:	|  |         move.l d0,-(sp)
   1672a:	|  |         jsr 17506 <__floatsisf>
   16730:	|  |         addq.l #4,sp
   16732:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16736:	|  |         move.l 48(sp),-(sp)
   1673a:	|  |         jsr 17506 <__floatsisf>
   16740:	|  |         addq.l #4,sp
   16742:	|  |         move.l d0,-(sp)
   16744:	|  |         move.l 20(sp),-(sp)
   16748:	|  |         jsr 176a8 <__lesf2>
   1674e:	|  |         addq.l #8,sp
   16750:	|  |         tst.l d0
   16752:	|  |     ,-- bgt.s 16772 <pointInFloorPolygon+0x132>
   16754:	|  |     |   move.l 48(sp),-(sp)
   16758:	|  |     |   jsr 17506 <__floatsisf>
   1675e:	|  |     |   addq.l #4,sp
   16760:	|  |     |   move.l d0,-(sp)
   16762:	|  |     |   move.l 12(sp),-(sp)
   16766:	|  |     |   jsr 17672 <__gtsf2>
   1676c:	|  |     |   addq.l #8,sp
   1676e:	|  |     |   tst.l d0
   16770:	|  |  ,--|-- bgt.s 167b2 <pointInFloorPolygon+0x172>
   16772:	|  |  |  '-> move.l 48(sp),-(sp)
   16776:	|  |  |      jsr 17506 <__floatsisf>
   1677c:	|  |  |      addq.l #4,sp
   1677e:	|  |  |      move.l d0,-(sp)
   16780:	|  |  |      move.l 12(sp),-(sp)
   16784:	|  |  |      jsr 176a8 <__lesf2>
   1678a:	|  |  |      addq.l #8,sp
   1678c:	|  |  |      tst.l d0
   1678e:	|  |  |  ,-- bgt.w 16848 <pointInFloorPolygon+0x208>
   16792:	|  |  |  |   move.l 48(sp),-(sp)
   16796:	|  |  |  |   jsr 17506 <__floatsisf>
   1679c:	|  |  |  |   addq.l #4,sp
   1679e:	|  |  |  |   move.l d0,-(sp)
   167a0:	|  |  |  |   move.l 20(sp),-(sp)
   167a4:	|  |  |  |   jsr 17672 <__gtsf2>
   167aa:	|  |  |  |   addq.l #8,sp
   167ac:	|  |  |  |   tst.l d0
   167ae:	|  |  |  +-- ble.w 16848 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   167b2:	|  |  '--|-> move.l 44(sp),-(sp)
   167b6:	|  |     |   jsr 17506 <__floatsisf>
   167bc:	|  |     |   addq.l #4,sp
   167be:	|  |     |   move.l d0,d3
   167c0:	|  |     |   move.l 20(sp),-(sp)
   167c4:	|  |     |   move.l 16(sp),-(sp)
   167c8:	|  |     |   jsr 177fa <__subsf3>
   167ce:	|  |     |   addq.l #8,sp
   167d0:	|  |     |   move.l d0,d2
   167d2:	|  |     |   move.l 48(sp),-(sp)
   167d6:	|  |     |   jsr 17506 <__floatsisf>
   167dc:	|  |     |   addq.l #4,sp
   167de:	|  |     |   move.l 16(sp),-(sp)
   167e2:	|  |     |   move.l d0,-(sp)
   167e4:	|  |     |   jsr 177fa <__subsf3>
   167ea:	|  |     |   addq.l #8,sp
   167ec:	|  |     |   move.l d0,-(sp)
   167ee:	|  |     |   move.l d2,-(sp)
   167f0:	|  |     |   jsr 175b8 <__mulsf3>
   167f6:	|  |     |   addq.l #8,sp
   167f8:	|  |     |   move.l d0,d2
   167fa:	|  |     |   move.l 16(sp),-(sp)
   167fe:	|  |     |   move.l 12(sp),-(sp)
   16802:	|  |     |   jsr 177fa <__subsf3>
   16808:	|  |     |   addq.l #8,sp
   1680a:	|  |     |   move.l d0,-(sp)
   1680c:	|  |     |   move.l d2,-(sp)
   1680e:	|  |     |   jsr 173bc <__divsf3>
   16814:	|  |     |   addq.l #8,sp
   16816:	|  |     |   move.l 20(sp),-(sp)
   1681a:	|  |     |   move.l d0,-(sp)
   1681c:	|  |     |   jsr 172c2 <__addsf3>
   16822:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16824:	|  |     |   move.l d0,-(sp)
   16826:	|  |     |   move.l d3,-(sp)
   16828:	|  |     |   jsr 1772c <__ltsf2>
   1682e:	|  |     |   addq.l #8,sp
   16830:	|  |     |   tst.l d0
   16832:	|  |     +-- bge.s 16848 <pointInFloorPolygon+0x208>

			c = !c;
   16834:	|  |     |   tst.l 24(sp)
   16838:	|  |     |   seq d0
   1683a:	|  |     |   neg.b d0
   1683c:	|  |     |   move.b d0,d0
   1683e:	|  |     |   andi.l #255,d0
   16844:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16848:	|  |     '-> move.l 32(sp),d0
   1684c:	|  |         move.l d0,d1
   1684e:	|  |         addq.l #1,d1
   16850:	|  |         move.l d1,32(sp)
   16854:	|  |         move.l d0,28(sp)
   16858:	|  '-------> movea.l 40(sp),a0
   1685c:	|            move.l (a0),d0
   1685e:	|            cmp.l 32(sp),d0
   16862:	'----------- bgt.w 16662 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16866:	             tst.l 24(sp)
   1686a:	             sne d0
   1686c:	             neg.b d0
   1686e:	             move.b d0,d0
   16870:	             andi.w #255,d0
}
   16874:	             move.l (sp)+,d2
   16876:	             move.l (sp)+,d3
   16878:	             lea 28(sp),sp
   1687c:	             rts

0001687e <setFloor>:

BOOL setFloor (int fileNum) {
   1687e:	                               lea -132(sp),sp
   16882:	                               move.l a6,-(sp)
   16884:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16886:	                               jsr 164e6 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   1688c:	                               move.l 144(sp),-(sp)
   16890:	                               jsr 75e2 <openFileFromNum>
   16896:	                               addq.l #4,sp
   16898:	                               tst.l d0
   1689a:	                           ,-- bne.s 168a2 <setFloor+0x24>
   1689c:	                           |   clr.w d0
   1689e:	,--------------------------|-- bra.w 16fee <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   168a2:	|                          '-> movea.l 1c8f0 <currentFloor>,a0
   168a8:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   168ac:	|                              move.l 1c7c0 <bigDataFile>,118(sp)
   168b4:	|                              move.l 1c7e0 <DOSBase>,d0
   168ba:	|                              movea.l d0,a6
   168bc:	|                              move.l 118(sp),d1
   168c0:	|                              jsr -306(a6)
   168c4:	|                              move.l d0,114(sp)
   168c8:	|                              move.l 114(sp),d0
   168cc:	|                              movea.l 1c8f0 <currentFloor>,a0
   168d2:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   168d6:	|                              movea.l 1c8f0 <currentFloor>,a0
   168dc:	|                              move.l 8(a0),d0
   168e0:	|                              lsl.l #3,d0
   168e2:	|                              move.l d0,110(sp)
   168e6:	|                              clr.l 106(sp)
   168ea:	|                              move.l 1c7d8 <SysBase>,d0
   168f0:	|                              movea.l d0,a6
   168f2:	|                              move.l 110(sp),d0
   168f6:	|                              move.l 106(sp),d1
   168fa:	|                              jsr -684(a6)
   168fe:	|                              move.l d0,102(sp)
   16902:	|                              move.l 102(sp),d0
   16906:	|                              movea.l 1c8f0 <currentFloor>,a0
   1690c:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16910:	|                              movea.l 1c8f0 <currentFloor>,a0
   16916:	|                              move.l 12(a0),d0
   1691a:	|                          ,-- bne.s 16930 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   1691c:	|                          |   pea 19f3d <talk.c.490538ff+0x621>
   16922:	|                          |   jsr 170d4 <KPrintF>
   16928:	|                          |   addq.l #4,sp
		return FALSE;
   1692a:	|                          |   clr.w d0
   1692c:	+--------------------------|-- bra.w 16fee <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16930:	|                          '-> clr.l 136(sp)
   16934:	|                    ,-------- bra.w 16a4c <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16938:	|                 ,--|-------> move.l 1c7c0 <bigDataFile>,26(sp)
   16940:	|                 |  |         move.l 1c7e0 <DOSBase>,d0
   16946:	|                 |  |         movea.l d0,a6
   16948:	|                 |  |         move.l 26(sp),d1
   1694c:	|                 |  |         jsr -306(a6)
   16950:	|                 |  |         move.l d0,22(sp)
   16954:	|                 |  |         move.l 22(sp),d1
   16958:	|                 |  |         movea.l 1c8f0 <currentFloor>,a0
   1695e:	|                 |  |         movea.l 12(a0),a0
   16962:	|                 |  |         move.l 136(sp),d0
   16966:	|                 |  |         lsl.l #3,d0
   16968:	|                 |  |         adda.l d0,a0
   1696a:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   1696c:	|                 |  |         movea.l 1c8f0 <currentFloor>,a0
   16972:	|                 |  |         move.l 12(a0),d1
   16976:	|                 |  |         move.l 136(sp),d0
   1697a:	|                 |  |         lsl.l #3,d0
   1697c:	|                 |  |         movea.l d1,a0
   1697e:	|                 |  |         adda.l d0,a0
   16980:	|                 |  |         move.l (a0),d0
   16982:	|                 |  |         add.l d0,d0
   16984:	|                 |  |         add.l d0,d0
   16986:	|                 |  |         move.l d0,18(sp)
   1698a:	|                 |  |         clr.l 14(sp)
   1698e:	|                 |  |         move.l 1c7d8 <SysBase>,d0
   16994:	|                 |  |         movea.l d0,a6
   16996:	|                 |  |         move.l 18(sp),d0
   1699a:	|                 |  |         move.l 14(sp),d1
   1699e:	|                 |  |         jsr -684(a6)
   169a2:	|                 |  |         move.l d0,10(sp)
   169a6:	|                 |  |         move.l 10(sp),d1
   169aa:	|                 |  |         movea.l 1c8f0 <currentFloor>,a0
   169b0:	|                 |  |         movea.l 12(a0),a0
   169b4:	|                 |  |         move.l 136(sp),d0
   169b8:	|                 |  |         lsl.l #3,d0
   169ba:	|                 |  |         adda.l d0,a0
   169bc:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   169c0:	|                 |  |         movea.l 1c8f0 <currentFloor>,a0
   169c6:	|                 |  |         move.l 12(a0),d1
   169ca:	|                 |  |         move.l 136(sp),d0
   169ce:	|                 |  |         lsl.l #3,d0
   169d0:	|                 |  |         movea.l d1,a0
   169d2:	|                 |  |         adda.l d0,a0
   169d4:	|                 |  |         move.l 4(a0),d0
   169d8:	|                 |  |     ,-- bne.s 169ee <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   169da:	|                 |  |     |   pea 19f3d <talk.c.490538ff+0x621>
   169e0:	|                 |  |     |   jsr 170d4 <KPrintF>
   169e6:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   169e8:	|                 |  |     |   clr.w d0
   169ea:	+-----------------|--|-----|-- bra.w 16fee <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   169ee:	|                 |  |     '-> clr.l 132(sp)
   169f2:	|                 |  |     ,-- bra.s 16a2c <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   169f4:	|                 |  |  ,--|-> move.l 1c7c0 <bigDataFile>,d1
   169fa:	|                 |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   16a00:	|                 |  |  |  |   movea.l 12(a0),a0
   16a04:	|                 |  |  |  |   move.l 136(sp),d0
   16a08:	|                 |  |  |  |   lsl.l #3,d0
   16a0a:	|                 |  |  |  |   adda.l d0,a0
   16a0c:	|                 |  |  |  |   movea.l 4(a0),a0
   16a10:	|                 |  |  |  |   move.l 132(sp),d0
   16a14:	|                 |  |  |  |   add.l d0,d0
   16a16:	|                 |  |  |  |   add.l d0,d0
   16a18:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16a1c:	|                 |  |  |  |   move.l d1,-(sp)
   16a1e:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16a24:	|                 |  |  |  |   addq.l #4,sp
   16a26:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16a28:	|                 |  |  |  |   addq.l #1,132(sp)
   16a2c:	|                 |  |  |  '-> movea.l 1c8f0 <currentFloor>,a0
   16a32:	|                 |  |  |      move.l 12(a0),d1
   16a36:	|                 |  |  |      move.l 136(sp),d0
   16a3a:	|                 |  |  |      lsl.l #3,d0
   16a3c:	|                 |  |  |      movea.l d1,a0
   16a3e:	|                 |  |  |      adda.l d0,a0
   16a40:	|                 |  |  |      move.l (a0),d0
   16a42:	|                 |  |  |      cmp.l 132(sp),d0
   16a46:	|                 |  |  '----- bgt.s 169f4 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16a48:	|                 |  |         addq.l #1,136(sp)
   16a4c:	|                 |  '-------> movea.l 1c8f0 <currentFloor>,a0
   16a52:	|                 |            move.l 8(a0),d0
   16a56:	|                 |            cmp.l 136(sp),d0
   16a5a:	|                 '----------- bgt.w 16938 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16a5e:	|                              move.l 1c7c0 <bigDataFile>,d0
   16a64:	|                              move.l d0,-(sp)
   16a66:	|                              jsr 6bc <get2bytes>
   16a6c:	|                              addq.l #4,sp
   16a6e:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16a72:	|                              move.l 136(sp),d0
   16a76:	|                              lsl.l #3,d0
   16a78:	|                              move.l d0,98(sp)
   16a7c:	|                              clr.l 94(sp)
   16a80:	|                              move.l 1c7d8 <SysBase>,d0
   16a86:	|                              movea.l d0,a6
   16a88:	|                              move.l 98(sp),d0
   16a8c:	|                              move.l 94(sp),d1
   16a90:	|                              jsr -684(a6)
   16a94:	|                              move.l d0,90(sp)
   16a98:	|                              move.l 90(sp),d0
   16a9c:	|                              movea.l 1c8f0 <currentFloor>,a0
   16aa2:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16aa6:	|                              movea.l 1c8f0 <currentFloor>,a0
   16aac:	|                              move.l 4(a0),d0
   16ab0:	|                          ,-- bne.s 16ac6 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16ab2:	|                          |   pea 19f3d <talk.c.490538ff+0x621>
   16ab8:	|                          |   jsr 170d4 <KPrintF>
   16abe:	|                          |   addq.l #4,sp
		return FALSE;
   16ac0:	|                          |   clr.w d0
   16ac2:	+--------------------------|-- bra.w 16fee <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16ac6:	|                          '-> clr.l 132(sp)
   16aca:	|                          ,-- bra.s 16b1e <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16acc:	|                       ,--|-> move.l 1c7c0 <bigDataFile>,d1
   16ad2:	|                       |  |   movea.l 1c8f0 <currentFloor>,a0
   16ad8:	|                       |  |   movea.l 4(a0),a0
   16adc:	|                       |  |   move.l 132(sp),d0
   16ae0:	|                       |  |   lsl.l #3,d0
   16ae2:	|                       |  |   lea (0,a0,d0.l),a2
   16ae6:	|                       |  |   move.l d1,-(sp)
   16ae8:	|                       |  |   jsr 6bc <get2bytes>
   16aee:	|                       |  |   addq.l #4,sp
   16af0:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16af2:	|                       |  |   move.l 1c7c0 <bigDataFile>,d1
   16af8:	|                       |  |   movea.l 1c8f0 <currentFloor>,a0
   16afe:	|                       |  |   movea.l 4(a0),a0
   16b02:	|                       |  |   move.l 132(sp),d0
   16b06:	|                       |  |   lsl.l #3,d0
   16b08:	|                       |  |   lea (0,a0,d0.l),a2
   16b0c:	|                       |  |   move.l d1,-(sp)
   16b0e:	|                       |  |   jsr 6bc <get2bytes>
   16b14:	|                       |  |   addq.l #4,sp
   16b16:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16b1a:	|                       |  |   addq.l #1,132(sp)
   16b1e:	|                       |  '-> move.l 132(sp),d0
   16b22:	|                       |      cmp.l 136(sp),d0
   16b26:	|                       '----- blt.s 16acc <setFloor+0x24e>
	}

	finishAccess ();
   16b28:	|                              jsr 74da <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16b2e:	|                              movea.l 1c8f0 <currentFloor>,a0
   16b34:	|                              move.l 8(a0),d0
   16b38:	|                              add.l d0,d0
   16b3a:	|                              add.l d0,d0
   16b3c:	|                              move.l d0,86(sp)
   16b40:	|                              clr.l 82(sp)
   16b44:	|                              move.l 1c7d8 <SysBase>,d0
   16b4a:	|                              movea.l d0,a6
   16b4c:	|                              move.l 86(sp),d0
   16b50:	|                              move.l 82(sp),d1
   16b54:	|                              jsr -684(a6)
   16b58:	|                              move.l d0,78(sp)
   16b5c:	|                              move.l 78(sp),d0
   16b60:	|                              movea.l 1c8f0 <currentFloor>,a0
   16b66:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16b6a:	|                              movea.l 1c8f0 <currentFloor>,a0
   16b70:	|                              move.l 8(a0),d0
   16b74:	|                              add.l d0,d0
   16b76:	|                              add.l d0,d0
   16b78:	|                              move.l d0,74(sp)
   16b7c:	|                              clr.l 70(sp)
   16b80:	|                              move.l 1c7d8 <SysBase>,d0
   16b86:	|                              movea.l d0,a6
   16b88:	|                              move.l 74(sp),d0
   16b8c:	|                              move.l 70(sp),d1
   16b90:	|                              jsr -684(a6)
   16b94:	|                              move.l d0,66(sp)
   16b98:	|                              move.l 66(sp),d0
   16b9c:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16ba0:	|                              movea.l 1c8f0 <currentFloor>,a0
   16ba6:	|                              move.l 16(a0),d0
   16baa:	|                          ,-- bne.s 16bc0 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16bac:	|                          |   pea 19f3d <talk.c.490538ff+0x621>
   16bb2:	|                          |   jsr 170d4 <KPrintF>
   16bb8:	|                          |   addq.l #4,sp
		return FALSE;
   16bba:	|                          |   clr.w d0
   16bbc:	+--------------------------|-- bra.w 16fee <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16bc0:	|                          '-> clr.l 136(sp)
   16bc4:	|                    ,-------- bra.w 16ce8 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16bc8:	|                 ,--|-------> movea.l 1c8f0 <currentFloor>,a0
   16bce:	|                 |  |         move.l 8(a0),d0
   16bd2:	|                 |  |         add.l d0,d0
   16bd4:	|                 |  |         add.l d0,d0
   16bd6:	|                 |  |         move.l d0,50(sp)
   16bda:	|                 |  |         clr.l 46(sp)
   16bde:	|                 |  |         move.l 1c7d8 <SysBase>,d0
   16be4:	|                 |  |         movea.l d0,a6
   16be6:	|                 |  |         move.l 50(sp),d0
   16bea:	|                 |  |         move.l 46(sp),d1
   16bee:	|                 |  |         jsr -684(a6)
   16bf2:	|                 |  |         move.l d0,42(sp)
   16bf6:	|                 |  |         move.l 42(sp),d0
   16bfa:	|                 |  |         movea.l 1c8f0 <currentFloor>,a0
   16c00:	|                 |  |         movea.l 16(a0),a0
   16c04:	|                 |  |         move.l 136(sp),d1
   16c08:	|                 |  |         add.l d1,d1
   16c0a:	|                 |  |         add.l d1,d1
   16c0c:	|                 |  |         adda.l d1,a0
   16c0e:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16c10:	|                 |  |         movea.l 1c8f0 <currentFloor>,a0
   16c16:	|                 |  |         move.l 8(a0),d0
   16c1a:	|                 |  |         add.l d0,d0
   16c1c:	|                 |  |         add.l d0,d0
   16c1e:	|                 |  |         move.l d0,38(sp)
   16c22:	|                 |  |         clr.l 34(sp)
   16c26:	|                 |  |         move.l 1c7d8 <SysBase>,d0
   16c2c:	|                 |  |         movea.l d0,a6
   16c2e:	|                 |  |         move.l 38(sp),d0
   16c32:	|                 |  |         move.l 34(sp),d1
   16c36:	|                 |  |         jsr -684(a6)
   16c3a:	|                 |  |         move.l d0,30(sp)
   16c3e:	|                 |  |         move.l 30(sp),d1
   16c42:	|                 |  |         move.l 136(sp),d0
   16c46:	|                 |  |         add.l d0,d0
   16c48:	|                 |  |         add.l d0,d0
   16c4a:	|                 |  |         movea.l 62(sp),a0
   16c4e:	|                 |  |         adda.l d0,a0
   16c50:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16c52:	|                 |  |         movea.l 1c8f0 <currentFloor>,a0
   16c58:	|                 |  |         move.l 16(a0),d1
   16c5c:	|                 |  |         move.l 136(sp),d0
   16c60:	|                 |  |         add.l d0,d0
   16c62:	|                 |  |         add.l d0,d0
   16c64:	|                 |  |         movea.l d1,a0
   16c66:	|                 |  |         adda.l d0,a0
   16c68:	|                 |  |         move.l (a0),d0
   16c6a:	|                 |  |     ,-- bne.s 16c80 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16c6c:	|                 |  |     |   pea 19f3d <talk.c.490538ff+0x621>
   16c72:	|                 |  |     |   jsr 170d4 <KPrintF>
   16c78:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16c7a:	|                 |  |     |   clr.w d0
   16c7c:	+-----------------|--|-----|-- bra.w 16fee <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16c80:	|                 |  |     '-> clr.l 132(sp)
   16c84:	|                 |  |     ,-- bra.s 16cd4 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16c86:	|                 |  |  ,--|-> movea.l 1c8f0 <currentFloor>,a0
   16c8c:	|                 |  |  |  |   move.l 16(a0),d1
   16c90:	|                 |  |  |  |   move.l 136(sp),d0
   16c94:	|                 |  |  |  |   add.l d0,d0
   16c96:	|                 |  |  |  |   add.l d0,d0
   16c98:	|                 |  |  |  |   movea.l d1,a0
   16c9a:	|                 |  |  |  |   adda.l d0,a0
   16c9c:	|                 |  |  |  |   move.l (a0),d1
   16c9e:	|                 |  |  |  |   move.l 132(sp),d0
   16ca2:	|                 |  |  |  |   add.l d0,d0
   16ca4:	|                 |  |  |  |   add.l d0,d0
   16ca6:	|                 |  |  |  |   movea.l d1,a0
   16ca8:	|                 |  |  |  |   adda.l d0,a0
   16caa:	|                 |  |  |  |   moveq #-1,d1
   16cac:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16cae:	|                 |  |  |  |   move.l 136(sp),d0
   16cb2:	|                 |  |  |  |   add.l d0,d0
   16cb4:	|                 |  |  |  |   add.l d0,d0
   16cb6:	|                 |  |  |  |   movea.l 62(sp),a0
   16cba:	|                 |  |  |  |   adda.l d0,a0
   16cbc:	|                 |  |  |  |   move.l (a0),d1
   16cbe:	|                 |  |  |  |   move.l 132(sp),d0
   16cc2:	|                 |  |  |  |   add.l d0,d0
   16cc4:	|                 |  |  |  |   add.l d0,d0
   16cc6:	|                 |  |  |  |   movea.l d1,a0
   16cc8:	|                 |  |  |  |   adda.l d0,a0
   16cca:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16cd0:	|                 |  |  |  |   addq.l #1,132(sp)
   16cd4:	|                 |  |  |  '-> movea.l 1c8f0 <currentFloor>,a0
   16cda:	|                 |  |  |      move.l 8(a0),d0
   16cde:	|                 |  |  |      cmp.l 132(sp),d0
   16ce2:	|                 |  |  '----- bgt.s 16c86 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16ce4:	|                 |  |         addq.l #1,136(sp)
   16ce8:	|                 |  '-------> movea.l 1c8f0 <currentFloor>,a0
   16cee:	|                 |            move.l 8(a0),d0
   16cf2:	|                 |            cmp.l 136(sp),d0
   16cf6:	|                 '----------- bgt.w 16bc8 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16cfa:	|                              clr.l 136(sp)
   16cfe:	|              ,-------------- bra.w 16e04 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16d02:	|           ,--|-------------> clr.l 132(sp)
   16d06:	|           |  |     ,-------- bra.w 16dee <setFloor+0x570>
			if (i != j) {
   16d0a:	|           |  |  ,--|-------> move.l 136(sp),d0
   16d0e:	|           |  |  |  |         cmp.l 132(sp),d0
   16d12:	|           |  |  |  |     ,-- beq.w 16da4 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16d16:	|           |  |  |  |     |   movea.l 1c8f0 <currentFloor>,a0
   16d1c:	|           |  |  |  |     |   move.l 12(a0),d1
   16d20:	|           |  |  |  |     |   move.l 132(sp),d0
   16d24:	|           |  |  |  |     |   lsl.l #3,d0
   16d26:	|           |  |  |  |     |   movea.l d1,a1
   16d28:	|           |  |  |  |     |   adda.l d0,a1
   16d2a:	|           |  |  |  |     |   movea.l 1c8f0 <currentFloor>,a0
   16d30:	|           |  |  |  |     |   move.l 12(a0),d1
   16d34:	|           |  |  |  |     |   move.l 136(sp),d0
   16d38:	|           |  |  |  |     |   lsl.l #3,d0
   16d3a:	|           |  |  |  |     |   movea.l d1,a0
   16d3c:	|           |  |  |  |     |   adda.l d0,a0
   16d3e:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16d42:	|           |  |  |  |     |   move.l (a1),-(sp)
   16d44:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16d48:	|           |  |  |  |     |   move.l (a0),-(sp)
   16d4a:	|           |  |  |  |     |   jsr 165d6 <polysShareSide>
   16d50:	|           |  |  |  |     |   lea 16(sp),sp
   16d54:	|           |  |  |  |     |   tst.w d0
   16d56:	|           |  |  |  |  ,--|-- beq.w 16dea <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16d5a:	|           |  |  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   16d60:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16d64:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16d68:	|           |  |  |  |  |  |   add.l d0,d0
   16d6a:	|           |  |  |  |  |  |   add.l d0,d0
   16d6c:	|           |  |  |  |  |  |   movea.l d1,a0
   16d6e:	|           |  |  |  |  |  |   adda.l d0,a0
   16d70:	|           |  |  |  |  |  |   move.l (a0),d1
   16d72:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16d76:	|           |  |  |  |  |  |   add.l d0,d0
   16d78:	|           |  |  |  |  |  |   add.l d0,d0
   16d7a:	|           |  |  |  |  |  |   movea.l d1,a0
   16d7c:	|           |  |  |  |  |  |   adda.l d0,a0
   16d7e:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16d82:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16d86:	|           |  |  |  |  |  |   add.l d0,d0
   16d88:	|           |  |  |  |  |  |   add.l d0,d0
   16d8a:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16d8e:	|           |  |  |  |  |  |   adda.l d0,a0
   16d90:	|           |  |  |  |  |  |   move.l (a0),d1
   16d92:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16d96:	|           |  |  |  |  |  |   add.l d0,d0
   16d98:	|           |  |  |  |  |  |   add.l d0,d0
   16d9a:	|           |  |  |  |  |  |   movea.l d1,a0
   16d9c:	|           |  |  |  |  |  |   adda.l d0,a0
   16d9e:	|           |  |  |  |  |  |   moveq #1,d1
   16da0:	|           |  |  |  |  |  |   move.l d1,(a0)
   16da2:	|           |  |  |  |  +--|-- bra.s 16dea <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   16da4:	|           |  |  |  |  |  '-> movea.l 1c8f0 <currentFloor>,a0
   16daa:	|           |  |  |  |  |      move.l 16(a0),d1
   16dae:	|           |  |  |  |  |      move.l 136(sp),d0
   16db2:	|           |  |  |  |  |      add.l d0,d0
   16db4:	|           |  |  |  |  |      add.l d0,d0
   16db6:	|           |  |  |  |  |      movea.l d1,a0
   16db8:	|           |  |  |  |  |      adda.l d0,a0
   16dba:	|           |  |  |  |  |      move.l (a0),d1
   16dbc:	|           |  |  |  |  |      move.l 132(sp),d0
   16dc0:	|           |  |  |  |  |      add.l d0,d0
   16dc2:	|           |  |  |  |  |      add.l d0,d0
   16dc4:	|           |  |  |  |  |      movea.l d1,a0
   16dc6:	|           |  |  |  |  |      adda.l d0,a0
   16dc8:	|           |  |  |  |  |      moveq #-2,d0
   16dca:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16dcc:	|           |  |  |  |  |      move.l 136(sp),d0
   16dd0:	|           |  |  |  |  |      add.l d0,d0
   16dd2:	|           |  |  |  |  |      add.l d0,d0
   16dd4:	|           |  |  |  |  |      movea.l 62(sp),a0
   16dd8:	|           |  |  |  |  |      adda.l d0,a0
   16dda:	|           |  |  |  |  |      move.l (a0),d1
   16ddc:	|           |  |  |  |  |      move.l 132(sp),d0
   16de0:	|           |  |  |  |  |      add.l d0,d0
   16de2:	|           |  |  |  |  |      add.l d0,d0
   16de4:	|           |  |  |  |  |      movea.l d1,a0
   16de6:	|           |  |  |  |  |      adda.l d0,a0
   16de8:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16dea:	|           |  |  |  |  '----> addq.l #1,132(sp)
   16dee:	|           |  |  |  '-------> movea.l 1c8f0 <currentFloor>,a0
   16df4:	|           |  |  |            move.l 8(a0),d0
   16df8:	|           |  |  |            cmp.l 132(sp),d0
   16dfc:	|           |  |  '----------- bgt.w 16d0a <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e00:	|           |  |               addq.l #1,136(sp)
   16e04:	|           |  '-------------> movea.l 1c8f0 <currentFloor>,a0
   16e0a:	|           |                  move.l 8(a0),d0
   16e0e:	|           |                  cmp.l 136(sp),d0
   16e12:	|           '----------------- bgt.w 16d02 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   16e16:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   16e1a:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   16e1e:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e22:	|  |                           clr.l 136(sp)
   16e26:	|  |     ,-------------------- bra.w 16f7c <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16e2a:	|  |  ,--|-------------------> clr.l 132(sp)
   16e2e:	|  |  |  |     ,-------------- bra.w 16f66 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   16e32:	|  |  |  |  ,--|-------------> movea.l 1c8f0 <currentFloor>,a0
   16e38:	|  |  |  |  |  |               move.l 16(a0),d1
   16e3c:	|  |  |  |  |  |               move.l 136(sp),d0
   16e40:	|  |  |  |  |  |               add.l d0,d0
   16e42:	|  |  |  |  |  |               add.l d0,d0
   16e44:	|  |  |  |  |  |               movea.l d1,a0
   16e46:	|  |  |  |  |  |               adda.l d0,a0
   16e48:	|  |  |  |  |  |               move.l (a0),d1
   16e4a:	|  |  |  |  |  |               move.l 132(sp),d0
   16e4e:	|  |  |  |  |  |               add.l d0,d0
   16e50:	|  |  |  |  |  |               add.l d0,d0
   16e52:	|  |  |  |  |  |               movea.l d1,a0
   16e54:	|  |  |  |  |  |               adda.l d0,a0
   16e56:	|  |  |  |  |  |               move.l (a0),d0
   16e58:	|  |  |  |  |  |               moveq #-1,d1
   16e5a:	|  |  |  |  |  |               cmp.l d0,d1
   16e5c:	|  |  |  |  |  |  ,----------- bne.w 16f62 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16e60:	|  |  |  |  |  |  |            clr.l 122(sp)
   16e64:	|  |  |  |  |  |  |     ,----- bra.w 16f50 <setFloor+0x6d2>
						if (d != i && d != j) {
   16e68:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   16e6c:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   16e70:	|  |  |  |  |  |  |  |  |  ,-- beq.w 16f4c <setFloor+0x6ce>
   16e74:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16e78:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16e7c:	|  |  |  |  |  |  |  |  |  +-- beq.w 16f4c <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16e80:	|  |  |  |  |  |  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   16e86:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16e8a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16e8e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e90:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e92:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16e94:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16e96:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16e98:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16e9c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16e9e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ea0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ea2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ea4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16ea6:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16eaa:	|  |  |  |  |  |  |  |  |  +-- bne.w 16f4c <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16eae:	|  |  |  |  |  |  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   16eb4:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16eb8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16ebc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ebe:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ec0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ec2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ec4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16ec6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16eca:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ecc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ece:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ed0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ed2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16ed4:	|  |  |  |  |  |  |  |  |  +-- bmi.s 16f4c <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16ed6:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16eda:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16edc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ede:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16ee2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ee4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16ee6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16eea:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16eec:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16eee:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ef0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ef2:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16ef4:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16ef8:	|  |  |  |  |  |  |  |  |  +-- bgt.s 16f4c <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16efa:	|  |  |  |  |  |  |  |  |  |   movea.l 1c8f0 <currentFloor>,a0
   16f00:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16f04:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16f08:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f0a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f0c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f0e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f10:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f12:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16f16:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f18:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f1a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f1c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f1e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   16f22:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16f26:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f28:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f2a:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16f2e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f30:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16f32:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16f36:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f38:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16f3a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16f3c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16f3e:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16f42:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16f44:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16f46:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16f4c:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   16f50:	|  |  |  |  |  |  |  |  '----> movea.l 1c8f0 <currentFloor>,a0
   16f56:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   16f5a:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   16f5e:	|  |  |  |  |  |  |  '-------- bgt.w 16e68 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f62:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   16f66:	|  |  |  |  |  '-------------> movea.l 1c8f0 <currentFloor>,a0
   16f6c:	|  |  |  |  |                  move.l 8(a0),d0
   16f70:	|  |  |  |  |                  cmp.l 132(sp),d0
   16f74:	|  |  |  |  '----------------- bgt.w 16e32 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f78:	|  |  |  |                     addq.l #1,136(sp)
   16f7c:	|  |  |  '-------------------> movea.l 1c8f0 <currentFloor>,a0
   16f82:	|  |  |                        move.l 8(a0),d0
   16f86:	|  |  |                        cmp.l 136(sp),d0
   16f8a:	|  |  '----------------------- bgt.w 16e2a <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   16f8e:	|  |                           tst.w 130(sp)
   16f92:	|  '-------------------------- bne.w 16e1a <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f96:	|                              clr.l 136(sp)
   16f9a:	|                          ,-- bra.s 16fc2 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   16f9c:	|                       ,--|-> move.l 136(sp),d0
   16fa0:	|                       |  |   add.l d0,d0
   16fa2:	|                       |  |   add.l d0,d0
   16fa4:	|                       |  |   movea.l 62(sp),a0
   16fa8:	|                       |  |   adda.l d0,a0
   16faa:	|                       |  |   move.l (a0),54(sp)
   16fae:	|                       |  |   move.l 1c7d8 <SysBase>,d0
   16fb4:	|                       |  |   movea.l d0,a6
   16fb6:	|                       |  |   movea.l 54(sp),a1
   16fba:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16fbe:	|                       |  |   addq.l #1,136(sp)
   16fc2:	|                       |  '-> movea.l 1c8f0 <currentFloor>,a0
   16fc8:	|                       |      move.l 8(a0),d0
   16fcc:	|                       |      cmp.l 136(sp),d0
   16fd0:	|                       '----- bgt.s 16f9c <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   16fd2:	|                              move.l 62(sp),58(sp)
   16fd8:	|                              move.l 1c7d8 <SysBase>,d0
   16fde:	|                              movea.l d0,a6
   16fe0:	|                              movea.l 58(sp),a1
   16fe4:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   16fe8:	|                              clr.l 62(sp)

	return TRUE;
   16fec:	|                              moveq #1,d0
}
   16fee:	'----------------------------> movea.l (sp)+,a2
   16ff0:	                               movea.l (sp)+,a6
   16ff2:	                               lea 132(sp),sp
   16ff6:	                               rts

00016ff8 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   16ff8:	jsr 164e6 <killFloor>
	noFloor ();
   16ffe:	jsr 1640a <noFloor>
   17004:	nop
   17006:	rts

00017008 <WaitVbl>:
void WaitVbl() {
   17008:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1700a:	   ,-> movea.l #14675972,a0
   17010:	   |   move.l (a0),d0
   17012:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   17014:	   |   move.l (sp),d0
   17016:	   |   andi.l #130816,d0
   1701c:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   1701e:	   |   move.l (sp),d0
   17020:	   |   cmpi.l #76800,d0
   17026:	   '-- beq.s 1700a <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17028:	,----> movea.l #14675972,a0
   1702e:	|      move.l (a0),d0
   17030:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   17034:	|      move.l 4(sp),d0
   17038:	|      andi.l #130816,d0
   1703e:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   17042:	|      move.l 4(sp),d0
   17046:	|      cmpi.l #76800,d0
   1704c:	|  ,-- beq.s 17050 <WaitVbl+0x48>
	while (1) {
   1704e:	'--|-- bra.s 17028 <WaitVbl+0x20>
			break;
   17050:	   '-> nop
}
   17052:	       nop
   17054:	       addq.l #8,sp
   17056:	       rts

00017058 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   17058:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1705a:	       move.l 8(sp),(sp)
	while(len-- > 0)
   1705e:	   ,-- bra.s 17070 <memset+0x18>
		*ptr++ = val;
   17060:	,--|-> move.l (sp),d0
   17062:	|  |   move.l d0,d1
   17064:	|  |   addq.l #1,d1
   17066:	|  |   move.l d1,(sp)
   17068:	|  |   move.l 12(sp),d1
   1706c:	|  |   movea.l d0,a0
   1706e:	|  |   move.b d1,(a0)
	while(len-- > 0)
   17070:	|  '-> move.l 16(sp),d0
   17074:	|      move.l d0,d1
   17076:	|      subq.l #1,d1
   17078:	|      move.l d1,16(sp)
   1707c:	|      tst.l d0
   1707e:	'----- bne.s 17060 <memset+0x8>
	return dest;
   17080:	       move.l 8(sp),d0
}
   17084:	       addq.l #4,sp
   17086:	       rts

00017088 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   17088:	       subq.l #8,sp
   1708a:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1708c:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   17092:	       move.l 20(sp),4(sp)
	while(len--)
   17098:	   ,-- bra.s 170ba <memcpy+0x32>
		*d++ = *s++;
   1709a:	,--|-> move.l 4(sp),d1
   1709e:	|  |   move.l d1,d0
   170a0:	|  |   addq.l #1,d0
   170a2:	|  |   move.l d0,4(sp)
   170a6:	|  |   move.l 8(sp),d0
   170aa:	|  |   move.l d0,d2
   170ac:	|  |   addq.l #1,d2
   170ae:	|  |   move.l d2,8(sp)
   170b2:	|  |   movea.l d1,a0
   170b4:	|  |   move.b (a0),d1
   170b6:	|  |   movea.l d0,a0
   170b8:	|  |   move.b d1,(a0)
	while(len--)
   170ba:	|  '-> move.l 24(sp),d0
   170be:	|      move.l d0,d1
   170c0:	|      subq.l #1,d1
   170c2:	|      move.l d1,24(sp)
   170c6:	|      tst.l d0
   170c8:	'----- bne.s 1709a <memcpy+0x12>
	return dest;
   170ca:	       move.l 16(sp),d0
}
   170ce:	       move.l (sp)+,d2
   170d0:	       addq.l #8,sp
   170d2:	       rts

000170d4 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   170d4:	       lea -128(sp),sp
   170d8:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   170dc:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4d77>,d0
   170e2:	       cmpi.w #20153,d0
   170e6:	   ,-- beq.s 1710a <KPrintF+0x36>
   170e8:	   |   cmpi.w #-24562,d0
   170ec:	   +-- beq.s 1710a <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   170ee:	   |   movea.l 1c7d8 <SysBase>,a6
   170f4:	   |   movea.l 144(sp),a0
   170f8:	   |   lea 148(sp),a1
   170fc:	   |   lea 17b68 <KPutCharX>,a2
   17102:	   |   suba.l a3,a3
   17104:	   |   jsr -522(a6)
}
   17108:	,--|-- bra.s 17134 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1710a:	|  '-> movea.l 1c7d8 <SysBase>,a6
   17110:	|      movea.l 144(sp),a0
   17114:	|      lea 148(sp),a1
   17118:	|      lea 17b76 <PutChar>,a2
   1711e:	|      lea 12(sp),a3
   17122:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   17126:	|      move.l a3,-(sp)
   17128:	|      pea 56 <_start+0x56>
   1712c:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4d77>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17132:	|      addq.l #8,sp
}
   17134:	'----> movem.l (sp)+,a2-a3/a6
   17138:	       lea 128(sp),sp
   1713c:	       rts

0001713e <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   1713e:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   17140:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   17146:	       movea.l (sp),a0
   17148:	       move.w (a0),d0
   1714a:	       cmpi.w #20153,d0
   1714e:	   ,-- beq.s 1715a <debug_cmd+0x1c>
   17150:	   |   movea.l (sp),a0
   17152:	   |   move.w (a0),d0
   17154:	   |   cmpi.w #-24562,d0
   17158:	,--|-- bne.s 17178 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   1715a:	|  '-> move.l 20(sp),-(sp)
   1715e:	|      move.l 20(sp),-(sp)
   17162:	|      move.l 20(sp),-(sp)
   17166:	|      move.l 20(sp),-(sp)
   1716a:	|      pea 58 <_start+0x58>
   1716e:	|      movea.l 20(sp),a0
   17172:	|      jsr (a0)
   17174:	|      lea 20(sp),sp
	}
}
   17178:	'----> nop
   1717a:	       addq.l #4,sp
   1717c:	       rts

0001717e <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   1717e:	       move.l d2,-(sp)
	while(*source && --num > 0)
   17180:	   ,-- bra.s 171a2 <my_strncpy+0x24>
		*destination++ = *source++;
   17182:	,--|-> move.l 12(sp),d1
   17186:	|  |   move.l d1,d0
   17188:	|  |   addq.l #1,d0
   1718a:	|  |   move.l d0,12(sp)
   1718e:	|  |   move.l 8(sp),d0
   17192:	|  |   move.l d0,d2
   17194:	|  |   addq.l #1,d2
   17196:	|  |   move.l d2,8(sp)
   1719a:	|  |   movea.l d1,a0
   1719c:	|  |   move.b (a0),d1
   1719e:	|  |   movea.l d0,a0
   171a0:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   171a2:	|  '-> movea.l 12(sp),a0
   171a6:	|      move.b (a0),d0
   171a8:	|  ,-- beq.s 171b0 <my_strncpy+0x32>
   171aa:	|  |   subq.l #1,16(sp)
   171ae:	'--|-- bne.s 17182 <my_strncpy+0x4>
	*destination = '\0';
   171b0:	   '-> movea.l 8(sp),a0
   171b4:	       clr.b (a0)
}
   171b6:	       nop
   171b8:	       move.l (sp)+,d2
   171ba:	       rts

000171bc <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   171bc:	    lea -60(sp),sp
   171c0:	    movea.l 72(sp),a1
   171c4:	    movea.l 76(sp),a0
   171c8:	    move.l 80(sp),d1
   171cc:	    move.l 84(sp),d0
   171d0:	    movea.w a1,a1
   171d2:	    move.w a1,8(sp)
   171d6:	    movea.w a0,a0
   171d8:	    move.w a0,6(sp)
   171dc:	    move.w d1,d1
   171de:	    move.w d1,4(sp)
   171e2:	    move.w d0,d0
   171e4:	    move.w d0,2(sp)
	struct debug_resource resource = {
   171e8:	    lea 10(sp),a0
   171ec:	    clr.l (a0)
   171ee:	    addq.l #4,a0
   171f0:	    clr.l (a0)
   171f2:	    addq.l #4,a0
   171f4:	    clr.l (a0)
   171f6:	    addq.l #4,a0
   171f8:	    clr.l (a0)
   171fa:	    addq.l #4,a0
   171fc:	    clr.l (a0)
   171fe:	    addq.l #4,a0
   17200:	    clr.l (a0)
   17202:	    addq.l #4,a0
   17204:	    clr.l (a0)
   17206:	    addq.l #4,a0
   17208:	    clr.l (a0)
   1720a:	    addq.l #4,a0
   1720c:	    clr.l (a0)
   1720e:	    addq.l #4,a0
   17210:	    clr.l (a0)
   17212:	    addq.l #4,a0
   17214:	    clr.l (a0)
   17216:	    addq.l #4,a0
   17218:	    clr.l (a0)
   1721a:	    addq.l #4,a0
   1721c:	    clr.w (a0)
   1721e:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17220:	    move.l 64(sp),d0
	struct debug_resource resource = {
   17224:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   17228:	    move.w 8(sp),d0
   1722c:	,-- bpl.s 17230 <debug_register_bitmap+0x74>
   1722e:	|   addq.w #7,d0
   17230:	'-> asr.w #3,d0
   17232:	    movea.w d0,a0
   17234:	    movea.w 6(sp),a1
   17238:	    move.l a1,-(sp)
   1723a:	    move.l a0,-(sp)
   1723c:	    jsr 17a60 <__mulsi3>
   17242:	    addq.l #8,sp
   17244:	    movea.w 4(sp),a0
   17248:	    move.l a0,-(sp)
   1724a:	    move.l d0,-(sp)
   1724c:	    jsr 17a60 <__mulsi3>
   17252:	    addq.l #8,sp
	struct debug_resource resource = {
   17254:	    move.l d0,14(sp)
   17258:	    move.w 2(sp),52(sp)
   1725e:	    move.w 8(sp),54(sp)
   17264:	    move.w 6(sp),56(sp)
   1726a:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17270:	    moveq #0,d0
   17272:	    move.w 2(sp),d0
   17276:	    moveq #2,d1
   17278:	    and.l d1,d0
   1727a:	,-- beq.s 17286 <debug_register_bitmap+0xca>
		resource.size *= 2;
   1727c:	|   move.l 14(sp),d0
   17280:	|   add.l d0,d0
   17282:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17286:	'-> pea 20 <_start+0x20>
   1728a:	    move.l 72(sp),-(sp)
   1728e:	    lea 18(sp),a0
   17292:	    move.l a0,d0
   17294:	    addq.l #8,d0
   17296:	    move.l d0,-(sp)
   17298:	    jsr 1717e <my_strncpy>
   1729e:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   172a2:	    lea 10(sp),a0
   172a6:	    clr.l -(sp)
   172a8:	    clr.l -(sp)
   172aa:	    move.l a0,-(sp)
   172ac:	    pea 4 <_start+0x4>
   172b0:	    jsr 1713e <debug_cmd>
   172b6:	    lea 16(sp),sp
}
   172ba:	    nop
   172bc:	    lea 60(sp),sp
   172c0:	    rts

000172c2 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   172c2:	lea -12(sp),sp
   172c6:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   172c8:	move.l 20(sp),12(sp)
   172ce:	move.l 24(sp),8(sp)
   172d4:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   172da:	movea.l d0,a6
   172dc:	move.l 12(sp),d0
   172e0:	move.l 8(sp),d1
   172e4:	jsr -66(a6)
   172e8:	move.l d0,4(sp)
   172ec:	move.l 4(sp),d0
}
   172f0:	movea.l (sp)+,a6
   172f2:	lea 12(sp),sp
   172f6:	rts

000172f8 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   172f8:	lea -32(sp),sp
   172fc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17300:	move.l 48(sp),36(sp)
   17306:	move.l 52(sp),40(sp)
   1730c:	move.l 56(sp),28(sp)
   17312:	move.l 60(sp),32(sp)
   17318:	move.l 1c7f0 <MathIeeeDoubBasBase>,d0
   1731e:	movea.l d0,a6
   17320:	move.l 36(sp),d0
   17324:	move.l 40(sp),d1
   17328:	move.l 28(sp),d2
   1732c:	move.l 32(sp),d3
   17330:	jsr -66(a6)
   17334:	move.l d0,12(sp)
   17338:	move.l d1,16(sp)
   1733c:	move.l 12(sp),20(sp)
   17342:	move.l 16(sp),24(sp)
   17348:	move.l 20(sp),d0
   1734c:	move.l 24(sp),d1
}
   17350:	movem.l (sp)+,d2-d3/a6
   17354:	lea 32(sp),sp
   17358:	rts

0001735a <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   1735a:	lea -32(sp),sp
   1735e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   17362:	move.l 48(sp),36(sp)
   17368:	move.l 52(sp),40(sp)
   1736e:	move.l 56(sp),28(sp)
   17374:	move.l 60(sp),32(sp)
   1737a:	move.l 1c7f0 <MathIeeeDoubBasBase>,d0
   17380:	movea.l d0,a6
   17382:	move.l 36(sp),d0
   17386:	move.l 40(sp),d1
   1738a:	move.l 28(sp),d2
   1738e:	move.l 32(sp),d3
   17392:	jsr -84(a6)
   17396:	move.l d0,12(sp)
   1739a:	move.l d1,16(sp)
   1739e:	move.l 12(sp),20(sp)
   173a4:	move.l 16(sp),24(sp)
   173aa:	move.l 20(sp),d0
   173ae:	move.l 24(sp),d1
}
   173b2:	movem.l (sp)+,d2-d3/a6
   173b6:	lea 32(sp),sp
   173ba:	rts

000173bc <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   173bc:	lea -12(sp),sp
   173c0:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   173c2:	move.l 20(sp),12(sp)
   173c8:	move.l 24(sp),8(sp)
   173ce:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   173d4:	movea.l d0,a6
   173d6:	move.l 12(sp),d0
   173da:	move.l 8(sp),d1
   173de:	jsr -84(a6)
   173e2:	move.l d0,4(sp)
   173e6:	move.l 4(sp),d0
}
   173ea:	movea.l (sp)+,a6
   173ec:	lea 12(sp),sp
   173f0:	rts

000173f2 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   173f2:	lea -12(sp),sp
   173f6:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   173f8:	move.l 20(sp),12(sp)
   173fe:	move.l 24(sp),8(sp)
   17404:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   1740a:	movea.l d0,a6
   1740c:	move.l 12(sp),d0
   17410:	move.l 8(sp),d1
   17414:	jsr -42(a6)
   17418:	move.l d0,4(sp)
   1741c:	move.l 4(sp),d0
}
   17420:	movea.l (sp)+,a6
   17422:	lea 12(sp),sp
   17426:	rts

00017428 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17428:	lea -20(sp),sp
   1742c:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1742e:	move.l 28(sp),20(sp)
   17434:	move.l 1c7f4 <MathIeeeDoubTransBase>,d0
   1743a:	movea.l d0,a6
   1743c:	move.l 20(sp),d0
   17440:	jsr -108(a6)
   17444:	move.l d0,4(sp)
   17448:	move.l d1,8(sp)
   1744c:	move.l 4(sp),12(sp)
   17452:	move.l 8(sp),16(sp)
   17458:	move.l 12(sp),d0
   1745c:	move.l 16(sp),d1
}
   17460:	movea.l (sp)+,a6
   17462:	lea 20(sp),sp
   17466:	rts

00017468 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   17468:	lea -12(sp),sp
   1746c:	move.l a6,-(sp)
	return IEEEDPFix(value);
   1746e:	move.l 20(sp),8(sp)
   17474:	move.l 24(sp),12(sp)
   1747a:	move.l 1c7f0 <MathIeeeDoubBasBase>,d0
   17480:	movea.l d0,a6
   17482:	move.l 8(sp),d0
   17486:	move.l 12(sp),d1
   1748a:	jsr -30(a6)
   1748e:	move.l d0,4(sp)
   17492:	move.l 4(sp),d0
}
   17496:	movea.l (sp)+,a6
   17498:	lea 12(sp),sp
   1749c:	rts

0001749e <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   1749e:	subq.l #8,sp
   174a0:	move.l a6,-(sp)
	return IEEESPFix(value);
   174a2:	move.l 16(sp),8(sp)
   174a8:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   174ae:	movea.l d0,a6
   174b0:	move.l 8(sp),d0
   174b4:	jsr -30(a6)
   174b8:	move.l d0,4(sp)
   174bc:	move.l 4(sp),d0
}
   174c0:	movea.l (sp)+,a6
   174c2:	addq.l #8,sp
   174c4:	rts

000174c6 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   174c6:	lea -20(sp),sp
   174ca:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   174cc:	move.l 28(sp),20(sp)
   174d2:	move.l 1c7f0 <MathIeeeDoubBasBase>,d0
   174d8:	movea.l d0,a6
   174da:	move.l 20(sp),d0
   174de:	jsr -36(a6)
   174e2:	move.l d0,4(sp)
   174e6:	move.l d1,8(sp)
   174ea:	move.l 4(sp),12(sp)
   174f0:	move.l 8(sp),16(sp)
   174f6:	move.l 12(sp),d0
   174fa:	move.l 16(sp),d1
}
   174fe:	movea.l (sp)+,a6
   17500:	lea 20(sp),sp
   17504:	rts

00017506 <__floatsisf>:

FLOAT __floatsisf(int i) {
   17506:	subq.l #8,sp
   17508:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1750a:	move.l 16(sp),8(sp)
   17510:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   17516:	movea.l d0,a6
   17518:	move.l 8(sp),d0
   1751c:	jsr -36(a6)
   17520:	move.l d0,4(sp)
   17524:	move.l 4(sp),d0
}
   17528:	movea.l (sp)+,a6
   1752a:	addq.l #8,sp
   1752c:	rts

0001752e <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   1752e:	subq.l #8,sp
   17530:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17532:	move.l 16(sp),8(sp)
   17538:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   1753e:	movea.l d0,a6
   17540:	move.l 8(sp),d0
   17544:	jsr -36(a6)
   17548:	move.l d0,4(sp)
   1754c:	move.l 4(sp),d0
}
   17550:	movea.l (sp)+,a6
   17552:	addq.l #8,sp
   17554:	rts

00017556 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   17556:	lea -32(sp),sp
   1755a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   1755e:	move.l 48(sp),36(sp)
   17564:	move.l 52(sp),40(sp)
   1756a:	move.l 56(sp),28(sp)
   17570:	move.l 60(sp),32(sp)
   17576:	move.l 1c7f0 <MathIeeeDoubBasBase>,d0
   1757c:	movea.l d0,a6
   1757e:	move.l 36(sp),d0
   17582:	move.l 40(sp),d1
   17586:	move.l 28(sp),d2
   1758a:	move.l 32(sp),d3
   1758e:	jsr -78(a6)
   17592:	move.l d0,12(sp)
   17596:	move.l d1,16(sp)
   1759a:	move.l 12(sp),20(sp)
   175a0:	move.l 16(sp),24(sp)
   175a6:	move.l 20(sp),d0
   175aa:	move.l 24(sp),d1
}
   175ae:	movem.l (sp)+,d2-d3/a6
   175b2:	lea 32(sp),sp
   175b6:	rts

000175b8 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   175b8:	lea -12(sp),sp
   175bc:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   175be:	move.l 20(sp),12(sp)
   175c4:	move.l 24(sp),8(sp)
   175ca:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   175d0:	movea.l d0,a6
   175d2:	move.l 12(sp),d0
   175d6:	move.l 8(sp),d1
   175da:	jsr -78(a6)
   175de:	move.l d0,4(sp)
   175e2:	move.l 4(sp),d0
}
   175e6:	movea.l (sp)+,a6
   175e8:	lea 12(sp),sp
   175ec:	rts

000175ee <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   175ee:	lea -12(sp),sp
   175f2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   175f4:	move.l 20(sp),12(sp)
   175fa:	move.l 24(sp),8(sp)
   17600:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   17606:	movea.l d0,a6
   17608:	move.l 12(sp),d0
   1760c:	move.l 8(sp),d1
   17610:	jsr -42(a6)
   17614:	move.l d0,4(sp)
   17618:	move.l 4(sp),d0
}
   1761c:	movea.l (sp)+,a6
   1761e:	lea 12(sp),sp
   17622:	rts

00017624 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17624:	lea -20(sp),sp
   17628:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1762c:	move.l 36(sp),24(sp)
   17632:	move.l 40(sp),28(sp)
   17638:	move.l 44(sp),16(sp)
   1763e:	move.l 48(sp),20(sp)
   17644:	move.l 1c7f0 <MathIeeeDoubBasBase>,d0
   1764a:	movea.l d0,a6
   1764c:	move.l 24(sp),d0
   17650:	move.l 28(sp),d1
   17654:	move.l 16(sp),d2
   17658:	move.l 20(sp),d3
   1765c:	jsr -42(a6)
   17660:	move.l d0,12(sp)
   17664:	move.l 12(sp),d0
}
   17668:	movem.l (sp)+,d2-d3/a6
   1766c:	lea 20(sp),sp
   17670:	rts

00017672 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17672:	lea -12(sp),sp
   17676:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17678:	move.l 20(sp),12(sp)
   1767e:	move.l 24(sp),8(sp)
   17684:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   1768a:	movea.l d0,a6
   1768c:	move.l 12(sp),d0
   17690:	move.l 8(sp),d1
   17694:	jsr -42(a6)
   17698:	move.l d0,4(sp)
   1769c:	move.l 4(sp),d0
}
   176a0:	movea.l (sp)+,a6
   176a2:	lea 12(sp),sp
   176a6:	rts

000176a8 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   176a8:	lea -12(sp),sp
   176ac:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   176ae:	move.l 20(sp),12(sp)
   176b4:	move.l 24(sp),8(sp)
   176ba:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   176c0:	movea.l d0,a6
   176c2:	move.l 12(sp),d0
   176c6:	move.l 8(sp),d1
   176ca:	jsr -42(a6)
   176ce:	move.l d0,4(sp)
   176d2:	move.l 4(sp),d0
}
   176d6:	movea.l (sp)+,a6
   176d8:	lea 12(sp),sp
   176dc:	rts

000176de <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   176de:	lea -20(sp),sp
   176e2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   176e6:	move.l 36(sp),24(sp)
   176ec:	move.l 40(sp),28(sp)
   176f2:	move.l 44(sp),16(sp)
   176f8:	move.l 48(sp),20(sp)
   176fe:	move.l 1c7f0 <MathIeeeDoubBasBase>,d0
   17704:	movea.l d0,a6
   17706:	move.l 24(sp),d0
   1770a:	move.l 28(sp),d1
   1770e:	move.l 16(sp),d2
   17712:	move.l 20(sp),d3
   17716:	jsr -42(a6)
   1771a:	move.l d0,12(sp)
   1771e:	move.l 12(sp),d0
}
   17722:	movem.l (sp)+,d2-d3/a6
   17726:	lea 20(sp),sp
   1772a:	rts

0001772c <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   1772c:	lea -12(sp),sp
   17730:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17732:	move.l 20(sp),12(sp)
   17738:	move.l 24(sp),8(sp)
   1773e:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   17744:	movea.l d0,a6
   17746:	move.l 12(sp),d0
   1774a:	move.l 8(sp),d1
   1774e:	jsr -42(a6)
   17752:	move.l d0,4(sp)
   17756:	move.l 4(sp),d0
}
   1775a:	movea.l (sp)+,a6
   1775c:	lea 12(sp),sp
   17760:	rts

00017762 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17762:	lea -12(sp),sp
   17766:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17768:	move.l 20(sp),12(sp)
   1776e:	move.l 24(sp),8(sp)
   17774:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   1777a:	movea.l d0,a6
   1777c:	move.l 12(sp),d0
   17780:	move.l 8(sp),d1
   17784:	jsr -42(a6)
   17788:	move.l d0,4(sp)
   1778c:	move.l 4(sp),d0
}
   17790:	movea.l (sp)+,a6
   17792:	lea 12(sp),sp
   17796:	rts

00017798 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17798:	lea -32(sp),sp
   1779c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   177a0:	move.l 48(sp),36(sp)
   177a6:	move.l 52(sp),40(sp)
   177ac:	move.l 56(sp),28(sp)
   177b2:	move.l 60(sp),32(sp)
   177b8:	move.l 1c7f0 <MathIeeeDoubBasBase>,d0
   177be:	movea.l d0,a6
   177c0:	move.l 36(sp),d0
   177c4:	move.l 40(sp),d1
   177c8:	move.l 28(sp),d2
   177cc:	move.l 32(sp),d3
   177d0:	jsr -72(a6)
   177d4:	move.l d0,12(sp)
   177d8:	move.l d1,16(sp)
   177dc:	move.l 12(sp),20(sp)
   177e2:	move.l 16(sp),24(sp)
   177e8:	move.l 20(sp),d0
   177ec:	move.l 24(sp),d1
}
   177f0:	movem.l (sp)+,d2-d3/a6
   177f4:	lea 32(sp),sp
   177f8:	rts

000177fa <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   177fa:	lea -12(sp),sp
   177fe:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17800:	move.l 20(sp),12(sp)
   17806:	move.l 24(sp),8(sp)
   1780c:	move.l 1c7e8 <MathIeeeSingBasBase>,d0
   17812:	movea.l d0,a6
   17814:	move.l 12(sp),d0
   17818:	move.l 8(sp),d1
   1781c:	jsr -72(a6)
   17820:	move.l d0,4(sp)
   17824:	move.l 4(sp),d0
}
   17828:	movea.l (sp)+,a6
   1782a:	lea 12(sp),sp
   1782e:	rts

00017830 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17830:	lea -12(sp),sp
   17834:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17836:	move.l 20(sp),8(sp)
   1783c:	move.l 24(sp),12(sp)
   17842:	move.l 1c7f4 <MathIeeeDoubTransBase>,d0
   17848:	movea.l d0,a6
   1784a:	move.l 8(sp),d0
   1784e:	move.l 12(sp),d1
   17852:	jsr -102(a6)
   17856:	move.l d0,4(sp)
   1785a:	move.l 4(sp),d0
}
   1785e:	movea.l (sp)+,a6
   17860:	lea 12(sp),sp
   17864:	rts

00017866 <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17866:	       lea -24(sp),sp
   1786a:	       move.l a6,-(sp)
    if (x > 0) {
   1786c:	       clr.l -(sp)
   1786e:	       move.l 40(sp),-(sp)
   17872:	       jsr 17672 <__gtsf2>
   17878:	       addq.l #8,sp
   1787a:	       tst.l d0
   1787c:	   ,-- ble.s 178ae <atan2f+0x48>
        return IEEESPAtan(y / x);
   1787e:	   |   move.l 36(sp),-(sp)
   17882:	   |   move.l 36(sp),-(sp)
   17886:	   |   jsr 173bc <__divsf3>
   1788c:	   |   addq.l #8,sp
   1788e:	   |   move.l d0,8(sp)
   17892:	   |   move.l 1c7ec <MathIeeeSingTransBase>,d0
   17898:	   |   movea.l d0,a6
   1789a:	   |   move.l 8(sp),d0
   1789e:	   |   jsr -30(a6)
   178a2:	   |   move.l d0,4(sp)
   178a6:	   |   move.l 4(sp),d0
   178aa:	,--|-- bra.w 17a0e <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   178ae:	|  '-> clr.l -(sp)
   178b0:	|      move.l 40(sp),-(sp)
   178b4:	|      jsr 1772c <__ltsf2>
   178ba:	|      addq.l #8,sp
   178bc:	|      tst.l d0
   178be:	|  ,-- bge.s 17932 <atan2f+0xcc>
   178c0:	|  |   clr.l -(sp)
   178c2:	|  |   move.l 36(sp),-(sp)
   178c6:	|  |   jsr 175ee <__gesf2>
   178cc:	|  |   addq.l #8,sp
   178ce:	|  |   tst.l d0
   178d0:	|  +-- blt.s 17932 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   178d2:	|  |   move.l 36(sp),-(sp)
   178d6:	|  |   move.l 36(sp),-(sp)
   178da:	|  |   jsr 173bc <__divsf3>
   178e0:	|  |   addq.l #8,sp
   178e2:	|  |   move.l d0,24(sp)
   178e6:	|  |   move.l 1c7ec <MathIeeeSingTransBase>,d0
   178ec:	|  |   movea.l d0,a6
   178ee:	|  |   move.l 24(sp),d0
   178f2:	|  |   jsr -30(a6)
   178f6:	|  |   move.l d0,20(sp)
   178fa:	|  |   move.l 20(sp),d0
   178fe:	|  |   move.l d0,-(sp)
   17900:	|  |   jsr 17428 <__extendsfdf2>
   17906:	|  |   addq.l #4,sp
   17908:	|  |   move.l #1413754136,-(sp)
   1790e:	|  |   move.l #1074340347,-(sp)
   17914:	|  |   move.l d1,-(sp)
   17916:	|  |   move.l d0,-(sp)
   17918:	|  |   jsr 172f8 <__adddf3>
   1791e:	|  |   lea 16(sp),sp
   17922:	|  |   move.l d1,-(sp)
   17924:	|  |   move.l d0,-(sp)
   17926:	|  |   jsr 17830 <__truncdfsf2>
   1792c:	|  |   addq.l #8,sp
   1792e:	+--|-- bra.w 17a0e <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17932:	|  '-> clr.l -(sp)
   17934:	|      move.l 40(sp),-(sp)
   17938:	|      jsr 1772c <__ltsf2>
   1793e:	|      addq.l #8,sp
   17940:	|      tst.l d0
   17942:	|  ,-- bge.s 179b4 <atan2f+0x14e>
   17944:	|  |   clr.l -(sp)
   17946:	|  |   move.l 36(sp),-(sp)
   1794a:	|  |   jsr 1772c <__ltsf2>
   17950:	|  |   addq.l #8,sp
   17952:	|  |   tst.l d0
   17954:	|  +-- bge.s 179b4 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17956:	|  |   move.l 36(sp),-(sp)
   1795a:	|  |   move.l 36(sp),-(sp)
   1795e:	|  |   jsr 173bc <__divsf3>
   17964:	|  |   addq.l #8,sp
   17966:	|  |   move.l d0,16(sp)
   1796a:	|  |   move.l 1c7ec <MathIeeeSingTransBase>,d0
   17970:	|  |   movea.l d0,a6
   17972:	|  |   move.l 16(sp),d0
   17976:	|  |   jsr -30(a6)
   1797a:	|  |   move.l d0,12(sp)
   1797e:	|  |   move.l 12(sp),d0
   17982:	|  |   move.l d0,-(sp)
   17984:	|  |   jsr 17428 <__extendsfdf2>
   1798a:	|  |   addq.l #4,sp
   1798c:	|  |   move.l #1413754136,-(sp)
   17992:	|  |   move.l #1074340347,-(sp)
   17998:	|  |   move.l d1,-(sp)
   1799a:	|  |   move.l d0,-(sp)
   1799c:	|  |   jsr 17798 <__subdf3>
   179a2:	|  |   lea 16(sp),sp
   179a6:	|  |   move.l d1,-(sp)
   179a8:	|  |   move.l d0,-(sp)
   179aa:	|  |   jsr 17830 <__truncdfsf2>
   179b0:	|  |   addq.l #8,sp
   179b2:	+--|-- bra.s 17a0e <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   179b4:	|  '-> clr.l -(sp)
   179b6:	|      move.l 40(sp),-(sp)
   179ba:	|      jsr 173f2 <__eqsf2>
   179c0:	|      addq.l #8,sp
   179c2:	|      tst.l d0
   179c4:	|  ,-- bne.s 179e0 <atan2f+0x17a>
   179c6:	|  |   clr.l -(sp)
   179c8:	|  |   move.l 36(sp),-(sp)
   179cc:	|  |   jsr 17672 <__gtsf2>
   179d2:	|  |   addq.l #8,sp
   179d4:	|  |   tst.l d0
   179d6:	|  +-- ble.s 179e0 <atan2f+0x17a>
        return PI / 2;
   179d8:	|  |   move.l #1070141403,d0
   179de:	+--|-- bra.s 17a0e <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   179e0:	|  '-> clr.l -(sp)
   179e2:	|      move.l 40(sp),-(sp)
   179e6:	|      jsr 173f2 <__eqsf2>
   179ec:	|      addq.l #8,sp
   179ee:	|      tst.l d0
   179f0:	|  ,-- bne.s 17a0c <atan2f+0x1a6>
   179f2:	|  |   clr.l -(sp)
   179f4:	|  |   move.l 36(sp),-(sp)
   179f8:	|  |   jsr 1772c <__ltsf2>
   179fe:	|  |   addq.l #8,sp
   17a00:	|  |   tst.l d0
   17a02:	|  +-- bge.s 17a0c <atan2f+0x1a6>
        return -PI / 2;
   17a04:	|  |   move.l #-1077342245,d0
   17a0a:	+--|-- bra.s 17a0e <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17a0c:	|  '-> moveq #0,d0
    }
}
   17a0e:	'----> movea.l (sp)+,a6
   17a10:	       lea 24(sp),sp
   17a14:	       rts

00017a16 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17a16:	lea -24(sp),sp
   17a1a:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17a1c:	move.l 32(sp),20(sp)
   17a22:	move.l 36(sp),24(sp)
   17a28:	move.l 1c7f4 <MathIeeeDoubTransBase>,d0
   17a2e:	movea.l d0,a6
   17a30:	move.l 20(sp),d0
   17a34:	move.l 24(sp),d1
   17a38:	jsr -96(a6)
   17a3c:	move.l d0,4(sp)
   17a40:	move.l d1,8(sp)
   17a44:	move.l 4(sp),12(sp)
   17a4a:	move.l 8(sp),16(sp)
   17a50:	move.l 12(sp),d0
   17a54:	move.l 16(sp),d1
}
   17a58:	movea.l (sp)+,a6
   17a5a:	lea 24(sp),sp
   17a5e:	rts

00017a60 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17a60:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17a64:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17a68:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17a6c:	mulu.w 8(sp),d1
	addw	d1, d0
   17a70:	add.w d1,d0
	swap	d0
   17a72:	swap d0
	clrw	d0
   17a74:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17a76:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17a7a:	mulu.w 10(sp),d1
	addl	d1, d0
   17a7e:	add.l d1,d0
	rts
   17a80:	rts

00017a82 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17a82:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17a84:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17a88:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17a8c:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17a92:	   ,-- bcc.s 17aaa <__udivsi3+0x28>
	movel	d0, d2
   17a94:	   |   move.l d0,d2
	clrw	d2
   17a96:	   |   clr.w d2
	swap	d2
   17a98:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17a9a:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17a9c:	   |   move.w d2,d0
	swap	d0
   17a9e:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17aa0:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17aa4:	   |   divu.w d1,d2
	movew	d2, d0
   17aa6:	   |   move.w d2,d0
	jra	6f
   17aa8:	,--|-- bra.s 17ada <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17aaa:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17aac:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17aae:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17ab0:	|  |   cmpi.l #65536,d1
	jcc	4b
   17ab6:	|  '-- bcc.s 17aac <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17ab8:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17aba:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17ac0:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17ac2:	|      mulu.w d0,d1
	swap	d2
   17ac4:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17ac6:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17ac8:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17aca:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17acc:	|  ,-- bne.s 17ad8 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17ace:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17ad0:	|  +-- bcs.s 17ad8 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17ad2:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17ad6:	+--|-- bls.s 17ada <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17ad8:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   17ada:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17adc:	       rts

00017ade <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17ade:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17ae0:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17ae2:	    move.l 12(sp),d1
	jpl	1f
   17ae6:	,-- bpl.s 17aec <__divsi3+0xe>
	negl	d1
   17ae8:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17aea:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17aec:	'-> move.l 8(sp),d0
	jpl	2f
   17af0:	,-- bpl.s 17af6 <__divsi3+0x18>
	negl	d0
   17af2:	|   neg.l d0
	negb	d2
   17af4:	|   neg.b d2

2:	movel	d1, sp@-
   17af6:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17af8:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17afa:	    jsr 17a82 <__udivsi3>
	addql	#8, sp
   17b00:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17b02:	    tst.b d2
	jpl	3f
   17b04:	,-- bpl.s 17b08 <__divsi3+0x2a>
	negl	d0
   17b06:	|   neg.l d0

3:	movel	sp@+, d2
   17b08:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17b0a:	    rts

00017b0c <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17b0c:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17b10:	move.l 4(sp),d0
	movel	d1, sp@-
   17b14:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b16:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17b18:	jsr 17ade <__divsi3>
	addql	#8, sp
   17b1e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17b20:	move.l 8(sp),d1
	movel	d1, sp@-
   17b24:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b26:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17b28:	jsr 17a60 <__mulsi3>
	addql	#8, sp
   17b2e:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17b30:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17b34:	sub.l d0,d1
	movel	d1, d0
   17b36:	move.l d1,d0
	rts
   17b38:	rts

00017b3a <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17b3a:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17b3e:	move.l 4(sp),d0
	movel	d1, sp@-
   17b42:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b44:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17b46:	jsr 17a82 <__udivsi3>
	addql	#8, sp
   17b4c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17b4e:	move.l 8(sp),d1
	movel	d1, sp@-
   17b52:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17b54:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17b56:	jsr 17a60 <__mulsi3>
	addql	#8, sp
   17b5c:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17b5e:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17b62:	sub.l d0,d1
	movel	d1, d0
   17b64:	move.l d1,d0
	rts
   17b66:	rts

00017b68 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17b68:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17b6a:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17b6e:	jsr -516(a6)
    move.l (sp)+, a6
   17b72:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17b74:	rts

00017b76 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17b76:	move.b d0,(a3)+
	rts
   17b78:	rts
