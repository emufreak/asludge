
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #116275,d0
       8:	       subi.l #116275,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c633 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #116275,d0
      40:	       subi.l #116275,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c633 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 82a6 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #116275,d0
      7e:	       subi.l #116275,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c633 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 1404c <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1cdda <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 14064 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c634 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 1404c <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1cdda <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c634 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 1404c <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1cdda <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 180e6 <PutChar+0x4>
     35c:	|  |              |   jsr 17640 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1cde2 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1cde2 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1cde2 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1cde2 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1cde2 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1cde2 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1cde2 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 18110 <PutChar+0x2e>
     834:	|   jsr 17640 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1cde2 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 1812c <PutChar+0x4a>
     8a6:	|   jsr 17640 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1cde2 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1cde2 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1cde2 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1cde2 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1cde2 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1cde2 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1cde2 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1cde2 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1cdda <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1cde2 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 1404c <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1cde2 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1ccde <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1ccde <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1ccde <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1ccde <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1ccde <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1cd9a <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1ccde <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1ccde <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1cd96 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1ccde <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1ccde <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 12ac <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1ccde <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9be4 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1ccde <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1cce2 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1cce6 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2f08 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 18154 <PutChar+0x72>
     e1a:	          jsr 17640 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1ccfa <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 1816d <PutChar+0x8b>
     e30:	      |   jsr 17640 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c2 <CstBlankScreen+0x2b4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1ccf4 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1cde6 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1ccfa <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 1819b <PutChar+0xb9>
     f1e:	|         jsr 17640 <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1cde6 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 181bb <PutChar+0xd9>
     f68:	|         jsr 17640 <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1cd12 <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1cdda <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/16;
     fd4:	|         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #4,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1cd0e <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1cdda <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1cd0e <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/16;
    1078:	|         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #4,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    10aa:	|         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    10b0:	|         clr.w 14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b4:	|         pea 181db <PutChar+0xf9>
    10ba:	|         jsr 17640 <KPrintF>
    10c0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c2:	'-------> movea.l (sp)+,a6
    10c4:	          lea 48(sp),sp
    10c8:	          rts

000010ca <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ca:	       lea -52(sp),sp
    10ce:	       move.l a6,-(sp)
    10d0:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d2:	       move.l #400,32(sp)
    10da:	       moveq #2,d0
    10dc:	       move.l d0,28(sp)
    10e0:	       move.l 1cdda <SysBase>,d0
    10e6:	       movea.l d0,a6
    10e8:	       move.l 32(sp),d0
    10ec:	       move.l 28(sp),d1
    10f0:	       jsr -198(a6)
    10f4:	       move.l d0,24(sp)
    10f8:	       move.l 24(sp),d0
    10fc:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1100:	   ,-- bne.s 112a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1102:	   |   pea 28 <_start+0x28>
    1106:	   |   pea 181f0 <PutChar+0x10e>
    110c:	   |   jsr 17640 <KPrintF>
    1112:	   |   addq.l #8,sp
    Exit(1);
    1114:	   |   moveq #1,d1
    1116:	   |   move.l d1,16(sp)
    111a:	   |   move.l 1cde2 <DOSBase>,d0
    1120:	   |   movea.l d0,a6
    1122:	   |   move.l 16(sp),d1
    1126:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1130:	       move.l 56(sp),1cd1e <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1138:	       move.l #116278,52(sp)
  for(int i=0; i<16;i++)
    1140:	       clr.l 48(sp)
    1144:	   ,-- bra.s 116a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1146:	,--|-> move.l 52(sp),d1
    114a:	|  |   move.l d1,d2
    114c:	|  |   addq.l #4,d2
    114e:	|  |   move.l d2,52(sp)
    1152:	|  |   move.l 56(sp),d0
    1156:	|  |   move.l d0,d2
    1158:	|  |   addq.l #4,d2
    115a:	|  |   move.l d2,56(sp)
    115e:	|  |   movea.l d1,a0
    1160:	|  |   move.l (a0),d1
    1162:	|  |   movea.l d0,a0
    1164:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1166:	|  |   addq.l #1,48(sp)
    116a:	|  '-> moveq #15,d0
    116c:	|      cmp.l 48(sp),d0
    1170:	'----- bge.s 1146 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1172:	       move.l #116342,52(sp)

  for(int i=0; i<12;i++)
    117a:	       clr.l 44(sp)
    117e:	   ,-- bra.s 11a4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1180:	,--|-> move.l 52(sp),d1
    1184:	|  |   move.l d1,d2
    1186:	|  |   addq.l #4,d2
    1188:	|  |   move.l d2,52(sp)
    118c:	|  |   move.l 56(sp),d0
    1190:	|  |   move.l d0,d2
    1192:	|  |   addq.l #4,d2
    1194:	|  |   move.l d2,56(sp)
    1198:	|  |   movea.l d1,a0
    119a:	|  |   move.l (a0),d1
    119c:	|  |   movea.l d0,a0
    119e:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a0:	|  |   addq.l #1,44(sp)
    11a4:	|  '-> moveq #11,d0
    11a6:	|      cmp.l 44(sp),d0
    11aa:	'----- bge.s 1180 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11ac:	       move.l #116390,52(sp)
  for(int i=0; i<10;i++)
    11b4:	       clr.l 40(sp)
    11b8:	   ,-- bra.s 11de <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11ba:	,--|-> move.l 52(sp),d1
    11be:	|  |   move.l d1,d2
    11c0:	|  |   addq.l #4,d2
    11c2:	|  |   move.l d2,52(sp)
    11c6:	|  |   move.l 56(sp),d0
    11ca:	|  |   move.l d0,d2
    11cc:	|  |   addq.l #4,d2
    11ce:	|  |   move.l d2,56(sp)
    11d2:	|  |   movea.l d1,a0
    11d4:	|  |   move.l (a0),d1
    11d6:	|  |   movea.l d0,a0
    11d8:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11da:	|  |   addq.l #1,40(sp)
    11de:	|  '-> moveq #9,d0
    11e0:	|      cmp.l 40(sp),d0
    11e4:	'----- bge.s 11ba <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11e6:	       move.l #116430,52(sp)
  CstClColor = (UWORD *) cl;
    11ee:	       move.l 56(sp),1cd16 <CstClColor>
  for(int i=0; i<32;i++)
    11f6:	       clr.l 36(sp)
    11fa:	   ,-- bra.s 1220 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    11fc:	,--|-> move.l 52(sp),d1
    1200:	|  |   move.l d1,d2
    1202:	|  |   addq.l #4,d2
    1204:	|  |   move.l d2,52(sp)
    1208:	|  |   move.l 56(sp),d0
    120c:	|  |   move.l d0,d2
    120e:	|  |   addq.l #4,d2
    1210:	|  |   move.l d2,56(sp)
    1214:	|  |   movea.l d1,a0
    1216:	|  |   move.l (a0),d1
    1218:	|  |   movea.l d0,a0
    121a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    121c:	|  |   addq.l #1,36(sp)
    1220:	|  '-> moveq #31,d0
    1222:	|      cmp.l 36(sp),d0
    1226:	'----- bge.s 11fc <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1228:	       moveq #40,d1
    122a:	       cmp.l 64(sp),d1
    122e:	   ,-- bge.s 128c <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1230:	   |   moveq #-40,d2
    1232:	   |   add.l 64(sp),d2
    1236:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1240:	   |   move.l 8(sp),d0
    1244:	   |   move.l d0,d1
    1246:	   |   addq.l #2,d1
    1248:	   |   move.l d1,8(sp)
    124c:	   |   movea.l d0,a0
    124e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1252:	   |   move.l 8(sp),d0
    1256:	   |   move.l d0,d1
    1258:	   |   addq.l #2,d1
    125a:	   |   move.l d1,8(sp)
    125e:	   |   move.l 12(sp),d1
    1262:	   |   movea.l d0,a0
    1264:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1266:	   |   move.l 8(sp),d0
    126a:	   |   move.l d0,d1
    126c:	   |   addq.l #2,d1
    126e:	   |   move.l d1,8(sp)
    1272:	   |   movea.l d0,a0
    1274:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1278:	   |   move.l 8(sp),d0
    127c:	   |   move.l d0,d1
    127e:	   |   addq.l #2,d1
    1280:	   |   move.l d1,8(sp)
    1284:	   |   move.l 12(sp),d1
    1288:	   |   movea.l d0,a0
    128a:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    128c:	   '-> move.l 56(sp),d0
    1290:	       move.l d0,d1
    1292:	       addq.l #4,d1
    1294:	       move.l d1,56(sp)
    1298:	       moveq #-2,d2
    129a:	       movea.l d0,a0
    129c:	       move.l d2,(a0)
  return (UWORD *) retval;  
    129e:	       move.l 20(sp),d0
}
    12a2:	       move.l (sp)+,d2
    12a4:	       movea.l (sp)+,a6
    12a6:	       lea 52(sp),sp
    12aa:	       rts

000012ac <CstDisplayCursor>:



void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    12ac:	lea -20(sp),sp
    12b0:	movea.l 24(sp),a0
    12b4:	move.l 28(sp),d1
    12b8:	move.l 32(sp),d0
    12bc:	movea.w a0,a0
    12be:	move.w a0,4(sp)
    12c2:	move.w d1,d1
    12c4:	move.w d1,2(sp)
    12c8:	move.w d0,d0
    12ca:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    12cc:	move.w 2(sp),d0
    12d0:	movea.l 36(sp),a0
    12d4:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    12d6:	move.w 4(sp),d0
    12da:	lsr.w #1,d0
    12dc:	movea.l 36(sp),a0
    12e0:	addq.l #1,a0
    12e2:	move.l d0,d0
    12e4:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    12e6:	move.w 2(sp),d1
    12ea:	move.w (sp),d0
    12ec:	movea.l 36(sp),a0
    12f0:	addq.l #2,a0
    12f2:	add.b d1,d0
    12f4:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    12f6:	move.w 4(sp),d0
    12fa:	andi.w #1,d0
    12fe:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1302:	move.w 2(sp),d0
    1306:	add.w (sp),d0
    1308:	move.w d0,d0
    130a:	andi.l #65535,d0
    1310:	asr.l #7,d0
    1312:	move.l d0,d0
    1314:	move.w d0,d1
    1316:	andi.w #2,d1
    131a:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    131e:	moveq #0,d0
    1320:	move.w 2(sp),d0
    1324:	asr.l #6,d0
    1326:	move.l d0,d0
    1328:	move.w d0,d1
    132a:	andi.w #4,d1
    132e:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1332:	move.w 18(sp),d1
    1336:	move.w 16(sp),d0
    133a:	add.b d0,d1
    133c:	move.w 14(sp),d0
    1340:	movea.l 36(sp),a0
    1344:	addq.l #3,a0
    1346:	add.b d1,d0
    1348:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    134a:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1350:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1356:	move.l 10(sp),d0
    135a:	clr.w d0
    135c:	swap d0
    135e:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    1362:	move.l 1cd1e <CstClCursor>,d0
    1368:	movea.l d0,a0
    136a:	addq.l #2,a0
    136c:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    1370:	move.l 1cd1e <CstClCursor>,d0
    1376:	movea.l d0,a0
    1378:	addq.l #6,a0
    137a:	move.w 8(sp),(a0)

}
    137e:	nop
    1380:	lea 20(sp),sp
    1384:	rts

00001386 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    1386:	                                                             subq.l #8,sp
    1388:	                                                             movem.l d2-d7/a2-a6,-(sp)
    138c:	                                                             movea.l 56(sp),a3
    1390:	                                                             movea.l 60(sp),a2
    1394:	                                                             move.l 64(sp),d2
    1398:	                                                             move.l 68(sp),d7
    139c:	                                                             movea.w d2,a4
    139e:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    13a2:	                                                             clr.l -(sp)
    13a4:	                                                             pea 1 <_start+0x1>
    13a8:	                                                             movea.w 6(a3),a0
    13ac:	                                                             move.l a0,-(sp)
    13ae:	                                                             movea.w 2(a3),a0
    13b2:	                                                             move.l a0,-(sp)
    13b4:	                                                             pea 1822b <PutChar+0x149>
    13ba:	                                                             move.l 1cd22 <CstZBufferResult>,-(sp)
    13c0:	                                                             lea 17728 <debug_register_bitmap>,a5
    13c6:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    13c8:	                                                             clr.l -(sp)
    13ca:	                                                             pea 1 <_start+0x1>
    13ce:	                                                             movea.w 6(a3),a0
    13d2:	                                                             move.l a0,-(sp)
    13d4:	                                                             move.w 2(a3),d0
    13d8:	                                                             addi.w #16,d0
    13dc:	                                                             movea.w d0,a0
    13de:	                                                             move.l a0,-(sp)
    13e0:	                                                             pea 18236 <PutChar+0x154>
    13e6:	                                                             move.l 1cd26 <CstZBufferWork>,-(sp)
    13ec:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    13ee:	                                                             lea 48(sp),sp
    13f2:	                                                             cmpa.w #0,a2
    13f6:	,----------------------------------------------------------- beq.w 1892 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    13fa:	|                                                            move.w d2,48(sp)
    13fe:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1400:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1404:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1406:	|                       ,----------------------------------> move.w a5,d3
    1408:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    140a:	|                       |                                    andi.l #65535,d3
    1410:	|                       |                                    cmp.l 16(a2),d3
    1414:	|                       |  ,-------------------------------- bge.w 15ae <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    1418:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    141c:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    1420:	|                       |  |                                 move.w d6,d0
    1422:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1426:	|                       |  |                                 move.w 6(a2),d4
    142a:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    142c:	|                       |  |                                 cmp.w a4,d6
    142e:	|                    ,--|--|-------------------------------- bge.w 1726 <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1432:	|                    |  |  |                                 cmp.w a4,d0
    1434:	|        ,-----------|--|--|-------------------------------- ble.w 15ac <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1438:	|        |           |  |  |                                 move.w 50(sp),d0
    143c:	|        |           |  |  |                                 cmp.w d0,d5
    143e:	|        |     ,-----|--|--|-------------------------------- blt.w 1872 <CstDrawZBuffer+0x4ec>
    1442:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1444:	|        |     |     |  |  |                                 cmpa.l d3,a0
    1446:	|        +-----|-----|--|--|-------------------------------- bge.w 15ac <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    144a:	|        |     |     |  |  |                                 move.w 48(sp),d0
    144e:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1450:	|        |     |     |  |  |                                 move.w d0,d6
    1452:	|        |     |     |  |  |                                 andi.w #15,d6
    1456:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    1458:	|        |     |     |  |  |                                 tst.l d2
    145a:	|        |  ,--|-----|--|--|-------------------------------- blt.w 15ce <CstDrawZBuffer+0x248>
    145e:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    1460:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    1462:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb30a1>
          custom->bltalwm = 0xffff;                      
    146a:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb30a3>
          custom->bltcon1 = 0;          
    1472:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb309f>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    147a:	|        |  |  |  |  |  |  |                                 lea 1cde6 <GfxBase>,a0
    1480:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1482:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    1484:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    1486:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1488:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    148e:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    1492:	|        |  |  |  |  |  |  |                                 clr.w d0
    1494:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    1496:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 160e <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    149a:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    149c:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    14a0:	|        |  |  |  |  |  |  |           |     |               move.l 1cd26 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    14aa:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    14ac:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    14ae:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    14b0:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    14b4:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    14b6:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb309d>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    14bc:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    14be:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    14c0:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 192c <CstDrawZBuffer+0x5a6>
    14c4:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    14c6:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    14c8:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
            custom->bltdmod = 0;                                                            
    14ce:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    14d6:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    14d8:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    14da:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    14dc:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    14de:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 164e <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    14e2:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    14e6:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    14e8:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    14ea:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    14ec:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 17fcc <__mulsi3>
    14f2:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    14f4:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    14f6:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 1664 <CstDrawZBuffer+0x2de>
    14fa:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    14fc:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    14fe:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
        UWORD bltsize =  height*64+bytewidth/2;          
    1504:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1506:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1508:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    150a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
       
        WaitBlit();
    1510:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1cde6 <GfxBase>,a0
    1516:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    1518:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    151c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb30a1>
        custom->bltalwm = 0xffff;
    1524:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb30a3>
        custom->bltamod = 2;
    152c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
        custom->bltbmod = 0;
    1534:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb30bf>
        custom->bltdmod = 0;
    153c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1544:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb309d>
        custom->bltcon1 = 0;        
    154c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb309f>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    1554:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1cd26 <CstZBufferWork>,d0
    155a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    155c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1562:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    1564:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    1568:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    156a:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 16ee <CstDrawZBuffer+0x368>
    156e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    1570:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    1572:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    1574:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 17fcc <__mulsi3>
    157a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    157c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    157e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1580:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    1582:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1584:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    1588:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
        custom->bltdpt = (APTR) CstZBufferResult;
    158e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1cd22 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1598:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    159a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    159c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    159e:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 16dc <CstDrawZBuffer+0x356>
    15a2:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    15a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    15a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
      zbufferset = 1;
    15ac:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    15ae:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    15b2:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    15b6:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1406 <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    15ba:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    15bc:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1892 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    15c0:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1cd22 <CstZBufferResult>,d0

}
    15c6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    15ca:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    15cc:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    15ce:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    15d0:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    15d2:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    15d4:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    15d6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb30a1>
          custom->bltalwm = 0xffff;                      
    15de:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb30a3>
          custom->bltcon1 = 0;          
    15e6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb309f>
            WaitBlit();   
    15ee:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1cde6 <GfxBase>,a0
    15f4:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    15f6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    15f8:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    15fa:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    15fc:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1602:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1606:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    1608:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    160a:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 149a <CstDrawZBuffer+0x114>
            WaitBlit();         
    160e:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1612:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1cd26 <CstZBufferWork>,d0
    1618:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    161a:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
            custom->bltcon0 = 4096 + 0x9f0;              
    1620:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb309d>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1628:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    162a:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    162c:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1944 <CstDrawZBuffer+0x5be>
    1630:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    1632:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    1634:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
            custom->bltdmod = 2;                                                            
    163a:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1642:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    1644:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1646:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    1648:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    164a:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 14e2 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    164e:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1650:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    1652:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    1654:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    1656:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 17fcc <__mulsi3>
    165c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    165e:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    1660:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 14fa <CstDrawZBuffer+0x174>
    1664:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    1666:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    1668:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    166a:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
        UWORD bltsize =  height*64+bytewidth/2;          
    1670:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    1672:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1674:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    1676:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
        WaitBlit();
    167c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1cde6 <GfxBase>,a0
    1682:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    1684:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    1688:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb30a1>
        custom->bltalwm = 0xffff;
    1690:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb30a3>
        custom->bltamod = 2;
    1698:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
        custom->bltbmod = 0;
    16a0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb30bf>
        custom->bltdmod = 0;
    16a8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16b0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb309d>
        custom->bltcon1 = 0;        
    16b8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb309f>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    16c0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1cd26 <CstZBufferWork>,d0
    16c6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    16c8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16ce:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    16d0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    16d4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    16d6:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 156e <CstDrawZBuffer+0x1e8>
    16da:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 16ee <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    16dc:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    16de:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    16e0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    16e2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    16e4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    16ea:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 15ac <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16ee:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    16f0:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    16f2:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    16f4:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    16f6:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 17fcc <__mulsi3>
    16fc:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    16fe:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    1700:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1702:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1704:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1706:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    170a:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
        custom->bltdpt = (APTR) CstZBufferResult;
    1710:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1cd22 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    171a:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    171c:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    171e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    1720:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 15a2 <CstDrawZBuffer+0x21c>
    1724:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 16dc <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1726:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    172a:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    172c:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1732:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    1734:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    1736:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    1738:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 15ac <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    173c:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    1740:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    1742:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 184e <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1746:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    174a:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 15ac <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    174e:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1752:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    1754:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    1756:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1758:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    175c:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1760:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    1762:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 17ec <CstDrawZBuffer+0x466>
    1766:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    1768:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    176a:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    176c:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    176e:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    1770:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 17fe <CstDrawZBuffer+0x478>
            WaitBlit();  
    1774:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1cde6 <GfxBase>,a0
    177a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    177c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    1780:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb30a1>
            custom->bltalwm = 0xffff;          
    1788:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb30a3>
            custom->bltdpt = CstZBufferWork;        
    1790:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1cd26 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
            custom->bltcon1 = 0;               
    179a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb309f>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    17a2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    17a6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    17a8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    17aa:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 1816 <CstDrawZBuffer+0x490>
    17ac:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    17ae:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    17b0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    17b2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    17b6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 1824 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    17b8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    17bc:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    17be:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    17c0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    17c4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb309d>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    17ca:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
              custom->bltdmod = 0;                                                            
    17d0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
              xdiffbyte += 2;                 
    17d8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    17da:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    17dc:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    17de:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    17e4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    17e6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    17e8:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 14d6 <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    17ec:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    17ee:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    17f0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    17f2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    17f4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    17f6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    17f8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    17fa:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 1774 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    17fe:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 18240 <PutChar+0x15e>
    1804:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 17640 <KPrintF>
              return FALSE;
    180a:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    180c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    180e:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1812:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1814:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1816:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    1818:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    181a:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    181c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    181e:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    1822:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 17b8 <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    1824:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb309d>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    182c:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
              custom->bltdmod = 0;                                                            
    1832:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
              xdiffbyte += 2;                 
    183a:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    183c:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    183e:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1840:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    1846:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    1848:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    184a:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 14d6 <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    184e:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1850:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    1852:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 15ac <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1856:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    185a:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    185c:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    185e:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1860:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    1864:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1868:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    186a:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 1766 <CstDrawZBuffer+0x3e0>
    186e:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 17ec <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1872:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    1876:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 15ac <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    187a:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    187e:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1880:	|  |  |     |     |     |  |                                 move.w d0,d6
    1882:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1886:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1888:	|  |  |     |     |     |  |                                 tst.l d2
    188a:	|  |  |     |     '-----|--|-------------------------------- bge.w 145e <CstDrawZBuffer+0xd8>
    188e:	|  |  |     '-----------|--|-------------------------------- bra.w 15ce <CstDrawZBuffer+0x248>
    WaitBlit();
    1892:	'--|--|-----------------|--|-------------------------------> movea.l 1cde6 <GfxBase>,a6
    1898:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    189c:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb30a1>
    custom->bltalwm = 0xffff;
    18a4:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb30a3>
    custom->bltamod = 0;
    18ac:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
    custom->bltbmod = 0;
    18b4:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb30bf>
    custom->bltcmod = 0;
    18bc:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb30bd>
    custom->bltdmod = 0;
    18c4:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
    custom->bltcon0 = 0x9f0; //Copy A to D
    18cc:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb309d>
    custom->bltcon1 = 0;        
    18d4:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb309f>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    18dc:	   |  |                 |  |                                 move.l (a3),d2
    18de:	   |  |                 |  |                                 move.l 4(a3),d3
    18e2:	   |  |                 |  |                                 move.l d2,d0
    18e4:	   |  |                 |  |                       ,-------- bmi.w 196c <CstDrawZBuffer+0x5e6>
    18e8:	   |  |                 |  |                       |         asr.l #3,d0
    18ea:	   |  |                 |  |                       |         move.l d3,-(sp)
    18ec:	   |  |                 |  |                       |         move.l d0,-(sp)
    18ee:	   |  |                 |  |                       |         jsr 17fcc <__mulsi3>
    18f4:	   |  |                 |  |                       |         addq.l #8,sp
    18f6:	   |  |                 |  |                       |         move.l d0,d1
    18f8:	   |  |                 |  |                       |         add.l d0,d1
    18fa:	   |  |                 |  |                       |         add.l d1,d1
    18fc:	   |  |                 |  |                       |         add.l d1,d0
    18fe:	   |  |                 |  |                       |         add.l 24(a3),d0
    1902:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltdpt = (APTR) CstZBufferResult;
    1908:	   |  |                 |  |                       |         move.l 1cd22 <CstZBufferResult>,d0
    190e:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1914:	   |  |                 |  |                       |         lsl.w #6,d3
    1916:	   |  |                 |  |                       |         tst.l d2
    1918:	   |  |                 |  |                    ,--|-------- blt.s 195c <CstDrawZBuffer+0x5d6>
    191a:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    191c:	   |  |                 |  |                    |  |  |      add.w d2,d3
    191e:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
}
    1924:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1928:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    192a:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    192c:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    192e:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1930:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1932:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
            custom->bltdmod = 0;                                                            
    1938:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
    1940:	      '-----------------|--|--------------------|--|--|--|-- bra.w 14d6 <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1944:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1946:	                           |                    |  |  |  |   asr.l #3,d1
    1948:	                           |                    |  |  |  |   sub.w d2,d1
    194a:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
            custom->bltdmod = 2;                                                            
    1950:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
    1958:	                           '--------------------|--|--|--|-- bra.w 1642 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    195c:	                                                >--|--|--|-> moveq #15,d1
    195e:	                                                |  |  |  |   add.l d1,d2
    1960:	                                                |  |  |  |   asr.l #4,d2
    1962:	                                                |  |  |  |   add.w d2,d3
    1964:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
  return CstZBufferResult;
    196a:	                                                |  |  |  '-- bra.s 1924 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    196c:	                                                |  '--|----> addq.l #7,d0
    196e:	                                                |     |      asr.l #3,d0
    1970:	                                                |     |      move.l d3,-(sp)
    1972:	                                                |     |      move.l d0,-(sp)
    1974:	                                                |     |      jsr 17fcc <__mulsi3>
    197a:	                                                |     |      addq.l #8,sp
    197c:	                                                |     |      move.l d0,d1
    197e:	                                                |     |      add.l d0,d1
    1980:	                                                |     |      add.l d1,d1
    1982:	                                                |     |      add.l d1,d0
    1984:	                                                |     |      add.l 24(a3),d0
    1988:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltdpt = (APTR) CstZBufferResult;
    198e:	                                                |     |      move.l 1cd22 <CstZBufferResult>,d0
    1994:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    199a:	                                                |     |      lsl.w #6,d3
    199c:	                                                |     |      tst.l d2
    199e:	                                                |     '----- bge.w 191a <CstDrawZBuffer+0x594>
    19a2:	                                                '----------- bra.s 195c <CstDrawZBuffer+0x5d6>

000019a4 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    19a4:	    lea -20(sp),sp
    19a8:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    19aa:	    move.l 1cd0a <CstDrawBuffer>,d0
    19b0:	,-- beq.s 19ca <CstFreeBuffer+0x26>
    19b2:	|   move.l 1cd0a <CstDrawBuffer>,20(sp)
    19ba:	|   move.l 1cdda <SysBase>,d0
    19c0:	|   movea.l d0,a6
    19c2:	|   movea.l 20(sp),a1
    19c6:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    19ca:	'-> move.l 1cd06 <CstViewBuffer>,d0
    19d0:	,-- beq.s 19ea <CstFreeBuffer+0x46>
    19d2:	|   move.l 1cd06 <CstViewBuffer>,16(sp)
    19da:	|   move.l 1cdda <SysBase>,d0
    19e0:	|   movea.l d0,a6
    19e2:	|   movea.l 16(sp),a1
    19e6:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    19ea:	'-> move.l 1cd02 <CstCopperList>,d0
    19f0:	,-- beq.s 1a0a <CstFreeBuffer+0x66>
    19f2:	|   move.l 1cd02 <CstCopperList>,12(sp)
    19fa:	|   move.l 1cdda <SysBase>,d0
    1a00:	|   movea.l d0,a6
    1a02:	|   movea.l 12(sp),a1
    1a06:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1a0a:	'-> move.l 1ccfa <CstBackDrop>,d0
    1a10:	,-- beq.s 1a2a <CstFreeBuffer+0x86>
    1a12:	|   move.l 1ccfa <CstBackDrop>,8(sp)
    1a1a:	|   move.l 1cdda <SysBase>,d0
    1a20:	|   movea.l d0,a6
    1a22:	|   movea.l 8(sp),a1
    1a26:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1a2a:	'-> move.l 1ccfe <CstBackDropBackup>,d0
    1a30:	,-- beq.s 1a4a <CstFreeBuffer+0xa6>
    1a32:	|   move.l 1ccfe <CstBackDropBackup>,4(sp)
    1a3a:	|   move.l 1cdda <SysBase>,d0
    1a40:	|   movea.l d0,a6
    1a42:	|   movea.l 4(sp),a1
    1a46:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1a4a:	'-> clr.l 1cd0a <CstDrawBuffer>
  CstViewBuffer = NULL;
    1a50:	    clr.l 1cd06 <CstViewBuffer>
  CstCopperList = NULL;
    1a56:	    clr.l 1cd02 <CstCopperList>
  CstBackDrop = NULL;
    1a5c:	    clr.l 1ccfa <CstBackDrop>

}
    1a62:	    nop
    1a64:	    movea.l (sp)+,a6
    1a66:	    lea 20(sp),sp
    1a6a:	    rts

00001a6c <CstFreeze>:



void CstFreeze( ) {
    1a6c:	       lea -64(sp),sp
    1a70:	       move.l a6,-(sp)
    1a72:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1a74:	       pea 18290 <PutChar+0x1ae>
    1a7a:	       jsr 17640 <KPrintF>
    1a80:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1a82:	       move.l 1cd2e <winWidth>,d0
    1a88:	       lsr.l #3,d0
    1a8a:	       move.l d0,d1
    1a8c:	       move.l 1cd32 <winHeight>,d0
    1a92:	       move.l d0,d0
    1a94:	       muls.w d0,d1
    1a96:	       move.w d1,d0
    1a98:	       add.w d0,d0
    1a9a:	       add.w d0,d0
    1a9c:	       move.w d0,d2
    1a9e:	       add.w d1,d2
    1aa0:	       move.w d2,54(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1aa4:	       move.l #14675968,50(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1aac:	       moveq #0,d0
    1aae:	       move.w 54(sp),d0
    1ab2:	       move.l d0,46(sp)
    1ab6:	       clr.l 42(sp)
    1aba:	       move.l 1cdda <SysBase>,d0
    1ac0:	       movea.l d0,a6
    1ac2:	       move.l 46(sp),d0
    1ac6:	       move.l 42(sp),d1
    1aca:	       jsr -684(a6)
    1ace:	       move.l d0,38(sp)
    1ad2:	       move.l 38(sp),d0
    1ad6:	       move.l d0,1ccfe <CstBackDropBackup>
  if( !CstBackDropBackup)
    1adc:	       move.l 1ccfe <CstBackDropBackup>,d0
    1ae2:	   ,-- bne.s 1af2 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1ae4:	   |   pea 182b7 <PutChar+0x1d5>
    1aea:	   |   jsr 17640 <KPrintF>
    1af0:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1af2:	   '-> move.l 1cd32 <winHeight>,d0
    1af8:	       move.l d0,d0
    1afa:	       movea.w d0,a1
    1afc:	       move.l 1cd2e <winWidth>,d0
    1b02:	       move.l d0,d0
    1b04:	       movea.w d0,a0
    1b06:	       move.l 1ccfe <CstBackDropBackup>,d0
    1b0c:	       clr.l -(sp)
    1b0e:	       pea 5 <_start+0x5>
    1b12:	       move.l a1,-(sp)
    1b14:	       move.l a0,-(sp)
    1b16:	       pea 182ef <PutChar+0x20d>
    1b1c:	       move.l d0,-(sp)
    1b1e:	       jsr 17728 <debug_register_bitmap>
    1b24:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1b28:	       move.l 1ccfa <CstBackDrop>,68(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1b30:	       move.l 1ccfe <CstBackDropBackup>,64(sp)
  for(int i=0;i<size/4;i++) 
    1b38:	       clr.l 60(sp)
    1b3c:	   ,-- bra.s 1b62 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1b3e:	,--|-> move.l 68(sp),d1
    1b42:	|  |   move.l d1,d0
    1b44:	|  |   addq.l #4,d0
    1b46:	|  |   move.l d0,68(sp)
    1b4a:	|  |   move.l 64(sp),d0
    1b4e:	|  |   move.l d0,d2
    1b50:	|  |   addq.l #4,d2
    1b52:	|  |   move.l d2,64(sp)
    1b56:	|  |   movea.l d1,a0
    1b58:	|  |   move.l (a0),d1
    1b5a:	|  |   movea.l d0,a0
    1b5c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1b5e:	|  |   addq.l #1,60(sp)
    1b62:	|  '-> move.w 54(sp),d0
    1b66:	|      lsr.w #2,d0
    1b68:	|      move.w d0,d0
    1b6a:	|      andi.l #65535,d0
    1b70:	|      cmp.l 60(sp),d0
    1b74:	'----- bgt.s 1b3e <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1b76:	       move.l 1cd06 <CstViewBuffer>,68(sp)
  dst = (ULONG *) CstBackDrop;
    1b7e:	       move.l 1ccfa <CstBackDrop>,64(sp)

  for(int i=0;i<size/4;i++) 
    1b86:	       clr.l 56(sp)
    1b8a:	   ,-- bra.s 1bb0 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1b8c:	,--|-> move.l 68(sp),d1
    1b90:	|  |   move.l d1,d0
    1b92:	|  |   addq.l #4,d0
    1b94:	|  |   move.l d0,68(sp)
    1b98:	|  |   move.l 64(sp),d0
    1b9c:	|  |   move.l d0,d2
    1b9e:	|  |   addq.l #4,d2
    1ba0:	|  |   move.l d2,64(sp)
    1ba4:	|  |   movea.l d1,a0
    1ba6:	|  |   move.l (a0),d1
    1ba8:	|  |   movea.l d0,a0
    1baa:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1bac:	|  |   addq.l #1,56(sp)
    1bb0:	|  '-> move.w 54(sp),d0
    1bb4:	|      lsr.w #2,d0
    1bb6:	|      move.w d0,d0
    1bb8:	|      andi.l #65535,d0
    1bbe:	|      cmp.l 56(sp),d0
    1bc2:	'----- bgt.s 1b8c <CstFreeze+0x120>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1bc4:	       move.l 1cd12 <CstCleanupQueueDrawBuffer>,34(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1bcc:	       moveq #20,d0
    1bce:	       move.l d0,30(sp)
    1bd2:	       clr.l 26(sp)
    1bd6:	       move.l 1cdda <SysBase>,d0
    1bdc:	       movea.l d0,a6
    1bde:	       move.l 30(sp),d0
    1be2:	       move.l 26(sp),d1
    1be6:	       jsr -684(a6)
    1bea:	       move.l d0,22(sp)
    1bee:	       move.l 22(sp),d0
    1bf2:	       move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    1bf8:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    1bfe:	       move.l 34(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    1c04:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    1c0a:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    1c0c:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    1c12:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    1c16:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    1c1c:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    1c20:	       move.l 1cd2e <winWidth>,d0
    1c26:	       lsr.l #4,d0
    1c28:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    1c2e:	       move.l d0,d0
    1c30:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    1c34:	       move.l 1cd32 <winHeight>,d0
    1c3a:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    1c40:	       move.l d0,d0
    1c42:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1c46:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    1c4c:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    1c50:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    1c56:	       clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    1c5a:	       move.l 1cd0e <CstCleanupQueueViewBuffer>,34(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1c62:	       moveq #20,d2
    1c64:	       move.l d2,18(sp)
    1c68:	       clr.l 14(sp)
    1c6c:	       move.l 1cdda <SysBase>,d0
    1c72:	       movea.l d0,a6
    1c74:	       move.l 18(sp),d0
    1c78:	       move.l 14(sp),d1
    1c7c:	       jsr -684(a6)
    1c80:	       move.l d0,10(sp)
    1c84:	       move.l 10(sp),d0
    1c88:	       move.l d0,1cd0e <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1c8e:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    1c94:	       move.l 34(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    1c9a:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    1ca0:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    1ca2:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    1ca8:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    1cac:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    1cb2:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    1cb6:	       move.l 1cd2e <winWidth>,d0
    1cbc:	       lsr.l #4,d0
    1cbe:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    1cc4:	       move.l d0,d0
    1cc6:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    1cca:	       move.l 1cd32 <winHeight>,d0
    1cd0:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    1cd6:	       move.l d0,d0
    1cd8:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    1cdc:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    1ce2:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    1ce6:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    1cec:	       clr.w 14(a0)

  KPrintF("CstFreeze: Finished");
    1cf0:	       pea 182fe <PutChar+0x21c>
    1cf6:	       jsr 17640 <KPrintF>
    1cfc:	       addq.l #4,sp

}  
    1cfe:	       nop
    1d00:	       move.l (sp)+,d2
    1d02:	       movea.l (sp)+,a6
    1d04:	       lea 64(sp),sp
    1d08:	       rts

00001d0a <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1d0a:	             lea -172(sp),sp
    1d0e:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1d12:	             pea 18312 <PutChar+0x230>
    1d18:	             jsr 17640 <KPrintF>
    1d1e:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1d20:	             move.l 192(sp),-(sp)
    1d24:	             jsr 6bc <get2bytes>
    1d2a:	             addq.l #4,sp
    1d2c:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1d30:	             move.l 192(sp),-(sp)
    1d34:	             jsr 6bc <get2bytes>
    1d3a:	             addq.l #4,sp
    1d3c:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1d40:	             move.w 162(sp),d0
    1d44:	             lsr.w #3,d0
    1d46:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1d4a:	             move.w 158(sp),d0
    1d4e:	             lsr.w #1,d0
    1d50:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1d54:	             move.l 1cd2e <winWidth>,d0
    1d5a:	             lsr.l #3,d0
    1d5c:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1d60:	             move.w 158(sp),d0
    1d64:	             muls.w 160(sp),d0
    1d68:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1d6c:	             move.w 152(sp),d1
    1d70:	             move.w d1,d0
    1d72:	             add.w d0,d0
    1d74:	             add.w d0,d0
    1d76:	             move.w d0,d2
    1d78:	             add.w d1,d2
    1d7a:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1d7e:	             move.w 1ccf4 <CstPaletteLoaded>,d0
    1d84:	,----------- bne.w 1e1e <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1d88:	|            move.w #384,148(sp)

    if(CstPalette) {
    1d8e:	|            move.l 1cd1a <CstPalette>,d0
    1d94:	|        ,-- beq.s 1dae <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1d96:	|        |   move.l 1cd1a <CstPalette>,144(sp)
    1d9e:	|        |   move.l 1cdda <SysBase>,d0
    1da4:	|        |   movea.l d0,a6
    1da6:	|        |   movea.l 144(sp),a1
    1daa:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1dae:	|        '-> moveq #64,d0
    1db0:	|            move.l d0,140(sp)
    1db4:	|            clr.l 136(sp)
    1db8:	|            move.l 1cdda <SysBase>,d0
    1dbe:	|            movea.l d0,a6
    1dc0:	|            move.l 140(sp),d0
    1dc4:	|            move.l 136(sp),d1
    1dc8:	|            jsr -684(a6)
    1dcc:	|            move.l d0,132(sp)
    1dd0:	|            move.l 132(sp),d0
    1dd4:	|            move.l d0,1cd1a <CstPalette>
    CstPaletteLoaded = 1;
    1dda:	|            move.w #1,1ccf4 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1de2:	|            move.l 1cd1a <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1dea:	|            clr.l 180(sp)
    1dee:	|        ,-- bra.s 1e14 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1df0:	|     ,--|-> move.l 192(sp),-(sp)
    1df4:	|     |  |   jsr 6bc <get2bytes>
    1dfa:	|     |  |   addq.l #4,sp
    1dfc:	|     |  |   move.l d0,d1
    1dfe:	|     |  |   move.l 184(sp),d0
    1e02:	|     |  |   move.l d0,d2
    1e04:	|     |  |   addq.l #2,d2
    1e06:	|     |  |   move.l d2,184(sp)
    1e0a:	|     |  |   move.l d1,d1
    1e0c:	|     |  |   movea.l d0,a0
    1e0e:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e10:	|     |  |   addq.l #1,180(sp)
    1e14:	|     |  '-> moveq #31,d0
    1e16:	|     |      cmp.l 180(sp),d0
    1e1a:	|     '----- bge.s 1df0 <CstLoadBackdrop+0xe6>
    1e1c:	|  ,-------- bra.s 1e3c <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e1e:	'--|-------> clr.l 176(sp)
    1e22:	   |     ,-- bra.s 1e34 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1e24:	   |  ,--|-> move.l 192(sp),-(sp)
    1e28:	   |  |  |   jsr 6bc <get2bytes>
    1e2e:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e30:	   |  |  |   addq.l #1,176(sp)
    1e34:	   |  |  '-> moveq #31,d2
    1e36:	   |  |      cmp.l 176(sp),d2
    1e3a:	   |  '----- bge.s 1e24 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1e3c:	   '-------> moveq #0,d0
    1e3e:	             move.w 150(sp),d0
    1e42:	             move.l d0,128(sp)
    1e46:	             moveq #2,d0
    1e48:	             move.l d0,124(sp)
    1e4c:	             move.l 1cdda <SysBase>,d0
    1e52:	             movea.l d0,a6
    1e54:	             move.l 128(sp),d0
    1e58:	             move.l 124(sp),d1
    1e5c:	             jsr -684(a6)
    1e60:	             move.l d0,120(sp)
    1e64:	             move.l 120(sp),d0
    1e68:	             move.l d0,116(sp)
  if( !tmpbuffer)
    1e6c:	         ,-- bne.s 1e7c <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1e6e:	         |   pea 18341 <PutChar+0x25f>
    1e74:	         |   jsr 17640 <KPrintF>
    1e7a:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1e7c:	         '-> moveq #0,d0
    1e7e:	             move.w 152(sp),d0
    1e82:	             move.l d0,112(sp)
    1e86:	             moveq #2,d2
    1e88:	             move.l d2,108(sp)
    1e8c:	             move.l 1cdda <SysBase>,d0
    1e92:	             movea.l d0,a6
    1e94:	             move.l 112(sp),d0
    1e98:	             move.l 108(sp),d1
    1e9c:	             jsr -684(a6)
    1ea0:	             move.l d0,104(sp)
    1ea4:	             move.l 104(sp),d0
    1ea8:	             move.l d0,100(sp)
  if( !tmpmask)
    1eac:	         ,-- bne.s 1ebc <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1eae:	         |   pea 18377 <PutChar+0x295>
    1eb4:	         |   jsr 17640 <KPrintF>
    1eba:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1ebc:	         '-> move.w 160(sp),d0
    1ec0:	             movea.w d0,a1
    1ec2:	             move.w 162(sp),d0
    1ec6:	             movea.w d0,a0
    1ec8:	             clr.l -(sp)
    1eca:	             pea 5 <_start+0x5>
    1ece:	             move.l a1,-(sp)
    1ed0:	             move.l a0,-(sp)
    1ed2:	             pea 183ab <PutChar+0x2c9>
    1ed8:	             move.l 136(sp),-(sp)
    1edc:	             jsr 17728 <debug_register_bitmap>
    1ee2:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1ee6:	             move.w 160(sp),d0
    1eea:	             movea.w d0,a1
    1eec:	             move.w 162(sp),d0
    1ef0:	             movea.w d0,a0
    1ef2:	             clr.l -(sp)
    1ef4:	             pea 1 <_start+0x1>
    1ef8:	             move.l a1,-(sp)
    1efa:	             move.l a0,-(sp)
    1efc:	             pea 183b9 <PutChar+0x2d7>
    1f02:	             move.l 136(sp),-(sp)
    1f06:	             jsr 17728 <debug_register_bitmap>
    1f0c:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1f10:	             move.l 192(sp),96(sp)
    1f16:	             move.l 116(sp),92(sp)
    1f1c:	             moveq #2,d0
    1f1e:	             move.l d0,88(sp)
    1f22:	             move.w 150(sp),d0
    1f26:	             lsr.w #1,d0
    1f28:	             move.w d0,d0
    1f2a:	             andi.l #65535,d0
    1f30:	             move.l d0,84(sp)
    1f34:	             move.l 1cde2 <DOSBase>,d0
    1f3a:	             movea.l d0,a6
    1f3c:	             move.l 96(sp),d1
    1f40:	             move.l 92(sp),d2
    1f44:	             move.l 88(sp),d3
    1f48:	             move.l 84(sp),d4
    1f4c:	             jsr -324(a6)
    1f50:	             move.l d0,80(sp)
    1f54:	             move.l 80(sp),d0
    1f58:	             move.w d0,78(sp)
  if(!count) {
    1f5c:	         ,-- bne.s 1f70 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    1f5e:	         |   pea 183c5 <PutChar+0x2e3>
    1f64:	         |   jsr 17640 <KPrintF>
    1f6a:	         |   addq.l #4,sp
    return;
    1f6c:	   ,-----|-- bra.w 2280 <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1f70:	   |     '-> move.l 192(sp),74(sp)
    1f76:	   |         move.l 100(sp),70(sp)
    1f7c:	   |         moveq #2,d2
    1f7e:	   |         move.l d2,66(sp)
    1f82:	   |         move.w 152(sp),d0
    1f86:	   |         lsr.w #1,d0
    1f88:	   |         move.w d0,d0
    1f8a:	   |         andi.l #65535,d0
    1f90:	   |         move.l d0,62(sp)
    1f94:	   |         move.l 1cde2 <DOSBase>,d0
    1f9a:	   |         movea.l d0,a6
    1f9c:	   |         move.l 74(sp),d1
    1fa0:	   |         move.l 70(sp),d2
    1fa4:	   |         move.l 66(sp),d3
    1fa8:	   |         move.l 62(sp),d4
    1fac:	   |         jsr -324(a6)
    1fb0:	   |         move.l d0,58(sp)
    1fb4:	   |         move.l 58(sp),d0
    1fb8:	   |         move.w d0,78(sp)
   

  if(!count) {
    1fbc:	   |     ,-- bne.s 1fd0 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    1fbe:	   |     |   pea 183c5 <PutChar+0x2e3>
    1fc4:	   |     |   jsr 17640 <KPrintF>
    1fca:	   |     |   addq.l #4,sp
    return;
    1fcc:	   +-----|-- bra.w 2280 <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1fd0:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1fd8:	   |         move.l 1ccfa <CstBackDrop>,d0
    1fde:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1fe2:	   |         move.l 200(sp),d0
    1fe6:	   |         move.w d0,d1
    1fe8:	   |         muls.w 154(sp),d1
    1fec:	   |         move.l 196(sp),d0
    1ff0:	   |     ,-- bpl.s 1ff4 <CstLoadBackdrop+0x2ea>
    1ff2:	   |     |   addq.l #7,d0
    1ff4:	   |     '-> asr.l #3,d0
    1ff6:	   |         move.l d0,d0
    1ff8:	   |         movea.w d1,a0
    1ffa:	   |         adda.w d0,a0
    1ffc:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    2000:	   |         moveq #0,d0
    2002:	   |         move.w 52(sp),d0
    2006:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    200a:	   |         pea 183e0 <PutChar+0x2fe>
    2010:	   |         jsr 17640 <KPrintF>
    2016:	   |         addq.l #4,sp


  WaitBlit();
    2018:	   |         move.l 1cde6 <GfxBase>,d0
    201e:	   |         movea.l d0,a6
    2020:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2024:	   |         movea.l 54(sp),a0
    2028:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    202e:	   |         movea.l 54(sp),a0
    2032:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2038:	   |         movea.l 54(sp),a0
    203c:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2042:	   |         movea.l 54(sp),a0
    2046:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    204c:	   |         move.w 154(sp),d0
    2050:	   |         sub.w 158(sp),d0
    2054:	   |         movea.l 54(sp),a0
    2058:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    205c:	   |         move.w 154(sp),d0
    2060:	   |         sub.w 158(sp),d0
    2064:	   |         movea.l 54(sp),a0
    2068:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    206c:	   |         movea.l 54(sp),a0
    2070:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2076:	   |         movea.l 54(sp),a0
    207a:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2080:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2086:	   |         clr.l 164(sp)
    208a:	   |     ,-- bra.s 20f8 <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    208c:	   |  ,--|-> move.l 1cde6 <GfxBase>,d0
    2092:	   |  |  |   movea.l d0,a6
    2094:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    2098:	   |  |  |   movea.l 54(sp),a0
    209c:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    20a2:	   |  |  |   move.l 168(sp),d0
    20a6:	   |  |  |   movea.l 54(sp),a0
    20aa:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    20ae:	   |  |  |   move.l 172(sp),d0
    20b2:	   |  |  |   movea.l 54(sp),a0
    20b6:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    20ba:	   |  |  |   move.l 172(sp),d0
    20be:	   |  |  |   movea.l 54(sp),a0
    20c2:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    20c6:	   |  |  |   move.w 160(sp),d0
    20ca:	   |  |  |   lsl.w #6,d0
    20cc:	   |  |  |   add.w 156(sp),d0
    20d0:	   |  |  |   movea.l 54(sp),a0
    20d4:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    20d8:	   |  |  |   moveq #0,d0
    20da:	   |  |  |   move.w 152(sp),d0
    20de:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    20e2:	   |  |  |   move.w 1ccf8 <CstBackdropSizePlane>,d0
    20e8:	   |  |  |   move.w d0,d0
    20ea:	   |  |  |   andi.l #65535,d0
    20f0:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    20f4:	   |  |  |   addq.l #1,164(sp)
    20f8:	   |  |  '-> moveq #4,d0
    20fa:	   |  |      cmp.l 164(sp),d0
    20fe:	   |  '----- bge.s 208c <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    2100:	   |         move.l 1cde6 <GfxBase>,d0
    2106:	   |         movea.l d0,a6
    2108:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    210c:	   |         pea 183ff <PutChar+0x31d>
    2112:	   |         jsr 17640 <KPrintF>
    2118:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    211a:	   |         move.l 116(sp),48(sp)
    2120:	   |         move.l 1cdda <SysBase>,d0
    2126:	   |         movea.l d0,a6
    2128:	   |         movea.l 48(sp),a1
    212c:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    2130:	   |         move.l 100(sp),44(sp)
    2136:	   |         move.l 1cdda <SysBase>,d0
    213c:	   |         movea.l d0,a6
    213e:	   |         movea.l 44(sp),a1
    2142:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2146:	   |         move.l 1cd12 <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    214e:	   |         moveq #20,d2
    2150:	   |         move.l d2,36(sp)
    2154:	   |         clr.l 32(sp)
    2158:	   |         move.l 1cdda <SysBase>,d0
    215e:	   |         movea.l d0,a6
    2160:	   |         move.l 36(sp),d0
    2164:	   |         move.l 32(sp),d1
    2168:	   |         jsr -684(a6)
    216c:	   |         move.l d0,28(sp)
    2170:	   |         move.l 28(sp),d0
    2174:	   |         move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    217a:	   |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2180:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    2186:	   |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    218c:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    218e:	   |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2194:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    2198:	   |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    219e:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    21a2:	   |         move.l 1cd2e <winWidth>,d0
    21a8:	   |         lsr.l #4,d0
    21aa:	   |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    21b0:	   |         move.l d0,d0
    21b2:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    21b6:	   |         move.l 1cd32 <winHeight>,d0
    21bc:	   |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    21c2:	   |         move.l d0,d0
    21c4:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    21c8:	   |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    21ce:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    21d2:	   |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    21d8:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    21dc:	   |         move.l 1cd0e <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    21e4:	   |         moveq #20,d0
    21e6:	   |         move.l d0,24(sp)
    21ea:	   |         clr.l 20(sp)
    21ee:	   |         move.l 1cdda <SysBase>,d0
    21f4:	   |         movea.l d0,a6
    21f6:	   |         move.l 24(sp),d0
    21fa:	   |         move.l 20(sp),d1
    21fe:	   |         jsr -684(a6)
    2202:	   |         move.l d0,16(sp)
    2206:	   |         move.l 16(sp),d0
    220a:	   |         move.l d0,1cd0e <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    2210:	   |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2216:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    221c:	   |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2222:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    2224:	   |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    222a:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    222e:	   |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2234:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    2238:	   |         move.l 1cd2e <winWidth>,d0
    223e:	   |         lsr.l #4,d0
    2240:	   |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2246:	   |         move.l d0,d0
    2248:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    224c:	   |         move.l 1cd32 <winHeight>,d0
    2252:	   |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2258:	   |         move.l d0,d0
    225a:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    225e:	   |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2264:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    2268:	   |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    226e:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    2272:	   |         pea 1841f <PutChar+0x33d>
    2278:	   |         jsr 17640 <KPrintF>
    227e:	   |         addq.l #4,sp

}
    2280:	   '-------> movem.l (sp)+,d2-d4/a6
    2284:	             lea 172(sp),sp
    2288:	             rts

0000228a <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    228a:	                lea -156(sp),sp
    228e:	                move.l a6,-(sp)
    2290:	                move.l d2,-(sp)
    2292:	                move.l 172(sp),d1
    2296:	                move.l 176(sp),d0
    229a:	                move.w d1,d1
    229c:	                move.w d1,10(sp)
    22a0:	                move.w d0,d0
    22a2:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    22a6:	                move.l #14675968,112(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    22ae:	                clr.l 108(sp)
  destination = (UWORD *) CstBackDrop;      
    22b2:	                move.l 1ccfa <CstBackDrop>,108(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    22ba:	                clr.l 140(sp)

  blitwidth = single->width/16;
    22be:	                movea.l 168(sp),a0
    22c2:	                move.l (a0),d0
    22c4:	                movea.l d0,a0
    22c6:	                cmpa.w #0,a0
    22ca:	            ,-- bge.s 22d0 <CstPasteChar+0x46>
    22cc:	            |   lea 15(a0),a0
    22d0:	            '-> move.l a0,d0
    22d2:	                asr.l #4,d0
    22d4:	                move.l d0,124(sp)
  if(blitwidth == 0) blitwidth = 1;
    22d8:	            ,-- bne.s 22e0 <CstPasteChar+0x56>
    22da:	            |   moveq #1,d0
    22dc:	            |   move.l d0,124(sp)

  if( y < 0) {
    22e0:	            '-> tst.w 8(sp)
    22e4:	         ,----- bge.s 232e <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    22e6:	         |      movea.w 8(sp),a1
    22ea:	         |      movea.l 168(sp),a0
    22ee:	         |      move.l 4(a0),d0
    22f2:	         |      add.l a1,d0
    22f4:	         |  ,-- bpl.s 2308 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    22f6:	         |  |   pea 18439 <PutChar+0x357>
    22fc:	         |  |   jsr 17640 <KPrintF>
    2302:	         |  |   addq.l #4,sp
      return;
    2304:	,--------|--|-- bra.w 2c7c <CstPasteChar+0x9f2>
    }
    ystartdst = 0;
    2308:	|        |  '-> clr.l 136(sp)
    ystartsrc = y*-1;
    230c:	|        |      move.w 8(sp),d0
    2310:	|        |      ext.l d0
    2312:	|        |      move.l d0,d1
    2314:	|        |      neg.l d1
    2316:	|        |      move.l d1,132(sp)
    blitheight = single->height+y;
    231a:	|        |      movea.l 168(sp),a0
    231e:	|        |      move.l 4(a0),d0
    2322:	|        |      movea.w 8(sp),a0
    2326:	|        |      add.l a0,d0
    2328:	|        |      move.l d0,128(sp)
    232c:	|     ,--|----- bra.s 23a0 <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    232e:	|     |  '----> movea.w 8(sp),a1
    2332:	|     |         movea.l 168(sp),a0
    2336:	|     |         move.l 4(a0),d0
    233a:	|     |         move.l a1,d1
    233c:	|     |         add.l d0,d1
    233e:	|     |         move.l 1cd32 <winHeight>,d0
    2344:	|     |         cmp.l d1,d0
    2346:	|     |  ,----- bge.s 2388 <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    2348:	|     |  |      movea.w 8(sp),a0
    234c:	|     |  |      move.l 1cd32 <winHeight>,d0
    2352:	|     |  |      cmp.l a0,d0
    2354:	|     |  |  ,-- bge.s 2368 <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2356:	|     |  |  |   pea 18439 <PutChar+0x357>
    235c:	|     |  |  |   jsr 17640 <KPrintF>
    2362:	|     |  |  |   addq.l #4,sp
      return;
    2364:	+-----|--|--|-- bra.w 2c7c <CstPasteChar+0x9f2>
    }
    ystartdst = y;
    2368:	|     |  |  '-> movea.w 8(sp),a0
    236c:	|     |  |      move.l a0,136(sp)
    ystartsrc = 0;
    2370:	|     |  |      clr.l 132(sp)
    blitheight = winHeight-y;
    2374:	|     |  |      move.l 1cd32 <winHeight>,d0
    237a:	|     |  |      movea.w 8(sp),a0
    237e:	|     |  |      move.l d0,d1
    2380:	|     |  |      sub.l a0,d1
    2382:	|     |  |      move.l d1,128(sp)
    2386:	|     +--|----- bra.s 23a0 <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    2388:	|     |  '----> movea.w 8(sp),a0
    238c:	|     |         move.l a0,136(sp)
    ystartsrc = 0;
    2390:	|     |         clr.l 132(sp)
    blitheight = single->height;
    2394:	|     |         movea.l 168(sp),a0
    2398:	|     |         move.l 4(a0),d0
    239c:	|     |         move.l d0,128(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    23a0:	|     '-------> tst.w 10(sp)
    23a4:	|        ,----- bge.w 25ec <CstPasteChar+0x362>
    if(x + single->width < 0) {
    23a8:	|        |      movea.w 10(sp),a1
    23ac:	|        |      movea.l 168(sp),a0
    23b0:	|        |      move.l (a0),d0
    23b2:	|        |      add.l a1,d0
    23b4:	|        |  ,-- bpl.s 23c8 <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    23b6:	|        |  |   pea 18439 <PutChar+0x357>
    23bc:	|        |  |   jsr 17640 <KPrintF>
    23c2:	|        |  |   addq.l #4,sp
      return;
    23c4:	+--------|--|-- bra.w 2c7c <CstPasteChar+0x9f2>

    }
    
    extrawords = 1;
    23c8:	|        |  '-> move.w #1,162(sp)

    cutwordssource = (x*-1)/16; 
    23ce:	|        |      move.w 10(sp),d0
    23d2:	|        |  ,-- bpl.s 23d8 <CstPasteChar+0x14e>
    23d4:	|        |  |   addi.w #15,d0
    23d8:	|        |  '-> asr.w #4,d0
    23da:	|        |      neg.w d0
    23dc:	|        |      move.w d0,160(sp)
    cutmaskpixel = (x*-1)%16;     
    23e0:	|        |      move.w 10(sp),d0
    23e4:	|        |      ext.l d0
    23e6:	|        |      neg.l d0
    23e8:	|        |      andi.l #-2147483633,d0
    23ee:	|        |  ,-- bpl.s 23f8 <CstPasteChar+0x16e>
    23f0:	|        |  |   subq.l #1,d0
    23f2:	|        |  |   moveq #-16,d1
    23f4:	|        |  |   or.l d1,d0
    23f6:	|        |  |   addq.l #1,d0
    23f8:	|        |  '-> move.w d0,158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    23fc:	|        |      clr.w 156(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2400:	|        |      movea.l 168(sp),a0
    2404:	|        |      move.l 24(a0),d0
    2408:	|        |      move.l d0,d1
    240a:	|        |      moveq #0,d0
    240c:	|        |      move.w 160(sp),d0
    2410:	|        |      add.l d0,d0
    2412:	|        |      move.l d1,d2
    2414:	|        |      add.l d0,d2
    2416:	|        |      movea.l 168(sp),a0
    241a:	|        |      move.l (a0),d0
    241c:	|        |      move.l 132(sp),-(sp)
    2420:	|        |      move.l d0,-(sp)
    2422:	|        |      jsr 17fcc <__mulsi3>
    2428:	|        |      addq.l #8,sp
    242a:	|        |      lsr.l #3,d0
    242c:	|        |      move.l d2,d1
    242e:	|        |      add.l d0,d1
    2430:	|        |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2434:	|        |      move.l 1cd2e <winWidth>,d0
    243a:	|        |      move.l 136(sp),-(sp)
    243e:	|        |      move.l d0,-(sp)
    2440:	|        |      jsr 17fcc <__mulsi3>
    2446:	|        |      addq.l #8,sp
    2448:	|        |      lsr.l #3,d0
    244a:	|        |      move.l 108(sp),d1
    244e:	|        |      add.l d1,d0
    2450:	|        |      move.l d0,d2
    2452:	|        |      subq.l #2,d2
    2454:	|        |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2458:	|        |      move.l 1cd2e <winWidth>,d0
    245e:	|        |      move.l 136(sp),-(sp)
    2462:	|        |      move.l d0,-(sp)
    2464:	|        |      jsr 17fcc <__mulsi3>
    246a:	|        |      addq.l #8,sp
    246c:	|        |      lsr.l #3,d0
    246e:	|        |      move.l 108(sp),d1
    2472:	|        |      add.l d1,d0
    2474:	|        |      move.l d0,d1
    2476:	|        |      subq.l #2,d1
    2478:	|        |      move.l d1,144(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    247c:	|        |      moveq #0,d0
    247e:	|        |      move.w 158(sp),d0
    2482:	|        |      moveq #16,d1
    2484:	|        |      sub.l d0,d1
    2486:	|        |      move.l d1,d0
    2488:	|        |      moveq #12,d2
    248a:	|        |      lsl.l d2,d0
    248c:	|        |      move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2490:	|        |      move.l 1cd12 <CstCleanupQueueDrawBuffer>,48(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2498:	|        |      moveq #20,d0
    249a:	|        |      move.l d0,44(sp)
    249e:	|        |      clr.l 40(sp)
    24a2:	|        |      move.l 1cdda <SysBase>,d0
    24a8:	|        |      movea.l d0,a6
    24aa:	|        |      move.l 44(sp),d0
    24ae:	|        |      move.l 40(sp),d1
    24b2:	|        |      jsr -684(a6)
    24b6:	|        |      move.l d0,36(sp)
    24ba:	|        |      move.l 36(sp),d0
    24be:	|        |      move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    24c4:	|        |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    24ca:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = 0;
    24d0:	|        |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    24d6:	|        |      clr.w (a0)
    CstCleanupQueueDrawBuffer->y = 0;
    24d8:	|        |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    24de:	|        |      clr.w 2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    24e2:	|        |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    24e8:	|        |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    24ec:	|        |      movea.l 168(sp),a0
    24f0:	|        |      move.l (a0),d0
    24f2:	|        |      movea.l d0,a0
    24f4:	|        |      cmpa.w #0,a0
    24f8:	|        |  ,-- bge.s 24fe <CstPasteChar+0x274>
    24fa:	|        |  |   lea 15(a0),a0
    24fe:	|        |  '-> move.l a0,d0
    2500:	|        |      asr.l #4,d0
    2502:	|        |      move.l d0,d0
    2504:	|        |      add.w 160(sp),d0
    2508:	|        |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    250e:	|        |      add.w 162(sp),d0
    2512:	|        |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2516:	|        |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    251c:	|        |      move.l 128(sp),d0
    2520:	|        |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2524:	|        |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    252a:	|        |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    252e:	|        |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2534:	|        |      move.l 136(sp),d0
    2538:	|        |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    253c:	|        |      move.l 1cd0e <CstCleanupQueueViewBuffer>,48(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2544:	|        |      moveq #20,d1
    2546:	|        |      move.l d1,32(sp)
    254a:	|        |      clr.l 28(sp)
    254e:	|        |      move.l 1cdda <SysBase>,d0
    2554:	|        |      movea.l d0,a6
    2556:	|        |      move.l 32(sp),d0
    255a:	|        |      move.l 28(sp),d1
    255e:	|        |      jsr -684(a6)
    2562:	|        |      move.l d0,24(sp)
    2566:	|        |      move.l 24(sp),d0
    256a:	|        |      move.l d0,1cd0e <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2570:	|        |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2576:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueViewBuffer->x = 0;
    257c:	|        |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2582:	|        |      clr.w (a0)
    CstCleanupQueueViewBuffer->y = 0;
    2584:	|        |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    258a:	|        |      clr.w 2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    258e:	|        |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2594:	|        |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2598:	|        |      movea.l 168(sp),a0
    259c:	|        |      move.l (a0),d0
    259e:	|        |      movea.l d0,a0
    25a0:	|        |      cmpa.w #0,a0
    25a4:	|        |  ,-- bge.s 25aa <CstPasteChar+0x320>
    25a6:	|        |  |   lea 15(a0),a0
    25aa:	|        |  '-> move.l a0,d0
    25ac:	|        |      asr.l #4,d0
    25ae:	|        |      move.l d0,d0
    25b0:	|        |      add.w 160(sp),d0
    25b4:	|        |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    25ba:	|        |      add.w 162(sp),d0
    25be:	|        |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    25c2:	|        |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    25c8:	|        |      move.l 128(sp),d0
    25cc:	|        |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = 0;
    25d0:	|        |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    25d6:	|        |      clr.w 12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst; 
    25da:	|        |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    25e0:	|        |      move.l 136(sp),d0
    25e4:	|        |      move.w d0,14(a0)
    25e8:	|     ,--|----- bra.w 2ae4 <CstPasteChar+0x85a>
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    25ec:	|     |  '----> movea.w 10(sp),a1
    25f0:	|     |         movea.l 168(sp),a0
    25f4:	|     |         move.l (a0),d0
    25f6:	|     |         move.l a1,d1
    25f8:	|     |         add.l d0,d1
    25fa:	|     |         move.l 1cd2e <winWidth>,d0
    2600:	|     |         cmp.l d1,d0
    2602:	|     |  ,----- bge.w 288e <CstPasteChar+0x604>

    if(x - single->width > (int) winWidth)
    2606:	|     |  |      movea.w 10(sp),a1
    260a:	|     |  |      movea.l 168(sp),a0
    260e:	|     |  |      move.l (a0),d0
    2610:	|     |  |      move.l a1,d1
    2612:	|     |  |      sub.l d0,d1
    2614:	|     |  |      move.l 1cd2e <winWidth>,d0
    261a:	|     |  |      cmp.l d1,d0
    261c:	|     |  |  ,-- bge.s 2630 <CstPasteChar+0x3a6>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    261e:	|     |  |  |   pea 18439 <PutChar+0x357>
    2624:	|     |  |  |   jsr 17640 <KPrintF>
    262a:	|     |  |  |   addq.l #4,sp
      return;
    262c:	+-----|--|--|-- bra.w 2c7c <CstPasteChar+0x9f2>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2630:	|     |  |  '-> clr.w 162(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2634:	|     |  |      movea.w 10(sp),a1
    2638:	|     |  |      movea.l 168(sp),a0
    263c:	|     |  |      move.l (a0),d0
    263e:	|     |  |      add.l a1,d0
    2640:	|     |  |      move.l d0,d1
    2642:	|     |  |      move.l 1cd2e <winWidth>,d0
    2648:	|     |  |      sub.l d0,d1
    264a:	|     |  |      move.l d1,d0
    264c:	|     |  |      lsr.l #4,d0
    264e:	|     |  |      move.w d0,160(sp)
    cutmaskpixel = 0;
    2652:	|     |  |      clr.w 158(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2656:	|     |  |      move.w #-1,156(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    265c:	|     |  |      movea.l 168(sp),a0
    2660:	|     |  |      move.l 24(a0),d0
    2664:	|     |  |      move.l d0,d2
    2666:	|     |  |      movea.l 168(sp),a0
    266a:	|     |  |      move.l (a0),d0
    266c:	|     |  |      move.l 132(sp),-(sp)
    2670:	|     |  |      move.l d0,-(sp)
    2672:	|     |  |      jsr 17fcc <__mulsi3>
    2678:	|     |  |      addq.l #8,sp
    267a:	|     |  |      lsr.l #3,d0
    267c:	|     |  |      move.l d2,d1
    267e:	|     |  |      add.l d0,d1
    2680:	|     |  |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2684:	|     |  |      move.l 1cd2e <winWidth>,d0
    268a:	|     |  |      move.l 136(sp),-(sp)
    268e:	|     |  |      move.l d0,-(sp)
    2690:	|     |  |      jsr 17fcc <__mulsi3>
    2696:	|     |  |      addq.l #8,sp
    2698:	|     |  |      lsr.l #3,d0
    269a:	|     |  |      move.l 108(sp),d1
    269e:	|     |  |      add.l d0,d1
    26a0:	|     |  |      move.w 10(sp),d0
    26a4:	|     |  |  ,-- bpl.s 26aa <CstPasteChar+0x420>
    26a6:	|     |  |  |   addi.w #15,d0
    26aa:	|     |  |  '-> asr.w #4,d0
    26ac:	|     |  |      movea.w d0,a0
    26ae:	|     |  |      move.l a0,d0
    26b0:	|     |  |      add.l a0,d0
    26b2:	|     |  |      move.l d1,d2
    26b4:	|     |  |      add.l d0,d2
    26b6:	|     |  |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26ba:	|     |  |      move.l 1cd2e <winWidth>,d0
    26c0:	|     |  |      move.l 136(sp),-(sp)
    26c4:	|     |  |      move.l d0,-(sp)
    26c6:	|     |  |      jsr 17fcc <__mulsi3>
    26cc:	|     |  |      addq.l #8,sp
    26ce:	|     |  |      lsr.l #3,d0
    26d0:	|     |  |      move.l 108(sp),d1
    26d4:	|     |  |      add.l d0,d1
    26d6:	|     |  |      move.w 10(sp),d0
    26da:	|     |  |  ,-- bpl.s 26e0 <CstPasteChar+0x456>
    26dc:	|     |  |  |   addi.w #15,d0
    26e0:	|     |  |  '-> asr.w #4,d0
    26e2:	|     |  |      movea.w d0,a0
    26e4:	|     |  |      move.l a0,d0
    26e6:	|     |  |      add.l a0,d0
    26e8:	|     |  |      move.l d1,d2
    26ea:	|     |  |      add.l d0,d2
    26ec:	|     |  |      move.l d2,144(sp)
    bltcon0 = ((single->width%16) << 12);    
    26f0:	|     |  |      movea.l 168(sp),a0
    26f4:	|     |  |      move.l (a0),d0
    26f6:	|     |  |      andi.l #-2147483633,d0
    26fc:	|     |  |  ,-- bpl.s 2706 <CstPasteChar+0x47c>
    26fe:	|     |  |  |   subq.l #1,d0
    2700:	|     |  |  |   moveq #-16,d1
    2702:	|     |  |  |   or.l d1,d0
    2704:	|     |  |  |   addq.l #1,d0
    2706:	|     |  |  '-> moveq #12,d2
    2708:	|     |  |      lsl.l d2,d0
    270a:	|     |  |      move.l d0,140(sp)
    
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    270e:	|     |  |      move.l 1cd12 <CstCleanupQueueDrawBuffer>,76(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2716:	|     |  |      moveq #20,d0
    2718:	|     |  |      move.l d0,72(sp)
    271c:	|     |  |      clr.l 68(sp)
    2720:	|     |  |      move.l 1cdda <SysBase>,d0
    2726:	|     |  |      movea.l d0,a6
    2728:	|     |  |      move.l 72(sp),d0
    272c:	|     |  |      move.l 68(sp),d1
    2730:	|     |  |      jsr -684(a6)
    2734:	|     |  |      move.l d0,64(sp)
    2738:	|     |  |      move.l 64(sp),d0
    273c:	|     |  |      move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2742:	|     |  |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2748:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    274e:	|     |  |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2754:	|     |  |      move.w 10(sp),d0
    2758:	|     |  |      move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    275a:	|     |  |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2760:	|     |  |      move.l 136(sp),d0
    2764:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2768:	|     |  |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    276e:	|     |  |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource;
    2772:	|     |  |      movea.l 168(sp),a0
    2776:	|     |  |      move.l (a0),d0
    2778:	|     |  |      movea.l d0,a0
    277a:	|     |  |      cmpa.w #0,a0
    277e:	|     |  |  ,-- bge.s 2784 <CstPasteChar+0x4fa>
    2780:	|     |  |  |   lea 15(a0),a0
    2784:	|     |  |  '-> move.l a0,d0
    2786:	|     |  |      asr.l #4,d0
    2788:	|     |  |      move.l d0,d0
    278a:	|     |  |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2790:	|     |  |      add.w 160(sp),d0
    2794:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2798:	|     |  |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    279e:	|     |  |      move.l 128(sp),d0
    27a2:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    27a6:	|     |  |      move.w 10(sp),d0
    27aa:	|     |  |  ,-- bpl.s 27b0 <CstPasteChar+0x526>
    27ac:	|     |  |  |   addi.w #15,d0
    27b0:	|     |  |  '-> asr.w #4,d0
    27b2:	|     |  |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    27b8:	|     |  |      add.w d0,d0
    27ba:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    27be:	|     |  |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    27c4:	|     |  |      move.l 136(sp),d0
    27c8:	|     |  |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    27cc:	|     |  |      move.l 1cd0e <CstCleanupQueueViewBuffer>,76(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    27d4:	|     |  |      moveq #20,d1
    27d6:	|     |  |      move.l d1,60(sp)
    27da:	|     |  |      clr.l 56(sp)
    27de:	|     |  |      move.l 1cdda <SysBase>,d0
    27e4:	|     |  |      movea.l d0,a6
    27e6:	|     |  |      move.l 60(sp),d0
    27ea:	|     |  |      move.l 56(sp),d1
    27ee:	|     |  |      jsr -684(a6)
    27f2:	|     |  |      move.l d0,52(sp)
    27f6:	|     |  |      move.l 52(sp),d0
    27fa:	|     |  |      move.l d0,1cd0e <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2800:	|     |  |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2806:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    280c:	|     |  |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2812:	|     |  |      move.w 10(sp),d0
    2816:	|     |  |      move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2818:	|     |  |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    281e:	|     |  |      move.l 136(sp),d0
    2822:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2826:	|     |  |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    282c:	|     |  |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    2830:	|     |  |      movea.l 168(sp),a0
    2834:	|     |  |      move.l (a0),d0
    2836:	|     |  |      movea.l d0,a0
    2838:	|     |  |      cmpa.w #0,a0
    283c:	|     |  |  ,-- bge.s 2842 <CstPasteChar+0x5b8>
    283e:	|     |  |  |   lea 15(a0),a0
    2842:	|     |  |  '-> move.l a0,d0
    2844:	|     |  |      asr.l #4,d0
    2846:	|     |  |      move.l d0,d0
    2848:	|     |  |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    284e:	|     |  |      add.w 160(sp),d0
    2852:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2856:	|     |  |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    285c:	|     |  |      move.l 128(sp),d0
    2860:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2864:	|     |  |      move.w 10(sp),d0
    2868:	|     |  |  ,-- bpl.s 286e <CstPasteChar+0x5e4>
    286a:	|     |  |  |   addi.w #15,d0
    286e:	|     |  |  '-> asr.w #4,d0
    2870:	|     |  |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2876:	|     |  |      add.w d0,d0
    2878:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;     
    287c:	|     |  |      movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2882:	|     |  |      move.l 136(sp),d0
    2886:	|     |  |      move.w d0,14(a0)
    288a:	|     +--|----- bra.w 2ae4 <CstPasteChar+0x85a>
  } else { //Whole Sprite on Screen

    extrawords = 1;
    288e:	|     |  '----> move.w #1,162(sp)
    cutwordssource = 0;
    2894:	|     |         clr.w 160(sp)
    cutmaskpixel = 0;
    2898:	|     |         clr.w 158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    289c:	|     |         clr.w 156(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    28a0:	|     |         movea.l 168(sp),a0
    28a4:	|     |         move.l 24(a0),d0
    28a8:	|     |         move.l d0,d2
    28aa:	|     |         movea.l 168(sp),a0
    28ae:	|     |         move.l (a0),d0
    28b0:	|     |         movea.l d0,a0
    28b2:	|     |         cmpa.w #0,a0
    28b6:	|     |     ,-- bge.s 28bc <CstPasteChar+0x632>
    28b8:	|     |     |   lea 15(a0),a0
    28bc:	|     |     '-> move.l a0,d0
    28be:	|     |         asr.l #4,d0
    28c0:	|     |         move.l 132(sp),-(sp)
    28c4:	|     |         move.l d0,-(sp)
    28c6:	|     |         jsr 17fcc <__mulsi3>
    28cc:	|     |         addq.l #8,sp
    28ce:	|     |         add.l d0,d0
    28d0:	|     |         move.l d2,d1
    28d2:	|     |         add.l d0,d1
    28d4:	|     |         move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28d8:	|     |         move.l 1cd2e <winWidth>,d0
    28de:	|     |         move.l 136(sp),-(sp)
    28e2:	|     |         move.l d0,-(sp)
    28e4:	|     |         jsr 17fcc <__mulsi3>
    28ea:	|     |         addq.l #8,sp
    28ec:	|     |         lsr.l #3,d0
    28ee:	|     |         move.l 108(sp),d1
    28f2:	|     |         add.l d0,d1
    28f4:	|     |         move.w 10(sp),d0
    28f8:	|     |     ,-- bpl.s 28fe <CstPasteChar+0x674>
    28fa:	|     |     |   addi.w #15,d0
    28fe:	|     |     '-> asr.w #4,d0
    2900:	|     |         movea.w d0,a0
    2902:	|     |         move.l a0,d0
    2904:	|     |         add.l a0,d0
    2906:	|     |         move.l d1,d2
    2908:	|     |         add.l d0,d2
    290a:	|     |         move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    290e:	|     |         move.l 1cd2e <winWidth>,d0
    2914:	|     |         move.l 136(sp),-(sp)
    2918:	|     |         move.l d0,-(sp)
    291a:	|     |         jsr 17fcc <__mulsi3>
    2920:	|     |         addq.l #8,sp
    2922:	|     |         lsr.l #3,d0
    2924:	|     |         move.l 108(sp),d1
    2928:	|     |         add.l d0,d1
    292a:	|     |         move.w 10(sp),d0
    292e:	|     |     ,-- bpl.s 2934 <CstPasteChar+0x6aa>
    2930:	|     |     |   addi.w #15,d0
    2934:	|     |     '-> asr.w #4,d0
    2936:	|     |         movea.w d0,a0
    2938:	|     |         move.l a0,d0
    293a:	|     |         add.l a0,d0
    293c:	|     |         move.l d1,d2
    293e:	|     |         add.l d0,d2
    2940:	|     |         move.l d2,144(sp)
    bltcon0 = ((x%16) << 12);
    2944:	|     |         move.w 10(sp),d0
    2948:	|     |         andi.w #-32753,d0
    294c:	|     |     ,-- bpl.s 2956 <CstPasteChar+0x6cc>
    294e:	|     |     |   subq.w #1,d0
    2950:	|     |     |   ori.w #-16,d0
    2954:	|     |     |   addq.w #1,d0
    2956:	|     |     '-> ext.l d0
    2958:	|     |         moveq #12,d1
    295a:	|     |         lsl.l d1,d0
    295c:	|     |         move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2960:	|     |         move.l 1cd12 <CstCleanupQueueDrawBuffer>,104(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2968:	|     |         moveq #20,d2
    296a:	|     |         move.l d2,100(sp)
    296e:	|     |         clr.l 96(sp)
    2972:	|     |         move.l 1cdda <SysBase>,d0
    2978:	|     |         movea.l d0,a6
    297a:	|     |         move.l 100(sp),d0
    297e:	|     |         move.l 96(sp),d1
    2982:	|     |         jsr -684(a6)
    2986:	|     |         move.l d0,92(sp)
    298a:	|     |         move.l 92(sp),d0
    298e:	|     |         move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2994:	|     |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    299a:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    29a0:	|     |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    29a6:	|     |         move.w 10(sp),d0
    29aa:	|     |         move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    29ac:	|     |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    29b2:	|     |         move.l 136(sp),d0
    29b6:	|     |         move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    29ba:	|     |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    29c0:	|     |         clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    29c4:	|     |         movea.l 168(sp),a0
    29c8:	|     |         move.l (a0),d0
    29ca:	|     |         movea.l d0,a0
    29cc:	|     |         cmpa.w #0,a0
    29d0:	|     |     ,-- bge.s 29d6 <CstPasteChar+0x74c>
    29d2:	|     |     |   lea 15(a0),a0
    29d6:	|     |     '-> move.l a0,d0
    29d8:	|     |         asr.l #4,d0
    29da:	|     |         move.l d0,d0
    29dc:	|     |         add.w 160(sp),d0
    29e0:	|     |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    29e6:	|     |         add.w 162(sp),d0
    29ea:	|     |         move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    29ee:	|     |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    29f4:	|     |         move.l 128(sp),d0
    29f8:	|     |         move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    29fc:	|     |         move.w 10(sp),d0
    2a00:	|     |     ,-- bpl.s 2a06 <CstPasteChar+0x77c>
    2a02:	|     |     |   addi.w #15,d0
    2a06:	|     |     '-> asr.w #4,d0
    2a08:	|     |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2a0e:	|     |         add.w d0,d0
    2a10:	|     |         move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2a14:	|     |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2a1a:	|     |         move.l 136(sp),d0
    2a1e:	|     |         move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2a22:	|     |         move.l 1cd0e <CstCleanupQueueViewBuffer>,104(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2a2a:	|     |         moveq #20,d0
    2a2c:	|     |         move.l d0,88(sp)
    2a30:	|     |         clr.l 84(sp)
    2a34:	|     |         move.l 1cdda <SysBase>,d0
    2a3a:	|     |         movea.l d0,a6
    2a3c:	|     |         move.l 88(sp),d0
    2a40:	|     |         move.l 84(sp),d1
    2a44:	|     |         jsr -684(a6)
    2a48:	|     |         move.l d0,80(sp)
    2a4c:	|     |         move.l 80(sp),d0
    2a50:	|     |         move.l d0,1cd0e <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2a56:	|     |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2a5c:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2a62:	|     |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2a68:	|     |         move.w 10(sp),d0
    2a6c:	|     |         move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2a6e:	|     |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2a74:	|     |         move.l 136(sp),d0
    2a78:	|     |         move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2a7c:	|     |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2a82:	|     |         clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2a86:	|     |         movea.l 168(sp),a0
    2a8a:	|     |         move.l (a0),d0
    2a8c:	|     |         movea.l d0,a0
    2a8e:	|     |         cmpa.w #0,a0
    2a92:	|     |     ,-- bge.s 2a98 <CstPasteChar+0x80e>
    2a94:	|     |     |   lea 15(a0),a0
    2a98:	|     |     '-> move.l a0,d0
    2a9a:	|     |         asr.l #4,d0
    2a9c:	|     |         move.l d0,d0
    2a9e:	|     |         add.w 160(sp),d0
    2aa2:	|     |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2aa8:	|     |         add.w 162(sp),d0
    2aac:	|     |         move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2ab0:	|     |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2ab6:	|     |         move.l 128(sp),d0
    2aba:	|     |         move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2abe:	|     |         move.w 10(sp),d0
    2ac2:	|     |     ,-- bpl.s 2ac8 <CstPasteChar+0x83e>
    2ac4:	|     |     |   addi.w #15,d0
    2ac8:	|     |     '-> asr.w #4,d0
    2aca:	|     |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2ad0:	|     |         add.w d0,d0
    2ad2:	|     |         move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;    
    2ad6:	|     |         movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    2adc:	|     |         move.l 136(sp),d0
    2ae0:	|     |         move.w d0,14(a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2ae4:	|     '-------> moveq #0,d0
    2ae6:	|               move.w 158(sp),d0
    2aea:	|               moveq #0,d1
    2aec:	|               not.w d1
    2aee:	|               asr.l d0,d1
    2af0:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2af4:	|               moveq #0,d1
    2af6:	|               move.w 160(sp),d1
    2afa:	|               moveq #0,d0
    2afc:	|               move.w 162(sp),d0
    2b00:	|               sub.l d0,d1
    2b02:	|               move.l d1,d0
    2b04:	|               add.w d0,d0
    2b06:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2b0a:	|               move.l 1cd2e <winWidth>,d0
    2b10:	|               lsr.l #3,d0
    2b12:	|               move.l d0,d2
    2b14:	|               move.w 160(sp),d1
    2b18:	|               sub.w 162(sp),d1
    2b1c:	|               move.l 124(sp),d0
    2b20:	|               sub.w d0,d1
    2b22:	|               move.w d1,d0
    2b24:	|               add.w d1,d0
    2b26:	|               add.w d2,d0
    2b28:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2b2c:	|               move.l 1cd2e <winWidth>,d0
    2b32:	|               lsr.l #3,d0
    2b34:	|               move.l d0,d2
    2b36:	|               move.w 160(sp),d1
    2b3a:	|               sub.w 162(sp),d1
    2b3e:	|               move.l 124(sp),d0
    2b42:	|               sub.w d0,d1
    2b44:	|               move.w d1,d0
    2b46:	|               add.w d1,d0
    2b48:	|               add.w d2,d0
    2b4a:	|               move.w d0,16(sp)

  WaitBlit();
    2b4e:	|               move.l 1cde6 <GfxBase>,d0
    2b54:	|               movea.l d0,a6
    2b56:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2b5a:	|               movea.l 112(sp),a0
    2b5e:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2b64:	|               movea.l 112(sp),a0
    2b68:	|               move.w 156(sp),70(a0)
  custom->bltamod = bltamod;
    2b6e:	|               move.w 20(sp),d0
    2b72:	|               movea.l 112(sp),a0
    2b76:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2b7a:	|               move.w 18(sp),d0
    2b7e:	|               movea.l 112(sp),a0
    2b82:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2b86:	|               move.w 16(sp),d0
    2b8a:	|               movea.l 112(sp),a0
    2b8e:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2b92:	|               move.l 1cd2e <winWidth>,d0
    2b98:	|               lsr.l #3,d0
    2b9a:	|               move.l d0,d1
    2b9c:	|               move.l 1cd32 <winHeight>,d0
    2ba2:	|               move.l d0,d0
    2ba4:	|               move.w d1,d2
    2ba6:	|               muls.w d0,d2
    2ba8:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2bac:	|               move.w 1ccf2 <textPaletteIndex>,122(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2bb4:	|               move.w 122(sp),d0
    2bb8:	|               andi.w #1,d0
    2bbc:	|               move.w d0,12(sp)
  if(tmp2) {
    2bc0:	|        ,----- beq.s 2bca <CstPasteChar+0x940>
    minterm = 0xbfa;
    2bc2:	|        |      move.w #3066,120(sp)
    2bc8:	|        |  ,-- bra.s 2bd0 <CstPasteChar+0x946>
  } else {
    minterm = 0xb0a;
    2bca:	|        '--|-> move.w #2826,120(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2bd0:	|           '-> clr.l 116(sp)
    2bd4:	|     ,-------- bra.w 2c72 <CstPasteChar+0x9e8>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2bd8:	|  ,--|-------> move.l 140(sp),d0
    2bdc:	|  |  |         add.w 120(sp),d0
    2be0:	|  |  |         movea.l 112(sp),a0
    2be4:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2be8:	|  |  |         move.l 152(sp),d0
    2bec:	|  |  |         movea.l 112(sp),a0
    2bf0:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2bf4:	|  |  |         move.l 148(sp),d0
    2bf8:	|  |  |         movea.l 112(sp),a0
    2bfc:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2c00:	|  |  |         move.l 144(sp),d0
    2c04:	|  |  |         movea.l 112(sp),a0
    2c08:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2c0c:	|  |  |         move.l 128(sp),d0
    2c10:	|  |  |         lsl.w #6,d0
    2c12:	|  |  |         move.l 124(sp),d1
    2c16:	|  |  |         add.w d1,d0
    2c18:	|  |  |         sub.w 160(sp),d0
    2c1c:	|  |  |         add.w 162(sp),d0
    2c20:	|  |  |         movea.l 112(sp),a0
    2c24:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2c28:	|  |  |         moveq #0,d0
    2c2a:	|  |  |         move.w 14(sp),d0
    2c2e:	|  |  |         add.l d0,148(sp)
    bltdpt += bltcptplus;
    2c32:	|  |  |         moveq #0,d0
    2c34:	|  |  |         move.w 14(sp),d0
    2c38:	|  |  |         add.l d0,144(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2c3c:	|  |  |         move.w 122(sp),d0
    2c40:	|  |  |         lsr.w #1,d0
    2c42:	|  |  |         move.w d0,122(sp)
    tmp2 = tmp & 0x01;
    2c46:	|  |  |         move.w 122(sp),d1
    2c4a:	|  |  |         andi.w #1,d1
    2c4e:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2c52:	|  |  |  ,----- beq.s 2c5c <CstPasteChar+0x9d2>
      minterm = 0xbfa;
    2c54:	|  |  |  |      move.w #3066,120(sp)
    2c5a:	|  |  |  |  ,-- bra.s 2c62 <CstPasteChar+0x9d8>
    } else {
      minterm = 0xb0a;
    2c5c:	|  |  |  '--|-> move.w #2826,120(sp)
    }   

    WaitBlit();     
    2c62:	|  |  |     '-> move.l 1cde6 <GfxBase>,d0
    2c68:	|  |  |         movea.l d0,a6
    2c6a:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c6e:	|  |  |         addq.l #1,116(sp)
    2c72:	|  |  '-------> moveq #4,d2
    2c74:	|  |            cmp.l 116(sp),d2
    2c78:	|  '----------- bge.w 2bd8 <CstPasteChar+0x94e>
  }   
  //custom->color[0] = 0x000;
}
    2c7c:	'-------------> move.l (sp)+,d2
    2c7e:	                movea.l (sp)+,a6
    2c80:	                lea 156(sp),sp
    2c84:	                rts

00002c86 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2c86:	                   lea -36(sp),sp
    2c8a:	                   move.l a6,-(sp)
    2c8c:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2c8e:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2c96:	                   move.l 1cd12 <CstCleanupQueueDrawBuffer>,d0
    2c9c:	,----------------- beq.w 2efc <CstRestoreScreen+0x276>
    2ca0:	|                  move.l 1cd0a <CstDrawBuffer>,d0
    2ca6:	+----------------- beq.w 2efc <CstRestoreScreen+0x276>
    return;
  } 

  UWORD *colorpos = CstPalette;
    2caa:	|                  move.l 1cd1a <CstPalette>,40(sp)
  UWORD *tmp = CstClColor;
    2cb2:	|                  move.l 1cd16 <CstClColor>,36(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2cba:	|                  clr.l 32(sp)
    2cbe:	|              ,-- bra.s 2cf0 <CstRestoreScreen+0x6a>
    *tmp++;
    2cc0:	|           ,--|-> move.l 36(sp),d0
    2cc4:	|           |  |   move.l d0,d1
    2cc6:	|           |  |   addq.l #2,d1
    2cc8:	|           |  |   move.l d1,36(sp)
    *tmp++ = *colorpos++;
    2ccc:	|           |  |   move.l 40(sp),d1
    2cd0:	|           |  |   move.l d1,d2
    2cd2:	|           |  |   addq.l #2,d2
    2cd4:	|           |  |   move.l d2,40(sp)
    2cd8:	|           |  |   move.l 36(sp),d0
    2cdc:	|           |  |   move.l d0,d2
    2cde:	|           |  |   addq.l #2,d2
    2ce0:	|           |  |   move.l d2,36(sp)
    2ce4:	|           |  |   movea.l d1,a0
    2ce6:	|           |  |   move.w (a0),d1
    2ce8:	|           |  |   movea.l d0,a0
    2cea:	|           |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2cec:	|           |  |   addq.l #1,32(sp)
    2cf0:	|           |  '-> moveq #31,d0
    2cf2:	|           |      cmp.l 32(sp),d0
    2cf6:	|           '----- bge.s 2cc0 <CstRestoreScreen+0x3a>
  }

  WaitBlit();
    2cf8:	|                  move.l 1cde6 <GfxBase>,d0
    2cfe:	|                  movea.l d0,a6
    2d00:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2d04:	|                  movea.l 16(sp),a0
    2d08:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2d0e:	|                  movea.l 16(sp),a0
    2d12:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2d18:	|                  movea.l 16(sp),a0
    2d1c:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2d22:	|     ,----------- bra.w 2ef0 <CstRestoreScreen+0x26a>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2d26:	|  ,--|----------> movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2d2c:	|  |  |            move.l 4(a0),d0
    2d30:	|  |  |     ,----- beq.s 2d46 <CstRestoreScreen+0xc0>
    2d32:	|  |  |     |      movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2d38:	|  |  |     |      movea.l 4(a0),a0
    2d3c:	|  |  |     |      move.l 16(a0),d0
    2d40:	|  |  |     |      moveq #2,d1
    2d42:	|  |  |     |      cmp.l d0,d1
    2d44:	|  |  |     |  ,-- bge.s 2d54 <CstRestoreScreen+0xce>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2d46:	|  |  |     '--|-> movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2d4c:	|  |  |        |   move.l 4(a0),d0
    2d50:	|  |  |  ,-----|-- bne.w 2ebe <CstRestoreScreen+0x238>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2d54:	|  |  |  |     '-> move.l 1cd2e <winWidth>,d0
    2d5a:	|  |  |  |         lsr.l #3,d0
    2d5c:	|  |  |  |         move.l d0,d1
    2d5e:	|  |  |  |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2d64:	|  |  |  |         move.w 8(a0),d0
    2d68:	|  |  |  |         add.w d0,d0
    2d6a:	|  |  |  |         sub.w d0,d1
    2d6c:	|  |  |  |         movea.l 16(sp),a0
    2d70:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2d74:	|  |  |  |         move.l 1cd2e <winWidth>,d0
    2d7a:	|  |  |  |         lsr.l #3,d0
    2d7c:	|  |  |  |         move.l d0,d1
    2d7e:	|  |  |  |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2d84:	|  |  |  |         move.w 8(a0),d0
    2d88:	|  |  |  |         add.w d0,d0
    2d8a:	|  |  |  |         sub.w d0,d1
    2d8c:	|  |  |  |         movea.l 16(sp),a0
    2d90:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2d94:	|  |  |  |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2d9a:	|  |  |  |         move.w 14(a0),d0
    2d9e:	|  |  |  |         move.w d0,d0
    2da0:	|  |  |  |         andi.l #65535,d0
    2da6:	|  |  |  |         move.l 1cd2e <winWidth>,d1
    2dac:	|  |  |  |         move.l d1,-(sp)
    2dae:	|  |  |  |         move.l d0,-(sp)
    2db0:	|  |  |  |         jsr 17fcc <__mulsi3>
    2db6:	|  |  |  |         addq.l #8,sp
    2db8:	|  |  |  |         move.l d0,d1
    2dba:	|  |  |  |         lsr.l #3,d1
    2dbc:	|  |  |  |         move.l 1ccfa <CstBackDrop>,d0
    2dc2:	|  |  |  |         add.l d0,d1
    2dc4:	|  |  |  |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2dca:	|  |  |  |         move.w 12(a0),d0
    2dce:	|  |  |  |         move.w d0,d0
    2dd0:	|  |  |  |         andi.l #65535,d0
    2dd6:	|  |  |  |         move.l d1,d2
    2dd8:	|  |  |  |         add.l d0,d2
    2dda:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2dde:	|  |  |  |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2de4:	|  |  |  |         move.w 14(a0),d0
    2de8:	|  |  |  |         move.w d0,d0
    2dea:	|  |  |  |         andi.l #65535,d0
    2df0:	|  |  |  |         move.l 1cd2e <winWidth>,d1
    2df6:	|  |  |  |         move.l d1,-(sp)
    2df8:	|  |  |  |         move.l d0,-(sp)
    2dfa:	|  |  |  |         jsr 17fcc <__mulsi3>
    2e00:	|  |  |  |         addq.l #8,sp
    2e02:	|  |  |  |         move.l d0,d1
    2e04:	|  |  |  |         lsr.l #3,d1
    2e06:	|  |  |  |         move.l 1cd0a <CstDrawBuffer>,d0
    2e0c:	|  |  |  |         add.l d0,d1
    2e0e:	|  |  |  |         movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2e14:	|  |  |  |         move.w 12(a0),d0
    2e18:	|  |  |  |         move.w d0,d0
    2e1a:	|  |  |  |         andi.l #65535,d0
    2e20:	|  |  |  |         move.l d1,d2
    2e22:	|  |  |  |         add.l d0,d2
    2e24:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e28:	|  |  |  |         clr.l 20(sp)
    2e2c:	|  |  |  |     ,-- bra.w 2eb4 <CstRestoreScreen+0x22e>
      {
        custom->bltapt = (APTR) bltapt;
    2e30:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2e34:	|  |  |  |  |  |   movea.l 16(sp),a0
    2e38:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2e3c:	|  |  |  |  |  |   move.l 24(sp),d0
    2e40:	|  |  |  |  |  |   movea.l 16(sp),a0
    2e44:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2e48:	|  |  |  |  |  |   movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2e4e:	|  |  |  |  |  |   move.w 10(a0),d0
    2e52:	|  |  |  |  |  |   lsl.w #6,d0
    2e54:	|  |  |  |  |  |   movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2e5a:	|  |  |  |  |  |   move.w 8(a0),d1
    2e5e:	|  |  |  |  |  |   add.w d1,d0
    2e60:	|  |  |  |  |  |   movea.l 16(sp),a0
    2e64:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2e68:	|  |  |  |  |  |   move.l 1cd2e <winWidth>,d0
    2e6e:	|  |  |  |  |  |   lsr.l #3,d0
    2e70:	|  |  |  |  |  |   move.l 1cd32 <winHeight>,d1
    2e76:	|  |  |  |  |  |   move.l d1,-(sp)
    2e78:	|  |  |  |  |  |   move.l d0,-(sp)
    2e7a:	|  |  |  |  |  |   jsr 17fcc <__mulsi3>
    2e80:	|  |  |  |  |  |   addq.l #8,sp
    2e82:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2e86:	|  |  |  |  |  |   move.l 1cd2e <winWidth>,d0
    2e8c:	|  |  |  |  |  |   lsr.l #3,d0
    2e8e:	|  |  |  |  |  |   move.l 1cd32 <winHeight>,d1
    2e94:	|  |  |  |  |  |   move.l d1,-(sp)
    2e96:	|  |  |  |  |  |   move.l d0,-(sp)
    2e98:	|  |  |  |  |  |   jsr 17fcc <__mulsi3>
    2e9e:	|  |  |  |  |  |   addq.l #8,sp
    2ea0:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2ea4:	|  |  |  |  |  |   move.l 1cde6 <GfxBase>,d0
    2eaa:	|  |  |  |  |  |   movea.l d0,a6
    2eac:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2eb0:	|  |  |  |  |  |   addq.l #1,20(sp)
    2eb4:	|  |  |  |  |  '-> moveq #4,d0
    2eb6:	|  |  |  |  |      cmp.l 20(sp),d0
    2eba:	|  |  |  |  '----- bge.w 2e30 <CstRestoreScreen+0x1aa>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2ebe:	|  |  |  '-------> move.l 1cd12 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2ec6:	|  |  |            movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    2ecc:	|  |  |            move.l 16(a0),d0
    2ed0:	|  |  |            move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2ed6:	|  |  |            move.l 12(sp),8(sp)
    2edc:	|  |  |            move.l 1cdda <SysBase>,d0
    2ee2:	|  |  |            movea.l d0,a6
    2ee4:	|  |  |            movea.l 8(sp),a1
    2ee8:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2eec:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2ef0:	|  |  '----------> move.l 1cd12 <CstCleanupQueueDrawBuffer>,d0
    2ef6:	|  '-------------- bne.w 2d26 <CstRestoreScreen+0xa0>
    2efa:	|              ,-- bra.s 2efe <CstRestoreScreen+0x278>
    return;
    2efc:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    2efe:	               '-> move.l (sp)+,d2
    2f00:	                   movea.l (sp)+,a6
    2f02:	                   lea 36(sp),sp
    2f06:	                   rts

00002f08 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2f08:	                                                                                           lea -40(sp),sp
    2f0c:	                                                                                           movem.l d2-d7/a2-a6,-(sp)
    2f10:	                                                                                           movea.l 88(sp),a2
    2f14:	                                                                                           move.l 92(sp),64(sp)
    2f1a:	                                                                                           move.l 96(sp),d4
    2f1e:	                                                                                           movea.l 100(sp),a3
    2f22:	                                                                                           move.w d4,d2
    2f24:	                                                                                           move.w a3,d3
    2f26:	                                                                                           move.w 106(sp),52(sp)
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2f2c:	                                                                                           movea.w a3,a5
    2f2e:	                                                                                           movea.w d4,a6
    2f30:	                                                                                           move.l a5,-(sp)
    2f32:	                                                                                           move.l a6,-(sp)
    2f34:	                                                                                           move.l 1ce36 <zBuffer>,-(sp)
    2f3a:	                                                                                           move.l a2,-(sp)
    2f3c:	                                                                                           jsr 1386 <CstDrawZBuffer>
    2f42:	                                                                                           move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2f44:	                                                                                           lea 16(sp),sp
    2f48:	                                                                                           cmpi.w #1,52(sp)
    2f4e:	                                                            ,----------------------------- beq.w 342e <CstScaleSprite+0x526>
    2f52:	                                                            |                              cmpi.w #2,52(sp)
    2f58:	                                                            |                 ,----------- beq.w 328c <CstScaleSprite+0x384>
    2f5c:	                                                            |                 |            suba.l a4,a4
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2f5e:	                                                            |  ,--------------|----------> move.l 4(a2),d1
    2f62:	                                                            |  |              |            move.l a5,d0
    2f64:	                                                            |  |              |            add.l d1,d0
  if( y < 0) {
    2f66:	                                                            |  |              |            tst.w d3
    2f68:	                                                            |  |           ,--|----------- blt.w 32a0 <CstScaleSprite+0x398>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2f6c:	                                                            |  |           |  |  ,-------> movea.l 1cd32 <winHeight>,a0
    2f72:	                                                            |  |           |  |  |         cmp.l a0,d0
    2f74:	                                                            |  |  ,--------|--|--|-------- ble.w 3438 <CstScaleSprite+0x530>
    if(y  > (int) winHeight) {
    2f78:	                                                            |  |  |        |  |  |         cmpa.l a5,a0
    2f7a:	                     ,--------------------------------------|--|--|--------|--|--|-------- blt.w 356a <CstScaleSprite+0x662>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2f7e:	                     |                                      |  |  |        |  |  |         move.l a5,d7
    ystartsrc = 0;
    blitheight = winHeight-y;
    2f80:	                     |                                      |  |  |        |  |  |         suba.l a5,a0
    2f82:	                     |                                      |  |  |        |  |  |         move.l a0,48(sp)
    ystartsrc = 0;
    2f86:	                     |                                      |  |  |        |  |  |         moveq #0,d3


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2f88:	                     |                                      |  |  |  ,-----|--|--|-------> move.l (a2),d1
    2f8a:	                     |                                      |  |  |  |     |  |  |         move.l a6,d0
    2f8c:	                     |                                      |  |  |  |     |  |  |         add.l d1,d0
  if( x < 0) 
    2f8e:	                     |                                      |  |  |  |     |  |  |         tst.w d2
    2f90:	                     |                                      |  |  |  |     |  |  |  ,----- blt.w 32bc <CstScaleSprite+0x3b4>
      CstCleanupQueueViewBuffer->height = blitheight; 
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    }           
  } 
  else if(x + single->width > (int) winWidth) 
    2f94:	                     |                                      |  |  |  |     |  |  |  |  ,-> movea.l 1cd2e <winWidth>,a5
    2f9a:	                     |                                      |  |  |  |     |  |  |  |  |   cmp.l a5,d0
    2f9c:	                     |                                      |  |  |  |  ,--|--|--|--|--|-- ble.w 3444 <CstScaleSprite+0x53c>
  { //Rightmost part outside screen   

    if(x - single->width > (int) winWidth)
    2fa0:	                     |                                      |  |  |  |  |  |  |  |  |  |   suba.l d1,a6
    2fa2:	                     |                                      |  |  |  |  |  |  |  |  |  |   cmpa.l a5,a6
    2fa4:	                     +--------------------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 356a <CstScaleSprite+0x662>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2fa8:	                     |                                      |  |  |  |  |  |  |  |  |  |   sub.l a5,d0
    2faa:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    2fac:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,56(sp)
    2fb0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2fb2:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 17fcc <__mulsi3>,a6
    2fb8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2fba:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2fbc:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    2fbe:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2fc0:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2fc2:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2fc4:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2fc8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2fcc:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d2
    2fce:	                     |                                      |  |  |  |  |  |  |  |  |  |   asr.w #4,d2
    2fd0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d7,-(sp)
    2fd2:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    2fd4:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    2fd6:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2fd8:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2fda:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d2,a0
    2fdc:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    2fde:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a4
    2fe0:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea (0,a4,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2fe4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d3
    2fe6:	                     |                                      |  |  |  |  |  |  |  |  |  |   andi.w #15,d3
    2fea:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,76(sp)
    2fee:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2ff0:	                     |                                      |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    2ff2:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    2ff4:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d3
    2ff6:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d3,d1
    2ff8:	                     |                                      |  |  |  |  |  |  |  |  |  |   addi.l #4042,d1
    2ffe:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,72(sp)
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    3002:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    3008:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a4,d1
    300a:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d0,d1
    300c:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d1,a4

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    300e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 1cd12 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3014:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l #118234,68(sp)
    301c:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 1cdda <SysBase>,a0
    3022:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3024:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    3026:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    3028:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    302c:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    302e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3034:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,16(a0)

    CstCleanupQueueDrawBuffer->x = x;
    3038:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    303a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    303e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3044:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    3046:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    3048:	         ,-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3846 <CstScaleSprite+0x93e>
    304c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    304e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    3052:	         |           |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    3054:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3058:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),d3
    305c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3060:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d2,d2
    3062:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,78(sp)
    3066:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    306a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,48(sp)
    306e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,14(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    } 
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3072:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),d7
    3076:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d7,d7
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    3078:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    307e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),d2
    3082:	         |           |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    3084:	         |           |                                      |  |  |  |  |  |  |  |  |  |   lsl.w d0,d2
    3086:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,76(sp)
    if( destinationtype != SCREEN)
    308a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   cmpi.w #1,52(sp)
    3090:	      ,--|-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 38b6 <CstScaleSprite+0x9ae>
      next = CstCleanupQueueViewBuffer;
    3094:	      |  |  ,--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1cd0e <CstCleanupQueueViewBuffer>,d2
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    309a:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    309e:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    30a0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    30a2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    30a4:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    30a8:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    30aa:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1cd0e <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    30b0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    30b4:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    30b6:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    30ba:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    30c0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    30c2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    30c4:	   ,--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3900 <CstScaleSprite+0x9f8>
    30c8:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    30ca:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    30ce:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    30d0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    30d4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    30d8:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    30de:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    30e4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    30ea:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    30ec:	,--|--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1cd2e <winWidth>,d0
    30f2:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    30f4:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    30f6:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    30f8:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   tst.l d1
    30fa:	|  |  |  |  |  ,-----|--------------------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3646 <CstScaleSprite+0x73e>
    30fe:	|  |  |  |  |  |  ,--|--------------------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    3100:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    3102:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lea 1cde6 <GfxBase>,a3
    3108:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    310a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    310e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb30a1>
  custom->bltalwm = bltalwm;
    3116:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb30a3>
  custom->bltamod = bltamod;
    311c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
  custom->bltbmod = bltbmod;
    3122:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb30bf>
  custom->bltcmod = bltcmod;
    3128:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb30bd>
  custom->bltdmod = bltdmod;
    312e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
  custom->bltcon0 = bltcon0;
    3134:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb309d>
  custom->bltcon1 = bltcon1;  
    313c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb309f>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3144:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3146:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3148:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d7
    314a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   asr.l #3,d7
    314c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d7
    bltbpt += bltbptplus;
    3150:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    3156:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 1cd2e <winWidth>,d4
    315c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    315e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 1cd34 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    3164:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    316a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltbpt = (APTR) bltbpt;
    3170:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
    custom->bltcpt = (APTR) bltcpt;
    3178:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb30a5>
    custom->bltdpt = (APTR) bltdpt;
    317e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3184:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   tst.l d0
    3186:	|  |  |  |  |  |  |  |                       ,--------------|--|--|--|--|--|--|--|--|--|-- blt.w 36d4 <CstScaleSprite+0x7cc>
    318a:	|  |  |  |  |  |  |  |                       |     ,--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    318c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    318e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    3190:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3192:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    bltbpt += bltbptplus;
    3198:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a4
    319c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    319e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    31a0:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    31a2:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31a6:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    31a8:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltbpt = (APTR) bltbpt;
    31ae:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
    custom->bltcpt = (APTR) bltcpt;
    31b4:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb30a5>
    custom->bltdpt = (APTR) bltdpt;
    31ba:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31c0:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    31c2:	|  |  |  |  |  |  |  |                 ,-----|-----|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3714 <CstScaleSprite+0x80c>
    31c6:	|  |  |  |  |  |  |  |                 |     |  ,--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    31c8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    31ca:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    31cc:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    31ce:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    bltbpt += bltbptplus;
    31d4:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    31d6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    31d8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    31da:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31de:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    31e0:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltbpt = (APTR) bltbpt;
    31e6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
    custom->bltcpt = (APTR) bltcpt;
    31ec:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb30a5>
    custom->bltdpt = (APTR) bltdpt;
    31f2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31f8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    31fa:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3750 <CstScaleSprite+0x848>
    31fe:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3200:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3202:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    3204:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3206:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    bltbpt += bltbptplus;
    320c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    320e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    3210:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3212:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3216:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3218:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltbpt = (APTR) bltbpt;
    321e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
    custom->bltcpt = (APTR) bltcpt;
    3224:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb30a5>
    custom->bltdpt = (APTR) bltdpt;
    322a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3230:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3232:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 378c <CstScaleSprite+0x884>
    3236:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3238:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    323a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    323c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    323e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    bltbpt += bltbptplus;
    3244:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a4,d7
    bltcpt += bltcptplus;
    3246:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    3248:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    324a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    324e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3250:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltbpt = (APTR) bltbpt;
    3256:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
    custom->bltcpt = (APTR) bltcpt;
    325c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb30a5>
    custom->bltdpt = (APTR) bltdpt;
    3262:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3268:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    326a:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 37c8 <CstScaleSprite+0x8c0>
    326e:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    3272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d2
    3274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    3276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    WaitBlit();
    327c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    327e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    3282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
    328a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
      destination = (UWORD *) CstBackDrop;      
    328c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  '--|--|--|-> movea.l 1ccfa <CstBackDrop>,a4
    if(y + single->height < 0) {
    3292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l 4(a2),d1
    3296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l a5,d0
    3298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   add.l d1,d0
  if( y < 0) {
    329a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   tst.w d3
    329c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     '--|--|-- bge.w 2f6c <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    32a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  '--------|--|-> tst.l d0
    32a2:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|-----------|--|-- blt.w 356a <CstScaleSprite+0x662>
    ystartsrc = y*-1;
    32a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a5,d3
    32a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   neg.l d3
    blitheight = single->height+y;
    32aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l d0,48(sp)
    ystartdst = 0;
    32ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   moveq #0,d7
    if(x + single->width < 0) {
    32b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l (a2),d1
    32b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a6,d0
    32b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   add.l d1,d0
  if( x < 0) 
    32b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   tst.w d2
    32b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  '-- bge.w 2f94 <CstScaleSprite+0x8c>
    if(x + single->width < 0) {
    32bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           '----> tst.l d0
    32be:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|----------------- blt.w 356a <CstScaleSprite+0x662>
    cutwordssource = (x*-1)/16; 
    32c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d4,d0
    32c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addi.w #15,d0
    32c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  asr.w #4,d0
    32ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.w d0
    32cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,56(sp)
    32d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    32d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l a6,d0
    32d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.l d0
    32d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  moveq #15,d2
    32d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  and.l d0,d2
    32da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d2,78(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    32de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lea 17fcc <__mulsi3>,a6
    32e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 1cd2e <winWidth>,-(sp)
    32ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d7,-(sp)
    32ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d1,52(sp)
    32f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  jsr (a6)
    32f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addq.l #8,sp
    32f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    32f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 44(sp),d1
    32fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  tst.l d2
    32fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  ,-------------- beq.w 3580 <CstScaleSprite+0x678>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3300:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea (-2,a4,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 56(sp),d2
    3308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               subq.w #1,d2
    330a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,82(sp)
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    330e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w #16,a0
    3312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               suba.l 78(sp),a0
    3316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l a0,d2
    3318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #12,d0
    331a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    331c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addi.w #4042,d2
    3320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,72(sp)
  custom->bltcon1 = bltcon1;  
    3324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a0,d2
    3326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.w d0,d2
    3328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,76(sp)
      extrawords = 1;
    332c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    332e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w 56(sp),a4
    3332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l a4,a4
    3334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,-(sp)
    3336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,-(sp)
    3338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr (a6)
    333a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addq.l #8,sp
    333c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsr.l #3,d0
    333e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d5
    3340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l 24(a2),a4
    3346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d0
    3348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    334c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 1cd12 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l #118234,68(sp)
    335a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea 1cdda <SysBase>,a0
    3360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l (a0),a6
    3362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #20,d0
    3364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #0,d1
    3366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr -684(a6)
    336a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l d0,a0
    336c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    337c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l (a2),d1
    3384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,d0
    3386:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     ,-------- bmi.w 35f2 <CstScaleSprite+0x6ea>
    338a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     ,-> asr.l #4,d0
    338c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w 56(sp),d0
    3390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d2,d0
    3392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 50(sp),d3
    339a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    339e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    33a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   movea.w d7,a4
    33a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    33a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   moveq #0,d0
    33aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   not.w d0
    33ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.l 78(sp),d7
    33b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   asr.l d7,d0
    33b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    33b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 82(sp),d7
    33ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d7,d7
    if( destinationtype != SCREEN)
    33bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   cmpi.w #1,52(sp)
    33c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  ,--|-----|-- beq.w 3632 <CstScaleSprite+0x72a>
      next = CstCleanupQueueViewBuffer;
    33c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  ,--|-> move.l 1cd0e <CstCleanupQueueViewBuffer>,52(sp)
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    33d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    33d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    33d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    33d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    33dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    33de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d0,1cd0e <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;
    33e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 52(sp),16(a0)
      CstCleanupQueueViewBuffer->x = x;
    33ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    33ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person;
    33f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    33f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    33f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    33fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|--|--|-- bmi.w 3894 <CstScaleSprite+0x98c>
    33fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w 56(sp),d0
    3404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    340a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    340e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|-> move.l 1cd2e <winWidth>,d0
    341e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    3420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    3422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3426:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 30fe <CstScaleSprite+0x1f6>
    342a:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3646 <CstScaleSprite+0x73e>
      destination = (UWORD *) CstDrawBuffer;      
    342e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|-> movea.l 1cd0a <CstDrawBuffer>,a4
      break;
    3434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--|--|--|--|--|-- bra.w 2f5e <CstScaleSprite+0x56>
    ystartdst = y;
    3438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--|--|--|--|--|-> move.l a5,d7
    blitheight = single->height;
    343a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   move.l d1,48(sp)
    ystartsrc = 0;
    343e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   moveq #0,d3
    3440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--|--|--|--|--|-- bra.w 2f88 <CstScaleSprite+0x80>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--|--|--|--|--|-> lea 17fcc <__mulsi3>,a6
    344a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,-(sp)
    344c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,-(sp)
    344e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    3454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l 24(a2),d0
    345a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    345e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d2
    3460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   asr.w #4,d2
    3462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d7,-(sp)
    3464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l a5,-(sp)
    3466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    346a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    346c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.w d2,a0
    346e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a0
    3470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a4
    3472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea (0,a4,d0.l),a5
    bltcon0 = 0xfca + ((x%16) << 12);
    3476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d6
    3478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   andi.w #15,d6
    347c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #15,d0
    347e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   and.l d4,d0
    3480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #12,d1
    3482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsl.l d1,d0
    3484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a4
    3486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 4042(a4),a4
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    348a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 1cd12 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l #118234,68(sp)
    3498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 1cdda <SysBase>,a0
    349e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l (a0),a6
    34a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #20,d0
    34a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #0,d1
    34a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr -684(a6)
    34a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a0
    34aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    34b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    34b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    34b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    34ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    34c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l (a2),d1
    34c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,d0
    34c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-----|--|--|--|--|-- bmi.w 37ea <CstScaleSprite+0x8e2>
    34c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   asr.l #4,d0
    34ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   addq.w #1,d0
    34cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    34d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 50(sp),d3
    34d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    34d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   add.w d2,d2
    34da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    34de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,48(sp)
    34e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    34e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    34ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   moveq #12,d0
    34ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   lsl.w d0,d6
    34ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,76(sp)
    if( destinationtype != SCREEN)
    34f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   cmpi.w #1,52(sp)
    34f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|-----|--|--|--|--|-- beq.w 3822 <CstScaleSprite+0x91a>
      next = CstCleanupQueueViewBuffer;
    34fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,--|--|--|--|--|-> move.l 1cd0e <CstCleanupQueueViewBuffer>,d6
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    3506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l (a0),a6
    3508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #20,d0
    350a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #0,d1
    350c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   jsr -684(a6)
    3510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l d0,a0
    3512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d0,1cd0e <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    3518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d6,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    351c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    351e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    3522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l (a2),d1
    352a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d1,d0
    352c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|-- bmi.w 38d4 <CstScaleSprite+0x9cc>
    3530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   addq.w #1,d0
    3534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    353c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    3546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    354c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    354e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    3552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|-> move.l 1cd2e <winWidth>,d0
    355a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    355c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    355e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3562:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 30fe <CstScaleSprite+0x1f6>
    3566:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3646 <CstScaleSprite+0x73e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    356a:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> move.l #99385,88(sp)
}
    3572:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3576:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    357a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jmp 17640 <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3580:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|-> lea (0,a4,d0.l),a5
    3584:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 56(sp),82(sp)
    358a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w 76(sp)
    358e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w #4042,72(sp)
      extrawords = 0;
    3594:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3596:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.w 56(sp),a4
    359a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l a4,a4
    359c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,-(sp)
    359e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,-(sp)
    35a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr (a6)
    35a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   addq.l #8,sp
    35a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lsr.l #3,d0
    35a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d5
    35a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    35aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l 24(a2),a4
    35ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d0
    35b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    35b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 1cd12 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    35ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l #118234,68(sp)
    35c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lea 1cdda <SysBase>,a0
    35c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l (a0),a6
    35ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #20,d0
    35cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #0,d1
    35ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr -684(a6)
    35d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l d0,a0
    35d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    35da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    35de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    35e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    35e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    35ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l (a2),d1
    35ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,d0
    35ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-- bpl.w 338a <CstScaleSprite+0x482>
    35f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  '--|----> moveq #15,d0
    35f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.l d1,d0
    35f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l #4,d0
    35f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w 56(sp),d0
    35fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d2,d0
    35fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3602:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 50(sp),d3
    3606:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    360a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    360e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      movea.w d7,a4
    3610:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3614:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      moveq #0,d0
    3616:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      not.w d0
    3618:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.l 78(sp),d7
    361c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l d7,d0
    361e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3622:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 82(sp),d7
    3626:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d7,d7
    if( destinationtype != SCREEN)
    3628:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      cmpi.w #1,52(sp)
    362e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     '----- bne.w 33c6 <CstScaleSprite+0x4be>
    bltalwm = 0; //Last Word of this channel almost masked out
    3632:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------> suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3634:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1cd2e <winWidth>,d0
    363a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    363c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,d4
    363e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  add.w d0,d4
    3640:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d1
    3642:	|  |  |  |  |  |  +-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- bge.w 30fe <CstScaleSprite+0x1f6>
    3646:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------> addq.l #7,d1
    3648:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d1
    364a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  sub.w d1,d4
  WaitBlit();
    364c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 1cde6 <GfxBase>,a3
    3652:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l (a3),a6
    3654:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr -228(a6)
  custom->bltafwm = bltafwm;
    3658:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb30a1>
  custom->bltalwm = bltalwm;
    3660:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb30a3>
  custom->bltamod = bltamod;
    3666:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb30c1>
  custom->bltbmod = bltbmod;
    366c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb30bf>
  custom->bltcmod = bltcmod;
    3672:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb30bd>
  custom->bltdmod = bltdmod;
    3678:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb30c3>
  custom->bltcon0 = bltcon0;
    367e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb309d>
  custom->bltcon1 = bltcon1;  
    3686:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb309f>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    368e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3690:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3692:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d0,d7
    3694:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d7
    3696:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 6(a2),d7
    bltbpt += bltbptplus;
    369a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    36a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1cd2e <winWidth>,d4
    36a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d4
    36a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 1cd34 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    36ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    36b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltbpt = (APTR) bltbpt;
    36ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
    custom->bltcpt = (APTR) bltcpt;
    36c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb30a5>
    custom->bltdpt = (APTR) bltdpt;
    36c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    36ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d0
    36d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|----------------- bge.w 318a <CstScaleSprite+0x282>
    36d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--|-----|--|--|--|--|--|--|----------------> moveq #15,d1
    36d6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.l d1,d0
    36d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  asr.l #4,d0
    36da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d2,d0
    36dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d3,d0
    36de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  sub.w d6,d0
    36e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    bltbpt += bltbptplus;
    36e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l 60(sp),a4
    36ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    36ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    36ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l (a3),a6
    36f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    36f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    36f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltbpt = (APTR) bltbpt;
    36fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
    custom->bltcpt = (APTR) bltcpt;
    3702:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb30a5>
    custom->bltdpt = (APTR) bltdpt;
    3708:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    370e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  tst.l d0
    3710:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     '-----|--|--|--|--|--|--|----------------- bge.w 31c6 <CstScaleSprite+0x2be>
    3714:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|--|--|----------------> moveq #15,d1
    3716:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.l d1,d0
    3718:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  asr.l #4,d0
    371a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d2,d0
    371c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d3,d0
    371e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  sub.w d6,d0
    3720:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    bltbpt += bltbptplus;
    3726:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3728:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    372a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l (a3),a6
    372c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3730:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3732:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltbpt = (APTR) bltbpt;
    3738:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
    custom->bltcpt = (APTR) bltcpt;
    373e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb30a5>
    custom->bltdpt = (APTR) bltdpt;
    3744:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    374a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  tst.l d0
    374c:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|--|--|----------------- bge.w 31fe <CstScaleSprite+0x2f6>
    3750:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|--|--|----------------> moveq #15,d1
    3752:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.l d1,d0
    3754:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  asr.l #4,d0
    3756:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d2,d0
    3758:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d3,d0
    375a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  sub.w d6,d0
    375c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    bltbpt += bltbptplus;
    3762:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3764:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    3766:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l (a3),a6
    3768:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    376c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    376e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltbpt = (APTR) bltbpt;
    3774:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
    custom->bltcpt = (APTR) bltcpt;
    377a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb30a5>
    custom->bltdpt = (APTR) bltdpt;
    3780:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3786:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  tst.l d0
    3788:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|--|--|----------------- bge.w 3236 <CstScaleSprite+0x32e>
    378c:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    378e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l d1,d0
    3790:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  asr.l #4,d0
    3792:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d2,d0
    3794:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d3,d0
    3796:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  sub.w d6,d0
    3798:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    bltbpt += bltbptplus;
    379e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a4,d7
    bltcpt += bltcptplus;
    37a0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a5,d4
    WaitBlit();
    37a2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l (a3),a6
    37a4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    37a8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    37aa:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb30ad>
    custom->bltbpt = (APTR) bltbpt;
    37b0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb30a9>
    custom->bltcpt = (APTR) bltcpt;
    37b6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb30a5>
    custom->bltdpt = (APTR) bltdpt;
    37bc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb30b1>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    37c2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  tst.l d0
    37c4:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|--|--|----------------- bge.w 326e <CstScaleSprite+0x366>
    37c8:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|--|--|----------------> moveq #15,d7
    37ca:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.l d7,d0
    37cc:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  asr.l #4,d0
    37ce:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d0,d2
    37d0:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d3,d2
    37d2:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  sub.w d6,d2
    37d4:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb30b5>
    WaitBlit();
    37da:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l (a3),a6
    37dc:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  jsr -228(a6)
}
    37e0:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movem.l (sp)+,d2-d7/a2-a6
    37e4:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  lea 40(sp),sp
    37e8:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  rts
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    37ea:	|  |  |  |  |  |  |                                   |  |  |  |  |  '--|----------------> moveq #15,d0
    37ec:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.l d1,d0
    37ee:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  asr.l #4,d0
    37f0:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  addq.w #1,d0
    37f2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    37f6:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 50(sp),d3
    37fa:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    37fe:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.w d2,d2
    3800:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3804:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,48(sp)
    3808:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    380c:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    3810:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  moveq #12,d0
    3812:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  lsl.w d0,d6
    3814:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,76(sp)
    if( destinationtype != SCREEN)
    3818:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  cmpi.w #1,52(sp)
    381e:	|  |  |  |  |  |  |                                   |  |  |  |  |     '----------------- bne.w 34fc <CstScaleSprite+0x5f4>
    extrawords = 1;
    3822:	|  |  |  |  |  |  |                                   |  |  |  |  '----------------------> moveq #1,d2
    3824:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w #-1,50(sp)
    382a:	|  |  |  |  |  |  |                                   |  |  |  |                           moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    382c:	|  |  |  |  |  |  |                                   |  |  |  |                           suba.l a4,a4
    cutwordssource = 0;
    382e:	|  |  |  |  |  |  |                                   |  |  |  |                           clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3830:	|  |  |  |  |  |  |                                   |  |  |  |                           move.l 1cd2e <winWidth>,d0
    3836:	|  |  |  |  |  |  |                                   |  |  |  |                           lsr.l #3,d0
    3838:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w d7,d4
    383a:	|  |  |  |  |  |  |                                   |  |  |  |                           add.w d0,d4
    383c:	|  |  |  |  |  |  |                                   |  |  |  |                           tst.l d1
    383e:	|  |  |  |  |  |  +-----------------------------------|--|--|--|-------------------------- bge.w 30fe <CstScaleSprite+0x1f6>
    3842:	|  |  |  |  |  +--|-----------------------------------|--|--|--|-------------------------- bra.w 3646 <CstScaleSprite+0x73e>
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3846:	|  |  |  '--|--|--|-----------------------------------|--|--|--|-------------------------> moveq #15,d0
    3848:	|  |  |     |  |  |                                   |  |  |  |                           add.l d1,d0
    384a:	|  |  |     |  |  |                                   |  |  |  |                           asr.l #4,d0
    384c:	|  |  |     |  |  |                                   |  |  |  |                           movea.w 58(sp),a1
    3850:	|  |  |     |  |  |                                   |  |  |  |                           adda.w d0,a1
    3852:	|  |  |     |  |  |                                   |  |  |  |                           move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3856:	|  |  |     |  |  |                                   |  |  |  |                           move.w 50(sp),d3
    385a:	|  |  |     |  |  |                                   |  |  |  |                           move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    385e:	|  |  |     |  |  |                                   |  |  |  |                           add.w d2,d2
    3860:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,78(sp)
    3864:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3868:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,48(sp)
    386c:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,14(a0)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3870:	|  |  |     |  |  |                                   |  |  |  |                           move.w 58(sp),d7
    3874:	|  |  |     |  |  |                                   |  |  |  |                           add.w d7,d7
  custom->bltcon0 = bltcon0;
    3876:	|  |  |     |  |  |                                   |  |  |  |                           move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    387c:	|  |  |     |  |  |                                   |  |  |  |                           move.w 76(sp),d2
    3880:	|  |  |     |  |  |                                   |  |  |  |                           moveq #12,d0
    3882:	|  |  |     |  |  |                                   |  |  |  |                           lsl.w d0,d2
    3884:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,76(sp)
    if( destinationtype != SCREEN)
    3888:	|  |  |     |  |  |                                   |  |  |  |                           cmpi.w #1,52(sp)
    388e:	|  |  |     '--|--|-----------------------------------|--|--|--|-------------------------- bne.w 3094 <CstScaleSprite+0x18c>
    3892:	|  |  +--------|--|-----------------------------------|--|--|--|-------------------------- bra.s 38b6 <CstScaleSprite+0x9ae>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3894:	|  |  |        |  |                                   |  '--|--|-------------------------> moveq #15,d0
    3896:	|  |  |        |  |                                   |     |  |                           add.l d1,d0
    3898:	|  |  |        |  |                                   |     |  |                           asr.l #4,d0
    389a:	|  |  |        |  |                                   |     |  |                           add.w 56(sp),d0
    389e:	|  |  |        |  |                                   |     |  |                           add.w d2,d0
    38a0:	|  |  |        |  |                                   |     |  |                           move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    38a4:	|  |  |        |  |                                   |     |  |                           move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    38a8:	|  |  |        |  |                                   |     |  |                           clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    38ac:	|  |  |        |  |                                   |     |  |                           move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    38b0:	|  |  |        |  |                                   |     |  |                           suba.l a4,a4
    38b2:	|  |  |        |  |                                   '-----|--|-------------------------- bra.w 3418 <CstScaleSprite+0x510>
    38b6:	|  |  '--------|--|-----------------------------------------|--|-------------------------> move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    38bc:	|  |           |  |                                         |  |                           clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    38be:	|  |           |  |                                         |  |                           move.l 1cd2e <winWidth>,d0
    38c4:	|  |           |  |                                         |  |                           lsr.l #3,d0
    38c6:	|  |           |  |                                         |  |                           move.w d7,d4
    38c8:	|  |           |  |                                         |  |                           add.w d0,d4
    38ca:	|  |           |  |                                         |  |                           tst.l d1
    38cc:	|  |           |  '-----------------------------------------|--|-------------------------- bge.w 30fe <CstScaleSprite+0x1f6>
    38d0:	|  |           '--------------------------------------------|--|-------------------------- bra.w 3646 <CstScaleSprite+0x73e>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    38d4:	|  |                                                        |  '-------------------------> moveq #15,d0
    38d6:	|  |                                                        |                              add.l d1,d0
    38d8:	|  |                                                        |                              asr.l #4,d0
    38da:	|  |                                                        |                              addq.w #1,d0
    38dc:	|  |                                                        |                              move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    38e0:	|  |                                                        |                              move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    38e4:	|  |                                                        |                              move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    38e8:	|  |                                                        |                              move.w 48(sp),14(a0)
    38ee:	|  |                                                        |                              move.w #-1,50(sp)
    38f4:	|  |                                                        |                              moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    38f6:	|  |                                                        |                              suba.l a4,a4
    cutwordssource = 0;
    38f8:	|  |                                                        |                              clr.w d6
    extrawords = 1;
    38fa:	|  |                                                        |                              moveq #1,d2
    38fc:	|  |                                                        '----------------------------- bra.w 3554 <CstScaleSprite+0x64c>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3900:	|  '-------------------------------------------------------------------------------------> moveq #15,d0
    3902:	|                                                                                          add.l d1,d0
    3904:	|                                                                                          asr.l #4,d0
    3906:	|                                                                                          movea.w 58(sp),a1
    390a:	|                                                                                          adda.w d0,a1
    390c:	|                                                                                          move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3910:	|                                                                                          move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3914:	|                                                                                          move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    391a:	|                                                                                          move.w 48(sp),14(a0)
    3920:	|                                                                                          move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3926:	|                                                                                          clr.w d2
    3928:	'----------------------------------------------------------------------------------------- bra.w 30ec <CstScaleSprite+0x1e4>

0000392c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    392c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    392e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3934:	move.l 8(sp),d0
    3938:	movea.l (sp),a0
    393a:	move.l d0,128(a0)
}
    393e:	nop
    3940:	addq.l #4,sp
    3942:	rts

00003944 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3944:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3948:	move.l 1cd06 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3950:	move.l 1cd0a <CstDrawBuffer>,d0
    3956:	move.l d0,1cd06 <CstViewBuffer>
  CstDrawBuffer = tmp;
    395c:	move.l 16(sp),1cd0a <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3964:	move.l 1cd0e <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    396c:	move.l 1cd12 <CstCleanupQueueDrawBuffer>,d0
    3972:	move.l d0,1cd0e <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3978:	move.l 12(sp),1cd12 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3980:	move.l 1cd02 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3988:	move.l 1cd06 <CstViewBuffer>,d0
    398e:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3992:	move.l 4(sp),d0
    3996:	clr.w d0
    3998:	swap d0
    399a:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    399e:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    39a2:	movea.w #118,a0
    39a6:	adda.l 8(sp),a0
    39aa:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    39ac:	movea.w #114,a0
    39b0:	adda.l 8(sp),a0
    39b4:	move.w 2(sp),(a0)

  ptr +=  40*256;
    39b8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39c0:	move.l 4(sp),d0
    39c4:	clr.w d0
    39c6:	swap d0
    39c8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39cc:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    39d0:	movea.w #126,a0
    39d4:	adda.l 8(sp),a0
    39d8:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    39da:	movea.w #122,a0
    39de:	adda.l 8(sp),a0
    39e2:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    39e6:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39ee:	move.l 4(sp),d0
    39f2:	clr.w d0
    39f4:	swap d0
    39f6:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39fa:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    39fe:	movea.l 8(sp),a0
    3a02:	lea 134(a0),a0
    3a06:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3a08:	movea.l 8(sp),a0
    3a0c:	lea 130(a0),a0
    3a10:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3a14:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a1c:	move.l 4(sp),d0
    3a20:	clr.w d0
    3a22:	swap d0
    3a24:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a28:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3a2c:	movea.l 8(sp),a0
    3a30:	lea 142(a0),a0
    3a34:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3a36:	movea.l 8(sp),a0
    3a3a:	lea 138(a0),a0
    3a3e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3a42:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a4a:	move.l 4(sp),d0
    3a4e:	clr.w d0
    3a50:	swap d0
    3a52:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a56:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3a5a:	movea.l 8(sp),a0
    3a5e:	lea 150(a0),a0
    3a62:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3a64:	movea.l 8(sp),a0
    3a68:	lea 146(a0),a0
    3a6c:	move.w 2(sp),(a0)

}
    3a70:	nop
    3a72:	lea 20(sp),sp
    3a76:	rts

00003a78 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3a78:	          lea -68(sp),sp
    3a7c:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3a7e:	          pea 1846c <PutChar+0x38a>
    3a84:	          jsr 17640 <KPrintF>
    3a8a:	          addq.l #4,sp

  width = width / 8;
    3a8c:	          move.l 76(sp),d0
    3a90:	      ,-- bpl.s 3a94 <CstReserveBackdrop+0x1c>
    3a92:	      |   addq.l #7,d0
    3a94:	      '-> asr.l #3,d0
    3a96:	          move.l d0,76(sp)

  if( width < 40) 
    3a9a:	          moveq #39,d0
    3a9c:	          cmp.l 76(sp),d0
    3aa0:	      ,-- blt.s 3ab6 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3aa2:	      |   pea 18486 <PutChar+0x3a4>
    3aa8:	      |   jsr 17640 <KPrintF>
    3aae:	      |   addq.l #4,sp
    return FALSE;
    3ab0:	      |   clr.w d0
    3ab2:	,-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3ab6:	|     '-> pea 184c4 <PutChar+0x3e2>
    3abc:	|         jsr 17640 <KPrintF>
    3ac2:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3ac4:	|         move.l 76(sp),-(sp)
    3ac8:	|         jsr 10ca <CstCreateCopperlist>
    3ace:	|         addq.l #4,sp
    3ad0:	|         move.l d0,1cd02 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3ad6:	|         pea 184e4 <PutChar+0x402>
    3adc:	|         jsr 17640 <KPrintF>
    3ae2:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3ae4:	|         move.l 76(sp),d1
    3ae8:	|         move.l 80(sp),d0
    3aec:	|         muls.w d1,d0
    3aee:	|         move.w d0,1ccf8 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3af4:	|         move.w 1ccf8 <CstBackdropSizePlane>,d1
    3afa:	|         move.w d1,d0
    3afc:	|         add.w d0,d0
    3afe:	|         add.w d0,d0
    3b00:	|         add.w d1,d0
    3b02:	|         move.w d0,1ccf6 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3b08:	|         move.w 1ccf6 <CstBackdropSize>,d0
    3b0e:	|         move.w d0,d0
    3b10:	|         andi.l #65535,d0
    3b16:	|         move.l d0,60(sp)
    3b1a:	|         moveq #2,d1
    3b1c:	|         move.l d1,56(sp)
    3b20:	|         move.l 1cdda <SysBase>,d0
    3b26:	|         movea.l d0,a6
    3b28:	|         move.l 60(sp),d0
    3b2c:	|         move.l 56(sp),d1
    3b30:	|         jsr -684(a6)
    3b34:	|         move.l d0,52(sp)
    3b38:	|         move.l 52(sp),d0
    3b3c:	|         move.l d0,1ccfa <CstBackDrop>
  if( !CstBackDrop)
    3b42:	|         move.l 1ccfa <CstBackDrop>,d0
    3b48:	|     ,-- bne.s 3b5e <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3b4a:	|     |   pea 1850b <PutChar+0x429>
    3b50:	|     |   jsr 17640 <KPrintF>
    3b56:	|     |   addq.l #4,sp
    return FALSE;  
    3b58:	|     |   clr.w d0
    3b5a:	+-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3b5e:	|     '-> pea 18543 <PutChar+0x461>
    3b64:	|         jsr 17640 <KPrintF>
    3b6a:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3b6c:	|         move.l 1ccfa <CstBackDrop>,68(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3b74:	|         clr.l 64(sp)
    3b78:	|     ,-- bra.s 3b8e <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3b7a:	|  ,--|-> move.l 68(sp),d0
    3b7e:	|  |  |   move.l d0,d1
    3b80:	|  |  |   addq.l #4,d1
    3b82:	|  |  |   move.l d1,68(sp)
    3b86:	|  |  |   movea.l d0,a0
    3b88:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3b8a:	|  |  |   addq.l #1,64(sp)
    3b8e:	|  |  '-> move.w 1ccf6 <CstBackdropSize>,d0
    3b94:	|  |      lsr.w #2,d0
    3b96:	|  |      move.w d0,d0
    3b98:	|  |      andi.l #65535,d0
    3b9e:	|  |      cmp.l 64(sp),d0
    3ba2:	|  '----- bgt.s 3b7a <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3ba4:	|         move.w 1ccf6 <CstBackdropSize>,d0
    3baa:	|         move.w d0,d0
    3bac:	|         andi.l #65535,d0
    3bb2:	|         move.l 76(sp),d1
    3bb6:	|         add.l d1,d1
    3bb8:	|         add.l d1,d0
    3bba:	|         move.l d0,48(sp)
    3bbe:	|         moveq #2,d0
    3bc0:	|         move.l d0,44(sp)
    3bc4:	|         move.l 1cdda <SysBase>,d0
    3bca:	|         movea.l d0,a6
    3bcc:	|         move.l 48(sp),d0
    3bd0:	|         move.l 44(sp),d1
    3bd4:	|         jsr -684(a6)
    3bd8:	|         move.l d0,40(sp)
    3bdc:	|         move.l 40(sp),d0
    3be0:	|         move.l d0,1cd0a <CstDrawBuffer>
  if( !CstDrawBuffer)
    3be6:	|         move.l 1cd0a <CstDrawBuffer>,d0
    3bec:	|     ,-- bne.s 3c02 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3bee:	|     |   pea 18569 <PutChar+0x487>
    3bf4:	|     |   jsr 17640 <KPrintF>
    3bfa:	|     |   addq.l #4,sp
    return FALSE;  
    3bfc:	|     |   clr.w d0
    3bfe:	+-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3c02:	|     '-> pea 185a3 <PutChar+0x4c1>
    3c08:	|         jsr 17640 <KPrintF>
    3c0e:	|         addq.l #4,sp
    
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3c10:	|         move.w 1ccf6 <CstBackdropSize>,d0
    3c16:	|         move.w d0,d0
    3c18:	|         andi.l #65535,d0
    3c1e:	|         move.l 76(sp),d1
    3c22:	|         add.l d1,d1
    3c24:	|         add.l d1,d0
    3c26:	|         move.l d0,36(sp)
    3c2a:	|         moveq #2,d1
    3c2c:	|         move.l d1,32(sp)
    3c30:	|         move.l 1cdda <SysBase>,d0
    3c36:	|         movea.l d0,a6
    3c38:	|         move.l 36(sp),d0
    3c3c:	|         move.l 32(sp),d1
    3c40:	|         jsr -684(a6)
    3c44:	|         move.l d0,28(sp)
    3c48:	|         move.l 28(sp),d0
    3c4c:	|         move.l d0,1cd06 <CstViewBuffer>
  if( !CstViewBuffer)
    3c52:	|         move.l 1cd06 <CstViewBuffer>,d0
    3c58:	|     ,-- bne.s 3c6e <CstReserveBackdrop+0x1f6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3c5a:	|     |   pea 185cb <PutChar+0x4e9>
    3c60:	|     |   jsr 17640 <KPrintF>
    3c66:	|     |   addq.l #4,sp
    return FALSE;  
    3c68:	|     |   clr.w d0
    3c6a:	+-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3c6e:	|     '-> pea 18605 <PutChar+0x523>
    3c74:	|         jsr 17640 <KPrintF>
    3c7a:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3c7c:	|         move.l 1cd0a <CstDrawBuffer>,d1
    3c82:	|         move.l 76(sp),d0
    3c86:	|     ,-- bpl.s 3c8a <CstReserveBackdrop+0x212>
    3c88:	|     |   addq.l #3,d0
    3c8a:	|     '-> asr.l #2,d0
    3c8c:	|         add.l d0,d0
    3c8e:	|         add.l d0,d0
    3c90:	|         add.l d1,d0
    3c92:	|         move.l d0,1cd0a <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3c98:	|         move.l 1cd06 <CstViewBuffer>,d1
    3c9e:	|         move.l 76(sp),d0
    3ca2:	|     ,-- bpl.s 3ca6 <CstReserveBackdrop+0x22e>
    3ca4:	|     |   addq.l #3,d0
    3ca6:	|     '-> asr.l #2,d0
    3ca8:	|         add.l d0,d0
    3caa:	|         add.l d0,d0
    3cac:	|         add.l d1,d0
    3cae:	|         move.l d0,1cd06 <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3cb4:	|         move.l #5200,24(sp)
    3cbc:	|         moveq #2,d0
    3cbe:	|         move.l d0,20(sp)
    3cc2:	|         move.l 1cdda <SysBase>,d0
    3cc8:	|         movea.l d0,a6
    3cca:	|         move.l 24(sp),d0
    3cce:	|         move.l 20(sp),d1
    3cd2:	|         jsr -684(a6)
    3cd6:	|         move.l d0,16(sp)
    3cda:	|         move.l 16(sp),d0
    3cde:	|         move.l d0,1cd22 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3ce4:	|         move.l #5600,12(sp)
    3cec:	|         moveq #2,d1
    3cee:	|         move.l d1,8(sp)
    3cf2:	|         move.l 1cdda <SysBase>,d0
    3cf8:	|         movea.l d0,a6
    3cfa:	|         move.l 12(sp),d0
    3cfe:	|         move.l 8(sp),d1
    3d02:	|         jsr -684(a6)
    3d06:	|         move.l d0,4(sp)
    3d0a:	|         move.l 4(sp),d0
    3d0e:	|         move.l d0,1cd26 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3d14:	|         move.l 1ccfa <CstBackDrop>,d0
    3d1a:	|         clr.l -(sp)
    3d1c:	|         pea 5 <_start+0x5>
    3d20:	|         pea 100 <copyString+0x48>
    3d24:	|         pea 140 <decodeFilename+0x28>
    3d28:	|         pea 1862d <PutChar+0x54b>
    3d2e:	|         move.l d0,-(sp)
    3d30:	|         jsr 17728 <debug_register_bitmap>
    3d36:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3d3a:	|         move.l 80(sp),d0
    3d3e:	|         movea.w d0,a1
    3d40:	|         move.l 76(sp),d0
    3d44:	|         lsl.w #3,d0
    3d46:	|         movea.w d0,a0
    3d48:	|         move.l 1cd0a <CstDrawBuffer>,d0
    3d4e:	|         clr.l -(sp)
    3d50:	|         pea 5 <_start+0x5>
    3d54:	|         move.l a1,-(sp)
    3d56:	|         move.l a0,-(sp)
    3d58:	|         pea 1863d <PutChar+0x55b>
    3d5e:	|         move.l d0,-(sp)
    3d60:	|         jsr 17728 <debug_register_bitmap>
    3d66:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3d6a:	|         move.l 80(sp),d0
    3d6e:	|         movea.w d0,a1
    3d70:	|         move.l 76(sp),d0
    3d74:	|         lsl.w #3,d0
    3d76:	|         movea.w d0,a0
    3d78:	|         move.l 1cd06 <CstViewBuffer>,d0
    3d7e:	|         clr.l -(sp)
    3d80:	|         pea 5 <_start+0x5>
    3d84:	|         move.l a1,-(sp)
    3d86:	|         move.l a0,-(sp)
    3d88:	|         pea 1864c <PutChar+0x56a>
    3d8e:	|         move.l d0,-(sp)
    3d90:	|         jsr 17728 <debug_register_bitmap>
    3d96:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3d9a:	|         move.l 1cd02 <CstCopperList>,d0
    3da0:	|     ,-- beq.s 3db2 <CstReserveBackdrop+0x33a>
    3da2:	|     |   move.l 1cd0a <CstDrawBuffer>,d0
    3da8:	|     +-- beq.s 3db2 <CstReserveBackdrop+0x33a>
    3daa:	|     |   move.l 1cd06 <CstViewBuffer>,d0
    3db0:	|  ,--|-- bne.s 3dc4 <CstReserveBackdrop+0x34c>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3db2:	|  |  '-> pea 1865b <PutChar+0x579>
    3db8:	|  |      jsr 17640 <KPrintF>
    3dbe:	|  |      addq.l #4,sp
    return FALSE;
    3dc0:	|  |      clr.w d0
    3dc2:	+--|----- bra.s 3df2 <CstReserveBackdrop+0x37a>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3dc4:	|  '----> pea 18688 <PutChar+0x5a6>
    3dca:	|         jsr 17640 <KPrintF>
    3dd0:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3dd2:	|         move.l 1cd02 <CstCopperList>,d0
    3dd8:	|         move.l d0,-(sp)
    3dda:	|         jsr 392c <CstSetCl>
    3de0:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3de2:	|         pea 186af <PutChar+0x5cd>
    3de8:	|         jsr 17640 <KPrintF>
    3dee:	|         addq.l #4,sp
  return TRUE;
    3df0:	|         moveq #1,d0

}
    3df2:	'-------> movea.l (sp)+,a6
    3df4:	          lea 68(sp),sp
    3df8:	          rts

00003dfa <CstUnfreeze>:

void CstUnfreeze() {
    3dfa:	       lea -52(sp),sp
    3dfe:	       move.l a6,-(sp)
    3e00:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3e02:	       pea 186d2 <PutChar+0x5f0>
    3e08:	       jsr 17640 <KPrintF>
    3e0e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3e10:	       move.l 1cd2e <winWidth>,d0
    3e16:	       lsr.l #3,d0
    3e18:	       move.l d0,d1
    3e1a:	       move.l 1cd32 <winHeight>,d0
    3e20:	       move.l d0,d0
    3e22:	       muls.w d0,d1
    3e24:	       move.w d1,d0
    3e26:	       add.w d0,d0
    3e28:	       add.w d0,d0
    3e2a:	       move.w d0,d2
    3e2c:	       add.w d1,d2
    3e2e:	       move.w d2,46(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3e32:	       move.l #14675968,42(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3e3a:	       move.l 1cd32 <winHeight>,d0
    3e40:	       move.l d0,d0
    3e42:	       movea.w d0,a1
    3e44:	       move.l 1cd2e <winWidth>,d0
    3e4a:	       move.l d0,d0
    3e4c:	       movea.w d0,a0
    3e4e:	       move.l 1ccfe <CstBackDropBackup>,d0
    3e54:	       clr.l -(sp)
    3e56:	       pea 5 <_start+0x5>
    3e5a:	       move.l a1,-(sp)
    3e5c:	       move.l a0,-(sp)
    3e5e:	       pea 182ef <PutChar+0x20d>
    3e64:	       move.l d0,-(sp)
    3e66:	       jsr 17728 <debug_register_bitmap>
    3e6c:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3e70:	       move.l 1ccfe <CstBackDropBackup>,56(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3e78:	       move.l 1ccfa <CstBackDrop>,52(sp)
  for(int i=0;i<size/4;i++) 
    3e80:	       clr.l 48(sp)
    3e84:	   ,-- bra.s 3eaa <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3e86:	,--|-> move.l 56(sp),d1
    3e8a:	|  |   move.l d1,d0
    3e8c:	|  |   addq.l #4,d0
    3e8e:	|  |   move.l d0,56(sp)
    3e92:	|  |   move.l 52(sp),d0
    3e96:	|  |   move.l d0,d2
    3e98:	|  |   addq.l #4,d2
    3e9a:	|  |   move.l d2,52(sp)
    3e9e:	|  |   movea.l d1,a0
    3ea0:	|  |   move.l (a0),d1
    3ea2:	|  |   movea.l d0,a0
    3ea4:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3ea6:	|  |   addq.l #1,48(sp)
    3eaa:	|  '-> move.w 46(sp),d0
    3eae:	|      lsr.w #2,d0
    3eb0:	|      move.w d0,d0
    3eb2:	|      andi.l #65535,d0
    3eb8:	|      cmp.l 48(sp),d0
    3ebc:	'----- bgt.s 3e86 <CstUnfreeze+0x8c>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3ebe:	       move.l 1cd12 <CstCleanupQueueDrawBuffer>,38(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    3ec6:	       moveq #20,d0
    3ec8:	       move.l d0,34(sp)
    3ecc:	       clr.l 30(sp)
    3ed0:	       move.l 1cdda <SysBase>,d0
    3ed6:	       movea.l d0,a6
    3ed8:	       move.l 34(sp),d0
    3edc:	       move.l 30(sp),d1
    3ee0:	       jsr -684(a6)
    3ee4:	       move.l d0,26(sp)
    3ee8:	       move.l 26(sp),d0
    3eec:	       move.l d0,1cd12 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    3ef2:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    3ef8:	       move.l 38(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    3efe:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    3f04:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    3f06:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    3f0c:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    3f10:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    3f16:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    3f1a:	       move.l 1cd2e <winWidth>,d0
    3f20:	       lsr.l #4,d0
    3f22:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    3f28:	       move.l d0,d0
    3f2a:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    3f2e:	       move.l 1cd32 <winHeight>,d0
    3f34:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    3f3a:	       move.l d0,d0
    3f3c:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3f40:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    3f46:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    3f4a:	       movea.l 1cd12 <CstCleanupQueueDrawBuffer>,a0
    3f50:	       clr.w 14(a0)
  next = CstCleanupQueueViewBuffer;
    3f54:	       move.l 1cd0e <CstCleanupQueueViewBuffer>,38(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    3f5c:	       moveq #20,d2
    3f5e:	       move.l d2,22(sp)
    3f62:	       clr.l 18(sp)
    3f66:	       move.l 1cdda <SysBase>,d0
    3f6c:	       movea.l d0,a6
    3f6e:	       move.l 22(sp),d0
    3f72:	       move.l 18(sp),d1
    3f76:	       jsr -684(a6)
    3f7a:	       move.l d0,14(sp)
    3f7e:	       move.l 14(sp),d0
    3f82:	       move.l d0,1cd0e <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    3f88:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    3f8e:	       move.l 38(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    3f94:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    3f9a:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    3f9c:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    3fa2:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    3fa6:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    3fac:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    3fb0:	       move.l 1cd2e <winWidth>,d0
    3fb6:	       lsr.l #4,d0
    3fb8:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    3fbe:	       move.l d0,d0
    3fc0:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    3fc4:	       move.l 1cd32 <winHeight>,d0
    3fca:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    3fd0:	       move.l d0,d0
    3fd2:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    3fd6:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    3fdc:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0;  
    3fe0:	       movea.l 1cd0e <CstCleanupQueueViewBuffer>,a0
    3fe6:	       clr.w 14(a0)
  
  if( CstBackDropBackup) {
    3fea:	       move.l 1ccfe <CstBackDropBackup>,d0
    3ff0:	   ,-- beq.s 4018 <CstUnfreeze+0x21e>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3ff2:	   |   pea 186fd <PutChar+0x61b>
    3ff8:	   |   jsr 17640 <KPrintF>
    3ffe:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    4000:	   |   move.l 1ccfe <CstBackDropBackup>,10(sp)
    4008:	   |   move.l 1cdda <SysBase>,d0
    400e:	   |   movea.l d0,a6
    4010:	   |   movea.l 10(sp),a1
    4014:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    4018:	   '-> pea 18721 <PutChar+0x63f>
    401e:	       jsr 17640 <KPrintF>
    4024:	       addq.l #4,sp

}
    4026:	       nop
    4028:	       move.l (sp)+,d2
    402a:	       movea.l (sp)+,a6
    402c:	       lea 52(sp),sp
    4030:	       rts

00004032 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    4032:	       lea -28(sp),sp
    4036:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    403a:	       move.l 52(sp),-(sp)
    403e:	       jsr 15c4a <stringWidth>
    4044:	       addq.l #4,sp
    4046:	       asr.l #1,d0
    4048:	       move.l d0,-(sp)
    404a:	       jsr 17a72 <__floatsisf>
    4050:	       addq.l #4,sp
    4052:	       move.l d0,d1
    4054:	       move.l 1c776 <cameraZoom>,d0
    405a:	       move.l d0,-(sp)
    405c:	       move.l d1,-(sp)
    405e:	       jsr 17928 <__divsf3>
    4064:	       addq.l #8,sp
    4066:	       move.l d0,-(sp)
    4068:	       jsr 17a0a <__fixsfsi>
    406e:	       addq.l #4,sp
    4070:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    4074:	       move.l 56(sp),d0
    4078:	       sub.l 44(sp),d0
    407c:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4080:	       move.l 56(sp),d0
    4084:	       add.l 44(sp),d0
    4088:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    408c:	       moveq #12,d0
    408e:	       move.l d0,32(sp)
    4092:	       clr.l 28(sp)
    4096:	       move.l 1cdda <SysBase>,d0
    409c:	       movea.l d0,a6
    409e:	       move.l 32(sp),d0
    40a2:	       move.l 28(sp),d1
    40a6:	       jsr -684(a6)
    40aa:	       move.l d0,24(sp)
    40ae:	       move.l 24(sp),d0
    40b2:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    40b6:	       movea.l 1cd2a <speech>,a0
    40bc:	       move.l 4(a0),d0
    40c0:	       movea.l 20(sp),a0
    40c4:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    40c8:	       move.l 52(sp),-(sp)
    40cc:	       jsr b8 <copyString>
    40d2:	       addq.l #4,sp
    40d4:	       movea.l 20(sp),a0
    40d8:	       move.l d0,(a0)
	newLine -> x = xx1;
    40da:	       movea.l 20(sp),a0
    40de:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    40e4:	       movea.l 1cd2a <speech>,a0
    40ea:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    40f0:	       moveq #4,d0
    40f2:	       cmp.l 40(sp),d0
    40f6:	   ,-- blt.s 4118 <addSpeechLine+0xe6>
    40f8:	   |   movea.l 60(sp),a0
    40fc:	   |   move.l (a0),d1
    40fe:	   |   moveq #5,d0
    4100:	   |   sub.l 40(sp),d0
    4104:	   |   cmp.l d1,d0
    4106:	   +-- ble.s 4118 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    4108:	   |   moveq #5,d0
    410a:	   |   sub.l 40(sp),d0
    410e:	   |   movea.l 60(sp),a0
    4112:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    4114:	,--|-- bra.w 4244 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4118:	|  '-> move.l 36(sp),-(sp)
    411c:	|      jsr 17a72 <__floatsisf>
    4122:	|      addq.l #4,sp
    4124:	|      move.l d0,d2
    4126:	|      move.l 1cd2e <winWidth>,d0
    412c:	|      move.l d0,-(sp)
    412e:	|      jsr 17a9a <__floatunsisf>
    4134:	|      addq.l #4,sp
    4136:	|      move.l d0,d1
    4138:	|      move.l 1c776 <cameraZoom>,d0
    413e:	|      move.l d0,-(sp)
    4140:	|      move.l d1,-(sp)
    4142:	|      jsr 17928 <__divsf3>
    4148:	|      addq.l #8,sp
    414a:	|      move.l #1084227584,-(sp)
    4150:	|      move.l d0,-(sp)
    4152:	|      jsr 17d66 <__subsf3>
    4158:	|      addq.l #8,sp
    415a:	|      move.l d0,-(sp)
    415c:	|      move.l d2,-(sp)
    415e:	|      jsr 17b5a <__gesf2>
    4164:	|      addq.l #8,sp
    4166:	|      tst.l d0
    4168:	|  ,-- bge.s 416e <addSpeechLine+0x13c>
}
    416a:	+--|-- bra.w 4244 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    416e:	|  '-> movea.l 60(sp),a0
    4172:	|      move.l (a0),d0
    4174:	|      move.l d0,-(sp)
    4176:	|      jsr 17a72 <__floatsisf>
    417c:	|      addq.l #4,sp
    417e:	|      move.l d0,-(sp)
    4180:	|      jsr 17994 <__extendsfdf2>
    4186:	|      addq.l #4,sp
    4188:	|      move.l d0,d4
    418a:	|      move.l d1,d5
    418c:	|      move.l 1cd2e <winWidth>,d0
    4192:	|      move.l d0,-(sp)
    4194:	|      jsr 17a9a <__floatunsisf>
    419a:	|      addq.l #4,sp
    419c:	|      move.l d0,d1
    419e:	|      move.l 1c776 <cameraZoom>,d0
    41a4:	|      move.l d0,-(sp)
    41a6:	|      move.l d1,-(sp)
    41a8:	|      jsr 17928 <__divsf3>
    41ae:	|      addq.l #8,sp
    41b0:	|      move.l d0,-(sp)
    41b2:	|      jsr 17994 <__extendsfdf2>
    41b8:	|      addq.l #4,sp
    41ba:	|      clr.l -(sp)
    41bc:	|      move.l #1075052544,-(sp)
    41c2:	|      move.l d1,-(sp)
    41c4:	|      move.l d0,-(sp)
    41c6:	|      jsr 17d04 <__subdf3>
    41cc:	|      lea 16(sp),sp
    41d0:	|      move.l d0,d2
    41d2:	|      move.l d1,d3
    41d4:	|      move.l 36(sp),-(sp)
    41d8:	|      jsr 17a32 <__floatsidf>
    41de:	|      addq.l #4,sp
    41e0:	|      move.l d1,-(sp)
    41e2:	|      move.l d0,-(sp)
    41e4:	|      move.l d3,-(sp)
    41e6:	|      move.l d2,-(sp)
    41e8:	|      jsr 17d04 <__subdf3>
    41ee:	|      lea 16(sp),sp
    41f2:	|      move.l d1,-(sp)
    41f4:	|      move.l d0,-(sp)
    41f6:	|      move.l d5,-(sp)
    41f8:	|      move.l d4,-(sp)
    41fa:	|      jsr 17b90 <__gtdf2>
    4200:	|      lea 16(sp),sp
    4204:	|      tst.l d0
    4206:	|  ,-- bgt.s 420a <addSpeechLine+0x1d8>
}
    4208:	+--|-- bra.s 4244 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    420a:	|  '-> move.l 1cd2e <winWidth>,d0
    4210:	|      move.l d0,-(sp)
    4212:	|      jsr 17a9a <__floatunsisf>
    4218:	|      addq.l #4,sp
    421a:	|      move.l d0,d1
    421c:	|      move.l 1c776 <cameraZoom>,d0
    4222:	|      move.l d0,-(sp)
    4224:	|      move.l d1,-(sp)
    4226:	|      jsr 17928 <__divsf3>
    422c:	|      addq.l #8,sp
    422e:	|      move.l d0,-(sp)
    4230:	|      jsr 17a0a <__fixsfsi>
    4236:	|      addq.l #4,sp
    4238:	|      subq.l #5,d0
    423a:	|      sub.l 36(sp),d0
    423e:	|      movea.l 60(sp),a0
    4242:	|      move.l d0,(a0)
}
    4244:	'----> nop
    4246:	       movem.l (sp)+,d2-d5/a6
    424a:	       lea 28(sp),sp
    424e:	       rts

00004250 <initSpeech>:


void initSpeech () {
    4250:	       lea -12(sp),sp
    4254:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    4256:	       moveq #20,d0
    4258:	       move.l d0,12(sp)
    425c:	       clr.l 8(sp)
    4260:	       move.l 1cdda <SysBase>,d0
    4266:	       movea.l d0,a6
    4268:	       move.l 12(sp),d0
    426c:	       move.l 8(sp),d1
    4270:	       jsr -684(a6)
    4274:	       move.l d0,4(sp)
    4278:	       move.l 4(sp),d0
    427c:	       move.l d0,1cd2a <speech>
	if (speech) {
    4282:	       move.l 1cd2a <speech>,d0
    4288:	,----- beq.s 42b4 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    428a:	|      movea.l 1cd2a <speech>,a0
    4290:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4292:	|      movea.l 1cd2a <speech>,a0
    4298:	|      clr.l 4(a0)
		speech -> speechY = 0;
    429c:	|      movea.l 1cd2a <speech>,a0
    42a2:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    42a6:	|      movea.l 1cd2a <speech>,a0
    42ac:	|      moveq #-1,d0
    42ae:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    42b2:	|  ,-- bra.s 42c2 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    42b4:	'--|-> pea 18737 <PutChar+0x655>
    42ba:	   |   jsr 17640 <KPrintF>
    42c0:	   |   addq.l #4,sp
}
    42c2:	   '-> nop
    42c4:	       movea.l (sp)+,a6
    42c6:	       lea 12(sp),sp
    42ca:	       rts

000042cc <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    42cc:	       movea.l 1cd2a <speech>,a0
    42d2:	       move.l 4(a0),d0
    42d6:	,----- beq.s 42e4 <isThereAnySpeechGoingOn+0x18>
    42d8:	|      movea.l 1cd2a <speech>,a0
    42de:	|      move.l 16(a0),d0
    42e2:	|  ,-- bra.s 42e6 <isThereAnySpeechGoingOn+0x1a>
    42e4:	'--|-> moveq #-1,d0
}
    42e6:	   '-> rts

000042e8 <killAllSpeech>:

void killAllSpeech () {
    42e8:	       lea -12(sp),sp
    42ec:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    42ee:	       movea.l 1cd2a <speech>,a0
    42f4:	       move.l 12(a0),d0
    42f8:	       moveq #-1,d1
    42fa:	       cmp.l d0,d1
    42fc:	   ,-- beq.s 430a <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    42fe:	   |   movea.l 1cd2a <speech>,a0
    4304:	   |   moveq #-1,d0
    4306:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    430a:	   '-> movea.l 1cd2a <speech>,a0
    4310:	       move.l (a0),d0
    4312:	,----- beq.w 439e <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    4316:	|      movea.l 1cd2a <speech>,a0
    431c:	|      move.l (a0),d1
    431e:	|      lea -132(sp),sp
    4322:	|      move.l sp,d0
    4324:	|      movea.w #132,a0
    4328:	|      move.l a0,-(sp)
    432a:	|      move.l d1,-(sp)
    432c:	|      move.l d0,-(sp)
    432e:	|      jsr 175f4 <memcpy>
    4334:	|      lea 12(sp),sp
    4338:	|      jsr ae46 <makeSilent>
    433e:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    4342:	|      movea.l 1cd2a <speech>,a0
    4348:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    434a:	+----- bra.s 439e <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    434c:	|  ,-> movea.l 1cd2a <speech>,a0
    4352:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4358:	|  |   movea.l 1cd2a <speech>,a0
    435e:	|  |   movea.l 4(a0),a1
    4362:	|  |   movea.l 1cd2a <speech>,a0
    4368:	|  |   move.l 4(a1),d0
    436c:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4370:	|  |   movea.l 12(sp),a0
    4374:	|  |   move.l (a0),8(sp)
    4378:	|  |   move.l 1cdda <SysBase>,d0
    437e:	|  |   movea.l d0,a6
    4380:	|  |   movea.l 8(sp),a1
    4384:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4388:	|  |   move.l 12(sp),4(sp)
    438e:	|  |   move.l 1cdda <SysBase>,d0
    4394:	|  |   movea.l d0,a6
    4396:	|  |   movea.l 4(sp),a1
    439a:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    439e:	'--|-> movea.l 1cd2a <speech>,a0
    43a4:	   |   move.l 4(a0),d0
    43a8:	   '-- bne.s 434c <killAllSpeech+0x64>
	}
}
    43aa:	       nop
    43ac:	       nop
    43ae:	       movea.l (sp)+,a6
    43b0:	       lea 12(sp),sp
    43b4:	       rts

000043b6 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    43b6:	pea 2 <_start+0x2>
    43ba:	move.l 8(sp),-(sp)
    43be:	jsr 4516 <setFrames>
    43c4:	addq.l #8,sp
}
    43c6:	nop
    43c8:	rts

000043ca <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    43ca:	       lea -52(sp),sp
    43ce:	       move.l a6,-(sp)
    43d0:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    43d2:	       movea.l 64(sp),a0
    43d6:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    43dc:	       move.l 1c74e <speechSpeed>,d0
    43e2:	       move.l 68(sp),-(sp)
    43e6:	       move.l d0,-(sp)
    43e8:	       jsr a46 <putFloat>
    43ee:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    43f0:	       movea.l 64(sp),a0
    43f4:	       move.l 8(a0),d0
    43f8:	       move.l 68(sp),-(sp)
    43fc:	       move.l d0,-(sp)
    43fe:	       jsr 8d0 <put2bytes>
    4404:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    4406:	       movea.l 64(sp),a0
    440a:	       move.l 16(a0),d0
    440e:	       move.l 68(sp),-(sp)
    4412:	       move.l d0,-(sp)
    4414:	       jsr 8d0 <put2bytes>
    441a:	       addq.l #8,sp
		if (sS -> currentTalker) {
    441c:	       movea.l 64(sp),a0
    4420:	       move.l (a0),d0
    4422:	   ,-- beq.s 4466 <saveSpeech+0x9c>
			FPutC (fp, 1);
    4424:	   |   move.l 68(sp),40(sp)
    442a:	   |   moveq #1,d0
    442c:	   |   move.l d0,36(sp)
    4430:	   |   move.l 1cde2 <DOSBase>,d0
    4436:	   |   movea.l d0,a6
    4438:	   |   move.l 40(sp),d1
    443c:	   |   move.l 36(sp),d2
    4440:	   |   jsr -312(a6)
    4444:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4448:	   |   movea.l 64(sp),a0
    444c:	   |   movea.l (a0),a0
    444e:	   |   movea.l 114(a0),a0
    4452:	   |   move.l 4(a0),d0
    4456:	   |   move.l 68(sp),-(sp)
    445a:	   |   move.l d0,-(sp)
    445c:	   |   jsr 8d0 <put2bytes>
    4462:	   |   addq.l #8,sp
    4464:	,--|-- bra.s 44e2 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4466:	|  '-> move.l 68(sp),52(sp)
    446c:	|      clr.l 48(sp)
    4470:	|      move.l 1cde2 <DOSBase>,d0
    4476:	|      movea.l d0,a6
    4478:	|      move.l 52(sp),d1
    447c:	|      move.l 48(sp),d2
    4480:	|      jsr -312(a6)
    4484:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4488:	+----- bra.s 44e2 <saveSpeech+0x118>
			FPutC (fp, 1);
    448a:	|  ,-> move.l 68(sp),16(sp)
    4490:	|  |   moveq #1,d0
    4492:	|  |   move.l d0,12(sp)
    4496:	|  |   move.l 1cde2 <DOSBase>,d0
    449c:	|  |   movea.l d0,a6
    449e:	|  |   move.l 16(sp),d1
    44a2:	|  |   move.l 12(sp),d2
    44a6:	|  |   jsr -312(a6)
    44aa:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    44ae:	|  |   movea.l 56(sp),a0
    44b2:	|  |   move.l (a0),d0
    44b4:	|  |   move.l 68(sp),-(sp)
    44b8:	|  |   move.l d0,-(sp)
    44ba:	|  |   jsr bd8 <writeString>
    44c0:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    44c2:	|  |   movea.l 56(sp),a0
    44c6:	|  |   move.l 8(a0),d0
    44ca:	|  |   move.l 68(sp),-(sp)
    44ce:	|  |   move.l d0,-(sp)
    44d0:	|  |   jsr 8d0 <put2bytes>
    44d6:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    44d8:	|  |   movea.l 56(sp),a0
    44dc:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    44e2:	'--|-> tst.l 56(sp)
    44e6:	   '-- bne.s 448a <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    44e8:	       move.l 68(sp),28(sp)
    44ee:	       clr.l 24(sp)
    44f2:	       move.l 1cde2 <DOSBase>,d0
    44f8:	       movea.l d0,a6
    44fa:	       move.l 28(sp),d1
    44fe:	       move.l 24(sp),d2
    4502:	       jsr -312(a6)
    4506:	       move.l d0,20(sp)
}
    450a:	       nop
    450c:	       move.l (sp)+,d2
    450e:	       movea.l (sp)+,a6
    4510:	       lea 52(sp),sp
    4514:	       rts

00004516 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    4516:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    4518:	movea.l 8(sp),a0
    451c:	movea.l 80(a0),a0
    4520:	move.l (a0),d2
    4522:	movea.l 8(sp),a0
    4526:	movea.l 80(a0),a0
    452a:	move.l 4(a0),d0
    452e:	move.l 12(sp),-(sp)
    4532:	move.l d0,-(sp)
    4534:	jsr 17fcc <__mulsi3>
    453a:	addq.l #8,sp
    453c:	move.l d0,d1
    453e:	movea.l 8(sp),a0
    4542:	move.l 106(a0),d0
    4546:	add.l d1,d0
    4548:	add.l d0,d0
    454a:	add.l d0,d0
    454c:	movea.l d2,a0
    454e:	adda.l d0,a0
    4550:	move.l (a0),d0
    4552:	movea.l 8(sp),a0
    4556:	move.l d0,72(a0)
}
    455a:	nop
    455c:	move.l (sp)+,d2
    455e:	rts

00004560 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4560:	       lea -20(sp),sp
    4564:	       move.l d2,-(sp)
    4566:	       move.l 40(sp),d0
    456a:	       move.w d0,d0
    456c:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4570:	       movea.l 1cd2a <speech>,a0
    4576:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    457c:	       move.l 32(sp),-(sp)
    4580:	       jsr a906 <findPerson>
    4586:	       addq.l #4,sp
    4588:	       move.l d0,16(sp)
    if (thisPerson) {
    458c:	   ,-- beq.s 45b2 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    458e:	   |   movea.w 6(sp),a0
    4592:	   |   move.l a0,-(sp)
    4594:	   |   move.l 40(sp),-(sp)
    4598:	   |   move.l 24(sp),-(sp)
    459c:	   |   move.l 40(sp),-(sp)
    45a0:	   |   jsr 4678 <wrapSpeechPerson>
    45a6:	   |   lea 16(sp),sp
    45aa:	   |   move.l d0,20(sp)
    45ae:	,--|-- bra.w 466c <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    45b2:	|  '-> move.l 32(sp),-(sp)
    45b6:	|      jsr 15e22 <getRegionForObject>
    45bc:	|      addq.l #4,sp
    45be:	|      move.l d0,12(sp)
        if (thisRegion) {
    45c2:	|  ,-- beq.s 462e <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    45c4:	|  |   movea.l 12(sp),a0
    45c8:	|  |   movea.l 28(a0),a0
    45cc:	|  |   move.l 28(a0),d0
    45d0:	|  |   movea.l 12(sp),a0
    45d4:	|  |   movea.l 4(a0),a1
    45d8:	|  |   movea.l 12(sp),a0
    45dc:	|  |   movea.l 28(a0),a0
    45e0:	|  |   move.l 20(a0),d1
    45e4:	|  |   movea.l a1,a0
    45e6:	|  |   suba.l d1,a0
    45e8:	|  |   move.l 1ce94 <cameraY>,d1
    45ee:	|  |   movea.l a0,a1
    45f0:	|  |   suba.l d1,a1
    45f2:	|  |   movea.l 12(sp),a0
    45f6:	|  |   move.l (a0),d2
    45f8:	|  |   movea.l 12(sp),a0
    45fc:	|  |   move.l 8(a0),d1
    4600:	|  |   add.l d2,d1
    4602:	|  |   move.l d1,d2
    4604:	|  |   asr.l #1,d2
    4606:	|  |   move.l 1ce90 <cameraX>,d1
    460c:	|  |   movea.l d2,a0
    460e:	|  |   suba.l d1,a0
    4610:	|  |   move.l 36(sp),-(sp)
    4614:	|  |   move.l d0,-(sp)
    4616:	|  |   move.l a1,-(sp)
    4618:	|  |   move.l a0,-(sp)
    461a:	|  |   move.l 44(sp),-(sp)
    461e:	|  |   jsr 4796 <wrapSpeechXY>
    4624:	|  |   lea 20(sp),sp
    4628:	|  |   move.l d0,20(sp)
    462c:	+--|-- bra.s 466c <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    462e:	|  '-> move.l 32(sp),-(sp)
    4632:	|      jsr d874 <findObjectType>
    4638:	|      addq.l #4,sp
    463a:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    463e:	|      movea.l 8(sp),a0
    4642:	|      move.l 28(a0),d1
    4646:	|      move.l 1cd2e <winWidth>,d0
    464c:	|      lsr.l #1,d0
    464e:	|      move.l 36(sp),-(sp)
    4652:	|      move.l d1,-(sp)
    4654:	|      pea a <_start+0xa>
    4658:	|      move.l d0,-(sp)
    465a:	|      move.l 44(sp),-(sp)
    465e:	|      jsr 4796 <wrapSpeechXY>
    4664:	|      lea 20(sp),sp
    4668:	|      move.l d0,20(sp)
        }
    }
    return i;
    466c:	'----> move.l 20(sp),d0
}
    4670:	       move.l (sp)+,d2
    4672:	       lea 20(sp),sp
    4676:	       rts

00004678 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    4678:	    subq.l #8,sp
    467a:	    movem.l d2-d4,-(sp)
    467e:	    move.l 36(sp),d0
    4682:	    move.w d0,d0
    4684:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    4688:	    movea.l 28(sp),a0
    468c:	    movea.l 114(a0),a0
    4690:	    move.l 28(a0),d2
    4694:	    movea.l 28(sp),a0
    4698:	    move.l 4(a0),d3
    469c:	    move.l 1ce94 <cameraY>,d0
    46a2:	    move.l d0,-(sp)
    46a4:	    jsr 17a72 <__floatsisf>
    46aa:	    addq.l #4,sp
    46ac:	    move.l d0,-(sp)
    46ae:	    move.l d3,-(sp)
    46b0:	    jsr 17d66 <__subsf3>
    46b6:	    addq.l #8,sp
    46b8:	    move.l d0,d3
    46ba:	    movea.l 28(sp),a0
    46be:	    move.l 32(a0),d4
    46c2:	    movea.l 28(sp),a0
    46c6:	    move.l 20(a0),d1
    46ca:	    movea.l 28(sp),a0
    46ce:	    move.l 24(a0),d0
    46d2:	    sub.l d0,d1
    46d4:	    move.l d1,-(sp)
    46d6:	    jsr 17a72 <__floatsisf>
    46dc:	    addq.l #4,sp
    46de:	    move.l d0,-(sp)
    46e0:	    move.l d4,-(sp)
    46e2:	    jsr 17b24 <__mulsf3>
    46e8:	    addq.l #8,sp
    46ea:	    move.l d0,-(sp)
    46ec:	    move.l d3,-(sp)
    46ee:	    jsr 17d66 <__subsf3>
    46f4:	    addq.l #8,sp
    46f6:	    move.l d0,d3
    46f8:	    movea.l 28(sp),a0
    46fc:	    movea.l 114(a0),a0
    4700:	    move.l 20(a0),d0
    4704:	    move.l d0,-(sp)
    4706:	    jsr 17a72 <__floatsisf>
    470c:	    addq.l #4,sp
    470e:	    move.l d0,-(sp)
    4710:	    move.l d3,-(sp)
    4712:	    jsr 17d66 <__subsf3>
    4718:	    addq.l #8,sp
    471a:	    move.l d0,-(sp)
    471c:	    jsr 17a0a <__fixsfsi>
    4722:	    addq.l #4,sp
    4724:	    move.l d0,d4
    4726:	    movea.l 28(sp),a0
    472a:	    move.l (a0),d3
    472c:	    move.l 1ce90 <cameraX>,d0
    4732:	    move.l d0,-(sp)
    4734:	    jsr 17a72 <__floatsisf>
    473a:	    addq.l #4,sp
    473c:	    move.l d0,-(sp)
    473e:	    move.l d3,-(sp)
    4740:	    jsr 17d66 <__subsf3>
    4746:	    addq.l #8,sp
    4748:	    move.l d0,-(sp)
    474a:	    jsr 17a0a <__fixsfsi>
    4750:	    addq.l #4,sp
    4752:	    move.l 32(sp),-(sp)
    4756:	    move.l d2,-(sp)
    4758:	    move.l d4,-(sp)
    475a:	    move.l d0,-(sp)
    475c:	    move.l 40(sp),-(sp)
    4760:	    jsr 4796 <wrapSpeechXY>
    4766:	    lea 20(sp),sp
    476a:	    move.l d0,16(sp)
	if (animPerson) {
    476e:	    tst.w 14(sp)
    4772:	,-- beq.s 478a <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    4774:	|   move.l 28(sp),-(sp)
    4778:	|   jsr 43b6 <makeTalker>
    477e:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4780:	|   movea.l 1cd2a <speech>,a0
    4786:	|   move.l 28(sp),(a0)
	}
	return i;
    478a:	'-> move.l 16(sp),d0
}
    478e:	    movem.l (sp)+,d2-d4
    4792:	    addq.l #8,sp
    4794:	    rts

00004796 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    4796:	                   lea -16(sp),sp
    479a:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    479e:	                   clr.l 16(sp)
    killAllSpeech();
    47a2:	                   jsr 42e8 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    47a8:	                   move.l 36(sp),-(sp)
    47ac:	                   jsr 1404c <strlen>
    47b2:	                   addq.l #4,sp
    47b4:	                   movea.l d0,a0
    47b6:	                   lea 20(a0),a0
    47ba:	                   move.l a0,-(sp)
    47bc:	                   jsr 17a9a <__floatunsisf>
    47c2:	                   addq.l #4,sp
    47c4:	                   move.l d0,d1
    47c6:	                   move.l 1c74e <speechSpeed>,d0
    47cc:	                   move.l d0,-(sp)
    47ce:	                   move.l d1,-(sp)
    47d0:	                   jsr 17b24 <__mulsf3>
    47d6:	                   addq.l #8,sp
    47d8:	                   move.l d0,-(sp)
    47da:	                   jsr 17a0a <__fixsfsi>
    47e0:	                   addq.l #4,sp
    47e2:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    47e6:	               ,-- bgt.s 47ee <wrapSpeechXY+0x58>
    47e8:	               |   moveq #1,d0
    47ea:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    47ee:	               '-> moveq #-1,d1
    47f0:	                   cmp.l 52(sp),d1
    47f4:	               ,-- beq.s 4834 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    47f6:	               |   move.l 1cea4 <speechMode>,d0
    47fc:	               +-- ble.s 4834 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    47fe:	               |   clr.l -(sp)
    4800:	               |   move.l 56(sp),-(sp)
    4804:	               |   jsr d534 <startSound>
    480a:	               |   addq.l #8,sp
    480c:	               |   tst.w d0
    480e:	               +-- beq.s 4834 <wrapSpeechXY+0x9e>
                speechTime = -10;
    4810:	               |   moveq #-10,d0
    4812:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    4816:	               |   movea.l 1cd2a <speech>,a0
    481c:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    4822:	               |   move.l 1cea4 <speechMode>,d0
    4828:	               |   moveq #2,d1
    482a:	               |   cmp.l d0,d1
    482c:	               +-- bne.s 4834 <wrapSpeechXY+0x9e>
    482e:	               |   moveq #-10,d0
    4830:	,--------------|-- bra.w 4aba <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    4834:	|              '-> movea.l 1cd2a <speech>,a0
    483a:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4840:	|     ,----------- bra.w 48f4 <wrapSpeechXY+0x15e>
        a = wrap;
    4844:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    484a:	|  |  |        ,-- bra.s 485a <wrapSpeechXY+0xc4>
            a--;
    484c:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4850:	|  |  |  |     +-- bne.s 485a <wrapSpeechXY+0xc4>
                a = wrap;
    4852:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4858:	|  |  |  |  ,--|-- bra.s 486c <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    485a:	|  |  |  |  |  '-> move.l 28(sp),d0
    485e:	|  |  |  |  |      movea.l 36(sp),a0
    4862:	|  |  |  |  |      adda.l d0,a0
    4864:	|  |  |  |  |      move.b (a0),d0
    4866:	|  |  |  |  |      cmpi.b #32,d0
    486a:	|  |  |  '--|----- bne.s 484c <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    486c:	|  |  |     '----> move.l 28(sp),d0
    4870:	|  |  |            movea.l 36(sp),a0
    4874:	|  |  |            adda.l d0,a0
    4876:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4878:	|  |  |            lea 16(sp),a0
    487c:	|  |  |            move.l a0,-(sp)
    487e:	|  |  |            move.l 44(sp),-(sp)
    4882:	|  |  |            move.l 44(sp),-(sp)
    4886:	|  |  |            jsr 4032 <addSpeechLine>
    488c:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4890:	|  |  |            move.l 28(sp),d0
    4894:	|  |  |            movea.l 36(sp),a0
    4898:	|  |  |            adda.l d0,a0
    489a:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    489e:	|  |  |            move.l 28(sp),d0
    48a2:	|  |  |            addq.l #1,d0
    48a4:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    48a8:	|  |  |            move.l 44(sp),-(sp)
    48ac:	|  |  |            jsr 17a72 <__floatsisf>
    48b2:	|  |  |            addq.l #4,sp
    48b4:	|  |  |            move.l d0,d2
    48b6:	|  |  |            move.l 1cece <fontHeight>,d0
    48bc:	|  |  |            move.l d0,-(sp)
    48be:	|  |  |            jsr 17a72 <__floatsisf>
    48c4:	|  |  |            addq.l #4,sp
    48c6:	|  |  |            move.l d0,d1
    48c8:	|  |  |            move.l 1c776 <cameraZoom>,d0
    48ce:	|  |  |            move.l d0,-(sp)
    48d0:	|  |  |            move.l d1,-(sp)
    48d2:	|  |  |            jsr 17928 <__divsf3>
    48d8:	|  |  |            addq.l #8,sp
    48da:	|  |  |            move.l d0,-(sp)
    48dc:	|  |  |            move.l d2,-(sp)
    48de:	|  |  |            jsr 17d66 <__subsf3>
    48e4:	|  |  |            addq.l #8,sp
    48e6:	|  |  |            move.l d0,-(sp)
    48e8:	|  |  |            jsr 17a0a <__fixsfsi>
    48ee:	|  |  |            addq.l #4,sp
    48f0:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    48f4:	|  |  '----------> move.l 36(sp),-(sp)
    48f8:	|  |               jsr 1404c <strlen>
    48fe:	|  |               addq.l #4,sp
    4900:	|  |               move.l d0,d1
    4902:	|  |               move.l 48(sp),d0
    4906:	|  |               cmp.l d1,d0
    4908:	|  '-------------- bcs.w 4844 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    490c:	|                  lea 16(sp),a0
    4910:	|                  move.l a0,-(sp)
    4912:	|                  move.l 44(sp),-(sp)
    4916:	|                  move.l 44(sp),-(sp)
    491a:	|                  jsr 4032 <addSpeechLine>
    4920:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4924:	|                  move.l 44(sp),-(sp)
    4928:	|                  jsr 17a72 <__floatsisf>
    492e:	|                  addq.l #4,sp
    4930:	|                  move.l d0,d2
    4932:	|                  move.l 1cece <fontHeight>,d0
    4938:	|                  move.l d0,-(sp)
    493a:	|                  jsr 17a72 <__floatsisf>
    4940:	|                  addq.l #4,sp
    4942:	|                  move.l d0,d1
    4944:	|                  move.l 1c776 <cameraZoom>,d0
    494a:	|                  move.l d0,-(sp)
    494c:	|                  move.l d1,-(sp)
    494e:	|                  jsr 17928 <__divsf3>
    4954:	|                  addq.l #8,sp
    4956:	|                  move.l d0,-(sp)
    4958:	|                  move.l d2,-(sp)
    495a:	|                  jsr 17d66 <__subsf3>
    4960:	|                  addq.l #8,sp
    4962:	|                  move.l d0,-(sp)
    4964:	|                  jsr 17a0a <__fixsfsi>
    496a:	|                  addq.l #4,sp
    496c:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4970:	|              ,-- bpl.s 498e <wrapSpeechXY+0x1f8>
    4972:	|              |   movea.l 1cd2a <speech>,a0
    4978:	|              |   move.l 8(a0),d0
    497c:	|              |   movea.l 1cd2a <speech>,a0
    4982:	|              |   sub.l 44(sp),d0
    4986:	|              |   move.l d0,8(a0)
    498a:	|           ,--|-- bra.w 4a7c <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    498e:	|           |  '-> movea.l 1cd2a <speech>,a0
    4994:	|           |      move.l 8(a0),d0
    4998:	|           |      move.l d0,-(sp)
    499a:	|           |      jsr 17a72 <__floatsisf>
    49a0:	|           |      addq.l #4,sp
    49a2:	|           |      move.l d0,d2
    49a4:	|           |      move.l 1ce94 <cameraY>,d0
    49aa:	|           |      move.l d0,-(sp)
    49ac:	|           |      jsr 17a72 <__floatsisf>
    49b2:	|           |      addq.l #4,sp
    49b4:	|           |      move.l d0,d3
    49b6:	|           |      move.l 1cd32 <winHeight>,d4
    49bc:	|           |      move.l 1cece <fontHeight>,d0
    49c2:	|           |      pea 3 <_start+0x3>
    49c6:	|           |      move.l d0,-(sp)
    49c8:	|           |      jsr 1804a <__divsi3>
    49ce:	|           |      addq.l #8,sp
    49d0:	|           |      move.l d4,d1
    49d2:	|           |      sub.l d0,d1
    49d4:	|           |      move.l d1,-(sp)
    49d6:	|           |      jsr 17a9a <__floatunsisf>
    49dc:	|           |      addq.l #4,sp
    49de:	|           |      move.l d0,d1
    49e0:	|           |      move.l 1c776 <cameraZoom>,d0
    49e6:	|           |      move.l d0,-(sp)
    49e8:	|           |      move.l d1,-(sp)
    49ea:	|           |      jsr 17928 <__divsf3>
    49f0:	|           |      addq.l #8,sp
    49f2:	|           |      move.l d0,-(sp)
    49f4:	|           |      move.l d3,-(sp)
    49f6:	|           |      jsr 1782e <__addsf3>
    49fc:	|           |      addq.l #8,sp
    49fe:	|           |      move.l d0,-(sp)
    4a00:	|           |      move.l d2,-(sp)
    4a02:	|           |      jsr 17bde <__gtsf2>
    4a08:	|           |      addq.l #8,sp
    4a0a:	|           |      tst.l d0
    4a0c:	|           +----- ble.s 4a7c <wrapSpeechXY+0x2e6>
    4a0e:	|           |      move.l 1ce94 <cameraY>,d0
    4a14:	|           |      move.l d0,-(sp)
    4a16:	|           |      jsr 17a72 <__floatsisf>
    4a1c:	|           |      addq.l #4,sp
    4a1e:	|           |      move.l d0,d2
    4a20:	|           |      move.l 1cd32 <winHeight>,d3
    4a26:	|           |      move.l 1cece <fontHeight>,d0
    4a2c:	|           |      pea 3 <_start+0x3>
    4a30:	|           |      move.l d0,-(sp)
    4a32:	|           |      jsr 1804a <__divsi3>
    4a38:	|           |      addq.l #8,sp
    4a3a:	|           |      move.l d3,d1
    4a3c:	|           |      sub.l d0,d1
    4a3e:	|           |      move.l d1,-(sp)
    4a40:	|           |      jsr 17a9a <__floatunsisf>
    4a46:	|           |      addq.l #4,sp
    4a48:	|           |      move.l d0,d1
    4a4a:	|           |      move.l 1c776 <cameraZoom>,d0
    4a50:	|           |      move.l d0,-(sp)
    4a52:	|           |      move.l d1,-(sp)
    4a54:	|           |      jsr 17928 <__divsf3>
    4a5a:	|           |      addq.l #8,sp
    4a5c:	|           |      move.l d0,-(sp)
    4a5e:	|           |      move.l d2,-(sp)
    4a60:	|           |      jsr 1782e <__addsf3>
    4a66:	|           |      addq.l #8,sp
    4a68:	|           |      movea.l 1cd2a <speech>,a2
    4a6e:	|           |      move.l d0,-(sp)
    4a70:	|           |      jsr 17a0a <__fixsfsi>
    4a76:	|           |      addq.l #4,sp
    4a78:	|           |      move.l d0,8(a2)

    if (offset) {
    4a7c:	|           '----> move.l 16(sp),d0
    4a80:	|        ,-------- beq.s 4ab6 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4a82:	|        |         movea.l 1cd2a <speech>,a0
    4a88:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4a8e:	|        |     ,-- bra.s 4ab0 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4a90:	|        |  ,--|-> movea.l 20(sp),a0
    4a94:	|        |  |  |   move.l 8(a0),d1
    4a98:	|        |  |  |   move.l 16(sp),d0
    4a9c:	|        |  |  |   add.l d1,d0
    4a9e:	|        |  |  |   movea.l 20(sp),a0
    4aa2:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4aa6:	|        |  |  |   movea.l 20(sp),a0
    4aaa:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4ab0:	|        |  |  '-> tst.l 20(sp)
    4ab4:	|        |  '----- bne.s 4a90 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4ab6:	|        '-------> move.l 24(sp),d0
}
    4aba:	'----------------> movem.l (sp)+,d2-d4/a2
    4abe:	                   lea 16(sp),sp
    4ac2:	                   rts

00004ac4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4ac4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4ac8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4acc:	       tst.l 24(sp)
    4ad0:	   ,-- bge.s 4ad6 <drawLine+0x12>
    4ad2:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4ad6:	   '-> tst.l 28(sp)
    4ada:	   ,-- bge.s 4ae0 <drawLine+0x1c>
    4adc:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4ae0:	   '-> tst.l 32(sp)
    4ae4:	   ,-- bge.s 4aea <drawLine+0x26>
    4ae6:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4aea:	   '-> tst.l 36(sp)
    4aee:	   ,-- bge.s 4af4 <drawLine+0x30>
    4af0:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4af4:	   '-> move.l 1ce72 <sceneWidth>,d0
    4afa:	       cmp.l 24(sp),d0
    4afe:	   ,-- bge.s 4b0e <drawLine+0x4a>
    4b00:	   |   move.l 1ce72 <sceneWidth>,d0
    4b06:	   |   move.l d0,d1
    4b08:	   |   subq.l #1,d1
    4b0a:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4b0e:	   '-> move.l 1ce72 <sceneWidth>,d0
    4b14:	       cmp.l 32(sp),d0
    4b18:	   ,-- bge.s 4b28 <drawLine+0x64>
    4b1a:	   |   move.l 1ce72 <sceneWidth>,d0
    4b20:	   |   move.l d0,d1
    4b22:	   |   subq.l #1,d1
    4b24:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4b28:	   '-> move.l 1ce76 <sceneHeight>,d0
    4b2e:	       cmp.l 28(sp),d0
    4b32:	   ,-- bge.s 4b42 <drawLine+0x7e>
    4b34:	   |   move.l 1ce76 <sceneHeight>,d0
    4b3a:	   |   move.l d0,d1
    4b3c:	   |   subq.l #1,d1
    4b3e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4b42:	   '-> move.l 1ce76 <sceneHeight>,d0
    4b48:	       cmp.l 36(sp),d0
    4b4c:	   ,-- bge.s 4b5c <drawLine+0x98>
    4b4e:	   |   move.l 1ce76 <sceneHeight>,d0
    4b54:	   |   move.l d0,d1
    4b56:	   |   subq.l #1,d1
    4b58:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4b5c:	   '-> move.l 24(sp),d0
    4b60:	       cmp.l 32(sp),d0
    4b64:	,----- ble.s 4b80 <drawLine+0xbc>
		x = x2; 
    4b66:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4b6c:	|      tst.w 10(sp)
    4b70:	|      seq d0
    4b72:	|      neg.b d0
    4b74:	|      move.b d0,d0
    4b76:	|      andi.w #255,d0
    4b7a:	|      move.w d0,10(sp)
    4b7e:	|  ,-- bra.s 4b86 <drawLine+0xc2>
	} else x = x1;
    4b80:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4b86:	   '-> move.l 28(sp),d1
    4b8a:	       cmp.l 36(sp),d1
    4b8e:	,----- ble.s 4baa <drawLine+0xe6>
		y = y2; 
    4b90:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4b96:	|      tst.w 10(sp)
    4b9a:	|      seq d0
    4b9c:	|      neg.b d0
    4b9e:	|      move.b d0,d0
    4ba0:	|      andi.w #255,d0
    4ba4:	|      move.w d0,10(sp)
    4ba8:	|  ,-- bra.s 4bb0 <drawLine+0xec>
	} else y = y1;	
    4baa:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4bb0:	   '-> move.l 32(sp),d0
    4bb4:	       sub.l 24(sp),d0
    4bb8:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4bbc:	       move.l 6(sp),d0
    4bc0:	   ,-- bpl.s 4bc4 <drawLine+0x100>
    4bc2:	   |   neg.l d0
    4bc4:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4bc8:	       move.l 36(sp),d1
    4bcc:	       sub.l 28(sp),d1
    4bd0:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4bd4:	       move.l 2(sp),d0
    4bd8:	   ,-- bpl.s 4bdc <drawLine+0x118>
    4bda:	   |   neg.l d0
    4bdc:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4be0:	       tst.l 6(sp)
    4be4:	   ,-- bne.s 4c08 <drawLine+0x144>
		diffX = 1;
    4be6:	   |   moveq #1,d0
    4be8:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4bec:	   |   move.l 1ce72 <sceneWidth>,d0
    4bf2:	   |   subq.l #1,d0
    4bf4:	   |   cmp.l 16(sp),d0
    4bf8:	   +-- bne.s 4c08 <drawLine+0x144>
    4bfa:	   |   move.l 1ce72 <sceneWidth>,d0
    4c00:	   |   move.l d0,d1
    4c02:	   |   subq.l #2,d1
    4c04:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4c08:	   '-> tst.l 2(sp)
    4c0c:	   ,-- bne.s 4c30 <drawLine+0x16c>
		diffY = 1;
    4c0e:	   |   moveq #1,d0
    4c10:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4c14:	   |   move.l 1ce76 <sceneHeight>,d0
    4c1a:	   |   subq.l #1,d0
    4c1c:	   |   cmp.l 12(sp),d0
    4c20:	   +-- bne.s 4c30 <drawLine+0x16c>
    4c22:	   |   move.l 1ce76 <sceneHeight>,d0
    4c28:	   |   move.l d0,d1
    4c2a:	   |   subq.l #2,d1
    4c2c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4c30:	   '-> pea 18774 <PutChar+0x692>
    4c36:	       jsr 17640 <KPrintF>
    4c3c:	       addq.l #4,sp
	
}
    4c3e:	       nop
    4c40:	       lea 20(sp),sp
    4c44:	       rts

00004c46 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4c46:	                      lea -24(sp),sp
    4c4a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4c4c:	                      move.l 1cd36 <firstTexture>,d0
    4c52:	,-------------------- beq.w 4d30 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4c56:	|                     clr.l 24(sp)
    4c5a:	|     ,-------------- bra.w 4d24 <deleteTextures+0xde>
			BOOL found = FALSE;
    4c5e:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4c62:	|  |  |               move.l 1cd36 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4c6a:	|  |  |               movea.l 20(sp),a0
    4c6e:	|  |  |               move.l (a0),d1
    4c70:	|  |  |               move.l 24(sp),d0
    4c74:	|  |  |               add.l d0,d0
    4c76:	|  |  |               add.l d0,d0
    4c78:	|  |  |               movea.l 36(sp),a0
    4c7c:	|  |  |               adda.l d0,a0
    4c7e:	|  |  |               move.l (a0),d0
    4c80:	|  |  |               cmp.l d1,d0
    4c82:	|  |  |  ,----------- bne.w 4d16 <deleteTextures+0xd0>
				found = TRUE;
    4c86:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4c8c:	|  |  |  |            movea.l 20(sp),a0
    4c90:	|  |  |  |            move.l 12(a0),d0
    4c94:	|  |  |  |            move.l d0,1cd36 <firstTexture>
				FreeVec(list);
    4c9a:	|  |  |  |            move.l 20(sp),6(sp)
    4ca0:	|  |  |  |            move.l 1cdda <SysBase>,d0
    4ca6:	|  |  |  |            movea.l d0,a6
    4ca8:	|  |  |  |            movea.l 6(sp),a1
    4cac:	|  |  |  |            jsr -690(a6)
				continue;
    4cb0:	|  |  |  |  ,-------- bra.s 4d20 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4cb2:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4cb6:	|  |  |  |  |  |      movea.l 12(a0),a0
    4cba:	|  |  |  |  |  |      move.l (a0),d1
    4cbc:	|  |  |  |  |  |      move.l 24(sp),d0
    4cc0:	|  |  |  |  |  |      add.l d0,d0
    4cc2:	|  |  |  |  |  |      add.l d0,d0
    4cc4:	|  |  |  |  |  |      movea.l 36(sp),a0
    4cc8:	|  |  |  |  |  |      adda.l d0,a0
    4cca:	|  |  |  |  |  |      move.l (a0),d0
    4ccc:	|  |  |  |  |  |      cmp.l d1,d0
    4cce:	|  |  |  |  |  |  ,-- bne.s 4d0c <deleteTextures+0xc6>
					found = TRUE;
    4cd0:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4cd6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4cda:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4ce0:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4ce4:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4ce8:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4cec:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4cf0:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4cf4:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4cfa:	|  |  |  |  |  |  |   move.l 1cdda <SysBase>,d0
    4d00:	|  |  |  |  |  |  |   movea.l d0,a6
    4d02:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4d06:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4d0a:	|  |  |  |  +--|--|-- bra.s 4d20 <deleteTextures+0xda>
				}
				list = list->next;
    4d0c:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4d10:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4d16:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4d1a:	|  |  |     |  |      move.l 12(a0),d0
    4d1e:	|  |  |     |  '----- bne.s 4cb2 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4d20:	|  |  |     '-------> addq.l #1,24(sp)
    4d24:	|  |  '-------------> move.l 24(sp),d0
    4d28:	|  |                  cmp.l 32(sp),d0
    4d2c:	|  '----------------- bcs.w 4c5e <deleteTextures+0x18>
			}
		}
	}
}
    4d30:	'-------------------> nop
    4d32:	                      movea.l (sp)+,a6
    4d34:	                      lea 24(sp),sp
    4d38:	                      rts

00004d3a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4d3a:	subq.l #4,sp
    4d3c:	move.l 8(sp),d0
    4d40:	move.w d0,d0
    4d42:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4d46:	pea 18797 <PutChar+0x6b5>
    4d4c:	jsr 17640 <KPrintF>
    4d52:	addq.l #4,sp
}
    4d54:	nop
    4d56:	addq.l #4,sp
    4d58:	rts

00004d5a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4d5a:	       moveq #-1,d0
    4d5c:	       cmp.l 4(sp),d0
    4d60:	   ,-- bne.s 4d66 <resourceNameFromNum+0xc>
    4d62:	   |   moveq #0,d0
    4d64:	,--|-- bra.s 4d9e <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4d66:	|  '-> move.l 1cdb6 <numResourceNames>,d0
    4d6c:	|  ,-- bne.s 4d76 <resourceNameFromNum+0x1c>
    4d6e:	|  |   move.l #100295,d0
    4d74:	+--|-- bra.s 4d9e <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4d76:	|  '-> move.l 1cdb6 <numResourceNames>,d0
    4d7c:	|      cmp.l 4(sp),d0
    4d80:	|  ,-- ble.s 4d98 <resourceNameFromNum+0x3e>
    4d82:	|  |   move.l 1cd6e <allResourceNames>,d1
    4d88:	|  |   move.l 4(sp),d0
    4d8c:	|  |   add.l d0,d0
    4d8e:	|  |   add.l d0,d0
    4d90:	|  |   movea.l d1,a0
    4d92:	|  |   adda.l d0,a0
    4d94:	|  |   move.l (a0),d0
    4d96:	+--|-- bra.s 4d9e <resourceNameFromNum+0x44>
	return "Unknown resource";
    4d98:	|  '-> move.l #100304,d0
    4d9e:	'----> rts

00004da0 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4da0:	          lea -44(sp),sp
    4da4:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4da8:	          move.l #320,1cd2e <winWidth>
    winHeight = 256;
    4db2:	          move.l #256,1cd32 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4dbc:	          tst.l 60(sp)
    4dc0:	      ,-- bne.s 4dd8 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4dc2:	      |   pea 187e1 <PutChar+0x6ff>
    4dc8:	      |   jsr b8 <copyString>
    4dce:	      |   addq.l #4,sp
    4dd0:	      |   move.l d0,1cd46 <bundleFolder>
    4dd6:	   ,--|-- bra.s 4dee <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4dd8:	   |  '-> movea.l 64(sp),a0
    4ddc:	   |      move.l (a0),d0
    4dde:	   |      move.l d0,-(sp)
    4de0:	   |      jsr b8 <copyString>
    4de6:	   |      addq.l #4,sp
    4de8:	   |      move.l d0,1cd46 <bundleFolder>
	}
    
	int lastSlash = -1;
    4dee:	   '----> moveq #-1,d0
    4df0:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4df4:	          clr.l 44(sp)
    4df8:	   ,----- bra.s 4e1a <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4dfa:	,--|----> move.l 1cd46 <bundleFolder>,d1
    4e00:	|  |      move.l 44(sp),d0
    4e04:	|  |      movea.l d1,a0
    4e06:	|  |      adda.l d0,a0
    4e08:	|  |      move.b (a0),d0
    4e0a:	|  |      cmpi.b #47,d0
    4e0e:	|  |  ,-- bne.s 4e16 <main_sludge+0x76>
    4e10:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4e16:	|  |  '-> addq.l #1,44(sp)
    4e1a:	|  '----> move.l 1cd46 <bundleFolder>,d1
    4e20:	|         move.l 44(sp),d0
    4e24:	|         movea.l d1,a0
    4e26:	|         adda.l d0,a0
    4e28:	|         move.b (a0),d0
    4e2a:	'-------- bne.s 4dfa <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4e2c:	          move.l 1cd46 <bundleFolder>,d0
    4e32:	          move.l 48(sp),d1
    4e36:	          addq.l #1,d1
    4e38:	          movea.l d0,a0
    4e3a:	          adda.l d1,a0
    4e3c:	          clr.b (a0)

	if (argc > 1) {
    4e3e:	          moveq #1,d0
    4e40:	          cmp.l 60(sp),d0
    4e44:	      ,-- bge.s 4e60 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4e46:	      |   move.l 60(sp),d0
    4e4a:	      |   addi.l #1073741823,d0
    4e50:	      |   add.l d0,d0
    4e52:	      |   add.l d0,d0
    4e54:	      |   movea.l 64(sp),a0
    4e58:	      |   adda.l d0,a0
    4e5a:	      |   move.l (a0),52(sp)
    4e5e:	   ,--|-- bra.s 4eba <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4e60:	   |  '-> move.l 1cd46 <bundleFolder>,d0
    4e66:	   |      pea 187e7 <PutChar+0x705>
    4e6c:	   |      move.l d0,-(sp)
    4e6e:	   |      jsr 1408c <joinStrings>
    4e74:	   |      addq.l #8,sp
    4e76:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4e7a:	   |      move.l 52(sp),-(sp)
    4e7e:	   |      jsr 13f86 <fileExists>
    4e84:	   |      addq.l #4,sp
    4e86:	   |      tst.b d0
    4e88:	   +----- bne.s 4eba <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4e8a:	   |      move.l 52(sp),40(sp)
    4e90:	   |      move.l 1cdda <SysBase>,d0
    4e96:	   |      movea.l d0,a6
    4e98:	   |      movea.l 40(sp),a1
    4e9c:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4ea0:	   |      move.l 1cd46 <bundleFolder>,d0
    4ea6:	   |      pea 187f4 <PutChar+0x712>
    4eac:	   |      move.l d0,-(sp)
    4eae:	   |      jsr 1408c <joinStrings>
    4eb4:	   |      addq.l #8,sp
    4eb6:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4eba:	   '----> pea 187fd <PutChar+0x71b>
    4ec0:	          jsr 17640 <KPrintF>
    4ec6:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4ec8:	          move.l 52(sp),-(sp)
    4ecc:	          jsr 13f86 <fileExists>
    4ed2:	          addq.l #4,sp
    4ed4:	          tst.b d0
    4ed6:	      ,-- bne.s 4f2e <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4ed8:	      |   move.l 1cde2 <DOSBase>,d0
    4ede:	      |   movea.l d0,a6
    4ee0:	      |   jsr -60(a6)
    4ee4:	      |   move.l d0,28(sp)
    4ee8:	      |   move.l 28(sp),d0
    4eec:	      |   move.l d0,24(sp)
    4ef0:	      |   move.l #100349,20(sp)
    4ef8:	      |   moveq #21,d0
    4efa:	      |   move.l d0,16(sp)
    4efe:	      |   move.l 1cde2 <DOSBase>,d0
    4f04:	      |   movea.l d0,a6
    4f06:	      |   move.l 24(sp),d1
    4f0a:	      |   move.l 20(sp),d2
    4f0e:	      |   move.l 16(sp),d3
    4f12:	      |   jsr -48(a6)
    4f16:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4f1a:	      |   pea 187fd <PutChar+0x71b>
    4f20:	      |   jsr 17640 <KPrintF>
    4f26:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4f28:	      |   moveq #0,d0
    4f2a:	,-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4f2e:	|     '-> pea 18813 <PutChar+0x731>
    4f34:	|         jsr 17640 <KPrintF>
    4f3a:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4f3c:	|         move.l 52(sp),-(sp)
    4f40:	|         jsr 5136 <setGameFilePath>
    4f46:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4f48:	|         move.l 52(sp),-(sp)
    4f4c:	|         jsr 6680 <initSludge>
    4f52:	|         addq.l #4,sp
    4f54:	|         tst.w d0
    4f56:	|     ,-- bne.s 4f5e <main_sludge+0x1be>
    4f58:	|     |   moveq #0,d0
    4f5a:	+-----|-- bra.w 512c <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4f5e:	|     '-> move.l 1cd2e <winWidth>,d0
    4f64:	|         cmpi.l #320,d0
    4f6a:	|     ,-- bne.s 4f7a <main_sludge+0x1da>
    4f6c:	|     |   move.l 1cd32 <winHeight>,d0
    4f72:	|     |   cmpi.l #256,d0
    4f78:	|  ,--|-- beq.s 4f9c <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4f7a:	|  |  '-> pea 18824 <PutChar+0x742>
    4f80:	|  |      jsr 17640 <KPrintF>
    4f86:	|  |      addq.l #4,sp
		winWidth = 320;
    4f88:	|  |      move.l #320,1cd2e <winWidth>
		winHeight = 256;
    4f92:	|  |      move.l #256,1cd32 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4f9c:	|  '----> pea 188a1 <PutChar+0x7bf>
    4fa2:	|         jsr 17640 <KPrintF>
    4fa8:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4faa:	|         move.l 1cd32 <winHeight>,d0
    4fb0:	|         move.l d0,d1
    4fb2:	|         move.l 1cd2e <winWidth>,d0
    4fb8:	|         move.l d1,-(sp)
    4fba:	|         move.l d0,-(sp)
    4fbc:	|         jsr d752 <resizeBackdrop>
    4fc2:	|         addq.l #8,sp
    4fc4:	|         tst.w d0
    4fc6:	|     ,-- bne.s 4fdc <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4fc8:	|     |   pea 188b4 <PutChar+0x7d2>
    4fce:	|     |   jsr 17640 <KPrintF>
    4fd4:	|     |   addq.l #4,sp
		return FALSE;
    4fd6:	|     |   moveq #0,d0
    4fd8:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4fdc:	|     '-> pea 188da <PutChar+0x7f8>
    4fe2:	|         jsr 17640 <KPrintF>
    4fe8:	|         addq.l #4,sp
	if (! initPeople ())
    4fea:	|         jsr ac6c <initPeople>
    4ff0:	|         tst.w d0
    4ff2:	|     ,-- bne.s 5008 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4ff4:	|     |   pea 188e7 <PutChar+0x805>
    4ffa:	|     |   jsr 17640 <KPrintF>
    5000:	|     |   addq.l #4,sp
		return FALSE;
    5002:	|     |   moveq #0,d0
    5004:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    5008:	|     '-> pea 18908 <PutChar+0x826>
    500e:	|         jsr 17640 <KPrintF>
    5014:	|         addq.l #4,sp
	if (! initFloor ())
    5016:	|         jsr 169f6 <initFloor>
    501c:	|         tst.w d0
    501e:	|     ,-- bne.s 5034 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    5020:	|     |   pea 18914 <PutChar+0x832>
    5026:	|     |   jsr 17640 <KPrintF>
    502c:	|     |   addq.l #4,sp
		
		return FALSE;
    502e:	|     |   moveq #0,d0
    5030:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    5034:	|     '-> pea 18934 <PutChar+0x852>
    503a:	|         jsr 17640 <KPrintF>
    5040:	|         addq.l #4,sp
	if (! initObjectTypes ())
    5042:	|         jsr d90e <initObjectTypes>
    5048:	|         tst.w d0
    504a:	|     ,-- bne.s 5060 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    504c:	|     |   pea 18945 <PutChar+0x863>
    5052:	|     |   jsr 17640 <KPrintF>
    5058:	|     |   addq.l #4,sp
		return FALSE;
    505a:	|     |   moveq #0,d0
    505c:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    5060:	|     '-> pea 1896b <PutChar+0x889>
    5066:	|         jsr 17640 <KPrintF>
    506c:	|         addq.l #4,sp
	initSpeech ();
    506e:	|         jsr 4250 <initSpeech>
	KPrintF("Init status bar\n");
    5074:	|         pea 18978 <PutChar+0x896>
    507a:	|         jsr 17640 <KPrintF>
    5080:	|         addq.l #4,sp
	initStatusBar ();
    5082:	|         jsr 866c <initStatusBar>

	KPrintF("Get numbered string\n");
    5088:	|         pea 18989 <PutChar+0x8a7>
    508e:	|         jsr 17640 <KPrintF>
    5094:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    5096:	|         pea 1 <_start+0x1>
    509a:	|         jsr 7976 <getNumberedString>
    50a0:	|         addq.l #4,sp
    50a2:	|         move.l d0,1cd3e <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    50a8:	|         pea 1899e <PutChar+0x8bc>
    50ae:	|         jsr 17640 <KPrintF>
    50b4:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    50b6:	|         move.l 1cdaa <noStack>,d0
    50bc:	|         pea 1 <_start+0x1>
    50c0:	|         move.l d0,-(sp)
    50c2:	|         clr.l -(sp)
    50c4:	|         clr.l -(sp)
    50c6:	|         clr.l -(sp)
    50c8:	|         jsr 782e <startNewFunctionNum>
    50ce:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    50d2:	|         pea 189b6 <PutChar+0x8d4>
    50d8:	|         jsr 17640 <KPrintF>
    50de:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    50e0:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    50e8:	|         clr.l 1cd4a <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    50ee:	|     ,-- bra.s 510e <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    50f0:	|  ,--|-> jsr 76b4 <sludgeDisplay>
		CsiCheckInput();
    50f6:	|  |  |   jsr d270 <CsiCheckInput>
		walkAllPeople();
    50fc:	|  |  |   jsr c22a <walkAllPeople>
		handleInput();
    5102:	|  |  |   jsr 641a <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    5108:	|  |  |   jsr 17574 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    510e:	|  |  '-> move.l 1cd4a <weAreDoneSoQuit>,d0
    5114:	|  '----- beq.s 50f0 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    5116:	|         move.l 52(sp),32(sp)
    511c:	|         move.l 1cdda <SysBase>,d0
    5122:	|         movea.l d0,a6
    5124:	|         movea.l 32(sp),a1
    5128:	|         jsr -690(a6)
}
    512c:	'-------> movem.l (sp)+,d2-d3/a6
    5130:	          lea 44(sp),sp
    5134:	          rts

00005136 <setGameFilePath>:

void setGameFilePath (char * f) {
    5136:	          lea -1104(sp),sp
    513a:	          move.l a6,-(sp)
    513c:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    513e:	          move.l #1112,d0
    5144:	          add.l sp,d0
    5146:	          addi.l #-1102,d0
    514c:	          move.l d0,1100(sp)
    5150:	          move.l #998,1096(sp)
    5158:	          move.l 1cde2 <DOSBase>,d0
    515e:	          movea.l d0,a6
    5160:	          move.l 1100(sp),d1
    5164:	          move.l 1096(sp),d2
    5168:	          jsr -564(a6)
    516c:	          move.w d0,1094(sp)
    5170:	          move.w 1094(sp),d0
    5174:	      ,-- bne.s 5184 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    5176:	      |   pea 189c9 <PutChar+0x8e7>
    517c:	      |   jsr 17640 <KPrintF>
    5182:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    5184:	      '-> moveq #-1,d0
    5186:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    518a:	          clr.l 1104(sp)
    518e:	   ,----- bra.s 51ac <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    5190:	,--|----> move.l 1104(sp),d0
    5194:	|  |      movea.l 1116(sp),a0
    5198:	|  |      adda.l d0,a0
    519a:	|  |      move.b (a0),d0
    519c:	|  |      cmpi.b #47,d0
    51a0:	|  |  ,-- bne.s 51a8 <setGameFilePath+0x72>
    51a2:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    51a8:	|  |  '-> addq.l #1,1104(sp)
    51ac:	|  '----> move.l 1104(sp),d0
    51b0:	|         movea.l 1116(sp),a0
    51b4:	|         adda.l d0,a0
    51b6:	|         move.b (a0),d0
    51b8:	'-------- bne.s 5190 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    51ba:	          moveq #-1,d0
    51bc:	          cmp.l 1108(sp),d0
    51c0:	   ,----- beq.s 523a <setGameFilePath+0x104>
		f[got] = 0;	
    51c2:	   |      move.l 1108(sp),d0
    51c6:	   |      movea.l 1116(sp),a0
    51ca:	   |      adda.l d0,a0
    51cc:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    51ce:	   |      move.l 1116(sp),1090(sp)
    51d4:	   |      moveq #-2,d0
    51d6:	   |      move.l d0,1086(sp)
    51da:	   |      move.l 1cde2 <DOSBase>,d0
    51e0:	   |      movea.l d0,a6
    51e2:	   |      move.l 1090(sp),d1
    51e6:	   |      move.l 1086(sp),d2
    51ea:	   |      jsr -84(a6)
    51ee:	   |      move.l d0,1082(sp)
    51f2:	   |      move.l 1082(sp),d0
    51f6:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    51fa:	   |      move.l 1078(sp),1074(sp)
    5200:	   |      move.l 1cde2 <DOSBase>,d0
    5206:	   |      movea.l d0,a6
    5208:	   |      move.l 1074(sp),d1
    520c:	   |      jsr -126(a6)
    5210:	   |      move.l d0,1070(sp)
    5214:	   |      move.l 1070(sp),d0
    5218:	   |  ,-- bne.s 522c <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    521a:	   |  |   move.l 1116(sp),-(sp)
    521e:	   |  |   pea 189ef <PutChar+0x90d>
    5224:	   |  |   jsr 17640 <KPrintF>
    522a:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    522c:	   |  '-> move.l 1108(sp),d0
    5230:	   |      movea.l 1116(sp),a0
    5234:	   |      adda.l d0,a0
    5236:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    523a:	   '----> move.l #400,1066(sp)
    5242:	          clr.l 1062(sp)
    5246:	          move.l 1cdda <SysBase>,d0
    524c:	          movea.l d0,a6
    524e:	          move.l 1066(sp),d0
    5252:	          move.l 1062(sp),d1
    5256:	          jsr -684(a6)
    525a:	          move.l d0,1058(sp)
    525e:	          move.l 1058(sp),d0
    5262:	          move.l d0,1cd42 <gamePath>
	if (gamePath==0) {
    5268:	          move.l 1cd42 <gamePath>,d0
    526e:	      ,-- bne.s 5282 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    5270:	      |   pea 18a22 <PutChar+0x940>
    5276:	      |   jsr 17640 <KPrintF>
    527c:	      |   addq.l #4,sp
    527e:	   ,--|-- bra.w 536a <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    5282:	   |  '-> move.l 1cd42 <gamePath>,1054(sp)
    528a:	   |      moveq #-2,d0
    528c:	   |      move.l d0,1050(sp)
    5290:	   |      move.l 1cde2 <DOSBase>,d0
    5296:	   |      movea.l d0,a6
    5298:	   |      move.l 1054(sp),d1
    529c:	   |      move.l 1050(sp),d2
    52a0:	   |      jsr -84(a6)
    52a4:	   |      move.l d0,1046(sp)
    52a8:	   |      move.l 1046(sp),d0
    52ac:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    52b0:	   |      move.l 1042(sp),1038(sp)
    52b6:	   |      move.l 1cde2 <DOSBase>,d0
    52bc:	   |      movea.l d0,a6
    52be:	   |      move.l 1038(sp),d1
    52c2:	   |      jsr -126(a6)
    52c6:	   |      move.l d0,1034(sp)
    52ca:	   |      move.l 1034(sp),d0
    52ce:	   |  ,-- bne.s 52de <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    52d0:	   |  |   pea 18a5d <PutChar+0x97b>
    52d6:	   |  |   jsr 17640 <KPrintF>
    52dc:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    52de:	   |  '-> move.l #1112,d0
    52e4:	   |      add.l sp,d0
    52e6:	   |      addi.l #-1102,d0
    52ec:	   |      move.l d0,1030(sp)
    52f0:	   |      moveq #-2,d0
    52f2:	   |      move.l d0,1026(sp)
    52f6:	   |      move.l 1cde2 <DOSBase>,d0
    52fc:	   |      movea.l d0,a6
    52fe:	   |      move.l 1030(sp),d1
    5302:	   |      move.l 1026(sp),d2
    5306:	   |      jsr -84(a6)
    530a:	   |      move.l d0,1022(sp)
    530e:	   |      move.l 1022(sp),d0
    5312:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    5316:	   |      move.l 1042(sp),1018(sp)
    531c:	   |      move.l 1cde2 <DOSBase>,d0
    5322:	   |      movea.l d0,a6
    5324:	   |      move.l 1018(sp),d1
    5328:	   |      jsr -126(a6)
    532c:	   |      move.l d0,1014(sp)
    5330:	   |      move.l 1014(sp),d0
    5334:	   |  ,-- bne.s 534a <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    5336:	   |  |   moveq #10,d0
    5338:	   |  |   add.l sp,d0
    533a:	   |  |   move.l d0,-(sp)
    533c:	   |  |   pea 18a89 <PutChar+0x9a7>
    5342:	   |  |   jsr 17640 <KPrintF>
    5348:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    534a:	   |  '-> move.l 1cd42 <gamePath>,d0
    5350:	   +----- beq.s 536a <setGameFilePath+0x234>
    5352:	   |      move.l 1cd42 <gamePath>,1010(sp)
    535a:	   |      move.l 1cdda <SysBase>,d0
    5360:	   |      movea.l d0,a6
    5362:	   |      movea.l 1010(sp),a1
    5366:	   |      jsr -690(a6)
}
    536a:	   '----> move.l (sp)+,d2
    536c:	          movea.l (sp)+,a6
    536e:	          lea 1104(sp),sp
    5372:	          rts

00005374 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    5374:	,-------> lea -16(sp),sp
    5378:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    537a:	|         move.l 24(sp),d0
    537e:	|         move.l d0,-(sp)
    5380:	|         pea 18b91 <PutChar+0xaaf>
    5386:	|         jsr 17640 <KPrintF>
    538c:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    538e:	|         move.l 24(sp),-(sp)
    5392:	|         jsr 7488 <pauseFunction>
    5398:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    539a:	|     ,-- bra.s 53ac <abortFunction+0x38>
    539c:	|  ,--|-> moveq #24,d0
    539e:	|  |  |   add.l 24(sp),d0
    53a2:	|  |  |   move.l d0,-(sp)
    53a4:	|  |  |   jsr 154e4 <trimStack>
    53aa:	|  |  |   addq.l #4,sp
    53ac:	|  |  '-> movea.l 24(sp),a0
    53b0:	|  |      move.l 24(a0),d0
    53b4:	|  '----- bne.s 539c <abortFunction+0x28>
	FreeVec( fun -> compiledLines);
    53b6:	|         movea.l 24(sp),a0
    53ba:	|         move.l 4(a0),12(sp)
    53c0:	|         move.l 1cdda <SysBase>,d0
    53c6:	|         movea.l d0,a6
    53c8:	|         movea.l 12(sp),a1
    53cc:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    53d0:	|         clr.l 16(sp)
    53d4:	|     ,-- bra.s 53f4 <abortFunction+0x80>
    53d6:	|  ,--|-> movea.l 24(sp),a0
    53da:	|  |  |   move.l 20(a0),d1
    53de:	|  |  |   move.l 16(sp),d0
    53e2:	|  |  |   lsl.l #3,d0
    53e4:	|  |  |   add.l d1,d0
    53e6:	|  |  |   move.l d0,-(sp)
    53e8:	|  |  |   jsr 14dae <unlinkVar>
    53ee:	|  |  |   addq.l #4,sp
    53f0:	|  |  |   addq.l #1,16(sp)
    53f4:	|  |  '-> movea.l 24(sp),a0
    53f8:	|  |      move.l 8(a0),d0
    53fc:	|  |      cmp.l 16(sp),d0
    5400:	|  '----- bgt.s 53d6 <abortFunction+0x62>
	if( fun -> numLocals > 0) {
    5402:	|         movea.l 24(sp),a0
    5406:	|         move.l 8(a0),d0
    540a:	|     ,-- ble.s 5426 <abortFunction+0xb2>
		FreeVec(fun -> localVars);
    540c:	|     |   movea.l 24(sp),a0
    5410:	|     |   move.l 20(a0),8(sp)
    5416:	|     |   move.l 1cdda <SysBase>,d0
    541c:	|     |   movea.l d0,a6
    541e:	|     |   movea.l 8(sp),a1
    5422:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    5426:	|     '-> moveq #28,d0
    5428:	|         add.l 24(sp),d0
    542c:	|         move.l d0,-(sp)
    542e:	|         jsr 14dae <unlinkVar>
    5434:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    5436:	|         movea.l 24(sp),a0
    543a:	|         move.l 40(a0),d0
    543e:	|     ,-- beq.s 5450 <abortFunction+0xdc>
    5440:	|     |   movea.l 24(sp),a0
    5444:	|     |   move.l 40(a0),d0
    5448:	|     |   move.l d0,-(sp)
    544a:	'-----|-- jsr 5374 <abortFunction>(pc)
    544e:	      |   addq.l #4,sp
	FreeVec(fun);
    5450:	      '-> move.l 24(sp),4(sp)
    5456:	          move.l 1cdda <SysBase>,d0
    545c:	          movea.l d0,a6
    545e:	          movea.l 4(sp),a1
    5462:	          jsr -690(a6)
	fun = NULL;
    5466:	          clr.l 24(sp)
	KPrintF("abortFunction finished\n");
    546a:	          pea 18bab <PutChar+0xac9>
    5470:	          jsr 17640 <KPrintF>
    5476:	          addq.l #4,sp
}
    5478:	          nop
    547a:	          movea.l (sp)+,a6
    547c:	          lea 16(sp),sp
    5480:	          rts

00005482 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    5482:	          subq.l #8,sp
	int n = 0;
    5484:	          clr.l 4(sp)
	*killedMyself = FALSE;
    5488:	          movea.l 20(sp),a0
    548c:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    548e:	          move.l 1cd72 <allRunningFunctions>,(sp)
	while (fun) {
    5494:	   ,----- bra.s 54c2 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    5496:	,--|----> movea.l (sp),a0
    5498:	|  |      move.l (a0),d0
    549a:	|  |      cmp.l 12(sp),d0
    549e:	|  |  ,-- bne.s 54bc <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    54a0:	|  |  |   movea.l (sp),a0
    54a2:	|  |  |   move.w #1,54(a0)
			n++;
    54a8:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    54ac:	|  |  |   move.l (sp),d0
    54ae:	|  |  |   cmp.l 16(sp),d0
    54b2:	|  |  +-- bne.s 54bc <cancelAFunction+0x3a>
    54b4:	|  |  |   movea.l 20(sp),a0
    54b8:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    54bc:	|  |  '-> movea.l (sp),a0
    54be:	|  |      move.l 44(a0),(sp)
	while (fun) {
    54c2:	|  '----> tst.l (sp)
    54c4:	'-------- bne.s 5496 <cancelAFunction+0x14>
	}
	return n;
    54c6:	          move.l 4(sp),d0
}
    54ca:	          addq.l #8,sp
    54cc:	          rts

000054ce <completeTimers>:


void completeTimers () {
    54ce:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    54d0:	          move.l 1cd72 <allRunningFunctions>,(sp)

	while (thisFunction) {
    54d6:	   ,----- bra.s 54ec <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    54d8:	,--|----> movea.l (sp),a0
    54da:	|  |      move.b 56(a0),d0
    54de:	|  |  ,-- bne.s 54e6 <completeTimers+0x18>
    54e0:	|  |  |   movea.l (sp),a0
    54e2:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    54e6:	|  |  '-> movea.l (sp),a0
    54e8:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    54ec:	|  '----> tst.l (sp)
    54ee:	'-------- bne.s 54d8 <completeTimers+0xa>
	}
}
    54f0:	          nop
    54f2:	          nop
    54f4:	          addq.l #4,sp
    54f6:	          rts

000054f8 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    54f8:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    54fc:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    5502:	                                                             movea.l 80(sp),a0
    5506:	                                                             move.w 54(a0),d0
    550a:	,----------------------------------------------------------- beq.w 6398 <continueFunction+0xea0>
		abortFunction (fun);
    550e:	|                                                            move.l 80(sp),-(sp)
    5512:	|                                                            jsr 5374 <abortFunction>
    5518:	|                                                            addq.l #4,sp
		return TRUE;
    551a:	|                                                            moveq #1,d0
    551c:	|  ,-------------------------------------------------------- bra.w 63a2 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    5520:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    5526:	|  |  |                                                      movea.l 80(sp),a0
    552a:	|  |  |                                                      move.l 4(a0),d1
    552e:	|  |  |                                                      movea.l 80(sp),a0
    5532:	|  |  |                                                      move.l 36(a0),d0
    5536:	|  |  |                                                      lsl.l #3,d0
    5538:	|  |  |                                                      movea.l d1,a0
    553a:	|  |  |                                                      adda.l d0,a0
    553c:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    5542:	|  |  |                                                      movea.l 80(sp),a0
    5546:	|  |  |                                                      move.l 4(a0),d1
    554a:	|  |  |                                                      movea.l 80(sp),a0
    554e:	|  |  |                                                      move.l 36(a0),d0
    5552:	|  |  |                                                      lsl.l #3,d0
    5554:	|  |  |                                                      movea.l d1,a0
    5556:	|  |  |                                                      adda.l d0,a0
    5558:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    555c:	|  |  |                                                      moveq #41,d0
    555e:	|  |  |                                                      cmp.l 64(sp),d0
    5562:	|  |  |  ,-------------------------------------------------- bcs.w 634c <continueFunction+0xe54>
    5566:	|  |  |  |                                                   move.l 64(sp),d0
    556a:	|  |  |  |                                                   add.l d0,d0
    556c:	|  |  |  |                                                   movea.l d0,a0
    556e:	|  |  |  |                                                   adda.l #21882,a0
    5574:	|  |  |  |                                                   move.w (a0),d0
    5576:	|  |  |  |                                                   jmp (557a <continueFunction+0x82>,pc,d0.w)
    557a:	|  |  |  |                                                   bset d6,(a2)
    557c:	|  |  |  |                                                   ori.w #2670,(a4)
    5580:	|  |  |  |                                                   eori.w #2416,d6
    5584:	|  |  |  |                                                   bchg d4,d2
    5586:	|  |  |  |                                                   bclr d4,(a4)+
    5588:	|  |  |  |                                                   andi.l #181013194,d4
    558e:	|  |  |  |                                                   .short 0x0aca
    5590:	|  |  |  |                                                   .short 0x0aca
    5592:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    559a:	|  |  |  |                                                   .short 0x0aca
    559c:	|  |  |  |                                                   andi.w #906,-(a4)
    55a0:	|  |  |  |                                                   bchg d1,196(a2)
    55a4:	|  |  |  |                                                   bset d1,580(a4)
    55a8:	|  |  |  |                                                   bclr d1,2576(a2)
    55ac:	|  |  |  |                                                   andi.b #-56,2762(a2)
    55b2:	|  |  |  |                                                   .short 0x0aca
    55b4:	|  |  |  |                                                   eori.l #63572682,d0
    55ba:	|  |  |  |                                                   .short 0x0aca
    55bc:	|  |  |  |                                                   bchg d3,-(a2)
    55be:	|  |  |  |                                                   bchg #-36,(a2)
    55c2:	|  |  |  |                                                   .short 0x08cc
    55c4:	|  |  |  |                                                   addi.b #14,1038(a0)
    55ca:	|  |  |  |                                                   .short 0x040e
    55cc:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    55d0:	|  |  |  |                                                   ori.w #8232,(a0)
    55d4:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    55da:	|  |  |  |                                                   ori.w #12136,(a0)
    55de:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    55e4:	|  |  |  |                                                   ori.w #12328,(a0)
    55e8:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    55ee:	|  |  |  |                                                   add.l 44(sp),d1
    55f2:	|  |  |  |                                                   moveq #28,d0
    55f4:	|  |  |  |                                                   add.l 80(sp),d0
    55f8:	|  |  |  |                                                   move.l d1,-(sp)
    55fa:	|  |  |  |                                                   move.l d0,-(sp)
    55fc:	|  |  |  |                                                   jsr 1501a <copyVariable>
    5602:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    5604:	|  |  |  |                                                   move.l 80(sp),-(sp)
    5608:	|  |  |  |                                                   jsr 63a8 <finishFunction>
    560e:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    5610:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    5616:	|  |  |  |                                                   move.l 80(sp),-(sp)
    561a:	|  |  |  |                                                   jsr 74d8 <restartFunction>
    5620:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    5622:	|  |  |  |  ,----------------------------------------------- bra.w 6380 <continueFunction+0xe88>
				finishFunction (fun);
    5626:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    562a:	|  |  |  |  |                                                jsr 63a8 <finishFunction>
    5630:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5632:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    5636:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    563a:	|  |  |  |  +----------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    563e:	|  |  |  |  |                                                movea.l 80(sp),a0
    5642:	|  |  |  |  |                                                move.l 28(a0),d0
    5646:	|  |  |  |  |                                                moveq #2,d1
    5648:	|  |  |  |  |                                                cmp.l d0,d1
    564a:	|  |  |  |  |                                            ,-- beq.s 5656 <continueFunction+0x15e>
    564c:	|  |  |  |  |                                            |   moveq #4,d1
    564e:	|  |  |  |  |                                            |   cmp.l d0,d1
    5650:	|  |  |  |  |                                         ,--|-- beq.s 56a4 <continueFunction+0x1ac>
    5652:	|  |  |  |  |                                ,--------|--|-- bra.w 578c <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    5656:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    565a:	|  |  |  |  |                                |        |      jsr 7488 <pauseFunction>
    5660:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5662:	|  |  |  |  |                                |        |      moveq #24,d0
    5664:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    5668:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    566c:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    5670:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5674:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    5676:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    567a:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    567e:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5680:	|  |  |  |  |                                |        |      jsr 782e <startNewFunctionNum>
    5686:	|  |  |  |  |                                |        |      lea 20(sp),sp
    568a:	|  |  |  |  |                                |        |      tst.l d0
    568c:	|  |  |  |  |                                |        |  ,-- bne.s 5694 <continueFunction+0x19c>
    568e:	|  |  |  |  |                                |        |  |   clr.w d0
    5690:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 63a2 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    5694:	|  |  |  |  |                                |        |  '-> move.l 1cd72 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    569c:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    56a0:	|  |  |  |  |                                |  ,-----|----- bra.w 57a0 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    56a4:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    56a8:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    56ac:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    56b0:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    56b4:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    56b6:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    56b8:	|  |  |  |  |                                |  |            jsr 13842 <callBuiltIn>
    56be:	|  |  |  |  |                                |  |            lea 12(sp),sp
    56c2:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    56c6:	|  |  |  |  |                                |  |            moveq #5,d0
    56c8:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    56cc:	|  |  |  |  |                                |  |  ,-------- bcs.w 5788 <continueFunction+0x290>
    56d0:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    56d4:	|  |  |  |  |                                |  |  |         add.l d0,d0
    56d6:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    56d8:	|  |  |  |  |                                |  |  |         adda.l #22244,a0
    56de:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    56e0:	|  |  |  |  |                                |  |  |         jmp (56e4 <continueFunction+0x1ec>,pc,d0.w)
    56e4:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    56ea:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    56ee:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    56f4:	|  |  |  |  |                                |  |  |         divs.w d3,d5
    56f6:	|  |  |  |  |                                |  |  |         jsr 17640 <KPrintF>
    56fc:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    56fe:	|  |  |  |  |                                |  |  |         clr.w d0
    5700:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 63a2 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    5704:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    5708:	|  |  |  |  |                                |  |  |         jsr 7488 <pauseFunction>
    570e:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    5710:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    5714:	|  |  |  |  |                                |  |  |  ,----- bra.s 578a <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    5716:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    571a:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    571e:	|  |  |  |  |                                |  |  |  +----- bra.s 578a <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    5720:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    5724:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    572a:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    572c:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    5730:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5734:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5738:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    573a:	|  |  |  |  |                                |  |  |  |      jsr 15452 <setVariable>
    5740:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    5744:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    5748:	|  |  |  |  |                                |  |  |  |      jsr 7488 <pauseFunction>
    574e:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    5750:	|  |  |  |  |                                |  |  |  |      move.l 1cdaa <noStack>,d1
    5756:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    575a:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    575c:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    575e:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    5762:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5764:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5766:	|  |  |  |  |                                |  |  |  |      jsr 782e <startNewFunctionNum>
    576c:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    5770:	|  |  |  |  |                                |  |  |  |      tst.l d0
    5772:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 577a <continueFunction+0x282>
    5774:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    5776:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 63a2 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    577a:	|  |  |  |  |                                |  |  |  |  '-> move.l 1cd72 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5782:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    5786:	|  |  |  |  |                                |  |  |  +----- bra.s 578a <continueFunction+0x292>

						default:
						break;
    5788:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    578a:	|  |  |  |  |                                |  +-----'----X bra.s 57a0 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    578c:	|  |  |  |  |                                '--|----------> pea 18c0e <PutChar+0xb2c>
    5792:	|  |  |  |  |                                   |            jsr 17640 <KPrintF>
    5798:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    579a:	|  |  |  |  |                                   |            clr.w d0
    579c:	|  +--|--|--|-----------------------------------|----------- bra.w 63a2 <continueFunction+0xeaa>
			}
			break;
    57a0:	|  |  |  |  +-----------------------------------'----------X bra.w 6380 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    57a4:	|  |  |  |  |                                                moveq #28,d0
    57a6:	|  |  |  |  |                                                add.l 80(sp),d0
    57aa:	|  |  |  |  |                                                clr.l -(sp)
    57ac:	|  |  |  |  |                                                clr.l -(sp)
    57ae:	|  |  |  |  |                                                move.l d0,-(sp)
    57b0:	|  |  |  |  |                                                jsr 15452 <setVariable>
    57b6:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    57ba:	|  |  |  |  +----------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    57be:	|  |  |  |  |                                                move.l 68(sp),d1
    57c2:	|  |  |  |  |                                                moveq #28,d0
    57c4:	|  |  |  |  |                                                add.l 80(sp),d0
    57c8:	|  |  |  |  |                                                move.l d1,-(sp)
    57ca:	|  |  |  |  |                                                pea 5 <_start+0x5>
    57ce:	|  |  |  |  |                                                move.l d0,-(sp)
    57d0:	|  |  |  |  |                                                jsr 15452 <setVariable>
    57d6:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    57da:	|  |  |  |  +----------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    57de:	|  |  |  |  |                                                move.l 68(sp),d1
    57e2:	|  |  |  |  |                                                moveq #28,d0
    57e4:	|  |  |  |  |                                                add.l 80(sp),d0
    57e8:	|  |  |  |  |                                                move.l d1,-(sp)
    57ea:	|  |  |  |  |                                                pea 1 <_start+0x1>
    57ee:	|  |  |  |  |                                                move.l d0,-(sp)
    57f0:	|  |  |  |  |                                                jsr 15452 <setVariable>
    57f6:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    57fa:	|  |  |  |  +----------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    57fe:	|  |  |  |  |                                                moveq #28,d0
    5800:	|  |  |  |  |                                                add.l 80(sp),d0
    5804:	|  |  |  |  |                                                movea.l 80(sp),a0
    5808:	|  |  |  |  |                                                movea.l 20(a0),a0
    580c:	|  |  |  |  |                                                move.l 68(sp),d1
    5810:	|  |  |  |  |                                                lsl.l #3,d1
    5812:	|  |  |  |  |                                                add.l a0,d1
    5814:	|  |  |  |  |                                                move.l d0,-(sp)
    5816:	|  |  |  |  |                                                move.l d1,-(sp)
    5818:	|  |  |  |  |                                                jsr 1501a <copyVariable>
    581e:	|  |  |  |  |                                                addq.l #8,sp
    5820:	|  |  |  |  |                                                tst.w d0
    5822:	|  |  |  |  |  ,-------------------------------------------- bne.w 635e <continueFunction+0xe66>
    5826:	|  |  |  |  |  |                                             clr.w d0
    5828:	|  +--|--|--|--|-------------------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    582c:	|  |  |  |  |  |                                             moveq #28,d0
    582e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5832:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5834:	|  |  |  |  |  |                                             jsr 150a0 <getBoolean>
    583a:	|  |  |  |  |  |                                             addq.l #4,sp
    583c:	|  |  |  |  |  |                                             tst.w d0
    583e:	|  |  |  |  |  |                                      ,----- beq.s 585a <continueFunction+0x362>
    5840:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    5844:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5848:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    584a:	|  |  |  |  |  |                                      |      jsr 150a0 <getBoolean>
    5850:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5852:	|  |  |  |  |  |                                      |      tst.w d0
    5854:	|  |  |  |  |  |                                      +----- beq.s 585a <continueFunction+0x362>
    5856:	|  |  |  |  |  |                                      |      moveq #1,d0
    5858:	|  |  |  |  |  |                                      |  ,-- bra.s 585c <continueFunction+0x364>
    585a:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    585c:	|  |  |  |  |  |                                         '-> moveq #28,d1
    585e:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5862:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5864:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5868:	|  |  |  |  |  |                                             move.l d1,-(sp)
    586a:	|  |  |  |  |  |                                             jsr 15452 <setVariable>
    5870:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5874:	|  |  |  |  |  |                                             moveq #24,d0
    5876:	|  |  |  |  |  |                                             add.l 80(sp),d0
    587a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    587c:	|  |  |  |  |  |                                             jsr 154e4 <trimStack>
    5882:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5884:	|  |  |  |  +--|-------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5888:	|  |  |  |  |  |                                             moveq #28,d0
    588a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    588e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5890:	|  |  |  |  |  |                                             jsr 150a0 <getBoolean>
    5896:	|  |  |  |  |  |                                             addq.l #4,sp
    5898:	|  |  |  |  |  |                                             tst.w d0
    589a:	|  |  |  |  |  |                                         ,-- bne.s 58b2 <continueFunction+0x3ba>
    589c:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    58a0:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    58a4:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    58a6:	|  |  |  |  |  |                                         |   jsr 150a0 <getBoolean>
    58ac:	|  |  |  |  |  |                                         |   addq.l #4,sp
    58ae:	|  |  |  |  |  |                                         |   tst.w d0
    58b0:	|  |  |  |  |  |                                      ,--|-- beq.s 58b6 <continueFunction+0x3be>
    58b2:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    58b4:	|  |  |  |  |  |                                      |  ,-- bra.s 58b8 <continueFunction+0x3c0>
    58b6:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    58b8:	|  |  |  |  |  |                                         '-> moveq #28,d1
    58ba:	|  |  |  |  |  |                                             add.l 80(sp),d1
    58be:	|  |  |  |  |  |                                             move.l d0,-(sp)
    58c0:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    58c4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    58c6:	|  |  |  |  |  |                                             jsr 15452 <setVariable>
    58cc:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    58d0:	|  |  |  |  |  |                                             moveq #24,d0
    58d2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    58d6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    58d8:	|  |  |  |  |  |                                             jsr 154e4 <trimStack>
    58de:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    58e0:	|  |  |  |  +--|-------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    58e4:	|  |  |  |  |  |                                             move.l 68(sp),d1
    58e8:	|  |  |  |  |  |                                             moveq #28,d0
    58ea:	|  |  |  |  |  |                                             add.l 80(sp),d0
    58ee:	|  |  |  |  |  |                                             move.l d1,-(sp)
    58f0:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    58f4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    58f6:	|  |  |  |  |  |                                             jsr 15452 <setVariable>
    58fc:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5900:	|  |  |  |  +--|-------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    5904:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5908:	|  |  |  |  |  |                                             moveq #28,d0
    590a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    590e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5910:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5914:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5916:	|  |  |  |  |  |                                             jsr 15452 <setVariable>
    591c:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5920:	|  |  |  |  +--|-------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5924:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5928:	|  |  |  |  |  |                                             moveq #28,d0
    592a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    592e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5930:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5934:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5936:	|  |  |  |  |  |                                             jsr 15452 <setVariable>
    593c:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5940:	|  |  |  |  +--|-------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5944:	|  |  |  |  |  |                                             move.l 1cd3a <dialogValue>,d0
    594a:	|  |  |  |  |  |                                             moveq #1,d1
    594c:	|  |  |  |  |  |                                             cmp.l d0,d1
    594e:	|  |  |  |  |  |  ,----------------------------------------- beq.w 6362 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    5952:	|  |  |  |  |  |  |                                          pea 18c23 <PutChar+0xb41>
    5958:	|  |  |  |  |  |  |                                          jsr 17640 <KPrintF>
    595e:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5960:	|  |  |  |  |  |  |                                          clr.w d0
    5962:	|  +--|--|--|--|--|----------------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5966:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    596a:	|  |  |  |  |  |  |                                          moveq #28,d0
    596c:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    5970:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5972:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5974:	|  |  |  |  |  |  |                                          jsr 14be4 <loadStringToVar>
    597a:	|  |  |  |  |  |  |                                          addq.l #8,sp
    597c:	|  |  |  |  |  |  |                                          tst.w d0
    597e:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 6366 <continueFunction+0xe6e>
					return FALSE;
    5982:	|  |  |  |  |  |  |  |                                       clr.w d0
    5984:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5988:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    598c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5990:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5992:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5994:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5996:	|  |  |  |  |  |  |  |                                ,----- beq.s 59f4 <continueFunction+0x4fc>
    5998:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    599a:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    599c:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5b88 <continueFunction+0x690>
    59a0:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    59a2:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 59ae <continueFunction+0x4b6>
    59a4:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    59a6:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    59a8:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 59f4 <continueFunction+0x4fc>
    59aa:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5b88 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    59ae:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    59b0:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    59b4:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 59e0 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    59b6:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    59b8:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    59bc:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    59be:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    59c0:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    59c2:	|  |  |  |  |  |  |  |              |                 |  |   jsr 15452 <setVariable>
    59c8:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    59cc:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    59ce:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    59d2:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    59d4:	|  |  |  |  |  |  |  |              |                 |  |   jsr 154e4 <trimStack>
    59da:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    59dc:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5b9e <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    59e0:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 18c64 <PutChar+0xb82>
    59e6:	|  |  |  |  |  |  |  |              |  |              |      jsr 17640 <KPrintF>
    59ec:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    59ee:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    59f0:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 63a2 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    59f4:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    59f8:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    59fc:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    5a00:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    5a02:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5a18 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    5a04:	|  |  |  |  |  |  |  |              |  |                 |   pea 18ca0 <PutChar+0xbbe>
    5a0a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 17640 <KPrintF>
    5a10:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5a12:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5a14:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 63a2 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5a18:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    5a1a:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5a1e:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5a20:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5a24:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5a28:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5a2a:	|  |  |  |  |  |  |  |              |  |                     jsr 14b60 <getValueType>
    5a30:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5a34:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5a36:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5a3e <continueFunction+0x546>
    5a38:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5a3a:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 63a2 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5a3e:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    5a42:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5a46:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5a48:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5a4a:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5a4c:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5a6e <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5a4e:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5a52:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5a54:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    5a58:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5a5c:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5a60:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5a62:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5a64:	|  |  |  |  |  |  |  |              |  |                 |   jsr 147ea <fastArrayGetByIndex>
    5a6a:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5a6c:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5a8e <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5a6e:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5a72:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5a74:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    5a78:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5a7c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5a80:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5a82:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5a84:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5a86:	|  |  |  |  |  |  |  |              |  |              |      jsr 15474 <stackGetByIndex>
    5a8c:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5a8e:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    5a92:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5a94:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5a98:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5a9a:	|  |  |  |  |  |  |  |              |  |                     jsr 154e4 <trimStack>
    5aa0:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5aa2:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    5aa6:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5ac2 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5aa8:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5aaa:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    5aae:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5ab0:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5ab2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5ab4:	|  |  |  |  |  |  |  |              |  |                 |   jsr 15452 <setVariable>
    5aba:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5abe:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5b9c <continueFunction+0x6a4>
						switch (com) {
    5ac2:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5ac4:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    5ac8:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5ad6 <continueFunction+0x5de>
    5aca:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5acc:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    5ad0:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5b20 <continueFunction+0x628>
    5ad2:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5b68 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5ad6:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    5ada:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5ade:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5ae2:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5ae4:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14b60 <getValueType>
    5aea:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5aee:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5af0:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5af8 <continueFunction+0x600>
    5af2:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5af4:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5b82 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5af8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5afa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5afc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    5b00:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5b02:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    5b06:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    5b08:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 15452 <setVariable>
    5b0e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5b12:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5b14:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5b16:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    5b1a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5b1e:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5b86 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5b20:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    5b24:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5b28:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5b2c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5b2e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14b60 <getValueType>
    5b34:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5b38:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5b3a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5b40 <continueFunction+0x648>
    5b3c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5b3e:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5b82 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5b40:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5b42:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5b44:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    5b48:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5b4a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5b4e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5b50:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 15452 <setVariable>
    5b56:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5b5a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5b5c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5b5e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5b62:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5b66:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5b86 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5b68:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5b6a:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    5b6e:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5b70:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5b74:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 1501a <copyVariable>
    5b7a:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5b7c:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5b7e:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5b9c <continueFunction+0x6a4>
    5b80:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5b82:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 63a2 <continueFunction+0xeaa>
				break;
    5b86:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5b9c <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5b88:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18cbe <PutChar+0xbdc>
    5b8e:	|  |  |  |  |  |  |  |                 |  |                  jsr 17640 <KPrintF>
    5b94:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5b96:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5b98:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 63a2 <continueFunction+0xeaa>
				break;
    5b9c:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5b9e:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 6380 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5ba2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5ba6:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5baa:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5bac:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5bae:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5bb0:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5bbe <continueFunction+0x6c6>
    5bb2:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5bb4:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5bb6:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5c6a <continueFunction+0x772>
    5bba:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5cc8 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5bbe:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5bc2:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5bc6:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5bca:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5bcc:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5be2 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    5bce:	|  |  |  |  |  |  |  |                             |  |  |   pea 18ca0 <PutChar+0xbbe>
    5bd4:	|  |  |  |  |  |  |  |                             |  |  |   jsr 17640 <KPrintF>
    5bda:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5bdc:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5bde:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 63a2 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5be2:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5be4:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5be8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5bea:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5bee:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5bf2:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5bf4:	|  |  |  |  |  |  |  |                             |  |      jsr 14b60 <getValueType>
    5bfa:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5bfe:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5c00:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5c08 <continueFunction+0x710>
    5c02:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5c04:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 63a2 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5c08:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5c0c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5c10:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5c14:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5c16:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5c1a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5c1c:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    5c20:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5c24:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5c28:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5c2a:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5c2c:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5c2e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5c30:	|  |  |  |  |  |  |  |                             |  |      jsr 76da <stackSetByIndex>
    5c36:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5c3a:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5c3c:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5c44 <continueFunction+0x74c>
						return FALSE;
    5c3e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5c40:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 63a2 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5c44:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5c46:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5c4a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5c4c:	|  |  |  |  |  |  |  |                             |  |      jsr 154e4 <trimStack>
    5c52:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5c54:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5c56:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5c5a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5c5c:	|  |  |  |  |  |  |  |                             |  |      jsr 154e4 <trimStack>
    5c62:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5c64:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5c66:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 6380 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5c6a:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5c6c:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5c70:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5c72:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5c76:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5c7a:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5c7c:	|  |  |  |  |  |  |  |                             |         jsr 14b60 <getValueType>
    5c82:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5c86:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5c88:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5c90 <continueFunction+0x798>
    5c8a:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5c8c:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 63a2 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5c90:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5c94:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5c96:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5c9a:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5c9e:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5ca2:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5ca4:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5ca6:	|  |  |  |  |  |  |  |                             |         jsr 147ea <fastArrayGetByIndex>
    5cac:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5cae:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5cb2:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5cc2 <continueFunction+0x7ca>
    5cb4:	|  |  |  |  |  |  |  |                             |     |   pea 18ce2 <PutChar+0xc00>
    5cba:	|  |  |  |  |  |  |  |                             |     |   jsr 17640 <KPrintF>
    5cc0:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5cc2:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5cc4:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 63a2 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5cc8:	|  |  |  |  |  |  |  |                             '-------> pea 18cbe <PutChar+0xbdc>
    5cce:	|  |  |  |  |  |  |  |                                       jsr 17640 <KPrintF>
    5cd4:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5cd6:	|  |  |  |  |  |  |  |                                       clr.w d0
    5cd8:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5cdc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5ce0:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5ce4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ce8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5cea:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5cec:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5cee:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5cf2:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5cf6:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5cf8:	|  |  |  |  |  |  |  |                                       jsr 14b60 <getValueType>
    5cfe:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5d02:	|  |  |  |  |  |  |  |                                       tst.w d0
    5d04:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5d0c <continueFunction+0x814>
    5d06:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5d08:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 63a2 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5d0c:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5d10:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5d12:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5d16:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d18:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d1c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d1e:	|  |  |  |  |  |  |  |                                       jsr 15452 <setVariable>
    5d24:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5d28:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5d2c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5d2e:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5d30:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5d34:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5d38:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5d3c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5d3e:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5d40:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d42:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d46:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d48:	|  |  |  |  |  |  |  |                                       jsr 15452 <setVariable>
    5d4e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5d52:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5d56:	|  |  |  |  |  |  |  |                                       move.l 1cd88 <globalVars>,d1
    5d5c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5d60:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5d62:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5d64:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d66:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d6a:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5d6e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5d70:	|  |  |  |  |  |  |  |                                       jsr 14b60 <getValueType>
    5d76:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5d7a:	|  |  |  |  |  |  |  |                                       tst.w d0
    5d7c:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5d84 <continueFunction+0x88c>
    5d7e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5d80:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 63a2 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5d84:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5d88:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5d8a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5d8e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d90:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d94:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d96:	|  |  |  |  |  |  |  |                                       jsr 15452 <setVariable>
    5d9c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5da0:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5da4:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5da6:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5da8:	|  |  |  |  |  |  |  |                                       movea.l 1cd88 <globalVars>,a0
    5dae:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5db2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5db4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5db6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5db8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5dbc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5dbe:	|  |  |  |  |  |  |  |                                       jsr 15452 <setVariable>
    5dc4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5dc8:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5dcc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5dd0:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5dd4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5dd8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5dda:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5ddc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5dde:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5de2:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5de6:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5de8:	|  |  |  |  |  |  |  |                                       jsr 14b60 <getValueType>
    5dee:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5df2:	|  |  |  |  |  |  |  |                                       tst.w d0
    5df4:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5dfc <continueFunction+0x904>
    5df6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5df8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 63a2 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5dfc:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5e00:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5e02:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5e06:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5e08:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e0c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e0e:	|  |  |  |  |  |  |  |                                       jsr 15452 <setVariable>
    5e14:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5e18:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5e1c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5e1e:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5e20:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5e24:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5e28:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5e2c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5e2e:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5e30:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5e32:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e36:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e38:	|  |  |  |  |  |  |  |                                       jsr 15452 <setVariable>
    5e3e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5e42:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5e46:	|  |  |  |  |  |  |  |                                       move.l 1cd88 <globalVars>,d1
    5e4c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5e50:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5e52:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5e54:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e56:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e5a:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5e5e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5e60:	|  |  |  |  |  |  |  |                                       jsr 14b60 <getValueType>
    5e66:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5e6a:	|  |  |  |  |  |  |  |                                       tst.w d0
    5e6c:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5e74 <continueFunction+0x97c>
    5e6e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5e70:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 63a2 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5e74:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5e78:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5e7a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5e7e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5e80:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e84:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e86:	|  |  |  |  |  |  |  |                                       jsr 15452 <setVariable>
    5e8c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5e90:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5e94:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5e96:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5e98:	|  |  |  |  |  |  |  |                                       movea.l 1cd88 <globalVars>,a0
    5e9e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ea2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ea4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5ea6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ea8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5eac:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5eae:	|  |  |  |  |  |  |  |                                       jsr 15452 <setVariable>
    5eb4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5eb8:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5ebc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5ec0:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5ec4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ec8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5eca:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5ecc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5ece:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ed2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ed4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ed6:	|  |  |  |  |  |  |  |                                       jsr 1501a <copyVariable>
    5edc:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5ede:	|  |  |  |  |  |  |  |                                       tst.w d0
    5ee0:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 636a <continueFunction+0xe72>
    5ee4:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5ee6:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5eea:	|  |  |  |  |  |  |  |  |                                    move.l 1cd88 <globalVars>,d1
    5ef0:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5ef4:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5ef6:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5ef8:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5efa:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5efe:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5f00:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5f02:	|  |  |  |  |  |  |  |  |                                    jsr 1501a <copyVariable>
    5f08:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5f0a:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5f0c:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 636e <continueFunction+0xe76>
    5f10:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5f12:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5f16:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5f18:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5f1c:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1cd88 <globalVars>,a0
    5f22:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5f26:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5f28:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5f2a:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5f2c:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5f2e:	|  |  |  |  |  |  |  |  |  |                                 jsr 1501a <copyVariable>
    5f34:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5f36:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5f38:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 6372 <continueFunction+0xe7a>
    5f3c:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5f3e:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5f42:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5f44:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5f48:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5f4a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5f4e:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5f50:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5f52:	|  |  |  |  |  |  |  |  |  |  |                              jsr 1439c <addVarToStack>
    5f58:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5f5a:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5f5c:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 6376 <continueFunction+0xe7e>
    5f60:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5f62:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5f66:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5f68:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5f6c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5f6e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5f72:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5f74:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5f76:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 14422 <addVarToStackQuick>
    5f7c:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5f7e:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5f80:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 637a <continueFunction+0xe82>
    5f84:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5f86:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5f8c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5f90:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5f92:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 150a0 <getBoolean>
    5f98:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5f9c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5fa6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5faa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5fac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 15452 <setVariable>
    5fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5fbc:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 150a0 <getBoolean>
    5fce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 637e <continueFunction+0xe86>
				advanceNow = FALSE;
    5fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 637e <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5ff6:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    6000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    6002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    6006:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    600a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    600c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14b60 <getValueType>
    6012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    6016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    6018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 6020 <continueFunction+0xb28>
    601a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    601c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 63a2 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    6020:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    6024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    6026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    6028:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    602a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    602e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    6030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    6034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    6036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 15452 <setVariable>
    603c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    6040:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6380 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    6044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    6048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    604c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 6336 <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    6050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    6052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    6056:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 60d2 <continueFunction+0xbda>
    6058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    605a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    605e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 611c <continueFunction+0xc24>
    6062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    6064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    6068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 6076 <continueFunction+0xb7e>
    606a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    606c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    6070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 60a4 <continueFunction+0xbac>
    6072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 611c <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    6076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    6078:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    607c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    6080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    6084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    6086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    6088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14496 <addVariablesInSecond>
    608e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    6090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    6092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    6096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    6098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 154e4 <trimStack>
    609e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    60a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 634a <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    60a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    60a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    60aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    60ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    60b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    60b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    60b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14554 <compareVariablesInSecond>
    60bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    60be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    60c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    60c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    60c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 154e4 <trimStack>
    60cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    60ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 634a <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    60d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    60d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    60d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    60dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    60e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    60e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    60e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14554 <compareVariablesInSecond>
    60ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    60ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    60ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    60f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    60f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 154e4 <trimStack>
    60fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    60fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    6100:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    6104:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    6106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    6108:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    610a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    6110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    6114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    6118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 634a <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    611c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    6120:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    6124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    612a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    612e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    6130:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14b60 <getValueType>
    6136:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    613a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    613c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 6144 <continueFunction+0xc4c>
    613e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    6140:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 63a2 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    6144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    6146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    614a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    614c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    6150:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    6154:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    6156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14b60 <getValueType>
    615c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    6160:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    6162:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 616a <continueFunction+0xc72>
    6164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    6166:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 63a2 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    616a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    616c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    6170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6172:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 154e4 <trimStack>
    6178:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    617a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    617c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    6180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    6182:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    6184:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 6348 <continueFunction+0xe50>
    6188:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    618a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    618c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #24984,a0
    6192:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    6194:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (6198 <continueFunction+0xca0>,pc,d0.w)
    6198:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    619c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    619e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    61a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    61a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    61b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    61b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    61c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    61c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    61cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    61d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    61d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    61d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17fcc <__mulsi3>
    61da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    61dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    61de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    61e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    61e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    61e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    61ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    61ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15452 <setVariable>
    61f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    61f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 634a <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    61fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    61fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6202:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    6204:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    620a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    620c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6212:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15452 <setVariable>
    6218:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    621c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 634a <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    6220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    622a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    622c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18078 <__modsi3>
    6232:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    6236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    623c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    623e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6244:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15452 <setVariable>
    624a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    624e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 634a <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    6252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    625a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    625c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    625e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1804a <__divsi3>
    6264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    6268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    626a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    626e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15452 <setVariable>
    627c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 634a <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    6284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    628c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    628e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    6290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    629c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    629e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    62a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    62a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15452 <setVariable>
    62aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    62ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 634a <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    62b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    62b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    62ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    62bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    62be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    62c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    62c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    62c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    62c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    62ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    62cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    62d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    62d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15452 <setVariable>
    62d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    62dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 634a <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    62de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    62e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    62e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    62e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    62ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    62ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    62ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    62f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    62f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    62f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    62f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    62fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    62fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15452 <setVariable>
    6304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 634a <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    630a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    630e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    6316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    631a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    631c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    631e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    632a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 15452 <setVariable>
    6330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 634a <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    6336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18d03 <PutChar+0xc21>
    633c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 17640 <KPrintF>
    6342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    6344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    6346:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 63a2 <continueFunction+0xeaa>
						break;
    6348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    634a:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 6380 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    634c:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 18d1b <PutChar+0xc39>
    6352:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 17640 <KPrintF>
    6358:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    635a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    635c:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 63a2 <continueFunction+0xeaa>
			break;
    635e:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    6360:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    6362:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    6364:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    6366:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    6368:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    636a:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    636c:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    636e:	|  |  |     |              '--|--|--|--|-------------------> nop
    6370:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    6372:	|  |  |     |                 '--|--|--|-------------------> nop
    6374:	|  |  |     +--------------------|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    6376:	|  |  |     |                    '--|--|-------------------> nop
    6378:	|  |  |     +-----------------------|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    637a:	|  |  |     |                       '--|-------------------> nop
    637c:	|  |  |     +--------------------------|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    637e:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    6380:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    6384:	+--|--|----------------------------------------------------- beq.s 6398 <continueFunction+0xea0>
    6386:	|  |  |                                                      movea.l 80(sp),a0
    638a:	|  |  |                                                      move.l 36(a0),d0
    638e:	|  |  |                                                      addq.l #1,d0
    6390:	|  |  |                                                      movea.l 80(sp),a0
    6394:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    6398:	'--|--|----------------------------------------------------> tst.w 74(sp)
    639c:	   |  '----------------------------------------------------- bne.w 5520 <continueFunction+0x28>

	}
	return TRUE;
    63a0:	   |                                                         moveq #1,d0
}
    63a2:	   '-------------------------------------------------------> lea 76(sp),sp
    63a6:	                                                             rts

000063a8 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    63a8:	    move.l 4(sp),d0
    63ac:	    move.l d0,-(sp)
    63ae:	    pea 18d47 <PutChar+0xc65>
    63b4:	    jsr 17640 <KPrintF>
    63ba:	    addq.l #8,sp

	pauseFunction (fun);
    63bc:	    move.l 4(sp),-(sp)
    63c0:	    jsr 7488 <pauseFunction>
    63c6:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    63c8:	    movea.l 1c754 <currentEvents>,a0
    63ce:	    move.l 20(a0),d0
    63d2:	    cmp.l 4(sp),d0
    63d6:	,-- beq.s 63e4 <finishFunction+0x3c>
		unloadFunction (fun);
    63d8:	|   move.l 4(sp),-(sp)
    63dc:	|   jsr 787a <unloadFunction>
    63e2:	|   addq.l #4,sp
	}	
}
    63e4:	'-> nop
    63e6:	    rts

000063e8 <freezeSubs>:

void freezeSubs () {
    63e8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    63ea:	          move.l 1cd72 <allRunningFunctions>,(sp)

	while (thisFunction) {
    63f0:	   ,----- bra.s 640e <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    63f2:	,--|----> movea.l (sp),a0
    63f4:	|  |      move.w 52(a0),d0
    63f8:	|  |  ,-- bne.s 6408 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    63fa:	|  |  |   movea.l (sp),a0
    63fc:	|  |  |   move.b 56(a0),d0
    6400:	|  |  |   addq.b #1,d0
    6402:	|  |  |   movea.l (sp),a0
    6404:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    6408:	|  |  '-> movea.l (sp),a0
    640a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    640e:	|  '----> tst.l (sp)
    6410:	'-------- bne.s 63f2 <freezeSubs+0xa>
	}
}
    6412:	          nop
    6414:	          nop
    6416:	          addq.l #4,sp
    6418:	          rts

0000641a <handleInput>:

BOOL handleInput () {
    641a:	             lea -16(sp),sp
    641e:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    6420:	             move.l 1ceea <overRegion>,d0
    6426:	         ,-- bne.s 642e <handleInput+0x14>
    6428:	         |   jsr 15d9c <getOverRegion>

	if (input.justMoved) {
    642e:	         '-> move.w 1cd90 <input+0x4>,d0
    6434:	         ,-- beq.s 6472 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    6436:	         |   movea.l 1c754 <currentEvents>,a0
    643c:	         |   move.l 16(a0),d0
    6440:	         +-- beq.s 6472 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6442:	         |   move.l 1cdaa <noStack>,d1
    6448:	         |   movea.l 1c754 <currentEvents>,a0
    644e:	         |   move.l 16(a0),d0
    6452:	         |   pea 1 <_start+0x1>
    6456:	         |   move.l d1,-(sp)
    6458:	         |   clr.l -(sp)
    645a:	         |   clr.l -(sp)
    645c:	         |   move.l d0,-(sp)
    645e:	         |   jsr 782e <startNewFunctionNum>
    6464:	         |   lea 20(sp),sp
    6468:	         |   tst.l d0
    646a:	         +-- bne.s 6472 <handleInput+0x58>
    646c:	         |   clr.w d0
    646e:	,--------|-- bra.w 6678 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    6472:	|        '-> clr.w 1cd90 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    6478:	|            move.l 1cda2 <lastRegion>,d1
    647e:	|            move.l 1ceea <overRegion>,d0
    6484:	|            cmp.l d1,d0
    6486:	|  ,-------- beq.w 655e <handleInput+0x144>
    648a:	|  |         movea.l 1c754 <currentEvents>,a0
    6490:	|  |         move.l 20(a0),d0
    6494:	|  +-------- beq.w 655e <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    6498:	|  |         moveq #12,d0
    649a:	|  |         move.l d0,16(sp)
    649e:	|  |         clr.l 12(sp)
    64a2:	|  |         move.l 1cdda <SysBase>,d0
    64a8:	|  |         movea.l d0,a6
    64aa:	|  |         move.l 16(sp),d0
    64ae:	|  |         move.l 12(sp),d1
    64b2:	|  |         jsr -684(a6)
    64b6:	|  |         move.l d0,8(sp)
    64ba:	|  |         move.l 8(sp),d0
    64be:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    64c2:	|  |         move.l 4(sp),d0
    64c6:	|  |     ,-- bne.s 64dc <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    64c8:	|  |     |   pea 18d62 <PutChar+0xc80>
    64ce:	|  |     |   jsr 17640 <KPrintF>
    64d4:	|  |     |   addq.l #4,sp
			return FALSE;
    64d6:	|  |     |   clr.w d0
    64d8:	+--|-----|-- bra.w 6678 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    64dc:	|  |     '-> movea.l 4(sp),a0
    64e0:	|  |         clr.l (a0)
		if (overRegion) {
    64e2:	|  |         move.l 1ceea <overRegion>,d0
    64e8:	|  |  ,----- beq.s 6510 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    64ea:	|  |  |      movea.l 1ceea <overRegion>,a0
    64f0:	|  |  |      movea.l 28(a0),a0
    64f4:	|  |  |      move.l 4(a0),d1
    64f8:	|  |  |      move.l 4(sp),d0
    64fc:	|  |  |      move.l d1,-(sp)
    64fe:	|  |  |      pea 7 <_start+0x7>
    6502:	|  |  |      move.l d0,-(sp)
    6504:	|  |  |      jsr 15452 <setVariable>
    650a:	|  |  |      lea 12(sp),sp
    650e:	|  |  |  ,-- bra.s 6526 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    6510:	|  |  '--|-> move.l 4(sp),d0
    6514:	|  |     |   clr.l -(sp)
    6516:	|  |     |   pea 1 <_start+0x1>
    651a:	|  |     |   move.l d0,-(sp)
    651c:	|  |     |   jsr 15452 <setVariable>
    6522:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    6526:	|  |     '-> movea.l 4(sp),a0
    652a:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    652e:	|  |         movea.l 1c754 <currentEvents>,a0
    6534:	|  |         move.l 20(a0),d0
    6538:	|  |         pea 1 <_start+0x1>
    653c:	|  |         lea 8(sp),a0
    6540:	|  |         move.l a0,-(sp)
    6542:	|  |         clr.l -(sp)
    6544:	|  |         pea 1 <_start+0x1>
    6548:	|  |         move.l d0,-(sp)
    654a:	|  |         jsr 771e <startNewFunctionLoaded>
    6550:	|  |         lea 20(sp),sp
    6554:	|  |         tst.l d0
    6556:	|  +-------- bne.s 655e <handleInput+0x144>
    6558:	|  |         clr.w d0
    655a:	+--|-------- bra.w 6678 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    655e:	|  '-------> move.w 1cd92 <input+0x6>,d0
    6564:	|        ,-- beq.s 65a2 <handleInput+0x188>
    6566:	|        |   movea.l 1c754 <currentEvents>,a0
    656c:	|        |   move.l 4(a0),d0
    6570:	|        +-- beq.s 65a2 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6572:	|        |   move.l 1cdaa <noStack>,d1
    6578:	|        |   movea.l 1c754 <currentEvents>,a0
    657e:	|        |   move.l 4(a0),d0
    6582:	|        |   pea 1 <_start+0x1>
    6586:	|        |   move.l d1,-(sp)
    6588:	|        |   clr.l -(sp)
    658a:	|        |   clr.l -(sp)
    658c:	|        |   move.l d0,-(sp)
    658e:	|        |   jsr 782e <startNewFunctionNum>
    6594:	|        |   lea 20(sp),sp
    6598:	|        |   tst.l d0
    659a:	|        +-- bne.s 65a2 <handleInput+0x188>
    659c:	|        |   clr.w d0
    659e:	+--------|-- bra.w 6678 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    65a2:	|        '-> move.w 1cd94 <input+0x8>,d0
    65a8:	|        ,-- beq.s 65e6 <handleInput+0x1cc>
    65aa:	|        |   movea.l 1c754 <currentEvents>,a0
    65b0:	|        |   move.l 12(a0),d0
    65b4:	|        +-- beq.s 65e6 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    65b6:	|        |   move.l 1cdaa <noStack>,d1
    65bc:	|        |   movea.l 1c754 <currentEvents>,a0
    65c2:	|        |   move.l 12(a0),d0
    65c6:	|        |   pea 1 <_start+0x1>
    65ca:	|        |   move.l d1,-(sp)
    65cc:	|        |   clr.l -(sp)
    65ce:	|        |   clr.l -(sp)
    65d0:	|        |   move.l d0,-(sp)
    65d2:	|        |   jsr 782e <startNewFunctionNum>
    65d8:	|        |   lea 20(sp),sp
    65dc:	|        |   tst.l d0
    65de:	|        +-- bne.s 65e6 <handleInput+0x1cc>
    65e0:	|        |   clr.w d0
    65e2:	+--------|-- bra.w 6678 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    65e6:	|        '-> move.w 1cd8c <input>,d0
    65ec:	|        ,-- beq.s 6624 <handleInput+0x20a>
    65ee:	|        |   movea.l 1c754 <currentEvents>,a0
    65f4:	|        |   move.l (a0),d0
    65f6:	|        +-- beq.s 6624 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    65f8:	|        |   move.l 1cdaa <noStack>,d1
    65fe:	|        |   movea.l 1c754 <currentEvents>,a0
    6604:	|        |   move.l (a0),d0
    6606:	|        |   pea 1 <_start+0x1>
    660a:	|        |   move.l d1,-(sp)
    660c:	|        |   clr.l -(sp)
    660e:	|        |   clr.l -(sp)
    6610:	|        |   move.l d0,-(sp)
    6612:	|        |   jsr 782e <startNewFunctionNum>
    6618:	|        |   lea 20(sp),sp
    661c:	|        |   tst.l d0
    661e:	|        +-- bne.s 6624 <handleInput+0x20a>
    6620:	|        |   clr.w d0
    6622:	+--------|-- bra.s 6678 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    6624:	|        '-> move.w 1cd8e <input+0x2>,d0
    662a:	|        ,-- beq.s 6666 <handleInput+0x24c>
    662c:	|        |   movea.l 1c754 <currentEvents>,a0
    6632:	|        |   move.l 8(a0),d0
    6636:	|        +-- beq.s 6666 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6638:	|        |   move.l 1cdaa <noStack>,d1
    663e:	|        |   movea.l 1c754 <currentEvents>,a0
    6644:	|        |   move.l 8(a0),d0
    6648:	|        |   pea 1 <_start+0x1>
    664c:	|        |   move.l d1,-(sp)
    664e:	|        |   clr.l -(sp)
    6650:	|        |   clr.l -(sp)
    6652:	|        |   move.l d0,-(sp)
    6654:	|        |   jsr 782e <startNewFunctionNum>
    665a:	|        |   lea 20(sp),sp
    665e:	|        |   tst.l d0
    6660:	|        +-- bne.s 6666 <handleInput+0x24c>
    6662:	|        |   clr.w d0
    6664:	+--------|-- bra.s 6678 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    6666:	|        '-> move.l 1ceea <overRegion>,d0
    666c:	|            move.l d0,1cda2 <lastRegion>
	return runSludge ();
    6672:	|            jsr 74f2 <runSludge>
}
    6678:	'----------> movea.l (sp)+,a6
    667a:	             lea 16(sp),sp
    667e:	             rts

00006680 <initSludge>:

BOOL initSludge (char * filename) {
    6680:	             lea -292(sp),sp
    6684:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    6688:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    668c:	             jsr b04a <makeNullAnim>
    6692:	             move.l d0,1ccde <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    6698:	             pea 1cd84 <gameVersion>
    669e:	             pea 18d98 <PutChar+0xcb6>
    66a4:	             pea 45 <_start+0x45>
    66a8:	             pea 47 <_start+0x47>
    66ac:	             move.l 332(sp),-(sp)
    66b0:	             jsr 7118 <openAndVerify>
    66b6:	             lea 20(sp),sp
    66ba:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    66be:	         ,-- bne.s 66c6 <initSludge+0x46>
    66c0:	         |   clr.w d0
    66c2:	,--------|-- bra.w 6dee <initSludge+0x76e>
	if (FGetC (fp)) {
    66c6:	|        '-> move.l 288(sp),284(sp)
    66cc:	|            move.l 1cde2 <DOSBase>,d0
    66d2:	|            movea.l d0,a6
    66d4:	|            move.l 284(sp),d1
    66d8:	|            jsr -306(a6)
    66dc:	|            move.l d0,280(sp)
    66e0:	|            move.l 280(sp),d0
    66e4:	|  ,-------- beq.w 688e <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    66e8:	|  |         move.l 288(sp),-(sp)
    66ec:	|  |         jsr 6bc <get2bytes>
    66f2:	|  |         addq.l #4,sp
    66f4:	|  |         move.l d0,1cdae <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    66fa:	|  |         move.l 1cdae <numBIFNames>,d0
    6700:	|  |         move.l d0,276(sp)
    6704:	|  |         clr.l 272(sp)
    6708:	|  |         move.l 1cdda <SysBase>,d0
    670e:	|  |         movea.l d0,a6
    6710:	|  |         move.l 276(sp),d0
    6714:	|  |         move.l 272(sp),d1
    6718:	|  |         jsr -684(a6)
    671c:	|  |         move.l d0,268(sp)
    6720:	|  |         move.l 268(sp),d0
    6724:	|  |         move.l d0,1cd6a <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    672a:	|  |         move.l 1cd6a <allBIFNames>,d0
    6730:	|  |     ,-- bne.s 6738 <initSludge+0xb8>
    6732:	|  |     |   clr.w d0
    6734:	+--|-----|-- bra.w 6dee <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6738:	|  |     '-> clr.l 304(sp)
    673c:	|  |     ,-- bra.s 6762 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    673e:	|  |  ,--|-> move.l 1cd6a <allBIFNames>,d1
    6744:	|  |  |  |   move.l 304(sp),d0
    6748:	|  |  |  |   add.l d0,d0
    674a:	|  |  |  |   add.l d0,d0
    674c:	|  |  |  |   movea.l d1,a2
    674e:	|  |  |  |   adda.l d0,a2
    6750:	|  |  |  |   move.l 288(sp),-(sp)
    6754:	|  |  |  |   jsr b02 <readString>
    675a:	|  |  |  |   addq.l #4,sp
    675c:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    675e:	|  |  |  |   addq.l #1,304(sp)
    6762:	|  |  |  '-> move.l 1cdae <numBIFNames>,d0
    6768:	|  |  |      cmp.l 304(sp),d0
    676c:	|  |  '----- bgt.s 673e <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    676e:	|  |         move.l 288(sp),-(sp)
    6772:	|  |         jsr 6bc <get2bytes>
    6778:	|  |         addq.l #4,sp
    677a:	|  |         move.l d0,1cdba <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    6780:	|  |         move.l 1cdba <numUserFunc>,d0
    6786:	|  |         move.l d0,264(sp)
    678a:	|  |         clr.l 260(sp)
    678e:	|  |         move.l 1cdda <SysBase>,d0
    6794:	|  |         movea.l d0,a6
    6796:	|  |         move.l 264(sp),d0
    679a:	|  |         move.l 260(sp),d1
    679e:	|  |         jsr -684(a6)
    67a2:	|  |         move.l d0,256(sp)
    67a6:	|  |         move.l 256(sp),d0
    67aa:	|  |         move.l d0,1cd76 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    67b0:	|  |         move.l 1cd76 <allUserFunc>,d0
    67b6:	|  |     ,-- bne.s 67be <initSludge+0x13e>
    67b8:	|  |     |   clr.w d0
    67ba:	+--|-----|-- bra.w 6dee <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    67be:	|  |     '-> clr.l 300(sp)
    67c2:	|  |     ,-- bra.s 67e8 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    67c4:	|  |  ,--|-> move.l 1cd76 <allUserFunc>,d1
    67ca:	|  |  |  |   move.l 300(sp),d0
    67ce:	|  |  |  |   add.l d0,d0
    67d0:	|  |  |  |   add.l d0,d0
    67d2:	|  |  |  |   movea.l d1,a2
    67d4:	|  |  |  |   adda.l d0,a2
    67d6:	|  |  |  |   move.l 288(sp),-(sp)
    67da:	|  |  |  |   jsr b02 <readString>
    67e0:	|  |  |  |   addq.l #4,sp
    67e2:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    67e4:	|  |  |  |   addq.l #1,300(sp)
    67e8:	|  |  |  '-> move.l 1cdba <numUserFunc>,d0
    67ee:	|  |  |      cmp.l 300(sp),d0
    67f2:	|  |  '----- bgt.s 67c4 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    67f4:	|  |         move.l 1cd84 <gameVersion>,d0
    67fa:	|  |         cmpi.l #258,d0
    6800:	|  +-------- ble.w 688e <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    6804:	|  |         move.l 288(sp),-(sp)
    6808:	|  |         jsr 6bc <get2bytes>
    680e:	|  |         addq.l #4,sp
    6810:	|  |         move.l d0,1cdb6 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    6816:	|  |         move.l 1cdb6 <numResourceNames>,d0
    681c:	|  |         add.l d0,d0
    681e:	|  |         add.l d0,d0
    6820:	|  |         move.l d0,252(sp)
    6824:	|  |         clr.l 248(sp)
    6828:	|  |         move.l 1cdda <SysBase>,d0
    682e:	|  |         movea.l d0,a6
    6830:	|  |         move.l 252(sp),d0
    6834:	|  |         move.l 248(sp),d1
    6838:	|  |         jsr -684(a6)
    683c:	|  |         move.l d0,244(sp)
    6840:	|  |         move.l 244(sp),d0
    6844:	|  |         move.l d0,1cd6e <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    684a:	|  |         move.l 1cd6e <allResourceNames>,d0
    6850:	|  |     ,-- bne.s 6858 <initSludge+0x1d8>
    6852:	|  |     |   clr.w d0
    6854:	+--|-----|-- bra.w 6dee <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    6858:	|  |     '-> clr.l 296(sp)
    685c:	|  |     ,-- bra.s 6882 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    685e:	|  |  ,--|-> move.l 1cd6e <allResourceNames>,d1
    6864:	|  |  |  |   move.l 296(sp),d0
    6868:	|  |  |  |   add.l d0,d0
    686a:	|  |  |  |   add.l d0,d0
    686c:	|  |  |  |   movea.l d1,a2
    686e:	|  |  |  |   adda.l d0,a2
    6870:	|  |  |  |   move.l 288(sp),-(sp)
    6874:	|  |  |  |   jsr b02 <readString>
    687a:	|  |  |  |   addq.l #4,sp
    687c:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    687e:	|  |  |  |   addq.l #1,296(sp)
    6882:	|  |  |  '-> move.l 1cdb6 <numResourceNames>,d0
    6888:	|  |  |      cmp.l 296(sp),d0
    688c:	|  |  '----- bgt.s 685e <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    688e:	|  '-------> move.l #129,1cd96 <input+0xa>
	input.mouseY = 100;
    6898:	|            moveq #100,d0
    689a:	|            move.l d0,1cd9a <input+0xe>
	winWidth = get2bytes (fp);
    68a0:	|            move.l 288(sp),-(sp)
    68a4:	|            jsr 6bc <get2bytes>
    68aa:	|            addq.l #4,sp
    68ac:	|            move.l d0,1cd2e <winWidth>
	winHeight = get2bytes (fp);
    68b2:	|            move.l 288(sp),-(sp)
    68b6:	|            jsr 6bc <get2bytes>
    68bc:	|            addq.l #4,sp
    68be:	|            move.l d0,1cd32 <winHeight>
	specialSettings = FGetC (fp);
    68c4:	|            move.l 288(sp),240(sp)
    68ca:	|            move.l 1cde2 <DOSBase>,d0
    68d0:	|            movea.l d0,a6
    68d2:	|            move.l 240(sp),d1
    68d6:	|            jsr -306(a6)
    68da:	|            move.l d0,236(sp)
    68de:	|            move.l 236(sp),d0
    68e2:	|            move.l d0,1cdbe <specialSettings>

	desiredfps = 1000/FGetC (fp);
    68e8:	|            move.l 288(sp),232(sp)
    68ee:	|            move.l 1cde2 <DOSBase>,d0
    68f4:	|            movea.l d0,a6
    68f6:	|            move.l 232(sp),d1
    68fa:	|            jsr -306(a6)
    68fe:	|            move.l d0,228(sp)
    6902:	|            move.l 228(sp),d0
    6906:	|            move.l d0,-(sp)
    6908:	|            pea 3e8 <encodeFilename+0xea>
    690c:	|            jsr 1804a <__divsi3>
    6912:	|            addq.l #8,sp
    6914:	|            move.l d0,1c766 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    691a:	|            move.l 288(sp),-(sp)
    691e:	|            jsr b02 <readString>
    6924:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    6926:	|            move.l 288(sp),224(sp)
    692c:	|            move.l #118140,220(sp)
    6934:	|            moveq #8,d1
    6936:	|            move.l d1,216(sp)
    693a:	|            moveq #1,d0
    693c:	|            move.l d0,212(sp)
    6940:	|            move.l 1cde2 <DOSBase>,d0
    6946:	|            movea.l d0,a6
    6948:	|            move.l 224(sp),d1
    694c:	|            move.l 220(sp),d2
    6950:	|            move.l 216(sp),d3
    6954:	|            move.l 212(sp),d4
    6958:	|            jsr -324(a6)
    695c:	|            move.l d0,208(sp)
    6960:	|            move.l 208(sp),d0
    6964:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6968:	|            moveq #1,d1
    696a:	|            cmp.l 204(sp),d1
    696e:	|        ,-- beq.s 697e <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6970:	|        |   pea 18dd1 <PutChar+0xcef>
    6976:	|        |   jsr 17640 <KPrintF>
    697c:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    697e:	|        '-> move.l 1cd84 <gameVersion>,d0
    6984:	|            cmpi.l #258,d0
    698a:	|        ,-- ble.s 699a <initSludge+0x31a>
    698c:	|        |   move.l 288(sp),-(sp)
    6990:	|        |   jsr b02 <readString>
    6996:	|        |   addq.l #4,sp
    6998:	|     ,--|-- bra.s 69ae <initSludge+0x32e>
    699a:	|     |  '-> pea 18def <PutChar+0xd0d>
    69a0:	|     |      pea 18def <PutChar+0xd0d>
    69a6:	|     |      jsr 1408c <joinStrings>
    69ac:	|     |      addq.l #8,sp
    69ae:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    69b2:	|            move.l 1cd84 <gameVersion>,d0
    69b8:	|            cmpi.l #258,d0
    69be:	|     ,----- ble.s 69e0 <initSludge+0x360>
    69c0:	|     |      move.l 288(sp),196(sp)
    69c6:	|     |      move.l 1cde2 <DOSBase>,d0
    69cc:	|     |      movea.l d0,a6
    69ce:	|     |      move.l 196(sp),d1
    69d2:	|     |      jsr -306(a6)
    69d6:	|     |      move.l d0,192(sp)
    69da:	|     |      move.l 192(sp),d0
    69de:	|     |  ,-- bra.s 69e2 <initSludge+0x362>
    69e0:	|     '--|-> moveq #0,d0
    69e2:	|        '-> move.l d0,1ceb6 <gameSettings+0x4>
	makeLanguageTable (fp);
    69e8:	|            move.l 288(sp),-(sp)
    69ec:	|            jsr 13a42 <makeLanguageTable>
    69f2:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    69f4:	|            move.l 1cd84 <gameVersion>,d0
    69fa:	|            cmpi.l #261,d0
    6a00:	|        ,-- ble.s 6a4e <initSludge+0x3ce>
	{
		FGetC(fp);
    6a02:	|        |   move.l 288(sp),188(sp)
    6a08:	|        |   move.l 1cde2 <DOSBase>,d0
    6a0e:	|        |   movea.l d0,a6
    6a10:	|        |   move.l 188(sp),d1
    6a14:	|        |   jsr -306(a6)
    6a18:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6a1c:	|        |   move.l 288(sp),180(sp)
    6a22:	|        |   move.l 1cde2 <DOSBase>,d0
    6a28:	|        |   movea.l d0,a6
    6a2a:	|        |   move.l 180(sp),d1
    6a2e:	|        |   jsr -306(a6)
    6a32:	|        |   move.l d0,176(sp)
		getFloat (fp);
    6a36:	|        |   move.l 288(sp),-(sp)
    6a3a:	|        |   jsr 7d8 <getFloat>
    6a40:	|        |   addq.l #4,sp
		getFloat (fp);
    6a42:	|        |   move.l 288(sp),-(sp)
    6a46:	|        |   jsr 7d8 <getFloat>
    6a4c:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6a4e:	|        '-> move.l 288(sp),-(sp)
    6a52:	|            jsr b02 <readString>
    6a58:	|            addq.l #4,sp
    6a5a:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6a5e:	|            pea 18df0 <PutChar+0xd0e>
    6a64:	|            move.l 176(sp),-(sp)
    6a68:	|            jsr 1400c <strcmp>
    6a6e:	|            addq.l #8,sp
    6a70:	|            tst.l d0
    6a72:	|        ,-- beq.s 6a7a <initSludge+0x3fa>
		return FALSE;
    6a74:	|        |   clr.w d0
    6a76:	+--------|-- bra.w 6dee <initSludge+0x76e>
	}
	FreeVec( checker);
    6a7a:	|        '-> move.l 172(sp),168(sp)
    6a80:	|            move.l 1cdda <SysBase>,d0
    6a86:	|            movea.l d0,a6
    6a88:	|            movea.l 168(sp),a1
    6a8c:	|            jsr -690(a6)
	checker = NULL;
    6a90:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6a94:	|            move.l 288(sp),164(sp)
    6a9a:	|            move.l 1cde2 <DOSBase>,d0
    6aa0:	|            movea.l d0,a6
    6aa2:	|            move.l 164(sp),d1
    6aa6:	|            jsr -306(a6)
    6aaa:	|            move.l d0,160(sp)
    6aae:	|            move.l 160(sp),d0
    6ab2:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6ab6:	|            moveq #0,d0
    6ab8:	|            move.b 159(sp),d0
    6abc:	|            moveq #1,d1
    6abe:	|            and.l d1,d0
    6ac0:	|        ,-- beq.s 6b18 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6ac2:	|        |   move.l 1cde2 <DOSBase>,d0
    6ac8:	|        |   movea.l d0,a6
    6aca:	|        |   jsr -60(a6)
    6ace:	|        |   move.l d0,38(sp)
    6ad2:	|        |   move.l 38(sp),d0
    6ad6:	|        |   move.l d0,34(sp)
    6ada:	|        |   move.l #101880,30(sp)
    6ae2:	|        |   moveq #54,d0
    6ae4:	|        |   move.l d0,26(sp)
    6ae8:	|        |   move.l 1cde2 <DOSBase>,d0
    6aee:	|        |   movea.l d0,a6
    6af0:	|        |   move.l 34(sp),d1
    6af4:	|        |   move.l 30(sp),d2
    6af8:	|        |   move.l 26(sp),d3
    6afc:	|        |   jsr -48(a6)
    6b00:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6b04:	|        |   pea 18e2f <PutChar+0xd4d>
    6b0a:	|        |   jsr 17640 <KPrintF>
    6b10:	|        |   addq.l #4,sp
		return FALSE;
    6b12:	|        |   clr.w d0
    6b14:	+--------|-- bra.w 6dee <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6b18:	|        '-> move.l 288(sp),-(sp)
    6b1c:	|            jsr 6bc <get2bytes>
    6b22:	|            addq.l #4,sp
    6b24:	|            move.l d0,1cdb2 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6b2a:	|            move.l 1cdb2 <numGlobals>,d0
    6b30:	|            lsl.l #3,d0
    6b32:	|            move.l d0,154(sp)
    6b36:	|            clr.l 150(sp)
    6b3a:	|            move.l 1cdda <SysBase>,d0
    6b40:	|            movea.l d0,a6
    6b42:	|            move.l 154(sp),d0
    6b46:	|            move.l 150(sp),d1
    6b4a:	|            jsr -684(a6)
    6b4e:	|            move.l d0,146(sp)
    6b52:	|            move.l 146(sp),d0
    6b56:	|            move.l d0,1cd88 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6b5c:	|            move.l 1cd88 <globalVars>,d0
    6b62:	|        ,-- bne.s 6b80 <initSludge+0x500>
    6b64:	|        |   move.l 1cdb2 <numGlobals>,d0
    6b6a:	|        +-- ble.s 6b80 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6b6c:	|        |   pea 18e67 <PutChar+0xd85>
    6b72:	|        |   jsr 17640 <KPrintF>
    6b78:	|        |   addq.l #4,sp
		return FALSE;
    6b7a:	|        |   clr.w d0
    6b7c:	+--------|-- bra.w 6dee <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6b80:	|        '-> clr.l 308(sp)
    6b84:	|        ,-- bra.s 6b9c <initSludge+0x51c>
    6b86:	|     ,--|-> move.l 1cd88 <globalVars>,d1
    6b8c:	|     |  |   move.l 308(sp),d0
    6b90:	|     |  |   lsl.l #3,d0
    6b92:	|     |  |   movea.l d1,a0
    6b94:	|     |  |   adda.l d0,a0
    6b96:	|     |  |   clr.l (a0)
    6b98:	|     |  |   addq.l #1,308(sp)
    6b9c:	|     |  '-> move.l 1cdb2 <numGlobals>,d0
    6ba2:	|     |      cmp.l 308(sp),d0
    6ba6:	|     '----- bgt.s 6b86 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6ba8:	|            move.l 1ceb6 <gameSettings+0x4>,d0
    6bae:	|            clr.l -(sp)
    6bb0:	|            move.l d0,-(sp)
    6bb2:	|            move.l 296(sp),-(sp)
    6bb6:	|            jsr 7cbc <setFileIndices>
    6bbc:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6bc0:	|            pea 1 <_start+0x1>
    6bc4:	|            jsr 7976 <getNumberedString>
    6bca:	|            addq.l #4,sp
    6bcc:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6bd0:	|            move.l 142(sp),-(sp)
    6bd4:	|            jsr 2fe <encodeFilename>
    6bda:	|            addq.l #4,sp
    6bdc:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6be0:	|            move.l 142(sp),134(sp)
    6be6:	|            move.l 1cdda <SysBase>,d0
    6bec:	|            movea.l d0,a6
    6bee:	|            movea.l 134(sp),a1
    6bf2:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6bf6:	|            move.l 138(sp),130(sp)
    6bfc:	|            move.l 1cde2 <DOSBase>,d0
    6c02:	|            movea.l d0,a6
    6c04:	|            move.l 130(sp),d1
    6c08:	|            jsr -120(a6)
    6c0c:	|            move.l d0,126(sp)
    6c10:	|            move.l 126(sp),d0
    6c14:	|            move.l d0,292(sp)
	if(lock == 0) {
    6c18:	|        ,-- bne.s 6c46 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6c1a:	|        |   move.l 138(sp),122(sp)
    6c20:	|        |   moveq #-2,d1
    6c22:	|        |   move.l d1,118(sp)
    6c26:	|        |   move.l 1cde2 <DOSBase>,d0
    6c2c:	|        |   movea.l d0,a6
    6c2e:	|        |   move.l 122(sp),d1
    6c32:	|        |   move.l 118(sp),d2
    6c36:	|        |   jsr -84(a6)
    6c3a:	|        |   move.l d0,114(sp)
    6c3e:	|        |   move.l 114(sp),d0
    6c42:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6c46:	|        '-> move.l 292(sp),110(sp)
    6c4c:	|            move.l 1cde2 <DOSBase>,d0
    6c52:	|            movea.l d0,a6
    6c54:	|            move.l 110(sp),d1
    6c58:	|            jsr -126(a6)
    6c5c:	|            move.l d0,106(sp)
    6c60:	|            move.l 106(sp),d0
    6c64:	|        ,-- bne.s 6cc0 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6c66:	|        |   move.l 138(sp),-(sp)
    6c6a:	|        |   pea 18e9a <PutChar+0xdb8>
    6c70:	|        |   jsr 17640 <KPrintF>
    6c76:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6c78:	|        |   move.l 1cde2 <DOSBase>,d0
    6c7e:	|        |   movea.l d0,a6
    6c80:	|        |   jsr -60(a6)
    6c84:	|        |   move.l d0,58(sp)
    6c88:	|        |   move.l 58(sp),d0
    6c8c:	|        |   move.l d0,54(sp)
    6c90:	|        |   move.l #102087,50(sp)
    6c98:	|        |   moveq #40,d0
    6c9a:	|        |   move.l d0,46(sp)
    6c9e:	|        |   move.l 1cde2 <DOSBase>,d0
    6ca4:	|        |   movea.l d0,a6
    6ca6:	|        |   move.l 54(sp),d1
    6caa:	|        |   move.l 50(sp),d2
    6cae:	|        |   move.l 46(sp),d3
    6cb2:	|        |   jsr -48(a6)
    6cb6:	|        |   move.l d0,42(sp)
		return FALSE;
    6cba:	|        |   clr.w d0
    6cbc:	+--------|-- bra.w 6dee <initSludge+0x76e>
	}

	FreeVec(gameName);
    6cc0:	|        '-> move.l 138(sp),102(sp)
    6cc6:	|            move.l 1cdda <SysBase>,d0
    6ccc:	|            movea.l d0,a6
    6cce:	|            movea.l 102(sp),a1
    6cd2:	|            jsr -690(a6)

	readIniFile (filename);
    6cd6:	|            move.l 316(sp),-(sp)
    6cda:	|            jsr 13b76 <readIniFile>
    6ce0:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6ce2:	|            jsr 13948 <getLanguageForFileB>
    6ce8:	|            move.l d0,1c758 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6cee:	|            move.l 1c758 <languageNum>,d0
    6cf4:	|        ,-- bpl.s 6d04 <initSludge+0x684>
    6cf6:	|        |   pea 18ef0 <PutChar+0xe0e>
    6cfc:	|        |   jsr 17640 <KPrintF>
    6d02:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6d04:	|        '-> move.l 1c758 <languageNum>,d0
    6d0a:	|            move.l d0,d1
    6d0c:	|            move.l 1ceb6 <gameSettings+0x4>,d0
    6d12:	|            move.l d1,-(sp)
    6d14:	|            move.l d0,-(sp)
    6d16:	|            clr.l -(sp)
    6d18:	|            jsr 7cbc <setFileIndices>
    6d1e:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6d22:	|            movea.l 200(sp),a0
    6d26:	|            move.b (a0),d0
    6d28:	|     ,----- beq.w 6dd2 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6d2c:	|     |      move.l 200(sp),-(sp)
    6d30:	|     |      jsr 2fe <encodeFilename>
    6d36:	|     |      addq.l #4,sp
    6d38:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6d3c:	|     |      move.l 98(sp),94(sp)
    6d42:	|     |      move.l 1cde2 <DOSBase>,d0
    6d48:	|     |      movea.l d0,a6
    6d4a:	|     |      move.l 94(sp),d1
    6d4e:	|     |      jsr -120(a6)
    6d52:	|     |      move.l d0,90(sp)
    6d56:	|     |      move.l 90(sp),d0
    6d5a:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6d5e:	|     |  ,-- bne.s 6d8c <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6d60:	|     |  |   move.l 98(sp),86(sp)
    6d66:	|     |  |   moveq #-2,d1
    6d68:	|     |  |   move.l d1,82(sp)
    6d6c:	|     |  |   move.l 1cde2 <DOSBase>,d0
    6d72:	|     |  |   movea.l d0,a6
    6d74:	|     |  |   move.l 86(sp),d1
    6d78:	|     |  |   move.l 82(sp),d2
    6d7c:	|     |  |   jsr -84(a6)
    6d80:	|     |  |   move.l d0,78(sp)
    6d84:	|     |  |   move.l 78(sp),d0
    6d88:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6d8c:	|     |  '-> move.l 292(sp),74(sp)
    6d92:	|     |      move.l 1cde2 <DOSBase>,d0
    6d98:	|     |      movea.l d0,a6
    6d9a:	|     |      move.l 74(sp),d1
    6d9e:	|     |      jsr -126(a6)
    6da2:	|     |      move.l d0,70(sp)
    6da6:	|     |      move.l 70(sp),d0
    6daa:	|     |  ,-- bne.s 6dbc <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6dac:	|     |  |   move.l 1cde2 <DOSBase>,d0
    6db2:	|     |  |   movea.l d0,a6
    6db4:	|     |  |   jsr -60(a6)
    6db8:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6dbc:	|     |  '-> move.l 98(sp),62(sp)
    6dc2:	|     |      move.l 1cdda <SysBase>,d0
    6dc8:	|     |      movea.l d0,a6
    6dca:	|     |      movea.l 62(sp),a1
    6dce:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6dd2:	|     '----> movea.l 1cd32 <winHeight>,a0
    6dd8:	|            lea -15(a0),a0
    6ddc:	|            move.l a0,d0
    6dde:	|            move.l d0,-(sp)
    6de0:	|            pea a <_start+0xa>
    6de4:	|            jsr 8702 <positionStatus>
    6dea:	|            addq.l #8,sp

	return TRUE;
    6dec:	|            moveq #1,d0
}
    6dee:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6df2:	             lea 292(sp),sp
    6df6:	             rts

00006df8 <killSpeechTimers>:

void killSpeechTimers () {
    6df8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6dfa:	          move.l 1cd72 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6e00:	   ,----- bra.s 6e2c <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6e02:	,--|----> movea.l (sp),a0
    6e04:	|  |      move.b 56(a0),d0
    6e08:	|  |  ,-- bne.s 6e26 <killSpeechTimers+0x2e>
    6e0a:	|  |  |   movea.l (sp),a0
    6e0c:	|  |  |   move.w 50(a0),d0
    6e10:	|  |  +-- beq.s 6e26 <killSpeechTimers+0x2e>
    6e12:	|  |  |   movea.l (sp),a0
    6e14:	|  |  |   move.l 12(a0),d0
    6e18:	|  |  +-- beq.s 6e26 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6e1a:	|  |  |   movea.l (sp),a0
    6e1c:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6e20:	|  |  |   movea.l (sp),a0
    6e22:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6e26:	|  |  '-> movea.l (sp),a0
    6e28:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6e2c:	|  '----> tst.l (sp)
    6e2e:	'-------- bne.s 6e02 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6e30:	          jsr 42e8 <killAllSpeech>
}
    6e36:	          nop
    6e38:	          addq.l #4,sp
    6e3a:	          rts

00006e3c <loadFunctionCode>:

struct loadedFunction *loadFunctionCode (unsigned int originalNumber) {
    6e3c:	             lea -68(sp),sp
    6e40:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6e42:	             moveq #58,d0
    6e44:	             move.l d0,60(sp)
    6e48:	             clr.l 56(sp)
    6e4c:	             move.l 1cdda <SysBase>,d0
    6e52:	             movea.l d0,a6
    6e54:	             move.l 60(sp),d0
    6e58:	             move.l 56(sp),d1
    6e5c:	             jsr -684(a6)
    6e60:	             move.l d0,52(sp)
    6e64:	             move.l 52(sp),d0
    6e68:	             move.l d0,48(sp)
	if(!newFunc) {
    6e6c:	         ,-- bne.s 6e82 <loadFunctionCode+0x46>
		KPrintF("startNewFunction: Cannot allocate memory");
    6e6e:	         |   pea 18f1b <PutChar+0xe39>
    6e74:	         |   jsr 17640 <KPrintF>
    6e7a:	         |   addq.l #4,sp
		return 0;
    6e7c:	         |   moveq #0,d0
    6e7e:	,--------|-- bra.w 7070 <loadFunctionCode+0x234>
	}

	newFunc -> originalNumber = originalNumber;
    6e82:	|        '-> move.l 76(sp),d0
    6e86:	|            movea.l 48(sp),a0
    6e8a:	|            move.l d0,(a0)

	if (! openSubSlice (originalNumber)) return FALSE;
    6e8c:	|            move.l 76(sp),d0
    6e90:	|            move.l d0,-(sp)
    6e92:	|            jsr 7bfc <openSubSlice>
    6e98:	|            addq.l #4,sp
    6e9a:	|            tst.w d0
    6e9c:	|        ,-- bne.s 6ea4 <loadFunctionCode+0x68>
    6e9e:	|        |   moveq #0,d0
    6ea0:	+--------|-- bra.w 7070 <loadFunctionCode+0x234>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6ea4:	|        '-> move.l 1cdc2 <bigDataFile>,44(sp)
    6eac:	|            move.l 1cde2 <DOSBase>,d0
    6eb2:	|            movea.l d0,a6
    6eb4:	|            move.l 44(sp),d1
    6eb8:	|            jsr -306(a6)
    6ebc:	|            move.l d0,40(sp)
    6ec0:	|            move.l 40(sp),d0
    6ec4:	|            move.l d0,d0
    6ec6:	|            movea.l 48(sp),a0
    6eca:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6ece:	|            move.l 1cdc2 <bigDataFile>,d0
    6ed4:	|            move.l d0,-(sp)
    6ed6:	|            jsr 6bc <get2bytes>
    6edc:	|            addq.l #4,sp
    6ede:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6ee2:	|            move.l 1cdc2 <bigDataFile>,d0
    6ee8:	|            move.l d0,-(sp)
    6eea:	|            jsr 6bc <get2bytes>
    6ef0:	|            addq.l #4,sp
    6ef2:	|            movea.l 48(sp),a0
    6ef6:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6efa:	|            move.l 1cdc2 <bigDataFile>,d0
    6f00:	|            move.l d0,-(sp)
    6f02:	|            jsr 6bc <get2bytes>
    6f08:	|            addq.l #4,sp
    6f0a:	|            movea.l 48(sp),a0
    6f0e:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6f12:	|            move.l 36(sp),d0
    6f16:	|            lsl.l #3,d0
    6f18:	|            move.l d0,32(sp)
    6f1c:	|            clr.l 28(sp)
    6f20:	|            move.l 1cdda <SysBase>,d0
    6f26:	|            movea.l d0,a6
    6f28:	|            move.l 32(sp),d0
    6f2c:	|            move.l 28(sp),d1
    6f30:	|            jsr -684(a6)
    6f34:	|            move.l d0,24(sp)
    6f38:	|            move.l 24(sp),d0
    6f3c:	|            movea.l 48(sp),a0
    6f40:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6f44:	|            movea.l 48(sp),a0
    6f48:	|            move.l 4(a0),d0
    6f4c:	|        ,-- bne.s 6f62 <loadFunctionCode+0x126>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6f4e:	|        |   pea 18f44 <PutChar+0xe62>
    6f54:	|        |   jsr 17640 <KPrintF>
    6f5a:	|        |   addq.l #4,sp
		return FALSE;
    6f5c:	|        |   moveq #0,d0
    6f5e:	+--------|-- bra.w 7070 <loadFunctionCode+0x234>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6f62:	|        '-> clr.l 68(sp)
    6f66:	|        ,-- bra.s 6fc8 <loadFunctionCode+0x18c>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6f68:	|     ,--|-> move.l 1cdc2 <bigDataFile>,8(sp)
    6f70:	|     |  |   move.l 1cde2 <DOSBase>,d0
    6f76:	|     |  |   movea.l d0,a6
    6f78:	|     |  |   move.l 8(sp),d1
    6f7c:	|     |  |   jsr -306(a6)
    6f80:	|     |  |   move.l d0,4(sp)
    6f84:	|     |  |   move.l 4(sp),d1
    6f88:	|     |  |   movea.l 48(sp),a0
    6f8c:	|     |  |   movea.l 4(a0),a0
    6f90:	|     |  |   move.l 68(sp),d0
    6f94:	|     |  |   lsl.l #3,d0
    6f96:	|     |  |   adda.l d0,a0
    6f98:	|     |  |   move.l d1,d0
    6f9a:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6f9c:	|     |  |   move.l 1cdc2 <bigDataFile>,d0
    6fa2:	|     |  |   move.l d0,-(sp)
    6fa4:	|     |  |   jsr 6bc <get2bytes>
    6faa:	|     |  |   addq.l #4,sp
    6fac:	|     |  |   move.l d0,d1
    6fae:	|     |  |   movea.l 48(sp),a0
    6fb2:	|     |  |   movea.l 4(a0),a0
    6fb6:	|     |  |   move.l 68(sp),d0
    6fba:	|     |  |   lsl.l #3,d0
    6fbc:	|     |  |   adda.l d0,a0
    6fbe:	|     |  |   move.l d1,d0
    6fc0:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6fc4:	|     |  |   addq.l #1,68(sp)
    6fc8:	|     |  '-> move.l 68(sp),d0
    6fcc:	|     |      cmp.l 36(sp),d0
    6fd0:	|     '----- bcs.s 6f68 <loadFunctionCode+0x12c>
	}

	finishAccess ();
    6fd2:	|            jsr 796c <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6fd8:	|            movea.l 48(sp),a0
    6fdc:	|            move.l 8(a0),d0
    6fe0:	|  ,-------- ble.w 7064 <loadFunctionCode+0x228>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6fe4:	|  |         movea.l 48(sp),a0
    6fe8:	|  |         move.l 8(a0),d0
    6fec:	|  |         lsl.l #3,d0
    6fee:	|  |         move.l d0,20(sp)
    6ff2:	|  |         clr.l 16(sp)
    6ff6:	|  |         move.l 1cdda <SysBase>,d0
    6ffc:	|  |         movea.l d0,a6
    6ffe:	|  |         move.l 20(sp),d0
    7002:	|  |         move.l 16(sp),d1
    7006:	|  |         jsr -684(a6)
    700a:	|  |         move.l d0,12(sp)
    700e:	|  |         move.l 12(sp),d0
    7012:	|  |         movea.l 48(sp),a0
    7016:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    701a:	|  |         movea.l 48(sp),a0
    701e:	|  |         move.l 20(a0),d0
    7022:	|  |     ,-- bne.s 7036 <loadFunctionCode+0x1fa>
			KPrintF("loadFunctionCode: cannot allocate memory");
    7024:	|  |     |   pea 18f44 <PutChar+0xe62>
    702a:	|  |     |   jsr 17640 <KPrintF>
    7030:	|  |     |   addq.l #4,sp
			return FALSE;
    7032:	|  |     |   moveq #0,d0
    7034:	+--|-----|-- bra.s 7070 <loadFunctionCode+0x234>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    7036:	|  |     '-> clr.l 64(sp)
    703a:	|  |     ,-- bra.s 7054 <loadFunctionCode+0x218>
			initVarNew (newFunc -> localVars[a]);
    703c:	|  |  ,--|-> movea.l 48(sp),a0
    7040:	|  |  |  |   move.l 20(a0),d1
    7044:	|  |  |  |   move.l 64(sp),d0
    7048:	|  |  |  |   lsl.l #3,d0
    704a:	|  |  |  |   movea.l d1,a0
    704c:	|  |  |  |   adda.l d0,a0
    704e:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    7050:	|  |  |  |   addq.l #1,64(sp)
    7054:	|  |  |  '-> movea.l 48(sp),a0
    7058:	|  |  |      move.l 8(a0),d0
    705c:	|  |  |      cmp.l 64(sp),d0
    7060:	|  |  '----- bgt.s 703c <loadFunctionCode+0x200>
    7062:	|  |     ,-- bra.s 706c <loadFunctionCode+0x230>
		}
	} else
	{
		newFunc->numLocals = NULL;
    7064:	|  '-----|-> movea.l 48(sp),a0
    7068:	|        |   clr.l 8(a0)
	}
	return newFunc;
    706c:	|        '-> move.l 48(sp),d0

}
    7070:	'----------> movea.l (sp)+,a6
    7072:	             lea 68(sp),sp
    7076:	             rts

00007078 <loadHandlers>:

void loadHandlers (BPTR fp) {
    7078:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    707a:	movea.l 1c754 <currentEvents>,a2
    7080:	move.l 8(sp),-(sp)
    7084:	jsr 6bc <get2bytes>
    708a:	addq.l #4,sp
    708c:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    708e:	movea.l 1c754 <currentEvents>,a2
    7094:	move.l 8(sp),-(sp)
    7098:	jsr 6bc <get2bytes>
    709e:	addq.l #4,sp
    70a0:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    70a4:	movea.l 1c754 <currentEvents>,a2
    70aa:	move.l 8(sp),-(sp)
    70ae:	jsr 6bc <get2bytes>
    70b4:	addq.l #4,sp
    70b6:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    70ba:	movea.l 1c754 <currentEvents>,a2
    70c0:	move.l 8(sp),-(sp)
    70c4:	jsr 6bc <get2bytes>
    70ca:	addq.l #4,sp
    70cc:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    70d0:	movea.l 1c754 <currentEvents>,a2
    70d6:	move.l 8(sp),-(sp)
    70da:	jsr 6bc <get2bytes>
    70e0:	addq.l #4,sp
    70e2:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    70e6:	move.l 8(sp),-(sp)
    70ea:	jsr 718 <get4bytes>
    70f0:	addq.l #4,sp
    70f2:	movea.l 1c754 <currentEvents>,a0
    70f8:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    70fc:	movea.l 1c754 <currentEvents>,a2
    7102:	move.l 8(sp),-(sp)
    7106:	jsr 6bc <get2bytes>
    710c:	addq.l #4,sp
    710e:	move.l d0,24(a2)
}
    7112:	nop
    7114:	movea.l (sp)+,a2
    7116:	rts

00007118 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    7118:	       lea -312(sp),sp
    711c:	       movem.l d2-d3/a6,-(sp)
    7120:	       move.l 332(sp),d1
    7124:	       move.l 336(sp),d0
    7128:	       move.b d1,d1
    712a:	       move.b d1,16(sp)
    712e:	       move.b d0,d0
    7130:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    7134:	       move.l 328(sp),318(sp)
    713a:	       move.l #1005,314(sp)
    7142:	       move.l 1cde2 <DOSBase>,d0
    7148:	       movea.l d0,a6
    714a:	       move.l 318(sp),d1
    714e:	       move.l 314(sp),d2
    7152:	       jsr -30(a6)
    7156:	       move.l d0,310(sp)
    715a:	       move.l 310(sp),d0
    715e:	       move.l d0,306(sp)

	if (! fp) {
    7162:	   ,-- bne.s 71be <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    7164:	   |   move.l 1cde2 <DOSBase>,d0
    716a:	   |   movea.l d0,a6
    716c:	   |   jsr -60(a6)
    7170:	   |   move.l d0,154(sp)
    7174:	   |   move.l 154(sp),d0
    7178:	   |   move.l d0,150(sp)
    717c:	   |   move.l #102253,146(sp)
    7184:	   |   moveq #31,d0
    7186:	   |   move.l d0,142(sp)
    718a:	   |   move.l 1cde2 <DOSBase>,d0
    7190:	   |   movea.l d0,a6
    7192:	   |   move.l 150(sp),d1
    7196:	   |   move.l 146(sp),d2
    719a:	   |   move.l 142(sp),d3
    719e:	   |   jsr -48(a6)
    71a2:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    71a6:	   |   move.l 328(sp),-(sp)
    71aa:	   |   pea 18f8d <PutChar+0xeab>
    71b0:	   |   jsr 17640 <KPrintF>
    71b6:	   |   addq.l #8,sp
		return NULL;
    71b8:	   |   moveq #0,d0
    71ba:	,--|-- bra.w 747e <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    71be:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    71c2:	|      move.l 306(sp),302(sp)
    71c8:	|      move.l 1cde2 <DOSBase>,d0
    71ce:	|      movea.l d0,a6
    71d0:	|      move.l 302(sp),d1
    71d4:	|      jsr -306(a6)
    71d8:	|      move.l d0,298(sp)
    71dc:	|      move.l 298(sp),d0
    71e0:	|      moveq #83,d1
    71e2:	|      cmp.l d0,d1
    71e4:	|  ,-- beq.s 71ec <openAndVerify+0xd4>
    71e6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    71ec:	|  '-> move.l 306(sp),294(sp)
    71f2:	|      move.l 1cde2 <DOSBase>,d0
    71f8:	|      movea.l d0,a6
    71fa:	|      move.l 294(sp),d1
    71fe:	|      jsr -306(a6)
    7202:	|      move.l d0,290(sp)
    7206:	|      move.l 290(sp),d0
    720a:	|      moveq #76,d1
    720c:	|      cmp.l d0,d1
    720e:	|  ,-- beq.s 7216 <openAndVerify+0xfe>
    7210:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    7216:	|  '-> move.l 306(sp),286(sp)
    721c:	|      move.l 1cde2 <DOSBase>,d0
    7222:	|      movea.l d0,a6
    7224:	|      move.l 286(sp),d1
    7228:	|      jsr -306(a6)
    722c:	|      move.l d0,282(sp)
    7230:	|      move.l 282(sp),d0
    7234:	|      moveq #85,d1
    7236:	|      cmp.l d0,d1
    7238:	|  ,-- beq.s 7240 <openAndVerify+0x128>
    723a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    7240:	|  '-> move.l 306(sp),278(sp)
    7246:	|      move.l 1cde2 <DOSBase>,d0
    724c:	|      movea.l d0,a6
    724e:	|      move.l 278(sp),d1
    7252:	|      jsr -306(a6)
    7256:	|      move.l d0,274(sp)
    725a:	|      move.l 274(sp),d0
    725e:	|      moveq #68,d1
    7260:	|      cmp.l d0,d1
    7262:	|  ,-- beq.s 726a <openAndVerify+0x152>
    7264:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    726a:	|  '-> move.l 306(sp),270(sp)
    7270:	|      move.l 1cde2 <DOSBase>,d0
    7276:	|      movea.l d0,a6
    7278:	|      move.l 270(sp),d1
    727c:	|      jsr -306(a6)
    7280:	|      move.l d0,266(sp)
    7284:	|      move.l 266(sp),d1
    7288:	|      move.b 16(sp),d0
    728c:	|      ext.w d0
    728e:	|      movea.w d0,a0
    7290:	|      cmpa.l d1,a0
    7292:	|  ,-- beq.s 729a <openAndVerify+0x182>
    7294:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    729a:	|  '-> move.l 306(sp),262(sp)
    72a0:	|      move.l 1cde2 <DOSBase>,d0
    72a6:	|      movea.l d0,a6
    72a8:	|      move.l 262(sp),d1
    72ac:	|      jsr -306(a6)
    72b0:	|      move.l d0,258(sp)
    72b4:	|      move.l 258(sp),d1
    72b8:	|      move.b 14(sp),d0
    72bc:	|      ext.w d0
    72be:	|      movea.w d0,a0
    72c0:	|      cmpa.l d1,a0
    72c2:	|  ,-- beq.s 72ca <openAndVerify+0x1b2>
    72c4:	|  |   move.w #1,322(sp)
	if (headerBad) {
    72ca:	|  '-> tst.w 322(sp)
    72ce:	|  ,-- beq.s 7326 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    72d0:	|  |   move.l 1cde2 <DOSBase>,d0
    72d6:	|  |   movea.l d0,a6
    72d8:	|  |   jsr -60(a6)
    72dc:	|  |   move.l d0,174(sp)
    72e0:	|  |   move.l 174(sp),d0
    72e4:	|  |   move.l d0,170(sp)
    72e8:	|  |   move.l #102316,166(sp)
    72f0:	|  |   moveq #31,d0
    72f2:	|  |   move.l d0,162(sp)
    72f6:	|  |   move.l 1cde2 <DOSBase>,d0
    72fc:	|  |   movea.l d0,a6
    72fe:	|  |   move.l 170(sp),d1
    7302:	|  |   move.l 166(sp),d2
    7306:	|  |   move.l 162(sp),d3
    730a:	|  |   jsr -48(a6)
    730e:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    7312:	|  |   pea 18fac <PutChar+0xeca>
    7318:	|  |   jsr 17640 <KPrintF>
    731e:	|  |   addq.l #4,sp
		return NULL;
    7320:	|  |   moveq #0,d0
    7322:	+--|-- bra.w 747e <openAndVerify+0x366>
	}
	FGetC (fp);
    7326:	|  '-> move.l 306(sp),254(sp)
    732c:	|      move.l 1cde2 <DOSBase>,d0
    7332:	|      movea.l d0,a6
    7334:	|      move.l 254(sp),d1
    7338:	|      jsr -306(a6)
    733c:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    7340:	|      nop
    7342:	|  ,-> move.l 306(sp),246(sp)
    7348:	|  |   move.l 1cde2 <DOSBase>,d0
    734e:	|  |   movea.l d0,a6
    7350:	|  |   move.l 246(sp),d1
    7354:	|  |   jsr -306(a6)
    7358:	|  |   move.l d0,242(sp)
    735c:	|  |   move.l 242(sp),d0
    7360:	|  '-- bne.s 7342 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    7362:	|      move.l 306(sp),238(sp)
    7368:	|      move.l 1cde2 <DOSBase>,d0
    736e:	|      movea.l d0,a6
    7370:	|      move.l 238(sp),d1
    7374:	|      jsr -306(a6)
    7378:	|      move.l d0,234(sp)
    737c:	|      move.l 234(sp),d0
    7380:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    7384:	|      move.l 306(sp),226(sp)
    738a:	|      move.l 1cde2 <DOSBase>,d0
    7390:	|      movea.l d0,a6
    7392:	|      move.l 226(sp),d1
    7396:	|      jsr -306(a6)
    739a:	|      move.l d0,222(sp)
    739e:	|      move.l 222(sp),d0
    73a2:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    73a6:	|      move.l 230(sp),d0
    73aa:	|      lsl.l #8,d0
    73ac:	|      add.l 218(sp),d0
    73b0:	|      movea.l 344(sp),a0
    73b4:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    73b6:	|      movea.l 344(sp),a0
    73ba:	|      move.l (a0),d0
    73bc:	|      cmpi.l #514,d0
    73c2:	|  ,-- ble.s 7418 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    73c4:	|  |   move.l 1cde2 <DOSBase>,d0
    73ca:	|  |   movea.l d0,a6
    73cc:	|  |   jsr -60(a6)
    73d0:	|  |   move.l d0,194(sp)
    73d4:	|  |   move.l 194(sp),d0
    73d8:	|  |   move.l d0,190(sp)
    73dc:	|  |   move.l #102343,186(sp)
    73e4:	|  |   moveq #100,d1
    73e6:	|  |   move.l d1,182(sp)
    73ea:	|  |   move.l 1cde2 <DOSBase>,d0
    73f0:	|  |   movea.l d0,a6
    73f2:	|  |   move.l 190(sp),d1
    73f6:	|  |   move.l 186(sp),d2
    73fa:	|  |   move.l 182(sp),d3
    73fe:	|  |   jsr -48(a6)
    7402:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    7406:	|  |   pea 18fc7 <PutChar+0xee5>
    740c:	|  |   jsr 17640 <KPrintF>
    7412:	|  |   addq.l #4,sp
		return NULL;
    7414:	|  |   moveq #0,d0
    7416:	+--|-- bra.s 747e <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    7418:	|  '-> movea.l 344(sp),a0
    741c:	|      move.l (a0),d0
    741e:	|      cmpi.l #257,d0
    7424:	|  ,-- bgt.s 747a <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    7426:	|  |   move.l 1cde2 <DOSBase>,d0
    742c:	|  |   movea.l d0,a6
    742e:	|  |   jsr -60(a6)
    7432:	|  |   move.l d0,214(sp)
    7436:	|  |   move.l 214(sp),d0
    743a:	|  |   move.l d0,210(sp)
    743e:	|  |   move.l #102412,206(sp)
    7446:	|  |   moveq #100,d0
    7448:	|  |   move.l d0,202(sp)
    744c:	|  |   move.l 1cde2 <DOSBase>,d0
    7452:	|  |   movea.l d0,a6
    7454:	|  |   move.l 210(sp),d1
    7458:	|  |   move.l 206(sp),d2
    745c:	|  |   move.l 202(sp),d3
    7460:	|  |   jsr -48(a6)
    7464:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    7468:	|  |   pea 1900c <PutChar+0xf2a>
    746e:	|  |   jsr 17640 <KPrintF>
    7474:	|  |   addq.l #4,sp
		return NULL;
    7476:	|  |   moveq #0,d0
    7478:	+--|-- bra.s 747e <openAndVerify+0x366>
	}
	return fp;
    747a:	|  '-> move.l 306(sp),d0
}
    747e:	'----> movem.l (sp)+,d2-d3/a6
    7482:	       lea 312(sp),sp
    7486:	       rts

00007488 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    7488:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    748a:	          move.l #118130,(sp)
	while (* huntAndDestroy) {
    7490:	   ,----- bra.s 74bc <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    7492:	,--|----> movea.l (sp),a0
    7494:	|  |      move.l (a0),d0
    7496:	|  |      cmp.l 8(sp),d0
    749a:	|  |  ,-- bne.s 74b2 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    749c:	|  |  |   movea.l (sp),a0
    749e:	|  |  |   movea.l (a0),a0
    74a0:	|  |  |   move.l 44(a0),d0
    74a4:	|  |  |   movea.l (sp),a0
    74a6:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    74a8:	|  |  |   movea.l 8(sp),a0
    74ac:	|  |  |   clr.l 44(a0)
    74b0:	|  +--|-- bra.s 74bc <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    74b2:	|  |  '-> movea.l (sp),a0
    74b4:	|  |      move.l (a0),d0
    74b6:	|  |      moveq #44,d1
    74b8:	|  |      add.l d0,d1
    74ba:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    74bc:	|  '----> movea.l (sp),a0
    74be:	|         move.l (a0),d0
    74c0:	'-------- bne.s 7492 <pauseFunction+0xa>
		}
	}
}
    74c2:	          nop
    74c4:	          nop
    74c6:	          addq.l #4,sp
    74c8:	          rts

000074ca <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {		

	return loadFunctionCode (funcNum);	
    74ca:	move.l 4(sp),-(sp)
    74ce:	jsr 6e3c <loadFunctionCode>
    74d4:	addq.l #4,sp
}
    74d6:	rts

000074d8 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    74d8:	move.l 1cd72 <allRunningFunctions>,d0
    74de:	movea.l 4(sp),a0
    74e2:	move.l d0,44(a0)
	allRunningFunctions = fun;
    74e6:	move.l 4(sp),1cd72 <allRunningFunctions>
}
    74ee:	nop
    74f0:	rts

000074f2 <runSludge>:

BOOL runSludge () {
    74f2:	                   lea -12(sp),sp
    74f6:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    74f8:	                   move.l 1cd72 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    7500:	      ,----------- bra.s 757c <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    7502:	   ,--|----------> movea.l 12(sp),a0
    7506:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    750c:	   |  |            movea.l 12(sp),a0
    7510:	   |  |            move.b 56(a0),d0
    7514:	   |  |  ,-------- bne.s 7576 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    7516:	   |  |  |         movea.l 12(sp),a0
    751a:	   |  |  |         move.l 12(a0),d0
    751e:	   |  |  |  ,----- beq.s 7548 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    7520:	   |  |  |  |      movea.l 12(sp),a0
    7524:	   |  |  |  |      move.l 12(a0),d0
    7528:	   |  |  |  |  ,-- bpl.s 7534 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    752a:	   |  |  |  |  |   movea.l 12(sp),a0
    752e:	   |  |  |  |  |   clr.l 12(a0)
    7532:	   |  |  +--|--|-- bra.s 7576 <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    7534:	   |  |  |  |  '-> movea.l 12(sp),a0
    7538:	   |  |  |  |      move.l 12(a0),d0
    753c:	   |  |  |  |      subq.l #1,d0
				} else if (
    753e:	   |  |  |  |      movea.l 12(sp),a0
    7542:	   |  |  |  |      move.l d0,12(a0)
    7546:	   |  |  +--|----- bra.s 7576 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    7548:	   |  |  |  '----> movea.l 12(sp),a0
    754c:	   |  |  |         move.w 50(a0),d0
    7550:	   |  |  |     ,-- beq.s 7560 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7552:	   |  |  |     |   movea.l 12(sp),a0
    7556:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    755a:	   |  |  |     |   jsr 42e8 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    7560:	   |  |  |     '-> move.l 12(sp),-(sp)
    7564:	   |  |  |         jsr 54f8 <continueFunction>
    756a:	   |  |  |         addq.l #4,sp
    756c:	   |  |  |         tst.w d0
    756e:	   |  |  +-------- bne.s 7576 <runSludge+0x84>
					return FALSE;
    7570:	   |  |  |         clr.w d0
    7572:	,--|--|--|-------- bra.w 7602 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    7576:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    757c:	|  |  '----------> tst.l 12(sp)
    7580:	|  '-------------- bne.s 7502 <runSludge+0x10>
	}

	if (loadNow) {
    7582:	|                  move.l 1cda6 <loadNow>,d0
    7588:	|        ,-------- beq.s 7600 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    758a:	|        |         movea.l 1cda6 <loadNow>,a0
    7590:	|        |         move.b (a0),d0
    7592:	|        |         cmpi.b #58,d0
    7596:	|        |  ,----- bne.s 75ca <runSludge+0xd8>
			saveGame (loadNow + 1);
    7598:	|        |  |      move.l 1cda6 <loadNow>,d0
    759e:	|        |  |      addq.l #1,d0
    75a0:	|        |  |      move.l d0,-(sp)
    75a2:	|        |  |      jsr caa0 <saveGame>
    75a8:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    75aa:	|        |  |      movea.l 1cea0 <saverFunc>,a0
    75b0:	|        |  |      lea 28(a0),a0
    75b4:	|        |  |      pea 1 <_start+0x1>
    75b8:	|        |  |      pea 1 <_start+0x1>
    75bc:	|        |  |      move.l a0,-(sp)
    75be:	|        |  |      jsr 15452 <setVariable>
    75c4:	|        |  |      lea 12(sp),sp
    75c8:	|        |  |  ,-- bra.s 75e2 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    75ca:	|        |  '--|-> move.l 1cda6 <loadNow>,d0
    75d0:	|        |     |   move.l d0,-(sp)
    75d2:	|        |     |   jsr c5e8 <loadGame>
    75d8:	|        |     |   addq.l #4,sp
    75da:	|        |     |   tst.w d0
    75dc:	|        |     +-- bne.s 75e2 <runSludge+0xf0>
    75de:	|        |     |   clr.w d0
    75e0:	+--------|-----|-- bra.s 7602 <runSludge+0x110>
		}
		FreeVec(loadNow);
    75e2:	|        |     '-> move.l 1cda6 <loadNow>,8(sp)
    75ea:	|        |         move.l 1cdda <SysBase>,d0
    75f0:	|        |         movea.l d0,a6
    75f2:	|        |         movea.l 8(sp),a1
    75f6:	|        |         jsr -690(a6)
		loadNow = NULL;
    75fa:	|        |         clr.l 1cda6 <loadNow>
	}

	return TRUE;
    7600:	|        '-------> moveq #1,d0
}
    7602:	'----------------> movea.l (sp)+,a6
    7604:	                   lea 12(sp),sp
    7608:	                   rts

0000760a <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    760a:	movea.l 1c754 <currentEvents>,a0
    7610:	move.l (a0),d0
    7612:	move.l 4(sp),-(sp)
    7616:	move.l d0,-(sp)
    7618:	jsr 8d0 <put2bytes>
    761e:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    7620:	movea.l 1c754 <currentEvents>,a0
    7626:	move.l 4(a0),d0
    762a:	move.l 4(sp),-(sp)
    762e:	move.l d0,-(sp)
    7630:	jsr 8d0 <put2bytes>
    7636:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    7638:	movea.l 1c754 <currentEvents>,a0
    763e:	move.l 8(a0),d0
    7642:	move.l 4(sp),-(sp)
    7646:	move.l d0,-(sp)
    7648:	jsr 8d0 <put2bytes>
    764e:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    7650:	movea.l 1c754 <currentEvents>,a0
    7656:	move.l 12(a0),d0
    765a:	move.l 4(sp),-(sp)
    765e:	move.l d0,-(sp)
    7660:	jsr 8d0 <put2bytes>
    7666:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    7668:	movea.l 1c754 <currentEvents>,a0
    766e:	move.l 16(a0),d0
    7672:	move.l 4(sp),-(sp)
    7676:	move.l d0,-(sp)
    7678:	jsr 8d0 <put2bytes>
    767e:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    7680:	movea.l 1c754 <currentEvents>,a0
    7686:	move.l 20(a0),d0
    768a:	move.l 4(sp),-(sp)
    768e:	move.l d0,-(sp)
    7690:	jsr 958 <put4bytes>
    7696:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    7698:	movea.l 1c754 <currentEvents>,a0
    769e:	move.l 24(a0),d0
    76a2:	move.l 4(sp),-(sp)
    76a6:	move.l d0,-(sp)
    76a8:	jsr 8d0 <put2bytes>
    76ae:	addq.l #8,sp
}
    76b0:	nop
    76b2:	rts

000076b4 <sludgeDisplay>:

void sludgeDisplay () {					
    76b4:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    76b6:	move.l #14675968,(sp)
	displayCursor();
    76bc:	jsr c58 <displayCursor>
	CstRestoreScreen();
    76c2:	jsr 2c86 <CstRestoreScreen>
	drawPeople();
    76c8:	jsr a322 <drawPeople>
	CstSwapBuffer();
    76ce:	jsr 3944 <CstSwapBuffer>
}
    76d4:	nop
    76d6:	addq.l #4,sp
    76d8:	rts

000076da <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    76da:	      ,-- bra.s 76fa <stackSetByIndex+0x20>
		vS = vS->next;
    76dc:	,-----|-> movea.l 4(sp),a0
    76e0:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    76e6:	|     +-- bne.s 76fa <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    76e8:	|     |   pea 19053 <PutChar+0xf71>
    76ee:	|     |   jsr 17640 <KPrintF>
    76f4:	|     |   addq.l #4,sp
			return FALSE;
    76f6:	|     |   clr.w d0
    76f8:	|  ,--|-- bra.s 771c <stackSetByIndex+0x42>
	while (theIndex--) {
    76fa:	|  |  '-> move.l 8(sp),d0
    76fe:	|  |      move.l d0,d1
    7700:	|  |      subq.l #1,d1
    7702:	|  |      move.l d1,8(sp)
    7706:	|  |      tst.l d0
    7708:	'--|----- bne.s 76dc <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    770a:	   |      move.l 4(sp),d0
    770e:	   |      move.l d0,-(sp)
    7710:	   |      move.l 16(sp),-(sp)
    7714:	   |      jsr 1501a <copyVariable>
    771a:	   |      addq.l #8,sp
}
    771c:	   '----> rts

0000771e <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    771e:	             subq.l #8,sp
    7720:	             move.l 28(sp),d0
    7724:	             move.w d0,d0
    7726:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    772a:	             movea.l 12(sp),a0
    772e:	             move.l 16(a0),d1
    7732:	             move.l 16(sp),d0
    7736:	             cmp.l d1,d0
    7738:	         ,-- beq.s 774e <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    773a:	         |   pea 1906c <PutChar+0xf8a>
    7740:	         |   jsr 17640 <KPrintF>
    7746:	         |   addq.l #4,sp
		return NULL; 
    7748:	         |   moveq #0,d0
    774a:	,--------|-- bra.w 782a <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    774e:	|        '-> movea.l 12(sp),a0
    7752:	|            move.l 16(a0),d1
    7756:	|            movea.l 12(sp),a0
    775a:	|            move.l 8(a0),d0
    775e:	|            cmp.l d1,d0
    7760:	|  ,-------- bge.s 77ca <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    7762:	|  |         pea 19088 <PutChar+0xfa6>
    7768:	|  |         jsr 17640 <KPrintF>
    776e:	|  |         addq.l #4,sp
		return NULL; 
    7770:	|  |         moveq #0,d0
    7772:	+--|-------- bra.w 782a <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    7776:	|  |  ,----> movea.l 24(sp),a0
    777a:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    777e:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    7782:	|  |  |      movea.l 24(sp),a0
    7786:	|  |  |      move.l (a0),d0
    7788:	|  |  |  ,-- bne.s 779e <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    778a:	|  |  |  |   pea 190b2 <PutChar+0xfd0>
    7790:	|  |  |  |   jsr 17640 <KPrintF>
    7796:	|  |  |  |   addq.l #4,sp
			return NULL;
    7798:	|  |  |  |   moveq #0,d0
    779a:	+--|--|--|-- bra.w 782a <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    779e:	|  |  |  '-> movea.l 12(sp),a0
    77a2:	|  |  |      move.l 20(a0),d1
    77a6:	|  |  |      move.l 16(sp),d0
    77aa:	|  |  |      lsl.l #3,d0
    77ac:	|  |  |      add.l d0,d1
    77ae:	|  |  |      move.l 4(sp),d0
    77b2:	|  |  |      move.l d1,-(sp)
    77b4:	|  |  |      move.l d0,-(sp)
    77b6:	|  |  |      jsr 1501a <copyVariable>
    77bc:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    77be:	|  |  |      move.l 24(sp),-(sp)
    77c2:	|  |  |      jsr 154e4 <trimStack>
    77c8:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    77ca:	|  '--|----> tst.l 16(sp)
    77ce:	|     '----- bne.s 7776 <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    77d0:	|            movea.l 12(sp),a0
    77d4:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    77d8:	|            movea.l 12(sp),a0
    77dc:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    77e0:	|            movea.l 12(sp),a0
    77e4:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    77ea:	|            movea.l 12(sp),a0
    77ee:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    77f4:	|            movea.l 12(sp),a0
    77f8:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    77fc:	|            movea.l 12(sp),a0
    7800:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    7804:	|            movea.l 12(sp),a0
    7808:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    780c:	|            movea.l 12(sp),a0
    7810:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    7814:	|            movea.l 12(sp),a0
    7818:	|            clr.l 28(a0)

	restartFunction (newFunc);
    781c:	|            move.l 12(sp),-(sp)
    7820:	|            jsr 74d8 <restartFunction>
    7826:	|            addq.l #4,sp
	return 1;
    7828:	|            moveq #1,d0
}
    782a:	'----------> addq.l #8,sp
    782c:	             rts

0000782e <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    782e:	lea -12(sp),sp
    7832:	move.l 32(sp),d0
    7836:	move.w d0,d0
    7838:	move.w d0,2(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    783c:	move.l #14675968,8(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction *newFunc = loadFunctionCode (funcNum);	
    7844:	move.l 16(sp),-(sp)
    7848:	jsr 6e3c <loadFunctionCode>
    784e:	addq.l #4,sp
    7850:	move.l d0,4(sp)
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    7854:	movea.w 2(sp),a0
    7858:	move.l a0,-(sp)
    785a:	move.l 32(sp),-(sp)
    785e:	move.l 32(sp),-(sp)
    7862:	move.l 32(sp),-(sp)
    7866:	move.l 20(sp),-(sp)
    786a:	jsr 771e <startNewFunctionLoaded>
    7870:	lea 20(sp),sp
}
    7874:	lea 12(sp),sp
    7878:	rts

0000787a <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    787a:	             lea -12(sp),sp
    787e:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    7880:	             movea.l 1c754 <currentEvents>,a0
    7886:	             move.l 20(a0),d0
    788a:	             cmp.l 20(sp),d0
    788e:	,----------- beq.w 7930 <unloadFunction+0xb6>
		return;
	}

	if (fun -> stack) 
    7892:	|            movea.l 20(sp),a0
    7896:	|            move.l 24(a0),d0
    789a:	|        ,-- beq.s 78ae <unloadFunction+0x34>
	{
		KPrintF("unloadfunction: error non empty stack");
    789c:	|        |   pea 190fd <PutChar+0x101b>
    78a2:	|        |   jsr 17640 <KPrintF>
    78a8:	|        |   addq.l #4,sp
		return;
    78aa:	|  ,-----|-- bra.w 7932 <unloadFunction+0xb8>
	}
	FreeVec( fun -> compiledLines);
    78ae:	|  |     '-> movea.l 20(sp),a0
    78b2:	|  |         move.l 4(a0),8(sp)
    78b8:	|  |         move.l 1cdda <SysBase>,d0
    78be:	|  |         movea.l d0,a6
    78c0:	|  |         movea.l 8(sp),a1
    78c4:	|  |         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    78c8:	|  |         clr.l 12(sp)
    78cc:	|  |     ,-- bra.s 78ec <unloadFunction+0x72>
    78ce:	|  |  ,--|-> movea.l 20(sp),a0
    78d2:	|  |  |  |   move.l 20(a0),d1
    78d6:	|  |  |  |   move.l 12(sp),d0
    78da:	|  |  |  |   lsl.l #3,d0
    78dc:	|  |  |  |   add.l d1,d0
    78de:	|  |  |  |   move.l d0,-(sp)
    78e0:	|  |  |  |   jsr 14dae <unlinkVar>
    78e6:	|  |  |  |   addq.l #4,sp
    78e8:	|  |  |  |   addq.l #1,12(sp)
    78ec:	|  |  |  '-> movea.l 20(sp),a0
    78f0:	|  |  |      move.l 8(a0),d0
    78f4:	|  |  |      cmp.l 12(sp),d0
    78f8:	|  |  '----- bgt.s 78ce <unloadFunction+0x54>
	if( fun->numLocals > 0) {
    78fa:	|  |         movea.l 20(sp),a0
    78fe:	|  |         move.l 8(a0),d0
    7902:	|  |     ,-- ble.s 791e <unloadFunction+0xa4>
		FreeVec(fun -> localVars);
    7904:	|  |     |   movea.l 20(sp),a0
    7908:	|  |     |   move.l 20(a0),4(sp)
    790e:	|  |     |   move.l 1cdda <SysBase>,d0
    7914:	|  |     |   movea.l d0,a6
    7916:	|  |     |   movea.l 4(sp),a1
    791a:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    791e:	|  |     '-> moveq #28,d0
    7920:	|  |         add.l 20(sp),d0
    7924:	|  |         move.l d0,-(sp)
    7926:	|  |         jsr 14dae <unlinkVar>
    792c:	|  |         addq.l #4,sp
    792e:	|  +-------- bra.s 7932 <unloadFunction+0xb8>
		return;
    7930:	'--|-------> nop
}
    7932:	   '-------> movea.l (sp)+,a6
    7934:	             lea 12(sp),sp
    7938:	             rts

0000793a <unfreezeSubs>:

void unfreezeSubs () {
    793a:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    793c:	          move.l 1cd72 <allRunningFunctions>,(sp)

	while (thisFunction) {
    7942:	   ,----- bra.s 7960 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    7944:	,--|----> movea.l (sp),a0
    7946:	|  |      move.b 56(a0),d0
    794a:	|  |  ,-- beq.s 795a <unfreezeSubs+0x20>
    794c:	|  |  |   movea.l (sp),a0
    794e:	|  |  |   move.b 56(a0),d0
    7952:	|  |  |   subq.b #1,d0
    7954:	|  |  |   movea.l (sp),a0
    7956:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    795a:	|  |  '-> movea.l (sp),a0
    795c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7960:	|  '----> tst.l (sp)
    7962:	'-------- bne.s 7944 <unfreezeSubs+0xa>
	}
}
    7964:	          nop
    7966:	          nop
    7968:	          addq.l #4,sp
    796a:	          rts

0000796c <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    796c:	clr.w 1c760 <sliceBusy>
}
    7972:	nop
    7974:	rts

00007976 <getNumberedString>:

char * getNumberedString (int value) {
    7976:	       lea -56(sp),sp
    797a:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    797e:	       move.w 1c760 <sliceBusy>,d0
    7984:	   ,-- beq.s 79ce <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    7986:	   |   move.l 1cde2 <DOSBase>,d0
    798c:	   |   movea.l d0,a6
    798e:	   |   jsr -60(a6)
    7992:	   |   move.l d0,28(sp)
    7996:	   |   move.l 28(sp),d0
    799a:	   |   move.l d0,24(sp)
    799e:	   |   move.l #102691,20(sp)
    79a6:	   |   moveq #76,d0
    79a8:	   |   move.l d0,16(sp)
    79ac:	   |   move.l 1cde2 <DOSBase>,d0
    79b2:	   |   movea.l d0,a6
    79b4:	   |   move.l 24(sp),d1
    79b8:	   |   move.l 20(sp),d2
    79bc:	   |   move.l 16(sp),d3
    79c0:	   |   jsr -48(a6)
    79c4:	   |   move.l d0,12(sp)
		return NULL;
    79c8:	   |   moveq #0,d0
    79ca:	,--|-- bra.w 7a6a <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    79ce:	|  '-> move.l 1cdc2 <bigDataFile>,64(sp)
    79d6:	|      move.l 72(sp),d0
    79da:	|      add.l d0,d0
    79dc:	|      add.l d0,d0
    79de:	|      move.l d0,d1
    79e0:	|      move.l 1cdce <startOfTextIndex>,d0
    79e6:	|      add.l d1,d0
    79e8:	|      move.l d0,60(sp)
    79ec:	|      moveq #-1,d0
    79ee:	|      move.l d0,56(sp)
    79f2:	|      move.l 1cde2 <DOSBase>,d0
    79f8:	|      movea.l d0,a6
    79fa:	|      move.l 64(sp),d1
    79fe:	|      move.l 60(sp),d2
    7a02:	|      move.l 56(sp),d3
    7a06:	|      jsr -66(a6)
    7a0a:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7a0e:	|      move.l 1cdc2 <bigDataFile>,d0
    7a14:	|      move.l d0,-(sp)
    7a16:	|      jsr 718 <get4bytes>
    7a1c:	|      addq.l #4,sp
    7a1e:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7a22:	|      move.l 1cdc2 <bigDataFile>,48(sp)
    7a2a:	|      move.l 72(sp),44(sp)
    7a30:	|      moveq #-1,d0
    7a32:	|      move.l d0,40(sp)
    7a36:	|      move.l 1cde2 <DOSBase>,d0
    7a3c:	|      movea.l d0,a6
    7a3e:	|      move.l 48(sp),d1
    7a42:	|      move.l 44(sp),d2
    7a46:	|      move.l 40(sp),d3
    7a4a:	|      jsr -66(a6)
    7a4e:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    7a52:	|      move.l 1cdc2 <bigDataFile>,d0
    7a58:	|      move.l d0,-(sp)
    7a5a:	|      jsr b02 <readString>
    7a60:	|      addq.l #4,sp
    7a62:	|      move.l d0,32(sp)
	
	return s;
    7a66:	|      move.l 32(sp),d0
}
    7a6a:	'----> movem.l (sp)+,d2-d3/a6
    7a6e:	       lea 56(sp),sp
    7a72:	       rts

00007a74 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    7a74:	       lea -32(sp),sp
    7a78:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7a7c:	       move.w 1c760 <sliceBusy>,d0
    7a82:	   ,-- beq.s 7a9e <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7a84:	   |   pea 19170 <PutChar+0x108e>
    7a8a:	   |   pea 1918e <PutChar+0x10ac>
    7a90:	   |   jsr 17640 <KPrintF>
    7a96:	   |   addq.l #8,sp
		return 0;
    7a98:	   |   moveq #0,d0
    7a9a:	,--|-- bra.w 7b32 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7a9e:	|  '-> move.l 1cdc2 <bigDataFile>,40(sp)
    7aa6:	|      move.l 48(sp),d0
    7aaa:	|      add.l d0,d0
    7aac:	|      add.l d0,d0
    7aae:	|      move.l d0,d1
    7ab0:	|      move.l 1cdca <startOfDataIndex>,d0
    7ab6:	|      add.l d1,d0
    7ab8:	|      move.l d0,36(sp)
    7abc:	|      moveq #-1,d0
    7abe:	|      move.l d0,32(sp)
    7ac2:	|      move.l 1cde2 <DOSBase>,d0
    7ac8:	|      movea.l d0,a6
    7aca:	|      move.l 40(sp),d1
    7ace:	|      move.l 36(sp),d2
    7ad2:	|      move.l 32(sp),d3
    7ad6:	|      jsr -66(a6)
    7ada:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7ade:	|      move.l 1cdc2 <bigDataFile>,24(sp)
    7ae6:	|      move.l 1cdc2 <bigDataFile>,d0
    7aec:	|      move.l d0,-(sp)
    7aee:	|      jsr 718 <get4bytes>
    7af4:	|      addq.l #4,sp
    7af6:	|      move.l d0,20(sp)
    7afa:	|      clr.l 16(sp)
    7afe:	|      move.l 1cde2 <DOSBase>,d0
    7b04:	|      movea.l d0,a6
    7b06:	|      move.l 24(sp),d1
    7b0a:	|      move.l 20(sp),d2
    7b0e:	|      move.l 16(sp),d3
    7b12:	|      jsr -66(a6)
    7b16:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7b1a:	|      move.w #1,1c760 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7b22:	|      move.l 1cdc2 <bigDataFile>,d0
    7b28:	|      move.l d0,-(sp)
    7b2a:	|      jsr 718 <get4bytes>
    7b30:	|      addq.l #4,sp
}
    7b32:	'----> movem.l (sp)+,d2-d3/a6
    7b36:	       lea 32(sp),sp
    7b3a:	       rts

00007b3c <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7b3c:	       lea -32(sp),sp
    7b40:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    7b44:	       move.w 1c760 <sliceBusy>,d0
    7b4a:	   ,-- beq.s 7b66 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    7b4c:	   |   pea 19170 <PutChar+0x108e>
    7b52:	   |   pea 1918e <PutChar+0x10ac>
    7b58:	   |   jsr 17640 <KPrintF>
    7b5e:	   |   addq.l #8,sp
        return FALSE;
    7b60:	   |   clr.w d0
    7b62:	,--|-- bra.w 7bf2 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    7b66:	|  '-> move.l 1cdc2 <bigDataFile>,40(sp)
    7b6e:	|      move.l 48(sp),d0
    7b72:	|      add.l d0,d0
    7b74:	|      add.l d0,d0
    7b76:	|      move.l d0,d1
    7b78:	|      move.l 1cdd6 <startOfObjectIndex>,d0
    7b7e:	|      add.l d1,d0
    7b80:	|      move.l d0,36(sp)
    7b84:	|      moveq #-1,d0
    7b86:	|      move.l d0,32(sp)
    7b8a:	|      move.l 1cde2 <DOSBase>,d0
    7b90:	|      movea.l d0,a6
    7b92:	|      move.l 40(sp),d1
    7b96:	|      move.l 36(sp),d2
    7b9a:	|      move.l 32(sp),d3
    7b9e:	|      jsr -66(a6)
    7ba2:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    7ba6:	|      move.l 1cdc2 <bigDataFile>,24(sp)
    7bae:	|      move.l 1cdc2 <bigDataFile>,d0
    7bb4:	|      move.l d0,-(sp)
    7bb6:	|      jsr 718 <get4bytes>
    7bbc:	|      addq.l #4,sp
    7bbe:	|      move.l d0,20(sp)
    7bc2:	|      moveq #-1,d0
    7bc4:	|      move.l d0,16(sp)
    7bc8:	|      move.l 1cde2 <DOSBase>,d0
    7bce:	|      movea.l d0,a6
    7bd0:	|      move.l 24(sp),d1
    7bd4:	|      move.l 20(sp),d2
    7bd8:	|      move.l 16(sp),d3
    7bdc:	|      jsr -66(a6)
    7be0:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7be4:	|      move.w #1,1c760 <sliceBusy>
    7bec:	|      move.w 1c760 <sliceBusy>,d0
}
    7bf2:	'----> movem.l (sp)+,d2-d3/a6
    7bf6:	       lea 32(sp),sp
    7bfa:	       rts

00007bfc <openSubSlice>:

BOOL openSubSlice (int num) {
    7bfc:	       lea -32(sp),sp
    7c00:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7c04:	       move.w 1c760 <sliceBusy>,d0
    7c0a:	   ,-- beq.s 7c26 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7c0c:	   |   pea 19170 <PutChar+0x108e>
    7c12:	   |   pea 1918e <PutChar+0x10ac>
    7c18:	   |   jsr 17640 <KPrintF>
    7c1e:	   |   addq.l #8,sp
		return FALSE;
    7c20:	   |   clr.w d0
    7c22:	,--|-- bra.w 7cb2 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7c26:	|  '-> move.l 1cdc2 <bigDataFile>,40(sp)
    7c2e:	|      move.l 48(sp),d0
    7c32:	|      add.l d0,d0
    7c34:	|      add.l d0,d0
    7c36:	|      move.l d0,d1
    7c38:	|      move.l 1cdd2 <startOfSubIndex>,d0
    7c3e:	|      add.l d1,d0
    7c40:	|      move.l d0,36(sp)
    7c44:	|      moveq #-1,d0
    7c46:	|      move.l d0,32(sp)
    7c4a:	|      move.l 1cde2 <DOSBase>,d0
    7c50:	|      movea.l d0,a6
    7c52:	|      move.l 40(sp),d1
    7c56:	|      move.l 36(sp),d2
    7c5a:	|      move.l 32(sp),d3
    7c5e:	|      jsr -66(a6)
    7c62:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    7c66:	|      move.l 1cdc2 <bigDataFile>,24(sp)
    7c6e:	|      move.l 1cdc2 <bigDataFile>,d0
    7c74:	|      move.l d0,-(sp)
    7c76:	|      jsr 718 <get4bytes>
    7c7c:	|      addq.l #4,sp
    7c7e:	|      move.l d0,20(sp)
    7c82:	|      moveq #-1,d0
    7c84:	|      move.l d0,16(sp)
    7c88:	|      move.l 1cde2 <DOSBase>,d0
    7c8e:	|      movea.l d0,a6
    7c90:	|      move.l 24(sp),d1
    7c94:	|      move.l 20(sp),d2
    7c98:	|      move.l 16(sp),d3
    7c9c:	|      jsr -66(a6)
    7ca0:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7ca4:	|      move.w #1,1c760 <sliceBusy>
    7cac:	|      move.w 1c760 <sliceBusy>,d0
}
    7cb2:	'----> movem.l (sp)+,d2-d3/a6
    7cb6:	       lea 32(sp),sp
    7cba:	       rts

00007cbc <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7cbc:	       lea -180(sp),sp
    7cc0:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7cc4:	       tst.l 196(sp)
    7cc8:	,----- beq.s 7d08 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7cca:	|      move.l 196(sp),1cdc2 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7cd2:	|      move.l 196(sp),168(sp)
    7cd8:	|      clr.l 164(sp)
    7cdc:	|      clr.l 160(sp)
    7ce0:	|      move.l 1cde2 <DOSBase>,d0
    7ce6:	|      movea.l d0,a6
    7ce8:	|      move.l 168(sp),d1
    7cec:	|      move.l 164(sp),d2
    7cf0:	|      move.l 160(sp),d3
    7cf4:	|      jsr -66(a6)
    7cf8:	|      move.l d0,156(sp)
    7cfc:	|      move.l 156(sp),d0
    7d00:	|      move.l d0,1cdc6 <startIndex>
    7d06:	|  ,-- bra.s 7d42 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7d08:	'--|-> move.l 1cdc2 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    7d10:	   |   move.l 196(sp),184(sp)
    7d16:	   |   move.l 1cdc6 <startIndex>,d0
    7d1c:	   |   move.l d0,180(sp)
    7d20:	   |   moveq #-1,d0
    7d22:	   |   move.l d0,176(sp)
    7d26:	   |   move.l 1cde2 <DOSBase>,d0
    7d2c:	   |   movea.l d0,a6
    7d2e:	   |   move.l 184(sp),d1
    7d32:	   |   move.l 180(sp),d2
    7d36:	   |   move.l 176(sp),d3
    7d3a:	   |   jsr -66(a6)
    7d3e:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    7d42:	   '-> clr.w 1c760 <sliceBusy>

	if (skipBefore > numLanguages) {
    7d48:	       move.l 204(sp),d0
    7d4c:	       cmp.l 200(sp),d0
    7d50:	   ,-- bls.s 7d64 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    7d52:	   |   pea 191a8 <PutChar+0x10c6>
    7d58:	   |   jsr 17640 <KPrintF>
    7d5e:	   |   addq.l #4,sp
		skipBefore = 0;
    7d60:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7d64:	   '-> move.l 200(sp),d0
    7d68:	       sub.l 204(sp),d0
    7d6c:	       move.l d0,188(sp)
	while (skipBefore) {
    7d70:	   ,-- bra.s 7dae <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    7d72:	,--|-> move.l 196(sp),24(sp)
    7d78:	|  |   move.l 196(sp),-(sp)
    7d7c:	|  |   jsr 718 <get4bytes>
    7d82:	|  |   addq.l #4,sp
    7d84:	|  |   move.l d0,20(sp)
    7d88:	|  |   moveq #-1,d0
    7d8a:	|  |   move.l d0,16(sp)
    7d8e:	|  |   move.l 1cde2 <DOSBase>,d0
    7d94:	|  |   movea.l d0,a6
    7d96:	|  |   move.l 24(sp),d1
    7d9a:	|  |   move.l 20(sp),d2
    7d9e:	|  |   move.l 16(sp),d3
    7da2:	|  |   jsr -66(a6)
    7da6:	|  |   move.l d0,12(sp)
		skipBefore --;
    7daa:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    7dae:	|  '-> tst.l 204(sp)
    7db2:	'----- bne.s 7d72 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7db4:	       move.l 196(sp),152(sp)
    7dba:	       clr.l 148(sp)
    7dbe:	       clr.l 144(sp)
    7dc2:	       move.l 1cde2 <DOSBase>,d0
    7dc8:	       movea.l d0,a6
    7dca:	       move.l 152(sp),d1
    7dce:	       move.l 148(sp),d2
    7dd2:	       move.l 144(sp),d3
    7dd6:	       jsr -66(a6)
    7dda:	       move.l d0,140(sp)
    7dde:	       move.l 140(sp),d0
    7de2:	       addq.l #4,d0
    7de4:	       move.l d0,1cdce <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7dea:	       move.l 196(sp),136(sp)
    7df0:	       move.l 196(sp),-(sp)
    7df4:	       jsr 718 <get4bytes>
    7dfa:	       addq.l #4,sp
    7dfc:	       move.l d0,132(sp)
    7e00:	       moveq #-1,d0
    7e02:	       move.l d0,128(sp)
    7e06:	       move.l 1cde2 <DOSBase>,d0
    7e0c:	       movea.l d0,a6
    7e0e:	       move.l 136(sp),d1
    7e12:	       move.l 132(sp),d2
    7e16:	       move.l 128(sp),d3
    7e1a:	       jsr -66(a6)
    7e1e:	       move.l d0,124(sp)

	while (skipAfter) {
    7e22:	   ,-- bra.s 7e60 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7e24:	,--|-> move.l 196(sp),40(sp)
    7e2a:	|  |   move.l 196(sp),-(sp)
    7e2e:	|  |   jsr 718 <get4bytes>
    7e34:	|  |   addq.l #4,sp
    7e36:	|  |   move.l d0,36(sp)
    7e3a:	|  |   moveq #-1,d0
    7e3c:	|  |   move.l d0,32(sp)
    7e40:	|  |   move.l 1cde2 <DOSBase>,d0
    7e46:	|  |   movea.l d0,a6
    7e48:	|  |   move.l 40(sp),d1
    7e4c:	|  |   move.l 36(sp),d2
    7e50:	|  |   move.l 32(sp),d3
    7e54:	|  |   jsr -66(a6)
    7e58:	|  |   move.l d0,28(sp)
		skipAfter --;
    7e5c:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7e60:	|  '-> tst.l 188(sp)
    7e64:	'----- bne.s 7e24 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7e66:	       move.l 196(sp),120(sp)
    7e6c:	       clr.l 116(sp)
    7e70:	       clr.l 112(sp)
    7e74:	       move.l 1cde2 <DOSBase>,d0
    7e7a:	       movea.l d0,a6
    7e7c:	       move.l 120(sp),d1
    7e80:	       move.l 116(sp),d2
    7e84:	       move.l 112(sp),d3
    7e88:	       jsr -66(a6)
    7e8c:	       move.l d0,108(sp)
    7e90:	       move.l 108(sp),d0
    7e94:	       addq.l #4,d0
    7e96:	       move.l d0,1cdd2 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7e9c:	       move.l 196(sp),104(sp)
    7ea2:	       move.l 196(sp),-(sp)
    7ea6:	       jsr 718 <get4bytes>
    7eac:	       addq.l #4,sp
    7eae:	       move.l d0,100(sp)
    7eb2:	       clr.l 96(sp)
    7eb6:	       move.l 1cde2 <DOSBase>,d0
    7ebc:	       movea.l d0,a6
    7ebe:	       move.l 104(sp),d1
    7ec2:	       move.l 100(sp),d2
    7ec6:	       move.l 96(sp),d3
    7eca:	       jsr -66(a6)
    7ece:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7ed2:	       move.l 196(sp),88(sp)
    7ed8:	       clr.l 84(sp)
    7edc:	       clr.l 80(sp)
    7ee0:	       move.l 1cde2 <DOSBase>,d0
    7ee6:	       movea.l d0,a6
    7ee8:	       move.l 88(sp),d1
    7eec:	       move.l 84(sp),d2
    7ef0:	       move.l 80(sp),d3
    7ef4:	       jsr -66(a6)
    7ef8:	       move.l d0,76(sp)
    7efc:	       move.l 76(sp),d0
    7f00:	       addq.l #4,d0
    7f02:	       move.l d0,1cdd6 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7f08:	       move.l 196(sp),72(sp)
    7f0e:	       move.l 196(sp),-(sp)
    7f12:	       jsr 718 <get4bytes>
    7f18:	       addq.l #4,sp
    7f1a:	       move.l d0,68(sp)
    7f1e:	       clr.l 64(sp)
    7f22:	       move.l 1cde2 <DOSBase>,d0
    7f28:	       movea.l d0,a6
    7f2a:	       move.l 72(sp),d1
    7f2e:	       move.l 68(sp),d2
    7f32:	       move.l 64(sp),d3
    7f36:	       jsr -66(a6)
    7f3a:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7f3e:	       move.l 196(sp),56(sp)
    7f44:	       clr.l 52(sp)
    7f48:	       clr.l 48(sp)
    7f4c:	       move.l 1cde2 <DOSBase>,d0
    7f52:	       movea.l d0,a6
    7f54:	       move.l 56(sp),d1
    7f58:	       move.l 52(sp),d2
    7f5c:	       move.l 48(sp),d3
    7f60:	       jsr -66(a6)
    7f64:	       move.l d0,44(sp)
    7f68:	       move.l 44(sp),d0
    7f6c:	       move.l d0,1cdca <startOfDataIndex>
    7f72:	       nop
    7f74:	       movem.l (sp)+,d2-d3/a6
    7f78:	       lea 180(sp),sp
    7f7c:	       rts

00007f7e <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7f7e:	    lea -20(sp),sp
    7f82:	    move.l a6,-(sp)
    7f84:	    move.l d7,-(sp)
	APTR vbr = 0;
    7f86:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7f8a:	    move.w #20090,10(sp)
    7f90:	    move.w #2049,12(sp)
    7f96:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7f9c:	    movea.l 1cdda <SysBase>,a0
    7fa2:	    move.w 296(a0),d0
    7fa6:	    move.w d0,d0
    7fa8:	    andi.l #65535,d0
    7fae:	    moveq #1,d1
    7fb0:	    and.l d1,d0
    7fb2:	,-- beq.s 7fe0 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7fb4:	|   lea 28(sp),a0
    7fb8:	|   lea -18(a0),a0
    7fbc:	|   move.l a0,20(sp)
    7fc0:	|   move.l 1cdda <SysBase>,d0
    7fc6:	|   movea.l d0,a6
    7fc8:	|   move.l 20(sp),d7
    7fcc:	|   exg d7,a5
    7fce:	|   jsr -30(a6)
    7fd2:	|   exg d7,a5
    7fd4:	|   move.l d0,16(sp)
    7fd8:	|   move.l 16(sp),d0
    7fdc:	|   move.l d0,24(sp)

	return vbr;
    7fe0:	'-> move.l 24(sp),d0
}
    7fe4:	    move.l (sp)+,d7
    7fe6:	    movea.l (sp)+,a6
    7fe8:	    lea 20(sp),sp
    7fec:	    rts

00007fee <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    7fee:	movea.l 1ce00 <VBR>,a0
    7ff4:	lea 108(a0),a0
    7ff8:	move.l 4(sp),(a0)
}
    7ffc:	nop
    7ffe:	rts

00008000 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    8000:	movea.l 1ce00 <VBR>,a0
    8006:	move.l 108(a0),d0
}
    800a:	rts

0000800c <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    800c:	       subq.l #8,sp
    800e:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    8010:	       pea 191f1 <PutChar+0x110f>
    8016:	       jsr 17640 <KPrintF>
    801c:	       addq.l #4,sp
	Forbid();
    801e:	       move.l 1cdda <SysBase>,d0
    8024:	       movea.l d0,a6
    8026:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    802a:	       pea 19209 <PutChar+0x1127>
    8030:	       jsr 17640 <KPrintF>
    8036:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    8038:	       movea.l 1cdde <custom>,a0
    803e:	       move.w 16(a0),d0
    8042:	       move.w d0,1cdfe <SystemADKCON>
	SystemInts=custom->intenar;
    8048:	       movea.l 1cdde <custom>,a0
    804e:	       move.w 28(a0),d0
    8052:	       move.w d0,1cdfa <SystemInts>
	SystemDMA=custom->dmaconr;
    8058:	       movea.l 1cdde <custom>,a0
    805e:	       move.w 2(a0),d0
    8062:	       move.w d0,1cdfc <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    8068:	       movea.l 1cde6 <GfxBase>,a0
    806e:	       move.l 34(a0),d0
    8072:	       move.l d0,1ce08 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    8078:	       pea 19227 <PutChar+0x1145>
    807e:	       jsr 17640 <KPrintF>
    8084:	       addq.l #4,sp
	LoadView(0);
    8086:	       clr.l 4(sp)
    808a:	       move.l 1cde6 <GfxBase>,d0
    8090:	       movea.l d0,a6
    8092:	       movea.l 4(sp),a1
    8096:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    809a:	       pea 1923d <PutChar+0x115b>
    80a0:	       jsr 17640 <KPrintF>
    80a6:	       addq.l #4,sp
	WaitTOF();
    80a8:	       move.l 1cde6 <GfxBase>,d0
    80ae:	       movea.l d0,a6
    80b0:	       jsr -270(a6)
	WaitTOF();
    80b4:	       move.l 1cde6 <GfxBase>,d0
    80ba:	       movea.l d0,a6
    80bc:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    80c0:	       pea 19252 <PutChar+0x1170>
    80c6:	       jsr 17640 <KPrintF>
    80cc:	       addq.l #4,sp
	WaitVbl();
    80ce:	       jsr 17574 <WaitVbl>
	WaitVbl();
    80d4:	       jsr 17574 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    80da:	       pea 19267 <PutChar+0x1185>
    80e0:	       jsr 17640 <KPrintF>
    80e6:	       addq.l #4,sp
	OwnBlitter();
    80e8:	       move.l 1cde6 <GfxBase>,d0
    80ee:	       movea.l d0,a6
    80f0:	       jsr -456(a6)
	WaitBlit();	
    80f4:	       move.l 1cde6 <GfxBase>,d0
    80fa:	       movea.l d0,a6
    80fc:	       jsr -228(a6)
	Disable();
    8100:	       move.l 1cdda <SysBase>,d0
    8106:	       movea.l d0,a6
    8108:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    810c:	       pea 19288 <PutChar+0x11a6>
    8112:	       jsr 17640 <KPrintF>
    8118:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    811a:	       movea.l 1cdde <custom>,a0
    8120:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    8126:	       pea 1929f <PutChar+0x11bd>
    812c:	       jsr 17640 <KPrintF>
    8132:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    8134:	       clr.l 8(sp)
    8138:	   ,-- bra.s 8156 <TakeSystem+0x14a>
		custom->color[a]=0;
    813a:	,--|-> movea.l 1cdde <custom>,a0
    8140:	|  |   move.l 8(sp),d0
    8144:	|  |   addi.l #192,d0
    814a:	|  |   add.l d0,d0
    814c:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    8152:	|  |   addq.l #1,8(sp)
    8156:	|  '-> moveq #31,d0
    8158:	|      cmp.l 8(sp),d0
    815c:	'----- bge.s 813a <TakeSystem+0x12e>

	WaitVbl();
    815e:	       jsr 17574 <WaitVbl>
	WaitVbl();
    8164:	       jsr 17574 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    816a:	       pea 192c4 <PutChar+0x11e2>
    8170:	       jsr 17640 <KPrintF>
    8176:	       addq.l #4,sp
	VBR=GetVBR();
    8178:	       jsr 7f7e <GetVBR>
    817e:	       move.l d0,1ce00 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    8184:	       jsr 8000 <GetInterruptHandler>
    818a:	       move.l d0,1ce04 <SystemIrq>
}
    8190:	       nop
    8192:	       movea.l (sp)+,a6
    8194:	       addq.l #8,sp
    8196:	       rts

00008198 <FreeSystem>:

void FreeSystem() { 
    8198:	subq.l #4,sp
    819a:	move.l a6,-(sp)
	WaitVbl();
    819c:	jsr 17574 <WaitVbl>
	WaitBlit();
    81a2:	move.l 1cde6 <GfxBase>,d0
    81a8:	movea.l d0,a6
    81aa:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    81ae:	movea.l 1cdde <custom>,a0
    81b4:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    81ba:	movea.l 1cdde <custom>,a0
    81c0:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    81c6:	movea.l 1cdde <custom>,a0
    81cc:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    81d2:	move.l 1ce04 <SystemIrq>,d0
    81d8:	move.l d0,-(sp)
    81da:	jsr 7fee <SetInterruptHandler>
    81e0:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    81e2:	movea.l 1cde6 <GfxBase>,a0
    81e8:	move.l 38(a0),d0
    81ec:	movea.l 1cdde <custom>,a0
    81f2:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    81f6:	movea.l 1cde6 <GfxBase>,a0
    81fc:	move.l 50(a0),d0
    8200:	movea.l 1cdde <custom>,a0
    8206:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    820a:	movea.l 1cdde <custom>,a0
    8210:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    8216:	move.w 1cdfc <SystemDMA>,d0
    821c:	movea.l 1cdde <custom>,a0
    8222:	ori.w #-32768,d0
    8226:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    822a:	move.w 1cdfe <SystemADKCON>,d0
    8230:	movea.l 1cdde <custom>,a0
    8236:	ori.w #-32768,d0
    823a:	move.w d0,158(a0)

	WaitBlit();	
    823e:	move.l 1cde6 <GfxBase>,d0
    8244:	movea.l d0,a6
    8246:	jsr -228(a6)
	DisownBlitter();
    824a:	move.l 1cde6 <GfxBase>,d0
    8250:	movea.l d0,a6
    8252:	jsr -462(a6)
	Enable();
    8256:	move.l 1cdda <SysBase>,d0
    825c:	movea.l d0,a6
    825e:	jsr -126(a6)

	LoadView(ActiView);
    8262:	move.l 1ce08 <ActiView>,4(sp)
    826a:	move.l 1cde6 <GfxBase>,d0
    8270:	movea.l d0,a6
    8272:	movea.l 4(sp),a1
    8276:	jsr -222(a6)
	WaitTOF();
    827a:	move.l 1cde6 <GfxBase>,d0
    8280:	movea.l d0,a6
    8282:	jsr -270(a6)
	WaitTOF();
    8286:	move.l 1cde6 <GfxBase>,d0
    828c:	movea.l d0,a6
    828e:	jsr -270(a6)

	Permit();
    8292:	move.l 1cdda <SysBase>,d0
    8298:	movea.l d0,a6
    829a:	jsr -138(a6)
}
    829e:	nop
    82a0:	movea.l (sp)+,a6
    82a2:	addq.l #4,sp
    82a4:	rts

000082a6 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    82a6:	       lea -132(sp),sp
    82aa:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    82ae:	       clr.l 140(sp)
    82b2:	   ,-- bra.s 82b8 <main+0x12>
    82b4:	,--|-> addq.l #1,140(sp)
    82b8:	|  '-> cmpi.l #999,140(sp)
    82c0:	'----- ble.s 82b4 <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    82c2:	       movea.w #4,a0
    82c6:	       move.l (a0),d0
    82c8:	       move.l d0,1cdda <SysBase>
	custom = (struct Custom*)0xdff000;	
    82ce:	       move.l #14675968,1cdde <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    82d8:	       move.l #103144,136(sp)
    82e0:	       clr.l 132(sp)
    82e4:	       move.l 1cdda <SysBase>,d0
    82ea:	       movea.l d0,a6
    82ec:	       movea.l 136(sp),a1
    82f0:	       move.l 132(sp),d0
    82f4:	       jsr -552(a6)
    82f8:	       move.l d0,128(sp)
    82fc:	       move.l 128(sp),d0
    8300:	       move.l d0,1cde6 <GfxBase>
	if (!GfxBase)
    8306:	       move.l 1cde6 <GfxBase>,d0
    830c:	   ,-- bne.s 8322 <main+0x7c>
		Exit(0);
    830e:	   |   clr.l 124(sp)
    8312:	   |   move.l 1cde2 <DOSBase>,d0
    8318:	   |   movea.l d0,a6
    831a:	   |   move.l 124(sp),d1
    831e:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    8322:	   '-> move.l #103161,120(sp)
    832a:	       clr.l 116(sp)
    832e:	       move.l 1cdda <SysBase>,d0
    8334:	       movea.l d0,a6
    8336:	       movea.l 120(sp),a1
    833a:	       move.l 116(sp),d0
    833e:	       jsr -552(a6)
    8342:	       move.l d0,112(sp)
    8346:	       move.l 112(sp),d0
    834a:	       move.l d0,1cde2 <DOSBase>
	if (!DOSBase)
    8350:	       move.l 1cde2 <DOSBase>,d0
    8356:	   ,-- bne.s 836c <main+0xc6>
		Exit(0);
    8358:	   |   clr.l 108(sp)
    835c:	   |   move.l 1cde2 <DOSBase>,d0
    8362:	   |   movea.l d0,a6
    8364:	   |   move.l 108(sp),d1
    8368:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    836c:	   '-> move.l #103173,104(sp)
    8374:	       clr.l 100(sp)
    8378:	       move.l 1cdda <SysBase>,d0
    837e:	       movea.l d0,a6
    8380:	       movea.l 104(sp),a1
    8384:	       move.l 100(sp),d0
    8388:	       jsr -552(a6)
    838c:	       move.l d0,96(sp)
    8390:	       move.l 96(sp),d0
    8394:	       move.l d0,1cdea <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    839a:	       move.l 1cdea <MathIeeeSingBasBase>,d0
    83a0:	   ,-- bne.s 83b6 <main+0x110>
		Exit(0);	
    83a2:	   |   clr.l 92(sp)
    83a6:	   |   move.l 1cde2 <DOSBase>,d0
    83ac:	   |   movea.l d0,a6
    83ae:	   |   move.l 92(sp),d1
    83b2:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    83b6:	   '-> move.l #103197,88(sp)
    83be:	       clr.l 84(sp)
    83c2:	       move.l 1cdda <SysBase>,d0
    83c8:	       movea.l d0,a6
    83ca:	       movea.l 88(sp),a1
    83ce:	       move.l 84(sp),d0
    83d2:	       jsr -552(a6)
    83d6:	       move.l d0,80(sp)
    83da:	       move.l 80(sp),d0
    83de:	       move.l d0,1cdee <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    83e4:	       move.l 1cdee <MathIeeeSingTransBase>,d0
    83ea:	   ,-- bne.s 8400 <main+0x15a>
		Exit(0);
    83ec:	   |   clr.l 76(sp)
    83f0:	   |   move.l 1cde2 <DOSBase>,d0
    83f6:	   |   movea.l d0,a6
    83f8:	   |   move.l 76(sp),d1
    83fc:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    8400:	   '-> move.l #103223,72(sp)
    8408:	       clr.l 68(sp)
    840c:	       move.l 1cdda <SysBase>,d0
    8412:	       movea.l d0,a6
    8414:	       movea.l 72(sp),a1
    8418:	       move.l 68(sp),d0
    841c:	       jsr -552(a6)
    8420:	       move.l d0,64(sp)
    8424:	       move.l 64(sp),d0
    8428:	       move.l d0,1cdf6 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    842e:	       move.l 1cdf6 <MathIeeeDoubTransBase>,d0
    8434:	   ,-- bne.s 844a <main+0x1a4>
		Exit(0);
    8436:	   |   clr.l 60(sp)
    843a:	   |   move.l 1cde2 <DOSBase>,d0
    8440:	   |   movea.l d0,a6
    8442:	   |   move.l 60(sp),d1
    8446:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    844a:	   '-> move.l #103249,56(sp)
    8452:	       clr.l 52(sp)
    8456:	       move.l 1cdda <SysBase>,d0
    845c:	       movea.l d0,a6
    845e:	       movea.l 56(sp),a1
    8462:	       move.l 52(sp),d0
    8466:	       jsr -552(a6)
    846a:	       move.l d0,48(sp)
    846e:	       move.l 48(sp),d0
    8472:	       move.l d0,1cdf2 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    8478:	       move.l 1cdf2 <MathIeeeDoubBasBase>,d0
    847e:	   ,-- bne.s 8494 <main+0x1ee>
		Exit(0);
    8480:	   |   clr.l 44(sp)
    8484:	   |   move.l 1cde2 <DOSBase>,d0
    848a:	   |   movea.l d0,a6
    848c:	   |   move.l 44(sp),d1
    8490:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    8494:	   '-> pea 19369 <PutChar+0x1287>
    849a:	       jsr 17640 <KPrintF>
    84a0:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    84a2:	       move.l 1cde2 <DOSBase>,d0
    84a8:	       movea.l d0,a6
    84aa:	       jsr -60(a6)
    84ae:	       move.l d0,40(sp)
    84b2:	       move.l 40(sp),d0
    84b6:	       move.l d0,36(sp)
    84ba:	       move.l #103305,32(sp)
    84c2:	       moveq #25,d0
    84c4:	       move.l d0,28(sp)
    84c8:	       move.l 1cde2 <DOSBase>,d0
    84ce:	       movea.l d0,a6
    84d0:	       move.l 36(sp),d1
    84d4:	       move.l 32(sp),d2
    84d8:	       move.l 28(sp),d3
    84dc:	       jsr -48(a6)
    84e0:	       move.l d0,24(sp)
	Delay(50);
    84e4:	       moveq #50,d0
    84e6:	       move.l d0,20(sp)
    84ea:	       move.l 1cde2 <DOSBase>,d0
    84f0:	       movea.l d0,a6
    84f2:	       move.l 20(sp),d1
    84f6:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    84fa:	       pea 193a2 <PutChar+0x12c0>
    8500:	       jsr 17640 <KPrintF>
    8506:	       addq.l #4,sp
	TakeSystem();
    8508:	       jsr 800c <TakeSystem>
	KPrintF("System Taken\n");
    850e:	       pea 193b1 <PutChar+0x12cf>
    8514:	       jsr 17640 <KPrintF>
    851a:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    851c:	       movea.l 1cdde <custom>,a0
    8522:	       move.w #-30721,150(a0)
	WaitVbl();
    8528:	       jsr 17574 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    852e:	       pea 193bf <PutChar+0x12dd>
    8534:	       jsr 17640 <KPrintF>
    853a:	       addq.l #4,sp
	main_sludge(argc, argv);	
    853c:	       move.l 152(sp),-(sp)
    8540:	       move.l 152(sp),-(sp)
    8544:	       jsr 4da0 <main_sludge>
    854a:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    854c:	       jsr 8198 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    8552:	       move.l 1cde2 <DOSBase>,16(sp)
    855a:	       move.l 1cdda <SysBase>,d0
    8560:	       movea.l d0,a6
    8562:	       movea.l 16(sp),a1
    8566:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    856a:	       move.l 1cde6 <GfxBase>,12(sp)
    8572:	       move.l 1cdda <SysBase>,d0
    8578:	       movea.l d0,a6
    857a:	       movea.l 12(sp),a1
    857e:	       jsr -414(a6)
    8582:	       moveq #0,d0
}
    8584:	       movem.l (sp)+,d2-d3/a6
    8588:	       lea 132(sp),sp
    858c:	       rts

0000858e <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    858e:	    lea -16(sp),sp
    8592:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    8594:	    moveq #8,d0
    8596:	    move.l d0,16(sp)
    859a:	    clr.l 12(sp)
    859e:	    move.l 1cdda <SysBase>,d0
    85a4:	    movea.l d0,a6
    85a6:	    move.l 16(sp),d0
    85aa:	    move.l 12(sp),d1
    85ae:	    jsr -684(a6)
    85b2:	    move.l d0,8(sp)
    85b6:	    move.l 8(sp),d0
    85ba:	    move.l d0,4(sp)
	if (!newStat) {
    85be:	,-- bne.s 85ee <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    85c0:	|   movea.l 1c762 <nowStatus>,a0
    85c6:	|   move.l (a0),d0
    85c8:	|   movea.l 4(sp),a0
    85cc:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    85d0:	|   pea 18def <PutChar+0xd0d>
    85d6:	|   jsr b8 <copyString>
    85dc:	|   addq.l #4,sp
    85de:	|   movea.l 4(sp),a0
    85e2:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    85e4:	|   movea.l 1c762 <nowStatus>,a0
    85ea:	|   move.l 4(sp),(a0)
	}
}
    85ee:	'-> nop
    85f0:	    movea.l (sp)+,a6
    85f2:	    lea 16(sp),sp
    85f6:	    rts

000085f8 <clearStatusBar>:

void clearStatusBar () {
    85f8:	       lea -16(sp),sp
    85fc:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    85fe:	       movea.l 1c762 <nowStatus>,a0
    8604:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8608:	       movea.l 1c762 <nowStatus>,a0
    860e:	       moveq #-1,d0
    8610:	       move.l d0,6(a0)
	while (stat) {
    8614:	   ,-- bra.s 8654 <clearStatusBar+0x5c>
		kill = stat;
    8616:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    861c:	|  |   movea.l 16(sp),a0
    8620:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    8626:	|  |   movea.l 12(sp),a0
    862a:	|  |   move.l (a0),8(sp)
    862e:	|  |   move.l 1cdda <SysBase>,d0
    8634:	|  |   movea.l d0,a6
    8636:	|  |   movea.l 8(sp),a1
    863a:	|  |   jsr -690(a6)
		FreeVec(kill);
    863e:	|  |   move.l 12(sp),4(sp)
    8644:	|  |   move.l 1cdda <SysBase>,d0
    864a:	|  |   movea.l d0,a6
    864c:	|  |   movea.l 4(sp),a1
    8650:	|  |   jsr -690(a6)
	while (stat) {
    8654:	|  '-> tst.l 16(sp)
    8658:	'----- bne.s 8616 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    865a:	       movea.l 1c762 <nowStatus>,a0
    8660:	       clr.l (a0)
}
    8662:	       nop
    8664:	       movea.l (sp)+,a6
    8666:	       lea 16(sp),sp
    866a:	       rts

0000866c <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    866c:	clr.l 1ce0c <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    8672:	move.w #-1,1ce10 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    867a:	moveq #-1,d0
    867c:	move.l d0,1ce12 <mainStatus+0x6>
	mainStatus.statusX = 10;
    8682:	moveq #10,d0
    8684:	move.l d0,1ce16 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    868a:	movea.l 1cd32 <winHeight>,a0
    8690:	lea -15(a0),a0
    8694:	move.l a0,d0
    8696:	move.l d0,1ce1a <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    869c:	nop
    869e:	rts

000086a0 <killLastStatus>:

void killLastStatus () {
    86a0:	    lea -12(sp),sp
    86a4:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    86a6:	    movea.l 1c762 <nowStatus>,a0
    86ac:	    move.l (a0),d0
    86ae:	,-- beq.s 86f8 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    86b0:	|   movea.l 1c762 <nowStatus>,a0
    86b6:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    86ba:	|   movea.l 1c762 <nowStatus>,a0
    86c0:	|   movea.l 12(sp),a1
    86c4:	|   move.l 4(a1),d0
    86c8:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    86ca:	|   movea.l 12(sp),a0
    86ce:	|   move.l (a0),8(sp)
    86d2:	|   move.l 1cdda <SysBase>,d0
    86d8:	|   movea.l d0,a6
    86da:	|   movea.l 8(sp),a1
    86de:	|   jsr -690(a6)
		FreeVec(kill);
    86e2:	|   move.l 12(sp),4(sp)
    86e8:	|   move.l 1cdda <SysBase>,d0
    86ee:	|   movea.l d0,a6
    86f0:	|   movea.l 4(sp),a1
    86f4:	|   jsr -690(a6)
	}
}
    86f8:	'-> nop
    86fa:	    movea.l (sp)+,a6
    86fc:	    lea 12(sp),sp
    8700:	    rts

00008702 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    8702:	movea.l 1c762 <nowStatus>,a0
    8708:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    870e:	movea.l 1c762 <nowStatus>,a0
    8714:	move.l 8(sp),14(a0)
}
    871a:	nop
    871c:	rts

0000871e <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    871e:	       lea -100(sp),sp
    8722:	       move.l a6,-(sp)
    8724:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    8726:	       movea.l 1c762 <nowStatus>,a0
    872c:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8730:	       movea.l 1c762 <nowStatus>,a0
    8736:	       move.w 4(a0),d0
    873a:	       move.w d0,d0
    873c:	       andi.l #65535,d0
    8742:	       move.l 112(sp),-(sp)
    8746:	       move.l d0,-(sp)
    8748:	       jsr 8d0 <put2bytes>
    874e:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    8750:	       movea.l 1c762 <nowStatus>,a0
    8756:	       move.l 6(a0),d0
    875a:	       move.l d0,d0
    875c:	       movea.w d0,a0
    875e:	       move.l 112(sp),-(sp)
    8762:	       move.l a0,-(sp)
    8764:	       jsr a9c <putSigned>
    876a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    876c:	       movea.l 1c762 <nowStatus>,a0
    8772:	       move.l 10(a0),d0
    8776:	       move.l 112(sp),-(sp)
    877a:	       move.l d0,-(sp)
    877c:	       jsr 8d0 <put2bytes>
    8782:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    8784:	       movea.l 1c762 <nowStatus>,a0
    878a:	       move.l 14(a0),d0
    878e:	       move.l 112(sp),-(sp)
    8792:	       move.l d0,-(sp)
    8794:	       jsr 8d0 <put2bytes>
    879a:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    879c:	       move.l 112(sp),100(sp)
    87a2:	       movea.l 1c762 <nowStatus>,a0
    87a8:	       move.l 18(a0),96(sp)
    87ae:	       move.l 1cde2 <DOSBase>,d0
    87b4:	       movea.l d0,a6
    87b6:	       move.l 100(sp),d1
    87ba:	       move.l 96(sp),d2
    87be:	       jsr -312(a6)
    87c2:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    87c6:	       move.l 112(sp),88(sp)
    87cc:	       movea.l 1c762 <nowStatus>,a0
    87d2:	       move.l 22(a0),84(sp)
    87d8:	       move.l 1cde2 <DOSBase>,d0
    87de:	       movea.l d0,a6
    87e0:	       move.l 88(sp),d1
    87e4:	       move.l 84(sp),d2
    87e8:	       jsr -312(a6)
    87ec:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    87f0:	       move.l 112(sp),76(sp)
    87f6:	       movea.l 1c762 <nowStatus>,a0
    87fc:	       move.l 26(a0),72(sp)
    8802:	       move.l 1cde2 <DOSBase>,d0
    8808:	       movea.l d0,a6
    880a:	       move.l 76(sp),d1
    880e:	       move.l 72(sp),d2
    8812:	       jsr -312(a6)
    8816:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    881a:	       move.l 112(sp),64(sp)
    8820:	       movea.l 1c762 <nowStatus>,a0
    8826:	       move.l 30(a0),60(sp)
    882c:	       move.l 1cde2 <DOSBase>,d0
    8832:	       movea.l d0,a6
    8834:	       move.l 64(sp),d1
    8838:	       move.l 60(sp),d2
    883c:	       jsr -312(a6)
    8840:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    8844:	       move.l 112(sp),52(sp)
    884a:	       movea.l 1c762 <nowStatus>,a0
    8850:	       move.l 34(a0),48(sp)
    8856:	       move.l 1cde2 <DOSBase>,d0
    885c:	       movea.l d0,a6
    885e:	       move.l 52(sp),d1
    8862:	       move.l 48(sp),d2
    8866:	       jsr -312(a6)
    886a:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    886e:	       move.l 112(sp),40(sp)
    8874:	       movea.l 1c762 <nowStatus>,a0
    887a:	       move.l 38(a0),36(sp)
    8880:	       move.l 1cde2 <DOSBase>,d0
    8886:	       movea.l d0,a6
    8888:	       move.l 40(sp),d1
    888c:	       move.l 36(sp),d2
    8890:	       jsr -312(a6)
    8894:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8898:	   ,-- bra.s 88dc <saveStatusBars+0x1be>
		FPutC (fp,1);
    889a:	,--|-> move.l 112(sp),16(sp)
    88a0:	|  |   moveq #1,d0
    88a2:	|  |   move.l d0,12(sp)
    88a6:	|  |   move.l 1cde2 <DOSBase>,d0
    88ac:	|  |   movea.l d0,a6
    88ae:	|  |   move.l 16(sp),d1
    88b2:	|  |   move.l 12(sp),d2
    88b6:	|  |   jsr -312(a6)
    88ba:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    88be:	|  |   movea.l 104(sp),a0
    88c2:	|  |   move.l (a0),d0
    88c4:	|  |   move.l 112(sp),-(sp)
    88c8:	|  |   move.l d0,-(sp)
    88ca:	|  |   jsr bd8 <writeString>
    88d0:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    88d2:	|  |   movea.l 104(sp),a0
    88d6:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    88dc:	|  '-> tst.l 104(sp)
    88e0:	'----- bne.s 889a <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    88e2:	       move.l 112(sp),28(sp)
    88e8:	       clr.l 24(sp)
    88ec:	       move.l 1cde2 <DOSBase>,d0
    88f2:	       movea.l d0,a6
    88f4:	       move.l 28(sp),d1
    88f8:	       move.l 24(sp),d2
    88fc:	       jsr -312(a6)
    8900:	       move.l d0,20(sp)
}
    8904:	       nop
    8906:	       move.l (sp)+,d2
    8908:	       movea.l (sp)+,a6
    890a:	       lea 100(sp),sp
    890e:	       rts

00008910 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    8910:	movea.l 1c762 <nowStatus>,a0
    8916:	move.l 4(sp),6(a0)
}
    891c:	nop
    891e:	rts

00008920 <setStatusBar>:

void setStatusBar (char * txt) {
    8920:	    subq.l #4,sp
    8922:	    move.l a6,-(sp)
    8924:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8926:	    movea.l 1c762 <nowStatus>,a0
    892c:	    move.l (a0),d0
    892e:	,-- beq.s 8962 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8930:	|   movea.l 1c762 <nowStatus>,a0
    8936:	|   movea.l (a0),a0
    8938:	|   move.l (a0),8(sp)
    893c:	|   move.l 1cdda <SysBase>,d0
    8942:	|   movea.l d0,a6
    8944:	|   movea.l 8(sp),a1
    8948:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    894c:	|   movea.l 1c762 <nowStatus>,a0
    8952:	|   movea.l (a0),a2
    8954:	|   move.l 16(sp),-(sp)
    8958:	|   jsr b8 <copyString>
    895e:	|   addq.l #4,sp
    8960:	|   move.l d0,(a2)
	}
}
    8962:	'-> nop
    8964:	    movea.l (sp)+,a2
    8966:	    movea.l (sp)+,a6
    8968:	    addq.l #4,sp
    896a:	    rts

0000896c <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    896c:	       movea.l 1c762 <nowStatus>,a0
    8972:	       move.l (a0),d0
    8974:	,----- beq.s 8982 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    8976:	|      movea.l 1c762 <nowStatus>,a0
    897c:	|      movea.l (a0),a0
    897e:	|      move.l (a0),d0
    8980:	|  ,-- bra.s 8988 <statusBarText+0x1c>
	} else {
		return "";
    8982:	'--|-> move.l #101871,d0
	}
    8988:	   '-> rts

0000898a <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    898a:	       lea -12(sp),sp
    898e:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8990:	       move.l 1ce36 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8998:	   ,-- bra.s 89c0 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    899a:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    89a0:	|  |   movea.l 12(sp),a0
    89a4:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    89aa:	|  |   move.l 8(sp),4(sp)
    89b0:	|  |   move.l 1cdda <SysBase>,d0
    89b6:	|  |   movea.l d0,a6
    89b8:	|  |   movea.l 4(sp),a1
    89bc:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    89c0:	|  '-> tst.l 12(sp)
    89c4:	'----- bne.s 899a <killZBuffer+0x10>
	}
	zBuffer = NULL;
    89c6:	       clr.l 1ce36 <zBuffer>
}
    89cc:	       nop
    89ce:	       movea.l (sp)+,a6
    89d0:	       lea 12(sp),sp
    89d4:	       rts

000089d6 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    89d6:	                lea -304(sp),sp
    89da:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    89de:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    89e2:	                jsr 898a <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    89e8:	                move.l 328(sp),d0
    89ec:	                move.l d0,-(sp)
    89ee:	                jsr 7a74 <openFileFromNum>
    89f4:	                addq.l #4,sp
    89f6:	                tst.l d0
    89f8:	            ,-- bne.s 8a00 <setZBuffer+0x2a>
    89fa:	            |   clr.w d0
    89fc:	,-----------|-- bra.w 8cbe <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8a00:	|           '-> move.l 1cdc2 <bigDataFile>,310(sp)
    8a08:	|               move.l 1cde2 <DOSBase>,d0
    8a0e:	|               movea.l d0,a6
    8a10:	|               move.l 310(sp),d1
    8a14:	|               jsr -306(a6)
    8a18:	|               move.l d0,306(sp)
    8a1c:	|               move.l 306(sp),d0
    8a20:	|               moveq #97,d1
    8a22:	|               cmp.l d0,d1
    8a24:	|        ,----- bne.s 8a98 <setZBuffer+0xc2>
    8a26:	|        |      move.l 1cdc2 <bigDataFile>,302(sp)
    8a2e:	|        |      move.l 1cde2 <DOSBase>,d0
    8a34:	|        |      movea.l d0,a6
    8a36:	|        |      move.l 302(sp),d1
    8a3a:	|        |      jsr -306(a6)
    8a3e:	|        |      move.l d0,298(sp)
    8a42:	|        |      move.l 298(sp),d0
    8a46:	|        |      moveq #115,d1
    8a48:	|        |      cmp.l d0,d1
    8a4a:	|        +----- bne.s 8a98 <setZBuffer+0xc2>
    8a4c:	|        |      move.l 1cdc2 <bigDataFile>,294(sp)
    8a54:	|        |      move.l 1cde2 <DOSBase>,d0
    8a5a:	|        |      movea.l d0,a6
    8a5c:	|        |      move.l 294(sp),d1
    8a60:	|        |      jsr -306(a6)
    8a64:	|        |      move.l d0,290(sp)
    8a68:	|        |      move.l 290(sp),d0
    8a6c:	|        |      moveq #122,d1
    8a6e:	|        |      cmp.l d0,d1
    8a70:	|        +----- bne.s 8a98 <setZBuffer+0xc2>
    8a72:	|        |      move.l 1cdc2 <bigDataFile>,286(sp)
    8a7a:	|        |      move.l 1cde2 <DOSBase>,d0
    8a80:	|        |      movea.l d0,a6
    8a82:	|        |      move.l 286(sp),d1
    8a86:	|        |      jsr -306(a6)
    8a8a:	|        |      move.l d0,282(sp)
    8a8e:	|        |      move.l 282(sp),d0
    8a92:	|        |      moveq #98,d1
    8a94:	|        |      cmp.l d0,d1
    8a96:	|        |  ,-- beq.s 8aac <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8a98:	|        '--|-> pea 193fc <PutChar+0x131a>
    8a9e:	|           |   jsr 17640 <KPrintF>
    8aa4:	|           |   addq.l #4,sp
		 return FALSE;
    8aa6:	|           |   clr.w d0
    8aa8:	+-----------|-- bra.w 8cbe <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8aac:	|           '-> move.l 1cdc2 <bigDataFile>,278(sp)
    8ab4:	|               move.l 1cde2 <DOSBase>,d0
    8aba:	|               movea.l d0,a6
    8abc:	|               move.l 278(sp),d1
    8ac0:	|               jsr -306(a6)
    8ac4:	|               move.l d0,274(sp)
    8ac8:	|               move.l 274(sp),d0
    8acc:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8ad0:	|               moveq #28,d0
    8ad2:	|               move.l d0,270(sp)
    8ad6:	|               clr.l 266(sp)
    8ada:	|               move.l 1cdda <SysBase>,d0
    8ae0:	|               movea.l d0,a6
    8ae2:	|               move.l 270(sp),d0
    8ae6:	|               move.l 266(sp),d1
    8aea:	|               jsr -684(a6)
    8aee:	|               move.l d0,262(sp)
    8af2:	|               move.l 262(sp),d0
    8af6:	|               move.l d0,1ce36 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8afc:	|               move.l 1ce36 <zBuffer>,318(sp)

	while(numelements--)
    8b04:	|     ,-------- bra.w 8ca4 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8b08:	|  ,--|-------> move.l 1cdc2 <bigDataFile>,d0
    8b0e:	|  |  |         move.l d0,-(sp)
    8b10:	|  |  |         jsr 6bc <get2bytes>
    8b16:	|  |  |         addq.l #4,sp
    8b18:	|  |  |         movea.l 318(sp),a0
    8b1c:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    8b1e:	|  |  |         move.l 1cdc2 <bigDataFile>,d0
    8b24:	|  |  |         move.l d0,-(sp)
    8b26:	|  |  |         jsr 6bc <get2bytes>
    8b2c:	|  |  |         addq.l #4,sp
    8b2e:	|  |  |         movea.l 318(sp),a0
    8b32:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8b36:	|  |  |         move.l 1cdc2 <bigDataFile>,d0
    8b3c:	|  |  |         move.l d0,-(sp)
    8b3e:	|  |  |         jsr 6bc <get2bytes>
    8b44:	|  |  |         addq.l #4,sp
    8b46:	|  |  |         movea.l 318(sp),a0
    8b4a:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8b4e:	|  |  |         move.l 1cdc2 <bigDataFile>,d0
    8b54:	|  |  |         move.l d0,-(sp)
    8b56:	|  |  |         jsr 6bc <get2bytes>
    8b5c:	|  |  |         addq.l #4,sp
    8b5e:	|  |  |         movea.l 318(sp),a0
    8b62:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8b66:	|  |  |         move.l 1cdc2 <bigDataFile>,d0
    8b6c:	|  |  |         move.l d0,-(sp)
    8b6e:	|  |  |         jsr 6bc <get2bytes>
    8b74:	|  |  |         addq.l #4,sp
    8b76:	|  |  |         movea.l 318(sp),a0
    8b7a:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8b7e:	|  |  |         movea.l 318(sp),a0
    8b82:	|  |  |         move.l (a0),d0
    8b84:	|  |  |         movea.l 318(sp),a0
    8b88:	|  |  |         move.l 4(a0),d1
    8b8c:	|  |  |         move.l d1,-(sp)
    8b8e:	|  |  |         move.l d0,-(sp)
    8b90:	|  |  |         jsr 17fcc <__mulsi3>
    8b96:	|  |  |         addq.l #8,sp
    8b98:	|  |  |         tst.l d0
    8b9a:	|  |  |     ,-- bge.s 8b9e <setZBuffer+0x1c8>
    8b9c:	|  |  |     |   addq.l #7,d0
    8b9e:	|  |  |     '-> asr.l #3,d0
    8ba0:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8ba4:	|  |  |         moveq #0,d0
    8ba6:	|  |  |         move.w 260(sp),d0
    8baa:	|  |  |         move.l d0,256(sp)
    8bae:	|  |  |         moveq #2,d1
    8bb0:	|  |  |         move.l d1,252(sp)
    8bb4:	|  |  |         move.l 1cdda <SysBase>,d0
    8bba:	|  |  |         movea.l d0,a6
    8bbc:	|  |  |         move.l 256(sp),d0
    8bc0:	|  |  |         move.l 252(sp),d1
    8bc4:	|  |  |         jsr -684(a6)
    8bc8:	|  |  |         move.l d0,248(sp)
    8bcc:	|  |  |         move.l 248(sp),d0
    8bd0:	|  |  |         movea.l 318(sp),a0
    8bd4:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8bd8:	|  |  |         move.l 1cdc2 <bigDataFile>,244(sp)
    8be0:	|  |  |         movea.l 318(sp),a0
    8be4:	|  |  |         move.l 20(a0),240(sp)
    8bea:	|  |  |         moveq #1,d0
    8bec:	|  |  |         move.l d0,236(sp)
    8bf0:	|  |  |         moveq #0,d0
    8bf2:	|  |  |         move.w 260(sp),d0
    8bf6:	|  |  |         move.l d0,232(sp)
    8bfa:	|  |  |         move.l 1cde2 <DOSBase>,d0
    8c00:	|  |  |         movea.l d0,a6
    8c02:	|  |  |         move.l 244(sp),d1
    8c06:	|  |  |         move.l 240(sp),d2
    8c0a:	|  |  |         move.l 236(sp),d3
    8c0e:	|  |  |         move.l 232(sp),d4
    8c12:	|  |  |         jsr -324(a6)
    8c16:	|  |  |         move.l d0,228(sp)
    8c1a:	|  |  |         move.l 228(sp),d0
    8c1e:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8c22:	|  |  |         tst.w 322(sp)
    8c26:	|  |  |  ,----- beq.s 8c62 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8c28:	|  |  |  |      moveq #28,d1
    8c2a:	|  |  |  |      move.l d1,222(sp)
    8c2e:	|  |  |  |      clr.l 218(sp)
    8c32:	|  |  |  |      move.l 1cdda <SysBase>,d0
    8c38:	|  |  |  |      movea.l d0,a6
    8c3a:	|  |  |  |      move.l 222(sp),d0
    8c3e:	|  |  |  |      move.l 218(sp),d1
    8c42:	|  |  |  |      jsr -684(a6)
    8c46:	|  |  |  |      move.l d0,214(sp)
    8c4a:	|  |  |  |      move.l 214(sp),d0
    8c4e:	|  |  |  |      movea.l 318(sp),a0
    8c52:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8c56:	|  |  |  |      movea.l 318(sp),a0
    8c5a:	|  |  |  |      move.l 24(a0),318(sp)
    8c60:	|  |  |  |  ,-- bra.s 8c6a <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8c62:	|  |  |  '--|-> movea.l 318(sp),a0
    8c66:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8c6a:	|  |  |     '-> movea.l 318(sp),a0
    8c6e:	|  |  |         move.l 4(a0),d0
    8c72:	|  |  |         move.l d0,d0
    8c74:	|  |  |         movea.w d0,a1
    8c76:	|  |  |         movea.l 318(sp),a0
    8c7a:	|  |  |         move.l (a0),d0
    8c7c:	|  |  |         move.l d0,d0
    8c7e:	|  |  |         movea.w d0,a0
    8c80:	|  |  |         movea.l 318(sp),a2
    8c84:	|  |  |         move.l 20(a2),d0
    8c88:	|  |  |         clr.l -(sp)
    8c8a:	|  |  |         pea 1 <_start+0x1>
    8c8e:	|  |  |         move.l a1,-(sp)
    8c90:	|  |  |         move.l a0,-(sp)
    8c92:	|  |  |         pea 19410 <PutChar+0x132e>
    8c98:	|  |  |         move.l d0,-(sp)
    8c9a:	|  |  |         jsr 17728 <debug_register_bitmap>
    8ca0:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8ca4:	|  |  '-------> move.w 322(sp),d0
    8ca8:	|  |            move.w d0,d1
    8caa:	|  |            subq.w #1,d1
    8cac:	|  |            move.w d1,322(sp)
    8cb0:	|  |            tst.w d0
    8cb2:	|  '----------- bne.w 8b08 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8cb6:	|               jsr 796c <finishAccess>
	
	return TRUE;
    8cbc:	|               moveq #1,d0
}
    8cbe:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    8cc2:	                lea 304(sp),sp
    8cc6:	                rts

00008cc8 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8cc8:	          lea -32(sp),sp
    8ccc:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8cce:	          move.l 40(sp),d0
    8cd2:	          addq.l #8,d0
    8cd4:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8cd8:	          clr.l 32(sp)
    8cdc:	   ,----- bra.s 8d22 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8cde:	,--|----> movea.l 24(sp),a0
    8ce2:	|  |      movea.l 8(a0),a0
    8ce6:	|  |      move.l 32(sp),d1
    8cea:	|  |      move.l d1,d0
    8cec:	|  |      lsl.l #3,d0
    8cee:	|  |      sub.l d1,d0
    8cf0:	|  |      add.l d0,d0
    8cf2:	|  |      add.l d0,d0
    8cf4:	|  |      adda.l d0,a0
    8cf6:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8cfa:	|  |      movea.l 8(sp),a0
    8cfe:	|  |      move.l 24(a0),d0
    8d02:	|  |  ,-- beq.s 8d1e <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8d04:	|  |  |   movea.l 8(sp),a0
    8d08:	|  |  |   move.l 24(a0),4(sp)
    8d0e:	|  |  |   move.l 1cdda <SysBase>,d0
    8d14:	|  |  |   movea.l d0,a6
    8d16:	|  |  |   movea.l 4(sp),a1
    8d1a:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8d1e:	|  |  '-> addq.l #1,32(sp)
    8d22:	|  '----> movea.l 24(sp),a0
    8d26:	|         move.l (a0),d0
    8d28:	|         cmp.l 32(sp),d0
    8d2c:	'-------- bgt.s 8cde <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8d2e:	          movea.l 24(sp),a0
    8d32:	          move.l 8(a0),20(sp)
    8d38:	          move.l 1cdda <SysBase>,d0
    8d3e:	          movea.l d0,a6
    8d40:	          movea.l 20(sp),a1
    8d44:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8d48:	          move.l 1ceee <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8d50:	      ,-- bra.s 8d5c <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8d52:	   ,--|-> movea.l 28(sp),a0
    8d56:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8d5c:	   |  '-> movea.l 28(sp),a0
    8d60:	   |      movea.l 22(a0),a0
    8d64:	   |      move.l (a0),d1
    8d66:	   |      movea.l 40(sp),a0
    8d6a:	   |      move.l (a0),d0
    8d6c:	   |      cmp.l d1,d0
    8d6e:	   |  ,-- beq.s 8d76 <forgetSpriteBank+0xae>
    8d70:	   |  |   tst.l 28(sp)
    8d74:	   '--|-- bne.s 8d52 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8d76:	      '-> tst.l 28(sp)
    8d7a:	   ,----- beq.s 8da4 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8d7c:	   |      movea.l 40(sp),a0
    8d80:	   |      move.l 22(a0),d0
    8d84:	   |      movea.l 28(sp),a0
    8d88:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8d8c:	   |      move.l 40(sp),12(sp)
    8d92:	   |      move.l 1cdda <SysBase>,d0
    8d98:	   |      movea.l d0,a6
    8d9a:	   |      movea.l 12(sp),a1
    8d9e:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8da2:	   |  ,-- bra.s 8dca <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8da4:	   '--|-> movea.l 1ceee <allLoadedBanks>,a0
    8daa:	      |   move.l 22(a0),d0
    8dae:	      |   move.l d0,1ceee <allLoadedBanks>
		FreeVec( forgetme);
    8db4:	      |   move.l 40(sp),16(sp)
    8dba:	      |   move.l 1cdda <SysBase>,d0
    8dc0:	      |   movea.l d0,a6
    8dc2:	      |   movea.l 16(sp),a1
    8dc6:	      |   jsr -690(a6)
}
    8dca:	      '-> nop
    8dcc:	          movea.l (sp)+,a6
    8dce:	          lea 32(sp),sp
    8dd2:	          rts

00008dd4 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8dd4:	                      lea -84(sp),sp
    8dd8:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8ddc:	                      pea 1941c <PutChar+0x133a>
    8de2:	                      jsr 17640 <KPrintF>
    8de8:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8dea:	                      clr.l 94(sp)
    8dee:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8df2:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8df6:	                      move.l 108(sp),-(sp)
    8dfa:	                      jsr 7a74 <openFileFromNum>
    8e00:	                      addq.l #4,sp
    8e02:	                      tst.l d0
    8e04:	                  ,-- bne.s 8e1a <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8e06:	                  |   pea 19436 <PutChar+0x1354>
    8e0c:	                  |   jsr 17640 <KPrintF>
    8e12:	                  |   addq.l #4,sp
		return FALSE;
    8e14:	                  |   clr.w d0
    8e16:	,-----------------|-- bra.w 920e <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8e1a:	|                 '-> move.l 1cdc2 <bigDataFile>,d0
    8e20:	|                     move.l d0,-(sp)
    8e22:	|                     jsr 6bc <get2bytes>
    8e28:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8e2a:	|                     move.l 1cdc2 <bigDataFile>,82(sp)
    8e32:	|                     move.l 1cde2 <DOSBase>,d0
    8e38:	|                     movea.l d0,a6
    8e3a:	|                     move.l 82(sp),d1
    8e3e:	|                     jsr -306(a6)
    8e42:	|                     move.l d0,78(sp)
    8e46:	|                     move.l 78(sp),d0
    8e4a:	|                     movea.l 112(sp),a0
    8e4e:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8e52:	|                     move.l 1cdc2 <bigDataFile>,d0
    8e58:	|                     move.l d0,-(sp)
    8e5a:	|                     jsr 6bc <get2bytes>
    8e60:	|                     addq.l #4,sp
    8e62:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8e66:	|                 ,-- bgt.s 8e7c <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8e68:	|                 |   pea 19464 <PutChar+0x1382>
    8e6e:	|                 |   jsr 17640 <KPrintF>
    8e74:	|                 |   addq.l #4,sp
		return FALSE;
    8e76:	|                 |   clr.w d0
    8e78:	+-----------------|-- bra.w 920e <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8e7c:	|                 '-> movea.l 112(sp),a0
    8e80:	|                     move.l 4(a0),d0
    8e84:	|                     moveq #3,d1
    8e86:	|                     cmp.l d0,d1
    8e88:	|                 ,-- bne.s 8e96 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8e8a:	|                 |   movea.l 112(sp),a0
    8e8e:	|                 |   move.w #1,12(a0)
    8e94:	|              ,--|-- bra.s 8eb8 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8e96:	|              |  '-> movea.l 112(sp),a0
    8e9a:	|              |      move.l 4(a0),d0
    8e9e:	|              |      moveq #3,d1
    8ea0:	|              |      cmp.l d0,d1
    8ea2:	|              +----- bge.s 8eb8 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8ea4:	|              |      pea 194a4 <PutChar+0x13c2>
    8eaa:	|              |      jsr 17640 <KPrintF>
    8eb0:	|              |      addq.l #4,sp
		return FALSE;
    8eb2:	|              |      clr.w d0
    8eb4:	+--------------|----- bra.w 920e <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8eb8:	|              '----> movea.l 112(sp),a0
    8ebc:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8ec0:	|                     move.l 74(sp),d1
    8ec4:	|                     move.l d1,d0
    8ec6:	|                     lsl.l #3,d0
    8ec8:	|                     sub.l d1,d0
    8eca:	|                     add.l d0,d0
    8ecc:	|                     add.l d0,d0
    8ece:	|                     move.l d0,70(sp)
    8ed2:	|                     clr.l 66(sp)
    8ed6:	|                     move.l 1cdda <SysBase>,d0
    8edc:	|                     movea.l d0,a6
    8ede:	|                     move.l 70(sp),d0
    8ee2:	|                     move.l 66(sp),d1
    8ee6:	|                     jsr -684(a6)
    8eea:	|                     move.l d0,62(sp)
    8eee:	|                     move.l 62(sp),d0
    8ef2:	|                     movea.l 112(sp),a0
    8ef6:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8efa:	|                     movea.l 112(sp),a0
    8efe:	|                     move.l 8(a0),d0
    8f02:	|                 ,-- bne.s 8f0a <loadSpriteBank+0x136>
    8f04:	|                 |   clr.w d0
    8f06:	+-----------------|-- bra.w 920e <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8f0a:	|                 '-> moveq #1,d0
    8f0c:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8f10:	|                     clr.l 100(sp)
    8f14:	|     ,-------------- bra.w 91ec <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8f18:	|  ,--|-------------> move.l 1cdc2 <bigDataFile>,d0
    8f1e:	|  |  |               move.l d0,-(sp)
    8f20:	|  |  |               jsr 6bc <get2bytes>
    8f26:	|  |  |               addq.l #4,sp
    8f28:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8f2c:	|  |  |               movea.l 112(sp),a0
    8f30:	|  |  |               movea.l 8(a0),a0
    8f34:	|  |  |               move.l 100(sp),d1
    8f38:	|  |  |               move.l d1,d0
    8f3a:	|  |  |               lsl.l #3,d0
    8f3c:	|  |  |               sub.l d1,d0
    8f3e:	|  |  |               add.l d0,d0
    8f40:	|  |  |               add.l d0,d0
    8f42:	|  |  |               adda.l d0,a0
    8f44:	|  |  |               moveq #0,d0
    8f46:	|  |  |               move.w 60(sp),d0
    8f4a:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8f4c:	|  |  |               movea.l 1cdc2 <bigDataFile>,a1
    8f52:	|  |  |               movea.l 112(sp),a0
    8f56:	|  |  |               movea.l 8(a0),a0
    8f5a:	|  |  |               move.l 100(sp),d1
    8f5e:	|  |  |               move.l d1,d0
    8f60:	|  |  |               lsl.l #3,d0
    8f62:	|  |  |               sub.l d1,d0
    8f64:	|  |  |               add.l d0,d0
    8f66:	|  |  |               add.l d0,d0
    8f68:	|  |  |               lea (0,a0,d0.l),a2
    8f6c:	|  |  |               move.l a1,-(sp)
    8f6e:	|  |  |               jsr 6bc <get2bytes>
    8f74:	|  |  |               addq.l #4,sp
    8f76:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8f7a:	|  |  |               movea.l 1cdc2 <bigDataFile>,a1
    8f80:	|  |  |               movea.l 112(sp),a0
    8f84:	|  |  |               movea.l 8(a0),a0
    8f88:	|  |  |               move.l 100(sp),d1
    8f8c:	|  |  |               move.l d1,d0
    8f8e:	|  |  |               lsl.l #3,d0
    8f90:	|  |  |               sub.l d1,d0
    8f92:	|  |  |               add.l d0,d0
    8f94:	|  |  |               add.l d0,d0
    8f96:	|  |  |               lea (0,a0,d0.l),a2
    8f9a:	|  |  |               move.l a1,-(sp)
    8f9c:	|  |  |               jsr 6bc <get2bytes>
    8fa2:	|  |  |               addq.l #4,sp
    8fa4:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8fa8:	|  |  |               movea.l 1cdc2 <bigDataFile>,a1
    8fae:	|  |  |               movea.l 112(sp),a0
    8fb2:	|  |  |               movea.l 8(a0),a0
    8fb6:	|  |  |               move.l 100(sp),d1
    8fba:	|  |  |               move.l d1,d0
    8fbc:	|  |  |               lsl.l #3,d0
    8fbe:	|  |  |               sub.l d1,d0
    8fc0:	|  |  |               add.l d0,d0
    8fc2:	|  |  |               add.l d0,d0
    8fc4:	|  |  |               lea (0,a0,d0.l),a2
    8fc8:	|  |  |               move.l a1,-(sp)
    8fca:	|  |  |               jsr 6bc <get2bytes>
    8fd0:	|  |  |               addq.l #4,sp
    8fd2:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8fd6:	|  |  |               movea.l 112(sp),a0
    8fda:	|  |  |               move.l 4(a0),d0
    8fde:	|  |  |               moveq #3,d1
    8fe0:	|  |  |               cmp.l d0,d1
    8fe2:	|  |  |     ,-------- beq.w 907e <loadSpriteBank+0x2aa>
    8fe6:	|  |  |     |         moveq #3,d1
    8fe8:	|  |  |     |         cmp.l d0,d1
    8fea:	|  |  |  ,--|-------- blt.w 9124 <loadSpriteBank+0x350>
    8fee:	|  |  |  |  |         moveq #1,d1
    8ff0:	|  |  |  |  |         cmp.l d0,d1
    8ff2:	|  |  |  |  |     ,-- beq.s 8ffe <loadSpriteBank+0x22a>
    8ff4:	|  |  |  |  |     |   moveq #2,d1
    8ff6:	|  |  |  |  |     |   cmp.l d0,d1
    8ff8:	|  |  |  |  |  ,--|-- beq.s 902a <loadSpriteBank+0x256>
    8ffa:	|  |  |  +--|--|--|-- bra.w 9124 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8ffe:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    9002:	|  |  |  |  |  |      movea.l 8(a0),a0
    9006:	|  |  |  |  |  |      move.l 100(sp),d1
    900a:	|  |  |  |  |  |      move.l d1,d0
    900c:	|  |  |  |  |  |      lsl.l #3,d0
    900e:	|  |  |  |  |  |      sub.l d1,d0
    9010:	|  |  |  |  |  |      add.l d0,d0
    9012:	|  |  |  |  |  |      add.l d0,d0
    9014:	|  |  |  |  |  |      adda.l d0,a0
    9016:	|  |  |  |  |  |      move.l 4(a0),d0
    901a:	|  |  |  |  |  |      addq.l #2,d0
    901c:	|  |  |  |  |  |      move.l d0,d0
    901e:	|  |  |  |  |  |      add.w d0,d0
    9020:	|  |  |  |  |  |      add.w d0,d0
    9022:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    9026:	|  |  |  +--|--|----- bra.w 9124 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    902a:	|  |  |  |  |  '----> movea.l 112(sp),a0
    902e:	|  |  |  |  |         movea.l 8(a0),a0
    9032:	|  |  |  |  |         move.l 100(sp),d1
    9036:	|  |  |  |  |         move.l d1,d0
    9038:	|  |  |  |  |         lsl.l #3,d0
    903a:	|  |  |  |  |         sub.l d1,d0
    903c:	|  |  |  |  |         add.l d0,d0
    903e:	|  |  |  |  |         add.l d0,d0
    9040:	|  |  |  |  |         adda.l d0,a0
    9042:	|  |  |  |  |         move.l (a0),d0
    9044:	|  |  |  |  |     ,-- bpl.s 9048 <loadSpriteBank+0x274>
    9046:	|  |  |  |  |     |   addq.l #7,d0
    9048:	|  |  |  |  |     '-> asr.l #3,d0
    904a:	|  |  |  |  |         move.l d0,d2
    904c:	|  |  |  |  |         movea.l 112(sp),a0
    9050:	|  |  |  |  |         movea.l 8(a0),a0
    9054:	|  |  |  |  |         move.l 100(sp),d1
    9058:	|  |  |  |  |         move.l d1,d0
    905a:	|  |  |  |  |         lsl.l #3,d0
    905c:	|  |  |  |  |         sub.l d1,d0
    905e:	|  |  |  |  |         add.l d0,d0
    9060:	|  |  |  |  |         add.l d0,d0
    9062:	|  |  |  |  |         adda.l d0,a0
    9064:	|  |  |  |  |         move.l 4(a0),d0
    9068:	|  |  |  |  |         move.l d0,d0
    906a:	|  |  |  |  |         move.w d2,d1
    906c:	|  |  |  |  |         muls.w d0,d1
    906e:	|  |  |  |  |         move.w d1,d0
    9070:	|  |  |  |  |         add.w d0,d0
    9072:	|  |  |  |  |         add.w d1,d0
    9074:	|  |  |  |  |         add.w d0,d0
    9076:	|  |  |  |  |         move.w d0,98(sp)
				break;
    907a:	|  |  |  +--|-------- bra.w 9124 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    907e:	|  |  |  |  '-------> movea.l 112(sp),a0
    9082:	|  |  |  |            movea.l 8(a0),a0
    9086:	|  |  |  |            move.l 100(sp),d1
    908a:	|  |  |  |            move.l d1,d0
    908c:	|  |  |  |            lsl.l #3,d0
    908e:	|  |  |  |            sub.l d1,d0
    9090:	|  |  |  |            add.l d0,d0
    9092:	|  |  |  |            add.l d0,d0
    9094:	|  |  |  |            adda.l d0,a0
    9096:	|  |  |  |            move.l (a0),d0
    9098:	|  |  |  |            andi.l #-2147483633,d0
    909e:	|  |  |  |        ,-- bpl.s 90a8 <loadSpriteBank+0x2d4>
    90a0:	|  |  |  |        |   subq.l #1,d0
    90a2:	|  |  |  |        |   moveq #-16,d1
    90a4:	|  |  |  |        |   or.l d1,d0
    90a6:	|  |  |  |        |   addq.l #1,d0
    90a8:	|  |  |  |        '-> tst.l d0
    90aa:	|  |  |  |     ,----- ble.s 90b0 <loadSpriteBank+0x2dc>
    90ac:	|  |  |  |     |      moveq #2,d0
    90ae:	|  |  |  |     |  ,-- bra.s 90b2 <loadSpriteBank+0x2de>
    90b0:	|  |  |  |     '--|-> clr.w d0
    90b2:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    90b6:	|  |  |  |            movea.l 112(sp),a0
    90ba:	|  |  |  |            movea.l 8(a0),a0
    90be:	|  |  |  |            move.l 100(sp),d1
    90c2:	|  |  |  |            move.l d1,d0
    90c4:	|  |  |  |            lsl.l #3,d0
    90c6:	|  |  |  |            sub.l d1,d0
    90c8:	|  |  |  |            add.l d0,d0
    90ca:	|  |  |  |            add.l d0,d0
    90cc:	|  |  |  |            adda.l d0,a0
    90ce:	|  |  |  |            move.l (a0),d0
    90d0:	|  |  |  |            movea.l d0,a0
    90d2:	|  |  |  |            cmpa.w #0,a0
    90d6:	|  |  |  |        ,-- bge.s 90dc <loadSpriteBank+0x308>
    90d8:	|  |  |  |        |   lea 15(a0),a0
    90dc:	|  |  |  |        '-> move.l a0,d0
    90de:	|  |  |  |            asr.l #4,d0
    90e0:	|  |  |  |            add.l d0,d0
    90e2:	|  |  |  |            move.l d0,d1
    90e4:	|  |  |  |            moveq #0,d0
    90e6:	|  |  |  |            move.w 58(sp),d0
    90ea:	|  |  |  |            add.l d1,d0
    90ec:	|  |  |  |            move.l d0,d2
    90ee:	|  |  |  |            movea.l 112(sp),a0
    90f2:	|  |  |  |            movea.l 8(a0),a0
    90f6:	|  |  |  |            move.l 100(sp),d1
    90fa:	|  |  |  |            move.l d1,d0
    90fc:	|  |  |  |            lsl.l #3,d0
    90fe:	|  |  |  |            sub.l d1,d0
    9100:	|  |  |  |            add.l d0,d0
    9102:	|  |  |  |            add.l d0,d0
    9104:	|  |  |  |            adda.l d0,a0
    9106:	|  |  |  |            move.l 4(a0),d0
    910a:	|  |  |  |            move.l d0,d0
    910c:	|  |  |  |            move.w d2,d1
    910e:	|  |  |  |            muls.w d0,d1
    9110:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    9114:	|  |  |  |            cmpi.w #100,98(sp)
    911a:	|  |  |  |        ,-- bls.s 9122 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    911c:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    9122:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    9124:	|  |  |  '----------> moveq #0,d0
    9126:	|  |  |               move.w 98(sp),d0
    912a:	|  |  |               add.l d0,d0
    912c:	|  |  |               move.l d0,52(sp)
    9130:	|  |  |               moveq #2,d0
    9132:	|  |  |               move.l d0,48(sp)
    9136:	|  |  |               move.l 1cdda <SysBase>,d0
    913c:	|  |  |               movea.l d0,a6
    913e:	|  |  |               move.l 52(sp),d0
    9142:	|  |  |               move.l 48(sp),d1
    9146:	|  |  |               jsr -684(a6)
    914a:	|  |  |               move.l d0,44(sp)
    914e:	|  |  |               movea.l 44(sp),a1
    9152:	|  |  |               movea.l 112(sp),a0
    9156:	|  |  |               movea.l 8(a0),a0
    915a:	|  |  |               move.l 100(sp),d1
    915e:	|  |  |               move.l d1,d0
    9160:	|  |  |               lsl.l #3,d0
    9162:	|  |  |               sub.l d1,d0
    9164:	|  |  |               add.l d0,d0
    9166:	|  |  |               add.l d0,d0
    9168:	|  |  |               adda.l d0,a0
    916a:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    916e:	|  |  |               move.l 1cdc2 <bigDataFile>,40(sp)
    9176:	|  |  |               movea.l 112(sp),a0
    917a:	|  |  |               movea.l 8(a0),a0
    917e:	|  |  |               move.l 100(sp),d1
    9182:	|  |  |               move.l d1,d0
    9184:	|  |  |               lsl.l #3,d0
    9186:	|  |  |               sub.l d1,d0
    9188:	|  |  |               add.l d0,d0
    918a:	|  |  |               add.l d0,d0
    918c:	|  |  |               adda.l d0,a0
    918e:	|  |  |               move.l 24(a0),36(sp)
    9194:	|  |  |               moveq #2,d1
    9196:	|  |  |               move.l d1,32(sp)
    919a:	|  |  |               move.w 98(sp),d0
    919e:	|  |  |               lsr.w #1,d0
    91a0:	|  |  |               move.w d0,d0
    91a2:	|  |  |               andi.l #65535,d0
    91a8:	|  |  |               move.l d0,28(sp)
    91ac:	|  |  |               move.l 1cde2 <DOSBase>,d0
    91b2:	|  |  |               movea.l d0,a6
    91b4:	|  |  |               move.l 40(sp),d1
    91b8:	|  |  |               move.l 36(sp),d2
    91bc:	|  |  |               move.l 32(sp),d3
    91c0:	|  |  |               move.l 28(sp),d4
    91c4:	|  |  |               jsr -324(a6)
    91c8:	|  |  |               move.l d0,24(sp)
    91cc:	|  |  |               move.l 24(sp),d0
    91d0:	|  |  |               move.w d0,22(sp)
		if (!count) {
    91d4:	|  |  |           ,-- bne.s 91e8 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    91d6:	|  |  |           |   pea 194d9 <PutChar+0x13f7>
    91dc:	|  |  |           |   jsr 17640 <KPrintF>
    91e2:	|  |  |           |   addq.l #4,sp
			return FALSE;
    91e4:	|  |  |           |   clr.w d0
    91e6:	+--|--|-----------|-- bra.s 920e <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    91e8:	|  |  |           '-> addq.l #1,100(sp)
    91ec:	|  |  '-------------> move.l 100(sp),d0
    91f0:	|  |                  cmp.l 74(sp),d0
    91f4:	|  '----------------- blt.w 8f18 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    91f8:	|                     jsr 796c <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    91fe:	|                     pea 1950c <PutChar+0x142a>
    9204:	|                     jsr 17640 <KPrintF>
    920a:	|                     addq.l #4,sp
	return TRUE;
    920c:	|                     moveq #1,d0
}
    920e:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    9212:	                      lea 84(sp),sp
    9216:	                      rts

00009218 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    9218:	                   lea -16(sp),sp
    921c:	                   move.l d2,-(sp)
    921e:	                   move.l 32(sp),d0
    9222:	                   move.w d0,d0
    9224:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    9228:	                   movea.l 28(sp),a0
    922c:	                   move.l (a0),d2
    922e:	                   movea.l 24(sp),a0
    9232:	                   move.l 8(a0),d0
    9236:	                   move.l d0,-(sp)
    9238:	                   jsr 17a72 <__floatsisf>
    923e:	                   addq.l #4,sp
    9240:	                   move.l d0,-(sp)
    9242:	                   move.l d2,-(sp)
    9244:	                   jsr 17d66 <__subsf3>
    924a:	                   addq.l #8,sp
    924c:	                   move.l d0,-(sp)
    924e:	                   jsr 17a0a <__fixsfsi>
    9254:	                   addq.l #4,sp
    9256:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    925a:	                   movea.l 28(sp),a0
    925e:	                   move.l 4(a0),d2
    9262:	                   movea.l 24(sp),a0
    9266:	                   move.l 12(a0),d0
    926a:	                   move.l d0,-(sp)
    926c:	                   jsr 17a72 <__floatsisf>
    9272:	                   addq.l #4,sp
    9274:	                   move.l d0,-(sp)
    9276:	                   move.l d2,-(sp)
    9278:	                   jsr 17d66 <__subsf3>
    927e:	                   addq.l #8,sp
    9280:	                   move.l d0,-(sp)
    9282:	                   jsr 17a0a <__fixsfsi>
    9288:	                   addq.l #4,sp
    928a:	                   move.w d0,8(sp)

	if( x < 0)
    928e:	                   tst.w 18(sp)
    9292:	               ,-- bge.s 92c6 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    9294:	               |   movea.l 28(sp),a0
    9298:	               |   move.l (a0),d2
    929a:	               |   movea.l 24(sp),a0
    929e:	               |   move.l 8(a0),d0
    92a2:	               |   move.l d0,-(sp)
    92a4:	               |   jsr 17a72 <__floatsisf>
    92aa:	               |   addq.l #4,sp
    92ac:	               |   move.l d0,-(sp)
    92ae:	               |   move.l d2,-(sp)
    92b0:	               |   jsr 17d66 <__subsf3>
    92b6:	               |   addq.l #8,sp
    92b8:	               |   move.l d0,-(sp)
    92ba:	               |   jsr 17a0a <__fixsfsi>
    92c0:	               |   addq.l #4,sp
    92c2:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    92c6:	               '-> movea.w 8(sp),a1
    92ca:	                   movea.w 18(sp),a0
    92ce:	                   pea 1 <_start+0x1>
    92d2:	                   move.l a1,-(sp)
    92d4:	                   move.l a0,-(sp)
    92d6:	                   move.l 40(sp),-(sp)
    92da:	                   move.l 40(sp),-(sp)
    92de:	                   jsr 2f08 <CstScaleSprite>
    92e4:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    92e8:	                   movea.l 28(sp),a0
    92ec:	                   move.l 118(a0),d0
    92f0:	                   moveq #8,d1
    92f2:	                   and.l d1,d0
    92f4:	   ,-------------- beq.w 93c0 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    92f8:	   |               movea.l 24(sp),a0
    92fc:	   |               move.l 8(a0),d0
    9300:	   |  ,----------- bpl.s 933c <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9302:	   |  |            move.w 18(sp),d0
    9306:	   |  |            tst.w 6(sp)
    930a:	   |  |     ,----- beq.s 9324 <scaleSprite+0x10c>
    930c:	   |  |     |      movea.l 24(sp),a0
    9310:	   |  |     |      move.l (a0),d1
    9312:	   |  |     |      move.l d1,d2
    9314:	   |  |     |      movea.l 24(sp),a0
    9318:	   |  |     |      move.l 8(a0),d1
    931c:	   |  |     |      move.l d1,d1
    931e:	   |  |     |      movea.w d2,a0
    9320:	   |  |     |      suba.w d1,a0
    9322:	   |  |     |  ,-- bra.s 9332 <scaleSprite+0x11a>
    9324:	   |  |     '--|-> movea.l 24(sp),a0
    9328:	   |  |        |   move.l 8(a0),d1
    932c:	   |  |        |   move.l d1,d1
    932e:	   |  |        |   movea.w d1,a0
    9330:	   |  |        |   addq.w #1,a0
    9332:	   |  |        '-> move.w d0,d1
    9334:	   |  |            sub.w a0,d1
    9336:	   |  |            move.w d1,16(sp)
    933a:	   |  |  ,-------- bra.s 9374 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    933c:	   |  '--|-------> move.w 18(sp),d1
    9340:	   |     |         tst.w 6(sp)
    9344:	   |     |  ,----- beq.s 9362 <scaleSprite+0x14a>
    9346:	   |     |  |      movea.l 24(sp),a0
    934a:	   |     |  |      move.l (a0),d0
    934c:	   |     |  |      move.l d0,d2
    934e:	   |     |  |      movea.l 24(sp),a0
    9352:	   |     |  |      move.l 8(a0),d0
    9356:	   |     |  |      move.l d0,d0
    9358:	   |     |  |      movea.w d2,a0
    935a:	   |     |  |      suba.w d0,a0
    935c:	   |     |  |      move.w a0,d0
    935e:	   |     |  |      subq.w #1,d0
    9360:	   |     |  |  ,-- bra.s 936c <scaleSprite+0x154>
    9362:	   |     |  '--|-> movea.l 24(sp),a0
    9366:	   |     |     |   move.l 8(a0),d0
    936a:	   |     |     |   move.l d0,d0
    936c:	   |     |     '-> movea.w d1,a0
    936e:	   |     |         suba.w d0,a0
    9370:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9374:	   |     '-------> movea.l 28(sp),a0
    9378:	   |               move.l 24(a0),d0
    937c:	   |               move.l d0,d1
    937e:	   |               movea.l 24(sp),a0
    9382:	   |               move.l 12(a0),d0
    9386:	   |               move.l d0,d0
    9388:	   |               sub.w d0,d1
    938a:	   |               move.w 8(sp),d0
    938e:	   |               movea.w d1,a0
    9390:	   |               adda.w d0,a0
    9392:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    9396:	   |               movea.l 24(sp),a0
    939a:	   |               move.l (a0),d0
    939c:	   |               move.l d0,d0
    939e:	   |               move.w 16(sp),d1
    93a2:	   |               add.w d0,d1
    93a4:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    93a8:	   |               movea.l 24(sp),a0
    93ac:	   |               move.l 4(a0),d0
    93b0:	   |               move.l d0,d0
    93b2:	   |               movea.w 14(sp),a0
    93b6:	   |               adda.w d0,a0
    93b8:	   |               move.w a0,10(sp)
    93bc:	,--|-------------- bra.w 94a8 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    93c0:	|  '-------------> move.w 18(sp),d1
    93c4:	|                  move.l 1ce90 <cameraX>,d0
    93ca:	|                  move.l d0,d0
    93cc:	|                  sub.w d0,d1
    93ce:	|                  move.w d1,18(sp)
		y -= cameraY;
    93d2:	|                  move.w 8(sp),d1
    93d6:	|                  move.l 1ce94 <cameraY>,d0
    93dc:	|                  move.l d0,d0
    93de:	|                  sub.w d0,d1
    93e0:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    93e4:	|                  movea.l 24(sp),a0
    93e8:	|                  move.l 8(a0),d0
    93ec:	|     ,----------- bpl.s 9428 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    93ee:	|     |            move.w 18(sp),d0
    93f2:	|     |            tst.w 6(sp)
    93f6:	|     |     ,----- beq.s 9410 <scaleSprite+0x1f8>
    93f8:	|     |     |      movea.l 24(sp),a0
    93fc:	|     |     |      move.l (a0),d1
    93fe:	|     |     |      move.l d1,d2
    9400:	|     |     |      movea.l 24(sp),a0
    9404:	|     |     |      move.l 8(a0),d1
    9408:	|     |     |      move.l d1,d1
    940a:	|     |     |      movea.w d2,a0
    940c:	|     |     |      suba.w d1,a0
    940e:	|     |     |  ,-- bra.s 941e <scaleSprite+0x206>
    9410:	|     |     '--|-> movea.l 24(sp),a0
    9414:	|     |        |   move.l 8(a0),d1
    9418:	|     |        |   move.l d1,d1
    941a:	|     |        |   movea.w d1,a0
    941c:	|     |        |   addq.w #1,a0
    941e:	|     |        '-> move.w d0,d1
    9420:	|     |            sub.w a0,d1
    9422:	|     |            move.w d1,16(sp)
    9426:	|     |  ,-------- bra.s 9460 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9428:	|     '--|-------> move.w 18(sp),d1
    942c:	|        |         tst.w 6(sp)
    9430:	|        |  ,----- beq.s 944e <scaleSprite+0x236>
    9432:	|        |  |      movea.l 24(sp),a0
    9436:	|        |  |      move.l (a0),d0
    9438:	|        |  |      move.l d0,d2
    943a:	|        |  |      movea.l 24(sp),a0
    943e:	|        |  |      move.l 8(a0),d0
    9442:	|        |  |      move.l d0,d0
    9444:	|        |  |      movea.w d2,a0
    9446:	|        |  |      suba.w d0,a0
    9448:	|        |  |      move.w a0,d0
    944a:	|        |  |      subq.w #1,d0
    944c:	|        |  |  ,-- bra.s 9458 <scaleSprite+0x240>
    944e:	|        |  '--|-> movea.l 24(sp),a0
    9452:	|        |     |   move.l 8(a0),d0
    9456:	|        |     |   move.l d0,d0
    9458:	|        |     '-> movea.w d1,a0
    945a:	|        |         suba.w d0,a0
    945c:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9460:	|        '-------> movea.l 28(sp),a0
    9464:	|                  move.l 24(a0),d0
    9468:	|                  move.l d0,d1
    946a:	|                  movea.l 24(sp),a0
    946e:	|                  move.l 12(a0),d0
    9472:	|                  move.l d0,d0
    9474:	|                  sub.w d0,d1
    9476:	|                  move.w 8(sp),d0
    947a:	|                  movea.w d1,a0
    947c:	|                  adda.w d0,a0
    947e:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    9482:	|                  movea.l 24(sp),a0
    9486:	|                  move.l (a0),d0
    9488:	|                  move.l d0,d0
    948a:	|                  move.w 16(sp),d1
    948e:	|                  add.w d0,d1
    9490:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    9494:	|                  movea.l 24(sp),a0
    9498:	|                  move.l 4(a0),d0
    949c:	|                  move.l d0,d0
    949e:	|                  movea.w 14(sp),a0
    94a2:	|                  adda.w d0,a0
    94a4:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    94a8:	'----------------> move.l 1cd96 <input+0xa>,d1
    94ae:	                   moveq #0,d0
    94b0:	                   move.w 16(sp),d0
    94b4:	                   cmp.l d1,d0
    94b6:	            ,----- bgt.s 94ec <scaleSprite+0x2d4>
    94b8:	            |      move.l 1cd96 <input+0xa>,d1
    94be:	            |      moveq #0,d0
    94c0:	            |      move.w 12(sp),d0
    94c4:	            |      cmp.l d1,d0
    94c6:	            +----- blt.s 94ec <scaleSprite+0x2d4>
    94c8:	            |      move.l 1cd9a <input+0xe>,d1
    94ce:	            |      moveq #0,d0
    94d0:	            |      move.w 14(sp),d0
    94d4:	            |      cmp.l d1,d0
    94d6:	            +----- bgt.s 94ec <scaleSprite+0x2d4>
    94d8:	            |      move.l 1cd9a <input+0xe>,d1
    94de:	            |      moveq #0,d0
    94e0:	            |      move.w 10(sp),d0
    94e4:	            |      cmp.l d1,d0
    94e6:	            +----- blt.s 94ec <scaleSprite+0x2d4>
		return TRUE;
    94e8:	            |      moveq #1,d0
    94ea:	            |  ,-- bra.s 94ee <scaleSprite+0x2d6>
	}
	return FALSE;
    94ec:	            '--|-> clr.w d0
    94ee:	               '-> move.l (sp)+,d2
    94f0:	                   lea 16(sp),sp
    94f4:	                   rts

000094f6 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    94f6:	    move.l 4(sp),d0
    94fa:	,-- bpl.s 94fe <TF_abs+0x8>
    94fc:	|   neg.l d0
}
    94fe:	'-> rts

00009500 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9500:	             lea -28(sp),sp
    9504:	             move.l a6,-(sp)
    9506:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9508:	             move.l #132,28(sp)
    9510:	             clr.l 24(sp)
    9514:	             move.l 1cdda <SysBase>,d0
    951a:	             movea.l d0,a6
    951c:	             move.l 28(sp),d0
    9520:	             move.l 24(sp),d1
    9524:	             jsr -684(a6)
    9528:	             move.l d0,20(sp)
    952c:	             move.l 20(sp),d0
    9530:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    9534:	         ,-- bne.s 953c <addPerson+0x3c>
    9536:	         |   clr.w d0
    9538:	,--------|-- bra.w 976c <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    953c:	|        '-> move.l 48(sp),-(sp)
    9540:	|            jsr d964 <loadObjectType>
    9546:	|            addq.l #4,sp
    9548:	|            movea.l 16(sp),a0
    954c:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9550:	|            movea.l 16(sp),a0
    9554:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    955c:	|            movea.l 16(sp),a0
    9560:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    9564:	|            movea.l 16(sp),a0
    9568:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    956c:	|            move.l 44(sp),-(sp)
    9570:	|            jsr 17a72 <__floatsisf>
    9576:	|            addq.l #4,sp
    9578:	|            move.l d0,d2
    957a:	|            move.l 40(sp),-(sp)
    957e:	|            jsr 17a72 <__floatsisf>
    9584:	|            addq.l #4,sp
    9586:	|            move.l d2,-(sp)
    9588:	|            move.l d0,-(sp)
    958a:	|            move.l 24(sp),-(sp)
    958e:	|            jsr b0b0 <moveAndScale>
    9594:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9598:	|            movea.l 16(sp),a0
    959c:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    95a0:	|            movea.l 16(sp),a0
    95a4:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    95aa:	|            movea.l 16(sp),a0
    95ae:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    95b4:	|            movea.l 16(sp),a0
    95b8:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    95bc:	|            movea.l 16(sp),a0
    95c0:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    95c4:	|            movea.l 16(sp),a0
    95c8:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    95ce:	|            movea.l 16(sp),a0
    95d2:	|            clr.l 106(a0)
    newPerson->angle = 180;
    95d6:	|            movea.l 16(sp),a0
    95da:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    95e2:	|            movea.l 16(sp),a0
    95e6:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    95ee:	|            movea.l 16(sp),a0
    95f2:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    95f6:	|            movea.l 16(sp),a0
    95fa:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    95fe:	|            movea.l 16(sp),a0
    9602:	|            movea.l 114(a0),a0
    9606:	|            move.l 24(a0),d0
    960a:	|            movea.l 16(sp),a0
    960e:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9612:	|            movea.l 16(sp),a0
    9616:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    961a:	|            movea.l 16(sp),a0
    961e:	|            movea.l 114(a0),a0
    9622:	|            move.l 32(a0),d0
    9626:	|            movea.l 16(sp),a0
    962a:	|            move.l d0,122(a0)
    newPerson->r = 0;
    962e:	|            movea.l 16(sp),a0
    9632:	|            clr.b 126(a0)
    newPerson->g = 0;
    9636:	|            movea.l 16(sp),a0
    963a:	|            clr.b 127(a0)
    newPerson->b = 0;
    963e:	|            movea.l 16(sp),a0
    9642:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9646:	|            movea.l 16(sp),a0
    964a:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    964e:	|            movea.l 16(sp),a0
    9652:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9656:	|            movea.l 16(sp),a0
    965a:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9660:	|            clr.l -(sp)
    9662:	|            move.l 20(sp),-(sp)
    9666:	|            jsr 4516 <setFrames>
    966c:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    966e:	|            movea.l 52(sp),a0
    9672:	|            movea.l (a0),a0
    9674:	|            movea.l (a0),a0
    9676:	|            movea.l 4(a0),a0
    967a:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    967e:	|     ,----- bpl.s 9688 <addPerson+0x188>
    9680:	|     |      move.l 12(sp),d0
    9684:	|     |      neg.l d0
    9686:	|     |  ,-- bra.s 968a <addPerson+0x18a>
    9688:	|     '--|-> moveq #1,d0
    968a:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    968e:	|            movea.l 52(sp),a0
    9692:	|            movea.l (a0),a0
    9694:	|            movea.l (a0),a0
    9696:	|            movea.l (a0),a0
    9698:	|            move.l 8(a0),d0
    969c:	|            cmp.l 8(sp),d0
    96a0:	|     ,----- bgt.s 96d2 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    96a2:	|     |      tst.l 12(sp)
    96a6:	|     |  ,-- bge.s 96b4 <addPerson+0x1b4>
            newPerson->height = 5;
    96a8:	|     |  |   movea.l 16(sp),a0
    96ac:	|     |  |   moveq #5,d0
    96ae:	|     |  |   move.l d0,20(a0)
    96b2:	|  ,--|--|-- bra.s 96fe <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    96b4:	|  |  |  '-> movea.l 52(sp),a0
    96b8:	|  |  |      movea.l (a0),a0
    96ba:	|  |  |      movea.l (a0),a0
    96bc:	|  |  |      movea.l (a0),a0
    96be:	|  |  |      movea.l 16(a0),a0
    96c2:	|  |  |      move.l 12(a0),d0
    96c6:	|  |  |      addq.l #5,d0
    96c8:	|  |  |      movea.l 16(sp),a0
    96cc:	|  |  |      move.l d0,20(a0)
    96d0:	|  +--|----- bra.s 96fe <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    96d2:	|  |  '----> movea.l 52(sp),a0
    96d6:	|  |         movea.l (a0),a0
    96d8:	|  |         movea.l (a0),a0
    96da:	|  |         movea.l (a0),a0
    96dc:	|  |         movea.l 16(a0),a0
    96e0:	|  |         move.l 8(sp),d1
    96e4:	|  |         move.l d1,d0
    96e6:	|  |         lsl.l #3,d0
    96e8:	|  |         sub.l d1,d0
    96ea:	|  |         add.l d0,d0
    96ec:	|  |         add.l d0,d0
    96ee:	|  |         adda.l d0,a0
    96f0:	|  |         move.l 12(a0),d0
    96f4:	|  |         addq.l #5,d0
    96f6:	|  |         movea.l 16(sp),a0
    96fa:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    96fe:	|  '-------> move.l #118330,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9706:	|        ,-- bra.s 9716 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9708:	|     ,--|-> movea.l 32(sp),a0
    970c:	|     |  |   move.l (a0),d0
    970e:	|     |  |   moveq #36,d1
    9710:	|     |  |   add.l d0,d1
    9712:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9716:	|     |  '-> movea.l 32(sp),a0
    971a:	|     |      move.l (a0),d0
    971c:	|     |  ,-- beq.s 9744 <addPerson+0x244>
    971e:	|     |  |   movea.l 32(sp),a0
    9722:	|     |  |   movea.l (a0),a0
    9724:	|     |  |   move.l 4(a0),d2
    9728:	|     |  |   move.l 44(sp),-(sp)
    972c:	|     |  |   jsr 17a72 <__floatsisf>
    9732:	|     |  |   addq.l #4,sp
    9734:	|     |  |   move.l d0,-(sp)
    9736:	|     |  |   move.l d2,-(sp)
    9738:	|     |  |   jsr 17c98 <__ltsf2>
    973e:	|     |  |   addq.l #8,sp
    9740:	|     |  |   tst.l d0
    9742:	|     '--|-- blt.s 9708 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9744:	|        '-> movea.l 32(sp),a0
    9748:	|            move.l (a0),d0
    974a:	|            movea.l 16(sp),a0
    974e:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9752:	|            movea.l 32(sp),a0
    9756:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    975a:	|            movea.l 16(sp),a0
    975e:	|            move.l 114(a0),d0
    9762:	|            sne d0
    9764:	|            neg.b d0
    9766:	|            move.b d0,d0
    9768:	|            andi.w #255,d0
}
    976c:	'----------> move.l (sp)+,d2
    976e:	             movea.l (sp)+,a6
    9770:	             lea 28(sp),sp
    9774:	             rts

00009776 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9776:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9778:	       move.l 8(sp),-(sp)
    977c:	       jsr a906 <findPerson>
    9782:	       addq.l #4,sp
    9784:	       move.l d0,(sp)
    if (moveMe) {
    9786:	,----- beq.s 97ba <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9788:	|      movea.l (sp),a0
    978a:	|      move.l 68(a0),d0
    978e:	|  ,-- beq.s 97a0 <animatePerson+0x2a>
    9790:	|  |   movea.l (sp),a0
    9792:	|  |   move.l 68(a0),d0
    9796:	|  |   move.l d0,-(sp)
    9798:	|  |   jsr 5374 <abortFunction>
    979e:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    97a0:	|  '-> movea.l (sp),a0
    97a2:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    97a6:	|      movea.l (sp),a0
    97a8:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    97ac:	|      movea.l (sp),a0
    97ae:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    97b2:	|      movea.l (sp),a0
    97b4:	|      move.l 12(sp),72(a0)
    }
}
    97ba:	'----> nop
    97bc:	       addq.l #4,sp
    97be:	       rts

000097c0 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    97c0:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    97c2:	       move.l 8(sp),-(sp)
    97c6:	       jsr a906 <findPerson>
    97cc:	       addq.l #4,sp
    97ce:	       move.l d0,(sp)
    if (moveMe) {
    97d0:	,----- beq.s 9812 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    97d2:	|      movea.l (sp),a0
    97d4:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    97d8:	|      movea.l (sp),a0
    97da:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    97e0:	|      move.l (sp),-(sp)
    97e2:	|      jsr b23e <rethinkAngle>
    97e8:	|      addq.l #4,sp
        if (moveMe->walking) {
    97ea:	|      movea.l (sp),a0
    97ec:	|      move.w 64(a0),d0
    97f0:	|  ,-- beq.s 9804 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    97f2:	|  |   pea 1 <_start+0x1>
    97f6:	|  |   move.l 4(sp),-(sp)
    97fa:	|  |   jsr 4516 <setFrames>
    9800:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9802:	+--|-- bra.s 9812 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9804:	|  '-> clr.l -(sp)
    9806:	|      move.l 4(sp),-(sp)
    980a:	|      jsr 4516 <setFrames>
    9810:	|      addq.l #8,sp
}
    9812:	'----> nop
    9814:	       addq.l #4,sp
    9816:	       rts

00009818 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9818:	             lea -36(sp),sp
    981c:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    981e:	             movea.l 44(sp),a0
    9822:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9828:	             moveq #12,d0
    982a:	             move.l d0,28(sp)
    982e:	             clr.l 24(sp)
    9832:	             move.l 1cdda <SysBase>,d0
    9838:	             movea.l d0,a6
    983a:	             move.l 28(sp),d0
    983e:	             move.l 24(sp),d1
    9842:	             jsr -684(a6)
    9846:	             move.l d0,20(sp)
    984a:	             move.l 20(sp),d0
    984e:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9852:	         ,-- bne.s 9868 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9854:	         |   pea 19526 <PutChar+0x1444>
    985a:	         |   jsr 17640 <KPrintF>
    9860:	         |   addq.l #4,sp
		return NULL;
    9862:	         |   moveq #0,d0
    9864:	,--------|-- bra.w 99ba <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9868:	|        '-> movea.l 44(sp),a0
    986c:	|            move.l (a0),d0
    986e:	|            movea.l 16(sp),a0
    9872:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9874:	|            movea.l 16(sp),a0
    9878:	|            movea.l (a0),a0
    987a:	|            move.l 4(a0),d0
    987e:	|            addq.l #1,d0
    9880:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9884:	|            movea.l 16(sp),a0
    9888:	|            move.l 32(sp),8(a0)

	if (num) {
    988e:	|  ,-------- beq.w 99ae <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9892:	|  |         move.l 32(sp),d1
    9896:	|  |         move.l d1,d0
    9898:	|  |         add.l d0,d0
    989a:	|  |         add.l d1,d0
    989c:	|  |         add.l d0,d0
    989e:	|  |         add.l d0,d0
    98a0:	|  |         move.l d0,12(sp)
    98a4:	|  |         clr.l 8(sp)
    98a8:	|  |         move.l 1cdda <SysBase>,d0
    98ae:	|  |         movea.l d0,a6
    98b0:	|  |         move.l 12(sp),d0
    98b4:	|  |         move.l 8(sp),d1
    98b8:	|  |         jsr -684(a6)
    98bc:	|  |         move.l d0,4(sp)
    98c0:	|  |         move.l 4(sp),d0
    98c4:	|  |         movea.l 16(sp),a0
    98c8:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    98cc:	|  |         movea.l 16(sp),a0
    98d0:	|  |         move.l 4(a0),d0
    98d4:	|  |     ,-- bne.s 98ea <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    98d6:	|  |     |   pea 19526 <PutChar+0x1444>
    98dc:	|  |     |   jsr 17640 <KPrintF>
    98e2:	|  |     |   addq.l #4,sp
			return NULL;
    98e4:	|  |     |   moveq #0,d0
    98e6:	+--|-----|-- bra.w 99ba <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    98ea:	|  |     '-> clr.l 36(sp)
    98ee:	|  |     ,-- bra.w 99a0 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    98f2:	|  |  ,--|-> movea.l 44(sp),a0
    98f6:	|  |  |  |   movea.l 4(a0),a0
    98fa:	|  |  |  |   move.l 36(sp),d1
    98fe:	|  |  |  |   move.l d1,d0
    9900:	|  |  |  |   add.l d0,d0
    9902:	|  |  |  |   add.l d1,d0
    9904:	|  |  |  |   add.l d0,d0
    9906:	|  |  |  |   add.l d0,d0
    9908:	|  |  |  |   lea (0,a0,d0.l),a1
    990c:	|  |  |  |   movea.l 16(sp),a0
    9910:	|  |  |  |   movea.l 4(a0),a0
    9914:	|  |  |  |   move.l 36(sp),d1
    9918:	|  |  |  |   move.l d1,d0
    991a:	|  |  |  |   add.l d0,d0
    991c:	|  |  |  |   add.l d1,d0
    991e:	|  |  |  |   add.l d0,d0
    9920:	|  |  |  |   add.l d0,d0
    9922:	|  |  |  |   adda.l d0,a0
    9924:	|  |  |  |   move.l (a1),d0
    9926:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9928:	|  |  |  |   movea.l 44(sp),a0
    992c:	|  |  |  |   movea.l 4(a0),a0
    9930:	|  |  |  |   move.l 36(sp),d1
    9934:	|  |  |  |   move.l d1,d0
    9936:	|  |  |  |   add.l d0,d0
    9938:	|  |  |  |   add.l d1,d0
    993a:	|  |  |  |   add.l d0,d0
    993c:	|  |  |  |   add.l d0,d0
    993e:	|  |  |  |   lea (0,a0,d0.l),a1
    9942:	|  |  |  |   movea.l 16(sp),a0
    9946:	|  |  |  |   movea.l 4(a0),a0
    994a:	|  |  |  |   move.l 36(sp),d1
    994e:	|  |  |  |   move.l d1,d0
    9950:	|  |  |  |   add.l d0,d0
    9952:	|  |  |  |   add.l d1,d0
    9954:	|  |  |  |   add.l d0,d0
    9956:	|  |  |  |   add.l d0,d0
    9958:	|  |  |  |   adda.l d0,a0
    995a:	|  |  |  |   move.l 4(a1),d0
    995e:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9962:	|  |  |  |   movea.l 44(sp),a0
    9966:	|  |  |  |   movea.l 4(a0),a0
    996a:	|  |  |  |   move.l 36(sp),d1
    996e:	|  |  |  |   move.l d1,d0
    9970:	|  |  |  |   add.l d0,d0
    9972:	|  |  |  |   add.l d1,d0
    9974:	|  |  |  |   add.l d0,d0
    9976:	|  |  |  |   add.l d0,d0
    9978:	|  |  |  |   lea (0,a0,d0.l),a1
    997c:	|  |  |  |   movea.l 16(sp),a0
    9980:	|  |  |  |   movea.l 4(a0),a0
    9984:	|  |  |  |   move.l 36(sp),d1
    9988:	|  |  |  |   move.l d1,d0
    998a:	|  |  |  |   add.l d0,d0
    998c:	|  |  |  |   add.l d1,d0
    998e:	|  |  |  |   add.l d0,d0
    9990:	|  |  |  |   add.l d0,d0
    9992:	|  |  |  |   adda.l d0,a0
    9994:	|  |  |  |   move.l 8(a1),d0
    9998:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    999c:	|  |  |  |   addq.l #1,36(sp)
    99a0:	|  |  |  '-> move.l 36(sp),d0
    99a4:	|  |  |      cmp.l 32(sp),d0
    99a8:	|  |  '----- blt.w 98f2 <copyAnim+0xda>
    99ac:	|  |     ,-- bra.s 99b6 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    99ae:	|  '-----|-> movea.l 16(sp),a0
    99b2:	|        |   clr.l 4(a0)
	}

	return newAnim;
    99b6:	|        '-> move.l 16(sp),d0
}
    99ba:	'----------> movea.l (sp)+,a6
    99bc:	             lea 36(sp),sp
    99c0:	             rts

000099c2 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    99c2:	                lea -44(sp),sp
    99c6:	                move.l a6,-(sp)
    99c8:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    99ca:	                moveq #12,d0
    99cc:	                move.l d0,40(sp)
    99d0:	                clr.l 36(sp)
    99d4:	                move.l 1cdda <SysBase>,d0
    99da:	                movea.l d0,a6
    99dc:	                move.l 40(sp),d0
    99e0:	                move.l 36(sp),d1
    99e4:	                jsr -684(a6)
    99e8:	                move.l d0,32(sp)
    99ec:	                move.l 32(sp),d0
    99f0:	                move.l d0,28(sp)
	if( !newP) {
    99f4:	            ,-- bne.s 9a0a <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    99f6:	            |   pea 19547 <PutChar+0x1465>
    99fc:	            |   jsr 17640 <KPrintF>
    9a02:	            |   addq.l #4,sp
		return NULL;
    9a04:	            |   moveq #0,d0
    9a06:	,-----------|-- bra.w 9bda <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9a0a:	|           '-> movea.l 28(sp),a0
    9a0e:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9a14:	|               move.l 56(sp),d1
    9a18:	|               move.l d1,d0
    9a1a:	|               add.l d0,d0
    9a1c:	|               add.l d1,d0
    9a1e:	|               add.l d0,d0
    9a20:	|               add.l d0,d0
    9a22:	|               move.l d0,24(sp)
    9a26:	|               clr.l 20(sp)
    9a2a:	|               move.l 1cdda <SysBase>,d0
    9a30:	|               movea.l d0,a6
    9a32:	|               move.l 24(sp),d0
    9a36:	|               move.l 20(sp),d1
    9a3a:	|               jsr -684(a6)
    9a3e:	|               move.l d0,16(sp)
    9a42:	|               move.l 16(sp),d0
    9a46:	|               movea.l 28(sp),a0
    9a4a:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9a4e:	|               movea.l 28(sp),a0
    9a52:	|               move.l 4(a0),d0
    9a56:	|           ,-- bne.s 9a6c <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9a58:	|           |   pea 19547 <PutChar+0x1465>
    9a5e:	|           |   jsr 17640 <KPrintF>
    9a64:	|           |   addq.l #4,sp
		return NULL;
    9a66:	|           |   moveq #0,d0
    9a68:	+-----------|-- bra.w 9bda <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    9a6c:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9a72:	|               movea.l 60(sp),a0
    9a76:	|               move.l (a0),44(sp)
	while (a) {
    9a7a:	|     ,-------- bra.w 9bce <createPersonaAnim+0x20c>
		a --;
    9a7e:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    9a82:	|  |  |         movea.l 28(sp),a0
    9a86:	|  |  |         movea.l 4(a0),a0
    9a8a:	|  |  |         move.l 48(sp),d1
    9a8e:	|  |  |         move.l d1,d0
    9a90:	|  |  |         add.l d0,d0
    9a92:	|  |  |         add.l d1,d0
    9a94:	|  |  |         add.l d0,d0
    9a96:	|  |  |         add.l d0,d0
    9a98:	|  |  |         adda.l d0,a0
    9a9a:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    9a9e:	|  |  |         movea.l 44(sp),a0
    9aa2:	|  |  |         move.l (a0),d0
    9aa4:	|  |  |         moveq #5,d1
    9aa6:	|  |  |         cmp.l d0,d1
    9aa8:	|  |  |     ,-- bne.s 9ad4 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9aaa:	|  |  |     |   movea.l 28(sp),a0
    9aae:	|  |  |     |   movea.l 4(a0),a0
    9ab2:	|  |  |     |   move.l 48(sp),d1
    9ab6:	|  |  |     |   move.l d1,d0
    9ab8:	|  |  |     |   add.l d0,d0
    9aba:	|  |  |     |   add.l d1,d0
    9abc:	|  |  |     |   add.l d0,d0
    9abe:	|  |  |     |   add.l d0,d0
    9ac0:	|  |  |     |   lea (0,a0,d0.l),a1
    9ac4:	|  |  |     |   movea.l 44(sp),a0
    9ac8:	|  |  |     |   move.l 4(a0),d0
    9acc:	|  |  |     |   move.l d0,8(a1)
    9ad0:	|  |  |  ,--|-- bra.w 9b7c <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9ad4:	|  |  |  |  '-> movea.l 44(sp),a0
    9ad8:	|  |  |  |      move.l (a0),d0
    9ada:	|  |  |  |      moveq #2,d1
    9adc:	|  |  |  |      cmp.l d0,d1
    9ade:	|  |  |  |  ,-- bne.s 9b0a <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9ae0:	|  |  |  |  |   movea.l 44(sp),a0
    9ae4:	|  |  |  |  |   move.l 4(a0),d2
    9ae8:	|  |  |  |  |   movea.l 28(sp),a0
    9aec:	|  |  |  |  |   movea.l 4(a0),a0
    9af0:	|  |  |  |  |   move.l 48(sp),d1
    9af4:	|  |  |  |  |   move.l d1,d0
    9af6:	|  |  |  |  |   add.l d0,d0
    9af8:	|  |  |  |  |   add.l d1,d0
    9afa:	|  |  |  |  |   add.l d0,d0
    9afc:	|  |  |  |  |   add.l d0,d0
    9afe:	|  |  |  |  |   adda.l d0,a0
    9b00:	|  |  |  |  |   move.l d2,d0
    9b02:	|  |  |  |  |   neg.l d0
    9b04:	|  |  |  |  |   move.l d0,8(a0)
    9b08:	|  |  |  +--|-- bra.s 9b7c <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9b0a:	|  |  |  |  '-> movea.l 44(sp),a0
    9b0e:	|  |  |  |      move.l (a0),d0
    9b10:	|  |  |  |      moveq #6,d1
    9b12:	|  |  |  |      cmp.l d0,d1
    9b14:	|  |  |  |  ,-- bne.s 9b5c <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9b16:	|  |  |  |  |   movea.l 44(sp),a0
    9b1a:	|  |  |  |  |   movea.l 4(a0),a0
    9b1e:	|  |  |  |  |   move.l (a0),d0
    9b20:	|  |  |  |  |   move.l d0,-(sp)
    9b22:	|  |  |  |  |   pea 1 <_start+0x1>
    9b26:	|  |  |  |  |   lea 20(sp),a0
    9b2a:	|  |  |  |  |   move.l a0,-(sp)
    9b2c:	|  |  |  |  |   jsr 14b60 <getValueType>
    9b32:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9b36:	|  |  |  |  |   movea.l 44(sp),a0
    9b3a:	|  |  |  |  |   movea.l 4(a0),a0
    9b3e:	|  |  |  |  |   movea.l (a0),a0
    9b40:	|  |  |  |  |   move.l 8(a0),d0
    9b44:	|  |  |  |  |   move.l d0,-(sp)
    9b46:	|  |  |  |  |   pea 1 <_start+0x1>
    9b4a:	|  |  |  |  |   lea 16(sp),a0
    9b4e:	|  |  |  |  |   move.l a0,-(sp)
    9b50:	|  |  |  |  |   jsr 14b60 <getValueType>
    9b56:	|  |  |  |  |   lea 12(sp),sp
    9b5a:	|  |  |  +--|-- bra.s 9b7c <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9b5c:	|  |  |  |  '-> move.l 44(sp),d0
    9b60:	|  |  |  |      move.l d0,-(sp)
    9b62:	|  |  |  |      pea 1 <_start+0x1>
    9b66:	|  |  |  |      lea 20(sp),a0
    9b6a:	|  |  |  |      move.l a0,-(sp)
    9b6c:	|  |  |  |      jsr 14b60 <getValueType>
    9b72:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9b76:	|  |  |  |      moveq #1,d0
    9b78:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    9b7c:	|  |  |  '----> move.l 60(sp),-(sp)
    9b80:	|  |  |         jsr 154e4 <trimStack>
    9b86:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9b88:	|  |  |         movea.l 28(sp),a0
    9b8c:	|  |  |         movea.l 4(a0),a0
    9b90:	|  |  |         move.l 48(sp),d1
    9b94:	|  |  |         move.l d1,d0
    9b96:	|  |  |         add.l d0,d0
    9b98:	|  |  |         add.l d1,d0
    9b9a:	|  |  |         add.l d0,d0
    9b9c:	|  |  |         add.l d0,d0
    9b9e:	|  |  |         adda.l d0,a0
    9ba0:	|  |  |         move.l 12(sp),d0
    9ba4:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9ba6:	|  |  |         movea.l 28(sp),a0
    9baa:	|  |  |         movea.l 4(a0),a0
    9bae:	|  |  |         move.l 48(sp),d1
    9bb2:	|  |  |         move.l d1,d0
    9bb4:	|  |  |         add.l d0,d0
    9bb6:	|  |  |         add.l d1,d0
    9bb8:	|  |  |         add.l d0,d0
    9bba:	|  |  |         add.l d0,d0
    9bbc:	|  |  |         adda.l d0,a0
    9bbe:	|  |  |         move.l 8(sp),d0
    9bc2:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9bc6:	|  |  |         movea.l 60(sp),a0
    9bca:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9bce:	|  |  '-------> tst.l 48(sp)
    9bd2:	|  '----------- bne.w 9a7e <createPersonaAnim+0xbc>
	}

	return newP;
    9bd6:	|               move.l 28(sp),d0
}
    9bda:	'-------------> move.l (sp)+,d2
    9bdc:	                movea.l (sp)+,a6
    9bde:	                lea 44(sp),sp
    9be2:	                rts

00009be4 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9be4:	       lea -12(sp),sp
    9be8:	       move.l a6,-(sp)

	if(orig->theSprites)
    9bea:	       movea.l 20(sp),a0
    9bee:	       move.l (a0),d0
    9bf0:	   ,-- beq.s 9c1a <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9bf2:	   |   movea.l 20(sp),a0
    9bf6:	   |   movea.l (a0),a0
    9bf8:	   |   move.l 4(a0),d0
    9bfc:	   |   subq.l #1,d0
    9bfe:	   |   move.l d0,4(a0)
    9c02:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9c08:	   +-- bne.s 9c1a <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9c0a:	   |   movea.l 20(sp),a0
    9c0e:	   |   move.l (a0),d0
    9c10:	   |   move.l d0,-(sp)
    9c12:	   |   jsr 8cc8 <forgetSpriteBank>
    9c18:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9c1a:	   '-> tst.l 20(sp)
    9c1e:	,----- beq.s 9c5e <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9c20:	|      movea.l 20(sp),a0
    9c24:	|      move.l 8(a0),d0
    9c28:	|  ,-- beq.s 9c44 <deleteAnim+0x60>
			FreeVec( orig->frames);
    9c2a:	|  |   movea.l 20(sp),a0
    9c2e:	|  |   move.l 4(a0),8(sp)
    9c34:	|  |   move.l 1cdda <SysBase>,d0
    9c3a:	|  |   movea.l d0,a6
    9c3c:	|  |   movea.l 8(sp),a1
    9c40:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9c44:	|  '-> move.l 20(sp),4(sp)
    9c4a:	|      move.l 1cdda <SysBase>,d0
    9c50:	|      movea.l d0,a6
    9c52:	|      movea.l 4(sp),a1
    9c56:	|      jsr -690(a6)
		orig = NULL;
    9c5a:	|      clr.l 20(sp)
	}	
	
}
    9c5e:	'----> nop
    9c60:	       movea.l (sp)+,a6
    9c62:	       lea 12(sp),sp
    9c66:	       rts

00009c68 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9c68:	          lea -124(sp),sp
    9c6c:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9c70:	          movea.l 152(sp),a0
    9c74:	          move.l 56(a0),d1
    9c78:	          movea.l 152(sp),a0
    9c7c:	          move.l 60(a0),d0
    9c80:	          cmp.l d1,d0
    9c82:	      ,-- bne.s 9cb2 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9c84:	      |   movea.l 152(sp),a0
    9c88:	      |   moveq #-1,d0
    9c8a:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9c8e:	      |   movea.l 152(sp),a0
    9c92:	      |   move.l 40(a0),d0
    9c96:	      |   movea.l 152(sp),a0
    9c9a:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9c9e:	      |   movea.l 152(sp),a0
    9ca2:	      |   move.l 44(a0),d0
    9ca6:	      |   movea.l 152(sp),a0
    9caa:	      |   move.l d0,52(a0)
    9cae:	   ,--|-- bra.w a218 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9cb2:	   |  '-> movea.l 1cef2 <currentFloor>,a0
    9cb8:	   |      move.l 16(a0),d1
    9cbc:	   |      movea.l 152(sp),a0
    9cc0:	   |      move.l 56(a0),d0
    9cc4:	   |      add.l d0,d0
    9cc6:	   |      add.l d0,d0
    9cc8:	   |      movea.l d1,a0
    9cca:	   |      adda.l d0,a0
    9ccc:	   |      move.l (a0),d1
    9cce:	   |      movea.l 152(sp),a0
    9cd2:	   |      move.l 60(a0),d0
    9cd6:	   |      add.l d0,d0
    9cd8:	   |      add.l d0,d0
    9cda:	   |      movea.l d1,a0
    9cdc:	   |      adda.l d0,a0
    9cde:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9ce2:	   |      moveq #-1,d0
    9ce4:	   |      cmp.l 144(sp),d0
    9ce8:	   |  ,-- bne.s 9cf0 <doBorderStuff+0x88>
    9cea:	   |  |   clr.w d0
    9cec:	,--|--|-- bra.w a318 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9cf0:	|  |  '-> movea.l 1cef2 <currentFloor>,a0
    9cf6:	|  |      move.l 12(a0),d1
    9cfa:	|  |      move.l 144(sp),d0
    9cfe:	|  |      lsl.l #3,d0
    9d00:	|  |      add.l d0,d1
    9d02:	|  |      movea.l 1cef2 <currentFloor>,a0
    9d08:	|  |      movea.l 12(a0),a1
    9d0c:	|  |      movea.l 152(sp),a0
    9d10:	|  |      move.l 56(a0),d0
    9d14:	|  |      lsl.l #3,d0
    9d16:	|  |      add.l a1,d0
    9d18:	|  |      lea 40(sp),a0
    9d1c:	|  |      move.l a0,-(sp)
    9d1e:	|  |      lea 48(sp),a0
    9d22:	|  |      move.l a0,-(sp)
    9d24:	|  |      move.l d1,-(sp)
    9d26:	|  |      move.l d0,-(sp)
    9d28:	|  |      jsr 168a6 <getMatchingCorners>
    9d2e:	|  |      lea 16(sp),sp
    9d32:	|  |      tst.w d0
    9d34:	|  |  ,-- bne.s 9d4a <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9d36:	|  |  |   pea 19571 <PutChar+0x148f>
    9d3c:	|  |  |   jsr 17640 <KPrintF>
    9d42:	|  |  |   addq.l #4,sp
            return FALSE;
    9d44:	|  |  |   clr.w d0
    9d46:	+--|--|-- bra.w a318 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9d4a:	|  |  '-> movea.l 152(sp),a0
    9d4e:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9d54:	|  |      movea.l 152(sp),a0
    9d58:	|  |      move.l (a0),d0
    9d5a:	|  |      move.l d0,-(sp)
    9d5c:	|  |      jsr 17a0a <__fixsfsi>
    9d62:	|  |      addq.l #4,sp
    9d64:	|  |      move.l d0,140(sp)
    9d68:	|  |      movea.l 152(sp),a0
    9d6c:	|  |      move.l 4(a0),d0
    9d70:	|  |      move.l d0,-(sp)
    9d72:	|  |      jsr 17a0a <__fixsfsi>
    9d78:	|  |      addq.l #4,sp
    9d7a:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9d7e:	|  |      movea.l 152(sp),a0
    9d82:	|  |      move.l 40(a0),132(sp)
    9d88:	|  |      movea.l 152(sp),a0
    9d8c:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9d92:	|  |      movea.l 1cef2 <currentFloor>,a0
    9d98:	|  |      move.l 4(a0),d1
    9d9c:	|  |      move.l 44(sp),d0
    9da0:	|  |      lsl.l #3,d0
    9da2:	|  |      movea.l d1,a0
    9da4:	|  |      adda.l d0,a0
    9da6:	|  |      move.l (a0),124(sp)
    9daa:	|  |      movea.l 1cef2 <currentFloor>,a0
    9db0:	|  |      move.l 4(a0),d1
    9db4:	|  |      move.l 44(sp),d0
    9db8:	|  |      lsl.l #3,d0
    9dba:	|  |      movea.l d1,a0
    9dbc:	|  |      adda.l d0,a0
    9dbe:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9dc4:	|  |      movea.l 1cef2 <currentFloor>,a0
    9dca:	|  |      move.l 4(a0),d1
    9dce:	|  |      move.l 40(sp),d0
    9dd2:	|  |      lsl.l #3,d0
    9dd4:	|  |      movea.l d1,a0
    9dd6:	|  |      adda.l d0,a0
    9dd8:	|  |      move.l (a0),116(sp)
    9ddc:	|  |      movea.l 1cef2 <currentFloor>,a0
    9de2:	|  |      move.l 4(a0),d1
    9de6:	|  |      move.l 40(sp),d0
    9dea:	|  |      lsl.l #3,d0
    9dec:	|  |      movea.l d1,a0
    9dee:	|  |      adda.l d0,a0
    9df0:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9df6:	|  |      move.l 140(sp),d0
    9dfa:	|  |      sub.l 132(sp),d0
    9dfe:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9e02:	|  |      move.l 136(sp),d0
    9e06:	|  |      sub.l 128(sp),d0
    9e0a:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9e0e:	|  |      move.l 116(sp),d0
    9e12:	|  |      sub.l 124(sp),d0
    9e16:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9e1a:	|  |      move.l 112(sp),d0
    9e1e:	|  |      sub.l 120(sp),d0
    9e22:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9e26:	|  |      move.l 124(sp),d0
    9e2a:	|  |      sub.l 140(sp),d0
    9e2e:	|  |      move.l 104(sp),-(sp)
    9e32:	|  |      move.l d0,-(sp)
    9e34:	|  |      jsr 17fcc <__mulsi3>
    9e3a:	|  |      addq.l #8,sp
    9e3c:	|  |      move.l d0,d2
    9e3e:	|  |      move.l 120(sp),d0
    9e42:	|  |      sub.l 136(sp),d0
    9e46:	|  |      move.l 108(sp),-(sp)
    9e4a:	|  |      move.l d0,-(sp)
    9e4c:	|  |      jsr 17fcc <__mulsi3>
    9e52:	|  |      addq.l #8,sp
    9e54:	|  |      move.l d2,d1
    9e56:	|  |      sub.l d0,d1
    9e58:	|  |      move.l d1,-(sp)
    9e5a:	|  |      jsr 17a32 <__floatsidf>
    9e60:	|  |      addq.l #4,sp
    9e62:	|  |      move.l d0,32(sp)
    9e66:	|  |      move.l d1,36(sp)
    9e6a:	|  |      move.l 32(sp),88(sp)
    9e70:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9e76:	|  |      move.l 96(sp),-(sp)
    9e7a:	|  |      move.l 112(sp),-(sp)
    9e7e:	|  |      jsr 17fcc <__mulsi3>
    9e84:	|  |      addq.l #8,sp
    9e86:	|  |      move.l d0,d2
    9e88:	|  |      move.l 100(sp),-(sp)
    9e8c:	|  |      move.l 108(sp),-(sp)
    9e90:	|  |      jsr 17fcc <__mulsi3>
    9e96:	|  |      addq.l #8,sp
    9e98:	|  |      move.l d2,d1
    9e9a:	|  |      sub.l d0,d1
    9e9c:	|  |      move.l d1,-(sp)
    9e9e:	|  |      jsr 17a32 <__floatsidf>
    9ea4:	|  |      addq.l #4,sp
    9ea6:	|  |      move.l d1,-(sp)
    9ea8:	|  |      move.l d0,-(sp)
    9eaa:	|  |      move.l 100(sp),-(sp)
    9eae:	|  |      move.l 100(sp),-(sp)
    9eb2:	|  |      jsr 178c6 <__divdf3>
    9eb8:	|  |      lea 16(sp),sp
    9ebc:	|  |      move.l d0,24(sp)
    9ec0:	|  |      move.l d1,28(sp)
    9ec4:	|  |      move.l 24(sp),88(sp)
    9eca:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9ed0:	|  |      clr.l -(sp)
    9ed2:	|  |      clr.l -(sp)
    9ed4:	|  |      move.l 100(sp),-(sp)
    9ed8:	|  |      move.l 100(sp),-(sp)
    9edc:	|  |      jsr 17b90 <__gtdf2>
    9ee2:	|  |      lea 16(sp),sp
    9ee6:	|  |      tst.l d0
    9ee8:	|  |  ,-- ble.w 9fc0 <doBorderStuff+0x358>
    9eec:	|  |  |   clr.l -(sp)
    9eee:	|  |  |   move.l #1072693248,-(sp)
    9ef4:	|  |  |   move.l 100(sp),-(sp)
    9ef8:	|  |  |   move.l 100(sp),-(sp)
    9efc:	|  |  |   jsr 17c4a <__ltdf2>
    9f02:	|  |  |   lea 16(sp),sp
    9f06:	|  |  |   tst.l d0
    9f08:	|  |  +-- bge.w 9fc0 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9f0c:	|  |  |   move.l 124(sp),-(sp)
    9f10:	|  |  |   jsr 17a32 <__floatsidf>
    9f16:	|  |  |   addq.l #4,sp
    9f18:	|  |  |   move.l d0,d2
    9f1a:	|  |  |   move.l d1,d3
    9f1c:	|  |  |   move.l 100(sp),-(sp)
    9f20:	|  |  |   jsr 17a32 <__floatsidf>
    9f26:	|  |  |   addq.l #4,sp
    9f28:	|  |  |   move.l 92(sp),-(sp)
    9f2c:	|  |  |   move.l 92(sp),-(sp)
    9f30:	|  |  |   move.l d1,-(sp)
    9f32:	|  |  |   move.l d0,-(sp)
    9f34:	|  |  |   jsr 17ac2 <__muldf3>
    9f3a:	|  |  |   lea 16(sp),sp
    9f3e:	|  |  |   move.l d1,-(sp)
    9f40:	|  |  |   move.l d0,-(sp)
    9f42:	|  |  |   move.l d3,-(sp)
    9f44:	|  |  |   move.l d2,-(sp)
    9f46:	|  |  |   jsr 17864 <__adddf3>
    9f4c:	|  |  |   lea 16(sp),sp
    9f50:	|  |  |   move.l d1,-(sp)
    9f52:	|  |  |   move.l d0,-(sp)
    9f54:	|  |  |   jsr 179d4 <__fixdfsi>
    9f5a:	|  |  |   addq.l #8,sp
    9f5c:	|  |  |   movea.l 152(sp),a0
    9f60:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9f64:	|  |  |   move.l 120(sp),-(sp)
    9f68:	|  |  |   jsr 17a32 <__floatsidf>
    9f6e:	|  |  |   addq.l #4,sp
    9f70:	|  |  |   move.l d0,d2
    9f72:	|  |  |   move.l d1,d3
    9f74:	|  |  |   move.l 96(sp),-(sp)
    9f78:	|  |  |   jsr 17a32 <__floatsidf>
    9f7e:	|  |  |   addq.l #4,sp
    9f80:	|  |  |   move.l 92(sp),-(sp)
    9f84:	|  |  |   move.l 92(sp),-(sp)
    9f88:	|  |  |   move.l d1,-(sp)
    9f8a:	|  |  |   move.l d0,-(sp)
    9f8c:	|  |  |   jsr 17ac2 <__muldf3>
    9f92:	|  |  |   lea 16(sp),sp
    9f96:	|  |  |   move.l d1,-(sp)
    9f98:	|  |  |   move.l d0,-(sp)
    9f9a:	|  |  |   move.l d3,-(sp)
    9f9c:	|  |  |   move.l d2,-(sp)
    9f9e:	|  |  |   jsr 17864 <__adddf3>
    9fa4:	|  |  |   lea 16(sp),sp
    9fa8:	|  |  |   move.l d1,-(sp)
    9faa:	|  |  |   move.l d0,-(sp)
    9fac:	|  |  |   jsr 179d4 <__fixdfsi>
    9fb2:	|  |  |   addq.l #8,sp
    9fb4:	|  |  |   movea.l 152(sp),a0
    9fb8:	|  |  |   move.l d0,52(a0)
    9fbc:	|  +--|-- bra.w a218 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9fc0:	|  |  '-> move.l 140(sp),d0
    9fc4:	|  |      sub.l 124(sp),d0
    9fc8:	|  |      move.l d0,84(sp)
    9fcc:	|  |      move.l 140(sp),d0
    9fd0:	|  |      sub.l 116(sp),d0
    9fd4:	|  |      move.l d0,80(sp)
    9fd8:	|  |      move.l 132(sp),d0
    9fdc:	|  |      sub.l 124(sp),d0
    9fe0:	|  |      move.l d0,76(sp)
    9fe4:	|  |      move.l 132(sp),d0
    9fe8:	|  |      sub.l 116(sp),d0
    9fec:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9ff0:	|  |      move.l 136(sp),d0
    9ff4:	|  |      sub.l 120(sp),d0
    9ff8:	|  |      move.l d0,68(sp)
    9ffc:	|  |      move.l 136(sp),d0
    a000:	|  |      sub.l 112(sp),d0
    a004:	|  |      move.l d0,64(sp)
    a008:	|  |      move.l 128(sp),d0
    a00c:	|  |      sub.l 120(sp),d0
    a010:	|  |      move.l d0,60(sp)
    a014:	|  |      move.l 128(sp),d0
    a018:	|  |      sub.l 112(sp),d0
    a01c:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    a020:	|  |      move.l 84(sp),-(sp)
    a024:	|  |      move.l 88(sp),-(sp)
    a028:	|  |      jsr 17fcc <__mulsi3>
    a02e:	|  |      addq.l #8,sp
    a030:	|  |      move.l d0,84(sp)
    a034:	|  |      move.l 80(sp),-(sp)
    a038:	|  |      move.l 84(sp),-(sp)
    a03c:	|  |      jsr 17fcc <__mulsi3>
    a042:	|  |      addq.l #8,sp
    a044:	|  |      move.l d0,80(sp)
    a048:	|  |      move.l 76(sp),-(sp)
    a04c:	|  |      move.l 80(sp),-(sp)
    a050:	|  |      jsr 17fcc <__mulsi3>
    a056:	|  |      addq.l #8,sp
    a058:	|  |      move.l d0,76(sp)
    a05c:	|  |      move.l 72(sp),-(sp)
    a060:	|  |      move.l 76(sp),-(sp)
    a064:	|  |      jsr 17fcc <__mulsi3>
    a06a:	|  |      addq.l #8,sp
    a06c:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    a070:	|  |      move.l 68(sp),-(sp)
    a074:	|  |      move.l 72(sp),-(sp)
    a078:	|  |      jsr 17fcc <__mulsi3>
    a07e:	|  |      addq.l #8,sp
    a080:	|  |      move.l d0,68(sp)
    a084:	|  |      move.l 64(sp),-(sp)
    a088:	|  |      move.l 68(sp),-(sp)
    a08c:	|  |      jsr 17fcc <__mulsi3>
    a092:	|  |      addq.l #8,sp
    a094:	|  |      move.l d0,64(sp)
    a098:	|  |      move.l 60(sp),-(sp)
    a09c:	|  |      move.l 64(sp),-(sp)
    a0a0:	|  |      jsr 17fcc <__mulsi3>
    a0a6:	|  |      addq.l #8,sp
    a0a8:	|  |      move.l d0,60(sp)
    a0ac:	|  |      move.l 56(sp),-(sp)
    a0b0:	|  |      move.l 60(sp),-(sp)
    a0b4:	|  |      jsr 17fcc <__mulsi3>
    a0ba:	|  |      addq.l #8,sp
    a0bc:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a0c0:	|  |      move.l 84(sp),-(sp)
    a0c4:	|  |      jsr 17a32 <__floatsidf>
    a0ca:	|  |      addq.l #4,sp
    a0cc:	|  |      move.l d0,d2
    a0ce:	|  |      move.l d1,d3
    a0d0:	|  |      move.l 68(sp),-(sp)
    a0d4:	|  |      jsr 17a32 <__floatsidf>
    a0da:	|  |      addq.l #4,sp
    a0dc:	|  |      move.l d1,-(sp)
    a0de:	|  |      move.l d0,-(sp)
    a0e0:	|  |      move.l d3,-(sp)
    a0e2:	|  |      move.l d2,-(sp)
    a0e4:	|  |      jsr 17864 <__adddf3>
    a0ea:	|  |      lea 16(sp),sp
    a0ee:	|  |      move.l d1,-(sp)
    a0f0:	|  |      move.l d0,-(sp)
    a0f2:	|  |      jsr 17f82 <sqrt>
    a0f8:	|  |      addq.l #8,sp
    a0fa:	|  |      move.l d0,d2
    a0fc:	|  |      move.l d1,d3
    a0fe:	|  |      move.l 76(sp),-(sp)
    a102:	|  |      jsr 17a32 <__floatsidf>
    a108:	|  |      addq.l #4,sp
    a10a:	|  |      move.l d0,d4
    a10c:	|  |      move.l d1,d5
    a10e:	|  |      move.l 60(sp),-(sp)
    a112:	|  |      jsr 17a32 <__floatsidf>
    a118:	|  |      addq.l #4,sp
    a11a:	|  |      move.l d1,-(sp)
    a11c:	|  |      move.l d0,-(sp)
    a11e:	|  |      move.l d5,-(sp)
    a120:	|  |      move.l d4,-(sp)
    a122:	|  |      jsr 17864 <__adddf3>
    a128:	|  |      lea 16(sp),sp
    a12c:	|  |      move.l d1,-(sp)
    a12e:	|  |      move.l d0,-(sp)
    a130:	|  |      jsr 17f82 <sqrt>
    a136:	|  |      addq.l #8,sp
    a138:	|  |      move.l d1,-(sp)
    a13a:	|  |      move.l d0,-(sp)
    a13c:	|  |      move.l d3,-(sp)
    a13e:	|  |      move.l d2,-(sp)
    a140:	|  |      jsr 17864 <__adddf3>
    a146:	|  |      lea 16(sp),sp
    a14a:	|  |      move.l d0,d2
    a14c:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    a14e:	|  |      move.l 80(sp),-(sp)
    a152:	|  |      jsr 17a32 <__floatsidf>
    a158:	|  |      addq.l #4,sp
    a15a:	|  |      move.l d0,d4
    a15c:	|  |      move.l d1,d5
    a15e:	|  |      move.l 64(sp),-(sp)
    a162:	|  |      jsr 17a32 <__floatsidf>
    a168:	|  |      addq.l #4,sp
    a16a:	|  |      move.l d1,-(sp)
    a16c:	|  |      move.l d0,-(sp)
    a16e:	|  |      move.l d5,-(sp)
    a170:	|  |      move.l d4,-(sp)
    a172:	|  |      jsr 17864 <__adddf3>
    a178:	|  |      lea 16(sp),sp
    a17c:	|  |      move.l d1,-(sp)
    a17e:	|  |      move.l d0,-(sp)
    a180:	|  |      jsr 17f82 <sqrt>
    a186:	|  |      addq.l #8,sp
    a188:	|  |      move.l d0,d4
    a18a:	|  |      move.l d1,d5
    a18c:	|  |      move.l 72(sp),-(sp)
    a190:	|  |      jsr 17a32 <__floatsidf>
    a196:	|  |      addq.l #4,sp
    a198:	|  |      move.l d0,d6
    a19a:	|  |      move.l d1,d7
    a19c:	|  |      move.l 56(sp),-(sp)
    a1a0:	|  |      jsr 17a32 <__floatsidf>
    a1a6:	|  |      addq.l #4,sp
    a1a8:	|  |      move.l d1,-(sp)
    a1aa:	|  |      move.l d0,-(sp)
    a1ac:	|  |      move.l d7,-(sp)
    a1ae:	|  |      move.l d6,-(sp)
    a1b0:	|  |      jsr 17864 <__adddf3>
    a1b6:	|  |      lea 16(sp),sp
    a1ba:	|  |      move.l d1,-(sp)
    a1bc:	|  |      move.l d0,-(sp)
    a1be:	|  |      jsr 17f82 <sqrt>
    a1c4:	|  |      addq.l #8,sp
    a1c6:	|  |      move.l d1,-(sp)
    a1c8:	|  |      move.l d0,-(sp)
    a1ca:	|  |      move.l d5,-(sp)
    a1cc:	|  |      move.l d4,-(sp)
    a1ce:	|  |      jsr 17864 <__adddf3>
    a1d4:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a1d8:	|  |      move.l d1,-(sp)
    a1da:	|  |      move.l d0,-(sp)
    a1dc:	|  |      move.l d3,-(sp)
    a1de:	|  |      move.l d2,-(sp)
    a1e0:	|  |      jsr 17c4a <__ltdf2>
    a1e6:	|  |      lea 16(sp),sp
    a1ea:	|  |      tst.l d0
    a1ec:	|  |  ,-- bge.s a204 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a1ee:	|  |  |   movea.l 152(sp),a0
    a1f2:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a1f8:	|  |  |   movea.l 152(sp),a0
    a1fc:	|  |  |   move.l 120(sp),52(a0)
    a202:	|  +--|-- bra.s a218 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a204:	|  |  '-> movea.l 152(sp),a0
    a208:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a20e:	|  |      movea.l 152(sp),a0
    a212:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a218:	|  '----> movea.l 152(sp),a0
    a21c:	|         move.l 52(a0),d0
    a220:	|         move.l d0,-(sp)
    a222:	|         jsr 17a72 <__floatsisf>
    a228:	|         addq.l #4,sp
    a22a:	|         move.l d0,d1
    a22c:	|         movea.l 152(sp),a0
    a230:	|         move.l 4(a0),d0
    a234:	|         move.l d0,-(sp)
    a236:	|         move.l d1,-(sp)
    a238:	|         jsr 17d66 <__subsf3>
    a23e:	|         addq.l #8,sp
    a240:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a244:	|         movea.l 152(sp),a0
    a248:	|         move.l (a0),d2
    a24a:	|         movea.l 152(sp),a0
    a24e:	|         move.l 48(a0),d0
    a252:	|         move.l d0,-(sp)
    a254:	|         jsr 17a72 <__floatsisf>
    a25a:	|         addq.l #4,sp
    a25c:	|         move.l d0,-(sp)
    a25e:	|         move.l d2,-(sp)
    a260:	|         jsr 17d66 <__subsf3>
    a266:	|         addq.l #8,sp
    a268:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a26c:	|         clr.l -(sp)
    a26e:	|         move.l 52(sp),-(sp)
    a272:	|         jsr 17cce <__nesf2>
    a278:	|         addq.l #8,sp
    a27a:	|         tst.l d0
    a27c:	|     ,-- bne.s a290 <doBorderStuff+0x628>
    a27e:	|     |   clr.l -(sp)
    a280:	|     |   move.l 56(sp),-(sp)
    a284:	|     |   jsr 17cce <__nesf2>
    a28a:	|     |   addq.l #8,sp
    a28c:	|     |   tst.l d0
    a28e:	|  ,--|-- beq.s a306 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a290:	|  |  '-> move.l 52(sp),d0
    a294:	|  |      move.l d0,-(sp)
    a296:	|  |      move.l d0,-(sp)
    a298:	|  |      jsr 1782e <__addsf3>
    a29e:	|  |      addq.l #8,sp
    a2a0:	|  |      move.l d0,-(sp)
    a2a2:	|  |      move.l 52(sp),-(sp)
    a2a6:	|  |      jsr 17dd2 <atan2f>
    a2ac:	|  |      addq.l #8,sp
    a2ae:	|  |      move.l d0,-(sp)
    a2b0:	|  |      jsr 17994 <__extendsfdf2>
    a2b6:	|  |      addq.l #4,sp
    a2b8:	|  |      move.l #-1540411785,-(sp)
    a2be:	|  |      move.l #1078765033,-(sp)
    a2c4:	|  |      move.l d1,-(sp)
    a2c6:	|  |      move.l d0,-(sp)
    a2c8:	|  |      jsr 17ac2 <__muldf3>
    a2ce:	|  |      lea 16(sp),sp
    a2d2:	|  |      clr.l -(sp)
    a2d4:	|  |      move.l #1080459264,-(sp)
    a2da:	|  |      move.l d1,-(sp)
    a2dc:	|  |      move.l d0,-(sp)
    a2de:	|  |      jsr 17864 <__adddf3>
    a2e4:	|  |      lea 16(sp),sp
    a2e8:	|  |      move.l d1,-(sp)
    a2ea:	|  |      move.l d0,-(sp)
    a2ec:	|  |      jsr 179d4 <__fixdfsi>
    a2f2:	|  |      addq.l #8,sp
    a2f4:	|  |      movea.l 152(sp),a0
    a2f8:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a2fc:	|  |      movea.l 152(sp),a0
    a300:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a306:	|  '----> pea 1 <_start+0x1>
    a30a:	|         move.l 156(sp),-(sp)
    a30e:	|         jsr 4516 <setFrames>
    a314:	|         addq.l #8,sp
    return TRUE;
    a316:	|         moveq #1,d0
}
    a318:	'-------> movem.l (sp)+,d2-d7
    a31c:	          lea 124(sp),sp
    a320:	          rts

0000a322 <drawPeople>:

void drawPeople () {
    a322:	                   lea -24(sp),sp
    a326:	                   move.l d2,-(sp)

	shufflePeople ();
    a328:	                   jsr be20 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a32e:	                   move.l 1ce3a <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a336:	                   clr.l 20(sp)
	overRegion = NULL;
    a33a:	                   clr.l 1ceea <overRegion>

	while (thisPerson) {
    a340:	   ,-------------- bra.w a8f2 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a344:	,--|-------------> movea.l 24(sp),a0
    a348:	|  |               move.w 104(a0),d0
    a34c:	|  |  ,----------- beq.w a6a6 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a350:	|  |  |            movea.l 24(sp),a0
    a354:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a35a:	|  |  |            movea.l 24(sp),a0
    a35e:	|  |  |            move.l 76(a0),d0
    a362:	|  |  |            cmp.l 20(sp),d0
    a366:	|  |  |  ,-------- beq.w a534 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a36a:	|  |  |  |         movea.l 24(sp),a0
    a36e:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a372:	|  |  |  |         movea.l 24(sp),a0
    a376:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a37c:	|  |  |  |         movea.l 24(sp),a0
    a380:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a384:	|  |  |  |         movea.l 20(sp),a0
    a388:	|  |  |  |         movea.l 4(a0),a0
    a38c:	|  |  |  |         move.l 4(a0),d0
    a390:	|  |  |  |         movea.l 24(sp),a0
    a394:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a398:	|  |  |  |         movea.l 20(sp),a0
    a39c:	|  |  |  |         movea.l 4(a0),a1
    a3a0:	|  |  |  |         movea.l 24(sp),a0
    a3a4:	|  |  |  |         move.l 84(a0),d0
    a3a8:	|  |  |  |         move.l d0,d1
    a3aa:	|  |  |  |         move.l d1,d0
    a3ac:	|  |  |  |         add.l d0,d0
    a3ae:	|  |  |  |         add.l d1,d0
    a3b0:	|  |  |  |         add.l d0,d0
    a3b2:	|  |  |  |         add.l d0,d0
    a3b4:	|  |  |  |         lea (0,a1,d0.l),a0
    a3b8:	|  |  |  |         move.l 8(a0),d0
    a3bc:	|  |  |  |     ,-- ble.w a45e <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a3c0:	|  |  |  |     |   movea.l 20(sp),a0
    a3c4:	|  |  |  |     |   movea.l 4(a0),a1
    a3c8:	|  |  |  |     |   movea.l 24(sp),a0
    a3cc:	|  |  |  |     |   move.l 84(a0),d0
    a3d0:	|  |  |  |     |   move.l d0,d1
    a3d2:	|  |  |  |     |   move.l d1,d0
    a3d4:	|  |  |  |     |   add.l d0,d0
    a3d6:	|  |  |  |     |   add.l d1,d0
    a3d8:	|  |  |  |     |   add.l d0,d0
    a3da:	|  |  |  |     |   add.l d0,d0
    a3dc:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a3e0:	|  |  |  |     |   move.l 8(a0),d0
    a3e4:	|  |  |  |     |   clr.l -(sp)
    a3e6:	|  |  |  |     |   move.l d0,-(sp)
    a3e8:	|  |  |  |     |   jsr d534 <startSound>
    a3ee:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a3f0:	|  |  |  |     |   movea.l 24(sp),a0
    a3f4:	|  |  |  |     |   move.l 84(a0),d0
    a3f8:	|  |  |  |     |   addq.l #1,d0
    a3fa:	|  |  |  |     |   movea.l 24(sp),a0
    a3fe:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a402:	|  |  |  |     |   movea.l 24(sp),a0
    a406:	|  |  |  |     |   move.l 84(a0),d0
    a40a:	|  |  |  |     |   movea.l 24(sp),a0
    a40e:	|  |  |  |     |   movea.l 72(a0),a0
    a412:	|  |  |  |     |   move.l 8(a0),d1
    a416:	|  |  |  |     |   move.l d1,-(sp)
    a418:	|  |  |  |     |   move.l d0,-(sp)
    a41a:	|  |  |  |     |   jsr 18078 <__modsi3>
    a420:	|  |  |  |     |   addq.l #8,sp
    a422:	|  |  |  |     |   movea.l 24(sp),a0
    a426:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a42a:	|  |  |  |     |   movea.l 24(sp),a0
    a42e:	|  |  |  |     |   movea.l 72(a0),a0
    a432:	|  |  |  |     |   movea.l 4(a0),a1
    a436:	|  |  |  |     |   movea.l 24(sp),a0
    a43a:	|  |  |  |     |   move.l 84(a0),d0
    a43e:	|  |  |  |     |   move.l d0,d1
    a440:	|  |  |  |     |   move.l d1,d0
    a442:	|  |  |  |     |   add.l d0,d0
    a444:	|  |  |  |     |   add.l d1,d0
    a446:	|  |  |  |     |   add.l d0,d0
    a448:	|  |  |  |     |   add.l d0,d0
    a44a:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a44e:	|  |  |  |     |   move.l 4(a0),d0
    a452:	|  |  |  |     |   movea.l 24(sp),a0
    a456:	|  |  |  |     |   move.l d0,88(a0)
    a45a:	|  |  |  |  ,--|-- bra.w a59c <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a45e:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a462:	|  |  |  |  |      movea.l 4(a0),a1
    a466:	|  |  |  |  |      movea.l 24(sp),a0
    a46a:	|  |  |  |  |      move.l 84(a0),d0
    a46e:	|  |  |  |  |      move.l d0,d1
    a470:	|  |  |  |  |      move.l d1,d0
    a472:	|  |  |  |  |      add.l d0,d0
    a474:	|  |  |  |  |      add.l d1,d0
    a476:	|  |  |  |  |      add.l d0,d0
    a478:	|  |  |  |  |      add.l d0,d0
    a47a:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a47e:	|  |  |  |  |      move.l 8(a0),d0
    a482:	|  |  |  |  +----- beq.w a59c <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a486:	|  |  |  |  |      movea.l 1cdaa <noStack>,a1
    a48c:	|  |  |  |  |      movea.l 20(sp),a0
    a490:	|  |  |  |  |      move.l 4(a0),d2
    a494:	|  |  |  |  |      movea.l 24(sp),a0
    a498:	|  |  |  |  |      move.l 84(a0),d0
    a49c:	|  |  |  |  |      move.l d0,d1
    a49e:	|  |  |  |  |      move.l d1,d0
    a4a0:	|  |  |  |  |      add.l d0,d0
    a4a2:	|  |  |  |  |      add.l d1,d0
    a4a4:	|  |  |  |  |      add.l d0,d0
    a4a6:	|  |  |  |  |      add.l d0,d0
    a4a8:	|  |  |  |  |      movea.l d2,a0
    a4aa:	|  |  |  |  |      adda.l d0,a0
    a4ac:	|  |  |  |  |      move.l 8(a0),d0
    a4b0:	|  |  |  |  |      neg.l d0
    a4b2:	|  |  |  |  |      pea 1 <_start+0x1>
    a4b6:	|  |  |  |  |      move.l a1,-(sp)
    a4b8:	|  |  |  |  |      clr.l -(sp)
    a4ba:	|  |  |  |  |      clr.l -(sp)
    a4bc:	|  |  |  |  |      move.l d0,-(sp)
    a4be:	|  |  |  |  |      jsr 782e <startNewFunctionNum>
    a4c4:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a4c8:	|  |  |  |  |      movea.l 24(sp),a0
    a4cc:	|  |  |  |  |      move.l 84(a0),d0
    a4d0:	|  |  |  |  |      addq.l #1,d0
    a4d2:	|  |  |  |  |      movea.l 24(sp),a0
    a4d6:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a4da:	|  |  |  |  |      movea.l 24(sp),a0
    a4de:	|  |  |  |  |      move.l 84(a0),d0
    a4e2:	|  |  |  |  |      movea.l 24(sp),a0
    a4e6:	|  |  |  |  |      movea.l 72(a0),a0
    a4ea:	|  |  |  |  |      move.l 8(a0),d1
    a4ee:	|  |  |  |  |      move.l d1,-(sp)
    a4f0:	|  |  |  |  |      move.l d0,-(sp)
    a4f2:	|  |  |  |  |      jsr 18078 <__modsi3>
    a4f8:	|  |  |  |  |      addq.l #8,sp
    a4fa:	|  |  |  |  |      movea.l 24(sp),a0
    a4fe:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a502:	|  |  |  |  |      movea.l 24(sp),a0
    a506:	|  |  |  |  |      movea.l 72(a0),a0
    a50a:	|  |  |  |  |      movea.l 4(a0),a1
    a50e:	|  |  |  |  |      movea.l 24(sp),a0
    a512:	|  |  |  |  |      move.l 84(a0),d0
    a516:	|  |  |  |  |      move.l d0,d1
    a518:	|  |  |  |  |      move.l d1,d0
    a51a:	|  |  |  |  |      add.l d0,d0
    a51c:	|  |  |  |  |      add.l d1,d0
    a51e:	|  |  |  |  |      add.l d0,d0
    a520:	|  |  |  |  |      add.l d0,d0
    a522:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a526:	|  |  |  |  |      move.l 4(a0),d0
    a52a:	|  |  |  |  |      movea.l 24(sp),a0
    a52e:	|  |  |  |  |      move.l d0,88(a0)
    a532:	|  |  |  |  +----- bra.s a59c <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a534:	|  |  |  '--|----> movea.l 24(sp),a0
    a538:	|  |  |     |      move.l (a0),d0
    a53a:	|  |  |     |      movea.l 24(sp),a0
    a53e:	|  |  |     |      move.l 8(a0),d1
    a542:	|  |  |     |      move.l d1,-(sp)
    a544:	|  |  |     |      move.l d0,-(sp)
    a546:	|  |  |     |      jsr 1795e <__eqsf2>
    a54c:	|  |  |     |      addq.l #8,sp
    a54e:	|  |  |     |      tst.l d0
    a550:	|  |  |     |  ,-- bne.s a594 <drawPeople+0x272>
    a552:	|  |  |     |  |   movea.l 24(sp),a0
    a556:	|  |  |     |  |   move.l 4(a0),d0
    a55a:	|  |  |     |  |   movea.l 24(sp),a0
    a55e:	|  |  |     |  |   move.l 12(a0),d1
    a562:	|  |  |     |  |   move.l d1,-(sp)
    a564:	|  |  |     |  |   move.l d0,-(sp)
    a566:	|  |  |     |  |   jsr 1795e <__eqsf2>
    a56c:	|  |  |     |  |   addq.l #8,sp
    a56e:	|  |  |     |  |   tst.l d0
    a570:	|  |  |     |  +-- bne.s a594 <drawPeople+0x272>
    a572:	|  |  |     |  |   movea.l 20(sp),a0
    a576:	|  |  |     |  |   move.l 8(a0),d0
    a57a:	|  |  |     |  |   moveq #1,d1
    a57c:	|  |  |     |  |   cmp.l d0,d1
    a57e:	|  |  |     |  +-- bne.s a594 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a580:	|  |  |     |  |   movea.l 24(sp),a0
    a584:	|  |  |     |  |   move.l 16(a0),d0
    a588:	|  |  |     |  |   addq.l #1,d0
    a58a:	|  |  |     |  |   movea.l 24(sp),a0
    a58e:	|  |  |     |  |   move.l d0,16(a0)
    a592:	|  |  |     +--|-- bra.s a59c <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a594:	|  |  |     |  '-> movea.l 24(sp),a0
    a598:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a59c:	|  |  |     '----> movea.l 24(sp),a0
    a5a0:	|  |  |            move.l (a0),d0
    a5a2:	|  |  |            movea.l 24(sp),a0
    a5a6:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a5aa:	|  |  |            movea.l 24(sp),a0
    a5ae:	|  |  |            move.l 4(a0),d0
    a5b2:	|  |  |            movea.l 24(sp),a0
    a5b6:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a5ba:	|  |  |            movea.l 20(sp),a0
    a5be:	|  |  |            movea.l 4(a0),a1
    a5c2:	|  |  |            movea.l 24(sp),a0
    a5c6:	|  |  |            move.l 84(a0),d0
    a5ca:	|  |  |            move.l d0,d1
    a5cc:	|  |  |            move.l d1,d0
    a5ce:	|  |  |            add.l d0,d0
    a5d0:	|  |  |            add.l d1,d0
    a5d2:	|  |  |            add.l d0,d0
    a5d4:	|  |  |            add.l d0,d0
    a5d6:	|  |  |            lea (0,a1,d0.l),a0
    a5da:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a5de:	|  |  |            move.l 8(sp),d0
    a5e2:	|  |  |            add.l d0,d0
    a5e4:	|  |  |            subx.l d0,d0
    a5e6:	|  |  |            neg.l d0
    a5e8:	|  |  |            move.b d0,d0
    a5ea:	|  |  |            move.b d0,d0
    a5ec:	|  |  |            andi.l #255,d0
    a5f2:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a5f6:	|  |  |            move.l 8(sp),-(sp)
    a5fa:	|  |  |            jsr 94f6 <TF_abs>
    a600:	|  |  |            addq.l #4,sp
    a602:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a606:	|  |  |            movea.l 20(sp),a0
    a60a:	|  |  |            movea.l (a0),a0
    a60c:	|  |  |            move.l 8(a0),d0
    a610:	|  |  |            cmp.l 12(sp),d0
    a614:	|  |  |        ,-- bgt.s a624 <drawPeople+0x302>
				fNum = 0;
    a616:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a61a:	|  |  |        |   moveq #2,d0
    a61c:	|  |  |        |   sub.l 16(sp),d0
    a620:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a624:	|  |  |        '-> moveq #2,d1
    a626:	|  |  |            cmp.l 16(sp),d1
    a62a:	|  |  +----------- beq.s a6a6 <drawPeople+0x384>
				BOOL r = FALSE;
    a62c:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a630:	|  |  |            move.l 16(sp),d0
    a634:	|  |  |            movea.w d0,a0
    a636:	|  |  |            movea.l 20(sp),a1
    a63a:	|  |  |            movea.l (a1),a1
    a63c:	|  |  |            movea.l 16(a1),a1
    a640:	|  |  |            move.l 12(sp),d1
    a644:	|  |  |            move.l d1,d0
    a646:	|  |  |            lsl.l #3,d0
    a648:	|  |  |            sub.l d1,d0
    a64a:	|  |  |            add.l d0,d0
    a64c:	|  |  |            add.l d0,d0
    a64e:	|  |  |            add.l a1,d0
    a650:	|  |  |            move.l a0,-(sp)
    a652:	|  |  |            move.l 28(sp),-(sp)
    a656:	|  |  |            move.l d0,-(sp)
    a658:	|  |  |            jsr 9218 <scaleSprite>
    a65e:	|  |  |            lea 12(sp),sp
    a662:	|  |  |            move.w d0,6(sp)
				if (r) {
    a666:	|  |  +----------- beq.s a6a6 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a668:	|  |  |            movea.l 24(sp),a0
    a66c:	|  |  |            movea.l 114(a0),a0
    a670:	|  |  |            movea.l (a0),a0
    a672:	|  |  |            move.b (a0),d0
    a674:	|  |  +----------- beq.s a6a6 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a676:	|  |  |            move.l 1ce5a <personRegion+0x1c>,d1
    a67c:	|  |  |            movea.l 24(sp),a0
    a680:	|  |  |            move.l 114(a0),d0
    a684:	|  |  |            cmp.l d1,d0
    a686:	|  |  |        ,-- beq.s a68e <drawPeople+0x36c>
    a688:	|  |  |        |   clr.l 1cda2 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a68e:	|  |  |        '-> movea.l 24(sp),a0
    a692:	|  |  |            move.l 114(a0),d0
    a696:	|  |  |            move.l d0,1ce5a <personRegion+0x1c>
						overRegion = & personRegion;
    a69c:	|  |  |            move.l #118334,1ceea <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a6a6:	|  |  '----------> movea.l 24(sp),a0
    a6aa:	|  |               move.l 88(a0),d0
    a6ae:	|  |               subq.l #1,d0
    a6b0:	|  |               movea.l 24(sp),a0
    a6b4:	|  |               move.l d0,88(a0)
    a6b8:	|  |               movea.l 24(sp),a0
    a6bc:	|  |               move.l 88(a0),d0
    a6c0:	|  |        ,----- bne.w a8e8 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a6c4:	|  |        |      movea.l 24(sp),a0
    a6c8:	|  |        |      move.l 84(a0),d0
    a6cc:	|  |        |      addq.l #1,d0
    a6ce:	|  |        |      movea.l 24(sp),a0
    a6d2:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a6d6:	|  |        |      movea.l 24(sp),a0
    a6da:	|  |        |      move.l 84(a0),d0
    a6de:	|  |        |      movea.l 24(sp),a0
    a6e2:	|  |        |      movea.l 72(a0),a0
    a6e6:	|  |        |      move.l 8(a0),d1
    a6ea:	|  |        |      move.l d1,-(sp)
    a6ec:	|  |        |      move.l d0,-(sp)
    a6ee:	|  |        |      jsr 18078 <__modsi3>
    a6f4:	|  |        |      addq.l #8,sp
    a6f6:	|  |        |      movea.l 24(sp),a0
    a6fa:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a6fe:	|  |        |      movea.l 24(sp),a0
    a702:	|  |        |      movea.l 72(a0),a0
    a706:	|  |        |      movea.l 4(a0),a1
    a70a:	|  |        |      movea.l 24(sp),a0
    a70e:	|  |        |      move.l 84(a0),d0
    a712:	|  |        |      move.l d0,d1
    a714:	|  |        |      move.l d1,d0
    a716:	|  |        |      add.l d0,d0
    a718:	|  |        |      add.l d1,d0
    a71a:	|  |        |      add.l d0,d0
    a71c:	|  |        |      add.l d0,d0
    a71e:	|  |        |      lea (0,a1,d0.l),a0
    a722:	|  |        |      move.l 4(a0),d0
    a726:	|  |        |      movea.l 24(sp),a0
    a72a:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a72e:	|  |        |      movea.l 24(sp),a0
    a732:	|  |        |      move.w 104(a0),d0
    a736:	|  |        +----- beq.w a8e8 <drawPeople+0x5c6>
    a73a:	|  |        |      tst.l 20(sp)
    a73e:	|  |        +----- beq.w a8e8 <drawPeople+0x5c6>
    a742:	|  |        |      movea.l 20(sp),a0
    a746:	|  |        |      move.l 4(a0),d0
    a74a:	|  |        +----- beq.w a8e8 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a74e:	|  |        |      movea.l 20(sp),a0
    a752:	|  |        |      movea.l 4(a0),a1
    a756:	|  |        |      movea.l 24(sp),a0
    a75a:	|  |        |      move.l 84(a0),d0
    a75e:	|  |        |      move.l d0,d1
    a760:	|  |        |      move.l d1,d0
    a762:	|  |        |      add.l d0,d0
    a764:	|  |        |      add.l d1,d0
    a766:	|  |        |      add.l d0,d0
    a768:	|  |        |      add.l d0,d0
    a76a:	|  |        |      lea (0,a1,d0.l),a0
    a76e:	|  |        |      move.l 8(a0),d0
    a772:	|  |        |  ,-- ble.w a814 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a776:	|  |        |  |   movea.l 20(sp),a0
    a77a:	|  |        |  |   movea.l 4(a0),a1
    a77e:	|  |        |  |   movea.l 24(sp),a0
    a782:	|  |        |  |   move.l 84(a0),d0
    a786:	|  |        |  |   move.l d0,d1
    a788:	|  |        |  |   move.l d1,d0
    a78a:	|  |        |  |   add.l d0,d0
    a78c:	|  |        |  |   add.l d1,d0
    a78e:	|  |        |  |   add.l d0,d0
    a790:	|  |        |  |   add.l d0,d0
    a792:	|  |        |  |   lea (0,a1,d0.l),a0
    a796:	|  |        |  |   move.l 8(a0),d0
    a79a:	|  |        |  |   clr.l -(sp)
    a79c:	|  |        |  |   move.l d0,-(sp)
    a79e:	|  |        |  |   jsr d534 <startSound>
    a7a4:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a7a6:	|  |        |  |   movea.l 24(sp),a0
    a7aa:	|  |        |  |   move.l 84(a0),d0
    a7ae:	|  |        |  |   addq.l #1,d0
    a7b0:	|  |        |  |   movea.l 24(sp),a0
    a7b4:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a7b8:	|  |        |  |   movea.l 24(sp),a0
    a7bc:	|  |        |  |   move.l 84(a0),d0
    a7c0:	|  |        |  |   movea.l 24(sp),a0
    a7c4:	|  |        |  |   movea.l 72(a0),a0
    a7c8:	|  |        |  |   move.l 8(a0),d1
    a7cc:	|  |        |  |   move.l d1,-(sp)
    a7ce:	|  |        |  |   move.l d0,-(sp)
    a7d0:	|  |        |  |   jsr 18078 <__modsi3>
    a7d6:	|  |        |  |   addq.l #8,sp
    a7d8:	|  |        |  |   movea.l 24(sp),a0
    a7dc:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a7e0:	|  |        |  |   movea.l 24(sp),a0
    a7e4:	|  |        |  |   movea.l 72(a0),a0
    a7e8:	|  |        |  |   movea.l 4(a0),a1
    a7ec:	|  |        |  |   movea.l 24(sp),a0
    a7f0:	|  |        |  |   move.l 84(a0),d0
    a7f4:	|  |        |  |   move.l d0,d1
    a7f6:	|  |        |  |   move.l d1,d0
    a7f8:	|  |        |  |   add.l d0,d0
    a7fa:	|  |        |  |   add.l d1,d0
    a7fc:	|  |        |  |   add.l d0,d0
    a7fe:	|  |        |  |   add.l d0,d0
    a800:	|  |        |  |   lea (0,a1,d0.l),a0
    a804:	|  |        |  |   move.l 4(a0),d0
    a808:	|  |        |  |   movea.l 24(sp),a0
    a80c:	|  |        |  |   move.l d0,88(a0)
    a810:	|  |        +--|-- bra.w a8e8 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a814:	|  |        |  '-> movea.l 20(sp),a0
    a818:	|  |        |      movea.l 4(a0),a1
    a81c:	|  |        |      movea.l 24(sp),a0
    a820:	|  |        |      move.l 84(a0),d0
    a824:	|  |        |      move.l d0,d1
    a826:	|  |        |      move.l d1,d0
    a828:	|  |        |      add.l d0,d0
    a82a:	|  |        |      add.l d1,d0
    a82c:	|  |        |      add.l d0,d0
    a82e:	|  |        |      add.l d0,d0
    a830:	|  |        |      lea (0,a1,d0.l),a0
    a834:	|  |        |      move.l 8(a0),d0
    a838:	|  |        +----- beq.w a8e8 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a83c:	|  |        |      movea.l 1cdaa <noStack>,a1
    a842:	|  |        |      movea.l 20(sp),a0
    a846:	|  |        |      move.l 4(a0),d2
    a84a:	|  |        |      movea.l 24(sp),a0
    a84e:	|  |        |      move.l 84(a0),d0
    a852:	|  |        |      move.l d0,d1
    a854:	|  |        |      move.l d1,d0
    a856:	|  |        |      add.l d0,d0
    a858:	|  |        |      add.l d1,d0
    a85a:	|  |        |      add.l d0,d0
    a85c:	|  |        |      add.l d0,d0
    a85e:	|  |        |      movea.l d2,a0
    a860:	|  |        |      adda.l d0,a0
    a862:	|  |        |      move.l 8(a0),d0
    a866:	|  |        |      neg.l d0
    a868:	|  |        |      pea 1 <_start+0x1>
    a86c:	|  |        |      move.l a1,-(sp)
    a86e:	|  |        |      clr.l -(sp)
    a870:	|  |        |      clr.l -(sp)
    a872:	|  |        |      move.l d0,-(sp)
    a874:	|  |        |      jsr 782e <startNewFunctionNum>
    a87a:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a87e:	|  |        |      movea.l 24(sp),a0
    a882:	|  |        |      move.l 84(a0),d0
    a886:	|  |        |      addq.l #1,d0
    a888:	|  |        |      movea.l 24(sp),a0
    a88c:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a890:	|  |        |      movea.l 24(sp),a0
    a894:	|  |        |      move.l 84(a0),d0
    a898:	|  |        |      movea.l 24(sp),a0
    a89c:	|  |        |      movea.l 72(a0),a0
    a8a0:	|  |        |      move.l 8(a0),d1
    a8a4:	|  |        |      move.l d1,-(sp)
    a8a6:	|  |        |      move.l d0,-(sp)
    a8a8:	|  |        |      jsr 18078 <__modsi3>
    a8ae:	|  |        |      addq.l #8,sp
    a8b0:	|  |        |      movea.l 24(sp),a0
    a8b4:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a8b8:	|  |        |      movea.l 24(sp),a0
    a8bc:	|  |        |      movea.l 72(a0),a0
    a8c0:	|  |        |      movea.l 4(a0),a1
    a8c4:	|  |        |      movea.l 24(sp),a0
    a8c8:	|  |        |      move.l 84(a0),d0
    a8cc:	|  |        |      move.l d0,d1
    a8ce:	|  |        |      move.l d1,d0
    a8d0:	|  |        |      add.l d0,d0
    a8d2:	|  |        |      add.l d1,d0
    a8d4:	|  |        |      add.l d0,d0
    a8d6:	|  |        |      add.l d0,d0
    a8d8:	|  |        |      lea (0,a1,d0.l),a0
    a8dc:	|  |        |      move.l 4(a0),d0
    a8e0:	|  |        |      movea.l 24(sp),a0
    a8e4:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a8e8:	|  |        '----> movea.l 24(sp),a0
    a8ec:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a8f2:	|  '-------------> tst.l 24(sp)
    a8f6:	'----------------- bne.w a344 <drawPeople+0x22>
	}
}
    a8fa:	                   nop
    a8fc:	                   nop
    a8fe:	                   move.l (sp)+,d2
    a900:	                   lea 24(sp),sp
    a904:	                   rts

0000a906 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a906:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    a908:	          pea 19589 <PutChar+0x14a7>
    a90e:	          jsr 17640 <KPrintF>
    a914:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a916:	          move.l 1ce3a <allPeople>,(sp)
	while (thisPerson) {
    a91c:	      ,-- bra.s a934 <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    a91e:	,-----|-> movea.l (sp),a0
    a920:	|     |   movea.l 114(a0),a0
    a924:	|     |   move.l 4(a0),d0
    a928:	|     |   cmp.l 8(sp),d0
    a92c:	|  ,--|-- beq.s a93a <findPerson+0x34>
		thisPerson = thisPerson -> next;
    a92e:	|  |  |   movea.l (sp),a0
    a930:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a934:	|  |  '-> tst.l (sp)
    a936:	'--|----- bne.s a91e <findPerson+0x18>
    a938:	   |  ,-- bra.s a93c <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    a93a:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    a93c:	      '-> pea 1959d <PutChar+0x14bb>
    a942:	          jsr 17640 <KPrintF>
    a948:	          addq.l #4,sp
	return thisPerson;
    a94a:	          move.l (sp),d0
}
    a94c:	          addq.l #4,sp
    a94e:	          rts

0000a950 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a950:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a952:	       move.l 12(sp),-(sp)
    a956:	       jsr a906 <findPerson>
    a95c:	       addq.l #4,sp
    a95e:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a960:	   ,-- bne.s a966 <floatCharacter+0x16>
    a962:	   |   clr.w d0
    a964:	,--|-- bra.s a970 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a966:	|  '-> movea.l (sp),a0
    a968:	|      move.l 8(sp),24(a0)
	return TRUE;
    a96e:	|      moveq #1,d0
}
    a970:	'----> addq.l #4,sp
    a972:	       rts

0000a974 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a974:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a976:	          tst.l 8(sp)
    a97a:	      ,-- bne.s a988 <forceWalkingPerson+0x14>
    a97c:	      |   tst.l 12(sp)
    a980:	      +-- bne.s a988 <forceWalkingPerson+0x14>
    a982:	      |   clr.w d0
    a984:	,-----|-- bra.w aa1a <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a988:	|     '-> move.l 16(sp),-(sp)
    a98c:	|         jsr a906 <findPerson>
    a992:	|         addq.l #4,sp
    a994:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a996:	|     ,-- bne.s a99c <forceWalkingPerson+0x28>
    a998:	|     |   clr.w d0
    a99a:	+-----|-- bra.s aa1a <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a99c:	|     '-> movea.l (sp),a0
    a99e:	|         move.l 68(a0),d0
    a9a2:	|     ,-- beq.s a9b4 <forceWalkingPerson+0x40>
    a9a4:	|     |   movea.l (sp),a0
    a9a6:	|     |   move.l 68(a0),d0
    a9aa:	|     |   move.l d0,-(sp)
    a9ac:	|     |   jsr 5374 <abortFunction>
    a9b2:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a9b4:	|     '-> movea.l (sp),a0
    a9b6:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a9bc:	|         movea.l (sp),a0
    a9be:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a9c2:	|         movea.l (sp),a0
    a9c4:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a9ca:	|         movea.l (sp),a0
    a9cc:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a9d2:	|         movea.l (sp),a0
    a9d4:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a9da:	|         movea.l (sp),a0
    a9dc:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a9e0:	|         movea.l (sp),a0
    a9e2:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a9e6:	|         move.l (sp),-(sp)
    a9e8:	|         jsr 9c68 <doBorderStuff>
    a9ee:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a9f0:	|         pea 1 <_start+0x1>
    a9f4:	|         move.l 4(sp),-(sp)
    a9f8:	|         jsr c2ae <walkMe>
    a9fe:	|         addq.l #8,sp
    aa00:	|         tst.w d0
    aa02:	|     ,-- bne.s aa0c <forceWalkingPerson+0x98>
    aa04:	|     |   movea.l (sp),a0
    aa06:	|     |   move.w 66(a0),d0
    aa0a:	|  ,--|-- beq.s aa18 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    aa0c:	|  |  '-> movea.l (sp),a0
    aa0e:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    aa14:	|  |      moveq #1,d0
    aa16:	+--|----- bra.s aa1a <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    aa18:	|  '----> clr.w d0
    }
}
    aa1a:	'-------> addq.l #4,sp
    aa1c:	          rts

0000aa1e <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    aa1e:	                lea -56(sp),sp
    aa22:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    aa24:	                pea 195b2 <PutChar+0x14d0>
    aa2a:	                jsr 17640 <KPrintF>
    aa30:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    aa32:	                move.l #320,56(sp)
    aa3a:	                move.l #200,52(sp)
    aa42:	                moveq #-1,d0
    aa44:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    aa48:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    aa50:	                clr.l 44(sp)
    aa54:	   ,----------- bra.w ac2c <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    aa58:	,--|----------> movea.l 1cef2 <currentFloor>,a0
    aa5e:	|  |            move.l 12(a0),d1
    aa62:	|  |            move.l 44(sp),d0
    aa66:	|  |            lsl.l #3,d0
    aa68:	|  |            movea.l d1,a0
    aa6a:	|  |            adda.l d0,a0
    aa6c:	|  |            move.l (a0),d0
    aa6e:	|  |            move.l d0,d1
    aa70:	|  |            subq.l #1,d1
    aa72:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    aa76:	|  |            clr.l 40(sp)
    aa7a:	|  |     ,----- bra.w ac0a <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    aa7e:	|  |  ,--|----> movea.l 1cef2 <currentFloor>,a0
    aa84:	|  |  |  |      move.l 4(a0),d1
    aa88:	|  |  |  |      movea.l 1cef2 <currentFloor>,a0
    aa8e:	|  |  |  |      movea.l 12(a0),a0
    aa92:	|  |  |  |      move.l 44(sp),d0
    aa96:	|  |  |  |      lsl.l #3,d0
    aa98:	|  |  |  |      adda.l d0,a0
    aa9a:	|  |  |  |      movea.l 4(a0),a0
    aa9e:	|  |  |  |      move.l 40(sp),d0
    aaa2:	|  |  |  |      add.l d0,d0
    aaa4:	|  |  |  |      add.l d0,d0
    aaa6:	|  |  |  |      adda.l d0,a0
    aaa8:	|  |  |  |      move.l (a0),d0
    aaaa:	|  |  |  |      lsl.l #3,d0
    aaac:	|  |  |  |      movea.l d1,a0
    aaae:	|  |  |  |      adda.l d0,a0
    aab0:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    aab4:	|  |  |  |      movea.l 1cef2 <currentFloor>,a0
    aaba:	|  |  |  |      move.l 4(a0),d1
    aabe:	|  |  |  |      movea.l 1cef2 <currentFloor>,a0
    aac4:	|  |  |  |      movea.l 12(a0),a0
    aac8:	|  |  |  |      move.l 44(sp),d0
    aacc:	|  |  |  |      lsl.l #3,d0
    aace:	|  |  |  |      adda.l d0,a0
    aad0:	|  |  |  |      movea.l 4(a0),a0
    aad4:	|  |  |  |      move.l 40(sp),d0
    aad8:	|  |  |  |      add.l d0,d0
    aada:	|  |  |  |      add.l d0,d0
    aadc:	|  |  |  |      adda.l d0,a0
    aade:	|  |  |  |      move.l (a0),d0
    aae0:	|  |  |  |      lsl.l #3,d0
    aae2:	|  |  |  |      movea.l d1,a0
    aae4:	|  |  |  |      adda.l d0,a0
    aae6:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    aaec:	|  |  |  |      movea.l 1cef2 <currentFloor>,a0
    aaf2:	|  |  |  |      move.l 4(a0),d1
    aaf6:	|  |  |  |      movea.l 1cef2 <currentFloor>,a0
    aafc:	|  |  |  |      movea.l 12(a0),a0
    ab00:	|  |  |  |      move.l 44(sp),d0
    ab04:	|  |  |  |      lsl.l #3,d0
    ab06:	|  |  |  |      adda.l d0,a0
    ab08:	|  |  |  |      movea.l 4(a0),a0
    ab0c:	|  |  |  |      move.l 36(sp),d0
    ab10:	|  |  |  |      add.l d0,d0
    ab12:	|  |  |  |      add.l d0,d0
    ab14:	|  |  |  |      adda.l d0,a0
    ab16:	|  |  |  |      move.l (a0),d0
    ab18:	|  |  |  |      lsl.l #3,d0
    ab1a:	|  |  |  |      movea.l d1,a0
    ab1c:	|  |  |  |      adda.l d0,a0
    ab1e:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    ab22:	|  |  |  |      movea.l 1cef2 <currentFloor>,a0
    ab28:	|  |  |  |      move.l 4(a0),d1
    ab2c:	|  |  |  |      movea.l 1cef2 <currentFloor>,a0
    ab32:	|  |  |  |      movea.l 12(a0),a0
    ab36:	|  |  |  |      move.l 44(sp),d0
    ab3a:	|  |  |  |      lsl.l #3,d0
    ab3c:	|  |  |  |      adda.l d0,a0
    ab3e:	|  |  |  |      movea.l 4(a0),a0
    ab42:	|  |  |  |      move.l 36(sp),d0
    ab46:	|  |  |  |      add.l d0,d0
    ab48:	|  |  |  |      add.l d0,d0
    ab4a:	|  |  |  |      adda.l d0,a0
    ab4c:	|  |  |  |      move.l (a0),d0
    ab4e:	|  |  |  |      lsl.l #3,d0
    ab50:	|  |  |  |      movea.l d1,a0
    ab52:	|  |  |  |      adda.l d0,a0
    ab54:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    ab5a:	|  |  |  |      movea.l 68(sp),a0
    ab5e:	|  |  |  |      move.l (a0),d1
    ab60:	|  |  |  |      movea.l 64(sp),a0
    ab64:	|  |  |  |      move.l (a0),d0
    ab66:	|  |  |  |      move.l d1,-(sp)
    ab68:	|  |  |  |      move.l d0,-(sp)
    ab6a:	|  |  |  |      move.l 24(sp),-(sp)
    ab6e:	|  |  |  |      move.l 32(sp),-(sp)
    ab72:	|  |  |  |      move.l 40(sp),-(sp)
    ab76:	|  |  |  |      move.l 48(sp),-(sp)
    ab7a:	|  |  |  |      lea 28(sp),a0
    ab7e:	|  |  |  |      move.l a0,-(sp)
    ab80:	|  |  |  |      lea 36(sp),a0
    ab84:	|  |  |  |      move.l a0,-(sp)
    ab86:	|  |  |  |      jsr 1643e <closestPointOnLine>
    ab8c:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    ab90:	|  |  |  |      movea.l 64(sp),a0
    ab94:	|  |  |  |      move.l (a0),d0
    ab96:	|  |  |  |      move.l 8(sp),d1
    ab9a:	|  |  |  |      move.l d0,d2
    ab9c:	|  |  |  |      sub.l d1,d2
    ab9e:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    aba2:	|  |  |  |      movea.l 68(sp),a0
    aba6:	|  |  |  |      move.l (a0),d0
    aba8:	|  |  |  |      move.l 4(sp),d1
    abac:	|  |  |  |      move.l d0,d2
    abae:	|  |  |  |      sub.l d1,d2
    abb0:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    abb4:	|  |  |  |      move.l 28(sp),-(sp)
    abb8:	|  |  |  |      move.l 32(sp),-(sp)
    abbc:	|  |  |  |      jsr 17fcc <__mulsi3>
    abc2:	|  |  |  |      addq.l #8,sp
    abc4:	|  |  |  |      move.l d0,d2
    abc6:	|  |  |  |      move.l 24(sp),-(sp)
    abca:	|  |  |  |      move.l 28(sp),-(sp)
    abce:	|  |  |  |      jsr 17fcc <__mulsi3>
    abd4:	|  |  |  |      addq.l #8,sp
    abd6:	|  |  |  |      move.l d2,d1
    abd8:	|  |  |  |      add.l d0,d1
    abda:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    abde:	|  |  |  |      move.l 12(sp),d2
    abe2:	|  |  |  |      cmp.l 32(sp),d2
    abe6:	|  |  |  |  ,-- bge.s ac00 <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    abe8:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    abee:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    abf4:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    abfa:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    ac00:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    ac06:	|  |  |  |      addq.l #1,40(sp)
    ac0a:	|  |  |  '----> movea.l 1cef2 <currentFloor>,a0
    ac10:	|  |  |         move.l 12(a0),d1
    ac14:	|  |  |         move.l 44(sp),d0
    ac18:	|  |  |         lsl.l #3,d0
    ac1a:	|  |  |         movea.l d1,a0
    ac1c:	|  |  |         adda.l d0,a0
    ac1e:	|  |  |         move.l (a0),d0
    ac20:	|  |  |         cmp.l 40(sp),d0
    ac24:	|  |  '-------- bgt.w aa7e <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    ac28:	|  |            addq.l #1,44(sp)
    ac2c:	|  '----------> movea.l 1cef2 <currentFloor>,a0
    ac32:	|               move.l 8(a0),d0
    ac36:	|               cmp.l 44(sp),d0
    ac3a:	'-------------- bgt.w aa58 <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    ac3e:	                moveq #-1,d0
    ac40:	                cmp.l 48(sp),d0
    ac44:	            ,-- bne.s ac4a <handleClosestPoint+0x22c>
    ac46:	            |   clr.w d0
    ac48:	         ,--|-- bra.s ac64 <handleClosestPoint+0x246>
	*setX = gotX;
    ac4a:	         |  '-> movea.l 64(sp),a0
    ac4e:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    ac52:	         |      movea.l 68(sp),a0
    ac56:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    ac5a:	         |      movea.l 72(sp),a0
    ac5e:	         |      move.l 48(sp),(a0)

	return TRUE;
    ac62:	         |      moveq #1,d0
}
    ac64:	         '----> move.l (sp)+,d2
    ac66:	                lea 56(sp),sp
    ac6a:	                rts

0000ac6c <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    ac6c:	clr.l 1ce4e <personRegion+0x10>
	personRegion.sY = 0;
    ac72:	clr.l 1ce52 <personRegion+0x14>
	personRegion.di = -1;
    ac78:	moveq #-1,d0
    ac7a:	move.l d0,1ce56 <personRegion+0x18>
	allScreenRegions = NULL;
    ac80:	clr.l 1cee6 <allScreenRegions>

	return TRUE;
    ac86:	moveq #1,d0
}
    ac88:	rts

0000ac8a <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    ac8a:	          subq.l #4,sp
    ac8c:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    ac8e:	          tst.l 12(sp)
    ac92:	      ,-- bne.s ac9a <jumpPerson+0x10>
    ac94:	      |   tst.l 16(sp)
    ac98:	,-----|-- beq.s ad0e <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    ac9a:	|     '-> move.l 20(sp),-(sp)
    ac9e:	|         jsr a906 <findPerson>
    aca4:	|         addq.l #4,sp
    aca6:	|         move.l d0,4(sp)
    if (!moveMe) return;
    acaa:	|  ,----- beq.s ad12 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    acac:	|  |      movea.l 4(sp),a0
    acb0:	|  |      move.l 68(a0),d0
    acb4:	|  |  ,-- beq.s acc8 <jumpPerson+0x3e>
    acb6:	|  |  |   movea.l 4(sp),a0
    acba:	|  |  |   move.l 68(a0),d0
    acbe:	|  |  |   move.l d0,-(sp)
    acc0:	|  |  |   jsr 5374 <abortFunction>
    acc6:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    acc8:	|  |  '-> movea.l 4(sp),a0
    accc:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    acd0:	|  |      movea.l 4(sp),a0
    acd4:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    acd8:	|  |      movea.l 4(sp),a0
    acdc:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    ace0:	|  |      move.l 16(sp),-(sp)
    ace4:	|  |      jsr 17a72 <__floatsisf>
    acea:	|  |      addq.l #4,sp
    acec:	|  |      move.l d0,d2
    acee:	|  |      move.l 12(sp),-(sp)
    acf2:	|  |      jsr 17a72 <__floatsisf>
    acf8:	|  |      addq.l #4,sp
    acfa:	|  |      move.l d2,-(sp)
    acfc:	|  |      move.l d0,-(sp)
    acfe:	|  |      move.l 12(sp),-(sp)
    ad02:	|  |      jsr b0b0 <moveAndScale>
    ad08:	|  |      lea 12(sp),sp
    ad0c:	|  |  ,-- bra.s ad14 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    ad0e:	'--|--|-> nop
    ad10:	   |  +-- bra.s ad14 <jumpPerson+0x8a>
    if (!moveMe) return;
    ad12:	   '--|-> nop
}
    ad14:	      '-> move.l (sp)+,d2
    ad16:	          addq.l #4,sp
    ad18:	          rts

0000ad1a <killAllPeople>:


void killAllPeople () {
    ad1a:	          subq.l #8,sp
    ad1c:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    ad1e:	   ,----- bra.s ad8a <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    ad20:	,--|----> movea.l 1ce3a <allPeople>,a0
    ad26:	|  |      move.l 68(a0),d0
    ad2a:	|  |  ,-- beq.s ad40 <killAllPeople+0x26>
    ad2c:	|  |  |   movea.l 1ce3a <allPeople>,a0
    ad32:	|  |  |   move.l 68(a0),d0
    ad36:	|  |  |   move.l d0,-(sp)
    ad38:	|  |  |   jsr 5374 <abortFunction>
    ad3e:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    ad40:	|  |  '-> movea.l 1ce3a <allPeople>,a0
    ad46:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    ad4a:	|  |      move.l 1ce3a <allPeople>,8(sp)
		allPeople = allPeople -> next;
    ad52:	|  |      movea.l 1ce3a <allPeople>,a0
    ad58:	|  |      move.l 36(a0),d0
    ad5c:	|  |      move.l d0,1ce3a <allPeople>
		removeObjectType (killPeople -> thisType);
    ad62:	|  |      movea.l 8(sp),a0
    ad66:	|  |      move.l 114(a0),d0
    ad6a:	|  |      move.l d0,-(sp)
    ad6c:	|  |      jsr dc1c <removeObjectType>
    ad72:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    ad74:	|  |      move.l 8(sp),4(sp)
    ad7a:	|  |      move.l 1cdda <SysBase>,d0
    ad80:	|  |      movea.l d0,a6
    ad82:	|  |      movea.l 4(sp),a1
    ad86:	|  |      jsr -690(a6)
	while (allPeople) {
    ad8a:	|  '----> move.l 1ce3a <allPeople>,d0
    ad90:	'-------- bne.s ad20 <killAllPeople+0x6>
	}
}
    ad92:	          nop
    ad94:	          nop
    ad96:	          movea.l (sp)+,a6
    ad98:	          addq.l #8,sp
    ad9a:	          rts

0000ad9c <killMostPeople>:

void killMostPeople() {
    ad9c:	          lea -12(sp),sp
    ada0:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    ada2:	          move.l #118330,12(sp)

    while (*lookyHere) {
    adaa:	   ,----- bra.w ae30 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    adae:	,--|----> movea.l 12(sp),a0
    adb2:	|  |      movea.l (a0),a0
    adb4:	|  |      move.l 118(a0),d0
    adb8:	|  |      moveq #32,d1
    adba:	|  |      and.l d1,d0
    adbc:	|  |  ,-- beq.s adce <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    adbe:	|  |  |   movea.l 12(sp),a0
    adc2:	|  |  |   move.l (a0),d0
    adc4:	|  |  |   moveq #36,d1
    adc6:	|  |  |   add.l d0,d1
    adc8:	|  |  |   move.l d1,12(sp)
    adcc:	|  +--|-- bra.s ae30 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    adce:	|  |  '-> movea.l 12(sp),a0
    add2:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    add6:	|  |      movea.l 8(sp),a0
    adda:	|  |      move.l 36(a0),d0
    adde:	|  |      movea.l 12(sp),a0
    ade2:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    ade4:	|  |      movea.l 8(sp),a0
    ade8:	|  |      move.l 68(a0),d0
    adec:	|  |  ,-- beq.s ae00 <killMostPeople+0x64>
    adee:	|  |  |   movea.l 8(sp),a0
    adf2:	|  |  |   move.l 68(a0),d0
    adf6:	|  |  |   move.l d0,-(sp)
    adf8:	|  |  |   jsr 5374 <abortFunction>
    adfe:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    ae00:	|  |  '-> movea.l 8(sp),a0
    ae04:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ae08:	|  |      movea.l 8(sp),a0
    ae0c:	|  |      move.l 114(a0),d0
    ae10:	|  |      move.l d0,-(sp)
    ae12:	|  |      jsr dc1c <removeObjectType>
    ae18:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ae1a:	|  |      move.l 8(sp),4(sp)
    ae20:	|  |      move.l 1cdda <SysBase>,d0
    ae26:	|  |      movea.l d0,a6
    ae28:	|  |      movea.l 4(sp),a1
    ae2c:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ae30:	|  '----> movea.l 12(sp),a0
    ae34:	|         move.l (a0),d0
    ae36:	'-------- bne.w adae <killMostPeople+0x12>
        }
    }
}
    ae3a:	          nop
    ae3c:	          nop
    ae3e:	          movea.l (sp)+,a6
    ae40:	          lea 12(sp),sp
    ae44:	          rts

0000ae46 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ae46:	clr.l -(sp)
    ae48:	move.l sp,d0
    ae4a:	addq.l #8,d0
    ae4c:	move.l d0,-(sp)
    ae4e:	jsr 4516 <setFrames>
    ae54:	addq.l #8,sp
}
    ae56:	nop
    ae58:	rts

0000ae5a <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ae5a:	          lea -12(sp),sp
    ae5e:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    ae60:	          pea 19636 <PutChar+0x1554>
    ae66:	          jsr 17640 <KPrintF>
    ae6c:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    ae6e:	          tst.l 20(sp)
    ae72:	      ,-- bne.s ae80 <makeWalkingPerson+0x26>
    ae74:	      |   tst.l 24(sp)
    ae78:	      +-- bne.s ae80 <makeWalkingPerson+0x26>
    ae7a:	      |   clr.w d0
    ae7c:	,-----|-- bra.w b042 <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ae80:	|     '-> movea.l 1cef2 <currentFloor>,a0
    ae86:	|         move.l 8(a0),d0
    ae8a:	|     ,-- bne.s ae92 <makeWalkingPerson+0x38>
    ae8c:	|     |   clr.w d0
    ae8e:	+-----|-- bra.w b042 <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ae92:	|     '-> move.l 28(sp),d0
    ae96:	|         move.l d0,-(sp)
    ae98:	|         jsr a906 <findPerson>
    ae9e:	|         addq.l #4,sp
    aea0:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    aea4:	|     ,-- bne.s aec0 <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    aea6:	|     |   move.l 28(sp),d0
    aeaa:	|     |   move.l d0,-(sp)
    aeac:	|     |   pea 19651 <PutChar+0x156f>
    aeb2:	|     |   jsr 17640 <KPrintF>
    aeb8:	|     |   addq.l #8,sp
		return FALSE;
    aeba:	|     |   clr.w d0
    aebc:	+-----|-- bra.w b042 <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    aec0:	|     '-> movea.l 12(sp),a0
    aec4:	|         move.l 68(a0),d0
    aec8:	|     ,-- beq.s aedc <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    aeca:	|     |   movea.l 12(sp),a0
    aece:	|     |   move.l 68(a0),d0
    aed2:	|     |   move.l d0,-(sp)
    aed4:	|     |   jsr 5374 <abortFunction>
    aeda:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    aedc:	|     '-> movea.l 12(sp),a0
    aee0:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    aee4:	|         movea.l 12(sp),a0
    aee8:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    aeee:	|         movea.l 12(sp),a0
    aef2:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    aef8:	|         movea.l 12(sp),a0
    aefc:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    af02:	|         movea.l 12(sp),a0
    af06:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    af0c:	|         move.l 24(sp),-(sp)
    af10:	|         move.l 24(sp),-(sp)
    af14:	|         jsr 16986 <inFloor>
    af1a:	|         addq.l #8,sp
    af1c:	|         movea.l 12(sp),a0
    af20:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    af24:	|         movea.l 12(sp),a0
    af28:	|         move.l 60(a0),d0
    af2c:	|         moveq #-1,d1
    af2e:	|         cmp.l d0,d1
    af30:	|     ,-- bne.s af60 <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    af32:	|     |   movea.w #60,a0
    af36:	|     |   adda.l 12(sp),a0
    af3a:	|     |   moveq #44,d1
    af3c:	|     |   add.l 12(sp),d1
    af40:	|     |   moveq #40,d0
    af42:	|     |   add.l 12(sp),d0
    af46:	|     |   move.l a0,-(sp)
    af48:	|     |   move.l d1,-(sp)
    af4a:	|     |   move.l d0,-(sp)
    af4c:	|     |   jsr aa1e <handleClosestPoint>
    af52:	|     |   lea 12(sp),sp
    af56:	|     |   tst.w d0
    af58:	|     +-- bne.s af60 <makeWalkingPerson+0x106>
    af5a:	|     |   clr.w d0
    af5c:	+-----|-- bra.w b042 <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    af60:	|     '-> movea.l 12(sp),a0
    af64:	|         move.l 4(a0),d0
    af68:	|         move.l d0,-(sp)
    af6a:	|         jsr 17a0a <__fixsfsi>
    af70:	|         addq.l #4,sp
    af72:	|         move.l d0,d2
    af74:	|         movea.l 12(sp),a0
    af78:	|         move.l (a0),d0
    af7a:	|         move.l d0,-(sp)
    af7c:	|         jsr 17a0a <__fixsfsi>
    af82:	|         addq.l #4,sp
    af84:	|         move.l d2,-(sp)
    af86:	|         move.l d0,-(sp)
    af88:	|         jsr 16986 <inFloor>
    af8e:	|         addq.l #8,sp
    af90:	|         movea.l 12(sp),a0
    af94:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    af98:	|         movea.l 12(sp),a0
    af9c:	|         move.l 56(a0),d0
    afa0:	|         moveq #-1,d1
    afa2:	|         cmp.l d0,d1
    afa4:	|     ,-- bne.s aff6 <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    afa6:	|     |   movea.l 12(sp),a0
    afaa:	|     |   move.l (a0),d0
    afac:	|     |   move.l d0,-(sp)
    afae:	|     |   jsr 17a0a <__fixsfsi>
    afb4:	|     |   addq.l #4,sp
    afb6:	|     |   move.l d0,8(sp)
    afba:	|     |   movea.l 12(sp),a0
    afbe:	|     |   move.l 4(a0),d0
    afc2:	|     |   move.l d0,-(sp)
    afc4:	|     |   jsr 17a0a <__fixsfsi>
    afca:	|     |   addq.l #4,sp
    afcc:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    afd0:	|     |   moveq #56,d0
    afd2:	|     |   add.l 12(sp),d0
    afd6:	|     |   move.l d0,-(sp)
    afd8:	|     |   lea 8(sp),a0
    afdc:	|     |   move.l a0,-(sp)
    afde:	|     |   moveq #16,d0
    afe0:	|     |   add.l sp,d0
    afe2:	|     |   move.l d0,-(sp)
    afe4:	|     |   jsr aa1e <handleClosestPoint>
    afea:	|     |   lea 12(sp),sp
    afee:	|     |   tst.w d0
    aff0:	|     +-- bne.s aff6 <makeWalkingPerson+0x19c>
    aff2:	|     |   clr.w d0
    aff4:	+-----|-- bra.s b042 <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    aff6:	|     '-> move.l 12(sp),-(sp)
    affa:	|         jsr 9c68 <doBorderStuff>
    b000:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    b002:	|         clr.l -(sp)
    b004:	|         move.l 16(sp),-(sp)
    b008:	|         jsr c2ae <walkMe>
    b00e:	|         addq.l #8,sp
    b010:	|         tst.w d0
    b012:	|     ,-- bne.s b01e <makeWalkingPerson+0x1c4>
    b014:	|     |   movea.l 12(sp),a0
    b018:	|     |   move.w 66(a0),d0
    b01c:	|  ,--|-- beq.s b040 <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    b01e:	|  |  '-> lea 28(sp),a0
    b022:	|  |      move.l a0,-(sp)
    b024:	|  |      pea 1967a <PutChar+0x1598>
    b02a:	|  |      jsr 17640 <KPrintF>
    b030:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    b032:	|  |      movea.l 12(sp),a0
    b036:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    b03c:	|  |      moveq #1,d0
    b03e:	+--|----- bra.s b042 <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    b040:	|  '----> clr.w d0
	}
}
    b042:	'-------> move.l (sp)+,d2
    b044:	          lea 12(sp),sp
    b048:	          rts

0000b04a <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    b04a:	       lea -16(sp),sp
    b04e:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    b050:	       moveq #12,d0
    b052:	       move.l d0,16(sp)
    b056:	       clr.l 12(sp)
    b05a:	       move.l 1cdda <SysBase>,d0
    b060:	       movea.l d0,a6
    b062:	       move.l 16(sp),d0
    b066:	       move.l 12(sp),d1
    b06a:	       jsr -684(a6)
    b06e:	       move.l d0,8(sp)
    b072:	       move.l 8(sp),d0
    b076:	       move.l d0,4(sp)
    if(newAnim == 0) {
    b07a:	   ,-- bne.s b08e <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    b07c:	   |   pea 196ad <PutChar+0x15cb>
    b082:	   |   jsr 17640 <KPrintF>
    b088:	   |   addq.l #4,sp
        return NULL;    
    b08a:	   |   moveq #0,d0
    b08c:	,--|-- bra.s b0a8 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    b08e:	|  '-> movea.l 4(sp),a0
    b092:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    b094:	|      movea.l 4(sp),a0
    b098:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    b09c:	|      movea.l 4(sp),a0
    b0a0:	|      clr.l 4(a0)
	return newAnim;
    b0a4:	|      move.l 4(sp),d0
}
    b0a8:	'----> movea.l (sp)+,a6
    b0aa:	       lea 16(sp),sp
    b0ae:	       rts

0000b0b0 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    b0b0:	    move.l d2,-(sp)
	me->x = x;
    b0b2:	    movea.l 8(sp),a0
    b0b6:	    move.l 12(sp),(a0)
	me->y = y;
    b0ba:	    movea.l 8(sp),a0
    b0be:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    b0c4:	    movea.l 8(sp),a0
    b0c8:	    clr.l 8(a0)
	me->oldy = 0;
    b0cc:	    movea.l 8(sp),a0
    b0d0:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    b0d4:	    movea.l 8(sp),a0
    b0d8:	    move.l 118(a0),d0
    b0dc:	    moveq #2,d1
    b0de:	    and.l d1,d0
    b0e0:	,-- bne.s b138 <moveAndScale+0x88>
    b0e2:	|   move.w 1c76c <scaleDivide>,d0
    b0e8:	+-- beq.s b138 <moveAndScale+0x88>
    b0ea:	|   movea.l 8(sp),a0
    b0ee:	|   move.l 4(a0),d2
    b0f2:	|   move.w 1c76a <scaleHorizon>,d0
    b0f8:	|   movea.w d0,a0
    b0fa:	|   move.l a0,-(sp)
    b0fc:	|   jsr 17a72 <__floatsisf>
    b102:	|   addq.l #4,sp
    b104:	|   move.l d0,-(sp)
    b106:	|   move.l d2,-(sp)
    b108:	|   jsr 17d66 <__subsf3>
    b10e:	|   addq.l #8,sp
    b110:	|   move.l d0,d2
    b112:	|   move.w 1c76c <scaleDivide>,d0
    b118:	|   movea.w d0,a0
    b11a:	|   move.l a0,-(sp)
    b11c:	|   jsr 17a72 <__floatsisf>
    b122:	|   addq.l #4,sp
    b124:	|   move.l d0,-(sp)
    b126:	|   move.l d2,-(sp)
    b128:	|   jsr 17928 <__divsf3>
    b12e:	|   addq.l #8,sp
    b130:	|   movea.l 8(sp),a0
    b134:	|   move.l d0,32(a0)
}
    b138:	'-> nop
    b13a:	    move.l (sp)+,d2
    b13c:	    rts

0000b13e <removeOneCharacter>:

void removeOneCharacter (int i) {
    b13e:	          lea -16(sp),sp
    b142:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    b144:	          move.l 24(sp),-(sp)
    b148:	          jsr a906 <findPerson>
    b14e:	          addq.l #4,sp
    b150:	          move.l d0,8(sp)

    if (p) {
    b154:	,-------- beq.w b234 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    b158:	|         move.l 1ceea <overRegion>,d0
    b15e:	|         cmpi.l #118334,d0
    b164:	|     ,-- bne.s b182 <removeOneCharacter+0x44>
    b166:	|     |   movea.l 1ceea <overRegion>,a0
    b16c:	|     |   move.l 28(a0),d1
    b170:	|     |   movea.l 8(sp),a0
    b174:	|     |   move.l 114(a0),d0
    b178:	|     |   cmp.l d1,d0
    b17a:	|     +-- bne.s b182 <removeOneCharacter+0x44>
            overRegion = NULL;
    b17c:	|     |   clr.l 1ceea <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    b182:	|     '-> movea.l 8(sp),a0
    b186:	|         move.l 68(a0),d0
    b18a:	|     ,-- beq.s b19e <removeOneCharacter+0x60>
    b18c:	|     |   movea.l 8(sp),a0
    b190:	|     |   move.l 68(a0),d0
    b194:	|     |   move.l d0,-(sp)
    b196:	|     |   jsr 5374 <abortFunction>
    b19c:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    b19e:	|     '-> movea.l 8(sp),a0
    b1a2:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    b1a6:	|         clr.l 12(sp)
    b1aa:	|     ,-- bra.s b1d2 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    b1ac:	|  ,--|-> movea.l 8(sp),a0
    b1b0:	|  |  |   movea.l 80(a0),a0
    b1b4:	|  |  |   move.l (a0),d1
    b1b6:	|  |  |   move.l 12(sp),d0
    b1ba:	|  |  |   add.l d0,d0
    b1bc:	|  |  |   add.l d0,d0
    b1be:	|  |  |   movea.l d1,a0
    b1c0:	|  |  |   adda.l d0,a0
    b1c2:	|  |  |   move.l (a0),d0
    b1c4:	|  |  |   move.l d0,-(sp)
    b1c6:	|  |  |   jsr 9be4 <deleteAnim>
    b1cc:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    b1ce:	|  |  |   addq.l #1,12(sp)
    b1d2:	|  |  '-> moveq #2,d0
    b1d4:	|  |      cmp.l 12(sp),d0
    b1d8:	|  '----- bge.s b1ac <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    b1da:	|         move.l #118330,16(sp)
    b1e2:	|     ,-- bra.s b1f2 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    b1e4:	|  ,--|-> movea.l 16(sp),a0
    b1e8:	|  |  |   move.l (a0),d0
    b1ea:	|  |  |   moveq #36,d1
    b1ec:	|  |  |   add.l d0,d1
    b1ee:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b1f2:	|  |  '-> movea.l 16(sp),a0
    b1f6:	|  |      move.l (a0),d0
    b1f8:	|  |      cmp.l 8(sp),d0
    b1fc:	|  '----- bne.s b1e4 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b1fe:	|         movea.l 8(sp),a0
    b202:	|         move.l 36(a0),d0
    b206:	|         movea.l 16(sp),a0
    b20a:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b20c:	|         movea.l 8(sp),a0
    b210:	|         move.l 114(a0),d0
    b214:	|         move.l d0,-(sp)
    b216:	|         jsr dc1c <removeObjectType>
    b21c:	|         addq.l #4,sp
        FreeVec(p);
    b21e:	|         move.l 8(sp),4(sp)
    b224:	|         move.l 1cdda <SysBase>,d0
    b22a:	|         movea.l d0,a6
    b22c:	|         movea.l 4(sp),a1
    b230:	|         jsr -690(a6)
		
    }
}
    b234:	'-------> nop
    b236:	          movea.l (sp)+,a6
    b238:	          lea 16(sp),sp
    b23c:	          rts

0000b23e <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b23e:	       subq.l #8,sp
    b240:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b242:	       movea.l 16(sp),a0
    b246:	       movea.l 80(a0),a0
    b24a:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b250:	       movea.l 16(sp),a0
    b254:	       move.l 92(a0),d2
    b258:	       move.l 4(sp),-(sp)
    b25c:	       pea b4 <_start+0xb4>
    b260:	       jsr 1804a <__divsi3>
    b266:	       addq.l #8,sp
    b268:	       add.l d2,d0
    b26a:	       move.l d0,d1
    b26c:	       addi.l #180,d1
    b272:	       movea.l 16(sp),a0
    b276:	       move.l 100(a0),d0
    b27a:	       move.l d1,d2
    b27c:	       add.l d0,d2
    b27e:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b282:	   ,-- bra.s b28c <rethinkAngle+0x4e>
    b284:	,--|-> addi.l #-360,8(sp)
    b28c:	|  '-> cmpi.l #359,8(sp)
    b294:	'----- bgt.s b284 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b296:	       move.l 4(sp),-(sp)
    b29a:	       move.l 12(sp),-(sp)
    b29e:	       jsr 17fcc <__mulsi3>
    b2a4:	       addq.l #8,sp
    b2a6:	       pea 168 <decodeFilename+0x50>
    b2aa:	       move.l d0,-(sp)
    b2ac:	       jsr 1804a <__divsi3>
    b2b2:	       addq.l #8,sp
    b2b4:	       movea.l 16(sp),a0
    b2b8:	       move.l d0,106(a0)
}
    b2bc:	       nop
    b2be:	       move.l (sp)+,d2
    b2c0:	       addq.l #8,sp
    b2c2:	       rts

0000b2c4 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b2c4:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b2c6:	          movea.l 8(sp),a0
    b2ca:	          move.l 8(a0),d0
    b2ce:	          move.l 12(sp),-(sp)
    b2d2:	          move.l d0,-(sp)
    b2d4:	          jsr 8d0 <put2bytes>
    b2da:	          addq.l #8,sp
	if (p -> numFrames) {
    b2dc:	          movea.l 8(sp),a0
    b2e0:	          move.l 8(a0),d0
    b2e4:	,-------- beq.w b388 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b2e8:	|         movea.l 8(sp),a0
    b2ec:	|         movea.l (a0),a0
    b2ee:	|         move.l (a0),d0
    b2f0:	|         move.l 12(sp),-(sp)
    b2f4:	|         move.l d0,-(sp)
    b2f6:	|         jsr 958 <put4bytes>
    b2fc:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b2fe:	|         clr.l (sp)
    b300:	|     ,-- bra.s b37a <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b302:	|  ,--|-> movea.l 8(sp),a0
    b306:	|  |  |   movea.l 4(a0),a0
    b30a:	|  |  |   move.l (sp),d1
    b30c:	|  |  |   move.l d1,d0
    b30e:	|  |  |   add.l d0,d0
    b310:	|  |  |   add.l d1,d0
    b312:	|  |  |   add.l d0,d0
    b314:	|  |  |   add.l d0,d0
    b316:	|  |  |   adda.l d0,a0
    b318:	|  |  |   move.l (a0),d0
    b31a:	|  |  |   move.l 12(sp),-(sp)
    b31e:	|  |  |   move.l d0,-(sp)
    b320:	|  |  |   jsr 958 <put4bytes>
    b326:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b328:	|  |  |   movea.l 8(sp),a0
    b32c:	|  |  |   movea.l 4(a0),a0
    b330:	|  |  |   move.l (sp),d1
    b332:	|  |  |   move.l d1,d0
    b334:	|  |  |   add.l d0,d0
    b336:	|  |  |   add.l d1,d0
    b338:	|  |  |   add.l d0,d0
    b33a:	|  |  |   add.l d0,d0
    b33c:	|  |  |   adda.l d0,a0
    b33e:	|  |  |   move.l 4(a0),d0
    b342:	|  |  |   move.l 12(sp),-(sp)
    b346:	|  |  |   move.l d0,-(sp)
    b348:	|  |  |   jsr 958 <put4bytes>
    b34e:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b350:	|  |  |   movea.l 8(sp),a0
    b354:	|  |  |   movea.l 4(a0),a0
    b358:	|  |  |   move.l (sp),d1
    b35a:	|  |  |   move.l d1,d0
    b35c:	|  |  |   add.l d0,d0
    b35e:	|  |  |   add.l d1,d0
    b360:	|  |  |   add.l d0,d0
    b362:	|  |  |   add.l d0,d0
    b364:	|  |  |   adda.l d0,a0
    b366:	|  |  |   move.l 8(a0),d0
    b36a:	|  |  |   move.l 12(sp),-(sp)
    b36e:	|  |  |   move.l d0,-(sp)
    b370:	|  |  |   jsr 958 <put4bytes>
    b376:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b378:	|  |  |   addq.l #1,(sp)
    b37a:	|  |  '-> movea.l 8(sp),a0
    b37e:	|  |      move.l 8(a0),d0
    b382:	|  |      cmp.l (sp),d0
    b384:	|  '----- bgt.w b302 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b388:	'-------> moveq #1,d0
}
    b38a:	          addq.l #4,sp
    b38c:	          rts

0000b38e <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b38e:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b390:	             movea.l 8(sp),a0
    b394:	             move.l 4(a0),d0
    b398:	             move.l 12(sp),-(sp)
    b39c:	             move.l d0,-(sp)
    b39e:	             jsr 8d0 <put2bytes>
    b3a4:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b3a6:	             clr.l (sp)
    b3a8:	   ,-------- bra.s b3d4 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b3aa:	,--|-------> movea.l 8(sp),a0
    b3ae:	|  |         move.l (a0),d1
    b3b0:	|  |         move.l (sp),d0
    b3b2:	|  |         add.l d0,d0
    b3b4:	|  |         add.l d0,d0
    b3b6:	|  |         movea.l d1,a0
    b3b8:	|  |         adda.l d0,a0
    b3ba:	|  |         move.l (a0),d0
    b3bc:	|  |         move.l 12(sp),-(sp)
    b3c0:	|  |         move.l d0,-(sp)
    b3c2:	|  |         jsr b2c4 <saveAnim>
    b3c8:	|  |         addq.l #8,sp
    b3ca:	|  |         tst.w d0
    b3cc:	|  |     ,-- bne.s b3d2 <saveCostume+0x44>
    b3ce:	|  |     |   clr.w d0
    b3d0:	|  |  ,--|-- bra.s b3e8 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b3d2:	|  |  |  '-> addq.l #1,(sp)
    b3d4:	|  '--|----> movea.l 8(sp),a0
    b3d8:	|     |      move.l 4(a0),d1
    b3dc:	|     |      move.l d1,d0
    b3de:	|     |      add.l d0,d0
    b3e0:	|     |      add.l d1,d0
    b3e2:	|     |      cmp.l (sp),d0
    b3e4:	'-----|----- bgt.s b3aa <saveCostume+0x1c>
	}

	return TRUE;
    b3e6:	      |      moveq #1,d0
}
    b3e8:	      '----> addq.l #4,sp
    b3ea:	             rts

0000b3ec <savePeople>:

BOOL savePeople (BPTR fp) {
    b3ec:	             lea -144(sp),sp
    b3f0:	             move.l a6,-(sp)
    b3f2:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b3f4:	             move.l 1ce3a <allPeople>,148(sp)
	int countPeople = 0, a;
    b3fc:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b400:	             move.w 1c76a <scaleHorizon>,d0
    b406:	             movea.w d0,a0
    b408:	             move.l 156(sp),-(sp)
    b40c:	             move.l a0,-(sp)
    b40e:	             jsr a9c <putSigned>
    b414:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b416:	             move.w 1c76c <scaleDivide>,d0
    b41c:	             movea.w d0,a0
    b41e:	             move.l 156(sp),-(sp)
    b422:	             move.l a0,-(sp)
    b424:	             jsr a9c <putSigned>
    b42a:	             addq.l #8,sp

	while (me) {
    b42c:	         ,-- bra.s b43c <savePeople+0x50>
		countPeople ++;
    b42e:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b432:	      |  |   movea.l 148(sp),a0
    b436:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b43c:	      |  '-> tst.l 148(sp)
    b440:	      '----- bne.s b42e <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b442:	             move.l 156(sp),-(sp)
    b446:	             move.l 148(sp),-(sp)
    b44a:	             jsr 8d0 <put2bytes>
    b450:	             addq.l #8,sp

	me = allPeople;
    b452:	             move.l 1ce3a <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b45a:	             clr.l 140(sp)
    b45e:	   ,-------- bra.w b8b6 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b462:	,--|-------> movea.l 148(sp),a0
    b466:	|  |         move.l (a0),d0
    b468:	|  |         move.l 156(sp),-(sp)
    b46c:	|  |         move.l d0,-(sp)
    b46e:	|  |         jsr a46 <putFloat>
    b474:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b476:	|  |         movea.l 148(sp),a0
    b47a:	|  |         move.l 4(a0),d0
    b47e:	|  |         move.l 156(sp),-(sp)
    b482:	|  |         move.l d0,-(sp)
    b484:	|  |         jsr a46 <putFloat>
    b48a:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b48c:	|  |         movea.l 148(sp),a0
    b490:	|  |         move.l 80(a0),d0
    b494:	|  |         move.l 156(sp),-(sp)
    b498:	|  |         move.l d0,-(sp)
    b49a:	|  |         jsr b38e <saveCostume>
    b4a0:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b4a2:	|  |         movea.l 148(sp),a0
    b4a6:	|  |         move.l 72(a0),d0
    b4aa:	|  |         move.l 156(sp),-(sp)
    b4ae:	|  |         move.l d0,-(sp)
    b4b0:	|  |         jsr b2c4 <saveAnim>
    b4b6:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b4b8:	|  |         move.l 156(sp),136(sp)
    b4be:	|  |         movea.l 148(sp),a0
    b4c2:	|  |         move.l 72(a0),d1
    b4c6:	|  |         movea.l 148(sp),a0
    b4ca:	|  |         move.l 76(a0),d0
    b4ce:	|  |         cmp.l d1,d0
    b4d0:	|  |         seq d0
    b4d2:	|  |         neg.b d0
    b4d4:	|  |         move.b d0,d0
    b4d6:	|  |         andi.l #255,d0
    b4dc:	|  |         move.l d0,132(sp)
    b4e0:	|  |         move.l 1cde2 <DOSBase>,d0
    b4e6:	|  |         movea.l d0,a6
    b4e8:	|  |         move.l 136(sp),d1
    b4ec:	|  |         move.l 132(sp),d2
    b4f0:	|  |         jsr -312(a6)
    b4f4:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b4f8:	|  |         movea.l 148(sp),a0
    b4fc:	|  |         move.l 32(a0),d0
    b500:	|  |         move.l 156(sp),-(sp)
    b504:	|  |         move.l d0,-(sp)
    b506:	|  |         jsr a46 <putFloat>
    b50c:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b50e:	|  |         movea.l 148(sp),a0
    b512:	|  |         move.l 118(a0),d0
    b516:	|  |         move.l 156(sp),-(sp)
    b51a:	|  |         move.l d0,-(sp)
    b51c:	|  |         jsr 8d0 <put2bytes>
    b522:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b524:	|  |         movea.l 148(sp),a0
    b528:	|  |         move.l 20(a0),d0
    b52c:	|  |         move.l 156(sp),-(sp)
    b530:	|  |         move.l d0,-(sp)
    b532:	|  |         jsr 8d0 <put2bytes>
    b538:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b53a:	|  |         movea.l 148(sp),a0
    b53e:	|  |         move.l 40(a0),d0
    b542:	|  |         move.l 156(sp),-(sp)
    b546:	|  |         move.l d0,-(sp)
    b548:	|  |         jsr 8d0 <put2bytes>
    b54e:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b550:	|  |         movea.l 148(sp),a0
    b554:	|  |         move.l 44(a0),d0
    b558:	|  |         move.l 156(sp),-(sp)
    b55c:	|  |         move.l d0,-(sp)
    b55e:	|  |         jsr 8d0 <put2bytes>
    b564:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b566:	|  |         movea.l 148(sp),a0
    b56a:	|  |         move.l 48(a0),d0
    b56e:	|  |         move.l 156(sp),-(sp)
    b572:	|  |         move.l d0,-(sp)
    b574:	|  |         jsr 8d0 <put2bytes>
    b57a:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b57c:	|  |         movea.l 148(sp),a0
    b580:	|  |         move.l 52(a0),d0
    b584:	|  |         move.l 156(sp),-(sp)
    b588:	|  |         move.l d0,-(sp)
    b58a:	|  |         jsr 8d0 <put2bytes>
    b590:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b592:	|  |         movea.l 148(sp),a0
    b596:	|  |         move.l 84(a0),d0
    b59a:	|  |         move.l 156(sp),-(sp)
    b59e:	|  |         move.l d0,-(sp)
    b5a0:	|  |         jsr 8d0 <put2bytes>
    b5a6:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b5a8:	|  |         movea.l 148(sp),a0
    b5ac:	|  |         move.l 88(a0),d0
    b5b0:	|  |         move.l 156(sp),-(sp)
    b5b4:	|  |         move.l d0,-(sp)
    b5b6:	|  |         jsr 8d0 <put2bytes>
    b5bc:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b5be:	|  |         movea.l 148(sp),a0
    b5c2:	|  |         move.l 28(a0),d0
    b5c6:	|  |         move.l 156(sp),-(sp)
    b5ca:	|  |         move.l d0,-(sp)
    b5cc:	|  |         jsr 8d0 <put2bytes>
    b5d2:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b5d4:	|  |         movea.l 148(sp),a0
    b5d8:	|  |         move.l 122(a0),d0
    b5dc:	|  |         move.l 156(sp),-(sp)
    b5e0:	|  |         move.l d0,-(sp)
    b5e2:	|  |         jsr 8d0 <put2bytes>
    b5e8:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b5ea:	|  |         movea.l 148(sp),a0
    b5ee:	|  |         move.l 24(a0),d0
    b5f2:	|  |         move.l d0,d0
    b5f4:	|  |         movea.w d0,a0
    b5f6:	|  |         move.l 156(sp),-(sp)
    b5fa:	|  |         move.l a0,-(sp)
    b5fc:	|  |         jsr a9c <putSigned>
    b602:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b604:	|  |         move.l 156(sp),124(sp)
    b60a:	|  |         movea.l 148(sp),a0
    b60e:	|  |         move.w 104(a0),d0
    b612:	|  |         movea.w d0,a0
    b614:	|  |         move.l a0,120(sp)
    b618:	|  |         move.l 1cde2 <DOSBase>,d0
    b61e:	|  |         movea.l d0,a6
    b620:	|  |         move.l 124(sp),d1
    b624:	|  |         move.l 120(sp),d2
    b628:	|  |         jsr -312(a6)
    b62c:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b630:	|  |         move.l 156(sp),112(sp)
    b636:	|  |         movea.l 148(sp),a0
    b63a:	|  |         move.w 64(a0),d0
    b63e:	|  |         movea.w d0,a0
    b640:	|  |         move.l a0,108(sp)
    b644:	|  |         move.l 1cde2 <DOSBase>,d0
    b64a:	|  |         movea.l d0,a6
    b64c:	|  |         move.l 112(sp),d1
    b650:	|  |         move.l 108(sp),d2
    b654:	|  |         jsr -312(a6)
    b658:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b65c:	|  |         move.l 156(sp),100(sp)
    b662:	|  |         movea.l 148(sp),a0
    b666:	|  |         move.w 66(a0),d0
    b66a:	|  |         movea.w d0,a0
    b66c:	|  |         move.l a0,96(sp)
    b670:	|  |         move.l 1cde2 <DOSBase>,d0
    b676:	|  |         movea.l d0,a6
    b678:	|  |         move.l 100(sp),d1
    b67c:	|  |         move.l 96(sp),d2
    b680:	|  |         jsr -312(a6)
    b684:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b688:	|  |         movea.l 148(sp),a0
    b68c:	|  |         move.l 68(a0),d0
    b690:	|  |  ,----- beq.s b6ce <savePeople+0x2e2>
			FPutC (fp, 1);
    b692:	|  |  |      move.l 156(sp),76(sp)
    b698:	|  |  |      moveq #1,d0
    b69a:	|  |  |      move.l d0,72(sp)
    b69e:	|  |  |      move.l 1cde2 <DOSBase>,d0
    b6a4:	|  |  |      movea.l d0,a6
    b6a6:	|  |  |      move.l 76(sp),d1
    b6aa:	|  |  |      move.l 72(sp),d2
    b6ae:	|  |  |      jsr -312(a6)
    b6b2:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b6b6:	|  |  |      movea.l 148(sp),a0
    b6ba:	|  |  |      move.l 68(a0),d0
    b6be:	|  |  |      move.l 156(sp),-(sp)
    b6c2:	|  |  |      move.l d0,-(sp)
    b6c4:	|  |  |      jsr c8e8 <saveFunction>
    b6ca:	|  |  |      addq.l #8,sp
    b6cc:	|  |  |  ,-- bra.s b6f2 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b6ce:	|  |  '--|-> move.l 156(sp),88(sp)
    b6d4:	|  |     |   moveq #1,d0
    b6d6:	|  |     |   move.l d0,84(sp)
    b6da:	|  |     |   move.l 1cde2 <DOSBase>,d0
    b6e0:	|  |     |   movea.l d0,a6
    b6e2:	|  |     |   move.l 88(sp),d1
    b6e6:	|  |     |   move.l 84(sp),d2
    b6ea:	|  |     |   jsr -312(a6)
    b6ee:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b6f2:	|  |     '-> movea.l 148(sp),a0
    b6f6:	|  |         move.l 106(a0),d0
    b6fa:	|  |         move.l 156(sp),-(sp)
    b6fe:	|  |         move.l d0,-(sp)
    b700:	|  |         jsr 8d0 <put2bytes>
    b706:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b708:	|  |         movea.l 148(sp),a0
    b70c:	|  |         move.l 92(a0),d0
    b710:	|  |         move.l 156(sp),-(sp)
    b714:	|  |         move.l d0,-(sp)
    b716:	|  |         jsr 8d0 <put2bytes>
    b71c:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b71e:	|  |         movea.l 148(sp),a0
    b722:	|  |         move.l 100(a0),d0
    b726:	|  |         move.l 156(sp),-(sp)
    b72a:	|  |         move.l d0,-(sp)
    b72c:	|  |         jsr 8d0 <put2bytes>
    b732:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b734:	|  |         movea.l 148(sp),a0
    b738:	|  |         move.l 96(a0),d0
    b73c:	|  |         move.l 156(sp),-(sp)
    b740:	|  |         move.l d0,-(sp)
    b742:	|  |         jsr 8d0 <put2bytes>
    b748:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b74a:	|  |         movea.l 148(sp),a0
    b74e:	|  |         move.l 110(a0),d0
    b752:	|  |         move.l d0,d0
    b754:	|  |         movea.w d0,a0
    b756:	|  |         move.l 156(sp),-(sp)
    b75a:	|  |         move.l a0,-(sp)
    b75c:	|  |         jsr a9c <putSigned>
    b762:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b764:	|  |         movea.l 148(sp),a0
    b768:	|  |         move.l 56(a0),d0
    b76c:	|  |         move.l d0,d0
    b76e:	|  |         movea.w d0,a0
    b770:	|  |         move.l 156(sp),-(sp)
    b774:	|  |         move.l a0,-(sp)
    b776:	|  |         jsr a9c <putSigned>
    b77c:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b77e:	|  |         movea.l 148(sp),a0
    b782:	|  |         move.l 60(a0),d0
    b786:	|  |         move.l d0,d0
    b788:	|  |         movea.w d0,a0
    b78a:	|  |         move.l 156(sp),-(sp)
    b78e:	|  |         move.l a0,-(sp)
    b790:	|  |         jsr a9c <putSigned>
    b796:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b798:	|  |         move.l 156(sp),64(sp)
    b79e:	|  |         movea.l 148(sp),a0
    b7a2:	|  |         move.b 126(a0),d0
    b7a6:	|  |         move.b d0,d0
    b7a8:	|  |         andi.l #255,d0
    b7ae:	|  |         move.l d0,60(sp)
    b7b2:	|  |         move.l 1cde2 <DOSBase>,d0
    b7b8:	|  |         movea.l d0,a6
    b7ba:	|  |         move.l 64(sp),d1
    b7be:	|  |         move.l 60(sp),d2
    b7c2:	|  |         jsr -312(a6)
    b7c6:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b7ca:	|  |         move.l 156(sp),52(sp)
    b7d0:	|  |         movea.l 148(sp),a0
    b7d4:	|  |         move.b 127(a0),d0
    b7d8:	|  |         move.b d0,d0
    b7da:	|  |         andi.l #255,d0
    b7e0:	|  |         move.l d0,48(sp)
    b7e4:	|  |         move.l 1cde2 <DOSBase>,d0
    b7ea:	|  |         movea.l d0,a6
    b7ec:	|  |         move.l 52(sp),d1
    b7f0:	|  |         move.l 48(sp),d2
    b7f4:	|  |         jsr -312(a6)
    b7f8:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b7fc:	|  |         move.l 156(sp),40(sp)
    b802:	|  |         movea.l 148(sp),a0
    b806:	|  |         move.b 128(a0),d0
    b80a:	|  |         move.b d0,d0
    b80c:	|  |         andi.l #255,d0
    b812:	|  |         move.l d0,36(sp)
    b816:	|  |         move.l 1cde2 <DOSBase>,d0
    b81c:	|  |         movea.l d0,a6
    b81e:	|  |         move.l 40(sp),d1
    b822:	|  |         move.l 36(sp),d2
    b826:	|  |         jsr -312(a6)
    b82a:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b82e:	|  |         move.l 156(sp),28(sp)
    b834:	|  |         movea.l 148(sp),a0
    b838:	|  |         move.b 129(a0),d0
    b83c:	|  |         move.b d0,d0
    b83e:	|  |         andi.l #255,d0
    b844:	|  |         move.l d0,24(sp)
    b848:	|  |         move.l 1cde2 <DOSBase>,d0
    b84e:	|  |         movea.l d0,a6
    b850:	|  |         move.l 28(sp),d1
    b854:	|  |         move.l 24(sp),d2
    b858:	|  |         jsr -312(a6)
    b85c:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b860:	|  |         move.l 156(sp),16(sp)
    b866:	|  |         movea.l 148(sp),a0
    b86a:	|  |         move.b 130(a0),d0
    b86e:	|  |         move.b d0,d0
    b870:	|  |         andi.l #255,d0
    b876:	|  |         move.l d0,12(sp)
    b87a:	|  |         move.l 1cde2 <DOSBase>,d0
    b880:	|  |         movea.l d0,a6
    b882:	|  |         move.l 16(sp),d1
    b886:	|  |         move.l 12(sp),d2
    b88a:	|  |         jsr -312(a6)
    b88e:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b892:	|  |         movea.l 148(sp),a0
    b896:	|  |         move.l 114(a0),d0
    b89a:	|  |         move.l 156(sp),-(sp)
    b89e:	|  |         move.l d0,-(sp)
    b8a0:	|  |         jsr dcbc <saveObjectRef>
    b8a6:	|  |         addq.l #8,sp

		me = me -> next;
    b8a8:	|  |         movea.l 148(sp),a0
    b8ac:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b8b2:	|  |         addq.l #1,140(sp)
    b8b6:	|  '-------> movea.l 140(sp),a0
    b8ba:	|            cmpa.l 144(sp),a0
    b8be:	'----------- blt.w b462 <savePeople+0x76>
	}
	return TRUE;
    b8c2:	             moveq #1,d0
}
    b8c4:	             move.l (sp)+,d2
    b8c6:	             movea.l (sp)+,a6
    b8c8:	             lea 144(sp),sp
    b8cc:	             rts

0000b8ce <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b8ce:	movea.l 4(sp),a0
    b8d2:	move.l 8(sp),(a0)
}
    b8d6:	nop
    b8d8:	rts

0000b8da <setDrawMode>:


void setDrawMode (int h, int ob) {
    b8da:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b8dc:	       move.l 12(sp),-(sp)
    b8e0:	       jsr a906 <findPerson>
    b8e6:	       addq.l #4,sp
    b8e8:	       move.l d0,(sp)
	if (! moveMe) return;
    b8ea:	,----- beq.s b8fe <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b8ec:	|      move.l 8(sp),-(sp)
    b8f0:	|      move.l 4(sp),-(sp)
    b8f4:	|      jsr b904 <setMyDrawMode>
    b8fa:	|      addq.l #8,sp
    b8fc:	|  ,-- bra.s b900 <setDrawMode+0x26>
	if (! moveMe) return;
    b8fe:	'--|-> nop
}
    b900:	   '-> addq.l #4,sp
    b902:	       rts

0000b904 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b904:	       moveq #19,d0
    b906:	       cmp.l 8(sp),d0
    b90a:	,----- bcs.w bde2 <setMyDrawMode+0x4de>
    b90e:	|      move.l 8(sp),d0
    b912:	|      add.l d0,d0
    b914:	|      movea.l d0,a0
    b916:	|      adda.l #47394,a0
    b91c:	|      move.w (a0),d0
    b91e:	|      jmp (b922 <setMyDrawMode+0x1e>,pc,d0.w)
    b922:	|      .short 0x04c0
    b924:	|      ori.l #6684712,-(a4)
    b92a:	|      btst d0,-(a0)
    b92c:	|      bchg d0,(a6)+
    b92e:	|      bclr d0,(a4)+
    b930:	|      bset d0,(a2)+
    b932:	|      andi.b #84,(a6)
    b936:	|      andi.l #55575312,(a2)
    b93c:	|      .short 0x02d0
    b93e:	|      bclr d1,(a0)
    b940:	|      .short 0x044a
    b942:	|      .short 0x040c
    b944:	|      movep.l d1,1158(a6)
    b948:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b94a:	|      movea.l 4(sp),a0
    b94e:	|      clr.b 128(a0)
    b952:	|      movea.l 4(sp),a0
    b956:	|      move.b 128(a0),d0
    b95a:	|      movea.l 4(sp),a0
    b95e:	|      move.b d0,127(a0)
    b962:	|      movea.l 4(sp),a0
    b966:	|      move.b 127(a0),d0
    b96a:	|      movea.l 4(sp),a0
    b96e:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b972:	|      movea.l 4(sp),a0
    b976:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b97a:	|      movea.l 4(sp),a0
    b97e:	|      move.b #64,130(a0)
			break;
    b984:	|  ,-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b988:	|  |   movea.l 4(sp),a0
    b98c:	|  |   clr.b 128(a0)
    b990:	|  |   movea.l 4(sp),a0
    b994:	|  |   move.b 128(a0),d0
    b998:	|  |   movea.l 4(sp),a0
    b99c:	|  |   move.b d0,127(a0)
    b9a0:	|  |   movea.l 4(sp),a0
    b9a4:	|  |   move.b 127(a0),d0
    b9a8:	|  |   movea.l 4(sp),a0
    b9ac:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b9b0:	|  |   movea.l 4(sp),a0
    b9b4:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b9b8:	|  |   movea.l 4(sp),a0
    b9bc:	|  |   move.b #-128,130(a0)
			break;
    b9c2:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b9c6:	|  |   movea.l 4(sp),a0
    b9ca:	|  |   clr.b 128(a0)
    b9ce:	|  |   movea.l 4(sp),a0
    b9d2:	|  |   move.b 128(a0),d0
    b9d6:	|  |   movea.l 4(sp),a0
    b9da:	|  |   move.b d0,127(a0)
    b9de:	|  |   movea.l 4(sp),a0
    b9e2:	|  |   move.b 127(a0),d0
    b9e6:	|  |   movea.l 4(sp),a0
    b9ea:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b9ee:	|  |   movea.l 4(sp),a0
    b9f2:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b9f6:	|  |   movea.l 4(sp),a0
    b9fa:	|  |   move.b #-64,130(a0)
			break;
    ba00:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba04:	|  |   movea.l 4(sp),a0
    ba08:	|  |   clr.b 128(a0)
    ba0c:	|  |   movea.l 4(sp),a0
    ba10:	|  |   move.b 128(a0),d0
    ba14:	|  |   movea.l 4(sp),a0
    ba18:	|  |   move.b d0,127(a0)
    ba1c:	|  |   movea.l 4(sp),a0
    ba20:	|  |   move.b 127(a0),d0
    ba24:	|  |   movea.l 4(sp),a0
    ba28:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    ba2c:	|  |   movea.l 4(sp),a0
    ba30:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    ba34:	|  |   movea.l 4(sp),a0
    ba38:	|  |   move.b #-2,130(a0)
			break;
    ba3e:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba42:	|  |   movea.l 4(sp),a0
    ba46:	|  |   clr.b 128(a0)
    ba4a:	|  |   movea.l 4(sp),a0
    ba4e:	|  |   move.b 128(a0),d0
    ba52:	|  |   movea.l 4(sp),a0
    ba56:	|  |   move.b d0,127(a0)
    ba5a:	|  |   movea.l 4(sp),a0
    ba5e:	|  |   move.b 127(a0),d0
    ba62:	|  |   movea.l 4(sp),a0
    ba66:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    ba6a:	|  |   movea.l 4(sp),a0
    ba6e:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    ba74:	|  |   movea.l 4(sp),a0
    ba78:	|  |   clr.b 130(a0)
			break;
    ba7c:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba80:	|  |   movea.l 4(sp),a0
    ba84:	|  |   clr.b 128(a0)
    ba88:	|  |   movea.l 4(sp),a0
    ba8c:	|  |   move.b 128(a0),d0
    ba90:	|  |   movea.l 4(sp),a0
    ba94:	|  |   move.b d0,127(a0)
    ba98:	|  |   movea.l 4(sp),a0
    ba9c:	|  |   move.b 127(a0),d0
    baa0:	|  |   movea.l 4(sp),a0
    baa4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    baa8:	|  |   movea.l 4(sp),a0
    baac:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bab2:	|  |   movea.l 4(sp),a0
    bab6:	|  |   clr.b 130(a0)
			break;
    baba:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    babe:	|  |   movea.l 4(sp),a0
    bac2:	|  |   clr.b 128(a0)
    bac6:	|  |   movea.l 4(sp),a0
    baca:	|  |   move.b 128(a0),d0
    bace:	|  |   movea.l 4(sp),a0
    bad2:	|  |   move.b d0,127(a0)
    bad6:	|  |   movea.l 4(sp),a0
    bada:	|  |   move.b 127(a0),d0
    bade:	|  |   movea.l 4(sp),a0
    bae2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bae6:	|  |   movea.l 4(sp),a0
    baea:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    baf0:	|  |   movea.l 4(sp),a0
    baf4:	|  |   clr.b 130(a0)
			break;
    baf8:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bafc:	|  |   movea.l 4(sp),a0
    bb00:	|  |   clr.b 128(a0)
    bb04:	|  |   movea.l 4(sp),a0
    bb08:	|  |   move.b 128(a0),d0
    bb0c:	|  |   movea.l 4(sp),a0
    bb10:	|  |   move.b d0,127(a0)
    bb14:	|  |   movea.l 4(sp),a0
    bb18:	|  |   move.b 127(a0),d0
    bb1c:	|  |   movea.l 4(sp),a0
    bb20:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bb24:	|  |   movea.l 4(sp),a0
    bb28:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bb2c:	|  |   movea.l 4(sp),a0
    bb30:	|  |   clr.b 130(a0)
			break;
    bb34:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bb38:	|  |   movea.l 4(sp),a0
    bb3c:	|  |   clr.b 128(a0)
    bb40:	|  |   movea.l 4(sp),a0
    bb44:	|  |   move.b 128(a0),d0
    bb48:	|  |   movea.l 4(sp),a0
    bb4c:	|  |   move.b d0,127(a0)
    bb50:	|  |   movea.l 4(sp),a0
    bb54:	|  |   move.b 127(a0),d0
    bb58:	|  |   movea.l 4(sp),a0
    bb5c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bb60:	|  |   movea.l 4(sp),a0
    bb64:	|  |   st 129(a0)
			moveMe->transparency = 64;
    bb68:	|  |   movea.l 4(sp),a0
    bb6c:	|  |   move.b #64,130(a0)
			break;
    bb72:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bb76:	|  |   movea.l 4(sp),a0
    bb7a:	|  |   clr.b 128(a0)
    bb7e:	|  |   movea.l 4(sp),a0
    bb82:	|  |   move.b 128(a0),d0
    bb86:	|  |   movea.l 4(sp),a0
    bb8a:	|  |   move.b d0,127(a0)
    bb8e:	|  |   movea.l 4(sp),a0
    bb92:	|  |   move.b 127(a0),d0
    bb96:	|  |   movea.l 4(sp),a0
    bb9a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bb9e:	|  |   movea.l 4(sp),a0
    bba2:	|  |   st 129(a0)
			moveMe->transparency = 128;
    bba6:	|  |   movea.l 4(sp),a0
    bbaa:	|  |   move.b #-128,130(a0)
			break;
    bbb0:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bbb4:	|  |   movea.l 4(sp),a0
    bbb8:	|  |   clr.b 128(a0)
    bbbc:	|  |   movea.l 4(sp),a0
    bbc0:	|  |   move.b 128(a0),d0
    bbc4:	|  |   movea.l 4(sp),a0
    bbc8:	|  |   move.b d0,127(a0)
    bbcc:	|  |   movea.l 4(sp),a0
    bbd0:	|  |   move.b 127(a0),d0
    bbd4:	|  |   movea.l 4(sp),a0
    bbd8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bbdc:	|  |   movea.l 4(sp),a0
    bbe0:	|  |   st 129(a0)
			moveMe->transparency = 192;
    bbe4:	|  |   movea.l 4(sp),a0
    bbe8:	|  |   move.b #-64,130(a0)
			break;
    bbee:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bbf2:	|  |   movea.l 4(sp),a0
    bbf6:	|  |   move.b #-128,128(a0)
    bbfc:	|  |   movea.l 4(sp),a0
    bc00:	|  |   move.b 128(a0),d0
    bc04:	|  |   movea.l 4(sp),a0
    bc08:	|  |   move.b d0,127(a0)
    bc0c:	|  |   movea.l 4(sp),a0
    bc10:	|  |   move.b 127(a0),d0
    bc14:	|  |   movea.l 4(sp),a0
    bc18:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bc1c:	|  |   movea.l 4(sp),a0
    bc20:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bc26:	|  |   movea.l 4(sp),a0
    bc2a:	|  |   clr.b 130(a0)
			break;
    bc2e:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bc32:	|  |   movea.l 4(sp),a0
    bc36:	|  |   move.b #-128,128(a0)
    bc3c:	|  |   movea.l 4(sp),a0
    bc40:	|  |   move.b 128(a0),d0
    bc44:	|  |   movea.l 4(sp),a0
    bc48:	|  |   move.b d0,127(a0)
    bc4c:	|  |   movea.l 4(sp),a0
    bc50:	|  |   move.b 127(a0),d0
    bc54:	|  |   movea.l 4(sp),a0
    bc58:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bc5c:	|  |   movea.l 4(sp),a0
    bc60:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bc66:	|  |   movea.l 4(sp),a0
    bc6a:	|  |   clr.b 130(a0)
			break;
    bc6e:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bc72:	|  |   movea.l 4(sp),a0
    bc76:	|  |   move.b #-128,128(a0)
    bc7c:	|  |   movea.l 4(sp),a0
    bc80:	|  |   move.b 128(a0),d0
    bc84:	|  |   movea.l 4(sp),a0
    bc88:	|  |   move.b d0,127(a0)
    bc8c:	|  |   movea.l 4(sp),a0
    bc90:	|  |   move.b 127(a0),d0
    bc94:	|  |   movea.l 4(sp),a0
    bc98:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bc9c:	|  |   movea.l 4(sp),a0
    bca0:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bca6:	|  |   movea.l 4(sp),a0
    bcaa:	|  |   clr.b 130(a0)
			break;
    bcae:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bcb2:	|  |   movea.l 4(sp),a0
    bcb6:	|  |   move.b #-128,128(a0)
    bcbc:	|  |   movea.l 4(sp),a0
    bcc0:	|  |   move.b 128(a0),d0
    bcc4:	|  |   movea.l 4(sp),a0
    bcc8:	|  |   move.b d0,127(a0)
    bccc:	|  |   movea.l 4(sp),a0
    bcd0:	|  |   move.b 127(a0),d0
    bcd4:	|  |   movea.l 4(sp),a0
    bcd8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bcdc:	|  |   movea.l 4(sp),a0
    bce0:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bce4:	|  |   movea.l 4(sp),a0
    bce8:	|  |   clr.b 130(a0)
			break;
    bcec:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bcf0:	|  |   movea.l 4(sp),a0
    bcf4:	|  |   st 128(a0)
    bcf8:	|  |   movea.l 4(sp),a0
    bcfc:	|  |   move.b 128(a0),d0
    bd00:	|  |   movea.l 4(sp),a0
    bd04:	|  |   move.b d0,127(a0)
    bd08:	|  |   movea.l 4(sp),a0
    bd0c:	|  |   move.b 127(a0),d0
    bd10:	|  |   movea.l 4(sp),a0
    bd14:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bd18:	|  |   movea.l 4(sp),a0
    bd1c:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bd22:	|  |   movea.l 4(sp),a0
    bd26:	|  |   clr.b 130(a0)
			break;
    bd2a:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bd2e:	|  |   movea.l 4(sp),a0
    bd32:	|  |   st 128(a0)
    bd36:	|  |   movea.l 4(sp),a0
    bd3a:	|  |   move.b 128(a0),d0
    bd3e:	|  |   movea.l 4(sp),a0
    bd42:	|  |   move.b d0,127(a0)
    bd46:	|  |   movea.l 4(sp),a0
    bd4a:	|  |   move.b 127(a0),d0
    bd4e:	|  |   movea.l 4(sp),a0
    bd52:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bd56:	|  |   movea.l 4(sp),a0
    bd5a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bd60:	|  |   movea.l 4(sp),a0
    bd64:	|  |   clr.b 130(a0)
			break;
    bd68:	|  +-- bra.w be1c <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bd6c:	|  |   movea.l 4(sp),a0
    bd70:	|  |   st 128(a0)
    bd74:	|  |   movea.l 4(sp),a0
    bd78:	|  |   move.b 128(a0),d0
    bd7c:	|  |   movea.l 4(sp),a0
    bd80:	|  |   move.b d0,127(a0)
    bd84:	|  |   movea.l 4(sp),a0
    bd88:	|  |   move.b 127(a0),d0
    bd8c:	|  |   movea.l 4(sp),a0
    bd90:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bd94:	|  |   movea.l 4(sp),a0
    bd98:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bd9e:	|  |   movea.l 4(sp),a0
    bda2:	|  |   clr.b 130(a0)
			break;
    bda6:	|  +-- bra.s be1c <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bda8:	|  |   movea.l 4(sp),a0
    bdac:	|  |   st 128(a0)
    bdb0:	|  |   movea.l 4(sp),a0
    bdb4:	|  |   move.b 128(a0),d0
    bdb8:	|  |   movea.l 4(sp),a0
    bdbc:	|  |   move.b d0,127(a0)
    bdc0:	|  |   movea.l 4(sp),a0
    bdc4:	|  |   move.b 127(a0),d0
    bdc8:	|  |   movea.l 4(sp),a0
    bdcc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bdd0:	|  |   movea.l 4(sp),a0
    bdd4:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bdd8:	|  |   movea.l 4(sp),a0
    bddc:	|  |   clr.b 130(a0)
			break;
    bde0:	|  +-- bra.s be1c <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bde2:	'--|-> movea.l 4(sp),a0
    bde6:	   |   clr.b 128(a0)
    bdea:	   |   movea.l 4(sp),a0
    bdee:	   |   move.b 128(a0),d0
    bdf2:	   |   movea.l 4(sp),a0
    bdf6:	   |   move.b d0,127(a0)
    bdfa:	   |   movea.l 4(sp),a0
    bdfe:	   |   move.b 127(a0),d0
    be02:	   |   movea.l 4(sp),a0
    be06:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    be0a:	   |   movea.l 4(sp),a0
    be0e:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    be12:	   |   movea.l 4(sp),a0
    be16:	   |   clr.b 130(a0)
			break;
    be1a:	   |   nop
	}
}
    be1c:	   '-> nop
    be1e:	       rts

0000be20 <shufflePeople>:

void shufflePeople () {
    be20:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    be24:	             move.l #118330,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    be2c:	             move.l 1ce3a <allPeople>,d0
    be32:	,----------- beq.w bf08 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    be36:	|     ,----- bra.w bef8 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    be3a:	|  ,--|----> movea.l 16(sp),a0
    be3e:	|  |  |      movea.l (a0),a0
    be40:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    be46:	|  |  |      movea.l 16(sp),a0
    be4a:	|  |  |      movea.l (a0),a0
    be4c:	|  |  |      move.l 118(a0),d0
    be50:	|  |  |      moveq #1,d1
    be52:	|  |  |      and.l d1,d0
    be54:	|  |  |  ,-- beq.s be6c <shufflePeople+0x4c>
    be56:	|  |  |  |   move.l #1148846080,-(sp)
    be5c:	|  |  |  |   move.l 16(sp),-(sp)
    be60:	|  |  |  |   jsr 1782e <__addsf3>
    be66:	|  |  |  |   addq.l #8,sp
    be68:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    be6c:	|  |  |  '-> movea.l 16(sp),a0
    be70:	|  |  |      movea.l (a0),a0
    be72:	|  |  |      movea.l 36(a0),a0
    be76:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    be7c:	|  |  |      movea.l 16(sp),a0
    be80:	|  |  |      movea.l (a0),a0
    be82:	|  |  |      movea.l 36(a0),a0
    be86:	|  |  |      move.l 118(a0),d0
    be8a:	|  |  |      moveq #1,d1
    be8c:	|  |  |      and.l d1,d0
    be8e:	|  |  |  ,-- beq.s bea6 <shufflePeople+0x86>
    be90:	|  |  |  |   move.l #1148846080,-(sp)
    be96:	|  |  |  |   move.l 12(sp),-(sp)
    be9a:	|  |  |  |   jsr 1782e <__addsf3>
    bea0:	|  |  |  |   addq.l #8,sp
    bea2:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bea6:	|  |  |  '-> move.l 8(sp),-(sp)
    beaa:	|  |  |      move.l 16(sp),-(sp)
    beae:	|  |  |      jsr 17bde <__gtsf2>
    beb4:	|  |  |      addq.l #8,sp
    beb6:	|  |  |      tst.l d0
    beb8:	|  |  |  ,-- ble.s beea <shufflePeople+0xca>
			A = (*thisReference);
    beba:	|  |  |  |   movea.l 16(sp),a0
    bebe:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bec2:	|  |  |  |   movea.l 16(sp),a0
    bec6:	|  |  |  |   movea.l (a0),a0
    bec8:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    becc:	|  |  |  |   movea.l (sp),a0
    bece:	|  |  |  |   move.l 36(a0),d0
    bed2:	|  |  |  |   movea.l 4(sp),a0
    bed6:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    beda:	|  |  |  |   movea.l (sp),a0
    bedc:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bee2:	|  |  |  |   movea.l 16(sp),a0
    bee6:	|  |  |  |   move.l (sp),(a0)
    bee8:	|  |  +--|-- bra.s bef8 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    beea:	|  |  |  '-> movea.l 16(sp),a0
    beee:	|  |  |      move.l (a0),d0
    bef0:	|  |  |      moveq #36,d1
    bef2:	|  |  |      add.l d0,d1
    bef4:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bef8:	|  |  '----> movea.l 16(sp),a0
    befc:	|  |         movea.l (a0),a0
    befe:	|  |         move.l 36(a0),d0
    bf02:	|  '-------- bne.w be3a <shufflePeople+0x1a>
    bf06:	|        ,-- bra.s bf0a <shufflePeople+0xea>
	if (!allPeople) return;
    bf08:	'--------|-> nop
		}
	}
}
    bf0a:	         '-> lea 20(sp),sp
    bf0e:	             rts

0000bf10 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bf10:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bf12:	       tst.l 8(sp)
    bf16:	   ,-- bgt.s bf1c <setCharacterWalkSpeed+0xc>
    bf18:	   |   clr.w d0
    bf1a:	,--|-- bra.s bf3a <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bf1c:	|  '-> move.l 12(sp),-(sp)
    bf20:	|      jsr a906 <findPerson>
    bf26:	|      addq.l #4,sp
    bf28:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bf2a:	|  ,-- bne.s bf30 <setCharacterWalkSpeed+0x20>
    bf2c:	|  |   clr.w d0
    bf2e:	+--|-- bra.s bf3a <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bf30:	|  '-> movea.l (sp),a0
    bf32:	|      move.l 8(sp),28(a0)
	return TRUE;
    bf38:	|      moveq #1,d0
}
    bf3a:	'----> addq.l #4,sp
    bf3c:	       rts

0000bf3e <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bf3e:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bf40:	       move.l 8(sp),-(sp)
    bf44:	       jsr a906 <findPerson>
    bf4a:	       addq.l #4,sp
    bf4c:	       move.l d0,(sp)
    if (thisPerson) {
    bf4e:	,----- beq.s bf6e <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bf50:	|      movea.l (sp),a0
    bf52:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bf58:	|      moveq #2,d0
    bf5a:	|      and.l 12(sp),d0
    bf5e:	|  ,-- beq.s bf6a <setPersonExtra+0x2c>
    bf60:	|  |   movea.l (sp),a0
    bf62:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bf6a:	|  '-> moveq #1,d0
    bf6c:	|  ,-- bra.s bf70 <setPersonExtra+0x32>
    }
    return FALSE;
    bf6e:	'--|-> clr.w d0
}
    bf70:	   '-> addq.l #4,sp
    bf72:	       rts

0000bf74 <setScale>:


void setScale (short int h, short int d) {
    bf74:	subq.l #4,sp
    bf76:	move.l 8(sp),d1
    bf7a:	move.l 12(sp),d0
    bf7e:	move.w d1,d1
    bf80:	move.w d1,2(sp)
    bf84:	move.w d0,d0
    bf86:	move.w d0,(sp)
	scaleHorizon = h;
    bf88:	move.w 2(sp),1c76a <scaleHorizon>
	scaleDivide = d;
    bf90:	move.w (sp),1c76c <scaleDivide>
}
    bf96:	nop
    bf98:	addq.l #4,sp
    bf9a:	rts

0000bf9c <setShown>:

void setShown (BOOL h, int ob) {
    bf9c:	    subq.l #8,sp
    bf9e:	    move.l 12(sp),d0
    bfa2:	    move.w d0,d0
    bfa4:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bfa8:	    move.l 16(sp),-(sp)
    bfac:	    jsr a906 <findPerson>
    bfb2:	    addq.l #4,sp
    bfb4:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bfb8:	,-- beq.s bfc4 <setShown+0x28>
    bfba:	|   movea.l 4(sp),a0
    bfbe:	|   move.w 2(sp),104(a0)
}
    bfc4:	'-> nop
    bfc6:	    addq.l #8,sp
    bfc8:	    rts

0000bfca <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bfca:	       subq.l #8,sp
    bfcc:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bfce:	       movea.l 16(sp),a0
    bfd2:	       move.l 92(a0),d0
    bfd6:	       move.l d0,d1
    bfd8:	       addi.l #360,d1
    bfde:	       movea.l 16(sp),a0
    bfe2:	       move.l 96(a0),d0
    bfe6:	       move.l d1,d2
    bfe8:	       sub.l d0,d2
    bfea:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bfee:	       movea.l 16(sp),a0
    bff2:	       move.l 122(a0),d0
    bff6:	   ,-- beq.s c002 <spinStep+0x38>
    bff8:	   |   movea.l 16(sp),a0
    bffc:	   |   move.l 122(a0),d0
    c000:	,--|-- bra.s c01c <spinStep+0x52>
    c002:	|  '-> movea.l 16(sp),a0
    c006:	|      movea.l 80(a0),a0
    c00a:	|      move.l 4(a0),d0
    c00e:	|      move.l d0,-(sp)
    c010:	|      pea 168 <decodeFilename+0x50>
    c014:	|      jsr 1804a <__divsi3>
    c01a:	|      addq.l #8,sp
    c01c:	'----> move.l d0,4(sp)
	while (diff > 180) {
    c020:	   ,-- bra.s c02a <spinStep+0x60>
		diff -= 360;
    c022:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    c02a:	|  '-> cmpi.l #180,8(sp)
    c032:	'----- bgt.s c022 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    c034:	       move.l 8(sp),d0
    c038:	       cmp.l 4(sp),d0
    c03c:	   ,-- blt.s c05a <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    c03e:	   |   movea.l 16(sp),a0
    c042:	   |   move.l 92(a0),d0
    c046:	   |   sub.l 4(sp),d0
    c04a:	   |   move.l d0,-(sp)
    c04c:	   |   move.l 20(sp),-(sp)
    c050:	   |   jsr c13a <turnMeAngle>
    c056:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    c058:	,--|-- bra.s c0a0 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    c05a:	|  '-> move.l 4(sp),d0
    c05e:	|      neg.l d0
    c060:	|      cmp.l 8(sp),d0
    c064:	|  ,-- blt.s c082 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    c066:	|  |   movea.l 16(sp),a0
    c06a:	|  |   move.l 92(a0),d0
    c06e:	|  |   add.l 4(sp),d0
    c072:	|  |   move.l d0,-(sp)
    c074:	|  |   move.l 20(sp),-(sp)
    c078:	|  |   jsr c13a <turnMeAngle>
    c07e:	|  |   addq.l #8,sp
}
    c080:	+--|-- bra.s c0a0 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    c082:	|  '-> movea.l 16(sp),a0
    c086:	|      move.l 96(a0),d0
    c08a:	|      move.l d0,-(sp)
    c08c:	|      move.l 20(sp),-(sp)
    c090:	|      jsr c13a <turnMeAngle>
    c096:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    c098:	|      movea.l 16(sp),a0
    c09c:	|      clr.w 66(a0)
}
    c0a0:	'----> nop
    c0a2:	       move.l (sp)+,d2
    c0a4:	       addq.l #8,sp
    c0a6:	       rts

0000c0a8 <stopPerson>:


BOOL stopPerson (int o) {
    c0a8:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    c0aa:	       move.l 8(sp),-(sp)
    c0ae:	       jsr a906 <findPerson>
    c0b4:	       addq.l #4,sp
    c0b6:	       move.l d0,(sp)
    if (moveMe)
    c0b8:	,----- beq.s c0f6 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    c0ba:	|      movea.l (sp),a0
    c0bc:	|      move.l 68(a0),d0
    c0c0:	+----- beq.s c0f6 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    c0c2:	|      movea.l (sp),a0
    c0c4:	|      move.l 68(a0),d0
    c0c8:	|      move.l d0,-(sp)
    c0ca:	|      jsr 5374 <abortFunction>
    c0d0:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    c0d2:	|      movea.l (sp),a0
    c0d4:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    c0d8:	|      movea.l (sp),a0
    c0da:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    c0de:	|      movea.l (sp),a0
    c0e0:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    c0e4:	|      clr.l -(sp)
    c0e6:	|      move.l 4(sp),-(sp)
    c0ea:	|      jsr 4516 <setFrames>
    c0f0:	|      addq.l #8,sp
            return TRUE;
    c0f2:	|      moveq #1,d0
    c0f4:	|  ,-- bra.s c0f8 <stopPerson+0x50>
        }
    return FALSE;
    c0f6:	'--|-> clr.w d0
}
    c0f8:	   '-> addq.l #4,sp
    c0fa:	       rts

0000c0fc <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    c0fc:	       subq.l #8,sp
	int total = 0;
    c0fe:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c102:	       clr.l (sp)
    c104:	   ,-- bra.s c126 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    c106:	,--|-> movea.l 12(sp),a0
    c10a:	|  |   movea.l 4(a0),a0
    c10e:	|  |   move.l (sp),d1
    c110:	|  |   move.l d1,d0
    c112:	|  |   add.l d0,d0
    c114:	|  |   add.l d1,d0
    c116:	|  |   add.l d0,d0
    c118:	|  |   add.l d0,d0
    c11a:	|  |   adda.l d0,a0
    c11c:	|  |   move.l 4(a0),d0
    c120:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c124:	|  |   addq.l #1,(sp)
    c126:	|  '-> movea.l 12(sp),a0
    c12a:	|      move.l 8(a0),d0
    c12e:	|      cmp.l (sp),d0
    c130:	'----- bgt.s c106 <timeForAnim+0xa>
	}
	return total;
    c132:	       move.l 4(sp),d0
}
    c136:	       addq.l #8,sp
    c138:	       rts

0000c13a <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    c13a:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    c13c:	       movea.l 8(sp),a0
    c140:	       movea.l 80(a0),a0
    c144:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    c148:	       movea.l 8(sp),a0
    c14c:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    c152:	       move.l (sp),-(sp)
    c154:	       pea b4 <_start+0xb4>
    c158:	       jsr 1804a <__divsi3>
    c15e:	       addq.l #8,sp
    c160:	       move.l d0,d1
    c162:	       addi.l #180,d1
    c168:	       movea.l 8(sp),a0
    c16c:	       move.l 100(a0),d0
    c170:	       add.l d1,d0
    c172:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    c176:	   ,-- bra.s c180 <turnMeAngle+0x46>
    c178:	,--|-> addi.l #-360,12(sp)
    c180:	|  '-> cmpi.l #359,12(sp)
    c188:	'----- bgt.s c178 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    c18a:	       move.l (sp),-(sp)
    c18c:	       move.l 16(sp),-(sp)
    c190:	       jsr 17fcc <__mulsi3>
    c196:	       addq.l #8,sp
    c198:	       pea 168 <decodeFilename+0x50>
    c19c:	       move.l d0,-(sp)
    c19e:	       jsr 1804a <__divsi3>
    c1a4:	       addq.l #8,sp
    c1a6:	       movea.l 8(sp),a0
    c1aa:	       move.l d0,106(a0)
}
    c1ae:	       nop
    c1b0:	       addq.l #4,sp
    c1b2:	       rts

0000c1b4 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    c1b4:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c1b6:	          move.l 8(sp),-(sp)
    c1ba:	          jsr a906 <findPerson>
    c1c0:	          addq.l #4,sp
    c1c2:	          move.l d0,(sp)
    if (thisPerson) {
    c1c4:	,-------- beq.s c224 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    c1c6:	|         movea.l (sp),a0
    c1c8:	|         move.l 68(a0),d0
    c1cc:	|     ,-- beq.s c1de <turnPersonToFace+0x2a>
    c1ce:	|     |   movea.l (sp),a0
    c1d0:	|     |   move.l 68(a0),d0
    c1d4:	|     |   move.l d0,-(sp)
    c1d6:	|     |   jsr 5374 <abortFunction>
    c1dc:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    c1de:	|     '-> movea.l (sp),a0
    c1e0:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    c1e4:	|         movea.l (sp),a0
    c1e6:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c1ea:	|         movea.l (sp),a0
    c1ec:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c1f0:	|         move.l 12(sp),-(sp)
    c1f4:	|         move.l 4(sp),-(sp)
    c1f8:	|         jsr c13a <turnMeAngle>
    c1fe:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c200:	|         movea.l 1cd2a <speech>,a0
    c206:	|         move.l (a0),d0
    c208:	|         cmp.l (sp),d0
    c20a:	|  ,----- bne.s c210 <turnPersonToFace+0x5c>
    c20c:	|  |      moveq #2,d0
    c20e:	|  |  ,-- bra.s c212 <turnPersonToFace+0x5e>
    c210:	|  '--|-> moveq #0,d0
    c212:	|     '-> move.l d0,-(sp)
    c214:	|         move.l 4(sp),-(sp)
    c218:	|         jsr 4516 <setFrames>
    c21e:	|         addq.l #8,sp
        return TRUE;
    c220:	|         moveq #1,d0
    c222:	|     ,-- bra.s c226 <turnPersonToFace+0x72>
    }
    return FALSE;
    c224:	'-----|-> clr.w d0
}
    c226:	      '-> addq.l #4,sp
    c228:	          rts

0000c22a <walkAllPeople>:

void walkAllPeople() {
    c22a:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c22c:	             move.l 1ce3a <allPeople>,(sp)

	while (thisPerson) {
    c232:	   ,-------- bra.s c2a2 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c234:	,--|-------> movea.l (sp),a0
    c236:	|  |         move.w 64(a0),d0
    c23a:	|  |     ,-- beq.s c24e <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c23c:	|  |     |   pea 1 <_start+0x1>
    c240:	|  |     |   move.l 4(sp),-(sp)
    c244:	|  |     |   jsr c2ae <walkMe>
    c24a:	|  |     |   addq.l #8,sp
    c24c:	|  |  ,--|-- bra.s c26e <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c24e:	|  |  |  '-> movea.l (sp),a0
    c250:	|  |  |      move.w 66(a0),d0
    c254:	|  |  +----- beq.s c26e <walkAllPeople+0x44>
			spinStep(thisPerson);
    c256:	|  |  |      move.l (sp),-(sp)
    c258:	|  |  |      jsr bfca <spinStep>
    c25e:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c260:	|  |  |      clr.l -(sp)
    c262:	|  |  |      move.l 4(sp),-(sp)
    c266:	|  |  |      jsr 4516 <setFrames>
    c26c:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c26e:	|  |  '----> movea.l (sp),a0
    c270:	|  |         move.w 64(a0),d0
    c274:	|  |     ,-- bne.s c29c <walkAllPeople+0x72>
    c276:	|  |     |   movea.l (sp),a0
    c278:	|  |     |   move.w 66(a0),d0
    c27c:	|  |     +-- bne.s c29c <walkAllPeople+0x72>
    c27e:	|  |     |   movea.l (sp),a0
    c280:	|  |     |   move.l 68(a0),d0
    c284:	|  |     +-- beq.s c29c <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c286:	|  |     |   movea.l (sp),a0
    c288:	|  |     |   move.l 68(a0),d0
    c28c:	|  |     |   move.l d0,-(sp)
    c28e:	|  |     |   jsr 74d8 <restartFunction>
    c294:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c296:	|  |     |   movea.l (sp),a0
    c298:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c29c:	|  |     '-> movea.l (sp),a0
    c29e:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c2a2:	|  '-------> tst.l (sp)
    c2a4:	'----------- bne.s c234 <walkAllPeople+0xa>
	}
}
    c2a6:	             nop
    c2a8:	             nop
    c2aa:	             addq.l #4,sp
    c2ac:	             rts

0000c2ae <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c2ae:	                lea -20(sp),sp
    c2b2:	                move.l d3,-(sp)
    c2b4:	                move.l d2,-(sp)
    c2b6:	                move.l 36(sp),d0
    c2ba:	                move.w d0,d0
    c2bc:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c2c0:	                cmpi.w #-1,10(sp)
    c2c6:	,-------------- bne.s c2ce <walkMe+0x20>
    c2c8:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c2ce:	>-------------> movea.l 32(sp),a0
    c2d2:	|               move.l 48(a0),d0
    c2d6:	|               move.l d0,-(sp)
    c2d8:	|               jsr 17a72 <__floatsisf>
    c2de:	|               addq.l #4,sp
    c2e0:	|               move.l d0,d1
    c2e2:	|               movea.l 32(sp),a0
    c2e6:	|               move.l (a0),d0
    c2e8:	|               move.l d0,-(sp)
    c2ea:	|               move.l d1,-(sp)
    c2ec:	|               jsr 17d66 <__subsf3>
    c2f2:	|               addq.l #8,sp
    c2f4:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c2f8:	|               movea.l 32(sp),a0
    c2fc:	|               move.l 52(a0),d0
    c300:	|               move.l d0,-(sp)
    c302:	|               jsr 17a72 <__floatsisf>
    c308:	|               addq.l #4,sp
    c30a:	|               move.l d0,d1
    c30c:	|               movea.l 32(sp),a0
    c310:	|               move.l 4(a0),d0
    c314:	|               move.l d0,-(sp)
    c316:	|               move.l d1,-(sp)
    c318:	|               jsr 17d66 <__subsf3>
    c31e:	|               addq.l #8,sp
    c320:	|               move.l d0,-(sp)
    c322:	|               move.l d0,-(sp)
    c324:	|               jsr 1782e <__addsf3>
    c32a:	|               addq.l #8,sp
    c32c:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c330:	|               movea.l 32(sp),a0
    c334:	|               move.l 32(a0),d2
    c338:	|               movea.l 32(sp),a0
    c33c:	|               move.l 28(a0),d0
    c340:	|               move.l d0,-(sp)
    c342:	|               jsr 17a72 <__floatsisf>
    c348:	|               addq.l #4,sp
    c34a:	|               move.l d0,-(sp)
    c34c:	|               move.l d2,-(sp)
    c34e:	|               jsr 17b24 <__mulsf3>
    c354:	|               addq.l #8,sp
    c356:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c35a:	|               move.l 24(sp),-(sp)
    c35e:	|               jsr 17994 <__extendsfdf2>
    c364:	|               addq.l #4,sp
    c366:	|               move.l #-1717986918,-(sp)
    c36c:	|               move.l #1070176665,-(sp)
    c372:	|               move.l d1,-(sp)
    c374:	|               move.l d0,-(sp)
    c376:	|               jsr 17c4a <__ltdf2>
    c37c:	|               lea 16(sp),sp
    c380:	|               tst.l d0
    c382:	|           ,-- bge.s c38c <walkMe+0xde>
    c384:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c38c:	|           '-> move.l 20(sp),-(sp)
    c390:	|               jsr 17a0a <__fixsfsi>
    c396:	|               addq.l #4,sp
    c398:	|               move.l d0,-(sp)
    c39a:	|               jsr 94f6 <TF_abs>
    c3a0:	|               addq.l #4,sp
    c3a2:	|               move.l d0,d2
    c3a4:	|               move.l 16(sp),-(sp)
    c3a8:	|               jsr 17a0a <__fixsfsi>
    c3ae:	|               addq.l #4,sp
    c3b0:	|               move.l d0,-(sp)
    c3b2:	|               jsr 94f6 <TF_abs>
    c3b8:	|               addq.l #4,sp
    c3ba:	|               cmp.l d2,d0
    c3bc:	|        ,----- bgt.s c3e0 <walkMe+0x132>
    c3be:	|        |      move.l 20(sp),-(sp)
    c3c2:	|        |      jsr 17a0a <__fixsfsi>
    c3c8:	|        |      addq.l #4,sp
    c3ca:	|        |      move.l d0,-(sp)
    c3cc:	|        |      jsr 94f6 <TF_abs>
    c3d2:	|        |      addq.l #4,sp
    c3d4:	|        |      move.l d0,-(sp)
    c3d6:	|        |      jsr 17a72 <__floatsisf>
    c3dc:	|        |      addq.l #4,sp
    c3de:	|        |  ,-- bra.s c400 <walkMe+0x152>
    c3e0:	|        '--|-> move.l 16(sp),-(sp)
    c3e4:	|           |   jsr 17a0a <__fixsfsi>
    c3ea:	|           |   addq.l #4,sp
    c3ec:	|           |   move.l d0,-(sp)
    c3ee:	|           |   jsr 94f6 <TF_abs>
    c3f4:	|           |   addq.l #4,sp
    c3f6:	|           |   move.l d0,-(sp)
    c3f8:	|           |   jsr 17a72 <__floatsisf>
    c3fe:	|           |   addq.l #4,sp
    c400:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c404:	|               move.l 12(sp),-(sp)
    c408:	|               jsr 17a0a <__fixsfsi>
    c40e:	|               addq.l #4,sp
    c410:	|               move.l d0,-(sp)
    c412:	|               jsr 94f6 <TF_abs>
    c418:	|               addq.l #4,sp
    c41a:	|               move.l d0,-(sp)
    c41c:	|               jsr 17a72 <__floatsisf>
    c422:	|               addq.l #4,sp
    c424:	|               move.l d0,-(sp)
    c426:	|               move.l 28(sp),-(sp)
    c42a:	|               jsr 17c98 <__ltsf2>
    c430:	|               addq.l #8,sp
    c432:	|               tst.l d0
    c434:	|        ,----- bge.w c4e6 <walkMe+0x238>
			if (thisPerson->spinning) {
    c438:	|        |      movea.l 32(sp),a0
    c43c:	|        |      move.w 66(a0),d0
    c440:	|        |  ,-- beq.s c45e <walkMe+0x1b0>
				spinStep(thisPerson);
    c442:	|        |  |   move.l 32(sp),-(sp)
    c446:	|        |  |   jsr bfca <spinStep>
    c44c:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c44e:	|        |  |   pea 1 <_start+0x1>
    c452:	|        |  |   move.l 36(sp),-(sp)
    c456:	|        |  |   jsr 4516 <setFrames>
    c45c:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c45e:	|        |  '-> move.l 24(sp),-(sp)
    c462:	|        |      move.l 16(sp),-(sp)
    c466:	|        |      jsr 17928 <__divsf3>
    c46c:	|        |      addq.l #8,sp
    c46e:	|        |      move.l d0,24(sp)
			if (move)
    c472:	|        |      tst.w 10(sp)
    c476:	|        |  ,-- beq.s c4e0 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c478:	|        |  |   movea.l 32(sp),a0
    c47c:	|        |  |   move.l 4(a0),d2
    c480:	|        |  |   move.l 24(sp),d0
    c484:	|        |  |   move.l d0,-(sp)
    c486:	|        |  |   move.l d0,-(sp)
    c488:	|        |  |   jsr 1782e <__addsf3>
    c48e:	|        |  |   addq.l #8,sp
    c490:	|        |  |   move.l d0,-(sp)
    c492:	|        |  |   move.l 20(sp),-(sp)
    c496:	|        |  |   jsr 17928 <__divsf3>
    c49c:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c49e:	|        |  |   move.l d0,-(sp)
    c4a0:	|        |  |   move.l d2,-(sp)
    c4a2:	|        |  |   jsr 1782e <__addsf3>
    c4a8:	|        |  |   addq.l #8,sp
    c4aa:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c4ac:	|        |  |   movea.l 32(sp),a0
    c4b0:	|        |  |   move.l (a0),d3
    c4b2:	|        |  |   move.l 24(sp),-(sp)
    c4b6:	|        |  |   move.l 24(sp),-(sp)
    c4ba:	|        |  |   jsr 17928 <__divsf3>
    c4c0:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c4c2:	|        |  |   move.l d0,-(sp)
    c4c4:	|        |  |   move.l d3,-(sp)
    c4c6:	|        |  |   jsr 1782e <__addsf3>
    c4cc:	|        |  |   addq.l #8,sp
    c4ce:	|        |  |   move.l d2,-(sp)
    c4d0:	|        |  |   move.l d0,-(sp)
    c4d2:	|        |  |   move.l 40(sp),-(sp)
    c4d6:	|        |  |   jsr b0b0 <moveAndScale>
    c4dc:	|        |  |   lea 12(sp),sp
			return TRUE;
    c4e0:	|        |  '-> moveq #1,d0
    c4e2:	|  ,-----|----- bra.w c594 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c4e6:	|  |     '----> movea.l 32(sp),a0
    c4ea:	|  |            move.l 56(a0),d0
    c4ee:	|  |            moveq #-1,d1
    c4f0:	|  |            cmp.l d0,d1
    c4f2:	|  |        ,-- bne.s c52a <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c4f4:	|  |        |   movea.l 32(sp),a0
    c4f8:	|  |        |   move.l 110(a0),d0
    c4fc:	|  |        |   moveq #-1,d1
    c4fe:	|  |        |   cmp.l d0,d1
    c500:	|  |  ,-----|-- beq.s c53e <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c502:	|  |  |     |   movea.l 32(sp),a0
    c506:	|  |  |     |   move.l 110(a0),d0
    c50a:	|  |  |     |   movea.l 32(sp),a0
    c50e:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c512:	|  |  |     |   movea.l 32(sp),a0
    c516:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c51c:	|  |  |     |   move.l 32(sp),-(sp)
    c520:	|  |  |     |   jsr bfca <spinStep>
    c526:	|  |  |     |   addq.l #4,sp
			}
			break;
    c528:	|  |  +-----|-- bra.s c53e <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c52a:	|  |  |     '-> move.l 32(sp),-(sp)
    c52e:	|  |  |         jsr 9c68 <doBorderStuff>
    c534:	|  |  |         addq.l #4,sp
    c536:	|  |  |         tst.w d0
    c538:	|  |  |  ,----- beq.s c542 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c53a:	'--|--|--|----- bra.w c2ce <walkMe+0x20>
			break;
    c53e:	   |  '--|----> nop
    c540:	   |     |  ,-- bra.s c544 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c542:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c544:	   |        '-> movea.l 32(sp),a0
    c548:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c54c:	   |            clr.l -(sp)
    c54e:	   |            move.l 36(sp),-(sp)
    c552:	   |            jsr 4516 <setFrames>
    c558:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c55a:	   |            movea.l 32(sp),a0
    c55e:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c562:	   |            move.l d0,-(sp)
    c564:	   |            jsr 17a72 <__floatsisf>
    c56a:	   |            addq.l #4,sp
    c56c:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c56e:	   |            movea.l 32(sp),a0
    c572:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c576:	   |            move.l d0,-(sp)
    c578:	   |            jsr 17a72 <__floatsisf>
    c57e:	   |            addq.l #4,sp
    c580:	   |            move.l d2,-(sp)
    c582:	   |            move.l d0,-(sp)
    c584:	   |            move.l 40(sp),-(sp)
    c588:	   |            jsr b0b0 <moveAndScale>
    c58e:	   |            lea 12(sp),sp
	return FALSE;
    c592:	   |            clr.w d0
}
    c594:	   '----------> move.l (sp)+,d2
    c596:	                move.l (sp)+,d3
    c598:	                lea 20(sp),sp
    c59c:	                rts

0000c59e <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c59e:	       subq.l #8,sp
    c5a0:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c5a2:	   ,-- bra.s c5d2 <clearStackLib+0x34>
		k = stackLib;
    c5a4:	,--|-> move.l 1ce66 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c5ac:	|  |   movea.l 1ce66 <stackLib>,a0
    c5b2:	|  |   move.l 4(a0),d0
    c5b6:	|  |   move.l d0,1ce66 <stackLib>
		FreeVec(k);
    c5bc:	|  |   move.l 8(sp),4(sp)
    c5c2:	|  |   move.l 1cdda <SysBase>,d0
    c5c8:	|  |   movea.l d0,a6
    c5ca:	|  |   movea.l 4(sp),a1
    c5ce:	|  |   jsr -690(a6)
	while (stackLib) {
    c5d2:	|  '-> move.l 1ce66 <stackLib>,d0
    c5d8:	'----- bne.s c5a4 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c5da:	       clr.l 1ce62 <stackLibTotal>
}
    c5e0:	       nop
    c5e2:	       movea.l (sp)+,a6
    c5e4:	       addq.l #8,sp
    c5e6:	       rts

0000c5e8 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c5e8:	          lea -128(sp),sp
    c5ec:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c5f0:	      ,-- bra.s c602 <loadGame+0x1a>
    c5f2:	   ,--|-> move.l 1cd72 <allRunningFunctions>,d0
    c5f8:	   |  |   move.l d0,-(sp)
    c5fa:	   |  |   jsr 63a8 <finishFunction>
    c600:	   |  |   addq.l #4,sp
    c602:	   |  '-> move.l 1cd72 <allRunningFunctions>,d0
    c608:	   '----- bne.s c5f2 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c60a:	          pea 1ce6a <ssgVersion>
    c610:	          pea 196d1 <PutChar+0x15ef>
    c616:	          pea 41 <_start+0x41>
    c61a:	          pea 53 <_start+0x53>
    c61e:	          move.l 160(sp),-(sp)
    c622:	          jsr 7118 <openAndVerify>
    c628:	          lea 20(sp),sp
    c62c:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c630:	      ,-- bne.s c638 <loadGame+0x50>
    c632:	      |   clr.w d0
    c634:	,-----|-- bra.w c8de <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c638:	|     '-> move.l 112(sp),108(sp)
    c63e:	|         lea 140(sp),a0
    c642:	|         lea -126(a0),a0
    c646:	|         move.l a0,120(sp)
    c64a:	|         moveq #8,d0
    c64c:	|         move.l d0,116(sp)
    c650:	|         move.l 1cde2 <DOSBase>,d0
    c656:	|         movea.l d0,a6
    c658:	|         move.l 108(sp),d1
    c65c:	|         move.l 120(sp),d2
    c660:	|         move.l 116(sp),d3
    c664:	|         jsr -42(a6)
    c668:	|         move.l d0,132(sp)
    c66c:	|         move.l 132(sp),d0
    c670:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c674:	|         moveq #8,d0
    c676:	|         cmp.l 128(sp),d0
    c67a:	|     ,-- beq.s c68a <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c67c:	|     |   pea 196f2 <PutChar+0x1610>
    c682:	|     |   jsr 17640 <KPrintF>
    c688:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c68a:	|     '-> move.l 14(sp),d1
    c68e:	|         move.l 1cd7c <fileTime>,d0
    c694:	|         cmp.l d1,d0
    c696:	|     ,-- bne.s c6a6 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c698:	|     |   move.l 18(sp),d1
    c69c:	|     |   move.l 1cd80 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c6a2:	|     |   cmp.l d1,d0
    c6a4:	|  ,--|-- beq.s c6c6 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c6a6:	|  |  '-> move.l 144(sp),-(sp)
    c6aa:	|  |      pea 1970e <PutChar+0x162c>
    c6b0:	|  |      pea 197d5 <PutChar+0x16f3>
    c6b6:	|  |      jsr 17640 <KPrintF>
    c6bc:	|  |      lea 12(sp),sp
		return FALSE; 
    c6c0:	|  |      clr.w d0
    c6c2:	+--|----- bra.w c8de <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c6c6:	|  '----> move.l 112(sp),124(sp)
    c6cc:	|         move.l 1cde2 <DOSBase>,d0
    c6d2:	|         movea.l d0,a6
    c6d4:	|         move.l 124(sp),d1
    c6d8:	|         jsr -306(a6)
    c6dc:	|         move.l d0,136(sp)
    c6e0:	|         move.l 136(sp),d0
    c6e4:	|         move.l d0,d0
    c6e6:	|         move.w d0,1c634 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c6ec:	|         move.l 112(sp),100(sp)
    c6f2:	|         move.l 1cde2 <DOSBase>,d0
    c6f8:	|         movea.l d0,a6
    c6fa:	|         move.l 100(sp),d1
    c6fe:	|         jsr -306(a6)
    c702:	|         move.l d0,96(sp)
    c706:	|         move.l 96(sp),d0
    c70a:	|         move.l d0,d0
    c70c:	|         move.w d0,1cd7a <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c712:	|         move.l 112(sp),92(sp)
    c718:	|         move.l 1cde2 <DOSBase>,d0
    c71e:	|         movea.l d0,a6
    c720:	|         move.l 92(sp),d1
    c724:	|         jsr -306(a6)
    c728:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c72c:	|         move.l 112(sp),84(sp)
    c732:	|         move.l 1cde2 <DOSBase>,d0
    c738:	|         movea.l d0,a6
    c73a:	|         move.l 84(sp),d1
    c73e:	|         jsr -306(a6)
    c742:	|         move.l d0,80(sp)
    c746:	|         move.l 80(sp),d0
    c74a:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c74e:	|     ,-- beq.s c782 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c750:	|     |   move.l 112(sp),-(sp)
    c754:	|     |   jsr 6bc <get2bytes>
    c75a:	|     |   addq.l #4,sp
    c75c:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c760:	|     |   move.l 112(sp),-(sp)
    c764:	|     |   jsr 6bc <get2bytes>
    c76a:	|     |   addq.l #4,sp
    c76c:	|     |   move.l d0,1cece <fontHeight>
		charOrder = readString(fp);		
    c772:	|     |   move.l 112(sp),-(sp)
    c776:	|     |   jsr b02 <readString>
    c77c:	|     |   addq.l #4,sp
    c77e:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c782:	|     '-> move.l 104(sp),70(sp)
    c788:	|         move.l 1cdda <SysBase>,d0
    c78e:	|         movea.l d0,a6
    c790:	|         movea.l 70(sp),a1
    c794:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c798:	|         move.l 112(sp),-(sp)
    c79c:	|         jsr 854 <getSigned>
    c7a2:	|         addq.l #4,sp
    c7a4:	|         move.w d0,1ccdc <fontSpace>

	killAllPeople ();
    c7aa:	|         jsr ad1a <killAllPeople>
	killAllRegions ();
    c7b0:	|         jsr 15e50 <killAllRegions>

	int camerX = get2bytes (fp);
    c7b6:	|         move.l 112(sp),-(sp)
    c7ba:	|         jsr 6bc <get2bytes>
    c7c0:	|         addq.l #4,sp
    c7c2:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c7c6:	|         move.l 112(sp),-(sp)
    c7ca:	|         jsr 6bc <get2bytes>
    c7d0:	|         addq.l #4,sp
    c7d2:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c7d6:	|         move.l 112(sp),-(sp)
    c7da:	|         jsr 7d8 <getFloat>
    c7e0:	|         addq.l #4,sp
    c7e2:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c7e6:	|         move.l 112(sp),54(sp)
    c7ec:	|         move.l 1cde2 <DOSBase>,d0
    c7f2:	|         movea.l d0,a6
    c7f4:	|         move.l 54(sp),d1
    c7f8:	|         jsr -306(a6)
    c7fc:	|         move.l d0,50(sp)
    c800:	|         move.l 50(sp),d0
    c804:	|         move.l d0,d0
    c806:	|         move.b d0,1c752 <brightnessLevel>

	loadHandlers (fp);
    c80c:	|         move.l 112(sp),-(sp)
    c810:	|         jsr 7078 <loadHandlers>
    c816:	|         addq.l #4,sp
	loadRegions (fp);
    c818:	|         move.l 112(sp),-(sp)
    c81c:	|         jsr 15eac <loadRegions>
    c822:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c824:	|         moveq #12,d0
    c826:	|         move.l d0,46(sp)
    c82a:	|         clr.l 42(sp)
    c82e:	|         move.l 1cdda <SysBase>,d0
    c834:	|         movea.l d0,a6
    c836:	|         move.l 46(sp),d0
    c83a:	|         move.l 42(sp),d1
    c83e:	|         jsr -684(a6)
    c842:	|         move.l d0,38(sp)
    c846:	|         move.l 38(sp),d0
    c84a:	|         move.l d0,1ccde <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c850:	|         move.l 1ccde <mouseCursorAnim>,d0
    c856:	|     ,-- bne.s c86a <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c858:	|     |   pea 197df <PutChar+0x16fd>
    c85e:	|     |   jsr 17640 <KPrintF>
    c864:	|     |   addq.l #4,sp
		return FALSE;
    c866:	|     |   clr.w d0
    c868:	+-----|-- bra.s c8de <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c86a:	|     '-> jsr d70e <nosnapshot>
	if (FGetC (fp)) {
    c870:	|         move.l 112(sp),34(sp)
    c876:	|         move.l 1cde2 <DOSBase>,d0
    c87c:	|         movea.l d0,a6
    c87e:	|         move.l 34(sp),d1
    c882:	|         jsr -306(a6)
    c886:	|         move.l d0,30(sp)
    c88a:	|         move.l 30(sp),d0
    c88e:	|     ,-- beq.s c8a4 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c890:	|     |   move.l 112(sp),-(sp)
    c894:	|     |   jsr d78e <restoreSnapshot>
    c89a:	|     |   addq.l #4,sp
    c89c:	|     |   tst.w d0
    c89e:	|     +-- bne.s c8a4 <loadGame+0x2bc>
    c8a0:	|     |   clr.w d0
    c8a2:	+-----|-- bra.s c8de <loadGame+0x2f6>
	}

	Close (fp);
    c8a4:	|     '-> move.l 112(sp),26(sp)
    c8aa:	|         move.l 1cde2 <DOSBase>,d0
    c8b0:	|         movea.l d0,a6
    c8b2:	|         move.l 26(sp),d1
    c8b6:	|         jsr -36(a6)
    c8ba:	|         move.l d0,22(sp)
	clearStackLib ();
    c8be:	|         jsr c59e <clearStackLib>

	cameraX = camerX;
    c8c4:	|         move.l 66(sp),1ce90 <cameraX>
	cameraY = camerY;
    c8cc:	|         move.l 62(sp),1ce94 <cameraY>
	cameraZoom = camerZ;
    c8d4:	|         move.l 58(sp),1c776 <cameraZoom>

	return TRUE;
    c8dc:	|         moveq #1,d0
}
    c8de:	'-------> movem.l (sp)+,d2-d3/a6
    c8e2:	          lea 128(sp),sp
    c8e6:	          rts

0000c8e8 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c8e8:	   ,-> lea -64(sp),sp
    c8ec:	   |   move.l a6,-(sp)
    c8ee:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c8f0:	   |   movea.l 76(sp),a0
    c8f4:	   |   move.l (a0),d0
    c8f6:	   |   move.l 80(sp),-(sp)
    c8fa:	   |   move.l d0,-(sp)
    c8fc:	   |   jsr 8d0 <put2bytes>
    c902:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c904:	   |   movea.l 76(sp),a0
    c908:	   |   move.l 40(a0),d0
    c90c:	,--|-- beq.s c948 <saveFunction+0x60>
		FPutC (fp, 1);
    c90e:	|  |   move.l 80(sp),52(sp)
    c914:	|  |   moveq #1,d0
    c916:	|  |   move.l d0,48(sp)
    c91a:	|  |   move.l 1cde2 <DOSBase>,d0
    c920:	|  |   movea.l d0,a6
    c922:	|  |   move.l 52(sp),d1
    c926:	|  |   move.l 48(sp),d2
    c92a:	|  |   jsr -312(a6)
    c92e:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c932:	|  |   movea.l 76(sp),a0
    c936:	|  |   move.l 40(a0),d0
    c93a:	|  |   move.l 80(sp),-(sp)
    c93e:	|  |   move.l d0,-(sp)
    c940:	|  '-- jsr c8e8 <saveFunction>(pc)
    c944:	|      addq.l #8,sp
    c946:	|  ,-- bra.s c96a <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c948:	'--|-> move.l 80(sp),64(sp)
    c94e:	   |   clr.l 60(sp)
    c952:	   |   move.l 1cde2 <DOSBase>,d0
    c958:	   |   movea.l d0,a6
    c95a:	   |   move.l 64(sp),d1
    c95e:	   |   move.l 60(sp),d2
    c962:	   |   jsr -312(a6)
    c966:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c96a:	   '-> movea.l 76(sp),a0
    c96e:	       move.l 12(a0),d0
    c972:	       move.l 80(sp),-(sp)
    c976:	       move.l d0,-(sp)
    c978:	       jsr 958 <put4bytes>
    c97e:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c980:	       movea.l 76(sp),a0
    c984:	       move.l 36(a0),d0
    c988:	       move.l 80(sp),-(sp)
    c98c:	       move.l d0,-(sp)
    c98e:	       jsr 8d0 <put2bytes>
    c994:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c996:	       move.l 80(sp),40(sp)
    c99c:	       movea.l 76(sp),a0
    c9a0:	       move.w 54(a0),d0
    c9a4:	       movea.w d0,a0
    c9a6:	       move.l a0,36(sp)
    c9aa:	       move.l 1cde2 <DOSBase>,d0
    c9b0:	       movea.l d0,a6
    c9b2:	       move.l 40(sp),d1
    c9b6:	       move.l 36(sp),d2
    c9ba:	       jsr -312(a6)
    c9be:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c9c2:	       move.l 80(sp),28(sp)
    c9c8:	       movea.l 76(sp),a0
    c9cc:	       move.w 48(a0),d0
    c9d0:	       movea.w d0,a0
    c9d2:	       move.l a0,24(sp)
    c9d6:	       move.l 1cde2 <DOSBase>,d0
    c9dc:	       movea.l d0,a6
    c9de:	       move.l 28(sp),d1
    c9e2:	       move.l 24(sp),d2
    c9e6:	       jsr -312(a6)
    c9ea:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c9ee:	       move.l 80(sp),16(sp)
    c9f4:	       movea.l 76(sp),a0
    c9f8:	       move.w 50(a0),d0
    c9fc:	       movea.w d0,a0
    c9fe:	       move.l a0,12(sp)
    ca02:	       move.l 1cde2 <DOSBase>,d0
    ca08:	       movea.l d0,a6
    ca0a:	       move.l 16(sp),d1
    ca0e:	       move.l 12(sp),d2
    ca12:	       jsr -312(a6)
    ca16:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    ca1a:	       moveq #28,d0
    ca1c:	       add.l 76(sp),d0
    ca20:	       move.l 80(sp),-(sp)
    ca24:	       move.l d0,-(sp)
    ca26:	       jsr d140 <saveVariable>
    ca2c:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    ca2e:	       movea.l 76(sp),a0
    ca32:	       move.b 56(a0),d0
    ca36:	   ,-- beq.s ca46 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    ca38:	   |   pea 19800 <PutChar+0x171e>
    ca3e:	   |   jsr 17640 <KPrintF>
    ca44:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    ca46:	   '-> movea.l 76(sp),a0
    ca4a:	       move.l 24(a0),d0
    ca4e:	       move.l 80(sp),-(sp)
    ca52:	       move.l d0,-(sp)
    ca54:	       jsr cfb4 <saveStack>
    ca5a:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    ca5c:	       clr.l 68(sp)
    ca60:	   ,-- bra.s ca84 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    ca62:	,--|-> movea.l 76(sp),a0
    ca66:	|  |   move.l 20(a0),d1
    ca6a:	|  |   move.l 68(sp),d0
    ca6e:	|  |   lsl.l #3,d0
    ca70:	|  |   add.l d1,d0
    ca72:	|  |   move.l 80(sp),-(sp)
    ca76:	|  |   move.l d0,-(sp)
    ca78:	|  |   jsr d140 <saveVariable>
    ca7e:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    ca80:	|  |   addq.l #1,68(sp)
    ca84:	|  '-> movea.l 76(sp),a0
    ca88:	|      move.l 8(a0),d0
    ca8c:	|      cmp.l 68(sp),d0
    ca90:	'----- bgt.s ca62 <saveFunction+0x17a>
	}
}
    ca92:	       nop
    ca94:	       nop
    ca96:	       move.l (sp)+,d2
    ca98:	       movea.l (sp)+,a6
    ca9a:	       lea 64(sp),sp
    ca9e:	       rts

0000caa0 <saveGame>:

BOOL saveGame (char * fname) {
    caa0:	          lea -248(sp),sp
    caa4:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    caa8:	          move.l 264(sp),244(sp)
    caae:	          move.l #1006,240(sp)
    cab6:	          move.l 1cde2 <DOSBase>,d0
    cabc:	          movea.l d0,a6
    cabe:	          move.l 244(sp),d1
    cac2:	          move.l 240(sp),d2
    cac6:	          jsr -30(a6)
    caca:	          move.l d0,236(sp)
    cace:	          move.l 236(sp),d0
    cad2:	          move.l d0,232(sp)
	if (fp == NULL) {
    cad6:	      ,-- bne.s caec <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    cad8:	      |   pea 19822 <PutChar+0x1740>
    cade:	      |   jsr 17640 <KPrintF>
    cae4:	      |   addq.l #4,sp
		return FALSE;
    cae6:	      |   clr.w d0
    cae8:	,-----|-- bra.w cfaa <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    caec:	|     '-> move.l 232(sp),228(sp)
    caf2:	|         move.l #104511,224(sp)
    cafa:	|         moveq #6,d0
    cafc:	|         move.l d0,220(sp)
    cb00:	|         move.l 1cde2 <DOSBase>,d0
    cb06:	|         movea.l d0,a6
    cb08:	|         move.l 228(sp),d1
    cb0c:	|         move.l 224(sp),d2
    cb10:	|         move.l 220(sp),d3
    cb14:	|         jsr -48(a6)
    cb18:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    cb1c:	|         move.l 232(sp),212(sp)
    cb22:	|         clr.l 208(sp)
    cb26:	|         move.l 1cde2 <DOSBase>,d0
    cb2c:	|         movea.l d0,a6
    cb2e:	|         move.l 212(sp),d1
    cb32:	|         move.l 208(sp),d2
    cb36:	|         jsr -312(a6)
    cb3a:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    cb3e:	|         move.l 232(sp),200(sp)
    cb44:	|         clr.l 196(sp)
    cb48:	|         move.l 1cde2 <DOSBase>,d0
    cb4e:	|         movea.l d0,a6
    cb50:	|         move.l 200(sp),d1
    cb54:	|         move.l 196(sp),d2
    cb58:	|         jsr -312(a6)
    cb5c:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    cb60:	|         move.l 232(sp),188(sp)
    cb66:	|         moveq #2,d0
    cb68:	|         move.l d0,184(sp)
    cb6c:	|         move.l 1cde2 <DOSBase>,d0
    cb72:	|         movea.l d0,a6
    cb74:	|         move.l 188(sp),d1
    cb78:	|         move.l 184(sp),d2
    cb7c:	|         jsr -312(a6)
    cb80:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    cb84:	|         move.l 232(sp),176(sp)
    cb8a:	|         moveq #2,d0
    cb8c:	|         move.l d0,172(sp)
    cb90:	|         move.l 1cde2 <DOSBase>,d0
    cb96:	|         movea.l d0,a6
    cb98:	|         move.l 176(sp),d1
    cb9c:	|         move.l 172(sp),d2
    cba0:	|         jsr -312(a6)
    cba4:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    cba8:	|         move.l 232(sp),164(sp)
    cbae:	|         move.l #118140,160(sp)
    cbb6:	|         moveq #8,d0
    cbb8:	|         move.l d0,156(sp)
    cbbc:	|         move.l 1cde2 <DOSBase>,d0
    cbc2:	|         movea.l d0,a6
    cbc4:	|         move.l 164(sp),d1
    cbc8:	|         move.l 160(sp),d2
    cbcc:	|         move.l 156(sp),d3
    cbd0:	|         jsr -48(a6)
    cbd4:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    cbd8:	|         move.l 232(sp),148(sp)
    cbde:	|         move.w 1c634 <allowAnyFilename>,d0
    cbe4:	|         movea.w d0,a0
    cbe6:	|         move.l a0,144(sp)
    cbea:	|         move.l 1cde2 <DOSBase>,d0
    cbf0:	|         movea.l d0,a6
    cbf2:	|         move.l 148(sp),d1
    cbf6:	|         move.l 144(sp),d2
    cbfa:	|         jsr -312(a6)
    cbfe:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    cc02:	|         move.l 232(sp),136(sp)
    cc08:	|         move.w 1cd7a <captureAllKeys>,d0
    cc0e:	|         movea.w d0,a0
    cc10:	|         move.l a0,132(sp)
    cc14:	|         move.l 1cde2 <DOSBase>,d0
    cc1a:	|         movea.l d0,a6
    cc1c:	|         move.l 136(sp),d1
    cc20:	|         move.l 132(sp),d2
    cc24:	|         jsr -312(a6)
    cc28:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    cc2c:	|         move.l 232(sp),124(sp)
    cc32:	|         moveq #1,d0
    cc34:	|         move.l d0,120(sp)
    cc38:	|         move.l 1cde2 <DOSBase>,d0
    cc3e:	|         movea.l d0,a6
    cc40:	|         move.l 124(sp),d1
    cc44:	|         move.l 120(sp),d2
    cc48:	|         jsr -312(a6)
    cc4c:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    cc50:	|         move.l 232(sp),112(sp)
    cc56:	|         move.l 1cede <fontTableSize>,d0
    cc5c:	|         sgt d0
    cc5e:	|         neg.b d0
    cc60:	|         move.b d0,d0
    cc62:	|         andi.l #255,d0
    cc68:	|         move.l d0,108(sp)
    cc6c:	|         move.l 1cde2 <DOSBase>,d0
    cc72:	|         movea.l d0,a6
    cc74:	|         move.l 112(sp),d1
    cc78:	|         move.l 108(sp),d2
    cc7c:	|         jsr -312(a6)
    cc80:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    cc84:	|         move.l 1cede <fontTableSize>,d0
    cc8a:	|     ,-- ble.s ccc8 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    cc8c:	|     |   move.l 1ced2 <loadedFontNum>,d0
    cc92:	|     |   move.l 232(sp),-(sp)
    cc96:	|     |   move.l d0,-(sp)
    cc98:	|     |   jsr 8d0 <put2bytes>
    cc9e:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    cca0:	|     |   move.l 1cece <fontHeight>,d0
    cca6:	|     |   move.l 232(sp),-(sp)
    ccaa:	|     |   move.l d0,-(sp)
    ccac:	|     |   jsr 8d0 <put2bytes>
    ccb2:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    ccb4:	|     |   move.l 1ced6 <fontOrderString>,d0
    ccba:	|     |   move.l 232(sp),-(sp)
    ccbe:	|     |   move.l d0,-(sp)
    ccc0:	|     |   jsr bd8 <writeString>
    ccc6:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    ccc8:	|     '-> move.w 1ccdc <fontSpace>,d0
    ccce:	|         movea.w d0,a0
    ccd0:	|         move.l 232(sp),-(sp)
    ccd4:	|         move.l a0,-(sp)
    ccd6:	|         jsr a9c <putSigned>
    ccdc:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    ccde:	|         move.l 1ce90 <cameraX>,d0
    cce4:	|         move.l 232(sp),-(sp)
    cce8:	|         move.l d0,-(sp)
    ccea:	|         jsr 8d0 <put2bytes>
    ccf0:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    ccf2:	|         move.l 1ce94 <cameraY>,d0
    ccf8:	|         move.l 232(sp),-(sp)
    ccfc:	|         move.l d0,-(sp)
    ccfe:	|         jsr 8d0 <put2bytes>
    cd04:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    cd06:	|         move.l 1c776 <cameraZoom>,d0
    cd0c:	|         move.l 232(sp),-(sp)
    cd10:	|         move.l d0,-(sp)
    cd12:	|         jsr a46 <putFloat>
    cd18:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    cd1a:	|         move.l 232(sp),100(sp)
    cd20:	|         move.b 1c752 <brightnessLevel>,d0
    cd26:	|         move.b d0,d0
    cd28:	|         andi.l #255,d0
    cd2e:	|         move.l d0,96(sp)
    cd32:	|         move.l 1cde2 <DOSBase>,d0
    cd38:	|         movea.l d0,a6
    cd3a:	|         move.l 100(sp),d1
    cd3e:	|         move.l 96(sp),d2
    cd42:	|         jsr -312(a6)
    cd46:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    cd4a:	|         move.l 232(sp),-(sp)
    cd4e:	|         jsr 760a <saveHandlers>
    cd54:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    cd56:	|         move.l 232(sp),-(sp)
    cd5a:	|         jsr 16066 <saveRegions>
    cd60:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    cd62:	|         move.l 1ccde <mouseCursorAnim>,d0
    cd68:	|         move.l 232(sp),-(sp)
    cd6c:	|         move.l d0,-(sp)
    cd6e:	|         jsr b2c4 <saveAnim>
    cd74:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    cd76:	|         move.l 1cce2 <mouseCursorFrameNum>,d0
    cd7c:	|         move.l 232(sp),-(sp)
    cd80:	|         move.l d0,-(sp)
    cd82:	|         jsr 8d0 <put2bytes>
    cd88:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    cd8a:	|         move.l 1cd72 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    cd92:	|         clr.l 248(sp)
	while (thisFunction) {
    cd96:	|     ,-- bra.s cda6 <saveGame+0x306>
		countFunctions ++;
    cd98:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    cd9c:	|  |  |   movea.l 252(sp),a0
    cda0:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cda6:	|  |  '-> tst.l 252(sp)
    cdaa:	|  '----- bne.s cd98 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    cdac:	|         move.l 232(sp),-(sp)
    cdb0:	|         move.l 252(sp),-(sp)
    cdb4:	|         jsr 8d0 <put2bytes>
    cdba:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    cdbc:	|         move.l 1cd72 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    cdc4:	|     ,-- bra.s cde0 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    cdc6:	|  ,--|-> move.l 232(sp),-(sp)
    cdca:	|  |  |   move.l 256(sp),-(sp)
    cdce:	|  |  |   jsr c8e8 <saveFunction>
    cdd4:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    cdd6:	|  |  |   movea.l 252(sp),a0
    cdda:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cde0:	|  |  '-> tst.l 252(sp)
    cde4:	|  '----- bne.s cdc6 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    cde6:	|         clr.l 256(sp)
    cdea:	|     ,-- bra.s ce0c <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    cdec:	|  ,--|-> move.l 1cd88 <globalVars>,d1
    cdf2:	|  |  |   move.l 256(sp),d0
    cdf6:	|  |  |   lsl.l #3,d0
    cdf8:	|  |  |   add.l d1,d0
    cdfa:	|  |  |   move.l 232(sp),-(sp)
    cdfe:	|  |  |   move.l d0,-(sp)
    ce00:	|  |  |   jsr d140 <saveVariable>
    ce06:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    ce08:	|  |  |   addq.l #1,256(sp)
    ce0c:	|  |  '-> move.l 1cdb2 <numGlobals>,d0
    ce12:	|  |      cmp.l 256(sp),d0
    ce16:	|  '----- bgt.s cdec <saveGame+0x34c>
	}

	savePeople (fp);
    ce18:	|         move.l 232(sp),-(sp)
    ce1c:	|         jsr b3ec <savePeople>
    ce22:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    ce24:	|         movea.l 1cef2 <currentFloor>,a0
    ce2a:	|         move.l 8(a0),d0
    ce2e:	|  ,----- beq.s ce6c <saveGame+0x3cc>
		FPutC (fp, 1);
    ce30:	|  |      move.l 232(sp),76(sp)
    ce36:	|  |      moveq #1,d0
    ce38:	|  |      move.l d0,72(sp)
    ce3c:	|  |      move.l 1cde2 <DOSBase>,d0
    ce42:	|  |      movea.l d0,a6
    ce44:	|  |      move.l 76(sp),d1
    ce48:	|  |      move.l 72(sp),d2
    ce4c:	|  |      jsr -312(a6)
    ce50:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    ce54:	|  |      movea.l 1cef2 <currentFloor>,a0
    ce5a:	|  |      move.l (a0),d0
    ce5c:	|  |      move.l 232(sp),-(sp)
    ce60:	|  |      move.l d0,-(sp)
    ce62:	|  |      jsr 8d0 <put2bytes>
    ce68:	|  |      addq.l #8,sp
    ce6a:	|  |  ,-- bra.s ce8e <saveGame+0x3ee>
	} else FPutC (fp, 0);
    ce6c:	|  '--|-> move.l 232(sp),88(sp)
    ce72:	|     |   clr.l 84(sp)
    ce76:	|     |   move.l 1cde2 <DOSBase>,d0
    ce7c:	|     |   movea.l d0,a6
    ce7e:	|     |   move.l 88(sp),d1
    ce82:	|     |   move.l 84(sp),d2
    ce86:	|     |   jsr -312(a6)
    ce8a:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    ce8e:	|     '-> move.l 232(sp),64(sp)
    ce94:	|         move.l 1cea4 <speechMode>,60(sp)
    ce9c:	|         move.l 1cde2 <DOSBase>,d0
    cea2:	|         movea.l d0,a6
    cea4:	|         move.l 64(sp),d1
    cea8:	|         move.l 60(sp),d2
    ceac:	|         jsr -312(a6)
    ceb0:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    ceb4:	|         move.b 1ccb2 <fadeMode>,d0
    ceba:	|         move.b d0,d0
    cebc:	|         andi.l #255,d0
    cec2:	|         move.l d0,52(sp)
    cec6:	|         move.l 232(sp),48(sp)
    cecc:	|         move.l 1cde2 <DOSBase>,d0
    ced2:	|         movea.l d0,a6
    ced4:	|         move.l 52(sp),d1
    ced8:	|         move.l 48(sp),d2
    cedc:	|         jsr -312(a6)
    cee0:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cee4:	|         move.l 1cd2a <speech>,d0
    ceea:	|         move.l 232(sp),-(sp)
    ceee:	|         move.l d0,-(sp)
    cef0:	|         jsr 43ca <saveSpeech>
    cef6:	|         addq.l #8,sp
	saveStatusBars (fp);
    cef8:	|         move.l 232(sp),-(sp)
    cefc:	|         jsr 871e <saveStatusBars>
    cf02:	|         addq.l #4,sp
	saveSounds (fp);
    cf04:	|         move.l 232(sp),-(sp)
    cf08:	|         jsr d4b2 <saveSounds>
    cf0e:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cf10:	|         move.w 1ce8e <saveEncoding>,d0
    cf16:	|         move.w d0,d0
    cf18:	|         andi.l #65535,d0
    cf1e:	|         move.l 232(sp),-(sp)
    cf22:	|         move.l d0,-(sp)
    cf24:	|         jsr 8d0 <put2bytes>
    cf2a:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cf2c:	|         move.l 1ce80 <parallaxStuff>,d0
    cf32:	|         move.l 232(sp),-(sp)
    cf36:	|         move.l d0,-(sp)
    cf38:	|         jsr d7b4 <saveParallaxRecursive>
    cf3e:	|         addq.l #8,sp
	FPutC (fp, 0);
    cf40:	|         move.l 232(sp),40(sp)
    cf46:	|         clr.l 36(sp)
    cf4a:	|         move.l 1cde2 <DOSBase>,d0
    cf50:	|         movea.l d0,a6
    cf52:	|         move.l 40(sp),d1
    cf56:	|         move.l 36(sp),d2
    cf5a:	|         jsr -312(a6)
    cf5e:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cf62:	|         move.l 232(sp),28(sp)
    cf68:	|         move.l 1c758 <languageNum>,24(sp)
    cf70:	|         move.l 1cde2 <DOSBase>,d0
    cf76:	|         movea.l d0,a6
    cf78:	|         move.l 28(sp),d1
    cf7c:	|         move.l 24(sp),d2
    cf80:	|         jsr -312(a6)
    cf84:	|         move.l d0,20(sp)

	Close(fp);
    cf88:	|         move.l 232(sp),16(sp)
    cf8e:	|         move.l 1cde2 <DOSBase>,d0
    cf94:	|         movea.l d0,a6
    cf96:	|         move.l 16(sp),d1
    cf9a:	|         jsr -36(a6)
    cf9e:	|         move.l d0,12(sp)
	clearStackLib ();
    cfa2:	|         jsr c59e <clearStackLib>
	return TRUE;
    cfa8:	|         moveq #1,d0
}
    cfaa:	'-------> movem.l (sp)+,d2-d3/a6
    cfae:	          lea 248(sp),sp
    cfb2:	          rts

0000cfb4 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cfb4:	       lea -12(sp),sp
	int elements = 0;
    cfb8:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cfbc:	       move.l 16(sp),(sp)
	while (search) {
    cfc0:	   ,-- bra.s cfcc <saveStack+0x18>
		elements ++;
    cfc2:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    cfc6:	|  |   movea.l (sp),a0
    cfc8:	|  |   move.l 8(a0),(sp)
	while (search) {
    cfcc:	|  '-> tst.l (sp)
    cfce:	'----- bne.s cfc2 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cfd0:	       move.l 20(sp),-(sp)
    cfd4:	       move.l 12(sp),-(sp)
    cfd8:	       jsr 8d0 <put2bytes>
    cfde:	       addq.l #8,sp
	search = vs;
    cfe0:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cfe4:	       clr.l 4(sp)
    cfe8:	   ,-- bra.s d004 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cfea:	,--|-> move.l (sp),d0
    cfec:	|  |   move.l 20(sp),-(sp)
    cff0:	|  |   move.l d0,-(sp)
    cff2:	|  |   jsr d140 <saveVariable>
    cff8:	|  |   addq.l #8,sp
		search = search -> next;
    cffa:	|  |   movea.l (sp),a0
    cffc:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    d000:	|  |   addq.l #1,4(sp)
    d004:	|  '-> move.l 4(sp),d0
    d008:	|      cmp.l 8(sp),d0
    d00c:	'----- blt.s cfea <saveStack+0x36>
	}
}
    d00e:	       nop
    d010:	       nop
    d012:	       lea 12(sp),sp
    d016:	       rts

0000d018 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    d018:	             lea -44(sp),sp
    d01c:	             move.l a6,-(sp)
    d01e:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    d020:	             move.l 1ce66 <stackLib>,48(sp)
	int a = 0;
    d028:	             clr.l 44(sp)
	while (s) {
    d02c:	      ,----- bra.s d08a <saveStackRef+0x72>
		if (s -> stack == vs) {
    d02e:	   ,--|----> movea.l 48(sp),a0
    d032:	   |  |      move.l (a0),d0
    d034:	   |  |      cmp.l 56(sp),d0
    d038:	   |  |  ,-- bne.s d07c <saveStackRef+0x64>
			FPutC (fp, 1);
    d03a:	   |  |  |   move.l 60(sp),16(sp)
    d040:	   |  |  |   moveq #1,d0
    d042:	   |  |  |   move.l d0,12(sp)
    d046:	   |  |  |   move.l 1cde2 <DOSBase>,d0
    d04c:	   |  |  |   movea.l d0,a6
    d04e:	   |  |  |   move.l 16(sp),d1
    d052:	   |  |  |   move.l 12(sp),d2
    d056:	   |  |  |   jsr -312(a6)
    d05a:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    d05e:	   |  |  |   move.l 1ce62 <stackLibTotal>,d0
    d064:	   |  |  |   sub.l 44(sp),d0
    d068:	   |  |  |   move.l 60(sp),-(sp)
    d06c:	   |  |  |   move.l d0,-(sp)
    d06e:	   |  |  |   jsr 8d0 <put2bytes>
    d074:	   |  |  |   addq.l #8,sp
			return TRUE;
    d076:	   |  |  |   moveq #1,d0
    d078:	,--|--|--|-- bra.w d136 <saveStackRef+0x11e>
		}
		s = s -> next;
    d07c:	|  |  |  '-> movea.l 48(sp),a0
    d080:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    d086:	|  |  |      addq.l #1,44(sp)
	while (s) {
    d08a:	|  |  '----> tst.l 48(sp)
    d08e:	|  '-------- bne.s d02e <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    d090:	|            move.l 60(sp),40(sp)
    d096:	|            clr.l 36(sp)
    d09a:	|            move.l 1cde2 <DOSBase>,d0
    d0a0:	|            movea.l d0,a6
    d0a2:	|            move.l 40(sp),d1
    d0a6:	|            move.l 36(sp),d2
    d0aa:	|            jsr -312(a6)
    d0ae:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    d0b2:	|            movea.l 56(sp),a0
    d0b6:	|            move.l (a0),d0
    d0b8:	|            move.l 60(sp),-(sp)
    d0bc:	|            move.l d0,-(sp)
    d0be:	|            jsr cfb4 <saveStack>
    d0c4:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    d0c6:	|            moveq #8,d0
    d0c8:	|            move.l d0,28(sp)
    d0cc:	|            clr.l 24(sp)
    d0d0:	|            move.l 1cdda <SysBase>,d0
    d0d6:	|            movea.l d0,a6
    d0d8:	|            move.l 28(sp),d0
    d0dc:	|            move.l 24(sp),d1
    d0e0:	|            jsr -684(a6)
    d0e4:	|            move.l d0,20(sp)
    d0e8:	|            move.l 20(sp),d0
    d0ec:	|            move.l d0,48(sp)
	stackLibTotal ++;
    d0f0:	|            move.l 1ce62 <stackLibTotal>,d0
    d0f6:	|            addq.l #1,d0
    d0f8:	|            move.l d0,1ce62 <stackLibTotal>
	if (! s) {
    d0fe:	|            tst.l 48(sp)
    d102:	|        ,-- bne.s d116 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    d104:	|        |   pea 1986e <PutChar+0x178c>
    d10a:	|        |   jsr 17640 <KPrintF>
    d110:	|        |   addq.l #4,sp
		return FALSE;
    d112:	|        |   clr.w d0
    d114:	+--------|-- bra.s d136 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    d116:	|        '-> move.l 1ce66 <stackLib>,d0
    d11c:	|            movea.l 48(sp),a0
    d120:	|            move.l d0,4(a0)
	s -> stack = vs;
    d124:	|            movea.l 48(sp),a0
    d128:	|            move.l 56(sp),(a0)
	stackLib = s;
    d12c:	|            move.l 48(sp),1ce66 <stackLib>
	return TRUE;
    d134:	|            moveq #1,d0
}
    d136:	'----------> move.l (sp)+,d2
    d138:	             movea.l (sp)+,a6
    d13a:	             lea 44(sp),sp
    d13e:	             rts

0000d140 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    d140:	          lea -12(sp),sp
    d144:	          move.l a6,-(sp)
    d146:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    d148:	          move.l 28(sp),16(sp)
    d14e:	          movea.l 24(sp),a0
    d152:	          move.l (a0),d0
    d154:	          move.l d0,12(sp)
    d158:	          move.l 1cde2 <DOSBase>,d0
    d15e:	          movea.l d0,a6
    d160:	          move.l 16(sp),d1
    d164:	          move.l 12(sp),d2
    d168:	          jsr -312(a6)
    d16c:	          move.l d0,8(sp)
	switch (from -> varType) {
    d170:	          movea.l 24(sp),a0
    d174:	          move.l (a0),d0
    d176:	          moveq #9,d1
    d178:	          cmp.l d0,d1
    d17a:	      ,-- bcs.w d22a <saveVariable+0xea>
    d17e:	      |   add.l d0,d0
    d180:	      |   movea.l d0,a0
    d182:	      |   adda.l #53646,a0
    d188:	      |   move.w (a0),d0
    d18a:	      |   jmp (d18e <saveVariable+0x4e>,pc,d0.w)
    d18e:	      |   ori.l #1310740,(a0)+
    d194:	      |   ori.b #20,(20,a0,d0.w)
    d19a:	      |   .short 0x004c
    d19c:	      |   ori.b #126,(a4)
    d1a0:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    d1a4:	      |   ori.b #40,(a0)+
    d1a8:	      |   ori.b #47,d4
    d1ac:	      |   ori.b #0,(a4)+
    d1b0:	      |   jsr 958 <put4bytes>
    d1b6:	      |   addq.l #8,sp
		return TRUE;
    d1b8:	      |   moveq #1,d0
    d1ba:	,-----|-- bra.w d266 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    d1be:	|     |   movea.l 24(sp),a0
    d1c2:	|     |   move.l 4(a0),d0
    d1c6:	|     |   move.l 28(sp),-(sp)
    d1ca:	|     |   move.l d0,-(sp)
    d1cc:	|     |   jsr bd8 <writeString>
    d1d2:	|     |   addq.l #8,sp
		return TRUE;
    d1d4:	|     |   moveq #1,d0
    d1d6:	+-----|-- bra.w d266 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    d1da:	|     |   movea.l 24(sp),a0
    d1de:	|     |   move.l 4(a0),d0
    d1e2:	|     |   move.l 28(sp),-(sp)
    d1e6:	|     |   move.l d0,-(sp)
    d1e8:	|     |   jsr d018 <saveStackRef>
    d1ee:	|     |   addq.l #8,sp
    d1f0:	+-----|-- bra.s d266 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d1f2:	|     |   movea.l 24(sp),a0
    d1f6:	|     |   move.l 4(a0),d0
    d1fa:	|     |   move.l 28(sp),-(sp)
    d1fe:	|     |   move.l d0,-(sp)
    d200:	|     |   jsr b38e <saveCostume>
    d206:	|     |   addq.l #8,sp
		return FALSE;
    d208:	|     |   clr.w d0
    d20a:	+-----|-- bra.s d266 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d20c:	|     |   movea.l 24(sp),a0
    d210:	|     |   move.l 4(a0),d0
    d214:	|     |   move.l 28(sp),-(sp)
    d218:	|     |   move.l d0,-(sp)
    d21a:	|     |   jsr b2c4 <saveAnim>
    d220:	|     |   addq.l #8,sp
		return FALSE;
    d222:	|     |   clr.w d0
    d224:	+-----|-- bra.s d266 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d226:	|     |   clr.w d0
    d228:	+-----|-- bra.s d266 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d22a:	|     '-> movea.l 24(sp),a0
    d22e:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d230:	|         moveq #10,d1
    d232:	|         cmp.l d0,d1
    d234:	|  ,----- bcs.s d24e <saveVariable+0x10e>
						typeName[from->varType] :
    d236:	|  |      movea.l 24(sp),a0
    d23a:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d23c:	|  |      add.l d0,d0
    d23e:	|  |      movea.l d0,a1
    d240:	|  |      adda.l d0,a1
    d242:	|  |      lea 1ccb4 <typeName>,a0
    d248:	|  |      move.l (0,a1,a0.l),d0
    d24c:	|  |  ,-- bra.s d254 <saveVariable+0x114>
    d24e:	|  '--|-> move.l #104595,d0
    d254:	|     '-> move.l d0,-(sp)
    d256:	|         pea 1989a <PutChar+0x17b8>
    d25c:	|         jsr 17640 <KPrintF>
    d262:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d264:	|         moveq #1,d0
    d266:	'-------> move.l (sp)+,d2
    d268:	          movea.l (sp)+,a6
    d26a:	          lea 12(sp),sp
    d26e:	          rts

0000d270 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d270:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d274:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d27c:	          movea.l 4(sp),a0
    d280:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d286:	          movea.l 4(sp),a0
    d28a:	          move.w 10(a0),d0
    d28e:	          lsr.w #8,d0
    d290:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d294:	          movea.l 4(sp),a0
    d298:	          move.w 10(a0),d0
    d29c:	          move.b d0,(sp)

    if(counterx_new)
    d29e:	,-------- beq.w d344 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d2a2:	|         clr.w d1
    d2a4:	|         move.b (sp),d1
    d2a6:	|         move.w 1ce6e <counterx_old>,d0
    d2ac:	|         sub.w d0,d1
    d2ae:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d2b2:	|         cmpi.w #128,10(sp)
    d2b8:	|     ,-- blt.s d2d0 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d2ba:	|     |   move.w #1,1cd90 <input+0x4>
            counterx_diff -= 256;    
    d2c2:	|     |   move.w 10(sp),d0
    d2c6:	|     |   addi.w #-256,d0
    d2ca:	|     |   move.w d0,10(sp)
    d2ce:	|  ,--|-- bra.s d2fc <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d2d0:	|  |  '-> cmpi.w #-129,10(sp)
    d2d6:	|  |  ,-- bgt.s d2ee <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d2d8:	|  |  |   move.w 10(sp),d0
    d2dc:	|  |  |   addi.w #256,d0
    d2e0:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d2e4:	|  |  |   move.w #1,1cd90 <input+0x4>
    d2ec:	|  +--|-- bra.s d2fc <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d2ee:	|  |  '-> tst.w 10(sp)
    d2f2:	|  +----- beq.s d2fc <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d2f4:	|  |      move.w #1,1cd90 <input+0x4>
        }

        input.mouseX += counterx_diff;
    d2fc:	|  '----> move.l 1cd96 <input+0xa>,d0
    d302:	|         movea.w 10(sp),a0
    d306:	|         add.l a0,d0
    d308:	|         move.l d0,1cd96 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d30e:	|         move.l 1cd96 <input+0xa>,d1
    d314:	|         move.l 1cd2e <winWidth>,d0
    d31a:	|         cmp.l d1,d0
    d31c:	|     ,-- bge.s d32c <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d31e:	|     |   move.l 1cd2e <winWidth>,d0
    d324:	|     |   move.l d0,1cd96 <input+0xa>
    d32a:	|  ,--|-- bra.s d33a <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d32c:	|  |  '-> move.l 1cd96 <input+0xa>,d0
    d332:	|  +----- bpl.s d33a <CsiCheckInput+0xca>
            input.mouseX = 0;
    d334:	|  |      clr.l 1cd96 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d33a:	|  '----> clr.w d0
    d33c:	|         move.b (sp),d0
    d33e:	|         move.w d0,1ce6e <counterx_old>
    }    

    if(countery_new)
    d344:	'-------> tst.b 1(sp)
    d348:	,-------- beq.w d3f2 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d34c:	|         clr.w d1
    d34e:	|         move.b 1(sp),d1
    d352:	|         move.w 1ce70 <countery_old>,d0
    d358:	|         sub.w d0,d1
    d35a:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d35e:	|         cmpi.w #128,8(sp)
    d364:	|     ,-- blt.s d37c <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d366:	|     |   move.w #1,1cd90 <input+0x4>
            countery_diff -= 256;    
    d36e:	|     |   move.w 8(sp),d0
    d372:	|     |   addi.w #-256,d0
    d376:	|     |   move.w d0,8(sp)
    d37a:	|  ,--|-- bra.s d3a8 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d37c:	|  |  '-> cmpi.w #-129,8(sp)
    d382:	|  |  ,-- bgt.s d39a <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d384:	|  |  |   move.w #1,1cd90 <input+0x4>
            countery_diff += 256;
    d38c:	|  |  |   move.w 8(sp),d0
    d390:	|  |  |   addi.w #256,d0
    d394:	|  |  |   move.w d0,8(sp)
    d398:	|  +--|-- bra.s d3a8 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d39a:	|  |  '-> tst.w 8(sp)
    d39e:	|  +----- beq.s d3a8 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d3a0:	|  |      move.w #1,1cd90 <input+0x4>
        }

        input.mouseY += countery_diff;
    d3a8:	|  '----> move.l 1cd9a <input+0xe>,d0
    d3ae:	|         movea.w 8(sp),a0
    d3b2:	|         add.l a0,d0
    d3b4:	|         move.l d0,1cd9a <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d3ba:	|         move.l 1cd9a <input+0xe>,d1
    d3c0:	|         move.l 1cd32 <winHeight>,d0
    d3c6:	|         cmp.l d1,d0
    d3c8:	|     ,-- bge.s d3d8 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d3ca:	|     |   move.l 1cd32 <winHeight>,d0
    d3d0:	|     |   move.l d0,1cd9a <input+0xe>
    d3d6:	|  ,--|-- bra.s d3e6 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d3d8:	|  |  '-> move.l 1cd9a <input+0xe>,d0
    d3de:	|  +----- bpl.s d3e6 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d3e0:	|  |      clr.l 1cd9a <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d3e6:	|  '----> clr.w d0
    d3e8:	|         move.b 1(sp),d0
    d3ec:	|         move.w d0,1ce70 <countery_old>
    } 

    input.leftRelease = FALSE;
    d3f2:	'-------> clr.w 1cd92 <input+0x6>
    input.rightRelease = FALSE;
    d3f8:	          clr.w 1cd94 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d3fe:	          move.w 1cd8c <input>,d0
    d404:	      ,-- beq.s d42a <CsiCheckInput+0x1ba>
    d406:	      |   movea.l #12574721,a0
    d40c:	      |   move.b (a0),d0
    d40e:	      |   move.b d0,d0
    d410:	      |   andi.l #255,d0
    d416:	      |   moveq #64,d1
    d418:	      |   and.l d1,d0
    d41a:	      +-- beq.s d42a <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d41c:	      |   clr.w 1cd8c <input>
        input.leftRelease = TRUE;
    d422:	      |   move.w #1,1cd92 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d42a:	      '-> move.w 1cd8e <input+0x2>,d0
    d430:	      ,-- beq.s d458 <CsiCheckInput+0x1e8>
    d432:	      |   movea.l #14675990,a0
    d438:	      |   move.w (a0),d0
    d43a:	      |   move.w d0,d0
    d43c:	      |   andi.l #65535,d0
    d442:	      |   andi.l #1024,d0
    d448:	      +-- beq.s d458 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d44a:	      |   clr.w 1cd8e <input+0x2>
        input.rightRelease = TRUE;
    d450:	      |   move.w #1,1cd94 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d458:	      '-> movea.l #12574721,a0
    d45e:	          move.b (a0),d0
    d460:	          move.b d0,d0
    d462:	          andi.l #255,d0
    d468:	          moveq #64,d1
    d46a:	          and.l d1,d0
    d46c:	      ,-- bne.s d476 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d46e:	      |   move.w #1,1cd8c <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d476:	      '-> movea.l #14675990,a0
    d47c:	          move.w (a0),d0
    d47e:	          move.w d0,d0
    d480:	          andi.l #65535,d0
    d486:	          andi.l #1024,d0
    d48c:	      ,-- bne.s d496 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d48e:	      |   move.w #1,1cd8e <input+0x2>
    }

    d496:	      '-> nop
    d498:	          lea 12(sp),sp
    d49c:	          rts

0000d49e <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d49e:	moveq #0,d0
}
    d4a0:	rts

0000d4a2 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d4a2:	nop
    d4a4:	rts

0000d4a6 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d4a6:	nop
    d4a8:	rts

0000d4aa <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d4aa:	moveq #1,d0
}
    d4ac:	rts

0000d4ae <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d4ae:	nop
    d4b0:	rts

0000d4b2 <saveSounds>:

void saveSounds (BPTR fp) {
    d4b2:	lea -12(sp),sp
    d4b6:	move.l a6,-(sp)
    d4b8:	move.l d2,-(sp)
	FPutC (fp,0);
    d4ba:	move.l 24(sp),16(sp)
    d4c0:	clr.l 12(sp)
    d4c4:	move.l 1cde2 <DOSBase>,d0
    d4ca:	movea.l d0,a6
    d4cc:	move.l 16(sp),d1
    d4d0:	move.l 12(sp),d2
    d4d4:	jsr -312(a6)
    d4d8:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d4dc:	move.l 1c772 <defSoundVol>,d0
    d4e2:	move.l 24(sp),-(sp)
    d4e6:	move.l d0,-(sp)
    d4e8:	jsr 8d0 <put2bytes>
    d4ee:	addq.l #8,sp
	put2bytes (defVol, fp);
    d4f0:	move.l 1c76e <defVol>,d0
    d4f6:	move.l 24(sp),-(sp)
    d4fa:	move.l d0,-(sp)
    d4fc:	jsr 8d0 <put2bytes>
    d502:	addq.l #8,sp
}
    d504:	nop
    d506:	move.l (sp)+,d2
    d508:	movea.l (sp)+,a6
    d50a:	lea 12(sp),sp
    d50e:	rts

0000d510 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d510:	move.l 4(sp),1c76e <defVol>
}
    d518:	nop
    d51a:	rts

0000d51c <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d51c:	move.l 4(sp),1c772 <defSoundVol>
}
    d524:	nop
    d526:	rts

0000d528 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d528:	nop
    d52a:	rts

0000d52c <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d52c:	nop
    d52e:	rts

0000d530 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d530:	nop
    d532:	rts

0000d534 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d534:	subq.l #4,sp
    d536:	move.l 12(sp),d0
    d53a:	move.w d0,d0
    d53c:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d540:	moveq #1,d0
}
    d542:	addq.l #4,sp
    d544:	rts

0000d546 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d546:	nop
    d548:	rts

0000d54a <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d54a:	move.l 16(sp),-(sp)
    d54e:	move.l 16(sp),-(sp)
    d552:	move.l 16(sp),-(sp)
    d556:	move.l 16(sp),-(sp)
    d55a:	jsr e0e <CstBlankScreen>
    d560:	lea 16(sp),sp
}
    d564:	nop
    d566:	rts

0000d568 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d568:	pea 198bd <PutChar+0x17db>
    d56e:	jsr 17640 <KPrintF>
    d574:	addq.l #4,sp
}
    d576:	nop
    d578:	rts

0000d57a <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d57a:	movea.l 8(sp),a1
    d57e:	movea.l 12(sp),a0
    d582:	move.l 8(sp),d1
    d586:	move.l 4(sp),d0
    d58a:	move.l a1,-(sp)
    d58c:	move.l a0,-(sp)
    d58e:	move.l d1,-(sp)
    d590:	move.l d0,-(sp)
    d592:	jsr 4ac4 <drawLine>
    d598:	lea 16(sp),sp
}
    d59c:	nop
    d59e:	rts

0000d5a0 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d5a0:	movea.l 12(sp),a1
    d5a4:	movea.l 4(sp),a0
    d5a8:	move.l 8(sp),d1
    d5ac:	move.l 4(sp),d0
    d5b0:	move.l a1,-(sp)
    d5b2:	move.l a0,-(sp)
    d5b4:	move.l d1,-(sp)
    d5b6:	move.l d0,-(sp)
    d5b8:	jsr 4ac4 <drawLine>
    d5be:	lea 16(sp),sp
}
    d5c2:	nop
    d5c4:	rts

0000d5c6 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d5c6:	pea 198f6 <PutChar+0x1814>
    d5cc:	jsr 17640 <KPrintF>
    d5d2:	addq.l #4,sp
}
    d5d4:	nop
    d5d6:	rts

0000d5d8 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d5d8:	jsr 19a4 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d5de:	pea 1ce7a <backdropTextureName>
    d5e4:	pea 1 <_start+0x1>
    d5e8:	jsr 4c46 <deleteTextures>
    d5ee:	addq.l #8,sp
	backdropTextureName = 0;
    d5f0:	clr.l 1ce7a <backdropTextureName>
	backdropExists = FALSE;
    d5f6:	clr.w 1ce7e <backdropExists>
}
    d5fc:	nop
    d5fe:	rts

0000d600 <killParallax>:

void killParallax () {
    d600:	          lea -12(sp),sp
    d604:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d606:	   ,----- bra.s d672 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d608:	,--|----> move.l 1ce80 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d610:	|  |      movea.l 12(sp),a0
    d614:	|  |      move.l 42(a0),d0
    d618:	|  |      move.l d0,1ce80 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d61e:	|  |      move.l 12(sp),d0
    d622:	|  |      addq.l #4,d0
    d624:	|  |      move.l d0,-(sp)
    d626:	|  |      pea 1 <_start+0x1>
    d62a:	|  |      jsr 4c46 <deleteTextures>
    d630:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d632:	|  |      movea.l 12(sp),a0
    d636:	|  |      move.l (a0),d0
    d638:	|  |  ,-- beq.s d652 <killParallax+0x52>
    d63a:	|  |  |   movea.l 12(sp),a0
    d63e:	|  |  |   move.l (a0),8(sp)
    d642:	|  |  |   move.l 1cdda <SysBase>,d0
    d648:	|  |  |   movea.l d0,a6
    d64a:	|  |  |   movea.l 8(sp),a1
    d64e:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d652:	|  |  '-> tst.l 12(sp)
    d656:	|  |  ,-- beq.s d66e <killParallax+0x6e>
    d658:	|  |  |   move.l 12(sp),4(sp)
    d65e:	|  |  |   move.l 1cdda <SysBase>,d0
    d664:	|  |  |   movea.l d0,a6
    d666:	|  |  |   movea.l 4(sp),a1
    d66a:	|  |  |   jsr -690(a6)
		k = NULL;
    d66e:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d672:	|  '----> move.l 1ce80 <parallaxStuff>,d0
    d678:	'-------- bne.s d608 <killParallax+0x8>
	}
}
    d67a:	          nop
    d67c:	          nop
    d67e:	          movea.l (sp)+,a6
    d680:	          lea 12(sp),sp
    d684:	          rts

0000d686 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d686:	       move.l 4(sp),-(sp)
    d68a:	       jsr 7a74 <openFileFromNum>
    d690:	       addq.l #4,sp
    d692:	       tst.l d0
    d694:	   ,-- bne.s d6a6 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d696:	   |   pea 19917 <PutChar+0x1835>
    d69c:	   |   jsr 17640 <KPrintF>
    d6a2:	   |   addq.l #4,sp
		return;
    d6a4:	,--|-- bra.s d6c6 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d6a6:	|  '-> move.l 1cdc2 <bigDataFile>,d0
    d6ac:	|      move.l 12(sp),-(sp)
    d6b0:	|      move.l 12(sp),-(sp)
    d6b4:	|      move.l d0,-(sp)
    d6b6:	|      jsr 1d0a <CstLoadBackdrop>
    d6bc:	|      lea 12(sp),sp
	finishAccess ();
    d6c0:	|      jsr 796c <finishAccess>
	
}
    d6c6:	'----> rts

0000d6c8 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d6c8:	subq.l #8,sp
    d6ca:	movea.l 12(sp),a0
    d6ce:	move.l 16(sp),d1
    d6d2:	move.l 20(sp),d0
    d6d6:	movea.w a0,a0
    d6d8:	move.w a0,6(sp)
    d6dc:	move.w d1,d1
    d6de:	move.w d1,4(sp)
    d6e2:	move.w d0,d0
    d6e4:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d6e8:	pea 19966 <PutChar+0x1884>
    d6ee:	jsr 17640 <KPrintF>
    d6f4:	addq.l #4,sp

}
    d6f6:	nop
    d6f8:	addq.l #8,sp
    d6fa:	rts

0000d6fc <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d6fc:	pea 19989 <PutChar+0x18a7>
    d702:	jsr 17640 <KPrintF>
    d708:	addq.l #4,sp
}
    d70a:	nop
    d70c:	rts

0000d70e <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d70e:	pea 1ce84 <snapshotTextureName>
    d714:	pea 1 <_start+0x1>
    d718:	jsr 4c46 <deleteTextures>
    d71e:	addq.l #8,sp
	snapshotTextureName = 0;
    d720:	clr.l 1ce84 <snapshotTextureName>
}
    d726:	nop
    d728:	rts

0000d72a <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d72a:	clr.l 1ce90 <cameraX>
	cameraY = 0;
    d730:	clr.l 1ce94 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d736:	move.l 1ce76 <sceneHeight>,d0
    d73c:	move.l d0,d1
    d73e:	move.l 1ce72 <sceneWidth>,d0
    d744:	move.l d1,-(sp)
    d746:	move.l d0,-(sp)
    d748:	jsr 3a78 <CstReserveBackdrop>
    d74e:	addq.l #8,sp
}
    d750:	rts

0000d752 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d752:	jsr d5d8 <killBackDrop>
	killParallax ();
    d758:	jsr d600 <killParallax>
	killZBuffer ();
    d75e:	jsr 898a <killZBuffer>
	sceneWidth = x;
    d764:	move.l 4(sp),d0
    d768:	move.l d0,1ce72 <sceneWidth>
	sceneHeight = y;
    d76e:	move.l 8(sp),d0
    d772:	move.l d0,1ce76 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d778:	pea 199c2 <PutChar+0x18e0>
    d77e:	jsr 17640 <KPrintF>
    d784:	addq.l #4,sp
	return reserveBackdrop();
    d786:	jsr d72a <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d78c:	rts

0000d78e <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d78e:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d790:	move.l 12(sp),-(sp)
    d794:	jsr 6bc <get2bytes>
    d79a:	addq.l #4,sp
    d79c:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d7a0:	move.l 12(sp),-(sp)
    d7a4:	jsr 6bc <get2bytes>
    d7aa:	addq.l #4,sp
    d7ac:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d7ae:	moveq #1,d0
}
    d7b0:	addq.l #8,sp
    d7b2:	rts

0000d7b4 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d7b4:	   ,-> lea -12(sp),sp
    d7b8:	   |   move.l a6,-(sp)
    d7ba:	   |   move.l d2,-(sp)
	if (me) {
    d7bc:	   |   tst.l 24(sp)
    d7c0:	,--|-- beq.w d856 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d7c4:	|  |   movea.l 24(sp),a0
    d7c8:	|  |   move.l 42(a0),d0
    d7cc:	|  |   move.l 28(sp),-(sp)
    d7d0:	|  |   move.l d0,-(sp)
    d7d2:	|  '-- jsr d7b4 <saveParallaxRecursive>(pc)
    d7d6:	|      addq.l #8,sp
		FPutC (fp, 1);
    d7d8:	|      move.l 28(sp),16(sp)
    d7de:	|      moveq #1,d0
    d7e0:	|      move.l d0,12(sp)
    d7e4:	|      move.l 1cde2 <DOSBase>,d0
    d7ea:	|      movea.l d0,a6
    d7ec:	|      move.l 16(sp),d1
    d7f0:	|      move.l 12(sp),d2
    d7f4:	|      jsr -312(a6)
    d7f8:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d7fc:	|      movea.l 24(sp),a0
    d800:	|      move.w 28(a0),d0
    d804:	|      move.w d0,d0
    d806:	|      andi.l #65535,d0
    d80c:	|      move.l 28(sp),-(sp)
    d810:	|      move.l d0,-(sp)
    d812:	|      jsr 8d0 <put2bytes>
    d818:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d81a:	|      movea.l 24(sp),a0
    d81e:	|      move.w 30(a0),d0
    d822:	|      move.w d0,d0
    d824:	|      andi.l #65535,d0
    d82a:	|      move.l 28(sp),-(sp)
    d82e:	|      move.l d0,-(sp)
    d830:	|      jsr 8d0 <put2bytes>
    d836:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d838:	|      movea.l 24(sp),a0
    d83c:	|      move.w 32(a0),d0
    d840:	|      move.w d0,d0
    d842:	|      andi.l #65535,d0
    d848:	|      move.l 28(sp),-(sp)
    d84c:	|      move.l d0,-(sp)
    d84e:	|      jsr 8d0 <put2bytes>
    d854:	|      addq.l #8,sp
	}
}
    d856:	'----> nop
    d858:	       move.l (sp)+,d2
    d85a:	       movea.l (sp)+,a6
    d85c:	       lea 12(sp),sp
    d860:	       rts

0000d862 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d862:	pea 199e9 <PutChar+0x1907>
    d868:	jsr 17640 <KPrintF>
    d86e:	addq.l #4,sp
	return TRUE;
    d870:	moveq #1,d0
    d872:	rts

0000d874 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d874:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d876:	             move.l 1ce88 <allObjectTypes>,(sp)

	while (huntType) {
    d87c:	      ,----- bra.s d894 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d87e:	   ,--|----> movea.l (sp),a0
    d880:	   |  |      move.l 4(a0),d0
    d884:	   |  |      cmp.l 8(sp),d0
    d888:	   |  |  ,-- bne.s d88e <findObjectType+0x1a>
    d88a:	   |  |  |   move.l (sp),d0
    d88c:	,--|--|--|-- bra.s d8a4 <findObjectType+0x30>
		huntType = huntType -> next;
    d88e:	|  |  |  '-> movea.l (sp),a0
    d890:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d894:	|  |  '----> tst.l (sp)
    d896:	|  '-------- bne.s d87e <findObjectType+0xa>
	}

	return loadObjectType (i);
    d898:	|            move.l 8(sp),-(sp)
    d89c:	|            jsr d964 <loadObjectType>
    d8a2:	|            addq.l #4,sp
}
    d8a4:	'----------> addq.l #4,sp
    d8a6:	             rts

0000d8a8 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d8a8:	             lea -12(sp),sp
	int i, num = 0;
    d8ac:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d8b0:	             move.l 20(sp),-(sp)
    d8b4:	             jsr d874 <findObjectType>
    d8ba:	             addq.l #4,sp
    d8bc:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d8be:	             clr.l 8(sp)
    d8c2:	   ,-------- bra.s d8f8 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d8c4:	,--|-------> movea.l (sp),a0
    d8c6:	|  |         move.l 38(a0),d1
    d8ca:	|  |         move.l 8(sp),d0
    d8ce:	|  |         lsl.l #3,d0
    d8d0:	|  |         movea.l d1,a0
    d8d2:	|  |         adda.l d0,a0
    d8d4:	|  |         move.l (a0),d0
    d8d6:	|  |         cmp.l 16(sp),d0
    d8da:	|  |  ,----- bne.s d8f4 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d8dc:	|  |  |      movea.l (sp),a0
    d8de:	|  |  |      move.l 38(a0),d1
    d8e2:	|  |  |      move.l 8(sp),d0
    d8e6:	|  |  |      lsl.l #3,d0
    d8e8:	|  |  |      movea.l d1,a0
    d8ea:	|  |  |      adda.l d0,a0
    d8ec:	|  |  |      move.l 4(a0),4(sp)
			break;
    d8f2:	|  |  |  ,-- bra.s d904 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d8f4:	|  |  '--|-> addq.l #1,8(sp)
    d8f8:	|  '-----|-> movea.l (sp),a0
    d8fa:	|        |   move.l 16(a0),d0
    d8fe:	|        |   cmp.l 8(sp),d0
    d902:	'--------|-- bgt.s d8c4 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d904:	         '-> move.l 4(sp),d0
}
    d908:	             lea 12(sp),sp
    d90c:	             rts

0000d90e <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d90e:	moveq #1,d0
}
    d910:	rts

0000d912 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d912:	subq.l #8,sp
    d914:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d916:	move.l 16(sp),-(sp)
    d91a:	jsr 6bc <get2bytes>
    d920:	addq.l #4,sp
    d922:	move.l d0,-(sp)
    d924:	jsr d964 <loadObjectType>
    d92a:	addq.l #4,sp
    d92c:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d930:	movea.l 8(sp),a0
    d934:	move.l (a0),4(sp)
    d938:	move.l 1cdda <SysBase>,d0
    d93e:	movea.l d0,a6
    d940:	movea.l 4(sp),a1
    d944:	jsr -690(a6)
	r -> screenName = readString (fp);
    d948:	move.l 16(sp),-(sp)
    d94c:	jsr b02 <readString>
    d952:	addq.l #4,sp
    d954:	movea.l 8(sp),a0
    d958:	move.l d0,(a0)
	return r;
    d95a:	move.l 8(sp),d0
}
    d95e:	movea.l (sp)+,a6
    d960:	addq.l #8,sp
    d962:	rts

0000d964 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d964:	          lea -84(sp),sp
    d968:	          move.l a6,-(sp)
    d96a:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d96c:	          moveq #42,d0
    d96e:	          move.l d0,84(sp)
    d972:	          clr.l 80(sp)
    d976:	          move.l 1cdda <SysBase>,d0
    d97c:	          movea.l d0,a6
    d97e:	          move.l 84(sp),d0
    d982:	          move.l 80(sp),d1
    d986:	          jsr -684(a6)
    d98a:	          move.l d0,76(sp)
    d98e:	          move.l 76(sp),d0
    d992:	          move.l d0,72(sp)

    if (newType) {
    d996:	,-------- beq.w dc10 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d99a:	|         move.l 96(sp),-(sp)
    d99e:	|         jsr 7b3c <openObjectSlice>
    d9a4:	|         addq.l #4,sp
    d9a6:	|         tst.w d0
    d9a8:	+-------- beq.w dc10 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d9ac:	|         move.l 1cdc2 <bigDataFile>,d0
    d9b2:	|         move.l d0,-(sp)
    d9b4:	|         jsr 6bc <get2bytes>
    d9ba:	|         addq.l #4,sp
    d9bc:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d9c0:	|         move.l 1cdc2 <bigDataFile>,64(sp)
    d9c8:	|         move.l 1cde2 <DOSBase>,d0
    d9ce:	|         movea.l d0,a6
    d9d0:	|         move.l 64(sp),d1
    d9d4:	|         jsr -306(a6)
    d9d8:	|         move.l d0,60(sp)
    d9dc:	|         move.l 60(sp),d0
    d9e0:	|         move.l d0,d0
    d9e2:	|         movea.l 72(sp),a0
    d9e6:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d9ea:	|         move.l 1cdc2 <bigDataFile>,56(sp)
    d9f2:	|         move.l 1cde2 <DOSBase>,d0
    d9f8:	|         movea.l d0,a6
    d9fa:	|         move.l 56(sp),d1
    d9fe:	|         jsr -306(a6)
    da02:	|         move.l d0,52(sp)
    da06:	|         move.l 52(sp),d0
    da0a:	|         move.l d0,d0
    da0c:	|         movea.l 72(sp),a0
    da10:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    da14:	|         move.l 1cdc2 <bigDataFile>,48(sp)
    da1c:	|         move.l 1cde2 <DOSBase>,d0
    da22:	|         movea.l d0,a6
    da24:	|         move.l 48(sp),d1
    da28:	|         jsr -306(a6)
    da2c:	|         move.l d0,44(sp)
    da30:	|         move.l 44(sp),d0
    da34:	|         move.l d0,d0
    da36:	|         movea.l 72(sp),a0
    da3a:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    da3e:	|         move.l 1cdc2 <bigDataFile>,40(sp)
    da46:	|         move.l 1cde2 <DOSBase>,d0
    da4c:	|         movea.l d0,a6
    da4e:	|         move.l 40(sp),d1
    da52:	|         jsr -306(a6)
    da56:	|         move.l d0,36(sp)
    da5a:	|         move.l 36(sp),d0
    da5e:	|         movea.l 72(sp),a0
    da62:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    da66:	|         move.l 1cdc2 <bigDataFile>,32(sp)
    da6e:	|         move.l 1cde2 <DOSBase>,d0
    da74:	|         movea.l d0,a6
    da76:	|         move.l 32(sp),d1
    da7a:	|         jsr -306(a6)
    da7e:	|         move.l d0,28(sp)
    da82:	|         move.l 28(sp),d0
    da86:	|         movea.l 72(sp),a0
    da8a:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    da8e:	|         move.l 1cdc2 <bigDataFile>,d0
    da94:	|         move.l d0,-(sp)
    da96:	|         jsr 718 <get4bytes>
    da9c:	|         addq.l #4,sp
    da9e:	|         movea.l 72(sp),a0
    daa2:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    daa6:	|         move.l 1cdc2 <bigDataFile>,d0
    daac:	|         move.l d0,-(sp)
    daae:	|         jsr 6bc <get2bytes>
    dab4:	|         addq.l #4,sp
    dab6:	|         movea.l 72(sp),a0
    daba:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    dabe:	|         move.l 1cdc2 <bigDataFile>,24(sp)
    dac6:	|         move.l 1cde2 <DOSBase>,d0
    dacc:	|         movea.l d0,a6
    dace:	|         move.l 24(sp),d1
    dad2:	|         jsr -306(a6)
    dad6:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    dada:	|         move.l 1cdc2 <bigDataFile>,d0
    dae0:	|         move.l d0,-(sp)
    dae2:	|         jsr 7d8 <getFloat>
    dae8:	|         addq.l #4,sp
            getFloat(bigDataFile);
    daea:	|         move.l 1cdc2 <bigDataFile>,d0
    daf0:	|         move.l d0,-(sp)
    daf2:	|         jsr 7d8 <getFloat>
    daf8:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    dafa:	|         move.l 1cdc2 <bigDataFile>,d0
    db00:	|         move.l d0,-(sp)
    db02:	|         jsr 6bc <get2bytes>
    db08:	|         addq.l #4,sp
    db0a:	|         move.l d0,d0
    db0c:	|         movea.l 72(sp),a0
    db10:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    db14:	|         move.l 1cdc2 <bigDataFile>,d0
    db1a:	|         move.l d0,-(sp)
    db1c:	|         jsr 6bc <get2bytes>
    db22:	|         addq.l #4,sp
    db24:	|         movea.l 72(sp),a0
    db28:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    db2c:	|         movea.l 72(sp),a0
    db30:	|         move.l 16(a0),d0
    db34:	|  ,----- beq.s db66 <loadObjectType+0x202>
    db36:	|  |      movea.l 72(sp),a0
    db3a:	|  |      move.l 16(a0),d0
    db3e:	|  |      lsl.l #3,d0
    db40:	|  |      move.l d0,16(sp)
    db44:	|  |      clr.l 12(sp)
    db48:	|  |      move.l 1cdda <SysBase>,d0
    db4e:	|  |      movea.l d0,a6
    db50:	|  |      move.l 16(sp),d0
    db54:	|  |      move.l 12(sp),d1
    db58:	|  |      jsr -684(a6)
    db5c:	|  |      move.l d0,8(sp)
    db60:	|  |      move.l 8(sp),d0
    db64:	|  |  ,-- bra.s db68 <loadObjectType+0x204>
    db66:	|  '--|-> moveq #0,d0
    db68:	|     '-> movea.l 72(sp),a0
    db6c:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    db70:	|         clr.l 88(sp)
    db74:	|     ,-- bra.s dbc4 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    db76:	|  ,--|-> move.l 1cdc2 <bigDataFile>,d1
    db7c:	|  |  |   movea.l 72(sp),a0
    db80:	|  |  |   movea.l 38(a0),a0
    db84:	|  |  |   move.l 88(sp),d0
    db88:	|  |  |   lsl.l #3,d0
    db8a:	|  |  |   lea (0,a0,d0.l),a2
    db8e:	|  |  |   move.l d1,-(sp)
    db90:	|  |  |   jsr 6bc <get2bytes>
    db96:	|  |  |   addq.l #4,sp
    db98:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    db9a:	|  |  |   move.l 1cdc2 <bigDataFile>,d1
    dba0:	|  |  |   movea.l 72(sp),a0
    dba4:	|  |  |   movea.l 38(a0),a0
    dba8:	|  |  |   move.l 88(sp),d0
    dbac:	|  |  |   lsl.l #3,d0
    dbae:	|  |  |   lea (0,a0,d0.l),a2
    dbb2:	|  |  |   move.l d1,-(sp)
    dbb4:	|  |  |   jsr 6bc <get2bytes>
    dbba:	|  |  |   addq.l #4,sp
    dbbc:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    dbc0:	|  |  |   addq.l #1,88(sp)
    dbc4:	|  |  '-> movea.l 72(sp),a0
    dbc8:	|  |      move.l 16(a0),d0
    dbcc:	|  |      cmp.l 88(sp),d0
    dbd0:	|  '----- bgt.s db76 <loadObjectType+0x212>
            }
            finishAccess();
    dbd2:	|         jsr 796c <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    dbd8:	|         move.l 68(sp),-(sp)
    dbdc:	|         jsr 7976 <getNumberedString>
    dbe2:	|         addq.l #4,sp
    dbe4:	|         movea.l 72(sp),a0
    dbe8:	|         move.l d0,(a0)
            newType->objectNum = i;
    dbea:	|         movea.l 72(sp),a0
    dbee:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    dbf4:	|         move.l 1ce88 <allObjectTypes>,d0
    dbfa:	|         movea.l 72(sp),a0
    dbfe:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    dc02:	|         move.l 72(sp),1ce88 <allObjectTypes>
            return newType;
    dc0a:	|         move.l 72(sp),d0
    dc0e:	|     ,-- bra.s dc12 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    dc10:	'-----|-> moveq #0,d0
}
    dc12:	      '-> movea.l (sp)+,a2
    dc14:	          movea.l (sp)+,a6
    dc16:	          lea 84(sp),sp
    dc1a:	          rts

0000dc1c <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    dc1c:	             lea -16(sp),sp
    dc20:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    dc22:	             move.l #118408,16(sp)

	while (* huntRegion) {
    dc2a:	   ,-------- bra.s dc9e <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    dc2c:	,--|-------> movea.l 16(sp),a0
    dc30:	|  |         move.l (a0),d0
    dc32:	|  |         cmp.l 24(sp),d0
    dc36:	|  |  ,----- bne.s dc90 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    dc38:	|  |  |      movea.l 24(sp),a0
    dc3c:	|  |  |      move.l 8(a0),d0
    dc40:	|  |  |      movea.l 16(sp),a0
    dc44:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    dc46:	|  |  |      movea.l 24(sp),a0
    dc4a:	|  |  |      move.l 38(a0),12(sp)
    dc50:	|  |  |      move.l 1cdda <SysBase>,d0
    dc56:	|  |  |      movea.l d0,a6
    dc58:	|  |  |      movea.l 12(sp),a1
    dc5c:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    dc60:	|  |  |      movea.l 24(sp),a0
    dc64:	|  |  |      move.l (a0),8(sp)
    dc68:	|  |  |      move.l 1cdda <SysBase>,d0
    dc6e:	|  |  |      movea.l d0,a6
    dc70:	|  |  |      movea.l 8(sp),a1
    dc74:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    dc78:	|  |  |      move.l 24(sp),4(sp)
    dc7e:	|  |  |      move.l 1cdda <SysBase>,d0
    dc84:	|  |  |      movea.l d0,a6
    dc86:	|  |  |      movea.l 4(sp),a1
    dc8a:	|  |  |      jsr -690(a6)
			return;
    dc8e:	|  |  |  ,-- bra.s dcb4 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    dc90:	|  |  '--|-> movea.l 16(sp),a0
    dc94:	|  |     |   move.l (a0),d0
    dc96:	|  |     |   move.l d0,d1
    dc98:	|  |     |   addq.l #8,d1
    dc9a:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    dc9e:	|  '-----|-> movea.l 16(sp),a0
    dca2:	|        |   move.l (a0),d0
    dca4:	'--------|-- bne.s dc2c <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    dca6:	         |   pea 19a10 <PutChar+0x192e>
    dcac:	         |   jsr 17640 <KPrintF>
    dcb2:	         |   addq.l #4,sp
}
    dcb4:	         '-> movea.l (sp)+,a6
    dcb6:	             lea 16(sp),sp
    dcba:	             rts

0000dcbc <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    dcbc:	movea.l 4(sp),a0
    dcc0:	move.l 4(a0),d0
    dcc4:	move.l 8(sp),-(sp)
    dcc8:	move.l d0,-(sp)
    dcca:	jsr 8d0 <put2bytes>
    dcd0:	addq.l #8,sp
	writeString (r -> screenName, fp);
    dcd2:	movea.l 4(sp),a0
    dcd6:	move.l (a0),d0
    dcd8:	move.l 8(sp),-(sp)
    dcdc:	move.l d0,-(sp)
    dcde:	jsr bd8 <writeString>
    dce4:	addq.l #8,sp
    dce6:	nop
    dce8:	rts

0000dcea <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    dcea:	                         lea -112(sp),sp
    dcee:	                         move.l a6,-(sp)
    dcf0:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    dcf2:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    dcf6:	                         move.w 1ce8e <saveEncoding>,d0
    dcfc:	                  ,----- beq.s dd06 <fileToStack+0x1c>
    dcfe:	                  |      move.l #105014,d0
    dd04:	                  |  ,-- bra.s dd0c <fileToStack+0x22>
    dd06:	                  '--|-> move.l #105040,d0
    dd0c:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    dd10:	                         move.l 124(sp),112(sp)
    dd16:	                         move.l #1005,108(sp)
    dd1e:	                         move.l 1cde2 <DOSBase>,d0
    dd24:	                         movea.l d0,a6
    dd26:	                         move.l 112(sp),d1
    dd2a:	                         move.l 108(sp),d2
    dd2e:	                         jsr -30(a6)
    dd32:	                         move.l d0,104(sp)
    dd36:	                         move.l 104(sp),d0
    dd3a:	                         move.l d0,100(sp)
    if (!fp) {
    dd3e:	                     ,-- bne.s dd58 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    dd40:	                     |   move.l 124(sp),-(sp)
    dd44:	                     |   pea 19a67 <PutChar+0x1985>
    dd4a:	                     |   jsr 17640 <KPrintF>
    dd50:	                     |   addq.l #8,sp
        return FALSE;
    dd52:	                     |   clr.w d0
    dd54:	,--------------------|-- bra.w e04e <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    dd58:	|                    '-> move.w 1ce8e <saveEncoding>,d0
    dd5e:	|                        move.l d0,d0
    dd60:	|                        move.b d0,1ce8c <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    dd66:	|                        move.w 1ce8e <saveEncoding>,d0
    dd6c:	|                        lsr.w #8,d0
    dd6e:	|                        move.l d0,d0
    dd70:	|                        move.b d0,1ce8d <encode2>

    while (*checker) {
    dd76:	|                 ,----- bra.s ddda <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    dd78:	|              ,--|----> move.l 100(sp),30(sp)
    dd7e:	|              |  |      move.l 1cde2 <DOSBase>,d0
    dd84:	|              |  |      movea.l d0,a6
    dd86:	|              |  |      move.l 30(sp),d1
    dd8a:	|              |  |      jsr -306(a6)
    dd8e:	|              |  |      move.l d0,26(sp)
    dd92:	|              |  |      move.l 26(sp),d1
    dd96:	|              |  |      movea.l 116(sp),a0
    dd9a:	|              |  |      move.b (a0),d0
    dd9c:	|              |  |      ext.w d0
    dd9e:	|              |  |      movea.w d0,a0
    dda0:	|              |  |      cmpa.l d1,a0
    dda2:	|              |  |  ,-- beq.s ddd6 <fileToStack+0xec>
            Close(fp);
    dda4:	|              |  |  |   move.l 100(sp),22(sp)
    ddaa:	|              |  |  |   move.l 1cde2 <DOSBase>,d0
    ddb0:	|              |  |  |   movea.l d0,a6
    ddb2:	|              |  |  |   move.l 22(sp),d1
    ddb6:	|              |  |  |   jsr -36(a6)
    ddba:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    ddbe:	|              |  |  |   move.l 124(sp),-(sp)
    ddc2:	|              |  |  |   pea 19a74 <PutChar+0x1992>
    ddc8:	|              |  |  |   jsr 17640 <KPrintF>
    ddce:	|              |  |  |   addq.l #8,sp
            return FALSE;
    ddd0:	|              |  |  |   clr.w d0
    ddd2:	+--------------|--|--|-- bra.w e04e <fileToStack+0x364>
        }
        checker++;
    ddd6:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    ddda:	|              |  '----> movea.l 116(sp),a0
    ddde:	|              |         move.b (a0),d0
    dde0:	|              '-------- bne.s dd78 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    dde2:	|                        move.w 1ce8e <saveEncoding>,d0
    dde8:	|  ,-------------------- beq.s de5c <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    ddea:	|  |                     move.l 100(sp),-(sp)
    ddee:	|  |                     jsr e058 <readStringEncoded>
    ddf4:	|  |                     addq.l #4,sp
    ddf6:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    ddfa:	|  |                     pea 19ab5 <PutChar+0x19d3>
    de00:	|  |                     move.l 100(sp),-(sp)
    de04:	|  |                     jsr 1400c <strcmp>
    de0a:	|  |                     addq.l #8,sp
    de0c:	|  |                     tst.l d0
    de0e:	|  |                 ,-- beq.s de42 <fileToStack+0x158>
            Close(fp);
    de10:	|  |                 |   move.l 100(sp),88(sp)
    de16:	|  |                 |   move.l 1cde2 <DOSBase>,d0
    de1c:	|  |                 |   movea.l d0,a6
    de1e:	|  |                 |   move.l 88(sp),d1
    de22:	|  |                 |   jsr -36(a6)
    de26:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    de2a:	|  |                 |   move.l 124(sp),-(sp)
    de2e:	|  |                 |   pea 19ac4 <PutChar+0x19e2>
    de34:	|  |                 |   jsr 17640 <KPrintF>
    de3a:	|  |                 |   addq.l #8,sp
            return FALSE;
    de3c:	|  |                 |   clr.w d0
    de3e:	+--|-----------------|-- bra.w e04e <fileToStack+0x364>
        }
        FreeVec(checker);
    de42:	|  |                 '-> move.l 96(sp),92(sp)
    de48:	|  |                     move.l 1cdda <SysBase>,d0
    de4e:	|  |                     movea.l d0,a6
    de50:	|  |                     movea.l 92(sp),a1
    de54:	|  |                     jsr -690(a6)
        checker = NULL;
    de58:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    de5c:	|  >-------------------> move.w 1ce8e <saveEncoding>,d0
    de62:	|  |     ,-------------- beq.w df96 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    de66:	|  |     |               move.l 100(sp),76(sp)
    de6c:	|  |     |               move.l 1cde2 <DOSBase>,d0
    de72:	|  |     |               movea.l d0,a6
    de74:	|  |     |               move.l 76(sp),d1
    de78:	|  |     |               jsr -306(a6)
    de7c:	|  |     |               move.l d0,72(sp)
    de80:	|  |     |               move.l 72(sp),d0
    de84:	|  |     |               move.b 1ce8c <encode1>,d1
    de8a:	|  |     |               ext.w d1
    de8c:	|  |     |               ext.l d1
    de8e:	|  |     |               move.l d0,d2
    de90:	|  |     |               eor.l d1,d2
    de92:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    de96:	|  |     |               moveq #-1,d0
    de98:	|  |     |               cmp.l 68(sp),d0
    de9c:	|  |  ,--|-------------- beq.w e02c <fileToStack+0x342>

            char i = (char) tmp;
    dea0:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    dea6:	|  |  |  |               move.b 67(sp),d0
    deaa:	|  |  |  |               ext.w d0
    deac:	|  |  |  |               movea.w d0,a0
    deae:	|  |  |  |               moveq #2,d2
    deb0:	|  |  |  |               cmp.l a0,d2
    deb2:	|  |  |  |     ,-------- beq.s df2e <fileToStack+0x244>
    deb4:	|  |  |  |     |         moveq #2,d0
    deb6:	|  |  |  |     |         cmp.l a0,d0
    deb8:	|  |  |  |  ,--|-------- blt.w df64 <fileToStack+0x27a>
    debc:	|  |  |  |  |  |         cmpa.w #0,a0
    dec0:	|  |  |  |  |  |     ,-- beq.s decc <fileToStack+0x1e2>
    dec2:	|  |  |  |  |  |     |   moveq #1,d2
    dec4:	|  |  |  |  |  |     |   cmp.l a0,d2
    dec6:	|  |  |  |  |  |  ,--|-- beq.s df08 <fileToStack+0x21e>
    dec8:	|  |  |  |  +--|--|--|-- bra.w df64 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    decc:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    ded0:	|  |  |  |  |  |  |      jsr e058 <readStringEncoded>
    ded6:	|  |  |  |  |  |  |      addq.l #4,sp
    ded8:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    dedc:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    dee0:	|  |  |  |  |  |  |      lea 14(sp),a0
    dee4:	|  |  |  |  |  |  |      move.l a0,-(sp)
    dee6:	|  |  |  |  |  |  |      jsr 14d82 <makeTextVar>
    deec:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    deee:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    def4:	|  |  |  |  |  |  |      move.l 1cdda <SysBase>,d0
    defa:	|  |  |  |  |  |  |      movea.l d0,a6
    defc:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    df00:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    df04:	|  |  |  |  |  |  |  ,-- bra.w dfbc <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    df08:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    df0c:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    df12:	|  |  |  |  |  |     |   addq.l #4,sp
    df14:	|  |  |  |  |  |     |   move.l d0,-(sp)
    df16:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    df1a:	|  |  |  |  |  |     |   lea 18(sp),a0
    df1e:	|  |  |  |  |  |     |   move.l a0,-(sp)
    df20:	|  |  |  |  |  |     |   jsr 15452 <setVariable>
    df26:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    df2a:	|  |  |  |  |  |     +-- bra.w dfbc <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    df2e:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    df34:	|  |  |  |  |        |   move.l 1cde2 <DOSBase>,d0
    df3a:	|  |  |  |  |        |   movea.l d0,a6
    df3c:	|  |  |  |  |        |   move.l 62(sp),d1
    df40:	|  |  |  |  |        |   jsr -306(a6)
    df44:	|  |  |  |  |        |   move.l d0,58(sp)
    df48:	|  |  |  |  |        |   move.l 58(sp),d0
    df4c:	|  |  |  |  |        |   move.l d0,-(sp)
    df4e:	|  |  |  |  |        |   pea 1 <_start+0x1>
    df52:	|  |  |  |  |        |   lea 18(sp),a0
    df56:	|  |  |  |  |        |   move.l a0,-(sp)
    df58:	|  |  |  |  |        |   jsr 15452 <setVariable>
    df5e:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    df62:	|  |  |  |  |        +-- bra.s dfbc <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    df64:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    df68:	|  |  |  |           |   pea 19b46 <PutChar+0x1a64>
    df6e:	|  |  |  |           |   jsr 17640 <KPrintF>
    df74:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    df76:	|  |  |  |           |   move.l 100(sp),46(sp)
    df7c:	|  |  |  |           |   move.l 1cde2 <DOSBase>,d0
    df82:	|  |  |  |           |   movea.l d0,a6
    df84:	|  |  |  |           |   move.l 46(sp),d1
    df88:	|  |  |  |           |   jsr -36(a6)
    df8c:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    df90:	|  |  |  |           |   clr.w d0
    df92:	+--|--|--|-----------|-- bra.w e04e <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    df96:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    df9a:	|  |  |              |   jsr e11e <readTextPlain>
    dfa0:	|  |  |              |   addq.l #4,sp
    dfa2:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dfa6:	|  |  |        ,-----|-- beq.w e030 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dfaa:	|  |  |        |     |   move.l 80(sp),-(sp)
    dfae:	|  |  |        |     |   lea 14(sp),a0
    dfb2:	|  |  |        |     |   move.l a0,-(sp)
    dfb4:	|  |  |        |     |   jsr 14d82 <makeTextVar>
    dfba:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dfbc:	|  |  |        |     '-> movea.l 128(sp),a0
    dfc0:	|  |  |        |         move.l (a0),d0
    dfc2:	|  |  |        |  ,----- bne.s dff2 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dfc4:	|  |  |        |  |      move.l 128(sp),d0
    dfc8:	|  |  |        |  |      move.l d0,-(sp)
    dfca:	|  |  |        |  |      lea 14(sp),a0
    dfce:	|  |  |        |  |      move.l a0,-(sp)
    dfd0:	|  |  |        |  |      jsr 14422 <addVarToStackQuick>
    dfd6:	|  |  |        |  |      addq.l #8,sp
    dfd8:	|  |  |        |  |      tst.w d0
    dfda:	|  |  |        |  |  ,-- bne.s dfe0 <fileToStack+0x2f6>
    dfdc:	|  |  |        |  |  |   clr.w d0
    dfde:	+--|--|--------|--|--|-- bra.s e04e <fileToStack+0x364>
            sH->last = sH->first;
    dfe0:	|  |  |        |  |  '-> movea.l 128(sp),a0
    dfe4:	|  |  |        |  |      move.l (a0),d0
    dfe6:	|  |  |        |  |      movea.l 128(sp),a0
    dfea:	|  |  |        |  |      move.l d0,4(a0)
    dfee:	|  +--|--------|--|----- bra.w de5c <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dff2:	|  |  |        |  '----> movea.l 128(sp),a0
    dff6:	|  |  |        |         move.l 4(a0),d0
    dffa:	|  |  |        |         addq.l #8,d0
    dffc:	|  |  |        |         move.l d0,-(sp)
    dffe:	|  |  |        |         lea 14(sp),a0
    e002:	|  |  |        |         move.l a0,-(sp)
    e004:	|  |  |        |         jsr 14422 <addVarToStackQuick>
    e00a:	|  |  |        |         addq.l #8,sp
    e00c:	|  |  |        |         tst.w d0
    e00e:	|  |  |        |     ,-- bne.s e014 <fileToStack+0x32a>
    e010:	|  |  |        |     |   clr.w d0
    e012:	+--|--|--------|-----|-- bra.s e04e <fileToStack+0x364>
            sH->last = sH->last->next;
    e014:	|  |  |        |     '-> movea.l 128(sp),a0
    e018:	|  |  |        |         movea.l 4(a0),a0
    e01c:	|  |  |        |         move.l 8(a0),d0
    e020:	|  |  |        |         movea.l 128(sp),a0
    e024:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    e028:	|  '--|--------|-------- bra.w de5c <fileToStack+0x172>
            if (tmp == -1) break;
    e02c:	|     '--------|-------> nop
    e02e:	|              |     ,-- bra.s e032 <fileToStack+0x348>
            if (!line) break;
    e030:	|              '-----|-> nop
        }
    }
    Close(fp);
    e032:	|                    '-> move.l 100(sp),38(sp)
    e038:	|                        move.l 1cde2 <DOSBase>,d0
    e03e:	|                        movea.l d0,a6
    e040:	|                        move.l 38(sp),d1
    e044:	|                        jsr -36(a6)
    e048:	|                        move.l d0,34(sp)
    return TRUE;
    e04c:	|                        moveq #1,d0
}
    e04e:	'----------------------> move.l (sp)+,d2
    e050:	                         movea.l (sp)+,a6
    e052:	                         lea 112(sp),sp
    e056:	                         rts

0000e058 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    e058:	          lea -32(sp),sp
    e05c:	          move.l a6,-(sp)
    e05e:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    e060:	          move.l 44(sp),-(sp)
    e064:	          jsr 6bc <get2bytes>
    e06a:	          addq.l #4,sp
    e06c:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    e070:	          move.l 32(sp),d0
    e074:	          addq.l #1,d0
    e076:	          move.l d0,28(sp)
    e07a:	          clr.l 24(sp)
    e07e:	          move.l 1cdda <SysBase>,d0
    e084:	          movea.l d0,a6
    e086:	          move.l 28(sp),d0
    e08a:	          move.l 24(sp),d1
    e08e:	          jsr -684(a6)
    e092:	          move.l d0,20(sp)
    e096:	          move.l 20(sp),d0
    e09a:	          move.l d0,16(sp)
    if (!s) return NULL;
    e09e:	      ,-- bne.s e0a4 <readStringEncoded+0x4c>
    e0a0:	      |   moveq #0,d0
    e0a2:	,-----|-- bra.s e114 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    e0a4:	|     '-> clr.l 36(sp)
    e0a8:	|     ,-- bra.s e0fa <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    e0aa:	|  ,--|-> move.l 44(sp),12(sp)
    e0b0:	|  |  |   move.l 1cde2 <DOSBase>,d0
    e0b6:	|  |  |   movea.l d0,a6
    e0b8:	|  |  |   move.l 12(sp),d1
    e0bc:	|  |  |   jsr -306(a6)
    e0c0:	|  |  |   move.l d0,8(sp)
    e0c4:	|  |  |   move.l 8(sp),d0
    e0c8:	|  |  |   move.l d0,d1
    e0ca:	|  |  |   move.b 1ce8c <encode1>,d2
    e0d0:	|  |  |   move.l 36(sp),d0
    e0d4:	|  |  |   movea.l 16(sp),a0
    e0d8:	|  |  |   adda.l d0,a0
    e0da:	|  |  |   move.b d1,d0
    e0dc:	|  |  |   eor.b d2,d0
    e0de:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    e0e0:	|  |  |   move.b 1ce8c <encode1>,d0
    e0e6:	|  |  |   move.b d0,d1
    e0e8:	|  |  |   move.b 1ce8d <encode2>,d0
    e0ee:	|  |  |   add.b d1,d0
    e0f0:	|  |  |   move.b d0,1ce8c <encode1>
    for (a = 0; a < len; a++) {
    e0f6:	|  |  |   addq.l #1,36(sp)
    e0fa:	|  |  '-> move.l 36(sp),d0
    e0fe:	|  |      cmp.l 32(sp),d0
    e102:	|  '----- blt.s e0aa <readStringEncoded+0x52>
    }
    s[len] = 0;
    e104:	|         move.l 32(sp),d0
    e108:	|         movea.l 16(sp),a0
    e10c:	|         adda.l d0,a0
    e10e:	|         clr.b (a0)
    return s;
    e110:	|         move.l 16(sp),d0
}
    e114:	'-------> move.l (sp)+,d2
    e116:	          movea.l (sp)+,a6
    e118:	          lea 32(sp),sp
    e11c:	          rts

0000e11e <readTextPlain>:

char *readTextPlain(BPTR fp) {
    e11e:	             lea -104(sp),sp
    e122:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    e126:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    e12a:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    e130:	             move.l 124(sp),106(sp)
    e136:	             clr.l 102(sp)
    e13a:	             clr.l 98(sp)
    e13e:	             move.l 1cde2 <DOSBase>,d0
    e144:	             movea.l d0,a6
    e146:	             move.l 106(sp),d1
    e14a:	             move.l 102(sp),d2
    e14e:	             move.l 98(sp),d3
    e152:	             jsr -66(a6)
    e156:	             move.l d0,94(sp)
    e15a:	             move.l 94(sp),d0
    e15e:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    e162:	   ,-------- bra.s e1a6 <readTextPlain+0x88>
        tmp = FGetC(fp);
    e164:	,--|-------> move.l 124(sp),22(sp)
    e16a:	|  |         move.l 1cde2 <DOSBase>,d0
    e170:	|  |         movea.l d0,a6
    e172:	|  |         move.l 22(sp),d1
    e176:	|  |         jsr -306(a6)
    e17a:	|  |         move.l d0,18(sp)
    e17e:	|  |         move.l 18(sp),d0
    e182:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    e186:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    e18c:	|  |         cmpi.b #10,17(sp)
    e192:	|  |  ,----- beq.s e19c <readTextPlain+0x7e>
    e194:	|  |  |      moveq #-1,d0
    e196:	|  |  |      cmp.l 110(sp),d0
    e19a:	|  |  |  ,-- bne.s e1a2 <readTextPlain+0x84>
            keepGoing = FALSE;
    e19c:	|  |  '--|-> clr.w 114(sp)
    e1a0:	|  +-----|-- bra.s e1a6 <readTextPlain+0x88>
        } else {
            stringSize++;
    e1a2:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    e1a6:	|  '-------> tst.w 114(sp)
    e1aa:	'----------- bne.s e164 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    e1ac:	             tst.l 116(sp)
    e1b0:	         ,-- bne.s e1c0 <readTextPlain+0xa2>
    e1b2:	         |   moveq #-1,d0
    e1b4:	         |   cmp.l 110(sp),d0
    e1b8:	         +-- bne.s e1c0 <readTextPlain+0xa2>
        return NULL;
    e1ba:	         |   moveq #0,d0
    e1bc:	      ,--|-- bra.w e2a6 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    e1c0:	      |  '-> move.l 124(sp),86(sp)
    e1c6:	      |      move.l 90(sp),82(sp)
    e1cc:	      |      moveq #-1,d0
    e1ce:	      |      move.l d0,78(sp)
    e1d2:	      |      move.l 1cde2 <DOSBase>,d0
    e1d8:	      |      movea.l d0,a6
    e1da:	      |      move.l 86(sp),d1
    e1de:	      |      move.l 82(sp),d2
    e1e2:	      |      move.l 78(sp),d3
    e1e6:	      |      jsr -66(a6)
    e1ea:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e1ee:	      |      move.l 116(sp),d0
    e1f2:	      |      addq.l #1,d0
    e1f4:	      |      move.l d0,70(sp)
    e1f8:	      |      clr.l 66(sp)
    e1fc:	      |      move.l 1cdda <SysBase>,d0
    e202:	      |      movea.l d0,a6
    e204:	      |      move.l 70(sp),d0
    e208:	      |      move.l 66(sp),d1
    e20c:	      |      jsr -684(a6)
    e210:	      |      move.l d0,62(sp)
    e214:	      |      move.l 62(sp),d0
    e218:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e21c:	      |  ,-- bne.s e224 <readTextPlain+0x106>
    e21e:	      |  |   moveq #0,d0
    e220:	      +--|-- bra.w e2a6 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e224:	      |  '-> move.l 124(sp),54(sp)
    e22a:	      |      move.l 58(sp),50(sp)
    e230:	      |      moveq #1,d0
    e232:	      |      move.l d0,46(sp)
    e236:	      |      move.l 116(sp),42(sp)
    e23c:	      |      move.l 1cde2 <DOSBase>,d0
    e242:	      |      movea.l d0,a6
    e244:	      |      move.l 54(sp),d1
    e248:	      |      move.l 50(sp),d2
    e24c:	      |      move.l 46(sp),d3
    e250:	      |      move.l 42(sp),d4
    e254:	      |      jsr -324(a6)
    e258:	      |      move.l d0,38(sp)
    e25c:	      |      move.l 38(sp),d0
    e260:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e264:	      |      move.l 34(sp),d0
    e268:	      |      cmp.l 116(sp),d0
    e26c:	      |  ,-- beq.s e27c <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e26e:	      |  |   pea 19b7b <PutChar+0x1a99>
    e274:	      |  |   jsr 17640 <KPrintF>
    e27a:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e27c:	      |  '-> move.l 124(sp),30(sp)
    e282:	      |      move.l 1cde2 <DOSBase>,d0
    e288:	      |      movea.l d0,a6
    e28a:	      |      move.l 30(sp),d1
    e28e:	      |      jsr -306(a6)
    e292:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e296:	      |      move.l 116(sp),d0
    e29a:	      |      movea.l 58(sp),a0
    e29e:	      |      adda.l d0,a0
    e2a0:	      |      clr.b (a0)
    }

    return reply;
    e2a2:	      |      move.l 58(sp),d0
}
    e2a6:	      '----> movem.l (sp)+,d2-d4/a6
    e2aa:	             lea 104(sp),sp
    e2ae:	             rts

0000e2b0 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e2b0:	                      lea -144(sp),sp
    e2b4:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e2b8:	                      move.l 160(sp),148(sp)
    e2be:	                      move.l #1006,144(sp)
    e2c6:	                      move.l 1cde2 <DOSBase>,d0
    e2cc:	                      movea.l d0,a6
    e2ce:	                      move.l 148(sp),d1
    e2d2:	                      move.l 144(sp),d2
    e2d6:	                      jsr -30(a6)
    e2da:	                      move.l d0,140(sp)
    e2de:	                      move.l 140(sp),d0
    e2e2:	                      move.l d0,136(sp)

    if (!fp) {
    e2e6:	                  ,-- bne.s e300 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e2e8:	                  |   move.l 160(sp),-(sp)
    e2ec:	                  |   pea 19b9c <PutChar+0x1aba>
    e2f2:	                  |   jsr 17640 <KPrintF>
    e2f8:	                  |   addq.l #8,sp
        return FALSE;
    e2fa:	                  |   clr.w d0
    e2fc:	,-----------------|-- bra.w e5bc <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e300:	|                 '-> movea.l 164(sp),a0
    e304:	|                     movea.l 4(a0),a0
    e308:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e30c:	|                     move.w 1ce8e <saveEncoding>,d0
    e312:	|                     move.l d0,d0
    e314:	|                     move.b d0,1ce8c <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e31a:	|                     move.w 1ce8e <saveEncoding>,d0
    e320:	|                     lsr.w #8,d0
    e322:	|                     move.l d0,d0
    e324:	|                     move.b d0,1ce8d <encode2>

    if (saveEncoding) {
    e32a:	|                     move.w 1ce8e <saveEncoding>,d0
    e330:	|                 ,-- beq.s e382 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e332:	|                 |   move.l 136(sp),116(sp)
    e338:	|                 |   move.l #105014,112(sp)
    e340:	|                 |   moveq #99,d0
    e342:	|                 |   not.b d0
    e344:	|                 |   add.l sp,d0
    e346:	|                 |   addi.l #-144,d0
    e34c:	|                 |   move.l d0,108(sp)
    e350:	|                 |   move.l 1cde2 <DOSBase>,d0
    e356:	|                 |   movea.l d0,a6
    e358:	|                 |   move.l 116(sp),d1
    e35c:	|                 |   move.l 112(sp),d2
    e360:	|                 |   move.l 108(sp),d3
    e364:	|                 |   jsr -354(a6)
    e368:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e36c:	|                 |   move.l 136(sp),-(sp)
    e370:	|                 |   pea 19ab5 <PutChar+0x19d3>
    e376:	|                 |   jsr e5c6 <writeStringEncoded>
    e37c:	|                 |   addq.l #8,sp
    e37e:	|  ,--------------|-- bra.w e594 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e382:	|  |              '-> move.l 136(sp),132(sp)
    e388:	|  |                  move.l #105040,128(sp)
    e390:	|  |                  moveq #99,d1
    e392:	|  |                  not.b d1
    e394:	|  |                  add.l sp,d1
    e396:	|  |                  addi.l #-144,d1
    e39c:	|  |                  move.l d1,124(sp)
    e3a0:	|  |                  move.l 1cde2 <DOSBase>,d0
    e3a6:	|  |                  movea.l d0,a6
    e3a8:	|  |                  move.l 132(sp),d1
    e3ac:	|  |                  move.l 128(sp),d2
    e3b0:	|  |                  move.l 124(sp),d3
    e3b4:	|  |                  jsr -354(a6)
    e3b8:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e3bc:	|  +----------------- bra.w e594 <stackToFile+0x2e4>
        if (saveEncoding) {
    e3c0:	|  |  ,-------------> move.w 1ce8e <saveEncoding>,d0
    e3c6:	|  |  |     ,-------- beq.w e518 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e3ca:	|  |  |     |         movea.l 152(sp),a0
    e3ce:	|  |  |     |         move.l (a0),d0
    e3d0:	|  |  |     |         moveq #1,d1
    e3d2:	|  |  |     |         cmp.l d0,d1
    e3d4:	|  |  |     |     ,-- beq.s e424 <stackToFile+0x174>
    e3d6:	|  |  |     |     |   moveq #3,d1
    e3d8:	|  |  |     |     |   cmp.l d0,d1
    e3da:	|  |  |     |  ,--|-- bne.w e4e6 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e3de:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e3e4:	|  |  |     |  |  |   move.b 1ce8c <encode1>,d0
    e3ea:	|  |  |     |  |  |   ext.w d0
    e3ec:	|  |  |     |  |  |   movea.w d0,a0
    e3ee:	|  |  |     |  |  |   move.l a0,72(sp)
    e3f2:	|  |  |     |  |  |   move.l 1cde2 <DOSBase>,d0
    e3f8:	|  |  |     |  |  |   movea.l d0,a6
    e3fa:	|  |  |     |  |  |   move.l 76(sp),d1
    e3fe:	|  |  |     |  |  |   move.l 72(sp),d2
    e402:	|  |  |     |  |  |   jsr -312(a6)
    e406:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e40a:	|  |  |     |  |  |   movea.l 152(sp),a0
    e40e:	|  |  |     |  |  |   move.l 4(a0),d0
    e412:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e416:	|  |  |     |  |  |   move.l d0,-(sp)
    e418:	|  |  |     |  |  |   jsr e5c6 <writeStringEncoded>
    e41e:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e420:	|  |  |  ,--|--|--|-- bra.w e58a <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e424:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e428:	|  |  |  |  |  |      move.l 4(a0),d0
    e42c:	|  |  |  |  |  |  ,-- bmi.s e49c <stackToFile+0x1ec>
    e42e:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e432:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e436:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e43c:	|  |  |  |  |  |  +-- bgt.s e49c <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e43e:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e444:	|  |  |  |  |  |  |   move.b 1ce8c <encode1>,d0
    e44a:	|  |  |  |  |  |  |   eori.b #2,d0
    e44e:	|  |  |  |  |  |  |   ext.w d0
    e450:	|  |  |  |  |  |  |   movea.w d0,a0
    e452:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e456:	|  |  |  |  |  |  |   move.l 1cde2 <DOSBase>,d0
    e45c:	|  |  |  |  |  |  |   movea.l d0,a6
    e45e:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e462:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e466:	|  |  |  |  |  |  |   jsr -312(a6)
    e46a:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e46e:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e474:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e478:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e47e:	|  |  |  |  |  |  |   move.l 1cde2 <DOSBase>,d0
    e484:	|  |  |  |  |  |  |   movea.l d0,a6
    e486:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e48a:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e48e:	|  |  |  |  |  |  |   jsr -312(a6)
    e492:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e496:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e498:	|  |  |  +--|--|--|-- bra.w e58a <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e49c:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    e4a2:	|  |  |  |  |  |      move.b 1ce8c <encode1>,d0
    e4a8:	|  |  |  |  |  |      eori.b #1,d0
    e4ac:	|  |  |  |  |  |      ext.w d0
    e4ae:	|  |  |  |  |  |      movea.w d0,a0
    e4b0:	|  |  |  |  |  |      move.l a0,36(sp)
    e4b4:	|  |  |  |  |  |      move.l 1cde2 <DOSBase>,d0
    e4ba:	|  |  |  |  |  |      movea.l d0,a6
    e4bc:	|  |  |  |  |  |      move.l 40(sp),d1
    e4c0:	|  |  |  |  |  |      move.l 36(sp),d2
    e4c4:	|  |  |  |  |  |      jsr -312(a6)
    e4c8:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e4cc:	|  |  |  |  |  |      movea.l 152(sp),a0
    e4d0:	|  |  |  |  |  |      move.l 4(a0),d0
    e4d4:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e4d8:	|  |  |  |  |  |      move.l d0,-(sp)
    e4da:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e4e0:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e4e2:	|  |  |  +--|--|----- bra.w e58a <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e4e6:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e4ea:	|  |  |  |  |         pea 19bae <PutChar+0x1acc>
    e4f0:	|  |  |  |  |         jsr 17640 <KPrintF>
    e4f6:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e4f8:	|  |  |  |  |         move.l 136(sp),28(sp)
    e4fe:	|  |  |  |  |         move.l 1cde2 <DOSBase>,d0
    e504:	|  |  |  |  |         movea.l d0,a6
    e506:	|  |  |  |  |         move.l 28(sp),d1
    e50a:	|  |  |  |  |         jsr -36(a6)
    e50e:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e512:	|  |  |  |  |         clr.w d0
    e514:	+--|--|--|--|-------- bra.w e5bc <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e518:	|  |  |  |  '-------> move.l 152(sp),d0
    e51c:	|  |  |  |            move.l d0,-(sp)
    e51e:	|  |  |  |            jsr 15136 <getTextFromAnyVar>
    e524:	|  |  |  |            addq.l #4,sp
    e526:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e52a:	|  |  |  |     ,----- beq.s e59e <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e52c:	|  |  |  |     |      movea.l 100(sp),a0
    e530:	|  |  |  |     |      move.b (a0),d0
    e532:	|  |  |  |     |      ext.w d0
    e534:	|  |  |  |     |      movea.w d0,a0
    e536:	|  |  |  |     |      move.l a0,12(sp)
    e53a:	|  |  |  |     |      move.l 136(sp),96(sp)
    e540:	|  |  |  |     |      move.l #105482,92(sp)
    e548:	|  |  |  |     |      moveq #99,d0
    e54a:	|  |  |  |     |      not.b d0
    e54c:	|  |  |  |     |      add.l sp,d0
    e54e:	|  |  |  |     |      addi.l #-144,d0
    e554:	|  |  |  |     |      move.l d0,88(sp)
    e558:	|  |  |  |     |      move.l 1cde2 <DOSBase>,d0
    e55e:	|  |  |  |     |      movea.l d0,a6
    e560:	|  |  |  |     |      move.l 96(sp),d1
    e564:	|  |  |  |     |      move.l 92(sp),d2
    e568:	|  |  |  |     |      move.l 88(sp),d3
    e56c:	|  |  |  |     |      jsr -354(a6)
    e570:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e574:	|  |  |  |     |      move.l 100(sp),80(sp)
    e57a:	|  |  |  |     |      move.l 1cdda <SysBase>,d0
    e580:	|  |  |  |     |      movea.l d0,a6
    e582:	|  |  |  |     |      movea.l 80(sp),a1
    e586:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e58a:	|  |  |  '-----|----> movea.l 152(sp),a0
    e58e:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e594:	|  '--|--------|----> tst.l 152(sp)
    e598:	|     '--------|----- bne.w e3c0 <stackToFile+0x110>
    e59c:	|              |  ,-- bra.s e5a0 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e59e:	|              '--|-> nop
    }
    Close(fp);
    e5a0:	|                 '-> move.l 136(sp),20(sp)
    e5a6:	|                     move.l 1cde2 <DOSBase>,d0
    e5ac:	|                     movea.l d0,a6
    e5ae:	|                     move.l 20(sp),d1
    e5b2:	|                     jsr -36(a6)
    e5b6:	|                     move.l d0,16(sp)
    return TRUE;
    e5ba:	|                     moveq #1,d0
}
    e5bc:	'-------------------> movem.l (sp)+,d2-d3/a6
    e5c0:	                      lea 144(sp),sp
    e5c4:	                      rts

0000e5c6 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e5c6:	       lea -20(sp),sp
    e5ca:	       move.l a6,-(sp)
    e5cc:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e5ce:	       move.l 32(sp),-(sp)
    e5d2:	       jsr 1404c <strlen>
    e5d8:	       addq.l #4,sp
    e5da:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e5de:	       move.l 36(sp),-(sp)
    e5e2:	       move.l 24(sp),-(sp)
    e5e6:	       jsr 8d0 <put2bytes>
    e5ec:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e5ee:	       clr.l 24(sp)
    e5f2:	   ,-- bra.s e648 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e5f4:	,--|-> move.l 36(sp),16(sp)
    e5fa:	|  |   move.l 24(sp),d0
    e5fe:	|  |   movea.l 32(sp),a0
    e602:	|  |   adda.l d0,a0
    e604:	|  |   move.b (a0),d1
    e606:	|  |   move.b 1ce8c <encode1>,d0
    e60c:	|  |   eor.b d1,d0
    e60e:	|  |   ext.w d0
    e610:	|  |   movea.w d0,a0
    e612:	|  |   move.l a0,12(sp)
    e616:	|  |   move.l 1cde2 <DOSBase>,d0
    e61c:	|  |   movea.l d0,a6
    e61e:	|  |   move.l 16(sp),d1
    e622:	|  |   move.l 12(sp),d2
    e626:	|  |   jsr -312(a6)
    e62a:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e62e:	|  |   move.b 1ce8c <encode1>,d0
    e634:	|  |   move.b d0,d1
    e636:	|  |   move.b 1ce8d <encode2>,d0
    e63c:	|  |   add.b d1,d0
    e63e:	|  |   move.b d0,1ce8c <encode1>
	for (a = 0; a < len; a ++) {
    e644:	|  |   addq.l #1,24(sp)
    e648:	|  '-> move.l 24(sp),d0
    e64c:	|      cmp.l 20(sp),d0
    e650:	'----- blt.s e5f4 <writeStringEncoded+0x2e>
	}
}
    e652:	       nop
    e654:	       nop
    e656:	       move.l (sp)+,d2
    e658:	       movea.l (sp)+,a6
    e65a:	       lea 20(sp),sp
    e65e:	       rts

0000e660 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e660:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e662:	                   tst.l 8(sp)
    e666:	               ,-- bne.s e66c <failSecurityCheck+0xc>
    e668:	               |   moveq #1,d0
    e66a:	,--------------|-- bra.s e6ea <failSecurityCheck+0x8a>

	int a = 0;
    e66c:	|              '-> clr.l (sp)

	while (fn[a]) {
    e66e:	|     ,----------- bra.s e6dc <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e670:	|  ,--|----------> move.l (sp),d0
    e672:	|  |  |            movea.l 8(sp),a0
    e676:	|  |  |            adda.l d0,a0
    e678:	|  |  |            move.b (a0),d0
    e67a:	|  |  |            ext.w d0
    e67c:	|  |  |            movea.w d0,a0
    e67e:	|  |  |            moveq #124,d0
    e680:	|  |  |            cmp.l a0,d0
    e682:	|  |  |     ,----- beq.s e6c4 <failSecurityCheck+0x64>
    e684:	|  |  |     |      moveq #124,d1
    e686:	|  |  |     |      cmp.l a0,d1
    e688:	|  |  |  ,--|----- blt.s e6da <failSecurityCheck+0x7a>
    e68a:	|  |  |  |  |      moveq #92,d0
    e68c:	|  |  |  |  |      cmp.l a0,d0
    e68e:	|  |  |  |  +----- beq.s e6c4 <failSecurityCheck+0x64>
    e690:	|  |  |  |  |      moveq #92,d1
    e692:	|  |  |  |  |      cmp.l a0,d1
    e694:	|  |  |  +--|----- blt.s e6da <failSecurityCheck+0x7a>
    e696:	|  |  |  |  |      moveq #60,d0
    e698:	|  |  |  |  |      cmp.l a0,d0
    e69a:	|  |  |  |  |  ,-- blt.s e6ba <failSecurityCheck+0x5a>
    e69c:	|  |  |  |  |  |   moveq #34,d1
    e69e:	|  |  |  |  |  |   cmp.l a0,d1
    e6a0:	|  |  |  +--|--|-- bgt.s e6da <failSecurityCheck+0x7a>
    e6a2:	|  |  |  |  |  |   moveq #-34,d1
    e6a4:	|  |  |  |  |  |   add.l a0,d1
    e6a6:	|  |  |  |  |  |   move.l #83894529,d0
    e6ac:	|  |  |  |  |  |   lsr.l d1,d0
    e6ae:	|  |  |  |  |  |   moveq #1,d1
    e6b0:	|  |  |  |  |  |   and.l d1,d0
    e6b2:	|  |  |  |  |  |   sne d0
    e6b4:	|  |  |  |  |  |   neg.b d0
    e6b6:	|  |  |  |  +--|-- bne.s e6c4 <failSecurityCheck+0x64>
    e6b8:	|  |  |  +--|--|-- bra.s e6da <failSecurityCheck+0x7a>
    e6ba:	|  |  |  |  |  '-> lea -62(a0),a0
    e6be:	|  |  |  |  |      moveq #1,d0
    e6c0:	|  |  |  |  |      cmp.l a0,d0
    e6c2:	|  |  |  +--|----- bcs.s e6da <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e6c4:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e6c8:	|  |  |  |         pea 19c0e <PutChar+0x1b2c>
    e6ce:	|  |  |  |         jsr 17640 <KPrintF>
    e6d4:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e6d6:	|  |  |  |         moveq #1,d0
    e6d8:	+--|--|--|-------- bra.s e6ea <failSecurityCheck+0x8a>
		}
		a++;
    e6da:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e6dc:	|  |  '----------> move.l (sp),d0
    e6de:	|  |               movea.l 8(sp),a0
    e6e2:	|  |               adda.l d0,a0
    e6e4:	|  |               move.b (a0),d0
    e6e6:	|  '-------------- bne.s e670 <failSecurityCheck+0x10>
	}
	return FALSE;
    e6e8:	|                  clr.w d0
}
    e6ea:	'----------------> addq.l #4,sp
    e6ec:	                   rts

0000e6ee <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e6ee:	             lea -24(sp),sp
    e6f2:	             move.l a6,-(sp)
    e6f4:	             move.l 40(sp),d0
    e6f8:	             move.w d0,d0
    e6fa:	             move.w d0,6(sp)
	int fileNum = -1;
    e6fe:	             moveq #-1,d0
    e700:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e704:	             jsr 6df8 <killSpeechTimers>

	switch (numParams) {
    e70a:	             moveq #2,d0
    e70c:	             cmp.l 32(sp),d0
    e710:	      ,----- beq.s e754 <sayCore+0x66>
    e712:	      |      moveq #3,d0
    e714:	      |      cmp.l 32(sp),d0
    e718:	,-----|----- bne.w e836 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e71c:	|     |      movea.l 36(sp),a0
    e720:	|     |      move.l 24(a0),d0
    e724:	|     |      move.l d0,-(sp)
    e726:	|     |      pea 5 <_start+0x5>
    e72a:	|     |      lea 20(sp),a0
    e72e:	|     |      move.l a0,-(sp)
    e730:	|     |      jsr 14b60 <getValueType>
    e736:	|     |      lea 12(sp),sp
    e73a:	|     |      tst.w d0
    e73c:	|     |  ,-- bne.s e744 <sayCore+0x56>
    e73e:	|     |  |   moveq #1,d0
    e740:	|  ,--|--|-- bra.w e846 <sayCore+0x158>
			trimStack (&fun -> stack);
    e744:	|  |  |  '-> moveq #24,d0
    e746:	|  |  |      add.l 36(sp),d0
    e74a:	|  |  |      move.l d0,-(sp)
    e74c:	|  |  |      jsr 154e4 <trimStack>
    e752:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e754:	|  |  '----> movea.l 36(sp),a0
    e758:	|  |         move.l 24(a0),d0
    e75c:	|  |         move.l d0,-(sp)
    e75e:	|  |         jsr 15136 <getTextFromAnyVar>
    e764:	|  |         addq.l #4,sp
    e766:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e76a:	|  |     ,-- bne.s e772 <sayCore+0x84>
    e76c:	|  |     |   moveq #1,d0
    e76e:	|  +-----|-- bra.w e846 <sayCore+0x158>
			trimStack (&fun -> stack);
    e772:	|  |     '-> moveq #24,d0
    e774:	|  |         add.l 36(sp),d0
    e778:	|  |         move.l d0,-(sp)
    e77a:	|  |         jsr 154e4 <trimStack>
    e780:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e782:	|  |         movea.l 36(sp),a0
    e786:	|  |         move.l 24(a0),d0
    e78a:	|  |         move.l d0,-(sp)
    e78c:	|  |         pea 7 <_start+0x7>
    e790:	|  |         lea 16(sp),a0
    e794:	|  |         move.l a0,-(sp)
    e796:	|  |         jsr 14b60 <getValueType>
    e79c:	|  |         lea 12(sp),sp
    e7a0:	|  |         tst.w d0
    e7a2:	|  |     ,-- bne.s e7aa <sayCore+0xbc>
    e7a4:	|  |     |   moveq #1,d0
    e7a6:	|  +-----|-- bra.w e846 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e7aa:	|  |     '-> movea.l 36(sp),a0
    e7ae:	|  |         move.l 24(a0),d0
    e7b2:	|  |         move.l d0,-(sp)
    e7b4:	|  |         pea 7 <_start+0x7>
    e7b8:	|  |         lea 16(sp),a0
    e7bc:	|  |         move.l a0,-(sp)
    e7be:	|  |         jsr 14b60 <getValueType>
    e7c4:	|  |         lea 12(sp),sp
    e7c8:	|  |         tst.w d0
    e7ca:	|  |     ,-- bne.s e7d0 <sayCore+0xe2>
    e7cc:	|  |     |   moveq #1,d0
    e7ce:	|  +-----|-- bra.s e846 <sayCore+0x158>
			trimStack (&fun -> stack);
    e7d0:	|  |     '-> moveq #24,d0
    e7d2:	|  |         add.l 36(sp),d0
    e7d6:	|  |         move.l d0,-(sp)
    e7d8:	|  |         jsr 154e4 <trimStack>
    e7de:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e7e0:	|  |         movea.w 6(sp),a0
    e7e4:	|  |         move.l 12(sp),d1
    e7e8:	|  |         move.l 8(sp),d0
    e7ec:	|  |         move.l a0,-(sp)
    e7ee:	|  |         move.l d1,-(sp)
    e7f0:	|  |         move.l d0,-(sp)
    e7f2:	|  |         move.l 36(sp),-(sp)
    e7f6:	|  |         jsr 4560 <wrapSpeech>
    e7fc:	|  |         lea 16(sp),sp
    e800:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e804:	|  |         movea.l 36(sp),a0
    e808:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e80e:	|  |         movea.l 36(sp),a0
    e812:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e818:	|  |         move.l 24(sp),16(sp)
    e81e:	|  |         move.l 1cdda <SysBase>,d0
    e824:	|  |         movea.l d0,a6
    e826:	|  |         movea.l 16(sp),a1
    e82a:	|  |         jsr -690(a6)
			newText = NULL;
    e82e:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e832:	|  |         moveq #0,d0
    e834:	|  +-------- bra.s e846 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e836:	'--|-------> pea 19c94 <PutChar+0x1bb2>
    e83c:	   |         jsr 17640 <KPrintF>
    e842:	   |         addq.l #4,sp
	return BR_ERROR;
    e844:	   |         moveq #1,d0
}
    e846:	   '-------> movea.l (sp)+,a6
    e848:	             lea 24(sp),sp
    e84c:	             rts

0000e84e <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e84e:	pea 1 <_start+0x1>
    e852:	move.l 12(sp),-(sp)
    e856:	move.l 12(sp),-(sp)
    e85a:	jsr e6ee <sayCore>
    e860:	lea 12(sp),sp
}
    e864:	rts

0000e866 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e866:	clr.l -(sp)
    e868:	move.l 12(sp),-(sp)
    e86c:	move.l 12(sp),-(sp)
    e870:	jsr e6ee <sayCore>
    e876:	lea 12(sp),sp
}
    e87a:	rts

0000e87c <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e87c:	jsr 1552c <freeze>
	freezeSubs (); 
    e882:	jsr 63e8 <freezeSubs>
	fun -> freezerLevel = 0;
    e888:	movea.l 8(sp),a0
    e88c:	clr.b 56(a0)
	return BR_CONTINUE;
    e890:	moveq #2,d0
}
    e892:	rts

0000e894 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e894:	jsr 15730 <unfreeze>
	unfreezeSubs (); 
    e89a:	jsr 793a <unfreezeSubs>
	return BR_CONTINUE;
    e8a0:	moveq #2,d0
}
    e8a2:	rts

0000e8a4 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e8a4:	jsr 1570c <howFrozen>
    e8aa:	move.l d0,d1
    e8ac:	moveq #28,d0
    e8ae:	add.l 8(sp),d0
    e8b2:	move.l d1,-(sp)
    e8b4:	pea 1 <_start+0x1>
    e8b8:	move.l d0,-(sp)
    e8ba:	jsr 15452 <setVariable>
    e8c0:	lea 12(sp),sp
	return BR_CONTINUE; 
    e8c4:	moveq #2,d0
}
    e8c6:	rts

0000e8c8 <builtIn_setCursor>:

builtIn(setCursor)
{
    e8c8:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e8ca:	movea.l 12(sp),a0
    e8ce:	move.l 24(a0),d0
    e8d2:	move.l d0,-(sp)
    e8d4:	jsr 15038 <getAnimationFromVar>
    e8da:	addq.l #4,sp
    e8dc:	move.l d0,(sp)
	pickAnimCursor (aa);
    e8de:	move.l (sp),-(sp)
    e8e0:	jsr d6c <pickAnimCursor>
    e8e6:	addq.l #4,sp
	trimStack (&fun -> stack);
    e8e8:	moveq #24,d0
    e8ea:	add.l 12(sp),d0
    e8ee:	move.l d0,-(sp)
    e8f0:	jsr 154e4 <trimStack>
    e8f6:	addq.l #4,sp
	return BR_CONTINUE;
    e8f8:	moveq #2,d0
}
    e8fa:	addq.l #4,sp
    e8fc:	rts

0000e8fe <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e8fe:	move.l 1cd96 <input+0xa>,d1
    e904:	move.l 1ce90 <cameraX>,d0
    e90a:	add.l d0,d1
    e90c:	moveq #28,d0
    e90e:	add.l 8(sp),d0
    e912:	move.l d1,-(sp)
    e914:	pea 1 <_start+0x1>
    e918:	move.l d0,-(sp)
    e91a:	jsr 15452 <setVariable>
    e920:	lea 12(sp),sp
	return BR_CONTINUE;
    e924:	moveq #2,d0
}
    e926:	rts

0000e928 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e928:	move.l 1cd9a <input+0xe>,d1
    e92e:	move.l 1ce94 <cameraY>,d0
    e934:	add.l d0,d1
    e936:	moveq #28,d0
    e938:	add.l 8(sp),d0
    e93c:	move.l d1,-(sp)
    e93e:	pea 1 <_start+0x1>
    e942:	move.l d0,-(sp)
    e944:	jsr 15452 <setVariable>
    e94a:	lea 12(sp),sp
	return BR_CONTINUE;
    e94e:	moveq #2,d0
}
    e950:	rts

0000e952 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e952:	move.l 1cd96 <input+0xa>,d0
    e958:	move.l d0,-(sp)
    e95a:	jsr 17a72 <__floatsisf>
    e960:	addq.l #4,sp
    e962:	move.l d0,d1
    e964:	move.l 1c776 <cameraZoom>,d0
    e96a:	move.l d0,-(sp)
    e96c:	move.l d1,-(sp)
    e96e:	jsr 17b24 <__mulsf3>
    e974:	addq.l #8,sp
    e976:	move.l d0,-(sp)
    e978:	jsr 17a0a <__fixsfsi>
    e97e:	addq.l #4,sp
    e980:	move.l d0,d1
    e982:	moveq #28,d0
    e984:	add.l 8(sp),d0
    e988:	move.l d1,-(sp)
    e98a:	pea 1 <_start+0x1>
    e98e:	move.l d0,-(sp)
    e990:	jsr 15452 <setVariable>
    e996:	lea 12(sp),sp
	return BR_CONTINUE;
    e99a:	moveq #2,d0
}
    e99c:	rts

0000e99e <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e99e:	move.l 1cd9a <input+0xe>,d0
    e9a4:	move.l d0,-(sp)
    e9a6:	jsr 17a72 <__floatsisf>
    e9ac:	addq.l #4,sp
    e9ae:	move.l d0,d1
    e9b0:	move.l 1c776 <cameraZoom>,d0
    e9b6:	move.l d0,-(sp)
    e9b8:	move.l d1,-(sp)
    e9ba:	jsr 17b24 <__mulsf3>
    e9c0:	addq.l #8,sp
    e9c2:	move.l d0,-(sp)
    e9c4:	jsr 17a0a <__fixsfsi>
    e9ca:	addq.l #4,sp
    e9cc:	move.l d0,d1
    e9ce:	moveq #28,d0
    e9d0:	add.l 8(sp),d0
    e9d4:	move.l d1,-(sp)
    e9d6:	pea 1 <_start+0x1>
    e9da:	move.l d0,-(sp)
    e9dc:	jsr 15452 <setVariable>
    e9e2:	lea 12(sp),sp
	return BR_CONTINUE;
    e9e6:	moveq #2,d0
}
    e9e8:	rts

0000e9ea <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e9ea:	jsr 896c <statusBarText>
    e9f0:	move.l d0,d1
    e9f2:	moveq #28,d0
    e9f4:	add.l 8(sp),d0
    e9f8:	move.l d1,-(sp)
    e9fa:	move.l d0,-(sp)
    e9fc:	jsr 14d82 <makeTextVar>
    ea02:	addq.l #8,sp
	return BR_CONTINUE;
    ea04:	moveq #2,d0
}
    ea06:	rts

0000ea08 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    ea08:	       lea -20(sp),sp
    ea0c:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ea0e:	       movea.l 32(sp),a0
    ea12:	       move.l 24(a0),d0
    ea16:	       move.l d0,-(sp)
    ea18:	       jsr 15136 <getTextFromAnyVar>
    ea1e:	       addq.l #4,sp
    ea20:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    ea24:	   ,-- bne.s ea2c <builtIn_getMatchingFiles+0x24>
    ea26:	   |   moveq #1,d0
    ea28:	,--|-- bra.w eaee <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    ea2c:	|  '-> moveq #24,d0
    ea2e:	|      add.l 32(sp),d0
    ea32:	|      move.l d0,-(sp)
    ea34:	|      jsr 154e4 <trimStack>
    ea3a:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    ea3c:	|      moveq #28,d0
    ea3e:	|      add.l 32(sp),d0
    ea42:	|      move.l d0,-(sp)
    ea44:	|      jsr 14dae <unlinkVar>
    ea4a:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    ea4c:	|      movea.l 32(sp),a0
    ea50:	|      moveq #6,d0
    ea52:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    ea56:	|      moveq #12,d0
    ea58:	|      move.l d0,16(sp)
    ea5c:	|      clr.l 12(sp)
    ea60:	|      move.l 1cdda <SysBase>,d0
    ea66:	|      movea.l d0,a6
    ea68:	|      move.l 16(sp),d0
    ea6c:	|      move.l 12(sp),d1
    ea70:	|      jsr -684(a6)
    ea74:	|      move.l d0,8(sp)
    ea78:	|      move.l 8(sp),d0
    ea7c:	|      movea.l 32(sp),a0
    ea80:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    ea84:	|      moveq #32,d0
    ea86:	|      add.l 32(sp),d0
    ea8a:	|  ,-- bne.s ea90 <builtIn_getMatchingFiles+0x88>
    ea8c:	|  |   moveq #1,d0
    ea8e:	+--|-- bra.s eaee <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    ea90:	|  '-> movea.l 32(sp),a0
    ea94:	|      movea.l 32(a0),a0
    ea98:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    ea9a:	|      movea.l 32(sp),a0
    ea9e:	|      movea.l 32(a0),a0
    eaa2:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    eaa6:	|      movea.l 32(sp),a0
    eaaa:	|      movea.l 32(a0),a0
    eaae:	|      moveq #1,d0
    eab0:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    eab4:	|      movea.l 32(sp),a0
    eab8:	|      move.l 32(a0),d0
    eabc:	|      move.l 20(sp),-(sp)
    eac0:	|      move.l d0,-(sp)
    eac2:	|      jsr 1491c <getSavedGamesStack>
    eac8:	|      addq.l #8,sp
    eaca:	|      tst.w d0
    eacc:	|  ,-- bne.s ead2 <builtIn_getMatchingFiles+0xca>
    eace:	|  |   moveq #1,d0
    ead0:	+--|-- bra.s eaee <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    ead2:	|  '-> move.l 20(sp),4(sp)
    ead8:	|      move.l 1cdda <SysBase>,d0
    eade:	|      movea.l d0,a6
    eae0:	|      movea.l 4(sp),a1
    eae4:	|      jsr -690(a6)
	newText = NULL;
    eae8:	|      clr.l 20(sp)
	return BR_CONTINUE;
    eaec:	|      moveq #2,d0
}
    eaee:	'----> movea.l (sp)+,a6
    eaf0:	       lea 20(sp),sp
    eaf4:	       rts

0000eaf6 <builtIn_saveGame>:

builtIn(saveGame)
{
    eaf6:	       lea -12(sp),sp
    eafa:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    eafc:	       movea.l 24(sp),a0
    eb00:	       move.l 24(a0),d0
    eb04:	       move.l d0,-(sp)
    eb06:	       jsr 15136 <getTextFromAnyVar>
    eb0c:	       addq.l #4,sp
    eb0e:	       move.l d0,1cda6 <loadNow>
    trimStack(&fun->stack);
    eb14:	       moveq #24,d0
    eb16:	       add.l 24(sp),d0
    eb1a:	       move.l d0,-(sp)
    eb1c:	       jsr 154e4 <trimStack>
    eb22:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    eb24:	       move.l 1cda6 <loadNow>,d0
    eb2a:	       move.l d0,-(sp)
    eb2c:	       jsr 2fe <encodeFilename>
    eb32:	       addq.l #4,sp
    eb34:	       move.l d0,12(sp)
    FreeVec(loadNow);
    eb38:	       move.l 1cda6 <loadNow>,8(sp)
    eb40:	       move.l 1cdda <SysBase>,d0
    eb46:	       movea.l d0,a6
    eb48:	       movea.l 8(sp),a1
    eb4c:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    eb50:	       move.l 12(sp),-(sp)
    eb54:	       jsr e660 <failSecurityCheck>
    eb5a:	       addq.l #4,sp
    eb5c:	       tst.w d0
    eb5e:	   ,-- beq.s eb64 <builtIn_saveGame+0x6e>
    eb60:	   |   moveq #1,d0
    eb62:	,--|-- bra.s ebb4 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    eb64:	|  '-> move.l 12(sp),-(sp)
    eb68:	|      pea 19cc2 <PutChar+0x1be0>
    eb6e:	|      jsr 1408c <joinStrings>
    eb74:	|      addq.l #8,sp
    eb76:	|      move.l d0,1cda6 <loadNow>
    FreeVec(aaaaa);
    eb7c:	|      move.l 12(sp),4(sp)
    eb82:	|      move.l 1cdda <SysBase>,d0
    eb88:	|      movea.l d0,a6
    eb8a:	|      movea.l 4(sp),a1
    eb8e:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    eb92:	|      moveq #28,d0
    eb94:	|      add.l 24(sp),d0
    eb98:	|      clr.l -(sp)
    eb9a:	|      pea 1 <_start+0x1>
    eb9e:	|      move.l d0,-(sp)
    eba0:	|      jsr 15452 <setVariable>
    eba6:	|      lea 12(sp),sp
    saverFunc = fun;
    ebaa:	|      move.l 24(sp),1cea0 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    ebb2:	|      moveq #0,d0
}
    ebb4:	'----> movea.l (sp)+,a6
    ebb6:	       lea 12(sp),sp
    ebba:	       rts

0000ebbc <builtIn_fileExists>:

builtIn(fileExists)
{
    ebbc:	       lea -36(sp),sp
    ebc0:	       move.l a6,-(sp)
    ebc2:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    ebc4:	       movea.l 52(sp),a0
    ebc8:	       move.l 24(a0),d0
    ebcc:	       move.l d0,-(sp)
    ebce:	       jsr 15136 <getTextFromAnyVar>
    ebd4:	       addq.l #4,sp
    ebd6:	       move.l d0,1cda6 <loadNow>
    trimStack(&fun->stack);
    ebdc:	       moveq #24,d0
    ebde:	       add.l 52(sp),d0
    ebe2:	       move.l d0,-(sp)
    ebe4:	       jsr 154e4 <trimStack>
    ebea:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    ebec:	       move.l 1cda6 <loadNow>,d0
    ebf2:	       move.l d0,-(sp)
    ebf4:	       jsr 2fe <encodeFilename>
    ebfa:	       addq.l #4,sp
    ebfc:	       move.l d0,40(sp)
    FreeVec(loadNow);
    ec00:	       move.l 1cda6 <loadNow>,36(sp)
    ec08:	       move.l 1cdda <SysBase>,d0
    ec0e:	       movea.l d0,a6
    ec10:	       movea.l 36(sp),a1
    ec14:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    ec18:	       move.l 40(sp),-(sp)
    ec1c:	       jsr e660 <failSecurityCheck>
    ec22:	       addq.l #4,sp
    ec24:	       tst.w d0
    ec26:	   ,-- beq.s ec2e <builtIn_fileExists+0x72>
    ec28:	   |   moveq #1,d0
    ec2a:	,--|-- bra.w ecce <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    ec2e:	|  '-> move.l 40(sp),32(sp)
    ec34:	|      move.l #1005,28(sp)
    ec3c:	|      move.l 1cde2 <DOSBase>,d0
    ec42:	|      movea.l d0,a6
    ec44:	|      move.l 32(sp),d1
    ec48:	|      move.l 28(sp),d2
    ec4c:	|      jsr -30(a6)
    ec50:	|      move.l d0,24(sp)
    ec54:	|      move.l 24(sp),d0
    ec58:	|      move.l d0,20(sp)
    if (!fp) {        
    ec5c:	|  ,-- bne.s ec6c <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    ec5e:	|  |   pea 19cc4 <PutChar+0x1be2>
    ec64:	|  |   jsr 17640 <KPrintF>
    ec6a:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    ec6c:	|  '-> tst.l 20(sp)
    ec70:	|      sne d0
    ec72:	|      neg.b d0
    ec74:	|      moveq #0,d1
    ec76:	|      move.b d0,d1
    ec78:	|      moveq #28,d0
    ec7a:	|      add.l 52(sp),d0
    ec7e:	|      move.l d1,-(sp)
    ec80:	|      pea 1 <_start+0x1>
    ec84:	|      move.l d0,-(sp)
    ec86:	|      jsr 15452 <setVariable>
    ec8c:	|      lea 12(sp),sp
    if (fp) Close(fp);
    ec90:	|      tst.l 20(sp)
    ec94:	|  ,-- beq.s ecb0 <builtIn_fileExists+0xf4>
    ec96:	|  |   move.l 20(sp),16(sp)
    ec9c:	|  |   move.l 1cde2 <DOSBase>,d0
    eca2:	|  |   movea.l d0,a6
    eca4:	|  |   move.l 16(sp),d1
    eca8:	|  |   jsr -36(a6)
    ecac:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    ecb0:	|  '-> move.l 40(sp),8(sp)
    ecb6:	|      move.l 1cdda <SysBase>,d0
    ecbc:	|      movea.l d0,a6
    ecbe:	|      movea.l 8(sp),a1
    ecc2:	|      jsr -690(a6)
    loadNow = NULL;
    ecc6:	|      clr.l 1cda6 <loadNow>
    return BR_CONTINUE;
    eccc:	|      moveq #2,d0
}
    ecce:	'----> move.l (sp)+,d2
    ecd0:	       movea.l (sp)+,a6
    ecd2:	       lea 36(sp),sp
    ecd6:	       rts

0000ecd8 <builtIn_loadGame>:

builtIn(loadGame)
{
    ecd8:	       lea -36(sp),sp
    ecdc:	       move.l a6,-(sp)
    ecde:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    ece0:	       movea.l 52(sp),a0
    ece4:	       move.l 24(a0),d0
    ece8:	       move.l d0,-(sp)
    ecea:	       jsr 15136 <getTextFromAnyVar>
    ecf0:	       addq.l #4,sp
    ecf2:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    ecf6:	       moveq #24,d0
    ecf8:	       add.l 52(sp),d0
    ecfc:	       move.l d0,-(sp)
    ecfe:	       jsr 154e4 <trimStack>
    ed04:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    ed06:	       move.l 40(sp),-(sp)
    ed0a:	       jsr 2fe <encodeFilename>
    ed10:	       addq.l #4,sp
    ed12:	       move.l d0,1cda6 <loadNow>
    FreeVec(aaaaa);
    ed18:	       move.l 40(sp),36(sp)
    ed1e:	       move.l 1cdda <SysBase>,d0
    ed24:	       movea.l d0,a6
    ed26:	       movea.l 36(sp),a1
    ed2a:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    ed2e:	       move.l 1cda6 <loadNow>,d0
    ed34:	       move.l d0,-(sp)
    ed36:	       jsr e660 <failSecurityCheck>
    ed3c:	       addq.l #4,sp
    ed3e:	       tst.w d0
    ed40:	   ,-- beq.s ed46 <builtIn_loadGame+0x6e>
    ed42:	   |   moveq #1,d0
    ed44:	,--|-- bra.s edb6 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    ed46:	|  '-> move.l 1cda6 <loadNow>,32(sp)
    ed4e:	|      move.l #1005,28(sp)
    ed56:	|      move.l 1cde2 <DOSBase>,d0
    ed5c:	|      movea.l d0,a6
    ed5e:	|      move.l 32(sp),d1
    ed62:	|      move.l 28(sp),d2
    ed66:	|      jsr -30(a6)
    ed6a:	|      move.l d0,24(sp)
    ed6e:	|      move.l 24(sp),d0
    ed72:	|      move.l d0,20(sp)
    if (fp) {
    ed76:	|  ,-- beq.s ed96 <builtIn_loadGame+0xbe>
        Close(fp);
    ed78:	|  |   move.l 20(sp),12(sp)
    ed7e:	|  |   move.l 1cde2 <DOSBase>,d0
    ed84:	|  |   movea.l d0,a6
    ed86:	|  |   move.l 12(sp),d1
    ed8a:	|  |   jsr -36(a6)
    ed8e:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    ed92:	|  |   moveq #0,d0
    ed94:	+--|-- bra.s edb6 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    ed96:	|  '-> move.l 1cda6 <loadNow>,16(sp)
    ed9e:	|      move.l 1cdda <SysBase>,d0
    eda4:	|      movea.l d0,a6
    eda6:	|      movea.l 16(sp),a1
    edaa:	|      jsr -690(a6)
    loadNow = NULL;
    edae:	|      clr.l 1cda6 <loadNow>
    return BR_CONTINUE;
    edb4:	|      moveq #2,d0
}
    edb6:	'----> move.l (sp)+,d2
    edb8:	       movea.l (sp)+,a6
    edba:	       lea 36(sp),sp
    edbe:	       rts

0000edc0 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    edc0:	move.l 1ce76 <sceneHeight>,d0
    edc6:	move.l d0,d1
    edc8:	move.l 1ce72 <sceneWidth>,d0
    edce:	move.l d1,-(sp)
    edd0:	move.l d0,-(sp)
    edd2:	clr.l -(sp)
    edd4:	clr.l -(sp)
    edd6:	jsr d54a <blankScreen>
    eddc:	lea 16(sp),sp
	return BR_CONTINUE;
    ede0:	moveq #2,d0
}
    ede2:	rts

0000ede4 <builtIn_blankArea>:

builtIn(blankArea)
{
    ede4:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ede8:	       movea.l 24(sp),a0
    edec:	       move.l 24(a0),d0
    edf0:	       move.l d0,-(sp)
    edf2:	       pea 1 <_start+0x1>
    edf6:	       lea 8(sp),a0
    edfa:	       move.l a0,-(sp)
    edfc:	       jsr 14b60 <getValueType>
    ee02:	       lea 12(sp),sp
    ee06:	       tst.w d0
    ee08:	   ,-- bne.s ee10 <builtIn_blankArea+0x2c>
    ee0a:	   |   moveq #1,d0
    ee0c:	,--|-- bra.w eee6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ee10:	|  '-> moveq #24,d0
    ee12:	|      add.l 24(sp),d0
    ee16:	|      move.l d0,-(sp)
    ee18:	|      jsr 154e4 <trimStack>
    ee1e:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ee20:	|      movea.l 24(sp),a0
    ee24:	|      move.l 24(a0),d0
    ee28:	|      move.l d0,-(sp)
    ee2a:	|      pea 1 <_start+0x1>
    ee2e:	|      lea 12(sp),a0
    ee32:	|      move.l a0,-(sp)
    ee34:	|      jsr 14b60 <getValueType>
    ee3a:	|      lea 12(sp),sp
    ee3e:	|      tst.w d0
    ee40:	|  ,-- bne.s ee48 <builtIn_blankArea+0x64>
    ee42:	|  |   moveq #1,d0
    ee44:	+--|-- bra.w eee6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ee48:	|  '-> moveq #24,d0
    ee4a:	|      add.l 24(sp),d0
    ee4e:	|      move.l d0,-(sp)
    ee50:	|      jsr 154e4 <trimStack>
    ee56:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ee58:	|      movea.l 24(sp),a0
    ee5c:	|      move.l 24(a0),d0
    ee60:	|      move.l d0,-(sp)
    ee62:	|      pea 1 <_start+0x1>
    ee66:	|      moveq #16,d0
    ee68:	|      add.l sp,d0
    ee6a:	|      move.l d0,-(sp)
    ee6c:	|      jsr 14b60 <getValueType>
    ee72:	|      lea 12(sp),sp
    ee76:	|      tst.w d0
    ee78:	|  ,-- bne.s ee7e <builtIn_blankArea+0x9a>
    ee7a:	|  |   moveq #1,d0
    ee7c:	+--|-- bra.s eee6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ee7e:	|  '-> moveq #24,d0
    ee80:	|      add.l 24(sp),d0
    ee84:	|      move.l d0,-(sp)
    ee86:	|      jsr 154e4 <trimStack>
    ee8c:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ee8e:	|      movea.l 24(sp),a0
    ee92:	|      move.l 24(a0),d0
    ee96:	|      move.l d0,-(sp)
    ee98:	|      pea 1 <_start+0x1>
    ee9c:	|      moveq #20,d0
    ee9e:	|      add.l sp,d0
    eea0:	|      move.l d0,-(sp)
    eea2:	|      jsr 14b60 <getValueType>
    eea8:	|      lea 12(sp),sp
    eeac:	|      tst.w d0
    eeae:	|  ,-- bne.s eeb4 <builtIn_blankArea+0xd0>
    eeb0:	|  |   moveq #1,d0
    eeb2:	+--|-- bra.s eee6 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eeb4:	|  '-> moveq #24,d0
    eeb6:	|      add.l 24(sp),d0
    eeba:	|      move.l d0,-(sp)
    eebc:	|      jsr 154e4 <trimStack>
    eec2:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    eec4:	|      movea.l (sp),a1
    eec6:	|      movea.l 4(sp),a0
    eeca:	|      move.l 8(sp),d1
    eece:	|      move.l 12(sp),d0
    eed2:	|      move.l a1,-(sp)
    eed4:	|      move.l a0,-(sp)
    eed6:	|      move.l d1,-(sp)
    eed8:	|      move.l d0,-(sp)
    eeda:	|      jsr d54a <blankScreen>
    eee0:	|      lea 16(sp),sp
	return BR_CONTINUE;
    eee4:	|      moveq #2,d0
}
    eee6:	'----> lea 16(sp),sp
    eeea:	       rts

0000eeec <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    eeec:	jsr d568 <darkScreen>
	return BR_CONTINUE;
    eef2:	moveq #2,d0
}
    eef4:	rts

0000eef6 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    eef6:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eefa:	       movea.l 20(sp),a0
    eefe:	       move.l 24(a0),d0
    ef02:	       move.l d0,-(sp)
    ef04:	       pea 1 <_start+0x1>
    ef08:	       lea 8(sp),a0
    ef0c:	       move.l a0,-(sp)
    ef0e:	       jsr 14b60 <getValueType>
    ef14:	       lea 12(sp),sp
    ef18:	       tst.w d0
    ef1a:	   ,-- bne.s ef22 <builtIn_addOverlay+0x2c>
    ef1c:	   |   moveq #1,d0
    ef1e:	,--|-- bra.w efba <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ef22:	|  '-> moveq #24,d0
    ef24:	|      add.l 20(sp),d0
    ef28:	|      move.l d0,-(sp)
    ef2a:	|      jsr 154e4 <trimStack>
    ef30:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef32:	|      movea.l 20(sp),a0
    ef36:	|      move.l 24(a0),d0
    ef3a:	|      move.l d0,-(sp)
    ef3c:	|      pea 1 <_start+0x1>
    ef40:	|      moveq #12,d0
    ef42:	|      add.l sp,d0
    ef44:	|      move.l d0,-(sp)
    ef46:	|      jsr 14b60 <getValueType>
    ef4c:	|      lea 12(sp),sp
    ef50:	|      tst.w d0
    ef52:	|  ,-- bne.s ef58 <builtIn_addOverlay+0x62>
    ef54:	|  |   moveq #1,d0
    ef56:	+--|-- bra.s efba <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ef58:	|  '-> moveq #24,d0
    ef5a:	|      add.l 20(sp),d0
    ef5e:	|      move.l d0,-(sp)
    ef60:	|      jsr 154e4 <trimStack>
    ef66:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ef68:	|      movea.l 20(sp),a0
    ef6c:	|      move.l 24(a0),d0
    ef70:	|      move.l d0,-(sp)
    ef72:	|      pea 5 <_start+0x5>
    ef76:	|      moveq #16,d0
    ef78:	|      add.l sp,d0
    ef7a:	|      move.l d0,-(sp)
    ef7c:	|      jsr 14b60 <getValueType>
    ef82:	|      lea 12(sp),sp
    ef86:	|      tst.w d0
    ef88:	|  ,-- bne.s ef8e <builtIn_addOverlay+0x98>
    ef8a:	|  |   moveq #1,d0
    ef8c:	+--|-- bra.s efba <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ef8e:	|  '-> moveq #24,d0
    ef90:	|      add.l 20(sp),d0
    ef94:	|      move.l d0,-(sp)
    ef96:	|      jsr 154e4 <trimStack>
    ef9c:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ef9e:	|      movea.l (sp),a0
    efa0:	|      move.l 4(sp),d1
    efa4:	|      move.l 8(sp),d0
    efa8:	|      move.l a0,-(sp)
    efaa:	|      move.l d1,-(sp)
    efac:	|      move.l d0,-(sp)
    efae:	|      jsr d686 <loadBackDrop>
    efb4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    efb8:	|      moveq #2,d0
}
    efba:	'----> lea 12(sp),sp
    efbe:	       rts

0000efc0 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    efc0:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    efc4:	       movea.l 20(sp),a0
    efc8:	       move.l 24(a0),d0
    efcc:	       move.l d0,-(sp)
    efce:	       pea 1 <_start+0x1>
    efd2:	       lea 8(sp),a0
    efd6:	       move.l a0,-(sp)
    efd8:	       jsr 14b60 <getValueType>
    efde:	       lea 12(sp),sp
    efe2:	       tst.w d0
    efe4:	   ,-- bne.s efec <builtIn_mixOverlay+0x2c>
    efe6:	   |   moveq #1,d0
    efe8:	,--|-- bra.w f084 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    efec:	|  '-> moveq #24,d0
    efee:	|      add.l 20(sp),d0
    eff2:	|      move.l d0,-(sp)
    eff4:	|      jsr 154e4 <trimStack>
    effa:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    effc:	|      movea.l 20(sp),a0
    f000:	|      move.l 24(a0),d0
    f004:	|      move.l d0,-(sp)
    f006:	|      pea 1 <_start+0x1>
    f00a:	|      moveq #12,d0
    f00c:	|      add.l sp,d0
    f00e:	|      move.l d0,-(sp)
    f010:	|      jsr 14b60 <getValueType>
    f016:	|      lea 12(sp),sp
    f01a:	|      tst.w d0
    f01c:	|  ,-- bne.s f022 <builtIn_mixOverlay+0x62>
    f01e:	|  |   moveq #1,d0
    f020:	+--|-- bra.s f084 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f022:	|  '-> moveq #24,d0
    f024:	|      add.l 20(sp),d0
    f028:	|      move.l d0,-(sp)
    f02a:	|      jsr 154e4 <trimStack>
    f030:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f032:	|      movea.l 20(sp),a0
    f036:	|      move.l 24(a0),d0
    f03a:	|      move.l d0,-(sp)
    f03c:	|      pea 5 <_start+0x5>
    f040:	|      moveq #16,d0
    f042:	|      add.l sp,d0
    f044:	|      move.l d0,-(sp)
    f046:	|      jsr 14b60 <getValueType>
    f04c:	|      lea 12(sp),sp
    f050:	|      tst.w d0
    f052:	|  ,-- bne.s f058 <builtIn_mixOverlay+0x98>
    f054:	|  |   moveq #1,d0
    f056:	+--|-- bra.s f084 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f058:	|  '-> moveq #24,d0
    f05a:	|      add.l 20(sp),d0
    f05e:	|      move.l d0,-(sp)
    f060:	|      jsr 154e4 <trimStack>
    f066:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    f068:	|      movea.l (sp),a0
    f06a:	|      move.l 4(sp),d1
    f06e:	|      move.l 8(sp),d0
    f072:	|      move.l a0,-(sp)
    f074:	|      move.l d1,-(sp)
    f076:	|      move.l d0,-(sp)
    f078:	|      jsr d6fc <mixBackDrop>
    f07e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f082:	|      moveq #2,d0
}
    f084:	'----> lea 12(sp),sp
    f088:	       rts

0000f08a <builtIn_pasteImage>:

builtIn(pasteImage)
{
    f08a:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f08e:	       movea.l 20(sp),a0
    f092:	       move.l 24(a0),d0
    f096:	       move.l d0,-(sp)
    f098:	       pea 1 <_start+0x1>
    f09c:	       lea 8(sp),a0
    f0a0:	       move.l a0,-(sp)
    f0a2:	       jsr 14b60 <getValueType>
    f0a8:	       lea 12(sp),sp
    f0ac:	       tst.w d0
    f0ae:	   ,-- bne.s f0b6 <builtIn_pasteImage+0x2c>
    f0b0:	   |   moveq #1,d0
    f0b2:	,--|-- bra.w f146 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    f0b6:	|  '-> moveq #24,d0
    f0b8:	|      add.l 20(sp),d0
    f0bc:	|      move.l d0,-(sp)
    f0be:	|      jsr 154e4 <trimStack>
    f0c4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0c6:	|      movea.l 20(sp),a0
    f0ca:	|      move.l 24(a0),d0
    f0ce:	|      move.l d0,-(sp)
    f0d0:	|      pea 1 <_start+0x1>
    f0d4:	|      moveq #12,d0
    f0d6:	|      add.l sp,d0
    f0d8:	|      move.l d0,-(sp)
    f0da:	|      jsr 14b60 <getValueType>
    f0e0:	|      lea 12(sp),sp
    f0e4:	|      tst.w d0
    f0e6:	|  ,-- bne.s f0ec <builtIn_pasteImage+0x62>
    f0e8:	|  |   moveq #1,d0
    f0ea:	+--|-- bra.s f146 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    f0ec:	|  '-> moveq #24,d0
    f0ee:	|      add.l 20(sp),d0
    f0f2:	|      move.l d0,-(sp)
    f0f4:	|      jsr 154e4 <trimStack>
    f0fa:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    f0fc:	|      movea.l 20(sp),a0
    f100:	|      move.l 24(a0),d0
    f104:	|      move.l d0,-(sp)
    f106:	|      jsr 15038 <getAnimationFromVar>
    f10c:	|      addq.l #4,sp
    f10e:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    f112:	|      moveq #24,d0
    f114:	|      add.l 20(sp),d0
    f118:	|      move.l d0,-(sp)
    f11a:	|      jsr 154e4 <trimStack>
    f120:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    f122:	|      tst.l 8(sp)
    f126:	|  ,-- bne.s f12c <builtIn_pasteImage+0xa2>
    f128:	|  |   moveq #2,d0
    f12a:	+--|-- bra.s f146 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    f12c:	|  '-> move.l (sp),d1
    f12e:	|      move.l 4(sp),d0
    f132:	|      move.l 8(sp),-(sp)
    f136:	|      move.l d1,-(sp)
    f138:	|      move.l d0,-(sp)
    f13a:	|      jsr d94 <pasteCursor>
    f140:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    f144:	|      moveq #2,d0
}
    f146:	'----> lea 12(sp),sp
    f14a:	       rts

0000f14c <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    f14c:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f14e:	       movea.l 16(sp),a0
    f152:	       move.l 24(a0),d0
    f156:	       move.l d0,-(sp)
    f158:	       pea 1 <_start+0x1>
    f15c:	       move.l sp,d0
    f15e:	       addq.l #8,d0
    f160:	       move.l d0,-(sp)
    f162:	       jsr 14b60 <getValueType>
    f168:	       lea 12(sp),sp
    f16c:	       tst.w d0
    f16e:	   ,-- bne.s f176 <builtIn_setSceneDimensions+0x2a>
    f170:	   |   moveq #1,d0
    f172:	,--|-- bra.w f1fe <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f176:	|  '-> moveq #24,d0
    f178:	|      add.l 16(sp),d0
    f17c:	|      move.l d0,-(sp)
    f17e:	|      jsr 154e4 <trimStack>
    f184:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f186:	|      movea.l 16(sp),a0
    f18a:	|      move.l 24(a0),d0
    f18e:	|      move.l d0,-(sp)
    f190:	|      pea 1 <_start+0x1>
    f194:	|      moveq #12,d0
    f196:	|      add.l sp,d0
    f198:	|      move.l d0,-(sp)
    f19a:	|      jsr 14b60 <getValueType>
    f1a0:	|      lea 12(sp),sp
    f1a4:	|      tst.w d0
    f1a6:	|  ,-- bne.s f1ac <builtIn_setSceneDimensions+0x60>
    f1a8:	|  |   moveq #1,d0
    f1aa:	+--|-- bra.s f1fe <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f1ac:	|  '-> moveq #24,d0
    f1ae:	|      add.l 16(sp),d0
    f1b2:	|      move.l d0,-(sp)
    f1b4:	|      jsr 154e4 <trimStack>
    f1ba:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    f1bc:	|      move.l (sp),d1
    f1be:	|      move.l 4(sp),d0
    f1c2:	|      move.l d1,-(sp)
    f1c4:	|      move.l d0,-(sp)
    f1c6:	|      jsr d752 <resizeBackdrop>
    f1cc:	|      addq.l #8,sp
    f1ce:	|      tst.w d0
    f1d0:	|  ,-- beq.s f1ee <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    f1d2:	|  |   move.l (sp),d1
    f1d4:	|  |   move.l 4(sp),d0
    f1d8:	|  |   move.l d1,-(sp)
    f1da:	|  |   move.l d0,-(sp)
    f1dc:	|  |   clr.l -(sp)
    f1de:	|  |   clr.l -(sp)
    f1e0:	|  |   jsr d54a <blankScreen>
    f1e6:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    f1ea:	|  |   moveq #2,d0
    f1ec:	+--|-- bra.s f1fe <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    f1ee:	|  '-> pea 19ce2 <PutChar+0x1c00>
    f1f4:	|      jsr 17640 <KPrintF>
    f1fa:	|      addq.l #4,sp
	return BR_ERROR;
    f1fc:	|      moveq #1,d0
}
    f1fe:	'----> addq.l #8,sp
    f200:	       rts

0000f202 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    f202:	          move.l d3,-(sp)
    f204:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f206:	          movea.l 16(sp),a0
    f20a:	          move.l 24(a0),d0
    f20e:	          move.l d0,-(sp)
    f210:	          pea 1 <_start+0x1>
    f214:	          pea 1ce94 <cameraY>
    f21a:	          jsr 14b60 <getValueType>
    f220:	          lea 12(sp),sp
    f224:	          tst.w d0
    f226:	      ,-- bne.s f22e <builtIn_aimCamera+0x2c>
    f228:	      |   moveq #1,d0
    f22a:	,-----|-- bra.w f4b0 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f22e:	|     '-> moveq #24,d0
    f230:	|         add.l 16(sp),d0
    f234:	|         move.l d0,-(sp)
    f236:	|         jsr 154e4 <trimStack>
    f23c:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f23e:	|         movea.l 16(sp),a0
    f242:	|         move.l 24(a0),d0
    f246:	|         move.l d0,-(sp)
    f248:	|         pea 1 <_start+0x1>
    f24c:	|         pea 1ce90 <cameraX>
    f252:	|         jsr 14b60 <getValueType>
    f258:	|         lea 12(sp),sp
    f25c:	|         tst.w d0
    f25e:	|     ,-- bne.s f266 <builtIn_aimCamera+0x64>
    f260:	|     |   moveq #1,d0
    f262:	+-----|-- bra.w f4b0 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f266:	|     '-> moveq #24,d0
    f268:	|         add.l 16(sp),d0
    f26c:	|         move.l d0,-(sp)
    f26e:	|         jsr 154e4 <trimStack>
    f274:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    f276:	|         move.l 1ce90 <cameraX>,d0
    f27c:	|         move.l d0,-(sp)
    f27e:	|         jsr 17a72 <__floatsisf>
    f284:	|         addq.l #4,sp
    f286:	|         move.l d0,d2
    f288:	|         move.l 1cd2e <winWidth>,d0
    f28e:	|         lsr.l #1,d0
    f290:	|         move.l d0,-(sp)
    f292:	|         jsr 17a9a <__floatunsisf>
    f298:	|         addq.l #4,sp
    f29a:	|         move.l d0,d1
    f29c:	|         move.l 1c776 <cameraZoom>,d0
    f2a2:	|         move.l d0,-(sp)
    f2a4:	|         move.l d1,-(sp)
    f2a6:	|         jsr 17928 <__divsf3>
    f2ac:	|         addq.l #8,sp
    f2ae:	|         move.l d0,-(sp)
    f2b0:	|         move.l d2,-(sp)
    f2b2:	|         jsr 17d66 <__subsf3>
    f2b8:	|         addq.l #8,sp
    f2ba:	|         move.l d0,-(sp)
    f2bc:	|         jsr 17a0a <__fixsfsi>
    f2c2:	|         addq.l #4,sp
    f2c4:	|         move.l d0,1ce90 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f2ca:	|         move.l 1ce94 <cameraY>,d0
    f2d0:	|         move.l d0,-(sp)
    f2d2:	|         jsr 17a72 <__floatsisf>
    f2d8:	|         addq.l #4,sp
    f2da:	|         move.l d0,d2
    f2dc:	|         move.l 1cd32 <winHeight>,d0
    f2e2:	|         lsr.l #1,d0
    f2e4:	|         move.l d0,-(sp)
    f2e6:	|         jsr 17a9a <__floatunsisf>
    f2ec:	|         addq.l #4,sp
    f2ee:	|         move.l d0,d1
    f2f0:	|         move.l 1c776 <cameraZoom>,d0
    f2f6:	|         move.l d0,-(sp)
    f2f8:	|         move.l d1,-(sp)
    f2fa:	|         jsr 17928 <__divsf3>
    f300:	|         addq.l #8,sp
    f302:	|         move.l d0,-(sp)
    f304:	|         move.l d2,-(sp)
    f306:	|         jsr 17d66 <__subsf3>
    f30c:	|         addq.l #8,sp
    f30e:	|         move.l d0,-(sp)
    f310:	|         jsr 17a0a <__fixsfsi>
    f316:	|         addq.l #4,sp
    f318:	|         move.l d0,1ce94 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f31e:	|         move.l 1ce90 <cameraX>,d0
    f324:	|     ,-- bpl.s f330 <builtIn_aimCamera+0x12e>
    f326:	|     |   clr.l 1ce90 <cameraX>
    f32c:	|  ,--|-- bra.w f3e6 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f330:	|  |  '-> move.l 1ce90 <cameraX>,d0
    f336:	|  |      move.l d0,-(sp)
    f338:	|  |      jsr 17a72 <__floatsisf>
    f33e:	|  |      addq.l #4,sp
    f340:	|  |      move.l d0,d2
    f342:	|  |      move.l 1ce72 <sceneWidth>,d0
    f348:	|  |      move.l d0,-(sp)
    f34a:	|  |      jsr 17a9a <__floatunsisf>
    f350:	|  |      addq.l #4,sp
    f352:	|  |      move.l d0,d3
    f354:	|  |      move.l 1cd2e <winWidth>,d0
    f35a:	|  |      move.l d0,-(sp)
    f35c:	|  |      jsr 17a9a <__floatunsisf>
    f362:	|  |      addq.l #4,sp
    f364:	|  |      move.l d0,d1
    f366:	|  |      move.l 1c776 <cameraZoom>,d0
    f36c:	|  |      move.l d0,-(sp)
    f36e:	|  |      move.l d1,-(sp)
    f370:	|  |      jsr 17928 <__divsf3>
    f376:	|  |      addq.l #8,sp
    f378:	|  |      move.l d0,-(sp)
    f37a:	|  |      move.l d3,-(sp)
    f37c:	|  |      jsr 17d66 <__subsf3>
    f382:	|  |      addq.l #8,sp
    f384:	|  |      move.l d0,-(sp)
    f386:	|  |      move.l d2,-(sp)
    f388:	|  |      jsr 17bde <__gtsf2>
    f38e:	|  |      addq.l #8,sp
    f390:	|  |      tst.l d0
    f392:	|  +----- ble.s f3e6 <builtIn_aimCamera+0x1e4>
    f394:	|  |      move.l 1ce72 <sceneWidth>,d0
    f39a:	|  |      move.l d0,-(sp)
    f39c:	|  |      jsr 17a9a <__floatunsisf>
    f3a2:	|  |      addq.l #4,sp
    f3a4:	|  |      move.l d0,d2
    f3a6:	|  |      move.l 1cd2e <winWidth>,d0
    f3ac:	|  |      move.l d0,-(sp)
    f3ae:	|  |      jsr 17a9a <__floatunsisf>
    f3b4:	|  |      addq.l #4,sp
    f3b6:	|  |      move.l d0,d1
    f3b8:	|  |      move.l 1c776 <cameraZoom>,d0
    f3be:	|  |      move.l d0,-(sp)
    f3c0:	|  |      move.l d1,-(sp)
    f3c2:	|  |      jsr 17928 <__divsf3>
    f3c8:	|  |      addq.l #8,sp
    f3ca:	|  |      move.l d0,-(sp)
    f3cc:	|  |      move.l d2,-(sp)
    f3ce:	|  |      jsr 17d66 <__subsf3>
    f3d4:	|  |      addq.l #8,sp
    f3d6:	|  |      move.l d0,-(sp)
    f3d8:	|  |      jsr 17a0a <__fixsfsi>
    f3de:	|  |      addq.l #4,sp
    f3e0:	|  |      move.l d0,1ce90 <cameraX>
	if (cameraY < 0) cameraY = 0;
    f3e6:	|  '----> move.l 1ce94 <cameraY>,d0
    f3ec:	|     ,-- bpl.s f3f8 <builtIn_aimCamera+0x1f6>
    f3ee:	|     |   clr.l 1ce94 <cameraY>
    f3f4:	|  ,--|-- bra.w f4ae <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f3f8:	|  |  '-> move.l 1ce94 <cameraY>,d0
    f3fe:	|  |      move.l d0,-(sp)
    f400:	|  |      jsr 17a72 <__floatsisf>
    f406:	|  |      addq.l #4,sp
    f408:	|  |      move.l d0,d2
    f40a:	|  |      move.l 1ce76 <sceneHeight>,d0
    f410:	|  |      move.l d0,-(sp)
    f412:	|  |      jsr 17a9a <__floatunsisf>
    f418:	|  |      addq.l #4,sp
    f41a:	|  |      move.l d0,d3
    f41c:	|  |      move.l 1cd32 <winHeight>,d0
    f422:	|  |      move.l d0,-(sp)
    f424:	|  |      jsr 17a9a <__floatunsisf>
    f42a:	|  |      addq.l #4,sp
    f42c:	|  |      move.l d0,d1
    f42e:	|  |      move.l 1c776 <cameraZoom>,d0
    f434:	|  |      move.l d0,-(sp)
    f436:	|  |      move.l d1,-(sp)
    f438:	|  |      jsr 17928 <__divsf3>
    f43e:	|  |      addq.l #8,sp
    f440:	|  |      move.l d0,-(sp)
    f442:	|  |      move.l d3,-(sp)
    f444:	|  |      jsr 17d66 <__subsf3>
    f44a:	|  |      addq.l #8,sp
    f44c:	|  |      move.l d0,-(sp)
    f44e:	|  |      move.l d2,-(sp)
    f450:	|  |      jsr 17bde <__gtsf2>
    f456:	|  |      addq.l #8,sp
    f458:	|  |      tst.l d0
    f45a:	|  +----- ble.s f4ae <builtIn_aimCamera+0x2ac>
    f45c:	|  |      move.l 1ce76 <sceneHeight>,d0
    f462:	|  |      move.l d0,-(sp)
    f464:	|  |      jsr 17a9a <__floatunsisf>
    f46a:	|  |      addq.l #4,sp
    f46c:	|  |      move.l d0,d2
    f46e:	|  |      move.l 1cd32 <winHeight>,d0
    f474:	|  |      move.l d0,-(sp)
    f476:	|  |      jsr 17a9a <__floatunsisf>
    f47c:	|  |      addq.l #4,sp
    f47e:	|  |      move.l d0,d1
    f480:	|  |      move.l 1c776 <cameraZoom>,d0
    f486:	|  |      move.l d0,-(sp)
    f488:	|  |      move.l d1,-(sp)
    f48a:	|  |      jsr 17928 <__divsf3>
    f490:	|  |      addq.l #8,sp
    f492:	|  |      move.l d0,-(sp)
    f494:	|  |      move.l d2,-(sp)
    f496:	|  |      jsr 17d66 <__subsf3>
    f49c:	|  |      addq.l #8,sp
    f49e:	|  |      move.l d0,-(sp)
    f4a0:	|  |      jsr 17a0a <__fixsfsi>
    f4a6:	|  |      addq.l #4,sp
    f4a8:	|  |      move.l d0,1ce94 <cameraY>
	return BR_CONTINUE;
    f4ae:	|  '----> moveq #2,d0
}
    f4b0:	'-------> move.l (sp)+,d2
    f4b2:	          move.l (sp)+,d3
    f4b4:	          rts

0000f4b6 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f4b6:	       subq.l #4,sp
    f4b8:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f4ba:	       movea.l 16(sp),a0
    f4be:	       move.l 24(a0),d0
    f4c2:	       move.l d0,-(sp)
    f4c4:	       pea 1 <_start+0x1>
    f4c8:	       moveq #12,d0
    f4ca:	       add.l sp,d0
    f4cc:	       move.l d0,-(sp)
    f4ce:	       jsr 14b60 <getValueType>
    f4d4:	       lea 12(sp),sp
    f4d8:	       tst.w d0
    f4da:	   ,-- bne.s f4e2 <builtIn_zoomCamera+0x2c>
    f4dc:	   |   moveq #1,d0
    f4de:	,--|-- bra.w f6dc <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f4e2:	|  '-> moveq #24,d0
    f4e4:	|      add.l 16(sp),d0
    f4e8:	|      move.l d0,-(sp)
    f4ea:	|      jsr 154e4 <trimStack>
    f4f0:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f4f2:	|      move.l 1cd96 <input+0xa>,d0
    f4f8:	|      move.l d0,-(sp)
    f4fa:	|      jsr 17a72 <__floatsisf>
    f500:	|      addq.l #4,sp
    f502:	|      move.l d0,d1
    f504:	|      move.l 1c776 <cameraZoom>,d0
    f50a:	|      move.l d0,-(sp)
    f50c:	|      move.l d1,-(sp)
    f50e:	|      jsr 17b24 <__mulsf3>
    f514:	|      addq.l #8,sp
    f516:	|      move.l d0,-(sp)
    f518:	|      jsr 17a0a <__fixsfsi>
    f51e:	|      addq.l #4,sp
    f520:	|      move.l d0,1cd96 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f526:	|      move.l 1cd9a <input+0xe>,d0
    f52c:	|      move.l d0,-(sp)
    f52e:	|      jsr 17a72 <__floatsisf>
    f534:	|      addq.l #4,sp
    f536:	|      move.l d0,d1
    f538:	|      move.l 1c776 <cameraZoom>,d0
    f53e:	|      move.l d0,-(sp)
    f540:	|      move.l d1,-(sp)
    f542:	|      jsr 17b24 <__mulsf3>
    f548:	|      addq.l #8,sp
    f54a:	|      move.l d0,-(sp)
    f54c:	|      jsr 17a0a <__fixsfsi>
    f552:	|      addq.l #4,sp
    f554:	|      move.l d0,1cd9a <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f55a:	|      move.l 4(sp),d0
    f55e:	|      move.l d0,-(sp)
    f560:	|      jsr 17a72 <__floatsisf>
    f566:	|      addq.l #4,sp
    f568:	|      move.l #1008981770,-(sp)
    f56e:	|      move.l d0,-(sp)
    f570:	|      jsr 17b24 <__mulsf3>
    f576:	|      addq.l #8,sp
    f578:	|      move.l d0,1c776 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f57e:	|      move.l 1cd2e <winWidth>,d0
    f584:	|      move.l d0,-(sp)
    f586:	|      jsr 17a9a <__floatunsisf>
    f58c:	|      addq.l #4,sp
    f58e:	|      move.l d0,d1
    f590:	|      move.l 1c776 <cameraZoom>,d0
    f596:	|      move.l d0,-(sp)
    f598:	|      move.l d1,-(sp)
    f59a:	|      jsr 17928 <__divsf3>
    f5a0:	|      addq.l #8,sp
    f5a2:	|      move.l d0,d2
    f5a4:	|      move.l 1ce72 <sceneWidth>,d0
    f5aa:	|      move.l d0,-(sp)
    f5ac:	|      jsr 17a9a <__floatunsisf>
    f5b2:	|      addq.l #4,sp
    f5b4:	|      move.l d0,-(sp)
    f5b6:	|      move.l d2,-(sp)
    f5b8:	|      jsr 17bde <__gtsf2>
    f5be:	|      addq.l #8,sp
    f5c0:	|      tst.l d0
    f5c2:	|  ,-- ble.s f5f8 <builtIn_zoomCamera+0x142>
    f5c4:	|  |   move.l 1cd2e <winWidth>,d0
    f5ca:	|  |   move.l d0,-(sp)
    f5cc:	|  |   jsr 17a9a <__floatunsisf>
    f5d2:	|  |   addq.l #4,sp
    f5d4:	|  |   move.l d0,d2
    f5d6:	|  |   move.l 1ce72 <sceneWidth>,d0
    f5dc:	|  |   move.l d0,-(sp)
    f5de:	|  |   jsr 17a9a <__floatunsisf>
    f5e4:	|  |   addq.l #4,sp
    f5e6:	|  |   move.l d0,-(sp)
    f5e8:	|  |   move.l d2,-(sp)
    f5ea:	|  |   jsr 17928 <__divsf3>
    f5f0:	|  |   addq.l #8,sp
    f5f2:	|  |   move.l d0,1c776 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f5f8:	|  '-> move.l 1cd32 <winHeight>,d0
    f5fe:	|      move.l d0,-(sp)
    f600:	|      jsr 17a9a <__floatunsisf>
    f606:	|      addq.l #4,sp
    f608:	|      move.l d0,d1
    f60a:	|      move.l 1c776 <cameraZoom>,d0
    f610:	|      move.l d0,-(sp)
    f612:	|      move.l d1,-(sp)
    f614:	|      jsr 17928 <__divsf3>
    f61a:	|      addq.l #8,sp
    f61c:	|      move.l d0,d2
    f61e:	|      move.l 1ce76 <sceneHeight>,d0
    f624:	|      move.l d0,-(sp)
    f626:	|      jsr 17a9a <__floatunsisf>
    f62c:	|      addq.l #4,sp
    f62e:	|      move.l d0,-(sp)
    f630:	|      move.l d2,-(sp)
    f632:	|      jsr 17bde <__gtsf2>
    f638:	|      addq.l #8,sp
    f63a:	|      tst.l d0
    f63c:	|  ,-- ble.s f672 <builtIn_zoomCamera+0x1bc>
    f63e:	|  |   move.l 1cd32 <winHeight>,d0
    f644:	|  |   move.l d0,-(sp)
    f646:	|  |   jsr 17a9a <__floatunsisf>
    f64c:	|  |   addq.l #4,sp
    f64e:	|  |   move.l d0,d2
    f650:	|  |   move.l 1ce76 <sceneHeight>,d0
    f656:	|  |   move.l d0,-(sp)
    f658:	|  |   jsr 17a9a <__floatunsisf>
    f65e:	|  |   addq.l #4,sp
    f660:	|  |   move.l d0,-(sp)
    f662:	|  |   move.l d2,-(sp)
    f664:	|  |   jsr 17928 <__divsf3>
    f66a:	|  |   addq.l #8,sp
    f66c:	|  |   move.l d0,1c776 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f672:	|  '-> move.l 1cd96 <input+0xa>,d0
    f678:	|      move.l d0,-(sp)
    f67a:	|      jsr 17a72 <__floatsisf>
    f680:	|      addq.l #4,sp
    f682:	|      move.l d0,d1
    f684:	|      move.l 1c776 <cameraZoom>,d0
    f68a:	|      move.l d0,-(sp)
    f68c:	|      move.l d1,-(sp)
    f68e:	|      jsr 17928 <__divsf3>
    f694:	|      addq.l #8,sp
    f696:	|      move.l d0,-(sp)
    f698:	|      jsr 17a0a <__fixsfsi>
    f69e:	|      addq.l #4,sp
    f6a0:	|      move.l d0,1cd96 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f6a6:	|      move.l 1cd9a <input+0xe>,d0
    f6ac:	|      move.l d0,-(sp)
    f6ae:	|      jsr 17a72 <__floatsisf>
    f6b4:	|      addq.l #4,sp
    f6b6:	|      move.l d0,d1
    f6b8:	|      move.l 1c776 <cameraZoom>,d0
    f6be:	|      move.l d0,-(sp)
    f6c0:	|      move.l d1,-(sp)
    f6c2:	|      jsr 17928 <__divsf3>
    f6c8:	|      addq.l #8,sp
    f6ca:	|      move.l d0,-(sp)
    f6cc:	|      jsr 17a0a <__fixsfsi>
    f6d2:	|      addq.l #4,sp
    f6d4:	|      move.l d0,1cd9a <input+0xe>

	return BR_CONTINUE;
    f6da:	|      moveq #2,d0
}
    f6dc:	'----> move.l (sp)+,d2
    f6de:	       addq.l #4,sp
    f6e0:	       rts

0000f6e2 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f6e2:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f6e4:	             tst.l 8(sp)
    f6e8:	         ,-- bne.s f6fc <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f6ea:	         |   pea 19d07 <PutChar+0x1c25>
    f6f0:	         |   jsr 17640 <KPrintF>
    f6f6:	         |   addq.l #4,sp
		return BR_ERROR;
    f6f8:	         |   moveq #1,d0
    f6fa:	,--------|-- bra.s f75c <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f6fc:	|        '-> jsr 16200 <rand>
    f702:	|            move.l d0,d1
    f704:	|            move.l 8(sp),d0
    f708:	|            move.l d0,-(sp)
    f70a:	|            move.l d1,-(sp)
    f70c:	|            jsr 180a6 <__umodsi3>
    f712:	|            addq.l #8,sp
    f714:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f716:	|     ,----- bra.s f74a <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f718:	|  ,--|----> move.l (sp),d0
    f71a:	|  |  |      cmp.l 8(sp),d0
    f71e:	|  |  |  ,-- bne.s f73a <builtIn_pickOne+0x58>
    f720:	|  |  |  |   moveq #28,d0
    f722:	|  |  |  |   add.l 12(sp),d0
    f726:	|  |  |  |   movea.l 12(sp),a0
    f72a:	|  |  |  |   move.l 24(a0),d1
    f72e:	|  |  |  |   move.l d0,-(sp)
    f730:	|  |  |  |   move.l d1,-(sp)
    f732:	|  |  |  |   jsr 1501a <copyVariable>
    f738:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f73a:	|  |  |  '-> moveq #24,d0
    f73c:	|  |  |      add.l 12(sp),d0
    f740:	|  |  |      move.l d0,-(sp)
    f742:	|  |  |      jsr 154e4 <trimStack>
    f748:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f74a:	|  |  '----> move.l 8(sp),d0
    f74e:	|  |         move.l d0,d1
    f750:	|  |         subq.l #1,d1
    f752:	|  |         move.l d1,8(sp)
    f756:	|  |         tst.l d0
    f758:	|  '-------- bne.s f718 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f75a:	|            moveq #2,d0
}
    f75c:	'----------> addq.l #4,sp
    f75e:	             rts

0000f760 <builtIn_substring>:

builtIn(substring)
{
    f760:	       lea -40(sp),sp
    f764:	       move.l a6,-(sp)
    f766:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f768:	       movea.l 56(sp),a0
    f76c:	       move.l 24(a0),d0
    f770:	       move.l d0,-(sp)
    f772:	       pea 1 <_start+0x1>
    f776:	       lea 16(sp),a0
    f77a:	       move.l a0,-(sp)
    f77c:	       jsr 14b60 <getValueType>
    f782:	       lea 12(sp),sp
    f786:	       tst.w d0
    f788:	   ,-- bne.s f790 <builtIn_substring+0x30>
    f78a:	   |   moveq #1,d0
    f78c:	,--|-- bra.w f908 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f790:	|  '-> moveq #24,d0
    f792:	|      add.l 56(sp),d0
    f796:	|      move.l d0,-(sp)
    f798:	|      jsr 154e4 <trimStack>
    f79e:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f7a0:	|      movea.l 56(sp),a0
    f7a4:	|      move.l 24(a0),d0
    f7a8:	|      move.l d0,-(sp)
    f7aa:	|      pea 1 <_start+0x1>
    f7ae:	|      lea 20(sp),a0
    f7b2:	|      move.l a0,-(sp)
    f7b4:	|      jsr 14b60 <getValueType>
    f7ba:	|      lea 12(sp),sp
    f7be:	|      tst.w d0
    f7c0:	|  ,-- bne.s f7c8 <builtIn_substring+0x68>
    f7c2:	|  |   moveq #1,d0
    f7c4:	+--|-- bra.w f908 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f7c8:	|  '-> moveq #24,d0
    f7ca:	|      add.l 56(sp),d0
    f7ce:	|      move.l d0,-(sp)
    f7d0:	|      jsr 154e4 <trimStack>
    f7d6:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f7d8:	|      movea.l 56(sp),a0
    f7dc:	|      move.l 24(a0),d0
    f7e0:	|      move.l d0,-(sp)
    f7e2:	|      jsr 15136 <getTextFromAnyVar>
    f7e8:	|      addq.l #4,sp
    f7ea:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f7ee:	|      moveq #24,d0
    f7f0:	|      add.l 56(sp),d0
    f7f4:	|      move.l d0,-(sp)
    f7f6:	|      jsr 154e4 <trimStack>
    f7fc:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f7fe:	|      move.l 44(sp),-(sp)
    f802:	|      jsr 1404c <strlen>
    f808:	|      addq.l #4,sp
    f80a:	|      move.l d0,d1
    f80c:	|      move.l 12(sp),d0
    f810:	|      movea.l d0,a0
    f812:	|      move.l 8(sp),d0
    f816:	|      add.l a0,d0
    f818:	|      cmp.l d1,d0
    f81a:	|  ,-- bls.s f850 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f81c:	|  |   move.l 44(sp),-(sp)
    f820:	|  |   jsr 1404c <strlen>
    f826:	|  |   addq.l #4,sp
    f828:	|  |   move.l d0,d1
    f82a:	|  |   move.l 12(sp),d0
    f82e:	|  |   sub.l d0,d1
    f830:	|  |   move.l d1,d0
    f832:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f836:	|  |   move.l 44(sp),-(sp)
    f83a:	|  |   jsr 1404c <strlen>
    f840:	|  |   addq.l #4,sp
    f842:	|  |   move.l d0,d1
    f844:	|  |   move.l 12(sp),d0
    f848:	|  |   cmp.l d1,d0
    f84a:	|  +-- bls.s f850 <builtIn_substring+0xf0>
            start = 0;
    f84c:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f850:	|  '-> move.l 8(sp),d0
    f854:	|  ,-- bpl.s f85a <builtIn_substring+0xfa>
        length = 0;
    f856:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f85a:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f860:	|      move.l 12(sp),d1
    f864:	|      move.l 8(sp),d0
    f868:	|      move.l d1,d2
    f86a:	|      add.l d0,d2
    f86c:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f870:	|      move.l 36(sp),d0
    f874:	|      sub.l 40(sp),d0
    f878:	|      addq.l #1,d0
    f87a:	|      move.l d0,32(sp)
    f87e:	|      clr.l 28(sp)
    f882:	|      move.l 1cdda <SysBase>,d0
    f888:	|      movea.l d0,a6
    f88a:	|      move.l 32(sp),d0
    f88e:	|      move.l 28(sp),d1
    f892:	|      jsr -684(a6)
    f896:	|      move.l d0,24(sp)
    f89a:	|      move.l 24(sp),d0
    f89e:	|      move.l d0,20(sp)
    if (!newString) {
    f8a2:	|  ,-- bne.s f8a8 <builtIn_substring+0x148>
        return BR_ERROR;
    f8a4:	|  |   moveq #1,d0
    f8a6:	+--|-- bra.s f908 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f8a8:	|  '-> move.l 36(sp),d0
    f8ac:	|      sub.l 40(sp),d0
    f8b0:	|      move.l d0,d1
    f8b2:	|      move.l 40(sp),d0
    f8b6:	|      add.l 44(sp),d0
    f8ba:	|      move.l d1,-(sp)
    f8bc:	|      move.l d0,-(sp)
    f8be:	|      move.l 28(sp),-(sp)
    f8c2:	|      jsr 175f4 <memcpy>
    f8c8:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f8cc:	|      move.l 36(sp),d0
    f8d0:	|      sub.l 40(sp),d0
    f8d4:	|      movea.l 20(sp),a0
    f8d8:	|      adda.l d0,a0
    f8da:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f8dc:	|      moveq #28,d0
    f8de:	|      add.l 56(sp),d0
    f8e2:	|      move.l 20(sp),-(sp)
    f8e6:	|      move.l d0,-(sp)
    f8e8:	|      jsr 14d82 <makeTextVar>
    f8ee:	|      addq.l #8,sp
    FreeVec(newString);
    f8f0:	|      move.l 20(sp),16(sp)
    f8f6:	|      move.l 1cdda <SysBase>,d0
    f8fc:	|      movea.l d0,a6
    f8fe:	|      movea.l 16(sp),a1
    f902:	|      jsr -690(a6)
    return BR_CONTINUE;
    f906:	|      moveq #2,d0
}
    f908:	'----> move.l (sp)+,d2
    f90a:	       movea.l (sp)+,a6
    f90c:	       lea 40(sp),sp
    f910:	       rts

0000f912 <builtIn_stringLength>:

builtIn(stringLength)
{
    f912:	subq.l #8,sp
    f914:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f916:	movea.l 20(sp),a0
    f91a:	move.l 24(a0),d0
    f91e:	move.l d0,-(sp)
    f920:	jsr 15136 <getTextFromAnyVar>
    f926:	addq.l #4,sp
    f928:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f92c:	moveq #24,d0
    f92e:	add.l 20(sp),d0
    f932:	move.l d0,-(sp)
    f934:	jsr 154e4 <trimStack>
    f93a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f93c:	move.l 8(sp),-(sp)
    f940:	jsr 1404c <strlen>
    f946:	addq.l #4,sp
    f948:	move.l d0,d1
    f94a:	moveq #28,d0
    f94c:	add.l 20(sp),d0
    f950:	move.l d1,-(sp)
    f952:	pea 1 <_start+0x1>
    f956:	move.l d0,-(sp)
    f958:	jsr 15452 <setVariable>
    f95e:	lea 12(sp),sp
	FreeVec(newText);
    f962:	move.l 8(sp),4(sp)
    f968:	move.l 1cdda <SysBase>,d0
    f96e:	movea.l d0,a6
    f970:	movea.l 4(sp),a1
    f974:	jsr -690(a6)
	return BR_CONTINUE;
    f978:	moveq #2,d0
}
    f97a:	movea.l (sp)+,a6
    f97c:	addq.l #8,sp
    f97e:	rts

0000f980 <builtIn_newStack>:

builtIn(newStack)
{
    f980:	             lea -12(sp),sp
    f984:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f986:	             moveq #28,d0
    f988:	             add.l 24(sp),d0
    f98c:	             move.l d0,-(sp)
    f98e:	             jsr 14dae <unlinkVar>
    f994:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f996:	             movea.l 24(sp),a0
    f99a:	             moveq #6,d0
    f99c:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f9a0:	             moveq #12,d1
    f9a2:	             move.l d1,12(sp)
    f9a6:	             clr.l 8(sp)
    f9aa:	             move.l 1cdda <SysBase>,d0
    f9b0:	             movea.l d0,a6
    f9b2:	             move.l 12(sp),d0
    f9b6:	             move.l 8(sp),d1
    f9ba:	             jsr -684(a6)
    f9be:	             move.l d0,4(sp)
    f9c2:	             move.l 4(sp),d0
    f9c6:	             movea.l 24(sp),a0
    f9ca:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f9ce:	             movea.l 24(sp),a0
    f9d2:	             move.l 32(a0),d0
    f9d6:	         ,-- bne.s f9de <builtIn_newStack+0x5e>
    f9d8:	         |   moveq #1,d0
    f9da:	,--------|-- bra.w fa70 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f9de:	|        '-> movea.l 24(sp),a0
    f9e2:	|            movea.l 32(a0),a0
    f9e6:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f9e8:	|            movea.l 24(sp),a0
    f9ec:	|            movea.l 32(a0),a0
    f9f0:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f9f4:	|            movea.l 24(sp),a0
    f9f8:	|            movea.l 32(a0),a0
    f9fc:	|            moveq #1,d0
    f9fe:	|            move.l d0,8(a0)
    
    while (numParams--) {
    fa02:	|     ,----- bra.s fa5e <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    fa04:	|  ,--|----> movea.l 24(sp),a0
    fa08:	|  |  |      move.l 32(a0),d0
    fa0c:	|  |  |      move.l d0,d1
    fa0e:	|  |  |      movea.l 24(sp),a0
    fa12:	|  |  |      move.l 24(a0),d0
    fa16:	|  |  |      move.l d1,-(sp)
    fa18:	|  |  |      move.l d0,-(sp)
    fa1a:	|  |  |      jsr 1439c <addVarToStack>
    fa20:	|  |  |      addq.l #8,sp
    fa22:	|  |  |      tst.w d0
    fa24:	|  |  |  ,-- bne.s fa2a <builtIn_newStack+0xaa>
    fa26:	|  |  |  |   moveq #1,d0
    fa28:	+--|--|--|-- bra.s fa70 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    fa2a:	|  |  |  '-> movea.l 24(sp),a0
    fa2e:	|  |  |      movea.l 32(a0),a0
    fa32:	|  |  |      move.l 4(a0),d0
    fa36:	|  |  |  ,-- bne.s fa4e <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    fa38:	|  |  |  |   movea.l 24(sp),a0
    fa3c:	|  |  |  |   movea.l 32(a0),a1
    fa40:	|  |  |  |   movea.l 24(sp),a0
    fa44:	|  |  |  |   movea.l 32(a0),a0
    fa48:	|  |  |  |   move.l (a1),d0
    fa4a:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    fa4e:	|  |  |  '-> moveq #24,d0
    fa50:	|  |  |      add.l 24(sp),d0
    fa54:	|  |  |      move.l d0,-(sp)
    fa56:	|  |  |      jsr 154e4 <trimStack>
    fa5c:	|  |  |      addq.l #4,sp
    while (numParams--) {
    fa5e:	|  |  '----> move.l 20(sp),d0
    fa62:	|  |         move.l d0,d1
    fa64:	|  |         subq.l #1,d1
    fa66:	|  |         move.l d1,20(sp)
    fa6a:	|  |         tst.l d0
    fa6c:	|  '-------- bne.s fa04 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    fa6e:	|            moveq #2,d0
}
    fa70:	'----------> movea.l (sp)+,a6
    fa72:	             lea 12(sp),sp
    fa76:	             rts

0000fa78 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    fa78:	          movea.l 8(sp),a0
    fa7c:	          movea.l 24(a0),a0
    fa80:	          move.l (a0),d0
    fa82:	          moveq #6,d1
    fa84:	          cmp.l d0,d1
    fa86:	      ,-- beq.s faa2 <builtIn_stackSize+0x2a>
    fa88:	      |   moveq #10,d1
    fa8a:	      |   cmp.l d0,d1
    fa8c:	   ,--|-- beq.s fae6 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    fa8e:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    fa90:	   |  |   pea 19d3a <PutChar+0x1c58>
    fa96:	   |  |   jsr 17640 <KPrintF>
    fa9c:	   |  |   addq.l #4,sp
	return BR_ERROR;
    fa9e:	   |  |   moveq #1,d0
    faa0:	,--|--|-- bra.s fb20 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    faa2:	|  |  '-> movea.l 8(sp),a0
    faa6:	|  |      movea.l 24(a0),a0
    faaa:	|  |      move.l 4(a0),d0
    faae:	|  |      move.l d0,-(sp)
    fab0:	|  |      jsr 154c0 <stackSize>
    fab6:	|  |      addq.l #4,sp
    fab8:	|  |      move.l d0,d1
    faba:	|  |      moveq #28,d0
    fabc:	|  |      add.l 8(sp),d0
    fac0:	|  |      move.l d1,-(sp)
    fac2:	|  |      pea 1 <_start+0x1>
    fac6:	|  |      move.l d0,-(sp)
    fac8:	|  |      jsr 15452 <setVariable>
    face:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    fad2:	|  |      moveq #24,d0
    fad4:	|  |      add.l 8(sp),d0
    fad8:	|  |      move.l d0,-(sp)
    fada:	|  |      jsr 154e4 <trimStack>
    fae0:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    fae2:	|  |      moveq #2,d0
    fae4:	+--|----- bra.s fb20 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    fae6:	|  '----> movea.l 8(sp),a0
    faea:	|         movea.l 24(a0),a0
    faee:	|         movea.l 4(a0),a0
    faf2:	|         move.l 4(a0),d1
    faf6:	|         moveq #28,d0
    faf8:	|         add.l 8(sp),d0
    fafc:	|         move.l d1,-(sp)
    fafe:	|         pea 1 <_start+0x1>
    fb02:	|         move.l d0,-(sp)
    fb04:	|         jsr 15452 <setVariable>
    fb0a:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    fb0e:	|         moveq #24,d0
    fb10:	|         add.l 8(sp),d0
    fb14:	|         move.l d0,-(sp)
    fb16:	|         jsr 154e4 <trimStack>
    fb1c:	|         addq.l #4,sp
			return BR_CONTINUE;
    fb1e:	|         moveq #2,d0
}
    fb20:	'-------> rts

0000fb22 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fb22:	       movea.l 8(sp),a0
    fb26:	       movea.l 24(a0),a0
    fb2a:	       move.l (a0),d0
    fb2c:	       moveq #6,d1
    fb2e:	       cmp.l d0,d1
    fb30:	   ,-- beq.s fb44 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fb32:	   |   pea 19d63 <PutChar+0x1c81>
    fb38:	   |   jsr 17640 <KPrintF>
    fb3e:	   |   addq.l #4,sp
		return BR_ERROR;
    fb40:	   |   moveq #1,d0
    fb42:	,--|-- bra.s fb78 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    fb44:	|  '-> moveq #28,d0
    fb46:	|      add.l 8(sp),d0
    fb4a:	|      movea.l 8(sp),a0
    fb4e:	|      move.l 24(a0),d1
    fb52:	|      move.l d0,-(sp)
    fb54:	|      move.l d1,-(sp)
    fb56:	|      jsr 14666 <copyStack>
    fb5c:	|      addq.l #8,sp
    fb5e:	|      tst.w d0
    fb60:	|  ,-- bne.s fb66 <builtIn_copyStack+0x44>
    fb62:	|  |   moveq #1,d0
    fb64:	+--|-- bra.s fb78 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    fb66:	|  '-> moveq #24,d0
    fb68:	|      add.l 8(sp),d0
    fb6c:	|      move.l d0,-(sp)
    fb6e:	|      jsr 154e4 <trimStack>
    fb74:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb76:	|      moveq #2,d0
}
    fb78:	'----> rts

0000fb7a <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fb7a:	       movea.l 8(sp),a0
    fb7e:	       movea.l 24(a0),a0
    fb82:	       movea.l 8(a0),a0
    fb86:	       move.l (a0),d0
    fb88:	       moveq #6,d1
    fb8a:	       cmp.l d0,d1
    fb8c:	   ,-- beq.s fba2 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    fb8e:	   |   pea 19d7c <PutChar+0x1c9a>
    fb94:	   |   jsr 17640 <KPrintF>
    fb9a:	   |   addq.l #4,sp
		return BR_ERROR;
    fb9c:	   |   moveq #1,d0
    fb9e:	,--|-- bra.w fc30 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fba2:	|  '-> movea.l 8(sp),a0
    fba6:	|      movea.l 24(a0),a0
    fbaa:	|      movea.l 8(a0),a0
    fbae:	|      move.l 4(a0),d0
    fbb2:	|      move.l d0,d1
    fbb4:	|      movea.l 8(sp),a0
    fbb8:	|      move.l 24(a0),d0
    fbbc:	|      move.l d1,-(sp)
    fbbe:	|      move.l d0,-(sp)
    fbc0:	|      jsr 1439c <addVarToStack>
    fbc6:	|      addq.l #8,sp
    fbc8:	|      tst.w d0
    fbca:	|  ,-- bne.s fbd0 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    fbcc:	|  |   moveq #1,d0
    fbce:	+--|-- bra.s fc30 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    fbd0:	|  '-> movea.l 8(sp),a0
    fbd4:	|      movea.l 24(a0),a0
    fbd8:	|      movea.l 8(a0),a0
    fbdc:	|      movea.l 4(a0),a0
    fbe0:	|      movea.l (a0),a0
    fbe2:	|      move.l 8(a0),d0
    fbe6:	|  ,-- bne.s fc0e <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fbe8:	|  |   movea.l 8(sp),a0
    fbec:	|  |   movea.l 24(a0),a0
    fbf0:	|  |   movea.l 8(a0),a0
    fbf4:	|  |   movea.l 4(a0),a1
    fbf8:	|  |   movea.l 8(sp),a0
    fbfc:	|  |   movea.l 24(a0),a0
    fc00:	|  |   movea.l 8(a0),a0
    fc04:	|  |   movea.l 4(a0),a0
    fc08:	|  |   move.l (a1),d0
    fc0a:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    fc0e:	|  '-> moveq #24,d0
    fc10:	|      add.l 8(sp),d0
    fc14:	|      move.l d0,-(sp)
    fc16:	|      jsr 154e4 <trimStack>
    fc1c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fc1e:	|      moveq #24,d0
    fc20:	|      add.l 8(sp),d0
    fc24:	|      move.l d0,-(sp)
    fc26:	|      jsr 154e4 <trimStack>
    fc2c:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc2e:	|      moveq #2,d0
}
    fc30:	'----> rts

0000fc32 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fc32:	             movea.l 8(sp),a0
    fc36:	             movea.l 24(a0),a0
    fc3a:	             movea.l 8(a0),a0
    fc3e:	             move.l (a0),d0
    fc40:	             moveq #6,d1
    fc42:	             cmp.l d0,d1
    fc44:	         ,-- beq.s fc5a <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    fc46:	         |   pea 19d7c <PutChar+0x1c9a>
    fc4c:	         |   jsr 17640 <KPrintF>
    fc52:	         |   addq.l #4,sp
		return BR_ERROR;
    fc54:	         |   moveq #1,d0
    fc56:	,--------|-- bra.w fd48 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    fc5a:	|        '-> movea.l 8(sp),a0
    fc5e:	|            movea.l 24(a0),a0
    fc62:	|            movea.l 8(a0),a0
    fc66:	|            movea.l 4(a0),a0
    fc6a:	|            move.l (a0),d0
    fc6c:	|     ,----- bne.s fcc6 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fc6e:	|     |      movea.l 8(sp),a0
    fc72:	|     |      movea.l 24(a0),a0
    fc76:	|     |      movea.l 8(a0),a0
    fc7a:	|     |      move.l 4(a0),d0
    fc7e:	|     |      move.l d0,d1
    fc80:	|     |      movea.l 8(sp),a0
    fc84:	|     |      move.l 24(a0),d0
    fc88:	|     |      move.l d1,-(sp)
    fc8a:	|     |      move.l d0,-(sp)
    fc8c:	|     |      jsr 1439c <addVarToStack>
    fc92:	|     |      addq.l #8,sp
    fc94:	|     |      tst.w d0
    fc96:	|     |  ,-- bne.s fc9e <builtIn_enqueue+0x6c>
			return BR_ERROR;
    fc98:	|     |  |   moveq #1,d0
    fc9a:	+-----|--|-- bra.w fd48 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fc9e:	|     |  '-> movea.l 8(sp),a0
    fca2:	|     |      movea.l 24(a0),a0
    fca6:	|     |      movea.l 8(a0),a0
    fcaa:	|     |      movea.l 4(a0),a1
    fcae:	|     |      movea.l 8(sp),a0
    fcb2:	|     |      movea.l 24(a0),a0
    fcb6:	|     |      movea.l 8(a0),a0
    fcba:	|     |      movea.l 4(a0),a0
    fcbe:	|     |      move.l (a1),d0
    fcc0:	|     |      move.l d0,4(a0)
    fcc4:	|  ,--|----- bra.s fd26 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    fcc6:	|  |  '----> movea.l 8(sp),a0
    fcca:	|  |         movea.l 24(a0),a0
    fcce:	|  |         movea.l 8(a0),a0
    fcd2:	|  |         movea.l 4(a0),a0
    fcd6:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    fcda:	|  |         move.l d0,d1
    fcdc:	|  |         addq.l #8,d1
    fcde:	|  |         movea.l 8(sp),a0
    fce2:	|  |         move.l 24(a0),d0
    fce6:	|  |         move.l d1,-(sp)
    fce8:	|  |         move.l d0,-(sp)
    fcea:	|  |         jsr 1439c <addVarToStack>
    fcf0:	|  |         addq.l #8,sp
    fcf2:	|  |         tst.w d0
    fcf4:	|  |     ,-- bne.s fcfa <builtIn_enqueue+0xc8>
			return BR_ERROR;
    fcf6:	|  |     |   moveq #1,d0
    fcf8:	+--|-----|-- bra.s fd48 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    fcfa:	|  |     '-> movea.l 8(sp),a0
    fcfe:	|  |         movea.l 24(a0),a0
    fd02:	|  |         movea.l 8(a0),a0
    fd06:	|  |         movea.l 4(a0),a0
    fd0a:	|  |         movea.l 4(a0),a1
    fd0e:	|  |         movea.l 8(sp),a0
    fd12:	|  |         movea.l 24(a0),a0
    fd16:	|  |         movea.l 8(a0),a0
    fd1a:	|  |         movea.l 4(a0),a0
    fd1e:	|  |         move.l 8(a1),d0
    fd22:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    fd26:	|  '-------> moveq #24,d0
    fd28:	|            add.l 8(sp),d0
    fd2c:	|            move.l d0,-(sp)
    fd2e:	|            jsr 154e4 <trimStack>
    fd34:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    fd36:	|            moveq #24,d0
    fd38:	|            add.l 8(sp),d0
    fd3c:	|            move.l d0,-(sp)
    fd3e:	|            jsr 154e4 <trimStack>
    fd44:	|            addq.l #4,sp
	return BR_CONTINUE;
    fd46:	|            moveq #2,d0
}
    fd48:	'----------> rts

0000fd4a <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fd4a:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fd4c:	       movea.l 12(sp),a0
    fd50:	       movea.l 24(a0),a0
    fd54:	       movea.l 8(a0),a0
    fd58:	       move.l (a0),d0
    fd5a:	       moveq #6,d1
    fd5c:	       cmp.l d0,d1
    fd5e:	   ,-- beq.s fd74 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fd60:	   |   pea 19d63 <PutChar+0x1c81>
    fd66:	   |   jsr 17640 <KPrintF>
    fd6c:	   |   addq.l #4,sp
		return BR_ERROR;
    fd6e:	   |   moveq #1,d0
    fd70:	,--|-- bra.w fe0a <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fd74:	|  '-> movea.l 12(sp),a0
    fd78:	|      movea.l 24(a0),a0
    fd7c:	|      movea.l 8(a0),a0
    fd80:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fd84:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fd86:	|      movea.l 12(sp),a0
    fd8a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fd8e:	|      clr.l -(sp)
    fd90:	|      move.l d1,-(sp)
    fd92:	|      move.l d0,-(sp)
    fd94:	|      jsr 1473c <deleteVarFromStack>
    fd9a:	|      lea 12(sp),sp
    fd9e:	|      move.l d0,d1
    fda0:	|      moveq #28,d0
    fda2:	|      add.l 12(sp),d0
    fda6:	|      move.l d1,-(sp)
    fda8:	|      pea 1 <_start+0x1>
    fdac:	|      move.l d0,-(sp)
    fdae:	|      jsr 15452 <setVariable>
    fdb4:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fdb8:	|      movea.l 12(sp),a0
    fdbc:	|      movea.l 24(a0),a0
    fdc0:	|      movea.l 8(a0),a0
    fdc4:	|      movea.l 4(a0),a0
    fdc8:	|      move.l (a0),d0
    fdca:	|      movea.l 12(sp),a0
    fdce:	|      movea.l 24(a0),a0
    fdd2:	|      movea.l 8(a0),a0
    fdd6:	|      movea.l 4(a0),a2
    fdda:	|      move.l d0,-(sp)
    fddc:	|      jsr 1549c <stackFindLast>
    fde2:	|      addq.l #4,sp
    fde4:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fde8:	|      moveq #24,d0
    fdea:	|      add.l 12(sp),d0
    fdee:	|      move.l d0,-(sp)
    fdf0:	|      jsr 154e4 <trimStack>
    fdf6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fdf8:	|      moveq #24,d0
    fdfa:	|      add.l 12(sp),d0
    fdfe:	|      move.l d0,-(sp)
    fe00:	|      jsr 154e4 <trimStack>
    fe06:	|      addq.l #4,sp
	return BR_CONTINUE;
    fe08:	|      moveq #2,d0
}
    fe0a:	'----> movea.l (sp)+,a2
    fe0c:	       rts

0000fe0e <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fe0e:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fe10:	       movea.l 12(sp),a0
    fe14:	       movea.l 24(a0),a0
    fe18:	       movea.l 8(a0),a0
    fe1c:	       move.l (a0),d0
    fe1e:	       moveq #6,d1
    fe20:	       cmp.l d0,d1
    fe22:	   ,-- beq.s fe38 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fe24:	   |   pea 19d63 <PutChar+0x1c81>
    fe2a:	   |   jsr 17640 <KPrintF>
    fe30:	   |   addq.l #4,sp
		return BR_ERROR;
    fe32:	   |   moveq #1,d0
    fe34:	,--|-- bra.w fed0 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fe38:	|  '-> movea.l 12(sp),a0
    fe3c:	|      movea.l 24(a0),a0
    fe40:	|      movea.l 8(a0),a0
    fe44:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fe48:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fe4a:	|      movea.l 12(sp),a0
    fe4e:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fe52:	|      pea 1 <_start+0x1>
    fe56:	|      move.l d1,-(sp)
    fe58:	|      move.l d0,-(sp)
    fe5a:	|      jsr 1473c <deleteVarFromStack>
    fe60:	|      lea 12(sp),sp
    fe64:	|      move.l d0,d1
    fe66:	|      moveq #28,d0
    fe68:	|      add.l 12(sp),d0
    fe6c:	|      move.l d1,-(sp)
    fe6e:	|      pea 1 <_start+0x1>
    fe72:	|      move.l d0,-(sp)
    fe74:	|      jsr 15452 <setVariable>
    fe7a:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fe7e:	|      movea.l 12(sp),a0
    fe82:	|      movea.l 24(a0),a0
    fe86:	|      movea.l 8(a0),a0
    fe8a:	|      movea.l 4(a0),a0
    fe8e:	|      move.l (a0),d0
    fe90:	|      movea.l 12(sp),a0
    fe94:	|      movea.l 24(a0),a0
    fe98:	|      movea.l 8(a0),a0
    fe9c:	|      movea.l 4(a0),a2
    fea0:	|      move.l d0,-(sp)
    fea2:	|      jsr 1549c <stackFindLast>
    fea8:	|      addq.l #4,sp
    feaa:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    feae:	|      moveq #24,d0
    feb0:	|      add.l 12(sp),d0
    feb4:	|      move.l d0,-(sp)
    feb6:	|      jsr 154e4 <trimStack>
    febc:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    febe:	|      moveq #24,d0
    fec0:	|      add.l 12(sp),d0
    fec4:	|      move.l d0,-(sp)
    fec6:	|      jsr 154e4 <trimStack>
    fecc:	|      addq.l #4,sp
	return BR_CONTINUE;
    fece:	|      moveq #2,d0
} 
    fed0:	'----> movea.l (sp)+,a2
    fed2:	       rts

0000fed4 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fed4:	       movea.l 8(sp),a0
    fed8:	       movea.l 24(a0),a0
    fedc:	       move.l (a0),d0
    fede:	       moveq #6,d1
    fee0:	       cmp.l d0,d1
    fee2:	   ,-- beq.s fef6 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fee4:	   |   pea 19d63 <PutChar+0x1c81>
    feea:	   |   jsr 17640 <KPrintF>
    fef0:	   |   addq.l #4,sp
		return BR_ERROR;
    fef2:	   |   moveq #1,d0
    fef4:	,--|-- bra.s ff60 <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fef6:	|  '-> movea.l 8(sp),a0
    fefa:	|      movea.l 24(a0),a0
    fefe:	|      movea.l 4(a0),a0
    ff02:	|      move.l (a0),d0
    ff04:	|  ,-- bne.s ff18 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    ff06:	|  |   pea 19d94 <PutChar+0x1cb2>
    ff0c:	|  |   jsr 17640 <KPrintF>
    ff12:	|  |   addq.l #4,sp
		return BR_ERROR;
    ff14:	|  |   moveq #1,d0
    ff16:	+--|-- bra.s ff60 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ff18:	|  '-> moveq #28,d0
    ff1a:	|      add.l 8(sp),d0
    ff1e:	|      movea.l 8(sp),a0
    ff22:	|      movea.l 24(a0),a0
    ff26:	|      movea.l 4(a0),a0
    ff2a:	|      move.l (a0),d1
    ff2c:	|      move.l d0,-(sp)
    ff2e:	|      move.l d1,-(sp)
    ff30:	|      jsr 1501a <copyVariable>
    ff36:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    ff38:	|      movea.l 8(sp),a0
    ff3c:	|      movea.l 24(a0),a0
    ff40:	|      move.l 4(a0),d0
    ff44:	|      move.l d0,-(sp)
    ff46:	|      jsr 154e4 <trimStack>
    ff4c:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ff4e:	|      moveq #24,d0
    ff50:	|      add.l 8(sp),d0
    ff54:	|      move.l d0,-(sp)
    ff56:	|      jsr 154e4 <trimStack>
    ff5c:	|      addq.l #4,sp
	return BR_CONTINUE;
    ff5e:	|      moveq #2,d0
}
    ff60:	'----> rts

0000ff62 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ff62:	       movea.l 8(sp),a0
    ff66:	       movea.l 24(a0),a0
    ff6a:	       move.l (a0),d0
    ff6c:	       moveq #6,d1
    ff6e:	       cmp.l d0,d1
    ff70:	   ,-- beq.s ff84 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    ff72:	   |   pea 19d63 <PutChar+0x1c81>
    ff78:	   |   jsr 17640 <KPrintF>
    ff7e:	   |   addq.l #4,sp
		return BR_ERROR;
    ff80:	   |   moveq #1,d0
    ff82:	,--|-- bra.s ffd8 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ff84:	|  '-> movea.l 8(sp),a0
    ff88:	|      movea.l 24(a0),a0
    ff8c:	|      movea.l 4(a0),a0
    ff90:	|      move.l (a0),d0
    ff92:	|  ,-- bne.s ffa6 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    ff94:	|  |   pea 19d94 <PutChar+0x1cb2>
    ff9a:	|  |   jsr 17640 <KPrintF>
    ffa0:	|  |   addq.l #4,sp
		return BR_ERROR;
    ffa2:	|  |   moveq #1,d0
    ffa4:	+--|-- bra.s ffd8 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ffa6:	|  '-> moveq #28,d0
    ffa8:	|      add.l 8(sp),d0
    ffac:	|      movea.l 8(sp),a0
    ffb0:	|      movea.l 24(a0),a0
    ffb4:	|      movea.l 4(a0),a0
    ffb8:	|      move.l (a0),d1
    ffba:	|      move.l d0,-(sp)
    ffbc:	|      move.l d1,-(sp)
    ffbe:	|      jsr 1501a <copyVariable>
    ffc4:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    ffc6:	|      moveq #24,d0
    ffc8:	|      add.l 8(sp),d0
    ffcc:	|      move.l d0,-(sp)
    ffce:	|      jsr 154e4 <trimStack>
    ffd4:	|      addq.l #4,sp
	return BR_CONTINUE;
    ffd6:	|      moveq #2,d0
}
    ffd8:	'----> rts

0000ffda <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ffda:	       movea.l 8(sp),a0
    ffde:	       movea.l 24(a0),a0
    ffe2:	       move.l (a0),d0
    ffe4:	       moveq #6,d1
    ffe6:	       cmp.l d0,d1
    ffe8:	   ,-- beq.s fffc <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    ffea:	   |   pea 19d63 <PutChar+0x1c81>
    fff0:	   |   jsr 17640 <KPrintF>
    fff6:	   |   addq.l #4,sp
		return BR_ERROR;
    fff8:	   |   moveq #1,d0
    fffa:	,--|-- bra.s 10052 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fffc:	|  '-> movea.l 8(sp),a0
   10000:	|      movea.l 24(a0),a0
   10004:	|      movea.l 4(a0),a0
   10008:	|      move.l (a0),d0
   1000a:	|  ,-- bne.s 1001e <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
   1000c:	|  |   pea 19d94 <PutChar+0x1cb2>
   10012:	|  |   jsr 17640 <KPrintF>
   10018:	|  |   addq.l #4,sp
		return BR_ERROR;
   1001a:	|  |   moveq #1,d0
   1001c:	+--|-- bra.s 10052 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
   1001e:	|  '-> moveq #28,d0
   10020:	|      add.l 8(sp),d0
   10024:	|      movea.l 8(sp),a0
   10028:	|      movea.l 24(a0),a0
   1002c:	|      movea.l 4(a0),a0
   10030:	|      move.l 4(a0),d1
   10034:	|      move.l d0,-(sp)
   10036:	|      move.l d1,-(sp)
   10038:	|      jsr 1501a <copyVariable>
   1003e:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   10040:	|      moveq #24,d0
   10042:	|      add.l 8(sp),d0
   10046:	|      move.l d0,-(sp)
   10048:	|      jsr 154e4 <trimStack>
   1004e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10050:	|      moveq #2,d0
}
   10052:	'----> rts

00010054 <builtIn_random>:

builtIn(random)
{
   10054:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
   10056:	       movea.l 12(sp),a0
   1005a:	       move.l 24(a0),d0
   1005e:	       move.l d0,-(sp)
   10060:	       pea 1 <_start+0x1>
   10064:	       move.l sp,d0
   10066:	       addq.l #8,d0
   10068:	       move.l d0,-(sp)
   1006a:	       jsr 14b60 <getValueType>
   10070:	       lea 12(sp),sp
   10074:	       tst.w d0
   10076:	   ,-- bne.s 1007c <builtIn_random+0x28>
		return BR_ERROR;
   10078:	   |   moveq #1,d0
   1007a:	,--|-- bra.s 100c6 <builtIn_random+0x72>

	trimStack (&fun -> stack);
   1007c:	|  '-> moveq #24,d0
   1007e:	|      add.l 12(sp),d0
   10082:	|      move.l d0,-(sp)
   10084:	|      jsr 154e4 <trimStack>
   1008a:	|      addq.l #4,sp
	if (num <= 0) num = 1;
   1008c:	|      move.l (sp),d0
   1008e:	|  ,-- bgt.s 10094 <builtIn_random+0x40>
   10090:	|  |   moveq #1,d0
   10092:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
   10094:	|  '-> jsr 16200 <rand>
   1009a:	|      move.l d0,d1
   1009c:	|      move.l (sp),d0
   1009e:	|      move.l d0,-(sp)
   100a0:	|      move.l d1,-(sp)
   100a2:	|      jsr 180a6 <__umodsi3>
   100a8:	|      addq.l #8,sp
   100aa:	|      move.l d0,d1
   100ac:	|      moveq #28,d0
   100ae:	|      add.l 12(sp),d0
   100b2:	|      move.l d1,-(sp)
   100b4:	|      pea 1 <_start+0x1>
   100b8:	|      move.l d0,-(sp)
   100ba:	|      jsr 15452 <setVariable>
   100c0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   100c4:	|      moveq #2,d0
}
   100c6:	'----> addq.l #4,sp
   100c8:	       rts

000100ca <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
   100ca:	nop
   100cc:	rts

000100ce <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
   100ce:	moveq #2,d0
}
   100d0:	rts

000100d2 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
   100d2:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
   100d4:	       movea.l 12(sp),a0
   100d8:	       move.l 24(a0),d0
   100dc:	       move.l d0,-(sp)
   100de:	       pea 1 <_start+0x1>
   100e2:	       move.l sp,d0
   100e4:	       addq.l #8,d0
   100e6:	       move.l d0,-(sp)
   100e8:	       jsr 14b60 <getValueType>
   100ee:	       lea 12(sp),sp
   100f2:	       tst.w d0
   100f4:	   ,-- bne.s 10108 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
   100f6:	   |   pea 19da7 <PutChar+0x1cc5>
   100fc:	   |   jsr 17640 <KPrintF>
   10102:	   |   addq.l #4,sp
		return BR_ERROR;
   10104:	   |   moveq #1,d0
   10106:	,--|-- bra.s 10148 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
   10108:	|  '-> moveq #24,d0
   1010a:	|      add.l 12(sp),d0
   1010e:	|      move.l d0,-(sp)
   10110:	|      jsr 154e4 <trimStack>
   10116:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
   10118:	|      move.l (sp),d0
   1011a:	|      move.l d0,d0
   1011c:	|      move.w d0,1ccf2 <textPaletteIndex>

	if( textPaletteIndex > 31) {
   10122:	|      move.w 1ccf2 <textPaletteIndex>,d0
   10128:	|      cmpi.w #31,d0
   1012c:	|  ,-- bls.s 10146 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
   1012e:	|  |   pea 19dce <PutChar+0x1cec>
   10134:	|  |   jsr 17640 <KPrintF>
   1013a:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
   1013c:	|  |   clr.w 1ccf2 <textPaletteIndex>
		return BR_ERROR;
   10142:	|  |   moveq #1,d0
   10144:	+--|-- bra.s 10148 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
   10146:	|  '-> moveq #2,d0
}
   10148:	'----> addq.l #4,sp
   1014a:	       rts

0001014c <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   1014c:	moveq #2,d0
}
   1014e:	rts

00010150 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10150:	moveq #2,d0
}
   10152:	rts

00010154 <builtIn_setFont>:


builtIn(setFont)
{
   10154:	       lea -16(sp),sp
   10158:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   1015a:	       movea.l 28(sp),a0
   1015e:	       move.l 24(a0),d0
   10162:	       move.l d0,-(sp)
   10164:	       pea 1 <_start+0x1>
   10168:	       lea 12(sp),a0
   1016c:	       move.l a0,-(sp)
   1016e:	       jsr 14b60 <getValueType>
   10174:	       lea 12(sp),sp
   10178:	       tst.w d0
   1017a:	   ,-- bne.s 10182 <builtIn_setFont+0x2e>
   1017c:	   |   moveq #1,d0
   1017e:	,--|-- bra.w 10230 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
   10182:	|  '-> moveq #24,d0
   10184:	|      add.l 28(sp),d0
   10188:	|      move.l d0,-(sp)
   1018a:	|      jsr 154e4 <trimStack>
   10190:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10192:	|      movea.l 28(sp),a0
   10196:	|      move.l 24(a0),d0
   1019a:	|      move.l d0,-(sp)
   1019c:	|      jsr 15136 <getTextFromAnyVar>
   101a2:	|      addq.l #4,sp
   101a4:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
   101a8:	|  ,-- bne.s 101b0 <builtIn_setFont+0x5c>
   101aa:	|  |   moveq #1,d0
   101ac:	+--|-- bra.w 10230 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
   101b0:	|  '-> moveq #24,d0
   101b2:	|      add.l 28(sp),d0
   101b6:	|      move.l d0,-(sp)
   101b8:	|      jsr 154e4 <trimStack>
   101be:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   101c0:	|      movea.l 28(sp),a0
   101c4:	|      move.l 24(a0),d0
   101c8:	|      move.l d0,-(sp)
   101ca:	|      pea 5 <_start+0x5>
   101ce:	|      lea 16(sp),a0
   101d2:	|      move.l a0,-(sp)
   101d4:	|      jsr 14b60 <getValueType>
   101da:	|      lea 12(sp),sp
   101de:	|      tst.w d0
   101e0:	|  ,-- bne.s 101e6 <builtIn_setFont+0x92>
   101e2:	|  |   moveq #1,d0
   101e4:	+--|-- bra.s 10230 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
   101e6:	|  '-> moveq #24,d0
   101e8:	|      add.l 28(sp),d0
   101ec:	|      move.l d0,-(sp)
   101ee:	|      jsr 154e4 <trimStack>
   101f4:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   101f6:	|      move.l 4(sp),d1
   101fa:	|      move.l 8(sp),d0
   101fe:	|      move.l d1,-(sp)
   10200:	|      move.l 20(sp),-(sp)
   10204:	|      move.l d0,-(sp)
   10206:	|      jsr 15998 <loadFont>
   1020c:	|      lea 12(sp),sp
   10210:	|      tst.w d0
   10212:	|  ,-- bne.s 10218 <builtIn_setFont+0xc4>
   10214:	|  |   moveq #1,d0
   10216:	+--|-- bra.s 10230 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   10218:	|  '-> move.l 16(sp),12(sp)
   1021e:	|      move.l 1cdda <SysBase>,d0
   10224:	|      movea.l d0,a6
   10226:	|      movea.l 12(sp),a1
   1022a:	|      jsr -690(a6)

    return BR_CONTINUE;
   1022e:	|      moveq #2,d0
}
   10230:	'----> movea.l (sp)+,a6
   10232:	       lea 16(sp),sp
   10236:	       rts

00010238 <builtIn_inFont>:

builtIn(inFont)
{
   10238:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   1023a:	       movea.l 12(sp),a0
   1023e:	       move.l 24(a0),d0
   10242:	       move.l d0,-(sp)
   10244:	       jsr 15136 <getTextFromAnyVar>
   1024a:	       addq.l #4,sp
   1024c:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   1024e:	   ,-- bne.s 10254 <builtIn_inFont+0x1c>
   10250:	   |   moveq #1,d0
   10252:	,--|-- bra.s 1028a <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
   10254:	|  '-> moveq #24,d0
   10256:	|      add.l 12(sp),d0
   1025a:	|      move.l d0,-(sp)
   1025c:	|      jsr 154e4 <trimStack>
   10262:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   10264:	|      move.l (sp),-(sp)
   10266:	|      jsr 15986 <isInFont>
   1026c:	|      addq.l #4,sp
   1026e:	|      movea.w d0,a0
   10270:	|      moveq #28,d0
   10272:	|      add.l 12(sp),d0
   10276:	|      move.l a0,-(sp)
   10278:	|      pea 1 <_start+0x1>
   1027c:	|      move.l d0,-(sp)
   1027e:	|      jsr 15452 <setVariable>
   10284:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10288:	|      moveq #2,d0
}
   1028a:	'----> addq.l #4,sp
   1028c:	       rts

0001028e <builtIn_pasteString>:

builtIn(pasteString)
{
   1028e:	       lea -16(sp),sp
   10292:	       move.l a6,-(sp)
   10294:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10296:	       movea.l 32(sp),a0
   1029a:	       move.l 24(a0),d0
   1029e:	       move.l d0,-(sp)
   102a0:	       jsr 15136 <getTextFromAnyVar>
   102a6:	       addq.l #4,sp
   102a8:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   102ac:	       moveq #24,d0
   102ae:	       add.l 32(sp),d0
   102b2:	       move.l d0,-(sp)
   102b4:	       jsr 154e4 <trimStack>
   102ba:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   102bc:	       movea.l 32(sp),a0
   102c0:	       move.l 24(a0),d0
   102c4:	       move.l d0,-(sp)
   102c6:	       pea 1 <_start+0x1>
   102ca:	       lea 20(sp),a0
   102ce:	       move.l a0,-(sp)
   102d0:	       jsr 14b60 <getValueType>
   102d6:	       lea 12(sp),sp
   102da:	       tst.w d0
   102dc:	   ,-- bne.s 102e4 <builtIn_pasteString+0x56>
   102de:	   |   moveq #1,d0
   102e0:	,--|-- bra.w 10386 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   102e4:	|  '-> moveq #24,d0
   102e6:	|      add.l 32(sp),d0
   102ea:	|      move.l d0,-(sp)
   102ec:	|      jsr 154e4 <trimStack>
   102f2:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   102f4:	|      movea.l 32(sp),a0
   102f8:	|      move.l 24(a0),d0
   102fc:	|      move.l d0,-(sp)
   102fe:	|      pea 1 <_start+0x1>
   10302:	|      lea 16(sp),a0
   10306:	|      move.l a0,-(sp)
   10308:	|      jsr 14b60 <getValueType>
   1030e:	|      lea 12(sp),sp
   10312:	|      tst.w d0
   10314:	|  ,-- bne.s 1031a <builtIn_pasteString+0x8c>
   10316:	|  |   moveq #1,d0
   10318:	+--|-- bra.s 10386 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   1031a:	|  '-> moveq #24,d0
   1031c:	|      add.l 32(sp),d0
   10320:	|      move.l d0,-(sp)
   10322:	|      jsr 154e4 <trimStack>
   10328:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   1032a:	|      move.l 8(sp),d0
   1032e:	|      cmpi.l #65535,d0
   10334:	|  ,-- bne.s 10354 <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
   10336:	|  |   move.l 1cd2e <winWidth>,d2
   1033c:	|  |   move.l 20(sp),-(sp)
   10340:	|  |   jsr 15c4a <stringWidth>
   10346:	|  |   addq.l #4,sp
   10348:	|  |   move.l d2,d1
   1034a:	|  |   sub.l d0,d1
   1034c:	|  |   move.l d1,d0
   1034e:	|  |   lsr.l #1,d0
   10350:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   10354:	|  '-> move.l 12(sp),d1
   10358:	|      move.l 8(sp),d0
   1035c:	|      move.l d1,-(sp)
   1035e:	|      move.l d0,-(sp)
   10360:	|      move.l 28(sp),-(sp)
   10364:	|      jsr 15b6c <pasteStringToBackdrop>
   1036a:	|      lea 12(sp),sp
    FreeVec(newText); 
   1036e:	|      move.l 20(sp),16(sp)
   10374:	|      move.l 1cdda <SysBase>,d0
   1037a:	|      movea.l d0,a6
   1037c:	|      movea.l 16(sp),a1
   10380:	|      jsr -690(a6)
    return BR_CONTINUE;
   10384:	|      moveq #2,d0
}
   10386:	'----> move.l (sp)+,d2
   10388:	       movea.l (sp)+,a6
   1038a:	       lea 16(sp),sp
   1038e:	       rts

00010390 <builtIn_anim>:

builtIn(anim)
{
   10390:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   10394:	       moveq #1,d0
   10396:	       cmp.l 16(sp),d0
   1039a:	   ,-- blt.s 103b0 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   1039c:	   |   pea 19df8 <PutChar+0x1d16>
   103a2:	   |   jsr 17640 <KPrintF>
   103a8:	   |   addq.l #4,sp
		return BR_ERROR;
   103aa:	   |   moveq #1,d0
   103ac:	,--|-- bra.w 1043e <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   103b0:	|  '-> moveq #24,d1
   103b2:	|      add.l 20(sp),d1
   103b6:	|      move.l 16(sp),d0
   103ba:	|      subq.l #1,d0
   103bc:	|      move.l d1,-(sp)
   103be:	|      move.l d0,-(sp)
   103c0:	|      jsr 99c2 <createPersonaAnim>
   103c6:	|      addq.l #8,sp
   103c8:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   103cc:	|      movea.l 20(sp),a0
   103d0:	|      move.l 24(a0),d0
   103d4:	|      move.l d0,-(sp)
   103d6:	|      pea 5 <_start+0x5>
   103da:	|      lea 8(sp),a0
   103de:	|      move.l a0,-(sp)
   103e0:	|      jsr 14b60 <getValueType>
   103e6:	|      lea 12(sp),sp
   103ea:	|      tst.w d0
   103ec:	|  ,-- bne.s 103f2 <builtIn_anim+0x62>
   103ee:	|  |   moveq #1,d0
   103f0:	+--|-- bra.s 1043e <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   103f2:	|  '-> moveq #24,d0
   103f4:	|      add.l 20(sp),d0
   103f8:	|      move.l d0,-(sp)
   103fa:	|      jsr 154e4 <trimStack>
   10400:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10402:	|      move.l (sp),d0
   10404:	|      move.l d0,-(sp)
   10406:	|      jsr 16362 <loadBankForAnim>
   1040c:	|      addq.l #4,sp
   1040e:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10412:	|  ,-- bne.s 10418 <builtIn_anim+0x88>
   10414:	|  |   moveq #1,d0
   10416:	+--|-- bra.s 1043e <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   10418:	|  '-> move.l 4(sp),-(sp)
   1041c:	|      move.l 12(sp),-(sp)
   10420:	|      jsr b8ce <setBankFile>
   10426:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10428:	|      moveq #28,d0
   1042a:	|      add.l 20(sp),d0
   1042e:	|      move.l 8(sp),-(sp)
   10432:	|      move.l d0,-(sp)
   10434:	|      jsr 1540e <newAnimationVariable>
   1043a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1043c:	|      moveq #2,d0
}
   1043e:	'----> lea 12(sp),sp
   10442:	       rts

00010444 <builtIn_costume>:

builtIn(costume)
{
   10444:	          lea -32(sp),sp
   10448:	          move.l a6,-(sp)
   1044a:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   1044c:	          moveq #8,d0
   1044e:	          move.l d0,32(sp)
   10452:	          clr.l 28(sp)
   10456:	          move.l 1cdda <SysBase>,d0
   1045c:	          movea.l d0,a6
   1045e:	          move.l 32(sp),d0
   10462:	          move.l 28(sp),d1
   10466:	          jsr -684(a6)
   1046a:	          move.l d0,24(sp)
   1046e:	          move.l 24(sp),d0
   10472:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   10476:	      ,-- bne.s 1047e <builtIn_costume+0x3a>
   10478:	      |   moveq #1,d0
   1047a:	,-----|-- bra.w 10566 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   1047e:	|     '-> move.l 44(sp),d0
   10482:	|         pea 3 <_start+0x3>
   10486:	|         move.l d0,-(sp)
   10488:	|         jsr 1804a <__divsi3>
   1048e:	|         addq.l #8,sp
   10490:	|         movea.l 20(sp),a0
   10494:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10498:	|         tst.l 44(sp)
   1049c:	|     ,-- beq.s 104b2 <builtIn_costume+0x6e>
   1049e:	|     |   movea.l 20(sp),a0
   104a2:	|     |   move.l 4(a0),d1
   104a6:	|     |   move.l d1,d0
   104a8:	|     |   add.l d0,d0
   104aa:	|     |   add.l d1,d0
   104ac:	|     |   cmp.l 44(sp),d0
   104b0:	|  ,--|-- beq.s 104c6 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   104b2:	|  |  '-> pea 19e32 <PutChar+0x1d50>
   104b8:	|  |      jsr 17640 <KPrintF>
   104be:	|  |      addq.l #4,sp
        return BR_ERROR;
   104c0:	|  |      moveq #1,d0
   104c2:	+--|----- bra.w 10566 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   104c6:	|  '----> move.l 44(sp),d0
   104ca:	|         add.l d0,d0
   104cc:	|         add.l d0,d0
   104ce:	|         move.l d0,16(sp)
   104d2:	|         clr.l 12(sp)
   104d6:	|         move.l 1cdda <SysBase>,d0
   104dc:	|         movea.l d0,a6
   104de:	|         move.l 16(sp),d0
   104e2:	|         move.l 12(sp),d1
   104e6:	|         jsr -684(a6)
   104ea:	|         move.l d0,8(sp)
   104ee:	|         move.l 8(sp),d0
   104f2:	|         movea.l 20(sp),a0
   104f6:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   104f8:	|         movea.l 20(sp),a0
   104fc:	|         move.l (a0),d0
   104fe:	|     ,-- bne.s 10504 <builtIn_costume+0xc0>
   10500:	|     |   moveq #1,d0
   10502:	+-----|-- bra.s 10566 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10504:	|     '-> move.l 44(sp),d0
   10508:	|         subq.l #1,d0
   1050a:	|         move.l d0,36(sp)
   1050e:	|     ,-- bra.s 1054a <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   10510:	|  ,--|-> movea.l 48(sp),a0
   10514:	|  |  |   move.l 24(a0),d0
   10518:	|  |  |   movea.l 20(sp),a0
   1051c:	|  |  |   movea.l (a0),a0
   1051e:	|  |  |   move.l 36(sp),d1
   10522:	|  |  |   add.l d1,d1
   10524:	|  |  |   add.l d1,d1
   10526:	|  |  |   lea (0,a0,d1.l),a2
   1052a:	|  |  |   move.l d0,-(sp)
   1052c:	|  |  |   jsr 15038 <getAnimationFromVar>
   10532:	|  |  |   addq.l #4,sp
   10534:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10536:	|  |  |   moveq #24,d0
   10538:	|  |  |   add.l 48(sp),d0
   1053c:	|  |  |   move.l d0,-(sp)
   1053e:	|  |  |   jsr 154e4 <trimStack>
   10544:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10546:	|  |  |   subq.l #1,36(sp)
   1054a:	|  |  '-> tst.l 36(sp)
   1054e:	|  '----- bge.s 10510 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10550:	|         moveq #28,d0
   10552:	|         add.l 48(sp),d0
   10556:	|         move.l 20(sp),-(sp)
   1055a:	|         move.l d0,-(sp)
   1055c:	|         jsr 15430 <newCostumeVariable>
   10562:	|         addq.l #8,sp
    return BR_CONTINUE;
   10564:	|         moveq #2,d0
}
   10566:	'-------> movea.l (sp)+,a2
   10568:	          movea.l (sp)+,a6
   1056a:	          lea 32(sp),sp
   1056e:	          rts

00010570 <builtIn_launch>:

builtIn(launch)
{
   10570:	          lea -20(sp),sp
   10574:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10576:	          movea.l 32(sp),a0
   1057a:	          move.l 24(a0),d0
   1057e:	          move.l d0,-(sp)
   10580:	          jsr 15136 <getTextFromAnyVar>
   10586:	          addq.l #4,sp
   10588:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   1058c:	      ,-- bne.s 10594 <builtIn_launch+0x24>
   1058e:	      |   moveq #1,d0
   10590:	,-----|-- bra.w 106c2 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   10594:	|     '-> move.l 20(sp),-(sp)
   10598:	|         jsr 2fe <encodeFilename>
   1059e:	|         addq.l #4,sp
   105a0:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   105a4:	|         moveq #24,d0
   105a6:	|         add.l 32(sp),d0
   105aa:	|         move.l d0,-(sp)
   105ac:	|         jsr 154e4 <trimStack>
   105b2:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   105b4:	|         movea.l 20(sp),a0
   105b8:	|         move.b (a0),d0
   105ba:	|         cmpi.b #104,d0
   105be:	|  ,----- bne.s 10628 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   105c0:	|  |      movea.l 20(sp),a0
   105c4:	|  |      addq.l #1,a0
   105c6:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   105c8:	|  |      cmpi.b #116,d0
   105cc:	|  +----- bne.s 10628 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   105ce:	|  |      movea.l 20(sp),a0
   105d2:	|  |      addq.l #2,a0
   105d4:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   105d6:	|  |      cmpi.b #116,d0
   105da:	|  +----- bne.s 10628 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   105dc:	|  |      movea.l 20(sp),a0
   105e0:	|  |      addq.l #3,a0
   105e2:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   105e4:	|  |      cmpi.b #112,d0
   105e8:	|  +----- bne.s 10628 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   105ea:	|  |      movea.l 20(sp),a0
   105ee:	|  |      addq.l #4,a0
   105f0:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   105f2:	|  |      cmpi.b #58,d0
   105f6:	|  |  ,-- beq.s 10614 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   105f8:	|  |  |   movea.l 20(sp),a0
   105fc:	|  |  |   addq.l #4,a0
   105fe:	|  |  |   move.b (a0),d0
   10600:	|  |  |   cmpi.b #115,d0
   10604:	|  +--|-- bne.s 10628 <builtIn_launch+0xb8>
   10606:	|  |  |   movea.l 20(sp),a0
   1060a:	|  |  |   addq.l #5,a0
   1060c:	|  |  |   move.b (a0),d0
   1060e:	|  |  |   cmpi.b #58,d0
   10612:	|  +--|-- bne.s 10628 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   10614:	|  |  '-> move.l 20(sp),-(sp)
   10618:	|  |      jsr b8 <copyString>
   1061e:	|  |      addq.l #4,sp
   10620:	|  |      move.l d0,1ce98 <launchMe>
   10626:	|  |  ,-- bra.s 1067a <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10628:	|  '--|-> move.l 1cd42 <gamePath>,d0
   1062e:	|     |   pea 19e7d <PutChar+0x1d9b>
   10634:	|     |   move.l d0,-(sp)
   10636:	|     |   jsr 1408c <joinStrings>
   1063c:	|     |   addq.l #8,sp
   1063e:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   10642:	|     |   move.l 16(sp),-(sp)
   10646:	|     |   move.l 16(sp),-(sp)
   1064a:	|     |   jsr 1408c <joinStrings>
   10650:	|     |   addq.l #8,sp
   10652:	|     |   move.l d0,1ce98 <launchMe>
        FreeVec(newText);
   10658:	|     |   move.l 16(sp),8(sp)
   1065e:	|     |   move.l 1cdda <SysBase>,d0
   10664:	|     |   movea.l d0,a6
   10666:	|     |   movea.l 8(sp),a1
   1066a:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   1066e:	|     |   move.l 1ce98 <launchMe>,d0
   10674:	|     +-- bne.s 1067a <builtIn_launch+0x10a>
   10676:	|     |   moveq #1,d0
   10678:	+-----|-- bra.s 106c2 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   1067a:	|     '-> move.l 20(sp),4(sp)
   10680:	|         move.l 1cdda <SysBase>,d0
   10686:	|         movea.l d0,a6
   10688:	|         movea.l 4(sp),a1
   1068c:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10690:	|         clr.l -(sp)
   10692:	|         jsr 4d3a <setGraphicsWindow>
   10698:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   1069a:	|         moveq #28,d0
   1069c:	|         add.l 32(sp),d0
   106a0:	|         pea 1 <_start+0x1>
   106a4:	|         pea 1 <_start+0x1>
   106a8:	|         move.l d0,-(sp)
   106aa:	|         jsr 15452 <setVariable>
   106b0:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   106b4:	|         moveq #28,d0
   106b6:	|         add.l 32(sp),d0
   106ba:	|         move.l d0,1ce9c <launchResult>

    return BR_KEEP_AND_PAUSE;
   106c0:	|         moveq #0,d0
}
   106c2:	'-------> movea.l (sp)+,a6
   106c4:	          lea 20(sp),sp
   106c8:	          rts

000106ca <builtIn_pause>:

builtIn(pause)
{
   106ca:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106cc:	       movea.l 12(sp),a0
   106d0:	       move.l 24(a0),d0
   106d4:	       move.l d0,-(sp)
   106d6:	       pea 1 <_start+0x1>
   106da:	       move.l sp,d0
   106dc:	       addq.l #8,d0
   106de:	       move.l d0,-(sp)
   106e0:	       jsr 14b60 <getValueType>
   106e6:	       lea 12(sp),sp
   106ea:	       tst.w d0
   106ec:	   ,-- bne.s 106f2 <builtIn_pause+0x28>
   106ee:	   |   moveq #1,d0
   106f0:	,--|-- bra.s 10720 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   106f2:	|  '-> moveq #24,d0
   106f4:	|      add.l 12(sp),d0
   106f8:	|      move.l d0,-(sp)
   106fa:	|      jsr 154e4 <trimStack>
   10700:	|      addq.l #4,sp
	if (theTime > 0) {
   10702:	|      move.l (sp),d0
   10704:	|  ,-- ble.s 1071e <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   10706:	|  |   move.l (sp),d0
   10708:	|  |   subq.l #1,d0
   1070a:	|  |   movea.l 12(sp),a0
   1070e:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   10712:	|  |   movea.l 12(sp),a0
   10716:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   1071a:	|  |   moveq #0,d0
   1071c:	+--|-- bra.s 10720 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   1071e:	|  '-> moveq #2,d0
}
   10720:	'----> addq.l #4,sp
   10722:	       rts

00010724 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10724:	jsr 54ce <completeTimers>
	return BR_CONTINUE;
   1072a:	moveq #2,d0
}
   1072c:	rts

0001072e <builtIn_callEvent>:

builtIn(callEvent)
{
   1072e:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10732:	       movea.l 20(sp),a0
   10736:	       move.l 24(a0),d0
   1073a:	       move.l d0,-(sp)
   1073c:	       pea 7 <_start+0x7>
   10740:	       lea 8(sp),a0
   10744:	       move.l a0,-(sp)
   10746:	       jsr 14b60 <getValueType>
   1074c:	       lea 12(sp),sp
   10750:	       tst.w d0
   10752:	   ,-- bne.s 1075a <builtIn_callEvent+0x2c>
   10754:	   |   moveq #1,d0
   10756:	,--|-- bra.w 107f0 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1075a:	|  '-> moveq #24,d0
   1075c:	|      add.l 20(sp),d0
   10760:	|      move.l d0,-(sp)
   10762:	|      jsr 154e4 <trimStack>
   10768:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1076a:	|      movea.l 20(sp),a0
   1076e:	|      move.l 24(a0),d0
   10772:	|      move.l d0,-(sp)
   10774:	|      pea 7 <_start+0x7>
   10778:	|      moveq #12,d0
   1077a:	|      add.l sp,d0
   1077c:	|      move.l d0,-(sp)
   1077e:	|      jsr 14b60 <getValueType>
   10784:	|      lea 12(sp),sp
   10788:	|      tst.w d0
   1078a:	|  ,-- bne.s 10790 <builtIn_callEvent+0x62>
   1078c:	|  |   moveq #1,d0
   1078e:	+--|-- bra.s 107f0 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10790:	|  '-> moveq #24,d0
   10792:	|      add.l 20(sp),d0
   10796:	|      move.l d0,-(sp)
   10798:	|      jsr 154e4 <trimStack>
   1079e:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   107a0:	|      move.l (sp),d1
   107a2:	|      move.l 4(sp),d0
   107a6:	|      move.l d1,-(sp)
   107a8:	|      move.l d0,-(sp)
   107aa:	|      jsr d8a8 <getCombinationFunction>
   107b0:	|      addq.l #8,sp
   107b2:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   107b6:	|  ,-- beq.s 107d6 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   107b8:	|  |   moveq #28,d0
   107ba:	|  |   add.l 20(sp),d0
   107be:	|  |   move.l 8(sp),-(sp)
   107c2:	|  |   pea 2 <_start+0x2>
   107c6:	|  |   move.l d0,-(sp)
   107c8:	|  |   jsr 15452 <setVariable>
   107ce:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   107d2:	|  |   moveq #4,d0
   107d4:	+--|-- bra.s 107f0 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   107d6:	|  '-> moveq #28,d0
   107d8:	|      add.l 20(sp),d0
   107dc:	|      clr.l -(sp)
   107de:	|      pea 1 <_start+0x1>
   107e2:	|      move.l d0,-(sp)
   107e4:	|      jsr 15452 <setVariable>
   107ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
   107ee:	|      moveq #2,d0
}
   107f0:	'----> lea 12(sp),sp
   107f4:	       rts

000107f6 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   107f6:	move.w #1,1cea8 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   107fe:	moveq #2,d0
}
   10800:	rts

00010802 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10802:	moveq #24,d0
   10804:	add.l 8(sp),d0
   10808:	move.l d0,-(sp)
   1080a:	jsr 154e4 <trimStack>
   10810:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10812:	pea 19e7f <PutChar+0x1d9d>
   10818:	jsr 17640 <KPrintF>
   1081e:	addq.l #4,sp
	return BR_CONTINUE;
   10820:	moveq #2,d0
}
   10822:	rts

00010824 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10824:	pea 19e7f <PutChar+0x1d9d>
   1082a:	jsr 17640 <KPrintF>
   10830:	addq.l #4,sp
	return BR_CONTINUE;
   10832:	moveq #2,d0
}
   10834:	rts

00010836 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10836:	pea 19e7f <PutChar+0x1d9d>
   1083c:	jsr 17640 <KPrintF>
   10842:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10844:	moveq #2,d0
}
   10846:	rts

00010848 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10848:	pea 19e7f <PutChar+0x1d9d>
   1084e:	jsr 17640 <KPrintF>
   10854:	addq.l #4,sp
	return BR_CONTINUE;
   10856:	moveq #2,d0
}
   10858:	rts

0001085a <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1085a:	pea 19e7f <PutChar+0x1d9d>
   10860:	jsr 17640 <KPrintF>
   10866:	addq.l #4,sp
	return BR_CONTINUE;
   10868:	moveq #2,d0
}
   1086a:	rts

0001086c <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   1086c:	pea 19e7f <PutChar+0x1d9d>
   10872:	jsr 17640 <KPrintF>
   10878:	addq.l #4,sp
	return BR_CONTINUE;
   1087a:	moveq #2,d0
}
   1087c:	rts

0001087e <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   1087e:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10882:	       movea.l 20(sp),a0
   10886:	       move.l 24(a0),d0
   1088a:	       move.l d0,-(sp)
   1088c:	       pea 1 <_start+0x1>
   10890:	       moveq #16,d0
   10892:	       add.l sp,d0
   10894:	       move.l d0,-(sp)
   10896:	       jsr 14b60 <getValueType>
   1089c:	       lea 12(sp),sp
   108a0:	       tst.w d0
   108a2:	   ,-- bne.s 108aa <builtIn_startMusic+0x2c>
   108a4:	   |   moveq #1,d0
   108a6:	,--|-- bra.w 1094a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   108aa:	|  '-> moveq #24,d0
   108ac:	|      add.l 20(sp),d0
   108b0:	|      move.l d0,-(sp)
   108b2:	|      jsr 154e4 <trimStack>
   108b8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108ba:	|      movea.l 20(sp),a0
   108be:	|      move.l 24(a0),d0
   108c2:	|      move.l d0,-(sp)
   108c4:	|      pea 1 <_start+0x1>
   108c8:	|      moveq #12,d0
   108ca:	|      add.l sp,d0
   108cc:	|      move.l d0,-(sp)
   108ce:	|      jsr 14b60 <getValueType>
   108d4:	|      lea 12(sp),sp
   108d8:	|      tst.w d0
   108da:	|  ,-- bne.s 108e0 <builtIn_startMusic+0x62>
   108dc:	|  |   moveq #1,d0
   108de:	+--|-- bra.s 1094a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   108e0:	|  '-> moveq #24,d0
   108e2:	|      add.l 20(sp),d0
   108e6:	|      move.l d0,-(sp)
   108e8:	|      jsr 154e4 <trimStack>
   108ee:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   108f0:	|      movea.l 20(sp),a0
   108f4:	|      move.l 24(a0),d0
   108f8:	|      move.l d0,-(sp)
   108fa:	|      pea 5 <_start+0x5>
   108fe:	|      lea 8(sp),a0
   10902:	|      move.l a0,-(sp)
   10904:	|      jsr 14b60 <getValueType>
   1090a:	|      lea 12(sp),sp
   1090e:	|      tst.w d0
   10910:	|  ,-- bne.s 10916 <builtIn_startMusic+0x98>
   10912:	|  |   moveq #1,d0
   10914:	+--|-- bra.s 1094a <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10916:	|  '-> moveq #24,d0
   10918:	|      add.l 20(sp),d0
   1091c:	|      move.l d0,-(sp)
   1091e:	|      jsr 154e4 <trimStack>
   10924:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10926:	|      movea.l 8(sp),a0
   1092a:	|      move.l 4(sp),d1
   1092e:	|      move.l (sp),d0
   10930:	|      move.l a0,-(sp)
   10932:	|      move.l d1,-(sp)
   10934:	|      move.l d0,-(sp)
   10936:	|      jsr d4aa <playMOD>
   1093c:	|      lea 12(sp),sp
   10940:	|      tst.w d0
   10942:	|  ,-- bne.s 10948 <builtIn_startMusic+0xca>
   10944:	|  |   moveq #2,d0
   10946:	+--|-- bra.s 1094a <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10948:	|  '-> moveq #2,d0
}
   1094a:	'----> lea 12(sp),sp
   1094e:	       rts

00010950 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10950:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10952:	       movea.l 12(sp),a0
   10956:	       move.l 24(a0),d0
   1095a:	       move.l d0,-(sp)
   1095c:	       pea 1 <_start+0x1>
   10960:	       move.l sp,d0
   10962:	       addq.l #8,d0
   10964:	       move.l d0,-(sp)
   10966:	       jsr 14b60 <getValueType>
   1096c:	       lea 12(sp),sp
   10970:	       tst.w d0
   10972:	   ,-- bne.s 10978 <builtIn_stopMusic+0x28>
   10974:	   |   moveq #1,d0
   10976:	,--|-- bra.s 10996 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10978:	|  '-> moveq #24,d0
   1097a:	|      add.l 12(sp),d0
   1097e:	|      move.l d0,-(sp)
   10980:	|      jsr 154e4 <trimStack>
   10986:	|      addq.l #4,sp
	stopMOD (v);
   10988:	|      move.l (sp),d0
   1098a:	|      move.l d0,-(sp)
   1098c:	|      jsr d546 <stopMOD>
   10992:	|      addq.l #4,sp
	return BR_CONTINUE;
   10994:	|      moveq #2,d0
}
   10996:	'----> addq.l #4,sp
   10998:	       rts

0001099a <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   1099a:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1099c:	       movea.l 16(sp),a0
   109a0:	       move.l 24(a0),d0
   109a4:	       move.l d0,-(sp)
   109a6:	       pea 1 <_start+0x1>
   109aa:	       move.l sp,d0
   109ac:	       addq.l #8,d0
   109ae:	       move.l d0,-(sp)
   109b0:	       jsr 14b60 <getValueType>
   109b6:	       lea 12(sp),sp
   109ba:	       tst.w d0
   109bc:	   ,-- bne.s 109c2 <builtIn_setMusicVolume+0x28>
   109be:	   |   moveq #1,d0
   109c0:	,--|-- bra.s 10a1c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   109c2:	|  '-> moveq #24,d0
   109c4:	|      add.l 16(sp),d0
   109c8:	|      move.l d0,-(sp)
   109ca:	|      jsr 154e4 <trimStack>
   109d0:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109d2:	|      movea.l 16(sp),a0
   109d6:	|      move.l 24(a0),d0
   109da:	|      move.l d0,-(sp)
   109dc:	|      pea 1 <_start+0x1>
   109e0:	|      moveq #12,d0
   109e2:	|      add.l sp,d0
   109e4:	|      move.l d0,-(sp)
   109e6:	|      jsr 14b60 <getValueType>
   109ec:	|      lea 12(sp),sp
   109f0:	|      tst.w d0
   109f2:	|  ,-- bne.s 109f8 <builtIn_setMusicVolume+0x5e>
   109f4:	|  |   moveq #1,d0
   109f6:	+--|-- bra.s 10a1c <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   109f8:	|  '-> moveq #24,d0
   109fa:	|      add.l 16(sp),d0
   109fe:	|      move.l d0,-(sp)
   10a00:	|      jsr 154e4 <trimStack>
   10a06:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10a08:	|      move.l (sp),d1
   10a0a:	|      move.l 4(sp),d0
   10a0e:	|      move.l d1,-(sp)
   10a10:	|      move.l d0,-(sp)
   10a12:	|      jsr d52c <setMusicVolume>
   10a18:	|      addq.l #8,sp
	return BR_CONTINUE;
   10a1a:	|      moveq #2,d0
}
   10a1c:	'----> addq.l #8,sp
   10a1e:	       rts

00010a20 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10a20:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a22:	       movea.l 12(sp),a0
   10a26:	       move.l 24(a0),d0
   10a2a:	       move.l d0,-(sp)
   10a2c:	       pea 1 <_start+0x1>
   10a30:	       move.l sp,d0
   10a32:	       addq.l #8,d0
   10a34:	       move.l d0,-(sp)
   10a36:	       jsr 14b60 <getValueType>
   10a3c:	       lea 12(sp),sp
   10a40:	       tst.w d0
   10a42:	   ,-- bne.s 10a48 <builtIn_setDefaultMusicVolume+0x28>
   10a44:	   |   moveq #1,d0
   10a46:	,--|-- bra.s 10a66 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10a48:	|  '-> moveq #24,d0
   10a4a:	|      add.l 12(sp),d0
   10a4e:	|      move.l d0,-(sp)
   10a50:	|      jsr 154e4 <trimStack>
   10a56:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10a58:	|      move.l (sp),d0
   10a5a:	|      move.l d0,-(sp)
   10a5c:	|      jsr d510 <setDefaultMusicVolume>
   10a62:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a64:	|      moveq #2,d0
}
   10a66:	'----> addq.l #4,sp
   10a68:	       rts

00010a6a <builtIn_playSound>:

builtIn(playSound)
{
   10a6a:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a6c:	       movea.l 12(sp),a0
   10a70:	       move.l 24(a0),d0
   10a74:	       move.l d0,-(sp)
   10a76:	       pea 5 <_start+0x5>
   10a7a:	       move.l sp,d0
   10a7c:	       addq.l #8,d0
   10a7e:	       move.l d0,-(sp)
   10a80:	       jsr 14b60 <getValueType>
   10a86:	       lea 12(sp),sp
   10a8a:	       tst.w d0
   10a8c:	   ,-- bne.s 10a92 <builtIn_playSound+0x28>
   10a8e:	   |   moveq #1,d0
   10a90:	,--|-- bra.s 10aba <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10a92:	|  '-> moveq #24,d0
   10a94:	|      add.l 12(sp),d0
   10a98:	|      move.l d0,-(sp)
   10a9a:	|      jsr 154e4 <trimStack>
   10aa0:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10aa2:	|      move.l (sp),d0
   10aa4:	|      clr.l -(sp)
   10aa6:	|      move.l d0,-(sp)
   10aa8:	|      jsr d534 <startSound>
   10aae:	|      addq.l #8,sp
   10ab0:	|      tst.w d0
   10ab2:	|  ,-- bne.s 10ab8 <builtIn_playSound+0x4e>
   10ab4:	|  |   moveq #2,d0
   10ab6:	+--|-- bra.s 10aba <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10ab8:	|  '-> moveq #2,d0
}
   10aba:	'----> addq.l #4,sp
   10abc:	       rts

00010abe <builtIn_loopSound>:

builtIn(loopSound)
{
   10abe:	             lea -28(sp),sp
   10ac2:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10ac4:	             tst.l 36(sp)
   10ac8:	         ,-- bgt.s 10ade <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10aca:	         |   pea 19ea2 <PutChar+0x1dc0>
   10ad0:	         |   jsr 17640 <KPrintF>
   10ad6:	         |   addq.l #4,sp
		return BR_ERROR;
   10ad8:	         |   moveq #1,d0
   10ada:	,--------|-- bra.w 10c9a <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10ade:	|        '-> moveq #1,d0
   10ae0:	|            cmp.l 36(sp),d0
   10ae4:	|     ,----- blt.s 10b40 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10ae6:	|     |      movea.l 40(sp),a0
   10aea:	|     |      move.l 24(a0),d0
   10aee:	|     |      move.l d0,-(sp)
   10af0:	|     |      pea 5 <_start+0x5>
   10af4:	|     |      lea 16(sp),a0
   10af8:	|     |      move.l a0,-(sp)
   10afa:	|     |      jsr 14b60 <getValueType>
   10b00:	|     |      lea 12(sp),sp
   10b04:	|     |      tst.w d0
   10b06:	|     |  ,-- bne.s 10b0e <builtIn_loopSound+0x50>
   10b08:	|     |  |   moveq #1,d0
   10b0a:	+-----|--|-- bra.w 10c9a <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10b0e:	|     |  '-> moveq #24,d0
   10b10:	|     |      add.l 40(sp),d0
   10b14:	|     |      move.l d0,-(sp)
   10b16:	|     |      jsr 154e4 <trimStack>
   10b1c:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10b1e:	|     |      move.l 8(sp),d0
   10b22:	|     |      pea 1 <_start+0x1>
   10b26:	|     |      move.l d0,-(sp)
   10b28:	|     |      jsr d534 <startSound>
   10b2e:	|     |      addq.l #8,sp
   10b30:	|     |      tst.w d0
   10b32:	|     |  ,-- bne.s 10b3a <builtIn_loopSound+0x7c>
   10b34:	|     |  |   moveq #2,d0
   10b36:	+-----|--|-- bra.w 10c9a <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10b3a:	|     |  '-> moveq #2,d0
   10b3c:	+-----|----- bra.w 10c9a <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10b40:	|     '----> moveq #2,d1
   10b42:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10b46:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10b4a:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10b4e:	|            movea.l 40(sp),a0
   10b52:	|            movea.l 24(a0),a0
   10b56:	|            move.l (a0),d0
   10b58:	|            moveq #5,d1
   10b5a:	|            cmp.l d0,d1
   10b5c:	|  ,-------- beq.w 10c34 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10b60:	|  |         movea.l 40(sp),a0
   10b64:	|  |         move.l 24(a0),d0
   10b68:	|  |         move.l d0,-(sp)
   10b6a:	|  |         pea 1 <_start+0x1>
   10b6e:	|  |         lea 12(sp),a0
   10b72:	|  |         move.l a0,-(sp)
   10b74:	|  |         jsr 14b60 <getValueType>
   10b7a:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10b7e:	|  |         moveq #24,d0
   10b80:	|  |         add.l 40(sp),d0
   10b84:	|  |         move.l d0,-(sp)
   10b86:	|  |         jsr 154e4 <trimStack>
   10b8c:	|  |         addq.l #4,sp
			numParams--;
   10b8e:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10b92:	|  +-------- bra.w 10c34 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10b96:	|  |  ,----> movea.l 40(sp),a0
   10b9a:	|  |  |      move.l 24(a0),d0
   10b9e:	|  |  |      move.l d0,-(sp)
   10ba0:	|  |  |      pea 5 <_start+0x5>
   10ba4:	|  |  |      lea 16(sp),a0
   10ba8:	|  |  |      move.l a0,-(sp)
   10baa:	|  |  |      jsr 14b60 <getValueType>
   10bb0:	|  |  |      lea 12(sp),sp
   10bb4:	|  |  |      tst.w d0
   10bb6:	|  |  |  ,-- bne.s 10bcc <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10bb8:	|  |  |  |   pea 19ee0 <PutChar+0x1dfe>
   10bbe:	|  |  |  |   jsr 17640 <KPrintF>
   10bc4:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10bc6:	|  |  |  |   moveq #1,d0
   10bc8:	+--|--|--|-- bra.w 10c9a <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10bcc:	|  |  |  '-> moveq #20,d0
   10bce:	|  |  |      move.l d0,20(sp)
   10bd2:	|  |  |      clr.l 16(sp)
   10bd6:	|  |  |      move.l 1cdda <SysBase>,d0
   10bdc:	|  |  |      movea.l d0,a6
   10bde:	|  |  |      move.l 20(sp),d0
   10be2:	|  |  |      move.l 16(sp),d1
   10be6:	|  |  |      jsr -684(a6)
   10bea:	|  |  |      move.l d0,12(sp)
   10bee:	|  |  |      move.l 12(sp),d0
   10bf2:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10bf6:	|  |  |  ,-- bne.s 10bfe <builtIn_loopSound+0x140>
   10bf8:	|  |  |  |   moveq #1,d0
   10bfa:	+--|--|--|-- bra.w 10c9a <builtIn_loopSound+0x1dc>

			s->next = old;
   10bfe:	|  |  |  '-> movea.l 28(sp),a0
   10c02:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10c08:	|  |  |      movea.l 28(sp),a0
   10c0c:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10c10:	|  |  |      move.l 8(sp),d0
   10c14:	|  |  |      movea.l 28(sp),a0
   10c18:	|  |  |      move.l d0,(a0)
			old = s;
   10c1a:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10c20:	|  |  |      moveq #24,d0
   10c22:	|  |  |      add.l 40(sp),d0
   10c26:	|  |  |      move.l d0,-(sp)
   10c28:	|  |  |      jsr 154e4 <trimStack>
   10c2e:	|  |  |      addq.l #4,sp
			numParams--;
   10c30:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10c34:	|  '--|----> tst.l 36(sp)
   10c38:	|     '----- bne.w 10b96 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10c3c:	|        ,-- bra.s 10c48 <builtIn_loopSound+0x18a>
   10c3e:	|     ,--|-> movea.l 28(sp),a0
   10c42:	|     |  |   move.l 4(a0),28(sp)
   10c48:	|     |  '-> movea.l 28(sp),a0
   10c4c:	|     |      move.l 4(a0),d0
   10c50:	|     '----- bne.s 10c3e <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10c52:	|            move.l 4(sp),d0
   10c56:	|            moveq #1,d1
   10c58:	|            cmp.l d0,d1
   10c5a:	|     ,----- bge.s 10c72 <builtIn_loopSound+0x1b4>
			s->next = old;
   10c5c:	|     |      movea.l 28(sp),a0
   10c60:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10c66:	|     |      movea.l 24(sp),a0
   10c6a:	|     |      move.l 28(sp),8(a0)
   10c70:	|     |  ,-- bra.s 10c82 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10c72:	|     '--|-> move.l 4(sp),d0
   10c76:	|        +-- beq.s 10c82 <builtIn_loopSound+0x1c4>
			s->next = s;
   10c78:	|        |   movea.l 28(sp),a0
   10c7c:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10c82:	|        '-> movea.l 24(sp),a0
   10c86:	|            moveq #-1,d0
   10c88:	|            move.l d0,16(a0)
		playSoundList(old);
   10c8c:	|            move.l 24(sp),-(sp)
   10c90:	|            jsr d4ae <playSoundList>
   10c96:	|            addq.l #4,sp
		return BR_CONTINUE;
   10c98:	|            moveq #2,d0
	}
}
   10c9a:	'----------> movea.l (sp)+,a6
   10c9c:	             lea 28(sp),sp
   10ca0:	             rts

00010ca2 <builtIn_stopSound>:

builtIn(stopSound)
{
   10ca2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ca4:	       movea.l 12(sp),a0
   10ca8:	       move.l 24(a0),d0
   10cac:	       move.l d0,-(sp)
   10cae:	       pea 5 <_start+0x5>
   10cb2:	       move.l sp,d0
   10cb4:	       addq.l #8,d0
   10cb6:	       move.l d0,-(sp)
   10cb8:	       jsr 14b60 <getValueType>
   10cbe:	       lea 12(sp),sp
   10cc2:	       tst.w d0
   10cc4:	   ,-- bne.s 10cca <builtIn_stopSound+0x28>
   10cc6:	   |   moveq #1,d0
   10cc8:	,--|-- bra.s 10ce8 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10cca:	|  '-> moveq #24,d0
   10ccc:	|      add.l 12(sp),d0
   10cd0:	|      move.l d0,-(sp)
   10cd2:	|      jsr 154e4 <trimStack>
   10cd8:	|      addq.l #4,sp
	huntKillSound (v);
   10cda:	|      move.l (sp),d0
   10cdc:	|      move.l d0,-(sp)
   10cde:	|      jsr d4a6 <huntKillSound>
   10ce4:	|      addq.l #4,sp
	return BR_CONTINUE;
   10ce6:	|      moveq #2,d0
}
   10ce8:	'----> addq.l #4,sp
   10cea:	       rts

00010cec <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10cec:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10cee:	       movea.l 12(sp),a0
   10cf2:	       move.l 24(a0),d0
   10cf6:	       move.l d0,-(sp)
   10cf8:	       pea 1 <_start+0x1>
   10cfc:	       move.l sp,d0
   10cfe:	       addq.l #8,d0
   10d00:	       move.l d0,-(sp)
   10d02:	       jsr 14b60 <getValueType>
   10d08:	       lea 12(sp),sp
   10d0c:	       tst.w d0
   10d0e:	   ,-- bne.s 10d14 <builtIn_setDefaultSoundVolume+0x28>
   10d10:	   |   moveq #1,d0
   10d12:	,--|-- bra.s 10d32 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10d14:	|  '-> moveq #24,d0
   10d16:	|      add.l 12(sp),d0
   10d1a:	|      move.l d0,-(sp)
   10d1c:	|      jsr 154e4 <trimStack>
   10d22:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10d24:	|      move.l (sp),d0
   10d26:	|      move.l d0,-(sp)
   10d28:	|      jsr d51c <setDefaultSoundVolume>
   10d2e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10d30:	|      moveq #2,d0
}
   10d32:	'----> addq.l #4,sp
   10d34:	       rts

00010d36 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10d36:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d38:	       movea.l 16(sp),a0
   10d3c:	       move.l 24(a0),d0
   10d40:	       move.l d0,-(sp)
   10d42:	       pea 1 <_start+0x1>
   10d46:	       move.l sp,d0
   10d48:	       addq.l #8,d0
   10d4a:	       move.l d0,-(sp)
   10d4c:	       jsr 14b60 <getValueType>
   10d52:	       lea 12(sp),sp
   10d56:	       tst.w d0
   10d58:	   ,-- bne.s 10d5e <builtIn_setSoundVolume+0x28>
   10d5a:	   |   moveq #1,d0
   10d5c:	,--|-- bra.s 10db8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10d5e:	|  '-> moveq #24,d0
   10d60:	|      add.l 16(sp),d0
   10d64:	|      move.l d0,-(sp)
   10d66:	|      jsr 154e4 <trimStack>
   10d6c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d6e:	|      movea.l 16(sp),a0
   10d72:	|      move.l 24(a0),d0
   10d76:	|      move.l d0,-(sp)
   10d78:	|      pea 5 <_start+0x5>
   10d7c:	|      moveq #12,d0
   10d7e:	|      add.l sp,d0
   10d80:	|      move.l d0,-(sp)
   10d82:	|      jsr 14b60 <getValueType>
   10d88:	|      lea 12(sp),sp
   10d8c:	|      tst.w d0
   10d8e:	|  ,-- bne.s 10d94 <builtIn_setSoundVolume+0x5e>
   10d90:	|  |   moveq #1,d0
   10d92:	+--|-- bra.s 10db8 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10d94:	|  '-> moveq #24,d0
   10d96:	|      add.l 16(sp),d0
   10d9a:	|      move.l d0,-(sp)
   10d9c:	|      jsr 154e4 <trimStack>
   10da2:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10da4:	|      move.l (sp),d1
   10da6:	|      move.l 4(sp),d0
   10daa:	|      move.l d1,-(sp)
   10dac:	|      move.l d0,-(sp)
   10dae:	|      jsr d530 <setSoundVolume>
   10db4:	|      addq.l #8,sp
	return BR_CONTINUE;
   10db6:	|      moveq #2,d0
}
   10db8:	'----> addq.l #8,sp
   10dba:	       rts

00010dbc <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10dbc:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10dc0:	       movea.l 20(sp),a0
   10dc4:	       move.l 24(a0),d0
   10dc8:	       move.l d0,-(sp)
   10dca:	       pea 1 <_start+0x1>
   10dce:	       moveq #12,d0
   10dd0:	       add.l sp,d0
   10dd2:	       move.l d0,-(sp)
   10dd4:	       jsr 14b60 <getValueType>
   10dda:	       lea 12(sp),sp
   10dde:	       tst.w d0
   10de0:	   ,-- bne.s 10de8 <builtIn_setSoundLoopPoints+0x2c>
   10de2:	   |   moveq #1,d0
   10de4:	,--|-- bra.w 10e80 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10de8:	|  '-> moveq #24,d0
   10dea:	|      add.l 20(sp),d0
   10dee:	|      move.l d0,-(sp)
   10df0:	|      jsr 154e4 <trimStack>
   10df6:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10df8:	|      movea.l 20(sp),a0
   10dfc:	|      move.l 24(a0),d0
   10e00:	|      move.l d0,-(sp)
   10e02:	|      pea 1 <_start+0x1>
   10e06:	|      lea 8(sp),a0
   10e0a:	|      move.l a0,-(sp)
   10e0c:	|      jsr 14b60 <getValueType>
   10e12:	|      lea 12(sp),sp
   10e16:	|      tst.w d0
   10e18:	|  ,-- bne.s 10e1e <builtIn_setSoundLoopPoints+0x62>
   10e1a:	|  |   moveq #1,d0
   10e1c:	+--|-- bra.s 10e80 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10e1e:	|  '-> moveq #24,d0
   10e20:	|      add.l 20(sp),d0
   10e24:	|      move.l d0,-(sp)
   10e26:	|      jsr 154e4 <trimStack>
   10e2c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e2e:	|      movea.l 20(sp),a0
   10e32:	|      move.l 24(a0),d0
   10e36:	|      move.l d0,-(sp)
   10e38:	|      pea 5 <_start+0x5>
   10e3c:	|      moveq #16,d0
   10e3e:	|      add.l sp,d0
   10e40:	|      move.l d0,-(sp)
   10e42:	|      jsr 14b60 <getValueType>
   10e48:	|      lea 12(sp),sp
   10e4c:	|      tst.w d0
   10e4e:	|  ,-- bne.s 10e54 <builtIn_setSoundLoopPoints+0x98>
   10e50:	|  |   moveq #1,d0
   10e52:	+--|-- bra.s 10e80 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10e54:	|  '-> moveq #24,d0
   10e56:	|      add.l 20(sp),d0
   10e5a:	|      move.l d0,-(sp)
   10e5c:	|      jsr 154e4 <trimStack>
   10e62:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10e64:	|      movea.l 4(sp),a0
   10e68:	|      move.l (sp),d1
   10e6a:	|      move.l 8(sp),d0
   10e6e:	|      move.l a0,-(sp)
   10e70:	|      move.l d1,-(sp)
   10e72:	|      move.l d0,-(sp)
   10e74:	|      jsr d528 <setSoundLoop>
   10e7a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10e7e:	|      moveq #2,d0
}
   10e80:	'----> lea 12(sp),sp
   10e84:	       rts

00010e86 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10e86:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10e88:	          movea.l 12(sp),a0
   10e8c:	          movea.l 24(a0),a0
   10e90:	          move.l (a0),d0
   10e92:	          moveq #5,d1
   10e94:	          cmp.l d0,d1
   10e96:	,-------- bne.s 10eda <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10e98:	|         movea.l 12(sp),a0
   10e9c:	|         move.l 24(a0),d0
   10ea0:	|         move.l d0,-(sp)
   10ea2:	|         pea 5 <_start+0x5>
   10ea6:	|         move.l sp,d0
   10ea8:	|         addq.l #8,d0
   10eaa:	|         move.l d0,-(sp)
   10eac:	|         jsr 14b60 <getValueType>
   10eb2:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10eb6:	|         moveq #24,d0
   10eb8:	|         add.l 12(sp),d0
   10ebc:	|         move.l d0,-(sp)
   10ebe:	|         jsr 154e4 <trimStack>
   10ec4:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10ec6:	|         move.l (sp),d0
   10ec8:	|         move.l d0,-(sp)
   10eca:	|         jsr 16dea <setFloor>
   10ed0:	|         addq.l #4,sp
   10ed2:	|         tst.w d0
   10ed4:	|  ,----- bne.s 10ef0 <builtIn_setFloor+0x6a>
   10ed6:	|  |      moveq #1,d0
   10ed8:	|  |  ,-- bra.s 10ef2 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10eda:	'--|--|-> moveq #24,d0
   10edc:	   |  |   add.l 12(sp),d0
   10ee0:	   |  |   move.l d0,-(sp)
   10ee2:	   |  |   jsr 154e4 <trimStack>
   10ee8:	   |  |   addq.l #4,sp
		setFloorNull ();
   10eea:	   |  |   jsr 17564 <setFloorNull>
	}
	return BR_CONTINUE;
   10ef0:	   '--|-> moveq #2,d0
}
   10ef2:	      '-> addq.l #4,sp
   10ef4:	          rts

00010ef6 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10ef6:	jsr 16666 <drawFloor>
	return BR_CONTINUE;
   10efc:	moveq #2,d0
}
   10efe:	rts

00010f00 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10f00:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10f02:	          movea.l 12(sp),a0
   10f06:	          movea.l 24(a0),a0
   10f0a:	          move.l (a0),d0
   10f0c:	          moveq #5,d1
   10f0e:	          cmp.l d0,d1
   10f10:	,-------- bne.s 10f54 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10f12:	|         movea.l 12(sp),a0
   10f16:	|         move.l 24(a0),d0
   10f1a:	|         move.l d0,-(sp)
   10f1c:	|         pea 5 <_start+0x5>
   10f20:	|         move.l sp,d0
   10f22:	|         addq.l #8,d0
   10f24:	|         move.l d0,-(sp)
   10f26:	|         jsr 14b60 <getValueType>
   10f2c:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10f30:	|         moveq #24,d0
   10f32:	|         add.l 12(sp),d0
   10f36:	|         move.l d0,-(sp)
   10f38:	|         jsr 154e4 <trimStack>
   10f3e:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10f40:	|         move.l (sp),d0
   10f42:	|         move.l d0,-(sp)
   10f44:	|         jsr 89d6 <setZBuffer>
   10f4a:	|         addq.l #4,sp
   10f4c:	|         tst.w d0
   10f4e:	|  ,----- bne.s 10f6a <builtIn_setZBuffer+0x6a>
   10f50:	|  |      moveq #1,d0
   10f52:	|  |  ,-- bra.s 10f6c <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10f54:	'--|--|-> moveq #24,d0
   10f56:	   |  |   add.l 12(sp),d0
   10f5a:	   |  |   move.l d0,-(sp)
   10f5c:	   |  |   jsr 154e4 <trimStack>
   10f62:	   |  |   addq.l #4,sp
		killZBuffer ();
   10f64:	   |  |   jsr 898a <killZBuffer>
	}
	return BR_CONTINUE;
   10f6a:	   '--|-> moveq #2,d0
}
   10f6c:	      '-> addq.l #4,sp
   10f6e:	          rts

00010f70 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10f70:	pea 19f17 <PutChar+0x1e35>
   10f76:	jsr 17640 <KPrintF>
   10f7c:	addq.l #4,sp
	return BR_CONTINUE;
   10f7e:	moveq #2,d0
}
   10f80:	rts

00010f82 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f82:	          movea.l 8(sp),a0
   10f86:	          move.l 24(a0),d0
   10f8a:	          move.l d0,-(sp)
   10f8c:	          pea 1 <_start+0x1>
   10f90:	          pea 1cea4 <speechMode>
   10f96:	          jsr 14b60 <getValueType>
   10f9c:	          lea 12(sp),sp
   10fa0:	          tst.w d0
   10fa2:	      ,-- bne.s 10fa8 <builtIn_setSpeechMode+0x26>
   10fa4:	      |   moveq #1,d0
   10fa6:	,-----|-- bra.s 10fe0 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10fa8:	|     '-> moveq #24,d0
   10faa:	|         add.l 8(sp),d0
   10fae:	|         move.l d0,-(sp)
   10fb0:	|         jsr 154e4 <trimStack>
   10fb6:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10fb8:	|         move.l 1cea4 <speechMode>,d0
   10fbe:	|     ,-- bmi.s 10fcc <builtIn_setSpeechMode+0x4a>
   10fc0:	|     |   move.l 1cea4 <speechMode>,d0
   10fc6:	|     |   moveq #2,d1
   10fc8:	|     |   cmp.l d0,d1
   10fca:	|  ,--|-- bge.s 10fde <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10fcc:	|  |  '-> pea 19f30 <PutChar+0x1e4e>
   10fd2:	|  |      jsr 17640 <KPrintF>
   10fd8:	|  |      addq.l #4,sp
		return BR_ERROR;
   10fda:	|  |      moveq #1,d0
   10fdc:	+--|----- bra.s 10fe0 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10fde:	|  '----> moveq #2,d0
}
   10fe0:	'-------> rts

00010fe2 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10fe2:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10fe4:	       jsr 42cc <isThereAnySpeechGoingOn>
   10fea:	       move.l d0,(sp)
	if (i == -1) {
   10fec:	       moveq #-1,d0
   10fee:	       cmp.l (sp),d0
   10ff0:	,----- bne.s 1100c <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10ff2:	|      moveq #28,d0
   10ff4:	|      add.l 12(sp),d0
   10ff8:	|      clr.l -(sp)
   10ffa:	|      pea 1 <_start+0x1>
   10ffe:	|      move.l d0,-(sp)
   11000:	|      jsr 15452 <setVariable>
   11006:	|      lea 12(sp),sp
   1100a:	|  ,-- bra.s 11024 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   1100c:	'--|-> moveq #28,d0
   1100e:	   |   add.l 12(sp),d0
   11012:	   |   move.l (sp),-(sp)
   11014:	   |   pea 7 <_start+0x7>
   11018:	   |   move.l d0,-(sp)
   1101a:	   |   jsr 15452 <setVariable>
   11020:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11024:	   '-> moveq #2,d0
}
   11026:	       addq.l #4,sp
   11028:	       rts

0001102a <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   1102a:	jsr 6df8 <killSpeechTimers>
	return BR_CONTINUE;
   11030:	moveq #2,d0
}
   11032:	rts

00011034 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   11034:	       move.l 1ceea <overRegion>,d0
   1103a:	,----- beq.s 11064 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   1103c:	|      movea.l 1ceea <overRegion>,a0
   11042:	|      movea.l 28(a0),a0
   11046:	|      move.l 4(a0),d1
   1104a:	|      moveq #28,d0
   1104c:	|      add.l 8(sp),d0
   11050:	|      move.l d1,-(sp)
   11052:	|      pea 7 <_start+0x7>
   11056:	|      move.l d0,-(sp)
   11058:	|      jsr 15452 <setVariable>
   1105e:	|      lea 12(sp),sp
   11062:	|  ,-- bra.s 1107c <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   11064:	'--|-> moveq #28,d0
   11066:	   |   add.l 8(sp),d0
   1106a:	   |   clr.l -(sp)
   1106c:	   |   pea 1 <_start+0x1>
   11070:	   |   move.l d0,-(sp)
   11072:	   |   jsr 15452 <setVariable>
   11078:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   1107c:	   '-> moveq #2,d0
}
   1107e:	       rts

00011080 <builtIn_rename>:

builtIn(rename)
{
   11080:	       lea -16(sp),sp
   11084:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11086:	       movea.l 28(sp),a0
   1108a:	       move.l 24(a0),d0
   1108e:	       move.l d0,-(sp)
   11090:	       jsr 15136 <getTextFromAnyVar>
   11096:	       addq.l #4,sp
   11098:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   1109c:	   ,-- bne.s 110a2 <builtIn_rename+0x22>
   1109e:	   |   moveq #1,d0
   110a0:	,--|-- bra.s 1111c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   110a2:	|  '-> moveq #24,d0
   110a4:	|      add.l 28(sp),d0
   110a8:	|      move.l d0,-(sp)
   110aa:	|      jsr 154e4 <trimStack>
   110b0:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   110b2:	|      movea.l 28(sp),a0
   110b6:	|      move.l 24(a0),d0
   110ba:	|      move.l d0,-(sp)
   110bc:	|      pea 7 <_start+0x7>
   110c0:	|      lea 12(sp),a0
   110c4:	|      move.l a0,-(sp)
   110c6:	|      jsr 14b60 <getValueType>
   110cc:	|      lea 12(sp),sp
   110d0:	|      tst.w d0
   110d2:	|  ,-- bne.s 110d8 <builtIn_rename+0x58>
   110d4:	|  |   moveq #1,d0
   110d6:	+--|-- bra.s 1111c <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   110d8:	|  '-> moveq #24,d0
   110da:	|      add.l 28(sp),d0
   110de:	|      move.l d0,-(sp)
   110e0:	|      jsr 154e4 <trimStack>
   110e6:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   110e8:	|      move.l 4(sp),d0
   110ec:	|      move.l d0,-(sp)
   110ee:	|      jsr d874 <findObjectType>
   110f4:	|      addq.l #4,sp
   110f6:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   110fa:	|      movea.l 12(sp),a0
   110fe:	|      move.l (a0),8(sp)
   11102:	|      move.l 1cdda <SysBase>,d0
   11108:	|      movea.l d0,a6
   1110a:	|      movea.l 8(sp),a1
   1110e:	|      jsr -690(a6)
	o->screenName = newText;
   11112:	|      movea.l 12(sp),a0
   11116:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   1111a:	|      moveq #2,d0
}
   1111c:	'----> movea.l (sp)+,a6
   1111e:	       lea 16(sp),sp
   11122:	       rts

00011124 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   11124:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11128:	          movea.l 20(sp),a0
   1112c:	          move.l 24(a0),d0
   11130:	          move.l d0,-(sp)
   11132:	          pea 7 <_start+0x7>
   11136:	          lea 8(sp),a0
   1113a:	          move.l a0,-(sp)
   1113c:	          jsr 14b60 <getValueType>
   11142:	          lea 12(sp),sp
   11146:	          tst.w d0
   11148:	      ,-- bne.s 11150 <builtIn_getObjectX+0x2c>
   1114a:	      |   moveq #1,d0
   1114c:	,-----|-- bra.w 111ec <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   11150:	|     '-> moveq #24,d0
   11152:	|         add.l 20(sp),d0
   11156:	|         move.l d0,-(sp)
   11158:	|         jsr 154e4 <trimStack>
   1115e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11160:	|         move.l (sp),d0
   11162:	|         move.l d0,-(sp)
   11164:	|         jsr a906 <findPerson>
   1116a:	|         addq.l #4,sp
   1116c:	|         move.l d0,8(sp)
	if (pers) {
   11170:	|     ,-- beq.s 1119e <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   11172:	|     |   movea.l 8(sp),a0
   11176:	|     |   move.l (a0),d0
   11178:	|     |   move.l d0,-(sp)
   1117a:	|     |   jsr 17a0a <__fixsfsi>
   11180:	|     |   addq.l #4,sp
   11182:	|     |   move.l d0,d1
   11184:	|     |   moveq #28,d0
   11186:	|     |   add.l 20(sp),d0
   1118a:	|     |   move.l d1,-(sp)
   1118c:	|     |   pea 1 <_start+0x1>
   11190:	|     |   move.l d0,-(sp)
   11192:	|     |   jsr 15452 <setVariable>
   11198:	|     |   lea 12(sp),sp
   1119c:	|  ,--|-- bra.s 111ea <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   1119e:	|  |  '-> move.l (sp),d0
   111a0:	|  |      move.l d0,-(sp)
   111a2:	|  |      jsr 15e22 <getRegionForObject>
   111a8:	|  |      addq.l #4,sp
   111aa:	|  |      move.l d0,4(sp)
		if (la) {
   111ae:	|  |  ,-- beq.s 111d2 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   111b0:	|  |  |   movea.l 4(sp),a0
   111b4:	|  |  |   move.l 16(a0),d1
   111b8:	|  |  |   moveq #28,d0
   111ba:	|  |  |   add.l 20(sp),d0
   111be:	|  |  |   move.l d1,-(sp)
   111c0:	|  |  |   pea 1 <_start+0x1>
   111c4:	|  |  |   move.l d0,-(sp)
   111c6:	|  |  |   jsr 15452 <setVariable>
   111cc:	|  |  |   lea 12(sp),sp
   111d0:	|  +--|-- bra.s 111ea <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   111d2:	|  |  '-> moveq #28,d0
   111d4:	|  |      add.l 20(sp),d0
   111d8:	|  |      clr.l -(sp)
   111da:	|  |      pea 1 <_start+0x1>
   111de:	|  |      move.l d0,-(sp)
   111e0:	|  |      jsr 15452 <setVariable>
   111e6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   111ea:	|  '----> moveq #2,d0
}
   111ec:	'-------> lea 12(sp),sp
   111f0:	          rts

000111f2 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   111f2:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111f6:	          movea.l 20(sp),a0
   111fa:	          move.l 24(a0),d0
   111fe:	          move.l d0,-(sp)
   11200:	          pea 7 <_start+0x7>
   11204:	          lea 8(sp),a0
   11208:	          move.l a0,-(sp)
   1120a:	          jsr 14b60 <getValueType>
   11210:	          lea 12(sp),sp
   11214:	          tst.w d0
   11216:	      ,-- bne.s 1121e <builtIn_getObjectY+0x2c>
   11218:	      |   moveq #1,d0
   1121a:	,-----|-- bra.w 112bc <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   1121e:	|     '-> moveq #24,d0
   11220:	|         add.l 20(sp),d0
   11224:	|         move.l d0,-(sp)
   11226:	|         jsr 154e4 <trimStack>
   1122c:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1122e:	|         move.l (sp),d0
   11230:	|         move.l d0,-(sp)
   11232:	|         jsr a906 <findPerson>
   11238:	|         addq.l #4,sp
   1123a:	|         move.l d0,8(sp)
	if (pers) {
   1123e:	|     ,-- beq.s 1126e <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   11240:	|     |   movea.l 8(sp),a0
   11244:	|     |   move.l 4(a0),d0
   11248:	|     |   move.l d0,-(sp)
   1124a:	|     |   jsr 17a0a <__fixsfsi>
   11250:	|     |   addq.l #4,sp
   11252:	|     |   move.l d0,d1
   11254:	|     |   moveq #28,d0
   11256:	|     |   add.l 20(sp),d0
   1125a:	|     |   move.l d1,-(sp)
   1125c:	|     |   pea 1 <_start+0x1>
   11260:	|     |   move.l d0,-(sp)
   11262:	|     |   jsr 15452 <setVariable>
   11268:	|     |   lea 12(sp),sp
   1126c:	|  ,--|-- bra.s 112ba <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   1126e:	|  |  '-> move.l (sp),d0
   11270:	|  |      move.l d0,-(sp)
   11272:	|  |      jsr 15e22 <getRegionForObject>
   11278:	|  |      addq.l #4,sp
   1127a:	|  |      move.l d0,4(sp)
		if (la) {
   1127e:	|  |  ,-- beq.s 112a2 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   11280:	|  |  |   movea.l 4(sp),a0
   11284:	|  |  |   move.l 20(a0),d1
   11288:	|  |  |   moveq #28,d0
   1128a:	|  |  |   add.l 20(sp),d0
   1128e:	|  |  |   move.l d1,-(sp)
   11290:	|  |  |   pea 1 <_start+0x1>
   11294:	|  |  |   move.l d0,-(sp)
   11296:	|  |  |   jsr 15452 <setVariable>
   1129c:	|  |  |   lea 12(sp),sp
   112a0:	|  +--|-- bra.s 112ba <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   112a2:	|  |  '-> moveq #28,d0
   112a4:	|  |      add.l 20(sp),d0
   112a8:	|  |      clr.l -(sp)
   112aa:	|  |      pea 1 <_start+0x1>
   112ae:	|  |      move.l d0,-(sp)
   112b0:	|  |      jsr 15452 <setVariable>
   112b6:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   112ba:	|  '----> moveq #2,d0
}
   112bc:	'-------> lea 12(sp),sp
   112c0:	          rts

000112c2 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   112c2:	       lea -32(sp),sp
   112c6:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112ca:	       movea.l 56(sp),a0
   112ce:	       move.l 24(a0),d0
   112d2:	       move.l d0,-(sp)
   112d4:	       pea 1 <_start+0x1>
   112d8:	       lea 28(sp),a0
   112dc:	       move.l a0,-(sp)
   112de:	       jsr 14b60 <getValueType>
   112e4:	       lea 12(sp),sp
   112e8:	       tst.w d0
   112ea:	   ,-- bne.s 112f2 <builtIn_addScreenRegion+0x30>
   112ec:	   |   moveq #1,d0
   112ee:	,--|-- bra.w 114cc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   112f2:	|  '-> moveq #24,d0
   112f4:	|      add.l 56(sp),d0
   112f8:	|      move.l d0,-(sp)
   112fa:	|      jsr 154e4 <trimStack>
   11300:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11302:	|      movea.l 56(sp),a0
   11306:	|      move.l 24(a0),d0
   1130a:	|      move.l d0,-(sp)
   1130c:	|      pea 1 <_start+0x1>
   11310:	|      moveq #48,d0
   11312:	|      add.l sp,d0
   11314:	|      move.l d0,-(sp)
   11316:	|      jsr 14b60 <getValueType>
   1131c:	|      lea 12(sp),sp
   11320:	|      tst.w d0
   11322:	|  ,-- bne.s 1132a <builtIn_addScreenRegion+0x68>
   11324:	|  |   moveq #1,d0
   11326:	+--|-- bra.w 114cc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1132a:	|  '-> moveq #24,d0
   1132c:	|      add.l 56(sp),d0
   11330:	|      move.l d0,-(sp)
   11332:	|      jsr 154e4 <trimStack>
   11338:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1133a:	|      movea.l 56(sp),a0
   1133e:	|      move.l 24(a0),d0
   11342:	|      move.l d0,-(sp)
   11344:	|      pea 1 <_start+0x1>
   11348:	|      moveq #52,d0
   1134a:	|      add.l sp,d0
   1134c:	|      move.l d0,-(sp)
   1134e:	|      jsr 14b60 <getValueType>
   11354:	|      lea 12(sp),sp
   11358:	|      tst.w d0
   1135a:	|  ,-- bne.s 11362 <builtIn_addScreenRegion+0xa0>
   1135c:	|  |   moveq #1,d0
   1135e:	+--|-- bra.w 114cc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11362:	|  '-> moveq #24,d0
   11364:	|      add.l 56(sp),d0
   11368:	|      move.l d0,-(sp)
   1136a:	|      jsr 154e4 <trimStack>
   11370:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11372:	|      movea.l 56(sp),a0
   11376:	|      move.l 24(a0),d0
   1137a:	|      move.l d0,-(sp)
   1137c:	|      pea 1 <_start+0x1>
   11380:	|      lea 32(sp),a0
   11384:	|      move.l a0,-(sp)
   11386:	|      jsr 14b60 <getValueType>
   1138c:	|      lea 12(sp),sp
   11390:	|      tst.w d0
   11392:	|  ,-- bne.s 1139a <builtIn_addScreenRegion+0xd8>
   11394:	|  |   moveq #1,d0
   11396:	+--|-- bra.w 114cc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1139a:	|  '-> moveq #24,d0
   1139c:	|      add.l 56(sp),d0
   113a0:	|      move.l d0,-(sp)
   113a2:	|      jsr 154e4 <trimStack>
   113a8:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113aa:	|      movea.l 56(sp),a0
   113ae:	|      move.l 24(a0),d0
   113b2:	|      move.l d0,-(sp)
   113b4:	|      pea 1 <_start+0x1>
   113b8:	|      lea 36(sp),a0
   113bc:	|      move.l a0,-(sp)
   113be:	|      jsr 14b60 <getValueType>
   113c4:	|      lea 12(sp),sp
   113c8:	|      tst.w d0
   113ca:	|  ,-- bne.s 113d2 <builtIn_addScreenRegion+0x110>
   113cc:	|  |   moveq #1,d0
   113ce:	+--|-- bra.w 114cc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   113d2:	|  '-> moveq #24,d0
   113d4:	|      add.l 56(sp),d0
   113d8:	|      move.l d0,-(sp)
   113da:	|      jsr 154e4 <trimStack>
   113e0:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113e2:	|      movea.l 56(sp),a0
   113e6:	|      move.l 24(a0),d0
   113ea:	|      move.l d0,-(sp)
   113ec:	|      pea 1 <_start+0x1>
   113f0:	|      lea 40(sp),a0
   113f4:	|      move.l a0,-(sp)
   113f6:	|      jsr 14b60 <getValueType>
   113fc:	|      lea 12(sp),sp
   11400:	|      tst.w d0
   11402:	|  ,-- bne.s 1140a <builtIn_addScreenRegion+0x148>
   11404:	|  |   moveq #1,d0
   11406:	+--|-- bra.w 114cc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1140a:	|  '-> moveq #24,d0
   1140c:	|      add.l 56(sp),d0
   11410:	|      move.l d0,-(sp)
   11412:	|      jsr 154e4 <trimStack>
   11418:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1141a:	|      movea.l 56(sp),a0
   1141e:	|      move.l 24(a0),d0
   11422:	|      move.l d0,-(sp)
   11424:	|      pea 1 <_start+0x1>
   11428:	|      lea 44(sp),a0
   1142c:	|      move.l a0,-(sp)
   1142e:	|      jsr 14b60 <getValueType>
   11434:	|      lea 12(sp),sp
   11438:	|      tst.w d0
   1143a:	|  ,-- bne.s 11442 <builtIn_addScreenRegion+0x180>
   1143c:	|  |   moveq #1,d0
   1143e:	+--|-- bra.w 114cc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11442:	|  '-> moveq #24,d0
   11444:	|      add.l 56(sp),d0
   11448:	|      move.l d0,-(sp)
   1144a:	|      jsr 154e4 <trimStack>
   11450:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11452:	|      movea.l 56(sp),a0
   11456:	|      move.l 24(a0),d0
   1145a:	|      move.l d0,-(sp)
   1145c:	|      pea 7 <_start+0x7>
   11460:	|      lea 24(sp),a0
   11464:	|      move.l a0,-(sp)
   11466:	|      jsr 14b60 <getValueType>
   1146c:	|      lea 12(sp),sp
   11470:	|      tst.w d0
   11472:	|  ,-- bne.s 11478 <builtIn_addScreenRegion+0x1b6>
   11474:	|  |   moveq #1,d0
   11476:	+--|-- bra.s 114cc <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11478:	|  '-> moveq #24,d0
   1147a:	|      add.l 56(sp),d0
   1147e:	|      move.l d0,-(sp)
   11480:	|      jsr 154e4 <trimStack>
   11486:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   11488:	|      move.l 16(sp),d5
   1148c:	|      move.l 20(sp),d4
   11490:	|      move.l 40(sp),d3
   11494:	|      move.l 44(sp),d2
   11498:	|      movea.l 24(sp),a1
   1149c:	|      movea.l 28(sp),a0
   114a0:	|      move.l 32(sp),d1
   114a4:	|      move.l 36(sp),d0
   114a8:	|      move.l d5,-(sp)
   114aa:	|      move.l d4,-(sp)
   114ac:	|      move.l d3,-(sp)
   114ae:	|      move.l d2,-(sp)
   114b0:	|      move.l a1,-(sp)
   114b2:	|      move.l a0,-(sp)
   114b4:	|      move.l d1,-(sp)
   114b6:	|      move.l d0,-(sp)
   114b8:	|      jsr 15cdc <addScreenRegion>
   114be:	|      lea 32(sp),sp
   114c2:	|      tst.w d0
   114c4:	|  ,-- beq.s 114ca <builtIn_addScreenRegion+0x208>
   114c6:	|  |   moveq #2,d0
   114c8:	+--|-- bra.s 114cc <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   114ca:	|  '-> moveq #1,d0

}
   114cc:	'----> movem.l (sp)+,d2-d5
   114d0:	       lea 32(sp),sp
   114d4:	       rts

000114d6 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   114d6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114d8:	       movea.l 12(sp),a0
   114dc:	       move.l 24(a0),d0
   114e0:	       move.l d0,-(sp)
   114e2:	       pea 7 <_start+0x7>
   114e6:	       move.l sp,d0
   114e8:	       addq.l #8,d0
   114ea:	       move.l d0,-(sp)
   114ec:	       jsr 14b60 <getValueType>
   114f2:	       lea 12(sp),sp
   114f6:	       tst.w d0
   114f8:	   ,-- bne.s 114fe <builtIn_removeScreenRegion+0x28>
   114fa:	   |   moveq #1,d0
   114fc:	,--|-- bra.s 1151c <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   114fe:	|  '-> moveq #24,d0
   11500:	|      add.l 12(sp),d0
   11504:	|      move.l d0,-(sp)
   11506:	|      jsr 154e4 <trimStack>
   1150c:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   1150e:	|      move.l (sp),d0
   11510:	|      move.l d0,-(sp)
   11512:	|      jsr 15fca <removeScreenRegion>
   11518:	|      addq.l #4,sp
	return BR_CONTINUE;
   1151a:	|      moveq #2,d0
}
   1151c:	'----> addq.l #4,sp
   1151e:	       rts

00011520 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   11520:	jsr 1614e <showBoxes>
	return BR_CONTINUE;
   11526:	moveq #2,d0
}
   11528:	rts

0001152a <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   1152a:	jsr 15e50 <killAllRegions>
	return BR_CONTINUE;
   11530:	moveq #2,d0
}
   11532:	rts

00011534 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   11534:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11538:	       movea.l 24(sp),a0
   1153c:	       move.l 24(a0),d0
   11540:	       move.l d0,-(sp)
   11542:	       jsr 1480c <getCostumeFromVar>
   11548:	       addq.l #4,sp
   1154a:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   1154e:	   ,-- bne.s 11556 <builtIn_addCharacter+0x22>
   11550:	   |   moveq #1,d0
   11552:	,--|-- bra.w 11632 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11556:	|  '-> moveq #24,d0
   11558:	|      add.l 24(sp),d0
   1155c:	|      move.l d0,-(sp)
   1155e:	|      jsr 154e4 <trimStack>
   11564:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11566:	|      movea.l 24(sp),a0
   1156a:	|      move.l 24(a0),d0
   1156e:	|      move.l d0,-(sp)
   11570:	|      pea 1 <_start+0x1>
   11574:	|      lea 12(sp),a0
   11578:	|      move.l a0,-(sp)
   1157a:	|      jsr 14b60 <getValueType>
   11580:	|      lea 12(sp),sp
   11584:	|      tst.w d0
   11586:	|  ,-- bne.s 1158e <builtIn_addCharacter+0x5a>
   11588:	|  |   moveq #1,d0
   1158a:	+--|-- bra.w 11632 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1158e:	|  '-> moveq #24,d0
   11590:	|      add.l 24(sp),d0
   11594:	|      move.l d0,-(sp)
   11596:	|      jsr 154e4 <trimStack>
   1159c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1159e:	|      movea.l 24(sp),a0
   115a2:	|      move.l 24(a0),d0
   115a6:	|      move.l d0,-(sp)
   115a8:	|      pea 1 <_start+0x1>
   115ac:	|      moveq #16,d0
   115ae:	|      add.l sp,d0
   115b0:	|      move.l d0,-(sp)
   115b2:	|      jsr 14b60 <getValueType>
   115b8:	|      lea 12(sp),sp
   115bc:	|      tst.w d0
   115be:	|  ,-- bne.s 115c4 <builtIn_addCharacter+0x90>
   115c0:	|  |   moveq #1,d0
   115c2:	+--|-- bra.s 11632 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   115c4:	|  '-> moveq #24,d0
   115c6:	|      add.l 24(sp),d0
   115ca:	|      move.l d0,-(sp)
   115cc:	|      jsr 154e4 <trimStack>
   115d2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115d4:	|      movea.l 24(sp),a0
   115d8:	|      move.l 24(a0),d0
   115dc:	|      move.l d0,-(sp)
   115de:	|      pea 7 <_start+0x7>
   115e2:	|      lea 8(sp),a0
   115e6:	|      move.l a0,-(sp)
   115e8:	|      jsr 14b60 <getValueType>
   115ee:	|      lea 12(sp),sp
   115f2:	|      tst.w d0
   115f4:	|  ,-- bne.s 115fa <builtIn_addCharacter+0xc6>
   115f6:	|  |   moveq #1,d0
   115f8:	+--|-- bra.s 11632 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   115fa:	|  '-> moveq #24,d0
   115fc:	|      add.l 24(sp),d0
   11600:	|      move.l d0,-(sp)
   11602:	|      jsr 154e4 <trimStack>
   11608:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   1160a:	|      movea.l (sp),a0
   1160c:	|      move.l 4(sp),d1
   11610:	|      move.l 8(sp),d0
   11614:	|      move.l 12(sp),-(sp)
   11618:	|      move.l a0,-(sp)
   1161a:	|      move.l d1,-(sp)
   1161c:	|      move.l d0,-(sp)
   1161e:	|      jsr 9500 <addPerson>
   11624:	|      lea 16(sp),sp
   11628:	|      tst.w d0
   1162a:	|  ,-- beq.s 11630 <builtIn_addCharacter+0xfc>
   1162c:	|  |   moveq #2,d0
   1162e:	+--|-- bra.s 11632 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11630:	|  '-> moveq #1,d0
}
   11632:	'----> lea 16(sp),sp
   11636:	       rts

00011638 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11638:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1163a:	       movea.l 12(sp),a0
   1163e:	       move.l 24(a0),d0
   11642:	       move.l d0,-(sp)
   11644:	       pea 7 <_start+0x7>
   11648:	       move.l sp,d0
   1164a:	       addq.l #8,d0
   1164c:	       move.l d0,-(sp)
   1164e:	       jsr 14b60 <getValueType>
   11654:	       lea 12(sp),sp
   11658:	       tst.w d0
   1165a:	   ,-- bne.s 11660 <builtIn_hideCharacter+0x28>
   1165c:	   |   moveq #1,d0
   1165e:	,--|-- bra.s 11680 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11660:	|  '-> moveq #24,d0
   11662:	|      add.l 12(sp),d0
   11666:	|      move.l d0,-(sp)
   11668:	|      jsr 154e4 <trimStack>
   1166e:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11670:	|      move.l (sp),d0
   11672:	|      move.l d0,-(sp)
   11674:	|      clr.l -(sp)
   11676:	|      jsr bf9c <setShown>
   1167c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1167e:	|      moveq #2,d0
}
   11680:	'----> addq.l #4,sp
   11682:	       rts

00011684 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   11684:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11686:	       movea.l 12(sp),a0
   1168a:	       move.l 24(a0),d0
   1168e:	       move.l d0,-(sp)
   11690:	       pea 7 <_start+0x7>
   11694:	       move.l sp,d0
   11696:	       addq.l #8,d0
   11698:	       move.l d0,-(sp)
   1169a:	       jsr 14b60 <getValueType>
   116a0:	       lea 12(sp),sp
   116a4:	       tst.w d0
   116a6:	   ,-- bne.s 116ac <builtIn_showCharacter+0x28>
   116a8:	   |   moveq #1,d0
   116aa:	,--|-- bra.s 116ce <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   116ac:	|  '-> moveq #24,d0
   116ae:	|      add.l 12(sp),d0
   116b2:	|      move.l d0,-(sp)
   116b4:	|      jsr 154e4 <trimStack>
   116ba:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   116bc:	|      move.l (sp),d0
   116be:	|      move.l d0,-(sp)
   116c0:	|      pea 1 <_start+0x1>
   116c4:	|      jsr bf9c <setShown>
   116ca:	|      addq.l #8,sp
	return BR_CONTINUE;
   116cc:	|      moveq #2,d0
}
   116ce:	'----> addq.l #4,sp
   116d0:	       rts

000116d2 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   116d2:	jsr 6df8 <killSpeechTimers>
	killMostPeople ();
   116d8:	jsr ad9c <killMostPeople>
	return BR_CONTINUE;
   116de:	moveq #2,d0
}
   116e0:	rts

000116e2 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   116e2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116e4:	       movea.l 16(sp),a0
   116e8:	       move.l 24(a0),d0
   116ec:	       move.l d0,-(sp)
   116ee:	       pea 1 <_start+0x1>
   116f2:	       move.l sp,d0
   116f4:	       addq.l #8,d0
   116f6:	       move.l d0,-(sp)
   116f8:	       jsr 14b60 <getValueType>
   116fe:	       lea 12(sp),sp
   11702:	       tst.w d0
   11704:	   ,-- bne.s 1170a <builtIn_setCharacterDrawMode+0x28>
   11706:	   |   moveq #1,d0
   11708:	,--|-- bra.s 11764 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1170a:	|  '-> moveq #24,d0
   1170c:	|      add.l 16(sp),d0
   11710:	|      move.l d0,-(sp)
   11712:	|      jsr 154e4 <trimStack>
   11718:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1171a:	|      movea.l 16(sp),a0
   1171e:	|      move.l 24(a0),d0
   11722:	|      move.l d0,-(sp)
   11724:	|      pea 7 <_start+0x7>
   11728:	|      moveq #12,d0
   1172a:	|      add.l sp,d0
   1172c:	|      move.l d0,-(sp)
   1172e:	|      jsr 14b60 <getValueType>
   11734:	|      lea 12(sp),sp
   11738:	|      tst.w d0
   1173a:	|  ,-- bne.s 11740 <builtIn_setCharacterDrawMode+0x5e>
   1173c:	|  |   moveq #1,d0
   1173e:	+--|-- bra.s 11764 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11740:	|  '-> moveq #24,d0
   11742:	|      add.l 16(sp),d0
   11746:	|      move.l d0,-(sp)
   11748:	|      jsr 154e4 <trimStack>
   1174e:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11750:	|      move.l 4(sp),d1
   11754:	|      move.l (sp),d0
   11756:	|      move.l d1,-(sp)
   11758:	|      move.l d0,-(sp)
   1175a:	|      jsr b8da <setDrawMode>
   11760:	|      addq.l #8,sp
	return BR_CONTINUE;
   11762:	|      moveq #2,d0
}
   11764:	'----> addq.l #8,sp
   11766:	       rts

00011768 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   11768:	pea 19f6e <PutChar+0x1e8c>
   1176e:	jsr 17640 <KPrintF>
   11774:	addq.l #4,sp
	return BR_CONTINUE;
   11776:	moveq #2,d0
}
   11778:	rts

0001177a <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   1177a:	pea 19fa1 <PutChar+0x1ebf>
   11780:	jsr 17640 <KPrintF>
   11786:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   11788:	moveq #2,d0
}
   1178a:	rts

0001178c <builtIn_setScale>:

builtIn(setScale)
{
   1178c:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1178e:	       movea.l 16(sp),a0
   11792:	       move.l 24(a0),d0
   11796:	       move.l d0,-(sp)
   11798:	       pea 1 <_start+0x1>
   1179c:	       move.l sp,d0
   1179e:	       addq.l #8,d0
   117a0:	       move.l d0,-(sp)
   117a2:	       jsr 14b60 <getValueType>
   117a8:	       lea 12(sp),sp
   117ac:	       tst.w d0
   117ae:	   ,-- bne.s 117b4 <builtIn_setScale+0x28>
   117b0:	   |   moveq #1,d0
   117b2:	,--|-- bra.s 11816 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   117b4:	|  '-> moveq #24,d0
   117b6:	|      add.l 16(sp),d0
   117ba:	|      move.l d0,-(sp)
   117bc:	|      jsr 154e4 <trimStack>
   117c2:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117c4:	|      movea.l 16(sp),a0
   117c8:	|      move.l 24(a0),d0
   117cc:	|      move.l d0,-(sp)
   117ce:	|      pea 1 <_start+0x1>
   117d2:	|      moveq #12,d0
   117d4:	|      add.l sp,d0
   117d6:	|      move.l d0,-(sp)
   117d8:	|      jsr 14b60 <getValueType>
   117de:	|      lea 12(sp),sp
   117e2:	|      tst.w d0
   117e4:	|  ,-- bne.s 117ea <builtIn_setScale+0x5e>
   117e6:	|  |   moveq #1,d0
   117e8:	+--|-- bra.s 11816 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   117ea:	|  '-> moveq #24,d0
   117ec:	|      add.l 16(sp),d0
   117f0:	|      move.l d0,-(sp)
   117f2:	|      jsr 154e4 <trimStack>
   117f8:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   117fa:	|      move.l (sp),d0
   117fc:	|      move.l d0,d0
   117fe:	|      movea.w d0,a1
   11800:	|      move.l 4(sp),d0
   11804:	|      move.l d0,d0
   11806:	|      movea.w d0,a0
   11808:	|      move.l a1,-(sp)
   1180a:	|      move.l a0,-(sp)
   1180c:	|      jsr bf74 <setScale>
   11812:	|      addq.l #8,sp
	return BR_CONTINUE;
   11814:	|      moveq #2,d0
}
   11816:	'----> addq.l #8,sp
   11818:	       rts

0001181a <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   1181a:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1181c:	       movea.l 12(sp),a0
   11820:	       move.l 24(a0),d0
   11824:	       move.l d0,-(sp)
   11826:	       pea 7 <_start+0x7>
   1182a:	       move.l sp,d0
   1182c:	       addq.l #8,d0
   1182e:	       move.l d0,-(sp)
   11830:	       jsr 14b60 <getValueType>
   11836:	       lea 12(sp),sp
   1183a:	       tst.w d0
   1183c:	   ,-- bne.s 11842 <builtIn_stopCharacter+0x28>
   1183e:	   |   moveq #1,d0
   11840:	,--|-- bra.s 1187a <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11842:	|  '-> moveq #24,d0
   11844:	|      add.l 12(sp),d0
   11848:	|      move.l d0,-(sp)
   1184a:	|      jsr 154e4 <trimStack>
   11850:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11852:	|      move.l (sp),d0
   11854:	|      move.l d0,-(sp)
   11856:	|      jsr c0a8 <stopPerson>
   1185c:	|      addq.l #4,sp
   1185e:	|      movea.w d0,a0
   11860:	|      moveq #28,d0
   11862:	|      add.l 12(sp),d0
   11866:	|      move.l a0,-(sp)
   11868:	|      pea 1 <_start+0x1>
   1186c:	|      move.l d0,-(sp)
   1186e:	|      jsr 15452 <setVariable>
   11874:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11878:	|      moveq #2,d0
}
   1187a:	'----> addq.l #4,sp
   1187c:	       rts

0001187e <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   1187e:	pea 19fdb <PutChar+0x1ef9>
   11884:	jsr 17640 <KPrintF>
   1188a:	addq.l #4,sp
	return BR_CONTINUE;
   1188c:	moveq #2,d0
}
   1188e:	rts

00011890 <builtIn_animate>:

builtIn(animate)
{
   11890:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11892:	       movea.l 16(sp),a0
   11896:	       move.l 24(a0),d0
   1189a:	       move.l d0,-(sp)
   1189c:	       jsr 15038 <getAnimationFromVar>
   118a2:	       addq.l #4,sp
   118a4:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   118a8:	   ,-- bne.s 118ae <builtIn_animate+0x1e>
   118aa:	   |   moveq #1,d0
   118ac:	,--|-- bra.s 1192c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   118ae:	|  '-> moveq #24,d0
   118b0:	|      add.l 16(sp),d0
   118b4:	|      move.l d0,-(sp)
   118b6:	|      jsr 154e4 <trimStack>
   118bc:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118be:	|      movea.l 16(sp),a0
   118c2:	|      move.l 24(a0),d0
   118c6:	|      move.l d0,-(sp)
   118c8:	|      pea 7 <_start+0x7>
   118cc:	|      move.l sp,d0
   118ce:	|      addq.l #8,d0
   118d0:	|      move.l d0,-(sp)
   118d2:	|      jsr 14b60 <getValueType>
   118d8:	|      lea 12(sp),sp
   118dc:	|      tst.w d0
   118de:	|  ,-- bne.s 118e4 <builtIn_animate+0x54>
   118e0:	|  |   moveq #1,d0
   118e2:	+--|-- bra.s 1192c <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   118e4:	|  '-> moveq #24,d0
   118e6:	|      add.l 16(sp),d0
   118ea:	|      move.l d0,-(sp)
   118ec:	|      jsr 154e4 <trimStack>
   118f2:	|      addq.l #4,sp
	animatePerson (obj, pp);
   118f4:	|      move.l (sp),d0
   118f6:	|      move.l 4(sp),-(sp)
   118fa:	|      move.l d0,-(sp)
   118fc:	|      jsr 9776 <animatePerson>
   11902:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11904:	|      move.l 4(sp),-(sp)
   11908:	|      jsr c0fc <timeForAnim>
   1190e:	|      addq.l #4,sp
   11910:	|      move.l d0,d1
   11912:	|      moveq #28,d0
   11914:	|      add.l 16(sp),d0
   11918:	|      move.l d1,-(sp)
   1191a:	|      pea 1 <_start+0x1>
   1191e:	|      move.l d0,-(sp)
   11920:	|      jsr 15452 <setVariable>
   11926:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1192a:	|      moveq #2,d0
}
   1192c:	'----> addq.l #8,sp
   1192e:	       rts

00011930 <builtIn_setCostume>:

builtIn(setCostume)
{
   11930:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11932:	       movea.l 16(sp),a0
   11936:	       move.l 24(a0),d0
   1193a:	       move.l d0,-(sp)
   1193c:	       jsr 1480c <getCostumeFromVar>
   11942:	       addq.l #4,sp
   11944:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11948:	   ,-- bne.s 1194e <builtIn_setCostume+0x1e>
   1194a:	   |   moveq #1,d0
   1194c:	,--|-- bra.s 119a6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1194e:	|  '-> moveq #24,d0
   11950:	|      add.l 16(sp),d0
   11954:	|      move.l d0,-(sp)
   11956:	|      jsr 154e4 <trimStack>
   1195c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1195e:	|      movea.l 16(sp),a0
   11962:	|      move.l 24(a0),d0
   11966:	|      move.l d0,-(sp)
   11968:	|      pea 7 <_start+0x7>
   1196c:	|      move.l sp,d0
   1196e:	|      addq.l #8,d0
   11970:	|      move.l d0,-(sp)
   11972:	|      jsr 14b60 <getValueType>
   11978:	|      lea 12(sp),sp
   1197c:	|      tst.w d0
   1197e:	|  ,-- bne.s 11984 <builtIn_setCostume+0x54>
   11980:	|  |   moveq #1,d0
   11982:	+--|-- bra.s 119a6 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11984:	|  '-> moveq #24,d0
   11986:	|      add.l 16(sp),d0
   1198a:	|      move.l d0,-(sp)
   1198c:	|      jsr 154e4 <trimStack>
   11992:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11994:	|      move.l (sp),d0
   11996:	|      move.l 4(sp),-(sp)
   1199a:	|      move.l d0,-(sp)
   1199c:	|      jsr 97c0 <animatePersonUsingPersona>
   119a2:	|      addq.l #8,sp
	return BR_CONTINUE;
   119a4:	|      moveq #2,d0
}
   119a6:	'----> addq.l #8,sp
   119a8:	       rts

000119aa <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   119aa:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119ac:	       movea.l 16(sp),a0
   119b0:	       move.l 24(a0),d0
   119b4:	       move.l d0,-(sp)
   119b6:	       pea 1 <_start+0x1>
   119ba:	       move.l sp,d0
   119bc:	       addq.l #8,d0
   119be:	       move.l d0,-(sp)
   119c0:	       jsr 14b60 <getValueType>
   119c6:	       lea 12(sp),sp
   119ca:	       tst.w d0
   119cc:	   ,-- bne.s 119d2 <builtIn_floatCharacter+0x28>
   119ce:	   |   moveq #1,d0
   119d0:	,--|-- bra.s 11a46 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   119d2:	|  '-> moveq #24,d0
   119d4:	|      add.l 16(sp),d0
   119d8:	|      move.l d0,-(sp)
   119da:	|      jsr 154e4 <trimStack>
   119e0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119e2:	|      movea.l 16(sp),a0
   119e6:	|      move.l 24(a0),d0
   119ea:	|      move.l d0,-(sp)
   119ec:	|      pea 7 <_start+0x7>
   119f0:	|      moveq #12,d0
   119f2:	|      add.l sp,d0
   119f4:	|      move.l d0,-(sp)
   119f6:	|      jsr 14b60 <getValueType>
   119fc:	|      lea 12(sp),sp
   11a00:	|      tst.w d0
   11a02:	|  ,-- bne.s 11a08 <builtIn_floatCharacter+0x5e>
   11a04:	|  |   moveq #1,d0
   11a06:	+--|-- bra.s 11a46 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11a08:	|  '-> moveq #24,d0
   11a0a:	|      add.l 16(sp),d0
   11a0e:	|      move.l d0,-(sp)
   11a10:	|      jsr 154e4 <trimStack>
   11a16:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11a18:	|      move.l 4(sp),d1
   11a1c:	|      move.l (sp),d0
   11a1e:	|      move.l d1,-(sp)
   11a20:	|      move.l d0,-(sp)
   11a22:	|      jsr a950 <floatCharacter>
   11a28:	|      addq.l #8,sp
   11a2a:	|      movea.w d0,a0
   11a2c:	|      moveq #28,d0
   11a2e:	|      add.l 16(sp),d0
   11a32:	|      move.l a0,-(sp)
   11a34:	|      pea 1 <_start+0x1>
   11a38:	|      move.l d0,-(sp)
   11a3a:	|      jsr 15452 <setVariable>
   11a40:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11a44:	|      moveq #2,d0
}
   11a46:	'----> addq.l #8,sp
   11a48:	       rts

00011a4a <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11a4a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a4c:	       movea.l 16(sp),a0
   11a50:	       move.l 24(a0),d0
   11a54:	       move.l d0,-(sp)
   11a56:	       pea 1 <_start+0x1>
   11a5a:	       move.l sp,d0
   11a5c:	       addq.l #8,d0
   11a5e:	       move.l d0,-(sp)
   11a60:	       jsr 14b60 <getValueType>
   11a66:	       lea 12(sp),sp
   11a6a:	       tst.w d0
   11a6c:	   ,-- bne.s 11a72 <builtIn_setCharacterWalkSpeed+0x28>
   11a6e:	   |   moveq #1,d0
   11a70:	,--|-- bra.s 11ae6 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11a72:	|  '-> moveq #24,d0
   11a74:	|      add.l 16(sp),d0
   11a78:	|      move.l d0,-(sp)
   11a7a:	|      jsr 154e4 <trimStack>
   11a80:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a82:	|      movea.l 16(sp),a0
   11a86:	|      move.l 24(a0),d0
   11a8a:	|      move.l d0,-(sp)
   11a8c:	|      pea 7 <_start+0x7>
   11a90:	|      moveq #12,d0
   11a92:	|      add.l sp,d0
   11a94:	|      move.l d0,-(sp)
   11a96:	|      jsr 14b60 <getValueType>
   11a9c:	|      lea 12(sp),sp
   11aa0:	|      tst.w d0
   11aa2:	|  ,-- bne.s 11aa8 <builtIn_setCharacterWalkSpeed+0x5e>
   11aa4:	|  |   moveq #1,d0
   11aa6:	+--|-- bra.s 11ae6 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11aa8:	|  '-> moveq #24,d0
   11aaa:	|      add.l 16(sp),d0
   11aae:	|      move.l d0,-(sp)
   11ab0:	|      jsr 154e4 <trimStack>
   11ab6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11ab8:	|      move.l 4(sp),d1
   11abc:	|      move.l (sp),d0
   11abe:	|      move.l d1,-(sp)
   11ac0:	|      move.l d0,-(sp)
   11ac2:	|      jsr bf10 <setCharacterWalkSpeed>
   11ac8:	|      addq.l #8,sp
   11aca:	|      movea.w d0,a0
   11acc:	|      moveq #28,d0
   11ace:	|      add.l 16(sp),d0
   11ad2:	|      move.l a0,-(sp)
   11ad4:	|      pea 1 <_start+0x1>
   11ad8:	|      move.l d0,-(sp)
   11ada:	|      jsr 15452 <setVariable>
   11ae0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11ae4:	|      moveq #2,d0
}
   11ae6:	'----> addq.l #8,sp
   11ae8:	       rts

00011aea <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11aea:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11aec:	       movea.l 16(sp),a0
   11af0:	       move.l 24(a0),d0
   11af4:	       move.l d0,-(sp)
   11af6:	       pea 1 <_start+0x1>
   11afa:	       move.l sp,d0
   11afc:	       addq.l #8,d0
   11afe:	       move.l d0,-(sp)
   11b00:	       jsr 14b60 <getValueType>
   11b06:	       lea 12(sp),sp
   11b0a:	       tst.w d0
   11b0c:	   ,-- bne.s 11b12 <builtIn_turnCharacter+0x28>
   11b0e:	   |   moveq #1,d0
   11b10:	,--|-- bra.s 11b86 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11b12:	|  '-> moveq #24,d0
   11b14:	|      add.l 16(sp),d0
   11b18:	|      move.l d0,-(sp)
   11b1a:	|      jsr 154e4 <trimStack>
   11b20:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b22:	|      movea.l 16(sp),a0
   11b26:	|      move.l 24(a0),d0
   11b2a:	|      move.l d0,-(sp)
   11b2c:	|      pea 7 <_start+0x7>
   11b30:	|      moveq #12,d0
   11b32:	|      add.l sp,d0
   11b34:	|      move.l d0,-(sp)
   11b36:	|      jsr 14b60 <getValueType>
   11b3c:	|      lea 12(sp),sp
   11b40:	|      tst.w d0
   11b42:	|  ,-- bne.s 11b48 <builtIn_turnCharacter+0x5e>
   11b44:	|  |   moveq #1,d0
   11b46:	+--|-- bra.s 11b86 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11b48:	|  '-> moveq #24,d0
   11b4a:	|      add.l 16(sp),d0
   11b4e:	|      move.l d0,-(sp)
   11b50:	|      jsr 154e4 <trimStack>
   11b56:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11b58:	|      move.l (sp),d1
   11b5a:	|      move.l 4(sp),d0
   11b5e:	|      move.l d1,-(sp)
   11b60:	|      move.l d0,-(sp)
   11b62:	|      jsr c1b4 <turnPersonToFace>
   11b68:	|      addq.l #8,sp
   11b6a:	|      movea.w d0,a0
   11b6c:	|      moveq #28,d0
   11b6e:	|      add.l 16(sp),d0
   11b72:	|      move.l a0,-(sp)
   11b74:	|      pea 1 <_start+0x1>
   11b78:	|      move.l d0,-(sp)
   11b7a:	|      jsr 15452 <setVariable>
   11b80:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11b84:	|      moveq #2,d0
}
   11b86:	'----> addq.l #8,sp
   11b88:	       rts

00011b8a <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11b8a:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b8c:	       movea.l 16(sp),a0
   11b90:	       move.l 24(a0),d0
   11b94:	       move.l d0,-(sp)
   11b96:	       pea 1 <_start+0x1>
   11b9a:	       move.l sp,d0
   11b9c:	       addq.l #8,d0
   11b9e:	       move.l d0,-(sp)
   11ba0:	       jsr 14b60 <getValueType>
   11ba6:	       lea 12(sp),sp
   11baa:	       tst.w d0
   11bac:	   ,-- bne.s 11bb2 <builtIn_setCharacterExtra+0x28>
   11bae:	   |   moveq #1,d0
   11bb0:	,--|-- bra.s 11c26 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11bb2:	|  '-> moveq #24,d0
   11bb4:	|      add.l 16(sp),d0
   11bb8:	|      move.l d0,-(sp)
   11bba:	|      jsr 154e4 <trimStack>
   11bc0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11bc2:	|      movea.l 16(sp),a0
   11bc6:	|      move.l 24(a0),d0
   11bca:	|      move.l d0,-(sp)
   11bcc:	|      pea 7 <_start+0x7>
   11bd0:	|      moveq #12,d0
   11bd2:	|      add.l sp,d0
   11bd4:	|      move.l d0,-(sp)
   11bd6:	|      jsr 14b60 <getValueType>
   11bdc:	|      lea 12(sp),sp
   11be0:	|      tst.w d0
   11be2:	|  ,-- bne.s 11be8 <builtIn_setCharacterExtra+0x5e>
   11be4:	|  |   moveq #1,d0
   11be6:	+--|-- bra.s 11c26 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11be8:	|  '-> moveq #24,d0
   11bea:	|      add.l 16(sp),d0
   11bee:	|      move.l d0,-(sp)
   11bf0:	|      jsr 154e4 <trimStack>
   11bf6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11bf8:	|      move.l (sp),d1
   11bfa:	|      move.l 4(sp),d0
   11bfe:	|      move.l d1,-(sp)
   11c00:	|      move.l d0,-(sp)
   11c02:	|      jsr bf3e <setPersonExtra>
   11c08:	|      addq.l #8,sp
   11c0a:	|      movea.w d0,a0
   11c0c:	|      moveq #28,d0
   11c0e:	|      add.l 16(sp),d0
   11c12:	|      move.l a0,-(sp)
   11c14:	|      pea 1 <_start+0x1>
   11c18:	|      move.l d0,-(sp)
   11c1a:	|      jsr 15452 <setVariable>
   11c20:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11c24:	|      moveq #2,d0
}
   11c26:	'----> addq.l #8,sp
   11c28:	       rts

00011c2a <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11c2a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c2c:	       movea.l 12(sp),a0
   11c30:	       move.l 24(a0),d0
   11c34:	       move.l d0,-(sp)
   11c36:	       pea 7 <_start+0x7>
   11c3a:	       move.l sp,d0
   11c3c:	       addq.l #8,d0
   11c3e:	       move.l d0,-(sp)
   11c40:	       jsr 14b60 <getValueType>
   11c46:	       lea 12(sp),sp
   11c4a:	       tst.w d0
   11c4c:	   ,-- bne.s 11c52 <builtIn_removeCharacter+0x28>
   11c4e:	   |   moveq #1,d0
   11c50:	,--|-- bra.s 11c70 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11c52:	|  '-> moveq #24,d0
   11c54:	|      add.l 12(sp),d0
   11c58:	|      move.l d0,-(sp)
   11c5a:	|      jsr 154e4 <trimStack>
   11c60:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11c62:	|      move.l (sp),d0
   11c64:	|      move.l d0,-(sp)
   11c66:	|      jsr b13e <removeOneCharacter>
   11c6c:	|      addq.l #4,sp
	return BR_CONTINUE;
   11c6e:	|      moveq #2,d0
}
   11c70:	'----> addq.l #4,sp
   11c72:	       rts

00011c74 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11c74:	                lea -28(sp),sp
   11c78:	                move.l d2,-(sp)
   11c7a:	                move.l 44(sp),d1
   11c7e:	                move.l 48(sp),d0
   11c82:	                move.w d1,d1
   11c84:	                move.w d1,6(sp)
   11c88:	                move.w d0,d0
   11c8a:	                move.w d0,4(sp)
	switch (numParams) {
   11c8e:	                moveq #2,d0
   11c90:	                cmp.l 36(sp),d0
   11c94:	      ,-------- beq.w 11dd6 <moveChr+0x162>
   11c98:	      |         moveq #3,d0
   11c9a:	      |         cmp.l 36(sp),d0
   11c9e:	,-----|-------- bne.w 11f0a <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ca2:	|     |         movea.l 40(sp),a0
   11ca6:	|     |         move.l 24(a0),d0
   11caa:	|     |         move.l d0,-(sp)
   11cac:	|     |         pea 1 <_start+0x1>
   11cb0:	|     |         lea 20(sp),a0
   11cb4:	|     |         move.l a0,-(sp)
   11cb6:	|     |         jsr 14b60 <getValueType>
   11cbc:	|     |         lea 12(sp),sp
   11cc0:	|     |         tst.w d0
   11cc2:	|     |     ,-- bne.s 11cca <moveChr+0x56>
   11cc4:	|     |     |   moveq #1,d0
   11cc6:	|  ,--|-----|-- bra.w 11f1a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11cca:	|  |  |     '-> moveq #24,d0
   11ccc:	|  |  |         add.l 40(sp),d0
   11cd0:	|  |  |         move.l d0,-(sp)
   11cd2:	|  |  |         jsr 154e4 <trimStack>
   11cd8:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cda:	|  |  |         movea.l 40(sp),a0
   11cde:	|  |  |         move.l 24(a0),d0
   11ce2:	|  |  |         move.l d0,-(sp)
   11ce4:	|  |  |         pea 1 <_start+0x1>
   11ce8:	|  |  |         lea 24(sp),a0
   11cec:	|  |  |         move.l a0,-(sp)
   11cee:	|  |  |         jsr 14b60 <getValueType>
   11cf4:	|  |  |         lea 12(sp),sp
   11cf8:	|  |  |         tst.w d0
   11cfa:	|  |  |     ,-- bne.s 11d02 <moveChr+0x8e>
   11cfc:	|  |  |     |   moveq #1,d0
   11cfe:	|  +--|-----|-- bra.w 11f1a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11d02:	|  |  |     '-> moveq #24,d0
   11d04:	|  |  |         add.l 40(sp),d0
   11d08:	|  |  |         move.l d0,-(sp)
   11d0a:	|  |  |         jsr 154e4 <trimStack>
   11d10:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d12:	|  |  |         movea.l 40(sp),a0
   11d16:	|  |  |         move.l 24(a0),d0
   11d1a:	|  |  |         move.l d0,-(sp)
   11d1c:	|  |  |         pea 7 <_start+0x7>
   11d20:	|  |  |         lea 16(sp),a0
   11d24:	|  |  |         move.l a0,-(sp)
   11d26:	|  |  |         jsr 14b60 <getValueType>
   11d2c:	|  |  |         lea 12(sp),sp
   11d30:	|  |  |         tst.w d0
   11d32:	|  |  |     ,-- bne.s 11d3a <moveChr+0xc6>
   11d34:	|  |  |     |   moveq #1,d0
   11d36:	|  +--|-----|-- bra.w 11f1a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11d3a:	|  |  |     '-> moveq #24,d0
   11d3c:	|  |  |         add.l 40(sp),d0
   11d40:	|  |  |         move.l d0,-(sp)
   11d42:	|  |  |         jsr 154e4 <trimStack>
   11d48:	|  |  |         addq.l #4,sp

			if (force) {
   11d4a:	|  |  |         tst.w 6(sp)
   11d4e:	|  |  |     ,-- beq.s 11d7e <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11d50:	|  |  |     |   movea.l 8(sp),a0
   11d54:	|  |  |     |   move.l 12(sp),d1
   11d58:	|  |  |     |   move.l 16(sp),d0
   11d5c:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb405c>
   11d60:	|  |  |     |   move.l 44(sp),-(sp)
   11d64:	|  |  |     |   move.l a0,-(sp)
   11d66:	|  |  |     |   move.l d1,-(sp)
   11d68:	|  |  |     |   move.l d0,-(sp)
   11d6a:	|  |  |     |   jsr a974 <forceWalkingPerson>
   11d70:	|  |  |     |   lea 20(sp),sp
   11d74:	|  |  |     |   tst.w d0
   11d76:	|  |  |  ,--|-- beq.s 11dd0 <moveChr+0x15c>
   11d78:	|  |  |  |  |   moveq #3,d0
   11d7a:	|  +--|--|--|-- bra.w 11f1a <moveChr+0x2a6>
			} else if (immediate) {
   11d7e:	|  |  |  |  '-> tst.w 4(sp)
   11d82:	|  |  |  |  ,-- beq.s 11da2 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11d84:	|  |  |  |  |   movea.l 8(sp),a0
   11d88:	|  |  |  |  |   move.l 12(sp),d1
   11d8c:	|  |  |  |  |   move.l 16(sp),d0
   11d90:	|  |  |  |  |   move.l a0,-(sp)
   11d92:	|  |  |  |  |   move.l d1,-(sp)
   11d94:	|  |  |  |  |   move.l d0,-(sp)
   11d96:	|  |  |  |  |   jsr ac8a <jumpPerson>
   11d9c:	|  |  |  |  |   lea 12(sp),sp
   11da0:	|  |  |  +--|-- bra.s 11dd0 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11da2:	|  |  |  |  '-> movea.l 8(sp),a0
   11da6:	|  |  |  |      move.l 12(sp),d1
   11daa:	|  |  |  |      move.l 16(sp),d0
   11dae:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb405c>
   11db2:	|  |  |  |      move.l 44(sp),-(sp)
   11db6:	|  |  |  |      move.l a0,-(sp)
   11db8:	|  |  |  |      move.l d1,-(sp)
   11dba:	|  |  |  |      move.l d0,-(sp)
   11dbc:	|  |  |  |      jsr ae5a <makeWalkingPerson>
   11dc2:	|  |  |  |      lea 20(sp),sp
   11dc6:	|  |  |  |      tst.w d0
   11dc8:	|  |  |  +----- beq.s 11dd0 <moveChr+0x15c>
   11dca:	|  |  |  |      moveq #3,d0
   11dcc:	|  +--|--|----- bra.w 11f1a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11dd0:	|  |  |  '----> moveq #2,d0
   11dd2:	|  +--|-------- bra.w 11f1a <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11dd6:	|  |  '-------> movea.l 40(sp),a0
   11dda:	|  |            move.l 24(a0),d0
   11dde:	|  |            move.l d0,-(sp)
   11de0:	|  |            pea 7 <_start+0x7>
   11de4:	|  |            moveq #32,d0
   11de6:	|  |            add.l sp,d0
   11de8:	|  |            move.l d0,-(sp)
   11dea:	|  |            jsr 14b60 <getValueType>
   11df0:	|  |            lea 12(sp),sp
   11df4:	|  |            tst.w d0
   11df6:	|  |        ,-- bne.s 11dfe <moveChr+0x18a>
   11df8:	|  |        |   moveq #1,d0
   11dfa:	|  +--------|-- bra.w 11f1a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11dfe:	|  |        '-> moveq #24,d0
   11e00:	|  |            add.l 40(sp),d0
   11e04:	|  |            move.l d0,-(sp)
   11e06:	|  |            jsr 154e4 <trimStack>
   11e0c:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e0e:	|  |            movea.l 40(sp),a0
   11e12:	|  |            move.l 24(a0),d0
   11e16:	|  |            move.l d0,-(sp)
   11e18:	|  |            pea 7 <_start+0x7>
   11e1c:	|  |            lea 28(sp),a0
   11e20:	|  |            move.l a0,-(sp)
   11e22:	|  |            jsr 14b60 <getValueType>
   11e28:	|  |            lea 12(sp),sp
   11e2c:	|  |            tst.w d0
   11e2e:	|  |        ,-- bne.s 11e36 <moveChr+0x1c2>
   11e30:	|  |        |   moveq #1,d0
   11e32:	|  +--------|-- bra.w 11f1a <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11e36:	|  |        '-> moveq #24,d0
   11e38:	|  |            add.l 40(sp),d0
   11e3c:	|  |            move.l d0,-(sp)
   11e3e:	|  |            jsr 154e4 <trimStack>
   11e44:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11e46:	|  |            move.l 24(sp),d0
   11e4a:	|  |            move.l d0,-(sp)
   11e4c:	|  |            jsr 15e22 <getRegionForObject>
   11e52:	|  |            addq.l #4,sp
   11e54:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11e58:	|  |        ,-- bne.s 11e60 <moveChr+0x1ec>
   11e5a:	|  |        |   moveq #2,d0
   11e5c:	|  +--------|-- bra.w 11f1a <moveChr+0x2a6>

			if (force)
   11e60:	|  |        '-> tst.w 6(sp)
   11e64:	|  |        ,-- beq.s 11ea0 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11e66:	|  |        |   movea.l 28(sp),a0
   11e6a:	|  |        |   move.l 24(a0),d2
   11e6e:	|  |        |   movea.l 20(sp),a1
   11e72:	|  |        |   movea.l 28(sp),a0
   11e76:	|  |        |   move.l 20(a0),d1
   11e7a:	|  |        |   movea.l 28(sp),a0
   11e7e:	|  |        |   move.l 16(a0),d0
   11e82:	|  |        |   move.l d2,-(sp)
   11e84:	|  |        |   move.l 44(sp),-(sp)
   11e88:	|  |        |   move.l a1,-(sp)
   11e8a:	|  |        |   move.l d1,-(sp)
   11e8c:	|  |        |   move.l d0,-(sp)
   11e8e:	|  |        |   jsr a974 <forceWalkingPerson>
   11e94:	|  |        |   lea 20(sp),sp
   11e98:	|  |        |   tst.w d0
   11e9a:	|  |     ,--|-- beq.s 11f06 <moveChr+0x292>
   11e9c:	|  |     |  |   moveq #3,d0
   11e9e:	|  +-----|--|-- bra.s 11f1a <moveChr+0x2a6>
			}
			else if (immediate)
   11ea0:	|  |     |  '-> tst.w 4(sp)
   11ea4:	|  |     |  ,-- beq.s 11ecc <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11ea6:	|  |     |  |   movea.l 20(sp),a1
   11eaa:	|  |     |  |   movea.l 28(sp),a0
   11eae:	|  |     |  |   move.l 20(a0),d1
   11eb2:	|  |     |  |   movea.l 28(sp),a0
   11eb6:	|  |     |  |   move.l 16(a0),d0
   11eba:	|  |     |  |   move.l a1,-(sp)
   11ebc:	|  |     |  |   move.l d1,-(sp)
   11ebe:	|  |     |  |   move.l d0,-(sp)
   11ec0:	|  |     |  |   jsr ac8a <jumpPerson>
   11ec6:	|  |     |  |   lea 12(sp),sp
   11eca:	|  |     +--|-- bra.s 11f06 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11ecc:	|  |     |  '-> movea.l 28(sp),a0
   11ed0:	|  |     |      move.l 24(a0),d2
   11ed4:	|  |     |      movea.l 20(sp),a1
   11ed8:	|  |     |      movea.l 28(sp),a0
   11edc:	|  |     |      move.l 20(a0),d1
   11ee0:	|  |     |      movea.l 28(sp),a0
   11ee4:	|  |     |      move.l 16(a0),d0
   11ee8:	|  |     |      move.l d2,-(sp)
   11eea:	|  |     |      move.l 44(sp),-(sp)
   11eee:	|  |     |      move.l a1,-(sp)
   11ef0:	|  |     |      move.l d1,-(sp)
   11ef2:	|  |     |      move.l d0,-(sp)
   11ef4:	|  |     |      jsr ae5a <makeWalkingPerson>
   11efa:	|  |     |      lea 20(sp),sp
   11efe:	|  |     |      tst.w d0
   11f00:	|  |     +----- beq.s 11f06 <moveChr+0x292>
   11f02:	|  |     |      moveq #3,d0
   11f04:	|  +-----|----- bra.s 11f1a <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11f06:	|  |     '----> moveq #2,d0
   11f08:	|  +----------- bra.s 11f1a <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11f0a:	'--|----------> pea 19ff9 <PutChar+0x1f17>
   11f10:	   |            jsr 17640 <KPrintF>
   11f16:	   |            addq.l #4,sp
			return BR_ERROR;
   11f18:	   |            moveq #1,d0
	}
}
   11f1a:	   '----------> move.l (sp)+,d2
   11f1c:	                lea 28(sp),sp
   11f20:	                rts

00011f22 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11f22:	clr.l -(sp)
   11f24:	clr.l -(sp)
   11f26:	move.l 16(sp),-(sp)
   11f2a:	move.l 16(sp),-(sp)
   11f2e:	jsr 11c74 <moveChr>
   11f34:	lea 16(sp),sp
}
   11f38:	rts

00011f3a <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11f3a:	clr.l -(sp)
   11f3c:	pea 1 <_start+0x1>
   11f40:	move.l 16(sp),-(sp)
   11f44:	move.l 16(sp),-(sp)
   11f48:	jsr 11c74 <moveChr>
   11f4e:	lea 16(sp),sp
}
   11f52:	rts

00011f54 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11f54:	pea 1 <_start+0x1>
   11f58:	clr.l -(sp)
   11f5a:	move.l 16(sp),-(sp)
   11f5e:	move.l 16(sp),-(sp)
   11f62:	jsr 11c74 <moveChr>
   11f68:	lea 16(sp),sp
}
   11f6c:	rts

00011f6e <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11f6e:	jsr 85f8 <clearStatusBar>
	return BR_CONTINUE;
   11f74:	moveq #2,d0
}
   11f76:	rts

00011f78 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11f78:	jsr 86a0 <killLastStatus>
	return BR_CONTINUE;
   11f7e:	moveq #2,d0
}
   11f80:	rts

00011f82 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11f82:	jsr 858e <addStatusBar>
	return BR_CONTINUE;
   11f88:	moveq #2,d0
}
   11f8a:	rts

00011f8c <builtIn_statusText>:

builtIn(statusText)
{
   11f8c:	       subq.l #8,sp
   11f8e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11f90:	       movea.l 20(sp),a0
   11f94:	       move.l 24(a0),d0
   11f98:	       move.l d0,-(sp)
   11f9a:	       jsr 15136 <getTextFromAnyVar>
   11fa0:	       addq.l #4,sp
   11fa2:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11fa6:	   ,-- bne.s 11fac <builtIn_statusText+0x20>
   11fa8:	   |   moveq #1,d0
   11faa:	,--|-- bra.s 11fe0 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11fac:	|  '-> moveq #24,d0
   11fae:	|      add.l 20(sp),d0
   11fb2:	|      move.l d0,-(sp)
   11fb4:	|      jsr 154e4 <trimStack>
   11fba:	|      addq.l #4,sp
	setStatusBar(newText);
   11fbc:	|      move.l 8(sp),-(sp)
   11fc0:	|      jsr 8920 <setStatusBar>
   11fc6:	|      addq.l #4,sp
	FreeVec(newText);
   11fc8:	|      move.l 8(sp),4(sp)
   11fce:	|      move.l 1cdda <SysBase>,d0
   11fd4:	|      movea.l d0,a6
   11fd6:	|      movea.l 4(sp),a1
   11fda:	|      jsr -690(a6)
	return BR_CONTINUE;
   11fde:	|      moveq #2,d0
}
   11fe0:	'----> movea.l (sp)+,a6
   11fe2:	       addq.l #8,sp
   11fe4:	       rts

00011fe6 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11fe6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fe8:	       movea.l 12(sp),a0
   11fec:	       move.l 24(a0),d0
   11ff0:	       move.l d0,-(sp)
   11ff2:	       pea 1 <_start+0x1>
   11ff6:	       move.l sp,d0
   11ff8:	       addq.l #8,d0
   11ffa:	       move.l d0,-(sp)
   11ffc:	       jsr 14b60 <getValueType>
   12002:	       lea 12(sp),sp
   12006:	       tst.w d0
   12008:	   ,-- bne.s 1200e <builtIn_lightStatus+0x28>
   1200a:	   |   moveq #1,d0
   1200c:	,--|-- bra.s 1202c <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   1200e:	|  '-> moveq #24,d0
   12010:	|      add.l 12(sp),d0
   12014:	|      move.l d0,-(sp)
   12016:	|      jsr 154e4 <trimStack>
   1201c:	|      addq.l #4,sp
	setLitStatus (val);
   1201e:	|      move.l (sp),d0
   12020:	|      move.l d0,-(sp)
   12022:	|      jsr 8910 <setLitStatus>
   12028:	|      addq.l #4,sp
	return BR_CONTINUE;
   1202a:	|      moveq #2,d0
}
   1202c:	'----> addq.l #4,sp
   1202e:	       rts

00012030 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   12030:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12032:	       movea.l 16(sp),a0
   12036:	       move.l 24(a0),d0
   1203a:	       move.l d0,-(sp)
   1203c:	       pea 1 <_start+0x1>
   12040:	       move.l sp,d0
   12042:	       addq.l #8,d0
   12044:	       move.l d0,-(sp)
   12046:	       jsr 14b60 <getValueType>
   1204c:	       lea 12(sp),sp
   12050:	       tst.w d0
   12052:	   ,-- bne.s 12058 <builtIn_positionStatus+0x28>
   12054:	   |   moveq #1,d0
   12056:	,--|-- bra.s 120b2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   12058:	|  '-> moveq #24,d0
   1205a:	|      add.l 16(sp),d0
   1205e:	|      move.l d0,-(sp)
   12060:	|      jsr 154e4 <trimStack>
   12066:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12068:	|      movea.l 16(sp),a0
   1206c:	|      move.l 24(a0),d0
   12070:	|      move.l d0,-(sp)
   12072:	|      pea 1 <_start+0x1>
   12076:	|      moveq #12,d0
   12078:	|      add.l sp,d0
   1207a:	|      move.l d0,-(sp)
   1207c:	|      jsr 14b60 <getValueType>
   12082:	|      lea 12(sp),sp
   12086:	|      tst.w d0
   12088:	|  ,-- bne.s 1208e <builtIn_positionStatus+0x5e>
   1208a:	|  |   moveq #1,d0
   1208c:	+--|-- bra.s 120b2 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   1208e:	|  '-> moveq #24,d0
   12090:	|      add.l 16(sp),d0
   12094:	|      move.l d0,-(sp)
   12096:	|      jsr 154e4 <trimStack>
   1209c:	|      addq.l #4,sp
	positionStatus (x, y);
   1209e:	|      move.l (sp),d1
   120a0:	|      move.l 4(sp),d0
   120a4:	|      move.l d1,-(sp)
   120a6:	|      move.l d0,-(sp)
   120a8:	|      jsr 8702 <positionStatus>
   120ae:	|      addq.l #8,sp
	return BR_CONTINUE;
   120b0:	|      moveq #2,d0
}
   120b2:	'----> addq.l #8,sp
   120b4:	       rts

000120b6 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   120b6:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120b8:	       movea.l 12(sp),a0
   120bc:	       move.l 24(a0),d0
   120c0:	       move.l d0,-(sp)
   120c2:	       pea 1 <_start+0x1>
   120c6:	       move.l sp,d0
   120c8:	       addq.l #8,d0
   120ca:	       move.l d0,-(sp)
   120cc:	       jsr 14b60 <getValueType>
   120d2:	       lea 12(sp),sp
   120d6:	       tst.w d0
   120d8:	   ,-- bne.s 120de <builtIn_alignStatus+0x28>
   120da:	   |   moveq #1,d0
   120dc:	,--|-- bra.s 120fe <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   120de:	|  '-> moveq #24,d0
   120e0:	|      add.l 12(sp),d0
   120e4:	|      move.l d0,-(sp)
   120e6:	|      jsr 154e4 <trimStack>
   120ec:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   120ee:	|      move.l (sp),d0
   120f0:	|      movea.l 1c762 <nowStatus>,a0
   120f6:	|      move.l d0,d0
   120f8:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   120fc:	|      moveq #2,d0
}
   120fe:	'----> addq.l #4,sp
   12100:	       rts

00012102 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   12102:	             tst.l 4(sp)
   12106:	      ,----- beq.s 12112 <getFuncNumForCallback+0x10>
   12108:	      |      moveq #1,d0
   1210a:	      |      cmp.l 4(sp),d0
   1210e:	      |  ,-- beq.s 12118 <getFuncNumForCallback+0x16>
   12110:	   ,--|--|-- bra.s 1214e <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   12112:	   |  '--|-> clr.l 12(sp)
			break;
   12116:	,--|-----|-- bra.s 12160 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   12118:	|  |     '-> movea.l 8(sp),a0
   1211c:	|  |         move.l 24(a0),d0
   12120:	|  |         move.l d0,-(sp)
   12122:	|  |         pea 2 <_start+0x2>
   12126:	|  |         move.l 20(sp),-(sp)
   1212a:	|  |         jsr 14b60 <getValueType>
   12130:	|  |         lea 12(sp),sp
   12134:	|  |         tst.w d0
   12136:	|  |     ,-- bne.s 1213c <getFuncNumForCallback+0x3a>
   12138:	|  |     |   clr.w d0
   1213a:	|  |  ,--|-- bra.s 12162 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   1213c:	|  |  |  '-> moveq #24,d0
   1213e:	|  |  |      add.l 8(sp),d0
   12142:	|  |  |      move.l d0,-(sp)
   12144:	|  |  |      jsr 154e4 <trimStack>
   1214a:	|  |  |      addq.l #4,sp
			break;
   1214c:	+--|--|----- bra.s 12160 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   1214e:	|  '--|----> pea 1a02f <PutChar+0x1f4d>
   12154:	|     |      jsr 17640 <KPrintF>
   1215a:	|     |      addq.l #4,sp
			return FALSE;
   1215c:	|     |      clr.w d0
   1215e:	|     +----- bra.s 12162 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   12160:	'-----|----> moveq #1,d0
}
   12162:	      '----> rts

00012164 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   12164:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12166:	       move.l sp,d0
   12168:	       move.l d0,-(sp)
   1216a:	       move.l 16(sp),-(sp)
   1216e:	       move.l 16(sp),-(sp)
   12172:	       jsr 12102 <getFuncNumForCallback>
   12178:	       lea 12(sp),sp
   1217c:	       tst.w d0
   1217e:	,----- beq.s 1218e <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   12180:	|      movea.l 1c754 <currentEvents>,a0
   12186:	|      move.l (sp),d0
   12188:	|      move.l d0,(a0)
		return BR_CONTINUE;
   1218a:	|      moveq #2,d0
   1218c:	|  ,-- bra.s 12190 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   1218e:	'--|-> moveq #1,d0
}
   12190:	   '-> addq.l #4,sp
   12192:	       rts

00012194 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   12194:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12196:	       move.l sp,d0
   12198:	       move.l d0,-(sp)
   1219a:	       move.l 16(sp),-(sp)
   1219e:	       move.l 16(sp),-(sp)
   121a2:	       jsr 12102 <getFuncNumForCallback>
   121a8:	       lea 12(sp),sp
   121ac:	       tst.w d0
   121ae:	,----- beq.s 121c0 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   121b0:	|      movea.l 1c754 <currentEvents>,a0
   121b6:	|      move.l (sp),d0
   121b8:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   121bc:	|      moveq #2,d0
   121be:	|  ,-- bra.s 121c2 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   121c0:	'--|-> moveq #1,d0
}
   121c2:	   '-> addq.l #4,sp
   121c4:	       rts

000121c6 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   121c6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   121c8:	       move.l sp,d0
   121ca:	       move.l d0,-(sp)
   121cc:	       move.l 16(sp),-(sp)
   121d0:	       move.l 16(sp),-(sp)
   121d4:	       jsr 12102 <getFuncNumForCallback>
   121da:	       lea 12(sp),sp
   121de:	       tst.w d0
   121e0:	,----- beq.s 121f2 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   121e2:	|      movea.l 1c754 <currentEvents>,a0
   121e8:	|      move.l (sp),d0
   121ea:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   121ee:	|      moveq #2,d0
   121f0:	|  ,-- bra.s 121f4 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   121f2:	'--|-> moveq #1,d0
}
   121f4:	   '-> addq.l #4,sp
   121f6:	       rts

000121f8 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   121f8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   121fa:	       move.l sp,d0
   121fc:	       move.l d0,-(sp)
   121fe:	       move.l 16(sp),-(sp)
   12202:	       move.l 16(sp),-(sp)
   12206:	       jsr 12102 <getFuncNumForCallback>
   1220c:	       lea 12(sp),sp
   12210:	       tst.w d0
   12212:	,----- beq.s 12224 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   12214:	|      movea.l 1c754 <currentEvents>,a0
   1221a:	|      move.l (sp),d0
   1221c:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   12220:	|      moveq #2,d0
   12222:	|  ,-- bra.s 12226 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   12224:	'--|-> moveq #1,d0
}
   12226:	   '-> addq.l #4,sp
   12228:	       rts

0001222a <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   1222a:	          subq.l #8,sp
   1222c:	          move.l a2,-(sp)
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1222e:	          move.l sp,d0
   12230:	          addq.l #4,d0
   12232:	          move.l d0,-(sp)
   12234:	          move.l 24(sp),-(sp)
   12238:	          move.l 24(sp),-(sp)
   1223c:	          jsr 12102 <getFuncNumForCallback>
   12242:	          lea 12(sp),sp
   12246:	          tst.w d0
   12248:	,-------- beq.s 122a6 <builtIn_onFocusChange+0x7c>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   1224a:	|         movea.l 1c754 <currentEvents>,a0
   12250:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   12256:	|         move.l 4(sp),d0
   1225a:	|  ,----- beq.s 12276 <builtIn_onFocusChange+0x4c>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   1225c:	|  |      move.l 4(sp),d0
   12260:	|  |      movea.l 1c754 <currentEvents>,a2
   12266:	|  |      move.l d0,-(sp)
   12268:	|  |      jsr 74ca <preloadNewFunctionNum>
   1226e:	|  |      addq.l #4,sp
   12270:	|  |      move.l d0,20(a2)
   12274:	|  |  ,-- bra.s 12280 <builtIn_onFocusChange+0x56>
		else
			currentEvents -> focusFunction = NULL;
   12276:	|  '--|-> movea.l 1c754 <currentEvents>,a0
   1227c:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   12280:	|     '-> tst.l 8(sp)
   12284:	|     ,-- beq.s 122a2 <builtIn_onFocusChange+0x78>
   12286:	|     |   movea.l 1c754 <currentEvents>,a0
   1228c:	|     |   move.l 20(a0),d0
   12290:	|     |   cmp.l 8(sp),d0
   12294:	|     +-- beq.s 122a2 <builtIn_onFocusChange+0x78>
		{
			unloadFunction(oldfunc);
   12296:	|     |   move.l 8(sp),-(sp)
   1229a:	|     |   jsr 787a <unloadFunction>
   122a0:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   122a2:	|     '-> moveq #2,d0
   122a4:	|     ,-- bra.s 122a8 <builtIn_onFocusChange+0x7e>
	}
	return BR_ERROR;
   122a6:	'-----|-> moveq #1,d0
}
   122a8:	      '-> movea.l (sp)+,a2
   122aa:	          addq.l #8,sp
   122ac:	          rts

000122ae <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   122ae:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   122b0:	       move.l sp,d0
   122b2:	       move.l d0,-(sp)
   122b4:	       move.l 16(sp),-(sp)
   122b8:	       move.l 16(sp),-(sp)
   122bc:	       jsr 12102 <getFuncNumForCallback>
   122c2:	       lea 12(sp),sp
   122c6:	       tst.w d0
   122c8:	,----- beq.s 122da <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   122ca:	|      movea.l 1c754 <currentEvents>,a0
   122d0:	|      move.l (sp),d0
   122d2:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   122d6:	|      moveq #2,d0
   122d8:	|  ,-- bra.s 122dc <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   122da:	'--|-> moveq #1,d0
}
   122dc:	   '-> addq.l #4,sp
   122de:	       rts

000122e0 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   122e0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   122e2:	       move.l sp,d0
   122e4:	       move.l d0,-(sp)
   122e6:	       move.l 16(sp),-(sp)
   122ea:	       move.l 16(sp),-(sp)
   122ee:	       jsr 12102 <getFuncNumForCallback>
   122f4:	       lea 12(sp),sp
   122f8:	       tst.w d0
   122fa:	,----- beq.s 1230c <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   122fc:	|      movea.l 1c754 <currentEvents>,a0
   12302:	|      move.l (sp),d0
   12304:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   12308:	|      moveq #2,d0
   1230a:	|  ,-- bra.s 1230e <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   1230c:	'--|-> moveq #1,d0
}
   1230e:	   '-> addq.l #4,sp
   12310:	       rts

00012312 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   12312:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12314:	          move.l sp,d0
   12316:	          move.l d0,-(sp)
   12318:	          move.l 16(sp),-(sp)
   1231c:	          move.l 16(sp),-(sp)
   12320:	          jsr 12102 <getFuncNumForCallback>
   12326:	          lea 12(sp),sp
   1232a:	          tst.w d0
   1232c:	,-------- beq.s 12358 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   1232e:	|         move.l 1cdaa <noStack>,d1
   12334:	|         move.l (sp),d0
   12336:	|         pea 1 <_start+0x1>
   1233a:	|         move.l d1,-(sp)
   1233c:	|         clr.l -(sp)
   1233e:	|         clr.l -(sp)
   12340:	|         move.l d0,-(sp)
   12342:	|         jsr 782e <startNewFunctionNum>
   12348:	|         lea 20(sp),sp
   1234c:	|         tst.l d0
   1234e:	|     ,-- bne.s 12354 <builtIn_spawnSub+0x42>
   12350:	|     |   moveq #1,d0
   12352:	|  ,--|-- bra.s 1235a <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   12354:	|  |  '-> moveq #2,d0
   12356:	|  +----- bra.s 1235a <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   12358:	'--|----> moveq #1,d0
}
   1235a:	   '----> addq.l #4,sp
   1235c:	          rts

0001235e <builtIn_cancelSub>:

builtIn (cancelSub)
{
   1235e:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12360:	          move.l sp,d0
   12362:	          addq.l #4,d0
   12364:	          move.l d0,-(sp)
   12366:	          move.l 20(sp),-(sp)
   1236a:	          move.l 20(sp),-(sp)
   1236e:	          jsr 12102 <getFuncNumForCallback>
   12374:	          lea 12(sp),sp
   12378:	          tst.w d0
   1237a:	,-------- beq.s 123b0 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   1237c:	|         move.l 4(sp),d1
   12380:	|         move.l sp,d0
   12382:	|         addq.l #2,d0
   12384:	|         move.l d0,-(sp)
   12386:	|         move.l 20(sp),-(sp)
   1238a:	|         move.l d1,-(sp)
   1238c:	|         jsr 5482 <cancelAFunction>
   12392:	|         lea 12(sp),sp
		if (killedMyself) {
   12396:	|         move.w 2(sp),d0
   1239a:	|  ,----- beq.s 123ac <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   1239c:	|  |      move.l 16(sp),-(sp)
   123a0:	|  |      jsr 5374 <abortFunction>
   123a6:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   123a8:	|  |      moveq #5,d0
   123aa:	|  |  ,-- bra.s 123b2 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   123ac:	|  '--|-> moveq #2,d0
   123ae:	|     +-- bra.s 123b2 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   123b0:	'-----|-> moveq #1,d0
}
   123b2:	      '-> addq.l #8,sp
   123b4:	          rts

000123b6 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   123b6:	       subq.l #8,sp
   123b8:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   123ba:	       movea.l 20(sp),a0
   123be:	       move.l 24(a0),d0
   123c2:	       move.l d0,-(sp)
   123c4:	       jsr 15136 <getTextFromAnyVar>
   123ca:	       addq.l #4,sp
   123cc:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   123d0:	   ,-- bne.s 123d6 <builtIn_stringWidth+0x20>
   123d2:	   |   moveq #1,d0
   123d4:	,--|-- bra.s 12424 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   123d6:	|  '-> moveq #24,d0
   123d8:	|      add.l 20(sp),d0
   123dc:	|      move.l d0,-(sp)
   123de:	|      jsr 154e4 <trimStack>
   123e4:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   123e6:	|      move.l 8(sp),-(sp)
   123ea:	|      jsr 15c4a <stringWidth>
   123f0:	|      addq.l #4,sp
   123f2:	|      move.l d0,d1
   123f4:	|      moveq #28,d0
   123f6:	|      add.l 20(sp),d0
   123fa:	|      move.l d1,-(sp)
   123fc:	|      pea 1 <_start+0x1>
   12400:	|      move.l d0,-(sp)
   12402:	|      jsr 15452 <setVariable>
   12408:	|      lea 12(sp),sp
	FreeVec(theText);
   1240c:	|      move.l 8(sp),4(sp)
   12412:	|      move.l 1cdda <SysBase>,d0
   12418:	|      movea.l d0,a6
   1241a:	|      movea.l 4(sp),a1
   1241e:	|      jsr -690(a6)
	return BR_CONTINUE;
   12422:	|      moveq #2,d0
}
   12424:	'----> movea.l (sp)+,a6
   12426:	       addq.l #8,sp
   12428:	       rts

0001242a <builtIn_hardScroll>:

builtIn(hardScroll)
{
   1242a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1242c:	       movea.l 12(sp),a0
   12430:	       move.l 24(a0),d0
   12434:	       move.l d0,-(sp)
   12436:	       pea 1 <_start+0x1>
   1243a:	       move.l sp,d0
   1243c:	       addq.l #8,d0
   1243e:	       move.l d0,-(sp)
   12440:	       jsr 14b60 <getValueType>
   12446:	       lea 12(sp),sp
   1244a:	       tst.w d0
   1244c:	   ,-- bne.s 12452 <builtIn_hardScroll+0x28>
   1244e:	   |   moveq #1,d0
   12450:	,--|-- bra.s 12470 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   12452:	|  '-> moveq #24,d0
   12454:	|      add.l 12(sp),d0
   12458:	|      move.l d0,-(sp)
   1245a:	|      jsr 154e4 <trimStack>
   12460:	|      addq.l #4,sp
	hardScroll (v);
   12462:	|      move.l (sp),d0
   12464:	|      move.l d0,-(sp)
   12466:	|      jsr d5c6 <hardScroll>
   1246c:	|      addq.l #4,sp
	return BR_CONTINUE;
   1246e:	|      moveq #2,d0
}
   12470:	'----> addq.l #4,sp
   12472:	       rts

00012474 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   12474:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12476:	       movea.l 12(sp),a0
   1247a:	       move.l 24(a0),d0
   1247e:	       move.l d0,-(sp)
   12480:	       pea 7 <_start+0x7>
   12484:	       move.l sp,d0
   12486:	       addq.l #8,d0
   12488:	       move.l d0,-(sp)
   1248a:	       jsr 14b60 <getValueType>
   12490:	       lea 12(sp),sp
   12494:	       tst.w d0
   12496:	   ,-- bne.s 1249c <builtIn_isScreenRegion+0x28>
   12498:	   |   moveq #1,d0
   1249a:	,--|-- bra.s 124dc <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   1249c:	|  '-> moveq #24,d0
   1249e:	|      add.l 12(sp),d0
   124a2:	|      move.l d0,-(sp)
   124a4:	|      jsr 154e4 <trimStack>
   124aa:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   124ac:	|      move.l (sp),d0
   124ae:	|      move.l d0,-(sp)
   124b0:	|      jsr 15e22 <getRegionForObject>
   124b6:	|      addq.l #4,sp
   124b8:	|      tst.l d0
   124ba:	|      sne d0
   124bc:	|      neg.b d0
   124be:	|      moveq #0,d1
   124c0:	|      move.b d0,d1
   124c2:	|      moveq #28,d0
   124c4:	|      add.l 12(sp),d0
   124c8:	|      move.l d1,-(sp)
   124ca:	|      pea 1 <_start+0x1>
   124ce:	|      move.l d0,-(sp)
   124d0:	|      jsr 15452 <setVariable>
   124d6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   124da:	|      moveq #2,d0
}
   124dc:	'----> addq.l #4,sp
   124de:	       rts

000124e0 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   124e0:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   124e2:	       movea.l 12(sp),a0
   124e6:	       move.l 24(a0),d0
   124ea:	       move.l d0,-(sp)
   124ec:	       pea 1 <_start+0x1>
   124f0:	       move.l sp,d0
   124f2:	       addq.l #8,d0
   124f4:	       move.l d0,-(sp)
   124f6:	       jsr 14b60 <getValueType>
   124fc:	       lea 12(sp),sp
   12500:	       tst.w d0
   12502:	   ,-- bne.s 12508 <builtIn_setSpeechSpeed+0x28>
   12504:	   |   moveq #1,d0
   12506:	,--|-- bra.s 12556 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   12508:	|  '-> moveq #24,d0
   1250a:	|      add.l 12(sp),d0
   1250e:	|      move.l d0,-(sp)
   12510:	|      jsr 154e4 <trimStack>
   12516:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12518:	|      move.l (sp),d0
   1251a:	|      move.l d0,-(sp)
   1251c:	|      jsr 17a72 <__floatsisf>
   12522:	|      addq.l #4,sp
   12524:	|      move.l #1008981770,-(sp)
   1252a:	|      move.l d0,-(sp)
   1252c:	|      jsr 17b24 <__mulsf3>
   12532:	|      addq.l #8,sp
   12534:	|      move.l d0,1c74e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   1253a:	|      moveq #28,d0
   1253c:	|      add.l 12(sp),d0
   12540:	|      pea 1 <_start+0x1>
   12544:	|      pea 1 <_start+0x1>
   12548:	|      move.l d0,-(sp)
   1254a:	|      jsr 15452 <setVariable>
   12550:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12554:	|      moveq #2,d0
}
   12556:	'----> addq.l #4,sp
   12558:	       rts

0001255a <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   1255a:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1255c:	       movea.l 12(sp),a0
   12560:	       move.l 24(a0),d0
   12564:	       move.l d0,-(sp)
   12566:	       pea 1 <_start+0x1>
   1256a:	       move.l sp,d0
   1256c:	       addq.l #8,d0
   1256e:	       move.l d0,-(sp)
   12570:	       jsr 14b60 <getValueType>
   12576:	       lea 12(sp),sp
   1257a:	       tst.w d0
   1257c:	   ,-- bne.s 12582 <builtIn_setFontSpacing+0x28>
   1257e:	   |   moveq #1,d0
   12580:	,--|-- bra.s 125b8 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   12582:	|  '-> move.l (sp),d0
   12584:	|      move.l d0,d0
   12586:	|      move.w d0,1ccdc <fontSpace>
	trimStack (&fun -> stack);
   1258c:	|      moveq #24,d0
   1258e:	|      add.l 12(sp),d0
   12592:	|      move.l d0,-(sp)
   12594:	|      jsr 154e4 <trimStack>
   1259a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1259c:	|      moveq #28,d0
   1259e:	|      add.l 12(sp),d0
   125a2:	|      pea 1 <_start+0x1>
   125a6:	|      pea 1 <_start+0x1>
   125aa:	|      move.l d0,-(sp)
   125ac:	|      jsr 15452 <setVariable>
   125b2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   125b6:	|      moveq #2,d0
}
   125b8:	'----> addq.l #4,sp
   125ba:	       rts

000125bc <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   125bc:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   125be:	          movea.l 12(sp),a0
   125c2:	          move.l 24(a0),d0
   125c6:	          move.l d0,-(sp)
   125c8:	          pea 1 <_start+0x1>
   125cc:	          move.l sp,d0
   125ce:	          addq.l #8,d0
   125d0:	          move.l d0,-(sp)
   125d2:	          jsr 14b60 <getValueType>
   125d8:	          lea 12(sp),sp
   125dc:	          tst.w d0
   125de:	      ,-- bne.s 125e4 <builtIn_transitionLevel+0x28>
   125e0:	      |   moveq #1,d0
   125e2:	,-----|-- bra.s 12638 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   125e4:	|     '-> moveq #24,d0
   125e6:	|         add.l 12(sp),d0
   125ea:	|         move.l d0,-(sp)
   125ec:	|         jsr 154e4 <trimStack>
   125f2:	|         addq.l #4,sp

	if (number < 0)
   125f4:	|         move.l (sp),d0
   125f6:	|     ,-- bpl.s 12600 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   125f8:	|     |   clr.b 1c752 <brightnessLevel>
   125fe:	|  ,--|-- bra.s 1261c <builtIn_transitionLevel+0x60>
	else if (number > 255)
   12600:	|  |  '-> move.l (sp),d0
   12602:	|  |      cmpi.l #255,d0
   12608:	|  |  ,-- ble.s 12612 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   1260a:	|  |  |   st 1c752 <brightnessLevel>
   12610:	|  +--|-- bra.s 1261c <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   12612:	|  |  '-> move.l (sp),d0
   12614:	|  |      move.l d0,d0
   12616:	|  |      move.b d0,1c752 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   1261c:	|  '----> moveq #28,d0
   1261e:	|         add.l 12(sp),d0
   12622:	|         pea 1 <_start+0x1>
   12626:	|         pea 1 <_start+0x1>
   1262a:	|         move.l d0,-(sp)
   1262c:	|         jsr 15452 <setVariable>
   12632:	|         lea 12(sp),sp
	return BR_CONTINUE;
   12636:	|         moveq #2,d0
}
   12638:	'-------> addq.l #4,sp
   1263a:	          rts

0001263c <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   1263c:	movea.l 8(sp),a0
   12640:	move.l 24(a0),d0
   12644:	move.l d0,-(sp)
   12646:	jsr 150a0 <getBoolean>
   1264c:	addq.l #4,sp
   1264e:	move.w d0,1cd7a <captureAllKeys>
	trimStack (&fun -> stack);
   12654:	moveq #24,d0
   12656:	add.l 8(sp),d0
   1265a:	move.l d0,-(sp)
   1265c:	jsr 154e4 <trimStack>
   12662:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   12664:	move.w 1cd7a <captureAllKeys>,d0
   1266a:	movea.w d0,a0
   1266c:	moveq #28,d0
   1266e:	add.l 8(sp),d0
   12672:	move.l a0,-(sp)
   12674:	pea 1 <_start+0x1>
   12678:	move.l d0,-(sp)
   1267a:	jsr 15452 <setVariable>
   12680:	lea 12(sp),sp
	return BR_CONTINUE;
   12684:	moveq #2,d0
}
   12686:	rts

00012688 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12688:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1268c:	       movea.l 20(sp),a0
   12690:	       move.l 24(a0),d0
   12694:	       move.l d0,-(sp)
   12696:	       pea 1 <_start+0x1>
   1269a:	       moveq #12,d0
   1269c:	       add.l sp,d0
   1269e:	       move.l d0,-(sp)
   126a0:	       jsr 14b60 <getValueType>
   126a6:	       lea 12(sp),sp
   126aa:	       tst.w d0
   126ac:	   ,-- bne.s 126b4 <builtIn_spinCharacter+0x2c>
   126ae:	   |   moveq #1,d0
   126b0:	,--|-- bra.w 12764 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   126b4:	|  '-> moveq #24,d0
   126b6:	|      add.l 20(sp),d0
   126ba:	|      move.l d0,-(sp)
   126bc:	|      jsr 154e4 <trimStack>
   126c2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   126c4:	|      movea.l 20(sp),a0
   126c8:	|      move.l 24(a0),d0
   126cc:	|      move.l d0,-(sp)
   126ce:	|      pea 7 <_start+0x7>
   126d2:	|      lea 8(sp),a0
   126d6:	|      move.l a0,-(sp)
   126d8:	|      jsr 14b60 <getValueType>
   126de:	|      lea 12(sp),sp
   126e2:	|      tst.w d0
   126e4:	|  ,-- bne.s 126ea <builtIn_spinCharacter+0x62>
   126e6:	|  |   moveq #1,d0
   126e8:	+--|-- bra.s 12764 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   126ea:	|  '-> moveq #24,d0
   126ec:	|      add.l 20(sp),d0
   126f0:	|      move.l d0,-(sp)
   126f2:	|      jsr 154e4 <trimStack>
   126f8:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   126fa:	|      move.l (sp),d0
   126fc:	|      move.l d0,-(sp)
   126fe:	|      jsr a906 <findPerson>
   12704:	|      addq.l #4,sp
   12706:	|      move.l d0,8(sp)
	if (thisPerson) {
   1270a:	|  ,-- beq.s 1274a <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   1270c:	|  |   move.l 4(sp),d0
   12710:	|  |   movea.l 8(sp),a0
   12714:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12718:	|  |   movea.l 8(sp),a0
   1271c:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   12722:	|  |   movea.l 8(sp),a0
   12726:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1272c:	|  |   moveq #28,d0
   1272e:	|  |   add.l 20(sp),d0
   12732:	|  |   pea 1 <_start+0x1>
   12736:	|  |   pea 1 <_start+0x1>
   1273a:	|  |   move.l d0,-(sp)
   1273c:	|  |   jsr 15452 <setVariable>
   12742:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   12746:	|  |   moveq #3,d0
   12748:	+--|-- bra.s 12764 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1274a:	|  '-> moveq #28,d0
   1274c:	|      add.l 20(sp),d0
   12750:	|      clr.l -(sp)
   12752:	|      pea 1 <_start+0x1>
   12756:	|      move.l d0,-(sp)
   12758:	|      jsr 15452 <setVariable>
   1275e:	|      lea 12(sp),sp
		return BR_CONTINUE;
   12762:	|      moveq #2,d0
	}
}
   12764:	'----> lea 12(sp),sp
   12768:	       rts

0001276a <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   1276a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1276c:	          movea.l 16(sp),a0
   12770:	          move.l 24(a0),d0
   12774:	          move.l d0,-(sp)
   12776:	          pea 7 <_start+0x7>
   1277a:	          move.l sp,d0
   1277c:	          addq.l #8,d0
   1277e:	          move.l d0,-(sp)
   12780:	          jsr 14b60 <getValueType>
   12786:	          lea 12(sp),sp
   1278a:	          tst.w d0
   1278c:	      ,-- bne.s 12792 <builtIn_getCharacterDirection+0x28>
   1278e:	      |   moveq #1,d0
   12790:	,-----|-- bra.s 127f0 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12792:	|     '-> moveq #24,d0
   12794:	|         add.l 16(sp),d0
   12798:	|         move.l d0,-(sp)
   1279a:	|         jsr 154e4 <trimStack>
   127a0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   127a2:	|         move.l (sp),d0
   127a4:	|         move.l d0,-(sp)
   127a6:	|         jsr a906 <findPerson>
   127ac:	|         addq.l #4,sp
   127ae:	|         move.l d0,4(sp)
	if (thisPerson) {
   127b2:	|  ,----- beq.s 127d6 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   127b4:	|  |      movea.l 4(sp),a0
   127b8:	|  |      move.l 106(a0),d1
   127bc:	|  |      moveq #28,d0
   127be:	|  |      add.l 16(sp),d0
   127c2:	|  |      move.l d1,-(sp)
   127c4:	|  |      pea 1 <_start+0x1>
   127c8:	|  |      move.l d0,-(sp)
   127ca:	|  |      jsr 15452 <setVariable>
   127d0:	|  |      lea 12(sp),sp
   127d4:	|  |  ,-- bra.s 127ee <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   127d6:	|  '--|-> moveq #28,d0
   127d8:	|     |   add.l 16(sp),d0
   127dc:	|     |   clr.l -(sp)
   127de:	|     |   pea 1 <_start+0x1>
   127e2:	|     |   move.l d0,-(sp)
   127e4:	|     |   jsr 15452 <setVariable>
   127ea:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   127ee:	|     '-> moveq #2,d0
}
   127f0:	'-------> addq.l #8,sp
   127f2:	          rts

000127f4 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   127f4:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   127f6:	       movea.l 16(sp),a0
   127fa:	       move.l 24(a0),d0
   127fe:	       move.l d0,-(sp)
   12800:	       pea 7 <_start+0x7>
   12804:	       move.l sp,d0
   12806:	       addq.l #8,d0
   12808:	       move.l d0,-(sp)
   1280a:	       jsr 14b60 <getValueType>
   12810:	       lea 12(sp),sp
   12814:	       tst.w d0
   12816:	   ,-- bne.s 1281c <builtIn_isCharacter+0x28>
   12818:	   |   moveq #1,d0
   1281a:	,--|-- bra.s 1285e <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   1281c:	|  '-> moveq #24,d0
   1281e:	|      add.l 16(sp),d0
   12822:	|      move.l d0,-(sp)
   12824:	|      jsr 154e4 <trimStack>
   1282a:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1282c:	|      move.l (sp),d0
   1282e:	|      move.l d0,-(sp)
   12830:	|      jsr a906 <findPerson>
   12836:	|      addq.l #4,sp
   12838:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   1283c:	|      sne d0
   1283e:	|      neg.b d0
   12840:	|      moveq #0,d1
   12842:	|      move.b d0,d1
   12844:	|      moveq #28,d0
   12846:	|      add.l 16(sp),d0
   1284a:	|      move.l d1,-(sp)
   1284c:	|      pea 1 <_start+0x1>
   12850:	|      move.l d0,-(sp)
   12852:	|      jsr 15452 <setVariable>
   12858:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1285c:	|      moveq #2,d0
}
   1285e:	'----> addq.l #8,sp
   12860:	       rts

00012862 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   12862:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12864:	          movea.l 16(sp),a0
   12868:	          move.l 24(a0),d0
   1286c:	          move.l d0,-(sp)
   1286e:	          pea 7 <_start+0x7>
   12872:	          move.l sp,d0
   12874:	          addq.l #8,d0
   12876:	          move.l d0,-(sp)
   12878:	          jsr 14b60 <getValueType>
   1287e:	          lea 12(sp),sp
   12882:	          tst.w d0
   12884:	      ,-- bne.s 1288a <builtIn_normalCharacter+0x28>
   12886:	      |   moveq #1,d0
   12888:	,-----|-- bra.s 12906 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   1288a:	|     '-> moveq #24,d0
   1288c:	|         add.l 16(sp),d0
   12890:	|         move.l d0,-(sp)
   12892:	|         jsr 154e4 <trimStack>
   12898:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1289a:	|         move.l (sp),d0
   1289c:	|         move.l d0,-(sp)
   1289e:	|         jsr a906 <findPerson>
   128a4:	|         addq.l #4,sp
   128a6:	|         move.l d0,4(sp)
	if (thisPerson)
   128aa:	|  ,----- beq.s 128ec <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   128ac:	|  |      movea.l 4(sp),a0
   128b0:	|  |      movea.l 80(a0),a0
   128b4:	|  |      move.l (a0),d1
   128b6:	|  |      movea.l 4(sp),a0
   128ba:	|  |      move.l 106(a0),d0
   128be:	|  |      add.l d0,d0
   128c0:	|  |      add.l d0,d0
   128c2:	|  |      movea.l d1,a0
   128c4:	|  |      adda.l d0,a0
   128c6:	|  |      move.l (a0),d0
   128c8:	|  |      movea.l 4(sp),a0
   128cc:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   128d0:	|  |      moveq #28,d0
   128d2:	|  |      add.l 16(sp),d0
   128d6:	|  |      pea 1 <_start+0x1>
   128da:	|  |      pea 1 <_start+0x1>
   128de:	|  |      move.l d0,-(sp)
   128e0:	|  |      jsr 15452 <setVariable>
   128e6:	|  |      lea 12(sp),sp
   128ea:	|  |  ,-- bra.s 12904 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   128ec:	|  '--|-> moveq #28,d0
   128ee:	|     |   add.l 16(sp),d0
   128f2:	|     |   clr.l -(sp)
   128f4:	|     |   pea 1 <_start+0x1>
   128f8:	|     |   move.l d0,-(sp)
   128fa:	|     |   jsr 15452 <setVariable>
   12900:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12904:	|     '-> moveq #2,d0
}
   12906:	'-------> addq.l #8,sp
   12908:	          rts

0001290a <builtIn_isMoving>:

builtIn(isMoving)
{
   1290a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1290c:	          movea.l 16(sp),a0
   12910:	          move.l 24(a0),d0
   12914:	          move.l d0,-(sp)
   12916:	          pea 7 <_start+0x7>
   1291a:	          move.l sp,d0
   1291c:	          addq.l #8,d0
   1291e:	          move.l d0,-(sp)
   12920:	          jsr 14b60 <getValueType>
   12926:	          lea 12(sp),sp
   1292a:	          tst.w d0
   1292c:	      ,-- bne.s 12932 <builtIn_isMoving+0x28>
   1292e:	      |   moveq #1,d0
   12930:	,-----|-- bra.s 12992 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   12932:	|     '-> moveq #24,d0
   12934:	|         add.l 16(sp),d0
   12938:	|         move.l d0,-(sp)
   1293a:	|         jsr 154e4 <trimStack>
   12940:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12942:	|         move.l (sp),d0
   12944:	|         move.l d0,-(sp)
   12946:	|         jsr a906 <findPerson>
   1294c:	|         addq.l #4,sp
   1294e:	|         move.l d0,4(sp)
	if (thisPerson)
   12952:	|  ,----- beq.s 12978 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12954:	|  |      movea.l 4(sp),a0
   12958:	|  |      move.w 64(a0),d0
   1295c:	|  |      movea.w d0,a0
   1295e:	|  |      moveq #28,d0
   12960:	|  |      add.l 16(sp),d0
   12964:	|  |      move.l a0,-(sp)
   12966:	|  |      pea 1 <_start+0x1>
   1296a:	|  |      move.l d0,-(sp)
   1296c:	|  |      jsr 15452 <setVariable>
   12972:	|  |      lea 12(sp),sp
   12976:	|  |  ,-- bra.s 12990 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12978:	|  '--|-> moveq #28,d0
   1297a:	|     |   add.l 16(sp),d0
   1297e:	|     |   clr.l -(sp)
   12980:	|     |   pea 1 <_start+0x1>
   12984:	|     |   move.l d0,-(sp)
   12986:	|     |   jsr 15452 <setVariable>
   1298c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12990:	|     '-> moveq #2,d0
}
   12992:	'-------> addq.l #8,sp
   12994:	          rts

00012996 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12996:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1299a:	          movea.l 20(sp),a0
   1299e:	          move.l 24(a0),d0
   129a2:	          move.l d0,-(sp)
   129a4:	          pea 7 <_start+0x7>
   129a8:	          lea 8(sp),a0
   129ac:	          move.l a0,-(sp)
   129ae:	          jsr 14b60 <getValueType>
   129b4:	          lea 12(sp),sp
   129b8:	          tst.w d0
   129ba:	      ,-- bne.s 129c2 <builtIn_fetchEvent+0x2c>
   129bc:	      |   moveq #1,d0
   129be:	,-----|-- bra.w 12a56 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   129c2:	|     '-> moveq #24,d0
   129c4:	|         add.l 20(sp),d0
   129c8:	|         move.l d0,-(sp)
   129ca:	|         jsr 154e4 <trimStack>
   129d0:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   129d2:	|         movea.l 20(sp),a0
   129d6:	|         move.l 24(a0),d0
   129da:	|         move.l d0,-(sp)
   129dc:	|         pea 7 <_start+0x7>
   129e0:	|         moveq #12,d0
   129e2:	|         add.l sp,d0
   129e4:	|         move.l d0,-(sp)
   129e6:	|         jsr 14b60 <getValueType>
   129ec:	|         lea 12(sp),sp
   129f0:	|         tst.w d0
   129f2:	|     ,-- bne.s 129f8 <builtIn_fetchEvent+0x62>
   129f4:	|     |   moveq #1,d0
   129f6:	+-----|-- bra.s 12a56 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   129f8:	|     '-> moveq #24,d0
   129fa:	|         add.l 20(sp),d0
   129fe:	|         move.l d0,-(sp)
   12a00:	|         jsr 154e4 <trimStack>
   12a06:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12a08:	|         move.l (sp),d1
   12a0a:	|         move.l 4(sp),d0
   12a0e:	|         move.l d1,-(sp)
   12a10:	|         move.l d0,-(sp)
   12a12:	|         jsr d8a8 <getCombinationFunction>
   12a18:	|         addq.l #8,sp
   12a1a:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12a1e:	|  ,----- beq.s 12a3c <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12a20:	|  |      moveq #28,d0
   12a22:	|  |      add.l 20(sp),d0
   12a26:	|  |      move.l 8(sp),-(sp)
   12a2a:	|  |      pea 2 <_start+0x2>
   12a2e:	|  |      move.l d0,-(sp)
   12a30:	|  |      jsr 15452 <setVariable>
   12a36:	|  |      lea 12(sp),sp
   12a3a:	|  |  ,-- bra.s 12a54 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a3c:	|  '--|-> moveq #28,d0
   12a3e:	|     |   add.l 20(sp),d0
   12a42:	|     |   clr.l -(sp)
   12a44:	|     |   pea 1 <_start+0x1>
   12a48:	|     |   move.l d0,-(sp)
   12a4a:	|     |   jsr 15452 <setVariable>
   12a50:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12a54:	|     '-> moveq #2,d0
}
   12a56:	'-------> lea 12(sp),sp
   12a5a:	          rts

00012a5c <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12a5c:	       lea -24(sp),sp
   12a60:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12a62:	       movea.l 36(sp),a0
   12a66:	       move.l 24(a0),d0
   12a6a:	       move.l d0,-(sp)
   12a6c:	       jsr 15136 <getTextFromAnyVar>
   12a72:	       addq.l #4,sp
   12a74:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12a78:	       moveq #24,d0
   12a7a:	       add.l 36(sp),d0
   12a7e:	       move.l d0,-(sp)
   12a80:	       jsr 154e4 <trimStack>
   12a86:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12a88:	       move.l 24(sp),-(sp)
   12a8c:	       jsr 2fe <encodeFilename>
   12a92:	       addq.l #4,sp
   12a94:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12a98:	       move.l 24(sp),16(sp)
   12a9e:	       move.l 1cdda <SysBase>,d0
   12aa4:	       movea.l d0,a6
   12aa6:	       movea.l 16(sp),a1
   12aaa:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12aae:	       move.l 20(sp),-(sp)
   12ab2:	       jsr e660 <failSecurityCheck>
   12ab8:	       addq.l #4,sp
   12aba:	       tst.w d0
   12abc:	   ,-- beq.s 12ac2 <builtIn_deleteFile+0x66>
   12abe:	   |   moveq #1,d0
   12ac0:	,--|-- bra.s 12b10 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12ac2:	|  '-> move.l 20(sp),12(sp)
   12ac8:	|      move.l 1cde2 <DOSBase>,d0
   12ace:	|      movea.l d0,a6
   12ad0:	|      move.l 12(sp),d1
   12ad4:	|      jsr -72(a6)
   12ad8:	|      move.l d0,8(sp)
   12adc:	|      move.l 8(sp),d1
   12ae0:	|      moveq #28,d0
   12ae2:	|      add.l 36(sp),d0
   12ae6:	|      move.l d1,-(sp)
   12ae8:	|      pea 1 <_start+0x1>
   12aec:	|      move.l d0,-(sp)
   12aee:	|      jsr 15452 <setVariable>
   12af4:	|      lea 12(sp),sp
    FreeVec(nam);
   12af8:	|      move.l 20(sp),4(sp)
   12afe:	|      move.l 1cdda <SysBase>,d0
   12b04:	|      movea.l d0,a6
   12b06:	|      movea.l 4(sp),a1
   12b0a:	|      jsr -690(a6)

    return BR_CONTINUE;
   12b0e:	|      moveq #2,d0
}
   12b10:	'----> movea.l (sp)+,a6
   12b12:	       lea 24(sp),sp
   12b16:	       rts

00012b18 <builtIn_renameFile>:

builtIn(renameFile)
{
   12b18:	       lea -40(sp),sp
   12b1c:	       move.l a6,-(sp)
   12b1e:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12b20:	       movea.l 56(sp),a0
   12b24:	       move.l 24(a0),d0
   12b28:	       move.l d0,-(sp)
   12b2a:	       jsr 15136 <getTextFromAnyVar>
   12b30:	       addq.l #4,sp
   12b32:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12b36:	       move.l 44(sp),-(sp)
   12b3a:	       jsr 2fe <encodeFilename>
   12b40:	       addq.l #4,sp
   12b42:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12b46:	       moveq #24,d0
   12b48:	       add.l 56(sp),d0
   12b4c:	       move.l d0,-(sp)
   12b4e:	       jsr 154e4 <trimStack>
   12b54:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12b56:	       move.l 40(sp),-(sp)
   12b5a:	       jsr e660 <failSecurityCheck>
   12b60:	       addq.l #4,sp
   12b62:	       tst.w d0
   12b64:	   ,-- beq.s 12b6c <builtIn_renameFile+0x54>
   12b66:	   |   moveq #1,d0
   12b68:	,--|-- bra.w 12c52 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12b6c:	|  '-> move.l 44(sp),36(sp)
   12b72:	|      move.l 1cdda <SysBase>,d0
   12b78:	|      movea.l d0,a6
   12b7a:	|      movea.l 36(sp),a1
   12b7e:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12b82:	|      movea.l 56(sp),a0
   12b86:	|      move.l 24(a0),d0
   12b8a:	|      move.l d0,-(sp)
   12b8c:	|      jsr 15136 <getTextFromAnyVar>
   12b92:	|      addq.l #4,sp
   12b94:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12b98:	|      move.l 44(sp),-(sp)
   12b9c:	|      jsr 2fe <encodeFilename>
   12ba2:	|      addq.l #4,sp
   12ba4:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12ba8:	|      moveq #24,d0
   12baa:	|      add.l 56(sp),d0
   12bae:	|      move.l d0,-(sp)
   12bb0:	|      jsr 154e4 <trimStack>
   12bb6:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12bb8:	|      move.l 32(sp),-(sp)
   12bbc:	|      jsr e660 <failSecurityCheck>
   12bc2:	|      addq.l #4,sp
   12bc4:	|      tst.w d0
   12bc6:	|  ,-- beq.s 12bce <builtIn_renameFile+0xb6>
   12bc8:	|  |   moveq #1,d0
   12bca:	+--|-- bra.w 12c52 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12bce:	|  '-> move.l 44(sp),28(sp)
   12bd4:	|      move.l 1cdda <SysBase>,d0
   12bda:	|      movea.l d0,a6
   12bdc:	|      movea.l 28(sp),a1
   12be0:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12be4:	|      move.l 32(sp),24(sp)
   12bea:	|      move.l 40(sp),20(sp)
   12bf0:	|      move.l 1cde2 <DOSBase>,d0
   12bf6:	|      movea.l d0,a6
   12bf8:	|      move.l 24(sp),d1
   12bfc:	|      move.l 20(sp),d2
   12c00:	|      jsr -78(a6)
   12c04:	|      move.l d0,16(sp)
   12c08:	|      move.l 16(sp),d1
   12c0c:	|      moveq #28,d0
   12c0e:	|      add.l 56(sp),d0
   12c12:	|      move.l d1,-(sp)
   12c14:	|      pea 1 <_start+0x1>
   12c18:	|      move.l d0,-(sp)
   12c1a:	|      jsr 15452 <setVariable>
   12c20:	|      lea 12(sp),sp
	FreeVec(nam);
   12c24:	|      move.l 32(sp),12(sp)
   12c2a:	|      move.l 1cdda <SysBase>,d0
   12c30:	|      movea.l d0,a6
   12c32:	|      movea.l 12(sp),a1
   12c36:	|      jsr -690(a6)
	FreeVec(newnam);
   12c3a:	|      move.l 40(sp),8(sp)
   12c40:	|      move.l 1cdda <SysBase>,d0
   12c46:	|      movea.l d0,a6
   12c48:	|      movea.l 8(sp),a1
   12c4c:	|      jsr -690(a6)

	return BR_CONTINUE;
   12c50:	|      moveq #2,d0
}
   12c52:	'----> move.l (sp)+,d2
   12c54:	       movea.l (sp)+,a6
   12c56:	       lea 40(sp),sp
   12c5a:	       rts

00012c5c <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12c5c:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12c5e:	       movea.l 12(sp),a0
   12c62:	       move.l 24(a0),d0
   12c66:	       move.l d0,-(sp)
   12c68:	       pea 5 <_start+0x5>
   12c6c:	       move.l sp,d0
   12c6e:	       addq.l #8,d0
   12c70:	       move.l d0,-(sp)
   12c72:	       jsr 14b60 <getValueType>
   12c78:	       lea 12(sp),sp
   12c7c:	       tst.w d0
   12c7e:	   ,-- bne.s 12c84 <builtIn_cacheSound+0x28>
   12c80:	   |   moveq #1,d0
   12c82:	,--|-- bra.s 12cac <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12c84:	|  '-> moveq #24,d0
   12c86:	|      add.l 12(sp),d0
   12c8a:	|      move.l d0,-(sp)
   12c8c:	|      jsr 154e4 <trimStack>
   12c92:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12c94:	|      move.l (sp),d0
   12c96:	|      move.l d0,-(sp)
   12c98:	|      jsr d49e <cacheSound>
   12c9e:	|      addq.l #4,sp
   12ca0:	|      moveq #-1,d1
   12ca2:	|      cmp.l d0,d1
   12ca4:	|  ,-- bne.s 12caa <builtIn_cacheSound+0x4e>
   12ca6:	|  |   moveq #1,d0
   12ca8:	+--|-- bra.s 12cac <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12caa:	|  '-> moveq #2,d0
}
   12cac:	'----> addq.l #4,sp
   12cae:	       rts

00012cb0 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12cb0:	pea 1a044 <PutChar+0x1f62>
   12cb6:	jsr 17640 <KPrintF>
   12cbc:	addq.l #4,sp
	return BR_CONTINUE;
   12cbe:	moveq #2,d0
}
   12cc0:	rts

00012cc2 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12cc2:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12cc6:	          movea.l 20(sp),a0
   12cca:	          move.l 24(a0),d0
   12cce:	          move.l d0,-(sp)
   12cd0:	          pea 1 <_start+0x1>
   12cd4:	          moveq #12,d0
   12cd6:	          add.l sp,d0
   12cd8:	          move.l d0,-(sp)
   12cda:	          jsr 14b60 <getValueType>
   12ce0:	          lea 12(sp),sp
   12ce4:	          tst.w d0
   12ce6:	      ,-- bne.s 12cee <builtIn_setCharacterSpinSpeed+0x2c>
   12ce8:	      |   moveq #1,d0
   12cea:	,-----|-- bra.w 12d88 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12cee:	|     '-> moveq #24,d0
   12cf0:	|         add.l 20(sp),d0
   12cf4:	|         move.l d0,-(sp)
   12cf6:	|         jsr 154e4 <trimStack>
   12cfc:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12cfe:	|         movea.l 20(sp),a0
   12d02:	|         move.l 24(a0),d0
   12d06:	|         move.l d0,-(sp)
   12d08:	|         pea 7 <_start+0x7>
   12d0c:	|         lea 8(sp),a0
   12d10:	|         move.l a0,-(sp)
   12d12:	|         jsr 14b60 <getValueType>
   12d18:	|         lea 12(sp),sp
   12d1c:	|         tst.w d0
   12d1e:	|     ,-- bne.s 12d24 <builtIn_setCharacterSpinSpeed+0x62>
   12d20:	|     |   moveq #1,d0
   12d22:	+-----|-- bra.s 12d88 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12d24:	|     '-> moveq #24,d0
   12d26:	|         add.l 20(sp),d0
   12d2a:	|         move.l d0,-(sp)
   12d2c:	|         jsr 154e4 <trimStack>
   12d32:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12d34:	|         move.l (sp),d0
   12d36:	|         move.l d0,-(sp)
   12d38:	|         jsr a906 <findPerson>
   12d3e:	|         addq.l #4,sp
   12d40:	|         move.l d0,8(sp)

	if (thisPerson) {
   12d44:	|  ,----- beq.s 12d6e <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12d46:	|  |      move.l 4(sp),d0
   12d4a:	|  |      movea.l 8(sp),a0
   12d4e:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12d52:	|  |      moveq #28,d0
   12d54:	|  |      add.l 20(sp),d0
   12d58:	|  |      pea 1 <_start+0x1>
   12d5c:	|  |      pea 1 <_start+0x1>
   12d60:	|  |      move.l d0,-(sp)
   12d62:	|  |      jsr 15452 <setVariable>
   12d68:	|  |      lea 12(sp),sp
   12d6c:	|  |  ,-- bra.s 12d86 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12d6e:	|  '--|-> moveq #28,d0
   12d70:	|     |   add.l 20(sp),d0
   12d74:	|     |   clr.l -(sp)
   12d76:	|     |   pea 1 <_start+0x1>
   12d7a:	|     |   move.l d0,-(sp)
   12d7c:	|     |   jsr 15452 <setVariable>
   12d82:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12d86:	|     '-> moveq #2,d0
}
   12d88:	'-------> lea 12(sp),sp
   12d8c:	          rts

00012d8e <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12d8e:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d92:	          movea.l 20(sp),a0
   12d96:	          move.l 24(a0),d0
   12d9a:	          move.l d0,-(sp)
   12d9c:	          pea 1 <_start+0x1>
   12da0:	          moveq #12,d0
   12da2:	          add.l sp,d0
   12da4:	          move.l d0,-(sp)
   12da6:	          jsr 14b60 <getValueType>
   12dac:	          lea 12(sp),sp
   12db0:	          tst.w d0
   12db2:	      ,-- bne.s 12dba <builtIn_setCharacterAngleOffset+0x2c>
   12db4:	      |   moveq #1,d0
   12db6:	,-----|-- bra.w 12e54 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12dba:	|     '-> moveq #24,d0
   12dbc:	|         add.l 20(sp),d0
   12dc0:	|         move.l d0,-(sp)
   12dc2:	|         jsr 154e4 <trimStack>
   12dc8:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12dca:	|         movea.l 20(sp),a0
   12dce:	|         move.l 24(a0),d0
   12dd2:	|         move.l d0,-(sp)
   12dd4:	|         pea 7 <_start+0x7>
   12dd8:	|         lea 8(sp),a0
   12ddc:	|         move.l a0,-(sp)
   12dde:	|         jsr 14b60 <getValueType>
   12de4:	|         lea 12(sp),sp
   12de8:	|         tst.w d0
   12dea:	|     ,-- bne.s 12df0 <builtIn_setCharacterAngleOffset+0x62>
   12dec:	|     |   moveq #1,d0
   12dee:	+-----|-- bra.s 12e54 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12df0:	|     '-> moveq #24,d0
   12df2:	|         add.l 20(sp),d0
   12df6:	|         move.l d0,-(sp)
   12df8:	|         jsr 154e4 <trimStack>
   12dfe:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12e00:	|         move.l (sp),d0
   12e02:	|         move.l d0,-(sp)
   12e04:	|         jsr a906 <findPerson>
   12e0a:	|         addq.l #4,sp
   12e0c:	|         move.l d0,8(sp)

	if (thisPerson) {
   12e10:	|  ,----- beq.s 12e3a <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12e12:	|  |      move.l 4(sp),d0
   12e16:	|  |      movea.l 8(sp),a0
   12e1a:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12e1e:	|  |      moveq #28,d0
   12e20:	|  |      add.l 20(sp),d0
   12e24:	|  |      pea 1 <_start+0x1>
   12e28:	|  |      pea 1 <_start+0x1>
   12e2c:	|  |      move.l d0,-(sp)
   12e2e:	|  |      jsr 15452 <setVariable>
   12e34:	|  |      lea 12(sp),sp
   12e38:	|  |  ,-- bra.s 12e52 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12e3a:	|  '--|-> moveq #28,d0
   12e3c:	|     |   add.l 20(sp),d0
   12e40:	|     |   clr.l -(sp)
   12e42:	|     |   pea 1 <_start+0x1>
   12e46:	|     |   move.l d0,-(sp)
   12e48:	|     |   jsr 15452 <setVariable>
   12e4e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12e52:	|     '-> moveq #2,d0
}
   12e54:	'-------> lea 12(sp),sp
   12e58:	          rts

00012e5a <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12e5a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e5c:	       movea.l 12(sp),a0
   12e60:	       move.l 24(a0),d0
   12e64:	       move.l d0,-(sp)
   12e66:	       pea 1 <_start+0x1>
   12e6a:	       move.l sp,d0
   12e6c:	       addq.l #8,d0
   12e6e:	       move.l d0,-(sp)
   12e70:	       jsr 14b60 <getValueType>
   12e76:	       lea 12(sp),sp
   12e7a:	       tst.w d0
   12e7c:	   ,-- bne.s 12e82 <builtIn_transitionMode+0x28>
   12e7e:	   |   moveq #1,d0
   12e80:	,--|-- bra.s 12eb8 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12e82:	|  '-> move.l (sp),d0
   12e84:	|      move.l d0,d0
   12e86:	|      move.b d0,1ccb2 <fadeMode>
	trimStack (&fun -> stack);
   12e8c:	|      moveq #24,d0
   12e8e:	|      add.l 12(sp),d0
   12e92:	|      move.l d0,-(sp)
   12e94:	|      jsr 154e4 <trimStack>
   12e9a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12e9c:	|      moveq #28,d0
   12e9e:	|      add.l 12(sp),d0
   12ea2:	|      pea 1 <_start+0x1>
   12ea6:	|      pea 1 <_start+0x1>
   12eaa:	|      move.l d0,-(sp)
   12eac:	|      jsr 15452 <setVariable>
   12eb2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12eb6:	|      moveq #2,d0
}
   12eb8:	'----> addq.l #4,sp
   12eba:	       rts

00012ebc <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12ebc:	moveq #24,d0
   12ebe:	add.l 8(sp),d0
   12ec2:	move.l d0,-(sp)
   12ec4:	jsr 154e4 <trimStack>
   12eca:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12ecc:	moveq #28,d0
   12ece:	add.l 8(sp),d0
   12ed2:	pea 1 <_start+0x1>
   12ed6:	pea 1 <_start+0x1>
   12eda:	move.l d0,-(sp)
   12edc:	jsr 15452 <setVariable>
   12ee2:	lea 12(sp),sp
	return BR_CONTINUE;
   12ee6:	moveq #2,d0
}
   12ee8:	rts

00012eea <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12eea:	pea 1a06e <PutChar+0x1f8c>
   12ef0:	jsr 17640 <KPrintF>
   12ef6:	addq.l #4,sp
	return BR_CONTINUE;
   12ef8:	moveq #2,d0
}
   12efa:	rts

00012efc <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12efc:	       lea -16(sp),sp
   12f00:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12f02:	       movea.l 28(sp),a0
   12f06:	       move.l 24(a0),d0
   12f0a:	       move.l d0,-(sp)
   12f0c:	       jsr 15136 <getTextFromAnyVar>
   12f12:	       addq.l #4,sp
   12f14:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12f18:	   ,-- bne.s 12f20 <builtIn_saveCustomData+0x24>
   12f1a:	   |   moveq #1,d0
   12f1c:	,--|-- bra.w 12fd2 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12f20:	|  '-> move.l 16(sp),-(sp)
   12f24:	|      jsr 2fe <encodeFilename>
   12f2a:	|      addq.l #4,sp
   12f2c:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12f30:	|      move.l 16(sp),8(sp)
   12f36:	|      move.l 1cdda <SysBase>,d0
   12f3c:	|      movea.l d0,a6
   12f3e:	|      movea.l 8(sp),a1
   12f42:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12f46:	|      move.l 12(sp),-(sp)
   12f4a:	|      jsr e660 <failSecurityCheck>
   12f50:	|      addq.l #4,sp
   12f52:	|      tst.w d0
   12f54:	|  ,-- beq.s 12f5a <builtIn_saveCustomData+0x5e>
   12f56:	|  |   moveq #1,d0
   12f58:	+--|-- bra.s 12fd2 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12f5a:	|  '-> moveq #24,d0
   12f5c:	|      add.l 28(sp),d0
   12f60:	|      move.l d0,-(sp)
   12f62:	|      jsr 154e4 <trimStack>
   12f68:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12f6a:	|      movea.l 28(sp),a0
   12f6e:	|      movea.l 24(a0),a0
   12f72:	|      move.l (a0),d0
   12f74:	|      moveq #6,d1
   12f76:	|      cmp.l d0,d1
   12f78:	|  ,-- beq.s 12f8c <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12f7a:	|  |   pea 1a09b <PutChar+0x1fb9>
   12f80:	|  |   jsr 17640 <KPrintF>
   12f86:	|  |   addq.l #4,sp
		return BR_ERROR;
   12f88:	|  |   moveq #1,d0
   12f8a:	+--|-- bra.s 12fd2 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12f8c:	|  '-> movea.l 28(sp),a0
   12f90:	|      move.l 24(a0),d0
   12f94:	|      move.l d0,-(sp)
   12f96:	|      move.l 16(sp),-(sp)
   12f9a:	|      jsr e2b0 <stackToFile>
   12fa0:	|      addq.l #8,sp
   12fa2:	|      tst.w d0
   12fa4:	|  ,-- bne.s 12faa <builtIn_saveCustomData+0xae>
   12fa6:	|  |   moveq #1,d0
   12fa8:	+--|-- bra.s 12fd2 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12faa:	|  '-> moveq #24,d0
   12fac:	|      add.l 28(sp),d0
   12fb0:	|      move.l d0,-(sp)
   12fb2:	|      jsr 154e4 <trimStack>
   12fb8:	|      addq.l #4,sp
	FreeVec(fileName);
   12fba:	|      move.l 12(sp),4(sp)
   12fc0:	|      move.l 1cdda <SysBase>,d0
   12fc6:	|      movea.l d0,a6
   12fc8:	|      movea.l 4(sp),a1
   12fcc:	|      jsr -690(a6)
	return BR_CONTINUE;
   12fd0:	|      moveq #2,d0
}
   12fd2:	'----> movea.l (sp)+,a6
   12fd4:	       lea 16(sp),sp
   12fd8:	       rts

00012fda <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12fda:	       lea -28(sp),sp
   12fde:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12fe0:	       movea.l 40(sp),a0
   12fe4:	       move.l 24(a0),d0
   12fe8:	       move.l d0,-(sp)
   12fea:	       jsr 15136 <getTextFromAnyVar>
   12ff0:	       addq.l #4,sp
   12ff2:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12ff6:	   ,-- bne.s 12ffe <builtIn_loadCustomData+0x24>
   12ff8:	   |   moveq #1,d0
   12ffa:	,--|-- bra.w 130fa <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12ffe:	|  '-> move.l 28(sp),-(sp)
   13002:	|      jsr 2fe <encodeFilename>
   13008:	|      addq.l #4,sp
   1300a:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   1300e:	|      move.l 28(sp),20(sp)
   13014:	|      move.l 1cdda <SysBase>,d0
   1301a:	|      movea.l d0,a6
   1301c:	|      movea.l 20(sp),a1
   13020:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   13024:	|      move.l 24(sp),-(sp)
   13028:	|      jsr e660 <failSecurityCheck>
   1302e:	|      addq.l #4,sp
   13030:	|      tst.w d0
   13032:	|  ,-- beq.s 1303a <builtIn_loadCustomData+0x60>
   13034:	|  |   moveq #1,d0
   13036:	+--|-- bra.w 130fa <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   1303a:	|  '-> moveq #24,d0
   1303c:	|      add.l 40(sp),d0
   13040:	|      move.l d0,-(sp)
   13042:	|      jsr 154e4 <trimStack>
   13048:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   1304a:	|      moveq #28,d0
   1304c:	|      add.l 40(sp),d0
   13050:	|      move.l d0,-(sp)
   13052:	|      jsr 14dae <unlinkVar>
   13058:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   1305a:	|      movea.l 40(sp),a0
   1305e:	|      moveq #6,d0
   13060:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13064:	|      moveq #12,d0
   13066:	|      move.l d0,16(sp)
   1306a:	|      clr.l 12(sp)
   1306e:	|      move.l 1cdda <SysBase>,d0
   13074:	|      movea.l d0,a6
   13076:	|      move.l 16(sp),d0
   1307a:	|      move.l 12(sp),d1
   1307e:	|      jsr -684(a6)
   13082:	|      move.l d0,8(sp)
   13086:	|      move.l 8(sp),d0
   1308a:	|      movea.l 40(sp),a0
   1308e:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   13092:	|      movea.l 40(sp),a0
   13096:	|      move.l 32(a0),d0
   1309a:	|  ,-- bne.s 130a0 <builtIn_loadCustomData+0xc6>
   1309c:	|  |   moveq #1,d0
   1309e:	+--|-- bra.s 130fa <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   130a0:	|  '-> movea.l 40(sp),a0
   130a4:	|      movea.l 32(a0),a0
   130a8:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   130aa:	|      movea.l 40(sp),a0
   130ae:	|      movea.l 32(a0),a0
   130b2:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   130b6:	|      movea.l 40(sp),a0
   130ba:	|      movea.l 32(a0),a0
   130be:	|      moveq #1,d0
   130c0:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   130c4:	|      movea.l 40(sp),a0
   130c8:	|      move.l 32(a0),d0
   130cc:	|      move.l d0,-(sp)
   130ce:	|      move.l 28(sp),-(sp)
   130d2:	|      jsr dcea <fileToStack>
   130d8:	|      addq.l #8,sp
   130da:	|      tst.w d0
   130dc:	|  ,-- bne.s 130e2 <builtIn_loadCustomData+0x108>
   130de:	|  |   moveq #1,d0
   130e0:	+--|-- bra.s 130fa <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   130e2:	|  '-> move.l 24(sp),4(sp)
   130e8:	|      move.l 1cdda <SysBase>,d0
   130ee:	|      movea.l d0,a6
   130f0:	|      movea.l 4(sp),a1
   130f4:	|      jsr -690(a6)
	return BR_CONTINUE;
   130f8:	|      moveq #2,d0
}
   130fa:	'----> movea.l (sp)+,a6
   130fc:	       lea 28(sp),sp
   13100:	       rts

00013102 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   13102:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13104:	       movea.l 12(sp),a0
   13108:	       move.l 24(a0),d0
   1310c:	       move.l d0,-(sp)
   1310e:	       pea 1 <_start+0x1>
   13112:	       move.l sp,d0
   13114:	       addq.l #8,d0
   13116:	       move.l d0,-(sp)
   13118:	       jsr 14b60 <getValueType>
   1311e:	       lea 12(sp),sp
   13122:	       tst.w d0
   13124:	   ,-- bne.s 1312a <builtIn_setCustomEncoding+0x28>
   13126:	   |   moveq #1,d0
   13128:	,--|-- bra.s 13160 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   1312a:	|  '-> move.l (sp),d0
   1312c:	|      move.l d0,d0
   1312e:	|      move.w d0,1ce8e <saveEncoding>
	trimStack (&fun -> stack);
   13134:	|      moveq #24,d0
   13136:	|      add.l 12(sp),d0
   1313a:	|      move.l d0,-(sp)
   1313c:	|      jsr 154e4 <trimStack>
   13142:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13144:	|      moveq #28,d0
   13146:	|      add.l 12(sp),d0
   1314a:	|      pea 1 <_start+0x1>
   1314e:	|      pea 1 <_start+0x1>
   13152:	|      move.l d0,-(sp)
   13154:	|      jsr 15452 <setVariable>
   1315a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1315e:	|      moveq #2,d0
}
   13160:	'----> addq.l #4,sp
   13162:	       rts

00013164 <builtIn_freeSound>:

builtIn(freeSound)
{
   13164:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   13166:	       movea.l 12(sp),a0
   1316a:	       move.l 24(a0),d0
   1316e:	       move.l d0,-(sp)
   13170:	       pea 5 <_start+0x5>
   13174:	       move.l sp,d0
   13176:	       addq.l #8,d0
   13178:	       move.l d0,-(sp)
   1317a:	       jsr 14b60 <getValueType>
   13180:	       lea 12(sp),sp
   13184:	       tst.w d0
   13186:	   ,-- bne.s 1318c <builtIn_freeSound+0x28>
   13188:	   |   moveq #1,d0
   1318a:	,--|-- bra.s 131aa <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   1318c:	|  '-> moveq #24,d0
   1318e:	|      add.l 12(sp),d0
   13192:	|      move.l d0,-(sp)
   13194:	|      jsr 154e4 <trimStack>
   1319a:	|      addq.l #4,sp
	huntKillFreeSound (v);
   1319c:	|      move.l (sp),d0
   1319e:	|      move.l d0,-(sp)
   131a0:	|      jsr d4a2 <huntKillFreeSound>
   131a6:	|      addq.l #4,sp
	return BR_CONTINUE;
   131a8:	|      moveq #2,d0
}
   131aa:	'----> addq.l #4,sp
   131ac:	       rts

000131ae <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   131ae:	       lea -12(sp),sp
   131b2:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   131b4:	       movea.l 24(sp),a0
   131b8:	       move.l 24(a0),d0
   131bc:	       move.l d0,-(sp)
   131be:	       pea 1 <_start+0x1>
   131c2:	       moveq #16,d0
   131c4:	       add.l sp,d0
   131c6:	       move.l d0,-(sp)
   131c8:	       jsr 14b60 <getValueType>
   131ce:	       lea 12(sp),sp
   131d2:	       tst.w d0
   131d4:	   ,-- bne.s 131dc <builtIn_parallaxAdd+0x2e>
   131d6:	   |   moveq #1,d0
   131d8:	,--|-- bra.w 132b0 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   131dc:	|  '-> moveq #24,d0
   131de:	|      add.l 24(sp),d0
   131e2:	|      move.l d0,-(sp)
   131e4:	|      jsr 154e4 <trimStack>
   131ea:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   131ec:	|      movea.l 24(sp),a0
   131f0:	|      move.l 24(a0),d0
   131f4:	|      move.l d0,-(sp)
   131f6:	|      pea 1 <_start+0x1>
   131fa:	|      moveq #20,d0
   131fc:	|      add.l sp,d0
   131fe:	|      move.l d0,-(sp)
   13200:	|      jsr 14b60 <getValueType>
   13206:	|      lea 12(sp),sp
   1320a:	|      tst.w d0
   1320c:	|  ,-- bne.s 13214 <builtIn_parallaxAdd+0x66>
   1320e:	|  |   moveq #1,d0
   13210:	+--|-- bra.w 132b0 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13214:	|  '-> moveq #24,d0
   13216:	|      add.l 24(sp),d0
   1321a:	|      move.l d0,-(sp)
   1321c:	|      jsr 154e4 <trimStack>
   13222:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   13224:	|      movea.l 24(sp),a0
   13228:	|      move.l 24(a0),d0
   1322c:	|      move.l d0,-(sp)
   1322e:	|      pea 5 <_start+0x5>
   13232:	|      lea 12(sp),a0
   13236:	|      move.l a0,-(sp)
   13238:	|      jsr 14b60 <getValueType>
   1323e:	|      lea 12(sp),sp
   13242:	|      tst.w d0
   13244:	|  ,-- bne.s 1324a <builtIn_parallaxAdd+0x9c>
   13246:	|  |   moveq #1,d0
   13248:	+--|-- bra.s 132b0 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1324a:	|  '-> moveq #24,d0
   1324c:	|      add.l 24(sp),d0
   13250:	|      move.l d0,-(sp)
   13252:	|      jsr 154e4 <trimStack>
   13258:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   1325a:	|      move.l 8(sp),d0
   1325e:	|      move.l d0,d0
   13260:	|      moveq #0,d2
   13262:	|      move.w d0,d2
   13264:	|      move.l 12(sp),d0
   13268:	|      move.l d0,d0
   1326a:	|      moveq #0,d1
   1326c:	|      move.w d0,d1
   1326e:	|      move.l 4(sp),d0
   13272:	|      move.l d0,d0
   13274:	|      move.w d0,d0
   13276:	|      andi.l #65535,d0
   1327c:	|      move.l d2,-(sp)
   1327e:	|      move.l d1,-(sp)
   13280:	|      move.l d0,-(sp)
   13282:	|      jsr d6c8 <loadParallax>
   13288:	|      lea 12(sp),sp
   1328c:	|      tst.w d0
   1328e:	|  ,-- bne.s 13294 <builtIn_parallaxAdd+0xe6>
   13290:	|  |   moveq #1,d0
   13292:	+--|-- bra.s 132b0 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   13294:	|  '-> moveq #28,d0
   13296:	|      add.l 24(sp),d0
   1329a:	|      pea 1 <_start+0x1>
   1329e:	|      pea 1 <_start+0x1>
   132a2:	|      move.l d0,-(sp)
   132a4:	|      jsr 15452 <setVariable>
   132aa:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   132ae:	|      moveq #2,d0
}
   132b0:	'----> move.l (sp)+,d2
   132b2:	       lea 12(sp),sp
   132b6:	       rts

000132b8 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   132b8:	jsr d600 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   132be:	moveq #28,d0
   132c0:	add.l 8(sp),d0
   132c4:	pea 1 <_start+0x1>
   132c8:	pea 1 <_start+0x1>
   132cc:	move.l d0,-(sp)
   132ce:	jsr 15452 <setVariable>
   132d4:	lea 12(sp),sp
	return BR_CONTINUE;
   132d8:	moveq #2,d0
}
   132da:	rts

000132dc <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   132dc:	pea 1a0b9 <PutChar+0x1fd7>
   132e2:	jsr 17640 <KPrintF>
   132e8:	addq.l #4,sp

	return BR_CONTINUE;
   132ea:	moveq #2,d0
}
   132ec:	rts

000132ee <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   132ee:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   132f0:	             movea.l 16(sp),a0
   132f4:	             movea.l 24(a0),a0
   132f8:	             move.l (a0),d0
   132fa:	             moveq #1,d1
   132fc:	             cmp.l d0,d1
   132fe:	      ,----- beq.s 13346 <builtIn_makeFastArray+0x58>
   13300:	      |      moveq #6,d1
   13302:	      |      cmp.l d0,d1
   13304:	,-----|----- bne.s 13384 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   13306:	|     |      movea.l 16(sp),a0
   1330a:	|     |      movea.l 24(a0),a0
   1330e:	|     |      move.l 4(a0),d1
   13312:	|     |      moveq #28,d0
   13314:	|     |      add.l 16(sp),d0
   13318:	|     |      move.l d1,-(sp)
   1331a:	|     |      move.l d0,-(sp)
   1331c:	|     |      jsr 14c12 <makeFastArrayFromStack>
   13322:	|     |      addq.l #8,sp
   13324:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   13328:	|     |      moveq #24,d0
   1332a:	|     |      add.l 16(sp),d0
   1332e:	|     |      move.l d0,-(sp)
   13330:	|     |      jsr 154e4 <trimStack>
   13336:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   13338:	|     |      tst.w 6(sp)
   1333c:	|     |  ,-- beq.s 13342 <builtIn_makeFastArray+0x54>
   1333e:	|     |  |   moveq #2,d0
   13340:	|  ,--|--|-- bra.s 13396 <builtIn_makeFastArray+0xa8>
   13342:	|  |  |  '-> moveq #1,d0
   13344:	|  +--|----- bra.s 13396 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   13346:	|  |  '----> movea.l 16(sp),a0
   1334a:	|  |         movea.l 24(a0),a0
   1334e:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   13354:	|  |         moveq #24,d0
   13356:	|  |         add.l 16(sp),d0
   1335a:	|  |         move.l d0,-(sp)
   1335c:	|  |         jsr 154e4 <trimStack>
   13362:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   13364:	|  |         moveq #28,d0
   13366:	|  |         add.l 16(sp),d0
   1336a:	|  |         move.l 2(sp),-(sp)
   1336e:	|  |         move.l d0,-(sp)
   13370:	|  |         jsr 14c7c <makeFastArraySize>
   13376:	|  |         addq.l #8,sp
   13378:	|  |         tst.w d0
   1337a:	|  |     ,-- beq.s 13380 <builtIn_makeFastArray+0x92>
   1337c:	|  |     |   moveq #2,d0
   1337e:	|  +-----|-- bra.s 13396 <builtIn_makeFastArray+0xa8>
   13380:	|  |     '-> moveq #1,d0
   13382:	|  +-------- bra.s 13396 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   13384:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   13386:	   |         pea 1a0e2 <PutChar+0x2000>
   1338c:	   |         jsr 17640 <KPrintF>
   13392:	   |         addq.l #4,sp
	return BR_ERROR;
   13394:	   |         moveq #1,d0
}
   13396:	   '-------> addq.l #8,sp
   13398:	             rts

0001339a <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   1339a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1339c:	          movea.l 16(sp),a0
   133a0:	          move.l 24(a0),d0
   133a4:	          move.l d0,-(sp)
   133a6:	          pea 7 <_start+0x7>
   133aa:	          move.l sp,d0
   133ac:	          addq.l #8,d0
   133ae:	          move.l d0,-(sp)
   133b0:	          jsr 14b60 <getValueType>
   133b6:	          lea 12(sp),sp
   133ba:	          tst.w d0
   133bc:	      ,-- bne.s 133c2 <builtIn_getCharacterScale+0x28>
   133be:	      |   moveq #1,d0
   133c0:	,-----|-- bra.s 1343c <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   133c2:	|     '-> moveq #24,d0
   133c4:	|         add.l 16(sp),d0
   133c8:	|         move.l d0,-(sp)
   133ca:	|         jsr 154e4 <trimStack>
   133d0:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   133d2:	|         move.l (sp),d0
   133d4:	|         move.l d0,-(sp)
   133d6:	|         jsr a906 <findPerson>
   133dc:	|         addq.l #4,sp
   133de:	|         move.l d0,4(sp)
	if (pers) {
   133e2:	|  ,----- beq.s 13422 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   133e4:	|  |      movea.l 4(sp),a0
   133e8:	|  |      move.l 32(a0),d0
   133ec:	|  |      move.l #1120403456,-(sp)
   133f2:	|  |      move.l d0,-(sp)
   133f4:	|  |      jsr 17b24 <__mulsf3>
   133fa:	|  |      addq.l #8,sp
   133fc:	|  |      move.l d0,-(sp)
   133fe:	|  |      jsr 17a0a <__fixsfsi>
   13404:	|  |      addq.l #4,sp
   13406:	|  |      move.l d0,d1
   13408:	|  |      moveq #28,d0
   1340a:	|  |      add.l 16(sp),d0
   1340e:	|  |      move.l d1,-(sp)
   13410:	|  |      pea 1 <_start+0x1>
   13414:	|  |      move.l d0,-(sp)
   13416:	|  |      jsr 15452 <setVariable>
   1341c:	|  |      lea 12(sp),sp
   13420:	|  |  ,-- bra.s 1343a <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13422:	|  '--|-> moveq #28,d0
   13424:	|     |   add.l 16(sp),d0
   13428:	|     |   clr.l -(sp)
   1342a:	|     |   pea 1 <_start+0x1>
   1342e:	|     |   move.l d0,-(sp)
   13430:	|     |   jsr 15452 <setVariable>
   13436:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1343a:	|     '-> moveq #2,d0
}
   1343c:	'-------> addq.l #8,sp
   1343e:	          rts

00013440 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   13440:	move.l 1ceb2 <gameSettings>,d0
   13446:	move.l d0,d1
   13448:	moveq #28,d0
   1344a:	add.l 8(sp),d0
   1344e:	move.l d1,-(sp)
   13450:	pea 1 <_start+0x1>
   13454:	move.l d0,-(sp)
   13456:	jsr 15452 <setVariable>
   1345c:	lea 12(sp),sp
	return BR_CONTINUE;
   13460:	moveq #2,d0
}
   13462:	rts

00013464 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13464:	moveq #24,d0
   13466:	add.l 8(sp),d0
   1346a:	move.l d0,-(sp)
   1346c:	jsr 154e4 <trimStack>
   13472:	addq.l #4,sp
	trimStack (&fun -> stack);
   13474:	moveq #24,d0
   13476:	add.l 8(sp),d0
   1347a:	move.l d0,-(sp)
   1347c:	jsr 154e4 <trimStack>
   13482:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   13484:	moveq #28,d0
   13486:	add.l 8(sp),d0
   1348a:	clr.l -(sp)
   1348c:	pea 1 <_start+0x1>
   13490:	move.l d0,-(sp)
   13492:	jsr 15452 <setVariable>
   13498:	lea 12(sp),sp

	return BR_CONTINUE;
   1349c:	moveq #2,d0

}
   1349e:	rts

000134a0 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   134a0:	move.l 1c75c <lastFramesPerSecond>,d1
   134a6:	moveq #28,d0
   134a8:	add.l 8(sp),d0
   134ac:	move.l d1,-(sp)
   134ae:	pea 1 <_start+0x1>
   134b2:	move.l d0,-(sp)
   134b4:	jsr 15452 <setVariable>
   134ba:	lea 12(sp),sp
	return BR_CONTINUE;
   134be:	moveq #2,d0
}
   134c0:	rts

000134c2 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   134c2:	moveq #2,d0
}
   134c4:	rts

000134c6 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   134c6:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   134ca:	          movea.l 60(sp),a0
   134ce:	          move.l 24(a0),d0
   134d2:	          move.l d0,-(sp)
   134d4:	          pea 1 <_start+0x1>
   134d8:	          pea 1ccee <thumbHeight>
   134de:	          jsr 14b60 <getValueType>
   134e4:	          lea 12(sp),sp
   134e8:	          tst.w d0
   134ea:	      ,-- bne.s 134f2 <builtIn_setThumbnailSize+0x2c>
   134ec:	      |   moveq #1,d0
   134ee:	,-----|-- bra.w 135ae <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   134f2:	|     '-> moveq #24,d0
   134f4:	|         add.l 60(sp),d0
   134f8:	|         move.l d0,-(sp)
   134fa:	|         jsr 154e4 <trimStack>
   13500:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13502:	|         movea.l 60(sp),a0
   13506:	|         move.l 24(a0),d0
   1350a:	|         move.l d0,-(sp)
   1350c:	|         pea 1 <_start+0x1>
   13510:	|         pea 1ccea <thumbWidth>
   13516:	|         jsr 14b60 <getValueType>
   1351c:	|         lea 12(sp),sp
   13520:	|         tst.w d0
   13522:	|     ,-- bne.s 1352a <builtIn_setThumbnailSize+0x64>
   13524:	|     |   moveq #1,d0
   13526:	+-----|-- bra.w 135ae <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1352a:	|     '-> moveq #24,d0
   1352c:	|         add.l 60(sp),d0
   13530:	|         move.l d0,-(sp)
   13532:	|         jsr 154e4 <trimStack>
   13538:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   1353a:	|         move.l 1ccea <thumbWidth>,d0
   13540:	|     ,-- bmi.s 1356e <builtIn_setThumbnailSize+0xa8>
   13542:	|     |   move.l 1ccee <thumbHeight>,d0
   13548:	|     +-- bmi.s 1356e <builtIn_setThumbnailSize+0xa8>
   1354a:	|     |   move.l 1ccea <thumbWidth>,d0
   13550:	|     |   move.l d0,d1
   13552:	|     |   move.l 1cd2e <winWidth>,d0
   13558:	|     |   cmp.l d1,d0
   1355a:	|     +-- bcs.s 1356e <builtIn_setThumbnailSize+0xa8>
   1355c:	|     |   move.l 1ccee <thumbHeight>,d0
   13562:	|     |   move.l d0,d1
   13564:	|     |   move.l 1cd32 <winHeight>,d0
   1356a:	|     |   cmp.l d1,d0
   1356c:	|  ,--|-- bcc.s 135ac <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   1356e:	|  |  '-> move.l 1ccee <thumbHeight>,d1
   13574:	|  |      move.l 1ccea <thumbWidth>,d0
   1357a:	|  |      move.l d1,-(sp)
   1357c:	|  |      move.l d0,-(sp)
   1357e:	|  |      pea 1a109 <PutChar+0x2027>
   13584:	|  |      lea 14(sp),a0
   13588:	|  |      move.l a0,-(sp)
   1358a:	|  |      jsr 1436a <sprintf>
   13590:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   13594:	|  |      lea 2(sp),a0
   13598:	|  |      move.l a0,-(sp)
   1359a:	|  |      pea 1a111 <PutChar+0x202f>
   135a0:	|  |      jsr 17640 <KPrintF>
   135a6:	|  |      addq.l #8,sp
		return BR_ERROR;
   135a8:	|  |      moveq #1,d0
   135aa:	+--|----- bra.s 135ae <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   135ac:	|  '----> moveq #2,d0
}
   135ae:	'-------> lea 52(sp),sp
   135b2:	          rts

000135b4 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   135b4:	       lea -12(sp),sp
   135b8:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   135ba:	       movea.l 24(sp),a0
   135be:	       move.l 24(a0),d0
   135c2:	       move.l d0,-(sp)
   135c4:	       pea 1 <_start+0x1>
   135c8:	       lea 12(sp),a0
   135cc:	       move.l a0,-(sp)
   135ce:	       jsr 14b60 <getValueType>
   135d4:	       lea 12(sp),sp
   135d8:	       tst.w d0
   135da:	   ,-- bne.s 135e2 <builtIn_hasFlag+0x2e>
   135dc:	   |   moveq #1,d0
   135de:	,--|-- bra.w 13672 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   135e2:	|  '-> moveq #24,d0
   135e4:	|      add.l 24(sp),d0
   135e8:	|      move.l d0,-(sp)
   135ea:	|      jsr 154e4 <trimStack>
   135f0:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   135f2:	|      movea.l 24(sp),a0
   135f6:	|      move.l 24(a0),d0
   135fa:	|      move.l d0,-(sp)
   135fc:	|      pea 7 <_start+0x7>
   13600:	|      moveq #16,d0
   13602:	|      add.l sp,d0
   13604:	|      move.l d0,-(sp)
   13606:	|      jsr 14b60 <getValueType>
   1360c:	|      lea 12(sp),sp
   13610:	|      tst.w d0
   13612:	|  ,-- bne.s 13618 <builtIn_hasFlag+0x64>
   13614:	|  |   moveq #1,d0
   13616:	+--|-- bra.s 13672 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13618:	|  '-> moveq #24,d0
   1361a:	|      add.l 24(sp),d0
   1361e:	|      move.l d0,-(sp)
   13620:	|      jsr 154e4 <trimStack>
   13626:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13628:	|      move.l 8(sp),d0
   1362c:	|      move.l d0,-(sp)
   1362e:	|      jsr d874 <findObjectType>
   13634:	|      addq.l #4,sp
   13636:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   1363a:	|  ,-- bne.s 13640 <builtIn_hasFlag+0x8c>
   1363c:	|  |   moveq #1,d0
   1363e:	+--|-- bra.s 13672 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   13640:	|  '-> movea.l 12(sp),a0
   13644:	|      move.w 36(a0),d0
   13648:	|      moveq #0,d2
   1364a:	|      move.w d0,d2
   1364c:	|      move.l 4(sp),d1
   13650:	|      moveq #1,d0
   13652:	|      lsl.l d1,d0
   13654:	|      move.l d2,d1
   13656:	|      and.l d0,d1
   13658:	|      moveq #28,d0
   1365a:	|      add.l 24(sp),d0
   1365e:	|      move.l d1,-(sp)
   13660:	|      pea 1 <_start+0x1>
   13664:	|      move.l d0,-(sp)
   13666:	|      jsr 15452 <setVariable>
   1366c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13670:	|      moveq #2,d0
}
   13672:	'----> move.l (sp)+,d2
   13674:	       lea 12(sp),sp
   13678:	       rts

0001367a <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   1367a:	       jsr d862 <snapshot>
   13680:	       tst.w d0
   13682:	,----- beq.s 13688 <builtIn_snapshotGrab+0xe>
   13684:	|      moveq #2,d0
   13686:	|  ,-- bra.s 1368a <builtIn_snapshotGrab+0x10>
   13688:	'--|-> moveq #1,d0
}
   1368a:	   '-> rts

0001368c <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   1368c:	jsr d70e <nosnapshot>
	return BR_CONTINUE;
   13692:	moveq #2,d0
}
   13694:	rts

00013696 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13696:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13698:	move.w 1c634 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   136a0:	movea.l 12(sp),a0
   136a4:	move.l 24(a0),d0
   136a8:	move.l d0,-(sp)
   136aa:	jsr 150a0 <getBoolean>
   136b0:	addq.l #4,sp
   136b2:	move.w d0,1c634 <allowAnyFilename>
	trimStack (&fun -> stack);
   136b8:	moveq #24,d0
   136ba:	add.l 12(sp),d0
   136be:	move.l d0,-(sp)
   136c0:	jsr 154e4 <trimStack>
   136c6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   136c8:	movea.w 2(sp),a0
   136cc:	moveq #28,d0
   136ce:	add.l 12(sp),d0
   136d2:	move.l a0,-(sp)
   136d4:	pea 1 <_start+0x1>
   136d8:	move.l d0,-(sp)
   136da:	jsr 15452 <setVariable>
   136e0:	lea 12(sp),sp
	return BR_CONTINUE;
   136e4:	moveq #2,d0
}
   136e6:	addq.l #4,sp
   136e8:	rts

000136ea <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   136ea:	moveq #24,d0
   136ec:	add.l 8(sp),d0
   136f0:	move.l d0,-(sp)
   136f2:	jsr 154e4 <trimStack>
   136f8:	addq.l #4,sp
	trimStack (&fun -> stack);
   136fa:	moveq #24,d0
   136fc:	add.l 8(sp),d0
   13700:	move.l d0,-(sp)
   13702:	jsr 154e4 <trimStack>
   13708:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   1370a:	moveq #28,d0
   1370c:	add.l 8(sp),d0
   13710:	clr.l -(sp)
   13712:	pea 1 <_start+0x1>
   13716:	move.l d0,-(sp)
   13718:	jsr 15452 <setVariable>
   1371e:	lea 12(sp),sp

	return BR_CONTINUE;
   13722:	moveq #2,d0
}
   13724:	rts

00013726 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   13726:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13728:	movea.l 12(sp),a0
   1372c:	move.l 24(a0),d0
   13730:	move.l d0,-(sp)
   13732:	jsr 15136 <getTextFromAnyVar>
   13738:	addq.l #4,sp
   1373a:	move.l d0,(sp)
	trimStack (&fun -> stack);
   1373c:	moveq #24,d0
   1373e:	add.l 12(sp),d0
   13742:	move.l d0,-(sp)
   13744:	jsr 154e4 <trimStack>
   1374a:	addq.l #4,sp
	KPrintF (mess);
   1374c:	move.l (sp),-(sp)
   1374e:	jsr 17640 <KPrintF>
   13754:	addq.l #4,sp
	return BR_ERROR;
   13756:	moveq #1,d0
}
   13758:	addq.l #4,sp
   1375a:	rts

0001375c <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1375c:	moveq #24,d0
   1375e:	add.l 8(sp),d0
   13762:	move.l d0,-(sp)
   13764:	jsr 154e4 <trimStack>
   1376a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1376c:	moveq #24,d0
   1376e:	add.l 8(sp),d0
   13772:	move.l d0,-(sp)
   13774:	jsr 154e4 <trimStack>
   1377a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1377c:	moveq #24,d0
   1377e:	add.l 8(sp),d0
   13782:	move.l d0,-(sp)
   13784:	jsr 154e4 <trimStack>
   1378a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1378c:	moveq #24,d0
   1378e:	add.l 8(sp),d0
   13792:	move.l d0,-(sp)
   13794:	jsr 154e4 <trimStack>
   1379a:	addq.l #4,sp

	return BR_CONTINUE;
   1379c:	moveq #2,d0
}
   1379e:	rts

000137a0 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   137a0:	moveq #24,d0
   137a2:	add.l 8(sp),d0
   137a6:	move.l d0,-(sp)
   137a8:	jsr 154e4 <trimStack>
   137ae:	addq.l #4,sp
	trimStack (&fun -> stack);
   137b0:	moveq #24,d0
   137b2:	add.l 8(sp),d0
   137b6:	move.l d0,-(sp)
   137b8:	jsr 154e4 <trimStack>
   137be:	addq.l #4,sp
	trimStack (&fun -> stack);
   137c0:	moveq #24,d0
   137c2:	add.l 8(sp),d0
   137c6:	move.l d0,-(sp)
   137c8:	jsr 154e4 <trimStack>
   137ce:	addq.l #4,sp

	return BR_CONTINUE;
   137d0:	moveq #2,d0

}
   137d2:	rts

000137d4 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   137d4:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   137d6:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   137dc:	sne d0
   137de:	neg.b d0
   137e0:	moveq #0,d1
   137e2:	move.b d0,d1
   137e4:	moveq #28,d0
   137e6:	add.l 12(sp),d0
   137ea:	move.l d1,-(sp)
   137ec:	pea 1 <_start+0x1>
   137f0:	move.l d0,-(sp)
   137f2:	jsr 15452 <setVariable>
   137f8:	lea 12(sp),sp
	return BR_CONTINUE;
   137fc:	moveq #2,d0
}
   137fe:	addq.l #4,sp
   13800:	rts

00013802 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13802:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13804:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   1380a:	pea 1a128 <PutChar+0x2046>
   13810:	jsr 17640 <KPrintF>
   13816:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13818:	tst.w 2(sp)
   1381c:	sne d0
   1381e:	neg.b d0
   13820:	moveq #0,d1
   13822:	move.b d0,d1
   13824:	moveq #28,d0
   13826:	add.l 12(sp),d0
   1382a:	move.l d1,-(sp)
   1382c:	pea 1 <_start+0x1>
   13830:	move.l d0,-(sp)
   13832:	jsr 15452 <setVariable>
   13838:	lea 12(sp),sp
	return BR_CONTINUE;
   1383c:	moveq #2,d0
}
   1383e:	addq.l #4,sp
   13840:	rts

00013842 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   13842:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   13846:	             move.l 104(sp),d0
   1384a:	             cmpi.l #166,d0
   13850:	,----------- bhi.w 13932 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   13854:	|            move.l 104(sp),d0
   13858:	|            add.l d0,d0
   1385a:	|            movea.l d0,a1
   1385c:	|            adda.l d0,a1
   1385e:	|            lea 1c77a <paramNum>,a0
   13864:	|            move.l (0,a1,a0.l),d0
   13868:	|            moveq #-1,d1
   1386a:	|            cmp.l d0,d1
   1386c:	|  ,-------- beq.w 138fa <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13870:	|  |         move.l 104(sp),d0
   13874:	|  |         add.l d0,d0
   13876:	|  |         movea.l d0,a1
   13878:	|  |         adda.l d0,a1
   1387a:	|  |         lea 1c77a <paramNum>,a0
   13880:	|  |         move.l (0,a1,a0.l),d0
   13884:	|  |         cmp.l 108(sp),d0
   13888:	|  +-------- beq.s 138fa <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   1388a:	|  |         move.l 104(sp),d0
   1388e:	|  |         add.l d0,d0
   13890:	|  |         movea.l d0,a1
   13892:	|  |         adda.l d0,a1
   13894:	|  |         lea 1c77a <paramNum>,a0
   1389a:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1389e:	|  |         moveq #1,d1
   138a0:	|  |         cmp.l d0,d1
   138a2:	|  |  ,----- bne.s 138ac <callBuiltIn+0x6a>
   138a4:	|  |  |      move.l #101871,d0
   138aa:	|  |  |  ,-- bra.s 138b2 <callBuiltIn+0x70>
   138ac:	|  |  '--|-> move.l #106846,d0
   138b2:	|  |     '-> move.l 104(sp),d1
   138b6:	|  |         add.l d1,d1
   138b8:	|  |         movea.l d1,a1
   138ba:	|  |         adda.l d1,a1
   138bc:	|  |         lea 1c77a <paramNum>,a0
   138c2:	|  |         move.l (0,a1,a0.l),d1
   138c6:	|  |         move.l d0,-(sp)
   138c8:	|  |         move.l d1,-(sp)
   138ca:	|  |         pea 1a160 <PutChar+0x207e>
   138d0:	|  |         lea 12(sp),a0
   138d4:	|  |         move.l a0,-(sp)
   138d6:	|  |         jsr 1436a <sprintf>
   138dc:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   138e0:	|  |         movea.l sp,a0
   138e2:	|  |         move.l a0,-(sp)
   138e4:	|  |         jsr b8 <copyString>
   138ea:	|  |         addq.l #4,sp
   138ec:	|  |         move.l d0,-(sp)
   138ee:	|  |         jsr 17640 <KPrintF>
   138f4:	|  |         addq.l #4,sp
				return BR_ERROR;
   138f6:	|  |         moveq #1,d0
   138f8:	|  |     ,-- bra.s 13942 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   138fa:	|  '-----|-> move.l 104(sp),d0
   138fe:	|        |   add.l d0,d0
   13900:	|        |   movea.l d0,a1
   13902:	|        |   adda.l d0,a1
   13904:	|        |   lea 1ca16 <builtInFunctionArray>,a0
   1390a:	|        |   move.l (0,a1,a0.l),d0
   1390e:	+--------|-- beq.s 13932 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13910:	|        |   move.l 104(sp),d0
   13914:	|        |   add.l d0,d0
   13916:	|        |   movea.l d0,a1
   13918:	|        |   adda.l d0,a1
   1391a:	|        |   lea 1ca16 <builtInFunctionArray>,a0
   13920:	|        |   movea.l (0,a1,a0.l),a0
   13924:	|        |   move.l 112(sp),-(sp)
   13928:	|        |   move.l 112(sp),-(sp)
   1392c:	|        |   jsr (a0)
   1392e:	|        |   addq.l #8,sp
   13930:	|        +-- bra.s 13942 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   13932:	'--------|-> pea 1a18b <PutChar+0x20a9>
   13938:	         |   jsr 17640 <KPrintF>
   1393e:	         |   addq.l #4,sp
	return BR_ERROR;
   13940:	         |   moveq #1,d0
}
   13942:	         '-> lea 100(sp),sp
   13946:	             rts

00013948 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13948:	          subq.l #8,sp
	int indexNum = -1;
   1394a:	          moveq #-1,d0
   1394c:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13950:	          clr.l (sp)
   13952:	   ,----- bra.s 13978 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13954:	,--|----> move.l 1ceaa <languageTable>,d1
   1395a:	|  |      move.l (sp),d0
   1395c:	|  |      add.l d0,d0
   1395e:	|  |      add.l d0,d0
   13960:	|  |      movea.l d1,a0
   13962:	|  |      adda.l d0,a0
   13964:	|  |      move.l (a0),d0
   13966:	|  |      move.l d0,d1
   13968:	|  |      move.l 1ceb2 <gameSettings>,d0
   1396e:	|  |      cmp.l d1,d0
   13970:	|  |  ,-- bne.s 13976 <getLanguageForFileB+0x2e>
   13972:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13976:	|  |  '-> addq.l #1,(sp)
   13978:	|  '----> move.l 1ceb6 <gameSettings+0x4>,d0
   1397e:	|         cmp.l (sp),d0
   13980:	'-------- bcc.s 13954 <getLanguageForFileB+0xc>
	}

	return indexNum;
   13982:	          move.l 4(sp),d0
}
   13986:	          addq.l #8,sp
   13988:	          rts

0001398a <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   1398a:	          lea -20(sp),sp
   1398e:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13990:	          move.l 28(sp),-(sp)
   13994:	          jsr 1404c <strlen>
   1399a:	          addq.l #4,sp
   1399c:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   139a0:	          moveq #4,d0
   139a2:	          cmp.l 12(sp),d0
   139a6:	      ,-- bge.s 139ca <getPrefsFilename+0x40>
   139a8:	      |   move.l 12(sp),d0
   139ac:	      |   subq.l #4,d0
   139ae:	      |   movea.l 28(sp),a0
   139b2:	      |   adda.l d0,a0
   139b4:	      |   move.b (a0),d0
   139b6:	      |   cmpi.b #46,d0
   139ba:	      +-- bne.s 139ca <getPrefsFilename+0x40>
		filename[n-4] = 0;
   139bc:	      |   move.l 12(sp),d0
   139c0:	      |   subq.l #4,d0
   139c2:	      |   movea.l 28(sp),a0
   139c6:	      |   adda.l d0,a0
   139c8:	      |   clr.b (a0)
	}

	char * f = filename;
   139ca:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   139d0:	          clr.l 20(sp)
   139d4:	   ,----- bra.s 139fc <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   139d6:	,--|----> move.l 20(sp),d0
   139da:	|  |      movea.l 28(sp),a0
   139de:	|  |      adda.l d0,a0
   139e0:	|  |      move.b (a0),d0
   139e2:	|  |      cmpi.b #47,d0
   139e6:	|  |  ,-- bne.s 139f8 <getPrefsFilename+0x6e>
   139e8:	|  |  |   move.l 20(sp),d0
   139ec:	|  |  |   addq.l #1,d0
   139ee:	|  |  |   move.l 28(sp),d1
   139f2:	|  |  |   add.l d0,d1
   139f4:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   139f8:	|  |  '-> addq.l #1,20(sp)
   139fc:	|  '----> move.l 20(sp),d0
   13a00:	|         cmp.l 12(sp),d0
   13a04:	'-------- blt.s 139d6 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13a06:	          pea 1a1b6 <PutChar+0x20d4>
   13a0c:	          move.l 20(sp),-(sp)
   13a10:	          jsr 1408c <joinStrings>
   13a16:	          addq.l #8,sp
   13a18:	          move.l d0,8(sp)

	FreeVec(filename);
   13a1c:	          move.l 28(sp),4(sp)
   13a22:	          move.l 1cdda <SysBase>,d0
   13a28:	          movea.l d0,a6
   13a2a:	          movea.l 4(sp),a1
   13a2e:	          jsr -690(a6)
	filename = NULL;
   13a32:	          clr.l 28(sp)
	return joined;
   13a36:	          move.l 8(sp),d0
}
   13a3a:	          movea.l (sp)+,a6
   13a3c:	          lea 20(sp),sp
   13a40:	          rts

00013a42 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   13a42:	             lea -28(sp),sp
   13a46:	             move.l a6,-(sp)
   13a48:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13a4a:	             move.l 1ceb6 <gameSettings+0x4>,d0
   13a50:	             move.l d0,d1
   13a52:	             addq.l #1,d1
   13a54:	             move.l d1,28(sp)
   13a58:	             clr.l 24(sp)
   13a5c:	             move.l 1cdda <SysBase>,d0
   13a62:	             movea.l d0,a6
   13a64:	             move.l 28(sp),d0
   13a68:	             move.l 24(sp),d1
   13a6c:	             jsr -684(a6)
   13a70:	             move.l d0,20(sp)
   13a74:	             move.l 20(sp),d0
   13a78:	             move.l d0,1ceaa <languageTable>
    if( languageTable == 0) {
   13a7e:	             move.l 1ceaa <languageTable>,d0
   13a84:	         ,-- bne.s 13a94 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13a86:	         |   pea 1a1bb <PutChar+0x20d9>
   13a8c:	         |   jsr 17640 <KPrintF>
   13a92:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13a94:	         '-> move.l 1ceb6 <gameSettings+0x4>,d0
   13a9a:	             move.l d0,d1
   13a9c:	             addq.l #1,d1
   13a9e:	             move.l d1,16(sp)
   13aa2:	             clr.l 12(sp)
   13aa6:	             move.l 1cdda <SysBase>,d0
   13aac:	             movea.l d0,a6
   13aae:	             move.l 16(sp),d0
   13ab2:	             move.l 12(sp),d1
   13ab6:	             jsr -684(a6)
   13aba:	             move.l d0,8(sp)
   13abe:	             move.l 8(sp),d0
   13ac2:	             move.l d0,1ceae <languageName>
	if( languageName == 0) {
   13ac8:	             move.l 1ceae <languageName>,d0
   13ace:	         ,-- bne.s 13ade <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13ad0:	         |   pea 1a1f1 <PutChar+0x210f>
   13ad6:	         |   jsr 17640 <KPrintF>
   13adc:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13ade:	         '-> clr.l 32(sp)
   13ae2:	   ,-------- bra.s 13b5a <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13ae4:	,--|-------> tst.l 32(sp)
   13ae8:	|  |  ,----- beq.s 13af8 <makeLanguageTable+0xb6>
   13aea:	|  |  |      move.l 40(sp),-(sp)
   13aee:	|  |  |      jsr 6bc <get2bytes>
   13af4:	|  |  |      addq.l #4,sp
   13af6:	|  |  |  ,-- bra.s 13afa <makeLanguageTable+0xb8>
   13af8:	|  |  '--|-> moveq #0,d0
   13afa:	|  |     '-> movea.l 1ceaa <languageTable>,a0
   13b00:	|  |         move.l 32(sp),d1
   13b04:	|  |         add.l d1,d1
   13b06:	|  |         add.l d1,d1
   13b08:	|  |         adda.l d1,a0
   13b0a:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13b0c:	|  |         move.l 1ceae <languageName>,d1
   13b12:	|  |         move.l 32(sp),d0
   13b16:	|  |         add.l d0,d0
   13b18:	|  |         add.l d0,d0
   13b1a:	|  |         movea.l d1,a0
   13b1c:	|  |         adda.l d0,a0
   13b1e:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13b20:	|  |         move.l 1cd84 <gameVersion>,d0
   13b26:	|  |         cmpi.l #511,d0
   13b2c:	|  |     ,-- ble.s 13b56 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13b2e:	|  |     |   move.l 1ceb6 <gameSettings+0x4>,d0
   13b34:	|  |     +-- beq.s 13b56 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13b36:	|  |     |   move.l 1ceae <languageName>,d1
   13b3c:	|  |     |   move.l 32(sp),d0
   13b40:	|  |     |   add.l d0,d0
   13b42:	|  |     |   add.l d0,d0
   13b44:	|  |     |   movea.l d1,a2
   13b46:	|  |     |   adda.l d0,a2
   13b48:	|  |     |   move.l 40(sp),-(sp)
   13b4c:	|  |     |   jsr b02 <readString>
   13b52:	|  |     |   addq.l #4,sp
   13b54:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13b56:	|  |     '-> addq.l #1,32(sp)
   13b5a:	|  '-------> move.l 1ceb6 <gameSettings+0x4>,d0
   13b60:	|            cmp.l 32(sp),d0
   13b64:	'----------- bcc.w 13ae4 <makeLanguageTable+0xa2>
		}
	}
}
   13b68:	             nop
   13b6a:	             nop
   13b6c:	             movea.l (sp)+,a2
   13b6e:	             movea.l (sp)+,a6
   13b70:	             lea 28(sp),sp
   13b74:	             rts

00013b76 <readIniFile>:

void readIniFile (char * filename) {
   13b76:	                      lea -564(sp),sp
   13b7a:	                      move.l a6,-(sp)
   13b7c:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13b7e:	                      move.l 576(sp),-(sp)
   13b82:	                      jsr b8 <copyString>
   13b88:	                      addq.l #4,sp
   13b8a:	                      move.l d0,-(sp)
   13b8c:	                      jsr 1398a <getPrefsFilename>
   13b92:	                      addq.l #4,sp
   13b94:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13b98:	                      move.l 562(sp),558(sp)
   13b9e:	                      move.l #1005,554(sp)
   13ba6:	                      move.l 1cde2 <DOSBase>,d0
   13bac:	                      movea.l d0,a6
   13bae:	                      move.l 558(sp),d1
   13bb2:	                      move.l 554(sp),d2
   13bb6:	                      jsr -30(a6)
   13bba:	                      move.l d0,550(sp)
   13bbe:	                      move.l 550(sp),d0
   13bc2:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13bc6:	                      clr.l 1ceb2 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13bcc:	                      move.w #1,1ceba <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13bd4:	                      clr.l 1cebc <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13bda:	                      moveq #1,d0
   13bdc:	                      move.l d0,1cec0 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13be2:	                      clr.w 1cec4 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13be8:	                      clr.w 1cec6 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13bee:	                      clr.w 1cec8 <gameSettings+0x16>

	FreeVec(langName);
   13bf4:	                      move.l 562(sp),542(sp)
   13bfa:	                      move.l 1cdda <SysBase>,d0
   13c00:	                      movea.l d0,a6
   13c02:	                      movea.l 542(sp),a1
   13c06:	                      jsr -690(a6)
	langName = NULL;
   13c0a:	                      clr.l 562(sp)

	if (fp) {
   13c0e:	                      tst.l 546(sp)
   13c12:	,-------------------- beq.w 13ef0 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13c16:	|                     move.l sp,d0
   13c18:	|                     addi.l #265,d0
   13c1e:	|                     move.l #257,d1
   13c24:	|                     move.l d1,-(sp)
   13c26:	|                     clr.l -(sp)
   13c28:	|                     move.l d0,-(sp)
   13c2a:	|                     jsr 175c4 <memset>
   13c30:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13c34:	|                     move.l sp,d0
   13c36:	|                     addq.l #8,d0
   13c38:	|                     move.l #257,d1
   13c3e:	|                     move.l d1,-(sp)
   13c40:	|                     clr.l -(sp)
   13c42:	|                     move.l d0,-(sp)
   13c44:	|                     jsr 175c4 <memset>
   13c4a:	|                     lea 12(sp),sp
		unsigned char here = 0;
   13c4e:	|                     clr.b 571(sp)
		char readChar = ' ';
   13c52:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13c58:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13c5e:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13c62:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13c66:	|  ,----------------> move.l 546(sp),534(sp)
   13c6c:	|  |                  move.l 1cde2 <DOSBase>,d0
   13c72:	|  |                  movea.l d0,a6
   13c74:	|  |                  move.l 534(sp),d1
   13c78:	|  |                  jsr -306(a6)
   13c7c:	|  |                  move.l d0,530(sp)
   13c80:	|  |                  move.l 530(sp),d0
   13c84:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13c88:	|  |                  moveq #-1,d1
   13c8a:	|  |                  cmp.l 538(sp),d1
   13c8e:	|  |           ,----- bne.s 13c9c <readIniFile+0x126>
				readChar = '\n';
   13c90:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13c96:	|  |           |      clr.w 568(sp)
   13c9a:	|  |           |  ,-- bra.s 13ca2 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13c9c:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13ca2:	|  |              '-> move.b 570(sp),d0
   13ca6:	|  |                  ext.w d0
   13ca8:	|  |                  movea.w d0,a0
   13caa:	|  |                  moveq #61,d0
   13cac:	|  |                  cmp.l a0,d0
   13cae:	|  |     ,----------- beq.w 13e58 <readIniFile+0x2e2>
   13cb2:	|  |     |            moveq #61,d1
   13cb4:	|  |     |            cmp.l a0,d1
   13cb6:	|  |  ,--|----------- blt.w 13e64 <readIniFile+0x2ee>
   13cba:	|  |  |  |            moveq #10,d0
   13cbc:	|  |  |  |            cmp.l a0,d0
   13cbe:	|  |  |  |        ,-- beq.s 13cc8 <readIniFile+0x152>
   13cc0:	|  |  |  |        |   moveq #13,d1
   13cc2:	|  |  |  |        |   cmp.l a0,d1
   13cc4:	|  |  +--|--------|-- bne.w 13e64 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13cc8:	|  |  |  |        '-> tst.w 566(sp)
   13ccc:	|  |  |  |     ,----- beq.w 13e46 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13cd0:	|  |  |  |     |      pea 1a225 <PutChar+0x2143>
   13cd6:	|  |  |  |     |      move.l sp,d0
   13cd8:	|  |  |  |     |      addi.l #269,d0
   13cde:	|  |  |  |     |      move.l d0,-(sp)
   13ce0:	|  |  |  |     |      jsr 1400c <strcmp>
   13ce6:	|  |  |  |     |      addq.l #8,sp
   13ce8:	|  |  |  |     |      tst.l d0
   13cea:	|  |  |  |     |  ,-- bne.s 13d04 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13cec:	|  |  |  |     |  |   move.l sp,d0
   13cee:	|  |  |  |     |  |   addq.l #8,d0
   13cf0:	|  |  |  |     |  |   move.l d0,-(sp)
   13cf2:	|  |  |  |     |  |   jsr 13efc <stringToInt>
   13cf8:	|  |  |  |     |  |   addq.l #4,sp
   13cfa:	|  |  |  |     |  |   move.l d0,1ceb2 <gameSettings>
   13d00:	|  |  |  |     +--|-- bra.w 13e46 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13d04:	|  |  |  |     |  '-> pea 1a22e <PutChar+0x214c>
   13d0a:	|  |  |  |     |      move.l sp,d0
   13d0c:	|  |  |  |     |      addi.l #269,d0
   13d12:	|  |  |  |     |      move.l d0,-(sp)
   13d14:	|  |  |  |     |      jsr 1400c <strcmp>
   13d1a:	|  |  |  |     |      addq.l #8,sp
   13d1c:	|  |  |  |     |      tst.l d0
   13d1e:	|  |  |  |     |  ,-- bne.s 13d44 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13d20:	|  |  |  |     |  |   move.l sp,d0
   13d22:	|  |  |  |     |  |   addq.l #8,d0
   13d24:	|  |  |  |     |  |   move.l d0,-(sp)
   13d26:	|  |  |  |     |  |   jsr 13efc <stringToInt>
   13d2c:	|  |  |  |     |  |   addq.l #4,sp
   13d2e:	|  |  |  |     |  |   tst.l d0
   13d30:	|  |  |  |     |  |   seq d0
   13d32:	|  |  |  |     |  |   neg.b d0
   13d34:	|  |  |  |     |  |   move.b d0,d0
   13d36:	|  |  |  |     |  |   andi.w #255,d0
   13d3a:	|  |  |  |     |  |   move.w d0,1ceba <gameSettings+0x8>
   13d40:	|  |  |  |     +--|-- bra.w 13e46 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13d44:	|  |  |  |     |  '-> pea 1a235 <PutChar+0x2153>
   13d4a:	|  |  |  |     |      move.l sp,d0
   13d4c:	|  |  |  |     |      addi.l #269,d0
   13d52:	|  |  |  |     |      move.l d0,-(sp)
   13d54:	|  |  |  |     |      jsr 1400c <strcmp>
   13d5a:	|  |  |  |     |      addq.l #8,sp
   13d5c:	|  |  |  |     |      tst.l d0
   13d5e:	|  |  |  |     |  ,-- bne.s 13d78 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13d60:	|  |  |  |     |  |   move.l sp,d0
   13d62:	|  |  |  |     |  |   addq.l #8,d0
   13d64:	|  |  |  |     |  |   move.l d0,-(sp)
   13d66:	|  |  |  |     |  |   jsr 13efc <stringToInt>
   13d6c:	|  |  |  |     |  |   addq.l #4,sp
   13d6e:	|  |  |  |     |  |   move.l d0,1cebc <gameSettings+0xa>
   13d74:	|  |  |  |     +--|-- bra.w 13e46 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13d78:	|  |  |  |     |  '-> pea 1a23d <PutChar+0x215b>
   13d7e:	|  |  |  |     |      move.l sp,d0
   13d80:	|  |  |  |     |      addi.l #269,d0
   13d86:	|  |  |  |     |      move.l d0,-(sp)
   13d88:	|  |  |  |     |      jsr 1400c <strcmp>
   13d8e:	|  |  |  |     |      addq.l #8,sp
   13d90:	|  |  |  |     |      tst.l d0
   13d92:	|  |  |  |     |  ,-- bne.s 13dac <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13d94:	|  |  |  |     |  |   move.l sp,d0
   13d96:	|  |  |  |     |  |   addq.l #8,d0
   13d98:	|  |  |  |     |  |   move.l d0,-(sp)
   13d9a:	|  |  |  |     |  |   jsr 13efc <stringToInt>
   13da0:	|  |  |  |     |  |   addq.l #4,sp
   13da2:	|  |  |  |     |  |   move.l d0,1cec0 <gameSettings+0xe>
   13da8:	|  |  |  |     +--|-- bra.w 13e46 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13dac:	|  |  |  |     |  '-> pea 1a247 <PutChar+0x2165>
   13db2:	|  |  |  |     |      move.l sp,d0
   13db4:	|  |  |  |     |      addi.l #269,d0
   13dba:	|  |  |  |     |      move.l d0,-(sp)
   13dbc:	|  |  |  |     |      jsr 1400c <strcmp>
   13dc2:	|  |  |  |     |      addq.l #8,sp
   13dc4:	|  |  |  |     |      tst.l d0
   13dc6:	|  |  |  |     |  ,-- bne.s 13de0 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13dc8:	|  |  |  |     |  |   move.l sp,d0
   13dca:	|  |  |  |     |  |   addq.l #8,d0
   13dcc:	|  |  |  |     |  |   move.l d0,-(sp)
   13dce:	|  |  |  |     |  |   jsr 13efc <stringToInt>
   13dd4:	|  |  |  |     |  |   addq.l #4,sp
   13dd6:	|  |  |  |     |  |   move.l d0,d0
   13dd8:	|  |  |  |     |  |   move.w d0,1cec4 <gameSettings+0x12>
   13dde:	|  |  |  |     +--|-- bra.s 13e46 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13de0:	|  |  |  |     |  '-> pea 1a253 <PutChar+0x2171>
   13de6:	|  |  |  |     |      move.l sp,d0
   13de8:	|  |  |  |     |      addi.l #269,d0
   13dee:	|  |  |  |     |      move.l d0,-(sp)
   13df0:	|  |  |  |     |      jsr 1400c <strcmp>
   13df6:	|  |  |  |     |      addq.l #8,sp
   13df8:	|  |  |  |     |      tst.l d0
   13dfa:	|  |  |  |     |  ,-- bne.s 13e14 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13dfc:	|  |  |  |     |  |   move.l sp,d0
   13dfe:	|  |  |  |     |  |   addq.l #8,d0
   13e00:	|  |  |  |     |  |   move.l d0,-(sp)
   13e02:	|  |  |  |     |  |   jsr 13efc <stringToInt>
   13e08:	|  |  |  |     |  |   addq.l #4,sp
   13e0a:	|  |  |  |     |  |   move.l d0,d0
   13e0c:	|  |  |  |     |  |   move.w d0,1cec6 <gameSettings+0x14>
   13e12:	|  |  |  |     +--|-- bra.s 13e46 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13e14:	|  |  |  |     |  '-> pea 1a261 <PutChar+0x217f>
   13e1a:	|  |  |  |     |      move.l sp,d0
   13e1c:	|  |  |  |     |      addi.l #269,d0
   13e22:	|  |  |  |     |      move.l d0,-(sp)
   13e24:	|  |  |  |     |      jsr 1400c <strcmp>
   13e2a:	|  |  |  |     |      addq.l #8,sp
   13e2c:	|  |  |  |     |      tst.l d0
   13e2e:	|  |  |  |     +----- bne.s 13e46 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13e30:	|  |  |  |     |      move.l sp,d0
   13e32:	|  |  |  |     |      addq.l #8,d0
   13e34:	|  |  |  |     |      move.l d0,-(sp)
   13e36:	|  |  |  |     |      jsr 13efc <stringToInt>
   13e3c:	|  |  |  |     |      addq.l #4,sp
   13e3e:	|  |  |  |     |      move.l d0,d0
   13e40:	|  |  |  |     |      move.w d0,1cec8 <gameSettings+0x16>
					}
				}
				here = 0;
   13e46:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   13e4a:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13e4e:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13e52:	|  |  |  |            clr.b 8(sp)
				break;
   13e56:	|  |  |  |  ,-------- bra.s 13ece <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13e58:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   13e5e:	|  |  |     |         clr.b 571(sp)
				break;
   13e62:	|  |  |     +-------- bra.s 13ece <readIniFile+0x358>

				default:
				if (doingSecond) {
   13e64:	|  |  '-----|-------> tst.w 566(sp)
   13e68:	|  |        |  ,----- beq.s 13e9c <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13e6a:	|  |        |  |      move.b 571(sp),d0
   13e6e:	|  |        |  |      move.b d0,d1
   13e70:	|  |        |  |      addq.b #1,d1
   13e72:	|  |        |  |      move.b d1,571(sp)
   13e76:	|  |        |  |      move.b d0,d0
   13e78:	|  |        |  |      andi.l #255,d0
   13e7e:	|  |        |  |      lea 572(sp),a0
   13e82:	|  |        |  |      adda.l d0,a0
   13e84:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13e8a:	|  |        |  |      moveq #0,d0
   13e8c:	|  |        |  |      move.b 571(sp),d0
   13e90:	|  |        |  |      lea 572(sp),a0
   13e94:	|  |        |  |      adda.l d0,a0
   13e96:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13e9a:	|  |        |  |  ,-- bra.s 13ecc <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13e9c:	|  |        |  '--|-> move.b 571(sp),d0
   13ea0:	|  |        |     |   move.b d0,d1
   13ea2:	|  |        |     |   addq.b #1,d1
   13ea4:	|  |        |     |   move.b d1,571(sp)
   13ea8:	|  |        |     |   move.b d0,d0
   13eaa:	|  |        |     |   andi.l #255,d0
   13eb0:	|  |        |     |   lea 572(sp),a0
   13eb4:	|  |        |     |   adda.l d0,a0
   13eb6:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13ebc:	|  |        |     |   moveq #0,d0
   13ebe:	|  |        |     |   move.b 571(sp),d0
   13ec2:	|  |        |     |   lea 572(sp),a0
   13ec6:	|  |        |     |   adda.l d0,a0
   13ec8:	|  |        |     |   clr.b -307(a0)
				break;
   13ecc:	|  |        |     '-> nop
			}
		} while (keepGoing);
   13ece:	|  |        '-------> tst.w 568(sp)
   13ed2:	|  '----------------- bne.w 13c66 <readIniFile+0xf0>

		Close(fp);
   13ed6:	|                     move.l 546(sp),526(sp)
   13edc:	|                     move.l 1cde2 <DOSBase>,d0
   13ee2:	|                     movea.l d0,a6
   13ee4:	|                     move.l 526(sp),d1
   13ee8:	|                     jsr -36(a6)
   13eec:	|                     move.l d0,522(sp)
	}
}
   13ef0:	'-------------------> nop
   13ef2:	                      move.l (sp)+,d2
   13ef4:	                      movea.l (sp)+,a6
   13ef6:	                      lea 564(sp),sp
   13efa:	                      rts

00013efc <stringToInt>:

unsigned int stringToInt (char * s) {
   13efc:	             subq.l #8,sp
	int i = 0;
   13efe:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13f02:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13f06:	,----------> movea.l 12(sp),a0
   13f0a:	|            move.b (a0),d0
   13f0c:	|            cmpi.b #47,d0
   13f10:	|        ,-- ble.s 13f48 <stringToInt+0x4c>
   13f12:	|        |   movea.l 12(sp),a0
   13f16:	|        |   move.b (a0),d0
   13f18:	|        |   cmpi.b #57,d0
   13f1c:	|        +-- bgt.s 13f48 <stringToInt+0x4c>
			i *= 10;
   13f1e:	|        |   move.l 4(sp),d1
   13f22:	|        |   move.l d1,d0
   13f24:	|        |   add.l d0,d0
   13f26:	|        |   add.l d0,d0
   13f28:	|        |   add.l d1,d0
   13f2a:	|        |   add.l d0,d0
   13f2c:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13f30:	|        |   movea.l 12(sp),a0
   13f34:	|        |   move.b (a0),d0
   13f36:	|        |   ext.w d0
   13f38:	|        |   movea.w d0,a0
   13f3a:	|        |   moveq #-48,d0
   13f3c:	|        |   add.l a0,d0
   13f3e:	|        |   add.l d0,4(sp)
			s ++;
   13f42:	|        |   addq.l #1,12(sp)
   13f46:	|  ,-----|-- bra.s 13f80 <stringToInt+0x84>
		} else if (*s == '-') {
   13f48:	|  |     '-> movea.l 12(sp),a0
   13f4c:	|  |         move.b (a0),d0
   13f4e:	|  |         cmpi.b #45,d0
   13f52:	|  |     ,-- bne.s 13f6c <stringToInt+0x70>
			negative = ! negative;
   13f54:	|  |     |   tst.w 2(sp)
   13f58:	|  |     |   seq d0
   13f5a:	|  |     |   neg.b d0
   13f5c:	|  |     |   move.b d0,d0
   13f5e:	|  |     |   andi.w #255,d0
   13f62:	|  |     |   move.w d0,2(sp)
			s++;
   13f66:	|  |     |   addq.l #1,12(sp)
   13f6a:	+--|-----|-- bra.s 13f06 <stringToInt+0xa>
		} else {
			if (negative)
   13f6c:	|  |     '-> tst.w 2(sp)
   13f70:	|  |     ,-- beq.s 13f7a <stringToInt+0x7e>
				return -i;
   13f72:	|  |     |   move.l 4(sp),d0
   13f76:	|  |     |   neg.l d0
   13f78:	|  |  ,--|-- bra.s 13f82 <stringToInt+0x86>
			return i;
   13f7a:	|  |  |  '-> move.l 4(sp),d0
   13f7e:	|  |  +----- bra.s 13f82 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13f80:	'--'--|----X bra.s 13f06 <stringToInt+0xa>
		}
	}
   13f82:	      '----> addq.l #8,sp
   13f84:	             rts

00013f86 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13f86:	    lea -28(sp),sp
   13f8a:	    move.l a6,-(sp)
   13f8c:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13f8e:	    pea 1a26b <PutChar+0x2189>
   13f94:	    jsr 17640 <KPrintF>
   13f9a:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13f9c:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13fa0:	    move.l 40(sp),30(sp)
   13fa6:	    move.l #1005,26(sp)
   13fae:	    move.l 1cde2 <DOSBase>,d0
   13fb4:	    movea.l d0,a6
   13fb6:	    move.l 30(sp),d1
   13fba:	    move.l 26(sp),d2
   13fbe:	    jsr -30(a6)
   13fc2:	    move.l d0,22(sp)
   13fc6:	    move.l 22(sp),d0
   13fca:	    move.l d0,18(sp)
	if (tester) {
   13fce:	,-- beq.s 13ffe <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13fd0:	|   pea 1a285 <PutChar+0x21a3>
   13fd6:	|   jsr 17640 <KPrintF>
   13fdc:	|   addq.l #4,sp
		retval = 1;
   13fde:	|   move.b #1,35(sp)
		Close(tester);
   13fe4:	|   move.l 18(sp),14(sp)
   13fea:	|   move.l 1cde2 <DOSBase>,d0
   13ff0:	|   movea.l d0,a6
   13ff2:	|   move.l 14(sp),d1
   13ff6:	|   jsr -36(a6)
   13ffa:	|   move.l d0,10(sp)
	}
	return retval;
   13ffe:	'-> move.b 35(sp),d0
   14002:	    move.l (sp)+,d2
   14004:	    movea.l (sp)+,a6
   14006:	    lea 28(sp),sp
   1400a:	    rts

0001400c <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   1400c:	   ,-- bra.s 14016 <strcmp+0xa>
    {
        s1++;
   1400e:	,--|-> addq.l #1,4(sp)
        s2++;
   14012:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   14016:	|  '-> movea.l 4(sp),a0
   1401a:	|      move.b (a0),d0
   1401c:	|  ,-- beq.s 1402e <strcmp+0x22>
   1401e:	|  |   movea.l 4(sp),a0
   14022:	|  |   move.b (a0),d1
   14024:	|  |   movea.l 8(sp),a0
   14028:	|  |   move.b (a0),d0
   1402a:	|  |   cmp.b d1,d0
   1402c:	'--|-- beq.s 1400e <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   1402e:	   '-> movea.l 4(sp),a0
   14032:	       move.b (a0),d0
   14034:	       moveq #0,d1
   14036:	       move.b d0,d1
   14038:	       movea.l 8(sp),a0
   1403c:	       move.b (a0),d0
   1403e:	       move.b d0,d0
   14040:	       andi.l #255,d0
   14046:	       sub.l d0,d1
   14048:	       move.l d1,d0
}
   1404a:	       rts

0001404c <strlen>:

long unsigned int strlen (const char *s) 
{  
   1404c:	       subq.l #4,sp
	long unsigned int i = 0;
   1404e:	       clr.l (sp)
	while(s[i]) i++; 
   14050:	   ,-- bra.s 14054 <strlen+0x8>
   14052:	,--|-> addq.l #1,(sp)
   14054:	|  '-> movea.l 8(sp),a0
   14058:	|      adda.l (sp),a0
   1405a:	|      move.b (a0),d0
   1405c:	'----- bne.s 14052 <strlen+0x6>
	return(i);
   1405e:	       move.l (sp),d0
}
   14060:	       addq.l #4,sp
   14062:	       rts

00014064 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   14064:	    nop
   14066:	,-> move.l 8(sp),d0
   1406a:	|   move.l d0,d1
   1406c:	|   addq.l #1,d1
   1406e:	|   move.l d1,8(sp)
   14072:	|   movea.l 4(sp),a0
   14076:	|   lea 1(a0),a1
   1407a:	|   move.l a1,4(sp)
   1407e:	|   movea.l d0,a1
   14080:	|   move.b (a1),d0
   14082:	|   move.b d0,(a0)
   14084:	|   move.b (a0),d0
   14086:	'-- bne.s 14066 <strcpy+0x2>
}
   14088:	    nop
   1408a:	    rts

0001408c <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   1408c:	    lea -20(sp),sp
   14090:	    move.l a6,-(sp)
   14092:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   14094:	    move.l 32(sp),-(sp)
   14098:	    jsr 1404c <strlen>
   1409e:	    addq.l #4,sp
   140a0:	    move.l d0,d2
   140a2:	    move.l 36(sp),-(sp)
   140a6:	    jsr 1404c <strlen>
   140ac:	    addq.l #4,sp
   140ae:	    add.l d2,d0
   140b0:	    move.l d0,d1
   140b2:	    addq.l #1,d1
   140b4:	    move.l d1,20(sp)
   140b8:	    clr.l 16(sp)
   140bc:	    move.l 1cdda <SysBase>,d0
   140c2:	    movea.l d0,a6
   140c4:	    move.l 20(sp),d0
   140c8:	    move.l 16(sp),d1
   140cc:	    jsr -684(a6)
   140d0:	    move.l d0,12(sp)
   140d4:	    move.l 12(sp),d0
   140d8:	    move.l d0,8(sp)
	char * t = newString;
   140dc:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   140e2:	    nop
   140e4:	,-> move.l 32(sp),d0
   140e8:	|   move.l d0,d1
   140ea:	|   addq.l #1,d1
   140ec:	|   move.l d1,32(sp)
   140f0:	|   movea.l 24(sp),a0
   140f4:	|   lea 1(a0),a1
   140f8:	|   move.l a1,24(sp)
   140fc:	|   movea.l d0,a1
   140fe:	|   move.b (a1),d0
   14100:	|   move.b d0,(a0)
   14102:	|   move.b (a0),d0
   14104:	'-- bne.s 140e4 <joinStrings+0x58>
	t--;
   14106:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   1410a:	    nop
   1410c:	,-> move.l 36(sp),d0
   14110:	|   move.l d0,d1
   14112:	|   addq.l #1,d1
   14114:	|   move.l d1,36(sp)
   14118:	|   movea.l 24(sp),a0
   1411c:	|   lea 1(a0),a1
   14120:	|   move.l a1,24(sp)
   14124:	|   movea.l d0,a1
   14126:	|   move.b (a1),d0
   14128:	|   move.b d0,(a0)
   1412a:	|   move.b (a0),d0
   1412c:	'-- bne.s 1410c <joinStrings+0x80>

	return newString;
   1412e:	    move.l 8(sp),d0
}
   14132:	    move.l (sp)+,d2
   14134:	    movea.l (sp)+,a6
   14136:	    lea 20(sp),sp
   1413a:	    rts

0001413c <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   1413c:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   14140:	       moveq #10,d0
   14142:	       cmp.l 28(sp),d0
   14146:	   ,-- bne.s 14164 <itoa+0x28>
   14148:	   |   tst.l 20(sp)
   1414c:	   +-- bge.s 14164 <itoa+0x28>
        *str++ = '-';
   1414e:	   |   move.l 24(sp),d0
   14152:	   |   move.l d0,d1
   14154:	   |   addq.l #1,d1
   14156:	   |   move.l d1,24(sp)
   1415a:	   |   movea.l d0,a0
   1415c:	   |   move.b #45,(a0)
        value *= -1;
   14160:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   14164:	   '-> move.l 24(sp),12(sp)
   1416a:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   14170:	   ,-> move.l 20(sp),d0
   14174:	   |   move.l 28(sp),-(sp)
   14178:	   |   move.l d0,-(sp)
   1417a:	   |   jsr 18078 <__modsi3>
   14180:	   |   addq.l #8,sp
   14182:	   |   movea.l d0,a1
   14184:	   |   move.l 12(sp),d0
   14188:	   |   move.l d0,d1
   1418a:	   |   addq.l #1,d1
   1418c:	   |   move.l d1,12(sp)
   14190:	   |   lea 1a29d <PutChar+0x21bb>,a0
   14196:	   |   move.b (0,a1,a0.l),d1
   1419a:	   |   movea.l d0,a0
   1419c:	   |   move.b d1,(a0)
        value /= base;
   1419e:	   |   move.l 28(sp),-(sp)
   141a2:	   |   move.l 24(sp),-(sp)
   141a6:	   |   jsr 1804a <__divsi3>
   141ac:	   |   addq.l #8,sp
   141ae:	   |   move.l d0,20(sp)
    } while (value);
   141b2:	   '-- bne.s 14170 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   141b4:	       move.l 12(sp),d0
   141b8:	       move.l d0,d1
   141ba:	       subq.l #1,d1
   141bc:	       move.l d1,12(sp)
   141c0:	       movea.l d0,a0
   141c2:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   141c4:	       move.l 4(sp),8(sp)
   141ca:	   ,-- bra.s 141f0 <itoa+0xb4>
        char temp = *low;
   141cc:	,--|-> movea.l 8(sp),a0
   141d0:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   141d4:	|  |   movea.l 12(sp),a0
   141d8:	|  |   move.b (a0),d0
   141da:	|  |   movea.l 8(sp),a0
   141de:	|  |   move.b d0,(a0)
        *ptr = temp;
   141e0:	|  |   movea.l 12(sp),a0
   141e4:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   141e8:	|  |   addq.l #1,8(sp)
   141ec:	|  |   subq.l #1,12(sp)
   141f0:	|  '-> move.l 8(sp),d0
   141f4:	|      cmp.l 12(sp),d0
   141f8:	'----- bcs.s 141cc <itoa+0x90>
    }
    return rc;
   141fa:	       move.l 4(sp),d0
}
   141fe:	       lea 16(sp),sp
   14202:	       rts

00014204 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   14204:	                            lea -40(sp),sp
   14208:	                            move.l d2,-(sp)
    char* s = str;
   1420a:	                            move.l 48(sp),40(sp)
    const char* p = format;
   14210:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   14216:	   ,----------------------- bra.w 1434a <vsprintf2+0x146>
        if (*p == '%') {
   1421a:	,--|----------------------> movea.l 36(sp),a0
   1421e:	|  |                        move.b (a0),d0
   14220:	|  |                        cmpi.b #37,d0
   14224:	|  |  ,-------------------- bne.w 14330 <vsprintf2+0x12c>
            switch (*++p) {
   14228:	|  |  |                     addq.l #1,36(sp)
   1422c:	|  |  |                     movea.l 36(sp),a0
   14230:	|  |  |                     move.b (a0),d0
   14232:	|  |  |                     ext.w d0
   14234:	|  |  |                     movea.w d0,a0
   14236:	|  |  |                     moveq #115,d0
   14238:	|  |  |                     cmp.l a0,d0
   1423a:	|  |  |           ,-------- beq.s 142b2 <vsprintf2+0xae>
   1423c:	|  |  |           |         moveq #115,d1
   1423e:	|  |  |           |         cmp.l a0,d1
   14240:	|  |  |  ,--------|-------- blt.w 14318 <vsprintf2+0x114>
   14244:	|  |  |  |        |         moveq #99,d2
   14246:	|  |  |  |        |         cmp.l a0,d2
   14248:	|  |  |  |  ,-----|-------- beq.w 142f0 <vsprintf2+0xec>
   1424c:	|  |  |  |  |     |         moveq #100,d0
   1424e:	|  |  |  |  |     |         cmp.l a0,d0
   14250:	|  |  |  +--|-----|-------- bne.w 14318 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   14254:	|  |  |  |  |     |         addq.l #4,56(sp)
   14258:	|  |  |  |  |     |         movea.l 56(sp),a0
   1425c:	|  |  |  |  |     |         move.l (a0),d0
   1425e:	|  |  |  |  |     |         move.l d0,d1
   14260:	|  |  |  |  |     |         subq.l #1,d1
   14262:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   14266:	|  |  |  |  |     |         pea a <_start+0xa>
   1426a:	|  |  |  |  |     |         lea 8(sp),a0
   1426e:	|  |  |  |  |     |         move.l a0,-(sp)
   14270:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   14274:	|  |  |  |  |     |         jsr 1413c <itoa>
   1427a:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   1427e:	|  |  |  |  |     |         lea 44(sp),a0
   14282:	|  |  |  |  |     |         lea -40(a0),a0
   14286:	|  |  |  |  |     |         move.l a0,28(sp)
   1428a:	|  |  |  |  |     |     ,-- bra.s 142a6 <vsprintf2+0xa2>
                        *s++ = *b;
   1428c:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   14290:	|  |  |  |  |     |  |  |   move.l d0,d1
   14292:	|  |  |  |  |     |  |  |   addq.l #1,d1
   14294:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   14298:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   1429c:	|  |  |  |  |     |  |  |   move.b (a0),d1
   1429e:	|  |  |  |  |     |  |  |   movea.l d0,a0
   142a0:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   142a2:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   142a6:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   142aa:	|  |  |  |  |     |  |      move.b (a0),d0
   142ac:	|  |  |  |  |     |  '----- bne.s 1428c <vsprintf2+0x88>
                    }
                    break;
   142ae:	|  |  |  |  |  ,--|-------- bra.w 14346 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   142b2:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   142b6:	|  |  |  |  |  |            movea.l 56(sp),a0
   142ba:	|  |  |  |  |  |            move.l (a0),d0
   142bc:	|  |  |  |  |  |            move.l d0,d1
   142be:	|  |  |  |  |  |            subq.l #1,d1
   142c0:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   142c4:	|  |  |  |  |  |        ,-- bra.s 142e6 <vsprintf2+0xe2>
                        *s++ = *sval++;
   142c6:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   142ca:	|  |  |  |  |  |     |  |   move.l d1,d2
   142cc:	|  |  |  |  |  |     |  |   addq.l #1,d2
   142ce:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   142d2:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   142d6:	|  |  |  |  |  |     |  |   move.l d0,d2
   142d8:	|  |  |  |  |  |     |  |   addq.l #1,d2
   142da:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   142de:	|  |  |  |  |  |     |  |   movea.l d1,a0
   142e0:	|  |  |  |  |  |     |  |   move.b (a0),d1
   142e2:	|  |  |  |  |  |     |  |   movea.l d0,a0
   142e4:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   142e6:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   142ea:	|  |  |  |  |  |     |      move.b (a0),d0
   142ec:	|  |  |  |  |  |     '----- bne.s 142c6 <vsprintf2+0xc2>
                    }
                    break;
   142ee:	|  |  |  |  |  +----------- bra.s 14346 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   142f0:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   142f4:	|  |  |  |     |            movea.l 56(sp),a0
   142f8:	|  |  |  |     |            move.l (a0),d0
   142fa:	|  |  |  |     |            move.l d0,d1
   142fc:	|  |  |  |     |            subq.l #1,d1
   142fe:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   14302:	|  |  |  |     |            move.l 40(sp),d0
   14306:	|  |  |  |     |            move.l d0,d2
   14308:	|  |  |  |     |            addq.l #1,d2
   1430a:	|  |  |  |     |            move.l d2,40(sp)
   1430e:	|  |  |  |     |            move.l 24(sp),d1
   14312:	|  |  |  |     |            movea.l d0,a0
   14314:	|  |  |  |     |            move.b d1,(a0)
                    break;
   14316:	|  |  |  |     +----------- bra.s 14346 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   14318:	|  |  |  '-----|----------> move.l 40(sp),d0
   1431c:	|  |  |        |            move.l d0,d1
   1431e:	|  |  |        |            addq.l #1,d1
   14320:	|  |  |        |            move.l d1,40(sp)
   14324:	|  |  |        |            movea.l 36(sp),a0
   14328:	|  |  |        |            move.b (a0),d1
   1432a:	|  |  |        |            movea.l d0,a0
   1432c:	|  |  |        |            move.b d1,(a0)
                    break;
   1432e:	|  |  |        +----------- bra.s 14346 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   14330:	|  |  '--------|----------> move.l 40(sp),d0
   14334:	|  |           |            move.l d0,d1
   14336:	|  |           |            addq.l #1,d1
   14338:	|  |           |            move.l d1,40(sp)
   1433c:	|  |           |            movea.l 36(sp),a0
   14340:	|  |           |            move.b (a0),d1
   14342:	|  |           |            movea.l d0,a0
   14344:	|  |           |            move.b d1,(a0)
        }
        p++;
   14346:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   1434a:	|  '----------------------> movea.l 36(sp),a0
   1434e:	|                           move.b (a0),d0
   14350:	'-------------------------- bne.w 1421a <vsprintf2+0x16>
    }
    *s = '\0';
   14354:	                            movea.l 40(sp),a0
   14358:	                            clr.b (a0)
    return s - str;
   1435a:	                            move.l 40(sp),d0
   1435e:	                            sub.l 48(sp),d0
}
   14362:	                            move.l (sp)+,d2
   14364:	                            lea 40(sp),sp
   14368:	                            rts

0001436a <sprintf>:

int sprintf(char* str, const char* format, ...) {
   1436a:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   1436c:	moveq #16,d0
   1436e:	add.l sp,d0
   14370:	move.l d0,d1
   14372:	addq.l #4,d1
   14374:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   14378:	move.l 16(sp),d0
   1437c:	move.l 4(sp),-(sp)
   14380:	move.l d0,-(sp)
   14382:	move.l 20(sp),-(sp)
   14386:	jsr 14204 <vsprintf2>
   1438c:	lea 12(sp),sp
   14390:	move.l d0,(sp)
    va_end(args);
   14392:	clr.l 4(sp)

    return done;
   14396:	move.l (sp),d0
}
   14398:	addq.l #8,sp
   1439a:	rts

0001439c <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   1439c:	       lea -20(sp),sp
   143a0:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   143a2:	       moveq #12,d0
   143a4:	       move.l d0,20(sp)
   143a8:	       clr.l 16(sp)
   143ac:	       move.l 1cdda <SysBase>,d0
   143b2:	       movea.l d0,a6
   143b4:	       move.l 20(sp),d0
   143b8:	       move.l 16(sp),d1
   143bc:	       jsr -684(a6)
   143c0:	       move.l d0,12(sp)
   143c4:	       move.l 12(sp),d0
   143c8:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   143cc:	   ,-- bne.s 143d2 <addVarToStack+0x36>
   143ce:	   |   clr.w d0
   143d0:	,--|-- bra.s 1441a <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   143d2:	|  '-> move.l 8(sp),d0
   143d6:	|      move.l d0,-(sp)
   143d8:	|      move.l 32(sp),-(sp)
   143dc:	|      jsr 14efe <copyMain>
   143e2:	|      addq.l #8,sp
   143e4:	|      tst.w d0
   143e6:	|  ,-- bne.s 14402 <addVarToStack+0x66>
        FreeVec(newStack);
   143e8:	|  |   move.l 8(sp),4(sp)
   143ee:	|  |   move.l 1cdda <SysBase>,d0
   143f4:	|  |   movea.l d0,a6
   143f6:	|  |   movea.l 4(sp),a1
   143fa:	|  |   jsr -690(a6)
        return FALSE;
   143fe:	|  |   clr.w d0
   14400:	+--|-- bra.s 1441a <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   14402:	|  '-> movea.l 32(sp),a0
   14406:	|      move.l (a0),d0
   14408:	|      movea.l 8(sp),a0
   1440c:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14410:	|      movea.l 32(sp),a0
   14414:	|      move.l 8(sp),(a0)
    return TRUE;
   14418:	|      moveq #1,d0
}
   1441a:	'----> movea.l (sp)+,a6
   1441c:	       lea 20(sp),sp
   14420:	       rts

00014422 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   14422:	       lea -16(sp),sp
   14426:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14428:	       moveq #12,d0
   1442a:	       move.l d0,16(sp)
   1442e:	       clr.l 12(sp)
   14432:	       move.l 1cdda <SysBase>,d0
   14438:	       movea.l d0,a6
   1443a:	       move.l 16(sp),d0
   1443e:	       move.l 12(sp),d1
   14442:	       jsr -684(a6)
   14446:	       move.l d0,8(sp)
   1444a:	       move.l 8(sp),d0
   1444e:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   14452:	   ,-- bne.s 14458 <addVarToStackQuick+0x36>
   14454:	   |   clr.w d0
   14456:	,--|-- bra.s 1448e <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   14458:	|  '-> move.l 4(sp),d0
   1445c:	|      pea 8 <_start+0x8>
   14460:	|      move.l 28(sp),-(sp)
   14464:	|      move.l d0,-(sp)
   14466:	|      jsr 175f4 <memcpy>
   1446c:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   14470:	|      movea.l 24(sp),a0
   14474:	|      clr.l (a0)

    newStack->next = *thisStack;
   14476:	|      movea.l 28(sp),a0
   1447a:	|      move.l (a0),d0
   1447c:	|      movea.l 4(sp),a0
   14480:	|      move.l d0,8(a0)
    *thisStack = newStack;
   14484:	|      movea.l 28(sp),a0
   14488:	|      move.l 4(sp),(a0)
    return TRUE;
   1448c:	|      moveq #1,d0
}
   1448e:	'----> movea.l (sp)+,a6
   14490:	       lea 16(sp),sp
   14494:	       rts

00014496 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   14496:	       lea -16(sp),sp
   1449a:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   1449c:	       movea.l 24(sp),a0
   144a0:	       move.l (a0),d0
   144a2:	       moveq #1,d1
   144a4:	       cmp.l d0,d1
   144a6:	   ,-- bne.s 144d0 <addVariablesInSecond+0x3a>
   144a8:	   |   movea.l 28(sp),a0
   144ac:	   |   move.l (a0),d0
   144ae:	   |   moveq #1,d1
   144b0:	   |   cmp.l d0,d1
   144b2:	   +-- bne.s 144d0 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   144b4:	   |   movea.l 28(sp),a0
   144b8:	   |   move.l 4(a0),d1
   144bc:	   |   movea.l 24(sp),a0
   144c0:	   |   move.l 4(a0),d0
   144c4:	   |   add.l d1,d0
   144c6:	   |   movea.l 28(sp),a0
   144ca:	   |   move.l d0,4(a0)
   144ce:	,--|-- bra.s 1454a <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   144d0:	|  '-> move.l 24(sp),-(sp)
   144d4:	|      jsr 15136 <getTextFromAnyVar>
   144da:	|      addq.l #4,sp
   144dc:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   144e0:	|      move.l 28(sp),-(sp)
   144e4:	|      jsr 15136 <getTextFromAnyVar>
   144ea:	|      addq.l #4,sp
   144ec:	|      move.l d0,12(sp)

		unlinkVar(var2);
   144f0:	|      move.l 28(sp),-(sp)
   144f4:	|      jsr 14dae <unlinkVar>
   144fa:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   144fc:	|      move.l 12(sp),-(sp)
   14500:	|      move.l 20(sp),-(sp)
   14504:	|      jsr 1408c <joinStrings>
   1450a:	|      addq.l #8,sp
   1450c:	|      movea.l 28(sp),a0
   14510:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   14514:	|      movea.l 28(sp),a0
   14518:	|      moveq #3,d0
   1451a:	|      move.l d0,(a0)
		FreeVec(string1);
   1451c:	|      move.l 16(sp),8(sp)
   14522:	|      move.l 1cdda <SysBase>,d0
   14528:	|      movea.l d0,a6
   1452a:	|      movea.l 8(sp),a1
   1452e:	|      jsr -690(a6)
		FreeVec(string2);
   14532:	|      move.l 12(sp),4(sp)
   14538:	|      move.l 1cdda <SysBase>,d0
   1453e:	|      movea.l d0,a6
   14540:	|      movea.l 4(sp),a1
   14544:	|      jsr -690(a6)
	}
}
   14548:	|      nop
   1454a:	'----> nop
   1454c:	       movea.l (sp)+,a6
   1454e:	       lea 16(sp),sp
   14552:	       rts

00014554 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   14554:	movea.l 8(sp),a0
   14558:	move.l 4(a0),-(sp)
   1455c:	move.l (a0),-(sp)
   1455e:	movea.l 12(sp),a0
   14562:	move.l 4(a0),-(sp)
   14566:	move.l (a0),-(sp)
   14568:	jsr 1458a <compareVars>
   1456e:	lea 16(sp),sp
   14572:	move.l d0,-(sp)
   14574:	pea 1 <_start+0x1>
   14578:	move.l 16(sp),-(sp)
   1457c:	jsr 15452 <setVariable>
   14582:	lea 12(sp),sp
}
   14586:	nop
   14588:	rts

0001458a <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   1458a:	       subq.l #4,sp
	int re = 0;
   1458c:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1458e:	       move.l 8(sp),d1
   14592:	       move.l 16(sp),d0
   14596:	       cmp.l d1,d0
   14598:	,----- bne.w 14660 <compareVars+0xd6>
		switch (var1.varType) {
   1459c:	|      move.l 8(sp),d0
   145a0:	|      moveq #9,d1
   145a2:	|      cmp.l d0,d1
   145a4:	|  ,-- bcs.w 14648 <compareVars+0xbe>
   145a8:	|  |   add.l d0,d0
   145aa:	|  |   movea.l d0,a0
   145ac:	|  |   adda.l #83384,a0
   145b2:	|  |   move.w (a0),d0
   145b4:	|  |   jmp (145b8 <compareVars+0x2e>,pc,d0.w)
   145b8:	|  |   ori.b #-112,(a4)
   145bc:	|  |   ori.l #5243024,(a0)
   145c2:	|  |   ori.l #7733392,(a0)
   145c8:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   145ce:	|  |   move.l d0,(sp)
			break;
   145d0:	+--|-- bra.w 14660 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   145d4:	|  |   move.l 12(sp),d1
   145d8:	|  |   move.l 20(sp),d0
   145dc:	|  |   cmp.l d1,d0
   145de:	|  |   seq d0
   145e0:	|  |   neg.b d0
   145e2:	|  |   move.b d0,d0
   145e4:	|  |   andi.l #255,d0
   145ea:	|  |   move.l d0,(sp)
			break;
   145ec:	+--|-- bra.s 14660 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   145ee:	|  |   move.l 12(sp),d1
   145f2:	|  |   move.l 20(sp),d0
   145f6:	|  |   cmp.l d1,d0
   145f8:	|  |   seq d0
   145fa:	|  |   neg.b d0
   145fc:	|  |   move.b d0,d0
   145fe:	|  |   andi.l #255,d0
   14604:	|  |   move.l d0,(sp)
			break;
   14606:	+--|-- bra.s 14660 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14608:	|  |   move.l 20(sp),d1
   1460c:	|  |   move.l 12(sp),d0
   14610:	|  |   move.l d1,-(sp)
   14612:	|  |   move.l d0,-(sp)
   14614:	|  |   jsr 1400c <strcmp>
   1461a:	|  |   addq.l #8,sp
   1461c:	|  |   tst.l d0
   1461e:	|  |   seq d0
   14620:	|  |   neg.b d0
   14622:	|  |   move.b d0,d0
   14624:	|  |   andi.l #255,d0
   1462a:	|  |   move.l d0,(sp)
			break;
   1462c:	+--|-- bra.s 14660 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1462e:	|  |   move.l 12(sp),d1
   14632:	|  |   move.l 20(sp),d0
   14636:	|  |   cmp.l d1,d0
   14638:	|  |   seq d0
   1463a:	|  |   neg.b d0
   1463c:	|  |   move.b d0,d0
   1463e:	|  |   andi.l #255,d0
   14644:	|  |   move.l d0,(sp)
			break;
   14646:	+--|-- bra.s 14660 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   14648:	|  '-> move.l 12(sp),d1
   1464c:	|      move.l 20(sp),d0
   14650:	|      cmp.l d1,d0
   14652:	|      seq d0
   14654:	|      neg.b d0
   14656:	|      move.b d0,d0
   14658:	|      andi.l #255,d0
   1465e:	|      move.l d0,(sp)
		}
	}
	return re;
   14660:	'----> move.l (sp),d0
}
   14662:	       addq.l #4,sp
   14664:	       rts

00014666 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   14666:	             lea -16(sp),sp
   1466a:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1466c:	             movea.l 28(sp),a0
   14670:	             moveq #6,d0
   14672:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   14674:	             moveq #12,d0
   14676:	             move.l d0,12(sp)
   1467a:	             clr.l 8(sp)
   1467e:	             move.l 1cdda <SysBase>,d0
   14684:	             movea.l d0,a6
   14686:	             move.l 12(sp),d0
   1468a:	             move.l 8(sp),d1
   1468e:	             jsr -684(a6)
   14692:	             move.l d0,4(sp)
   14696:	             move.l 4(sp),d0
   1469a:	             movea.l 28(sp),a0
   1469e:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   146a2:	             movea.l 28(sp),a0
   146a6:	             move.l 4(a0),d0
   146aa:	         ,-- bne.s 146b2 <copyStack+0x4c>
   146ac:	         |   clr.w d0
   146ae:	,--------|-- bra.w 14734 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   146b2:	|        '-> movea.l 28(sp),a0
   146b6:	|            movea.l 4(a0),a0
   146ba:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   146bc:	|            movea.l 28(sp),a0
   146c0:	|            movea.l 4(a0),a0
   146c4:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   146c8:	|            movea.l 28(sp),a0
   146cc:	|            movea.l 4(a0),a0
   146d0:	|            moveq #1,d0
   146d2:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   146d6:	|            movea.l 24(sp),a0
   146da:	|            movea.l 4(a0),a0
   146de:	|            move.l (a0),16(sp)

	while (a) {
   146e2:	|     ,----- bra.s 1472c <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   146e4:	|  ,--|----> movea.l 28(sp),a0
   146e8:	|  |  |      move.l 4(a0),d0
   146ec:	|  |  |      move.l d0,d1
   146ee:	|  |  |      move.l 16(sp),d0
   146f2:	|  |  |      move.l d1,-(sp)
   146f4:	|  |  |      move.l d0,-(sp)
   146f6:	|  |  |      jsr 1439c <addVarToStack>
   146fc:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   146fe:	|  |  |      movea.l 28(sp),a0
   14702:	|  |  |      movea.l 4(a0),a0
   14706:	|  |  |      move.l 4(a0),d0
   1470a:	|  |  |  ,-- bne.s 14722 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   1470c:	|  |  |  |   movea.l 28(sp),a0
   14710:	|  |  |  |   movea.l 4(a0),a1
   14714:	|  |  |  |   movea.l 28(sp),a0
   14718:	|  |  |  |   movea.l 4(a0),a0
   1471c:	|  |  |  |   move.l (a1),d0
   1471e:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   14722:	|  |  |  '-> movea.l 16(sp),a0
   14726:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   1472c:	|  |  '----> tst.l 16(sp)
   14730:	|  '-------- bne.s 146e4 <copyStack+0x7e>
	}

	return TRUE;
   14732:	|            moveq #1,d0
}
   14734:	'----------> movea.l (sp)+,a6
   14736:	             lea 16(sp),sp
   1473a:	             rts

0001473c <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   1473c:	                lea -20(sp),sp
   14740:	                move.l a6,-(sp)
   14742:	                move.l 36(sp),d0
   14746:	                move.w d0,d0
   14748:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   1474c:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   14752:	                clr.l 16(sp)

    while (*huntVar) {
   14756:	   ,----------- bra.s 147d4 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14758:	,--|----------> movea.l 20(sp),a0
   1475c:	|  |            movea.l (a0),a0
   1475e:	|  |            movea.l 28(sp),a1
   14762:	|  |            move.l 4(a1),-(sp)
   14766:	|  |            move.l (a1),-(sp)
   14768:	|  |            move.l 4(a0),-(sp)
   1476c:	|  |            move.l (a0),-(sp)
   1476e:	|  |            jsr 1458a <compareVars>
   14774:	|  |            lea 16(sp),sp
   14778:	|  |            tst.l d0
   1477a:	|  |  ,-------- beq.s 147c6 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1477c:	|  |  |         movea.l 20(sp),a0
   14780:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   14784:	|  |  |         movea.l 12(sp),a0
   14788:	|  |  |         move.l 8(a0),d0
   1478c:	|  |  |         movea.l 20(sp),a0
   14790:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14792:	|  |  |         move.l 12(sp),d0
   14796:	|  |  |         move.l d0,-(sp)
   14798:	|  |  |         jsr 14dae <unlinkVar>
   1479e:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   147a0:	|  |  |         move.l 12(sp),8(sp)
   147a6:	|  |  |         move.l 1cdda <SysBase>,d0
   147ac:	|  |  |         movea.l d0,a6
   147ae:	|  |  |         movea.l 8(sp),a1
   147b2:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   147b6:	|  |  |         tst.w 6(sp)
   147ba:	|  |  |     ,-- bne.s 147c0 <deleteVarFromStack+0x84>
   147bc:	|  |  |     |   moveq #1,d0
   147be:	|  |  |  ,--|-- bra.s 147e2 <deleteVarFromStack+0xa6>
            reply++;
   147c0:	|  |  |  |  '-> addq.l #1,16(sp)
   147c4:	|  +--|--|----- bra.s 147d4 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   147c6:	|  |  '--|----> movea.l 20(sp),a0
   147ca:	|  |     |      move.l (a0),d0
   147cc:	|  |     |      move.l d0,d1
   147ce:	|  |     |      addq.l #8,d1
   147d0:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   147d4:	|  '-----|----> movea.l 20(sp),a0
   147d8:	|        |      move.l (a0),d0
   147da:	'--------|----- bne.w 14758 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   147de:	         |      move.l 16(sp),d0
}
   147e2:	         '----> movea.l (sp)+,a6
   147e4:	                lea 20(sp),sp
   147e8:	                rts

000147ea <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   147ea:	       movea.l 4(sp),a0
   147ee:	       move.l 4(a0),d0
   147f2:	       cmp.l 8(sp),d0
   147f6:	   ,-- bhi.s 147fc <fastArrayGetByIndex+0x12>
   147f8:	   |   moveq #0,d0
   147fa:	,--|-- bra.s 1480a <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   147fc:	|  '-> movea.l 4(sp),a0
   14800:	|      move.l (a0),d1
   14802:	|      move.l 8(sp),d0
   14806:	|      lsl.l #3,d0
   14808:	|      add.l d1,d0
}
   1480a:	'----> rts

0001480c <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   1480c:	                lea -32(sp),sp
   14810:	                move.l a6,-(sp)
   14812:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14814:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14818:	                movea.l 44(sp),a0
   1481c:	                move.l (a0),d0
   1481e:	                moveq #8,d1
   14820:	                cmp.l d0,d1
   14822:	            ,-- beq.s 14830 <getCostumeFromVar+0x24>
   14824:	            |   moveq #9,d1
   14826:	            |   cmp.l d0,d1
   14828:	   ,--------|-- beq.w 148de <getCostumeFromVar+0xd2>
   1482c:	,--|--------|-- bra.w 148e8 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   14830:	|  |        '-> moveq #8,d0
   14832:	|  |            move.l d0,28(sp)
   14836:	|  |            clr.l 24(sp)
   1483a:	|  |            move.l 1cdda <SysBase>,d0
   14840:	|  |            movea.l d0,a6
   14842:	|  |            move.l 28(sp),d0
   14846:	|  |            move.l 24(sp),d1
   1484a:	|  |            jsr -684(a6)
   1484e:	|  |            move.l d0,20(sp)
   14852:	|  |            move.l 20(sp),d0
   14856:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   1485a:	|  |        ,-- bne.s 14862 <getCostumeFromVar+0x56>
   1485c:	|  |        |   moveq #0,d0
   1485e:	|  |  ,-----|-- bra.w 14912 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   14862:	|  |  |     '-> movea.l 36(sp),a0
   14866:	|  |  |         moveq #1,d1
   14868:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   1486c:	|  |  |         moveq #12,d0
   1486e:	|  |  |         move.l d0,16(sp)
   14872:	|  |  |         clr.l 12(sp)
   14876:	|  |  |         move.l 1cdda <SysBase>,d0
   1487c:	|  |  |         movea.l d0,a6
   1487e:	|  |  |         move.l 16(sp),d0
   14882:	|  |  |         move.l 12(sp),d1
   14886:	|  |  |         jsr -684(a6)
   1488a:	|  |  |         move.l d0,8(sp)
   1488e:	|  |  |         move.l 8(sp),d0
   14892:	|  |  |         movea.l 36(sp),a0
   14896:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14898:	|  |  |         movea.l 36(sp),a0
   1489c:	|  |  |         move.l (a0),d0
   1489e:	|  |  |     ,-- bne.s 148a4 <getCostumeFromVar+0x98>
   148a0:	|  |  |     |   moveq #0,d0
   148a2:	|  |  +-----|-- bra.s 14912 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   148a4:	|  |  |     '-> clr.l 32(sp)
   148a8:	|  |  |     ,-- bra.s 148d4 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   148aa:	|  |  |  ,--|-> movea.l 44(sp),a0
   148ae:	|  |  |  |  |   move.l 4(a0),d0
   148b2:	|  |  |  |  |   movea.l 36(sp),a0
   148b6:	|  |  |  |  |   movea.l (a0),a0
   148b8:	|  |  |  |  |   move.l 32(sp),d1
   148bc:	|  |  |  |  |   add.l d1,d1
   148be:	|  |  |  |  |   add.l d1,d1
   148c0:	|  |  |  |  |   lea (0,a0,d1.l),a2
   148c4:	|  |  |  |  |   move.l d0,-(sp)
   148c6:	|  |  |  |  |   jsr 9818 <copyAnim>
   148cc:	|  |  |  |  |   addq.l #4,sp
   148ce:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   148d0:	|  |  |  |  |   addq.l #1,32(sp)
   148d4:	|  |  |  |  '-> moveq #2,d1
   148d6:	|  |  |  |      cmp.l 32(sp),d1
   148da:	|  |  |  '----- bge.s 148aa <getCostumeFromVar+0x9e>
            }
            break;
   148dc:	|  |  |     ,-- bra.s 1490e <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   148de:	|  '--|-----|-> movea.l 44(sp),a0
   148e2:	|     |     |   move.l 4(a0),d0
   148e6:	|     +-----|-- bra.s 14912 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   148e8:	'-----|-----|-> movea.l 44(sp),a0
   148ec:	      |     |   move.l (a0),d0
   148ee:	      |     |   add.l d0,d0
   148f0:	      |     |   movea.l d0,a1
   148f2:	      |     |   adda.l d0,a1
   148f4:	      |     |   lea 1ccb4 <typeName>,a0
   148fa:	      |     |   move.l (0,a1,a0.l),d0
   148fe:	      |     |   move.l d0,-(sp)
   14900:	      |     |   pea 1a30f <PutChar+0x222d>
   14906:	      |     |   jsr 17640 <KPrintF>
   1490c:	      |     |   addq.l #8,sp
    }

    return p;
   1490e:	      |     '-> move.l 36(sp),d0
}
   14912:	      '-------> movea.l (sp)+,a2
   14914:	                movea.l (sp)+,a6
   14916:	                lea 32(sp),sp
   1491a:	                rts

0001491c <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   1491c:	                lea -96(sp),sp
   14920:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14924:	                move.l 116(sp),-(sp)
   14928:	                pea 1a347 <PutChar+0x2265>
   1492e:	                jsr 1408c <joinStrings>
   14934:	                addq.l #8,sp
   14936:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   1493a:	            ,-- bne.s 14942 <getSavedGamesStack+0x26>
   1493c:	            |   clr.w d0
   1493e:	,-----------|-- bra.w 14b56 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   14942:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   14946:	|               move.l #107337,98(sp)
   1494e:	|               moveq #-2,d0
   14950:	|               move.l d0,94(sp)
   14954:	|               move.l 1cde2 <DOSBase>,d0
   1495a:	|               movea.l d0,a6
   1495c:	|               move.l 98(sp),d1
   14960:	|               move.l 94(sp),d2
   14964:	|               jsr -84(a6)
   14968:	|               move.l d0,90(sp)
   1496c:	|               move.l 90(sp),d0
   14970:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14974:	|           ,-- bne.s 1497c <getSavedGamesStack+0x60>
   14976:	|           |   clr.w d0
   14978:	+-----------|-- bra.w 14b56 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1497c:	|           '-> move.l #260,82(sp)
   14984:	|               move.l #65536,78(sp)
   1498c:	|               move.l 1cdda <SysBase>,d0
   14992:	|               movea.l d0,a6
   14994:	|               move.l 82(sp),d0
   14998:	|               move.l 78(sp),d1
   1499c:	|               jsr -684(a6)
   149a0:	|               move.l d0,74(sp)
   149a4:	|               move.l 74(sp),d0
   149a8:	|               move.l d0,70(sp)
	if (!fib) {
   149ac:	|           ,-- bne.s 149ca <getSavedGamesStack+0xae>
		UnLock(dirLock);
   149ae:	|           |   move.l 86(sp),22(sp)
   149b4:	|           |   move.l 1cde2 <DOSBase>,d0
   149ba:	|           |   movea.l d0,a6
   149bc:	|           |   move.l 22(sp),d1
   149c0:	|           |   jsr -90(a6)
		return FALSE;
   149c4:	|           |   clr.w d0
   149c6:	+-----------|-- bra.w 14b56 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   149ca:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   149ce:	|               move.l 86(sp),66(sp)
   149d4:	|               move.l 70(sp),62(sp)
   149da:	|               move.l 1cde2 <DOSBase>,d0
   149e0:	|               movea.l d0,a6
   149e2:	|               move.l 66(sp),d1
   149e6:	|               move.l 62(sp),d2
   149ea:	|               jsr -102(a6)
   149ee:	|               move.l d0,58(sp)
   149f2:	|               move.l 58(sp),d0
   149f6:	|  ,----------- beq.w 14b0a <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   149fa:	|  |        ,-- bra.w 14ad6 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   149fe:	|  |  ,-----|-> move.l 70(sp),d2
   14a02:	|  |  |     |   addq.l #8,d2
   14a04:	|  |  |     |   move.l 70(sp),d0
   14a08:	|  |  |     |   addq.l #8,d0
   14a0a:	|  |  |     |   move.l d0,-(sp)
   14a0c:	|  |  |     |   jsr 1404c <strlen>
   14a12:	|  |  |     |   addq.l #4,sp
   14a14:	|  |  |     |   move.l d0,d3
   14a16:	|  |  |     |   move.l 116(sp),-(sp)
   14a1a:	|  |  |     |   jsr 1404c <strlen>
   14a20:	|  |  |     |   addq.l #4,sp
   14a22:	|  |  |     |   move.l d3,d1
   14a24:	|  |  |     |   sub.l d0,d1
   14a26:	|  |  |     |   move.l d2,d0
   14a28:	|  |  |     |   add.l d1,d0
   14a2a:	|  |  |     |   move.l 116(sp),-(sp)
   14a2e:	|  |  |     |   move.l d0,-(sp)
   14a30:	|  |  |     |   jsr 1400c <strcmp>
   14a36:	|  |  |     |   addq.l #8,sp
   14a38:	|  |  |     |   tst.l d0
   14a3a:	|  |  |     +-- bne.w 14ad6 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   14a3e:	|  |  |     |   move.l 70(sp),d0
   14a42:	|  |  |     |   addq.l #8,d0
   14a44:	|  |  |     |   move.l d0,-(sp)
   14a46:	|  |  |     |   jsr 1404c <strlen>
   14a4c:	|  |  |     |   addq.l #4,sp
   14a4e:	|  |  |     |   move.l d0,d2
   14a50:	|  |  |     |   move.l 116(sp),-(sp)
   14a54:	|  |  |     |   jsr 1404c <strlen>
   14a5a:	|  |  |     |   addq.l #4,sp
   14a5c:	|  |  |     |   move.l d0,d1
   14a5e:	|  |  |     |   move.l d2,d0
   14a60:	|  |  |     |   sub.l d1,d0
   14a62:	|  |  |     |   movea.l 70(sp),a0
   14a66:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14a6a:	|  |  |     |   move.l 70(sp),d0
   14a6e:	|  |  |     |   addq.l #8,d0
   14a70:	|  |  |     |   move.l d0,-(sp)
   14a72:	|  |  |     |   jsr 118 <decodeFilename>
   14a78:	|  |  |     |   addq.l #4,sp
   14a7a:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14a7e:	|  |  |     |   move.l 42(sp),-(sp)
   14a82:	|  |  |     |   lea 18(sp),a0
   14a86:	|  |  |     |   move.l a0,-(sp)
   14a88:	|  |  |     |   jsr 14d82 <makeTextVar>
   14a8e:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14a90:	|  |  |     |   move.l 42(sp),38(sp)
   14a96:	|  |  |     |   move.l 1cdda <SysBase>,d0
   14a9c:	|  |  |     |   movea.l d0,a6
   14a9e:	|  |  |     |   movea.l 38(sp),a1
   14aa2:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14aa6:	|  |  |     |   move.l 112(sp),d0
   14aaa:	|  |  |     |   move.l d0,-(sp)
   14aac:	|  |  |     |   lea 18(sp),a0
   14ab0:	|  |  |     |   move.l a0,-(sp)
   14ab2:	|  |  |     |   jsr 1439c <addVarToStack>
   14ab8:	|  |  |     |   addq.l #8,sp
   14aba:	|  |  |     |   tst.w d0
   14abc:	|  |  |  ,--|-- beq.s 14b0e <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14abe:	|  |  |  |  |   movea.l 112(sp),a0
   14ac2:	|  |  |  |  |   move.l 4(a0),d0
   14ac6:	|  |  |  |  +-- bne.s 14ad6 <getSavedGamesStack+0x1ba>
   14ac8:	|  |  |  |  |   movea.l 112(sp),a0
   14acc:	|  |  |  |  |   move.l (a0),d0
   14ace:	|  |  |  |  |   movea.l 112(sp),a0
   14ad2:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14ad6:	|  |  |  |  '-> move.l 86(sp),54(sp)
   14adc:	|  |  |  |      move.l 70(sp),50(sp)
   14ae2:	|  |  |  |      move.l 1cde2 <DOSBase>,d0
   14ae8:	|  |  |  |      movea.l d0,a6
   14aea:	|  |  |  |      move.l 54(sp),d1
   14aee:	|  |  |  |      move.l 50(sp),d2
   14af2:	|  |  |  |      jsr -108(a6)
   14af6:	|  |  |  |      move.l d0,46(sp)
   14afa:	|  |  |  |      move.l 46(sp),d0
   14afe:	|  |  '--|----- bne.w 149fe <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14b02:	|  |     |      move.w #1,106(sp)
   14b08:	|  |     |  ,-- bra.s 14b10 <getSavedGamesStack+0x1f4>
	}

cleanup:
   14b0a:	|  '-----|--|-> nop
   14b0c:	|        |  +-- bra.s 14b10 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14b0e:	|        '--|-> nop
	FreeVec(fib);
   14b10:	|           '-> move.l 70(sp),34(sp)
   14b16:	|               move.l 1cdda <SysBase>,d0
   14b1c:	|               movea.l d0,a6
   14b1e:	|               movea.l 34(sp),a1
   14b22:	|               jsr -690(a6)
	UnLock(dirLock);
   14b26:	|               move.l 86(sp),30(sp)
   14b2c:	|               move.l 1cde2 <DOSBase>,d0
   14b32:	|               movea.l d0,a6
   14b34:	|               move.l 30(sp),d1
   14b38:	|               jsr -90(a6)
	FreeVec(pattern);
   14b3c:	|               move.l 102(sp),26(sp)
   14b42:	|               move.l 1cdda <SysBase>,d0
   14b48:	|               movea.l d0,a6
   14b4a:	|               movea.l 26(sp),a1
   14b4e:	|               jsr -690(a6)
	return result;
   14b52:	|               move.w 106(sp),d0
}
   14b56:	'-------------> movem.l (sp)+,d2-d3/a6
   14b5a:	                lea 96(sp),sp
   14b5e:	                rts

00014b60 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14b60:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14b62:	       movea.l 20(sp),a0
   14b66:	       move.l (a0),d0
   14b68:	       cmp.l 16(sp),d0
   14b6c:	,----- beq.s 14bd0 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14b6e:	|      move.l 16(sp),d0
   14b72:	|      add.l d0,d0
   14b74:	|      movea.l d0,a1
   14b76:	|      adda.l d0,a1
   14b78:	|      lea 1ccb4 <typeName>,a0
   14b7e:	|      move.l (0,a1,a0.l),d0
   14b82:	|      move.l d0,-(sp)
   14b84:	|      pea 1a34b <PutChar+0x2269>
   14b8a:	|      jsr 1408c <joinStrings>
   14b90:	|      addq.l #8,sp
   14b92:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14b96:	|      movea.l 20(sp),a0
   14b9a:	|      move.l (a0),d0
   14b9c:	|      add.l d0,d0
   14b9e:	|      movea.l d0,a1
   14ba0:	|      adda.l d0,a1
   14ba2:	|      lea 1ccb4 <typeName>,a0
   14ba8:	|      move.l (0,a1,a0.l),d0
   14bac:	|      move.l d0,-(sp)
   14bae:	|      pea 1a38d <PutChar+0x22ab>
   14bb4:	|      jsr 1408c <joinStrings>
   14bba:	|      addq.l #8,sp
   14bbc:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14bbe:	|      move.l (sp),-(sp)
   14bc0:	|      move.l 8(sp),-(sp)
   14bc4:	|      jsr 17640 <KPrintF>
   14bca:	|      addq.l #8,sp

		return FALSE;
   14bcc:	|      clr.w d0
   14bce:	|  ,-- bra.s 14be0 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14bd0:	'--|-> movea.l 20(sp),a0
   14bd4:	   |   move.l 4(a0),d0
   14bd8:	   |   movea.l 12(sp),a0
   14bdc:	   |   move.l d0,(a0)
	return TRUE;
   14bde:	   |   moveq #1,d0
}
   14be0:	   '-> addq.l #8,sp
   14be2:	       rts

00014be4 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14be4:	move.l 8(sp),-(sp)
   14be8:	jsr 7976 <getNumberedString>
   14bee:	addq.l #4,sp
   14bf0:	move.l d0,-(sp)
   14bf2:	move.l 8(sp),-(sp)
   14bf6:	jsr 14d82 <makeTextVar>
   14bfc:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14bfe:	movea.l 4(sp),a0
   14c02:	move.l 4(a0),d0
   14c06:	sne d0
   14c08:	neg.b d0
   14c0a:	move.b d0,d0
   14c0c:	andi.w #255,d0
}
   14c10:	rts

00014c12 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14c12:	          subq.l #8,sp
    int size = stackSize(stacky);
   14c14:	          move.l 16(sp),-(sp)
   14c18:	          jsr 154c0 <stackSize>
   14c1e:	          addq.l #4,sp
   14c20:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14c24:	          move.l 4(sp),-(sp)
   14c28:	          move.l 16(sp),-(sp)
   14c2c:	          jsr 14c7c <makeFastArraySize>
   14c32:	          addq.l #8,sp
   14c34:	          tst.w d0
   14c36:	      ,-- bne.s 14c3c <makeFastArrayFromStack+0x2a>
   14c38:	      |   clr.w d0
   14c3a:	,-----|-- bra.s 14c78 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14c3c:	|     '-> movea.l 16(sp),a0
   14c40:	|         move.l (a0),(sp)
    size = 0;
   14c42:	|         clr.l 4(sp)
    while (allV) {
   14c46:	|     ,-- bra.s 14c72 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14c48:	|  ,--|-> movea.l 12(sp),a0
   14c4c:	|  |  |   movea.l 4(a0),a0
   14c50:	|  |  |   move.l (a0),d1
   14c52:	|  |  |   move.l 4(sp),d0
   14c56:	|  |  |   lsl.l #3,d0
   14c58:	|  |  |   add.l d0,d1
   14c5a:	|  |  |   move.l (sp),d0
   14c5c:	|  |  |   move.l d1,-(sp)
   14c5e:	|  |  |   move.l d0,-(sp)
   14c60:	|  |  |   jsr 14efe <copyMain>
   14c66:	|  |  |   addq.l #8,sp
        size++;
   14c68:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14c6c:	|  |  |   movea.l (sp),a0
   14c6e:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14c72:	|  |  '-> tst.l (sp)
   14c74:	|  '----- bne.s 14c48 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14c76:	|         moveq #1,d0
}
   14c78:	'-------> addq.l #8,sp
   14c7a:	          rts

00014c7c <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14c7c:	          lea -28(sp),sp
   14c80:	          move.l a6,-(sp)
    if (size < 0) {
   14c82:	          tst.l 40(sp)
   14c86:	      ,-- bge.s 14c9c <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14c88:	      |   pea 1a3d2 <PutChar+0x22f0>
   14c8e:	      |   jsr 17640 <KPrintF>
   14c94:	      |   addq.l #4,sp
		return FALSE;
   14c96:	      |   clr.w d0
   14c98:	,-----|-- bra.w 14d7a <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14c9c:	|     '-> move.l 36(sp),-(sp)
   14ca0:	|         jsr 14dae <unlinkVar>
   14ca6:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14ca8:	|         movea.l 36(sp),a0
   14cac:	|         moveq #10,d0
   14cae:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14cb0:	|         moveq #12,d0
   14cb2:	|         move.l d0,24(sp)
   14cb6:	|         clr.l 20(sp)
   14cba:	|         move.l 1cdda <SysBase>,d0
   14cc0:	|         movea.l d0,a6
   14cc2:	|         move.l 24(sp),d0
   14cc6:	|         move.l 20(sp),d1
   14cca:	|         jsr -684(a6)
   14cce:	|         move.l d0,16(sp)
   14cd2:	|         move.l 16(sp),d0
   14cd6:	|         movea.l 36(sp),a0
   14cda:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14cde:	|         movea.l 36(sp),a0
   14ce2:	|         move.l 4(a0),d0
   14ce6:	|     ,-- bne.s 14cee <makeFastArraySize+0x72>
   14ce8:	|     |   clr.w d0
   14cea:	+-----|-- bra.w 14d7a <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14cee:	|     '-> move.l 40(sp),d0
   14cf2:	|         lsl.l #3,d0
   14cf4:	|         move.l d0,12(sp)
   14cf8:	|         clr.l 8(sp)
   14cfc:	|         move.l 1cdda <SysBase>,d0
   14d02:	|         movea.l d0,a6
   14d04:	|         move.l 12(sp),d0
   14d08:	|         move.l 8(sp),d1
   14d0c:	|         jsr -684(a6)
   14d10:	|         move.l d0,4(sp)
   14d14:	|         move.l 4(sp),d0
   14d18:	|         movea.l 36(sp),a0
   14d1c:	|         movea.l 4(a0),a0
   14d20:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14d22:	|         movea.l 36(sp),a0
   14d26:	|         movea.l 4(a0),a0
   14d2a:	|         move.l (a0),d0
   14d2c:	|     ,-- bne.s 14d32 <makeFastArraySize+0xb6>
   14d2e:	|     |   clr.w d0
   14d30:	+-----|-- bra.s 14d7a <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14d32:	|     '-> clr.l 28(sp)
   14d36:	|     ,-- bra.s 14d52 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14d38:	|  ,--|-> movea.l 36(sp),a0
   14d3c:	|  |  |   movea.l 4(a0),a0
   14d40:	|  |  |   move.l (a0),d1
   14d42:	|  |  |   move.l 28(sp),d0
   14d46:	|  |  |   lsl.l #3,d0
   14d48:	|  |  |   movea.l d1,a0
   14d4a:	|  |  |   adda.l d0,a0
   14d4c:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14d4e:	|  |  |   addq.l #1,28(sp)
   14d52:	|  |  '-> move.l 28(sp),d0
   14d56:	|  |      cmp.l 40(sp),d0
   14d5a:	|  '----- blt.s 14d38 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14d5c:	|         movea.l 36(sp),a0
   14d60:	|         movea.l 4(a0),a0
   14d64:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14d6a:	|         movea.l 36(sp),a0
   14d6e:	|         movea.l 4(a0),a0
   14d72:	|         moveq #1,d0
   14d74:	|         move.l d0,8(a0)
    return TRUE;
   14d78:	|         moveq #1,d0
}
   14d7a:	'-------> movea.l (sp)+,a6
   14d7c:	          lea 28(sp),sp
   14d80:	          rts

00014d82 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14d82:	move.l 4(sp),-(sp)
   14d86:	jsr 14dae <unlinkVar>
   14d8c:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14d8e:	movea.l 4(sp),a0
   14d92:	moveq #3,d0
   14d94:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14d96:	move.l 8(sp),-(sp)
   14d9a:	jsr b8 <copyString>
   14da0:	addq.l #4,sp
   14da2:	movea.l 4(sp),a0
   14da6:	move.l d0,4(a0)
}
   14daa:	nop
   14dac:	rts

00014dae <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14dae:	                      lea -16(sp),sp
   14db2:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14db4:	                      movea.l 24(sp),a0
   14db8:	                      move.l (a0),d0
   14dba:	                      moveq #10,d1
   14dbc:	                      cmp.l d0,d1
   14dbe:	            ,-------- beq.w 14e76 <unlinkVar+0xc8>
   14dc2:	            |         moveq #10,d1
   14dc4:	            |         cmp.l d0,d1
   14dc6:	,-----------|-------- bcs.w 14eea <unlinkVar+0x13c>
   14dca:	|           |         moveq #8,d1
   14dcc:	|           |         cmp.l d0,d1
   14dce:	|  ,--------|-------- beq.w 14ed6 <unlinkVar+0x128>
   14dd2:	|  |        |         moveq #8,d1
   14dd4:	|  |        |         cmp.l d0,d1
   14dd6:	+--|--------|-------- bcs.w 14eea <unlinkVar+0x13c>
   14dda:	|  |        |         moveq #3,d1
   14ddc:	|  |        |         cmp.l d0,d1
   14dde:	|  |        |     ,-- beq.s 14dea <unlinkVar+0x3c>
   14de0:	|  |        |     |   moveq #6,d1
   14de2:	|  |        |     |   cmp.l d0,d1
   14de4:	|  |        |  ,--|-- beq.s 14e10 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14de6:	+--|--------|--|--|-- bra.w 14eea <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14dea:	|  |        |  |  '-> movea.l 24(sp),a0
   14dee:	|  |        |  |      move.l 4(a0),4(sp)
   14df4:	|  |        |  |      move.l 1cdda <SysBase>,d0
   14dfa:	|  |        |  |      movea.l d0,a6
   14dfc:	|  |        |  |      movea.l 4(sp),a1
   14e00:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14e04:	|  |        |  |      movea.l 24(sp),a0
   14e08:	|  |        |  |      clr.l 4(a0)
		break;
   14e0c:	|  |  ,-----|--|----- bra.w 14ef4 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14e10:	|  |  |     |  '----> movea.l 24(sp),a0
   14e14:	|  |  |     |         movea.l 4(a0),a0
   14e18:	|  |  |     |         move.l 8(a0),d0
   14e1c:	|  |  |     |         subq.l #1,d0
   14e1e:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14e22:	|  |  |     |         movea.l 24(sp),a0
   14e26:	|  |  |     |         movea.l 4(a0),a0
   14e2a:	|  |  |     |         move.l 8(a0),d0
   14e2e:	|  |  |  ,--|-------- bgt.w 14eee <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14e32:	|  |  |  |  |     ,-- bra.s 14e46 <unlinkVar+0x98>
   14e34:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   14e38:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14e3c:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14e3e:	|  |  |  |  |  |  |   jsr 154e4 <trimStack>
   14e44:	|  |  |  |  |  |  |   addq.l #4,sp
   14e46:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   14e4a:	|  |  |  |  |  |      movea.l 4(a0),a0
   14e4e:	|  |  |  |  |  |      move.l (a0),d0
   14e50:	|  |  |  |  |  '----- bne.s 14e34 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14e52:	|  |  |  |  |         movea.l 24(sp),a0
   14e56:	|  |  |  |  |         move.l 4(a0),8(sp)
   14e5c:	|  |  |  |  |         move.l 1cdda <SysBase>,d0
   14e62:	|  |  |  |  |         movea.l d0,a6
   14e64:	|  |  |  |  |         movea.l 8(sp),a1
   14e68:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14e6c:	|  |  |  |  |         movea.l 24(sp),a0
   14e70:	|  |  |  |  |         clr.l 4(a0)
		break;
   14e74:	|  |  |  +--|-------- bra.s 14eee <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14e76:	|  |  |  |  '-------> movea.l 24(sp),a0
   14e7a:	|  |  |  |            movea.l 4(a0),a0
   14e7e:	|  |  |  |            move.l 8(a0),d0
   14e82:	|  |  |  |            subq.l #1,d0
   14e84:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14e88:	|  |  |  |            movea.l 24(sp),a0
   14e8c:	|  |  |  |            movea.l 4(a0),a0
   14e90:	|  |  |  |            move.l 8(a0),d0
   14e94:	|  |  |  |        ,-- bgt.s 14ef2 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14e96:	|  |  |  |        |   movea.l 24(sp),a0
   14e9a:	|  |  |  |        |   movea.l 4(a0),a0
   14e9e:	|  |  |  |        |   move.l (a0),16(sp)
   14ea2:	|  |  |  |        |   move.l 1cdda <SysBase>,d0
   14ea8:	|  |  |  |        |   movea.l d0,a6
   14eaa:	|  |  |  |        |   movea.l 16(sp),a1
   14eae:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14eb2:	|  |  |  |        |   movea.l 24(sp),a0
   14eb6:	|  |  |  |        |   move.l 4(a0),12(sp)
   14ebc:	|  |  |  |        |   move.l 1cdda <SysBase>,d0
   14ec2:	|  |  |  |        |   movea.l d0,a6
   14ec4:	|  |  |  |        |   movea.l 12(sp),a1
   14ec8:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14ecc:	|  |  |  |        |   movea.l 24(sp),a0
   14ed0:	|  |  |  |        |   clr.l 4(a0)
		break;
   14ed4:	|  |  |  |        +-- bra.s 14ef2 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14ed6:	|  '--|--|--------|-> movea.l 24(sp),a0
   14eda:	|     |  |        |   move.l 4(a0),d0
   14ede:	|     |  |        |   move.l d0,-(sp)
   14ee0:	|     |  |        |   jsr 9be4 <deleteAnim>
   14ee6:	|     |  |        |   addq.l #4,sp
		break;
   14ee8:	|     +--|--------|-- bra.s 14ef4 <unlinkVar+0x146>
		break;
   14eea:	'-----|--|--------|-> nop
   14eec:	      +--|--------|-- bra.s 14ef4 <unlinkVar+0x146>
		break;
   14eee:	      |  '--------|-> nop
   14ef0:	      +-----------|-- bra.s 14ef4 <unlinkVar+0x146>
		break;
   14ef2:	      |           '-> nop
	}
}
   14ef4:	      '-------------> nop
   14ef6:	                      movea.l (sp)+,a6
   14ef8:	                      lea 16(sp),sp
   14efc:	                      rts

00014efe <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14efe:	       movea.l 4(sp),a0
   14f02:	       move.l (a0),d0
   14f04:	       movea.l 8(sp),a0
   14f08:	       move.l d0,(a0)
	switch (to->varType) {
   14f0a:	       movea.l 8(sp),a0
   14f0e:	       move.l (a0),d0
   14f10:	       moveq #10,d1
   14f12:	       cmp.l d0,d1
   14f14:	,----- bcs.w 15006 <copyMain+0x108>
   14f18:	|      add.l d0,d0
   14f1a:	|      movea.l d0,a0
   14f1c:	|      adda.l #85800,a0
   14f22:	|      move.w (a0),d0
   14f24:	|      jmp (14f28 <copyMain+0x2a>,pc,d0.w)
   14f28:	|      .short 0x00da
   14f2a:	|      ori.b #22,(a6)
   14f2e:	|      ori.w #22,(a4)
   14f32:	|      ori.b #-126,(a6)
   14f36:	|      ori.b #-68,(a6)
   14f3a:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14f42:	|      move.l 4(a0),d0
   14f46:	|      movea.l 8(sp),a0
   14f4a:	|      move.l d0,4(a0)
		return TRUE;
   14f4e:	|      moveq #1,d0
   14f50:	|  ,-- bra.w 15018 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14f54:	|  |   movea.l 4(sp),a0
   14f58:	|  |   move.l 4(a0),d0
   14f5c:	|  |   movea.l 8(sp),a0
   14f60:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14f64:	|  |   movea.l 8(sp),a0
   14f68:	|  |   movea.l 4(a0),a0
   14f6c:	|  |   move.l 8(a0),d0
   14f70:	|  |   addq.l #1,d0
   14f72:	|  |   move.l d0,8(a0)
		return TRUE;
   14f76:	|  |   moveq #1,d0
   14f78:	|  +-- bra.w 15018 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14f7c:	|  |   movea.l 4(sp),a0
   14f80:	|  |   move.l 4(a0),d0
   14f84:	|  |   move.l d0,-(sp)
   14f86:	|  |   jsr b8 <copyString>
   14f8c:	|  |   addq.l #4,sp
   14f8e:	|  |   movea.l 8(sp),a0
   14f92:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14f96:	|  |   movea.l 8(sp),a0
   14f9a:	|  |   move.l 4(a0),d0
   14f9e:	|  |   sne d0
   14fa0:	|  |   neg.b d0
   14fa2:	|  |   move.b d0,d0
   14fa4:	|  |   andi.w #255,d0
   14fa8:	|  +-- bra.s 15018 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14faa:	|  |   movea.l 4(sp),a0
   14fae:	|  |   move.l 4(a0),d0
   14fb2:	|  |   movea.l 8(sp),a0
   14fb6:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14fba:	|  |   movea.l 8(sp),a0
   14fbe:	|  |   movea.l 4(a0),a0
   14fc2:	|  |   move.l 8(a0),d0
   14fc6:	|  |   addq.l #1,d0
   14fc8:	|  |   move.l d0,8(a0)
		return TRUE;
   14fcc:	|  |   moveq #1,d0
   14fce:	|  +-- bra.s 15018 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14fd0:	|  |   movea.l 4(sp),a0
   14fd4:	|  |   move.l 4(a0),d0
   14fd8:	|  |   movea.l 8(sp),a0
   14fdc:	|  |   move.l d0,4(a0)
		return TRUE;
   14fe0:	|  |   moveq #1,d0
   14fe2:	|  +-- bra.s 15018 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14fe4:	|  |   movea.l 4(sp),a0
   14fe8:	|  |   move.l 4(a0),d0
   14fec:	|  |   move.l d0,-(sp)
   14fee:	|  |   jsr 9818 <copyAnim>
   14ff4:	|  |   addq.l #4,sp
   14ff6:	|  |   movea.l 8(sp),a0
   14ffa:	|  |   move.l d0,4(a0)
		return TRUE;
   14ffe:	|  |   moveq #1,d0
   15000:	|  +-- bra.s 15018 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   15002:	|  |   moveq #1,d0
   15004:	|  +-- bra.s 15018 <copyMain+0x11a>

		default:
		break;
   15006:	'--|-> nop
	}
	KPrintF("Unknown value type");
   15008:	   |   pea 1a423 <PutChar+0x2341>
   1500e:	   |   jsr 17640 <KPrintF>
   15014:	   |   addq.l #4,sp
	return FALSE;
   15016:	   |   clr.w d0
}
   15018:	   '-> rts

0001501a <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   1501a:	move.l 8(sp),-(sp)
   1501e:	jsr 14dae <unlinkVar>
   15024:	addq.l #4,sp
	return copyMain(from, to);
   15026:	move.l 8(sp),-(sp)
   1502a:	move.l 8(sp),-(sp)
   1502e:	jsr 14efe <copyMain>
   15034:	addq.l #8,sp
}
   15036:	rts

00015038 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   15038:	       movea.l 4(sp),a0
   1503c:	       move.l (a0),d0
   1503e:	       moveq #8,d1
   15040:	       cmp.l d0,d1
   15042:	   ,-- bne.s 15058 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   15044:	   |   movea.l 4(sp),a0
   15048:	   |   move.l 4(a0),d0
   1504c:	   |   move.l d0,-(sp)
   1504e:	   |   jsr 9818 <copyAnim>
   15054:	   |   addq.l #4,sp
   15056:	,--|-- bra.s 1509e <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   15058:	|  '-> movea.l 4(sp),a0
   1505c:	|      move.l (a0),d0
   1505e:	|      moveq #1,d1
   15060:	|      cmp.l d0,d1
   15062:	|  ,-- bne.s 15076 <getAnimationFromVar+0x3e>
   15064:	|  |   movea.l 4(sp),a0
   15068:	|  |   move.l 4(a0),d0
   1506c:	|  +-- bne.s 15076 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   1506e:	|  |   jsr b04a <makeNullAnim>
   15074:	+--|-- bra.s 1509e <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   15076:	|  '-> movea.l 4(sp),a0
   1507a:	|      move.l (a0),d0
   1507c:	|      add.l d0,d0
   1507e:	|      movea.l d0,a1
   15080:	|      adda.l d0,a1
   15082:	|      lea 1ccb4 <typeName>,a0
   15088:	|      move.l (0,a1,a0.l),d0
   1508c:	|      move.l d0,-(sp)
   1508e:	|      pea 1a30f <PutChar+0x222d>
   15094:	|      jsr 17640 <KPrintF>
   1509a:	|      addq.l #8,sp
	return NULL;
   1509c:	|      moveq #0,d0
}
   1509e:	'----> rts

000150a0 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   150a0:	       movea.l 4(sp),a0
   150a4:	       move.l (a0),d0
   150a6:	       moveq #10,d1
   150a8:	       cmp.l d0,d1
   150aa:	,----- bcs.w 15130 <getBoolean+0x90>
   150ae:	|      add.l d0,d0
   150b0:	|      movea.l d0,a0
   150b2:	|      adda.l #86206,a0
   150b8:	|      move.w (a0),d0
   150ba:	|      jmp (150be <getBoolean+0x1e>,pc,d0.w)
   150be:	|      ori.b #26,(a6)
   150c2:	|      ori.w #68,(114,a2,d0.w)
   150c8:	|      ori.w #46,(114,a2,d0.w)
   150ce:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   150d4:	|      clr.w d0
   150d6:	|  ,-- bra.s 15134 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   150d8:	|  |   movea.l 4(sp),a0
   150dc:	|  |   move.l 4(a0),d0
   150e0:	|  |   sne d0
   150e2:	|  |   neg.b d0
   150e4:	|  |   move.b d0,d0
   150e6:	|  |   andi.w #255,d0
   150ea:	|  +-- bra.s 15134 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   150ec:	|  |   movea.l 4(sp),a0
   150f0:	|  |   movea.l 4(a0),a0
   150f4:	|  |   move.l (a0),d0
   150f6:	|  |   sne d0
   150f8:	|  |   neg.b d0
   150fa:	|  |   move.b d0,d0
   150fc:	|  |   andi.w #255,d0
   15100:	|  +-- bra.s 15134 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   15102:	|  |   movea.l 4(sp),a0
   15106:	|  |   movea.l 4(a0),a0
   1510a:	|  |   move.b (a0),d0
   1510c:	|  |   sne d0
   1510e:	|  |   neg.b d0
   15110:	|  |   move.b d0,d0
   15112:	|  |   andi.w #255,d0
   15116:	|  +-- bra.s 15134 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   15118:	|  |   movea.l 4(sp),a0
   1511c:	|  |   movea.l 4(a0),a0
   15120:	|  |   move.l 4(a0),d0
   15124:	|  |   sne d0
   15126:	|  |   neg.b d0
   15128:	|  |   move.b d0,d0
   1512a:	|  |   andi.w #255,d0
   1512e:	|  +-- bra.s 15134 <getBoolean+0x94>

		default:
		break;
   15130:	'--|-> nop
	}
	return TRUE;
   15132:	   |   moveq #1,d0
}
   15134:	   '-> rts

00015136 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   15136:	      ,----------> lea -76(sp),sp
   1513a:	      |            move.l a6,-(sp)
	switch (from->varType) {
   1513c:	      |            movea.l 84(sp),a0
   15140:	      |            move.l (a0),d0
   15142:	      |            moveq #10,d1
   15144:	      |            cmp.l d0,d1
   15146:	,-----|----------- bcs.w 153e4 <getTextFromAnyVar+0x2ae>
   1514a:	|     |            add.l d0,d0
   1514c:	|     |            movea.l d0,a0
   1514e:	|     |            adda.l #86362,a0
   15154:	|     |            move.w (a0),d0
   15156:	|     |            jmp (1515a <getTextFromAnyVar+0x24>,pc,d0.w)
   1515a:	|     |            .short 0x028a
   1515c:	|     |            bset d0,(a0)+
   1515e:	|     |            .short 0x028a
   15160:	|     |            ori.b #-118,(a6)
   15164:	|     |            andi.b #8,ccr
   15168:	|     |            andi.w #650,-(a0)
   1516c:	|     |            .short 0x028a
   1516e:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   15174:	|     |            move.l 4(a0),d0
   15178:	|     |            move.l d0,-(sp)
   1517a:	|     |            jsr b8 <copyString>
   15180:	|     |            addq.l #4,sp
   15182:	|  ,--|----------- bra.w 15406 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   15186:	|  |  |            pea 1a436 <PutChar+0x2354>
   1518c:	|  |  |            jsr b8 <copyString>
   15192:	|  |  |            addq.l #4,sp
   15194:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   15198:	|  |  |            clr.l 72(sp)
   1519c:	|  |  |     ,----- bra.w 15246 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   151a0:	|  |  |  ,--|----> pea 1a43c <PutChar+0x235a>
   151a6:	|  |  |  |  |      move.l 80(sp),-(sp)
   151aa:	|  |  |  |  |      jsr 1408c <joinStrings>
   151b0:	|  |  |  |  |      addq.l #8,sp
   151b2:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   151b6:	|  |  |  |  |  ,-- bne.s 151be <getTextFromAnyVar+0x88>
   151b8:	|  |  |  |  |  |   moveq #0,d0
   151ba:	|  +--|--|--|--|-- bra.w 15406 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   151be:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   151c4:	|  |  |  |  |      move.l 1cdda <SysBase>,d0
   151ca:	|  |  |  |  |      movea.l d0,a6
   151cc:	|  |  |  |  |      movea.l 56(sp),a1
   151d0:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   151d4:	|  |  |  |  |      movea.l 84(sp),a0
   151d8:	|  |  |  |  |      movea.l 4(a0),a0
   151dc:	|  |  |  |  |      move.l (a0),d1
   151de:	|  |  |  |  |      move.l 72(sp),d0
   151e2:	|  |  |  |  |      lsl.l #3,d0
   151e4:	|  |  |  |  |      add.l d1,d0
   151e6:	|  |  |  |  |      move.l d0,-(sp)
   151e8:	|  |  +--|--|----- jsr 15136 <getTextFromAnyVar>(pc)
   151ec:	|  |  |  |  |      addq.l #4,sp
   151ee:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   151f2:	|  |  |  |  |      move.l 52(sp),-(sp)
   151f6:	|  |  |  |  |      move.l 64(sp),-(sp)
   151fa:	|  |  |  |  |      jsr 1408c <joinStrings>
   15200:	|  |  |  |  |      addq.l #8,sp
   15202:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   15206:	|  |  |  |  |  ,-- bne.s 1520e <getTextFromAnyVar+0xd8>
   15208:	|  |  |  |  |  |   moveq #0,d0
   1520a:	|  +--|--|--|--|-- bra.w 15406 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1520e:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   15214:	|  |  |  |  |      move.l 1cdda <SysBase>,d0
   1521a:	|  |  |  |  |      movea.l d0,a6
   1521c:	|  |  |  |  |      movea.l 48(sp),a1
   15220:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   15224:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   15228:	|  |  |  |  |      move.l 60(sp),44(sp)
   1522e:	|  |  |  |  |      move.l 1cdda <SysBase>,d0
   15234:	|  |  |  |  |      movea.l d0,a6
   15236:	|  |  |  |  |      movea.l 44(sp),a1
   1523a:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   1523e:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   15242:	|  |  |  |  |      addq.l #1,72(sp)
   15246:	|  |  |  |  '----> movea.l 84(sp),a0
   1524a:	|  |  |  |         movea.l 4(a0),a0
   1524e:	|  |  |  |         move.l 4(a0),d0
   15252:	|  |  |  |         cmp.l 72(sp),d0
   15256:	|  |  |  '-------- bgt.w 151a0 <getTextFromAnyVar+0x6a>
			}
			return builder;
   1525a:	|  |  |            move.l 76(sp),d0
   1525e:	|  +--|----------- bra.w 15406 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   15262:	|  |  |            pea 1a43e <PutChar+0x235c>
   15268:	|  |  |            jsr b8 <copyString>
   1526e:	|  |  |            addq.l #4,sp
   15270:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   15274:	|  |  |            movea.l 84(sp),a0
   15278:	|  |  |            movea.l 4(a0),a0
   1527c:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   15280:	|  |  |     ,----- bra.w 15322 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   15284:	|  |  |  ,--|----> pea 1a43c <PutChar+0x235a>
   1528a:	|  |  |  |  |      move.l 72(sp),-(sp)
   1528e:	|  |  |  |  |      jsr 1408c <joinStrings>
   15294:	|  |  |  |  |      addq.l #8,sp
   15296:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   1529a:	|  |  |  |  |  ,-- bne.s 152a2 <getTextFromAnyVar+0x16c>
   1529c:	|  |  |  |  |  |   moveq #0,d0
   1529e:	|  +--|--|--|--|-- bra.w 15406 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   152a2:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   152a8:	|  |  |  |  |      move.l 1cdda <SysBase>,d0
   152ae:	|  |  |  |  |      movea.l d0,a6
   152b0:	|  |  |  |  |      movea.l 32(sp),a1
   152b4:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   152b8:	|  |  |  |  |      move.l 64(sp),d0
   152bc:	|  |  |  |  |      move.l d0,-(sp)
   152be:	|  |  '--|--|----- jsr 15136 <getTextFromAnyVar>(pc)
   152c2:	|  |     |  |      addq.l #4,sp
   152c4:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   152c8:	|  |     |  |      move.l 28(sp),-(sp)
   152cc:	|  |     |  |      move.l 40(sp),-(sp)
   152d0:	|  |     |  |      jsr 1408c <joinStrings>
   152d6:	|  |     |  |      addq.l #8,sp
   152d8:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   152dc:	|  |     |  |  ,-- bne.s 152e4 <getTextFromAnyVar+0x1ae>
   152de:	|  |     |  |  |   moveq #0,d0
   152e0:	|  +-----|--|--|-- bra.w 15406 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   152e4:	|  |     |  |  '-> move.l 28(sp),24(sp)
   152ea:	|  |     |  |      move.l 1cdda <SysBase>,d0
   152f0:	|  |     |  |      movea.l d0,a6
   152f2:	|  |     |  |      movea.l 24(sp),a1
   152f6:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   152fa:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   152fe:	|  |     |  |      move.l 36(sp),20(sp)
   15304:	|  |     |  |      move.l 1cdda <SysBase>,d0
   1530a:	|  |     |  |      movea.l d0,a6
   1530c:	|  |     |  |      movea.l 20(sp),a1
   15310:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   15314:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   15318:	|  |     |  |      movea.l 64(sp),a0
   1531c:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   15322:	|  |     |  '----> tst.l 64(sp)
   15326:	|  |     '-------- bne.w 15284 <getTextFromAnyVar+0x14e>
			}
			return builder;
   1532a:	|  |               move.l 68(sp),d0
   1532e:	|  +-------------- bra.w 15406 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   15332:	|  |               moveq #10,d0
   15334:	|  |               move.l d0,16(sp)
   15338:	|  |               clr.l 12(sp)
   1533c:	|  |               move.l 1cdda <SysBase>,d0
   15342:	|  |               movea.l d0,a6
   15344:	|  |               move.l 16(sp),d0
   15348:	|  |               move.l 12(sp),d1
   1534c:	|  |               jsr -684(a6)
   15350:	|  |               move.l d0,8(sp)
   15354:	|  |               move.l 8(sp),d0
   15358:	|  |               move.l d0,4(sp)
			if (! buff) {
   1535c:	|  |           ,-- bne.s 15372 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   1535e:	|  |           |   pea 1a445 <PutChar+0x2363>
   15364:	|  |           |   jsr 17640 <KPrintF>
   1536a:	|  |           |   addq.l #4,sp
				return NULL;
   1536c:	|  |           |   moveq #0,d0
   1536e:	|  +-----------|-- bra.w 15406 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   15372:	|  |           '-> movea.l 84(sp),a0
   15376:	|  |               move.l 4(a0),d0
   1537a:	|  |               move.l d0,-(sp)
   1537c:	|  |               pea 1a46f <PutChar+0x238d>
   15382:	|  |               move.l 12(sp),-(sp)
   15386:	|  |               jsr 1436a <sprintf>
   1538c:	|  |               lea 12(sp),sp
			return buff;
   15390:	|  |               move.l 4(sp),d0
   15394:	|  +-------------- bra.s 15406 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   15396:	|  |               movea.l 84(sp),a0
   1539a:	|  |               move.l 4(a0),d0
   1539e:	|  |               move.l d0,-(sp)
   153a0:	|  |               jsr 4d5a <resourceNameFromNum>
   153a6:	|  |               addq.l #4,sp
   153a8:	|  |               move.l d0,-(sp)
   153aa:	|  |               pea 18def <PutChar+0xd0d>
   153b0:	|  |               jsr 1408c <joinStrings>
   153b6:	|  |               addq.l #8,sp
   153b8:	|  +-------------- bra.s 15406 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   153ba:	|  |               movea.l 84(sp),a0
   153be:	|  |               move.l 4(a0),d0
   153c2:	|  |               move.l d0,-(sp)
   153c4:	|  |               jsr d874 <findObjectType>
   153ca:	|  |               addq.l #4,sp
   153cc:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   153d0:	+--|-------------- beq.s 153e4 <getTextFromAnyVar+0x2ae>
   153d2:	|  |               movea.l 40(sp),a0
   153d6:	|  |               move.l (a0),d0
   153d8:	|  |               move.l d0,-(sp)
   153da:	|  |               jsr b8 <copyString>
   153e0:	|  |               addq.l #4,sp
   153e2:	|  +-------------- bra.s 15406 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   153e4:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   153e6:	   |               movea.l 84(sp),a0
   153ea:	   |               move.l (a0),d0
   153ec:	   |               add.l d0,d0
   153ee:	   |               movea.l d0,a1
   153f0:	   |               adda.l d0,a1
   153f2:	   |               lea 1ccb4 <typeName>,a0
   153f8:	   |               move.l (0,a1,a0.l),d0
   153fc:	   |               move.l d0,-(sp)
   153fe:	   |               jsr b8 <copyString>
   15404:	   |               addq.l #4,sp
}
   15406:	   '-------------> movea.l (sp)+,a6
   15408:	                   lea 76(sp),sp
   1540c:	                   rts

0001540e <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   1540e:	move.l 4(sp),-(sp)
   15412:	jsr 14dae <unlinkVar>
   15418:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1541a:	movea.l 4(sp),a0
   1541e:	moveq #8,d0
   15420:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   15422:	movea.l 4(sp),a0
   15426:	move.l 8(sp),4(a0)
}
   1542c:	nop
   1542e:	rts

00015430 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   15430:	move.l 4(sp),-(sp)
   15434:	jsr 14dae <unlinkVar>
   1543a:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   1543c:	movea.l 4(sp),a0
   15440:	moveq #9,d0
   15442:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   15444:	movea.l 4(sp),a0
   15448:	move.l 8(sp),4(a0)
}
   1544e:	nop
   15450:	rts

00015452 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   15452:	move.l 4(sp),-(sp)
   15456:	jsr 14dae <unlinkVar>
   1545c:	addq.l #4,sp
   1545e:	movea.l 4(sp),a0
   15462:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   15466:	movea.l 4(sp),a0
   1546a:	move.l 12(sp),4(a0)
   15470:	nop
   15472:	rts

00015474 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   15474:	      ,-- bra.s 15486 <stackGetByIndex+0x12>
        vS = vS->next;
   15476:	,-----|-> movea.l 4(sp),a0
   1547a:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   15480:	|     +-- bne.s 15486 <stackGetByIndex+0x12>
            return NULL;
   15482:	|     |   moveq #0,d0
   15484:	|  ,--|-- bra.s 1549a <stackGetByIndex+0x26>
    while (theIndex--) {
   15486:	|  |  '-> move.l 8(sp),d0
   1548a:	|  |      move.l d0,d1
   1548c:	|  |      subq.l #1,d1
   1548e:	|  |      move.l d1,8(sp)
   15492:	|  |      tst.l d0
   15494:	'--|----- bne.s 15476 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   15496:	   |      move.l 4(sp),d0
}
   1549a:	   '----> rts

0001549c <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1549c:	          tst.l 4(sp)
   154a0:	      ,-- bne.s 154b0 <stackFindLast+0x14>
		return NULL;
   154a2:	      |   moveq #0,d0
   154a4:	,-----|-- bra.s 154be <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   154a6:	|  ,--|-> movea.l 4(sp),a0
   154aa:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   154b0:	|  |  '-> movea.l 4(sp),a0
   154b4:	|  |      move.l 8(a0),d0
   154b8:	|  '----- bne.s 154a6 <stackFindLast+0xa>

	return hunt;
   154ba:	|         move.l 4(sp),d0
}
   154be:	'-------> rts

000154c0 <stackSize>:

int stackSize (const struct stackHandler * me) {
   154c0:	       subq.l #8,sp
	int r = 0;
   154c2:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   154c6:	       movea.l 12(sp),a0
   154ca:	       move.l (a0),(sp)
	while (a) {
   154cc:	   ,-- bra.s 154d8 <stackSize+0x18>
		r ++;
   154ce:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   154d2:	|  |   movea.l (sp),a0
   154d4:	|  |   move.l 8(a0),(sp)
	while (a) {
   154d8:	|  '-> tst.l (sp)
   154da:	'----- bne.s 154ce <stackSize+0xe>
	}
	return r;
   154dc:	       move.l 4(sp),d0
}
   154e0:	       addq.l #8,sp
   154e2:	       rts

000154e4 <trimStack>:

void trimStack (struct variableStack ** stack) {
   154e4:	subq.l #8,sp
   154e6:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   154e8:	movea.l 16(sp),a0
   154ec:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   154f0:	movea.l 16(sp),a0
   154f4:	movea.l (a0),a0
   154f6:	move.l 8(a0),d0
   154fa:	movea.l 16(sp),a0
   154fe:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   15500:	move.l 8(sp),d0
   15504:	move.l d0,-(sp)
   15506:	jsr 14dae <unlinkVar>
   1550c:	addq.l #4,sp
	FreeVec(killMe);
   1550e:	move.l 8(sp),4(sp)
   15514:	move.l 1cdda <SysBase>,d0
   1551a:	movea.l d0,a6
   1551c:	movea.l 4(sp),a1
   15520:	jsr -690(a6)
   15524:	nop
   15526:	movea.l (sp)+,a6
   15528:	addq.l #8,sp
   1552a:	rts

0001552c <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   1552c:	       lea -52(sp),sp
   15530:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   15532:	       pea 1a472 <PutChar+0x2390>
   15538:	       jsr 17640 <KPrintF>
   1553e:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   15540:	       moveq #68,d0
   15542:	       move.l d0,52(sp)
   15546:	       clr.l 48(sp)
   1554a:	       move.l 1cdda <SysBase>,d0
   15550:	       movea.l d0,a6
   15552:	       move.l 52(sp),d0
   15556:	       move.l 48(sp),d1
   1555a:	       jsr -684(a6)
   1555e:	       move.l d0,44(sp)
   15562:	       move.l 44(sp),d0
   15566:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   1556a:	   ,-- bne.s 15572 <freeze+0x46>
   1556c:	   |   clr.w d0
   1556e:	,--|-- bra.w 15704 <freeze+0x1d8>

	CstFreeze();
   15572:	|  '-> jsr 1a6c <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15578:	|      move.l 1ce72 <sceneWidth>,d0
   1557e:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   15582:	|      move.l 1ce76 <sceneHeight>,d0
   15588:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   1558c:	|      move.l 1ce72 <sceneWidth>,d0
   15592:	|      movea.l 40(sp),a0
   15596:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   1559a:	|      move.l 1ce76 <sceneHeight>,d0
   155a0:	|      movea.l 40(sp),a0
   155a4:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   155a8:	|      move.l 1ce90 <cameraX>,d0
   155ae:	|      movea.l 40(sp),a0
   155b2:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   155b6:	|      move.l 1ce94 <cameraY>,d0
   155bc:	|      movea.l 40(sp),a0
   155c0:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   155c4:	|      move.l 1c776 <cameraZoom>,d0
   155ca:	|      movea.l 40(sp),a0
   155ce:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   155d2:	|      move.w #1,1ce7e <backdropExists>

	newFreezer -> allPeople = allPeople;
   155da:	|      move.l 1ce3a <allPeople>,d0
   155e0:	|      movea.l 40(sp),a0
   155e4:	|      move.l d0,(a0)
	allPeople = NULL;
   155e6:	|      clr.l 1ce3a <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   155ec:	|      moveq #42,d0
   155ee:	|      move.l d0,28(sp)
   155f2:	|      clr.l 24(sp)
   155f6:	|      move.l 1cdda <SysBase>,d0
   155fc:	|      movea.l d0,a6
   155fe:	|      move.l 28(sp),d0
   15602:	|      move.l 24(sp),d1
   15606:	|      jsr -684(a6)
   1560a:	|      move.l d0,20(sp)
   1560e:	|      move.l 20(sp),d0
   15612:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   15616:	|  ,-- bne.s 1561e <freeze+0xf2>
   15618:	|  |   clr.w d0
   1561a:	+--|-- bra.w 15704 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   1561e:	|  '-> move.l 1cee6 <allScreenRegions>,d0
   15624:	|      movea.l 40(sp),a0
   15628:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   1562c:	|      clr.l 1cee6 <allScreenRegions>
	overRegion = NULL;
   15632:	|      clr.l 1ceea <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   15638:	|      move.l 1ccde <mouseCursorAnim>,d0
   1563e:	|      movea.l 40(sp),a0
   15642:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   15646:	|      move.l 1cce2 <mouseCursorFrameNum>,d0
   1564c:	|      movea.l 40(sp),a0
   15650:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   15654:	|      jsr b04a <makeNullAnim>
   1565a:	|      move.l d0,1ccde <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   15660:	|      clr.l 1cce2 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   15666:	|      move.l 1ce36 <zBuffer>,d0
   1566c:	|      movea.l 40(sp),a0
   15670:	|      move.l d0,60(a0)
	zBuffer = NULL;
   15674:	|      clr.l 1ce36 <zBuffer>

	newFreezer -> speech = speech;
   1567a:	|      move.l 1cd2a <speech>,d0
   15680:	|      movea.l 40(sp),a0
   15684:	|      move.l d0,20(a0)
	initSpeech ();
   15688:	|      jsr 4250 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   1568e:	|      move.l 1c754 <currentEvents>,d0
   15694:	|      movea.l 40(sp),a0
   15698:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1569c:	|      moveq #28,d0
   1569e:	|      move.l d0,12(sp)
   156a2:	|      clr.l 8(sp)
   156a6:	|      move.l 1cdda <SysBase>,d0
   156ac:	|      movea.l d0,a6
   156ae:	|      move.l 12(sp),d0
   156b2:	|      move.l 8(sp),d1
   156b6:	|      jsr -684(a6)
   156ba:	|      move.l d0,4(sp)
   156be:	|      move.l 4(sp),d0
   156c2:	|      move.l d0,1c754 <currentEvents>
	if (!currentEvents) return FALSE;
   156c8:	|      move.l 1c754 <currentEvents>,d0
   156ce:	|  ,-- bne.s 156d4 <freeze+0x1a8>
   156d0:	|  |   clr.w d0
   156d2:	+--|-- bra.s 15704 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   156d4:	|  '-> move.l 1c754 <currentEvents>,d0
   156da:	|      pea 1c <_start+0x1c>
   156de:	|      clr.l -(sp)
   156e0:	|      move.l d0,-(sp)
   156e2:	|      jsr 175c4 <memset>
   156e8:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   156ec:	|      move.l 1ceca <frozenStuff>,d0
   156f2:	|      movea.l 40(sp),a0
   156f6:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   156fa:	|      move.l 40(sp),1ceca <frozenStuff>

	return TRUE;
   15702:	|      moveq #1,d0
}
   15704:	'----> movea.l (sp)+,a6
   15706:	       lea 52(sp),sp
   1570a:	       rts

0001570c <howFrozen>:

int howFrozen () {
   1570c:	       subq.l #8,sp
	int a = 0;
   1570e:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   15712:	       move.l 1ceca <frozenStuff>,(sp)
	while (f) {
   15718:	   ,-- bra.s 15724 <howFrozen+0x18>
		a ++;
   1571a:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   1571e:	|  |   movea.l (sp),a0
   15720:	|  |   move.l 64(a0),(sp)
	while (f) {
   15724:	|  '-> tst.l (sp)
   15726:	'----- bne.s 1571a <howFrozen+0xe>
	}
	return a;
   15728:	       move.l 4(sp),d0
}
   1572c:	       addq.l #8,sp
   1572e:	       rts

00015730 <unfreeze>:

void unfreeze () {
   15730:	       lea -16(sp),sp
   15734:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   15736:	       move.l 1ceca <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   1573e:	       move.l 1ceca <frozenStuff>,d0
   15744:	,----- beq.w 1597c <unfreeze+0x24c>

	CstUnfreeze();
   15748:	|      jsr 3dfa <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   1574e:	|      movea.l 1ceca <frozenStuff>,a0
   15754:	|      move.l 48(a0),d0
   15758:	|      move.l d0,1ce72 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   1575e:	|      movea.l 1ceca <frozenStuff>,a0
   15764:	|      move.l 52(a0),d0
   15768:	|      move.l d0,1ce76 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   1576e:	|      movea.l 1ceca <frozenStuff>,a0
   15774:	|      move.l 40(a0),d0
   15778:	|      move.l d0,1ce90 <cameraX>
	cameraY = frozenStuff -> cameraY;
   1577e:	|      movea.l 1ceca <frozenStuff>,a0
   15784:	|      move.l 44(a0),d0
   15788:	|      move.l d0,1ce94 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   1578e:	|      move.l 1cd96 <input+0xa>,d0
   15794:	|      move.l d0,-(sp)
   15796:	|      jsr 17a72 <__floatsisf>
   1579c:	|      addq.l #4,sp
   1579e:	|      move.l d0,d1
   157a0:	|      move.l 1c776 <cameraZoom>,d0
   157a6:	|      move.l d0,-(sp)
   157a8:	|      move.l d1,-(sp)
   157aa:	|      jsr 17b24 <__mulsf3>
   157b0:	|      addq.l #8,sp
   157b2:	|      move.l d0,-(sp)
   157b4:	|      jsr 17a0a <__fixsfsi>
   157ba:	|      addq.l #4,sp
   157bc:	|      move.l d0,1cd96 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   157c2:	|      move.l 1cd9a <input+0xe>,d0
   157c8:	|      move.l d0,-(sp)
   157ca:	|      jsr 17a72 <__floatsisf>
   157d0:	|      addq.l #4,sp
   157d2:	|      move.l d0,d1
   157d4:	|      move.l 1c776 <cameraZoom>,d0
   157da:	|      move.l d0,-(sp)
   157dc:	|      move.l d1,-(sp)
   157de:	|      jsr 17b24 <__mulsf3>
   157e4:	|      addq.l #8,sp
   157e6:	|      move.l d0,-(sp)
   157e8:	|      jsr 17a0a <__fixsfsi>
   157ee:	|      addq.l #4,sp
   157f0:	|      move.l d0,1cd9a <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   157f6:	|      movea.l 1ceca <frozenStuff>,a0
   157fc:	|      move.l 56(a0),d0
   15800:	|      move.l d0,1c776 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15806:	|      move.l 1cd96 <input+0xa>,d0
   1580c:	|      move.l d0,-(sp)
   1580e:	|      jsr 17a72 <__floatsisf>
   15814:	|      addq.l #4,sp
   15816:	|      move.l d0,d1
   15818:	|      move.l 1c776 <cameraZoom>,d0
   1581e:	|      move.l d0,-(sp)
   15820:	|      move.l d1,-(sp)
   15822:	|      jsr 17928 <__divsf3>
   15828:	|      addq.l #8,sp
   1582a:	|      move.l d0,-(sp)
   1582c:	|      jsr 17a0a <__fixsfsi>
   15832:	|      addq.l #4,sp
   15834:	|      move.l d0,1cd96 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   1583a:	|      move.l 1cd9a <input+0xe>,d0
   15840:	|      move.l d0,-(sp)
   15842:	|      jsr 17a72 <__floatsisf>
   15848:	|      addq.l #4,sp
   1584a:	|      move.l d0,d1
   1584c:	|      move.l 1c776 <cameraZoom>,d0
   15852:	|      move.l d0,-(sp)
   15854:	|      move.l d1,-(sp)
   15856:	|      jsr 17928 <__divsf3>
   1585c:	|      addq.l #8,sp
   1585e:	|      move.l d0,-(sp)
   15860:	|      jsr 17a0a <__fixsfsi>
   15866:	|      addq.l #4,sp
   15868:	|      move.l d0,1cd9a <input+0xe>

	killAllPeople ();
   1586e:	|      jsr ad1a <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15874:	|      movea.l 1ceca <frozenStuff>,a0
   1587a:	|      move.l (a0),d0
   1587c:	|      move.l d0,1ce3a <allPeople>

	killAllRegions ();
   15882:	|      jsr 15e50 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15888:	|      movea.l 1ceca <frozenStuff>,a0
   1588e:	|      move.l 4(a0),d0
   15892:	|      move.l d0,1cee6 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15898:	|      move.l 1ccde <mouseCursorAnim>,d0
   1589e:	|      move.l d0,-(sp)
   158a0:	|      jsr 9be4 <deleteAnim>
   158a6:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   158a8:	|      movea.l 1ceca <frozenStuff>,a0
   158ae:	|      move.l 32(a0),d0
   158b2:	|      move.l d0,1ccde <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   158b8:	|      movea.l 1ceca <frozenStuff>,a0
   158be:	|      move.l 36(a0),d0
   158c2:	|      move.l d0,1cce2 <mouseCursorFrameNum>

	killZBuffer ();
   158c8:	|      jsr 898a <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   158ce:	|      movea.l 1ceca <frozenStuff>,a0
   158d4:	|      move.l 60(a0),d0
   158d8:	|      move.l d0,1ce36 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   158de:	|      move.l 1c754 <currentEvents>,d0
   158e4:	|  ,-- beq.s 158fe <unfreeze+0x1ce>
   158e6:	|  |   move.l 1c754 <currentEvents>,12(sp)
   158ee:	|  |   move.l 1cdda <SysBase>,d0
   158f4:	|  |   movea.l d0,a6
   158f6:	|  |   movea.l 12(sp),a1
   158fa:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   158fe:	|  '-> movea.l 1ceca <frozenStuff>,a0
   15904:	|      move.l 28(a0),d0
   15908:	|      move.l d0,1c754 <currentEvents>

	killAllSpeech ();
   1590e:	|      jsr 42e8 <killAllSpeech>
	if (speech) FreeVec(speech);
   15914:	|      move.l 1cd2a <speech>,d0
   1591a:	|  ,-- beq.s 15934 <unfreeze+0x204>
   1591c:	|  |   move.l 1cd2a <speech>,8(sp)
   15924:	|  |   move.l 1cdda <SysBase>,d0
   1592a:	|  |   movea.l d0,a6
   1592c:	|  |   movea.l 8(sp),a1
   15930:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   15934:	|  '-> movea.l 1ceca <frozenStuff>,a0
   1593a:	|      move.l 20(a0),d0
   1593e:	|      move.l d0,1cd2a <speech>

	frozenStuff = frozenStuff -> next;
   15944:	|      movea.l 1ceca <frozenStuff>,a0
   1594a:	|      move.l 64(a0),d0
   1594e:	|      move.l d0,1ceca <frozenStuff>

	overRegion = NULL;
   15954:	|      clr.l 1ceea <overRegion>
	if (killMe) FreeVec(killMe);
   1595a:	|      tst.l 16(sp)
   1595e:	|  ,-- beq.s 15976 <unfreeze+0x246>
   15960:	|  |   move.l 16(sp),4(sp)
   15966:	|  |   move.l 1cdda <SysBase>,d0
   1596c:	|  |   movea.l d0,a6
   1596e:	|  |   movea.l 4(sp),a1
   15972:	|  |   jsr -690(a6)
	killMe = NULL;
   15976:	|  '-> clr.l 16(sp)
   1597a:	|  ,-- bra.s 1597e <unfreeze+0x24e>
	if (! frozenStuff) return;
   1597c:	'--|-> nop
}
   1597e:	   '-> movea.l (sp)+,a6
   15980:	       lea 16(sp),sp
   15984:	       rts

00015986 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15986:	pea 1a484 <PutChar+0x23a2>
   1598c:	jsr 17640 <KPrintF>
   15992:	addq.l #4,sp
	return FALSE;
   15994:	clr.w d0
}
   15996:	rts

00015998 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15998:	          lea -32(sp),sp
   1599c:	          move.l a6,-(sp)
   1599e:	          move.l d2,-(sp)
	unsigned int a = 0;
   159a0:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   159a4:	          move.l 1ced6 <fontOrderString>,d0
   159aa:	      ,-- beq.s 159c4 <loadFont+0x2c>
   159ac:	      |   move.l 1ced6 <fontOrderString>,24(sp)
   159b4:	      |   move.l 1cdda <SysBase>,d0
   159ba:	      |   movea.l d0,a6
   159bc:	      |   movea.l 24(sp),a1
   159c0:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   159c4:	      '-> move.l 48(sp),-(sp)
   159c8:	          jsr b8 <copyString>
   159ce:	          addq.l #4,sp
   159d0:	          move.l d0,1ced6 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   159d6:	          move.l 1cee2 <theFont>,d0
   159dc:	      ,-- beq.s 159ee <loadFont+0x56>
   159de:	      |   move.l 1cee2 <theFont>,d0
   159e4:	      |   move.l d0,-(sp)
   159e6:	      |   jsr 8cc8 <forgetSpriteBank>
   159ec:	      |   addq.l #4,sp
	theFont = NULL;
   159ee:	      '-> clr.l 1cee2 <theFont>

	loadedFontNum = filenum;
   159f4:	          move.l 44(sp),1ced2 <loadedFontNum>

	fontTableSize = 0;
   159fc:	          clr.l 1cede <fontTableSize>
	char *tmp = charOrder;
   15a02:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15a08:	   ,----- bra.s 15a44 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15a0a:	,--|----> movea.l 32(sp),a0
   15a0e:	|  |      move.b (a0),d0
   15a10:	|  |      ext.w d0
   15a12:	|  |      movea.w d0,a0
   15a14:	|  |      move.l 1cede <fontTableSize>,d0
   15a1a:	|  |      move.l d0,d0
   15a1c:	|  |      move.b d0,d0
   15a1e:	|  |      andi.l #255,d0
   15a24:	|  |      cmp.l a0,d0
   15a26:	|  |  ,-- bge.s 15a38 <loadFont+0xa0>
   15a28:	|  |  |   movea.l 32(sp),a0
   15a2c:	|  |  |   move.b (a0),d0
   15a2e:	|  |  |   ext.w d0
   15a30:	|  |  |   movea.w d0,a0
   15a32:	|  |  |   move.l a0,1cede <fontTableSize>
		*tmp++;
   15a38:	|  |  '-> move.l 32(sp),d0
   15a3c:	|  |      move.l d0,d1
   15a3e:	|  |      addq.l #1,d1
   15a40:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   15a44:	|  '----> movea.l 32(sp),a0
   15a48:	|         move.b (a0),d0
   15a4a:	'-------- bne.s 15a0a <loadFont+0x72>
	}
	fontTableSize++;
   15a4c:	          move.l 1cede <fontTableSize>,d0
   15a52:	          addq.l #1,d0
   15a54:	          move.l d0,1cede <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15a5a:	          move.l 1ceda <fontTable>,d0
   15a60:	      ,-- beq.s 15a7a <loadFont+0xe2>
   15a62:	      |   move.l 1ceda <fontTable>,20(sp)
   15a6a:	      |   move.l 1cdda <SysBase>,d0
   15a70:	      |   movea.l d0,a6
   15a72:	      |   movea.l 20(sp),a1
   15a76:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15a7a:	      '-> move.l 1cede <fontTableSize>,d0
   15a80:	          add.l d0,d0
   15a82:	          add.l d0,d0
   15a84:	          move.l d0,16(sp)
   15a88:	          clr.l 12(sp)
   15a8c:	          move.l 1cdda <SysBase>,d0
   15a92:	          movea.l d0,a6
   15a94:	          move.l 16(sp),d0
   15a98:	          move.l 12(sp),d1
   15a9c:	          jsr -684(a6)
   15aa0:	          move.l d0,8(sp)
   15aa4:	          move.l 8(sp),d0
   15aa8:	          move.l d0,1ceda <fontTable>
	if (!fontTable) return FALSE;
   15aae:	          move.l 1ceda <fontTable>,d0
   15ab4:	      ,-- bne.s 15abc <loadFont+0x124>
   15ab6:	      |   clr.w d0
   15ab8:	,-----|-- bra.w 15b62 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15abc:	|     '-> clr.l 36(sp)
   15ac0:	|     ,-- bra.s 15ada <loadFont+0x142>
		fontTable[a] = 0;
   15ac2:	|  ,--|-> move.l 1ceda <fontTable>,d1
   15ac8:	|  |  |   move.l 36(sp),d0
   15acc:	|  |  |   add.l d0,d0
   15ace:	|  |  |   add.l d0,d0
   15ad0:	|  |  |   movea.l d1,a0
   15ad2:	|  |  |   adda.l d0,a0
   15ad4:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15ad6:	|  |  |   addq.l #1,36(sp)
   15ada:	|  |  '-> move.l 1cede <fontTableSize>,d0
   15ae0:	|  |      cmp.l 36(sp),d0
   15ae4:	|  '----- bhi.s 15ac2 <loadFont+0x12a>
	}
	a = 0;
   15ae6:	|         clr.l 36(sp)
	int i = 0;
   15aea:	|         clr.l 28(sp)
	tmp = charOrder;
   15aee:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15af4:	|     ,-- bra.s 15b24 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15af6:	|  ,--|-> move.l 1ceda <fontTable>,d1
   15afc:	|  |  |   move.l 32(sp),d0
   15b00:	|  |  |   move.l d0,d2
   15b02:	|  |  |   addq.l #1,d2
   15b04:	|  |  |   move.l d2,32(sp)
   15b08:	|  |  |   movea.l d0,a0
   15b0a:	|  |  |   move.b (a0),d0
   15b0c:	|  |  |   ext.w d0
   15b0e:	|  |  |   movea.w d0,a0
   15b10:	|  |  |   move.l a0,d0
   15b12:	|  |  |   add.l a0,d0
   15b14:	|  |  |   add.l d0,d0
   15b16:	|  |  |   movea.l d1,a0
   15b18:	|  |  |   adda.l d0,a0
   15b1a:	|  |  |   move.l 28(sp),d0
   15b1e:	|  |  |   move.l d0,(a0)
		i++;
   15b20:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   15b24:	|  |  '-> movea.l 32(sp),a0
   15b28:	|  |      move.b (a0),d0
   15b2a:	|  '----- bne.s 15af6 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15b2c:	|         move.l 44(sp),-(sp)
   15b30:	|         jsr 16362 <loadBankForAnim>
   15b36:	|         addq.l #4,sp
   15b38:	|         move.l d0,1cee2 <theFont>
	if (!theFont) {
   15b3e:	|         move.l 1cee2 <theFont>,d0
   15b44:	|     ,-- bne.s 15b58 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   15b46:	|     |   pea 1a4ab <PutChar+0x23c9>
   15b4c:	|     |   jsr 17640 <KPrintF>
   15b52:	|     |   addq.l #4,sp
		return FALSE;
   15b54:	|     |   clr.w d0
   15b56:	+-----|-- bra.s 15b62 <loadFont+0x1ca>
	}
	fontHeight = h;
   15b58:	|     '-> move.l 52(sp),1cece <fontHeight>
	return TRUE;
   15b60:	|         moveq #1,d0
}
   15b62:	'-------> move.l (sp)+,d2
   15b64:	          movea.l (sp)+,a6
   15b66:	          lea 32(sp),sp
   15b6a:	          rts

00015b6c <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15b6c:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15b70:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15b74:	                move.l 1cede <fontTableSize>,d0
   15b7a:	,-------------- beq.w 15c42 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   15b7e:	|               move.w 1ccdc <fontSpace>,d0
   15b84:	|               asr.w #1,d0
   15b86:	|               ext.l d0
   15b88:	|               add.l d0,20(sp)
	char *tmp = theText;
   15b8c:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15b92:	|     ,-------- bra.w 15c36 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15b96:	|  ,--|-------> movea.l 1cee2 <theFont>,a0
   15b9c:	|  |  |         movea.l 16(a0),a0
   15ba0:	|  |  |         movea.l 8(sp),a1
   15ba4:	|  |  |         move.b (a1),d0
   15ba6:	|  |  |         move.b d0,d0
   15ba8:	|  |  |         andi.l #255,d0
   15bae:	|  |  |         move.l 1cede <fontTableSize>,d1
   15bb4:	|  |  |         cmp.l d0,d1
   15bb6:	|  |  |  ,----- bls.s 15be2 <pasteStringToBackdrop+0x76>
   15bb8:	|  |  |  |      move.l 1ceda <fontTable>,d1
   15bbe:	|  |  |  |      movea.l 8(sp),a1
   15bc2:	|  |  |  |      move.b (a1),d0
   15bc4:	|  |  |  |      move.b d0,d0
   15bc6:	|  |  |  |      andi.l #255,d0
   15bcc:	|  |  |  |      add.l d0,d0
   15bce:	|  |  |  |      add.l d0,d0
   15bd0:	|  |  |  |      movea.l d1,a1
   15bd2:	|  |  |  |      adda.l d0,a1
   15bd4:	|  |  |  |      move.l (a1),d1
   15bd6:	|  |  |  |      move.l d1,d0
   15bd8:	|  |  |  |      lsl.l #3,d0
   15bda:	|  |  |  |      sub.l d1,d0
   15bdc:	|  |  |  |      add.l d0,d0
   15bde:	|  |  |  |      add.l d0,d0
   15be0:	|  |  |  |  ,-- bra.s 15be4 <pasteStringToBackdrop+0x78>
   15be2:	|  |  |  '--|-> moveq #0,d0
   15be4:	|  |  |     '-> adda.l d0,a0
   15be6:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15be8:	|  |  |         move.l 24(sp),d1
   15bec:	|  |  |         movea.l (sp),a0
   15bee:	|  |  |         move.l 12(a0),d0
   15bf2:	|  |  |         move.l d0,d0
   15bf4:	|  |  |         sub.w d0,d1
   15bf6:	|  |  |         move.w d1,d0
   15bf8:	|  |  |         movea.w d0,a1
   15bfa:	|  |  |         move.l 20(sp),d1
   15bfe:	|  |  |         movea.l (sp),a0
   15c00:	|  |  |         move.l 8(a0),d0
   15c04:	|  |  |         move.l d0,d0
   15c06:	|  |  |         sub.w d0,d1
   15c08:	|  |  |         move.w d1,d0
   15c0a:	|  |  |         movea.w d0,a0
   15c0c:	|  |  |         move.l a1,-(sp)
   15c0e:	|  |  |         move.l a0,-(sp)
   15c10:	|  |  |         move.l 8(sp),-(sp)
   15c14:	|  |  |         jsr 228a <CstPasteChar>
   15c1a:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15c1e:	|  |  |         movea.l (sp),a0
   15c20:	|  |  |         move.l (a0),d1
   15c22:	|  |  |         move.w 1ccdc <fontSpace>,d0
   15c28:	|  |  |         movea.w d0,a0
   15c2a:	|  |  |         move.l d1,d0
   15c2c:	|  |  |         add.l a0,d0
   15c2e:	|  |  |         add.l d0,20(sp)
		tmp++;
   15c32:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15c36:	|  |  '-------> movea.l 8(sp),a0
   15c3a:	|  |            move.b (a0),d0
   15c3c:	|  '----------- bne.w 15b96 <pasteStringToBackdrop+0x2a>
   15c40:	|           ,-- bra.s 15c44 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   15c42:	'-----------|-> nop
    }
}
   15c44:	            '-> lea 12(sp),sp
   15c48:	                rts

00015c4a <stringWidth>:


int stringWidth (char * theText) {
   15c4a:	                lea -16(sp),sp
	int a = 0;
   15c4e:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15c52:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   15c56:	                move.l 1cede <fontTableSize>,d0
   15c5c:	            ,-- bne.s 15c62 <stringWidth+0x18>
   15c5e:	            |   moveq #0,d0
   15c60:	,-----------|-- bra.s 15cd6 <stringWidth+0x8c>

	char *tmp = theText;
   15c62:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   15c68:	|     ,-------- bra.s 15cca <stringWidth+0x80>
        c = *tmp++;
   15c6a:	|  ,--|-------> move.l 8(sp),d0
   15c6e:	|  |  |         move.l d0,d1
   15c70:	|  |  |         addq.l #1,d1
   15c72:	|  |  |         move.l d1,8(sp)
   15c76:	|  |  |         movea.l d0,a0
   15c78:	|  |  |         move.b (a0),d0
   15c7a:	|  |  |         ext.w d0
   15c7c:	|  |  |         movea.w d0,a0
   15c7e:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   15c80:	|  |  |         movea.l 1cee2 <theFont>,a0
   15c86:	|  |  |         movea.l 16(a0),a1
   15c8a:	|  |  |         move.l 1cede <fontTableSize>,d0
   15c90:	|  |  |         cmp.l (sp),d0
   15c92:	|  |  |  ,----- bls.s 15cb2 <stringWidth+0x68>
   15c94:	|  |  |  |      move.l 1ceda <fontTable>,d1
   15c9a:	|  |  |  |      move.l (sp),d0
   15c9c:	|  |  |  |      add.l d0,d0
   15c9e:	|  |  |  |      add.l d0,d0
   15ca0:	|  |  |  |      movea.l d1,a0
   15ca2:	|  |  |  |      adda.l d0,a0
   15ca4:	|  |  |  |      move.l (a0),d1
   15ca6:	|  |  |  |      move.l d1,d0
   15ca8:	|  |  |  |      lsl.l #3,d0
   15caa:	|  |  |  |      sub.l d1,d0
   15cac:	|  |  |  |      add.l d0,d0
   15cae:	|  |  |  |      add.l d0,d0
   15cb0:	|  |  |  |  ,-- bra.s 15cb4 <stringWidth+0x6a>
   15cb2:	|  |  |  '--|-> moveq #0,d0
   15cb4:	|  |  |     '-> lea (0,a1,d0.l),a0
   15cb8:	|  |  |         move.l (a0),d1
   15cba:	|  |  |         move.w 1ccdc <fontSpace>,d0
   15cc0:	|  |  |         movea.w d0,a0
   15cc2:	|  |  |         move.l d1,d0
   15cc4:	|  |  |         add.l a0,d0
   15cc6:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   15cca:	|  |  '-------> movea.l 8(sp),a0
   15cce:	|  |            move.b (a0),d0
   15cd0:	|  '----------- bne.s 15c6a <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   15cd2:	|               move.l 12(sp),d0
}
   15cd6:	'-------------> lea 16(sp),sp
   15cda:	                rts

00015cdc <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15cdc:	       lea -16(sp),sp
   15ce0:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15ce2:	       moveq #36,d0
   15ce4:	       move.l d0,16(sp)
   15ce8:	       clr.l 12(sp)
   15cec:	       move.l 1cdda <SysBase>,d0
   15cf2:	       movea.l d0,a6
   15cf4:	       move.l 16(sp),d0
   15cf8:	       move.l 12(sp),d1
   15cfc:	       jsr -684(a6)
   15d00:	       move.l d0,8(sp)
   15d04:	       move.l 8(sp),d0
   15d08:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15d0c:	   ,-- bne.s 15d14 <addScreenRegion+0x38>
   15d0e:	   |   clr.w d0
   15d10:	,--|-- bra.w 15d94 <addScreenRegion+0xb8>
    newRegion->di = di;
   15d14:	|  '-> movea.l 4(sp),a0
   15d18:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15d1e:	|      movea.l 4(sp),a0
   15d22:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15d26:	|      movea.l 4(sp),a0
   15d2a:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15d30:	|      movea.l 4(sp),a0
   15d34:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15d3a:	|      movea.l 4(sp),a0
   15d3e:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15d44:	|      movea.l 4(sp),a0
   15d48:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15d4e:	|      movea.l 4(sp),a0
   15d52:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15d58:	|      move.l 52(sp),-(sp)
   15d5c:	|      jsr d964 <loadObjectType>
   15d62:	|      addq.l #4,sp
   15d64:	|      movea.l 4(sp),a0
   15d68:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15d6c:	|      move.l 1cee6 <allScreenRegions>,d0
   15d72:	|      movea.l 4(sp),a0
   15d76:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15d7a:	|      move.l 4(sp),1cee6 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15d82:	|      movea.l 4(sp),a0
   15d86:	|      move.l 28(a0),d0
   15d8a:	|      sne d0
   15d8c:	|      neg.b d0
   15d8e:	|      move.b d0,d0
   15d90:	|      andi.w #255,d0
}
   15d94:	'----> movea.l (sp)+,a6
   15d96:	       lea 16(sp),sp
   15d9a:	       rts

00015d9c <getOverRegion>:

void getOverRegion () {
   15d9c:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15d9e:	             move.l 1cee6 <allScreenRegions>,(sp)
	while (thisRegion) {
   15da4:	   ,-------- bra.s 15e12 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15da6:	,--|-------> move.l 1cd96 <input+0xa>,d0
   15dac:	|  |         movea.l (sp),a0
   15dae:	|  |         movea.l (a0),a0
   15db0:	|  |         move.l 1ce90 <cameraX>,d1
   15db6:	|  |         suba.l d1,a0
   15db8:	|  |         cmpa.l d0,a0
   15dba:	|  |  ,----- bgt.s 15e0c <getOverRegion+0x70>
   15dbc:	|  |  |      move.l 1cd9a <input+0xe>,d0
   15dc2:	|  |  |      movea.l (sp),a0
   15dc4:	|  |  |      movea.l 4(a0),a0
   15dc8:	|  |  |      move.l 1ce94 <cameraY>,d1
   15dce:	|  |  |      suba.l d1,a0
   15dd0:	|  |  |      cmpa.l d0,a0
   15dd2:	|  |  +----- bgt.s 15e0c <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15dd4:	|  |  |      move.l 1cd96 <input+0xa>,d0
   15dda:	|  |  |      movea.l (sp),a0
   15ddc:	|  |  |      movea.l 8(a0),a0
   15de0:	|  |  |      move.l 1ce90 <cameraX>,d1
   15de6:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15de8:	|  |  |      cmpa.l d0,a0
   15dea:	|  |  +----- blt.s 15e0c <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15dec:	|  |  |      move.l 1cd9a <input+0xe>,d0
   15df2:	|  |  |      movea.l (sp),a0
   15df4:	|  |  |      movea.l 12(a0),a0
   15df8:	|  |  |      move.l 1ce94 <cameraY>,d1
   15dfe:	|  |  |      suba.l d1,a0
   15e00:	|  |  |      cmpa.l d0,a0
   15e02:	|  |  +----- blt.s 15e0c <getOverRegion+0x70>
			overRegion = thisRegion;
   15e04:	|  |  |      move.l (sp),1ceea <overRegion>
			return;
   15e0a:	|  |  |  ,-- bra.s 15e1e <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15e0c:	|  |  '--|-> movea.l (sp),a0
   15e0e:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15e12:	|  '-----|-> tst.l (sp)
   15e14:	'--------|-- bne.s 15da6 <getOverRegion+0xa>
	}
	overRegion = NULL;
   15e16:	         |   clr.l 1ceea <overRegion>
	return;
   15e1c:	         |   nop
}
   15e1e:	         '-> addq.l #4,sp
   15e20:	             rts

00015e22 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15e22:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15e24:	             move.l 1cee6 <allScreenRegions>,(sp)

	while (thisRegion) {
   15e2a:	   ,-------- bra.s 15e46 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15e2c:	,--|-------> movea.l (sp),a0
   15e2e:	|  |         movea.l 28(a0),a0
   15e32:	|  |         move.l 4(a0),d0
   15e36:	|  |         cmp.l 8(sp),d0
   15e3a:	|  |     ,-- bne.s 15e40 <getRegionForObject+0x1e>
			return thisRegion;
   15e3c:	|  |     |   move.l (sp),d0
   15e3e:	|  |  ,--|-- bra.s 15e4c <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15e40:	|  |  |  '-> movea.l (sp),a0
   15e42:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15e46:	|  '--|----> tst.l (sp)
   15e48:	'-----|----- bne.s 15e2c <getRegionForObject+0xa>
	}

	return NULL;
   15e4a:	      |      moveq #0,d0
}
   15e4c:	      '----> addq.l #4,sp
   15e4e:	             rts

00015e50 <killAllRegions>:

void killAllRegions () {
   15e50:	       subq.l #8,sp
   15e52:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15e54:	   ,-- bra.s 15e96 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15e56:	,--|-> move.l 1cee6 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15e5e:	|  |   movea.l 1cee6 <allScreenRegions>,a0
   15e64:	|  |   move.l 32(a0),d0
   15e68:	|  |   move.l d0,1cee6 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15e6e:	|  |   movea.l 8(sp),a0
   15e72:	|  |   move.l 28(a0),d0
   15e76:	|  |   move.l d0,-(sp)
   15e78:	|  |   jsr dc1c <removeObjectType>
   15e7e:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15e80:	|  |   move.l 8(sp),4(sp)
   15e86:	|  |   move.l 1cdda <SysBase>,d0
   15e8c:	|  |   movea.l d0,a6
   15e8e:	|  |   movea.l 4(sp),a1
   15e92:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15e96:	|  '-> move.l 1cee6 <allScreenRegions>,d0
   15e9c:	'----- bne.s 15e56 <killAllRegions+0x6>
	}
	overRegion = NULL;
   15e9e:	       clr.l 1ceea <overRegion>
}
   15ea4:	       nop
   15ea6:	       movea.l (sp)+,a6
   15ea8:	       addq.l #8,sp
   15eaa:	       rts

00015eac <loadRegions>:

void loadRegions (BPTR fp) {
   15eac:	       lea -24(sp),sp
   15eb0:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15eb2:	       move.l 32(sp),-(sp)
   15eb6:	       jsr 6bc <get2bytes>
   15ebc:	       addq.l #4,sp
   15ebe:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15ec2:	       move.l #118502,20(sp)

	while (numRegions --) {
   15eca:	   ,-- bra.w 15fa8 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15ece:	,--|-> moveq #36,d0
   15ed0:	|  |   move.l d0,16(sp)
   15ed4:	|  |   clr.l 12(sp)
   15ed8:	|  |   move.l 1cdda <SysBase>,d0
   15ede:	|  |   movea.l d0,a6
   15ee0:	|  |   move.l 16(sp),d0
   15ee4:	|  |   move.l 12(sp),d1
   15ee8:	|  |   jsr -684(a6)
   15eec:	|  |   move.l d0,8(sp)
   15ef0:	|  |   move.l 8(sp),d0
   15ef4:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15ef8:	|  |   movea.l 20(sp),a0
   15efc:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15f00:	|  |   moveq #32,d1
   15f02:	|  |   add.l 4(sp),d1
   15f06:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15f0a:	|  |   move.l 32(sp),-(sp)
   15f0e:	|  |   jsr 6bc <get2bytes>
   15f14:	|  |   addq.l #4,sp
   15f16:	|  |   movea.l 4(sp),a0
   15f1a:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15f1c:	|  |   move.l 32(sp),-(sp)
   15f20:	|  |   jsr 6bc <get2bytes>
   15f26:	|  |   addq.l #4,sp
   15f28:	|  |   movea.l 4(sp),a0
   15f2c:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15f30:	|  |   move.l 32(sp),-(sp)
   15f34:	|  |   jsr 6bc <get2bytes>
   15f3a:	|  |   addq.l #4,sp
   15f3c:	|  |   movea.l 4(sp),a0
   15f40:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15f44:	|  |   move.l 32(sp),-(sp)
   15f48:	|  |   jsr 6bc <get2bytes>
   15f4e:	|  |   addq.l #4,sp
   15f50:	|  |   movea.l 4(sp),a0
   15f54:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15f58:	|  |   move.l 32(sp),-(sp)
   15f5c:	|  |   jsr 6bc <get2bytes>
   15f62:	|  |   addq.l #4,sp
   15f64:	|  |   movea.l 4(sp),a0
   15f68:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15f6c:	|  |   move.l 32(sp),-(sp)
   15f70:	|  |   jsr 6bc <get2bytes>
   15f76:	|  |   addq.l #4,sp
   15f78:	|  |   movea.l 4(sp),a0
   15f7c:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15f80:	|  |   move.l 32(sp),-(sp)
   15f84:	|  |   jsr 6bc <get2bytes>
   15f8a:	|  |   addq.l #4,sp
   15f8c:	|  |   movea.l 4(sp),a0
   15f90:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15f94:	|  |   move.l 32(sp),-(sp)
   15f98:	|  |   jsr d912 <loadObjectRef>
   15f9e:	|  |   addq.l #4,sp
   15fa0:	|  |   movea.l 4(sp),a0
   15fa4:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15fa8:	|  '-> move.l 24(sp),d0
   15fac:	|      move.l d0,d1
   15fae:	|      subq.l #1,d1
   15fb0:	|      move.l d1,24(sp)
   15fb4:	|      tst.l d0
   15fb6:	'----- bne.w 15ece <loadRegions+0x22>
	}
	* pointy = NULL;
   15fba:	       movea.l 20(sp),a0
   15fbe:	       clr.l (a0)
}
   15fc0:	       nop
   15fc2:	       movea.l (sp)+,a6
   15fc4:	       lea 24(sp),sp
   15fc8:	       rts

00015fca <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15fca:	             lea -12(sp),sp
   15fce:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15fd0:	             move.l #118502,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15fd8:	   ,-------- bra.s 16052 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15fda:	,--|-------> movea.l 12(sp),a0
   15fde:	|  |         movea.l (a0),a0
   15fe0:	|  |         movea.l 28(a0),a0
   15fe4:	|  |         move.l 4(a0),d0
   15fe8:	|  |         cmp.l 20(sp),d0
   15fec:	|  |  ,----- bne.s 16044 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15fee:	|  |  |      movea.l 12(sp),a0
   15ff2:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15ff6:	|  |  |      movea.l 8(sp),a0
   15ffa:	|  |  |      move.l 32(a0),d0
   15ffe:	|  |  |      movea.l 12(sp),a0
   16002:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   16004:	|  |  |      movea.l 8(sp),a0
   16008:	|  |  |      move.l 28(a0),d0
   1600c:	|  |  |      move.l d0,-(sp)
   1600e:	|  |  |      jsr dc1c <removeObjectType>
   16014:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   16016:	|  |  |      move.l 1ceea <overRegion>,d0
   1601c:	|  |  |      cmp.l 8(sp),d0
   16020:	|  |  |  ,-- bne.s 16028 <removeScreenRegion+0x5e>
   16022:	|  |  |  |   clr.l 1ceea <overRegion>
            FreeVec(killMe);
   16028:	|  |  |  '-> move.l 8(sp),4(sp)
   1602e:	|  |  |      move.l 1cdda <SysBase>,d0
   16034:	|  |  |      movea.l d0,a6
   16036:	|  |  |      movea.l 4(sp),a1
   1603a:	|  |  |      jsr -690(a6)
            killMe = NULL;
   1603e:	|  |  |      clr.l 8(sp)
   16042:	|  +--|----- bra.s 16052 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   16044:	|  |  '----> movea.l 12(sp),a0
   16048:	|  |         move.l (a0),d0
   1604a:	|  |         moveq #32,d1
   1604c:	|  |         add.l d0,d1
   1604e:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   16052:	|  '-------> movea.l 12(sp),a0
   16056:	|            move.l (a0),d0
   16058:	'----------- bne.s 15fda <removeScreenRegion+0x10>
        }
    }
}
   1605a:	             nop
   1605c:	             nop
   1605e:	             movea.l (sp)+,a6
   16060:	             lea 12(sp),sp
   16064:	             rts

00016066 <saveRegions>:

void saveRegions (BPTR fp) {
   16066:	       subq.l #8,sp
	int numRegions = 0;
   16068:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   1606c:	       move.l 1cee6 <allScreenRegions>,(sp)
	while (thisRegion) {
   16072:	   ,-- bra.s 1607e <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   16074:	,--|-> movea.l (sp),a0
   16076:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   1607a:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   1607e:	|  '-> tst.l (sp)
   16080:	'----- bne.s 16074 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   16082:	       move.l 12(sp),-(sp)
   16086:	       move.l 8(sp),-(sp)
   1608a:	       jsr 8d0 <put2bytes>
   16090:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   16092:	       move.l 1cee6 <allScreenRegions>,(sp)
	while (thisRegion) {
   16098:	,----- bra.w 16140 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   1609c:	|  ,-> movea.l (sp),a0
   1609e:	|  |   move.l (a0),d0
   160a0:	|  |   move.l 12(sp),-(sp)
   160a4:	|  |   move.l d0,-(sp)
   160a6:	|  |   jsr 8d0 <put2bytes>
   160ac:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   160ae:	|  |   movea.l (sp),a0
   160b0:	|  |   move.l 4(a0),d0
   160b4:	|  |   move.l 12(sp),-(sp)
   160b8:	|  |   move.l d0,-(sp)
   160ba:	|  |   jsr 8d0 <put2bytes>
   160c0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   160c2:	|  |   movea.l (sp),a0
   160c4:	|  |   move.l 8(a0),d0
   160c8:	|  |   move.l 12(sp),-(sp)
   160cc:	|  |   move.l d0,-(sp)
   160ce:	|  |   jsr 8d0 <put2bytes>
   160d4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   160d6:	|  |   movea.l (sp),a0
   160d8:	|  |   move.l 12(a0),d0
   160dc:	|  |   move.l 12(sp),-(sp)
   160e0:	|  |   move.l d0,-(sp)
   160e2:	|  |   jsr 8d0 <put2bytes>
   160e8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   160ea:	|  |   movea.l (sp),a0
   160ec:	|  |   move.l 16(a0),d0
   160f0:	|  |   move.l 12(sp),-(sp)
   160f4:	|  |   move.l d0,-(sp)
   160f6:	|  |   jsr 8d0 <put2bytes>
   160fc:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   160fe:	|  |   movea.l (sp),a0
   16100:	|  |   move.l 20(a0),d0
   16104:	|  |   move.l 12(sp),-(sp)
   16108:	|  |   move.l d0,-(sp)
   1610a:	|  |   jsr 8d0 <put2bytes>
   16110:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   16112:	|  |   movea.l (sp),a0
   16114:	|  |   move.l 24(a0),d0
   16118:	|  |   move.l 12(sp),-(sp)
   1611c:	|  |   move.l d0,-(sp)
   1611e:	|  |   jsr 8d0 <put2bytes>
   16124:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   16126:	|  |   movea.l (sp),a0
   16128:	|  |   move.l 28(a0),d0
   1612c:	|  |   move.l 12(sp),-(sp)
   16130:	|  |   move.l d0,-(sp)
   16132:	|  |   jsr dcbc <saveObjectRef>
   16138:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   1613a:	|  |   movea.l (sp),a0
   1613c:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   16140:	'--|-> tst.l (sp)
   16142:	   '-- bne.w 1609c <saveRegions+0x36>
	}
}
   16146:	       nop
   16148:	       nop
   1614a:	       addq.l #8,sp
   1614c:	       rts

0001614e <showBoxes>:

void showBoxes () {
   1614e:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   16150:	       move.l 1cee6 <allScreenRegions>,(sp)

	while (huntRegion) {
   16156:	,----- bra.w 161f2 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   1615a:	|  ,-> movea.l (sp),a0
   1615c:	|  |   move.l 12(a0),d0
   16160:	|  |   movea.l d0,a1
   16162:	|  |   movea.l (sp),a0
   16164:	|  |   move.l 4(a0),d0
   16168:	|  |   move.l d0,d1
   1616a:	|  |   movea.l (sp),a0
   1616c:	|  |   move.l (a0),d0
   1616e:	|  |   move.l a1,-(sp)
   16170:	|  |   move.l d1,-(sp)
   16172:	|  |   move.l d0,-(sp)
   16174:	|  |   jsr d5a0 <drawVerticalLine>
   1617a:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   1617e:	|  |   movea.l (sp),a0
   16180:	|  |   move.l 12(a0),d0
   16184:	|  |   movea.l d0,a1
   16186:	|  |   movea.l (sp),a0
   16188:	|  |   move.l 4(a0),d0
   1618c:	|  |   move.l d0,d1
   1618e:	|  |   movea.l (sp),a0
   16190:	|  |   move.l 8(a0),d0
   16194:	|  |   move.l a1,-(sp)
   16196:	|  |   move.l d1,-(sp)
   16198:	|  |   move.l d0,-(sp)
   1619a:	|  |   jsr d5a0 <drawVerticalLine>
   161a0:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   161a4:	|  |   movea.l (sp),a0
   161a6:	|  |   move.l 8(a0),d0
   161aa:	|  |   movea.l d0,a1
   161ac:	|  |   movea.l (sp),a0
   161ae:	|  |   move.l 4(a0),d0
   161b2:	|  |   move.l d0,d1
   161b4:	|  |   movea.l (sp),a0
   161b6:	|  |   move.l (a0),d0
   161b8:	|  |   move.l a1,-(sp)
   161ba:	|  |   move.l d1,-(sp)
   161bc:	|  |   move.l d0,-(sp)
   161be:	|  |   jsr d57a <drawHorizontalLine>
   161c4:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   161c8:	|  |   movea.l (sp),a0
   161ca:	|  |   move.l 8(a0),d0
   161ce:	|  |   movea.l d0,a1
   161d0:	|  |   movea.l (sp),a0
   161d2:	|  |   move.l 12(a0),d0
   161d6:	|  |   move.l d0,d1
   161d8:	|  |   movea.l (sp),a0
   161da:	|  |   move.l (a0),d0
   161dc:	|  |   move.l a1,-(sp)
   161de:	|  |   move.l d1,-(sp)
   161e0:	|  |   move.l d0,-(sp)
   161e2:	|  |   jsr d57a <drawHorizontalLine>
   161e8:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   161ec:	|  |   movea.l (sp),a0
   161ee:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   161f2:	'--|-> tst.l (sp)
   161f4:	   '-- bne.w 1615a <showBoxes+0xc>
	}
   161f8:	       nop
   161fa:	       nop
   161fc:	       addq.l #4,sp
   161fe:	       rts

00016200 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   16200:	       lea -88(sp),sp
   16204:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   16206:	       move.l 1cdda <SysBase>,d0
   1620c:	       movea.l d0,a6
   1620e:	       jsr -666(a6)
   16212:	       move.l d0,88(sp)
   16216:	       move.l 88(sp),d0
   1621a:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   1621e:	       move.l 84(sp),80(sp)
   16224:	       moveq #40,d0
   16226:	       move.l d0,76(sp)
   1622a:	       move.l 1cdda <SysBase>,d0
   16230:	       movea.l d0,a6
   16232:	       movea.l 80(sp),a0
   16236:	       move.l 76(sp),d0
   1623a:	       jsr -654(a6)
   1623e:	       move.l d0,72(sp)
   16242:	       move.l 72(sp),d0
   16246:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   1624a:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   16250:	       move.l #107717,60(sp)
   16258:	       clr.l 56(sp)
   1625c:	       move.l 64(sp),52(sp)
   16262:	       clr.l 48(sp)
   16266:	       move.l 1cdda <SysBase>,d0
   1626c:	       movea.l d0,a6
   1626e:	       movea.l 60(sp),a0
   16272:	       move.l 56(sp),d0
   16276:	       movea.l 52(sp),a1
   1627a:	       move.l 48(sp),d1
   1627e:	       jsr -444(a6)
   16282:	       move.b d0,47(sp)
   16286:	       move.b 47(sp),d0
   1628a:	   ,-- beq.s 162a0 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   1628c:	   |   pea 1a4d2 <PutChar+0x23f0>
   16292:	   |   jsr 17640 <KPrintF>
   16298:	   |   addq.l #4,sp
        return 0;
   1629a:	   |   moveq #0,d0
   1629c:	,--|-- bra.w 1635a <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   162a0:	|  '-> movea.l 64(sp),a0
   162a4:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   162aa:	|      lea 92(sp),a0
   162ae:	|      lea -86(a0),a0
   162b2:	|      move.l a0,38(sp)
   162b6:	|      movea.l 42(sp),a6
   162ba:	|      movea.l 38(sp),a0
   162be:	|      jsr -60(a6)
   162c2:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   162c6:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   162cc:	|      move.l #1103515245,-(sp)
   162d2:	|      move.l 34(sp),-(sp)
   162d6:	|      jsr 17fcc <__mulsi3>
   162dc:	|      addq.l #8,sp
   162de:	|      addi.l #12345,d0
   162e4:	|      move.l d0,d1
   162e6:	|      bclr #31,d1
   162ea:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   162ee:	|      move.l 30(sp),d0
   162f2:	|      pea 64 <_start+0x64>
   162f6:	|      move.l d0,-(sp)
   162f8:	|      jsr 180a6 <__umodsi3>
   162fe:	|      addq.l #8,sp
   16300:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   16304:	|      move.l 26(sp),-(sp)
   16308:	|      pea 1a4ef <PutChar+0x240d>
   1630e:	|      jsr 17640 <KPrintF>
   16314:	|      addq.l #8,sp

    CloseDevice(ioreq);
   16316:	|      move.l 64(sp),22(sp)
   1631c:	|      move.l 1cdda <SysBase>,d0
   16322:	|      movea.l d0,a6
   16324:	|      movea.l 22(sp),a1
   16328:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   1632c:	|      move.l 64(sp),18(sp)
   16332:	|      move.l 1cdda <SysBase>,d0
   16338:	|      movea.l d0,a6
   1633a:	|      movea.l 18(sp),a0
   1633e:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   16342:	|      move.l 84(sp),14(sp)
   16348:	|      move.l 1cdda <SysBase>,d0
   1634e:	|      movea.l d0,a6
   16350:	|      movea.l 14(sp),a0
   16354:	|      jsr -672(a6)
    return 0;
   16358:	|      moveq #0,d0
   1635a:	'----> movea.l (sp)+,a6
   1635c:	       lea 88(sp),sp
   16360:	       rts

00016362 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   16362:	             lea -20(sp),sp
   16366:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   16368:	             move.l 1ceee <allLoadedBanks>,20(sp)
	while (returnMe) {
   16370:	      ,----- bra.s 163a2 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   16372:	   ,--|----> movea.l 20(sp),a0
   16376:	   |  |      move.l (a0),d0
   16378:	   |  |      cmp.l 28(sp),d0
   1637c:	   |  |  ,-- bne.s 16398 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   1637e:	   |  |  |   movea.l 20(sp),a0
   16382:	   |  |  |   move.l 4(a0),d0
   16386:	   |  |  |   addq.l #1,d0
   16388:	   |  |  |   movea.l 20(sp),a0
   1638c:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   16390:	   |  |  |   move.l 20(sp),d0
   16394:	,--|--|--|-- bra.w 16436 <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   16398:	|  |  |  '-> movea.l 20(sp),a0
   1639c:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   163a2:	|  |  '----> tst.l 20(sp)
   163a6:	|  '-------- bne.s 16372 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   163a8:	|            moveq #26,d0
   163aa:	|            move.l d0,16(sp)
   163ae:	|            clr.l 12(sp)
   163b2:	|            move.l 1cdda <SysBase>,d0
   163b8:	|            movea.l d0,a6
   163ba:	|            move.l 16(sp),d0
   163be:	|            move.l 12(sp),d1
   163c2:	|            jsr -684(a6)
   163c6:	|            move.l d0,8(sp)
   163ca:	|            move.l 8(sp),d0
   163ce:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   163d2:	|     ,----- beq.s 16434 <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   163d4:	|     |      movea.l 20(sp),a0
   163d8:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   163dc:	|     |      move.l 20(sp),d0
   163e0:	|     |      addq.l #8,d0
   163e2:	|     |      move.l d0,-(sp)
   163e4:	|     |      move.l 32(sp),-(sp)
   163e8:	|     |      jsr 8dd4 <loadSpriteBank>
   163ee:	|     |      addq.l #8,sp
   163f0:	|     |      tst.w d0
   163f2:	|     |  ,-- beq.s 1641a <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   163f4:	|     |  |   movea.l 20(sp),a0
   163f8:	|     |  |   moveq #1,d0
   163fa:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   163fe:	|     |  |   move.l 1ceee <allLoadedBanks>,d0
   16404:	|     |  |   movea.l 20(sp),a0
   16408:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   1640c:	|     |  |   move.l 20(sp),1ceee <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   16414:	|     |  |   move.l 20(sp),d0
   16418:	+-----|--|-- bra.s 16436 <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   1641a:	|     |  '-> move.l 20(sp),4(sp)
   16420:	|     |      move.l 1cdda <SysBase>,d0
   16426:	|     |      movea.l d0,a6
   16428:	|     |      movea.l 4(sp),a1
   1642c:	|     |      jsr -690(a6)
			return NULL;
   16430:	|     |      moveq #0,d0
   16432:	+-----|----- bra.s 16436 <loadBankForAnim+0xd4>
		}
	} else return NULL;
   16434:	|     '----> moveq #0,d0
}
   16436:	'----------> movea.l (sp)+,a6
   16438:	             lea 20(sp),sp
   1643c:	             rts

0001643e <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   1643e:	       lea -60(sp),sp
   16442:	       move.l d3,-(sp)
   16444:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   16446:	       move.l 88(sp),d0
   1644a:	       sub.l 80(sp),d0
   1644e:	       move.l d0,-(sp)
   16450:	       jsr 17a32 <__floatsidf>
   16456:	       addq.l #4,sp
   16458:	       move.l d0,32(sp)
   1645c:	       move.l d1,36(sp)
   16460:	       move.l 32(sp),60(sp)
   16466:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   1646c:	       move.l 92(sp),d0
   16470:	       sub.l 84(sp),d0
   16474:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   16478:	       move.l 96(sp),d0
   1647c:	       sub.l 80(sp),d0
   16480:	       move.l d0,-(sp)
   16482:	       jsr 17a32 <__floatsidf>
   16488:	       addq.l #4,sp
   1648a:	       move.l 64(sp),-(sp)
   1648e:	       move.l 64(sp),-(sp)
   16492:	       move.l d1,-(sp)
   16494:	       move.l d0,-(sp)
   16496:	       jsr 17ac2 <__muldf3>
   1649c:	       lea 16(sp),sp
   164a0:	       move.l d0,d2
   164a2:	       move.l d1,d3
   164a4:	       move.l 100(sp),d0
   164a8:	       sub.l 84(sp),d0
   164ac:	       move.l 56(sp),-(sp)
   164b0:	       move.l d0,-(sp)
   164b2:	       jsr 17fcc <__mulsi3>
   164b8:	       addq.l #8,sp
   164ba:	       move.l d0,-(sp)
   164bc:	       jsr 17a32 <__floatsidf>
   164c2:	       addq.l #4,sp
   164c4:	       move.l d1,-(sp)
   164c6:	       move.l d0,-(sp)
   164c8:	       move.l d3,-(sp)
   164ca:	       move.l d2,-(sp)
   164cc:	       jsr 17864 <__adddf3>
   164d2:	       lea 16(sp),sp
   164d6:	       move.l d0,24(sp)
   164da:	       move.l d1,28(sp)
   164de:	       move.l 24(sp),48(sp)
   164e4:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   164ea:	       move.l 64(sp),-(sp)
   164ee:	       move.l 64(sp),-(sp)
   164f2:	       move.l 72(sp),-(sp)
   164f6:	       move.l 72(sp),-(sp)
   164fa:	       jsr 17ac2 <__muldf3>
   16500:	       lea 16(sp),sp
   16504:	       move.l d0,d2
   16506:	       move.l d1,d3
   16508:	       move.l 56(sp),-(sp)
   1650c:	       move.l 60(sp),-(sp)
   16510:	       jsr 17fcc <__mulsi3>
   16516:	       addq.l #8,sp
   16518:	       move.l d0,-(sp)
   1651a:	       jsr 17a32 <__floatsidf>
   16520:	       addq.l #4,sp
   16522:	       move.l d1,-(sp)
   16524:	       move.l d0,-(sp)
   16526:	       move.l d3,-(sp)
   16528:	       move.l d2,-(sp)
   1652a:	       jsr 17864 <__adddf3>
   16530:	       lea 16(sp),sp
   16534:	       move.l d1,-(sp)
   16536:	       move.l d0,-(sp)
   16538:	       move.l 60(sp),-(sp)
   1653c:	       move.l 60(sp),-(sp)
   16540:	       jsr 178c6 <__divdf3>
   16546:	       lea 16(sp),sp
   1654a:	       move.l d0,16(sp)
   1654e:	       move.l d1,20(sp)
   16552:	       move.l 16(sp),48(sp)
   16558:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   1655e:	       clr.l -(sp)
   16560:	       clr.l -(sp)
   16562:	       move.l 60(sp),-(sp)
   16566:	       move.l 60(sp),-(sp)
   1656a:	       jsr 17c4a <__ltdf2>
   16570:	       lea 16(sp),sp
   16574:	       tst.l d0
   16576:	   ,-- bge.s 1658c <closestPointOnLine+0x14e>
		*closestX = x1;
   16578:	   |   movea.l 72(sp),a0
   1657c:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   16580:	   |   movea.l 76(sp),a0
   16584:	   |   move.l 84(sp),(a0)
   16588:	,--|-- bra.w 1665a <closestPointOnLine+0x21c>
	} else if (m > 1) {
   1658c:	|  '-> clr.l -(sp)
   1658e:	|      move.l #1072693248,-(sp)
   16594:	|      move.l 60(sp),-(sp)
   16598:	|      move.l 60(sp),-(sp)
   1659c:	|      jsr 17b90 <__gtdf2>
   165a2:	|      lea 16(sp),sp
   165a6:	|      tst.l d0
   165a8:	|  ,-- ble.s 165be <closestPointOnLine+0x180>
		*closestX = x2;
   165aa:	|  |   movea.l 72(sp),a0
   165ae:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   165b2:	|  |   movea.l 76(sp),a0
   165b6:	|  |   move.l 92(sp),(a0)
   165ba:	+--|-- bra.w 1665a <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   165be:	|  '-> move.l 64(sp),-(sp)
   165c2:	|      move.l 64(sp),-(sp)
   165c6:	|      move.l 60(sp),-(sp)
   165ca:	|      move.l 60(sp),-(sp)
   165ce:	|      jsr 17ac2 <__muldf3>
   165d4:	|      lea 16(sp),sp
   165d8:	|      move.l d0,8(sp)
   165dc:	|      move.l d1,12(sp)
   165e0:	|      move.l 8(sp),40(sp)
   165e6:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   165ec:	|      move.l 44(sp),-(sp)
   165f0:	|      move.l 44(sp),-(sp)
   165f4:	|      jsr 179d4 <__fixdfsi>
   165fa:	|      addq.l #8,sp
   165fc:	|      movea.l 72(sp),a0
   16600:	|      move.l d0,(a0)
		*closestX += x1;
   16602:	|      movea.l 72(sp),a0
   16606:	|      move.l (a0),d0
   16608:	|      add.l 80(sp),d0
   1660c:	|      movea.l 72(sp),a0
   16610:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   16612:	|      move.l 56(sp),-(sp)
   16616:	|      jsr 17a32 <__floatsidf>
   1661c:	|      addq.l #4,sp
   1661e:	|      move.l 52(sp),-(sp)
   16622:	|      move.l 52(sp),-(sp)
   16626:	|      move.l d1,-(sp)
   16628:	|      move.l d0,-(sp)
   1662a:	|      jsr 17ac2 <__muldf3>
   16630:	|      lea 16(sp),sp
   16634:	|      move.l d1,-(sp)
   16636:	|      move.l d0,-(sp)
   16638:	|      jsr 179d4 <__fixdfsi>
   1663e:	|      addq.l #8,sp
   16640:	|      movea.l 76(sp),a0
   16644:	|      move.l d0,(a0)
		*closestY += y1;
   16646:	|      movea.l 76(sp),a0
   1664a:	|      move.l (a0),d0
   1664c:	|      add.l 84(sp),d0
   16650:	|      movea.l 76(sp),a0
   16654:	|      move.l d0,(a0)
		return TRUE;
   16656:	|      moveq #1,d0
   16658:	|  ,-- bra.s 1665c <closestPointOnLine+0x21e>
	}
	return FALSE;
   1665a:	'--|-> clr.w d0
}
   1665c:	   '-> move.l (sp)+,d2
   1665e:	       move.l (sp)+,d3
   16660:	       lea 60(sp),sp
   16664:	       rts

00016666 <drawFloor>:

void drawFloor() {
   16666:	                lea -12(sp),sp
   1666a:	                move.l d3,-(sp)
   1666c:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1666e:	                clr.l 16(sp)
   16672:	   ,----------- bra.w 16886 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   16676:	,--|----------> movea.l 1cef2 <currentFloor>,a0
   1667c:	|  |            move.l 12(a0),d1
   16680:	|  |            move.l 16(sp),d0
   16684:	|  |            lsl.l #3,d0
   16686:	|  |            movea.l d1,a0
   16688:	|  |            adda.l d0,a0
   1668a:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   1668e:	|  |            moveq #1,d0
   16690:	|  |            cmp.l 8(sp),d0
   16694:	|  |  ,-------- bge.w 16882 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16698:	|  |  |         moveq #1,d0
   1669a:	|  |  |         move.l d0,12(sp)
   1669e:	|  |  |     ,-- bra.w 16798 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   166a2:	|  |  |  ,--|-> movea.l 1cef2 <currentFloor>,a0
   166a8:	|  |  |  |  |   move.l 4(a0),d1
   166ac:	|  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   166b2:	|  |  |  |  |   movea.l 12(a0),a0
   166b6:	|  |  |  |  |   move.l 16(sp),d0
   166ba:	|  |  |  |  |   lsl.l #3,d0
   166bc:	|  |  |  |  |   adda.l d0,a0
   166be:	|  |  |  |  |   movea.l 4(a0),a0
   166c2:	|  |  |  |  |   move.l 12(sp),d0
   166c6:	|  |  |  |  |   add.l d0,d0
   166c8:	|  |  |  |  |   add.l d0,d0
   166ca:	|  |  |  |  |   adda.l d0,a0
   166cc:	|  |  |  |  |   move.l (a0),d0
   166ce:	|  |  |  |  |   lsl.l #3,d0
   166d0:	|  |  |  |  |   movea.l d1,a0
   166d2:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   166d4:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   166d8:	|  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   166de:	|  |  |  |  |   move.l 4(a0),d1
   166e2:	|  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   166e8:	|  |  |  |  |   movea.l 12(a0),a0
   166ec:	|  |  |  |  |   move.l 16(sp),d0
   166f0:	|  |  |  |  |   lsl.l #3,d0
   166f2:	|  |  |  |  |   adda.l d0,a0
   166f4:	|  |  |  |  |   movea.l 4(a0),a0
   166f8:	|  |  |  |  |   move.l 12(sp),d0
   166fc:	|  |  |  |  |   add.l d0,d0
   166fe:	|  |  |  |  |   add.l d0,d0
   16700:	|  |  |  |  |   adda.l d0,a0
   16702:	|  |  |  |  |   move.l (a0),d0
   16704:	|  |  |  |  |   lsl.l #3,d0
   16706:	|  |  |  |  |   movea.l d1,a0
   16708:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1670a:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1670c:	|  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   16712:	|  |  |  |  |   move.l 4(a0),d1
   16716:	|  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   1671c:	|  |  |  |  |   movea.l 12(a0),a0
   16720:	|  |  |  |  |   move.l 16(sp),d0
   16724:	|  |  |  |  |   lsl.l #3,d0
   16726:	|  |  |  |  |   adda.l d0,a0
   16728:	|  |  |  |  |   movea.l 4(a0),a0
   1672c:	|  |  |  |  |   move.l 12(sp),d0
   16730:	|  |  |  |  |   addi.l #1073741823,d0
   16736:	|  |  |  |  |   add.l d0,d0
   16738:	|  |  |  |  |   add.l d0,d0
   1673a:	|  |  |  |  |   adda.l d0,a0
   1673c:	|  |  |  |  |   move.l (a0),d0
   1673e:	|  |  |  |  |   lsl.l #3,d0
   16740:	|  |  |  |  |   movea.l d1,a0
   16742:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16744:	|  |  |  |  |   move.l 4(a0),d1
   16748:	|  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   1674e:	|  |  |  |  |   move.l 4(a0),d3
   16752:	|  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   16758:	|  |  |  |  |   movea.l 12(a0),a0
   1675c:	|  |  |  |  |   move.l 16(sp),d0
   16760:	|  |  |  |  |   lsl.l #3,d0
   16762:	|  |  |  |  |   adda.l d0,a0
   16764:	|  |  |  |  |   movea.l 4(a0),a0
   16768:	|  |  |  |  |   move.l 12(sp),d0
   1676c:	|  |  |  |  |   addi.l #1073741823,d0
   16772:	|  |  |  |  |   add.l d0,d0
   16774:	|  |  |  |  |   add.l d0,d0
   16776:	|  |  |  |  |   adda.l d0,a0
   16778:	|  |  |  |  |   move.l (a0),d0
   1677a:	|  |  |  |  |   lsl.l #3,d0
   1677c:	|  |  |  |  |   movea.l d3,a0
   1677e:	|  |  |  |  |   adda.l d0,a0
   16780:	|  |  |  |  |   move.l (a0),d0
   16782:	|  |  |  |  |   move.l d2,-(sp)
   16784:	|  |  |  |  |   move.l a1,-(sp)
   16786:	|  |  |  |  |   move.l d1,-(sp)
   16788:	|  |  |  |  |   move.l d0,-(sp)
   1678a:	|  |  |  |  |   jsr 4ac4 <drawLine>
   16790:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   16794:	|  |  |  |  |   addq.l #1,12(sp)
   16798:	|  |  |  |  '-> move.l 12(sp),d0
   1679c:	|  |  |  |      cmp.l 8(sp),d0
   167a0:	|  |  |  '----- blt.w 166a2 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   167a4:	|  |  |         movea.l 1cef2 <currentFloor>,a0
   167aa:	|  |  |         move.l 4(a0),d1
   167ae:	|  |  |         movea.l 1cef2 <currentFloor>,a0
   167b4:	|  |  |         movea.l 12(a0),a0
   167b8:	|  |  |         move.l 16(sp),d0
   167bc:	|  |  |         lsl.l #3,d0
   167be:	|  |  |         adda.l d0,a0
   167c0:	|  |  |         movea.l 4(a0),a0
   167c4:	|  |  |         move.l 8(sp),d0
   167c8:	|  |  |         addi.l #1073741823,d0
   167ce:	|  |  |         add.l d0,d0
   167d0:	|  |  |         add.l d0,d0
   167d2:	|  |  |         adda.l d0,a0
   167d4:	|  |  |         move.l (a0),d0
   167d6:	|  |  |         lsl.l #3,d0
   167d8:	|  |  |         movea.l d1,a0
   167da:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   167dc:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   167e0:	|  |  |         movea.l 1cef2 <currentFloor>,a0
   167e6:	|  |  |         move.l 4(a0),d1
   167ea:	|  |  |         movea.l 1cef2 <currentFloor>,a0
   167f0:	|  |  |         movea.l 12(a0),a0
   167f4:	|  |  |         move.l 16(sp),d0
   167f8:	|  |  |         lsl.l #3,d0
   167fa:	|  |  |         adda.l d0,a0
   167fc:	|  |  |         movea.l 4(a0),a0
   16800:	|  |  |         move.l 8(sp),d0
   16804:	|  |  |         addi.l #1073741823,d0
   1680a:	|  |  |         add.l d0,d0
   1680c:	|  |  |         add.l d0,d0
   1680e:	|  |  |         adda.l d0,a0
   16810:	|  |  |         move.l (a0),d0
   16812:	|  |  |         lsl.l #3,d0
   16814:	|  |  |         movea.l d1,a0
   16816:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16818:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1681a:	|  |  |         movea.l 1cef2 <currentFloor>,a0
   16820:	|  |  |         move.l 4(a0),d1
   16824:	|  |  |         movea.l 1cef2 <currentFloor>,a0
   1682a:	|  |  |         movea.l 12(a0),a0
   1682e:	|  |  |         move.l 16(sp),d0
   16832:	|  |  |         lsl.l #3,d0
   16834:	|  |  |         adda.l d0,a0
   16836:	|  |  |         movea.l 4(a0),a0
   1683a:	|  |  |         move.l (a0),d0
   1683c:	|  |  |         lsl.l #3,d0
   1683e:	|  |  |         movea.l d1,a0
   16840:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16842:	|  |  |         move.l 4(a0),d1
   16846:	|  |  |         movea.l 1cef2 <currentFloor>,a0
   1684c:	|  |  |         move.l 4(a0),d3
   16850:	|  |  |         movea.l 1cef2 <currentFloor>,a0
   16856:	|  |  |         movea.l 12(a0),a0
   1685a:	|  |  |         move.l 16(sp),d0
   1685e:	|  |  |         lsl.l #3,d0
   16860:	|  |  |         adda.l d0,a0
   16862:	|  |  |         movea.l 4(a0),a0
   16866:	|  |  |         move.l (a0),d0
   16868:	|  |  |         lsl.l #3,d0
   1686a:	|  |  |         movea.l d3,a0
   1686c:	|  |  |         adda.l d0,a0
   1686e:	|  |  |         move.l (a0),d0
   16870:	|  |  |         move.l d2,-(sp)
   16872:	|  |  |         move.l a1,-(sp)
   16874:	|  |  |         move.l d1,-(sp)
   16876:	|  |  |         move.l d0,-(sp)
   16878:	|  |  |         jsr 4ac4 <drawLine>
   1687e:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16882:	|  |  '-------> addq.l #1,16(sp)
   16886:	|  '----------> movea.l 1cef2 <currentFloor>,a0
   1688c:	|               move.l 8(a0),d0
   16890:	|               cmp.l 16(sp),d0
   16894:	'-------------- bgt.w 16676 <drawFloor+0x10>
        }
    }
}
   16898:	                nop
   1689a:	                nop
   1689c:	                move.l (sp)+,d2
   1689e:	                move.l (sp)+,d3
   168a0:	                lea 12(sp),sp
   168a4:	                rts

000168a6 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   168a6:	                      lea -12(sp),sp
    int sharedVertices = 0;
   168aa:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   168ae:	                      clr.l 4(sp)
   168b2:	   ,----------------- bra.w 16944 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   168b6:	,--|----------------> clr.l (sp)
   168b8:	|  |     ,----------- bra.s 16934 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   168ba:	|  |  ,--|----------> movea.l 16(sp),a0
   168be:	|  |  |  |            move.l 4(a0),d1
   168c2:	|  |  |  |            move.l 4(sp),d0
   168c6:	|  |  |  |            add.l d0,d0
   168c8:	|  |  |  |            add.l d0,d0
   168ca:	|  |  |  |            movea.l d1,a0
   168cc:	|  |  |  |            adda.l d0,a0
   168ce:	|  |  |  |            move.l (a0),d1
   168d0:	|  |  |  |            movea.l 20(sp),a0
   168d4:	|  |  |  |            movea.l 4(a0),a0
   168d8:	|  |  |  |            move.l (sp),d0
   168da:	|  |  |  |            add.l d0,d0
   168dc:	|  |  |  |            add.l d0,d0
   168de:	|  |  |  |            adda.l d0,a0
   168e0:	|  |  |  |            move.l (a0),d0
   168e2:	|  |  |  |            cmp.l d1,d0
   168e4:	|  |  |  |  ,-------- bne.s 16932 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   168e6:	|  |  |  |  |         move.l 8(sp),d0
   168ea:	|  |  |  |  |         move.l d0,d1
   168ec:	|  |  |  |  |         addq.l #1,d1
   168ee:	|  |  |  |  |         move.l d1,8(sp)
   168f2:	|  |  |  |  |         tst.l d0
   168f4:	|  |  |  |  |     ,-- beq.s 16916 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   168f6:	|  |  |  |  |     |   movea.l 16(sp),a0
   168fa:	|  |  |  |  |     |   move.l 4(a0),d1
   168fe:	|  |  |  |  |     |   move.l 4(sp),d0
   16902:	|  |  |  |  |     |   add.l d0,d0
   16904:	|  |  |  |  |     |   add.l d0,d0
   16906:	|  |  |  |  |     |   movea.l d1,a0
   16908:	|  |  |  |  |     |   adda.l d0,a0
   1690a:	|  |  |  |  |     |   move.l (a0),d0
   1690c:	|  |  |  |  |     |   movea.l 28(sp),a0
   16910:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16912:	|  |  |  |  |     |   moveq #1,d0
   16914:	|  |  |  |  |  ,--|-- bra.s 16954 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16916:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   1691a:	|  |  |  |  |  |      move.l 4(a0),d1
   1691e:	|  |  |  |  |  |      move.l 4(sp),d0
   16922:	|  |  |  |  |  |      add.l d0,d0
   16924:	|  |  |  |  |  |      add.l d0,d0
   16926:	|  |  |  |  |  |      movea.l d1,a0
   16928:	|  |  |  |  |  |      adda.l d0,a0
   1692a:	|  |  |  |  |  |      move.l (a0),d0
   1692c:	|  |  |  |  |  |      movea.l 24(sp),a0
   16930:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16932:	|  |  |  |  '--|----> addq.l #1,(sp)
   16934:	|  |  |  '-----|----> movea.l 20(sp),a0
   16938:	|  |  |        |      move.l (a0),d0
   1693a:	|  |  |        |      cmp.l (sp),d0
   1693c:	|  |  '--------|----- bgt.w 168ba <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16940:	|  |           |      addq.l #1,4(sp)
   16944:	|  '-----------|----> movea.l 16(sp),a0
   16948:	|              |      move.l (a0),d0
   1694a:	|              |      cmp.l 4(sp),d0
   1694e:	'--------------|----- bgt.w 168b6 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16952:	               |      clr.w d0
}
   16954:	               '----> lea 12(sp),sp
   16958:	                      rts

0001695a <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   1695a:	movea.l 1cef2 <currentFloor>,a0
   16960:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   16964:	movea.l 1cef2 <currentFloor>,a0
   1696a:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   1696e:	movea.l 1cef2 <currentFloor>,a0
   16974:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16978:	movea.l 1cef2 <currentFloor>,a0
   1697e:	clr.l 16(a0)
}
   16982:	nop
   16984:	rts

00016986 <inFloor>:

int inFloor (int x, int y) {
   16986:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   16988:	          pea 1a502 <PutChar+0x2420>
   1698e:	          jsr 17640 <KPrintF>
   16994:	          addq.l #4,sp
	int i, r = -1;
   16996:	          moveq #-1,d0
   16998:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   1699a:	          clr.l 4(sp)
   1699e:	   ,----- bra.s 169d2 <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   169a0:	,--|----> movea.l 1cef2 <currentFloor>,a0
   169a6:	|  |      move.l 12(a0),d1
   169aa:	|  |      move.l 4(sp),d0
   169ae:	|  |      lsl.l #3,d0
   169b0:	|  |      add.l d1,d0
   169b2:	|  |      move.l 16(sp),-(sp)
   169b6:	|  |      move.l 16(sp),-(sp)
   169ba:	|  |      move.l d0,-(sp)
   169bc:	|  |      jsr 16bac <pointInFloorPolygon>
   169c2:	|  |      lea 12(sp),sp
   169c6:	|  |      tst.w d0
   169c8:	|  |  ,-- beq.s 169ce <inFloor+0x48>
			r = i;
   169ca:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   169ce:	|  |  '-> addq.l #1,4(sp)
   169d2:	|  '----> movea.l 1cef2 <currentFloor>,a0
   169d8:	|         move.l 8(a0),d0
   169dc:	|         cmp.l 4(sp),d0
   169e0:	'-------- bgt.s 169a0 <inFloor+0x1a>

	KPrintF("infloor finished\n");
   169e2:	          pea 1a513 <PutChar+0x2431>
   169e8:	          jsr 17640 <KPrintF>
   169ee:	          addq.l #4,sp
	return r;
   169f0:	          move.l (sp),d0
}
   169f2:	          addq.l #8,sp
   169f4:	          rts

000169f6 <initFloor>:

BOOL initFloor () {
   169f6:	       lea -12(sp),sp
   169fa:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   169fc:	       moveq #20,d0
   169fe:	       move.l d0,12(sp)
   16a02:	       clr.l 8(sp)
   16a06:	       move.l 1cdda <SysBase>,d0
   16a0c:	       movea.l d0,a6
   16a0e:	       move.l 12(sp),d0
   16a12:	       move.l 8(sp),d1
   16a16:	       jsr -684(a6)
   16a1a:	       move.l d0,4(sp)
   16a1e:	       move.l 4(sp),d0
   16a22:	       move.l d0,1cef2 <currentFloor>

    if(currentFloor == 0) {
   16a28:	       move.l 1cef2 <currentFloor>,d0
   16a2e:	,----- bne.s 16a42 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16a30:	|      pea 1a525 <PutChar+0x2443>
   16a36:	|      jsr 17640 <KPrintF>
   16a3c:	|      addq.l #4,sp
        return FALSE;
   16a3e:	|      clr.w d0
   16a40:	|  ,-- bra.s 16a4a <initFloor+0x54>
    }

	noFloor ();
   16a42:	'--|-> jsr 1695a <noFloor>
	return TRUE;
   16a48:	   |   moveq #1,d0
}
   16a4a:	   '-> movea.l (sp)+,a6
   16a4c:	       lea 12(sp),sp
   16a50:	       rts

00016a52 <killFloor>:

void killFloor () {
   16a52:	       lea -24(sp),sp
   16a56:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16a58:	       clr.l 24(sp)
   16a5c:	   ,-- bra.s 16ab6 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16a5e:	,--|-> movea.l 1cef2 <currentFloor>,a0
   16a64:	|  |   move.l 12(a0),d1
   16a68:	|  |   move.l 24(sp),d0
   16a6c:	|  |   lsl.l #3,d0
   16a6e:	|  |   movea.l d1,a0
   16a70:	|  |   adda.l d0,a0
   16a72:	|  |   move.l 4(a0),8(sp)
   16a78:	|  |   move.l 1cdda <SysBase>,d0
   16a7e:	|  |   movea.l d0,a6
   16a80:	|  |   movea.l 8(sp),a1
   16a84:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16a88:	|  |   movea.l 1cef2 <currentFloor>,a0
   16a8e:	|  |   move.l 16(a0),d1
   16a92:	|  |   move.l 24(sp),d0
   16a96:	|  |   add.l d0,d0
   16a98:	|  |   add.l d0,d0
   16a9a:	|  |   movea.l d1,a0
   16a9c:	|  |   adda.l d0,a0
   16a9e:	|  |   move.l (a0),4(sp)
   16aa2:	|  |   move.l 1cdda <SysBase>,d0
   16aa8:	|  |   movea.l d0,a6
   16aaa:	|  |   movea.l 4(sp),a1
   16aae:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16ab2:	|  |   addq.l #1,24(sp)
   16ab6:	|  '-> movea.l 1cef2 <currentFloor>,a0
   16abc:	|      move.l 8(a0),d0
   16ac0:	|      cmp.l 24(sp),d0
   16ac4:	'----- bgt.s 16a5e <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16ac6:	       movea.l 1cef2 <currentFloor>,a0
   16acc:	       move.l 12(a0),20(sp)
   16ad2:	       move.l 1cdda <SysBase>,d0
   16ad8:	       movea.l d0,a6
   16ada:	       movea.l 20(sp),a1
   16ade:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16ae2:	       movea.l 1cef2 <currentFloor>,a0
   16ae8:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16aec:	       movea.l 1cef2 <currentFloor>,a0
   16af2:	       move.l 4(a0),16(sp)
   16af8:	       move.l 1cdda <SysBase>,d0
   16afe:	       movea.l d0,a6
   16b00:	       movea.l 16(sp),a1
   16b04:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16b08:	       movea.l 1cef2 <currentFloor>,a0
   16b0e:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16b12:	       movea.l 1cef2 <currentFloor>,a0
   16b18:	       move.l 16(a0),12(sp)
   16b1e:	       move.l 1cdda <SysBase>,d0
   16b24:	       movea.l d0,a6
   16b26:	       movea.l 12(sp),a1
   16b2a:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16b2e:	       movea.l 1cef2 <currentFloor>,a0
   16b34:	       clr.l 16(a0)
}
   16b38:	       nop
   16b3a:	       movea.l (sp)+,a6
   16b3c:	       lea 24(sp),sp
   16b40:	       rts

00016b42 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16b42:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16b46:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16b4a:	                   clr.l 4(sp)
   16b4e:	   ,-------------- bra.s 16b9a <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16b50:	,--|-------------> clr.l (sp)
   16b52:	|  |     ,-------- bra.s 16b8e <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16b54:	|  |  ,--|-------> move.l 20(sp),d1
   16b58:	|  |  |  |         move.l 4(sp),d0
   16b5c:	|  |  |  |         add.l d0,d0
   16b5e:	|  |  |  |         add.l d0,d0
   16b60:	|  |  |  |         movea.l d1,a0
   16b62:	|  |  |  |         adda.l d0,a0
   16b64:	|  |  |  |         move.l (a0),d1
   16b66:	|  |  |  |         movea.l 28(sp),a0
   16b6a:	|  |  |  |         move.l (sp),d0
   16b6c:	|  |  |  |         add.l d0,d0
   16b6e:	|  |  |  |         add.l d0,d0
   16b70:	|  |  |  |         adda.l d0,a0
   16b72:	|  |  |  |         move.l (a0),d0
   16b74:	|  |  |  |         cmp.l d1,d0
   16b76:	|  |  |  |     ,-- bne.s 16b8c <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16b78:	|  |  |  |     |   move.l 8(sp),d0
   16b7c:	|  |  |  |     |   move.l d0,d1
   16b7e:	|  |  |  |     |   addq.l #1,d1
   16b80:	|  |  |  |     |   move.l d1,8(sp)
   16b84:	|  |  |  |     |   tst.l d0
   16b86:	|  |  |  |     +-- beq.s 16b8c <polysShareSide+0x4a>
   16b88:	|  |  |  |     |   moveq #1,d0
   16b8a:	|  |  |  |  ,--|-- bra.s 16ba6 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16b8c:	|  |  |  |  |  '-> addq.l #1,(sp)
   16b8e:	|  |  |  '--|----> move.l 24(sp),d0
   16b92:	|  |  |     |      cmp.l (sp),d0
   16b94:	|  |  '-----|----- bgt.s 16b54 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16b96:	|  |        |      addq.l #1,4(sp)
   16b9a:	|  '--------|----> move.l 16(sp),d0
   16b9e:	|           |      cmp.l 4(sp),d0
   16ba2:	'-----------|----- bgt.s 16b50 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16ba4:	            |      clr.w d0
}
   16ba6:	            '----> lea 12(sp),sp
   16baa:	                   rts

00016bac <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16bac:	             lea -28(sp),sp
   16bb0:	             move.l d3,-(sp)
   16bb2:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16bb4:	             clr.l 32(sp)
   16bb8:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16bbc:	             movea.l 40(sp),a0
   16bc0:	             move.l (a0),d0
   16bc2:	             move.l d0,d1
   16bc4:	             subq.l #1,d1
   16bc6:	             move.l d1,28(sp)
   16bca:	   ,-------- bra.w 16dc4 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16bce:	,--|-------> movea.l 1cef2 <currentFloor>,a0
   16bd4:	|  |         move.l 4(a0),d1
   16bd8:	|  |         movea.l 40(sp),a0
   16bdc:	|  |         movea.l 4(a0),a0
   16be0:	|  |         move.l 32(sp),d0
   16be4:	|  |         add.l d0,d0
   16be6:	|  |         add.l d0,d0
   16be8:	|  |         adda.l d0,a0
   16bea:	|  |         move.l (a0),d0
   16bec:	|  |         lsl.l #3,d0
   16bee:	|  |         movea.l d1,a0
   16bf0:	|  |         adda.l d0,a0
   16bf2:	|  |         move.l (a0),d0
   16bf4:	|  |         move.l d0,-(sp)
   16bf6:	|  |         jsr 17a72 <__floatsisf>
   16bfc:	|  |         addq.l #4,sp
   16bfe:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16c02:	|  |         movea.l 1cef2 <currentFloor>,a0
   16c08:	|  |         move.l 4(a0),d1
   16c0c:	|  |         movea.l 40(sp),a0
   16c10:	|  |         movea.l 4(a0),a0
   16c14:	|  |         move.l 32(sp),d0
   16c18:	|  |         add.l d0,d0
   16c1a:	|  |         add.l d0,d0
   16c1c:	|  |         adda.l d0,a0
   16c1e:	|  |         move.l (a0),d0
   16c20:	|  |         lsl.l #3,d0
   16c22:	|  |         movea.l d1,a0
   16c24:	|  |         adda.l d0,a0
   16c26:	|  |         move.l 4(a0),d0
   16c2a:	|  |         move.l d0,-(sp)
   16c2c:	|  |         jsr 17a72 <__floatsisf>
   16c32:	|  |         addq.l #4,sp
   16c34:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16c38:	|  |         movea.l 1cef2 <currentFloor>,a0
   16c3e:	|  |         move.l 4(a0),d1
   16c42:	|  |         movea.l 40(sp),a0
   16c46:	|  |         movea.l 4(a0),a0
   16c4a:	|  |         move.l 28(sp),d0
   16c4e:	|  |         add.l d0,d0
   16c50:	|  |         add.l d0,d0
   16c52:	|  |         adda.l d0,a0
   16c54:	|  |         move.l (a0),d0
   16c56:	|  |         lsl.l #3,d0
   16c58:	|  |         movea.l d1,a0
   16c5a:	|  |         adda.l d0,a0
   16c5c:	|  |         move.l (a0),d0
   16c5e:	|  |         move.l d0,-(sp)
   16c60:	|  |         jsr 17a72 <__floatsisf>
   16c66:	|  |         addq.l #4,sp
   16c68:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16c6c:	|  |         movea.l 1cef2 <currentFloor>,a0
   16c72:	|  |         move.l 4(a0),d1
   16c76:	|  |         movea.l 40(sp),a0
   16c7a:	|  |         movea.l 4(a0),a0
   16c7e:	|  |         move.l 28(sp),d0
   16c82:	|  |         add.l d0,d0
   16c84:	|  |         add.l d0,d0
   16c86:	|  |         adda.l d0,a0
   16c88:	|  |         move.l (a0),d0
   16c8a:	|  |         lsl.l #3,d0
   16c8c:	|  |         movea.l d1,a0
   16c8e:	|  |         adda.l d0,a0
   16c90:	|  |         move.l 4(a0),d0
   16c94:	|  |         move.l d0,-(sp)
   16c96:	|  |         jsr 17a72 <__floatsisf>
   16c9c:	|  |         addq.l #4,sp
   16c9e:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16ca2:	|  |         move.l 48(sp),-(sp)
   16ca6:	|  |         jsr 17a72 <__floatsisf>
   16cac:	|  |         addq.l #4,sp
   16cae:	|  |         move.l d0,-(sp)
   16cb0:	|  |         move.l 20(sp),-(sp)
   16cb4:	|  |         jsr 17c14 <__lesf2>
   16cba:	|  |         addq.l #8,sp
   16cbc:	|  |         tst.l d0
   16cbe:	|  |     ,-- bgt.s 16cde <pointInFloorPolygon+0x132>
   16cc0:	|  |     |   move.l 48(sp),-(sp)
   16cc4:	|  |     |   jsr 17a72 <__floatsisf>
   16cca:	|  |     |   addq.l #4,sp
   16ccc:	|  |     |   move.l d0,-(sp)
   16cce:	|  |     |   move.l 12(sp),-(sp)
   16cd2:	|  |     |   jsr 17bde <__gtsf2>
   16cd8:	|  |     |   addq.l #8,sp
   16cda:	|  |     |   tst.l d0
   16cdc:	|  |  ,--|-- bgt.s 16d1e <pointInFloorPolygon+0x172>
   16cde:	|  |  |  '-> move.l 48(sp),-(sp)
   16ce2:	|  |  |      jsr 17a72 <__floatsisf>
   16ce8:	|  |  |      addq.l #4,sp
   16cea:	|  |  |      move.l d0,-(sp)
   16cec:	|  |  |      move.l 12(sp),-(sp)
   16cf0:	|  |  |      jsr 17c14 <__lesf2>
   16cf6:	|  |  |      addq.l #8,sp
   16cf8:	|  |  |      tst.l d0
   16cfa:	|  |  |  ,-- bgt.w 16db4 <pointInFloorPolygon+0x208>
   16cfe:	|  |  |  |   move.l 48(sp),-(sp)
   16d02:	|  |  |  |   jsr 17a72 <__floatsisf>
   16d08:	|  |  |  |   addq.l #4,sp
   16d0a:	|  |  |  |   move.l d0,-(sp)
   16d0c:	|  |  |  |   move.l 20(sp),-(sp)
   16d10:	|  |  |  |   jsr 17bde <__gtsf2>
   16d16:	|  |  |  |   addq.l #8,sp
   16d18:	|  |  |  |   tst.l d0
   16d1a:	|  |  |  +-- ble.w 16db4 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16d1e:	|  |  '--|-> move.l 44(sp),-(sp)
   16d22:	|  |     |   jsr 17a72 <__floatsisf>
   16d28:	|  |     |   addq.l #4,sp
   16d2a:	|  |     |   move.l d0,d3
   16d2c:	|  |     |   move.l 20(sp),-(sp)
   16d30:	|  |     |   move.l 16(sp),-(sp)
   16d34:	|  |     |   jsr 17d66 <__subsf3>
   16d3a:	|  |     |   addq.l #8,sp
   16d3c:	|  |     |   move.l d0,d2
   16d3e:	|  |     |   move.l 48(sp),-(sp)
   16d42:	|  |     |   jsr 17a72 <__floatsisf>
   16d48:	|  |     |   addq.l #4,sp
   16d4a:	|  |     |   move.l 16(sp),-(sp)
   16d4e:	|  |     |   move.l d0,-(sp)
   16d50:	|  |     |   jsr 17d66 <__subsf3>
   16d56:	|  |     |   addq.l #8,sp
   16d58:	|  |     |   move.l d0,-(sp)
   16d5a:	|  |     |   move.l d2,-(sp)
   16d5c:	|  |     |   jsr 17b24 <__mulsf3>
   16d62:	|  |     |   addq.l #8,sp
   16d64:	|  |     |   move.l d0,d2
   16d66:	|  |     |   move.l 16(sp),-(sp)
   16d6a:	|  |     |   move.l 12(sp),-(sp)
   16d6e:	|  |     |   jsr 17d66 <__subsf3>
   16d74:	|  |     |   addq.l #8,sp
   16d76:	|  |     |   move.l d0,-(sp)
   16d78:	|  |     |   move.l d2,-(sp)
   16d7a:	|  |     |   jsr 17928 <__divsf3>
   16d80:	|  |     |   addq.l #8,sp
   16d82:	|  |     |   move.l 20(sp),-(sp)
   16d86:	|  |     |   move.l d0,-(sp)
   16d88:	|  |     |   jsr 1782e <__addsf3>
   16d8e:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16d90:	|  |     |   move.l d0,-(sp)
   16d92:	|  |     |   move.l d3,-(sp)
   16d94:	|  |     |   jsr 17c98 <__ltsf2>
   16d9a:	|  |     |   addq.l #8,sp
   16d9c:	|  |     |   tst.l d0
   16d9e:	|  |     +-- bge.s 16db4 <pointInFloorPolygon+0x208>

			c = !c;
   16da0:	|  |     |   tst.l 24(sp)
   16da4:	|  |     |   seq d0
   16da6:	|  |     |   neg.b d0
   16da8:	|  |     |   move.b d0,d0
   16daa:	|  |     |   andi.l #255,d0
   16db0:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16db4:	|  |     '-> move.l 32(sp),d0
   16db8:	|  |         move.l d0,d1
   16dba:	|  |         addq.l #1,d1
   16dbc:	|  |         move.l d1,32(sp)
   16dc0:	|  |         move.l d0,28(sp)
   16dc4:	|  '-------> movea.l 40(sp),a0
   16dc8:	|            move.l (a0),d0
   16dca:	|            cmp.l 32(sp),d0
   16dce:	'----------- bgt.w 16bce <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16dd2:	             tst.l 24(sp)
   16dd6:	             sne d0
   16dd8:	             neg.b d0
   16dda:	             move.b d0,d0
   16ddc:	             andi.w #255,d0
}
   16de0:	             move.l (sp)+,d2
   16de2:	             move.l (sp)+,d3
   16de4:	             lea 28(sp),sp
   16de8:	             rts

00016dea <setFloor>:

BOOL setFloor (int fileNum) {
   16dea:	                               lea -132(sp),sp
   16dee:	                               move.l a6,-(sp)
   16df0:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16df2:	                               jsr 16a52 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16df8:	                               move.l 144(sp),-(sp)
   16dfc:	                               jsr 7a74 <openFileFromNum>
   16e02:	                               addq.l #4,sp
   16e04:	                               tst.l d0
   16e06:	                           ,-- bne.s 16e0e <setFloor+0x24>
   16e08:	                           |   clr.w d0
   16e0a:	,--------------------------|-- bra.w 1755a <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16e0e:	|                          '-> movea.l 1cef2 <currentFloor>,a0
   16e14:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16e18:	|                              move.l 1cdc2 <bigDataFile>,118(sp)
   16e20:	|                              move.l 1cde2 <DOSBase>,d0
   16e26:	|                              movea.l d0,a6
   16e28:	|                              move.l 118(sp),d1
   16e2c:	|                              jsr -306(a6)
   16e30:	|                              move.l d0,114(sp)
   16e34:	|                              move.l 114(sp),d0
   16e38:	|                              movea.l 1cef2 <currentFloor>,a0
   16e3e:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16e42:	|                              movea.l 1cef2 <currentFloor>,a0
   16e48:	|                              move.l 8(a0),d0
   16e4c:	|                              lsl.l #3,d0
   16e4e:	|                              move.l d0,110(sp)
   16e52:	|                              clr.l 106(sp)
   16e56:	|                              move.l 1cdda <SysBase>,d0
   16e5c:	|                              movea.l d0,a6
   16e5e:	|                              move.l 110(sp),d0
   16e62:	|                              move.l 106(sp),d1
   16e66:	|                              jsr -684(a6)
   16e6a:	|                              move.l d0,102(sp)
   16e6e:	|                              move.l 102(sp),d0
   16e72:	|                              movea.l 1cef2 <currentFloor>,a0
   16e78:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16e7c:	|                              movea.l 1cef2 <currentFloor>,a0
   16e82:	|                              move.l 12(a0),d0
   16e86:	|                          ,-- bne.s 16e9c <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16e88:	|                          |   pea 1a549 <PutChar+0x2467>
   16e8e:	|                          |   jsr 17640 <KPrintF>
   16e94:	|                          |   addq.l #4,sp
		return FALSE;
   16e96:	|                          |   clr.w d0
   16e98:	+--------------------------|-- bra.w 1755a <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e9c:	|                          '-> clr.l 136(sp)
   16ea0:	|                    ,-------- bra.w 16fb8 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16ea4:	|                 ,--|-------> move.l 1cdc2 <bigDataFile>,26(sp)
   16eac:	|                 |  |         move.l 1cde2 <DOSBase>,d0
   16eb2:	|                 |  |         movea.l d0,a6
   16eb4:	|                 |  |         move.l 26(sp),d1
   16eb8:	|                 |  |         jsr -306(a6)
   16ebc:	|                 |  |         move.l d0,22(sp)
   16ec0:	|                 |  |         move.l 22(sp),d1
   16ec4:	|                 |  |         movea.l 1cef2 <currentFloor>,a0
   16eca:	|                 |  |         movea.l 12(a0),a0
   16ece:	|                 |  |         move.l 136(sp),d0
   16ed2:	|                 |  |         lsl.l #3,d0
   16ed4:	|                 |  |         adda.l d0,a0
   16ed6:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16ed8:	|                 |  |         movea.l 1cef2 <currentFloor>,a0
   16ede:	|                 |  |         move.l 12(a0),d1
   16ee2:	|                 |  |         move.l 136(sp),d0
   16ee6:	|                 |  |         lsl.l #3,d0
   16ee8:	|                 |  |         movea.l d1,a0
   16eea:	|                 |  |         adda.l d0,a0
   16eec:	|                 |  |         move.l (a0),d0
   16eee:	|                 |  |         add.l d0,d0
   16ef0:	|                 |  |         add.l d0,d0
   16ef2:	|                 |  |         move.l d0,18(sp)
   16ef6:	|                 |  |         clr.l 14(sp)
   16efa:	|                 |  |         move.l 1cdda <SysBase>,d0
   16f00:	|                 |  |         movea.l d0,a6
   16f02:	|                 |  |         move.l 18(sp),d0
   16f06:	|                 |  |         move.l 14(sp),d1
   16f0a:	|                 |  |         jsr -684(a6)
   16f0e:	|                 |  |         move.l d0,10(sp)
   16f12:	|                 |  |         move.l 10(sp),d1
   16f16:	|                 |  |         movea.l 1cef2 <currentFloor>,a0
   16f1c:	|                 |  |         movea.l 12(a0),a0
   16f20:	|                 |  |         move.l 136(sp),d0
   16f24:	|                 |  |         lsl.l #3,d0
   16f26:	|                 |  |         adda.l d0,a0
   16f28:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16f2c:	|                 |  |         movea.l 1cef2 <currentFloor>,a0
   16f32:	|                 |  |         move.l 12(a0),d1
   16f36:	|                 |  |         move.l 136(sp),d0
   16f3a:	|                 |  |         lsl.l #3,d0
   16f3c:	|                 |  |         movea.l d1,a0
   16f3e:	|                 |  |         adda.l d0,a0
   16f40:	|                 |  |         move.l 4(a0),d0
   16f44:	|                 |  |     ,-- bne.s 16f5a <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16f46:	|                 |  |     |   pea 1a549 <PutChar+0x2467>
   16f4c:	|                 |  |     |   jsr 17640 <KPrintF>
   16f52:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16f54:	|                 |  |     |   clr.w d0
   16f56:	+-----------------|--|-----|-- bra.w 1755a <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16f5a:	|                 |  |     '-> clr.l 132(sp)
   16f5e:	|                 |  |     ,-- bra.s 16f98 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16f60:	|                 |  |  ,--|-> move.l 1cdc2 <bigDataFile>,d1
   16f66:	|                 |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   16f6c:	|                 |  |  |  |   movea.l 12(a0),a0
   16f70:	|                 |  |  |  |   move.l 136(sp),d0
   16f74:	|                 |  |  |  |   lsl.l #3,d0
   16f76:	|                 |  |  |  |   adda.l d0,a0
   16f78:	|                 |  |  |  |   movea.l 4(a0),a0
   16f7c:	|                 |  |  |  |   move.l 132(sp),d0
   16f80:	|                 |  |  |  |   add.l d0,d0
   16f82:	|                 |  |  |  |   add.l d0,d0
   16f84:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16f88:	|                 |  |  |  |   move.l d1,-(sp)
   16f8a:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16f90:	|                 |  |  |  |   addq.l #4,sp
   16f92:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16f94:	|                 |  |  |  |   addq.l #1,132(sp)
   16f98:	|                 |  |  |  '-> movea.l 1cef2 <currentFloor>,a0
   16f9e:	|                 |  |  |      move.l 12(a0),d1
   16fa2:	|                 |  |  |      move.l 136(sp),d0
   16fa6:	|                 |  |  |      lsl.l #3,d0
   16fa8:	|                 |  |  |      movea.l d1,a0
   16faa:	|                 |  |  |      adda.l d0,a0
   16fac:	|                 |  |  |      move.l (a0),d0
   16fae:	|                 |  |  |      cmp.l 132(sp),d0
   16fb2:	|                 |  |  '----- bgt.s 16f60 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16fb4:	|                 |  |         addq.l #1,136(sp)
   16fb8:	|                 |  '-------> movea.l 1cef2 <currentFloor>,a0
   16fbe:	|                 |            move.l 8(a0),d0
   16fc2:	|                 |            cmp.l 136(sp),d0
   16fc6:	|                 '----------- bgt.w 16ea4 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16fca:	|                              move.l 1cdc2 <bigDataFile>,d0
   16fd0:	|                              move.l d0,-(sp)
   16fd2:	|                              jsr 6bc <get2bytes>
   16fd8:	|                              addq.l #4,sp
   16fda:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16fde:	|                              move.l 136(sp),d0
   16fe2:	|                              lsl.l #3,d0
   16fe4:	|                              move.l d0,98(sp)
   16fe8:	|                              clr.l 94(sp)
   16fec:	|                              move.l 1cdda <SysBase>,d0
   16ff2:	|                              movea.l d0,a6
   16ff4:	|                              move.l 98(sp),d0
   16ff8:	|                              move.l 94(sp),d1
   16ffc:	|                              jsr -684(a6)
   17000:	|                              move.l d0,90(sp)
   17004:	|                              move.l 90(sp),d0
   17008:	|                              movea.l 1cef2 <currentFloor>,a0
   1700e:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   17012:	|                              movea.l 1cef2 <currentFloor>,a0
   17018:	|                              move.l 4(a0),d0
   1701c:	|                          ,-- bne.s 17032 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   1701e:	|                          |   pea 1a549 <PutChar+0x2467>
   17024:	|                          |   jsr 17640 <KPrintF>
   1702a:	|                          |   addq.l #4,sp
		return FALSE;
   1702c:	|                          |   clr.w d0
   1702e:	+--------------------------|-- bra.w 1755a <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   17032:	|                          '-> clr.l 132(sp)
   17036:	|                          ,-- bra.s 1708a <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   17038:	|                       ,--|-> move.l 1cdc2 <bigDataFile>,d1
   1703e:	|                       |  |   movea.l 1cef2 <currentFloor>,a0
   17044:	|                       |  |   movea.l 4(a0),a0
   17048:	|                       |  |   move.l 132(sp),d0
   1704c:	|                       |  |   lsl.l #3,d0
   1704e:	|                       |  |   lea (0,a0,d0.l),a2
   17052:	|                       |  |   move.l d1,-(sp)
   17054:	|                       |  |   jsr 6bc <get2bytes>
   1705a:	|                       |  |   addq.l #4,sp
   1705c:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   1705e:	|                       |  |   move.l 1cdc2 <bigDataFile>,d1
   17064:	|                       |  |   movea.l 1cef2 <currentFloor>,a0
   1706a:	|                       |  |   movea.l 4(a0),a0
   1706e:	|                       |  |   move.l 132(sp),d0
   17072:	|                       |  |   lsl.l #3,d0
   17074:	|                       |  |   lea (0,a0,d0.l),a2
   17078:	|                       |  |   move.l d1,-(sp)
   1707a:	|                       |  |   jsr 6bc <get2bytes>
   17080:	|                       |  |   addq.l #4,sp
   17082:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   17086:	|                       |  |   addq.l #1,132(sp)
   1708a:	|                       |  '-> move.l 132(sp),d0
   1708e:	|                       |      cmp.l 136(sp),d0
   17092:	|                       '----- blt.s 17038 <setFloor+0x24e>
	}

	finishAccess ();
   17094:	|                              jsr 796c <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1709a:	|                              movea.l 1cef2 <currentFloor>,a0
   170a0:	|                              move.l 8(a0),d0
   170a4:	|                              add.l d0,d0
   170a6:	|                              add.l d0,d0
   170a8:	|                              move.l d0,86(sp)
   170ac:	|                              clr.l 82(sp)
   170b0:	|                              move.l 1cdda <SysBase>,d0
   170b6:	|                              movea.l d0,a6
   170b8:	|                              move.l 86(sp),d0
   170bc:	|                              move.l 82(sp),d1
   170c0:	|                              jsr -684(a6)
   170c4:	|                              move.l d0,78(sp)
   170c8:	|                              move.l 78(sp),d0
   170cc:	|                              movea.l 1cef2 <currentFloor>,a0
   170d2:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   170d6:	|                              movea.l 1cef2 <currentFloor>,a0
   170dc:	|                              move.l 8(a0),d0
   170e0:	|                              add.l d0,d0
   170e2:	|                              add.l d0,d0
   170e4:	|                              move.l d0,74(sp)
   170e8:	|                              clr.l 70(sp)
   170ec:	|                              move.l 1cdda <SysBase>,d0
   170f2:	|                              movea.l d0,a6
   170f4:	|                              move.l 74(sp),d0
   170f8:	|                              move.l 70(sp),d1
   170fc:	|                              jsr -684(a6)
   17100:	|                              move.l d0,66(sp)
   17104:	|                              move.l 66(sp),d0
   17108:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   1710c:	|                              movea.l 1cef2 <currentFloor>,a0
   17112:	|                              move.l 16(a0),d0
   17116:	|                          ,-- bne.s 1712c <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   17118:	|                          |   pea 1a549 <PutChar+0x2467>
   1711e:	|                          |   jsr 17640 <KPrintF>
   17124:	|                          |   addq.l #4,sp
		return FALSE;
   17126:	|                          |   clr.w d0
   17128:	+--------------------------|-- bra.w 1755a <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1712c:	|                          '-> clr.l 136(sp)
   17130:	|                    ,-------- bra.w 17254 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   17134:	|                 ,--|-------> movea.l 1cef2 <currentFloor>,a0
   1713a:	|                 |  |         move.l 8(a0),d0
   1713e:	|                 |  |         add.l d0,d0
   17140:	|                 |  |         add.l d0,d0
   17142:	|                 |  |         move.l d0,50(sp)
   17146:	|                 |  |         clr.l 46(sp)
   1714a:	|                 |  |         move.l 1cdda <SysBase>,d0
   17150:	|                 |  |         movea.l d0,a6
   17152:	|                 |  |         move.l 50(sp),d0
   17156:	|                 |  |         move.l 46(sp),d1
   1715a:	|                 |  |         jsr -684(a6)
   1715e:	|                 |  |         move.l d0,42(sp)
   17162:	|                 |  |         move.l 42(sp),d0
   17166:	|                 |  |         movea.l 1cef2 <currentFloor>,a0
   1716c:	|                 |  |         movea.l 16(a0),a0
   17170:	|                 |  |         move.l 136(sp),d1
   17174:	|                 |  |         add.l d1,d1
   17176:	|                 |  |         add.l d1,d1
   17178:	|                 |  |         adda.l d1,a0
   1717a:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1717c:	|                 |  |         movea.l 1cef2 <currentFloor>,a0
   17182:	|                 |  |         move.l 8(a0),d0
   17186:	|                 |  |         add.l d0,d0
   17188:	|                 |  |         add.l d0,d0
   1718a:	|                 |  |         move.l d0,38(sp)
   1718e:	|                 |  |         clr.l 34(sp)
   17192:	|                 |  |         move.l 1cdda <SysBase>,d0
   17198:	|                 |  |         movea.l d0,a6
   1719a:	|                 |  |         move.l 38(sp),d0
   1719e:	|                 |  |         move.l 34(sp),d1
   171a2:	|                 |  |         jsr -684(a6)
   171a6:	|                 |  |         move.l d0,30(sp)
   171aa:	|                 |  |         move.l 30(sp),d1
   171ae:	|                 |  |         move.l 136(sp),d0
   171b2:	|                 |  |         add.l d0,d0
   171b4:	|                 |  |         add.l d0,d0
   171b6:	|                 |  |         movea.l 62(sp),a0
   171ba:	|                 |  |         adda.l d0,a0
   171bc:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   171be:	|                 |  |         movea.l 1cef2 <currentFloor>,a0
   171c4:	|                 |  |         move.l 16(a0),d1
   171c8:	|                 |  |         move.l 136(sp),d0
   171cc:	|                 |  |         add.l d0,d0
   171ce:	|                 |  |         add.l d0,d0
   171d0:	|                 |  |         movea.l d1,a0
   171d2:	|                 |  |         adda.l d0,a0
   171d4:	|                 |  |         move.l (a0),d0
   171d6:	|                 |  |     ,-- bne.s 171ec <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   171d8:	|                 |  |     |   pea 1a549 <PutChar+0x2467>
   171de:	|                 |  |     |   jsr 17640 <KPrintF>
   171e4:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   171e6:	|                 |  |     |   clr.w d0
   171e8:	+-----------------|--|-----|-- bra.w 1755a <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   171ec:	|                 |  |     '-> clr.l 132(sp)
   171f0:	|                 |  |     ,-- bra.s 17240 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   171f2:	|                 |  |  ,--|-> movea.l 1cef2 <currentFloor>,a0
   171f8:	|                 |  |  |  |   move.l 16(a0),d1
   171fc:	|                 |  |  |  |   move.l 136(sp),d0
   17200:	|                 |  |  |  |   add.l d0,d0
   17202:	|                 |  |  |  |   add.l d0,d0
   17204:	|                 |  |  |  |   movea.l d1,a0
   17206:	|                 |  |  |  |   adda.l d0,a0
   17208:	|                 |  |  |  |   move.l (a0),d1
   1720a:	|                 |  |  |  |   move.l 132(sp),d0
   1720e:	|                 |  |  |  |   add.l d0,d0
   17210:	|                 |  |  |  |   add.l d0,d0
   17212:	|                 |  |  |  |   movea.l d1,a0
   17214:	|                 |  |  |  |   adda.l d0,a0
   17216:	|                 |  |  |  |   moveq #-1,d1
   17218:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   1721a:	|                 |  |  |  |   move.l 136(sp),d0
   1721e:	|                 |  |  |  |   add.l d0,d0
   17220:	|                 |  |  |  |   add.l d0,d0
   17222:	|                 |  |  |  |   movea.l 62(sp),a0
   17226:	|                 |  |  |  |   adda.l d0,a0
   17228:	|                 |  |  |  |   move.l (a0),d1
   1722a:	|                 |  |  |  |   move.l 132(sp),d0
   1722e:	|                 |  |  |  |   add.l d0,d0
   17230:	|                 |  |  |  |   add.l d0,d0
   17232:	|                 |  |  |  |   movea.l d1,a0
   17234:	|                 |  |  |  |   adda.l d0,a0
   17236:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1723c:	|                 |  |  |  |   addq.l #1,132(sp)
   17240:	|                 |  |  |  '-> movea.l 1cef2 <currentFloor>,a0
   17246:	|                 |  |  |      move.l 8(a0),d0
   1724a:	|                 |  |  |      cmp.l 132(sp),d0
   1724e:	|                 |  |  '----- bgt.s 171f2 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17250:	|                 |  |         addq.l #1,136(sp)
   17254:	|                 |  '-------> movea.l 1cef2 <currentFloor>,a0
   1725a:	|                 |            move.l 8(a0),d0
   1725e:	|                 |            cmp.l 136(sp),d0
   17262:	|                 '----------- bgt.w 17134 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17266:	|                              clr.l 136(sp)
   1726a:	|              ,-------------- bra.w 17370 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1726e:	|           ,--|-------------> clr.l 132(sp)
   17272:	|           |  |     ,-------- bra.w 1735a <setFloor+0x570>
			if (i != j) {
   17276:	|           |  |  ,--|-------> move.l 136(sp),d0
   1727a:	|           |  |  |  |         cmp.l 132(sp),d0
   1727e:	|           |  |  |  |     ,-- beq.w 17310 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   17282:	|           |  |  |  |     |   movea.l 1cef2 <currentFloor>,a0
   17288:	|           |  |  |  |     |   move.l 12(a0),d1
   1728c:	|           |  |  |  |     |   move.l 132(sp),d0
   17290:	|           |  |  |  |     |   lsl.l #3,d0
   17292:	|           |  |  |  |     |   movea.l d1,a1
   17294:	|           |  |  |  |     |   adda.l d0,a1
   17296:	|           |  |  |  |     |   movea.l 1cef2 <currentFloor>,a0
   1729c:	|           |  |  |  |     |   move.l 12(a0),d1
   172a0:	|           |  |  |  |     |   move.l 136(sp),d0
   172a4:	|           |  |  |  |     |   lsl.l #3,d0
   172a6:	|           |  |  |  |     |   movea.l d1,a0
   172a8:	|           |  |  |  |     |   adda.l d0,a0
   172aa:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   172ae:	|           |  |  |  |     |   move.l (a1),-(sp)
   172b0:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   172b4:	|           |  |  |  |     |   move.l (a0),-(sp)
   172b6:	|           |  |  |  |     |   jsr 16b42 <polysShareSide>
   172bc:	|           |  |  |  |     |   lea 16(sp),sp
   172c0:	|           |  |  |  |     |   tst.w d0
   172c2:	|           |  |  |  |  ,--|-- beq.w 17356 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   172c6:	|           |  |  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   172cc:	|           |  |  |  |  |  |   move.l 16(a0),d1
   172d0:	|           |  |  |  |  |  |   move.l 136(sp),d0
   172d4:	|           |  |  |  |  |  |   add.l d0,d0
   172d6:	|           |  |  |  |  |  |   add.l d0,d0
   172d8:	|           |  |  |  |  |  |   movea.l d1,a0
   172da:	|           |  |  |  |  |  |   adda.l d0,a0
   172dc:	|           |  |  |  |  |  |   move.l (a0),d1
   172de:	|           |  |  |  |  |  |   move.l 132(sp),d0
   172e2:	|           |  |  |  |  |  |   add.l d0,d0
   172e4:	|           |  |  |  |  |  |   add.l d0,d0
   172e6:	|           |  |  |  |  |  |   movea.l d1,a0
   172e8:	|           |  |  |  |  |  |   adda.l d0,a0
   172ea:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   172ee:	|           |  |  |  |  |  |   move.l 136(sp),d0
   172f2:	|           |  |  |  |  |  |   add.l d0,d0
   172f4:	|           |  |  |  |  |  |   add.l d0,d0
   172f6:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   172fa:	|           |  |  |  |  |  |   adda.l d0,a0
   172fc:	|           |  |  |  |  |  |   move.l (a0),d1
   172fe:	|           |  |  |  |  |  |   move.l 132(sp),d0
   17302:	|           |  |  |  |  |  |   add.l d0,d0
   17304:	|           |  |  |  |  |  |   add.l d0,d0
   17306:	|           |  |  |  |  |  |   movea.l d1,a0
   17308:	|           |  |  |  |  |  |   adda.l d0,a0
   1730a:	|           |  |  |  |  |  |   moveq #1,d1
   1730c:	|           |  |  |  |  |  |   move.l d1,(a0)
   1730e:	|           |  |  |  |  +--|-- bra.s 17356 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   17310:	|           |  |  |  |  |  '-> movea.l 1cef2 <currentFloor>,a0
   17316:	|           |  |  |  |  |      move.l 16(a0),d1
   1731a:	|           |  |  |  |  |      move.l 136(sp),d0
   1731e:	|           |  |  |  |  |      add.l d0,d0
   17320:	|           |  |  |  |  |      add.l d0,d0
   17322:	|           |  |  |  |  |      movea.l d1,a0
   17324:	|           |  |  |  |  |      adda.l d0,a0
   17326:	|           |  |  |  |  |      move.l (a0),d1
   17328:	|           |  |  |  |  |      move.l 132(sp),d0
   1732c:	|           |  |  |  |  |      add.l d0,d0
   1732e:	|           |  |  |  |  |      add.l d0,d0
   17330:	|           |  |  |  |  |      movea.l d1,a0
   17332:	|           |  |  |  |  |      adda.l d0,a0
   17334:	|           |  |  |  |  |      moveq #-2,d0
   17336:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   17338:	|           |  |  |  |  |      move.l 136(sp),d0
   1733c:	|           |  |  |  |  |      add.l d0,d0
   1733e:	|           |  |  |  |  |      add.l d0,d0
   17340:	|           |  |  |  |  |      movea.l 62(sp),a0
   17344:	|           |  |  |  |  |      adda.l d0,a0
   17346:	|           |  |  |  |  |      move.l (a0),d1
   17348:	|           |  |  |  |  |      move.l 132(sp),d0
   1734c:	|           |  |  |  |  |      add.l d0,d0
   1734e:	|           |  |  |  |  |      add.l d0,d0
   17350:	|           |  |  |  |  |      movea.l d1,a0
   17352:	|           |  |  |  |  |      adda.l d0,a0
   17354:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17356:	|           |  |  |  |  '----> addq.l #1,132(sp)
   1735a:	|           |  |  |  '-------> movea.l 1cef2 <currentFloor>,a0
   17360:	|           |  |  |            move.l 8(a0),d0
   17364:	|           |  |  |            cmp.l 132(sp),d0
   17368:	|           |  |  '----------- bgt.w 17276 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1736c:	|           |  |               addq.l #1,136(sp)
   17370:	|           |  '-------------> movea.l 1cef2 <currentFloor>,a0
   17376:	|           |                  move.l 8(a0),d0
   1737a:	|           |                  cmp.l 136(sp),d0
   1737e:	|           '----------------- bgt.w 1726e <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   17382:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   17386:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   1738a:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1738e:	|  |                           clr.l 136(sp)
   17392:	|  |     ,-------------------- bra.w 174e8 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17396:	|  |  ,--|-------------------> clr.l 132(sp)
   1739a:	|  |  |  |     ,-------------- bra.w 174d2 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   1739e:	|  |  |  |  ,--|-------------> movea.l 1cef2 <currentFloor>,a0
   173a4:	|  |  |  |  |  |               move.l 16(a0),d1
   173a8:	|  |  |  |  |  |               move.l 136(sp),d0
   173ac:	|  |  |  |  |  |               add.l d0,d0
   173ae:	|  |  |  |  |  |               add.l d0,d0
   173b0:	|  |  |  |  |  |               movea.l d1,a0
   173b2:	|  |  |  |  |  |               adda.l d0,a0
   173b4:	|  |  |  |  |  |               move.l (a0),d1
   173b6:	|  |  |  |  |  |               move.l 132(sp),d0
   173ba:	|  |  |  |  |  |               add.l d0,d0
   173bc:	|  |  |  |  |  |               add.l d0,d0
   173be:	|  |  |  |  |  |               movea.l d1,a0
   173c0:	|  |  |  |  |  |               adda.l d0,a0
   173c2:	|  |  |  |  |  |               move.l (a0),d0
   173c4:	|  |  |  |  |  |               moveq #-1,d1
   173c6:	|  |  |  |  |  |               cmp.l d0,d1
   173c8:	|  |  |  |  |  |  ,----------- bne.w 174ce <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   173cc:	|  |  |  |  |  |  |            clr.l 122(sp)
   173d0:	|  |  |  |  |  |  |     ,----- bra.w 174bc <setFloor+0x6d2>
						if (d != i && d != j) {
   173d4:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   173d8:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   173dc:	|  |  |  |  |  |  |  |  |  ,-- beq.w 174b8 <setFloor+0x6ce>
   173e0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   173e4:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   173e8:	|  |  |  |  |  |  |  |  |  +-- beq.w 174b8 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   173ec:	|  |  |  |  |  |  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   173f2:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   173f6:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   173fa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   173fc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   173fe:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17400:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17402:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17404:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17408:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1740a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1740c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1740e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17410:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   17412:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   17416:	|  |  |  |  |  |  |  |  |  +-- bne.w 174b8 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   1741a:	|  |  |  |  |  |  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   17420:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17424:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17428:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1742a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1742c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1742e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17430:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17432:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17436:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17438:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1743a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1743c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1743e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   17440:	|  |  |  |  |  |  |  |  |  +-- bmi.s 174b8 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   17442:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17446:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17448:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1744a:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1744e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17450:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17452:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17456:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17458:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1745a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1745c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1745e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   17460:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   17464:	|  |  |  |  |  |  |  |  |  +-- bgt.s 174b8 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   17466:	|  |  |  |  |  |  |  |  |  |   movea.l 1cef2 <currentFloor>,a0
   1746c:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17470:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17474:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17476:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17478:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1747a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1747c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1747e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17482:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17484:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17486:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17488:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1748a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   1748e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17492:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17494:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17496:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   1749a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1749c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1749e:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   174a2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174a4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174a6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   174a8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   174aa:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   174ae:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   174b0:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   174b2:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   174b8:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   174bc:	|  |  |  |  |  |  |  |  '----> movea.l 1cef2 <currentFloor>,a0
   174c2:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   174c6:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   174ca:	|  |  |  |  |  |  |  '-------- bgt.w 173d4 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   174ce:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   174d2:	|  |  |  |  |  '-------------> movea.l 1cef2 <currentFloor>,a0
   174d8:	|  |  |  |  |                  move.l 8(a0),d0
   174dc:	|  |  |  |  |                  cmp.l 132(sp),d0
   174e0:	|  |  |  |  '----------------- bgt.w 1739e <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   174e4:	|  |  |  |                     addq.l #1,136(sp)
   174e8:	|  |  |  '-------------------> movea.l 1cef2 <currentFloor>,a0
   174ee:	|  |  |                        move.l 8(a0),d0
   174f2:	|  |  |                        cmp.l 136(sp),d0
   174f6:	|  |  '----------------------- bgt.w 17396 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   174fa:	|  |                           tst.w 130(sp)
   174fe:	|  '-------------------------- bne.w 17386 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17502:	|                              clr.l 136(sp)
   17506:	|                          ,-- bra.s 1752e <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   17508:	|                       ,--|-> move.l 136(sp),d0
   1750c:	|                       |  |   add.l d0,d0
   1750e:	|                       |  |   add.l d0,d0
   17510:	|                       |  |   movea.l 62(sp),a0
   17514:	|                       |  |   adda.l d0,a0
   17516:	|                       |  |   move.l (a0),54(sp)
   1751a:	|                       |  |   move.l 1cdda <SysBase>,d0
   17520:	|                       |  |   movea.l d0,a6
   17522:	|                       |  |   movea.l 54(sp),a1
   17526:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1752a:	|                       |  |   addq.l #1,136(sp)
   1752e:	|                       |  '-> movea.l 1cef2 <currentFloor>,a0
   17534:	|                       |      move.l 8(a0),d0
   17538:	|                       |      cmp.l 136(sp),d0
   1753c:	|                       '----- bgt.s 17508 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   1753e:	|                              move.l 62(sp),58(sp)
   17544:	|                              move.l 1cdda <SysBase>,d0
   1754a:	|                              movea.l d0,a6
   1754c:	|                              movea.l 58(sp),a1
   17550:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   17554:	|                              clr.l 62(sp)

	return TRUE;
   17558:	|                              moveq #1,d0
}
   1755a:	'----------------------------> movea.l (sp)+,a2
   1755c:	                               movea.l (sp)+,a6
   1755e:	                               lea 132(sp),sp
   17562:	                               rts

00017564 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   17564:	jsr 16a52 <killFloor>
	noFloor ();
   1756a:	jsr 1695a <noFloor>
   17570:	nop
   17572:	rts

00017574 <WaitVbl>:
void WaitVbl() {
   17574:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17576:	   ,-> movea.l #14675972,a0
   1757c:	   |   move.l (a0),d0
   1757e:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   17580:	   |   move.l (sp),d0
   17582:	   |   andi.l #130816,d0
   17588:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   1758a:	   |   move.l (sp),d0
   1758c:	   |   cmpi.l #76800,d0
   17592:	   '-- beq.s 17576 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17594:	,----> movea.l #14675972,a0
   1759a:	|      move.l (a0),d0
   1759c:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   175a0:	|      move.l 4(sp),d0
   175a4:	|      andi.l #130816,d0
   175aa:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   175ae:	|      move.l 4(sp),d0
   175b2:	|      cmpi.l #76800,d0
   175b8:	|  ,-- beq.s 175bc <WaitVbl+0x48>
	while (1) {
   175ba:	'--|-- bra.s 17594 <WaitVbl+0x20>
			break;
   175bc:	   '-> nop
}
   175be:	       nop
   175c0:	       addq.l #8,sp
   175c2:	       rts

000175c4 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   175c4:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   175c6:	       move.l 8(sp),(sp)
	while(len-- > 0)
   175ca:	   ,-- bra.s 175dc <memset+0x18>
		*ptr++ = val;
   175cc:	,--|-> move.l (sp),d0
   175ce:	|  |   move.l d0,d1
   175d0:	|  |   addq.l #1,d1
   175d2:	|  |   move.l d1,(sp)
   175d4:	|  |   move.l 12(sp),d1
   175d8:	|  |   movea.l d0,a0
   175da:	|  |   move.b d1,(a0)
	while(len-- > 0)
   175dc:	|  '-> move.l 16(sp),d0
   175e0:	|      move.l d0,d1
   175e2:	|      subq.l #1,d1
   175e4:	|      move.l d1,16(sp)
   175e8:	|      tst.l d0
   175ea:	'----- bne.s 175cc <memset+0x8>
	return dest;
   175ec:	       move.l 8(sp),d0
}
   175f0:	       addq.l #4,sp
   175f2:	       rts

000175f4 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   175f4:	       subq.l #8,sp
   175f6:	       move.l d2,-(sp)
	char *d = (char *)dest;
   175f8:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   175fe:	       move.l 20(sp),4(sp)
	while(len--)
   17604:	   ,-- bra.s 17626 <memcpy+0x32>
		*d++ = *s++;
   17606:	,--|-> move.l 4(sp),d1
   1760a:	|  |   move.l d1,d0
   1760c:	|  |   addq.l #1,d0
   1760e:	|  |   move.l d0,4(sp)
   17612:	|  |   move.l 8(sp),d0
   17616:	|  |   move.l d0,d2
   17618:	|  |   addq.l #1,d2
   1761a:	|  |   move.l d2,8(sp)
   1761e:	|  |   movea.l d1,a0
   17620:	|  |   move.b (a0),d1
   17622:	|  |   movea.l d0,a0
   17624:	|  |   move.b d1,(a0)
	while(len--)
   17626:	|  '-> move.l 24(sp),d0
   1762a:	|      move.l d0,d1
   1762c:	|      subq.l #1,d1
   1762e:	|      move.l d1,24(sp)
   17632:	|      tst.l d0
   17634:	'----- bne.s 17606 <memcpy+0x12>
	return dest;
   17636:	       move.l 16(sp),d0
}
   1763a:	       move.l (sp)+,d2
   1763c:	       addq.l #8,sp
   1763e:	       rts

00017640 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   17640:	       lea -128(sp),sp
   17644:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17648:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3fbd>,d0
   1764e:	       cmpi.w #20153,d0
   17652:	   ,-- beq.s 17676 <KPrintF+0x36>
   17654:	   |   cmpi.w #-24562,d0
   17658:	   +-- beq.s 17676 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   1765a:	   |   movea.l 1cdda <SysBase>,a6
   17660:	   |   movea.l 144(sp),a0
   17664:	   |   lea 148(sp),a1
   17668:	   |   lea 180d4 <KPutCharX>,a2
   1766e:	   |   suba.l a3,a3
   17670:	   |   jsr -522(a6)
}
   17674:	,--|-- bra.s 176a0 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   17676:	|  '-> movea.l 1cdda <SysBase>,a6
   1767c:	|      movea.l 144(sp),a0
   17680:	|      lea 148(sp),a1
   17684:	|      lea 180e2 <PutChar>,a2
   1768a:	|      lea 12(sp),a3
   1768e:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   17692:	|      move.l a3,-(sp)
   17694:	|      pea 56 <_start+0x56>
   17698:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3fbd>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1769e:	|      addq.l #8,sp
}
   176a0:	'----> movem.l (sp)+,a2-a3/a6
   176a4:	       lea 128(sp),sp
   176a8:	       rts

000176aa <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   176aa:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   176ac:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   176b2:	       movea.l (sp),a0
   176b4:	       move.w (a0),d0
   176b6:	       cmpi.w #20153,d0
   176ba:	   ,-- beq.s 176c6 <debug_cmd+0x1c>
   176bc:	   |   movea.l (sp),a0
   176be:	   |   move.w (a0),d0
   176c0:	   |   cmpi.w #-24562,d0
   176c4:	,--|-- bne.s 176e4 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   176c6:	|  '-> move.l 20(sp),-(sp)
   176ca:	|      move.l 20(sp),-(sp)
   176ce:	|      move.l 20(sp),-(sp)
   176d2:	|      move.l 20(sp),-(sp)
   176d6:	|      pea 58 <_start+0x58>
   176da:	|      movea.l 20(sp),a0
   176de:	|      jsr (a0)
   176e0:	|      lea 20(sp),sp
	}
}
   176e4:	'----> nop
   176e6:	       addq.l #4,sp
   176e8:	       rts

000176ea <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   176ea:	       move.l d2,-(sp)
	while(*source && --num > 0)
   176ec:	   ,-- bra.s 1770e <my_strncpy+0x24>
		*destination++ = *source++;
   176ee:	,--|-> move.l 12(sp),d1
   176f2:	|  |   move.l d1,d0
   176f4:	|  |   addq.l #1,d0
   176f6:	|  |   move.l d0,12(sp)
   176fa:	|  |   move.l 8(sp),d0
   176fe:	|  |   move.l d0,d2
   17700:	|  |   addq.l #1,d2
   17702:	|  |   move.l d2,8(sp)
   17706:	|  |   movea.l d1,a0
   17708:	|  |   move.b (a0),d1
   1770a:	|  |   movea.l d0,a0
   1770c:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   1770e:	|  '-> movea.l 12(sp),a0
   17712:	|      move.b (a0),d0
   17714:	|  ,-- beq.s 1771c <my_strncpy+0x32>
   17716:	|  |   subq.l #1,16(sp)
   1771a:	'--|-- bne.s 176ee <my_strncpy+0x4>
	*destination = '\0';
   1771c:	   '-> movea.l 8(sp),a0
   17720:	       clr.b (a0)
}
   17722:	       nop
   17724:	       move.l (sp)+,d2
   17726:	       rts

00017728 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17728:	    lea -60(sp),sp
   1772c:	    movea.l 72(sp),a1
   17730:	    movea.l 76(sp),a0
   17734:	    move.l 80(sp),d1
   17738:	    move.l 84(sp),d0
   1773c:	    movea.w a1,a1
   1773e:	    move.w a1,8(sp)
   17742:	    movea.w a0,a0
   17744:	    move.w a0,6(sp)
   17748:	    move.w d1,d1
   1774a:	    move.w d1,4(sp)
   1774e:	    move.w d0,d0
   17750:	    move.w d0,2(sp)
	struct debug_resource resource = {
   17754:	    lea 10(sp),a0
   17758:	    clr.l (a0)
   1775a:	    addq.l #4,a0
   1775c:	    clr.l (a0)
   1775e:	    addq.l #4,a0
   17760:	    clr.l (a0)
   17762:	    addq.l #4,a0
   17764:	    clr.l (a0)
   17766:	    addq.l #4,a0
   17768:	    clr.l (a0)
   1776a:	    addq.l #4,a0
   1776c:	    clr.l (a0)
   1776e:	    addq.l #4,a0
   17770:	    clr.l (a0)
   17772:	    addq.l #4,a0
   17774:	    clr.l (a0)
   17776:	    addq.l #4,a0
   17778:	    clr.l (a0)
   1777a:	    addq.l #4,a0
   1777c:	    clr.l (a0)
   1777e:	    addq.l #4,a0
   17780:	    clr.l (a0)
   17782:	    addq.l #4,a0
   17784:	    clr.l (a0)
   17786:	    addq.l #4,a0
   17788:	    clr.w (a0)
   1778a:	    addq.l #2,a0
		.address = (unsigned int)addr,
   1778c:	    move.l 64(sp),d0
	struct debug_resource resource = {
   17790:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   17794:	    move.w 8(sp),d0
   17798:	,-- bpl.s 1779c <debug_register_bitmap+0x74>
   1779a:	|   addq.w #7,d0
   1779c:	'-> asr.w #3,d0
   1779e:	    movea.w d0,a0
   177a0:	    movea.w 6(sp),a1
   177a4:	    move.l a1,-(sp)
   177a6:	    move.l a0,-(sp)
   177a8:	    jsr 17fcc <__mulsi3>
   177ae:	    addq.l #8,sp
   177b0:	    movea.w 4(sp),a0
   177b4:	    move.l a0,-(sp)
   177b6:	    move.l d0,-(sp)
   177b8:	    jsr 17fcc <__mulsi3>
   177be:	    addq.l #8,sp
	struct debug_resource resource = {
   177c0:	    move.l d0,14(sp)
   177c4:	    move.w 2(sp),52(sp)
   177ca:	    move.w 8(sp),54(sp)
   177d0:	    move.w 6(sp),56(sp)
   177d6:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   177dc:	    moveq #0,d0
   177de:	    move.w 2(sp),d0
   177e2:	    moveq #2,d1
   177e4:	    and.l d1,d0
   177e6:	,-- beq.s 177f2 <debug_register_bitmap+0xca>
		resource.size *= 2;
   177e8:	|   move.l 14(sp),d0
   177ec:	|   add.l d0,d0
   177ee:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   177f2:	'-> pea 20 <_start+0x20>
   177f6:	    move.l 72(sp),-(sp)
   177fa:	    lea 18(sp),a0
   177fe:	    move.l a0,d0
   17800:	    addq.l #8,d0
   17802:	    move.l d0,-(sp)
   17804:	    jsr 176ea <my_strncpy>
   1780a:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   1780e:	    lea 10(sp),a0
   17812:	    clr.l -(sp)
   17814:	    clr.l -(sp)
   17816:	    move.l a0,-(sp)
   17818:	    pea 4 <_start+0x4>
   1781c:	    jsr 176aa <debug_cmd>
   17822:	    lea 16(sp),sp
}
   17826:	    nop
   17828:	    lea 60(sp),sp
   1782c:	    rts

0001782e <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1782e:	lea -12(sp),sp
   17832:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17834:	move.l 20(sp),12(sp)
   1783a:	move.l 24(sp),8(sp)
   17840:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17846:	movea.l d0,a6
   17848:	move.l 12(sp),d0
   1784c:	move.l 8(sp),d1
   17850:	jsr -66(a6)
   17854:	move.l d0,4(sp)
   17858:	move.l 4(sp),d0
}
   1785c:	movea.l (sp)+,a6
   1785e:	lea 12(sp),sp
   17862:	rts

00017864 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   17864:	lea -32(sp),sp
   17868:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   1786c:	move.l 48(sp),36(sp)
   17872:	move.l 52(sp),40(sp)
   17878:	move.l 56(sp),28(sp)
   1787e:	move.l 60(sp),32(sp)
   17884:	move.l 1cdf2 <MathIeeeDoubBasBase>,d0
   1788a:	movea.l d0,a6
   1788c:	move.l 36(sp),d0
   17890:	move.l 40(sp),d1
   17894:	move.l 28(sp),d2
   17898:	move.l 32(sp),d3
   1789c:	jsr -66(a6)
   178a0:	move.l d0,12(sp)
   178a4:	move.l d1,16(sp)
   178a8:	move.l 12(sp),20(sp)
   178ae:	move.l 16(sp),24(sp)
   178b4:	move.l 20(sp),d0
   178b8:	move.l 24(sp),d1
}
   178bc:	movem.l (sp)+,d2-d3/a6
   178c0:	lea 32(sp),sp
   178c4:	rts

000178c6 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   178c6:	lea -32(sp),sp
   178ca:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   178ce:	move.l 48(sp),36(sp)
   178d4:	move.l 52(sp),40(sp)
   178da:	move.l 56(sp),28(sp)
   178e0:	move.l 60(sp),32(sp)
   178e6:	move.l 1cdf2 <MathIeeeDoubBasBase>,d0
   178ec:	movea.l d0,a6
   178ee:	move.l 36(sp),d0
   178f2:	move.l 40(sp),d1
   178f6:	move.l 28(sp),d2
   178fa:	move.l 32(sp),d3
   178fe:	jsr -84(a6)
   17902:	move.l d0,12(sp)
   17906:	move.l d1,16(sp)
   1790a:	move.l 12(sp),20(sp)
   17910:	move.l 16(sp),24(sp)
   17916:	move.l 20(sp),d0
   1791a:	move.l 24(sp),d1
}
   1791e:	movem.l (sp)+,d2-d3/a6
   17922:	lea 32(sp),sp
   17926:	rts

00017928 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17928:	lea -12(sp),sp
   1792c:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1792e:	move.l 20(sp),12(sp)
   17934:	move.l 24(sp),8(sp)
   1793a:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17940:	movea.l d0,a6
   17942:	move.l 12(sp),d0
   17946:	move.l 8(sp),d1
   1794a:	jsr -84(a6)
   1794e:	move.l d0,4(sp)
   17952:	move.l 4(sp),d0
}
   17956:	movea.l (sp)+,a6
   17958:	lea 12(sp),sp
   1795c:	rts

0001795e <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   1795e:	lea -12(sp),sp
   17962:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17964:	move.l 20(sp),12(sp)
   1796a:	move.l 24(sp),8(sp)
   17970:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17976:	movea.l d0,a6
   17978:	move.l 12(sp),d0
   1797c:	move.l 8(sp),d1
   17980:	jsr -42(a6)
   17984:	move.l d0,4(sp)
   17988:	move.l 4(sp),d0
}
   1798c:	movea.l (sp)+,a6
   1798e:	lea 12(sp),sp
   17992:	rts

00017994 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17994:	lea -20(sp),sp
   17998:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   1799a:	move.l 28(sp),20(sp)
   179a0:	move.l 1cdf6 <MathIeeeDoubTransBase>,d0
   179a6:	movea.l d0,a6
   179a8:	move.l 20(sp),d0
   179ac:	jsr -108(a6)
   179b0:	move.l d0,4(sp)
   179b4:	move.l d1,8(sp)
   179b8:	move.l 4(sp),12(sp)
   179be:	move.l 8(sp),16(sp)
   179c4:	move.l 12(sp),d0
   179c8:	move.l 16(sp),d1
}
   179cc:	movea.l (sp)+,a6
   179ce:	lea 20(sp),sp
   179d2:	rts

000179d4 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   179d4:	lea -12(sp),sp
   179d8:	move.l a6,-(sp)
	return IEEEDPFix(value);
   179da:	move.l 20(sp),8(sp)
   179e0:	move.l 24(sp),12(sp)
   179e6:	move.l 1cdf2 <MathIeeeDoubBasBase>,d0
   179ec:	movea.l d0,a6
   179ee:	move.l 8(sp),d0
   179f2:	move.l 12(sp),d1
   179f6:	jsr -30(a6)
   179fa:	move.l d0,4(sp)
   179fe:	move.l 4(sp),d0
}
   17a02:	movea.l (sp)+,a6
   17a04:	lea 12(sp),sp
   17a08:	rts

00017a0a <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17a0a:	subq.l #8,sp
   17a0c:	move.l a6,-(sp)
	return IEEESPFix(value);
   17a0e:	move.l 16(sp),8(sp)
   17a14:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17a1a:	movea.l d0,a6
   17a1c:	move.l 8(sp),d0
   17a20:	jsr -30(a6)
   17a24:	move.l d0,4(sp)
   17a28:	move.l 4(sp),d0
}
   17a2c:	movea.l (sp)+,a6
   17a2e:	addq.l #8,sp
   17a30:	rts

00017a32 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17a32:	lea -20(sp),sp
   17a36:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17a38:	move.l 28(sp),20(sp)
   17a3e:	move.l 1cdf2 <MathIeeeDoubBasBase>,d0
   17a44:	movea.l d0,a6
   17a46:	move.l 20(sp),d0
   17a4a:	jsr -36(a6)
   17a4e:	move.l d0,4(sp)
   17a52:	move.l d1,8(sp)
   17a56:	move.l 4(sp),12(sp)
   17a5c:	move.l 8(sp),16(sp)
   17a62:	move.l 12(sp),d0
   17a66:	move.l 16(sp),d1
}
   17a6a:	movea.l (sp)+,a6
   17a6c:	lea 20(sp),sp
   17a70:	rts

00017a72 <__floatsisf>:

FLOAT __floatsisf(int i) {
   17a72:	subq.l #8,sp
   17a74:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17a76:	move.l 16(sp),8(sp)
   17a7c:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17a82:	movea.l d0,a6
   17a84:	move.l 8(sp),d0
   17a88:	jsr -36(a6)
   17a8c:	move.l d0,4(sp)
   17a90:	move.l 4(sp),d0
}
   17a94:	movea.l (sp)+,a6
   17a96:	addq.l #8,sp
   17a98:	rts

00017a9a <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17a9a:	subq.l #8,sp
   17a9c:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17a9e:	move.l 16(sp),8(sp)
   17aa4:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17aaa:	movea.l d0,a6
   17aac:	move.l 8(sp),d0
   17ab0:	jsr -36(a6)
   17ab4:	move.l d0,4(sp)
   17ab8:	move.l 4(sp),d0
}
   17abc:	movea.l (sp)+,a6
   17abe:	addq.l #8,sp
   17ac0:	rts

00017ac2 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   17ac2:	lea -32(sp),sp
   17ac6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17aca:	move.l 48(sp),36(sp)
   17ad0:	move.l 52(sp),40(sp)
   17ad6:	move.l 56(sp),28(sp)
   17adc:	move.l 60(sp),32(sp)
   17ae2:	move.l 1cdf2 <MathIeeeDoubBasBase>,d0
   17ae8:	movea.l d0,a6
   17aea:	move.l 36(sp),d0
   17aee:	move.l 40(sp),d1
   17af2:	move.l 28(sp),d2
   17af6:	move.l 32(sp),d3
   17afa:	jsr -78(a6)
   17afe:	move.l d0,12(sp)
   17b02:	move.l d1,16(sp)
   17b06:	move.l 12(sp),20(sp)
   17b0c:	move.l 16(sp),24(sp)
   17b12:	move.l 20(sp),d0
   17b16:	move.l 24(sp),d1
}
   17b1a:	movem.l (sp)+,d2-d3/a6
   17b1e:	lea 32(sp),sp
   17b22:	rts

00017b24 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17b24:	lea -12(sp),sp
   17b28:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17b2a:	move.l 20(sp),12(sp)
   17b30:	move.l 24(sp),8(sp)
   17b36:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17b3c:	movea.l d0,a6
   17b3e:	move.l 12(sp),d0
   17b42:	move.l 8(sp),d1
   17b46:	jsr -78(a6)
   17b4a:	move.l d0,4(sp)
   17b4e:	move.l 4(sp),d0
}
   17b52:	movea.l (sp)+,a6
   17b54:	lea 12(sp),sp
   17b58:	rts

00017b5a <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17b5a:	lea -12(sp),sp
   17b5e:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17b60:	move.l 20(sp),12(sp)
   17b66:	move.l 24(sp),8(sp)
   17b6c:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17b72:	movea.l d0,a6
   17b74:	move.l 12(sp),d0
   17b78:	move.l 8(sp),d1
   17b7c:	jsr -42(a6)
   17b80:	move.l d0,4(sp)
   17b84:	move.l 4(sp),d0
}
   17b88:	movea.l (sp)+,a6
   17b8a:	lea 12(sp),sp
   17b8e:	rts

00017b90 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17b90:	lea -20(sp),sp
   17b94:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17b98:	move.l 36(sp),24(sp)
   17b9e:	move.l 40(sp),28(sp)
   17ba4:	move.l 44(sp),16(sp)
   17baa:	move.l 48(sp),20(sp)
   17bb0:	move.l 1cdf2 <MathIeeeDoubBasBase>,d0
   17bb6:	movea.l d0,a6
   17bb8:	move.l 24(sp),d0
   17bbc:	move.l 28(sp),d1
   17bc0:	move.l 16(sp),d2
   17bc4:	move.l 20(sp),d3
   17bc8:	jsr -42(a6)
   17bcc:	move.l d0,12(sp)
   17bd0:	move.l 12(sp),d0
}
   17bd4:	movem.l (sp)+,d2-d3/a6
   17bd8:	lea 20(sp),sp
   17bdc:	rts

00017bde <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17bde:	lea -12(sp),sp
   17be2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17be4:	move.l 20(sp),12(sp)
   17bea:	move.l 24(sp),8(sp)
   17bf0:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17bf6:	movea.l d0,a6
   17bf8:	move.l 12(sp),d0
   17bfc:	move.l 8(sp),d1
   17c00:	jsr -42(a6)
   17c04:	move.l d0,4(sp)
   17c08:	move.l 4(sp),d0
}
   17c0c:	movea.l (sp)+,a6
   17c0e:	lea 12(sp),sp
   17c12:	rts

00017c14 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17c14:	lea -12(sp),sp
   17c18:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17c1a:	move.l 20(sp),12(sp)
   17c20:	move.l 24(sp),8(sp)
   17c26:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17c2c:	movea.l d0,a6
   17c2e:	move.l 12(sp),d0
   17c32:	move.l 8(sp),d1
   17c36:	jsr -42(a6)
   17c3a:	move.l d0,4(sp)
   17c3e:	move.l 4(sp),d0
}
   17c42:	movea.l (sp)+,a6
   17c44:	lea 12(sp),sp
   17c48:	rts

00017c4a <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17c4a:	lea -20(sp),sp
   17c4e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17c52:	move.l 36(sp),24(sp)
   17c58:	move.l 40(sp),28(sp)
   17c5e:	move.l 44(sp),16(sp)
   17c64:	move.l 48(sp),20(sp)
   17c6a:	move.l 1cdf2 <MathIeeeDoubBasBase>,d0
   17c70:	movea.l d0,a6
   17c72:	move.l 24(sp),d0
   17c76:	move.l 28(sp),d1
   17c7a:	move.l 16(sp),d2
   17c7e:	move.l 20(sp),d3
   17c82:	jsr -42(a6)
   17c86:	move.l d0,12(sp)
   17c8a:	move.l 12(sp),d0
}
   17c8e:	movem.l (sp)+,d2-d3/a6
   17c92:	lea 20(sp),sp
   17c96:	rts

00017c98 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17c98:	lea -12(sp),sp
   17c9c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17c9e:	move.l 20(sp),12(sp)
   17ca4:	move.l 24(sp),8(sp)
   17caa:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17cb0:	movea.l d0,a6
   17cb2:	move.l 12(sp),d0
   17cb6:	move.l 8(sp),d1
   17cba:	jsr -42(a6)
   17cbe:	move.l d0,4(sp)
   17cc2:	move.l 4(sp),d0
}
   17cc6:	movea.l (sp)+,a6
   17cc8:	lea 12(sp),sp
   17ccc:	rts

00017cce <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17cce:	lea -12(sp),sp
   17cd2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17cd4:	move.l 20(sp),12(sp)
   17cda:	move.l 24(sp),8(sp)
   17ce0:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17ce6:	movea.l d0,a6
   17ce8:	move.l 12(sp),d0
   17cec:	move.l 8(sp),d1
   17cf0:	jsr -42(a6)
   17cf4:	move.l d0,4(sp)
   17cf8:	move.l 4(sp),d0
}
   17cfc:	movea.l (sp)+,a6
   17cfe:	lea 12(sp),sp
   17d02:	rts

00017d04 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17d04:	lea -32(sp),sp
   17d08:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17d0c:	move.l 48(sp),36(sp)
   17d12:	move.l 52(sp),40(sp)
   17d18:	move.l 56(sp),28(sp)
   17d1e:	move.l 60(sp),32(sp)
   17d24:	move.l 1cdf2 <MathIeeeDoubBasBase>,d0
   17d2a:	movea.l d0,a6
   17d2c:	move.l 36(sp),d0
   17d30:	move.l 40(sp),d1
   17d34:	move.l 28(sp),d2
   17d38:	move.l 32(sp),d3
   17d3c:	jsr -72(a6)
   17d40:	move.l d0,12(sp)
   17d44:	move.l d1,16(sp)
   17d48:	move.l 12(sp),20(sp)
   17d4e:	move.l 16(sp),24(sp)
   17d54:	move.l 20(sp),d0
   17d58:	move.l 24(sp),d1
}
   17d5c:	movem.l (sp)+,d2-d3/a6
   17d60:	lea 32(sp),sp
   17d64:	rts

00017d66 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17d66:	lea -12(sp),sp
   17d6a:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17d6c:	move.l 20(sp),12(sp)
   17d72:	move.l 24(sp),8(sp)
   17d78:	move.l 1cdea <MathIeeeSingBasBase>,d0
   17d7e:	movea.l d0,a6
   17d80:	move.l 12(sp),d0
   17d84:	move.l 8(sp),d1
   17d88:	jsr -72(a6)
   17d8c:	move.l d0,4(sp)
   17d90:	move.l 4(sp),d0
}
   17d94:	movea.l (sp)+,a6
   17d96:	lea 12(sp),sp
   17d9a:	rts

00017d9c <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17d9c:	lea -12(sp),sp
   17da0:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17da2:	move.l 20(sp),8(sp)
   17da8:	move.l 24(sp),12(sp)
   17dae:	move.l 1cdf6 <MathIeeeDoubTransBase>,d0
   17db4:	movea.l d0,a6
   17db6:	move.l 8(sp),d0
   17dba:	move.l 12(sp),d1
   17dbe:	jsr -102(a6)
   17dc2:	move.l d0,4(sp)
   17dc6:	move.l 4(sp),d0
}
   17dca:	movea.l (sp)+,a6
   17dcc:	lea 12(sp),sp
   17dd0:	rts

00017dd2 <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17dd2:	       lea -24(sp),sp
   17dd6:	       move.l a6,-(sp)
    if (x > 0) {
   17dd8:	       clr.l -(sp)
   17dda:	       move.l 40(sp),-(sp)
   17dde:	       jsr 17bde <__gtsf2>
   17de4:	       addq.l #8,sp
   17de6:	       tst.l d0
   17de8:	   ,-- ble.s 17e1a <atan2f+0x48>
        return IEEESPAtan(y / x);
   17dea:	   |   move.l 36(sp),-(sp)
   17dee:	   |   move.l 36(sp),-(sp)
   17df2:	   |   jsr 17928 <__divsf3>
   17df8:	   |   addq.l #8,sp
   17dfa:	   |   move.l d0,8(sp)
   17dfe:	   |   move.l 1cdee <MathIeeeSingTransBase>,d0
   17e04:	   |   movea.l d0,a6
   17e06:	   |   move.l 8(sp),d0
   17e0a:	   |   jsr -30(a6)
   17e0e:	   |   move.l d0,4(sp)
   17e12:	   |   move.l 4(sp),d0
   17e16:	,--|-- bra.w 17f7a <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17e1a:	|  '-> clr.l -(sp)
   17e1c:	|      move.l 40(sp),-(sp)
   17e20:	|      jsr 17c98 <__ltsf2>
   17e26:	|      addq.l #8,sp
   17e28:	|      tst.l d0
   17e2a:	|  ,-- bge.s 17e9e <atan2f+0xcc>
   17e2c:	|  |   clr.l -(sp)
   17e2e:	|  |   move.l 36(sp),-(sp)
   17e32:	|  |   jsr 17b5a <__gesf2>
   17e38:	|  |   addq.l #8,sp
   17e3a:	|  |   tst.l d0
   17e3c:	|  +-- blt.s 17e9e <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17e3e:	|  |   move.l 36(sp),-(sp)
   17e42:	|  |   move.l 36(sp),-(sp)
   17e46:	|  |   jsr 17928 <__divsf3>
   17e4c:	|  |   addq.l #8,sp
   17e4e:	|  |   move.l d0,24(sp)
   17e52:	|  |   move.l 1cdee <MathIeeeSingTransBase>,d0
   17e58:	|  |   movea.l d0,a6
   17e5a:	|  |   move.l 24(sp),d0
   17e5e:	|  |   jsr -30(a6)
   17e62:	|  |   move.l d0,20(sp)
   17e66:	|  |   move.l 20(sp),d0
   17e6a:	|  |   move.l d0,-(sp)
   17e6c:	|  |   jsr 17994 <__extendsfdf2>
   17e72:	|  |   addq.l #4,sp
   17e74:	|  |   move.l #1413754136,-(sp)
   17e7a:	|  |   move.l #1074340347,-(sp)
   17e80:	|  |   move.l d1,-(sp)
   17e82:	|  |   move.l d0,-(sp)
   17e84:	|  |   jsr 17864 <__adddf3>
   17e8a:	|  |   lea 16(sp),sp
   17e8e:	|  |   move.l d1,-(sp)
   17e90:	|  |   move.l d0,-(sp)
   17e92:	|  |   jsr 17d9c <__truncdfsf2>
   17e98:	|  |   addq.l #8,sp
   17e9a:	+--|-- bra.w 17f7a <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17e9e:	|  '-> clr.l -(sp)
   17ea0:	|      move.l 40(sp),-(sp)
   17ea4:	|      jsr 17c98 <__ltsf2>
   17eaa:	|      addq.l #8,sp
   17eac:	|      tst.l d0
   17eae:	|  ,-- bge.s 17f20 <atan2f+0x14e>
   17eb0:	|  |   clr.l -(sp)
   17eb2:	|  |   move.l 36(sp),-(sp)
   17eb6:	|  |   jsr 17c98 <__ltsf2>
   17ebc:	|  |   addq.l #8,sp
   17ebe:	|  |   tst.l d0
   17ec0:	|  +-- bge.s 17f20 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17ec2:	|  |   move.l 36(sp),-(sp)
   17ec6:	|  |   move.l 36(sp),-(sp)
   17eca:	|  |   jsr 17928 <__divsf3>
   17ed0:	|  |   addq.l #8,sp
   17ed2:	|  |   move.l d0,16(sp)
   17ed6:	|  |   move.l 1cdee <MathIeeeSingTransBase>,d0
   17edc:	|  |   movea.l d0,a6
   17ede:	|  |   move.l 16(sp),d0
   17ee2:	|  |   jsr -30(a6)
   17ee6:	|  |   move.l d0,12(sp)
   17eea:	|  |   move.l 12(sp),d0
   17eee:	|  |   move.l d0,-(sp)
   17ef0:	|  |   jsr 17994 <__extendsfdf2>
   17ef6:	|  |   addq.l #4,sp
   17ef8:	|  |   move.l #1413754136,-(sp)
   17efe:	|  |   move.l #1074340347,-(sp)
   17f04:	|  |   move.l d1,-(sp)
   17f06:	|  |   move.l d0,-(sp)
   17f08:	|  |   jsr 17d04 <__subdf3>
   17f0e:	|  |   lea 16(sp),sp
   17f12:	|  |   move.l d1,-(sp)
   17f14:	|  |   move.l d0,-(sp)
   17f16:	|  |   jsr 17d9c <__truncdfsf2>
   17f1c:	|  |   addq.l #8,sp
   17f1e:	+--|-- bra.s 17f7a <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17f20:	|  '-> clr.l -(sp)
   17f22:	|      move.l 40(sp),-(sp)
   17f26:	|      jsr 1795e <__eqsf2>
   17f2c:	|      addq.l #8,sp
   17f2e:	|      tst.l d0
   17f30:	|  ,-- bne.s 17f4c <atan2f+0x17a>
   17f32:	|  |   clr.l -(sp)
   17f34:	|  |   move.l 36(sp),-(sp)
   17f38:	|  |   jsr 17bde <__gtsf2>
   17f3e:	|  |   addq.l #8,sp
   17f40:	|  |   tst.l d0
   17f42:	|  +-- ble.s 17f4c <atan2f+0x17a>
        return PI / 2;
   17f44:	|  |   move.l #1070141403,d0
   17f4a:	+--|-- bra.s 17f7a <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17f4c:	|  '-> clr.l -(sp)
   17f4e:	|      move.l 40(sp),-(sp)
   17f52:	|      jsr 1795e <__eqsf2>
   17f58:	|      addq.l #8,sp
   17f5a:	|      tst.l d0
   17f5c:	|  ,-- bne.s 17f78 <atan2f+0x1a6>
   17f5e:	|  |   clr.l -(sp)
   17f60:	|  |   move.l 36(sp),-(sp)
   17f64:	|  |   jsr 17c98 <__ltsf2>
   17f6a:	|  |   addq.l #8,sp
   17f6c:	|  |   tst.l d0
   17f6e:	|  +-- bge.s 17f78 <atan2f+0x1a6>
        return -PI / 2;
   17f70:	|  |   move.l #-1077342245,d0
   17f76:	+--|-- bra.s 17f7a <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17f78:	|  '-> moveq #0,d0
    }
}
   17f7a:	'----> movea.l (sp)+,a6
   17f7c:	       lea 24(sp),sp
   17f80:	       rts

00017f82 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17f82:	lea -24(sp),sp
   17f86:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17f88:	move.l 32(sp),20(sp)
   17f8e:	move.l 36(sp),24(sp)
   17f94:	move.l 1cdf6 <MathIeeeDoubTransBase>,d0
   17f9a:	movea.l d0,a6
   17f9c:	move.l 20(sp),d0
   17fa0:	move.l 24(sp),d1
   17fa4:	jsr -96(a6)
   17fa8:	move.l d0,4(sp)
   17fac:	move.l d1,8(sp)
   17fb0:	move.l 4(sp),12(sp)
   17fb6:	move.l 8(sp),16(sp)
   17fbc:	move.l 12(sp),d0
   17fc0:	move.l 16(sp),d1
}
   17fc4:	movea.l (sp)+,a6
   17fc6:	lea 24(sp),sp
   17fca:	rts

00017fcc <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17fcc:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17fd0:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17fd4:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17fd8:	mulu.w 8(sp),d1
	addw	d1, d0
   17fdc:	add.w d1,d0
	swap	d0
   17fde:	swap d0
	clrw	d0
   17fe0:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17fe2:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17fe6:	mulu.w 10(sp),d1
	addl	d1, d0
   17fea:	add.l d1,d0
	rts
   17fec:	rts

00017fee <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17fee:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17ff0:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17ff4:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17ff8:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17ffe:	   ,-- bcc.s 18016 <__udivsi3+0x28>
	movel	d0, d2
   18000:	   |   move.l d0,d2
	clrw	d2
   18002:	   |   clr.w d2
	swap	d2
   18004:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   18006:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   18008:	   |   move.w d2,d0
	swap	d0
   1800a:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   1800c:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   18010:	   |   divu.w d1,d2
	movew	d2, d0
   18012:	   |   move.w d2,d0
	jra	6f
   18014:	,--|-- bra.s 18046 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   18016:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   18018:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   1801a:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   1801c:	|  |   cmpi.l #65536,d1
	jcc	4b
   18022:	|  '-- bcc.s 18018 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   18024:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   18026:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   1802c:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   1802e:	|      mulu.w d0,d1
	swap	d2
   18030:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   18032:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   18034:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   18036:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   18038:	|  ,-- bne.s 18044 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   1803a:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   1803c:	|  +-- bcs.s 18044 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   1803e:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   18042:	+--|-- bls.s 18046 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   18044:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   18046:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18048:	       rts

0001804a <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   1804a:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   1804c:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   1804e:	    move.l 12(sp),d1
	jpl	1f
   18052:	,-- bpl.s 18058 <__divsi3+0xe>
	negl	d1
   18054:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   18056:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   18058:	'-> move.l 8(sp),d0
	jpl	2f
   1805c:	,-- bpl.s 18062 <__divsi3+0x18>
	negl	d0
   1805e:	|   neg.l d0
	negb	d2
   18060:	|   neg.b d2

2:	movel	d1, sp@-
   18062:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18064:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   18066:	    jsr 17fee <__udivsi3>
	addql	#8, sp
   1806c:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   1806e:	    tst.b d2
	jpl	3f
   18070:	,-- bpl.s 18074 <__divsi3+0x2a>
	negl	d0
   18072:	|   neg.l d0

3:	movel	sp@+, d2
   18074:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18076:	    rts

00018078 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18078:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   1807c:	move.l 4(sp),d0
	movel	d1, sp@-
   18080:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18082:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   18084:	jsr 1804a <__divsi3>
	addql	#8, sp
   1808a:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   1808c:	move.l 8(sp),d1
	movel	d1, sp@-
   18090:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18092:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   18094:	jsr 17fcc <__mulsi3>
	addql	#8, sp
   1809a:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   1809c:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   180a0:	sub.l d0,d1
	movel	d1, d0
   180a2:	move.l d1,d0
	rts
   180a4:	rts

000180a6 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   180a6:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   180aa:	move.l 4(sp),d0
	movel	d1, sp@-
   180ae:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   180b0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   180b2:	jsr 17fee <__udivsi3>
	addql	#8, sp
   180b8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   180ba:	move.l 8(sp),d1
	movel	d1, sp@-
   180be:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   180c0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   180c2:	jsr 17fcc <__mulsi3>
	addql	#8, sp
   180c8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   180ca:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   180ce:	sub.l d0,d1
	movel	d1, d0
   180d0:	move.l d1,d0
	rts
   180d2:	rts

000180d4 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   180d4:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   180d6:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   180da:	jsr -516(a6)
    move.l (sp)+, a6
   180de:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   180e0:	rts

000180e2 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   180e2:	move.b d0,(a3)+
	rts
   180e4:	rts
